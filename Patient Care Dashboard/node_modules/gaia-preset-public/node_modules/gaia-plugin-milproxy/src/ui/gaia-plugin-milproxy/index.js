import * as Fusion from "MPageFusion";
import MilproxyUI from "./MilproxyUI";
import { runCommand } from "Gaia";
import Request from "xhr-promise";

const START_SERVER_EVENT = "MilproxyIndex::StartServer";
const STOP_SERVER_EVENT = "MilproxyIndex::StopServer";
const LOGIN_EVENT = "MilproxyIndex::Login";
const SERVER_NOT_STARTED = "ERROR_SERVER_NOT_STARTED";
const UNKNOWN_ERROR = "UNKNOWN_ERROR";

const updateStatus = (control) =>
      runCommand("milproxy", "status", {})
      .then((status) =>
            control
            .getChild("ui")
            .setProp("serverStatus", status)
            .update()
           );

const retrieveLogin = (control) =>
      runCommand(
          "milproxy",
          "readConfig"
      ).then((config) =>
          control
              .getChild("ui")
              .setProp("username", config.username)
              .setProp("domain", config.domain)
              .update()
      );

const saveLogin  = (login) =>
      runCommand(
          "milproxy",
          "saveConfig",
          { config: login }
      );

class MilproxyIndex extends Fusion.UIComponent {

    propChangeHandlers() {
        return {
        };
    }

    createChildren() {
        return [
            {
                ui : new MilproxyUI({
                    startEventName: START_SERVER_EVENT,
                    stopEventName: STOP_SERVER_EVENT,
                    loginEventName: LOGIN_EVENT
                })
            }
        ];
    }

    afterCreate() {
        updateStatus(this);
        retrieveLogin(this);

        this.on(
            START_SERVER_EVENT,
            () => runCommand("milproxy", "start", {})
                .then(updateStatus.bind(null, this))
        );
        this.on(
            STOP_SERVER_EVENT,
            () => runCommand("milproxy", "stop", {})
                .then(updateStatus.bind(null, this))
        );
        this.on(
            LOGIN_EVENT,
            (source, credentials) => {
                saveLogin({ username: credentials.username, domain: credentials.domain });
                runCommand("milproxy", "login", credentials)
                    .then((message) => alert("Login successful!"))
                    .catch((err) => alert(`Error: ${err}`))
            }
        );
    }

    view(el) {
        return this.renderChildren();
    }
};

export default {
	label: "Millennium Proxy",
	control: MilproxyIndex,
  showHelp: true
};
