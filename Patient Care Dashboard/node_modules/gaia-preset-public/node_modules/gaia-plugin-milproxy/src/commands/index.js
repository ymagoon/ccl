const path = require("path");
const spawn = require('child_process').spawn;
const ServerManager = require("gaia-servermanager");
const request = require("request-promise");


const readConfig = (gaia, args) =>
    gaia.runCommand(
        "config",
        "readPrivate",
        Object.assign(args, {
            plugin: "milproxy"
        })
        )
        .then((config) => config
            ? Promise.resolve(config)
            : Promise.resolve({})
        );

const saveConfig = (gaia, args, config) =>
    gaia.runCommand(
        "config",
        "writePrivate",
        {
            config: args.config,
            plugin: "milproxy"
        }
    );

const attachLoggersToProcess = (process) => {
    process.stdout.setEncoding("utf8");
    process.stdout.on("data", (data) => {
        console.log(data.toString());
    });
    process.stderr.on("data", (data) => {
        console.log(data.toString());
    });
    return process;
};

const startHandler = () =>
    Promise.resolve([
        attachLoggersToProcess(
            spawn("java", [
                "-jar",
                path.join(__dirname, "..", "..", "bin", "millennium-proxy.jar")
            ])
        )
    ]);

const stopHandler = (args, instance) =>
      Promise.resolve(instance.kill());

const manager = new ServerManager(startHandler, stopHandler);

const start = (gaia, args) => manager.start();

const stop = (gaia, args) => manager.stop();

const status = (gaia, args) =>
    Promise.resolve(manager.getStatus());

const doLogin = (user, pass, domain) =>
    request(
        `http://localhost:8081/mil/login?user=${user}&password=${pass}&domain=${domain}`
    )
    .then((data) => Promise.resolve(JSON.parse(data)))
    .then(
        (data) =>
            data.status === "error"
            ? Promise.reject(data.message) : Promise.resolve(data)
      );

const login = (gaia, args) =>
      status(gaia, args)
      .then(
          (status) =>
              status.isRunning
              ? doLogin(args.username, args.password, args.domain)
              : Promise.reject("SERVER_NOT_RUNNING")
      );

module.exports = {
    start,
    stop,
    status,
    login,
    readConfig,
    saveConfig
};
