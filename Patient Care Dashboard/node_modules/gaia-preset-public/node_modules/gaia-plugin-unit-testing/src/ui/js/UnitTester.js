import { atomic, composite, UIComponent } from "MPageFusion";
import { runCommand } from "Gaia";
import AnsiParser from "ansi-parser";
import BrowserContent from "./BrowserContent";
import settings from "./defaultSettings";
import i18n from "../../i18n/en_us";

const {
    panel: {
        ContentPanel
    },
    button: {
        Button
    },
    container: {
        Container
    }
} = atomic;

const {
    banner: {
        BannerItem
    }
} = composite;

const RUN_TESTS = "UnitTester::runTests";

/**
 * This function calls the readConfig command for the unit tester
 * @function readConfig
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {Promise} A promise that runs the readConfig command
 */
const readConfig = tester => runCommand("unit-testing", "readConfig");

/**
 * This function combines the testers settings with the config object from gaia.json and calls checkCIMode
 * @function updateSettings
 * @param {Object} config The gaia.json settings
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {Promise} A resolved promise that returns the combined settings
 */
const updateSettings = (config, tester) => {
    const combinedSettings = Object.assign({}, tester._state.settings, config);
    checkCIMode(combinedSettings.singleRun, tester);
    tester.setState({settings: combinedSettings});
    tester.update();
    return Promise.resolve(combinedSettings);
};

/**
 * This function calls the saveConfig command for the unit tester
 * @function saveConfig
 * @param {Object} settings The current settings for the unit tester
 * @returns {Promise} A promise that runs the saveConfig command
 */
const saveConfig = settings => runCommand("unit-testing", "saveConfig", { settings: settings });

/**
 * This function calls the run command for the unit tester
 * @function runUnitTests
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {Promise} A promise that runs the run command
 */
const runUnitTests = tester => runCommand("unit-testing", "run", {});

/**
 * This function sets CI mode to false, calls update, and cals the readResults command for the unit tester
 * @function readOutput
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {Promise} A promise that runs the readResults command
 */
const readOutput = (tester) => {
    tester.setProp("inCIMode", false);
    tester.update();
    return runCommand("unit-testing", "readResults", {});
};

/**
 * This function checks the singleRun parameter and sets the CI mode to true if singleRun is false and calls update.
 * @function readOutput
 * @param {Boolean} singleRun A value to represent if the user wants to run the tests once or not
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {undefined}
 */
const checkCIMode = (singleRun, tester) => {
    if(!singleRun) {
        tester.setProp("inCIMode", true);
        tester.update();
    }
};

/**
 * This function handles showing an error (and clearing other content) banner if an error occurs.
 * @function errorOccurred
 * @param {Object} error The error object that was thrown
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {undefined}
 */
const errorOccurred = (error, tester) => {
    const errMsg = error.message || error;

    tester.getChild("runTestsBtn").setProp("disabled", false);
    tester.getChild("alertBanner").setProp("description", errMsg);

    tester.setProp("content", []);
    tester.getChild("container").removeAllChildren();
    tester.setProp("showError", true);

    tester.update();
} ;

/**
 * This function is called when the Config tab has had changes saved. The config does not need to be checked
 * since it was just updated.
 * @function runAfterConfigSave
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {undefined}
 */
export const runAfterConfigSave = tester => {
    tester.getChild("runTestsBtn").setProp("disabled", true);
    tester.setProp("content", []);
    runUnitTests(tester)
        .then(() => readOutput(tester))
        .then((results) => parseBrowsers(tester, results))
        .catch((error) => errorOccurred(error, tester));
};

/**
 * Creates failure array from results send by test exeuction over Jest
 * @param  {object} results jest execution object
 * @return {Array<object>}  Returns an array that can be passed down to BrowserContent
 */
const createFailureArray = (results) => {
    if (results.numFailedTests === 0) {
        return [];
    }

    const failedAssertions = results.testResults
        .filter(testResult => testResult.status === "failed")
        .map(failedTestResult =>
            failedTestResult.assertionResults.filter(assertionResult => assertionResult.status === "failed")
        )
        .reduce((failedAssertionA, failedAssertionB) => failedAssertionA.concat(failedAssertionB));

    return failedAssertions.map((failedTest) => {
        return {
            suite: [failedTest.title],
            description: failedTest.fullName,
            log: failedTest.failureMessages
        };
    });
};

/**
 * Creates an array of error messages
 * @param  {object} results test resuts
 * @return {array<string>}  Returns an array of error messages
 */
const createErrorArray = (results) => {
    if (results.numRuntimeErrorTestSuites === 0) {
        return [];
    }

    return results.testResults
        .filter(testResult => testResult.status === "failed")
        .map(erroredTest => `${erroredTest.name}${AnsiParser.removeAnsi(erroredTest.message)}`);

};

/**
 * Loops through each browser in the output. Creates a new ContentPanel for each browser with a header
 * and content. Removes the spinner.
 * @function parseBrowsers
 * @param {UnitTester} tester The current UnitTester object instance
 * @param {Object} results The test results output
 * @returns {undefined}
 */
const parseBrowsers = (tester, results) => {
    readConfig(tester).then((gaiaConfig) => {
        switch (gaiaConfig.testRunner) {
            case "JEST":
                tester.getProp("content").push(new ContentPanel({
                    headerDisplay: "Node",
                    content: [
                        new BrowserContent({
                            browsers: {
                                browser: {
                                    lastResult: {
                                        success: results.numPassedTests,
                                        failed: results.numFailedTests,
                                        skipped: results.numPendingTests,
                                        error: results.numRuntimeErrorTestSuites
                                    }
                                },
                                errors: createErrorArray(results),
                                failures: createFailureArray(results)
                            }
                        })
                    ],
                    classNames: "mpageui-u-margin-top-relative-loose"
                }));
                break;
            case "KARMA":
            default:
                results.browsers.forEach((browsers) => {
                    tester.getProp("content").push(new ContentPanel({
                        headerDisplay: browsers.browser.name,
                        content: [
                            new BrowserContent({
                                browsers
                            })
                        ],
                        classNames: "mpageui-u-margin-top-relative-loose"
                    }));
                });
        }

        tester.getChild("container").replaceAllChildren(tester.getProp("content"));
        tester.getChild("runTestsBtn").setProp("disabled", false);
        tester.setProp("showError", false);
        tester.update();
    });
};

/**
 * @class UnitTester
 */
class UnitTester extends UIComponent {

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            content: [],
            inCIMode: false, //true if singleRun is set to false
            showError: false
        };
    }

    /**
     * @inheritdoc
     */
    beforeCreate() {
        this._state = {
            settings
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                alertBanner: new BannerItem({
                    description: "Something went wrong",
                    type: BannerItem.TYPE.ERROR,
                    enableDismissClick: false,
                    moreDetailText: "Try changing some settings on the 'Config' tab.",
                    classNames: "mpageui-u-margin-relative-tight"
                })
            },
            {
                runTestsBtn: new Button({
                    type: Button.TYPE.SECONDARY,
                    clickEventName: RUN_TESTS,
                    display: i18n.content.unitTester.runTests
                })
            },
            {
                container: new Container()
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(RUN_TESTS, () => {
            this.stopPropagation(RUN_TESTS);
            this.getChild("runTestsBtn").setProp("disabled", true);
            this.setProp("content", []);
            this.update();
            readConfig(this) // reads the gaia.json settings
                .then((config) => updateSettings(config, this)) // merges it with default settings
                .then((config) => saveConfig(config)) //saves off final settings to gaia.json
                .then(() => runUnitTests(this)) //runs karma with gaia.json settings used
                .then(() => readOutput(this))
                .then((results) => parseBrowsers(this, results))
                .catch((error) => errorOccurred(error, this));
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            {},
            [
                el("div", {}, mappedChildren.runTestsBtn.render()),
                ...(props.inCIMode ? [el("div", {}, i18n.content.unitTester.inCIMode)] : []),
                ...(props.showError ? [mappedChildren.alertBanner.render()] : []),
                el("div", {}, mappedChildren.container.render())
            ]
        );
    }
}

export default UnitTester;
