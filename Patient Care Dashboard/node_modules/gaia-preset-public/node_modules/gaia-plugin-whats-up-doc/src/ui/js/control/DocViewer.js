/**
 * @module whatsupdoc/ui/DocViewer
 * @requires MPageFusion
 * @requires module:whatsupdoc/i18n
 * @requires Gaia
 * @requires module:whatsupdoc/ui/control/Marked
 * @requires classnames
 * @requires module:wud/constants
 */
import { atomic, composite, UIComponent } from "MPageFusion";
import i18n from "../../../i18n/en_us";
import { runCommand } from "Gaia";
import classnames from "classnames";
import Marked from "./Marked";
import * as constants from "../../../constants";

const {
    button: {
        Button
    },
    panel: {
        ContentPanel
    },
    icon: {
        svg: {
            content: {
                Refresh
            }
        }
    }
} = atomic;

const {
    banner: {
        BannerItem
    }
} = composite;

/**
 * @enum {String} module:whatsupdoc/ui/control/DocViewer~EVENT
 */
const EVENT = {
    ACTION: {
        LOG_ISSUE: "WUD::DOCVIEWER::ACTION::LOG_ISSUE"
    },
    REFRESH: "WUD::API::REFRESH",
    EXPORT: "WUD::API::EXPORT",
    BANNER: {
        DISMISS_EXPORT_ERROR: "WUD::DOCVIEWER::BANNER::EXPORT::DISMISS",
        DISMISS_REFRESH_ERROR: "WUD::DOCVIEWER::BANNER::REFRESH::DISMISS",
        DISMISS_GENERIC_ERROR: "WUD::DOCVIEWER::BANNER::GENERIC::DISMISS"
    }
};

/**
 * @class module:whatsupdoc/ui/control/DocViewer~DocViewerHeader
 */
class DocViewerHeader extends UIComponent {
    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                refresh: new Button({
                    icon: new Refresh(),
                    type: Button.TYPE.SECONDARY,
                    clickEventName: EVENT.REFRESH
                })
            },
            {
                export: new Button({
                    display: i18n.command.export.name,
                    type: Button.TYPE.SECONDARY,
                    clickEventName: EVENT.EXPORT
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "header",
            {
                style: "flex-grow:1;",
                class: classnames("mpageui-u-flexgrid-row")
            },
            [
                el(
                    "div",
                    {
                        class: classnames(
                            "mpageui-u-flexgrid-col-6",
                            "mpageui-u-flexgrid-row",
                            "mpageui-u-flexgrid-row--justify-start"
                        )
                    },
                    mappedChildren.refresh.render()
                ),
                el(
                    "div",
                    {
                        class: classnames(
                            "mpageui-u-flexgrid-col-6",
                            "mpageui-u-flexgrid-row",
                            "mpageui-u-flexgrid-row--justify-end"
                        )
                    },
                    mappedChildren.export.render()
                )
            ]
        )
    }
}

/**
 * @readonly
 * @member {String} module:whatsupdoc/ui/control/DocViewer~NAMESPACE
 */
const NAMESPACE = "wud--DocViewer";

const CLASSES = {
    BANNER: "wud--DocViewer-BannerSection"
};

let key = 0;

/**
 * @alias module:whatsupdoc/ui/control/DocViewer
 */
class DocViewer extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            key: key++,
            displayExportError: false,
            displayGenericError: false,
            displayRefreshError: false
        }
    }
    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                contentPanel: new ContentPanel({
                    headerContent: [
                        new DocViewerHeader()
                    ],
                    bodyClassNames: "mpageui-u-pad-relative-base",
                    content: [
                        new (class extends UIComponent {
                            createChildren() {
                                return [
                                    {
                                        refresh: new Button({
                                            icon: new Refresh(),
                                            type: Button.TYPE.SECONDARY,
                                            clickEventName: EVENT.REFRESH
                                        })
                                    }
                                ];
                            }

                            view(el, props, children, mappedChildren) {
                                return el(
                                    "p",
                                    {
                                        class: classnames(
                                            "mpageui-u-flexgrid-row",
                                            "mpageui-u-flexgrid-row--align-middle",
                                            "mpageui-u-margin-relative-base"
                                        )
                                    },
                                    [
                                        "Click refresh (",
                                        mappedChildren.refresh.render(),
                                        ") to see what's up with your documentation!"
                                    ]
                                );
                            }
                        })()
                    ]
                })
            },
            {
                exportErrorBanner: new BannerItem({
                    bannerDismissClickEventName: EVENT.BANNER.DISMISS_EXPORT_ERROR,
                    title: i18n.banner.error.export.title,
                    description: i18n.banner.error.export.description,
                    moreDetailText: i18n.banner.error.export.more_details,
                    type: BannerItem.TYPE.ALERT
                })
            },
            {
                genericErrorBanner: new BannerItem({
                    bannerDismissClickEventName: EVENT.BANNER.DISMISS_GENERIC_ERROR,
                    title: i18n.banner.error.generic.title,
                    description: i18n.banner.error.generic.description,
                    actionContent: new Button({
                        display: i18n.button.log_issue,
                        clickEventName: EVENT.ACTION.LOG_ISSUE
                    }),
                    type: BannerItem.TYPE.ALERT
                })
            },
            {
                refreshErrorBanner: new BannerItem({
                    bannerDismissClickEventName: EVENT.BANNER.DISMISS_REFRESH_ERROR,
                    title: i18n.banner.error.refresh.title,
                    description: i18n.banner.error.refresh.description,
                    moreDetailText: i18n.banner.error.refresh.more_details,
                    type: BannerItem.TYPE.ALERT
                })
            }
        ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        // Scan the latest documentation for the current artifact
        this.on(EVENT.REFRESH, () => {
            this.stopPropagation(EVENT.REFRESH);

            runCommand("whats-up-doc", "toMarkdown", {})
                .then(markdown => this
                    .getChild("contentPanel")
                    .setProp("content", [
                        new Marked({ value: markdown })
                    ])
                    .update())
                .then(_ => this.setProp("displayRefreshError", false).update())
                .catch((err) => {
                    console.log(err);

                    if (err.message === constants.error.config.getFiles) {
                        this.setProp("displayRefreshError", true).update();
                    } else {
                        this.setProp("displayGenericError", true).update();
                    }
                })
        });

        // Export a Markdown file
        this.on(EVENT.EXPORT, () => {
            this.stopPropagation(EVENT.EXPORT);

            runCommand("whats-up-doc", "toFile", {})
                .then(_ => this.setProp("displayExportError", false).update())
                .catch((err) => {
                    console.log(err);

                    if (err.message === constants.error.config.getFiles) {
                        this.setProp("displayRefreshError", true).update();
                    } else if (err.message === constants.error.config.getMarkdownOutputLocation) {
                        this.setProp("displayExportError", true).update();
                    } else {
                        this.setProp("displayGenericError", true).update();
                    }
                })
        });

        this.on(EVENT.BANNER.DISMISS_REFRESH_ERROR, () => {
            this.stopPropagation(EVENT.BANNER.DISMISS_REFRESH_ERROR);
            this.setProp("displayRefreshError", false).update()
        });

        this.on(EVENT.BANNER.DISMISS_EXPORT_ERROR, () => {
            this.stopPropagation(EVENT.BANNER.DISMISS_EXPORT_ERROR);
            this.setProp("displayExportError", false).update()
        });

        this.on(EVENT.BANNER.DISMISS_GENERIC_ERROR, () => {
            this.stopPropagation(EVENT.BANNER.DISMISS_GENERIC_ERROR);
            this.setProp("displayGenericError", false).update();
        });

        this.on(EVENT.ACTION.LOG_ISSUE, () => {
            this.stopPropagation(EVENT.ACTION.LOG_ISSUE);
            window.open("https://github.cerner.com/MPagesEcosystem/gaia-plugin-whats-up-doc/issues");
        });
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "section",
            {
                class: NAMESPACE,
                key: props.key
            },
            [
                el(
                    "div",
                    {
                        class: CLASSES.BANNER
                    },
                    [
                        props.displayGenericError ? mappedChildren.genericErrorBanner.render() : null,
                        props.displayExportError ? mappedChildren.exportErrorBanner.render() : null,
                        props.displayRefreshError ? mappedChildren.refreshErrorBanner.render() : null
                    ]
                ),
                mappedChildren.contentPanel.render()
            ]
        );
    }
}

export default DocViewer;
