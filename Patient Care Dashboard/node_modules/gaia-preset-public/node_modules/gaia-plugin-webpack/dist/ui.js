(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("MPageFusion"), require("Gaia"));
	else if(typeof define === 'function' && define.amd)
		define(["MPageFusion", "Gaia"], factory);
	else if(typeof exports === 'object')
		exports["gaia-plugin-webpack"] = factory(require("MPageFusion"), require("Gaia"));
	else
		root["gaia-plugin-webpack"] = factory(root["MPageFusion"], root["Gaia"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(3);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var Fusion = _interopRequireWildcard(__webpack_require__(0));

var _WebpackUI = _interopRequireDefault(__webpack_require__(4));

var _Gaia = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var writeConfig = function writeConfig(control, config) {
  if (control._configTimeout) {
    clearTimeout(control._configTimeout);
  }

  control._configTimeout = setTimeout(function () {
    return (0, _Gaia.runCommand)("webpack", "writeFullConfig", {
      config: config
    });
  }, 500);
};

var removeTargetName = function removeTargetName(target) {
  var clone = Object.assign({}, target);
  delete clone.name;
  return clone;
};

var readTargetsArray = function readTargetsArray(targets) {
  return targets.reduce(function (result, target) {
    var _Object$assign;

    return Object.assign({}, result, (_Object$assign = {}, _Object$assign[target.name] = removeTargetName(target), _Object$assign));
  }, {});
};

var makeTargetsArray = function makeTargetsArray(targets) {
  return Object.keys(targets).map(function (targetName) {
    return Object.assign({}, targets[targetName], {
      name: targetName
    });
  });
};

var TARGETS_CHANGE = "Internal::WebpackIndex::TargetsChange";
var RUN_DEV_SERVER = "Internal::WebpackIndex::RunDevServer";
var RUN_WATCH_SERVER = "Internal::WebpackIndex::RunWatcherServer";
var STOP_DEV_SERVER = "Internal::WebpackIndex::StopDevServer";
var STOP_WATCH_SERVER = "Internal::WebpackIndex::StopWatchServer";

var WebpackIndex =
/*#__PURE__*/
function (_Fusion$UIComponent) {
  _inheritsLoose(WebpackIndex, _Fusion$UIComponent);

  function WebpackIndex() {
    return _Fusion$UIComponent.apply(this, arguments) || this;
  }

  var _proto = WebpackIndex.prototype;

  _proto.createChildren = function createChildren() {
    return [{
      ui: new _WebpackUI["default"]({
        targetsChangeEventName: TARGETS_CHANGE,
        runDevServerEventName: RUN_DEV_SERVER,
        runWatchServerEventName: RUN_WATCH_SERVER,
        stopDevServerEventName: STOP_DEV_SERVER,
        stopWatchServerEventName: STOP_WATCH_SERVER
      })
    }];
  };

  _proto.afterCreate = function afterCreate() {
    var _this = this;

    (0, _Gaia.runCommand)("webpack", "readFullConfig", {}).then(function (fullConfig) {
      return _this.getChild("ui").setProp("targets", fullConfig.targets ? makeTargetsArray(fullConfig.targets) : {}).update();
    });
    (0, _Gaia.openWebsocket)("webpack", "devServerStatus").then(function (ws) {
      ws.onmessage = function (msg) {
        var message = JSON.parse(msg.data);

        _this.getChild("ui").setProp("isDevServerRunning", message.isRunning).update();
      };
    });
    (0, _Gaia.openWebsocket)("webpack", "watcherStatus").then(function (ws) {
      ws.onmessage = function (msg) {
        var message = JSON.parse(msg.data);

        _this.getChild("ui").setProp("isWatchServerRunning", message.isRunning).update();
      };
    });
    this.on(TARGETS_CHANGE, function (source, newTargets) {
      writeConfig(_this, {
        targets: readTargetsArray(newTargets)
      });

      _this.getChild("ui").setProp("targets", newTargets).update();
    });
    this.on(RUN_DEV_SERVER, function (source, target) {
      (0, _Gaia.runCommand)("webpack", "startDevServer", {
        target: target.name
      });
    });
    this.on(STOP_DEV_SERVER, function (source) {
      return (0, _Gaia.runCommand)("webpack", "stopDevServer");
    });
    this.on(RUN_WATCH_SERVER, function (source, target) {
      (0, _Gaia.runCommand)("webpack", "startWatcher", {
        target: target.name
      });
    });
    this.on(STOP_WATCH_SERVER, function (source) {
      return (0, _Gaia.runCommand)("webpack", "stopWatcher");
    });
  };

  _proto.view = function view(el) {
    return this.renderChildren();
  };

  return WebpackIndex;
}(Fusion.UIComponent);

;
var _default = {
  label: "Webpack",
  control: WebpackIndex,
  showHelp: true
};
exports["default"] = _default;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var Fusion = _interopRequireWildcard(__webpack_require__(0));

var _TargetList = _interopRequireDefault(__webpack_require__(5));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var forwardProp = Fusion.helpers.props.forwardProp;
var Button = Fusion.atomic.button.Button;
var TARGETS_CHANGE = "Internal::WebpackUI::TargetsChange";
var ADD_TARGET = "Internal::WebpackUI::AddTarget";
var RUN_DEV_SERVER = "Internal::WebpackUI::RunDevServer";
var RUN_WATCH_SERVER = "Internal::WebpackUI::RunWatchServer";
var STOP_DEV_SERVER = "Internal::WebpackUI::StopDevServer";
var STOP_WATCH_SERVER = "Internal::WebpackUI::StopWatchServer";

var WebpackUI =
/*#__PURE__*/
function (_Fusion$UIComponent) {
  _inheritsLoose(WebpackUI, _Fusion$UIComponent);

  function WebpackUI() {
    return _Fusion$UIComponent.apply(this, arguments) || this;
  }

  var _proto = WebpackUI.prototype;

  _proto.initialProps = function initialProps() {
    return {
      targets: [],
      targetsChangeEventName: null,
      runDevServerEventName: null,
      runWatchServerEventName: null,
      stopDevServerEventName: null,
      stopWatchServerEventName: null,
      isDevServerRunning: false,
      isWatchServerRunning: false
    };
  };

  _proto.propChangeHandlers = function propChangeHandlers() {
    return {
      targets: forwardProp(this, "targets", "targetList")
    };
  };

  _proto.dependentPropChangeHandlers = function dependentPropChangeHandlers() {
    var _this = this;

    return [["isDevServerRunning", "isWatchServerRunning", function (isDevServerRunning, isWatchServerRunning) {
      return _this.getChild("targetList").setProp("showServerButtons", !isDevServerRunning && !isWatchServerRunning);
    }]];
  };

  _proto.createChildren = function createChildren() {
    return [{
      targetList: new _TargetList["default"]({
        targetsChangeEventName: TARGETS_CHANGE,
        runDevServerEventName: RUN_DEV_SERVER,
        runWatchServerEventName: RUN_WATCH_SERVER
      })
    }, {
      addTarget: new Button({
        display: "Add target",
        clickEventName: ADD_TARGET
      })
    }, {
      stopDevServer: new Button({
        classNames: "mpageui-u-margin-absolute-loose",
        display: "Stop",
        clickEventName: STOP_DEV_SERVER
      })
    }, {
      stopWatchServer: new Button({
        classNames: "mpageui-u-margin-absolute-loose",
        display: "Stop",
        clickEventName: STOP_WATCH_SERVER
      })
    }];
  };

  _proto.afterCreate = function afterCreate() {
    var _this2 = this;

    this.convertEventUsingProp(TARGETS_CHANGE, "targetsChangeEventName", function (source, targets) {
      return [_this2, targets];
    });
    this.convertEventUsingProp(ADD_TARGET, "targetsChangeEventName", function (source) {
      return [_this2, _this2.getProp("targets").concat({
        name: "New target"
      })];
    });
    this.convertEventUsingProp(RUN_DEV_SERVER, "runDevServerEventName", function (source, target) {
      return [_this2, target];
    });
    this.convertEventUsingProp(RUN_WATCH_SERVER, "runWatchServerEventName", function (source, target) {
      return [_this2, target];
    });
    this.convertEventUsingProp(STOP_WATCH_SERVER, "stopWatchServerEventName", function (source) {
      return [_this2];
    });
    this.convertEventUsingProp(STOP_DEV_SERVER, "stopDevServerEventName", function (source) {
      return [_this2];
    });
  };

  _proto.view = function view(el, props, children, mChildren) {
    return [props.isDevServerRunning ? el("div", {}, ["Dev server running", mChildren.stopDevServer.render()]) : [], props.isWatchServerRunning ? el("div", {}, ["Watch server running", mChildren.stopWatchServer.render()]) : []].concat([mChildren.targetList.render(), mChildren.addTarget.render()]);
  };

  return WebpackUI;
}(Fusion.UIComponent);

exports["default"] = WebpackUI;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var Fusion = _interopRequireWildcard(__webpack_require__(0));

var _Target = _interopRequireDefault(__webpack_require__(6));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var TARGET_CHANGE = "Internal::TargetList::TargetChange";
var TARGET_DELETED = "Internal::TargetList::TargetDelete";
var RUN_WATCH_SERVER = "Internal::TargetList::RunWatchServer";
var RUN_DEV_SERVER = "Internal::TargetList::RunDevServer";

var TargetList =
/*#__PURE__*/
function (_Fusion$UIComponent) {
  _inheritsLoose(TargetList, _Fusion$UIComponent);

  function TargetList() {
    return _Fusion$UIComponent.apply(this, arguments) || this;
  }

  var _proto = TargetList.prototype;

  _proto.initialProps = function initialProps() {
    return {
      targets: {},
      targetsChangeEventName: null,
      runWatchServerEventName: null,
      runDevServerEventName: null,
      showServerButtons: true
    };
  };

  _proto.dependentPropChangeHandlers = function dependentPropChangeHandlers() {
    var _this = this;

    return [["targets", "showServerButtons", function (targets, showServerButtons) {
      return _this.replaceAllChildren(targets.map(function (target, i) {
        return new _Target["default"]({
          targetChangeEventName: TARGET_CHANGE,
          targetSettings: target,
          deleteEventName: TARGET_DELETED,
          runDevServerEventName: RUN_DEV_SERVER,
          runWatchServerEventName: RUN_WATCH_SERVER,
          _targetIndex: i,
          showServerButtons: showServerButtons
        });
      }));
    }]];
  };

  _proto.afterCreate = function afterCreate() {
    var _this2 = this;

    this.convertEventUsingProp(TARGET_DELETED, "targetsChangeEventName", function (source) {
      var newTargetList = _this2.getProp("targets").slice(0);

      newTargetList.splice(source.getProp("_targetIndex"), 1);
      return [_this2, newTargetList];
    });
    this.convertEventUsingProp(TARGET_CHANGE, "targetsChangeEventName", function (source, newTarget) {
      var newTargetList = _this2.getProp("targets").slice(0);

      newTargetList[source.getProp("_targetIndex")] = newTarget;
      return [_this2, newTargetList];
    });
    this.convertEventUsingProp(RUN_WATCH_SERVER, "runWatchServerEventName", function (source, target) {
      return [_this2, target];
    });
    this.convertEventUsingProp(RUN_DEV_SERVER, "runDevServerEventName", function (source, target) {
      return [_this2, target];
    });
  };

  _proto.view = function view(el, props, children) {
    return this.renderChildren();
  };

  return TargetList;
}(Fusion.UIComponent);

exports["default"] = TargetList;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var Fusion = _interopRequireWildcard(__webpack_require__(0));

var gaia = _interopRequireWildcard(__webpack_require__(1));

var _Externals = _interopRequireDefault(__webpack_require__(7));

var _MockConfig = _interopRequireDefault(__webpack_require__(8));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var Button = Fusion.atomic.button.Button;
var JsonForm = gaia.controls.JsonForm;
var RUN_DEV_SERVER_CLICK = "Target::RunDevServerClick";
var RUN_WATCH_SERVER_CLICK = "Target::RunWatchServerClick";
var DELETE_CLICK = "Target::DeleteClick";
var SETTINGS_CHANGE = "Target::SettingsChange";
var EXTERNALS_CHANGE = "Target::ExternalsChange";
var MOCK_CHANGE = "Target::MocksChange";

var serverButtons = function serverButtons(props, mChildren) {
  return props.showServerButtons ? [mChildren.runDevServer.render(), mChildren.runWatchServer.render()] : [];
};

var Target =
/*#__PURE__*/
function (_Fusion$UIComponent) {
  _inheritsLoose(Target, _Fusion$UIComponent);

  function Target() {
    return _Fusion$UIComponent.apply(this, arguments) || this;
  }

  var _proto = Target.prototype;

  _proto.initialProps = function initialProps() {
    return {
      targetSettings: {},
      targetChangeEventName: null,
      runDevServerEventName: null,
      runWatchServerEventName: null,
      deleteEventName: null,
      showServerButtons: true
    };
  };

  _proto.propChangeHandlers = function propChangeHandlers() {
    var _this = this;

    return {
      targetSettings: function targetSettings(_targetSettings) {
        _this.getChild("settings").setProp("jsonObject", _targetSettings);

        _this.getChild("externals").setProp("externals", _targetSettings.externals);

        _this.getChild("mockConfig").setProp("mockConfig", _targetSettings.mockConfig);
      }
    };
  };

  _proto.createChildren = function createChildren() {
    return [{
      settings: new JsonForm({
        changeEventName: SETTINGS_CHANGE,
        formDefinition: [{
          key: "name",
          label: "Target name",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "devtool",
          label: "Dev tool",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "fileName",
          label: "Output file name",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "cssFileName",
          label: "CSS Output file name",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "outputFolder",
          label: "Output folder",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "libraryName",
          label: "Library name",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "entryPoints",
          label: "Entry points (comma separated)",
          type: JsonForm.CONTROL_TYPES.TEXTARRAY
        }, {
          key: "sourceFolders",
          label: "Source Folders (comma separated)",
          type: JsonForm.CONTROL_TYPES.TEXTARRAY
        }, {
          key: "contentBase",
          label: "Content Base",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "publicPath",
          label: "Public Path",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "port",
          label: "Port",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "autoRefresh",
          label: "Auto Refresh",
          type: JsonForm.CONTROL_TYPES.CHECKBOX
        }, {
          key: "includeCSS",
          label: "Include CSS in bundle",
          type: JsonForm.CONTROL_TYPES.CHECKBOX
        }, {
          key: "envify",
          label: "Envify",
          type: JsonForm.CONTROL_TYPES.CHECKBOX
        }, {
          key: "minify",
          label: "Minify",
          type: JsonForm.CONTROL_TYPES.CHECKBOX
        }, {
          key: "includePolyfills",
          label: "Include Polyfills",
          type: JsonForm.CONTROL_TYPES.CHECKBOX
        }]
      })
    }, {
      runDevServer: new Button({
        clickEventName: RUN_DEV_SERVER_CLICK,
        type: Button.TYPE.LINK,
        display: "Run dev server"
      })
    }, {
      runWatchServer: new Button({
        clickEventName: RUN_WATCH_SERVER_CLICK,
        type: Button.TYPE.LINK,
        display: "Run watch server"
      })
    }, {
      "delete": new Button({
        clickEventName: DELETE_CLICK,
        type: Button.TYPE.LINK,
        display: "Delete"
      })
    }, {
      externals: new _Externals["default"]({
        externalsChangeEventName: EXTERNALS_CHANGE
      })
    }, {
      mockConfig: new _MockConfig["default"]({
        mockChangeEventName: MOCK_CHANGE
      })
    }];
  };

  _proto.afterCreate = function afterCreate() {
    var _this2 = this;

    this.convertEventUsingProp(SETTINGS_CHANGE, "targetChangeEventName", function (source, newTarget) {
      return [_this2, newTarget];
    });
    this.convertEventUsingProp(EXTERNALS_CHANGE, "targetChangeEventName", function (source, externals) {
      return [_this2, Object.assign({}, _this2.getProp("targetSettings"), {
        externals: externals
      })];
    });
    this.convertEventUsingProp(MOCK_CHANGE, "targetChangeEventName", function (source, mockConfig) {
      return [_this2, Object.assign({}, _this2.getProp("targetSettings"), {
        mockConfig: mockConfig
      })];
    });
    this.convertEventUsingProp(DELETE_CLICK, "deleteEventName", function (source) {
      return [_this2];
    });
    this.convertEventUsingProp(RUN_DEV_SERVER_CLICK, "runDevServerEventName", function (source) {
      return [_this2, _this2.getProp("targetSettings")];
    });
    this.convertEventUsingProp(RUN_WATCH_SERVER_CLICK, "runWatchServerEventName", function (source) {
      return [_this2, _this2.getProp("targetSettings")];
    });
  };

  _proto.view = function view(el, props, children, mChildren) {
    return [el("h2", {}, props.targetSettings.name), el("div", {
      "class": "gaia-webpack-targetActions"
    }, serverButtons(props, mChildren).concat([mChildren["delete"].render()])), el("div", {
      "class": "gaia-section"
    }, [mChildren.settings.render(), mChildren.externals.render(), mChildren.mockConfig.render()])];
  };

  return Target;
}(Fusion.UIComponent);

exports["default"] = Target;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var Fusion = _interopRequireWildcard(__webpack_require__(0));

var gaia = _interopRequireWildcard(__webpack_require__(1));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var Table = Fusion.atomic.table.Table;
var JsonForm = gaia.controls.JsonForm;
var Button = Fusion.atomic.button.Button;
var DELETE_CLICK = "Externals::DeleteClick";
var NEW_EXTERNAL_CHANGE = "Externals::NewExternalChange";
var NEW_EXTERNAL_CLICK = "Externals::NewExternalClick";

var removeVariable = function removeVariable(variableName, externals) {
  delete externals[variableName];
  return externals;
};

var Externals =
/*#__PURE__*/
function (_Fusion$UIComponent) {
  _inheritsLoose(Externals, _Fusion$UIComponent);

  function Externals() {
    return _Fusion$UIComponent.apply(this, arguments) || this;
  }

  var _proto = Externals.prototype;

  _proto.initialProps = function initialProps() {
    return {
      externals: {},
      externalsChangeEventName: null
    };
  };

  _proto.createChildren = function createChildren() {
    return [{
      newExternalForm: new JsonForm({
        changeEventName: NEW_EXTERNAL_CHANGE,
        formDefinition: [{
          key: "variableName",
          label: "Variable name",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }, {
          key: "value",
          label: "Value",
          type: JsonForm.CONTROL_TYPES.TEXTBOX
        }]
      })
    }, {
      newExternalButton: new Button({
        display: "Add",
        clickEventName: NEW_EXTERNAL_CLICK
      })
    }, {
      table: new Table({
        columns: [{
          display: "Variable name",
          key: "variable"
        }, {
          display: "Value",
          key: "value"
        }, {
          display: "",
          key: "actions"
        }]
      })
    }];
  };

  _proto.propChangeHandlers = function propChangeHandlers() {
    var _this = this;

    return {
      externals: function externals(_externals) {
        return _this.getChild("table").setProp("rows", Object.keys(_externals || {}).map(function (variableName, i) {
          return {
            key: variableName,
            data: [{
              display: variableName
            }, {
              display: _externals[variableName]
            }, {
              content: [new Button({
                display: "Delete",
                clickEventName: DELETE_CLICK,
                _varName: variableName
              })]
            }]
          };
        }));
      }
    };
  };

  _proto.afterCreate = function afterCreate() {
    var _this2 = this;

    this.convertEventUsingProp(DELETE_CLICK, "externalsChangeEventName", function (source) {
      return [_this2, removeVariable(source.getProp("_varName"), Object.assign({}, _this2.getProp("externals")))];
    });
    this.on(NEW_EXTERNAL_CHANGE, function (source, newExternal) {
      return _this2.setState(newExternal);
    });
    this.convertEventUsingProp(NEW_EXTERNAL_CLICK, "externalsChangeEventName", function (source) {
      var _Object$assign;

      return [_this2, Object.assign({}, _this2.getProp("externals"), (_Object$assign = {}, _Object$assign[_this2._state.variableName] = _this2._state.value, _Object$assign))];
    });
  };

  _proto.view = function view(el, props, children, mChildren) {
    return [el("h3", {}, "Externals"), mChildren.newExternalForm.render(), mChildren.newExternalButton.render(), mChildren.table.render()];
  };

  return Externals;
}(Fusion.UIComponent);

exports["default"] = Externals;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports["default"] = void 0;

var _MPageFusion = __webpack_require__(0);

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var _composite$form = _MPageFusion.composite.form,
    FormTextBox = _composite$form.FormTextBox,
    FormCheckbox = _composite$form.FormCheckbox;
var INCLUDE_MOCKS_CHANGE = "MockConfig::IncludeMocks::Change";
var MOCK_LOCATION_CHANGE = "MockConfig::MockLocation::Change";
var MOCK_COLLECTION_CHANGE = "MockConfig::MockCollection::Change";

var MockConfig =
/*#__PURE__*/
function (_UIComponent) {
  _inheritsLoose(MockConfig, _UIComponent);

  function MockConfig() {
    return _UIComponent.apply(this, arguments) || this;
  }

  var _proto = MockConfig.prototype;

  _proto.initialProps = function initialProps() {
    return {
      mockConfig: {},
      mockChangeEventName: ""
    };
  };

  _proto.propChangeHandlers = function propChangeHandlers() {
    var _this = this;

    return {
      mockConfig: function mockConfig(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            includeMocks = _ref.includeMocks,
            collectionName = _ref.collectionName,
            mockLocation = _ref.mockLocation;

        _this.getChild("includeMocks").setProp("value", includeMocks);

        _this.getChild("mockCollection").setProps({
          value: collectionName,
          isDisabled: !includeMocks
        });

        _this.getChild("mockLocation").setProps({
          value: mockLocation,
          isDisabled: !includeMocks
        });
      }
    };
  };

  _proto.createChildren = function createChildren() {
    return [{
      includeMocks: new FormCheckbox({
        valueChangeEventName: INCLUDE_MOCKS_CHANGE,
        display: "Include Mocks"
      })
    }, {
      mockCollection: new FormTextBox({
        valueChangeEventName: MOCK_COLLECTION_CHANGE,
        display: "Mock Collection"
      })
    }, {
      mockLocation: new FormTextBox({
        valueChangeEventName: MOCK_LOCATION_CHANGE,
        display: "Mock Location"
      })
    }];
  };

  _proto.afterCreate = function afterCreate() {
    var _this2 = this;

    this.convertEventUsingProp(INCLUDE_MOCKS_CHANGE, "mockChangeEventName", function (source, _ref2) {
      var includeMocks = _ref2.value;
      return [_this2, Object.assign({}, _this2.getProp("mockConfig"), {
        includeMocks: includeMocks
      })];
    });
    this.convertEventUsingProp(MOCK_COLLECTION_CHANGE, "mockChangeEventName", function (source, _ref3) {
      var collectionName = _ref3.value;
      return [_this2, Object.assign({}, _this2.getProp("mockConfig"), {
        collectionName: collectionName
      })];
    });
    this.convertEventUsingProp(MOCK_LOCATION_CHANGE, "mockChangeEventName", function (source, _ref4) {
      var mockLocation = _ref4.value;
      return [_this2, Object.assign({}, _this2.getProp("mockConfig"), {
        mockLocation: mockLocation
      })];
    });
  };

  _proto.view = function view(el, props, children, mChildren) {
    return [el("h3", {}, "Mocks"), mChildren.includeMocks.render(), mChildren.mockLocation.render(), mChildren.mockCollection.render()];
  };

  return MockConfig;
}(_MPageFusion.UIComponent);

exports["default"] = MockConfig;
;

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,