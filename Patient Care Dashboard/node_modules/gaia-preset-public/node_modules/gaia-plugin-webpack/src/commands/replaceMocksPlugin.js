const { default: generate } = require("@babel/generator");

/**
 * Check if matched mock object has correct file.
 * @param {Object} mockObj - The mock object that matched with function call.
 * @param {Object} state - The babel state object containing current file info.
 * @returns {Boolean}
 */
const checkFile = (mockObj, state) => (
    // filename from babel is full path, where file from glob is relative
    mockObj.files.some(file => state.file.opts.filename.includes(file))
);

/**
 * Check if matched mock object has correct parent.
 * @param {Object} mockObj - The mock object that matched with function call.
 * @param {Object} path - The babel path object of current function call.
 * @returns {Boolean}
 */
const checkParent = (mockObj, path) => {
    if (!path) return false;
    const parent = path.getFunctionParent();
    // Recursively check parent until first parent with a name is found.
    // In case parent function is unnamed like anonymous functions or callbacks.
    return (parent && parent.node && parent.node.id && parent.node.id.name)
        ? parent.node.id.name === mockObj.parent
        : checkParent(mockObj, parent);
};

/**
 * Check if matched mock object has correct file and parent if condition exists.
 * @param {Object} mockObj - The mock object that matched with function call.
 * @param {Object} path - The babel path object of current function call.
 * @param {Object} state - The babel state object.
 * @returns {Boolean}
 */
const checkConditions = (mockObj, path, state) => (
    (!mockObj.files || checkFile(mockObj, state))
    && (!mockObj.parent || checkParent(mockObj, path))
);

 /**
  * Babel plugin for replacing mocked functions.
  * For each function call expression in the build code it:
  * * Generates the code of the function callee from the AST. Code is in form of a string.
  * * Compares the generated code to the mocked function names.
  * * If a match is found then it checks if the match is in the correct file and parent, if specified.
  * * If match is valid then it replaces the function callee code with the mocked function from the match.
  * @returns {Object} Returns babel visitor object.
  */
module.exports = () => ({
    visitor: {
        CallExpression(path, state) {
            // Get the generated code of the callee as a string
            const code = generate(path.get("callee").node).code;

            // Compare the generated code to the mocked function name
            // If a match check if the match satisfies the file and parent conditions
            const match = state.opts.mockObjects.find(mockObj => mockObj.name === code && checkConditions(mockObj, path, state));

            // If found a valid match replace the callee with the mocked function replacement
            if (match && match.mock) {
                path.get("callee").replaceWithSourceString(match.mock.toString());
            }
        }
    }
});
