const WebpackDevServer = require("webpack-dev-server");
const {
    webpackCompiler
} = require("./config");

const ServerManager = require("gaia-servermanager");

/**
 * The port which the devserver will listen to
 * @param {*} args command line args
 * @returns {integer} the port
 */
const port = (args) => args.port || 7070;


/**
 * The host which the devserver will listen to.
 * @param {} args
 * @returns {}
 */
const host = (args) => args.host || "localhost";

/**
 * Creates the webpack configuration and starts the server
 * @param {*} gaia the gaia context
 * @param {*} args command line args
 * @returns {Promise<[WebpackDevServer, String]>} a promise that resolves to the
 *                                       webpack compiler and success string
 *                                       when it is done starting.
 */
const startHandler = ([gaia, args]) =>
      webpackCompiler(gaia, args)
      .then((compiler) => {
          const server = new WebpackDevServer(compiler, compiler.options.devServer);
          const devServerPort = compiler.options.devServer.port || port(args);
          server.listen(devServerPort, host(args));
          return Promise.resolve([
              server,
              `Webpack dev server started on ${host(args)}:${devServerPort}.`
          ]);
      });

/**
 * Stops the dev server
 * @param {*} gaia the gaia context
 * @param {*} args command line args
 * @param {*} server the webpack server instance
 * @returns {}
 */
const stopHandler = ([gaia, args], server) =>
      Promise.resolve(server.close());

/**
 * Returns an instance of the ServerManager stored in the plugin state, or
 * creates a new one if one doesn't exist.
 * @param {*} state plugin state
 * @returns {ServerManager} the server manager instance
 */
const getDevManager = (state) => {
    if (!state.devManager) {
        state.devManager = new ServerManager(startHandler, stopHandler, console);
    }
    return state.devManager;
};

/**
 * Starts the dev server using the provided command line arguments.
 * @param {*} gaia the gaia context
 * @param {*} args command line arguments
 * @param {*} state webpack plugin state
 * @returns {Promise<String>} promise that is resolved once the server is started
 */
const startDevServer = (gaia, args, state) => {
    const manager = getDevManager(state);
    return manager.start([gaia, args])
        .then(() => {
            send(JSON.stringify(manager.getStatus()), state);
            return Promise.resolve("ok");
        });
};

/**
 * Restarts the dev server using the provided command line arguments.
 * If server is not already started it will start it.
 * If server is already started it will stop it and start it again.
 * @param {*} gaia the gaia context
 * @param {*} args command line arguments
 * @param {*} state webpack plugin state
 * @returns {Promise<String>} promise that is resolved once the server is started
 */
const restartDevServer = (gaia, args, state) =>
    devServerStatus(gaia, args, state)
        .then(({ isRunning }) => isRunning && stopDevServer(gaia, args, state))
        .then(() => startDevServer(gaia, args, state));

/**
 * Stops the dev server and sends the message to associated websockets.
 * @param {*} gaia the gaia context
 * @param {*} args command line arguments
 * @param {*} state webpack plugin state
 * @returns {Promise<String>} promise resolved once the server is started
 */
const stopDevServer = (gaia, args, state) => {
    const manager = getDevManager(state);
    return manager.stop([gaia, args])
        .then(() => {
            send(JSON.stringify(manager.getStatus()), state);
            return Promise.resolve("ok");
        });
};

const devServerStatus = (gaia, args, state) =>
      Promise.resolve(getDevManager(state).getStatus());

const devServerStatusLog = (gaia, args, state) =>
      Promise.resolve(getDevManager(state).getStatusLog());

const send = (msg, state) => {
    if (!state.devServerSockets) {
        return;
    }
    state.devServerSockets
        .filter((ws) => ws.readyState == 1)
        .forEach((ws) => ws.send(msg));
};

const devServerSocket = (gaia, args, ws, req, state) => {
    if (!state.devServerSockets) {
        state.devServerSockets = [];
    }
    state.devServerSockets.push(ws);
    ws.on("error", (err) => console.log(err));
    ws.send(JSON.stringify(getDevManager(state).getStatus()));
};

module.exports = {
    startDevServer,
    restartDevServer,
    stopDevServer,
    devServerStatus,
    devServerStatusLog,
    devServerSocket
};
