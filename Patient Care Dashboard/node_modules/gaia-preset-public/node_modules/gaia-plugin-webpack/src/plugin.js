const commands = require("./commands");
const { devServerSocket } = require("./commands/devServer");
const { watcherSocket } = require("./commands/watcher");

module.exports = {
    id: "webpack",
    commands: {
        startWatcher: {
            description: [
                "Starts a webpack server that automatically recompiles code",
                "by watching the source folder. Will fork the process to the background."
            ].join(" "),
            handler: commands.startWatcher,
            args: {
                target: {
                    description: "The name of the webpack build to run. "
                },

                configFile: {
                    description: [
                        "The configuration file that stores the build settings.",
                        "Defaults to gaia.json."
                    ].join(" ")
                }
            }
        },

        stopWatcher: {
            description: "Stops the webpack server created with the start command.",
            handler: commands.stopWatcher
        },

        watcherStatus: {
            description: "The current status of the watcher started with startWatcher, in JSON format.",
            handler: commands.watcherStatus
        },


        watcherStatusLog: {
            description: "Array, in JSON format, of the complete watcher log.",
            handler: commands.watcherStatusLog
        },

        startDevServer: {
            description: "Starts a webpack dev server. See https://webpack.github.io/docs/webpack-dev-server.html.",
            handler: commands.startDevServer,
            args: {
                target: {
                    description: "The name of the webpack build to run."
                },

                configFile: {
                    description: [
                        "The configuration file that stores the build settings.",
                        "Defaults to gaia.json."
                    ].join(" ")
                },

                port: {
                    description: "The port in which the server will run. Defaults to 7070."
                },

                host: {
                    description: "The host in which the server will run. Defaults to localhost."
                }
            }
        },

        restartDevServer: {
            description: "Starts a webpack dev server. If a dev server is already running it will stop it.",
            handler: commands.restartDevServer,
            args: {
                target: {
                    description: "The name of the webpack build to run."
                },

                configFile: {
                    description: [
                        "The configuration file that stores the build settings.",
                        "Defaults to gaia.json."
                    ].join(" ")
                },

                port: {
                    description: "The port in which the server will run. Defaults to 7070."
                },

                host: {
                    description: "The host in which the server will run. Defaults to localhost."
                }
            }
        },

        stopDevServer: {
            description: "Stops the webpack dev server started with startDevServer",
            handler: commands.stopDevServer
        },

        devServerStatus: {
            description: "The current status of the dev server started with startDevServer, in JSON format",
            handler: commands.devServerStatus
        },

        devServerStatusLog: {
            description: "Array, in JSON format, of all dev server statuses over time.",
            handler: commands.devServerStatusLog
        },

        run: {
            description: "Runs a webpack build. If a target is not specified, it will run the default target.",
            handler: commands.run,
            args: {
                rootDir: {
                    description: "The root directory to calculate relative paths. Defaults to the current directory"
                },

                target: {
                    description: "The webpack target. Defaults to \"default\"."
                },

                configFile: {
                    description: [
                        "The configuration file that stores the build settings.",
                        "Defaults to gaia.json."
                    ].join(" ")
                }
            }
        },

        createDefaultTarget: {
            description: "Creates a default target into the configuration file",
            handler: commands.createDefaultTarget,
            args: {
                target: {
                    description: "The webpack target. Defaults to \"default\"."
                },

                configFile: {
                    description: [
                        "The configuration file that stores the build settings.",
                        "Defaults to gaia.json."
                    ].join(" ")
                }
            }
        },

        readFullConfig: {
            description: "Reads the webpack section of the config file.",
            handler: commands.readFullConfig,
            args: {
                configFile: {
                    description: [
                        "The configuration file that stores the webpack settings.",
                        "Defaults to gaia.json."
                    ].join(" ")
                }
            }
        },

        writeTargetConfig: {
            description: "Writes the JSON configuration of a single target to file.",
            handler: commands.writeTargetConfig,
            args: {
                configFile: {
                    description: [
                        "The configuration file that stores the webpack settings.",
                        "Defaults to gaia.json."
                    ].join(" ")
                },

                config: {
                    description: "The config JSON object to be written"
                }
            }
        },

        writeFullConfig: {
            description: "Writes the webpack configuration of the config file.",
            handler: commands.writeFullConfig,
            args: {
                configFile: {
                    description: [
                        "The configuration file that stores the webpack settings.",
                        "Defaults to gaia.json."
                    ].join(" ")
                },

                config: {
                    description: "The config JSON object to be written"
                }
            }
        },

        getTargetList: {
            description: "Gets the webpack target names",
            handler: commands.getTargetList
        },

        readExternals: {
            description: "Gets the externals from a specific webpack target",
            handler: commands.readExternals,
            args: {
                target: "The key (name) of the desired externals target"
            }
        }
    },
    websockets: {
        devServerStatus: {
            description: "Returns the status of the webpack dev server. Will emit a message everytime a server changes status.",
            handler: devServerSocket
        },

        watcherStatus: {
            description: "Returns the status of the webpack watcher server. Will emit a message everytime a server changes status.",
            handler: watcherSocket
        }
    },
    markdown: {
        ui: "README.md"
    },
    ui: "dist/ui.js"
};
