import * as Fusion from "MPageFusion";
import TargetList from "./TargetList";

const forwardProp = Fusion.helpers.props.forwardProp;
const Button = Fusion.atomic.button.Button;

const TARGETS_CHANGE = "Internal::WebpackUI::TargetsChange";
const ADD_TARGET = "Internal::WebpackUI::AddTarget";
const RUN_DEV_SERVER = "Internal::WebpackUI::RunDevServer";
const RUN_WATCH_SERVER = "Internal::WebpackUI::RunWatchServer";
const STOP_DEV_SERVER = "Internal::WebpackUI::StopDevServer";
const STOP_WATCH_SERVER = "Internal::WebpackUI::StopWatchServer";

export default class WebpackUI extends Fusion.UIComponent {

    initialProps() {
        return {
            targets: [],
            targetsChangeEventName: null,
            runDevServerEventName: null,
            runWatchServerEventName: null,
            stopDevServerEventName: null,
            stopWatchServerEventName: null,
            isDevServerRunning: false,
            isWatchServerRunning: false
        };
    }

    propChangeHandlers() {
        return {
            targets: forwardProp(this, "targets", "targetList")
        };
    }

    dependentPropChangeHandlers() {
        return [
            [ "isDevServerRunning", "isWatchServerRunning",
              (isDevServerRunning, isWatchServerRunning) =>

              this
              .getChild("targetList")
              .setProp("showServerButtons", !isDevServerRunning && !isWatchServerRunning)
            ]
        ];
    }

    createChildren() {
        return [
            {
                targetList: new TargetList({
                    targetsChangeEventName: TARGETS_CHANGE,
                    runDevServerEventName: RUN_DEV_SERVER,
                    runWatchServerEventName: RUN_WATCH_SERVER
                })
            },
            {
                addTarget: new Button({
                    display: "Add target",
                    clickEventName: ADD_TARGET
                })
            },
            {
                stopDevServer: new Button({
                    classNames: "mpageui-u-margin-absolute-loose",
                    display: "Stop",
                    clickEventName: STOP_DEV_SERVER
                })
            },
            {
                stopWatchServer: new Button({
                    classNames: "mpageui-u-margin-absolute-loose",
                    display: "Stop",
                    clickEventName: STOP_WATCH_SERVER
                })
            },

        ];
    }

    afterCreate() {
        this.convertEventUsingProp(
            TARGETS_CHANGE,
            "targetsChangeEventName",
            (source, targets) => [ this, targets ]
        );

        this.convertEventUsingProp(
            ADD_TARGET,
            "targetsChangeEventName",
            (source) => [
                this,
                this.getProp("targets").concat({ name: "New target"})
            ]
        );

        this.convertEventUsingProp(
            RUN_DEV_SERVER,
            "runDevServerEventName",
            (source, target) => [ this, target ]
        );

        this.convertEventUsingProp(
            RUN_WATCH_SERVER,
            "runWatchServerEventName",
            (source, target) => [ this, target ]
        );

        this.convertEventUsingProp(
            STOP_WATCH_SERVER,
            "stopWatchServerEventName",
            (source) => [ this ]
        );

        this.convertEventUsingProp(
            STOP_DEV_SERVER,
            "stopDevServerEventName",
            (source) => [ this ]
        );

    }

    view(el, props, children, mChildren) {
        return (
            [
                props.isDevServerRunning ?
                    el("div",
                       {},
                       [
                           "Dev server running",
                           mChildren.stopDevServer.render()
                       ]
                   )
                : [],
                props.isWatchServerRunning ?
                    el("div",
                       {},
                       [
                           "Watch server running",
                           mChildren.stopWatchServer.render()
                       ]
                      )
                : []
            ]
        )
            .concat([
                mChildren.targetList.render(),
                mChildren.addTarget.render()
            ]);
    }
}
