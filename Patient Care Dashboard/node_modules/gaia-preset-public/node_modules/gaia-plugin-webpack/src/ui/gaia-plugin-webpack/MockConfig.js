import { UIComponent, composite } from "MPageFusion";

const {
    form: {
        FormTextBox,
        FormCheckbox
    }
} = composite;

const INCLUDE_MOCKS_CHANGE = "MockConfig::IncludeMocks::Change";
const MOCK_LOCATION_CHANGE = "MockConfig::MockLocation::Change";
const MOCK_COLLECTION_CHANGE = "MockConfig::MockCollection::Change";

export default class MockConfig extends UIComponent {
    initialProps() {
        return {
            mockConfig: {},
            mockChangeEventName: ""
        };
    }

    propChangeHandlers() {
        return {
            mockConfig: ({ includeMocks, collectionName, mockLocation } = {}) => {
                this.getChild("includeMocks").setProp("value", includeMocks);
                this.getChild("mockCollection").setProps({
                    value: collectionName,
                    isDisabled: !includeMocks
                });
                this.getChild("mockLocation").setProps({
                    value: mockLocation,
                    isDisabled: !includeMocks
                });
            }
        };
    }

    createChildren() {
        return [
            {
                includeMocks: new FormCheckbox({
                    valueChangeEventName: INCLUDE_MOCKS_CHANGE,
                    display: "Include Mocks"
                })
            },
            {
                mockCollection: new FormTextBox({
                    valueChangeEventName: MOCK_COLLECTION_CHANGE,
                    display: "Mock Collection"
                })
            },
            {
                mockLocation: new FormTextBox({
                    valueChangeEventName: MOCK_LOCATION_CHANGE,
                    display: "Mock Location"
                })
            }
        ];
    }

    afterCreate() {
        this.convertEventUsingProp(
            INCLUDE_MOCKS_CHANGE,
            "mockChangeEventName",
            (source, { value: includeMocks }) => [
                this,
                Object.assign({}, this.getProp("mockConfig"), { includeMocks })
            ]
        );

        this.convertEventUsingProp(
            MOCK_COLLECTION_CHANGE,
            "mockChangeEventName",
            (source, { value: collectionName }) => [
                this,
                Object.assign({}, this.getProp("mockConfig"), { collectionName })
            ]
        );

        this.convertEventUsingProp(
            MOCK_LOCATION_CHANGE,
            "mockChangeEventName",
            (source, { value: mockLocation }) => [
                this,
                Object.assign({}, this.getProp("mockConfig"), { mockLocation })
            ]
        );
    }

    view(el, props, children, mChildren) {
        return [
            el("h3", {}, "Mocks"),
            mChildren.includeMocks.render(),
            mChildren.mockLocation.render(),
            mChildren.mockCollection.render()
        ];
    }
};