import * as Fusion from "MPageFusion";
import * as gaia from "Gaia";
import Externals from "./Externals";
import MockConfig from "./MockConfig";

const Button = Fusion.atomic.button.Button;
const JsonForm = gaia.controls.JsonForm;

const RUN_DEV_SERVER_CLICK = "Target::RunDevServerClick";
const RUN_WATCH_SERVER_CLICK = "Target::RunWatchServerClick";
const DELETE_CLICK = "Target::DeleteClick";
const SETTINGS_CHANGE = "Target::SettingsChange";
const EXTERNALS_CHANGE = "Target::ExternalsChange";
const MOCK_CHANGE = "Target::MocksChange";

const serverButtons = (props, mChildren) =>
    props.showServerButtons
      ? [
          mChildren.runDevServer.render(),
          mChildren.runWatchServer.render()
      ] : [];


export default class Target extends Fusion.UIComponent {

    initialProps() {
        return {
            targetSettings: {},
            targetChangeEventName: null,
            runDevServerEventName: null,
            runWatchServerEventName: null,
            deleteEventName: null,
            showServerButtons: true
        };
    }

    propChangeHandlers() {
        return {
            targetSettings : (targetSettings) => {
                this.getChild("settings").setProp("jsonObject", targetSettings);
                this.getChild("externals").setProp("externals", targetSettings.externals);
                this.getChild("mockConfig").setProp("mockConfig", targetSettings.mockConfig);
            }
        };
    }

    createChildren() {
        return [
            {
                settings: new JsonForm({
                    changeEventName: SETTINGS_CHANGE,
                    formDefinition: [
                        {
                            key: "name",
                            label: "Target name",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "devtool",
                            label: "Dev tool",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "fileName",
                            label: "Output file name",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "cssFileName",
                            label: "CSS Output file name",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "outputFolder",
                            label: "Output folder",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "libraryName",
                            label: "Library name",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "entryPoints",
                            label: "Entry points (comma separated)",
                            type: JsonForm.CONTROL_TYPES.TEXTARRAY
                        },
                        {
                            key: "sourceFolders",
                            label: "Source Folders (comma separated)",
                            type: JsonForm.CONTROL_TYPES.TEXTARRAY
                        },
                        {
                            key: "contentBase",
                            label: "Content Base",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "publicPath",
                            label: "Public Path",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "port",
                            label: "Port",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "autoRefresh",
                            label: "Auto Refresh",
                            type: JsonForm.CONTROL_TYPES.CHECKBOX
                        },
                        {
                            key: "includeCSS",
                            label: "Include CSS in bundle",
                            type: JsonForm.CONTROL_TYPES.CHECKBOX
                        },
                        {
                            key: "envify",
                            label: "Envify",
                            type: JsonForm.CONTROL_TYPES.CHECKBOX
                        },
                        {
                            key: "minify",
                            label: "Minify",
                            type: JsonForm.CONTROL_TYPES.CHECKBOX
                        },
                        {
                            key: "includePolyfills",
                            label: "Include Polyfills",
                            type: JsonForm.CONTROL_TYPES.CHECKBOX
                        }
                    ]
                })
            },
            {
                runDevServer: new Button({
                    clickEventName: RUN_DEV_SERVER_CLICK,
                    type: Button.TYPE.LINK,
                    display: "Run dev server"
                })
            },
            {
                runWatchServer: new Button({
                    clickEventName: RUN_WATCH_SERVER_CLICK,
                    type: Button.TYPE.LINK,
                    display: "Run watch server"
                })
            },
            {
                delete: new Button({
                    clickEventName: DELETE_CLICK,
                    type: Button.TYPE.LINK,
                    display: "Delete"
                })
            },
            {
                externals: new Externals({
                    externalsChangeEventName: EXTERNALS_CHANGE
                })
            },
            {
                mockConfig: new MockConfig({
                    mockChangeEventName: MOCK_CHANGE
                })
            }
        ];
    }

    afterCreate() {
        this.convertEventUsingProp(
            SETTINGS_CHANGE,
            "targetChangeEventName",
            (source, newTarget) => [ this, newTarget ]
        );
        this.convertEventUsingProp(
            EXTERNALS_CHANGE,
            "targetChangeEventName",
            (source, externals) => [
                this,
                Object.assign({}, this.getProp("targetSettings"), { externals })
            ]
        );
        this.convertEventUsingProp(
            MOCK_CHANGE,
            "targetChangeEventName",
            (source, mockConfig) => [
                this,
                Object.assign({}, this.getProp("targetSettings"), { mockConfig })
            ]
        );
        this.convertEventUsingProp(
            DELETE_CLICK,
            "deleteEventName",
            (source) => [ this ]
        );
        this.convertEventUsingProp(
            RUN_DEV_SERVER_CLICK,
            "runDevServerEventName",
            (source) => [ this, this.getProp("targetSettings") ]
        );
        this.convertEventUsingProp(
            RUN_WATCH_SERVER_CLICK,
            "runWatchServerEventName",
            (source) => [ this, this.getProp("targetSettings") ]
        );
    }

    view(el, props, children, mChildren) {
        return [
            el("h2", {}, props.targetSettings.name),
            el(
                "div",
                {
                    class: "gaia-webpack-targetActions"
                },
                serverButtons(props, mChildren)
                    .concat([ mChildren.delete.render() ])
            ),
            el(
                "div",
                {
                    class: "gaia-section"
                },
                [
                    mChildren.settings.render(),
                    mChildren.externals.render(),
                    mChildren.mockConfig.render()
                ]
            )
        ];
    }

}
