/**
 * Based on the old-school-cool param parser, takes an MPage source string and generates a URL param.
 * @param {String} sourceString - Page source.
 * @returns {Object} Parsed params.
 */
const parse = (sourceString) => {
    let matchArr = [];
    const paramObj = {
        mine: "^MINE^",
        personId: "0.0",
        encntrId: "0.0",
        userId: "0.0",
        positionCd: "0.0",
        pprCd: "0.0",
        devLoc: '""',
        application: "^powerchart.exe^",
        staticContent: '^../../static_content^',
        categoryMean: "",
        viewpointName: "",
        inBrowser: 9
    };

    //Get the personId
    matchArr = /"PERSON_ID":[0-9]+\./.exec(sourceString);
    if (matchArr && matchArr.length) {
        paramObj.personId = matchArr[ 0 ].replace('"PERSON_ID":', "").replace(".", ".0");
    }

    matchArr = /"ENCNTR_ID":[0-9]+\./.exec(sourceString);
    if (matchArr && matchArr.length) {
        paramObj.encntrId = matchArr[ 0 ].replace('"ENCNTR_ID":', "").replace(".", ".0");
    }

    matchArr = /"PRSNL_ID":[0-9]+\./.exec(sourceString);
    if (matchArr && matchArr.length) {
        paramObj.userId = matchArr[ 0 ].replace('"PRSNL_ID":', "").replace(".", ".0");
    }

    matchArr = /"POSITION_CD":[0-9]+\./.exec(sourceString);
    if (matchArr && matchArr.length) {
        paramObj.positionCd = matchArr[ 0 ].replace('"POSITION_CD":', "").replace(".", ".0");
    }

    matchArr = /"PPR_CD":[0-9]+\./.exec(sourceString);
    if (matchArr && matchArr.length) {
        paramObj.pprCd = matchArr[ 0 ].replace('"PPR_CD":', "").replace(".", ".0");
    }
    /*
     matchArr = /"STATIC_CONTENT":.*,"POSITION_CD"/.exec(sourceString);
     if(matchArr && matchArr.length){
     paramObj.staticContent = matchArr[0].replace('"STATIC_CONTENT":', "").replace(',"POSITION_CD"', '').replace(/\\\//g, "/");
     }
     */
    matchArr = /"CATEGORY_MEAN":".*","LOCALE_ID/.exec(sourceString);
    if (matchArr && matchArr.length) {
        paramObj.categoryMean = matchArr[ 0 ].replace('"CATEGORY_MEAN":"', "^").replace('","LOCALE_ID', '^');
    }

    matchArr = /"VIEWPOINT_NAME_KEY":".*","ACTIVE_VIEW_CAT_MEAN"/.exec(sourceString);
    if (matchArr && matchArr.length) {
        paramObj.viewpointName = matchArr[ 0 ].replace('"VIEWPOINT_NAME_KEY":"', "^").replace('","ACTIVE_VIEW_CAT_MEAN"', '^');
    }

    return paramObj;
};

/**
 * Given the source and config, generates a parameterized URL.
 * @param {String} source - The MPage source string.
 * @param {Object} config - Config passed from the livedev plugin.
 * @returns {String} A parameterized URL.
 */
const generateParams = ({ source, config }) => {
    const args = parse(source);
    return [
        args.mine,
        args.personId,
        args.encntrId,
        args.userId,
        args.positionCd,
        args.pprCd,
        args.application,
        `^$STATIC_CONTENT$^`,
        args.viewpointName,
        args.inBrowser
    ].join(",")
};

export default generateParams;
