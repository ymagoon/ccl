import { UIComponent, composite } from "MPageFusion";
import { DISPATCH, WEBPACK_ENABLE, WEBPACK_AUTO_REFRESH, WEBPACK_TARGET_CHANGE } from "../actions";

const { form: { FormCheckbox, FormSelect } } = composite;

const PRIVATE_EVENTS = {
    VALUE_CHANGE: "__SourceCodeLocationInput::valueChange__",
    AUTO_REFRESH: "__WebpackSettings::autoRefresh::valueChange__",
    TARGET_CHANGE: "__WebpackSettings::target::valueChange__"
};

/**
 * Control for handling webpack configuration.
 * @class WebpackSettings
 */
class WebpackSettings extends UIComponent {
    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isWebpackEnabled: (isWebpackEnabled) => this.getChild("enableWebpack").setProp("value", isWebpackEnabled),
            isWebpackAutoRefreshEnabled: (isEnabled) => this.getChild("autoRefresh").setProp("value", isEnabled)
        }
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                enableWebpack: new FormCheckbox({
                    display: "Enable Webpack",
                    valueChangeEventName: PRIVATE_EVENTS.VALUE_CHANGE
                })
            },
            {
                autoRefresh: new FormCheckbox({
                    display: "Enable Auto-Refresh",
                    valueChangeEventName: PRIVATE_EVENTS.AUTO_REFRESH
                })
            },
            {
                targetSelect: new FormSelect({
                    display: "Webpack Target",
                    valueChangeEventName: PRIVATE_EVENTS.TARGET_CHANGE,
                    options: {
                        items: [
                            { id: "default", display: "Default" },
                            { id: "bloop", display: "Bloop" }
                        ]
                    }
                })
            }
        ]
    }

    /**
     * @inheritDoc
     */
    beforeRender() {
        const { webpackTargets } = this.getProps();
        const items = Object.keys(webpackTargets).map((key) => ({
            id: key,
            display: key
        }));

        this.getChild("enableWebpack").setProps({
            isDisabled: !items.length,
            helperHandler: !items.length ? () => "You must have webpack targets configured (Please use the 'Webpack' tab)" : "",
            showHelperText: !items.length
        });

        this.getChild("targetSelect").setProps({
            isDisabled: !this.getProp("isWebpackEnabled"),
            value: this.getProp("webpackTarget"),
            options: {
                items: items
            }
        });
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(PRIVATE_EVENTS.VALUE_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.VALUE_CHANGE);
            this.emit(DISPATCH, {
                type: WEBPACK_ENABLE,
                payload: { isEnabled: payload.value }
            });
        });
        this.on(PRIVATE_EVENTS.AUTO_REFRESH, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.AUTO_REFRESH);
            this.emit(DISPATCH, {
                type: WEBPACK_AUTO_REFRESH,
                payload: { isEnabled: payload.value }
            });
        });
        this.on(PRIVATE_EVENTS.TARGET_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.TARGET_CHANGE);
            this.emit(
                DISPATCH,
                {
                    type: WEBPACK_TARGET_CHANGE,
                    payload: {
                        target: payload.value
                    }
                }
            );
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return this.renderChildren();
    }
}

export default WebpackSettings;
