import { UIComponent, composite, atomic } from "MPageFusion";
import {
    DISPATCH,
    CANCEL_LAUNCH,
    PERFORM_LAUNCH,
    AUTH_USERNAME_CHANGE,
    AUTH_PASSWORD_CHANGE,
    AUTH_DOMAIN_CHANGE,
} from "../actions";

const { header: { ContentHeader }, footer: { AffirmDenyFooter } } = atomic;
const { form: { FormTextBox } } = composite;
const { dialog: { Modal } } = composite;

/**
 * Enum for events private to this file.
 * @type {{USERNAME_CHANGE: string, PASSWORD_CHANGE: string, DOMAIN_CHANGE: string, CANCEL: string}}
 */
const PRIVATE_EVENTS = {
    USERNAME_CHANGE: "__AuthModal::usernameChange__",
    PASSWORD_CHANGE: "__AuthModal::passwordChange__",
    DOMAIN_CHANGE: "__AuthModal::domainChange__",
    CANCEL: "__AuthModal::cancel__",
    KEY_UP: "__AuthModalBody::keyUp__"
};

/**
 * Creates a body for the authentication modal.
 * @class AuthModalBody
 */
class AuthModalBody extends UIComponent {
    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            username: (value) => this.getChild("username").setProp("value", value),
            domain: (value) => this.getChild("domain").setProp("value", value)
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                username: new FormTextBox({
                    display: "Username",
                    valueChangeEventName: PRIVATE_EVENTS.USERNAME_CHANGE,
                    options: {
                        keyUpEventName: PRIVATE_EVENTS.KEY_UP
                    }
                })
            },
            {
                password: new FormTextBox({
                    type: "password",
                    display: "Password",
                    options: {
                        inputType: "password",
                        keyUpEventName: PRIVATE_EVENTS.KEY_UP
                    },
                    valueChangeEventName: PRIVATE_EVENTS.PASSWORD_CHANGE

                })
            },
            {
                domain: new FormTextBox({
                    display: "Domain",
                    valueChangeEventName: PRIVATE_EVENTS.DOMAIN_CHANGE,
                    options: {
                        keyUpEventName: PRIVATE_EVENTS.KEY_UP
                    }
                })
            }
        ]
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return el(
            "div",
            { class: "gaia-plugin-LiveDev-ModalBody" },
            this.renderChildren()
        );
    }
}

/**
 * Creates a class for handling authentication prior to launching the development url.
 * @class AuthModal.
 */
class AuthModal extends UIComponent {
    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isVisible: (isVisible) => this.getChild("modal").setProp("isVisible", isVisible),
            username: (value) => this.getChild("modal").getChild("body").setProp("username", value),
            domain: (value) => this.getChild("modal").getChild("body").setProp("domain", value)
        };
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(PRIVATE_EVENTS.USERNAME_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.USERNAME_CHANGE);
            this.emit(DISPATCH, {
                type: AUTH_USERNAME_CHANGE,
                payload: payload
            })
        });
        this.on(PRIVATE_EVENTS.PASSWORD_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.PASSWORD_CHANGE);
            this.emit(DISPATCH, {
                type: AUTH_PASSWORD_CHANGE,
                payload: payload
            })
        });
        this.on(PRIVATE_EVENTS.DOMAIN_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.DOMAIN_CHANGE);
            this.emit(DISPATCH, {
                type: AUTH_DOMAIN_CHANGE,
                payload: payload
            })
        });
        this.on(PRIVATE_EVENTS.CANCEL, () => {
            this.stopPropagation(PRIVATE_EVENTS.CANCEL);
            this.emit(DISPATCH, {
                type: CANCEL_LAUNCH
            });
        });
        this.on(PRIVATE_EVENTS.KEY_UP, (e) => {
            this.stopPropagation(PRIVATE_EVENTS.KEY_UP);
            if(e.key === "Enter") {
                this.emit(PERFORM_LAUNCH);
            }
        });
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                modal: new Modal({
                    header: new ContentHeader({
                        title: "Millennium Login"
                    }),
                    body: new AuthModalBody(),
                    footer: new AffirmDenyFooter({
                        affirmClickEventName: PERFORM_LAUNCH,
                        affirmDisplay: "Launch",
                        denyDisplay: "Cancel",
                        denyClickEventName: PRIVATE_EVENTS.CANCEL
                    })
                })
            }
        ]
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return this.renderChildren();
    }
}

export default AuthModal;
