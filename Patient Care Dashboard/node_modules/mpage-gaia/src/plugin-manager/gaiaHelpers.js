/* eslint-disable no-console */
const request = require("request");
const treeKill = require("tree-kill");
const { spawn } = require("child_process");

const GAIA_BASE_URL = "http://localhost:9001";
const START_SERVER_TIMEOUT = 60000;

/**
 * This function returns a promise that checks the current status of the gaia server.
 * @returns {Promise<Boolean>} Returns a promise that resolves with a boolean indicating whether gaia server is running or not.
 */
const isGaiaServerRunning = () => {
    return new Promise((resolve) => {
        request(
            {
                method: "GET",
                url: `${GAIA_BASE_URL}/app`,
                timeout: 2000
            },
            (error) => {
                // If an error occurs, we know that the server isn't running.
                console.log(`Checking for Gaia server instance...${error ? "NOT FOUND" : "FOUND"}`);
                resolve(!error);
            }
        );
    });
};

/**
 * This function kills the gaia server process instance and and any children it has spawned
 * @param {ChildProcess} gaiaProcess The gaia process instance to be killed.
 * @returns {undefined} This function doesn't return anything.
 */
const stopGaiaServer = (gaiaProcess, exitCode) => {
    if (!gaiaProcess) {
        process.exit(exitCode);
    }

    console.log(`Killing gaia process with PID: ${gaiaProcess.pid}...`);
    treeKill(gaiaProcess.pid, "SIGTERM", () => {
        process.exit(exitCode);
    });
};


/**
 * This function starts the gaia server in the background
 * @returns {Promise<ChildProcess>} Returns a promise the resolves if the server starts up succesfully, or rejects otherwise.
 */
const startGaiaServer = () => {
    return new Promise((resolve, reject) => {
        isGaiaServerRunning()
            .then((isRunning) => {
                if (isRunning) {
                    resolve(); // Since the server is already running, resolve this promise.
                } else {
                    console.log("Gaia server is not running. Starting Gaia server...");

                    const gaiaServerProcess = spawn(
                        process.platform === "win32" ? "npm.cmd" : "npm",
                        ["run", "gaia", "server"]
                    );

                    // Reject if server doesn't start up in the given time.
                    const timeout = setTimeout(() => {
                        console.log("Gaia server took too long to start up.");
                        stopGaiaServer(gaiaServerProcess, 1);

                        reject({ plugin: "gaia", command: "server" });
                    }, START_SERVER_TIMEOUT);

                    // Listen to the standard output stream
                    gaiaServerProcess.stdout.on("data", (data) => {
                        // If gaia outputs the server address, we know it's running
                        if (data.includes(`${GAIA_BASE_URL}/app`)) {
                            gaiaServerProcess.stdout.removeAllListeners(); // We don't need to check the output anymore, remove listeners.
                            console.log(`Server started as process: ${gaiaServerProcess.pid}`);

                            // Add a wrapper function for ease of use.
                            gaiaServerProcess.stop = (exitCode = 0) => {
                                stopGaiaServer(gaiaServerProcess, exitCode);
                            };

                            clearTimeout(timeout); // About to resolve this promise, clear the timeout for reject.
                            resolve(gaiaServerProcess);
                        }
                    });
                }
            });
    });
};

/**
 * This function sends commands to Gaia over a HTTP post request.
 * @param {String} plugin The plugin to which we want to send the command
 * @param {String} command The command to be sent
 * @param {Object} options The optional JSON parse-able object to be sent.
 * @returns {Promise<Object>} A promise that resolves once Gaia responds to the request, or rejects it if Gaia sends a failure response.
 */
const sendCommandRequest = (plugin, command, options = {}) => {
    return new Promise((resolve, reject) => {
        request(
            {
                method: "POST",
                json: true,
                url: `${GAIA_BASE_URL}/api/commands/${plugin}/${command}`,
                body: options
            },
            (error, httpResponse, body) => {
                if (error) {
                    reject({
                        error,
                        plugin,
                        command,
                        options
                    });
                } else {
                    resolve(body);
                }
            }
        );
    });
};

module.exports = {
    isGaiaServerRunning,
    sendCommandRequest,
    startGaiaServer,
    stopGaiaServer
};
