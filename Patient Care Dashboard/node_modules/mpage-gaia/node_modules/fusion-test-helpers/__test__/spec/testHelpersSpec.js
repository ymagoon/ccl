import m from "mithril";
import {
    ok,
    notOk,
    uniqueKey,
    isVDOMObject,
    fusionDom,
    control,
    delay
} from "../../src/testHelpers";

var basicComponent = {
    render: () =>{
        return m(
            "div",
            {
                "class": "test-class",
                "id": "test-id",
                "onclick": null
            },
            [
                "stringVDOMNode",
                childComponent.render(),
                null,
                123,
                /* //Once issue https://github.com/StephanHoyer/mithril-query/issues/73 is addressed in mithril-query this can be uncommented
                true
                */
            ]);
    }
};

var noBooleanChildrenComponent = {
    render: () =>{
        return m(
            "div",
            {
                "class": "test-class",
                "id": "test-id"
            },
            [
                "stringVDOMNode",
                childComponent.render(),
                null,
                123
            ]);
    }
}

var childComponent = {
    render: () => {
        return m("span", {
            "class": "test-child-class",
            "id": "test-child-id",
            "onclick": null
        }, "childComponent")
    }
};


describe("The testHelpers.js file", () => {
    describe("The ok function", () => {
        it("performs an assertion on a function that returns a truthy result", () => {
            //Thruthy values
            expect(() => {ok(() => true, "true")}).not.toThrow();
            expect(() => {ok(() => "string", "string")}).not.toThrow();
            expect(() => {ok(() => 123, "123")}).not.toThrow();
            expect(() => {ok(() => {return {};}, "{}")}).not.toThrow();
            expect(() => {ok(() => {return [];}, "[]")}).not.toThrow();

            //Falsy values
            expect(() => {ok(() => false, "test message")}).toThrow();
            expect(() => {ok(() => "", "test message")}).toThrow();
            expect(() => {ok(() => 0, "test message")}).toThrow();
            expect(() => {ok(() => null, "test message")}).toThrow();
            expect(() => {ok(() => undefined, "test message")}).toThrow();
        });
    });

    describe("The notOk function", () => {
        it("performs an assertion on a function that returns a falsy result", () => {
            //Thruthy values
            expect(() => {notOk(() => true, "true")}).toThrow();
            expect(() => {notOk(() => "string", "string")}).toThrow();
            expect(() => {notOk(() => 123, "123")}).toThrow();
            expect(() => {notOk(() => {return {};}, "{}")}).toThrow();
            expect(() => {notOk(() => {return [];}, "[]")}).toThrow();

            //Falsy values
            expect(() => {notOk(() => false, "test message")}).not.toThrow();
            expect(() => {notOk(() => "", "test message")}).not.toThrow();
            expect(() => {notOk(() => 0, "test message")}).not.toThrow();
            expect(() => {notOk(() => null, "test message")}).not.toThrow();
            expect(() => {notOk(() => undefined, "test message")}).not.toThrow();
        });
    });

    describe("The idMaker function", () => {
        it("creates unique ids for VDOM elements", () => {
            const id1 = uniqueKey.next();
            const id2 = uniqueKey.next();
            expect(id1).not.toEqual(id2);
        });
    });

    describe("The isVDOMObject function", () => {
        it("checks to see if a passed in value isnt undefined and is not null", () => {
            expect(isVDOMObject(null)).toBe(false);
            expect(isVDOMObject()).toBe(false);
            expect(isVDOMObject("Test String")).toBe(true);
        });
    });

    describe("The fusionDomArray object", () => {
        let vdom;
        let vdomArray;
        let childVDOM;
        let stringVDOM;
        let nullVDOM;
        let numericalVDOM;

        beforeEach(() => {
            vdom = control(basicComponent);
            vdomArray = vdom.children();
            stringVDOM = vdomArray.get(0);
            childVDOM = vdomArray.get(1);
            nullVDOM = vdomArray.get(2);
            numericalVDOM = vdomArray.get(3);
        });

        describe("The fusionDomArray.count function", () => {
            it("returns the count of vdom nodes in the array", () => {
                expect(vdomArray.count()).toBe(4);
            });
        });

        describe("The fusionDomArray.first function", () => {
            it("returns the first vdom node in the array", () => {
                expect(vdomArray.first()).toBe(stringVDOM);
            });
        });

        describe("The fusionDomArray.last function", () => {
            it("returns the last vdom node in the array", () => {
                expect(vdomArray.last()).toBe(numericalVDOM);
            });
        });


        describe("The fusionDomArray.get function", () => {
            it("returns the vdom child at the index provided", () => {
                expect(vdomArray.get(1)).toBe(childVDOM);
            });
        });


        describe("The fusionDomArray.all function", () => {
            it("returns all vdom children", () => {
                expect(vdomArray.all().length).toBe(4);
            });
        });
    });

    describe("The fusionDom object", () => {
        let vdom;
        let childVDOM;
        let stringVDOM;
        let nullVDOM;
        //let booleanVDOM;
        let numericalVDOM;

        beforeEach(() => {
            vdom = control(basicComponent);
            const children = vdom.children();
            stringVDOM = children.get(0);
            childVDOM = children.get(1);
            nullVDOM = children.get(2);
            //booleanVDOM = children.get(3);
            numericalVDOM = children.get(4);
        });

        describe("The fusionDom.tag function", () => {
            it("returns the tag for a VDOM element", () => {
                expect(vdom.tag()).toBe("div");
            });

            it("returns an empty string for a null vdom element", () => {
                expect(nullVDOM.tag()).toBe("");
            });

            it("returns a hash for a string, boolean or numerical vdom element", () => {
                expect(stringVDOM.tag()).toBe("#");
                //expect(booleanVDOM.tag()).toBe("#");
                expect(numericalVDOM.tag()).toBe("#");
            });
        });

        describe("The fusionDom.attrs function", () => {
            it("returns an attributes object for a vdom element", () => {
                expect(vdom.attrs().className).toEqual("test-class");
                expect(vdom.attrs().id).toEqual("test-id");
            });

            it("returns en empty attributes object for a null vdom element", () => {
                expect(nullVDOM.attrs()).toEqual({});
            });

            it("returns an empty object for a string, boolean or numerical vdom element", () => {
                expect(stringVDOM.attrs()).toEqual({});
                //expect(booleanVDOM.attrs()).toEqual({});
                expect(numericalVDOM.attrs()).toEqual({});
            });
        });

        describe("The fusionDom.getAttr function", () => {
            it("returns the attribute elements if it exists in the vDOM", () => {
                expect(vdom.getAttr("className")).toEqual("test-class");
                expect(vdom.getAttr("id")).toEqual("test-id");

                //Element doesn't exist
                expect(vdom.getAttr("non-existent-element")).toEqual(undefined);
            });

            it("returns undefined when attempting to retrieve an attr of a null vdom element", () => {
                expect(nullVDOM.getAttr("className")).toEqual(undefined);
            });

            it("returns undefined when attempting to retrieve an attr of a string vdom element", () => {
                expect(stringVDOM.getAttr("className")).toEqual(undefined);
            });
        });

        describe("The fusionDom.children function", () => {
            it("returns a fusionDomArray object containing accessor methods for the child vdom elements", () => {
                expect(vdom.children().count()).toBe(4);
                expect(nullVDOM.children().count()).toBe(0);
                expect(childVDOM.children().count()).toBe(0);
                expect(stringVDOM.children().count()).toBe(0);
                //expect(booleanVDOM.children().count()).toBe(0);
                expect(numericalVDOM.children().count()).toBe(0);
            });
        });

        describe("The fusionDom.find function", () => {
            it("returns the vdom elements matched by the provided selector in a vdom element", () => {
                const results = vdom.find("#test-child-id");
                expect(results.count()).toBe(1);
                expect(results.first().getAttr("id")).toBe("test-child-id");
            });

            it("return an empty array of vdom element when attempting to use find on boolean, string, number and null vdom elements", () => {
                let results = stringVDOM.find("#test-child-id");
                expect(results.count()).toBe(0);
                results = nullVDOM.find("#test-child-id");
                expect(results.count()).toBe(0);
                results = numericalVDOM.find("#test-child-id");
                expect(results.count()).toBe(0);
                /*results = booleanVDOM.find("#test-child-id");
                expect(results.count()).toBe(0);*/
            });
        });

        describe("The fusionDom.findByAttribute function", () => {
            it("returns the vdom elements matched by the provided attribute value in a vdom element", () => {
                const results = vdom.findByAttribute("id", "test-child-id");
                expect(results.count()).toBe(1);
                expect(results.first().getAttr("id")).toBe("test-child-id");
            });

            it("return an empty array of vdom element when attempting to use find on boolean, string, number and null vdom elements", () => {
                let results = stringVDOM.findByAttribute("id", "test-child-id");
                expect(results.count()).toBe(0);
                results = nullVDOM.findByAttribute("id", "test-child-id");
                expect(results.count()).toBe(0);
                results = numericalVDOM.findByAttribute("id", "test-child-id");
                expect(results.count()).toBe(0);
                /*results = booleanVDOM.findByAttribute("id", "test-child-id");
                expect(results.count()).toBe(0);*/
            });
        });

        describe("The fusionDom.hasAttributeInChildren function", () => {
            it("returns true if a child of the vdom node contains the specified attribute", () => {
                expect(vdom.hasAttributeInChildren("id", "test-child-id")).toBe(true);
                expect(vdom.hasAttributeInChildren("id", "non-existent-id")).toBe(false);

                //String, number, boolean and null vdom nodes
                expect(stringVDOM.hasAttributeInChildren("id", "non-existent-id")).toBe(false);
                expect(numericalVDOM.hasAttributeInChildren("id", "non-existent-id")).toBe(false);
                expect(nullVDOM.hasAttributeInChildren("id", "non-existent-id")).toBe(false);
                //expect(booleanVDOM.hasAttributeInChildren("id", "non-existent-id")).toBe(false);
            });
        });

        describe("The fusionDom.verifyHasAttributeInChildren function", () => {
            it("asserts true if the vdom element has a child with the specified attribute", () => {
                vdom.verifyHasAttributeInChildren("id", "test-child-id");
                expect(() => {vdom.verifyHasAttributeInChildren("id", "non-existent-id")}).toThrow();

                //String, number, boolean and null vdom nodes
                expect(() => {stringVDOM.verifyHasAttributeInChildren("id", "non-existent-id")}).toThrow();
                expect(() => {numericalVDOM.verifyHasAttributeInChildren("id", "non-existent-id")}).toThrow();
                //expect(() => {booleanVDOM.verifyHasAttributeInChildren("id", "non-existent-id")}).toThrow();
                expect(() => {nullVDOM.verifyHasAttributeInChildren("id", "non-existent-id")}).toThrow();
            });
        });

        describe("The fusionDom.verifyDoesNotHaveAttributeInChildren function", () => {
            it("asserts true if the vdom element has a child with the specified attribute", () => {
                vdom.verifyDoesNotHaveAttributeInChildren("id", "non-existent-id");
                expect(() => {vdom.verifyDoesNotHaveAttributeInChildren("id", "test-child-id")}).toThrow();

                // String, number, boolean and null vdom nodes
                stringVDOM.verifyDoesNotHaveAttributeInChildren("id", "non-existent-id");
                numericalVDOM.verifyDoesNotHaveAttributeInChildren("id", "non-existent-id");
                // booleanVDOM.verifyDoesNotHaveAttributeInChildren("id", "non-existent-id");
                nullVDOM.verifyDoesNotHaveAttributeInChildren("id", "non-existent-id");
            });
        });

        describe("The fusionDom.hasClass function", () => {
            it("returns true if the vdom has the specified class", () => {
                expect(vdom.hasClass("test-class")).toBe(true);
                expect(vdom.hasClass("non-existent-class")).toBe(false);

                // String, number, boolean and null vdom nodes
                expect(stringVDOM.hasClass("non-existent-class")).toBe(false);
                expect(numericalVDOM.hasClass("non-existent-class")).toBe(false);
                // expect(booleanVDOM.hasClass("non-existent-class")).toBe(false);
                expect(nullVDOM.hasClass("non-existent-class")).toBe(false);

                // Coverage test for older versions of mithril which preserve the 'class' attribute instead of
                // converting to className
                vdom.attrs().class = "test-class";
                expect(vdom.hasClass("test-class")).toBe(true);

                // Test for cases where class or className attributes are not available
                delete vdom.attrs().class; // remove the class attribute
                delete vdom.attrs().className; // remove the className attribute
                expect(()=>{
                    vdom.hasClass("test-class");
                }).not.toThrow();
                expect(vdom.hasClass("test-class")).toBe(false);

                // Test for cases where class attribute is not available but className is
                vdom.attrs().className = ["test-class", "another-test-class"];
                expect(vdom.hasClass("test-class")).toBe(true);
                expect(vdom.hasClass("non-existent-class")).toBe(false);
            });
        });

        describe("The fusionDom.el function", () => {
            it("returns a vdom element wrapped in a mithril-query node", () => {
                expect(vdom.el()).not.toBeNull();

                // String, number, boolean vdom nodes
                expect(stringVDOM.el()).not.toBeNull();
                expect(numericalVDOM.el()).not.toBeNull();
                // expect(booleanVDOM.el()).not.toBeNull();

                // null vdom node
                expect(nullVDOM.el()).toBeNull();
            });
        });

        describe("The fusionDom.at function", () => {
            it("finds that first element which matches the given selector", () => {
                expect(vdom.at("[id=test-child-id]").attrs().id).toEqual("test-child-id");

                // String, number, boolean vdom nodes
                expect(stringVDOM.at("[text=test-child-id]").children().count()).toEqual(0);
                expect(numericalVDOM.at("[text=test-child-id]").children().count()).toEqual(0);
                // expect(booleanVDOM.at("[text=test-child-id]").children().count()).toEqual(0);

                // null vdom node
                expect(nullVDOM.at("[text=test-child-id]").children().count()).toEqual(0);
            });
        });

        describe("The fusionDom.contains function", () => {
            it("returns true if the vdom elements contain the passed in string", () => {
                expect(vdom.contains("childComponent")).toBe(true);
                expect(stringVDOM.contains("stringVDOMNode")).toBe(true);
                expect(numericalVDOM.contains("123")).toBe(true);
                // expect(booleanVDOM.contains("true")).toBe(true);
                expect(nullVDOM.contains("childComponent")).toBe(false);
                expect(numericalVDOM.contains("nonExistent123")).toBe(false);
            });
        });

        describe("The fusionDom.verifyContains function", () => {
            it("asserts true if the vdom elements contain the passed in string", () => {
                vdom.verifyContains("childComponent");
                stringVDOM.verifyContains("stringVDOMNode");
                numericalVDOM.verifyContains("123");
                // booleanVDOM.verifyContains("true")).toBe(true);
                expect(() => {nullVDOM.verifyContains("childComponent")}).toThrow();
            });
        });

        describe("The fusionDom.doesNotContain function", () => {
            it("returns true if the vdom elements do not contain the passed in string", () => {
                expect(vdom.doesNotContain("nonExistentComponent")).toBe(true);
                expect(childVDOM.doesNotContain("nonExistentchildComponent")).toBe(true);
                expect(stringVDOM.doesNotContain("nonExistentSringVDOMNode")).toBe(true);
                expect(numericalVDOM.doesNotContain("nonExistent123")).toBe(true);
                // expect(booleanVDOM.doesNotContain("true")).toBe(false);
                expect(nullVDOM.doesNotContain("childComponent")).toBe(true);
            });
        });

        describe("The fusionDom.verifyDoesNotContain function", () => {
            it("asserts true if the vdom elements do not contain the passed in string", () => {
                vdom.verifyDoesNotContain("nonExistentComponent");
                childVDOM.verifyDoesNotContain("nonExistentchildComponent");
                stringVDOM.verifyDoesNotContain("nonExistentSringVDOMNode");
                numericalVDOM.verifyDoesNotContain("nonExistent123");
                // booleanVDOM.verifyDoesNotContain("true")).toBe(true);
                nullVDOM.verifyDoesNotContain("nonExistent123");
            });
        });

        describe("The fusinDom.has function", () => {
            it("returns true when the vdom element matches the selector provided", () => {
                expect(vdom.has("[id=test-id]")).toBe(true);
                expect(childVDOM.has(":contains(childComponent)")).toBe(true);
                expect(stringVDOM.has(":contains(stringVDOMNode)")).toBe(true);
                expect(numericalVDOM.has(":contains(123)")).toBe(true);
                // expect(booleanVDOM.has(":contains(true)")).toBe(true);
                expect(nullVDOM.has(":contains(null)")).toBe(false);
            });
        });

        describe("The fusionDom.verifyHas function", () => {
            it("asserts true if the vdom node has a match for the selector provided", () => {
                vdom.verifyHas("[id=test-id]");
                childVDOM.verifyHas(":contains(childComponent)");
                stringVDOM.verifyHas(":contains(stringVDOMNode)");
                numericalVDOM.verifyHas(":contains(123)");
                // booleanVDOM.verifyHas(":contains(true)");
                expect(() => {nullVDOM.verifyHas(":contains(null)");}).toThrow();
            });
        });

        describe("The fusionDom.doesNotHave function", () => {
            it("returns true when the vdom element does not match any nodes from the selector provided", () => {
                expect(vdom.doesNotHave("[id=non-existent-test-id]")).toBe(true);
                expect(childVDOM.doesNotHave(":contains(nonExistentChildComponent)")).toBe(true);
                expect(stringVDOM.doesNotHave(":contains(nonExistentStringVDOMNode)")).toBe(true);
                expect(numericalVDOM.doesNotHave(":contains(nonExistent123)")).toBe(true);
                // expect(booleanVDOM.doesNotHave(":contains(nonExistentTrue)")).toBe(true);
                expect(nullVDOM.doesNotHave(":contains(null)")).toBe(true);
            });
        });

        describe("The fusionDom.verifyDoesNotHave function", () => {
            it("asserts true when the vdom element does not match any nodes form the selector provided", () => {
                vdom.verifyDoesNotHave("[id=non-existent-test-id]");
                childVDOM.verifyDoesNotHave(":contains(nonExistentChildComponent)");
                stringVDOM.verifyDoesNotHave(":contains(nonExistentStringVDOMNode)");
                numericalVDOM.verifyDoesNotHave(":contains(nonExistent123)");
                // booleanVDOM.verifyDoesNotHave(":contains(nonExistentTrue)");
                nullVDOM.verifyDoesNotHave(":contains(null)");
            });
        });

        describe("The fusionDom.trigger function", () => {
            var onClickFunc;

            beforeEach(() => {
                onClickFunc = jasmine.createSpy("onclickFunctionSpy");
            });

            it("throws an error when called on a null vdom element", () => {
                expect(() => {nullVDOM.trigger("click");}).toThrow();
            });

            it("triggers an event on the vdom element when only the event is passed", () => {
                vdom.attrs().onclick = onClickFunc;
                vdom.trigger("click");
                expect(onClickFunc).toHaveBeenCalled();
            });

            it("triggers an event on the child which matches the passed in selector", () => {
                vdom.children().get(1).attrs().onclick = onClickFunc;
                vdom.trigger("click", "[id=test-child-id]");
                expect(onClickFunc).toHaveBeenCalled();
            });

            it("triggers an event on the root vdom node and pass an event payload", () => {
                var payloadEvent = {};
                vdom.attrs().onclick = onClickFunc;
                vdom.trigger("click", payloadEvent);
                expect(onClickFunc).toHaveBeenCalledWith(payloadEvent);
            });

            it("triggers an event on the childe which matches the passed in selector and passed an event payload", () => {
                var payloadEvent = {};
                vdom.children().get(1).attrs().onclick = onClickFunc;
                vdom.trigger("click", "[id=test-child-id]", payloadEvent);
                expect(onClickFunc).toHaveBeenCalledWith(payloadEvent);
            });

            it("does nothing when invalid parameter sets are passed", () => {
                vdom.attrs().onclick = onClickFunc;
                expect(() => {vdom.trigger("click", "[id=test-child-id]", {}, "arg3");}).not.toThrow();
            });
        });

        xdescribe("The fusionDom.triggerOnCreate function", () => {
            it("throws an error for null vdom elements", () => {
                expect(() => {nullVDOM.triggerOnCreate("span", false, {})}).toThrow();
            });

            it("runs the config function on the vdom node", () => {
                vdom.attrs().config = jasmine.createSpy("vdom.attrs.config");
                vdom.triggerOnCreate("span", true, {});
                expect(vdom.attrs().config).toHaveBeenCalled();
            });
        });
    });

    describe("The control function", () => {
        it("renders the vDOM", () => {
            const vDOM = control(basicComponent);
            expect(isVDOMObject(vDOM)).toBe(true);
        });
    });

    describe("The delay function", () => {
        it("executes the given function after a predetermined timeout", (done) => {
            let finishedNoDelay = false;
            let finishedDelay = false
            // Provide a delay
            delay(() => finishedDelay = true, 50);
            // Use the default delay
            delay(() => finishedNoDelay = true);
            setTimeout(() => {
                expect(finishedDelay).toBe(true);
                expect(finishedNoDelay).toBe(true);
                done();
            }, 150)
        });
    });
});
