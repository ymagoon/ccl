"use strict";

import UIComponent from "../../../../base";
import { unique } from "../../../../helpers/core/generators";
import { forwardProp } from "../../../../helpers/props/props";
import TagListSearch from "../../tag-list/search/TagListSearch";
import {
    renderDualColumnView,
    renderHelperText,
    renderErrorText,
    renderTitle
} from "../helpers/view";
import {
    generateValueChangePayload
} from "../helpers/props";

/**
 * Helper function to retrieve the tags based on matching keys between tags[] and value[]
 * @param {Array<Object<{key: String, display: String}>>} tags - Array of Tag Objects
 * @param {string[]} value - Array of keys correspoding to the `Tag`s object in tags[]
 * @returns {Array<Object<{key: String, display: String}>>} returns the array of `Tag`s
 * @private
 */
const getTags = ( { tags }, value) => (tags ? tags.filter((item) => value.includes(item.key)) : []);

const FormTagListSearchEvents = {
    INPUT: "FormTagListSearch::input",
    INPUT_FOCUS: "FormTagListSearch::inputFocus",
    INPUT_BLUR: "FormTagListSearch::inputBlur",
    REQUEST_CONFIRM: "FormTagListSearch::requestConfirm",
    REQUEST_DELETE: "FormTagListSearch::requestDelete",
    REQUEST_SUGGESTIONS: "FormTagListSearch::requestSuggestions",
    REQUEST_CLEAR_SUGGESTIONS: "FormTagListSearch::requestClearSuggestions",
    VALUE_CHANGE: "FormTagListSearch::valueChange"
};
const namespace = "mpageui-FormTagListSearch";

/**
 * The FormTagListSearch class.
 * @class FormTagListSearch
 */
class FormTagListSearch extends UIComponent {
    /**
     * @inheritDoc
     */
    initialState() {
        return {
            showErrorText: false,
            showHelperText: true,
            value: []
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            completionHandler: (value) => !!value.length,
            display: "",
            errorHandler: null,
            formName: unique(namespace),
            hasInlineLabel: false,
            helperHandler: null,
            isRequired: false,
            showErrorText: false,
            showHelperText: true,
            showRequiredIndicator: true,
            options: {},
            value: [],
            inputEventName: FormTagListSearchEvents.INPUT,
            inputFocusEventName: FormTagListSearchEvents.INPUT_FOCUS,
            inputBlurEventName: FormTagListSearchEvents.INPUT_BLUR,
            requestConfirmEventName: FormTagListSearchEvents.REQUEST_CONFIRM,
            requestDeleteEventName: FormTagListSearchEvents.REQUEST_DELETE,
            requestSuggestionsEventName: FormTagListSearchEvents.REQUEST_SUGGESTIONS,
            requestClearSuggestionsEventName: FormTagListSearchEvents.REQUEST_CLEAR_SUGGESTIONS,
            valueChangeEventName: FormTagListSearchEvents.VALUE_CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            formName: forwardProp(this, "name", "tagListSearch"),
            showErrorText: (showErrorText) => {
                this._state.showErrorText = showErrorText;
            },
            showHelperText: (showHelperText) => {
                this._state.showHelperText = showHelperText;
            },
            options: (options) => {
                this.getChild("tagListSearch").setProps(Object.assign(
                    {},
                    options,
                    {
                        inputEventName: TagListSearch.EVENTS.INPUT,
                        inputFocusEventName: TagListSearch.EVENTS.INPUT_FOCUS,
                        inputBlurEventName: TagListSearch.EVENTS.INPUT_BLUR,
                        requestConfirmEventName: TagListSearch.EVENTS.REQUEST_CONFIRM,
                        requestDeleteEventName: TagListSearch.EVENTS.REQUEST_DELETE,
                        requestSuggestionsEventName: TagListSearch.EVENTS.REQUEST_SUGGESTIONS,
                        requestClearSuggestionsEventName: TagListSearch.EVENTS.REQUEST_CLEAR_SUGGESTIONS
                    }
                ));

                this.getChild("tagListSearch").setProp("tags",
                    getTags(options, this._state.value)
                );
            },
            value: (value) => {
                this._state.value = value;
                this.getChild("tagListSearch").setProp("tags",
                    getTags(this.getProp("options"), value)
                );
            }
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                tagListSearch: new TagListSearch({
                    inputEventName: TagListSearch.EVENTS.INPUT,
                    inputFocusEventName: TagListSearch.INPUT_FOCUS,
                    inputBlurEventName: TagListSearch.EVENTS.INPUT_BLUR,
                    requestConfirmEventName: TagListSearch.EVENTS.REQUEST_CONFIRM,
                    requestDeleteEventName: TagListSearch.EVENTS.REQUEST_DELETE,
                    requestSuggestionsEventName: TagListSearch.EVENTS.REQUEST_SUGGESTIONS,
                    requestClearSuggestionsEventName: TagListSearch.EVENTS.REQUEST_CLEAR_SUGGESTIONS
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(TagListSearch.EVENTS.INPUT, (src, payload) => {
            this.stopPropagation(TagListSearch.EVENTS.INPUT);
            this.getChild("tagListSearch").setProp("inputValue", payload.value);
            this._state = Object.assign(
                {},
                this._state, {
                    showHelperText: true
                });

            this.emit(this.getProp("inputEventName"), src, payload)
                .update();
        });

        this.redirectEventUsingProp(TagListSearch.EVENTS.INPUT_FOCUS, "inputFocusEventName");

        this.on(TagListSearch.EVENTS.INPUT_BLUR, (src) => {
            this.stopPropagation(TagListSearch.EVENTS.INPUT_BLUR);

            this._state = Object.assign(
                {},
                this._state, {
                    showHelperText: true,
                    showErrorText: true
                });

            this.emit(this.getProp("inputBlurEventName"), this)
                .update();
        });

        this.on(TagListSearch.EVENTS.REQUEST_CONFIRM, (src, payload) => {
            this.stopPropagation(TagListSearch.EVENTS.REQUEST_CONFIRM);
            this._state = Object.assign(
                {},
                this._state, {
                    showHelperText: true,
                    showErrorText: true,
                    value: payload.suggestion ? this._state.value.concat(payload.suggestion.key) : this._state.value
                });

            // TO handle when user hits enter without selecting an item from suggestion list which results into payload.suggestion being null.
            if (payload.suggestion) {
                const tagListSearch = this.getChild("tagListSearch");
                tagListSearch.setProps({
                    tags: [
                        ...tagListSearch.getProp("tags"),
                        { key: payload.suggestion.key, display: payload.suggestion.data[0].display }
                    ],
                    inputValue: ""
                });

                this.emit(this.getProp("valueChangeEventName"), this,
                    generateValueChangePayload(this.getProps(), this._state.value)
                );

                this.emit(this.getProp("requestConfirmEventName"), src, payload)
                    .update();
            }
        });

        this.on(TagListSearch.EVENTS.REQUEST_DELETE, (src, payload) => {
            this.stopPropagation(TagListSearch.EVENTS.REQUEST_DELETE);
            this._state = Object.assign(
                {},
                this._state, {
                    showHelperText: true,
                    showErrorText: true,
                    value: this._state.value.filter((item) => item !== payload.key)
                });

            const tagArr = this.getChild("tagListSearch").getProp("tags");
            const tagResult = tagArr ? tagArr.filter((item) => item.index !== payload.index) : [];
            this.getChild("tagListSearch").setProp("tags", tagResult);

            this.emit(this.getProp("valueChangeEventName"), this,
                generateValueChangePayload(this.getProps(), this._state.value)
            );

            this.emit(this.getProp("requestDeleteEventName"), src, payload)
                .update();
        });

        this.on(TagListSearch.EVENTS.REQUEST_SUGGESTIONS, (src, payload) => {
            this.stopPropagation(TagListSearch.EVENTS.REQUEST_SUGGESTIONS);

            this.setState(Object.assign(
                {},
                this._state, {
                    showHelperText: true
                }));

            this.emit(this.getProp("requestSuggestionsEventName"), src, payload)
                .update();
        });
        this.redirectEventUsingProp(TagListSearch.EVENTS.REQUEST_CLEAR_SUGGESTIONS, "requestClearSuggestionsEventName");
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren, { state }) {
        return el(
            "div",
            {
                class: namespace
            },
            [
                renderDualColumnView(el, props.hasInlineLabel,
                    [
                        renderTitle(el, props)
                    ],
                    [
                        mappedChildren.tagListSearch.render(),
                        renderErrorText(el, props, state),
                        renderHelperText(el, props, state)
                    ]
                )
            ]
        );
    }
}
FormTagListSearch.EVENTS = FormTagListSearchEvents;
export default FormTagListSearch;
