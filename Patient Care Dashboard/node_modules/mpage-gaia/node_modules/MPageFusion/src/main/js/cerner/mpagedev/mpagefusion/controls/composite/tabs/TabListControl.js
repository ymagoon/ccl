"use strict";
import UIComponent from "../../../base/UIComponent";
import classNames from "classnames";
import { forwardProp } from "../../../helpers/props/props";
import TabLabel from "./TabLabel";
import {
    Tab,
    TabContents,
    TabList,
    TabPanel
} from "../../atomic/tabs";
import {
    TabListControlEvents
} from "./helpers";

const NAMESPACE = "mpageui-TabListControl";


/**
 * A tabList is made of collection of Tabs. We create tabs based on
 * orientation and assign different styles based on that. Each tab consists of provision for
 * left and right accessory along with the display value.
 *
 * @param {Object} control - TabListControl instance
 * @param {Array<Object>} content - tab's content provided by the consumer
 * @returns {Array<UIComponent>} List of Tabs
 */
const getTabs = (control, content) =>
    content.map((tab) =>
        new Tab(
            {
                id: tab.id,
                title: tab.display,
                orientation: control.getProp("orientation"),
                content: [
                    new TabLabel({
                        display: tab.display,
                        leftAccessory: tab.leftAccessory,
                        rightAccessory: tab.rightAccessory
                    })
                ]
            }
        )
    );

/**
 * A tab's content is made of a TabPanel. We create panels for each tab
 *
 * @param {Array<Object>} content - tab's content provided by the consumer
 * @returns {Array<UIComponent>} List of TabPanels consisting of tab's content
 */
const getTabContent = (content) =>
    content.map((tab) =>
        new TabPanel({
            tabLink: tab.id,
            id: tab.id,
            content: [ tab.view ]
        })
    );

/**
 * TabListControl class creates TabList
 * and provides content for creation of Tabs and TabContents
 *
 * @class TabListControl
 */
class TabListControl extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            defaultClassNames: NAMESPACE,
            classNames: "",
            content: [],
            selectionChangeEventName: TabListControlEvents.TAB_SELECTION_CHANGE,
            orderChangeEventName: TabListControlEvents.TAB_ORDER_CHANGE,
            isDraggable: false,
            orientation: "",
            tabContentClassNames: "",
            selectedTabId: ""
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                tabList: new TabList({
                    classNames: `${NAMESPACE}-list`,
                    tabs: getTabs(this, this.getProp("content")),
                    selectedTabId: this.getProp("selectedTabId"),
                    selectionChangeEventName: TabListControlEvents.TAB_SELECTION_CHANGE,
                    orderChangeEventName: TabListControlEvents.TAB_ORDER_CHANGE
                })
            },
            {
                tabContents: new TabContents({
                    classNames: this.getProp("tabContentClassNames"),
                    selectedTabId: this.getProp("selectedTabId"),
                    panels: getTabContent(this.getProp("content"))
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(TabListControlEvents.TAB_ORDER_CHANGE, (control, newTabList) => {
            this.stopPropagation(TabListControlEvents.TAB_ORDER_CHANGE);
            this.emit(this.getProp("orderChangeEventName"), newTabList);
        });
        this.on(TabListControlEvents.TAB_SELECTION_CHANGE, (tabList, tab) => {
            this.stopPropagation(TabListControlEvents.TAB_SELECTION_CHANGE);
            this.emit(this.getProp("selectionChangeEventName"), tab.getProp("id"));
        });
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => {
                forwardProp(this, "panels", "tabContents")(getTabContent(content));
                forwardProp(this, "tabs", "tabList")(getTabs(this, content));
            },
            selectedTabId: (tabId) => {
                forwardProp(this, "selectedTabId", "tabContents")(tabId);
                forwardProp(this, "selectedTabId", "tabList")(tabId);
            },
            tabContentClassNames: (tabContentClassNames) => {
                this.getChild("tabContents").setProp("classNames", tabContentClassNames);
            },
            isDraggable: forwardProp(this, "draggable", "tabList"),
            orientation: forwardProp(this, "orientation", "tabList")
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "nav",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                }),
                role: "navigation",
                "aria-orientation": props.orientation
            },
            this.renderChildren()
        );
    }
}

TabListControl.EVENTS = TabListControlEvents;
export default TabListControl;
