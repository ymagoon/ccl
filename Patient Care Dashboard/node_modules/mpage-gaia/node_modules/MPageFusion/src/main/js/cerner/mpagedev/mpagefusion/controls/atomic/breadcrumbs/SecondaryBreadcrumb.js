/**
 * @fileoverview
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import Label, { Anchor } from "../label";
import classNames from "classnames";
import { addWindowResizeListener, removeWindowResizeListener } from "../../../helpers/dom/dom";
import { throttleItemAdjust, defaultCssClasses } from "./helpers";

const eventNames = {
    ITEM_CLICK: "SecondaryBreadcrumb::itemClick"
};

/**
 * Breadcrumb item object
 * @typedef {Object} BreadcrumbItem
 * @property {String|int} key - Unique key for the item
 * @property {String} display - Item display
 * @property {String} clickEventName - Click event name for the item
 */

/**
 * Create a anchor for the item
 * @param {BreadcrumbItem} item - item object
 * @returns {VDom} Anchor vdom
 * @private
 */
const createAnchor = (item) => new Anchor({
    display: item.display,
    key: item.key,
    classNames: `${defaultCssClasses.dataItem} ${defaultCssClasses.dataItemTruncate}`,
    clickEventName: item.clickEventName || eventNames.ITEM_CLICK
});

/**
 * Create a label for the item
 * @param {BreadcrumbItem} item - item object
 * @returns {VDom} Label vdom
 * @private
 */
const createLabel = (item) => new Label({
    value: item.display,
    classNames: defaultCssClasses.dataItem
});

/**
 * Creates the vdom for the items
 * All items are anchors except the last item which is a label
 * @param {BreadcrumbItem} item - item object
 * @param {int} idx - item index inside itemList
 * @param {Array<BreadcrumbItem>} itemList - item object
 * @returns {VDom} vdom based on selected condition
 * @private
 */
const createDisplay = (item, idx, itemList) => idx === itemList.length - 1 ? createLabel(item) : createAnchor(item);

/**
 * Renders all the children by putting / in between
 * All item group has a / at the end except the last item
 * @param {Function} el - VDom generator
 * @param {Array<UIComponent>} children - collection of UI components
 * @returns {Array<VDom>} collection of vdom elements
 * @private
 */
const renderChildren = (el, children) => children.map((child, idx, childrenColl) =>
    el(
        "div",
        {
            class: idx === 0 ? defaultCssClasses.moreItemHidden : `${defaultCssClasses.item} ${defaultCssClasses.itemOverflow}`
        },
        [
            child.render(),
            idx < childrenColl.length - 1 ? el("span", { class: defaultCssClasses.divider }, "/") : null
        ]
    )
);

/**
 * SecondaryBreadcrumb class.
 * @class SecondaryBreadcrumb
 * @constructor
 */
export default class SecondaryBreadcrumb extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            classNames: "",
            /**
             * collection of BreadcrumbItem
             * @type {Array<BreadcrumbItem>}
             */
            items: []
        };
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            items: (newItems) => this.replaceAllChildren([
                new Label({
                    value: "..."
                }),
                ...newItems.map(createDisplay)
            ])
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return el(
            "div",
            {
                class: classNames({
                    [ defaultCssClasses.default ]: true,
                    [ props.classNames ]: props.classNames.length > 0
                }),
                oncreate: ({ dom }) => {
                    this._adjustElements = throttleItemAdjust(dom);
                    addWindowResizeListener(this._adjustElements);
                    this._adjustElements();
                },
                onupdate: () => this._adjustElements(),
                onremove: () => removeWindowResizeListener(this._adjustElements)
            },
            renderChildren(el, children)
        );
    }
}

SecondaryBreadcrumb.EVENTS = eventNames;
