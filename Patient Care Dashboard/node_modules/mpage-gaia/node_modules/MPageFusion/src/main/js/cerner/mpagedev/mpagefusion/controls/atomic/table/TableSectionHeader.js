/**
 * @fileoverview TableSectionHeader class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import { svg } from "../icon";
import Label from "../label";
import classNames from "classnames";
import { eventNames } from "./helpers";

const { content: { Expanded, Collapsed } } = svg;
const collapsedClass = "closed";

/**
 * Constructor for TableSectionContainer
 * @extends UIComponent
 */
export default class TableSectionHeader extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            display: "",
            defaultClassNames: "mpageui-Table-sectionHeader",
            sectionIcon: null,
            classNames: "",
            isVisible: true,
            sectionHeaderClickEventName: eventNames.PUBLIC.SECTION_HEADER_CLICK
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        const children = [
            {
                icon: this.getProp("isVisible") ? new Expanded() : new Collapsed()
            }
        ];

        if (this.getProp("sectionIcon")) {
            children.push({
                sectionIcon: this.getProp("sectionIcon")
            });
        }

        children.push({
            label: new Label({
                value: this.getProp("display")
            }, [])
        });

        return children;
    }

    /**
     * Click handler for the section headers
     * @returns {undefined}
     * @private
     */
    _onHeaderClick() {
        this.setProp("isVisible", !this.getProp("isVisible"));
        this.emit(this.getProp("sectionHeaderClickEventName"), this, this.getParent(), this.getProp("isVisible"));
        this.update();
    }

    /**
     * @inheritdoc
     */
    view(el, props) {
        return el("header", {
            class: classNames({
                [ props.defaultClassNames ]: true,
                [ props.classNames ]: props.classNames.length > 0,
                [ collapsedClass ]: !props.isVisible
            }),
            onclick: this._onHeaderClick.bind(this)
        }, this.renderChildren());
    }
}
