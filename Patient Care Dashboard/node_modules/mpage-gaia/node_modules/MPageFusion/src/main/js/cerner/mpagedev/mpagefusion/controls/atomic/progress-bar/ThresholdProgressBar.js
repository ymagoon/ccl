"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";

/**
 * Enumeration for ThresholdProgressBar CSS classNames
 */
const THRESHOLD_PROGRESS_BAR_CLASS = {
    thresholdProgressBar: "mpageui-ThresholdProgressBar",
    currentProgress: "mpageui-ThresholdProgressBar-thresholds-progress",
    threshold: "mpageui-ThresholdProgressBar-threshold",
    progressFull: "mpageui-ThresholdProgressBar-progress-full"
};

/**
 * returns threshold object which current value exceeds
 * @param {String} defaultColor: default color of the progression.
 * @param {number} value: current value of the progression.
 * @param {Array} thresholds: Set of values and colors to be used for ThresholdBar.
 * @returns {Object} threshold object
 */
const getCurrentThreshold = (defaultColor, value, thresholds) =>
    thresholds.reduce(
        (maxThreshold, threshold) =>
            (value >= threshold.value) && (threshold.value >= maxThreshold.value) ? threshold : maxThreshold,
        {
            value: 0.0,
            color: defaultColor
        }
    );

/**
 * returns background color for ThresholdProgressBar based on the  max thresholdvalue the current value exceeds
 * @param {String} defaultColor: default color of the progression.
 * @param {number} value: current value of the progression.
 * @param {Array} thresholds: Set of values and colors to be used for ThresholdBar.
 * @returns {string} Color for the ThresholdProgressBar's progression.
 */
const getBackgroundColor = (defaultColor, value, thresholds) => getCurrentThreshold(defaultColor, value, thresholds).color;

/**
 * returns thresholds(tick marks) based on thresholds setup provided
 * @param {function} el: DOM of progressbar
 * @param {Array} thresholds: Set of values and colors to be used for ThresholdBar
 * @returns {Array} thresholds
 */
const renderThresholds = (el, thresholds) =>
    thresholds
        .filter((threshold) => threshold.value !== 1 && threshold.value !== 0)
        .map((threshold) => el(
            "span",
            {
                style: {
                    "margin-left": `${threshold.value * 100}%`
                },
                class: THRESHOLD_PROGRESS_BAR_CLASS.threshold
            }
        ));

/**
 * @class ThresholdProgressBar
 * @extends {UIComponent}
 */
class ThresholdProgressBar extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            value: 0,
            defaultColor: "",
            thresholds: []
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return el(
            "div",
            {
                class: THRESHOLD_PROGRESS_BAR_CLASS.thresholdProgressBar
            },
            [
                el(
                    "span", // 'span' to progress the value and change color
                    {
                        class: classNames(
                            {
                                [THRESHOLD_PROGRESS_BAR_CLASS.currentProgress]: props.value,
                                [getBackgroundColor(props.defaultColor, props.value, props.thresholds)]: props.value,
                                [THRESHOLD_PROGRESS_BAR_CLASS.progressFull]: props.value === 1
                            }
                        ),
                        style: {
                            width: `${props.value * 100}%`
                        }
                    }
                ),
                renderThresholds(el, props.thresholds) // Add thresholds(ticks) on the progress-bar
            ]
        );
    }
}
export default ThresholdProgressBar;
