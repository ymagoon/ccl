/**
 * @fileoverview TableSectionContainer class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import FlowsheetSectionHeader from "./FlowsheetSectionHeader";
import FlowsheetRowContainer from "./FlowsheetRowContainer";
import classNames from "classnames";

/**
 * Constructor for TableSectionContainer
 * @extends UIComponent
 */
export default class FlowsheetSectionContainer extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            defaultClassNames: "mpageui-Flowsheet-sectionContainer",
            classNames: "",
            rows: [],
            rowProps: {},
            cellProps: {},
            display: "",
            key: "",
            isBodyVisible: true,
            isNoResultsSubtitleVisible: false,
            index: 0
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        const children = [];
        const headerDisplay = this.getProp("display");
        const isBodyVisible = this.getProp("isBodyVisible");
        const isNoResultsSubtitleVisible = this.getProp("isNoResultsSubtitleVisible");

        if (headerDisplay.length > 0) {
            children.push({
                header: new FlowsheetSectionHeader({
                    display: headerDisplay,
                    isVisible: isBodyVisible,
                    isNoResultsSubtitleVisible
                }, [])
            });
        }

        children.push({
            body: new FlowsheetRowContainer({
                rows: this.getProp("rows"),
                index: this.getProp("index"),
                rowProps: this.getProp("rowProps"),
                cellProps: this.getProp("cellProps"),
                isVisible: isBodyVisible
            })
        });

        return children;
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mappedChildren) {
        return el("div",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: props.classNames.length > 0
                })
            },
            this.renderChildren()
        );
    }
}
