"use strict";

import { TYPES } from "../const";

// Action
import { makeFaceUp as makeFaceUpAction, makeMenuItem as makeMenuItemAction } from "./action";

// Toggle
import { makeFaceUp as makeFaceUpToggle, makeMenuItem as makeMenuItemToggle } from "./toggle";

// Select Group
import { makeFaceUp as makeFaceUpSelectGroup, makeMenuItem as makeMenuItemSelectGroup } from "./selectGroup";

// Divider
import { makeFaceUp as makeFaceUpDivider, makeMenuItem as makeMenuItemDivider } from "./divider";

// Menu
import { makeFaceUp as makeFaceUpMenu, makeMenuItem as makeMenuItemMenu } from "./menu";

/**
 * Creates the face-up control based on the item provided.
 * @param {Object} item - The item to be transformed to a face-up control.
 * @param {String[]} state - Currently selected ids.
 * @returns {UIComponent} The face-up UIComponent for the item.
 */
export const makeFaceUp = (item, state) => ({
    [ TYPES.ACTION ]: makeFaceUpAction,
    [ TYPES.DIVIDER ]: makeFaceUpDivider,
    [ TYPES.TOGGLE ]: makeFaceUpToggle,
    [ TYPES.SELECT_GROUP ]: makeFaceUpSelectGroup,
    [ TYPES.MENU ]: makeFaceUpMenu
}[ item.type ](item, state));

/**
 * Creates the Menu item control based on the item provided.
 * @param {Object} item - The item to be transformed to a Menu item.
 * @param {String[]} state - Currently selected ids.
 * @returns {Object} The Menu item.
 */
export const makeMenuItem = (item, state) => ({
    [ TYPES.ACTION ]: makeMenuItemAction,
    [ TYPES.DIVIDER ]: makeMenuItemDivider,
    [ TYPES.TOGGLE ]: makeMenuItemToggle,
    [ TYPES.SELECT_GROUP]: makeMenuItemSelectGroup,
    [ TYPES.MENU ]: makeMenuItemMenu
}[ item.type ](item, state));

/**
 * Creates a set of menu items up to a range cap. This is due to only a portion of the CollapseGroup items being
 * displayed in the menu (based on which controls do not fit within the CollapseGroup).
 * @param {Array<Object>} items - The items to be transformed to Menu item equivalents.
 * @param {number} range - The starting point in the array of items to include. (From range -> end).
 * @param {CollapseGroupState} state - Current state of CollapseGroup.
 * state specific to the menu item is retrieved via the id.
 * @returns {Array<Object>} The array of menu items.
 */
export const makeMenuItems = (items, range, state) =>
    items.slice(range, items.length).map((item) =>
        makeMenuItem(item, state.selectedIds));

/**
 * Creates the array of face-up UIComponents in the CollapseGroup.
 * @param {Array<Object>} items - The items which are transformed to face-up UIComponents.
 * @param {CollapseGroupState} state - Current state of CollapseGroup.
 * @returns {Array<UIComponent>} The array of face-up UIComponents.
 */
export const makeFaceUpItems = (items, state) =>
    items.map((item) => makeFaceUp(item, state.selectedIds));
