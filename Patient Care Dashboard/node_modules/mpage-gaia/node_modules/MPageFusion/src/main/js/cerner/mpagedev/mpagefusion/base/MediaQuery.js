const queries = [
    { name: "XXS", size: 0 },
    { name: "XS", size: 580 },
    { name: "SM", size: 760 },
    { name: "MD", size: 1024 },
    { name: "LG", size: 1276 },
    { name: "XL", size: 1540 },
    { name: "XXL", size: 2068 }
].map((queryObject) => ({
    name: queryObject.name,
    size: queryObject.size,
    query: `(min-width: ${queryObject.size}px)`
}));

const queryByName = (name) => {
    let i = queries.length;
    for (i; i--;) {
        if (queries[ i ].name === name) {
            return queries [ i ];
        }
    }
    return null;
};
const queryString = (query) => query ? query.query : null;

const matchesQuery = (w, qrString) =>
    qrString ?
        w.matchMedia(qrString).matches :
        false;

const getCurrent = (w) => {
    let i = queries.length;
    for (i; i--;) {
        if (matchesQuery(w, queryString(queries[ i ]))) {
            return queries[ i ];
        }
    }
    return null;
};

/**
 * Get the names of queries upto the specified name
 * @param {string} name - query name to evaluate
 * @returns {Array.<string>} collection of query names
 * @private
 */
const getMinQueryNames = (name) => {
    const coll = [];

    for (let i = 0; i < queries.length; i++) {
        const queryName = queries[i].name;

        coll.push(queryName);
        if (queryName === name) {
            break;
        }
    }

    return coll;
};

class MediaQuery {
    constructor(window) {
        this._current = getCurrent(window);
        this._window = window;
        window.addEventListener("resize", () => {
            this.update();
        });
    }

    atLeast(name) {
        return matchesQuery(this._window, queryString(queryByName(name)));
    }

    /**
     * Check to see if at most the specified median query level
     * @param {string} name - name of the query to evaluate
     * @returns {boolean} True if current mediaquery satisfies the name
     */
    atMost(name) {
        return getMinQueryNames(name).includes(this.current().name);
    }

    current() {
        return this._current;
    }

    get(name) { // eslint-disable-line class-methods-use-this
        return queryByName(name);
    }

    update() {
        this._current = getCurrent(this._window);
    }
}

const mediaQuery = new MediaQuery(window);

export default mediaQuery;
