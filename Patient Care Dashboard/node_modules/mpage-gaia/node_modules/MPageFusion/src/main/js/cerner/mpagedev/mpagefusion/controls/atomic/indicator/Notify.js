/* eslint no-underscore-dangle: ["error", { "allow": ["_autoHideTimer", "_setCloseTimer"] }] */

import UIComponent from "../../../base";
import classNames from "classnames";

const NAMESPACE = "mpageui-Notify";

/**
 * Handles when the notify control dom is created.
 * @param {Notify} ctrl - The notify control instance.
 * @param {Object} props - Notify control props.
 * @returns {Function} Oncreate handler.
 */
const handleOnCreate = (ctrl, props) => ({ dom }) => {
    dom.classList.add(`${NAMESPACE}--${props.transitionName}--enter`);

    requestAnimationFrame(() => {
        dom.classList.add(`${NAMESPACE}--${props.transitionName}--enter--active`);
        ctrl._setCloseTimer();
    });
};

/**
 * Handles when the notify control dom is about to be removed.
 * @param {Notify} ctrl - The notify control instance.
 * @param {Object} props - Notify control props.
 * @returns {Function} Onbeforeremove handler.
 */
const handleOnBeforeRemove = (ctrl, props) => ({ dom }) => {
    clearTimeout(ctrl._autoHideTimer);

    dom.classList.add(`${NAMESPACE}--${props.transitionName}--leave`);
    return new Promise((resolve, reject) => {
        /*
         * Request an animation tick so the browser has time to notice
         * that the CSS value has changed. Without this, the browser
         * would not animate the transition.
         */
        requestAnimationFrame(() => {
            dom.classList.add(`${NAMESPACE}--${props.transitionName}--leave--active`);

            setTimeout(resolve, props.transitionLeaveDuration);
        });
    });
};

export default class Notify extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._autoHideTimer = null;
        this._setCloseTimer = this._setCloseTimer.bind(this);
    }

    /**
     * @inheritDoc
     */
    initialState() {
        return {
            isOpen: false
        };
    }

    /**
     * Resets the auto-close timer.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _setCloseTimer() {
        const autoHideTime = this.getProp("autoHideDuration");
        if (!autoHideTime) {
            return;
        }
        clearTimeout(this._autoHideTimer);
        this._autoHideTimer = setTimeout(() => {
            if (this.getProp("isOpen") !== null && this.getProp("autoHideEventName")) {
                this.emit(this.getProp("autoHideEventName"), this);
            }
            else {
                this.setState({
                    isOpen: false
                }).update();
            }
        }, autoHideTime);
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            autoHideDuration: 5000,
            autoHideEventName: null,
            content: [],
            isOpen: true,
            transitionName: "fade",
            transitionLeaveDuration: 300
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isOpen: (isOpen) => {
                this.setState({
                    isOpen
                });
            },
            content: (content) => {
                this.replaceAllChildren(content);
            }
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped, { state }) {
        return state.isOpen ? el(
            "div",
            {
                class: classNames(NAMESPACE),
                oncreate: handleOnCreate(this, props),
                onbeforeremove: handleOnBeforeRemove(this, props)
            },
            this.renderChildren()
        ) : null;
    }
}
