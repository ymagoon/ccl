"use strict";

import UIComponent from "../../../base";
import { ContentHeader } from "../header";
import ContentPanelBody from "./ContentPanelBody";
import { svg } from "../icon/index";
import { forwardProp } from "../../../helpers/props/props";
import classNames from "classnames";
import { unique } from "../../../helpers/core/generators";

const { content: { Collapsed, Expanded } } = svg;

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const EVENTS = {
    VIEW_CHANGE: "ContentPanel::viewChange"
};

const HEADER_BG_STYLE = ContentHeader.BACKGROUND_STYLE;
const BODY_BG_STYLE = {
    ANCHOR: "mpageui-u-bg-anchor",
    CANVAS: "mpageui-u-bg-canvas",
    DEFAULT: "mpageui-u-bg-default"
};

const NAMESPACE = "mpageui-ContentPanel";

const toggleCollapseEvent = "toggleCollapse";

/**
 * Returns the correct expand/collapse icon based on the collapse state of the content panel
 * @param {Boolean} isCollapsed - whehter or not the Content Panel is collapsed
 * @returns {Object} - icon
 */
const getCollapseIcon = (isCollapsed) => isCollapsed ? new Collapsed() : new Expanded();

/**
 * Renders the header if header content exists
 * @param {object} props - the content panel props
 * @param {object} mappedChildren - the content panel mapped children
 * @returns {VDom|null} - the rendered header
 */
const renderHeader = (props, mappedChildren) =>
    (props.headerDisplay || props.headerContent.length || props.isCollapsible) ?
        mappedChildren.header.render()
        : null;

/**
 * Renders the body if body content exists and the
 * content panel is not collapsed
 * @param {function} el - renders VDom
 * @param {object} props - the content panel props
 * @param {object} mappedChildren - the content panel mapped children
 * @param {boolean} isCollapsed - whether or not the content panel is collapsed
 * @returns {VDom|null} - the rendered body
 */
const renderBody = (el, props, mappedChildren, isCollapsed) =>
    !isCollapsed ?
        mappedChildren.body.render()
        : null;

/**
 * Renders the footer if footer content exists and the
 * content panel is not collapsed
 * @param {object} props - the content panel props
 * @param {object} mappedChildren - the content panel mapped children
 * @param {boolean} isCollapsed - whether or not the content panel is collapsed
 * @returns {VDom|null} - the rendered footer
 */
const renderFooter = (props, mappedChildren, isCollapsed) =>
    mappedChildren.footer && !isCollapsed ?
        mappedChildren.footer.render()
        : null;

/**
 * The ContentPanel class.
 * @class ContentPanel
 */
class ContentPanel extends UIComponent {
    /**
     * @inheritDoc
     */
    beforeCreate() {
        this._state = {
            isCollapsed: false
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            bodyBgStyle: BODY_BG_STYLE.DEFAULT,
            bodyClassNames: "",
            classNames: "",
            content: [],
            footer: null,
            headerBgStyle: HEADER_BG_STYLE.ANCHOR,
            headerDisplay: "",
            headerContent: [],
            isCollapsed: false,
            isCollapsible: false,
            key: unique(NAMESPACE),
            showHeaderBottomBorder: true,
            viewChangeEventName: EVENTS.VIEW_CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            bodyBgStyle: forwardProp(this, "bodyBgStyle", "body"),
            bodyClassNames: forwardProp(this, "bodyClassNames", "body"),
            content: forwardProp(this, "content", "body"),
            footer: (footer) => {
                if (footer) {
                    this.replaceMappedChild("footer", footer);
                }
                else if (this.getChild("footer")) {
                    this.removeChild("footer");
                }
            },
            headerBgStyle: forwardProp(this, "bgStyle", "header"),
            headerContent: forwardProp(this, "content", "header"),
            headerDisplay: forwardProp(this, "title", "header"),
            isCollapsed: (isCollapsed) => {
                this._state.isCollapsed = isCollapsed;
                this.getChild("header").setProps({
                    leftActionIcon: getCollapseIcon(isCollapsed),
                    showBorder: !isCollapsed
                });
            },
            isCollapsible: (isCollapsible) => {
                this.getChild("header")
                    .setProp("showLeftAction", isCollapsible)
                    .setProp("isTitleClickable", isCollapsible);
            },
            showHeaderBottomBorder: forwardProp(this, "showBorder", "header")
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                header: new ContentHeader({
                    bgStyle: this.getProp("headerBgStyle"),
                    compact: true,
                    leftActionIcon: getCollapseIcon(this._state.isCollapsed),
                    leftActionEventName: toggleCollapseEvent,
                    showLeftAction: this.getProp("isCollapsible"),
                    titleClickEventName: toggleCollapseEvent
                })
            },
            {
                body: new ContentPanelBody({
                    bodyBgStyle: this.getProp("bodyBgStyle"),
                    bodyClassNames: this.getProp("bodyClassNames"),
                    content: this.getProp("content")
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(toggleCollapseEvent, () => {
            this.stopPropagation(toggleCollapseEvent);
            if (!this.getProp("isCollapsible")) {
                return;
            }

            const newCollapseState = !this._state.isCollapsed;

            this._state.isCollapsed = newCollapseState;
            this.getChild("header").setProps({
                leftActionIcon: getCollapseIcon(newCollapseState),
                showBorder: !newCollapseState && this.getProp("showHeaderBottomBorder")
            });

            this.emit(this.getProp("viewChangeEventName"), { context: this, isCollapsed: newCollapseState });
            this.update();
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        const isCollapsed = this._state.isCollapsed;

        return el(
            "div",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: props.classNames
                }),
                key: props.key
            },
            [
                renderHeader(props, mappedChildren),
                renderBody(el, props, mappedChildren, isCollapsed),
                renderFooter(props, mappedChildren, isCollapsed)
            ]
        );
    }
}

ContentPanel.EVENTS = EVENTS;
ContentPanel.HEADER_BG_STYLE = HEADER_BG_STYLE;
ContentPanel.BODY_BG_STYLE = BODY_BG_STYLE;

export default ContentPanel;
