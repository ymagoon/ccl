"use strict";

import UIComponent from "../../../base";
import Button from "../../atomic/button";
import Menu from "../menu";
import classNames from "classnames";
import { svg } from "../../atomic/icon";

const NAMESPACE = "mpageui-MenuButton";
import i18n from "i18n";

const { navigation: { ExpandMore } } = svg;

/**
 * Enumeration of events emitted by the MenuButton.
 * @type {{CLICK: string, BASIC_ACTION: string, TOGGLE: string, SELECTION_CHANGE: string}}
 */
const EVENTS = {
    CLICK: "MenuButton::click",
    BASIC_ACTION: "MenuButton::basicAction",
    TOGGLE: "MenuButton::toggle",
    SELECTION_CHANGE: "MenuButton::selectionChange"
};

/**
 * Forwards a list of props to the child retrieved by the getChild function.
 * @param {Array<string>} propNames - The list of props to send to the child.
 * @param {Function} getChild - Function that retrieves the desired child.
 * @returns {Array<Object>} An array of prop change handlers.
 */
const forwardProps = (propNames, getChild) => propNames.map((propName) => ({
    [ propName ]: (propVal) => {
        getChild().setProp(propName, propVal);
    }
}));

class MenuButton extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            disabled: false,
            display: "",
            icon: null,
            isSelected: false,
            label: "",
            type: "",
            isOpen: false,
            showHeader: false,
            size: "",
            title: i18n().options,
            content: [],
            clickEventName: EVENTS.CLICK,
            selectionChangeEventName: EVENTS.SELECTION_CHANGE,
            toggleEventName: EVENTS.TOGGLE,
            basicActionEventName: EVENTS.BASIC_ACTION
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return Object.assign(
            {
                icon: (icon) => {
                    if (icon) {
                        icon.setProp("classNames", `${icon.getProp("classNames")} mpageui-MenuButton-icon`);
                        this.getChild("menu").getProp("anchorControl").setProp("classNames", `${NAMESPACE}--icon`);
                    }
                    this.getChild("menu").getProp("anchorControl").replaceAllChildren([ icon ]);
                },
                disabled: (disabled) => {
                    this.getChild("menu").getProp("anchorControl").setProp("disabled", disabled);
                    this.getChild("menu").setProp("isDisabled", disabled);
                }
            },
            // Forward to -> Button
            ...forwardProps(
                [ "type", "display", "label", "clickEventName", "isSelected", "size" ],
                () => this.getChild("menu").getProp("anchorControl")
            ),
            // Forward to -> Menu
            ...forwardProps(
                [
                    "isOpen", "showHeader", "content", "title", "selectionChangeEventName",
                    "toggleEventName", "basicActionEventName"
                ],
                () => this.getChild("menu")
            )
        );
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                menu: new Menu({
                    classNames: `${NAMESPACE}-menu`,
                    anchorControl: new Button({
                        clickEventName: EVENTS.CLICK,
                        icon: new ExpandMore(),
                        displayPosition: "before"
                    })
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    view(el, props) {
        return el("div", {
            class: classNames({
                [ props.classNames ]: props.classNames.length > 0,
                [ NAMESPACE ]: true
            })
        }, this.renderChildren());
    }
}

MenuButton.EVENTS = EVENTS;

export default MenuButton;
