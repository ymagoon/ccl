"use strict";

import UIComponent from "../../../base/UIComponent";
import LoadingSpinner from "./LoadingSpinner";
import classNames from "classnames";

const NAMESPACE = "mpageui-Overlay";

const BACKGROUND_STYLES = {
    LIGHT: "light",
    DARK: "dark",
    CLEAR: "clear"
};

/**
 * renders the icon and message.
 * @param  {Function} el function to create HTML element and render
 * @param  {Object} properties properties passed by the consumer
 * @returns {undefined} this function does not return anything
 */
const renderIconAndMessage = (el, properties) => el(
    "div",
    {
        class: "mpageui-u-text-center" // center align the icon and the message
    },
    [
        new LoadingSpinner({
            isLoading: properties.isLoadingOverlay,
            size: properties.spinnerSize, // accept size from consumer else defaults to LoadingSpinner.SIZE.MEDIUM
            classNames: "mpageui-u-text-align-text" // to align icon center horizontally
        }).render(),
        properties.message ? el(
            "div",
            {
                class: `${NAMESPACE}-message`
            },
            properties.message
        ) : null // render the message with appropriate styling if passed, else do not render message
    ]
);

/**
 * renders the wrapper for icon and message.
 * @param  {Function} el function to create HTML element and render
 * @param  {Object} properties properties passed by the consumer
 * @param  {Object} control Overlay control
 * @returns {undefined} this function does not return anything
 */
const renderIconAndMessageWrapper = (el, properties, control) => el(
    "div",
    {
        class: classNames(
            // makes overlay contain within children or makes it fullscreen
            properties.isRelativeToContainer ? `${NAMESPACE}-container` : `${NAMESPACE}-fullscreen`,
            `${NAMESPACE}-items`,
            `${NAMESPACE}-background--${properties.backgroundStyle}`,
            {
                [`${NAMESPACE}--scroll`]: properties.isScrollable
            }
        ),
        onclick: () => {
            if (!properties.isLoadingOverlay) { // if loading overlay, do not enable click event
                control.setState({
                    isOpen: false
                }).update(); // re-render the UI
                if (properties.onRequestClose) {
                    properties.onRequestClose(); // trigger the callback function if provided
                }
            }
        }
    },
    renderIconAndMessage(el, properties) // call to render icon and message
);


class Overlay extends UIComponent {

    /**
     * @inheritDoc
     */
    initialState() {
        return {
            isOpen: false
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            content: [],
            isOpen: false,
            backgroundStyle: BACKGROUND_STYLES.LIGHT,
            isScrollable: false,
            onRequestClose: null,
            isRelativeToContainer: false,
            isLoadingOverlay: false,
            message: null,
            spinnerSize: LoadingSpinner.SIZE.MEDIUM
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isOpen: (isOpen) => {
                this.setState({
                    isOpen
                });
            },
            content: (content) => {
                this.replaceAllChildren(content); // replace children when content is modified
            }
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren, { state }) {
        return state.isOpen ? el( // overlay wrapper-div to position the elements relative
            "div",
            {
                class: `${NAMESPACE}-wrapper`
            },
            [
                renderIconAndMessageWrapper(el, props, this),
                this.renderChildren()
            ]
        ) : this.renderChildren();
    }
}

Overlay.BACKGROUND_STYLES = BACKGROUND_STYLES;
export default Overlay;
