/**
 * @fileoverview DOM helpers for Popup only
 * @author Gyandeep Singh
 */

"use strict";

import {
    top,
    bottom,
    left,
    right,
    height,
    width
} from "../../../helpers/dom/positioning";
import { mediaQuery } from "../../../base";

const paneHeaderClass = "mpageui-Popup-pane-header";
const paneFooterClass = "mpageui-Popup-pane-footer";
const popupContentClass = "mpageui-Popup-content";

/**
 * Popup primary positions
 * @type {{LEFT: string, RIGHT: string, TOP: string, BOTTOM: string}}
 */
export const popupPositions = {
    LEFT: "mpageui-Popup--left",
    RIGHT: "mpageui-Popup--right",
    TOP: "mpageui-Popup--top",
    BOTTOM: "mpageui-Popup--bottom"
};

/**
 * Popup secondary positions
 * @type {{LEFT: string, RIGHT: string, TOP: string, BOTTOM: string}}
 */
export const secondaryPositions = {
    LEFT: "mpageui-Popup--fit-left",
    RIGHT: "mpageui-Popup--fit-right",
    TOP: "mpageui-Popup--fit-top",
    BOTTOM: "mpageui-Popup--fit-bottom"
};

/**
 * Get the Popup header dom element
 * @param {HTMLElement} paneElem - Main popup pane element
 * @returns {HTMLElement|null} - Popup header element if present else null
 * @private
 */
const getHeaderElem = (paneElem) => paneElem.querySelector(`.${paneHeaderClass}`);

/**
 * Get the Popup footer dom element
 * @param {HTMLElement} paneElem - Main popup pane element
 * @returns {HTMLElement|null} - Popup header element if present else null
 * @private
 */
const getFooterElem = (paneElem) => paneElem.querySelector(`.${paneFooterClass}`);

/**
 * Returns the height of the popup header element if present else 0
 * @param {HTMLElement|null} elem - popup header element
 * @returns {int} Height of header
 * @private
 */
const getElemHeight = (elem) => elem ? height(elem) : 0;

/**
 * Adjust the position of the popup pane element's parent based on the anchor position and
 * primary position. Since that element is position fixed, we need to adjust the style position.
 * @param {HTMLElement} paneElem - Popup pane DOM element
 * @param {popupPositions} priPosition - popup primary positions
 * @param {secondaryPositions} secPosition - popup secondary positions
 * @param {HTMLElement} anchorNode - Anchor DOM element
 * @returns {undefined}
 */
export const adjustPopupPanePosition = (paneElem, priPosition, secPosition, anchorNode) => {
    const parentNode = paneElem.parentNode;

    // primary position adjustments
    if (priPosition !== popupPositions.BOTTOM) {
        parentNode.style.top = `${top(anchorNode)}px`;
    }
    else {
        parentNode.style.top = `${bottom(anchorNode)}px`;
    }

    if (priPosition === popupPositions.RIGHT) {
        parentNode.style.left = `${right(anchorNode)}px`;
    }
    else if (priPosition === popupPositions.LEFT) {
        parentNode.style.left = `${left(anchorNode)}px`;
    }

    // secondary position adjustments
    if (secPosition === popupPositions.TOP) {
        parentNode.style.top = `${bottom(anchorNode)}px`;
    }
    else if (secPosition === popupPositions.LEFT) {
        parentNode.style.left = `${right(anchorNode)}px`;
    }
};

/**
 * Adjust height of the popup and its content based on the space left on the screen.
 * Only do this in scenarios where the popup is getting cutoff after adjustment.
 * @param {HTMLElement} paneElem - Popup pane DOM element
 * @returns {undefined}
 */
export const adjustPopupPaneHeight = (paneElem) => {
    let paneHeight = null;

    if (top(paneElem) < 0) {
        paneHeight = bottom(paneElem);
    }
    else if (bottom(paneElem) > window.innerHeight) {
        paneHeight = window.innerHeight - top(paneElem);
    }

    if (paneHeight) {
        paneElem.style["max-height"] = `${paneHeight}px`;
        paneElem.querySelector(`.${popupContentClass}`)
            .style["max-height"] = `${paneHeight - getElemHeight(getHeaderElem(paneElem)) - getElemHeight(getFooterElem(paneElem))}px`;
    }
};

/**
 * Adjust the position of the popup arrow based on the anchor position and
 * primary position. Since that element is position fixed, we need to adjust the style position.
 * @param {HTMLElement} arrowElem - Popup arrow DOM element
 * @param {popupPositions} priPosition - popup primary positions
 * @param {HTMLElement} anchorNode - Anchor DOM element
 * @returns {undefined}
 */
export const adjustPopupArrowPosition = (arrowElem, priPosition, anchorNode) => {
    switch(priPosition) {
        case popupPositions.TOP:
            arrowElem.style.top = `${top(anchorNode) - height(arrowElem)}px`;
            arrowElem.style.left = `${left(anchorNode) + (width(anchorNode) / 2) - width(arrowElem) / 2}px`;
            break;

        case popupPositions.BOTTOM:
            arrowElem.style.top = `${bottom(anchorNode)}px`;
            arrowElem.style.left = `${left(anchorNode) + (width(anchorNode) / 2) - width(arrowElem) / 2}px`;
            break;

        case popupPositions.LEFT:
            // Minimum height of 0 is taken to avoid the negative height difference and prevent mis-aligned arrow
            arrowElem.style.top = `${top(anchorNode) + Math.max(0, (height(anchorNode) / 2) - (height(arrowElem) / 2))}px`;
            arrowElem.style.left = `${left(anchorNode) - width(arrowElem)}px`;
            break;

        case popupPositions.RIGHT:
            // Minimum height of 0 is taken to avoid the negative height difference and prevent mis-aligned arrow
            arrowElem.style.top = `${top(anchorNode) + Math.max(0, (height(anchorNode) / 2) - (height(arrowElem) / 2))}px`;
            arrowElem.style.left = `${right(anchorNode)}px`;
            break;

    }
};

/**
 * Position the popup pane parent element based on the popup anchor element
 * @param {HTMLElement} paneParentElem - Popup pane parent element
 * @param {HTMLElement} anchorElem - Popup anchor element
 * @returns {undefined}
 */
export const adjustNodeToAnchor = (paneParentElem, anchorElem) => {
    paneParentElem.style.top = `${bottom(anchorElem)}px`;
    paneParentElem.style.left = `${left(anchorElem)}px`;
};

/**
 * Check if the current size of the screen is small or not
 * @returns {boolean} True it its small
 */
export const isSmallerScreen = () => mediaQuery.atMost("XS");
