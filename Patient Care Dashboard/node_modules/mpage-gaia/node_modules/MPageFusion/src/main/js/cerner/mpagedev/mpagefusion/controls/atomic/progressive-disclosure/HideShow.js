import UIComponent from "../../../base";
import classNames from "classnames";
import { svg } from "../icon";
import Container from "../container";
import { Anchor } from "../label";
import i18n from "i18n";
import { forwardProp } from "../../../helpers/props/props";

const { showMore, showLess } = i18n();
const NAMESPACE = "mpageui-HideShow";
const { content: { Expanded, Collapsed } } = svg;
const PRIVATE_EVENTS = {
    ANCHOR_CLICK: "__HideShow::Anchor::click__"
};

/**
 * Micro helper to render the contents
 * @param {Function} el - Generate VDOM
 * @param {Container} container - Child container
 * @returns {Object} Virtual dom
 */
const renderContent = (el, { container }) =>
    el(
        "div",
        {
            class: `${NAMESPACE}-content`
        },
        container.render()
    );

/**
 * Tiny inner class to inject content to the Anchor
 * @class HideShowLabel
 */
class HideShowLabel extends UIComponent {
    initialProps() {
        return {
            icon: null,
            display: ""
        };
    }

    view(el, props) {
        return el(
            "span",
            {
                class: `${NAMESPACE}-display`
            },
            [
                props.icon,
                props.display
            ]
        );
    }
}

/**
 * Basic HideShow control
 * @class HideShow
 */
class HideShow extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            collapsedDisplay: showMore,
            expandedDisplay: showLess,
            isAbove: false,
            isDisabled: false,
            isExpanded: false,
            requestToggleEventName: null, // Required
            content: []
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        // We control this child
        this._hoistedChildren = { label: new HideShowLabel() };
        return [
            {
                anchor: new Anchor({
                    classNames: `${NAMESPACE}-anchor`,
                    clickEventName: PRIVATE_EVENTS.ANCHOR_CLICK,
                    content: [
                        this._hoistedChildren.label
                    ]
                })
            },
            { container: new Container() }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.convertEventUsingProp(
            PRIVATE_EVENTS.ANCHOR_CLICK,
            "requestToggleEventName",
            () => [
                this, {
                    isExpanded: this.getProp("isExpanded")
                }
            ]
        );
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => {
                this.getChild("container").replaceAllChildren(content);
            },
            isExpanded: (isExpanded) => {
                this._hoistedChildren.label.setProps({
                    icon: isExpanded ? (new Expanded({
                        classNames: `${NAMESPACE}-toggleIcon`
                    }).render()) : (new Collapsed({
                        classNames: `${NAMESPACE}-toggleIcon`
                    }).render()),
                    display: isExpanded ? this.getProp("expandedDisplay") : this.getProp("collapsedDisplay")
                });
            },
            isDisabled: forwardProp(this, "isDisabled", "anchor")
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return el(
            "div",
            {
                class: classNames(NAMESPACE, {
                    [ `${NAMESPACE}--above` ]: props.isAbove,
                    [ `${NAMESPACE}--below` ]: !props.isAbove,
                    [ props.classNames ]: (props.classNames !== "")
                })
            },
            [
                mapped.anchor.render(),
                props.isExpanded ? renderContent(el, mapped) : null
            ]
        );
    }
}

export default HideShow;
