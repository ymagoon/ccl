/* eslint
 "no-underscore-dangle": [2, { "allowAfterThis": true, "allow": ["_state"] }]
 */
import { findSelectedIndex, getEmitValue, isSelectable, shouldShowPane } from "./helpers";
import { CHILDREN } from "./const";

// ------------------------------------------------------------------------------
// SearchBar
// ------------------------------------------------------------------------------
/**
 * Handles the desktop search bar focus event.
 * @param {Search} control - The search manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The desktop search bar focus handler.
 */
const handleDesktopSearchBarFocus = (control, eventName) => (src, payload) => {
    control._state.focused = true;
    control.stopPropagation(eventName);

    control.emit(
        control.getProp("inputFocusEventName"),
        control,
        {
            value: getEmitValue(control.getProp("minimumSearchStringLength"), payload.event.target.value)
        }
    );

    control.getChild(CHILDREN.SEARCH_PANE)
        .setProp("isVisible", shouldShowPane(
            control.getProp("results"),
            control.getProp("isLoading"),
            control._state.focused
        ));

    control.update();
};

/**
 * Handles the desktop search bar blur event.
 * @param {Search} control - The search manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The desktop search bar blur handler.
 */
const handleDesktopSearchBarBlur = (control, eventName) => (src, payload) => {
    control._state.focused = false;
    control.stopPropagation(eventName);
    /*
     * Note: In the future, we may want to expose the blur event to consumers
     * under the "inputBlurEventName" prop. For now, we will go with the
     * minimalist approach until otherwise needed.
     */
    control.emit(
        control.getProp("inputBlurEventName"),
        control
    );
    control.update();
};

/**
 * Handles the mobile search bar focus event.
 * @param {Search} control - The search manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The mobile search bar focus handler.
 */
const handleMobileSearchBarFocus = (control, eventName) => (src, payload) => {
    control.stopPropagation(eventName);

    control.emit(
        control.getProp("inputFocusEventName"),
        control,
        {
            value: getEmitValue(control.getProp("minimumSearchStringLength"), payload.event.target.value)
        }
    );
};

/**
 * Handles the search pane overlay click.
 * @param {Search} control - The search instance.
 * @param {string} eventName - The event name.
 * @returns {function} Overlay click handler.
 */
const handlePaneOverlayClick = (control, eventName) => () => {
    control._state.focused = false;
    control.stopPropagation(eventName);

    control.getChild(CHILDREN.SEARCH_POPUP)
        .setProp("selectedIndex", 0);

    control.getChild(CHILDREN.SEARCH_PANE)
        .setProp("selectedIndex", 0)
        .setProp("isVisible", false);
    control.update();
};

/**
 * Handles when the popup closes.
 * @param {Search} control - Search instance.
 * @param {string} eventName - The event name.
 * @returns {function} Function to handle popup close.
 */
const handlePopupClose = (control, eventName) => () => {
    control.stopPropagation(eventName);

    control.getChild(CHILDREN.SEARCH_POPUP)
        .setProp("selectedIndex", 0);

    control.getChild(CHILDREN.SEARCH_PANE)
        .setProp("selectedIndex", 0);

    control.update();
};

/**
 * Checks if the user can confirm a result (by pressing enter). If focused, we assume
 * this is the desktop version, so we make sure the search pane is visible.
 * @param {boolean} focused - Indicates if the desktop bar is focused.
 * @param {boolean} isLoading - Indicates loading state of the manager.
 * Wparam {Object[]} results - Array of results.
 * @param {UIComponent} searchPane - Results pane.
 * @returns {boolean|*} Indicates if a confirmation can be made.
 */
const canConfirm = ({ focused }, { isLoading, results }, searchPane) => focused ?
    (!isLoading && results && results.length && searchPane.getProp("selectedIndex") > -1 && searchPane.getProp("isVisible")) :
    (!isLoading && results && results.length && searchPane.getProp("selectedIndex") > -1);

/**
 * Handles the search bar confirmation event.
 * @param {Search} control - The search manager instance.
 * @param {string} eventName - The name of the confirmation event.
 * @returns {function} Function that handles search bar confirmation.
 */
const handleSearchBarConfirm = (control, eventName) => () => {
    control.stopPropagation(eventName);

    // Prevent invalid confirming results
    if (!canConfirm(control._state, control.getProps(), control.getChild(CHILDREN.SEARCH_PANE))) {
        return;
    }

    // Notify consumers
    control.emit(
        control.getProp("selectionChangeEventName"),
        control,
        control.getProp("results")[control.getChild(CHILDREN.SEARCH_PANE).getProp("selectedIndex")]
    );
    control.getChild(CHILDREN.SEARCH_PANE)
        .setProp("selectedIndex", 0)
        .setProp("isVisible", false);
    control.getChild(CHILDREN.SEARCH_POPUP)
        .setProp("selectedIndex", 0)
        .setProp("isVisible", false);
    control.update();
};

/**
 * Handles the input event from a child search bar.
 * @param {Search} control - The search manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The search bar input handler.
 */
const handleSearchBarInput = (control, eventName) => (src, value) => {
    control.stopPropagation(eventName);
    const emitValue = getEmitValue(control.getProp("minimumSearchStringLength"), value);
    // Don't update the value in search bar as that updates the UI.
    control.getChild(CHILDREN.SEARCH_BAR).setProp("value", value);
    control.getChild(CHILDREN.SEARCH_PANE).setProp("searchValue", emitValue);
    control.getChild(CHILDREN.SEARCH_POPUP).setProp("searchValue", value);
    control.emit(control.getProp("inputEventName"), control, emitValue);
    control.update();
};

/**
 * Handles the search bar navigation event.
 * @param {Search} control - The search manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The desktop search bar navigation.
 */
const handleSearchBarNavigation = (control, eventName) => (src, keyCode, direction) => {
    const newIndex = findSelectedIndex(
        control.getChild(CHILDREN.SEARCH_PANE).getProp("selectedIndex"),
        control.getProp("results"),
        direction
    );

    control.getChild(CHILDREN.SEARCH_PANE)
        .setProp("selectedIndex", newIndex);

    control.getChild(CHILDREN.SEARCH_POPUP)
        .setProp("selectedIndex", newIndex);

    control.update();
};

/**
 * Handles the search bar submit event.
 * @param {Search} control - The search manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The desktop search bar submit handler.
 */
const handleSearchBarSubmit = (control, eventName) => () => {
    control.stopPropagation(eventName);
    control.emit(control.getProp("submitEventName"), control);
};

// ------------------------------------------------------------------------------
// SearchList
// ------------------------------------------------------------------------------
/**
 * Handles the search list select event.
 * @param {Search} control - The search manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The desktop search list select handler.
 */
const handleSearchListSelect = (control, eventName) => (src, { index, result }) => {
    if (!isSelectable(result)) {
        return;
    }
    // Notify consumers
    control.emit(
        control.getProp("selectionChangeEventName"),
        control,
        control.getProp("results")[index]
    );

    control.getChild(CHILDREN.SEARCH_PANE)
        .setProp("isVisible", false)
        .setProp("selectedIndex", 0);

    control.getChild(CHILDREN.SEARCH_POPUP)
        .setProp("isVisible", false)
        .setProp("selectedIndex", 0);

    control.update();
};

export {
    handleDesktopSearchBarBlur,
    handleDesktopSearchBarFocus,
    handleMobileSearchBarFocus,
    handlePaneOverlayClick,
    handlePopupClose,
    handleSearchBarConfirm,
    handleSearchBarInput,
    handleSearchBarNavigation,
    handleSearchBarSubmit,
    handleSearchListSelect
};
