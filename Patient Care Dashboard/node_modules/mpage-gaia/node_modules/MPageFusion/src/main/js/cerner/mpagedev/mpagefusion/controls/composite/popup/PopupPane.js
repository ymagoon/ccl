"use strict";

import UIComponent from "../../../base";
import classnames from "classnames";
import {
    removeWindowResizeListener,
    addWindowResizeListener
} from "../../../helpers/dom/dom";
import { adjustPopupPaneHeight, isSmallerScreen } from "./domHelpers";
import { unique } from "../../../helpers/core/generators";

class PopupPane extends UIComponent {
    /**
     * @inheritdoc
     */
    constructor(props, children) {
        super(props, children);
        this.elementId = unique("popup");
    }

    /**
     * This function calls the adjustPopupPaneHeight which current popup element.
     * @returns {undefined} - undefined
     */
    reAdjustPopPane() {
        adjustPopupPaneHeight(document.getElementById(this.elementId));
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            defaultClassNames: "mpageui-PopupPane",
            visible: true,
            onDomChange: () => { },
            onResize: () => { }
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return props.visible ?
            el(
                "div",
                {
                    id: this.elementId,
                    class: classnames({
                        [props.defaultClassNames]: true,
                        [props.classNames]: props.classNames.length > 0
                    }),
                    oncreate: ({ dom }) => {
                        addWindowResizeListener(props.onResize);
                        props.onDomChange(dom, true);
                    },
                    onupdate: ({ dom }) => !isSmallerScreen() && adjustPopupPaneHeight(dom),
                    onremove: ({ dom }) => {
                        removeWindowResizeListener(props.onResize);

                        /*
                         * Fixes issue where removing the parent to the popup causes the popup element to be
                         * stuck on the document.body. This hooks into the onunload provided by Mithril to
                         * manually remove the element, if it becomes stuck.
                         */
                        if (dom.parentNode.parentNode && dom.parentNode.parentNode === document.body) {
                            document.body.removeChild(dom.parentNode);
                        }
                    }
                },
                el(
                    "div",
                    {
                        class: "mpageui-PopupPane-inner"
                    },
                    [
                        mChildren.header ? mChildren.header.render() : null,
                        mChildren.content.render(),
                        mChildren.footer ? mChildren.footer.render() : null
                    ]
                )
            ) : [];
    }
}

export default PopupPane;
