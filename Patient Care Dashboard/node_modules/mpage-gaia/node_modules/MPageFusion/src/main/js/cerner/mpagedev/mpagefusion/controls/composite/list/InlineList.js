import UIComponent from "../../../base";
import List from "./List";
import { forwardProp } from "../../../helpers/props/props";
import { makeContent, handleEvents } from "./helpers";

const EVENTS = {
    SELECTION_CHANGE_EVENT: "List::SelectionChange",
    TOGGLE_EVENT: "List::Toggle",
    BASIC_ACTION_EVENT: "List::BasicAction"
};

/**
 * Exposed version of List control that restricts content in list.
 * @class InlineList
 * @extends UIComponent
 */
export default class InlineList extends UIComponent {

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            content: [],
            classNames: "",
            autoInsertDividers: true,
            isDecorated: false,
            isHeaderTextClickable: false,
            selectionChangeEventName: EVENTS.SELECTION_CHANGE_EVENT,
            toggleEventName: EVENTS.TOGGLE_EVENT,
            basicActionEventName: EVENTS.BASIC_ACTION_EVENT
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            classNames: forwardProp(this, "classNames", "list"),
            autoInsertDividers: forwardProp(this, "autoInsertDividers", "list")
        };
    }

    /**
     * @inheritDoc
     */
    dependentPropChangeHandlers() {
        return [
            [ "content", "isDecorated", "isHeaderTextClickable", (content, isDecorated, isHeaderTextClickable) =>
                this.getChild("list").setProps({
                    content: makeContent(
                        content,
                        {
                            showDismissButton: false,
                            isHeaderTextClickable,
                            isDecorated
                        }
                    ),
                    isDecorated
                })
            ]
        ];
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                list: new List()
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        handleEvents(this);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}

InlineList.EVENTS = EVENTS;
