"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import Button from "../button";
import Container from "../container";
import { forwardProp, emitUsingProp } from "../../../helpers/props/props";

const NAMESPACE = "mpageui-ContentHeader";

/**
 * Background type enumeration.
 * @type {{ANCHOR: string, CANVAS: string}}
 */
const BACKGROUND_STYLE = {
    ANCHOR: "mpageui-u-bg-anchor",
    CANVAS: "mpageui-u-bg-canvas"
};

/**
 * ContentHeader event enumeration.
 * @type {{TITLE_CLICK: string}}
 */
const EVENTS = {
    TITLE_CLICK: "ContentHeader::titleClick"
};

/**
 * Enumeration for events private to the ContentHeader.
 * @type {{LEFT_ACTION_CLICK: string, RIGHT_ACTION_CLICK: string}}
 */
const PRIVATE_EVENTS = {
    LEFT_ACTION_CLICK: "__ContentHeader::leftActionClick__",
    RIGHT_ACTION_CLICK: "__ContentHeader::rightActionClick__"
};

/**
 * Enumeration for standard classes.
 * @type {{WITH_BORDER: string}}
 */
const STANDARD_CLASSES = {
    COMPACT: `${NAMESPACE}--compact`,
    WITH_BORDER: `${NAMESPACE}--border`
};

/**
 * Small helper to determine when to replace or remove a child of the
 * ContentHeader.
 * @param {ContentHeader} parent - The content header instance.
 * @param {string} childKey - The unique child key.
 * @returns {Function} The prop change handler for the content header.
 */
const replaceChild = (parent, childKey) => (child) =>
    (child && child.isUIComponent) ?
        parent.replaceMappedChild(childKey, child) :
        parent.removeChild(childKey);

/**
 * Renders the title of the ContentHeader.
 * @param {Function} el - A function for creating virtual elements.
 * @param {string} title - The title text for the ContentHeader.
 * @param {function} titleClick - The title click callback.
 * @param {boolean} isTitleClickable - Indicates if the title is clickable.
 * @returns {VDom} The rendered title.
 */
const renderTitle = (el, title, titleClick, isTitleClickable) =>
    title ? [
        el(
            "h3",
            {
                class: classNames(
                    `${NAMESPACE}-title`,
                    {
                        "mpageui-u-pointer": isTitleClickable
                    }
                ),
                onclick: titleClick
            },
            el(
                "span",
                {},
                title
            )
        )
    ] : [];

/**
 * Renders an action if it should be shown.
 * @param {Function} el - A function for creating virtual elements.
 * @param {boolean} showAction - Whether the action should be shown or not.
 * @param {Button} actionControl - The action control.
 * @returns {[VDom] | []} The rendered action.
 */
const renderAction = (el, showAction, actionControl) =>
    showAction && actionControl ? [
        actionControl.render()
    ] : [];

/**
 * Renders a content header accessory, if defined.
 * @param {Function} el - A function for creating virtual elements.
 * @param {UIComponent | null} accessory - An accessory control.
 * @returns {[VDom] | []} The rendered accessory.
 */
const renderAccessory = (el, accessory) =>
    accessory ? [
        el(
            "div",
            {
                class: `${NAMESPACE}-accessory`
            },
            accessory.render()
        )
    ] : [];

/**
 * Renders the content of the ContentHeader.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Array<UIComponent>} contentProps - The content props.
 * @param {UIComponent} content - The content container UIComponent for the
 * ContentHeader.
 * @returns {VDom} The rendered title.
 */
const renderContent = (el, contentProps, content) =>
    (contentProps && contentProps.length) ? [
        el(
            "div",
            {
                class: `${NAMESPACE}-content`
            },
            el(
                "div",
                {
                    class: `${NAMESPACE}-content-wrapper`
                },
                content.render()
            )
        )
    ] : [];

/**
 * Renders the children of the ContentHeader.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Array<UIComponent>} content - The content prop, or child UIComponent
 * objects to be rendered in the header.
 * @param {boolean} showLeftAction - Whether to show the left action or not.
 * @param {boolean} showRightAction - Whether to show the right action or not.
 * @param {string} title - The title string.
 * @param {SvgIcon} leftActionIcon - The left action icon.
 * @param {SvgIcon} rightActionIcon - The right action icon.
 * @param {boolean} isTitleClickable - If the title is clickable.
 * @param {Container} contentContainer - The UIComponent that contains the
 * child UIComponents of the ContentHeader.
 * @param {Button} leftActionButton - The left action button.
 * @param {UIComponent} leftAccessory - The left accessory component.
 * @param {UIComponent} rightAccessory - The right accessory component.
 * @param {Button} rightActionButton - The right action button.
 * @param {function} titleClick - Title click handler.
 * @returns {VDom} The rendered children.
 */
const renderChildren =
    (el,
        // Props
        { content, showLeftAction, showRightAction, title, leftActionIcon, rightActionIcon, isTitleClickable },
        // Children
        { contentContainer, leftActionButton, leftAccessory, rightAccessory, rightActionButton },
        // Events
        { titleClick }) =>
        [
            ...renderAction(el, showLeftAction && leftActionIcon, leftActionButton),
            ...renderAccessory(el, leftAccessory),
            ...renderTitle(el, title, titleClick, isTitleClickable),
            ...renderContent(el, content, contentContainer),
            ...renderAccessory(el, rightAccessory),
            ...renderAction(el, showRightAction && rightActionIcon, rightActionButton)
        ];

/**
 * The ContentHeader class.
 * @class ContentHeader
 */
class ContentHeader extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            compact: false,
            content: null,
            isTitleClickable: false,
            leftAccessory: null,
            leftActionIcon: null,
            leftActionEventName: "",
            leftActionLabel: "",
            rightAccessory: null,
            rightActionIcon: null,
            rightActionEventName: null,
            rightActionLabel: "",
            showLeftAction: true,
            showRightAction: true,
            showBorder: true,
            title: "",
            titleClickEventName: EVENTS.TITLE_CLICK,
            bgStyle: BACKGROUND_STYLE.ANCHOR
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (contents) => {
                this.getChild("contentContainer").replaceAllChildren(contents);
            },
            leftAccessory: replaceChild(this, "leftAccessory"),
            rightAccessory: replaceChild(this, "rightAccessory"),
            leftActionIcon: forwardProp(this, "icon", "leftActionButton"),
            leftActionLabel: forwardProp(this, "label", "leftActionButton"),
            rightActionIcon: forwardProp(this, "icon", "rightActionButton"),
            rightActionLabel: forwardProp(this, "label", "rightActionButton")
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                contentContainer: new Container({})
            },
            {
                leftActionButton: new Button({
                    classNames: `${NAMESPACE}-action ${NAMESPACE}-action-left`,
                    type: Button.TYPE.LINK,
                    clickEventName: PRIVATE_EVENTS.LEFT_ACTION_CLICK
                })
            },
            {
                rightActionButton: new Button({
                    classNames: `${NAMESPACE}-action ${NAMESPACE}-action-right`,
                    type: Button.TYPE.LINK,
                    clickEventName: PRIVATE_EVENTS.RIGHT_ACTION_CLICK
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.redirectEventUsingProp(
            PRIVATE_EVENTS.LEFT_ACTION_CLICK,
            "leftActionEventName",
            this
        );
        this.redirectEventUsingProp(
            PRIVATE_EVENTS.RIGHT_ACTION_CLICK,
            "rightActionEventName",
            this
        );
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "header",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: (props.classNames !== ""),
                    [ STANDARD_CLASSES.COMPACT ]: props.compact,
                    [ `${props.bgStyle}` ]: (props.bgStyle !== ""),
                    [ STANDARD_CLASSES.WITH_BORDER ]: props.showBorder
                })
            },
            renderChildren(
                el,
                props,
                mappedChildren,
                {
                    titleClick: emitUsingProp("titleClickEventName", this, this)
                }
            )
        );
    }
}

ContentHeader.BACKGROUND_STYLE = BACKGROUND_STYLE;
ContentHeader.BG_STYLE = BACKGROUND_STYLE;

export default ContentHeader;
