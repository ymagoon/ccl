"use strict";
import UIComponent from "../../../../base/UIComponent";

/**
 * Highlights the text entered in the search box with the ones
 * found in the suggestions. Sanitize the searched string to prevent special
 * characters from not highlighting
 *
 * @param {Function} el - A function that returns a single virtual dom element.
 * @param {Array} highlightList - List containing the list of searched string(s)
 * @param {String} suggestion - Search suggestion
 * @param {function} highlighter - The function responsible for wrapping or highlighting
 * the matched text.
 * @returns {Array} returns a list of items that may contain the terms bolder
 */
const highlightText = (el, highlightList, suggestion, highlighter) => {
    const searchRegEx = highlightList.join("|");
    // Prevent Regex from interpreting special characters as Regex directives
    const sanitizedSearchStr = searchRegEx.replace(/[-[\]{}()*+?.,\\^$#\s]/g, "\\$&");
    const suggestionsList = suggestion.split(new RegExp(`(${sanitizedSearchStr})`, "i"));
    return suggestionsList.map(
        (item) =>
            highlightList.indexOf(item.toLowerCase()) > -1 ? highlighter(el, item) : item
    );
};
/**
 * Highlights the part of searched string within the result and bolds them for clarity
 *
 * @class HighlightText
 */
class HighlightText extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            text: "",
            searchFor: "",
            highlighter: (el, text) => el(
                "b",
                {},
                text
            )
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "span",
            {},
            highlightText(
                el,
                props.searchFor.toLowerCase().split(" "),
                props.text,
                props.highlighter
            )
        );
    }
}

export default HighlightText;
