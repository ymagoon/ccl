"use strict";

import UIComponent from "../../../../base";
import { CheckboxGroup } from "../../select-group";
import { unique } from "../../../../helpers/core/generators";
import {
    renderCriticalitySection,
    renderDualColumnView,
    renderErrorText,
    renderHelperText,
    renderTitle,
    renderSublabelContent
} from "../helpers/view";
import {
    generateValueChangePayload
} from "../helpers/props";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const FormCheckboxGroupEvents = {
    CHANGE: "FormCheckboxGroup::change"
};

const namespace = "mpageui-FormCheckboxGroup";

/**
 * The FormCheckboxGroup class.
 * @class FormCheckboxGroup
 */
class FormCheckboxGroup extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._state = {
            showErrorText: false,
            showHelperText: true,
            value: null
        };
        this._runRefreshItems = false;
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            criticalityHandler: null,
            completionHandler: () => true,
            display: "",
            errorHandler: null,
            formName: unique(namespace),
            hasInlineLabel: false,
            helperHandler: null,
            isDisabled: false,
            isRequired: false,
            showErrorText: false,
            showHelperText: true,
            showRequiredIndicator: true,
            sublabelContent: null,
            options: {},
            value: [],
            valueChangeEventName: FormCheckboxGroupEvents.CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            formName: () => { this._runRefreshItems = true; },
            isDisabled: () => { this._runRefreshItems = true; },
            showErrorText: (showErrorText) => { this._state.showErrorText = showErrorText; },
            showHelperText: (showHelperText) => { this._state.showHelperText = showHelperText; },
            options: (options) => {
                this.getChild("checkboxGroup").setProps(options);
                this._runRefreshItems = true;
            },
            value: (value = []) => {
                this._state.value = value;
                this._runRefreshItems = true;
            },
            sublabelContent: (sublabelContent) =>
                (sublabelContent && sublabelContent.isUIComponent)
                    ? this.replaceMappedChild("sublabelContent", sublabelContent)
                    : this.removeChild("sublabelContent")
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                checkboxGroup: new CheckboxGroup(Object.assign({ isDisabled: null }, this.getProp("options")))
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(CheckboxGroup.EVENTS.SELECTION_CHANGE, (ctx, payload) => {
            this.stopPropagation(CheckboxGroup.EVENTS.SELECTION_CHANGE);

            const value = payload.selected.ids;

            this._state = {
                showErrorText: true,
                showHelperText: true,
                value
            };

            this.emit(this.getProp("valueChangeEventName"), this,
                generateValueChangePayload(this.getProps(), value)
            );

            this.update();
        });
    }

    /**
     * refreshes the checkbox items
     * @returns {undefined} undefined
     * @private
     */
    _refreshItems() {
        const value = this._state.value;
        const checkboxGroup = this.getChild("checkboxGroup");
        const items = checkboxGroup.getProp("items");
        const isDisabled = this.getProp("isDisabled");
        const formName = this.getProp("formName");

        checkboxGroup.setProp("items", items.map((item, i) => Object.assign({}, item, {
            isSelected: value.includes(String(item.id || i)),
            isDisabled,
            formName
        })));
    }

    /**
     * @inheritDoc
     */
    beforeRender() {
        if (this._runRefreshItems) {
            this._refreshItems();
            this._runRefreshItems = false;
        }
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        const state = this._state;
        return el(
            "div",
            {
                class: namespace
            },
            [
                renderDualColumnView(el, props.hasInlineLabel,
                    [
                        renderTitle(el, props),
                        renderSublabelContent(el, props, mappedChildren)
                    ],
                    [
                        mappedChildren.checkboxGroup.render(),
                        renderErrorText(el, props, state),
                        renderCriticalitySection(el, props, state),
                        renderHelperText(el, props, state)
                    ]
                )
            ]
        );
    }
}

FormCheckboxGroup.EVENTS = FormCheckboxGroupEvents;

export default FormCheckboxGroup;
