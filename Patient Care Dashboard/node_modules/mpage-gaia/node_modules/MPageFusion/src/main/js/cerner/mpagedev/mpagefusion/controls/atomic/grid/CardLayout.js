import UIComponent, { mediaQuery } from "../../../base";
import { CellGrid } from "../../atomic/grid";
import {
    addWindowResizeListener,
    removeWindowResizeListener
} from "../../../helpers/dom/dom";

const isExtraSmallScreen = () => mediaQuery.atMost("XS");
const isSmallScreen = () => mediaQuery.atMost("SM");
const RESIZE_TIMEOUT = 300;
const DEFAULT_XS_COLUMNCOUNT = 1;
const DEFAULT_SM_COLUMNCOUNT = 2;
const DEFAULT_MD_COLUMNCOUNT = 6;

export default class CardLayOut extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._windowResizeHandler = this._windowResizeHandler.bind(this);
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            content: []
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => this.getChild("grid")
                .setProps({ columnCount: this._calculateColumnCount(), content })
        };
    }

    /**
     * handles the number of columns based on the screen size
     * @returns {number} Returns the column count.
     */
    _calculateColumnCount() {
        let columnCount = DEFAULT_MD_COLUMNCOUNT;
        if (isExtraSmallScreen()) {
            columnCount = DEFAULT_XS_COLUMNCOUNT;
        }
        else if(isSmallScreen()) {
            columnCount = DEFAULT_SM_COLUMNCOUNT;
        }
        else if(this.getProps().content.length < DEFAULT_MD_COLUMNCOUNT) {
            columnCount = (this.getProps().content.length === 1 || this.getProps().content.length === 0) ? 2 : this.getProps().content.length;
        }
        return columnCount;
    }

    /**
     * handles window resizing
     * @returns {undefined}
     */
    _windowResizeHandler() {
        setTimeout(() => {
            this.getChild("grid").setProp("columnCount", this._calculateColumnCount()).update();
        }, RESIZE_TIMEOUT);
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                grid: new CellGrid({
                    flowDirection: "horizontal"
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            {
                oncreate: () => addWindowResizeListener(this._windowResizeHandler),
                onremove: () => removeWindowResizeListener(this._windowResizeHandler)
            },
            this.renderChildren()
        );
    }
}
