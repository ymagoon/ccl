"use strict";

import ContentHeader from "./ContentHeader";
import UIComponent from "../../../base";
import { forwardProp } from "../../../helpers/props/props";
import { svg } from "../icon";
import i18n from "i18n";

const { dismiss, back } = i18n();
const { navigation: { Close, Previous } } = svg;

/**
 * Enumeration for events public to the NavigationHeader.
 * @type {{BACK: string, DISMISS: string, TITLE_CLICK: string}}
 */
const EVENTS = {
    BACK: "NavigationHeader::back",
    DISMISS: "NavigationHeader::dismiss",
    TITLE_CLICK: "NavigationHeader::titleClick"
};

/**
 * Enumeration for events private to the NavigationHeader.
 * @type {{BACK_CLICK: string, DISMISS_CLICK: string, TITLE_CLICK: string}}
 */
const PRIVATE_EVENTS = {
    BACK_CLICK: "__NavigationHeader::backClick__",
    DISMISS_CLICK: "__NavigationHeader::dismissClick__",
    TITLE_CLICK: "__NavigationHeader::titleClick__"
};

/**
 * Enumeration for constant child names.
 * @type {{CONTENT_HEADER: string}}
 */
const CHILDREN = {
    CONTENT_HEADER: "contentHeader"
};

const BACKGROUND_STYLE = ContentHeader.BACKGROUND_STYLE;

/**
 * The NavigationHeader class.
 * @class NavigationHeader
 */
class NavigationHeader extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            backEventName: EVENTS.BACK,
            classNames: "",
            compact: false,
            content: null,
            dismissEventName: EVENTS.DISMISS,
            isTitleClickable: false,
            leftAccessory: null,
            rightAccessory: null,
            showBack: false,
            showBorder: true,
            showDismiss: false,
            title: "",
            titleClickEventName: EVENTS.TITLE_CLICK,
            bgStyle: BACKGROUND_STYLE.ANCHOR
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            classNames: forwardProp(this, "classNames", CHILDREN.CONTENT_HEADER),
            compact: forwardProp(this, "compact", CHILDREN.CONTENT_HEADER),
            content: forwardProp(this, "content", CHILDREN.CONTENT_HEADER),
            isTitleClickable: forwardProp(this, "isTitleClickable", CHILDREN.CONTENT_HEADER),
            leftAccessory: forwardProp(this, "leftAccessory", CHILDREN.CONTENT_HEADER),
            rightAccessory: forwardProp(this, "rightAccessory", CHILDREN.CONTENT_HEADER),
            showBack: forwardProp(this, "showLeftAction", CHILDREN.CONTENT_HEADER),
            showBorder: forwardProp(this, "showBorder", CHILDREN.CONTENT_HEADER),
            showDismiss: forwardProp(this, "showRightAction", CHILDREN.CONTENT_HEADER),
            title: forwardProp(this, "title", CHILDREN.CONTENT_HEADER),
            bgStyle: forwardProp(this, "bgStyle", CHILDREN.CONTENT_HEADER)
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                [ CHILDREN.CONTENT_HEADER ]: new ContentHeader({
                    leftActionIcon: new Previous(),
                    leftActionEventName: PRIVATE_EVENTS.BACK_CLICK,
                    leftActionLabel: back,
                    rightActionIcon: new Close(),
                    rightActionEventName: PRIVATE_EVENTS.DISMISS_CLICK,
                    rightActionLabel: dismiss,
                    titleClickEventName: PRIVATE_EVENTS.TITLE_CLICK
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.redirectEventUsingProp(PRIVATE_EVENTS.BACK_CLICK, "backEventName", this);
        this.redirectEventUsingProp(PRIVATE_EVENTS.DISMISS_CLICK, "dismissEventName", this);
        this.redirectEventUsingProp(PRIVATE_EVENTS.TITLE_CLICK, "titleClickEventName", this);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return mapped.contentHeader.render();
    }
}

NavigationHeader.BACKGROUND_STYLE = BACKGROUND_STYLE;
NavigationHeader.EVENTS = EVENTS;

export default NavigationHeader;
