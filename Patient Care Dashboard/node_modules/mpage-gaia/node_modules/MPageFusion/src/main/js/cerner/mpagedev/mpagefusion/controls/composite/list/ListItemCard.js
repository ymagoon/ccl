"use strict";
import UIComponent from "../../../base";
import classNames from "classnames";
import Card from "../../atomic/card";
import { forwardProp } from "../../../helpers/props/props";

const ListItemCardEvents = {
    LIST_ITEM_CLICK: "ListItemCard::ItemClick",
    LIST_ITEM_SELECTION_CHANGE: "ListItemCard::ItemSelectionChange"
};

const ListItemCardInternalEvents = {
    LIST_ITEM_CLICK: "ListItemCard::Internal::ItemClick",
    LIST_ITEM_SELECTION_CHANGE: "ListItemCard::Internal::ItemSelectionChange"
};
const NAMESPACE = "mpageui-ListItemCard";

/**
 * List item consisting of a Card
 * @class ListItemCard
 */
class ListItemCard extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            ariaAttributes: [],
            classNames: "",
            display: "",
            id: "",
            items: [],
            clickEventName: ListItemCardEvents.LIST_ITEM_CLICK,
            selectionChangeEventName: ListItemCardEvents.LIST_ITEM_SELECTION_CHANGE,
            hasProgressiveDisclosure: false,
            isCardSelectable: true,
            isHoverable: true,
            shouldTruncate: true,
            isDualColumn: false,
            isSelected: false,
            leftAccessory: null,
            rightAccessory: null
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                card: new Card({
                    clickEventName: ListItemCardInternalEvents.LIST_ITEM_CLICK,
                    selectionChangeEventName: ListItemCardInternalEvents.LIST_ITEM_SELECTION_CHANGE
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            items: forwardProp(this, "items", "card"),
            leftAccessory: forwardProp(this, "leftAccessory", "card"),
            rightAccessory: forwardProp(this, "rightAccessory", "card"),
            hasProgressiveDisclosure: forwardProp(this, "hasProgressiveDisclosure", "card"),
            isCardSelectable: forwardProp(this, "isSelectable", "card"),
            shouldTruncate: forwardProp(this, "truncate", "card"),
            isDualColumn: forwardProp(this, "isDualColumn", "card"),
            isSelected: forwardProp(this, "isSelected", "card"),
            isHoverable: forwardProp(this, "isHoverable", "card")
        };
    }


    /**
     * @inheritDoc
     */
    afterCreate() {
        this.convertEventUsingProp(
            ListItemCardInternalEvents.LIST_ITEM_CLICK,
            "clickEventName",
            (sourceControl, payload) => [ this, this.getProp("display"), this.getProp("id") ]
        );
        this.convertEventUsingProp(
            ListItemCardInternalEvents.LIST_ITEM_SELECTION_CHANGE,
            "selectionChangeEventName",
            (sourceControl, isSelected) => [ this, this.getProp("display"), this.getProp("id"), isSelected ]
        );
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "li",
            Object.assign(
                {
                    class: classNames({
                        [ NAMESPACE ]: true,
                        [`${ NAMESPACE }--hover`]: props.isHoverable,
                        [ props.classNames ]: !!props.classNames
                    })
                },
                ...props.ariaAttributes),
            this.renderChildren()
        );
    }
}
ListItemCard.EVENTS = ListItemCardEvents;
export default ListItemCard;
