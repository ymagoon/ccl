"use strict";

/**
 * Generates the initial state of the CollapseButtonGroup.
 * @param {Object} props - The initial props of the CollapseButtonGroup.
 * @returns {Object} The initial state of the CollapseButtonGroup.
 */
const initialState = (props = {}) => ({
    selected: {
        ids: []
    },
    range: props.items ? props.items.length : 0
});

/**
 * Given the current state and a mutation object, calculates the next state
 * on selection change.
 * @param {Object} currentState - The current state of the CollapseButtonGroup.
 * @param {Array<string>} selections - Array of newly selected ids.
 * @param {Array<string>} deselections - Array of newly deselected ids.
 * @returns {Object} The newly calculated state of the CollapseButtonGroup.
 */
const selectionState = (currentState = {
    selected: { ids: [] }
}, { changed: { selections, deselections } }) => Object.assign({}, currentState, {
    selected: {
        ids: [
            // Filter out items that are being de-selected
            ...currentState.selected.ids.filter(
                (id) => !deselections.includes(id)
            ),
            ...selections
        ]
    }
});

export {
    initialState,
    selectionState
};
