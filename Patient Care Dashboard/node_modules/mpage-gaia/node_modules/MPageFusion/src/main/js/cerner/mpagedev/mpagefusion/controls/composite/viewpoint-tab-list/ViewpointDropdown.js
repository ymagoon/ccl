import UIComponent from "../../../base";
import ViewpointDropdownContent from "./ViewpointDropdownContent";
import Button from "../../atomic/button";

import { svg } from "../../atomic/icon";

const { navigation: { ExpandMore, ExpandLess } } = svg;

const ViewpointDropDownEvents = {
    CLICK: "ViewpointDropdown::click"
};

/**
 * Based on the isOpen value, creates an icon.
 * @param {boolean} isOpen - The open state of the dropdown.
 * @returns {ExpandMore | ExpandLess} The expanded state icon.
 */
const getIcon = (isOpen) =>
    isOpen ? new ExpandLess({
        classNames: "mpageui-ViewpointDropdown-toggleIcon"
    }) : new ExpandMore({
        classNames: "mpageui-ViewpointDropdown-toggleIcon"
    });

/**
 * The ViewpointDropdown class.
 * @class ViewpointDropdown
 */
export default class ViewpointDropdown extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            display: "",
            isOpen: false
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            display: (display) => {
                this.getChild("button").getChild("vwp").setProp("display", display);
            },
            isOpen: (isOpen) => {
                this.getChild("button").getChild("vwp").setProp("icon", getIcon(isOpen));
            }
        };
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(Button.EVENTS.CLICK, () => {
            this.stopPropagation(Button.EVENTS.CLICK);
            this.setProp("isOpen", !this.getProp("isOpen"));
            this.emit(ViewpointDropDownEvents.CLICK, this.getProp("isOpen"));
            this.update();
        });
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                button: new Button(
                    {
                        classNames: "mpageui-ViewpointDropdown",
                        type: "link"
                    },
                    [
                        {
                            vwp: new ViewpointDropdownContent({
                                icon: getIcon(this.getProp("isOpen"))
                            })
                        }
                    ]
                )
            }
        ];
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return this.getChild("button").render();
    }
}

ViewpointDropdown.EVENTS = ViewpointDropDownEvents;
