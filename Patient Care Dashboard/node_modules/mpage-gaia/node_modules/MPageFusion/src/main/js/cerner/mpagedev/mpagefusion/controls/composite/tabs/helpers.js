"use strict";

export const TabControlOrientation = {
    HORIZONTAL: "horizontal",
    VERTICAL: "vertical"
};

export const TabControlEvents = {
    TAB_SELECTION_CHANGE: "TabControl::tabSelectionChange",
    MENU_SELECTION_CHANGE: "TabControl::menuSelectionChange",
    TAB_ORDER_CHANGE: "TabControl::orderChange"
};

export const TabControlInternalEvents = {
    TAB_SELECTION_CHANGE: "__TabControl::tabSelectionChange__",
    MENU_SELECTION_CHANGE: "__TabControl::menuSelectionChange__",
    TAB_ORDER_CHANGE: "__TabControl::orderChange__"
};

export const TabListControlEvents = {
    TAB_SELECTION_CHANGE: "TabListControl::tabSelectionChange",
    TAB_ORDER_CHANGE: "TabListControl::orderChange"
};

export const TabMenuEvents = {
    MENU_SELECTION_CHANGE: "TabMenu::menuSelectionChange"
};

/**
 * @param {Array} tabList - List of tabs objects uniquely identified by id
 * @param {String} id - Unique id for a tab
 * @returns {Object} Tab object based on the id provided from the tab list
 */
const getTab = (tabList, id) => tabList.find((tab) => tab.id === id);

/**
 * @param {Array} tabList - List of tabs objects uniquely identified by id
 * @param {String} id - Unique id for a tab
 * @returns {String} Tab object display based on the id provided from the tab list
 */
export const getTabDisplay = (tabList, id) => getTab(tabList, id).display;

/**
 * Constructs a new list for menu based on the sort order change from drag and drop action
 * Updated list is in terms of ids: id1, id3, id2 etc. we use this to re-arrange the tabs using old tab
 * list provided using the prop by consumer
 *
 * @param {Array<String>} updatedList - Changed tab order list ids
 * @param {Array<Object>} oldList - Original tab list
 * @returns {Array<Object>} Updated list of objects i.e tabs
 */
export const getNewTabList = (updatedList, oldList) => updatedList.map((id) => getTab(oldList, id));

/**
 * Constructs input object for Menu from the tab list, this is also called when the tabs are
 * re-arranged so that the menu is synced as well
 *
 * @param {String} selectedTabId - Currently selected tab id
 * @param {Array<Object>} tabList - List of tabs objects uniquely identified by id
 * @returns {Array<Object>} List of tab id's, displays and their selected status
 */
export const generateMenuContent = (selectedTabId, tabList) =>
    tabList.map((tab) => Object.assign(
        {
            isSelected: tab.id === selectedTabId
        }, tab));

/**
 * If the initially selected tab id is not provided then we pick the first tab as selected tab
 *
 * @param {Array} tabList - List of tabs objects uniquely identified by id
 * @returns {String} id of the first tab from tablist
 */
export const getInitialTabId = (tabList) => tabList[ 0 ].id;
