"use strict";

import UIComponent from "../../../../base";
import ComboBox from "../../../composite/comboBox";
import { PRIVATE_EVENTS } from "../../../composite/comboBox/manager/const";
import { unique } from "../../../../helpers/core/generators";
import { forwardProp } from "../../../../helpers/props/props";
import {
    renderCriticalitySection,
    renderDualColumnView,
    renderErrorText,
    renderHelperText,
    renderTitle
} from "../helpers/view";
import {
    generateValueChangePayload
} from "../helpers/props";
import {
    characterCountHandler,
    generatePatternMatchErrorHandler,
    maxLengthHandler
} from "../helpers/handlers/text";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const namespace = "mpageui-FormComboBox";

/**
 * The FormComboBox class.
 * @class FormComboBox
 */
class FormComboBox extends UIComponent {

    /**
     * @inheritDoc
     */
    initialState() {
        return {
            showErrorText: false,
            showHelperText: true,
            value: ""
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            blurEventName: FormComboBox.EVENTS.BLUR,
            criticalityHandler: null,
            completionHandler: (value) => value !== null && value !== "",
            display: "",
            errorHandler: FormComboBox.ERROR_HANDLERS.maxLength,
            focusEventName: FormComboBox.EVENTS.FOCUS,
            formName: unique(namespace),
            hasInlineLabel: false,
            helperHandler: FormComboBox.HELPER_HANDLERS.charCount,
            isDisabled: false,
            isRequired: false,
            maxLength: null,
            options: {},
            showErrorText: false,
            showHelperText: false,
            showRequiredIndicator: true,
            value: "",
            valueChangeEventName: FormComboBox.EVENTS.CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isDisabled: forwardProp(this, "isDisabled", "comboBox"),
            formName: forwardProp(this, "name", "comboBox"),
            showErrorText: (showErrorText) => { this.setState({ showErrorText }); },
            showHelperText: (showHelperText) => { this.setState({ showHelperText }); },
            options: (options) => {
                this.getChild("comboBox").setProps(options);
            },
            value: (value = "") => {
                this.setState({ value });
                this.getChild("comboBox").setProp("value", value === null ? "" : value);
            },
            results: forwardProp(this, "results", "comboBox")
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                comboBox: new ComboBox(this.getProp("options"))
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(PRIVATE_EVENTS.BLUR, () => {
            this.stopPropagation(PRIVATE_EVENTS.BLUR);
            if (this._state.value !== "") {
                this._state.showHelperText = true;
                this._state.showErrorText = true;
            }
            this.emit(this.getProp("blurEventName"), this);
            this.update();
        });

        this.on(PRIVATE_EVENTS.FOCUS, () => {
            this.stopPropagation(PRIVATE_EVENTS.FOCUS);
            this._state.showHelperText = true;
            this.emit(this.getProp("focusEventName"), this);
            this.update();
        });

        this.on(this.getChild("comboBox").getProp("inputEventName"), (ctx, value) => {
            this._state = {
                showErrorText: true,
                showHelperText: true,
                value
            };
            this.emit(this.getProp("valueChangeEventName"), this,
                generateValueChangePayload(this.getProps(), value)
            );
            this.update();
        });

        this.on(ComboBox.EVENTS.SELECTION_CHANGE, (ctx, { currentResult }) => {
            this.stopPropagation(ComboBox.EVENTS.SELECTION_CHANGE);
            this._state = {
                showErrorText: true,
                showHelperText: true,
                value: currentResult.data[0].display
            };

            this.emit(this.getProp("valueChangeEventName"), this,
                generateValueChangePayload(this.getProps(), currentResult.data[0].display)
            );
            this.update();
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren, { state }) {
        return el(
            "div",
            {
                class: namespace
            },
            [
                renderDualColumnView(el, props.hasInlineLabel,
                    [
                        renderTitle(el, props)
                    ],
                    [
                        mappedChildren.comboBox.render(),
                        renderErrorText(el, props, state),
                        renderCriticalitySection(el, props, state),
                        renderHelperText(el, props, state)
                    ]
                )
            ]
        );
    }
}

FormComboBox.EVENTS = {
    BLUR: "FormComboBox::blur",
    CHANGE: "FormComboBox::change",
    FOCUS: "FormComboBox::focus"
};
FormComboBox.HELPER_HANDLERS = {
    charCount: characterCountHandler
};
FormComboBox.ERROR_HANDLERS = {
    maxLength: maxLengthHandler,
    generatePatternMatchHandler: generatePatternMatchErrorHandler
};

export default FormComboBox;
