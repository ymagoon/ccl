/* eslint
 "no-underscore-dangle": [2, { "allowAfterThis": true, "allow": ["_searchListItems", "_state"] }]
 */
import { shouldShowPane } from "./helpers";
import { CHILDREN, PRIVATE_EVENTS } from "./const";
import { SearchList }from "../../search";

/**
 * Checks if the user can confirm a result (by pressing enter).
 * @param {boolean} focused - Indicates if the combobox bar is focused.
 * @param {boolean} isLoading - Indicates loading state of the manager.
 * Wparam {Object[]} results - Array of results.
 * @param {UIComponent} searchPane - Results pane.
 * @returns {boolean|*} Indicates if a confirmation can be made.
 */
const canConfirm = ({ focused }, { isLoading, results }, searchPane) => focused ?
    (!isLoading && results && results.length && searchPane.getProp("isVisible")) :
    (!isLoading && results && results.length);

/**
 * Handles the combobox focus event.
 * @param {ComboBox} control - The ComboBox manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The combobox bar focus handler.
 */
const handleComboBoxFocus = (control, eventName) => () => {
    control._state.focused = true;
    control.stopPropagation(eventName);
    const currentValue = control.getChild(CHILDREN.COMBOBOX_BAR).getProp("value");
    if(currentValue) {
        control.emit(control.getProp("inputEventName"), control, currentValue);
    }
    else {
        control.getChild(CHILDREN.COMBOBOX_DROPDOWN).setProp("isVisible", shouldShowPane(
            control.getProp("results"),
            control.getProp("isLoading"),
            control._state.focused
        ));
    }
    control._searchListItems.searchList.setProp("selectedIndex", null);
    control.update();
};

/**
 * Updates the pane and bar on selection(mouse-click) or confirm(Enter).
 * @param {ComboBox} control - The ComboBox manager instance.
 * @param {Object} pane - The ComboBox pane.
 * @param {Object} result - The current selected result.
 * @param {Boolean} isPaneVisible - Flag indicating whether pane should be visible or not.
 * @param {Number} newIndex - Index to be updated in the pane to allow proper navigation.
 * @returns {undefined} This function doesn't return any value.
 */
const updatePaneAndBarOnSelection = (control, pane, result, isPaneVisible, newIndex) => {
    // Notify consumers
    control.emit(
        control.getProp("selectionChangeEventName"),
        control,
        {
            currentResult: result
        }
    );

    // Populate the current selected result in the combobox bar
    control.getChild(CHILDREN.COMBOBOX_BAR).setProp("value", result.data[0].display);

    control._searchListItems.searchList.setProp("selectedIndex", newIndex);
    control.getChild(CHILDREN.COMBOBOX_DROPDOWN).setProp("isVisible", isPaneVisible);

    control.update();
};

/**
 * Handles the search list select event.
 * @param {ComboBox} control - The ComboBox manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The ComboBox search list select handler.
 */
const handleSearchListSelect = (control, eventName) => (src, { index, result }) => {
    if (!SearchList.helpers.result.isSelectable(result)) {
        return;
    }
    updatePaneAndBarOnSelection(control, control.getChild(CHILDREN.COMBOBOX_DROPDOWN), result, false, -1);
};

/**
 * Handles the input event from a child combobox bar.
 * @param {ComboBox} control - The ComboBox manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The ComboBox bar input handler.
 */
const handleComboBoxInput = (control, eventName) => (src, value) => {
    control.stopPropagation(eventName);
    control._state.focused = true;
    control.getChild(CHILDREN.COMBOBOX_BAR).setProp("value", value);
    control._searchListItems.searchList.setProps({
        searchValue: value,
        selectedIndex: null
    });
    control.emit(control.getProp("inputEventName"), control, value);
    control.update();
};

/**
 * Handles the combobox bar confirmation event.
 * @param {ComboBox} control - The ComboBox manager instance.
 * @param {string} eventName - The name of the confirmation event.
 * @returns {function} Function that handles ComboBox bar confirmation.
 */
const handleComboBoxConfirm = (control, eventName) => () => {
    control.stopPropagation(eventName);
    const dropDown = control.getChild(CHILDREN.COMBOBOX_DROPDOWN);
    const selectedIndex = control._searchListItems.searchList.getProp("selectedIndex");
    // Prevent invalid confirming results
    if(!canConfirm(control._state, control.getProps(), dropDown)) {
        return;
    }

    updatePaneAndBarOnSelection(control, dropDown, control.getProp("results")[ selectedIndex ], false, selectedIndex);
};

/**
 * Handles the combobox  navigation event.
 * @param {ComboBox} control - The ComboBox manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The  ComboBox bar navigation.
 */
const handleComboBoxNavigation = (control, eventName) => (src, payload) => {
    const currentResults = control.getProp("results");
    // Make sure we have results to be navigated to avoid reference errors for data array
    if(currentResults.length) {
        const newIndex = SearchList.helpers.result.nextIndexFromKeyCode(
            control._searchListItems.searchList.getProp("selectedIndex"),
            currentResults,
            payload.keyCode,
            false
        );
        control._searchListItems.searchList.setProp("selectedIndex", newIndex);
        // update the combobox bar with current navigation index value
        control.getChild(CHILDREN.COMBOBOX_BAR).setProp("value", currentResults[newIndex].data[0].display);
        control.update();
    }
};

/**
 * Handles the ComboBox bar dropdown event.
 * @param {ComboBox} control - The ComboBox manager instance.
 * @param {string} eventName - The event name.
 * @returns {function} The  ComboBox bar dropdown event handler.
 */
const handleComboBoxDropDown = (control, eventName) => () => {
    control.stopPropagation(eventName);
    // display the dropdown when it not already so
    if(!control.getChild(CHILDREN.COMBOBOX_DROPDOWN).getProp("isVisible")) {
        control._state.focused = false;
        control.emit(PRIVATE_EVENTS.FOCUS);
    }
    control.emit(control.getProp("dropDownEventName"), control);
    control.update();
};

export {
    handleComboBoxFocus,
    handleComboBoxInput,
    handleComboBoxNavigation,
    handleComboBoxDropDown,
    handleComboBoxConfirm,
    handleSearchListSelect
};
