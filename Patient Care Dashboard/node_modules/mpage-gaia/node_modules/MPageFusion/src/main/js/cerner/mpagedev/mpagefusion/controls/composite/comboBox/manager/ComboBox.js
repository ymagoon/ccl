"use strict";
import classNames from "classnames";
import UIComponent from "../../../../base/UIComponent";
import ComboBoxBar from "../bar/ComboBoxBar";
import { InlineDropDown } from "../../../atomic/progressive-disclosure";
import { SearchList }from "../../search";
import { forwardProp } from "../../../../helpers/props/props";
import { addWindowResizeListener, removeWindowResizeListener, isChildOf } from "../../../../helpers/dom/dom";
import { CHILDREN, EVENTS, NAMESPACE, PRIVATE_EVENTS } from "./const";
import { THROTTLE_TIME } from "../const";
import {
    handleComboBoxFocus,
    handleComboBoxInput,
    handleComboBoxConfirm,
    handleComboBoxNavigation,
    handleComboBoxDropDown,
    handleSearchListSelect
} from "./events";
import { shouldShowPane } from "../../search/manager/helpers";

/**
 * A responsive combo box control which contains the following elements:
 *      -- TextBox
 *      -- DropDown button
 *      -- Results DropDown for loading the search results
 */
class ComboBox extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._onResize = this._onResize.bind(this);
        this._handleMouseDown = this._handleMouseDown.bind(this);
    }

    /**
     * @inheritDoc
     */
    initialState() {
        return {
            focused: false
        };
    }

    /**
     * Handles the window resize event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _onResize() {
        this.setState({ focused: false });
        this.getChild(CHILDREN.COMBOBOX_DROPDOWN).setProp("isVisible", false);
        this.update();
    }

    /**
     * Handles the mousedown event to make sure events do not trigger a blur
     * if they originated from within the suggestions menu.
     * @param {Event} e - Mousedown event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleMouseDown(e) {
        const belongsToComboBox = isChildOf(this._menuElement);
        if (belongsToComboBox(e.target)) {
            e.preventDefault();
        }
        else if (this.getChild(CHILDREN.COMBOBOX_DROPDOWN).getProp("isVisible")) {
            this.setState({ focused: false });
            this.getChild(CHILDREN.COMBOBOX_DROPDOWN).setProp("isVisible", false);
            this._searchListItems.searchList.setProp("selectedIndex", null);
            this.update();
        }
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            inputEventName: EVENTS.INPUT,
            isDisabled: false,
            isLoading: false,
            placeholder: "",
            results: [],
            selectionChangeEventName: EVENTS.SELECTION_CHANGE,
            dropDownEventName: EVENTS.DROPDOWN,
            throttle: THROTTLE_TIME,
            value: ""
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        this._searchListItems = {
            searchList: new SearchList({
                clickEventName: SearchList.EVENTS.CLICK,
                shouldAutoScroll: true,
                selectedIndex: null
            })
        };
        return [
            /*
             * ComboBoxBar is a text box bar which uses the InlineDropDown Pane to display the filtered results
             * below the combobox bar.
             */
            {
                [ CHILDREN.COMBOBOX_BAR ]: new ComboBoxBar({
                    blurEventName: PRIVATE_EVENTS.BLUR,
                    focusEventName: PRIVATE_EVENTS.FOCUS
                })
            },
            /*
             * InlineDropDown pane is hidden on load of combobox. It is displayed on data input in combobox bar
             * or on click of dropdown icon
             */
            {
                [ CHILDREN.COMBOBOX_DROPDOWN ]: new InlineDropDown({
                    isVisible: true,
                    content: [
                        this._searchListItems.searchList
                    ]
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            placeholder: forwardProp(this, "placeholder", CHILDREN.COMBOBOX_BAR),
            throttle: forwardProp(this, "throttle", CHILDREN.COMBOBOX_BAR),
            value: (value) => {
                this.getChild(CHILDREN.COMBOBOX_BAR).setProp("value", value);
                this._searchListItems.searchList.setProp("searchValue", value);
            }
        };
    }

    dependentPropChangeHandlers() {
        return [
            [ "isDisabled", "isLoading", "results", (isDisabled, isLoading, results) => {
                this.getChild(CHILDREN.COMBOBOX_BAR).setProp("isDisabled", isDisabled);
                this._searchListItems.searchList.setProp("results", results);
                this.getChild(CHILDREN.COMBOBOX_DROPDOWN)
                    .setProp("isLoading", isLoading)
                    .setProp("isVisible", shouldShowPane(results, isLoading, this._state.focused));
            } ]
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        // ComboBoxBar
        this.on(ComboBoxBar.EVENTS.INPUT, handleComboBoxInput(this, ComboBoxBar.EVENTS.INPUT));
        this.on(ComboBoxBar.EVENTS.NAVIGATION, handleComboBoxNavigation(this, ComboBoxBar.EVENTS.NAVIGATION));
        this.on(ComboBoxBar.EVENTS.DROPDOWN, handleComboBoxDropDown(this, ComboBoxBar.EVENTS.DROPDOWN));
        this.on(ComboBoxBar.EVENTS.CONFIRM, handleComboBoxConfirm(this, ComboBoxBar.EVENTS.CONFIRM));

        // ComboBoxBar
        this.on(PRIVATE_EVENTS.FOCUS, handleComboBoxFocus(this, PRIVATE_EVENTS.FOCUS));

        // SearchList
        this.on(SearchList.EVENTS.CLICK, handleSearchListSelect(this, SearchList.EVENTS.CLICK));
    }


    /**
     * @inheritDoc
     */
    view(el, props, children, mapped, { state }) {
        return el(
            "div",
            {
                class: `${NAMESPACE}`,
                oncreate: ({ dom }) => {
                    this._menuElement = dom.querySelector(".mpageui-InlineDropDown");
                    document.addEventListener("mousedown", this._handleMouseDown);
                    addWindowResizeListener(this._onResize);
                },
                onupdate: ({ dom }) => {
                    this._menuElement = dom.querySelector(".mpageui-InlineDropDown");
                },
                onremove: () => {
                    this._menuElement = null;
                    document.removeEventListener("mousedown", this._handleMouseDown);
                    removeWindowResizeListener(this._onResize);
                }
            },
            [
                el(
                    "div",
                    {
                        class: classNames(`${NAMESPACE}--normal`, {})
                    },
                    [
                        mapped[ CHILDREN.COMBOBOX_BAR ].render(),
                        mapped[ CHILDREN.COMBOBOX_DROPDOWN ].render()
                    ]
                )
            ]
        );
    }
}

ComboBox.EVENTS = EVENTS;
export default ComboBox;
