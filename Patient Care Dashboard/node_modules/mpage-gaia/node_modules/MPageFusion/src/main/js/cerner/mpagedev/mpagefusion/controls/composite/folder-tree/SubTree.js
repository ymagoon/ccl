"use strict";
import UIComponent from "../../../base";
import classNames from "classnames";
import { ListItemCard } from "../list";

import { NestablePaneWithHeader } from "../../atomic/nestable-pane";
import Folder from "../../atomic/icon/svg/category/content/Folder";
import {
    getFolderSize,
    convertContentIntoControls,
    SubTreeEvents
} from "./helpers";
import { forwardProp } from "../../../helpers/props/props";

const NAMESPACE = "mpageui-SubTree";
const folderIconClass = "mpageui-SubTree--accessory";

/**
 * A subtree or sub-folder within the folder.
 * Consists of:
 * * Navigation header (1)
 * * Pane (1)
 * * SubTree (n)
 * * ListItemCard (n)
 *
 * @class SubTree
 */
class SubTree extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            display: "",
            id: "",
            content: null,
            folderExpandEventName: SubTreeEvents.SUBTREE_EXPAND,
            folderCollapseEventName: SubTreeEvents.SUBTREE_COLLAPSE,
            isExpanded: false,
            preventHideAnimation: true,
            folderSize: 0
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                subTreeDisplay: new ListItemCard({
                    classNames: "",
                    clickEventName: SubTreeEvents.SUBTREE_EXPAND,
                    leftAccessory: new Folder({
                        classNames: folderIconClass
                    }),
                    hasProgressiveDisclosure: true,
                    isCardSelectable: false
                })
            },
            {
                subTree: new NestablePaneWithHeader({
                    classNames: "",
                    headerBgStyle: NestablePaneWithHeader.BACKGROUND_STYLE.CANVAS,
                    hideEventName: SubTreeEvents.SUBTREE_COLLAPSE
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(SubTreeEvents.SUBTREE_EXPAND, () => {
            this.stopPropagation(SubTreeEvents.SUBTREE_EXPAND);
            this.setProp("isExpanded", true);
            this.emit(this.getProp("folderExpandEventName"), this);
            this.update();
        });
        this.on(SubTreeEvents.SUBTREE_COLLAPSE, () => {
            this.stopPropagation(SubTreeEvents.SUBTREE_COLLAPSE);
            this.setProp("isExpanded", false);
            this.emit(this.getProp("folderCollapseEventName"), this);
            this.update();
        });
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            display: (display) => {
                this.getChild("subTreeDisplay").setProps({
                    "items": [
                        {
                            value: display
                        }
                    ],
                    ariaAttributes: [
                        {
                            "aria-label": display
                        }
                    ]
                });
                this.getChild("subTree").setProp("title", display);
            },
            content: (content) => {
                this.getChild("subTree").setProp("content", convertContentIntoControls(content));
                this.setProp("folderSize", getFolderSize(content));
            },
            isExpanded: forwardProp(this, "isVisible", "subTree"),
            preventHideAnimation: forwardProp(this, "preventHideAnimation", "subTree")
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "ul",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                }),
                role: "treeitem",
                "aria-label": props.display,
                "aria-expanded": props.isExpanded,
                "aria-setsize": props.folderSize
            },
            this.renderChildren()
        );
    }
}

SubTree.EVENTS = SubTreeEvents;
export default SubTree;
