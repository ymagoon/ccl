import UIComponent from "../../../base";
import classNames from "classnames";
import { range } from "../../../helpers/core/array";

const NAMESPACE = "mpageui-CellGrid";

/**
 * Depending on the flow direction, uses the current matrix index at [i, j] to
 * populate the content.
 * @param {Number} i - Row index.
 * @param {Number} j - Column index.
 * @param {String} flow - Flow direction.
 * @param {Number} rowCount - Number of rows.
 * @param {Number} colCount - Number of columns.
 * @returns {Number} The matrix index converted to an index in the content array.
 */
const mapMatrixToIndex = (i, j, flow, rowCount, colCount) =>
    flow === "horizontal" ?
        (i * colCount) + j :
        (j * rowCount) + i;

/**
 * Handles the case where no content is present in a cell.
 * @param {Function} el - A function for creating virtual elements.
 * @param {UIComponent | undefined} content - UIComponent to populate a cell.
 * @returns {Object} VDom.
 */
const handleBlank = (el, content) =>
    content ? content.render() : el(
        "div",
        { class: `${NAMESPACE}-cell--empty` }
    );

/**
 * Gets the content for a cell in the matrix at index [i, j].
 * @param {Function} el - A function for creating virtual elements.
 * @param {Number} i - Row index.
 * @param {Number} j - Column index.
 * @param {String} flow - Flow direction.
 * @param {Number} rowCount - Number of rows.
 * @param {Number} colCount - Number of columns.
 * @param {UIComponent[]} content - Array of child UIComponent objects.
 * @returns {Object} VDom.
 */
const getContentForCell = (el, i, j, flow, rowCount, colCount, content) =>
    handleBlank(
        el,
        content[ mapMatrixToIndex(i, j, flow, rowCount, colCount) ]
    );

/**
 * The CellGrid class for laying out content in a grid-like fashion.
 * @class CellGrid
 */
class CellGrid extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            columnCount: 1,
            flowDirection: "vertical",
            content: [],
            rowCount: null
        };
    }

    /**
     * @inheritDoc`
     */
    propChangeHandlers() {
        return {
            content: (content) => this.replaceAllChildren(content)
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        const { columnCount, content, flowDirection, rowCount } = props;
        const calcRows = !rowCount ? Math.ceil(content.length / columnCount) : rowCount;
        const calcCols = !columnCount ? Math.ceil(content.length / rowCount) : columnCount;

        return el(
            "div",
            {
                class: classNames(NAMESPACE)
            },
            range(0, calcRows).map((i) => el( // Generate rows
                "div",
                {
                    class: `${NAMESPACE}-row mpageui-u-flexgrid-row`
                },
                range(0, calcCols).map((j) => el( // Generate columns
                    "div",
                    {
                        class: `${NAMESPACE}-cell mpageui-u-flexgrid-col mpageui-u-flexgrid-col--pad-none`
                    },
                    getContentForCell(el, i, j, flowDirection, calcRows, calcCols, content)
                ))
            ))
        );
    }
}

export default CellGrid;
