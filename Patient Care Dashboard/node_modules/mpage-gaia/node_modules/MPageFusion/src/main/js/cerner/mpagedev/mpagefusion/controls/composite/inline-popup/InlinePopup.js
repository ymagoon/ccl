"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import {
    ARROW_BORDER_CLASSES,
    ARROW_CLASSES,
    INLINE_POPUP_POSITION,
    adjustPanel,
    calculateArrowBorderOrigin,
    calculateArrowOrigin
} from "./domHelpers";

/**
 * Renders the arrow at the appropriate position
 * @param {HTMLElement} inlinePopup - Inline Popup DOM element
 * @param {function} el - vDom creation function
 * @param {Array} props - props for inline popup
 * @returns {function} vDom creation function
 * @private
 */
const renderArrow = (inlinePopup, el, props) => {
    const position = (props.fallbackPosition || props.position);
    return [
        el(
            "div",
            {
                class: `mpageui-Inline-Popup-arrow ${ position === INLINE_POPUP_POSITION.TOP ? ARROW_CLASSES.TOP : ARROW_CLASSES.BOTTOM}`,
                style: { top: `${inlinePopup.getArrowOrigin().top}px`, left: `${inlinePopup.getArrowOrigin().left}px` }
            },
            null
        ),
        el(
            "div",
            {
                class: `mpageui-Inline-Popup-arrow-border ${
                    position === INLINE_POPUP_POSITION.TOP ? ARROW_BORDER_CLASSES.TOP : ARROW_BORDER_CLASSES.BOTTOM
                }`,
                style: { top: `${inlinePopup.getArrowBorderOrigin().top}px`, left: `${inlinePopup.getArrowBorderOrigin().left}px` }
            },
            null
        )
    ];
};

/**
 * Renders the popup panel
 * @param {HTMLElement} inlinePopup - Inline Popup DOM element
 * @param {function} el - vDom creation function
 * @param {Array} props - props for inline popup
 * @param {Array} children - children of inline popup
 * @returns {function} vDom creation function
 * @private
 */
const renderPanel = (inlinePopup, el, props, children) => el(
    "div",
    {
        class: "mpageui-Inline-Popup-pane",
        oncreate: ({ dom }) => {
            adjustPanel(dom, inlinePopup);
        },
        onupdate: ({ dom }) => {
            adjustPanel(dom, inlinePopup);
        }
    },
    el(
        "div",
        {
            class: classNames({
                "mpageui-Inline-Popup-content": true,
                [ props.classNames ]: (props.classNames !== "")
            })
        },
        children.map((child) => child.render())
    )
);

/**
 * This class implements Inline Popup control.
 */
export default class InlinePopup extends UIComponent {
    /**
     * @inheritdoc
     */
    constructor(props, children) {
        super(props, children);
        this._arrowOrigin = { left: 0, top: 0 };
        this._arrowBorderOrigin = { left: 0, top: 0 };
        this._windowClickHandler = this.windowClickHandler.bind(this);
        this._windowResizeHandler = this.windowResizeHandler.bind(this);
    }

    /**
     * Get the arrow origin
     * @returns {Object} returns the arrow origin
     */
    getArrowOrigin() {
        return this._arrowOrigin;
    }

    /**
     * Get the arrow border origin
     * @returns {Object} returns the arrow border origin
     */
    getArrowBorderOrigin() {
        return this._arrowBorderOrigin;
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            content: [],
            position: INLINE_POPUP_POSITION.BOTTOM,
            classNames: "",
            renderOrigin: { top: 0, left: 0 },
            targetSize: { width: 0, height: 0 },
            isVisible: false,
            fallbackPosition: ""
        };
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            content: (newContent) => {
                this.replaceAllChildren(newContent);
            }
        };
    }

    /**
     * @inheritdoc
     */
    beforeRender(context) {
        if(context.props.isVisible) {
            this._arrowOrigin = calculateArrowOrigin(context.props.renderOrigin, context.props.targetSize);
            this._arrowBorderOrigin = calculateArrowBorderOrigin(
                this._arrowOrigin,
                context.props.fallbackPosition || context.props.position,
                INLINE_POPUP_POSITION
            );
        }
    }

    /**
     * @inheritdoc
     */
    view(el, props, children) {
        return props.isVisible ?
            el(
                "div",
                {
                    oncreate: () => {
                        window.addEventListener("resize", this._windowResizeHandler);
                        document.addEventListener("click", this._windowClickHandler);
                    },
                    onbeforeremove: () => {
                        window.removeEventListener("resize", this._windowResizeHandler);
                        document.removeEventListener("click", this._windowClickHandler);
                    }
                },
                [
                    renderArrow(this, el, props),
                    renderPanel(this, el, props, children)
                ]
            ) : [];
    }



    /**
     * Window resize handler closes the popup on resize
     * @returns {undefined} This function doesn't return anything.
     */
    windowResizeHandler() {
        this.setProp("isVisible", false).update();
    }

    /**
     * Window click handler closes the popup on click outside the inline popup
     * @param {MouseEvent} mouseEvent The mouse event associated with the click.
     * @returns {undefined} This function doesn't return anything.
     */
    windowClickHandler(mouseEvent) {
        if(this.getProp("isVisible") && !this.isPartOfInlinePopup(mouseEvent.srcElement)) {
            this.setProp("isVisible", false).update();
        }
    }

    /**
     * Checks if the click is performed within the inline popup
     * @param {Object} node the node on which the click is performed
     * @returns {Boolean} true if the click is performed within inline popup, false otherwise
     */
    isPartOfInlinePopup(node) {
        if (node) {
            return node.className === "mpageui-Inline-Popup-pane"
            || node.className === "mpageui-Inline-Popup-arrow mpageui-Inline-Popup-arrow--top"
            || node.className === "mpageui-Inline-Popup-arrow mpageui-Inline-Popup-arrow--bottom"
            || this.isPartOfInlinePopup(node.parentNode);
        }
        else {
            return false;
        }
    }
}

InlinePopup.POSITION = INLINE_POPUP_POSITION;
