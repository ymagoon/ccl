"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import { setProp } from "../../../helpers/props/props";
import { unique } from "../../../helpers/core/generators";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------

/**
 * Events emitted by the Button control.
 * @type {{CLICK: string}}
 */
const EVENTS = {
    CLICK: "Button::click"
};

/**
 * Supported button type enumeration.
 * @type {{PRIMARY: string, SECONDARY: string, LINK: string}}
 */
const TYPE = {
    PRIMARY: "primary",
    SECONDARY: "secondary",
    LINK: "link"
};

/**
 * Button size enumeration
 * @type {{THIN: string}}
 */
const SIZE = {
    THIN: "thin"
};

/**
 * Responsive icon sizes
 * @type {{XS_DOWN: string, SM_DOWN: string}}
 */
const responsiveIconSize = {
    XS_DOWN: "XS_DOWN",
    SM_DOWN: "SM_DOWN"
};

/**
 * Responsive icon css classes
 * @type {{XS_DOWN: string, SM_DOWN: string}}
 */
const iconSizeCssClassMap = {
    XS_DOWN: "mpageui-Button-responsive-icon--xs-down",
    SM_DOWN: "mpageui-Button-responsive-icon--sm-down"
};

/**
 * Renders the display of the Button.
 * @param {Function} el - A function for creating virtual elements.
 * @param {string} display - The display of the Button.
 * @param {string} displayPosition - The display position of the Button.
 * @param {boolean} hasContent - Indicates that the Button has content other
 * than the text display.
 * @returns {VDom | null} The virtual dom display of the Button or null.
 */
const renderDisplay = (el, display, displayPosition, hasContent) =>
    display ?
        el(
            "span",
            {
                class: classNames({
                    "mpageui-Button-display": true,
                    [`mpageui-Button-display--${displayPosition}`]: hasContent
                })
            },
            display
        ) : null;

/**
 * Renders an array of children.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Array<UIComponent>} [children] - The children of the Button.
 * @returns {Array<VDom>} The virtual dom contents of the rendered children.
 */
const renderChildren = (el, children) => children.map((c) => c.render());

/**
 * Renders the Button icon.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Object} props - The Button props.
 * @returns {VDom | null} The icon's virtual dom elements or null.
 */
const renderIcon = (el, props) => props.icon ? props.icon.render() : null;

/**
 * Renders the contents of the Button.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Object} props - The Button props.
 * @param {Array<UIComponent>} [children] - The children of the Button.
 * @returns {VDom} The virtual dom contents of the Button.
 */
const renderButtonContents = (el, props, children) =>
    props.displayPosition === "before" ? [
        renderDisplay(el, props.display, props.displayPosition, (props.icon || children.length)),
        ...renderChildren(el, children),
        renderIcon(el, props)
    ] : [
        renderIcon(el, props),
        ...renderChildren(el, children),
        renderDisplay(el, props.display, props.displayPosition, (props.icon || children.length))
    ];

/**
 * Creates necessary aria attributes based on the Button props.
 * @param {Object} props - The Button props.
 * @returns {Object} The set of aria attributes for the Button.
 */
const ariaAttributes = (props) =>
    Object.assign(
        {},
        props.label ? setProp("aria-label", props.label, {}) : null,
        props.isSelected ? setProp("aria-selected", "true", {}) : null
    );

/**
 * The Button class.
 * @class Button
 */
class Button extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            clickEventName: EVENTS.CLICK,
            defaultClassNames: "mpageui-Button",
            disabled: false,
            display: "",
            displayPosition: "after",
            icon: null,
            isSelected: false,
            label: "",
            size: "",
            type: "",
            responsiveIconSize: null,
            title: "",
            key: unique("mpageui-Button")
        };
    }

    /**
     * Handles the click event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleClick() {
        this.emit(this.getProp("clickEventName"), this, this.getProp("key") || undefined);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return el(
            "button",
            Object.assign({
                type: "button",
                disabled: props.disabled,
                title: props.title,
                key: this.getProp("key") || undefined,
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [`mpageui-Button--${props.type}`]: (props.type !== ""),
                    "mpageui-Button--icon": (!props.display && !children.length && props.icon),
                    [`mpageui-Button--${props.size}`]: (props.size !== ""),
                    [ props.classNames ]: (props.classNames !== ""),
                    [ iconSizeCssClassMap[props.responsiveIconSize] ]: props.responsiveIconSize && props.icon
                }),
                onclick: this._handleClick.bind(this)
            }, ariaAttributes(props)),
            renderButtonContents(el, props, children)
        );
    }
}

Button.EVENTS = EVENTS;
Button.TYPE = TYPE;
Button.SIZE = SIZE;
Button.RESPONSIVE_ICON_SIZE = responsiveIconSize;

export default Button;
