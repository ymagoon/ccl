import { ListItemCard } from "../../../composite/list";
import HighlightText from "./HighlightText";
import { DUAL_COLUMN_START, NAMESPACE } from "./const";
import classNames from "classnames";

/**
 * Makes the content for the search list card.
 * @param {Object} item - A single item in a search result.
 * @param {string} searchValue - The current search value.
 * @returns {Object} The content for the card item.
 */
const makeCardContent = (item, searchValue) =>
    (item.shouldHighlight && searchValue) ?
        ({
            content: [
                new HighlightText({
                    text: item.display,
                    searchFor: searchValue
                })
            ]
        }) :
        ({
            value: item.display
        });

/**
 * Makes the items to be displayed in the card.
 * @param {Array<Object>} items - Array of items for the card.
 * @param {string} searchValue - The current search value.
 * @returns {Array<Object>} Array of items for the card.
 */
const makeCardItems = (items, searchValue) =>
    items.map((item) => Object.assign(
        { label: item.label || "" },
        makeCardContent(item, searchValue)
    ));

/**
 * Creates the content for a list of search results.
 * @param {Array<Object>} results - Array of search results.
 * @param {string} searchValue - The current search value.
 * @param {boolean} hasProgressiveDisclosure - Whether the items should display
 * a progressive disclosure indicator.
 * @param {number} selectedIndex - The currently selected index.
 * @param {boolean} shouldTruncate - Indicates the items should truncate text.
 * @returns {Array<ListItemCard>} Array of list item cards built from the results.
 */
const makeSearchResults = (results = [], searchValue,
    { hasProgressiveDisclosure, selectedIndex, shouldTruncate }) =>
    results.map((r, i) => new ListItemCard({
        ariaAttributes: [ {
            role: "listitem",
            "aria-label": r.data[ 0 ].display
        } ],
        isCardSelectable: false,
        classNames: classNames(`${NAMESPACE}-item`, {
            [ r.classNames ]: !!r.classNames
        }),
        id: r.key,
        rightAccessory: r.rightAccessory,
        isHoverable: (typeof r.isSelectable === "undefined" || r.isSelectable),
        hasProgressiveDisclosure: (hasProgressiveDisclosure && (typeof r.isSelectable === "undefined" || r.isSelectable)),
        isSelected: (i === selectedIndex),
        shouldTruncate,
        isDualColumn: (r.data.length > DUAL_COLUMN_START),
        items: makeCardItems(r.data, searchValue)
    }));

/**
 * Creates a function to handle the dependent prop change of results and searchValue.
 * @param {SearchList} control - The search list instance.
 * @returns {function} The dependent prop change handler.
 */
const resultsChange = (control) => (results, searchValue) =>
    control.replaceAllChildren(makeSearchResults(results, searchValue, control.getProps()));

/**
 * Creates a function to handle the prop change for the selected index. For performance reasons,
 * we do no rebuild the results and instead loop through and adjust the isSelected property.
 * @param {SearchList} control - The search list instance.
 * @returns {function} The prop change handler for selectedIndex.
 */
const selectedIndexChange = (control) => (index) => {
    control.getChildren().forEach((c, i) => {
        c.setProp("isSelected", i === index);
    });
};

export {
    resultsChange,
    selectedIndexChange
};
