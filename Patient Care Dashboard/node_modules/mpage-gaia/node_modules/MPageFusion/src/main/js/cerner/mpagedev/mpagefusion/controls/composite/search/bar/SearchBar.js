"use strict";
import UIComponent from "../../../../base/UIComponent";
import TextBox from "../../../atomic/textbox";
import SearchButton from "./SearchButton";
import SearchTextClear from "./SearchTextClear";
import { forwardProp } from "../../../../helpers/props/props";
import classNames from "classnames";
import { THROTTLE_TIME } from "../const";
import { EVENTS, NAMESPACE } from "./const";
import { handleClearClick, handleTextBoxKeyDown, handleTextBoxKeyUp, handleTextBoxInput } from "./events";

/**
 * Basic search control displayed within the Popup header. Consists
 * of search text box, clear icon (on-demand) and the search submit button.
 */
class SearchBar extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._state = { inputDebounce: 0 };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            blurEventName: EVENTS.BLUR,
            classNames: "",
            confirmEventName: EVENTS.CONFIRM,
            focusEventName: EVENTS.FOCUS,
            inputEventName: EVENTS.INPUT,
            isDisabled: false,
            isReadOnly: false,
            navigationEventName: EVENTS.NAVIGATION,
            placeholder: "",
            submitEventName: EVENTS.SUBMIT,
            throttle: THROTTLE_TIME,
            value: "",
            hasFocus: false
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                textBox: new TextBox({
                    classNames: `${NAMESPACE}-textBox`,
                    keyDownEventName: TextBox.EVENTS.KEY_DOWN,
                    keyUpEventName: TextBox.EVENTS.KEY_UP
                })
            },
            {
                searchTextClearIcon: new SearchTextClear({})
            },
            {
                searchSubmit: new SearchButton({
                    classNames: `${NAMESPACE}-submit`
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            placeholder: forwardProp(this, "placeholder", "textBox"),
            value: (value) => {
                this.getChild("textBox").setProp("value", value);
                this.getChild("searchTextClearIcon").setProp("isClearIconVisible", !!value);
            },
            isDisabled: (isDisabled) => {
                this.getChild("textBox").setProp("isDisabled", isDisabled);
                this.getChild("searchSubmit").setProp("isDisabled", isDisabled);
            },
            isReadOnly: forwardProp(this, "isReadOnly", "textBox"),
            hasFocus: forwardProp(this, "hasFocus", "textBox")
        };
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        // TextBox
        this.on(TextBox.EVENTS.KEY_DOWN, handleTextBoxKeyDown(this, TextBox.EVENTS.KEY_DOWN));
        this.on(TextBox.EVENTS.KEY_UP, handleTextBoxKeyUp(this, TextBox.EVENTS.KEY_UP));
        this.on(TextBox.EVENTS.INPUT, handleTextBoxInput(this, TextBox.EVENTS.INPUT));
        this.convertEventUsingProp(TextBox.EVENTS.BLUR, "blurEventName", (e) => [ this ]);
        this.convertEventUsingProp(TextBox.EVENTS.FOCUS, "focusEventName", (e) => [ this, { event: e } ]);

        // Clear (x button)
        this.on(SearchTextClear.EVENTS.CLEAR, handleClearClick(this, SearchTextClear.EVENTS.CLEAR));

        // Submit
        this.convertEventUsingProp(SearchButton.EVENTS.CLICK, "submitEventName", (src) => [ this ]);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return el(
            "div",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: !!props.classNames
                }),
                onremove: () => {
                    window.clearTimeout(this._state.inputDebounce);
                }
            },
            this.renderChildren()
        );
    }
}

SearchBar.EVENTS = EVENTS;
export default SearchBar;
