import UIComponent from "../../../base/UIComponent";
import StickyContainer from "../../atomic/sticky-container/StickyContainer";
import ComponentHeaderContents from "./ComponentHeaderContents";

const setContentProp = (control, prop, val) =>
    control.getChild("stickyContainer").getChild("contents").setProp(prop, val);

const forwardProp = (control, prop) => setContentProp.bind(null, control, prop);

class ComponentHeader extends UIComponent {
    constructor(props, children) {
        super(props, children);
    }

    createChildren() {
        return [
            {
                stickyContainer: new StickyContainer({ className: "mpageui-ComponentHeader" }, [
                    { contents: new ComponentHeaderContents() }
                ])
            }
        ];
    }

    propChangeHandlers() {
        return {
            componentMenu: forwardProp(this, "componentMenu"),
            componentMenuAutoInsertDividers: forwardProp(this, "componentMenuAutoInsertDividers"),
            componentMenuBasicActionEventName: forwardProp(this, "componentMenuBasicActionEventName"),
            componentMenuSelectionChangeEventName: forwardProp(this, "componentMenuSelectionChangeEventName"),
            componentMenuToggleEventName: forwardProp(this, "componentMenuToggleEventName"),
            contextualViewClickEventName: forwardProp(this, "contextualViewClickEventName"),
            contextualViewDirection: forwardProp(this, "contextualViewDirection"),
            count: forwardProp(this, "count"),
            gapCheckClickEventName: forwardProp(this, "gapCheckClickEventName"),
            isLoading: forwardProp(this, "isLoading"),
            lookbackChangeEventName: forwardProp(this, "lookbackChangeEventName"),
            lookbackOptions: forwardProp(this, "lookbackOptions"),
            lookbackLabel: forwardProp(this, "lookbackLabel"),
            plusAddEventName: forwardProp(this, "plusAddEventName"),
            plusAddMenu: forwardProp(this, "plusAddMenu"),
            refreshEventName: forwardProp(this, "refreshEventName"),
            refreshMenuLabel: forwardProp(this, "refreshMenuLabel"),
            showError: forwardProp(this, "showError"),
            showGapCheckIndicator: forwardProp(this, "showGapCheckIndicator"),
            showPlusAdd: forwardProp(this, "showPlusAdd"),
            showRefreshButton: forwardProp(this, "showRefreshButton"),
            showTitleAsLink: forwardProp(this, "showTitleAsLink"),
            showContextualViewButton: forwardProp(this, "showContextualViewButton"),
            subLabel: forwardProp(this, "subLabel"),
            title: forwardProp(this, "title"),
            titleAltText: forwardProp(this, "titleAltText"),
            titleClickEventName: forwardProp(this, "titleClickEventName"),
            toggleEventName: forwardProp(this, "toggleEventName"),
            toggles: forwardProp(this, "toggles"),
            refreshButtonTitle: forwardProp(this, "refreshButtonTitle"),
            refreshMenu: forwardProp(this, "refreshMenu"),
            hideHeaderButtonsUnder: forwardProp(this, "hideHeaderButtonsUnder")
        };
    }

    view() {
        return this.renderChildren();
    }
}

ComponentHeader.EVENTS = ComponentHeaderContents.EVENTS;
ComponentHeader.CONTEXTUAL_VIEW = ComponentHeaderContents.CONTEXTUAL_VIEW;
ComponentHeader.BREAKPOINTS = ComponentHeaderContents.BREAKPOINTS;
export default ComponentHeader;
