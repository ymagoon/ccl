/**
 * @fileoverview TableSectionHeader class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import { svg } from "../icon";
import Label from "../label";
import classNames from "classnames";
import { eventNames } from "./helpers";
import i18n from "i18n";

const { noResults } = i18n();

const { content: { Expanded, Collapsed } } = svg;
const collapsedClass = "is-closed";

/**
 * Renders the real flowsheet section header.
 * @param {Function} el - A function for creating virtual elements.
 * @param {String} defaultClassNames - Default class names for the header.
 * @param {String} display - The section header display.
 * @param {Boolean} isExpanded - Expanded state of the icon.
 * @param {Boolean} isNoResultsSubtitleVisible - subsection subtitle
 * @returns {VDom} Rendered section.
 */
const renderSection = (el, defaultClassNames, display, isExpanded, isNoResultsSubtitleVisible) =>
    el(
        "div",
        {
            class: classNames({
                [ defaultClassNames ]: true,
                "mpageui-Flowsheet-sectionHeader-content": true
            })
        },
        [
            (isExpanded ? new Expanded().render() : new Collapsed().render()),
            (new Label({ value: display }).render()),
            ( isNoResultsSubtitleVisible ?
                (new Label({
                    value: noResults,
                    classNames: "mpageui-u-text-color-secondary mpageui-u-text-size-sm mpageui-u-pad-left-relative-loose"
                }).render())
                : null
            )
        ]
    );

/**
 * Renders the pseudo flowsheet section header (to achieve visuals).
 * @param {Function} el - A function for creating virtual elements.
 * @param {String} defaultClassNames - Default class names for the header.
 * @param {String} display - The section header display.
 * @param {Boolean} isExpanded - Expanded state of the icon.
 * @param {String} isNoResultsSubtitleVisible - subsection subtitle
 * @returns {VDom} Rendered pseudo section.
 */
const renderPseudoSection = (el, defaultClassNames, display, isExpanded, isNoResultsSubtitleVisible) =>
    el(
        "div",
        {
            class: classNames({
                [ defaultClassNames ]: true,
                "mpageui-Flowsheet-sectionHeader--hidden": true
            }),
            "aria-hidden": true
        },
        [
            (isExpanded ? new Expanded().render() : new Collapsed().render()),
            (new Label({ value: display }).render()),
            ( isNoResultsSubtitleVisible ?
                (new Label({
                    value: noResults,
                    classNames: "mpageui-u-text-color-secondary mpageui-u-text-size-sm mpageui-u-pad-left-relative-loose"
                }).render())
                : null
            )
        ]
    );

/**
 * Constructor for FlowsheetSectionHeader
 * @extends UIComponent
 */
export default class FlowsheetSectionHeader extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            display: "",
            defaultClassNames: "mpageui-Flowsheet-sectionHeader",
            classNames: "",
            isVisible: true,
            isNoResultsSubtitleVisible: false
        };
    }

    /**
     * Click handler for the section headers
     * @returns {undefined}
     * @private
     */
    _onHeaderClick() {
        this.setProp("isVisible", !this.getProp("isVisible"));
        this.emit(eventNames.PUBLIC.SECTION_HEADER_CLICK, this, this.getParent(), this.getProp("isVisible"));
        this.update();
    }

    /**
     * @inheritdoc
     */
    view(el, props) {
        return el(
            "header",
            {
                class: classNames({
                    "mpageui-Flowsheet-sectionHeader-wrapper": true,
                    [ props.classNames ]: props.classNames.length > 0,
                    [ collapsedClass ]: !props.isVisible
                }),
                onclick: this._onHeaderClick.bind(this)
            },
            [
                renderSection(el, props.defaultClassNames, props.display, props.isVisible, props.isNoResultsSubtitleVisible),
                renderPseudoSection(el, props.defaultClassNames, props.display, props.isVisible, props.isNoResultsSubtitleVisible)
            ]
        );
    }
}
