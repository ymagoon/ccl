import UIComponent from "../../../base";
import NestablePane from "./NestablePane";
import { NavigationHeader }from "../header";
import { forwardProp } from "../../../helpers/props/props";

const BACKGROUND_STYLE = NavigationHeader.BACKGROUND_STYLE;

/**
 * Retrieves the header control of a NestablePaneWithHeader
 * @param {NestablePaneWithHeader} control - the control
 * @returns {NavigationHeader} the content header
 */
const getHeader = (control) =>
    control.getChild("nestablePane").getChild("header");

/**
 * A regular NestablePane with the addition of a top header, which
 * can contain a title, close, and back buttons when necessary.
 */
export default class NestablePaneWithHeader extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            isVisible: true,
            isTitleClickable: false,
            hideEventName: NestablePaneWithHeader.EVENTS.HIDE,
            dismissEventName: NestablePaneWithHeader.EVENTS.DISMISS,
            preventHideAnimation: true,
            showDismissButton: false,
            content: [],
            classNames: "",
            title: "",
            headerBgStyle: BACKGROUND_STYLE.ANCHOR
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                nestablePane: new NestablePane(
                    {},
                    [
                        {
                            header: new NavigationHeader({
                                showBack: true,
                                backEventName: this.getProp("hideEventName"),
                                compact: true
                            })
                        }
                    ]
                )
            }
        ];
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            isVisible: forwardProp(this, "isVisible", "nestablePane"),
            classNames: forwardProp(this, "classNames", "nestablePane"),
            title: (title) => getHeader(this).setProp("title", title),
            showDismissButton: (isVisible) => getHeader(this).setProp("showDismiss", isVisible),
            preventHideAnimation: forwardProp(this, "preventHideAnimation", "nestablePane"),
            dismissEventName: (eventName) => getHeader(this).setProp("dismissEventName", eventName),
            headerBgStyle: (style) => this.getChild("nestablePane").getChild("header").setProp("bgStyle", style),
            content: (content) =>
                this.getChild("nestablePane").replaceAllChildren(
                    [
                        {
                            header: this.getChild("nestablePane").getChild("header")
                        },
                        ...content
                    ]
                ),
            isTitleClickable: (isTitleClickable) => {
                if(isTitleClickable) {
                    getHeader(this).setProps(
                        {
                            isTitleClickable: true,
                            titleClickEventName: this.getProp("hideEventName")
                        }
                    );
                }
            }
        };
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}

NestablePaneWithHeader.EVENTS = {
    HIDE: NestablePane.EVENTS.HIDE,
    DISMISS: "NestablePaneWithHeader::Dismiss"
};

NestablePaneWithHeader.BACKGROUND_STYLE = BACKGROUND_STYLE;
