"use strict";

/**
 * Performs a prop change handler when a set of condition functions evaluate
 * to true.
 * @param {Function} fn - A prop change handler function.
 * @param {Array<Function>} args - A list of conditional functions used to
 * determine if the prop change handler should be applied.
 * @returns {* | boolean} The evaluation of fn or false.
 */
export const handlePropChangeWhen = (fn, ...args) => (arg) =>
    (args.reduce(
        (prev, next) =>
            (prev && next(arg)),
        true
    )) ? fn(arg) : false;

/**
 * Sets a property on the provided object with the specified key.
 * @param {string} prop - The key of the prop.
 * @param {*} val - The value to be set.
 * @param {Object} obj - The object on which the prop is set.
 * @returns {Object} The object after the prop has been set.
 */
export const setProp = (prop, val, obj) => {
    obj[ prop ] = val;
    return obj;
};

/**
 * Returns a function meant to be used inside propChangeHandlers to forward a property
 * from the current control to a specific child.
 * @param {Object <UIComponent>} control the source control
 * @param {String} propName the property name
 * @param {String} child name of the child to forward to
 * @returns {function} the forwarding function
 */
export const forwardProp = (control, propName, child) => (val) =>
    control.getChild(child).setProp(propName, val);

/**
 * Emits the event with the name retrieved from the provided propName.
 * @param {string} propName - The name of the prop which holds the event name.
 * @param {UIComponent} control - The source UIComponent which will emit the event.
 * @param {Array<*>} params - Any params to be passed as arguments to the emit.
 * @returns {Function} The function which, when applied, will trigger the emit.
 */
export const emitUsingProp = (propName, control, ...params) => () =>
    control.emit(control.getProp(propName), ...params);

/**
 * Toggles a prop on a UIComponent.
 * @param {UIComponent} uiComponent - The UIComponent whose prop will be toggled.
 * @param {string} propName - The name of the prop to toggle.
 * @returns {UIComponent} The UIComponent object.
 */
export const toggleProp = (uiComponent, propName) =>
    uiComponent.setProp(propName, !uiComponent.getProp(propName));

/**
 * Creates key prop for the element if it does not already have. If
 * it already has an key, then key is returned.
 * @param {UIComponent} control - Control to check the key on
 * @returns {string} The key prop of the control
 */
export const makeOrGetKey = (control) => {
    if (!control.getProp("key")) {
        control.setProp("key", control.getId());
    }
    return control.getProp("key");
};

/**
 * Creates multiple forwardProp calls by reading an array of props
 * and creating the propChangeHandler object that calls forwardProp.
 * Useful to automatically make multiple forwardProp propChangeHandlers
 * at once.
 * @param {UIComponent} control - the current control
 * @param {String} childName - the name of the child
 * @param {Array<String>} props - prop names to be forwarded
 * @returns {*} a propChangeHandler object
 */
export const forwardProps = (control, childName, props) =>
    props.reduce((allProps, propName) => {
        allProps[ propName ] = forwardProp(control, propName, childName);
        return allProps;
    }, {});
