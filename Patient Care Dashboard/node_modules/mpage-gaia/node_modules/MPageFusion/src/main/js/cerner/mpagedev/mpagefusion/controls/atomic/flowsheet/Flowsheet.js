/**
 * @fileoverview Main Flowsheet class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import FlowsheetBody from "./FlowsheetBody";
import FlowsheetCompositeHeader from "./headers/composite";
import FlowsheetHeader from "./FlowsheetHeader";
import classNames from "classnames";
import { forwardProp } from "../../../helpers/props/props";
import {
    clearTimers,
    COLUMN_MIN_WIDTH,
    eventNames,
    handleScroll,
    hasXOverflow,
    SCROLL_PADDLE_TYPE,
    ROW_HEADER_SIZE,
    getRowHeaderSizeClass
} from "./helpers";
import {
    removeWindowResizeListener,
    addWindowResizeListener
} from "../../../helpers/dom/dom";

const flowsheetScrollNextClass = "mpageui-Flowsheet-paddleNext";
const flowsheetScrollPrevClass = "mpageui-Flowsheet-paddlePrev";

/**
 * Gets the header class constructor based on the header type
 * @param {string} type=default - header type
 * @returns {Function} Header type class constructor
 * @private
 */
const getHeaderClassByType = (type = "default") => {
    switch (type) {
        case Flowsheet.HEADER_TYPES.COMPOSITE: // eslint-disable-line no-use-before-define
            return FlowsheetCompositeHeader;

        default:
            return FlowsheetHeader;
    }
};
/**
 * @param {String} type - SCROLL_PADDLE_TYPE enum - PREVIOUS or NEXT
 * @returns {Function} Returns appropriate style class based on the type of scroll paddle
 */
const getPaddleClass = (type) => type === SCROLL_PADDLE_TYPE.PREVIOUS ? flowsheetScrollPrevClass : flowsheetScrollNextClass;

/**
 * Renders the element control to trigger horizontal scroll right in flowsheet
 * @param {Function} el - vDom creation function
 * @param {{ columnMinWidth: number }} props - Flowsheet props
 * @param {Object} control - Flowsheet instance
 * @param {String} type - SCROLL_PADDLE_TYPE enum - PREVIOUS or NEXT
 * @returns {UIComponent} function containing paddle right
 * @private
 */
const renderScrollPaddle = (el, { columnMinWidth }, control, type) => el(
    "div",
    {
        /* eslint-disable no-underscore-dangle */
        class: getPaddleClass(type),
        onmousedown: handleScroll(columnMinWidth, control._timerInstance, type),
        onmouseup: clearTimers(control._timerInstance),
        onmouseleave: clearTimers(control._timerInstance)
        /* eslint-enable no-underscore-dangle */
    },
    "\u00a0"
);

/**
 * Shows the horizontal scroll left and right paddles
 * @param {Object} control - Flowsheet instance
 * @returns {undefined} returns nothing
 * @private
 */
const showPaddle = (control) => {
    /* eslint-disable no-underscore-dangle */
    control._isHorizontalScrollVisible = true;
    control.update();
};

/**
 * Hides the horizontal scroll left and right paddles
 * @param {Object} control - Flowsheet instance
 * @returns {undefined} returns nothing
 * @private
 */
const hidePaddle = (control) => {
    control._isHorizontalScrollVisible = false;
    control.update();
};

/**
 * Checks if the flowsheet has overflow and returns a function to show or hide the paddles
 * @param {HtmlElement <Object>} flowsheetElement - flowsheet DOM element
 * @returns {Function} returns function to show or hide the paddles
 * @private
 */
const checkOverflow = (flowsheetElement) => hasXOverflow(flowsheetElement) ? showPaddle : hidePaddle;
/**
 * Resize handler to decide whether to show the horizontal scroll paddles or otherwise
 * @param {HtmlElement <Object>} flowsheetElement - flowsheet DOM element
 * @param {Object} control - Flowsheet instance
 * @returns {Function} returns function that handles resize
 * @private
 */
const windowResizeHandler = (flowsheetElement, control) => () => checkOverflow(flowsheetElement)(control);

/**
 * Handle overflow logic
 * @param {Flowsheet} ctx - flowsheet context object
 * @param {HTMLElement} dom - dom element object
 * @returns {undefined}
 * @private
 */
const handleOverflow = (ctx, dom) => {
    if (ctx._forceCheckOverflow) {
        checkOverflow(dom)(ctx);
        ctx._forceCheckOverflow = false;
    }
};

/**
 * Constructor for Flowsheet
 * @extends UIComponent
 */
export default class Flowsheet extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._isHorizontalScrollVisible = false;
        this._forceCheckOverflow = true;
        this._timerInstance = {
            intervalId: 0,
            timeoutId: 0
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            columns: [],
            rows: [],
            rowProps: {},
            cellProps: {},
            subSections: [],
            defaultClassNames: "mpageui-Flowsheet",
            classNames: "",
            headerType: Flowsheet.HEADER_TYPES.DEFAULT,
            columnMinWidth: COLUMN_MIN_WIDTH
        };
    }

    /**
     * Creates the children objects and returns them has an array
     * @returns {Array<UIComponent>} Array of UIComponent
     */
    createChildren() {
        return [
            {
                header: new (getHeaderClassByType(this.getProp("headerType")))({
                    columns: this.getProp("columns")
                }, [])
            },
            {
                body: new FlowsheetBody({
                    rows: this.getProp("rows"),
                    rowProps: this.getProp("rowProps"),
                    cellProps: this.getProp("cellProps"),
                    subSections: this.getProp("subSections")
                }, [])
            }
        ];
    }

    /**
     * Calculates and updates the minimum width for body and header
     * @returns {undefined}
     * @private
     */
    _updateWidth() {
        const header = this.getChild("header");
        const minWidth = header.getMinWidth(this.getProp("columnMinWidth"));

        header.setProp("minWidth", minWidth);
        this.getChild("body").setProp("minWidth", minWidth);
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            rows: forwardProp(this, "rows", "body"),
            rowProps: (rowProps) => {
                this.getChild("body").setProp("rowProps", rowProps);

                this._updateWidth();
                this._forceCheckOverflow = true;
            },
            cellProps: forwardProp(this, "cellProps", "body"),
            subSections: forwardProp(this, "subSections", "body"),
            columns: (columns) => {
                this.getChild("header").setProp("columns", columns);
                this._updateWidth();
                this._forceCheckOverflow = true;
            }
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "div",
            {
                class: "mpageui-Flowsheet-wrapper"
            },
            el("div",
                {
                    class: classNames(
                        {
                            [ props.defaultClassNames ]: true,
                            [ getRowHeaderSizeClass(((props.rowProps || {}).header || {}).size) ]: true,
                            [ props.classNames ]: props.classNames.length > 0
                        }
                    ),
                    oncreate: ({ dom }) => {
                        this._windowsResizeHandler = windowResizeHandler(dom, this);
                        addWindowResizeListener(this._windowsResizeHandler);
                        handleOverflow(this, dom);
                    },
                    onupdate: ({ dom }) => handleOverflow(this, dom),
                    onremove: () => removeWindowResizeListener(this._windowsResizeHandler)
                },
                [
                    this.renderChildren(),
                    this._isHorizontalScrollVisible ? renderScrollPaddle(el, props, this, SCROLL_PADDLE_TYPE.PREVIOUS) : [],
                    this._isHorizontalScrollVisible ? renderScrollPaddle(el, props, this, SCROLL_PADDLE_TYPE.NEXT) : []
                ]
            )
        );
    }
}

/**
 * Header types
 * @type {{DEFAULT: string, COMPOSITE: string}}
 */
Flowsheet.HEADER_TYPES = {
    DEFAULT: "default",
    COMPOSITE: "composite"
};

Flowsheet.ROW_HEADER_SIZE = ROW_HEADER_SIZE;

Flowsheet.EVENTS = eventNames.PUBLIC;
