"use strict";
import FilterTab from "./FilterTab";
import SelectLabel from "./SelectLabel";
import SearchFilterHeader from "./SearchFilterHeader";
import UIComponent from "../../../../base/UIComponent";
import SearchList from "../list/SearchList";
import SearchBar from "../bar/SearchBar";
import { NavigationHeader } from "../../../atomic/header";
import i18n from "i18n";
import Popup, { PopupSimple } from "../../popup";
import { forwardProp } from "../../../../helpers/props/props";
import { getLoadingSpinner } from "../helpers";
import { EVENTS, NAMESPACE, PRIVATE_EVENTS } from "./const";
import { THROTTLE_TIME } from "../const";

const { searchWithin: searchWithinI18n } = i18n();

/**
 * Closes the popup.
 * @param {Object} control - SearchPopup instance.
 * @returns {undefined} Returns nothing.
 */
const popupCloseHandler = (control) => {
    control.setProps({
        isVisible: false,
        hasFocus: false
    }).update();
};

/**
 * Results Popup containing search suggestions UIComponent which is triggered
 * when the screen size is MD down from the Search Manager
 */
class SearchPopup extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            backEventName: EVENTS.BACK,
            focusEventName: EVENTS.FOCUS,
            hasFocus: false,
            isDisabled: false,
            isVisible: false,
            minimumSearchStringLength: 2,
            placeholder: "",
            results: [],
            searchValue: "",
            selectArray: [],
            selectedId: "",
            selectValue: "",
            selectedIndex: 0,
            shouldTruncate: true,
            throttle: THROTTLE_TIME
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        /*
         * For quick lookup. These instances are hoisted down into the
         * popup control.
         */

        this._hoistedChildren = {
            renderHeaderObj: new SearchFilterHeader({
                searchHeader: new NavigationHeader({
                    classNames: `${NAMESPACE}-header`,
                    content: [
                        new SearchBar({
                            focusEventName: PRIVATE_EVENTS.SEARCH_BAR_FOCUS
                        })
                    ],
                    backEventName: PRIVATE_EVENTS.SEARCH_POPUP_BACK,
                    showBack: true,
                    showDismiss: false,
                    compact: true
                }),
                filterHeader: new Popup({
                    classNames: `${NAMESPACE}-FilterTab`,
                    anchorClassNames: `${NAMESPACE}--filterAnchor`,
                    contentClassNames: `${NAMESPACE}--padding`,
                    anchorControl: new FilterTab({
                        classNames: "mpageui-u-text-color-secondary",
                        value: `${searchWithinI18n} :${this.getProp("selectValue")}`
                    }),
                    content: [],
                    title: searchWithinI18n
                }),
                hasFilterHeader: false
            }),

            searchList: new SearchList({
                hasProgressiveDisclosure: true,
                shouldAutoScroll: true
            }),
            anchorSearchBar: new SearchBar({})
        };
        return [
            {
                resultsPopup: new PopupSimple({
                    classNames: NAMESPACE,
                    anchorClassNames: `${NAMESPACE}-anchor`,
                    contentClassNames: `${NAMESPACE}-content`,
                    headerObj: this._hoistedChildren.renderHeaderObj,
                    content: [
                        this._hoistedChildren.searchList
                    ],
                    alwaysShowHeader: true,
                    popupOpenEventName: PRIVATE_EVENTS.SEARCH_POPUP_OPEN,
                    anchorControl: this._hoistedChildren.anchorSearchBar
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    dependentPropChangeHandlers() {
        return [
            [ "searchValue", "minimumSearchStringLength", (searchValue, minimumSearchStringLength) => {
                this.getChild("resultsPopup").getProp("headerObj").getProp("searchHeader").getProp("content")[0].setProp("value", searchValue);
                this._hoistedChildren.anchorSearchBar.setProp("value", searchValue);
                this._hoistedChildren.searchList.setProp("searchValue", minimumSearchStringLength <= searchValue.length ? searchValue : "");
            } ]
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            placeholder: (placeholder) => {
                this._hoistedChildren.anchorSearchBar.setProp("placeholder", placeholder);
                this.getChild("resultsPopup").getProp("headerObj").getProp("searchHeader").getProp("content")[0].setProp("placeholder", placeholder);
            },
            isDisabled: (isDisabled) => {
                this._hoistedChildren.anchorSearchBar.setProp("isDisabled", isDisabled);
                this.getChild("resultsPopup").getProp("headerObj").getProp("searchHeader").getProp("content")[0].setProp("isDisabled", isDisabled);
            },
            isLoading: (isLoading) => {
                if (isLoading) {
                    this.getChild("resultsPopup").setProp("content", [
                        getLoadingSpinner()
                    ]);
                }
                else {
                    this.getChild("resultsPopup").setProp("content", [
                        this._hoistedChildren.searchList
                    ]);
                }
            },
            isVisible: forwardProp(this, "visible", "resultsPopup"),
            selectedId: (value) => {
                this._hoistedChildren.renderHeaderObj.setProp("hasFilterHeader", !!value);
            },
            selectValue: (value) => {
                this._hoistedChildren.renderHeaderObj.getProp("filterHeader")
                    .getProp("anchorControl").setProp("value", `${searchWithinI18n}: ${value}`);
            },
            results: (results) => {
                this._hoistedChildren.searchList.setProp("results", results);
            },
            selectedIndex: (index) => {
                this._hoistedChildren.searchList.setProp("selectedIndex", index);
            },
            shouldTruncate: (shouldTruncate) => {
                this._hoistedChildren.searchList.setProp("shouldTruncate", shouldTruncate);
            },
            throttle: (throttle) => {
                this._hoistedChildren.anchorSearchBar.setProp("throttle", throttle);
                this.getChild("resultsPopup").getProp("headerObj").getProp("searchHeader").getProp("content")[0].setProp("throttle", throttle);
            }
        };
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.convertEventUsingProp(PRIVATE_EVENTS.SEARCH_BAR_FOCUS, "focusEventName", (src, payload) => [ this, payload ]);

        this.on(PRIVATE_EVENTS.FILTER_TAB_CLICK, () => {
            const selectLabels = this.getProp("selectArray").map((item) =>
                new SelectLabel({
                    value: item.display
                }));
            this._hoistedChildren.renderHeaderObj.getProp("filterHeader").setProp(("content"), selectLabels);
        });

        this.on(PRIVATE_EVENTS.SELECT_LABEL_BACK, (selectedValue) => {
            this.stopPropagation(PRIVATE_EVENTS.SELECT_LABEL_BACK);
            const popup = this._hoistedChildren.renderHeaderObj.getProp("filterHeader").getChild("popup")
                .setProp("visible", false);
            popup.emit(popup.getProp("popupCloseEventName"), this);
            popup.update();
            const selectValue = this.getProp("selectArray").find((item) => item.display === selectedValue);
            this._hoistedChildren.searchList.setProp("results", []);
            const selectedId = selectValue ? selectValue.id : null;
            this.setProp("selectedId", selectedId);
            this.setProp("selectValue", selectedValue);
            this._hoistedChildren.renderHeaderObj.getProp("filterHeader").getProp("anchorControl")
                .setProp("value", `${searchWithinI18n}: ${selectedValue}`);
            this.emit(EVENTS.SELECTION_CHANGE, this.getProp("selectArray"), selectedId);
        });

        this.on(PRIVATE_EVENTS.SEARCH_POPUP_BACK, () => {
            this.stopPropagation(PRIVATE_EVENTS.SEARCH_POPUP_BACK);
            popupCloseHandler(this);
            const selectedValue = this.getProp("selectArray").find((item) => item.display === this.getProp("selectValue"));
            const selectedId = selectedValue ? selectedValue.id : null;
            this.setProp("selectedId", selectedId);
            this.emit(EVENTS.SELECTION_CHANGE, this.getProp("selectArray"), selectedId);
        });

        this.on(PRIVATE_EVENTS.SEARCH_POPUP_OPEN, () => {
            this.stopPropagation(PRIVATE_EVENTS.SEARCH_POPUP_OPEN);
            this._hoistedChildren.renderHeaderObj.getProp("searchHeader").getProp("content")[0].setProp("hasFocus", true);
            if (this.getProp("isDisabled")) {
                popupCloseHandler(this);
            }
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return mChildren.resultsPopup.render();
    }
}

SearchPopup.EVENTS = EVENTS;

export default SearchPopup;
