import UIComponent from "../../../base";
import NestablePaneWithHeader from "./NestablePaneWithHeader";
import Button from "../button";
import { forwardProp } from "../../../helpers/props/props";

/**
 * A button that when clicked will show a nested pane.
 */
export default class ButtonFollowedByPane extends UIComponent {

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            isOpen: false,
            preventHideAnimation: true,
            display: "",
            showDismissButton: false,
            headerText: "",
            buttonType: "",
            buttonClassNames: "",
            buttonDisplayPosition: null,
            icon: null,
            isHeaderTextClickable: false,
            content: [],
            showEventName: ButtonFollowedByPane.EVENTS.SHOW,
            dismissEventName: ButtonFollowedByPane.EVENTS.DISMISS,
            classNames: ""
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            { nestablePane: new NestablePaneWithHeader() },
            { button: new Button({
                clickEventName: this.getProp("showEventName")
            }) }
        ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.on(this.getProp("showEventName"), () => {
            this.setProp("isOpen", true);
            this.update();
        });
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            isOpen: forwardProp(this, "isVisible", "nestablePane"),
            headerText: forwardProp(this, "title", "nestablePane"),
            content: forwardProp(this, "content", "nestablePane"),
            display: forwardProp(this, "display", "button"),
            icon: forwardProp(this, "icon", "button"),
            isHeaderTextClickable: forwardProp(this, "isTitleClickable", "nestablePane"),
            buttonDisplayPosition: forwardProp(this, "displayPosition", "button"),
            buttonType: forwardProp(this, "type", "button"),
            showDismissButton: forwardProp(this, "showDismissButton", "nestablePane"),
            preventHideAnimation: forwardProp(this, "preventHideAnimation", "nestablePane"),
            classNames: forwardProp(this, "classNames", "nestablePane"),
            dismissEventName: forwardProp(this, "dismissEventName", "nestablePane"),
            buttonClassNames: forwardProp(this, "classNames", "button")
        };
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}

ButtonFollowedByPane.EVENTS = {
    SHOW: "ButtonFollowedByPane::show",
    DISMISS: "ButtonFollowedByPane::Dismiss"
};
