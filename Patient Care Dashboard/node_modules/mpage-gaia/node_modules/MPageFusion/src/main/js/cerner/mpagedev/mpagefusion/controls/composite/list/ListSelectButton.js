import UIComponent from "../../../base";
import SelectButton from "../../atomic/button/SelectButton";
import Checkmark from "../../atomic/icon/svg/category/content/Checkmark";
import { forwardProp } from "../../../helpers/props/props";
import classNames from "classnames";
import { isNotEmpty } from "../../../helpers/core/array";

/**
 * Renders a button that can be toggled. To be used as contents of list only.
 */
export default class ListSelectButton extends UIComponent {

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            display: "",
            isSelected: false,
            selectionChangeEventName: ListSelectButton.EVENTS.SELECTION_CHANGE,
            disabled: false,
            classNames: ""
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [ {
            button: new SelectButton({
                type: "listselect"
            } )
        } ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.convertEvent(
            this.getChild("button").getProp("selectionChangeEventName"),
            this.getProp("selectionChangeEventName"),
            (sourceControl, isSelected) => {
                this.setProp("isSelected", isSelected);
                return [ this, isSelected ];
            }
        );
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            display: forwardProp(this, "display", "button"),
            isSelected: (isSelected) => {
                this.getChild("button").setProp("isSelected", isSelected);
                this.getChild("button").setProp("icon", isSelected ? new Checkmark() : null );
            }
        };
    }

    /**
     * @inheritDoc
     */
    dependentPropChangeHandlers() {
        return [
            [ "disabled", "classNames", (disabled, classes) => {
                this.getChild("button").setProps({
                    disabled,
                    classNames: classNames({
                        "mpageui-ListButton": true,
                        "mpageui-List--grouped": true,
                        "mpageui-ListButton--enabled": !disabled,
                        [ classes ]: isNotEmpty(classes)
                    })
                });
            } ]
        ];
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}

ListSelectButton.EVENTS = {
    SELECTION_CHANGE: "ListSelectButton::SelectionChange"
};
