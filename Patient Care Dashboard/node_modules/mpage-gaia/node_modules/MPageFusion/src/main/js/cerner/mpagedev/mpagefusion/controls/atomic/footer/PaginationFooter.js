/**
 * @fileoverview PaginationFooter class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import FooterBase from "./FooterBase";
import Container from "../container";
import Button from "../button";
import Label from "../label";
import { svg } from "../icon";
import { forwardProp } from "../../../helpers/props/props";
import i18n from "i18n";

// i18n stuff
const {
    first: firstI18n,
    last: lastI18n,
    previous: previousI18n,
    next: nextI18n
} = i18n();

/**
 * Default event names
 * @type {{FIRST: string, LAST: string, PREVIOUS: string, NEXT: string}}
 */
const defaultEventNames = {
    FIRST: "PaginationFooter::first",
    LAST: "PaginationFooter::last",
    PREVIOUS: "PaginationFooter::previous",
    NEXT: "PaginationFooter::next"
};

/**
 * Default CSS class names
 * @type {{DISPLAY: string, RSECTION: string, FIRST: string, LAST: string}}
 */
const defaultClassNames = {
    DISPLAY: "mpageui-u-textSize-base mpageui-u-textColor-secondary",
    RSECTION: "mpageui-PaginationFooter-rSection",
    FIRST: "mpageui-PaginationFooter-first",
    LAST: "mpageui-PaginationFooter-last",
    PREVIOUS: "mpageui-PaginationFooter-previous",
    NEXT: "mpageui-PaginationFooter-next"
};

/**
 * Icon by type
 * @type {{PREVIOUS: *, NEXT: *}}
 */
const iconByType = {
    PREVIOUS: new svg.navigation.Previous(),
    NEXT: new svg.navigation.Next()
};

/**
 * Button display by type
 * @type {{FIRST: string, LAST: string, PREVIOUS: string, NEXT: string}}
 */
const displayByType = {
    FIRST: firstI18n,
    LAST: lastI18n,
    PREVIOUS: previousI18n,
    NEXT: nextI18n
};

/**
 * Button icon position by type
 * @type {{PREVIOUS: string, NEXT: string}}
 */
const displayPositionByType = {
    PREVIOUS: "after",
    NEXT: "before"
};

/**
 * Creates the affirm button based on the visible indicator.
 * @param {Boolean} isVisible - Button is visible or not
 * @param {string} type - type of button
 * @param {boolean} isDisabled - disabled state of the button
 * @returns {Array.<Button>} array with one button in it or empty array
 * @private
 */
const getEdgeButton = ({ isVisible, type, isDisabled }) => isVisible ?
    ([
        new Button({
            disabled: isDisabled,
            display: displayByType[ type ],
            type: Button.TYPE.SECONDARY,
            clickEventName: `__${defaultEventNames[ type ]}__`,
            classNames: defaultClassNames[ type ]
        })
    ]) : [];

/**
 * Creates the previous next navigation buttons
 * @param {string} type - type of button
 * @param {boolean} isDisabled - disabled state of the button
 * @param {string} actionClass - CSS class name for the button
 * @returns {Button} Button object
 * @private
 */
const getNavigationButton = (type, { isDisabled, actionClass }) => new Button({
    disabled: isDisabled,
    display: displayByType[ type ],
    icon: iconByType[ type ],
    displayPosition: displayPositionByType[ type ],
    clickEventName: `__${defaultEventNames[ type ]}__`,
    type: Button.TYPE.SECONDARY,
    responsiveIconSize: Button.RESPONSIVE_ICON_SIZE.XS_DOWN,
    classNames: actionClass
});

/**
 * Render the sections of the content bar
 * @param {PaginationFooter} ctx - Context reference
 * @returns {Function} Function which updates the section buttons
 * @private
 */
const updateRightSectionButtons = (ctx) => () => {
    ctx.getChild("base")
        .setProp("rSection", new Container({}, [
            // first button
            ...getEdgeButton({
                isDisabled: ctx.getProp("isFirstDisabled"),
                isVisible: ctx.getProp("showFirst"),
                type: "FIRST"
            }),
            // previous button
            getNavigationButton("PREVIOUS", { isDisabled: ctx.getProp("isPreviousDisabled"), actionClass: defaultClassNames.PREVIOUS } ),
            // next button
            getNavigationButton("NEXT", { isDisabled: ctx.getProp("isNextDisabled"), actionClass: defaultClassNames.NEXT }),
            // last button
            ...getEdgeButton({
                isDisabled: ctx.getProp("isLastDisabled"),
                isVisible: ctx.getProp("showLast"),
                type: "LAST"
            })
        ]));
};

/**
 * PaginationFooter class.
 * @class PaginationFooter
 * @constructor
 */
export default class PaginationFooter extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            classNames: "",
            display: "Page x of y", // consumers should always override this with i18n strings
            isFirstDisabled: false,
            isLastDisabled: false,
            isNextDisabled: false,
            isPreviousDisabled: false,
            nextClickEventName: defaultEventNames.NEXT,
            previousClickEventName: defaultEventNames.PREVIOUS,
            showFirst: false,
            firstClickEventName: defaultEventNames.FIRST,
            showLast: false,
            lastClickEventName: defaultEventNames.LAST,
            bgStyle: FooterBase.BG_STYLE.ANCHOR
        };
    }

    /**
     * @inheritDoc
     */
    dependentPropChangeHandlers() {
        return [
            [
                "showFirst",
                "showLast",
                "isFirstDisabled",
                "isLastDisabled",
                "isNextDisabled",
                "isPreviousDisabled",
                updateRightSectionButtons(this)
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            display: (newDisplay) => {
                this.getChild("base")
                    .setProp("lSection", new Label({
                        classNames: defaultClassNames.DISPLAY,
                        value: newDisplay
                    }));
            },
            classNames: forwardProp(this, "classNames", "base"),
            bgStyle: forwardProp(this, "bgStyle", "base")
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                base: new FooterBase({
                    isBisected: false,
                    bgStyle: FooterBase.BG_STYLE.ANCHOR,
                    rClassNames: defaultClassNames.RSECTION
                })
            }
        ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.redirectEventUsingProp(`__${defaultEventNames.FIRST}__`, "firstClickEventName", this);
        this.redirectEventUsingProp(`__${defaultEventNames.LAST}__`, "lastClickEventName", this);
        this.redirectEventUsingProp(`__${defaultEventNames.PREVIOUS}__`, "previousClickEventName", this);
        this.redirectEventUsingProp(`__${defaultEventNames.NEXT}__`, "nextClickEventName", this);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}

/**
 * @inheritDoc
 */
PaginationFooter.EVENT_NAMES = defaultEventNames;

/**
 * @inheritDoc
 */
PaginationFooter.BG_STYLE = FooterBase.BG_STYLE;
