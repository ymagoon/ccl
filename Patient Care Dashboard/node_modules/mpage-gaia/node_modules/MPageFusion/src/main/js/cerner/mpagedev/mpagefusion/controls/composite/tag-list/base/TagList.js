import UIComponent from "../../../../base";
import classNames from "classnames";
import { NAMESPACE, PRIVATE_EVENTS } from "./const";
import { tagsChange } from "./propChangeHandlers";
import { renderAllTags, renderTagPreview } from "./renderHelpers";

/**
 * TagList class.
 * @class TagList
 */
class TagList extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            requestDeleteEventName: null, // Required
            requestShowAllEventName: null, // Required
            showAll: false,
            tags: []
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            tags: tagsChange(this)
        };
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this._handlePillBoxDelete = this._handlePillBoxDelete.bind(this);
        this._handleRequestShowAll = this._handleRequestShowAll.bind(this);
        // PillBox events
        this.on(PRIVATE_EVENTS.PILLBOX_REQUEST_DELETE, this._handlePillBoxDelete);
    }

    /**
     * Handles the delete event from the pillbox.
     * @param {PillBox} src - The source PillBox.
     * @param {String} key - The key of the pill box.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handlePillBoxDelete(src, { key }) {
        const { tags } = this.getProps();
        const index = tags.findIndex((t) => t.key === key);

        this.stopPropagation(PRIVATE_EVENTS.PILLBOX_REQUEST_DELETE);

        this.emit(this.getProp("requestDeleteEventName"), this, {
            key,
            index
        });
    }

    /**
     * Handles request to show all.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleRequestShowAll() {
        this.emit(this.getProp("requestShowAllEventName"), this, { showAll: this.getProp("showAll") });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return el(
            "div",
            {
                class: classNames(NAMESPACE, {
                    [ props.classNames ]: !!props.classNames
                })
            },
            [
                renderAllTags(
                    el,
                    props.showAll,
                    this.getChildren(),
                    this._handleRequestShowAll
                ),
                renderTagPreview(el, props.showAll, this.getChildren())
            ]
        );
    }
}

export default TagList;
