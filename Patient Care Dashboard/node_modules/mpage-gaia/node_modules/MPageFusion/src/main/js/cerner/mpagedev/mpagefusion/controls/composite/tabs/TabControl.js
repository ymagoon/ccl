"use strict";
import UIComponent from "../../../base/UIComponent";
import classNames from "classnames";
import { forwardProp } from "../../../helpers/props/props";
import TabListControl from "./TabListControl";
import TabMenu from "./TabMenu";
import {
    getTabDisplay,
    getNewTabList,
    getInitialTabId,
    generateMenuContent,
    TabControlOrientation,
    TabControlEvents,
    TabControlInternalEvents
} from "./helpers";

const NAMESPACE = "mpageui-TabControl";

/**
 * Called when the state turns stale. Updates the menu and tablist with correct tab sequence and
 * currently selected tab.
 *
 * @param {Object} control - TabControl instance
 * @param {String} selectedTabId - Tab unique id
 * @param {Array} content - Tab content object list consisting of ids, displays and view
 * @param {Array} menuContent - Array of content for menu
 * @returns {undefined} returns nothing
 */
const updateTabState = (control, selectedTabId, content, menuContent) => {
    control.getChild("tabControl").setProps({
        selectedTabId,
        content
    });
    control.getChild("tabMenu").setProps({
        display: getTabDisplay(menuContent, selectedTabId),
        content: menuContent
    });
};

/**
 * Sets the initial tab to the first one in the event the consumer fails to provide one.
 *
 * @param {Object} control - TabControl instance
 * @param {Array} content - Tab content object list consisting of ids, displays and view
 * @returns {String} Tab unique id
 */
const setInitialSelectedTabId = (control, content) => {
    const id = getInitialTabId(content);
    control.setProp("selectedTabId", id);
    return id;
};

/**
 * Process the dependent props - content and selectedTabId. If selectedTabId is not
 * present then select the first tab. Generate the menu content based on the selectedTab and tab display values
 *
 * @param {Object} control - TabControl instance
 * @param {String} selectedTabId - Tab unique id
 * @param {Array} content - Tab content object list consisting of ids, displays and view
 * @returns {undefined} returns nothing
 */
const updateTabWithContent = (control, selectedTabId, content) => {
    if (!selectedTabId) {
        selectedTabId = setInitialSelectedTabId(control, content);
    }

    updateTabState(control, selectedTabId, content, generateMenuContent(selectedTabId, content));
};

/**
 * Tab Control:
 * * TabListControl - Using TabList (XS+), Tabs, TabContent, TabPanel
 * * MenuButton - Using select group (XS down)
 *
 * @class TabControl
 */
class TabControl extends UIComponent {
    /**
     * Constructor for the TabControl class.
     * @param {Object} [props] - TabControl instance props.
     * @param {Array<UIComponent>} [children] - TabControl instance children
     */
    constructor(props, children) {
        super(props, children);
        this._state = {
            tabContent: null
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            tabContentClassNames: "",
            content: [],
            menuSelectionChangeEventName: TabControlEvents.MENU_SELECTION_CHANGE,
            tabSelectionChangeEventName: TabControlEvents.TAB_SELECTION_CHANGE,
            tabOrderChangeEventName: TabControlEvents.TAB_ORDER_CHANGE,
            selectedTabId: "",
            orientation: TabControlOrientation.HORIZONTAL,
            isDraggable: false
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                tabMenu: new TabMenu({
                    selectedTabId: this.getProp("selectedTabId"),
                    content: this.getProp("content"),
                    selectionChangeEventName: TabControlInternalEvents.MENU_SELECTION_CHANGE
                })
            },
            {
                tabControl: new TabListControl({
                    content: this.getProp("content"),
                    selectedTabId: this.getProp("selectedTabId"),
                    orientation: this.getProp("orientation"),
                    isDraggable: this.getProp("isDraggable"),
                    selectionChangeEventName: TabControlInternalEvents.TAB_SELECTION_CHANGE,
                    orderChangeEventName: TabControlInternalEvents.TAB_ORDER_CHANGE,
                    tabContentClassNames: this.getProp("tabContentClassNames")
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(TabControlInternalEvents.TAB_SELECTION_CHANGE, (selectedTabId) => {
            this.stopPropagation(TabControlInternalEvents.TAB_SELECTION_CHANGE);
            this.setProp("selectedTabId", selectedTabId);
            this.emit(this.getProp("tabSelectionChangeEventName"), selectedTabId);
        });
        this.on(TabControlInternalEvents.MENU_SELECTION_CHANGE, (control, menuItemsObj) => {
            this.stopPropagation(TabControlInternalEvents.MENU_SELECTION_CHANGE);
            this.setProp("selectedTabId", menuItemsObj[ 0 ].id);
            this.emit(this.getProp("tabSelectionChangeEventName"), menuItemsObj[ 0 ].id);
        });
        this.on(TabControlInternalEvents.TAB_ORDER_CHANGE, (newTabOrderList) => {
            this.stopPropagation(TabControlInternalEvents.TAB_ORDER_CHANGE);
            this.setProp("content", getNewTabList(newTabOrderList, this.getProp("content")));
            this.emit(this.getProp("tabOrderChangeEventName"), newTabOrderList);
        });
    }

    /**
     * @inheritDoc
     */
    dependentPropChangeHandlers() {
        return [
            [
                "selectedTabId", "content", (selectedTabId, content) => updateTabWithContent(this, selectedTabId, content)
            ]
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isDraggable: forwardProp(this, "isDraggable", "tabControl"),
            orientation: forwardProp(this, "orientation", "tabControl"),
            tabContentClassNames: forwardProp(this, "tabContentClassNames", "tabControl")
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "div",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                }),
                "aria-orientation": props.orientation
            },
            this.renderChildren()
        );
    }
}

TabControl.EVENTS = TabControlEvents;
TabControl.ORIENTATION = TabControlOrientation;

export default TabControl;
