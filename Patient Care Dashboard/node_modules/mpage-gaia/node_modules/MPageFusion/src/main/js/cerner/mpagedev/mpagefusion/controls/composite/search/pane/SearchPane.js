"use strict";
import UIComponent from "../../../../base/UIComponent";
import SearchList from "../list/SearchList";
import { adjustPaneHeight, adjustPaneWidth } from "../manager/helpers";
import { getLoadingSpinner } from "../helpers";
import { emitUsingProp, forwardProp } from "../../../../helpers/props/props";

const NAMESPACE = "mpageui-SearchPane";
const EVENTS = {
    OVERLAY_CLICK: "SearchPane::overlayClick"
};

/**
 * Results floating pane that loads in screen sizes MD up and
 * has the results list from suggestions.Shows up when the throttle time expires or on search submit
 */
class SearchPane extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            isLoading: false,
            isVisible: false,
            overlayClickEventName: EVENTS.OVERLAY_CLICK,
            results: [],
            searchValue: "",
            selectedIndex: 0,
            shouldTruncate: true,
            shouldExpandSearchPane: false,
            shouldExpandSearchPaneToRight: false
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                searchList: new SearchList({
                    preventMouseDownDefault: true,
                    results: [],
                    shouldAutoScroll: true
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            selectedIndex: forwardProp(this, "selectedIndex", "searchList"),
            results: forwardProp(this, "results", "searchList"),
            searchValue: forwardProp(this, "searchValue", "searchList"),
            shouldTruncate: forwardProp(this, "shouldTruncate", "searchList")
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return props.isVisible ? [
            el(
                "div",
                {
                    class: `${NAMESPACE}-overlay`,
                    onclick: emitUsingProp("overlayClickEventName", this, this)
                }
            ),
            [
                el(
                    "div",
                    {
                        class: NAMESPACE,
                        oncreate: ({ dom }) => {
                            adjustPaneHeight(dom);
                            if(props.shouldExpandSearchPane) {
                                adjustPaneWidth(dom, props.shouldExpandSearchPaneToRight);
                            }
                        },
                        onupdate: ({ dom }) => {
                            adjustPaneHeight(dom);
                            if(props.shouldExpandSearchPane) {
                                adjustPaneWidth(dom, props.shouldExpandSearchPaneToRight);
                            }
                        },
                        onmousedown: (e) => {
                            /*
                             * Note: This is to prevent selection of an item in the search
                             * pane from stealing focus from the input, effectively preventing
                             * the 'blur' action from occurring on the input.
                             * A 'blur' action triggered during selection in the search pane
                             * creates a bug where, if a scrollbar is present, it will scroll
                             * back to the top and lose your selection.
                             */
                            e.preventDefault();
                        }
                    },
                    props.isLoading ? (getLoadingSpinner().render()) : mapped.searchList.render()
                )
            ]
        ] : null;
    }
}

SearchPane.EVENTS = EVENTS;

export default SearchPane;
