import UIComponent from "../../../base";
import ButtonFollowedByPane from "../../atomic/nestable-pane/ButtonFollowedByPane";
import { forwardProp } from "../../../helpers/props/props";
import ChevronRight from "../../atomic/icon/svg/category/navigation/ChevronRight";
import classNames from "classnames";

/**
 * A list that can be nested infinitely as long as it belongs to a root List.
 * It is implemented in terms of nested panes.
 */
export default class SubList extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            isOpen: false,
            display: "",
            headerText: "",
            icon: new ChevronRight(),
            content: [],
            showEventName: ButtonFollowedByPane.EVENTS.SHOW,
            showDismissButton: false,
            dismissEventName: SubList.EVENTS.DISMISS,
            preventHideAnimation: true,
            isDecorated: false,
            isHeaderTextClickable: false,
            itemClassName: ""
        };
    }

    /**
     * @inheritdoc
     */
    createChildren({ props }) {
        let buttonClassNames = "mpageui-ListButton mpageui-ListButton--enabled";
        let paneClassNames = "mpageui-List";
        if (props.itemClassName) {
            buttonClassNames = `${buttonClassNames} ${props.itemClassName}`;
            paneClassNames = `${paneClassNames} ${props.itemClassName}`;
        }

        return [
            { button: new ButtonFollowedByPane({
                buttonType: "sublist",
                showEventName: props.showEventName,
                buttonDisplayPosition: "before",
                classNames: paneClassNames,
                buttonClassNames
            }) }
        ];
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            isOpen: forwardProp(this, "isOpen", "button"),
            display: forwardProp(this, "display", "button"),
            headerText: forwardProp(this, "headerText", "button"),
            isHeaderTextClickable: forwardProp(this, "isHeaderTextClickable", "button"),
            icon: forwardProp(this, "icon", "button"),
            content: forwardProp(this, "content", "button"),
            showDismissButton: forwardProp(this, "showDismissButton", "button"),
            preventHideAnimation: forwardProp(this, "preventHideAnimation", "button"),
            dismissEventName: forwardProp(this, "dismissEventName", "button")
        };
    }

    /**
     * @inheritdoc
     */
    dependentPropChangeHandlers() {
        return [
            [
                "isDecorated",
                "itemClassName",
                (isDecorated, itemClassName) => this.getChild("button").setProp("classNames", classNames({
                    "mpageui-List": true,
                    "mpageui-List--decorated": isDecorated,
                    [itemClassName]: Boolean(itemClassName)
                }))
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}

SubList.EVENTS = {
    DISMISS: "SubList::Dismiss"
};
