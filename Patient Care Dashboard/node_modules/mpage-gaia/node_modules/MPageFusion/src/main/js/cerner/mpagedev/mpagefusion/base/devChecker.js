/**
 * @fileoverview This is a DEV only file. This code will not be shipped in production.
 * @author Gyandeep Singh
 */

"use strict";

/**
 * Checks if the string is empty and throws if true
 * @param {string} name - name to check
 * @param {string} errMessage - error message to display
 * @returns {undefined}
 * @throws {Error} if all conditions are true
 * @private
 */
const checkString = (name, errMessage) => {
    if (!name || typeof name !== "string" || name === "") {
        throw new Error(errMessage);
    }
};

/**
 * Check base class emit function
 * @param {string} constructorName - name of the class object in reference
 * @param {Boolean} isRendering - true if the rendering phase is on
 * @param {string} eventName - name of the event
 * @returns {undefined}
 * @throws {Error} if all conditions are true
 */
export const checkEmit = (constructorName, isRendering, eventName) => {
    if (isRendering) {
        throw new Error(`Error: '${constructorName}' called 'emit' inside propChangeHandler function.
            This error was thrown because 
            * You called 'emit' during the render phase.
            * Its not recommended to call 'emit' when the rendering has begun.
        `);
    }

    checkString(eventName, `Error: '${constructorName}' called 'emit' without an event name.
            This error was thrown because 
            * You called 'emit' without an event name.
            * Event name can only be a string with some value.
    `);
};

/**
 * Check base class on function
 * @param {string} constructorName - name of the class object in reference
 * @param {string} eventName - name of the event
 * @param {*} listener - listener function
 * @returns {undefined}
 * @throws {Error} if all conditions are true
 */
export const checkOn = (constructorName, eventName, listener) => {
    checkString(eventName, `Error: '${constructorName}' called 'on' without an event name.
        This error was thrown because 
        * You called 'on' without an event name.
        * Event name can only be a string with some value.
    `);

    if (typeof listener !== "function") {
        throw new Error(`Error: '${constructorName}' called 'on' with event name '${eventName}' with invalid listener.
            This error was thrown because 
            * You called 'on' without a call back function.
            * Second parameter has to be a function.
        `);
    }
};

/**
 * Check base class removeListener function
 * @param {string} constructorName - name of the class object in reference
 * @param {string} eventName - name of the event
 * @param {*} listener - listener function
 * @returns {undefined}
 * @throws {Error} if all conditions are true
 */
export const checkRemoveListener = (constructorName, eventName, listener) => {
    checkString(eventName, `Error: '${constructorName}' called 'removeListener' without an event name.
        This error was thrown because 
        * You called 'removeListener' without an event name.
        * Event name can only be a string with some value.
    `);

    if (typeof listener !== "function") {
        throw new Error(`Error: '${constructorName}' called 'removeListener' with event name '${eventName}' with invalid listener.
            This error was thrown because 
            * You called 'removeListener' without a call back function.
            * Second parameter has to be a function.
        `);
    }
};

/**
 * Check base class stopPropagation function
 * @param {string} constructorName - name of the class object in reference
 * @param {string} eventName - name of the event
 * @returns {undefined}
 * @throws {Error} if all conditions are true
 */
export const checkStopPropagation = (constructorName, eventName) => {
    checkString(eventName, `Error: '${constructorName}' called 'stopPropagation' without an event name.
        This error was thrown because 
        * You called 'stopPropagation' without an event name.
        * Event name can only be a string with some value.
    `);
};

/**
 * Check base class mount function
 * @param {string} constructorName - name of the class object in reference
 * @param {string} elementId - id of the element
 * @returns {undefined}
 * @throws {Error} if all conditions are true
 */
export const checkMount = (constructorName, elementId) => {
    checkString(elementId, `Error: '${constructorName}' called 'mount' without elementId.
        This error was thrown because 
        * You called 'mount' without an element id.
        * Element id can only be a string with some value.
    `);
};
