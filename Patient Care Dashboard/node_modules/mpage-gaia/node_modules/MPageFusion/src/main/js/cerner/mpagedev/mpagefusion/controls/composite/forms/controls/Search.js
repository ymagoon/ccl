"use strict";

import UIComponent from "../../../../base";
import Search from "../../search/manager/Search";
import { unique } from "../../../../helpers/core/generators";
import { forwardProp } from "../../../../helpers/props/props";
import {
    renderDualColumnView,
    renderErrorText,
    renderHelperText,
    renderTitle
} from "../helpers/view";
import {
    generateValueChangePayload
} from "../helpers/props";

/**
 * Retrieve the value for the search control.
 * Find the search result with the given value key or default to the input value.
 *
 * @param {Object[]} results - Array search result objects
 * @param {String} value - Key corresponding to current search value in search results object
 * @param {String} inputValue - Input text of search bar
 * @returns {String} Returns the string to set to the search bar
 */
const getSearchValue = ({ results }, value, inputValue) => {
    const resultObj = results ? results.find((item) => item.key === value) : null;
    return resultObj ? resultObj.data[0].display : inputValue;
};

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const FormSearchEvents = {
    VALUE_CHANGE: "FormSearch::change",
    SELECTION_CHANGE: "FormSearch::selectionChange",
    INPUT: "FormSearch::inputChange",
    SUBMIT: "FormSearch::submit"
};

const namespace = "mpageui-FormSearch";

/**
 * The FormSearch class.
 * @class FormSearch
 */
class FormSearch extends UIComponent {
    /**
     * @inheritDoc
     */
    initialState() {
        return {
            inputValue: "",
            showErrorText: false,
            showHelperText: true,
            value: ""
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            completionHandler: (value) => !!value,
            display: "",
            errorHandler: null,
            formName: unique(namespace),
            hasInlineLabel: false,
            helperHandler: null,
            isDisabled: false,
            isRequired: false,
            showErrorText: false,
            showHelperText: true,
            showRequiredIndicator: true,
            options: {}, // isLoading, placeholder, results, throttle, value
            value: "",
            inputEventName: FormSearchEvents.INPUT,
            selectionChangeEventName: FormSearchEvents.SELECTION_CHANGE,
            submitEventName: FormSearchEvents.SUBMIT,
            valueChangeEventName: FormSearchEvents.VALUE_CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isDisabled: forwardProp(this, "isDisabled", "search"),
            formName: forwardProp(this, "name", "search"),
            showErrorText: (showErrorText) => {
                this._state.showErrorText = showErrorText;
            },
            showHelperText: (showHelperText) => {
                this._state.showHelperText = showHelperText;
            },
            options: (options) => {
                if ("value" in options) {
                    this._state.inputValue = options.value;
                }

                this.getChild("search").setProps(Object.assign(
                    {},
                    options,
                    // Can't override search event names
                    {
                        inputEventName: Search.EVENTS.INPUT,
                        selectionChangeEventName: Search.EVENTS.SELECTION_CHANGE,
                        submitEventName: Search.EVENTS.SUBMIT
                    }
                ));

                if (this._state.value) {
                    this.getChild("search").setProp("value",
                        getSearchValue(options, this._state.value, this._state.inputValue)
                    );
                }
            },
            value: (value) => {
                this._state.value = value;
                this.getChild("search").setProp("value",
                    getSearchValue(this.getProp("options"), value, this._state.inputValue)
                );
            }
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                search: new Search()
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(Search.EVENTS.SELECTION_CHANGE, (ctx, selection) => {
            this.stopPropagation(Search.EVENTS.SELECTION_CHANGE);

            const valueText = selection && selection.data ? selection.data[0].display : "";

            this._state = {
                inputValue: valueText,
                showErrorText: true,
                showHelperText: true,
                value: selection.key
            };

            // Set search bar value to selected text
            this.getChild("search").setProp("value", valueText);

            // Emit value change event with new selected key
            this.emit(this.getProp("valueChangeEventName"), this,
                generateValueChangePayload(this.getProps(), selection.key)
            );

            // Keep search selection change event
            this.emit(this.getProp("selectionChangeEventName"), ctx, selection);

            this.update();
        });

        this.on(Search.EVENTS.INPUT, (ctx, value) => {
            this.stopPropagation(Search.EVENTS.INPUT);

            this._state.inputValue = value;

            // Only emit value change event when value was previously selected
            if (this._state.value) {
                this._state = Object.assign({}, this._state, {
                    showErrorText: true,
                    showHelperText: true,
                    value: ""
                });

                // Emit value change event with empty string
                this.emit(this.getProp("valueChangeEventName"), this,
                    generateValueChangePayload(this.getProps(), "")
                );
            }

            // Keep search input change event
            this.emit(this.getProp("inputEventName"), ctx, value);

            this.update();
        });

        // Keep search submit event
        this.redirectEventUsingProp(Search.EVENTS.SUBMIT, "submitEventName");
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren, { state }) {
        return el(
            "div",
            {
                class: namespace
            },
            [
                renderDualColumnView(el, props.hasInlineLabel,
                    [
                        renderTitle(el, props)
                    ],
                    [
                        mappedChildren.search.render(),
                        renderErrorText(el, props, state),
                        renderHelperText(el, props, state)
                    ]
                )
            ]
        );
    }
}

FormSearch.EVENTS = FormSearchEvents;

export default FormSearch;
