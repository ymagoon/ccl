"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import { svg } from "../../atomic/icon";
import { emitUsingProp } from "../../../helpers/props/props";

const { clinical: { Abnormal, Critical, High, Low, Modified } } = svg;

/**
 * Enumeration for events emitted by the ClinicalBadge.
 * @type {{CLICK: string}}
 */
const EVENTS = {
    CLICK: "ClinicalBadge::click"
};

/**
 * The type of clinical value.
 * @type {{LOW: string, HIGH: string, ABNORMAL: string}}
 */
const TYPE = {
    ABNORMAL: "abnormal",
    CRITICAL: "critical",
    HIGH: "high",
    LOW: "low"
};

const NAMESPACE = "mpageui-ClinicalBadge";
const unitDisplayClassNames = "mpageui-u-text-color-secondary mpageui-u-margin-left-relative-very-tight mpageui-u-margin-right-relative-very-tight";

/**
 * Retrieves the icon based on the type of clinical value.
 * @param {string} type - The type of clinical value, use the TYPE enumeration.
 * @returns {Function} The constructor for the appropriate clinical icon.
 */
const getIcon = (type) => ({
    [ TYPE.CRITICAL ]: Critical,
    [ TYPE.LOW ]: Low,
    [ TYPE.HIGH ]: High,
    [ TYPE.ABNORMAL ]: Abnormal
})[ type ] || null;

/**
 * Renders the icon, if it exists, otherwise renders null.
 * @param {Function} Icon - The constructor for the icon.
 * @param {string} [classes] - Additional classes to apply to the icon.
 * @returns {VDom | null} The rendered icon.
 */
const renderIcon = (Icon, classes) => Icon ? (new Icon({
    classNames: classNames(`${NAMESPACE}-icon`, classes)
})).render() : null;

/**
 * Renders the modified icon, if the ClinicalBadge is flagged as modified.
 * @param {boolean} isModified - The modified state of the badge.
 * @returns {VDom} The rendered icon.
 */
const renderModified = (isModified) => isModified ? renderIcon(Modified, `${NAMESPACE}-modified-icon`) : null;

/**
 * Gets the appropriate CSS class for text color based on the clinical type.
 * @param {string} type - The type of clinical value, use the TYPE enumeration.
 * @returns {string} The CSS class for the text color.
 */
const getTextColor = (type) => `mpageui-u-text-color-clinical-${type}`;

/**
 * Create elements for display and unit if unit is present
 * otherwise just returns the display value
 * @param {Function} el - VDom generator
 * @param {object} props - props of the control
 * @returns {Array|string} collection element or just display
 */
const getDisplayElements = (el, props) =>
    props.unitDisplay.length > 0 ?
        ([
            el(
                "span",
                {
                    class: getTextColor(props.type),
                    title: props.display
                },
                props.display
            ),
            el(
                "span",
                {
                    class: unitDisplayClassNames,
                    title: props.unitDisplay
                },
                props.unitDisplay
            )
        ]) :
        props.display;

/**
 * The ClinicalBadge class. This is used to display clinically important values
 * with the appropriate clinical icon and necessary font colors.
 * @class ClinicalBadge
 */
class ClinicalBadge extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            clickEventName: EVENTS.CLICK,
            display: "",
            unitDisplay: "",
            isModified: false,
            type: "",
            noTruncate: false
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return el(
            "div",
            {
                class: classNames({
                    [ props.classNames ]: props.classNames,
                    [ NAMESPACE ]: true
                }),
                onclick: emitUsingProp("clickEventName", this, this)
            },
            [
                renderIcon(getIcon(props.type)),
                el(
                    "div",
                    {
                        class: classNames({
                            [ `${NAMESPACE}-display` ]: true,
                            [ `${NAMESPACE}-display-truncate` ]: !props.noTruncate,
                            [ getTextColor(props.type) ]: props.unitDisplay.length === 0
                        }),
                        title: props.display
                    },
                    getDisplayElements(el, props)
                ),
                renderModified(props.isModified)
            ]
        );
    }
}

ClinicalBadge.EVENTS = EVENTS;
ClinicalBadge.TYPE = TYPE;

export default ClinicalBadge;
