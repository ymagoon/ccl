import { range } from "../../../../helpers/core/array";
import { bottom, top, width, left } from "../../../../helpers/dom/positioning";

/**
 * Checks if a search result is considered selectable.
 * @param {Object} result - An individual search result.
 * @returns {boolean} True if the result is considered selectable.
 */
const isSelectable = (result) =>
    (typeof result.isSelectable === "undefined" || !!result.isSelectable);

/**
 * Based on the direction, searches for the first selectable item in that direction.
 * @param {number} currentIndex - The current selected index.
 * @param {Array<Object>} results - The array of results.
 * @param {number} direction - The direction to search for the next selectable result.
 * @returns {number} The next selection index.
 */
const findSelectedIndex = (currentIndex, results, direction) =>
    range(0, results.length)
        .map((i) => (currentIndex + ((i + 1) * direction) + results.length) % results.length)
        .find((i) => isSelectable(results[ i ]));

/**
 * Determines if the results pane (desktop) should be shown.
 * @param {Array<Object>} results - The array of results.
 * @param {boolean} isLoading - Indicates the loading state.
 * @param {boolean} isFocused - Indicates the focused state.
 * @returns {boolean} Indicates if the desktop results pane should be shown.
 */
const shouldShowPane = (results, isLoading, isFocused) =>
    ((results && results.length) || isLoading) && isFocused;

/**
 * Adjust height of the pane and its content based on the space left on the screen.
 * @param {HTMLElement} paneElem - Result pane DOM element.
 * @returns {undefined} Returns nothing.
 */
const adjustPaneHeight = (paneElem) => {
    let paneHeight = null;
    const SEARCH_PANE_HEIGHT_OFFSET = 3; // in px
    if (bottom(paneElem) > window.innerHeight) {
        paneHeight = window.innerHeight - top(paneElem);
    }
    if (paneHeight) {
        paneElem.style["max-height"] = `${Math.floor(paneHeight - SEARCH_PANE_HEIGHT_OFFSET)}px`;
    }
};

/**
 * Expand width of the pane and positioned the expanded width based on the space available on the left and right.
 * @param {HTMLElement} paneElem - Result pane DOM element.
 * @param {Boolean} shouldExpandSearchPaneToRight - stores either true/false.
 * @returns {undefined} Returns nothing.
 */
const adjustPaneWidth = (paneElem, shouldExpandSearchPaneToRight) => {
    const SEARCH_PANE_MIN_WIDTH = 600; // in px
    if(width(paneElem) < SEARCH_PANE_MIN_WIDTH) {
        paneElem.style.width = `${SEARCH_PANE_MIN_WIDTH}px`;
        // by default searchpane width is expanded on left
        paneElem.style.left = "";
        paneElem.style.right = 0;
        // adjust the position of the search result pane
        if (left(paneElem) < 0 || shouldExpandSearchPaneToRight) {
            // width should expand on right
            paneElem.style.right = "";
            paneElem.style.left = 0;
        }
    }
};

/**
 * Returns the value that needs to be emitted to the consumer depending on whether the minimum string length criteria are met.
 * @param {Number} minimumSearchStringLength - The minimum length the search string has to be for the search control
 * to emit the actual value in the SearchBar.
 * @param {String} actualValue - The value coming from the SearchBar.
 * @returns {String} Returns the actualValue as is, if conditions are satisfied; else an empty string.
 */
const getEmitValue = (minimumSearchStringLength, actualValue) => (minimumSearchStringLength <= actualValue.length ? actualValue : "");

export {
    adjustPaneHeight,
    adjustPaneWidth,
    findSelectedIndex,
    getEmitValue,
    isSelectable,
    shouldShowPane
};
