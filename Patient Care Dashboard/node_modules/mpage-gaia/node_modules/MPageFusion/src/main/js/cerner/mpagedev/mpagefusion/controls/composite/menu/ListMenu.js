import UIComponent from "../../../base";
import PopupSimple from "../popup/PopupSimple";
import List from "../list/List";
import { forwardProp } from "../../../helpers/props/props";
import { NavigationHeader } from "../../atomic/header";
import SubList from "../list/SubList";
import i18n from "i18n";

const DISMISS = "ListMenu::Dismiss";
const CLOSE = "ListMenu::close";
const ADJUST_HEIGHT = "NestablePaneRoot::resize";
const INLINE_LIST_ITEM = "mpageui-inlinelist-item";

/**
 * Returns the List instance that is part of the popup.
 * @param {ListMenu} control the list menu instance
 * @returns {List} the child list instance
 */
const getList = (control) => control.getChild("popup").getProp("content")[0];

/**
 * Recursively retrieves all the instances of SubList in the provided
 * content array.
 * @param {Array<UIComponent>} content array of UIComponents to iterate
 * @returns {Array<SubList>} all the sublists found
 */
const getSubLists = (content) =>
    content.reduce(
        (sublists, control) =>
            control instanceof SubList ?
                ([
                    ...sublists,
                    control,
                    ...getSubLists(control.getProp("content"))
                ])
                : sublists,
        []
    );

/**
 * Creates the header that is displayed atop the menu.
 * @param {String} title the header title
 * @param {Boolean} visible wether the header is visible
 * @returns {NavigationHeader} the created content header
 */
const createNavigationHeader = (title, visible) =>
    new NavigationHeader({
        compact: true,
        showDismiss: true,
        title,
        classNames: visible ? INLINE_LIST_ITEM : `mpageui-ListMenu-header--invisible ${INLINE_LIST_ITEM}`,
        dismissEventName: DISMISS
    });

/**
 * Generates the content of the menu by appending a content header
 * before the content that was provided through props.
 * @param {ListMenu} listMenu the control instance
 * @returns {undefined}
 */
const generateContent = (listMenu) =>
    getList(listMenu).setProp("content", [
        createNavigationHeader(listMenu.getProp("title"),
            listMenu.getProp("showHeader"))
    ].concat(listMenu.getProp("content")));

/**
 * A popup menu that uses a List to display its contents.
 */
export default class ListMenu extends UIComponent {

    /**
     * @inheritdoc
     */
    beforeCreate() {
        this._generateContent = true;
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            anchorControl: null,
            autoInsertDividers: true,
            content: [],
            classNames: "",
            closeEventName: CLOSE,
            title: i18n().options,
            isOpen: false,
            isDisabled: false,
            showHeader: true,
            isDecorated: false
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                popup: new PopupSimple({
                    size: PopupSimple.SIZE.SMALL,
                    content: [
                        new List()
                    ],
                    contentClassNames: "mpageui-ListMenu-content"
                })
            }
        ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.on(DISMISS, () => {
            this.setProp("isOpen", false);
            this.emit(this.getProp("closeEventName"));
            this.update();
        });

        this.on(ADJUST_HEIGHT, () => {
            this.getChild("popup").getChild("pane").reAdjustPopPane();
            this.stopPropagation(ADJUST_HEIGHT);
            this.update();
        });

        this.on(this.getChild("popup").getProp("popupOpenEventName"), () => {
            getSubLists(this.getProp("content")).forEach(
                (subList) => {
                    subList.setProp("isOpen", false).setProp("preventHideAnimation", true);
                }
            );
            this.update();
        });

        this.on(PopupSimple.EVENTS.CLOSE, () => {
            this.stopPropagation(PopupSimple.EVENTS.CLOSE);
            this.emit(this.getProp("closeEventName"));
        });
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            content: (content) => {
                this._generateContent = true;
            },
            showHeader: (value) => {
                this._generateContent = true;
            },
            title: (value) => {
                this._generateContent = true;
            },
            isDecorated: (isDecorated) =>
                getList(this).setProp("isDecorated", isDecorated),
            autoInsertDividers: (autoInsertDividers) =>
                getList(this).setProp("autoInsertDividers", autoInsertDividers),
            anchorControl: forwardProp(this, "anchorControl", "popup"),
            isOpen: forwardProp(this, "visible", "popup"),
            isDisabled: forwardProp(this, "isDisabled", "popup")
        };
    }

    /**
     * @inheritdoc
     */
    beforeRender() {
        if (this._generateContent) {
            generateContent(this);
            this._generateContent = false;
        }
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}
