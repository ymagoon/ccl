"use strict";

const path = require("path");
const webpack = require("webpack");
const withLocalI18n = require("../helpers/i18n").withLocalI18n;
const { baseConfig: babelBaseConfig } = require("../helpers/babel");
const marked = require("marked");
const renderer = new marked.Renderer();
const LINK_BLACKLIST = [
    "github.cerner.com",
    "wiki.ucern.com",
    ".md"
];

/*
 * Disable links using the Marked Renderer from all the docs that are imported within Example files.
 */
renderer.link = function(href, title, text) {
    const link = marked.Renderer.prototype.link.call(this, href, title, text);
    if (!LINK_BLACKLIST.some((l) => link.indexOf(l) > -1)) {
        return link;
    }
    return link.replace(`href="${href}"`, "href=\"javascript:void(0);\"");
};

module.exports = withLocalI18n({
    devtool: "inline-source-map",
    entry: [
        "webpack-dev-server/client?http://localhost:1337/",
        "docs/demos/App/app.js"
    ],
    output: {
        path: path.join(process.cwd(), "dist"),
        filename: "bundle.js",
        publicPath: "/dist/"
    },
    resolve: {
        modules: [
            process.cwd(),
            "node_modules"
        ]
    },
    module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                include: [
                    path.join(__dirname, "../../.." , "docs"),
                    path.join(__dirname, "../../.." , "src")
                ],
                use: [
                    babelBaseConfig("DEV")
                ]
            },
            {
                test: /\.(png|svg|gif)$/,
                loader: "url-loader"
            },
            {
                test: /\.(css|less)$/,
                loader: "style-loader!css-loader!less-loader"
            },
            {
                test: /\.md$/,
                include: [ path.join(__dirname, "../../..", "docs") ],
                use: [
                    {
                        loader: "html-loader"
                    },
                    {
                        loader: "markdown-loader",
                        options: {
                            gfm: true,
                            tables: true,
                            smartLists: true,
                            langPrefix: "lang-",
                            breaks: false,
                            pedantic: false,
                            sanitize: false,
                            smartypants: false,
                            renderer
                        }
                    }
                ]
            }
        ]
    },
    plugins: [
        new webpack.optimize.ModuleConcatenationPlugin({})
    ]
});
