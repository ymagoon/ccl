const prettier = require("prettier");
const path = require("path");
const outputPathJSON = path.join(process.cwd(), "src/main/js/cerner/mpagedev/mpagefusion/controls/atomic/icon/svg", "svgDefinitionsJSON.js");
const fs = require("fs");
const util = require("util");
const writeFileP = util.promisify(fs.writeFile);

const defaultPositionOptions = {
    x: -6,
    y: -6,
    scale: 0.25
};

const parserOptions = {
    fileHeader: () =>
        `
        /* eslint-disable */
        "use strict";
        `,
    commentBlock: (originalName) =>
        `/**
         * The ${originalName} SVG file as an object.
         * @private
         * @type {{path: {d: string}, options: {x: number, y: number, scale: number}}}
         */`,
    startDefinition: (givenName) => `export const ${givenName} = `,
    openNode: (attributes) => JSON.stringify(attributes),
    endDefinition: () => `;`,
    fileFooter: () => `/* eslint-enable */`
};

/**
 * Writes the contents to the output path
 * @param {string} contents  - The file contents to be written.
 * @returns {undefined} 
 */
const writeDefinitionsIntoFile = (text) =>
writeFileP(
    outputPathJSON,
    prettier.format(text, {
        parser: "babylon"
    })
);

/**
 * Scrubs out bad characters from an svg file name and replaces them with underscores.
 * @param {string} fileName - The name of the svg file.
 * @returns {string} The scrubbed file name.
 */
const scrubFileName = (fileName) => fileName.replace(/[0-9]+_/, "").replace(/[^a-zA-Z_]/g, "_");

/**
 * Maps the processed output (json objects) to mapping names. 
 * @returns {Array} array of json objects.
 */
const handleMapping = (mapping, output) => {
    return output.reduce((result, current) => {
        let currObjKey = Object.keys(current)[0];
        let maps = mapping[currObjKey];
        if(!maps || !maps.length){
                maps = [scrubFileName(currObjKey)];
            }
        const newSet =  maps.map(func => ({
                [func]: {
                    val: current[currObjKey], 
                    key: currObjKey
                }
            })
        );
        return [...result, ...newSet];  
    }, []);
}

/**
 * writes the provided content in the intended format(parser options)
 * @param {Array} mapping - a mapping of file names to SVG aliases.
 * @param {Array} output - output from svgFolderToJSON.
 * @returns {promise} returns a promise that writes the provided content.
 */
const buildFunction = (mapping, output) => {
    let result = handleMapping(mapping, output);
    let icons = [];
    return writeDefinitionsIntoFile(
        `${parserOptions.fileHeader()}
        ${result.map((i) => {
            return Object.keys(i).map(
                (s) => {
                    icons.push(s);
                    return `${parserOptions.commentBlock(i[s].key)}
                ${parserOptions.startDefinition(s)}
                ${parserOptions.openNode(i[s].val)}
                ${parserOptions.endDefinition()}`
                })
        }).join("")}
        ${parserOptions.fileFooter()}\n`)
        .then(() => icons)
}

module.exports = {
    buildFunction,
    defaultPositionOptions
};
