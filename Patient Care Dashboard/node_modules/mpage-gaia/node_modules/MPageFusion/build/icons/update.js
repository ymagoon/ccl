"use strict";

const path = require("path");
const svgToJS = require("fusion-svg-to-js").svgToJS;
const fs = require("fs-extra");
const mappingPath = path.join(process.cwd(), "node_modules/one-cerner-style-icons/src/CernerOneIcons-CSV.csv");
const iconPath = path.join(process.cwd(), "node_modules/one-cerner-style-icons/src/icons");
const outputPath = path.join(process.cwd(), "src/main/js/cerner/mpagedev/mpagefusion/controls/atomic/icon/svg", "svgDefinitions.js");
const fillIconsPath = path.join(process.cwd(), "build/icons", "fillIcons.json");
const { getHistory, writeHistory } = require("./history");
const scrubSvgFilename = (filename) => filename.replace("src/icons/", "");
const scrubAlias = (alias) => alias.replace(/[^a-zA-Z_]/g, "_");
const csv = require("fast-csv");
const svgFolderToJSON = require("svg-to-carbon").svgFolderToJSON;
const svgJsonHelper = require("./svg-json");
const makeHistoryJson = require("./makeJsonHistory").makeHistory;

/**
 * Uses the CSV provided by cerner-one-icon to build a mapping of file names
 * to SVG aliases. Note that a single file can map to multiple aliases.
 * @returns {Promise} A promise that is resolved once the alias mapping has
 * been generated from the CSV.
 */
const buildMapping = () => new Promise((resolve, reject) => {
    let mapping = {};
    csv.fromPath(mappingPath)
        .on("data", (data) => {
            const [alias, filename] = data;
            const scrubbedFilename = scrubSvgFilename(filename);
            const scrubbedAlias = scrubAlias(alias);
            mapping[scrubbedFilename] = mapping[scrubbedFilename] ? [scrubbedAlias, ...mapping[scrubbedFilename]] : [scrubbedAlias];
        })
        .on("end", () => {
            resolve(mapping);
        });
});

/**
 * Returns the array of strings containing the list of icons that has fill property defined in the icons repository
 * @returns [Array] An array of strings.
 */
const getFillIcons = () => JSON.parse(fs.readFileSync(path.resolve(fillIconsPath), "utf-8"));

/**
 * Performs the icon update.
 * @returns {Promise} A promise that is resolved once the icon update process
 * has been completed.
 */
const performIconUpdate = () => Promise.all([buildMapping(), getHistory(), getFillIcons()])
    .then(([mapping, history, fillIcons]) => svgToJS({
        path: iconPath,
        output: outputPath,
        options: {
            mapping: mapping,
            keepFill: fillIcons
        },
        history: history
    }))
    .then(
        ({ history }) => writeHistory(history).then(() => {
            const latestHistory = history[0];
            console.log("========= (ICON -> JS) =========");
            console.log(`Added: ${latestHistory.added.length} icons`);
            console.log(`Removed: ${latestHistory.removed.length} icons`);
            console.log(`Total of: ${latestHistory.all.length} icons`);
            console.log("================================");
        })
    );

/**
 * Converts svg icons to JSON.
 * @returns {Promise} A promise that is resolved once the icon to json update process
 * has been completed.
 */

Promise.all([buildMapping(), svgFolderToJSON({
    dirPath: iconPath,
    options: svgJsonHelper.defaultPositionOptions
})])
    .then(([mapping, output]) => svgJsonHelper.buildFunction(mapping, output))
    .then(makeHistoryJson)
    .then(({ history }) => {
        const latestHistory = history[0];
        fs.writeJSON(path.join(__dirname, ".historyjson"), history)
            .then(() => {
                console.log("========= (ICON -> JSON) =========");
                console.log(`Added: ${latestHistory.added.length} icons`);
                console.log(`Removed: ${latestHistory.removed.length} icons`);
                console.log(`Total of: ${latestHistory.all.length} icons`);
                console.log("================================");
            }).catch((err) => {
                console.error(err);
                console.warn("There was an error writing to the icon history file. Please follow up and verify.");
            })
    });

performIconUpdate();
