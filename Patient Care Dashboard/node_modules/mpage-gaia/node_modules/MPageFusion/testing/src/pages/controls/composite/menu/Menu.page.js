"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _Popup = _interopRequireDefault(require("../dialog/popup/Popup.page"));

var _ContentHeader = _interopRequireDefault(require("../../atomic/header/content-header/ContentHeader.page"));

var _InlineList = _interopRequireDefault(require("../list/InlineList.Page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-List";
var HEADER_INVISIBLE = ".mpageui-ListMenu-header--invisible";
var AUTO_DIVIDERS = "mpageui-List--autodividers";
/**
 * returns the flattened array
 * @returns {Array} flattenArray
 * @param {Array} arr array to be flattened
 * @param {Number} depth depth to which the array needs to be flattened
 */

var flattenArray = function flattenArray(arr, depth) {
  if (depth === void 0) {
    depth = 1;
  }

  return arr.reduce(function (flat, toFlatten) {
    return flat.concat(Array.isArray(toFlatten) && depth - 1 ? toFlatten.flat(depth - 1) : toFlatten);
  }, []);
};
/**
 * returns the array displaying the selected items on the menu
 * @returns {Array<String>} filterSelected
 * @param {Array} items array to be filtered
 */


var filterSelected = function filterSelected(items) {
  return items.map(function (item) {
    if (item.items) {
      return filterSelected(item.items);
    } else if (item.subList) {
      return filterSelected(item.subList.items);
    } else if (item.isSelected) {
      return item.display;
    } else {
      return null;
    }
  });
};
/**
 * The MenuPage class
 * @class module:MPageFusion/testing.composite.menu.MenuPage
 *
 * @example
 * const menu = new MenuPage(driver);
 * const menuHeaderDisplay = menu.get("menuHeaderDisplay");
 */


var MenuPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(MenuPage, _UIComponentPage);

  function MenuPage(driver, options) {
    var _this;

    _this = _UIComponentPage.call(this, driver, options) || this;
    _this._popup = new _Popup["default"](driver);
    _this._contentHeader = new _ContentHeader["default"](driver, {
      selectorList: _this.selectorList,
      useExactSelector: true
    });
    _this._inlineList = new _InlineList["default"](driver, {
      selectorList: _this.selectorList,
      useExactSelector: true
    });
    return _this;
  }

  var _proto = MenuPage.prototype;

  /**
  * Closes the menu
  * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
  * @returns {Promise<String>} click action
  */
  _proto.dismiss = function dismiss() {
    return this._contentHeader.leftAction.click();
  }
  /**
   * the menu header display
   * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
   * @returns {Promise<String>} menuHeaderDisplay
   */
  ;

  _createClass(MenuPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * returns the base Popup page
     * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
     * @returns {PopupPage} PopupPage
     */

  }, {
    key: "popup",
    get: function get() {
      return this._popup;
    }
    /**
     * returns the base ContentHeader page
     * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
     * @returns {ContentHeaderPage} ContentHeaderPage
     */

  }, {
    key: "contentHeader",
    get: function get() {
      return this._contentHeader;
    }
    /**
     * returns the base InlineList page
     * @memberOf module:MPageFusion/testing.composite.menu.InlineListPage
     * @returns {InlineListPage} InlineListPage
     */

  }, {
    key: "inlineList",
    get: function get() {
      return this._inlineList;
    }
    /**
     * returs array displaying all the menu items
     * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
     * @returns {Promise<Array>} displayMenuItems
     */

  }, {
    key: "displayMenuItems",
    get: function get() {
      var _this2 = this;

      return this.getRootElement().then(function (element) {
        return element.getText();
      }).then(function (text) {
        return text.split("\n");
      }).then(function (items) {
        return _this2.isHeaderVisible.then(function (isHeaderVisible) {
          return isHeaderVisible ? items.slice(1) : items;
        });
      });
    }
    /**
     * returns the array of selected items in the menu
     * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
     * @returns {Promise<Array>} selectedItems
     */

  }, {
    key: "selectedItems",
    get: function get() {
      return this.inlineList.value.then(function (items) {
        return filterSelected(items);
      }).then(function (items) {
        return flattenArray(items, 1).filter(function (item) {
          return item !== null;
        });
      });
    }
  }, {
    key: "menuHeaderDisplay",
    get: function get() {
      return this._contentHeader.display;
    }
    /**
     * whether or not the menu header is visible
     * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
     * @returns {Promise<Boolean>} isHeaderVisible
     */

  }, {
    key: "isHeaderVisible",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(HEADER_INVISIBLE)).then(function () {
          return false;
        })["catch"](function () {
          return true;
        });
      });
    }
    /**
     * whether or not the auto dividers are inserted
     * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
     * @returns {Promise<Boolean>} isAutoDividersInserted
     */

  }, {
    key: "isAutoDividersInserted",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return classNames.includes(AUTO_DIVIDERS);
      });
    }
  }]);

  return MenuPage;
}(_UIComponent["default"]);

exports["default"] = MenuPage;