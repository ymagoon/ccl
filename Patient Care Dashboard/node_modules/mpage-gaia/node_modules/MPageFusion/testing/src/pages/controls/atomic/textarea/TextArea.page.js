"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-TextArea";
/**
 * The TextAreaPage class
 * @class module:MPageFusion/testing.atomic.textArea.TextAreaPage
 *
 * @example
 * const textArea = new TextAreaPage(driver);
 * textArea.get("placeholder")
 *     .then((value) => {
 *         assert(value === "Enter a Value");
 *    });
 */

var TextAreaPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(TextAreaPage, _UIComponentPage);

  function TextAreaPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = TextAreaPage.prototype;

  /**
   * textArea field is focused
   * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.focus = function focus() {
    return this.getNestedElement("textarea").then(function (textAreaElement) {
      return textAreaElement.click();
    });
  }
  /**
   * whether the textArea field is focused
   * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
   * @returns {Promise<boolean>} isFocused
   */
  ;

  /**
   * Blur event is triggerd on textArea field if it is already in focus
   * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.blur = function blur() {
    return this.getNestedElement("textarea").then(function (textAreaElement) {
      return textAreaElement.sendKeys(_seleniumWebdriver.Key.TAB);
    });
  }
  /**
   * sendkeys to the textArea field
   * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
   * @param {String} text - the input text
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.enterText = function enterText(text) {
    return this.getNestedElement("textarea").then(function (textAreaElement) {
      return textAreaElement.sendKeys(text);
    });
  }
  /**
   * clears text from the textArea field
   * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clearText = function clearText() {
    return this.getNestedElement("textarea").then(function (textAreaElement) {
      return textAreaElement.sendKeys(_seleniumWebdriver.Key.CONTROL + "a").then(function () {
        return textAreaElement.sendKeys(_seleniumWebdriver.Key.DELETE);
      });
    });
  };

  _createClass(TextAreaPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * value of the textArea field
     * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
     * @returns {Promise<String>} value
     */

  }, {
    key: "value",
    get: function get() {
      return this.getNestedElement("pre > span").then(function (spanElement) {
        return spanElement.getAttribute("innerHTML");
      });
    }
    /**
     * placeholder of the textArea field
     * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
     * @returns {Promise<String>} placeholder
     */

  }, {
    key: "placeholder",
    get: function get() {
      return this.getNestedElement("textarea").then(function (textAreaElement) {
        return textAreaElement.getAttribute("placeholder");
      });
    }
    /**
     * whether the textArea field is read only
     * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
     * @returns {Promise<boolean>} isReadOnly
     */

  }, {
    key: "isReadOnly",
    get: function get() {
      return this.getNestedElement("textarea").then(function (textAreaElement) {
        return textAreaElement.getAttribute("readonly");
      }).then(function (isReadOnly) {
        return Boolean(isReadOnly);
      });
    }
    /**
     * whether the textArea field is disabled
     * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
     * @returns {Promise<boolean>} isDisabled
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this.getNestedElement("textarea").then(function (textAreaElement) {
        return textAreaElement.getAttribute("disabled");
      }).then(function (isDisabled) {
        return Boolean(isDisabled);
      });
    }
  }, {
    key: "isFocused",
    get: function get() {
      var _this = this;

      return this.getNestedElement("textarea").then(function (textAreaElement) {
        return _this.driver.switchTo().activeElement().then(function (activeElement) {
          return _seleniumWebdriver.WebElement.equals(textAreaElement, activeElement);
        });
      });
    }
  }]);

  return TextAreaPage;
}(_UIComponent["default"]);

exports["default"] = TextAreaPage;