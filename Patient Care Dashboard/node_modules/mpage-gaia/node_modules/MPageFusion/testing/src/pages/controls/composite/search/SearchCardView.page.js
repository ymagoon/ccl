"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _ContentHeader = _interopRequireDefault(require("../../atomic/header/content-header/ContentHeader.page"));

var _SearchListItem = _interopRequireDefault(require("./SearchListItem.page"));

var _List = _interopRequireDefault(require("../../../helpers/List"));

var _TextBox = _interopRequireDefault(require("../../atomic/textbox/TextBox.page"));

var _Button = _interopRequireDefault(require("../../atomic/button/Button.page"));

var _SvgIcon = _interopRequireDefault(require("../../atomic/icon/svg/SvgIcon.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = "[data-popup-pane-id^=popup_]";
var SEARCH_BAR_SELECTOR = ".mpageui-SearchBar";
var SEARCH_LIST_SELECTOR = ".mpageui-SearchList";
var SEARCH_POPUP_SELECTOR = ".mpageui-Popup-content";
var SEARCH_TEXT_CLEAR_ICON_SELECTOR = ".mpageui-SearchTextClear-icon";
/**
 * The SearchCardViewPage class
 * @class module:MPageFusion/test.composite.search.SearchCardViewPage
 * @private
 */

var SearchCardViewPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(SearchCardViewPage, _UIComponentPage);

  function SearchCardViewPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = SearchCardViewPage.prototype;

  /**
   * @desc function to enter the text into search bar
   * @memberOf module:MPageFusion/test.composite.search.SearchCardViewPage
   * @param {String} text - the input text
   * @returns {Promise} resolves when the action is completed
   */
  _proto.enterText = function enterText(text) {
    return this._textBox.enterText(text);
  }
  /**
   * @desc function to clear the entered text in search bar.
   * @memberOf module:MPageFusion/test.composite.search.SearchCardViewPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clearText = function clearText() {
    return this._textBox.clearText();
  }
  /**
   * @desc function to click the search icon in search bar
   * @memberOf module:MPageFusion/testing.composite.search.SearchCardViewPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.click = function click() {
    return this._searchButton.click();
  }
  /**
   * @desc function to focus the search bar
   * @memberOf module:MPageFusion/test.composite.search.SearchCardViewPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.focus = function focus() {
    return this._textBox.focus();
  }
  /**
   * @desc function to clear the text by clicking the clear icon in search bar.
   * @memberOf module:MPageFusion/testing.composite.search.SearchCardViewPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clear = function clear() {
    return this._clearIcon.click();
  }
  /**
   * @desc function to close the popup pane.
   * @memberOf module:MPageFusion/testing.composite.search.SearchCardViewPage
   * @returns {Promise} resolves when the action completes
   */
  ;

  _proto.close = function close() {
    return new _ContentHeader["default"](this.driver, {
      selectorList: this.selectorList
    }).leftAction.click();
  };

  _createClass(SearchCardViewPage, [{
    key: "elementSelector",

    /**
     * @desc uses data-popup-pane-id to get popup pane element
     * @private
     */
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
    * @desc function to get the  search button inside popup page
    * @returns {ButtonPage} instance of ButtonPage
    * @private
    */

  }, {
    key: "_searchButton",
    get: function get() {
      return new _Button["default"](this.driver, {
        selectorList: this.selectorList.concat(SEARCH_BAR_SELECTOR)
      });
    }
    /**
     * @desc function to get the  text box inside popup page
     * @returns {TextBoxPage} instance of TextBoxPage
     * @private
     */

  }, {
    key: "_textBox",
    get: function get() {
      return new _TextBox["default"](this.driver, {
        selectorList: this.selectorList.concat(SEARCH_BAR_SELECTOR)
      });
    }
    /**
     * @desc function to get the  clear icon of search inside popup page
     * @returns {SvgIconPage} instance of SvgIconPage
     * @private
     */

  }, {
    key: "_clearIcon",
    get: function get() {
      return new _SvgIcon["default"](this.driver, {
        selectorList: this.selectorList.concat(SEARCH_BAR_SELECTOR).concat(SEARCH_TEXT_CLEAR_ICON_SELECTOR)
      });
    }
    /**
     * @desc function returns placeholder text from the Search bar
     * @memberOf module:MPageFusion/test.composite.search.SearchCardViewPage
     * @returns {Promise<string>} placeholder text
     */

  }, {
    key: "placeholder",
    get: function get() {
      return this._textBox.placeholder;
    }
    /**
     * @desc function to check whether the search bar is focused
     * @memberOf module:MPageFusion/testing.composite.search.SearchCardViewPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isFocused",
    get: function get() {
      return this._textBox.isFocused;
    }
    /**
     * @desc function to get the value in the search bar
     * @memberOf module:MPageFusion/test.composite.search.SearchCardViewPage
     * @returns {Promise<String>} display text
     */

  }, {
    key: "value",
    get: function get() {
      return this._textBox.value;
    }
    /**
     * @desc function to get the item from the search list based on option(index)
     * @memberOf module:MPageFusion/testing.composite.search.SearchCardViewPage
     * @returns {List<module:MPageFusion/testing.composite.search.SearchPage.searchList>} searchList
     */

  }, {
    key: "option",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _SearchListItem["default"],
        selectorList: this.selectorList,
        containerSelector: SEARCH_POPUP_SELECTOR + " " + SEARCH_LIST_SELECTOR
      });
    }
  }]);

  return SearchCardViewPage;
}(_UIComponent["default"]);

exports["default"] = SearchCardViewPage;