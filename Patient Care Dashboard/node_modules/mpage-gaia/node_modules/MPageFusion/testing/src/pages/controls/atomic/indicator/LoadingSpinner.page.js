"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var NAMESPACE = "mpageui-LoadingSpinner-icon--"; // loading spinner does not have static CSS applied. It depends on the size given by the consumer.
// So using selector regex to get the element.

var ROOT_SELECTOR = "div[class*=" + NAMESPACE + "]";
var SIZE = {
  SMALL: "sm",
  MEDIUM: "md",
  LARGE: "lg",
  XSMALL: "xs"
};
/**
 * The LoadingSpinnerPage class
 * @class module:MPageFusion/testing.atomic.indicator.LoadingSpinnerPage
 *
 * @example
 * const loadingSpinner = new LoadingSpinnerPage(driver);
 * loadingSpinner.size => size of the spinner rendered
 */

var LoadingSpinnerPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(LoadingSpinnerPage, _UIComponentPage);

  function LoadingSpinnerPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  _createClass(LoadingSpinnerPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * size of the loading spinner
     * @memberOf module:MPageFusion/testing.atomic.indicator.LoadingSpinnerPage
     * @returns {String} if exists returns the size of the spinner, else empty string
     */

  }, {
    key: "size",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return Object.values(SIZE).find(function (style) {
          return classNames.includes("" + NAMESPACE + style);
        }) || "";
      });
    }
  }]);

  return LoadingSpinnerPage;
}(_UIComponent["default"]);

exports["default"] = LoadingSpinnerPage;