"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FormControl = _interopRequireDefault(require("../FormControl.page"));

var _Select = _interopRequireDefault(require("../../../atomic/select/Select.Page"));

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormSelect";
/**
 * The FormSelectPage class
 * @class module:MPageFusion/testing.composite.form.FormSelectPage
 *
 * @example
 * const formSelect = new FormSelectPage(driver);
 * formSelect.get("display")
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormSelectPage =
/*#__PURE__*/
function (_FormControlPage) {
  _inheritsLoose(FormSelectPage, _FormControlPage);

  function FormSelectPage(driver, options) {
    var _this;

    _this = _FormControlPage.call(this, driver, options) || this;
    _this._select = new _Select["default"](driver, {
      selectorList: _this.selectorList.concat(_helpers.CLASSES.RIGHT_COLUMN)
    });
    return _this;
  }

  var _proto = FormSelectPage.prototype;

  /**
   * Selects an option by the passed index
   * @param {String} index The index of the option element that needs to be selected.
   * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.selectByIndex = function selectByIndex(index) {
    return this._select.selectByIndex(index);
  }
  /**
   * Selects an option by the passed text
   * @param {String} text The text of the option element that needs to be selected.
   * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.selectByText = function selectByText(text) {
    return this._select.selectByText(text);
  };

  _createClass(FormSelectPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * whether the select is disabled
     * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
     * @returns {Promise<boolean>} isDisabled
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this._select.get("isDisabled");
    }
    /**
     * Gets the currently selected option in the select control
     * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
     * @returns {Promise<String>} resolves with a string containing the current option
     */

  }, {
    key: "value",
    get: function get() {
      return this._select.get("option");
    }
    /**
     * Gets the available options in the select control
     * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
     * @returns {Promise<Array<String>>} resolves with an array of strings containing all available options
     */

  }, {
    key: "options",
    get: function get() {
      return this._select.get("options");
    }
    /**
     * returns the base Select page
     * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
     * @returns {SelectPage} selectPage
     */

  }, {
    key: "select",
    get: function get() {
      return this._select;
    }
  }]);

  return FormSelectPage;
}(_FormControl["default"]);

exports["default"] = FormSelectPage;