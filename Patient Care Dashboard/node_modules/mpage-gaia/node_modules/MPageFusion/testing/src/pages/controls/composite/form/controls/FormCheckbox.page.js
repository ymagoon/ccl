"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FormControl = _interopRequireDefault(require("../FormControl.page"));

var _Checkbox = _interopRequireDefault(require("../../../atomic/checkbox/Checkbox.page"));

var _seleniumWebdriver = require("selenium-webdriver");

var _helpers = require("../helpers");

var _ClinicalBadge = _interopRequireDefault(require("../../../atomic/badge/ClinicalBadge.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormCheckbox";
var LABEL = ".mpageui-FormCheckbox-label";
/**
 * The FormCheckboxPage class
 * @class module:MPageFusion/testing.composite.form.FormCheckboxPage
 *
 * @example
 * const formCheckbox = new FormCheckboxPage(driver);
 * formCheckbox.get("display")
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormCheckboxPage =
/*#__PURE__*/
function (_FormControlPage) {
  _inheritsLoose(FormCheckboxPage, _FormControlPage);

  function FormCheckboxPage(driver, options) {
    var _this;

    _this = _FormControlPage.call(this, driver, options) || this;
    _this._checkbox = new _Checkbox["default"](driver, {
      selectorList: _this.selectorList.concat(_helpers.CLASSES.RIGHT_COLUMN)
    });
    return _this;
  }

  var _proto = FormCheckboxPage.prototype;

  /**
   * Toggles the checkbox
   * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxPage
   * @returns {Promise} resolves when the action completes
   */
  _proto.toggle = function toggle() {
    return this._checkbox.click();
  };

  _createClass(FormCheckboxPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    } // override default display method because FormCheckbox doesn't have a regular form display

  }, {
    key: "display",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(LABEL));
      }).then(function (element) {
        return element.getText();
      });
    }
    /**
     * Gets the current values in the checkbox group
     * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxPage
     * @returns {Promise<Array>} resolves with an array of objects { display, isSelected }
     */

  }, {
    key: "value",
    get: function get() {
      return this._checkbox.get("isSelected");
    }
    /**
     * returns the base Checkbox page
     * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxPage
     * @returns {CheckboxPage} checkboxPage
     */

  }, {
    key: "checkbox",
    get: function get() {
      return this._checkbox;
    }
  }]);

  return FormCheckboxPage;
}(_FormControl["default"]);

exports["default"] = FormCheckboxPage;
FormCheckboxPage.CRITICALITY_TYPES = _ClinicalBadge["default"].TYPES;