"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _FlowsheetRow = _interopRequireDefault(require("./FlowsheetRow.page"));

var _List = _interopRequireDefault(require("../../../helpers/List"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Flowsheet-sectionContainer";
var HEADER = ".mpageui-Flowsheet-sectionHeader";
var ROW_CONTAINER = ".mpageui-Flowsheet-rowContainer";
/**
 * The FlowsheetSubsectionPage class
 * @alias module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection
 * @class FlowsheetSubsectionPage
 * @private
 */

var FlowsheetSubsection =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(FlowsheetSubsection, _UIComponentPage);

  function FlowsheetSubsection() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = FlowsheetSubsection.prototype;

  /**
   * whether or not the subsection is expanded
   * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection
   * @returns {Promise<boolean>} isExpanded
   */
  _proto.isExpanded = function isExpanded() {
    return this.getNestedElement(HEADER + "-wrapper").then(function (element) {
      return element.getAttribute("class");
    }).then(function (classNames) {
      return !classNames.includes("is-closed");
    });
  }
  /**
   * clicks the subsection header
   * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection
   * @returns {Promise} - resolves when the action has completed
   */
  ;

  _proto.click = function click() {
    return this.getNestedElement(HEADER).then(function (element) {
      return element.click();
    });
  }
  /**
   * expands the subsection
   * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection
   * @returns {Promise} - resolves when the action has completed
   */
  ;

  _proto.expand = function expand() {
    return this.getNestedElement(HEADER + "-wrapper").then(function (element) {
      return new Promise(function (resolve) {
        element.getAttribute("class").then(function (classNames) {
          if (!classNames.includes("is-closed")) {
            throw new Error("Flowsheet subsection not collapsed");
          }

          resolve(element);
        });
      });
    }).then(function (element) {
      return element.click();
    });
  }
  /**
   * collapses the subsection
   * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection
   * @returns {Promise} - resolves when the action has completed
   */
  ;

  _proto.collapse = function collapse() {
    return this.getNestedElement(HEADER + "-wrapper").then(function (element) {
      return new Promise(function (resolve) {
        element.getAttribute("class").then(function (classNames) {
          if (classNames.includes("is-closed")) {
            throw new Error("Flowsheet subsection not expanded");
          }

          resolve(element);
        });
      });
    }).then(function (element) {
      return element.click();
    });
  };

  _createClass(FlowsheetSubsection, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * gets the subsection header display
     * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection
     * @returns {Promise<string>} headerDisplay
     */

  }, {
    key: "headerDisplay",
    get: function get() {
      return this.getNestedElement(HEADER + " > span").then(function (element) {
        return element.getText();
      });
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection
     * @returns {List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.row>} row
     */

  }, {
    key: "row",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _FlowsheetRow["default"],
        selectorList: this.selectorList,
        containerSelector: ROW_CONTAINER
      });
    }
    /**
     * the subsection data
     * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection
     * @returns {Promise<object>} data
     */

  }, {
    key: "data",
    get: function get() {
      var _this = this;

      return this.isExpanded().then(function (isExpanded) {
        if (!isExpanded) {
          throw new Error("Cannot read data while there are collapsed subsections.");
        }

        return Promise.all([_this.headerDisplay, _this.row.all("data")]).then(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              headerDisplay = _ref2[0],
              rows = _ref2[1];

          return {
            headerDisplay: headerDisplay,
            rows: rows
          };
        });
      });
    }
  }]);

  return FlowsheetSubsection;
}(_UIComponent["default"]);

exports["default"] = FlowsheetSubsection;