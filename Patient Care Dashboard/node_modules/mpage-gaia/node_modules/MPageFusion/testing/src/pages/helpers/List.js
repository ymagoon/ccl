"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var range = function range(start, end) {
  return Array.from({
    length: end - start
  }, function (_, i) {
    return i + start;
  });
};
/**
 * @typedef {Function} module:MPageFusion/testing.helpers.list.List
 * @property {Function} all - gets all items in the list
 * @property {Function} count - gets the number of items in the list
 */

/**
 * Creates a list of UIComponentPage instances
 * @memberOf module:MPageFusion/testing.helpers.list
 *
 * @param {UIComponentPage} list - the UIComponentPage that owns the list items
 * @param {UIComponentPage} ListItemPage - the page object constructor for list items
 * @param {String|null} containerSelector - the css selector for the list container.
 *  It should be empty if the root element is also the list container
 * @param {Array} selectorList - the list of element selectors
 * @param {Function} [offset] - Optional function that receives the selector index and returns a modified index.
 * @param {Object} config - Additional configurations which are passed to the listItemPage while creating
 * @returns {List} list
 */


var makeList = function makeList(_ref) {
  var list = _ref.list,
      ListItemPage = _ref.itemPage,
      containerSelector = _ref.containerSelector,
      selectorList = _ref.selectorList,
      offset = _ref.offset,
      config = _ref.config;
  return Object.assign(function (index) {
    return new ListItemPage(list.driver, {
      selectorList: selectorList.concat(containerSelector || []),
      index: typeof offset === "function" ? offset(index) : index,
      config: config
    });
  }, {
    count: function count() {
      return list.getRootElement().then(function (element) {
        return element.findElements(_seleniumWebdriver.By.css((containerSelector || ":scope") + " > *"));
      }).then(function (elements) {
        return elements.length;
      });
    },
    all: function all(prop) {
      return list.getRootElement().then(function (element) {
        return element.findElements(_seleniumWebdriver.By.css((containerSelector || ":scope") + " > *"));
      }).then(function (elements) {
        return elements.length;
      }).then(function (count) {
        return prop ? Promise.all(range(0, count).map(function (i) {
          return new ListItemPage(list.driver, {
            selectorList: selectorList.concat(containerSelector || []),
            index: i,
            config: config
          })[prop];
        })) : range(0, count).map(function (i) {
          return new ListItemPage(list.driver, {
            selectorList: selectorList.concat(containerSelector || []),
            index: i,
            config: config
          }, i);
        });
      });
    }
  });
};

var _default = makeList;
exports["default"] = _default;