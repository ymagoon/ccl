"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _SelectGroupListButton = _interopRequireDefault(require("./SelectGroupListButton.Page"));

var _List = _interopRequireDefault(require("../../../helpers/List"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-List-selectgroup";
/**
 * The ListSelectGroupPage class
 * @class ListSelectGroupPage
 * @private
 */

var ListSelectGroupPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(ListSelectGroupPage, _UIComponentPage);

  function ListSelectGroupPage(driver, options) {
    return _UIComponentPage.call(this, driver, options) || this;
  }

  _createClass(ListSelectGroupPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * returns the nth SelectGroupListButton instance from the SelectGroup.
     * @returns {List<SelectGroupListButtonPage>} SelectGroupListButton page.
     */

  }, {
    key: "item",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _SelectGroupListButton["default"],
        selectorList: this.selectorList
      });
    }
    /**
     * Returns the value of the SelectGroup control as a collection of JSON objects.
     * @returns {Promise<Array<Object>>} value
     */

  }, {
    key: "value",
    get: function get() {
      var _this = this;

      return this.item.count().then(function (count) {
        if (!count) {
          return Promise.resolve([]);
        }

        return Promise.all(Array.from({
          length: count
        }, function (_, index) {
          return _this.item(index).get("value");
        })).then(function (values) {
          return {
            type: _helpers.GROUP_TYPES.SELECT_GROUP,
            count: count,
            items: values
          };
        });
      });
    }
  }]);

  return ListSelectGroupPage;
}(_UIComponent["default"]);

exports["default"] = ListSelectGroupPage;