"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../../UIComponent.page"));

var _List = _interopRequireDefault(require("../../../../helpers/List"));

var _CollaspeGroupItem = _interopRequireDefault(require("./CollaspeGroupItem.page"));

var _Menu = _interopRequireDefault(require("../../menu/Menu.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-CollapseGroup";
var OVERLAY_SELECTOR = ".mpageui-Popup-layover";
var COLLAPSE_BUTTON = ".mpageui-CollapseGroup-more";
var ARIA_HIDDEN = "aria-hidden";
/**
 * The CollapseGroupPage class
 * @class module:MPageFusion/testing.composite.button.CollapseGroupPage
 *
 * @example
 * const collapseGroupPage = new CollapseGroupPage(driver);
 * collapseGroupPage.items(1).itemContentSelectorList;
 */

var CollapseGroupPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(CollapseGroupPage, _UIComponentPage);

  function CollapseGroupPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  _createClass(CollapseGroupPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * gets the items
     * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
     * @returns {List<CollapseGroupItem>} items
     */

  }, {
    key: "items",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _CollaspeGroupItem["default"],
        selectorList: this.selectorList
      });
    }
    /**
     * returns the collapse Menu
     * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
     * @returns {module:MPageFusion/testing.composite.menu.Menu} collapseGroupMenu
     */

  }, {
    key: "collapseGroupMenu",
    get: function get() {
      return new _Menu["default"](this.driver);
    }
    /**
     * opens the collapse Menu
     * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
     * @returns {Promise} resolves when the action completes
     */

  }, {
    key: "collapseGroupMenuOpen",
    get: function get() {
      return this.getNestedElement(COLLAPSE_BUTTON).then(function (element) {
        return element.click();
      }).then(function () {
        return true;
      })["catch"](function () {
        return false;
      });
    }
    /**
     * closes the collapse Menu
     * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
     * @returns {Promise} resolves when the action completes
     */

  }, {
    key: "collapseGroupMenuClose",
    get: function get() {
      return this.driver.findElement(_seleniumWebdriver.By.css(OVERLAY_SELECTOR)).then(function (element) {
        return element.click();
      }).then(function () {
        return true;
      })["catch"](function () {
        return false;
      });
    }
    /**
     * checks whether collapse group menu button is displayed
     * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
     * @returns {Promise<Boolean>} isCollapseGroupMenuButtonDisplayed
     */

  }, {
    key: "isCollapseGroupMenuButtonDisplayed",
    get: function get() {
      return this.getNestedElement(COLLAPSE_BUTTON).then(function (element) {
        return element.getAttribute(ARIA_HIDDEN);
      }).then(function (element) {
        return element === null;
      });
    }
  }]);

  return CollapseGroupPage;
}(_UIComponent["default"]);

exports["default"] = CollapseGroupPage;