"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _seleniumWebdriver = require("selenium-webdriver");

var _ClinicalBadge = _interopRequireDefault(require("../../atomic/badge/ClinicalBadge.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var LABEL = ".mpageui-FormControl-title";
var REQUIRED_INDICATOR = ".mpageui-FormControl-required";
var HELPER_TEXT = ".mpageui-FormControl-text--helper";
var ERROR_TEXT = ".mpageui-FormControl-text--error";
var INLINE_LABEL = ".mpageui-FormControl--dual-column";
var CRITICALITY = ".mpageui-FormControl-text--criticality";
/**
 * The FormControlPage class
 * @class module:MPageFusion/testing.composite.form.FormControlPage
 * @abstract
 */

var FormControlPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(FormControlPage, _UIComponentPage);

  function FormControlPage(driver, options) {
    var _this;

    _this = _UIComponentPage.call(this, driver, options) || this;
    _this._clinicalBadge = new _ClinicalBadge["default"](driver, {
      selectorList: _this.selectorList.concat(CRITICALITY),
      useExactSelector: true
    });
    return _this;
  }
  /**
   * gets the display
   * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
   * @returns {Promise<String>} display
   */


  _createClass(FormControlPage, [{
    key: "display",
    get: function get() {
      return this.getNestedElement(LABEL).then(function (label) {
        return label ? label.getText() : "";
      }).then(function (display) {
        return display || "";
      });
    }
  }, {
    key: "value",
    get: function get() {
      // eslint-disable-line class-methods-use-this
      throw new Error("All form control page objects must implement a value method");
    }
    /**
     * whether the label is displayed inline with the control
     * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
     * @returns {Promise<Boolean>} isInline
     */

  }, {
    key: "isInline",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(INLINE_LABEL)).then(function () {
          return true;
        })["catch"](function () {
          return false;
        });
      });
    }
    /**
     * whether the required indicator is displayed
     * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
     * @returns {Promise<Boolean>} isRequired
     */

  }, {
    key: "isRequired",
    get: function get() {
      return this.getNestedElement(REQUIRED_INDICATOR).then(function (element) {
        return Boolean(element);
      });
    }
    /**
     * gets the helper text
     * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
     * @returns {Promise<String|null>} helperText
     */

  }, {
    key: "helperText",
    get: function get() {
      return this.getNestedElement(HELPER_TEXT).then(function (element) {
        return element ? element.getText() : "";
      }).then(function (display) {
        return display || "";
      });
    }
    /**
     * gets the error text
     * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
     * @returns {Promise<String>} errorText
     */

  }, {
    key: "errorText",
    get: function get() {
      return this.getNestedElement(ERROR_TEXT).then(function (element) {
        return element ? element.getText() : "";
      }).then(function (display) {
        return display || "";
      });
    }
    /**
     * gets the criticality type (e.g. high, low, abnormal, critical)
     * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
     * @returns {Promise<String>} criticality
     */

  }, {
    key: "criticality",
    get: function get() {
      var _this2 = this;

      return this.getNestedElement(CRITICALITY).then(function (element) {
        return element ? _this2._clinicalBadge.get("type") : "";
      });
    }
  }]);

  return FormControlPage;
}(_UIComponent["default"]);

exports["default"] = FormControlPage;
FormControlPage.CRICALITY_TYPES = _ClinicalBadge["default"].TYPES;