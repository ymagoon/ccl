"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _List = _interopRequireDefault(require("../../../helpers/List"));

var _Anchor = _interopRequireDefault(require("../../atomic/label/Anchor.page"));

var _Tags = _interopRequireDefault(require("./Tags.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var NAMESPACE = ".mpageui-TagList";
var SHOW_ALL_SELECTOR = NAMESPACE + "-all";
var SHOW_LESS_SELECTOR = NAMESPACE + "-preview";
var TAGS_SELECTOR = NAMESPACE + "-tags";
var SHOW_SELECTOR = NAMESPACE + "-show";
var ROOT_SELECTOR = NAMESPACE;
/**
 * Check that show all content is visible or not.
 * @param {TagListPage} tagListPage - The current instance of the tag list page object model
 * @returns {Promise<Boolean>} Boolean value stating whether the showAll is true
 * @private
 */

var isShowAllVisible = function isShowAllVisible(tagListPage) {
  return tagListPage.getRootElement().then(function (element) {
    return element.findElement(_seleniumWebdriver.By.css(SHOW_ALL_SELECTOR + " " + TAGS_SELECTOR));
  }).then(function (showAllElement) {
    return showAllElement.isDisplayed();
  })["catch"](function () {
    return false;
  });
};
/**
 * Check that show less content is visible or not.
 * @param {TagListPage} tagListPage - The current instance of the tag list page object model
 * @returns {Promise<Array>} Boolean value stating whether the showLess is true
 * @private
 */


var isShowLessVisible = function isShowLessVisible(tagListPage) {
  return tagListPage.getRootElement().then(function (element) {
    return element.findElement(_seleniumWebdriver.By.css(SHOW_LESS_SELECTOR));
  }).then(function (showLessElement) {
    return showLessElement.isDisplayed();
  })["catch"](function () {
    return false;
  });
};
/**
 * The TagList class
 * @class module:MPageFusion/testing.composite.entry.TagList
 *
 * @example
 * const tagList = new TagList(driver);
 * const list = await tagList.tags;
 * await list(0).get("display")) - give the tag label
 * await list(0).get("icon")) - gives the delete icon
 * const deleteIcon = await list(0).get("icon"));
 * await deleteIcon.click() - to delete the tag
 * const anchor = await tagList.showAllOrLessAnchor;
 * await anchor.click() - to click on showLess/showMore
 */


var TagListPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(TagListPage, _UIComponentPage);

  function TagListPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  _createClass(TagListPage, [{
    key: "elementSelector",

    /**
     * @private
     */
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * Returns the list of displayed tags
     * @memberOf module:MPageFusion/testing.composite.entry.TagList
     * @returns {Promise<List<Tags>>} Returns the list of displayed tags or empty array.
     */

  }, {
    key: "tags",
    get: function get() {
      var _this = this;

      return Promise.all([isShowAllVisible(this), isShowLessVisible(this)]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            isShowAllElementVisible = _ref2[0],
            isShowLessElementVisible = _ref2[1];

        return !(isShowAllElementVisible || isShowLessElementVisible) ? Promise.resolve([]) : Promise.resolve((0, _List["default"])({
          list: _this,
          itemPage: _Tags["default"],
          selectorList: _this.selectorList.concat(isShowAllElementVisible ? SHOW_ALL_SELECTOR + " " + TAGS_SELECTOR : "" + SHOW_LESS_SELECTOR)
        }));
      });
    }
    /**
     * Returns the showAll/Less anchor element
     * @memberOf module:MPageFusion/testing.composite.entry.TagList
     * @returns {Promise<Anchor>} Returns showAll/showLess anchor element
     */

  }, {
    key: "showAllOrLessAnchor",
    get: function get() {
      var _this2 = this;

      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(SHOW_ALL_SELECTOR + " " + SHOW_SELECTOR));
      }).then(function (anchorElement) {
        return anchorElement.isDisplayed();
      }) // checks whether display property is not none.
      .then(function (isDisplayed) {
        if (!isDisplayed) {
          throw new Error("showAllOrLessAnchor will be displayed only in mobile and tablet mode");
        }

        return new _Anchor["default"](_this2.driver, {
          selectorList: _this2.selectorList.concat(SHOW_ALL_SELECTOR + " " + SHOW_SELECTOR),
          // TagListControl does not use the atomic/label/Anchor control. It uses its own "a" element.
          useExactSelector: true
        });
      });
    }
  }]);

  return TagListPage;
}(_UIComponent["default"]);

exports["default"] = TagListPage;