"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../../UIComponent.page"));

var _PopupPaneHeader = _interopRequireDefault(require("./PopupPaneHeader.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var CONTENT_SELECTOR = ".mpageui-Popup-content";
var FOOTER_SELECTOR = ".mpageui-Popup-pane-footer";
var OVERLAY_SELECTOR = ".mpageui-Popup-layover";
/**
 * The PopupPanePage class
 * @alias module:MPageFusion/testing.composite.dialog.PopupPage.pane
 * @class PopupPanePage
 * @private
 */

var PopupPanePage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(PopupPanePage, _UIComponentPage);

  function PopupPanePage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  _createClass(PopupPanePage, [{
    key: "elementSelector",

    /*
       using custom element selector to get pane element because
       the popup pane is not nested within the root popup div
     */
    get: function get() {
      var _this = this;

      return function (prefix) {
        return _this.driver.findElement(_seleniumWebdriver.By.css(prefix)).then(function (element) {
          return element.getAttribute("data-popup-id");
        }).then(function (popupId) {
          return "[data-popup-pane-id=\"" + popupId + "\"]";
        });
      };
    }
  }, {
    key: "contentSelectorList",
    get: function get() {
      return this.selectorList.concat(CONTENT_SELECTOR);
    }
  }, {
    key: "header",
    get: function get() {
      return new _PopupPaneHeader["default"](this.driver, {
        selectorList: this.selectorList
      });
    }
  }, {
    key: "footerSelectorList",
    get: function get() {
      return this.selectorList.concat(FOOTER_SELECTOR);
    }
  }, {
    key: "overlay",
    get: function get() {
      var _this2 = this;

      return {
        click: function click() {
          return _this2.getRootElement().then(function (element) {
            return element.findElement(_seleniumWebdriver.By.css(OVERLAY_SELECTOR));
          }).then(function (element) {
            return element.click();
          });
        }
      };
    }
  }]);

  return PopupPanePage;
}(_UIComponent["default"]);

exports["default"] = PopupPanePage;