"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-ContentDecorator";
var IS_HOVERABLE = "mpageui-ContentDecorator--hover";
var LEFT_CONTENT = ".mpageui-ContentDecorator-side--left";
var RIGHT_CONTENT = ".mpageui-ContentDecorator-side--right";
var CENTER_CONTENT = ".mpageui-ContentDecorator-center";
var CENTER_CONTENT_PADDING = ".mpageui-ContentDecorator-center--padding";
var CONTENT_ALIGNMENT = "mpageui-ContentDecorator-side--vertical-align";
var IS_SELECTED = "is-selected";
var TYPES = {
  CENTER: "center",
  TOP: "top"
};
/**
 * The ContentDecoratorPage class
 * @class module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
 *
 * @example
 * const contentDecorator = new ContentDecoratorPage(driver);
 */

var ContentDecoratorPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(ContentDecoratorPage, _UIComponentPage);

  function ContentDecoratorPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = ContentDecoratorPage.prototype;

  /**
   * clicks the HideShow content decorator
   * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.click = function click() {
    return this.getRootElement().then(function (element) {
      return element.findElement(_seleniumWebdriver.By.css(CENTER_CONTENT)).then(function (contentElement) {
        return contentElement.click();
      });
    });
  }
  /**
   * gets the content decorator left content selector list
   * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
   * @returns {Array} selector list
   */
  ;

  _createClass(ContentDecoratorPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * whether or not the contentDecorator is hoverable
     * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
     * @returns {Promise<boolean>} isHoverable
     */

  }, {
    key: "isHoverable",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return classNames.includes(IS_HOVERABLE);
      });
    }
    /**
     * Whether or not the content decorator is selected
     * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
     * @returns {Promise<boolean>} isSelected
     */

  }, {
    key: "isSelected",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return classNames.includes(IS_SELECTED);
      });
    }
    /**
     * Whether or not the center content decorator padding is present
     * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
     * @returns {Promise<boolean>} centerContentPadding
     */

  }, {
    key: "centerContentPadding",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(CENTER_CONTENT_PADDING)).then(function (paddingElement) {
          return Boolean(paddingElement);
        })["catch"](function () {
          return false;
        });
      });
    }
    /**
     * the left UIComponent is top aligned or center aligned
     * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
     * @returns {Promise<string>} leftContentVerticalAlign
     */

  }, {
    key: "leftContentVerticalAlign",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(LEFT_CONTENT)).then(function (leftElement) {
          return leftElement.getAttribute("class");
        }).then(function (classNames) {
          return Object.values(TYPES).find(function (type) {
            return classNames.includes(CONTENT_ALIGNMENT + "-" + type);
          }) || "";
        })["catch"](function () {
          return "Not Found";
        });
      });
    }
    /**
     * the right UIComponent is top aligned or center aligned
     * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
     * @returns {Promise<string>} rightContentVerticalAlign
     */

  }, {
    key: "rightContentVerticalAlign",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(RIGHT_CONTENT)).then(function (leftElement) {
          return leftElement.getAttribute("class");
        }).then(function (classNames) {
          return Object.values(TYPES).find(function (type) {
            return classNames.includes(CONTENT_ALIGNMENT + "-" + type);
          }) || "";
        })["catch"](function () {
          return "Not Found";
        });
      });
    }
    /**
     * left section content space is there or not
     * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
     * @returns {Promise<boolean>} addLeftContentSection
     */

  }, {
    key: "addLeftContentSection",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(LEFT_CONTENT)).then(function (leftElement) {
          return leftElement.getAttribute("class");
        }).then(function (expandElement) {
          return Boolean(expandElement);
        })["catch"](function () {
          return false;
        });
      });
    }
  }, {
    key: "leftContentSelectorList",
    get: function get() {
      return this.selectorList.concat(LEFT_CONTENT);
    }
    /**
     * gets the content decorator right content selector list
     * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
     * @returns {Array} selector list
     */

  }, {
    key: "rightContentSelectorList",
    get: function get() {
      return this.selectorList.concat(RIGHT_CONTENT);
    }
    /**
     * gets the content decorator center content selector list
     * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
     * @returns {Array} selector list
     */

  }, {
    key: "centerContentSelectorList",
    get: function get() {
      return this.selectorList.concat(CENTER_CONTENT);
    }
  }]);

  return ContentDecoratorPage;
}(_UIComponent["default"]);

exports["default"] = ContentDecoratorPage;