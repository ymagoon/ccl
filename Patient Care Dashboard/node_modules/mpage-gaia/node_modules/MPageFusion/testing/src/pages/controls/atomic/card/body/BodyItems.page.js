"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../../UIComponent.page"));

var _List = _interopRequireDefault(require("../../../../helpers/List"));

var _DualColumnSection = _interopRequireDefault(require(".././column/DualColumnSection.page"));

var _SingleColumnSection = _interopRequireDefault(require(".././column/SingleColumnSection.page"));

var _SvgIcon = _interopRequireDefault(require("../../icon/svg/SvgIcon.page"));

var _cardHelper = require("../helper/cardHelper.page");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var SELECTOR_LIST = {
  ROOT_SELECTOR: ".mpageui-Card-base",
  CONTENT_SELECTOR: ".mpageui-Card-center-content",
  ACCESSORY_SELECTOR: ".mpageui-Card-accessory",
  LEFT_ACCESSORY: ".mpageui-Card-accessory--left",
  ALIGN_TOP_SELECTOR: ".mpageui-Card-accessory--align-top",
  RIGHT_ACCESSORY: ".mpageui-Card-accessory--right",
  DISCLOSURE_SELECTOR: ".mpageui-Card-progressive-disclosure",
  CONTENT_WRAPPER: ".mpageui-Card-content-wrapper"
};
var contentSelector;
/**
 * The BodyItems class
 * @class module:MPageFusion/test.atomic.card.CardPage.BodyItems
 */

var BodyItems =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(BodyItems, _UIComponentPage);

  function BodyItems() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  _createClass(BodyItems, [{
    key: "elementSelector",
    get: function get() {
      return SELECTOR_LIST.ROOT_SELECTOR;
    }
    /**
     * data content display
     * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
     * @returns {Promise<string>} display
     */

  }, {
    key: "display",
    get: function get() {
      return (0, _cardHelper.displayHelper)(this);
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage.BodyItems
     * @returns {List<module:MPageFusion/testing.atomic.card.CardPage.BodyItems>} bodyItems
     */

  }, {
    key: "dualColumnSection",
    get: function get() {
      return (0, _List["default"])((0, _cardHelper.makeListHelper)(this, _DualColumnSection["default"], this.selectorList, SELECTOR_LIST.CONTENT_SELECTOR));
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage.BodyItems
     * @returns {List<module:MPageFusion/testing.atomic.card.CardPage.BodyItems>} bodyItems
     */

  }, {
    key: "singleColumnSection",
    get: function get() {
      return (0, _List["default"])((0, _cardHelper.makeListHelper)(this, _SingleColumnSection["default"], this.selectorList, SELECTOR_LIST.CONTENT_SELECTOR));
    }
    /**
     * This is the array of data points to display in the card. Each item is a javascript object
     * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
     * @returns {Promise<Array>} Array<Object>
     */

  }, {
    key: "items",
    get: function get() {
      return this.selectorList.concat(SELECTOR_LIST.CONTENT_SELECTOR);
    }
    /**
     * Whether or not the progressive disclosure section (right arrow) should be displayed
     * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
     * @returns {Promise<Boolean>} true or false
     */

  }, {
    key: "hasProgressiveDisclosure",
    get: function get() {
      contentSelector = SELECTOR_LIST.CONTENT_WRAPPER + " " + SELECTOR_LIST.DISCLOSURE_SELECTOR;
      return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
        return element.findElement(_seleniumWebdriver.By.tagName("svg"));
      }).then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return !!classNames;
      })["catch"](function () {
        return false;
      });
    }
    /**
     * This is an optional icon to be displayed on the left side of the card
     * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
     * @returns {Promise<string>} className or null
     */

  }, {
    key: "leftAccessory",
    get: function get() {
      contentSelector = "" + SELECTOR_LIST.ACCESSORY_SELECTOR + SELECTOR_LIST.LEFT_ACCESSORY;
      return (0, _List["default"])((0, _cardHelper.makeListHelper)(this, _SvgIcon["default"], this.selectorList.concat(contentSelector)));
    }
    /**
     * This determines whether the left accessory is top aligned or center aligned
     * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
     * @returns {Promise<Boolean>} true or false
     */

  }, {
    key: "leftAccessoryTopAlign",
    get: function get() {
      contentSelector = "" + SELECTOR_LIST.ACCESSORY_SELECTOR + SELECTOR_LIST.LEFT_ACCESSORY;
      return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
        return Boolean(element);
      });
    }
    /**
     * This is an optional icon to be displayed on the right side of the card
     * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
     * @returns {Promise<String>} className
     */

  }, {
    key: "rightAccessory",
    get: function get() {
      contentSelector = "" + SELECTOR_LIST.ACCESSORY_SELECTOR + SELECTOR_LIST.RIGHT_ACCESSORY;
      return (0, _List["default"])((0, _cardHelper.makeListHelper)(this, _SvgIcon["default"], this.selectorList.concat(contentSelector)));
    }
    /**
     * This determines whether the right accessory is top aligned or center aligned
     * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
     * @returns {Promise<Boolean>} true or false
     */

  }, {
    key: "rightAccessoryTopAlign",
    get: function get() {
      contentSelector = "" + SELECTOR_LIST.ACCESSORY_SELECTOR + SELECTOR_LIST.RIGHT_ACCESSORY + SELECTOR_LIST.ALIGN_TOP_SELECTOR;
      return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
        return Boolean(element);
      });
    }
  }]);

  return BodyItems;
}(_UIComponent["default"]);

exports["default"] = BodyItems;