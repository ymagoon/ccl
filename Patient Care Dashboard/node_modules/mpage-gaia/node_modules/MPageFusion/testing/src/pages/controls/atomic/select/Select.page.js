"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = "mpageui-Select-wrapper";
var TYPE = {
  MULTI_ITEM: "select",
  SINGLE_ITEM: "span"
};
/**
 * Returns the tag name of the select control
 * @param {SelectPage} selectPage The current instance of the select page object model
 * @returns {Promise<string>} the type of the select control
 * @private
 */

var getTagName = function getTagName(selectPage) {
  return selectPage.getRootElement().then(function (element) {
    return element.getTagName();
  });
};
/**
 * Returns the text of the options nested in the select control
 * @param {SelectPage} selectPage The current instance of the select page object model
 * @returns {Promise<Array<string>>} options text
 * @private
 */


var getOptions = function getOptions(selectPage) {
  return selectPage.getNestedElements("option").then(function (options) {
    return Promise.all(options.map(function (option) {
      return option.getText();
    }));
  });
};
/**
 * Returns the text inside the span of the select control
 * @param {SelectPage} selectPage The current instance of the select page object model
 * @returns {Promise<Array<string>>} options text
 * @private
 */


var getText = function getText(selectPage) {
  return selectPage.getRootElement().then(function (element) {
    return element.getText();
  });
};
/**
 * The SelectPage class
 * @class module:MPageFusion/testing.atomic.select.SelectPage
 *
 * @example
 * const select = new SelectPage(driver);
 * assert(select.option === "Colorado");
 * select.selectByIndex(1);
 * select.selectByText("Missouri");
 */


var SelectPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(SelectPage, _UIComponentPage);

  function SelectPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = SelectPage.prototype;

  /**
   * Selects an option by the passed index
   * @param {String} index The index of the option element that needs to be selected.
   * @memberOf module:MPageFusion/testing.atomic.button.SelectPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.selectByIndex = function selectByIndex(index) {
    return this.getNestedElement("option:nth-child(" + (index + 1) + ")").then(function (option) {
      return option.click();
    });
  }
  /**
   * Selects an option by the passed text
   * @param {String} text The text of the option element that needs to be selected.
   * @memberOf module:MPageFusion/testing.atomic.button.SelectPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.selectByText = function selectByText(text) {
    var _this = this;

    return this.get("options").then(function (options) {
      return _this.selectByIndex(options.indexOf(text));
    });
  };

  _createClass(SelectPage, [{
    key: "elementSelector",
    get: function get() {
      return "." + ROOT_SELECTOR;
    }
    /**
     * The available options in the select
     * @memberOf module:MPageFusion/testing.atomic.select.SelectPage
     * @returns {Promise<Array<string>>} options
     */

  }, {
    key: "options",
    get: function get() {
      var _this2 = this;

      return getTagName(this).then(function (type) {
        return type === TYPE.MULTI_ITEM ? getOptions(_this2) : getText(_this2).then(function (text) {
          return Promise.resolve([text]);
        });
      });
    }
    /**
     * The selected option of the select
     * @memberOf module:MPageFusion/testing.atomic.select.SelectPage
     * @returns {Promise<string>} option
     */

  }, {
    key: "option",
    get: function get() {
      var _this3 = this;

      return getTagName(this).then(function (type) {
        return type === TYPE.MULTI_ITEM ? _this3.getNestedElement("option:checked").then(function (option) {
          return option.getText();
        }) : getText(_this3);
      });
    }
    /**
     * whether the select is disabled
     * @memberOf module:MPageFusion/testing.atomic.select.SelectPage
     * @returns {Promise<boolean>} isDisabled
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("disabled");
      }).then(function (attribute) {
        return Boolean(attribute);
      });
    }
  }]);

  return SelectPage;
}(_UIComponent["default"]);

exports["default"] = SelectPage;