"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _TextBox = _interopRequireDefault(require("../../atomic/textbox/TextBox.page"));

var _Button = _interopRequireDefault(require("../../atomic/button/Button.page"));

var _SvgIcon = _interopRequireDefault(require("../../atomic/icon/svg/SvgIcon.page"));

var _SearchListItem = _interopRequireDefault(require("./SearchListItem.page"));

var _SearchCardView = _interopRequireDefault(require("./SearchCardView.page"));

var _List = _interopRequireDefault(require("../../../helpers/List"));

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Search";
var SEARCH_BAR_LARGE = ".mpageui-SearchBar";
var SEARCH_BAR_SMALL = ".mpageui-Search--small";
var SEARCH_PANE_SELECTOR = ".mpageui-SearchPane";
var SEARCH_LIST_SELECTOR = ".mpageui-SearchList";
var SEARCH_TEXT_CLEAR_ICON_SELECTOR = ".mpageui-SearchTextClear-icon";
var SEARCH_PANE_OVERLAY_SELECTOR = ".mpageui-SearchPane-overlay";
/**
 * The SearchPage class
 * @class module:MPageFusion/test.composite.search.SearchPage
 *
 * @example
 * const search = new SearchPage(driver);
 * expect(await search.placeholderText);
 * -- card view --
 * expect(await search.isCardViewDisabled);
 * await search.selectPopupPane()
 * expect(await search.pane.placeholderText);
 * expect(await search.pane.value);
 * await search.pane.focus()
 * await search.pane.click()
 */

var SearchPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(SearchPage, _UIComponentPage);

  function SearchPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = SearchPage.prototype;

  /**
   * enters text to the search bar
   * @memberOf module:MPageFusion/test.composite.search.SearchPage
   * @param {String} text -the input text
   * @returns {Promise} resolves when the action is completed
   */
  _proto.enterText = function enterText(text) {
    return this._textBox.enterText(text);
  }
  /**
   * clears text from the search bar textbox
   * @memberOf module:MPageFusion/test.composite.search.SearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clearText = function clearText() {
    return this._textBox.clearText();
  }
  /**
   * clicks the search icon button in the search bar
   * @memberOf module:MPageFusion/testing.composite.search.SearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.click = function click() {
    return this._button.click();
  }
  /**
   * focus the search bar
   * @memberOf module:MPageFusion/test.composite.search.SearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.focus = function focus() {
    return this._textBox.focus();
  }
  /**
   * Whether the search bar is blur
   * @memberOf module:MPageFusion/testing.composite.search.SearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.blur = function blur() {
    return this._textBox.blur();
  }
  /**
   * clicks the close indicator in the search bar to clear text
   * @memberOf module:MPageFusion/testing.composite.search.SearchPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clear = function clear() {
    return this._icon.click();
  }
  /**
   * clicks on the search list overlay
   * @memberOf module:MPageFusion/testing.composite.search.SearchPage
   * @returns {Promise} resolves when the action completes
   */
  ;

  _proto.clickOut = function clickOut() {
    var _this = this;

    return this.get("isOpen").then(function (isOpen) {
      if (!isOpen) {
        throw new Error("Search list is closed");
      }

      return _this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(SEARCH_PANE_OVERLAY_SELECTOR));
      }).then(function (element) {
        return element.click();
      });
    });
  }
  /**
   * selects the card view PopupPane.
   * When search bar is loaded in card view, it is wrapped inside small-search bar class.
   * When small search bar is clicked, it creates a new search bar wrapped inside the popup pane.
   * To get inside the popup pane,
   * we need to explicitly call the selectPopupPane before calling any pane functions
   * @memberOf module:MPageFusion/testing.composite.search.SearchPage
   * @returns {Promise} resolves when the action completes
   */
  ;

  _proto.selectPopupPane = function selectPopupPane() {
    return this._cardButton.click();
  }
  /**
   * Returns isFocused prop
   * @memberOf module:MPageFusion/testing.composite.search.SearchPage
   * @returns {Promise<boolean>} true or false
   */
  ;

  _createClass(SearchPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
  }, {
    key: "_button",
    get: function get() {
      return new _Button["default"](this.driver, {
        selectorList: this.selectorList
      });
    }
  }, {
    key: "_cardButton",
    get: function get() {
      return new _Button["default"](this.driver, {
        selectorList: this.selectorList.concat(SEARCH_BAR_SMALL)
      });
    }
  }, {
    key: "_cardTextBox",
    get: function get() {
      return new _TextBox["default"](this.driver, {
        selectorList: this.selectorList.concat(SEARCH_BAR_SMALL)
      });
    }
  }, {
    key: "_textBox",
    get: function get() {
      return new _TextBox["default"](this.driver, {
        selectorList: this.selectorList
      });
    }
  }, {
    key: "_icon",
    get: function get() {
      return new _SvgIcon["default"](this.driver, {
        selectorList: this.selectorList.concat(SEARCH_TEXT_CLEAR_ICON_SELECTOR)
      });
    }
    /**
     * whether the search bar is focused
     * @memberOf module:MPageFusion/testing.composite.search.SearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isFocused",
    get: function get() {
      return this._textBox.isFocused;
    }
    /**
     * returns placeholder text from the Search bar
     * @memberOf module:MPageFusion/test.composite.search.SearchPage
     * @returns {Promise<string>} placeholder text
     */

  }, {
    key: "placeholder",
    get: function get() {
      return this._textBox.placeholder;
    }
    /**
     * the value in the textbox
     * @memberOf module:MPageFusion/test.composite.search.SearchPage
     * @returns {Promise<String>} display text
     */

  }, {
    key: "value",
    get: function get() {
      return this._textBox.value;
    }
    /**
     * whether the search list is displayed
     * @memberOf module:MPageFusion/testing.composite.search.SearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isOpen",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(SEARCH_PANE_SELECTOR));
      }).then(function () {
        return true;
      })["catch"](function () {
        return false;
      });
    }
    /**
     * returns the searchBar width
     * @memberOf module:MPageFusion/testing.composite.search.SearchPage
     * @returns {Number} Search bar width
     */

  }, {
    key: "searchBarWidth",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(SEARCH_BAR_LARGE));
      }).then(function (searchBar) {
        return searchBar.getSize();
      }).then(function (searchBarSize) {
        return searchBarSize.width - 2;
      });
    }
    /**
     * returns the searchPane width
     * @memberOf module:MPageFusion/testing.composite.search.SearchPage
     * @returns {Number} Search pane width
     */

  }, {
    key: "searchPaneWidth",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(SEARCH_PANE_SELECTOR));
      }).then(function (searchPane) {
        return searchPane.getSize();
      }).then(function (paneSize) {
        return paneSize.width;
      });
    }
    /**
     * returns the item from the search list based on option(index)
     * @memberOf module:MPageFusion/testing.composite.search.SearchPage
     * @returns {List<module:MPageFusion/testing.composite.search.SearchPage.searchList>} searchList
     */

  }, {
    key: "option",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _SearchListItem["default"],
        selectorList: this.selectorList,
        containerSelector: SEARCH_PANE_SELECTOR + " " + SEARCH_LIST_SELECTOR
      });
    }
    /**
     * whether the search bar is disabled
     * @memberOf module:MPageFusion/testing.composite.search.SearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return Promise.all([this._textBox.isDisabled, this._button.isDisabled]).then(function (results) {
        return Boolean(results[0] && results[1]);
      });
    }
    /**
     * whether the search bar is disabled in card view
     * @memberOf module:MPageFusion/testing.composite.search.SearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isCardViewDisabled",
    get: function get() {
      return Promise.all([this._cardTextBox.isDisabled, this._cardButton.isDisabled]).then(function (results) {
        return Boolean(results[0] && results[1]);
      });
    }
    /**
     * returns the card view popup pane
     * @memberOf module:MPageFusion/testing.composite.search.SearchPage
     * @returns {SearchCardViewPage} instance of SearchCardView page
     */

  }, {
    key: "pane",
    get: function get() {
      return new _SearchCardView["default"](this.driver);
    }
  }, {
    key: "hasFocus",
    get: function get() {
      return this.isFocused;
    }
  }]);

  return SearchPage;
}(_UIComponent["default"]);

exports["default"] = SearchPage;