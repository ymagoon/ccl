"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _List = _interopRequireDefault(require("../../../helpers/List"));

var _BodyItems = _interopRequireDefault(require("./body/BodyItems.page"));

var _CommentItems = _interopRequireDefault(require("./comment/CommentItems.Page"));

var _FooterItems = _interopRequireDefault(require("./footer/FooterItems.page"));

var _FooterActions = _interopRequireDefault(require("./footer/FooterActions.Page"));

var _cardHelper = require("./helper/cardHelper.Page");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var SELECTOR_LIST = {
  ROOT_SELECTOR: ".mpageui-Card",
  BODY_CONTENT_WRAPPER: ".mpageui-Card-content-wrapper",
  FOOTER_SELECTOR: ".mpageui-Card-footer",
  FOOTER_CONTENT_WRAPPER: ".mpageui-Card-footer-content-wrapper",
  FOOTER_ACTION_WRAPPER: ".mpageui-Card-footer-actions-wrapper",
  FOOTER_ACTION: ".mpageui-Card-footer-actions",
  COLLAPSEGROUP_SELECTOR: ".mpageui-CollapseGroup",
  DUALCOLUMN_SELECTOR: "mpageui-Card-data-item--dualColumn",
  CENTERCONTENT_SELECTOR: ".mpageui-Card-center-content",
  HOVER_SELECTOR: "mpageui-Card--hover",
  CONTENT_WRAPPER_PAD: ".mpageui-Card-content-wrapper-pad",
  LEFT_STRIP: ".mpageui-Card--leftStrip",
  LOADING_SPINNER: ".mpageui-Card-footer-loading-spinner-wrapper"
};
var contentSelector;
/**
 * The CardPage class
 * @class module:MPageFusion/test.atomic.card.CardPage
 * @example
 * const card = new CardPage(driver);
 */

var CardPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(CardPage, _UIComponentPage);

  function CardPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  _createClass(CardPage, [{
    key: "elementSelector",
    get: function get() {
      return SELECTOR_LIST.ROOT_SELECTOR;
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage
     * @returns {List<module:MPageFusion/testing.atomic.card.CardPage.FooterItems>} footerItems
     */

  }, {
    key: "footerItems",
    get: function get() {
      contentSelector = SELECTOR_LIST.FOOTER_SELECTOR + " " + SELECTOR_LIST.FOOTER_CONTENT_WRAPPER;
      return (0, _List["default"])((0, _cardHelper.makeListHelper)(this, _FooterItems["default"], this.selectorList, contentSelector));
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage
     * @returns {List<module:MPageFusion/testing.atomic.card.CardPage.FooterActions>} footerActions
     */

  }, {
    key: "footerActions",
    get: function get() {
      contentSelector = (SELECTOR_LIST.FOOTER_SELECTOR + " " + SELECTOR_LIST.FOOTER_ACTION_WRAPPER + " ").concat(SELECTOR_LIST.FOOTER_ACTION + " " + SELECTOR_LIST.COLLAPSEGROUP_SELECTOR);
      return (0, _List["default"])((0, _cardHelper.makeListHelper)(this, _FooterActions["default"], this.selectorList, contentSelector));
    }
    /**
     * The list of action buttons to be displayed in the footer
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage
     * @returns {Promise<Array>} - Array<Object>
     */

  }, {
    key: "actions",
    get: function get() {
      return this.selectorList.concat(SELECTOR_LIST.FOOTER_SELECTOR).concat(SELECTOR_LIST.FOOTER_ACTION_WRAPPER).concat(SELECTOR_LIST.FOOTER_ACTION).concat(SELECTOR_LIST.COLLAPSEGROUP_SELECTOR);
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage
     * @returns {List<module:MPageFusion/testing.atomic.card.CardPage.BodyItems>} bodyItems
     */

  }, {
    key: "bodySection",
    get: function get() {
      return (0, _List["default"])((0, _cardHelper.makeListHelper)(this, _BodyItems["default"], this.selectorList, SELECTOR_LIST.BODY_CONTENT_WRAPPER));
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage
     * @returns {List<module:MPageFusion/testing.atomic.card.CardPage.CommentItems>} commentItems
     */

  }, {
    key: "commentSection",
    get: function get() {
      return (0, _List["default"])((0, _cardHelper.makeListHelper)(this, _CommentItems["default"], this.selectorList));
    }
    /**
     * Whether or not a two column view should be used
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage
     * @returns {Promise<Boolean>} - true or false
     */

  }, {
    key: "isDualColumn",
    get: function get() {
      return this.getNestedElement(SELECTOR_LIST.CENTERCONTENT_SELECTOR).then(function (element) {
        return element.findElement(_seleniumWebdriver.By.tagName("div"));
      }).then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return !!classNames.includes(SELECTOR_LIST.DUALCOLUMN_SELECTOR);
      });
    }
    /**
     * This determines whether or not a indicator is seen on hover
     * @memberOf module:MPageFusion/testing.atomic.card.CardPage
     * @returns {Promise<Boolean>} - true or false
     */

  }, {
    key: "isHovarable",
    get: function get() {
      return (0, _cardHelper.isIncludedClass)(this, SELECTOR_LIST.HOVER_SELECTOR);
    }
    /**
     * Whether or not a loading spinner will display in the footer
     * @memberOf module:MPageFusion/test.atomic.card.CardPage
     * @returns {Promise<Boolean>} - true or false.
     */

  }, {
    key: "isLoading",
    get: function get() {
      contentSelector = SELECTOR_LIST.FOOTER_SELECTOR + " " + SELECTOR_LIST.LOADING_SPINNER;
      return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
        return Boolean(element);
      });
    }
    /**
     * Whether or not the card is selected
     * @memberOf module:MPageFusion/test.atomic.card.CardPage
     * @returns {Promise<Boolean>} - true or false.
     */

  }, {
    key: "isSelected",
    get: function get() {
      return (0, _cardHelper.isIncludedClass)(this, "is-selected");
    }
    /**
     * Class name which has the background color for the left strip
     * @memberOf module:MPageFusion/test.atomic.card.CardPage
     * @returns {Promise<String|null>} - className or null.
     */

  }, {
    key: "leftStrip",
    get: function get() {
      contentSelector = "" + SELECTOR_LIST.BODY_CONTENT_WRAPPER + SELECTOR_LIST.CONTENT_WRAPPER_PAD + SELECTOR_LIST.LEFT_STRIP;
      return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
        return element ? SELECTOR_LIST.LEFT_STRIP : null;
      });
    }
    /**
     * This determines whether the card should be rendered as flat/un-styled
     * @memberOf module:MPageFusion/test.atomic.card.CardPage
     * @returns {Promise<Boolean>} - true or false.
     */

  }, {
    key: "isFlat",
    get: function get() {
      contentSelector = "" + SELECTOR_LIST.BODY_CONTENT_WRAPPER + SELECTOR_LIST.CONTENT_WRAPPER_PAD;
      return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
        return !element;
      });
    }
  }]);

  return CardPage;
}(_UIComponent["default"]);

exports["default"] = CardPage;