"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-TextBox";
/**
 * The TextBoxPage class
 * @class module:MPageFusion/testing.atomic.textbox.TextBoxPage
 *
 * @example
 * const textbox = new TextBoxPage(driver);
 * textbox.get("placeholder")
 *     .then((value) => {
 *         assert(value === "Enter a Value");
 *    });
 */

var TextBoxPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(TextBoxPage, _UIComponentPage);

  function TextBoxPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = TextBoxPage.prototype;

  /**
   * sendkeys to the textbox
   * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
   * @param {String} text - the input text
   * @returns {Promise} resolves when the action is completed
   */
  _proto.enterText = function enterText(text) {
    return this.getRootElement().then(function (element) {
      return element.sendKeys(text);
    });
  }
  /**
   * the value in the textbox
   * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
   * @returns {Promise<String>} display text
   */
  ;

  /**
   * clears text from the textbox
   * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.clearText = function clearText() {
    return this.getRootElement().then(function (element) {
      return element.sendKeys(_seleniumWebdriver.Key.CONTROL + "a").then(function () {
        return element.sendKeys(_seleniumWebdriver.Key.DELETE);
      });
    });
  }
  /**
   * click the textbox
   * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.focus = function focus() {
    return this.getRootElement().then(function (element) {
      return element.click();
    });
  }
  /**
   * whether the textbox is focused
   * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
   * @returns {Promise<boolean>} isFocused
   */
  ;

  /**
   * Whether the textbox is blur
   * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.blur = function blur() {
    return this.getRootElement().then(function (element) {
      return element.sendKeys(_seleniumWebdriver.Key.TAB);
    });
  }
  /**
   * the max length value
   * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
   * @returns {Promise<String>} display max length
   */
  ;

  _createClass(TextBoxPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * the placeholder
     * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
     * @returns {Promise<String>} display placeholder
     */

  }, {
    key: "placeholder",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("placeholder");
      });
    }
    /**
     * whether the textbox is disabled
     * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
     * @returns {Promise<boolean>} isDisabled
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("disabled");
      }).then(function (attribute) {
        return Boolean(attribute);
      });
    }
    /**
     * whether the textbox is read only
     * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
     * @returns {Promise<boolean>} isReadOnly
     */

  }, {
    key: "isReadOnly",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("readonly");
      }).then(function (attribute) {
        return Boolean(attribute);
      });
    }
  }, {
    key: "value",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("value");
      });
    }
  }, {
    key: "isFocused",
    get: function get() {
      var _this = this;

      return this.getRootElement().then(function (element) {
        return _this.driver.switchTo().activeElement().then(function (activeElement) {
          return _seleniumWebdriver.WebElement.equals(element, activeElement);
        })["catch"](function () {
          return false;
        });
      });
    }
  }, {
    key: "maxLength",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("maxlength");
      });
    }
  }]);

  return TextBoxPage;
}(_UIComponent["default"]);

exports["default"] = TextBoxPage;