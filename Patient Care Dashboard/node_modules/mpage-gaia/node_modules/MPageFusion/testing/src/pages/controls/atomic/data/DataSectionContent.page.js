"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-DataSection-cell";
var DATASECTION_LABEL = ".mpageui-DataSection-label";
var DATASECTION_TEXT = ".mpageui-DataSection-text";
var DATASECTION_CONTENT = ".mpageui-DataSection-content";
var LABEL_POSITION = {
  BELOW: "below"
};
var DEFAULT_SPAN_SIZE = 12;
/**
 * @class DataSectionCellPage
 * @alias module:MPageFusion/testing.atomic.data.DataSectionCellPage
 * @private
 */

var DataSectionCellPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(DataSectionCellPage, _UIComponentPage);

  function DataSectionCellPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  _createClass(DataSectionCellPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * the label of the data section
     * @memberOf module:MPageFusion/testing.atomic.dat.DataSectionCellPage
     * @returns {Promise<string>} label text
     */

  }, {
    key: "label",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(DATASECTION_LABEL)).then(function (labelElement) {
          return labelElement.getText();
        });
      });
    }
    /**
     * the text of the data section
     * @memberOf module:MPageFusion/testing.atomic.dat.DataSectionCellPage
     * @returns {Promise<string>} data section text
     */

  }, {
    key: "text",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(DATASECTION_TEXT)).then(function (textElement) {
          return textElement.getText();
        });
      });
    }
    /**
     * content selector list used inside data section cell
     * @memberOf module:MPageFusion/testing.atomic.dat.DataSectionCellPage
     * @returns {string} selector list of data section content
     */

  }, {
    key: "content",
    get: function get() {
      return this.selectorList.concat(DATASECTION_CONTENT);
    }
    /**
     * returns the label position
     * @memberOf module:MPageFusion/testing.atomic.dat.DataSectionCellPage
     * @returns {Promise<string>} the position if exists
     */

  }, {
    key: "labelPosition",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(DATASECTION_LABEL)).then(function (labelElement) {
          return labelElement.getAttribute("class");
        }).then(function (classNames) {
          return Object.values(LABEL_POSITION).find(function (labelPosition) {
            return classNames.includes("mpageui-DataSection-label--" + labelPosition);
          }) || "";
        });
      });
    }
    /**
     * returns the span value if applied inside data section cell. defaults to 12 as fallback
     * @memberOf module:MPageFusion/testing.atomic.dat.DataSectionCellPage
     * @returns {Number} numeric value for applied for data section cell.
     */

  }, {
    key: "span",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        var matchedClass = classNames.match(new RegExp("mpageui-u-flexgrid-col-(\\d+)", "g"));
        return matchedClass.length ? matchedClass[0].slice(-2).replace("-", "") : DEFAULT_SPAN_SIZE;
      });
    }
  }]);

  return DataSectionCellPage;
}(_UIComponent["default"]);

exports["default"] = DataSectionCellPage;