"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-List";
var INLINE_LIST_ITEM = ".mpageui-inlinelist-item";
/**
 * This function goes through the collection of values of the InlineList control and
 * merges the sublist values into the next object, i.e the sublist button value. This is done to
 * map the JSON structure with the actual UI.
 * @private
 * @param {Array<Object>} values The raw values of the InlineList's items.
 * @returns {Array<Object>} The processed and merged values.
 */

var getMergedValues = function getMergedValues(values) {
  var processedValues = [];
  var lastSubmenuIndex = -1;
  values.forEach(function (currentValue, index) {
    // If previous value was sublist
    if (lastSubmenuIndex >= 0) {
      // Extract and merge it with the current one
      currentValue.subList = processedValues.pop(); // Set the button display/menu title since they are shared

      currentValue.display = currentValue.display || currentValue.subList.title;
      currentValue.subList.title = currentValue.subList.title || currentValue.display; // Reset flag

      lastSubmenuIndex = -1;
    } // If current value is a sublist


    if (currentValue.type && currentValue.type === _helpers.GROUP_TYPES.SUBLIST) {
      lastSubmenuIndex = index; // Update the flag
    }

    processedValues.push(currentValue); // Store the current value
  });
  return processedValues;
};
/**
 * The InlineListPage class
 * @alias module:MPageFusion/testing.composite.list.InlineListPage
 * @class InlineListPage
 * @private
 */


var InlineListPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(InlineListPage, _UIComponentPage);

  function InlineListPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = InlineListPage.prototype;

  /**
   * Returns a page object for the item in the given index.
   * @memberOf module:MPageFusion/testing.composite.list.InlineListPage
   * @param {Number} index The index for which the page object is required.
   * @returns {Promise<UIComponentPage>} item
   */
  _proto.item = function item(index) {
    return this.items().then(function (items) {
      return items[index];
    });
  }
  /**
   * Returns a list of Page objects.
   * @memberOf module:MPageFusion/testing.composite.list.InlineListPage
   * @returns {Promise<Array<UIComponentPage>>} items
   */
  ;

  _proto.items = function items() {
    var _this = this;

    return this.getNestedElements(INLINE_LIST_ITEM).then(function (elements) {
      return Promise.all(elements.map(function (element) {
        return element.getAttribute("class");
      }));
    }).then(function (classes) {
      return (0, _helpers.createPageList)(classes, _this.driver, _this.selectorList);
    });
  }
  /**
   * Returns the value of the InlineList control as a collection of JSON objects.
   * @memberOf module:MPageFusion/testing.composite.list.InlineListPage
   * @returns {Promise<Array<Object>>} value
   */
  ;

  _createClass(InlineListPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
  }, {
    key: "value",
    get: function get() {
      return this.items().then(function (itemPages) {
        return Promise.all(itemPages.map(function (item) {
          return item.get("value");
        }));
      }).then(function (values) {
        return getMergedValues(values);
      });
    }
  }]);

  return InlineListPage;
}(_UIComponent["default"]);

exports["default"] = InlineListPage;
InlineListPage.ButtonTypes = _helpers.BUTTON_TYPES;
InlineListPage.GroupTypes = _helpers.GROUP_TYPES;