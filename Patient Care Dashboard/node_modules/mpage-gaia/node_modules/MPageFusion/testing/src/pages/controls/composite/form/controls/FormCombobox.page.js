"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FormControl = _interopRequireDefault(require("../FormControl.page"));

var _Combobox = _interopRequireDefault(require("../../combobox/Combobox.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormComboBox";
/**
 * The FormComboboxPage class
 * @class module:MPageFusion/testing.composite.form.FormComboboxPage
 *
 * @example
 * const formComboboxBar = new FormComboboxPage(driver);
 * formComboboxBar.option(1).display
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormComboboxPage =
/*#__PURE__*/
function (_FormControlPage) {
  _inheritsLoose(FormComboboxPage, _FormControlPage);

  function FormComboboxPage() {
    return _FormControlPage.apply(this, arguments) || this;
  }

  var _proto = FormComboboxPage.prototype;

  /**
   * blur the combobox
   * @memberOf module:MPageFusion/testing.composite.combobox.FormComboboxPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.blur = function blur() {
    return this.combobox.blur();
  }
  /**
   * enters text to the combobox
   * @memberOf module:MPageFusion/testing.composite.form.FormcomboboxPage
   * @param {String} text - the input text
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.enterText = function enterText(text) {
    return this.combobox.enterText(text);
  }
  /**
   * clears text from the combobox textbox
   * @memberOf module:MPageFusion/testing.composite.form.FormcomboboxPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clearText = function clearText() {
    return this.combobox.clearText();
  }
  /**
   * focuses the combobox
   * @memberOf module:MPageFusion/test.composite.combobox.FormComboboxPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.focus = function focus() {
    return this.combobox.focus();
  }
  /**
   * clicks the dropdown icon button
   * @memberOf module:MPageFusion/testing.composite.form.FormcomboboxPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.click = function click() {
    return this.combobox.click();
  };

  _createClass(FormComboboxPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
  }, {
    key: "combobox",
    get: function get() {
      return new _Combobox["default"](this.driver, {
        selectorList: this.selectorList
      });
    }
    /**
     * search list item
     * @memberOf module:MPageFusion/testing.composite.form.FormcomboboxPage
     * @returns {List<module:MPageFusion/testing.composite.search.SearchPage.searchList>} searchList
     */

  }, {
    key: "option",
    get: function get() {
      return this.combobox.option;
    }
    /**
     * whether the search bar is disabled
     * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this.combobox.isDisabled;
    }
    /**
     * returns placeholder text from the combobox
     * @memberOf module:MPageFusion/test.composite.combobox.FormComboboxPage
     * @returns {Promise<string>} placeholder text
     */

  }, {
    key: "placeholder",
    get: function get() {
      return this.combobox.placeholder;
    }
  }]);

  return FormComboboxPage;
}(_FormControl["default"]);

exports["default"] = FormComboboxPage;