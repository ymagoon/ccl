"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FormControl = _interopRequireDefault(require("../FormControl.page"));

var _TextArea = _interopRequireDefault(require("../../../atomic/textarea/TextArea.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormTextArea";
/**
 * The FormTextAreaPage class
 * @class module:MPageFusion/testing.composite.form.FormTextAreaPage
 *
 * @example
 * const formTextArea = new FormTextAreaPage(driver);
 * formTextArea.get("display")
 *     .then((display) => {
 *         assert(display).equals("Sample TextArea Label");
 *     });
 */

var FormTextAreaPage =
/*#__PURE__*/
function (_FormControlPage) {
  _inheritsLoose(FormTextAreaPage, _FormControlPage);

  function FormTextAreaPage(driver, options) {
    var _this;

    _this = _FormControlPage.call(this, driver, options) || this;
    _this._textarea = new _TextArea["default"](driver, {
      selectorList: _this.selectorList
    });
    return _this;
  }

  var _proto = FormTextAreaPage.prototype;

  /**
   * textArea field is focused
   * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.focus = function focus() {
    return this._textarea.focus();
  }
  /**
   * whether the textArea field is focused
   * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
   * @returns {Promise<boolean>} isFocused
   */
  ;

  /**
   * Blur event is triggerd on textArea field if it is already in focus
   * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.blur = function blur() {
    return this._textarea.blur();
  }
  /**
   * sendkeys to the textArea field
   * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
   * @param {String} text - the input text
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.enterText = function enterText(text) {
    return this._textarea.enterText(text);
  }
  /**
   * clears text from the textArea field
   * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clearText = function clearText() {
    return this._textarea.clearText();
  };

  _createClass(FormTextAreaPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * value of the textArea field
     * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
     * @returns {Promise<String>} value
     */

  }, {
    key: "value",
    get: function get() {
      return this._textarea.value;
    }
    /**
     * placeholder of the textArea field
     * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
     * @returns {Promise<String>} placeholder
     */

  }, {
    key: "placeholder",
    get: function get() {
      return this._textarea.placeholder;
    }
    /**
     * whether the textArea field is read only
     * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
     * @returns {Promise<boolean>} isReadOnly
     */

  }, {
    key: "isReadOnly",
    get: function get() {
      return this._textarea.isReadOnly;
    }
    /**
     * whether the textArea field is disabled
     * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
     * @returns {Promise<boolean>} isDisabled
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this._textarea.isDisabled;
    }
  }, {
    key: "isFocused",
    get: function get() {
      return this._textarea.isFocused;
    }
  }]);

  return FormTextAreaPage;
}(_FormControl["default"]);

exports["default"] = FormTextAreaPage;