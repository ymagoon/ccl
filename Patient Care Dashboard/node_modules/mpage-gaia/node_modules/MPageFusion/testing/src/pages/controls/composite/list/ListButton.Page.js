"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _helpers = require("../../atomic/icon/svg/helpers");

var _seleniumWebdriver = require("selenium-webdriver");

var _helpers2 = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-ListButton";
var BUTTON_ENABLED = "mpageui-ListButton--enabled";
var BUTTON_TYPE_SUBLIST = "mpageui-Button--sublist";
var BUTTON_TYPE_SELECTABLE = "mpageui-Button--listselect";
var BUTTON_TYPE_SELECT = "mpageui-listselectgroup-item";
/**
 * The ListButtonPage class
 * @class ListButtonPage
 * @private
 */

var ListButtonPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(ListButtonPage, _UIComponentPage);

  function ListButtonPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = ListButtonPage.prototype;

  /**
   * Clicks the button
   * @returns {Promise} Resolves when the action is complete
   */
  _proto.click = function click() {
    return this.getRootElement().then(function (element) {
      return element.click();
    });
  };

  _createClass(ListButtonPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * The display on the button
     * @returns {Promise<String>} display
     */

  }, {
    key: "display",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getText();
      });
    }
    /**
     * The icon on the button
     * @returns {Promise<String>} icon
     */

  }, {
    key: "icon",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(".mpageui-SvgIcon"));
      }).then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        var iconClass = classNames.split(/\s+/).find(function (className) {
          return className.includes("mpageui-SvgIcon-");
        });
        return _helpers.classTypeMap[iconClass];
      })["catch"](function () {
        return "";
      });
    }
    /**
     * Whether the button is enabled or not
     * @returns {Promise<Boolean>} isEnabled
     */

  }, {
    key: "isEnabled",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return classNames.includes(BUTTON_ENABLED);
      });
    }
    /**
     * Whether the button is selected or not
     * @returns {Promise<Boolean>} isSelected
     */

  }, {
    key: "isSelected",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("aria-selected");
      }).then(function (attribute) {
        return Boolean(attribute);
      });
    }
    /**
     * The type of the button
     * @returns {Promise<String>} type
     */

  }, {
    key: "type",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        if (classNames.includes(BUTTON_TYPE_SELECTABLE)) {
          if (classNames.includes(BUTTON_TYPE_SELECT)) {
            return _helpers2.BUTTON_TYPES.SELECT;
          }

          return _helpers2.BUTTON_TYPES.TOGGLE;
        }

        if (classNames.includes(BUTTON_TYPE_SUBLIST)) {
          return _helpers2.BUTTON_TYPES.SUBLIST;
        }

        return _helpers2.BUTTON_TYPES.LIST;
      });
    }
    /**
     * The object representing the state of the button
     * @returns {Promise<Object>} value
     */

  }, {
    key: "value",
    get: function get() {
      return Promise.all([this.get("display"), this.get("type"), this.get("icon"), this.get("isEnabled"), this.get("isSelected")]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 5),
            display = _ref2[0],
            type = _ref2[1],
            icon = _ref2[2],
            isEnabled = _ref2[3],
            isSelected = _ref2[4];

        return {
          display: display,
          type: type,
          icon: icon,
          isEnabled: isEnabled,
          isSelected: isSelected
        };
      });
    }
  }]);

  return ListButtonPage;
}(_UIComponent["default"]);

exports["default"] = ListButtonPage;