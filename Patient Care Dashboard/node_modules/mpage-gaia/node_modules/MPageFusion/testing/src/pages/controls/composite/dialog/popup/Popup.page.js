"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../../UIComponent.page"));

var _PopupAnchor = _interopRequireDefault(require("./PopupAnchor.page"));

var _PopupPane = _interopRequireDefault(require("./PopupPane.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Popup";
/**
 * The PopupPage class
 * @class module:MPageFusion/testing.composite.dialog.PopupPage
 *
 * @example
 * const popup = new PopupPage(driver, "");
 * popup.open();
 *
 * const customPopupContent = new CustomPopupContentPage({
 *     selectorList: popup.pane.contentSelectorList
 * });
 */

var PopupPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(PopupPage, _UIComponentPage);

  function PopupPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = PopupPage.prototype;

  /**
   * opens the popup
   * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
   * @returns {Promise} resolves when the action completes
   */
  _proto.open = function open() {
    var _this = this;

    return this.get("isOpen").then(function (isOpen) {
      if (isOpen) {
        throw new Error("Popup is already open");
      }

      return _this._anchor.click();
    });
  }
  /**
   * closes the popup
   * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
   * @returns {Promise} resolves when the action completes
   */
  ;

  _proto.close = function close() {
    var _this2 = this;

    return this.get("isOpen").then(function (isOpen) {
      if (!isOpen) {
        throw new Error("Popup is already closed");
      }

      return _this2._pane.header.closeIcon.click();
    });
  }
  /**
   * clicks on the popup overlay
   * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
   * @returns {Promise} resolves when the action completes
   */
  ;

  _proto.clickOut = function clickOut() {
    var _this3 = this;

    return this.get("isOpen").then(function (isOpen) {
      if (!isOpen) {
        throw new Error("Popup is closed");
      }

      return _this3._pane.overlay.click();
    });
  };

  _createClass(PopupPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
  }, {
    key: "_anchor",
    get: function get() {
      return new _PopupAnchor["default"](this.driver, {
        selectorList: this.selectorList
      });
    }
  }, {
    key: "_pane",
    get: function get() {
      return new _PopupPane["default"](this.driver, {
        selectorList: this.selectorList
      });
    }
    /**
     * gets the popup pane content selector list
     * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
     * @returns {Array} selector list
     */

  }, {
    key: "contentSelectorList",
    get: function get() {
      return this._pane.contentSelectorList;
    }
    /**
     * gets the popup pane footer selector list
     * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
     * @returns {Array} selector list
     */

  }, {
    key: "footerSelectorList",
    get: function get() {
      return this._pane.footerSelectorList;
    }
    /**
     * gets the popup header display
     * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
     * @returns {Promise<string>} header display
     */

  }, {
    key: "headerDisplay",
    get: function get() {
      return this._pane.header.display;
    }
    /**
     * whether the popup is open
     * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
     * @returns {Promise<boolean>} isOpen
     */

  }, {
    key: "isOpen",
    get: function get() {
      return this._pane.isDisplayed();
    }
  }]);

  return PopupPage;
}(_UIComponent["default"]);

exports["default"] = PopupPage;