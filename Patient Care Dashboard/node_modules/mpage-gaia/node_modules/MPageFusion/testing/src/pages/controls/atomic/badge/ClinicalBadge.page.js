"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _SvgIcon = _interopRequireDefault(require("../icon/svg/SvgIcon.page"));

var _helpers = require("../icon/svg/helpers");

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-ClinicalBadge";
var DISPLAY = ".mpageui-ClinicalBadge-display";
var MODIFIED = ".mpageui-ClinicalBadge-modified-icon";
var ICON = ".mpageui-ClinicalBadge-icon";
var DISPLAY_TRUNCATE = "mpageui-ClinicalBadge-display-truncate";
/**
 * Criticality Types
 * @enum
 * @type {Object}
 * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
 */

var TYPES = {
  HIGH: "high",
  LOW: "low",
  CRITICAL: "critical",
  ABNORMAL: "abnormal"
};
/**
 * The ClinicalBadgePage class
 * @class module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
 *
 * @example
 * const clinicalBadge = new ClinicalBadgePage(driver);
 * clinicalBadge.get("type")
 *     .then((type) => {
 *         assert(type === ClinicalBadgePage.TYPES.ABNORMAL);
 *     });
 */

var ClinicalBadgePage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(ClinicalBadgePage, _UIComponentPage);

  function ClinicalBadgePage(driver, options) {
    var _this;

    _this = _UIComponentPage.call(this, driver, options) || this;
    _this._icon = new _SvgIcon["default"](driver, {
      selectorList: _this.selectorList.concat(ICON),
      useExactSelector: true
    });
    return _this;
  }

  var _proto = ClinicalBadgePage.prototype;

  /**
   * clicks the clinical badge
   * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
   * @returns {Promise} resolves when the action completes
   */
  _proto.click = function click() {
    return this.getRootElement().then(function (element) {
      return element.click();
    });
  };

  _createClass(ClinicalBadgePage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * the clinical badge display
     * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
     * @returns {Promise<String>} display
     */

  }, {
    key: "display",
    get: function get() {
      return this.getNestedElement(DISPLAY).then(function (element) {
        return element.findElements(_seleniumWebdriver.By.css("span")).then(function (children) {
          return children[0] ? children[0].getText() : element.getText();
        });
      });
    }
    /**
     * the clinical badge unit display
     * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
     * @returns {Promise<String>} unit
     */

  }, {
    key: "unit",
    get: function get() {
      return this.getNestedElement(DISPLAY).then(function (element) {
        return element.findElements(_seleniumWebdriver.By.css("span")).then(function (children) {
          return children[1] ? children[1].getText() : "";
        });
      });
    }
    /**
     * the criticality type
     * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
     * @returns {Promise<string>} type
     */

  }, {
    key: "type",
    get: function get() {
      var _this2 = this;

      return this._icon.isDisplayed().then(function (isDisplayed) {
        return isDisplayed ? _this2._icon.get("type").then(function (type) {
          return type !== _helpers.ICON_TYPES.MODIFIED && type && type.toLowerCase() || "";
        }) : "";
      });
    }
    /**
     * whether the clinical badge displays the modified indicator
     * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
     * @returns {Promise<Boolean>} isModified
     */

  }, {
    key: "isModified",
    get: function get() {
      return this.getNestedElement(MODIFIED).then(function (element) {
        return Boolean(element);
      });
    }
    /**
     * whether the clinical badge display text should be truncated or wrapped.
     * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
     * @returns {Promise<Boolean>} isTruncated
     */

  }, {
    key: "isTruncated",
    get: function get() {
      return this.getNestedElement(DISPLAY).then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return !!classNames.includes(DISPLAY_TRUNCATE);
      });
    }
  }]);

  return ClinicalBadgePage;
}(_UIComponent["default"]);

exports["default"] = ClinicalBadgePage;
ClinicalBadgePage.TYPES = TYPES;