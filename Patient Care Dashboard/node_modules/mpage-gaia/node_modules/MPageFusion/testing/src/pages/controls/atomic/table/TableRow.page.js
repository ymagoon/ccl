"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _TableCell = _interopRequireDefault(require("./TableCell.page"));

var _Card = _interopRequireDefault(require("../card/Card.page"));

var _List = _interopRequireDefault(require("../../../helpers/List"));

var _click = require("../../../helpers/click");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Table-row-wrapper";
var CELL_CONTAINER = ".mpageui-Table-row";
/**
 * The TableRowPage class
 * @alias module:MPageFusion/testing.atomic.table.TablePage.row
 * @class TableRowPage
 * @private
 */

var TableRow =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(TableRow, _UIComponentPage);

  function TableRow() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = TableRow.prototype;

  /**
   * clicks the table row
   * @memberOf module:MPageFusion/testing.atomic.table.TablePage.row
   * @param {{ shiftKey: boolean, ctrlKey: boolean }} opts - Click modifiers
   * @returns {Promise} - resolves when the action has completed
   */
  _proto.click = function click(opts) {
    if (opts === void 0) {
      opts = {
        shiftKey: false,
        ctrlKey: false
      };
    }

    return this.getRootElement().then((0, _click.clickModifier)(this.driver)(opts));
  };

  _createClass(TableRow, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.table.TablePage.row
     * @returns {List<module:MPageFusion/testing.atomic.table.TablePage.row.cell>} cell
     */

  }, {
    key: "cell",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _TableCell["default"],
        selectorList: this.selectorList,
        containerSelector: CELL_CONTAINER
      });
    }
    /**
     * the row data
     * @memberOf module:MPageFusion/testing.atomic.table.TablePage.row
     * @returns {Promise<object>} data
     */

  }, {
    key: "data",
    get: function get() {
      return this.cell.all("data").then(function (cells) {
        return {
          cells: cells
        };
      });
    }
    /**
     * whether or not the cell is selected
     * Note: doesn't work for mobile resolution, use card.isSelected instead.
     * @memberOf module:MPageFusion/testing.atomic.table.TablePage.row
     * @returns {Promise<boolean>} isSelected
     */

  }, {
    key: "isSelected",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return classNames.includes("is-selected");
      });
    }
    /**
     * Get the card page object for the row.
     * Should only be used in mobile resolutions where table row is a card, not list of cells.
     * @memberof module:MPageFusion/testing.atomic.table.TablePage.row
     * @returns {module:MPageFusion/testing.atomic.card.CardPage} card
     */

  }, {
    key: "card",
    get: function get() {
      return new _Card["default"](this.driver, {
        selectorList: this.selectorList
      });
    }
  }]);

  return TableRow;
}(_UIComponent["default"]);

exports["default"] = TableRow;