"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _Popup = _interopRequireDefault(require("../dialog/popup/Popup.page"));

var _Button = _interopRequireDefault(require("../../atomic/button/Button.page"));

var _PopupAnchor = _interopRequireDefault(require("../../composite/dialog/popup/PopupAnchor.page"));

var _Menu = _interopRequireDefault(require("../../composite/menu/Menu.page"));

var _PopupPane = _interopRequireDefault(require("../../composite/dialog/popup/PopupPane.page"));

var _SvgIcon = _interopRequireDefault(require("../../atomic/icon/svg/SvgIcon.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-SplitButton";
var PANE = "pane";
var DISPLAY_POSITION = {
  AFTER: "after",
  BEFORE: "before"
};
/**
 * The SplitButtonPage class
 * @class module:MPageFusion/testing.composite.button.SplitButtonPage
 *
 * @example
 * const splitButton = new SplitButtonPage(driver);
 * assert(splitButton.display);
 */

var SplitButtonPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(SplitButtonPage, _UIComponentPage);

  function SplitButtonPage(driver, options) {
    var _this;

    _this = _UIComponentPage.call(this, driver, options) || this;
    _this._popup = new _Popup["default"](driver, {
      selectorList: _this.selectorList
    });
    _this._button = new _Button["default"](driver, {
      selectorList: _this.selectorList
    });
    _this._popupAnchor = new _PopupAnchor["default"](driver, {
      selectorList: _this.selectorList
    });
    _this._icon = new _SvgIcon["default"](driver, {
      selectorList: _this.selectorList
    });
    _this._popupPane = new _PopupPane["default"](driver, {
      selectorList: _this.selectorList.concat(PANE)
    });
    _this._menu = new _Menu["default"](driver, {
      selectorList: _this._popup.contentSelectorList
    });
    return _this;
  }

  var _proto = SplitButtonPage.prototype;

  /**
   * clicks the button
   * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.click = function click() {
    return this._button.click();
  }
  /**
   * clicks the popup anchor button
   * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.clickOnExpandMoreIcon = function clickOnExpandMoreIcon() {
    return this._popupAnchor.click();
  }
  /**
   * clicks on the popup overlay
   * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
   * @returns {Promise} resolves when the action completes
   */
  ;

  _proto.clickOut = function clickOut() {
    return this._popup.clickOut();
  };

  _createClass(SplitButtonPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * returns the base Popup page
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {PopupPage} PopupPage
     */

  }, {
    key: "popup",
    get: function get() {
      return this._popup;
    }
    /**
     * returns the base Popup pane page
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {PopupPage} PopupPanePage
     */

  }, {
    key: "popupPane",
    get: function get() {
      return this._popupPane;
    }
    /**
     * whether the split button is disabled
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this._button.isDisabled;
    }
    /**
     * The display on the button
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<String>} display
     */

  }, {
    key: "display",
    get: function get() {
      return this._button.display;
    }
    /**
     * the display position
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<string>} position
     */

  }, {
    key: "displayPosition",
    get: function get() {
      return this._button.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.tagName("span"));
      }).then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return Object.values(DISPLAY_POSITION).filter(function (displayPosition) {
          return displayPosition !== "";
        }).find(function (displayPosition) {
          return classNames.includes("mpageui-Button-display--" + displayPosition);
        });
      });
    }
    /**
     * the button type
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<string>} type
     */

  }, {
    key: "type",
    get: function get() {
      return this._button.type;
    }
    /**
     * whether the popup is open
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<boolean>} true or false
     */

  }, {
    key: "isOpen",
    get: function get() {
      return this._popup.isOpen;
    }
    /**
     * the menu header display
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<String>} menuHeaderDisplay
     */

  }, {
    key: "menuHeaderDisplay",
    get: function get() {
      return this._menu.menuHeaderDisplay;
    }
    /**
     * returs array displaying all the menu items
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<Array>} displayMenuItems
     */

  }, {
    key: "displayMenuItems",
    get: function get() {
      return this._menu.displayMenuItems;
    }
    /**
     * whether or not the auto dividers are inserted
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<Boolean>} isAutoDividersInserted
     */

  }, {
    key: "isAutoDividersInserted",
    get: function get() {
      return this._menu.isAutoDividersInserted;
    }
    /**
     * whether or not the menu header is visible
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<Boolean>} isHeaderVisible
     */

  }, {
    key: "isHeaderVisible",
    get: function get() {
      return this._menu.isHeaderVisible;
    }
    /**
     * gets the split button content selector list
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Array} selector list
     */

  }, {
    key: "contentSelectorList",
    get: function get() {
      return this._popupPane.contentSelectorList;
    }
    /**
     * the icon type
     * @memberOf module:MPageFusion/testing.composite.button.SplitButtonPage
     * @returns {Promise<string>} type
     */

  }, {
    key: "iconType",
    get: function get() {
      return this._icon.type;
    }
  }]);

  return SplitButtonPage;
}(_UIComponent["default"]);

exports["default"] = SplitButtonPage;
SplitButtonPage.DISPLAY_POSITION = DISPLAY_POSITION;