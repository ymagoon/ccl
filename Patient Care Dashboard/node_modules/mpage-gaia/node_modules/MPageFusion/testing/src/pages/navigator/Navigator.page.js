"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../UIComponent.page"));

var _NavigatorContent = _interopRequireDefault(require("./NavigatorContent.page"));

var _NavigatorTab = _interopRequireDefault(require("./NavigatorTab.page"));

var _NavigatorUtils = _interopRequireDefault(require("./NavigatorUtils.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Navigator";
var VIEW = ".vwp-views";
/**
 * The NavigatorPage class
 * @class module:MPageFusion/testing.atomic.NavigatorPage
 *
 * @example
 * const navigator = new NavigatorPage(driver);
 * navigator.selectComponent("problem-list");
 */

var NavigatorPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(NavigatorPage, _UIComponentPage);

  function NavigatorPage(driver, args) {
    var _this;

    _this = _UIComponentPage.call(this, driver, args) || this;
    _this._navigatorTab = new _NavigatorTab["default"](driver, {
      selectorList: _this.selectorList
    });
    _this._navigatorUtils = new _NavigatorUtils["default"](driver, {
      selectorList: _this.selectorList
    });
    _this._navigatorContent = new _NavigatorContent["default"](driver);
    return _this;
  }

  var _proto = NavigatorPage.prototype;

  /**
   * returns a boolean indicating if navigator pin is visible (or) not
   * @returns {!promise.Thenable.<boolean>} true for display of navigator pin and false for non-display
   */
  _proto.isNavigatorPinVisible = function isNavigatorPinVisible() {
    var _this2 = this;

    return new _NavigatorContent["default"](this.driver).getRootElement().then(function () {
      return _this2.driver.findElement(_seleniumWebdriver.By.css("" + VIEW));
    }).then(function (element) {
      return element.getAttribute("class");
    }).then(function (className) {
      return className.includes("mpage-vwp-nav--pinned");
    })["catch"](function () {
      return false;
    });
  }
  /**
   * This function makes a call to clickOnComponent when the navigator bar
   * is loaded, else calls loadNavigatorBar method to load the navigator and
   * selects the component based on the identifier
   * @param {string} identifier - The component identifier
   * @returns {WebElementPromise} Triggers call to appropriate method based on the visibility of navigator pin
   */
  ;

  _proto.selectComponent = function selectComponent(identifier) {
    var _this3 = this;

    // checking the status of Navigator Pin
    return this.isNavigatorPinVisible().then(function (status) {
      status ? _this3.clickOnComponent(identifier) : _this3.loadNavigatorBarAndSelectComponent(identifier); // eslint-disable-line no-unused-expressions
    });
  }
  /**
   * This function calls the getComponent from the navigator content page.
   * @param {string} identifier - The component identifier
   * @returns {WebElementPromise} selects the component based on the identifier
   */
  ;

  _proto.clickOnComponent = function clickOnComponent(identifier) {
    return this._navigatorContent.selectComponent(identifier);
  }
  /**
   * This function loads the Navigator bar by clicking on the navigator tab and
   * clicking on pin icon, then selects the component based on the identifier.
   * @param {string} identifier - The component identifier
   * @returns {WebElementPromise} selects the component based on the identifier
   */
  ;

  _proto.loadNavigatorBarAndSelectComponent = function loadNavigatorBarAndSelectComponent(identifier) {
    var _this4 = this;

    return Promise.all([// perform mouseover on Navigator tab
    this._navigatorTab.openTab(), // click on the Navigator Pin icon
    this._navigatorUtils.getRootElement().then(function () {
      return _this4._navigatorUtils.button.click();
    })]).then(function () {
      return _this4.clickOnComponent(identifier);
    });
  }
  /**
   * This function calls openTab method from the navigator tab page.
   * @param {string} identifier - The component identifier
   * @returns {WebElementPromise} selects the component based on the identifier
   */
  ;

  _proto.clickOnComponentCardView = function clickOnComponentCardView(identifier) {
    var _this5 = this;

    return this._navigatorTab.openTab().then(function () {
      return _this5.clickOnComponent(identifier);
    });
  };

  _createClass(NavigatorPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
  }]);

  return NavigatorPage;
}(_UIComponent["default"]);

exports["default"] = NavigatorPage;