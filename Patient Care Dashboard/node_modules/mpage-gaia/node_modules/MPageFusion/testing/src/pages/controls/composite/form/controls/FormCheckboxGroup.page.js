"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FormControl = _interopRequireDefault(require("../FormControl.page"));

var _CheckboxGroup = _interopRequireDefault(require("../../../composite/select-group/CheckboxGroup.page"));

var _helpers = require("../helpers");

var _ClinicalBadge = _interopRequireDefault(require("../../../atomic/badge/ClinicalBadge.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormCheckboxGroup";
/**
 * The FormCheckboxGroupPage class
 * @class module:MPageFusion/testing.composite.form.FormCheckboxGroupPage
 *
 * @example
 * const formCheckboxGroup = new FormCheckboxGroupPage(driver);
 * formCheckboxGroup.get("display")
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormCheckboxGroupPage =
/*#__PURE__*/
function (_FormControlPage) {
  _inheritsLoose(FormCheckboxGroupPage, _FormControlPage);

  function FormCheckboxGroupPage(driver, options) {
    var _this;

    _this = _FormControlPage.call(this, driver, options) || this;
    _this._checkboxGroup = new _CheckboxGroup["default"](driver, {
      selectorList: _this.selectorList.concat(_helpers.CLASSES.RIGHT_COLUMN)
    });
    return _this;
  }

  var _proto = FormCheckboxGroupPage.prototype;

  /**
   * Toggles the checkbox at the specified index
   * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxGroupPage
   * @param {Number} index - the index of the checkbox to toggle
   * @returns {Promise} resolves when the action completes
   */
  _proto.toggle = function toggle(index) {
    return this._checkboxGroup.checkbox(index).click();
  };

  _createClass(FormCheckboxGroupPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * Gets the current values in the checkbox group
     * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxGroupPage
     * @returns {Promise<Array>} resolves with an array of objects { display, isSelected }
     */

  }, {
    key: "value",
    get: function get() {
      return this._checkboxGroup.checkbox.all().then(function (checkboxGroup) {
        return Promise.all(checkboxGroup.map(function (checkbox) {
          return Promise.all([checkbox.get("display"), checkbox.get("isSelected")]).then(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                display = _ref2[0],
                isSelected = _ref2[1];

            return {
              display: display,
              isSelected: isSelected
            };
          });
        }));
      });
    }
    /**
     * returns the base CheckboxGroup page
     * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxGroupPage
     * @returns {CheckboxGroupPage} checkboxGroupPage
     */

  }, {
    key: "checkboxGroup",
    get: function get() {
      return this._checkboxGroup;
    }
  }]);

  return FormCheckboxGroupPage;
}(_FormControl["default"]);

exports["default"] = FormCheckboxGroupPage;
FormCheckboxGroupPage.CRITICALITY_TYPES = _ClinicalBadge["default"].TYPES;