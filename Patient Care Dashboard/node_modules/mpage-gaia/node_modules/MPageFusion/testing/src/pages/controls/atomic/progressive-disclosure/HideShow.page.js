"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-HideShow";
var HIDE_SHOW_ANCHOR = ".mpageui-HideShow-anchor";
var HIDE_SHOW_EXPAND = ".mpageui-HideShow-content";
var HIDE_SHOW_IS_ABOVE = "mpageui-HideShow--above";
/**
 * The HideShowPage class
 * @class module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
 *
 * @example
 * const hideShow = new HideShowPage(driver);
 */

var HideShowPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(HideShowPage, _UIComponentPage);

  function HideShowPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = HideShowPage.prototype;

  /**
   * clicks the HideShow Anchor
   * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.click = function click() {
    return this.getRootElement().then(function (element) {
      return element.findElement(_seleniumWebdriver.By.css(HIDE_SHOW_ANCHOR)).then(function (anchor) {
        return anchor.click();
      });
    });
  }
  /**
   * whether or not the hideShow is expanded
   * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
   * @returns {Promise<boolean>} isExpanded
   */
  ;

  _createClass(HideShowPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * The hideShow display
     * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
     * @returns {Promise<string>} display
     */

  }, {
    key: "display",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(HIDE_SHOW_ANCHOR)).then(function (anchor) {
          return anchor.getText();
        });
      });
    }
    /**
     * whether the hideShow is disabled
     * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
     * @returns {Promise<boolean>} isDisabled
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(HIDE_SHOW_ANCHOR)).then(function (anchorElement) {
          return anchorElement.getAttribute("disabled");
        }).then(function (attribute) {
          return Boolean(attribute);
        });
      });
    }
  }, {
    key: "isExpanded",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(HIDE_SHOW_EXPAND)).then(function (expandElement) {
          return Boolean(expandElement);
        })["catch"](function () {
          return false;
        });
      });
    }
    /**
     * whether the toggle anchor is displayed above or below the hide/show content
     * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
     * @returns {Promise<boolean>} isAbove
     */

  }, {
    key: "isAbove",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return classNames.includes(HIDE_SHOW_IS_ABOVE);
      });
    }
  }]);

  return HideShowPage;
}(_UIComponent["default"]);

exports["default"] = HideShowPage;