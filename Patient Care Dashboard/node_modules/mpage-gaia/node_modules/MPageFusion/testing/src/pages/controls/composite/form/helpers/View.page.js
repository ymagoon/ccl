"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FormControlPage2 = _interopRequireDefault(require("./../FormControl.page.js"));

var _ClinicalBadge = _interopRequireDefault(require("../../../atomic/badge/ClinicalBadge.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = "";
/**
 * The ViewPage class
 * @class module:MPageFusion/testing.composite.form.helpers.ViewPage
 * @desc always set useExactSelector: true , so that it will replace the selector list with passed selector.
 * @desc ViewPage is used to test the helpers.form.view functions( renderTitle,renderErrorText ... )
 * Which is exposed to end users, which can be consumed directly while rendering.
 *
 * @example
 * viewPage = new ViewPage(
        driver,
        {
            selectorList: [ ROOT_SELECTOR ],
            useExactSelector: true
        }
    );
 * await viewPage.get("display") - gets the rendered title
 * await viewPage.get("helperText") - gets the rendered helperText
 * await viewPage.get("errorText") - gets the rendered errorText
 * await viewPage.get("isRequired") - gets the boolean value for isRequired
 * await viewPage.get("isInline") - gets the boolean value for isInline
 * await viewPage.get("criticality") - gets the criticality type
 */

var ViewPage =
/*#__PURE__*/
function (_FormControlPage) {
  _inheritsLoose(ViewPage, _FormControlPage);

  function ViewPage() {
    return _FormControlPage.apply(this, arguments) || this;
  }

  _createClass(ViewPage, [{
    key: "elementSelector",

    /**
     * @private
     */
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * @inheritDoc
     * @desc value function need to be overridden, else FormControlPage's view will throw an error saying
     * form control page objects must implement a value method.
     */

  }, {
    key: "value",
    get: function get() {
      // eslint-disable-line class-methods-use-this
      throw new Error("Value is available only for form controls");
    }
  }]);

  return ViewPage;
}(_FormControlPage2["default"]);

exports["default"] = ViewPage;
ViewPage.CRITICALITY_TYPES = _ClinicalBadge["default"].TYPES;