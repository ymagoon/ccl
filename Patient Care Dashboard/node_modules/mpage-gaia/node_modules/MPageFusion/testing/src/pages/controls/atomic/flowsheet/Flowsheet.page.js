"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _List = _interopRequireDefault(require("../../../helpers/List"));

var _FlowsheetSubsection = _interopRequireDefault(require("./FlowsheetSubsection.page"));

var _FlowsheetRow = _interopRequireDefault(require("./FlowsheetRow.page"));

var _FlowsheetColumn = _interopRequireDefault(require("./FlowsheetColumn.page"));

var _FlowsheetCompositeColumn = _interopRequireDefault(require("./FlowsheetCompositeColumn.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Flowsheet-wrapper";
var BODY = ".mpageui-Flowsheet-body";
var ROW_CONTAINER = ".mpageui-Flowsheet-rowContainer";
var ROW = ".mpageui-Flowsheet-row";
var HEADER = ".mpageui-Flowsheet-header";
var COMPOSITE_HEADER = ".mpageui-Flowsheet-compositeHeader";
var SUBSECTION_HEADER = ".mpageui-Flowsheet-sectionHeader";
var HEADER_TYPE = {
  DEFAULT: 0,
  COMPOSITE: 1
};
/**
 * The FlowsheetPage class
 * @class module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage
 *
 * @example
 * const flowsheet = new FlowsheetPage(driver);
 * assert(flowsheet.subsection.count === 2);
 * flowsheet.subsection(0).row(4).click();
 */

var FlowsheetPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(FlowsheetPage, _UIComponentPage);

  function FlowsheetPage(driver, args) {
    if (args === void 0) {
      args = {};
    }

    return _UIComponentPage.call(this, driver, args.config && args.config.headerType ? args : Object.assign({}, args, {
      config: Object.assign({}, args.config, {
        headerType: HEADER_TYPE.DEFAULT
      })
    })) || this;
  }

  _createClass(FlowsheetPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.Flowsheet.FlowsheetPage
     * @returns {List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection>} subsection
     */

  }, {
    key: "subsection",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _FlowsheetSubsection["default"],
        selectorList: this.selectorList,
        containerSelector: BODY
      });
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage
     * @returns {List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.row>} row
     */

  }, {
    key: "row",
    get: function get() {
      return (0, _List["default"])({
        list: this,
        itemPage: _FlowsheetRow["default"],
        selectorList: this.selectorList,
        containerSelector: ROW_CONTAINER
      });
    }
    /**
     * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage
     * @returns {
     * List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.column>|List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.column>
     * } column
     */

  }, {
    key: "column",
    get: function get() {
      var listArgs = {
        list: this,
        selectorList: this.selectorList
      };

      switch (this.config.headerType) {
        case HEADER_TYPE.COMPOSITE:
          /*
           * Note: Using the offset because the first element in the Flowsheet composite header
           * is a spacer that has a different class than the actual composite header items.
           */
          return (0, _List["default"])(Object.assign({}, listArgs, {
            itemPage: _FlowsheetCompositeColumn["default"],
            containerSelector: "" + COMPOSITE_HEADER,
            offset: function offset(i) {
              return i + 1;
            }
          }));

        default:
          return (0, _List["default"])(Object.assign({}, listArgs, {
            itemPage: _FlowsheetColumn["default"],
            containerSelector: HEADER + " " + ROW
          }));
      }
    }
    /**
     * the flowsheet data
     * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage
     * @returns {Promise<object>} data
     */

  }, {
    key: "data",
    get: function get() {
      var _this = this;

      return this.getRootElement().then(function (element) {
        return (// check to see if subsections are used
          element.findElements(_seleniumWebdriver.By.css(SUBSECTION_HEADER)).then(function (headers) {
            return headers.length ? Promise.all([_this.subsection.all("data"), _this.column.all("data")]).then(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                  subsections = _ref2[0],
                  columns = _ref2[1];

              return {
                subsections: subsections,
                columns: columns
              };
            }) : Promise.all([_this.row.all("data"), _this.column.all("data")]).then(function (_ref3) {
              var _ref4 = _slicedToArray(_ref3, 2),
                  rows = _ref4[0],
                  columns = _ref4[1];

              return {
                rows: rows,
                columns: columns
              };
            });
          })
        );
      });
    }
  }]);

  return FlowsheetPage;
}(_UIComponent["default"]);

exports["default"] = FlowsheetPage;