"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _BannerAnchor = _interopRequireDefault(require("./BannerAnchor.page"));

var _Button = _interopRequireDefault(require("../../atomic/button/Button.page"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-BannerItem";
var CONTENT_TEXT = ".mpageui-BannerItem-text";
var BANNER_ACTIONS = ".mpageui-BannerItem-actions";
var MORE_DETAIL_TEXT = ".mpageui-BannerItem-moreDetailsText";
var DISMISS_BUTTON = ".mpageui-BannerItem-dismiss";
var TOGGLE_BUTTON = ".mpageui-BannerItem-toggle";
var IS_EXPANDED = ".is-expanded";
var DISCLOSED_CONTENT = ".mpageui-BannerItem-disclose";
var TYPES = {
  INFO: "info",
  ALERT: "alert",
  ERROR: "error",
  WARNING: "warning",
  GAP_CHECKING: "gapChecking",
  OUTSIDE_RECORDS: "outsideRecords",
  SUCCESS: "success"
};
var DISPLAY_MODES = {
  DEFAULT: "default",
  COMPACT: "compact",
  DETAIL: "detail"
};
/**
 * The BannerPage class
 * @class module:MPageFusion/testing.composite.banner.BannerPage
 *
 * @example
 * const banner = new BannerPage(driver);
 * banner.isDisplayed();
 * banner.button(0).click();
 */

var BannerPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(BannerPage, _UIComponentPage);

  function BannerPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = BannerPage.prototype;

  /**
   * @memberOf module:MPageFusion/testing.composite.banner.BannerButtonPage
   * @returns {List<module:MPageFusion/testing.atomic.button.BannerButtonPage>} button
   */
  _proto.dismiss = function dismiss() {
    return new _Button["default"](this.driver, {
      selectorList: this.selectorList.concat(DISMISS_BUTTON),
      useExactSelector: true
    }).click();
  }
  /**
   * gets the banner action content selector list
   * @memberOf module:MPageFusion/testing.composite.banner.BannerPage
   * @returns {Array} selector list
   */
  ;

  /**
   * Deterimine if toggle button is displayed or not.
   * Only displays on mobile resolution and if additional content is available.
   * @memberof module:MPageFusion/testing.composite.banner.BannerPage
   * @returns {Promise<Boolean>} Returns promise that is resolved with displayed indicator.
   */
  _proto.isCollapsible = function isCollapsible() {
    return this.toggleButton.isDisplayed();
  }
  /**
   * Determine if banner is collapsed or not.
   * Banner must be collapsible.
   * @memberof module:MPageFusion/testing.composite.banner.BannerPage
   * @returns {Promise<Boolean>} Returns promise that is resolved with collapsed indicator.
   */
  ;

  /**
   * Collapses the banner content.
   * Banner content must be expanded.
   * @memberof module:MPageFusion/testing.composite.banner.BannerPage
   * @returns {Promise} Returns promise that is resolved when the action has completed.
   */
  _proto.collapse = function collapse() {
    var _this = this;

    return this.isCollapsed.then(function (isCollapsed) {
      if (isCollapsed) {
        throw new Error("BannerItem not expanded");
      } else {
        return _this.toggleButton.click();
      }
    });
  }
  /**
   * Expands the banner content.
   * Banner content must be collapsed.
   * @memberof module:MPageFusion/testing.composite.banner.BannerPage
   * @returns {Promise} Returns promise that is resolved when the action has completed.
   */
  ;

  _proto.expand = function expand() {
    var _this2 = this;

    return this.isCollapsed.then(function (isCollapsed) {
      if (!isCollapsed) {
        throw new Error("BannerItem not collapsed");
      } else {
        return _this2.toggleButton.click();
      }
    });
  };

  _createClass(BannerPage, [{
    key: "elementSelector",

    /**
    * @private
    */
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * Obtains the title of the BannerItem.
     * @returns {Promise<string>} The title.
     */

  }, {
    key: "title",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(CONTENT_TEXT));
      }).then(function (textElement) {
        return textElement.findElement(_seleniumWebdriver.By.css("strong"));
      }).then(function (strongElement) {
        return strongElement.getText();
      });
    }
    /**
     * Obtains the description of the BannerItem.
     * @returns {Promise<string>} The description.
     */

  }, {
    key: "description",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.findElement(_seleniumWebdriver.By.css(CONTENT_TEXT + " > span:nth-child(2)"));
      }).then(function (descriptionElement) {
        return descriptionElement.getText();
      });
    }
    /**
     * the anchor link
     * @memberOf module:MPageFusion/testing.composite.banner.BannerPage
     * @returns {module:MPageFusion/testing.composite.banner.BannerAnchorPage} anchor
     */

  }, {
    key: "toggleDetailsLink",
    get: function get() {
      return new _BannerAnchor["default"](this.driver, {
        selectorList: this.selectorList
      });
    }
    /**
     * the banner type
     * @memberOf module:MPageFusion/testing.composite.banner.BannerPage
     * @returns {Promise<string>} type
     */

  }, {
    key: "type",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return Object.values(TYPES).find(function (type) {
          return classNames.includes("mpageui-BannerItem--" + type);
        }) || "";
      });
    }
    /**
     * the banner display mpde
     * @memberof module:MPageFusion/testing.composite.banner.BannerPage
     * @returns {Promise<string>} display mode
     */

  }, {
    key: "displayMode",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return Object.values(DISPLAY_MODES).find(function (displayMode) {
          return classNames.includes("mpageui-BannerItem--" + displayMode);
        }) || "";
      });
    }
  }, {
    key: "actionContentSelector",
    get: function get() {
      return this.selectorList.concat(BANNER_ACTIONS);
    }
    /**
     * the more details text
     * @memberOf module:MPageFusion/testing.composite.banner.BannerPage
     * @returns {Promise<string>} more details text
     */

  }, {
    key: "moreDetailsText",
    get: function get() {
      return this.getNestedElement(MORE_DETAIL_TEXT).then(function (textElement) {
        if (!textElement) {
          return Promise.resolve("");
        }

        return textElement.getText();
      });
    }
    /**
     * gets the banner disclosed action content selector list
     * @memberof module:MPageFusion/testing.composite.banner.BannerPage
     * @returns {Array} selector list
     */

  }, {
    key: "disclosedActionContentSelector",
    get: function get() {
      return this.selectorList.concat(DISCLOSED_CONTENT).concat(BANNER_ACTIONS);
    }
    /**
     * Gets the toggle button.
     * @memberof module:MPageFusion/testing.composite.banner.BannerPage
     * @returns {module:MPageFusion/testing.atomic.button.ButtonPage} button
     */

  }, {
    key: "toggleButton",
    get: function get() {
      return new _Button["default"](this.driver, {
        selectorList: this.selectorList.concat(TOGGLE_BUTTON),
        useExactSelector: true
      });
    }
  }, {
    key: "isCollapsed",
    get: function get() {
      var _this3 = this;

      return this.isCollapsible().then(function (collapsible) {
        if (collapsible) {
          return _this3.getRootElement().then(function (element) {
            return element.findElement(_seleniumWebdriver.By.css(IS_EXPANDED)).then(function () {
              return false;
            })["catch"](function () {
              return true;
            });
          });
        } else {
          throw new Error("BannerItem not collapsible");
        }
      });
    }
  }]);

  return BannerPage;
}(_UIComponent["default"]);

exports["default"] = BannerPage;
BannerPage.TYPES = TYPES;
BannerPage.DISPLAY_MODES = DISPLAY_MODES;