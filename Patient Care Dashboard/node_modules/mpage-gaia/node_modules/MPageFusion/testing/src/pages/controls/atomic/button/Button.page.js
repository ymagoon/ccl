"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _UIComponent = _interopRequireDefault(require("../../../UIComponent.page"));

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var TYPES = {
  PRIMARY: "primary",
  SECONDARY: "secondary",
  LINK: "link",
  DEFAULT: ""
};
var ROOT_SELECTOR = ".mpageui-Button";
/**
 * The ButtonPage class
 * @class module:MPageFusion/testing.atomic.button.ButtonPage
 *
 * @example
 * const button = new ButtonPage(driver);
 */

var ButtonPage =
/*#__PURE__*/
function (_UIComponentPage) {
  _inheritsLoose(ButtonPage, _UIComponentPage);

  function ButtonPage() {
    return _UIComponentPage.apply(this, arguments) || this;
  }

  var _proto = ButtonPage.prototype;

  /**
   * clicks the button
   * @memberOf module:MPageFusion/testing.atomic.button.ButtonPage
   * @returns {Promise} resolves when the action is completed
   */
  _proto.click = function click() {
    return this.getRootElement().then(function (element) {
      return element.click();
    });
  }
  /**
   * waits until the button is enabled
   * @memberOf module:MPageFusion/testing.atomic.button.ButtonPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.waitUntilEnabled = function waitUntilEnabled() {
    var _this = this;

    return this.getRootElement().then(function (element) {
      return _this.driver.wait(_seleniumWebdriver.until.elementIsEnabled(element));
    });
  }
  /**
   * waits until the button is disabled
   * @memberOf module:MPageFusion/testing.atomic.button.ButtonPage
   * @returns {Promise} resolves when the action is completed
   */
  ;

  _proto.waitUntilDisabled = function waitUntilDisabled() {
    var _this2 = this;

    return this.getRootElement().then(function (element) {
      return _this2.driver.wait(_seleniumWebdriver.until.elementIsDisabled(element));
    });
  };

  _createClass(ButtonPage, [{
    key: "elementSelector",
    get: function get() {
      return ROOT_SELECTOR;
    }
    /**
     * the selector list for the button icon
     * @memberOf module:MPageFusion/testing.atomic.button.ButtonPage
     * @returns {Array} selector
     */

  }, {
    key: "iconSelectorList",
    get: function get() {
      return this.selectorList;
    }
    /**
     * the button display
     * @memberOf module:MPageFusion/testing.atomic.button.ButtonPage
     * @returns {Promise<string>} display
     */

  }, {
    key: "display",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getText();
      });
    }
    /**
     * the button type
     * @memberOf module:MPageFusion/testing.atomic.button.ButtonPage
     * @returns {Promise<string>} type
     */

  }, {
    key: "type",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("class");
      }).then(function (classNames) {
        return Object.values(TYPES).filter(function (type) {
          return type !== TYPES.DEFAULT;
        }).find(function (type) {
          return classNames.includes("mpageui-Button--" + type);
        }) || TYPES.DEFAULT;
      });
    }
    /**
     * whether the button is disabled
     * @memberOf module:MPageFusion/testing.atomic.button.ButtonPage
     * @returns {Promise<boolean>} isDisabled
     */

  }, {
    key: "isDisabled",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("disabled");
      }).then(function (attribute) {
        return Boolean(attribute);
      });
    }
    /**
     * whether the button is selected
     * @memberOf module:MPageFusion/testing.atomic.button.ButtonPage
     * @returns {Promise<boolean>} isSelected
     */

  }, {
    key: "isSelected",
    get: function get() {
      return this.getRootElement().then(function (element) {
        return element.getAttribute("aria-selected");
      }).then(function (attribute) {
        return Boolean(attribute);
      });
    }
  }]);

  return ButtonPage;
}(_UIComponent["default"]);

exports["default"] = ButtonPage;
ButtonPage.TYPES = TYPES;