const path = require("path");
const webpack = require("webpack");

const baseDir = path.join(__dirname, "../../../../", "node_modules");
const { evidencePathConfig } = require("../constants/pathConfiguration");

/**
 * This function creates the file array for the karma config. If the config uses Fusion, then another file
 * is added to the array.
 * @function getFiles
 * @param {Object} config The settings for karma
 * @returns {Array} fileArr The file array for the karma config
 */
const getFiles = (config) => {
    let fileArr = [
        require.resolve("@babel/polyfill/dist/polyfill.min.js"),
        path.resolve(__dirname, "./mpageHooks.js")
    ]
        .concat(
            config.mockPath
                ? path.resolve(process.cwd(), `${config.mockPath}/**/*.js`)
                : []
        )
        .concat(
            config.spyPath
                ? path.resolve(process.cwd(), `${config.spyPath}/**/*.js`)
                : []
        )
        .concat(path.resolve(__dirname, "./tests.webpack.js"));

    if (config.usesFusion) {
        fileArr.splice(
            1,
            0,
            require.resolve(
                path.resolve(baseDir, "./MPageFusion/dist/lib/js/mpage-fusion.js")
            )
        );
    }

    return fileArr;
};

/**
 * This function creates the alias object for the karma config. If the config uses Fusion, then two additional
 * aliases are added to the object.
 * @function getAlias
 * @param {Object} config The settings for karma
 * @returns {Object} aliasObj The alias object for the karma config
 */
const getAlias = (config) => {
    let aliasObj = {
        _specRoot: path.resolve(process.cwd(), config.specPath),
        _srcRoot: path.resolve(process.cwd(), config.srcPath)
    };

    if (config.usesFusion) {
        aliasObj["fusion-test-helpers"] =
            "fusion-test-helpers/dist/testhelpers.js";
    }

    return aliasObj;
};

//The karma config
module.exports = (config) => {
    return {
        files: getFiles(config),
        browsers: config.browser,
        frameworks: ["jasmine"],
        autoWatch: true,
        colors: true,
        singleRun: config.singleRun,
        plugins: [
            require("karma-sourcemap-loader"),
            require("karma-webpack"),
            require("karma-jasmine"),
            require("karma-jasmine-diff-reporter"),
            require("karma-jasmine-html-reporter"),
            require("karma-html-reporter"),
            require("karma-coverage"),
            require("karma-spec-reporter"),
            require("karma-chrome-launcher"),
            require("karma-ie-launcher"),
            require("karma-firefox-launcher"),
            require("karma-phantomjs-launcher"),
            require("karma-opera-launcher"),
            require("karma-safari-launcher"),
            require("../karma-plugin")
        ],
        preprocessors: {
            [path.resolve(__dirname, "./tests.webpack.js")]: [
                "webpack",
                "sourcemap"
            ]
        },
        reporters: [
            "spec",
            "jasmine-diff",
            "coverage",
            "json-result",
            "kjhtml",
            "html"
        ],
        coverageReporter: {
            dir: path.resolve(
                process.cwd(),
                evidencePathConfig.folderPath,
                ".coverage"
            ),
            reporters: [
                { type: "html", subdir: "html" },
                { type: "cobertura", subdir: "." }
            ]
        },
        jsonResultReporter: {
            outputFile: "testResults.json",
            outputDir: evidencePathConfig.folderPath
        },
        htmlReporter: {
            outputDir: evidencePathConfig.folderPath,
            namedFiles: true,
            urlFriendlyName: true
        },
        webpack: {
            cache: true,
            devtool: "inline-source-map",
            /*
            * We need resolve loader since webpack looks to project node_modules by default.
            * This tells webpack to look for base directory (folder directly above plugin) node_modules
            * as well as the project node_modules.
            * More here: https://cloud.githubusercontent.com/assets/948896/7745800/6a051802-ffe0-11e4-9177-d1807d792d6b.png
            * */
            resolveLoader: {
                extensions: [".js"],
                moduleExtensions: ["-loader"],
                modules: [baseDir, path.join(process.cwd(), "node_modules")]
            },
            resolve: {
                alias: getAlias(config),
                extensions: [".js"]
            },
            externals: config.externals,
            module: {
                rules: [
                    {
                        test: /\.js$/,
                        include: [
                            path.resolve(process.cwd(), config.srcPath),
                            path.resolve(process.cwd(), config.unitTestPath)
                        ],
                        exclude: /(node_modules)/,
                        use: [
                            {
                                loader: require.resolve("babel-loader"),
                                options: {
                                    presets: [
                                        [require.resolve("babel-preset-mpage"), { modules: "commonjs" } ]
                                    ],
                                    plugins: [
                                        [
                                            require.resolve(
                                                "babel-plugin-istanbul"
                                            ),
                                            {
                                                exclude: [
                                                    `**/${config.unitTestPath}/**/*.js`
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            }
                        ]
                    }
                ]
            },
            plugins: [
                new webpack.optimize.ModuleConcatenationPlugin()
            ]
        }
    };
};
