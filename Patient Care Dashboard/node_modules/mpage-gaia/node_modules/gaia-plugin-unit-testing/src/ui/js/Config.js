import { atomic, composite, UIComponent } from "MPageFusion";
import { runCommand } from "Gaia";
import "../../styles/UnitTester.less";
import settings from "./defaultSettings";
import i18n from "../../i18n/en_us";

const {
    form: {
        FormCheckbox,
        FormCheckboxGroup,
        FormTextBox,
        FormSelect,
        FormRadioButtonGroup
    }
} = composite;

const {
    button: {
        Button
    },
    header: {
        ContentHeader
    },
    indicator: {
        LoadingSpinner,
        Notify //when Notify is ready, add a notification upon save that it was successful and the tests are being ran
    }
} = atomic;

/**
 * This function calls the saveConfig command for the unit tester. Then it enables the save button and emits
 * an event to tell the unit tests to run with the new config.
 * @function saveConfig
 * @param {Object} settings The new settings to save to the gaia.json file
 * @param {Config} configObj The current Config object instance
 * @returns {Promise} A promise that runs the saveConfig command and then emits an event
 */
const saveConfig = (settings, configObj) => {
    runCommand("unit-testing", "saveConfig", {settings})
        .then(() => {
            configObj.getChild("saveChangesButton").setProp("disabled", false);
            configObj.update();
            configObj.emit(configObj.getProp("runKarmaEventName"), configObj);
        });
};

/**
 * This function calls the readConfig command for the unit tester.
 * @function readConfig
 * @param {Config} configObj The current Config object instance
 * @returns {Promise} A promise that runs the readConfig command
 */
const readConfig = configObj => runCommand("unit-testing", "readConfig");

/**
 * This function calls the getTargetList command for the webpack plugin.
 * @function getTargetNames
 * @param {Config} configObj The current Config object instance
 * @returns {Promise} A promise that runs the getTargetList command
 */
const getTargetNames = configObj => runCommand("webpack", "getTargetList");

/**
 * This function calls the readExternals command for the webpack plugin.
 * @function getTargetExternals
 * @param {String} targetName The name of the desired external's target
 * @returns {Promise} A promise that runs the readExternals command
 */
const getTargetExternals = targetName =>
    runCommand(
        "webpack",
        "readExternals",
        {
            target: targetName
        });

/**
 * This function takes the new settings and updates all the children with them. Then it calls finishChanges.
 * @function updateChildren
 * @param {Array} targetNames The names of all the targets created in the webpack plugin
 * @param {Config} configObj The current Config object instance
 * @returns {undefined}
 */
const updateChildren = (targetNames, configObj) => {
    const newSettings = configObj._state.settings;
    configObj.getChild("testRunner").setProp("value", newSettings.testRunner);
    configObj.getChild("singleRunCheckbox").setProp("value", newSettings.singleRun);
    configObj.getChild("browserCheckboxGroup").setProp("value", newSettings.browser);
    configObj.getChild("srcPathTextBox").setProp("value", newSettings.srcPath);
    configObj.getChild("unitTestPathTextBox").setProp("value", newSettings.unitTestPath);
    configObj.getChild("specPathTextBox").setProp("value", newSettings.specPath);
    configObj.getChild("mockPathTextBox").setProp("value", newSettings.mockPath);
    configObj.getChild("spyPathTextBox").setProp("value", newSettings.spyPath);
    configObj.getChild("usesFusionCheckbox").setProp("value", newSettings.usesFusion);
    configObj.getChild("targetNamesDropDown").getProp("options").items = targetNames;
    configObj.getChild("targetNamesDropDown").setProp("value", newSettings.target);
    configObj.setProp("externalsList", getExternalsText(newSettings.target, newSettings.externals));
    finishChanges(configObj);
};

/**
 * This function decides what text should show below the target drop down. If the helper text is select or
 * a target is selected that doesn't have externals then helper text shows. Otherwise, the externals object
 * is printed out for the selected webpack target.
 * @function getExternalsText
 * @param {String} target The selected value from the drop down
 * @param {Object} externals The externals from the selected webpack target
 * @returns {String} Helper text or the externals for the selected webpack target
 */
const getExternalsText = (target, externals) => {
    if (!target) {
        //If target is null, helper text is selected
        return i18n.content.config.selectAbove;
    }

    if (Object.keys(externals).length) {
        //If externals object has values
        return JSON.stringify(externals, null, "\t");
    }

    //else, a target is selected that has no externals
    return i18n.content.config.noExternals;
};

/**
 * This function takes the array of target names returned from the webpack plugin and creates a new array with
 * values setup so the drop down can display them.
 * @function createTargetList
 * @param {Array} targetNames The target names from the webpack plugin
 * @returns {Promise} A resolved promise with a new array of names to display in the target drop down
 */
const createTargetList = targetNames =>
    Promise.resolve(targetNames.map((name) => {
        return {
            display: name,
            id: name
        }
    }));

/**
 * This function does some cleanup for the tab. It turns off the spinner and enables the save button.
 * Then it calls update on the tab.
 * @function finishChanges
 * @param {Config} configObj The current Config object instance
 * @returns {undefined}
 */
const finishChanges = configObj => {
    //remove spinner
    configObj.getChild("spinner").setProp("isLoading", false);
    //enable save button
    configObj.getChild("saveChangesButton").setProp("disabled", false);
    configObj.update();
};

/**
 * Small helper to render a header.
 * @function header
 * @param {String} title - The title of the header.
 * @returns {VDom} Rendered header.
 */
const header = title => (new ContentHeader({ title }).render());

//Use this later when Notify is available from Fusion
/*class NotifyMessage extends UIComponent {
    view(el, props, children) {
        return el(
            "div",
            {
                class: "mpageui-NotifyMessage mpageui-NotifyMessage--added"
            },
            props.display
        );
    }
}*/

/**
 * @class Config
 */
export default class Config extends UIComponent {

    /**
     * @inheritdoc
     */
    initialState() {
        return {
            settings,
            submitted: false
        };
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            runKarmaEventName: "",
            externalsList: i18n.content.config.selectAbove
        };
    }

    /**
     * @inheritdoc
     */
    beforeCreate() {
        readConfig(this)
            .then((config) => Promise.resolve(Object.assign(this._state.settings, config)))
            .then(() => getTargetNames(this))
            .then((names) => createTargetList(names))
            .then((items) => updateChildren(items, this));
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                testRunner: new FormRadioButtonGroup({
                    display: i18n.content.config.testRunner,
                    helperHandler: () => i18n.content.config.testRunnerHelp,
                    options: {
                        items: [
                            {
                                display: "Jest",
                                id: "JEST"
                            },
                            {
                                display: "Karma",
                                id: "KARMA"
                            }
                        ],
                        isInline: true
                    },
                    value: "KARMA",
                    valueChangeEventName: "testRunnerChange"
                })
            },
            {
                singleRunCheckbox: new FormCheckbox({
                    display: i18n.content.config.singleRunDisplay,
                    helperHandler: () => i18n.content.config.singleRunHelp,
                    value: this._state.settings.singleRun,
                    valueChangeEventName: "singleRunChange"
                })
            },
            {
                browserCheckboxGroup: new FormCheckboxGroup({
                    display: i18n.content.config.browsersDisplay,
                    isRequired: true,
                    helperHandler: (value) => value.length > 0 ? null : i18n.content.config.oneBrowser,
                    options: {
                        items: [
                            { display: "Chrome", id: "Chrome" },
                            { display: "Firefox", id: "Firefox" },
                            { display: "IE", id: "IE" },
                            { display: "Opera", id: "Opera" },
                            { display: "PhantomJS", id: "PhantomJS" },
                            { display: "Safari", id: "Safari" }
                        ]
                    },
                    value: this._state.settings.browser,
                    valueChangeEventName: "browserChange"
                })
            },
            {
                srcPathTextBox: new FormTextBox({
                    valueChangeEventName: "srcPathChange",
                    options: {
                        placeholder: this._state.settings.srcPath
                    },
                    display: i18n.content.config.srcPathDisplay
                })
            },
            {
                unitTestPathTextBox: new FormTextBox({
                    valueChangeEventName: "unitTestPathChange",
                    options: {
                        placeholder: this._state.settings.unitTestPath
                    },
                    display: i18n.content.config.unitTestPathDisplay
                })
            },
            {
                specPathTextBox: new FormTextBox({
                    valueChangeEventName: "specPathChange",
                    options: {
                        placeholder: this._state.settings.specPath
                    },
                    display: i18n.content.config.specPathDisplay
                })
            },
            {
                mockPathTextBox: new FormTextBox({
                    valueChangeEventName: "mockPathChange",
                    options: {
                        placeholder: this._state.settings.mockPath
                    },
                    display: i18n.content.config.mockPathDisplay
                })
            },
            {
                spyPathTextBox: new FormTextBox({
                    valueChangeEventName: "spyPathChange",
                    options: {
                        placeholder: this._state.settings.spyPath
                    },
                    display: i18n.content.config.spyPathDisplay
                })
            },
            {
                usesFusionCheckbox: new FormCheckbox({
                    display: i18n.content.config.usesFusionDisplay,
                    value: this._state.settings.usesFusion,
                    valueChangeEventName: "usesFusionChange"
                })
            },
            {
                targetNamesDropDown: new FormSelect({
                    valueChangeEventName: "targetChange",
                    options: {
                        placeholder: i18n.content.config.selectTarget,
                        items: []
                    },
                    display: i18n.content.config.targetDisplay
                })
            },
            {
                saveChangesButton: new Button({
                    display: i18n.content.config.saveDisplay,
                    clickEventName: "saveForm",
                    type: "primary",
                    disabled: true
                })
            },
            {
                spinner: new LoadingSpinner({
                    isLoading: true,
                    size: LoadingSpinner.SIZE.LARGE
                })
            }
            /*,
            {
                saveSuccessNotify: new Notify({
                    content: [
                        new NotifyMessage({
                            display: "Settings saved successfully. Re-running unit tests now."
                        })
                    ]
                })
            }*/
        ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        Object.keys(this._state.settings).filter((fieldName) => fieldName !== "target").forEach((fieldName) => {
            this.on(`${ fieldName }Change`, (context, { value, isValid }) => {
                this.stopPropagation(`${ fieldName }Change`);
                this._state.settings[ fieldName ] = value;
                this.update();
            });
        });

        this.on("saveForm", () => {
            this.stopPropagation("saveForm");
            this.setState({ submitted: true});
            this.getChild("saveChangesButton").setProp("disabled", true);
            this.update();
            saveConfig(this._state.settings, this);
        });

        this.on("targetChange", (context, {value, isValid}) => {
            this.stopPropagation("targetChange");
            if (!value) {
                this.setProp("externalsList", i18n.content.config.selectAbove);
                this.setState({ settings: Object.assign({}, this._state.settings, { externals: {}, target: value }) });
                this.update();
                return;
            }
            getTargetExternals(value)
                .then((externals) => {
                    if (externals) {
                        //if externals exist, set prop to string version and set setting to json version
                        this.setProp("externalsList", JSON.stringify(externals, null, "\t"));
                        this.setState({ settings: Object.assign({}, this._state.settings, { externals: externals, target: value }) });
                    } else {
                        //if externals do not exist, set prop to string saying so and setting to empty object
                        this.setProp("externalsList", i18n.content.config.noExternals);
                        this.setState({ settings: Object.assign({}, this._state.settings, { externals: {} , target: value}) });
                    }
                    this.update();
                });
        });
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            { class: "gaia-plugin-UnitTester gaia-root-section" },
            el("div", {}, [mappedChildren.spinner.render()]),
            header(i18n.content.config.testHeader),
            el(
                "section",
                { class: "gaia-section" },
                [
                    mappedChildren.testRunner.render(),
                    mappedChildren.singleRunCheckbox.render(),
                    mappedChildren.browserCheckboxGroup.render()
                ]
            ),
            el("hr", {}),
            header(i18n.content.config.pathHeader),
            el(
                "section",
                { class: "gaia-section" },
                [
                    mappedChildren.srcPathTextBox.render(),
                    mappedChildren.unitTestPathTextBox.render(),
                    mappedChildren.specPathTextBox.render(),
                    mappedChildren.mockPathTextBox.render(),
                    mappedChildren.spyPathTextBox.render()
                ]
            ),
            el("hr", {}),
            header(i18n.content.config.otherHeader),
            el(
                "section",
                { class: "gaia-section" },
                [
                    mappedChildren.usesFusionCheckbox.render(),
                    mappedChildren.targetNamesDropDown.render(),
                    el("div", { class: "wrap-json" }, props.externalsList)
                ]
            ),
            el("div", { class: "mpageui-u-flexgrid-row" }, [
                el("div", { class: "mpageui-u-flexgrid-col-sm-6 mpageui-u-flexgrid-col-12" },
                    mappedChildren.saveChangesButton.render()
                )/*,
                el("div", { class: "mpageui-u-flexgrid-col-sm-6 mpageui-u-flexgrid-col-12" },
                    mappedChildren.saveSuccessNotify.render()
                )*/
            ])
        );
    }
};
