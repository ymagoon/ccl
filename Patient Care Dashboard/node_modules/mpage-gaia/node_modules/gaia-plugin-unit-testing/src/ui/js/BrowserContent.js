import { UIComponent } from "MPageFusion";
import ResultsSummary from "./ResultsSummary";
import i18n from "../../i18n/en_us";

/**
 * Combines the errors from an array to a string, each on a new line
 * @function renderErrors
 * @param errors The errors array from the test result output
 * @returns {String} The errors in a string, each on a new line
 */
const renderErrors = errors => {
    if (errors) return errors.join("\n");
};

/**
 * Parses through the failures array from the test result output.
 * For each failure, it joins the suite into a string, each piece on a new line.
 * It trims the error messages and joins them each on a new line.
 * Then it returns the suite, description, and error.
 * @function parseFailures
 * @param results The results from the test result output
 * @param el The element object
 * @returns {Array} The array of failures setup in an easy to read format
 */
const parseFailures = (results, el) => {
    if (results.errors.length) return [];

    if (!results.failures.length) return [i18n.content.browserContent.allPass];

    return results.failures.map((result) => {
        const suiteStr = result.suite.join("\n");
        const errorLog = result.log.map(function(str) {
            return str.trim();
        }).join("\n");

        return [
            ...[el("div", {}, `${suiteStr}\n\t${result.description}`)],
            ...[el("div", { style: "color: red; font-weight: bold; margin: 0 0 10px 60px;" }, errorLog)]
        ];
    });
};

/**
 * Updates the summary content for the browser output
 * @function renderSummary
 * @param browserContent The BrowserContent object
 * @param results The test results output
 * @returns {undefined}
 */
const renderSummary = (browserContent, results) => {
    browserContent.getChild("browserSummary").setProp("summary", results.lastResult);
    browserContent.update();
};

/**
 * @class BrowserContent
 */
export default class BrowserContent extends UIComponent {

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            browsers: {}
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                browserSummary: new ResultsSummary()
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        renderSummary(this, this.getProp("browsers").browser);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            { class: "mpageui-u-pad-relative-base" },
            [
                el("div", {}, mappedChildren.browserSummary.render()),
                el("div", { style: "color: red; font-weight: bold; white-space: pre-wrap;" }, renderErrors(props.browsers.errors)),
                el("div", { style: "white-space: pre-wrap;" }, parseFailures(props.browsers, el))
            ]
        );
    }
}
