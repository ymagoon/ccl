/**
 * Mostly copied from https://github.com/tanenbaum/karma-structured-json-reporter
 * Changed slightly to contain a failures array and output the file to a specified directory
 */
var path = require('path');
var fs = require('fs');

/**
 * Writes the json test result output to a file and directory specified in the karma config
 * @param config The config passed in from the karma.conf.js file
 * @param output The test result output
 * @param helper An object with helper functions from karma
 */
function writeOutput(config, output, helper) {
    if (config.outputFile) {
        var filePath = path.resolve(process.cwd(), config.outputDir, config.outputFile);

        helper.mkdirIfNotExists(path.dirname(filePath), function() {
            fs.writeFile(filePath, JSON.stringify(output, null, 4), function(err) {
                if (err) {
                    console.log('Cannot write test results to JSON file\n\t' + err.message);
                } else {
                    console.log('Test results were written to JSON file ' + filePath);
                }
            });
        });
    } else {
        process.stdout.write(JSON.stringify(output));
    }
}

var JsonResultReporter = function(baseReporterDecorator, formatError, config, helper, logger) {

    var self = this;

    baseReporterDecorator(self);

    var logMessageFormater = function(error) {
        return formatError(error)
    };

    function getBrowser(browser) {
        var b = self.browsers[browser.id];

        if (b) {
            return b;
        }

        var newRecord = {
            browser: {
                id: browser.id,
                fullName: browser.fullName,
                name: browser.name,
                state: browser.state,
                lastResult: browser.lastResult,
                disconnectsCount: browser.disconnectsCount
            },
            errors: [],
            failures: [],
            results: []
        };

        self.browsers[browser.id] = newRecord;

        return newRecord;
    }

    self.clear = function() {
        self.browsers = {};
    };

    self.onBrowserError = function(browser, error) {
        getBrowser(browser).errors.push(error);
    };

    self.onSpecComplete = function(browser, result) {
        // convert newlines into array and flatten
        result.log = [].concat.apply([], result.log.map(function(message) {
            return message.split('\n');
        }));

        if (!result.success) {
            getBrowser(browser).failures.push(result);
        }

        getBrowser(browser).results.push(result);
    };

    self.onRunComplete = function(browsers, summary) {
        var browserResults = [];

        for (var browserId in self.browsers) {
            var browser = self.browsers[browserId];

            browser.errors = browser.errors.map(logMessageFormater);

            browserResults.push(browser);
        }

        var output = {
            summary: summary,
            browsers: browserResults
        };

        writeOutput(config, output, helper, logger);

        self.clear();
    };

    self.clear();
};

JsonResultReporter.$inject = ['baseReporterDecorator', 'formatError', 'config.jsonResultReporter', 'helper', 'logger'];

module.exports = {
    'reporter:json-result': ['type', JsonResultReporter]
};
