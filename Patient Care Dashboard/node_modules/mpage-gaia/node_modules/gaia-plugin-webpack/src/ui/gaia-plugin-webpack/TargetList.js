import * as Fusion from "MPageFusion";
import Target from "./Target";

const TARGET_CHANGE = "Internal::TargetList::TargetChange";
const TARGET_DELETED = "Internal::TargetList::TargetDelete";
const RUN_WATCH_SERVER = "Internal::TargetList::RunWatchServer";
const RUN_DEV_SERVER = "Internal::TargetList::RunDevServer";

export default class TargetList extends Fusion.UIComponent {

    initialProps() {
        return {
            targets: {},
            targetsChangeEventName: null,
            runWatchServerEventName: null,
            runDevServerEventName: null,
            showServerButtons: true
        };
    }

    dependentPropChangeHandlers() {
        return [
            [ "targets", "showServerButtons",
              (targets, showServerButtons) =>
              this.replaceAllChildren(
                  targets.map(
                      (target, i) => new Target({
                          targetChangeEventName: TARGET_CHANGE,
                          targetSettings: target,
                          deleteEventName: TARGET_DELETED,
                          runDevServerEventName: RUN_DEV_SERVER,
                          runWatchServerEventName: RUN_WATCH_SERVER,
                          _targetIndex: i,
                          showServerButtons: showServerButtons
                      })
                  )
              )
            ]
        ];
    }

    afterCreate() {
        this.convertEventUsingProp(
            TARGET_DELETED,
            "targetsChangeEventName",
            (source) => {
                const newTargetList = this.getProp("targets").slice(0);
                newTargetList.splice(source.getProp("_targetIndex"), 1);
                return [ this, newTargetList ];
            }
        );

        this.convertEventUsingProp(
            TARGET_CHANGE,
            "targetsChangeEventName",
            (source, newTarget) => {
                const newTargetList = this.getProp("targets").slice(0);
                newTargetList[source.getProp("_targetIndex")] = newTarget;
                return [
                    this,
                    newTargetList
                ];
            }
        );

        this.convertEventUsingProp(
            RUN_WATCH_SERVER,
            "runWatchServerEventName",
            (source, target) => [ this, target ]
        );

        this.convertEventUsingProp(
            RUN_DEV_SERVER,
            "runDevServerEventName",
            (source, target) => [ this, target ]
        );
    }

    view(el, props, children) {
        return this.renderChildren();
    }
}
