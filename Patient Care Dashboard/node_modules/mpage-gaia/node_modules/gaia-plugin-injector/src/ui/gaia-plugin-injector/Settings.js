import * as Fusion from "MPageFusion";
import { MATCHING_MODES } from "./../../constants";

const { forwardProp } = Fusion.helpers.props;
const FormTextBox = Fusion.composite.form.FormTextBox;
const Label = Fusion.atomic.label.Label;
const ButtonGroup = Fusion.composite.button.ButtonGroup;

const TARGET_URL_CHANGE = "Internal::Settings::TargetUrlChange";
const MATCHING_MODE_CHANGE = "Internal::Settings::MatchingModeChange";

const buildMatchingModeItems = (matchingMode) => [{
    display: "Strict",
    id: MATCHING_MODES.STRICT,
    isSelected: matchingMode === MATCHING_MODES.STRICT
}, {
    display: "Return First",
    id: MATCHING_MODES.RETURN_FIRST,
    isSelected: matchingMode === MATCHING_MODES.RETURN_FIRST
}];

export default class Settings extends Fusion.UIComponent {
    initialProps() {
        return {
            targetUrl: "",
            targetUrlChangedEventName: "Settings::TargetUrlChange",
            matchingModeChangedEventName: "Settings::MatchingModeChange"
        };
    }

    propChangeHandlers() {
        return {
            targetUrl: forwardProp(this, "value", "targetUrl"),
            matchingMode: (matchingMode) => {
                if (matchingMode != null) {
                    this.getChild("matchingMode").setProp("items", buildMatchingModeItems(matchingMode));
                }
            }
        };
    }

    createChildren({ props }) {
        return [
            {
                targetUrl: new FormTextBox({
                    display: "Target URL",
                    classNames: "mpageui-u-flexgrid-col",
                    valueChangeEventName: TARGET_URL_CHANGE
                })
            },
            {
                label: new Label({ value: "Parameter matching mode: "})
            },
            {
                matchingMode: new ButtonGroup({
                    canDeselect: false,
                    multiSelect: false,
                    selectionChangeEventName: MATCHING_MODE_CHANGE,
                    items: buildMatchingModeItems(props.matchingMode)
                })
            }
        ];
    }

    afterCreate() {
        this.convertEventUsingProp(
            TARGET_URL_CHANGE,
            "targetUrlChangedEventName",
            (source, value) => [ this, value.value ]
        );

        this.convertEventUsingProp(
            MATCHING_MODE_CHANGE,
            "matchingModeChangedEventName",
            (source, value) => [ this, value.selected.ids[0] ]
        );
    }

    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}
