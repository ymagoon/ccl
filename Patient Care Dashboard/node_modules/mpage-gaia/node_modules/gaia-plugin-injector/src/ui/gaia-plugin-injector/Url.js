import * as Fusion from "MPageFusion";
import TextboxList from "./TextboxList";

const UIComponent = Fusion.UIComponent;
const Button = Fusion.atomic.button.Button;
const Textbox = Fusion.composite.form.FormTextBox;
const forwardProp = Fusion.helpers.props.forwardProp;

const URL_CHANGE_EVENT = "Internal::Url::UrlChange";
const VALUE_CHANGE_EVENT = "Internal::Url::ValueChange";
const VALUE_ADDED_EVENT = "Internal::Url::ValueAdded";
const VALUE_DELETE_EVENT = "Internal::Url::ValueRemoved";

export default class Url extends Fusion.UIComponent {
    initialProps() {
        return {
            urlValue: "",
            values: [],
            valueChangeEventName: "Url::ValueChange",
            valueDeleteEventName: "Url::ValueDelete",
            valueAddedEventName: "Url::ValueAdded",
            urlChangeEventName: "Url::UrlChange"
        };
    }

    createChildren() {
        return [
            {
                urlTextbox: new Textbox({
                    valueChangeEventName: URL_CHANGE_EVENT
                })
            },
            {
                urlList: new TextboxList({
                    valueChangeEventName: VALUE_CHANGE_EVENT,
                    valueDeleteEventName: VALUE_DELETE_EVENT
                })
            },
            {
                plusAdd: new Button({
                    clickEventName: VALUE_ADDED_EVENT
                })
            }
        ];
    }

    propChangeHandlers() {
        return {
            urlValue: forwardProp(this, "value", "urlTextbox"),
            values: forwardProp(this, "values", "urlList")
        };
    }

    afterCreate() {
        this.convertEventUsingProp(
            URL_CHANGE_EVENT,
            "urlChangeEventName",
            (source, value) =>
                [ this,
                  {
                      originalUrl: this.getProp("urlValue"),
                      newUrl: value
                  }
                ]
        );

        this.convertEventUsingProp(
            VALUE_CHANGE_EVENT,
            "valueChangeEventName",
            (source, { value, index }) =>
                [
                    this,
                    {
                        url: this.getProp("urlValue"),
                        value,
                        index
                    }
                ]
        );

        this.convertEventUsingProp(
            VALUE_ADDED_EVENT,
            "valueAddedEventName",
            (source, value) => [
                this,
                {
                    url: this.getProp("urlValue"),
                    value: value
                }
            ]
        );

        this.convertEventUsingProp(
            VALUE_DELETE_EVENT,
            "valueDeleteEventName",
            (source, { index, value }) =>
                [
                    this,
                    {
                        url: this.getProp("urlValue"),
                        value: value,
                        index: index
                    }
                ]
        );
    }
}
