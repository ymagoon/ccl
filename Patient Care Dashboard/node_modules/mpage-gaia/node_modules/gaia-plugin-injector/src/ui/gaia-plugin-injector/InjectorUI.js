
import * as Fusion from "MPageFusion";
import { routeUrl } from "Gaia";
import Settings from "./Settings";
import UrlList from "./UrlList";

const { forwardProp } = MPageFusion.helpers.props;
const Button = Fusion.atomic.button.Button;
const ContentHeader = Fusion.atomic.header.ContentHeader;
const BannerItem = Fusion.composite.banner.BannerItem;

const URLS_CHANGED = "Internal::InjectorUI::UrlsChanged";
const ADD_URL = "Internal::InjectorUI::AddUrl";
const TARGET_URL_CHANGED = "Internal::InjectorUI::SettingsChanged";
const MATCHING_MODE_CHANGED = "Internal::InjectorUI::MatchingModeChange";


const cloneJson = (json) =>
      JSON.parse(JSON.stringify(json));

const changeTargetUrl = (targetUrl, settings) => {
    settings.targetUrl = targetUrl;
    return settings;
};

const addEmptyUrl = (urls) =>
    urls.concat({url: "", top: [], bottom: []});

export default class InjectorUI extends Fusion.UIComponent {

    initialProps() {
        return {
            settings: {},
            urls: [],
            matchingMode: null,
            urlsChangedEventName: "InjectorUI::UrlsChanged",
            settingsChangedEventName: "InjectorUI:SettingsChanged",
            matchingModeChangedEventName: "InjectorUI:MatchingModeChanged"
        };
    }

    propChangeHandlers() {
        return {
            settings: (settings) => {
                this
                    .getChild("settings")
                    .setProp("targetUrl", settings.targetUrl);
            },
            urls: forwardProp(this, "urls", "urllist"),
            matchingMode: matchingMode => this.getChild("settings").setProp("matchingMode", matchingMode)
        };
    }

    createChildren() {
        return [
            {
                settings: new Settings({
                    targetUrlChangedEventName: TARGET_URL_CHANGED,
                    matchingModeChangedEventName: MATCHING_MODE_CHANGED
                })
            },
            {
                urllist: new UrlList({
                    urlsChangeEventName: URLS_CHANGED
                })
            },
            {
                addUrl: new Button({
                    display: "Add URL",
                    clickEventName: ADD_URL
                })
            }
        ];
    }

    afterCreate() {
        this.convertEventUsingProp(
            URLS_CHANGED,
            "urlsChangedEventName",
            (source, urls) => [ this, urls ]
        );
        this.convertEventUsingProp(
            TARGET_URL_CHANGED,
            "settingsChangedEventName",
            (source, targetUrl) =>
                [
                    this,
                    changeTargetUrl(targetUrl, cloneJson(this.getProp("settings")))
                ]
        );
        this.convertEventUsingProp(
            MATCHING_MODE_CHANGED,
            "matchingModeChangedEventName",
            (source, value) => [ this, value ]
        );
        this.convertEventUsingProp(
            ADD_URL,
            "urlsChangedEventName",
            (source) => [ this, addEmptyUrl( cloneJson(this.getProp("urls"))) ]
        );
    }

    view(el, props, children, mChildren) {
        return el(
            "div",
            {
                class: "gaia-root-section"
            },
            [
                new BannerItem({
                    title: "Injector will run at",
                    description: `${routeUrl("injector","inject")}/[original url path]`,
                    enableDismissClick: false
                }).render(),
                new ContentHeader({title: "Settings"}).render(),
                el("section", { class: "gaia-section" }, [
                    mChildren.settings.render()
                ] ),
                new ContentHeader({title: "Urls"}).render(),
                el("section", { class: "gaia-section" }, [
                    mChildren.urllist.render(),
                    mChildren.addUrl.render()
                ])
            ]
        );
    }
};
