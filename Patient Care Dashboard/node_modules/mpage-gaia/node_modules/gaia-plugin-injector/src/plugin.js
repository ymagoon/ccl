const commands = require("./commands");
const route = require("./route");
const ProxyRecorder = require("./ProxyRecorder");
const {RECORD_STATES} = require("./constants");
const gaiaJsonDescription =
    [
        "The full path of the file to read from. Defaults to the current",
        "directory's gaia.json if not provided. "
    ].join(" ");

// Attach recorder to HTTP Proxy server generated from route and default to live data
const initialState = {
    recorder: new ProxyRecorder(route.httpProxy),
    recordingState: RECORD_STATES.LIVE
};

module.exports = {
    id: "injector",
    commands: {
        readSettings: {
            description: "Returns the injector settings, such as proxy port and content host.",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }

            },
            handler: commands.readSettings

        },
        saveSettings: {
            description: [
                "Saves the injector settings. See the settings argument",
                "for the format."
            ].join(" "),
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                },
                settings: {
                    description: [
                        "A json with the following fields: ",
                        " - prefix: prefix to be added to each file.",
                        " - targetUrl: the server that will receive the requests."
                    ].join("\r\n")
                }
            },
            handler: commands.saveSettings
        },
        saveUrls: {
            description: "All the files that will be added to the request when an url is loaded",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                },
                urls: {
                    description: [
                        "A JSON map between a url regex and all the files that will be added to",
                        "the HTTP reply of that url. For example, this will add file1.js and",
                        "file2.js to all calls to mp_unified_driver:\r\n",
                        "\r\n",
                        "\"mp_unified_driver\": [\r\n",
                        "   \"file1.js\", \r\n",
                        "   \"file2.js\" \r\n",
                        "]\r\n"
                    ].join(" ")
                }
            },
            handler: commands.saveUrls
        },
        readUrls: {
            description: "Returns all the URLs saved with the saveUrls command",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }
            },
            handler: commands.readUrls
        },
        readMockCollection: {
            description: "Returns the parsed contents of the JSON file using the filepath specified.",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                },
                filePath: {
                    description: "File path of the json file containing the mock responses."
                }
            },
            handler: commands.readMockCollection
        },
        readMockResponses: {
            description: "Returns mock responses configuration object saved with the saveMockResponses command",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }
            },
            handler: commands.readMockResponses
        },
        saveMockResponses: {
            description: [
                "Saves mock response settings."
            ].join(" "),
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                },
                mockResponseLocation: {
                    description: "mockFileLocation: Location of the json file with mocked responses."
                },
                mockCollectionName: {
                    description: "Key value of the collection of mocked responses."
                }
            },
            handler: commands.saveMockResponses
        },
        saveCollection: {
            description: "Saves the collection that was recorded",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }
            },
            handler: commands.saveCollection
        },
        changeRecordState: {
            description: "Handles changes in the record state for injector",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }
            },
            handler: commands.changeRecordState
        },
        changeMatchingMode: {
            description: "Handles changes in the matching mode for injector",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }
            },
            handler: commands.changeMatchingMode
        },
        retrieveMockResponseCollectionNames: {
            description: "Returns the collection names from the current mock collection",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }
            },
            handler: commands.retrieveMockResponseCollectionNames
        },
        readFullMockSettings: {
            description: "Returns the full current settings for mock responses",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }
            },
            handler: commands.readFullMockSettings
        },
        readMatchingMode: {
            description: "Returns the matching mode for mock responses",
            args: {
                gaiaJson: {
                    description: gaiaJsonDescription
                }
            },
            handler: commands.readMatchingMode
        }
    },
    routes: {
        inject: {
            description: "Runs the injector",
            handler: route.inject
        }
    },
    ui: "dist/ui.js",
    initialState: initialState,
    markdown: {
        ui: "docs/ui-guide.md"
    }
};
