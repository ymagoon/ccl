const { getReportNameFromUrl } = require("./mockRequestManager");
const {
    getRequestParameters,
    getRequestBlobIn
} = require("./helpers");

/**
 * Generate an object containing details on the requests being captured
 * @param  {HttpRequest} req HTTP Request triggering the request/response to collect details for
 * @returns {Object}      Object to consolidate details on the outgoing request and incoming response
 */
const initCapturedRequest = (req) => {
    const url = req.params[0] || req.url;
    const reportName = getReportNameFromUrl(url);
    const parameters = getRequestParameters(req);
    const blobIn = getRequestBlobIn(req);

    return {
        "req": req,
        "reqBody": [],
        "resBody": [],
        "response": "",
        "url": url,
        "script": reportName,
        "params": parameters,
        "blobIn": blobIn
    };
};

/**
 * @class ProxyRecorder Monitors and records requests from the passed HTTP Proxy Server
 */
class ProxyRecorder {
    /**
     * @constructor
     */
    constructor(proxy) {
        this.listenToProxy(proxy);
    }

    /**
     * Listens to HTTP Proxy server events to monitor requests and responses
     * @param  {HttpProxy} proxy - proxy HTTP server to listen to outgoing requests and incoming responses to record
     * @returns {undefined}       undefined
     */
    listenToProxy(proxy) {
        this._proxy = proxy;
        // Obtain request details when the request goes out
        proxy.on("proxyReq", (proxyReq, req, res) => {
            if (this._isRecording) {
                const capturedRequest = initCapturedRequest(req);
                this._recordedRequests.push(capturedRequest);
                proxyReq.on("data", (data) => {
                    capturedRequest.reqBody.push(data);
                });
            }
        });
        // Obtain response details from returned response
        proxy.on("proxyRes", (proxyRes, req, res) => {
            if (this._isRecording) {
                const matchingCaptured = this.getMatchingCapturedRequest(req);
                proxyRes.on("data", (data, encoding) => {
                    matchingCaptured.resBody.push(data.toString(encoding));
                });
                proxyRes.on("end", () => {
                    matchingCaptured.response = matchingCaptured.resBody.join("");
                    delete matchingCaptured["req"];
                });
            }
        });
    }

    /**
     * Returns a capture request object that matches the passed through request stream
     * @param  {Request} req Request to check for
     * @returns {Object}  Returns the matching object representing the corresponding captured request, undefined if not found
     */
    getMatchingCapturedRequest(req) {
        return this._recordedRequests.find(captured => req === captured.req);
    }

    /**
     * Turns off recording of requests/responses
     * @returns {undefined} undefined
     */
    stopRecording() {
        this._isRecording = false;
    }

    /**
     * Starts a recording session to recording requests and response
     * @returns {undefined} undefined
     */
    startRecording() {
        this._recordedRequests = [];
        this._isRecording = true;
    }

    /**
     * Returns the latest requests/response structures that have been recorded
     * @return {Array<Object>} The recorded requests
     */
    getCapturedRequests() {
        return this._recordedRequests;
    }
}

module.exports = ProxyRecorder;
