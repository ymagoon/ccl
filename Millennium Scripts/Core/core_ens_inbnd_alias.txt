 ;;Solution_Test/script/Database Architecture -- Foundations/Core Code Builder/CORE_ENS_INBND_ALIAS.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2003 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:       CORE_ENS_INBND_ALIAS.PRG
        Object name:            CORE_ENS_INBND_ALIAS
        Request #:              4171671
 
        Product:                Core Code Builder
        Product Team:           KIA
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Insert/Update/Delete entries from the CODE_VALUE_ALIAS
                                table.
 
        Tables read:             -
        Tables updated:         CODE_VALUE_ALIAS
 
        Executing from:         Core Programs
 
******************************************************************************/
 
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date       Engineeer          Comment                             *
;    *--- ---------- ------------------ ----------------------------------- *
;     ### 03/21/2003 Jonathan Fewins    Initial Release                     *
;     001 07/18/2007 Kyle Vanderbilt    Add alias_type_meaning to dup check *
;~DE~************************************************************************
 
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program core_ens_inbnd_alias:dba go
create program core_ens_inbnd_alias:dba
 
/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
/*
record request
(
  1 inbnd_alias_list[*]
    2 action_type_flag          = i2 ;(1:insert) (2:update) (3:delete)
    2 alias                     = vc
    2 old_alias                 = vc
    2 alias_type_meaning        = vc
    2 code_set                  = i4
    2 code_value                = f8
    2 contributor_source_cd     = f8
    2 old_contributor_source_cd = f8
    2 primary_ind               = i2
    2 old_alias_type_meaning    = vc ;002 - Use to query for existing inbound alias
)
*/
 
/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
free record reply
record reply
(
  1 curqual     = i4
  1 qual[*]
    2 status    = i2
    2 error_num = i4
    2 error_msg = vc
%i cclsource:status_block.inc
)
 
/****************************************************************************
*       Declare Subroutines                                                 *
*****************************************************************************/
declare insert_inbnd_alias(aidx = i4) = null
declare update_inbnd_alias(aidx = i4) = null
declare delete_inbnd_alias(aidx = i4) = null
declare create_message(action = i2, cs_cd = f8, cv = f8, cs = i4, alias = vc) = null
 
/****************************************************************************
*       Declare Variables                                                   *
*****************************************************************************/
declare script_version = vc with public, noconstant(" ")
declare failed         = c1 with public, noconstant("F")
declare req_cnt        = i4 with public, noconstant(size(request->inbnd_alias_list, 5))
declare xvar           = i4 with public, noconstant(0)
declare errmsg         = vc with public, noconstant(fillstring(132," "))
declare error_text     = vc with public, noconstant(" ")
declare alias_type_meaning = vc with public, noconstant(" ") ;001
declare old_alias_type_meaning = vc with public, noconstant(" ") ;001
 
/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
set reply->status_data->status = "F"
set stat = alterlist(reply->qual, req_cnt)
 
/****************************************************************************
*       Loop through request structure and execute the desire actions       *
*****************************************************************************/
for (xvar = 1 to req_cnt)
 
    ; Replace any "<sp>" entries with a " "
    if (cnvtlower(request->inbnd_alias_list[xvar]->alias) = "<sp>")
        set request->inbnd_alias_list[xvar]->alias = " "
    endif
 
    ; Replace any "<sp>" entries with a " "
    if (cnvtlower(request->inbnd_alias_list[xvar]->old_alias) = "<sp>")
        set request->inbnd_alias_list[xvar]->old_alias = " "
    endif
    
    ; 001 - Set alias_type_meaning variable to value in request or " "
    if(request->inbnd_alias_list[xvar]->alias_type_meaning > " ")
    	set alias_type_meaning = trim(cnvtupper(substring(1,12,request->
                                            inbnd_alias_list[xvar]->
                                             alias_type_meaning)))   
	else
		set alias_type_meaning = " "
	endif 
	                          
	
    ; 001 - Set old_alias_type_meaning variable to value in request or " "
    if(request->inbnd_alias_list[xvar]->old_alias_type_meaning > " ")
    	set old_alias_type_meaning = trim(cnvtupper(substring(1,12,request->
                                            inbnd_alias_list[xvar]->
                                            old_alias_type_meaning)))   
	else
		set old_alias_type_meaning = " "
	endif   	                                          
 
    ; Send the current entry to the correct action subroutine
    case (request->inbnd_alias_list[xvar]->action_type_flag)
        of 1:
            call insert_inbnd_alias(xvar)
 
        of 2:
            call update_inbnd_alias(xvar)
 
        of 3:
            call delete_inbnd_alias(xvar)
 
        else
            set failed = "T"
            set stat = alterlist(reply->qual, xvar)
            set reply->qual[xvar]->status    = 0
            set reply->qual[xvar]->error_msg = build("Could not recognize",
                " action_type_flag:",request->inbnd_alias_list[xvar]->action_type_flag,".")
            go to EXIT_SCRIPT
    endcase
 
endfor
 
go to EXIT_SCRIPT
 
/****************************************************************************
*       subroutine insert_inbnd_alias                                       *
*****************************************************************************/
subroutine insert_inbnd_alias(aidx)
 
    ; Check for a duplicate combination of contributor source,alias, and alias_type_meaning
    select into "nl:"
        cva.contributor_source_cd,
        cva.alias,
        cva.code_set,
/*001*/ cva.alias_type_meaning
    from
        code_value_alias cva
    plan cva where
        cva.contributor_source_cd = request->inbnd_alias_list[aidx]->
            contributor_source_cd and
        cva.alias = request->inbnd_alias_list[aidx]->alias and
	    cva.code_set = request->inbnd_alias_list[aidx]->code_set and ;001
/*001*/ cva.alias_type_meaning = alias_type_meaning
    with nocounter
 
    if (curqual > 0)
        set failed = "T"
        set stat = alterlist(reply->qual, aidx)
        set reply->qual[aidx]->status = 0
        call create_message(request->inbnd_alias_list[aidx]->action_type_flag,
            request->inbnd_alias_list[aidx]->contributor_source_cd,
            request->inbnd_alias_list[aidx]->code_value,
            request->inbnd_alias_list[aidx]->code_set,
;001           request->inbnd_alias_list[aidx]->alias),
/*001*/     request->inbnd_alias_list[aidx]->alias,
/*001*/     request->inbnd_alias_list[aidx]->alias_type_meaning)
        set reply->qual[aidx]->error_msg = error_text
        go to EXIT_SCRIPT
    endif
 
    ; Execute the insert statement
    insert into code_value_alias cva set
        cva.alias                 = request->inbnd_alias_list[aidx]->alias,
        cva.alias_type_meaning    = ;001 if (request->inbnd_alias_list[aidx]->
                                        ; 001 alias_type_meaning = '""')
                                        ;001 NULL
                                    ;001 else
                                        ;001 trim(cnvtupper(substring(1,12,request->
                                            ;001 inbnd_alias_list[aidx]->
                                            ;001 alias_type_meaning))),
                                    ;endif,
                                    alias_type_meaning, ;001
        cva.primary_ind           = if (request->inbnd_alias_list[aidx]->primary_ind <= 0)
                                        0
                                    else
                                        request->inbnd_alias_list[aidx]->primary_ind
                                    endif,
        cva.contributor_source_cd = request->inbnd_alias_list[aidx]->
                                        contributor_source_cd,
        cva.code_set              = request->inbnd_alias_list[aidx]->code_set,
        cva.code_value            = request->inbnd_alias_list[aidx]->code_value,
        cva.updt_dt_tm            = cnvtdatetime(curdate,curtime3),
        cva.updt_id               = reqinfo->updt_id,
        cva.updt_cnt              = 0,
        cva.updt_task             = reqinfo->updt_task,
        cva.updt_applctx          = reqinfo->updt_applctx
    with nocounter
 
    set reply->curqual = reply->curqual + curqual
 
    set errorcode = error(errmsg, 0)
    if (errorcode != 0) ; there was an error
        set reply->qual[aidx]->status    = 0
        set reply->qual[aidx]->error_num = errorcode
        set reply->qual[aidx]->error_msg = errmsg
        set reply->status_data->status   = "F"
    else
        set reply->qual[aidx]->status    = curqual
        set reply->qual[aidx]->error_num = 0
        set reply->qual[aidx]->error_msg = ""
        set reply->status_data->status   = "S"
    endif
 
    if (reply->status_data->status = "F")
        set failed = "T"
        go to EXIT_SCRIPT
    endif
 
end
 
/****************************************************************************
*       subroutine update_inbnd_alias                                       *
*****************************************************************************/
subroutine update_inbnd_alias(aidx)
 
    ; Check for a the existence of this alias
    select into "nl:"
        cva.contributor_source_cd,
        cva.alias,
        cva.code_set,
/*001*/ cva.alias_type_meaning
    from
        code_value_alias cva
    plan cva where
        cva.contributor_source_cd = request->inbnd_alias_list[aidx]->
            old_contributor_source_cd and
        cva.alias = request->inbnd_alias_list[aidx]->old_alias and
        cva.code_set = request->inbnd_alias_list[aidx]->code_set and
        cva.code_value = request->inbnd_alias_list[aidx]->code_value
/*001*/ and cva.alias_type_meaning = old_alias_type_meaning
    with nocounter
 
    if (curqual <= 0)
        set failed = "T"
        set stat = alterlist(reply->qual, aidx)
        set reply->qual[aidx]->status = 0
        call create_message(request->inbnd_alias_list[aidx]->action_type_flag,
            request->inbnd_alias_list[aidx]->old_contributor_source_cd,
            request->inbnd_alias_list[aidx]->code_value,
            request->inbnd_alias_list[aidx]->code_set,
;001        request->inbnd_alias_list[aidx]->old_alias),
/*001*/		request->inbnd_alias_list[aidx]->old_alias,
/*001*/     request->inbnd_alias_list[aidx]->old_alias_type_meaning)
        set reply->qual[aidx]->error_msg = error_text
        go to EXIT_SCRIPT
    endif
 
/* Start 001
    if (request->inbnd_alias_list[aidx]->contributor_source_cd !=
        request->inbnd_alias_list[aidx]->old_contributor_source_cd or
        request->inbnd_alias_list[aidx]->alias !=
        request->inbnd_alias_list[aidx]->old_alias)
End 001 */
 
/* Start 001 */
    if (request->inbnd_alias_list[aidx]->contributor_source_cd !=
        request->inbnd_alias_list[aidx]->old_contributor_source_cd or
        request->inbnd_alias_list[aidx]->alias !=
        request->inbnd_alias_list[aidx]->old_alias or
        request->inbnd_alias_list[aidx]->alias_type_meaning !=
        request->inbnd_alias_list[aidx]->old_alias_type_meaning)
/* End 001 */
        ; Check for a duplicate combination of contributor source and alias
        select into "nl:"
            cva.contributor_source_cd,
            cva.alias,
            cva.code_set,
/*001*/     cva.alias_type_meaning
        from
            code_value_alias cva
        plan cva where
            cva.contributor_source_cd = request->inbnd_alias_list[aidx]->
                contributor_source_cd and
            cva.alias = request->inbnd_alias_list[aidx]->alias and
	        cva.code_set = request->inbnd_alias_list[aidx]->code_set
/*001*/     and cva.alias_type_meaning = alias_type_meaning
        with nocounter
 
        if (curqual > 0)
            set failed = "T"
            set stat = alterlist(reply->qual, aidx)
            set reply->qual[aidx]->status = 0
            call create_message(1,
                request->inbnd_alias_list[aidx]->contributor_source_cd,
                request->inbnd_alias_list[aidx]->code_value,
                request->inbnd_alias_list[aidx]->code_set,
;001                request->inbnd_alias_list[aidx]->alias),
/*001*/ 		request->inbnd_alias_list[aidx]->alias,
/*001*/         request->inbnd_alias_list[aidx]->alias_type_meaning)
            set reply->qual[aidx]->error_msg = error_text
            go to EXIT_SCRIPT
        endif
    endif
 
    ; Execute the update statement
    update into code_value_alias cva set
        cva.alias                 = request->inbnd_alias_list[aidx]->alias,
        cva.alias_type_meaning    = ;001 if (request->inbnd_alias_list[aidx]->
                                        ;001 alias_type_meaning = '""')
                                        ;001 NULL
                                    ;001 else
                                        ;001 trim(cnvtupper(substring(1,12,request->
                                            ;001 inbnd_alias_list[aidx]->
                                            ;001 alias_type_meaning)))
                                    ;001 endif,
                                    alias_type_meaning,
        cva.primary_ind           = if (request->inbnd_alias_list[aidx]->primary_ind <= 0)
                                        0
                                    else
                                        request->inbnd_alias_list[aidx]->primary_ind
                                    endif,
        cva.contributor_source_cd = request->inbnd_alias_list[aidx]->
                                        contributor_source_cd,
        cva.updt_dt_tm            = cnvtdatetime(curdate,curtime3),
        cva.updt_id               = reqinfo->updt_id,
        cva.updt_cnt              = cva.updt_cnt + 1,
        cva.updt_task             = reqinfo->updt_task,
        cva.updt_applctx          = reqinfo->updt_applctx
    plan cva where
        cva.code_set = request->inbnd_alias_list[aidx]->code_set and
        cva.contributor_source_cd = request->inbnd_alias_list[aidx]->
            old_contributor_source_cd and
        cva.alias = request->inbnd_alias_list[aidx]->old_alias and
        cva.code_value = request->inbnd_alias_list[aidx]->code_value
/*001*/ and cva.alias_type_meaning = old_alias_type_meaning
    with nocounter
 
    set reply->curqual = reply->curqual + curqual

    set errorcode = error(errmsg, 0)
    if (errorcode != 0) ; there was an error
        set reply->qual[aidx]->status    = 0
        set reply->qual[aidx]->error_num = errorcode
        set reply->qual[aidx]->error_msg = errmsg
        set reply->status_data->status   = "F"
    else
        set reply->qual[aidx]->status    = curqual
        set reply->qual[aidx]->error_num = 0
        set reply->qual[aidx]->error_msg = ""
        set reply->status_data->status   = "S"
    endif
 
    if (reply->status_data->status = "F")
        set failed = "T"
        go to EXIT_SCRIPT
    endif
 
end
 
/****************************************************************************
*       subroutine delete_inbnd_alias                                       *
*****************************************************************************/
subroutine delete_inbnd_alias(aidx)
 
    ; Check for a the existence of this alias
    select into "nl:"
        cva.contributor_source_cd,
        cva.alias,
        cva.code_set,
/*001*/ cva.alias_type_meaning
    from
        code_value_alias cva
    plan cva where
        cva.contributor_source_cd = request->inbnd_alias_list[aidx]->
            contributor_source_cd and
        cva.alias = request->inbnd_alias_list[aidx]->alias and
        cva.code_set = request->inbnd_alias_list[aidx]->code_set and
        cva.code_value = request->inbnd_alias_list[aidx]->code_value
/*001*/ and cva.alias_type_meaning = alias_type_meaning
    with nocounter
 
    if (curqual <= 0)
        set failed = "T"
        set stat = alterlist(reply->qual, aidx)
        set reply->qual[aidx]->status = 0
        call create_message(request->inbnd_alias_list[aidx]->action_type_flag,
            request->inbnd_alias_list[aidx]->contributor_source_cd,
            request->inbnd_alias_list[aidx]->code_value,
            request->inbnd_alias_list[aidx]->code_set,
;001          request->inbnd_alias_list[aidx]->alias),
/*001*/		request->inbnd_alias_list[aidx]->alias,
/*001*/     request->inbnd_alias_list[aidx]->alias_type_meaning)
        set reply->qual[aidx]->error_msg = error_text
        go to EXIT_SCRIPT
    endif
 
    ; Execute delete statement
    delete from code_value_alias cva
    where
        cva.contributor_source_cd = request->inbnd_alias_list[aidx]->
            contributor_source_cd and
        cva.alias = request->inbnd_alias_list[aidx]->alias and
        cva.code_set = request->inbnd_alias_list[aidx]->code_set and
        cva.code_value = request->inbnd_alias_list[aidx]->code_value
/*001*/ and cva.alias_type_meaning = alias_type_meaning
    with nocounter
 
    set reply->curqual = reply->curqual + curqual
 
    set errorcode = error(errmsg, 0)
    if (errorcode != 0) ; there was an error
        set reply->qual[aidx]->status    = 0
        set reply->qual[aidx]->error_num = errorcode
        set reply->qual[aidx]->error_msg = errmsg
        set reply->status_data->status   = "F"
    else
        set reply->qual[aidx]->status    = curqual
        set reply->qual[aidx]->error_num = 0
        set reply->qual[aidx]->error_msg = ""
        set reply->status_data->status   = "S"
    endif
 
    if (reply->status_data->status = "F")
        set failed = "T"
        go to EXIT_SCRIPT
    endif
 
end
 
/****************************************************************************
*       subroutine create_message                                           *
*****************************************************************************/
subroutine create_message(action, cs_cd, cv, cs, alias, atm)
 
    set error_text = ""
    set contributor_disp = uar_get_code_display(cs_cd)
    set code_value_disp  = trim(cnvtstring(cv))
    set code_set_disp    = trim(cnvtstring(cs))
    set alias_disp       = trim(alias)
    set atm_disp 	     = trim(atm) ;001
 
    set error_text = "The code value alias with contributor source ( "
    set error_text = concat(error_text, contributor_disp)
    set error_text = concat(error_text, "), code set (")
    set error_text = concat(error_text, code_set_disp)
    set error_text = concat(error_text, "), code value (")
    set error_text = concat(error_text, code_value_disp)
;001    set error_text = concat(error_text, "), and alias (")
    set error_text = concat(error_text, "), alias (")
    set error_text = concat(error_text, alias_disp)
/*001*/    set error_text = concat(error_text, "), and alias type meaning (")
/*001*/    set error_text = concat(error_text, atm_disp)
    set error_text = concat(error_text, ") could not be ")
 
    case (action)
        of 1:
            set error_text = concat(error_text, " inserted because it already exists ")
        of 2:
            set error_text = concat(error_text, " updated because it does not exist ")
        of 3:
            set error_text = concat(error_text, " deleted because it does not exist ")
    endcase
 
    set error_text = concat(error_text, " on the CODE_VALUE_ALIAS table.")
    set error_text = concat(error_text,"  No changes were applied to the database.")
    call echo(error_text)
end
 
/****************************************************************************
*       EXIT_SCRIPT                                                         *
*****************************************************************************/
#EXIT_SCRIPT
 
if (failed = "T")
/*001*/ set reply->status_data.status = "F"
    set reqinfo->commit_ind = 0 ; do not commit
else
    set reqinfo->commit_ind = 1 ; commit
endif
 
;set script_version = "001 09/02/05 CERFTS"
/*001*/ set script_version = "002 08/10/07 KV011080"
 
end
go
 
 

;Generated by GNU enscript 1.6.4.
