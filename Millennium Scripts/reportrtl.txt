 ;;Solution_Test/script/Discern/reportrtl/reportrtl.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:       REPORTRTL.PRG
        Object name:            REPORTRTL
 
        Product:                Report RTL
        Product Team:           Application Architecture
 
        Program purpose:        Provide access to the functionallity of
                                ReportRtl through CCL
 
******************************************************************************/
;:~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 07/10/01 Eric Martin          Initial write                       *
;     001 03/05/10 DC016203             Allow Page of Page to be i18n.      *
;     002 05/01/14 MS2327               Add INTERMEC DP output types        *
;                                       remove VMS from uar_Rpt* declares   *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program REPORTRTL:dba go
create program REPORTRTL:dba
 
;;----------------------------------------------------------------------------
 
;; make sure we need to declare structures and entry points int report rtl
 
%i cclsource:i18n_uar.inc ;001
 
if ( ( validate( reportrtl_def , 0 ) = 1 ) )
  call echo("reportrtl_def defined")
   go to END_SCRIPT
 
endif
 
;;----------------------------------------------------------------------------
 
call echo( "Declaring Report RTL" )
 
declare reportrtl_def = i2 with constant( 1 ) , persist
declare i18nHandle = i4 with public, noconstant(0)
;;----------------------------------------------------------------------------
 
;; define structures needed for report rtl
 
free record RptReport
free record RptSD
free record RptFont
free record RptPen
free record RptError
free record RptErrors
free record RptBCE
set trace recpersist
 
record RptReport
(
   1 m_reportName   = c32
   1 m_pageWidth    = f8
   1 m_pageHeight   = f8
   1 m_marginLeft   = f8
   1 m_marginRight  = f8
   1 m_marginTop    = f8
   1 m_marginBottom = f8
   1 m_recSize      = i2
   1 m_orientation  = i2
   1 m_horzPrintOffset = f8
   1 m_vertPrintOffset = f8
   1 m_dioFlag      = i2
)
 
record RptSD
(
   1 m_x             = f8
   1 m_y             = f8
   1 m_height        = f8
   1 m_width         = f8
   1 m_paddingWidth  = f8
   1 m_lastLineWidth = f8
   1 m_flags         = i4
   1 m_drawLength    = i4
   1 m_borders       = i4
   1 m_padding       = i4
   1 m_recSize       = i2
   1 m_rotationAngle = i2
   1 m_lineSpacing   = i2
)
 
record RptFont
(
   1 m_fontName      = c32
   1 m_pointSize     = f8
   1 m_rgbColor      = i4
   1 m_recSize       = i2
   1 m_bold          = c1
   1 m_italic        = c1
   1 m_underline     = c1
   1 m_strikethrough = c1
)
 
record RptPen
(
   1 m_penWidth = f8
   1 m_rgbColor = i4
   1 m_recSize  = i2
   1 m_penStyle = i2
)
 
record RptError
(
   1 m_text     = c256
   1 m_source   = c64
   1 m_recSize  = i2
   1 m_severity = i2
)
 
record RptErrors
(
  1 Errors[*]
    2 m_text = c256
    2 m_source = c64
    2 m_severity = i2
)
 
record RptBCE
(
   1 m_recSize       = i2
   1 m_barCodeType   = i4
   1 m_topLeftX      = f8
   1 m_topLeftY      = f8
   1 m_width         = f8
   1 m_height        = f8
   1 m_barWidth      = i2
   1 m_rotation      = i2
   1 m_ratio         = i2
   1 m_bScale        = i2
   1 m_bPrintInterp  = i2
   1 m_bCheckDigit   = i2
   1 m_startChar     = c10
   1 m_endChar       = c10
   ;2D bar codes
   1 m_startMode     = i2
   1 m_rowHeight     = f8
   1 m_columnCount   = i2
   1 m_rowCount      = i2
   1 m_securityLevel = i2
   1 m_bTruncate     = i2
)
 
 
 
set trace norecpersist
 
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev) ;001
;;----------------------------------------------------------------------------
 
;; define uars into entry points of report rtl
 
declare uar_RptCreateReport( p1=vc(ref) , p2=i2(value) , p3=i2(value) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptCreateReport" ,
     persist
 
declare uar_RptDestroyReport( p1=i4(value) ) = null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptDestroyReport" ,
     persist
 
declare uar_RptTerminate() = null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptTerminate" ,
     persist
 
declare uar_RptStartReport( p1=i4(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptStartReport" ,
     persist
 
declare uar_RptEndReport( p1=i4(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptEndReport" ,
     persist
 
declare uar_RptStartPage( p1=i4(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptStartPage" ,
     persist
 
declare uar_RptEndPage( p1=i4(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptEndPage" ,
     persist
 
declare uar_RptStringDraw( p1=i4(value) , p2=vc(ref) , p3=vc(ref) ) = f8
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptStringDraw" ,
     persist
 
declare uar_RptCreateFont( p1=i4(value) , p2=vc(ref) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptCreateFont" ,
     persist
 
declare uar_RptDestroyFont( p1=i4(value) , p2=i4(value) ) = null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptDestroyFont" ,
     persist
 
declare uar_RptGetFont( p1=i4(value) , p2=vc(ref) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptGetFont" ,
     persist
 
declare uar_RptSetFont( p1=i4(value) , p2=i4(value) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptSetFont" ,
     persist
 
declare uar_RptCreatePen( p1=i4(value) , p2=vc(ref) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptCreatePen" ,
     persist
 
declare uar_RptDestroyPen( p1=i4(value) , p2=i4(value) ) = null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptDestroyPen" ,
     persist
 
declare uar_RptGetPen( p1=i4(value) , p2=vc(ref) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptGetPen" ,
     persist
 
declare uar_RptSetPen( p1=i4(value) , p2=i4(value) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptSetPen" ,
     persist
 
declare uar_RptSetBackColor( p1=i4(value) , p2=i4(value) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptSetBackColor" ,
     persist
 
declare uar_RptResetBackColor( p1=i4(value) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptResetBackColor" ,
     persist
 
declare uar_RptLine( p1=i4(value) , p2=f8(ref) , p3=f8(ref) , p4=f8(ref) , p5=f8(ref) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptLine" ,
     persist
 
declare uar_RptRect( p1=i4(value) , p2=f8(ref) , p3=f8(ref) , p4=f8(ref) , p5=f8(ref) , p6=i2(value) , p7=i4(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptRect" ,
     persist
 
declare uar_RptArc( p1=i4(value) , p2=f8(ref) , p3=f8(ref) , p4=f8(ref) , p5=i2(value) , p6=i2(value) ,
                    p7=i2(value) , p8=i4(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptArc" ,
     persist
 
declare uar_RptOval( p1=i4(value) , p2=f8(ref) , p3=f8(ref) , p4=f8(ref) , p5=f8(ref) , p6=i2(value) , p7=i4(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptOval" ,
     persist
 
declare uar_RptInitImageFromFile( p1=i4(value) , p2=i2(value) , p3=vc(ref) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptInitImageFromFile" ,
     persist
 
declare uar_RptInitImageFromString( p1=i4(value) , p2=i2(value) , p3=vc(ref) , p4=i4(value) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptInitImageFromString" ,
     persist
 
declare uar_RptImageDraw( p1=i4(value) , p2=i4(value) , p3=f8(ref) , p4=f8(ref) , p5=f8(ref) , p6=f8(ref) , p7=i2(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptImageDraw" ,
     persist
 
declare uar_RptBarCode( p1=i4(value) , p2=i2(value) , p3=vc(ref) , p4=f8(ref) , p5=f8(ref) , p6=f8(ref) , p7=f8(ref) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptBarCode" ,
     persist
 
declare uar_RptPrintToFile( p1=i4(value) , p2=vc(ref) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptPrintToFile" ,
     persist
 
declare uar_RptGetErrorLevel( p1=i4(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptGetErrorLevel" ,
     persist
 
declare uar_RptSetErrorLevel( p1=i4(value) , p2=i2(value) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptSetErrorLevel" ,
     persist
 
declare uar_RptFirstError( p1=i4(value) , p2=vc(ref) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptFirstError" ,
     persist
 
declare uar_RptNextError( p1=i4(value) , p2=vc(ref) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptNextError" ,
     persist
 
declare uar_RptClearErrors( p1=i4(value) ) = null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptClearErrors" ,
     persist
 
declare uar_RptEncodeColor( p1=i1(value) , p2=i1(value) , p3=i1(value) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptEncodeColor" ,
     persist
 
declare uar_RptCreateRtf( p1=i4(value) , p2=vc(ref) , p3=f8(ref) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptCreateRtf" ,
     persist
 
declare uar_RptDestroyRtf( p1=i4(value) , p2=i4(value) ) = null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptDestroyRtf" ,
     persist
 
declare uar_RptRtfDraw( p1=i4(value) , p2=i4(value) , p3=f8(ref) , p4=f8(ref) , p5=f8(ref) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptRtfDraw" ,
     persist
 
declare uar_RptBarCodeEx( p1=i4(value) , p2=vc(ref) , p3=vc(ref) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptBarCodeEx" ,
     persist
 
declare uar_RptBarCodeInit( p1=vc(ref), p2=i4(value), p3=f8(ref), p4=f8(ref) ) = null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptBarCodeInit" ,
     persist
 
declare uar_RptWriteToBuffer( p1=i4(value) , p2=vc(ref) ) = i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptWriteToBuffer" ,
     persist
 
 
declare uar_RptRtfLoadString( p1=i4(value) , p2 = vc(ref) ) = i4
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptRtfLoadString" ,
     persist
 
 
declare uar_RptRftLoadFile(p1=i4(value), p2=vc(ref))=i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptRtfLoadFile" ,
     persist
 
declare uar_RptRtfRender(p1=i4(value), p2=f8(ref),p3=f8(ref),p4=f8(ref),p5=f8(ref),
    p6=f8(ref), p7=f8(ref), p8=i4(ref))=i2
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptRtfRender" ,
     persist
 
 
declare uar_RptRtfGetViewport(p1=i4(value), p2=f8(ref), p3=f8(ref), p4=f8(ref), p5=f8(ref))=null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptRtfGetViewport" ,
     persist
 
declare uar_RptRtfFree(p1=i4(value)) = null
with image_win="reportrtl.dll",
     image_aix="libreport.a(libreport.o)" ,
     uar="RptRtfFree" ,
     persist
 
/*
declare uar_RptSetProperty(p1=i4(value), p2=vc(ref), p3=vc(ref)) = i2
with image_axp = "reportrtl",
     image_win="reportrtl.dll",
     image_aix = "libreport.a(libreport.o)",
     uar="RptSetProperty",
     persist
 
declare uar_RptGetProperty(p1=i4(value), p2=vc(ref)) = vc(ref)
     image_win="reportrtl.dll",
     image_aix = "libreport.a(libreport.o)",
     uar="RptGetProperty",
     persist
 
declare uar_RptGetPropertyCount(p1=i4(value)) = i2
     image_win="reportrtl.dll",
     image_aix = "libreport.a(libreport.o)",
     uar="RptGetPropertyCount",
     persist
*/
 
 
;;----------------------------------------------------------------------------
 
;; define return status
 
declare RPT_Ok = i2 with constant( 0 ) , persist
declare RPT_NoStruct = i2 with constant( 1 ) , persist
declare RPT_NoHandle = i2 with constant( 2 ) , persist
declare RPT_InvalidParams = i2 with constant( 3 ) , persist
declare RPT_ErrorFound = i2 with constant( 4 ) , persist
declare RPT_Failure = i2 with constant( 5 ) , persist
declare RPT_Continue = i2 with constant( 6 ) , persist
 
;; define output types
 
declare RPT_PostScript = i2 with constant( 0 ) , persist
declare RPT_PDF = i2 with constant( 1 ) , persist
declare RPT_Zebra = i2 with constant (2) , persist
declare RPT_Intermec = i2 with constant (3) , persist
declare RPT_HTML = i2 with constant(4), persist
declare RPT_Zebra300 = i2 with constant (5) , persist
declare RPT_Zebra600 = i2 with constant (6) , persist
declare RPT_Intermec_DP203 = i2 with constant (7) , persist
declare RPT_Intermec_DP300 = i2 with constant (8) , persist
 
;; define units of measure
 
declare RPT_Points = i2 with constant( 0 ) , persist
declare RPT_Inches = i2 with constant( 1 ) , persist
declare RPT_Centimeters = i2 with constant( 2 ) , persist
 
;; define page orientations
 
declare RPT_Portrait = i2 with constant( 0 ) , persist
declare RPT_Landscape = i2 with constant( 1 ) , persist
declare RPT_InvPortrait = i2 with constant( 2 ) , persist
declare RPT_InvLandscape = i2 with constant( 3 ) , persist
 
;; define image types
 
declare RPT_Bmp = i2 with constant( 0 ) , persist
declare RPT_Jpeg = i2 with constant( 1 ) , persist
 
; define bar code types
 
declare RPT_Code39 = i2 with constant( 0 ) , persist
declare RPT_Code128 = i2 with constant( 1 ) , persist
declare RPT_Codabar = i2 with constant( 2 ) , persist
declare RPT_Postnet = i2 with constant(3), persist
declare RPT_Interleaved2of5 = i2 with constant( 4 ), persist
declare RPT_Code93 = i2 with constant(5), persist
declare RPT_UPCA = i2 with constant(6), persist
declare RPT_UPCE = i2 with constant(7), persist
declare RPT_EAN8 = i2 with constant(8), persist
declare RPT_EAN13 = i2 with constant(9), persist
declare RPT_Code11 = i2 with constant(10), persist
declare RPT_LogMars = i2 with constant(11), persist
declare RPT_Plessey = i2 with constant(12), persist
declare RPT_Discrete2of5 = i2 with constant(13), persist
declare RPT_Code49 = i2 with constant(14), persist
declare RPT_PDF417 = i2 with constant(15), persist
declare RPT_DataMatrix = i2 with constant(16), persist
declare RPT_AZTEC = i2 with constant(17), persist
declare RPT_AZTEC_PRINTER = i2 with constant(18),persist
 
 
;; define line spacing
 
declare RPT_Single = i2 with constant( 0 ) , persist
declare RPT_OneAndAHalf = i2 with constant( 1 ) , persist
declare RPT_Double = i2 with constant( 2 ) , persist
 
;; define font names
 
declare RPT_Times = vc with constant( "Times" ) , persist
declare RPT_Courier = vc with constant( "Courier" ) , persist
declare RPT_Helvetica = vc with constant( "Helvetica" ) , persist
declare RPT_AvantGarde = vc with constant( "AvantGarde" ) , persist
declare RPT_NewCenturySchlbk = vc with constant( "NewCenturySchlbk" ) , persist
declare RPT_Souvenir = vc with constant( "Souvenir" ) , persist
declare RPT_LubalinGraph = vc with constant( "LubalinGraph" ) , persist
 
;; define colors
 
declare RPT_Aqua = i4 with constant( 65535 ) , persist
declare RPT_Black = i4 with constant( 0 ) , persist
declare RPT_Blue = i4 with constant( 255 ) , persist
declare RPT_Fuchsia = i4 with constant( 16711935 ) , persist
declare RPT_Gray = i4 with constant( 8421504 ) , persist
declare RPT_Green = i4 with constant( 32768 ) , persist
declare RPT_Lime = i4 with constant( 65280 ) , persist
declare RPT_Maroon = i4 with constant( 8388608 ) , persist
declare RPT_Navy = i4 with constant( 128 ) , persist
declare RPT_Olive = i4 with constant( 8421376 ) , persist
declare RPT_Purple = i4 with constant( 8388736 ) , persist
declare RPT_Red = i4 with constant( 16711680 ) , persist
declare RPT_Silver = i4 with constant( 12566463 ) , persist
declare RPT_Teal = i4 with constant( 32896 ) , persist
declare RPT_White = i4 with constant( 16777215 ) , persist
declare RPT_Yellow = i4 with constant( 16776960 ) , persist
 
;; define flags for string draw
 
declare RPT_SdCalcRect = i4 with constant( 1 ) , persist
 
declare RPT_SdClip = i4 with constant( 2 ) , persist
declare RPT_SdWrap = i4 with constant( 4 ) , persist
declare RPT_SdWrapHyphen = i4 with constant ( 2048 ) , persist
 
declare RPT_SdEllipsis = i4 with constant( 8 ) , persist
 
declare RPT_SdHCenter = i4 with constant( 16 ) , persist
declare RPT_SdAlignLeft = i4 with constant( 32 ) , persist
declare RPT_SdAlignRight = i4 with constant( 64 ) , persist
declare RPT_SdJustify = i4 with constant( 128 ) , persist
 
declare RPT_SdVCenter = i4 with constant( 256 ) , persist
declare RPT_SdTop = i4 with constant( 512 ) , persist
declare RPT_SdBottom = i4 with constant( 1024 ) , persist
 
declare RPT_SdNoBorders = i4 with constant( 0 ) , persist
declare RPT_SdTopBorder = i4 with constant( 1 ) , persist
declare RPT_SdBottomBorder = i4 with constant( 2 ) , persist
declare RPT_SdLeftBorder = i4 with constant( 4 ) , persist
declare RPT_SdRightBorder = i4 with constant( 8 ) , persist
declare RPT_SdAllBorders = i4 with constant( 15 ) , persist
 
;; define border style
 
declare RPT_SolidLine = i2 with constant( 0 ) , persist
declare RPT_DashedLine = i2 with constant( 2 ) , persist
 
;; define severity for errors
 
declare RPT_Fatal = i2 with constant( 0 ) , persist
declare RPT_Error = i2 with constant( 1 ) , persist
declare RPT_Warning = i2 with constant( 2 ) , persist
declare RPT_Info = i2 with constant( 3 ) , persist
 
;; define misc
 
declare RPT_NoFill = i2 with constant( 0 ) , persist
declare RPT_Fill = i2 with constant( 1 ) , persist
 
declare RPT_Off = c1 with constant( char( 0 ) ) , persist
declare RPT_On = c1 with constant( char( 1 ) ) , persist
 
 
declare RPT_TF_Page_Cur = c2 with constant(concat(char(6),char(2))),persist
declare RPT_TF_Page_Total = c2 with  constant(concat(char(6),char(1))),persist
declare RPT_TF_End = c2 with constant(concat(notrim(char(7)),"#")),persist
 
 
declare RPT_PageofPage = vc with noconstant(uar_i18ngetmessage(i18nhandle, "k1", ConCat(RPT_TF_PAGE_CUR,
						   "Page: %d", RPT_TF_END, RPT_TF_PAGE_TOTAL,
						   " of %d", notrim(RPT_TF_END)))),persist
;;----------------------------------------------------------------------------
 
#END_SCRIPT
 
end
 
go
 

;Generated by GNU enscript 1.6.4.
