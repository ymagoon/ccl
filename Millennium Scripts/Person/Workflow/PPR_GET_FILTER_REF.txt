 ;;Solution_Test/script/Scheduling/PPR Filter Service Build Tool Scripts/PPR_GET_FILTER_REF.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       ppr_get_filter_ref.prg
        Object name:            ppr_get_filter_ref
        Request #:              4290310 

        Product:				Patient Privacy
        Product Team:           Patient Privacy
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        This is to retrieve the filter ref data
				
        Tables read:            filter_type,
			        			filter_type_data

        Tables updated:         none

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 09/30/03 Sasi Gandham         Initial Release                     *
;     001 03/31/05 GG6481				Performance Enhancements			*
;     002 04/01/05 Sasi Gandham			Filter by build_tool_ind			*
;  191808 12/02/08 Bradley Strecker    CR 1-2667553955 PPRFilterServiceMaintTool Performance
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program ppr_get_filter_ref:dba go
create program ppr_get_filter_ref:dba

%i cclsource:pcs_subevent.inc

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
record request
(
 1 build_tool_ind = i2   ;Calling from the build tool 1, Filter Component 0
)
*/
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/
if(not validate(reply,0))
	record reply
	(1 qual[*]
		2 filter_type_cd 			= f8
		2 filter_type_disp 			= c40
		2 parent_entity_name 		= vc
		2 parent_type_id			= f8
		2 parent_entity_sub_type 	= vc      
        2 filter_type1_id 			= f8
        2 filter_type1_txt          = c12
        2 filter_type2_id 			= f8
        2 filter_type2_txt 			= c12
        2 filter_type3_id 			= f8
        2 filter_type3_txt 			= c12
        2 filter_type4_id 			= f8          
        2 filter_type4_txt  		= c12
        2 filter_type5_id 			= f8          
        2 filter_type5_txt 			= c12		
		2 filter_enabled 			= i2 
		2 build_tool_ind  			= i2
		2 get_script_name 			= vc      
		2 search_component_name		= vc
   		2 filter_entity1_name1 	= vc
   		2 filter_entity2_name1 	= vc
   		2 filter_entity3_name1 	= vc
   		2 filter_entity4_name1 	= vc
   		2 filter_entity5_name1 	= vc
		2 Filter_Entity[*]                ; Will be filled out only if the build_tool_ind = 0         
		  3 filter_type_data_id 	= f8
		  3 filter_entity1_id 		= f8
		  3 filter_entity1_name 	= c30
		  3 filter_entity2_id 		= f8
		  3 filter_entity2_name 	= c30
		  3 filter_entity3_id 		= f8
		  3 filter_entity3_name 	= c30
		  3 filter_entity4_id 		= f8          
		  3 filter_entity4_name  	= c30
		  3 filter_entity5_id 		= f8          
		  3 filter_entity5_name 	= c30		
	 1 Fiter_Entities[*]                  ; Will be filled out only if the build tool_ind = 1   
	  	2 filter_type_data_id 		= f8
	  	2 filter_entity1_id 		= f8
	  	2 filter_entity1_cd		    = f8
	  	2 filter_entity1_disp		= c40
	  	2 filter_entity1_name 		= c30
	  	2 filter_entity2_id 		= f8
	  	2 filter_entity2_name 		= c30
	  	2 filter_entity3_id 		= f8
	  	2 filter_entity3_name 		= c30
	  	2 filter_entity4_id 		= f8          
	  	2 filter_entity4_name  		= c30
	  	2 filter_entity5_id 		= f8          
	  	2 filter_entity5_name 		= c30
		2 updt_cnt			= i4		
		2 filters[*]
			3 filter_type_cd 		= f8
		        3 filter_type_data_id 	= f8  ;191808
%i cclsource:status_block.inc
	)
endif

/********************************************************************/
/*  Variable Declaration                                            */
/********************************************************************/

declare idx = i4 with protected, noconstant(0) ;*001*
declare ntotal = i4 with protected, noconstant(0) ;*001*
declare ntotal2 = i4 with protected, noconstant(0) ;*001*
declare nsize = i4 with protected, constant(50) ;*001*
declare nstart = i4 with protected, noconstant(0) ;*001*
declare index = i4 with protected, noconstant(0) ;*001*
declare iFilterTypeCnt = i4 with protected, noconstant(0) ;*001*
set reply->status_data->status = "F"

/********************************************************************/
/*  Select Statement	                                           */
/********************************************************************/

select into "nl:"
		ft.filter_type_cd 
from	filter_type ft
plan	ft
where   ((request->build_tool_ind = 1 
      	and
        (ft.build_tool_ind = 1)
           ) 
       or
       	   (request->build_tool_ind = 0)
          )

order  	ft.filter_type_cd
head report
    iFilterTypeCnt = 0
head ft.filter_type_cd
    iFilterTypeCnt = iFilterTypeCnt + 1
    if (mod(iFilterTypeCnt,10) = 1)
      stat = alterlist(reply->qual, iFilterTypeCnt + 9)
    endif
    reply->qual[iFilterTypeCnt]->filter_type_cd 		= ft.filter_type_cd
    reply->qual[iFilterTypeCnt]->parent_entity_name 	= ft.parent_entity_name
    reply->qual[iFilterTypeCnt]->parent_type_id 		= ft.parent_type_id    
    reply->qual[iFilterTypeCnt]->parent_entity_sub_type = ft.parent_type_txt
    reply->qual[iFilterTypeCnt]->filter_type1_id 		= ft.filter_type1_id
    reply->qual[iFilterTypeCnt]->filter_type1_txt 		= ft.filter_type1_txt    
	reply->qual[iFilterTypeCnt]->filter_type2_id 		= ft.filter_type2_id
    reply->qual[iFilterTypeCnt]->filter_type2_txt 		= ft.filter_type2_txt
    reply->qual[iFilterTypeCnt]->filter_type3_id 		= ft.filter_type3_id
    reply->qual[iFilterTypeCnt]->filter_type3_txt 		= ft.filter_type3_txt
    reply->qual[iFilterTypeCnt]->filter_type4_id 		= ft.filter_type4_id
    reply->qual[iFilterTypeCnt]->filter_type4_txt 		= ft.filter_type4_txt
    reply->qual[iFilterTypeCnt]->filter_type5_id 		= ft.filter_type5_id
    reply->qual[iFilterTypeCnt]->filter_type5_txt 		= ft.filter_type5_txt
    reply->qual[iFilterTypeCnt]->build_tool_ind 		= ft.build_tool_ind
    reply->qual[iFilterTypeCnt]->get_script_name 		= ft.get_script_name
    reply->qual[iFilterTypeCnt]->search_component_name 	= ft.search_component_name    
    reply->qual[iFilterTypeCnt]->filter_entity1_name1 	= ft.filter_entity1_name
	reply->qual[iFilterTypeCnt]->filter_entity2_name1 	= ft.filter_entity2_name
	reply->qual[iFilterTypeCnt]->filter_entity3_name1 	= ft.filter_entity3_name
	reply->qual[iFilterTypeCnt]->filter_entity4_name1 	= ft.filter_entity4_name
	reply->qual[iFilterTypeCnt]->filter_entity5_name1 	= ft.filter_entity5_name
foot ft.filter_type_cd
    col 0
foot report
    stat = alterlist(reply->qual, iFilterTypeCnt)
with nocounter

if (curqual = 0)
  	set reply->status_data->status = "Z"
  	go to exit_script
else
	set reply->status_data->status = "S"
endif

set ntotal2 = size(reply->qual,5)
set ntotal = ntotal2+(nsize-mod(ntotal2,nsize)) 
set stat = alterlist(reply->qual,ntotal)
set nstart = 1
 
for (idx=ntotal2+1 to ntotal)
     set reply->qual[idx].filter_type_cd = reply->qual[ntotal2].filter_type_cd
endfor 

;fill this (request->build_tool_ind = 1) build tool makes the call
if (request->build_tool_ind = 1)

	select into "nl:"
        FilterData = concat(format(ftd.filter_entity1_id,"##########;lp0"),
                            format(ftd.filter_entity2_id,"##########;lp0"),
                            format(ftd.filter_entity3_id,"##########;lp0"),
                            format(ftd.filter_entity4_id,"##########;lp0"),
                            format(ftd.filter_entity5_id,"##########;lp0"))
	from	(dummyt d1 with seq = value(1+((ntotal-1)/nsize))),
			filter_type_data ftd
	plan d1 
	 where initarray(nstart,evaluate(d1.seq,1,1,nstart+nsize))
	join ftd
	 where expand(idx, nstart, nstart+(nsize-1), ftd.filter_type_cd, reply->qual[idx].filter_type_cd)
	order  	FilterData, ftd.filter_type_cd 
	head report
	    iFiterEntityCnt = 0
	head FilterData
	    iFiterEntityCnt = iFiterEntityCnt + 1
	    if (mod(iFiterEntityCnt,10) = 1)
	      stat = alterlist(reply->Fiter_Entities, iFiterEntityCnt + 9)
	    endif
		reply->Fiter_Entities[iFiterEntityCnt]->filter_type_data_id = ftd.filter_type_data_id
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity1_id = ftd.filter_entity1_id
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity1_name = ftd.filter_entity1_name
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity1_cd = 
			reply->Fiter_Entities[iFiterEntityCnt]->filter_entity1_id 
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity2_id = ftd.filter_entity2_id
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity2_name = ftd.filter_entity2_name
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity3_id = ftd.filter_entity3_id
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity3_name = ftd.filter_entity3_name
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity4_id = ftd.filter_entity4_id
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity4_name = ftd.filter_entity4_name
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity5_id = ftd.filter_entity5_id
		reply->Fiter_Entities[iFiterEntityCnt]->filter_entity5_name = ftd.filter_entity5_name
		reply->Fiter_Entities[iFiterEntityCnt]->updt_cnt = ftd.updt_cnt
	    iFiterTypeCnt = 0
	detail
	    iFiterTypeCnt = iFiterTypeCnt + 1
	    if (mod(iFiterTypeCnt,10) = 1)
	      stat = alterlist(reply->Fiter_Entities[iFiterEntityCnt]->filters, iFiterTypeCnt + 9)
	    endif
		reply->Fiter_Entities[iFiterEntityCnt]->filters[iFiterTypeCnt]->filter_type_cd = ftd.filter_type_cd
		reply->Fiter_Entities[iFiterEntityCnt]->filters[iFiterTypeCnt]->filter_type_data_id = ftd.filter_type_data_id ;191808
	foot FilterData
		stat = alterlist(reply->Fiter_Entities[iFiterEntityCnt]->filters, iFiterTypeCnt)
	foot report
	    stat = alterlist(reply->Fiter_Entities, iFiterEntityCnt)
	with nocounter

else

	select into "nl:"
	from	(dummyt d1 with seq = value(1+((ntotal-1)/nsize))),
			filter_type_data ftd
	plan d1 
	 where initarray(nstart,evaluate(d1.seq,1,1,nstart+nsize))
	join ftd
	 where expand(idx, nstart, nstart+(nsize-1), ftd.filter_type_cd, reply->qual[idx].filter_type_cd)
	order by ftd.filter_type_cd
	head ftd.filter_type_cd
		iFilterTypeDataCnt = 0
		index = locateval(idx, nstart, nstart+(nsize-1), ftd.filter_type_cd, reply->qual[idx].filter_type_cd)
	detail
	    iFilterTypeDataCnt = iFilterTypeDataCnt + 1
	    if (mod(iFilterTypeDataCnt,10) = 1)
	      stat = alterlist(reply->qual[index]->Filter_Entity, iFilterTypeDataCnt + 9)
	    endif
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_type_data_id = ftd.filter_type_data_id
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity1_id = ftd.filter_entity1_id
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity1_name = ftd.filter_entity1_name
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity2_id = ftd.filter_entity2_id
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity2_name = ftd.filter_entity2_name
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity3_id = ftd.filter_entity3_id
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity3_name = ftd.filter_entity3_name
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity4_id = ftd.filter_entity4_id
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity4_name = ftd.filter_entity4_name
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity5_id = ftd.filter_entity5_id
		reply->qual[index]->Filter_Entity[iFilterTypeDataCnt]->filter_entity5_name = ftd.filter_entity5_name
	foot ftd.filter_type_cd
	    stat = alterlist(reply->qual[index].Filter_Entity,iFilterTypeDataCnt)
		if (iFilterTypeDataCnt > 0)
			reply->qual[index]->filter_enabled = 1
		endif
	with nocounter
	
endif ;build_tool_ind

set stat = alterlist(reply->qual, ntotal2)	

if (curqual = 0)
  	set reply->status_data->status = "P"
endif


#exit_script

end

go

;Generated by GNU enscript 1.6.4.
