 ;;Solution_Test/script/Person Management/PMSearch/pm_sch_get_persons.prg Turn on black mode

  drop program PM_SCH_GET_PERSONS:dba go
create program PM_SCH_GET_PERSONS:dba
 
/****************************************************************************
 *                                                                          *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &            *
 *                              Technology, Inc.                            *
 *       Revision      (c) 1984-1999 Cerner Corporation                     *
 *                                                                          *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.             *
 *  This material contains the valuable properties and trade secrets of     *
 *  Cerner Corporation of Kansas City, Missouri, United States of           *
 *  America (Cerner), embodying substantial creative efforts and            *
 *  confidential information, ideas and expressions, no part of which       *
 *  may be reproduced or transmitted in any form or by any means, or        *
 *  retained in any storage or retrieval system without the express         *
 *  written permission of Cerner.                                           *
 *                                                                          *
 *  Cerner is a registered mark of Cerner Corporation.                      *
 *                                                                          *
 ****************************************************************************
 
          Date Written:       07/07/98
          Source file name:   PM_SCH_GET_PERSONS
          Object name:        PM_SCH_GET_PERSONS
          Request #:          100040
 
          Product:            Person Management
          Product Team:       Person Management
          HNA Version:        V500
          CCL Version:
 
          Program purpose:    Searches for a list of persons best
                              matching the given search criteria.
                              Returns all persons found as well
                              as requested information for each
                              person.
 
          Tables read:
          Tables updated:
          Executing from:
          Special Notes:
 
 *************************************************************************
 *                   GENERATED MODIFICATION CONTROL LOG                  *
 *************************************************************************
 *                                                                       *
 * Mod  Date     Engineer             Comment                            *
 *----- -------- -------------------- -----------------------------------*
    000 07/07/98 Darryl Shippy        Initial release
    001 10/05/98 Darryl Shippy        Enhanced for alias pool usage
    002 10/06/98 Darryl Shippy        Correctly handle location filter
    003 10/23/98 Darryl Shippy        Added facility/building filters
    004 10/27/98 Darryl Shippy        Added any name logic
    005 11/02/98 Darryl Shippy        Allow hide of discharged patients
    006 11/09/98 Darryl Shippy        Added ORAHINT for ENCOUNTER table
    007 11/30/98 Darryl Shippy        Changed MAXQUAL logic
    008 12/03/98 Darryl Shippy        Moved join to ENCOUNTER table
    009 12/06/98 Darryl Shippy        Reworked select statement build
    010 12/14/98 Darryl Shippy        Fixed OPF logic
    011 03/03/99 Darryl Shippy        Fixed date filters - international
    012 03/25/99 Darryl Shippy        Fixed maiden name filtering
    013 05/04/99 Darryl Shippy        Added alias security
    014 05/17/99 Darryl Shippy        Reworked name filtering
    015 05/17/99 Darryl Shippy        Altered hide discharged logic
    016 05/19/99 Darryl Shippy        Enhanced age filtering
    017 05/19/99 Darryl Shippy        Changed detail to head
    018 05/24/99 Darryl Shippy        Handle formatted phone numbers
    019 06/08/99 Darryl Shippy        Altered alias security
    020 06/08/99 Darryl Shippy        Handle 7-digit OPF SSN
    021 06/16/99 Darryl Shippy        Total optimization
    022 09/08/99 Darryl Shippy        Fixed date filtering
    023 09/10/99 Darryl Shippy        Added authorized encounter option
    024 10/12/99 Darryl Shippy        Sped up alias security
    025 10/22/99 Darryl Shippy        Fixed location parent lookup
    026 10/27/99 Darryl Shippy        Work around for date filters
    027 10/27/99 Darryl Shippy        Repaired alias security
    028 11/05/99 Darryl Shippy        Miscellaneous optimizations
    029 12/08/99 Darryl Shippy        Fixed facility/building hit
    030 12/09/99 Darryl Shippy        Fixed head/sort logic
    031 01/18/99 Darryl Shippy        Added security-override logic
    032 05/02/00 Darryl Shippy        Allow textual hit caching
    033 05/05/00 Darryl Shippy        Added canceled encounter mode
    034 08/04/00 Robert Farr          Added pending logic mode
    035 08/28/00 Darryl Shippy        Fixed names for OPF logic
    036 01/04/01 Robert Farr          Added Version Code to person resutls
    037 03/06/01 Sara Schmidt         Added alt char first, middle, last to person results
   D038 03/11/01 Bill White           Filter on pft_encntr_alias
  sc039 05/15/01 S. Muehlmeier        Added pending arrival logic
  AL039 07/19/01 Adam Lee             Added search order priority logic
  JN040 08/14/01 Nyhus                Added options string to opf_gmp_request
  DH041 08/23/01 D. Hoover                        Added Partial Name for Arabic Character set
  CL042 03/04/02 Chinh Luu            Add MOH logic
  JN042 03/08/01 Nyhus                Added calling application, debug_level and max_matches to opf_gmp_request
                                      **** THIS FEATURE BREAKS COMPATIBILITY WITH OPF_GET_MATCHING_PERSONS ****
                                      **** SHIP OPF_GET_MATCHING_PERSONS WITH THIS SCRIPT UNTIL NEXT REV   ****
  FP043 07/30/02 Francie Poehling     Fix to Arabic Partial Name search - don't hard code characters, but use
                                      char function instead.  Also use character 252 instead of 255 since
                                      certain versions of backend OSs don't support all the way to 255.
  JC044 09/10/02 Jacy Conley          Fix to show persons who don't have encounters around pending logic
  ZS045 10/21/02 Zaheer Saeed         Add reply string to satisfy hippa auditing requirements
  KJ046 03/20/02 Kim Jones            Modified to use new abs_birth_dt_tm when searching
  CD047 07/29/03 Charley Donnici      Fixed issue where we had declare warnings that were failing the script.
***********************************************************************************************************************
Mod   Feature Date     Engineer             Comment
----- ------- -------- --------------       --------------------------------------------------------------------------------
ZS048  35387  08/01/03 Zaheer Saeed         Added code to use XIE3PRSNL_ORG_RELTN index in prsnl_org_reltn table to enhance
                                            performance.Also added code to validate ccldminfo record structure to avoid calls
                                            to dm_info table
CD049  34757  08/11/03 Charley Donnici      Added Search cut-off fields
VF050  34757  09/10/03 Victor Frank         Fixed netrics search returns from being cutoff with a threshold value
VI051  35684  08/12/03 VI3847               PROFIT Team updates --- Adding two new search modes - Account & Guarantor.
CP052  36219  09/29/03 Chad Pugh            PCR CAPEP00104149 - Check for Active and Effective rows on Prsnl_org_reltn table
VF053  36660  10/20/03 Victor Frank         Added any_name_id for use with an alt. name search
CP054  37130  11/10/03 Chad Pugh            Defect CAPEP00110979 - Prsnl name fix
CP055  40002  01/19/04 Chad Pugh            Defect CAPEP00116102 - Any name history search
CN056  40192  01/29/04 Carl Neidig          CAPEP00117046 - Removed orahints from mod 048
       40006  01/28/04 Jennifer Song        added zipcode filter
39939  39939  04/06/04 Charley Donnici      Added code to suppress Z when threshold is 0 and no cut off mode.
                                            Added back mod 056 per Carl Neidig.
42650  42650  06/09/04 Chad Pugh            CAPEP00129767 - SHIN/NHIN province/territory are not displayed in results
42711  42711  06/16/04 Jennifer Song        added response code to reply
43869  43869  08/09/04 Jennifer Song        CAPEP00134773 - SHIN/NHIN province/territory are not being returned correctly
43772  43772  09/17/04 Jennifer Song        fixed search on any name when history is turned on
47322  47322  10/29/04 Chad Pugh            CAPEP00144508 - Performance fixes
47885  47885  11/18/04 Jenny Wilmes         CAPEP00145804 - Correct to displaying all people with Reactivate Cancel Encounter
48941  48941  12/01/04 Charley Donnici      CAPEP00146209 - Fixed Any name indicator issue with search.
49388  49388  01/07/05 Jason Mullinnix      Added archive status code
50792  50792  02/14/05 Chad Pugh            CAPEP00151355 - Performance enhancements
59153  59153  03/10/05 Chad Pugh            1-326412303 - Zipcode search issue
61397  61397  04/12/05 Marcus Wirsig        CR 1-347643481 - Fix to slow performance on client search.
62263  62263  04/19/05 Marcus Wirsig        CR 1-354873282 - Fix to slow performance on any search.
61643  61643  04/14/05 Kyle Goewert         CR 1-319386752 - Fix expand statement for pft_acct_id.
64325  64325  05/26/05 Josh Brasel          CR 1-375799676 - CDF meaning displayed in search results instead of display value
65865  65865  06/28/05 Chad Pugh            CR 1-401685431 - Reg_dt_tm and Disch_dt_tm filter issue
69163         08/17/05 Mike Richards        Added Billing Entitiy security and filtering to account mode
70131  70131  09/06/05 Nathan Lancaster     CR 1-462674221 - Eliminate 132 character limit for a Person search.
68432  68432  10/17/05 Lucas Adams          Added Deceased Date and Address key to script
75455  75455  12/07/05 Josh Brasel          1-525440862 - Correction to search results
73523  73523  11/29/05 Jake Johnson         R1 Security Project
77263  77263  01/01/06 Jake Johnson         Fix to R1 Security
86544  86544  01/26/06 Jake Johnson         CR 1-591529371 -- Correction to large num of orgs
95944  95944  05/04/06 Chad Pugh            CR 1-585547681 - Correction to Patient Mode with Forced Security
97483  97483  06/01/06 David Lindell        Added phone filter
---------------------------------------------------------------------------------------------------------------------------------
Mod tags and commented out code before this point have been removed as part of feature 208237.     -WC017635
---------------------------------------------------------------------------------------------------------------------------------
107485 107485 08/30/06 Marcus Wirsig        CR 1-708721471 - Correction to wildcard search in environment with NLS on
108251 108251 09/12/06 Chad Pugh            CR 1-801013765 - "Phone" label was changed to "Any Phone Number" in PMSearch.dll
109976 109976 10/02/06 Sam Prasad           CR 1-812611761 - Zip code and telephone search fail when searching by phonetic name
111184 111184 10/25/06 HB014870             CR 1-532794242 - Preventing the script from returning client accounts.
120812 120812 12/14/06 Chad Pugh            CR 1-866012701 - Unable to search for cancelled encounters by encntr_alias
120868 120868 12/18/06 Chris Sammis         CR 1-892638111 - Correction to more than 1000 related orgs
125258 125258 03/08/07 Sam Prasad           CR 1-736774302 - ERM: Shared Domain - Person Search
136709 136709 05/16/07 Chad Pugh            CR 1-1107031349 - Patient Search from PowerChart fix
129148 129148 05/15/07 Jason Roberts        CR 1-736774302 - Shared Domain Updates
139584 139584 06/21/07 Chad Pugh            CR 1-1163627531 - Patient mode alias search from PowerChart fix
130804 130804 06/21/07 Tom Zagorski         CR 1-826013391 - CCHIT SureScripts
138183 138183 06/25/07 Joel Cunningham      CR 1-981772991 - Added query for person_id search
144088 144088 07/26/07 Tom Zagorski         CR 1-1223076651 - SureScripts zipcode from PMSearch fix
146495 146495 10/01/07 Jason Roberts        CR 1-1269560171 - Added indicator to disable logical domain filtering
153467 153467 01/19/08 Florence C           Enhanced script to search for multiple filters if selected.
164846 164846 03/03/08 Joy Circo            CR 1-448122941 - Correction to performance problem with FN + LN searches
171735 171735 05/14/08 Joy Circo            CR 1-1698410219 - correction to AI searching not using netrics
175037 175037 07/01/08 Hsin-lun Lee         CR 1-2159744221 - Correction to issue with first name + maiden name searches
179047 179047 07/14/08 Hsin-lun Lee         CR 1-2207320287 - Correction to phone number format
176549 176549 07/08/08 Chad Pugh            CR 1-2193518533 - Correction to Build() function
182234 182234 08/18/08 Chad Pugh            CR 1-2354196701 - Correction to between() issue
189997 189997 01/14/09 Febin Sunny          CR 1-2204497715 - Add Expired Filter to PM SCH GET PERSONS
191819 191819 02/06/09 Febin Sunny          CR 1-2663291437 - Claim and Statement Number Search
199472 199472 02/12/09 Joseph Cowan         Complete removal of 192104
201216 201216 03/03/09 Sharada K            CR 1-3062761111 - Account search does not dispay results properly when a person has
                                                              more than one account.
203539 203539 03/18/09 Sharada K            CR 1-3118856301 - Search hangs when ORG security is ON and alias pool count is 0
208504 208504 05/05/09 Wes Cameron          CR 1-3206758225 - Unable to search by both SHN and NHN
212426 212426 05/27/09 Florence C           1-2868392671 - Encounter types filter not filtering persons
208995 208995 04/24/09 Wes Cameron          CR 1-3168145666 - No search results returned to Message Center
212094 212094 06/09/09 Tanner Marvin        CR 1-3269957741 - Returning incorrect data for returned patients
208237 208237 06/04/09 Wes Cameron          CR 1-3168145666 - Person Search performance improvements
216099 216099 03/18/09 Chinh Luu            Returned birth/deceased precisions and absolute birth date as a string.
221381 221381 08/04/09 Tanner Marvin        CR 1-3431824493 - Patient Search Issues
232244 232244 11/09/09 Wes Cameron          CR 1-3627049271 - Fix for account mode when org security is on
241999 241999 02/04/10 Wes Cameron          Fix Any Name ID getting assigned to wrong slot in reply structure.
256118 256118 05/27/10 Joseph Cowan         CR 1-3945315561 - Guarantor Search
262692 262692 07/27/10 Tanner Marvin        CR 1-3734172858 - Phonetic Search
267873 267873 09/09/10 Wes Cameron          CR 1-4078171195 - MaxQual CHIA
243513 243513 03/28/11 Wes Cameron          CR 1-3883558501 - CNVTNLS        ****** Requires CCL Version 8.5.6 ******
292506 292506 04/14/11 Chad Pugh            CR 1-4866996201 - Adding new Person Guarantor search mode.
294382 294382 05/09/11 Wes Cameron          CR 1-4909345351 - Remove CNVTNLS from equality qualifications
295090 295090 05/20/11 Kailash Sharma       CR 1-4911836821 - Phonetic Search Performance
301657 301657 07/15/11 Kailash Sharma       CR 1-5025896941 - PM Search Performance
302772 302772 08/05/11 Kailash Sharma       CR 1-5112792761 - Exclude Personnel from Person Search Results
311010 311010 11/14/11 Wes Cameron          CR 1-5308658941 - Remove CNVTNLS from Mother maiden name search
301787 301787 12/20/11 Tanner Marvin        CR 1-4896753144 Canada EMPI and CR 1-5467171651 UK PDS Local Search First
314173 314173 01/13/12 Chad Pugh            CR 1-5530554521 - Deceased Date needs to honor Deceased time zone.
319008 319008 02/03/12 Gayle Siegfried      CR 1-5441904361 - Honor logical domain when searching by claim and account numbers
320638 320638 03/20/12 Anantharaju S        CR 1-5631476571 - Change Task for PDS
334656 334656 07/18/12 Rachel Walker	    CR 1-5851844121 - Fix for newborns not in search results when age filter is included.
336780 336780 07/19/12 Bradley Strecker     CR 1-5819251111 - Multi-race enhancement
333187 333187 10/04/12 Chad Pugh            CR 1-6079204727 - Making Network (Health) Card organization independent.
344225 344225 11/20/12 Charley Donnici      CR 1-4972803967  
                                            CR 1-6345593461 - Search Quality Enhancement & DM Archive Removal
382732 382732 10/02/13 Charley Donnici      CR 1-7468582601 - Search Quality Leading Zeros, EMPI on, Assumewildcard Override
392731 392731 01/29/14 Chiranjeevi P        CR 1-7217229333 - Account search does show patients who are already combined
394747 394747 02/10/14 Sandeep S            CR 1-7800883957 - Age does not display when adding a newborn with UTC on
400275 400275 04/08/14 Chad Pugh            CR 1-8046196501 - Adding support for OPF mode for Person Guarantor search mode
*************************************************************************/
 
if (validate(last_mod, "NOMOD") = "NOMOD")
   declare last_mod = c6 with noconstant(" "), private
endif
 
 
  /*
  set last_mod = "107485"
  set last_mod = "108251"
  set last_mod = "111184"
  set last_mod = "120812"
  set last_mod = "120868"
  set last_mod = "125258"
  set last_mod = "136709"
  set last_mod = "129148"
  set last_mod = "139584"
  set last_mod = "130804"
  set last_mod = "138183"
  set last_mod = "144088"
  set last_mod = "146495"
  set last_mod = "164846"
  set last_mod = "171735"
  set last_mod = "175037"
  set last_mod = "179047"
  set last_mod = "176549"
  set last_mod = "182234"
  set last_mod = "189997"
  set last_mod = "191819"
  set last_mod = "199472"
  set last_mod = "201216"
  set last_mod = "203539"
  set last_mod = "208504"
  set last_mod = "208995"
  set last_mod = "212094"
  set last_mod = "208237"
  set last_mod = "216099"
  set last_mod = "221381"
  set last_mod = "232224"
  set last_mod = "256118"
  set last_mod = "262692"
  set last_mod = "267873"
  set last_mod = "243513"
  */
 
  set last_mod = "292506"
  set last_mod = "294382"
  set last_mod = "295090"
  set last_mod = "301657"
  set last_mod = "302772"
  set last_mod = "311010"
  set last_mod = "301787"
  set last_mod = "314173"
  set last_mod = "319008"
  set last_mod = "334656"
  set last_mod = "336780"
  set last_mod = "333187"
;344225++  
  set last_mod = "344225"
  set last_mod = "392731"
  set last_mod = "394747"
  set last_mod = "400275"

if ( ( validate ( aster_cnt ,  - (9 ))= - (9 )) ) 
   declare  aster_cnt  =  i4  with  noconstant (0 )
endif

if ( ( validate ( aster_loc ,  - (9 ))= - (9 )) ) 
   declare  aster_loc  =  i4  with  noconstant (0 )
endif

record tmpParseit
(
 1 qual[*]
   2 value = vc
)

declare handle_asterisk(istr = vc) = i2                                   
subroutine handle_asterisk(istr)                                          
   set aster_cnt = 0                                                      
   set aster_loc = textlen(istr)                                          
   for (pp = 1 to textlen(istr))                                          
      ;382732if (pp < textlen(istr))                                                               
         if (ichar(substring ( pp, 1 ,  istr))= gp_asterisk )             
            set aster_cnt = aster_cnt + 1                                
            set aster_loc = pp                                           
         endif                                                            
      ;382732endif                                                               
   endfor                                                                 
end ; handle_asterisk                                                     

declare parseIt(iStr = vc, iDel = vc) = i2
subroutine parseIt(iStr, iDel) 
   declare parseItStr = vc with noconstant("")
   declare olddel = i2 with noconstant(1)
   declare newdel = i2 with noconstant(1)
   
   ;We have to remove trailing delimiters they make parsing tougher.
   if (substring(textlen(istr), 1,istr) = iDel)
      set iStr = REPLACE(iStr,iDel,"",2)
   endif

   ;Resize the array to zero.   
   set stat = alterlist(tmpParseit->qual,0)
 
   set parseItStr = iStr
   if (FINDSTRING(iDel,iStr,1))
      for (xx = 1 TO textlen(istr))
         if (substring(xx,1,istr) = iDel)
            set newdel = xx
            set parseItStr  = substring(olddel, newdel - olddel,istr)
            set parseItStr = replace(parseItStr,iDel,"",0)
            call addtoParse(parseItStr)
         endif
         set olddel = newdel
      endfor
      set parseItStr = substring(newdel, textlen(istr) - newdel + 1,istr)
      set parseItStr = replace(parseItStr,iDel,"",0)
      call addtoParse(parseItStr)
   else
      call addtoParse(parseItStr)  
   endif
 
end ; parseIt

declare addtoParse(iStr = vc) = i2
subroutine addtoParse(iStr)
   declare parsecnt = i2 with noconstant(0)
   if (textlen(trim(iStr,3)) > 0)
      set parsecnt = size(tmpParseit->qual,5)+ 1
      set stat = alterlist(tmpParseit->qual,parsecnt)
      set tmpParseit->qual[parsecnt].value = iStr
   endif
end ;addtoParse
;344225 --
/*
record request
(
  1  debug                     = i2
  1  max                       = i2
  1  opf                       = i2
  1  options                   = vc
  1  person_id                 = f8
  1  return_all                = i2
  1  security                  = i2
  1  style                     = i2
  1  threshold                 = f8
  1  user_id                   = f8
  1  user_name                 = vc
  1  filter[*]
     2  flag                   = i2
     2  meaning                = vc
     2  options                = vc
     2  phonetic               = i2
     2  value                  = vc
     2  weight                 = f8
     2	values[*]
     	  3  value                = vc      212426
  1  result[*]
     2  flag                   = i2
     2  meaning                = vc
     2  options                = vc
  1  show_pats_no_encntrs      = i2
  1  calling_application       = i2
  1  search_all_logical_domains_ind = i2
 
  ;+292506
  1  person_list_ind = i2
  1  person_list[*]
     2 person_id = f8
  ;-292506
  1  exclude_prsnl_from_search_ind = i2    302772
)
*/
 
/*
record reply
(
  1  filter_str                   = vc
  1  person[*]
     2  person_id              = f8
     2  address1               = vc
     2  address2               = vc
     2  age                    = vc
     2  alias_xxx              = vc
     2  birth_date             = dq8
     2  city                   = vc
     2  deceased               = vc
     2  ethnic_group           = vc
     2  gender                 = vc
     2  language               = vc
     2  last_encounter_date    = dq8
     2  maiden_name            = vc
     2  marital_status         = vc
     2  mothers_maiden_name    = vc
     2  name                   = vc
     2  nationality            = vc
     2  person_type            = vc
     2  phone                  = vc
     2  provider_xxx           = vc
     2  race                   = vc
     2  religion               = vc
     2  species                = vc
     2  state                  = vc
     2  vip                    = vc
     2  weight                 = f8
     2  zipcode                = vc
     2  any_name_id            = f8
     2  any_name_full          = vc
  1  status_data
     2  status                 = c1
     2  subeventstatus[1]
        3  operationname       = vc
        3  operationstatus     = c1
        3  targetobjectname    = vc
        3  targetobjectvalue   = vc
  1 search_method_ind = i4           ;208995
)
*/
%i cclsource:pm_create_hist_id.inc
%i cclsource:response_cd.inc
%i cclsource:pm_get_logical_domain.inc      ;125258
 
;declare subroutines
declare gp_add_line(gpal_text = vc) = NULL
declare gp_dump_buffer(gpdb_dummy = i2) = NULL
declare gp_encounter_alias_from(gpeaf_flag = i2) = NULL
declare gp_profit_encounter_alias_from(gpeaf_flag = i2) = NULL
declare gp_encounter_relation_from(gperf_flag = i2) = NULL
declare gp_finish_buffer(gpfb_dummy = i2) = NULL
declare gp_get_parent_location(gpgpl_child = f8, gpgpl_parent_meaning = vc) = f8
declare gp_hit_census(gphc_flag = i2) = NULL
declare gp_hit_encounter(gphe_exists = i2) = NULL
declare gp_hit_encounter_alias(gphea_flag = i2) = NULL
declare gp_hit_profit_encounter_alias(gphpea_flag = i2) = NULL
declare gp_hit_encounter_relation(gpher_flag = i2) = NULL
declare gp_hit_maiden_name(gphmn_dummy = i2) = NULL
declare gp_hit_patient(gphp_dummy = i2) = NULL
declare gp_hit_person(gphp_skip_birthdate = i2) = NULL
declare gp_hit_person_alias(gphpa_dummy = i2) = NULL
declare gp_hit_encntr_person_relation(gphepr_dummy = i2) = NULL
declare gp_hit_person_relation(gphpr_dummy = i2) = NULL
declare gp_hit_home_address(gphha_flag = i2) = NULL
declare gp_hit_phone(gphha_flag = i2) = NULL
declare gp_hit_security(gphs_flag = i2) = NULL
declare gp_perform_buffer(gppb_dummy = i2) = NULL
declare gp_add_organizations(o_dummy = i2) = NULL
declare gp_hit_person_person_relation(gphppr_dummy = i2) = NULL   ;292506
declare gp_hit_race(gphr_dummy = i2) = NULL  ;336780
declare determine_filters(sc_dummy = i2) = i2
declare set_logical_domain_parser_cmd(personTableAlias = vc) = vc ;319008
 
declare k                = i4   with private, noconstant ( 0 )
declare TotalSize        = i4   with private, noconstant ( 0 )
declare t_cnt            = i4   with public, noconstant ( 0 )
declare tempBufferLow    = vc   with public, noconstant(" ")
declare tempBufferHigh   = vc   with public, noconstant(" ")
declare bAnyNameFlag     = i2   with public, noconstant(0)
declare bAnyNameCall     = i2   with public, noconstant(0)
declare bOpfAnyName      = i2   with public, noconstant(0)
declare bExpand          = i2 with noconstant(FALSE)
declare lCnt             = i4 with noconstant(0)
declare lCnt2            = i4 with noconstant(0)
declare gpWorkIdx        = i4 with noconstant(0)     ;241999
declare lLimit  = i4 with noconstant(0)  ;120868
declare lOffset = i4 with noconstant(0)  ;120868
declare sTemp            = vc with noconstant("")
declare lStart           = i4 with noconstant(0)
declare lTotalReply      = i4 with noconstant(0)
declare lTotalOrgs       = i4 with noconstant(0)
declare pending_logic_mode = i2 with noconstant(0)
declare show_pending_person_only_mode = i2 with noconstant(0)
declare canceled_encounter_mode = i2 with noconstant(0)
declare use_prsnl_or_expire_filter = i2 with noconstant(0) ;189997
declare claim_statement_search_done = i2 with noconstant(0) ;191819
declare sLogicalDomainPersonSearchCmd = vc with noconstant(""),privateprotect ;319008
 
 
;+129148
;125258+
;  declare bLogicalDomain = i4 with noconstant(0)
;  declare dLogicalDomain = f8 with noconstant(0.0)
;  set bLogicalDomain = column_exists("PERSON", "LOGICAL_DOMAIN_ID")
;125258-
   declare lExpandCnt = i4 with noconstant(0)
   declare lExpandSize = i4 with noconstant(0)
   declare bLDStatus = i4 with noconstant(0)
;-129148
 
  ;+136709
  declare bPatsNoEncntrs = i2 with noconstant(FALSE)
 
  if (validate(request->show_pats_no_encntrs, -99) != -99)
     if (request->show_pats_no_encntrs > 0)
        set bPatsNoEncntrs = TRUE
     endif
  endif
  ;-136709
 
  ;+146495
  declare bSearchAllLogicalDomains = i2 with noconstant(FALSE)
 
  if(validate(request->search_all_logical_domains_ind, -99) != -99)
    if(request->search_all_logical_domains_ind > 0)
      set bSearchAllLogicalDomains = TRUE
    endif
  endif
  ;-146495
  declare bFirstNameFilled = i2 with noconstant(FALSE) ;175037
  declare bLastNameFilled  = i2 with noconstant(FALSE) ;175037
  declare dFreeTextCd = f8 with noconstant(0.0) ;179047
  set dFreeTextCd = uar_get_code_by("MEANING", 281, "FREETEXT") ;179047
 
  ;203539 declare iCnt = i4 with noconstant(0);201216
  declare lStartPos = i4 with noconstant(0);203539 Renaming the variable iCnt
 
;++208995
  declare eNONE     = i2 with private, constant(0)
  declare eSTANDARD = i2 with private, constant(1)
  declare eSUGGEST  = i2 with private, constant(2)
  declare eNETRICS  = i2 with private, constant(3)
 
  declare iMSGCENTER   = i2 with constant(6)  ;Message Center's calling_application number
  declare bMCOPFBypass = i2 with noconstant(0)
  declare dMCOPFBypass = f8 with noconstant(uar_get_code_by("MEANING", 207902, "MCOPFBYPASS"))
  if(dMCOPFBypass > 0.0)
     set bMCOPFBypass = 1
  endif
;--208995
 
  declare bCnvtNLS = i2 with constant(checkfun("CNVTNLS"))    ;243513
  ;302772++
  declare ml_CurListSize = i4 with protect, noconstant(0)
  declare ml_NewListSize = i4 with protect, noconstant(0)
  declare ml_BatchSize   = i4 with protect, constant(100)
  declare ml_Start       = i4 with protect, noconstant(1)
  declare ml_LoopCnt     = i4 with protect, noconstant(0)
  declare ml_Index       = i4 with protect, noconstant(0)
  declare ml_CurIndex    = i4 with protect, noconstant(0)
  ;302772--

execute from 1000_INITIALIZE to 1999_INITIALIZE_EXIT
execute from 2000_BUILD_REPLY to 2999_BUILD_REPLY_EXIT
 
  free record userOrgs
  record userOrgs
  (1 organizations[*]
    2 organization_id = f8
    2 confid_cd = f8
    2 confid_level = i4
  )
 
if  (determine_filters(1) != 1)
  go to 9999_EXIT_PROGRAM
endif
 
execute from 4000_SEARCH to 4999_SEARCH_EXIT
#PAST_SEARCH_EXIT
execute from 7000_FILL_ACCOUNT_REPLY to 7999_FILL_ACCOUNT_REPLY_EXIT
execute from 5000_FILL_REPLY to 5999_FILL_REPLY_EXIT
execute from 6000_REP_FILTER_STR to 6999_REP_FILTER_STR_EXIT
go to 9999_EXIT_PROGRAM
 
;**************************************************************************************************
 
#1000_INITIALIZE
;Create a variable set to the version number of the script - this allows us
;to translate the script and determine what version we have
  free set gp_version
  set gp_version = 32
 
;Establish counters and stat variables
  free set i
  free set j
  free set k
  free set l
  free set stat
  set i = 0
  set j = 0
  set k = 0
  set l = 0
  set stat = 0
  set text_count = 0
 
;Populate mode flags
  set gp_person_mode = 1
  set gp_patient_mode = 2
  set gp_encounter_mode = 3
  set gp_account_mode = 4
  set gp_guarantor_mode = 5
  set gp_umdap_guarantor_mode = 6 ;256118
  set gp_person_guarantor_mode = 7 ;292506
 
;Populate data type flags
  set gp_address1_flag = 1
  set gp_address2_flag = 2
  set gp_age_flag = 8
  set gp_birth_date_flag = 9
  set gp_city_flag = 11
  set gp_deceased_flag = 14
  set gp_deceased_dt_tm_flag = 15
  set gp_ethnic_group_flag = 16
  set gp_first_name_flag = 17
  set gp_gender_flag = 18
  set gp_language_flag = 19
  set gp_last_encounter_date_flag = 20
  set gp_last_name_flag = 21
  set gp_maiden_name_flag = 22
  set gp_marital_status_flag = 23
  set gp_middle_name_flag = 24
  set gp_mothers_maiden_name_flag = 25
  set gp_name_flag = 26
  set gp_nationality_flag = 27
  set gp_person_alias_flag = 28
  set gp_person_ident_flag = 1028   ;344225
  set gp_person_relation_flag = 43
  set gp_person_type_flag = 44
  set gp_phone_flag = 50
  set gp_provider_flag = 40
  set gp_race_flag = 53
  set gp_religion_flag = 54
  set gp_species_flag = 55
  set gp_state_flag = 56
  set gp_vip_flag = 45
  set gp_weight_flag = 57
  set gp_zipcode_flag = 58
  set gp_shn_ver_code_flag = 81
  set gp_nhn_ver_code_flag = 82
  set gp_alt_char_name_flag = 83
  set gp_billing_entity_name_flag = 89
  set gp_acct_current_balance_flag = 90
  set gp_acct_bad_debt_balance_flag = 91
  set gp_response_cd_flag = 92
  set gp_archive_flag = 93
  set gp_paf_key_flag = 94
  set gp_any_phone_flag = 97  ;108251
  set gp_quality_phone_flag = 1097  ;344225
  set gp_primary_care_trust_flag = 99 ;301787TM
  set gp_source_version_number_flag = 100 ;320638
  set gp_building_flag = 111
  set gp_client_flag = 112
  set gp_discharge_date_flag = 118
  set gp_encounter_alias_flag = 120
  set gp_encounter_ident_flag  = 1120    ;344225
  set gp_encounter_relation_flag = 137
  set gp_encounter_status_flag = 138
  set gp_encounter_type_class_flag = 140
  set gp_encounter_type_flag = 139
  set gp_facility_flag = 144
  set gp_financial_class_flag = 145
  set gp_location_flag = 148
  set gp_medical_service_flag = 149
  set gp_registration_date_flag = 160
  set gp_billing_entity_flag = 165
  set gp_profit_encounter_alias_flag = 170
  set gp_person_alias_province_flag = 173
  set gp_shn_person_alias_province_flag = 174
  set gp_nhn_person_alias_province_flag = 175
  set gp_claim_number_flag = 180
  set gp_statement_number_flag = 181
 
  set PFT_ACCOUNT_FLAG = 184
  set PFT_MODE_FLAG = 186
 
;Get the ASCII value for an asterisk
  set gp_asterisk = ichar("*")
  set  gp_quote  =  ichar ('"' )    ;344225
  
  set gp_encounter_type_multi_flag = 196      ;153467
  set gp_medical_service_multi_flag = 197      ;153467
  set gp_epr_prsnl_id_flag = 237    ;189997
  set gp_epr_not_expired_flag = 238 ;189997
 
;Retrieve code values
 
 
  set gp_census = 0.0
  set gp_cmrn = 0.0
  set gp_mrn = 0.0
  set gp_address = 0.0
  set gp_phone = 0.0
  set gp_current = 0.0
  set gp_maiden = 0.0
  set gp_authorized = 0.0
  set gp_deleted = 0.0
  set gp_alt_char_cur = 0.0
  set gp_shin = 0.0
  set gp_nhin = 0.0
  set gp_patient_reltn_type_cd = 0.0
  set gp_patient_role_type_cd = 0.0
  set gp_account_type_cd = 0.0
  set gp_ar_acct_type_cd = 0.0
  set gp_patient_sub_type_cd = 0.0
  set gp_def_guarantor_cd = 0.0
  set gp_guarantor_cd = 0.0
  set gp_open_cd = 0.0
  set gp_active_cd = 0.0
  set gp_org_type_cd = 0.0 ;301787TM
  set gp_org_org_reltn_cd = 0.0 ;301787TM
  set gp_person_org_reltn_cd = 0.0 ;301787TM
 
  set gp_authorized = reqData->auth_auth_cd
  set gp_deleted    = reqData->deleted_cd
  set gp_active_cd = reqData->active_status_cd
 
  set stat = uar_get_meaning_by_codeset(4, "CMRN", 1, gp_cmrn)
  set stat = uar_get_meaning_by_codeset(4, "MRN", 1, gp_mrn)
  set stat = uar_get_meaning_by_codeset(4, "SHIN", 1, gp_shin)
  set stat = uar_get_meaning_by_codeset(4, "NHIN", 1, gp_nhin)
  set stat = uar_get_meaning_by_codeset(4, "ACCOUNT", 1, gp_account_type_cd)
  set stat = uar_get_meaning_by_codeset(43, "HOME", 1, gp_phone)
  set stat = uar_get_meaning_by_codeset(212, "HOME", 1, gp_address)
  set stat = uar_get_meaning_by_codeset(213, "CURRENT", 1, gp_current)
  set stat = uar_get_meaning_by_codeset(213, "MAIDEN", 1, gp_maiden)
  set stat = uar_get_meaning_by_codeset(213, "ALT_CHAR_CUR", 1, gp_alt_char_cur)
  set stat = uar_get_meaning_by_codeset(339, "CENSUS", 1, gp_census)
  set stat = uar_get_meaning_by_codeset(351, "DEFGUAR", 1, gp_def_guarantor_cd)
  set stat = uar_get_meaning_by_codeset(351, "GUARANTOR", 1, gp_guarantor_cd)
  set stat = uar_get_meaning_by_codeset(18735, "OPEN", 1, gp_open_cd)
  set stat = uar_get_meaning_by_codeset(18736, "A/R", 1, gp_ar_acct_type_cd)
  set stat = uar_get_meaning_by_codeset(18936, "PATIENT", 1, gp_patient_role_type_cd)
  set stat = uar_get_meaning_by_codeset(20849, "PATIENT", 1, gp_patient_sub_type_cd)
  set stat = uar_get_meaning_by_codeset(24689, "PATIENT", 1, gp_patient_reltn_type_cd)
  set stat = uar_get_meaning_by_codeset(278, "PCT", 1, gp_org_type_cd) ;301787TM
  set stat = uar_get_meaning_by_codeset(369, "PARENT", 1, gp_org_org_reltn_cd) ;301787TM
  set stat = uar_get_meaning_by_codeset(338, "REGPRACTICE", 1, gp_person_org_reltn_cd) ;301787TM
 
;Determine whether organizational security is turned on system-wide
  set gp_security = 0
 
  if (validate(ccldminfo->mode,0))
     if(ccldminfo->sec_org_reltn> 0)
       set gp_security = 1
     endif
     if (gp_security = 1 and ccldminfo->sec_confid > 0)
        set gp_security = 2
     endif
  else
     select into "nl:" i.info_number
      from dm_info i
       where i.info_name = "SEC_ORG_RELTN"
         and i.info_domain = "SECURITY"
         and i.info_number + 0 > 0.0
      detail
        gp_security = 1
     with nocounter
     ;If organization security is enabled, determine whether confidentiality level security is also enabled
     if (gp_security)
        select into "nl:" i.info_number
          from dm_info i
          where i.info_name = "SEC_CONFID"
            and i.info_domain = "SECURITY"
            and i.info_number + 0 > 0.0
          detail
           gp_security = 2
        with nocounter
     endif
  endif
 
;Establish a structure for working data
  free set gp_work
  record gp_work
  (
    1  debug = i2
    1  mode = i2
    1  user_id = f8
    1  meaning = vc
    1  code = f8
    1  text = vc
    1  raw_text = vc
    1  target = vc
    1  security = i2
    1  phonetic = i2
    1  opf = i2
    1  authorized = i2
    1  max = i4
    1  search_done = i2
    1  any_name = i2
    1  skip_discharged = i2
    1  person_hit = i2
    1  person_alias_hit = i2
    1  maiden_name_hit = i2
    1  person_relation_hit = i2
    1  encounter_hit = i2
    1  encounter_alias_hit = i2
    1  profit_encounter_alias_hit = i2
    1  encounter_relation_hit = i2
    1  encntr_person_relation_hit = i2
    1  person_person_relation_hit = i2  ;292506
    1  census_hit = i2
    1  security_hit = i2
    1  patient_hit = i2
    1  home_address_hit = i2
    1  phone_hit = i2
    1  age_filter_ind = i2
    1  age_start = vc
    1  age_end = vc
    1  first_name_first = i2
    1  birth_date_filter_ind = i2
    1  birth_date_start = vc
    1  birth_date_end = vc
    1  deceased_filter_ind = i2
    1  deceased = f8
    1  first_name_filter_ind = i2
    1  first_name_partial = i2
    1  first_name = vc
    1  first_name_start = vc
    1  first_name_end = vc
    1  first_name_phonetic = vc
    1  gender_filter_ind = i2
    1  gender = f8
    1  last_name_filter_ind = i2
    1  last_name_partial = i2
    1  last_name = vc
    1  last_name_start = vc
    1  last_name_end = vc
    1  last_name_phonetic = vc
    1  maiden_name_filter_ind = i2
    1  maiden_name_low = vc
    1  maiden_name_high = vc
    1  middle_name_filter_ind = i2
    1  middle_name_low = vc
    1  middle_name_high = vc
    1  mothers_maiden_name_filter_ind = i2
    1  mothers_maiden_name_low = vc
    1  mothers_maiden_name_high = vc
    1  patient_filter_ind = i2
    1  person_alias_filter_ind = i2
    1  person_ident_filter_ind = i2               ;344225
    1  person_relation_filter_ind = i2
    1  person_relation = f8
    1  person_type_filter_ind = i2
    1  person_type = f8
    1  race_filter_ind = i2
    1  race = f8
    1  ssn_filter_ind = i2
    1  ssn_partial = i2
    1  ssn = vc
    1  non_ssn_filter_ind = i2
    1  vip_filter_ind = i2
    1  vip = f8
    1  building_filter_ind = i2
    1  building = f8
    1  census_filter_ind = i2
    1  client_filter_ind = i2
    1  client = f8
    1  discharge_date_filter_ind = i2
    1  discharge_date_start = vc
    1  discharge_date_end = vc
    1  encounter_filter_ind = i2
    1  encounter_alias_filter_ind = i2
    1  encounter_ident_filter_ind = i2            ;344225
    1  profit_encounter_alias_filter_ind = i2
    1  shn_province_ind = i2
    1  nhn_province_ind = i2
    1  encounter_relation_filter_ind = i2
    1  encounter_relation = f8
    1  encounter_status_filter_ind = i2
    1  encounter_status = f8
    1  encounter_type_class_filter_ind = i2
    1  encounter_type_class = f8
    1  encounter_type_filter_ind = i2
    1  encounter_type = f8
    1  facility_filter_ind = i2
    1  facility = f8
    1  financial_class_filter_ind = i2
    1  financial_class = f8
    1  location_filter_ind = i2
    1  location = f8
    1  medical_service_filter_ind = i2
    1  medical_service = f8
    1  claim_number_filter_ind = i2
    1  statement_number_filter_ind = i2
    1  registration_date_filter_ind = i2
    1  registration_date_start = vc
    1  registration_date_end = vc
    1  home_address_filter_ind = i2
    1  home_zip_code = vc
    1  home_zip_code_partial = i2
    1  home_zip_code_start = vc
    1  home_zip_code_end = vc
    1  address_result_ind = i2
    1  address1_result_ind = i2
    1  address2_result_ind = i2
    1  age_result_ind = i2
    1  birth_date_result_ind = i2
    1  city_result_ind = i2
    1  deceased_result_ind = i2
    1  ethnic_group_result_ind = i2
    1  gender_result_ind = i2
    1  language_result_ind = i2
    1  last_encounter_date_result_ind = i2
    1  maiden_name_result_ind = i2
    1  marital_status_result_ind = i2
    1  mothers_maiden_name_result_ind = i2
    1  name_result_ind = i2
    1  nationality_result_ind = i2
    1  person_result_ind = i2
    1  person_type_result_ind = i2
    1  phone_result_ind = i2
    1  phone_filter_ind = i2
    1  phone_num = vc
    1  race_result_ind = i2
    1  religion_result_ind = i2
    1  species_result_ind = i2
    1  state_result_ind = i2
    1  shn_ver_code_ind = i2
    1  nhn_ver_code_ind = i2
    1  alt_char_name_ind = i2
    1  vip_result_ind = i2
    1  weight_result_ind = i2
    1  zipcode_result_ind = i2
    1  response_cd_result_ind = i2
    1  archive_filter_ind = i2
    1  archive_result_ind = i2
    1  archive_cd = f8
    1  buffer_count = i4
    1  buffer_name = vc
    1  person_count = i4
    1  prev_count = i4
    1  person_alias_filter_count = i4
    1  encounter_alias_filter_count = i4
    1  profit_encounter_alias_filter_count = i4
    1  alias_result_count = i4
    1  provider_result_count = i4
    1  cnt = i4
    1  pool_count = i4
    1  buffer[*]
       2  text = vc
    1  person[*]
       2  person_id = f8
       2  weight = f8
       2  pft_acct_nbr_key = vc
       2  pft_acct_id  = f8
       2  any_name_id = f8
       2  any_name_full = vc ;241999
       2  personnel_ind = i2 ;302772
    1  opf_person[*]
       2  person_id = f8
       2  weight = f8
       2  any_name_id = f8
       2  any_name_full = vc  ;241999
    1  person_alias_filter[*]
       2  alias_low = vc
       2  alias_high = vc
       2  alias_type_cd = f8
       2  alias_pool_cd = f8
       2  meaning = vc
       2  alias_pool[*]
          3 alias_pool_cd    = f8
          3 mnemonic         = vc
    1  encounter_alias_filter[*]
       2  alias_low = vc
       2  alias_high = vc
       2  alias_type_cd = f8
       2  alias_pool_cd = f8
       2  meaning = vc
    1  profit_encounter_alias_filter[*]
       2  alias_low = vc
       2  alias_high = vc
       2  alias_type_cd = f8
       2  alias_pool_cd = f8
       2  meaning = vc
    1  alias_result[*]
       2  alias_type_cd = f8
       2  meaning = vc
    1  provider_result[*]
       2  provider_type_cd = f8
       2  meaning = vc
    1  pool[*]
       2  pool_cd = f8
    1 billing_entity_name_ind     = i2
    1 acct_current_balance_ind    = i2
    1 acct_bad_debt_balance_ind   = i2
    1 billing_entity_filter_count = i4
    1 billing_entity_filter[*]
      2  billing_entity_id        = f8
    1 paf_key = vc
    1 paf_key_partial = i2
    1 paf_key_start = vc
    1 paf_key_end = vc
    1 paf_key_filter_ind = i2
    1 deceased_dt_tm_filter_ind = i2
    1 deceased_dt_tm_start = vc
    1 deceased_dt_tm_end = vc
    1 paf_key_result_ind = i2
    1 deceased_dt_tm_result_ind = i2
    1 encounter_type_multi_filter_ndx = i2     ;153467
    1 medical_service_multi_filter_ndx = i2    ;153467
    1 epr_not_expired_ind = i2 ;189997
    1 epr_prsnl_id = f8        ;189997
    1 primary_care_trust_ind = i2 ;301787TM
    1 source_version_number_ind = i2 ;320638
    1 race_hit = i2 ;336780
  )
;Set the debug flag
  set gp_work->debug = request->debug
;Set the mode flag
  case (request->style)
    of gp_patient_mode:
      set gp_work->mode = gp_patient_mode
    of gp_encounter_mode:
      set gp_work->mode = gp_encounter_mode
    of gp_account_mode:
      set gp_work->mode = gp_account_mode
    of gp_guarantor_mode:
      set gp_work->mode = gp_guarantor_mode
    of gp_umdap_guarantor_mode: ;256118
      set gp_work->mode = gp_umdap_guarantor_mode ;256118
    of gp_person_guarantor_mode: ;292506
      set gp_work->mode = gp_person_guarantor_mode ;292506
    else
      set gp_work->mode = gp_person_mode
  endcase
 
;Determine the user ID
  if (request->user_id > 0.0)
    set gp_work->user_id = request->user_id
  else
    set gp_work->user_id = reqinfo->updt_id
  endif
  if (size(request->options) > 0)
    if (substring(1, 1, request->options) = "1")
      set bAnyNameFlag = 1
    endif
  endif
  declare gp_name_len = i2 with public, noconstant(0)
  declare gp_pa_len   = i2 with public, noconstant(0)
  declare gp_ea_len   = i2 with public, noconstant(0)
  declare gp_name_hit = c5 with public, noconstant(" ")
  declare gp_palias_filter = i2 with noconstant(0)
  declare gp_ealias_filter = i2 with noconstant(0)
  declare cAscii252 = c1 with constant(char(252))
  declare cEndString = c3 with constant(fillstring(3,cAscii252))
  declare sAliasPoolCodeTarget = vc with public, noconstant("") ;130804
  declare sAliasPoolCodeText = vc with public, noconstant("") ;130804
  ;107485++
  declare lHandle      = i4 with noconstant(0)
  set lHandle = uar_i18nalphabet_init()
  set sHighString = "          "
  call uar_i18nAlphabet_HighLetter(lHandle, sHighString, size(sHighString))
  ;107485--
 
  declare RACE_CODESET     = f8 with protect, constant(282)    ;336780
 
  ;292506 - Moved mod 262692 down to the section where it is used
 
#1999_INITIALIZE_EXIT
 
#2000_BUILD_REPLY
;Determine whether we're supposed to return every result
  set i = request->return_all
;Establish result indicator variables
  if (i)
    set gp_work->address_result_ind = 1
    set gp_work->address1_result_ind = 1
    set gp_work->address2_result_ind = 1
    set gp_work->age_result_ind = 1
    set gp_work->birth_date_result_ind = 1
    set gp_work->city_result_ind = 1
    set gp_work->deceased_result_ind = 1
    set gp_work->ethnic_group_result_ind = 1
    set gp_work->gender_result_ind = 1
    set gp_work->language_result_ind = 1
    set gp_work->last_encounter_date_result_ind = 1
    set gp_work->maiden_name_result_ind = 1
    set gp_work->marital_status_result_ind = 1
    set gp_work->mothers_maiden_name_result_ind = 1
    set gp_work->name_result_ind = 1
    set gp_work->nationality_result_ind = 1
    set gp_work->person_result_ind = 1
    set gp_work->person_type_result_ind = 1
    set gp_work->phone_result_ind = 1
    set gp_work->race_result_ind = 1
    set gp_work->religion_result_ind = 1
    set gp_work->species_result_ind = 1
    set gp_work->state_result_ind = 1
    set gp_work->shn_ver_code_ind = 1
    set gp_work->nhn_ver_code_ind = 1
    set gp_work->alt_char_name_ind = 1
    set gp_work->vip_result_ind = 1
    set gp_work->weight_result_ind = 1
    set gp_work->zipcode_result_ind = 1
    set gp_work->shn_province_ind = 1
    set gp_work->nhn_province_ind = 1
    set gp_work->billing_entity_name_ind = 1
    set gp_work->acct_current_balance_ind = 1
    set gp_work->acct_bad_debt_balance_ind = 1
    set gp_work->response_cd_result_ind = 1
    set gp_work->archive_result_ind = 1
    set gp_work->paf_key_result_ind = 1
    set gp_work->deceased_dt_tm_result_ind = 1
    set gp_work->primary_care_trust_ind = 1 ;301787TM
    set gp_work->source_version_number_ind = 1 ;320638
  endif
 
;If we're returning all results, populate the requested result structure
;with important person aliases and provider types
  if (i)
    set j = size(request->result, 5) + 4
    set stat = alterlist(request->result, j)
    set request->result[j - 3]->flag = gp_person_alias_flag
    set request->result[j - 3]->meaning = "MRN"
    set request->result[j - 2]->flag = gp_person_alias_flag
    set request->result[j - 2]->meaning = "SSN"
    set request->result[j - 1]->flag = gp_provider_flag
    set request->result[j - 1]->meaning = "FAMILYDOC"
    set request->result[j]->flag = gp_provider_flag
    set request->result[j]->meaning = "PCP"
  endif
 
;Determine the result indicators
  for (i = 1 to size(request->result, 5))
    case (request->result[i]->flag)
      of gp_address1_flag:
        set gp_work->address1_result_ind = 1
      of gp_address2_flag:
        set gp_work->address2_result_ind = 1
      of gp_age_flag:
        set gp_work->age_result_ind = 1
      of gp_birth_date_flag:
        set gp_work->birth_date_result_ind = 1
      of gp_city_flag:
        set gp_work->city_result_ind = 1
      of gp_deceased_flag:
        set gp_work->deceased_result_ind = 1
      of gp_ethnic_group_flag:
        set gp_work->ethnic_group_result_ind = 1
      of gp_gender_flag:
        set gp_work->gender_result_ind = 1
      of gp_language_flag:
        set gp_work->language_result_ind = 1
      of gp_last_encounter_date_flag:
        set gp_work->last_encounter_date_result_ind = 1
      of gp_maiden_name_flag:
        set gp_work->maiden_name_result_ind = 1
      of gp_marital_status_flag:
        set gp_work->marital_status_result_ind = 1
      of gp_mothers_maiden_name_flag:
        set gp_work->mothers_maiden_name_result_ind = 1
      of gp_name_flag:
        set gp_work->name_result_ind = 1
      of gp_nationality_flag:
        set gp_work->nationality_result_ind = 1
      of gp_person_alias_flag:
        set gp_work->meaning = cnvtupper(trim(request->result[i]->meaning, 3))
        if (size(gp_work->meaning))
          set j = 1
          for (k = 1 to gp_work->alias_result_count)
            if (gp_work->alias_result[k]->meaning = gp_work->meaning)
              set j = 0
              set k = gp_work->alias_result_count + 1
            endif
          endfor
 
          if (j)
            set gp_work->alias_result_count = gp_work->alias_result_count + 1
            set stat = alterlist(gp_work->alias_result, gp_work->alias_result_count)
            set stat = uar_get_meaning_by_codeset(4, nullterm(gp_work->meaning), 1,
                        gp_work->alias_result[gp_work->alias_result_count]->alias_type_cd)
            set gp_work->alias_result[gp_work->alias_result_count]->meaning = gp_work->meaning
          endif
        endif
      of gp_person_type_flag:
        set gp_work->person_type_result_ind = 1
      of gp_phone_flag:
        set gp_work->phone_result_ind = 1
      of gp_provider_flag:
        set gp_work->meaning = cnvtupper(trim(request->result[i]->meaning, 3))
        if (size(gp_work->meaning))
          set j = 1
          for (k = 1 to gp_work->provider_result_count)
            if (gp_work->provider_result[k]->meaning = gp_work->meaning)
              set j = 0
              set k = gp_work->provider_result_count + 1
            endif
          endfor
 
          if (j)
            set gp_work->provider_result_count = gp_work->provider_result_count + 1
            set stat = alterlist(gp_work->provider_result, gp_work->provider_result_count)
            set stat = uar_get_meaning_by_codeset(331, nullterm(gp_work->meaning), 1,
                        gp_work->provider_result[gp_work->provider_result_count]->provider_type_cd)
            set gp_work->provider_result[gp_work->provider_result_count]->meaning = gp_work->meaning
          endif
        endif
      of gp_race_flag:
        set gp_work->race_result_ind = 1
      of gp_religion_flag:
        set gp_work->religion_result_ind = 1
      of gp_species_flag:
        set gp_work->species_result_ind = 1
      of gp_state_flag:
        set gp_work->state_result_ind = 1
      of gp_shn_ver_code_flag:
        set gp_work->shn_ver_code_ind = 1
        set gp_work->meaning = "SHIN"
        set j = 1
        for (k = 1 to gp_work->alias_result_count)
          if (gp_work->alias_result[k]->meaning = gp_work->meaning)
            set j = 0
            set k = gp_work->alias_result_count + 1
          endif
        endfor
        if (j)
          set gp_work->alias_result_count = gp_work->alias_result_count + 1
          set stat = alterlist(gp_work->alias_result, gp_work->alias_result_count)
          set stat = uar_get_meaning_by_codeset(4, nullterm(gp_work->meaning), 1,
                        gp_work->alias_result[gp_work->alias_result_count]->alias_type_cd)
          set gp_work->alias_result[gp_work->alias_result_count]->meaning = gp_work->meaning
        endif
      of gp_nhn_ver_code_flag:
        set gp_work->nhn_ver_code_ind = 1
                                set gp_work->meaning = "NHIN"
        set j = 1
        for (k = 1 to gp_work->alias_result_count)
          if (gp_work->alias_result[k]->meaning = gp_work->meaning)
            set j = 0
            set k = gp_work->alias_result_count + 1
          endif
        endfor
        if (j)
          set gp_work->alias_result_count = gp_work->alias_result_count + 1
          set stat = alterlist(gp_work->alias_result, gp_work->alias_result_count)
          set stat = uar_get_meaning_by_codeset(4, nullterm(gp_work->meaning), 1,
                      gp_work->alias_result[gp_work->alias_result_count]->alias_type_cd)
 
          set gp_work->alias_result[gp_work->alias_result_count]->meaning = gp_work->meaning
        endif
      of gp_vip_flag:
        set gp_work->vip_result_ind = 1
      of gp_weight_flag:
        set gp_work->weight_result_ind = 1
      of gp_zipcode_flag:
        set gp_work->zipcode_result_ind = 1
      of gp_alt_char_name_flag:
        set gp_work->alt_char_name_ind = 1
      of gp_nhn_person_alias_province_flag:
         set gp_work->nhn_province_ind = 1
         set gp_work->meaning = "NHIN"
         set j = 1
         for ( k = 1 to gp_work->alias_result_count )
             if (gp_work->alias_result[k]->meaning = gp_work->meaning)
                 set j = 0
                 set k = gp_work->alias_result_count + 1
             endif
         endfor
          if ( j )
             set gp_work->alias_result_count = gp_work->alias_result_count + 1
             set stat = alterlist(gp_work->alias_result, gp_work->alias_result_count)
             set stat = uar_get_meaning_by_codeset(4, nullterm(gp_work->meaning), 1,
                         gp_work->alias_result[gp_work->alias_result_count]->alias_type_cd)
             set gp_work->alias_result[gp_work->alias_result_count]->meaning = gp_work->meaning
          endif
      of gp_shn_person_alias_province_flag:
          set gp_work->shn_province_ind = 1
          set gp_work->meaning = "SHIN"
          set j = 1
          for (k =1 to gp_work->alias_result_count)
              if (gp_work->alias_result[k]->meaning = gp_work->meaning)
                  set j = 0
                  set k = gp_work->alias_result_count + 1
              endif
          endfor
          if ( j )
             set gp_work->alias_result_count = gp_work->alias_result_count + 1
             set stat = alterlist(gp_work->alias_result, gp_work->alias_result_count)
             set stat = uar_get_meaning_by_codeset(4, nullterm(gp_work->meaning), 1,
                         gp_work->alias_result[gp_work->alias_result_count]->alias_type_cd)
             set gp_work->alias_result[gp_work->alias_result_count]->meaning = gp_work->meaning
          endif
      of gp_billing_entity_name_flag:
        set gp_work->billing_entity_name_ind = 1
      of gp_acct_current_balance_flag:
        set gp_work->acct_current_balance_ind = 1
      of gp_acct_bad_debt_balance_flag:
        set gp_work->acct_bad_debt_balance_ind = 1
      of gp_response_cd_flag:
        set gp_work->response_cd_result_ind = 1
      of gp_archive_flag:
        set gp_work->archive_result_ind = 1
      of gp_deceased_dt_tm_flag:
        set gp_work->deceased_dt_tm_result_ind = 1
      of gp_paf_key_flag:
          set gp_work->paf_key_result_ind = 1
      of gp_primary_care_trust_flag: ;301787TM
          set gp_work->primary_care_trust_ind = 1 ;301787TM
      of gp_source_version_number_flag:
          set gp_work->source_version_number_ind = 1 ;320638
    endcase
  endfor
 
;Determine whether we're supposed to retrieve a person table result
  if (gp_work->age_result_ind or gp_work->birth_date_result_ind or gp_work->deceased_result_ind
    or gp_work->ethnic_group_result_ind or gp_work->gender_result_ind or gp_work->language_result_ind
    or gp_work->last_encounter_date_result_ind or gp_work->marital_status_result_ind or gp_work->mothers_maiden_name_result_ind
    or gp_work->name_result_ind or gp_work->nationality_result_ind or gp_work->person_type_result_ind
    or gp_work->race_result_ind or gp_work->religion_result_ind or gp_work->species_result_ind or gp_work->vip_result_ind
    or gp_work->archive_result_ind)
      set gp_work->person_result_ind = 1
  endif
 
;Determine whether we're supposed to retrieve an address table result
  if (gp_work->address1_result_ind or gp_work->address2_result_ind or gp_work->city_result_ind
    or gp_work->state_result_ind or gp_work->zipcode_result_ind or gp_work->paf_key_result_ind)
      set gp_work->address_result_ind = 1
  endif
 
;Build the reply structure according to the results requested - note that the parser
;command must be used directly to build this structure, for some reason
  free record reply
 
  call parser("record reply", 1)
  call parser("(", 1)
  call parser("1  filter_str = vc", 1)
  call parser("1  person[*]", 1)
  call parser("2  person_id = f8", 1)
  if (gp_work->address1_result_ind)
    call parser("2 address1 = vc", 1)
  endif
  if (gp_work->address2_result_ind)
    call parser("2 address2 = vc", 1)
  endif
  if (gp_work->age_result_ind)
    call parser("2 age = vc", 1)
  endif
  for (i = 1 to gp_work->alias_result_count)
    call parser(concat("2 alias_", cnvtlower(cnvtalphanum(gp_work->alias_result[i]->meaning)), " = vc"), 1)
    call parser(concat("2 alias_pool_cd_", cnvtlower(cnvtalphanum(gp_work->alias_result[i]->meaning)), " = vc"), 1) ;130804
  endfor
  if (gp_work->shn_ver_code_ind = 1)
    call parser("2 shn_ver_code = c3",1)
  endif
  if (gp_work->nhn_ver_code_ind = 1)
    call parser("2 nhn_ver_code = c3",1)
  endif
  if (gp_work->alt_char_name_ind = 1)
    call parser("2 alt_char_name = vc", 1)
  endif
  if (gp_work->birth_date_result_ind)
    call parser("2 birth_date = dq8", 1)
    call parser("2 abs_birth_date = vc", 1)      ;216099
    call parser("2 birth_prec_flag = i2", 1)     ;216099
    if (curutc)
      call parser("2 birth_tz = i4",1)
    endif
  endif
  if (gp_work->city_result_ind)
    call parser("2 city = vc", 1)
  endif
  if (gp_work->deceased_result_ind)
    call parser("2 deceased = vc", 1)
  endif
  if (gp_work->ethnic_group_result_ind)
    call parser("2 ethnic_group = vc", 1)
  endif
  if (gp_work->gender_result_ind)
    call parser("2 gender = vc", 1)
  endif
  if (gp_work->language_result_ind)
    call parser("2 language = vc", 1)
  endif
  if (gp_work->last_encounter_date_result_ind)
    call parser("2 last_encounter_date = dq8", 1)
  endif
  if (gp_work->maiden_name_result_ind)
    call parser("2 maiden_name = vc", 1)
  endif
  if (gp_work->marital_status_result_ind)
    call parser("2 marital_status = vc", 1)
  endif
  if (gp_work->mothers_maiden_name_result_ind)
    call parser("2 mothers_maiden_name = vc", 1)
  endif
  if (gp_work->name_result_ind)
    call parser("2 name = vc", 1)
  endif
  if (gp_work->nationality_result_ind)
    call parser("2 nationality = vc", 1)
  endif
  if (gp_work->person_type_result_ind)
    call parser("2 person_type = vc", 1)
  endif
  if (gp_work->phone_result_ind)
    call parser("2 phone = vc", 1)
  endif
  for (i = 1 to gp_work->provider_result_count)
    call parser(concat("2 provider_", cnvtlower(cnvtalphanum(gp_work->provider_result[i]->meaning)), " = vc"), 1)
  endfor
  if (gp_work->race_result_ind)
    call parser("2 race = vc", 1)
  endif
  if (gp_work->religion_result_ind)
    call parser("2 religion = vc", 1)
  endif
  if (gp_work->species_result_ind)
    call parser("2 species = vc", 1)
  endif
  if (gp_work->state_result_ind)
    call parser("2 state = vc", 1)
  endif
  if (gp_work->vip_result_ind)
    call parser("2 vip = vc", 1)
  endif
  if (gp_work->weight_result_ind)
    call parser("2 weight = f8", 1)
  endif
  if (gp_work->zipcode_result_ind)
    call parser("2 zipcode = vc", 1)
  endif
  if (gp_work->shn_province_ind = 1)
     call parser("2 shn_province = c3", 1)
  endif
  if (gp_work->nhn_province_ind = 1)
     call parser("2 nhn_province = c3", 1 )
  endif
  if (gp_work->billing_entity_name_ind = 1)
     call parser("2 billing_entity_name = vc",1)
  endif
  if (gp_work->acct_current_balance_ind = 1)
     call parser("2 acct_current_balance = f8.0",1)
  endif
  if (gp_work->acct_bad_debt_balance_ind = 1)
     call parser("2 acct_bad_debt_balance = f8.0",1)
  endif
  ;~ If I'm in account mode, then I need to store the account number & account_id
  ;~ in the reply structure.  This will be used later in FILL_REPLY
  ;~ to retrieve the correct account information.  Person_id is not specific
  ;~ enough to retrieve accurate data.
  ;191819 if (gp_work->mode = gp_account_mode)
     call parser("2 pft_acct_id  = f8",1)
  ;191819 endif
  if (bAnyNameFlag)
     call parser("2 any_name_id = f8",1)
     call parser("2 any_name_full = vc",1)
  endif
  if (gp_work->response_cd_result_ind = 1)
     call parser("2 response_cd_display = vc", 1)
  endif
  if (gp_work->archive_result_ind = 1)
     call parser("2 archive_cd_display = vc", 1)
     call parser("2 archive_cd_meaning = vc", 1)
  endif
    if(gp_work->deceased_dt_tm_result_ind = 1)
      call parser("2 deceased_dt_tm = dq8", 1)
  	   call parser("2 deceased_dt_tm_prec_flag = i2", 1) ;216099
  	   
  	   ;+314173
  	   if (curutc)
         call parser("2 deceased_tz = i4", 1)
      endif
      ;-314173
  	   
  endif
  if(gp_work->paf_key_result_ind = 1)
      call parser("2 paf_key = vc",1)
  endif
 
  ;292506
  if (gp_work->mode = gp_person_guarantor_mode)
     call parser("2 ppr_guar_reltns_ind = i2", 1)
     call parser("2 ppr_guar_reltns[*]", 1)
     call parser("  3 person_id = f8", 1)
  endif
  ;-292506
 
  ;301787TM++
  if (gp_work->primary_care_trust_ind = 1)
    call parser("2 primary_care_trust = vc", 1)
  endif
  ;301787TM--
   ;320638++
  if (gp_work->source_version_number_ind = 1)
    call parser("2 source_version_number = vc", 1)
  endif
  ;320638--
 
  call parser("1 status_data", 1)
  call parser("2 status = c1", 1)
  call parser("2 subeventstatus[1]", 1)
  call parser("3 operationname = vc", 1)
  call parser("3 operationstatus = c1", 1)
  call parser("3 targetobjectname = vc", 1)
  call parser("3 targetobjectvalue = vc", 1)
  call parser("1 search_method_ind = i4", 1)  ;208995
 
  ;+292506
  if (gp_work->debug > 0)
     call parser("1 debug_text = vc", 1)
  endif
  ;-292506
 
  call parser(") go", 1)
;Initialize the reply
  set reply->status_data->status = "F"
  set reply->search_method_ind = eNONE    ;208995
#2999_BUILD_REPLY_EXIT
 
subroutine determine_filters(sc_dummy)
;Determine filter indicators and set filter values
  declare person_meaning = c12 with private, noconstant(" ")
  for (i = 1 to size(request->filter, 5))
    set gp_work->text = cnvtupper(trim(request->filter[i]->value, 3))
    set gp_work->raw_text = gp_work->text
    set j = size(gp_work->text)

    ;344225++
    ;if we find a quote we want it remove any asterisks at the end to force it to be equal  
    if (findstring(char(gp_quote),gp_work -> text,1) > 0 )
        if ( ( ichar ( substring ( j , 1 ,  gp_work -> text ))= gp_asterisk ) )
           set gp_work->text = substring(1,j-1,gp_work->text)
        endif
        ;remove the quotes
        set gp_work->text = replace(gp_work->text,char(gp_quote),"",0)
        if (request->filter[i]->flag != gp_encounter_ident_flag and request->filter[i]->flag != gp_person_ident_flag)      ;382732
            set gp_work->text = cnvtalphanum(gp_work->text)
        endif                                                                                                              ;382732
    else
       call handle_asterisk(gp_work->text)  
       if (aster_loc = j and aster_cnt = 1)
          if ( ( ichar ( substring ( j , 1 ,  gp_work -> text ))= gp_asterisk ) )
             if (request->filter[i]->flag != gp_encounter_ident_flag and request->filter[i]->flag != gp_person_ident_flag) ;382732
                set  gp_work -> text  =  concat ( trim ( cnvtalphanum ( gp_work -> text ), 3 ), "*" )
             else                                                                                                          ;382732
                set  gp_work -> text  =  concat ( trim (gp_work -> text , 3 ), "*" )                                       ;382732
             endif                                                                                                         ;382732
          else
             if (request->filter[i]->flag != gp_encounter_ident_flag and request->filter[i]->flag != gp_person_ident_flag) ;382732
                set  gp_work -> text  =  trim ( cnvtalphanum ( gp_work -> text ), 3 )
             else                                                                                                          ;382732
                set  gp_work -> text  =  trim ( gp_work -> text, 3 )                                                       ;382732
             endif                                                                                                         ;382732
          endif
       else
             if (request->filter[i]->flag != gp_encounter_ident_flag and request->filter[i]->flag != gp_person_ident_flag) ;382732
                set  gp_work -> text  =  trim ( cnvtalphanum ( gp_work -> text ), 3 )
             else                                                                                                          ;382732
                set  gp_work -> text  =  trim ( gp_work -> text, 3 )
             endif                                                                                                         ;382732
       endif
    endif
    ;344225--

    ;+176549
    ;set gp_work->code = cnvtreal(gp_work->text)
    if (isnumeric(gp_work->text) > 0)
       set gp_work->code = cnvtreal(gp_work->text)
    else
       set gp_work->code = 0.0
    endif
    ;-176549
    set gp_work->meaning = cnvtupper(trim(request->filter[i]->meaning, 3))
    set j = size(gp_work->text)
    if (gp_work->code > 0.0)
      set k = 1
    else
      set k = 0
    endif
    if (size(gp_work->text))
      case (request->filter[i]->flag)
        of gp_age_flag:
          if (j = 8)
            set gp_work->age_filter_ind = 1
            case (cnvtupper(substring(4, 1, gp_work->text)))
              of "M":
                set gp_work->age_end = concat("0,", substring(1, 3, gp_work->text), ",0,0")
              of "W":
                set gp_work->age_end = concat("0,0,", substring(1, 3, gp_work->text), ",0")
              of "D":
                set gp_work->age_end = concat("0,0,0,", substring(1, 3, gp_work->text))
              else
                set gp_work->age_end = concat(substring(1, 3, gp_work->text), ",0,0,0")
            endcase
            case (cnvtupper(substring(8, 1, gp_work->text)))
              of "M":
                set gp_work->age_start = concat("0,", substring(5, 3, gp_work->text), ",0,30")
              of "W":
                set gp_work->age_start = concat("0,0,", substring(5, 3, gp_work->text), ",6")
              of "D":
                set gp_work->age_start = concat("0,0,0,", substring(5, 3, gp_work->text))
              else
                set gp_work->age_start = concat(substring(5, 3, gp_work->text), ",0,0,364")
            endcase
          endif
        of gp_birth_date_flag:
          set gp_work->birth_date_start = concat(gp_work->raw_text, " 00:00:00.00")
          set gp_work->birth_date_end = concat(gp_work->raw_text, " 23:59:59.99")
          if (size(gp_work->birth_date_start) and size(gp_work->birth_date_end))
            set gp_work->birth_date_filter_ind = 1
          endif
        of gp_deceased_flag:
          if (k)
            set gp_work->deceased = gp_work->code
            set gp_work->deceased_filter_ind = 1
          endif
        of gp_first_name_flag:
          set gp_work->first_name_filter_ind = 1
          set gp_work->first_name = gp_work->text
          set gp_work->first_name_phonetic = soundex(cnvtalphanum(gp_work->first_name))

          call handle_asterisk(gp_work->text)                                                       ;344225
           
          if (aster_loc = j and aster_cnt = 1)                                                      ;344225
   
             if ( ( ichar ( substring ( j , 1 ,  gp_work -> first_name ))= gp_asterisk ) ) 
                set  gp_work -> first_name_partial  = 1 
                set  gp_work -> first_name_start  =  substring (1 , ( j -1 ),  gp_work -> first_name )
                if (  (( ( shighstring =" " ) )  or  (( shighstring = null ) ))  ) 
                   set  gp_work -> first_name_end  =  concat ( gp_work -> first_name_start ,  cendstring )
                else  
                   set  gp_work -> first_name_end  =  concat ( gp_work -> first_name_start ,  shighstring )
                endif
             endif

           endif                                                                                   ;344225

          if (request->filter[i]->phonetic)
            set gp_work->phonetic = 1
          endif
          if (gp_name_len <= size(trim(gp_work->first_name,3)))
            set gp_name_len = size(trim(gp_work->first_name,3))
          endif
        of gp_gender_flag:
          if (k)
            set gp_work->gender = gp_work->code
            set gp_work->gender_filter_ind = 1
          endif
        of gp_last_name_flag:
          set gp_work->last_name_filter_ind = 1
          set gp_work->last_name = gp_work->text
          set gp_work->last_name_phonetic = soundex(cnvtalphanum(gp_work->last_name))
		  
          call handle_asterisk(GP_WORK->TEXT)                                                      ;344225
          if (aster_loc = j and aster_cnt = 1)                                                     ;344225
             if (ichar(substring(j, 1, gp_work->last_name)) = gp_asterisk)
                set gp_work->last_name_partial = 1
                set gp_work->last_name_start = substring(1, j - 1, gp_work->last_name)
                ;107485++
                ;set gp_work->last_name_end = concat(gp_work->last_name_start, cEndString)
                if (sHighString = " " or sHighString = NULL)
                   set gp_work->last_name_end = concat(gp_work->last_name_start, cEndString)
                else
                   set gp_work->last_name_end = concat(gp_work->last_name_start, sHighString)
                endif
                ;107485--
             endif
          endif                                                                                    ;344225
		  
          if (request->filter[i]->phonetic)
            set gp_work->phonetic = 1
          endif
          if (gp_name_len <= size(trim(gp_work->last_name,3)))
            set gp_name_len = size(trim(gp_work->last_name,3))
          endif
        of gp_maiden_name_flag:
          if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
            set gp_work->maiden_name_low = substring(1, j - 1, gp_work->text)
            ;107485++
            ;set gp_work->maiden_name_high = concat(gp_work->maiden_name_low, cEndString)
            if (sHighString = " " or sHighString = NULL)
                set gp_work->maiden_name_high = concat(gp_work->maiden_name_low, cEndString)
            else
                set gp_work->maiden_name_high = concat(gp_work->maiden_name_low, sHighString)
            endif
            ;107485--
          else
            set gp_work->maiden_name_low = gp_work->text
            set gp_work->maiden_name_high = gp_work->text
          endif
          set gp_work->maiden_name_filter_ind = 1
        of gp_middle_name_flag:
          if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
            set gp_work->middle_name_low = substring(1, j - 1, gp_work->text)
            ;107485++
            ;set gp_work->middle_name_high = concat(gp_work->middle_name_low, cEndString)
            if (sHighString = " " or sHighString = NULL)
                set gp_work->middle_name_high = concat(gp_work->middle_name_low, cEndString)
            else
                set gp_work->middle_name_high = concat(gp_work->middle_name_low, sHighString)
            endif
            ;107485--
          else
            set gp_work->middle_name_low = gp_work->text
            set gp_work->middle_name_high = gp_work->text
          endif
          set gp_work->middle_name_filter_ind = 1
          if (gp_name_len <= size(trim(gp_work->middle_name_low,3)))
            set gp_name_len = size(trim(gp_work->middle_name_low,3))
          endif
        of gp_mothers_maiden_name_flag:
          if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
            set gp_work->mothers_maiden_name_low = substring(1, j - 1, gp_work->text)
            ;107485++
            ;set gp_work->mothers_maiden_name_high = concat(gp_work->mothers_maiden_name_low, cEndString)
            if (sHighString = " " or sHighString = NULL)
                set gp_work->mothers_maiden_name_high = concat(gp_work->mothers_maiden_name_low, cEndString)
            else
                set gp_work->mothers_maiden_name_high = concat(gp_work->mothers_maiden_name_low, sHighString)
            endif
            ;107485--
          else
            set gp_work->mothers_maiden_name_low = gp_work->text
            set gp_work->mothers_maiden_name_high = gp_work->text
          endif
          set gp_work->mothers_maiden_name_filter_ind = 1
		  
        ;344225++
        of  gp_person_ident_flag:
           set gp_work->person_ident_filter_ind = 1
           set gp_work -> person_alias_filter_count  = 1
           set  stat  =  alterlist ( gp_work -> person_alias_filter , gp_work -> person_alias_filter_count)
           set  gp_work -> person_alias_filter [ 1 ]-> alias_low  = gp_work -> text
        ;344225--
		
        of gp_person_alias_flag:
          set stat = uar_get_meaning_by_codeset(4, nullterm(gp_work->meaning), 1, gp_work->code)
          if (gp_work->code > 0.0)
            set gp_work->person_alias_filter_count = gp_work->person_alias_filter_count + 1
            set stat = alterlist(gp_work->person_alias_filter, gp_work->person_alias_filter_count)
            if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
              set gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_low
                = substring(1, j - 1, gp_work->text)
              set gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_high
                = concat(gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_low, "zzz")
            else
              set gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_low = gp_work->text
              set gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_high = gp_work->text
            endif
            set gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_type_cd = gp_work->code
            set gp_work->person_alias_filter[gp_work->person_alias_filter_count]->meaning = gp_work->meaning
 
            case (gp_work->meaning)
              of "CMRN":
                set gp_work->patient_filter_ind = 1
              of "MRN":
                set gp_work->patient_filter_ind = 1
              of "SSN":
                set gp_work->ssn_filter_ind = 1
                set gp_work->ssn = gp_work->text
                if (ichar(substring(j, 1, gp_work->ssn)) = gp_asterisk)
                  set gp_work->ssn_partial = 1
                endif
            endcase
            if (gp_work->meaning != "SSN")
              set gp_work->non_ssn_filter_ind = 1
            endif
            if (gp_pa_len <= size(trim(gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_low,3)))
              set gp_pa_len = size(trim(gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_low,3))
            endif
          endif
          ;loop through filter again to search for gp_person_alias_province_flag
          ; Expecting filter for province_flag and meaning the same as person alias
          set person_alias_meaning = gp_work->meaning ;get person_alias meaning "SHIN, NHIN"
          set k = 0
          set TotalSize = size(request->filter, 5 )
          for ( k = 1 to TotalSize )
             if(request->filter[k]->flag = gp_person_alias_province_flag )
               set gp_work->meaning = cnvtupper(trim(request->filter[k]->meaning,3))
               set gp_work->text = cnvtupper(trim(request->filter[k]->value, 3))
               if (gp_work->meaning = person_alias_meaning)
                  set gp_work->code = cnvtreal(gp_work->text)
                  if ( gp_work->code > 0.0 )
     ;132 limited column restriction
  set gp_work->cnt = gp_work->cnt + 1
  set stat = alterlist(gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_pool,gp_work->cnt)
  set gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_pool[gp_work->cnt]->alias_pool_cd = gp_work->code
  set gp_work->person_alias_filter[gp_work->person_alias_filter_count]->alias_pool[gp_work->cnt]->mnemonic = gp_work->meaning
                  endif
               endif
            endif
         endfor
 
        of gp_person_relation_flag:
          if (k)
            set gp_work->person_relation = gp_work->code
            set gp_work->person_relation_filter_ind = 1
          endif
        of gp_person_type_flag:
          if (k)
            set gp_work->person_type = gp_work->code
            set gp_work->person_type_filter_ind = 1
          endif
        of gp_race_flag:
          if (k)
            set gp_work->race = gp_work->code
            set gp_work->race_filter_ind = 1
          endif
        of gp_vip_flag:
          if (k)
            set gp_work->vip = gp_work->code
            set gp_work->vip_filter_ind = 1
          endif
        of gp_archive_flag:
          if (gp_work->code > 0.0)
            set gp_work->archive_cd = gp_work->code
            set gp_work->archive_filter_ind = 1
          endif
        of gp_building_flag:
          if (k)
            set gp_work->building = gp_work->code
            set gp_work->building_filter_ind = 1
          endif
        of gp_client_flag:
          if (k)
            set gp_work->client = gp_work->code
            set gp_work->client_filter_ind = 1
          endif
        of gp_discharge_date_flag:
          set gp_work->discharge_date_start = concat(gp_work->raw_text, " 00:00:00.00")
          set gp_work->discharge_date_end = concat(gp_work->raw_text, " 23:59:59.99")
          if (size(gp_work->discharge_date_start) and size(gp_work->discharge_date_end))
            set gp_work->discharge_date_filter_ind = 1
          endif
       ;344225++
       of gp_encounter_ident_flag:                                                                                           
          set gp_work -> encounter_alias_filter_count  = ( gp_work -> encounter_alias_filter_count +1 )                      
          set stat  =  alterlist ( gp_work -> encounter_alias_filter ,  gp_work -> encounter_alias_filter_count )            
          set gp_work -> encounter_alias_filter [ gp_work -> encounter_alias_filter_count ]-> alias_low  =  gp_work -> text  
          set gp_work->encounter_ident_filter_ind = 1                                                                        
       ;344225--	  
        of gp_encounter_alias_flag:
          set stat = uar_get_meaning_by_codeset(319, nullterm(gp_work->meaning), 1, gp_work->code)
          if (gp_work->code > 0.0)
            set gp_work->encounter_alias_filter_count = gp_work->encounter_alias_filter_count + 1
            set stat = alterlist(gp_work->encounter_alias_filter, gp_work->encounter_alias_filter_count)
            if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
              set gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->alias_low
                = substring(1, j - 1, gp_work->text)
              set gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->alias_high
                = concat(gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->alias_low, "zzz")
            else
              set gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->alias_low = gp_work->text
              set gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->alias_high = gp_work->text
            endif
            set gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->alias_type_cd = gp_work->code
            set gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->meaning = gp_work->meaning
            if (gp_ea_len <= size(trim(gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->alias_low,3)))
              set gp_ea_len = size(trim(gp_work->encounter_alias_filter[gp_work->encounter_alias_filter_count]->alias_low,3))
            endif
          endif
        of gp_profit_encounter_alias_flag:
          set stat = uar_get_meaning_by_codeset(27520, nullterm(gp_work->meaning), 1, gp_work->code)
          if (gp_work->code > 0.0)
            set gp_work->profit_encounter_alias_filter_count = gp_work->profit_encounter_alias_filter_count + 1
            set stat = alterlist(gp_work->profit_encounter_alias_filter, gp_work->profit_encounter_alias_filter_count)
            if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
              set gp_work->profit_encounter_alias_filter[gp_work->profit_encounter_alias_filter_count]->alias_low
                = substring(1, j - 1, gp_work->text)
              set gp_work->profit_encounter_alias_filter[gp_work->profit_encounter_alias_filter_count]->alias_high
                = concat(gp_work->profit_encounter_alias_filter[gp_work->profit_encounter_alias_filter_count]->alias_low, "zzz")
            else
              set gp_work->profit_encounter_alias_filter[gp_work->profit_encounter_alias_filter_count]->alias_low =
                    gp_work->text
              set gp_work->profit_encounter_alias_filter[gp_work->profit_encounter_alias_filter_count]->alias_high =
                    gp_work->text
            endif
            set gp_work->profit_encounter_alias_filter[gp_work->profit_encounter_alias_filter_count]->alias_type_cd =
                   gp_work->code
            set gp_work->profit_encounter_alias_filter[gp_work->profit_encounter_alias_filter_count]->meaning = gp_work->meaning
          endif
        of gp_encounter_relation_flag:
          if (k)
            set gp_work->encounter_relation = gp_work->code
            set gp_work->encounter_relation_filter_ind = 1
          endif
        of gp_encounter_status_flag:
          if (k)
            set gp_work->encounter_status = gp_work->code
            set gp_work->encounter_status_filter_ind = 1
          endif
        of gp_encounter_type_class_flag:
          if (k)
            set gp_work->encounter_type_class = gp_work->code
            set gp_work->encounter_type_class_filter_ind = 1
          endif
        of gp_encounter_type_flag:
          if (k)
            set gp_work->encounter_type = gp_work->code
            set gp_work->encounter_type_filter_ind = 1
          endif
         of gp_encounter_type_multi_flag:
          if (k)
             set gp_work->encounter_type_multi_filter_ndx = i
         endif
        of gp_facility_flag:
          if (k)
            set gp_work->facility = gp_work->code
            set gp_work->facility_filter_ind = 1
          endif
        of gp_financial_class_flag:
          if (k)
            set gp_work->financial_class = gp_work->code
            set gp_work->financial_class_filter_ind = 1
          endif
        of gp_location_flag:
          if (k)
            set gp_work->location = gp_work->code
            set gp_work->location_filter_ind = 1
          endif
        of gp_medical_service_flag:
          if (k)
            set gp_work->medical_service = gp_work->code
            set gp_work->medical_service_filter_ind = 1
          endif
         of gp_medical_service_multi_flag:
          if (k)
             set gp_work->medical_service_multi_filter_ndx = i
         endif
        of gp_registration_date_flag:
          set gp_work->registration_date_start = concat(gp_work->raw_text, " 00:00:00.00")
          set gp_work->registration_date_end = concat(gp_work->raw_text, " 23:59:59.99")
          if (size(gp_work->registration_date_start) and size(gp_work->registration_date_end))
            set gp_work->registration_date_filter_ind = 1
          endif
        of gp_claim_number_flag:
          set gp_work->claim_number_filter_ind = 1
        of gp_statement_number_flag:
          set gp_work->statement_number_filter_ind = 1
        of gp_zipcode_flag:
           if (request->filter[i].meaning = "HOME")
              set gp_work->home_address_filter_ind = 1
              set gp_work->home_zip_code = gp_work->text
              if (ichar(substring(j, 1, gp_work->home_zip_code)) = gp_asterisk)
                set gp_work->home_zip_code_partial = 1
                set gp_work->home_zip_code_start = substring(1, j - 1, gp_work->home_zip_code)
                ;107485+
                ;set gp_work->home_zip_code_end = concat(gp_work->home_zip_code_start, cEndString)
                call uar_i18nAlphabet_HighChar(lHandle, sHighString, size(sHighString))
                if (sHighString = " " or sHighString = NULL)
                   set gp_work->home_zip_code_end = concat(gp_work->home_zip_code_start, cEndString)
                else
                   set gp_work->home_zip_code_end = concat(gp_work->home_zip_code_start, sHighString)
                endif
                ;107485--
              endif
           endif
        ;344225++
        of gp_quality_phone_flag:     
              set gp_work->phone_filter_ind = 1097
              set gp_work->phone_num = gp_work->text
        ;344225--
       ;of gp_phone_flag:  ;108251
        of gp_any_phone_flag:  ;108251
              set gp_work->phone_filter_ind = 1
              set gp_work->phone_num = gp_work->text
        of gp_billing_entity_flag:
          set be_start = 1
          set be_end = size(gp_work->raw_text)
          set be_end_string = FALSE
          while(be_end > 0 and be_end_string != TRUE)
            ;locate the delimiter
            set be_index = findstring(",", gp_work->raw_text, be_start, 0) - 1
            if(be_index = -1)
               set be_index = be_end
               set be_end_string = TRUE
            endif
            ;pull the id string
            set be_id_txt = trim(substring(be_start, be_index, gp_work->raw_text),3)
            ;make sure a value is present
            if(size(be_id_txt) > 0)
               set gp_work->billing_entity_filter_count = gp_work->billing_entity_filter_count + 1
               set stat = alterlist(gp_work->billing_entity_filter, gp_work->billing_entity_filter_count)
               set gp_work->billing_entity_filter[gp_work->billing_entity_filter_count].billing_entity_id = cnvtreal(be_id_txt)
            endif
            ;make sure to position index past the delimiter
            set be_start = be_index + 2
          endwhile
           of gp_paf_key_flag:
                set gp_work->paf_key = gp_work->text
            set gp_work->paf_key_filter_ind = 1
            if (ichar(substring(j, 1, gp_work->paf_key)) = gp_asterisk)
                set gp_work->paf_key_partial = 1
                set gp_work->paf_key_start = substring(1, j - 1, gp_work->paf_key)
                ;107485++
                ;set gp_work->paf_key_end = concat(gp_work->paf_key_start, cEndString)
                call uar_i18nAlphabet_HighChar(lHandle, sHighString, size(sHighString))
                if (sHighString = " " or sHighString = NULL)
                   set gp_work->paf_key_end = concat(gp_work->paf_key_start, cEndString)
                else
                   set gp_work->paf_key_end = concat(gp_work->paf_key_start, sHighString)
                endif
                ;107485--
            endif
        of gp_deceased_dt_tm_flag:
          set gp_work->deceased_dt_tm_start = concat(gp_work->raw_text, " 00:00:00.00")
          set gp_work->deceased_dt_tm_end = concat(gp_work->raw_text, " 23:59:59.99")
          if (size(gp_work->deceased_dt_tm_start) and size(gp_work->deceased_dt_tm_end))
            set gp_work->deceased_dt_tm_filter_ind = 1
          endif
       ;189997++
        of gp_epr_not_expired_flag:
          if(gp_work->code > 0.0)
            set gp_work->epr_not_expired_ind = TRUE
          else
            set gp_work->epr_not_expired_ind = FALSE
          endif
          set gp_work->encounter_relation_filter_ind = 1
          set use_prsnl_or_expire_filter = 1
        of gp_epr_prsnl_id_flag:
          if(gp_work->code >= 0.0)
            set gp_work->epr_prsnl_id = gp_work->code
            set gp_work->encounter_relation_filter_ind = 1
            set use_prsnl_or_expire_filter = 1
          endif
      ;189997--
      endcase
    endif
  endfor
;If client is a filter, determine the alias pool for each alias filter
  if (gp_work->client_filter_ind)
    if (gp_work->person_alias_filter_count)
      select into "nl:" r.alias_pool_cd
        from org_alias_pool_reltn r, (dummyt d with seq = value(gp_work->person_alias_filter_count))
        plan d
        
       ;+333187
       ;where gp_work->person_alias_filter[d.seq]->meaning not in ("SSN", "DRLIC", "MILITARYID", "SHIN")
       where gp_work->person_alias_filter[d.seq]->meaning not in ("SSN", "DRLIC", "MILITARYID", "SHIN", "NTKCRDNBR")
       ;-333187
       
        join r
       where r.organization_id = gp_work->client
         and r.alias_entity_name = "PERSON_ALIAS"
         and r.alias_entity_alias_type_cd + 0 = gp_work->person_alias_filter[d.seq]->alias_type_cd
         and r.alias_pool_cd + 0 > 0.0
         and r.active_ind = 1
         and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
         and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
      detail
        gp_work->person_alias_filter[d.seq]->alias_pool_cd = r.alias_pool_cd
      with nocounter
    endif
    if (gp_work->encounter_alias_filter_count)
      set lCnt = 0
      set lCnt2 = 0
      select into "nl:"
        r.alias_pool_cd
       from org_alias_pool_reltn r
        where r.organization_id = gp_work->client
          and r.alias_entity_name = "ENCNTR_ALIAS"
          and expand(lCnt, 1, gp_work->encounter_alias_filter_count,
               r.alias_entity_alias_type_cd + 0, gp_work->encounter_alias_filter[lCnt]->alias_type_cd, 100)
          and r.alias_pool_cd + 0 > 0.0
          and r.active_ind = 1
          and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
          and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
       detail
         lCnt2 = locateval(lCnt, 1, gp_work->encounter_alias_filter_count, r.alias_entity_alias_type_cd,
                            gp_work->encounter_alias_filter[lCnt]->alias_type_cd)
         gp_work->encounter_alias_filter[lCnt2]->alias_pool_cd = r.alias_pool_cd
      with nocounter
    endif
    if (gp_work->profit_encounter_alias_filter_count)
      set lCnt = 0
      set lCnt2 = 0
      select into "nl:"
        r.alias_pool_cd
       from org_alias_pool_reltn r
        where r.organization_id = gp_work->client
          and r.alias_entity_name = "ProFit Encounter Alias"
          and expand(lCnt, 1, gp_work->profit_encounter_alias_filter_count, r.alias_entity_alias_type_cd + 0,
                       gp_work->profit_encounter_alias_filter[lCnt]->alias_type_cd, 100)
          and r.alias_pool_cd + 0 > 0.0
          and r.active_ind = 1
          and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
          and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
       detail
         lCnt2 = locateval(lCnt, 1, gp_work->profit_encounter_alias_filter_count, r.alias_entity_alias_type_cd,
                       gp_work->profit_encounter_alias_filter[lCnt]->alias_type_cd)
 
         gp_work->encounter_alias_filter[lCnt2]->alias_pool_cd = r.alias_pool_cd
      with nocounter
    endif
  endif
;Determine the "any name searching" option
    if (size(request->options) > 0)
      if (substring(1, 1, request->options) = "1")
        set gp_work->any_name = 1
      endif
    endif
;Determine the OPF option
  set gp_work->opf = request->opf
;Determine whether we're supposed to skip discharged encounters
  if (gp_work->mode = gp_encounter_mode)
    if (size(request->options) > 1)
      if (substring(2, 1, request->options) = "1")
        set gp_work->skip_discharged = 1
      endif
    endif
  endif
;Determine whether we're supposed to skip unauthorized encounters
  if (gp_work->mode = gp_encounter_mode)
    if (size(request->options) > 18)
      if (substring(19, 1, request->options) = "1")
        set gp_work->authorized = 1
      endif
    endif
  endif
;Determine whether any census filters were given
  if (gp_work->facility_filter_ind or gp_work->building_filter_ind or gp_work->location_filter_ind)
     set gp_work->census_filter_ind = 1
  endif
;If we've got a location filter, ensure that we've got a building filter
  if (gp_work->location_filter_ind and gp_work->building_filter_ind = 0)
    set gp_work->building_filter_ind = 1
    set gp_work->building = gp_get_parent_location(gp_work->location, "BUILDING")
  endif
;If we've got a building filter, ensure that we've got a facility filter
  if (gp_work->building_filter_ind and gp_work->facility_filter_ind = 0)
    set gp_work->facility_filter_ind = 1
    set gp_work->facility = gp_get_parent_location(gp_work->building, "FACILITY")
  endif
;Determine the security indicator
  set gp_work->security = gp_security
  if (request->security != 0)
    if (request->security > 0)
      set gp_work->security = request->security
    else
      set gp_work->security = 0
    endif
  endif
;Disable security logic if the user isn't tied to any organizations
  if (gp_work->security)
    set i = 1
    if (CHECKPRG("SAC_GET_USER_ORGANIZATIONS") > 0)
;++208237 - change to sort UserOrgs data structure by organization_id
;        execute sac_get_user_organizations with replace("REPLY", "USERORGS")
;        set lTotal = size(userOrgs->organizations,5)
;        if(lTotal>0)
;          set i = 0
;        endif
      free record unsortedUserOrgs
      record unsortedUserOrgs
      (1 organizations[*]
        2 organization_id = f8
        2 confid_cd = f8
        2 confid_level = i4
      )
      execute sac_get_user_organizations with replace("REPLY", "UNSORTEDUSERORGS")
      set lTotal = size(unsortedUserOrgs->organizations,5)
      if (lTotal>0)
        set stat = alterlist(UserOrgs->organizations,lTotal)
        select into 'nl:'
              this_organization_id = unsortedUserOrgs->organizations[d1.seq].organization_id
            , this_confid_cd = unsortedUserOrgs->organizations[d1.seq].confid_cd
            , this_confid_level = unsortedUserOrgs->organizations[d1.seq].confid_level
          from (dummyt d1 with seq = value(lTotal))
          order by this_organization_id
          head report
            i = 0
          detail
            i = i + 1
            userOrgs->organizations[i].organization_id = this_organization_id
            userOrgs->organizations[i].confid_cd = this_confid_cd
            userOrgs->organizations[i].confid_level = this_confid_level
        with nocounter
        free record unsortedUserOrgs
        set i = 0
      endif
;--208237
    else
        set reply->status_data->operationname = "fillreply"
        set reply->status_data->subeventstatus[1]->targetobjectname = "pm_sch_get_persons"
        set reply->status_data->subeventstatus[1]->targetobjectvalue = "Could not find sac_get_user_organizations.prg"
        set reply->status_data->status = "F"
        return (0)
    endif
    if (i)
      set gp_work->security = 0
    else
      if (request->security > 0)
        if (gp_work->mode <= gp_person_mode)
           set gp_work->mode = gp_encounter_mode
        endif
      endif
    endif
  endif
  set canceled_encounter_mode = 0
  if (size(request->options) > 23)
    if (substring(24, 1, request->options) = "1")
      set canceled_encounter_mode = 1
      set gp_work->mode = gp_encounter_mode
    endif
  endif
  set pending_logic_mode = 0
  if (size(request->options) > 24)
    if (substring(25, 1, request->options) = "1")
      set pending_logic_mode = 1
      set gp_work->mode = gp_encounter_mode
    endif
  endif
  if (size(request->options) > 27)
    if (substring(28, 1, request->options) = "1")
      set show_pending_person_only_mode = 1
      set gp_work->mode = gp_encounter_mode
    endif
  endif
;Determine whether any encounter table (or sub-table) filters were given
  if (gp_work->mode = gp_encounter_mode
    or gp_work->client_filter_ind or gp_work->discharge_date_filter_ind or gp_work->encounter_status_filter_ind
    or gp_work->encounter_type_class_filter_ind or gp_work->encounter_type_filter_ind or gp_work->financial_class_filter_ind
    or gp_work->medical_service_filter_ind or gp_work->registration_date_filter_ind or gp_work->skip_discharged
    or gp_work->encounter_alias_filter_count or gp_work->encounter_relation_filter_ind
    or gp_work->profit_encounter_alias_filter_count or gp_work->encounter_type_multi_filter_ndx  ;212426
    or gp_work->medical_service_multi_filter_ndx) ;212426
      set gp_work->encounter_filter_ind = 1
  endif
;Determine the maximum number of rows to return
  set gp_work->max = request->max
  if (gp_work->max > 10000 or gp_work->max < 1)
    set gp_work->max = 200
  endif
;Determine if "PMSEARCH - ALIAS_FILTER_PARAM" exists on dm_info table.
;if name length is more than 0 and dob is not filled out, then do the following:
  ;if (gp_name_len > 0 and gp_work->birth_date_filter_ind = 0)
  if (gp_name_len > 0 and gp_work->birth_date_filter_ind = 0 and  (gp_pa_len > 0 or gp_ea_len > 0))
    select into "nl:"
    from dm_info d
    where d.info_name   = "ALIAS_FILTER_PARAM"
      and d.info_domain = "PMSEARCH"
    detail
      if (d.info_char = "LITERAL")           ;if info_char is "LITERAL"
        if (d.info_number > 0)               ;and info_number (number value set by client) > 0
          if (gp_pa_len >= d.info_number)    ;check that person_alias is longer than info_number
            gp_palias_filter = 1             ;if yes, set gp_palias_filter to 1
          else
            gp_palias_filter = 0             ;if not, set gp_palias_filter to 0
          endif
          if (gp_ea_len >= d.info_number)    ;check that encntr_alias is longer than info_number
            gp_ealias_filter = 1             ;if yes, set gp_ealias_filter to 1
          else
            gp_ealias_filter = 0             ;if not, set gp_ealias_filter to 0
          endif
          if (gp_ea_len > gp_pa_len)         ;if encntr_alias is longer than person_alias
            gp_palias_filter = 0             ;set gp_palias_filter to 0 so search begins at encntr_alias level
          endif
        else                                 ;if info_number is 0
          gp_palias_filter = 0               ;    set gp_palias_filter to 0
          gp_ealias_filter = 0               ;and set gp_ealias_filter to 0
        endif
      elseif (d.info_char = "RELATIVE")      ;if info_char is "RELATIVE"
        if (gp_pa_len >= gp_name_len)        ;check that person_alias is longer than name length
          gp_palias_filter = 1               ;if yes, set gp_palias_filter to 1
        else
          gp_palias_filter = 0               ;if not, set gp_palias_filter to 0
        endif
        if (gp_ea_len >= gp_name_len)        ;check that encntr_alias is longer than name length
          gp_ealias_filter = 1               ;if yes, set gp_ealias_filter to 1
        else
          gp_ealias_filter = 0               ;if not, set gp_ealias_filter to 0
        endif
        if (gp_ea_len > gp_pa_len)           ;if encntr_alias is longer than person_alias
          gp_palias_filter = 0               ;set gp_palias_filter to 0 so search begins at encntr_alias level
        endif
      else                                   ;if info_char is not "RELATIVE" or "LITERAL"
        gp_palias_filter = 0                 ;set both gp_palias_filter and
        gp_ealias_filter = 0                 ;gp_ealias_filter to 0
      endif
    with nocounter
  endif
  return(1)
end
 
#4000_SEARCH
  set reply->search_method_ind = eSTANDARD   ;208995
;Performs the search according to the filters provided
  execute from 4100_INITIALIZE to 4199_INITIALIZE_EXIT
  execute from 4150_PERSONID_SEARCH to 4159_PERSONID_SEARCH_EXIT ;138183
  execute from 4175_PERSONID_LIST_SEARCH to 4179_PERSONID_LIST_SEARCH_EXIT ;292506
  execute from 4200_OPF_SEARCH to 4299_OPF_SEARCH_EXIT
  #PAST_OPF_SEARCH_EXIT
  execute from 4300_NAME_SEARCH to 4399_NAME_SEARCH_EXIT
  execute from 4400_BIRTH_DATE_SEARCH to 4499_BIRTH_DATE_SEARCH_EXIT
  execute from 4500_PERSON_IDENT_SEARCH  to  4599_PERSON_IDENT_SEARCH_EXIT          ;344225
  execute from 4500_PERSON_ALIAS_SEARCH to 4599_PERSON_ALIAS_SEARCH_EXIT
  execute from 4600_ENCOUNTER_IDENT_SEARCH  to  4699_ENCOUNTER_IDENT_SEARCH_EXIT    ;344225
  execute from 4600_ENCOUNTER_ALIAS_SEARCH to 4699_ENCOUNTER_ALIAS_SEARCH_EXIT
  execute from 4600_PROFIT_ENCOUNTER_ALIAS_SEARCH to 4699_PROFIT_ENCOUNTER_ALIAS_SEARCH_EXIT
  execute from 4700_PERSON_RELATION_SEARCH to 4799_PERSON_RELATION_SEARCH_EXIT
  execute from 4800_ENCOUNTER_RELATION_SEARCH to 4899_ENCOUNTER_RELATION_SEARCH_EXIT
  execute from 4900_CENSUS_SEARCH to 4999_CENSUS_SEARCH_EXIT
  execute from 5000_PROFIT_CLAIM_SEARCH to 5099_PROFIT_CLAIM_SEARCH_EXIT
  execute from 5100_PROFIT_STATEMENT_SEARCH to 5199_PROFIT_STATEMENT_SEARCH_EXIT
  execute from 5200_ADDRESS_SEARCH TO 5299_ADDRESS_SEARCH_EXIT
  execute from 5300_PHONE_SEARCH TO 5399_PHONE_SEARCH_EXIT
 
;If no search was run (because no primary filter was found), indicate that too many persons where found
  if (gp_work->search_done = 0)
    set reply->status_data->status = "Z"
    go to 9999_EXIT_PROGRAM
  endif
#4999_SEARCH_EXIT
go to PAST_SEARCH_EXIT
 
#4100_INITIALIZE
;Perform initialization logic related to searching
#4199_INITIALIZE_EXIT
 
;138183 ++
#4150_PERSONID_SEARCH
  if(gp_work->search_done = 1 or request->person_id < 1)
      go to 4159_PERSONID_SEARCH_EXIT
  endif
 
  ;+292506
  if (gp_work->mode = gp_person_guarantor_mode)
     set gp_work->mode = gp_person_mode
  endif
  ;-292506
 
  set gp_work->buffer_name = "pm_sch_person_id"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
  call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("from person p")
  call gp_add_line("plan p")
  call gp_add_line(concat("where p.person_id = ", build(request->person_id)))
  call gp_hit_person(0)
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
#4159_PERSONID_SEARCH_EXIT
;138183 --
 
 
;+292506
#4175_PERSONID_LIST_SEARCH
  if (gp_work->search_done = 1 or (validate(request->person_list_ind, -9) = -9))
     go to 4179_PERSONID_LIST_SEARCH_EXIT
  endif
 
  set lCnt2 = size(request->person_list, 5)
 
  if (lCnt2 <= 0)
     go to 4179_PERSONID_LIST_SEARCH_EXIT
  endif
 
  if (gp_work->mode = gp_person_guarantor_mode)
     set gp_work->mode = gp_person_mode
  endif
 
  set gp_work->buffer_name = "pm_sch_person_list"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("from person p")
  call gp_add_line("plan p")
  call gp_add_line("where expand(lCnt, 1, lCnt2, p.person_id, request->person_list[lCnt].person_id)")
  call gp_hit_person(0)
  call gp_finish_buffer(1)
 
  set lCnt = 0
  set lCnt2 = 0
#4179_PERSONID_LIST_SEARCH_EXIT
;-292506
 
 
#4200_OPF_SEARCH
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  if (gp_work->search_done or gp_work->opf = 0)
    go to 4299_OPF_SEARCH_EXIT
  endif
 
;++208995 - If Message Center is calling application and MCOPFBYPASS in 207902 is on bypass OPFSearch
  if (request->calling_application = iMSGCENTER and bMCOPFBypass = 1)
    go to 4299_OPF_SEARCH_EXIT
  endif
;--208995
 
  ;+400275 - Adding support for Guarantor mode with OPF mode.
  /*
  ;+292506 - Not supporting new Guarantor mode with OPF mode for now.
  if (gp_work->mode = gp_person_guarantor_mode)
     set reply->status_data->status = "Z"
     go to 9999_EXIT_PROGRAM
  endif
  ;-292506
  */
  ;-400275
 
;Determine whether we have enough filters to perform an OPF search
  set i = 0
  if (gp_work->ssn_filter_ind and gp_work->ssn_partial = 0)
    set i = 1
  else
    if (gp_work->last_name_filter_ind and gp_work->first_name_filter_ind)
      set i = 1
    else
       if (gp_work->last_name_filter_ind and gp_work->first_name_partial)
         set i = 1
       else
         if (gp_work->first_name_filter_ind and gp_work->last_name_partial)
           set i = 1
         endif
       endif
    endif
  endif
;Exit if we don't have enough filters to perform this search
  if (i = 0)
    set gp_work->opf = 0
    go to 4299_OPF_SEARCH_EXIT
  endif
;Turn on so we know that subsequent calls were made from here.
set bOpfAnyName = 1
;Create a request structure for the OPF match routine
  free set opf_gmp_request
  record opf_gmp_request
  (
    1  mode                      = i2
    1  options                   = vc
    1  calling_application       = i2
    1  debug_level               = i2
    1  max_matches               = i2
    1  threshold                 = i2
    1  exact_match               = f8
    1  percent_top               = f8
    1  simple_percent            = f8
    1  cutoff_mode_flag          = i2
    1  field[*]
       2  name                   = vc
       2  value                  = vc
    1  weight[*]
       2  attribute              = i2
       2  weight                 = f8
  )
;Populate the request structure
  set opf_gmp_request->options = "ZP"
  ;+144088
  ;set opf_gmp_request->calling_application = 2  ;iPM_Search - PMSearch will now send this, otherwise we default to 0
  if (validate(request->calling_application, -99) != -99)
     if (request->calling_application > 0) ;171735
         set opf_gmp_request->calling_application = request->calling_application
     ;171735++
     else
         set opf_gmp_request->calling_application = 2
     endif
     ;171735--
  else
     ;171735 set opf_gmp_request->calling_application = 0
     set opf_gmp_request->calling_application = 2 ;171735
  endif
  ;-144088
  if (gp_work->debug > 0 )
    set opf_gmp_request->debug_level = 4
  endif
  set opf_gmp_request->max_matches = gp_work->max
  set opf_gmp_request->threshold = request->threshold
  if (validate(request->exact_match, -99) != -99)
    set opf_gmp_request->exact_match = request->exact_match
    set opf_gmp_request->percent_top = request->percent_top
    set opf_gmp_request->simple_percent =  request->simple_percent
    set opf_gmp_request->cutoff_mode_flag = request->cutoff_mode_flag
  endif
  set i = 0
  if (gp_work->first_name_filter_ind)
    set i = i + 1
    set stat = alterlist(opf_gmp_request->field, i)
    set opf_gmp_request->field[i]->name = "FIRST NAME"
    set opf_gmp_request->field[i]->value = gp_work->first_name
    set gp_work->first_name_filter_ind = 0
  endif
  if (gp_work->last_name_filter_ind)
    set i = i + 1
    set stat = alterlist(opf_gmp_request->field, i)
    set opf_gmp_request->field[i]->name = "LAST NAME"
    set opf_gmp_request->field[i]->value = gp_work->last_name
    set gp_work->last_name_filter_ind = 0
  endif
  if (gp_work->middle_name_filter_ind)
    set i = i + 1
    set stat = alterlist(opf_gmp_request->field, i)
    set opf_gmp_request->field[i]->name = "MIDDLE NAME"
    set opf_gmp_request->field[i]->value = gp_work->middle_name_low
    set gp_work->middle_name_filter_ind = 0
  endif
  if (gp_work->ssn_filter_ind and gp_work->ssn_partial = 0)
    set i = i + 1
    set stat = alterlist(opf_gmp_request->field, i)
    set opf_gmp_request->field[i]->name = "SSN"
    set opf_gmp_request->field[i]->value = gp_work->ssn
    set gp_work->ssn_filter_ind = 0
    if (gp_work->non_ssn_filter_ind = 0)
      set gp_work->person_alias_filter_count = 0
    endif
  endif
  if (gp_work->mothers_maiden_name_filter_ind)
    set i = i + 1
    set stat = alterlist(opf_gmp_request->field, i)
    set opf_gmp_request->field[i]->name = "MOTHERS MAIDEN NAME"
    set opf_gmp_request->field[i]->value = gp_work->mothers_maiden_name_low
    set gp_work->mothers_maiden_name_filter_ind = 0
  endif
  if (gp_work->birth_date_filter_ind)
    set i = i + 1
    set stat = alterlist(opf_gmp_request->field, i)
    set opf_gmp_request->field[i]->name = "BIRTH DATE"
    set opf_gmp_request->field[i]->value = substring(1, 11, gp_work->birth_date_start)
    set gp_work->birth_date_filter_ind = 0
  endif
  if (gp_work->gender_filter_ind)
    set i = i + 1
    set stat = alterlist(opf_gmp_request->field, i)
    set opf_gmp_request->field[i]->name = "GENDER"
    set opf_gmp_request->field[i]->value = build(gp_work->gender)
    set gp_work->gender_filter_ind = 0
  endif
  ;+144088
  if(gp_work->home_address_filter_ind)
    set i = i +1
    set stat = alterlist(opf_gmp_request->field, i)
    set opf_gmp_request->field[i]->name = "ZIPCODE"
    set opf_gmp_request->field[i]->value = build(gp_work->home_zip_code)
    set gp_work->home_address_filter_ind = 0
  endif
  ;-144088
;Build the OPF reply structure
  free set opf_gmp_reply
  record opf_gmp_reply
  (
    1  person_id                 = f8
    1  weight                    = f8
    1  person[*]
       2  person_id              = f8
       2  weight                 = f8
       2  any_name_id            = f8
       2  create_dt_tm           = dq8 ;125255
       2  any_name_full          = vc  ;241999
    1  status_data
       2  status                 = c1
       2  subeventstatus[1]
          3  operationname       = vc
          3  operationstatus     = c1
          3  targetobjectname    = vc
          3  targetobjectvalue   = vc
    1  search_method_ind         = i4  ;208995
  )
;++241999
  if (bCheckedHist != TRUE)
     call pm_CheckHistory(null)
  endif
;--241999
;Execute the OPF match routine
  execute OPF_GET_MATCHING_PERSONS
 
  set reply->search_method_ind = opf_gmp_reply->search_method_ind    ;208995
 
;Get the number of persons found by OPF
  set i = size(opf_gmp_reply->person, 5)
;Populate the internal OPF person list with the person's found by OPF
  set k = 0
  set stat = alterlist(gp_work->opf_person, i)  ;50792 - Moved here from below
  for (j = 1 to i)
    set k = k + 1
    set gp_work->opf_person[k]->person_id = opf_gmp_reply->person[j]->person_id
    set gp_work->opf_person[k]->weight = opf_gmp_reply->person[j]->weight
    if ( opf_gmp_reply->person[j]->any_name_id > 0 )
      set gp_work->opf_person[k]->any_name_id = opf_gmp_reply->person[j]->any_name_id
      set gp_work->opf_person[k]->any_name_full = opf_gmp_reply->person[j]->any_name_full     ;241999
    endif
  endfor
 
;Exit if no persons were found by OPF
  if (k <= 0)
    go to 9999_EXIT_PROGRAM
  endif
;Start a search parser buffer
  set gp_work->buffer_name = "pm_sch_opf"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  call gp_add_line("select into 'nl:' p.person_id")
 
  ;+400275
  ;call gp_add_line("from person p")
 
  if (gp_work->mode = gp_person_guarantor_mode)
     call gp_add_line("from person p, person_person_reltn ppr, person p2")
  else
     call gp_add_line("from person p")
  endif
  ;-400275
 
  if (k <= 200)
     call gp_add_line("plan p")
     call gp_add_line(build("where expand(lCnt, 1,", k,
            ",p.person_id, gp_work->opf_person[lCnt]->person_id, 200)"))
  else
    ;Add tables to the from clause
    call gp_add_line(concat(", (dummyt d with seq = ", trim(cnvtstring(k), 3), ")"))
    ;Build the where clause
    call gp_add_line("plan d")
    ;Add subsequent joins
    call gp_add_line("join p")
    call gp_add_line("where p.person_id = gp_work->opf_person[d.seq]->person_id")
  endif
  call gp_hit_person(0)
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
;Turn off so we know that subsequent calls were not made from here.
  set bOpfAnyName = 0
#4299_OPF_SEARCH_EXIT
go to PAST_OPF_SEARCH_EXIT
 
#4300_NAME_SEARCH
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  if (gp_work->search_done or (gp_work->first_name_filter_ind = 0 and gp_work->last_name_filter_ind = 0))
    go to 4399_NAME_SEARCH_EXIT
  endif
  if (gp_palias_filter > 0 or gp_ealias_filter > 0)
    go to 4399_NAME_SEARCH_EXIT
  endif
;Start the search parser buffer (for a "normal" name hit)
  set gp_work->buffer_name = "pm_sch_name"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
 
  ;+292506
  ;call gp_add_line("from person p")
 
  if (gp_work->mode = gp_person_guarantor_mode)
     call gp_add_line("from person p, person_person_reltn ppr, person p2")
  else
     call gp_add_line("from person p")
  endif  ;if (gp_work->mode = gp_person_guarantor_mode)
  ;-292506
 
 
;Build the where clause
  call gp_add_line("plan p")
  set gp_name_hit = "where"
;Add subsequent hits
  call gp_hit_person(0)
  set gp_name_hit = ""
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
;Perform an additional phonetic name search, as necessary
  if (gp_work->phonetic)
    execute from 4310_PHONETIC_SEARCH to 4319_PHONETIC_SEARCH_EXIT
  endif
;Perform an additional "any name" search, as necessary
  if (gp_work->any_name)
    execute from 4320_ANY_NAME_SEARCH to 4329_ANY_NAME_SEARCH_EXIT
  endif
#4399_NAME_SEARCH_EXIT
 
#4310_PHONETIC_SEARCH
;Clear any previous table hits
  ;+109976
  call gp_clear_hits(0)
  ;-109976
;Start the search parser buffer (for a "phonetic" name hit)
  set gp_work->buffer_name = "pm_sch_phonetic"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
  ;+292506
  ;call gp_add_line("from person p")
 
  if (gp_work->mode = gp_person_guarantor_mode)
     call gp_add_line("from person p, person_person_reltn ppr, person p2")
  else
     call gp_add_line("from person p")
  endif  ;if (gp_work->mode = gp_person_guarantor_mode)
  ;-292506
 
 
;Build the where clause
  call gp_add_line("plan p")
;Start the where clause
  if (gp_work->first_name_first)
    call gp_add_line(concat("where p.name_first_phonetic = '", gp_work->first_name_phonetic, "'"))
    if (gp_work->last_name_filter_ind)
      ;164846 call gp_add_line(concat("and p.name_last_phonetic = '", gp_work->last_name_phonetic, "'"))
      ;295090 call gp_add_line(concat("and trim(p.name_last_phonetic,3) = '", gp_work->last_name_phonetic, "'")) ;164846
      call gp_add_line(concat("and p.name_last_phonetic = '", gp_work->last_name_phonetic, "'")) ;295090
    endif
  else
    call gp_add_line(concat("where p.name_last_phonetic = '", gp_work->last_name_phonetic, "'"))
    if (gp_work->first_name_filter_ind)
      ;164846 call gp_add_line(concat("and p.name_first_phonetic = '", gp_work->first_name_phonetic, "'"))
      ;295090 call gp_add_line(concat("and trim(p.name_first_phonetic,3) = '", gp_work->first_name_phonetic, "'")) ;164846
      call gp_add_line(concat("and p.name_first_phonetic = '", gp_work->first_name_phonetic, "'")) ;295090
    endif
  endif
;Add middle name, as necessary
  if (gp_work->middle_name_filter_ind)
    ;++243513
    if (bCnvtNLS = FALSE)
      call gp_add_line(concat("and trim(p.name_middle_key, 3) between '",
                              gp_work->middle_name_low, "' and '", gp_work->middle_name_high, "'"))
    else
      call gp_add_line(concat("and cnvtnls(trim(p.name_middle_key, 3)) between '",
                               gp_work->middle_name_low, "' and '", gp_work->middle_name_high, "'"))
    endif
    ;--243513
  endif
;Add subsequent hits
  call gp_hit_person(0)
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
#4319_PHONETIC_SEARCH_EXIT
 
#4320_ANY_NAME_SEARCH
;Turn on so we know that subsequent calls were made from here.
  set bAnyNameCall = 1
;Clear any previous table hits
  ;+109976
  call gp_clear_hits(0)
  ;-109976
;Start the search parser buffer (for an "any name" hit)
  set gp_work->buffer_name = "pm_sch_any_name"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
  call gp_add_line("from person p")
;Add tables to the from clause
  call gp_add_line(", person_name pn")
 
  ;+292506
  if (gp_work->mode = gp_person_guarantor_mode)
     call gp_add_line(", person_person_reltn ppr, person p2")
  endif
  ;-292506
 
 
;Build the where clause
  call gp_add_line("plan pn")
;Start the where clause
  if (gp_work->first_name_first)
    if (gp_work->first_name_partial)
      call gp_add_line(concat("where pn.name_first_key between '", gp_work->first_name_start,
                              "' and '", gp_work->first_name_end, "'"))
    else
      call gp_add_line(concat("where pn.name_first_key = '", gp_work->first_name, "'"))
    endif
    if (gp_work->last_name_filter_ind)
      if (gp_work->last_name_partial)
        ;164846 call gp_add_line(concat("and pn.name_last_key between '", gp_work->last_name_start,
        ;++243513
        if (bCnvtNLS = FALSE)
          call gp_add_line(concat("and trim(pn.name_last_key,3) between '", gp_work->last_name_start,;164846
                                  "' and '", gp_work->last_name_end, "'"))
        else
          call gp_add_line(concat("and cnvtnls(trim(pn.name_last_key,3)) between '", gp_work->last_name_start,
                                "' and '", gp_work->last_name_end, "'"))
        endif
        ;--243513
      else
        ;164846 call gp_add_line(concat("and pn.name_last_key = '", gp_work->last_name, "'"))
 
        call gp_add_line(concat("and trim(pn.name_last_key,3) = '", gp_work->last_name, "'")) ;164846
 
      endif
    endif
  else
    if (gp_work->last_name_partial)
      call gp_add_line(concat("where pn.name_last_key between '", gp_work->last_name_start,
                              "' and '", gp_work->last_name_end, "'"))
    else
      call gp_add_line(concat("where pn.name_last_key = '", gp_work->last_name, "'"))
    endif
    if (gp_work->first_name_filter_ind)
      if (gp_work->first_name_partial)
        ;164846 call gp_add_line(concat("and pn.name_first_key between '", gp_work->first_name_start,
        ;+182234
        ;call gp_add_line(concat("and trim(pn.name_first_key between,3) '", gp_work->first_name_start, ;164846
        ;                        "' and '", gp_work->first_name_end, "'"))
        ;++243513
        if (bCnvtNLS = FALSE)
          call gp_add_line(concat("and trim(pn.name_first_key,3) between '", gp_work->first_name_start,
                                  "' and '", gp_work->first_name_end, "'"))
        else
          call gp_add_line(concat("and cnvtnls(trim(pn.name_first_key,3)) between '", gp_work->first_name_start,
                                "' and '", gp_work->first_name_end, "'"))
        endif
        ;--243513
        ;-182234
      else
        ;164846 call gp_add_line(concat("and pn.name_first_key = '", gp_work->first_name, "'"))
 
        call gp_add_line(concat("and trim(pn.name_first_key,3) = '", gp_work->first_name, "'"))    ;164846
 
      endif
    endif
  endif
;Add addition where clause items
  if (gp_work->middle_name_filter_ind)
    ;++243513
    if (bCnvtNLS = FALSE)
      call gp_add_line(concat("and trim(pn.name_middle_key, 3) between '",
                              gp_work->middle_name_low, "' and '", gp_work->middle_name_high, "'"))
    else
      call gp_add_line(concat("and cnvtnls(trim(pn.name_middle_key, 3)) between '",
                              gp_work->middle_name_low, "' and '", gp_work->middle_name_high, "'"))
    endif
    ;--243513
  endif
  call gp_add_line(concat("and pn.name_type_cd != ", build(gp_current)))
  call gp_add_line("and pn.active_ind = 1")
  call gp_add_line("and pn.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
;Join to the person table
  call gp_add_line("join p")
  call gp_add_line("where p.person_id = pn.person_id")
;Add subsequent hits
  call gp_hit_person(0)
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
;Turn off so we know that subsequent calls were not made from here.
  set bAnyNameCall = 0
  if (bCheckedHist != TRUE)
     call pm_CheckHistory(null)
  endif
 
if (bHistoryOption)
   ;+109976
   call gp_clear_hits(0)
   ;-109976
   set bAnyNameCall = 1
   set gp_work->buffer_name = "pm_sch_any_name_hist"
   set gp_work->buffer_count = 0
   set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
   call gp_add_line("from person p")
   call gp_add_line(", person_name_hist pn")
 
   ;+292506
   if (gp_work->mode = gp_person_guarantor_mode)
      call gp_add_line(", person_person_reltn ppr, person p2")
   endif
   ;-292506
 
   call gp_add_line("plan pn")
   if (gp_work->first_name_first)
      if (gp_work->first_name_partial)
         call gp_add_line(concat("where pn.name_first_key between '", gp_work->first_name_start,
                                 "' and '", gp_work->first_name_end, "'"))
      else
         call gp_add_line(concat("where pn.name_first_key = '", gp_work->first_name, "'"))
      endif
 
      if (gp_work->last_name_filter_ind)
         if (gp_work->last_name_partial)
            ;164846 call gp_add_line(concat("and pn.name_last_key between '", gp_work->last_name_start,
            ;++243513
            if (bCnvtNLS = FALSE)
 
              call gp_add_line(concat("and trim(pn.name_last_key,3) between '", gp_work->last_name_start, ;164846
                                      "' and '", gp_work->last_name_end, "'"))
            else
              call gp_add_line(concat("and cnvtnls(trim(pn.name_last_key,3)) between '", gp_work->last_name_start,
                                      "' and '", gp_work->last_name_end, "'"))
            endif
            ;--243513
         else
            ;164846 call gp_add_line(concat("and pn.name_last_key = '", gp_work->last_name, "'"))
 
            call gp_add_line(concat("and trim(pn.name_last_key,3) = '", gp_work->last_name, "'")) ;164846
 
         endif
      endif
   else
      if (gp_work->last_name_partial)
         call gp_add_line(concat("where pn.name_last_key between '", gp_work->last_name_start,
                                 "' and '", gp_work->last_name_end, "'"))
      else
         call gp_add_line(concat("where pn.name_last_key = '", gp_work->last_name, "'"))
      endif
      if (gp_work->first_name_filter_ind)
         if (gp_work->first_name_partial)
            ;164846 call gp_add_line(concat("and pn.name_first_key between '", gp_work->first_name_start,
            ;++243513
            if (bCnvtNLS = FALSE)
              call gp_add_line(concat("and trim(pn.name_first_key,3) between '", gp_work->first_name_start, ;164846
                                      "' and '", gp_work->first_name_end, "'"))
            else
              call gp_add_line(concat("and cnvtnls(trim(pn.name_first_key,3)) between '", gp_work->first_name_start,
                                      "' and '", gp_work->first_name_end, "'"))
            endif
            ;--243513
         else
            ;164846 call gp_add_line(concat("and pn.name_first_key = '", gp_work->first_name, "'"))
 
            call gp_add_line(concat("and trim(pn.name_first_key,3) = '", gp_work->first_name, "'")) ;164846
 
         endif
      endif
   endif
   if (gp_work->middle_name_filter_ind)
      ;++243513
      if (bCnvtNLS = FALSE)
        call gp_add_line(concat("and trim(pn.name_middle_key, 3) between '",
                                 gp_work->middle_name_low, "' and '", gp_work->middle_name_high, "'"))
      else
        call gp_add_line(concat("and cnvtnls(trim(pn.name_middle_key, 3)) between '",
                                 gp_work->middle_name_low, "' and '", gp_work->middle_name_high, "'"))
      endif
      ;--243513
   endif
   call gp_add_line(concat("and pn.name_type_cd = ", build(gp_current)))
   call gp_add_line("and pn.active_ind = 1")
   call gp_add_line("join p")
   call gp_add_line("where p.person_id = pn.person_id")
   call gp_hit_person(0)
   call gp_finish_buffer(1)
   set bAnyNameCall = 0
endif
#4329_ANY_NAME_SEARCH_EXIT
 
#4400_BIRTH_DATE_SEARCH
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  if (gp_work->search_done or gp_work->birth_date_filter_ind = 0)
    go to 4499_BIRTH_DATE_SEARCH_EXIT
  endif
;Start the search parser buffer
  set gp_work->buffer_name = "pm_sch_birth_date"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
  ;+292506
  ;call gp_add_line("from person p")
 
  if (gp_work->mode = gp_person_guarantor_mode)
     call gp_add_line("from person p, person_person_reltn ppr, person p2")
  else
     call gp_add_line("from person p")
  endif  ;if (gp_work->mode = gp_person_guarantor_mode)
 
  call gp_add_line("plan p")
  ;-292506
 
;Build the where clause
  if (curutc)
    call gp_add_line(concat("where p.abs_birth_dt_tm between cnvtdatetimeutc('", gp_work->birth_date_start, "',0) and ",
                            "cnvtdatetimeutc('", gp_work->birth_date_end, "',0)"))
  else
    call gp_add_line(concat("where p.birth_dt_tm between cnvtdatetime('", gp_work->birth_date_start, "') and ",
                            "cnvtdatetime('", gp_work->birth_date_end, "')"))
  endif
;Add other person table filters (skip the birth date hit)
  call gp_hit_person(1)
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
#4499_BIRTH_DATE_SEARCH_EXIT
 
#5000_PROFIT_CLAIM_SEARCH
  ;//Reset buffer string
  set tempBufferLow = ""
  set tempBufferHigh = ""
  ;If we've already performed a search or don't have the filters necessary
  ;for this type of search, exit
  if (gp_work->search_done or gp_work->claim_number_filter_ind = 0)
      go to 5099_PROFIT_CLAIM_SEARCH_EXIT
  endif
  set j = size(gp_work->text)
  if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
      set tempBufferLow = substring(1, j - 1, gp_work->text)
      set tempBufferHigh = concat(tempBufferLow, "zzz")
  else
    set tempBufferLow  = gp_work->text
    set tempBufferHigh = gp_work->text
  endif
  set sLogicalDomainPersonSearchCmd = set_logical_domain_parser_cmd("person") ;319008
  select distinct into 'nl:' a.acct_id
   from bill_rec b
        , bill_reltn br
        , person person ;319008
        , pft_acct_reltn p
        , account a
    plan b where b.bill_nbr_disp between tempBufferLow and tempBufferHigh
     and b.active_ind = 1
    join br where br.corsp_activity_id = b.corsp_activity_id
     and br.bill_vrsn_nbr = b.bill_vrsn_nbr
     and br.parent_entity_name = "PERSON"
     and br.reltn_type_cd = gp_patient_reltn_type_cd
;319008++
    join person where person.person_id = br.parent_entity_id
     and parser(sLogicalDomainPersonSearchCmd)
;319008--
;319008    join p where p.parent_entity_id = br.parent_entity_id
    join p where p.parent_entity_id = person.person_id ;319008
     and p.parent_entity_name = "PERSON"
     and p.role_type_cd = gp_patient_role_type_cd
    join a where a.acct_id = p.acct_id
     and a.acct_type_cd = gp_ar_acct_type_cd
     and a.acct_sub_type_cd = gp_patient_sub_type_cd
     and a.acct_status_cd = gp_open_cd
     and a.active_ind = 1
     and a.active_status_cd = gp_active_cd     
   order by a.acct_id
   head a.acct_id
   gp_work->person_count = gp_work->person_count + 1
   stat = alterlist(gp_work->person, gp_work->person_count)
   gp_work->person[gp_work->person_count]->person_id = p.parent_entity_id
   gp_work->person[gp_work->person_count]->pft_acct_id = a.acct_id
  with nocounter, maxqual(b, value(gp_work->max + 1))
  ;~Set search flag to complete
  set gp_work->search_done = 1
  set claim_statement_search_done = 1 ;191819
#5099_PROFIT_CLAIM_SEARCH_EXIT
 
#5100_PROFIT_STATEMENT_SEARCH
  ;//Reset buffer string
  set tempBufferLow = ""
  set tempBufferHigh = ""
  ;~If we've already performed a search or don't have the filters necessary
  ;~for this type of search, exit
  if (gp_work->search_done or gp_work->statement_number_filter_ind = 0)
      go to 5199_PROFIT_STATEMENT_SEARCH_EXIT
  endif
  set j = size(gp_work->text)
  if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
      set tempBufferLow = substring(1, j - 1, gp_work->text)
      set tempBufferHigh = concat(tempBufferLow, "zzz")
  else
    set tempBufferLow  = gp_work->text
    set tempBufferHigh = gp_work->text
  endif
  set sLogicalDomainPersonSearchCmd = set_logical_domain_parser_cmd("person") ;319008 
  select distinct into 'nl:' a.acct_id
   from bill_rec b
      , bill_reltn br
      , pft_encntr pe
      , pft_acct_reltn p
      , person person ;319008
      , account a
  plan b where b.bill_nbr_disp between tempBufferLow and tempBufferHigh
   and b.active_ind = 1
  join br where br.corsp_activity_id = b.corsp_activity_id
   and br.bill_vrsn_nbr = b.bill_vrsn_nbr
   and br.parent_entity_name = "PFTENCNTR"
  join pe where pe.pft_encntr_id = br.parent_entity_id
  join p where p.acct_id = pe.acct_id
   and p.parent_entity_name = "PERSON"
   and p.role_type_cd = gp_patient_role_type_cd
  join a where a.acct_id = p.acct_id
   and a.acct_type_cd = gp_ar_acct_type_cd
   and a.acct_sub_type_cd = gp_patient_sub_type_cd
   and a.acct_status_cd = gp_open_cd
   and a.active_ind = 1
   and a.active_status_cd = gp_active_cd
;319008++
  join person where person.person_id = p.parent_entity_id
   and parser(sLogicalDomainPersonSearchCmd)
;319008--
  order by a.acct_id
   head a.acct_id
   gp_work->person_count = gp_work->person_count + 1
   stat = alterlist(gp_work->person, gp_work->person_count)
   gp_work->person[gp_work->person_count]->person_id = p.parent_entity_id
   gp_work->person[gp_work->person_count]->pft_acct_id = a.acct_id
  with nocounter, maxqual(b, value(gp_work->max + 1))
  ;~Set search flag to complete
  set gp_work->search_done = 1
  set claim_statement_search_done = 1 ;191819
#5199_PROFIT_STATEMENT_SEARCH_EXIT
 
#5200_ADDRESS_SEARCH
   ;If we've already performed a search or
   ;don't have the filters necessary for this type of search, exit
   if (gp_work->search_done or gp_work->home_address_hit = 1 or (gp_work->home_address_filter_ind = 0
       and gp_work->paf_key_filter_ind = 0))
      go to 5299_ADDRESS_SEARCH_EXIT
   endif
   ;Indicate that we've already made the zipcode hit
   set gp_work->home_address_hit = 1
   ;Start the search parser buffer
   set gp_work->buffer_name = "pm_sch_home_zipcode"
   set gp_work->buffer_count = 0
   set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
   ;+292506
   ;call gp_add_line("from person p")
   ;call gp_add_line(", address a")
 
   if (gp_work->mode = gp_person_guarantor_mode)
      call gp_add_line("from address a, person p, person_person_reltn ppr, person p2")
   else
      call gp_add_line("from address a, person p")
   endif
   ;-292506
 
   call gp_add_line("plan a")
   if (gp_work->home_address_filter_ind = 1)
      if (gp_work->home_zip_code_partial = 1)
         call gp_add_line(concat("where a.zipcode_key between '",
                                  gp_work->home_zip_code_start, "' and '",
                                  gp_work->home_zip_code_end, "'"))
      else
         call gp_add_line(concat("where a.zipcode_key = '", trim(gp_work->home_zip_code, 3), "'"))
      endif
   endif
   if (gp_work->paf_key_filter_ind = 1)
      if (gp_work->home_address_filter_ind = 1)
         call gp_add_line("and ")
      else
         call gp_add_line("where ")
      endif
 
      if (gp_work->paf_key_partial = 1)
          call gp_add_line(concat("a.postal_identifier_key between '",
                                  gp_work->paf_key_start, "' and '",
                                  gp_work->paf_key_end, "'"))
       else
          call gp_add_line(concat("a.postal_identifier_key = '", trim(gp_work->paf_key, 3), "'"))
       endif
   endif
   call gp_add_line(concat("and a.address_type_cd = ", build(gp_address)))
   call gp_add_line("and a.active_ind = 1")
   call gp_add_line("and a.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
   call gp_add_line("and a.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
   if (gp_work->person_hit = 0)
      call gp_add_line("join p")
      call gp_add_line("where p.person_id = a.parent_entity_id")
      call gp_hit_person(0)
   endif
   ;Finish and execute the parser buffer
   call gp_finish_buffer(1)
#5299_ADDRESS_SEARCH_EXIT
 
#5300_PHONE_SEARCH
   ;If we've already performed a search or
   ;don't have the filters necessary for this type of search, exit
   if (gp_work->search_done or gp_work->phone_hit = 1 or gp_work->phone_filter_ind = 0)
      go to 5399_PHONE_SEARCH_EXIT
   endif
    ;Indicate that we've already made the phone hit
   set gp_work->phone_hit = 1
   ;Start the search parser buffer
   set gp_work->buffer_name = "pm_sch_phone"
   set gp_work->buffer_count = 0
   set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
   ;+292506
   ;call gp_add_line("from person p")
   ;call gp_add_line(", phone ph")
 
   if (gp_work->mode = gp_person_guarantor_mode)
      call gp_add_line("from phone ph, person p, person_person_reltn ppr, person p2")
   else
      call gp_add_line("from phone ph, person p")
   endif
   ;-292506
 
   call gp_add_line("plan ph")

   if (gp_work->phone_filter_ind = 1097)   ;344225
      call gp_add_line(concat("where ph.phone_num_key = '", trim(gp_work->phone_num, 3), "'"))
   else                                    ;344225
      if (gp_work->phone_filter_ind = 1)
          call gp_add_line(concat("where ph.phone_num_key like '*", trim(gp_work->phone_num, 3), "*'"))
      endif
   endif                                   ;344225
   
   call gp_add_line("and ph.active_ind = 1")
   call gp_add_line("and ph.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
   call gp_add_line("and ph.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
   call gp_add_line("and ph.parent_entity_name in ('PERSON','PERSON_PATIENT')")
   if (gp_work->person_hit = 0)
      call gp_add_line("join p")
      call gp_add_line("where p.person_id = ph.parent_entity_id")
      call gp_hit_person(0)
   endif
   ;Finish and execute the parser buffer
   call gp_finish_buffer(1)
#5399_PHONE_SEARCH_EXIT
 
;344225++
#4500_PERSON_IDENT_SEARCH 
  if (  gp_work -> search_done  or gp_work -> person_alias_filter_count = 0 or gp_work->person_ident_filter_ind = 0) 
     go to 4599_person_ident_search_exit 
  endif

  if ( ( validate ( buffer , "zzz" )="zzz" ) ) 
     declare  buffer  =  vc  with  private , noconstant (" " )
     declare  tempbuff  =  vc  with  private , noconstant (" " )
  else  
     set  buffer  = " " 
     set  tempbuff  = " "  
  endif

  set  gp_work -> person_alias_hit  = 1 
  set  gp_work -> buffer_name  = "pm_sch_person_alias" 
  set  gp_work -> buffer_count  = 0 

  set  stat  =  alterlist ( gp_work -> buffer , 0 )

  call gp_add_line ("select distinct into 'nl:' p.person_id" )

  if ( ( gp_work -> mode = gp_person_guarantor_mode ) ) 
     call gp_add_line ("from person p, person_person_reltn ppr, person p2" ) 
  else  
     call gp_add_line ("from person p" )
  endif

  set  gp_work -> target  =  "pa1"

  call gp_add_line ( concat (", person_alias " ,  gp_work -> target ))
  call gp_add_line ( concat ("plan pa1 where " ,  gp_work -> target , ".person_id = pa1.person_id" ))

  for (  i  = 1  to  gp_work -> person_alias_filter_count  )
     call parseit(gp_work->person_alias_filter[i].alias_low,",")
     call gp_add_line ( "and (")
     for (xx = 1 to size(tmpparseit->qual,5))
        call gp_add_line ( concat (gp_work -> target , ".alias = '" ,tmpparseit->qual[xx].value,"'" ))
        if (xx < size(tmpparseit->qual,5))
           call gp_add_line("or")
        endif
     endfor
     call gp_add_line(")")
  endfor

  call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_ind + 0 = 1" ))
  call gp_add_line ( concat ("and " ,  gp_work -> target , ".beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)" ))
  call gp_add_line ("join p" )
  call gp_add_line ("where p.person_id = pa1.person_id" )

  if ( ( gp_palias_filter >0 ) ) 
     set  gp_name_hit  = "and" 
  endif

  call gp_hit_person (0 )

  set  gp_name_hit  = "" 

  call gp_finish_buffer (1 )

  if (  gp_work -> phonetic  and ( gp_palias_filter >0 ) )  
     execute from  4310_PHONETIC_SEARCH  to  4319_PHONETIC_SEARCH_EXIT 
  endif


  if (  gp_work -> any_name  and ( gp_palias_filter >0 ) ) 
     execute from  4320_ANY_NAME_SEARCH  to 4329_ANY_NAME_SEARCH_EXIT 
  endif

# 4599_PERSON_IDENT_SEARCH_EXIT
;344225--
 
#4500_PERSON_ALIAS_SEARCH
  if (validate(buffer, "ZZZ") = "ZZZ")
     declare buffer    = vc with private, noconstant(" ")
     declare tempBuff  = vc with private, noconstant(" ")
  else
     set buffer = " "
     set tempBuff = " "
  endif
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  if (gp_work->search_done or gp_work->person_alias_filter_count <= 0)
    go to 4599_PERSON_ALIAS_SEARCH_EXIT
  endif
  if (gp_palias_filter <= 0 and gp_ealias_filter > 0)
    go to 4599_PERSON_ALIAS_SEARCH_EXIT
  endif
;Indicate that we've already made the person alias hit
  set gp_work->person_alias_hit = 1
;Start the search parser buffer
  set gp_work->buffer_name = "pm_sch_person_alias"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
  ;+292506
  ;call gp_add_line("from person p")
 
  if (gp_work->mode = gp_person_guarantor_mode)
     call gp_add_line("from person p, person_person_reltn ppr, person p2")
  else
     call gp_add_line("from person p")
  endif  ;if (gp_work->mode = gp_person_guarantor_mode)
  ;-292506
 
;Add additional tables to the from clause
  for (i = 1 to gp_work->person_alias_filter_count)
    set gp_work->target = concat("pa", trim(cnvtstring(i), 3))
    call gp_add_line(concat(", person_alias ", gp_work->target))
  endfor
;Build the primary where clause
  for (i = 1 to gp_work->person_alias_filter_count)
    set gp_work->target = concat("pa", trim(cnvtstring(i), 3))
    if (i = 1)
      call gp_add_line(concat("plan ", gp_work->target))
      call gp_add_line(concat("where ", gp_work->target, ".alias between '",
                              gp_work->person_alias_filter[i]->alias_low, "' and '",
                              gp_work->person_alias_filter[i]->alias_high, "'"))
    else
      call gp_add_line(concat("join ", gp_work->target))
      call gp_add_line(concat("where ", gp_work->target, ".person_id = pa1.person_id"))
      call gp_add_line(concat("and trim(", gp_work->target, ".alias) between '",
                              gp_work->person_alias_filter[i]->alias_low, "' and '",
                              gp_work->person_alias_filter[i]->alias_high, "'"))
    endif
    call gp_add_line(concat("and ", concat(gp_work->target, ".person_alias_type_cd"),
                              " = ", build(gp_work->person_alias_filter[i]->alias_type_cd)))
    if (gp_work->person_alias_filter[i]->alias_pool_cd > 0.0)
      call gp_add_line(concat("and ", concat(gp_work->target, ".alias_pool_cd"),
                                " = ", build(gp_work->person_alias_filter[i]->alias_pool_cd)))
    endif
   ;building a buffer from alias_pool list.
    set TotalSize = size(gp_work->person_alias_filter[i]->alias_pool, 5 )
    if ( TotalSize > 0 )
       ;208504 set buffer = concat (buffer, "(")
       set buffer = "("     ;208504
       for ( k = 1 to TotalSize )
           if (gp_work->person_alias_filter[i]->alias_pool[k]->alias_pool_cd > 0.0 )
              set tempBuff = build(gp_work->person_alias_filter[i]->alias_pool[k]->alias_pool_cd)
              set buffer = concat ( buffer, tempBuff )
              if (k < TotalSize )
                 set buffer = concat (buffer, ",")
              endif
           endif
       endfor
       set buffer = concat (buffer, ")")
       if (textlen (trim(buffer,3) ) > 2 )
          call gp_add_line (concat(concat("and ", gp_work->target, ".alias_pool_cd in "), buffer))
       endif
    endif
    call gp_add_line(concat("and ", gp_work->target, ".active_ind + 0 = 1"))
    call gp_add_line(concat("and ", gp_work->target, ".beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)"))
  endfor
;Add subsequent joins
  call gp_add_line("join p")
  call gp_add_line("where p.person_id = pa1.person_id")
  if (gp_palias_filter > 0)
    set gp_name_hit = "and"
  endif
  call gp_hit_person(0)
 
   ;221381++
   ;;+139584
   ;if (bPatsNoEncntrs != TRUE and gp_work->mode = gp_patient_mode)
   ;   if (gp_work->security and gp_work->security_hit = 0)
   ;      if (gp_work->encounter_hit = 0)
   ;         set gp_work->encounter_filter_ind = 1
   ;         call gp_hit_encounter(1)
   ;      endif
   ;   endif
   ;endif
   ;;-139584
   ;221381--
 
  set gp_name_hit = ""
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
;Perform an additional phonetic name search, as necessary
  if (gp_work->phonetic and gp_palias_filter > 0)    ;AL039
    execute from 4310_PHONETIC_SEARCH to 4319_PHONETIC_SEARCH_EXIT
  endif
;Perform an additional "any name" search, as necessary
  if (gp_work->any_name and gp_palias_filter > 0)
    execute from 4320_ANY_NAME_SEARCH to 4329_ANY_NAME_SEARCH_EXIT
  endif
#4599_PERSON_ALIAS_SEARCH_EXIT

;344225++
#4600_ENCOUNTER_IDENT_SEARCH    
  if (   gp_work -> search_done    or  gp_work -> encounter_alias_filter_count =0  or gp_work->encounter_ident_filter_ind = 0 ) 
     go to  4699_encounter_ident_search_exit 
  endif

  set  gp_work -> encounter_alias_hit  = 1 
  set  gp_work -> buffer_name  = "pm_sch_encounter_alias" 
  set  gp_work -> buffer_count  = 0 
  set  stat  =  alterlist ( gp_work -> buffer , 0 )
  call gp_add_line ("select distinct into 'nl:' p.person_id" )

  if ( ( gp_work -> mode = gp_person_guarantor_mode ) ) 
     call gp_add_line ("from person p, person_person_reltn ppr, person p2" )
  else  
     call gp_add_line ("from person p" )
  endif

  call gp_add_line (", encounter e" )

  for (  i  = 1  to  gp_work -> encounter_alias_filter_count  )
     set  gp_work -> target  =  concat ("ea" ,  trim ( cnvtstring ( i ), 3 ))
     call gp_add_line ( concat (", encntr_alias " ,  gp_work -> target ))
  endfor

  for (  i  = 1  to  gp_work -> encounter_alias_filter_count  )
     set  gp_work -> target  =  concat ("ea" ,  trim ( cnvtstring ( i ), 3 ))
     if ( ( i =1 ) ) 
        call parseit(gp_work->encounter_alias_filter[i].alias_low,",")
        call gp_add_line ( concat ("plan " ,  gp_work -> target ))
        call gp_add_line ( concat ("where ("))
        for (xx = 1 to size(tmpparseit->qual,5))
           call gp_add_line ( concat (gp_work -> target , ".alias = '" ,tmpparseit->qual[xx].value,"'" ))
           if (xx < size(tmpparseit->qual,5))
              call gp_add_line("or")
           endif
        endfor
        call gp_add_line(")")
     endif
     if (canceled_encounter_mode) 
        call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_ind = 0" ))
        call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_status_cd = " ,  build ( gp_deleted )))
     else  
        call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_ind = 1" ))
     endif
     call gp_add_line ( concat ("and " ,  gp_work -> target , ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)" ))
  endfor

  call gp_add_line ("join e" )
  call gp_add_line(concat("where e.encntr_id = ", gp_work->target, ".encntr_id"))
  if ( ( gp_ealias_filter >0 ) ) 
     set  gp_name_hit  = "and" 
  endif
  call gp_hit_encounter (0 )
  set  gp_name_hit  = "" 
  call gp_finish_buffer (1 )

  if (  gp_work -> phonetic  and ( gp_ealias_filter >0 ) ) execute from  4310_phonetic_search  to 
     4319_phonetic_search_exit 
  endif

  if (  gp_work -> any_name  and ( gp_ealias_filter >0 ) ) execute from  4320_any_name_search  to 
     4329_any_name_search_exit 
  endif
#4699_ENCOUNTER_IDENT_SEARCH_EXIT   
;344225--
 
#4600_ENCOUNTER_ALIAS_SEARCH
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  ;344225 if (gp_work->search_done or gp_work->encounter_alias_filter_count <= 0)
  if ( gp_work->search_done or gp_work->encounter_alias_filter_count <=0 or gp_work->encounter_ident_filter_ind > 0)      ;344225
     go to 4699_ENCOUNTER_ALIAS_SEARCH_EXIT
  endif
;Indicate that we've already made the encounter alias hit
  set gp_work->encounter_alias_hit = 1
;Start the search parser buffer
  set gp_work->buffer_name = "pm_sch_encounter_alias"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
  ;+292506
  ;call gp_add_line("from person p")
 
  if (gp_work->mode = gp_person_guarantor_mode)
     call gp_add_line("from person p, person_person_reltn ppr, person p2")
  else
     call gp_add_line("from person p")
  endif  ;if (gp_work->mode = gp_person_guarantor_mode)
  ;-292506
 
;Add additional tables to the from clause
  call gp_add_line(", encounter e")
  for (i = 1 to gp_work->encounter_alias_filter_count)
    set gp_work->target = concat("ea", trim(cnvtstring(i), 3))
    call gp_add_line(concat(", encntr_alias ", gp_work->target))
  endfor
;Build the primary where clause
  for (i = 1 to gp_work->encounter_alias_filter_count)
    set gp_work->target = concat("ea", trim(cnvtstring(i), 3))
    if (i = 1)
      call gp_add_line(concat("plan ", gp_work->target))
      call gp_add_line(concat("where ", gp_work->target, ".alias between '",
                              gp_work->encounter_alias_filter[i]->alias_low, "' and '",
                              gp_work->encounter_alias_filter[i]->alias_high, "'"))
    else
      call gp_add_line(concat("join ", gp_work->target))
      call gp_add_line(concat("where ", gp_work->target, ".encntr_id = ea1.encntr_id"))
      call gp_add_line(concat("and trim(", gp_work->target, ".alias) between '",
                              gp_work->encounter_alias_filter[i]->alias_low, "' and '",
                              gp_work->encounter_alias_filter[i]->alias_high, "'"))
    endif
    call gp_add_line(concat("and ", concat(gp_work->target, ".encntr_alias_type_cd"),
                              " = ", build(gp_work->encounter_alias_filter[i]->alias_type_cd)))
    if (gp_work->encounter_alias_filter[i]->alias_pool_cd > 0.0)
      call gp_add_line(concat("and ", concat(gp_work->target, ".alias_pool_cd"),
                               " = ", build(gp_work->encounter_alias_filter[i]->alias_pool_cd)))
    endif
    ;+120812
    ;call gp_add_line(concat("and ", gp_work->target, ".active_ind = 1"))
    if (canceled_encounter_mode)
       call gp_add_line(concat("and ", gp_work->target, ".active_ind = 0"))
    else
       call gp_add_line(concat("and ", gp_work->target, ".active_ind = 1"))
    endif
    ;-120812
    call gp_add_line(concat("and ", gp_work->target, ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)"))
  endfor
;Add subsequent joins
  call gp_add_line("join e")
  call gp_add_line("where e.encntr_id = ea1.encntr_id ")
  if (gp_ealias_filter > 0)
    set gp_name_hit = "and"
  endif
  call gp_hit_encounter(0)
  set gp_name_hit = ""
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
 
;Perform an additional phonetic name search, as necessary
  if (gp_work->phonetic and gp_ealias_filter > 0)
    execute from 4310_PHONETIC_SEARCH to 4319_PHONETIC_SEARCH_EXIT
  endif
;Perform an additional "any name" search, as necessary
  if (gp_work->any_name and gp_ealias_filter > 0)
    execute from 4320_ANY_NAME_SEARCH to 4329_ANY_NAME_SEARCH_EXIT
  endif
#4699_ENCOUNTER_ALIAS_SEARCH_EXIT
 
#4600_PROFIT_ENCOUNTER_ALIAS_SEARCH
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  if (gp_work->search_done or gp_work->profit_encounter_alias_filter_count <= 0)
    go to 4699_PROFIT_ENCOUNTER_ALIAS_SEARCH_EXIT
  endif
    ;Indicate that we've already made the encounter alias hit
    set gp_work->profit_encounter_alias_hit = 1
    ;Start the search parser buffer
    set gp_work->buffer_name = "pm_sch_pft_encounter_alias"
    set gp_work->buffer_count = 0
    set stat = alterlist(gp_work->buffer, 0)
 
    ;267873 call gp_add_line("select into 'nl:' p.person_id")
    call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
    call gp_add_line("from person p")
    ;Add additional tables to the from clause
    call gp_add_line(", encounter e")
    for (i = 1 to gp_work->profit_encounter_alias_filter_count)
      set gp_work->target = concat("pea", trim(cnvtstring(i), 3))
      call gp_add_line(concat(", pft_encntr_alias ", gp_work->target))
    endfor
  ;Build the primary where clause
    for (i = 1 to gp_work->profit_encounter_alias_filter_count)
      set gp_work->target = concat("pea", trim(cnvtstring(i), 3))
      if (i = 1)
        call gp_add_line(concat("plan ", gp_work->target))
        call gp_add_line(concat("where ", gp_work->target, ".alias between '",
                              gp_work->profit_encounter_alias_filter[i]->alias_low, "' and '",
                              gp_work->profit_encounter_alias_filter[i]->alias_high, "'"))
      else
        call gp_add_line(concat("join ", gp_work->target))
        call gp_add_line(concat("where ", gp_work->target, ".encntr_id = pea1.encntr_id"))
        call gp_add_line(concat("and trim(", gp_work->target, ".alias) between '",
                              gp_work->profit_encounter_alias_filter[i]->alias_low, "' and '",
                              gp_work->profit_encounter_alias_filter[i]->alias_high, "'"))
      endif
      call gp_add_line(concat("and ", concat(gp_work->target, ".pft_encntr_alias_type_cd"),
                               " = ", build(gp_work->profit_encounter_alias_filter[i]->alias_type_cd)))
      if (gp_work->profit_encounter_alias_filter[i]->alias_pool_cd > 0.0)
         call gp_add_line(concat("and ", concat(gp_work->target, ".alias_pool_cd"),
                               " = ", build(gp_work->profit_encounter_alias_filter[i]->alias_pool_cd)))
      endif
      call gp_add_line(concat("and ", gp_work->target, ".active_ind = 1"))
      call gp_add_line(concat("and ", gp_work->target, ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)"))
    endfor
    ;Add subsequent joins
    call gp_add_line("join e")
    call gp_add_line("where e.encntr_id = pea1.encntr_id")
    call gp_hit_encounter(0)
    ;Finish and execute the parser buffer
    call gp_finish_buffer(1)
#4699_PROFIT_ENCOUNTER_ALIAS_SEARCH_EXIT
 
 
#4700_PERSON_RELATION_SEARCH
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  if (gp_work->search_done or gp_work->person_relation_filter_ind = 0)
    go to 4799_PERSON_RELATION_SEARCH_EXIT
  endif
;Indicate that we've already made the person relation hit
  set gp_work->person_relation_hit = 1
;Start the search parser buffer
  set gp_work->buffer_name = "pm_sch_person_relation"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
  call gp_add_line("from person p")
;Add additional tables to the from clause
  call gp_add_line(", person_prsnl_reltn ppr")
;Build the primary where clause
  call gp_add_line("plan ppr")
  call gp_add_line(concat("where ppr.prsnl_person_id = ", build(gp_work->user_id)))
  call gp_add_line(concat("and ppr.person_prsnl_r_cd = ", build(gp_work->person_relation)))
  call gp_add_line("and ppr.active_ind = 1")
  call gp_add_line("and ppr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
  call gp_add_line("and ppr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
;Add subsequent joins
  call gp_add_line("join p")
  call gp_add_line("where p.person_id = ppr.person_id")
  call gp_hit_person(0)
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
#4799_PERSON_RELATION_SEARCH_EXIT
 
 
#4800_ENCOUNTER_RELATION_SEARCH
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  if (gp_work->search_done or gp_work->encounter_relation_filter_ind = 0)
    go to 4899_ENCOUNTER_RELATION_SEARCH_EXIT
  endif
;Indicate that we've already made the encounter relation hit
  set gp_work->encounter_relation_hit = 1
;Start the search parser buffer
  set gp_work->buffer_name = "pm_sch_encounter_relation"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
  call gp_add_line("from person p")
;Add additional tables to the from clause
  call gp_add_line(", encounter e, encntr_prsnl_reltn epr")
;Build the primary where clause
  call gp_add_line("plan epr")
  if (gp_work->epr_prsnl_id > 0)                                                            ;189997
    call gp_add_line(concat("where epr.prsnl_person_id = ", build(gp_work->epr_prsnl_id)))  ;189997
  else                                                                                      ;189997
  call gp_add_line(concat("where epr.prsnl_person_id = ", build(gp_work->user_id)))
  endif                                                                                     ;189997
  if(gp_work->encounter_relation > 0 or use_prsnl_or_expire_filter = 0) ;189997
  call gp_add_line(concat("and epr.encntr_prsnl_r_cd = ", build(gp_work->encounter_relation)))
  endif ;189997
  if (canceled_encounter_mode)
     call gp_add_line("and epr.active_ind = 0")
     call gp_add_line("and epr.active_status_cd = gp_deleted")
  else
     call gp_add_line("and epr.active_ind = 1")
  endif
  call gp_add_line("and epr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
  call gp_add_line("and epr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
  ;189997++
  if (gp_work->epr_not_expired_ind = TRUE)
    call gp_add_line("and (epr.expire_dt_tm > cnvtdatetime(curdate, curtime3) or epr.expire_dt_tm is NULL)")
  endif
  ;189997--
;Add subsequent joins
  call gp_add_line("join e")
  call gp_add_line("where e.encntr_id = epr.encntr_id")
  call gp_hit_encounter(0)
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
#4899_ENCOUNTER_RELATION_SEARCH_EXIT
 
#4900_CENSUS_SEARCH
;If we've already performed a search or don't have the filters necessary for this type of search, exit
  if (gp_work->search_done or gp_work->location_filter_ind = 0)
    go to 4999_CENSUS_SEARCH_EXIT
  endif
;Indicate that we've already made the census hit
  set gp_work->census_hit = 1
;Start the search parser buffer
  set gp_work->buffer_name = "pm_sch_census"
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
 
  ;267873 call gp_add_line("select into 'nl:' p.person_id")
  call gp_add_line("select distinct into 'nl:' p.person_id");267873
 
  call gp_add_line("from person p")
;Add additional tables to the from clause
  call gp_add_line(", encntr_domain ed")
;Build the primary where clause
  call gp_add_line("plan ed")
  call gp_add_line("where ed.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
  if (gp_work->facility_filter_ind)
    call gp_add_line(concat("and ed.loc_facility_cd = ", build(gp_work->facility)))
  endif
  if (gp_work->building_filter_ind)
    call gp_add_line(concat("and ed.loc_building_cd = ", build(gp_work->building)))
  endif
  if (gp_work->location_filter_ind)
    call gp_add_line(concat("and ed.loc_nurse_unit_cd = ", build(gp_work->location)))
  endif
  call gp_add_line(concat("and ed.encntr_domain_type_cd = ", build(gp_census)))
  call gp_add_line("and ed.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
  call gp_add_line("and ed.active_ind = 1")
;Add subsequent joins
  call gp_add_line("join p")
  call gp_add_line("where p.person_id = ed.person_id")
  call gp_hit_person(0)
;Finish and execute the parser buffer
  call gp_finish_buffer(1)
#4999_CENSUS_SEARCH_EXIT
 
#5000_FILL_REPLY
;Exit if we've found no persons
  if (gp_work->person_count <= 0)
    go to 5999_FILL_REPLY_EXIT
  endif
;Move all of the basic person information from the internal person list to the reply
  set stat = alterlist(reply->person, gp_work->person_count)

  if (validate(request->exclude_prsnl_from_search_ind, -99) != -99) ;319008
     ;302772++
     if(request->exclude_prsnl_from_search_ind = 1)
       ;Set the Expand Variables
       set ml_CurListSize = gp_work->person_count
       set ml_LoopCnt = ceil(cnvtreal(ml_CurListSize) / ml_BatchSize)
       set ml_NewListSize = (ml_LoopCnt * ml_BatchSize)
       set stat = alterlist(gp_work->person, ml_NewListSize)
       ;Pad the record for best use of bind variables
       for (ml_Index = ml_CurListSize + 1 to ml_NewListSize)
         Set gp_work->person[ml_Index]->person_id = gp_work->person[ml_CurListSize]->person_id
       endfor
    
       select into 'nl:'
         p_exists = evaluate(nullind(pa.person_alias_id),1,0,1)
         From (Dummyt D with seq = value(ml_LoopCnt)),
              Prsnl pr, person_alias pa
         Plan D
           where initarray(ml_Start, evaluate(d.seq, 1, 1, ml_Start + ml_BatchSize))
         Join pr
           where expand(ml_Index, ml_Start, ml_Start + (ml_BatchSize - 1), pr.person_id, gp_work->person[ml_Index]->person_id)
           and pr.active_ind = 1
         Join pa
           where pa.person_id = outerjoin(pr.person_id)
             and pa.person_alias_type_cd = outerjoin(gp_mrn)
         detail
           ml_CurIndex = 0
           ml_CurIndex = locateval(ml_Index, 1, ml_CurListSize, pr.person_id, gp_work->person[ml_Index]->person_id)
           if((p_exists = false) and (ml_CurIndex > 0))
             gp_work->person[ml_CurIndex]->personnel_ind = 1
           endif
       with nocounter
    
       set stat = alterlist(reply->person, ml_CurListSize)
     endif
     ;302772--
  endif ;319008
 
;++208237  -  Changing FOR loop to DummyT select
;  for (i = 1 to gp_work->person_count)
;    set reply->person[i]->person_id = gp_work->person[i]->person_id
;    if (gp_work->weight_result_ind)
;      set reply->person[i]->weight = gp_work->person[i]->weight
;    endif
;    ;191819++
;    ;if (gp_work->mode = gp_account_mode)
;    if (gp_work->mode = gp_account_mode
;        or gp_work->claim_number_filter_ind = 1
;        or gp_work->statement_number_filter_ind = 1)
;    ;191819--
;      set reply->person[i].pft_acct_id  = gp_work->person[i].pft_acct_id
;    endif
;  endfor
 
;There are two possible selects because weight may or may not exist in the reply structure...
  if(gp_work->weight_result_ind)
    select into 'nl:'
           this_person_id = gp_work->person[d1.seq]->person_id
         , this_weight = gp_work->person[d1.seq]->weight
         , this_pft_acct_id = gp_work->person[d1.seq]->pft_acct_id
      from (dummyt d1 with seq = size(reply->person,5))
      order by this_person_id
      head report
        i = 0
      detail
        if (gp_work->person[d1.seq].personnel_ind = 0) ;302772
          i = i + 1
          reply->person[i]->person_id = this_person_id
          reply->person[i]->weight = this_weight
          if (gp_work->mode = gp_account_mode
              or gp_work->claim_number_filter_ind = 1
              or gp_work->statement_number_filter_ind = 1)
              reply->person[i].pft_acct_id  = this_pft_acct_id
          endif
        endif                                          ;302772
    with nocounter
  else
    select into 'nl:'
           this_person_id = gp_work->person[d1.seq]->person_id
         , this_weight = gp_work->person[d1.seq]->weight
         , this_pft_acct_id = gp_work->person[d1.seq]->pft_acct_id
      from (dummyt d1 with seq = size(reply->person,5))
      order by this_person_id
      head report
        i = 0
      detail
        if (gp_work->person[d1.seq].personnel_ind = 0) ;302772
          i = i + 1
          reply->person[i]->person_id = this_person_id
          if (gp_work->mode = gp_account_mode
              or gp_work->claim_number_filter_ind = 1
              or gp_work->statement_number_filter_ind = 1)
             reply->person[i].pft_acct_id  = this_pft_acct_id
          endif
        endif                                          ;302772
    with nocounter
  endif
;--208237
 
  if (validate(request->exclude_prsnl_from_search_ind, -99) != -99) ;319008
     ;302772++
     if(request->exclude_prsnl_from_search_ind = 1)
       set stat = alterlist(reply->person, i)
       set gp_work->person_count =  i
       ;Exit if we've found  person and they were all personnel
       if (gp_work->person_count <= 0)
         go to 5999_FILL_REPLY_EXIT
       endif
     endif
     ;302772--
  endif ;319008
 
;Grab person table information for each person
  if (gp_work->person_result_ind)
    set gp_work->buffer_count = 0
    set stat = alterlist(gp_work->buffer, 0)
    if (gp_work->person_count <= 200)
       set bExpand = TRUE
    else
       set bExpand = FALSE
    endif
    call gp_add_line("select into 'nl:' p.person_id")
    if (bExpand)
       call gp_add_line("from person p")
       call gp_add_line("plan p")
       call gp_add_line(build("where expand(lCnt, 1,", gp_work->person_count,
               ",p.person_id, reply->person[lCnt]->person_id, 200)"))
    else
       call gp_add_line("from person p, (dummyt d with seq = value(gp_work->person_count))")
       call gp_add_line("plan d")
       call gp_add_line("join p")
       call gp_add_line("where p.person_id = reply->person[d.seq]->person_id")
    endif
    call gp_add_line("detail")
;212094++
;	;201216++ added  for the account search to fetch more than one instance
; 	call gp_add_line("lCnt2=9999999")
;	;203539	call gp_add_line("iCnt = 1")
;	call gp_add_line("lStartPos = 1");203539 Renaming the variable iCnt
;	if (bExpand)
;		call gp_add_line("while(lCnt2 > 0)")
;  			;203539++ Renaming the variable iCnt
;  			;call gp_add_line(build("lCnt2 = locateval(lCnt, iCnt,", gp_work->person_count,
;	                                ;",p.person_id, reply->person[lCnt]->person_id)"))
;
;  			call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
;	                                ",p.person_id, reply->person[lCnt]->person_id)"))
;  			;203539--
;
;	endif
;	;201216--
    if (bExpand)
      call gp_add_line("lStartPos = 1")
      ;++208237
      if (gp_work->mode = gp_account_mode)
        call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
                                ",p.person_id, reply->person[lCnt]->person_id)"))
      else
        call gp_add_line(build("lCnt2 = locatevalsort(lCnt, lStartPos,", gp_work->person_count,
                                ",p.person_id, reply->person[lCnt]->person_id)"))
      endif
      ;--208237
      call gp_add_line("while(lCnt2 > 0)")
    endif
;212094--
    if (gp_work->age_result_ind)
      if (curutc)
        call gp_add_line("if (p.abs_birth_dt_tm > cnvtdatetime('01-JAN-1800')")
        ;394747 call gp_add_line("and p.abs_birth_dt_tm <= cnvtdatetime(curdate, curtime3))")
	call gp_add_line("and p.abs_birth_dt_tm <= datetimezone(cnvtdatetime(curdate, curtime3),p.birth_tz))") ;394747
      else
        call gp_add_line("if (p.birth_dt_tm > cnvtdatetime('01-JAN-1800')")
        call gp_add_line("and p.birth_dt_tm <= cnvtdatetime(curdate, curtime3))")
      endif
      call gp_add_line("if (p.deceased_dt_tm > cnvtdatetime('01-JAN-1800')")
      call gp_add_line("and p.deceased_dt_tm < cnvtdatetime(curdate, curtime3))")
      if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
          ; call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                   ",p.person_id, reply->person[lCnt]->person_id)"))
 
       ;201216--
          call gp_add_line("reply->person[lCnt2]->age =")
      else
          call gp_add_line("reply->person[d.seq]->age =")
      endif
      if (curutc)
        call gp_add_line("cnvtage(cnvtdate2(format(p.birth_dt_tm, 'mm/dd/yyyy;;d'), 'mm/dd/yyyy'),")
        call gp_add_line("cnvtint(format(p.birth_dt_tm, 'hhmm;;m')),")
      else
        call gp_add_line("cnvtage(cnvtdate2(format(p.birth_dt_tm, 'mm/dd/yyyy;;d'), 'mm/dd/yyyy'),")
        call gp_add_line("cnvtint(format(p.birth_dt_tm, 'hhmm;;m')),")
      endif
      call gp_add_line("cnvtdate2(format(p.deceased_dt_tm, 'mm/dd/yyyy;;d'), 'mm/dd/yyyy'),")
      call gp_add_line("cnvtint(format(p.deceased_dt_tm, 'hhmm;;m')))")
      call gp_add_line("else")
      if (bExpand)
      ;201216++ added  for the account search to fetch more than one instance
          ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                   ",p.person_id, reply->person[lCnt]->person_id)"))
      ;201216--
         call gp_add_line("reply->person[lCnt2]->age =")
      else
         call gp_add_line("reply->person[d.seq]->age =")
      endif
      if (curutc)
        call gp_add_line("cnvtage(cnvtdate2(format(p.birth_dt_tm, 'mm/dd/yyyy;;d'), 'mm/dd/yyyy'),")
        call gp_add_line("cnvtint(format(p.birth_dt_tm, 'hhmm;;m')))")
      else
        call gp_add_line("cnvtage(cnvtdate2(format(p.birth_dt_tm, 'mm/dd/yyyy;;d'), 'mm/dd/yyyy'),")
        call gp_add_line("cnvtint(format(p.birth_dt_tm, 'hhmm;;m')))")
      endif
      call gp_add_line("endif")
      call gp_add_line("endif")
    endif
    if (gp_work->birth_date_result_ind)
      call gp_add_line("if (p.birth_dt_tm > cnvtdatetime('01-JAN-1800')")
      call gp_add_line("and p.birth_dt_tm <= cnvtdatetime(curdate, curtime3))")
      if (bExpand)
      ;201216++ added  for the account search to fetch more than one instance
             ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
             ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
         call gp_add_line("reply->person[lCnt2]->birth_date = cnvtdatetime(p.birth_dt_tm)")
         call gp_add_line(build("reply->person[lCnt2]->abs_birth_date =",                                        ;216099
              "format(cnvtdatetimeutc(datetimezone(p.birth_dt_tm,p.birth_tz),1),'YYYYMMDDHHmmss;;Q')"))          ;216099
         call gp_add_line("reply->person[lCnt2]->birth_prec_flag = p.birth_prec_flag")                           ;216099
      else
         call gp_add_line("reply->person[d.seq]->birth_date = cnvtdatetime(p.birth_dt_tm)")
         call gp_add_line("reply->person[d.seq]->birth_prec_flag = p.birth_prec_flag")                           ;216099
         call gp_add_line(build("reply->person[d.seq]->abs_birth_date =",                                        ;216099
              "format(cnvtdatetimeutc(datetimezone(p.birth_dt_tm,p.birth_tz),1),'YYYYMMDDHHmmss;;Q')"))          ;216099
      endif
      if (curutc)
         if (bExpand)
         ;201216++ added  for the account search to fetch more than one instance
            ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
            ;                 ",p.person_id, reply->person[lCnt]->person_id)"))
         ;201216--
            call gp_add_line("reply->person[lCnt2]->birth_tz = p.birth_tz")
         else
            call gp_add_line("reply->person[d.seq]->birth_tz = p.birth_tz")
         endif
      endif
      call gp_add_line("endif")
    endif
 
 
    if (bAnyNameFlag) ;check for true if this is a setup for any name
 
      call gp_add_line(build("gpWorkIdx = locateval(lCnt, 1,", gp_work->person_count,
                             ",p.person_id, gp_work->person[lCnt]->person_id)"))  ;241999
      if (bExpand)
      ;201216++ added  for the account search to fetch more than one instance
             ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                 ",p.person_id, reply->person[lCnt]->person_id)"))
      ;201216--
         call gp_add_line("reply->person[lCnt2]->any_name_id = gp_work->person[gpWorkIdx].any_name_id")  ;241999
         call gp_add_line("reply->person[lCnt2]->any_name_full = gp_work->person[gpWorkIdx].any_name_full")  ;241999
      else
         call gp_add_line("reply->person[d.seq]->any_name_id = gp_work->person[gpWorkIdx].any_name_id")  ;241999
         call gp_add_line("reply->person[d.seq]->any_name_full = gp_work->person[gpWorkIdx].any_name_full")  ;241999
      endif
    endif
 
 
    if (gp_work->archive_result_ind)
       if (bExpand)
         ;201216++ added  for the account search to fetch more than one instance
             ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->archive_cd_meaning = uar_get_code_meaning(p.archive_status_cd)")
       else
          call gp_add_line("reply->person[d.seq]->archive_cd_meaning = uar_get_code_meaning(p.archive_status_cd)")
       endif
    endif
    if (gp_work->deceased_result_ind)
       call gp_add_line("if (p.deceased_cd > 0.0)")
 
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->deceased = uar_get_code_display(p.deceased_cd)")
       else
          call gp_add_line("reply->person[d.seq]->deceased = uar_get_code_display(p.deceased_cd)")
       endif
 
       call gp_add_line("endif")
    endif
    if (gp_work->ethnic_group_result_ind)
       call gp_add_line("if (p.ethnic_grp_cd > 0.0)")
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;               ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->ethnic_group = uar_get_code_display(p.ethnic_grp_cd)")
       else
          call gp_add_line("reply->person[d.seq]->ethnic_group = uar_get_code_display(p.ethnic_grp_cd)")
       endif
       call gp_add_line("endif")
    endif
    if (gp_work->gender_result_ind)
       call gp_add_line("if (p.sex_cd > 0.0)")
 
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->gender = uar_get_code_display(p.sex_cd)")
       else
          call gp_add_line("reply->person[d.seq]->gender = uar_get_code_display(p.sex_cd)")
       endif
 
       call gp_add_line("endif")
    endif
 
    if (gp_work->language_result_ind)
       call gp_add_line("if (p.language_cd > 0.0)")
 
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;               ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->language = uar_get_code_display(p.language_cd)") ;64325
       else
          call gp_add_line("reply->person[d.seq]->language = uar_get_code_display(p.language_cd)")
       endif
 
       call gp_add_line("endif")
    endif
    if (gp_work->marital_status_result_ind)
       call gp_add_line("if (p.marital_type_cd > 0.0)")
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)")
       ;201216--
          call gp_add_line("reply->person[lCnt2]->marital_status = uar_get_code_display(p.marital_type_cd)")
       else
          call gp_add_line("reply->person[d.seq]->marital_status = uar_get_code_display(p.marital_type_cd)")
       endif
       call gp_add_line("endif")
    endif
    if (gp_work->last_encounter_date_result_ind)
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->last_encounter_date = cnvtdatetime(p.last_encntr_dt_tm)")
       else
          call gp_add_line("reply->person[d.seq]->last_encounter_date = cnvtdatetime(p.last_encntr_dt_tm)")
       endif
    endif
    if (gp_work->mothers_maiden_name_result_ind)
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;               ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->mothers_maiden_name = trim(p.mother_maiden_name, 3)")
       else
          call gp_add_line("reply->person[d.seq]->mothers_maiden_name = trim(p.mother_maiden_name, 3)")
       endif
    endif
    if (gp_work->name_result_ind)
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;               ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->name = trim(p.name_full_formatted, 3)")
       else
          call gp_add_line("reply->person[d.seq]->name = trim(p.name_full_formatted, 3)")
       endif
    endif
    if (gp_work->archive_result_ind)
       call gp_add_line("if (p.archive_status_cd > 0.0)")
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->archive_cd_display = uar_get_code_display(p.archive_status_cd)")
       else
          call gp_add_line("reply->person[d.seq]->archive_cd_display = uar_get_code_display(p.archive_status_cd)")
       endif
       call gp_add_line("endif")
    endif
    if (gp_work->nationality_result_ind)
       call gp_add_line("if (p.nationality_cd > 0.0)")
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->nationality = uar_get_code_display(p.nationality_cd)")
       else
          call gp_add_line("reply->person[d.seq]->nationality = uar_get_code_display(p.nationality_cd)")
       endif
       call gp_add_line("endif")
    endif
    if (gp_work->person_type_result_ind)
       call gp_add_line("if (p.person_type_cd > 0.0)")
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->person_type = uar_get_code_display(p.person_type_cd)")
       else
          call gp_add_line("reply->person[d.seq]->person_type = uar_get_code_display(p.person_type_cd)")
       endif
       call gp_add_line("endif")
    endif
    if (gp_work->race_result_ind)
       call gp_add_line("if (p.race_cd > 0.0)")
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->race = uar_get_code_display(p.race_cd)")
       else
          call gp_add_line("reply->person[d.seq]->race = uar_get_code_display(p.race_cd)")
       endif
       call gp_add_line("endif")
    endif
    if (gp_work->religion_result_ind)
       call gp_add_line("if (p.religion_cd > 0.0)")
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
              ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;                ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->religion = uar_get_code_display(p.religion_cd)")
       else
          call gp_add_line("reply->person[d.seq]->religion = uar_get_code_display(p.religion_cd)")
       endif
       call gp_add_line("endif")
    endif
    if (gp_work->species_result_ind)
       call gp_add_line("if (p.species_cd > 0.0)")
       if (bExpand)
       ;201216++ added for the account search to fetch more than one instance
          ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                 ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->species = uar_get_code_display(p.species_cd)")
       else
          call gp_add_line("reply->person[d.seq]->species = uar_get_code_display(p.species_cd)")
       endif
       call gp_add_line("endif")
    endif
    if (gp_work->vip_result_ind)
       call gp_add_line("if (p.vip_cd > 0.0)")
       if (bExpand)
       ;201216++ added for the account search to fetch more than one instance
            ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                 ",p.person_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->vip = uar_get_code_display(p.vip_cd)")
       else
          call gp_add_line("reply->person[d.seq]->vip = uar_get_code_display(p.vip_cd)")
       endif
       call gp_add_line("endif")
    endif
    if(gp_work->deceased_dt_tm_result_ind)
          if(bExpand)
         ;201216++ added for the account search to fetch more than one instance
              ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
            ;             ",p.person_id, reply->person[lCnt]->person_id)"))
        ;201216--
            call gp_add_line("reply->person[lCnt2]->deceased_dt_tm = cnvtdatetime(p.deceased_dt_tm)")
            call gp_add_line("reply->person[lCnt2]->deceased_dt_tm_prec_flag = p.deceased_dt_tm_prec_flag") ;216099
        else
            call gp_add_line("reply->person[d.seq]->deceased_dt_tm = cnvtdatetime(p.deceased_dt_tm)")
	        call gp_add_line("reply->person[d.seq]->deceased_dt_tm_prec_flag = p.deceased_dt_tm_prec_flag") ;216099
        endif
        
        ;+314173
        if (curutc)
           if (bExpand)
              call gp_add_line("reply->person[lCnt2]->deceased_tz = p.deceased_tz")
           else
              call gp_add_line("reply->person[d.seq]->deceased_tz = p.deceased_tz")
           endif
        endif  ;if (curutc)
        ;-314173
        
    endif
;212094++
;    ;201216++ added for the account search to fetch more than one instance
;	if(bExpand)
;		;203539	call gp_add_line("iCnt = lCnt2 + 1")
;		call gp_add_line("lStartPos = lCnt2 + 1");203539 Renaming the variable iCnt
; 		call gp_add_line("endwhile")
; 	endif
; 	;201216--
    if (bExpand)
      ;++208237
      if (gp_work->mode = gp_account_mode)
        call gp_add_line("lStartPos = lCnt2 + 1")
        call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
                               ",p.person_id, reply->person[lCnt]->person_id)"))
      else
          call gp_add_line("lCnt2 = 0")
      endif
      ;--208237
	    call gp_add_line("endwhile")
	  endif
;212094--
    call gp_add_line("with nocounter go")
    call gp_perform_buffer(1)
  endif
;Grab home address information for each person
  if (gp_work->address_result_ind)
    set gp_work->buffer_count = 0
    set stat = alterlist(gp_work->buffer, 0)
    if (gp_work->person_count <= 200)
       set bExpand = TRUE
    else
       set bExpand = FALSE
    endif
    call gp_add_line("select into 'nl:' a.address_id")
    if (bExpand)
       call gp_add_line("from address a")
       call gp_add_line("plan a")
       call gp_add_line(build("where expand(lCnt, 1,", gp_work->person_count,
               ",a.parent_entity_id, reply->person[lCnt]->person_id, 200)"))
    else
       call gp_add_line("from address a, (dummyt d with seq = value(gp_work->person_count))")
       call gp_add_line("plan d")
       call gp_add_line("join a")
       call gp_add_line("where a.parent_entity_id = reply->person[d.seq]->person_id")
    endif
    call gp_add_line("and a.parent_entity_name = 'PERSON'")
    call gp_add_line(concat("and a.address_type_cd = ", build(gp_address)))
    call gp_add_line("and a.active_ind = 1")
    call gp_add_line("and a.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call gp_add_line("and a.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    call gp_add_line("order by a.address_type_seq desc")
    call gp_add_line("detail")
;212094++
;    ;201216++ added for the account search to fetch more than one instance
;    call gp_add_line("lCnt2 = 9999999")
;    ;203539 call gp_add_line("iCnt = 1")
;    call gp_add_line("lStartPos = 1");203539 Renaming the variable iCnt
;    if(bExpand)
;		call gp_add_line("while(lCnt2 > 0)")
;			;203539 ++ Renaming the variable iCnt
;			;call gp_add_line(build("lCnt2 = locateval(lCnt, iCnt,", gp_work->person_count,
;	                ;",a.parent_entity_id, reply->person[lCnt]->person_id)"))
;
;			call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
;	                ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
;	        ;203539--
;	endif
;	;201216--
    if (bExpand)
      call gp_add_line("lStartPos = 1")
      ;++208237
      if (gp_work->mode = gp_account_mode)
        call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
                               ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
      else
        call gp_add_line(build("lCnt2 = locatevalsort(lCnt, lStartPos,", gp_work->person_count,
                               ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
      endif
      ;--208237
      call gp_add_line("while(lCnt2 > 0)")
    endif
;212094--
  if (gp_work->address1_result_ind)
     if (bExpand)
       ;201216++ added for the account search to fetch more than one instance
          ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                 ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->address1 = trim(a.street_addr, 3)")
     else
          call gp_add_line("reply->person[d.seq]->address1 = trim(a.street_addr, 3)")
     endif
  endif
  if (gp_work->address2_result_ind)
     if (bExpand)
       ;201216++ added for the account search to fetch more than one instance
          ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->address2 = trim(a.street_addr2, 3)")
     else
          call gp_add_line("reply->person[d.seq]->address2 = trim(a.street_addr2, 3)")
     endif
  endif
  if (gp_work->city_result_ind)
     if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
          ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->city = trim(a.city, 3)")
       else
          call gp_add_line("reply->person[d.seq]->city = trim(a.city, 3)")
       endif
    endif
    if (gp_work->state_result_ind)
      call gp_add_line("if (a.state_cd > 0.0)")
      if (bExpand)
      ;201216++ added  for the account search to fetch more than one instance
          ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;                ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
      ;201216--
          call gp_add_line("reply->person[lCnt2]->state = uar_get_code_display(a.state_cd)")
      else
          call gp_add_line("reply->person[d.seq]->state = uar_get_code_display(a.state_cd)")
      endif
      call gp_add_line("else")
      if (bExpand)
      ;201216++ added  for the account search to fetch more than one instance
         ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
         ;                ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
      ;201216--
         call gp_add_line("reply->person[lCnt2]->state = trim(a.state, 3)")
      else
         call gp_add_line("reply->person[d.seq]->state = trim(a.state, 3)")
      endif
 
      call gp_add_line("endif")
    endif
    if (gp_work->zipcode_result_ind)
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
          ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
          ;               ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->zipcode = trim(a.zipcode, 3)")
       else
          call gp_add_line("reply->person[d.seq]->zipcode = trim(a.zipcode, 3)")
       endif
    endif
     if (gp_work->paf_key_result_ind)
       if (bExpand)
       ;201216++ added  for the account search to fetch more than one instance
           ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
           ;             ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
       ;201216--
          call gp_add_line("reply->person[lCnt2]->paf_key = trim(a.postal_identifier, 3)")
       else
          call gp_add_line("reply->person[d.seq]->paf_key = trim(a.postal_identifier, 3)")
       endif
    endif
;212094++
;    ;201216++ added  for the account search to fetch more than one instance
;    if(bExpand)
;	 	;203539 call gp_add_line("iCnt = lCnt2 + 1")
;	 	call gp_add_line("lStartPos = lCnt2 + 1");203539 Renaming the variable iCnt
; 		call gp_add_line("endwhile")
; 	endif
; 	;201216--
    if (bExpand)
      ;++208237
      if (gp_work->mode = gp_account_mode)
        call gp_add_line("lStartPos = lCnt2 + 1")
        call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
	                             ",a.parent_entity_id, reply->person[lCnt]->person_id)"))
	    else
	      call gp_add_line("lCnt2 = 0")
	    endif
	    ;--208237
	    call gp_add_line("endwhile")
	  endif
;212094--
    call gp_add_line("with nocounter go")
    call gp_perform_buffer(1)
  endif
;Grab a home phone number for each person
  if (gp_work->phone_result_ind)
     if (bExpand)
        select into "nl:"
          p.phone_num
         from phone p
          where expand(lCnt, 1, gp_work->person_count, p.parent_entity_id,
                        reply->person[lCnt]->person_id, 200)
           and p.parent_entity_name = "PERSON"
           and p.phone_type_cd = gp_phone
           and p.active_ind = 1
           and p.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and p.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
          order by p.phone_type_seq desc
         detail
;212094++
;	       ;201216++ added  for the account search to fetch more than one instance
;	       lCnt2 = 9999999
;	       ;203539 iCnt = 1
;	       lStartPos = 1;203539 Renaming the variable iCnt
; 	 	   while(lCnt2 > 0)
; 				;203539++ Renaming the variable iCnt
; 				;lCnt2 = locateval(lCnt, iCnt, gp_work->person_count,
;                          ;p.parent_entity_id, reply->person[lCnt]->person_id)
;
; 				lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;                          p.parent_entity_id, reply->person[lCnt]->person_id)
;                ;203539--
;	       		;lCnt2 = locateval(lCnt, 1, gp_work->person_count,
;                ;         p.parent_entity_id, reply->person[lCnt]->person_id)
;          ;201216--
          lStartPos = 1
          ;++208237
          if (gp_work->mode = gp_account_mode)
            lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                              p.parent_entity_id, reply->person[lCnt]->person_id)
          else
            lCnt2 = locatevalsort(lCnt, lStartPos, gp_work->person_count,
                              p.parent_entity_id, reply->person[lCnt]->person_id)
          endif
          ;--208237
          while (lCnt2 > 0)
;212094--
               reply->person[lCnt2]->phone = trim(p.phone_num, 3)
 
               i = size(reply->person[lCnt2]->phone)
 
               if (i > 0)
              /********************************************** ;179047++ comment out begins here
              j = 1
 
              for (k = 1 to i)
                  if (substring(k, 1, p.phone_num) in ("(", ")", "-", ".", "_", "/", "\"))
                     j = 0
                     k = i + 1
                  endif
              endfor
 
              if (j)
              ***********************************************/ ;179047-- comment out ends here
                 if (p.phone_format_cd != dFreeTextCd and p.phone_format_cd != 0.0) ;179047
                   reply->person[lCnt2]->phone = cnvtphone(reply->person[lCnt2]->phone, p.phone_format_cd)
                 endif
               endif
	       	  ;203539 iCnt = lCnt2 + 1;201216
	       	  lStartPos = lCnt2 + 1;203539 Renaming the variable iCnt
;212094++
            ;++208237
            if (gp_work->mode = gp_account_mode)
              lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                                p.parent_entity_id, reply->person[lCnt]->person_id)
            else
              lCnt2 = 0
            endif
            ;--208237
;212094--
             endwhile;201216
        with nocounter
     else
        select into "nl:" p.phone_num
          from phone p, (dummyt d with seq = value(gp_work->person_count))
          plan d
          join p
         where p.parent_entity_id = reply->person[d.seq]->person_id
           and p.parent_entity_name = "PERSON"
           and p.phone_type_cd = gp_phone
           and p.active_ind = 1
           and p.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and p.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
         order by p.phone_type_seq desc
        detail
          reply->person[d.seq]->phone = trim(p.phone_num, 3)
          i = size(reply->person[d.seq]->phone)
          /********************************************** ;179047++ comment out begins here
          if (i)
            j = 1
            for (k = 1 to i)
              if (substring(k, 1, p.phone_num) in ("(", ")", "-", ".", "_", "/", "\"))
                j = 0
                k = i + 1
              endif
            endfor
            if (j)
          ***********************************************/ ;179047-- comment out ends here
          if (i > 0) ;179047
            if (p.phone_format_cd != dFreeTextCd and p.phone_format_cd != 0.0) ;179047
              reply->person[d.seq]->phone = cnvtphone(reply->person[d.seq]->phone, p.phone_format_cd)
            endif
          endif
        with nocounter
     endif
  endif
;Grab a maiden name for each person
  if (gp_work->maiden_name_result_ind)
     if (bExpand)
       select into "nl:"
          n.name_last
         from person_name n
         where expand(lCnt, 1, gp_work->person_count, n.person_id,
                        reply->person[lCnt]->person_id, 200)
           and n.name_type_cd = gp_maiden
           and n.active_ind = 1
           and n.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and n.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
         detail
;212094++
;         ;201216++ added  for the account search to fetch more than one instance
;          lCnt2 = 9999999
;	      ;203539 iCnt = 1
;	      lStartPos = 1;203539 Renaming the variable iCnt
; 	 	  while(lCnt2 > 0)
; 			;203539++ Renaming the variable iCnt
; 			;lCnt2 = locateval(lCnt, iCnt, gp_work->person_count,
;                          ;n.person_id, reply->person[lCnt]->person_id)
;
; 			lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;                          n.person_id, reply->person[lCnt]->person_id)
;            ;203539--
;            ;lCnt2 = locateval(lCnt, 1, gp_work->person_count,
;            ;            n.person_id, reply->person[lCnt]->person_id)
;         ;201216--
;          reply->person[lCnt2]->maiden_name = trim(n.name_last, 3)
;          ;203539 iCnt = lCnt2 + 1;201216
;          lStartPos = lCnt2 + 1;203539 Renaming the variable iCnt
;           endwhile;201216
           lStartPos = 1
           ;++208237
           if (gp_work->mode = gp_account_mode)
             lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                               n.person_id, reply->person[lCnt]->person_id)
           else
             lCnt2 = locatevalsort(lCnt, lStartPos, gp_work->person_count,
                                   n.person_id, reply->person[lCnt]->person_id)
           endif
           ;--208237
           while (lCnt2 > 0)
	           reply->person[lCnt2]->maiden_name = trim(n.name_last, 3)
           ;++208237
             if (gp_work->mode = gp_account_mode)
	             lStartPos = lCnt2 + 1
               lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                                 n.person_id, reply->person[lCnt]->person_id)
             else
               lCnt2 = 0
             endif
           ;--208237
           endwhile
;212094--
       with nocounter
     else
        select into "nl:" n.name_last
          from person_name n, (dummyt d with seq = value(gp_work->person_count))
          plan d
          join n
         where n.person_id = reply->person[d.seq]->person_id
           and n.name_type_cd = gp_maiden
           and n.active_ind = 1
           and n.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and n.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
        detail
          reply->person[d.seq]->maiden_name = trim(n.name_last, 3)
        with nocounter
     endif
  endif
 
;Grab the alternate character name for each person if there are any
  if (gp_work->alt_char_name_ind and gp_alt_char_cur > 0)
     if (bExpand)
        select into "nl:"
          n.name_full
         from person_name n
          where expand(lCnt, 1, gp_work->person_count, n.person_id,
                        reply->person[lCnt]->person_id, 200)
            and n.name_type_cd  = gp_alt_char_cur
            and n.active_ind  = 1
            and n.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
            and n.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
         detail
;212094++
;	     ;201216++ added  for the account search to fetch more than one instance
;	      lCnt2 = 9999999
;	      ;203539 iCnt = 1
;	      lStartPos = 1;203539 Renaming the variable iCnt
; 	 	  while(lCnt2 > 0)
; 			;203539++ Renaming the variable iCnt
; 			;lCnt2 = locateval(lCnt, iCnt, gp_work->person_count,
;                          ;n.person_id, reply->person[lCnt]->person_id)
;
; 			lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;                          n.person_id, reply->person[lCnt]->person_id)
;            ;203539--
;	        ;lCnt2 = locateval(lCnt, 1, gp_work->person_count,
;            ;              n.person_id, reply->person[lCnt]->person_id)
; 		 ;201216--
;         reply->person[lCnt2]->alt_char_name = trim(n.name_full, 3)
;		     ;203539 iCnt = lCnt2 + 1;201216
;         lStartPos = lCnt2 + 1;203539 Renaming the variable iCnt
;	      endwhile;201216
         lStartPos = 1
         ;++208237
         if (gp_work->mode = gp_account_mode)
           lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                             n.person_id, reply->person[lCnt]->person_id)
         else
           lCnt2 = locatevalsort(lCnt, lStartPos, gp_work->person_count,
                                 n.person_id, reply->person[lCnt]->person_id)
         endif
         ;--208237
         while(lCnt2 > 0)
           reply->person[lCnt2]->alt_char_name = trim(n.name_full, 3)
         ;++208237
           if (gp_work->mode = gp_account_mode)
             lStartPos = lCnt2 + 1
             lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                               n.person_id, reply->person[lCnt]->person_id)
           else
             lCnt2 = 0
           endif
         ;--208237
         endwhile
;212094--
        with nocounter
     else
        select into "nl:" n.name_full
          from person_name n, (dummyt d with seq = value(gp_work->person_count))
          plan d
          join n
          where n.person_id = reply->person[d.seq]->person_id
            and n.name_type_cd = gp_alt_char_cur
            and n.active_ind = 1
            and n.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
            and n.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
        detail
          reply->person[d.seq]->alt_char_name = trim(n.name_full, 3)
        with nocounter
     endif
  endif
 
;Grab providers for each person
  if (gp_work->provider_result_count)
    for (i = 1 to gp_work->provider_result_count)
      set gp_work->code = gp_work->provider_result[i]->provider_type_cd
      set gp_work->meaning = cnvtlower(cnvtalphanum(gp_work->provider_result[i]->meaning))
      if (bExpand)
         set gp_work->target = concat("reply->person[lCnt2]->provider_", gp_work->meaning)
      else
         set gp_work->target = concat("reply->person[d.seq]->provider_", gp_work->meaning)
      endif
      set gp_work->buffer_count = 0
      set stat = alterlist(gp_work->buffer, 0)
      call gp_add_line("select into 'nl:' p.name_full_formatted")
      if (bExpand)
         call gp_add_line("from prsnl p, person_prsnl_reltn r")
         call gp_add_line("plan r")
         call gp_add_line(build("where expand(lCnt, 1,", gp_work->person_count,
               ",r.person_id, reply->person[lCnt]->person_id, 200)"))
      else
          call gp_add_line("from prsnl p, person_prsnl_reltn r, (dummyt d with seq = value(gp_work->person_count))")
          call gp_add_line("plan d")
          call gp_add_line("join r")
          call gp_add_line("where r.person_id = reply->person[d.seq]->person_id")
        endif
      call gp_add_line(concat("and r.person_prsnl_r_cd + 0 = ", build(gp_work->code)))
      call gp_add_line("and r.active_ind = 1")
      call gp_add_line("and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
      call gp_add_line("and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
      call gp_add_line("join p")
      call gp_add_line("where p.person_id = r.prsnl_person_id")
      call gp_add_line("and p.active_ind = 1")
      call gp_add_line("and p.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
      call gp_add_line("and p.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
      call gp_add_line("detail")
;212094++
;      ;201216++ added  for the account search to fetch more than one instance
;      call gp_add_line("lCnt2 = 9999999")
;      ;203539 call gp_add_line("iCnt = 1")
;      call gp_add_line("lStartPos = 1");203539 Renaming the variable iCnt
;      if(bExpand)
;      	call gp_add_line("while(lCnt2 > 0)")
;      endif
;      ;201216--
;      call gp_add_line("gp_work->text = trim(p.name_full_formatted, 3)")
;
;      ;+50792
;      if (bExpand)
;      ;201216++ added  for the account search to fetch more than one instance
;         ;203539++ Renaming the variable iCnt
;         ;call gp_add_line(build("lCnt2 = locateval(lCnt, iCnt,", gp_work->person_count,
;                          ;",r.person_id, reply->person[lCnt]->person_id)"))
;
;         call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
;                         ",r.person_id, reply->person[lCnt]->person_id)"))
;         ;203539--
;         ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
;         ;                ",r.person_id, reply->person[lCnt]->person_id)"))
;      ;201216--
;      endif
;      ;-50792
 
      call gp_add_line("gp_work->text = trim(p.name_full_formatted, 3)")
      if (bExpand)
        call gp_add_line("lStartPos = 1")
        ;++208237
        if (gp_work->mode = gp_account_mode)
          call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
                                 ",r.person_id, reply->person[lCnt]->person_id)"))
        else
          call gp_add_line(build("lCnt2 = locatevalsort(lCnt, lStartPos,", gp_work->person_count,
                                 ",r.person_id, reply->person[lCnt]->person_id)"))
        endif
        ;--208237
        call gp_add_line("while (lCnt2 > 0)")
      endif
;212094--
 
 
      call gp_add_line(build("if((lCnt2>0) or (",bExpand," = FALSE))"));201216
      call gp_add_line("if (size(gp_work->text) > 0)")
      call gp_add_line(concat("if (size(", gp_work->target, ") > 0)"))
      call gp_add_line(concat(gp_work->target, " = concat(", gp_work->target, ", '; ', gp_work->text)"))
      call gp_add_line("else")
      call gp_add_line(concat(gp_work->target, " = gp_work->text"))
      call gp_add_line("endif")
      call gp_add_line("endif")
      call gp_add_line("endif");201216
;212094++
;      ;201216++ added  for the account search to fetch more than one instance
;      if(bExpand)
;	      ;203539 call gp_add_line("iCnt = lCnt2 + 1")
;	      call gp_add_line("lStartPos = lCnt2 + 1");203539 Renaming the variable iCnt
;	      call gp_add_line("endwhile")
;      endif
;      ;201216--
      if (bExpand)
        ;++208237
        if (gp_work->mode = gp_account_mode)
          call gp_add_line("lStartPos = lCnt2 + 1")
          call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
	                               ",r.person_id, reply->person[lCnt]->person_id)"))
        else
          call gp_add_line("lCnt2 = 0")
        endif
        ;--208237
        call gp_add_line("endwhile")
      endif
;212094--
      call gp_add_line("with nocounter go")
      call gp_perform_buffer(1)
    endfor
  endif
;Grab aliases as requested
  if (gp_work->alias_result_count)
    if (gp_work->security)
      set lTotalOrgs = size(userOrgs->organizations, 5)
      ;164846++
      ;set lTotalReply = ceil(cnvtreal(lTotalOrgs)/200)*200
      ;set stat = alterlist(userOrgs->organizations,lTotalReply)
 
      ;for(lCnt = lTotalOrgs + 1 to lTotalReply)
      ;      set userOrgs->organizations[lCnt].organization_id =
      ;      userOrgs->organizations[lTotalOrgs].organization_id
      ;endfor
      set lTotalReply = lTotalOrgs
      ;164846--
      set lStart = 1
      if (lTotalOrgs > 0)
;++208237 - Change select to remove expand on userOrgs and handle organization_id filtering in detail section.
;        ;Select from org_alias_pool_reltn using initarray and expands
;        ;164846++
;        ;select distinct into "nl:" o.alias_pool_cd
;        ;  from org_alias_pool_reltn o,  (dummyt d with seq = value(1 + ((lTotalReply - 1) / 200)))
;        ;  plan d
;        ;  where initarray(lStart, evaluate(d.seq, 1, 1, lStart+200))
;        ;  join o
;        ;   where expand (lCnt, lStart, lStart + (200-1), o.organization_id, userOrgs->organizations[lCnt].organization_id)
;        select into "nl:" o.alias_pool_cd
;          from org_alias_pool_reltn o
;          where expand(lCnt, lStart, lTotalOrgs, o.organization_id, userOrgs->organizations[lCnt].organization_id, 200)
;        ;164846--
;             and o.alias_entity_name = "PERSON_ALIAS"
;             and o.alias_pool_cd + 0 > 0.0
;             and o.active_ind = 1
;             and o.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
;             and o.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
;           detail
;            gp_work->pool_count = gp_work->pool_count + 1
;
;            if (mod(gp_work->pool_count, 10) = 1)
;               stat = alterlist(gp_work->pool, gp_work->pool_count + 9)
;            endif
;
;            gp_work->pool[gp_work->pool_count]->pool_cd = o.alias_pool_cd
;          with nocounter
        select into "nl:" o.alias_pool_cd
          from org_alias_pool_reltn o
             where o.alias_entity_name = "PERSON_ALIAS"
             and o.organization_id + 0 > 0.0
             and o.alias_pool_cd + 0 > 0.0
             and o.active_ind = 1
             and o.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
             and o.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
           detail
             lCnt2 = locatevalsort(lCnt, 1, lTotalOrgs, o.organization_id, userOrgs->organizations[lCnt].organization_id)
             if (lCnt2 > 0)
               gp_work->pool_count = gp_work->pool_count + 1
               if (mod(gp_work->pool_count, 10) = 1)
                 stat = alterlist(gp_work->pool, gp_work->pool_count + 9)
               endif
               gp_work->pool[gp_work->pool_count]->pool_cd = o.alias_pool_cd
             endif
          with nocounter
;--208237
      endif     ;lTotalOrgs > 0
      if (gp_work->pool_count > 0)
         set stat = alterlist(gp_work->pool, gp_work->pool_count)
      endif
    endif     ;gp_work->security
 
;++241999 moved grabbing name_full to happen at same time as grabbing any_name_id.  Why do the select twice?
;   ;Grab the name_full field from PERSON_NAME
;    if (bAnyNameFlag = 1)
;       ;Grab the anyname full names from history
;       if (bCheckedHist != TRUE)
;          call pm_CheckHistory(null)
;       endif
;       if (bHistoryOption)
;          if (bExpand)
;             select into "nl:"
;               pn.name_full
;              from person_name_hist pn
;               where expand(lCnt, 1, gp_work->person_count, pn.person_name_hist_id,
;                        reply->person[lCnt].any_name_id, 200)
;              detail
;;212094++
;;		      ;201216++ added  for the account search to fetch more than one instance
;;		        lCnt2=9999999
;;		        ;203539 iCnt=1
;;		        lStartPos = 1;203539 Renaming the variable iCnt
;;		        while(lCnt2 > 0)
;;		        	;203539++ Renaming the variable iCnt
;;		            ;lCnt2 = locateval(lCnt, iCnt, gp_work->person_count,
;;	                          ;pn.person_name_hist_id, reply->person[lCnt].any_name_id)
;;
;;		            lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;;	                          pn.person_name_hist_id, reply->person[lCnt].any_name_id)
;;                    ;203539--
;;		            ;lCnt2 = locateval(lCnt, 1, gp_work->person_count,
;;	                ;          pn.person_name_hist_id, reply->person[lCnt].any_name_id)
;;	 		  ;201216--
;;		           	reply->person[lCnt2].any_name_full = pn.name_full
;;		  	        ;203539 iCnt = lCnt2 + 1;201216
;;		  	        lStartPos = lCnt2 + 1;203539 Renaming the variable iCnt
;;		        endwhile;201216
;              lStartPos = 1
;              ;++208237
;              if (gp_work->mode = gp_account_mode)
;                lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;                                  pn.person_name_hist_id, reply->person[lCnt].any_name_id)
;              else
;                lCnt2 = locatevalsort(lCnt, lStartPos, gp_work->person_count,
;                                      pn.person_name_hist_id, reply->person[lCnt].any_name_id)
;              endif
;              ;--208237
;              while(lCnt2 > 0)
;                reply->person[lCnt2].any_name_full = pn.name_full
;              ;++208237
;                if (gp_work->mode = gp_account_mode)
;                  lStartPos = lCnt2 + 1
;                  lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;                                    pn.person_name_hist_id, reply->person[lCnt].any_name_id)
;                else
;                  lCnt2 = 0
;                endif
;              ;--208237
;              endwhile
;;212094--
;             with nocounter
;          else
;              select into "nl:"
;                pn.name_full
;               from person_name_hist pn, (dummyt d with seq = value(size(reply->person,5)))
;               plan d
;                  where reply->person[d.seq].any_name_id > 0
;               join pn
;                  where pn.person_name_hist_id = reply->person[d.seq].any_name_id
;               detail
;                  reply->person[d.seq].any_name_full = pn.name_full
;              with nocounter
;            endif
;       endif
;       if (bExpand)
;           select into "nl:"
;             pn.name_full
;            from person_name pn
;             where expand(lCnt, 1, gp_work->person_count, pn.person_name_id,
;                           reply->person[lCnt].any_name_id, 200)
;            detail
;;212094++
;;	        ;201216++ added  for the account search to fetch more than one instance
;;	          lCnt2=9999999
;;	          ;203539 iCnt=1
;;	          lStartPos = 1;203539 Renaming the variable iCnt
;;	          while(lCnt2 > 0)
;;	          	;203539++ Renaming the variable iCnt
;;	          	;lCnt2 = locateval(lCnt, iCnt, gp_work->person_count,
;;                          ;pn.person_name_id, reply->person[lCnt].any_name_id)
;;	          	lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;;                          pn.person_name_id, reply->person[lCnt].any_name_id)
;; 				;203539--
;; 				;lCnt2 = locateval(lCnt, 1, gp_work->person_count,
;;                ;          pn.person_name_id, reply->person[lCnt].any_name_id)
;; 			;201216--
;;	          	reply->person[lCnt2].any_name_full = pn.name_full
;;	          	;203539 iCnt = lCnt2 + 1;201216
;;	          	lStartPos = lCnt2 + 1;203539 Renaming the variable iCnt
;;	          endwhile;201216
;           lStartPos = 1
;           ;++208237
;           if (gp_work->mode = gp_account_mode)
;             lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;                               pn.person_name_id, reply->person[lCnt].any_name_id)
;           else
;             lCnt2 = locatevalsort(lCnt, lStartPos, gp_work->person_count,
;                                   pn.person_name_id, reply->person[lCnt].any_name_id)
;           endif
;           ;--208237
;           while(lCnt2 > 0)
;             reply->person[lCnt2].any_name_full = pn.name_full
;           ;++208237
;             if (gp_work->mode = gp_account_mode)
;               lStartPos = lCnt2 + 1
;               lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;                                 pn.person_name_id, reply->person[lCnt].any_name_id)
;             else
;               lCnt2 = 0
;             endif
;           endwhile
;           ;--208237
;;212094--
;           with nocounter
;       else
;           select into "nl:"
;             pn.name_full
;            from person_name pn, (dummyt d with seq = value(size(reply->person,5)))
;            plan d
;               where reply->person[d.seq].any_name_id > 0
;            join pn
;               where pn.person_name_id = reply->person[d.seq].any_name_id
;            detail
;               reply->person[d.seq].any_name_full = pn.name_full
;           with nocounter
;         endif
;    endif
;--241999
 
    for (i = 1 to gp_work->alias_result_count)
      set gp_work->code = gp_work->alias_result[i]->alias_type_cd
      set gp_work->meaning = cnvtlower(cnvtalphanum(gp_work->alias_result[i]->meaning))
      if (bExpand)
         set gp_work->target = concat("reply->person[lCnt2]->alias_", gp_work->meaning)
         set sAliasPoolCodeTarget = concat("reply->person[lCnt2]->alias_pool_cd_", gp_work->meaning) ;130804
      else
         set gp_work->target = concat("reply->person[d.seq]->alias_", gp_work->meaning)
         set sAliasPoolCodeTarget = concat("reply->person[d.seq]->alias_pool_cd_", gp_work->meaning) ;130804
      endif
      
      ;+333187
      ;if (gp_work->meaning in ("drlic", "militaryid", "shin"))
      if (gp_work->meaning in ("drlic", "militaryid", "shin", "ntkcrdnbr"))
      ;-333187
      
        set j = 0
      else
        set j = 1
      endif
      set gp_work->buffer_count = 0
      set stat = alterlist(gp_work->buffer, 0)
        call gp_add_line("select into 'nl:' a.alias")
      if (bExpand)
         call gp_add_line("from person_alias a")
         call gp_add_line("plan a")
         call gp_add_line(build("where expand(lCnt, 1,", gp_work->person_count,
               ",a.person_id, reply->person[lCnt]->person_id, 200)"))
      else
          call gp_add_line("from person_alias a, (dummyt d with seq = value(gp_work->person_count))")
          call gp_add_line("plan d")
          call gp_add_line("join a")
          call gp_add_line("where a.person_id = reply->person[d.seq]->person_id")
      endif
      call gp_add_line(concat("and a.person_alias_type_cd = ", build(gp_work->code)))
      call gp_add_line("and a.active_ind = 1")
      call gp_add_line("and a.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
      call gp_add_line("detail")
;212094++
;      ;201216++ added  for the account search to fetch more than one instance
;      call gp_add_line("lCnt2 = 9999999")
;      ;203539 call gp_add_line("iCnt = 1")
;      call gp_add_line("lStartPos = 1");203539 Renaming the variable iCnt
;      if(bExpand)
;      	call gp_add_line("while(lCnt2 > 0)")
; 	    endif
; 	  ;201216--
      if(bExpand)
        call gp_add_line("lStartPos = 1")
        ;++208237
        if (gp_work->mode = gp_account_mode)
          call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
                                 ",a.person_id, reply->person[lCnt]->person_id)"))
        else
          call gp_add_line(build("lCnt2 = locatevalsort(lCnt, lStartPos,", gp_work->person_count,
                                 ",a.person_id, reply->person[lCnt]->person_id)"))
        endif
        ;--208237
        call gp_add_line("while(lCnt2 > 0)")
      endif
;212094--
      call gp_add_line("k = 0")
      call gp_add_line("if (j and gp_work->pool_count > 0)")
      call gp_add_line("for (l = 1 to gp_work->pool_count)")
      call gp_add_line("if (gp_work->pool[l]->pool_cd = a.alias_pool_cd)")
      call gp_add_line("k = 1")
      call gp_add_line("l = gp_work->pool_count + 1")
      call gp_add_line("endif")
      call gp_add_line("endfor")
      call gp_add_line("else")
      call gp_add_line("k = 1")
      call gp_add_line("endif")
      call gp_add_line("if (k)")
      call gp_add_line("gp_work->text = trim(cnvtalias(a.alias, a.alias_pool_cd), 3)")
      call gp_add_line("sAliasPoolCodeText = build(a.alias_pool_cd)") ;130804
      call gp_add_line("if (size(gp_work->text) > 0)")
      call gp_add_line("if (a.end_effective_dt_tm < cnvtdatetime(curdate, curtime3))")
      call gp_add_line(concat("gp_work->text = concat('(', gp_work->text, ')')"))
      call gp_add_line("endif")
;212094++
;      ;+50792
;      if (bExpand)
;      ;201216++ added  for the account search to fetch more than one instance
;      		;203539++ Renaming the variable iCnt
;      		;call gp_add_line(build("lCnt2 = locateval(lCnt, iCnt,", gp_work->person_count,
;                          ;",a.person_id, reply->person[lCnt]->person_id)"))
;
;      		call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
;                          ",a.person_id, reply->person[lCnt]->person_id)"))
;      		;203539--
;            ;call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
;            ;            ",a.person_id, reply->person[lCnt]->person_id)"))
;      ;201216--
;      endif
;      ;-50792
;212094--
      call gp_add_line(build("if((lCnt2 > 0) or (",bExpand," = FALSE))"));201216
      call gp_add_line(concat("if (size(", gp_work->target, ") > 0)"))
      call gp_add_line(concat(gp_work->target, " = concat(", gp_work->target, ", '; ', gp_work->text)"))
      call gp_add_line(concat(sAliasPoolCodeTarget, " = concat(", sAliasPoolCodeTarget, ", '; ', sAliasPoolCodeText)"))
      call gp_add_line("else")
      call gp_add_line(concat(gp_work->target, " = gp_work->text"))
      call gp_add_line(concat(sAliasPoolCodeTarget, " = sAliasPoolCodeText")) ;130804
      if( gp_work->meaning = "shin" and gp_work->shn_ver_code_ind = 1)
        if (bExpand)
           call gp_add_line("reply->person[lCnt2]->shn_ver_code = a.health_card_ver_code")
        else
           call gp_add_line("reply->person[d.seq]->shn_ver_code = a.health_card_ver_code")
        endif
 
      elseif( gp_work->meaning = "nhin" and gp_work->nhn_ver_code_ind = 1)
        if (bExpand)
           call gp_add_line("reply->person[lCnt2]->nhn_ver_code = a.health_card_ver_code")
        else
           call gp_add_line("reply->person[d.seq]->nhn_ver_code = a.health_card_ver_code")
        endif
      endif
      call gp_add_line("endif")
      call gp_add_line("endif");201216
      call gp_add_line("endif")
;212094      call gp_add_line("else");203539
;212094      call gp_add_line("lCnt2 = 0");203539 to exit from loop when pool count is 0
      call gp_add_line("endif")
        set sAliasPoolCodeTarget = "" ;130804
      set sAliasPoolCodeText = "" ;130804
;212094++
;      ;201216++ added  for the account search to fetch more than one instance
;      if(bExpand)
;	       ;203539 call gp_add_line("iCnt = lCnt2 + 1")
;	       call gp_add_line("lStartPos = lCnt2 + 1");203539 Renaming the variable iCnt
;	       call gp_add_line("endwhile")
;	    endif
;	    ;201216--
      if(bExpand)
        ;++208237
        if (gp_work->mode = gp_account_mode)
          call gp_add_line("lStartPos = lCnt2 + 1")
          call gp_add_line(build("lCnt2 = locateval(lCnt, lStartPos,", gp_work->person_count,
                                 ",a.person_id, reply->person[lCnt]->person_id)"))
        else
          call gp_add_line("lCnt2 = 0")
        endif
        ;--208237
        call gp_add_line("endwhile")
      endif
;212094--
      call gp_add_line("with nocounter go")
      call gp_perform_buffer(1)
    endfor
  endif
 
  ;191819++
  ;if ((gp_work->mode = gp_account_mode)
  if ((gp_work->mode = gp_account_mode
      or gp_work->claim_number_filter_ind = 1
      or gp_work->statement_number_filter_ind = 1)
  ;191819--
     and (gp_work->billing_entity_name_ind = 1)
      or (gp_work->acct_current_balance_ind = 1)
      or (gp_work->acct_bad_debt_balance_ind = 1)
      or (validate (reply->person[1].alias_account, "N") != "N"))
    set gp_work->buffer_count = 0
    set stat = alterlist(gp_work->buffer, 0)
    call gp_add_line("select into 'nl:' acc.acct_id")
    if (bExpand)
       call gp_add_line("from account acc")
    else
       call gp_add_line("from (dummyt d with seq = value(gp_work->person_count))")
       call gp_add_line(", account acc")
    endif
    if (gp_work->billing_entity_name_ind = 1)
       call gp_add_line (", at_acct_reltn aar")
       call gp_add_line (", be_at_reltn bar")
       call gp_add_line (", billing_entity be")
    endif
    if (bExpand)
       call gp_add_line("plan acc")
       call gp_add_line(build("where expand(lCnt, 1,", gp_work->person_count,
               ",acc.acct_id, reply->person[lCnt]->pft_acct_id, 200)"))
    else
       call gp_add_line("plan d")
       call gp_add_line("join acc where acc.acct_id = reply->person[d.seq]->pft_acct_id")
    endif
    if (gp_work->billing_entity_name_ind = 1)
       call gp_add_line("join aar where aar.acct_id = acc.acct_id")
       call gp_add_line("join bar where bar.acct_templ_id = aar.acct_templ_id")
       call gp_add_line("join be where be.billing_entity_id = bar.billing_entity_id")
    endif
    call gp_add_line("detail")
    if (bExpand)
        call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", gp_work->person_count,
                          ",acc.acct_id, reply->person[lCnt]->pft_acct_id)"))
        if (gp_work->billing_entity_name_ind = 1)
           call gp_add_line("reply->person[lCnt2]->billing_entity_name = be.be_name")
        endif
        if ( gp_work->acct_current_balance_ind = 1)
          call gp_add_line("if (acc.dr_cr_flag = 2)")
          call gp_add_line("reply->person[lCnt2]->acct_current_balance = (acc.acct_balance * -1)")
          call gp_add_line("else")
          call gp_add_line("reply->person[lCnt2]->acct_current_balance = acc.acct_balance")
          call gp_add_line("endif")
        endif
        if ( gp_work->acct_bad_debt_balance_ind = 1)
          call gp_add_line("if (acc.bad_debt_bal_dr_cr_flag = 2)")
          call gp_add_line("reply->person[lCnt2]->acct_bad_debt_balance = (acc.bad_debt_balance * -1)")
          call gp_add_line("else")
          call gp_add_line("reply->person[lCnt2]->acct_bad_debt_balance = acc.bad_debt_balance")
          call gp_add_line("endif")
        endif
        ;//Determine if the account is a result
        if (validate (reply->person[1].alias_account, "N") != "N")
          ;//I was to overwrite the value that's currently in this reply structure since it could be
          ;//a concat'd list of account numbers.  I want to break it out for each account.  This will
          ;//only occur when in account mode, and account number is a requested result.
          call gp_add_line("reply->person[lCnt2].alias_account = acc.ext_acct_id_txt")
        endif
    else
        if( gp_work->billing_entity_name_ind = 1)
          call gp_add_line("reply->person[d.seq]->billing_entity_name = be.be_name")
        endif
        if ( gp_work->acct_current_balance_ind = 1)
          call gp_add_line("if (acc.dr_cr_flag = 2)")
          call gp_add_line("reply->person[d.seq]->acct_current_balance = (acc.acct_balance * -1)")
          call gp_add_line("else")
          call gp_add_line("reply->person[d.seq]->acct_current_balance = acc.acct_balance")
          call gp_add_line("endif")
        endif
        if ( gp_work->acct_bad_debt_balance_ind = 1)
          call gp_add_line("if (acc.bad_debt_bal_dr_cr_flag = 2)")
          call gp_add_line("reply->person[d.seq]->acct_bad_debt_balance = (acc.bad_debt_balance * -1)")
          call gp_add_line("else")
          call gp_add_line("reply->person[d.seq]->acct_bad_debt_balance = acc.bad_debt_balance")
          call gp_add_line("endif")
        endif
        ;//Determine if the account is a result
        if (validate (reply->person[1].alias_account, "N") != "N")
          ;//I was to overwrite the value that's currently in this reply structure since it could be
          ;//a concat'd list of account numbers.  I want to break it out for each account.  This will
          ;//only occur when in account mode, and account number is a requested result.
          call gp_add_line("reply->person[d.seq].alias_account = acc.ext_acct_id_txt")
        endif
    endif
    call gp_add_line("with nocounter go")
    call gp_perform_buffer(1)
  endif
;return the province from code_value_extension of the alias_pool_cd with field name "MNEMONIC"
   if (gp_work->alias_result_count and gp_work->shn_province_ind = 1)
      if (bExpand)
         select into "nl:"
           pa.person_id
          from person_alias pa, code_value_extension cve
           plan pa
            where expand(lCnt, 1, gp_work->person_count,
                          pa.person_id, reply->person[lCnt].person_id, 200)
              and pa.person_alias_type_cd = gp_shin
              and pa.active_ind = 1
              and pa.beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)
              and pa.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
              and pa.alias_pool_cd + 0 > 0
           join cve
            where cve.code_value = pa.alias_pool_cd
              and trim(cve.field_name) = "MNEMONIC"
              and cve.code_set + 0 = 263
          detail
 
 	         if (textlen(trim(cve.field_value)) <= 3)
;212094++
;	 	     ;201216++ added  for the account search to fetch more than one instance
;		         lCnt2 = 9999999
;		      	 ;203539 iCnt=1
;		      	 lStartPos = 1;203539 Renaming the variable iCnt
;		         while(lCnt2 > 0)
;		         	;203539++ Renaming the variable iCnt
;		         	;lCnt2 = locateval(lCnt, iCnt, gp_work->person_count,
;	                          ;pa.person_id, reply->person[lCnt].person_id)
;
;	                lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;	                          pa.person_id, reply->person[lCnt].person_id)
;		      	 	;203539--
;		            ;lCnt2 = locateval(lCnt, 1, gp_work->person_count,
;	                ;          pa.person_id, reply->person[lCnt].person_id)
;	          ;201216--
;		            reply->person[lCnt2]->shn_province = trim(cve.field_value,3)
;		         	;203539 iCnt = lCnt2 + 1;201216
;		         	lStartPos = lCnt2 + 1;203539 Renaming the variable iCnt
;		         endwhile;201216
;          endif
             lStartPos = 1
             ;++208237
             if (gp_work->mode = gp_account_mode)
               lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                                 pa.person_id, reply->person[lCnt].person_id)
             else
               lCnt2 = locatevalsort(lCnt, lStartPos, gp_work->person_count,
                                 pa.person_id, reply->person[lCnt].person_id)
             endif
             ;--208237
             while(lCnt2 > 0)
               reply->person[lCnt2]->shn_province = trim(cve.field_value,3)
             ;++208237
               if (gp_work->mode = gp_account_mode)
                 lStartPos = lCnt2 + 1
                 lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                                   pa.person_id, reply->person[lCnt].person_id)
               else
                 lCnt2 = 0
               endif
             ;--208237
             endwhile
          endif
;212094--
         with nocounter
      else
          select into "nl:"
          from person_alias pa, code_value_extension cve,
              (dummyt d with seq = value(gp_work->person_count))
          plan d
          join pa
          where pa.person_id = reply->person[d.seq]->person_id
            and pa.person_alias_type_cd = gp_shin
            and pa.active_ind = 1
            and pa.beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)
            and pa.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
            and pa.alias_pool_cd + 0 > 0
          join cve
          where cve.code_value = pa.alias_pool_cd
            and trim(cve.field_name) = "MNEMONIC"
            and cve.code_set + 0 = 263
          detail
	        if (textlen(trim(cve.field_value)) <= 3 )
               reply->person[d.seq]->shn_province = trim(cve.field_value,3)
            endif
          with nocounter
      endif
   endif
   if(gp_work->alias_result_count and gp_work->nhn_province_ind = 1)
      if (bExpand)
         select into "nl:"
           pa.person_id
          from person_alias pa, code_value_extension cve
           plan pa
            where expand(lCnt, 1, gp_work->person_count,
                          pa.person_id, reply->person[lCnt].person_id, 200)
              and pa.person_alias_type_cd = gp_nhin
              and pa.active_ind = 1
              and pa.beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)
              and pa.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
              and pa.alias_pool_cd + 0 > 0
           join cve
            where cve.code_value = pa.alias_pool_cd
              and trim(cve.field_name) = "MNEMONIC"
              and cve.code_set + 0 = 263
          detail
	         if (textlen(trim(cve.field_value)) <= 3)
;212094++
;		     ;201216++ added  for the account search to fetch more than one instance
;		         lCnt2 = 9999999
;		      	 ;203539 iCnt=1
;		      	 lStartPos = 1;203539 Renaming the variable iCnt
;		         while(lCnt2 > 0)
;		      		 ;203539++ Renaming the variable iCnt
;		      		 ;lCnt2 = locateval(lCnt, iCnt, gp_work->person_count,
;	                          ;pa.person_id, reply->person[lCnt].person_id)
;
;		      		 lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
;	                          pa.person_id, reply->person[lCnt].person_id)
;		      		 ;203539--
;	                 ;lCnt2 = locateval(lCnt, 1, gp_work->person_count,
;	                 ;         pa.person_id, reply->person[lCnt].person_id)
;	          ;201216--
;		            reply->person[lCnt2]->nhn_province = trim(cve.field_value,3)
;		        	;203539 iCnt = lCnt2 + 1;201216
;		        	lStartPos = lCnt2 + 1;203539 Renaming the variable iCnt
;		         endwhile;201216
;	         endif
            lStartPos = 1
            ;++208237
            if (gp_work->mode = gp_account_mode)
              lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                                pa.person_id, reply->person[lCnt].person_id)
            else
              lCnt2 = locatevalsort(lCnt, lStartPos, gp_work->person_count,
                                    pa.person_id, reply->person[lCnt].person_id)
            endif
            ;--208237
            while(lCnt2 > 0)
              reply->person[lCnt2]->nhn_province = trim(cve.field_value,3)
            ;++208237
              if (gp_work->mode = gp_account_mode)
                lStartPos = lCnt2 + 1
                lCnt2 = locateval(lCnt, lStartPos, gp_work->person_count,
                                  pa.person_id, reply->person[lCnt].person_id)
              else
                lCnt2 = 0
              endif
            ;--208237
            endwhile
          endif
;212094--
         with nocounter
      else
          select into "nl:"
          from person_alias pa, code_value_extension cve,
              (dummyt d with seq = value(gp_work->person_count))
          plan d
          join pa
          where pa.person_id  = reply->person[d.seq]->person_id
            and pa.person_alias_type_cd = gp_nhin
            and pa.active_ind = 1
            and pa.beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)
            and pa.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
            and pa.alias_pool_cd + 0 > 0
          join cve
          where cve.code_value = pa.alias_pool_cd
            and trim(cve.field_name) = "MNEMONIC"
            and cve.code_set + 0 = 263
          detail
	        if (textlen(trim(cve.field_value)) <= 3 )
               reply->person[d.seq]->nhn_province = trim(cve.field_value,3)
            endif
          with nocounter
      endif
   endif
   if (gp_work->response_cd_result_ind = 1)
      ;get response code
      set i = 0
      free record person_info
      record person_info
      ( 1 persons[*]
          2 person_id = f8
          2 response_cd = f8
          2 reply_dt_tm = dq8
        1 encntrs[*]
          2 encntr_id = f8
          2 response_cd = f8
          2 reply_dt_Tm = dq8
      )
      set stat = alterlist(person_info->persons, size(reply->person, 5))
      for (i = 1 to size(reply->person, 5))
         set person_info->persons[i].person_id = reply->person[i]->person_id
      endfor
      call GetResponseCode(0)
      for (i = 1 to size(reply->person, 5))
         if (person_info->persons[i].response_cd > 0)
            set reply->person[i].response_cd_display =
                uar_get_code_display(person_info->persons[i].response_cd)
         endif
      endfor
      free record person_info
   endif
 
 
  ;+292506
  if (gp_work->mode = gp_person_guarantor_mode)
     declare lReltnCnt = i4 with noconstant(0)
 
     select into "nl:"
       p2.person_id
      from person_person_reltn ppr, person p2
       plan ppr
        where expand(lCnt, 1, gp_work->person_count, ppr.related_person_id, reply->person[lCnt].person_id)
          and ppr.person_reltn_type_cd in(gp_def_guarantor_cd, gp_guarantor_cd)
          and ppr.active_ind = 1
          and ppr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
          and ppr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
       join p2
        where p2.person_id = ppr.person_id
          and p2.ft_entity_id = 0
          and p2.active_ind = 1
      order by ppr.related_person_id, p2.name_full_formatted
      detail
        lCnt2 = locateval(lCnt, 1, gp_work->person_count, ppr.related_person_id, reply->person[lCnt].person_id)
 
        while(lCnt2 > 0)
           lReltnCnt = size(reply->person[lCnt2]->ppr_guar_reltns, 5) + 1
           stat = alterlist(reply->person[lCnt2]->ppr_guar_reltns, lReltnCnt)
 
           reply->person[lCnt2]->ppr_guar_reltns[lReltnCnt].person_id = p2.person_id
 
           lCnt2 = locateval(lCnt, lCnt2 + 1, gp_work->person_count, ppr.related_person_id, reply->person[lCnt].person_id)
        endwhile
     with nocounter
  endif  ;if (gp_work->mode = gp_person_guarantor_mode)
  ;-292506
 
  ;301787TM++
  if (gp_work->primary_care_trust_ind = 1)
    select into "nl:"
    from person_org_reltn por,
         org_org_reltn oor,
         organization o,
         org_type_reltn otr
    plan por
      where expand(lCnt, 1, gp_work->person_count, por.person_id, reply->person[lCnt].person_id)
        and por.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime3)
        and por.end_effective_dt_tm > cnvtdatetime(curdate,curtime3)
        and por.active_ind = 1
        and por.person_org_reltn_cd = gp_person_org_reltn_cd
    join oor
      where oor.organization_id = por.organization_id
        and oor.org_org_reltn_cd = gp_org_org_reltn_cd
    join o
      where o.organization_id = oor.related_org_id
        and o.active_ind = 1
        and o.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime3)
        and o.end_effective_dt_tm > cnvtdatetime(curdate,curtime3)
    join otr
      where otr.organization_id = oor.related_org_id
        and otr.org_type_cd = gp_org_type_cd
        and otr.active_ind = 1
        and otr.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime3)
        and otr.end_effective_dt_tm > cnvtdatetime(curdate,curtime3)
    order by por.person_id
    detail
      lCnt2 = locateval(lCnt, 1, gp_work->person_count, por.person_id, reply->person[lCnt].person_id)
 
      while (lCnt2 > 0)
        reply->person[lCnt2]->primary_care_trust = o.org_name
 
        lCnt2 = locateval(lCnt, lCnt2 + 1, gp_work->person_count, por.person_id, reply->person[lCnt].person_id)
      endwhile
    with nocounter
  endif ;(gp_work->primary_care_trust_ind = 1)
  ;301787TM--
 
  ;320638++
  if(gp_work->source_version_number_ind = 1)
    select into "nl:"
    from person_patient pp
    where expand(lCnt, 1, gp_work->person_count, pp.person_id, reply->person[lCnt].person_id)
    detail
      lCnt2 = locateval(lCnt, 1, gp_work->person_count, pp.person_id, reply->person[lCnt].person_id)
      while (lCnt2>0)
        reply->person[lCnt2]->source_version_number = pp.source_version_number
        lCnt2 = locateval(lCnt, lCnt2 + 1, gp_work->person_count, pp.person_id, reply->person[lCnt].person_id)
      endwhile
    with nocounter
  endif
 ;320638--
  ;336780+
  if (gp_work->race_result_ind = 1)
      if (bExpand)
         ;Using EXPAND
         select into "nl:"
         from person_code_value_r pcvr,
              code_value cv
         plan pcvr
         where expand(lCnt, 1, gp_work->person_count, pcvr.person_id, reply->person[lCnt]->person_id)
           and pcvr.code_set = RACE_CODESET
           and pcvr.active_ind = 1
           and pcvr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and pcvr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
         join cv where cv.code_value = pcvr.code_value 
         order pcvr.person_id, cv.display
         head pcvr.person_id
            raceFoundInd = 0
         detail
            lCnt2 = locateval(lCnt, 1, gp_work->person_count, pcvr.person_id, reply->person[lCnt].person_id)
             while(lCnt2 > 0)
               if (raceFoundInd = 1)
                  reply->person[lCnt]->race  = trim(concat(reply->person[lCnt]->race, ", ",
                              trim(cv.display)))
               else
                  reply->person[lCnt]->race = trim(cv.display)
                  raceFoundInd = 1
               endif
               
               lCnt2 = locateval(lCnt, lCnt2 + 1, gp_work->person_count, pcvr.person_id, reply->person[lCnt]->person_id)
            endwhile
         with nocounter
      else
         ;Using DUMMYT
         select into "nl:"
            p.race_cd
         from person_code_value_r pcvr,
            person p,
            code_value cv,
            (dummyt d with seq = value(size(reply->person, 5)))
         plan d
         join pcvr
         where pcvr.person_id = reply->person[d.seq]->person_id
           and pcvr.code_set = RACE_CODESET
           and pcvr.active_ind = 1
           and pcvr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and pcvr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
         join p where p.person_id = pcvr.person_id
         join cv where cv.code_value = pcvr.code_value
         order by d.seq, pcvr.person_id, cv.display 
         head d.seq
            reply->person[d.seq]->race = ""
         head pcvr.person_id
            raceFoundInd = 0
         detail
            if (raceFoundInd = 1)
               reply->person[d.seq]->race = trim(concat(reply->person[d.seq]->race, ", ",
                           trim(cv.display)))
            else
               reply->person[d.seq]->race = trim(cv.display)
               raceFoundInd = 1
            endif
         with nocounter
      endif
  endif
  ;336780-
  
if (reply -> status_data -> status  != "Z")      ;344225
   ;if we get here, return a good status
   set  reply -> status_data -> status  = "S" 
endif                                            ;344225
  
#5999_FILL_REPLY_EXIT
 
#6000_REP_FILTER_STR
;Check the filter and set the string to the filter value
%i cclsource:pm_set_filter_str.inc
#6999_REP_FILTER_STR_EXIT
 
#7000_FILL_ACCOUNT_REPLY
  ;Exit if we've found no persons
  ;191819++
  ;if (gp_work->person_count <= 0 or gp_work->mode != gp_account_mode)
  if (gp_work->person_count <= 0
     or (gp_work->mode != gp_account_mode
        and claim_statement_search_done = 0))
  ;191819--
    go to 7999_FILL_ACCOUNT_REPLY_EXIT
  endif
  set t_cnt         = 0
  free set gp_tmp_work
  record gp_tmp_work
  ( 1 person[*]
      2  person_id        = f8
      2  pft_acct_id      = f8
      2  pft_acct_nbr_key = vc
      2  found_ind        = i2
      ;201216++ added  for the account search to fetch more than one instance
      2  profit_encntr_id = f8
      2  e_encntr_id         = f8
      2  billing_e_id      = f8
      ;201216--
  )
  ;~The following select will move any entries in the gp_work structure
  ;~to the gp_tmp_work structure if the pft_acct_id > 0.  This will only
  ;~occur if the search was performed by claim or statement number, which means
  ;~we'll know the exact account to return.
  select into "nl:"
  from (dummyt d with seq = value(gp_work->person_count))
  where gp_work->person[d.seq].pft_acct_id > 0
  detail
     t_cnt = t_cnt + 1
     stat = alterlist(gp_tmp_work->person, t_cnt)
     gp_tmp_work->person[t_cnt].person_id    = gp_work->person[d.seq].person_id
     gp_tmp_work->person[t_cnt].pft_acct_id  = gp_work->person[d.seq].pft_acct_id
     gp_tmp_work->person[t_cnt].found_ind    = 1
  with nocounter
  ;~The following select will be performed if the user queried for accounts
  ;~by a person or person_alias filter (pft_acct_id = 0).  If the account number is not passed in then
  ;~we will not know the exact account to return if the user has multiple accounts, so this select
  ;~will retrieve all accounts for the selected persons and convert the alias to alpha numeric and all
  ;~upper case.  This is required so we perform another select on the account table to get the corresponding
  ;~pft_acct_id and not have to worry about string comparisions.
  ;~It has to be done in a seperate select since cnvtalphanum() does not work in the "where"
  ;~clause.
  ;~If we know the account number or partial account number we will filter the results to only the matching
  ;~accounts.
  set tempBufferLow = ""
  set tempBufferHigh = ""
  set j = size(gp_work->text)
  if (ichar(substring(j, 1, gp_work->text)) = gp_asterisk)
      set tempBufferLow = substring(1, j - 1, gp_work->text)
      set tempBufferHigh = concat(tempBufferLow, "zzz")
  else
    set tempBufferLow  = gp_work->text
    set tempBufferHigh = gp_work->text
  endif
  ;~reset the search parser buffer
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
  ;201216 call gp_add_line("select distinct into 'nl:' pa.alias")
  call gp_add_line("select into 'nl:' pa.alias");201216 added  for the account search to fetch more than one instance
  call gp_add_line("from (dummyt d with seq = value(gp_work->person_count))")
  call gp_add_line(", person_alias pa")
  call gp_add_line(", encounter e")
  call gp_add_line(", pft_encntr pe")
  call gp_add_line("plan d where gp_work->person[d.seq].pft_acct_id = 0")
  call gp_add_line("join pa where pa.person_id = gp_work->person[d.seq].person_id")
  ;//Only filter by the alias if we're searching on a ProFit account number.  Otherwise
  ;//return all accounts for the person.
  if (gp_work->meaning = "ACCOUNT")
    call gp_add_line(concat("and trim(pa.alias) between '", tempBufferLow, "' and '",
                                  tempBufferHigh, "'"))
  endif
  call gp_add_line("and pa.person_alias_type_cd = gp_account_type_cd")
  call gp_add_line("and pa.active_ind = 1")
  call gp_add_line("and pa.active_status_cd = gp_active_cd")
  call gp_add_line("join e where e.person_id = pa.person_id")
  call gp_add_line(" and e.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")  ;62263
  call gp_add_line("join pe where pe.encntr_id = e.encntr_id")
  call gp_add_line("order by pa.alias")
  call gp_add_line("detail")
  call gp_add_line("t_cnt = t_cnt + 1")
  call gp_add_line("stat = alterlist(gp_tmp_work->person, t_cnt)")
  call gp_add_line("gp_tmp_work->person[t_cnt].pft_acct_nbr_key = cnvtalphanum(cnvtupper(pa.alias))")
  call gp_add_line("gp_tmp_work->person[t_cnt].person_id = pa.person_id")
  ;201216++ added  for the account search to fetch more than one instance
  call gp_add_line("gp_tmp_work->person[t_cnt].profit_encntr_id = pe.pft_encntr_id")
  call gp_add_line("gp_tmp_work->person[t_cnt].e_encntr_id  = pe.encntr_id")
  call gp_add_line("gp_tmp_work->person[t_cnt].billing_e_id = pe.billing_entity_id")
  ;201216--
  call gp_add_line("with nocounter go")
  call gp_perform_buffer(1)
  ;~This select will retrieve the pft_acct_id for the results that qualified
  ;~in the select directly above.  Basically, the accounts returned from a person
  ;~or person_alias search where I had to get the cnvtalphanum(cnvtupper()) of the alias.
  ;~If the account_nbr is of type A/R and subtype Patient then I'll mark it as an account
  ;~to return to the user.
  ;~reset the search parser buffer
  set gp_work->buffer_count = 0
  set stat = alterlist(gp_work->buffer, 0)
  set be_cnt = 0
  call gp_add_line("select distinct into 'nl:' a.acct_id, e.organization_id") ;232244 - added organization_id for org security
  call gp_add_line("from (dummyt d with seq = value(size(gp_tmp_work->person,5)))")
  call gp_add_line(", account a")
  call gp_add_line(", pft_acct_reltn par")
  call gp_add_line(", encounter e")
  call gp_add_line(", pft_encntr pe")
  call gp_add_line("plan d where gp_tmp_work->person[d.seq].pft_acct_nbr_key > ''")
  ;392731++
  ;call gp_add_line("join a where a.ext_acct_id_txt_key = gp_tmp_work->person[d.seq].pft_acct_nbr_key")
  ;call gp_add_line("and a.acct_type_cd = gp_ar_acct_type_cd")
  call gp_add_line("join a where a.acct_type_cd = gp_ar_acct_type_cd")
  ;392731--
  call gp_add_line("and a.acct_sub_type_cd = gp_patient_sub_type_cd")
  call gp_add_line("and a.acct_status_cd = gp_open_cd")
  call gp_add_line("and a.active_ind = 1")
  call gp_add_line("and a.active_status_cd = gp_active_cd")
  if(gp_work->billing_entity_filter_count > 0)
    call gp_add_line(build("and expand(be_cnt, 1,", gp_work->billing_entity_filter_count,
                           ",a.billing_entity_id, gp_work->billing_entity_filter[be_cnt].billing_entity_id, 50)"))
  endif
  call gp_add_line("and exists (select distinct bpgr.billing_entity_id")
  call gp_add_line("            from be_prsnl_group_r bpgr, pft_prsnl_group_r ppgr")
  call gp_add_line("            where bpgr.billing_entity_id = a.billing_entity_id")
  call gp_add_line("            and bpgr.active_ind = 1")
  call gp_add_line("            and ppgr.pft_prsnl_group_id = bpgr.pft_prsnl_group_id")
  call gp_add_line(             concat("and ppgr.prsnl_id = ", build(gp_work->user_id)))
  call gp_add_line("            and ppgr.active_ind = 1)")
  call gp_add_line("join par where par.acct_id = a.acct_id")
  call gp_add_line("and par.parent_entity_id + 0 = gp_tmp_work->person[d.seq].person_id")
  call gp_add_line("and par.parent_entity_name = 'PERSON'")
  call gp_add_line("and par.role_type_cd = gp_patient_role_type_cd")
  call gp_add_line("join e where e.person_id = par.parent_entity_id")
  call gp_add_line("and e.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
;++208237 - Move this conditional org check to detail section
;  if(gp_work->security)
;    call gp_add_organizations(1)
;  endif
;--208237
  ;201216 call gp_add_line("join pe where pe.encntr_id = e.encntr_id")
  call gp_add_line("join pe where pe.acct_id = a.acct_id");201216
  ;201216++ added  for the account search to fetch more than one instance
  call gp_add_line("and pe.pft_encntr_id = gp_tmp_work->person[d.seq].profit_encntr_id")
  call gp_add_line("and pe.encntr_id = gp_tmp_work->person[d.seq].e_encntr_id")
  call gp_add_line("and pe.billing_entity_id = gp_tmp_work->person[d.seq].billing_e_id")
  ;201216--
  call gp_add_line("order by a.acct_id, e.organization_id") ;232244 - added organization_id for org security
  call gp_add_line("detail")
;++208237
     ;232244 - Change lTotalOrgs as upper locatevalsort limit to size(userOrgs->organizations,5)
  call gp_add_line(build("lCnt2 = locatevalsort(lCnt, 1,", size(userOrgs->organizations,5),
                         ",e.organization_id, userOrgs->organizations[lCnt].organization_id)"))
  call gp_add_line("if (gp_work->security <= 0 or (gp_work->security > 0 and lCnt2 > 0))")
  call gp_add_line("gp_tmp_work->person[d.seq].pft_acct_id  = a.acct_id")
  call gp_add_line("gp_tmp_work->person[d.seq].found_ind    = 1")
  call gp_add_line("endif")
;--208237
  call gp_add_line("with nocounter go")
  call gp_perform_buffer(1)
  ;//Reset the person list incase we have extra rows returned.  This will occur because
  ;//a person can have multiple financial accounts.
  set stat = alterlist(gp_work->person, 0)
  ;//If no accounts were found then let the user know that nothing was found.
  if (t_cnt = 0)
     set reply->status_data->status = "F"
     go to 9999_EXIT_PROGRAM
  endif
  ;//Initialize the person counter.
  set p_cnt = 0
  ;// Move the new person/account list to the gp_work internal structure.
  for (i = 1 to t_cnt)
    ;//If the result qualified in the previous selects, move it back into
    ;//the gp_work internal structure.
    if (gp_tmp_work->person[i].found_ind = 1)
      ;//Only add the accounts that meet the requirements of being
      ;//A/R and patient into the gp_work structure.
      set p_cnt = p_cnt + 1
      set stat = alterlist(gp_work->person, p_cnt)
 
      set gp_work->person[p_cnt].person_id   = gp_tmp_work->person[i].person_id
      set gp_work->person[p_cnt].pft_acct_id = gp_tmp_work->person[i].pft_acct_id
    endif
  endfor
  ;//If we have accounts that qualify set our person_count equal to the number
  ;//of valid accounts.
  if (p_cnt > 0)
     set gp_work->person_count = p_cnt
  else
     ;//Nothing qualified so let's tell the user that no accounts were found.
     set reply->status_data->status = "F"
     go to 9999_EXIT_PROGRAM
  endif
#7999_FILL_ACCOUNT_REPLY_EXIT
 
;**************************************************************************************************
;Subroutines
 
subroutine gp_add_line(gpal_text)
  set gp_work->buffer_count = gp_work->buffer_count + 1
  set stat = alterlist(gp_work->buffer, gp_work->buffer_count)
  set gp_work->buffer[gp_work->buffer_count]->text = trim(gpal_text, 3)
end
 
;+109976
subroutine gp_clear_hits(gpch_dummy)
  set gp_work->person_hit = 0
  set gp_work->person_alias_hit = 0
  set gp_work->maiden_name_hit = 0
  set gp_work->person_relation_hit = 0
  set gp_work->encounter_hit = 0
  set gp_work->encounter_alias_hit = 0
  set gp_work->encounter_relation_hit = 0
  set gp_work->census_hit = 0
  set gp_work->security_hit = 0
  set gp_work->patient_hit = 0
  set gp_work->profit_encounter_alias_hit = 0
;109976 - added these lines in
  set gp_work->encntr_person_relation_hit = 0
  set gp_work->home_address_hit = 0
  set gp_work->phone_hit = 0
  set gp_work->person_person_relation_hit = 0  ;292506
end
 ;-109976
 
subroutine gp_dump_buffer(gpdb_dummy)
  if (gp_work->buffer_count)
    select into value(gp_work->buffer_name) d.seq
      from (dummyt d with seq = value(gp_work->buffer_count))
      plan d
    detail
      gp_work->buffer[d.seq]->text
      if (d.seq < gp_work->buffer_count)
        row + 1
      endif
    with nocounter, maxrow = 1, noformfeed, format = variable
 
 
    ;+292506
    set gppb_i = 0
 
    for (gppb_i = 1 to gp_work->buffer_count)
       if (gppb_i = 1)
          set reply->debug_text = gp_work->buffer[gppb_i]->text
       else
          set reply->debug_text = concat(reply->debug_text, " ", gp_work->buffer[gppb_i]->text)
       endif
    endfor
    ;-292506
 
  endif
end
 
subroutine gp_encounter_alias_from(gpeaf_flag)
  if (gpeaf_flag and gp_work->encounter_alias_filter_count > 0 and gp_work->encounter_alias_hit = 0)
    for (gpeaf_i = 1 to gp_work->encounter_alias_filter_count)
      set gp_work->target = concat("ea", build(gpeaf_i))
      call gp_add_line(concat(", encntr_alias ", gp_work->target))
    endfor
  endif
end
 
subroutine gp_profit_encounter_alias_from(gpeaf_flag)
    if (gpeaf_flag and gp_work->profit_encounter_alias_filter_count > 0 and gp_work->profit_encounter_alias_hit = 0)
      for (gpeaf_i = 1 to gp_work->profit_encounter_alias_filter_count)
        set gp_work->target = concat("pea", build(gpeaf_i))
        call gp_add_line(concat(", pft_encntr_alias ", gp_work->target))
      endfor
    endif
end
 
subroutine gp_encounter_relation_from(gperf_flag)
  if (gperf_flag and gp_work->encounter_relation_filter_ind and gp_work->encounter_relation_hit = 0)
    call gp_add_line(", encntr_prsnl_reltn epr")
  endif
end
 
subroutine gp_finish_buffer(gpfb_dummy)
  set i = gp_work->person_count
  call gp_add_line("order by cnvtreal(p.person_id)")
  call gp_add_line("head p.person_id")
  if (i)
    call gp_add_line("j = 1")
    call gp_add_line("if (i)")
    call gp_add_line("for (k = 1 to i)")
    call gp_add_line("if (p.person_id = gp_work->person[k]->person_id)")
    call gp_add_line("j = 0")
    call gp_add_line("k = i + 1")
    call gp_add_line("endif")
    call gp_add_line("endfor")
    call gp_add_line("endif")
    call gp_add_line("if (j)")
  endif
  call gp_add_line("if (gp_work->person_count <= gp_work->max)")
  call gp_add_line("gp_work->person_count = gp_work->person_count + 1")
  call gp_add_line("stat = alterlist(gp_work->person, gp_work->person_count)")
  call gp_add_line("gp_work->person[gp_work->person_count]->person_id = p.person_id")
 
  if (gp_work->opf)
     if (size(gp_work->opf_person, 5) > 200)
        call gp_add_line("gp_work->person[gp_work->person_count]->weight = gp_work->opf_person[d.seq]->weight")
     else
        call gp_add_line(build("lCnt2 = locateval(lCnt, 1,", value(size(gp_work->opf_person, 5)),
                              ",p.person_id, gp_work->opf_person[lCnt]->person_id)"))
        call gp_add_line("gp_work->person[gp_work->person_count]->weight = gp_work->opf_person[lCnt2]->weight")
     endif
     if (bOpfAnyName = 1)
       if (size(gp_work->opf_person, 5) > 200)
         call gp_add_line("gp_work->person[gp_work->person_count]->any_name_id = gp_work->opf_person[d.seq]->any_name_id")
         ;241999
         call gp_add_line("gp_work->person[gp_work->person_count]->any_name_full = gp_work->opf_person[d.seq]->any_name_full")
       else
         call gp_add_line("gp_work->person[gp_work->person_count]->any_name_id = gp_work->opf_person[lCnt2]->any_name_id")
         ;241999
         call gp_add_line("gp_work->person[gp_work->person_count]->any_name_full = gp_work->opf_person[lCnt2]->any_name_full")
       endif
     endif
  endif
  if (bAnyNameFlag and bAnyNameCall = 1) ;check for true if this is a setup for any name
    if (gp_work->buffer_name = "pm_sch_any_name_hist")
      if (bCheckedHist != TRUE)
            call pm_CheckHistory(null)
      endif
      if (bHistoryOption)
         call gp_add_line("gp_work->person[gp_work->person_count]->any_name_id = pn.person_name_hist_id")
         call gp_add_line("gp_work->person[gp_work->person_count]->any_name_full = pn.name_full") ;241999
      endif
    else
         ;Only bring back non current name codes that are not equal to current.
         call gp_add_line("if (pn.name_type_cd != gp_current and p.name_full_formatted != pn.name_full)")
         call gp_add_line("gp_work->person[gp_work->person_count]->any_name_id = pn.person_name_id")
         call gp_add_line("gp_work->person[gp_work->person_count]->any_name_full = pn.name_full")  ;241999
         call gp_add_line("endif")
    endif
  endif
  call gp_add_line("endif")
  if (i)
    call gp_add_line("endif")
  endif
 
  ;++267873
  if(gp_work->buffer_name = "pm_sch_encounter_alias"  or
     gp_work->buffer_name = "pm_sch_person_alias" or
     gp_work->buffer_name = "pm_sch_phone" or
     gp_work->buffer_name = "pm_sch_home_zipcode")
       call gp_add_line(concat("with nocounter, maxread(p, ", trim(cnvtstring(gp_work->max + 1)), ") go"))
  else
       call gp_add_line(concat("with nocounter, maxqual(p, ", trim(cnvtstring(gp_work->max + 1)), ") go"))
  endif
  ;--267873
 
 
  if (gp_work->debug)
    call gp_dump_buffer(1)
    set trace rdbplan
  endif
  call gp_perform_buffer(1)
  if (gp_work->debug)
    set trace nordbplan
  endif
  if (gp_work->person_count > gp_work->max)
    if (request->opf = 1 and  request->cutoff_mode_flag = 0 and request->threshold = 0)
       call echo("Supress Z status")
    else
       set reply->status_data->status = "Z"
      ;lets remove the exit part, we want to show the max number etc.   ;344225
      ;344225 GO TO  9999_EXIT_PROGRAM 
    endif
  endif
  set gp_work->search_done = 1
end
 
subroutine gp_get_parent_location(gpgpl_child, gpgpl_parent_meaning)
  set gpgpl_parent = 0.0
  set gpgpl_parent_type = 0.0
  set stat = uar_get_meaning_by_codeset(222, nullterm(gpgpl_parent_meaning), 1, gpgpl_parent_type)
  select into "nl:" g.parent_loc_cd
    from location_group g
   where g.child_loc_cd = gpgpl_child
     and g.location_group_type_cd + 0 = gpgpl_parent_type
     and g.active_ind = 1
     and g.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
     and g.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
  detail
    gpgpl_parent = g.parent_loc_cd
  with nocounter
  return(gpgpl_parent)
end
 
subroutine gp_hit_census(gphc_flag)
  if (gp_work->census_filter_ind and gp_work->census_hit = 0)
    set gp_work->census_hit = 1
    if (gphc_flag = 0)
      call gp_add_line("and exists")
      call gp_add_line("(")
      if (gp_work->encounter_hit)
        call gp_add_line("select ed.encntr_id")
        call gp_add_line("from encntr_domain ed")
        call gp_add_line("where ed.encntr_id = e.encntr_id")
      else
        call gp_add_line("select ed.person_id")
        call gp_add_line("from encntr_domain ed")
        call gp_add_line("where ed.person_id = p.person_id")
      endif
    else
      call gp_add_line("and ed.encntr_id = e.encntr_id")
    endif
    call gp_add_line(concat("and ed.encntr_domain_type_cd = ", build(gp_census)))
    if (gp_work->facility_filter_ind)
       call gp_add_line(concat("and ed.loc_facility_cd = ", build(gp_work->facility)))
    endif
    if (gp_work->building_filter_ind)
       call gp_add_line(concat("and ed.loc_building_cd = ", build(gp_work->building)))
    endif
    if (gp_work->location_filter_ind)
       call gp_add_line(concat("and ed.loc_nurse_unit_cd = ", build(gp_work->location)))
    endif
    call gp_add_line("and ed.active_ind = 1")
    call gp_add_line("and ed.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call gp_add_line("and ed.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    if (gphc_flag = 0)
       call gp_add_line(")")
    endif
  endif
end
 
subroutine gp_hit_encounter(gphe_exists)
  if (gp_work->encounter_filter_ind and gp_work->encounter_hit = 0)
    set gp_work->encounter_hit = 1
    if (gphe_exists)
      call gp_add_line("and exists")
      call gp_add_line("(")
      call gp_add_line("select e.person_id")
      call gp_add_line("from encounter e")
      call gp_encounter_alias_from(1)
      call gp_profit_encounter_alias_from(1)
      call gp_encounter_relation_from(1)
      if (gp_work->census_filter_ind and gp_work->census_hit = 0)
         call gp_add_line(", encntr_domain ed")
      endif
      call gp_add_line("where e.person_id = p.person_id")
      call gp_add_line("and e.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
      if (pending_logic_mode)
         call gp_add_line("and exists")
         call gp_add_line("(select ep.encntr_pending_id")
         call gp_add_line("from encntr_pending ep")
         call gp_add_line("where ep.encntr_id = e.encntr_id")
         call gp_add_line("and ep.process_status_flag + 0 = 2)") ;ACTION_IN_PROCESS
      endif
      if (show_pending_person_only_mode)
         call gp_add_line("and exists")
         call gp_add_line("(select ep.encntr_pending_id")
         call gp_add_line("from encntr_pending ep")
         call gp_add_line("where ep.encntr_id = e.encntr_id")
         call gp_add_line("and ep.pending_type_flag = 3")
         call gp_add_line("and ep.process_status_flag + 0 = 2)") ;ACTION_IN_PROCESS
      endif
    endif
    if (gp_work->discharge_date_filter_ind)
       call gp_add_line(concat("and e.disch_dt_tm between cnvtdatetime('",
                                 gp_work->discharge_date_start, "') and ",
                                 "cnvtdatetime('", gp_work->discharge_date_end, "')"))
    endif
    if (gp_work->registration_date_filter_ind)
       call gp_add_line(concat("and e.reg_dt_tm between cnvtdatetime('",
                                 gp_work->registration_date_start, "') and ",
                                 "cnvtdatetime('", gp_work->registration_date_end, "')"))
    endif
    if (gp_work->client_filter_ind)
       call gp_add_line(concat("and e.organization_id + 0 = ", build(gp_work->client)))
    endif
    if (gp_work->encounter_status_filter_ind)
       call gp_add_line(concat("and e.encntr_status_cd + 0 = ", build(gp_work->encounter_status)))
    endif
    if (gp_work->encounter_type_class_filter_ind)
       call gp_add_line(concat("and e.encntr_type_class_cd + 0 = ", build(gp_work->encounter_type_class)))
    endif
    if (gp_work->encounter_type_filter_ind)
       call gp_add_line(concat("and e.encntr_type_cd + 0 = ", build(gp_work->encounter_type)))
    endif
;153467
    if (gp_work->encounter_type_multi_filter_ndx >0)
 	   ;212426if (size(request->filter[encounter_type_multi_filter_ndx].values,5) >0)
 	   if (size(request->filter[gp_work->encounter_type_multi_filter_ndx].values,5) >0)     ;212426
 	     ;212426 call add_line("and e.encntr_type_cd + 0 in (")
 	      call gp_add_line("and e.encntr_type_cd + 0 in (")            ;212426
 	      ;212426for (x=1 to size(request->filter[encounter_type_multi_filter_ndx].values,5))
 	      for (x=1 to size(request->filter[gp_work->encounter_type_multi_filter_ndx].values,5))  ;212426
 	      ;212426 call add_line(request->filter[encounter_type_multi_filter_ndx].values[x].value")
 	      ;212426++
 	          if (x = 1)
 	    	        call gp_add_line(request->filter[gp_work->encounter_type_multi_filter_ndx].values[x].value)
 	          else
 	    	        call gp_add_line(build(",", request->filter[gp_work->encounter_type_multi_filter_ndx].values[x].value))
 	          endif
 	      ;212426--
 	      endfor
 	      ;212426 call add_line(")")
 	      call gp_add_line(")")    ;212426
        endif
    endif
;153467
    if (gp_work->financial_class_filter_ind)
       call gp_add_line(concat("and e.financial_class_cd = ", build(gp_work->financial_class)))
    endif
    if (gp_work->facility_filter_ind)
       call gp_add_line(concat("and e.loc_facility_cd = ", build(gp_work->facility)))
    endif
    if (gp_work->building_filter_ind)
       call gp_add_line(concat("and e.loc_building_cd = ", build(gp_work->building)))
    endif
    if (gp_work->location_filter_ind)
       call gp_add_line(concat("and e.loc_nurse_unit_cd = ", build(gp_work->location)))
    endif
    if (gp_work->medical_service_filter_ind)
       call gp_add_line(concat("and e.med_service_cd = ", build(gp_work->medical_service)))
    endif
;153467
    if (gp_work->medical_service_multi_filter_ndx >0)
       ;212426 if (size(request->filter[medical_service_multi_filter_ndx].values,5) >0)
 	   if (size(request->filter[gp_work->medical_service_multi_filter_ndx].values,5) >0)   ;212426
 	      ;212426 call add_line("and e.encntr_type_cd + 0 in (")
 	      call gp_add_line("and e.med_service_cd + 0 in (")      ;212426
 	      ;212426for (x=1 to size(request->filter[medical_service_multi_filter_ndx].values,5))
 	      for (x=1 to size(request->filter[gp_work->medical_service_multi_filter_ndx].values,5))   ;212426
 	      	;212426 call add_line(request->filter[medical_service_multi_filter_ndx].values[x].value")
 	      	;212426++
 	          if (x = 1)
 	    	        call gp_add_line(request->filter[gp_work->medical_service_multi_filter_ndx].values[x].value)
 	          else
 	    	        call gp_add_line(build(",", request->filter[gp_work->medical_service_multi_filter_ndx].values[x].value))
 	          endif
 	      ;212426--
 	      endfor
 	      ;212426 call add_line(")")
 	      call gp_add_line(")")    ;212426
        endif
    endif
;153467
    if (gp_work->skip_discharged)
       call gp_add_line("and (e.disch_dt_tm >= cnvtdatetime(curdate, curtime3) or e.disch_dt_tm is NULL)")
    endif
    if (gp_work->authorized)
       call gp_add_line(concat("and e.data_status_cd = ", build(gp_authorized)))
    endif
    if (canceled_encounter_mode = 1)
       call gp_add_line("and e.active_ind = 0")
       call gp_add_line("and e.active_status_cd = gp_deleted")
       call gp_add_line("and e.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
       call gp_add_line("and e.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    endif
    if ((gp_work->mode = gp_encounter_mode or gp_work->mode = gp_account_mode
        or gp_work->mode = gp_guarantor_mode or gp_work->mode = gp_patient_mode or gp_work->mode = gp_umdap_guarantor_mode);256118
        and gp_work->security and gp_work->security_hit = 0)
       call gp_add_organizations(1)
       if (gp_work->mode = gp_patient_mode)
           call gp_add_line("and e.active_ind = 1")
           call gp_add_line("and e.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
       endif
    endif
    set gphe_flag = gphe_exists
    if (gp_work->encounter_alias_hit = 0)
      call gp_hit_encounter_alias(gphe_flag)
    endif
    if (gp_work->profit_encounter_alias_hit = 0)
      call gp_hit_profit_encounter_alias(gphe_flag)
    endif
    if (gp_work->encounter_relation_hit = 0)
      call gp_hit_encounter_relation(gphe_flag)
    endif
    if (gp_work->security_hit = 0)
      call gp_hit_security(gphe_flag)
    endif
    if (gp_work->census_hit = 0)
      call gp_hit_census(gphe_flag)
    endif
    if (gp_work->person_hit = 0)
      call gp_add_line("join p")
      call gp_add_line("where p.person_id = e.person_id")
      call gp_hit_person(0)
    endif
    if (gphe_exists)
       call gp_add_line(")")
    endif
  endif
end
 
subroutine gp_hit_encounter_alias(gphea_flag)
  if (gp_work->encounter_alias_filter_count > 0 and gp_work->encounter_alias_hit = 0)
    set gp_work->encounter_alias_hit = 1
    for (gphea_i = 1 to gp_work->encounter_alias_filter_count)
      set gp_work->target = concat("ea", build(gphea_i))
      if (gphea_flag = 0)

      if (gp_work->encounter_ident_filter_ind = 1)                                                                       ;344225
         call echo("encounter_ident_filter")                                                                             ;344225
         call gp_add_line ("and (" )                                                                                     ;344225
         for (  i  = 1  to  gp_work -> encounter_alias_filter_count  )                                                   ;344225
            if ( ( i =1 ) )                                                                                              ;344225
               call parseit(gp_work->encounter_alias_filter[i].alias_low,",")                                            ;344225
     	       for (xx = 1 to size(tmpparseit->qual,5))                                                                  ;344225
                  call gp_add_line ( concat (gp_work -> target , ".alias = '" ,tmpparseit->qual[xx].value,"'" ))         ;344225
	          if (xx < size(tmpparseit->qual,5))                                                                     ;344225
	             call gp_add_line("or")                                                                              ;344225
	          endif                                                                                                  ;344225
	       endfor                                                                                                    ;344225
 	       call gp_add_line(")")                                                                                     ;344225
            endif
			
            if (  canceled_encounter_mode  = 1)                                                                          ;344225
               call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_ind = 0" ))                             ;344225
               call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_status_cd = " ,  build (gp_deleted )))  ;344225
            else                                                                                                         ;344225
               call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_ind = 1" ))                             ;344225
            endif                                                                                                        ;344225
            call gp_add_line ( concat ("and " ,  gp_work -> target ,
                			".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)" ));344225
         endfor                                                                                                          ;344225

      else                                                                                                               ;344225
         call gp_add_line ("and exists" )
         call gp_add_line ("(" )
         call gp_add_line ( concat ("select " ,  gp_work -> target , ".encntr_id" ))
         call gp_add_line ( concat ("from encntr_alias " ,  gp_work -> target ))
         call gp_add_line ( concat ("where " ,  gp_work -> target , ".encntr_id = e.encntr_id" ))
      endif                                                                                                              ;344225

  else
     call gp_add_line(concat("and ", gp_work->target, ".encntr_id = e.encntr_id"))
  endif
 
 if (gp_work->encounter_ident_filter_ind = 1)                                                                            ;344225
    call echo("encounter_ident_filter")
 
    call gp_add_line ("and (" )                                                                                          ;344225
    for (  i  = 1  to  gp_work -> encounter_alias_filter_count  )                                                        ;344225
       if ( ( i =1 ) )                                                                                                   ;344225
          call parseit(gp_work->encounter_alias_filter[i].alias_low,",")                                                 ;344225
    	      for (xx = 1 to size(tmpparseit->qual,5))                                                                   ;344225
                 call gp_add_line ( concat (gp_work -> target , ".alias = '" ,tmpparseit->qual[xx].value,"'" ))          ;344225
	         if (xx < size(tmpparseit->qual,5))                                                                      ;344225
	            call gp_add_line("or")                                                                               ;344225
	         endif                                                                                                   ;344225
	      endfor                                                                                                     ;344225
	   call gp_add_line(")")                                                                                         ;344225
       endif                                                                                                             ;344225

       if (  canceled_encounter_mode = 1 )                                                                               ;344225
          call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_ind = 0" ))                                  ;344225
          call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_status_cd = " ,  build (gp_deleted )))       ;344225
       else                                                                                                              ;344225
          call gp_add_line ( concat ("and " ,  gp_work -> target , ".active_ind = 1" ))                                  ;344225
       endif                                                                                                             ;344225

       call gp_add_line ( concat ("and " ,  gp_work -> target ,
     	   ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)" ))                                                  ;344225

    endfor
 
 else                                                                                                                    ;344225

     call gp_add_line(concat("and trim(", gp_work->target, ".alias) between '",
                                gp_work->encounter_alias_filter[gphea_i]->alias_low, "' and '",
                                gp_work->encounter_alias_filter[gphea_i]->alias_high, "'"))
      call gp_add_line(concat("and ", gp_work->target, ".encntr_alias_type_cd + 0 = ",
                              build(gp_work->encounter_alias_filter[gphea_i]->alias_type_cd)))
      if (gp_work->encounter_alias_filter[gphea_i]->alias_pool_cd > 0.0)
        call gp_add_line(concat("and ", gp_work->target, ".alias_pool_cd + 0 = ",
                                build(gp_work->encounter_alias_filter[gphea_i]->alias_pool_cd)))
      endif
      if (canceled_encounter_mode)
         call gp_add_line(concat("and ", gp_work->target, ".active_ind = 0"))
         call gp_add_line(concat("and ", gp_work->target, ".active_status_cd = ", build(gp_deleted)))
      else
         call gp_add_line(concat("and ", gp_work->target, ".active_ind = 1"))
      endif
      call gp_add_line(concat("and ", gp_work->target, ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)"))
  endif                                                                                                                  ;344225

      if (gphea_flag = 0)
         call gp_add_line(")")
      endif
    endfor
  endif
end
 
;This section will write the select to grab the PFT_ENCNTR_ALIAS.
;The gphpea_flag is used to determine if this is part of a larger select.
subroutine gp_hit_profit_encounter_alias(gphpea_flag)
  if (gp_work->profit_encounter_alias_filter_count > 0 and gp_work->profit_encounter_alias_hit = 0)
    set gp_work->profit_encounter_alias_hit = 1
    for (gphpea_i = 1 to gp_work->profit_encounter_alias_filter_count)
      set gp_work->target = concat("pea", build(gphpea_i))
      if (gphpea_flag = 0)
        call gp_add_line("and exists")
        call gp_add_line("(")
        call gp_add_line(concat("select ", gp_work->target, ".encntr_id"))
        call gp_add_line(concat("from pft_encntr_alias ", gp_work->target))
        call gp_add_line(concat("where ", gp_work->target, ".encntr_id = e.encntr_id"))
      else
        call gp_add_line(concat("and ", gp_work->target, ".encntr_id = e.encntr_id"))
      endif
      call gp_add_line(concat("and trim(", gp_work->target, ".alias) between '",
                                gp_work->profit_encounter_alias_filter[gphpea_i]->alias_low, "' and '",
                                gp_work->profit_encounter_alias_filter[gphpea_i]->alias_high, "'"))
      call gp_add_line(concat("and ", gp_work->target, ".pft_encntr_alias_type_cd + 0 = ",
                              build(gp_work->profit_encounter_alias_filter[gphpea_i]->alias_type_cd)))
      if (gp_work->profit_encounter_alias_filter[gphpea_i]->alias_pool_cd > 0.0)
        call gp_add_line(concat("and ", gp_work->target, ".alias_pool_cd + 0 = ",
                                build(gp_work->profit_encounter_alias_filter[gphpea_i]->alias_pool_cd)))
      endif
      if (canceled_encounter_mode)
        call gp_add_line(concat("and ", gp_work->target, ".active_ind = 0"))
        call gp_add_line(concat("and ", gp_work->target, ".active_status_cd = ", build(gp_deleted)))
      else
        call gp_add_line(concat("and ", gp_work->target, ".active_ind = 1"))
      endif
      call gp_add_line(concat("and ", gp_work->target, ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)"))
      if (gphpea_flag = 0)
         call gp_add_line(")")
      endif
    endfor
  endif
end
 
subroutine gp_hit_encounter_relation(gpher_flag)
  if (gp_work->encounter_relation_filter_ind and gp_work->encounter_relation_hit = 0)
    set gp_work->encounter_relation_hit = 1
    if (gpher_flag = 0)
      call gp_add_line("and exists")
      call gp_add_line("(")
      call gp_add_line("select epr.encntr_id")
      call gp_add_line("from encntr_prsnl_reltn epr")
      call gp_add_line("where epr.encntr_id = e.encntr_id")
    else
      call gp_add_line("and epr.encntr_id = e.encntr_id")
    endif
    call gp_add_line(concat("and epr.encntr_prsnl_r_cd = ", build(gp_work->encounter_relation)))
    call gp_add_line(concat("and epr.prsnl_person_id = ", build(gp_work->user_id)))
    if (canceled_encounter_mode)
       call gp_add_line("and epr.active_ind = 0")
       call gp_add_line("and epr.active_status_cd = gp_deleted")
    else
       call gp_add_line("and epr.active_ind = 1")
    endif
    call gp_add_line("and epr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call gp_add_line("and epr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    if (gpher_flag = 0)
       call gp_add_line(")")
    endif
  endif
end
 
subroutine gp_hit_maiden_name(gphmn_dummy)
  if (gp_work->maiden_name_filter_ind and gp_work->maiden_name_hit = 0)
    set gp_work->maiden_name_hit = 1
    call gp_add_line("and exists")
    call gp_add_line("(")
    call gp_add_line("select pn.person_id")
    call gp_add_line("from person_name pn")
    call gp_add_line("where pn.person_id = p.person_id")
    call gp_add_line(concat("and pn.name_type_cd = ", build(gp_maiden)))
    ;++243513
    if (bCnvtNLS = FALSE)
      call gp_add_line(concat("and trim(pn.name_last_key, 3) between '",
                              gp_work->maiden_name_low, "' and '", gp_work->maiden_name_high, "'"))
    else
      call gp_add_line(concat("and cnvtnls(trim(pn.name_last_key, 3)) between '",
                       gp_work->maiden_name_low, "' and '", gp_work->maiden_name_high, "'"))
    endif
    ;--243513
    call gp_add_line("and pn.active_ind = 1")
    call gp_add_line("and pn.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call gp_add_line("and pn.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    call gp_add_line(")")
  endif
end
 
subroutine gp_hit_patient(gphp_dummy)
  if (gp_work->mode = gp_patient_mode and gp_work->patient_filter_ind = 0 and gp_work->patient_hit = 0)
    set gp_work->patient_hit = 1
    call gp_add_line("and exists")
    call gp_add_line("(")
    call gp_add_line("select mrn.person_id")
    call gp_add_line("from person_alias mrn")
    call gp_add_line("where mrn.person_id = p.person_id")
    call gp_add_line("and trim(mrn.alias) > ' '")
    call gp_add_line(concat("and mrn.person_alias_type_cd in (", build(gp_mrn), ", ", build(gp_cmrn), ")"))
    call gp_add_line("and mrn.active_ind = 1")
    ;301657 call gp_add_line("and mrn.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    ;301657call gp_add_line("and mrn.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    call gp_add_line("and mrn.beg_effective_dt_tm +0 <= cnvtdatetime(curdate, curtime3)") ;301657
    call gp_add_line("and mrn.end_effective_dt_tm +0 > cnvtdatetime(curdate, curtime3)")  ;301657
    call gp_add_line(")")
 
    ;221381++
    ;if (bPatsNoEncntrs != TRUE)  ;136709
    ;   if (gp_work->security and gp_work->security_hit = 0)
    ;      if (gp_work->encounter_hit = 0)
    ;         set gp_work->encounter_filter_ind = 1
    ;         call gp_hit_encounter(1)
    ;      endif
    ;   endif
    ;endif  ;136709
    ;221381--
 
  endif
end
 
subroutine gp_hit_person(gphp_skip_birthdate)
  if (gp_work->person_hit = 0)
    set gp_work->person_hit = 1
    if (textlen(trim(gp_name_hit,3)) > 0)    ;if gp_name_hit is filled out with either 'where' or 'and'.
      ;Determine how we should start the where clause (first name vs. last name)
      if (gp_work->first_name_filter_ind)
        if (gp_work->last_name_partial and gp_work->first_name_partial = 0)
          set gp_work->first_name_first = 1
        else
          ;164846 if (size(gp_work->first_name) > size(gp_work->last_name))
          if ((size(gp_work->first_name) > size(gp_work->last_name))
            and (gp_work->last_name_partial = gp_work->first_name_partial)) ;164846
 
 
              ;+292506 - Moved mod 262692 down here
              declare m_dFavorPartialNameCodeValue          = f8 with noconstant(0.0)
              declare m_sFavorPartialName                   = vc with noconstant("")
 
              set m_dFavorPartialNameCodeValue = uar_get_code_by("MEANING", 20790, "FAVORNAME")
 
              if (m_dFavorPartialNameCodeValue > 0.0)
                 select into "nl:"
                  from code_value_extension cve
                   where cve.code_value = m_dFavorPartialNameCodeValue
                     and cve.field_name = "OPTION"
                  detail
                    m_sFavorPartialName = cnvtupper(trim(cve.field_value, 3))
                 with nocounter
              endif  ;if (m_dFavorPartialNameCodeValue > 0.0)
              ;-292506
 
 
            ;262692b if (m_sFavorPartialName = "" or m_sFavorPartialName = "F") ;262692
            if (m_sFavorPartialName = "" or m_sFavorPartialName = "F" or size(gp_work->last_name) <= 0) ;262692b
              set gp_work->first_name_first = 1
            endif ;262692
          endif
        endif
      endif
      ;Start the where clause
      if (gp_work->first_name_first)
        if (gp_work->first_name_filter_ind) ;175037
          if (gp_work->first_name_partial)
            call gp_add_line(concat(gp_name_hit, " p.name_first_key between '", gp_work->first_name_start,
                                  "' and '", gp_work->first_name_end, "'"))
            set bFirstNameFilled = TRUE ;175037
          ;175037 else
          elseif (textlen(trim(gp_work->first_name,3)) > 0) ;175037
            call gp_add_line(concat(gp_name_hit, " p.name_first_key = '", gp_work->first_name, "'"))
            set bFirstNameFilled = TRUE ;175037
          endif
        endif ;175037
        if (gp_work->last_name_filter_ind)
          if (bFirstNameFilled) ;175037
            if (gp_work->last_name_partial)
              ;164846 call gp_add_line(concat("and p.name_last_key between '", gp_work->last_name_start,
              ;++243513
              if (bCnvtNLS = FALSE)
                call gp_add_line(concat("and trim(p.name_last_key,3) between '", gp_work->last_name_start, ;164846
                                        "' and '", gp_work->last_name_end, "'"))
              else
                call gp_add_line(concat("and cnvtnls(trim(p.name_last_key,3)) between '", gp_work->last_name_start,
                                        "' and '", gp_work->last_name_end, "'"))
              endif
              ;--243513
            ;175037 else
            elseif (textlen(trim(gp_work->last_name,3)) > 0) ;175037
              ;164846 call gp_add_line(concat("and p.name_last_key = '", gp_work->last_name, "'"))
 
              call gp_add_line(concat("and trim(p.name_last_key,3) = '", gp_work->last_name, "'")) ;164846
 
            endif
          ;175037++
          else ;bFirstNameFilled = FALSE
            if (gp_work->last_name_partial)
              call gp_add_line(concat(gp_name_hit, " p.name_last_key between '", gp_work->last_name_start,
                                    "' and '", gp_work->last_name_end, "'"))
            elseif (textlen(trim(gp_work->last_name,3)) > 0)
              call gp_add_line(concat(gp_name_hit, " p.name_last_key = '", gp_work->last_name, "'"))
            endif
          endif
          ;175037--
        endif
      else ;when gp_work->first_name_first = 0
        if (gp_work->last_name_filter_ind)  ;175037
          if (gp_work->last_name_partial)
            call gp_add_line(concat(gp_name_hit, " p.name_last_key between '", gp_work->last_name_start,
                                  "' and '", gp_work->last_name_end, "'"))
            set bLastNameFilled = TRUE ;175037
          ;175037 else
          elseif (textlen(trim(gp_work->last_name,3)) > 0) ;175037
            call gp_add_line(concat(gp_name_hit, " p.name_last_key = '", gp_work->last_name, "'"))
            set bLastNameFilled = TRUE ;175037
          endif
        endif ;175037
        if (gp_work->first_name_filter_ind)
          if (bLastNameFilled) ;175037
            if (gp_work->first_name_partial)
              ;164846 call gp_add_line(concat("and p.name_first_key between '", gp_work->first_name_start,
              ;++243513
              if (bCnvtNLS = FALSE)
                call gp_add_line(concat("and trim(p.name_first_key,3) between '", gp_work->first_name_start, ;164846
                                        "' and '", gp_work->first_name_end, "'"))
              else
                call gp_add_line(concat("and cnvtnls(trim(p.name_first_key,3)) between '", gp_work->first_name_start,
                                        "' and '", gp_work->first_name_end, "'"))
              endif
              ;--243513
            ;175037 else
            elseif (textlen(trim(gp_work->first_name,3)) > 0) ;175037
              ;164846 call gp_add_line(concat("and p.name_first_key = '", gp_work->first_name, "'"))
 
              call gp_add_line(concat("and trim(p.name_first_key,3) = '", gp_work->first_name, "'")) ;164846
 
            endif
          ;175037++
          else ;bLastNameFilled = FALSE
            if (gp_work->first_name_partial)
              call gp_add_line(concat(gp_name_hit, " p.name_first_key between '", gp_work->first_name_start,
                                    "' and '", gp_work->first_name_end, "'"))
            elseif (textlen(trim(gp_work->first_name,3)) > 0)
              call gp_add_line(concat(gp_name_hit, " p.name_first_key = '", gp_work->first_name, "'"))
            endif
          endif
          ;175037--
        endif
      endif
 
      ;Add middle name, as necessary
      if (gp_work->middle_name_filter_ind)
        ;++243513
        if (bCnvtNLS = FALSE)
          call gp_add_line(concat("and trim(p.name_middle_key, 3) between '",
                                   gp_work->middle_name_low, "' and '", gp_work->middle_name_high, "'"))
        else
          call gp_add_line(concat("and cnvtnls(trim(p.name_middle_key, 3)) between '",
                                  gp_work->middle_name_low, "' and '", gp_work->middle_name_high, "'"))
        endif
        ;--243513
      endif
    endif
	if (gp_work->age_filter_ind)
		call gp_add_line(concat("and p.birth_dt_tm + 0 between cnvtdatetime(cnvtagedatetime(", gp_work->age_start, ")) ",
                           "and cnvtdatetime(cnvtdate(cnvtagedatetime(", gp_work->age_end, ")),235959)")) 
	endif
    if (gphp_skip_birthdate != 1)
      if (gp_work->birth_date_filter_ind)
        if (curutc)
          call gp_add_line(concat("and p.abs_birth_dt_tm between cnvtdatetimeutc('", gp_work->birth_date_start, "',0) and ",
                                  "cnvtdatetimeutc('", gp_work->birth_date_end, "',0)"))
        else
          call gp_add_line(concat("and p.birth_dt_tm between cnvtdatetime('", gp_work->birth_date_start, "') and ",
                                  "cnvtdatetime('", gp_work->birth_date_end, "')"))
        endif
      endif
    endif
    if (gp_work->mothers_maiden_name_filter_ind)
      ;311010 - Rolled back to remove cnvtnls use
      call gp_add_line(concat("and cnvtupper(trim(p.mother_maiden_name, 3)) between '",
                               gp_work->mothers_maiden_name_low, "' and '", gp_work->mothers_maiden_name_high, "'"))
    endif
    if (gp_work->vip_filter_ind)
       call gp_add_line(concat("and p.vip_cd = ", build(gp_work->vip)))
    endif
;336780    if (gp_work->race_filter_ind)
;336780       call gp_add_line(concat("and p.race_cd = ", build(gp_work->race)))
;336780    endif
    if (gp_work->deceased_filter_ind)
       call gp_add_line(concat("and p.deceased_cd = ", build(gp_work->deceased)))
    endif
    if (gp_work->gender_filter_ind)
       call gp_add_line(concat("and p.sex_cd = ", build(gp_work->gender)))
    endif
    if (gp_work->person_type_filter_ind)
       call gp_add_line(concat("and p.person_type_cd = ", build(gp_work->person_type)))
    endif
    if (gp_work->archive_filter_ind)
       call gp_add_line(concat("and p.archive_status_cd = ", build(gp_work->archive_cd)))
    endif
     call gp_add_line("and p.ft_entity_id = 0")
     if (gp_work->deceased_dt_tm_filter_ind)
         call gp_add_line(concat("and p.deceased_dt_tm between cnvtdatetime('", gp_work->deceased_dt_tm_start, "') and ",
                                  "cnvtdatetime('", gp_work->deceased_dt_tm_end, "')"))
    endif
    call gp_add_line("and p.active_ind = 1")
    call gp_add_line("and p.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call gp_add_line("and p.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    if(not bSearchAllLogicalDomains) ;146495
    ;+129148
    ;+125258
    ;if (bLogicalDomain > 0) ;Verify column exists
    ;    set dLogicalDomain = get_logical_domain("PERSON")
    ;    call gp_add_line(build2("and p.logical_domain_id = ", build(dLogicalDomain)))
    ;endif
    ;-125258
    
     ;319008  ***********************************************************************************************************
     ;319008  NOTE:  Any changes to logical domains in this section may apply to subroutine set_logical_domain_parser_cmd
     ;319008  ***********************************************************************************************************
      set bLDStatus = get_logical_domains("PERSON")
      if(bLDStatus = LD_SUCCESS)
        set lExpandSize = size(logical_domains->qual,5)
        if(lExpandSize > 1)
          call gp_add_line(build("and expand(lExpandCnt, 1,", lExpandSize,
                                 ",p.logical_domain_id, logical_domains->qual[lExpandCnt]->logical_domain_id)"))
        else
          call gp_add_line(build2("and p.logical_domain_id = ", build(logical_domains->qual[1].logical_domain_id)))
        endif
      else
        if(bLDStatus != LD_NO_SCHEMA)
          set reply->status_data->operationname = "get_logical_domains"
          set reply->status_data->subeventstatus[1]->operationstatus = "F"
          set reply->status_data->subeventstatus[1]->targetobjectname = "pm_sch_get_persons"
          set reply->status_data->subeventstatus[1]->targetobjectvalue = "Error occurred while retrieving user's logical domains"
          set reply->status_data->status = "F"
          go to 9999_EXIT_PROGRAM
        endif
      endif
    ;-129148
 
 
    ;+292506
    if (gp_work->mode = gp_person_guarantor_mode)
       call gp_hit_person_person_relation(0)
    endif
    ;-292506
 
 
    endif ;146495
    if (gp_work->person_alias_hit = 0)
        call gp_hit_person_alias(0)
    endif
    if (gp_work->patient_hit = 0)
      call gp_hit_patient(0)
    endif
    if (gp_work->maiden_name_hit = 0)
      call gp_hit_maiden_name(0)
    endif
    if (gp_work->person_relation_hit = 0)
      call gp_hit_person_relation(0)
    endif
    if (gp_work->encounter_hit = 0)
      call gp_hit_encounter(1)
    endif
    if (gp_work->census_hit = 0)
      call gp_hit_census(0)
    endif
    ;~Call gp_hit_encntr_person_relation if PMSearch is in ProFit's guarantor mode.  This will filter
    ;~the person results to only those that have a person/encounter relation of guarantor or default
    ;~guarantor.
    if ((gp_work->mode = gp_guarantor_mode or gp_work->mode = gp_umdap_guarantor_mode) ;256118
        and gp_work->encntr_person_relation_hit = 0)
      call gp_hit_encntr_person_relation(0)
    endif
    if (gp_work->home_address_hit = 0 and gp_work->home_address_filter_ind = 1)
       call gp_hit_home_address(0)
    endif

    ;344225 if ( ( gp_work -> phone_hit =0 ) and ( gp_work -> phone_filter_ind = 1))
    if ( ( gp_work -> phone_hit =0 ) and ( gp_work -> phone_filter_ind = 1  or gp_work -> phone_filter_ind = 1097) )   ;344225
       call gp_hit_phone (0 )
    endif	
 
    if (gp_work->phone_hit = 0 and gp_work->phone_filter_ind = 1)
       call gp_hit_phone(0)
    endif
    if (gp_work->home_address_hit = 0  and gp_work->paf_key_filter_ind = 1)
        call gp_hit_home_address(0)
    endif
    ;336780+
    if (gp_work->race_hit = 0 and gp_work->race_filter_ind = 1)
      call gp_hit_race(0)
    endif
    ;336780-
    ;221381++
    if (bPatsNoEncntrs != TRUE and gp_work->mode = gp_patient_mode)
       if (gp_work->security and gp_work->security_hit = 0)
          if (gp_work->encounter_hit = 0)
             set gp_work->encounter_filter_ind = 1
             call gp_hit_encounter(1)
          endif
       endif
    endif
    ;221381--
 
  endif
end
 
subroutine gp_hit_person_alias(gphpa_dummy)
  if (validate(buffer, "ZZZ") = "ZZZ")
     declare buffer    = vc   with private, noconstant (" ")
     declare tempBuff  = vc   with private, noconstant (" ")
  else
     set buffer = " "
     set tempBuff = " "
  endif

 if (gp_work->person_alias_filter_count > 0 and gp_work->person_alias_hit = 0)

   if (gp_work->person_ident_filter_ind = 1) ;344225
      ;344225 ++
      call echo("person identifier filter mode")
      call gp_add_line ("and exists" )
      call gp_add_line ("(" )
      call gp_add_line ( "select pa.person_id" )
      call gp_add_line ( "from person_alias pa")
      call gp_add_line ( "where pa.person_id = p.person_id" )
      for (  i  = 1  to  gp_work -> person_alias_filter_count  )
         call parseit(gp_work->person_alias_filter[i].alias_low,",")
         call gp_add_line ( "and (")
         for (xx = 1 to size(tmpparseit->qual,5))
            call gp_add_line ( concat ("pa.alias = '" ,tmpparseit->qual[xx].value,"'" ))
	    if (xx < size(tmpparseit->qual,5))
	       call gp_add_line("or")
	    endif
	 endfor
	 call gp_add_line(")")
      ;344225--
     endfor
     call gp_add_line (")" )
else                                         ;344225
    set gp_work->person_alias_hit = 1
    for (gphpa_i = 1 to gp_work->person_alias_filter_count)
      if (gp_work->person_alias_filter[gphpa_i]->meaning != "SSN" or gp_work->ssn_filter_ind = 1)
        set gp_work->target = concat("pa", trim(cnvtstring(gphpa_i), 3))
        call gp_add_line("and exists")
        call gp_add_line("(")
        call gp_add_line(concat("select ", gp_work->target, ".person_id"))
        call gp_add_line(concat("from person_alias ", gp_work->target))
        call gp_add_line(concat("where ", gp_work->target, ".person_id = p.person_id"))
        call gp_add_line(concat("and trim(", gp_work->target, ".alias) between '",
                                gp_work->person_alias_filter[gphpa_i]->alias_low, "' and '",
                                gp_work->person_alias_filter[gphpa_i]->alias_high, "'"))
        call gp_add_line(concat("and ", gp_work->target, ".person_alias_type_cd + 0 = ",
                                build(gp_work->person_alias_filter[gphpa_i]->alias_type_cd)))
 
        if (gp_work->person_alias_filter[gphpa_i]->alias_pool_cd > 0.0)
           call gp_add_line(concat("and ", gp_work->target, ".alias_pool_cd + 0 = ",
                                  build(gp_work->person_alias_filter[gphpa_i]->alias_pool_cd)))
        endif
        ;building a quantifier buffer for alias_pool list.
        set TotalSize = size(gp_work->person_alias_filter[gphpa_i]->alias_pool, 5 )
        if (TotalSize > 0 )
           ;208504 set buffer = concat (buffer, "(" )
           set buffer = "("     ;208504
           for ( k = 1 to TotalSize )
               if (gp_work->person_alias_filter[gphpa_i]->alias_pool[k]->alias_pool_cd > 0.0 )
                  set tempBuff = build(gp_work->person_alias_filter[gphpa_i]->alias_pool[k]->alias_pool_cd)
                  set buffer = concat (buffer, tempBuff)
                  if ( k < TotalSize )
                     set buffer = concat (buffer , ",")
                  endif
               endif
           endfor
           set buffer = concat (buffer, ")" )
           if ( textlen (trim(buffer,3) ) > 2 )
              call gp_add_line (concat(concat("and ", gp_work->target, ".alias_pool_cd in" ), buffer))
           endif
        endif
        call gp_add_line(concat("and ", gp_work->target, ".active_ind = 1"))
        call gp_add_line(concat("and ", gp_work->target, ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)"))
        call gp_add_line(")")
      endif
    endfor
  
  endif   ;344225

endif     
  
end
 
;~The purpose of this subroutine is to add a qualification on the encntr_person_reltn table
;~to limit the persons returned to only those that have a relation type of guarantor or
;~default guarantor.  This will only occur when the script is called in ProFit's account
;~mode.
subroutine gp_hit_encntr_person_relation(gphepr_dummy)
  if (gp_work->mode = gp_guarantor_mode and gp_work->encntr_person_relation_hit = 0)
     set gp_work->encntr_person_relation_hit = 1
     call gp_add_line("and exists")
     call gp_add_line("(")
     call gp_add_line("select enpr.related_person_id")
     call gp_add_line("from encntr_person_reltn enpr")
     call gp_add_line(", pft_encntr per") ;111184
     call gp_add_line(", account act") ;111184
     call gp_add_line("where enpr.related_person_id = p.person_id")
     call gp_add_line("and enpr.person_reltn_type_cd in (gp_def_guarantor_cd, gp_guarantor_cd)")
     call gp_add_line("and enpr.active_ind = 1")
     call gp_add_line("and enpr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
     call gp_add_line("and enpr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
     call gp_add_line("and per.encntr_id = enpr.encntr_id") ;111184
     call gp_add_line("and per.active_ind = 1") ;111184
     call gp_add_line("and act.acct_id = per.acct_id") ;111184
     call gp_add_line("and act.acct_type_cd = gp_ar_acct_type_cd") ;111184
     call gp_add_line("and act.acct_sub_type_cd = gp_patient_sub_type_cd");111184
     call gp_add_line("and act.active_ind = 1") ;111184
     call gp_add_line(")")
     ;256118++
  elseif (gp_work->mode = gp_umdap_guarantor_mode and gp_work->encntr_person_relation_hit = 0)
     set gp_work->encntr_person_relation_hit = 1
     call gp_add_line("and exists")
     call gp_add_line("(")
     call gp_add_line("select enpr.related_person_id")
     call gp_add_line("from encntr_person_reltn enpr")
     call gp_add_line("where enpr.related_person_id = p.person_id")
     call gp_add_line("and enpr.person_reltn_type_cd in (gp_def_guarantor_cd, gp_guarantor_cd)")
     call gp_add_line("and enpr.active_ind = 1")
     call gp_add_line("and enpr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
     call gp_add_line("and enpr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
     call gp_add_line(")")
    ;256118--
  endif
end
 
 
;+292506
;The purpose of this subroutine is to add a qualification on the person_person_reltn table
;  for the person result to also be a guarantor of at least one other person.
subroutine gp_hit_person_person_relation(gphppr_dummy)
  if (gp_work->mode = gp_person_guarantor_mode and gp_work->person_person_relation_hit = 0)
     set gp_work->person_person_relation_hit = 1
 
     call gp_add_line("join ppr")
     call gp_add_line("where ppr.related_person_id = p.person_id")
     call gp_add_line("and ppr.person_reltn_type_cd in (gp_def_guarantor_cd, gp_guarantor_cd)")
     call gp_add_line("and ppr.active_ind = 1")
     call gp_add_line("and ppr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
     call gp_add_line("and ppr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
     call gp_add_line("join p2")
     call gp_add_line("where p2.person_id = ppr.person_id")
     call gp_add_line("and p2.ft_entity_id = 0")
     call gp_add_line("and p2.active_ind = 1")
  endif
end
;-292506
 
 
subroutine gp_hit_person_relation(gphpr_dummy)
  if (gp_work->person_relation_filter_ind and gp_work->person_relation_hit = 0)
    set gp_work->person_relation_hit = 1
    call gp_add_line("and exists")
    call gp_add_line("(")
    call gp_add_line("select ppr.person_id")
    call gp_add_line("from person_prsnl_reltn ppr")
    call gp_add_line("where ppr.person_id = p.person_id")
    call gp_add_line(concat("and ppr.person_prsnl_r_cd = ", build(gp_work->person_relation)))
    call gp_add_line(concat("and ppr.prsnl_person_id = ", build(gp_work->user_id)))
    call gp_add_line("and ppr.active_ind = 1")
    call gp_add_line("and ppr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call gp_add_line("and ppr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    call gp_add_line(")")
  endif
end
 
subroutine gp_hit_security(gphs_flag)
  if ((gp_work->mode = gp_encounter_mode or gp_work->mode = gp_account_mode or gp_work->mode = gp_guarantor_mode
   or gp_work->mode = gp_umdap_guarantor_mode) ;256118
   and gp_work->security and gp_work->security_hit = 0)
    set gp_work->security_hit = 1
  endif
end
 
subroutine gp_perform_buffer(gppb_dummy)
  for (gppb_i = 1 to gp_work->buffer_count)
      call parser(gp_work->buffer[gppb_i]->text, 1)
      if (gp_work->debug)
         call echo(gp_work->buffer[gppb_i]->text)
      endif
  endfor
end
 
subroutine gp_hit_home_address(gphha_flag)
;zipcode search
   set gp_work->home_address_hit = 1
   ;search for the zipcode passed in
   call gp_add_line("and exists")
   call gp_add_line("(")
   call gp_add_line("select a.parent_entity_id")
   call gp_add_line("from address a")
   call gp_add_line("where a.parent_entity_id = p.person_id")
   call gp_add_line(concat("and a.address_type_cd = ", build(gp_address)))
   if (gp_work->home_address_filter_ind = 1 )
       if (gp_work->home_zip_code_partial = 1)
          call gp_add_line(concat("and a.zipcode_key between '",
                                  gp_work->home_zip_code_start, "' and '",
                                  gp_work->home_zip_code_end, "'"))
       else
          call gp_add_line(concat("and a.zipcode_key = '", trim(gp_work->home_zip_code, 3), "'"))
       endif
   endif
   if (gp_work->paf_key_filter_ind = 1)
      if (gp_work->paf_key_partial = 1)
          call gp_add_line(concat("and a.postal_identifier_key between '",
                                  gp_work->paf_key_start, "' and '",
                                  gp_work->paf_key_end, "'"))
       else
          call gp_add_line(concat("and a.postal_identifier_key = '", trim(gp_work->paf_key, 3), "'"))
       endif
   endif
   call gp_add_line("and a.active_ind = 1")
   call gp_add_line("and a.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
   call gp_add_line("and a.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
   call gp_add_line(")")
end
 
subroutine gp_hit_phone(gphha_flag)
;phone search
   set gp_work->phone_hit = 1
   ;search for the phone passed in
   ;call gp_start_exists(0)  ;109976
   call gp_add_line("and exists")
   call gp_add_line("(")
   call gp_add_line("select ph.parent_entity_id")
   call gp_add_line("from phone ph")
   call gp_add_line("where ph.parent_entity_id = p.person_id")
;344225 if ( gp_work -> phone_filter_ind =1 ) 

   ;344225 ++
   if (gp_work -> phone_filter_ind =1 or gp_work->phone_filter_ind = 1097)                      
      call gp_add_line(concat("and ph.phone_num_key = '*", trim(gp_work->phone_num, 3), "*'"))
	  
      if ( gp_work -> phone_filter_ind =1097 )    
         if (findstring(char(gp_quote),gp_work -> phone_num,1) = 0 )                        
            call gp_add_line ( concat ("and ph.phone_num_key = '",  trim ( gp_work -> phone_num , 3 ),"'"))  
         else
            call gp_add_line ( concat ("and ph.phone_num_key = '" ,  trim ( cnvtalphanum(gp_work -> phone_num) , 3 ), "'" )) 
         endif
      endif   
   endif
   ;344225 --
   
   call gp_add_line("and ph.active_ind = 1")
   call gp_add_line("and ph.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
   call gp_add_line("and ph.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
   ;call gp_add_line("and ph.parent_entity_name = 'PERSON'")  ;108251
   call gp_add_line("and ph.parent_entity_name in ('PERSON','PERSON_PATIENT')")
   call gp_add_line(")")
end
;336780+
subroutine gp_hit_race(gphr_dummy)
   set gp_work->race_hit = 1
 
   call gp_add_line("and (exists")
   call gp_add_line("(")
   call gp_add_line("select pcvr.code_value")
   call gp_add_line("from person_code_value_r pcvr")
   call gp_add_line("where pcvr.person_id = p.person_id")
   call gp_add_line(concat("and pcvr.code_value = ", build(gp_work->race)))
   call gp_add_line(concat("and pcvr.code_set = ", build(RACE_CODESET)))
   call gp_add_line("and pcvr.active_ind = 1")
   call gp_add_line("and pcvr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
   call gp_add_line("and pcvr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
   call gp_add_line(concat(") or p.race_cd = ", build(gp_work->race)))
   call gp_add_line(")")
   
end
;336780-

subroutine gp_add_organizations(o_dummy)
 set lTotal = size(userOrgs->organizations,5)
  ;120868+  Commenting out old block
;  if(lTotal>0)
;
;    for (lCnt = 1 to lTotal)
;       if (lCnt = 1)
;         call gp_add_line(build("and e.organization_id + 0 in (",userOrgs->organizations[lCnt].organization_id))
;       else
;         call gp_add_line(build(", ",userOrgs->organizations[lCnt].organization_id))
;       endif
;    endfor
;
;    call gp_add_line(")")
;  endif
  if (lTotal > 0)
    call gp_add_line("and (")
  endif
  set lOffset = 0
  while (lTotal > 0)
    ; Add "in" clauses in batches of 250
    if (lTotal > 250)
      set lLimit = 250
    else
      set lLimit = lTotal
    endif
    ; Build the "in" clause.  Note the first gp_add_line call is moved outside the loop
    ; so that an if statement doesn't have to be executed on every iteration, as above.
    call gp_add_line(build("e.organization_id + 0 in (", userOrgs->organizations[lOffset + 1].organization_id))
    for (lCnt = 2 to lLimit)
      call gp_add_line(build(",", userOrgs->organizations[lOffset + lCnt].organization_id))
    endfor
    call gp_add_line(")")
    ; Decrement the total and increment the offset.
    ; If there's going to be another batch, OR the "in" clauses together
    set lTotal = lTotal - lLimit
    set lOffset = lOffset + lLimit
    if (lTotal > 0)
      call gp_add_line(" or ")
    else
      call gp_add_line(")") ;  Close the and( opened above the while loop
    endif
 
  endwhile
  ;120868-
end

;319008++
subroutine set_logical_domain_parser_cmd(personTableAlias)
/*
Purpose: Based on logical domain functionality determine person table qualification for logical_domain_id
Parameter: personTableAlias - person table alias
Return: The parser command to validate logical_domain_id in CCL select statement on person table

**********************************************************************************************************************
NOTE:  Any changes to the logic in this subroutine may apply to the logical domain section in gp_hit_person subroutine
**********************************************************************************************************************

*/
  declare sReturnParser = vc with noconstant("1 = 1"),privateprotect
  
  if (textlen(trim(personTableAlias,3)) > 0)
     if(not bSearchAllLogicalDomains)
        set bLDStatus = get_logical_domains("PERSON")
        if(bLDStatus = LD_SUCCESS)  
           set sReturnParser = build2(trim(personTableAlias,3),".logical_domain_id = ", 
                                      build(logical_domains->qual[1].logical_domain_id))
        else
           if(bLDStatus != LD_NO_SCHEMA)
              set reply->status_data->operationname = "get_logical_domains"
              set reply->status_data->subeventstatus[1]->operationstatus = "F"
              set reply->status_data->subeventstatus[1]->targetobjectname = "pm_sch_get_persons"
              set reply->status_data->subeventstatus[1]->targetobjectvalue="Error occurred while retrieving user's logical domains"
              set reply->status_data->status = "F"
              go to 9999_EXIT_PROGRAM
           endif
        endif
     endif
  endif
  call echo(build("set_logical_domain_parser_cmd = ",sReturnParser))
  return(sReturnParser)
end
;319008-- 
;end of Subroutines
;**************************************************************************************************
 
 
#9999_EXIT_PROGRAM
 
  ;+292506
  if (gp_work->debug)
     call echorecord(reply)
  endif
  ;-292506
 
  call uar_i18nalphabet_end(lHandle);107485
  free record logical_domains ;129148
end
go
 
 

;Generated by GNU enscript 1.6.4.
