 ;;Solution_Test/script/Person Management/PMSearch/PM_SCH_GET_ENCOUNTERS.PRG Turn on black mode

  drop program PM_SCH_GET_ENCOUNTERS:dba go
create program PM_SCH_GET_ENCOUNTERS:dba
 
/****************************************************************************
 *                                                                          *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &            *
 *                              Technology, Inc.                            *
 *       Revision      (c) 1984-1998 Cerner Corporation                     *
 *                                                                          *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.             *
 *  This material contains the valuable properties and trade secrets of     *
 *  Cerner Corporation of Kansas City, Missouri, United States of           *
 *  America (Cerner), embodying substantial creative efforts and            *
 *  confidential information, ideas and expressions, no part of which       *
 *  may be reproduced or transmitted in any form or by any means, or        *
 *  retained in any storage or retrieval system without the express         *
 *  written permission of Cerner.                                           *
 *                                                                          *
 *  Cerner is a registered mark of Cerner Corporation.                      *
 *                                                                          *
 *                                                                          *
 ****************************************************************************
 
          Date Written:       07/22/98
          Source file name:   PM_SCH_GET_ENCOUNTERS
          Object name:        PM_SCH_GET_ENCOUNTERS
          Request #:          100041
 
          Product:            Person Management
          Product Team:       Person Management
          HNA Version:        V500
          CCL Version:
 
          Program purpose:    Searches for a list of encounters best
                              matching the given search criteria.
                              Returns all encounters found as well
                              as requested information for each
                              encounter.
 
          Tables read:
          Tables updated:
          Executing from:
          Special Notes:
 
 ***********************************************************************
 *                  GENERATED MODIFICATION CONTROL LOG                 *
 ***********************************************************************
 *                                                                     *
 *Mod Date     Engineer             Comment                            *
 *--- -------- -------------------- -----------------------------------*
  000 07/22/98 Darryl Shippy        Initial release
  001 10/07/98 Darryl Shippy        Added the use of alias pools
  002 10/07/98 Darryl Shippy        Corrected location logic
  003 10/23/98 Darryl Shippy        Added facility/building logic
  004 11/02/98 Darryl Shippy        Allow hide of discharged patients
  005 11/09/98 Darryl Shippy        Added ORAHINT for ENCOUNTER table
  006 04/08/99 Darryl Shippy        Added custom filter script logic
  007 04/19/99 Darryl Shippy        Added admit type result
  008 09/10/99 Darryl Shippy        Added authorized encounter option
  009 10/08/99 Darryl Shippy        Added discharge backdate option
  010 01/27/00 Darryl Shippy        Removed ORAHINT
  011 05/02/00 Darryl Shippy        Allow text query caching
  012 05/05/00 Darryl Shippy        Added canceled encounter mode
  013 08/04/00 Robert Farr          Added pending logic mode
  014 01/02/01 Robert Farr          Added LimitEncounterResult filters
 D015 04/05/01 Bill White           Added billing entity return
 D016 04/24/01 Robert Farr          Fixed issue with LimitEncounterResults when num_days = 0.
 D017 05/11/01 Robert Farr          Resolved issue where LimitEncounter would show discharge encounters it shouldn't.
 D019 07/06/01 Kim Wesley           Add program service and unit to the reply
 sc018 05/15/01 S. Muehlmeier        Added pending arrival logic
 JC020 09/12/01 Jeremy Crocker		Removed direct reads from code_value table and replaced with uar fcn.  Also remove outerjoin/
                                    dontcare with Oracle outerjoin.
 ZS021 10/22/02 Zaheer Saeed         Add reply string to satisfy hippa auditing requirements
 JC022 06/22/03 Jeremy Crocker      Added check around dummyt tables
***********************************************************************************************************************
Mod   Feature Date     Engineer        Comment
----- ------- -------- --------------  --------------------------------------------------------------------------------
ZS023  35387  08/01/03 Zaheer Saeed    Added code to validate ccldminfo record structure to avoid calls to dm_info table
 VI024  35684  08/27/03 Venkata Indla   Added code to retrieve ProFit financial encounter information.
BG025  29020  09/25/03 Brandon Gockley added episode end_effective_dt_tm
CP026  37130  11/10/03 Chad Pugh       37130 - Defect CAPEP00110979 - Prsnl name fix
42711  42711  06/16/04 Jennifer Song        added response code to reply
44205  44205  08/16/04 Francie Powell  CAPEP00132141 - remove and replace extraneous select.
 
 
***********************************************************************************************************************
The changes below use the expand function with 5 parameters.  If you are Be sure to check that the client
***********************************************************************************************************************
50792  50792  02/14/05 Chad Pugh       CAPEP00151355 - Performance enhancements
50792b 50792  02/14/05 Chad Pugh       CAPEP00153555 - Need to pull prsnl name instead of person name
                                         for reg_prsnl_id and pre_reg_prsnl_id
68609  68609  08/11/05 Chad Pugh       1-442015766 - Undo the order by cnvtdatetime(e.reg_dt_tm) desc change
69163         08/17/05 Mike Richards   Added Billing Entitiy flag                                         
71811 71811	  09/30/05 Lucas Adams	   1-490288312 Fixed Runtime error with combined encounters
74689 74689   11/14/05 Chad Pugh       CR 1-525638828 - Encounter search issue
73523  73523  11/29/05 Jake Johnson    R1 Security Project
77263  77263  01/09/06 Jake Johnson    Correction to R1 Security
77506 77506   01/09/06 Chad Pugh       CR 1-451835934 - Limit Encounter issue
111184 111184 10/26/06 RR013845        Blank lines displayed for recurring encounter in account view is removed
138442        06/20/07 Ryan Biller     CR 1-1137189751 - Return all encounters when searching in a pending encounter conversation.
                                       Added batchSize variable and set all batch sizes from 200 to batchSize
145471 145471 08/15/07 Van Batchelder   Added location_extension to results
149517 149517 12/04/07 Jereme Wilson	Added active_ind checking for episode and episode_encntr_reltn rows - CR 1-1592824301
153466 153466 01/18/08 Jason Vogel      Solution Specification for Selection of Correct Encounter -
fc017144 153467 01/19/08 Florence Cheruiyot Enhanced script to search for multiple filters if selected.
165024 165024 04/24/08 Jason Vogel      ERM: UK CCN 552, 553, 554 Part 2 + corrections
175872 175872 06/27/08 Joseph Cowan     Correction to 1-2179879423 FIN Filtering
131446 131446 12/08/08 Chinh Luu       Added new search filters (ENCNTR_RELATION_PRSNL_ID_FLAG,FACILITY_ORG_ID_FLAG,
                                       ENCNTR_DATE_RANGE_BEGIN_FLAG and ENCNTR_DATE_RANGE_END_FLAG)
198210 198210 01/22/09 Chad Pugh       CR 1-2677317391 - PMSearch Order By Change                                        
201820 201820 02/25/09 Chad Pugh       CR 1-3080494281 - Adding Claim and Statement filters                                      
200977 200977 03/16/09 Chinh Luu       Returned organization_id to reply.
236295 236295 12/14/09 Chad Pugh       CR 1-3695010971 - Adding new filter that only filters by facility (flag = 239)
292506 292506 04/14/11 Chad Pugh       CR 1-4866996201 - Adding Guarantor result. 
301414 301414 09/01/11 Chad Pugh       CR 1-5071062021 - Adding Primary Insurance items
344225 344225 11/20/12 Charley Donnici      CR 1-4972803967  
                                            CR 1-6345593461 - Search Quality Enhancement & DM Archive Removal
*************************************************************************
 
 ******************  END OF ALL MODCONTROL BLOCKS  ********************/
 
;When modding the script add a new line of set last_mod = '' below the last
; mod.  This way when it's translated out on site we'll know the last mod
; and every mod the client's script has had.

;73523+
;+50792
if (validate(last_mod, "NOMOD") = "NOMOD")               ;42711
   ;165024 declare last_mod = c5 with noconstant(" "), private
   declare last_mod = c6 with noconstant(" "), private ;165024
endif  ;42711
;+50792
;73523-
;set last_mod = "ZS023"
;set last_mod = "VI024"
;set last_mod = "BG025"
;set last_mod = "CP026"
;set last_mod = "42711"
;set last_mod = "44205"
;set last_mod = "50792"
;set last_mod = "50792b"
;set last_mod = "71811"
;set last_mod = "74689"
;set last_mod = "73523"
set last_mod = "77263"
set last_mod = "77506"
set last_mod = "111184"
set last_mod = "138442"
set last_mod = "165024"
set last_mod = "175872"
set last_mod = "131446"
set last_mod = "198210"
set last_mod = "201820"
set last_mod = "236295"
set last_mod = "292506"
set last_mod = "301414"
set last_mod = "344225"

;344225++  

record tmpParseit
(
   1 qual[*]
     2 value = vc
)

record tmpcode
(
   1 qual[*]
     2 code_value = f8
)

declare parseIt(iStr = vc, iDel = vc) = i2
subroutine parseIt(iStr, iDel) 
   declare parseItStr = vc with noconstant("")
   declare olddel = i2 with noconstant(1)
   declare newdel = i2 with noconstant(1)
   
   ;We have to remove trailing delimiters they make parsing tougher.
   if (substring(textlen(istr), 1,istr) = iDel)
      set iStr = REPLACE(iStr,iDel,"",2)
   endif

   ;Resize the array to zero.   
   set stat = alterlist(tmpParseit->qual,0)
 
   set parseItStr = iStr
   if (FINDSTRING(iDel,iStr,1))
      for (xx = 1 TO textlen(istr))
         if (substring(xx,1,istr) = iDel)
             set newdel = xx
             set parseItStr  = substring(olddel, newdel - olddel,istr)
             set parseItStr = replace(parseItStr,iDel,"",0)
             call addtoParse(parseItStr)
          endif
          set olddel = newdel
       endfor
       set parseItStr = substring(newdel, textlen(istr) - newdel + 1,istr)
       set parseItStr = replace(parseItStr,iDel,"",0)
       call addtoParse(parseItStr)
   else
       call addtoParse(parseItStr)  
   endif
 
end ; parseIt

declare addtoParse(iStr = vc) = i2
subroutine addtoParse(iStr)
   declare parsecnt = i2 with noconstant(0)
   if (textlen(trim(iStr,3)) > 0)
      set parsecnt = size(tmpParseit->qual,5)+ 1
      set stat = alterlist(tmpParseit->qual,parsecnt)
      set tmpParseit->qual[parsecnt].value = iStr
   endif
end ;addtoParse

;344225--

 
/*
record request
(
  1  debug                        = i2
  1  encounter_id                 = f8
  1  options                      = vc
  1  person_id                    = f8
  1  return_all                   = i2
  1  security                     = i2
  1  user_id                      = f8
  1  user_name                    = vc
  1  limit_ind                    = i2 ;014
  1  max_encntr                   = i4 ;014
  1  filter[*]
     2  flag                      = i2
     2  meaning                   = vc
     2  options                   = vc
     2  phonetic                  = i2
     2  value                     = vc
     2  weight                    = f8
     2	values[*]				       
     	  3  value                = vc ;153467
  1  result[*]
     2  flag                      = i2
     2  meaning                   = vc
     2  options                   = vc
  1  limit[*]                          ;014
     2  encntr_type_class_cd      = f8 ;014
     2  date_option               = i2 ;014
     2  num_days                  = i2 ;014
  1  end_effective_dt_tm		  = dq8 ;bg025
)
*/
 
/*
record reply
(
  1  filter_str                   = vc     ;ZS021
  1  encounter[*]
     2  encounter_id              = f8
     2  admit_type                = vc
     2  alias_xxx                 = vc
     2  arrive_date               = dq8
     2  bed                       = vc
     2  building                  = vc
     2  client                    = vc
     2  depart_date               = dq8
     2  discharge_date            = dq8
     2  discharge_location        = vc
     2  encounter_status          = vc
     2  encounter_type            = vc
     2  encounter_type_class      = vc
     2  estimated_arrive_date     = dq8
     2  estimated_depart_date     = dq8
     2  facility                  = vc
     2  financial_class           = vc
     2  isolation                 = vc
     2  medical_service           = vc
     2  nursing_unit              = vc
     2  preregistration_clerk     = vc
     2  preregistration_date      = dq8
     2  provider_xxx              = vc
     2  reason_for_visit          = vc
     2  registration_clerk        = vc
     2  registration_date         = dq8
     2  room                      = vc
     2  vip                       = vc
     2  billingentity             = vc  ;D015
     2  program_service           = vc.0 ;D019
     2  specialty_unit            = vc.0 ;D019
     2  episode_display			  = vc   ;BG025
     2  location_extension        = vc ;145471
     2  removal_dt_tm             = dq8 ;153466
  1  status_data
     2  status                    = c1
     2  subeventstatus[1]
        3  operationname          = vc
        3  operationstatus        = c1
        3  targetobjectname       = vc
        3  targetobjectvalue      = vc
)
*/
%i cclsource:response_cd.inc        ;42711

declare set_reply_filter (param1 = i2) = null with private ;ZS021
declare pft_mode                       = i2 with private, noconstant(0) ;VI024
declare tmpstr = vc with noconstant("")                                   ;344225
 
;+50792
declare lCnt  = i4 with noconstant(0)
declare lCnt2 = i4 with noconstant(0)
;-50792
declare user_org_count = i4 with noconstant(0) ;73523
declare determine_filters(sc_dummy = i2) = i2 ;73523
declare getFacilityCdByOrgId (orgId = f8) = f8 ;131446
 
;+50792
/*
; ****** D015 *****   Column Passivity
declare gp_column_exists(gpce_table, gpce_column) = i4
subroutine gp_column_exists(gpce_table, gpce_column)
	declare gpce_flag = i4
 
  set gpce_flag = 0
  select into "nl:" l.attr_name
    from dtableattr a, dtableattrl l
   where a.table_name = gpce_table
     and l.attr_name = gpce_column
     and l.structtype = "F"
     and btest(l.stat, 11) = 0
  detail
    gpce_flag = 1
  with nocounter
  return(gpce_flag)
end
 
  declare check_profit_encntr_alias = i4
  declare check_billing_entity = i4
  declare check_program = i4 ;D019
  declare check_specialty = i4 ;D019
  set check_profit_encntr_alias = gp_column_exists ("PFT_ENCNTR_ALIAS", "PFT_ENCNTR_ALIAS_ID")
  set check_billing_entity = gp_column_exists ("BILLING_ENTITY", "BILLING_ENTITY_ID")
  set check_program = gp_column_exists ("ENCOUNTER", "PROGRAM_SERVICE_CD") ;D019
  set check_specialty = gp_column_exists("ENCOUNTER", "SPECIALTY_UNIT_CD") ;D019
; ***** D015 *****
*/
;-50792

  ;+74689
  declare bDone   = i2 with noconstant(FALSE)
  declare lCnt3   = i4 with noconstant(0)
  declare lTotal  = i4 with noconstant(0)
  declare lTotal2 = i4 with noconstant(0)
  declare lStart  = i4 with noconstant(0)
  declare lIndex  = i4 with noconstant(0)
  ;-74689
  declare nLoopCount = i2 with noconstant(0) ;145471
 
  declare batchSize = i4 with noconstant(0)      ;138442
  set batchSize = 50                             ;138442
 
  ;77263++
  if (validate(limited_count, -9) = -9)
     declare limited_count = i4 with noconstant(0)
  endif
  ;77263--
  
  ;+77506
  declare bNoClassCd = i2 with noconstant(FALSE)
  declare dNoEncntrClassCd = f8 with noconstant(0.0)
  ;-77506
  declare dDSBLENCRSLTScd = f8 with noconstant(0.0) ;153466
  ;165024++
  declare cur_idx = i4 with noconstant(0)
  declare idx = i4 with noconstant(0)
  declare QUALIFYING_DISCHARGED_ENCNTR_TYPES(iTemp = i2) = null
  declare cv69_WAITLIST_cd = f8 with public, constant(uar_get_code_by("MEANING", 69, "WAITLIST"))
  declare dDisabledEncntrCd = f8 with public, constant(uar_get_code_by("MEANING", 207902, "DSBLENCRSLTS"))
  ;165024--
  
  ;+198210
  declare dSearchOrderByOpt = f8 with noconstant(0.0)
  
  set stat = uar_get_meaning_by_codeset(207902,"SRCHORDERBY",1,dSearchOrderByOpt)
  ;-198210
 
execute from 1000_INITIALIZE to 1999_INITIALIZE_EXIT
execute from 2000_SEARCH to 2999_SEARCH_EXIT
;73523++
;execute from 3000_FILTER to 3999_FILTER_EXIT
if  (determine_filters(1) != 1)
  go to 9999_EXIT_PROGRAM
endif
;73523--
execute from 4000_REPLY to 4999_REPLY_EXIT
execute from 5000_REP_FILTER_STR to 5999_REP_FILTER_STR_EXIT    ;ZS021
go to 9999_EXIT_PROGRAM
 
 
subroutine add_line(buffer_text)
  set buffer_count = buffer_count + 1
  set buffer_stat = alterlist(buffer->item, buffer_count)
  set buffer->item[buffer_count]->text = trim(buffer_text, 3)
end
 
subroutine dump_buffer(db_dummy)
  if (buffer_count > 0)
    select into "pm_sch_buffer" d.seq
      from (dummyt d with seq = value(buffer_count))
      plan d
    detail
      buffer->item[d.seq]->text
      row + 1
    with nocounter
  endif
end
 
;+50792
/*
subroutine meaning_code(mc_codeset, mc_meaning)
  set mc_code = 0.0
  set mc_text = fillstring(12, " ")
  set mc_text = mc_meaning
  set mc_stat = uar_get_meaning_by_codeset(mc_codeset, mc_text, 1, mc_code)
  if (mc_code > 0.0)
    return(mc_code)
  else
    return(-1.0)
  endif
end
*/
;-50792
 
subroutine perform_buffer(pb_dummy)
  for (buffer_index = 1 to buffer_count)
    free set buffer_fixed_text
    set buffer_fixed_text = fillstring(132, " ")
    set buffer_fixed_text = buffer->item[buffer_index]->text
    
    ;+236295
    if (request->debug)
       call echo(buffer_fixed_text)
    endif
    ;-236295
    
    call parser(buffer_fixed_text, 1)
  endfor
end
 
subroutine reset_buffer(rb_dummy)
  set buffer_count = 0
  set buffer_stat = alterlist(buffer->item, buffer_count)
end
 
;+50792
/*
;************* ZS021 *********
;copied go_meaning_code routine from pm_sch_get_persons.prg
subroutine gp_meaning_code(gpmc_codeset, gpmc_meaning)
  set gpmc_code = 0.0
  set gpmc_text = fillstring(12, " ")
  set gpmc_text = gpmc_meaning
  set gpmc_stat = uar_get_meaning_by_codeset(gpmc_codeset, gpmc_text, 1, gpmc_code)
  if (gpmc_code > 0.0)
    return(gpmc_code)
  else
    return(-1.0)
  endif
end
*/
;-50792
 
subroutine set_reply_filter(param1)

%i cclsource:pm_set_filter_str.inc

end
/************* ZS021 *********/

;165024++
;This subroutine builds a structure that will contain all of the encounters
;that have been associated as disabled on cs 207902
subroutine QUALIFYING_DISCHARGED_ENCNTR_TYPES(iTemp)
   select into "nl:"
   from code_value_group cvg
   plan cvg where
        cvg.parent_code_value = dDisabledEncntrCd
   detail
        dsbled_encntr_types->encntr_type_cnt = dsbled_encntr_types->encntr_type_cnt + 1
        stat = alterlist(dsbled_encntr_types->encntr_type_list,dsbled_encntr_types->encntr_type_cnt)
        dsbled_encntr_types->encntr_type_list[dsbled_encntr_types->encntr_type_cnt]->encntr_type_cd = cvg.child_code_value
   with nocounter
end
;165024--
 
#1000_INITIALIZE

/*************** ZS021 ********/
;Populate data type flags
;copied over from pm_sch_get_persons.prg
  set gp_address1_flag = 1
  set gp_address2_flag = 2
  set gp_age_flag = 8
  set gp_birth_date_flag = 9
  set gp_city_flag = 11
  set gp_deceased_flag = 14
  set gp_ethnic_group_flag = 16
  set gp_first_name_flag = 17
  set gp_gender_flag = 18
  set gp_language_flag = 19
  set gp_last_encounter_date_flag = 20
  set gp_last_name_flag = 21
  set gp_maiden_name_flag = 22
  set gp_marital_status_flag = 23
  set gp_middle_name_flag = 24
  set gp_mothers_maiden_name_flag = 25
  set gp_name_flag = 26
  set gp_nationality_flag = 27
  set gp_person_alias_flag = 28
  set gp_person_relation_flag = 43
  set gp_person_type_flag = 44
  set gp_phone_flag = 50
  set gp_provider_flag = 40
  set gp_race_flag = 53
  set gp_religion_flag = 54
  set gp_species_flag = 55
  set gp_state_flag = 56
  set gp_vip_flag = 45
  set gp_weight_flag = 57
  set gp_zipcode_flag = 58
  set gp_shn_ver_code_flag = 81 
  set gp_nhn_ver_code_flag = 82 
  set gp_alt_char_name_flag = 83 
  set gp_building_flag = 111
  set gp_client_flag = 112
  set gp_discharge_date_flag = 118
  set gp_encounter_alias_flag = 120
  set gp_encounter_ident_flag = 1120        ;344225
  set gp_encounter_relation_flag = 137
  set gp_encounter_status_flag = 138
  set gp_encounter_type_class_flag = 140
  set gp_encounter_type_flag = 139
  set gp_facility_flag = 144
  set gp_financial_class_flag = 145
  set gp_location_flag = 148
  set gp_medical_service_flag = 149
  set gp_registration_date_flag = 160
  set gp_billing_entity_flag = 165 ;69163
  set gp_profit_encounter_alias_flag = 170   
  set gp_person_alias_province_flag = 173     
  set gp_shn_person_alias_province_flag = 174 
  set gp_nhn_person_alias_province_flag = 175 
  set gp_claim_number_flag = 180 ;VI024
  set gp_statement_number_flag = 181 ;VI024
  set gp_EpisodeName_flag = 189 ;BG025
  set gp_response_cd_flag = 190    ;42711  
  set gp_encounter_type_multi_flag = 196      ;153467
  set gp_medical_service_multi_flag = 197	  ;153467
  set gp_primary_guarantor_flag = 198	  ;292506
  set gp_removal_date_flag = 199 ;153466
  set gp_primary_health_plan_flag = 200	  ;301414
  set gp_primary_payer_flag = 201	  ;301414
  
/*************** ZS021 ********/

;Establish data type flag constants
  set ADMIT_TYPE_FLAG = 105
  set ARRIVE_DATE_FLAG = 109
  set BED_FLAG = 110
  set BUILDING_FLAG = 111
  set CLIENT_FLAG = 112
  set CONFIDENTIALITY_LEVEL_FLAG = 126
  set DEPART_DATE_FLAG = 115
  set DISCHARGE_DATE_FLAG = 118
  set DISCHARGE_LOCATION_FLAG = 119
  set ENCOUNTER_ALIAS_FLAG = 120
  set ENCOUNTER_IDENT_FLAG = 1120       ;344225
  set ENCOUNTER_RELATION_FLAG = 137
  set ENCOUNTER_STATUS_FLAG = 138
  set ENCOUNTER_TYPE_FLAG = 139
  set ENCOUNTER_TYPE_CLASS_FLAG = 140
  set ESTIMATED_ARRIVE_DATE_FLAG = 142
  set ESTIMATED_DEPART_DATE_FLAG = 143
  set FACILITY_FLAG = 144
  set FINANCIAL_CLASS_FLAG = 145
  set ISOLATION_FLAG = 147
  set LOCATION_FLAG = 148
  set MEDICAL_SERVICE_FLAG = 149
  set NURSING_UNIT_FLAG = 150
  set PREREGISTRATION_CLERK_FLAG = 154
  set PREREGISTRATION_DATE_FLAG = 155
  set PROVIDER_FLAG = 134
  set REASON_FOR_VISIT_FLAG = 157
  set REGISTRATION_CLERK_FLAG = 159
  set REGISTRATION_DATE_FLAG = 160
  set ROOM_FLAG = 162
  set VIP_FLAG = 141
  set BILLING_ENTITY_FLAG = 165 ;D015
  set PROFIT_ENCOUNTER_ALIAS_FLAG = 170 ;D015
  set ENCOUNTER_TYPE_MULTI_FLAG = 196	;153467
  set MEDICAL_SERVICE_MULTI_FLAG = 197	;153467
  declare PROGRAM_SERVICE_FLAG = I2 with noconstant(171) ;D019
  declare SPECIALTY_UNIT_FLAG = I2 with noconstant(172) ;D019
  declare LOCATION_EXTENSION = i2 with constant(192) ;145471
  declare WAITLIST_REMOVAL_DT_TM_FLAG = i2 with constant(199);153466
  ;165024++
  declare SCHEDULING_DISABLE_ENCOUNTER_RESULTS_FLAG = i2 with constant(235)
  declare SHOW_DISCHARGED_AS_DISABLED_FLAG = i2 with constant(193)
  declare SHOW_WL_REMOVED_AS_DISABLED_FLAG = i2 with constant(200)
  declare DO_NOT_SHOW_WL_REMOVED_FLAG = i2 with constant(195)
  ;165024--
  declare ENCNTR_RELATION_PRSNL_ID_FLAG = i2 with protect, constant(201)      ;131446
  declare ENCNTR_DATE_RANGE_BEGIN_FLAG = i2 with protect, constant(202)       ;131446
  declare ENCNTR_DATE_RANGE_END_FLAG = i2 with protect, constant (203)        ;131446
  declare FACILITY_ORG_ID_FLAG = i2 with protect, constant(204)               ;131446
  declare FACILITY_ORG_ID_ONLY_FLAG = i2 with protect, constant(239)          ;236295
 
;The following flags are added for the ProFit modifications for Account & Guarantor mode of PMSearch  
  ;~VI024 Begin
  set PFT_ENCOUNTER_STATUS_FLAG = 179
  set PFT_ENCNTR_CURRENT_BALANCE_FLAG = 182
  set PFT_ENCNTR_BAD_DEB_BALANCE_FLAG = 183
  set PFT_ACCOUNT_FLAG = 184               
  set PFT_GUARANTOR_NAME_FLAG = 185        
  set PFT_MODE_FLAG = 186                   ;If this flag contains a value > 0 we know we're in Account or Guarantor mode
  set PFT_START_DATE_FLAG = 187             
  set PFT_END_DATE_FLAG = 188           
  set PFT_ACCOUNT_MODE = 4
  set PFT_GUARANTOR_MODE = 5
  ;~VI024 End

;Create a global parser buffer structure
  free set buffer
  record buffer
  (
    1  item[*]
       2  text                       = vc
  )
  set buffer_index = 0
  set buffer_count = 0
 
;Get codes
  ;+50792
  /*
  set census_type_cd = meaning_code(339, "CENSUS")
  set authorized_cd = meaning_code(8, "AUTH")
  set deleted_cd = meaning_code(48, "DELETED")
  set cancelled_encntr_status_cd = meaning_code(261, "CANCELLED") ;012
  ;~VI024 Begin
  set def_guarantor_cd = meaning_code(351, "DEFGUAR")
  set gp_inpatient_cd = meaning_code(69, "INPATIENT")
  set gp_observation_cd = meaning_code(69, "OBSERVATION")
  set gp_recurring_cd = meaning_code(69, "RECURRING")
  set gp_skilled_cd = meaning_code(69, "SKILLED") 
  set gp_outpatient_cd = meaning_code(69, "OUTPATIENT") 
  ;~VI024 End
  */
 
  set census_type_cd = 0.0
  set authorized_cd = 0.0
  set deleted_cd = 0.0
  set cancelled_encntr_status_cd = 0.0
  set def_guarantor_cd = 0.0
  set gp_inpatient_cd = 0.0
  set gp_observation_cd = 0.0
  set gp_recurring_cd = 0.0
  set gp_skilled_cd = 0.0
  set gp_outpatient_cd = 0.0
 
  set stat = uar_get_meaning_by_codeset(339, "CENSUS", 1, census_type_cd)
  set authorized_cd = reqData->auth_auth_cd
  set deleted_cd = reqData->deleted_cd
  set stat = uar_get_meaning_by_codeset(261, "CANCELLED", 1, cancelled_encntr_status_cd)
  set stat = uar_get_meaning_by_codeset(351, "DEFGUAR", 1, def_guarantor_cd)
  set stat = uar_get_meaning_by_codeset(69, "INPATIENT", 1, gp_inpatient_cd)
  set stat = uar_get_meaning_by_codeset(69, "OBSERVATION", 1, gp_observation_cd)
  set stat = uar_get_meaning_by_codeset(69, "RECURRING", 1, gp_recurring_cd)
  set stat = uar_get_meaning_by_codeset(69, "SKILLED", 1, gp_skilled_cd)
  set stat = uar_get_meaning_by_codeset(69, "OUTPATIENT", 1, gp_outpatient_cd)
  ;-50792
  ;153466++
  set stat = uar_get_meaning_by_codeset(207902,"DSBLENCRSLTS",1,dDSBLENCRSLTScd)
  ;153466--
  ;+77506
  set stat = uar_get_meaning_by_codeset(207902, "SCHNOCLASSCD", 1, dNoEncntrClassCd) 
  
  if (dNoEncntrClassCd > 0)
     set bNoClassCd = TRUE
  endif
  ;-77506 
 
;Get security indicator
  set security_ind = 0
  ;if (validate(ccldminfo,0)) ;ZS023+  ;50792
  if (validate(ccldminfo->mode,0))  ;50792
    if(ccldminfo->sec_org_reltn> 0)
      set security_ind = 1
    endif
    if (security_ind = 1 and ccldminfo->sec_confid > 0)
      set security_ind = 2
    endif ;Zs023-
  else                       ;ZS023
    select into "nl:" i.info_number
      from dm_info i
     ;where i.info_domain = "SECURITY"    ;50792
     ;  and i.info_name = "SEC_ORG_RELTN" ;50792
     where i.info_name = "SEC_ORG_RELTN"    ;50792
       and i.info_domain = "SECURITY" ;50792
       and i.info_number > 0.0
    detail
      security_ind = 1
    with nocounter
 
   
    if (security_ind)
      select into "nl:" i.info_number
        from dm_info i
       ;where i.info_domain = "SECURITY"  ;50792
       ;  and i.info_name = "SEC_CONFID"  ;50792
       where i.info_name = "SEC_CONFID"   ;50792
         and i.info_domain = "SECURITY"   ;50792
         and i.info_number > 0.0
      detail
        security_ind = 2
      with nocounter
    endif
  endif  ;ZS023
 
  ;+44205 - Adding this code here from below
;Allow the caller to over-ride the system security indicator
  if (request->security != 0)
    if (request->security > 0)
      set security_ind = request->security
    else
      set security_ind = 0
    endif
  endif
  ;-44205
 
;Determine whether the custom filtering script is included
  set custom_script_ind = 0
  ;+77506
  /*
  select into "nl:" p.object
    from dprotect p
   where p.object = "P"
     and p.object_name = "PM_SCH_CHK_ENCOUNTER"
  detail
    custom_script_ind = 1
  with nocounter
  */
  
  if (checkprg("PM_SCH_CHK_ENCOUNTER") > 0)
     set custom_script_ind = 1
  endif
  ;-77506
 
/*014*/
  free set etc_rec
	record etc_rec
	(
		1 list[*]
		  2 encntr_type_class_cd = f8
		  2 date_option = i2
		  2 num_days = i2
	)
;165024++
;structure to hold all qualifying disabled encounters from code grouping on cs 207902
 free set dsbled_encntr_types
   record dsbled_encntr_types
 ( 1 encntr_type_cnt = i4
   1 encntr_type_list[*]
      2 encntr_type_cd = f8
 )
 set dsbled_encntr_types->encntr_type_cnt = 0
;165024--
;Determine if limit request items exist
	set limit_ind_exists = 0
	if( validate(request->limit_ind,-9) != -9 )
	  if (request->limit_ind = 1)  ;50792
		set limit_ind_exists = 1
 
	    ;Get the current encntr_type_classes and put them in the working record
	    set cnt = 0
 
	    select into "nl:"
	     from code_value c
	      where c.code_set = 69
	       ;and c.active_ind + 0 = 1  ;50792
	       and c.active_ind = 1  ;50792
	       and c.begin_effective_dt_tm <= cnvtdatetime(curdate,curtime3)
	       ;and c.end_effective_dt_tm >= cnvtdatetime(curdate,curtime3)  ;50792
	       and c.end_effective_dt_tm > cnvtdatetime(curdate,curtime3)  ;50792
	     detail
	       cnt = cnt + 1
 
	       ;+50792
	       ;stat = alterlist(etc_rec->list,cnt)
	       if (mod(cnt, 10) = 1)
	          stat = alterlist(etc_rec->list, cnt + 9)
	       endif
	       ;-50792
 
	       etc_rec->list[cnt]->encntr_type_class_cd = c.code_value
	       etc_rec->list[cnt]->num_days = 0
	    with nocounter
 
	    ;Populate list with passed limits
	    if (cnt > 0 and size(request->limit,5) > 0) ;jc022
	       set stat = alterlist(etc_rec->list, cnt)  ;50792
 
	       select into "nl:"
	        from (dummyT d with seq=value(cnt)),
	             (dummyT d1 with seq=value(size(request->limit,5)))
	         plan d
	         join d1
	          where etc_rec->list[d.seq]->encntr_type_class_cd =
	             request->limit[d1.seq]->encntr_type_class_cd
	        detail
	  	      etc_rec->list[d.seq]->date_option = request->limit[d1.seq]->date_option
	  	      etc_rec->list[d.seq]->num_days = request->limit[d1.seq]->num_days
	       with nocounter
	       
	       ;+77506 - Add logic to add encntr_type_class_cd of 0 as a valid 
	       ;  encntr_type_class_cd to use in the limit logic
	       if (bNoClassCd)
	          set cnt = cnt + 1
	          set stat = alterlist(etc_rec->list, cnt)
	          set etc_rec->list[cnt]->encntr_type_class_cd = 0.0
	       endif      
	       ;-77506
	       
	    endif ;jc022
	  endif  ;50792
	endif
/*014*/
 
#1999_INITIALIZE_EXIT
 
#2000_SEARCH
;Establish filter indicator variables
  set building_filter_ind = 0
  set client_filter_ind = 0
  set discharge_date_filter_ind = 0
  set encounter_ident_filter_ind = 0      ;344225
  set encounter_alias_filter_ind = 0
  set encounter_relation_filter_ind = 0
  set encounter_status_filter_ind = 0
  set encounter_type_class_filter_ind = 0
  set encounter_type_filter_ind = 0
  set facility_filter_ind = 0
  set financial_class_filter_ind = 0
  set location_filter_ind = 0
  set medical_service_filter_ind = 0
  set registration_date_filter_ind = 0
  set profit_encounter_alias_filter_ind = 0   ;D015
  set waitlist_removal_dt_tm_ind = 0 ;153466
  declare encounter_type_multi_filter_ndx = i2 with protect, noconstant (0)   ;153467
  declare medical_service_multi_filter_ndx = i2 with protect, noconstant (0)   ;153467
  ;165024++
  set scheduling_disable_encounter_results_ind = 0
  set show_discharged_as_disabled_ind = 0
  set show_wl_removed_as_disabled_ind = 0
  set do_not_show_wl_removed_ind = 0
  set scheduling_disable_qualifying_encntrs_ind = 0
  ;165024--
  ;~VI024 Begin
  ;Initialize the following indicators.  They were added for ProFit Account/Guarantor search.
  set pft_encounter_status_filter_ind = 0
  set pft_mode_ind                    = 0
  set pft_account_filter_ind          = 0
  ;~VI024 End
  declare encntr_relation_prsnl_id_filter_ind = i2 with protect, noconstant (0)  ;131446
  declare encntr_date_range_begin_filter_ind = i2 with protect, noconstant (0)   ;131446
  declare encntr_date_range_end_filter_ind = i2 with protect, noconstant (0)     ;131446
  
  ;+201820
  ;Make sure this variable gets initialized
  set pft_account_filter = 0.0
  
  ;New variables for Claim and Statement search
  declare bPFTResultInd               = i2 with noconstant(FALSE)
  declare claim_number_filter_ind     = i2 with noconstant(FALSE)
  declare statement_number_filter_ind = i2 with noconstant(FALSE)
  declare claim_id_result_ind         = i2 with noconstant(FALSE)
  declare statement_id_result_ind     = i2 with noconstant(FALSE)
  declare dClaimBillClassCd           = f8 with noconstant(0.0)
  declare dStatementBillClassCd       = f8 with noconstant(0.0)
  declare claim_number_filter         = vc with noconstant("")
  declare statement_number_filter     = vc with noconstant("")
  
  ;Bill Class Codes for Claim and Statement search
  set stat = uar_get_meaning_by_codeset(21849, "CLAIM", 1, dClaimBillClassCd)
  set stat = uar_get_meaning_by_codeset(21849, "PATIENT STAT", 1, dStatementBillClassCd)
  
  ;New subroutines for Claim and Statement search
  declare claimNumberSearch(myFilter = vc) = i2
  declare statementNumberSearch(myFilter = vc) = i2
  ;-201820
  
  
  ;+236295
  declare dFacilityOnlyFilterInd = i2 with noconstant(FALSE)
  declare dFacilityOnlyFilterCd  = f8 with noconstant(0.0)
  ;-236295
  
  declare primary_guarantor_result_ind = i2 with noconstant(FALSE)  ;292506
  declare primary_health_plan_result_ind = i2 with noconstant(FALSE)  ;301414
  declare primary_payer_result_ind = i2 with noconstant(FALSE)  ;301414
 
;Determine filter indicators and set filter values
  for (i = 1 to size(request->filter, 5))
    free set value
    set value = trim(request->filter[i]->value, 3)
 
    case (request->filter[i]->flag)
      of BUILDING_FLAG:
        set building_filter_ind = 1
        set building_filter = 0.0
        set building_filter = cnvtreal(value)
      of CLIENT_FLAG:
        set client_filter_ind = 1
        set client_filter = 0.0
        set client_filter = cnvtreal(value)
      of DISCHARGE_DATE_FLAG:
        set discharge_date_filter_ind = 1
        free set discharge_date_filter_start
        free set discharge_date_filter_end
        set discharge_date_filter_start = concat(format(cnvtdatetime(value), "DD-MMM-YYYY;;d"), " 00:00:00.00")
        set discharge_date_filter_end = concat(format(cnvtdatetime(value), "DD-MMM-YYYY;;d"), " 23:59:59.99")

;344225++
      of ENCOUNTER_IDENT_FLAG:
        free set encounter_alias_filters
        record encounter_alias_filters
        (
          1  filter[*]
             2  alias_type_cd           = f8
             2  alias_pool_cd           = f8
             2  value_low               = vc
             2  value_high              = vc
        )
        
        set tmpcodecnt = 0

        ;Lets grab all the possible filters from CS 319.
        select into "nl:"
           from code_value cv
        where cv.code_set = 319
        and cv.active_ind = 1 and
        (cnvtdatetime(curdate, curtime3) between
         cv.begin_effective_dt_tm and cv.end_effective_dt_tm)
        detail 
           tmpcodecnt = tmpcodecnt + 1
           stat = alterlist(tmpcode->qual,tmpcodecnt)
           tmpcode->qual[tmpcodecnt].code_value = cv.code_value
        with nocounter

        ;Parse the input as it could have multiples separated by a comma.
        call parseit(value,",")

        set encounter_alias_filter_count = 0

        for (yy = 1 to size(tmpcode->qual,5))
           for (xx = 1 to size(tmpparseit->qual,5))
              set value = tmpparseit->qual[xx].value
              set encounter_alias_filter_count = encounter_alias_filter_count + 1
              set stat = alterlist(encounter_alias_filters->filter, encounter_alias_filter_count)
              set encounter_alias_filters->filter[encounter_alias_filter_count]->alias_type_cd = tmpcode->qual[yy].code_value
              set value = replace(value,char(34),"")
              set encounter_alias_filters->filter[encounter_alias_filter_count]->value_low = value
              set encounter_alias_filters->filter[encounter_alias_filter_count]->value_high = value
              set encounter_ident_filter_ind = 1
              set encounter_alias_filter_ind = 1
           endfor
        endfor

;344225--
	  
      of ENCOUNTER_ALIAS_FLAG:
        if (encounter_alias_filter_ind = 0)
          free set encounter_alias_filters
          record encounter_alias_filters
          (
            1  filter[*]
               2  alias_type_cd           = f8
               2  alias_pool_cd           = f8
               2  value_low               = vc                                                                         ;011
               2  value_high              = vc                                                                         ;011
;011               2  value                   = vc
          )
          set encounter_alias_filter_count = 0
        endif
 	  ;++175872 - commented out and moved to the bottom of the case statement
 	  ;165024++
 	  ;of SCHEDULING_DISABLE_ENCOUNTER_RESULTS_FLAG:
 	   ; set scheduling_disable_encounter_results_ind = 1
	   ;of SHOW_DISCHARGED_AS_DISABLED_FLAG:
	    ;set show_discharged_as_disabled_ind = 1
	   ;of SHOW_WL_REMOVED_AS_DISABLED_FLAG:
	   ; set show_wl_removed_as_disabled_ind = 1
	   ;of DO_NOT_SHOW_WL_REMOVED_FLAG:
	    ;set do_not_show_wl_removed_ind = 1
	  ;165024--
	   ;--175872 - commented out and moved to the bottom of the case statement
        ;+50792
        ;set alias_type_cd = meaning_code(319, request->filter[i]->meaning)
        set alias_type_cd = 0.0
 
        set stat = uar_get_meaning_by_codeset(319, nullterm(request->filter[i]->meaning), 1, alias_type_cd)
        ;-50792
 
        if (alias_type_cd > 0.0)
          set encounter_alias_filter_count = encounter_alias_filter_count + 1
          set stat = alterlist(encounter_alias_filters->filter, encounter_alias_filter_count)
          set encounter_alias_filters->filter[encounter_alias_filter_count]->alias_type_cd = alias_type_cd
 
          if (ichar(substring(size(value), 1, value)) = 42)                                                            ;011
             set encounter_alias_filters->filter[encounter_alias_filter_count]->value_low                              ;011
               = substring(1, size(value) - 1, value)                                                                  ;011
             set encounter_alias_filters->filter[encounter_alias_filter_count]->value_high                             ;011
               = concat(encounter_alias_filters->filter[encounter_alias_filter_count]->value_low, "zzz")               ;011
          else                                                                                                         ;011
             set encounter_alias_filters->filter[encounter_alias_filter_count]->value_low = value                      ;011
             set encounter_alias_filters->filter[encounter_alias_filter_count]->value_high = value                     ;011
          endif                                                                                                        ;011
 
;011          set encounter_alias_filters->filter[encounter_alias_filter_count]->value = value
          set encounter_alias_filter_ind = 1
        endif
 
   ;****D015****
      of PROFIT_ENCOUNTER_ALIAS_FLAG:
        if (profit_encounter_alias_filter_ind = 0)
          free set profit_encounter_alias_filters
          record profit_encounter_alias_filters
          (
            1  filter[*]
               2  alias_type_cd           = f8
               2  alias_pool_cd           = f8
               2  value_low               = vc
               2  value_high              = vc
          )
          set profit_encounter_alias_filter_count = 0
        endif
 
        ;+50792
        ;set alias_type_cd = meaning_code(27520, request->filter[i]->meaning)
        set alias_type_cd = 0.0
 
        set stat = uar_get_meaning_by_codeset(27520, nullterm(request->filter[i]->meaning), 1, alias_type_cd)
        ;-50792
 
        if (alias_type_cd > 0.0)
          set profit_encounter_alias_filter_count = profit_encounter_alias_filter_count + 1
          set stat = alterlist(profit_encounter_alias_filters->filter, profit_encounter_alias_filter_count)
          set profit_encounter_alias_filters->filter[profit_encounter_alias_filter_count]->alias_type_cd = alias_type_cd
 
          if (ichar(substring(size(value), 1, value)) = 42)
             set profit_encounter_alias_filters->filter[profit_encounter_alias_filter_count]->value_low
               = substring(1, size(value) - 1, value)
             set profit_encounter_alias_filters->filter[profit_encounter_alias_filter_count]->value_high
               = concat(profit_encounter_alias_filters->filter[profit_encounter_alias_filter_count]->value_low, "zzz")
          else
             set profit_encounter_alias_filters->filter[profit_encounter_alias_filter_count]->value_low = value
             set profit_encounter_alias_filters->filter[profit_encounter_alias_filter_count]->value_high = value
          endif
          set profit_encounter_alias_filter_ind = 1
        endif
   ;****D015****
 
      of ENCOUNTER_RELATION_FLAG:
        set encounter_relation_filter_ind = 1
        set encounter_relation_filter = 0.0
        set encounter_relation_filter = cnvtreal(value)
      of ENCOUNTER_STATUS_FLAG:
        set encounter_status_filter_ind = 1
        set encounter_status_filter = 0.0
        set encounter_status_filter = cnvtreal(value)
      of ENCOUNTER_TYPE_CLASS_FLAG:
        set encounter_type_class_filter_ind = 1
        set encounter_type_class_filter = 0.0
        set encounter_type_class_filter = cnvtreal(value)
      of ENCOUNTER_TYPE_FLAG:
        set encounter_type_filter_ind = 1
        set encounter_type_filter = 0.0
        set encounter_type_filter = cnvtreal(value)
      of ENCOUNTER_TYPE_MULTI_FLAG:
      	set encounter_type_multi_filter_ndx = i
      of FACILITY_FLAG:
        set facility_filter_ind = 1
        set facility_filter = 0.0
        set facility_filter = cnvtreal(value)
      of FINANCIAL_CLASS_FLAG:
        set financial_class_filter_ind = 1
        set financial_class_filter = 0.0
        set financial_class_filter = cnvtreal(value)
      of LOCATION_FLAG:
        set location_filter_ind = 1
        set location_filter = 0.0
        set location_filter = cnvtreal(value)
      of MEDICAL_SERVICE_FLAG:
        set medical_service_filter_ind = 1
        set medical_service_filter = 0.0
        set medical_service_filter = cnvtreal(value)
      of MEDICAL_SERVICE_MULTI_FLAG:
        set medical_service_multi_filter_ndx = i
      of REGISTRATION_DATE_FLAG:
        set registration_date_filter_ind = 1
        free set registration_date_filter_start
        free set registration_date_filter_end
        set registration_date_filter_start = concat(format(cnvtdatetime(value), "DD-MMM-YYYY;;d"), " 00:00:00.00")
        set registration_date_filter_end = concat(format(cnvtdatetime(value), "DD-MMM-YYYY;;d"), " 23:59:59.99")
      ;~VI024 Begin
      of PFT_ENCOUNTER_STATUS_FLAG:
        set pft_encounter_status_filter_ind = 1
	set pft_encounter_status_filter = 0.0
	set pft_encounter_status_filter = cnvtreal(value)
      of PFT_ACCOUNT_FLAG:
        set pft_account_filter_ind = 1
	set pft_account_filter = 0.0
	set pft_account_filter = cnvtreal(value)
      of PFT_MODE_FLAG:
        set pft_mode_ind = 1
        set pft_mode = 0
        set pft_mode = cnvtint(value)
      ;~VI024 End
      ;153466++
      of WAITLIST_REMOVAL_DT_TM_FLAG:
        set waitlist_removal_dt_tm_ind = 1
      ;153466--
      ;175872++ code block written by 165024, moved by 175872
      of SCHEDULING_DISABLE_ENCOUNTER_RESULTS_FLAG:
    	 set scheduling_disable_encounter_results_ind = 1
      of SHOW_DISCHARGED_AS_DISABLED_FLAG:
   	 set show_discharged_as_disabled_ind = 1
      of SHOW_WL_REMOVED_AS_DISABLED_FLAG:
         set show_wl_removed_as_disabled_ind = 1
      of DO_NOT_SHOW_WL_REMOVED_FLAG:
         set do_not_show_wl_removed_ind = 1
      ;175872--
      ;131446+
      of ENCNTR_RELATION_PRSNL_ID_FLAG:
      	set encntr_relation_prsnl_id_filter = cnvtreal(value)
        set encntr_relation_prsnl_id_filter_ind = 1
      of ENCNTR_DATE_RANGE_BEGIN_FLAG:
        set encntr_date_range_begin_filter_ind = 1
        free set encntr_date_range_begin_filter
        set encntr_date_range_begin_filter = concat(format(cnvtdatetime(value), "DD-MMM-YYYY;;d"), " 00:00:00.00")
      of ENCNTR_DATE_RANGE_END_FLAG:
        set encntr_date_range_end_filter_ind = 1
        free set encntr_date_range_end_filter
        set encntr_date_range_end_filter = concat(format(cnvtdatetime(value), "DD-MMM-YYYY;;d"), " 23:59:59.99")
      of FACILITY_ORG_ID_FLAG:
        ;Note: if this flag is set it overwrites FACILITY_FLAG
        set facility_filter_ind = 1
        set facility_filter = getFacilityCdByOrgId (cnvtreal(value))
      ;131446-
      
      ;+201820
      ;Check to see if Claim number is a filter
      of gp_claim_number_flag:
      	set claim_number_filter_ind = 1
      	set claim_number_filter = trim(value,3)
      
      ;Check to see if Statement number is a filter
      of gp_statement_number_flag:
      	set statement_number_filter_ind = 1
      	set statement_number_filter = trim(value,3)
      ;-201820
      
      
      ;+236295
      of FACILITY_ORG_ID_ONLY_FLAG:
         set dFacilityOnlyFilterInd = TRUE
         set dFacilityOnlyFilterCd  = getFacilityCdByOrgId(cnvtreal(value))
      ;-236295
      
    endcase
  endfor
 
;Determine skip discharged option
  set skip_discharged = 0
  if (size(request->options) > 1)
    if (substring(2, 1, request->options) = "1")
      set skip_discharged = 1
    endif
  endif
 
;Determine authorized option
  set authorized = 0
  if (size(request->options) > 18)
    if (substring(19, 1, request->options) = "1")
      set authorized = 1
    endif
  endif
 
;Determine the discharge day back-dating limit
  set discharge_days = 0
  if (size(request->options) > 21)
 
;012 - The back-dating logic is only a function of PMFinder.  The options string from PMFinder doesn't match the options
;012 - string from PMSearch.  PMSearch always sends an application number in the options string.  Thus, if an application
;012 - number is sent, ignore the back-dating logic because we're not called from PMFinder.  This prevents us from
;012 - accidentally turning on back-dating logic when an extended options string is passed from PMSearch.
 
    set application_number = 0                                                                                         ;012
    set application_number = cnvtint(substring(3, 8, request->options))                                                ;012
    if (application_number <= 0)                                                                                       ;012
      set discharge_days = cnvtint(substring(20, 3, request->options))
    endif                                                                                                              ;012
  endif
 
;012 - The actual options property set on the Search object is now appended to the options field in the request.  This
;012 - keeps us from having to modify PMSearch every time a new option is added.  Parse the extended options field here:
  set canceled_encounter_mode = 0                                                                                      ;012
  if (size(request->options) > 23)                                                                                     ;012
    if (substring(24, 1, request->options) = "1")                                                                      ;012
      set canceled_encounter_mode = 1                                                                                  ;012
    endif                                                                                                              ;012
  endif                                                                                                                ;012
 
  set pending_logic_mode = 0                                                                                           ;013
  if (size(request->options) > 24)                                                                                     ;013
    if (substring(25, 1, request->options) = "1")                                                                      ;013
      set pending_logic_mode = 1                                                                                       ;013
    endif                                                                                                              ;013
  endif                                                                                                                ;013
 
/*sc018 - start*/
  declare show_pending_canrej_mode = i4 with noconstant (0)
  if (size(request->options) > 25)
    if (substring(26, 1, request->options) = "1")
      set show_pending_canrej_mode = 1
    endif
  endif
 
  declare show_all_encntr_select_pending_only_mode = i4 with noconstant (0)			;138442
  if (size(request->options) > 28)													            ;138442
    if (substring(29, 1, request->options) = "1")									         ;138442
    	set show_all_encntr_select_pending_only_mode = 1							         ;138442
    endif																			                  ;138442
  endif																				                  ;138442
 
  declare show_pending_encntr_mode = i4 with noconstant (0)
  if (size(request->options) > 26)
    if (substring(27, 1, request->options) = "1")
    	if (show_all_encntr_select_pending_only_mode != 1)  						         ;138442
           set show_pending_encntr_mode = 1
        endif 										                  								;138442
    endif
  endif
/*sc018 - end*/
 
;If we were given a client, alias filters can be further refined by
;the proper alias pool for the client - this logic finds the alias
;pools for any alias filters
  if (client_filter_ind)
    ;344225 if (encounter_alias_filter_ind)
    if (encounter_alias_filter_ind or encounter_ident_filter_ind)   ;344225
       if (encounter_alias_filter_count > 0) ;jc022
    	  ;+50792
    	  /*
	      select into "nl:" r.alias_pool_cd
	        from org_alias_pool_reltn r, (dummyt d with seq = value(encounter_alias_filter_count))
	        plan d
	        join r
	       where r.organization_id = client_filter
	         and cnvtupper(r.alias_entity_name) = "ENCNTR_ALIAS"
	         and r.alias_entity_alias_type_cd + 0 = encounter_alias_filters->filter[d.seq]->alias_type_cd
	         and r.active_ind + 0 = 1
	         and r.beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)
	         and r.end_effective_dt_tm + 0 >= cnvtdatetime(curdate, curtime3)
	      detail
	        encounter_alias_filters->filter[d.seq]->alias_pool_cd = r.alias_pool_cd
	      with nocounter
	      */
 
	      set lCnt = 0
	      set lCnt2 = 0
 
	      select into "nl:"
	        r.alias_pool_cd
	       from org_alias_pool_reltn r
	        where r.organization_id = client_filter
	         and cnvtupper(r.alias_entity_name) = "ENCNTR_ALIAS"
	         and expand(lCnt, 1, encounter_alias_filter_count, r.alias_entity_alias_type_cd,
	                    encounter_alias_filters->filter[lCnt]->alias_type_cd, 200)
	         and r.active_ind = 1
	         and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
	         and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
	       detail
	         lCnt2 = locateval(lCnt, 1, encounter_alias_filter_count,
                          r.alias_entity_alias_type_cd, encounter_alias_filters->filter[lCnt]->alias_type_cd)
 
	         encounter_alias_filters->filter[lCnt2]->alias_pool_cd = r.alias_pool_cd
	      with nocounter
	      ;-50792
 
      endif ;jc022
    endif
    ;***D015***
    if (profit_encounter_alias_filter_ind)
       if (profit_encounter_alias_filter_count > 0) ;jc022
          ;+50792
          /*
	      select into "nl:" r.alias_pool_cd
	        from org_alias_pool_reltn r, (dummyt d with seq = value(profit_encounter_alias_filter_count))
	        plan d
	        join r
	       where r.organization_id = client_filter
	         and r.alias_entity_name = "ProFit Encounter Alias"  ;Uses the Display
	         and r.alias_entity_alias_type_cd = profit_encounter_alias_filters->filter[d.seq]->alias_type_cd
	         and r.active_ind = 1
	         and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
	         and r.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
	      detail
	        profit_encounter_alias_filters->filter[d.seq]->alias_pool_cd = r.alias_pool_cd
	      with nocounter
	      */
 
	      set lCnt = 0
	      set lCnt2 = 0
 
	      select into "nl:"
	        r.alias_pool_cd
	       from org_alias_pool_reltn r
	        where r.organization_id = client_filter
	         and r.alias_entity_name = "ProFit Encounter Alias"
	         and expand(lCnt, 1, profit_encounter_alias_filter_count, r.alias_entity_alias_type_cd,
	                    profit_encounter_alias_filters->filter[lCnt]->alias_type_cd, 200)
	         and r.active_ind = 1
	         and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
	         and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
	       detail
	         lCnt2 = locateval(lCnt, 1, profit_encounter_alias_filter_count,
                          r.alias_entity_alias_type_cd, profit_encounter_alias_filters->filter[lCnt]->alias_type_cd)
 
	         profit_encounter_alias_filters->filter[lCnt2]->alias_pool_cd = r.alias_pool_cd
	      with nocounter
	      ;-50792
      endif ;jc022
    endif
    ;***D015***
  endif
 
;Determine the current user's ID
  set user_id = request->user_id
 
  if (user_id <= 0.0)
    if (size(trim(request->user_name, 3)) > 0)
      select into "nl:" p.person_id
        from prsnl p
       where p.username = cnvtupper(request->user_name)
         and p.active_ind = 1
         and p.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
         and p.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
      detail
        user_id = p.person_id
      with nocounter
    endif
  endif
 
  if (user_id <= 0.0)
    set user_id = reqinfo->updt_id
  endif
 
;Initialize variables
  free set quote
  set quote = "'"
 
;Create a record structure to hold all of the encounter we'll find
  free set encounters
  record encounters
  (
    1  encounter[*]
       2  encounter_id         = f8
       2  level                = i4
       2  org_id               = f8
       2  valid                = i2
       2  encntr_type_class_cd = f8  ;014
       2  disch_dt_tm          = dq8 ;014
			 2  depart_dt_tm         = dq8 ;014
       2  pft_encounter_id     = f8  ;VI024  When the script is called in ProFit's Account/Guarantor mode.
                                     ;       I need to store the pft_encntr_id so I can retrieve the correct
				     ;       ProFit encounter information when populating the reply.  This attribute
				     ;       will only be populated in the script is called from PMSearch in Account/
				     ;       guarantor mode.
				     
	   ;+201820
	   2 pft_acct_id = f8
	   2 pft_claim_id = f8
	   2 pft_statement_id = f8
	   2 encounter_type_cd = f8
	   ;-201820
	   2 organization_id = f8 ;200977
  )
  set encounter_count = 0
  
  
  ;+201820
  ;If Claim number or Statement number as a filter then it is the only filter that is applied to the search, 
  ;  except for pft_acct_id which is optional when using Claim or Statement filters.  All other filters will be 
  ;  ignored.  Claim or Statement filters do not allow Wildcard searches.
  if (claim_number_filter_ind)
     set bPFTResultInd = claimNumberSearch(claim_number_filter)
     
     ;If the subroutine fails for any reason then fail the script.
     if (bPFTResultInd != TRUE)
     
        ;We might not have a reply structure yet so create a default one here if we fail.
        if (validate(reply->status_data->status, "X") = "X")
           free record reply
           record reply
           (
%i cclsource:status_block.inc
           )
        endif
        
        set reply->status_data->operationname = "claimNumberSearch()"
        set reply->status_data->subeventstatus[1]->targetobjectname = "pm_sch_get_encounters"
        set reply->status_data->subeventstatus[1]->targetobjectvalue = "Call to claimNumberSearch() failed"
        set reply->status_data->status = "F"
        
     	  go to 9999_EXIT_PROGRAM  	
     endif
    
     ;Jump to the end of the Search block when we get her so Security can be applied to our results.
     go to 2999_SEARCH_EXIT
   
  endif
  
  if (statement_number_filter_ind)
     set bPFTResultInd = statementNumberSearch(statement_number_filter)
     
     ;If the subroutine fails for any reason then fail the script.
     if (bPFTResultInd != TRUE)
     
        ;We might not have a reply structure yet so create a default one here if we fail.
        if (validate(reply->status_data->status, "X") = "X")
           free record reply
           record reply
           (
%i cclsource:status_block.inc
           )
        endif
     
        set reply->status_data->operationname = "statementNumberSearch()"
        set reply->status_data->subeventstatus[1]->targetobjectname = "pm_sch_get_encounters"
        set reply->status_data->subeventstatus[1]->targetobjectvalue = "Call to statementNumberSearch() failed"
        set reply->status_data->status = "F"

        go to 9999_EXIT_PROGRAM
     endif

     ;Jump to the end of the Search block when we get her so Security can be applied to our results.
     go to 2999_SEARCH_EXIT
     
  endif
  ;-201820
 
;Clear the parser buffer
  call reset_buffer(1)
 
;Begin building the select statement that will be run to find the encounters.
 
;+VI024
;Adding a check to see if we're in ProFit's search mode.  If we are, then we need to remove
;the 'distinct' from the select since there can be multiple financial encounters for a specific
;clinical encounter.  The distinct will not return the multiple financial encounters.

;+50792 - We don't have to worry about distinct since we are hitting the encounter table
;  using the person_id.  They will always be unique.
;if (pft_mode_ind > 0)
;  call add_line("select into 'nl:' e.encntr_id")
;else
;  call add_line("select distinct into 'nl:' e.encntr_id")
;endif

call add_line("select into 'nl:' e.encntr_id")
;-50792

;-VI024
;The encounter table is always used - add it to the from clause first
  call add_line("from encounter e")
 
;If encounter (doctor) relationship is a filter, add the encounter to personnel
;relationship table to the from clause
  ;131446 if (encounter_relation_filter_ind)
  if (encounter_relation_filter_ind or encntr_relation_prsnl_id_filter_ind) ;131446
    call add_line(", encntr_prsnl_reltn r")
  endif
 
;If we're filtering by any encounter aliases, add the necessary from
;clause(s) for the encounter alias table
  if (encounter_alias_filter_ind)
    if (encounter_ident_filter_ind = 1)                                         ;344225
       call add_line(concat(", encntr_alias ea", trim(cnvtstring(1), 3)))
    else                                                                        ;344225
       for (i = 1 to encounter_alias_filter_count)
          call add_line(concat(", encntr_alias ea", trim(cnvtstring(i), 3)))
       endfor	
    endif                                                                       ;344225
  endif
 
;If we're filtering by any encounter aliases, add the necessary from
;clause(s) for the encounter alias table
  if (profit_encounter_alias_filter_ind)
    for (i = 1 to profit_encounter_alias_filter_count)
      call add_line(concat(", pft_encntr_alias pea", trim(cnvtstring(i), 3)))
    endfor
  endif
 
 
;If we're filtering by location, add the encounter domain to the from clause
  if (building_filter_ind or facility_filter_ind or location_filter_ind)
    call add_line(", encntr_domain d")
    
    ;+236295
    ;Turn off Facility Only (no encntr_domain) filter if any of the other location filters are on.
    set dFacilityOnlyFilterInd = FALSE  
    ;-236295
    
  endif
 
  ;+44205
  if (security_ind)
    call add_line(", code_value cv")
  endif
  ;-44205
 
 ;+VI024
 ;If we're in ProFit account or guarantor mode then we need to join to the
 ;pft_encntr table to filter the encounters to only those that have a corresponding
 ;financial encounter.

  if (pft_mode = PFT_ACCOUNT_MODE)
    ;~If we're searching in account mode, we'll have to join to the pft_encntr table to
    ;~retrieve all corresponding financial encounters for the clinical encounters.
    call add_line(", pft_encntr pe")

  elseif (pft_mode = PFT_GUARANTOR_MODE)
    ;~If we're in guarantor mode we need to start on the encntr_person_reltn table since we're
    ;~not trying to get the clinical encounters for the request->person_id.  Instead we're trying
    ;~to get the encounters for all patients who have the request->person_id as their guarantor.
    call add_line(", encntr_person_reltn epr")
    call add_line(", pft_encntr pe")
  endif

  if (pft_mode = PFT_GUARANTOR_MODE)
     ;~We're in ProFit's guarantor search.  We'll start on the encntr_person_reltn table for the request->person_id.
     ;~We're only return records where that person is the default guarantor.  We'll then join to the encounter table
     ;~for the corresponding encounters.  This will return all encounters that have the request->person_id as the
     ;~default guarantor.  These are NOT clinical encounters for the request->person_id.
     call add_line("plan epr")
 
     ;+50792
     ;call add_line(concat("where epr.related_person_id = ", trim(cnvtstring(request->person_id), 3)))
     ;call add_line(concat("and epr.person_reltn_type_cd = ", trim(cnvtstring(def_guarantor_cd), 3)))
     call add_line(build("where epr.related_person_id = ", request->person_id))
     call add_line(build("and epr.person_reltn_type_cd = ", def_guarantor_cd))
     ;-50792
     call add_line("join e where e.encntr_id = epr.encntr_id")
  else
     ;If we're not in guarantor search we'll plan against the encounter table using the given person ID
     call add_line("plan e")
 
     ;+50792
     ;call add_line(concat("where e.person_id = ", trim(cnvtstring(request->person_id), 3)))
     call add_line(build("where e.person_id = ", request->person_id))
     call add_line("and e.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
     ;-50792
  endif

;~VI024  call add_line("plan e")
;~VI024  call add_line(concat("where e.person_id = ", trim(cnvtstring(request->person_id), 3)))
;-VI024
 
;Add encounter table filters to the where clause as necessary
  if (client_filter_ind)
     ;call add_line(concat("and e.organization_id + 0 = ", trim(cnvtstring(client_filter), 3)))  ;50792
     call add_line(build("and e.organization_id + 0 = ", client_filter))  ;50792
  endif
 
  if (discharge_date_filter_ind)
    call add_line(concat("and e.disch_dt_tm + 0 between cnvtdatetime(", quote, discharge_date_filter_start, quote,
                         ") and cnvtdatetime(", quote, discharge_date_filter_end, quote, ")"))
  endif
 
  if (encounter_status_filter_ind)
     ;call add_line(concat("and e.encntr_status_cd + 0 = ", trim(cnvtstring(encounter_status_filter), 3)))  ;50792
     call add_line(build("and e.encntr_status_cd + 0 = ", encounter_status_filter))  ;50792
  endif
 
  if (encounter_type_class_filter_ind)
     ;call add_line(concat("and e.encntr_type_class_cd + 0 = ", trim(cnvtstring(encounter_type_class_filter), 3))) ;50792
     call add_line(build("and e.encntr_type_class_cd + 0 = ", encounter_type_class_filter))  ;50792
  endif
 
  if (encounter_type_filter_ind)
     ;call add_line(concat("and e.encntr_type_cd + 0 = ", trim(cnvtstring(encounter_type_filter), 3)))  ;50792
     call add_line(build("and e.encntr_type_cd + 0 = ", encounter_type_filter))  ;50792
  endif
 
  /*153467.......*/
  if (encounter_type_multi_filter_ndx >0)  
 	if (size(request->filter[encounter_type_multi_filter_ndx].values,5) >0)
 	  call add_line("and e.encntr_type_cd + 0 in (")
 	  for (x=1 to size(request->filter[encounter_type_multi_filter_ndx].values,5))
 	    if (x = 1) 
 	    	call add_line(request->filter[encounter_type_multi_filter_ndx].values[x].value)
 	    else
 	    	call add_line(build(",", request->filter[encounter_type_multi_filter_ndx].values[x].value))
 	    endif
 	      ;call add_line(request->filter[encounter_type_multi_filter_ndx].values[x].value)
 	  endfor
 	  call add_line(")")
 	endif
  endif
  ;153467
  if (financial_class_filter_ind)
     ;call add_line(concat("and e.financial_class_cd + 0 = ", trim(cnvtstring(financial_class_filter), 3)))  ;50792
     call add_line(build("and e.financial_class_cd = ", financial_class_filter))  ;50792
  endif
 
  if (location_filter_ind)
     ;call add_line(concat("and e.loc_nurse_unit_cd + 0 = ", trim(cnvtstring(location_filter), 3)))  ;50792
     call add_line(build("and e.loc_nurse_unit_cd = ", location_filter))  ;50792
  endif
 
  if (facility_filter_ind)
     ;call add_line(concat("and e.loc_facility_cd + 0 = ", trim(cnvtstring(facility_filter), 3)))  ;50792
     call add_line(build("and e.loc_facility_cd = ", facility_filter))  ;50792
  endif
 
  if (building_filter_ind)
     ;call add_line(concat("and e.loc_building_cd + 0 = ", trim(cnvtstring(building_filter), 3)))  ;50792
     call add_line(build("and e.loc_building_cd = ", building_filter))  ;50792
  endif
  
  
  ;+236295
  if (dFacilityOnlyFilterInd)
     call add_line(build("and e.loc_facility_cd = ", dFacilityOnlyFilterCd))
  endif
  ;-236295
  
 
  if (medical_service_filter_ind)
     ;call add_line(concat("and e.med_service_cd + 0 = ", trim(cnvtstring(medical_service_filter), 3)))  ;50792
     call add_line(build("and e.med_service_cd = ", medical_service_filter))   ;50792
  endif
  /*153467.......*/
   if (medical_service_multi_filter_ndx >0)  
 	if (size(request->filter[medical_service_multi_filter_ndx].values,5) >0)
 	  call add_line("and e.med_service_cd + 0 in (")
 	  for (x=1 to size(request->filter[medical_service_multi_filter_ndx].values,5))
 	      if (x = 1)
 	      call add_line(request->filter[medical_service_multi_filter_ndx].values[x].value)
 	      else
 	    	call add_line(build(",", request->filter[medical_service_multi_filter_ndx].values[x].value))
 	      endif
 	  endfor
 	  call add_line(")")
 	endif
  endif
   ;153467
 
  if (registration_date_filter_ind)
    call add_line(concat("and e.reg_dt_tm + 0 between cnvtdatetime(", quote, registration_date_filter_start, quote,
                         ") and cnvtdatetime(", quote, registration_date_filter_end, quote, ")"))
  endif
 
  if (skip_discharged)
    call add_line(concat("and (e.disch_dt_tm + 0 > cnvtdatetime(curdate, curtime3)"))
    call add_line("or e.disch_dt_tm is NULL)")
  endif
 
  if (authorized)
     ;call add_line(concat("and e.data_status_cd + 0 = ", trim(cnvtstring(authorized_cd), 3)))  ;50792
     call add_line(build("and e.data_status_cd = ", authorized_cd))  ;50792
  endif
 
  if (discharge_days > 0)
    call add_line(concat("and (e.disch_dt_tm + 0 > cnvtdatetime(curdate - ", trim(cnvtstring(discharge_days), 3), ", curtime3)"))
    call add_line("or e.disch_dt_tm is NULL)")
  endif
 
;Build the remaining encounter table where clause
  if (show_pending_canrej_mode = 1) ;sc018
  	call add_line("and e.encntr_status_cd != cancelled_encntr_status_cd")
  else
     if (canceled_encounter_mode)
        ;+50792                                                                                      ;012
        ;call add_line("and e.active_ind + 0 = 0")                                                      ;012
        ;call add_line(concat("and e.active_status_cd + 0 = ", trim(cnvtstring(deleted_cd), 3)))        ;012
        call add_line("and e.active_ind = 0")
        call add_line(build("and e.active_status_cd = ", deleted_cd))
        ;-50792
     else                                                                                               ;012
        ;call add_line("and e.active_ind + 0 = 1")  ;50792
        call add_line("and e.active_ind = 1")  ;50792
     endif
  endif ;sc018
 
  ;+50792 - Moved beg_effective_dt_tm up under e.person_id = b/c it is part of the index        ;012
  ;call add_line("and e.beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)")
  ;call add_line("and e.end_effective_dt_tm + 0 >= cnvtdatetime(curdate, curtime3)")
  call add_line("and e.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
  ;-50792
 
  ;165024++
  ;If the "do not show removed waitlist encounters indicator" is passed, use a "not exists" to grab all the
  ;encounters, execpt the ones that are class code = "WAITLIST" and have a removal date/time.
    if (do_not_show_wl_removed_ind)
       call add_line("and not exists")
       call add_line("(select wl.encntr_id")
       call add_line("from pm_wait_list wl")
       call add_line("where wl.encntr_id = e.encntr_id")
       call add_line("and wl.removal_dt_tm != null")
       call add_line("and e.encntr_type_class_cd = cv69_WAITLIST_cd)")
    endif
  ;165024--
  ;==>Encounter service date range filters.
  ;131446+
  if (encntr_date_range_begin_filter_ind or encntr_date_range_end_filter_ind)
     ;==>default the magic date if one of the two filters was not filled out.
  	 if (not encntr_date_range_begin_filter_ind)
        set encntr_date_range_begin_filter = format(cnvtdatetime("01-JAN-1800 00:00:00.00"),";;Q")
  	 endif
  	 if (not encntr_date_range_end_filter_ind)
        set encntr_date_range_end_filter = format(cnvtdatetime("31-DEC-2100 00:00:00"),";;Q")
  	 endif
 
  	 ;==>Encounter service date range qualify as following:
	 ;  Reg_dt_tm<---------------------->Disch_dt_tm
     ;           |     <---------->     |
     ;      <----|------------->	    |
     ;           |               <------|-------->
     ;        <--|----------------------|---->
     call add_line(concat("and( (e.reg_dt_tm + 0 between cnvtdatetime(", quote, encntr_date_range_begin_filter, quote,
                         ") and cnvtdatetime(", quote, encntr_date_range_end_filter, quote, "))"))
     call add_line(concat("or (e.disch_dt_tm + 0 between cnvtdatetime(", quote, encntr_date_range_begin_filter, quote,
                         ") and cnvtdatetime(", quote, encntr_date_range_end_filter, quote, "))"))
  	 call add_line(concat("or (e.reg_dt_tm + 0 <= cnvtdatetime(", quote, encntr_date_range_begin_filter, quote, ")"))
  	 call add_line(concat("and e.disch_dt_tm + 0 >= cnvtdatetime(", quote, encntr_date_range_end_filter, quote,"))"))
 
     ;==>It can fall out of the search range and still considered in service range if reg or disch date is null.
  	 call add_line(concat("or (e.disch_dt_tm + 0 = null and e.reg_dt_tm + 0 <= cnvtdatetime(",quote,
  	                       encntr_date_range_begin_filter,quote,"))"))
  	 call add_line(concat("or (e.reg_dt_tm + 0 = null and e.disch_dt_tm + 0 >= cnvtdatetime(",quote,
  	                       encntr_date_range_end_filter,quote,")))"))
  endif
  ;131446-
 
;013 - If filtering for pending logic mode, perform an exists.
	if (pending_logic_mode)								;013
	   call add_line("and exists")					;013
       call add_line("(select ep.encntr_pending_id")   	;013
       call add_line("from encntr_pending ep")			;013
       call add_line("where ep.encntr_id = e.encntr_id")			;013
       call add_line("and ep.process_status_flag + 0 = 2)") ;ACTION_IN_PROCESS	;013
    endif													;013
 
/*sc018-start
        if (show_pending_canrej_mode)
		call add_line("and exists")
		call add_line("(select ep.encntr_pending_id")
		call add_line("from encntr_pending ep")
		call add_line("where ep.encntr_id = e.encntr_id")
		  call add_line("and ep.pending_type_flag = 3")
		call add_line("and ep.process_status_flag + 0 = 3)") ;USER_CANCELLED
        endif*/
        if (show_pending_encntr_mode)
		   call add_line("and exists")
		   call add_line("(select ep.encntr_pending_id")
		   call add_line("from encntr_pending ep")
		   call add_line("where ep.encntr_id = e.encntr_id")
 
	       if (show_pending_canrej_mode != 1)
	          call add_line("and ep.pending_type_flag = 3")
		      call add_line("and ep.process_status_flag + 0 = 2)") ;ACTION_IN_PROCESS
  	       else
  	  	      call add_line("and ep.pending_type_flag = 3)")
  	       endif
        endif
/*sc018-end*/
 
;If the encounter (doctor) relationship was provided, filter against the
;relationship table assuming the current user is the personnel
  ;131446 if (encounter_relation_filter_ind)
  if (encounter_relation_filter_ind or encntr_relation_prsnl_id_filter_ind) ;131446
    call add_line("join r")
    call add_line("where r.encntr_id = e.encntr_id")
 
    ;+50792
    ;call add_line(concat("and r.prsnl_person_id + 0 = ", trim(cnvtstring(user_id), 3)))
    ;call add_line(concat("and r.encntr_prsnl_r_cd + 0 = ", trim(cnvtstring(encounter_relation_filter), 3)))
    if (encounter_relation_filter_ind) ;131446
       call add_line(build("and r.encntr_prsnl_r_cd = ", encounter_relation_filter))
    endif
    ;-50792
 
 	;131446+
 	; Qualify passed in prsnl id otherwise qualify the logged in user_id (existing logic)
 	if (encntr_relation_prsnl_id_filter_ind)
 	   call add_line(build("and r.prsnl_person_id + 0 = ", encntr_relation_prsnl_id_filter))
 	endif
 	;131446-
 
    if (canceled_encounter_mode)
       ;+50792                                                                                     ;012
       ;call add_line("and r.active_ind + 0 = 0")                                                      ;012
       ;call add_line(concat("and r.active_status_cd + 0 = ", trim(cnvtstring(deleted_cd), 3)))        ;012
       call add_line("and r.active_ind = 0")
       call add_line(build("and r.active_status_cd = ", deleted_cd))
       ;-50792
    else                                                                                                               ;012
      ;call add_line("and r.active_ind + 0 = 1")  ;50792
      call add_line("and r.active_ind = 1")  ;50792
    endif
 
    ;+50792                                                                                                             ;012
    ;call add_line("and r.beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)")
    ;call add_line("and r.end_effective_dt_tm + 0 >= cnvtdatetime(curdate, curtime3)")
    if (not encntr_relation_prsnl_id_filter_ind)  ;131446
    	call add_line(build("and r.prsnl_person_id + 0 = ", user_id))
    endif
 
    call add_line("and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call add_line("and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    ;-50792
  endif
  
;344225++
;Handle Search Quality   
  if (encounter_ident_filter_ind)
     free set table_alias
     set table_alias = concat("ea", trim(cnvtstring(1), 3))
     call add_line(concat("join ", trim(table_alias, 3)))
     call add_line(concat("where ", trim(table_alias, 3), ".encntr_id = e.encntr_id"))
     call add_line(concat("and trim(", trim(table_alias, 3), ".alias) in ("))

     set tmpstr = ""     
     for (i = 1 to encounter_alias_filter_count)
        if (findstring(encounter_alias_filters->filter[i]->value_low,tmpstr,1,0) = 0)
           set tmpstr = build(tmpstr,"'",encounter_alias_filters->filter[i]->value_low,"'")
           set tmpstr = concat(tmpstr,",")
	endif
     endfor
	 
     ;remove the last comma
     set tmpstr = substring(1, size(tmpstr) - 1, tmpstr)
	 
     call add_line(build(tmpstr,")"))

     set tmpstr = ""     
     set poolcnt = 0
	 
     for (i = 1 to encounter_alias_filter_count)
        if (encounter_alias_filters->filter[i]->alias_pool_cd > 0.0)
          if (findstring(build(encounter_alias_filters->filter[i]->alias_pool_cd),tmpstr,1,0) = 0)
             set tmpstr = build(tmpstr,encounter_alias_filters->filter[i]->alias_pool_cd,",")
             set poolcnt = poolcnt + 1
          endif
	endif
     endfor
 
     ;Only add if poolcnt > 1
     if (poolcnt > 0)
        call add_line(concat("and ( ", trim(table_alias, 3), ".alias_pool_cd + 0) in ("))
        ;remove the last comma
	set tmpstr = substring(1, size(tmpstr) - 1, tmpstr)
        call add_line(build(tmpstr))
        call add_line("))")
     endif

     ;Turn off the encounter alias filter stuff
     set encounter_alias_filter_ind = 0
   endif
;344225--  
  
;If any encounter alias filters were provided, filter against the encounter alias table for each
  if (encounter_alias_filter_ind)
    for (i = 1 to encounter_alias_filter_count)
      free set table_alias
      set table_alias = concat("ea", trim(cnvtstring(i), 3))
 
      call add_line(concat("join ", trim(table_alias, 3)))
      call add_line(concat("where ", trim(table_alias, 3), ".encntr_id = e.encntr_id"))
 
      call add_line(concat("and trim(", trim(table_alias, 3), ".alias) between '",                                     ;011
                           encounter_alias_filters->filter[i]->value_low, "' and '",                                   ;011
                           encounter_alias_filters->filter[i]->value_high, "'"))                                       ;011
 
;011      call add_line(concat("and trim(", trim(table_alias, 3), ".alias) like ",
;011                           quote, encounter_alias_filters->filter[i]->value, quote))
 
      ;+50792
      ;call add_line(concat("and ", trim(table_alias, 3), ".encntr_alias_type_cd + 0 = ",
      ;                     trim(cnvtstring(encounter_alias_filters->filter[i]->alias_type_cd), 3)))
      call add_line(concat("and ", trim(table_alias, 3), ".encntr_alias_type_cd + 0 = ",
                           build(encounter_alias_filters->filter[i]->alias_type_cd)))
      ;-50792
 
      if (encounter_alias_filters->filter[i]->alias_pool_cd > 0.0)
         ;+50792
         ;call add_line(concat("and ", trim(table_alias, 3), ".alias_pool_cd + 0 = ",
         ;                    trim(cnvtstring(encounter_alias_filters->filter[i]->alias_pool_cd), 3)))
         call add_line(concat("and ", trim(table_alias, 3), ".alias_pool_cd + 0 = ",
                             build(encounter_alias_filters->filter[i]->alias_pool_cd)))
         ;-50792
      endif
 
      ;+50792
      /*
      if (canceled_encounter_mode)                                                                                     ;012
        call add_line(concat("and ", trim(table_alias, 3), ".active_ind + 0 = 0"))                                     ;012
        call add_line(concat("and ", trim(table_alias, 3), ".active_status_cd + 0 = ", trim(cnvtstring(deleted_cd), 3))) ;012
      else                                                                                                             ;012
        call add_line(concat("and ", trim(table_alias, 3), ".active_ind + 0 = 1"))
      endif                                                                                                            ;012
      call add_line(concat("and ", trim(table_alias, 3), ".beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)"))
      */
 
      if (canceled_encounter_mode)
         call add_line(concat("and ", trim(table_alias, 3), ".active_ind = 0"))
         call add_line(concat("and ", trim(table_alias, 3), ".active_status_cd = ", build(deleted_cd)))
      else
         call add_line(concat("and ", trim(table_alias, 3), ".active_ind = 1"))
      endif
 
      call add_line(concat("and ", trim(table_alias, 3), ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)"))
      
      ;+74689
      ;;71811++
      ;call add_line(concat("and ", trim(table_alias, 3), ".end_effective_dt_tm > cnvtdatetime(curdate, curtime3)"))
      ;;71811--
      ;-74689
      
      ;-50792
    endfor
  endif
 
;***D015***
;If any profit encounter alias filters were provided, filter against the encounter alias table for each
  ;if ((profit_encounter_alias_filter_ind) and  (check_profit_encntr_alias))  ;50792
  if (profit_encounter_alias_filter_ind)  ;50792
    for (i = 1 to profit_encounter_alias_filter_count)
      free set table_alias
      set table_alias = concat("pea", trim(cnvtstring(i), 3))
 
      call add_line(concat("join ", trim(table_alias, 3)))
      call add_line(concat("where ", trim(table_alias, 3), ".encntr_id = e.encntr_id"))
 
      call add_line(concat("and trim(", trim(table_alias, 3), ".alias) between '",
                           profit_encounter_alias_filters->filter[i]->value_low, "' and '",
                           profit_encounter_alias_filters->filter[i]->value_high, "'"))
 
      ;+50792
      ;call add_line(concat("and ", trim(table_alias, 3), ".pft_encntr_alias_type_cd  = ",
      ;                     trim(cnvtstring(profit_encounter_alias_filters->filter[i]->alias_type_cd), 3)))
      call add_line(concat("and ", trim(table_alias, 3), ".pft_encntr_alias_type_cd = ",
                           build(profit_encounter_alias_filters->filter[i]->alias_type_cd)))
      ;-50792
 
      if (profit_encounter_alias_filters->filter[i]->alias_pool_cd > 0.0)
         ;+50792
         ;call add_line(concat("and ", trim(table_alias, 3), ".alias_pool_cd + 0 = ",
         ;                    trim(cnvtstring(profit_encounter_alias_filters->filter[i]->alias_pool_cd), 3)))
         call add_line(concat("and ", trim(table_alias, 3), ".alias_pool_cd + 0 = ",
                             build(profit_encounter_alias_filters->filter[i]->alias_pool_cd)))
         ;-50792
      endif
 
      ;+50792
      /*
      if (canceled_encounter_mode)
         call add_line(concat("and ", trim(table_alias, 3), ".active_ind + 0 = 0"))
         call add_line(concat("and ", trim(table_alias, 3), ".active_status_cd + 0 = ", trim(cnvtstring(deleted_cd), 3)))
      else
         call add_line(concat("and ", trim(table_alias, 3), ".active_ind + 0 = 1"))
      endif
      call add_line(concat("and ", trim(table_alias, 3), ".beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)"))
      */
 
      if (canceled_encounter_mode)
         call add_line(concat("and ", trim(table_alias, 3), ".active_ind = 0"))
         call add_line(concat("and ", trim(table_alias, 3), ".active_status_cd = ", build(deleted_cd)))
      else
         call add_line(concat("and ", trim(table_alias, 3), ".active_ind = 1"))
      endif
 
      call add_line(concat("and ", trim(table_alias, 3), ".beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)"))
      ;-50792
    endfor
  endif
;****D015****
 
 
;If location was used, filter against the encounter domain table
  if (building_filter_ind or facility_filter_ind or location_filter_ind)
    call add_line("join d")
    call add_line("where d.encntr_id = e.encntr_id")
 
    ;+50792
    /*
    call add_line(concat("and d.encntr_domain_type_cd + 0 = ", trim(cnvtstring(census_type_cd), 3)))
    if (location_filter_ind)
      call add_line(concat("and d.loc_nurse_unit_cd + 0 = ", trim(cnvtstring(location_filter), 3)))
    endif
    if (facility_filter_ind)
      call add_line(concat("and d.loc_facility_cd + 0 =  ", trim(cnvtstring(facility_filter), 3)))
    endif
    if (building_filter_ind)
      call add_line(concat("and d.loc_building_cd + 0 = ", trim(cnvtstring(building_filter), 3)))
    endif
    call add_line("and d.active_ind + 0 = 1")
    call add_line("and d.beg_effective_dt_tm + 0 <= cnvtdatetime(curdate, curtime3)")
    call add_line("and d.end_effective_dt_tm + 0 >= cnvtdatetime(curdate, curtime3)")
    */
 
    call add_line(build("and d.encntr_domain_type_cd = ", census_type_cd))
 
    if (location_filter_ind)
      call add_line(build("and d.loc_nurse_unit_cd = ", location_filter))
    endif
 
    if (facility_filter_ind)
      call add_line(build("and d.loc_facility_cd =  ", facility_filter))
    endif
 
    if (building_filter_ind)
      call add_line(build("and d.loc_building_cd = ", building_filter))
    endif
 
    call add_line("and d.active_ind = 1")
    call add_line("and d.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call add_line("and d.end_effective_dt_tm + 0 > cnvtdatetime(curdate, curtime3)")
    ;-50792
  endif
 
;~VI024 Begin
;If we're in ProFit account or guarantor mode then join to the pft_encntr table
;to limit the clinical encounters returned to only those that have at least one
;financial encounter related.
  if (pft_mode_ind > 0)	
    call add_line("join pe")
    call add_line("where pe.encntr_id = e.encntr_id")
    if (pft_account_filter_ind > 0)
      call add_line("and pe.acct_id = pft_account_filter")      ;~ Filter by acct_id if it's passed in (Account Mode only)
    endif
    if (pft_encounter_status_filter_ind > 0)
      call add_line("and pe.pft_encntr_status_cd = pft_encounter_status_filter") ;~ Filter by ProFit encounter status.
    endif
    call add_line("and pe.active_ind = 1")
  endif
;~VI024 End

  ;+44205
  if (security_ind)
    call add_line("join cv")
    call add_line("where cv.code_value = outerjoin(e.confid_level_cd)")
  endif
  ;-44205
 
;Always order by registration date
  ;call add_line("order by e.reg_dt_tm desc")  ;50792
  
  ;+68609 - We have to leave it this way b/c the client wants the NULL values to
  ;  display on top of the valid values so it is really not ordered descending
  ;call add_line("order by cnvtdatetime(e.reg_dt_tm) desc")  ;50792  
  
  ;+198210
  ;call add_line("order by e.reg_dt_tm desc")  
  ;;-68609 
  
  if (dSearchOrderByOpt > 0) 
     call add_line("order by cnvtdatetime(e.reg_dt_tm) desc")  
  else
     call add_line("order by e.reg_dt_tm desc")  
  endif
  ;-198210
 
;Keep track of the found encounter IDs
 
  call add_line("head e.encntr_id")    ;111184
  ;call add_line("detail")             ;111184
   call add_line("encounter_count = encounter_count + 1")
 
  ;+50792
  ;call add_line("stat = alterlist(encounters->encounter, encounter_count)")
 
  call add_line("if (mod(encounter_count, 10) = 1)")
  call add_line("   stat = alterlist(encounters->encounter, encounter_count + 9)")
  call add_line("endif")
  ;-50792
 
  call add_line("encounters->encounter[encounter_count]->encounter_id = e.encntr_id")
  call add_line("encounters->encounter[encounter_count]->valid = 1")
 
 ;~VI024 Begin
 ;If we're in ProFit's Account/Guarantor mode, we need to store the pft_encntr_id when retrieving
 ;the initial list.
  if (pft_mode_ind > 0)
     call add_line("encounters->encounter[encounter_count]->pft_encounter_id = pe.pft_encntr_id")
  endif
  ;~VI024 End

/*014*/
;Keep track of limit data is in use
	if( limit_ind_exists = 1 )
		call add_line("encounters->encounter[encounter_count]->encntr_type_class_cd = e.encntr_type_class_cd")
 
		;+50792
		;call add_line("encounters->encounter[encounter_count]->disch_dt_tm = e.disch_dt_tm")
		;call add_line("encounters->encounter[encounter_count]->depart_dt_tm = e.depart_dt_tm")
	    call add_line("encounters->encounter[encounter_count]->disch_dt_tm = cnvtdatetime(e.disch_dt_tm)")
		call add_line("encounters->encounter[encounter_count]->depart_dt_tm = cnvtdatetime(e.depart_dt_tm)")
	    ;-50792
	endif
/*014*/
 
  ;+44205
  if (security_ind)
    call add_line("encounters->encounter[encounter_count]->level = cv.collation_seq")
    call add_line("encounters->encounter[encounter_count]->org_id = e.organization_id")
  endif
  ;-44205
 
;Finish the select with the proper with clause
  call add_line("with nocounter go")
 
  ;call dump_buffer(1) ;44205, for debugging only
 
;Perform the select statement
  call perform_buffer(1)
 
  ;+50792
  if (encounter_count > 0)
     set stat = alterlist(encounters->encounter, encounter_count)
  endif
  ;-50792
 
#2999_SEARCH_EXIT
 
;131446+
;==>Get location code for an org
subroutine getFacilityCdByOrgId (orgId)
   set t_facility_type_cd = 0.0
   set t_loc_facility_cd = 0.0
   set stat = uar_get_meaning_by_codeset(222,"FACILITY",1,t_facility_type_cd)
   if (t_facility_type_cd != 0)
       select into "nl:"
       from location l
       where l.organization_id = orgId
         and l.location_type_cd = t_facility_type_cd
         and l.active_ind = 1
         and l.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime3)
         and l.end_effective_dt_tm >= cnvtdatetime(curdate,curtime3)
       detail
         t_loc_facility_cd = l.location_cd
       with nocounter
   endif
   return (t_loc_facility_cd)
end
;131446-

;+201820
subroutine claimNumberSearch(myFilter)
/***********************************
* ProFit Claim Number Search       *
*----------------------------------*
* Inputs:  myFilter = Filter value *
*                                  *
* Outputs: True/False              *
************************************/

   ;Local variables
   declare sPFTAcctId = vc with noconstant("")
   
   if (request->debug)
      call echo("Entering claimNumberSearch().")
      call echo(build2("claim_number_filter = ", myFilter))
      call echo(build2("pft_account_filter = ", pft_account_filter))
   endif
   
   ;Validate input
   if (textlen(trim(myFilter,3)) <= 0) 
      return(FALSE)
   endif    
   
   ;Check optional filter on pft_acct_id
   if (pft_account_filter_ind and pft_account_filter > 0)
	  set sPFTAcctId = "pe.acct_id + 0 = pft_account_filter"
   else
      set sPFTAcctId = "1 = 1"
   endif
   
   ;Reset this variable
   set encounter_count = 0
   
   
   ;Do the Claim number search
   select distinct into 'nl:' 
     e.encntr_id
    from bill_rec b, bill_reltn br, benefit_order bo, pft_encntr pe, encounter e, code_value cv
     plan b 
      where b.bill_nbr_disp = myFilter
        and b.bill_class_cd = dClaimBillClassCd
        and b.active_ind = 1
     join br 
      where br.corsp_activity_id = b.corsp_activity_id
        and br.bill_vrsn_nbr = b.bill_vrsn_nbr
        and br.parent_entity_name = "BENEFIT ORDER"
        and br.active_ind = 1
     join bo
      where bo.benefit_order_id = br.parent_entity_id
        and bo.active_ind = 1
     join pe
      where pe.pft_encntr_id = bo.pft_encntr_id
        and pe.active_ind = 1
        and parser(sPFTAcctId)
     join e
      where e.encntr_id = pe.encntr_id
        and e.person_id + 0 = request->person_id
        and e.active_ind = 1
     join cv
      where cv.code_value = outerjoin(e.confid_level_cd)
    detail
      encounter_count = encounter_count + 1
      
      ;Expecting a small number of results
      stat = alterlist(encounters->encounter, encounter_count)
 
      encounters->encounter[encounter_count]->encounter_id = e.encntr_id
      encounters->encounter[encounter_count]->valid = 1
      encounters->encounter[encounter_count]->pft_encounter_id = pe.pft_encntr_id
      encounters->encounter[encounter_count]->pft_acct_id = pe.acct_id
      encounters->encounter[encounter_count]->pft_claim_id = b.corsp_activity_id
      encounters->encounter[encounter_count]->encounter_type_cd = e.encntr_type_cd
      encounters->encounter[encounter_count]->organization_id = e.organization_id ;200977
      if (security_ind)
         encounters->encounter[encounter_count]->level = cv.collation_seq
         encounters->encounter[encounter_count]->org_id = e.organization_id
      endif
   with nocounter
   
   
   if (request->debug)
      call echo("claimNumberSearch() results:")
      call echorecord(encounters)
   endif

   return(TRUE)
end
;-201820


;+201820
subroutine statementNumberSearch(myFilter)
/***********************************
* ProFit Statement Number Search   *
*----------------------------------*
* Inputs:  myFilter = Filter value *
*                                  *
* Outputs: True/False              *
************************************/
   ;Local variables
   declare sPFTAcctId = vc with noconstant("")
   
   if (request->debug)
      call echo("Entering statementNumberSearch().")
      call echo(build2("statement_number_filter = ", myFilter))
      call echo(build2("pft_account_filter = ", pft_account_filter))
   endif
   
   ;Validate input
   if (textlen(trim(myFilter,3)) <= 0) 
      return(FALSE)
   endif 
   
   ;Check optional filter on pft_acct_id
   if (pft_account_filter_ind and pft_account_filter > 0)
	  set sPFTAcctId = "pe.acct_id + 0 = pft_account_filter"
   else
      set sPFTAcctId = "1 = 1"
   endif
   
   ;Reset this variable
   set encounter_count = 0
   
   
   ;Do the Statement number search
   select distinct into 'nl:' 
     e.encntr_id
    from bill_rec b, bill_reltn br, pft_encntr pe, encounter e, code_value cv
     plan b 
      where b.bill_nbr_disp = myFilter
        and b.bill_class_cd = dStatementBillClassCd
        and b.active_ind = 1
     join br 
      where br.corsp_activity_id = b.corsp_activity_id
        and br.bill_vrsn_nbr = b.bill_vrsn_nbr
        and br.parent_entity_name = "PFTENCNTR"
        and br.active_ind = 1
     join pe
      where pe.pft_encntr_id = br.parent_entity_id
        and pe.active_ind = 1
        and parser(sPFTAcctId)
     join e
      where e.encntr_id = pe.encntr_id
        and e.person_id + 0 = request->person_id
        and e.active_ind = 1
     join cv
      where cv.code_value = outerjoin(e.confid_level_cd)
    detail
      encounter_count = encounter_count + 1
      
      ;Expecting a small number of results
      stat = alterlist(encounters->encounter, encounter_count)
 
      encounters->encounter[encounter_count]->encounter_id = e.encntr_id
      encounters->encounter[encounter_count]->valid = 1
      encounters->encounter[encounter_count]->pft_encounter_id = pe.pft_encntr_id
      encounters->encounter[encounter_count]->pft_acct_id = pe.acct_id
      encounters->encounter[encounter_count]->pft_statement_id = b.corsp_activity_id
      encounters->encounter[encounter_count]->encounter_type_cd = e.encntr_type_cd 
      encounters->encounter[encounter_count]->organization_id = e.organization_id ;200977
      if (security_ind)
         encounters->encounter[encounter_count]->level = cv.collation_seq
         encounters->encounter[encounter_count]->org_id = e.organization_id
      endif
   with nocounter  
   
   
   if (request->debug)
      call echo("statementNumberSearch() results:")
      call echorecord(encounters)
   endif  

   return(TRUE)
end
;-201820

 
;73523 #3000_FILTER
subroutine determine_filters(sc_dummy) ;73523
;44205 - commenting out here but adding up above.
/*
;Allow the caller to over-ride the system security indicator
  if (request->security != 0)
    if (request->security > 0)
      set security_ind = request->security
    else
      set security_ind = 0
    endif
  endif
*/
 
;Perform security filtering
  if (security_ind)
;Create a record structure to hold the user's relationships to organizations
    free set user_orgs
    record user_orgs
    (
      1  org[*]
         2  level                = i4
         2  org_id               = f8
    )
    set user_org_count = 0
 ;73523++
 /*
;Grab user/organization relationships
    select into "nl:" r.organization_id
      ;/*JC020/
      from prsnl_org_reltn r, code_value c ;dummyt d
      ;/*JC020/
      plan r
     where r.person_id = user_id
       ;and r.organization_id > 0.0  ;50792
       and r.organization_id + 0 > 0.0  ;50792 - I am not sure that it was hitting the correct index
       and r.active_ind = 1
       and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
       and r.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
      ; /*JC020/
       ;join d
       join c
     where c.code_value = outerjoin(r.confid_level_cd)
     ;/*JC020/
     order by r.organization_id
    detail
      user_org_count = user_org_count + 1
 
 
 
 
      ;+50792
      ;stat = alterlist(user_orgs->org, user_org_count)
 
      if (mod(user_org_count, 10) = 1)
         stat = alterlist(user_orgs->org, user_org_count + 9)
      endif
      ;-50792
 
      user_orgs->org[user_org_count]->org_id = r.organization_id
      user_orgs->org[user_org_count]->level = c.collation_seq
     /*JC020/
     with nocounter ;outerjoin = d, dontcare = c
 
     ;+50792
     if (user_org_count > 0)
        set stat = alterlist(user_orgs->org, user_org_count)
     endif
     ;-50792
 
  */
 
    if (CHECKPRG("SAC_GET_USER_ORGANIZATIONS") > 0)
      free record userOrgs
      record userOrgs
      (1 organizations[*]
         2 organization_id = f8
         2 confid_cd = f8
         2 confid_level = i4
      )
 
      execute sac_get_user_organizations with replace("REPLY", "USERORGS")
      set user_org_count = size(userOrgs->organizations, 5)
 
      if(user_org_count > 0)
        set stat = alterlist(user_orgs->org,user_org_count)
 
        for(lCnt = 1 to user_org_count)
          set user_orgs->org[lCnt]->org_id = userOrgs->organizations[lCnt].organization_id
          set user_orgs->org[lCnt]->level = userOrgs->organizations[lCnt].confid_level
        endfor
 
      endif
    else
      set reply->status_data->operationname = "fillreply"
      set reply->status_data->subeventstatus[1]->targetobjectname = "pm_sch_get_persons"
      set reply->status_data->subeventstatus[1]->targetobjectvalue = "Could not find sac_get_user_organizations script"
      set reply->status_data->status = "F"
      return (0)
    endif
 ;73523--
 
    /*JC020*/
;Grab encounter/organization relationships for every encounter we've found
    /*JC020*/
    ;+44205 - comment out and add to main encounter select above in 2000_SEARCH
    ;
    ;if(encounter_count > 0) ;jc022
    ;select into "nl:" e.organization_id
    ;  from encounter e, code_value c, (dummyt d1 with seq = value(encounter_count)) ;dummyt d2
    ;  /*JC020*/
    ;   plan d1
    ;  join e
    ; where e.encntr_id = encounters->encounter[d1.seq]->encounter_id
    ;   and e.organization_id > 0.0
    ;  /*JC020*/
    ;  ;join d2
    ;   join c
    ; where c.code_value = outerjoin(e.confid_level_cd)
    ; /*JC020*/
    ;detail
    ;  encounters->encounter[d1.seq]->level = c.collation_seq
    ;  encounters->encounter[d1.seq]->org_id = e.organization_id
    ;/*JC020*/
    ;with nocounter ;outerjoin = d2, dontcare = c
    ;endif ;jc022
    ;/*JC020*/
    ;-44205
 
;Now, compare the user's relationships with each encounter filtering out
;encounters that the user doesn't have privileges to see
    for (i = 1 to encounter_count)
      set valid = 0
      set encounter_level = encounters->encounter[i]->level
      set encounter_org_id = encounters->encounter[i]->org_id
 
      for (j = 1 to user_org_count)
        set user_level = user_orgs->org[j]->level
        set user_org_id = user_orgs->org[j]->org_id
 
        if (user_org_id = encounter_org_id)
          if (security_ind = 2)
            if (user_level >= encounter_level)
              set valid = 1
            endif
          else
            set valid = 1
          endif
        endif
 
        if (valid)
          set j = user_org_count + 1
        endif
      endfor
 
      set encounters->encounter[i]->valid = valid
    endfor
  endif
 
;If we're performing custom script logic, whip each valid encounter through the
;custom filtering script
  if (custom_script_ind)
    set application_number = 0
    set application_number = cnvtint(substring(3, 8, request->options))
    set task_number = 0
    set task_number = cnvtint(substring(11, 8, request->options))
    set user_id = request->user_id
    set user_position_cd = 0.0
 
    select into "nl:" p.position_cd
      from prsnl p
     where p.person_id = user_id
    detail
      user_position_cd = p.position_cd
    with nocounter
 
    for (psge_i = 1 to encounter_count)
      if (encounters->encounter[psge_i]->valid)
        set encntr_id = encounters->encounter[psge_i]->encounter_id
        set valid = 1
        execute PM_SCH_CHK_ENCOUNTER
        set encounters->encounter[psge_i]->valid = valid
      endif
    endfor
  endif
 
/*014*/
;Apply Limit Encounter Filtering if enabled (limit_ind = 1)
;This filtering uses a given date( disch_dt_tm or depart_dt_tm) and a number of days
;to determine whether or not to return the encounter to the front end.
;A count of the number of encounters limited is kept and returned to PMSearch.
	if( limit_ind_exists )
		if( request->limit_ind = 1 )
			;Apply limits to encounters
			set limited_count = 0
			
			if(encounter_count >0 and size(etc_rec->list,5) > 0) ;jc022
			select into "nl:"
			  from (dummyT d with seq=value(encounter_count)),
			       (dummyT d1 with seq=value(size(etc_rec->list,5)))
			  plan d
			 where encounters->encounter[d.seq]->valid = 1
			  join d1
			 where encounters->encounter[d.seq]->encntr_type_class_cd =
			         etc_rec->list[d1.seq]->encntr_type_class_cd
			detail
			  valid = 1
			  ;D017NumDays = 0
              NumDays = 0.0 ;D017
			  if( etc_rec->list[d1.seq]->num_days > 0 )
			  	;Apply limits to encounters that have specific limits for a given
					;Encounter Type Class.
					if( etc_rec->list[d1.seq]->date_option = 1 )
						;disch_dt_tm = date_option 1
                        if( encounters->encounter[d.seq]->disch_dt_tm > cnvtdatetime("01-JAN-1800 00:00:00.00") )
							NumDays = datetimediff(cnvtdatetime(curdate,curtime3),
						                    cnvtdatetime(encounters->encounter[d.seq]->disch_dt_tm))
						endif
					elseif( etc_rec->list[d1.seq]->date_option = 2 )
		     			;depart_dt_tm = date_option 2
		                if( encounters->encounter[d.seq]->depart_dt_tm > cnvtdatetime("01-JAN-1800 00:00:00.00") )
  					         NumDays = datetimediff(cnvtdatetime(curdate,curtime3),
						                    cnvtdatetime(encounters->encounter[d.seq]->depart_dt_tm))
						endif
					endif
 
					if( NumDays > etc_rec->list[d1.seq]->num_days )
						valid = 0
						limited_count = limited_count + 1
					endif
					encounters->encounter[d.seq]->valid = valid
				elseif( request->limit[1]->num_days > 0 ) ;D016
					;Apply limits to encounters that do not have specific limits for a given
					;Encounter Type Class.
					;NOTE: If Limit Encounter logic is enabled then the first limit element is the global
					; limit.
					if( request->limit[1]->date_option = 1 )
						;disch_dt_tm = date_option 1
			            if( encounters->encounter[d.seq]->disch_dt_tm > cnvtdatetime("01-JAN-1800 00:00:00.00") )
							NumDays = datetimediff(cnvtdatetime(curdate,curtime3),
						                    cnvtdatetime(encounters->encounter[d.seq]->disch_dt_tm))
						endif
					elseif( request->limit[1]->date_option = 2 )
						;depart_dt_tm = date_option 2
		                 if( encounters->encounter[d.seq]->depart_dt_tm > cnvtdatetime("01-JAN-1800 00:00:00.00") )
							NumDays = datetimediff(cnvtdatetime(curdate,curtime3),
						                    cnvtdatetime(encounters->encounter[d.seq]->depart_dt_tm))
						endif
					endif
 
					if( NumDays > request->limit[1]->num_days )
						valid = 0
						limited_count = limited_count + 1
					endif
					encounters->encounter[d.seq]->valid = valid
				endif
			with nocounter
 			endif ;jc022
			;After applying the Encounter Type Class limits to the pooled encounters, make sure
			;to return no more than the maximun number or encounters requested.
			if( request->max_encntr > 0 )
				set i = 0
				if(encounter_count > 0)
				select into "nl:"
			  	from (dummyT d with seq=value(encounter_count))
			  	plan d
			 	 where encounters->encounter[d.seq]->valid = 1
				detail
					i = i + 1
					if( i > request->max_encntr )
						encounters->encounter[d.seq]->valid = 0
						limited_count = limited_count + 1
					endif
				with nocounter
			endif
		endif
	endif
	endif ;jc022
/*014*/
 
;73523 #3999_FILTER_EXIT
  return (1) ;73523
end ;73523
 
#4000_REPLY
;Determine whether we're supposed to return every result
  set return_all = request->return_all
 
;Establish result indicator variables
  set admit_type_result_ind = return_all
  set arrive_date_result_ind = return_all
  set bed_result_ind = return_all
  set building_result_ind = return_all
  set client_result_ind = return_all
  set confidentiality_level_result_ind = return_all
  set depart_date_result_ind = return_all
  set discharge_date_result_ind = return_all
  set discharge_location_result_ind = return_all
  set encounter_result_ind = return_all
  set encounter_alias_result_ind = return_all
  set encounter_status_result_ind = return_all
  set encounter_type_result_ind = return_all
  set encounter_type_class_result_ind = return_all
  set estimated_arrive_date_result_ind = return_all
  set estimated_depart_date_result_ind = return_all
  set facility_result_ind = return_all
  set financial_class_result_ind = return_all
  set isolation_result_ind = return_all
  set medical_service_result_ind = return_all
  set nursing_unit_result_ind = return_all
  set preregistration_date_result_ind = return_all
  set preregistration_clerk_result_ind = return_all
  set provider_result_ind = return_all
  set reason_for_visit_result_ind = return_all
  set registration_date_result_ind = return_all
  set registration_clerk_result_ind = return_all
  set room_result_ind = return_all
  set vip_result_ind = return_all
  set billing_entity_result_ind = return_all    ;D015
  set program_service_ind = return_all ;D019
  set specialty_unit_ind = return_all  ;D019
  ;~VI024 Begin
  set pft_guarantor_name_result_ind = return_all
  set pft_encntr_status_result_ind = return_all
  set pft_start_date_result_ind = return_all
  set pft_end_date_result_ind = return_all
  set pft_encntr_current_balance_result_ind = return_all
  set pft_encntr_bad_debt_balance_result_ind = return_all
  set pft_encntr_alias_result_ind = return_all
  set pft_account_nbr = return_all
  ;~VI024 End
  set episode_name_ind = return_all ;BG025
  set response_cd_ind = return_all  ;42711
  set location_extension_ind = return_all ;145471
  set waitlist_removal_dt_tm_ind = return_all ;153466
  set primary_guarantor_result_ind = return_all  ;292506
  set primary_health_plan_result_ind = return_all  ;301414
  set primary_payer_result_ind = return_all  ;301414
  
 
;If we're returning all results, populate the requested result structure
;with important encounter aliases and provider types
  if (return_all)
    set result_count = size(request->result, 5) + 4
    set stat = alterlist(request->result, result_count)
    set request->result[result_count - 3]->flag = ENCOUNTER_ALIAS_FLAG
    set request->result[result_count - 3]->meaning = "FIN NBR"
    set request->result[result_count - 2]->flag = ENCOUNTER_ALIAS_FLAG
    set request->result[result_count - 2]->meaning = "MRN"
    set request->result[result_count - 1]->flag = PROVIDER_FLAG
    set request->result[result_count - 1]->meaning = "ADMITDOC"
    set request->result[result_count]->flag = PROVIDER_FLAG
    set request->result[result_count]->meaning = "ATTENDDOC"
  endif
 
;Initialize variables
  set encounter_alias_result_count = 0
  set provider_result_count = 0
 
;Determine the result indicators
  for (i = 1 to size(request->result, 5))
    case (request->result[i]->flag)
      of ADMIT_TYPE_FLAG:
        set admit_type_result_ind = 1
        set encounter_result_ind = 1
      of ARRIVE_DATE_FLAG:
        set arrive_date_result_ind = 1
        set encounter_result_ind = 1
      of BED_FLAG:
        set bed_result_ind = 1
        set encounter_result_ind = 1
      of BUILDING_FLAG:
        set building_result_ind = 1
        set encounter_result_ind = 1
      of CLIENT_FLAG:
        set client_result_ind = 1
      of CONFIDENTIALITY_LEVEL_FLAG:
        set confidentiality_level_result_ind = 1
        set encounter_result_ind = 1
      of DEPART_DATE_FLAG:
        set depart_date_result_ind = 1
        set encounter_result_ind = 1
      of DISCHARGE_DATE_FLAG:
        set discharge_date_result_ind = 1
        set encounter_result_ind = 1
      of DISCHARGE_LOCATION_FLAG:
        set discharge_location_result_ind = 1
        set encounter_result_ind = 1
      of ENCOUNTER_ALIAS_FLAG:
        if (encounter_alias_result_count <= 0)
          free set encounter_alias_results
          record encounter_alias_results
          (
            1  result[*]
               2  alias_type_cd           = f8
               2  meaning                 = vc
               2  text                    = vc
          )
        endif
 
        free set meaning
        set meaning = request->result[i]->meaning
 
        if (size(trim(meaning, 3)) > 0)
          set new_meaning = 1
          for (j = 1 to encounter_alias_result_count)
            if (encounter_alias_results->result[j]->meaning = meaning)
              set new_meaning = 0
              set j = encounter_alias_result_count + 1
            endif
          endfor
 
          if (new_meaning)
            set alias_type_cd = 0.0
            /*JC020*/
            /*
             select into "nl:" c.code_value
              from code_value c
             where c.code_set = 319
               and c.cdf_meaning = meaning
               and c.active_ind = 1
               and c.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
               and c.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
            detail
              alias_type_cd = c.code_value
            with nocounter
            */
 
            ;+50792
	        ;set alias_type_cd = meaning_code(319, meaning)
	        set alias_type_cd = 0.0
 
	        set stat = uar_get_meaning_by_codeset(319, nullterm(meaning), 1, alias_type_cd)
	        ;-50792
 
	    /*JC020*/
 
            if (alias_type_cd > 0.0)
              set encounter_alias_result_count = encounter_alias_result_count + 1
              set stat = alterlist(encounter_alias_results->result, encounter_alias_result_count)
              set encounter_alias_results->result[encounter_alias_result_count]->alias_type_cd = alias_type_cd
              set encounter_alias_results->result[encounter_alias_result_count]->meaning = cnvtlower(cnvtalphanum(meaning))
              set encounter_alias_result_ind = 1
            endif
          endif
        endif
      of ENCOUNTER_STATUS_FLAG:
        set encounter_status_result_ind = 1
        set encounter_result_ind = 1
      of ENCOUNTER_TYPE_FLAG:
        set encounter_type_result_ind = 1
        set encounter_result_ind = 1
      of ENCOUNTER_TYPE_CLASS_FLAG:
        set encounter_type_class_result_ind = 1
        set encounter_result_ind = 1
      of ESTIMATED_ARRIVE_DATE_FLAG:
        set estimated_arrive_date_result_ind = 1
        set encounter_result_ind = 1
      of ESTIMATED_DEPART_DATE_FLAG:
        set estimated_depart_date_result_ind = 1
        set encounter_result_ind = 1
      of FACILITY_FLAG:
        set facility_result_ind = 1
        set encounter_result_ind = 1
      of FINANCIAL_CLASS_FLAG:
        set financial_class_result_ind = 1
        set encounter_result_ind = 1
      of ISOLATION_FLAG:
        set isolation_result_ind = 1
        set encounter_result_ind = 1
      of MEDICAL_SERVICE_FLAG:
        set medical_service_result_ind = 1
        set encounter_result_ind = 1
      of NURSING_UNIT_FLAG:
        set nursing_unit_result_ind = 1
        set encounter_result_ind = 1
      of PREREGISTRATION_CLERK_FLAG:
        set preregistration_clerk_result_ind = 1
      of PREREGISTRATION_DATE_FLAG:
        set preregistration_date_result_ind = 1
        set encounter_result_ind = 1
      of PROVIDER_FLAG:
        if (provider_result_count = 0)
          free set provider_results
          record provider_results
          (
            1  result[*]
               2  meaning                 = vc
               2  provider_type_cd        = f8
          )
        endif
 
        free set meaning
        set meaning = request->result[i]->meaning
 
        if (size(trim(meaning, 3)) > 0)
          set new_meaning = 1
          for (j = 1 to provider_result_count)
            if (provider_results->result[j]->meaning = meaning)
              set new_meaning = 0
              set j = provider_result_count + 1
            endif
          endfor
 
          if (new_meaning)
            set provider_type_cd = 0.0
	    /*JC020*/
	    /*
            select into "nl:" c.code_value
              from code_value c
             where c.code_set = 333
               and c.cdf_meaning = meaning
               and c.active_ind = 1
               and c.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
               and c.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
            detail
              provider_type_cd = c.code_value
            with nocounter
	    */
;
	    ;+50792
	    ;set provider_type_cd = meaning_code(333, meaning)
 
	    set provider_type_cd = 0.0
	    set stat = uar_get_meaning_by_codeset(333, nullterm(meaning), 1, provider_type_cd)
	    ;-50792
 
	    /*JC020*/
            if (provider_type_cd > 0.0)
              set provider_result_count = provider_result_count + 1
              set stat = alterlist(provider_results->result, provider_result_count)
              set provider_results->result[provider_result_count]->meaning = cnvtlower(cnvtalphanum(meaning))
              set provider_results->result[provider_result_count]->provider_type_cd = provider_type_cd
              set provider_result_ind = 1
            endif
          endif
        endif
      of REASON_FOR_VISIT_FLAG:
        set reason_for_visit_result_ind = 1
        set encounter_result_ind = 1
      of REGISTRATION_CLERK_FLAG:
        set registration_clerk_result_ind = 1
      of REGISTRATION_DATE_FLAG:
        set registration_date_result_ind = 1
        set encounter_result_ind = 1
      of ROOM_FLAG:
        set room_result_ind = 1
        set encounter_result_ind = 1
      of VIP_FLAG:
        set vip_result_ind = 1
        set encounter_result_ind = 1
      of BILLING_ENTITY_FLAG:   ; *** D015
        set billing_entity_result_ind = 1 ; *** D015
      ;D019 Begin
      of PROGRAM_SERVICE_FLAG:
        set program_service_ind = 1
        set encounter_result_ind = 1
	  of SPECIALTY_UNIT_FLAG:
	    set specialty_unit_ind = 1
	    set encounter_result_ind = 1
	  ;D019 End
      ;~VI024 Begin
      of PFT_ENCOUNTER_STATUS_FLAG:
        set pft_encntr_status_result_ind = 1
      of PFT_ACCOUNT_FLAG:
        set pft_account_nbr = 1
      of PFT_GUARANTOR_NAME_FLAG:
        set pft_guarantor_name_result_ind = 1
      of PFT_START_DATE_FLAG:
        set pft_start_date_result_ind = 1
      of PFT_END_DATE_FLAG:
        set pft_end_date_result_ind = 1
      of PFT_ENCNTR_CURRENT_BALANCE_FLAG:
        set pft_encntr_current_balance_result_ind = 1
      of PFT_ENCNTR_BAD_DEB_BALANCE_FLAG:
        set pft_encntr_bad_debt_balance_result_ind = 1
      of PROFIT_ENCOUNTER_ALIAS_FLAG:
        set pft_encntr_alias_result_ind = 1
      ;~VI024 End
      ;+BG025
      of gp_EpisodeName_flag:
      	set episode_name_ind = 1
	  ;-BG025
	  ;42711++
	  of gp_response_cd_flag:
	     set response_cd_ind = 1
	  ;42711--
	  of LOCATION_EXTENSION: ;145471
	  	set location_extension_ind = 1 ;145471
      	set encounter_result_ind = 1 ;145471
      ;153466++
      of WAITLIST_REMOVAL_DT_TM_FLAG:
        set waitlist_removal_dt_tm_ind = 1
        set encounter_result_ind = 1
      ;153466--
      
      ;+201820
      of gp_claim_number_flag: 
         set claim_id_result_ind = 1
      
      of gp_statement_number_flag:
         set statement_id_result_ind = 1
      ;-201820
      
      ;+292506
      of gp_primary_guarantor_flag:
         set primary_guarantor_result_ind = 1
      ;-292506
      
      ;+301414
      of gp_primary_health_plan_flag:
         set primary_health_plan_result_ind = 1
         
      of gp_primary_payer_flag:
         set primary_payer_result_ind = 1   
      ;-301414
      
    endcase
  endfor
 
  ;165024++
  ;Set a global indicator to see if scheduling is accessing this script, and to see if the DSBLENCNTRS
  ;system preference on cs 207902 is on. If so, the scheduling_disable_qualifying_encntrs_ind flag is set to true.
  If (scheduling_disable_encounter_results_ind = 1 and (dDSBLENCRSLTScd > 0.0))
    set scheduling_disable_qualifying_encntrs_ind = 1
  Endif
  ;165024--
  free record reply  ;~VI024 Free reply 
 
;Builds the reply structure according to the request
  call parser("record reply", 1)
  call parser("(", 1)
                                        
  call parser("1 filter_str = vc", 1)  ;ZS021
  call parser("1 limited_count = i4", 1) ;014
 
  call parser("1 encounter[*]", 1)
  call parser("2 encounter_id = f8", 1) 
  
;~VI024 Begin
  ;When called from ProFit we need to store the pft_encntr_id in the reply structure.
  ;This will be used later when retrieving ProFit results.
  if (pft_mode_ind > 0)
     call parser("2 pft_encounter_id = f8")
  endif        
  ;~VI024 End
  
  ;+201820
  ;Add Claim items to the reply if Claim number is a filter and/or a result
  ;  Claim items will not be populated in the reply if Claim number is not a filter 
  if (claim_number_filter_ind or claim_id_result_ind)     
     set claim_id_result_ind = 1
     
     ;You can only have Claim or Statement, not both
     set statement_number_filter_ind = 0
     set statement_id_result_ind = 0
     
	  call parser("2 pft_acct_id = f8")
	  call parser("2 pft_claim_id = f8")
	 
	  ;Make sure we don't already have pft_encounter_id in the reply
	  if (pft_mode_ind = 0)
	     call parser("2 pft_encounter_id = f8")
	  endif
  endif
  
  ;Add Statement items to the reply
  ;  Statement items will not be populated in the reply if Statement number is not a filter
  if (statement_number_filter_ind or statement_id_result_ind)
     set statement_id_result_ind = 1
     
	  call parser("2 pft_acct_id = f8")
	  call parser("2 pft_statement_id = f8")
	 
	  ;Make sure we don't already have pft_encounter_id in the reply
	  if (pft_mode_ind = 0)
	     call parser("2 pft_encounter_id = f8")
	  endif
  endif
  ;-201820
  
  if (admit_type_result_ind)
    call parser("2 admit_type = vc", 1)
  endif
  if (arrive_date_result_ind)
    call parser("2 arrive_date = dq8", 1)
  endif
  if (bed_result_ind)
    call parser("2 bed = vc", 1)
    call parser('2 loc_bed_cd = f8', 1) ;145471
  endif
  if (building_result_ind)
    call parser("2 building = vc", 1)
  endif
  if (client_result_ind)
    call parser("2 client = vc", 1)
  endif
  if (confidentiality_level_result_ind)
    call parser("2 confidentiality_level = vc", 1)
  endif
  if (depart_date_result_ind)
    call parser("2 depart_date = dq8", 1)
  endif
  ;165024++
  ;if ((discharge_date_result_ind = TRUE) or (dDSBLENCRSLTScd > 0.0)) ;153466
  if ((discharge_date_result_ind = TRUE) or scheduling_disable_qualifying_encntrs_ind
      or show_discharged_as_disabled_ind)
  ;165024--
    call parser("2 discharge_date = dq8", 1)
  endif
  if (discharge_location_result_ind)
    call parser("2 discharge_location = vc", 1)
  endif
  if (encounter_alias_result_ind)
    for (i = 1 to encounter_alias_result_count)
      call parser(concat("2 alias_", cnvtlower(encounter_alias_results->result[i]->meaning), " = vc"))
    endfor
  endif
  if (encounter_status_result_ind)
    call parser("2 encounter_status = vc", 1)
  endif
  if (encounter_type_result_ind)
    call parser("2 encounter_type = vc", 1)
  endif
  if (encounter_type_class_result_ind)
    call parser("2 encounter_type_class = vc", 1)
  endif
  if (estimated_arrive_date_result_ind)
    call parser("2 estimated_arrive_date = dq8", 1)
  endif
  if (estimated_depart_date_result_ind)
    call parser("2 estimated_depart_date = dq8", 1)
  endif
  if (facility_result_ind)
    call parser("2 facility = vc", 1)
  endif
  if (financial_class_result_ind)
    call parser("2 financial_class = vc", 1)
  endif
  if (isolation_result_ind)
    call parser("2 isolation = vc", 1)
  endif
  if (medical_service_result_ind)
    call parser("2 medical_service = vc", 1)
  endif
  if (nursing_unit_result_ind)
    call parser("2 nursing_unit = vc", 1)
  endif
  if (preregistration_clerk_result_ind)
    call parser("2 preregistration_clerk = vc", 1)
  endif
  if (preregistration_date_result_ind)
    call parser("2 preregistration_date = dq8", 1)
  endif
  if (provider_result_ind)
    for (i = 1 to provider_result_count)
      call parser(concat("2 provider_", cnvtlower(provider_results->result[i]->meaning), " = vc"))
    endfor
  endif
  if (reason_for_visit_result_ind)
    call parser("2 reason_for_visit = vc", 1)
  endif
  if (registration_clerk_result_ind)
    call parser("2 registration_clerk = vc", 1)
  endif
  if (registration_date_result_ind)
    call parser("2 registration_date = dq8", 1)
  endif
  if (room_result_ind)
    call parser("2 room = vc", 1)
  endif
  if (vip_result_ind)
    call parser("2 vip = vc", 1)
  endif
  if (billing_entity_result_ind) ;D015
    call parser("2 billingentity = vc", 1)
  endif; D015
  ;D019 Begin
  if (program_service_ind)
    call parser("2 program_service = vc", 1)
  endif
  if (specialty_unit_ind)
    call parser("2 specialty_unit = vc", 1)
  endif
  ;D019 End

  ;~VI024 Begin
  if (pft_encntr_status_result_ind)
    call parser ("2 pft_encntr_status = vc", 1)
  endif
  if (pft_account_nbr)
    call parser ("2 pft_account_nbr = vc", 1)
  endif
  if (pft_guarantor_name_result_ind)
    call parser ("2 pft_guarantor_name = vc", 1)
  endif
  if ( (pft_start_date_result_ind)
    or (pft_end_date_result_ind) )
    call parser ("2 pft_start_date = dq8", 1)
    call parser ("2 pft_end_date = dq8", 1)
  endif
  if (pft_encntr_current_balance_result_ind)
    call parser ("2 pft_encntr_current_balance = f8.0", 1)
  endif
  if (pft_encntr_bad_debt_balance_result_ind)
    call parser ("2 pft_encntr_bad_debt_balance = f8.0", 1)
  endif
  if (pft_encntr_alias_result_ind)
    call parser ("2 pft_encntr_alias = vc", 1)
  endif
  ;~VI024 End
  ;+BG025
  if (episode_name_ind)
  	call parser("2 episode_display = vc", 1)
  endif
  ;-BG025
  ;42711++
  if (response_cd_ind)
     call parser("2 response_cd_display = vc", 1)
  endif
  ;42711--
  ;+138442
  if (show_all_encntr_select_pending_only_mode)
     call parser("2 encntr_pending_ind = i2", 1)
  endif
  ;-138442
  if (location_extension_ind) ;145471
    call parser('2 location_extension = vc', 1) ;145471
  endif ;145471
  ;153466++
  ;165024++
  ;If ((waitlist_removal_dt_tm_ind) or (dDSBLENCRSLTScd > 0.0))
  If (waitlist_removal_dt_tm_ind or scheduling_disable_qualifying_encntrs_ind or show_wl_removed_as_disabled_ind)
  ;165024--
  	call parser("2 waitlist_removal_dt_tm = dq8",1)
  endif
 
  ;165024++
  ;If (waitlist_removal_dt_tm_ind or discharge_date_result_ind or (dDSBLENCRSLTScd > 0.0))
  If (scheduling_disable_qualifying_encntrs_ind or show_wl_removed_as_disabled_ind or show_discharged_as_disabled_ind
      or (waitlist_removal_dt_tm_ind = TRUE) or (discharge_date_result_ind = TRUE))
  ;165024--
     call parser("2 ghost_encntr_ind = i2", 1)
  endif
  ;153466--
  
  ;+292506
  if (primary_guarantor_result_ind)
     call parser("2 primary_guar_name = vc", 1)
  endif
  ;-292506
  
  ;+301414
  if (primary_health_plan_result_ind or primary_payer_result_ind)
     call parser("2 primary_health_plan_name = vc", 1)
     call parser("2 primary_payer_name = vc", 1)
  endif
  ;-301414
  
  call parser("2 encounter_type_cd = f8", 1) ;165024
  call parser("2 organization_id = f8", 1)   ;200977
  call parser("1 status_data", 1)
  call parser("2 status = c1", 1)
  call parser("2 subeventstatus[1]", 1)
  call parser("3 operationname = vc", 1)
  call parser("3 operationstatus = c1", 1)
  call parser("3 targetobjectname = vc", 1)
  call parser("3 targetobjectvalue = vc", 1)
  call parser(") go", 1)
 
 
/*014*/
;Return the number of encounters invalidated by the limit filters
  if( limit_ind_exists = 1 )
    if( request->limit_ind = 1 )
			set reply->limited_count = limited_count
		endif
	endif
/*014*/
 
;Move only the valid encounters from the encounter structure to the reply structure
  set reply_count = 0
  set stat = alterlist(reply->encounter, encounter_count)  ;50792 - This is the max possible
  
  for (i = 1 to encounter_count)
    if (encounters->encounter[i]->valid)
      set reply_count = reply_count + 1
      ;set stat = alterlist(reply->encounter, reply_count)  ;50792 - Moved this up
      set reply->encounter[reply_count]->encounter_id = encounters->encounter[i]->encounter_id

      ;~VI024 Begin
      ;Move the pft_encntr_id if we're in ProFit Account or Guarantor mode.      
      if (pft_mode_ind > 0)
        set reply->encounter[reply_count]->pft_encounter_id = encounters->encounter[i]->pft_encounter_id
      endif 
      ;~VI024 End
      
      ;+201820
      ;Move claim search results over the actual reply.
      if (claim_id_result_ind)
         set reply->encounter[reply_count]->pft_encounter_id = encounters->encounter[i]->pft_encounter_id
         set reply->encounter[reply_count]->pft_acct_id = encounters->encounter[i]->pft_acct_id
         set reply->encounter[reply_count]->pft_claim_id = encounters->encounter[i]->pft_claim_id
         set reply->encounter[reply_count]->encounter_type_cd = encounters->encounter[encounter_count]->encounter_type_cd
         set reply->encounter[reply_count]->organization_id = encounters->encounter[encounter_count]->organization_id ;200977
      endif
      
      ;Move staement search results over the actual reply.
      if (statement_id_result_ind)
         set reply->encounter[reply_count]->pft_encounter_id = encounters->encounter[i]->pft_encounter_id
         set reply->encounter[reply_count]->pft_acct_id = encounters->encounter[i]->pft_acct_id
         set reply->encounter[reply_count]->pft_statement_id = encounters->encounter[i]->pft_statement_id
         set reply->encounter[reply_count]->encounter_type_cd = encounters->encounter[encounter_count]->encounter_type_cd
         set reply->encounter[reply_count]->organization_id = encounters->encounter[encounter_count]->organization_id ;200977
      endif
      ;-201820

    endif
  endfor
  
  set stat = alterlist(reply->encounter, reply_count)  ;50792
 
;If we found no valid encounters, exit
  if (reply_count <= 0)
    set reply->status_data->status = "Z"
    go to 9999_EXIT_PROGRAM
  endif
 
;Establish some strings we'll use during formatting - it might be necessary to
;have the caller pass these to us so that they can be properly localized, but
;for now, we'll just hard code them
  free set separator
  free set left_brace
  free set right_brace
  set separator = "; "
  set left_brace = "("
  set right_brace = ")"
 
;Grab encounter table information (as requested) for all encounters - use the
;parser for this logic so that the detail section of the query only
;pulls the requested information and nothing else
  if (encounter_result_ind)
    call reset_buffer(1)
    call add_line("select into 'nl:' e.encntr_id")
    set lCnt = 0  ;50792
    set lCnt2 = 0 ;50792
 
    if (reply_count > 0) ;jc022
    
       ;+74689
       /*
       if (reply_count > 200)  ;50792
  		  call add_line("from encounter e, (dummyt d with seq = value(reply_count))")
		  call add_line("plan d")
          call add_line("join e")
		  call add_line("where e.encntr_id = reply->encounter[d.seq]->encounter_id")
		  call add_line("detail")
 
		  if (admit_type_result_ind)
		     call add_line("reply->encounter[d.seq]->admit_type = uar_get_code_display(e.admit_type_cd)")
		  endif
 
		  if (arrive_date_result_ind)
		     call add_line("reply->encounter[d.seq]->arrive_date = e.arrive_dt_tm")
		  endif
 
		  if (bed_result_ind)
		     call add_line("reply->encounter[d.seq]->bed = uar_get_code_display(e.loc_bed_cd)")
		  endif
 
		  if (building_result_ind)
		     call add_line("reply->encounter[d.seq]->building = uar_get_code_display(e.loc_building_cd)")
		  endif
 
		  if (confidentiality_level_result_ind)
		     call add_line("reply->encounter[d.seq]->confidentiality_level = uar_get_code_display(e.confid_level_cd)")
		  endif
 
		  if (depart_date_result_ind)
		     call add_line("reply->encounter[d.seq]->depart_date = e.depart_dt_tm")
		  endif
 
		  if (discharge_date_result_ind)
		     call add_line("reply->encounter[d.seq]->discharge_date = e.disch_dt_tm")
		  endif
 
		  if (discharge_location_result_ind)
		     call add_line("reply->encounter[d.seq]->discharge_location = uar_get_code_display(e.disch_to_loctn_cd)")
		  endif
 
		  if (encounter_status_result_ind)
		     call add_line("reply->encounter[d.seq]->encounter_status = uar_get_code_display(e.encntr_status_cd)")
		  endif
 
		  if (encounter_type_result_ind)
		     call add_line("reply->encounter[d.seq]->encounter_type = uar_get_code_display(e.encntr_type_cd)")
		  endif
 
		  if (encounter_type_class_result_ind)
	         call add_line("reply->encounter[d.seq]->encounter_type_class = uar_get_code_display(e.encntr_type_class_cd)")
		  endif
 
		  if (estimated_arrive_date_result_ind)
		     call add_line("reply->encounter[d.seq]->estimated_arrive_date = e.est_arrive_dt_tm")
		  endif
 
		  if (estimated_depart_date_result_ind)
		     call add_line("reply->encounter[d.seq]->estimated_depart_date = e.est_depart_dt_tm")
		  endif
 
		  if (facility_result_ind)
		     call add_line("reply->encounter[d.seq]->facility = uar_get_code_display(e.loc_facility_cd)")
		  endif
 
		  if (financial_class_result_ind)
		     call add_line("reply->encounter[d.seq]->financial_class = uar_get_code_display(e.financial_class_cd)")
		  endif
 
		  if (isolation_result_ind)
		     call add_line("reply->encounter[d.seq]->isolation = uar_get_code_display(e.isolation_cd)")
		  endif
 
		  if (medical_service_result_ind)
		     call add_line("reply->encounter[d.seq]->medical_service = uar_get_code_display(e.med_service_cd)")
		  endif
 
		  if (nursing_unit_result_ind)
		     call add_line("reply->encounter[d.seq]->nursing_unit = uar_get_code_display(e.loc_nurse_unit_cd)")
		  endif
 
		  if (preregistration_date_result_ind)
		     call add_line("reply->encounter[d.seq]->preregistration_date = e.pre_reg_dt_tm")
		  endif
 
		  if (reason_for_visit_result_ind)
		     call add_line("reply->encounter[d.seq]->reason_for_visit = e.reason_for_visit")
		  endif
 
		  if (registration_date_result_ind)
		     call add_line("reply->encounter[d.seq]->registration_date = e.reg_dt_tm")
		  endif
 
		  if (room_result_ind)
		     call add_line("reply->encounter[d.seq]->room = uar_get_code_display(e.loc_room_cd)")
		  endif
 
		  if (vip_result_ind)
		     call add_line("reply->encounter[d.seq]->vip = uar_get_code_display(e.vip_cd)")
		  endif
 
		  ;D019 Begin
		  ;if (program_service_ind and check_program)  ;50792
		  if (program_service_ind)  ;50792
		     call add_line("reply->encounter[d.seq]->program_service = uar_get_code_display(e.program_service_cd)")
		  endif
 
		  ;if (specialty_unit_ind and check_specialty)  ;50792
		  if (specialty_unit_ind)  ;50792
		     call add_line("reply->encounter[d.seq]->specialty_unit = uar_get_code_display(e.specialty_unit_cd,0)")
		  endif
		  ;D019 End
 
		  call add_line("with nocounter go")
 
		;+50792
		else
		  call add_line("from encounter e")
                   call add_line("plan e")
		  call add_line("where expand(lCnt, 1, reply_count, e.encntr_id, reply->encounter[lCnt]->encounter_id, 200)")
		  call add_line("detail")
 
		  call add_line("lCnt2 = locateval(lCnt, 1, reply_count, e.encntr_id, reply->encounter[lCnt]->encounter_id)")
 
		  if (admit_type_result_ind)
		     call add_line("reply->encounter[lCnt2]->admit_type = uar_get_code_display(e.admit_type_cd)")
		  endif
 
		  if (arrive_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->arrive_date = cnvtdatetime(e.arrive_dt_tm)")
		  endif
 
		  if (bed_result_ind)
		     call add_line("reply->encounter[lCnt2]->bed = uar_get_code_display(e.loc_bed_cd)")
		  endif
 
		  if (building_result_ind)
		     call add_line("reply->encounter[lCnt2]->building = uar_get_code_display(e.loc_building_cd)")
		  endif
 
		  if (confidentiality_level_result_ind)
		     call add_line("reply->encounter[lCnt2]->confidentiality_level = uar_get_code_display(e.confid_level_cd)")
		  endif
 
		  if (depart_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->depart_date = cnvtdatetime(e.depart_dt_tm)")
		  endif
 
		  if (discharge_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->discharge_date = cnvtdatetime(e.disch_dt_tm)")
		  endif
 
		  if (discharge_location_result_ind)
		     call add_line("reply->encounter[lCnt2]->discharge_location = uar_get_code_display(e.disch_to_loctn_cd)")
		  endif
 
		  if (encounter_status_result_ind)
		     call add_line("reply->encounter[lCnt2]->encounter_status = uar_get_code_display(e.encntr_status_cd)")
		  endif
 
		  if (encounter_type_result_ind)
		     call add_line("reply->encounter[lCnt2]->encounter_type = uar_get_code_display(e.encntr_type_cd)")
		  endif
 
		  if (encounter_type_class_result_ind)
	         call add_line("reply->encounter[lCnt2]->encounter_type_class = uar_get_code_display(e.encntr_type_class_cd)")
		  endif
 
		  if (estimated_arrive_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->estimated_arrive_date = cnvtdatetime(e.est_arrive_dt_tm)")
		  endif
 
		  if (estimated_depart_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->estimated_depart_date = cnvtdatetime(e.est_depart_dt_tm)")
		  endif
 
		  if (facility_result_ind)
		     call add_line("reply->encounter[lCnt2]->facility = uar_get_code_display(e.loc_facility_cd)")
		  endif
 
		  if (financial_class_result_ind)
		     call add_line("reply->encounter[lCnt2]->financial_class = uar_get_code_display(e.financial_class_cd)")
		  endif
 
		  if (isolation_result_ind)
		     call add_line("reply->encounter[lCnt2]->isolation = uar_get_code_display(e.isolation_cd)")
		  endif
 
		  if (medical_service_result_ind)
		     call add_line("reply->encounter[lCnt2]->medical_service = uar_get_code_display(e.med_service_cd)")
		  endif
 
		  if (nursing_unit_result_ind)
		     call add_line("reply->encounter[lCnt2]->nursing_unit = uar_get_code_display(e.loc_nurse_unit_cd)")
		  endif
 
		  if (preregistration_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->preregistration_date = cnvtdatetime(e.pre_reg_dt_tm)")
		  endif
 
		  if (reason_for_visit_result_ind)
		     call add_line("reply->encounter[lCnt2]->reason_for_visit = e.reason_for_visit")
		  endif
 
		  if (registration_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->registration_date = cnvtdatetime(e.reg_dt_tm)")
		  endif
 
		  if (room_result_ind)
		     call add_line("reply->encounter[lCnt2]->room = uar_get_code_display(e.loc_room_cd)")
		  endif
 
		  if (vip_result_ind)
		     call add_line("reply->encounter[lCnt2]->vip = uar_get_code_display(e.vip_cd)")
		  endif
 
		  if (program_service_ind)
		     call add_line("reply->encounter[lCnt2]->program_service = uar_get_code_display(e.program_service_cd)")
		  endif
 
		  if (specialty_unit_ind)
		     call add_line("reply->encounter[lCnt2]->specialty_unit = uar_get_code_display(e.specialty_unit_cd,0)")
		  endif
 
		  call add_line("with nocounter go")
		endif
		;-50792
		*/
		  
		  set lTotal2 = reply_count
		  ;set lTotal = ceil(cnvtreal(lTotal2) / 200) * 200  													;138442
		  set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize											;138442
		  set stat = alterlist(reply->encounter, lTotal)
		       		    
		  set lCnt2 = 0
		  set lIndex = 0
		  set lStart = 1
 
 		  ;call add_line("from encounter e, (dummyt d1 with seq = value(1 + ((lTotal - 1) / 200)))")				;138442
		  call add_line("from encounter e, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))")		;138442
          call add_line("plan d1")
          ;call add_line("where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + 200))")						;138442
          call add_line("where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))")       			;138442
          call add_line("join e")
 
		  ;+138442
		  ;call add_line("where expand(lCnt, lStart, lStart + (200 - 1), e.encntr_id, reply->encounter[lCnt]->encounter_id)")
		  call add_line("where expand(lCnt, lStart, lStart + (batchSize - 1), e.encntr_id, reply->encounter[lCnt]->encounter_id)")
		  ;-138442
		  call add_line("and e.encntr_id + 0 > 0.0")
		  call add_line("detail")
 
		  call add_line("lCnt2 = locateval(lCnt, 1, reply_count, e.encntr_id, reply->encounter[lCnt]->encounter_id)")
 
		  if (admit_type_result_ind)
		     call add_line("reply->encounter[lCnt2]->admit_type = uar_get_code_display(e.admit_type_cd)")
		  endif
 
		  if (arrive_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->arrive_date = cnvtdatetime(e.arrive_dt_tm)")
		  endif
 
		  if (bed_result_ind)
		     call add_line("reply->encounter[lCnt2]->bed = uar_get_code_display(e.loc_bed_cd)")
		  endif
 
		  if (building_result_ind)
		     call add_line("reply->encounter[lCnt2]->building = uar_get_code_display(e.loc_building_cd)")
		  endif
 
		  if (confidentiality_level_result_ind)
		     call add_line("reply->encounter[lCnt2]->confidentiality_level = uar_get_code_display(e.confid_level_cd)")
		  endif
 
		  if (depart_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->depart_date = cnvtdatetime(e.depart_dt_tm)")
		  endif
 
        ;165024++
        ;Previous logic has been rewritten and enhanced.
        ;;153466++
		  ;if ((discharge_date_result_ind = TRUE) or (dDSBLENCRSLTScd > 0.0))
		  ;;153466 if (discharge_date_result_ind)
		  ;   call add_line("reply->encounter[lCnt2]->discharge_date = cnvtdatetime(e.disch_dt_tm)")
		  ;   if (dDSBLENCRSLTScd > 0.0)
		  ;      call add_line("if (cnvtdatetime(e.disch_dt_tm) > 0)")
		  ;      call add_line("reply->encounter[lCnt2]->ghost_encntr_ind = TRUE")
		  ;      call add_line("endif")
		  ;   endif
		  ;;153466--
		  ;endif
        if (show_discharged_as_disabled_ind)
          ;If discharge date has been selected to be disabled, set the ghost indicator.
          call add_line("reply->encounter[lCnt2]->discharge_date = cnvtdatetime(e.disch_dt_tm)")
          call add_line("if (cnvtdatetime(e.disch_dt_tm) > 0)")
          call add_line("reply->encounter[lCnt2]->ghost_encntr_ind = TRUE")
          call add_line("endif")
        elseif (scheduling_disable_qualifying_encntrs_ind)
          ;Else if the scheduling indicator is set, disabled only the qualifying encounters.
          call QUALIFYING_DISCHARGED_ENCNTR_TYPES(null)
          call add_line("reply->encounter[lCnt2]->discharge_date = cnvtdatetime(e.disch_dt_tm)")
          call add_line("cur_idx = 0")
          call add_line("idx = 0")
          call add_line("cur_idx = locateval(idx, 1, dsbled_encntr_types->encntr_type_cnt,")
          call add_line("e.encntr_type_cd,dsbled_encntr_types->encntr_type_list[idx]->encntr_type_cd)")
          call add_line("if (cur_idx > 0 and cur_idx <= dsbled_encntr_types->encntr_type_cnt)")
          call add_line("if (cnvtdatetime(e.disch_dt_tm) > 0)")
          call add_line("reply->encounter[lCnt2]->ghost_encntr_ind = TRUE")
          call add_line("endif")
          call add_line("endif")
        elseif (discharge_date_result_ind = TRUE)
          ;Else if the column has been chosen as a displayable result, return the date.
          call add_line("reply->encounter[lCnt2]->discharge_date = cnvtdatetime(e.disch_dt_tm)")
        endif
        ;165024--
		  if (discharge_location_result_ind)
		     call add_line("reply->encounter[lCnt2]->discharge_location = uar_get_code_display(e.disch_to_loctn_cd)")
		  endif
 
		  if (encounter_status_result_ind)
		     call add_line("reply->encounter[lCnt2]->encounter_status = uar_get_code_display(e.encntr_status_cd)")
		  endif
 
		  if (encounter_type_result_ind)
		     call add_line("reply->encounter[lCnt2]->encounter_type = uar_get_code_display(e.encntr_type_cd)")
		  endif
 
		  if (encounter_type_class_result_ind)
	         call add_line("reply->encounter[lCnt2]->encounter_type_class = uar_get_code_display(e.encntr_type_class_cd)")
		  endif
 
		  if (estimated_arrive_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->estimated_arrive_date = cnvtdatetime(e.est_arrive_dt_tm)")
		  endif
 
		  if (estimated_depart_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->estimated_depart_date = cnvtdatetime(e.est_depart_dt_tm)")
		  endif
 
		  if (facility_result_ind)
		     call add_line("reply->encounter[lCnt2]->facility = uar_get_code_display(e.loc_facility_cd)")
		  endif
 
		  if (financial_class_result_ind)
		     call add_line("reply->encounter[lCnt2]->financial_class = uar_get_code_display(e.financial_class_cd)")
		  endif
 
		  if (isolation_result_ind)
		     call add_line("reply->encounter[lCnt2]->isolation = uar_get_code_display(e.isolation_cd)")
		  endif
 
		  if (medical_service_result_ind)
		     call add_line("reply->encounter[lCnt2]->medical_service = uar_get_code_display(e.med_service_cd)")
		  endif
 
		  if (nursing_unit_result_ind)
		     call add_line("reply->encounter[lCnt2]->nursing_unit = uar_get_code_display(e.loc_nurse_unit_cd)")
		  endif
 
		  if (preregistration_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->preregistration_date = cnvtdatetime(e.pre_reg_dt_tm)")
		  endif
 
		  if (reason_for_visit_result_ind)
		     call add_line("reply->encounter[lCnt2]->reason_for_visit = e.reason_for_visit")
		  endif
 
		  if (registration_date_result_ind)
		     call add_line("reply->encounter[lCnt2]->registration_date = cnvtdatetime(e.reg_dt_tm)")
		  endif
 
		  if (room_result_ind)
		     call add_line("reply->encounter[lCnt2]->room = uar_get_code_display(e.loc_room_cd)")
		  endif
 
		  if (vip_result_ind)
		     call add_line("reply->encounter[lCnt2]->vip = uar_get_code_display(e.vip_cd)")
		  endif
 
		  if (program_service_ind)
		     call add_line("reply->encounter[lCnt2]->program_service = uar_get_code_display(e.program_service_cd)")
		  endif
 
		  if (specialty_unit_ind)
		     call add_line("reply->encounter[lCnt2]->specialty_unit = uar_get_code_display(e.specialty_unit_cd,0)")
		  endif
 
 		  ;165024++
 		  ;The encounter type code value need to be returned. The value will be stored in a non-interactible column
 		  ;in the encounter results listview. The code value will be used for comparison on what encounters to
 		  ;disabled based on preferences selected in pmDBConv.
 		  call add_line("reply->encounter[lCnt2]->encounter_type_cd = e.encntr_type_cd")
 		  call add_line("reply->encounter[lCnt2]->organization_id = e.organization_id") ;200977
 		  ;165024--
		  call add_line("with nocounter go")
		;-74689
		
     endif;jc022
    call perform_buffer(1)
    set stat = alterlist(reply->encounter, reply_count)  ;74689
    
  endif
 
  set lCnt = 0  ;50792
  set lCnt2 = 0 ;50792
 
;Grab the client as requested
  if (client_result_ind)
  	if (reply_count > 0) ;jc022
       
       ;+74689 - Use initarray instead
       /*
  	   if (reply_count > 200)  ;50792
	      select into "nl:" o.org_name
	       from organization o, encounter e, (dummyt d with seq = value(reply_count))
	       plan d
	       join e
	        where e.encntr_id = reply->encounter[d.seq]->encounter_id
	          and e.organization_id > 0.0
	       join o
	        where o.organization_id = e.organization_id
	       detail
	        reply->encounter[d.seq]->client = o.org_name
	      with nocounter
 
	   ;+50792
	   else
	     select into "nl:"
	       o.org_name
	      from organization o, encounter e
	       plan e
	        where expand(lCnt, 1, reply_count, e.encntr_id,
	                       reply->encounter[lCnt]->encounter_id, 200)
	         and e.organization_id + 0 > 0.0
	       join o
	        where o.organization_id = e.organization_id
	      detail
	        lCnt2 = locateval(lCnt, 1, reply_count,
                             e.encntr_id, reply->encounter[lCnt]->encounter_id)
	        reply->encounter[lCnt2]->client = o.org_name
	     with nocounter
	   endif
	   ;-50792
	   */
	   
	   set lTotal2 = reply_count
	   ;set lTotal = ceil(cnvtreal(lTotal2) / 200) * 200														;138442
	   set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize												;138442
	   set stat = alterlist(reply->encounter, lTotal)
	       	    
	   set lIndex = 0
	   set lStart = 1
	   set bDone = FALSE
	   
	   select into "nl:"
	     o.org_name
	    ;from encounter e, organization o, (dummyt d1 with seq = value(1 + ((lTotal - 1) / 200)))				;138442
	    from encounter e, organization o, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))			;138442
	     ;plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + 200))									;138442
	     plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))   							;138442
	     join e
	      ;where expand(lCnt, lStart, lStart + (200 - 1), e.encntr_id,											;138442
	      where expand(lCnt, lStart, lStart + (batchSize - 1), e.encntr_id,
	              reply->encounter[lCnt]->encounter_id)															;138442
	        and e.encntr_id + 0 > 0
	        and e.organization_id + 0 > 0.0
	     join o
	      where o.organization_id = e.organization_id
	     detail
	        bDone = FALSE
	        
	        lIndex = locateval(lCnt, 1, reply_count, e.encntr_id,
                     reply->encounter[lCnt]->encounter_id)
                              
	        reply->encounter[lIndex]->client = o.org_name
	        
	        while (bDone != TRUE)
	          lCnt3 = lIndex + 1
	         
	          lIndex = locateval(lCnt, lCnt3, reply_count, e.encntr_id,
                        reply->encounter[lCnt]->encounter_id)                     
	                  
	          if (lIndex > 0)
	             lCnt3 = lIndex
	             reply->encounter[lIndex]->client = o.org_name
	          else
	             bDone = TRUE
	          endif         
	        endwhile 
	     with nocounter
	     
	     set stat = alterlist(reply->encounter, reply_count)
	   ;-74689
	   
    endif ;jc022
  endif
 
  set lCnt = 0  ;50792
  set lCnt2 = 0 ;50792
 
;Grab the pre-registration clerk as requested
  if (preregistration_clerk_result_ind)
  	 if (reply_count > 0) ;jc022
  	 
  	    ;+74689
  	    /*
  	    if (reply_count > 200)  ;50792
		    select into "nl:" p.name_full_formatted
		      ;from person p, encounter e, (dummyt d with seq = value(reply_count))  ;50792b
		      from prsnl p, encounter e, (dummyt d with seq = value(reply_count))  ;50792b
		      plan d
		      join e
		     where e.encntr_id = reply->encounter[d.seq]->encounter_id
		       and e.pre_reg_prsnl_id > 0.0
		      join p
		     where p.person_id = e.pre_reg_prsnl_id
		    detail
		      reply->encounter[d.seq]->preregistration_clerk = p.name_full_formatted
		    with nocounter
 
        ;+50792
        else
           select into "nl:"
             p.name_full_formatted
            from encounter e, prsnl p
             plan e
              where expand(lCnt, 1, reply_count, e.encntr_id,
	                        reply->encounter[lCnt]->encounter_id, 200)
              and e.pre_reg_prsnl_id > 0.0
             join p
              where p.person_id = e.pre_reg_prsnl_id
		     detail
		       lCnt2 = locateval(lCnt, 1, reply_count,
                              e.encntr_id, reply->encounter[lCnt]->encounter_id)
 
               reply->encounter[lCnt2]->preregistration_clerk = p.name_full_formatted
           with nocounter
        endif
        ;-50792
        */
        
       set lTotal2 = reply_count
	   ;set lTotal = ceil(cnvtreal(lTotal2) / 200) * 200											;138442
	   set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize									;138442
	   set stat = alterlist(reply->encounter, lTotal)
	       	    
	   set lCnt2 = 0
	   set lIndex = 0
	   set lStart = 1
	   set bDone = FALSE
	   
	   select into "nl:"
	     p.name_full_formatted
	    ;from encounter e, prsnl p, (dummyt d1 with seq = value(1 + ((lTotal - 1) / 200)))			;138442
	    from encounter e, prsnl p, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))		;138442
	     ;plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + 200))						;138442
	     plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))  				;138442
	     join e
	      ;where expand(lCnt, lStart, lStart + (200 - 1), e.encntr_id,								;138442
	      where expand(lCnt, lStart, lStart + (batchSize - 1), e.encntr_id,
	              reply->encounter[lCnt]->encounter_id)												;138442
	        and e.encntr_id + 0 > 0
	        and e.pre_reg_prsnl_id > 0.0
	     join p
          where p.person_id = e.pre_reg_prsnl_id
	     detail
	        bDone = FALSE
	        
	        lIndex = locateval(lCnt, 1, reply_count, e.encntr_id,
                     reply->encounter[lCnt]->encounter_id)
                              
	        reply->encounter[lIndex]->preregistration_clerk = p.name_full_formatted
	        
	        while (bDone != TRUE)
	          lCnt3 = lIndex + 1
	         
	          lIndex = locateval(lCnt, lCnt3, reply_count, e.encntr_id,
                        reply->encounter[lCnt]->encounter_id)                     
	                  
	          if (lIndex > 0)
	             lCnt3 = lIndex
	             reply->encounter[lIndex]->preregistration_clerk = p.name_full_formatted
	          else
	             bDone = TRUE
	          endif         
	        endwhile 
	   with nocounter
	    
	   set stat = alterlist(reply->encounter, reply_count)
       ;-74689
        
    endif ;jc022
  endif
 
;Grab the registration clerk as requested
  if (registration_clerk_result_ind)
  	 if (reply_count > 0) ;jc022
  	 
  	    ;+74689
  	    /*
  	    if (reply_count > 200)  ;50792
		    select into "nl:" p.name_full_formatted
		      ;from person p, encounter e, (dummyt d with seq = value(reply_count))  ;50792b
		      from prsnl p, encounter e, (dummyt d with seq = value(reply_count))  ;50792b
		      plan d
		      join e
		     where e.encntr_id = reply->encounter[d.seq]->encounter_id
		       and e.reg_prsnl_id > 0.0
		      join p
		     where p.person_id = e.reg_prsnl_id
		    detail
		      reply->encounter[d.seq]->registration_clerk = p.name_full_formatted
		    with nocounter
 
	    ;+50792
        else
           select into "nl:"
             p.name_full_formatted
            from encounter e, prsnl p
             plan e
              where expand(lCnt, 1, reply_count, e.encntr_id,
	                        reply->encounter[lCnt]->encounter_id, 200)
              and e.reg_prsnl_id > 0.0
             join p
              where p.person_id = e.reg_prsnl_id
		     detail
		       lCnt2 = locateval(lCnt, 1, reply_count,
                              e.encntr_id, reply->encounter[lCnt]->encounter_id)
 
               reply->encounter[lCnt2]->registration_clerk = p.name_full_formatted
           with nocounter
        endif
        ;-50792
        */
        
       set lTotal2 = reply_count
	   ;set lTotal = ceil(cnvtreal(lTotal2) / 200) * 200											;138442
	   set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize									;138442
	   set stat = alterlist(reply->encounter, lTotal)
	       	    
	   set lCnt2 = 0
	   set lIndex = 0
	   set lStart = 1
	   set bDone = FALSE
	   
	   select into "nl:"
	     p.name_full_formatted
	    ;from encounter e, prsnl p, (dummyt d1 with seq = value(1 + ((lTotal - 1) / 200)))			;138442
	    from encounter e, prsnl p, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))		;138442
	     ;plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + 200))						;138442
	     plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))  				;138442
	     join e
	      ;where expand(lCnt, lStart, lStart + (200 - 1), e.encntr_id,								;138442
	      where expand(lCnt, lStart, lStart + (batchSize - 1), e.encntr_id,
	              reply->encounter[lCnt]->encounter_id)												;138442
	        and e.encntr_id + 0 > 0.0
	        and e.reg_prsnl_id > 0.0
	     join p
          where p.person_id = e.reg_prsnl_id
	     detail
	        bDone = FALSE
	        
	        lIndex = locateval(lCnt, 1, reply_count, e.encntr_id,
                     reply->encounter[lCnt]->encounter_id)
                              
	        reply->encounter[lIndex]->registration_clerk = p.name_full_formatted
	        
	        while (bDone != TRUE)
	          lCnt3 = lIndex + 1
	         
	          lIndex = locateval(lCnt, lCnt3, reply_count, e.encntr_id,
                        reply->encounter[lCnt]->encounter_id)                     
	                  
	          if (lIndex > 0)
	             lCnt3 = lIndex
	             reply->encounter[lIndex]->registration_clerk = p.name_full_formatted
	          else
	             bDone = TRUE
	          endif         
	        endwhile 
	   with nocounter
	    
	   set stat = alterlist(reply->encounter, reply_count)
       ;-74689
        
    endif ;jc022
  endif
 
  ;~VI024 Begin
  ;If we're in ProFit account/guarantor mode and the users wants a ProFit result, we'll go get the data.
  if ((pft_mode_ind > 0) and (reply_count > 0))
    if ( (pft_encntr_status_result_ind = 1)
       or (pft_account_nbr = 1)
       or (pft_guarantor_name_result_ind = 1)
       or (pft_encntr_current_balance_result_ind = 1)
       or (pft_encntr_bad_debt_balance_result_ind = 1)
       or (pft_encntr_alias_result_ind = 1) ) 
     
    call reset_buffer(1)
    
    call add_line("select into 'nl:' pe.pft_encntr_id")
    call add_line("from pft_encntr pe")
    call add_line(", (dummyt d with seq = value(reply_count))")
    if (pft_account_nbr)
       call add_line(", account a")
    endif
    if (pft_guarantor_name_result_ind)
       call add_line(", (dummyt d1 with seq = 1)")
       call add_line(", encntr_person_reltn epr")
       call add_line(", person p")
    endif
    call add_line("plan d")
    call add_line("join pe")
    call add_line("where pe.pft_encntr_id = reply->encounter[d.seq]->pft_encounter_id")
    
    if (pft_account_nbr)
       call add_line("join a where a.acct_id = pe.acct_id") 
    endif
    if (pft_guarantor_name_result_ind)
       call add_line("join d1")
       call add_line("join epr where epr.encntr_id = pe.encntr_id")
       call add_line("and epr.person_reltn_type_cd = def_guarantor_cd")
       call add_line("and epr.priority_seq = 1")
       call add_line("join p where p.person_id = epr.related_person_id")
    endif

    call add_line("detail")
    if (pft_encntr_status_result_ind)
      call add_line("reply->encounter[d.seq]->pft_encntr_status = uar_get_code_display(pe.pft_encntr_status_cd)")
    endif
 
    if (pft_account_nbr)
      call add_line("reply->encounter[d.seq]->pft_account_nbr = a.ext_acct_id_txt")
    endif
  
    if (pft_guarantor_name_result_ind)
      call add_line("reply->encounter[d.seq]->pft_guarantor_name = p.name_full_formatted")
    endif
        
    if (pft_encntr_current_balance_result_ind)
      call add_line("if (pe.dr_cr_flag = 2)")
      call add_line("reply->encounter[d.seq]->pft_encntr_current_balance = pe.balance * -1")
      call add_line("else")
      call add_line("reply->encounter[d.seq]->pft_encntr_current_balance = pe.balance")
      call add_line("endif")
    endif
    if (pft_encntr_bad_debt_balance_result_ind)
      call add_line("if (pe.bad_debt_bal_dr_cr_flag = 2)")
      call add_line("reply->encounter[d.seq]->pft_encntr_bad_debt_balance = pe.bad_debt_balance * -1")
      call add_line("else")
      call add_line("reply->encounter[d.seq]->pft_encntr_bad_debt_balance = pe.bad_debt_balance")
      call add_line("endif")
    endif
    if (pft_encntr_alias_result_ind)
      call add_line("reply->encounter[d.seq]->pft_encntr_alias = pe.pft_encntr_alias")
    endif
 
    call add_line("with nocounter")
    if (pft_guarantor_name_result_ind)
      call add_line(", outerjoin = d1 go")
    else
      call add_line("go")
    endif
 
    call perform_buffer(1)
    endif

;~For simplicity sake, if either start or end date result is requested we'll get both.
    if (pft_start_date_result_ind = 1
      or pft_end_date_result_ind = 1)
        
	;~ Declare needed to retrieve the admit_dt_tm.
	declare pm_inp_admit_dt_tm() = c20
        declare start_date = q8
	declare end_date = q8

	select into "nl:"
          admit_dt_tm = cnvtdatetime(pm_inp_admit_dt_tm(e.encntr_id, 1, sysdate))
        from (dummyt d with seq = value(reply_count)),
	     encounter e,
             pft_encntr pe
        
	plan d
	join e where e.encntr_id = reply->encounter[d.seq].encounter_id
        join pe where pe.encntr_id = e.encntr_id
	          and pe.pft_encntr_id = reply->encounter[d.seq]->pft_encounter_id
        detail

          ;~Grab the month of the admit date/time
          admit_month = cnvtint(substring(1,2, format(admit_dt_tm, "MM/DD/YYYY;;d")))

	  if (e.encntr_type_class_cd = gp_inpatient_cd
	    or e.encntr_type_class_cd = gp_skilled_cd
	    or e.encntr_type_class_cd = gp_observation_cd)

	      start_date = admit_dt_tm
	      end_date = e.disch_dt_tm

	  ;~If it's a recurring encounter we need to go calculate the start/end date of service
	  elseif (e.encntr_type_class_cd = gp_recurring_cd)

            ;~Does the admit month matches the pfe_encnt recurring month?
            if (admit_month = pe.recur_current_month)

	       ;~If it's equal then set the start date of service to the admit date/time
               start_date = admit_dt_tm
            else

               ;~If it isn't then set the start date of service to the first day of the recurring month/year
               new_date = 0
               new_date = cnvtint(concat(cnvtstring(pe.recur_current_month), "01", cnvtstring(pe.recur_current_year)))
               start_date = cnvtdatetime(cnvtdate(new_date), 0)

	    endif

            ;~Do we have a clinical discharge date?
            if (e.disch_dt_tm != NULL)

               ;~Grab the month of the clinical discharge
               discharge_month = cnvtint(substring(1,2, format(e.disch_dt_tm,"MM/DD/YYYY;;d")))

               ;~The the recurring month the same month as they were discharged?
               if (pe.recur_current_month = discharge_month)

                  ;~If so, then set the end date of service to the clinical discharge date.
                  end_date = e.disch_dt_tm
               else
                  ;~If not, set the end date of service to the last day of the month for the pft_encounter.
                  new_date = 0

                  ;~If it's December then set the month to "01" and add one to the year.
                  if (pe.recur_current_month = 12)
	             new_date = cnvtint(concat("01", "01", cnvtstring(pe.recur_current_year + 1)))
                  else
                     new_date = cnvtint(concat(cnvtstring(pe.recur_current_month + 1), "01",cnvtstring(pe.recur_current_year)))
                  endif

                  ;~ Subtract one from the date to get the last day of the month.
                  end_date = datetimeadd(cnvtdatetime(cnvtdate(new_date), 0), -1)
               endif
  
            else

                ;~If not, set the end date of service to the last day of the month for the pft_encounter.
                new_date = 0

                ;~If it's December then set the month to "01" and add one to the year.
                if (pe.recur_current_month = 12)
                   new_date = cnvtint(concat("01", "01", cnvtstring(pe.recur_current_year + 1)))
                else
                   new_date = cnvtint(concat(cnvtstring(pe.recur_current_month + 1), "01",cnvtstring(pe.recur_current_year)))
                endif

                ;~ Subtract one from the date to get the last day of the month.
                end_date = datetimeadd(cnvtdatetime(cnvtdate(new_date), 0), -1)
  
            endif

          else

            ;~If it's not a recurring encounter, set the start to the admit date
	    ;~and the end date to the discharge date.
	      start_date = admit_dt_tm

	      if (e.disch_dt_tm = NULL)

		 end_date = admit_dt_tm
	      else

		 end_date = e.disch_dt_tm
	      endif
	  
	  
	  endif

	  if (pft_start_date_result_ind)
	     reply->encounter[d.seq]->pft_start_date = cnvtdate(start_date)
          endif
          
	  if (pft_end_date_result_ind)
	     reply->encounter[d.seq]->pft_end_date = end_date
	  endif
          
        with nocounter
    endif

  endif
  ;~VI024 End
 
;Grab billing entity as requested ***** D015
  ;if ((billing_entity_result_ind) and (check_billing_entity))  ;50792
  if (billing_entity_result_ind)  ;50792
  	if(reply_count > 0) ;jc022
    select into "nl:" be.be_name
      from billing_entity be,
           be_org_reltn bor,
           location l,
           encounter e,
           (dummyt d with seq = value(reply_count))
      plan d
      join e
      	where e.encntr_id = reply->encounter[d.seq]->encounter_id
      join l
        where l.location_cd = e.loc_facility_cd
      join bor
        where bor.organization_id = l.organization_id
      join be
	    where  bor.billing_entity_id = be.billing_entity_id
    detail
	  reply->encounter[d.seq]->billingentity = be.be_name
	with nocounter, maxqual = 1
		endif ;jc022
  endif ; ***** D015
 
;Grab aliases as requested
  if (encounter_alias_result_ind)
    for (i = 1 to encounter_alias_result_count)
      set alias_type_cd = encounter_alias_results->result[i]->alias_type_cd
      free set meaning
      set meaning = cnvtlower(encounter_alias_results->result[i]->meaning)
      free set target
 
      ;+50792
      ;set target = concat("reply->encounter[d.seq]->alias_", meaning)
      
      ;+74689
      /*
      if (reply_count > 200)
         set target = concat("reply->encounter[d.seq]->alias_", meaning)
      else
         set target = concat("reply->encounter[lCnt2]->alias_", meaning)
      endif
      ;-50792
      */
      
      set target = concat("reply->encounter[lIndex]->alias_", meaning)
      ;-74689
      
 
      free set temp_text
      record temp_text
      (
        1  text           = vc
      )
 
      set lCnt = 0  ;50792
      set lCnt2 = 0 ;50792
 
      call reset_buffer(1)
      if (reply_count > 0) ;jc022
      
         ;+74689
         /*
         if (reply_count > 200)  ;50792
		    call add_line("select into 'nl:' a.alias")
		    call add_line("from encntr_alias a, (dummyt d with seq = value(reply_count))")
		    call add_line("plan d")
		    call add_line("join a")
		    call add_line("where a.encntr_id = reply->encounter[d.seq]->encounter_id")
		    ;call add_line(concat("and a.encntr_alias_type_cd = ", trim(cnvtstring(alias_type_cd), 3)))  ;50792
		    call add_line(build("and a.encntr_alias_type_cd = ", alias_type_cd))  ;50792
 
		    if (canceled_encounter_mode)                                                                               ;012
		       call add_line("and a.active_ind = 0")                                                                   ;012
		       ;call add_line(concat("and a.active_status_cd = ", trim(cnvtstring(deleted_cd), 3))) ;012  ;50792
		       call add_line(build("and a.active_status_cd = ", deleted_cd))  ;50792
		    else                                                                                                       ;012
		       call add_line("and a.active_ind = 1")
		    endif                                                                                                      ;012
 
		    call add_line("and a.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
		    call add_line("detail")
		    call add_line("temp_text->text = cnvtalias(a.alias, a.alias_pool_cd)")
		    call add_line("if (size(trim(temp_text->text, 3)) > 0)")
		    call add_line("if (a.end_effective_dt_tm < cnvtdatetime(curdate, curtime3))")
		    call add_line(concat("temp_text->text = concat('", left_brace, "', temp_text->text, '", right_brace, "')"))
		    call add_line("endif")
		    call add_line(concat("if (size(trim(", target, ", 3)) > 0)"))
		    call add_line(concat(target, " = concat(", target, ", '", separator, "', temp_text->text)"))
		    call add_line("else")
		    call add_line(concat(target, " = temp_text->text"))
		    call add_line("endif")
		    call add_line("endif")
		    call add_line("with nocounter go")
 
		 ;+50792
		 else
		    call add_line("select into 'nl:' a.alias")
		    call add_line("from encntr_alias a")
		    call add_line(build("where expand(lCnt, 1,", reply_count,
                             ",a.encntr_id, reply->encounter[lCnt]->encounter_id, 200)"))
		    call add_line(build("and a.encntr_alias_type_cd = ", alias_type_cd))
 
		    if (canceled_encounter_mode)
		       call add_line("and a.active_ind = 0")
		       call add_line(build("and a.active_status_cd = ", deleted_cd))
		    else
		       call add_line("and a.active_ind = 1")
		    endif
 
		    call add_line("and a.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
		    call add_line("detail")
		    call add_line(build("lCnt2 = locateval(lCnt, 1,", reply_count,
                             ",a.encntr_id, reply->encounter[lCnt]->encounter_id)"))
 
		    call add_line("temp_text->text = cnvtalias(a.alias, a.alias_pool_cd)")
		    call add_line("if (size(trim(temp_text->text, 3)) > 0)")
		    call add_line("if (a.end_effective_dt_tm < cnvtdatetime(curdate, curtime3))")
		    call add_line(concat("temp_text->text = concat('", left_brace, "', temp_text->text, '", right_brace, "')"))
		    call add_line("endif")
		    call add_line(concat("if (size(trim(", target, ", 3)) > 0)"))
		    call add_line(concat(target, " = concat(", target, ", '", separator, "', temp_text->text)"))
		    call add_line("else")
		    call add_line(concat(target, " = temp_text->text"))
		    call add_line("endif")
		    call add_line("endif")
		    call add_line("with nocounter go")
		 endif
		 ;-50792
		 */
		 
		 set lTotal2 = reply_count
	     ;set lTotal = ceil(cnvtreal(lTotal2) / 200) * 200													;138442
	     set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize										;138442
	     set stat = alterlist(reply->encounter, lTotal)
	       	    
	     set lCnt2 = 0
	     set lIndex = 0
	     set lStart = 1
	     set bDone = FALSE
	     	 
		 call add_line("select into 'nl:' a.alias")
		 ;call add_line("from encntr_alias a, (dummyt d1 with seq = value(1 + ((lTotal - 1) / 200)))")		;138442
		 call add_line("from encntr_alias a, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))")	;138442
		 ;call add_line("plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + 200))")			;138442
		 call add_line("plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))")    	;138442
		 call add_line("join a")
		 ;call add_line(build("where expand(lCnt2, lStart, lStart + (200 - 1)",								;138442
		 call add_line(build("where expand(lCnt2, lStart, lStart + (batchSize - 1)",
                             ", a.encntr_id, reply->encounter[lCnt2]->encounter_id)"))						;138442
		 call add_line(build("and a.encntr_alias_type_cd = ", alias_type_cd))
 		 call add_line("and a.encntr_id + 0 > 0.0")
 		 
		 if (canceled_encounter_mode)
		    call add_line("and a.active_ind = 0")
		    call add_line(build("and a.active_status_cd = ", deleted_cd))
		 else
		    call add_line("and a.active_ind = 1")
		 endif
 
		 call add_line("and a.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
		 call add_line("order by cnvtdatetime(a.end_effective_dt_tm) desc")
		 call add_line("detail")
		 call add_line("bDone = FALSE")
		 call add_line(build("lIndex = locateval(lCnt, 1,", reply_count,
                             ",a.encntr_id, reply->encounter[lCnt]->encounter_id)"))
 
		 call add_line("temp_text->text = cnvtalias(a.alias, a.alias_pool_cd)")
		 call add_line("if (size(trim(temp_text->text, 3)) > 0)")
		 call add_line("if (a.end_effective_dt_tm < cnvtdatetime(curdate, curtime3))")
		 call add_line(concat("temp_text->text = concat('", left_brace, "', temp_text->text, '", right_brace, "')"))
		 call add_line("endif")
		 call add_line(concat("if (size(trim(", target, ", 3)) > 0)"))
		 call add_line(concat(target, " = concat(", target, ", '", separator, "', temp_text->text)"))
		 call add_line("else")
		 call add_line(concat(target, " = temp_text->text"))
		 call add_line("endif")
		 call add_line("endif")	
		 
		 call add_line("while (bDone != TRUE)")
	     call add_line("lCnt3 = lIndex + 1")
	         
	     call add_line("lIndex = locateval(lCnt, lCnt3, reply_count, a.encntr_id, reply->encounter[lCnt]->encounter_id)")
	                  
	     call add_line("if (lIndex > 0)")
	     call add_line("lCnt3 = lIndex")
	     call add_line("temp_text->text = cnvtalias(a.alias, a.alias_pool_cd)")
		 call add_line("if (size(trim(temp_text->text, 3)) > 0)")
		 call add_line("if (a.end_effective_dt_tm < cnvtdatetime(curdate, curtime3))")
		 call add_line(concat("temp_text->text = concat('", left_brace, "', temp_text->text, '", right_brace, "')"))
		 call add_line("endif")
		 call add_line(concat("if (size(trim(", target, ", 3)) > 0)"))
		 call add_line(concat(target, " = concat(", target, ", '", separator, "', temp_text->text)"))
		 call add_line("else")
		 call add_line(concat(target, " = temp_text->text"))
		 call add_line("endif")
		 call add_line("endif")	
	    
	     call add_line("else")
	     call add_line("bDone = TRUE")
	     call add_line("endif")         
	     call add_line("endwhile") 
		 	    
		 call add_line("with nocounter go")
		 ;-74689
		 
      endif;jc022
      ;call dump_buffer(1) ;rgf
      call perform_buffer(1)
      set stat = alterlist(reply->encounter, reply_count)  ;74689
      
    endfor
  endif
 
;Grab providers as requested
  if (provider_result_ind)
    for (i = 1 to provider_result_count)
      set provider_type_cd = provider_results->result[i]->provider_type_cd
      free set meaning
      set meaning = cnvtlower(provider_results->result[i]->meaning)
      free set target
 
      ;+50792
      ;set target = concat("reply->encounter[d.seq]->provider_", meaning)
      
      ;+74689
      ;if (reply_count > 200)
      ;   set target = concat("reply->encounter[d.seq]->provider_", meaning)
      ;else
      ;   set target = concat("reply->encounter[lCnt2]->provider_", meaning)
      ;endif
      ;-50792
      
      set target = concat("reply->encounter[lIndex]->provider_", meaning)
      ;-74689
 
      free set temp_text
      record temp_text
      (
        1  text = vc
      )
 
      set lCnt = 0  ;50792
      set lCnt2 = 0 ;50792
 
      call reset_buffer(1)
      if (reply_count > 0) ;jc022
         
         ;+74689
         /*
         if (reply_count > 200)  ;50792
    call add_line("select into 'nl:' p.name_full_formatted")
    ;call add_line("from person p, encntr_prsnl_reltn r, (dummyt d with seq = value(reply_count))")  ;CP026
    call add_line("from prsnl p, encntr_prsnl_reltn r, (dummyt d with seq = value(reply_count))")  ;CP026
    call add_line("plan d")
    call add_line("join r")
    call add_line("where r.encntr_id = reply->encounter[d.seq]->encounter_id")
    ;call add_line(concat("and r.encntr_prsnl_r_cd = ", trim(cnvtstring(provider_type_cd), 3)))  ;50792
    call add_line(build("and r.encntr_prsnl_r_cd = ", provider_type_cd))  ;50792
 
    if (canceled_encounter_mode)                                                 ;012
       call add_line("and r.active_ind = 0")                                      ;012
       ;call add_line(concat("and r.active_status_cd = ", trim(cnvtstring(deleted_cd), 3))) ;012  ;50792
       call add_line(build("and r.active_status_cd = ", deleted_cd))  ;50792
    else                                                                           ;012
       call add_line("and r.active_ind = 1")
    endif                                                                         ;012
 
    call add_line("and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call add_line("and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    call add_line("join p")
    call add_line("where p.person_id = r.prsnl_person_id")
    call add_line("detail")
    call add_line("temp_text->text = trim(p.name_full_formatted, 3)")
    call add_line("if (size(trim(temp_text->text, 3)) > 0)")
    call add_line(concat("if (size(trim(", target, ", 3)) > 0)"))
    call add_line(concat(target, " = concat(", target, ", '", separator, "', temp_text->text)"))
    call add_line("else")
    call add_line(concat(target, " = temp_text->text"))
    call add_line("endif")
    call add_line("endif")
    call add_line("with nocounter go")
 
 ;+50792
 else
    call add_line("select into 'nl:' p.name_full_formatted")
    call add_line("from encntr_prsnl_reltn r, prsnl p")
    call add_line("plan r")
    call add_line("where expand(lCnt, 1, reply_count, r.encntr_id, reply->encounter[lCnt]->encounter_id, 200)")
    call add_line(build("and r.encntr_prsnl_r_cd = ", provider_type_cd))
 
    if (canceled_encounter_mode)                                             ;012
       call add_line("and r.active_ind = 0")                                     ;012
       call add_line(build("and r.active_status_cd = ", deleted_cd))                            ;012
    else                                                                            ;012
       call add_line("and r.active_ind = 1")
    endif                                                                           ;012
 
    call add_line("and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call add_line("and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    call add_line("join p")
    call add_line("where p.person_id = r.prsnl_person_id")
    call add_line("detail")
    call add_line("lCnt2 = locateval(lCnt, 1, reply_count, r.encntr_id, reply->encounter[lCnt]->encounter_id)")
    call add_line("temp_text->text = trim(p.name_full_formatted, 3)")
    call add_line("if (size(trim(temp_text->text, 3)) > 0)")
    call add_line(concat("if (size(trim(", target, ", 3)) > 0)"))
    call add_line(concat(target, " = concat(", target, ", '", separator, "', temp_text->text)"))
    call add_line("else")
    call add_line(concat(target, " = temp_text->text"))
    call add_line("endif")
    call add_line("endif")
    call add_line("with nocounter go")
 endif
 ;-50792
 */
 
  	set lTotal2 = reply_count
	;set lTotal = ceil(cnvtreal(lTotal2) / 200) * 200																	;138442
	set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize														;138442
	set stat = alterlist(reply->encounter, lTotal)

	set lCnt2 = 0
	set lIndex = 0
	set lStart = 1
	set bDone = FALSE
	     	  
    call add_line("select into 'nl:' p.name_full_formatted")
    ;call add_line("from encntr_prsnl_reltn r, prsnl p, (dummyt d1 with seq = value(1 + ((lTotal - 1) / 200)))")		;138442
    call add_line("from encntr_prsnl_reltn r, prsnl p, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))")	;138442
    ;call add_line("plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + 200))")								;138442
    call add_line("plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))")   						;138442
    call add_line("join r")
    ;call add_line(build("where expand(lCnt2, lStart, lStart + (200 - 1)",												;138442
    call add_line(build("where expand(lCnt2, lStart, lStart + (batchSize - 1)",
                             ", r.encntr_id, reply->encounter[lCnt2]->encounter_id)"))									;138442
    call add_line(build("and r.encntr_prsnl_r_cd = ", provider_type_cd))
    call add_line("and r.encntr_id + 0 > 0.0")
    
    if (canceled_encounter_mode)                                              
       call add_line("and r.active_ind = 0")                                      
       call add_line(build("and r.active_status_cd = ", deleted_cd)) 
    else                                                                             
       call add_line("and r.active_ind = 1")
    endif                                                                            
 
    call add_line("and r.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)")
    call add_line("and r.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)")
    call add_line("join p")
    call add_line("where p.person_id = r.prsnl_person_id")
    call add_line("detail")
    call add_line("bDone = FALSE")
    call add_line("lIndex = locateval(lCnt, 1, reply_count, r.encntr_id, reply->encounter[lCnt]->encounter_id)")
    call add_line("temp_text->text = trim(p.name_full_formatted, 3)")
    call add_line("if (size(trim(temp_text->text, 3)) > 0)")
    call add_line(concat("if (size(trim(", target, ", 3)) > 0)"))
    call add_line(concat(target, " = concat(", target, ", '", separator, "', temp_text->text)"))
    call add_line("else")
    call add_line(concat(target, " = temp_text->text"))
    call add_line("endif")
    call add_line("endif")
    
    call add_line("while (bDone != TRUE)")
    call add_line("lCnt3 = lIndex + 1")
         
    call add_line("lIndex = locateval(lCnt, lCnt3, reply_count, r.encntr_id, reply->encounter[lCnt]->encounter_id)")
                  
    call add_line("if (lIndex > 0)")
    call add_line("lCnt3 = lIndex")
    call add_line("temp_text->text = trim(p.name_full_formatted, 3)")
    call add_line("if (size(trim(temp_text->text, 3)) > 0)")
    call add_line(concat("if (size(trim(", target, ", 3)) > 0)"))
    call add_line(concat(target, " = concat(", target, ", '", separator, "', temp_text->text)"))
    call add_line("else")
    call add_line(concat(target, " = temp_text->text"))
    call add_line("endif")
    call add_line("endif")
    
    call add_line("else")
    call add_line("bDone = TRUE")
    call add_line("endif")         
    call add_line("endwhile") 
	 	    
	call add_line("with nocounter go")
 ;-74689
 
      endif ;jc022
      call perform_buffer(1)
      set stat = alterlist(reply->encounter, reply_count)  ;74689
    endfor
  endif

;+BG025
if (episode_name_ind)
   if (reply_count > 0)
  	      
  	  ;+74689
  	  /*
  	  if (reply_count > 200)  ;50792
	     select into "nl:" e.encntr_id
		  from episode_encntr_reltn eer, episode ep,
		    (dummyt d with seq = value(reply_count))
		   plan d
		   join eer
		    where eer.encntr_id = reply->encounter[d.seq]->encounter_id
		       join ep
		    where ep.episode_id = eer.episode_id
	       detail
	         reply->encounter[d.seq]->episode_display = ep.display
	     with nocounter
 
      ;+50792
      else
        select into "nl:" e.encntr_id
		 from episode_encntr_reltn eer, episode ep
		  plan eer
		   where expand(lCnt, 1, reply_count, eer.encntr_id,
		                       reply->encounter[lCnt]->encounter_id, 200)
		      join ep
		   where ep.episode_id = eer.episode_id
		      detail
		        lCnt2 = locateval(lCnt, 1, reply_count,
		                          eer.encntr_id, reply->encounter[lCnt]->encounter_id)
		 
		        reply->encounter[lCnt2]->episode_display = ep.display
		with nocounter
      endif
      ;-50792
      */
      
       set lTotal2 = reply_count
	   ;set lTotal = ceil(cnvtreal(lTotal2) / 200) * 200														;138442
	   set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize												;138442
	   set stat = alterlist(reply->encounter, lTotal)
	    
	   set lCnt2 = 0
	   set lIndex = 0
	   set lStart = 1
	   set bDone = FALSE
	   
	   select into "nl:"
	     ep.encntr_id
	    ;from episode_encntr_reltn eer, episode ep, (dummyt d1 with seq = value(1 + ((lTotal - 1) / 200)))		;138442
	    from episode_encntr_reltn eer, episode ep, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))	;138442
	     ;plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + 200))									;138442
	     plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))  							;138442
	     join eer
	      ;where expand(lCnt2, lStart, lStart + (200 - 1), eer.encntr_id,										;138442
	      where expand(lCnt2, lStart, lStart + (batchSize - 1), eer.encntr_id,
	              reply->encounter[lCnt2]->encounter_id)														;138442
	        and eer.encntr_id + 0 > 0.0
	        and eer.active_ind = 1	 																			;149517
	     join ep
		   where ep.episode_id = eer.episode_id
		   and ep.active_ind = 1 																			;149517
	     detail
	        bDone = FALSE
	        
	        lIndex = locateval(lCnt, 1, reply_count, eer.encntr_id,
                      reply->encounter[lCnt]->encounter_id)
                              
	        reply->encounter[lIndex]->episode_display = ep.display
	        
	        while (bDone != TRUE)
	          lCnt3 = lIndex + 1
	         
	          lIndex = locateval(lCnt, lCnt3, reply_count, eer.encntr_id,
                        reply->encounter[lCnt]->encounter_id)                     
	                  
	          if (lIndex > 0)
	             lCnt3 = lIndex
	             reply->encounter[lIndex]->episode_display = ep.display
	          else
	             bDone = TRUE
	          endif         
	        endwhile 
	   with nocounter
	     
	   set stat = alterlist(reply->encounter, reply_count)
      ;-74689
      
   endif
endif
;-BG025

;42711++
   if (response_cd_ind)
      if (reply_count > 0)  
         set i = 0
         
         free record person_info
         record person_info
         (
           1 persons[*]
             2 person_id = f8
             2 response_cd = f8
             2 reply_dt_tm = dq8
           1 encntrs[*]
             2 encntr_id = f8
             2 response_cd = f8
             2 reply_dt_Tm = dq8
         )
         
         set stat = alterlist(person_info->encntrs, size(reply->encounter, 5))
         for (i = 1 to size(reply->encounter, 5))
            set person_info->encntrs[i].encntr_id = reply->encounter[i].encounter_id 
         endfor
         
         call GetResponseCode(0)                  

         for (i = 1 to size(reply->encounter, 5))
            if (person_info->encntrs[i].response_cd > 0)
               set reply->encounter[i].response_cd_display = 
                   uar_get_code_display(person_info->encntrs[i].response_cd)
            endif
         endfor
         free record person_info
      endif
   endif
;42711--
 
   ;+138442
   if (show_all_encntr_select_pending_only_mode = TRUE and reply_count > 0)
 
      set lTotal2 = reply_count
	   ;set lTotal = ceil(cnvtreal(lTotal2) / 200) * 200												;138442
	   set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize										;138442
	   set stat = alterlist(reply->encounter, lTotal)
 
	   set lCnt2 = 0
	   set lIndex = 0
	   set lStart = 1
	   set bDone = FALSE
 
	   select into "nl:" ep.encntr_id
	   ;from encntr_pending ep, (dummyt d1 with seq = value(1 + ((lTotal - 1) / 200)))					;138442
	   from encntr_pending ep, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))				;138442
	   ;plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + 200))							;138442
	   plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))  					;138442
	   join ep
	     ;where expand(lCnt2, lStart, lStart + (200 - 1), ep.encntr_id,									;138442
	     where expand(lCnt2, lStart, lStart + (batchSize - 1), ep.encntr_id,
	                                       reply->encounter[lCnt2]->encounter_id)						;138442
	        and ep.encntr_id + 0 > 0.0
	        and ep.pending_type_flag = 3
	        and ep.process_status_flag + 0 = 2
	        and ep.active_ind = 1
	        and ep.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime3)
	        and ep.end_effective_dt_tm > cnvtdatetime(curdate,curtime3)
 
	   detail
	     lIndex = locateval(lCnt, 1, reply_count, ep.encntr_id,
	                                       reply->encounter[lCnt]->encounter_id)
	     reply->encounter[lIndex]->encntr_pending_ind = TRUE
	   with nocounter
 
	   set stat = alterlist(reply->encounter, reply_count)
 
   endif
   ;-138442
 
 ;153466++
;165024++
;if (((waitlist_removal_dt_tm_ind = TRUE) or (dDSBLENCRSLTScd > 0.0))  and reply_count > 0)
if (((waitlist_removal_dt_tm_ind = TRUE) or scheduling_disable_qualifying_encntrs_ind
    or show_wl_removed_as_disabled_ind) and (reply_count > 0))
;165024--
      set lTotal2 = reply_count
	     set lTotal = ceil(cnvtreal(lTotal2) / batchSize) * batchSize
	     set stat = alterlist(reply->encounter, lTotal)
 
      for (x = reply_count + 1 to lTotal)
         set reply->encounter[x].encounter_id = reply->encounter[reply_count].encounter_id
      endfor
 
	     set lCnt2 = 0
	     set lStart = 1
 
  	   select into "nl:" wl.removal_dt_tm
   ;165024 from pm_wait_list wl, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize)))
   from encounter e, pm_wait_list wl, (dummyt d1 with seq = value(1 + ((lTotal - 1) / batchSize))) ;165024
	     plan d1 where initarray(lStart, evaluate(d1.seq, 1, 1, lStart + batchSize))
	     join wl
 
	        where expand(lCnt,lStart,lStart + (batchSize - 1),wl.encntr_id,reply->encounter[lCnt].encounter_id)
	        and wl.removal_dt_tm != null
	        and wl.active_ind = 1
   ;165024++
   join e
   where wl.encntr_id = e.encntr_id
   ;165024--
	     detail
   lIndex = locateval(lCnt,1,reply_count,wl.encntr_id,reply->encounter[lCnt]->encounter_id)
	        reply->encounter[lIndex]->waitlist_removal_dt_tm = wl.removal_dt_tm
   ;165024++
   ;if  (dDSBLENCRSLTScd > 0.0)
   if ((scheduling_disable_qualifying_encntrs_ind and e.encntr_type_class_cd = cv69_WAITLIST_cd) or
       (show_wl_removed_as_disabled_ind and e.encntr_type_class_cd = cv69_WAITLIST_cd))
   ;165024--
            reply->encounter[lIndex]->ghost_encntr_ind = True
         endif
	     with nocounter
	     set stat = alterlist(reply->encounter, reply_count)
   endif
;153466--
if (location_extension_ind and reply_count > 0) ;145471++
    set lStart = 1
    set nLoopCount = ceil(cnvtreal(reply_count) / batchSize)
    set lTotal = nLoopCount * batchSize
    set stat = alterlist(reply->encounter, lTotal)
    
    ;fill out any empty areas with dummy data
    for (x = reply_count + 1 to lTotal)
        set reply->encounter[x].encounter_id = reply->encounter[reply_count].encounter_id
    endfor
    
    select into 'nl:'
    from encounter e
        ,phone p
        ,(dummyt d with seq = value(nLoopCount))
    plan d where
        initarray(lStart, evaluate(d.seq,1,1,lStart + batchSize))
    join e where
        expand(lCnt,lStart,lStart + (batchSize - 1),e.encntr_id,reply->encounter[lCnt].encounter_id)
    join p where
        p.parent_entity_id in (e.loc_bed_cd,e.loc_room_cd,e.loc_nurse_unit_cd) and
        p.parent_entity_name = 'LOCATION'
    order by e.encntr_id
    head report
        lCnt = 0
        lIndex = 0
        bBedFound = FALSE
        bRoomFound = FALSE
        bSetNumber = FALSE
        
    head e.encntr_id
        lIndex = locateval(lCnt,lIndex,reply_count,e.encntr_id,reply->encounter[lCnt].encounter_id)
        bBedFound = FALSE
        bRoomFound = FALSE
        bSetNumber = FALSE
        
    detail
        if (p.parent_entity_id > 0)
            case (p.parent_entity_id)
            of e.loc_bed_cd:
                bBedFound = TRUE
                bSetNumber = TRUE
            of e.loc_room_cd:
                bRoomFound = TRUE
                if (bBedFound = FALSE or size(trim(reply->encounter[lIndex]->location_extension, 3)) = 0)
                    bSetNumber = TRUE
                endif
            of e.loc_nurse_unit_cd:
                if ((bBedFound = FALSE and bRoomFound = FALSE) or size(trim(reply->encounter[lIndex]->location_extension, 3)) = 0)
                    bSetNumber = TRUE
                endif
            endcase
            
            if (bSetNumber)
                if (size(trim(p.extension, 3)) > 0)
                    reply->encounter[lIndex]->location_extension = trim(p.extension, 3)
                elseif (size(trim(p.phone_num, 3)) > 0)
                    reply->encounter[lIndex]->location_extension = trim(cnvtphone(p.phone_num,p.phone_format_cd), 3)
                elseif (size(trim(p.paging_code, 3)) > 0)
                    reply->encounter[lIndex]->location_extension = trim(p.paging_code, 3)
                endif
            endif
        endif
    with nocounter
    
    set stat = alterlist(reply->encounter, reply_count)
endif ;145471--


  ;+292506
  if (primary_guarantor_result_ind)
     declare lPriorityBase   = i4 with noconstant(0)
     declare dPriorityBaseCd = f8 with noconstant(0.0)
     declare dGuarTypeCd     = f8 with noconstant(0.0)
     
     set stat = uar_get_meaning_by_codeset(20790, "PRIORITY_SEQ", 1, dPriorityBaseCd)
     set stat = uar_get_meaning_by_codeset(362, "GUARANTOR", 1, dGuarTypeCd)
     
     if (dPriorityBaseCd > 0)
        select into "nl:"
          cve.code_value
         from code_value_extension cve
          where cve.code_value = dPriorityBaseCd
            and cve.field_name = "OPTION"
            and cve.code_set = 20790
         detail 
           if (trim(cve.field_value,3) = "1")
              lPriorityBase = 1
           endif
        with nocounter
     endif
     
     
     ;Check for person level Guarantors first
     select into "nl:"
       epr.related_person_id
      from encntr_person_reltn epr, person p
       plan epr
        where expand(lCnt, 1, reply_count, epr.encntr_id, reply->encounter[lCnt].encounter_id)
          and epr.person_reltn_type_cd = def_guarantor_cd
          and epr.priority_seq = lPriorityBase
          and epr.active_ind = 1
          and epr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
          and epr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
       join p
        where p.person_id = epr.related_person_id
          and p.active_ind = 1
          and p.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
          and p.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
      order by epr.encntr_id, epr.priority_seq, epr.internal_seq,
               cnvtdatetime(epr.beg_effective_dt_tm) desc, cnvtdatetime(epr.end_effective_dt_tm) desc
      detail
        lIndex = locateval(lCnt, 1, reply_count, epr.encntr_id, reply->encounter[lCnt].encounter_id)
         
        if (textlen(trim(reply->encounter[lIndex].primary_guar_name, 3)) = 0 )
           reply->encounter[lIndex].primary_guar_name = p.name_full_formatted
        endif
     with nocounter
     
     
     ;Try to find a Guarantor orgs for the encounters that didn't have a primary person level guarantor.
     select into "nl:"
       eor.encntr_id
      from encntr_org_reltn eor, organization o, (dummyT d with seq = value(reply_count))
       plan d
        where textlen(trim(reply->encounter[d.seq].primary_guar_name, 3)) = 0
       join eor
        where eor.encntr_id = reply->encounter[d.seq].encounter_id
          and eor.encntr_org_reltn_type_cd = dGuarTypeCd
          and eor.priority_seq = lPriorityBase
          and eor.active_ind = 1
          and eor.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
	       and eor.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
	    join o
	     where o.organization_id = eor.organization_id
	       and o.active_ind = 1
      order by cnvtdatetime(eor.beg_effective_dt_tm) desc, cnvtdatetime(eor.end_effective_dt_tm) desc
      detail 
        if (textlen(trim(reply->encounter[d.seq].primary_guar_name, 3)) = 0)
           reply->encounter[d.seq].primary_guar_name = o.org_name
        endif
     with nocounter    
  endif
  ;-292506
  
  
  ;+301414
  if (primary_health_plan_result_ind or primary_payer_result_ind)
     set bDone = FALSE
     declare dCarrierTypeCd = f8 with noconstant(0.0)
     set stat = uar_get_meaning_by_codeset(370, "CARRIER", 1, dCarrierTypeCd)

     select into "nl:" 
       epr.health_plan_id
      from encntr_plan_reltn epr, health_plan h, org_plan_reltn opr, organization o
       plan epr
        where expand(lCnt, 1, reply_count, epr.encntr_id, reply->encounter[lCnt].encounter_id)
         and epr.active_ind = 1
         and epr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
         and epr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
         and epr.priority_seq > 0
         and epr.priority_seq < 99
       join h
        where h.health_plan_id = epr.health_plan_id
          and h.active_ind = 1
       join opr
        where opr.health_plan_id = h.health_plan_id
          and opr.org_plan_reltn_cd = dCarrierTypeCd
          and opr.active_ind = 1
          and opr.beg_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
          and opr.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
       join o
        where o.organization_id = opr.organization_id
          and o.active_ind = 1   
      order by epr.encntr_id, epr.priority_seq, cnvtdatetime(epr.beg_effective_dt_tm) desc
      head epr.encntr_id
        bDone = FALSE
      detail
        if (bDone != TRUE)
           lIndex = locateval(lCnt, 1, reply_count, epr.encntr_id, reply->encounter[lCnt].encounter_id)
            
           if (epr.health_plan_id > 0.0 and epr.person_id > 0)
              bDone = TRUE
              reply->encounter[lIndex].primary_health_plan_name = trim(h.plan_name, 3)
              reply->encounter[lIndex].primary_payer_name = trim(o.org_name,3)         
           endif  ;if (epr.health_plan_id > 0.0 and epr.person_id > 0)
        endif  ;if (bDone != TRUE)
     with nocounter
  endif
  ;-301414
  
  
;If we get here, return a good status
  set reply->status_data->status = "S"
 
#4999_REPLY_EXIT

/***********  ZS021  ************/
#5000_REP_FILTER_STR
;Check the filter and set the string to the filter value

   call set_reply_filter(0)

#5999_REP_FILTER_STR_EXIT

/***********  ZS021  ************/  
 
#9999_EXIT_PROGRAM

   ;+201820
   if (request->debug)
      call echo("Reply results:")
      call echorecord(reply)
   endif  
   ;-201820
   
  end
  go

;Generated by GNU enscript 1.6.4.
