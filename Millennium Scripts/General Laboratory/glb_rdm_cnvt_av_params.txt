 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_cnvt_av_params/glb_rdm_cnvt_av_params.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 2001 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_rdm_cnvt_av_params.prg
        Object name:            glb_rdm_cnvt_av_params
        Readme #:               2067

        Product:                PathNet
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            
        
        Program purpose:        The purpose of this readme is to update the
                                av_check_part_qc_flag on the lab_instrument table

        Tables read,            TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
        and access method:      --------------------    -----------------------------
                                lab_instrument          Full

        Tables updated:         lab_instrument

        Executing from:         

        Special Notes:          Each section should clearly identify what the purpose
                                of that README step is.  
        
        Run Occurance:          (select ONE of the following)
                                -----------------------------
                                [x] 1. RUN ONCE
                                [ ] 2. RUN MANY

        ReadMe Category:        (select ONE of the following)
                                -----------------------------
                                [ ] 1. Data Load
                                [x] 2. Data Conversion
                                [ ] 3. Data Migration

        Execution Time:         (select ONE of the following)
                                ------------------------------------
                                [ ] 1. Uptime before uptime schema.
                                [X] 2. Uptime after uptime schema.
                                [ ] 3. Downtime before downtime schema.
                                [ ] 4. Downtime after downtime schema.
                                [ ] 5. Uptime after all other components.
        
        Exec. Justification:    This script will select all of the rows from the lab_instrument 
        						table and store the service_resource_cd and (av_check_part_qc_ind + 1) 
        						into a temporary record structure.  We will add one to the indicator 
        						because zero indicator is becoming one on the flag column and one 
        						indicator is becoming two on the flag column.
								This record structure will then be used to update the av_check_part_qc_flag 
								with the values that existed in the av_check_part_qc_ind plus one. 

      
        Parent Script:          

        Check Script:           glb_chk_cnvt_av_params

        Data file for import:   
        
        Execution Duration:     (select ONE of the following)
                                ----------------------------------
                                [ ] 1. Fixed Time
                                [x] 2. Driver Table: LAB_INSTRUMENT

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 09/04/01 Gary Runde           Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program glb_rdm_cnvt_av_params:dba go
create program glb_rdm_cnvt_av_params:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "glb_rdm_cnvt_av_params"
CALL LOGSCRIPTSTART(sREADME_NAME)

/************************
** README ACTION STEPS **
************************/

  record AVParams
  (
    1 AVParams[*]
      2 service_resource_cd         = f8
      2 av_check_part_qc_flag       = i2
  )
  
  declare av_cnt      = i4 with public, noconstant(0)
  declare success_ind = i2 with public, noconstant(0)

  select into "nl:"
    l.service_resource_cd,
    l.av_check_part_qc_ind
  from lab_instrument l
  plan l
  head report
    av_cnt = 0    
  detail
    av_cnt = av_cnt + 1
    if (mod(av_cnt, 10) = 1)
      stat = alterlist(AVParams->AVParams, av_cnt + 10)
    endif
    
    ;put the service_resource_cd and av_check_part_qc_flag into temporary structure
    AVParams->AVParams[av_cnt].service_resource_cd   = l.service_resource_cd
    AVParams->AVParams[av_cnt].av_check_part_qc_flag = l.av_chk_part_qc_ind + 1    
  with nocounter, forupdate(L)
  
  if (av_cnt > 0)
    set stat = alterlist(AVParams->AVParams, av_cnt)
  else
    call logmsg ("No rows found to update on the lab_instrument table.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
    set success_ind = 1
    go to EXIT_SCRIPT
  endif   

  ;update the lab_instrument table with the temporary structure values  
  update into 
    (dummyt d1 with seq = value(av_cnt)),
    lab_instrument l
  set
    l.av_check_part_qc_flag = AVParams->AVParams[d1.seq].av_check_part_qc_flag
  plan d1
  join l
    where l.service_resource_cd = AVParams->AVParams[d1.seq].service_resource_cd
  with nocounter
  
    ;check to make sure all rows were updated
  if (curqual = av_cnt)  
    set success_ind = 1
  else
    set success_ind = 0
  endif

;---------------------------------------------------------
#EXIT_SCRIPT
/****************************
**  LOG Execution Status.  **
**                         ***************************************
**  Note:  if you have a check script then you do not           **
**  need to perform the LOGSTATUS in the RDM script.            **
**  Explicit COMMIT and/or ROLLBACK must be perform             **
**  In this section both in the README and the CHECK            **
**  script.  For example:                                       **
**     if (nCnt > 0)                                            **
**       COMMIT  ;Just in case LOGSTATUS pulls an Oracle error. **
**       CALL LOGSTATUS("Execution Successful.", "S")           **
**     else                                                     **
**       ROLLBACK                                               **
**       CALL LOGSTATUS("Execution Failed because ...", "F")    **
**     endif                                                    **
**                                                              **
*****************************************************************/

if (success_ind = 0)
  rollback
  call logstatus ("Failed to update the lab_instrument->av_check_part_qc_flag successfully.", "F")
  call logmsg ("Failed to update the lab_instrument->av_check_part_qc_flag successfully.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
else
  commit
  call logstatus ("Updated the lab_instrument->av_check_part_qc_flag successfully.", "S")
  call logmsg ("Updated the lab_instrument->av_check_part_qc_flag successfully.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
endif

free set AVParams

/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
CALL LOGSCRIPTEND(sREADME_NAME)

end go

;Generated by GNU enscript 1.6.4.
