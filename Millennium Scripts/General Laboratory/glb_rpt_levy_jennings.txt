 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_levy_jennings/glb_rpt_levy_jennings.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
   ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_RPT_LEVY_JENNINGS.PRG
        Object name:            GLB_RPT_LEVY_JENNINGS
        Request #:              257532

        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve QC Results for
                                Vertical Levy_Jennings Report

        Tables read:            qc_result
                                resource_accession_r
                                control_lot
                                accession
                                discrete_task_assay
                                nomenclature
                                prsnl
                                qc_comment

        Tables updated:         n/a

        Executing from:         General Lab QC Inquiry

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 08/01/96 Chad Moats           Initial Release                     *
;    *001 11/17/97 Hal Patchen          Add subsection level data map check *
;    *002 12/12/97 Kevin Brunner        Add auto verify logic               *
;    *003 12/16/97 Chad Moats           Show comment headings on 1 line     *
;    *004 12/17/97 Chad Moats           Use expected mean and sd from the   *
;                                       holdstat array not cumrec           *
;    *005 01/22/98 Chad Moats           Add operaions logic                 *
;    *006 51/14/98 Chad Moats           Modify calculated stats to have a   *
;                                       2 extra decimal places              *
;    *008 11/5/98  Gary Runde           Added logic to show reviewed person *
;    *009 12/14/98 Gary Runde           Logic to work for ops PDM           *
;    *010 05/05/99 Chad Moats           Removed multiple joins to code_value*
;    *011 06/11/99 Gary Runde           Display the correct expected stats  *
;                                       for graph                           *
;    *012 06/18/99 Gary Runde           Rewrite the summary statistics      *
;                                       portion of report                   *
;    *013 08/13/99 Gary Runde           Fix problem of troubleshooting steps*
;                                       not displaying and page break prob. *
;    *014 08/16/99 Gary Runde           Show failed rules with comments     *
;                                       Move group stats with report stats  *
;                                       Add summary of statistics           *
;    *015 11/11/99 Gary Runde           Additional report changes           *
;    *016 12/06/99 Gary Runde           Internationalization                *
;    *017 07/05/00 Gary Runde           Rework PDM stuff                    *
;    *018 12/12/00 Gary Runde           Display correct verify prsnl name   *
;    *019 01/08/02 Raj Mishra           Remove q.lot_id from order clause   *
;    *020 04/03/03 Gary Runde           Fixed assay's that would display    *
;                                       that didn't have performed results  *
;                                       for the selected date range         *
;    *021 03/11/04 Craig Sumrall        Added logic for dealing with four   *
;    *                                  new ind                             *
;    *022 10/14/08 Subramanya           Added a logic to print Statistics   *
;                                       when printing control graph option  *
;                                       is selected.Fixed printng of Levey  *
;                                       Jennings Chart in multiple  pages.  * 
;    *023 12/11/08 Deshmukh Rahul       Update statistics logic to be consi *
;                                       stant with glb_rpt_monthly_ljc      *
;    *024 09/22/10 Balaji Murali        Fix for CR 1-4155762361             *
;	 *025 04/04/2013 Kiran shimpi		Fix for CR 1-4293401303		    	*
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************


drop program GLB_RPT_LEVY_JENNINGS:dba go
create program GLB_RPT_LEVY_JENNINGS:dba

;execute cclseclogin

; Free record structures
free set I18N_Captions
free set reply
free set data_map
free set control
free set lot
free set comment
free set holdstat
free set cumrec
free set cumlot
free set formatted
free set ops_params
free set DtTm

; I18N INCLUDE FILE
%i cclsource:i18n_uar.inc

; INITIALIZE VARIABLE THAT KEEPS HANDLE TO I18N DATA
set i18nHandle = 0

; CALL uar_i18nlocalizationinit
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)

record I18N_Captions (
        1 RULES_FAILED = vc
        1 TOTAL_OF_ACT = vc
        1 PERC_OF_TOTAL = vc
        1 CHANGED = vc
        1 ACCEPTED = vc
        1 REJECTED = vc
        1 VERIFIED = vc
        1 DATE_FROM_ = vc
        1 MANF_STATISTICS = vc
        1 CURRENT_EXPECTED = vc
        1 REPORT_STATISTICS = vc
        1 TO_ = vc
        1 GRP_ = vc
        1 GROUP = vc
        1 CNTRL_DESC___ = vc
        1 Mean = vc
        1 NA = vc
        1 1s = vc
        1 2s = vc
        1 3s = vc
        1 LOT_NUMBER = vc
        1 X_CNTRL = vc
        1 LAST_USE = vc
        1 Yes = vc
        1 Normal = vc
        1 Abnormal = vc
        1 Reviewed = vc
        1 RESULT_ = vc
        1 VERF_TECH = vc
        1 PERF_TECH_ = vc
        1 NOTE_ = vc
        1 ACTION = vc
        1 CONTROL_DESCRIPTION_ = vc
        1 CONTROL_DESC = vc
        1 MEAN = vc
        1 SD = vc
        1 LOW = vc
        1 HIGH = vc
        1 COUNT = vc
        1 CV = vc
        1 NORMAL = vc
        1 ABNORMAL = vc
        1 REVIEWED = vc
        1 CALCULATED = vc
        1 TOTAL = vc
        1 GRP = vc
        1 SPECIES = vc
        1 GENDER = vc
        1 AGE_FROM = vc
        1 AGE_TO = vc
        1 TRIM_LOW = vc
        1 TRIM_HIGH = vc
        1 All_Genders = vc
        1 All_species = vc
        1 rpt_no = vc
        1 qc_ljc = vc
        1 tm = vc
        1 as_of_dt = vc
        1 prep = vc
        1 pg_no = vc
        1 tst_ste = vc
        1 proc = vc
        1 ctrl_nm = vc
        1 pat_dat = vc
        1 ctrl_rul = vc
        1 alpha = vc
        1 neg3s = vc
        1 neg2s = vc
        1 neg1s = vc
        1 perf = vc
        1 summ_stat = vc
        1 f_val = vc
        1 z_stat = vc
        1 lot_to_dt = vc
        1 expect = vc
        1 foot_nt = vc
        1 rslt_com = vc
        1 rev_com = vc
        1 trbl = vc
        1 z_score = vc
        1 instrument = vc
        1 Time_period = vc
        1 Number_Results = vc
)

set I18N_Captions->TOTAL_OF_ACT = uar_i18ngetmessage(i18nHandle,"TOTALOACT","TOTAL OF ACTIONS FOUND WITHIN THE DATE RANGE:")
set I18N_Captions->Time_period = uar_i18ngetmessage(i18nHandle,"Time_period","TIME PERIOD")
set I18N_Captions->Number_Results = uar_i18ngetmessage(i18nHandle,"Number_Results","NUMBER RESULTS")
set I18N_Captions->RULES_FAILED = uar_i18ngetmessage(i18nHandle,"RULES_FAILED","RULES FAILED:")
set I18N_Captions->VERIFIED = uar_i18ngetmessage(i18nHandle,"VERIFIED","VERIFIED")
set I18N_Captions->REJECTED = uar_i18ngetmessage(i18nHandle,"REJECTED","REJECTED")
set I18N_Captions->ACCEPTED = uar_i18ngetmessage(i18nHandle,"ACCEPTED","ACCEPTED")
set I18N_Captions->CHANGED = uar_i18ngetmessage(i18nHandle,"CHANGED","CHANGED")
set I18N_Captions->PERC_OF_TOTAL = uar_i18ngetmessage(i18nHandle,"PERC_OF_TOTAL","% OF TOTAL")
set I18N_Captions->NA = uar_i18ngetmessage(i18nHandle,"NA","N/A")
set I18N_Captions->z_score = uar_i18ngetmessage(i18nHandle,"z_scr","Z-SCORE ")
set I18N_Captions->DATE_FROM_ = uar_i18ngetmessage(i18nHandle,"key_5","DATE FROM ")
set I18N_Captions->CALCULATED = uar_i18ngetmessage(i18nHandle,"CALCULATED","CALCULATED:")
set I18N_Captions->MANF_STATISTICS = uar_i18ngetmessage(i18nHandle,"MANFSTAT","MANF STATISTICS:")
set I18N_Captions->CURRENT_EXPECTED = uar_i18ngetmessage(i18nHandle,"CURREXP","CURRENT EXPECTED:")
set I18N_Captions->REPORT_STATISTICS = uar_i18ngetmessage(i18nHandle,"rptstat","REPORT STATISTICS")
set I18N_Captions->TO_ = uar_i18ngetmessage(i18nHandle,"key_6","TO ")
set I18N_Captions->GRP_ = uar_i18ngetmessage(i18nHandle,"key_7","GRP ")
set I18N_Captions->GROUP = uar_i18ngetmessage(i18nHandle,"key_7","GROUP")
set I18N_Captions->CNTRL_DESC___ = uar_i18ngetmessage(i18nHandle,"key_8","CNTRL DESC   ")
set I18N_Captions->Mean = uar_i18ngetmessage(i18nHandle,"key_9","Mean")
set I18N_Captions->1s = uar_i18ngetmessage(i18nHandle,"key_10","1s")
set I18N_Captions->2s = uar_i18ngetmessage(i18nHandle,"key_11","2s")
set I18N_Captions->3s = uar_i18ngetmessage(i18nHandle,"key_12","3s")
set I18N_Captions->LOT_NUMBER = uar_i18ngetmessage(i18nHandle,"key_13","LOT NUMBER")
set I18N_Captions->X_CNTRL = uar_i18ngetmessage(i18nHandle,"key_14","X CNTRL")
set I18N_Captions->LAST_USE = uar_i18ngetmessage(i18nHandle,"key_15","LAST USE")
set I18N_Captions->Yes = uar_i18ngetmessage(i18nHandle,"key_16","Yes")
set I18N_Captions->Normal = uar_i18ngetmessage(i18nHandle,"key_22","Normal")
set I18N_Captions->Abnormal = uar_i18ngetmessage(i18nHandle,"key_23","Abnormal")
set I18N_Captions->Reviewed = uar_i18ngetmessage(i18nHandle,"key_24","Reviewed")
set I18N_Captions->RESULT_ = uar_i18ngetmessage(i18nHandle,"key_25","RESULT ")
set I18N_Captions->VERF_TECH = uar_i18ngetmessage(i18nHandle,"key_26","VERF TECH")
set I18N_Captions->PERF_TECH_ = uar_i18ngetmessage(i18nHandle,"key_27","PERF TECH ")
set I18N_Captions->NOTE_ = uar_i18ngetmessage(i18nHandle,"key_28","NOTE ")
set I18N_Captions->ACTION = uar_i18ngetmessage(i18nHandle,"key_29","ACTION")
set I18N_Captions->CONTROL_DESCRIPTION_ = uar_i18ngetmessage(i18nHandle,"key_38","CONTROL DESCRIPTION ")
set I18N_Captions->CONTROL_DESC = uar_i18ngetmessage(i18nHandle,"cntrldesc","CONTROL DESC ")
set I18N_Captions->MEAN = uar_i18ngetmessage(i18nHandle,"key_40","MEAN")
set I18N_Captions->SD = uar_i18ngetmessage(i18nHandle,"key_41","SD")
set I18N_Captions->LOW = uar_i18ngetmessage(i18nHandle,"key_42","LOW")
set I18N_Captions->HIGH = uar_i18ngetmessage(i18nHandle,"key_43","HIGH")
set I18N_Captions->COUNT = uar_i18ngetmessage(i18nHandle,"key_44","COUNT")
set I18N_Captions->CV = uar_i18ngetmessage(i18nHandle,"key_45","CV")
set I18N_Captions->NORMAL = uar_i18ngetmessage(i18nHandle,"key_48","NORMAL")
set I18N_Captions->ABNORMAL = uar_i18ngetmessage(i18nHandle,"key_49","ABNORMAL")
set I18N_Captions->REVIEWED = uar_i18ngetmessage(i18nHandle,"key_50","REVIEWED")
set I18N_Captions->TOTAL = uar_i18ngetmessage(i18nHandle,"key_51","TOTAL")
set I18N_Captions->GRP = uar_i18ngetmessage(i18nHandle,"key_55","GRP")
set I18N_Captions->SPECIES = uar_i18ngetmessage(i18nHandle,"key_56","SPECIES")
set I18N_Captions->GENDER = uar_i18ngetmessage(i18nHandle,"key_57","GENDER")
set I18N_Captions->AGE_FROM = uar_i18ngetmessage(i18nHandle,"key_58","AGE FROM")
set I18N_Captions->AGE_TO = uar_i18ngetmessage(i18nHandle,"key_59","AGE TO")
set I18N_Captions->TRIM_LOW = uar_i18ngetmessage(i18nHandle,"key_60","TRIM LOW")
set I18N_Captions->TRIM_HIGH = uar_i18ngetmessage(i18nHandle,"key_61","TRIM HIGH")
;017 set I18N_Captions->All_Genders = uar_i18ngetmessage(i18nHandle,"key_66","All Genders")
set I18N_Captions->All_Genders = uar_i18ngetmessage(i18nHandle,"key_66","All")
set I18N_Captions->All_Species = uar_i18ngetmessage(i18nHandle,"AllSpecies","All")
Set I18N_Captions->rpt_no = uar_i18ngetmessage(i18nHandle,"rpt_no","REPORT NO:  ")
Set I18N_Captions->qc_ljc = uar_i18ngetmessage(i18nHandle,"qc_ljc","QC-LJC")
Set I18N_Captions->tm = uar_i18ngetmessage(i18nHandle,"tm","TIME: ")
Set I18N_Captions->as_of_dt = uar_i18ngetmessage(i18nHandle,"as_of_dt","AS OF DATE: ")
Set I18N_Captions->prep = uar_i18ngetmessage(i18nHandle,"prep","PREPARED: ")
Set I18N_Captions->pg_no = uar_i18ngetmessage(i18nHandle,"pg_no","PAGE NO:  ")
Set I18N_Captions->tst_ste = uar_i18ngetmessage(i18nHandle,"tst_ste","TEST SITE:     ")
Set I18N_Captions->proc = uar_i18ngetmessage(i18nHandle,"proc","PROCEDURE:     ")
Set I18N_Captions->ctrl_nm = uar_i18ngetmessage(i18nHandle,"ctrl_nm", "CONTROL NAME:  ")
Set I18N_Captions->pat_dat = uar_i18ngetmessage(i18nHandle,"pat_dat","Patient Data")
Set I18N_Captions->ctrl_rul = uar_i18ngetmessage(i18nHandle,"ctrl_rul","CONTROL RULE:  ")
Set I18N_Captions->alpha = uar_i18ngetmessage(i18nHandle,"alpha","ALPHA")
Set I18N_Captions->neg3s = uar_i18ngetmessage(i18nHandle,"neg3s","-3s")
Set I18N_Captions->neg2s = uar_i18ngetmessage(i18nHandle,"neg2s","-2s")
Set I18N_Captions->neg1s = uar_i18ngetmessage(i18nHandle,"neg1s","-1s")
Set I18N_Captions->perf = uar_i18ngetmessage(i18nHandle,"perf","PERF DATE/TIME  ")
Set I18N_Captions->summ_stat = uar_i18ngetmessage(i18nHandle,"summ_stat","SUMMARY STATISTICS: ")
Set I18N_Captions->f_val = uar_i18ngetmessage(i18nHandle,"f_val","F-VAL")
Set I18N_Captions->z_stat = uar_i18ngetmessage(i18nHandle,"z_stat","Z-STAT")
Set I18N_Captions->lot_to_dt = uar_i18ngetmessage(i18nHandle,"lot_to_dt","LOT TO REPORT END:")
Set I18N_Captions->expect = uar_i18ngetmessage(i18nHandle,"expect","EXPECTED:")
Set I18N_Captions->foot_nt = uar_i18ngetmessage(i18nHandle,"foot_nt","FOOTNOTES:")
Set I18N_Captions->rslt_com = uar_i18ngetmessage(i18nHandle,"rslt_com","RESULT COMMENT: ")
Set I18N_Captions->rev_com = uar_i18ngetmessage(i18nHandle,"rev_com","REVIEW COMMENTS: ")
Set I18N_Captions->trbl = uar_i18ngetmessage(i18nHandle,"trbl","TROUBLESHOOTING STEP(S): ")
Set I18N_Captions->instrument = uar_i18ngetmessage(i18nHandle,"instrument","INSTRUMENT")

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 task_assay_cd                = f8
         1 control_id                   = f8
         1 control_short_desc           = c20
         1 service_resource_cd          = f8
         1 begin_date                   = dq8
         1 end_date                     = dq8
         1 manf_ind                     = i2
         1 exp_ind                      = i2
         1 x_cntrl_ind                  = i2
         1 printer_name                 = vc
         1 qc_result_type_flag          = i2
         1 batch_selection              = vc
         1 output_dist                  = vc
         1 ops_date                     = dq8
         1 verify_ind                   = i2
         1 controls[*]
           2 control_id                 = f8
         1 test_sites[*]
           2 service_resource_cd        = f8
         1 assays[*]
           2 task_assay_cd              = f8
         1 lot_type_flag                = i2
         1 lot_per_graph_ind            = i2
         1 control_per_graph_ind        = i2
         1 lot_to_date_ind              = i2
         1 use_actual_exp_val_ind       = i2
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
/*       1 results[*]
           2 qc_result_id               = f8
           2 service_resource_cd        = f8
           2 service_resource_disp      = vc
           2 lot_id                     = f8
           2 lot_number                 = c20
           2 accession_id               = f8
           2 accession                  = vc
           2 task_assay_cd              = f8
           2 mnemonic                   = vc
           2 result_type_cd             = f8
           2 result_type_disp           = vc
           2 result_value_numeric       = f8
           2 result_value_alpha         = c25
           2 perform_dt_tm              = dq8
           2 result_tech                = c100
           2 result_status_cd           = f8
           2 result_status_disp         = vc
           2 comment_type_cd            = f8
           2 action_sequence            = i4
           2 comment_text               = vc
           2 perform_prsnl_id           = f8
           2 comment_prsnl_name         = vc
           2 comment_dt_tm              = dq8
           2 review_tech                = vc
           2 tsteps[*]
             3 step                     = vc
*/
         1 status_data
           2 status                     = c1
           2 subeventstatus[1]
             3 OperationName            = c15
             3 OperationStatus          = c1
             3 TargetObjectName         = c15
             3 TargetObjectValue        = vc
         1 file_name                    = vc             
      )

/***********************************************************************
* Internal Records                                                     *
***********************************************************************/
     record data_map
      (
         1 dms[*]
           2  task_assay_cd             = f8
           2  max_digits                = i2
           2  min_digits                = i2
           2  min_decimal_places        = i2
           2  service_resource_cd       = f8
       )

     record control
      (
         1  cntrls[*]
            2  control_id               = f8
      )

      record lot
      (
         1 lots[*]
           2 lot_sequence               = i4
           2 lot_id                     = f8
           2 task_assay_cd              = f8
           2 lot_number                 = c30
           2 lot_expiration             = dq8
           2 control_id                 = f8
           2 control_name               = c20
           2 lot_used                   = i2
           2 pdm_range_id               = f8
           2 sex_cd                     = f8
           2 sex_disp                   = vc
           2 species_cd                 = f8
           2 species_disp               = vc
           2 age_from_display           = vc
           2 age_to_display             = vc
           2 lot_used_ind               = i2
           2 time_period_display        = vc
           2 result_eval_flag           = i2
           2 nbr_results                = i4
       )
       
      record comment
      (
         1 comments[*]
           2 qc_result_id                 = f8
           2 comment_sequence             = i4
           2 nbr_comments                 = i4
           2 list[*]
             3 comment_text               = vc
             3 task_assay_cd              = f8
             3 comment_cd                 = f8
             3 comment_prsnl_name         = vc
             3 comment_dt_tm              = dq8
             3 step                       = vc
             3 trouble_ind                = i2
             3 rule_ind                   = i4
             3 rule_description           = vc
       )

      record holdstat
      (
         1 stats[*]
           2 stat_cnt                     = f8
           2 beg_effective_dt_tm          = dq8
           2 end_effective_dt_tm          = dq8
           2 active_ind                   = i2
           2 mean                         = f8
           2 sd                           = f8
           2 lot_id                       = f8
           2 pdm_range_id                 = f8
           2 control_id                   = f8
           2 service_resource_cd          = f8
           2 task_assay_cd                = f8
           2 arl_id                       = f8
           2 abs_low                      = f8
           2 abs_high                     = f8
           2 manf_mean                    = f8
           2 manf_std_dev                 = f8
           2 manf_low                     = f8
           2 manf_high                    = f8
           2 stat_used_ind                = i2
       )

      record cumrec
      (
         1 cums[*]
           2 stat_cnt                     = i4
           2 task_assay_cd                = f8
           2 lot_sequence                 = i4
           2 lot_id                       = f8
           2 lot_number                   = c30
           2 cum_mean                     = f8
           2 cum_sum_sqr                  = f8
           2 cum_count                    = f8
           2 normal_cnt                   = i4
           2 abnormal_cnt                 = i4
           2 review_cnt                   = i4
           2 pdm_range_id                 = f8
           2 sex_cd                       = f8
           2 sex_disp                     = vc
           2 species_cd                   = f8
           2 species_disp                 = vc
           2 age_from_display             = vc
           2 age_to_display               = vc
           2 service_resource_cd          = f8
       )

      record cumlot
      (
         1 cumlots[*]
           2 lot_id                       = f8
           2 task_assay_cd                = f8
           2 service_resource_cd          = f8
           2 control_id                   = f8
           2 ltd_cum_mean                 = f8
           2 ltd_cum_sum_sqr              = f8
           2 ltd_cum_count                = f8
           2 ltd_normal_cnt               = i4
           2 ltd_abnormal_cnt             = i4
           2 ltd_review_cnt               = i4
           2 pdm_range_id                 = f8
           2 lot_number                   = c30
           2 verify_cnt                   = f8
           2 accept_cnt                   = f8
           2 change_cnt                   = f8
           2 discard_cnt                  = f8
           2 reject_cnt                   = f8
           2 total_cnt                    = f8
       )

      record ops_params
      (                
         1  qual[8]    
            2  param                      = c100
      )

     ;* Data used to format a numeric result
      record formatted
      (
        01  template                      = c33
        01  negative_ind                  = i2
        01  result_value                  = c36
      )


     ;record used to hold the lot recieve date/time
      record DtTm
      (
         1  hold_lot_dt_tm                = dq8
      )

#Script
set arg_min_digits = 0
set arg_max_digits = 0
set arg_min_dec_places = 0
set arg_stat_dec_places = 0
set arg_less_great_flag = 0
set arg_raw_value = 0.0
set arg_hold_dec_places = 0

set RESULT_STATUS_CODESET       = 1901
set RESULT_STATUS_ACCEPT_CDF    = "ACCEPT"
set RESULT_STATUS_VERIFIED_CDF  = "VERIFIED"
set RESULT_STATUS_AUTO_VERF_CDF  = "AUTOVERIFIED"
set RESULT_STATUS_REVIEWED_CDF = "REVIEWED"
set RESULT_STATUS_CORRECTED_CDF = "CORRECTED"
set RESULT_STATUS_CHANGED_CDF = "CHANGE"
set RESULT_STATUS_REJECTED_CDF = "REJECT"
set SERVICE_RESOURCE_TYPE_CODESET = 223
set SERV_RES_SUBSECTION_CDF = "SUBSECTION"
declare serv_res_subsection_cd = f8       
declare ALPHA_CD = f8
declare freetext_result_type_cd = f8 with protect, noconstant(0.0)
declare NUMERIC_CD = f8
declare WITHIN_RANGE_CD = f8
declare ALP_NORMAL_CD = f8
declare ALP_ABNORMAL_CD = f8
declare ALP_REVIEW_CD = f8
declare result_status_accept_cd = f8
declare result_status_reviewed_cd  = f8
declare result_status_verified_cd  = f8
declare result_status_auto_verf_cd  = f8
declare result_status_corrected_cd = f8
declare result_status_changed_cd = f8
declare result_status_rejected_cd = f8
declare nbrdays = i2                  
declare value = f8
declare lotnumber = c15
declare mean = f8
declare std_dev = f8
declare variance1 = f8
declare variance2 = f8
declare fullname = c11
declare commentnumber = i4
declare namestring = vc
declare cum_mean = f8
declare cum_std_dev = f8
declare uar_fmt_result (min, max, dec, flag, result) = c50 with protect, noconstant("")
declare results_found = i2
declare eval_bdate = f8
declare eval_edate = f8
set step_seq = 0
set cum_mean = 0.0
set cum_std_dev = 0.0
set hold_lot_seq = 0
set cumlot_cnt = 0
set disp_results = 0
set x = 0
set x2 = 0
set control_name = "                     "
set failed = "F"
set reply->status_data->status = "F"
set negpt30    = "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
set negpt29    = "<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
set negpt28    = "<<<<<<<<<<<<<<<<<<<<<<<<<<<"
set negpt27    = "<<<<<<<<<<<<<<<<<<<<<<<<<<"
set negpt26    = "<<<<<<<<<<<<<<<<<<<<<<<<<"
set negpt25    = "<<<<<<<<<<<<<<<<<<<<<<<<"
set negpt24    = "<<<<<<<<<<<<<<<<<<<<<<<"
set negpt23    = "<<<<<<<<<<<<<<<<<<<<<<"
set negpt22    = "<<<<<<<<<<<<<<<<<<<<<"
set negpt21    = "<<<<<<<<<<<<<<<<<<<<"
set negpt20    = "<<<<<<<<<<<<<<<<<<<"
set negpt19    = "<<<<<<<<<<<<<<<<<<"
set negpt18    = "<<<<<<<<<<<<<<<<<"
set negpt17    = "<<<<<<<<<<<<<<<<"
set negpt16    = "<<<<<<<<<<<<<<<"
set negpt15    = "<<<<<<<<<<<<<<"
set negpt14    = "<<<<<<<<<<<<<"
set negpt13    = "<<<<<<<<<<<<"
set negpt12    = "<<<<<<<<<<<"
set negpt11    = "<<<<<<<<<<"
set negpt10    = "<<<<<<<<<"
set negpt9     = "<<<<<<<<"
set negpt8     = "<<<<<<<"
set negpt7     = "<<<<<<"
set negpt6     = "<<<<<"
set negpt5     = "<<<<"
set negpt4     = "<<<"
set negpt3     = "<<"
set negpt2     = "<"
set negro      = uar_i18ngetmessage(i18nHandle,"rslt_out","<<<<<<<<RESULT OUT<<<<<<<<<<<<")
set pospt2     = ">"
set pospt3     = ">>"
set pospt4     = ">>>"
set pospt5     = ">>>>"
set pospt6     = ">>>>>"
set pospt7     = ">>>>>>"
set pospt8     = ">>>>>>>"
set pospt9     = ">>>>>>>>"
set pospt10    = ">>>>>>>>>"
set pospt11    = ">>>>>>>>>>"
set pospt12    = ">>>>>>>>>>>"
set pospt13    = ">>>>>>>>>>>>"
set pospt14    = ">>>>>>>>>>>>>"
set pospt15    = ">>>>>>>>>>>>>>"
set pospt16    = ">>>>>>>>>>>>>>>"
set pospt17    = ">>>>>>>>>>>>>>>>"
set pospt18    = ">>>>>>>>>>>>>>>>>"
set pospt19    = ">>>>>>>>>>>>>>>>>>"
set pospt20    = ">>>>>>>>>>>>>>>>>>>"
set pospt21    = ">>>>>>>>>>>>>>>>>>>>"
set pospt22    = ">>>>>>>>>>>>>>>>>>>>>"
set pospt23    = ">>>>>>>>>>>>>>>>>>>>>>"
set pospt24    = ">>>>>>>>>>>>>>>>>>>>>>>"
set pospt25    = ">>>>>>>>>>>>>>>>>>>>>>>>"
set pospt26    = ">>>>>>>>>>>>>>>>>>>>>>>>>"
set pospt27    = ">>>>>>>>>>>>>>>>>>>>>>>>>>"
set pospt28    = ">>>>>>>>>>>>>>>>>>>>>>>>>>>"
set pospt29    = ">>>>>>>>>>>>>>>>>>>>>>>>>>>>"
set pospt30    = ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
set posro      = ">>>>>>>>RESULT OUT>>>>>>>>>>>>"
set svalue     = "                               "
set cum_cnt = 0
set lot_cnt = 0
set comment_cnt = 0
set comment_assay_cnt = 0
set range_cnt = 0
set l_cnt = 0
set s_cnt = 0
set dm_cnt = 0
set mean = 0.00
set count = 0
set std_dev = 0.00
set variance1 = 0.00
set variance2 = 0.00
set value = 0.00
set fullname = "           "
set resultstatus = "             "
set footnote_found = 0
set trouble_found = 0
set review_note_fount = 0
set rslt = fillstring(50, " ")
set ClearRow = fillstring(130, " ")
set DtTm->hold_lot_dt_tm = request->begin_date
declare units_cd = f8                         
set units_cd = 0.0                            
declare units_disp = c20                      
set units_disp = "                   "        
declare units_cdf = c12                       
set units_cdf = "            "                
set age_from = 0                              
set age_to = 0                                
set footnote_exists = 0
declare FOOTNOTE_CD = f8
declare REVIEW_NOTE_CD = f8
declare TSTEP_CD = f8
declare temptaskassay = f8      
set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty
     
declare prev_task_assay_cd                   = f8 with protect, noconstant(0.0)
declare prev_control_id                      = f8 with protect, noconstant(0.0)
declare prev_foot_task_assay_cd              = f8 with protect, noconstant(0.0)
declare dStatMean                            = f8 with protect, noconstant(0.0)
declare dStatStdDev                          = f8 with protect, noconstant(0.0)
declare nStatCnt                             = i2 with protect, noconstant(0)
declare lControlslist                        = i4 with protect, constant(size(request->controls,5))
declare lTestSiteslist                       = i4 with protect, constant(size(request->test_sites,5))
declare lProcedureslist                      = i4 with protect, constant(size(request->assays,5))
declare sControl_Parser                      = vc with protect, noconstant("")
declare sTestsite_Parser                     = vc with protect, noconstant("")
declare sProcedure_Parser                    = vc with protect, noconstant("")
declare nControlCnt                          = i2 with protect, noconstant(0)
declare nTestsiteCnt                         = i4 with protect, noconstant(0)
declare nProcedureCnt                        = i4 with protect, noconstant(0)
declare sProcedures                          = vc with protect, noconstant("")
declare sTestsites                           = vc with protect, noconstant("")
declare GetTestsiteParser(sTable)            = vc
declare GetProcedureParser(sTable)           = vc
declare nFound                               = i2 with protect, noconstant(0)
declare ncnt                                 = i4 with protect, noconstant(0)


/************************************************************************
*build parsers (2)                                                      *
************************************************************************/

subroutine GetTestsiteParser(sTable)
  if( validate(ljc_req->begin_date) = 0)/*determine if ljc_req exists to build parser*/
    if (lTestSiteslist > 0)
      if (sTable =  "rlr")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,rlr.service_resource_cd,",
            "request->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "p")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "p.service_resource_cd,request->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "q")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "q.service_resource_cd,request->test_sites[nTestsiteCnt].service_resource_cd)")
      endif
    elseif (request->service_resource_cd > 0)
      if (sTable =  "rlr") 	
  	    set sTestsite_Parser = "rlr.service_resource_cd = request->service_resource_cd"
	    elseif(sTable = "p")
	      set sTestsite_Parser = "p.service_resource_cd = request->service_resource_cd"
      elseif(sTable = "q")
        set sTestsite_Parser = "q.service_resource_cd = request->service_resource_cd"  
      endif
    else
	 	  set sTestsite_Parser = "1 = 1"
	  endif
    return(sTestsite_Parser) 
  else /* else for use of ljc_req if its available to build parser*/
    if (lTestSiteslist > 0)
      if (sTable =  "rlr")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,rlr.service_resource_cd,",
            "ljc_req->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "p")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "p.service_resource_cd,ljc_req->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "q")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "q.service_resource_cd,ljc_req->test_sites[nTestsiteCnt].service_resource_cd)")
      endif
    else
	 	  set sTestsite_Parser = "1 = 1"
	  endif
    return(sTestsite_Parser)
  endif 
end

subroutine GetProcedureParser(sTable)
  if( validate(ljc_req->begin_date) = 0)/*determine if ljc_req exists to build parser*/
    if (lProcedureslist > 0)
	    if (sTable = "p")
		    set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
		        "p.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
		  elseif (sTable = "q")
		    set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
		        "q.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
		  elseif (sTable = "arl")
		    set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
		        "arl.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
		  endif
		elseif (request->task_assay_cd > 0)
 		  if (sTable = "p")
 		 	  set sProcedure_Parser = "p.task_assay_cd = request->task_assay_cd"
	    elseif(sTable = "q")
	      set sProcedure_Parser = "q.task_assay_cd = request->task_assay_cd"
	    elseif(sTable = "arl")
	      set sProcedure_Parser = "arl.task_assay_cd = request->task_assay_cd"
      endif
	  else
		  set sProcedure_Parser = "1 = 1"
	  endif  
    return(sProcedure_Parser)
  else/* else for use of ljc_req if its available to build parser*/
    if (lProcedureslist > 0)
	    if (sTable = "p")
		    set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
		        "p.task_assay_cd, ljc_req->assays[nProcedureCnt].task_assay_cd)")
		  elseif (sTable = "q")
		    set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
		        "q.task_assay_cd, ljc_req->assays[nProcedureCnt].task_assay_cd)")
		  elseif (sTable = "arl")
		    set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
		        "arl.task_assay_cd, ljc_req->assays[nProcedureCnt].task_assay_cd)")
		  endif
	  else
		  set sProcedure_Parser = "1 = 1"
	  endif  
    return(sProcedure_Parser)
  endif
end

 /***********************************************************************
 * Load code values                                                     *
 ***********************************************************************/

SELECT
into "nl:"
  c.code_value
FROM
  code_value c
WHERE
  (c.code_set = 14) or (c.code_set = 289) or (c.code_set = 1902) and
   c.cdf_meaning in ("QC FTNT", "QC RVNT", "QC TSTEP", "2","3",
   "WITHIN_RANGE", "ALP_NORMAL", "ALP_ABNORMAL", "ALP_REVIEW")
detail
  case ( c.cdf_meaning )
    of "QC FTNT":
       FOOTNOTE_CD = c.code_value
    of "QC RVNT":
       REVIEW_NOTE_CD = c.code_value
    of "QC TSTEP":
       TSTEP_CD = c.code_value
    of "2":
       ALPHA_CD = c.code_value
    of "7":
       freetext_result_type_cd = c.code_value
    of "3":
       NUMERIC_CD = c.code_value
    of "WITHIN_RANGE":
       WITHIN_RANGE_CD = c.code_value
    of "ALP_NORMAL":
       ALP_NORMAL_CD = c.code_value
    of "ALP_ABNORMAL":
       ALP_ABNORMAL_CD = c.code_value
    of "ALP_REVIEW":
       ALP_REVIEW_CD = c.code_value
  endcase
WITH
  format,
  nocounter

set error_check = ERROR(sErrorMsg,0)   ;get error message
  if (error_check != 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
    go to exit_script
  endif
         
 /***********************************************************************
 * Load result status code set                                          *
 ***********************************************************************/
select into "nl:"
  cv.code_set,
  cv.code_value

from code_value cv

where cv.code_set = RESULT_STATUS_CODESET
      and cv.cdf_meaning in ( RESULT_STATUS_ACCEPT_CDF,
      RESULT_STATUS_REVIEWED_CDF, RESULT_STATUS_VERIFIED_CDF,
      RESULT_STATUS_AUTO_VERF_CDF, RESULT_STATUS_CHANGED_CDF,
      RESULT_STATUS_CORRECTED_CDF, RESULT_STATUS_REJECTED_CDF)

detail
  case ( cv.cdf_meaning )
    of RESULT_STATUS_ACCEPT_CDF:
       result_status_accept_cd = cv.code_value
    of RESULT_STATUS_REVIEWED_CDF:
       result_status_reviewed_cd = cv.code_value
    of RESULT_STATUS_VERIFIED_CDF:
       result_status_verified_cd = cv.code_value
    of RESULT_STATUS_AUTO_VERF_CDF:
       result_status_auto_verf_cd = cv.code_value 
    of RESULT_STATUS_CORRECTED_CDF:
       result_status_corrected_cd = cv.code_value
    of RESULT_STATUS_CHANGED_CDF:
       result_status_changed_cd = cv.code_value
    of RESULT_STATUS_REJECTED_CDF:
       result_status_rejected_cd = cv.code_value
  endcase

with nocounter

set error_check = ERROR(sErrorMsg,0)   ;get error message
  if (error_check != 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
    go to exit_script
  endif

 /***********************************************************************
 * Load operations parameter list                                       *
 ***********************************************************************/
if (trim(request->batch_selection) > " ")
  set batch_selection_cd = cnvtreal(trim(request->batch_selection))
  set parm_string = fillstring(100, " ")

  select into "nl:"
    cv.code_value
  from           
    code_value cv
  where cv.code_set = 1950 and cv.active_ind = 1
        and cv.cdf_meaning IN ("LJC", "PLJC") and
        trim(cv.display_key) = trim(cnvtupper(cnvtalphanum(request->batch_selection)))
  detail
    cdf_string = trim(cv.cdf_meaning)
    parm_string = trim(cv.definition)
  with
    nocounter

  if (curqual = 0)
    select into "nl:"
      cv.code_value
    from
      code_value cv
    where cv.code_set = 1950 and cv.active_ind = 1
          and cv.cdf_meaning in ("LJC", "PLJC")
          and cv.code_value = batch_selection_cd
    detail
      cdf_string = trim(cv.cdf_meaning)
      parm_string = trim(cv.definition)
    with
      nocounter
    
    if (curqual = 0)
      set reply->status_data->status = "Z"
      go to exit_script
    endif
  endif
  /**************************************************
  * Locate the individual parameters in parm_string *
  * and put them in the ops_params array.           *
  **************************************************/
  set ptr = 1      
  set start_ptr = 1
  set param_idx = 1
  for (param_idx = 1 TO 8)
    set ptr = findstring(",", parm_string, start_ptr)
    if (ptr < 1)
      set ptr = 100
    endif
    set parm_len = ptr - start_ptr
    set ops_params->qual[param_idx].param = trim(substring(start_ptr, value(parm_len), parm_string), 3)
    set start_ptr = ptr + 1 
  endfor

  ;* Use array of ops parameters to set request fields.
  set request->control_id = cnvtreal(ops_params->qual[1].param)
  set request->service_resource_cd = cnvtreal(ops_params->qual[2].param) 
  set request->task_assay_cd = cnvtreal(ops_params->qual[3].param)
  set nbrdays = cnvtreal(ops_params->qual[4].param)      
  set nbrdays = nbrdays * -1                             
  set request->end_date = cnvtdatetime(request->ops_date)
  set request->begin_date = cnvtdatetime(request->ops_date)
  set request->begin_date = datetimeadd(request->begin_date, nbrdays)
  set request->x_cntrl_ind = cnvtint(ops_params->qual[5].param)
  set request->exp_ind = cnvtint(ops_params->qual[6].param) 
  set request->manf_ind = cnvtint(ops_params->qual[7].param)
  set request->qc_result_type_flag = cnvtint(ops_params->qual[8].param)
  set request->printer_name = request->output_dist
  set DtTm->hold_lot_dt_tm = request->begin_date
endif                                                          

if (request->qc_result_type_flag = NULL)              
  set request->qc_result_type_flag = 0                
endif                                                 

/***********************************************************************
* Load service resource type code values                               *
***********************************************************************/
select into "nl:"
  cv.code_set,   
  cv.code_value  
              
from code_value cv
                                                 
where cv.code_set = SERVICE_RESOURCE_TYPE_CODESET
      and cv.cdf_meaning = SERV_RES_SUBSECTION_CDF
                                                  
detail                                   
  case ( cv.cdf_meaning )               
    of SERV_RES_SUBSECTION_CDF:
       ;results
       serv_res_subsection_cd = cv.code_value
  endcase
                                                         
with nocounter
                                                         
set error_check = ERROR(sErrorMsg,0)   ;get error message
if (error_check != 0)
  set reply->status_data->status = "F"                                    
  set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
  go to exit_script                                                
endif                                                              

/***********************************************************************
* Load control's to search across for results.                         *
***********************************************************************/
if(lControlslist > 0)
  set cntrl_cnt = lControlslist
  set stat = alterlist(control->cntrls, cntrl_cnt)
    for (cnt = 1 to lControlslist) 
      set control->cntrls[cnt].control_id = request->controls[cnt].control_id
    endfor
else
  set cntrl_cnt = 1
  set stat = alterlist(control->cntrls, cntrl_cnt)
  set control->cntrls[cntrl_cnt].control_id = request->control_id
endif

if (request->x_cntrl_ind = 1 and request->qc_result_type_flag = 0)

  select into "nl:"
    cxc.control_id,
    cxc.control_x_id
  from
    (dummyt d with seq = value(cntrl_cnt)),
    control_x_check cxc
  
  plan d
  join cxc where cxc.control_id = control->cntrls[d.seq].control_id
  
  detail
    cntrl_cnt = cntrl_cnt + 1,
    stat = alterlist(control->cntrls, cntrl_cnt),
    control->cntrls[cntrl_cnt].control_id = cxc.control_x_id
  with nocounter

  set error_check = ERROR(sErrorMsg,0)   ;get error message
    if (error_check != 0)
      set reply->status_data->status = "F"
      set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
      go to exit_script
    endif

endif

/********************************************************************/
/* SELECT LOT NUMBERS                                               */
/********************************************************************/
if (request->qc_result_type_flag = 0)
  SELECT into "nl:"
     d.seq,
     c.lot_id,
     c.lot_number,
     cm.control_id,
     rlr.lot_id,
     arl.lot_id,
     assay_arl = concat(trim(cnvtstring(arl.task_assay_cd,32,0)), trim(cnvtstring(arl.arl_id,32,0))),
     lot_assay = concat(trim(cnvtstring(arl.task_assay_cd,32,0)), trim(cnvtstring(c.control_id,32,0)), cnvtstring(c.lot_id,32,0))
  FROM
    (dummyt d with seq = value(cntrl_cnt)),
     control_lot c,
     control_material cm,
     resource_lot_r rlr,
     assay_resource_lot arl
   
  PLAN d
  JOIN c
    where c.control_id = control->cntrls[d.seq].control_id and
        ((c.receive_dt_tm between cnvtdatetime(request->begin_date)
          and cnvtdatetime(request->end_date)) or
         (c.expiration_dt_tm between cnvtdatetime(request->begin_date)
          and cnvtdatetime(request->end_date)) or
         (c.receive_dt_tm < cnvtdatetime(request->begin_date)
          and c.expiration_dt_tm > cnvtdatetime(request->end_date)))
  JOIN cm
    where cm.control_id = c.control_id
  JOIN rlr
    where rlr.lot_id = c.lot_id and
          parser(GetTestsiteParser("rlr"))

  JOIN arl
    where arl.lot_id = rlr.lot_id and
          arl.service_resource_cd = rlr.service_resource_cd
          and parser(GetProcedureParser("arl"))
          and ((arl.beg_effective_dt_tm between cnvtdatetime(request->begin_date)
                and cnvtdatetime(request->end_date))
          or (arl.end_effective_dt_tm between cnvtdatetime(request->begin_date)
          and cnvtdatetime(request->end_date))
          or (arl.beg_effective_dt_tm < cnvtdatetime(request->begin_date)
          and arl.end_effective_dt_tm > cnvtdatetime(request->end_date)))

  ORDER BY lot_assay,
           cnvtdatetime(arl.end_effective_dt_tm) desc, 
           assay_arl

  HEAD lot_assay
       lot_cnt = lot_cnt + 1
    if (mod(lot_cnt,5) = 1)
        stat = alterlist(lot->lots,lot_cnt + 5)
    endif
     
    lot->lots[lot_cnt].lot_sequence = lot_cnt,
    lot->lots[lot_cnt].task_assay_cd = arl.task_assay_cd,
    lot->lots[lot_cnt].lot_id = c.lot_id,
    lot->lots[lot_cnt].pdm_range_id = 0,
    lot->lots[lot_cnt].lot_number = c.lot_number,
    lot->lots[lot_cnt].lot_expiration = c.expiration_dt_tm,
    lot->lots[lot_cnt].control_name = cm.short_description,
    lot->lots[lot_cnt].control_id = cm.control_id
    lot->lots[lot_cnt].lot_used_ind = 0
      if (c.receive_dt_tm < dttm->hold_lot_dt_tm)
          DtTm->hold_lot_dt_tm = c.receive_dt_tm
      endif
    
  head assay_arl
       s_cnt = s_cnt + 1
    if (mod(s_cnt,5) = 1)
        stat = alterlist(holdstat->stats,s_cnt + 5)
    endif
      
    holdstat->stats[s_cnt].control_id = c.control_id,
    ;count up the sequence for each stat
    holdstat->stats[s_cnt].stat_cnt = s_cnt,
    holdstat->stats[s_cnt].end_effective_dt_tm = arl.end_effective_dt_tm,
    holdstat->stats[s_cnt].beg_effective_dt_tm = arl.beg_effective_dt_tm,
    holdstat->stats[s_cnt].active_ind = arl.active_ind,
    holdstat->stats[s_cnt].mean = arl.mean,
    holdstat->stats[s_cnt].sd = arl.statistical_std_dev,
    holdstat->stats[s_cnt].lot_id = arl.lot_id,
    holdstat->stats[s_cnt].pdm_range_id = 0,
    holdstat->stats[s_cnt].service_resource_cd = arl.service_resource_cd,
    holdstat->stats[s_cnt].task_assay_cd = arl.task_assay_cd,
    holdstat->stats[s_cnt].arl_id = arl.arl_id,
    holdstat->stats[s_cnt].manf_mean = arl.manf_mean,
    holdstat->stats[s_cnt].manf_std_dev = arl.manf_std_dev,
    holdstat->stats[s_cnt].manf_low = arl.manf_low,
    holdstat->stats[s_cnt].manf_high = arl.manf_high,
    holdstat->stats[s_cnt].abs_low = arl.abs_low,
    holdstat->stats[s_cnt].abs_high = arl.abs_high,
    holdstat->stats[s_cnt].stat_used_ind = 0
  
  WITH
    nocounter

else 
  
  SELECT into "nl:"
    p.pdm_param_id,
    p.task_assay_cd,
    r.pdm_range_id, 
    q.qc_result_id  
  FROM                
    pdm_params p,   
     pdm_ranges r    

  PLAN p              
    where parser(GetTestsiteParser("p")) and
          parser(GetProcedureParser("p"))
  JOIN r
    where p.pdm_param_id = r.pdm_param_id and
        ((r.beg_effective_dt_tm between
          cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) or
        (r.end_effective_dt_tm between
          cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) or
        (r.beg_effective_dt_tm < cnvtdatetime(request->begin_date)
         and r.end_effective_dt_tm > cnvtdatetime(request->end_date)))
  
  ORDER BY 
    p.task_assay_cd, 
    r.pdm_range_id
  
  HEAD p.task_assay_cd
       range_cnt = 0    
  
  HEAD r.pdm_range_id 
       range_cnt = range_cnt + 1
       lot_cnt = lot_cnt + 1
    if (mod(lot_cnt,5) = 1)
        stat = alterlist(lot->lots,lot_cnt + 5)
    endif
    
    lot->lots[lot_cnt].lot_sequence = range_cnt,
    lot->lots[lot_cnt].lot_id = 0,
    lot->lots[lot_cnt].task_assay_cd = p.task_assay_cd,
    lot->lots[lot_cnt].lot_number = cnvtstring(r.pdm_range_id,19,0),
    lot->lots[lot_cnt].lot_expiration = r.end_effective_dt_tm, 
    lot->lots[lot_cnt].control_name = "Patient Data",
    lot->lots[lot_cnt].control_id = 0 
    lot->lots[lot_cnt].pdm_range_id = r.pdm_range_id,
    lot->lots[lot_cnt].sex_cd = r.sex_cd,
    lot->lots[lot_cnt].sex_disp = substring(1,15,UAR_GET_CODE_DISPLAY(r.sex_cd)),
    lot->lots[lot_cnt].species_cd = r.species_cd,
    lot->lots[lot_cnt].species_disp = substring(1,15,UAR_GET_CODE_DISPLAY(r.species_cd)),
    lot->lots[lot_cnt].nbr_results = p.nbr_results,
    lot->lots[lot_cnt].result_eval_flag = p.result_eval_flag,
    units_cd = p.time_period_units_cd,
    units_cdf = UAR_GET_CODE_MEANING(p.time_period_units_cd),
    units_disp = UAR_GET_CODE_DISPLAY(p.time_period_units_cd),
      
      CASE (trim(units_cdf))
        OF "DAYS":
            time_period = p.time_period_minutes / 1440
        OF "WEEKS":
            time_period = p.time_period_minutes / (1440 * 7)
        OF "MONTHS":
            time_period = p.time_period_minutes / (1440 * 30)
        OF "YEARS":
            time_period = p.time_period_minutes / (1440 * 365)
        OF "MINUTES":
            time_period = p.time_period_minutes
        OF "HOURS":
            time_period = p.time_period_minutes / 60
      ENDCASE
        
    lot->lots[lot_cnt].time_period_display = concat(trim(cnvtstring(time_period)), " ", units_disp)
    units_cd = r.age_from_units_cd,
    units_cdf = UAR_GET_CODE_MEANING(r.age_from_units_cd),
    units_disp = UAR_GET_CODE_DISPLAY(r.age_from_units_cd),
      
      CASE (trim(units_cdf))
        OF "DAYS":
            age_from = r.age_from_minutes / 1440
        OF "WEEKS":
            age_from = r.age_from_minutes / (1440 * 7)
        OF "MONTHS":
            age_from = r.age_from_minutes / (1440 * 30)
        OF "YEARS":
            age_from = r.age_from_minutes / (1440 * 365)
        OF "MINUTES":
            age_from = r.age_from_minutes
        OF "HOURS":
            age_from = r.age_from_minutes / 60
      ENDCASE
    
    lot->lots[lot_cnt].age_from_display = concat(trim(cnvtstring(age_from)), " ", units_disp)
    units_cd = r.age_to_units_cd,
    units_cdf = UAR_GET_CODE_MEANING(r.age_to_units_cd),
    units_disp = UAR_GET_CODE_DISPLAY(r.age_to_units_cd),
    
      CASE (trim(units_cdf))                      
        OF "DAYS":                                
            age_to = r.age_to_minutes / 1440        
        OF "WEEKS":                               
            age_to = r.age_to_minutes / (1440 * 7)  
        OF "MONTHS":                              
            age_to = r.age_to_minutes / (1440 * 30) 
        OF "YEARS":                     
            age_to = r.age_to_minutes / (1440 * 365)
        OF "MINUTES":                   
            age_to = r.age_to_minutes     
        OF "HOURS":                     
            age_to = r.age_to_minutes / 60
      ENDCASE
        
    lot->lots[lot_cnt].age_to_display = concat(trim(cnvtstring(age_to)), " ", units_disp)
    s_cnt = s_cnt + 1 
      if (mod(s_cnt,5) = 1)        
          stat = alterlist(holdstat->stats,s_cnt + 5)
      endif
                                              
    holdstat->stats[s_cnt].control_id = 0,
    holdstat->stats[s_cnt].mean = r.mean, 
    holdstat->stats[s_cnt].sd = r.std_dev,
    holdstat->stats[s_cnt].lot_id = 0,    
    holdstat->stats[s_cnt].pdm_range_id = r.pdm_range_id,
    holdstat->stats[s_cnt].service_resource_cd = p.service_resource_cd,
    holdstat->stats[s_cnt].task_assay_cd = p.task_assay_cd,
    holdstat->stats[s_cnt].manf_mean = 0,
    holdstat->stats[s_cnt].manf_std_dev = 0,
    holdstat->stats[s_cnt].manf_low = 0,
    holdstat->stats[s_cnt].manf_high = 0,
    holdstat->stats[s_cnt].abs_low = r.result_low,
    holdstat->stats[s_cnt].abs_high = r.result_high
  
  DETAIL                                             
    row + 0                                        
  
  WITH                                              
    nocounter                                      
                                                       
endif                                              

set error_check = ERROR(sErrorMsg,0)   ;get error message
  if (error_check != 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
    go to exit_script
  endif

/********************************************************************/
/* Select QC Comments from the database                             */
/********************************************************************/
SELECT into "nl:"
  q.qc_result_id,
  q.task_assay_cd,
  performdatetime = cnvtdatetime(q.perform_dt_tm),
  qc.qc_result_id,
  qc.comment_type_cd,
  l.long_text_id,
  d.seq,
  p.person_id,
  qcrt.qc_result_id,
  qt_exists = decode(qt.seq, "Y","N"),
  qt.trouble_id

FROM
  (dummyt d with seq = value(cntrl_cnt)),
   qc_result q,
  (dummyt d2 with seq = 1),
   qc_comment qc,
   long_text l,
   prsnl p,
  (dummyt d3 with seq = 1),
   qc_result_trouble_r qcrt,
   qc_trouble_step qt

PLAN d
JOIN q
  where parser(GetProcedureParser("q")) and
     q.control_id = control->cntrls[d.seq].control_id and
     parser(GetTestsiteParser("q")) and
    (q.perform_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) and
     q.result_status_cd in ( result_status_accept_cd, result_status_verified_cd,
     result_status_auto_verf_cd, result_status_reviewed_cd, result_status_changed_cd,
     result_status_corrected_cd, result_status_rejected_cd)
JOIN d2 
  where d2.seq = 1
JOIN qc
  where qc.qc_result_id = q.qc_result_id and qc.comment_type_cd in (FOOTNOTE_CD, REVIEW_NOTE_CD)
JOIN l
  where l.long_text_id = qc.long_text_id
JOIN p
  where p.person_id = qc.perform_prsnl_id
JOIN d3 
  where d3.seq = 1
JOIN qcrt
  where qcrt.qc_result_id = q.qc_result_id and qcrt.active_ind > 0
JOIN qt
  where qt.trouble_id = qcrt.trouble_id

ORDER BY
  q.task_assay_cd,
  performdatetime desc,
  q.qc_result_id

HEAD q.task_assay_cd
     empty_string = FILLSTRING(50," ")
     comment_assay_cnt = 0

HEAD q.qc_result_id
     rule_found = 0
     footnote_found = 0
     review_note_found = 0
     trouble_found = 0
     l_cnt = 0
     comment_cnt = comment_cnt + 1
  if (mod(comment_cnt,5) = 1)
      stat = alterlist(comment->comments,comment_cnt + 5)
  endif
  comment->comments[comment_cnt].qc_result_id = q.qc_result_id,
  comment->comments[comment_cnt].nbr_comments = 0

DETAIL
  ROW+0
  if (qt_exists = "Y")
      l_cnt = l_cnt + 1
    if (mod(l_cnt,5) = 1)
        stat =  alterlist(comment->comments[comment_cnt].list,l_cnt + 5)
    endif
    
    if (trouble_found = 0 and footnote_found = 0 and review_note_found = 0)
        comment_assay_cnt = comment_assay_cnt+1
    endif
    
    comment->comments[comment_cnt].nbr_comments = comment->comments[comment_cnt].nbr_comments + 1
    comment->comments[comment_cnt].comment_sequence = comment_assay_cnt,
    comment->comments[comment_cnt]->list[l_cnt].comment_cd = 0
    comment->comments[comment_cnt]->list[l_cnt].task_assay_cd = q.task_assay_cd,
    comment->comments[comment_cnt]->list[l_cnt].step = qt.step,
    comment->comments[comment_cnt]->list[l_cnt].trouble_ind = 1,
    trouble_found = 1
  endif


  if (qc.comment_type_cd = FOOTNOTE_CD and footnote_found = 0
      and l.long_text_id > 0)
    l_cnt = l_cnt + 1
    
    if (mod(l_cnt,5) = 1)
        stat =  alterlist(comment->comments[comment_cnt].list,l_cnt + 5)
    endif
    
    if (trouble_found = 0 and footnote_found = 0 and review_note_found = 0 and rule_found = 0)
        comment_assay_cnt = comment_assay_cnt+1
    endif
    
    comment->comments[comment_cnt].nbr_comments = comment->comments[comment_cnt].nbr_comments + 1
    comment->comments[comment_cnt].comment_sequence = comment_assay_cnt,
    comment->comments[comment_cnt]->list[l_cnt].comment_text = l.long_text,
    comment->comments[comment_cnt]->list[l_cnt].comment_cd = qc.comment_type_cd
    comment->comments[comment_cnt]->list[l_cnt].task_assay_cd = q.task_assay_cd,
    comment->comments[comment_cnt]->list[l_cnt].comment_dt_tm = qc.comment_dt_tm
    comment->comments[comment_cnt]->list[l_cnt].comment_prsnl_name = p.name_full_formatted
    footnote_found = 1

  elseif (qc.comment_type_cd = REVIEW_NOTE_CD and review_note_found = 0
          and l.long_text_id > 0) ; and SUBSTRING(1,50,l.long_text) != empty_string)

    l_cnt = l_cnt + 1
    
    if (mod(l_cnt,5) = 1)
        stat =  alterlist(comment->comments[comment_cnt].list,l_cnt + 5)
    endif
    
    if (trouble_found = 0 and footnote_found = 0 and review_note_found = 0 and rule_found = 0)
        comment_assay_cnt = comment_assay_cnt+1
    endif
    
    comment->comments[comment_cnt].nbr_comments = comment->comments[comment_cnt].nbr_comments + 1
    comment->comments[comment_cnt].comment_sequence = comment_assay_cnt,
    comment->comments[comment_cnt]->list[l_cnt].comment_text = l.long_text,
    comment->comments[comment_cnt]->list[l_cnt].comment_cd = qc.comment_type_cd
    comment->comments[comment_cnt]->list[l_cnt].task_assay_cd = q.task_assay_cd,
    comment->comments[comment_cnt]->list[l_cnt].comment_dt_tm = qc.comment_dt_tm
    comment->comments[comment_cnt]->list[l_cnt].comment_prsnl_name = p.name_full_formatted
    review_note_found = 1

  endif

FOOT q.qc_result_id
     ROW+0

FOOT q.task_assay_cd
         ROW+0

WITH
  outerjoin = d,
  outerjoin = d2,
  dontcare = qc,
  dontcare = l,
  dontcare = p,
  outerjoin = d3,
  check,
  nocounter

set error_check = ERROR(sErrorMsg,0)   ;get error message
  if (error_check != 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
    go to exit_script
  endif

/********************************************************************/
/* Select the QC failed rules from the database                     */
/********************************************************************/
set comment_found = 0
  
SELECT into "nl:"
    q.qc_result_id,
    qr.rule_id,
    qr.sequence,
    qrr.qc_result_id,
    d.seq
FROM
    qc_result q,
    qc_rule qr,
    qc_result_rule_r qrr,
   (dummyt d with seq = value(cntrl_cnt))

PLAN d
JOIN q
  where parser(GetProcedureParser("q")) and
        q.control_id = control->cntrls[d.seq].control_id and
        parser(GetTestsiteParser("q")) and
       (q.perform_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) and
        q.result_status_cd in (result_status_accept_cd, result_status_verified_cd,
        result_status_auto_verf_cd, result_status_reviewed_cd, result_status_changed_cd,
        result_status_corrected_cd, result_status_rejected_cd)
JOIN qr
  where qr.rule_id = q.rule_id
JOIN qrr
  where qrr.qc_result_id = q.qc_result_id
        and qrr.rule_id = qr.rule_id
        and qrr.sequence = qr.sequence
        and qrr.status_flag = 0

ORDER BY 
    q.task_assay_cd, 
    q.qc_result_id, 
    qr.sequence

HEAD REPORT
  comments_modified = 0
  
HEAD Q.TASK_ASSAY_CD
  row +0

HEAD q.qc_result_id
  ROW +0

DETAIL
;look for this result id, if found, add failed rules to this structure, else create new record in this structure
comment_found = 0

for (cnt = 1 to comment_cnt)
  if (comment->comments[cnt].qc_result_id = q.qc_result_id)
    comments_modified = 1
    l_cnt = comment->comments[cnt].nbr_comments + 1
    stat =  alterlist(comment->comments[cnt].list, l_cnt)

   ;if no comments existed before now, set the comment_sequence
    if (l_cnt = 1)
      comment_assay_cnt = comment_assay_cnt + 1
      comment->comments[cnt].comment_sequence = comment_assay_cnt
    endif
      
    comment->comments[cnt].nbr_comments = l_cnt
    comment->comments[cnt]->list[l_cnt].comment_cd = 0
    comment->comments[cnt]->list[l_cnt].task_assay_cd = q.task_assay_cd,
    comment->comments[cnt]->list[l_cnt].rule_ind = 1,
    comment->comments[cnt]->list[l_cnt].rule_description = qr.rule_definition
    cnt = comment_cnt + 1
    comment_found = 1
  endif
endfor

;if the qc result id was not found in the loading of comments load it now
if (comment_found = 0)
  comments_modified = 1
  comment_cnt = comment_cnt + 1
  stat = alterlist(comment->comments, comment_cnt)
  comment->comments[comment_cnt].qc_result_id = q.qc_result_id,
  comment->comments[comment_cnt].nbr_comments = 1
  comment->comments[comment_cnt].comment_sequence = comment_cnt
  l_cnt = 1
  stat = alterlist(comment->comments[comment_cnt].list, l_cnt)
  comment->comments[cnt]->list[l_cnt].comment_cd = 0
  comment->comments[cnt]->list[l_cnt].task_assay_cd = q.task_assay_cd,
  comment->comments[cnt]->list[l_cnt].rule_ind = 1,
  comment->comments[cnt]->list[l_cnt].rule_description = qr.rule_definition
endif

FOOT Report
  
if (comments_modified = 1);if comments have been modified resequence the comments in order
  comment_sequence = 1
  for (cnt = 1 to comment_cnt)
    if (comment->comments[cnt].comment_sequence > 0)
      comment->comments[cnt].comment_sequence = comment_sequence
      comment_sequence = comment_sequence + 1
    endif
  endfor
endif

WITH NOCOUNTER

/********************************************************************/
/* Get QC Data Map                                                  */
/********************************************************************/

select distinct into "nl:"
   q.task_assay_cd,
   q.service_resource_cd

from
  (dummyt d with seq = value(size(control->cntrls,5))),
  qc_result q
plan d
join q where
  parser(GetProcedureParser("q")) and
  q.qc_result_type_flag = request->qc_result_type_flag and
  q.control_id = control->cntrls[d.seq].control_id and
  parser(GetTestsiteParser("q")) and
  q.qc_result_type_flag = request->qc_result_type_flag and
  (q.perform_dt_tm between cnvtdatetime(DtTm->hold_lot_dt_tm) and cnvtdatetime(request->end_date)) and
    q.result_status_cd in ( result_status_accept_cd, result_status_verified_cd,
    result_status_auto_verf_cd, result_status_changed_cd, result_status_reviewed_cd,
    result_status_corrected_cd, result_status_rejected_cd)

ORDER BY
  q.task_assay_cd

head report
  stat = alterlist(data_map->dms, 10)
  ncnt = 0

detail
  ncnt = ncnt + 1
  if (mod(ncnt, 10) = 1)
    stat = alterlist(data_map->dms, ncnt + 9)
  endif
  data_map->dms[ncnt].service_resource_cd = q.service_resource_cd
  data_map->dms[ncnt].task_assay_cd = q.task_assay_cd

foot report
  stat = alterlist(data_map->dms,ncnt)

WITH
  nocounter


SELECT into "nl:"
  data_map_exists = decode(dm.seq, "Y", "N"),
  dm.task_assay_cd,
  d_rg.seq,
  rg_exists = decode(rg.seq, "Y", "N"),
  rg.parent_service_resource_cd,
  rg.child_service_resource_cd,
  rg.resource_group_type_cd,
  rg.root_service_resource_cd

FROM
  (dummyt d with seq = value(ncnt)),
   data_map dm,
  (dummyt d_rg with seq = 1),
   resource_group rg

PLAN d
JOIN dm
  where dm.task_assay_cd = data_map->dms[d.seq].task_assay_cd
        and dm.data_map_type_flag in (0, 1)
        and dm.active_ind = 1
JOIN d_rg
  where d_rg.seq = 1
JOIN rg
  where rg.parent_service_resource_cd = dm.service_resource_cd
        and rg.child_service_resource_cd = data_map->dms[d.seq].service_resource_cd
        and rg.resource_group_type_cd = serv_res_subsection_cd
        and rg.root_service_resource_cd = 0.0

ORDER BY
dm.task_assay_cd

HEAD dm.task_assay_cd
  ;* Set the default data map in the event that no data map is found
  data_map_level = 0
  arg_max_digits = 8
  arg_min_digits = 1
  arg_min_decimal_places = 0

DETAIL
if (data_map_exists = "Y") ;* Check for exact match on QC data map

  if (data_map_level <= 3 and dm.data_map_type_flag = 1 and dm.service_resource_cd > 0.0
      and dm.service_resource_cd = data_map->dms[d.seq].service_resource_cd)
    data_map_level = 4
    arg_max_digits = dm.max_digits
    arg_min_digits = dm.min_digits
    arg_min_decimal_places = dm.min_decimal_places
  endif

 ;* Check for exact match on data map
  if (data_map_level <= 2 and dm.data_map_type_flag = 0 and dm.service_resource_cd > 0.0
      and dm.service_resource_cd = data_map->dms[d.seq].service_resource_cd)
    data_map_level = 3
    arg_max_digits = dm.max_digits
    arg_min_digits = dm.min_digits
    arg_min_decimal_places = dm.min_decimal_places
  endif

 ;* Check for subsection level data map
  if (data_map_level <= 1 and dm.data_map_type_flag = 0 and dm.service_resource_cd > 0.0                           ;001
      and rg_exists = "Y" and rg.parent_service_resource_cd = dm.service_resource_cd
      and rg.child_service_resource_cd = data_map->dms[d.seq].service_resource_cd)
    data_map_level = 2
    arg_max_digits = dm.max_digits
    arg_min_digits = dm.min_digits
    arg_min_decimal_places = dm.min_decimal_places
  endif

 ;* Check for default all resources level data map
  if (data_map_level = 0 and dm.data_map_type_flag = 0 and dm.service_resource_cd = 0.0)                          ;001
    data_map_level = 1
    arg_max_digits = dm.max_digits
    arg_min_digits = dm.min_digits
    arg_min_decimal_places = dm.min_decimal_places
  endif
endif

FOOT dm.task_assay_cd


  data_map->dms[d.seq].max_digits = arg_max_digits
  data_map->dms[d.seq].min_digits = arg_min_digits
  data_map->dms[d.seq].min_decimal_places = arg_min_decimal_places

WITH

  outerjoin = d_rg,
  dontcare = rg,
  outerjoin = d,
  nocounter

  set dm_cnt = size(data_map->dms, 5)
  set stat = alterlist(data_map->dms, dm_cnt)


declare FormatStatResult( result_value ) = vc
subroutine FormatStatResult( result_value )
  set oldValue = trim(result_value, 3)
  set first = substring(1,1, oldValue)
  set second = substring(2,1, oldValue)
  set length = size(oldValue)
  set newValue = "                                             "
  
  if (first = ".")
    set newValue = build("0", oldValue)
  elseif ((first = "-") and (second = "."))
    set last = substring(2, (length - 1), oldValue)
    set newValue = build(first, "0", last)
  else
    set newValue = oldValue
  endif

  return (newValue)
end

/********************************************************************/
/* REPORT                                                           */
/********************************************************************/
%i cclsource:aps_uar_rtf.inc

execute cpm_create_file_name "GLB_LJC", "txt"

if (cpm_cfn_info->status_data.status != "S")
  set reply->status_data->status = "F"
  set reply->status_data->subeventstatus[1]->operationname = "get"
  set reply->status_data->subeventstatus[1]->operationstatus = "F"
  set reply->status_data->subeventstatus[1]->targetobjectname = "filename"
  set reply->status_data->subeventstatus[1]->targetObjectValue = "Filename Retrieval Unsuccessful"
  go to exit_script
endif

set reply->file_name = cpm_cfn_info->file_name_path

SELECT if (request->control_per_graph_ind = 1)
           PLAN d
           JOIN q
             where parser(GetProcedureParser("q")) and parser(GetTestsiteParser("q")) and
	         q.control_id = control->cntrls[d.seq].control_id and
	         q.qc_result_type_flag = request->qc_result_type_flag and
	         (q.perform_dt_tm between cnvtdatetime(DtTm->hold_lot_dt_tm) and cnvtdatetime(request->end_date)) and
	         q.result_status_cd in ( result_status_accept_cd, result_status_verified_cd,
	         result_status_auto_verf_cd, result_status_changed_cd, result_status_reviewed_cd,
	         result_status_corrected_cd, result_status_rejected_cd) and
	         q.result_type_cd != freetext_result_type_cd and ((request->lot_type_flag = 0) or
	         (request->lot_type_flag = 1 and q.preactive_ind = 1) or
	         (request->lot_type_flag = 2 and q.preactive_ind = 0))
 
           JOIN dta
             where dta.task_assay_cd = q.task_assay_cd
           JOIN d5
             where d5.seq = 1
           JOIN cm
             where cm.control_id = q.control_id
           JOIN d4
             where d4.seq = 1
           JOIN rt
             where rt.rule_id = q.rule_id
           JOIN p1
             where p1.person_id = q.perform_personnel_id
           JOIN d1
             where d5.seq = 1
           join qre
             where q.qc_result_id = qre.qc_result_id and
                   qre.event_type_cd in (result_status_verified_cd,
                                         result_status_auto_verf_cd)
		   JOIN d2
		     where d5.seq = 1
		   join p2
		     where qre.event_personnel_id = p2.person_id
		   JOIN n
		     where n.nomenclature_id = q.nomenclature_id
		   JOIN cm2
		     where cm2.control_id = q.control_id
		   ORDER BY
	         q.service_resource_cd,
	         q.task_assay_cd,
	         q.control_id,
	         performdatetime desc,
	         break_lot_pdm,	         
		     q.qc_result_id
	elseif (request->lot_per_graph_ind = 1)
           PLAN d
           JOIN q
             where parser(GetProcedureParser("q")) and parser(GetTestsiteParser("q")) and
	         q.control_id = control->cntrls[d.seq].control_id and
	         q.qc_result_type_flag = request->qc_result_type_flag and
	         (q.perform_dt_tm between cnvtdatetime(DtTm->hold_lot_dt_tm) and cnvtdatetime(request->end_date)) and
	         q.result_status_cd in ( result_status_accept_cd, result_status_verified_cd,
	         result_status_auto_verf_cd, result_status_changed_cd, result_status_reviewed_cd,
	         result_status_corrected_cd, result_status_rejected_cd) and
	         q.result_type_cd != freetext_result_type_cd and ((request->lot_type_flag = 0) or
	         (request->lot_type_flag = 1 and q.preactive_ind = 1) or
	         (request->lot_type_flag = 2 and q.preactive_ind = 0))
 
           JOIN dta
             where dta.task_assay_cd = q.task_assay_cd
           JOIN d5
             where d5.seq = 1
           JOIN cm
             where cm.control_id = q.control_id
           JOIN d4
             where d4.seq = 1
           JOIN rt
             where rt.rule_id = q.rule_id
           JOIN p1
             where p1.person_id = q.perform_personnel_id
           JOIN d1
             where d5.seq = 1
           join qre
             where q.qc_result_id = qre.qc_result_id and
                   qre.event_type_cd in (result_status_verified_cd,
                                         result_status_auto_verf_cd)
		   JOIN d2
		     where d5.seq = 1
		   join p2
		     where qre.event_personnel_id = p2.person_id
		   JOIN n
		     where n.nomenclature_id = q.nomenclature_id
		   JOIN cm2
		     where cm2.control_id = q.control_id
		   ORDER BY
	         q.service_resource_cd,
	         q.task_assay_cd,
	         q.lot_id,
	         break_lot_pdm,
	         performdatetime desc,
		     q.qc_result_id
       else
           PLAN d
           JOIN q
             where parser(GetProcedureParser("q")) and parser(GetTestsiteParser("q")) and
	         q.control_id = control->cntrls[d.seq].control_id and
	         q.qc_result_type_flag = request->qc_result_type_flag and
	         (q.perform_dt_tm between cnvtdatetime(DtTm->hold_lot_dt_tm) and cnvtdatetime(request->end_date)) and
	         q.result_status_cd in ( result_status_accept_cd, result_status_verified_cd,
	         result_status_auto_verf_cd, result_status_changed_cd, result_status_reviewed_cd,
	         result_status_corrected_cd, result_status_rejected_cd) and
	         q.result_type_cd != freetext_result_type_cd and ((request->lot_type_flag = 0) or
	         (request->lot_type_flag = 1 and q.preactive_ind = 1) or
	         (request->lot_type_flag = 2 and q.preactive_ind = 0))
 
           JOIN dta
             where dta.task_assay_cd = q.task_assay_cd
           JOIN d5
             where d5.seq = 1
           JOIN cm
             where cm.control_id = q.control_id
           JOIN d4
             where d4.seq = 1
           JOIN rt
             where rt.rule_id = q.rule_id
           JOIN p1
             where p1.person_id = q.perform_personnel_id
           JOIN d1
             where d5.seq = 1
           join qre
             where q.qc_result_id = qre.qc_result_id and
			       qre.event_type_cd in (result_status_verified_cd, result_status_auto_verf_cd)
		   JOIN d2
		     where d5.seq = 1
		   join p2
		     where qre.event_personnel_id = p2.person_id
		   JOIN n
		     where n.nomenclature_id = q.nomenclature_id
		   JOIN cm2
		     where cm2.control_id = q.control_id
           ORDER BY
	         q.service_resource_cd,
	         q.task_assay_cd,
	         performdatetime desc,
	         break_lot_pdm,
		     q.qc_result_id
       endif
 
INTO cpm_cfn_info->file_name_path
	  q.qc_result_id,
	  performdatetime = cnvtdatetime(q.perform_dt_tm),
	  q.task_assay_cd,
	  q.control_id,
	  q.lot_id,
	  break_lot_pdm = concat(cnvtstring(q.lot_id,32,0), cnvtstring(q.pdm_range_id,32,0)),
	  q.preactive_ind,
	  d.seq,
	  cm.short_description,
	  rt.short_description,
	  dta.mnemonic,
	  n.nomenclature_id,
	  p1.name_full_formatted,
	  qre.event_type_cd,
	  p2.name_full_formatted,
	  lot_assay = concat(cnvtstring(q.lot_id,32,0), cnvtstring(q.task_assay_cd,32,0))
 
FROM
  (dummyt d with seq = value(cntrl_cnt)),
   qc_result q,
   qc_result_event qre,
   control_material cm,
   qc_rule_type rt,
   discrete_task_assay dta,
   nomenclature n,
   prsnl p1,
   prsnl p2,
   (dummyt d1 with seq = 1),
   (dummyt d2 with seq = 1),
   (dummyt d4 with seq = 1),
   (dummyt d5 with seq = 1),
    control_material cm2
 
HEAD REPORT
%i cclsource:glb_print_text.inc
%i cclsource:glb_rpt_macros.inc

HEAD PAGE
  COL 1   I18N_Captions->rpt_no  
  COL 13  I18N_Captions->qc_ljc  
  CALL CENTER(uar_i18ngetmessage(i18nHandle,"key_4","L E V E Y  J E N N I N G S  C H A R T"),1,132) ;016
  COL 107 I18N_Captions->tm          
  COL 117 CURTIME "@TIMENOSECONDS;;M" 
  ROW+1
  COL 1   I18N_Captions->as_of_dt
  COL 13   CURDATE "@SHORTDATE4YR;;Q" 
  COL 107 I18N_Captions->prep      
  COL 117 CURDATE "@SHORTDATE4YR;;Q"  
  ROW+1
  COL 1 I18N_Captions->DATE_FROM_,
  COL 11 request->begin_date "@SHORTDATE4YR;;Q"
  COL 22 I18N_Captions->TO_ 
  COL 25 request->end_date "@SHORTDATE4YR;;Q" 
  COL 107, I18N_Captions->pg_no     
  COL 117  CURPAGE "###;L"
  ROW+1
  LINE = FILLSTRING(130,"=")
  COL 1, LINE
  ROW+1
  if (disp_results = 1)  ;true
    COL 1 I18N_Captions->perf       
    if (q.result_type_cd != alpha_cd)
      if(request->use_actual_exp_val_ind = 1 AND nStatCnt = 1)
        arg_raw_value = (dStatMean - (dStatStdDev * 3))
        COL 21, rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
        arg_raw_value = (dStatMean - (dStatStdDev * 2))
        COL 31, rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
        arg_raw_value = (dStatMean - (dStatStdDev * 1))
        COL 41, rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
        arg_raw_value = (dStatMean)                
        COL 51, rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
        arg_raw_value = (dStatMean + (dStatStdDev * 1))
        COL 62, rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
        arg_raw_value = (dStatMean + (dStatStdDev * 2))
        COL 72, rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
        arg_raw_value = (dStatMean + (dStatStdDev * 3))
        COL 82, rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
      else
        COL 22,   I18N_Captions->neg3s
        COL 32,   I18N_Captions->neg2s
        COL 42,   I18N_Captions->neg1s
        COL 52,   I18N_Captions->Mean
        COL 62,   I18N_Captions->1s  
        COL 72,   I18N_Captions->2s  
        COL 82,   I18N_Captions->3s  
      endif 
      COL 86,   I18N_Captions->RESULT_ 
      COL 93,   I18N_Captions->z_score
            
      if (request->qc_result_type_flag = 0)
        if (request->verify_ind = 1)
          COL 102, I18N_Captions->VERF_TECH  
        else
          COL 102,  I18N_Captions->PERF_TECH_
        endif
        COL 113,  I18N_Captions->NOTE_  
        COL 119,  I18N_Captions->ACTION 
      else                              
        COL 102,  I18N_Captions->NOTE_  
        COL 108,  I18N_Captions->ACTION 
      endif                             
      ROW+1
      COL 1,   "---------------"
      COL 20,  "--+---------+---------+---------+---------"
      COL 62,  "+---------+---------+--"
      COL 86,  "------ "
      COL 93,  "------- "
      if (request->qc_result_type_flag = 0)
        COL 101  "----------- "
        COL 113, "---- "
        COL 118, "--------"
      else
        COL 102, "---- "     
        COL 107, "--------"  
      endif
      ROW+1
    else      
      COL 25    I18N_Captions->Normal     
      COL 43    I18N_Captions->Abnormal   
      COL 61    I18N_Captions->Reviewed   
      COL 80,   I18N_Captions->RESULT_    
      if (request->verify_ind = 1)        
        COL 93, I18N_Captions->VERF_TECH  
      else                                
        COL 93,  I18N_Captions->PERF_TECH_
      endif                           
      COL 105,  I18N_Captions->NOTE_  
      COL 111,  I18N_Captions->ACTION 
      ROW +1
      COL 1 "---------------   +--------+--------+--------+--------+--------+--------+" 
      COL 77 "-------------  -----------  ----  --------"   
    endif      
  endif
        
HEAD q.service_resource_cd
  row + 0  
  
HEAD q.task_assay_cd
  results_found = 0                                                 ;020
  eval_bdate = datetimediff(q.perform_dt_tm, request->begin_date)   ;020
  eval_edate = datetimediff(q.perform_dt_tm, request->end_date)     ;020
  nStatCnt = 0                          
  if(request->use_actual_exp_val_ind = 1)
    for (x2 = 1 to s_cnt)
      if (holdstat->stats[x2].task_assay_cd = q.task_assay_cd
          and holdstat->stats[x2].service_resource_cd = q.service_resource_cd)                         
        dStatMean = holdstat->stats[x2].mean
        dStatStdDev = holdstat->stats[x2].sd
        nStatCnt = nStatCnt + 1
      endif                                                                                            
    endfor
  endif 
         
  if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)                          ;020
       results_found = 1                                               ;020
    arg_max_digits = 8
    arg_min_digits = 1
    arg_min_dec_places = 0
    arg_stat_dec_places = 1
    if (request->qc_result_type_flag = 1)
      for (x=1 to lot_cnt)
	      cum_cnt = cum_cnt + 1
	      if (mod(cum_cnt,5) = 1)
	          stat = alterlist(cumrec->cums,cum_cnt + 5)
	      endif
	      
	      cumrec->cums[cum_cnt].lot_number = lot->lots[x].lot_number,
	      cumrec->cums[cum_cnt].lot_id = lot->lots[x].lot_id,
	      cumrec->cums[cum_cnt].pdm_range_id = lot->lots[x].pdm_range_id,                      ;006
	      cumrec->cums[cum_cnt].lot_sequence = lot->lots[x].lot_sequence,                      ;006
	      cumrec->cums[cum_cnt].task_assay_cd = q.task_assay_cd,
	      cumrec->cums[cum_cnt].sex_cd = lot->lots[x].sex_cd,                                  ;006
	      cumrec->cums[cum_cnt].sex_disp = lot->lots[x].sex_disp,                              ;006
	      cumrec->cums[cum_cnt].species_cd = lot->lots[x].species_cd,                          ;006
	      cumrec->cums[cum_cnt].species_disp = lot->lots[x].species_disp,                      ;006
	      cumrec->cums[cum_cnt].age_from_display = lot->lots[x].age_from_display,              ;006
	      cumrec->cums[cum_cnt].age_to_display = lot->lots[x].age_to_display,                  ;006
	      cumrec->cums[cum_cnt].service_resource_cd = q.service_resource_cd
	    endfor
    endif
  endif

  prev_task_assay_cd = 0 
  prev_control_id = 0
  if (Row > 7)
    BREAK
  endif      

HEAD q.control_id
       	row + 0
         
HEAD break_lot_pdm ;q.lot_id 
  eval_bdate = datetimediff(q.perform_dt_tm, request->begin_date)
  eval_edate = datetimediff(q.perform_dt_tm, request->end_date)  

  if ((eval_bdate >= 0 OR request->lot_to_date_ind = 1) and eval_edate <= 0)                          ;020
      ROW + 0
    if (request->qc_result_type_flag = 0)
      for (x=1 to lot_cnt)
          ;fill the cumlot record with the lots for calculating lot statistics
        if (lot->lots[x].task_assay_cd = q.task_assay_cd and
            q.lot_id = lot->lots[x].lot_id
            and q.control_id = lot->lots[x].control_id)
          nfound = 0
          for (variable = 1 to cumlot_cnt)
            if(cumlot->cumlots[variable].lot_id = lot->lots[x].lot_id and
               cumlot->cumlots[variable].task_assay_cd = q.task_assay_cd and
               cumlot->cumlots[variable].lot_number = lot->lots[x].lot_number and
               cumlot->cumlots[variable].pdm_range_id = lot->lots[x].pdm_range_id and
               cumlot->cumlots[variable].service_resource_cd = q.service_resource_cd )

               nfound = 1
            endif
          endfor

          if(nfound = 0)
            cumlot_cnt = cumlot_cnt + 1
            if (mod(cumlot_cnt,5) = 1)
               stat = alterlist(cumlot->cumlots, cumlot_cnt + 5)
            endif
            cumlot->cumlots[cumlot_cnt].lot_id = lot->lots[x].lot_id,
            cumlot->cumlots[cumlot_cnt].task_assay_cd = q.task_assay_cd,
            cumlot->cumlots[cumlot_cnt].lot_number = lot->lots[x].lot_number,
            cumlot->cumlots[cumlot_cnt].pdm_range_id = lot->lots[x].pdm_range_id,
            cumlot->cumlots[cumlot_cnt].service_resource_cd = q.service_resource_cd
            ;loop through holdstat array to get correct stats
          endif
          
          for (x2 = 1 to s_cnt)
            if (request->qc_result_type_flag = 0
               and holdstat->stats[x2].task_assay_cd = q.task_assay_cd
               and holdstat->stats[x2].service_resource_cd = q.service_resource_cd
               and lot->lots[x].lot_id = holdstat->stats[x2].lot_id 
               and lot->lots[x].control_id = holdstat->stats[x2].control_id) 
              if (holdstat->stats[x2].stat_used_ind = 0) 
                cum_cnt = cum_cnt + 1
                if (mod(cum_cnt,5) = 1)
                   stat = alterlist(cumrec->cums,cum_cnt + 5)
                endif
                holdstat->stats[x2].stat_used_ind = 1 
                cumrec->cums[cum_cnt].stat_cnt = holdstat->stats[x2].stat_cnt,
                cumrec->cums[cum_cnt].lot_number = lot->lots[x].lot_number,
                cumrec->cums[cum_cnt].lot_id = lot->lots[x].lot_id,
                cumrec->cums[cum_cnt].pdm_range_id = lot->lots[x].pdm_range_id,
                cumrec->cums[cum_cnt].lot_sequence = lot->lots[x].lot_sequence,
                cumlot->cumlots[cumlot_cnt].service_resource_cd = holdstat->stats[x2].service_resource_cd,
                cumrec->cums[cum_cnt].task_assay_cd = q.task_assay_cd,
                cumrec->cums[cum_cnt].sex_cd = lot->lots[x].sex_cd,   
                cumrec->cums[cum_cnt].sex_disp = lot->lots[x].sex_disp,
                cumrec->cums[cum_cnt].species_cd = lot->lots[x].species_cd, 
                cumrec->cums[cum_cnt].species_disp = lot->lots[x].species_disp,
                cumrec->cums[cum_cnt].age_from_display = lot->lots[x].age_from_display,
                cumrec->cums[cum_cnt].age_to_display = lot->lots[x].age_to_display,  
                cumrec->cums[cum_cnt].service_resource_cd = q.service_resource_cd
              endif
            endif  
          endfor   
        endif
      endfor
    endif
  endif
;;;cms moved stuff here
  if (request->control_per_graph_ind = 1 AND q.control_id != prev_control_id)
    if(prev_control_id != 0)
      break
    endif
    prev_control_id = q.control_id
    prev_task_assay_cd = 0
  endif
  if (request->lot_per_graph_ind = 1)
    nStatCnt = 0                          
    
    if(request->use_actual_exp_val_ind = 1)
      
      for (x2 = 1 to s_cnt)
        
        if (holdstat->stats[x2].task_assay_cd = q.task_assay_cd
           and holdstat->stats[x2].service_resource_cd = q.service_resource_cd and
           holdstat->stats[x2].lot_id = q.lot_id)                         
          
          dStatMean = holdstat->stats[x2].mean
          dStatStdDev = holdstat->stats[x2].sd
          nStatCnt = nStatCnt + 1
        endif                                                                                            
      endfor
    endif    
  endif  
  if (prev_task_assay_cd != q.task_assay_cd)
    prev_task_assay_cd = q.task_assay_cd
                    
    COL 1,   I18N_Captions->tst_ste  
    testsite_disp = trim(UAR_GET_CODE_DISPLAY(q.service_resource_cd),3)  
    COL+4,   testsite_disp  
    temptaskassay = q.task_assay_cd
    COL 66,   I18N_Captions->proc 
    if (dta.task_assay_cd > 0)
      mnemonic = SUBSTRING(1,20,dta.mnemonic)
    else
      mnemonic = uar_get_code_display(q.task_assay_cd)
    endif
    COL+4,   mnemonic
    ROW+1
    COL 1,   I18N_Captions->ctrl_nm      
    if (request->qc_result_type_flag = 0)
      COL+1,   cm2.short_description
    else                                 
      COL+1,   I18N_Captions->pat_dat
    endif
    COL 66,   I18N_Captions->ctrl_rul  
    if (q.result_type_cd != alpha_cd)
      COL+1,   rt.short_description
    else
      COL+1    I18N_Captions->alpha   
    endif
    ROW+1
    LINE = FILLSTRING(130,"=")
    COL 1, LINE
    ROW+2
    if (q.result_type_cd != alpha_cd)
      COL 1,   I18N_Captions->GRP_   
      COL 5,   I18N_Captions->CNTRL_DESC___ 
      for (x = 1 to dm_cnt)
        if (q.task_assay_cd = data_map->dms[x].task_assay_cd)
            arg_max_digits = data_map->dms[x].max_digits
            arg_min_digits = data_map->dms[x].min_digits
            arg_min_dec_places = data_map->dms[x].min_decimal_places
            arg_stat_dec_places = data_map->dms[x].min_decimal_places + 1
        endif
      endfor
      COL 21,   I18N_Captions->neg3s               ;016
      COL 31,   I18N_Captions->neg2s               ;016
      COL 41,   I18N_Captions->neg1s               ;016
      COL 51,   I18N_Captions->Mean                ;016
      COL 62,   I18N_Captions->1s                  ;016
      COL 72,   I18N_Captions->2s                  ;016
      COL 82,   I18N_Captions->3s                  ;016
      if (request->qc_result_type_flag = 0)                                                  ;007
        COL 86,   I18N_Captions->LOT_NUMBER ;016
        COL 107,  I18N_Captions->X_CNTRL ;016
        COL 116,  I18N_Captions->LAST_USE ;016
      elseif (request->qc_result_type_flag = 1)              ;017
        col 86    I18N_Captions->time_period               ;017
        col 101    I18N_Captions->number_results           ;017
      endif                                                                                  ;007
      ROW+1
      COL 1,   "---"
      COL 5,   "-------------"
      COL 20,  "--+---------+---------+---------+---------"
      COL 62,   "+---------+---------+--"
      if (request->qc_result_type_flag = 0)                                                  ;007
        COL 86,   "------------------- "
        COL 107,  "-------"
        COL 116,   "----------"
      elseif (request->qc_result_type_flag = 1)              ;017
        col 86    "--------------"                         ;017
        col 101   "-----------------"                      ;017
      endif                                                                                  ;007
      ROW+1
    else ;
      COL 1  I18N_Captions->GROUP           ;016
      COL 10 I18N_Captions->CONTROL_DESC    ;016
      COL 31 I18N_Captions->LOT_NUMBER      ;016
      COL 48 I18N_Captions->X_CNTRL         ;016
      COL 57 I18N_Captions->LAST_USE        ;016
      ROW +1                                ;015
      COL 1 "-----"                         ;015
      COL 10 "-------------"                ;015
      COL 27 "-------------------"          ;015
      COL 48 "-------"                      ;015
      COL 57 "--------"                     ;015
      ROW +1                                ;015
    endif                                    ;015
    for (x = 1 to lot_cnt)
      for (x2 = 1 to s_cnt)
        if ((request->qc_result_type_flag = 0                                                    ;007
           and lot->lots[x].lot_id = holdstat->stats[x2].lot_id)
           or (request->qc_result_type_flag = 1                                                  ;007
           and lot->lots[x].pdm_range_id = holdstat->stats[x2].pdm_range_id))                  ;007
          if (holdstat->stats[x2].service_resource_cd = q.service_resource_cd and
              holdstat->stats[x2].task_assay_cd = q.task_assay_cd and
              lot->lots[x].task_assay_cd = q.task_assay_cd and                         
              (q.lot_id = lot->lots[x].lot_id or request->lot_per_graph_ind = 0) and
              (q.control_id = lot->lots[x].control_id or request->control_per_graph_ind = 0))
              ;display right sequence in header
            if (request->qc_result_type_flag = 1 )           ;011
              COL 1,   lot->lots[x].lot_sequence "###" ;011
            else
              COL 1,   holdstat->stats[x2].stat_cnt "###" ;011
            endif
              if (q.result_type_cd != alpha_cd)
                control_name = substring(1,13,lot->lots[x].control_name)
                COL 5,   control_name
                mean = holdstat->stats[x2].mean
                std_dev = holdstat->stats[x2].sd
                arg_raw_value =  (mean - (std_dev * 3))
                rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
                COL 20,  rslt "########;C"
                arg_raw_value =  (mean - (std_dev * 2))
                rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
                COL 30,  rslt "########;C"
                arg_raw_value =  (mean - std_dev)
                rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
                COL 40,  rslt "########;C"
                arg_raw_value =  (mean)
                rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
                COL 50,  rslt "########;C"
                arg_raw_value =  (mean + std_dev)
                rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
                COL 59,  rslt "########;C"
                arg_raw_value =  (mean + (std_dev * 2))
                rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
                COL 69,  rslt "########;C"
                arg_raw_value =  (mean + (std_dev * 3))
                rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
                COL 79,  rslt "########;C"
                if (request->qc_result_type_flag = 0)                                            ;007
                  COL 86,  lot->lots[x].lot_number
                  nFound = 0
                  for (z = 1 to lControlslist)
                    if(lot->lots[x].control_id = request->controls[z].control_id)
                      nfound = 1
                      z = lControlslist + 1
                    endif  
                  endfor  
                  if (lot->lots[x].control_id != request->control_id and nfound = 0)            
                    COL 109,  I18N_Captions->Yes
                  endif                            
                  if (holdstat->stats[x2].active_ind = 1)
                  ;if arl row is active then display lot expiration
                    COL 117, lot->lots[x].lot_expiration "@SHORTDATE4YR;;Q"
                  else   ;display arl end_effective_dt_tm
                    COL 117, holdstat->stats[x2].end_effective_dt_tm "@SHORTDATE4YR;;Q"
                  endif
                else
                  if (lot->lots[x].result_eval_flag = 0)                      ;017
                    COL 101  lot->lots[x].nbr_results "##############;C"    ;017
                  elseif (lot->lots[x].result_eval_flag = 1)                  ;017
                    COL 88   lot->lots[x].time_period_display               ;017
                  elseif (lot->lots[x].result_eval_flag = 2)                  ;017
                    COL 88   lot->lots[x].time_period_display               ;017
                    COL 101  lot->lots[x].nbr_results "##############;C"    ;017
                  endif
                endif                                                                            ;007
                ROW+1
              else
                if (lot->lots[x].task_assay_cd = q.task_assay_cd)
                  COL 1,   holdstat->stats[x2].stat_cnt "###"
                  COL 10,   lot->lots[x].control_name 
                  COL 27,  lot->lots[x].lot_number    
                  if (lot->lots[x].control_id != request->control_id) 
                    COL 50,  I18N_Captions->Yes                        
                  endif
                  if (holdstat->stats[x2].active_ind = 1)
                    COL 57, lot->lots[x].lot_expiration "@SHORTDATE4YR;;Q"     ;015
                  else   ;display arl end_effective_dt_tm                     ;015
                    COL 57, holdstat->stats[x2].end_effective_dt_tm "@SHORTDATE4YR;;Q"
                  endif
                  ROW+1
                endif
              endif  
            endif
          endif
      endfor
    endfor
      ROW+1
      COL 1 "PERF DATE/TIME  "
      if (q.result_type_cd != alpha_cd)
        if(request->use_actual_exp_val_ind = 1 AND nStatCnt = 1)
          arg_raw_value = (dStatMean - (dStatStdDev * 3))
          rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
          COL 20 rslt "########;C" 
          arg_raw_value = (dStatMean - (dStatStdDev * 2))
          rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
          COL 30 rslt "########;C" 
          arg_raw_value = (dStatMean - (dStatStdDev * 1))
          rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
          COL 40 rslt "########;C" 
          arg_raw_value = (dStatMean)                
          rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
          COL 50 rslt "########;C" 
          arg_raw_value = (dStatMean + (dStatStdDev * 1))
          rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
          COL 59 rslt "########;C" 
          arg_raw_value = (dStatMean + (dStatStdDev * 2))
          rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
          COL 69 rslt "########;C" 
          arg_raw_value = (dStatMean + (dStatStdDev * 3))
          rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
          COL 79 rslt "########;C" 
        else          
          COL 22,   I18N_Captions->neg3s             ;016
          COL 32,   I18N_Captions->neg2s             ;016
          COL 42,   I18N_Captions->neg1s             ;016
          COL 52,   I18N_Captions->Mean ;016
          COL 62,   I18N_Captions->1s ;016
          COL 72,   I18N_Captions->2s ;016
          COL 82,   I18N_Captions->3s ;016
        endif  
        COL 86,   I18N_Captions->RESULT_ ;016
        COL 93,   I18N_Captions->z_score   ;016    

        if (request->qc_result_type_flag = 0)                   ;017
          if (request->verify_ind = 1)
            COL 102, I18N_Captions->VERF_TECH ;016
          else
            COL 102,  I18N_Captions->PERF_TECH_ ;016
          endif
          COL 113,  I18N_Captions->NOTE_ ;016
          COL 119,  I18N_Captions->ACTION ;016
        else                                                    ;017
          COL 102,  I18N_Captions->NOTE_                       ;017
          COL 108,  I18N_Captions->ACTION                      ;017
        endif
        ROW+1
        COL 1,   "---------------"
        COL 20,  "--+---------+---------+---------+---------"
        COL 62,  "+---------+---------+--"
        COL 86,  "------ "
        COL 93,  "------- "
        if (request->qc_result_type_flag = 0)                   ;017
          COL 101  "----------- "
          COL 113, "---- "
          COL 118, "--------"
        else                                                    ;017
          COL 102, "---- "                                     ;017
          COL 107, "--------"                                  ;017
        endif                                                   ;017
        ROW+1
      else                                            ;015
        COL 25    I18N_Captions->Normal               ;016
        COL 43    I18N_Captions->Abnormal             ;016
        COL 61    I18N_Captions->Reviewed             ;016
        COL 80,   I18N_Captions->RESULT_              ;016
        if (request->verify_ind = 1)                  ;015
          COL 93, I18N_Captions->VERF_TECH ;016
        else
          COL 93,  I18N_Captions->PERF_TECH_ ;016
        endif
        COL 105,  I18N_Captions->NOTE_ ;016
        COL 111,  I18N_Captions->ACTION ;016
        ROW +1                                        ;015
        COL 1 "---------------   +--------+--------+--------+--------+--------+--------+"  ;015
        COL 77 "-------------  -----------  ----  --------"                                ;015
        ROW +1                                        ;015
      endif                                           ;015
    endif

HEAD q.qc_result_id
  disp_results = 1  ;true
  eval_bdate = datetimediff(q.perform_dt_tm, request->begin_date)
  eval_edate = datetimediff(q.perform_dt_tm, request->end_date)
  if ((eval_bdate >= 0 OR request->lot_to_date_ind = 1) and eval_edate <= 0)
    results_found = 1               ;020
    ;get the PDM stats sequence                              ;011
    if ( request->qc_result_type_flag = 1 )                  ;011
      for (x = 1 to lot_cnt)                               ;011
        if ( q.pdm_range_id = cumrec->cums[x].pdm_range_id ) ;011
             hold_lot_seq = lot->lots[x].lot_sequence        ;011
          x = lot_cnt + 1                                 ;011
        endif                                                ;011
      endfor                                               ;011
    endif                                                    ;011
   ;get the ARL stats sequence                              ;011
   if ( request->qc_result_type_flag = 0 )                  ;011
     for (x = 1 to s_cnt)                                 ;011
       if ( q.arl_id = holdstat->stats[x].arl_id )          ;011
         hold_lot_seq = holdstat->stats[x].stat_cnt      ;011
         x = s_cnt + 1                                   ;011
       endif                                                ;011
     endfor                                               ;011
   endif                                                    ;011
 endif

  if (request->qc_result_type_flag = 0)
    ;calculate the lot statistics
    for (x = 1 to cumlot_cnt)
      if (q.lot_id = cumlot->cumlots[x].lot_id
          and q.task_assay_cd = cumlot->cumlots[x].task_assay_cd
          and q.service_resource_cd = cumlot->cumlots[x].service_resource_cd)
        if ((eval_bdate >= 0 OR request->lot_to_date_ind = 1) and eval_edate <= 0)                             ;015
          if (q.result_status_cd = result_status_accept_cd)                ;015
            cumlot->cumlots[x].accept_cnt = cumlot->cumlots[x].accept_cnt + 1   ;015
          elseif (q.result_status_cd = result_status_verified_cd)          ;015
                  cumlot->cumlots[x].verify_cnt = cumlot->cumlots[x].verify_cnt + 1   ;015
          elseif (q.result_status_cd = result_status_auto_verf_cd)         ;015
                  cumlot->cumlots[x].verify_cnt = cumlot->cumlots[x].verify_cnt + 1   ;015
          elseif (q.result_status_cd = result_status_changed_cd)           ;015
                  cumlot->cumlots[x].change_cnt = cumlot->cumlots[x].change_cnt + 1   ;015
          elseif (q.result_status_cd = result_status_rejected_cd)          ;015
                  cumlot->cumlots[x].reject_cnt = cumlot->cumlots[x].reject_cnt + 1   ;015
          endif                                                            ;015
            cumlot->cumlots[x].total_cnt = cumlot->cumlots[x].total_cnt + 1  ;015
        endif                                                                ;015
        if (q.result_type_cd != alpha_cd)
          cumlot->cumlots[x].ltd_cum_mean = cumlot->cumlots[x].ltd_cum_mean + q.result_value_numeric
          cumlot->cumlots[x].ltd_cum_sum_sqr = cumlot->cumlots[x].ltd_cum_sum_sqr + q.result_value_numeric ** 2
          cumlot->cumlots[x].ltd_cum_count = cumlot->cumlots[x].ltd_cum_count + 1
        else
          if (q.result_process_cd = ALP_NORMAL_CD or q.result_process_cd = WITHIN_RANGE_CD)
            cumlot->cumlots[x].ltd_normal_cnt = cumlot->cumlots[x].ltd_normal_cnt + 1
            cumlot->cumlots[x].ltd_cum_count = cumlot->cumlots[x].ltd_cum_count + 1
          elseif (q.result_process_cd = ALP_ABNORMAL_CD)
            cumlot->cumlots[x].ltd_abnormal_cnt = cumlot->cumlots[x].ltd_abnormal_cnt + 1
            cumlot->cumlots[x].ltd_cum_count = cumlot->cumlots[x].ltd_cum_count + 1
          elseif (q.result_process_cd = ALP_REVIEW_CD)
            cumlot->cumlots[x].ltd_review_cnt = cumlot->cumlots[x].ltd_review_cnt + 1
            cumlot->cumlots[x].ltd_cum_count = cumlot->cumlots[x].ltd_cum_count + 1
          endif
        endif
      endif
    endfor
  endif


  for (x = 1 to cum_cnt)
    if (((request->qc_result_type_flag = 0 and            
        q.lot_id = cumrec->cums[x].lot_id
       and cumrec->cums[x].stat_cnt = hold_lot_seq)       
       or (request->qc_result_type_flag = 1 and           
       q.pdm_range_id = cumrec->cums[x].pdm_range_id      
       and cumrec->cums[x].lot_sequence = hold_lot_seq))  
       and q.task_assay_cd = cumrec->cums[x].task_assay_cd
       and q.service_resource_cd = cumrec->cums[x].service_resource_cd) ;cms
      if (q.result_type_cd != alpha_cd)
        if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
             cumrec->cums[x].cum_mean = cumrec->cums[x].cum_mean + q.result_value_numeric
             cumrec->cums[x].cum_sum_sqr = cumrec->cums[x].cum_sum_sqr + q.result_value_numeric ** 2
             cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
        endif
      else
        if (q.result_process_cd = ALP_NORMAL_CD or q.result_process_cd = WITHIN_RANGE_CD)
          if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
            cumrec->cums[x].normal_cnt = cumrec->cums[x].normal_cnt + 1
            cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
          endif
        elseif (q.result_process_cd = ALP_ABNORMAL_CD)
          if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
            cumrec->cums[x].abnormal_cnt = cumrec->cums[x].abnormal_cnt + 1
            cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
          endif
        elseif (q.result_process_cd = ALP_REVIEW_CD)
          if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
            cumrec->cums[x].review_cnt = cumrec->cums[x].review_cnt + 1
            cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
          endif
        endif
      endif
    endif
  endfor

  if ((eval_bdate >= 0 or request->lot_to_date_ind = 1)and eval_edate <= 0)
    if (ROW > 58)
      BREAK
    endif

    COL 1,  q.perform_dt_tm "@SHORTDATE4YR;;Q"                
    COL 12, q.perform_dt_tm "@TIMENOSECONDS;;M" 
    if (q.result_type_cd != alpha_cd)
      COL 22, "|"
      COL 32, "|"
      COL 42, "|"
      COL 52, "|"
      COL 62, "|"
      COL 72, "|"
      COL 82, "|"
      value = (q.result_value_numeric - q.mean)/q.statistical_std_dev
      if (value > 3.0)
        svalue = "5.0"
      elseif (value < -3.0)
        svalue = "-5.0"
      else
        svalue = "            "
        svalue = trim(format(value, "######.#"), 3)
      endif
        case (svalue)
          of "-3.0":
            COL 20, hold_lot_seq "###;R"
            COL 23, negpt30
          of "-2.9":
            COL 21, hold_lot_seq "###;R"
            COL 24, negpt29
          of "-2.8":
            COL 22, hold_lot_seq "###;R"
            COL 25, negpt28
          of "-2.7":
            COL 23, hold_lot_seq "###;R"
            COL 26, negpt27
          of "-2.6":
            COL 24, hold_lot_seq "###;R"
            COL 27, negpt26
          of "-2.5":
            COL 25, hold_lot_seq "###;R"
            COL 28, negpt25
          of "-2.4":
            COL 26, hold_lot_seq "###;R"
            COL 29, negpt24
          of "-2.3":
            COL 27, hold_lot_seq "###;R"
            COL 30, negpt23
          of "-2.2":
            COL 28, hold_lot_seq "###;R"
            COL 31, negpt22
          of "-2.1":
            COL 29, hold_lot_seq "###;R"
            COL 32, negpt21
          of "-2.0":
            COL 30, hold_lot_seq "###;R"
            COL 33, negpt20
          of "-1.9":
            COL 31, hold_lot_seq "###;R"
            COL 34, negpt19
          of "-1.8":
            COL 32, hold_lot_seq "###;R"
            COL 35, negpt18
          of "-1.7":
            COL 33, hold_lot_seq "###;R"
            COL 36, negpt17
          of "-1.6":
            COL 34, hold_lot_seq "###;R"
            COL 37, negpt16
          of "-1.5":
            COL 35, hold_lot_seq "###;R"
            COL 38, negpt15
          of "-1.4":
            COL 36, hold_lot_seq "###;R"
            COL 39, negpt14
          of "-1.3":
            COL 37, hold_lot_seq "###;R"
            COL 40, negpt13
          of "-1.2":
            COL 38, hold_lot_seq "###;R"
            COL 41, negpt12
          of "-1.1":
            COL 39, hold_lot_seq "###;R"
            COL 42, negpt11
          of "-1.0":
            COL 40, hold_lot_seq "###;R"
            COL 43, negpt10
          of "-0.9":
            COL 41, hold_lot_seq "###;R"
            COL 44, negpt9
          of "-0.8":
            COL 42, hold_lot_seq "###;R"
            COL 45, negpt8
          of "-0.7":
            COL 43, hold_lot_seq "###;R"
            COL 46, negpt7
          of "-0.6":
            COL 44, hold_lot_seq "###;R"
            COL 47, negpt6
          of "-0.5":
            COL 45, hold_lot_seq "###;R"
            COL 48, negpt5
          of "-0.4":
            COL 46, hold_lot_seq "###;R"
            COL 49, negpt4
          of "-0.3":
            COL 47, hold_lot_seq "###;R"
            COL 50, negpt3
          of "-0.2":
            COL 48, hold_lot_seq "###;R"
            COL 51, negpt2
          of "-0.1":
            COL 50, hold_lot_seq "###;R"
          of "0.0":
            COL 51, hold_lot_seq "###;R"
          of "-0.0":
            COL 51, hold_lot_seq "###;R"
          of "3.0":
            COL 53, pospt30
            COL 82, hold_lot_seq "###;L"
          of "2.9":
            COL 53, pospt29
            COL 81, hold_lot_seq "###;L"
          of "2.8":
            COL 53, pospt28
            COL 80, hold_lot_seq "###;L"
          of "2.7":
            COL 53, pospt27
            COL 79, hold_lot_seq "###;L"
          of "2.6":
            COL 53, pospt26
            COL 78, hold_lot_seq "###;L"
          of "2.5":
            COL 53, pospt25
            COL 77, hold_lot_seq "###;L"
          of "2.4":
            COL 53, pospt24
            COL 76, hold_lot_seq "###;L"
          of "2.3":
            COL 53, pospt23
            COL 75, hold_lot_seq "###;L"
          of "2.2":
            COL 53, pospt22
            COL 74, hold_lot_seq "###;L"
          of "2.1":
            COL 53, pospt21
            COL 73, hold_lot_seq "###;L"
          of "2.0":
            COL 53, pospt20
            COL 72, hold_lot_seq "###;L"
          of "1.9":
            COL 53, pospt19
            COL 71, hold_lot_seq "###;L"
          of "1.8":
            COL 53, pospt18
            COL 70, hold_lot_seq "###;L"
          of "1.7":
            COL 53, pospt17
            COL 69, hold_lot_seq "###;L"
          of "1.6":
            COL 53, pospt16
            COL 68, hold_lot_seq "###;L"
          of "1.5":
            COL 53, pospt15
            COL 67, hold_lot_seq "###;L"
          of "1.4":
            COL 53, pospt14
            COL 66, hold_lot_seq "###;L"
          of "1.3":
            COL 53, pospt13
            COL 65, hold_lot_seq "###;L"
          of "1.2":
            COL 53, pospt12
            COL 64, hold_lot_seq "###;L"
          of "1.1":
            COL 53, pospt11
            COL 63, hold_lot_seq "###;L"
          of "1.0":
            COL 53, pospt10
            COL 62, hold_lot_seq "###;L"
          of "0.9":
            COL 53, pospt9
            COL 61, hold_lot_seq "###;L"
          of "0.8":
            COL 53, pospt8
            COL 60, hold_lot_seq "###;L"
          of "0.7":
            COL 53, pospt7
            COL 59, hold_lot_seq "###;L"
          of "0.6":
            COL 53, pospt6
            COL 58, hold_lot_seq "###;L"
          of "0.5":
            COL 53, pospt5
            COL 57, hold_lot_seq "###;L"
          of "0.4":
            COL 53, pospt4
            COL 56, hold_lot_seq "###;L"
          of "0.3":
            COL 53, pospt3
            COL 55, hold_lot_seq "###;L"
          of "0.2":
            COL 53, pospt2
            COL 54, hold_lot_seq "###;L"
          of "0.1":
            COL 53, hold_lot_seq "###;L"
          of "5.0":
            COL 53, posro
            COL 82, hold_lot_seq "###;L"
          of "-5.0":
            COL 20, hold_lot_seq "###;R"
            COL 23, negro
        endcase
        arg_raw_value = q.result_value_numeric
        rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
       ;print out the actual result here
        COL 85, rslt "######;R"
    else
      COL 19 "|"
      COL 37 "|"
      COL 55 "|"
      COL 73 "|"
      if (q.result_process_cd = ALP_NORMAL_CD or q.result_process_cd = WITHIN_RANGE_CD)
        COL 27  hold_lot_seq "###;R"
      elseif (q.result_process_cd = ALP_ABNORMAL_CD)
        COL 45  hold_lot_seq "###;R"
      elseif (q.result_process_cd = ALP_REVIEW_CD)
        COL 63  hold_lot_seq "###;R"
      endif
      COL 77, q.result_value_alpha "#############;L"
    endif
   ;get the name of perf/verf tech

    if ((q.perform_personnel_id = 0) and (request->verify_ind = 0))            ;018
      fullname = I18N_Captions->instrument
    else
      if (request->verify_ind = 1)
        fullname = SUBSTRING(1,11,p2.name_full_formatted)
      else
        fullname = SUBSTRING(1,11,p1.name_full_formatted)
      endif
    endif
    ;get the comment sequence if exists
    commentnumber = NULL
    for (x = 1 to comment_cnt)
      if (comment->comments[x].qc_result_id = q.qc_result_id)
        if (comment->comments[x].nbr_comments > 0)
          commentnumber = comment->comments[x].comment_sequence        ;015
        else
          x = comment_cnt + 1
        endif
      endif
    endfor

    resultstatus = SUBSTRING(1,13,trim(UAR_GET_CODE_DISPLAY(q.result_status_cd),3))        ;002
    if (q.result_type_cd != alpha_cd)
      arg_raw_value = value
      rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_stat_dec_places, 0, arg_raw_value)
      ;print out the z-score here at col 93
      rslt =  FormatStatResult(rslt)          ;015
      COL 93   rslt "#######;R"
      if (request->qc_result_type_flag = 0)                        ;017
        COL 101  fullname "###########"
        if (commentnumber > 0)                                    ;015
          COL 113, commentnumber "###"                          ;015
        endif                                                     ;015
        COL 118  resultstatus "#############"
      else                                                         ;017
        if (commentnumber > 0)                                    ;017
          COL 102, commentnumber "###"                          ;017
        endif                                                     ;017
        COL 107  resultstatus "#############"                     ;017
      endif                                                        ;017
    else                                                        ;015
      COL 92 fullname "###########"                             ;015
      if (commentnumber > 0)                                    ;015
        COL 105, commentnumber "###"                           ;015
      endif                                                     ;015
      COL 111  resultstatus "#############"                     ;015
    endif                                                       ;015
    ROW+1
  endif

DETAIL
  row + 0
  already_disp_ind = 0
         
FOOT break_lot_pdm
  if(request->lot_per_graph_ind = 1 and already_disp_ind = 0)
%i cclsource:glb_rpt_levy_jennings_foot.inc         
    already_disp_ind = 1
    results_found=0												;025
  endif
  row + 0       

FOOT q.control_id
  if(request->control_per_graph_ind = 1 and already_disp_ind = 0) 
%i cclsource:glb_rpt_levy_jennings_foot.inc
    already_disp_ind = 1
  endif

FOOT q.task_assay_cd
  if(request->lot_per_graph_ind = 0 and request->control_per_graph_ind = 0
    and already_disp_ind = 0)
%i cclsource:glb_rpt_levy_jennings_foot.inc
    already_disp_ind = 1
  endif 
  row + 0

FOOT q.service_resource_cd	
if(already_disp_ind = 0)								;025
%i cclsource:glb_rpt_levy_jennings_foot.inc					;025
endif
ROW+0														;025

ROW+1
  
FOOT PAGE
  COL 1, LINE

FOOT REPORT
  row + 2

call center(uar_i18ngetmessage(i18nHandle,"key_67","##### END OF REPORT #####"), 0, 125)  ;016
WITH
  outerjoin = d5,
  dontcare = cm, 
  outerjoin = d4,
  outerjoin = d1,
  dontcare = qre,
  outerjoin = d2,
  nocounter

set error_check = ERROR(sErrorMsg,0)   ;get error message
  if (error_check != 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
    go to exit_script
  endif

  if (curqual = 0)
    go to results_failed
  else
    set reply->status_data->status = "S"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = "Successful"
    if (size(trim(request->output_dist)) > 0)
      if(validate(ljc_req->output_dist) = 0)
        SET spool = value(reply->file_name) value(request->output_dist) 
      else
        set spool = value(reply->file_name) value(ljc_req->output_dist)
      endif
    endif
  endif  
go to exit_script

/********************************************************************/
/* Executed if qc_result table get is unsuccessful                  */
/********************************************************************/
#results_failed
  set reply->status_data->subeventstatus[1]->operationname = "get"
  set reply->status_data->subeventstatus[1]->operationstatus = "Z"
  set reply->status_data->subeventstatus[1]->targetobjectname = "table"
  set reply->status_data->subeventstatus[1]->targetObjectValue = "No records found"
  set reply->status_data->status = "Z"
  
  go to exit_script

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
#exit_script
END GO

;Generated by GNU enscript 1.6.4.
