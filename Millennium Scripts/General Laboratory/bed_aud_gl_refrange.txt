 ;;Solution_Test/script/Bedrock/bed_aud_gl_refrange/bed_aud_gl_refrange.prg Turn on black mode

 /*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:        bed_aud_gl_refrange.prg
        Object name:             bed_aud_gl_refrange
        Request #:               4420569
 
        Product:                 Bedrock
        Product Team:            Bedrock
        HNA Version:             500
        CCL Version:             8.0
 
        Program purpose:
 
        Tables read:
 
        Tables updated:
 
        Executing from:          BEDROCK
 
        Special Notes:
 
 
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 10/02/08 Kelli Wade           1) Correct value in Alpha Response/Chart Name column
;										2) Add MDI Alias, Unique Identifier, and Vocabulary columns
;										   (changes to reply->collist[*] and reply->rowlist[row_nbr].celllist[*] not modded)
;	  002 01/05/09 Kelli Wade			Allow filtering
;	  003 12/11/09 Kelli Wade			Show digits after decimal point for delta value
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program bed_aud_gl_refrange:dba go
create program bed_aud_gl_refrange:dba
 
if (not (validate (request,0)))
 record request
  (
;002    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
	1 service_resources[*]			;002
	  2 code_value = f8				;002
;002    1 paramlist[*]
;002      2 param_type_mean = vc
;002      2 pdate1 = dq8
;002      2 pdate2 = dq8
;002      2 vlist[*]
;002        3 dbl_value = f8
;002        3 string_value = vc
  )
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*]
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1  high_volume_flag = i2
    1  output_filename = vc
    1  run_status_flag = i2
    1  statlist[*]
       2 statistic_meaning = vc
       2 status_flag = i2
       2 qualifying_items = i4
       2 total_items = i4
    1  status_data
      2  status  =  C1
      2  SUBEVENTSTATUS [ 1 ]
        3  OPERATIONNAME  =  C15
        3  OPERATIONSTATUS  =  C1
        3  TARGETOBJECTNAME  =  C15
        3  TARGETOBJECTVALUE  =  C100
  )
endif
 
record temp
( 1 dlist[*]
    2 activity_type_cd = f8
    2 activity_type_disp = vc
    2 task_assay_cd = f8
    2 dtaname = vc
    2 dtadesc = vc
    2 dta_result_type_cd = f8
    2 dta_result_type = vc
    2 norrf[*]
      3 service_resource_cd = f8
      3 service_resource = vc
      3 sr_result_type_cd = f8
      3 sr_result_type = vc
    2 rrf[*]
      3 skip_ind = i2
      3 reference_range_factor_id = f8
      3 service_resource_cd = f8
      3 service_resource = vc
      3 unknown_age_ind = i2
      3 unknown_age_str = vc
      3 sex_cd = f8
      3 sex = vc
      3 species_cd = f8
      3 species = vc
      3 specimen_type_cd = f8
      3 specimen_type = vc
      3 age_from = i4
      3 af_disp = vc
      3 age_from_units_cd = f8
      3 age_from_unit = vc
      3 age_to = i4
      3 at_disp = vc
      3 age_to_units_cd = f8
      3 age_to_unit = vc
      3 alpha_response_ind = i2
      3 normal_low = vc
      3 nl_disp = vc
      3 normal_high = vc
      3 nh_disp = vc
      3 normal_ind = i2
      3 critical_low = vc
      3 cl_disp = vc
      3 critical_high = vc
      3 ch_disp = vc
      3 critical_ind = i2
      3 review_low = vc
      3 rl_disp = vc
      3 review_high = vc
      3 rh_disp = vc
      3 review_ind = i2
      3 linear_low = vc
      3 ll_disp = vc
      3 linear_high = vc
      3 lh_disp = vc
      3 linear_ind = i2
      3 feasible_low = vc
      3 fl_disp = vc
      3 feasible_high = vc
      3 fh_disp = vc
      3 feasible_ind = i2
      3 dilute = vc
      3 units_cd = f8
      3 units = vc
      3 sr_result_type_cd = f8
      3 sr_result_type = vc
      3 max_digits = i4
      3 min_decimal_places = i4
      3 min_digits = i4
      3 delta_check_type_cd = f8
      3 delta_check_type_disp = vc
      3 delta_time_value = i4
      3 delta_time_unit = vc
;003      3 delta_value = f8
      3 delta_value = vc			;003
      3 delta_value_disp = vc		;003
      3 al[*]
        4 nomenclature_id = f8
        4 mnemonic = vc
        4 term = vc
        4 long_desc = vc
        4 default = vc
        4 use_units = vc
        4 result_process_cd = f8
        4 result_process = vc
        4 reference = vc
        4 vocab = vc					;001
)
 
 
set serv_res_cnt = size(request->service_resources, 5)		;002
 
 
set minutes_per_year = 525600
set minutes_per_month = 43200
set minutes_per_week = 10080
set minutes_per_day = 1440
set minutes_per_hour = 60
set minutes_per_minute = 1
 
declare glb_disp = vc
set glb_cd = 0.0
select into "nl:"
from code_value c
plan c
  where c.code_set = 106
    and c.cdf_meaning = "GLB"
    and c.active_ind = 1
detail
  glb_cd = c.code_value
  glb_disp = c.display
with nocounter
 
declare bb_disp = vc
set bb_cd = 0.0
select into "nl:"
from code_value c
plan c
  where c.code_set = 106
    and c.cdf_meaning = "BB"
    and c.active_ind = 1
detail
  bb_cd = c.code_value
  bb_disp = c.display
with nocounter
 
declare days_cd = f8
declare hours_cd = f8
declare minutes_cd = f8
declare months_cd = f8
declare weeks_cd = f8
declare years_cd = f8
set days_cd = -1.0
set hours_cd = -1.0
set minutes_cd = -1.0
set months_cd = -1.0
set weeks_cd = -1.0
set years_cd = -1.0
select into "nl:"
from code_value c
plan c
  where c.code_set = 340
    and c.active_ind = 1
detail
  if (c.cdf_meaning = "DAYS")
    days_cd = c.code_value
  elseif (c.cdf_meaning = "HOURS")
    hours_cd = c.code_value
  elseif (c.cdf_meaning = "MINUTES")
    minutes_cd = c.code_value
  elseif (c.cdf_meaning = "MONTHS")
    months_cd = c.code_value
  elseif (c.cdf_meaning = "WEEKS")
    weeks_cd = c.code_value
  elseif (c.cdf_meaning = "YEARS")
    years_cd = c.code_value
  endif
with nocounter
 
set tcnt = 0
set rcnt = 0
set nrcnt = 0
set acnt = 0
set x = 0
set y = 0
set z = 0
 
 
 
 
set high_volume_cnt = 0
if (request->skip_volume_check_ind = 0)
	/*beginning mod 002*/
	if (serv_res_cnt > 0)
		select into "nl:"
		from discrete_task_assay dta,
			 reference_range_factor rrf
		plan dta
			where dta.activity_type_cd = glb_cd
			  and dta.active_ind = 1
		join rrf
			where rrf.task_assay_cd = dta.task_assay_cd
			  and rrf.active_ind = 1
		detail
			if (rrf.service_resource_cd > 0)
				found_ind = 0
				for (f = 1 to serv_res_cnt)
					if (rrf.service_resource_cd = request->service_resources[f].code_value)
						high_volume_cnt = high_volume_cnt + 1
					endif
				endfor
			else
				high_volume_cnt = high_volume_cnt + 1
			endif
		with nocounter
		call echo(build("********** high_volume_cnt =",high_volume_cnt))
		if (high_volume_cnt > 60000)
			set reply->high_volume_flag = 2
			go to exit_script
		elseif (high_volume_cnt > 30000)
			set reply->high_volume_flag = 1
			go to exit_script
		endif
	else
	/*end mod 002*/
		select into "nl:"
			hv_cnt = count(*)
		from discrete_task_assay dta
		plan dta
			where dta.activity_type_cd = glb_cd
			and dta.active_ind = 1
		detail
			high_volume_cnt = hv_cnt
		with nocounter
		call echo(high_volume_cnt)
		if (high_volume_cnt > 1000)
			set reply->high_volume_flag = 2
			go to exit_script
		elseif (high_volume_cnt > 600)
			set reply->high_volume_flag = 1
			go to exit_script
		endif
	endif ;002
endif
 
 
 
 
select into "nl:"
from discrete_task_assay dta,
     code_value cvdta,
     code_value rt,
     profile_task_r ptr,
     order_catalog oc
plan dta
  where dta.active_ind = 1
    and dta.activity_type_cd = glb_cd
join cvdta
  where cvdta.code_value = dta.task_assay_cd
join rt
  where rt.code_value = dta.default_result_type_cd
join ptr
  where ptr.task_assay_cd = dta.task_assay_cd
join oc
  where oc.catalog_cd = ptr.catalog_cd
    and oc.active_ind = 1
order by dta.activity_type_cd, cnvtupper(cvdta.display),dta.task_assay_cd
head report
  tcnt = 0
head dta.task_assay_cd
  tcnt = tcnt + 1
  stat = alterlist(temp->dlist,tcnt)
  temp->dlist[tcnt].activity_type_cd = dta.activity_type_cd
  if (dta.activity_type_cd = glb_cd)
    temp->dlist[tcnt].activity_type_disp = glb_disp
  else
    temp->dlist[tcnt].activity_type_disp = bb_disp
  endif
  temp->dlist[tcnt].task_assay_cd = dta.task_assay_cd
  temp->dlist[tcnt].dtaname = trim(cvdta.display)
  temp->dlist[tcnt].dtadesc = trim(cvdta.description)
  temp->dlist[tcnt].dta_result_type_cd = dta.default_result_type_cd
  temp->dlist[tcnt].dta_result_type = rt.display
with nocounter ;, maxqual(ptr,1)
 
 
if (tcnt = 0 )
  go to skip_processing
endif
 
 
select into "nl:"
     servres = if (cvts.code_value > 0 and cvts.display > " ")
                 cvts.display
               else
                 "All                                   "
               endif
from (dummyt d with seq = tcnt),
     reference_range_factor rrf,
     code_value cvts,
     code_value cvs,
     code_value cvaf,
     code_value cvat,
     code_value cvu,
     code_value cvspecies,
     code_value cvspectype,
     code_value cvdelta
plan d
join rrf
  where rrf.task_assay_cd = temp->dlist[d.seq].task_assay_cd
    and rrf.active_ind = 1
join cvts
  where cvts.code_value = rrf.service_resource_cd
join cvs
  where cvs.code_value = rrf.sex_cd
join cvaf
  where cvaf.code_value = rrf.age_from_units_cd
join cvat
  where cvat.code_value = rrf.age_to_units_cd
join cvu
  where cvu.code_value = rrf.units_cd
join cvspecies
  where cvspecies.code_value = rrf.species_cd
join cvspectype
  where cvspectype.code_value = rrf.specimen_type_cd
join cvdelta
  where cvdelta.code_value = rrf.delta_check_type_cd
order by d.seq, servres, rrf.precedence_sequence, cvts.display
head d.seq
  rcnt = 0
detail
 
	/*beginning mod 002*/
	found_ind = 1
	;;;;;;;;;; if filtering, then check if the service resource matches one of those sent in request ;;;;;;;;;;
	if (serv_res_cnt > 0)
		if (rrf.service_resource_cd > 0)
			found_ind = 0
			for (f = 1 to serv_res_cnt)
				if (rrf.service_resource_cd = request->service_resources[f].code_value)
					found_ind = 1
				endif
			endfor
		else
			;;;;; always put "all" rows in the temp structure for checking later ;;;;;
			found_ind = 1
		endif
	endif
	/*end mod 002*/
 
	if (found_ind = 1)	;002
	  rcnt = rcnt + 1
	  stat = alterlist(temp->dlist[d.seq].rrf,rcnt)
	  temp->dlist[d.seq].rrf[rcnt].skip_ind = 0
	  temp->dlist[d.seq].rrf[rcnt].reference_range_factor_id
	                                     = rrf.reference_range_factor_id
	  temp->dlist[d.seq].rrf[rcnt].service_resource_cd = rrf.service_resource_cd
	  if (cvts.code_value > 0
	  and cvts.display > " ")
	    temp->dlist[d.seq].rrf[rcnt].service_resource = trim(cvts.display)
	  else
	    temp->dlist[d.seq].rrf[rcnt].service_resource = "All"
	  endif
	  temp->dlist[d.seq].rrf[rcnt].unknown_age_ind = rrf.unknown_age_ind
	  if (rrf.unknown_age_ind = 1)
	     temp->dlist[d.seq].rrf[rcnt].unknown_age_str = "Yes"
	  elseif (rrf.unknown_age_ind = 0)
	     temp->dlist[d.seq].rrf[rcnt].unknown_age_str = " "
	  endif
	  temp->dlist[d.seq].rrf[rcnt].sex_cd = rrf.sex_cd
	  temp->dlist[d.seq].rrf[rcnt].species_cd = rrf.species_cd
	  temp->dlist[d.seq].rrf[rcnt].specimen_type_cd = rrf.specimen_type_cd
	  temp->dlist[d.seq].rrf[rcnt].age_from = rrf.age_from_minutes
	  temp->dlist[d.seq].rrf[rcnt].age_from_units_cd = rrf.age_from_units_cd
	  if (rrf.age_from_units_cd = years_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_from
	      = (rrf.age_from_minutes / minutes_per_year)
	  elseif (rrf.age_from_units_cd = months_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_from
	      = (rrf.age_from_minutes / minutes_per_month)
	  elseif (rrf.age_from_units_cd = weeks_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_from
	      = (rrf.age_from_minutes / minutes_per_week)
	  elseif (rrf.age_from_units_cd = days_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_from
	      = (rrf.age_from_minutes / minutes_per_day)
	  elseif (rrf.age_from_units_cd = hours_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_from
	    = (rrf.age_from_minutes / minutes_per_hour)
	  endif
	  temp->dlist[d.seq].rrf[rcnt].age_to = rrf.age_to_minutes
	  temp->dlist[d.seq].rrf[rcnt].age_to_units_cd = rrf.age_to_units_cd
	  if (rrf.age_to_units_cd = years_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_to
	      = (rrf.age_to_minutes / minutes_per_year)
	  elseif (rrf.age_to_units_cd = months_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_to
	      = (rrf.age_to_minutes / minutes_per_month)
	  elseif (rrf.age_to_units_cd = weeks_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_to
	      = (rrf.age_to_minutes / minutes_per_week)
	  elseif (rrf.age_to_units_cd = days_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_to
	      = (rrf.age_to_minutes / minutes_per_day)
	  elseif (rrf.age_to_units_cd = hours_cd)
	    temp->dlist[d.seq].rrf[rcnt].age_to
	    = (rrf.age_to_minutes / minutes_per_hour)
	  endif
	  temp->dlist[d.seq].rrf[rcnt].alpha_response_ind = rrf.alpha_response_ind
	  temp->dlist[d.seq].rrf[rcnt].normal_ind = rrf.normal_ind
	  if (rrf.normal_ind = 1)
	     temp->dlist[d.seq].rrf[rcnt].normal_low
	                   = format(rrf.normal_low,"##########.##########;I;f")
	  elseif (rrf.normal_ind = 2)
	     temp->dlist[d.seq].rrf[rcnt].normal_high
	                   = format(rrf.normal_high,"##########.##########;I;f")
	  elseif (rrf.normal_ind = 3)
	     temp->dlist[d.seq].rrf[rcnt].normal_low
	                   = format(rrf.normal_low,"##########.##########;I;f")
	     temp->dlist[d.seq].rrf[rcnt].normal_high
	                   = format(rrf.normal_high,"##########.##########;I;f")
	  endif
	  temp->dlist[d.seq].rrf[rcnt].critical_ind = rrf.critical_ind
	  if (rrf.critical_ind = 1)
	     temp->dlist[d.seq].rrf[rcnt].critical_low
	                   = format(rrf.critical_low,"##########.##########;I;f")
	  elseif (rrf.critical_ind = 2)
	     temp->dlist[d.seq].rrf[rcnt].critical_high
	                   = format(rrf.critical_high,"##########.##########;I;f")
	  elseif (rrf.critical_ind = 3)
	     temp->dlist[d.seq].rrf[rcnt].critical_low
	                   = format(rrf.critical_low,"##########.##########;I;f")
	     temp->dlist[d.seq].rrf[rcnt].critical_high
	                   = format(rrf.critical_high,"##########.##########;I;f")
	  endif
	  temp->dlist[d.seq].rrf[rcnt].review_ind = rrf.review_ind
	  if (rrf.review_ind = 1)
	     temp->dlist[d.seq].rrf[rcnt].review_low
	                   = format(rrf.review_low,"##########.##########;I;f")
	  elseif (rrf.review_ind = 2)
	     temp->dlist[d.seq].rrf[rcnt].review_high
	                   = format(rrf.review_high,"##########.##########;I;f")
	  elseif (rrf.review_ind = 3)
	     temp->dlist[d.seq].rrf[rcnt].review_low
	                   = format(rrf.review_low,"##########.##########;I;f")
	     temp->dlist[d.seq].rrf[rcnt].review_high
	                   = format(rrf.review_high,"##########.##########;I;f")
	  endif
	  temp->dlist[d.seq].rrf[rcnt].linear_ind = rrf.linear_ind
	  if (rrf.linear_ind = 1)
	     temp->dlist[d.seq].rrf[rcnt].linear_low
	                   = format(rrf.linear_low,"##########.##########;I;f")
	  elseif (rrf.linear_ind = 2)
	     temp->dlist[d.seq].rrf[rcnt].linear_high
	                   = format(rrf.linear_high,"##########.##########;I;f")
	  elseif (rrf.linear_ind = 3)
	     temp->dlist[d.seq].rrf[rcnt].linear_low
	                   = format(rrf.linear_low,"##########.##########;I;f")
	     temp->dlist[d.seq].rrf[rcnt].linear_high
	                   = format(rrf.linear_high,"##########.##########;I;f")
	  endif
	  temp->dlist[d.seq].rrf[rcnt].feasible_ind = rrf.feasible_ind
	  if (rrf.feasible_ind = 1)
	     temp->dlist[d.seq].rrf[rcnt].feasible_low
	                   = format(rrf.feasible_low,"##########.##########;I;f")
	  elseif (rrf.feasible_ind = 2)
	     temp->dlist[d.seq].rrf[rcnt].feasible_high
	                   = format(rrf.feasible_high,"##########.##########;I;f")
	  elseif (rrf.feasible_ind = 3)
	     temp->dlist[d.seq].rrf[rcnt].feasible_low
	                   = format(rrf.feasible_low,"##########.##########;I;f")
	     temp->dlist[d.seq].rrf[rcnt].feasible_high
	                   = format(rrf.feasible_high,"##########.##########;I;f")
	  endif
	  if (rrf.dilute_ind = 1)
	    temp->dlist[d.seq].rrf[rcnt].dilute = "X"
	  endif
	  temp->dlist[d.seq].rrf[rcnt].units_cd = rrf.units_cd
	  if (cvs.code_value > 0)
	    temp->dlist[d.seq].rrf[rcnt].sex = trim(cvs.display)
	  else
	    temp->dlist[d.seq].rrf[rcnt].sex = "All"
	  endif
	  if (cvaf.code_value > 0)
	    temp->dlist[d.seq].rrf[rcnt].age_from_unit = trim(cvaf.display)
	  endif
	  if (cvat.code_value > 0)
	    temp->dlist[d.seq].rrf[rcnt].age_to_unit = trim(cvat.display)
	  endif
	  if (cvu.code_value > 0)
	    temp->dlist[d.seq].rrf[rcnt].units = trim(cvu.display)
	  endif
	  if (cvspecies.code_value > 0)
	    temp->dlist[d.seq].rrf[rcnt].species = trim(cvspecies.display)
	  endif
	  if (cvspectype.code_value > 0)
	    temp->dlist[d.seq].rrf[rcnt].specimen_type = trim(cvspectype.display)
	  else
	    temp->dlist[d.seq].rrf[rcnt].specimen_type = "All"
	  endif
	  if (cvdelta.code_value > 0)
	    temp->dlist[d.seq].rrf[rcnt].delta_check_type_disp = trim(cvdelta.display)
;003	    temp->dlist[d.seq].rrf[rcnt].delta_value = rrf.delta_value
	    temp->dlist[d.seq].rrf[rcnt].delta_value								;003
	                   = format(rrf.delta_value,"##########.##########;I;f")	;003
	    if (rrf.delta_minutes > 0)
	      rmdr = 0
	      rmdr = mod(rrf.delta_minutes,1440)
	      if (rmdr = 0)
	        temp->dlist[d.seq].rrf[rcnt].delta_time_value = (rrf.delta_minutes/1440)
	        temp->dlist[d.seq].rrf[rcnt].delta_time_unit = "Days"
	      else
	        rmdt = 0
	        rmdr = mod(rrf.delta_minutes,60)
	        if (rmdr = 0)
	          temp->dlist[d.seq].rrf[rcnt].delta_time_value = (rrf.delta_minutes/60)
	          temp->dlist[d.seq].rrf[rcnt].delta_time_unit = "Hrs"
	        else
	          temp->dlist[d.seq].rrf[rcnt].delta_time_value = rrf.delta_minutes
	          temp->dlist[d.seq].rrf[rcnt].delta_time_unit = "Min"
	        endif
	      endif
	    endif
	  endif
	  temp->dlist[d.seq].rrf[rcnt].sr_result_type_cd = 0.0
	  temp->dlist[d.seq].rrf[rcnt].sr_result_type = "(None)"
 
	endif	;002
 
with nocounter
 
 
for (x = 1 to tcnt)
  set rcnt = size(temp->dlist[x].rrf,5)
  if (rcnt > 0)
    select into "nl:"
    from (dummyt d with seq = rcnt),
      assay_processing_r apr,
      code_value c
    plan d
    join apr
      where apr.task_assay_cd = temp->dlist[x].task_assay_cd
        and apr.service_resource_cd
                    = temp->dlist[x].rrf[d.seq].service_resource_cd
        and apr.active_ind = 1
    join c
      where c.code_value = apr.default_result_type_cd
    detail
      temp->dlist[x].rrf[d.seq].sr_result_type_cd
                               = apr.default_result_type_cd
      temp->dlist[x].rrf[d.seq].sr_result_type = trim(c.display)
    with nocounter
    select into "nl:"
    from (dummyt d with seq = rcnt),
          data_map dm
    plan d
    join dm
      where dm.task_assay_cd = temp->dlist[x].task_assay_cd
        and dm.service_resource_cd
                    = temp->dlist[x].rrf[d.seq].service_resource_cd
        and dm.active_ind = 1
        and dm.data_map_type_flag = 0
    detail
      temp->dlist[x].rrf[d.seq].max_digits = dm.max_digits
      temp->dlist[x].rrf[d.seq].min_decimal_places = dm.min_decimal_places
      temp->dlist[x].rrf[d.seq].min_digits = dm.min_digits
    with nocounter
    select into "nl:"
    from (dummyt d with seq = rcnt),
      alpha_responses ar,
      code_value cv,
      nomenclature n,
      code_value cv1	;001
    plan d
    join ar
      where ar.reference_range_factor_id
                     = temp->dlist[x].rrf[d.seq].reference_range_factor_id
        and ar.active_ind = 1
    join cv
      where cv.code_value = ar.result_process_cd
    join n
      where n.nomenclature_id = ar.nomenclature_id
	join cv1														;001
	  where cv1.code_value = outerjoin(n.source_vocabulary_cd)		;001
	    and cv1.active_ind = outerjoin(1)							;001
    order by d.seq, ar.sequence, ar.multi_alpha_sort_order
    head d.seq
      acnt = 0
    detail
      acnt = acnt + 1
      stat = alterlist(temp->dlist[x].rrf[d.seq].al,acnt)
      temp->dlist[x].rrf[d.seq].al[acnt].mnemonic
                               = trim(n.mnemonic)
      temp->dlist[x].rrf[d.seq].al[acnt].long_desc
                               = trim(n.source_string)
      temp->dlist[x].rrf[d.seq].al[acnt].term
                               = trim(n.short_string)
      if (ar.use_units_ind = 1)
        temp->dlist[x].rrf[d.seq].al[acnt].use_units
                               = "Yes"
      endif
      if (ar.default_ind = 1)
        temp->dlist[x].rrf[d.seq].al[acnt].default
                               = "Yes"
      endif
      temp->dlist[x].rrf[d.seq].al[acnt].result_process_cd
                               = ar.result_process_cd
      if (cv.code_value > 0)
         temp->dlist[x].rrf[d.seq].al[acnt].result_process
                               = trim(cv.description)
      endif
      if (ar.reference_ind = 1)
        temp->dlist[x].rrf[d.seq].al[acnt].reference
                               = "X"
      endif
	  if (cv1.code_value > 0)										;001
		temp->dlist[x].rrf[d.seq].al[acnt].vocab = cv1.display		;001
	  endif															;001
    with nocounter
  endif
 
  ;;;;;;;;;; only include assays without reference ranges when not filtering ;;;;;;;;;; ;002
  if (serv_res_cnt = 0)	;002
	  select into "nl:"
	  from assay_processing_r apr,
	       code_value c,
	       code_value c2,
	       (dummyt d with seq = 1),
	       reference_range_factor rrf
	  plan apr
	    where apr.task_assay_cd = temp->dlist[x].task_assay_cd
	      and apr.service_resource_cd > 0
	      and apr.active_ind = 1
	  join c
	    where c.code_value = apr.default_result_type_cd
	  join c2
	    where c2.code_value = apr.service_resource_cd
	  join d
	  join rrf
	    where rrf.task_assay_cd = apr.task_assay_cd
	      and rrf.service_resource_cd = apr.service_resource_cd
	  head report
	    nrcnt = 0
	  detail
	    nrcnt = nrcnt + 1
	    stat = alterlist(temp->dlist[x].norrf,nrcnt)
	    temp->dlist[x].norrf[nrcnt].sr_result_type_cd
	                             = apr.default_result_type_cd
	    temp->dlist[x].norrf[nrcnt].sr_result_type = trim(c.display)
	    temp->dlist[x].norrf[nrcnt].service_resource_cd
	                             = apr.service_resource_cd
	    temp->dlist[x].norrf[nrcnt].service_resource = trim(c2.display)
	  with nocounter, outerjoin = d, dontexist
  endif					;002
 
endfor
 
#skip_processing
 
declare header_string = vc
declare dta_string = vc
 
set    normal_range_txt   = fillstring(20, " ")
set    normal_low_txt     = fillstring(50, " ")
set    normal_high_txt    = fillstring(50, " ")
set    critical_range_txt = fillstring(20, " ")
set    critical_low_txt   = fillstring(50, " ")
set    critical_high_txt  = fillstring(50, " ")
set    feasible_range_txt = fillstring(20, " ")
set    feasible_low_txt   = fillstring(50, " ")
set    feasible_high_txt  = fillstring(50, " ")
set    review_range_txt   = fillstring(20, " ")
set    review_low_txt     = fillstring(50, " ")
set    review_high_txt    = fillstring(50, " ")
set    linear_range_txt   = fillstring(20, " ")
set    linear_low_txt     = fillstring(50, " ")
set    linear_high_txt    = fillstring(50, " ")
set    units_txt          = fillstring(20, " ")
set    results_txt        = fillstring(20, " ")
set    equation_txt       = fillstring(45, " ")
set    text_nbr           = fillstring(50," ")  ;fill out before macrocall
set    min_dec_digits     = 0     		;fill out before macrocall
set    text_char          = " "
set    text               = fillstring(50," ")
set    save_sr_result_type = fillstring(50," ")
set    save_service_resource = fillstring(50," ")
set    ptr                = 0
set    start_pos          = 0
set    nbr_len            = 0
set    dec_start_pos      = 0
set    nbr_dec_digits     = 0
set    delta_value_txt    = fillstring(50, " ")	;003
 
   subroutine convert_range_number(row_nbr)
     	set ptr = 0
       	set start_pos = 0
      	set nbr_len = 0
       	set dec_start_pos = 0
       	set nbr_dec_digits = 0
       	set text = ""
      	for (ptr = 1 to size(trim(text_nbr),3))
          set text_char = substring(ptr, 1, text_nbr)
          ;* Find start position
          if (text_char > " " and start_pos = 0)
            set	start_pos = ptr
          endif
          ;* Find decimal point
          if (text_char = ".")
            set dec_start_pos = ptr
          endif
          ;* Count decimal places
          if (dec_start_pos > 0 and text_char != "0")
            set	nbr_dec_digits = ptr - dec_start_pos
          endif
     	endfor
 
        if (nbr_dec_digits < min_dec_digits)
          set nbr_dec_digits = min_dec_digits
        endif
        ;* Determine length of number
        if (nbr_dec_digits > 0)
          set  nbr_len = (dec_start_pos - start_pos) + 1
          set  nbr_len = nbr_len + nbr_dec_digits
      	else
          set  nbr_len = dec_start_pos - start_pos
        endif
        set text = substring(start_pos, nbr_len, text_nbr)
      return(1)
    end
 
;001 set stat = alterlist(reply->collist,38)
set stat = alterlist(reply->collist,41)			;001
 
set reply->collist[1].header_text = "Activity Type"
set reply->collist[1].data_type = 1 ;string
set reply->collist[1].hide_ind = 1
set reply->collist[2].header_text = "Assay Display"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 0
set reply->collist[3].header_text = "Assay Description"
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
set reply->collist[4].header_text = "Instrument/Bench"
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
set reply->collist[5].header_text = "Instrument/Bench Result Type"
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
set reply->collist[6].header_text = "Age From"
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
set reply->collist[7].header_text = "Age To"
set reply->collist[7].data_type = 1 ;string
set reply->collist[7].hide_ind = 0
set reply->collist[8].header_text = "Unknown Age"
set reply->collist[8].data_type = 1 ;string
set reply->collist[8].hide_ind = 0
set reply->collist[9].header_text = "Sex"
set reply->collist[9].data_type = 1 ;string
set reply->collist[9].hide_ind = 0
set reply->collist[10].header_text = "Specimen Type"
set reply->collist[10].data_type = 1 ;string
set reply->collist[10].hide_ind = 0
set reply->collist[11].header_text = "Species"
set reply->collist[11].data_type = 1 ;string
set reply->collist[11].hide_ind = 0
set reply->collist[12].header_text = "Reference Low"
set reply->collist[12].data_type = 1 ;string
set reply->collist[12].hide_ind = 0
set reply->collist[13].header_text = "Reference High"
set reply->collist[13].data_type = 1 ;string
set reply->collist[13].hide_ind = 0
set reply->collist[14].header_text = "Critical Low"
set reply->collist[14].data_type = 1 ;string
set reply->collist[14].hide_ind = 0
set reply->collist[15].header_text = "Critical High"
set reply->collist[15].data_type = 1 ;string
set reply->collist[15].hide_ind = 0
set reply->collist[16].header_text = "Review Low"
set reply->collist[16].data_type = 1 ;string
set reply->collist[16].hide_ind = 0
set reply->collist[17].header_text = "Review High"
set reply->collist[17].data_type = 1 ;string
set reply->collist[17].hide_ind = 0
set reply->collist[18].header_text = "Linear Low"
set reply->collist[18].data_type = 1 ;string
set reply->collist[18].hide_ind = 0
set reply->collist[19].header_text = "Linear High"
set reply->collist[19].data_type = 1 ;string
set reply->collist[19].hide_ind = 0
set reply->collist[20].header_text = "Dilute"
set reply->collist[20].data_type = 1 ;string
set reply->collist[20].hide_ind = 0
set reply->collist[21].header_text = "Feasible Low"
set reply->collist[21].data_type = 1 ;string
set reply->collist[21].hide_ind = 0
set reply->collist[22].header_text = "Feasible High"
set reply->collist[22].data_type = 1 ;string
set reply->collist[22].hide_ind = 0
set reply->collist[23].header_text = "Alpha Response/Chart Name"
set reply->collist[23].data_type = 1 ;string
set reply->collist[23].hide_ind = 0
set reply->collist[24].header_text = "MDI Alias"					;001
set reply->collist[24].data_type = 1 ;string						;001
set reply->collist[24].hide_ind = 0									;001
set reply->collist[25].header_text = "Unique Identifier"			;001
set reply->collist[25].data_type = 1 ;string						;001
set reply->collist[25].hide_ind = 0									;001
set reply->collist[26].header_text = "Vocabulary"					;001
set reply->collist[26].data_type = 1 ;string						;001
set reply->collist[26].hide_ind = 0									;001
set reply->collist[27].header_text = "Alpha Default"
set reply->collist[27].data_type = 1 ;string
set reply->collist[27].hide_ind = 0
set reply->collist[28].header_text = "Reference"
set reply->collist[28].data_type = 1 ;string
set reply->collist[28].hide_ind = 0
set reply->collist[29].header_text = "Report Value"
set reply->collist[29].data_type = 1 ;string
set reply->collist[29].hide_ind = 0
set reply->collist[30].header_text = "Use Units of Measure"
set reply->collist[30].data_type = 1 ;string
set reply->collist[30].hide_ind = 0
set reply->collist[31].header_text = "Units of Measure"
set reply->collist[31].data_type = 1 ;string
set reply->collist[31].hide_ind = 0
set reply->collist[32].header_text = "Delta Check Type"
set reply->collist[32].data_type = 1 ;string
set reply->collist[32].hide_ind = 0
set reply->collist[33].header_text = "Delta Time Frame"
set reply->collist[33].data_type = 1 ;string
set reply->collist[33].hide_ind = 0
set reply->collist[34].header_text = "Delta Time Frame Units"
set reply->collist[34].data_type = 1 ;string
set reply->collist[34].hide_ind = 0
set reply->collist[35].header_text = "Delta Value"
set reply->collist[35].data_type = 1 ;string
set reply->collist[35].hide_ind = 0
set reply->collist[36].header_text = "Numeric Map Minimum Digits"
set reply->collist[36].data_type = 1 ;string
set reply->collist[36].hide_ind = 0
set reply->collist[37].header_text = "Numeric Map Maximum Digits"
set reply->collist[37].data_type = 1 ;string
set reply->collist[37].hide_ind = 0
set reply->collist[38].header_text = "Numeric Map Minimum Decimal Places"
set reply->collist[38].data_type = 1 ;string
set reply->collist[38].hide_ind = 0
set reply->collist[39].header_text = "task_assay_cd"
set reply->collist[39].data_type = 2 ;double
set reply->collist[39].hide_ind = 1
set reply->collist[40].header_text = "service_resource_cd"
set reply->collist[40].data_type = 2 ;double
set reply->collist[40].hide_ind = 1
set reply->collist[41].header_text = "reference_range_factor_id"
set reply->collist[41].data_type = 2 ;double
set reply->collist[41].hide_ind = 1
 
 
set row_nbr = 0
for (x = 1 to tcnt)
  set rcnt = size(temp->dlist[x].rrf,5)
 
  ;;;;;;;;;; if filtering, then only include assays that have referance ranges ;;;;;;;;;;	;002
  if (serv_res_cnt = 0 or (serv_res_cnt > 0 and rcnt > 0))									;002
 
	  set skip_nrrf_ind = 0
	  set save_sr_result_type = "(None)"
	  for (y = 1 to rcnt)
	    set skip_nrrf_ind = 1
	    if (temp->dlist[x].rrf[y].sr_result_type != save_sr_result_type
	    and temp->dlist[x].rrf[y].sr_result_type != "(None)")
	      if (save_sr_result_type = "(None)")
	        set save_sr_result_type = temp->dlist[x].rrf[y].sr_result_type
	      else
	        set save_sr_result_type = "Multiple"
	      endif
	    endif
	  endfor
 
	  if (skip_nrrf_ind = 1)
	    set nrcnt = size(temp->dlist[x].norrf,5)
	    if (nrcnt > 0)
	      for (y = 1 to nrcnt)
	        if (temp->dlist[x].norrf[y].sr_result_type != save_sr_result_type
	        and temp->dlist[x].norrf[y].sr_result_type != "(None)")
	          if (save_sr_result_type = "(None)")
	            set save_sr_result_type = temp->dlist[x].norrf[y].sr_result_type
	          else
	            set save_sr_result_type = "Multiple"
	          endif
	        endif
	      endfor
	    endif
	    for (y = 1 to rcnt)
	       if (temp->dlist[x].rrf[y].service_resource = "All"
	       and temp->dlist[x].rrf[y].sr_result_type = "(None)")
	         set temp->dlist[x].rrf[y].sr_result_type = save_sr_result_type
	       endif
	    endfor
	  endif
 
	  for (y = 1 to rcnt)
 
		/*beginning mod 002*/
		set found_ind = 1
 
		;;;;;;;;;; if filtering, check if assay is routed to one of the ;;;;;;;;;;
		;;;;;;;;;; service resources before including the "all" row     ;;;;;;;;;;
		if (serv_res_cnt > 0 and temp->dlist[x].rrf[y].service_resource = "All")
 
			set found_ind = 0
 
			;;;;;;;;;; check order level routing ;;;;;;;;;;
			select into "NL:"
			from profile_task_r ptr,
				 order_catalog oc,
				 orc_resource_list orl
			plan ptr
				where ptr.task_assay_cd = temp->dlist[x].task_assay_cd
				  and ptr.active_ind = 1
			join oc
				where oc.catalog_cd = ptr.catalog_cd
				  and oc.resource_route_lvl = 1
				  and oc.active_ind = 1
			join orl
				where orl.catalog_cd = oc.catalog_cd
				  and orl.active_ind = 1
			detail
				if (found_ind = 0)
					for (f = 1 to serv_res_cnt)
						if (orl.service_resource_cd = request->service_resources[f].code_value)
							found_ind = 1
						endif
					endfor
				endif
			with nocounter
 
			if (found_ind = 0)
				;;;;;;;;;; check assay level routing ;;;;;;;;;;
				select into "NL:"
				from profile_task_r ptr,
					 order_catalog oc,
					 assay_processing_r apr
				plan ptr
					where ptr.task_assay_cd = temp->dlist[x].task_assay_cd
					  and ptr.active_ind = 1
				join oc
					where oc.catalog_cd = ptr.catalog_cd
					  and oc.resource_route_lvl = 2
					  and oc.active_ind = 1
				join apr
					where apr.task_assay_cd = temp->dlist[x].task_assay_cd
					  and apr.active_ind = 1
				detail
					if (found_ind = 0)
						for (f = 1 to serv_res_cnt)
							if (apr.service_resource_cd = request->service_resources[f].code_value)
								found_ind = 1
							endif
						endfor
					endif
				with nocounter
			endif
 
		endif
		/*end mod 002*/
 
		if (found_ind = 1)	;002
 
		   if (temp->dlist[x].rrf[y].skip_ind = 0) ;make sure we shouldn't skip
 
		    set temp->dlist[x].rrf[y].af_disp
		                          = cnvtstring(temp->dlist[x].rrf[y].age_from)
		    set temp->dlist[x].rrf[y].at_disp
		                          = cnvtstring(temp->dlist[x].rrf[y].age_to)
		    set normal_low_txt = ""
		    set normal_high_txt = ""
		    set min_dec_digits = temp->dlist[x].rrf[y].min_decimal_places
		    if (temp->dlist[x].rrf[y].normal_ind = 1)
		    	set text_nbr = temp->dlist[x].rrf[y].normal_low
		        set stat = convert_range_number(row_nbr)
		        set normal_low_txt = text
		        set temp->dlist[x].rrf[y].nl_disp = trim(normal_low_txt)
		    elseif (temp->dlist[x].rrf[y].normal_ind = 2)
		    	set text_nbr = temp->dlist[x].rrf[y].normal_high
		        set stat = convert_range_number(row_nbr)
		    	set normal_high_txt = text
		    	set temp->dlist[x].rrf[y].nh_disp = trim(normal_high_txt)
		    elseif (temp->dlist[x].rrf[y].normal_ind = 3)
		    	set text_nbr = temp->dlist[x].rrf[y].normal_low
		        set stat = convert_range_number(row_nbr)
		        set normal_low_txt = text
		        set temp->dlist[x].rrf[y].nl_disp = trim(normal_low_txt)
		    	set text_nbr = temp->dlist[x].rrf[y].normal_high
		    	set stat = convert_range_number(row_nbr)
		    	set normal_high_txt = text
		    	set temp->dlist[x].rrf[y].nh_disp = trim(normal_high_txt)
		    endif
		    set critical_low_txt = ""
		    set critical_high_txt = ""
		    if (temp->dlist[x].rrf[y].critical_ind = 1)
		    	set text_nbr = temp->dlist[x].rrf[y].critical_low
		        set stat = convert_range_number(row_nbr)
		        set critical_low_txt = text
		        set temp->dlist[x].rrf[y].cl_disp = trim(critical_low_txt)
		    elseif (temp->dlist[x].rrf[y].critical_ind = 2)
		    	set text_nbr = temp->dlist[x].rrf[y].critical_high
		    	set stat = convert_range_number(row_nbr)
		    	set critical_high_txt = text
		    	set temp->dlist[x].rrf[y].ch_disp = trim(critical_high_txt)
		    elseif (temp->dlist[x].rrf[y].critical_ind = 3)
		    	set text_nbr = temp->dlist[x].rrf[y].critical_low
		        set stat = convert_range_number(row_nbr)
		        set critical_low_txt = text
		        set temp->dlist[x].rrf[y].cl_disp = trim(critical_low_txt)
		    	set text_nbr = temp->dlist[x].rrf[y].critical_high
		    	set stat = convert_range_number(row_nbr)
		    	set critical_high_txt = text
		    	set temp->dlist[x].rrf[y].ch_disp = trim(critical_high_txt)
		    endif
		    set review_low_txt = ""
		    set review_high_txt = ""
		    if (temp->dlist[x].rrf[y].review_ind = 1)
		    	set text_nbr = temp->dlist[x].rrf[y].review_low
		        set stat = convert_range_number(row_nbr)
		        set review_low_txt = text
		        set temp->dlist[x].rrf[y].rl_disp = trim(review_low_txt)
		    elseif (temp->dlist[x].rrf[y].review_ind = 2)
		    	set text_nbr = temp->dlist[x].rrf[y].review_high
		    	set stat = convert_range_number(row_nbr)
		    	set review_high_txt = text
		    	set temp->dlist[x].rrf[y].rh_disp = trim(review_high_txt)
		    elseif (temp->dlist[x].rrf[y].review_ind = 3)
		    	set text_nbr = temp->dlist[x].rrf[y].review_low
		        set stat = convert_range_number(row_nbr)
		        set review_low_txt = text
		        set temp->dlist[x].rrf[y].rl_disp = trim(review_low_txt)
		    	set text_nbr = temp->dlist[x].rrf[y].review_high
		    	set stat = convert_range_number(row_nbr)
		    	set review_high_txt = text
		    	set temp->dlist[x].rrf[y].rh_disp = trim(review_high_txt)
		    endif
		    set linear_low_txt = ""
		    set linear_high_txt = ""
		    if (temp->dlist[x].rrf[y].linear_ind = 1)
		    	set text_nbr = temp->dlist[x].rrf[y].linear_low
		        set stat = convert_range_number(row_nbr)
		        set linear_low_txt = text
		        set temp->dlist[x].rrf[y].ll_disp = trim(linear_low_txt)
		    elseif (temp->dlist[x].rrf[y].linear_ind = 2)
		    	set text_nbr = temp->dlist[x].rrf[y].linear_high
		    	set stat = convert_range_number(row_nbr)
		    	set linear_high_txt = text
		    	set temp->dlist[x].rrf[y].lh_disp = trim(linear_high_txt)
		    elseif (temp->dlist[x].rrf[y].linear_ind = 3)
		    	set text_nbr = temp->dlist[x].rrf[y].linear_low
		        set stat = convert_range_number(row_nbr)
		        set linear_low_txt = text
		        set temp->dlist[x].rrf[y].ll_disp = trim(linear_low_txt)
		    	set text_nbr = temp->dlist[x].rrf[y].linear_high
		    	set stat = convert_range_number(row_nbr)
		    	set linear_high_txt = text
		    	set temp->dlist[x].rrf[y].lh_disp = trim(linear_high_txt)
		    endif
		    set feasible_low_txt = ""
		    set feasible_high_txt = ""
		    if (temp->dlist[x].rrf[y].feasible_ind = 1)
		    	set text_nbr = temp->dlist[x].rrf[y].feasible_low
		        set stat = convert_range_number(row_nbr)
		        set feasible_low_txt = text
		        set temp->dlist[x].rrf[y].fl_disp = trim(feasible_low_txt)
		    elseif (temp->dlist[x].rrf[y].feasible_ind = 2)
		    	set text_nbr = temp->dlist[x].rrf[y].feasible_high
		    	set stat = convert_range_number(row_nbr)
		    	set feasible_high_txt = text
		    	set temp->dlist[x].rrf[y].fh_disp = trim(feasible_high_txt)
		    elseif (temp->dlist[x].rrf[y].feasible_ind = 3)
		    	set text_nbr = temp->dlist[x].rrf[y].feasible_low
		        set stat = convert_range_number(row_nbr)
		        set feasible_low_txt = text
		        set temp->dlist[x].rrf[y].fl_disp = trim(feasible_low_txt)
		    	set text_nbr = temp->dlist[x].rrf[y].feasible_high
		    	set stat = convert_range_number(row_nbr)
		    	set feasible_high_txt = text
		    	set temp->dlist[x].rrf[y].fh_disp = trim(feasible_high_txt)
		    endif
 
			if (temp->dlist[x].rrf[y].delta_value > " ")							;003
				set delta_value_txt = ""											;003
				set text_nbr = temp->dlist[x].rrf[y].delta_value					;003
				set stat = convert_range_number(row_nbr)							;003
				set delta_value_txt = text											;003
			    set temp->dlist[x].rrf[y].delta_value_disp = trim(delta_value_txt)	;003
 			endif																	;003
 
		    set row_nbr = row_nbr + 1
		    set stat = alterlist(reply->rowlist,row_nbr)
		;001    set stat = alterlist(reply->rowlist[row_nbr].celllist,38)
		    set stat = alterlist(reply->rowlist[row_nbr].celllist,41)		;001
		    set reply->rowlist[row_nbr].celllist[1].string_value
		      =  trim(temp->dlist[x].activity_type_disp)
		    set reply->rowlist[row_nbr].celllist[2].string_value
		      =  trim(temp->dlist[x].dtaname)
		    set reply->rowlist[row_nbr].celllist[3].string_value
		      =  trim(temp->dlist[x].dtadesc)
		    set reply->rowlist[row_nbr].celllist[4].string_value
		      = trim (temp->dlist[x].rrf[y].service_resource)
		    if (temp->dlist[x].rrf[y].sr_result_type = "(None)")
		      set reply->rowlist[row_nbr].celllist[5].string_value = " "
		    else
		      set reply->rowlist[row_nbr].celllist[5].string_value
		       = trim (temp->dlist[x].rrf[y].sr_result_type)
		    endif
		    set reply->rowlist[row_nbr].celllist[6].string_value
		      = concat(temp->dlist[x].rrf[y].af_disp," ",
		              temp->dlist[x].rrf[y].age_from_unit)
		    set reply->rowlist[row_nbr].celllist[7].string_value
		      = concat(temp->dlist[x].rrf[y].at_disp," ",
		              temp->dlist[x].rrf[y].age_to_unit)
		    set reply->rowlist[row_nbr].celllist[8].string_value
		      = trim (temp->dlist[x].rrf[y].unknown_age_str)
		    set reply->rowlist[row_nbr].celllist[9].string_value
		      = trim (temp->dlist[x].rrf[y].sex)
		    set reply->rowlist[row_nbr].celllist[10].string_value
		      = trim (temp->dlist[x].rrf[y].specimen_type)
		    set reply->rowlist[row_nbr].celllist[11].string_value
		      = trim (temp->dlist[x].rrf[y].species)
		    set reply->rowlist[row_nbr].celllist[12].string_value
		      = trim (temp->dlist[x].rrf[y].nl_disp)
		    set reply->rowlist[row_nbr].celllist[13].string_value
		      = trim (temp->dlist[x].rrf[y].nh_disp)
		    set reply->rowlist[row_nbr].celllist[14].string_value
		      = trim (temp->dlist[x].rrf[y].cl_disp)
		    set reply->rowlist[row_nbr].celllist[15].string_value
		      = trim (temp->dlist[x].rrf[y].ch_disp)
		    set reply->rowlist[row_nbr].celllist[16].string_value
		      = trim (temp->dlist[x].rrf[y].rl_disp)
		    set reply->rowlist[row_nbr].celllist[17].string_value
		      = trim (temp->dlist[x].rrf[y].rh_disp)
		    set reply->rowlist[row_nbr].celllist[18].string_value
		      = trim (temp->dlist[x].rrf[y].ll_disp)
		    set reply->rowlist[row_nbr].celllist[19].string_value
		      = trim (temp->dlist[x].rrf[y].lh_disp)
		    set reply->rowlist[row_nbr].celllist[20].string_value
		      = trim (temp->dlist[x].rrf[y].dilute)
		    set reply->rowlist[row_nbr].celllist[21].string_value
		      = trim (temp->dlist[x].rrf[y].fl_disp)
		    set reply->rowlist[row_nbr].celllist[22].string_value
		      = trim (temp->dlist[x].rrf[y].fh_disp)
		;    set reply->rowlist[row_nbr].celllist[23].string_value = '""'
		;    set reply->rowlist[row_nbr].celllist[27].string_value = '""'
		;    set reply->rowlist[row_nbr].celllist[28].string_value = '""'
		;    set reply->rowlist[row_nbr].celllist[29].string_value = '""'
		;    set reply->rowlist[row_nbr].celllist[30].string_value = '""'
		    set reply->rowlist[row_nbr].celllist[31].string_value
		      = trim (temp->dlist[x].rrf[y].units)
		    set reply->rowlist[row_nbr].celllist[32].string_value
		      = trim (temp->dlist[x].rrf[y].delta_check_type_disp)
			if (temp->dlist[x].rrf[y].delta_time_value > 0)				;003
			    set reply->rowlist[row_nbr].celllist[33].string_value
			      = cnvtstring (temp->dlist[x].rrf[y].delta_time_value)
			endif														;003
		    set reply->rowlist[row_nbr].celllist[34].string_value
		      = trim (temp->dlist[x].rrf[y].delta_time_unit)
		    set reply->rowlist[row_nbr].celllist[35].string_value
;003		      = cnvtstring (temp->dlist[x].rrf[y].delta_value)
		      = temp->dlist[x].rrf[y].delta_value_disp				;003
		    set reply->rowlist[row_nbr].celllist[36].string_value
		      = cnvtstring (temp->dlist[x].rrf[y].min_digits)
		    set reply->rowlist[row_nbr].celllist[37].string_value
		      = cnvtstring (temp->dlist[x].rrf[y].max_digits)
		    set reply->rowlist[row_nbr].celllist[38].string_value
		      = cnvtstring (temp->dlist[x].rrf[y].min_decimal_places)
		    set reply->rowlist[row_nbr].celllist[39].double_value
		      = temp->dlist[x].task_assay_cd
		    set reply->rowlist[row_nbr].celllist[40].double_value
		      = temp->dlist[x].rrf[y].service_resource_cd
		    set reply->rowlist[row_nbr].celllist[41].double_value
		      = temp->dlist[x].rrf[y].reference_range_factor_id
 
		    set acnt = size(temp->dlist[x].rrf[y].al,5)
		    for (z = 1 to acnt)
			     set row_nbr = row_nbr + 1
			     set stat = alterlist(reply->rowlist,row_nbr)
			;001     set stat = alterlist(reply->rowlist[row_nbr].celllist,38)
			     set stat = alterlist(reply->rowlist[row_nbr].celllist,41)			;001
			     set reply->rowlist[row_nbr].celllist[1].string_value
			      =  trim(temp->dlist[x].activity_type_disp)
			     set reply->rowlist[row_nbr].celllist[2].string_value
			       =  trim(temp->dlist[x].dtaname)
			     set reply->rowlist[row_nbr].celllist[3].string_value
			       = trim(temp->dlist[x].dtadesc)
			     set reply->rowlist[row_nbr].celllist[4].string_value
			       = trim(temp->dlist[x].rrf[y].service_resource)
			     set reply->rowlist[row_nbr].celllist[5].string_value
			       = ('Alpha Response')
			;     set reply->rowlist[row_nbr].celllist[6].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[7].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[8].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[9].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[10].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[11].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[12].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[13].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[14].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[15].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[16].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[17].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[18].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[19].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[20].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[21].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[22].string_value = '""'
			     set reply->rowlist[row_nbr].celllist[23].string_value
			;001       = trim (temp->dlist[x].rrf[y].al[z].mnemonic)
			       = trim (temp->dlist[x].rrf[y].al[z].term)					;001
			     set reply->rowlist[row_nbr].celllist[24].string_value			;001
			       = trim (temp->dlist[x].rrf[y].al[z].mnemonic)				;001
			     set reply->rowlist[row_nbr].celllist[25].string_value			;001
			       = trim (temp->dlist[x].rrf[y].al[z].long_desc)				;001
			     set reply->rowlist[row_nbr].celllist[26].string_value			;001
			       = trim (temp->dlist[x].rrf[y].al[z].vocab)					;001
			     set reply->rowlist[row_nbr].celllist[27].string_value
			       = trim (temp->dlist[x].rrf[y].al[z].default)
			     set reply->rowlist[row_nbr].celllist[28].string_value
			       = trim (temp->dlist[x].rrf[y].al[z].reference)
			     set reply->rowlist[row_nbr].celllist[29].string_value
			       = trim (temp->dlist[x].rrf[y].al[z].result_process)
			     set reply->rowlist[row_nbr].celllist[30].string_value
			       = trim (temp->dlist[x].rrf[y].al[z].use_units)
			;     set reply->rowlist[row_nbr].celllist[31].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[32].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[33].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[34].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[35].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[36].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[37].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[38].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[39].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[40].string_value = '""'
			;     set reply->rowlist[row_nbr].celllist[41].string_value = '""'
		    endfor
 
		   endif ;make sure we shouldn't skip
 
		endif	;002
 
	  endfor
 
 
	  set nrcnt = size(temp->dlist[x].norrf,5)
	  if (nrcnt > 0
	  and skip_nrrf_ind = 0)
	    set save_service_resource = " "
	    for (y = 1 to nrcnt)
	      if (temp->dlist[x].norrf[y].service_resource != save_service_resource)
	        if (save_service_resource = " ")
	         set save_service_resource = temp->dlist[x].norrf[y].service_resource
	        else
	         set save_service_resource = "Mulitple APR"
	        endif
	      endif
	    endfor
	    for (y = 1 to 1) ;only do this once
	      set row_nbr = row_nbr + 1
	      set stat = alterlist(reply->rowlist,row_nbr)
	;001      set stat = alterlist(reply->rowlist[row_nbr].celllist,38)
	      set stat = alterlist(reply->rowlist[row_nbr].celllist,41)			;001
	      set reply->rowlist[row_nbr].celllist[1].string_value
	        =  trim(temp->dlist[x].activity_type_disp)
	      set reply->rowlist[row_nbr].celllist[2].string_value
	        =  trim(temp->dlist[x].dtaname)
	      set reply->rowlist[row_nbr].celllist[3].string_value
	        = trim(temp->dlist[x].dtadesc)
	      set reply->rowlist[row_nbr].celllist[4].string_value
	        = trim (temp->dlist[x].rrf[y].service_resource)
	      if (temp->dlist[x].rrf[y].sr_result_type = "(None)")
	        set reply->rowlist[row_nbr].celllist[5].string_value = " "
	      else
	        set reply->rowlist[row_nbr].celllist[5].string_value
	          = trim (temp->dlist[x].rrf[y].sr_result_type)
	      endif
	;      set reply->rowlist[row_nbr].celllist[6].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[7].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[8].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[9].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[10].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[11].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[12].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[13].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[14].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[15].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[16].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[17].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[18].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[19].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[20].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[21].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[22].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[23].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[27].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[28].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[29].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[30].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[31].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[32].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[33].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[34].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[35].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[36].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[37].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[38].string_value = '""'
	      set reply->rowlist[row_nbr].celllist[39].double_value
	        = temp->dlist[x].task_assay_cd
	;      set reply->rowlist[row_nbr].celllist[40].string_value = '""'
	;      set reply->rowlist[row_nbr].celllist[41].string_value = '""'
	    endfor
	  endif
	  if (rcnt = 0 and nrcnt = 0 and temp->dlist[x].dtaname > " ")
	    set row_nbr = row_nbr + 1
	    set stat = alterlist(reply->rowlist,row_nbr)
	;001    set stat = alterlist(reply->rowlist[row_nbr].celllist,38)
	    set stat = alterlist(reply->rowlist[row_nbr].celllist,41)			;001
	    set reply->rowlist[row_nbr].celllist[1].string_value
	      =  trim (temp->dlist[x].activity_type_disp)
	    set reply->rowlist[row_nbr].celllist[2].string_value
	      =  trim (temp->dlist[x].dtaname)
	    set reply->rowlist[row_nbr].celllist[3].string_value
	      = trim (temp->dlist[x].dtadesc)
	;    set reply->rowlist[row_nbr].celllist[4].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[5].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[6].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[7].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[8].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[9].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[10].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[11].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[12].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[13].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[14].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[15].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[16].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[17].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[18].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[19].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[20].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[21].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[22].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[23].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[27].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[28].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[29].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[30].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[31].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[32].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[33].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[34].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[35].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[36].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[37].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[38].string_value = '""'
	    set reply->rowlist[row_nbr].celllist[39].double_value
	        = temp->dlist[x].task_assay_cd
	;    set reply->rowlist[row_nbr].celllist[40].string_value = '""'
	;    set reply->rowlist[row_nbr].celllist[41].string_value = '""'
	  endif
 
	endif	;002
 
endfor
 
/**************************************************************
; DVDev DEFINED SUBROUTINES
**************************************************************/
 
;if (validate(output_content->type))
;        set output_content->type = 6
;endif
/*
call echo("*****************************************************************************************")
call echo("*****************************************************************************************")
call echo(" 1. FTP the audit (Default location CCLUSERDIR) to your device.")
call echo(" 2. Open MS Excel.")
call echo(" 3. Choose the menu option 'Open'.")
call echo(" 4. Locate the audit (.dat) file on your device (need to set 'files of type' to ALL files).")
call echo(" 5. Open it as a comma delimited file (uncheck TAB).")
call echo(" 6. In the final screen, highlight all of the columns and select General as the data format.")
call echo("*****************************************************************************************")
call echo(" NOTE: When reviewing the data, pay close attention to the 'none' and ")
call echo("       'multiple' in the SR result type column, which is reading the APR table.")
call echo(" NOTE: A space (' ') has been prepended to the alpha response display fields ")
call echo("       to prevent responses like 10-12 from being converted to a date format.")
call echo("*****************************************************************************************")
*/
 
 
#exit_script
 
set reply->status_data->status = "S"	;002
 
;call echorecord(reply)
 
if (reply->high_volume_flag in (1,2))
  set reply->output_filename = build("gl_refrange_audit.csv")
endif
 
if (request->output_filename > " ")
  execute bed_rpt_file
endif
 
end
go
 
 
 

;Generated by GNU enscript 1.6.4.
