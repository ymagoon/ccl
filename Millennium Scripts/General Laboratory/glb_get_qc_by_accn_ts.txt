 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_qc_by_accn_ts/glb_get_qc_by_accn_ts.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_get_orders_by_accn.prg
        Object name:            glb_get_orders_by_accn
        Request #:              257515

        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Load order, task assay, and result information
                                for a given accession.

        Tables read:            assay_processing_list
                                container_accession
                                data_map
                                discrete_task_assay
                                order_comment
                                order_laboratory
                                order_serv_res_container
                                orders
                                perform_result
                                profile_task_r
                                prsnl
                                result
                                result_comment

        Tables updated:         None
        Executing from:         

        Special Notes:          

******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 04/02/96 Hal Patchen          Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

             drop program GLB_GET_QC_BY_ACCN_TS:dba go    
             create program GLB_GET_QC_BY_ACCN_TS:dba
     
      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  accession                    = c20
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      ( 
         1  person_id                    = f8
         1  encntr_id                    = f8
         1  qual[10]
            2  order_id                  = f8
            2  order_mnemonic            = vc
            2  report_priority_cd        = f8
            2  report_priority_disp      = vc
            2  report_priority_mean      = c12
            2  catalog_cd                = f8
            2  catalog_type_cd           = f8
            2  order_status_cd           = f8
            2  order_status_disp         = vc
            2  order_status_mean         = c12
            2  last_action_sequence      = i4
            2  last_update_provider_id   = f8
            2  last_update_provider_name = vc
            2  order_comment_ind         = i2
            2  order_comment_action_seq  = i4
            2  container_serv_res_cnt    = i4
            2  container_serv_res[10]
               3  container_id           = f8
               3  service_resource_cd    = f8
               3  service_resource_disp  = vc
               3  status_flag            = i2
               3  assays_cnt             = i4
               3  assays[10]
                  4  task_assay_cd            = f8
                  4  task_assay_mnemonic      = vc
                  4  sequence                 = i4
                  4  event_cd                 = f8
                  4  pending_ind              = i2
                  4  default_result_type_cd   = f8
                  4  default_result_type_disp = vc
                  4  default_result_type_mean = c12
                  4  units_cd                 = f8
                  4  data_map_ind             = i2
                  4  max_digits               = i4
                  4  min_decimal_places       = i4
                  4  min_digits               = i4
                  4  result_entry_format      = i4
                  4  results_cnt              = i4
                  4  results[10]
                     5  perform_result_id       = f8
                     5  result_id               = f8
                     5  result_status_cd        = f8
                     5  result_status_disp      = vc
                     5  result_status_mean      = c12
                     5  normal_cd               = f8
                     5  critical_cd             = f8
                     5  review_cd               = f8
                     5  delta_cd                = f8
                     5  normal_low              = f8
                     5  normal_high             = f8
                     5  normal_alpha            = vc
                     5  result_type_cd          = f8
                     5  result_type_disp        = vc
                     5  result_type_mean        = c12
                     5  result_value_cd         = f8
                     5  result_value_disp       = vc
                     5  result_value_mean       = c12
                     5  result_value_numeric    = f8
                     5  result_value_alpha      = vc
                     5  result_value_dt_tm      = dq8
                     5  result_value_text       = vc
                     5  result_comment_ind      = i2
                     5  perform_personnel_id    = f8
                     5  perform_personnel_name  = vc
                     5  perform_dt_tm           = dq8
                     5  perform_result_updt_cnt = i4
                     5  result_updt_cnt         = i4
%i cclsource:status_block.inc
      )
      
      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set GEN_LAB_SECTION_CD          = 0.0  ;Fill out when defined.
         set ORDER_COMMENT_CODESET       = 6010.0
         set ORDER_COMMENT_CDF           = "ORD COMMENT"
         set DATA_MAP_TYPE_FLAG          = 0    ;Fill out with correct value.
         declare order_comment_type_cd   = f8
         declare q_cnt                   = i4
         declare c_cnt                   = i4
         declare a_cnt                   = i4
         declare r_cnt                   = i4
         declare idx                     = i4
         declare max_c_cnt               = i4
         declare max_a_cnt               = i4
         declare max_r_cnt               = i4
         set reply->status_data.status = "F"

      /***********************************************************************
      * Select order information based on accession                          *
      ***********************************************************************/
         select into "nl:"
            ca.seq,
            osrc.container_id,
            osrc.order_id,
            osrc.service_resource_cd,
            ol.seq,
            o.seq,
            d1.seq,
            p.seq,
            d2.seq,
            assays_yn = decode(arl.seq, "Y", "N"),
            ptr.task_assay_cd,
            dta.seq,
            arl.seq,
            d3.seq,
            data_map_yn = decode(dm.seq, "Y", "N"),
            dm.seq,
            d4.seq,
            results_yn = decode(r.seq, "Y", "N"),
            r.seq,
            pr.seq,
            d5.seq,
            pl.seq,
            d6.seq,
            result_comment_yn = decode(rc.seq, "Y", "N"),
            rc.seq
 
            /* selection fields:
            ca.accession,
            ca.container_id,
            ca.lab_section_cd,
            osrc.container_id,
            osrc.order_id,
            osrc.service_resource_cd,
            osrc.status_flag,
            ol.report_priority_cd,
            o.catalog_cd,
            o.catalog_type_cd,
            o.person_id,
            o.encntr_id,
            o.order_status_cd,
            o.last_action_sequence,
            o.last_update_provider_id,
            d1.seq,
            p.name_full_formatted,
            d2.seq,
            assays_yn = decode(arl.seq, "Y", "N"),
            ptr.task_assay_cd,
            ptr.pending_ind,
            dta.mnemonic,
            dta.event_cd,
            arl.service_resource_cd,
            arl.task_assay_cd,
            arl.default_result_type_cd,
            arl.units_cd,
            d3.seq,
            data_map_yn = decode(dm.seq, "Y", "N"),
            dm.service_resource_cd,
            dm.task_assay_cd,
            dm.data_map_type_flag,
            dm.max_digits,
            dm.min_decimal_places,
            dm.min_digits,
            dm.result_entry_format,
            d4.seq,
            results_yn = decode(r.seq, "Y", "N"),
            r.result_id,
            r.result_status_cd,
            r.updt_cnt,
            pr.perform_result_id,
            pr.result_id,
            pr.result_status_cd,
            pr.result_type_cd,
            pr.normal_cd,
            pr.critical_cd,
            pr.review_cd,
            pr.delta_cd,
            pr.normal_low,
            pr.normal_high,
            pr.normal_alpha,
            pr.result_value_cd,
            pr.result_value_numeric,
            pr.result_value_alpha,
            pr.result_value_dt_tm,
            pr.result_value_text,
            pr.perform_personnel_id,
            pr.perform_dt_tm,
            pr.updt_cnt,
            d5.seq,
            pl.name_full_formatted,
            d6.seq,
            result_comment_yn = decode(rc.seq, "Y", "N"),
            rc.result_id
            */

         from
            container_accession ca,
            order_serv_res_container osrc,
            order_laboratory ol,
            orders o,
            dummyt d1,
            prsnl p,
            dummyt d2,
            profile_task_r ptr,
            discrete_task_assay dta,
            assay_processing_list arl,
            dummyt d3,
            data_map dm,
            dummyt d4,
            result r,
            perform_result pr,
            dummyt d5,
            prsnl pl,
            dummyt d6,
            result_comment rc

         plan    ca   where ca.accession = request->accession
                        and ca.lab_section_cd = GEN_LAB_SECTION_CD
         join    osrc where osrc.container_id = ca.container_id
         join    ol   where ol.order_id = osrc.order_id
         join    o    where o.order_id = ol.order_id
         join    d1   where d1.seq = 1
         join    p    where p.person_id = o.last_update_provider_id
         join    d2   where d2.seq = 1
         join    ptr  where ptr.catalog_cd = o.catalog_cd  
         join    dta  where dta.task_assay_cd = ptr.task_assay_cd
         join    arl  where arl.service_resource_cd = osrc.service_resource_cd
                        and arl.task_assay_cd = ptr.task_assay_cd
         join    d3   where d3.seq = 1
         join    dm   where dm.service_resource_cd = arl.service_resource_cd
                        and dm.task_assay_cd = arl.task_assay_cd
                        and dm.data_map_type_flag = DATA_MAP_TYPE_FLAG
         join    d4   where d4.seq = 1
         join    r    where r.order_id = o.order_id
                        and r.task_assay_cd = ptr.task_assay_cd
         join    pr   where pr.result_id = r.result_id
                        and pr.result_status_cd = r.result_status_cd
         join    d5   where d5.seq = 1
         join    pl   where pl.person_id = pr.perform_personnel_id
         join    d6   where d6.seq = 1
         join    rc   where rc.result_id = pr.result_id

         order
            osrc.order_id,
            osrc.container_id,
            osrc.service_resource_cd,
            ptr.task_assay_cd

         head report
            q_cnt = 0
            c_cnt = 0
            a_cnt = 0
            r_cnt = 0
            max_c_cnt = 0
            max_a_cnt = 0
            max_r_cnt = 0

         head osrc.order_id
            q_cnt = q_cnt + 1
            if (mod(q_cnt,10) = 1 and q_cnt != 1)
               stat = alter(reply->qual, q_cnt + 10)
            endif
            reply->person_id = o.person_id
            reply->encntr_id = o.encntr_id
            reply->qual[q_cnt].order_id = osrc.order_id
            reply->qual[q_cnt].order_mnemonic = o.order_mnemonic
            reply->qual[q_cnt].report_priority_cd = ol.report_priority_cd
            reply->qual[q_cnt].catalog_cd = o.catalog_cd
            reply->qual[q_cnt].catalog_type_cd = o.catalog_type_cd
            reply->qual[q_cnt].order_status_cd = o.order_status_cd
            reply->qual[q_cnt].last_action_sequence = o.last_action_sequence
            reply->qual[q_cnt].last_update_provider_id = o.last_update_provider_id
            reply->qual[q_cnt].last_update_provider_name = p.name_full_formatted
            ;  set order comment field defaults
            reply->qual[q_cnt].order_comment_ind = 0
            reply->qual[q_cnt].order_comment_action_seq = 0
            c_cnt = 0

         head osrc.container_id
            row + 0

         head osrc.service_resource_cd
            c_cnt = c_cnt + 1
            if (mod(c_cnt,10) = 1 and c_cnt != 1)
               if (c_cnt >= max_c_cnt)
                  stat = alter(reply->qual[q_cnt].container_serv_res, c_cnt + 10)
               endif
            endif
            if (c_cnt > max_c_cnt)
               max_c_cnt = c_cnt
            endif
            reply->qual[q_cnt].container_serv_res_cnt = c_cnt
            reply->qual[q_cnt].container_serv_res[c_cnt].container_id =
              osrc.container_id
            reply->qual[q_cnt].container_serv_res[c_cnt].service_resource_cd =
              osrc.service_resource_cd
            reply->qual[q_cnt].container_serv_res[c_cnt].status_flag =
              osrc.status_flag
              a_cnt = 0

         head ptr.task_assay_cd
            if (assays_yn = "Y")
               a_cnt = a_cnt + 1
               if (mod(a_cnt,10) = 1 and a_cnt != 1)
                  if (a_cnt >= max_a_cnt)
                     stat = alter(reply->qual[q_cnt].container_serv_res[c_cnt].assays, a_cnt + 10)
                  endif
               endif
               if (a_cnt > max_a_cnt)
                  max_a_cnt = a_cnt
               endif
               reply->qual[q_cnt].container_serv_res[c_cnt].assays_cnt = a_cnt
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt].task_assay_cd =
                 ptr.task_assay_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt].task_assay_mnemonic =
                 dta.mnemonic
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt].sequence =
                 ptr.sequence
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt].event_cd =
                 dta.event_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt].pending_ind =
                 ptr.pending_ind
               if (data_map_yn = "Y")
                  reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .data_map_ind = 1
                  reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .max_digits = dm.max_digits
                  reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .min_decimal_places = dm.min_decimal_places
                  reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .min_digits = dm.min_digits
                  reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .result_entry_format = dm.result_entry_format
               else
                  reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .data_map_ind = 0
               endif
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .default_result_type_cd = arl.default_result_type_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .units_cd = arl.units_cd
            endif
            r_cnt = 0

         detail
            if (results_yn = "Y")
               r_cnt = r_cnt + 1
               if (mod(r_cnt,10) = 1 and r_cnt != 1)
                  if (r_cnt >= max_r_cnt)
                     stat = alter(reply->qual[q_cnt].container_serv_res[c_cnt]
                            .assays[a_cnt].results, r_cnt + 10)
                  endif
               endif
               if (r_cnt > max_r_cnt)
                  max_r_cnt = r_cnt
               endif
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results_cnt = r_cnt
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].perform_result_id = pr.perform_result_id
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_id = r.result_id
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_status_cd = r.result_status_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_type_cd = pr.result_type_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].normal_cd = pr.normal_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].critical_cd = pr.critical_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].review_cd = pr.review_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].delta_cd = pr.delta_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].normal_low = pr.normal_low
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].normal_high = pr.normal_high
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].normal_alpha = pr.normal_alpha
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_value_cd = pr.result_value_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_value_numeric = pr.result_value_numeric
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_value_alpha = pr.result_value_alpha
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_value_dt_tm = pr.result_value_dt_tm
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_value_text = pr.result_value_text
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].perform_personnel_id = pr.perform_personnel_id
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].perform_personnel_name = pl.name_full_formatted
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].perform_dt_tm = pr.perform_dt_tm
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].perform_result_updt_cnt = pr.updt_cnt
               reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                 .results[r_cnt].result_updt_cnt = r.updt_cnt
               if (result_comment_yn = "Y")
                  reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .results[r_cnt].result_comment_ind = 1
               else
                  reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .results[r_cnt].result_comment_ind = 0
               endif
            endif
  
         foot ptr.task_assay_cd
            row+0

         foot osrc.service_resource_cd
            row+0

         foot osrc.container_id
            row+0

         foot osrc.order_id
            row+0

         with 
            nocounter,
            outerjoin = d1,
            dontcare = p,
            outerjoin = d2, 
            outerjoin = d3,
            dontcare = dm,
            outerjoin = d4,
            outerjoin = d5,
            dontcare = pl,
            outerjoin = d6,
            maxqual(rc, 1)

      /***********************************************************************
      * Select to determine if order comment exists                          *
      ***********************************************************************/
         if (q_cnt = 0)
            go to Resize_Reply
         endif

         /* Get order comment code value */
         select into "nl:"
            cv.code_value
         from
            code_value cv
         where cv.code_set = ORDER_COMMENT_CODESET
           and cv.cdf_meaning = ORDER_COMMENT_CDF
         detail
            order_comment_type_cd = cv.code_value
         with nocounter

         /* Determine if order comment exists */
         select into "nl:"
            d.seq,
            oc.order_id,
            oc.action_sequence,
            oc.comment_type_cd

         from
            (dummyt d with seq = value(q_cnt)),
            order_comment oc

         plan d
         join oc where oc.order_id = reply->qual[d.seq].order_id
                   and oc.action_sequence <= reply->qual[d.seq].last_action_sequence
                   and oc.comment_type_cd = order_comment_type_cd

         head oc.order_id
            idx = d.seq

         detail
            row+0

         foot oc.order_id
            reply->qual[idx].order_comment_ind = 1
            reply->qual[idx].order_comment_action_seq = oc.action_sequence

         with nocounter

      /***********************************************************************
      * Resize reply record                                                  *
      ***********************************************************************/
      #Resize_Reply
         if (q_cnt > 0)
            set reply->status_data.status = "S"    ;Successful
         else
            set reply->status_data.status = "Z"    ;Zero
            set q_cnt = 1
            set max_c_cnt = 1
            set max_a_cnt = 1
            set max_r_cnt = 1
         endif
         set stat = alter(reply->qual, q_cnt)
         set stat = alter(reply->qual[1].container_serv_res, max_c_cnt)
         set stat = alter(reply->qual[1].container_serv_res[1].assays, max_a_cnt)
         if (max_r_cnt = 0)
            set max_r_cnt = 1
         endif
         set stat = alter(reply->qual[1].container_serv_res[1].assays[1].results, max_r_cnt)

         end
         go      

;Generated by GNU enscript 1.6.4.
