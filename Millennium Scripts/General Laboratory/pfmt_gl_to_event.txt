 ;;Solution_Test/script/PathNet -- Gen Lab/pfmt_gl_to_event/pfmt_gl_to_event.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:       pfmt_gl_to_event.prg
        Object name:            pfmt_gl_to_event
        Request #:              120210 (request for event server)
 
        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Post results from lab activity to clinical
                                event table
 
        Tables read:            ce_coded_result
                                ce_event_prsnl
                                ce_string_result
                                clinical_event
                                code_value
                                code_value_event_r
                                container
                                dm_info
                                hla_xm_res_tray
                                interp_data
                                long_text
                                order_action
                                order_catalog
                                person_person_reltn
                                pn_recovery
                                profile_task_r
                                result_comment
                                v500_event_code
                                worklist_order_r
 
        Executing from:         Process Server
 
        Special Notes:          Triggered from following request numbers:
                                250074 (glb_upd_lab_results)
                                225193 (bbt_chg_results_correct)
                                225070 (bbt_upd_lab_results)
                                250218 (pn_get_recovery_results)
 
                                This script is a rewrite for the result recovery logic.
                                If the client does not have the result recovery logic installed,
                                the pn_results structure will not exist.  This script will call
                                the old pfmt_gl_to_event which is now named pfmt_gl_to_event_old.
 
******************************************************************************/
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 09/21/01 Gary Runde           Initial Release of rewrite          *
;    *001 03/20/02 Gary Runde           Result Recovery Logic               *
;    *002 08/21/02 Kevin Power          Resolve CE posting issue when       *
;    *                                  recovering multiple result events   *
;    *                                  for result at one time.             *
;    *003 11/24/02 Kevin Power          Resolve posting HLA recipient data  *
;    *                                  on 'performed results.'             *
;    *004 12/4/03  Amy Henry            Resolve posting HLA Typing RR on CE *
;    *                                  when a parent event already exists  *
;    *005 03/11/04 Andrew Dittrich      Added join to ORDER table to        *
;    *                                  return ORIG_ORDER_DT_TM and _TZ     *
;    *006 07/20/04 Jim Jensen           Set the event_class_cd of replyout  *
;    *                                  to be a date instead of a text type.*
;    *007 07/22/04 Jim Jensen           Retrieve ChartName for Special      *
;    *                                  Tesing/Antigen/ABORh results.       *
;    *008 08/30/04 Andrew Dittrich      Now uses                            *
;    *                                  glb_format_result_decimal.inc       *
;    *009 08/31/04 Craig Sumrall        Added request fields for signature  *
;    *010 06/08/05 Ronda Zheng          Fixed CR 1-319183641. Populate      *
;    *                                  comment_prsnl_id when               *
;    *                                  perform_personnel_id is different   *
;    *                                  than comment_prsnl_id.              *
;    *011 07/07/05 Jim Jensen           Updated to pass antigen/attribute   *
;    *                                  information to the Clinical Event   *
;    *                                  Server for crossmatches.            *
;    *012 01/17/06 Nick Smith           Handle scientific notation results  *
;    *013 04/21/06 Tim Sady (ts010410)  Added suppress_line_ind to request. *
;    *014 05/01/06 Jason Osborn         Populate multiple product antigen   *
;    *                                  results on the same product correctly*
;    *015 07/25/06 Jason Osborn         Correct issue with HLA Typings.     *
;    *016 12/06/06 Matt Schile          Adding posting of result alpha mnemonic*
;    *017 07/20/07 Abraham Areguy       Added posting of recvd_dt_tm     *
;    *018 10/04/07 Ronda Zheng          Fixed 1-1383457546. Return additional   *
;                                       DTAs for MDI and Computer/Flexible crossmatch*
;    *019 01/11/08 SR015537             Fix for defect 1-1550216988         *
;    *020 01/12/08 AR017304             Added Logic for LOINC Assignment    *
;    *021 04/03/08 MS011812             Multiple comments enhancement       *
;    *022 08/04/09 CG8820               Added support for Helix LOINC pref. *
;    *022 08/10/09 RD017636             Remove comments enhancement         *
;    *023 12/03/09 Ronda Zheng          Support blood bank LOINC assignment *
;    *024 02/02/10 Amy Gum              Add Clin Event Placeholder          *
;    *025 05/04/10 Amy Gum              Fix BB branch in Assignment Method  *
;    *026 05/28/10 CERKYP               Add Clin Event Placeholder for HLX  *
;    *027 11/02/10 Balaji Murali        Fix for CR 1-3993840231             *
;    *028 11/17/10 Balaji Murali        Fix for CR 1-4335484969             *
;    *029 04/24/12 Gayatri Samala       FIx for CR 1-5665655154 - skipping  *
;                                       control codes posting to clinical_event*
;                                       table for blood bank orderables     *
;    *030 12/03/12 Gayatri Samala       Fix for CR 1-6363059988 - Cells and phases*
;                                       results for the blood bank procedures*
;                                       remain on the pn_recovery table.    *
;    *031 1/23/14 MK019358              Fix for CR 1-7705684152             *
;    *032 05/02/14 Hal Patchen          Check fixed width font preference   *
;~DE~************************************************************************
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program pfmt_gl_to_event:dba go
create program pfmt_gl_to_event:dba

%i cclsource:bbt_ce_product_antigen.inc
%i cclsource:glb_format_result_decimal.inc
%i cclsource:glb_script_logging.inc
%i cclsource:pn_assay_info.inc
%i cclsource:pcs_preference_manager.inc

/* To create request for 1040001 (PCS_ADD_RES_CD_ARGS) */
%i cclsource:pm_dynamic_query.inc
%i cclsource:pm_create_request.inc

/****************************************************************************
* Internationalization                                                       *
*****************************************************************************/
 
   ; INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
   ; INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
   set i18nHandle = 0
   ; CALL UAR_I18NLOCALIZATIONINIT
   set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)
   set log_program_name = "pfmt_gl_to_event"
 
   call log_message("Starting PMFT_GL_TO_EVENT", log_level_debug)
   
   declare PopulateEventNoteIds() = NULL with protect
   declare ProcessInboundRefCds() = null with protect

   declare PopulatePerformPersonnel() = NULL with protect
   declare LoadSystemPersonnel() = NULL with protect
   declare dSystemPersonId = f8 with protect, noconstant(0.0)
 
   /***********************************************************************
   * Verify client has result recovery logic installed,                   *
   * if not call old pmft_gl_to_event script                              *
   ***********************************************************************/
   ;check for failure from prolog script
   if ( CD->failure_occurred_ind = 1 )
     call log_message("Exit script because CD->failure_occurred_ind = 1", log_level_warning)
     set reqinfo->commit_ind = 0
     go to EXIT_SCRIPT
   endif

   if ( validate( pn_results->list_idx, -1 ) = -1 )
     call log_message("PN_RESULTS structure does not exist, call old gl_to_event", log_level_debug)

     execute pfmt_gl_to_event_old
     go to EXIT_SCRIPT
   endif
  
   ;check for orders to process
   if ( size(pn_results->orders, 5) = 0 )
     call log_message("Exit script because no orders found to process", log_level_debug)
     set reqinfo->commit_ind = 0
     go to EXIT_SCRIPT
   endif
  
   if (CD->cerner_prsnl_id = 0)
      set CD->cerner_prsnl_id = pn_results->orders[1].event_personnel_id
   endif
 
   /************************************************************************
   * Declare request and reply record to pass signature line parameters    *
   ************************************************************************/
   record request
   (
     1  verified_prsnl_id     = f8
     1  verified_dt_tm        = dq8
     1  verified_tz           = i4
     1  task_assay_cd         = f8
     1  row_qual[*]
        2  line_num           = i4
        2  col_qual[*]
           3  position        = i4
           3  value           = c200
           3  max_size        = i4
           3  literal_display = c100
           3  literal_size    = i4
        2  suppress_line_ind  = i2
     1  max_cols              = i4
     1  called_ind            = c1
     1  perform_prsnl_id      = f8
     1  perform_dt_tm         = dq8
     1  perform_tz            = i4
   )
   
   call cr_createRequest(0, 1040001, "req1040001")
 
   record reply
   (
     1 signature_line  = vc
%i cclsource:status_block.inc
   )
 
   /************************************************************************
   * Declare vc_string record to hold comments and note information        *
   ************************************************************************/
 
   record vc_string
   (
     1  curr_long_text = vc
     1  curr_dt_tm     = dq8
     1  curr_tz        = i4
     1  curr_prsnl_id  = f8
   )
 
   /******************************************************************/
   /* Main Processing                                                */
   /******************************************************************/
 
   ;check the app_mode_ind
   ;if the value is greater than 100 then, then Clinical Event server
   ;was called from frontend application
   if ( pn_results->app_mode_ind > 100 )
     call log_message("Exit script because app_mode_ind > 100", log_level_debug)
 
     set reqinfo->commit_ind = 0
     go to EXIT_SCRIPT
   endif
 
   /******************************/
   /* Log in Override Mode?      */
   /******************************/
   select into "nl:"
     dm.info_char
   from dm_info dm
   where dm.info_domain = "PATHNET GENERAL LAB"
     and dm.info_name = "OVERRIDE GL TO EVENT"
   detail
     if (dm.info_char = "L")
       log_override_ind = 1
     else
       log_override_ind = 0
     endif
   with nocounter
 
   if (error_message(0) > 0)
     set reqinfo->commit_ind = 0
     go to exit_script
   endif
 
 
   /******************************/
   /* Sequence Outbound Results? */
   /******************************/
   declare outbound_seq_ind       = i2 with public, noconstant(0)
 
   select into "nl:"
     dm.pref_nbr
   from dm_prefs dm
   where dm.pref_domain = "PATHNET GLB"
     and dm.pref_section = "RESULTENTRY"
     and dm.pref_name = "SeqOCFResults"
   detail
     if (dm.pref_nbr = 1)
       outbound_seq_ind = 1
     else
       outbound_seq_ind = 0
     endif
   with nocounter
 
   if (error_message(0) > 0)
     set reqinfo->commit_ind = 0
     go to exit_script
   endif
 
   call log_message(build("outbound_seq_ind-->", outbound_seq_ind), log_level_debug)
 
#BEGIN_SCRIPT
 
   /******************************/
   /* Declare variables          */
   /******************************/
 
   declare pn_failure_cnt          = i4 with public, noconstant(0)
   declare CurrOrderIndx           = i4 with public, noconstant(0)
   declare NumAssays               = i4 with public, noconstant(0)
   declare activity_subtype_mean   = c12 with public, noconstant(fillstring(12, ' '))
 
   declare nBlobResultCnt          = i4 with public, noconstant(0)
   declare nBlobCnt                = i4 with public, noconstant(0)
   declare nStringResultCnt        = i4 with public, noconstant(0)
   declare nCodedResultCnt         = i4 with public, noconstant(0)
   declare nDateResultCnt          = i4 with public, noconstant(0)
   declare nSpecimenCnt            = i4 with public, noconstant(0)
   declare nMinDigits              = i4 with public, noconstant(0)
   declare nMaxDigits              = i4 with public, noconstant(0)
   declare nMinDecPlaces           = i4 with public, noconstant(0)
   declare nLessGreatFlag          = i4 with public, noconstant(0)
   declare nSciNotationInd         = i2 with public, noconstant(0)
   declare correct_ind             = i2 with public, noconstant(0)
   declare use_product_level_ind   = i2 with public, noconstant(0)
   declare nComment_added_ind      = i2 with public, noconstant(0)
   declare nLvlOneIndx             = i4 with public, noconstant(0)
   declare nLvlTwoIndx             = i4 with public, noconstant(0)
   declare d_curr_product_id       = f8 with public, noconstant(0.0)
   declare d_curr_bb_result_id     = f8 with public, noconstant(0.0)
   declare hold_set_name           = vc with public, noconstant("")
   declare d_curr_specimen_id      = f8 with public, noconstant(0.0)
   declare d_curr_container_id     = f8 with public, noconstant(0.0)
   declare nCommentIndx            = i4 with public, noconstant(0)
   declare subtablemap             = i4 with public, noconstant(0)
   declare nEventPrsnlIndx         = i4 with public, noconstant(0)
   declare nAssayIndx              = i4 with public, noconstant(0)
   declare dResult_Type_cd         = f8 with public, noconstant(0.0)
   declare stat                    = i4 with public, noconstant(0)
   declare dta_seq                 = i4 with public, noconstant(0)
   declare CLIN_EVENT_LEVEL_ONE    = i4 with public, noconstant(1)
   declare CLIN_EVENT_LEVEL_TWO    = i4 with public, noconstant(2)
   declare CLIN_EVENT_LEVEL_THREE  = i4 with public, noconstant(3)
   declare sChartDisplay           = vc with public, noconstant("")
   declare d_curr_specimen_type_cd = f8 with public, noconstant(0.0)
   declare use_recvd_dt_tm_ind     = i2 with protect, noconstant(0)
   declare comment_pref_loaded_ind = i2 with protect, noconstant(0)
   declare post_one_comment        = vc with protect, noconstant("")
   declare pref_use_fixed_width_font = vc with protect, noconstant(" ")
   declare pref_idx                = i4 with protect, noconstant(0)
   declare loc_facility_cd         = f8 with protect, noconstant(0.0)
 
   ;Feature 165264
   declare GetAssignmentMethod(NULL) = f8 with protect
   declare isPreferenceLoaded(activityTypeMeaning = vc) = i2 with protect

   ; Feature 200139
   declare lCommentCnt             = i4 with protect, noconstant(0)
   declare nPopulateResComInd      = i2 with protect, noconstant(0)
   declare nPopulateResNoteInd     = i2 with protect, noconstant(0)
   declare nTextNotBlankInd        = i2 with protect, noconstant(0)
   declare nResComPopulatedInd     = i2 with protect, noconstant(0)
   declare nResNotePopulatedInd    = i2 with protect, noconstant(0)

   declare ARG_DB_CD               = f8 with protect, noconstant(uar_get_code_by("MEANING" , 4002244 , "ARG_DB"))   

   ;Feature 165264
  Subroutine isPreferenceLoaded(activityTypeMeaning)
		declare idx = i2 with protect, noconstant(1)
		for(idx = 1 to size(context->activity_type_list,5))
			if(trim(activityTypeMeaning) = trim(context->activity_type_list[idx].activity_type_meaning))			
				return (1)
			endif 
		endfor		
		return (0)
	End
	

   ;Feature 165264
 	Subroutine GetAssignmentMethod(NULL)
 		declare assigment_method_cd = f8 with protect, noconstant(0.0)
 	 	;Determine the activity type
	  case (pn_results->orders[CurrOrderIndx].activity_type_mean)
	    of "GLB":
	      set assigment_method_cd = uar_get_code_by("MEANING", 4002244, "TMS")
	    of "HLX":                                                                   ;022
	      set assigment_method_cd = uar_get_code_by("MEANING", 4002244, "TMS")      ;022
	    of "BB":
          if (pn_results->orders[CurrOrderIndx]->bb_process_cd in (cd->ab_id_proc_ord_type_cd, cd->antigen_proc_ord_type_cd))
            set assigment_method_cd = uar_get_code_by("MEANING", 4002244, "BBCODE")
          else
            set assigment_method_cd = uar_get_code_by("MEANING", 4002244, "BBTEST")
          endif          
        
          call log_message(
      			build("Assignment method code->", assigment_method_cd, "for->", pn_results->orders[CurrOrderIndx].order_id)
      			,log_level_audit)
	  endcase      

    return (assigment_method_cd)
 	End
 	

  /****************************************************/
  /* LoadSystemPersonnel used to populate the USER SYSTEM
  person ID, which will be used as default for perform personnel 
  or event personnel  */
  /****************************************************/ 
  subroutine LoadSystemPersonnel(NULL)
    call log_message("Start LoadSystemPersonnel",log_level_debug)

    SELECT 
      INTO "NL:" 
    FROM 
      PRSNL p
    WHERE 
      p.username = "SYSTEM"
    DETAIL
      dSystemPersonId = p.person_id
    WITH nocounter

    call log_message(build("System Personnel ID = ",dSystemPersonId),log_level_debug) 		
    call log_message("End LoadSystemPersonnel",log_level_debug) 		
    
  end ;end subroutine LoadSystemPersonnel
 	
  /****************************************************/
  /* PopulatePerformPersonnel used to populate the performed personnel
  or event personnel to avoid exeptions during posting results to clinical    
  Event server. Executed for Helix Orders/ associated assays only  */
  /****************************************************/ 	
  subroutine PopulatePerformPersonnel(NULL)
    call log_message("Start PopulatePerformPersonnel",log_level_debug)

    ;Perform Query operation only if the perform_personnel_id is not populated
    ;Performed personnel will be zero in case of orders performed by Device or Discern Rule    
    if(pn_results->orders[CurrOrderIndx]->assays[nAssayIndx]->perform_personnel_id <= 0)
 
      SELECT
        INTO "NL:"
      FROM
        RESULT r, RESULT_EVENT re
      PLAN r WHERE r.order_id = pn_results->orders[CurrOrderIndx]->order_id
          AND r.task_assay_cd =  pn_results->orders[CurrOrderIndx]->assays[nAssayIndx]->task_assay_cd
      JOIN re WHERE re.result_id = r.result_id
          AND re.event_personnel_id > 0.0
      ORDER BY re.perform_result_id
 
      DETAIL
          pn_results->orders[CurrOrderIndx]->assays[nAssayIndx]->perform_personnel_id = re.event_personnel_id
      WITH nocounter
      
      if(pn_results->orders[CurrOrderIndx]->assays[nAssayIndx]->perform_personnel_id <= 0)
        ;If the result_event table contains 0 personnel then use the SYSTEM user person ID
        set pn_results->orders[CurrOrderIndx]->assays[nAssayIndx]->perform_personnel_id = dSystemPersonId      	
      endif

      if(pn_results->orders[CurrOrderIndx].event_personnel_id <= 0)
        set pn_results->orders[CurrOrderIndx].event_personnel_id = dSystemPersonId
      endif
      
      if (error_message(0) > 0)
        call log_message("Error executing PopulatePerformPersonnel" ,  log_level_debug )
      endif      

      call log_message(build("perform_personnel_id = ",
      pn_results->orders[CurrOrderIndx]->assays[nAssayIndx]->perform_personnel_id),  log_level_debug)
 
    endif	

    call log_message ("End PopulatePerformPersonnel",log_level_debug)		

  end ;End of subroutine PopulatePerformPersonnel
  
  
 
  /****************************************************/
  /* Validate context to see if we have another order */
  /****************************************************/
  if ( validate( context->NumOrders, -1 ) = -1 )
   
 
    ;define context record because it does not exist
    record context
     (
       1  CurrOrderIndx          = i4
       1  NumOrders              = i4
       1  hlacnt                 = i4
       1  ProcessHLARecipientInd = i2
       1  hla_recipients[*]
        2 event_id             = f8
        2 event_dt_tm          = dq8
        2 event_tz             = i4
        2 event_personnel_id   = f8
      ;Feature 165264    
      1 activity_type_list[*]
     	 2 activity_type_meaning = vc
    )
     
    declare notfnd = vc with protect, constant("<not_found>")
    declare sActivityType = vc with protect,noconstant("")
    declare sLOINCPref = vc with protect,noconstant("")	
    declare nPrefIdx = i2 with protect, noconstant(0) 
    declare num = i4 with protect, noconstant(1)

    ;Feature 165264 
    ;Load LOINC preference        
    if(LoadPreferences("system", "", "", "", "config", "Laboratory") = 1)
        Set nPrefIdx = FindPreference("activate loinc service")
        if(nPrefIdx > 0)
          set sLOINCPref = GetPreferenceValue(nPrefIdx)
          set sLOINCPref = concat(sLOINCPref,"|")
          while (piece(sLOINCPref,'|',num,notfnd) != notfnd)
            set num =  num + 1 
          endwhile  
          
          set stat = alterlist(context->activity_type_list,num - 1)
          set num = 1
          ;Get the preference value
          while (sActivityType != notfnd)
            set sActivityType = piece(sLOINCPref,"|",num,notfnd) 
            case (sActivityType)
            of "General Lab":
              set context->activity_type_list[num].activity_type_meaning = "GLB"
            of "Blood Bank":
              set context->activity_type_list[num].activity_type_meaning = "BB"
            of "HLA":
              set context->activity_type_list[num].activity_type_meaning = "HLA"
            of "Helix":                                                             ;022
              set context->activity_type_list[num].activity_type_meaning = "HLX"    ;022
            endcase
            set num = num + 1
          endwhile
        endif 
    endif  
      
    set context->CurrOrderIndx = 1
    set context->NumOrders = size(pn_results->orders, 5)
    set context->hlacnt = 0
 
    call log_message(build("create context record with numOrders->",
             context->NumOrders), log_level_debug)
 
  else    ;context record exists, check current order for in process
 
     call log_message("context record already exists", log_level_debug)
 
     ;check the in_process_flag for the previous order
     set CurrOrderIndx = context->CurrOrderIndx
 
     call log_message(build("CurrOrderIndx->", CurrOrderIndx), log_level_debug)
 
     ;check to make sure that we are processing the Orders structure still and not the
     ;hla_recipients logic.  Only call the CheckNoEventCds structure for orders processing
     if (context->CurrOrderIndx <= context->NumOrders)
       ;call subroutine to check the previous order to see if no event_cd's were found
       ;if no_event_cd's were found for the task assay,
       ;the pn_recovery_* rows will be deleted
       if (CheckNoEventCds ( 0 ) = 0)
         set reqinfo->commit_ind = 0
         go to exit_script
       endif
 
       if ( pn_results->orders[CurrOrderIndx].in_process_ind = 1)
         call log_message(build("OrderID in_process_ind = 1, OrderID==>",
                 pn_results->orders[CurrOrderIndx].order_id), log_level_debug)
 
         call log_message("Set the pn_recovery row to available for this order", log_level_debug)
 
         ;the clinical event server failed on this, set it back to be available
 
         set pn_results->orders[CurrOrderIndx].in_process_ind = 0
         set pn_results->orders[CurrOrderIndx].success_ind = 0
 
         ;retrieve the failure_cnt from pn_Recovery row.
         select into "nl:"
           pr.pn_recovery_id,
           pr.failure_cnt
         from pn_recovery pr
         where pr.pn_recovery_id = pn_results->orders[CurrOrderIndx].pn_recovery_id
         detail
           pn_failure_cnt = pr.failure_cnt
         with nocounter
 
         if (error_message(0) > 0)
           set reqinfo->commit_ind = 0
           go to exit_script
         endif
 
         ;if row found, then update row.and set the pn_recovery in_process_flag
         ;to a zero and increment failure_cnt,
         ;updt_cnt, last_failure_dt_tm and updt_dt_tm
         if (curqual > 0)
 
           update into pn_recovery pr
           set
             pr.in_process_flag = 0,
             pr.expire_dt_tm = cnvtdatetime(curdate, curtime3),
             pr.failure_cnt = pn_failure_cnt + 1,
             pr.last_failure_dt_tm = cnvtdatetime(curdate, curtime3),
             pr.updt_cnt = pr.updt_cnt + 1,
             pr.updt_dt_tm = cnvtdatetime(curdate, curtime3),
             pr.updt_id = reqinfo->updt_id,
             pr.updt_applctx = reqinfo->updt_applctx,
             pr.updt_task = reqinfo->updt_task
           plan pr
             where pr.pn_recovery_id = pn_results->orders[CurrOrderIndx].pn_recovery_id
           with nocounter
 
           if (error_message(0) > 0)
             set reqinfo->commit_ind = 0
             go to exit_script
           endif
 
           if (validate(XXDEBUG, -99) = -99)
             commit
           endif

           ;update the first_failure_dt_tm if this is the first failure
           if (pn_failure_cnt = 0)
 
             call log_message("First failure, set the first_failure_dt_tm", log_level_debug)
 
             update into pn_recovery pr
             set
               pr.first_failure_dt_tm = cnvtdatetime(curdate, curtime3)
             plan pr
               where pr.pn_recovery_id = pn_results->orders[CurrOrderIndx].pn_recovery_id
             with nocounter
 
             if (error_message(0) > 0)
               set reqinfo->commit_ind = 0
               go to exit_script
             endif
 
             if (validate(XXDEBUG, -99) = -99)
               commit
             endif
           endif
 
         endif         ;if (curqual > 0)
 
       endif        ;if ( in_process_ind = 1)
 
     else
       call log_message("CheckNoEventCds not called -- order index not found", log_level_debug)
     endif
 
     ;increment the current order index
     set context->CurrOrderIndx = context->CurrOrderIndx + 1
 
   endif

   ;check for the end of the orders and hla recipients exist
 if ((context->CurrOrderIndx > context->NumOrders) and
       (context->hlaCnt > 0) and
       (context->ProcessHLARecipientInd = 1))
 
     call log_message("No more orders, processing hla recipients", log_level_debug)
     call log_message(build("context->hlaCnt-->", context->hlaCnt), log_level_debug)
 
     ;Process recipients related to the donor for which
     ;this order was placed (if any).
     ;Update the event end date and time so that they
     ;will be picked up by charting.
     set hlacnt = context->hlacnt
     set reqinfo->commit_ind = 1
     If (curutc = 1)
	 set replyout->override_pat_context_tz = context->hla_recipients[hlacnt]->event_tz
     endif
 
     set replyout->ensure_type = 2
 
     set replyout->clin_event->event_id =
           context->hla_recipients[hlacnt]->event_id
     set replyout->clin_event->view_level_ind = 1
     set replyout->clin_event->event_start_dt_tm_ind = 1
     set replyout->clin_event->event_end_dt_tm =
           cnvtdatetime(curdate, curtime3)
     if(curutc = 1)
        set replyout->clin_event->event_end_tz =
           context->hla_recipients[hlacnt]->event_tz
        set replyout->clin_event->verified_tz =
             context->hla_recipients[hlacnt]->event_tz
     endif
     ;Populate prsnl subtable in order to update
     ;verified_dt_tm
     set replyout->clin_event->subtable_bit_map = 1
     set stat = alterlist( replyout->clin_event->event_prsnl_list, 1 )
     set replyout->clin_event->event_prsnl_list[1]->
           action_type_cd = CD->ce_verify_status_cd
     set replyout->clin_event->event_prsnl_list[1]->
           action_dt_tm = context->hla_recipients[hlacnt]->event_dt_tm
     set replyout->clin_event->event_prsnl_list[1]->
           action_dt_tm_ind = 0
    if(curutc = 1)
        set replyout->clin_event->event_prsnl_list[1]->
           action_tz = context->hla_recipients.event_tz
    endif
    set replyout->clin_event->event_prsnl_list[1]->
           action_prsnl_id = context->hla_recipients[hlacnt]->event_personnel_id
     set replyout->clin_event->event_prsnl_list[1]->
           action_status_cd = CD->ce_cplt_status_cd
     set replyout->clin_event->verified_dt_tm =
           context->hla_recipients[hlacnt]->event_dt_tm
     set 