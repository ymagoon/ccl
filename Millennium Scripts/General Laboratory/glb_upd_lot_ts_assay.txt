 ;;Solution_Test/script/PathNet -- Gen Lab/glb_upd_lot_ts_assay/glb_upd_lot_ts_assay.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_UPD_LOT_TS_ASSAY.PRG
        Object name:            GLB_UPD_LOT_TS_ASSAY
        Request #:              257514

        Product:                General Lab - Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Update assay info for a given test site
                                into the database

        Tables read:            n/a

        Tables updated:         assay_resource_lot
                                qc_alpha_response

        Executing from:         General Lab Build/Maintain QC Material

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 07/11/96 Chad Moats           Initial Release                     *
;     001 06/17/98 Chad Moats           Updt the Beg/End Effective Dt Tm    *
;     002 10/07/98 Chad Moats           Fix for removing all assays         *
;    *003 09/07/00 Gary Runde           Add check to make sure performed    *
;    *                                  results don't exist before          *
;    *                                  inactivating ARL rows               *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_UPD_LOT_TS_ASSAY:dba go
      create program GLB_UPD_LOT_TS_ASSAY:dba

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 control_id                = f8
         1 lot_id                    = f8
         1 service_resource_cd       = f8
         1 nbr_assays                = i4                                       ;002
         1 assays[*]
           2 task_assay_cd           = f8
           2 mean                    = f8
           2 clinical_std_dev        = f8
           2 statistical_std_dev     = f8
           2 abs_low                 = f8
           2 abs_high                = f8
           2 manf_mean               = f8
           2 manf_std_dev            = f8
           2 manf_low                = f8
           2 manf_high               = f8
           2 rule_id                 = f8
           2 assay_updt_cnt          = i4
           2 nbr_responses           = i4
           2 alphas[*]
             3  nomenclature_id      = f8
             3  result_process_cd    = f8

      )
*/

/***********************************************************************
*  List of Assays to inactivate                                        *
***********************************************************************/
     record remove_assay
     (
         1  assays[*]
            2  arl_id                    = f8
     )

/***********************************************************************
* Reply Record                                                         *
***********************************************************************/
     record reply
     (
         1  found_qc_result              = i2
         1  qc_assay_disp                = vc
         1  assays[10]
            2  task_assay_cd             = f8
            2  qc_result_updt_cnt        = i4
%i cclsource:status_block.inc
      )


/**********************003 BEGIN NEW CODE *************************************/
	    set failed = "F"                    
	    
	    ;get the performed status code value
	    declare result_status_performed = f8
	    set stat = uar_get_meaning_by_codeset(1901, "PERFORMED", 1, result_status_performed)
        declare result_type_alpha_cd = f8
	    set stat = uar_get_meaning_by_codeset(289, "2", 1, result_type_alpha_cd)

	    set reply->found_qc_result = 0
	    
      /***********************************************************************
      * Check to see if ARL id exists on performed result                    *
      ***********************************************************************/
        subroutine check_arl_id ( arg_arl_id, arg_lot_id, arg_resource_cd )
         set found_qc_result = 0
         set temp_assay_cd = 0.0
         declare temp_assay_disp = vc

         if (arg_arl_id > 0 )
           ;if we want to check for results by arl_id then do the following select
           ;plan off of the assay_resource_lot table, since the 
           ;qc_result table does not have a index on the arl_id
           ;join to the qc_result table by lot_id, servrescd, taskassaycd because there
           ;is an index for that
           select into "nl:"
              arl.arl_id,
              qr.qc_group_id,
              qr.arl_id,
              qr.result_status_cd
           from assay_resource_lot arl,
                qc_result qr
           plan arl
             where arl.arl_id = arg_arl_id
           join qr
             where arl.lot_id = qr.lot_id
               and arl.task_assay_cd = qr.task_assay_cd
               and arl.service_resource_cd = qr.service_resource_cd
               and qr.result_status_cd = result_status_performed
           order by qr.task_assay_cd
           head qr.task_assay_cd
              found_qc_result = 1
              temp_assay_cd = qr.task_assay_cd
           with nocounter
           
         else
           ;else look for qc results by the lot_id / resource_cd
           select into "nl:"
              qr.qc_group_id,
              qr.arl_id,
              qr.result_status_cd
           from qc_result qr
           plan qr
             where qr.lot_id = arg_lot_id
               and qr.service_resource_cd = arg_resource_cd
               and qr.result_status_cd = result_status_performed
           order by qr.task_assay_cd
           head qr.task_assay_cd
              found_qc_result = 1
              temp_assay_cd = qr.task_assay_cd
           with nocounter
           		   	        
		 endif

         if (found_qc_result = 1)
            set reply->qc_assay_disp = uar_get_code_display(temp_assay_cd)
            set reply->found_qc_result = 1
		    set failed = "T"
		    go to exit_script
		 endif
		end

/**********************003 END NEW CODE *************************************/

      /***********************************************************************
      * Check to see if assay already on table                               *
      ***********************************************************************/
        declare check_assay ( none ) = i4
        subroutine check_assay ( none )
          select into "nl:"
            arl.lot_id,
            arl.service_resource_cd,
            arl.task_assay_cd
          from assay_resource_lot arl
          plan arl
            where arl.lot_id = request->lot_id
              and arl.service_resource_cd = request->service_resource_cd
              and arl.task_assay_cd = request->assays[a_cnt].task_assay_cd
              and arl.active_ind = 1
          detail
            g_updt_cnt = arl.updt_cnt + 1
          with
            nocounter
          return (curqual)
        end

      /***********************************************************************
      * Insert assay on table                                                *
      ***********************************************************************/
        declare insert_assay ( none ) = i4
        subroutine insert_assay ( none )

        SELECT
           into "nl:"
              y = seq(reference_seq,nextval) "##################;rp0"
        FROM
           dual
        DETAIL
           hold_arl_id = cnvtreal(y)
        WITH
           format, counter

        insert
          into assay_resource_lot a
        set
          a.arl_id              = hold_arl_id,
          a.lot_id              = request->lot_id,
          a.service_resource_cd = request->service_resource_cd,
          a.task_assay_cd       = request->assays[a_cnt].task_assay_cd,
          a.mean                = request->assays[a_cnt].mean,
          a.clinical_std_dev    = request->assays[a_cnt].clinical_std_dev,
          a.statistical_std_dev = request->assays[a_cnt].statistical_std_dev,
          a.abs_low             = request->assays[a_cnt].abs_low,
          a.abs_high            = request->assays[a_cnt].abs_high,
          a.manf_mean           = request->assays[a_cnt].manf_mean,
          a.manf_std_dev        = request->assays[a_cnt].manf_std_dev,
          a.manf_low            = request->assays[a_cnt].manf_low,
          a.manf_high           = request->assays[a_cnt].manf_high,
          a.rule_id             = request->assays[a_cnt].rule_id,
          a.active_ind          = 1,
          a.beg_effective_dt_tm = cnvtdatetime(curdate,curtime3),                       ;001
          a.end_effective_dt_tm = cnvtdatetime("31-dec-2100 00:00:00.00"),              ;001
          a.updt_dt_tm          = cnvtdatetime(curdate,curtime),
          a.updt_cnt            = 0,
          a.updt_task           = reqinfo->updt_task,
          a.updt_id             = reqinfo->updt_id,
          a.updt_applctx        = reqinfo->updt_applctx
        plan a
        with
          nocounter
        return (curqual)
        end

      /***********************************************************************
      * Update assay on table                                                *
      ***********************************************************************/
        declare update_assay ( none ) = i4
        subroutine update_assay ( none )
        set hold_arl_id = 0.0

        select into "nl:"
          a2.arl_id
        from assay_resource_lot a2
        where (a2.lot_id = request->lot_id)
          and (a2.service_resource_cd = request->service_resource_cd)
          and (a2.task_assay_cd = request->assays[a_cnt].task_assay_cd)
          and (a2.active_ind = 1)
          and ((a2.mean != request->assays[a_cnt].mean) or
               (a2.clinical_std_dev != request->assays[a_cnt].clinical_std_dev) or
               (a2.statistical_std_dev != request->assays[a_cnt].statistical_std_dev) or
               (a2.abs_low != request->assays[a_cnt].abs_low) or
               (a2.abs_high != request->assays[a_cnt].abs_high) or
               (a2.manf_low != request->assays[a_cnt].manf_low) or
               (a2.manf_high != request->assays[a_cnt].manf_high) or
               (a2.manf_mean != request->assays[a_cnt].manf_mean) or
               (a2.manf_std_dev != request->assays[a_cnt].manf_std_dev) or
               (a2.rule_id != request->assays[a_cnt].rule_id))
        detail
          hold_arl_id = a2.arl_id
        with
          nocounter

        if (hold_arl_id > 0)
           call check_arl_id (hold_arl_id, 0.0, 0.0)           ;003
           update
             into assay_resource_lot a2
           set
             a2.active_ind          = 0,
             a2.end_effective_dt_tm = cnvtdatetime(curdate,curtime3),              ;001
             a2.updt_dt_tm          = cnvtdatetime(curdate,curtime),
             a2.updt_cnt            = a2.updt_cnt + 1,
             a2.updt_task           = reqinfo->updt_task,
             a2.updt_id             = reqinfo->updt_id,
             a2.updt_applctx        = reqinfo->updt_applctx
           plan a2
              where a2.arl_id = hold_arl_id
           with
             nocounter
           return (curqual)
        else
           return (0)
        endif


        end

      /***********************************************************************
      * Delete all alpha responses on table                                  *
      ***********************************************************************/
        declare delete_responses ( none ) = i4
        subroutine delete_responses ( none )
        
        set found_alpha = 0                                                        ;003
        ;check to make sure that these alpha responses are                         ;003
        ;not associated with a perf result                                         ;003
        select into "nl:"                                                          ;003
           qr.qc_group_id,                                                         ;003
           qr.arl_id,                                                              ;003
           qr.result_status_cd                                                     ;003
        from qc_result qr                                                          ;003
        plan qr                                                                    ;003
          where qr.service_resource_cd = request->service_resource_cd              ;003
            and qr.control_id = request->control_id                                ;003
            and qr.result_status_cd = result_status_performed                      ;003
            and qr.result_type_cd = result_type_alpha_cd                           ;003
        order by qr.task_assay_cd                                                  ;003
        head qr.task_assay_cd                                                      ;003
           found_alpha = 1                                                         ;003
        with nocounter                                                             ;003
        
        if (found_alpha = 1)                                                       ;003
           set reply->qc_assay_disp = "ALPHA"                                      ;003
           set reply->found_qc_result = 1                                          ;003
           set failed = "T"                                                        ;003
		   go to exit_script                                                       ;003
		endif                                                                      ;003
		
        delete
          from qc_alpha_responses q
        plan q
          where q.control_id = request->control_id
            and q.service_resource_cd = request->service_resource_cd
        with
          nocounter
        return (curqual)
        end

      /***********************************************************************
      * Insert alpha responses on table                                      *
      ***********************************************************************/
        declare insert_response ( none ) = i4
        subroutine insert_response ( none )
        insert
          into qc_alpha_responses q2
        set
          q2.control_id          = request->control_id,
          q2.task_assay_cd       = request->assays[a_cnt].task_assay_cd,
          q2.service_resource_cd = request->service_resource_cd,
          q2.nomenclature_id     = request->assays[a_cnt].alphas[r_cnt].nomenclature_id,
          q2.result_process_cd   = request->assays[a_cnt].alphas[r_cnt].result_process_cd,
          q2.updt_dt_tm          = cnvtdatetime(curdate,curtime),
          q2.updt_cnt            = 0,
          q2.updt_task           = reqinfo->updt_task,
          q2.updt_id             = reqinfo->updt_id,
          q2.updt_applctx        = reqinfo->updt_applctx
        with
          nocounter
        return (curqual)
        end

        /********************************************************************/
        /* Insert row into Resource_Assay_Control table if not existing     */
        /********************************************************************/
        declare check_control ( none ) = i4
        subroutine check_control ( none )
        select into "nl:"
           rar.control_id,
           rar.service_resource_cd,
           rar.task_assay_cd
        from
           resource_assay_control rar
        where
           rar.control_id = request->control_id and
           rar.service_resource_cd = request->service_resource_cd and
           rar.task_assay_cd = request->assays[a_cnt].task_assay_cd
        with
           nocounter

        if (curqual = 0)
          insert
            into resource_assay_control rar2
          set
            rar2.control_id          = request->control_id,
            rar2.service_resource_cd = request->service_resource_cd,
            rar2.task_assay_cd       = request->assays[a_cnt].task_assay_cd,
            rar2.updt_dt_tm          = cnvtdatetime(curdate,curtime),
            rar2.updt_cnt            = 0,
            rar2.updt_task           = reqinfo->updt_task,
            rar2.updt_id             = reqinfo->updt_id,
            rar2.updt_applctx        = reqinfo->updt_applctx
          with
            nocounter
        endif
        return (curqual)
        end

        /********************************************************************/
        /* Remove inactive assays                                           */
        /********************************************************************/
        declare check_inactive ( none ) = i4
        subroutine check_inactive ( none )

        if (assays_to_add > 0)

        select into "nl:"
           arl.lot_id,
           arl.arl_id
        from  assay_resource_lot arl,
              (dummyt d1 with seq = value(assays_to_add))
        plan d1
        join arl
        where arl.lot_id = request->lot_id and
          arl.service_resource_cd = request->service_resource_cd and
          arl.active_ind = 1
        head arl.arl_id
          found = 0
          for(i=1 to assays_to_add)
             if(arl.task_assay_cd = request->assays[i].task_assay_cd)
               found = 1
               i = assays_to_add
             endif
          endfor
          if (found = 0)
             remove_cnt = remove_cnt + 1
             if (mod(remove_cnt,5) = 1)
               stat = alterlist(remove_assay->assays,remove_cnt + 5)
             endif
             remove_assay->assays[remove_cnt].arl_id = arl.arl_id
          endif
        detail
          row+0
        with nocounter

        ;check all of the arl_id's before updating them                             ;003
        for (cnt = 1 to remove_cnt)                                                 ;003
           call check_arl_id (remove_assay->assays[cnt].arl_id, 0.0, 0.0)           ;003
        endfor                                                                      ;003

        update into assay_resource_lot arl,
          (dummyt d1 with seq = value(remove_cnt))
        set arl.active_ind = 0,
            arl.end_effective_dt_tm = cnvtdatetime(curdate,curtime3)            ;001
        plan d1
        join arl
          where arl.arl_id = remove_assay->assays[d1.seq].arl_id
         with
           nocounter,
           outerjoin = d1

        else

        ;check to make sure the ARL does not exist on a qc perf result                   ;003
        call check_arl_id (0.0, request->lot_id, request->service_resource_cd)           ;003

        update into assay_resource_lot arl
        set arl.active_ind = 0,
            arl.end_effective_dt_tm = cnvtdatetime(curdate,curtime3)            ;001
          where arl.lot_id = request->lot_id and
;002      where arl.arl_id = request->lot_id and
                arl.service_resource_cd = request->service_resource_cd and
                arl.active_ind = 1                                              ;002
         with
           nocounter

        endif
        return (curqual)
        end

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
     #Script
      set failed = "F"
      set lot_id = 0.0
      set reply->status_data->status = "F"

      declare stat                    = i4
      declare a_cnt                   = i4
      declare r_cnt                   = i4
      declare g_updt_cnt              = i4
      declare assays_to_add           = i4
      declare resp_to_add             = i4
      declare remove_cnt              = i4
      declare hold_arl_id             = f8

;002      set assays_to_add = size(request->assays,5)
      set assays_to_add = request->nbr_assays                                   ;002
      set stat = alter(reply->assays, assays_to_add)
 	  set hold_arl_id = 0.0 
      /* Add assays to the table */

      set stat = delete_responses ( 0 )
      set stat = check_inactive ( 0 )

      for (a_cnt = 1 to assays_to_add)
        set g_updt_cnt = 0
        if (check_assay( 0 ) = 0)
          if (insert_assay( 0 ) = 0)
            go to insert_assay_failed
          endif
        else
          if (update_assay( 0 ) > 0)
            if (insert_assay( 0 ) = 0)
              go to insert_assay_failed
            endif
          endif
        endif
        set reply->assays[a_cnt].task_assay_cd = request->assays[a_cnt].task_assay_cd
        set reply->assays[a_cnt].qc_result_updt_cnt = g_updt_cnt

        set resp_to_add = request->assays[a_cnt].nbr_responses
        if (resp_to_add > 0)
;          set stat = delete_responses ( 0 )
          for (r_cnt = 1 to resp_to_add)
            if (insert_response ( 0 ) = 0)
              go to insert_response_failed
            endif
          endfor
        endif
        if (check_control ( 0 ) = 0)
          go to insert_control_failed
        endif
      endfor
      go to exit_script

/********************************************************************/
/* Executed if insert to assay_resource_lot table fails             */
/********************************************************************/
     #insert_assay_failed
      set reply->status_data->subeventstatus[1]->operationname =
         "insert"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "F"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "assay_resource_lot table"
      set failed = "T"
      go to exit_script

/********************************************************************/
/* Executed if update to assay_resource_lot table fails             */
/********************************************************************/
     #update_assay_failed
      set reply->status_data->subeventstatus[1]->operationname =
         "update"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "F"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "assay_resource_lot table"
      set failed = "T"
      go to exit_script

/********************************************************************/
/* Executed if qc_alpha_responses table insert is unsuccessful.     */
/********************************************************************/
     #insert_response_failed
      set reply->status_data->subeventstatus[1]->operationname =
         "insert"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "F"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "qc_alpha_responses table"
      set failed = "T"
      go to exit_script

/********************************************************************/
/* Executed if control_assay_resource table insert is unsuccessful  */
/********************************************************************/
     #insert_control_failed
      set reply->status_data->subeventstatus[1]->operationname =
         "insert"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "F"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "resource_assay_control table"
      set failed = "T"
      go to exit_script

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
         commit
      else
         set reply->status_data->status = "F"
         rollback
      endif

END
GO

;Generated by GNU enscript 1.6.4.
