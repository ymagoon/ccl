 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_upd_qc_event_dt_tm/glb_rdm_upd_qc_event_dt_tm.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 2002 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_rdm_upd_qc_event_dt_tm.prg
        Object name:            glb_rdm_upd_qc_event_dt_tm
        Readme #:               2488

        Product:                PathNet
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            
        
        Program purpose:        The purpose of this script is to update the event_dt_tm
                                on the qc_result table.

        Tables read,            TABLE_NAME           METHOD (UNIQUE, RANGE, FULL)
    	and access method:      -------------------- -----------------------------
                                qc_result                 RANGE
                                qc_result_event           UNIQUE
                                resource_accession_r      FULL

        Tables updated:         qc_result
	                        
        Executing from:         Readme

        Special Notes:          None
	
    	Run Occurance:	        (select ONE of the following)
                                -----------------------------
                                [X] 1. RUN ONCE
                                [ ] 2. RUN MANY

        ReadMe Category:        (select ONE of the following)
                                -----------------------------
                                [ ] 1. Data Load
                                [X] 2. Data Conversion
                                [ ] 3. Data Migration

        Execution Time:         (select ONE of the following)
                                ------------------------------------
                                [ ] 1. Uptime before uptime schema.
                                [X] 2. Uptime after uptime schema.
	
        Exec. Justification:    Update the new event_dt_tm on the qc_result table.

        Parent Readme:          

        Check Script:           

        Data file for import:   
	
        Execution Duration:     (select ONE of the following)
                                ----------------------------------
                                [X] 1. Fixed Time
                                [ ] 2. Driver Table:

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 10/30/02 Gary Runde           Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program glb_rdm_upd_qc_event_dt_tm:dba go
create program glb_rdm_upd_qc_event_dt_tm:dba

%i cclsource:pathnet_ocd_subroutines.inc
%i cclsource:dm_seq_reply.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "glb_rdm_upd_qc_event_dt_tm"
CALL LOGSCRIPTSTART(sREADME_NAME)

declare sErrorMessage = vc with protect, noconstant("")
declare lErrorCode    = i4 with protect, noconstant(0) 
declare lSrCnt        = i4 with protect, noconstant(0) 
declare lSrIdx        = i4 with protect, noconstant(0) 
declare sFailure      = c1 with protect, noconstant("F") 
declare nContinueInd  = i2 with protect, noconstant(0) 
declare nUpdRangeInd  = i2 with protect, noconstant(0) 
declare lNumRanges    = i4 with protect, noconstant(0) 
declare lResultCnt    = i4 with protect, noconstant(0) 
declare lStat         = i4 with protect, noconstant(0) 

declare lTotalQCResults = i4 with protect, noconstant(0) 
declare lQcResultsUpd   = i4 with protect, noconstant(0)
declare nFoundInd       = i2 with protect, noconstant(0)

record qc_range
(
  1 beg_dt_tm = dq8
  1 end_dt_tm = dq8
)  

/***********************************************************************************
* Load each unique control_id / instrument from the resource_accession_r table     *
/**********************************************************************************/
record control_instruments
(
  1 qual[*]
    2 control_id          = f8
    2 service_resource_cd = f8
)

record qc_results
(
  1 qual[*]
    2 qc_result_id = f8
    2 event_dt_tm  = dq8
    2 is_null_ind = i2
)

;get total number of rows we will be updating on the qc_Result table
select into "nl:" 
from qc_Result q 
plan q where q.event_dt_tm = NULL
         and q.qc_result_type_flag = 0
foot report
  lTotalQCResults = count(q.qc_result_id)
with nocounter

call echo(build("Script start at-->", format(cnvtdatetime(curdate, curtime3), ";;q"), 
                "--with the number of results to be updated of-->", lTotalQCResults))

select into "nl:"
  rar.service_resource_cd
from
  resource_accession_r rar
plan rar
  where rar.service_resource_cd > 0.0
order by rar.control_id, rar.service_resource_cd
head rar.control_id
  row +0
head rar.service_resource_cd
  lSrCnt = lSrCnt + 1
  if (lSrCnt > size(control_instruments->qual, 5))
    lStat = alterlist(control_instruments->qual, lSrCnt + 9)
  endif
  
  control_instruments->qual[lSrCnt]->control_id = rar.control_id
  control_instruments->qual[lSrCnt]->service_resource_cd = rar.service_resource_cd
with nocounter

if (lSrCnt > 0)
  set lStat = alterlist(control_instruments->qual, lSrCnt)
endif

set lErrorCode = error(sErrorMessage, 0) 
if (lErrorCode != 0) 
  call logmsg ("Error loading instruments/controls from resource_accession_r.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
  call logmsg (sErrorMessage, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
  call logstatus("Execution Failure.", "F")
  go to exit_script
endif

/*************************************************
* Update qc_result event_dt_tm                   *
/*************************************************/

set sFailure = "F"

set nContinueInd = 1
set nUpdRangeInd = 1
set lNumRanges = 0

while (nUpdRangeInd = 1)

  set lNumRanges = lNumRanges + 1

  ;if we have not reached thirty days, still only update three days worth of data
  if (lNumRanges <= 10)
    set nUpdRangeInd = 1
    
    ;set beg to three days ago, then six days ago, then nine days ago, etc.
    set qc_range->beg_dt_tm = cnvtdatetime(curdate-3*lNumRanges, curtime3)

    ;set the beg time to be 23:59:59
    set qc_range->beg_dt_tm = cnvtdatetime(build(format(qc_range->beg_dt_tm, "DD-MMM-YYYY;;d"), " 23:59:59"))
    
    ;set end to current day, then three days, then six days ago, etc.
    set qc_range->end_dt_tm = cnvtdatetime(curdate-3*(lNumRanges-1), curtime3)
    
    ;set the end time to be 23:59:59
    set qc_range->end_dt_tm = cnvtdatetime(build(format(qc_range->end_dt_tm, "DD-MMM-YYYY;;d"), " 23:59:59"))
    
  else
    ;after thirty days update all of the data
    set nUpdRangeInd = 0
    
    ;set end to thirty days ago
    set qc_range->end_dt_tm = cnvtdatetime(curdate-30, curtime3)
    
    ;set the end time to be 23:59:59
    set qc_range->end_dt_tm = cnvtdatetime(build(format(qc_range->end_dt_tm, "DD-MMM-YYYY;;d"), " 23:59:59"))
    
    ;set beg to JAN-01-1990
    set qc_range->beg_dt_tm = cnvtdatetime("01-JAN-1990 00:00:00")
  endif
  
  call echo("Starting new date/time range of")
  call echo("***************************************************")
  call echo(build("Begin Date/time--->", format(qc_range->beg_dt_tm, ";;q")))
  call echo(build("Ending Date/time--->", format(qc_range->end_dt_tm, ";;q")))

  for (lSrIdx = 1 to lSrCnt)

    set nContinueInd = 1
    
    call echo(build("Current control ID---->", control_instruments->qual[lSrIdx]->control_id))
    call echo(build("Current Service Resource Code---->", control_instruments->qual[lSrIdx]->service_resource_cd))
    
    while (nContinueInd = 1)
      
      ;lock 3000 rows on the qc_result table
      ;load 3000 results into the qc_results record with their event_dt_tm
  
      set lResultCnt = 0
      
      set lStat = alterlist(qc_results->qual, 0)
      set nFoundNull = 0      

      select into "nl"
        qr.qc_result_id,
        qre.qc_result_id
      from 
        qc_result qr,
        qc_result_event qre
      plan qr
        where qr.control_id = control_instruments->qual[lSrIdx]->control_id
          and qr.service_resource_cd = control_instruments->qual[lSrIdx]->service_resource_cd
          and qr.perform_dt_tm between cnvtdatetime(qc_range->beg_dt_tm) and cnvtdatetime(qc_range->end_dt_tm)
          and qr.event_dt_tm = NULL
      join qre
        where qre.qc_result_id = qr.qc_result_id
          and qre.event_type_cd = qr.result_status_cd
      order by qr.qc_result_id
      head qr.qc_result_id
        lResultCnt = lResultCnt + 1
         
        if (lResultCnt > size(qc_results->qual, 5))
          lStat = alterlist(qc_results->qual, lResultCnt + 50)
        endif
        
        qc_results->qual[lResultCnt]->qc_result_id = qr.qc_result_id
        
        if (qre.event_dt_tm = NULL)
          nFoundNull = 1
          qc_results->qual[lResultCnt]->is_null_ind = 1
          qc_results->qual[lResultCnt]->event_dt_tm = qre.updt_dt_tm
        else
          qc_results->qual[lResultCnt]->event_dt_tm = qre.event_dt_tm
        endif
        
      with nocounter, maxqual(qr, 3000)
       
      if (lResultCnt > 0)
        set lQcResultsUpd = lQcResultsUpd + lResultCnt
        set lStat = alterlist(qc_results->qual, lResultCnt)

        if (nFoundNull = 1)
          select into "nl:"
          from (dummyt d1 with seq = value(lResultCnt)),
            qc_result_event qre
          plan d1
          join qre 
            where qre.qc_result_id = qc_results->qual[d1.seq]->qc_result_id
              and qc_results->qual[d1.seq]->is_null_ind = 1
              and qre.event_dt_tm = NULL
          with nocounter, forupdate(qre)
          
          update into 
	    (dummyt d1 with seq = value(lResultCnt)),
	    qc_result_event qre
	  set qre.event_dt_tm = qre.updt_dt_tm
	  plan d1
	  join qre
	    where qre.qc_result_id = qc_results->qual[d1.seq]->qc_result_id
	      and qc_results->qual[d1.seq]->is_null_ind = 1
	      and qre.event_dt_tm = NULL
	  with nocounter
        endif
	      
        select into "nl" 
        from (dummyt d1 with seq = value(lResultCnt)),
             qc_result qr
        plan d1
        join qr
          where qr.qc_result_id = qc_results->qual[d1.seq]->qc_result_id
        with nocounter, forupdate(qr)
  
        ;update the qc_results event_dt_tm for the 100 rows locked above
        update into 
          (dummyt d1 with seq = value(lResultCnt)),
          qc_result qr
        set
          qr.event_dt_tm = cnvtdatetime(qc_results->qual[d1.seq]->event_dt_tm),
          qr.updt_cnt    = qr.updt_cnt + 1,
          qr.updt_dt_tm  = cnvtdatetime(curdate, curtime3)
        plan d1
        join qr
          where qr.qc_result_id = qc_results->qual[d1.seq]->qc_result_id
        with nocounter
      else
        set nContinueInd = 0
      endif
    
      set lErrorCode = error(sErrorMessage, 0) 
      if (lErrorCode != 0) 
        rollback
        set nContinueInd = 0
        set sFailure = "T"
      else
        commit 
        
        if (lResultCnt > 0)
          call echo(build(lQcResultsUpd, "--of--", lTotalQCResults, " have been updated as of-->", 
                          format(cnvtdatetime(curdate, curtime3), ";;q")))
        endif
      endif
      
    endwhile
  endfor
endwhile

free set qc_results
free set control_instruments
free set qc_range


call echo(build("Script end at-->", format(cnvtdatetime(curdate, curtime3), ";;q")))

if (sFailure = "T") 
  call logmsg ("Error Updating qc_result event_dt_tm.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
  call logmsg (sErrorMessage, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
  call logstatus("Execution Failure.", "F")
else
  call logmsg ("Updated qc_result event_dt_tm successfully.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
  call logstatus("Execution Success.", "S")
endif

/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
#EXIT_SCRIPT
CALL LOGSCRIPTEND(sREADME_NAME)

end go

;Generated by GNU enscript 1.6.4.
