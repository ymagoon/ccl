 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_set_orv_fs_prefs/glb_rdm_set_orv_fs_prefs.prg Turn on black mode

/************************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-1995 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 ***********************************************************************/

/*****************************************************************************

    Source file name:       glb_rdm_set_orv_fs_prefs.prg
    Object name:            glb_rdm_set_orv_fs_prefs
    Readme #:               6829
 
    Product:                PathNet GENLAB
    Product Team:           PathNet GENLAB
    HNA Version:            500
    CCL Version:
    
    Program purpose:        Readme to set the default system level flowsheet and clinical notes dialog preferences
                            utilized by the PathNet Order Result Viewer application.
     
    Tables updated:         app_prefs,
                            detail_prefs,
                            name_value_prefs,
                            view_prefs,
                            view_comp_prefs
     
    Special Notes:          n/a
     
    Readme Type:    [X] 1. CCL Program
                    [ ] 2. CCL DBIMPORT
                    [ ] 3. Table Import

    Readme Category:[ ] 1. Data Conversion (change the values in a table)
                    [X] 2. Data Load (put new rows in a table)
                    [ ] 3. Data Migration (move data from one table to another)
                    [ ] 4. Other
                    [ ] 5. SQL Compile

    Execution Time: [ ] 1. Pre-UTS or Uptime, before uptime schema.
                    [X] 2. Post-UTS or Uptime, after uptime schema.  
                    [ ] 3. Pre-DTS or Downtime, before downtime schema.
                    [ ] 4. Post-DTS or Downtime, after downtime schema.    
                    [ ] 5. Post-Inst or Uptime, after downtime.
                    [ ] 6. Pre-Space Check for Pre-UTS Readmes.
                    [ ] 7. Post-Space Check for all other Readmes.

    Run Occurrence: [X] 1. Run Once 
                    [ ] 2. Run Many 

    Execution Duration:	
                    [X] 1. Fixed Time 
                    [ ] 2. Driver Table : [Add table name here]

    Intended Package Type :
                    [ ] 1. Cumulative Production Package (CPP)
                    [X] 2. Cumulative Support Package (CSP)
                    [ ] 3. Exception Package (for past CPPs)
                    [ ] 4. Content Package (KIA and PathNet â€“- Helix only)
                    [ ] 5. Other [Indicate Packaging Pipeline Here]

     
    Exec. Justification:    N/A
      
    Parent Script:          N/A
 
    Check Script:           N/A
 
    Data file for import:   N/A

     ;DB~*************************************************************************
     ;    *                      GENERATED MODIFICATION CONTROL LOG               *
     ;    *************************************************************************
     ;    *                                                                       *
     ;    *Mod Date     Engineer             Comment                              *
     ;    *--- -------- -------------------- -----------------------------------  *
     ;     000 07/11/11 Oliver Barbara       Initial Creation                     *
     /****************************************************************************/


drop program glb_rdm_set_orv_fs_prefs:dba go
create program glb_rdm_set_orv_fs_prefs:dba
 
%i cclsource:dm_readme_data.inc

; Default readme status is failure
set readme_data->status = 'F'
set readme_data->message = concat('FAILED STARTING README ', cnvtstring( readme_data->readme_id,32,2))


declare lErrorCode = i4 with protect, noconstant(0)
declare sErrorMessage = vc with protect, noconstant("")
declare update_pref_cnt = i4 with protect, noconstant(24)
declare new_name_value_prefs_id = f8 with protect, noconstant(0.0)
declare app_prefs_id = f8 with protect, noconstant(0.0)
declare dp_parent_entity_id = f8 with protect, noconstant(0.0)
declare parent_entity_name = vc with protect, noconstant("")
declare vp_id = f8 with protect, noconstant(0.0)


 /*************************************************
 * Retrieve display values from codeset 1902      *
 *************************************************/

declare sNormal_High_Disp  = vc with protect, noconstant("")
select into "nl:"
from code_value cv 
where cv.code_set = 1902 and cv.cdf_meaning = "NORMAL_HIGH" and cv.active_ind = 1
detail
   sNormal_High_Disp = cv.display
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from code_value table."
   go to EXIT_PROGRAM
endif


declare sNormal_Low_Disp  = vc with protect, noconstant("")
select into "nl:"
from code_value cv 
where cv.code_set = 1902 and cv.cdf_meaning = "NORMAL_LOW" and cv.active_ind = 1
detail
   sNormal_Low_Disp = cv.display
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from code_value table."
   go to EXIT_PROGRAM
endif


declare sCritical_Disp  = vc with protect, noconstant("")
select into "nl:"
from code_value cv 
where cv.code_set = 1902 and cv.cdf_meaning = "CRITICAL" and cv.active_ind = 1
detail
   sCritical_Disp = cv.display
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from code_value table."
   go to EXIT_PROGRAM
endif


declare sAlp_Abnormal_Disp  = vc with protect, noconstant("")
select into "nl:"
from code_value cv 
where cv.code_set = 1902 and cv.cdf_meaning = "ALP_ABNORMAL" and cv.active_ind = 1
detail
   sAlp_Abnormal_Disp = cv.display
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from code_value table."
   go to EXIT_PROGRAM
endif



 /*************************************************
 * Ensure the FLOWSHEET view exists.              *
 *************************************************/

declare orderview_frame_id = f8 with protect, noconstant(0.0)

select into "nl:"
from view_prefs vp
where vp.application_number = 250005 and vp.position_cd = 0.0 and vp.prsnl_id = 0.0 and
      vp.frame_type = "ORDERVIEW" and vp.view_name = "FLOWSHEET" and vp.active_ind = 1
detail
    orderview_frame_id = vp.view_prefs_id
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from view_prefs table."
   go to EXIT_PROGRAM
endif


if(orderview_frame_id = 0.0)

	select into "nl:"
	 j = seq(carenet_seq,nextval)
	from dual
	detail
	 orderview_frame_id = cnvtreal(j)
	with format, counter
	
	set lErrorCode = error(sErrorMessage, 0)
	if (lErrorCode > 0)
	   set readme_data->message = "Error selecting from dual table."
	   go to EXIT_PROGRAM
	endif

	insert into view_prefs vp
	set vp.view_prefs_id = orderview_frame_id,
		vp.application_number = 250005,
		vp.position_cd = 0.0,
		vp.prsnl_id = 0.0,
		vp.frame_type = "ORDERVIEW",
		vp.view_name = "FLOWSHEET",
		vp.view_seq = 1,
		vp.active_ind = 1,
		vp.updt_cnt = 0,
		vp.updt_id = reqinfo->updt_id,
		vp.updt_dt_tm = cnvtdatetime(curdate,curtime3),
		vp.updt_task = reqinfo->updt_task,
		vp.updt_applctx = reqinfo->updt_applctx
	with nocounter

	set lErrorCode = error(sErrorMessage, 0)
	if (lErrorCode > 0)
	   set readme_data->message = "Error inserting into view_prefs table."
	   go to EXIT_PROGRAM
	endif



	free record insert_view_prefs
	record insert_view_prefs
	(
		1 qual[*]
			2 parent_entity_name 	= vc
			2 parent_entity_id		= f8
			2 pvc_name              = vc
			2 pvc_value             = vc
	)

	set stat = alterlist(insert_view_prefs->qual, 4)

	set insert_view_prefs->qual[1].parent_entity_name = "VIEW_PREFS"
	set insert_view_prefs->qual[1].parent_entity_id = orderview_frame_id
	set insert_view_prefs->qual[1].pvc_name = "DLL_NAME"
	set insert_view_prefs->qual[1].pvc_value = ""

	set insert_view_prefs->qual[2].parent_entity_name = "VIEW_PREFS"
	set insert_view_prefs->qual[2].parent_entity_id = orderview_frame_id
	set insert_view_prefs->qual[2].pvc_name = "VIEW_CAPTION"
	set insert_view_prefs->qual[2].pvc_value = ""

	set insert_view_prefs->qual[3].parent_entity_name = "VIEW_PREFS"
	set insert_view_prefs->qual[3].parent_entity_id = orderview_frame_id
	set insert_view_prefs->qual[3].pvc_name = "VIEW_IND"
	set insert_view_prefs->qual[3].pvc_value = "0"

	set insert_view_prefs->qual[4].parent_entity_name = "VIEW_PREFS"
	set insert_view_prefs->qual[4].parent_entity_id = orderview_frame_id
	set insert_view_prefs->qual[4].pvc_name = "DISPLAY_SEQ"
	set insert_view_prefs->qual[4].pvc_value = "1"

	for(i= 1 to size(insert_view_prefs->qual, 5))
		set new_name_value_prefs_id = 0.0
		select into "nl:"
		 j = seq(carenet_seq,nextval)
		from dual
		detail
		 new_name_value_prefs_id = cnvtreal(j)
		with format, counter
		
		set lErrorCode = error(sErrorMessage, 0)
		if (lErrorCode > 0)
		   set readme_data->message = "Error selecting from dual table."
		   go to EXIT_PROGRAM
		endif

		insert into name_value_prefs nvp
		set
			nvp.name_value_prefs_id    = new_name_value_prefs_id,
			nvp.parent_entity_name     = insert_view_prefs->qual[i].parent_entity_name,
			nvp.parent_entity_id       = insert_view_prefs->qual[i].parent_entity_id,
			nvp.pvc_name               = insert_view_prefs->qual[i].pvc_name,
			nvp.pvc_value              = insert_view_prefs->qual[i].pvc_value,
			nvp.active_ind             = 1,
			nvp.merge_name             = NULL,
			nvp.merge_id               = 0.0,
			nvp.sequence               = NULL,
			nvp.updt_dt_tm             = cnvtdatetime(curdate,curtime3),
			nvp.updt_id                = reqinfo->updt_id,
			nvp.updt_task              = reqinfo->updt_task,
			nvp.updt_cnt               = 0,
			nvp.updt_applctx           = reqinfo->updt_applctx
		with nocounter
		
		set lErrorCode = error(sErrorMessage, 0)
		if (lErrorCode > 0)
		   set readme_data->message = "Error inserting into name_value_prefs table."
		   go to EXIT_PROGRAM
		endif
	endfor		


   ; Ensure the component exists
    set vp_id = 0.0

    select into "nl:"
       from view_comp_prefs vp
       where vp.application_number  = 250005
       and vp.position_cd         = 0.0
       and vp.prsnl_id            = 0.0
       and vp.view_name           = "FLOWSHEET"
       and vp.view_seq            = 1
       and vp.comp_name           = "FLOWSHEET"
       and vp.comp_seq            = 1
       and vp.active_ind          = 1
       detail
          vp_id = vp.view_comp_prefs_id
    with nocounter
    
    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
       set readme_data->message = "Error selecting from view_comp_prefs table."
       go to EXIT_PROGRAM
    endif
    
    if(vp_id = 0.0)
    
    	select into "nl:"
    	 j = seq(carenet_seq,nextval)
    	from dual
    	detail
    	 vp_id = cnvtreal(j)
    	with format, counter
    	
    	
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
           set readme_data->message = "Error selecting from dual table."
           go to EXIT_PROGRAM
        endif


    	insert into view_comp_prefs vp
    	set
    	   vp.view_comp_prefs_id  = vp_id,
    	   vp.application_number  = 250005,
    	   vp.position_cd         = 0.0,
    	   vp.prsnl_id            = 0.0,
    	   vp.view_name           = "FLOWSHEET",
    	   vp.view_seq            = 1,
    	   vp.comp_name           = "FLOWSHEET",
    	   vp.comp_seq            = 1,
    	   vp.active_ind          = 1,
    	   vp.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
    	   vp.updt_id             = reqinfo->updt_id,
    	   vp.updt_task           = reqinfo->updt_task,
    	   vp.updt_applctx        = reqinfo->updt_applctx,
    	   vp.updt_cnt            = 0
    	with nocounter
    

        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
           set readme_data->message = "Error inserting into view_comp_prefs table."
           go to EXIT_PROGRAM
        endif

    
    	free record insert_view_comp_prefs
    	record insert_view_comp_prefs
    	(
    		1 qual[*]
    			2 parent_entity_name 	= vc
    			2 parent_entity_id		= f8
    			2 pvc_name              = vc
    			2 pvc_value             = vc
    	)
    
    	set stat = alterlist(insert_view_comp_prefs->qual, 3)
    
    	set insert_view_comp_prefs->qual[1].parent_entity_name = "VIEW_COMP_PREFS"
    	set insert_view_comp_prefs->qual[1].parent_entity_id = vp_id
    	set insert_view_comp_prefs->qual[1].pvc_name = "PROGID"
    	set insert_view_comp_prefs->qual[1].pvc_value = "FLOWSHEET.FLOWSHEET"
    
    	set insert_view_comp_prefs->qual[2].parent_entity_name = "VIEW_COMP_PREFS"
    	set insert_view_comp_prefs->qual[2].parent_entity_id = vp_id
    	set insert_view_comp_prefs->qual[2].pvc_name = "COMP_DLLNAME"
    	set insert_view_comp_prefs->qual[2].pvc_value = "PVFLOWSHEET"
    
    	set insert_view_comp_prefs->qual[3].parent_entity_name = "VIEW_COMP_PREFS"
    	set insert_view_comp_prefs->qual[3].parent_entity_id = vp_id
    	set insert_view_comp_prefs->qual[3].pvc_name = "COMP_POSITION"
    	set insert_view_comp_prefs->qual[3].pvc_value = "0,0,3,4"
    
    	for(i= 1 to size(insert_view_comp_prefs->qual, 5))
    		set new_name_value_prefs_id = 0.0
    		select into "nl:"
    		 j = seq(carenet_seq,nextval)
    		from dual
    		detail
    		 new_name_value_prefs_id = cnvtreal(j)
    		with format, counter
    		
    		set lErrorCode = error(sErrorMessage, 0)
    		if (lErrorCode > 0)
    		   set readme_data->message = "Error selecting from dual table."
    		   go to EXIT_PROGRAM
    		endif
    
    		insert into name_value_prefs nvp
    		set
    			nvp.name_value_prefs_id    = new_name_value_prefs_id,
    			nvp.parent_entity_name     = insert_view_comp_prefs->qual[i].parent_entity_name,
    			nvp.parent_entity_id       = insert_view_comp_prefs->qual[i].parent_entity_id,
    			nvp.pvc_name               = insert_view_comp_prefs->qual[i].pvc_name,
    			nvp.pvc_value              = insert_view_comp_prefs->qual[i].pvc_value,
    			nvp.active_ind             = 1,
    			nvp.merge_name             = NULL,
    			nvp.merge_id               = 0.0,
    			nvp.sequence               = NULL,
    			nvp.updt_dt_tm             = cnvtdatetime(curdate,curtime3),
    			nvp.updt_id                = reqinfo->updt_id,
    			nvp.updt_task              = reqinfo->updt_task,
    			nvp.updt_cnt               = 0,
    			nvp.updt_applctx           = reqinfo->updt_applctx
    		with nocounter
    		
    		set lErrorCode = error(sErrorMessage, 0)
    		if (lErrorCode > 0)
    		   set readme_data->message = "Error inserting into name_value_prefs table."
    		   go to EXIT_PROGRAM
    		endif
    	endfor
    		
    endif



endif



 /*************************************************
 * Ensure the FSCLINNOTES view exists.            *
 *************************************************/

declare fscndlg_frame_id = f8 with protect, noconstant(0.0)

select into "nl:"
from view_prefs vp
where vp.application_number = 250005 and vp.position_cd = 0.0 and vp.prsnl_id = 0.0 and
      vp.frame_type = "FSCNDLG" and vp.view_name = "FSCLINNOTES" and vp.active_ind = 1
detail
    fscndlg_frame_id = vp.view_prefs_id
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from view_prefs table."
   go to EXIT_PROGRAM
endif

if(fscndlg_frame_id = 0.0)


	select into "nl:"
	 j = seq(carenet_seq,nextval)
	from dual
	detail
	 fscndlg_frame_id = cnvtreal(j)
	with format, counter
	
	set lErrorCode = error(sErrorMessage, 0)
	if (lErrorCode > 0)
	   set readme_data->message = "Error selecting from dual table."
	   go to EXIT_PROGRAM
	endif


	insert into view_prefs vp
	set vp.view_prefs_id = fscndlg_frame_id,
		vp.application_number = 250005,
		vp.position_cd = 0.0,
		vp.prsnl_id = 0.0,
		vp.frame_type = "FSCNDLG",
		vp.view_name = "FSCLINNOTES",
		vp.view_seq = 1,
		vp.active_ind = 1,
		vp.updt_cnt = 0,
		vp.updt_id = reqinfo->updt_id,
		vp.updt_dt_tm = cnvtdatetime(curdate,curtime3),
		vp.updt_task = reqinfo->updt_task,
		vp.updt_applctx = reqinfo->updt_applctx
	with nocounter

	set lErrorCode = error(sErrorMessage, 0)
	if (lErrorCode > 0)
	   set readme_data->message = "Error inserting into view_prefs table."
	   go to EXIT_PROGRAM
	endif


	free record insert_view_prefs
	record insert_view_prefs
	(
		1 qual[*]
			2 parent_entity_name 	= vc
			2 parent_entity_id		= f8
			2 pvc_name              = vc
			2 pvc_value             = vc
	)

	set stat = alterlist(insert_view_prefs->qual, 3)

	set insert_view_prefs->qual[1].parent_entity_name = "VIEW_PREFS"
	set insert_view_prefs->qual[1].parent_entity_id = fscndlg_frame_id
	set insert_view_prefs->qual[1].pvc_name = "VIEW_CAPTION"
	set insert_view_prefs->qual[1].pvc_value = "Document Viewer"

	set insert_view_prefs->qual[2].parent_entity_name = "VIEW_PREFS"
	set insert_view_prefs->qual[2].parent_entity_id = fscndlg_frame_id
	set insert_view_prefs->qual[2].pvc_name = "VIEW_IND"
	set insert_view_prefs->qual[2].pvc_value = "0"

	set insert_view_prefs->qual[3].parent_entity_name = "VIEW_PREFS"
	set insert_view_prefs->qual[3].parent_entity_id = fscndlg_frame_id
	set insert_view_prefs->qual[3].pvc_name = "DISPLAY_SEQ"
	set insert_view_prefs->qual[3].pvc_value = "1"

	for(i= 1 to size(insert_view_prefs->qual, 5))
		set new_name_value_prefs_id = 0.0
		select into "nl:"
		 j = seq(carenet_seq,nextval)
		from dual
		detail
		 new_name_value_prefs_id = cnvtreal(j)
		with format, counter
		
		set lErrorCode = error(sErrorMessage, 0)
		if (lErrorCode > 0)
		   set readme_data->message = "Error selecting from dual table."
		   go to EXIT_PROGRAM
		endif

		insert into name_value_prefs nvp
		set
			nvp.name_value_prefs_id    = new_name_value_prefs_id,
			nvp.parent_entity_name     = insert_view_prefs->qual[i].parent_entity_name,
			nvp.parent_entity_id       = insert_view_prefs->qual[i].parent_entity_id,
			nvp.pvc_name               = insert_view_prefs->qual[i].pvc_name,
			nvp.pvc_value              = insert_view_prefs->qual[i].pvc_value,
			nvp.active_ind             = 1,
			nvp.merge_name             = NULL,
			nvp.merge_id               = 0.0,
			nvp.sequence               = NULL,
			nvp.updt_dt_tm             = cnvtdatetime(curdate,curtime3),
			nvp.updt_id                = reqinfo->updt_id,
			nvp.updt_task              = reqinfo->updt_task,
			nvp.updt_cnt               = 0,
			nvp.updt_applctx           = reqinfo->updt_applctx
		with nocounter
		
		set lErrorCode = error(sErrorMessage, 0)
		if (lErrorCode > 0)
		   set readme_data->message = "Error inserting into name_value_prefs table."
		   go to EXIT_PROGRAM
		endif
	endfor		
		
	
    ;Ensure component exists
    set vp_id = 0.0
		
    select into "nl:"
       from view_comp_prefs vp
       where vp.application_number  = 250005
       and vp.position_cd         = 0.0
       and vp.prsnl_id            = 0.0
       and vp.view_name           = "FSCLINNOTES"
       and vp.view_seq            = 1
       and vp.comp_name           = "CLINNOTES"
       and vp.comp_seq            = 1
       and vp.active_ind          = 1
       detail
          vp_id = vp.view_comp_prefs_id
    with nocounter
    
    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
       set readme_data->message = "Error selecting from view_comp_prefs table."
       go to EXIT_PROGRAM
    endif
    
    if(vp_id = 0.0)
    
    	select into "nl:"
    	 j = seq(carenet_seq,nextval)
    	from dual
    	detail
    	 vp_id = cnvtreal(j)
    	with format, counter

        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
           set readme_data->message = "Error selecting from dual table."
           go to EXIT_PROGRAM
        endif

    	insert into view_comp_prefs vp
    	set
    	   vp.view_comp_prefs_id  = vp_id,
    	   vp.application_number  = 250005,
    	   vp.position_cd         = 0.0,
    	   vp.prsnl_id            = 0.0,
    	   vp.view_name           = "FSCLINNOTES",
    	   vp.view_seq            = 1,
    	   vp.comp_name           = "CLINNOTES",
    	   vp.comp_seq            = 1,
    	   vp.active_ind          = 1,
    	   vp.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
    	   vp.updt_id             = reqinfo->updt_id,
    	   vp.updt_task           = reqinfo->updt_task,
    	   vp.updt_applctx        = reqinfo->updt_applctx,
    	   vp.updt_cnt            = 0
    	with nocounter
    
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
           set readme_data->message = "Error inserting into view_comp_prefs table."
           go to EXIT_PROGRAM
        endif
    
    
    	free record insert_view_comp_prefs
    	record insert_view_comp_prefs
    	(
    		1 qual[*]
    			2 parent_entity_name 	= vc
    			2 parent_entity_id		= f8
    			2 pvc_name              = vc
    			2 pvc_value             = vc
    	)
    
    	set stat = alterlist(insert_view_comp_prefs->qual, 3)
    
    	set insert_view_comp_prefs->qual[1].parent_entity_name = "VIEW_COMP_PREFS"
    	set insert_view_comp_prefs->qual[1].parent_entity_id = vp_id
    	set insert_view_comp_prefs->qual[1].pvc_name = "PROGID"
    	set insert_view_comp_prefs->qual[1].pvc_value = "PVNOTES.PVNOTES"
    
    	set insert_view_comp_prefs->qual[2].parent_entity_name = "VIEW_COMP_PREFS"
    	set insert_view_comp_prefs->qual[2].parent_entity_id = vp_id
    	set insert_view_comp_prefs->qual[2].pvc_name = "COMP_DLLNAME"
    	set insert_view_comp_prefs->qual[2].pvc_value = "PVNOTES"
    
    	set insert_view_comp_prefs->qual[3].parent_entity_name = "VIEW_COMP_PREFS"
    	set insert_view_comp_prefs->qual[3].parent_entity_id = vp_id
    	set insert_view_comp_prefs->qual[3].pvc_name = "COMP_POSITION"
    	set insert_view_comp_prefs->qual[3].pvc_value = "0,0,3,4"
    
    	for(i= 1 to size(insert_view_comp_prefs->qual, 5))
    		set new_name_value_prefs_id = 0.0
    		select into "nl:"
    		 j = seq(carenet_seq,nextval)
    		from dual
    		detail
    		 new_name_value_prefs_id = cnvtreal(j)
    		with format, counter
    		
    		set lErrorCode = error(sErrorMessage, 0)
    		if (lErrorCode > 0)
    		   set readme_data->message = "Error selecting from dual table."
    		   go to EXIT_PROGRAM
    		endif
    
    		insert into name_value_prefs nvp
    		set
    			nvp.name_value_prefs_id    = new_name_value_prefs_id,
    			nvp.parent_entity_name     = insert_view_comp_prefs->qual[i].parent_entity_name,
    			nvp.parent_entity_id       = insert_view_comp_prefs->qual[i].parent_entity_id,
    			nvp.pvc_name               = insert_view_comp_prefs->qual[i].pvc_name,
    			nvp.pvc_value              = insert_view_comp_prefs->qual[i].pvc_value,
    			nvp.active_ind             = 1,
    			nvp.merge_name             = NULL,
    			nvp.merge_id               = 0.0,
    			nvp.sequence               = NULL,
    			nvp.updt_dt_tm             = cnvtdatetime(curdate,curtime3),
    			nvp.updt_id                = reqinfo->updt_id,
    			nvp.updt_task              = reqinfo->updt_task,
    			nvp.updt_cnt               = 0,
    			nvp.updt_applctx           = reqinfo->updt_applctx
    		with nocounter
    		
    		set lErrorCode = error(sErrorMessage, 0)
    		if (lErrorCode > 0)
    		   set readme_data->message = "Error inserting into name_value_prefs table."
    		   go to EXIT_PROGRAM
    		endif
    	endfor
    		
    endif

endif



 /*************************************************
 * Retrieve parent_entity_id values for app-level *
 * and detail-level preferences.                  *
 *************************************************/

; Ensure we have an active row on the app_prefs table
select into "nl:"
from app_prefs ap
where ap.position_cd = 0.0 and ap.prsnl_id = 0.0 and ap.application_number = 250005 and ap.active_ind = 1
detail
    app_prefs_id = ap.app_prefs_id
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from app_prefs table."
   go to EXIT_PROGRAM
endif


if(app_prefs_id = 0)
  ;The row does not exist so we will insert one    
    set app_prefs_id = 0.0
    select into "nl:"
       j = seq(carenet_seq,nextval)
    from dual
    detail
       app_prefs_id = cnvtreal(j)
    with format, counter
    
    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
       set readme_data->message = "Error selecting from dual table."
       go to EXIT_PROGRAM
    endif


    insert into app_prefs ap
    set
        ap.app_prefs_id         = app_prefs_id,
        ap.application_number   = 250005,
        ap.position_cd          = 0.0,
        ap.prsnl_id             = 0.0,
        ap.active_ind           = 1,
        ap.updt_cnt             = 0,
        ap.updt_id              = reqinfo->updt_id,
        ap.updt_dt_tm           = cnvtdatetime(curdate,curtime),
        ap.updt_task            = reqinfo->updt_task,
        ap.updt_applctx         = reqinfo->updt_applctx
    with nocounter
    
    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
       set readme_data->message = "Error inserting into app_prefs table."
       go to EXIT_PROGRAM
    endif
    
    if(curqual = 0)
        set readme_data->message = "Cannot perform inserts or updates with app_prefs_id of 0.0"
        go to EXIT_PROGRAM
    endif
endif


; Obtain the parent_entity_id associated with the FLOWSHEET prefs in detail_prefs
declare nFlowsheet_Id = f8 with protect, noconstant(0.0)
select into "nl:"
from
    app_prefs ap,
    detail_prefs dp
plan ap where ap.position_cd = 0.0 and ap.prsnl_id = 0.0 and ap.application_number = 250005 and ap.active_ind = 1
join dp where dp.position_cd = ap.position_cd and dp.prsnl_id = ap.prsnl_id and dp.application_number = ap.application_number
          and dp.view_name = "FLOWSHEET" and dp.comp_name = "FLOWSHEET" and dp.active_ind = 1
detail
    nFlowsheet_Id = dp.detail_prefs_id
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from app_prefs, detail_prefs table."
   go to EXIT_PROGRAM
endif


if(nFlowsheet_Id = 0.0)
  ;The row does not exist so we will insert one  
    set nFlowsheet_Id = 0.0
    select into "nl:"
       j = seq(carenet_seq,nextval)
    from dual
    detail
       nFlowsheet_Id = cnvtreal(j)
    with format, counter
    
    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
       set readme_data->message = "Error selecting from dual table."
       go to EXIT_PROGRAM
    endif
    

    insert into detail_prefs dp
    set dp.detail_prefs_id = nFlowsheet_Id,
        dp.application_number = 250005,
        dp.position_cd = 0.0,
        dp.prsnl_id = 0.0,
        dp.person_id = 0.0,
        dp.view_name = "FLOWSHEET",
        dp.view_seq = 1,
        dp.comp_name = "FLOWSHEET",
        dp.comp_seq = 1,
        dp.active_ind = 1,
        dp.updt_id = reqinfo->updt_id,
        dp.updt_cnt = 0,
        dp.updt_task = reqinfo->updt_task,
        dp.updt_applctx = reqinfo->updt_applctx,
        dp.updt_dt_tm = cnvtdatetime(curdate,curtime)
    with nocounter
    
    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
       set readme_data->message = "Error inserting into detail_prefs table."
       go to EXIT_PROGRAM
    endif
    
    if(curqual = 0)
        set readme_data->message = "Cannot perform inserts or updates with detail_prefs_id of 0.0"
        go to EXIT_PROGRAM
    endif

endif


; Obtain the parent_entity_id associated with the FSCLINNOTES prefs in detail_prefs
declare nClin_Notes_Id = f8 with protect, noconstant(0.0)
select into "nl:"
from
    app_prefs ap,
    detail_prefs dp
plan ap where ap.position_cd = 0.0 and ap.prsnl_id = 0.0 and ap.application_number = 250005 and ap.active_ind = 1
join dp where dp.position_cd = ap.position_cd and dp.prsnl_id = ap.prsnl_id and dp.application_number = ap.application_number
          and dp.view_name = "FSCLINNOTES" and dp.comp_name = "CLINNOTES" and dp.active_ind = 1
detail
    nClin_Notes_Id = dp.detail_prefs_id
with nocounter

set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
   set readme_data->message = "Error selecting from app_prefs, detail_prefs table."
   go to EXIT_PROGRAM
endif


if(nClin_Notes_Id = 0.0)
  ;The row does not exist so we will insert one  
    set nClin_Notes_Id = 0.0
    select into "nl:"
       j = seq(carenet_seq,nextval)
    from dual
    detail
       nClin_Notes_Id = cnvtreal(j)
    with format, counter
    
    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
       set readme_data->message = "Error selecting from dual table."
       go to EXIT_PROGRAM
    endif


    insert into detail_prefs dp
    set dp.detail_prefs_id = nClin_Notes_Id,
        dp.application_number = 250005,
        dp.position_cd = 0.0,
        dp.prsnl_id = 0.0,
        dp.person_id = 0.0,
        dp.view_name = "FSCLINNOTES",
        dp.view_seq = 1,
        dp.comp_name = "CLINNOTES",
        dp.comp_seq = 1,
        dp.active_ind = 1,
        dp.updt_id = reqinfo->updt_id,
        dp.updt_cnt = 0,
        dp.updt_task = reqinfo->updt_task,
        dp.updt_applctx = reqinfo->updt_applctx,
        dp.updt_dt_tm = cnvtdatetime(curdate,curtime)
    with nocounter
    
    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
       set readme_data->message = "Error inserting into detail_prefs table."
       go to EXIT_PROGRAM
    endif
    
    if(curqual = 0)
        set readme_data->message = "Cannot perform inserts or updates with detail_prefs_id of 0.0"
        go to EXIT_PROGRAM
    endif

endif



 /*************************************************
 * Store the values we need to update.            *
 *************************************************/
free record update_prefs
record update_prefs
(
    1 qual[*]
        2 name_value_prefs_id   = f8
        2 pvc_name              = vc
        2 pvc_value             = vc
        2 view_name             = vc
        2 comp_name             = vc
)

set stat = alterlist(update_prefs->qual, update_pref_cnt)

set update_prefs->qual[1].name_value_prefs_id = 0.0
set update_prefs->qual[1].pvc_name = "DASHBOARD"
set update_prefs->qual[1].pvc_value = "0"
set update_prefs->qual[1].view_name = "FLOWSHEET"
set update_prefs->qual[1].comp_name = "FLOWSHEET"

set update_prefs->qual[2].name_value_prefs_id = 0.0
set update_prefs->qual[2].pvc_name = "R_EVENT_SET_NAME"
set update_prefs->qual[2].pvc_value = "ALL RESULT SECTIONS"
set update_prefs->qual[2].view_name = "FLOWSHEET"
set update_prefs->qual[2].comp_name = "FLOWSHEET"

set update_prefs->qual[3].name_value_prefs_id = 0.0
set update_prefs->qual[3].pvc_name = "RANGE_LABEL"
set update_prefs->qual[3].pvc_value = "0"
set update_prefs->qual[3].view_name = "FLOWSHEET"
set update_prefs->qual[3].comp_name = "FLOWSHEET"

set update_prefs->qual[4].name_value_prefs_id = 0.0
set update_prefs->qual[4].pvc_name = "R_RESULT_STAT_IND"
set update_prefs->qual[4].pvc_value = "0"
set update_prefs->qual[4].view_name = "FLOWSHEET"
set update_prefs->qual[4].comp_name = "FLOWSHEET"

set update_prefs->qual[5].name_value_prefs_id = 0.0
set update_prefs->qual[5].pvc_name = "MODIFY_CHARTING"
set update_prefs->qual[5].pvc_value = "0"
set update_prefs->qual[5].view_name = "FLOWSHEET"
set update_prefs->qual[5].comp_name = "FLOWSHEET"

set update_prefs->qual[6].name_value_prefs_id = 0.0
set update_prefs->qual[6].pvc_name = "R_CRIT_CHAR_IND"
set update_prefs->qual[6].pvc_value = "1"
set update_prefs->qual[6].view_name = "FLOWSHEET"
set update_prefs->qual[6].comp_name = "FLOWSHEET"

set update_prefs->qual[7].name_value_prefs_id = 0.0
set update_prefs->qual[7].pvc_name = "HIGH_STR"
set update_prefs->qual[7].pvc_value = sNormal_High_Disp
set update_prefs->qual[7].view_name = "FLOWSHEET"
set update_prefs->qual[7].comp_name = "FLOWSHEET"

set update_prefs->qual[8].name_value_prefs_id = 0.0
set update_prefs->qual[8].pvc_name = "LOW_STR"
set update_prefs->qual[8].pvc_value = sNormal_Low_Disp
set update_prefs->qual[8].view_name = "FLOWSHEET"
set update_prefs->qual[8].comp_name =