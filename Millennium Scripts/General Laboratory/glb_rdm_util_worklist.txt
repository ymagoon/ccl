 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_util_worklist/GLB_RDM_UTIL_WORKLIST.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

	Source file name:       glb_rdm_util_worklist.prg
	Object name:            glb_rdm_util_worklist
	Request #:		0

	Product:		PathNet General Lab
	Product Team:		PathNet 
	HNA Version:            500
	CCL Version:            
	
	Program purpose:        Utility to fill out new worklist
                                related table fields:
                                person_comments_ind,
                                order_comments_ind,
                                result_comments_ind,
                                visit_reason_ind,
                                order_status_ind,
                                reporting_priority_ind,
                                facility_ind,
                                nurse_unit_ind,
                                landscape_ind,
                                active_ind,
                                active_status_cd,
                                active_status_dt_tm,
                                active_status_prsnl_id    


	Tables read,		TABLE_NAME		METHOD (UNIQUE, RANGE, FULL)
	and access method:      --------------------    -----------------------------
				worklist_group		    UNIQUE
                                worklist_ref		    UNIQUE
                                worklist_ref_procedure      UNIQUE
                                worklist_ref_priority       UNIQUE
                                worklist_ref_qc             UNIQUE

	Tables updated:		worklist_group
                                worklist_ref
                                worklist_ref_procedure
                                worklist_ref_priority
                                worklist_ref_qc


	Executing from:         

	Special Notes:		Each section should clearly identify what the purpose
				of that README step is.  
	
	Run Occurance:		(select ONE of the following)
				-----------------------------
				[X] 1. RUN ONCE
				[ ] 2. RUN MANY

	ReadMe Category:	(select ONE of the following)
				-----------------------------
				[X] 1. Data Load
				[ ] 2. Data Conversion
				[ ] 3. Data Migration

	Execution Time:		(select ONE of the following)
				------------------------------------
				[ ] 1. Uptime before uptime schema.
				[ ] 2. Uptime after uptime schema.
				[ ] 3. Downtime before downtime schema.
				[X] 4. Downtime after downtime schema.
				[ ] 5. Uptime after all other components.
	
	Exec. Justification:	Changes requireusers to be off the system
      
        Parent Script:		Parent script that must execute successfully for 
				this to execute.

	Check Script:		

	Data file for import:	
	
	Execution Duration:	(select ONE of the following)
				----------------------------------
				[ ] 1. Fixed Time
				[X] 2. Driver Table: worklist_ref

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer		Comment 			    *
;    *--- -------- --------------------	----------------------------------- *
;     ### 01/12/01 Chris Cline          Initial (template) Release          *
;     001 02/01/01 Chris Cline			Template update for COMMIT. *
;     00202/16/01  Kasie Sly            Insert old readme into new template *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program glb_rdm_util_worklist:dba go
create program glb_rdm_util_worklist:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "glb_rdm_util_worklist"
CALL LOGSCRIPTSTART(sREADME_NAME)

/************************
** README ACTION STEPS **
************************/
      /***********************************************************************
      * Internal Records                                                     *
      ***********************************************************************/
      record wg
      (
         1  qual_cnt                     = i4
         1  qual[*]
            2  child_worklist_ref_id     = f8
            2  parent_worklist_ref_id    = f8
            2  updt_dt_tm                = dq8
            2  updt_id                   = f8
      )

      record wr
      (
         1  qual_cnt                     = i4
         1  qual[*]
            2  worklist_ref_id           = f8
            2  result_space_ind          = i2
            2  include_flag              = i2
            2  updt_dt_tm                = dq8
            2  updt_id                   = f8
      )

      record wr_proc
      (
         1  qual_cnt                     = i4
         1  qual[*]
            2  worklist_ref_id           = f8
            2  task_assay_cd             = f8
            2  catalog_cd                = f8
            2  updt_dt_tm                = dq8
            2  updt_id                   = f8
      )

      record wr_pri
      (
         1  qual_cnt                     = i4
         1  qual[*]
            2  worklist_ref_id           = f8
            2  priority_cd               = f8
            2  updt_dt_tm                = dq8
            2  updt_id                   = f8
      )

      record wr_qc
      (
         1  qual_cnt                     = i4
         1  qual[*]
            2  worklist_ref_id           = f8
            2  accession_id              = f8
            2  pos                       = i4
            2  updt_dt_tm                = dq8
            2  updt_id                   = f8
      )

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set failed_ind = 0
         set active_status_cd = 0.0

      /***********************************************************************
      * Select active status code value                                      *
      ***********************************************************************/

         select into "nl:"
            cv.code_value

         from
            code_value cv

         where cv.code_set = 48
           and cv.cdf_meaning = "ACTIVE"
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         detail
            active_status_cd = cv.code_value

         with nocounter

         if (curqual = 0)
            set failed_ind = 1
            go to Exit_Script 
         endif

      /***********************************************************************
      * Update worklist_group table.                                         *
      ***********************************************************************/
         select into "nl:"
            wg.seq

         from
            worklist_group wg

         where wg.child_worklist_ref_id > 0.0
           and wg.parent_worklist_ref_id > 0.0
           and wg.active_ind in (NULL, 0, 1)
           and wg.active_status_cd = 0.0
 
         head report
            q_cnt = 0
        
         detail
            q_cnt = q_cnt + 1
            if (mod(q_cnt, 25) = 1)
               stat = alterlist(wg->qual, q_cnt + 25)
            endif
            wg->qual_cnt = q_cnt
            wg->qual[q_cnt].child_worklist_ref_id =
              wg.child_worklist_ref_id
            wg->qual[q_cnt].parent_worklist_ref_id =
              wg.parent_worklist_ref_id
            wg->qual[q_cnt].updt_dt_tm = cnvtdatetime(wg.updt_dt_tm)
            wg->qual[q_cnt].updt_id = wg.updt_id

         foot report
            stat = alterlist(wg->qual, q_cnt)

         with 
            nocounter

         if (wg->qual_cnt > 0)
            update into
               (dummyt d with seq = value(wg->qual_cnt)),
               worklist_group wg 
            set
               wg.active_ind = 1,
               wg.active_status_cd = active_status_cd,
               wg.active_status_dt_tm =
                 cnvtdatetime(wg->qual[d.seq].updt_dt_tm),
               wg.active_status_prsnl_id = wg->qual[d.seq].updt_id
            plan d  where d.seq <= wg->qual_cnt
            join wg where wg.child_worklist_ref_id =
                             wg->qual[d.seq].child_worklist_ref_id
                      and wg.parent_worklist_ref_id = 
                             wg->qual[d.seq].parent_worklist_ref_id
            with nocounter
            if (curqual = 0)
               set failed_ind = 1
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Update worklist_ref table.                                           *
      ***********************************************************************/
         select into "nl:"
            wr.seq

         from
            worklist_ref wr

         where wr.worklist_ref_id > 0.0
           and wr.active_ind in (NULL, 0, 1)
           and wr.active_status_cd = 0.0
 
         head report
            q_cnt = 0
        
         detail
            q_cnt = q_cnt + 1
            if (mod(q_cnt, 25) = 1)
               stat = alterlist(wr->qual, q_cnt + 25)
            endif
            wr->qual_cnt = q_cnt
            wr->qual[q_cnt].worklist_ref_id = wr.worklist_ref_id
            wr->qual[q_cnt].result_space_ind = wr.result_space_ind
            wr->qual[q_cnt].include_flag = wr.include_flag
            wr->qual[q_cnt].updt_dt_tm = cnvtdatetime(wr.updt_dt_tm)
            wr->qual[q_cnt].updt_id = wr.updt_id

         foot report
            stat = alterlist(wr->qual, q_cnt)

         with 
            nocounter

         if (wr->qual_cnt > 0)
            update into
               (dummyt d with seq = value(wr->qual_cnt)),
               worklist_ref wr 
            set
               wr.person_comments_ind = 
                 if (wr->qual[d.seq].include_flag = 1)
                    0
                 else
                    1
                 endif,
               wr.order_comments_ind =
                 if (wr->qual[d.seq].include_flag = 1)
                    0
                 else
                    1
                 endif,
               wr.result_comments_ind =
                 if (wr->qual[d.seq].result_space_ind = 1)
                    1
                 else
                    0
                 endif,
               wr.visit_reason_ind =
                 if (wr->qual[d.seq].include_flag = 1)
                    0
                 else
                    1
                 endif,
               wr.order_status_ind =
                 if (wr->qual[d.seq].include_flag = 1)
                    0
                 else
                    1
                 endif,
               wr.reporting_priority_ind =
                 if (wr->qual[d.seq].include_flag = 1)
                    0
                 else
                    1
                 endif,
               wr.facility_ind =
                 if (wr->qual[d.seq].include_flag = 1)
                    0
                 else
                    1
                 endif,
               wr.nurse_unit_ind =
                 if (wr->qual[d.seq].include_flag = 1)
                    0
                 else
                    1
                 endif,
               wr.landscape_ind = 0,
               wr.active_ind = 1,
               wr.active_status_cd = active_status_cd,
               wr.active_status_dt_tm =
                 cnvtdatetime(wr->qual[d.seq].updt_dt_tm),
               wr.active_status_prsnl_id = wr->qual[d.seq].updt_id
            plan d  where d.seq <= wr->qual_cnt
            join wr where wr.worklist_ref_id =
                             wr->qual[d.seq].worklist_ref_id
            with nocounter
            if (curqual = 0)
               set failed_ind = 1
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Update worklist_ref_procedure table.                                 *
      ***********************************************************************/
         select into "nl:"
            wrp.seq

         from
            worklist_ref_procedure wrp

         where wrp.worklist_ref_id > 0.0
           and wrp.active_ind in (NULL, 0, 1)
           and wrp.active_status_cd = 0.0
 
         head report
            q_cnt = 0
        
         detail
            q_cnt = q_cnt + 1
            if (mod(q_cnt, 25) = 1)
               stat = alterlist(wr_proc->qual, q_cnt + 25)
            endif
            wr_proc->qual_cnt = q_cnt
            wr_proc->qual[q_cnt].worklist_ref_id = wrp.worklist_ref_id
            wr_proc->qual[q_cnt].task_assay_cd = wrp.task_assay_cd
            wr_proc->qual[q_cnt].catalog_cd = wrp.catalog_cd
            wr_proc->qual[q_cnt].updt_dt_tm = 
              cnvtdatetime(wrp.updt_dt_tm)
            wr_proc->qual[q_cnt].updt_id = wrp.updt_id

         foot report
            stat = alterlist(wr_proc->qual, q_cnt)

         with 
            nocounter

         if (wr_proc->qual_cnt > 0)
            update into
               (dummyt d with seq = value(wr_proc->qual_cnt)),
               worklist_ref_procedure wrp 
            set
               wrp.active_ind = 1,
               wrp.active_status_cd = active_status_cd,
               wrp.active_status_dt_tm =
                 cnvtdatetime(wr_proc->qual[d.seq].updt_dt_tm),
               wrp.active_status_prsnl_id = wr_proc->qual[d.seq].updt_id
            plan d   where d.seq <= wr_proc->qual_cnt
            join wrp where wrp.worklist_ref_id =
                             wr_proc->qual[d.seq].worklist_ref_id
                       and wrp.task_assay_cd =
                             wr_proc->qual[d.seq].task_assay_cd
                       and wrp.catalog_cd =
                             wr_proc->qual[d.seq].catalog_cd
            with nocounter
            if (curqual = 0)
               set failed_ind = 1
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Update worklist_ref_priority table.                                  *
      ***********************************************************************/
         select into "nl:"
            wrp.seq

         from
            worklist_ref_priority wrp

         where wrp.worklist_ref_id > 0.0
           and wrp.active_ind in (NULL, 0, 1)
           and wrp.active_status_cd = 0.0
 
         head report
            q_cnt = 0
        
         detail
            q_cnt = q_cnt + 1
            if (mod(q_cnt, 25) = 1)
               stat = alterlist(wr_pri->qual, q_cnt + 25)
            endif
            wr_pri->qual_cnt = q_cnt
            wr_pri->qual[q_cnt].worklist_ref_id = wrp.worklist_ref_id
            wr_pri->qual[q_cnt].priority_cd = wrp.priority_cd
            wr_pri->qual[q_cnt].updt_dt_tm = 
              cnvtdatetime(wrp.updt_dt_tm)
            wr_pri->qual[q_cnt].updt_id = wrp.updt_id

         foot report
            stat = alterlist(wr_pri->qual, q_cnt)

         with 
            nocounter

         if (wr_pri->qual_cnt > 0)
            update into
               (dummyt d with seq = value(wr_pri->qual_cnt)),
               worklist_ref_priority wrp 
            set
               wrp.active_ind = 1,
               wrp.active_status_cd = active_status_cd,
               wrp.active_status_dt_tm =
                 cnvtdatetime(wr_pri->qual[d.seq].updt_dt_tm),
               wrp.active_status_prsnl_id = wr_pri->qual[d.seq].updt_id
            plan d   where d.seq <= wr_pri->qual_cnt
            join wrp where wrp.worklist_ref_id =
                             wr_pri->qual[d.seq].worklist_ref_id
                       and wrp.priority_cd =
                             wr_pri->qual[d.seq].priority_cd
            with nocounter
            if (curqual = 0)
               set failed_ind = 1
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Update worklist_ref_qc table.                                        *
      ***********************************************************************/
         select into "nl:"
            wrq.seq

         from
            worklist_ref_qc wrq

         where wrq.worklist_ref_id > 0.0
           and wrq.active_ind in (NULL, 0, 1)
           and wrq.active_status_cd = 0.0
 
         head report
            q_cnt = 0
        
         detail
            q_cnt = q_cnt + 1
            if (mod(q_cnt, 25) = 1)
               stat = alterlist(wr_qc->qual, q_cnt + 25)
            endif
            wr_qc->qual_cnt = q_cnt
            wr_qc->qual[q_cnt].worklist_ref_id = wrq.worklist_ref_id
            wr_qc->qual[q_cnt].accession_id = wrq.accession_id
            wr_qc->qual[q_cnt].pos = wrq.pos
            wr_qc->qual[q_cnt].updt_dt_tm = 
              cnvtdatetime(wrq.updt_dt_tm)
            wr_qc->qual[q_cnt].updt_id = wrq.updt_id

         foot report
            stat = alterlist(wr_qc->qual, q_cnt)

         with 
            nocounter

         if (wr_qc->qual_cnt > 0)
            update into
               (dummyt d with seq = value(wr_qc->qual_cnt)),
               worklist_ref_qc wrq 
            set
               wrq.active_ind = 1,
               wrq.active_status_cd = active_status_cd,
               wrq.active_status_dt_tm =
                 cnvtdatetime(wr_qc->qual[d.seq].updt_dt_tm),
               wrq.active_status_prsnl_id = wr_qc->qual[d.seq].updt_id
            plan d   where d.seq <= wr_qc->qual_cnt
            join wrq where wrq.worklist_ref_id =
                             wr_qc->qual[d.seq].worklist_ref_id
                       and wrq.accession_id =
                             wr_qc->qual[d.seq].accession_id
                       and wrq.pos = wr_qc->qual[d.seq].pos
            with nocounter
            if (curqual = 0)
               set failed_ind = 1
               go to Exit_Script
            endif
         endif



;---------------------------------------------------------
#EXIT_SCRIPT
/****************************
**  LOG Execution Status.  **
**                         ***************************************
**  Note:  if you have a check script then you do not 		**
**  need to perform the LOGSTATUS in the RDM script.  		**
**  Explicit COMMIT and/or ROLLBACK must be perform   		**
**  In this section both in the README and the CHECK 		**
**  script.  For example:                             		**
**     if (nCnt > 0)						**
**       COMMIT  ;Just in case LOGSTATUS pulls an Oracle error. **
**       CALL LOGSTATUS("Execution Successful.", "S") 		**
**     else                                           		**
**       ROLLBACK                                            	**
**       CALL LOGSTATUS("Execution Failed because ...", "F")	**
**     endif                                          		**
**                                                    		**
*****************************************************************/
   if (failed_ind = 0)
     COMMIT  ;Just in case LOGSTATUS pulls an Oracle error.
     CALL LOGSTATUS("Execution Successful.", "S") 	
   else
       ROLLBACK 
       CALL LOGSTATUS("Execution Failed because ...", "F")	
     endif 


/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
CALL LOGSCRIPTEND(sREADME_NAME)

end go

;Generated by GNU enscript 1.6.4.
