 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_rr_inquiry_results/GLB_GET_RR_INQUIRY_RESULTS.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_RR_INQUIRY_RESULTS.PRG
        Object name:            GLB_GET_RR_INQUIRY_RESULTS
        Request #:              250181

        Product:                General Lab - Round Robin               
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Get the results pertaining to a accession
				number/round robin id combo

        Tables read:            rr_result 
                                rr_perform_Result
                                

        Tables updated:         none

        Executing from:         Round Robin Inquiry

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/18/99 Gary Runde           Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_RR_INQUIRY_RESULTS:dba go    
      create program GLB_GET_RR_INQUIRY_RESULTS:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      ( 
	1  accession_id		= f8
	1  round_robin_ref_id	= f8
	1  accession		= vc
      )

*/


      record reply
      ( 
	1  outlier		= vc
        1  accession_id    	= f8   
        1  round_robin_ref_id   = f8  
	1  display  		= vc
	1  resources[*]
	   2  service_resource_cd 	= f8
	   2  service_resource_disp	= vc
	   2  assays[*]
	      3  task_assay_cd		= f8
	      3  task_assay_disp	= vc
	      3  rr_result_id		= f8
	      3  rr_perform_result_id	= f8
	      3  numeric_result_value	= f8
	      3  result_status_cd	= f8
	      3  result_status_disp	= vc
	      3  perform_dt_tm		= dq8
	      3  exclude_ind		= i2
%i cclsource:status_block.inc
)


     	#Script
	set reply->status_data->status = "F"
      
        declare res_cnt = i4
	declare assay_cnt = i4
      	declare result_status_autoverified_cd = f8
      	declare result_status_verified_cd   = f8
      	declare result_status_corr_cd   = f8

      	set RESULT_STATUS_CODESET       = 1901
      	set RESULT_STATUS_VERIFIED_CDF  = "VERIFIED"
      	set RESULT_STATUS_AUTOVERIFIED_CDF = "AUTOVERIFIED"
      	set RESULT_STATUS_CORR_CDF = "CORRECTED"

	

      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

         set hSys = 0
         set SysStat = 0
         call uar_SysCreateHandle(hSys,SysStat)
         set sText = fillstring(254, " ")


      	/********************************************************************/
      	/* Get the code value for outliers                                  */
      	/********************************************************************/

	select into "NL:"
		c.code_value,
		c.cdf_meaning
	from code_value c
	where c.code_set = 1902 and
		c.cdf_meaning = "RR_OUTLIER"
	head c.cdf_meaning
		reply->outlier = c.display
	with nocounter, maxqual(c, 1)
	
      	/********************************************************************/
      	/* Get the necessary result status codes                            */
      	/********************************************************************/
  
      	select into "nl:"
        	c.code_value,
        	c.cdf_meaning
      	from code_value c
      	where c.code_set = result_status_codeset and
            	c.cdf_meaning in (result_status_verified_cdf, 
                                result_status_autoverified_cdf,
				RESULT_STATUS_CORR_CDF)
      	detail
        	case (c.cdf_meaning)
        	of result_status_verified_cdf:
                	result_status_verified_cd = c.code_value
        	of result_status_autoverified_cdf:
                	result_status_autoverified_cd = c.code_value
        	of result_status_corr_cdf:
                	result_status_corr_cd = c.code_value
        	endcase
      	with nocounter

   set error_check = ERROR(sErrorMsg,0)   ;get error message
   if (error_check != 0)
     set reply->status_data->status = "F"
     set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
     go to exit_script
   endif
      	/********************************************************************/
      	/* Get the accession_id and round robin id if needed                */
      	/********************************************************************/

	if (request->accession > "")
		set sText = "get Accession ID"
		call uar_SysEvent(hSys, 3, "getrrinquiry get accnID", NULLTERM(sText))
		select into "nl:"
			a.accession,
			rar.accession_id,
			rar.round_robin_ref_id,
			a.accession_id
		from accession a,
		     rr_accession_r rar
		plan a where a.accession = request->accession
		join rar where a.accession_id = rar.accession_id
		head a.accession_id
			request->accession_id = rar.accession_id
			request->round_robin_ref_id = rar.round_robin_ref_id
		with nocounter, maxqual(rar, 1)

   set error_check = ERROR(sErrorMsg,0)   ;get error message
   if (error_check != 0)
     set reply->status_data->status = "F"
     set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
     go to exit_script
   endif

	endif

      	/********************************************************************/
      	/* Get the results for the reply                                    */
      	/********************************************************************/


	select into "nl:"
		rr.rr_result_id,
		pr.rr_result_id,
		pr.rr_perform_result_id,
		pr.numeric_result_value,
		pr.result_status_cd,
		rr.result_status_cd,
		rf.display,
		PERFORM = FORMAT(cnvtdatetime(pr.perform_dt_Tm), "mmm/dd/yyyy hh:mm;3;M")
	from 
		rr_result rr,
		rr_perform_result pr,
		round_robin_ref rf
	plan rf where rf.round_robin_ref_id = request->round_robin_ref_id
	join rr where rr.round_robin_ref_id = rf.round_robin_ref_id         
		and rr.accession_id = request->accession_id
		and rr.result_status_cd in (result_status_verified_cd,
					    result_status_autoverified_cd,
					    result_status_corr_cd)
	join pr where rr.rr_result_id = pr.rr_result_id
		and rr.result_status_cd = pr.result_status_cd
	order by cnvtdatetime(pr.perform_Dt_Tm) desc, 
		rr.service_resource_cd, rr.task_assay_cd
	head report
		res_cnt = 0
		reply->accession_id = rr.accession_id
		reply->round_robin_ref_id = rr.round_robin_ref_id
		reply->display = rf.display
	head PERFORM
		row +0
	head rr.service_resource_cd
		res_cnt = res_cnt + 1
		if (mod(res_cnt, 10) = 1)
			stat = alterlist(reply->resources, res_cnt + 10)
		endif
		reply->resources[res_cnt].service_resource_cd = 
				rr.service_resource_cd
		assay_cnt = 0
	head rr.task_assay_cd
		assay_cnt = assay_cnt + 1
		if (mod(assay_cnt, 10) = 1)
			stat = alterlist(reply->resources[res_cnt].assays,
							assay_cnt + 10)		
		endif
		reply->resources[res_cnt].assays[assay_cnt].task_assay_cd
						= rr.task_assay_cd
		reply->resources[res_cnt].assays[assay_cnt].rr_result_id
						= rr.rr_result_id
		reply->resources[res_cnt].assays[assay_cnt].rr_perform_result_id
						= pr.rr_perform_result_id
		reply->resources[res_cnt].assays[assay_cnt].numeric_result_value
						= pr.numeric_result_value
		reply->resources[res_cnt].assays[assay_cnt].result_status_cd
						= pr.result_status_cd
		reply->resources[res_cnt].assays[assay_cnt].perform_dt_tm
						= pr.perform_dt_tm
		reply->resources[res_cnt].assays[assay_cnt].exclude_ind
						= rr.exclude_ind
	detail
		row +0	
	foot rr.service_resource_cd
		sText = build("AssayCnt: ", assay_cnt)
		call uar_SysEvent(hSys, 3, "getrrinquiry assayCnt", NULLTERM(sText))
		stat = alterlist(reply->resources[res_cnt].assays, assay_cnt)
		call echo(stext)
	foot report
		sText = build("ResourceCnt: ", res_cnt)
		call uar_SysEvent(hSys, 3, "getrrinquiry ResourceCnt", NULLTERM(sText))
		call echo(stext)
		stat = alterlist(reply->resources, res_cnt)
	with nocounter	

   set error_check = ERROR(sErrorMsg,0)   ;get error message
   if (error_check != 0)
     set reply->status_data->status = "F"
     set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
     go to exit_script
   endif

      	/********************************************************************/
      	/* Exit Script                                                      */
      	/********************************************************************/
      	if (curqual = 0)
        	set reply->status_data->status = "Z"
      	else    
         	set reply->status_data->status = "S"
      	endif

#exit_script
call uar_SysDestroyHandle(hSys)
end
go      


;Generated by GNU enscript 1.6.4.
