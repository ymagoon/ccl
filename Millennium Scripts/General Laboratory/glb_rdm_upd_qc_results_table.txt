 ;;Solution_Test/script/PathNet -- Gen Lab/GLB_RDM_UPD_QC_RESULTS_TABLE/GLB_RDM_UPD_QC_RESULTS_TABLE.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

	Source file name:       GLB_RDM_UPD_QC_RESULTS_TABLE.prg
	Object name:            GLB_RDM_UPD_QC_RESULTS_TABLE
	Request #:              0

	Product:                PathNet General Lab
	Product Team:           PathNet General Lab
	HNA Version:            500
	CCL Version:

	Program purpose:        This readme will set the RESULT_CONTROL_CD = IN_CONTROL
	                        for all rows on the QC_RESULT table that are VERIFIED
	                        and have a RESULT_CONTROL_CD = 0.

	Tables read,            TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
    and access method:      --------------------    -----------------------------
                            QC_RESULT               FULL
                            CODE_VALUE              RANGE

	Tables updated:         QC_RESULT

	Executing from:

	Special Notes:		    None. 

	Run Occurance:          (select ONE of the following)
				            -----------------------------
                            [X] 1. RUN ONCE
                            [ ] 2. RUN MANY

	ReadMe Category:        (select ONE of the following)
                            -----------------------------
                            [ ] 1. Data Load
                            [ ] 2. Data Conversion
                            [X] 3. Data Migration

	Execution Time:         (select ONE of the following)
                            ------------------------------------
                            [ ] 1. Uptime before uptime schema.
                            [X] 2. Uptime after uptime schema.

	Exec. Justification:	This readme can be run in uptime.

    Parent Script:		

	Check Script:		

	Data file for import:	

	Execution Duration:     (select ONE of the following)
                            ----------------------------------
                           [ ] 1. Fixed Time
                           [X] 2. Driver Table: QC_RESULT

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer		        Comment                             *
;    *--- -------- --------------------	----------------------------------- *
;     000 10/14/03 Andrew Dittrich      Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program GLB_RDM_UPD_QC_RESULTS_TABLE:dba go
create program GLB_RDM_UPD_QC_RESULTS_TABLE:dba
%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (GLB_RDM_UPD_QC_RESULTS_TABLE) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "GLB_RDM_UPD_QC_RESULTS_TABLE"
CALL LOGSCRIPTSTART(sREADME_NAME)

/************************
** README ACTION STEPS **
************************/
declare error_cnt      = i4
declare dVerified_cd   = f8
declare dIn_Control_cd = f8
declare nResource_cnt  = i4
declare nAssay_cnt     = i4
declare nResult_cnt    = i4
declare nIndex         = i4
declare nIndex1        = i4
declare nResultSize    = i4
declare nAssaySize     = i4

;*************************************************
;* Initialize Variables
;*************************************************
set error_cnt      = 0
set dVerified_cd   = 0.0
set dIn_Control_cd = 0.0
set nResource_cnt  = 0
set nAssay_cnt     = 0
set nResult_cnt    = 0
set nIndex         = 0
set nIndex1        = 0
set nResultSize    = 0
set nAssaySize     = 0

record result_list
(
  1 serv_res_qual[*]
    2 service_resource_cd     = f8
    2 assay_qual[*]         
      3 task_assay_cd         = f8
      3 result_qual[*]
        4 qc_result_id        = f8
) 

/***********************************************************************
  Retrieve the codes for these meanings.  Cannot use UAR's in a Readme.
************************************************************************/

select into "nl:"
  cv.code_value
from code_value cv
plan cv
  where cv.code_set = 1901
   and  cv.cdf_meaning = "VERIFIED"
detail
  dVerified_cd = cv.code_value
with nocounter

select into "nl:"
  cv.code_value
from code_value cv
plan cv
  where cv.code_set = 1902
   and  cv.cdf_meaning = "IN_CONTROL"
detail
  dIn_Control_cd = cv.code_value
with nocounter

if (dVerified_cd = 0)
  CALL LOGSTATUS("Verified code not found.", "F")
  go to EXIT_SCRIPT
endif

if (dIn_Control_cd = 0)
  CALL LOGSTATUS("In_Control code not found.", "F")
  go to EXIT_SCRIPT
endif
/**************************************************************************
  Select the rows from the QC_RESULT table that have a result_control_cd = 0
  and where the result is verified.
************************************************************************/
CALL LOGMSG("Searching for results...", e_DISPMSG + e_RDMSTATUS)

select into "nl:"
  
from qc_result qr
   
plan qr
  where qr.result_control_cd = 0 and qr.result_status_cd = dVerified_cd

order by 
  qr.service_resource_cd,
  qr.task_assay_cd,
  qr.qc_result_id

head qr.service_resource_cd
  
  nResource_cnt = nResource_cnt + 1
     
  if (mod(nResource_cnt, 10)=1)
    stat = alterlist(result_list->serv_res_qual, nResource_cnt + 9)
  endif 
  
  result_list->serv_res_qual[nResource_cnt]->service_resource_cd = qr.service_resource_cd 

  nAssay_cnt = 0

head qr.task_assay_cd
  
  nAssay_cnt = nAssay_cnt + 1
  
  if (mod(nAssay_cnt, 10)=1)
    stat = alterlist(result_list->serv_res_qual[nResource_cnt]->assay_qual, 
      nAssay_cnt + 9)
  endif 
  
  result_list->serv_res_qual[nResource_cnt]->assay_qual[nAssay_cnt]->task_assay_cd = 
    qr.task_assay_cd

  nResult_cnt = 0

detail 
  
  nResult_cnt = nResult_cnt + 1
  
  if (mod(nResult_cnt, 10)=1)
    stat = alterlist(result_list->serv_res_qual[nResource_cnt]->assay_qual[nAssay_cnt]->
      result_qual, nResult_cnt + 9)
  endif
  
  result_list->serv_res_qual[nResource_cnt]->assay_qual[nAssay_cnt]->
    result_qual[nResult_cnt]->qc_result_id = qr.qc_result_id
    
foot qr.task_assay_cd
  
  stat = alterlist(result_list->serv_res_qual[nResource_cnt]->
    assay_qual[nAssay_cnt]->result_qual, nResult_cnt)

foot qr.service_resource_cd
  
  stat = alterlist(result_list->serv_res_qual[nResource_cnt]->assay_qual, nAssay_cnt)
 
with nocounter

  set stat = alterlist(result_list->serv_res_qual, nResource_cnt)
  CALL LOGMSG("Finshed searching for rows.", e_DISPMSG + e_RDMSTATUS)
  
  
for (nIndex = 1 to nResource_cnt)
  
  set nAssaySize = value(size(result_list->serv_res_qual[nIndex]->assay_qual, 5))
  
  for (nIndex1 = 1 to nAssaySize)
        
    set nResultSize = value(size(result_list->serv_res_qual[nIndex]->
      assay_qual[nIndex1]->result_qual, 5))
    
    if (nResultSize > 0) 
      
      select into "nl:"
      from (dummyt d1 with seq = value(nResultSize)),
        qc_result qr
      plan d1
      join qr
        where result_list->serv_res_qual[nIndex]->assay_qual[nIndex1]->
          result_qual[d1.seq]->qc_result_id = qr.qc_result_id
      with nocounter, forupdate(qr)
  
      if (curqual = 0)
        set error_cnt = error_cnt + 1
      else    
        update into (dummyt d1 with seq = value(nResultSize)),
          qc_result qr
        set 
          qr.result_control_cd = dIn_Control_cd, 
          qr.updt_dt_tm = cnvtdatetime(curdate,curtime),
          qr.updt_id = 0,
          qr.updt_task = 0,
          qr.updt_applctx = 0,
          qr.updt_cnt = qr.updt_cnt + 1
        plan d1
        join qr 
          where result_list->serv_res_qual[nIndex]->assay_qual[nIndex1]->
            result_qual[d1.seq]->qc_result_id = qr.qc_result_id
        with nocounter
        
        if (curqual = 0)
          set error_cnt = error_cnt + 1
          rollback
        else
          commit
        endif
        
      endif
      
    endif 
  
  endfor    

endfor

;---------------------------------------------------------
#EXIT_SCRIPT
/****************************
**  LOG Execution Status.  **
**                         ***************************************
**  Note:  if you have a check script then you do not 		**
**  need to perform the LOGSTATUS in the RDM script.  		**
**  Explicit COMMIT and/or ROLLBACK must be perform   		**
**  In this section both in the README and the CHECK 		**
**  script.  For example:                             		**
**     if (nCnt > 0)						**
**       COMMIT  ;Just in case LOGSTATUS pulls an Oracle error. **
**       CALL LOGSTATUS("Execution Successful.", "S") 		**
**       COMMIT                                       		**
**     else                                           		**
**       ROLLBACK                                            	**
**       CALL LOGSTATUS("Execution Failed because ...", "F")	**
**       COMMIT                                       		**
**     endif                                          		**
**                                                    		**
****************************************************************/


  if (error_cnt > 0)
    CALL LOGSTATUS("Error in either obtaining lock or updating row(s).", "F")
  elseif(nResource_cnt > 0)
    CALL LOGSTATUS("Execution Complete.", "S")
  else
    CALL LOGSTATUS("No data to update.", "S")
  endif
  
/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (GLB_RDM_UPD_QC_RESULTS_TABLE) Complete - [<date/time>]." **
**************************************************************/
CALL LOGSCRIPTEND(sREADME_NAME)


end go

;Generated by GNU enscript 1.6.4.
