 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_qc_results/GLB_GET_QC_RESULTS.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_QC_RESULTS.PRG
        Object name:            GLB_GET_QC_RESULTS
        Request #:              257523
 
        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Retrieve QC Result info from the database
 
        Tables read:            qc_result
                                resource_accession_r
                                control_lot
                                accession
                                discrete_task_assay
                                nomenclature
                                prsnl
                                qc_comment
 
        Tables updated:         n/a
 
        Executing from:         General Lab QC Inquiry
 
        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 08/01/96 Chad Moats           Initial Release                     *
;    *001 11/17/97 Hal Patchen          Add subsection level data map check *
;    *002 12/12/97 Kevin Brunner        Add auto verify logic               *
;    *003 01/19/98 Kevin Brunner        Allow x-testsite retrieval          *
;    *004 05/05/98 Hal Patchen          Verify subsection level data map    *
;    *                                  is associated with route test site  *
;    *005 08/17/98 Chad Moats           Add Patient Data Logic              *
;    *006 08/02/99 Gary Runde           Return the control name from script *
;    *007 08/27/99 Gary Runde           Return the apr.display_sequence for *
;                                       sorting the QCInquiry spread        *
;    *008 01/05/02 Sasi Gandham         Add Fields to Order by for Head, UAR*
;    *009 09/19/02 Mark Brooks          Added service resource security.    *
;	 *010 05/23/07 Subramanya 			Change cnvtdate to cnvtdatetime to fetch * 
;										the result based on both date and time	*
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
      drop program GLB_GET_QC_RESULTS:dba go
      create program GLB_GET_QC_RESULTS:dba
 
%i cclsource:pcs_resource_security.inc                                 ;009
%i cclsource:pcs_subevent.inc
 
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 task_assay_cd                = f8
         1 control_id                   = f8
         1 service_resource_cd          = f8
         1 begin_date                   = dq8
         1 end_date                     = dq8
         1 accept_ind                   = i2
         1 verify_ind                   = i2
         1 review_ind                   = i2
         1 change_ind                   = i2
         1 oldchange_ind                = i2
         1 reject_ind                   = i2
         1 discard_ind                  = i2
      )
*/
 
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/
 
      record reply
      (
	 1 control_desc			= vc
         1 results[*]
           2 display_sequence           = i4           ;007
           2 qc_result_id               = f8
           2 qc_group_id                  = f8
           2 accession_id               = f8
           2 accession                  = vc
           2 result_status_cd           = f8
           2 result_status_disp         = vc
           2 review_tech                  = vc
           2 review_dt_tm               = dq8
           2 review2_tech                  = vc
           2 review2_dt_tm               = dq8
           2 control_id                 = f8
           2 lot_id                     = f8
           2 lot_number                 = c20
           2 service_resource_cd        = f8
           2 service_resource_disp      = vc
           2 task_assay_cd              = f8
           2 mnemonic                   = vc
           2 result_tech                = c100
           2 result_tech_id             = f8
           2 perform_dt_tm              = dq8
           2 result_type_cd             = f8
           2 result_type_disp           = vc
           2 result_type_mean           = vc
           2 result_value_numeric       = f8
           2 result_value_alpha         = c25
           2 nomenclature_id            = f8
           2 resource_error_codes         = c100
           2 mulitplex_resource_cd        = f8
           2 rule_id                      = f8
           2 mean                         = f8
           2 prev_result_id             = f8
           2 clinical_std_dev           = f8
           2 statistical_std_dev        = f8
           2 abs_low                    = f8
           2 abs_high                   = f8
           2 result_control_cd            = f8
           2 result_control_disp          = vc
           2 result_control_mean          = vc
           2 numeric_raw_value            = f8
           2 preactive_ind                = i2
           2 qc_result_updt_cnt           = i4
           2 result_process_cd            = f8
           2 result_process_disp          = vc
           2 ascii_text                   = c60
           2 interface_flag               = i2
           2 max_digits                   = i2
           2 min_digits                   = i2
           2 min_decimal_places           = i2
           2 comment_ind                  = i2
 
%i cclsource:status_block.inc
 
;009         1 status_data
;009           2 status                  = c1
;009           2 subeventstatus[1]
;009             3 OperationName         = c15
;009             3 OperationStatus       = c1
;009             3 TargetObjectName      = c15
;009             3 TargetObjectValue     = vc
      )
 
 
     #Script
 
      declare RESULT_STATUS_CODESET       = i4 with protect, constant(1901)
      declare FOOTNOTE_CODESET            = i4 with protect, constant(14)
      declare RESULT_STATUS_ACCEPT_CDF    = c12 with protect, constant("ACCEPT")
      declare RESULT_STATUS_VERIFIED_CDF  = c12 with protect, constant("VERIFIED")
      declare RESULT_STATUS_AUTO_VERF_CDF  = c12 with protect, constant("AUTOVERIFIED")
      declare RESULT_STATUS_REVIEWED_CDF = c12 with protect, constant("REVIEWED")
      declare RESULT_STATUS_REVIEWED2_CDF = c12 with protect, constant("REVIEWED2")
      declare RESULT_STATUS_CORRECTED_CDF = c12 with protect, constant("CORRECTED")
      declare RESULT_STATUS_OLDCORRECTED_CDF  = c12 with protect, constant("OLDCORRECTED")
      declare RESULT_STATUS_CHANGED_CDF = c12 with protect, constant("CHANGE")
      declare RESULT_STATUS_OLDCHANGED_CDF = c12 with protect, constant("OLD CHANGE")
      declare RESULT_STATUS_REJECTED_CDF = c12 with protect, constant("REJECT")
      declare RESULT_STATUS_DISCARDED_CDF = c12 with protect, constant("DISCARD")
      declare FOOTNOTE_CDF = c12 with protect, constant("QC FTNT")
      declare SERV_RES_TYPE_CODESET       = i4 with protect, constant(223)
      declare SERV_RES_SUBSECTION_CDF     = c12 with protect, constant("SUBSECTION")
      declare result_status_accept_cd = f8 with protect, noconstant(0.0)
      declare result_status_reviewed_cd  = f8 with protect, noconstant(0.0)
      declare result_status_reviewed2_cd  = f8 with protect, noconstant(0.0)
      declare result_status_verified_cd  = f8 with protect, noconstant(0.0)
      declare result_status_auto_verf_cd  = f8 with protect, noconstant(0.0)
      declare result_status_corrected_cd = f8 with protect, noconstant(0.0)
      declare result_status_oldcorrected_cd  = f8 with protect, noconstant(0.0)
      declare result_status_rejected_cd = f8 with protect, noconstant(0.0)
      declare result_status_discarded_cd = f8 with protect, noconstant(0.0)
      declare result_status_changed_cd = f8 with protect, noconstant(0.0)
      declare result_status_oldchanged_cd = f8 with protect, noconstant(0.0)
      declare serv_res_subsection_cd  = f8 with protect, noconstant(0.0)
      declare iServ_Resource_Viewable = i2 with protect, noconstant(0)
      set reply->status_data->status = "F"
      set r_cnt = 0
      declare FOOTNOTE_CD = f8 with protect, noconstant(0.0)
      set x = 0
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty
      declare dServiceResourceCd = f8 with protect, noconstant(0.0)           ;009
 
      if (request->service_resource_cd = 0)                                   ;009
          call InitResourceSecurity(1)                                        ;009
      else                                                                    ;009
          call InitResourceSecurity(0)                                        ;009
      endif                                                                   ;009
 
 
   /***********************************************************************
   * Load code values                                                     *
   ***********************************************************************/
 
    SET stat = UAR_GET_MEANING_BY_CODESET(SERV_RES_TYPE_CODESET,SERV_RES_SUBSECTION_CDF,1,serv_res_subsection_cd)
 
    if (serv_res_subsection_cd = 0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of SUBSECTION_CD (cs 223) failed.")
        go to exit_script
    endif
 
 /***********************************************************************
 * Load result status and footnote code set                             *
 ***********************************************************************/
 
SET stat = UAR_GET_MEANING_BY_CODESET(FOOTNOTE_CODESET,"QC FTNT",1,FOOTNOTE_CD)
 
if (FOOTNOTE_CD= 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of QC FOOTNOTE (cs 14) failed.")
  go to exit_script
endif
 
SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_ACCEPT_CDF,1,result_status_accept_cd)
 
if (result_status_accept_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of ACCEPT (cs 1901) failed.")
  go to exit_script
endif
 
SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,"REVIEWED",1,result_status_reviewed_cd)
 
if (result_status_reviewed_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REVIEWED (cs 1901) failed.")
  go to exit_script
endif
 
SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_REVIEWED2_CDF,1,result_status_reviewed2_cd)
 
if (result_status_reviewed2_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REVIEWED2 (cs 1901) failed.")
  go to exit_script
endif
 
SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,"VERIFIED",1,result_status_verified_cd)
 
if (result_status_verified_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of VERIFIED (cs 1901) failed.")
  go to exit_script
endif
 
SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_AUTO_VERF_CDF,1,result_status_auto_verf_cd)
 
if (result_status_auto_verf_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of AUTO VERIFIED (cs 1901) failed.")
  go to exit_script
endif
 
SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_CORRECTED_CDF,1,result_status_corrected_cd)
 
if (result_status_corrected_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of CORRECTED (cs 1901) failed.")
  go to exit_script
endif
 
SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_OLDCORRECTED_CDF,1,result_status_oldcorrected_cd)
 
if (result_status_oldcorrected_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of OLD_CORRECTED (cs 1901) failed.")
  go to exit_script
endif
 
    SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_REJECTED_CDF,1,result_status_rejected_cd)
 
    if (result_status_rejected_cd = 0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REJECTED (cs 1901) failed.")
        go to exit_script
    endif
 
	  SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_DISCARDED_CDF,1,result_status_discarded_cd)
 
    if (result_status_discarded_cd = 0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of DISCARDED (cs 1901) failed.")
        go to exit_script
    endif
 
	  SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_CHANGED_CDF,1,result_status_changed_cd)
 
    if (result_status_changed_cd = 0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of CHANGED (cs 1901) failed.")
        go to exit_script
    endif
 
	  SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_OLDCHANGED_CDF,1,result_status_oldchanged_cd)
 
    if (result_status_oldchanged_cd = 0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of OLD_CHANGED (cs 1901) failed.")
        go to exit_script
    endif
 
 
/********************************************************************/  ;006
/* Get the control name from the control_material table             */  ;006
/********************************************************************/  ;006
                                                                        ;006
	select into "nl:"                                               ;006
		cm.control_id,                                          ;006
		cm.short_description                                    ;006
	from control_material cm                                        ;006
	where cm.control_id = request->control_id                       ;006
	detail
		reply->control_desc = cm.short_description              ;006
	with nocounter                                                  ;006
 
/********************************************************************/
/* Select QC Results from the database                              */
/********************************************************************/
 
  SELECT
    if (request->service_resource_cd = 0 and request->task_assay_cd = 0)
       PLAN rar
         where rar.control_id = request->control_id
       JOIN q
         where q.control_id = request->control_id and
               q.service_resource_cd = rar.service_resource_cd and
               q.qc_result_type_flag = 0 and
               (q.perform_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) and 	;010
               ((q.result_status_cd = result_status_accept_cd and request->accept_ind = 1) or
               (q.result_status_cd = result_status_verified_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_auto_verf_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_rejected_cd and request->reject_ind = 1) or
               (q.result_status_cd = result_status_discarded_cd and request->discard_ind = 1) or
               (q.result_status_cd = result_status_changed_cd and request->change_ind = 1) or
               (q.result_status_cd = result_status_oldchanged_cd and request->oldchange_ind = 1))
       JOIN c
         where c.lot_id = q.lot_id
       JOIN r
         where r.qc_group_id = q.qc_group_id
       JOIN a
         where a.accession_id = r.accession_id
       JOIN d
         where d.task_assay_cd = q.task_assay_cd
       JOIN n
         where n.nomenclature_id = q.nomenclature_id
       join apr
         where apr.service_resource_cd = outerjoin(q.service_resource_cd) and
               apr.task_assay_cd = outerjoin(q.task_assay_cd)
       JOIN qe
         where qe.qc_result_id = outerjoin(q.qc_result_id)
       JOIN p
         where p.person_id = outerjoin(qe.event_personnel_id)
    elseif (request->service_resource_cd = 0 and request->task_assay_cd != 0)
       PLAN rar
         where rar.control_id = request->control_id
       JOIN q
         where q.control_id = request->control_id and
               q.service_resource_cd = rar.service_resource_cd and
               q.task_assay_cd = request->task_assay_cd and
               q.qc_result_type_flag = 0 and                                                                    ;005
               (q.perform_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) and	;010
               ((q.result_status_cd = result_status_accept_cd and request->accept_ind = 1) or
               (q.result_status_cd = result_status_verified_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_auto_verf_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_rejected_cd and request->reject_ind = 1) or
               (q.result_status_cd = result_status_discarded_cd and request->discard_ind = 1) or
               (q.result_status_cd = result_status_changed_cd and request->change_ind = 1) or
               (q.result_status_cd = result_status_oldchanged_cd and request->oldchange_ind = 1))
       JOIN c
         where c.lot_id = q.lot_id
       JOIN r
         where r.qc_group_id = q.qc_group_id
       JOIN a
         where a.accession_id = r.accession_id
       JOIN d
         where d.task_assay_cd = q.task_assay_cd
       JOIN n
         where n.nomenclature_id = q.nomenclature_id
       join apr
         where apr.service_resource_cd = outerjoin(q.service_resource_cd) and
               apr.task_assay_cd = outerjoin(q.task_assay_cd)
       JOIN qe
         where qe.qc_result_id = outerjoin(q.qc_result_id)
       JOIN p
         where p.person_id = outerjoin(qe.event_personnel_id)
    elseif (request->service_resource_cd != 0 and request->task_assay_cd = 0)
       PLAN q
         where q.control_id = request->control_id and
               q.service_resource_cd = request->service_resource_cd and
               q.qc_result_type_flag = 0 and                                                                    ;005
               (q.perform_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) and	;010
               ((q.result_status_cd = result_status_accept_cd and request->accept_ind = 1) or
               (q.result_status_cd = result_status_verified_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_auto_verf_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_rejected_cd and request->reject_ind = 1) or
               (q.result_status_cd = result_status_discarded_cd and request->discard_ind = 1) or
               (q.result_status_cd = result_status_changed_cd and request->change_ind = 1) or
               (q.result_status_cd = result_status_oldchanged_cd and request->oldchange_ind = 1))
       JOIN c
         where c.lot_id = q.lot_id
       JOIN r
         where r.qc_group_id = q.qc_group_id
       JOIN rar    ;needed because we use this table to plan where service_resource_cd = 0
         where rar.service_resource_cd = q.service_resource_cd
           and rar.accession_id = r.accession_id
       JOIN a
         where a.accession_id = r.accession_id
       JOIN d
         where d.task_assay_cd = q.task_assay_cd
       JOIN n
         where n.nomenclature_id = q.nomenclature_id
       join apr
         where apr.service_resource_cd = outerjoin(q.service_resource_cd) and
               apr.task_assay_cd = outerjoin(q.task_assay_cd)
       JOIN qe
         where qe.qc_result_id = outerjoin(q.qc_result_id)
       JOIN p
         where p.person_id = outerjoin(qe.event_personnel_id)
    endif
       into "nl:"
         apr_exists = evaluate(nullind(apr.seq), 0, 1, 0),
         qe_exists_ind = evaluate(nullind(qe.qc_result_id), 0, 1, 0),
         apr.display_sequence,
         apr.service_resource_cd,
         apr.task_assay_cd,
         q.qc_result_id,
         r.accession_id,
         c.lot_number,
         a.accession,
         qe.qc_result_id,
         p.person_id,
         d.task_assay_cd,
         n.nomenclature_id,
         qe.qc_result_id,
         p.name_full_formatted
       FROM
         resource_accession_r rar,
         qc_result q,
         qc_result_grp r,
         control_lot c,
         accession a,
         discrete_task_assay d,
         nomenclature n,
         assay_processing_r apr,
         qc_result_event qe,
         prsnl p
       PLAN q
         where q.control_id = request->control_id and
	       q.task_assay_cd = request->task_assay_cd and
               q.service_resource_cd = request->service_resource_cd and
               q.qc_result_type_flag = 0 and                                                                    ;005
               (q.perform_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) and	;010
               ((q.result_status_cd = result_status_accept_cd and request->accept_ind = 1) or
               (q.result_status_cd = result_status_verified_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_auto_verf_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_rejected_cd and request->reject_ind = 1) or
               (q.result_status_cd = result_status_discarded_cd and request->discard_ind = 1) or
               (q.result_status_cd = result_status_changed_cd and request->change_ind = 1) or
               (q.result_status_cd = result_status_oldchanged_cd and request->oldchange_ind = 1))
       JOIN c
         where c.lot_id = q.lot_id
       JOIN r
         where r.qc_group_id = q.qc_group_id
       JOIN rar    ;needed because we use this table to plan where service_resource_cd = 0 and
         where rar.service_resource_cd = q.service_resource_cd  ;every table must have be in join path
           and rar.accession_id = r.accession_id
       JOIN a
         where a.accession_id = r.accession_id
       JOIN d
         where d.task_assay_cd = q.task_assay_cd
       JOIN n
         where n.nomenclature_id = q.nomenclature_id
       join apr
         where apr.service_resource_cd = outerjoin(q.service_resource_cd) and
               apr.task_assay_cd = outerjoin(q.task_assay_cd)
       JOIN qe
         where qe.qc_result_id = outerjoin(q.qc_result_id)
       JOIN p
         where p.person_id = outerjoin(qe.event_personnel_id)
       ORDER BY  q.qc_result_id, qe.event_sequence DESC
       HEAD q.qc_result_id
         iServ_Resource_Viewable = 0
         result_tech_ind = 0
         result_tech_id_ind = 0
         review_tech_ind = 0
         review_dt_tm_ind = 0
         review2_tech_ind = 0
         review2_dt_tm_ind = 0
         dServiceResourceCd = q.service_resource_cd
         if (IsResourceViewable(dServiceResourceCd) = True)
             iServ_Resource_Viewable = 1
             r_cnt = r_cnt + 1
             if (mod(r_cnt,5) = 1)
                 stat =  alterlist(reply->results,r_cnt + 5)
             endif
             reply->results[r_cnt]->qc_result_id = q.qc_result_id,
             reply->results[r_cnt]->control_id = q.control_id,
             reply->results[r_cnt]->service_resource_cd = q.service_resource_cd,
             reply->results[r_cnt]->lot_id = q.lot_id,
             reply->results[r_cnt]->lot_number = c.lot_number,
             reply->results[r_cnt]->accession_id = r.accession_id,
             reply->results[r_cnt]->accession = a.accession,
             reply->results[r_cnt]->task_assay_cd = q.task_assay_cd,
             reply->results[r_cnt]->mnemonic = d.mnemonic,
             reply->results[r_cnt]->result_type_cd = q.result_type_cd,
             reply->results[r_cnt]->result_value_numeric = q.result_value_numeric,
             reply->results[r_cnt]->nomenclature_id = n.nomenclature_id,
             reply->results[r_cnt]->result_value_alpha = n.source_string,
             reply->results[r_cnt]->perform_dt_tm = cnvtdatetime(q.perform_dt_tm),
             reply->results[r_cnt]->result_status_cd = q.result_status_cd,
             reply->results[r_cnt]->result_process_cd = q.result_process_cd,
             reply->results[r_cnt]->result_control_cd = q.result_control_cd,
             reply->results[r_cnt]->qc_group_id = q.qc_group_id,
             reply->results[r_cnt]->resource_error_codes = q.resource_error_codes,
             reply->results[r_cnt]->rule_id = q.rule_id,
             reply->results[r_cnt]->mean = q.mean,
             reply->results[r_cnt]->prev_result_id = q.prev_result_id,
             reply->results[r_cnt]->clinical_std_dev = q.clinical_std_dev,
             reply->results[r_cnt]->statistical_std_dev = q.statistical_std_dev,
             reply->results[r_cnt]->abs_low = q.abs_low,
             reply->results[r_cnt]->abs_high = q.abs_high,
             reply->results[r_cnt]->numeric_raw_value = q.numeric_raw_value,
             reply->results[r_cnt]->preactive_ind = q.preactive_ind,
             reply->results[r_cnt]->qc_result_updt_cnt = q.updt_cnt,
             reply->results[r_cnt]->ascii_text = q.ascii_text,
             reply->results[r_cnt]->interface_flag = q.interface_flag,
             reply->results[r_cnt]->comment_ind = q.comment_ind,
    	     if (apr_exists = 1)
                 reply->results[r_cnt]->display_sequence = apr.display_sequence
             else
                 reply->results[r_cnt]->display_sequence = 0
	         endif
         endif
 
      DETAIL
        if ((iServ_Resource_Viewable = 1) and (qe_exists_ind = 1))
          CASE (qe.event_type_cd)
            OF result_status_verified_cd:
            OF result_status_auto_verf_cd:
            OF result_status_changed_cd:
	    OF result_status_discarded_cd:
              if (result_tech_ind = 0)
                reply->results[r_cnt]->result_tech = p.name_full_formatted
                result_tech_ind = 1
              endif
              if (result_tech_id_ind = 0)
                reply->results[r_cnt]->result_tech_id = p.person_id
                result_tech_id_ind = 1
              endif
            OF result_status_reviewed_cd:
              if (review_tech_ind = 0)
                reply->results[r_cnt].review_tech = p.name_full_formatted
                review_tech_ind = 1
              endif
              if (review_dt_tm_ind = 0)
                reply->results[r_cnt].review_dt_tm = qe.event_dt_tm
                review_dt_tm_ind = 1
              endif
            OF result_status_reviewed2_cd:
              if (review2_tech_ind = 0)
                reply->results[r_cnt].review2_tech = p.name_full_formatted
                review2_tech_ind = 1
              endif
              if (review2_dt_tm_ind = 0)
                reply->results[r_cnt].review2_dt_tm = qe.event_dt_tm
                 review2_dt_tm_ind = 1
              endif
           ENDCASE
         endif
   
        row+0
      WITH
        nocounter
 
      set stat = alterlist(reply->results,r_cnt)
 
      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif
 
      if (r_cnt = 0)
        set reply->status_data->status = "Z"
      else
        set reply->status_data->status = "S"
      endif
 
      go to exit_script
 
/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
 
     if ((reply->status_data->status != "F") and
         (GetResourceSecurityStatus(0) != "S"))                              ;009
         call PopulateResSecStatusBlock(0)                                   ;009
         set reply->status_data->status = GetResourceSecurityStatus(0)       ;009
     endif
 
END
GO

;Generated by GNU enscript 1.6.4.
