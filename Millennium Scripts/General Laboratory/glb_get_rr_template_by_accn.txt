 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_rr_template_by_accn/GLB_GET_RR_TEMPLATE_BY_ACCN.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_RR_TEMPLATE_BY_ACCN.PRG
        Object name:            GLB_GET_RR_TEMPLATE_BY_ACCN
        Request #:              257578

        Product:                General Lab - Round Robin
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Get the template for the round robin accn

        Tables read:

        Tables updated:         -none-

        Executing from:         General Lab RR Result Entry

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/11/99 Gary Runde           Initial Release                     *
;     001 07/24/00 Gary Runde           Exit script if select returns 0     *
;     002 01/05/02 Sasi Gandham         Add Fields to Order By For Head     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_RR_TEMPLATE_BY_ACCN:dba go
      create program GLB_GET_RR_TEMPLATE_BY_ACCN:dba

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
        1  accession            = vc
        1  service_resource_cd  = f8
      )
*/



/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
        1  accession_id                 = f8
        1  round_robin_ref_id           = f8
        1  display                      = vc
        1  service_resource_cd          = f8
        1  service_resource_disp        = vc
        1  assays[*]
                2  task_assay_cd        = f8
                2  task_assay_disp      = vc
                2  data_map_ind         = i2
                2  max_digits           = i4
                2  min_decimal_places   = i4
                2  min_digits           = i4
                2  results[*]
                        3  rr_result_id         = f8
                        3  rr_perform_result_id = f8
			3  repeat_nbr		= i4
                        3  result_status_cd     = f8
                        3  result_status_disp   = vc
                        3  result_status_mean   = vc
                        3  result_updt_cnt      = i4
                        3  numeric_result_value = f8
                        3  perform_dt_tm        = dq8
                        3  perform_personnel_id = f8
                        3  perform_personnel_name = vc
                        3  perform_result_updt_cnt = i4
                2  alias[*]
                        3  upld_assay_alias     = c25

%i cclsource:status_block.inc
)

        declare rslt_cnt        = i4
        declare al_cnt          = i4
        declare a_cnt           = i4
        declare max_assay_cnt   = i4
        declare serv_res_subsection_cd  = f8

        set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
        set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

        set SERV_RES_TYPE_CODESET       = 223
        set SERV_RES_SUBSECTION_CDF     = "SUBSECTION"
        set DATA_MAP_TYPE_FLAG          = 0

        set hSys = 0
        set SysStat = 0
        set max_assay_cnt = 0
        call uar_SysCreateHandle(hSys,SysStat)
        set sText = fillstring(254, " ")
        set cdf_meaning = fillstring(12, " ")
        set reply->status_data.status = "F"

        /********************************************************************/
        /*  Retrieve code values.                                           */
        /********************************************************************/
        set code_value = 0.0
        set code_set = SERV_RES_TYPE_CODESET
        set cdf_meaning = SERV_RES_SUBSECTION_CDF
        execute cpm_get_cd_for_cdf
        set serv_res_subsection_cd = code_value

        /********************************************************************/
        /*  Get round robin accession and previous results.                 */
        /********************************************************************/
        select into "NL:"
                a.accession_id,
                rar.round_robin_ref_id,
                rar.accession_id,
                rf.display,
                ra.task_assay_cd,
                art.service_resource_cd,
                art.upld_assay_alias,
                rr.service_resource_cd,
                rr.task_assay_cd,
                rr.rr_result_id,
                pr.rr_perform_result_id,
                result_exist = decode(rr.seq, "Y", "N"),
                alias_exist = decode(art.seq, "Y", "N")
        from    rr_accession_r  rar,
                round_robin_ref rf,
                rr_assay_r      ra,
                accession       a,
                assay_resource_translation art,
                rr_result rr,
                rr_perform_result pr,
                prsnl pl,
                dummyt d1,
                dummyt d2
        plan a where a.accession = request->accession
        join rar where rar.accession_id = a.accession_id
        join rf where rar.round_robin_ref_id = rf.round_robin_ref_id
        join ra where ra.round_robin_ref_id = rf.round_robin_ref_id
                and ra.service_resource_cd = request->service_resource_cd
        join d2
        join art where art.service_resource_cd = ra.service_resource_cd
                and art.task_assay_cd = ra.task_assay_cd
        join d1
        join rr where rr.round_robin_ref_id = ra.round_robin_ref_id
                and rr.accession_id = rar.accession_id
                and rr.service_resource_cd = ra.service_resource_cd
                and rr.task_assay_cd = ra.task_assay_cd
        join pr where rr.rr_result_id = pr.rr_result_id
                and rr.result_status_cd = pr.result_status_cd
        join pl where pl.person_id = pr.perform_personnel_id
        order by ra.display_sequence,
				 ra.task_assay_cd,
   				 art.upld_assay_alias,
			     pr.rr_perform_result_id
        head report
                reply->accession_id = rar.accession_id
                reply->round_robin_ref_id = rf.round_robin_ref_id
                reply->display = rf.display
                reply->service_resource_cd = request->service_resource_cd
                a_cnt = 0
        head ra.task_assay_cd
                a_cnt = a_cnt + 1
                if (mod(a_cnt, 5) = 1)
                   stat = alterlist(reply->assays, a_cnt+5)
                endif
                reply->assays[a_cnt].task_assay_cd = ra.task_assay_cd
                al_cnt = 0
                rslt_cnt = 0
        head art.upld_assay_alias
           if (alias_exist = "Y")
                al_cnt = al_cnt + 1
                if (mod(al_cnt, 5) = 1)
                   stat = alterlist(reply->assays[a_cnt].alias, al_cnt + 5)
                endif
                reply->assays[a_cnt].alias[al_cnt].upld_assay_alias =
                                art.upld_assay_alias
           endif
        head pr.rr_perform_result_id
           if (result_exist = "Y")
                rslt_cnt = rslt_cnt + 1
                if (mod(rslt_cnt, 5) = 1)
                   stat = alterlist(reply->assays[a_cnt].results, rslt_cnt+5)
                endif
                reply->assays[a_cnt].results[rslt_cnt].repeat_nbr   =
                                        pr.repeat_nbr
                reply->assays[a_cnt].results[rslt_cnt].rr_result_id =
                                        rr.rr_result_id
                reply->assays[a_cnt].results[rslt_cnt].rr_perform_result_id =
                                        pr.rr_perform_result_id
                reply->assays[a_cnt].results[rslt_cnt].result_status_cd =
                                        rr.result_status_cd
                reply->assays[a_cnt].results[rslt_cnt].result_updt_cnt =
                                        rr.updt_cnt
                reply->assays[a_cnt].results[rslt_cnt].numeric_result_value =
                                        pr.numeric_result_value
                reply->assays[a_cnt].results[rslt_cnt].perform_dt_tm =
                                        pr.perform_Dt_tm
                reply->assays[a_cnt].results[rslt_cnt].perform_personnel_id =
                                        pr.perform_personnel_id
                if (pr.perform_personnel_id > 0.0)
                  reply->assays[a_cnt].results[rslt_cnt].perform_personnel_name =
                                        pl.name_full_formatted
                endif
                reply->assays[a_cnt].results[rslt_cnt].perform_result_updt_cnt =
                                        pr.updt_cnt
           endif
        detail
           row +0
        foot ra.task_assay_cd
           stat = alterlist(reply->assays[a_cnt].results, rslt_cnt)
           stat = alterlist(reply->assays[a_cnt].alias, al_cnt)
        foot report
           max_assay_cnt = a_cnt
        with nocounter, outerjoin = d1, outerjoin = d2, dontcare = art

        if (a_cnt = 0)                                       ;001
           set reply->status_data.status = "Z"               ;001
           go to exit_script                                 ;001
        endif                                                ;001

        set stat = alterlist(reply->assays, a_cnt)

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

        /********************************************************************/
        /*  Retrieve data maps                                              */
        /********************************************************************/
         select into "nl:"
            d1.seq,
            dm.seq,
            d2.seq,
            rg_exists = decode(rg.seq, "Y", "N"),
            rg.seq
         from
            (dummyt d1 with seq = value(max_assay_cnt)),
            data_map dm,
            (dummyt d2 with seq = 1),
            resource_group rg
         plan d1
         join dm where dm.task_assay_cd = reply->assays[d1.seq]->task_assay_cd
                   and dm.data_map_type_flag = DATA_MAP_TYPE_FLAG
                   and dm.active_ind = 1
         join d2 where d2.seq = 1
         join rg where rg.parent_service_resource_cd = dm.service_resource_cd
                   and rg.child_service_resource_cd = reply->service_resource_cd
                   and rg.resource_group_type_cd = serv_res_subsection_cd
                   and rg.root_service_resource_cd = 0.0

         order by d1.seq

         head d1.seq
            data_map_level = 0
            reply->assays[d1.seq]->data_map_ind = 0

         detail
            ;* Check for exact match on data map
            if (data_map_level <= 2 and
                dm.service_resource_cd > 0.0 and
                dm.service_resource_cd = reply->service_resource_cd)
               data_map_level = 3
               reply->assays[d1.seq]->data_map_ind = 1
               reply->assays[d1.seq]->max_digits = dm.max_digits
               reply->assays[d1.seq]->min_digits = dm.min_digits
               reply->assays[d1.seq]->min_decimal_places =
                                                   dm.min_decimal_places
            endif

            ;* Check for subsection level data map
            if (data_map_level <= 1 and
                dm.service_resource_cd > 0.0 and
                rg_exists = "Y" and
                rg.parent_service_resource_cd = dm.service_resource_cd and
                rg.child_service_resource_cd = reply->service_resource_cd)
               data_map_level = 2
               reply->assays[d1.seq]->data_map_ind = 1
               reply->assays[d1.seq]->max_digits = dm.max_digits
               reply->assays[d1.seq]->min_digits = dm.min_digits
               reply->assays[d1.seq]->min_decimal_places =
                                                   dm.min_decimal_places
            endif

            ;* Check for default all resources level data map
            if (data_map_level = 0 and
                dm.service_resource_cd = 0.0)
               data_map_level = 1
               reply->assays[d1.seq]->data_map_ind = 1
               reply->assays[d1.seq]->max_digits = dm.max_digits
               reply->assays[d1.seq]->min_digits = dm.min_digits
               reply->assays[d1.seq]->min_decimal_places =
                                                   dm.min_decimal_places
            endif

         foot d1.seq
            row+0

         with nocounter,
              outerjoin = d2,
              dontcare = dm

         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif

        /********************************************************************/
        /*  Exit Script                                                          */
        /********************************************************************/

        if (a_cnt = 0)
                set reply->status_data.status = "Z"
        else
                set reply->status_data.status = "S"
        endif

#exit_script
call uar_SysDestroyHandle(hSys)
end
go

;Generated by GNU enscript 1.6.4.
