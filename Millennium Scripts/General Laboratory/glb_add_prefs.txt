 ;;Solution_Test/script/PathNet -- Gen Lab/glb_add_prefs/glb_add_prefs.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_ADD_PREFS.PRG
        Object name:            GLB_ADD_PREFS
        Request #:              250199

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Update and/or add rows to the DM_PREFS table
                                for the global preferences

        Tables read:

        Tables updated:         dm_prefs

        Executing from:         General Lab Preference Tool

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 05/03/00 Gary Runde           Initial Release                     *
;     001 08/12/00 Chris Heil           Save consistency comment prefs.     *
;     002 06/18/03 Darren Coughenour  Change dm_seq to dm_clinical_set to *
;                                       avoid oracle 9i remote seq error.   *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_ADD_PREFS:dba go
      create program GLB_ADD_PREFS:dba

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
        1 newPrefs[*]
          2  pref_domain         = vc
          2  pref_section        = vc
          2  pref_name           = vc
          2  pref_nbr            = i4
          2  pref_cd             = f8
        1 UpdatePrefs[*]
          2  pref_nbr            = i4
          2  pref_cd             = f8
          2  pref_id             = f8
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 AddedPrefs[*]
           2 pref_domain               = vc
           2 pref_section              = vc
           2 pref_name                 = vc
           2 pref_nbr                  = i4
           2 pref_cd                   = f8
           2 pref_id                   = f8
%I cclsource:status_block.inc
      )

     #Script
      set reply->status_data->status = "F"
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty
      set num_new_prefs = size(request->newPrefs, 5)
      set num_upd_prefs = size(request->UpdatePrefs, 5)
      set FAILED = "F"

      declare dNew_pref_id = f8

/********************************************************************/
/*  Insert the necessary rows on the DM_PREFS table                 */
/********************************************************************/
     if (num_new_prefs = 0)
        go to Update_Prefs
     endif

     for (pCnt = 1 to value(num_new_prefs))

        select into "nl:"
         next_seq_nbr = seq(DM_CLINICAL_SEQ,nextval)
        from dual
        detail
        dNew_pref_id = next_seq_nbr
        with nocounter, format

        insert into
             dm_prefs p
        set
             p.application_nbr = 0,
             p.reference_ind   = 1,
             p.person_id       = 0.0,
             p.pref_domain     = request->newPrefs[pCnt].pref_domain,
             p.pref_id         = dNew_pref_id,
             p.pref_section    = request->newPrefs[pCnt].pref_section,
             p.pref_name       = request->newPrefs[pCnt].pref_name,
             p.pref_nbr        = request->newPrefs[pCnt].pref_nbr,
             p.pref_cd         = request->newPrefs[pCnt].pref_cd,
             p.updt_applctx    = reqinfo->updt_applctx,
             p.updt_cnt        = 0,
             p.updt_dt_tm      = cnvtdatetime(curdate, curtime3),
             p.updt_id         = reqinfo->updt_id,
             p.updt_task       = reqinfo->updt_task
        plan p

        with nocounter

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
             set reply->status_data->status = "F"
             set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
             set FAILED = "T"
             go to exit_script
        endif

        if (curqual = 0)
             set reply->status_data.subeventstatus[1].OperationName =
                "INSERT"
             set reply->status_data.subeventstatus[1].OperationStatus =
                "F"
             set reply->status_data.subeventstatus[1].TargetObjectName =
                "DM_PREFS"
             set reply->status_data.subeventstatus[1].TargetObjectValue =
                concat("Unable to insert pref:", " ", request->newPrefs[pCnt].pref_name)
             set FAILED = "T"
             go to exit_script
        endif

        if (mod(pCnt, 5) = 1)
           set stat = alterlist(reply->AddedPrefs, pCnt + 5)
        endif

        set reply->AddedPrefs[pCnt].pref_domain = request->newPrefs[pCnt].pref_domain
        set reply->AddedPrefs[pCnt].pref_section = request->newPrefs[pCnt].pref_section
        set reply->AddedPrefs[pCnt].pref_name = request->newPrefs[pCnt].pref_name
        set reply->AddedPrefs[pCnt].pref_nbr = request->newPrefs[pCnt].pref_nbr
        set reply->AddedPrefs[pCnt].pref_cd = request->newPrefs[pCnt].pref_cd
        set reply->AddedPrefs[pCnt].pref_id = dNew_pref_id
     endfor

#UPDATE_PREFS
/********************************************************************/
/*  Update the necessary rows on the DM_PREFS table                 */
/********************************************************************/

     if (num_upd_prefs = 0)
        go to exit_script
     endif

     update into
        dm_prefs p,
        (dummyt d with seq = value(num_upd_prefs))
  set
        p.pref_nbr        = request->UpdatePrefs[d.seq].pref_nbr,
        p.pref_cd         = request->UpdatePrefs[d.seq].pref_cd,
        p.updt_applctx    = reqinfo->updt_applctx,
        p.updt_cnt        = p.updt_cnt + 1,
        p.updt_dt_tm      = cnvtdatetime(curdate, curtime3),
        p.updt_id         = reqinfo->updt_id,
        p.updt_task       = reqinfo->updt_task
  plan d
  join p where p.pref_id = request->UpdatePrefs[d.seq].pref_id
  with nocounter

     set error_check = ERROR(sErrorMsg,0)   ;get error message
     if (error_check != 0)
        set reply->status_data.subeventstatus[1].OperationName =
           "UPDATE"
        set reply->status_data.subeventstatus[1].OperationStatus =
           "F"
        set reply->status_data.subeventstatus[1].TargetObjectName =
           "DM_PREFS"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        set FAILED = "T"
     endif

#EXIT_SCRIPT
     if (failed = "F")
        set reply->status_data->status = "S"
        commit
     else
        rollback
     endif

END
GO

;Generated by GNU enscript 1.6.4.
