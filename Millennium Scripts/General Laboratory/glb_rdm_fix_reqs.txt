 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_fix_reqs/glb_rdm_fix_reqs.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2005 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

	Source file name:      glb_rdm_fix_reqs.prg
	Object name:           glb_rdm_fix_reqs
	Readme:                0

	Product:               PathNet
	Product Team:          PathNet
	HNA Version:           500
	CCL Version:           4.0
	
        Program purpose:       The purpose of this script is to update request rows.

	Tables read,           TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
	and access method:     --------------------    -----------------------------
                               Request                 Unique

  Tables updated:        

	Executing from:        readme step

	Special Notes:         Each section should clearly identify what the purpose
                           of that README step is.  And ALL README steps in this
                           file should be considered RUN ONCE.

	Run Occurance:         (select ONE of the following)
                           -----------------------------
                           [X] 1. RUN ONCE
                           [ ] 2. RUN MANY

	ReadMe Category:       (select ONE of the following)
                           -----------------------------
                           [ ] 1. Data Load
                           [X] 2. Data Conversion
                           [ ] 3. Data Migration

	Execution Time:        (select ONE of the following)
                           ------------------------------------
                           [ ] 1. Uptime before uptime schema.
                           [ ] 2. Uptime after uptime schema.
                           [ ] 3. Downtime before downtime schema.
                           [x] 4. Downtime after downtime schema.
                           [ ] 5. Uptime after all other components.
	
	Exec. Justification:   Request updating can fall in this time slice.
      
  Parent Script:         n/a

	Check Script:          n/a		

	Data file for import:  n/a
	
	Execution Duration:    (select ONE of the following)
                           ----------------------------------
                           [X] 1. Fixed Time
                           [ ] 2. Driver Table: ___________________________

******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- --------------------	----------------------------------- *
;    *### 05/21/07 Ryan Manuel          Initial Release                     *
;~DE~************************************************************************

;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program glb_rdm_fix_reqs:dba go
create program glb_rdm_fix_reqs:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "glb_rdm_fix_reqs"
CALL LOGSCRIPTSTART(sREADME_NAME)
call LOGSTATUS(build( "Readme Failed:  Starting script ",sREADME_NAME,"."),"F") ;Required by readme team.

declare lErrorCode    = i4 with protect, noconstant(0)
declare sErrorMessage = vc with protect, noconstant("")
declare err_ind = i4    ;changed the way we declare as requested by readme team
set err_ind = 0         ;changed the way we declare as requested by readme team

/*************************
**  Update Request Rows **
**************************/

select into "nl:"
from request r
where r.request_number in (250074, 1052525, 1052524)
  and r.requestclass != 1
with nocounter, forupdate(r)

set lErrorCode = error(sErrorMessage, 0)

if (lErrorCode > 0)
  rollback
  CALL LOGSTATUS(BUILD(sREADME_NAME, " Failed to select requests for update: ", sErrorMessage), "F")
  set err_ind = 1
  go to EXIT_SCRIPT
endif

update into request r
set r.requestclass = 1,
    r.updt_applctx = reqinfo->updt_applctx,
    r.updt_id      = reqinfo->updt_id,
    r.updt_cnt     = r.updt_cnt + 1,
    r.updt_task    = reqinfo->updt_task,
    r.updt_dt_tm   = sysdate
where r.request_number in (250074, 1052525, 1052524)
  and r.requestclass != 1
with nocounter

set lErrorCode = error(sErrorMessage, 0)

if (lErrorCode > 0)
  rollback
  CALL LOGSTATUS(BUILD(sREADME_NAME, " Failed to update request information: ", sErrorMessage), "F")
  set err_ind = 1
  go to EXIT_SCRIPT
endif

commit

CALL LOGSTATUS(BUILD(sREADME_NAME, " Execution complete."), "S")

/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
#EXIT_SCRIPT

CALL LOGSCRIPTEND(sREADME_NAME)
call echorecord(readme_data)    ;Required by readme team.
execute dm_readme_status        ;Required by readme team.

end go

;Generated by GNU enscript 1.6.4.
