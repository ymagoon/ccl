 ;;Solution_Test/script/PathNet -- Gen Lab/glb_solcap_automatic_worklists/glb_solcap_automatic_worklists.prg Turn on black mode


/*~BB~*******************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-1995 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 *~BE~*******************************************************************/
/************************************************************************
        Source file name:       GLB_SOLCAP_AUTOMATIC_WORKLISTS
        Object name:            GLB_SOLCAP_AUTOMATIC_WORKLISTS
        Request #:              None

        Product:                
        Product Team:           
        HNA Version:            
        CCL Version:            

        Program purpose:        Tracks capability 2010.2.00076.1
        
        Tables read:            WORKLIST_REF
                                WORKLIST
                                SERVICE_RESOURCE
                                LOCATION
                                

        Tables updated:         

        Executing from:         GLB_RDM_SOLCAP_AUTOMATIC_WKLST

        Special Notes:

******************************************************************************/
/*****************************************************************************
 **                                                                          *
 **Mod Date     Dev       Engineer             Comment                         *
 **--- -------- ------- -------------------- --------------------------------*
 **000 11/29/10         SH2468               Initial release                 *
 *****************************************************************************
 *************************  END OF ALL MODCONTROL BLOCKS  ********************/


drop program GLB_SOLCAP_AUTOMATIC_WORKLISTS:dba go
create program GLB_SOLCAP_AUTOMATIC_WORKLISTS:dba
  
/*
free record request
record request
(
	1 start_dt_tm = dq8            ; Beginning of the time range to check for
	                               ; capability use.
	1 end_dt_tm = dq8              ; End of the range.
)
 
set request->start_dt_tm = cnvtdatetime(curdate-1, 000000)
set request->end_dt_tm = cnvtdatetime(curdate-1, 235959)
 
free record reply
*/
if (not validate(reply ,0))
record reply
(
	1 solcap[*]                    ; One for each capability returned by the
	                               ; script
 
		2 identifier = vc          ; Required - capability identifier from PMO.
 
		2 degree_of_use_num = i4   ; At least one of the degree_of_uses must be
		2 degree_of_use_str = vc   ; filled out with a value measuring whether
		                           ; the capability is being used.
 
		2 distinct_user_count = i4 ; Optional - number of distinct users of the
		                           ; capability.
 
		2 position[*]              ; Optional - breakdown of capability use by
		                           ; position
			3 display = vc         ; Display name of the position
 
			3 value_num = i4       ; At least one of the values must be filled
			3 value_str = vc       ; out with the use by that position.
 
		2 facility[*]              ; Optional - breakdown of capability use by
		                           ; facility
			3 display = vc         ; Display name of the facility
 
			3 value_num = i4       ; At least one of the values must be filled
			3 value_str = vc       ; out with the use by that facility.
 
		2 other[*]                 ; Optional - breakdown of use by some other
		                           ; category; multiple "other" breakdowns are
		                           ; allowed
 
			3 category_name = vc   ; The type of breakdown performed.
			3 value[*]
				4 display = vc     ; Display name of the category
				4 value_num = i4   ; Degree of use by that category
				4 value_str = vc
)
endif

declare lWklstTypeCnt       = i4 with protect, noconstant(0)
declare lServiceResourceCnt = i4 with protect, noconstant(0)
declare lFacilityCdCnt      = i4 with protect, noconstant(0)  ;all location codes used are type FACILITY
declare lIdx                = i4 with protect, noconstant(0)
declare lStat               = i4 with protect, noconstant(0)

declare dFACILITY_TYPE_CD = f8 with protect, constant(uar_get_code_by("MEANING", 222, "FACILITY"))

free record wklst_type_cnt_rec
record wklst_type_cnt_rec
(
  1 wklst_types[*]
    2 wklst_type_cd     = f8
    2 count             = i4
)

free record service_resources_rec
record service_resources_rec
(
  1 service_resources[*]
    2 service_resource_cd   = f8
    2 worklist_count        = i4
)

free record facility_codes_rec
record facility_codes_rec
(
  1 facility_codes[*]
    2 facility_code         = f8
    2 worklist_count        = i4
)

  set lStat = alterlist(reply->solcap, 1)
  set reply->solcap[1].identifier = "2010.2.00076.1"
  
  select into "nl:"
  from
    worklist_ref wr
    , worklist w
  plan wr where wr.automatic_worklist_ind = 1 
  join w where w.worklist_ref_id = wr.worklist_ref_id 
               and w.worklist_dt_tm between cnvtdatetime(request->start_dt_tm) and cnvtdatetime(request->end_dt_tm)
  order by wr.automatic_worklist_type_cd, wr.service_resource_cd 
  
  head report
    lWklstTypeCnt = 0
    lServiceResourceCnt = 0
  head wr.automatic_worklist_type_cd
    lIdx = 0 
  head wr.service_resource_cd
    lSRCnt = 0 
    lSRIdx = locateval(lIdx, 1, lServiceResourceCnt, wr.service_resource_cd, 
                            service_resources_rec->service_resources[lIdx].service_resource_cd)
    if (lSRIdx = 0 )
      lServiceResourceCnt = lServiceResourceCnt + 1
      if (mod(lServiceResourceCnt, 10) = 1)
         stat = alterlist(service_resources_rec->service_resources, lServiceResourceCnt +9)
      endif
      service_resources_rec->service_resources[lServiceResourceCnt].service_resource_cd = wr.service_resource_cd 
    endif
    
  foot wr.service_resource_cd 
    lSRCnt = count(w.worklist_id)
    if (lSRIdx > 0)
      service_resources_rec->service_resources[lSRIdx].worklist_count = 
                             service_resources_rec->service_resources[lSRIdx].worklist_count + lSRCnt
     else
      service_resources_rec->service_resources[lServiceResourceCnt].worklist_count = lSRCnt
    endif
  foot wr.automatic_worklist_type_cd 
    lWklstTypeCnt = lWklstTypeCnt + 1
    stat = alterlist(wklst_type_cnt_rec->wklst_types, lWklstTypeCnt)
    wklst_type_cnt_rec->wklst_types[lWklstTypeCnt].wklst_type_cd = wr.automatic_worklist_type_cd 
    wklst_type_cnt_rec->wklst_types[lWklstTypeCnt].count = count(w.worklist_id)  ;wklst_cnt
  foot report
    reply->solcap[1].degree_of_use_num = count(w.worklist_id)
    stat = alterlist(service_resources_rec->service_resources, lServiceResourceCnt)
  with nocounter
  
  if (reply->solcap[1].degree_of_use_num > 0)
    set reply->solcap[1].degree_of_use_str = "Yes"
  else
    set reply->solcap[1].degree_of_use_str = "No"
  endif
  
  if ( reply->solcap[1].degree_of_use_num = 0 )
    return
  endif
  
  select into "nl:"
  from
    service_resource sr
    , location l
    
  plan sr where expand(lIdx, 1, lServiceResourceCnt, sr.service_resource_cd ,
                              service_resources_rec->service_resources[lIdx].service_resource_cd )
  join l where l.organization_id = sr.organization_id 
         and l.location_type_cd = dFACILITY_TYPE_CD
  order by l.location_cd, sr.service_resource_cd 
  head report
    lFacilityCdCnt = 0
  head l.location_cd 
    lFacilityCdCnt = lFacilityCdCnt + 1
    if ( mod( lFacilityCdCnt, 10 ) = 1 )
      stat = alterlist(facility_codes_rec->facility_codes, lFacilityCdCnt + 9 )
    endif
    facility_codes_rec->facility_codes[lFacilityCdCnt].facility_code = l.location_cd 
  head sr.service_resource_cd 
    lSRIdx = locateval(lIdx, 1, lServiceResourceCnt, sr.service_resource_cd, 
                            service_resources_rec->service_resources[lIdx].service_resource_cd)
    if (lSRIdx > 0)  ;this should always be > 0 because the the select is based on the service_resources_rec record
      facility_codes_rec->facility_codes[lFacilityCdCnt].worklist_count = 
          facility_codes_rec->facility_codes[lFacilityCdCnt].worklist_count + 
          service_resources_rec->service_resources[lSRIdx].worklist_count 
    endif  
  foot report
    stat = alterlist(facility_codes_rec->facility_codes, lFacilityCdCnt)
  with nocounter
  
  declare lValidFacilityCdCnt = i4 with protect,noconstant(0)
  declare sFacilityDisplay    = vc with protect,noconstant("")
  
  set lStat = alterlist(reply->solcap[1].facility, lFacilityCdCnt)
  set lValidFacilityCdCnt = 0
  for ( lIdx = 1 to lFacilityCdCnt )
    set sFacilityDisplay = uar_get_code_display(facility_codes_rec->facility_codes[lIdx].facility_code)
    ;only add to reply if the facility code is valid
    if ( trim(sFacilityDisplay,3) > "" )
      set lValidFacilityCdCnt = lValidFacilityCdCnt + 1
      set reply->solcap[1].facility[lValidFacilityCdCnt].display = 
                                                  uar_get_code_display(facility_codes_rec->facility_codes[lIdx].facility_code)
      set reply->solcap[1].facility[lValidFacilityCdCnt].value_num = facility_codes_rec->facility_codes[lIdx].worklist_count 
    endif
  endfor 
  set lStat = alterlist(reply->solcap[1].facility, lValidFacilityCdCnt)
   
  set lStat = alterlist(reply->solcap[1].other, 1)
  set reply->solcap[1].other[1].category_name = "Pathnet Automatic Worklist IDs Generated by Worklist Type"
  set lStat = alterlist(reply->solcap[1].other[1].value, lWklstTypeCnt)
  for ( lIdx = 1 to lWklstTypeCnt )
    set reply->solcap[1].other[1].value[lIdx].display = uar_get_code_display(wklst_type_cnt_rec->wklst_types[lIdx].wklst_type_cd )
    set reply->solcap[1].other[1].value[lIdx].value_num = wklst_type_cnt_rec->wklst_types[lIdx].count 
  endfor
  
end
go





;Generated by GNU enscript 1.6.4.
