 ;;Solution_Test/script/PathNet -- Gen Lab/glb_upd_qc_control_group/glb_upd_qc_control_group.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_upd_qc_control_group.prg
        Object name:            glb_upd_qc_control_group
        Request #:              257590

        Product:                PathNet                             
        Product Team:           General Lab      
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Save the control_group information defined in
                                the benchmark criteria dialog.
                                
        Tables read:            code_value,
                                qc_group_crtl_resource,
                                qc_group_assay
        
        Tables updated:         code_value,
                                qc_group_crtl_resource,
                                qc_group_assay
        
        Executing from:         QC Benchmark dll 

        Special Notes:          None                                                                                

******************************************************************************/

 
;~DB~****************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG                  *
;    ****************************************************************************
;    *                                                                          *
;    *Mod Date     Engineer             Comment                                 *
;    *--- -------- -------------------- --------------------------------------- *
;     001 06/09/05 Scott Sundahl        Initial release                         *
;~DE~****************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program glb_upd_qc_control_group:dba go
create program glb_upd_qc_control_group:dba


/****************************************************************************
* Declarations                                                              *
*****************************************************************************/

/*
record request
(
  1 control_group_cd              = f8
  1 control_group_name            = c100
  1 updated_ind                   = i2
  1 code_value_updt_cnt           = i4
  1 active_ind                    = i2
  1 controls [*]
    2 control_id                  = f8
    2 control_name                = vc
    2 control_key                 = i4
    2 resources [*]
      3 qc_group_ctrl_resource_id = f8
      3 service_resource_cd       = f8
      3 service_resource_disp     = vc
      3 active_ind                = i2
      3 qc_group_ctrl_updt_cnt    = i4
      3 resource_key              = i4
  1 procedures [*]
    2 qc_group_assay_id           = f8
    2 task_assay_cd               = f8
    2 deviation_type_flag         = i2
    2 max_dispersion_value        = f8
    2 max_mean_value              = f8
    2 max_result_deviation_value  = f8
    2 result_range_min_value      = f8
    2 result_range_max_value      = f8
    2 active_ind                  = i2
    2 qc_group_assay_updt_cnt     = i4
    2 procedure_key               = i4
)
*/

record reply
(
  1 control_group_cd              = f8
  1 code_value_updt_cnt           = i4
  1 control_resources [*]
    2 qc_group_ctrl_resource_id   = f8
    2 control_key                 = i4
    2 resource_key                = i4
  1 procedures [*]
    2 qc_group_assay_id           = f8
    2 qc_group_assay_updt_cnt     = i4
    2 procedure_key               = i4
%i cclsource:status_block.inc
)

record list
(
%i cclsource:pcs_upd_code_values_REQ.inc
)


record list_reply
(
%i cclsource:pcs_upd_code_values_REP.inc
)


declare lCount                    = i4 with protect, noconstant(0)
declare lCount2                   = i4 with protect, noconstant(0)
declare nDuplicate                = i2 with protect, noconstant(false)
declare dSequence                 = f8 with protect, noconstant(0.0)
declare sErrorMessage             = vc with protect, noconstant(" ")
declare lErrorCode                = i4 with protect, noconstant(0)
declare dTaskAssayCd              = f8 with protect, noconstant(0.0)
declare lSeqNumber                = i4 with protect, noconstant(0)
declare lTempSizeVar              = i4 with protect, noconstant(0)
declare nFailedInd                = i2 with protect, noconstant(false)
declare dDuplicateControlGrpCd    = f8 with protect, noconstant(0.0)

declare InsertNewGroupAssay(lIndex = i4) = i2
declare CheckForDupControlGroup(Null) = i2
declare CheckForDupControlServRes(Null) = i2

set reply->status_data.status = "F"
set reqinfo->commit_ind = 0 

/****************************************************************************
* Update/Insert control group into code_value                               *
*****************************************************************************/

if (request->control_group_cd > 0.0 and request->updated_ind = 1)
  
  ; determine if description is a duplicate
  
  if (CheckForDupControlGroup(null) = true)
    set reply->status_data.status = "N"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = "duplicate control_group_name"
    set nFailedind = true
    go to exit_script
  endif

  ; validate updt_cnt
  
  set nDuplicate = false 
        
  select into "nl:"
  
  from code_value cv
  
  where cv.code_value = request->control_group_cd
  
  detail
    if (cv.updt_cnt != request->code_value_updt_cnt)
      nDuplicate = true
    endif

  with nocounter
  
  if (nDuplicate = true)
    set reply->status_data->subeventstatus[1]->TargetObjectValue = "updt_cnt mismatch on code_value"
    set nFailedind = true
    go to exit_script
  endif
  
  
  ; update definition for the control group
  
  set stat = alterlist(list->qual, 1)

  set list->qual[1].code_value   = request->control_group_cd
  set list->qual[1].code_set     = 1909
  set list->qual[1].display      = substring(1, 40, request->control_group_name)
  set list->qual[1].description  = substring(1, 60, request->control_group_name)
  set list->qual[1].definition   = request->control_group_name
  set list->qual[1].active_ind   = request->active_ind

  execute pcs_upd_code_values with replace("REQUEST", "LIST"), replace("REPLY", "LIST_REPLY")

  if (list_reply->status_data.status != "S")
    set reply->status_data->subeventstatus[1]->TargetObjectValue = "error updating code_value"
    set nFailedind = true
    go to exit_script
  else
    set reply->code_value_updt_cnt = request->code_value_updt_cnt + 1
  endif

  set reply->control_group_cd = request->control_group_cd

elseif (request->control_group_cd <= 0.0)
  
  ; determine if description is a duplicate
  
  if (CheckForDupControlGroup(null) = true)
    set reply->status_data.status = "N"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = "duplicate control_group_name"
    set nFailedind = true
    go to exit_script
  endif

  ; insert new control group
  
  set stat = alterlist(list->qual, 1)
  
  set list->qual[1].code_set     = 1909
  set list->qual[1].display      = substring(1, 40, request->control_group_name)
  set list->qual[1].description  = substring(1, 60, request->control_group_name)
  set list->qual[1].definition   = request->control_group_name
  set list->qual[1].active_ind   = request->active_ind  

  execute pcs_upd_code_values with replace("REQUEST", "LIST"), replace("REPLY", "LIST_REPLY")

  if (list_reply->status_data.status != "S")
    set reply->status_data->subeventstatus[1]->TargetObjectValue = "error inserting into code_value"
    set nFailedind = true
    go to exit_script
  else
    set reply->control_group_cd = list_reply->qual[1].code_value 
    set reply->code_value_updt_cnt = 0
  endif

else

  ; existing control_group_cd, not altered

  set reply->control_group_cd = request->control_group_cd

endif

/****************************************************************************
* Update/Insert into qc_group_ctrl_resource                                 *
*****************************************************************************/

if (size(request->controls, 5) > 0)

  for (lCount = 1 to size(request->controls, 5))
  
    for (lCount2 = 1 to size(request->controls[lCount]->resources, 5))
  
      if (request->controls[lCount]->resources[lCount2].qc_group_ctrl_resource_id > 0.0)
  
        ; validate updt_cnt
        
        set nDuplicate = false 
        
        select into "nl:"
        
        from qc_group_ctrl_resource qc
        
        where qc.qc_group_ctrl_resource_id = request->controls[lCount]->resources[lCount2].qc_group_ctrl_resource_id
        
        detail
          if (qc.updt_cnt != request->controls[lCount]->resources[lCount2].qc_group_ctrl_updt_cnt)
            nDuplicate = true
          endif
  
        with nocounter
        
        if (nDuplicate = true)
          set reply->status_data->subeventstatus[1]->TargetObjectValue = "updt_cnt mismatch on qc_group_ctrl_resource"
          set nFailedind = true
          go to exit_script
        endif
  
        ; check for duplicate control_id/service_resource_cd combination
  
        if (CheckForDupControlServRes(Null) = true)
          set nFailedind = true
          go to exit_script
        endif
        
        ; Validation successful, lock table for update
        
        select into "nl:"
        
        from qc_group_ctrl_resource qc
        
        where qc.qc_group_ctrl_resource_id = request->controls[lCount]->resources[lCount2].qc_group_ctrl_resource_id
        
        with forupdate(qc)
        
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
          set reply->status_data.subeventstatus[1].TargetObjectValue = "Error locking qc_group_ctrl_resource for update."
          set nFailedind = true
          go to exit_script
        endif
        
        ; update qc_group_ctrl_resource table

        insert into qc_group_ctrl_resource qc
        (
          qc.qc_group_ctrl_resource_id,
          qc.active_ind,
          qc.beg_effective_dt_tm,
          qc.control_group_cd,
          qc.control_id,
          qc.end_effective_dt_tm,
          qc.prev_qc_group_ctrl_resource_id,
          qc.service_resource_cd,
          qc.updt_applctx,
          qc.updt_cnt,
          qc.updt_dt_tm,
          qc.updt_id,
          qc.updt_task
        )
        (
          select 
            var_qc_group_ctrl_resource_id = seq(reference_seq, nextval),
            var_active_ind = 0,
            qc2.beg_effective_dt_tm,
            qc2.control_group_cd,
            qc2.control_id,
            var_end_effective_dt_tm = cnvtdatetime(curdate, curtime3),
            qc2.prev_qc_group_ctrl_resource_id,
            qc2.service_resource_cd,
            var_updt_applctx = reqinfo->updt_applctx,
            var_updt_cnt = 0,
            var_updt_dt_tm = cnvtdatetime(curdate, curtime3),
            var_updt_id = reqinfo->updt_id,
            var_updt_task = reqinfo->updt_task
            
          from qc_group_ctrl_resource qc2
          
          where qc2.qc_group_ctrl_resource_id = request->controls[lCount]->resources[lCount2].qc_group_ctrl_resource_id
        )
        
        with nocounter

        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
          set reply->status_data.subeventstatus[1].TargetObjectValue = "Error inserting into qc_group_ctrl_resource."
          set nFailedind = true
          go to exit_script
        endif
        

        update into qc_group_ctrl_resource qc
        
        set qc.service_resource_cd    = request->controls[lCount]->resources[lCount2].service_resource_cd,
            qc.active_ind             = request->controls[lCount]->resources[lCount2].active_ind,
            qc.control_id             = request->controls[lCount].control_id,
            qc.control_group_cd       = reply->control_group_cd, 
            qc.beg_effective_dt_tm    = cnvtdatetime(curdate, curtime3),
            qc.end_effective_dt_tm    = if (request->controls[lCount]->resources[lCount2].active_ind = 0)
                                          cnvtdatetime(curdate, curtime3)  
                                        else
                                          cnvtdatetime("31-DEC-2100 23:59:59")
                                        endif,
            qc.updt_dt_tm             = cnvtdatetime(curdate, curtime3),
            qc.updt_id                = reqinfo->updt_id,
            qc.updt_task              = reqinfo->updt_task,
            qc.updt_applctx           = reqinfo->updt_applctx,
            qc.updt_cnt               = qc.updt_cnt + 1
            
        where qc.qc_group_ctrl_resource_id = request->controls[lCount]->resources[lCount2].qc_group_ctrl_resource_id
    
        with nocounter
  
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
          set reply->status_data.subeventstatus[1].TargetObjectValue = "Error updating into qc_group_ctrl_resource."
          set nFailedind = true
          go to exit_script
        endif
          
      elseif (request->controls[lCount]->resources[lCount2].qc_group_ctrl_resource_id = 0.0)

        ; check for duplicate control_id/service_resource_cd combination
  
        if (CheckForDupControlServRes(null) = true)
          set nFailedind = true
          go to exit_script
        endif
        
        ; insert a new row into qc_group_ctrl_resource
        
        select into "nl:"
          seq = seq(reference_seq, nextval)
        
        from dual
        
        detail
          dSequence = seq
          
        with nocounter
        
         
        insert into qc_group_ctrl_resource qc
        
        set qc.qc_group_ctrl_resource_id      = dSequence,
            qc.prev_qc_group_ctrl_resource_id = dSequence,
            qc.control_group_cd               = reply->control_group_cd,
            qc.service_resource_cd            = request->controls[lCount]->resources[lCount2].service_resource_cd,
            qc.active_ind                     = request->controls[lCount]->resources[lCount2].active_ind,
            qc.control_id                     = request->controls[lCount].control_id,
            qc.beg_effective_dt_tm            = cnvtdatetime(curdate, curtime3),
            qc.end_effective_dt_tm            = cnvtdatetime("31-DEC-2100 23:59:59"),
            qc.updt_dt_tm                     = cnvtdatetime(curdate, curtime3),
            qc.updt_id                        = reqinfo->updt_id,
            qc.updt_task                      = reqinfo->updt_task,
            qc.updt_applctx                   = reqinfo->updt_applctx,
            qc.updt_cnt                       = 0
      
        with nocounter
        
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
          set reply->status_data.subeventstatus[1].TargetObjectValue = "Error inserting into qc_group_ctrl_resource."
          set nFailedind = true
          go to exit_script
        endif
        
        set lTempSizeVar = size(reply->control_resources, 5)
        
        set lTempSizeVar = lTempSizeVar + 1 
        set stat = alterlist(reply->control_resources, lTempSizeVar)
        
        set reply->control_resources[lTempSizeVar].qc_group_ctrl_resource_id = dSequence
        set reply->control_resources[lTempSizeVar].control_key =
          request->controls[lCount].control_key 
        set reply->control_resources[lTempSizeVar].resource_key = 
          request->controls[lCount]->resources[lCount2].resource_key
      endif
  
    endfor
  
  endfor
  
endif

/****************************************************************************
* Update/Insert into qc_group_assay                                         *
*****************************************************************************/

if (size(request->procedures, 5) > 0)

  for (lCount = 1 to size(request->procedures, 5))
  
    if (request->procedures[lCount].qc_group_assay_id = 0.0)
      
      ; insert a new row into qc_group_assay
      
      if (InsertNewGroupAssay(lCount) = false)
        set nFailedind = true
        go to exit_script
      endif
  
    else
    
      ; validate updt_cnt and get task_assay_cd
      
      set nDuplicate = false
      
      select into "nl:"
      
      from qc_group_assay qc
      
      where qc.qc_group_assay_id = request->procedures[lCount].qc_group_assay_id
      
      detail
        dTaskAssayCd = qc.task_assay_cd 
        if (qc.updt_cnt != request->procedures[lCount].qc_group_assay_updt_cnt)
          nDuplicate = true
        endif
        
      with nocounter
    
      if (nDuplicate = true)
        set reply->status_data->subeventstatus[1]->TargetObjectValue = "updt_cnt mismatch on qc_group_assay"
        set nFailedind = true
        go to exit_script
      endif
      
      
      if (dTaskAssayCd = request->procedures[lCount].task_assay_cd)
      
        ; inactivate existing row and add a new one
        
        select into "nl:"
        
        from qc_group_assay qc
        
        where qc.qc_group_assay_id = request->procedures[lCount].qc_group_assay_id
        
        with forupdate(qc)
        
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
          set reply->status_data.subeventstatus[1].TargetObjectValue = "Error locking qc_group_assay for update."
          set nFailedind = true
          go to exit_script
        endif
      
        
        insert into qc_group_assay qc
        (
          qc.active_ind,
          qc.beg_effective_dt_tm,
          qc.control_group_cd,
          qc.deviation_type_flag,
          qc.end_effective_dt_tm,
          qc.group_assay_seq_nbr,
          qc.max_dispersion_value,
          qc.max_mean_value,
          qc.max_result_deviation_value,
          qc.prev_qc_group_assay_id,
          qc.qc_group_assay_id,
          qc.result_range_max_value,
          qc.result_range_min_value,
          qc.task_assay_cd,
          qc.updt_applctx,
          qc.updt_cnt,
          qc.updt_dt_tm,
          qc.updt_id,
          qc.updt_task
        )
        (
          select 
            var_active_ind = 0,
            qc2.beg_effective_dt_tm,
            qc2.control_group_cd,
            qc2.deviation_type_flag,
            var_end_effective_dt_tm = cnvtdatetime(curdate, curtime3),
            qc2.group_assay_seq_nbr,
            qc2.max_dispersion_value,
            qc2.max_mean_value,
            qc2.max_result_deviation_value,
            qc2.prev_qc_group_assay_id,
            var_qc_group_assay_id = seq(reference_seq, nextval),
            qc2.result_range_max_value,
            qc2.result_range_min_value,
            qc2.task_assay_cd,
            var_updt_applctx = reqinfo->updt_applctx,
            var_updt_cnt = 0,
            var_updt_dt_tm = cnvtdatetime(curdate, curtime3),
            var_updt_id = reqinfo->updt_id,
            var_updt_task = reqinfo->updt_task
          from qc_group_assay qc2
          
          where qc2.qc_group_assay_id = request->procedures[lCount].qc_group_assay_id
        )
        
        with nocounter
        
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
          set reply->status_data.subeventstatus[1].TargetObjectValue = "Error inserting into qc_group_assay."
          set nFailedind = true
          go to exit_script
        endif
      
  
        update into qc_group_assay qc
        
        set qc.active_ind                 = request->procedures[lCount].active_ind,
            qc.deviation_type_flag        = request->procedures[lCount].deviation_type_flag,
            qc.max_dispersion_value       = request->procedures[lCount].max_dispersion_value,
            qc.max_mean_value             = request->procedures[lCount].max_mean_value,
            qc.max_result_deviation_value = request->procedures[lCount].max_result_deviation_value,
            qc.result_range_min_value     = request->procedures[lCount].result_range_min_value,
            qc.result_range_max_value     = request->procedures[lCount].result_range_max_value,
            qc.beg_effective_dt_tm        = cnvtdatetime(curdate, curtime3),
            qc.end_effective_dt_tm        = if(request->procedures[lCount].active_ind = 0)
                                              cnvtdatetime(curdate, curtime3)
                                            else
                                              cnvtdatetime("31-DEC-2100 23:59:59")
                                            endif,
            qc.updt_dt_tm                 = cnvtdatetime(curdate, curtime3),
            qc.updt_id                    = reqinfo->updt_id,
            qc.updt_task                  = reqinfo->updt_task,
            qc.updt_applctx               = reqinfo->updt_applctx,
            qc.updt_cnt                   = qc.updt_cnt + 1
            
        where qc.qc_group_assay_id = request->procedures[lCount].qc_group_assay_id
        
        with nocounter
        
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
          set reply->status_data.subeventstatus[1].TargetObjectValue = "Error updating into qc_group_assay."
          set nFailedind = true
          go to exit_script
        endif

        set lTempSizeVar = size(reply->procedures, 5)
        
        set lTempSizeVar = lTempSizeVar + 1
        set stat = alterlist(reply->procedures, lTempSizeVar)
      
        set reply->procedures[lTempSizeVar].qc_group_assay_id = request->procedures[lCount].qc_group_assay_id
        set reply->procedures[lTempSizeVar].procedure_key = request->procedures[lCount].procedure_key
        set reply->procedures[lTempSizeVar].qc_group_assay_updt_cnt = 
            request->procedures[lCount].qc_group_assay_updt_cnt + 1


      else ; task_assay_cd changed
      
        ; inactivate existing row
      
        update into qc_group_assay qc
        
        set qc.active_ind                 = 0,
            qc.end_effective_dt_tm        = cnvtdatetime(curdate, curtime3),
            qc.updt_dt_tm                 = cnvtdatetime(curdate, curtime3),
            qc.updt_id                    = reqinfo->updt_id,
            qc.updt_task                  = reqinfo->updt_task,
            qc.updt_applctx               = reqinfo->updt_applctx,
            qc.updt_cnt                   = qc.updt_cnt + 1
            
        where qc.qc_group_assay_id = request->procedures[lCount].qc_group_assay_id
        
        with nocounter
        
        set lErrorCode = error(sErrorMessage, 0)
        if (lErrorCode > 0)
          set reply->status_data.subeventstatus[1].TargetObjectValue = "Error updating into qc_group_assay."
          set nFailedind = true
          go to exit_script
        endif
        
        ; insert a new row into qc_group_assay
        
        call InsertNewGroupAssay(lCount)
         
      endif
      
    endif
  
  endfor

endif

subroutine InsertNewGroupAssay(lIndex)
      
  select into "nl:"
    seq = seq(reference_seq, nextval)
  
  from dual
  
  detail
    dSequence = seq
    
  with nocounter
  
  
  set lSeqNumber = 1
  
  select into "nl:"
    seq = max(qc.group_assay_seq_nbr)
    
  from qc_group_assay qc
  
  where qc.control_group_cd = reply->control_group_cd 
    and qc.task_assay_cd = request->procedures[lIndex].task_assay_cd
  
  detail
    lSeqNumber = seq + 1
  
  with nocounter
  
   
  insert into qc_group_assay qc
  
  set qc.qc_group_assay_id          = dSequence,
      qc.prev_qc_group_assay_id     = dSequence,
      qc.group_assay_seq_nbr        = lSeqNumber,
      qc.task_assay_cd              = request->procedures[lIndex].task_assay_cd,
      qc.deviation_type_flag        = request->procedures[lIndex].deviation_type_flag,
      qc.max_dispersion_value       = request->procedures[lIndex].max_dispersion_value,
      qc.max_mean_value             = request->procedures[lIndex].max_mean_value,
      qc.max_result_deviation_value = request->procedures[lIndex].max_result_deviation_value,
      qc.result_range_min_value     = request->procedures[lIndex].result_range_min_value,
      qc.result_range_max_value     = request->procedures[lIndex].result_range_max_value,
      qc.active_ind                 = request->procedures[lIndex].active_ind,
      qc.control_group_cd           = reply->control_group_cd,
      qc.beg_effective_dt_tm        = cnvtdatetime(curdate, curtime3),
      qc.end_effective_dt_tm        = cnvtdatetime("31-DEC-2100 23:59:59"),
      qc.updt_dt_tm                 = cnvtdatetime(curdate, curtime3),
      qc.updt_id                    = reqinfo->updt_id,
      qc.updt_task                  = reqinfo->updt_task,
      qc.updt_applctx               = reqinfo->updt_applctx,
      qc.updt_cnt                   = 0
  
  with nocounter    
  
  set lErrorCode = error(sErrorMessage, 0)
  if (lErrorCode > 0)
    set reply->status_data.subeventstatus[1].TargetObjectValue = "Error inserting into qc_group_assay."
    return(false)
  endif
  
  set lTempSizeVar = size(reply->procedures, 5)
  
  set lTempSizeVar = lTempSizeVar + 1
  set stat = alterlist(reply->procedures, lTempSizeVar)
  
  set reply->procedures[lTempSizeVar].qc_group_assay_id = dSequence
  set reply->procedures[lTempSizeVar].procedure_key = request->procedures[lIndex].procedure_key
  set reply->procedures[lTempSizeVar].qc_group_assay_updt_cnt = 0

  return(true)

end


subroutine CheckForDupControlGroup(Null)

  ; determine if description is a duplicate
  
  select into "nl:"
  
  from code_value cv
  
  where cv.code_set = 1909
    and cnvtupper(cv.display) = cnvtupper(request->control_group_name)
    and cv.code_value != request->control_group_cd
  
  detail
    nDuplicate = true
    
  with nocounter

  return(nDuplicate)

end

subroutine CheckForDupControlServRes(Null)

  set nDuplicate = false 
        
  select into "nl:"
  
  from qc_group_ctrl_resource qc
  
  where qc.control_id = request->controls[lCount].control_id
    and qc.service_resource_cd = request->controls[lCount]->resources[lCount2].service_resource_cd
    and qc.active_ind = 1
    
  detail
    if (qc.qc_group_ctrl_resource_id != request->controls[lCount]->resources[lCount2].qc_group_ctrl_resource_id)
      nDuplicate = true  
      dDuplicateControlGrpCd = qc.control_group_cd
    endif
    
  with nocounter
  
  ; duplicate found, return relevant info in the reply
  
  if (nDuplicate = true)

    select into "nl:"
    
    from code_value cv
    
    where cv.code_value = dDuplicateControlGrpCd
    
    detail
      reply->status_data.status = "D"
      reply->status_data->subeventstatus[1]->OperationStatus = "D"
      reply->status_data->subeventstatus[1]->TargetObjectValue = 
        concat(request->controls[lCount].control_name,"|",request->controls[lCount]->resources[lCount2].service_resource_disp) 
      reply->status_data->subeventstatus[1]->TargetObjectValue = 
        concat(reply->status_data->subeventstatus[1]->TargetObjectValue, "|", cv.definition)
    
    with nocounter
    
    return(true)
      
  endif

  return(false)

end


#EXIT_SCRIPT

if (nFailedInd = false)
  set reply->status_data.status = "S"
  set reqinfo->commit_ind = 1 
else
   set reqinfo->commit_ind = 0
endif

free set list
free set list_reply

end

go

;Generated by GNU enscript 1.6.4.
