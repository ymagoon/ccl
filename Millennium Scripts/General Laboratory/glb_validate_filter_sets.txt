 ;;Solution_Test/script/PathNet -- Gen Lab/glb_validate_filter_sets/glb_validate_filter_sets.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2003 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

  Source file name:   GLB_VALIDATE_FILTER_SETS.PRG
  Object name:        GLB_VALIDATE_FILTER_SETS
  Request #:          250224

  Product:            GLB DB QC Templates
  Product Team:       Pathnet General Lab
  HNA Version:        500
  CCL Version:        8.2

  Program purpose:    Accepts controls, test sites, assays defined on template
  					  and returns the type of data requested.

  Tables read:        RESOURCE_ASSAY_CONTROL
  Tables updated:     none
  Executing from:

  Special Notes:

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer		        Comment 	                        *
;    *--- -------- --------------------	----------------------------------- *
;    *001 09/24/03 cs6265               Initial Release			            *
;    *                                                                      *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program glb_validate_filter_sets:dba go
create program glb_validate_filter_sets:dba

;*************************************************************************
;*         Record Request                                                *
;*************************************************************************
/*
record request
(
	1 FilterSets[*]
	   2 filter_set_nbr                        =i4
	   2 controls[*]
	       3 control_id                        =f8
	   2 service_resources[*]
	       3 service_resource_cd               =f8
	   2 assays[*]
	       3 task_assay_cd                     =f8
)
*/

;***********************************************************************
;*   Reply Record                                                      *
;***********************************************************************
record reply
(
  	1 FilterSets[*]
	   2 filter_set_nbr                        =i4
       2 valid_ind                             =i2
       2 controls[*]
	       3 control_id                        =f8
           3 valid_ind                         =i2
	   2 service_resources[*]
	       3 service_resource_cd               =f8
           3 valid_ind                         =i2
	   2 assays[*]
	       3 task_assay_cd                     =f8
           3 valid_ind                         =i2

%I CCLSOURCE:STATUS_BLOCK.INC
)
;***********************************************************************
;*   Variable Declarations                                             *
;***********************************************************************
declare valid_ind = i2             with protect, noconstant(0)
declare nFilterCnt = i4            with protect, noconstant(0)
declare nControlCnt = i4           with protect, noconstant(0)
declare nServiceCnt = i4           with protect, noconstant(0)
declare nAssayCnt = i4             with protect, noconstant(0)
declare nStatus = i4               with protect, noconstant(0)
;declare controls= vc			          with protect, noconstant("")
;declare resources= vc			        with protect, noconstant("")
;declare assays= vc				          with protect, noconstant("")
declare control_parser = vc        with protect, noconstant("")
declare resource_parser = vc       with protect, noconstant("")
declare assay_parser = vc          with protect, noconstant("")
declare nFilterlist = i4           with protect, constant(size(request->FilterSets,5))
declare nControllist = i4          with protect, noconstant(size(request->FilterSets[nFilterlist].controls,5))
declare nServicelist = i4          with protect, noconstant(size(request->FilterSets[nFilterlist].service_resources,5))
declare nAssaylist = i4            with protect, noconstant(size(request->FilterSets[nFilterlist].assays,5))
declare control_count = i2         with protect, noconstant(0)
declare resource_count = i2        with protect, noconstant(0)
declare assay_count = i2           with protect, noconstant(0)

;***********************************************************************
;*   Initializations                                                   *
;***********************************************************************
set reply->status_data->status = "F"
set valid_ind = 0
;***********************************************************************
;*   Setup controls parser                                             *
;***********************************************************************
set nstatus = alterlist(reply->FilterSets, nFilterlist)

for (nFilterCnt = 1 to nFilterlist)
  set reply->FilterSets[nFilterCnt].filter_set_nbr = request->FilterSets[nFilterCnt]->filter_set_nbr
  set nControllist = (size(request->FilterSets[nFilterCnt].controls,5))
  set nstatus = alterlist(reply->FilterSets[nFilterCnt].controls, nControllist)
    if (nControllist > 0)
      set control_parser = "rac.control_id in("
      for (control_count = 1 to nControllist)
        if (control_count > 1)
          set control_parser = build(control_parser, ",",
              request->FilterSets[nFilterCnt].controls[control_count]->control_id)
        else
          set control_parser = build(control_parser,
              request->FilterSets[nFilterCnt].controls[control_count]->control_id)
        endif
          set reply->FilterSets[nFilterCnt].controls[control_count].control_id =
              request->FilterSets[nFilterCnt].controls[control_count].control_id
      endfor
        set control_parser = build(control_parser,")")
    else
      set control_parser = "1 = 1"
    endif

;***********************************************************************
;*   Setup service_resources parser                                    *
;***********************************************************************
set nServicelist = (size(request->FilterSets[nFilterCnt].service_resources,5))
set nstatus = alterlist(reply->FilterSets[nFilterCnt].service_resources, nServicelist)
  if (nServicelist > 0)
    set resource_parser = "rac.service_resource_cd in("
    for (resource_count = 1 to nServicelist)
      if (resource_count > 1)
        set resource_parser = build(resource_parser, ",",
            request->FilterSets[nFilterCnt].service_resources[resource_count]->service_resource_cd)
      else
        set resource_parser = build(resource_parser,
            request->FilterSets[nFilterCnt].service_resources[resource_count]->service_resource_cd)
      endif
        set reply->FilterSets[nFilterCnt].service_resources[resource_count].service_resource_cd =
            request->FilterSets[nFilterCnt].service_resources[resource_count]->service_resource_cd
    endfor
      set resource_parser = build(resource_parser,")")
  else
    set resource_parser = "1 = 1"
  endif
;***********************************************************************
;*   Setup assays parser                                               *
;***********************************************************************
set nAssaylist = (size(request->FilterSets[nFilterCnt].assays,5))
set nstatus = alterlist(reply->FilterSets[nFilterCnt].assays, nAssaylist)
  if (nAssaylist > 0)
    set assay_parser = "rac.task_assay_cd in("
    for (assay_count = 1 to nAssaylist)
      if (assay_count > 1)
        set assay_parser = build(assay_parser, ",",
            request->FilterSets[nFilterCnt].assays[assay_count]->task_assay_cd)
      else
        set assay_parser = build(assay_parser,
            request->FilterSets[nFilterCnt].assays[assay_count]->task_assay_cd)
      endif
        set reply->FilterSets[nFilterCnt].assays[assay_count].task_assay_cd =
            request->FilterSets[nFilterCnt].assays[assay_count]->task_assay_cd
    endfor
      set assay_parser = build(assay_parser,")")
  else
    set assay_parser = "1 = 1"
  endif
;***********************************************************************
;*   Select                                                            *
;***********************************************************************
  select into "nl:"
  from resource_assay_control rac

  plan rac where parser(control_parser)
           and parser(resource_parser)
           and parser(assay_parser)

  order by
	rac.control_id,
	rac.service_resource_cd,
	rac.task_assay_cd

  head rac.control_id
    for (nControlCnt = 1 to nControllist)
      if (rac.control_id = reply->FilterSets[nFilterCnt].controls[nControlCnt].control_id)
         reply->FilterSets[nFilterCnt].controls[nControlCnt].valid_ind = 1
      endif
    endfor

  head rac.service_resource_cd
    for (nServiceCnt = 1 to nServicelist)
      if (rac.service_resource_cd = reply->FilterSets[nFilterCnt].service_resources[nServiceCnt].service_resource_cd)
         reply->FilterSets[nFilterCnt].service_resources[nServiceCnt].valid_ind = 1
      endif
    endfor

  head rac.task_assay_cd
    for (nAssayCnt = 1 to nAssaylist)
      if (rac.task_assay_cd = reply->FilterSets[nFilterCnt].assays[nAssayCnt].task_assay_cd)
        reply->FilterSets[nFilterCnt].assays[nAssayCnt].valid_ind = 1
      endif
    endfor
  with nocounter
endfor
;***********************************************************************
;*   End of main script                                                *
;***********************************************************************
if ((request->filtersets[nFilterCnt]= 0) or ((reply->FilterSets[nFilterCnt].controls[nControlCnt].control_id =0) and
   (reply->FilterSets[nFilterCnt].services[nServiceCnt].service_resources =0) and 
   (reply->FilterSets[nFilterCnt].assays[nAssayCnt].task_assay_cd =0)))
  set reply->status_data->status = "Z"
else
  set reply->status_data->status = "S"
endif
;***********************************************************************
;*   End of Program                                                    *
;***********************************************************************
end go

;Generated by GNU enscript 1.6.4.
