 ;;Solution_Test/script/Bedrock/bed_aud_gl_collections/src/main/ccl/bed_aud_gl_collections.prg Turn on black mode

/************************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-1995 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 ************************************************************************
 
          Date Written:
          Source file name:   bed_aud_gl_collections.prg
          Object name:        bed_aud_gl_collections
          Request #:
 
          Product:            V500
          HNA Version:        V500
          CCL Version:
 
          Program purpose:
 
          Tables read:
          Tables updated:
 
          Executing from:
 
          Special Notes:
 
 **********************************************************************/
 
drop program bed_aud_gl_collections:dba go
create program bed_aud_gl_collections:dba
 
if (not (validate (request,0)))
 record request
  (
    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
    1 paramlist[*]
      2 param_type_mean = vc
      2 pdate1 = dq8
      2 pdate2 = dq8
      2 vlist[*]
        3 dbl_value = f8
        3 string_value = vc
  ) with protect
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*]
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1  high_volume_flag = i2
    1  output_filename = vc
    1  run_status_flag = i2
    1  statlist[*]
       2 statistic_meaning = vc
       2 status_flag = i2
       2 qualifying_items = i4
       2 total_items = i4
%i cclsource:status_block.inc
  ) with protect
endif
 
record temp
( 1 cnt = i4
  1 qual[*]
    2 primary_mnem = vc
    2 catalog_cd = f8
    2 resource_route_lvl = i2
    2 accn_class = vc
    2 spec_type = vc
    2 def_coll_method = vc
    2 srvres = vc
    2 srvres_cd = f8
    2 age_from_min = i4
    2 age_from = vc
    2 age_to_min = i4
    2 age_to = vc
    2 min_vol = vc
    2 min_vol_units = vc
    2 spec_cont = vc
    2 coll_class = vc
    2 spec_handling = vc
	2 extra_label = vc			
    2 activity_type = vc
    2 activity_subtype = vc
    2 instr_bench_status = vc
	2 specimen_type_cd = f8		
	2 aliquot_seq = f8			
	2 aliquots[*]				
	  3 min_vol			= vc	
	  3 spec_cntnr_disp	= vc	
	  3 coll_class_disp	= vc	
	  3 spec_hndl_disp	= vc	
	  3 netting			= vc	
) with protect

%i cclsource:bed_error_check_begin.inc
 
declare LAB = f8 with protect, constant(uar_get_code_by("MEANING", 6000, "GENERAL LAB"))
declare GL = f8 with protect, constant(uar_get_code_by("MEANING", 106, "GLB"))
declare row_nbr = i4 with protect, noconstant(0)
declare cnt = i4 with protect, noconstant(0)
declare acnt = i4 with protect, noconstant(0)

set stat = alterlist(reply->collist,21)     
set reply->collist[1].header_text = "Activity Type"
set reply->collist[1].data_type = 1 ;string
set reply->collist[1].hide_ind = 1
set reply->collist[2].header_text = "Millennium Name (Primary Synonym)"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 0
set reply->collist[3].header_text = "Accession Class"
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
set reply->collist[4].header_text = "Specimen Type"
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
set reply->collist[5].header_text = "Collection Method"
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
set reply->collist[6].header_text = "Instrument/Bench"  
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
set reply->collist[7].header_text = "Age From"
set reply->collist[7].data_type = 1 ;string
set reply->collist[7].hide_ind = 0
set reply->collist[8].header_text = "Age To"
set reply->collist[8].data_type = 1 ;string
set reply->collist[8].hide_ind = 0
set reply->collist[9].header_text = "Minimum Volume"
set reply->collist[9].data_type = 1 ;string
set reply->collist[9].hide_ind = 0
set reply->collist[10].header_text = "Container"
set reply->collist[10].data_type = 1 ;string
set reply->collist[10].hide_ind = 0
set reply->collist[11].header_text = "Collection Class"
set reply->collist[11].data_type = 1 ;string
set reply->collist[11].hide_ind = 0
set reply->collist[12].header_text = "Special Handling"
set reply->collist[12].data_type = 1 ;string
set reply->collist[12].hide_ind = 0
set reply->collist[13].header_text = "Extra Label"
set reply->collist[13].data_type = 1 ;string
set reply->collist[13].hide_ind = 0
set reply->collist[14].header_text = "Subactivity Type"
set reply->collist[14].data_type = 1 ;string
set reply->collist[14].hide_ind = 0
set reply->collist[15].header_text = "Instrument/Bench Status"
set reply->collist[15].data_type = 1 ;string
set reply->collist[15].hide_ind = 0
set reply->collist[16].header_text = "Aliquot Min Vol"
set reply->collist[16].data_type = 1 ;string
set reply->collist[16].hide_ind = 0
set reply->collist[17].header_text = "Aliquot Container"
set reply->collist[17].data_type = 1 ;string
set reply->collist[17].hide_ind = 0
set reply->collist[18].header_text = "Aliquot Coll Class"
set reply->collist[18].data_type = 1 ;string
set reply->collist[18].hide_ind = 0
set reply->collist[19].header_text = "Aliquot Spec Handling"
set reply->collist[19].data_type = 1 ;string
set reply->collist[19].hide_ind = 0
set reply->collist[20].header_text = "Aliquot Netting"
set reply->collist[20].data_type = 1 ;string
set reply->collist[20].hide_ind = 0
set reply->collist[21].header_text = "catalog_cd"
set reply->collist[21].data_type = 2 ;double
set reply->collist[21].hide_ind = 1
 
select into "nl:"
from order_catalog oc,
  code_value cv8,
  code_value cv9,
  (dummyt d with seq = 1),
  procedure_specimen_type pst,
  code_value cv1,
  code_value cv2,
  code_value cv3,
  collection_info_qualifiers ciq,
  code_value cv4,
  code_value cv5,
  code_value cv6,
  code_value cv7
plan oc
  where oc.catalog_type_cd = LAB
    and oc.activity_type_cd = GL
    and oc.active_ind = 1
    and oc.orderable_type_flag not in (2,6)
    and oc.bill_only_ind in (0,null)
join cv8
  where cv8.code_value = oc.activity_type_cd
join cv9
  where cv9.code_value = oc.activity_subtype_cd
join d
join pst
  where pst.catalog_cd = oc.catalog_cd
join cv1
  where cv1.code_value = pst.accession_class_cd
join cv2
  where cv2.code_value = pst.specimen_type_cd
join cv3
  where cv3.code_value = pst.default_collection_method_cd
join ciq
  where ciq.catalog_cd = pst.catalog_cd
    and ciq.specimen_type_cd = pst.specimen_type_cd
join cv4
  where cv4.code_value = ciq.service_resource_cd
join cv5
  where cv5.code_value = ciq.spec_cntnr_cd
join cv6
  where cv6.code_value = ciq.coll_class_cd
join cv7
  where cv7.code_value = ciq.spec_hndl_cd
order cnvtupper(oc.primary_mnemonic),cv2.display,ciq.sequence
detail
  cnt = cnt + 1
  temp->cnt = cnt
  stat = alterlist(temp->qual,cnt)
  temp->qual[cnt].primary_mnem = oc.primary_mnemonic
  temp->qual[cnt].catalog_cd = oc.catalog_cd
  temp->qual[cnt].resource_route_lvl = oc.resource_route_lvl
  temp->qual[cnt].activity_type = cv8.display
  temp->qual[cnt].activity_subtype = cv9.display
  if (pst.catalog_cd > 0)
    temp->qual[cnt].accn_class = cv1.display
    temp->qual[cnt].spec_type = cv2.display
    temp->qual[cnt].def_coll_method = cv3.display
  endif
  if (ciq.catalog_cd > 0)
    if (ciq.service_resource_cd = 0)
      temp->qual[cnt].srvres = "ALL"
    else
      temp->qual[cnt].srvres = cv4.display
      temp->qual[cnt].srvres_cd = ciq.service_resource_cd
      if (cv4.active_ind = 0)
        temp->qual[cnt].instr_bench_status = "Inactive"
      else
        temp->qual[cnt].instr_bench_status = "Active"
      endif
    endif
    temp->qual[cnt].age_to_min = ciq.age_to_minutes
    temp->qual[cnt].age_from_min = ciq.age_from_minutes
    if (ciq.age_from_minutes < 60)
      temp->qual[cnt].age_from = build(ciq.age_from_minutes," Minutes")
    elseif (ciq.age_from_minutes >= 60 and ciq.age_from_minutes < 1440)
      temp->qual[cnt].age_from = build(ciq.age_from_minutes / 60," Hours")
    elseif (ciq.age_from_minutes >= 1440 and ciq.age_from_minutes < 10080)
      temp->qual[cnt].age_from = build(ciq.age_from_minutes / 1440," Days")
    elseif (ciq.age_from_minutes >= 10080 and ciq.age_from_minutes < 43200)
      temp->qual[cnt].age_from = build(ciq.age_from_minutes / 10080," Weeks")
    elseif (ciq.age_from_minutes >= 43200 and ciq.age_from_minutes < 525600)
      temp->qual[cnt].age_from = build(ciq.age_from_minutes / 43200," Months")
    elseif (ciq.age_from_minutes >= 525600)
      temp->qual[cnt].age_from = build(ciq.age_from_minutes / 525600," Years")
    else
      temp->qual[cnt].age_from = " "
    endif
    if (ciq.age_to_minutes < 60)
      temp->qual[cnt].age_to = build(ciq.age_to_minutes," Minutes")
    elseif (ciq.age_to_minutes >= 60 and ciq.age_to_minutes < 1440)
      temp->qual[cnt].age_to = build(ciq.age_to_minutes / 60," Hours")
    elseif (ciq.age_to_minutes >= 1440 and ciq.age_to_minutes < 10080)
      temp->qual[cnt].age_to = build(ciq.age_to_minutes / 1440," Days")
    elseif (ciq.age_to_minutes >= 10080 and ciq.age_to_minutes < 43200)
      temp->qual[cnt].age_to = build(ciq.age_to_minutes / 10080," Weeks")
    elseif (ciq.age_to_minutes >= 43200 and ciq.age_to_minutes < 525600)
      temp->qual[cnt].age_to = build(ciq.age_to_minutes / 43200," Months")
    elseif (ciq.age_to_minutes >= 525600)
      temp->qual[cnt].age_to = build(ciq.age_to_minutes / 525600," Years")
    else
      temp->qual[cnt].age_to = " "
    endif
    temp->qual[cnt].min_vol = format(ciq.min_vol,"#####.##")
    temp->qual[cnt].min_vol_units = ciq.min_vol_units
    temp->qual[cnt].min_vol = concat(temp->qual[cnt].min_vol," ",temp->qual[cnt].min_vol_units)
    temp->qual[cnt].spec_cont = cv5.display
    temp->qual[cnt].coll_class = cv6.display
    temp->qual[cnt].spec_handling = cv7.display
	if (ciq.additional_labels > 0)										
	    temp->qual[cnt].extra_label = cnvtstring(ciq.additional_labels)	
	else																
	    temp->qual[cnt].extra_label = " "								
	endif																
	if (ciq.aliquot_ind = 1)											
	    temp->qual[cnt].specimen_type_cd = ciq.specimen_type_cd			
	    temp->qual[cnt].aliquot_seq 	 = ciq.aliquot_seq				
	else																
	    temp->qual[cnt].specimen_type_cd = 0							
	    temp->qual[cnt].aliquot_seq 	 = 0.0							
	endif																
  endif
with nocounter, outerjoin = d
 
if (cnt > 0)
	select into "NL:"
  	from (dummyt d with seq = cnt),
		 aliquot_info_qualifiers aiq,
		 code_value cv1,
		 code_value cv2,
		 code_value cv3
	plan d
	join aiq
		where aiq.catalog_cd		= temp->qual[d.seq].catalog_cd
		  and aiq.specimen_type_cd	= temp->qual[d.seq].specimen_type_cd
		  and aiq.coll_info_seq		= temp->qual[d.seq].aliquot_seq
	join cv1
		where cv1.code_value		= outerjoin(aiq.spec_cntnr_cd)
		  and cv1.active_ind		= outerjoin(1)
	join cv2
		where cv2.code_value		= outerjoin(aiq.coll_class_cd)
		  and cv2.active_ind		= outerjoin(1)
	join cv3
		where cv3.code_value		= outerjoin(aiq.spec_hndl_cd)
		  and cv3.active_ind		= outerjoin(1)
	head d.seq
		acnt = 0
	detail
		acnt = acnt + 1
		stat = alterlist(temp->qual[d.seq]->aliquots, acnt)
		if (aiq.min_vol > 0)
			temp->qual[d.seq]->aliquots[acnt].min_vol			= format(aiq.min_vol,"#####.##")
		else
			temp->qual[d.seq]->aliquots[acnt].min_vol			= " "
		endif
		if (aiq.spec_cntnr_cd > 0)
			temp->qual[d.seq]->aliquots[acnt].spec_cntnr_disp	= cv1.display
		else
			temp->qual[d.seq]->aliquots[acnt].spec_cntnr_disp	= " "
		endif
		if (aiq.coll_class_cd > 0)
			temp->qual[d.seq]->aliquots[acnt].coll_class_disp	= cv2.display
		else
			temp->qual[d.seq]->aliquots[acnt].coll_class_disp	= " "
		endif
		if (aiq.spec_hndl_cd > 0)
			temp->qual[d.seq]->aliquots[acnt].spec_hndl_disp	= cv3.display
		else
			temp->qual[d.seq]->aliquots[acnt].spec_hndl_disp	= " "
		endif
		if (aiq.net_ind = 1)
			temp->qual[d.seq]->aliquots[acnt].netting			= "Yes"
		else
			temp->qual[d.seq]->aliquots[acnt].netting			= "No"
		endif
	with nocounter

  select into "nl:"
  from (dummyt d with seq = cnt),
     orc_resource_list orl
  plan d
    where temp->qual[d.seq].srvres_cd > 0
      and temp->qual[d.seq].resource_route_lvl < 2
  join orl
    where orl.catalog_cd = temp->qual[d.seq].catalog_cd
      and orl.service_resource_cd = temp->qual[d.seq].srvres_cd
  detail
    if (orl.catalog_cd = temp->qual[d.seq].catalog_cd
    and orl.service_resource_cd = temp->qual[d.seq].srvres_cd)
      if (orl.active_ind = 0)
        temp->qual[d.seq].instr_bench_status = "Inactive Relation"
      endif
    else
      temp->qual[d.seq].instr_bench_status = "Invalid"
    endif
  with outerjoin = d
   
  select into "nl:"
  from (dummyt d with seq = cnt),
     profile_task_r ptr,
     assay_resource_list arl
  plan d
    where temp->qual[d.seq].srvres_cd > 0
      and temp->qual[d.seq].resource_route_lvl = 2
  join ptr
    where ptr.catalog_cd = temp->qual[d.seq].catalog_cd
      and ptr.active_ind = 1
  join arl
    where arl.task_assay_cd = ptr.task_assay_cd
      and arl.service_resource_cd = temp->qual[d.seq].srvres_cd
  detail
    if (arl.task_assay_cd > 0
    and arl.service_resource_cd = temp->qual[d.seq].srvres_cd)
      if (arl.active_ind = 0)
        temp->qual[d.seq].instr_bench_status = "Inactive Relation"
      endif
    else
      temp->qual[d.seq].instr_bench_status = "Invalid"
    endif
  with outerjoin = d
   
  for (x = 1 to cnt)
    set row_nbr = row_nbr + 1
    set stat = alterlist(reply->rowlist,row_nbr)
    set stat = alterlist(reply->rowlist[row_nbr].celllist,21)     
    set reply->rowlist[row_nbr].celllist[1].string_value  = temp->qual[x].activity_type
    set reply->rowlist[row_nbr].celllist[2].string_value  = temp->qual[x].primary_mnem
    set reply->rowlist[row_nbr].celllist[3].string_value  = temp->qual[x].accn_class
    set reply->rowlist[row_nbr].celllist[4].string_value  = temp->qual[x].spec_type
    set reply->rowlist[row_nbr].celllist[5].string_value  = temp->qual[x].def_coll_method
    set reply->rowlist[row_nbr].celllist[6].string_value  = temp->qual[x].srvres
    set reply->rowlist[row_nbr].celllist[7].string_value  = temp->qual[x].age_from
    set reply->rowlist[row_nbr].celllist[8].string_value  = temp->qual[x].age_to
    set reply->rowlist[row_nbr].celllist[9].string_value  = temp->qual[x].min_vol
    set reply->rowlist[row_nbr].celllist[10].string_value = temp->qual[x].spec_cont
    set reply->rowlist[row_nbr].celllist[11].string_value = temp->qual[x].coll_class
    set reply->rowlist[row_nbr].celllist[12].string_value = temp->qual[x].spec_handling
    set reply->rowlist[row_nbr].celllist[13].string_value = temp->qual[x].extra_label
    set reply->rowlist[row_nbr].celllist[14].string_value = temp->qual[x].activity_subtype
    set reply->rowlist[row_nbr].celllist[15].string_value = temp->qual[x].instr_bench_status
    set reply->rowlist[row_nbr].celllist[21].double_value = temp->qual[x].catalog_cd
    set acnt = size(temp->qual[x]->aliquots, 5)
    for (a = 1 to acnt)
    set reply->rowlist[row_nbr].celllist[16].string_value = temp->qual[x]->aliquots[a].min_vol
    set reply->rowlist[row_nbr].celllist[17].string_value = temp->qual[x]->aliquots[a].spec_cntnr_disp
    set reply->rowlist[row_nbr].celllist[18].string_value = temp->qual[x]->aliquots[a].coll_class_disp
    set reply->rowlist[row_nbr].celllist[19].string_value = temp->qual[x]->aliquots[a].spec_hndl_disp
    set reply->rowlist[row_nbr].celllist[20].string_value = temp->qual[x]->aliquots[a].netting
    if (a < acnt)
      set row_nbr = row_nbr + 1
      set stat = alterlist(reply->rowlist, row_nbr)
      set stat = alterlist(reply->rowlist[row_nbr].celllist, 21)
      set reply->rowlist[row_nbr].celllist[1].string_value  = temp->qual[x].activity_type
      set reply->rowlist[row_nbr].celllist[2].string_value  = temp->qual[x].primary_mnem
      set reply->rowlist[row_nbr].celllist[3].string_value  = temp->qual[x].accn_class
      set reply->rowlist[row_nbr].celllist[4].string_value  = temp->qual[x].spec_type
      set reply->rowlist[row_nbr].celllist[5].string_value  = temp->qual[x].def_coll_method
      set reply->rowlist[row_nbr].celllist[6].string_value  = temp->qual[x].srvres
      set reply->rowlist[row_nbr].celllist[7].string_value  = temp->qual[x].age_from
      set reply->rowlist[row_nbr].celllist[8].string_value  = temp->qual[x].age_to
      set reply->rowlist[row_nbr].celllist[9].string_value  = temp->qual[x].min_vol
      set reply->rowlist[row_nbr].celllist[10].string_value = temp->qual[x].spec_cont
      set reply->rowlist[row_nbr].celllist[11].string_value = temp->qual[x].coll_class
      set reply->rowlist[row_nbr].celllist[12].string_value = temp->qual[x].spec_handling
      set reply->rowlist[row_nbr].celllist[13].string_value = temp->qual[x].extra_label
      set reply->rowlist[row_nbr].celllist[14].string_value = temp->qual[x].activity_subtype
      set reply->rowlist[row_nbr].celllist[15].string_value = temp->qual[x].instr_bench_status
      set reply->rowlist[row_nbr].celllist[21].double_value = temp->qual[x].catalog_cd
    endif
    endfor
  endfor
  
  if (request->skip_volume_check_ind = 0)
    if (row_nbr > 5000)          
      set reply->high_volume_flag = 2
    elseif (row_nbr > 3000)       
      set reply->high_volume_flag = 1
    endif
    
    if (reply->high_volume_flag in (1,2))
      set reply->output_filename = build("gl_collections_audit.csv")
      set stat = alterlist(reply->rowlist, 0)
    endif
  endif
endif
 
if (request->output_filename > " ")
  execute bed_rpt_file
endif

%i cclsource:bed_error_check_end.inc
 
end go

;Generated by GNU enscript 1.6.4.
