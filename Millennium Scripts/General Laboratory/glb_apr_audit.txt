 ;;Solution_Test/script/PathNet -- Gen Lab/glb_apr_audit/glb_apr_audit.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 06/23/98 Hal Patchen          Initial Release                     *
;    *001 12/15/98 Hal Patchen          Add support for HLA activity        *
;    *002 05/03/99 Chad Moats           Removed multiple joins to code_value*
;    *003 06/22/99 Derek Hime		    Internationalization of script      *
;         12/11/99 Kasie Sly            Merger of 003 Internationalization  *
;~DE~************************************************************************
						;002
             drop program GLB_APR_AUDIT:dba go
             create program GLB_APR_AUDIT:dba

             paint
/***************************     i18n     ********************begin 003 mod block******/
; INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
; INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
set i18nHandle = 0
; CALL UAR_I18NLOCALIZATIONINIT
set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)
/***************************     i18n     *************************************003****/
	  record captions
	  (
	  1 help = vc
	  1 acttype = vc
	  1 actsubtype = vc
	  1 tam = vc
	  1 ffrom = vc
	  1 date = vc
	  1 audtitle = vc
	  1 pgno = vc
	  1 time = vc
	  1 tacd = vc
	  1 servres = vc
	  1 servrescd = vc
	  1 servrestype = vc
	  1 aprstat = vc
	  1 defrestype = vc
	  1 active = vc
	  1 inactive = vc
	  1 missing = vc
	  1 notfound = vc
	  1 endrpt = vc
	  1 title = vc
	  1 GLTo = vc
	  1 ActLoad = vc

	  )
	  set captions->help = uar_i18ngetmessage(i18nHandle,"help","Press <Shift F5> for help")
	  set captions->acttype = uar_i18ngetmessage(i18nHandle,"acttype","Activity Type:")		
	  set captions->actsubtype = uar_i18ngetmessage(i18nHandle,"actsubtype","Activity Subtype:")
	  set captions->tam = uar_i18ngetmessage(i18nHandle,"tamf","Task Assay Mnemonic")/*MAX= 25*/
	  set captions->ffrom = uar_i18ngetmessage(i18nHandle,"ffrom","From:")
	  set captions->date = uar_i18ngetmessage(i18nHandle,"date","Date:")
	  set captions->audtitle = uar_i18ngetmessage(i18nHandle,"audtitle","G E N E R A L   L A B   A P R   A U D I T ")
	  set captions->pgno = uar_i18ngetmessage(i18nHandle,"pageno","PAGE NO:")
	  set captions->time = uar_i18ngetmessage(i18nHandle,"time","Time:")
	  set captions->tacd = uar_i18ngetmessage(i18nHandle,"tacd","TASK ASSAY CD")/*MAX=13*/
	  set captions->servres = uar_i18ngetmessage(i18nHandle,"servres","SERVICE RESOURCE")/*MAX=25*/
	  set captions->servrescd = uar_i18ngetmessage(i18nHandle,"servrescd","SERV RES CD")/*MAX=13*/
	  set captions->servrestype = uar_i18ngetmessage(i18nHandle,"servrestype","SERV RES TYPE")/*MAX=13*/
	  set captions->aprstat = uar_i18ngetmessage(i18nHandle,"aprstat","APR STATUS")/*MAX=10*/
	  set captions->defrestype = uar_i18ngetmessage(i18nHandle,"defrestype","DEF RESULT TYPE")/*MAX=15*/
	  set captions->active = uar_i18ngetmessage(i18nHandle,"active","Active")
	  set captions->inactive = uar_i18ngetmessage(i18nHandle,"inactive","Inactive")
	  set captions->missing = uar_i18ngetmessage(i18nHandle,"missing","Missing")
	  set captions->notfound = uar_i18ngetmessage(i18nHandle,"notfound","Not Found")
	  set captions->endrpt = uar_i18ngetmessage(i18nHandle,"endrpt", "* * *  E N D   O F   R E P O R T  * * *")

	  set captions->title = uar_i18ngetmessage(i18nHandle,"title","GENERAL LAB APR AUDIT")
	  set captions->GLTo = uar_i18ngetmessage(i18nHandle,"to","To:")
	  set captions->ActLoad = uar_i18ngetmessage(i18nHandle,"loading","Loading activity subtypes...")

/***************************************************************************************end 003 mod block***/
      /***********************************************************************
      * Activity Type Record                                                 *
      ***********************************************************************/
      record act_type
      ( 
         1  qual[*]
            2  glb_activity_type_cd      = f8
      )

      /***********************************************************************
      * Activity Subtype Record                                              *
      ***********************************************************************/
      record act_subtype
      ( 
         1  qual[*]
            2  glb_activity_subtype_disp = c30
            2  glb_activity_subtype_cd   = f8
      )

      /***********************************************************************
      * Task Assay Record                                                    *
      ***********************************************************************/
      record taskassay
      ( 
         1  qual[*]
            2  mne_key_cap               = vc
            2  task_assay_cd             = f8
            2  mnemonic                  = vc
      )
            
      /***********************************************************************
      * Internal Record                                                      *
      ***********************************************************************/
      record internal
      ( 
         1  qual[*]
            2  task_assay_cd             = f8
            2  mnemonic                  = vc
            2  serv_res_cnt              = i4
            2  serv_res[*]
               3  service_resource_cd       = f8
               3  service_resource_disp     = vc
               3  service_resource_type_cd  = f8
      )

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set ACTIVITY_TYPE_CODESET       = 106
         set GEN_LAB_CDF                 = "GLB" 
         set BB_CDF                      = "BB"
         set HLA_CDF                     = "HLA"                       ;001
         set SERVICE_RESOURCE_TYPE_CODESET = 223
         set SERV_RES_SUBSECTION_CDF     = "SUBSECTION"
         declare serv_res_subsection_cd  = f8
         set ACTIVITY_SUBTYPE_CODESET    = 5801
         declare stat                    = i4
         declare at_cnt                  = i4
         declare ash_cnt                 = i4
         declare dta_cnt                 = i4
         declare q_cnt                   = i4
         declare sr_cnt                  = i4
         declare cnt                     = i4
         declare max_q_cnt               = i4
         declare max_sr_cnt              = i4

      /***********************************************************************
      * Display screen                                                       *
      ***********************************************************************/
         set actvty_type_default = fillstring(30, " ")
         set actvty_type = fillstring(30," ")
         set actvty_type_disp = fillstring(30," ")
         set actvty_type_cdf = fillstring(12, " ")
         set actvty_subtype_cd = 0.0
         set actvty_subtype_disp = fillstring(30, " ")
         set mne_beg = fillstring(20," ")
         set mne_end = fillstring(20," ")
         call clear(1,1)
         call video(n)
         call box(1,1,3,80)
;003     call text(2,3, "GENERAL LAB APR AUDIT")
         call text(2,3, captions->title)			;003
;003     call text(5,3, "Activity Type:")
         call text(5,3, captions->acttype)										;003
;003     call text(7,3, "Activity Subtype:")
         call text(7,3, captions->actsubtype)										;003
;003     call text(9,3, "Task Assay Mnemonic From:")
         call text(9,3, concat(captions->tam," ",captions->ffrom))						;003
;003     call text(10,25, "To:")
         call text(10,25, captions->GLto)						;003

      /***********************************************************************
      * Select code values.                                                  *
      ***********************************************************************/
         select into "nl:"
            cv.code_value

         from
            code_value cv

         where cv.code_set = SERVICE_RESOURCE_TYPE_CODESET
           and cv.cdf_meaning = SERV_RES_SUBSECTION_CDF
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         detail
            if (cv.code_set = SERVICE_RESOURCE_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of SERV_RES_SUBSECTION_CDF:
                    serv_res_subsection_cd = cv.code_value
               endcase
            endif

         with
            nocounter


      /***********************************************************************
      * Accept activity type.                                                *
      ***********************************************************************/
         select into "nl:"
            cv.display
         from 
            code_value cv
         where cv.code_set = ACTIVITY_TYPE_CODESET
           and cv.cdf_meaning = GEN_LAB_CDF
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
         detail
            actvty_type_default = cnvtupper(cv.display)
         with 
            nocounter,
            maxread(cv, 1)

;003     call text(24,3, "Press <Shift F5> for help")
	   call text(24,3, captions->help)											;003
         set help = select activity_type = cnvtupper(cv.display)
                    from code_value cv
                    where cv.code_set = ACTIVITY_TYPE_CODESET
;001                      and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF)
                      and cv.cdf_meaning in (GEN_LAB_CDF,              ;001
                                             BB_CDF,                   ;001
                                             HLA_CDF)                  ;001
                    order by cv.display_key
                    with nocounter
         call accept(5,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU",
                     actvty_type_default)
         set help = off
         call clear(24,3,70)
         set actvty_type_disp = curaccept
         set actvty_type = cnvtalphanum(curaccept)

      /***********************************************************************
      * Select activity types.                                               *
      ***********************************************************************/
;003     call text(24,3, "Loading activity subtypes...")
         call text(24,3, captions->ActLoad)	;003

         select into "nl:"
            cv.code_value,
            cv.cdf_meaning

         from 
            code_value cv

         where cv.code_set = ACTIVITY_TYPE_CODESET
           and cv.display_key = actvty_type
;001           and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF)
           and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF, HLA_CDF)        ;001
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         head report
            at_cnt = 0

         detail
            if (cv.code_set = ACTIVITY_TYPE_CODESET)
               at_cnt = at_cnt + 1
               stat = alterlist(act_type->qual, at_cnt)
               act_type->qual[at_cnt].glb_activity_type_cd = cv.code_value
               actvty_type_cdf = cv.cdf_meaning
            endif

         with nocounter

      /***********************************************************************
      * Select activity subtypes.                                            *
      ***********************************************************************/
         set ash_cnt = 1
         set stat = alterlist(act_subtype->qual, ash_cnt)
         set act_subtype->qual[ash_cnt].glb_activity_subtype_disp = "ALL"
         set act_subtype->qual[ash_cnt].glb_activity_subtype_cd = 0.0

         select into "nl:"
            activity_subtype_disp = cnvtupper(cv.display),
            cv.code_value

         from code_value cv

         where cv.code_set = ACTIVITY_SUBTYPE_CODESET
           and cv.definition = actvty_type_cdf
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         order by cv.display_key

         detail
            ash_cnt = ash_cnt + 1
            stat = alterlist(act_subtype->qual, ash_cnt)
            act_subtype->qual[ash_cnt].glb_activity_subtype_disp =
              activity_subtype_disp
            act_subtype->qual[ash_cnt].glb_activity_subtype_cd =
              cv.code_value

         with nocounter

         call clear(24,3,70)

      /***********************************************************************
      * Accept activity subtype.                                             *
      ***********************************************************************/
;003     call text(24,3, "Press <Shift F5> for help")
         call text(24,3, captions->help)											;003
         set help = select activity_subtype = cnvtupper(act_subtype->qual[d.seq]
                      .glb_activity_subtype_disp)
                    from (dummyt d with seq = value(ash_cnt))
                    where d.seq <= ash_cnt
                    with nocounter
         call accept(7,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU", "ALL")
         set help = off
         call clear(24,3,70)
         set actvty_subtype_disp = curaccept
         set actvty_subtype_cd = -1
         for (cnt = 1 to ash_cnt)
            if (cnvtupper(act_subtype->qual[cnt]
             .glb_activity_subtype_disp) = actvty_subtype_disp)
               set actvty_subtype_cd = 
                 act_subtype->qual[cnt].glb_activity_subtype_cd
            endif
         endfor

      /***********************************************************************
      * Accept task assay mnemonic range.                                    *
      ***********************************************************************/
         call accept(9,30, "PPPPPPPPPPPPPPPPPPPP;;CU", "A")
         set mne_beg = curaccept
         if (mne_beg = "A")
            call accept(10,30, "PPPPPPPPPPPPPPPPPPPP;;CU", 
                        "ZZZZZZZZZZZZZZZZZZZZ")
         else
            call accept(10,30, "PPPPPPPPPPPPPPPPPPPP;;CU")
         endif
         set mne_end = curaccept

      /***********************************************************************
      * Select General Lab order task assay mnemonics.                       *
      * NOTE: Separated select from order catalog so that order by clause    *
      * would run on UNIX box (120 bytes max)                                *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            dta.task_assay_cd,
            dta.mnemonic_key_cap,
            dta.mnemonic,
            dta.activity_type_cd

         from
            (dummyt d with seq = value(at_cnt)),
            discrete_task_assay dta

         plan d
         join dta   where dta.activity_type_cd = 
                              act_type->qual[d.seq].glb_activity_type_cd
                      and dta.mnemonic > ""
                      and dta.mnemonic_key_cap between mne_beg and mne_end
                      and dta.active_ind > 0

         order by
            dta.mnemonic_key_cap,
            dta.task_assay_cd

         head report
            dta_cnt = 0

         head dta.mnemonic_key_cap
            row+0

         head dta.task_assay_cd
            dta_cnt = dta_cnt + 1
            stat = alterlist(taskassay->qual, dta_cnt)
            taskassay->qual[dta_cnt].mne_key_cap = 
              dta.mnemonic_key_cap
            taskassay->qual[dta_cnt].task_assay_cd = 
              dta.task_assay_cd
            taskassay->qual[dta_cnt].mnemonic = 
              dta.mnemonic

         foot dta.task_assay_cd
            row+0

         foot dta.mnemonic_key_cap
            row+0

         with
            counter

      /***********************************************************************
      * Select related routing service resources.                            *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            join_path = decode(orl.seq, "1",
                               arl.seq, "2",
                                        "0"),
            rg1_exists = decode(rg1.seq, "Y", "N"),
            rg2_exists = decode(rg2.seq, "Y", "N"),
            taskassay_cd = taskassay->qual[d.seq].task_assay_cd,
            taskassay_mne = taskassay->qual[d.seq].mne_key_cap,
            ptr.task_assay_cd,
            ptr.catalog_cd,
            oc.catalog_cd,
            oc.activity_type_cd,
            oc.activity_subtype_cd,
            oc.resource_route_lvl,
            d_orl.seq,
            orl.service_resource_cd,
            sr1.service_resource_type_cd,
;002            cv_sr1.display,
            d_rg1.seq,
            rg1.child_service_resource_cd,
            rg1.resource_group_type_cd,
;002            cv_rg1.display,
            d_arl.seq,
            arl.service_resource_cd,
            sr2.service_resource_type_cd,
;002            cv_sr2.display,
            d_rg2.seq,
            rg2.child_service_resource_cd,
            rg2.resource_group_type_cd
;002            cv_rg2.display

         from
            (dummyt d with seq = value(dta_cnt)),
            profile_task_r ptr,
            order_catalog oc,
            (dummyt d_orl with seq = 1),
            orc_resource_list orl,
            service_resource sr1,
;002            code_value cv_sr1,
            (dummyt d_rg1 with seq = 1),
            resource_group rg1,
            service_resource sr_rg1,
;002            code_value cv_rg1,
            (dummyt d_arl with seq = 1),
            assay_resource_list arl,
            service_resource sr2,
;002            code_value cv_sr2,
            (dummyt d_rg2 with seq = 1),
            resource_group rg2,
            service_resource sr_rg2
;002            code_value cv_rg2

         plan d
         join ptr   where ptr.task_assay_cd = 
                             taskassay->qual[d.seq].task_assay_cd
                      and ptr.catalog_cd > 0.0
                      and ptr.active_ind > 0
         join oc    where oc.catalog_cd = ptr.catalog_cd
                      and oc.active_ind > 0
                      and ((actvty_subtype_cd > 0.0
                         and oc.activity_subtype_cd = actvty_subtype_cd)
                        or (actvty_subtype_cd = 0.0))
         join (d_orl  where d_orl.seq = 1
                        and oc.resource_route_lvl = 1
           join orl   where orl.catalog_cd = oc.catalog_cd
                        and orl.active_ind > 0
           join sr1   where sr1.service_resource_cd = orl.service_resource_cd
                        and sr1.active_ind > 0
;002           join cv_sr1 where cv_sr1.code_value = sr1.service_resource_cd
           join d_rg1 where d_rg1.seq = 1
           join rg1   where rg1.parent_service_resource_cd =
                             sr1.service_resource_cd
                        and rg1.child_service_resource_cd > 0.0
                        and rg1.resource_group_type_cd = 
                             serv_res_subsection_cd
                        and rg1.root_service_resource_cd + 0 = 0.0
                        and rg1.active_ind > 0
           join sr_rg1 where sr_rg1.service_resource_cd =
                             rg1.child_service_resource_cd
                         and sr_rg1.active_ind > 0)
;002           join cv_rg1 where cv_rg1.code_value = 
;002                             rg1.child_service_resource_cd)
         orjoin (d_arl where d_arl.seq = 1
                        and oc.resource_route_lvl = 2
           join arl   where arl.task_assay_cd = ptr.task_assay_cd
                        and arl.active_ind > 0
           join sr2   where sr2.service_resource_cd = arl.service_resource_cd
                        and sr2.active_ind > 0
;002           join cv_sr2 where cv_sr2.code_value = sr2.service_resource_cd
           join d_rg2 where d_rg2.seq = 1
           join rg2   where rg2.parent_service_resource_cd =
                              sr2.service_resource_cd
                        and rg2.child_service_resource_cd > 0.0
                        and rg2.resource_group_type_cd = 
                              serv_res_subsection_cd
                        and rg2.root_service_resource_cd + 0 = 0.0
                        and rg2.active_ind > 0
           join sr_rg2 where sr_rg2.service_resource_cd =
                             rg2.child_service_resource_cd
                         and sr_rg2.active_ind > 0)
;002           join cv_rg2 where cv_rg2.code_value = 
;002                             rg2.child_service_resource_cd)

         order by
            d.seq,
            oc.catalog_cd

         head report
            q_cnt = 0
            sr_cnt = 0
            max_q_cnt = 0
            max_sr_cnt = 0
            x = 0
            found_serv_res_ind = 0

         head d.seq
            cnt = d.seq
            q_cnt = q_cnt + 1
            if (q_cnt > max_q_cnt)
               max_q_cnt = q_cnt
            endif
            stat = alterlist(internal->qual, q_cnt)
            internal->qual[q_cnt].task_assay_cd =
              taskassay->qual[