 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_pdm_params/glb_get_pdm_params.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_PDM_PARAMS.PRG
        Object name:            GLB_GET_PDM_PARAMS
        Request #:              257563

        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieves PDM parameters for a given instrument.

        Tables read:            PDM_PARAMS
                                
        Tables updated:         n/a

        Executing from:         PathNet General Lab:  DB Patient Data Monitoring Build

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    * generated from GLB_GET_AV_PARAMS, new for REV 7.2                    *
;     ### 06/26/98 Chad Moats           Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_PDM_PARAMS:dba go    
      create program GLB_GET_PDM_PARAMS:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                               
         1 service_resource_cd            = f8        
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 params[*]
           2 pdm_param_id              = f8
           2 service_resource_cd       = f8
           2 service_resource_disp     = vc
           2 task_assay_cd             = f8
           2 task_assay_disp           = vc
           2 nbr_results               = i4
           2 time_period_minutes       = i4
           2 time_period_units_cd      = f8
           2 min_nbr_results           = i4
           2 result_eval_flag          = i2
           2 max_digits                = i2
           2 min_digits                = i2
           2 min_decimal_places        = i2
           2 rule_id                   = f8
           2 ranges[*]
             3 pdm_range_id              = f8
             3 sequence                  = i4
             3 species_cd                = f8
             3 sex_cd                    = f8
             3 age_from_minutes          = i4
             3 age_from_units_cd         = f8
             3 age_to_minutes            = i4
             3 age_to_units_cd           = f8
             3 result_high               = f8
             3 result_low                = f8
             3 mean                      = f8
             3 std_dev                   = f8
         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
      )

     #Script
      set failed = "F"
      declare p_cnt     = i4
      set p_cnt = 0
      set r_cnt = 0
      set reply->status_data->status = "F"
      set SERV_RES_TYPE_CODESET       = 223                            
      set SERV_RES_SUBSECTION_CDF     = "SUBSECTION"                   
      set RESULT_TYPE_CODESET         = 289
      set RESULT_TYPE_NUMERIC_CDF     = "3"
      declare result_type_numeric_cd  = f8
      declare serv_res_subsection_cd  = f8                            
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty


/***********************************************************************
* Load code values                                                     *
***********************************************************************/

      select into "nl:"                                                
         cv.code_set,                                                 
         cv.code_value                                                 
      from                                                             
         code_value cv                                                 
      where 
        (cv.code_set = SERV_RES_TYPE_CODESET and cv.cdf_meaning = SERV_RES_SUBSECTION_CDF) 
        or (cv.code_set = RESULT_TYPE_CODESET and cv.cdf_meaning = RESULT_TYPE_NUMERIC_CDF) 
        and cv.active_ind = 1                                          
        and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)         
        and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)         
      detail                                                           
            case (cv.cdf_meaning)                                      
              of SERV_RES_SUBSECTION_CDF:                              
                 serv_res_subsection_cd = cv.code_value               
              of RESULT_TYPE_NUMERIC_CDF:
                 result_type_numeric_cd = cv.code_value
            endcase
      with nocounter                                                   

/********************************************************************/ 
/* Get parameters from pdm_params table                             */
/********************************************************************/

         SELECT 
          into  "nl:"
            resc_assay = concat(trim(cnvtstring(pdm.service_resource_cd,32,0)), trim(cnvtstring(pdm.task_assay_cd,32,0))),
            pdm.service_resource_cd,
            pdm.task_assay_cd,
            r.pdm_param_id,
            r.sequence,
            r_exists = decode(r.seq, "Y", "N")
         FROM
            pdm_params pdm,
            pdm_ranges r, 
            (dummyt d2 with seq = 1)
          PLAN pdm 
            where pdm.active_ind = 1
         JOIN d2 where d2.seq = 1
         JOIN r
            where pdm.pdm_param_id = r.pdm_param_id
            and r.active_ind = 1 
         ORDER BY resc_assay, r.pdm_param_id, r.sequence
         HEAD resc_assay ;apr.task_assay_cd
            r_cnt = 0
            p_cnt = p_cnt + 1
            if (mod(p_cnt,5) = 1)
              stat = alterlist(reply->params, p_cnt + 5)
            endif
            reply->params[p_cnt].pdm_param_id          = pdm.pdm_param_id
            reply->params[p_cnt].service_resource_cd   = pdm.service_resource_cd
            reply->params[p_cnt].task_assay_cd         = pdm.task_assay_cd
call echo(resc_assay,1)
;call echo(reply->params[p_cnt].task_assay_cd, 1)
            reply->params[p_cnt].nbr_results           = pdm.nbr_results
            reply->params[p_cnt].time_period_minutes   = pdm.time_period_minutes
            reply->params[p_cnt].time_period_units_cd  = pdm.time_period_units_cd
            reply->params[p_cnt].min_nbr_results       = pdm.min_nbr_results
            reply->params[p_cnt].result_eval_flag      = pdm.result_eval_flag
            reply->params[p_cnt].rule_id            = pdm.rule_id
         HEAD r.pdm_param_id
            r_cnt = 0
         HEAD r.sequence             
           if (r_exists = "Y") 
           r_cnt = r_cnt + 1
            if (mod(r_cnt,5) = 1)
              stat = alterlist(reply->params[p_cnt]->ranges, r_cnt + 5)
            endif
call echo("range = ",0)
call echo(r.pdm_range_id, 1)
            reply->params[p_cnt]->ranges[r_cnt].pdm_range_id          = r.pdm_range_id
            reply->params[p_cnt]->ranges[r_cnt].sequence              = r.sequence
            reply->params[p_cnt]->ranges[r_cnt].species_cd            = r.species_cd
            reply->params[p_cnt]->ranges[r_cnt].sex_cd                = r.sex_cd
            reply->params[p_cnt]->ranges[r_cnt].age_from_minutes      = r.age_from_minutes
            reply->params[p_cnt]->ranges[r_cnt].age_from_units_cd     = r.age_from_units_cd
            reply->params[p_cnt]->ranges[r_cnt].age_to_minutes        = r.age_to_minutes
            reply->params[p_cnt]->ranges[r_cnt].age_to_units_cd       = r.age_to_units_cd
            reply->params[p_cnt]->ranges[r_cnt].result_high           = r.result_high
            reply->params[p_cnt]->ranges[r_cnt].result_low            = r.result_low
            reply->params[p_cnt]->ranges[r_cnt].mean                  = r.mean
            reply->params[p_cnt]->ranges[r_cnt].std_dev               = r.std_dev
            endif
         DETAIL
            row + 0
         FOOT r.pdm_param_id
            stat = alterlist(reply->params[p_cnt]->ranges, r_cnt)
         WITH
            nocounter,
;            outerjoin = d1,
            outerjoin = d2

         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           set failed = "T"
           go to exit_script
         endif

        set stat = alterlist(reply->params, p_cnt)

        if(curqual = 0) 
          go to no_params
        endif

/*
        select into "nl:"
          d1.seq,
          data_map_exists = decode(dm.seq, "Y", "N"),                   
          dm.task_assay_cd,                                             
          d_rg.seq,                                                     
          rg_exists = decode(rg.seq, "Y", "N"),                         
          rg.parent_service_resource_cd,                                
          rg.child_service_resource_cd,                                 
          rg.resource_group_type_cd,                                    
          rg.root_service_resource_cd                                             
        FROM data_map dm,
             (dummyt d_rg with seq = 1),
             resource_group rg,
             (dummyt d1 with seq = value(p_cnt))
        PLAN d1      
        JOIN dm                                                        
         where dm.task_assay_cd = reply->params[d1.seq].task_assay_cd                      
           and dm.data_map_type_flag = 0                         
           and dm.active_ind = 1                                       
       JOIN d_rg                                                       
         where d_rg.seq = 1                                            
       JOIN rg                                                         
         where rg.parent_service_resource_cd = dm.service_resource_cd  
           and rg.child_service_resource_cd = reply->params[d1.seq].service_resource_cd    
           and rg.resource_group_type_cd = serv_res_subsection_cd      
           and rg.root_service_resource_cd = 0.0                       
        HEAD d1.seq
          data_map_level = 0
          reply->params[d1.seq].max_digits = 6        
          reply->params[d1.seq].min_digits = 1        
          reply->params[d1.seq].min_decimal_places = 0             
        DETAIL
          if (data_map_exists = "Y")                                    
             ;* Check for exact match on data map                       
             if (data_map_level <= 2                                    
             and dm.data_map_type_flag = 0                              
             and dm.service_resource_cd > 0.0                           
             and dm.service_resource_cd = reply->params[d1.seq].service_resource_cd)        
                data_map_level = 3                                      
                reply->params[d1.seq].max_digits = dm.max_digits        
                reply->params[d1.seq].min_digits = dm.min_digits        
                reply->params[d1.seq].min_decimal_places =              
                  dm.min_decimal_places                                 
             endif                                                      
             ;* Check for subsection level data map                     
             if (data_map_level <= 1                                    
             and dm.data_map_type_flag = 0                              
             and dm.service_resource_cd > 0.0                           
             and rg_exists = "Y"                                        
             and rg.parent_service_resource_cd = dm.service_resource_cd 
             and rg.child_service_resource_cd = reply->params[d1.seq].service_resource_cd)  
                data_map_level = 2                                      
                reply->params[d1.seq].max_digits = dm.max_digits        
                reply->params[d1.seq].min_digits = dm.min_digits        
                reply->params[d1.seq].min_decimal_places =              
                  dm.min_decimal_places                                 
             endif                                                      
             ;* Check for default all resources level data map          
             if (data_map_level = 0                                     
             and dm.data_map_type_flag = 0                              
             and dm.service_resource_cd = 0.0)                          
                data_map_level = 1                                      
                reply->params[d1.seq].max_digits = dm.max_digits        
                reply->params[d1.seq].min_digits = dm.min_digits        
                reply->params[d1.seq].min_decimal_places =              
                  dm.min_decimal_places                                 
             endif                                                      
          endif                                                         
      WITH
         dontcare = dm,                                                
         outerjoin = d_rg,                                             
         dontcare = rg,                                                
         nocounter

for (cnt = 1 to p_cnt)
 call echo("min = ",0)
 call echo(reply->params[cnt].min_digits,0)
 call echo(" ", 0)
 call echo("max = ",0)
 call echo(reply->params[cnt].max_digits,0)
 call echo(" ", 0)
 call echo("dec = ",0)
 call echo(reply->params[cnt].min_decimal_places,1)
endfor
*/
        go to exit_script

/********************************************************************/ 
/* Executed if no params where found                                */
/********************************************************************/
     #no_params
      set reply->status_data->subeventstatus[1]->operationname = 
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "Z"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "pdm_params table"
      set failed = "T"
      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
      else
         set reply->status_data->status = "Z"
      endif
END
GO

;Generated by GNU enscript 1.6.4.
