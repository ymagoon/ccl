 ;;Solution_Test/script/PathNet -- Gen Lab/glb_accn_audit/glb_accn_audit.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Author:                 Kevin Brunner
        Date Written:           3/97
        Source file name:       glb_accn_audit.prg
        Object name:            glb_accn_audit

        Product:                General Lab
        Product Team:           General Lab
        HNA Version:            500
        CCL Version:            4.0

        Program purpose: Audit activity for accession
        Tables read: 
        Tables updated:
        Special Notes:

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 03/12/97 Kevin Brunner        Initial Release                     *
;    *002 09/19/97 Hal Patchen          Add autoverification logic          *
;    *003 04/26/99 Chad Moats           Removed joins to code_value table   *
;    *004 06/21/99 Derek Hime			Internationalization of script    *
; 	    12/09/99 Jack Moore		    Merged I18n code from mod above into*
;							production code.			    *
;    *005 04/25/00 Gary Runde           Print perf dt/tm on performed       *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program glb_accn_audit:dba go
create program glb_accn_audit:dba

;cclseclogin 							;003

paint

/*004************************     i18n     **************************/
; INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
; INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
set i18nHandle = 0
; CALL UAR_I18NLOCALIZATIONINIT
set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)
/*004************************     i18n     **************************/

record captions
(
1 accession = vc
1 name = vc
1 ordid = vc
1 catalogcd = vc
1 deptstat = vc
1 ordstat = vc
1 dtacd = vc
1 resultid = vc
1 resultcomment = vc
1 resultnote = vc
1 comment = vc
1 note  = vc
1 perfresid = vc
1 normal = vc
1 critical = vc
1 review = vc
1 delta = vc
)
set captions-> accession = uar_i18ngetmessage(i18nHandle,"accession","Accession:")
set captions-> name = uar_i18ngetmessage(i18nHandle,"name","Name:")
set captions-> ordid = uar_i18ngetmessage(i18nHandle,"ordid","Order ID:")
set captions-> catalogcd = uar_i18ngetmessage(i18nHandle,"catalogcd","Catalog CD:")
set captions-> deptstat = uar_i18ngetmessage(i18nHandle,"deptstat","Dept Status:")
set captions-> ordstat = uar_i18ngetmessage(i18nHandle,"ordstat","Order Status:")
set captions-> dtacd = uar_i18ngetmessage(i18nHandle,"dtacd","DTA Code:")
set captions-> resultid = uar_i18ngetmessage(i18nHandle,"resultid","Result ID:")
set captions-> resultcomment = uar_i18ngetmessage(i18nHandle,"resultcomment","Result comment:")
set captions-> resultnote = uar_i18ngetmessage(i18nHandle,"resultnote","Result note:")
set captions-> comment = uar_i18ngetmessage(i18nHandle,"comment","comment")
set captions-> note  = uar_i18ngetmessage(i18nHandle,"note","Note")
set captions-> perfresid = uar_i18ngetmessage(i18nHandle,"perfresid","Perform Result ID:")
set captions-> normal = uar_i18ngetmessage(i18nHandle,"normal","Normal:")
set captions-> critical = uar_i18ngetmessage(i18nHandle,"critical","Critical:")
set captions-> review = uar_i18ngetmessage(i18nHandle,"review","Review:")
set captions-> delta = uar_i18ngetmessage(i18nHandle,"delta","Delta:")


call clear (1,1)
call video (i)
call box   (1,1,22,80)
call line  (3,1,80,XHORAZ)
;004 call text (2, 3, "GLB Activity Accession Audit")
call text (2, 3, uar_i18ngetmessage(i18nHandle,"glbaaa","GLB Activity Accession Audit"))         ;004
call video (n)

;004 call text (9, 5, "Accession? ")
call text (9, 5, uar_i18ngetmessage(i18nHandle,"accessionq","Accession?"))                       ;004
call accept (9, 40, "CCCCCCCCCCCCCCCCCC;C")
;, format(CURDATE, "DD-MMM-YYYY;;D"))
set accn_nbr = curaccept
;call accept (10, 40, "NNNN;C", format(CURTIME, "HHMM;;M"))
;set starttime = curaccept
;call accept (11, 40, "NNDCCCDNNNN;C", format(CURDATE, "DD-MMM-YYYY;;D"))
;set enddate = curaccept
;call accept (12, 40, "NNNN;C", format(CURTIME, "HHMM;;M"))
;set endtime = curaccept



set num_cd = 0.0
set alpha_cd = 0.0
set calc_cd = 0.0
set o_cnt = 0
set a_cnt = 0
set r_cnt = 0
set oidx = 0
set aidx = 0
set ridx = 0
set oldperf = 0.0
set perfnum = 0.0
set oldver = 0.0
set oldautover = 0.0                                                   ;002
set oldcor = 0.0
set vernum = 0.0
set autovernum = 0.0                                                   ;002
set cornum = 0.0
set rcomment = 0.0                   			;result_comment
set rnote =0.0						;result_note

record work_rec
(
  1 comment_text = vc
  1 note_text = vc
)

select into 'nl:'
  c.code_value
from code_value c
where c.code_set=289 and
      c.cdf_meaning in ("2","3","8")
detail
  if (c.cdf_meaning="2")
    alpha_cd=c.code_value
  elseif (c.cdf_meaning="3")
    num_cd=c.code_value
  elseif (c.cdf_meaning="8")
    calc_cd=c.code_value
  endif
with nocounter

select into 'nl:'
  c.code_value
from code_value c
where c.code_set=1901 and
      c.cdf_meaning in ("VERIFIED","CORRECTED",
                        "AUTOVERIFIED", "OLDAUTOVERF",                 ;002
                        "OLDVERIFIED","OLDCORRECTED",
                        "PERFORMED", "OLDPERFORMED")
detail
  if (c.cdf_meaning="VERIFIED")
    vernum=c.code_value
  elseif (c.cdf_meaning="CORRECTED")
    cornum=c.code_value
  elseif (c.cdf_meaning="AUTOVERIFIED")                                ;002
    autovernum = c.code_value                                          ;002
  elseif (c.cdf_meaning="OLDVERIFIED")
    oldver=c.code_value
  elseif (c.cdf_meaning="OLDAUTOVERF")                                 ;002
    oldautover = c.code_value                                          ;002
  elseif (c.cdf_meaning="OLDCORRECTED")
    oldcor=c.code_value
  elseif (c.cdf_meaning="OLDPERFORMED")
    oldperf=c.code_value
  elseif (c.cdf_meaning="PERFORMED")
    perfnum=c.code_value
  endif
with nocounter

select into 'nl:'
  c.code_value
from code_value c
where c.code_set=14 and
      c.cdf_meaning in ("RES COMMENT","RES NOTE")
detail
  if (c.cdf_meaning="RES COMMENT")
    rcomment =c.code_value
  elseif (c.cdf_meaning="RES NOTE")
    rnote = c.code_value
  endif 
with nocounter

select distinct ; into 'nl:'
  aor.accession,
  aor.accession_id,    
  o.order_id,
  o.catalog_cd,
  o.order_mnemonic,
  p.name_full_formatted,
  ptr.catalog_cd,                            
  ptr.sequence,
;003  c1.display,
;003  c3.description,					;normal_cd
;003  c4.description,               		        ;critical_cd
;003  c5.description,                      		;review_cd
;003  c6.description,		       			;delta_cd
;003  c7.display,					;dept_status_cd
  c8.display,						;order_status_cd
  ptr.task_assay_cd                             
 ,r.result_id
 ,lt1.long_text_id
 ,rc1.comment_type_cd
 ,pr.perform_result_id
 ,pr.result_value_numeric
 ,pr.result_value_alpha
 ,pr.ascii_text
 ,pl.username
 ,re.event_reason
 ,re.event_sequence                                
 ,date = cnvtdatetime(re.event_dt_tm)

from
  accession_order_r aor,
  orders o,
  person p,
  profile_task_r ptr
;003 ,code_value c1     
;003 ,code_value c3
;003 ,code_value c4
;003 ,code_value c5
;003 ,code_value c6     
;003 ,code_value c7
;003 ,code_value c8
 ,dummyt d1
 ,dummyt d2
 ;,dummyt d3
 ,result r
 ,perform_result pr
;003 ,code_value c2
 ,result_event re
 ,prsnl pl
 ,result_comment rc1
 ,long_text lt1
; ,result_comment rc2
; ,long_text lt2

plan
  aor
   where aor.accession = accn_nbr
join
  o
   where o.order_id = aor.order_id
join
  p
   where o.person_id = p.person_id
join
  ptr
   where o.catalog_cd = ptr.catalog_cd
;003 join
;003  c1
;003   where ptr.task_assay_cd = c1.code_value
join d1
   where d1.seq = 1
join
  r
   where r.order_id = o.order_id
     and r.task_assay_cd = ptr.task_assay_cd
join
  pr
   where r.result_id = pr.result_id
;003 join
;003  c2
;003   where pr.service_resource_cd = c2.code_value
   
;003 join 
;003  c3
;003   where pr.normal_cd = c3.code_value

;003 join 
;003  c4
;003   where pr.critical_cd = c4.code_value

;003 join 
;003  c5
;003   where pr.review_cd = c5.code_value

;003 join 
;003  c6
;003   where pr.delta_cd = c6.code_value

;003 join 
;003  c7
;003   where o.dept_status_cd= c7.code_value

;003 join 
;003  c8
;003   where o.order_status_cd= c8.code_value

join
  re
   where pr.result_id = re.result_id
     and pr.perform_result_id = re.perform_result_id

join
  pl
   where re.event_personnel_id = pl.person_id

join d2
   where d2.seq=1

join rc1
   where r.result_id = rc1.result_id
    ; and rc1.comment_type_cd = rcomment

join lt1
   where rc1.long_text_id = lt1.long_text_id 

/*

join d3
  where d3.seq=1

join rc2
   where r.result_id = rc2.result_id
     and rc2.comment_type_cd = rnote

join lt2
   where rc2.long_text_id = lt2.long_text_id 
	
*/
order
 aor.accession_id,
 o.order_id,
 ptr.catalog_cd,    
 ptr.task_assay_cd
 ,ptr.sequence
 ,r.result_id
 ,rc1.comment_type_cd
 ,rc1.action_sequence
; ,rc2.action_sequence
 ,pr.perform_result_id
 ,re.event_sequence

head report
  under=fillstring(131,"=")
  ;004 ndate = format(date,"mm/dd/yy hh:mm:ss;;d")
  ndate = concat(format(date,"@SHORTDATE;;q")," ",format(date,"@TIMEWITHSECONDS;;q"))			;004

head page
   ;004 col 0, "Accession:",
   col 0, captions->accession,   												;004
col 12, aor.accession,
   row +1,
   ;004 col 0, "Name:"
   col 0, captions->name													;004
   col 12, call print(substring(1, 50, trim(p.name_full_formatted))),
   row +1, col 0, under
  ,row +1
;  col 25, "Order Id",
;  col 40, "Catalog Cd",
;  col 55, "Task Assay Cd",
;  col 70, "Status Cd",
;  col 85, "Status",

head aor.accession_id
   row +1


head o.order_id
  ;004 col 0, "Order ID:"o.order_id,
  col 0, captions->ordid,o.order_id, 											;004
  ;004 col 30, "Catalog Code:"o.catalog_cd,
  col 30, captions->catalogcd,o.catalog_cd,										;004
  col 45, call print(substring(1, 20, trim(o.order_mnemonic))),
;003  col 55, "Dept Status:" c7.display,
  deptstatus_disp = trim(UAR_GET_CODE_DISPLAY(o.dept_status_cd),3),			;003
  ;004 col 55, "Dept Status:" deptstatus_disp,						;003
  col 55, captions->deptstat, deptstatus_disp,										;004
;003  col 85, "Order Status:" c8.display,
  ordstatus_disp =  trim(UAR_GET_CODE_DISPLAY(o.order_status_cd),3),			;003
  ;004col 85, "Order Status:" ordstatus_disp,						;003
  col 85, captions->ordstat, ordstatus_disp,										;004
  row +2

head ptr.task_assay_cd
  ;004 col 7,"DTA Code:" ptr.task_assay_cd,
  col 7,captions->dtacd, ptr.task_assay_cd,										;004
  col 35, call print(substring(1, 20, trim(UAR_GET_CODE_DISPLAY(ptr.task_assay_cd)))),	;003
;003  col 35, call print(substring(1, 20, trim(c1.display))),
  row +0

head r.result_id
  ;004 col 50, "Result ID:"r.result_id,
  col 50, captions->resultid, r.result_id,										;004
  row +1

head rc1.comment_type_cd

  if (lt1.long_text > " " and rc1.comment_type_cd = rcomment)
    ;004 col 0, "Result comment"
    col 0, captions->resultcomment												;004
  ; col 16, rc1.action_sequence "###;l"
   ;col 19, ")" call print (substring(1,100,trim(lt1.long_text)))
    row +1
  endif
  if (lt1.long_text > " " and rc1.comment_type_cd = rnote)
    ;004 col 0, "Result note"
    col 0, captions->resultnote												;004
   ; col 16, rc1.action_sequence "###;l"
   ; col 19, ")" call print (substring(1,100,trim(lt1.long_text)))
    row +1
  endif


head rc1.action_sequence
  if (rc1.comment_type_cd = rcomment)
    ;004 col 0, "comment ("
    col 0, captions->comment," ("												;004
    col 14, rc1.action_sequence "###;l"
    col 17, ") : " call print (substring(1,100,trim(lt1.long_text)))
    row +1
endif
  if (rc1.comment_type_cd = rnote)
    ;004 col 0,"note ("
    col 0, captions->note," ("												;004
    col 14, rc1.action_sequence "###;l" 
    col 17, ") :" call print(substring(1,100,trim(lt1.long_text)))
    row +1
  endif

head pr.perform_result_id
  ;004 col 10,"Perform Result ID:",
  col 10, captions->perfresid,												;004
  col 30, pr.perform_result_id,
  if (pr.result_type_cd = num_cd or
      pr.result_type_cd = calc_cd)
    col 45, pr.result_value_numeric
  elseif
     (pr.result_type_cd = alpha_cd)
    col 45, call print(substring(1, 15, trim(pr.result_value_alpha)))
  else
    col 45, pr.ascii_text
  endif

  row+1,
;003  col 10,"Normal:     " c3.description,
;003  col 50,"Critical:   " c4.description,
  normal_disp = trim(UAR_GET_CODE_DESCRIPTION(pr.normal_cd),3),			;003
  ;004 col 10,"Normal:     " normal_disp,						;003
  col 10, captions->normal,"     ",normal_disp,										;004
  critical_disp	= trim(UAR_GET_CODE_DESCRIPTION(pr.critical_cd),3),		;003
  ;004 col 50,"Critical:   " critical_disp,						;003
  col 50,captions->critical,"   ", critical_disp,									;004
  row +1,
;003  col 10,"Review:     " c5.description,
;003  col 50,"Delta:      " c6.description,
  review_disp = trim(UAR_GET_CODE_DESCRIPTION(pr.review_cd),3),			;003
  ;004 col 10,"Review:     " review_disp,						;003
  col 10,captions->review,"     " review_disp,										;004
  delta_disp = trim(UAR_GET_CODE_DESCRIPTION(pr.delta_cd),3),			;003
  ;004 col 50,"Delta:      " delta_disp,						;003
  col 50,captions->delta,"      ", delta_disp,										;004
  row +1

head re.event_sequence
  if (pr.interface_flag = 1 and (re.event_type_cd = oldperf or
                                 re.event_type_cd = perfnum))
    col 30, call print(substring(1, 20, trim(UAR_GET_CODE_DISPLAY(pr.service_resource_cd))))	;003
;003    col 30, call print(substring(1, 20, trim(c2.display)))
  else
    col 30, call print(substring(1, 20, trim(pl.username)))
  endif
  
  col 50, call print(substring(1, 20, trim(re.event_reason)))
  if (re.event_type_cd = oldperf or re.event_type_cd = perfnum)                                                             ;005
       perfDate = concat(format(pr.perform_dt_tm,"@SHORTDATE;;q")," ",format(pr.perform_dt_tm,"@TIMEWITHSECONDS;;q"))       ;005
       col 75, perfDate                                                                                                     ;005 
  else                                                                                                                      ;005
       col 75, ndate
  endif                                                                                                                     ;005
;005  ,col 75, ndate
  ,row +2  
    
 detail
  row +0

foot re.event_sequence
row +0

foot pr.perform_result_id
row +0

foot r.result_id
row +0

foot ptr.task_assay_cd
  ; ,col 0, call print (substring(1,100,trim(lt.long_text)))               
row +0

foot o.order_id
row +0

foot aor.accession_id
row +0

with nocounter,
     outerjoin = d1,
     outerjoin = d2,
    ; outerjoin = d3,
     dontcare = rc1,
     maxcol = 200
end go

;Generated by GNU enscript 1.6.4.
