 ;;Solution_Test/script/PathNet -- Gen Lab/glb_solcap_auto_exec_interps/glb_solcap_auto_exec_interps.prg Turn on black mode

/*~BB~*******************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-2012 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 *~BE~*******************************************************************/
/************************************************************************
        Source file name:       glb_solcap_auto_exec_interps.prg
        Object name:            GLB_SOLCAP_AUTO_EXEC_INTERPS
        Request #:              None

        Product:                PathNet
        Product Team:           General Lab
        HNA Version:            500
        CCL Version:            8.0

        Program purpose:        Solution capability collector script
                                to determine if the 
                                "auto execute interpretation results"
                                preference is enabled and interpretation
                                results are being automatically generated
                                in a result entry application (ARE, BRE, 
                                or BRV).

        Tables read:            CODE_VALUE

        Tables updated:         None

        Executing from:         Operations

        Special Notes:          Executes uar_Pref* to load Preference Manager
                                preferences.

******************************************************************************/
/*****************************************************************************
 **                                                                          *
 **Mod Date     Dev     Engineer             Comment                         *
 **--- -------- ------- -------------------- --------------------------------*
 **000 12/12/12         CERHDP               Initial release                 *
 *****************************************************************************
 *************************  END OF ALL MODCONTROL BLOCKS  ********************/

drop program GLB_SOLCAP_AUTO_EXEC_INTERPS:dba go
create program GLB_SOLCAP_AUTO_EXEC_INTERPS:dba
/*
; For reference, here are the request and reply structures used by the script.
; They are defined by the caller, so it is not necessary to declare them here.

free record request
record request
(
	1 start_dt_tm = dq8            ; Beginning of the time range to check for 
	                               ; capability use.
	1 end_dt_tm = dq8              ; End of the range.
)

set request->start_dt_tm = cnvtdatetime(curdate-1, 000000)
set request->end_dt_tm = cnvtdatetime(curdate-1, 235959)

free record reply
record reply
(
	1 solcap[*]                    ; One for each capability returned by the 
	                               ; script
	                               
		2 identifier = vc          ; Required - capability identifier from PMO.
		
		2 degree_of_use_num = i4   ; At least one of the degree_of_uses must be
		2 degree_of_use_str = vc   ; filled out with a value measuring whether
		                           ; the capability is being used.

		2 distinct_user_count = i4 ; Optional - number of distinct users of the
		                           ; capability.
		                           
		2 position[*]              ; Optional - breakdown of capability use by
		                           ; position
			3 display = vc         ; Display name of the position
			
			3 value_num = i4       ; At least one of the values must be filled
			3 value_str = vc       ; out with the use by that position.
			
		2 facility[*]              ; Optional - breakdown of capability use by
		                           ; facility
			3 display = vc         ; Display name of the facility
			
			3 value_num = i4       ; At least one of the values must be filled
			3 value_str = vc       ; out with the use by that facility.
			
		2 other[*]                 ; Optional - breakdown of use by some other
		                           ; category; multiple "other" breakdowns are
		                           ; allowed
		                           
			3 category_name = vc   ; The type of breakdown performed.
			3 value[*]
				4 display = vc     ; Display name of the category
				4 value_num = i4   ; Degree of use by that category
				4 value_str = vc   
)
*/

; Declare variables
declare solcap_cnt           = i4 with protect, noconstant(0)   ;solution capability counter.
declare fac_cnt              = i4 with protect, noconstant(0)   ;facility counter.
declare stat                 = i4 with protect, noconstant(0)   ;status.
declare ARE_pref_value       = vc with protect, noconstant("")  ;ARE preference value
declare BRE_pref_value       = vc with protect, noconstant("")  ;BRE preference value
declare BRV_pref_value       = vc with protect, noconstant("")  ;BRV preference value


; Initialize preferences, and declare the preference functions.
execute prefrtl
declare LoadFacilityPreference(facilityCd = f8, sectionName = vc, sectionID = vc, group = vc, subgroup = vc, entry = vc) = vc
declare GetPreferenceValue(hGroup = i4, entry = vc) = vc


; ##############  General Lab Result Entry - Auto Execute Interpretation Results Capability ##############

; This capability checks the values of the "auto execute interpretation results preference to determine if interpretation
; results are being automaticaly generated in the Accession Result Entry, Batch Result Entry, and/or Batch Result Verify
; applications.  When the preference is turned on (i.e. "Yes") for any of the result entry applications, the capability
; is enabled.  The collector will breakdown the capability usage by facility.

set solcap_cnt = solcap_cnt + 1
set stat = alterlist(reply->solcap, solcap_cnt)
set reply->solcap[solcap_cnt].identifier = "2012.1.00150.1"
set reply->solcap[solcap_cnt].degree_of_use_num = 0
set reply->solcap[solcap_cnt].degree_of_use_str = "No"
set reply->solcap[solcap_cnt].distinct_user_count = 0

; Determine if the "auto execute interpretation results" preference is turned on at the system default level.
set ARE_pref_value = LoadFacilityPreference(0.0, "application", "AccessionResultEntry", "application settings", "", 
                                        "auto execute interpretation results")
set BRE_pref_value = LoadFacilityPreference(0.0, "application", "GLBBatchResultEntry", "application settings", "", 
                                        "auto execute interpretation results")
set BRV_pref_value = LoadFacilityPreference(0.0, "application", "glbBatchResultVerify", "application settings", "", 
                                        "auto execute interpretation results")
if (ARE_pref_value = "Yes"
or  BRE_pref_value = "Yes"
or  BRV_pref_value = "Yes")
   set reply->solcap[solcap_cnt].degree_of_use_str = "Yes"
endif


; Determine the setting of the preference for each active facility found in
; code set 220.
select into "nl:"
	cv.code_value, 
	cv.display
from code_value cv
where cv.code_set = 220 
  and cv.cdf_meaning = "FACILITY"
  and cv.active_ind = 1
  and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime)
  and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime)
order by cv.display
detail
	fac_cnt = fac_cnt + 1
	if (mod(fac_cnt, 10) = 1)
	    stat = alterlist(reply->solcap[solcap_cnt].facility, fac_cnt + 9)
	endif
	
	reply->solcap[solcap_cnt].facility[fac_cnt].display = cv.display
	reply->solcap[solcap_cnt].facility[fac_cnt].value_str = "No"

	ARE_pref_value = LoadFacilityPreference(cv.code_value, "application", "AccessionResultEntry", "application settings", "", 
	                                        "auto execute interpretation results")
	BRE_pref_value = LoadFacilityPreference(cv.code_value, "application", "GLBBatchResultEntry", "application settings", "", 
	                                        "auto execute interpretation results")
	BRV_pref_value = LoadFacilityPreference(cv.code_value, "application", "glbBatchResultVerify", "application settings", "", 
	                                        "auto execute interpretation results")
	if (ARE_pref_value = "Yes"
	or  BRE_pref_value = "Yes"
	or  BRV_pref_value = "Yes")
	    reply->solcap[solcap_cnt].facility[fac_cnt].value_str = "Yes"
	    reply->solcap[solcap_cnt].degree_of_use_str = "Yes"
	endif
foot report
    stat = alterlist(reply->solcap[solcap_cnt].facility, fac_cnt)
with nocounter


; LoadFacilityPreference loads the value of a preference for a facility,
; or the default if the facility isn't specified.  If it fails, it returns
; a string beginning with "Unknown".
subroutine LoadFacilityPreference(facilityCd, sectionName, sectionID, group, subgroup, entry)
	declare prefStat = i4 with noconstant(0)
	declare hPref = i4 with noconstant(0)
	declare hGroup = i4 with noconstant(0)
	declare hSubGroup = i4 with noconstant(0)
	declare hSection = i4 with noconstant(0)
	
	set hPref = uar_PrefCreateInstance(0)
	if (hPref = 0)
		return ("Unknown - probably not logged in.")
	endif
	
	; Define the lookup criteria
	set prefStat = uar_PrefAddContext(hPref, nullterm("default"), nullterm("system"))
	if (prefStat != 1)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif
	
	if (facilityCd != 0)
		set prefStat = uar_PrefAddContext(hPref, nullterm("facility"), nullterm(cnvtstring(facilityCd,19,2)))
		if (prefStat != 1)
		    call uar_PrefDestroyInstance(hPref)
		    return ("Unknown")
		endif
	endif
	
	; Specify what we want returned
	set prefStat = uar_PrefSetSection(hPref, nullterm(sectionName))
	if (prefStat != 1)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif
	
	set hGroup = uar_PrefCreateGroup()
	if (hGroup = 0)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif
	
	set prefStat = uar_PrefSetGroupName(hGroup, nullterm(sectionID))
	if (prefStat != 1)
		call uar_PrefDestroyGroup(hGroup)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif

	set hSubGroup = uar_PrefAddSubGroup(hGroup, nullterm(group))
	if (hSubGroup = 0)
		call uar_PrefDestroyGroup(hGroup)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif
	
	if (subgroup != "")
		set hSubGroup = uar_PrefAddSubGroup(hGroup, nullterm(subgroup))
		if (hSubGroup = 0)
			call uar_PrefDestroyGroup(hGroup)
		    call uar_PrefDestroyInstance(hPref)
		    return ("Unknown")
		endif
	endif
	
	set prefStat = uar_PrefAddGroup(hPref, hGroup)
	if (prefStat != 1)
		call uar_PrefDestroyGroup(hGroup)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif
	
	; Call the preference server
	set prefStat = uar_PrefPerform(hPref)
	if (prefStat != 1)
		call uar_PrefDestroyGroup(hGroup)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif
	
	call uar_PrefDestroyGroup(hGroup)

	; Pull out the returned preferences		
	set hSection = uar_PrefGetSectionByName(hPref, nullterm(sectionName))
	if (hSection = 0)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif

	set hGroup = uar_PrefGetGroupByName(hSection, nullterm(sectionID))
	if (hGroup = 0)
		call uar_PrefDestroySection(hSection)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif
	
	set hSubGroup = uar_PrefGetSubGroup(hGroup, 0)
	if (hSubGroup = 0)
		call uar_PrefDestroySection(hSection)
	    call uar_PrefDestroyInstance(hPref)
	    return ("Unknown")
	endif
	
	if (subgroup != "")
		set hSubGroup = uar_PrefGetSubGroup(hSubGroup, 0)
		if (hSubGroup = 0)
			call uar_PrefDestroySection(hSection)
		    call uar_PrefDestroyInstance(hPref)
		    return ("Unknown")
		endif
	endif
	
	; Find the preference we were looking for, and return it.
	declare result = vc with constant(GetPreferenceValue(hSubGroup, entry))
	call uar_PrefDestroySection(hSection)
    call uar_PrefDestroyInstance(hPref)
	return (result)
end

; Get the value of the specified entry in the specified group of preference results
subroutine GetPreferenceValue(hGroup, entry)
	free set prefStat
	declare prefStat = i4 with noconstant(0)
	declare entryName = c255 with noconstant ("")
	declare len = i4 with noconstant(255)
	
	; Get a count of entries, so we can loop through them
	declare entryCnt = i4 with noconstant(0)
	set prefStat = uar_PrefGetGroupEntryCount(hGroup, entryCnt)

	if (prefStat != 1)
	    return ("Unknown")
	endif
	
	; Loop through the entries
	declare idxEntry = i4 with noconstant(0)
	for (idxEntry = 0 to entryCnt - 1)
		set hEntry = uar_PrefGetGroupEntry(hGroup, idxEntry)
		
		if (hEntry = 0)
		    return ("Unknown")
		endif
		
		set len = 255
		set entryName = fillstring(255, "")
		set prefStat = uar_PrefGetEntryName(hEntry, entryName, len)
		; Check if the entry is the one we're looking for
		if (prefStat = 1 and nullterm(entryName) = entry)
		
			; It is, look for the prefvalue attribute, which holds the value of 
			; the preference.
			
			declare attrCnt = i4 with noconstant(0)
			set prefStat = uar_PrefGetEntryAttrCount(hEntry, attrCnt)
			if (prefStat != 1)
			    return ("Unknown")
			endif
	
			declare idxAttr = i4 with noconstant(0)	
			for (idxAttr = 0 to attrCnt - 1)
				declare hAttr = i4 with noconstant(0)
				set hAttr = uar_PrefGetEntryAttr(hEntry, idxAttr)
				if (hAttr != 0)
					set len = 255
					declare attrName = c255 with noconstant("")
					set prefStat = uar_PrefGetAttrName(hAttr, attrName, len)
					
					if (prefStat = 1 and trim(attrName) = "prefvalue")
						; We're assuming here that the preference is 
						; single-valued, and just pulling the first value
						; (index 0).
						
						set len = 255
						declare val = c255 with noconstant("")
						set prefStat = uar_PrefGetAttrVal(hAttr, val, len, 0)
						
						if (prefStat != 1)
						    return ("Unknown")
						endif
						
						return (trim(val))
					endif
				endif
			endfor
		endif
	endfor	
	
	return ("Unknown")
end

end
go

;Generated by GNU enscript 1.6.4.
