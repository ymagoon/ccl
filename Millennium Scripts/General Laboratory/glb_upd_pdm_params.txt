 ;;Solution_Test/script/PathNet -- Gen Lab/glb_upd_pdm_params/glb_upd_pdm_params.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_UPD_PDM_PARAMS.PRG
        Object name:            GLB_UPD_PDM_PARAMS
        Request #:              257564

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Update the PDM_PARAMS table with new values


        Tables read:            n/a

        Tables updated:         pdm_params
        Executing from:         General Lab internet application

        Special Notes:          n/a
*/
;    ************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 07/01/98 Gary Runde           Initial Release                     *
;     001 06/14/00 Gary Runde           Do not inactivate rows if dp exists *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

        drop program glb_upd_pdm_params:dba go
        create program glb_upd_pdm_params:dba
/*
;        record request
;        (
;         1 params[*]
;           2 pdm_param_id              = f8
;           2 service_resource_cd       = f8
;           2 task_assay_cd             = f8
;           2 nbr_results               = i4
;           2 time_period_minutes       = i4
;           2 time_period_units_cd      = f8
;           2 min_nbr_results           = i4
;           2 result_eval_flag          = i2
;           2 rule_id                = f8
;           2 ranges[*]
;             3 pdm_range_id              = f8
;             3 sequence                  = i4
;             3 species_cd                = f8
;             3 sex_cd                    = f8
;             3 age_from_minutes          = i4
;             3 age_from_units_cd         = f8
;             3 age_to_minutes            = i4
;             3 age_to_units_cd           = f8
;             3 result_high               = f8
;             3 result_low                = f8
;             3 mean                      = f8
;             3 std_dev                   = f8
;        ) */

        record reply
        (
%i cclsource:status_block.inc
         1 params[*]
           2 pdm_param_id              = f8
           2 service_resource_cd       = f8
           2 task_assay_cd             = f8
        )

        record tmp_range
        (
         1 tmp_ranges[*]
           2 pdm_range_id              = f8
        )

/* Variable initialization */
        set reply->status_data->status = "F"
        set hold_pdm_id = 0.00
        set reply_cnt = 0
        set p_cnt = 0
        set r_cnt = 0
        set tmp_cnt = 0
        set found = 0
        set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
        set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

      /***********************************************************************
      * Check if params have changed                                         *
      ***********************************************************************/
        subroutine chk_params_chg(cntr)
        select
          into "nl:"
          p.pdm_param_id
        from pdm_params p
        plan p
        where p.service_resource_cd = request->params[cntr].service_resource_cd
          and p.task_assay_cd = request->params[cntr].task_assay_cd
          and p.active_ind = 1
          and (p.nbr_results != request->params[cntr].nbr_results or
               p.time_period_minutes != request->params[cntr].time_period_minutes or
               p.time_period_units_cd != request->params[cntr].time_period_units_cd or
               p.min_nbr_results != request->params[cntr].min_nbr_results or
               p.rule_id != request->params[cntr].rule_id or
               p.result_eval_flag != request->params[cntr].result_eval_flag)
        with nocounter

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectName = "chk_params_chg"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

        if (curqual = 0)
           return(0)
        else
           return(1)
        endif
        end

        subroutine chk_ranges_chg(cntr, cntr2)
        select
          into "nl:"
          p2.pdm_range_id
        from pdm_ranges p2
        plan p2
          where p2.pdm_range_id = request->params[cntr]->ranges[cntr2].pdm_range_id
          and p2.active_ind = 1
          and (p2.sex_cd != request->params[cntr]->ranges[cntr2].sex_cd or
               p2.species_cd != request->params[cntr]->ranges[cntr2].species_cd or
               p2.result_low != request->params[cntr]->ranges[cntr2].result_low or
               p2.result_high != request->params[cntr]->ranges[cntr2].result_high or
               p2.age_from_minutes != request->params[cntr]->ranges[cntr2].age_from_minutes or
               p2.age_from_units_cd != request->params[cntr]->ranges[cntr2].age_from_units_cd or
               p2.mean != request->params[cntr]->ranges[cntr2].mean or
               p2.std_dev != request->params[cntr]->ranges[cntr2].std_dev or
               p2.age_to_minutes != request->params[cntr]->ranges[cntr2].age_to_minutes or
               p2.age_to_units_cd != request->params[cntr]->ranges[cntr2].age_to_units_cd)
        with nocounter

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectName = "chk_ranges_chg"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

        if (curqual = 0)
           return(0)
        else
           return(1)
        endif
        end

      /***********************************************************************
      * Update pdm_ranges table                                              *
      ***********************************************************************/
        subroutine update_ranges(cntr, cntr2)

        if (check_for_active_dp(request->params[cntr].pdm_param_id,
                 request->params[cntr]->ranges[cntr2].pdm_range_id) = 0)         ;001
            update
              into pdm_ranges p2
            set
              p2.active_ind          = 0,
              p2.end_effective_dt_tm = cnvtdatetime(curdate,curtime3),
              p2.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
              p2.updt_cnt            = p2.updt_cnt + 1,
              p2.updt_task           = reqinfo->updt_task,
              p2.updt_id             = reqinfo->updt_id,
              p2.updt_applctx        = reqinfo->updt_applctx
            where p2.pdm_range_id = request->params[cntr]->ranges[cntr2].pdm_range_id
            with
              nocounter
        else                                                              ;001
            ;just update the active_ind, not the beg and end eff dt/tm    ;001
            update                                                        ;001
              into pdm_ranges p2                                          ;001
            set                                                           ;001
              p2.active_ind          = 0,                                 ;001
              p2.updt_dt_tm          = cnvtdatetime(curdate,curtime3),    ;001
              p2.updt_cnt            = p2.updt_cnt + 1,                   ;001
              p2.updt_task           = reqinfo->updt_task,                ;001
              p2.updt_id             = reqinfo->updt_id,                  ;001
              p2.updt_applctx        = reqinfo->updt_applctx              ;001
            where p2.pdm_range_id = request->params[cntr]->ranges[cntr2].pdm_range_id
            with                                                          ;001
              nocounter                                                   ;001
        endif                                                             ;001


            set error_check = ERROR(sErrorMsg,0)   ;get error message
            if (error_check != 0)
              set reply->status_data->status = "F"
              set reply->status_data->subeventstatus[1]->TargetObjectName = "update ranges"
              set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
              go to exit_script
            endif
        end


/*****001 new code start **********************/
      /***********************************************************************
      * Check for active data point before inactivating range or param       *
      ***********************************************************************/
        subroutine check_for_active_dp(ParamID, RangeID)

        select into "nl:"
           dp.active_ind,
           dp.beg_effective_dt_tm,
           dp.end_effective_dt_tm,
           dp.pdm_param_id,
           dp.pdm_range_id
        from pdm_data_point dp
        where (dp.pdm_param_id = ParamID or ParamID = 0.0) and
              (dp.pdm_range_id = RangeID or RangeID = 0.0) and
              dp.active_ind = 1
        with nocounter

        if (curqual = 0)
           return(0)
        else
           return(1)
        endif

        end

/*****001 new code end**********************/

      /***********************************************************************
      * Update row on table containing the pdm_param_id                      *
      ***********************************************************************/
        subroutine inactivate_params(cntr)

        /*************001 Begin new code *****************/
        set InActParam = 1
        ;Get the pdm_ranges that are going to be updated
        select into "nl:"
          p.service_resource_cd,
          r.pdm_param_id
        from pdm_params p,
             pdm_ranges r
        plan p
        where p.service_resource_cd = request->params[cntr].service_resource_cd
          and p.task_assay_cd = request->params[cntr].task_assay_cd
          and cnvtdatetime(curdate,curtime3) between p.beg_effective_dt_tm and p.end_effective_dt_tm
        join r where r.pdm_param_id = p.pdm_param_id and
            cnvtdatetime(curdate,curtime3) between r.beg_effective_dt_tm and r.end_effective_dt_tm
        order by r.pdm_range_id
        head report
          tmp_cnt = 0
        head r.pdm_range_id
          ;if no active data point was found for this pdm_range then it can be inactivated
          tmp_cnt = tmp_cnt + 1
          if (mod(tmp_cnt,5) = 1)
             stat = alterlist(tmp_range->tmp_ranges, tmp_cnt + 5)
          endif
          tmp_range->tmp_ranges[tmp_cnt].pdm_range_id = r.pdm_range_id
        WITH nocounter

        set stat = alterlist(tmp_range->tmp_ranges, tmp_cnt)

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectName = "inactivate_params"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

        for (cnt = 1 to tmp_cnt)
            ;check to make sure that the PDM range does not have any data points
            if (check_for_active_dp(0.0, tmp_range->tmp_ranges[cnt].pdm_range_id) = 0)
                update
                  into pdm_ranges p2
                set
                  p2.active_ind          = 0,
                  p2.end_effective_dt_tm = cnvtdatetime(curdate,curtime3),
                  p2.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
                  p2.updt_cnt            = p2.updt_cnt + 1,
                  p2.updt_task           = reqinfo->updt_task,
                  p2.updt_id             = reqinfo->updt_id,
                  p2.updt_applctx        = reqinfo->updt_applctx
                where p2.pdm_range_id = tmp_range->tmp_ranges[cnt].pdm_range_id
                with
                  nocounter
            else
               ;just update the active_ind, not the beg and end eff dt/tm    ;001
               update                                                        ;001
                 into pdm_ranges p2                                          ;001
               set                                                           ;001
                 p2.active_ind          = 0,                                 ;001
                 p2.updt_cnt            = p2.updt_cnt + 1,                   ;001
                 p2.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
                 p2.updt_task           = reqinfo->updt_task,                ;001
                 p2.updt_id             = reqinfo->updt_id,                  ;001
                 p2.updt_applctx        = reqinfo->updt_applctx              ;001
               where p2.pdm_range_id = tmp_range->tmp_ranges[cnt].pdm_range_id
               with                                                          ;001
                  nocounter                                                  ;001
               set inActParam = 0                                            ;001
            endif
            set error_check = ERROR(sErrorMsg,0)   ;get error message
            if (error_check != 0)
              set reply->status_data->status = "F"
              set reply->status_data->subeventstatus[1]->TargetObjectName = "inactivate_params"
              set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
              go to exit_script
            endif
        endfor
        set stat = alterlist(tmp_range->tmp_ranges, 0)
        /*************001 END new code *****************/

        ;if any of the pdm ranges had data points then don't update the pdm_param
        if (inActParam = 1)                                               ;001
            update
              into pdm_params p
            set
              p.active_ind           = 0,
              p.end_effective_dt_tm  = cnvtdatetime(curdate,curtime3),
              p.updt_dt_tm           = cnvtdatetime(curdate,curtime3),
              p.updt_cnt             = p.updt_cnt + 1,
              p.updt_task            = reqinfo->updt_task,
              p.updt_id              = reqinfo->updt_id,
              p.updt_applctx         = reqinfo->updt_applctx
            where p.service_resource_cd = request->params[cntr].service_resource_cd
              and p.task_assay_cd = request->params[cntr].task_assay_cd
              and p.active_ind = 1
            with nocounter
        else
            update
              into pdm_params p
            set
              p.active_ind           = 0,
              p.updt_dt_tm           = cnvtdatetime(curdate,curtime3),
              p.updt_cnt             = p.updt_cnt + 1,
              p.updt_task            = reqinfo->updt_task,
              p.updt_id              = reqinfo->updt_id,
              p.updt_applctx         = reqinfo->updt_applctx
            where p.service_resource_cd = request->params[cntr].service_resource_cd
              and p.task_assay_cd = request->params[cntr].task_assay_cd
              and p.active_ind = 1
            with nocounter
        endif                                                            ;001

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectName = "inactivate_params"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif


        ;if (curqual = 0)
        ;   go to EXIT_INSERT
        ;endif
        end

/*001
        subroutine inactivate_ranges(cntr)
        update
          into pdm_ranges p2
        set
          p2.active_ind          = 0,
          p2.end_effective_dt_tm = cnvtdatetime(curdate,curtime),
          p2.updt_dt_tm          = cnvtdatetime(curdate,curtime),
          p2.updt_cnt            = p2.updt_cnt + 1,
          p2.updt_task           = reqinfo->updt_task,
          p2.updt_id             = reqinfo->updt_id,
          p2.updt_applctx        = reqinfo->updt_applctx
        where p2.pdm_param_id = request->params[cntr].pdm_param_id
        with
          nocounter

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectName = "inactivate_ranges"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

        ;if (curqual = 0)
        ;  go to EXIT_INSERT
        ;endif
        end
001*/
      /***********************************************************************
      * Add new row to the pdm_params table with new ID                      *
      ***********************************************************************/
        subroutine insert_param(cntr)
        SELECT
           into "nl:"
              y = seq(reference_seq,nextval) "##################;rp0"
        FROM
           dual
        DETAIL
           request->params[cntr].pdm_param_id = cnvtreal(y)
        WITH
           format, counter

       insert
          into
           pdm_params p
        set
          p.pdm_param_id         = request->params[cntr].pdm_param_id,
          p.beg_effective_dt_tm  = CNVTDATETIME(CURDATE, CURTIME3),
          p.end_effective_dt_tm  = CNVTDATETIME("31-dec-2100 23:59:59.59"),
          p.min_nbr_results      = request->params[cntr].min_nbr_results,
          p.nbr_results          = request->params[cntr].nbr_results,
          p.result_eval_flag     = request->params[cntr].result_eval_flag,
          p.service_resource_cd  = request->params[cntr].service_resource_cd,
          p.task_assay_cd        = request->params[cntr].task_assay_cd,
          p.time_period_minutes  = request->params[cntr].time_period_minutes,
          p.time_period_units_cd = request->params[cntr].time_period_units_cd,
          p.rule_id              = request->params[cntr].rule_id,
          p.active_ind           = 1,
          p.updt_dt_tm           = cnvtdatetime(curdate,curtime3),
          p.updt_cnt             = 0,
          p.updt_task            = reqinfo->updt_task,
          p.updt_id              = reqinfo->updt_id,
          p.updt_applctx         = reqinfo->updt_applctx
        with nocounter

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectName = "insert param"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

        ;if (curqual = 0)
        ;        go to EXIT_INSERT
        ;endif
        end

      /***********************************************************************
      * Add new row to the pdm_ranges table with new ID                      *
      ***********************************************************************/
        subroutine insert_range(cntr, cntr2)
        SELECT
           into "nl:"
              y = seq(reference_seq,nextval) "##################;rp0"
        FROM
           dual
        DETAIL
           request->params[cntr]->ranges[cntr2].pdm_range_id = cnvtreal(y)
        WITH
           format, counter

        insert
          into pdm_ranges p2
        set
          p2.pdm_param_id        = request->params[cntr].pdm_param_id,
          p2.pdm_range_id        = request->params[cntr].ranges[cntr2].pdm_range_id,
          p2.sequence            = request->params[cntr].ranges[cntr2].sequence,
          p2.age_from_minutes    = request->params[cntr].ranges[cntr2].age_from_minutes,
          p2.age_from_units_cd   = request->params[cntr].ranges[cntr2].age_from_units_cd,
          p2.age_to_minutes      = request->params[cntr].ranges[cntr2].age_to_minutes,
          p2.age_to_units_cd     = request->params[cntr].ranges[cntr2].age_to_units_cd,
          p2.mean                = request->params[cntr].ranges[cntr2].mean,
          p2.result_high         = request->params[cntr].ranges[cntr2].result_high,
          p2.result_low          = request->params[cntr].ranges[cntr2].result_low,
          p2.species_cd          = request->params[cntr].ranges[cntr2].species_cd,
          p2.sex_cd              = request->params[cntr].ranges[cntr2].sex_cd,
          p2.std_dev             = request->params[cntr].ranges[cntr2].std_dev,
          p2.active_ind          = 1,
          p2.beg_effective_dt_tm = cnvtdatetime(curdate,curtime3),
          p2.end_effective_dt_tm  = CNVTDATETIME("31-dec-2100 23:59:59.59"),
          p2.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
          p2.updt_cnt            = 0,
          p2.updt_task           = reqinfo->updt_task,
          p2.updt_id             = reqinfo->updt_id,
          p2.updt_applctx        = reqinfo->updt_applctx
        with nocounter
        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectName = "insert_range"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

        ;if (curqual = 0)
        ;  go to EXIT_INSERT
        ;endif
        end

      /***********************************************************************
      * Check number of ranges                                               *
      ***********************************************************************/
        subroutine chk_del_ranges(cntr, range_count)

        set tmp_cnt = 0
        SELECT
          into "nl:"
          p2.pdm_range_id
        FROM
          pdm_ranges p2
        PLAN p2
          where p2.pdm_param_id = request->params[cntr].pdm_param_id
          and p2.active_ind = 1
        DETAIL
          tmp_cnt = tmp_cnt + 1
          if (mod(tmp_cnt,5) = 1)
            stat = alterlist(tmp_range->tmp_ranges, tmp_cnt + 5)
          endif
          tmp_range->tmp_ranges[tmp_cnt].pdm_range_id = p2.pdm_range_id
        WITH
          nocounter

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectName = "chk_del_ranges"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

        for (cnt = 1 to tmp_cnt)
          set found = 0
          for (cnt2 = 1 to range_count)
            if(tmp_range->tmp_ranges[cnt].pdm_range_id = request->params[cntr]->ranges[cnt2].pdm_range_id)
              set cnt2 = range_count + 1
              set found = 1
            endif
          endfor
          if ((found = 0) and
              (check_for_active_dp(0.0, tmp_range->tmp_ranges[cnt].pdm_range_id) = 0))  ;001
              ;inactivate range row
            update
              into pdm_ranges p2
            set
              p2.active_ind          = 0,
              p2.end_effective_dt_tm = cnvtdatetime(curdate,curtime3),
              p2.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
              p2.updt_cnt            = p2.updt_cnt + 1,
              p2.updt_task           = reqinfo->updt_task,
              p2.updt_id             = reqinfo->updt_id,
              p2.updt_applctx        = reqinfo->updt_applctx
            where p2.pdm_range_id = tmp_range->tmp_ranges[cnt].pdm_range_id
            with
              nocounter
          elseif (found = 0)
            update
              into pdm_ranges p2
            set
              p2.active_ind          = 0,
              p2.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
              p2.updt_cnt            = p2.updt_cnt + 1,
              p2.updt_task           = reqinfo->updt_task,
              p2.updt_id             = reqinfo->updt_id,
              p2.updt_applctx        = reqinfo->updt_applctx
            where p2.pdm_range_id = tmp_range->tmp_ranges[cnt].pdm_range_id
            with
              nocounter
          endif

          set error_check = ERROR(sErrorMsg,0)   ;get error message
          if (error_check != 0)
            set reply->status_data->status = "F"
            set reply->status_data->subeventstatus[1]->TargetObjectName = "chk_del_ranges"
            set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
            go to exit_script
          endif
        endfor

        end

      /***********************************************************************
      * Loop through the request array sending each record to the subs       *
      ***********************************************************************/

        for (p_cnt = 1 to size(request->params, 5))
        if (request->params[p_cnt].pdm_param_id > 0) ;if pdm_param already exists
          ;check for changes
          if (chk_params_chg(p_cnt) = 1)
            ;if changes made to the params, then inactivate params and ranges
            call inactivate_params(p_cnt)
;001            call inactivate_ranges(p_cnt)
            ;insert into pdm_param table
            call insert_param(p_cnt)
            ;insert into pdm_range table
            for (r_cnt = 1 to size(request->params[p_cnt]->ranges,5))
              call insert_range(p_cnt, r_cnt)
            endfor
          else  ;if no changes to the params

            ;check if any ranges have been removed
            call chk_del_ranges(p_cnt, size(request->params[p_cnt]->ranges,5))

            for(r_cnt = 1 to size(request->params[p_cnt]->ranges, 5))
              ;check if existing range or new range
              if (request->params[p_cnt]->ranges[r_cnt].pdm_range_id > 0)
                ;if existing range, check for changes
                if (chk_ranges_chg(p_cnt, r_cnt) = 1)
                  ;if changes then update range
                  call update_ranges(p_cnt, r_cnt)
                  call insert_range(p_cnt, r_cnt)
                endif
              else
                ;if new range then insert range
                call insert_range(p_cnt, r_cnt)
              endif
            endfor
          endif
        else ;if new pdm_param
          ;insert into pdm_param table
          call insert_param(p_cnt)
          ;insert into pdm_range table
          for (r_cnt = 1 to size(request->params[p_cnt]->ranges,5))
            call insert_range(p_cnt, r_cnt)
          endfor
        endif

        ;fill out reply
;        if (mod(p_cnt,5) = 1)
;           set stat =  alterlist(reply->params,p_cnt + 5)
;        endif
;        set reply->params[p_cnt].service_resource_cd = request->params[p_cnt].service_resource_cd
;        set reply->params[p_cnt].task_assay_cd = request->params[p_cnt].task_assay_cd
;        set reply->params[p_cnt].pdm_param_id = request->params[p_cnt].pdm_param_id
;        set reply_cnt = reply_cnt + 1

        endfor
        set reply->status_data->status = "S"


;        set stat = alterlist(reply->params, reply_cnt)


/* If no record matching, exit with return
   status of "F". */
#EXIT_SCRIPT
   if (reply->status_data->status = "S")
      commit
   else
      rollback
   endif

/*     if (curqual = 0)
       rollback
        go to exit_program
     else
        commit
       set reply->status_data->status = "S"
     endif
*/

      end
      go

;Generated by GNU enscript 1.6.4.
