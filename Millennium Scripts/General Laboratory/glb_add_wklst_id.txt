 ;;Solution_Test/script/PathNet -- Gen Lab/glb_add_wklst_id/glb_add_wklst_id.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_ADD_WKLST_ID.PRG
        Object name:            GLB_ADD_WKLST_ID
        Request #:              250078

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Insert a new worklist
                                into the database

        Tables read:            n/a

        Tables updated:         worklist
                                worklist_order_r

        Executing from:         General Lab worklist request

        Special Notes:          n/a

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     500 05/14/96 Newton Hughes        Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      DROP PROGRAM glb_add_wklst_id:dba GO
      CREATE PROGRAM glb_add_wklst_id:dba
/*    
      RECORD request
      (
        1 worklist_prsnl_id		= f8
        1 status_cd			= f8
        1 service_resource_cd		= f8
        1 worklist_ref_id		= f8
        1 worklist_type_flag		= i2
        1 worklist_alias		= c25
        1 orders[x]
          2 order_id			= f8
          2 sequence			= i4
      )
*/
      RECORD reply
      (
%i cclsource:status_block.inc
      )

      #SCRIPT
        SET reply->status_data->status = "F"
        SET failed = "F"
        SET wklst_id = 0.0
        SET ord_cnt = size(request->orders, 5)

/*******************************************************************/
/* Get new worklist id.                                            */
/*******************************************************************/

      SELECT INTO "nl:"
        y = seq(pathnet_seq,nextval) "##################;rp0"
      FROM
        dual
      DETAIL
        wklst_id = cnvtreal(y)
      WITH
        format, counter
      
      IF (curqual = 0)
        GO TO seq_failed
      ENDIF

/*******************************************************************/
/* Insert row into worklist table.                                 */
/*******************************************************************/

      INSERT
        INTO worklist w

      SET
        w.worklist_id = wklst_id 
        , w.worklist_type_flag = request->worklist_type_flag
        , w.worklist_ref_id = request->worklist_ref_id
        , w.worklist_dt_tm = cnvtdatetime(curdate, curtime)
        , w.status_cd = request->status_cd
        , w.service_resource_cd = request->service_resource_cd
        , w.worklist_alias = request->worklist_alias
        , w.updt_cnt = 0
        , w.updt_dt_tm = cnvtdatetime(curdate, curtime)
        , w.updt_id = reqinfo->updt_id
        , w.updt_task = reqinfo->updt_task
        , w.updt_applctx = reqinfo->updt_applctx

      WITH
        nocounter

      IF (curqual = 0)
        GO TO w_insert_failed
      ENDIF

/*******************************************************************/
/* Fill out worklist_order_r records                               */
/*******************************************************************/

      INSERT INTO
        worklist_order_r wo
        , (dummyt d1 with seq = value(ord_cnt))  

      SET
        we.worklist_id = wklst_id
        , we.order_id = request->orders[d1.seq]->order_id
        , we.sequence = request->orders[d1.seq]->sequence
        , we.updt_cnt = 0
        , we.updt_dt_tm = cnvtdatetime(curdate, curtime)
        , we.updt_id = reqinfo->updt_id
        , we.updt_task = reqinfo->updt_task
        , we.updt_applctx = reqinfo->updt_applctx

      PLAN d1
      JOIN wo
        WHERE wo.order_id = request->orders[d1.seq]->order_id

      WITH
        NOCOUNTER
        , OUTERJOIN = d1

/* see if worklist-order relationship was recorded */

      IF (curqual = 0)
        GO TO wo_insert_failed
      ELSE
        GO TO exit_script
      ENDIF

/********************************************************************/ 
/* Executed if sequence cannot be obtained.                         */
/********************************************************************/

#seq_failed
      SET reply->status_data->subeventstatus[1]->operationname =
        "seq"
      SET reply->status_data->subeventstatus[1]->operationstatus =
        "F"
      SET reply->status_data->subeventstatus[1]->targetobjectname =
        "table"
      SET reply->status_data->subeventstatus[1]->targetObjectValue =
        "worklist_id"
      SET failed = "T"
      GO TO exit_script

#w_insert_failed
      SET reply->status_data->subeventstatus[1]->operationname =
        "insert"
      SET reply->status_data->subeventstatus[1]->operationstatus =
        "F"
      SET reply->status_data->subeventstatus[1]->targetobjectname =
        "table"
      SET reply->status_data->subeventstatus[1]->targetObjectValue =
        "worklist"
      SET failed = "T"
      GO TO exit_script

#wo_insert_failed
      SET reply->status_data->subeventstatus[1]->operationname =
        "insert"
      SET reply->status_data->subeventstatus[1]->operationstatus =
        "F"
      SET reply->status_data->subeventstatus[1]->targetobjectname =
        "table"
      SET reply->status_data->subeventstatus[1]->targetObjectValue =
        "worklist_order_r"
      GO TO exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/

#exit_script
      IF (failed = "F")
        SET reply->status_data->status = "S"
        COMMIT
      ELSE
        ROLLBACK
      ENDIF

      END GO

;Generated by GNU enscript 1.6.4.
