 ;;Solution_Test/script/Bedrock/bed_aud_gl_work_rtg/bed_aud_gl_work_rtg.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:        bed_aud_gl_work_rtg.prg
        Object name:             bed_aud_gl_work_rtg
        Request #:
 
        Product:                 Bedrock
        Product Team:            Bedrock
        HNA Version:             500
        CCL Version:             8.0
 
        Program purpose:
 
        Tables read:
 
 
        Tables updated:
 
        Executing from:          BEDROCK
 
        Special Notes:
 
 
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 02/25/08 Kelli Wade           Change high volume thresholds
;										and correctly calculate high volume
;     002 02/20/09 Kelli Wade           When an orderable is not routed, display spaces for the
;											Sequence and Instrument/Bench Status columns
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bed_aud_gl_work_rtg:dba go
create program bed_aud_gl_work_rtg:dba
 
if (not (validate (request,0)))
 record request
  (
    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
    1 paramlist[*]
      2 param_type_mean = vc
      2 pdate1 = dq8
      2 pdate2 = dq8
      2 vlist[*]
        3 dbl_value = f8
        3 string_value = vc
  )
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*]
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1  high_volume_flag = i2
    1  output_filename = vc
    1  run_status_flag = i2
    1  statlist[*]
       2 statistic_meaning = vc
       2 status_flag = i2
       2 qualifying_items = i4
       2 total_items = i4
    1  status_data
      2  status  =  C1
      2  SUBEVENTSTATUS [ 1 ]
        3  OPERATIONNAME  =  C15
        3  OPERATIONSTATUS  =  C1
        3  TARGETOBJECTNAME  =  C15
        3  TARGETOBJECTVALUE  =  C100
  )
endif
 
free record temp
record temp
(
  1 o_cnt = i4
  1 olist[*]
    2 catalog_cd = f8
    2 primary_mnemonic = vc
    2 catalog_type_cd = f8
    2 catalog_type_disp = vc
    2 activity_type_cd = f8
    2 activity_type_disp = vc
    2 activity_subtype_cd = f8
    2 activity_subtype_disp = vc
    2 dept_display_name = vc
    2 resource_route_lvl = i2
    2 r_cnt = i4
    2 rlist[*]
      3 service_resource_cd = f8
      3 service_resource_disp = vc
      3 sequence = i4
      3 primary_ind = i2
      3 instr_bench_status = vc
)
 
 
 
 
declare GENLAB = f8 with public, noconstant(0.0)
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 6000
    and cv.cdf_meaning = "GENERAL LAB"
    and cv.active_ind = 1
detail
  GENLAB = cv.code_value
with nocounter
 
 
declare glb_cd = f8 with public, noconstant(0.0)
 
set glb_cd = 0.0
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 106
    and cv.cdf_meaning = "GLB"
    and cv.active_ind = 1
detail
  glb_cd = cv.code_value
with nocounter
 
 
 
/*beginning 001
 
set high_volume_cnt = 0
if (request->skip_volume_check_ind = 0)
  select into "nl:"
    hv_cnt = count(*)
  from order_catalog oc
  plan oc
    where oc.catalog_type_cd = GENLAB
      and oc.activity_type_cd = glb_cd
      and oc.active_ind = 1
  detail
    high_volume_cnt = hv_cnt
  with nocounter
 
  call echo(high_volume_cnt)
 
  if (high_volume_cnt > 5000)
    set reply->high_volume_flag = 2
    go to exit_script
  elseif (high_volume_cnt > 3000)
    set reply->high_volume_flag = 1
    go to exit_script
  endif
endif
 
end 001*/
 
 
 
/*beginning mod 001*/
set high_volume_cnt = 0
if (request->skip_volume_check_ind = 0)
 
  select into "nl:"
    hv_cnt = count(*)
  from order_catalog o,
     orc_resource_list r
  plan o
  where o.catalog_type_cd = GENLAB
    and o.activity_type_cd = glb_cd
    and o.active_ind = 1
    and o.orderable_type_flag != 6
    and o.orderable_type_flag != 2
    and o.bill_only_ind in (0,null)
  join r
  where r.catalog_cd = outerjoin(o.catalog_cd)
  detail
    high_volume_cnt = hv_cnt
  with nocounter
 
  call echo(high_volume_cnt)
 
  if (high_volume_cnt > 60000)
    set reply->high_volume_flag = 2
    go to exit_script
  elseif (high_volume_cnt > 30000)
    set reply->high_volume_flag = 1
    go to exit_script
  endif
endif
/*end mod 001*/
 
 
 
 
set temp->o_cnt = 0
 
select into "nl:"
from order_catalog o,
     code_value cv1,
     code_value cv2,
     orc_resource_list r
plan o
  where o.catalog_type_cd = GENLAB
    and o.activity_type_cd = glb_cd
    and o.active_ind = 1
    and o.orderable_type_flag != 6
    and o.orderable_type_flag != 2
    and o.bill_only_ind in (0,null)
join cv1
  where cv1.code_value = o.activity_type_cd
join cv2
  where cv2.code_value = o.activity_subtype_cd
join r
  where r.catalog_cd = outerjoin(o.catalog_cd)
;    and r.active_ind = outerjoin(1)
order by cv1.display_key,cnvtupper(o.primary_mnemonic),r.sequence
head report
  o_cnt = 0
  r_cnt = 0
head o.catalog_cd
  r_cnt = 0
  o_cnt = o_cnt + 1
  temp->o_cnt = o_cnt
  stat = alterlist(temp->olist,o_cnt)
  temp->olist[o_cnt].catalog_cd = o.catalog_cd
  temp->olist[o_cnt].primary_mnemonic = o.primary_mnemonic
  temp->olist[o_cnt].activity_type_cd = o.activity_type_cd
  temp->olist[o_cnt].activity_type_disp = cv1.display
  temp->olist[o_cnt].dept_display_name = o.dept_display_name
  if (o.activity_subtype_cd > 0)
    temp->olist[o_cnt].activity_subtype_cd = o.activity_subtype_cd
    temp->olist[o_cnt].activity_subtype_disp = cv2.display
  endif
  temp->olist[o_cnt].resource_route_lvl = o.resource_route_lvl
head r.sequence
  if (o.resource_route_lvl != 2)
    r_cnt = r_cnt + 1
    temp->olist[o_cnt].r_cnt = r_cnt
    stat = alterlist(temp->olist[o_cnt].rlist,r_cnt)
    temp->olist[o_cnt].rlist[r_cnt].service_resource_cd = r.service_resource_cd
    temp->olist[o_cnt].rlist[r_cnt].sequence = r.sequence
    if (r.primary_ind = 1)
      temp->olist[o_cnt].rlist[r_cnt].primary_ind = 1
    endif
    if (r.active_ind = 0)
      temp->olist[o_cnt].rlist[r_cnt].instr_bench_status = "Inactive Relation"
    endif
;    temp->olist[o_cnt].service_resource_disp = "Assay Level"
  endif
with nocounter
 
 
 
set stat = alterlist(reply->collist,10)
set reply->collist[1].header_text = "Activity Type"
set reply->collist[1].data_type = 1 ;string
set reply->collist[1].hide_ind = 1
set reply->collist[2].header_text = "Primary Name"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 0
set reply->collist[3].header_text = "Instrument/Bench"
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
set reply->collist[4].header_text = "Sequence"
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
set reply->collist[5].header_text = "Default"
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
set reply->collist[6].header_text = "Dept Disp Name"
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
set reply->collist[7].header_text = "Subactivity Type"
set reply->collist[7].data_type = 1 ;string
set reply->collist[7].hide_ind = 0
set reply->collist[8].header_text = "catalog_cd"
set reply->collist[8].data_type = 2 ;double
set reply->collist[8].hide_ind = 1
set reply->collist[9].header_text = "service_resource_cd"
set reply->collist[9].data_type = 2 ;double
set reply->collist[9].hide_ind = 1
set reply->collist[10].header_text = "Instrument/Bench Status"
set reply->collist[10].data_type = 1 ;string
set reply->collist[10].hide_ind = 0
 
 
 
if (temp->o_cnt = 0)
  go to exit_script
endif
 
 
 
 
 
for (x = 1 to temp->o_cnt)
  if (temp->olist[x].r_cnt > 0)
    select into "nl:"
    from (dummyt d with seq = temp->olist[x].r_cnt),
      code_value cv
    plan d
      where temp->olist[x].rlist[d.seq].service_resource_cd > 0
    join cv
      where cv.code_value = temp->olist[x].rlist[d.seq].service_resource_cd
    order d.seq
    head d.seq
      temp->olist[x].rlist[d.seq].service_resource_disp = trim(cv.display)
      if (temp->olist[x].rlist[d.seq].instr_bench_status = " ")
        if (cv.active_ind = 0)
          temp->olist[x].rlist[d.seq].instr_bench_status = "Inactive"
        else
          temp->olist[x].rlist[d.seq].instr_bench_status = "Active"
        endif
      endif
    with nocounter
  endif
endfor
 
 
 
 
set row_nbr = 0
 
for (x = 1 to temp->o_cnt)
  if (temp->olist[x].r_cnt = 0)
    set row_nbr = row_nbr + 1
    set stat = alterlist(reply->rowlist,row_nbr)
    set stat = alterlist(reply->rowlist[row_nbr].celllist,10)
    set reply->rowlist[row_nbr].celllist[1].string_value = temp->olist[x].activity_type_disp
    set reply->rowlist[row_nbr].celllist[2].string_value = temp->olist[x].primary_mnemonic
    set reply->rowlist[row_nbr].celllist[6].string_value = temp->olist[x].dept_display_name
    set reply->rowlist[row_nbr].celllist[7].string_value = temp->olist[x].activity_subtype_disp
    set reply->rowlist[row_nbr].celllist[8].double_value = temp->olist[x].catalog_cd
    if (temp->olist[x].resource_route_lvl = 2)
      set reply->rowlist[row_nbr].celllist[3].string_value = "Assay Level"
    endif
  else
    for (y = 1 to temp->olist[x].r_cnt)
      set row_nbr = row_nbr + 1
      set stat = alterlist(reply->rowlist,row_nbr)
      set stat = alterlist(reply->rowlist[row_nbr].celllist,10)
      set reply->rowlist[row_nbr].celllist[1].string_value = temp->olist[x].activity_type_disp
      set reply->rowlist[row_nbr].celllist[2].string_value = temp->olist[x].primary_mnemonic
      set reply->rowlist[row_nbr].celllist[6].string_value = temp->olist[x].dept_display_name
      set reply->rowlist[row_nbr].celllist[7].string_value = temp->olist[x].activity_subtype_disp
      set reply->rowlist[row_nbr].celllist[8].double_value = temp->olist[x].catalog_cd
      set reply->rowlist[row_nbr].celllist[3].string_value = temp->olist[x].rlist[y].service_resource_disp
      set reply->rowlist[row_nbr].celllist[4].string_value = cnvtstring(temp->olist[x].rlist[y].sequence)
      if (temp->olist[x].rlist[y].primary_ind = 1)
        set reply->rowlist[row_nbr].celllist[5].string_value = "X"
      else
        set reply->rowlist[row_nbr].celllist[5].string_value = " "
      endif
      set reply->rowlist[row_nbr].celllist[9].double_value = temp->olist[x].rlist[y].service_resource_cd
      set reply->rowlist[row_nbr].celllist[10].string_value = temp->olist[x].rlist[y].instr_bench_status
	  if (reply->rowlist[row_nbr].celllist[3].string_value = " ")		;002
	      set reply->rowlist[row_nbr].celllist[4].string_value = " "	;002
    	  set reply->rowlist[row_nbr].celllist[10].string_value = " "	;002
	  endif																;002
    endfor
  endif
endfor
 
 
 
 
#exit_script
if (reply->high_volume_flag in (1,2))
  set reply->output_filename = build("gl_work_rtg_audit.csv")
endif
 
if (request->output_filename > " ")
  execute bed_rpt_file
endif
 
 
end go

;Generated by GNU enscript 1.6.4.
