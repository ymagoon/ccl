 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_excep_by_nurseunit/glb_rpt_excep_by_nurseunit.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_RPT_EXCEP.PRG
        Object name:            GLB_RPT_EXCEP
        Request #:              250110

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Produce an exceptions report showing
                                General Lab results that are exceptions
                                to the normal values.

        Tables read:            accession_order_r
                                assay_processing_r
                                code_value
                                container
                                data_map
                                discrete_task_assay
                                encounter
                                long_text
                                orders
                                order_comment
                                order_laboratory
                                perform_result
                                person
                                person_alias
                                profile_task_r
                                prsnl
                                resource_group
                                result
                                result_comment
                                result_event

        Tables updated:         none

        Executing from:         General Lab application

        Special Notes:          n/a

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 08/16/96 Newton Hughes        Initial Release                     *
;    *001 04/26/99 Chad Moats	        Removed joins to code_value table   *
;    *002 06/08/99 Gary Runde           Display org name and discharged     *
;    *003 08/30/99 Chris Heil           Format aliases using cnvtalias      *
;    *004 07/02/99 Laura Pott           Internationalization                *
; 	 *005 12/15/99 Jack Moore		    Merged I18n code from mod above into*
;	 *	  								production code.				    *
;	 *006 09/05/03 Craig Sumrall		changed cclsecloging to execute     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

             drop program GLB_RPT_EXCEP_BY_NURSEUNIT:dba go
             create program GLB_RPT_EXCEP_BY_NURSEUNIT:dba
execute cclseclogin 								;006
/****************************************************************************** Beginning of 04 Mod Block ***********/
;include i18n function declarations
%i cclsource:i18n_uar.inc
%i cclsource:pcs_format_age.inc
;initialize variable that will keep the handle to i18n data
set i18nHandle = 0   
;call uar_i18nlocalizationinit
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev) 

record captions
(
1 begin_dt = vc
1 end_dt = vc
1 title = vc
1 to_ = vc
1 unknown = vc
1 rpt = vc
1 dt = vc
1 dir = vc
1 by_ = vc
1 pg = vc
1 tm = vc
1 fac = vc
1 nurs = vc
1 pers_nm = vc
1 num = vc
1 ord_proc = vc
1 dr = vc
1 age_sex = vc
1 access = vc
1 loc = vc
1 coll = vc
1 results = vc
1 ver = vc
1 prov = vc
1 prior = vc
1 proced = vc
1 low = vc
1 high = vc
1 res = vc
1 tech_id = vc
1 dt2 = vc 
1 tm_ = vc
1 ord_cmnt = vc
1 ord_note = vc
1 rslt_cmnt = vc
1 rslt_note = vc
1 txt_rslt_nf = vc
1 txt_rslt =  vc
)

Set captions->tm_ = uar_i18ngetmessage(i18nHandle,"tm_","TIME")
Set captions->tm = uar_i18ngetmessage(i18nHandle,"tm","TIME:")
Set captions->dr = uar_i18ngetmessage(i18nHandle,"dr","DR.  ")
Set captions->begin_dt = uar_i18ngetmessage(i18nHandle,"begin",":00.00")
Set captions->end_dt = uar_i18ngetmessage(i18nHandle,"end_dt",":59.99")
Set captions->title = uar_i18ngetmessage(i18nHandle,"title","EXCEPTION REPORT")
Set captions->to_ = uar_i18ngetmessage(i18nHandle, "to_"," to  ")
Set captions->unknown = uar_i18ngetmessage(i18nHandle,"unknown","Unknown")
Set captions->rpt = uar_i18ngetmessage(i18nHandle,"rpt","REPORT:  GLB_RPT_EXCEP.PRG")
Set captions->dt = uar_i18ngetmessage(i18nHandle,"dt","DATE:")
Set captions->dir = uar_i18ngetmessage(i18nHandle,"dir","DIRECTORY:")
Set captions->by_ = uar_i18ngetmessage(i18nHandle,"by_", "  BY:")
Set captions->pg = uar_i18ngetmessage(i18nHandle,"pg","PAGE:")
Set captions->fac = uar_i18ngetmessage(i18nHandle,"fac","FACILITY:")
Set captions->nurs = uar_i18ngetmessage(i18nHandle, "nurs", "NURSE UNIT:")
Set captions->pers_nm = uar_i18ngetmessage(i18nHandle,"pers_nm", "PERSON NAME/")
Set captions->num = uar_i18ngetmessage(i18nHandle,"num", "NUMBER/")
Set captions->ord_proc = uar_i18ngetmessage(i18nHandle,"ord_proc","ORDERED PROC/")
Set captions->age_sex = uar_i18ngetmessage(i18nHandle,"age_sex", "AGE/SEX/")
Set captions->access = uar_i18ngetmessage(i18nHandle,"access", "ACCESSION #")
Set captions->loc = uar_i18ngetmessage(i18nHandle,"loc","LOCATION/")
Set captions->coll = uar_i18ngetmessage(i18nHandle,"coll","COLLECT DATE/TIME")
Set captions->results = uar_i18ngetmessage(i18nHandle,"results","RESULTS TO BE REVIEWED")
Set captions->ver = uar_i18ngetmessage(i18nHandle,"ver","VERIFIED")
Set captions->prov = uar_i18ngetmessage(i18nHandle,"prov", "PROVIDER")
Set captions->prior = uar_i18ngetmessage(i18nHandle,"prior","PRIORITY")
Set captions->proced = uar_i18ngetmessage(i18nHandle,"proced","PROCEDURE")
Set captions->low = uar_i18ngetmessage(i18nHandle,"low","LOW")
Set captions->high = uar_i18ngetmessage(i18nHandle,"high","HIGH")
Set captions->res = uar_i18ngetmessage(i18nHandle,"res","RESULT")
Set captions->tech_id = uar_i18ngetmessage(i18nHandle,"tech_id","TECH ID")
Set captions->dt2 = uar_i18ngetmessage(i18nHandle,"dt2","DATE")

Set captions->ord_cmnt = uar_i18ngetmessage(i18nHandle,"ord_cmnt"," Order Comment:")
Set captions->ord_note = uar_i18ngetmessage(i18nHandle,"ord_note"," Order Note:")
Set captions->txt_rslt = uar_i18ngetmessage(i18nHandle,"txt_rslt"," Text Result:")
Set captions->txt_rslt_nf = uar_i18ngetmessage(i18nHandle,"txt_rslt_nf","Textual Result Not Found")
Set captions->rslt_note = uar_i18ngetmessage(i18nHandle,"rslt_note"," Result Note:")
Set captions->rslt_cmnt = uar_i18ngetmessage(i18nHandle,"rslt_cmnt"," Result Comment:")
/****************************************************************************** End of 04 Mod Block ***********/

      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  dt_tm_begin                  = dq8
         1  dt_tm_end                    = dq8
         1  service_resource_cd          = f8
         1  printer_name                 = vc
         1  abnormal_results             = i2
         1  critical_results             = i2
         1  delta_checks                 = i2
         1  review_limit                 = i2
         1  converted_types              = i2
         1  blank_ref_ranges             = i2
         1  batch_selection              = vc
         1  output_dist                  = vc
         1  ops_date                     = dq8
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      (
%i cclsource:status_block.inc
      )

      /***********************************************************************
      * Internal Record Structures                                           *
      ***********************************************************************/
;hdp      record test_site
;hdp      (
;hdp         1  qual[*]
;hdp            2  service_resource_cd       = f8
;hdp            2  inst_cd                   = f8
;hdp            2  inst_disp                 = vc
;hdp            2  dept_cd                   = f8
;hdp            2  dept_disp                 = vc
;hdp            2  sect_cd                   = f8
;hdp            2  sect_disp                 = vc
;hdp            2  subsect_cd                = f8
;hdp            2  subsect_disp              = vc
;hdp            2  ts_cd                     = f8
;hdp            2  ts_disp                   = vc
;hdp      )

      record actvty_type
      (
         1  qual[*]
            2  glb_activity_type_cd      = f8
      )

      ;* Array of results that fall within the specified time frame and
      ;* which are verified or corrected.
      record perf_results
      (
         1  qual[*]
            2  result_id                 = f8
            2  perform_result_id         = f8
            2  service_resource_cd       = f8
            2  task_assay_cd             = f8
            2  detail_mnemonic           = vc
            2  order_id                  = f8
            2  catalog_cd                = f8
            2  drawn_dt_tm               = c12
            2  result_type_cd            = f8
            2  data_map_ind              = i2
            2  max_digits                = i4
            2  min_decimal_places        = i4
            2  min_digits                = i4
;hdp            2  inst_cd                   = f8
;hdp            2  inst_disp                 = vc
;hdp            2  dept_cd                   = f8
;hdp            2  dept_disp                 = vc
;hdp            2  sect_cd                   = f8
;hdp            2  sect_disp                 = vc
;hdp            2  subsect_cd                = f8
;hdp            2  subsect_disp              = vc
;hdp            2  ts_cd                     = f8
;hdp            2  ts_disp                   = vc
      )

      ;* Report display fields used to determine page breaks.
      record rpt
      (
;hdp         1  inst_disp                    = vc
;hdp         1  dept_disp                    = vc
;hdp         1  sect_disp                    = vc
;hdp         1  subsect_disp                 = vc
;hdp         1  ts_disp                      = vc
         1  facility_disp                = vc
         1  nurse_unit_disp              = vc
      )

%i cclsource:glb_rpt_subs.inc
      
      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set reply->status_data.status = "F"

         ;* Code Sets
         set CV_REQUIRED_RECS            = 28
         declare cv_cnt                  = i4
         set ALIAS_TYPE_CODESET          = 4
         set ALIAS_TYPE_MRN_CDF          = "MRN"
         declare alias_type_mrn_cd       = f8
         set ACTIVITY_TYPE_CODESET       = 106
         set ACTIVITY_TYPE_GLB_CDF       = "GLB" 
         set RESULT_TYPE_CODESET         = 289
         set RESULT_TYPE_ALPHA_CDF       = "2"
         set RESULT_TYPE_NUMERIC_CDF     = "3"
         set RESULT_TYPE_INTERP_CDF      = "4"
         set RESULT_TYPE_CALC_CDF        = "8"
         declare result_type_alpha_cd    = f8
         declare result_type_numeric_cd  = f8
         declare result_type_interp_cd   = f8
         declare result_type_calc_cd     = f8
         set RESULT_STATUS_CODESET       = 1901
         set RESULT_STATUS_PERFORMED_CDF = "PERFORMED"
         set RESULT_STATUS_OLD_PERF_CDF  = "OLDPERFORMED"
         set RESULT_STATUS_VERIFIED_CDF  = "VERIFIED"
         set RESULT_STATUS_OLD_VERF_CDF  = "OLDVERIFIED"
         set RESULT_STATUS_CORRECTED_CDF = "CORRECTED"
         set RESULT_STATUS_OLD_CORR_CDF  = "OLDCORRECTED"
         declare performed_cd            = f8
         declare oldperformed_cd         = f8
         declare verified_cd             = f8
         declare oldverified_cd          = f8
         declare corrected_cd            = f8
         declare oldcorrected_cd         = f8
         set RESULT_PRCSS_CODESET        = 1902
         set RESULT_PRCSS_ALP_ABNORMAL_CDF = "ALP_ABNORMAL"
         set RESULT_PRCSS_ALP_CRITICAL_CDF = "ALP_CRITICAL"
         set RESULT_PRCSS_ALP_REVIEW_CDF   = "ALP_REVIEW"
         set RESULT_PRCSS_NORMAL_HIGH_CDF  = "NORMAL_HIGH"
         set RESULT_PRCSS_NORMAL_LOW_CDF   = "NORMAL_LOW"
         set RESULT_PRCSS_CRITICAL_CDF     = "CRITICAL"
         set RESULT_PRCSS_REVIEW_CDF       = "REVIEW"
         set RESULT_PRCSS_DELTA_FAIL_CDF   = "DELTA_FAIL"
/*001...*/ set RESULT_PRCSS_LINEAR_CDF     = "LINEAR"
/*001...*/ set RESULT_PRCSS_FEASIBLE_CDF     = "FEASIBLE"
         declare alp_abnormal_cd         = f8
         declare alp_critical_cd         = f8
         declare alp_review_cd           = f8
         declare normal_high_cd          = f8
         declare normal_low_cd           = f8
         declare critical_cd             = f8
         declare review_cd               = f8
         declare delta_fail_cd           = f8
         set COMMENT_TYPE_CODESET        = 14
         set COMMENT_TYPE_ORD_COMMENT_CDF = "ORD COMMENT"
         set COMMENT_TYPE_ORD_NOTE_CDF    = "ORD NOTE"
         set COMMENT_TYPE_RES_COMMENT_CDF = "RES COMMENT"
         set COMMENT_TYPE_RES_NOTE_CDF    = "RES NOTE"
         declare order_comment_cd         = f8
         declare order_note_cd            = f8
         declare result_comment_cd        = f8
         declare result_note_cd           = f8
         set SERVICE_RESOURCE_TYPE_CODESET = 223
         set SERV_RES_INSTITUTION_CDF     = "INSTITUTION"
         set SERV_RES_DEPARTMENT_CDF      = "DEPARTMENT"
         set SERV_RES_SECTION_CDF         = "SECTION"
         set SERV_RES_SUBSECTION_CDF      = "SUBSECTION"
         declare serv_res_institution_cd  = f8
         declare serv_res_department_cd   = f8
         declare serv_res_section_cd      = f8
         declare serv_res_subsection_cd   = f8

         ;discharged information
         set DISCHARGED_CDF = "DISCHARGED"                             ;002
         declare discharged_cd = f8                                    ;002
         set stat = uar_Get_meaning_by_codeset(261, DISCHARGED_CDF,    ;002
                                1, discharged_cd)                      ;002

         ;* Operations
         declare batch_selection_cd       = f8

         set serv_res_level_flag          = 0
;hdp         set nbr_ts                       = 0
         set nbr_actvty_types             = 0
         set nbr_prs                      = 0
         set nbr_o_comments               = 0

         set resultflagstr = fillstring(10, " ")

         set i = 0         ; used to index report_data array
         set offset = 0    ; position within a report_data row to insert a
                           ; report item
         set hyphen_line = fillstring(125, "-")

         ;* Keep track of next row to put detail on, 
         ;* next row to put comment on
         set order_row = 0
         set detail_row = 0

      /***********************************************************************
      * Select needed code values                                            *
      ***********************************************************************/
         set cv_cnt = 0

         select into "nl:"
            cv.code_value

         from
            code_value cv

         where ((cv.code_set = ALIAS_TYPE_CODESET
               and cv.cdf_meaning = ALIAS_TYPE_MRN_CDF)
             or (cv.code_set = ACTIVITY_TYPE_CODESET
               and cv.cdf_meaning = ACTIVITY_TYPE_GLB_CDF)
             or (cv.code_set = RESULT_TYPE_CODESET)
             or (cv.code_set = RESULT_STATUS_CODESET)
             or (cv.code_set = RESULT_PRCSS_CODESET)
             or (cv.code_set = COMMENT_TYPE_CODESET
               and cv.cdf_meaning in ( COMMENT_TYPE_ORD_COMMENT_CDF,
                                       COMMENT_TYPE_ORD_NOTE_CDF,
                                       COMMENT_TYPE_RES_COMMENT_CDF,
                                       COMMENT_TYPE_RES_NOTE_CDF ))
             or (cv.code_set = SERVICE_RESOURCE_TYPE_CODESET
               and cv.cdf_meaning in ( SERV_RES_INSTITUTION_CDF,
                                       SERV_RES_DEPARTMENT_CDF,
                                       SERV_RES_SECTION_CDF,
                                       SERV_RES_SUBSECTION_CDF ))
             )
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         detail
            if (cv.code_set = ALIAS_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of ALIAS_TYPE_MRN_CDF:
                    alias_type_mrn_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = ACTIVITY_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of ACTIVITY_TYPE_GLB_CDF:
                    nbr_actvty_types = nbr_actvty_types + 1
                    stat = alterlist(actvty_type->qual, nbr_actvty_types)
                    actvty_type->qual[nbr_actvty_types].glb_activity_type_cd =
                      cv.code_value
                    ;* Make sure at least 1 GLB activity type exists.
                    if (nbr_actvty_types = 1)
                       cv_cnt = cv_cnt + 1
                    endif
               endcase
            endif
            if (cv.code_set = RESULT_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of RESULT_TYPE_ALPHA_CDF:
                    result_type_alpha_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_TYPE_NUMERIC_CDF:
                    result_type_numeric_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_TYPE_INTERP_CDF:
                    result_type_interp_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_TYPE_CALC_CDF:
                    result_type_calc_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = RESULT_STATUS_CODESET)
               case (cv.cdf_meaning)
                 of RESULT_STATUS_PERFORMED_CDF:
                    performed_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_OLD_PERF_CDF:
                    oldperformed_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_VERIFIED_CDF:
                    verified_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_OLD_VERF_CDF:
                    oldverified_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_CORRECTED_CDF:
                    corrected_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_OLD_CORR_CDF:
                    oldcorrected_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = RESULT_PRCSS_CODESET)
               case (cv.cdf_meaning)
                 of RESULT_PRCSS_ALP_ABNORMAL_CDF:
                    alp_abnormal_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_PRCSS_ALP_CRITICAL_CDF:
                    alp_critical_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_PRCSS_ALP_REVIEW_CDF:
                    alp_review_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_PRCSS_NORMAL_HIGH_CDF:
                    normal_high_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_PRCSS_NORMAL_LOW_CDF:
                    normal_low_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_PRCSS_CRITICAL_CDF:
                    critical_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_PRCSS_REVIEW_CDF:
                    review_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_PRCSS_DELTA_FAIL_CDF:
                    delta_fail_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = COMMENT_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of COMMENT_TYPE_ORD_COMMENT_CDF:
                    order_comment_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_ORD_NOTE_CDF:
                    order_note_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_RES_COMMENT_CDF:
                    result_comment_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_RES_NOTE_CDF:
                    result_note_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = SERVICE_RESOURCE_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of SERV_RES_INSTITUTION_CDF:
                    serv_res_institution_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_DEPARTMENT_CDF:
                    serv_res_department_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_SECTION_CDF:
                    serv_res_section_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_SUBSECTION_CDF:
                    serv_res_subsection_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif

         with
            nocounter

         ;* Verify that all required code value records were read.
         if (cv_cnt != CV_REQUIRED_RECS)
            go to Exit_Script
         endif

/***Debug***
         call echo("actvty_type array dump", 1)
         for (x = 1 to nbr_actvty_types)
            call echo(actvty_type->qual[x].glb_activity_type_cd, 1)
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Load operations parameter list                                       *
      ***********************************************************************/
         if (trim(request->batch_selection) > " ")
            set batch_selection_cd = cnvtreal(trim(request->batch_selection))
            set parm_string = fillstring(100, " ")
    
            select into "nl:"
              cv.code_value
            from
              code_value cv
            where cv.code_value = batch_selection_cd
            detail
               parm_string = trim(cv.definition)
            with
               nocounter
    
            if (curqual = 0)
               set reply->status_data->status = "Z"
               go to Exit_Script
            endif
    
            ;* Locate the individual parameters in parm_string 
            ;* and put them in the ops_params array.
            set ptr = 1
            set start_ptr = 1
            set param_idx = 1
            for (param_idx = 1 TO 3)
               set ptr = findstring(",", parm_string, start_ptr)
               if (ptr < 1)
                  set ptr = 100
               endif
               set parm_len = ptr - start_ptr
               set ops_params->qual[param_idx].param = 
                 trim(substring(start_ptr, value(parm_len), parm_string), 3)
               set start_ptr = ptr + 1
            endfor  
    
            ;* Use array of ops parameters to set request fields.
            set request->service_resource_cd = 
              cnvtreal(ops_params->qual[1].param)
            set request->printer_name = request->output_dist
;004            set todays_date = format(request->ops_date, "dd-mmm-yyyy;;d")
            set todays_date = format(request->ops_date, "@MEDIUMDATE4YR;;Q") 					;004
            set date_begin_string = concat(todays_date, " ", 
;004              trim(ops_params->qual[2].param, 3), ":00.00")
              trim(ops_params->qual[2].param, 3), begin_dt)								;004
            set date_end_string = concat(todays_date, " ", 
;004              trim(ops_params->qual[3].param, 3), ":59.99") 
              trim(ops_params->qual[3].param, 3), end_dt)								;004
            set request->dt_tm_begin = cnvtdatetime(date_begin_string)
            if (request->dt_tm_begin > request->ops_date)
               set request->dt_tm_begin = datetimeadd(request->dt_tm_begin, -1)
            endif
            set request->dt_tm_end = cnvtdatetime(date_end_string)
            if (request->dt_tm_end > request->ops_date)
               set request->dt_tm_end = datetimeadd(request->dt_tm_end, -1)
            endif
            if (request->dt_tm_begin > request->dt_tm_end)
               set request->dt_tm_begin = datetimeadd(request->dt_tm_begin, -1)
            endif    
         endif 
 
      /***********************************************************************
      * Determine if the service resource passed is a section, subsection,   *
      * or test site.  Note: Service resource of 0.0 means print activity    *
      * for all testing sites.                                               *
      ***********************************************************************/
;hdp         if (request->service_resource_cd = 0.0)
;hdp            set serv_res_level_flag = 3  ;* All Sections
;hdp         else
;hdp            select into "nl:"
;hdp               cv.code_value
;hdp            from
;hdp               code_value cv
;hdp            where cv.code_value = request->service_resource_cd
;hdp            detail      
;hdp               case (cv.cdf_meaning)
;hdp                 of "SECTION":
;hdp                    serv_res_level_flag = 2
;hdp                 of "SUBSECTION":
;hdp                    serv_res_level_flag = 1
;hdp                 else
;hdp                    serv_res_level_flag = 0
;hdp                    stat = alterlist(test_site->qual, 1)
;hdp                    test_site->qual[1].service_resource_cd =
;hdp                      request->service_resource_cd
;hdp                    nbr_ts = 1
;hdp               endcase
;hdp            with
;hdp              nocounter
;hdp   
;hdp            if (curqual = 0)
;hdp               set reply->status_data->status = "Z"
;hdp               go to Exit_Script
;hdp            endif
;hdp         endif

/***Debug***
         call echo(build("request->service_resource_cd = ",
           request->service_resource_cd))
         call echo(build("serv_res_level_flag = ", serv_res_level_flag))
***Debug***/

      /***********************************************************************
      * Load the testing sites associated with the service resource passed in*
      * based on its resource level.                                         *
      ***********************************************************************/
;hdp         if (serv_res_level_flag != 0)
;hdp            if (serv_res_level_flag = 1)  ;* Process subsection
;hdp               select into "nl:"
;hdp                  subsect.parent_service_resource_cd
;hdp               from
;hdp                  resource_group subsect
;hdp               where subsect.parent_service_resource_cd = 
;hdp                                          request->service_resource_cd
;hdp                 and subsect.resource_group_type_cd = serv_res_subsection_cd
;hdp               detail
;hdp                  nbr_ts = nbr_ts + 1
;hdp                  stat = alterlist(test_site->qual, nbr_ts)
;hdp                  test_site->qual[nbr_ts].service_resource_cd = 
;hdp                    subsect.child_service_resource_cd       
;hdp               with
;hdp                  nocounter        
;hdp            elseif (serv_res_level_flag = 2)  ;* Process section
;hdp               select into "nl:"
;hdp                  sect.parent_service_resource_cd,
;hdp                  subsect.parent_service_resource_cd
;hdp               from
;hdp                  resource_group sect,
;hdp                  resource_group subsect
;hdp               plan sect    where sect.resource_group_type_cd = 
;hdp                                            serv_res_section_cd
;hdp                              and sect.parent_service_resource_cd = 
;hdp                                            request->service_resource_cd
;hdp               join subsect where subsect.parent_service_resource_cd = 
;hdp                                            sect.child_service_resource_cd
;hdp                              and subsect.resource_group_type_cd = 
;hdp                                            serv_res_subsection_cd
;hdp               detail
;hdp                  nbr_ts = nbr_ts + 1
;hdp                  stat = alterlist(test_site->qual, nbr_ts)
;hdp                  test_site->qual[nbr_ts].service_resource_cd = 
;hdp                    subsect.child_service_resource_cd    
;hdp               with
;hdp                  nocounter
;hdp            elseif (serv_res_level_flag = 3)  ;* Process all sections
;hdp               ;* If no service resource was passed, load all test sites
;hdp               ;* under all sections.
;hdp               select into "nl:"
;hdp                  sect.parent_service_resource_cd,
;hdp                  subsect.parent_service_resource_cd
;hdp               from
;hdp                  resource_group sect,
;hdp                  resource_group subsect
;hdp               plan sect    where sect.resource_group_type_cd = 
;hdp                                            serv_res_section_cd
;hdp               join subsect where subsect.parent_service_resource_cd = 
;hdp                                            sect.child_service_resource_cd
;hdp                              and subsect.resource_group_type_cd = 
;hdp                                            serv_res_subsection_cd
;hdp               detail
;hdp                  nbr_ts = nbr_ts + 1
;hdp                  stat = alterlist(test_site->qual, nbr_ts)
;hdp                  test_site->qual[nbr_ts].service_resource_cd = 
;hdp                    subsect.child_service_resource_cd    
;hdp               with
;hdp                  nocounter
;hdp            endif
;hdp
;hdp            if (nbr_ts = 0)
;hdp               set reply->status_data->status = "Z"
;hdp               go to Exit_Script
;hdp            endif
;hdp         endif

      /***********************************************************************
      * Load the institution, department, section, subsection,and test site  *
      * names associated with each testing site.                             *
      ***********************************************************************/
;hdp         select into "nl:"
;hdp            d1.seq,
;hdp            cv_ts.display,
;hdp            d2.seq,
;hdp            subsect_exists = decode(subsect.seq, "Y", "N"),
;hdp            subsect.parent_service_resource_cd,
;hdp            subsect.child_service_resource_cd,
;hdp            cv_subsect.display,
;hdp            d3.seq,
;hdp            sect_exists = decode(sect.seq, "Y", "N"),
;hdp            sect.parent_service_resource_cd,
;hdp            sect.child_service_resource_cd,
;hdp            cv_sect.display,
;hdp            d4.seq,
;hdp            dept_exists = decode(dept.seq, "Y", "N"),
;hdp            dept.parent_service_resource_cd,
;hdp            dept.child_service_resource_cd,
;hdp            cv_dept.display,
;hdp            d5.seq,
;hdp            inst_exists = decode(inst.seq, "Y", "N"),
;hdp            inst.parent_service_resource_cd,
;hdp            inst.child_service_resource_cd,
;hdp            cv_inst.display
;hdp
;hdp         from
;hdp            (dummyt d1 with seq = value(nbr_ts)),
;hdp            code_value cv_ts,
;hdp            (dummyt d2 with seq = 1),
;hdp            resource_group subsect,
;hdp            code_value cv_subsect,
;hdp            (dummyt d3 with seq = 1),
;hdp            resource_group sect,
;hdp            code_value cv_sect,
;hdp            (dummyt d4 with seq = 1),
;hdp            resource_group dept,
;hdp            code_value cv_dept,
;hdp            (dummyt d5 with seq = 1),
;hdp            resource_group inst,
;hdp            code_value cv_inst
;hdp
;hdp         plan d1
;hdp         join cv_ts   where cv_ts.code_value = 
;hdp                               test_site->qual[d1.seq].service_resource_cd
;hdp         join d2      where d2.seq = 1
;hdp         join subsect where subsect.child_service_resource_cd =
;hdp                               test_site->qual[d1.seq].service_resource_cd
;hdp                        and subsect.resource_group_type_cd =
;hdp                               serv_res_subsection_cd
;hdp         join cv_subsect where cv_subsect.code_value = 
;hdp                               subsect.parent_service_resource_cd
;hdp         join d3      where d3.seq = 1
;hdp         join sect    where sect.child_service_resource_cd = 
;hdp                               subsect.parent_service_resource_cd
;hdp                        and sect.resource_group_type_cd =
;hdp                               serv_res_section_cd
;hdp         join cv_sect where cv_sect.code_value = sect.parent_service_resource_cd
;hdp         join d4      where d4.seq = 1
;hdp         join dept    where dept.child_service_resource_cd = 
;hdp                               sect.parent_service_resource_cd
;hdp                        and dept.resource_group_type_cd =
;hdp                               serv_res_department_cd
;hdp         join cv_dept where cv_dept.code_value = dept.parent_service_resource_cd
;hdp         join d5      where d5.seq = 1
;hdp         join inst    where inst.child_service_resource_cd = 
;hdp                               dept.parent_service_resource_cd
;hdp                        and inst.resource_group_type_cd =
;hdp                               serv_res_institution_cd
;hdp         join cv_inst where cv_inst.code_value = inst.parent_service_resource_cd
;hdp
;hdp         detail
;hdp            if (cv_ts.code_value > 0.0)
;hdp               test_site->qual[d1.seq].ts_cd = cv_ts.code_value
;hdp               test_site->qual[d1.seq].ts_disp =
;hdp                 trim(substring(1, 40, cv_ts.display), 3)
;hdp            else
;hdp               test_site->qual[d1.seq].ts_cd = 0.0
;hdp               test_site->qual[d1.seq].ts_disp = "Not Found"
;hdp            endif
;hdp            if (subsect_exists = "Y"
;hdp            and cv_subsect.code_value > 0.0)
;hdp               test_site->qual[d1.seq].subsect_cd = cv_subsect.code_value
;hdp               test_site->qual[d1.seq].subsect_disp = 
;hdp                 trim(substring(1, 40, cv_subsect.display), 3)
;hdp            else
;hdp               test_site->qual[d1.seq].subsect_cd = 0.0
;hdp               test_site->qual[d1.seq].subsect_disp = "Not Found"
;hdp            endif
;hdp            if (sect_exists = "Y"
;hdp            and cv_sect.code_value > 0.0)
;hdp               test_site->qual[d1.seq].sect_cd = cv_sect.code_value
;hdp               test_site->qual[d1.seq].sect_disp = 
;hdp                 trim(substring(1, 40, cv_sect.display), 3)
;hdp            else
;hdp               test_site->qual[d1.seq].sect_cd = 0.0
;hdp               test_site->qual[d1.seq].sect_disp = "Not Found"
;hdp            endif
;hdp            if (dept_exists = "Y"
;hdp            and cv_dept.code_value > 0.0)
;hdp               test_site->qual[d1.seq].dept_cd = cv_dept.code_value
;hdp               test_site->qual[d1.seq].dept_disp = 
;hdp                 trim(substring(1, 40, cv_dept.display), 3)
;hdp            else
;hdp               test_site->qual[d1.seq].dept_cd = 0.0
;hdp               test_site->qual[d1.seq].dept_disp = "Not Found"
;hdp            endif
;hdp            if (inst_exists = "Y"
;hdp            and cv_inst.code_value > 0.0)
;hdp               test_site->qual[d1.seq].inst_cd = cv_inst.code_value
;hdp               test_site->qual[d1.seq].inst_disp = 
;hdp                 trim(substring(1, 40, cv_inst.display), 3)
;hdp            else
;hdp               test_site->qual[d1.seq].inst_cd = 0.0
;hdp               test_site->qual[d1.seq].inst_disp = "Not Found"
;hdp            endif
;hdp
;hdp         with
;hdp            nocounter,
;hdp            outerjoin = d2,
;hdp            maxread(subsect, 1),
;hdp            outerjoin = d3,
;hdp            maxread(sect, 1),
;hdp            outerjoin = d4,
;hdp            maxread(dept, 1),
;hdp            outerjoin = d5,
;hdp            maxread(inst, 1)

/***Debug***
         call echo("test_site array dump", 1)
         for (x = 1 to nbr_ts)
            call echo(test_site->qual[x].service_resource_cd, 1)
            call echo(build("   Institution = ", test_site->qual[x].inst_disp))
            call echo(build("   Department = ", test_site->qual[x].dept_disp))
            call echo(build("   Section = ", test_site->qual[x].sect_disp))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_disp))
            call echo(build("   Test Site = ", test_site->qual[x].ts_disp))
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Load the perform_result records that qualify for the report.         *
      ***********************************************************************/
         select into "nl:"
            re.event_type_cd,
            re.event_dt_tm,
            pr.perform_result_id,
            pr.service_resource_cd,
            perfresultids = build(pr.result_id, pr.perform_result_id),
            norm_low_null = nullind(pr.normal_low),
            norm_high_null = nullind(pr.normal_high),
            norm_alpha_null = nullind(pr.normal_alpha),
            r.result_id,
            o.order_id,
            o.activity_type_cd,
            d_at.seq,
            dta.mnemonic,            
            apr.default_result_type_cd,
            c_exists = decode(c.seq, "Y", "N"),
;004            drawn_dttm = format(c.drawn_dt_tm, "ddmmmyy hhmm;;d")
            drawn_dttm = format(c.drawn_dt_tm, "@DATETIMECONDENSED;;Q")		;004

         from
;hdp            (dummyt d_ts with seq = value(nbr_ts)),
            result_event re,
            perform_result pr,
            result r,
            orders o,
            (dummyt d_at with seq = value(nbr_actvty_types)),
            discrete_task_assay dta,
            assay_processing_r apr,
            (dummyt d1 with seq = 1),
            container c

;hdp         plan d_ts
;hdp         join pr   where pr.service_resource_cd = 
;hdp                            test_site->qual[d_ts.seq].service_resource_cd
;hdp                     and pr.result_status_cd in (verified_cd, corrected_cd)
;hdp         plan re   where re.perform_result_id = pr.perform_result_id
;hdp                     and re.result_id = pr.result_id
;hdp                     and re.event_dt_tm between cnvtdatetime(request->dt_tm_begin) 
;hdp                                            and cnvtdatetime(request->dt_tm_end)
;hdp                     and re.event_type_cd in (verified_cd, corrected_cd)
         plan re   where re.event_dt_tm 
                     between cnvtdatetime(request->dt_tm_begin) 
                         and cnvtdatetime(request->dt_tm_end)
                     and re.event_type_cd in (verified_cd, corrected_cd)
         join pr   where pr.result_id = re.result_id
                     and pr.perform_result_id = re.perform_result_id
                     and pr.result_status_cd in (verified_cd, corrected_cd)
         join r    where r.result_id = pr.result_id
                     and r.result_status_cd in (verified_cd, corrected_cd)
         join o    where o.order_id = r.order_id
         join d_at where actvty_type->qual[d_at.seq].glb_activity_type_cd =
                           o.activity_type_cd
         join dta  where dta.task_assay_cd = r.task_assay_cd
         join apr  where apr.task_assay_cd = r.task_assay_cd
                     and apr.service_resource_cd = pr.service_resource_cd
         join d1   where d1.seq = 1
         join c    where c.container_id = pr.container_id
   
         order by
            perfresultids
   
         head report
            nbr_prs = 0

         head perfresultids
            if ((request->abnormal_results = 1
              and pr.normal_cd in ( normal_high_cd, normal_low_cd ))
            or (request->abnormal_results = 1
              and pr.normal_cd = alp_abnormal_cd)
            or (request->critical_results = 1
              and pr.critical_cd in ( critical_cd, alp_critical_cd ))
            or (request->delta_checks = 1
              and pr.delta_cd = delta_fail_cd)
            or (request->review_limit = 1
              and pr.review_cd = review_cd)
            or (request->converted_types = 1
              and apr.default_result_type_cd != pr.result_type_cd)
            or (request->blank_ref_ranges = 1
              and pr.result_type_cd in ( result_type_numeric_cd,
                                         result_type_calc_cd )
              and norm_low_null = 1
              and norm_high_null = 1)
            or (request->blank_ref_ranges = 1
              and pr.result_type_cd in ( result_type_alpha_cd,
                                         result_type_interp_cd )
              and norm_alpha_null = 1))
               nbr_prs = nbr_prs + 1
               if (mod(nbr_prs, 50) = 1)
                  stat = alterlist(perf_results->qual, nbr_prs + 50)
               endif
               perf_results->qual[nbr_prs].result_id = 
                 pr.result_id
               perf_results->qual[nbr_prs].perform_result_id = 
                 pr.perform_result_id                 
               perf_results->qual[nbr_prs].service_resource_cd = 
                 pr.service_resource_cd
               perf_results->qual[nbr_prs].task_assay_cd = 
                 r.task_assay_cd 
               perf_results->qual[nbr_prs].detail_mnemonic = 
                 dta.mnemonic
               perf_results->qual[nbr_prs].order_id = 
                 r.order_id
               perf_results->qual[nbr_prs].catalog_cd = 
                 r.catalog_cd
               if (c_exists = "Y")
                  perf_results->qual[nbr_prs].drawn_dt_tm = drawn_dttm
               else
                  perf_results->qual[nbr_prs].drawn_dt_tm = ""
               endif
               perf_results->qual[nbr_prs].result_type_cd = pr.result_type_cd
               perf_results->qual[nbr_prs].data_map_ind = 0
               perf_results->qual[nbr_prs].max_digits = 0
               perf_results->qual[nbr_prs].min_decimal_places = 0
               perf_results->qual[nbr_prs].min_digits = 0
;hdp               perf_results->qual[nbr_prs].inst_cd =
;hdp                 test_site->qual[d_ts.seq].inst_cd
;hdp               perf_results->qual[nbr_prs].inst_disp =
;hdp                 test_site->qual[d_ts.seq].inst_disp
;hdp               perf_results->qual[nbr_prs].dept_cd =
;hdp                 test_site->qual[d_ts.seq].dept_cd
;hdp               perf_results->qual[nbr_prs].dept_disp =
;hdp                 test_site->qual[d_ts.seq].dept_disp
;hdp               perf_results->qual[nbr_prs].sect_cd =
;hdp                 test_site->qual[d_ts.seq].sect_cd
;hdp               perf_results->qual[nbr_prs].sect_disp =
;hdp                 test_site->qual[d_ts.seq].sect_disp
;hdp               perf_results->qual[nbr_prs].subsect_cd =
;hdp                 test_site->qual[d_ts.seq].subsect_cd
;hdp               perf_results->qual[nbr_prs].subsect_disp =
;hdp                 test_site->qual[d_ts.seq].subsect_disp
;hdp               perf_results->qual[nbr_prs].ts_cd =
;hdp                 test_site->qual[d_ts.seq].ts_cd
;hdp               perf_results->qual[nbr_prs].ts_disp =
;hdp                 test_site->qual[d_ts.seq].ts_disp
            endif

         detail
            row+0     
   
         foot report
            stat = alterlist(perf_results->qual, nbr_prs)

         with
            nocounter,
            outerjoin = d1

/***Debug***
         call echo(build("nbr_prs = ", nbr_prs))
         if (nbr_prs > 0)
            call echo("      result_id   perform_result_id     order_id    task_assay_cd", 1)
            for (x = 1 to nbr_prs)
               call echo(x, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].result_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].perform_result_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].order_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].task_assay_cd, 1)
            endfor
            call echo(" ", 1)
         endif

***Debug***/

      /***********************************************************************
      * Load the data_map records for numeric results.                       *
      ***********************************************************************/
         if (nbr_prs = 0)
            set reply->status_data->status = "Z"
            go to Exit_Script
         endif

         select into "nl:"
            d.seq,
            d1.seq,
            data_map_resource_exists = decode(dm.seq, "Y", "N"),
            dm.service_resource_cd,
            dm.task_assay_cd,
            dm.data_map_type_flag,
            dm.max_digits,
            dm.min_decimal_places,
            dm.min_digits,
            d2.seq,
            data_map_group_exists = decode(dmg.seq, "Y", "N"),
            dmg.service_resource_cd,
            dmg.task_assay_cd,
            dmg.data_map_type_flag,
            dmg.max_digits,
            dmg.min_decimal_places,
            dmg.min_digits

         from
            (dummyt d with seq = value(nbr_prs)),
            dummyt d1,
            data_map dm,
            dummyt d2,
            data_map dmg

         plan d    where perf_results->qual[d.seq].result_type_cd in
                       (result_type_numeric_cd, result_type_calc_cd)
         join d1   where d1.seq = 1
         join dm   where dm.service_resource_cd = perf_results->qual[d.seq]
                       .service_resource_cd
                     and dm.task_assay_cd = perf_results->qual[d.seq]
                       .task_assay_cd
                     and dm.data_map_type_flag = 0
                     and dm.active_ind = 1
         join d2   where d2.seq = 1
         join dmg  where dmg.service_resource_cd = 0.0
                     and dmg.task_assay_cd = perf_results->qual[d.seq]
                       .task_assay_cd
                     and dmg.data_map_type_flag = 0
                     and dmg.active_ind = 1

         head report
            cnt = 0

         head d.seq
            cnt = d.seq

         detail
            if (data_map_resource_exists = "Y"
            and perf_results->qual[cnt].data_map_ind = 0)
               perf_results->qual[cnt].data_map_ind = 1
               perf_results->qual[cnt].max_digits = dm.max_digits
               perf_results->qual[cnt].min_decimal_places = 
                 dm.min_decimal_places
               perf_results->qual[cnt].min_digits = dm.min_digits
            elseif (data_map_group_exists = "Y"
            and perf_results->qual[cnt].data_map_ind = 0)
               perf_results->qual[cnt].data_map_ind = 1
               perf_results->qual[cnt].max_digits = dmg.max_digits
               perf_results->qual[cnt].min_decimal_places = 
                 dmg.min_decimal_places
               perf_results->qual[cnt].min_digits = dmg.min_digits
            endif

         foot d.seq
            ;* If no data_map rec found, set default map values
            if (perf_results->qual[cnt].data_map_ind = 0)
               perf_results->qual[cnt].data_map_ind = 1
               perf_results->qual[cnt].max_digits = 8
               perf_results->qual[cnt].min_decimal_places = 0
               perf_results->qual[cnt].min_digits = 1
            endif

         with
            nocounter,
            outerjoin = d1,
            dontcare = dm,
            outerjoin = d2,
            dontcare = dmg

      /***********************************************************************
      * Load the most recent chartable and non-chartable order comments.     *
      ***********************************************************************/
         if (nbr_prs = 0)
            set reply->status_data->status = "Z"
            go to Exit_Script
         endif

         ;* Initialize order comment array
         select into "nl:"
            d.seq,
            ord_id = perf_results->qual[d.seq].order_id

         from
            (dummyt d with seq = value(nbr_prs))

         plan d

         order by
            ord_id

         head ord_id
            nbr_o_comments = nbr_o_comments + 1
            if (mod(nbr_o_comments, 20) = 1 and nbr_o_comments > 20)
               stat = alter(o_comments->qual, nbr_o_comments + 20)
            endif
            o_comments->qual[nbr_o_comments].order_id = ord_id
            o_comments->qual[nbr_o_comments].comment_exists = "N"
            o_comments->qual[nbr_o_comments].note_exists = "N"

         detail
            row+0

         with
            nocounter

/***Debug***
         call echo(build("nbr_o_comments = ", nbr_o_comments))
         if (nbr_o_comments > 0)
            call echo("o_comments array dump", 1)
            for (x = 1 to nbr_o_comments)
               call echo(build("Order id = ", o_comments->qual[x].order_id))
            endfor
            call echo(" ", 1)
         endif
***Debug***/

         ;* Load order comments, if any exists
         select into "nl:"
            d1.seq,
            d2.seq,
            oc_exists = decode(oc.seq, "Y", "N"),
            oc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_o_comments)),
            (dummyt d2 with seq = 1),
            order_comment oc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join oc where oc.order_id = o_comments->qual[d1.seq].order_id
                   and oc.comment_type_cd = order_comment_cd
         join lt where lt.long_text_id = oc.long_text_id
   
         order by
            d1.seq,
            oc.action_sequence desc
   
         head d1.seq
            if (oc_exists = "Y")
               o_comments->qual[d1.seq].comment_exists = "Y"
               o_comments->qual[d1.seq].comment_text = lt.long_text
            endif
   
         detail
            row+0
   
         with
            nocounter,
            outerjoin = d2

         ;* Load order notes, if any exists
         select into "nl:"
            d1.seq,
            d2.seq,
            oc_exists = decode(oc.seq, "Y", "N"),
            oc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_o_comments)),
            (dummyt d2 with seq = 1),
            order_comment oc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join oc where oc.order_id = o_comments->qual[d1.seq].order_id
                   and oc.comment_type_cd = order_note_cd
         join lt where lt.long_text_id = oc.long_text_id
   
         order by
            d1.seq,
            oc.action_sequence desc
   
         head d1.seq
            if (oc_exists = "Y")
               o_comments->qual[d1.seq].note_exists = "Y"
               o_comments->qual[d1.seq].note_text = lt.long_text
            endif
   
         detail
            row+0
   
         with
            nocounter,
            outerjoin = d2

      /***********************************************************************
      * Load the most recent chartable and non-chartable result comments.    *
      ***********************************************************************/
         set stat = alter(r_comments->qual, nbr_prs)

         ;* Load result comments
         select into "nl:"
            d1.seq,
            d2.seq,
            rc_exists = decode(rc.seq, "Y", "N"),
            rc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_prs)),
            (dummyt d2 with seq = 1),
            result_comment rc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join rc where rc.result_id = perf_results->qual[d1.seq].result_id
                   and rc.comment_type_cd = result_comment_cd
         join lt where lt.long_text_id = rc.long_text_id
   
         order by
            d1.seq,
            rc.action_sequence desc
   
         head d1.seq
            r_comments->qual[d1.seq].result_id = 
              perf_results->qual[d1.seq].result_id
            if (rc_exists = "Y")
               r_comments->qual[d1.seq].comment_exists = "Y"
               r_comments->qual[d1.seq].comment_text = lt.long_text
            else
               r_comments->qual[d1.seq].comment_exists = "N"
            endif
            r_comments->qual[d1.seq].note_exists = "N"
   
         detail
            row+0
   
         with
            nocounter,
            outerjoin = d2
   
         ;* Load result footnotes
         select into "nl:"
            d1.seq,
            d2.seq,
            rc_exists = decode(rc.seq, "Y", "N"),
            rc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_prs)),
            (dummyt d2 with seq = 1),
            result_comment rc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join rc where rc.result_id = perf_results->qual[d1.seq].result_id
                   and rc.comment_type_cd = result_note_cd
         join lt where lt.long_text_id = rc.long_text_id
         
         order by 
            d1.seq, 
            rc.action_sequence desc
         
         head d1.seq
            if (rc_exists = "Y")
               r_comments->qual[d1.seq].note_exists = "Y"
               r_comments->qual[d1.seq].note_text = lt.long_text
            endif
         
         detail
            row+0
         
         with
           nocounter,
           outerjoin = d2
    
         if (curqual = 0)
            go to Exit_Script
         endif

      /***********************************************************************
      * Print report                                                         *
      ***********************************************************************/
      #Print_Report
;004         set title_text = "EXCEPTION REPORT"
         set title_text = captions->title											;004
;004         set begin_date = format(request->dt_tm_begin, "ddmmmyy hh:mm;;d")
         set begin_dat = format(request->dt_tm_begin, "@DATECONDENSED;;Q")				;004
         set begin_tm = format(request->dt_tm_begin, "@TIMENOSECONDS;;M")				;004

;004         set end_date = format(request->dt_tm_end, "ddmmmyy hh:mm;;d")
         set end_dat = format(request->dt_tm_end, "@DATECONDENSED;;Q")					;004
         set end_tm = format(request->dt_tm_end, "@TIMENOSECONDS;;M")					;004

;004         set report_date_range = concat(begin_date, " to ", end_date)
         set report_date_range = concat(begin_dat," ",begin_tm,Captions->to_," ", end_dat," ", end_tm) ;004

   
         select into trim(request->printer_name)
            d_pr.seq,
;hdp            serv_res_hier = if (serv_res_level_flag = 0
;hdp                            or  serv_res_level_flag = 3)
;hdp                               build(perf_results->qual[d_pr.seq].inst_cd,
;hdp                                     perf_results->qual[d_pr.seq].dept_cd,
;hdp                                     perf_results->qual[d_pr.seq].sect_cd,
;hdp                                     perf_results->qual[d_pr.seq].subsect_cd,
;hdp                                     perf_results->qual[d_pr.seq].ts_cd)
;hdp                            elseif (serv_res_level_flag = 1)
;hdp                               build(perf_results->qual[d_pr.seq].inst_cd,
;hdp                                     perf_results->qual[d_pr.seq].dept_cd,
;hdp                                     perf_results->qual[d_pr.seq].sect_cd,
;hdp                                     perf_results->qual[d_pr.seq].subsect_cd)
;hdp                            elseif (serv_res_level_flag = 2)
;hdp                               build(perf_results->qual[d_pr.seq].inst_cd,
;hdp                                     perf_results->qual[d_pr.seq].dept_cd,
;hdp                                     perf_results->qual[d_pr.seq].sect_cd)
;hdp                            endif,
            detail_mne = trim(substring(1, 11, perf_results->qual[d_pr.seq]
              .detail_mnemonic)),
            drawn_dttm = perf_results->qual[d_pr.seq].drawn_dt_tm,
            pr.perform_result_id,
            pr.result_status_cd,
            norm_low_null = nullind(pr.normal_low),
            norm_high_null = nullind(pr.normal_high),
            norm_alpha_null = nullind(pr.normal_alpha),
            pr.normal_low,
            pr.normal_high,
            pr.numeric_raw_value,
            alpha_result = trim(substring(1, 13, pr.result_value_alpha)),
            freetext_result = trim(substring(1, 15, pr.ascii_text)),
;004            date_result = format(pr.result_value_dt_tm, "mm/dd/yy;;d"),
            date_result = format(pr.result_value_dt_tm, "@SHORTDATE;;Q"), 					;004
            re.perform_result_id,
            re.event_sequence,
            re.event_dt_tm,
            re.event_type_cd,
;004            event_date = format(re.event_dt_tm, "ddmmmyy  hhmm;;d"),	
            event_date = format(re.event_dt_tm, "@DATETIMECONDENSED;;Q"),	;004
            lt.long_text_id,
            order_unique = build(o.catalog_cd, o.order_id),
            ord_mnem = trim(substring(1, 19, o.order_mnemonic)),
            person_unique = build(trim(p.name_full_formatted), p.person_id),
            short_name = trim(substring(1, 27, p.name_full_formatted)),
;001            nurse_hier = build(trim(cv_locfacility.display_key),
;001                         cv_locfacility.code_value,
;001                         trim(cv_locnurse.display_key),
;001                         cv_locnurse.code_value),
	    nurse_hier = build(trim(UAR_GET_CODE_DISPLAY(e.loc_facility_cd),3),
		         e.loc_facility_cd,
			 trim(UAR_GET_CODE_DISPLAY(e.loc_nurse_unit_cd),3),
			 e.loc_nurse_unit_cd),
            e.encntr_id,
            e.loc_facility_cd,
            e.loc_nurse_unit_cd,
            e.loc_room_cd,
            e.loc_bed_cd,
	    org.seq,				;002
            d_oc.seq,
            ptr.sequence,
            accn = concat(substring(8,2,aor.accession), "-",
                          substring(10,3,aor.accession), "-",
                          substring(13,6,aor.accession)),
            aor.accession,
            psex = substring(1, 7, UAR_GET_CODE_DISPLAY(p.sex_cd)),			;001
;001            psex = substring(1, 7, cv_sex.display),
;001            cv_locfacility.display,
;001            cv_locnurse.display,
;001            cv_locnurse.display_key,
;001            cv_locroom.display,
;001            cv_locbed.display,
;001            cv_type.seq,
	    revw_mean = trim(UAR_GET_CODE_DISPLAY(pr.review_cd),3),			;001
	    norm_mean = trim(UAR_GET_CODE_DISPLAY(pr.normal_cd),3),			;001
	    delta_mean = trim(UAR_GET_CODE_DISPLAY(pr.delta_cd),3),			;001
	    crit_mean = trim(UAR_GET_CODE_DISPLAY(pr.critical_cd), 3),			;001
	    linear_mean = trim(UAR_GET_CODE_DISPLAY(pr.linear_cd), 3),			;001
	    feasible_mean = trim(UAR_GET_CODE_DISPLAY(pr.feasible_cd), 3),		;001
	    result_type_mean = trim(UAR_GET_CODE_DISPLAY(pr.result_type_cd), 3),	;001
;004            doctor_name = concat("DR. ", substring(1, 23, p_doc.name_full_formatted)),
          doctor_name = concat(captions->dr, " ",substring(1, 23, p_doc.name_full_formatted)),			;004
;001            priority = substring(1, 19, cv_pri.display),
            priority = substring(1, 19, UAR_GET_CODE_DISPLAY(ol.report_priority_cd)),		;001
;001            cv_ts.display_key,
;001            testsite_disp = substring(1, 10, cv_ts.display),
            testsite_disp = substring(1, 10, UAR_GET_CODE_DISPLAY(pr.service_resource_cd)),	;001
            tech_name = substring(1, 7, pl.username),
            d_pa.seq,
            pa_exists = decode(pa.seq, "Y", "N"),
;003            pat_nbr = trim(substring(1, 27, pa.alias)),
            pat_nbr = trim(substring(1, 27, cnvtalias(pa.alias, pa.alias_pool_cd))),         ;003
;004            nowtime = format(curtime, "hh:mm;;m"),
            nowtime = format(curtime, "@TIMENOSECONDS;;m"),									;004
;004            nowdate = format(curdate, "mm/dd/yyyy;;d")
            nowdate = format(curdate, "@SHORTDATE4YR;;Q")									;004

         from
            (dummyt d_pr with seq = value(nbr_prs)),
            perform_result pr,
            result_event re,
	    organization org,		;002
            long_text lt,
            orders o,
            order_laboratory ol,
            person p,
            encounter e,
            (dummyt d_oc with seq = value(nbr_o_comments)),
            profile_task_r ptr,
            accession_order_r aor,
;001            code_value cv_sex,
;001            code_value cv_locfacility,
;001            code_value cv_locnurse,
;001            code_value cv_locroom,
;001            code_value cv_locbed,
;001            code_value cv_type,
;001            code_value cv_revw,
;001            code_value cv_norm,
;001            code_value cv_delta,
;001            code_value cv_crit,
            prsnl p_doc,
;001            code_value cv_pri,
;001            code_value cv_ts,
            prsnl pl,
            (dummyt d_pa with seq = 1),
            person_alias pa

         plan d_pr
         join pr
           where pr.perform_result_id = 
                    perf_results->qual[d_pr.seq].perform_result_id
             and pr.result_id = perf_results->qual[d_pr.seq].result_id
         join re
           where re.result_id = pr.result_id
             and re.perform_result_id = pr.perform_result_id
             and re.event_type_cd in ( verified_cd, corrected_cd )
         join lt
           where lt.long_text_id = pr.long_text_id
         join o
           where o.order_id = perf_results->qual[d_pr.seq].order_id
         join ol
           where ol.order_id = perf_results->qual[d_pr.seq].order_id
         join p
           where p.person_id = o.person_id
         join e
           where e.encntr_id = o.encntr_id
	 join org                                          ;002
	   where org.organization_id = e.organization_id    ;002
         join d_oc
           where o_comments->qual[d_oc.seq].order_id = o.order_id
         join ptr
           where ptr.catalog_cd = perf_results->qual[d_pr.seq].catalog_cd
             and ptr.task_assay_cd = 
                    perf_results->qual[d_pr.seq].task_assay_cd
         join aor
           where aor.order_id = perf_results->qual[d_pr.seq].order_id
;001         join cv_sex
;001           where cv_sex.code_value = p.sex_cd
;001         join cv_locfacility
;001           where cv_locfacility.code_value = e.loc_facility_cd
;001         join cv_locnurse
;001           where cv_locnurse.code_value = e.loc_nurse_unit_cd
;001         join cv_locroom
;001           where cv_locroom.code_value = e.loc_room_cd
;001         join cv_locbed
;001           where cv_locbed.code_value = e.loc_bed_cd
;001         join cv_type
;001           where cv_type.code_value = pr.result_type_cd
;001         join cv_revw
;001           where cv_revw.code_value = pr.review_cd
;001         join cv_norm
;001           where cv_norm.code_value = pr.normal_cd
;001         join cv_delta
;001           where cv_delta.code_value = pr.delta_cd
;001         join cv_crit
;001           where cv_crit.code_value = pr.critical_cd
         join p_doc
           where p_doc.person_id = o.last_update_provider_id
;001         join cv_pri
;001           where cv_pri.code_value = ol.report_priority_cd
;001         join cv_ts
;001           where cv_ts.code_value = pr.service_resource_cd
         join pl
           where pl.person_id = re.event_personnel_id
         join d_pa
           where d_pa.seq = 1
         join pa
           where pa.person_id = p.person_id
             and pa.person_alias_type_cd = alias_type_mrn_cd
   
         order by 
            nurse_hier,
;hdp            serv_res_hier,
            person_unique, 
            aor.accession, 
            order_unique, 
	    testsite_disp,							;001
;001            cv_ts.display_key,
            ptr.sequence,
            pr.result_id,
            pr.perform_result_id,
            re.event_sequence
          
         head report
%i cclsource:glb_rpt_macros.inc
   
            if (limit = 0)
               call clear_report_data(' ')
            endif
            ;* Initialize report variables
            first_time_yn = "Y"
;hdp            if (nbr_prs > 0)
;hdp               rpt->inst_disp = perf_results->qual[d_pr.seq].inst_disp
;hdp               rpt->dept_disp = perf_results->qual[d_pr.seq].dept_disp
;hdp               rpt->sect_disp = perf_results->qual[d_pr.seq].sect_disp
;hdp               rpt->subsect_disp = perf_results->qual[d_pr.seq].subsect_disp
;hdp               rpt->ts_disp = perf_results->qual[d_pr.seq].ts_disp
;hdp            else
;hdp               rpt->inst_disp = " "
;hdp               rpt->dept_disp = " "
;hdp               rpt->sect_disp = " "
;hdp               rpt->subsect_disp = " "
;hdp               rpt->ts_disp = " "
;hdp            endif

         head page
;hdp            call center(trim(rpt->inst_disp), 0, 125)
	    if (e.loc_facility_cd > 0.0)							;001
;001            if (cv_locfacility.code_value > 0.0)
               rpt->facility_disp = trim(UAR_GET_CODE_DISPLAY(e.loc_facility_cd),3)		;001
;001               rpt->facility_disp = cv_locfacility.display
            else
;004               rpt->facility_disp = "Unknown"
               rpt->facility_disp = captions->unknown									;004
            endif
	    if (e.loc_nurse_unit_cd > 0.0)							;001
;001            if (cv_locnurse.code_value > 0.0)
;001               rpt->nurse_unit_disp = cv_locnurse.display
               rpt->nurse_unit_disp = trim(UAR_GET_CODE_DISPLAY(e.loc_nurse_unit_cd),3)		;001
            else
;004               rpt->nurse_unit_disp = "Unknown"
               rpt->nurse_unit_disp = captions->unknown								;004
            endif
            call center(concat(trim(rpt->facility_disp), " / ",
              trim(rpt->nurse_unit_disp)), 0, 125)
;004            col 0, "REPORT:  GLB_RPT_EXCEP.PRG"
            col 0, captions->rpt 												;003
;004            col 109, "DATE:"
            col 109, captions->dt												;004
            col + 1, nowdate
            row + 1
;004            col 0, "DIRECTORY:"
            col 0, captions->dir												;004
;004            col 109, "TIME:"
            col 109, captions->tm												;004
            col + 1, nowtime
            row + 1
            call center(title_text, 0, 125)
;004            col 109, "  BY:"
            col 109, captions->by_												;004
            col + 1, curuser
            row + 1
            call center(report_date_range, 0, 125)
;004            col 109, "PAGE:"
            col 109, captions->pg												;004
            col + 1, curpage "####;l;i"
            row + 1
;004            col 0,  "FACILITY:"
            col 0,  captions->fac												;004
            col 14, rpt->facility_disp
            row + 1
;004            col 0,  "NURSE UNIT:"
            col 0,  captions->nurs												;004
            col 14, rpt->nurse_unit_disp
            row + 1
;hdp            col 0, "INSTITUTION:"
;hdp            col 14, rpt->inst_disp
;hdp            row + 1
;hdp            col 0, "DEPARTMENT:"
;hdp            col 14, rpt->dept_disp
;hdp            row + 1
;hdp            col 0, "SECTION:"
;hdp            col 14, rpt->sect_disp
;hdp            row + 1
;hdp            if (serv_res_level_flag in (0,1,3))
;hdp               col 0, "SUB SECTION:"
;hdp               col 14, rpt->subsect_disp
;hdp               row + 1
;hdp            endif
;hdp            if (serv_res_level_flag in (0,3))
;hdp               col 0, "TEST SITE:"
;hdp               col 14, rpt->ts_disp
;hdp               row + 1
;hdp            endif
            ;* Print column headers
            row + 1
;004            col 7, "PERSON NAME/"
            col 7, captions->pers_nm												;004
            row + 1
;004            col 9, "NUMBER/"
            col 9, captions->num													;004
;004            col 33, "ORDERED PROC/"
            col 33, captions->ord_proc												;004
            row + 1
;004            col 9, "AGE/SEX/"
            col 9, captions->age_sex												;004
;004            col 34, "ACCESSION #"
            col 34, captions->access												;004
            row + 1
;004            col 8, "LOCATION/"
            col 8, captions->loc													;004
;004            col 31, "COLLECT DATE/TIME"
            col 31, captions->coll													;004
;004            col 65, "RESULTS TO BE REVIEWED"
            col 65, captions->results												;004
;004            col 110, "VERIFIED"
            col 110, captions->ver 													;004
            row + 1
;004            col 9, "PROVIDER"
            col 9, captions->prov													;004
;004            col 35, "PRIORITY"
            col 35, captions->prior													;004
;004            col 52, "PROCEDURE"
            col 52, captions->proced												;004
;004            col 69, "LOW"
            col 69, captions->low													;004            
;004		col 78, "HIGH"
            col 78, captions->high													;004
;004            col 89, "RESULT"
            col 89, captions->res													;004            
;004		col 102, "TECH ID"
            col 102, captions->tech_id												;004
;004            col 113, "DATE"
            col 113, captions->dt2													;004
;004            col 121, "TIME"
            col 121, captions->tm_													;004 
            row + 1
            col 0, hyphen_line
            col 28, "  "
            col 49, "  "
            col 62, "  "
            col 72, "  "
            col 82, "  "
            col 100, "  "
            col 110, "  "
            col 119, "  "
            row + 1
   
;hdp         head serv_res_hier
         head nurse_hier
            if (first_time_yn = "N")
;hdp               rpt->inst_disp = perf_results->qual[d_pr.seq].inst_disp
;hdp               rpt->dept_disp = perf_results->qual[d_pr.seq].dept_disp
;hdp               rpt->sect_disp = perf_results->qual[d_pr.seq].sect_disp
;hdp               rpt->subsect_disp = perf_results->qual[d_pr.seq].subsect_disp
;hdp               rpt->ts_disp = perf_results->qual[d_pr.seq].ts_disp
               break
            endif
            first_time_yn = "N"

         head person_unique
            short_age = FormatAge(p.birth_dt_tm, p.deceased_dt_tm, "LABRPTAGE")
            call store_item(0, 1, short_name)   ; patient name
            if (pa_exists = "Y")
               call store_item(0, 2, pat_nbr)   ; patient number
            endif
            call store_item(0, 3, short_age)    ; patient age
;001            if (cv_sex.code_value > 0.0)
            if (p.sex_cd > 0.0)									;001
               call store_item(9, 3, psex)      ; patient sex
            endif
            ;* Patient facility location
            pat_fac = fillstring(20, " ")
            pat_nurse = fillstring(20, " ")
            fac_loc = fillstring(43, " ")
;001            if (cv_locfacility.code_value > 0.0)
            if (e.loc_facility_cd > 0.0)							;001
               pat_fac = substring(1, 20, trim(UAR_GET_CODE_DISPLAY(e.loc_facility_cd)))	;001
;001               pat_fac = substring(1, 20, trim(cv_locfacility.display))
            else
;004               pat_fac = "Unknown"
               pat_fac = captions->unknown									;004
            endif
;001            if (cv_locnurse.code_value > 0.0)
            if (e.loc_nurse_unit_cd > 0.0)							;001
               pat_nurse = substring(1, 20, trim(UAR_GET_CODE_DISPLAY(e.loc_nurse_unit_cd)))	;001
;001               pat_nurse = substring(1, 20, trim(cv_locnurse.display))
            else
;004               pat_nurse = "Unknown"
               pat_nurse = captions->unknown									;004
            endif
	    if (e.encntr_status_cd = discharged_cd)                     ;002 
		fac_loc = trim(org.org_name)                            ;002 
	    else                                                        ;002 
                fac_loc = concat(trim(pat_fac), " / ", trim(pat_nurse)) 
	    endif                                                       ;002 
            call store_item(0, 4, substring(1, 27, fac_loc))
            ;* Patient location
            pat_room = fillstring(20, " ")
            pat_bed = fillstring(20, " ")
            pat_loc = fillstring(43, " ")
;001            if (cv_locroom.code_value > 0.0)
            if (e.loc_room_cd > 0.0)								;001
               pat_room = substring(1, 20, trim(UAR_GET_CODE_DISPLAY(e.loc_room_cd)))		;001
;001               pat_room = substring(1, 20, trim(cv_locroom.display))
            else
;004               pat_room = "Unknown"
               pat_room = captions->unknown									;004
            endif
;001            if (cv_locbed.code_value > 0.0)
            if (e.loc_bed_cd > 0.0)								;001
               pat_bed = substring(1, 20, trim(UAR_GET_CODE_DISPLAY(e.loc_bed_cd)))		;001
;001               pat_bed = substring(1, 20, trim(cv_locbed.display))
            else
;004               pat_bed = "Unknown"
               pat_bed = captions->unknown									;004
            endif
	    if (e.encntr_status_cd = discharged_cd)                        ;002
		pat_loc = trim(uar_get_code_display(e.encntr_status_cd))   ;002
	    else                                                           ;002
               pat_loc = concat(trim(pat_room), " / ", trim(pat_bed))      ;002
	       if (pat_fac != org.org_name)                                ;002
		 pat_loc = concat(trim(pat_loc), " / ", trim(org.org_name)) ;002
	       endif                                                        ;002
	    endif                                                           ;002
            call store_item(0, 5, substring(1, 27, pat_loc))
;004            if (trim(doctor_name) != "DR.")				
		if (trim(doctor_name) != captions->dr)								;004
               call store_item(0, 6, doctor_name)  ; ordering physician
            endif
            order_row = 1
            detail_row = 1
   
         head order_unique
            ;* Start new order 2 lines following last detail of previous order.
            ;* Otherwise, start 1st detail of each order on 1st line of order.
            if (detail_row > order_row)
               detail_row = detail_row + 1
               order_row = detail_row
            else
               ;* Check for multiple orders per patient and add space
               if (order_row > 1)
                  order_row = order_row + 1
               endif
               detail_row = order_row
            endif
            ;* Store 1st detail line of current order
            save1stline = order_row
            offset = 30
            call store_item(offset, order_row, ord_mnem)
            order_row = order_row + 1
            call store_item(offset, order_row, accn)
            order_row = order_row + 1
            if (size(trim(drawn_dttm), 3) > 0)
               call store_item(offset, order_row, drawn_dttm)
               order_row = order_row + 1
            endif
            call store_item(offset, order_row, priority)
            order_row = order_row + 1
            ;* Print order comments, if any exist
            if (o_comments->qual[d_oc.seq].comment_exists = "Y")
               order_row = save1stline + 6
               offset = size(trim(ord_mnem), 3) + 4
               call store_item(4, order_row, ord_mnem)
;004               call store_item(offset, order_row, " Order Comment:")
               call store_item(offset, order_row, captions->ord_cmnt)		;004
               order_row = order_row + 1
               vcstring->text = o_comments->qual[d_oc.seq].comment_text
               order_row = store_varchar_item(order_row, 7, 41, 1)
            endif
            if (o_comments->qual[d_oc.seq].note_exists = "Y")
               if (o_comments->qual[d_oc.seq].comment_exists = "N")
                  order_row = save1stline + 6
               endif
               offset = size(trim(ord_mnem), 3) + 4
               call store_item(4, order_row, ord_mnem)
;004               call store_item(offset, order_row, " Order Note:")
               call store_item(offset, order_row, captions->ord_note)		;004
               order_row = order_row + 1
               vcstring->text = o_comments->qual[d_oc.seq].note_text
               order_row = store_varchar_item(order_row, 7, 41, 1)
            endif
   
;001         head cv_ts.display_key
         head testsite_disp							;001
            row+0
  
         head ptr.sequence
            row+0
   
         head pr.perform_result_id
            call store_item(51, detail_row, detail_mne)
            ;* Print result
            offset = 84
;001            if (cv_type.cdf_meaning = "1")                    ;Textual result
            if (result_type_mean = "1")                    ;Textual result	;001
               call store_item(offset, detail_row, " ")
;001            elseif (cv_type.cdf_meaning = "2")                ;Alpha result
            elseif (result_type_mean = "2")                ;Alpha result	;001
               if (norm_alpha_null = 0)
                  call store_item(64, detail_row, pr.normal_alpha)
               endif
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
;001            elseif (cv_type.cdf_meaning in ("3", "8"))        ;Numeric result
            elseif (result_type_mean in ("3", "8"))        ;Numeric result	;001
               arg_max_digits = perf_results->qual[d_pr.seq].max_digits
               arg_min_dec_places = perf_results->qual[d_pr.seq]
                 .min_decimal_places
               arg_min_digits = perf_results->qual[d_pr.seq].min_digits
               if (norm_low_null = 0)
                  arg_less_great_flag = 0
                  arg_raw_value = pr.normal_low
                  format_numeric_result
                  call store_item(64, detail_row, formatted->result_value)
               endif
               if (norm_high_null = 0)
                  arg_less_great_flag = 0
                  arg_raw_value = pr.normal_high
                  format_numeric_result
                  call store_item(74, detail_row, formatted->result_value)
               endif
               arg_less_great_flag = pr.less_great_flag
               arg_raw_value = pr.numeric_raw_value
               format_numeric_result
               call store_item(offset, detail_row, formatted->result_value)
               offset = offset + size(trim(formatted->result_value), 3)
;001            elseif (cv_type.cdf_meaning = "4")                ;Interp result
            elseif (result_type_mean = "4")                ;Interp result	;001
               if (norm_alpha_null = 0)
                  call store_item(64, detail_row, pr.normal_alpha)
               endif
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
;001            elseif (cv_type.cdf_meaning = "6")                ;Date result
            elseif (result_type_mean = "6")                ;Date result		;001
               call store_item(offset, detail_row, date_result)
               offset = offset + size(trim(date_result), 3)
;001            elseif (cv_type.cdf_meaning = "7")                ;Freetext result
            elseif (result_type_mean = "7")                ;Freetext result	;001
               call store_item(offset, detail_row, freetext_result)
               offset = offset + size(trim(freetext_result), 3)
            endif
            ;* Build a string of result flags
            resultflagstr = fillstring(10, " ")
            if (pr.result_status_cd in (corrected_cd, oldcorrected_cd))
               correction_flag = "Y"
            else 
               correction_flag = "N"
            endif
	    if (pr.normal_cd > 0.0							;001
;001            if (cv_norm.code_value > 0.0 
;001            and cv_norm.cdf_meaning in ( RESULT_PRCSS_NORMAL_HIGH_CDF,
            and norm_mean in ( RESULT_PRCSS_NORMAL_HIGH_CDF,				;001
                                         RESULT_PRCSS_NORMAL_LOW_CDF,
                                         RESULT_PRCSS_ALP_ABNORMAL_CDF ))
               cv_normflag = trim(UAR_GET_CODE_DISPLAY(pr.normal_cd),3)			;001
;001               cv_normflag = cv_norm.display
            else 
               cv_normflag = " " 
            endif
	    if (pr.critical_cd > 0.0							;001
;001            if (cv_crit.code_value > 0.0 
;001            and cv_crit.cdf_meaning in ( RESULT_PRCSS_CRITICAL_CDF,
            and crit_mean in ( RESULT_PRCSS_CRITICAL_CDF,				;001
                                         RESULT_PRCSS_ALP_CRITICAL_CDF ))
                                         RESULT_PRCSS_ALP_REVIEW_CDF,
               cv_critflag = trim(UAR_GET_CODE_DISPLAY(pr.critical_cd),3)		;001
;001               cv_critflag = cv_crit.display
            else 
               cv_critflag = " " 
            endif
            if (pr.review_cd > 0.0							;001
;001            if (cv_revw.code_value > 0.0
;001            and cv_revw.cdf_meaning in ( RESULT_PRCSS_REVIEW_CDF,
            and revw_mean in ( RESULT_PRCSS_REVIEW_CDF,					;001
                                         RESULT_PRCSS_ALP_REVIEW_CDF ))
               cv_revwflag = trim(UAR_GET_CODE_DISPLAY(pr.review_cd),3)			;001
;001               cv_revwflag = cv_revw.display
            else 
               cv_revwflag = " " 
            endif
	    if (pr.delta_cd > 0.0							;001
;001            if (cv_delta.code_value > 0.0 
;001            and cv_delta.cdf_meaning = RESULT_PRCSS_DELTA_FAIL_CDF)
            and delta_mean = RESULT_PRCSS_DELTA_FAIL_CDF)				;001
               cv_deltaflag = trim(UAR_GET_CODE_DISPLAY(pr.delta_cd),3)			;001
;001               cv_deltaflag = cv_delta.display
            else 
               cv_deltaflag = " " 
            endif
	    if (pr.linear_cd > 0.0							;001
            and linear_mean = RESULT_PRCSS_LINEAR_CDF)					;001
               cv_linflag = trim(UAR_GET_CODE_DISPLAY(pr.linear_cd),3)			;001
            else									;001
               cv_linflag = " "								;001 
            endif									;001
	    if (pr.feasible_cd > 0.0							;001
            and feasible_mean = RESULT_PRCSS_FEASIBLE_CDF)				;001
               cv_feasflag = trim(UAR_GET_CODE_DISPLAY(pr.feasible_cd),3)		;001
            else									;001
               cv_feasflag = " "							;001 
            endif									;001
            rc_exists = r_comments->qual[d_pr.seq].comment_exists
            rn_exists = r_comments->qual[d_pr.seq].note_exists
            resultflagstr = 
              bldresultflagstr(cv_normflag, cv_critflag, cv_revwflag, 
			       cv_linflag, cv_feasflag,			;001
                               cv_deltaflag, rc_exists, rn_exists, 
                               correction_flag)
            if (size(trim(resultflagstr), 3) > 0)
               call store_item(offset, detail_row, resultflagstr)
            endif
            ;* Print tech id, date, and time
            offset = 102
            call store_item(offset, detail_row, tech_name)
            offset = offset + 10
            call store_item(offset, detail_row, event_date)  ;Verify date
            detail_row = detail_row + 1
   
         detail
            row+0
   
         foot pr.perform_result_id
;001            if (cv_type.cdf_meaning = "1")  ;Textual result
            if (result_type_mean = "1")  ;Textual result		;001
               offset = 53
               detail_row = detail_row + 1
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
;004               call store_item(offset, detail_row, " Text Result:")
               call store_item(offset, detail_row, captions->txt_rslt)			;004
               detail_row = detail_row + 1
               if (pr.long_text_id > 0.0)
                  arg_text_in = fillstring(30000, " ")
                  arg_text_in = trim(lt.long_text)
                  rtf_to_ascii
                  vcstring->text = trim(text_out)
               else
;004                  vcstring->text = "Textual Result Not Found"
                  vcstring->text = captions->txt_rslt_nf					;004
               endif
               detail_row = store_varchar_item(detail_row, 56, 68, 1)
            endif
;001            if (cv_type.cdf_meaning = "4"   ;Textual interp result
            if (result_type_mean = "4"   ;Textual interp result		;001
            and pr.long_text_id > 0.0)
               offset = 53
               detail_row = detail_row + 1
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
;004               call store_item(offset, detail_row, " Text Result:")
               call store_item(offset, detail_row, captions->txt_rslt)			;004
               detail_row = detail_row + 1
               arg_text_in = fillstring(30000, " ")
               arg_text_in = trim(lt.long_text)
               rtf_to_ascii
               vcstring->text = trim(text_out)
               detail_row = store_varchar_item(detail_row, 56, 68, 1)
            endif
   
         foot ptr.sequence
            ;* Print result comment, if any exist
            if (r_comments->qual[d_pr.seq].comment_exists = "Y")
               offset = 53
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
;004               call store_item(offset, detail_row, " Result Comment:")
               call store_item(offset, detail_row, captions->rslt_cmnt)			;004
               detail_row = detail_row + 1
               vcstring->text = r_comments->qual[d_pr.seq].comment_text
               detail_row = store_varchar_item(detail_row, 56, 68, 1)
            endif
            ;* Print result footnote, if any exist
            if (r_comments->qual[d_pr.seq].note_exists = "Y")
               offset = 53
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
;004               call store_item(offset, detail_row, " Result Note:")
               call store_item(offset, detail_row, captions->rslt_note)			;004
               detail_row = detail_row + 1
               vcstring->text = r_comments->qual[d_pr.seq].note_text
               detail_row = store_varchar_item(detail_row, 56, 68, 1)
            endif
   
         foot order_unique
            ;* Determine the total number of lines for this order
            report_data->qual[save1stline].detailcount = 
              detail_row - save1stline + 1
   
         foot person_unique
            ;* Print out previous patient info and erase it from 
            ;* report_data array.
            print_report_data
            row + 1
   
         foot report
            ;* Print out last patient info and erase it from 
            ;* report_data array.
            print_report_data
            row + 2
;004            call center("##### END OF REPORT #####", 0, 125)
		call center(uar_i18ngetmessage(i18nHandle,"end",("##### END OF REPORT #####")), 0, 125)  		;004
   
         with
            nocounter,
            outerjoin = d_pa,
            dontcare = pa,
            maxread(pa, 1),
            nullreport


         if (nbr_prs = 0)
            set reply->status_data->status = "Z"
         else
            set reply->status_data->status = "S"
         endif
      
      #Exit_Script
         end
         go      

;Generated by GNU enscript 1.6.4.
