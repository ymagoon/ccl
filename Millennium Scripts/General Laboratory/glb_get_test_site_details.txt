 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_test_site_details/glb_get_test_site_details.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_GET_TEST_SITE_DETAILS.PRG
        Object name:            GLB_GET_TEST_SITE_DETAILS
        Request #:              257520

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Return all of the procedures for a given test
                                site.  If the test site is a group, all
                                procedures for the group of test sites are
                                returned.

        Tables read:            assay_processing_r

        Tables updated:         n/a

        Executing from:         General Lab qc reference build tool

        Special Notes:          n/a

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/15/96 Chad Moats           Initial Release                     *
;    *001 11/17/97 Hal Patchen          Add subsection level data map check *
;    *002 05/05/98 Hal Patchen          Verify subsection level data map    *
;    *                                  is associated with route test site  *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_TEST_SITE_DETAILS:dba go    
      create program GLB_GET_TEST_SITE_DETAILS:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                                       
         1 service_resource_cd  = f8
         1 lot_id               = f8
      ) 
*/
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      ( 
        1  nbr_assays                = i4
        1  assays[5]
           2  task_assay_cd          = f8
           2  mnemonic               = vc
           2  alpha_type_flag        = i2
           2  data_map_flag          = i2
           2  max_digits             = i2
           2  min_decimal_places     = i2
           2  min_digits             = i2
           2  qc_data_map_ind        = i2
           2  qc_max_digits          = i2
           2  qc_min_decimal_places  = i2
           2  qc_min_digits          = i2          
           2  manf_mean              = f8
           2  manf_std_dev           = f8
           2  manf_low               = f8
           2  manf_high              = f8
        1 status_data
           2  status                 = c1
           2  subeventstatus[1]
              3  OperationName       = c15
              3  OperationStatus     = c1
              3  TargetObjectName    = c15
              3  TargetObjectValue   = vc
      )

/********************************************************************/
/* Resource array                                                   */
/********************************************************************/

      record resc
      (
         1 nbr_resc                = i4
         1 resc_list[2]
           2 service_resource_cd   = f8
      )

     #Script
      set alpha_cd = 0.0
      set numeric_cd = 0.0
      set reply->status_data->status = "F"
      set SERV_RES_TYPE_CODESET       = 223                            ;002
      set SERV_RES_SUBSECTION_CDF     = "SUBSECTION"                   ;001
      declare serv_res_subsection_cd  = f8                             ;002
      set resc_cnt = 0
      set assay_cnt = 0
      set max_assays = 0
      set data_map_flag = 0
      set resc->nbr_resc = 0
      set resc->resc_list[1]->service_resource_cd = 
         request->service_resource_cd
      set detail_cnt = 0
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

/********************************************************************/
/* Select code value                                                */
/********************************************************************/
      SELECT into "nl:"                                                ;002
         cv.code_set,                                                  ;002
         cv.code_value                                                 ;002
      FROM                                                             ;002
         code_value cv                                                 ;002
      WHERE cv.code_set = SERV_RES_TYPE_CODESET                        ;002
        and cv.cdf_meaning = SERV_RES_SUBSECTION_CDF                   ;002
        and cv.active_ind = 1                                          ;002
        and cv.begin_effective_dt_tm <=                                ;002
                                  cnvtdatetime(curdate, curtime3)      ;002
        and cv.end_effective_dt_tm >=                                  ;002
                                  cnvtdatetime(curdate, curtime3)      ;002
      DETAIL                                                           ;002
         if (cv.code_set = SERV_RES_TYPE_CODESET)                      ;002
            case (cv.cdf_meaning)                                      ;002
              of SERV_RES_SUBSECTION_CDF:                              ;002
                 serv_res_subsection_cd = cv.code_value                ;002
            endcase                                                    ;002
         endif                                                         ;002
      WITH nocounter                                                   ;002

/*******************************************************************/
/* Get code_value for alpha type.                                  */
/*******************************************************************/

       SELECT into "nl:"
          c.code_value
       FROM
          code_value c
       WHERE
          c.code_set = 289 and
          (c.cdf_meaning = "2" or 
           c.cdf_meaning = "3")
       DETAIL
          if (c.cdf_meaning = "2")
            alpha_cd = c.code_value
          else
            numeric_cd = c.code_value
          endif
       WITH
          nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

/********************************************************************/
/* Select resource list                                             */
/********************************************************************/
      SELECT into "nl:"
         r.child_service_resource_cd
      FROM
         resource_group r
      WHERE r.parent_service_resource_cd = request->service_resource_cd
        AND r.root_service_resource_cd = 0.0
      DETAIL
         resc_cnt = resc_cnt + 1
         if (mod(resc_cnt,2) = 1 and resc_cnt != 1)  
            stat = alter(resc->resc_list,resc_cnt + 2)  
         endif
         resc->resc_list[resc_cnt]->service_resource_cd =  
            r.child_service_resource_cd
         resc->nbr_resc = resc_cnt
      WITH
         nocounter              

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

      if (resc->nbr_resc = 0)
         set resc->nbr_resc = 1
      endif
      set stat = alter(resc->resc_list,resc->nbr_resc)
      set nbr_resources = size(resc->resc_list,5)

/********************************************************************/
/* Select assays for resource(s)                                    */
/********************************************************************/
      SELECT into "nl:"
         a.task_assay_cd,
         d.mnemonic, 
;001         dm0.service_resource_cd,
;001         dm0_exists = decode(dm0.seq, "Y","N"),
;001         dm1.service_resource_cd,
;001         dm1_exists = decode(dm1.seq, "Y","N"),
;001         dmg.service_resource_cd,
;001         dmg_exists = decode(dmg.seq, "Y","N"),
         arl.manf_mean,
         data_map_exists = decode(dm.seq, "Y", "N"),                   ;001
         dm.task_assay_cd,                                             ;001
         d_rg.seq,                                                     ;002
         rg_exists = decode(rg.seq, "Y", "N"),                         ;002
         rg.parent_service_resource_cd,                                ;002
         rg.child_service_resource_cd,                                 ;002
         rg.resource_group_type_cd,                                    ;002
         rg.root_service_resource_cd,                                  ;002
;002         cv_dm.cdf_meaning,                                            ;001
         arl_exists = decode(arl.seq, "Y","N")
     FROM 
         (dummyt d3 with seq = value(nbr_resources)),
         assay_processing_r a,
         discrete_task_assay d,
;001         data_map dm1,
;001         data_map dm0,
;001         data_map dmg,
         assay_resource_lot arl,
;001         (dummyt d5 with seq = 1),
;001         (dummyt d6 with seq = 1),
;001         (dummyt d7 with seq = 1),
         data_map dm,                                                  ;001
;002         code_value cv_dm,                                             ;001
         (dummyt d_rg with seq = 1),                                   ;002
         resource_group rg,                                            ;002
         (dummyt d_dm with seq = 1),                                   ;001
         (dummyt d8 with seq = 1)
      PLAN d3         
      JOIN a
         where a.service_resource_cd = resc->resc_list[d3.seq]->service_resource_cd 
         and (a.default_result_type_cd = alpha_cd or a.default_result_type_cd = numeric_cd)      
         and a.active_ind = 1
      JOIN d
         where d.task_assay_cd = a.task_assay_cd
;001       JOIN d5 where d5.seq = 1
;001       JOIN dm1
;001         where dm1.service_resource_cd = resc->resc_list[d3.seq]->service_resource_cd 
;001           and dm1.task_assay_cd = a.task_assay_cd
;001           and dm1.data_map_type_flag = 1
;001           and dm1.active_ind = 1
;001       JOIN d6 where d6.seq = 1
;001       JOIN dm0
;001         where dm0.service_resource_cd = resc->resc_list[d3.seq]->service_resource_cd 
;001           and dm0.task_assay_cd = a.task_assay_cd
;001           and dm0.data_map_type_flag = 0
;001           and dm0.active_ind = 1
;001       JOIN d7 where d7.seq = 1
;001       JOIN dmg
;001         where dmg.service_resource_cd = 0
;001           and dmg.task_assay_cd = a.task_assay_cd
;001           and dmg.data_map_type_flag = 0
;001           and dmg.active_ind = 1
       JOIN d8 where d8.seq = 1
       JOIN arl
           where arl.service_resource_cd = a.service_resource_cd and
           arl.task_assay_cd = a.task_assay_cd and
           arl.lot_id = request->lot_id and
           arl.active_ind = 1
       JOIN d_dm where d_dm.seq = 1                                    ;001
       JOIN dm   where dm.task_assay_cd = a.task_assay_cd              ;001
                   and dm.data_map_type_flag in (0, 1)                 ;001
                   and dm.active_ind = 1                               ;001
       JOIN d_rg where d_rg.seq = 1                                    ;002
       JOIN rg   where rg.parent_service_resource_cd =                 ;002
                          dm.service_resource_cd                       ;002
                   and rg.child_service_resource_cd =                  ;002
                          resc->resc_list[d3.seq].service_resource_cd  ;002
                   and rg.resource_group_type_cd =                     ;002
                          serv_res_subsection_cd                       ;002
                   and rg.root_service_resource_cd = 0.0               ;002
;002       JOIN cv_dm where cv_dm.code_value = dm.service_resource_cd      ;001
      ORDER BY a.task_assay_cd
      HEAD a.task_assay_cd
         assay_cnt = assay_cnt + 1
         if (mod(assay_cnt,5) = 1 and assay_cnt != 1)
            stat = alter(reply->assays, assay_cnt + 5)
         endif
         reply->nbr_assays = assay_cnt
         reply->assays[assay_cnt]->task_assay_cd = a.task_assay_cd
         reply->assays[assay_cnt]->mnemonic = trim(d.mnemonic)
;call echo(" ",1)
;call echo(reply->assays[assay_cnt]->mnemonic,1)
         reply->assays[assay_cnt]->alpha_type_flag =
                        if ((a.qc_result_type_cd = alpha_cd and a.qc_result_type_cd > 0) or
			    (a.default_result_type_cd = alpha_cd and a.qc_result_type_cd = 0))
                          1
                        else
                          NULL
                        endif
;001         if (dm1_exists = "Y") ;use data map
;001           reply->assays[assay_cnt]->data_map_flag = 1,
;001           reply->assays[assay_cnt]->qc_data_map_ind = 1,
;001           reply->assays[assay_cnt]->qc_max_digits = dm1.max_digits,
;001           reply->assays[assay_cnt]->qc_min_decimal_places = dm1.min_decimal_places,
;001           reply->assays[assay_cnt]->qc_min_digits = dm1.min_digits
;001;call echo("qc data map", 0)
;001;call echo(reply->assays[assay_cnt]->qc_max_digits,0)
;001;call echo(", ",0)
;001;call echo(reply->assays[assay_cnt]->qc_min_digits,0)
;001;call echo(", ",0)
;001;call echo(reply->assays[assay_cnt]->qc_min_decimal_places,1)
;001         endif
;001         if (dm0_exists = "Y")
;001           reply->assays[assay_cnt]->data_map_flag = 1,
;001           reply->assays[assay_cnt]->max_digits = dm0.max_digits,
;001           reply->assays[assay_cnt]->min_decimal_places = dm0.min_decimal_places,
;001           reply->assays[assay_cnt]->min_digits = dm0.min_digits
;001;call echo("reg data map", 0)
;001;call echo(reply->assays[assay_cnt]->max_digits,0)
;001;call echo(", ",0)
;001;call echo(reply->assays[assay_cnt]->min_digits,0)
;001;call echo(", ",0)
;001;call echo(reply->assays[assay_cnt]->min_decimal_places,1)
;001         elseif (dmg_exists = "Y")
;001           reply->assays[assay_cnt]->data_map_flag = 1,
;001           reply->assays[assay_cnt]->max_digits = dmg.max_digits,
;001           reply->assays[assay_cnt]->min_decimal_places = dmg.min_decimal_places,
;001           reply->assays[assay_cnt]->min_digits = dmg.min_digits
;001;call echo("group data map", 0)
;001;call echo(reply->assays[assay_cnt]->max_digits,0)
;001;call echo(", ",0)
;001;call echo(reply->assays[assay_cnt]->min_digits,0)
;001;call echo(", ",0)
;001;call echo(reply->assays[assay_cnt]->min_decimal_places,1)
;001         else
;001           reply->assays[assay_cnt]->data_map_flag = 1,
;001           reply->assays[assay_cnt]->max_digits = 6,
;001           reply->assays[assay_cnt]->min_decimal_places = 0,
;001           reply->assays[assay_cnt]->min_digits = 1
;001         endif
         if (arl_exists = "Y")
           reply->assays[assay_cnt]->manf_mean = arl.manf_mean,
           reply->assays[assay_cnt]->manf_std_dev = arl.manf_std_dev,
           reply->assays[assay_cnt]->manf_low = arl.manf_low,
           reply->assays[assay_cnt]->manf_high = arl.manf_high
         else
           reply->assays[assay_cnt]->manf_mean = 0,
           reply->assays[assay_cnt]->manf_std_dev = 0,
           reply->assays[assay_cnt]->manf_low = 0,
           reply->assays[assay_cnt]->manf_high = 0
         endif
         data_map_level = 0                                            ;001
         reply->assays[assay_cnt].data_map_flag = 1                    ;001
         reply->assays[assay_cnt].max_digits = 8                       ;001
         reply->assays[assay_cnt].min_digits = 1                       ;001
         reply->assays[assay_cnt].min_decimal_places = 0               ;001
         reply->assays[assay_cnt].qc_data_map_ind = 0                  ;001
      DETAIL
        detail_cnt = detail_cnt + 1
         if (data_map_exists = "Y")                                    ;001
            ;* Check for exact match on QC data map                    ;001
            if (reply->assays[assay_cnt].qc_data_map_ind = 0           ;001
            and dm.data_map_type_flag = 1                              ;001
            and dm.service_resource_cd > 0.0                           ;001
            and dm.service_resource_cd =                               ;001
              resc->resc_list[d3.seq].service_resource_cd)             ;001
               reply->assays[assay_cnt].data_map_flag = 1              ;001
               reply->assays[assay_cnt].qc_data_map_ind = 1            ;001
               reply->assays[assay_cnt].qc_max_digits = dm.max_digits  ;001
               reply->assays[assay_cnt].qc_min_digits = dm.min_digits  ;001
               reply->assays[assay_cnt].qc_min_decimal_places =        ;001
                 dm.min_decimal_places                                 ;001
            endif                                                      ;001
            ;* Check for exact match on data map                       ;001
            if (data_map_level <= 2                                    ;001
            and dm.data_map_type_flag = 0                              ;001
            and dm.service_resource_cd > 0.0                           ;001
            and dm.service_resource_cd =                               ;001
              resc->resc_list[d3.seq].service_resource_cd)             ;001
               data_map_level = 3                                      ;001
               reply->assays[assay_cnt].data_map_flag = 1              ;001
               reply->assays[assay_cnt].max_digits = dm.max_digits     ;001
               reply->assays[assay_cnt].min_digits = dm.min_digits     ;001
               reply->assays[assay_cnt].min_decimal_places =           ;001
                 dm.min_decimal_places                                 ;001
            endif                                                      ;001
            ;* Check for subsection level data map                     ;001
            if (data_map_level <= 1                                    ;001
            and dm.data_map_type_flag = 0                              ;001
            and dm.service_resource_cd > 0.0                           ;001
            and rg_exists = "Y"                                        ;002
            and rg.parent_service_resource_cd =                        ;002
                          dm.service_resource_cd                       ;002
            and rg.child_service_resource_cd =                         ;002
                          resc->resc_list[d3.seq].service_resource_cd) ;002
;002            and cv_dm.cdf_meaning = SERV_RES_SUBSECTION_CDF)           ;001
               data_map_level = 2                                      ;001
               reply->assays[assay_cnt].data_map_flag = 1              ;001
               reply->assays[assay_cnt].max_digits = dm.max_digits     ;001
               reply->assays[assay_cnt].min_digits = dm.min_digits     ;001
               reply->assays[assay_cnt].min_decimal_places =           ;001
                 dm.min_decimal_places                                 ;001
            endif                                                      ;001
            ;* Check for default all resources level data map          ;001
            if (data_map_level = 0                                     ;001
            and dm.data_map_type_flag = 0                              ;001
            and dm.service_resource_cd = 0.0)                          ;001
               data_map_level = 1                                      ;001
               reply->assays[assay_cnt].data_map_flag = 1              ;001
               reply->assays[assay_cnt].max_digits = dm.max_digits     ;001
               reply->assays[assay_cnt].min_digits = dm.min_digits     ;001
               reply->assays[assay_cnt].min_decimal_places =           ;001
                 dm.min_decimal_places                                 ;001
            endif                                                      ;001
         endif                                                         ;001
      WITH
;001         outerjoin = d5,
;001         dontcare = dm1,
;001         outerjoin = d6,
;001         dontcare = dm0,
;001         outerjoin = d7,
;001         dontcare = dmg,
         outerjoin = d8,
         dontcare = arl,                                               ;001
         outerjoin = d_dm,                                             ;001
         dontcare = dm,                                                ;001
;002         dontcare = cv_dm,                                             ;001
         outerjoin = d_rg,                                             ;002
         dontcare = rg,                                                ;002
         nocounter

      set stat = alter(reply->assays, assay_cnt)

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

      if (assay_cnt = 0)
        set reply->status_data->status = "Z"
      else
        set reply->status_data->status = "S"
      endif

      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script

END GO

;Generated by GNU enscript 1.6.4.
