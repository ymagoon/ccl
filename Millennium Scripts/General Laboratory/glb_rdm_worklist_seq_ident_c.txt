 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_worklist_seq_ident/glb_rdm_worklist_seq_ident_c.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-2005 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:   glb_rdm_worklist_seq_ident_c.prg
        Object name:        glb_rdm_worklist_seq_ident_c
        Request #:          N/A
 
        Product:            PathNet General Laboratory
        Product Team:       GLB
        HNA Version:        500
        CCL Version:        8.0
 
        Program purpose:  This will actually perform the insert or update using a range of 
                          data.
 
        Tables read       WORKLIST
                           
        Tables updated:   WORKLIST
  
        Executing from:   parent template
 
        Special Notes:    This is a readme

        Legend:             Variables should be prefixed with scope and type,
                            followed by an underscore and deobjective variable name.

                            Variable Scope Abbreviations    Variable Type Abbreviations
                            p - private                     n - i2
                            m - protect                     l - i2
                            g - public                      f - f8
                            u - persistobject               d - dq8
                                                            s - vc
                                                            c - c

                            Examples:
                            pn_status_ind = private, i2
                            gf_number     = public, f8

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *001 02/13/07 Paul Lessin          Initial Release 
;                                                                           *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop   program glb_rdm_worklist_seq_ident_c:dba go
create program glb_rdm_worklist_seq_ident_c:dba
 
%i cclsource:dm_readme_data.inc

;declare variables 
declare mf_min_id               = f8 with protect, noconstant(0.0)
declare mf_max_id               = f8 with protect, noconstant(0.0)
declare ms_child_info_domain_nm = vc with protect, noconstant("")
declare mlWklstCnt              = i4 with protect, noconstant(0)
declare mlPriorSeqIdent         = i4 with protect, noconstant(0)
declare mnRestartSeqInd         = i2 with protect, noconstant(0)
declare mnStat                  = i2 with protect, noconstant(0)
declare mlSeqCnt                = i4 with protect, noconstant(0)

;declare constants
declare lMAX_SEQ                = i4 with protect, constant(999999999)
declare sTEMPLATE               = vc with protect, constant("Template")
   
set ms_child_info_domain_nm = "PATHNET GLB README WRKSEQ"

;declare record structures
free set string_struct_c
record string_struct_c
(
  1  ms_err_msg = vc
)


;reads in the identifier and sequence for each order/accession
free set ordaccn_sequence
record ordaccn_sequence(
  1 qual[*]
    2 worklist_id = f8
    2 seq_ident   = i4
    2 sequence    = i4
)

;records the highs and lows for each worklist
free set worklist_sequence
record worklist_sequence(
  1 qual[*]
    2 worklist_id = f8
    2 start_nbr   = i4
    2 beg_seq     = i4
    2 end_seq     = i4
)

;set our parameters that were passed in
set mf_min_id = $1
set mf_max_id = $2

call echo(concat("MIN: ", cnvtstring(mf_min_id,32,2))) 
call echo(concat("MAX: ", cnvtstring(mf_max_id,32,2))) 

call echo("Processing...")
call echo("Updating worklist table")

; Recall order sequences
select into "nl:"
	wor.worklist_id
from
	worklist_order_r wor
plan wor where wor.worklist_id >= mf_min_id
           and wor.worklist_id <= mf_max_id
           and trim(wor.identifier) not in ("", sTEMPLATE)
head report
	mlSeqCnt = 0
detail
	mlSeqCnt = mlSeqCnt + 1
	if (size(ordaccn_sequence->qual, 5) < mlSeqCnt)
		mnStat = alterlist(ordaccn_sequence->qual, mlSeqCnt + 20)
	endif
	ordaccn_sequence->qual[mlSeqCnt].worklist_id = wor.worklist_id
	ordaccn_sequence->qual[mlSeqCnt].seq_ident   = cnvtint(wor.identifier)
	ordaccn_sequence->qual[mlSeqCnt].sequence    = wor.sequence
with nocounter

;Recall accession sequences
select into "nl:"
	wor.worklist_id
from
	worklist_accession_r war
plan war where war.worklist_id >= mf_min_id
           and war.worklist_id <= mf_max_id
           and trim(war.identifier) not in ("", sTEMPLATE)
detail
	mlSeqCnt = mlSeqCnt + 1
	if (size(ordaccn_sequence->qual, 5) < mlSeqCnt)
		mnStat = alterlist(ordaccn_sequence->qual, mlSeqCnt + 20)
	endif
	ordaccn_sequence->qual[mlSeqCnt].worklist_id = war.worklist_id
	ordaccn_sequence->qual[mlSeqCnt].seq_ident   = cnvtint(war.identifier)
	ordaccn_sequence->qual[mlSeqCnt].sequence    = war.sequence
with nocounter

set mnStat = alterlist(ordaccn_sequence->qual, mlSeqCnt)

;Set sequence ranges into local structure
if (mlSeqCnt > 0)
	select into "nl:"
		worklist_id = ordaccn_sequence->qual[d.seq].worklist_id,
		seq_ident = ordaccn_sequence->qual[d.seq].seq_ident,
		sequence = ordaccn_sequence->qual[d.seq].sequence
	from
		(dummyt d with seq = value(mlSeqCnt))
	plan d
	order by worklist_id, seq_ident
	head report
		mlWklstCnt = 0
	head worklist_id
		mlPriorSeqIdent = -1
		mnRestartSeqInd = 0
		mlWklstCnt = mlWklstCnt + 1
		if (size(worklist_sequence->qual, 5) < mlWklstCnt)
			mnStat = alterlist(worklist_sequence->qual, mlWklstCnt + 20)
		endif
		worklist_sequence->qual[mlWklstCnt].worklist_id = worklist_id
		worklist_sequence->qual[mlWklstCnt].beg_seq = seq_ident
	detail
	  if (mlPriorSeqIdent = seq_ident)
	  	mnRestartSeqInd = 1
	  endif
	  mlPriorSeqIdent = seq_ident
	  
		if (sequence = 1) 
			worklist_sequence->qual[mlWklstCnt].start_nbr = seq_ident
		endif
	foot worklist_id
		if (mnRestartSeqInd = 1)
			worklist_sequence->qual[mlWklstCnt].end_seq = seq_ident
		else
			worklist_sequence->qual[mlWklstCnt].end_seq = lMAX_SEQ
		endif	
	foot report
		mnStat = alterlist(worklist_sequence->qual, mlWklstCnt)
	with nocounter
endif

;Update database with sequence ranges
if (mlWklstCnt > 0)
	update into worklist w,
 		(dummyt d with seq = value(mlWklstCnt))
	set w.seq_ident_ind = 1,
			w.seq_ident_start_nbr = worklist_sequence->qual[d.seq].start_nbr,
			w.seq_ident_beg_range_nbr = worklist_sequence->qual[d.seq].beg_seq,
			w.seq_ident_end_range_nbr = worklist_sequence->qual[d.seq].end_seq,
			w.updt_task = reqinfo->updt_task,
			w.updt_cnt    = w.updt_cnt + 1,
			w.updt_dt_tm  = cnvtdatetime(curdate,curtime3)
	plan d
	join w where w.worklist_id = worklist_sequence->qual[d.seq].worklist_id
	with nocounter

    ;check for errors
    if ( error(string_struct_c->ms_err_msg, 0) != 0)
      ;call echo( concat("ERROR: ", string_struct_c->ms_err_msg))
      ;if we find one we have a rollback error and need to resize
      if( findstring("ORA-01555", string_struct_c->ms_err_msg) != 0 or
          findstring("ORA-01650", string_struct_c->ms_err_msg) != 0 or
          findstring("ORA-01562", string_struct_c->ms_err_msg) != 0 )
        ;caught a rollback segment error...not enough space to commit this many rows 
         ROLLBACK
         set mn_rollback_seg_failed = 1
         call echo("TRAPPED ROLLBACK SEGMENT ERROR......RESTRUCTURING README")
         set readme_data->message = string_struct_c->ms_err_msg
         go to EXIT_PROGRAM
      endif
      ;if we didn't find a rollback error, there was a different error and
      ;we need to fail the readme
      call echo("Processing FAILED...")
      call echo( concat('Failure during insert or update:', string_struct_c->ms_err_msg))
      set readme_data->status = 'F'
      set readme_data->message = concat('Failure during insert or update:', string_struct_c->ms_err_msg)
      set mn_child_failed = 1
      go to EXIT_PROGRAM
    endif 
     
    call echo("Processing...Completed")
endif

  ;update with the current maximum worklist_id checked.  This will become the new minimum to check
  update into dm_info di
  set di.info_number = mf_max_id,
      di.info_date = cnvtdatetime(curdate, curtime3)
  where di.info_domain = ms_child_info_domain_nm
  with nocounter  
  
  ;check for errors
  if ( error(string_struct_c->ms_err_msg, 0) != 0)
     set readme_data->status = 'F'
     
     set readme_data->message = concat('Failed trying to update DM_INFO table with  new minimum id for readme:', 
				cnvtstring(readme_data->readme_id,32,2), string_struct_c->ms_err_msg)
     set mn_child_failed = 1
     go to EXIT_PROGRAM
  endif 
  
  commit

#EXIT_PROGRAM
  ;free the record structurea
  free set string_struct_c
  free set worklist_sequence
  free set ordaccn_sequence
end
go

;Generated by GNU enscript 1.6.4.
