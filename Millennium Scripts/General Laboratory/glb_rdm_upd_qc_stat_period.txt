 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_upd_qc_stat_period/glb_rdm_upd_qc_stat_period.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

	Source file name:       glb_rdm_upd_qc_stat_period.prg
	Object name:            glb_rdm_upd_qc_stat_period
	Readme #:		            0

	Product:		            PathNet Gen Lab
	Product Team:		        PathNet Gen Lab
	HNA Version:            500
	CCL Version:            

	Program purpose:        This readme will correct the control_id on the
													qc_stat_period table with the control_id from the
													control_lot table.

	Tables read,		        TABLE_NAME		          METHOD (UNIQUE, RANGE, FULL)
	and access method:      --------------------    -----------------------------
													dm_info
				                  qc_stat_period,
				                  control_lot

	Tables updated:		      qc_stat_period,
													dm_info

	Executing from:         

	Special Notes:		      Each section should clearly identify what the purpose
				                  of that README step is.

	Run Occurance:		(select ONE of the following)
				-----------------------------
				[X] 1. RUN ONCE
				[ ] 2. RUN MANY

	ReadMe Category:	(select ONE of the following)
				-----------------------------
				[ ] 1. Data Load
				[X] 2. Data Conversion
				[ ] 3. Data Migration
				[ ] 4. File Copy

	Execution Time:		(select ONE of the following)
				------------------------------------
				[ ] 1. Uptime before uptime schema.
				[X] 2. Uptime after uptime schema.
				[X] 5. Uptime after downtime

	Exec. Justification:

  Parent Script:		N/A

  Check Script:		N/A

	Data file for import:

	Execution Duration:	(select ONE of the following)
				----------------------------------
				[ ] 1. Fixed Time
				[X] 2. Driver Table: qc_stat_period

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer		          Comment                   			    *
;    *--- -------- --------------------	----------------------------------- *
;    *001 10/11/05 Matt Schile   		    Initial Release.                    *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program glb_rdm_upd_qc_stat_period:dba go
create program glb_rdm_upd_qc_stat_period:dba

%i cclsource:dm_readme_data.inc
%i cclsource:pathnet_ocd_subroutines.inc

/****************************************************************************
* Declarations                                                              *
****************************************************************************/

declare sREADME_NAME            = vc with protect, constant("glb_rdm_upd_qc_stat_period")
declare sErrorMessage           = c132 with protect, noconstant(" ")
declare lErrorCode              = i4 with protect, noconstant(0)
declare sFailed                 = c1 with protect, noconstant("F")
declare dTempLotID              = f8 with protect, noconstant(0.0)
declare dTempQCStatID           = f8 with protect, noconstant(0.0)
declare lCount                  = i4 with protect, noconstant(0)
declare lCount2                 = i4 with protect, noconstant(0)
declare bContinue               = i2 with protect, noconstant(TRUE)
declare bDMInfoFound            = i2 with protect, noconstant(FALSE)

set readme_data->status         = "F"

free set qc_stat

record qc_stat
(
	1 qual[*]
		2 qc_stat_id = f8
		2 control_id = f8
)

;	select the qc_stat_id where the previous readme left off
select into "nl:"
from dm_info di
where di.info_domain = "Pathnet"
	and di.info_name = "glb_rdm_upd_qc_stat_period"
detail
	dTempQCStatID = di.info_number
	bDMInfoFound = TRUE
with nocounter

while(bContinue)

	set lCount = 0

	; select the rows with the incorrect control_id
	select into "nl:"
	from qc_stat_period qsp,
			 control_lot cl
	plan qsp
		where	qsp.qc_stat_id > dTempQCStatID
			and qsp.qc_result_type_flag = 0
	join cl
		where cl.lot_id = qsp.lot_id
			and cl.control_id != qsp.control_id
	order by qsp.qc_stat_id
	
	head report
		row +0
		
	detail
		lCount = lCount + 1

		if (lCount > size(qc_stat->qual, 5))
      		stat = alterlist(qc_stat->qual, lCount + 9)
    	endif
		
		qc_stat->qual[lCount].qc_stat_id = qsp.qc_stat_id
		qc_stat->qual[lCount].control_id = cl.control_id
		
	foot report
		dTempQCStatID = qsp.qc_stat_id

	with nocounter, maxrec = 500
	
	set stat = alterlist(qc_stat->qual, lCount)

	if(lCount != 0)
		; lock rows to be updated on qc_stat_period
		set lCount2 = 0
		
		select into "nl:"
		from qc_stat_period qsp
		where expand(lCount2, 1, value(size(qc_stat->qual, 5)), qsp.qc_stat_id, qc_stat->qual[lCount2].qc_stat_id)
		with forupdate(qsp), nocounter
		
		; update row on qc_stat_period
		if (curqual > 0)
	
	  	update into qc_stat_period qsp,
              	  (dummyt d with seq = value(size(qc_stat->qual, 5)))
              	 
	  	set qsp.control_id            = qc_stat->qual[d.seq].control_id, 
	      	qsp.updt_dt_tm            = cnvtdatetime(curdate, curtime3),
	      	qsp.updt_id               = reqinfo->updt_id,
	      	qsp.updt_task             = reqinfo->updt_task,
	      	qsp.updt_applctx          = reqinfo->updt_applctx,
	      	qsp.updt_cnt              = qsp.updt_cnt + 1
			plan d
  		join qsp where qsp.qc_stat_id = qc_stat->qual[d.seq].qc_stat_id	  
	  	with nocounter
	  
	  	; error handling
	  	set lErrorCode = error(sErrorMessage, 0)
	  	if (lErrorCode > 0)
	    	set sFailed = "T"
	    	set bContinue = FALSE
	    	rollback
	    	call logmsg ("Error updating into qc_stat_period.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
	    	call logmsg (sErrorMessage, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
	    	set readme_data->message = sErrorMessage
	    else
	    	commit
	  	endif	  	
		endif
	endif
	
	if(lCount < 500)
		set bContinue = FALSE
	endif

endwhile

if(sFailed = "T")
	go to exit_script
endif

; insert the last qc_stat_id checked into the dm_info table else update the row with the new qc_stat_id
if(bDMInfoFound = FALSE)
	insert into dm_info di
	set di.info_domain = "Pathnet",
			di.info_name = "glb_rdm_upd_qc_stat_period",
			di.info_number = dTempQCStatID,
			di.updt_dt_tm = cnvtdatetime(curdate, curtime3),
		  di.updt_task = reqinfo->updt_task,
		  di.info_date = cnvtdatetime(curdate, curtime3)
	with nocounter
else
	update into dm_info di
	set di.info_number = dTempQCStatID,
			di.updt_dt_tm = cnvtdatetime(curdate, curtime3),
		  di.updt_task = reqinfo->updt_task,
		  di.info_date = cnvtdatetime(curdate, curtime3),
		  di.updt_cnt = di.updt_cnt + 1 
	where di.info_domain = "Pathnet"
	  and di.info_name = "glb_rdm_upd_qc_stat_period"
	with nocounter
endif

; error handling
set lErrorCode = error(sErrorMessage, 0)
if (lErrorCode > 0)
	rollback
 	call logmsg ("Error updating into dm_info.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
 	call logmsg (sErrorMessage, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
 	set readme_data->message = sErrorMessage
else
	commit
endif

#exit_script

; if the readme failed, rollback the update, else, commit the update
if (sFailed = "T")
	set readme_data->status = "F"
	set readme_data->message = "Failed - Error occurred while updating qc_stat_period table"
else
	set readme_data->status = "S"
	set readme_data->message = "Success - All required qc_stat_period rows were updated successfully."
endif

free set qc_stat

call echorecord(readme_data)

execute dm_readme_status

end
go

;Generated by GNU enscript 1.6.4.
