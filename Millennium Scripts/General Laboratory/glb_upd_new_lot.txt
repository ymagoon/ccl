 ;;Solution_Test/script/PathNet -- Gen Lab/glb_upd_new_lot/glb_upd_new_lot.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_UPD_NEW_LOT.PRG
        Object name:            GLB_UPD_NEW_LOT
        Request #:              257533

        Product:                General Lab - Quality Control           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Copy procedure information from a previous
                                to a new lot

        Tables read:            n/a

        Tables updated:         assay_resource_lot
                                qc_alpha_response

        Executing from:         General Lab Build/Maintain QC Material

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 09/24/96 Chad Moats           Initial Release                     *
;     001 06/16/99 Gary Runde           Update resource_assay_control when  *
;                                       importing procs from other testsite *
;     002 02/23/00 Gary Runde           Don't import alpha resp if not changing testsites *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_UPD_NEW_LOT:dba go    
      create program GLB_UPD_NEW_LOT:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                                       
         1 control_id                 = f8
         1 prev_lot_id                = f8
         1 cur_lot_id                 = f8
         1 service_resource_cd        = f8
         1 from_service_resource_cd   = f8
         1 prev_lot_ind               = i2
      ) 
*/

/***********************************************************************
* Reply Record                                                         *
***********************************************************************/
     record reply
     ( 
%i cclsource:status_block.inc
      )


/********************************************************************/
/*  Assay_Resource_Lot Record                                       */
/********************************************************************/

      record proc
      (                                       
         1 procs[*]
           2 lot_id                = f8
           2 service_resource_cd   = f8
           2 task_assay_cd         = f8
           2 mean                  = f8
           2 clinical_std_dev      = f8
           2 statistical_std_dev   = f8
           2 abs_low               = f8
           2 abs_high              = f8
           2 manf_mean             = f8
           2 manf_std_dev          = f8
           2 manf_low              = f8
           2 manf_high             = f8
           2 rule_id               = f8
      ) 

      record alpha
      (                                       
         1 alphas[*]
           2 task_assay_cd         = f8
           2 service_resource_cd   = f8
           2 control_id            = f8
           2 nomenclature_id       = f8
           2 result_process_cd     = f8
           2 default_ind           = f8
      ) 


      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
     #Script
      set failed = "F"
      set reply->status_data->status = "F"

;      declare stat                    = i4
      declare p_cnt                   = i4
      declare a_cnt                   = i4
      declare hold_arl_id             = f8

      /***********************************************************************
      * Check to see if assay already on table                               *
      ***********************************************************************/
      if (request->prev_lot_ind = 1)
call echo("copy from prev lot", 1)
          select into "nl:"
            arl.lot_id
          from assay_resource_lot arl
          where arl.lot_id = request->prev_lot_id
            and (arl.service_resource_cd = request->service_resource_cd or request->service_resource_cd = 0)
            and arl.active_ind = 1
          detail
            p_cnt = p_cnt + 1
            if (mod(p_cnt,5) = 1)
              stat = alterlist(proc->procs,p_cnt + 5)
            endif   
            proc->procs[p_cnt].lot_id = arl.lot_id, 
            proc->procs[p_cnt].service_resource_cd = arl.service_resource_cd, 
            proc->procs[p_cnt].task_assay_cd = arl.task_assay_cd, 
            proc->procs[p_cnt].mean = arl.mean, 
            proc->procs[p_cnt].clinical_std_dev = arl.clinical_std_dev, 
            proc->procs[p_cnt].statistical_std_dev = arl.statistical_std_dev, 
            proc->procs[p_cnt].abs_low = arl.abs_low, 
            proc->procs[p_cnt].abs_high = arl.abs_high, 
            proc->procs[p_cnt].manf_mean = arl.manf_mean, 
            proc->procs[p_cnt].manf_std_dev = arl.manf_std_dev, 
            proc->procs[p_cnt].manf_low = arl.manf_low, 
            proc->procs[p_cnt].manf_high = arl.manf_high, 
            proc->procs[p_cnt].rule_id = arl.rule_id
          with 
            nocounter

          set request->from_service_resource_cd = request->service_resource_cd

      else
call echo("copy from another testsite", 1)
          select into "nl:"
            arl.lot_id,
            apr.task_assay_cd 
          from
            assay_resource_lot arl,
            assay_processing_r apr
          plan arl
          where arl.lot_id = request->cur_lot_id
            and arl.service_resource_cd = request->from_service_resource_cd
            and arl.active_ind = 1
          join apr
          where apr.task_assay_cd = arl.task_assay_cd
          and apr.service_resource_cd = request->service_resource_cd
          detail
            p_cnt = p_cnt + 1
            if (mod(p_cnt,5) = 1)
              stat = alterlist(proc->procs,p_cnt + 5)
            endif   
            proc->procs[p_cnt].lot_id = arl.lot_id, 
            proc->procs[p_cnt].service_resource_cd = request->service_resource_cd, 
            proc->procs[p_cnt].task_assay_cd = arl.task_assay_cd, 
            proc->procs[p_cnt].mean = arl.mean, 
            proc->procs[p_cnt].clinical_std_dev = arl.clinical_std_dev, 
            proc->procs[p_cnt].statistical_std_dev = arl.statistical_std_dev, 
            proc->procs[p_cnt].abs_low = arl.abs_low, 
            proc->procs[p_cnt].abs_high = arl.abs_high, 
            proc->procs[p_cnt].manf_mean = arl.manf_mean, 
            proc->procs[p_cnt].manf_std_dev = arl.manf_std_dev, 
            proc->procs[p_cnt].manf_low = arl.manf_low, 
            proc->procs[p_cnt].manf_high = arl.manf_high, 
            proc->procs[p_cnt].rule_id = arl.rule_id
          with 
            nocounter
      endif

          if (curqual = 0)
            go to none_to_update
          endif

      /***********************************************************************
      * If there are any active rows for this lot and ts then inactivate     *
      ***********************************************************************/
        UPDATE
          into assay_resource_lot arl
        SET
          arl.active_ind = 0, 
          arl.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
          arl.end_effective_dt_tm = cnvtdatetime(curdate,curtime3),
          arl.updt_cnt            = arl.updt_cnt + 1,
          arl.updt_task           = reqinfo->updt_task,
          arl.updt_id             = reqinfo->updt_id,
          arl.updt_applctx        = reqinfo->updt_applctx
        PLAN arl
          where arl.lot_id = request->cur_lot_id and
                arl.service_resource_cd = request->service_resource_cd and
                arl.active_ind = 1
        WITH
          nocounter

        
      /***********************************************************************
      * Insert assay on table                                                *
      ***********************************************************************/
        for (x = 1 to p_cnt)

        SELECT 
           into "nl:"
              y = seq(reference_seq,nextval) "##################;rp0"
        FROM 
           dual
        DETAIL
           hold_arl_id = cnvtreal(y)
        WITH
           format, counter

        insert
          into assay_resource_lot a
        set
          a.arl_id              = hold_arl_id,
          a.lot_id              = request->cur_lot_id,
          a.service_resource_cd = proc->procs[x].service_resource_cd,
          a.task_assay_cd       = proc->procs[x].task_assay_cd,
          a.mean                = proc->procs[x].mean,
          a.clinical_std_dev    = proc->procs[x].clinical_std_dev,
          a.statistical_std_dev = proc->procs[x].statistical_std_dev,
          a.abs_low             = proc->procs[x].abs_low,
          a.abs_high            = proc->procs[x].abs_high,
          a.manf_mean           = proc->procs[x].manf_mean,
          a.manf_std_dev        = proc->procs[x].manf_std_dev,
          a.manf_low            = proc->procs[x].manf_low,
          a.manf_high           = proc->procs[x].manf_high,
          a.rule_id             = proc->procs[x].rule_id,
          a.active_ind          = 1,
          a.beg_effective_dt_tm = cnvtdatetime(curdate,curtime3),
          a.end_effective_dt_tm = cnvtdatetime("31-DEC-2100 00:00:00"),
          a.updt_dt_tm          = cnvtdatetime(curdate,curtime),
          a.updt_cnt            = 0,
          a.updt_task           = reqinfo->updt_task,
          a.updt_id             = reqinfo->updt_id,
          a.updt_applctx        = reqinfo->updt_applctx
        plan a
        with 
          nocounter

        if (curqual = 0)
          go to insert_failed
        endif

/********************************************************************/  ;001 
/* Insert row into Resource_Assay_Control table if not existing     */  ;001
/********************************************************************/  ;001
	                                                    ;001  
        select into "nl:"                                   ;001
           rar.control_id,                                  ;001
           rar.service_resource_cd,                         ;001
           rar.task_assay_cd                                ;001
        from                                                ;001
           resource_assay_control rar                       ;001
        where                                               ;001
           rar.control_id = request->control_id and         ;001
           rar.service_resource_cd =  proc->procs[x].service_resource_cd and ;001
           rar.task_assay_cd = proc->procs[x].task_assay_cd ;001        
        with                                                ;001
           nocounter                                        ;001
                                                            ;001
        if (curqual = 0)                                    ;001
          insert                                            ;001
            into resource_assay_control rar2                ;001
          set                                               ;001
            rar2.control_id          = request->control_id, ;001
            rar2.service_resource_cd = proc->procs[x].service_resource_cd, ;001
            rar2.task_assay_cd       = proc->procs[x].task_assay_cd,       ;001
            rar2.updt_dt_tm          = cnvtdatetime(curdate,curtime),      ;001
            rar2.updt_cnt            = 0,                    ;001
            rar2.updt_task           = reqinfo->updt_task,   ;001
            rar2.updt_id             = reqinfo->updt_id,     ;001
            rar2.updt_applctx        = reqinfo->updt_applctx ;001
          with                                               ;001
            nocounter                                        ;001
        endif                                                ;001
        endfor                                               ;001        

      /***********************************************************************
      * Get Alpha Responses to import                                        *
      ***********************************************************************/
        
        ;if not copying from one service_resource_cd to another then do not do this because   ;002
        ;the alpha responses will already be there if the service_resource_cd is the same     ;002
        ;because the lot_id does not exist on the qc_alpha_responses table                    ;002
                                                                                              ;002
        if (request->from_service_resource_cd = request->service_resource_cd)                 ;002             
             go to exit_script                                                                ;002 
        endif                                                                                 ;002

        SELECT into "nl:"
          qar.task_assay_cd
        FROM
          qc_alpha_responses qar
        WHERE
          (qar.service_resource_cd = request->from_service_resource_cd 
           or request->from_service_resource_cd = 0) and
          qar.control_id = request->control_id
        DETAIL
          a_cnt = a_cnt + 1
          if (mod(a_cnt,5) = 1)
            stat = alterlist(alpha->alphas,a_cnt + 5)
          endif   
          alpha->alphas[a_cnt].task_assay_cd = qar.task_assay_cd
          alpha->alphas[a_cnt].service_resource_cd = request->service_resource_cd
          alpha->alphas[a_cnt].control_id = request->control_id
          alpha->alphas[a_cnt].nomenclature_id = qar.nomenclature_id
          alpha->alphas[a_cnt].result_process_cd = qar.result_process_cd
          alpha->alphas[a_cnt].default_ind = qar.default_ind
        WITH 
          nocounter

        if (a_cnt > 0)

        insert
          into qc_alpha_responses qar,
           (dummyt d1 with seq = value(a_cnt))
        set
          qar.task_assay_cd       = alpha->alphas[d1.seq].task_assay_cd,
          qar.service_resource_cd = alpha->alphas[d1.seq].service_resource_cd,
          qar.control_id          = alpha->alphas[d1.seq].control_id,
          qar.nomenclature_id     = alpha->alphas[d1.seq].nomenclature_id,
          qar.result_process_cd   = alpha->alphas[d1.seq].result_process_cd,
          qar.default_ind         = alpha->alphas[d1.seq].default_ind,    
          qar.updt_dt_tm          = cnvtdatetime(curdate,curtime),
          qar.updt_cnt            = 0,
          qar.updt_task           = reqinfo->updt_task,
          qar.updt_id             = reqinfo->updt_id,
          qar.updt_applctx        = reqinfo->updt_applctx
        plan d1
        join qar
          where qar.task_assay_cd = alpha->alphas[a_cnt].task_assay_cd
        with
          nocounter,
          outerjoin = d1
        
        if (curqual = 0)                                                       ;002
           set reply->status_data->subeventstatus[1]->operationname =          ;002
              "insert"     	                                                   ;002
           set reply->status_data->subeventstatus[1]->operationstatus =        ;002
              "F"          	                                                   ;002
           set reply->status_data->subeventstatus[1]->targetobjectname =       ;002
              "table" 	                                                       ;002
           set reply->status_data->subeventstatus[1]->targetObjectValue =      ;002
              "qc_alpha_responses table" 	                                   ;002
           set failed = "T" 	                                               ;002
        endif  	                                                               ;002

        endif      

        go to exit_script

/********************************************************************/ 
/* Executed if select to assay_resource_lot table fails             */
/********************************************************************/
     #none_to_update
      set reply->status_data->subeventstatus[1]->operationname = 
         "select"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "Z"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "assay_resource_lot table"
      set failed = "F"
      go to exit_script

/********************************************************************/ 
/* Executed if insert to assay_resource_lot table fails             */
/********************************************************************/
     #insert_failed
      set reply->status_data->subeventstatus[1]->operationname = 
         "insert"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "F"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "assay_resource_lot table"
      set failed = "T"
      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
         commit
      else
         set reply->status_data->status = "F"
         rollback
      endif

END
GO     
      

;Generated by GNU enscript 1.6.4.
