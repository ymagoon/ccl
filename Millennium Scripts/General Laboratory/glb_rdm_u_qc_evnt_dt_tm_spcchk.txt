 ;;Solution_Test/script/Database Architecture -- Access/glb_rdm_u_qc_evnt_dt_tm_spcchk/glb_rdm_u_qc_evnt_dt_tm_spcchk.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-2005 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:   GLB_RDM_U_QC_EVNT_DT_TM_SPCCHK.PRG
        OBJECT NAME:        GLB_RDM_U_QC_EVNT_DT_TM_SPCCHK
        Request #:          N/A
 
        Product:            Database Architecture
        Product Team:       Data Access Review
        HNA Version:        500
        CCL Version:        8.0
 
        Program purpose:  This is a readme space check for readme scripts
                          glb_rdm_upd_qc_event_dt_tm_p, glb_rdm_upd_qc_event_dt_tm_c,glb_rdm_upd_qc_event_dt_tm_cc
                          and glb_rdm_upd_qc_event_dt_tm_cc2
 
 
 
        Tables read:     dm_ocd_log, dm_info,dm2_user_tables, dm2_user_tab_cols,
                         dtableattr, dtableattrl
 
        Tables updated:  none
 
        Executing from:
 
        Special Notes:    This is a readme space check
                          It should be run before the readme parent script glb_rdm_upd_qc_event_dt_tm_p
                          and the process name is RDM_UPD_QC_EVENT_DT_TM PROCESS and is stored in the
                          dm_info.info_domain field
                          Since the QC_REULT AND QC_RESULT_EVENT table are simultaneously driver and target tables
                          and target tables have more restrictions, in this script they will be
                          considered target tables(this way it will satisfy both target and driver
                          restrictions)
 
        Legend:             Variables should be prefixed with scope and type,
                            followed by an underscore and objective variable name.
 
                            Variable Scope Abbreviations    Variable Type Abbreviations
                            p - private                     n - i2
                            m - protect                     l - i4
                            g - public                      f - f8
                            u - persistobject               d - dq8
                                                            s - vc
                                                            c - c
                            Record Abbreviations
                            mr - protect
                            pr - private etc
 
                            Examples:
                            pn_status_ind = private, i2
                            gf_number     = public, f8
 
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date      Engineer             Comment                            *
;    *--- --------- -------------------- ---------------------------------- *
;     001 06/18/06  MD013471             Initial Release                    *
;     002 06/30/09  MC014342             Modified to use the new stats views*
;                                        CR 1-3365955101                    *				
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
 
  drop program glb_rdm_u_qc_evnt_dt_tm_spcchk:dba go
create program glb_rdm_u_qc_evnt_dt_tm_spcchk:dba
 
%i cclsource:dm2_readme_spcchk.inc  ;inclusion of this will initialize record structure

declare ml_table_rowcnt1   = i4 with protect, noconstant(0)    ; number of rows for table 1
declare ml_table_rowcnt2   = i4 with protect, noconstant(0)    ; number of rows for table 2
declare ms_process_name    = vc with protect, noconstant("")   ; name of process
declare ms_prev_readme_id  = vc with protect, noconstant("")   ; previoues readme ID
declare mn_prev_instance   = i2 with protect, noconstant(0)    ; previous instance
declare ms_table_name1     = vc with protect, noconstant("")   ; name of table 1 to be updated
declare ms_table_name2     = vc with protect, noconstant("")   ; name of table 2 to be updated
declare ms_column_name     = vc with protect, noconstant("")   ; name of column to be updated, blank if an insert
declare ms_operation_init  = vc with protect, noconstant("")   ; initial of operation- U for update
declare ml_counter         = i4 with protect, noconstant(0)    ; number of child scripts ran before with Success
declare GF_FUDGE_FACTOR    = f8 with protect, noconstant(0.0)  ; fudge factor for the process
declare mn_prev_run_ind    = i2 with protect, noconstant(0)    ; this tells us if we have been reset or not
declare mn_target_table_cnt    = i2 with protect, noconstant(0)    ;counter of target tables
 
;declare structures
free record mr_table
record mr_table
(
  1 l_tlst_cnt = i4        ;number of tables
  1 tlst[*]
    2 s_table_name = vc    ;table name
    2 n_target_ind = i2    ;indicator, 1 if target table, 0 if driver table
    2 l_clst_cnt   = i4    ;number of columns
    2 clst[*]
      3 s_column_name = vc  ;column name
      3 n_target_ind  = i2  ;indicator, 1 if target column, 0 if driver column
) with protect
 
;declare subroutines
 
; determine whether columns and table exist in CCL dictionary
declare sbr_ccl_check(pl_tlst_cnt = i4) = i2
 
; determine whether columns and table exist on RDBMS level
declare sbr_rdbms_check(pl_tlst_cnt = i4) = i2
 
; add table
declare sbr_add_table(ps_tbl_name = vc, pn_tgt_ind = i2) = NULL
 
; add column
declare sbr_add_column(ps_column_name = vc,pn_tgt_ind = i2) = NULL
 
; assign a fudge factor for this process
set GF_FUDGE_FACTOR = 1.20
 
;these variables store a name for the readme process (this name will be
;associated with all the rows on the dm_info table that store the ranges),
; previous readme ID
; previous project instance
 
set ms_process_name   = "RDM_UPD_QC_EVENT_DT_TM PROCESS"
set ms_prev_readme_id = "2488"
set mn_prev_instance  = 3
 
;initial of operation/command- U for update on table
set ms_operation_init = "U"
 
; QC_RESULT_EVENT table is the target(1) table with column EVENT_DT_TM and
;                    the driver(0) table with column UPDT_DT_TM
;                  add table and columns to the record list
 
call sbr_add_table("QC_RESULT_EVENT",1)
call sbr_add_column("EVENT_DT_TM",1)
call sbr_add_column("UPDT_DT_TM",0)
 
; QC_RESULT table is the target(1) table with column EVENT_DT_TM and
;                    the driver(0) table
; the second parameter for column_name is set to 0, only bec is the same name as
; the one in table 1 and will avoid overwriting
 
call sbr_add_table("QC_RESULT",1)
call sbr_add_column("EVENT_DT_TM",0)
 
 
;we only want to check for success rows, if this readme doesn't have an OCD row
;this will set an indicator if it has ran before
if (validate(drs_spcchk_readme_data->orig_readme_id, 0) != 0)
  select into "nl:"
  from dm_ocd_log dol
  plan dol
 where dol.project_type     = "README"
   and dol.project_name     = cnvtstring(drs_spcchk_readme_data->orig_readme_id)
   and dol.project_instance = drs_spcchk_readme_data->orig_readme_instance
   and dol.status           = "SUCCESS"
   and dol.environment_id = (select di.info_number
                               from dm_info di
                              where di.info_domain = "DATA MANAGEMENT"
                                and di.info_name   = "DM_ENV_ID")
  head report
       mn_prev_run_ind = 1
  with nocounter
endif
 
;check to see if this readme had run before
;since the creation of the script is going to cause new readme numbers
;this query will see if the client has successfully ran the readme previously
;the project_name needs to be changed to the readme ID this is replacing.  That way
;if the client has already ran it, it will not run again
 
select into "nl:"
  from dm_ocd_log dol
  plan dol
 where dol.project_type     = "README"
   and dol.project_name     = ms_prev_readme_id
   and dol.project_instance = mn_prev_instance
   and dol.status           = "SUCCESS"
   and dol.environment_id = (select di.info_number
                               from dm_info di
                              where di.info_domain = "DATA MANAGEMENT"
                                and di.info_name   = "DM_ENV_ID")
  head report
       ml_counter = 0
detail
       ml_counter = ml_counter + 1
 
  with nocounter
 
if (ml_counter >= 1)
  ; Previous version of readme has already successfully completed
  ; hence there is no need to ask for space
  set ml_table_rowcnt1 = 0
  set ml_table_rowcnt2 = 0
  go to RUN_SCRIPT
endif
 
if (mn_prev_run_ind = 1)
  ;see if any of the ranges have been successfully ran before
  select into "nl:"
    from dm_info di
   where di.info_domain = ms_process_name and
         di.info_char   = "SUCCESS"
    head report
         ml_counter = 0
    detail
         ml_counter = ml_counter + 1
    with nocounter
 
  if (ml_counter >= 1)
    ; new parent script was executed before and there is no need to execute the space check process again
    set ml_table_rowcnt1 = 0
    set ml_table_rowcnt2 = 0
    go to RUN_SCRIPT
  endif
endif
 
 
; check for CCL existence- 1st table
if ( sbr_ccl_check(1) = 0 )
  go to EXIT_SCRIPT
endif
 
 
; check for RDBMS existence- 1st table
if ( sbr_rdbms_check(1) = 0 )
  go to EXIT_SCRIPT
endif
 
; check for CCL existence- 2nd table
if ( sbr_ccl_check(2) = 0 )
  go to EXIT_SCRIPT
endif
 
 
; check for RDBMS existence- 2nd table
if ( sbr_rdbms_check(2) = 0 )
  go to EXIT_SCRIPT
endif
 
#RUN_SCRIPT
 
;ml_table_rows is used as an override for requesting a custom amount of rows for table 1
if (validate(ml_table_rows1, 0)  != 0)
  set ml_table_rowcnt1 = ml_table_rows1
endif
 
;ml_table_rows2 is used as an override for requesting a custom amount of rows for table 1
if (validate(ml_table_rows2, 0)  != 0)
  set ml_table_rowcnt2 = ml_table_rows2
endif
 
; execute the script to load space for the 1st table
execute dm2_readme_spcchk_load value(ms_table_name1),value(ms_operation_init),value(ml_table_rowcnt1),value(ms_column_name)
 
; execute the script to load space for the 1st table
execute dm2_readme_spcchk_load value(ms_table_name2),value(ms_operation_init),value(ml_table_rowcnt2),value(ms_column_name)
 
go to EXIT_SCRIPT
 
 
;=================================================================
; Subroutine sbr_add_table
;
; Add table to the record structure and stores the table name for
; the update
;
; Return: NULL
;
; Parameter definitions (Input):
; ps_tbl_name: table name to add
; pn_tgt_ind:  target indicator for table
 
subroutine sbr_add_table(ps_tbl_name, pn_tgt_ind)
 
 
  set mr_table->l_tlst_cnt = mr_table->l_tlst_cnt + 1
 
  set stat = alterlist(mr_table->tlst,mr_table->l_tlst_cnt)
 
 
  set mr_table->tlst[mr_table->l_tlst_cnt].s_table_name = cnvtupper(trim(ps_tbl_name))
  set mr_table->tlst[mr_table->l_tlst_cnt].n_target_ind = pn_tgt_ind
 
  if(pn_tgt_ind)
 
    set mn_target_table_cnt = mn_target_table_cnt + 1
 
    ; if first target table
    if (mn_target_table_cnt = 1)
      set ms_table_name1 = mr_table->tlst[mr_table->l_tlst_cnt].s_table_name
    else
      set ms_table_name2 = mr_table->tlst[mr_table->l_tlst_cnt].s_table_name
    endif
  endif
 
end
 
 
;===============================================================
; Subroutine sbr_add_column
;
; Add column to the record structure and stores a comma delimited
; list of columns for the update
;
; Return: NULL
;
; Parameter definitions (Input):
; ps_column_name: column name to add
; pn_tgt_ind:     target indicator for column
 
subroutine sbr_add_column(ps_column_name,pn_tgt_ind)
 
  set mr_table->tlst[mr_table->l_tlst_cnt].l_clst_cnt = mr_table->tlst[mr_table->l_tlst_cnt].l_clst_cnt + 1
  set stat = alterlist(mr_table->tlst[mr_table->l_tlst_cnt]->clst,mr_table->tlst[mr_table->l_tlst_cnt].l_clst_cnt)
 
  set mr_table->tlst[mr_table->l_tlst_cnt]->clst[mr_table->tlst[mr_table->l_tlst_cnt].l_clst_cnt].s_column_name =
                                                                             cnvtupper(trim(ps_column_name))
  set mr_table->tlst[mr_table->l_tlst_cnt]->clst[mr_table->tlst[mr_table->l_tlst_cnt].l_clst_cnt].n_target_ind  =
                                                                                               pn_tgt_ind
  if(pn_tgt_ind)
 
    if(textlen(ms_column_name)>2)
      set ms_column_name = concat(ms_column_name,",",
                        mr_table->tlst[mr_table->l_tlst_cnt]->clst[mr_table->tlst[mr_table->l_tlst_cnt].l_clst_cnt].s_column_name)
    else
      set ms_column_name =
                        mr_table->tlst[mr_table->l_tlst_cnt]->clst[mr_table->tlst[mr_table->l_tlst_cnt].l_clst_cnt].s_column_name
    endif
 
  endif
 
end
 
 
;================================================================
; Subroutine sbr_ccl_check
;
; Checks for existence of table and corresponding columns on CCL level
;
; Return: 1 if table and corresponding columns exist
;         0 if table or corresponding columns do not exist
; on CCL level
;
; Parameter definitions (Input):
; pl_tlst_cnt: counter to access table in record structure
 
subroutine sbr_ccl_check(pl_tlst_cnt)
 
  select into "nl:"
         l.attr_name
    from dtableattr a,
         dtableattrl l,
         (dummyt d with seq = value(mr_table->tlst[pl_tlst_cnt].l_clst_cnt))
    plan a
         where a.table_name = mr_table->tlst[pl_tlst_cnt].s_table_name
    join d
    join l
         where l.attr_name = mr_table->tlst[pl_tlst_cnt]->clst[d.seq].s_column_name
           and l.structtype= "F"
           and btest(l.stat,11) = 0
 
    head report
         ml_counter = 0
    detail
         ml_counter = ml_counter + 1
 
    with nocounter
 
  if (ml_counter = mr_table->tlst[pl_tlst_cnt].l_clst_cnt)
    return(1)
  else
    return(0)
  endif
 
end
 
 
;================================================================
; Subroutine sbr_rdbms_check
;
;
; Return: 1 if table and corresponding columns exist
;         0 if table or corresponding columns do not exist
; on RDBMS level
;
; Parameter definitions (Input):
; pl_tlst_cnt: counter to access table in record structure
 
subroutine sbr_rdbms_check(pl_tlst_cnt)
 
  declare mn_idx = i4 with protect, noconstant(0)
  
  declare ut_view_exists = i2 with protect, noconstant(0) ; 002
  declare uc_view_exists = i2 with protect, noconstant(0) ; 002
  
  ; 002 determine if the new table stats views exist
  select into "nl:"
    from dtable d
   where d.table_name = "DM_USER_TABLES_ACTUAL_STATS"
      or d.table_name = "DM_USER_COLUMNS_ACTUAL_STATS"
  detail 
         if (d.table_name = "DM_USER_TABLES_ACTUAL_STATS")
           ut_view_exists = 1
         elseif (d.table_name = "DM_USER_COLUMNS_ACTUAL_STATS")
           uc_view_exists = 1
         endif
    with nocounter
  
  if( (ut_view_exists = 1) and (uc_view_exists = 1) ) ; 002
    
    select into "nl:"
           rows_val = ut.num_rows
      from DM_USER_TABLES_ACTUAL_STATS ut,
           DM_USER_COLUMNS_ACTUAL_STATS uc  
      plan ut
           where ut.table_name = mr_table->tlst[pl_tlst_cnt].s_table_name
      join uc
           where uc.table_name = ut.table_name
             and expand(mn_idx,1,mr_table->tlst[pl_tlst_cnt].l_clst_cnt,uc.column_name,
                             mr_table->tlst[pl_tlst_cnt]->clst[mn_idx].s_column_name)
      head report
           ml_counter = 0
    detail 
           ml_counter = ml_counter + 1
           if (pl_tlst_cnt = 1)
               ml_table_rowcnt1 = rows_val
           else
               ml_table_rowcnt2 = rows_val
           endif    
      with nocounter 
      
  else                    
 
    select into "nl:"
           rows_val = dt.num_rows
      from dm2_user_tab_cols dtc,
           dm2_user_tables dt
      plan dt
           where dt.table_name  = mr_table->tlst[pl_tlst_cnt].s_table_name
      join dtc
           where dtc.table_name  = dt.table_name
             and expand(mn_idx,1,mr_table->tlst[pl_tlst_cnt].l_clst_cnt,dtc.column_name,
                             mr_table->tlst[pl_tlst_cnt]->clst[mn_idx].s_column_name)
      head report
           ml_counter = 0
    detail 
           ml_counter = ml_counter + 1
           if (pl_tlst_cnt = 1)
               ml_table_rowcnt1 = rows_val
           else
               ml_table_rowcnt2 = rows_val
           endif    
      with nocounter
      
  endif
 
  if (ml_counter = mr_table->tlst[pl_tlst_cnt].l_clst_cnt)
  
     if (mr_table->tlst[pl_tlst_cnt].n_target_ind = 1)
       if (pl_tlst_cnt = 1) 
         ;approximate number of rows to load space for table 1
         set ml_table_rowcnt1 = GF_FUDGE_FACTOR * ml_table_rowcnt1
       else
         ;approximate number of rows to load space for table 2
         set ml_table_rowcnt2 = GF_FUDGE_FACTOR * ml_table_rowcnt2  
       endif   
     endif
  
     return(1)
  else
     return(0)
  endif
  
end 
 
#EXIT_SCRIPT

free record mr_table
 
end
go 

;Generated by GNU enscript 1.6.4.
