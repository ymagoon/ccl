 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_qc_benchmark/glb_rpt_qc_benchmark.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_rpt_qc_benchmark.prg
        Object name:            glb_rpt_qc_benchmark
        Request #:              257594

        Product:                PathNet                             
        Product Team:           General Lab      
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Print QC Benchmark report.
                                
        Tables read:            qc_result,
                                assay_resource_lot,
                                qc_group_ctrl_resource,
                                qc_group_assay,
                                data_map,
                                resource_group,
                                control_material,
                                control_lot,
                                reference_range_factor,
                                qc_comment,
                                long_text,
                                prsnl,
                                qc_resource_trouble_r,
                                qc_trouble_step,
                                
        Tables updated:         qc_stat_period
        
        Executing from:         QC Inquiry 

        Special Notes:          None                                                                                

******************************************************************************/

 
;~DB~****************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG                  *
;    ****************************************************************************
;    *                                                                          *
;    *Mod Date     Engineer             Comment                                 *
;    *--- -------- -------------------- --------------------------------------- *
;     001 08/03/05 Scott Sundahl        Initial release                         *
;~DE~****************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program glb_rpt_qc_benchmark:dba go
create program glb_rpt_qc_benchmark:dba

%i cclsource:pcs_resource_security.inc 
%i cclsource:glb_script_logging.inc

/****************************************************************************
* Declarations                                                              *
*****************************************************************************/
free set reply
free set intervals
free set cumulative_stats
free set report_elements

/*
record request
(
  1 begin_dt_tm           = dq8
  1 end_dt_tm             = dq8
  1 controls[*]
    2 control_id          = f8
  1 test_sites[*]
    2 service_resource_cd = f8
  1 assays[*]
    2 task_assay_cd       = f8
  1 series_sequence_nbr   = i4
  1 series_interval_nbr   = i4
  1 save_statistics_ind   = i2
  1 output_dist           = vc 
  1 lot_type_flag         = i2
)short
*/

record reply
(
  1 file_name             = vc
%i cclsource:status_block.inc
)

record intervals
(
  1 qual[*]
    2 begin_dt_tm                 = dq8
    2 end_dt_tm                   = dq8
    2 current_sequence            = i4
)

record cumulative_stats
(
  1 qual[*]
    2 arl_id                      = f8
    2 lot_id                      = f8
    2 control_id                  = f8
    2 service_resource_cd         = f8
    2 task_assay_cd               = f8
    2 sum_sqr                     = f8
    2 sum_results                 = f8
    2 count                       = i4
    2 mean                        = vc
    2 std_dev                     = vc
    2 co_var                      = vc
    2 fval                        = vc
    2 zstat                       = vc
    2 expected_mean               = f8
    2 expected_std_dev            = f8
    2 control_group_cd            = f8
    2 deviation_type_flag         = i2
    2 max_dispersion              = f8
    2 max_mean                    = f8
    2 max_result_deviation        = f8
    2 manf_mean                   = f8
    2 max_digits                  = i4
    2 min_digits                  = i4
    2 min_decimal_places          = i4
    2 results[*]
      3 qc_result_id              = f8
      3 review_note               = vc
      3 result_comment            = vc
      3 trouble_step              = vc
)

;****************************************************************************
;*  Internationalization                                                    *
;****************************************************************************

%I cclsource:i18n_uar.inc

declare nStatus                   = i2 with protect, noconstant(0)
declare lI18NHandle               = i4 with protect, noconstant(0)
set nStatus = uar_i18nlocalizationinit(lI18NHandle, curprog, "", curcclrev)

record report_elements
(
  1 Title                         = vc
  1 ReportHeader                  = vc
  1 ReportName                    = vc
  1 FromDate                      = vc
  1 ToDate                        = vc
  1 Interval                      = vc     
  1 Sequence                      = vc
  1 PrintedDate                   = vc
  1 PrintedTime                   = vc
  1 PageNumber                    = vc
  1 Lab                           = vc
  1 TestSite                      = vc
  1 Control                       = vc
  1 Manf                          = vc
  1 LotNumber                     = vc
  1 ControlGroup                  = vc
  1 Procedure                     = vc
  1 Units                         = vc
  1 ManfMean                      = vc
  1 MaxResDev                     = vc
  1 MaxMeanDev                    = vc
  1 MaxDisp                       = vc
  1 Number                        = vc
  1 PerfDate                      = vc
  1 Time                          = vc
  1 Result                        = vc
  1 AbsDev                        = vc
  1 PercentDev                    = vc
  1 Evaluation                    = vc
  1 PerfTech                      = vc
  1 VerfTech                      = vc
  1 TroubleStep                   = vc
  1 ResultComment                 = vc
  1 ReviewNote                    = vc
  1 ReportStats                   = vc
  1 Mean                          = vc
  1 SD                            = vc
  1 CV                            = vc
  1 MeanDev                       = vc
  1 FootNotes                     = vc
  1 EOR                           = vc
  1 NA                            = vc
  1 First                         = vc
  1 Last                          = vc
  1 FullLine                      = vc
  1 PartialLine                   = vc
  1 FootNoteResult                = vc
  1 FootNoteSD                    = vc
  1 FootNoteCV                    = vc
  1 FootNoteMeanDev               = vc
  1 FootNotePercentDev            = vc
)

set report_elements->Title                  
        = uar_i18ngetmessage(lI18nHandle, "Title", "QC Benchmark Report")
set report_elements->ReportHeader                  
        = uar_i18ngetmessage(lI18nHandle, "ReportHeader", "REPORT:")
set report_elements->ReportName                  
        = uar_i18ngetmessage(lI18nHandle, "ReportName", "GLB_RPT_QC_BENCHMARK.PRG")
set report_elements->FromDate                  
        = uar_i18ngetmessage(lI18nHandle, "FromDate", "FROM:")
set report_elements->ToDate                  
        = uar_i18ngetmessage(lI18nHandle, "ToDate", "TO:")
set report_elements->Interval                  
        = uar_i18ngetmessage(lI18nHandle, "Interval", "INTERVAL HOURS:")
set report_elements->Sequence                  
        = uar_i18ngetmessage(lI18nHandle, "Sequence", "SEQUENCE IN SERIES:")
set report_elements->PrintedDate                  
        = uar_i18ngetmessage(lI18nHandle, "PrintedDate", "PRINTED:")
set report_elements->PrintedTime                  
        = uar_i18ngetmessage(lI18nHandle, "PrintedTime", "TIME:")                                        
set report_elements->PageNumber                  
        = uar_i18ngetmessage(lI18nHandle, "PageNumber", "PAGE NO:")
set report_elements->Lab                  
        = uar_i18ngetmessage(lI18nHandle, "Lab", "LABORATORY:")
set report_elements->TestSite                  
        = uar_i18ngetmessage(lI18nHandle, "TestSite", "TEST SITE:")
set report_elements->Control                  
        = uar_i18ngetmessage(lI18nHandle, "Control", "CONTROL:")
set report_elements->Manf                  
        = uar_i18ngetmessage(lI18nHandle, "Manf", "MANUFACTURER:")
set report_elements->LotNumber                  
        = uar_i18ngetmessage(lI18nHandle, "LotNumber", "LOT NUMBER:")
set report_elements->ControlGroup                  
        = uar_i18ngetmessage(lI18nHandle, "ControlGroup", "CONTROL GROUP:")
set report_elements->Procedure                  
        = uar_i18ngetmessage(lI18nHandle, "Procedure", "PROCEDURE:")  
set report_elements->Units                  
        = uar_i18ngetmessage(lI18nHandle, "Units", "UNITS OF MEASURE:")
set report_elements->ManfMean                  
        = uar_i18ngetmessage(lI18nHandle, "ManfMean", "MANUFACTURER MEAN:")
set report_elements->MaxResDev                  
        = uar_i18ngetmessage(lI18nHandle, "MaxResDev", "MAX RESULT DEVIATION:")
set report_elements->MaxMeanDev                  
        = uar_i18ngetmessage(lI18nHandle, "MaxMeanDev", "MAX MEAN DEVIATION:")
set report_elements->MaxDisp                  
        = uar_i18ngetmessage(lI18nHandle, "MaxDisp", "MAX DISPERSION:")
set report_elements->Number                  
        = uar_i18ngetmessage(lI18nHandle, "Number", "NBR")
set report_elements->PerfDate                  
        = uar_i18ngetmessage(lI18nHandle, "PerfDate", "PERF DATE")
set report_elements->Time                  
        = uar_i18ngetmessage(lI18nHandle, "Time", "TIME")                                        
set report_elements->Result                  
        = uar_i18ngetmessage(lI18nHandle, "Result", "RESULT")
set report_elements->AbsDev                  
        = uar_i18ngetmessage(lI18nHandle, "AbsDev", "ABS DEV")
set report_elements->PercentDev                  
        = uar_i18ngetmessage(lI18nHandle, "PercentDev", "% DEV")
set report_elements->Evaluation                  
        = uar_i18ngetmessage(lI18nHandle, "Evaluation", "EVALUATION")
set report_elements->PerfTech                  
        = uar_i18ngetmessage(lI18nHandle, "PerfTech", "PERF TECH")
set report_elements->VerfTech                  
        = uar_i18ngetmessage(lI18nHandle, "VerfTech", "VERF TECH")
set report_elements->TroubleStep                  
        = uar_i18ngetmessage(lI18nHandle, "TroubleStep", "Troubleshooting Step: ")
set report_elements->ResultComment                  
        = uar_i18ngetmessage(lI18nHandle, "ResultComment", "Result Comment: ")  
set report_elements->ReviewNote                  
        = uar_i18ngetmessage(lI18nHandle, "ReviewNote", "Review Note: ")
set report_elements->ReportStats                  
        = uar_i18ngetmessage(lI18nHandle, "ReportStats", "REPORT STATISTICS: ")
set report_elements->Mean                  
        = uar_i18ngetmessage(lI18nHandle, "Mean", "MEAN")
set report_elements->SD                  
        = uar_i18ngetmessage(lI18nHandle, "SD", "SD")
set report_elements->CV                  
        = uar_i18ngetmessage(lI18nHandle, "CV", "CV")
set report_elements->MeanDev                  
        = uar_i18ngetmessage(lI18nHandle, "MeanDev", "MEAN DEV")
set report_elements->FootNotes                  
        = uar_i18ngetmessage(lI18nHandle, "FootNotes", "FOOTNOTES:")                                        
set report_elements->EOR                  
        = uar_i18ngetmessage(lI18nHandle, "EOR", "#### END OF REPORT ####")
set report_elements->NA                  
        = uar_i18ngetmessage(lI18nHandle, "NA", "N/A")
set report_elements->First                  
        = uar_i18ngetmessage(lI18nHandle, "First", "First")        
set report_elements->Last                  
        = uar_i18ngetmessage(lI18nHandle, "Last", "Last")       
set report_elements->FootNoteResult                  
        = uar_i18ngetmessage(lI18nHandle, "FootNoteResult", "Result exceeds maximum permissible deviation limit.")
set report_elements->FootNoteSD                  
        = uar_i18ngetmessage(lI18nHandle, "FootNoteSD", "Standard deviation exceeds maximum permissible dispersion limit.")
set report_elements->FootNoteCV                  
        = uar_i18ngetmessage(lI18nHandle, "FootNoteCV", "Coefficient of variation exceeds maximum permissible dispersion limit.")
set report_elements->FootNoteMeanDev                  
        = uar_i18ngetmessage(lI18nHandle, "FootNoteMeanDev", "Mean deviation maximum permissible mean deviation.")
set report_elements->FootNotePercentDev                  
        = uar_i18ngetmessage(lI18nHandle, "FootNotePercentDev", "Percent deviation exceeds maximum permissible mean deviation.")
set report_elements->FullLine = fillstring(128, "_")
set report_elements->PartialLine = fillstring(85, "_")

/************************************************************************
*declarations                                                           *
************************************************************************/
declare lCount                      = i4 with protect, noconstant(0)
declare lCount2                     = i4 with protect, noconstant(0)
declare lCount3                     = i4 with protect, noconstant(0)
declare lCumulativeCount            = i4 with protect, noconstant(0)
declare i                           = i4 with protect, noconstant(0)
declare lResultCount                = i4 with protect, noconstant(0)
declare lStatCount                  = i4 with protect, noconstant(0)
declare lIntervalCnt                = i4 with protect, noconstant(0)

declare dResultStatusAcceptCd       = f8 with protect, noconstant(0.0)
declare dResultStatusReviewedCd     = f8 with protect, noconstant(0.0)
declare dResultStatusVerifiedCd     = f8 with protect, noconstant(0.0)
declare dResultStatusAutoVerfCd     = f8 with protect, noconstant(0.0)
declare dResultStatusCorrectedCd    = f8 with protect, noconstant(0.0)
declare dResultStatusChangedCd      = f8 with protect, noconstant(0.0)
declare dResultStatusRejectedCd     = f8 with protect, noconstant(0.0)
declare dNumericCd                  = f8 with protect, noconstant(0.0)
declare dServResSubsectionCd        = f8 with protect, noconstant(0.0)
declare dServResSectionCd           = f8 with protect, noconstant(0.0)
declare dServResDeptCd              = f8 with protect, noconstant(0.0)
declare dFootNoteCd                 = f8 with protect, noconstant(0.0)
declare dReviewNoteCd               = f8 with protect, noconstant(0.0)
declare dServiceResourceCd          = f8 with protect, noconstant(0.0)
declare dTempResult                 = f8 with protect, noconstant(0.0)
declare dMean                       = f8 with protect, noconstant(0.0)
declare dStdDev                     = f8 with protect, noconstant(0.0)
declare dCoVar                      = f8 with protect, noconstant(0.0)
declare dFVal                       = f8 with protect, noconstant(0.0)
declare dZStat                      = f8 with protect, noconstant(0.0)
declare dVariance1                  = f8 with protect, noconstant(0.0)
declare dVariance2                  = f8 with protect, noconstant(0.0)
declare dPercentDev                 = f8 with protect, noconstant(0.0)
declare dAbsDev                     = f8 with protect, noconstant(0.0)
declare dStatId                     = f8 with protect, noconstant(0.0)

declare lDataMapLevel               = i4 with protect, noconstant(0)
declare lMaxDigits                  = i4 with protect, noconstant(0)
declare lMinDigits                  = i4 with protect, noconstant(0)
declare lMinDecimalPlaces           = i4 with protect, noconstant(0)
declare lMaxPercentDigits           = i4 with protect, noconstant(4)
declare lMinPercentDigits           = i4 with protect, noconstant(1)
declare lMinPercentDecimalPlaces    = i4 with protect, noconstant(1)
declare lTempIndex                  = i4 with protect, noconstant(0)
declare lMaxResults                 = i4 with protect, noconstant(0)
declare lFootnoteCount              = i4 with protect, noconstant(1)
declare lErrorCode                  = i4 with protect, noconstant(0)  

declare nResourceSecInd             = i2 with protect, noconstant(false)
declare nProcessResultId            = i2 with protect, noconstant(false)
declare nResultFootnote             = i2 with protect, noconstant(false)
declare nSDFootnote                 = i2 with protect, noconstant(false)
declare nCVFootnote                 = i2 with protect, noconstant(false)
declare nMeanDevFootnote            = i2 with protect, noconstant(false)
declare nPercentDevFootnote         = i2 with protect, noconstant(false)
declare nFailed                     = i2 with protect, noconstant(false)

declare sTempResult                 = vc with protect, noconstant(" ")
declare sTempString                 = vc with protect, noconstant(" ")
declare sUnits                      = vc with protect, noconstant(" ")
declare sStarString                 = vc with protect, noconstant(" ")
declare sErrorMessage               = vc with protect, noconstant(" ")

set dResultStatusAcceptCd           = uar_get_code_by("MEANING", 1901, "ACCEPT")
set dResultStatusReviewedCd         = uar_get_code_by("MEANING", 1901, "REVIEWED")
set dResultStatusVerifiedCd         = uar_get_code_by("MEANING", 1901, "VERIFIED")
set dResultStatusAutoVerfCd         = uar_get_code_by("MEANING", 1901, "AUTOVERIFIED")
set dResultStatusCorrectedCd        = uar_get_code_by("MEANING", 1901, "CORRECTED")
set dResultStatusChangedCd          = uar_get_code_by("MEANING", 1901, "CHANGE")
set dResultStatusRejectedCd         = uar_get_code_by("MEANING", 1901, "REJECT")
set dNumericCd                      = uar_get_code_by("MEANING", 289, "3") ; numeric
set dServResSubsectionCd            = uar_get_code_by("MEANING", 223, "SUBSECTION")
set dServResSectionCd               = uar_get_code_by("MEANING", 223, "SECTION")
set dServResDeptCd                  = uar_get_code_by("MEANING", 223, "DEPARTMENT")
set dFootNoteCd                     = uar_get_code_by("MEANING", 14, "QC FTNT")
set dReviewNoteCd                   = uar_get_code_by("MEANING", 14, "QC RVNT")

; string formatting declarations
declare sInBuffer                   = vc with protect, noconstant(" ")
declare lInBufLen                   = i4 with protect, noconstant(0)
declare sOutBuffer                  = c1000 with protect, noconstant("")
declare lOutBufLen                  = i4 with protect, noconstant(1000)
declare lRetBufLen                  = i4 with protect, noconstant(0)
declare bFlag                       = i4 with protect, noconstant(0)
declare sWrappingString             = vc with protect, noconstant("")
declare sWrappingStringTemp         = vc with protect, noconstant("")

set reply->status_data.status = "F"

/************************************************************************
*build interval structure                                               *
************************************************************************/

if (request->series_interval_nbr != 0 and request->series_sequence_nbr != 0)     
  set lIntervalCnt = lIntervalCnt + 1
  set stat = alterlist(intervals->qual, lIntervalCnt)
  
  set intervals->qual[lIntervalCnt].begin_dt_tm = request->begin_dt_tm
  set intervals->qual[lIntervalCnt].end_dt_tm = datetimeadd(request->begin_dt_tm, (request->series_interval_nbr / 24))
 
  while (intervals->qual[lIntervalCnt].end_dt_tm < request->end_dt_tm) ; interval end_dt_tm < request end_dt_tm
    set lIntervalCnt = lIntervalCnt + 1
    set stat = alterlist(intervals->qual, lIntervalCnt)   
    set intervals->qual[lIntervalCnt].begin_dt_tm = intervals->qual[lIntervalCnt - 1].end_dt_tm
    set intervals->qual[lIntervalCnt].end_dt_tm = 
        datetimeadd(intervals->qual[lIntervalCnt].begin_dt_tm, (cnvtreal(request->series_interval_nbr) / 24))
  endwhile
  
endif 

/************************************************************************
*populate cumulative_stats list                                         *
************************************************************************/

select 
  if (request->series_sequence_nbr > 0)
    order by qr.service_resource_cd, 
             arl.arl_id, 
             qr.perform_dt_tm,
             qr.qc_result_id  

  elseif (request->series_sequence_nbr = -999)
    order by qr.service_resource_cd, 
             arl.arl_id, 
             qr.perform_dt_tm desc,
             qr.qc_result_id

  elseif (request->series_sequence_nbr = 0)
    order by qr.service_resource_cd,
             arl.arl_id,
             qr.qc_result_id desc
  
  endif

into "nl:"
  qc_resource_exists    = decode(qgcr.seq, true, false), 
  qc_assay_exists       = decode(qga.seq, true, false),
  data_map_exists       = decode(dm.seq, true, false),
  resource_group_exists = decode(rg.seq, true, false)

from qc_result qr,
     assay_resource_lot arl,
     qc_group_ctrl_resource qgcr,
     qc_group_assay qga,
     code_value cv,
     data_map dm,
     resource_group rg,
     (dummyt d1),
     (dummyt d2),
     (dummyt d3),
     (dummyt d4)

plan qr   where expand(lCount, 1, value(size(request->controls, 5)), qr.control_id, request->controls[lCount].control_id)
            and expand(lCount2, 1, value(size(request->test_sites, 5)), qr.service_resource_cd, 
                request->test_sites[lCount2].service_resource_cd)
            and expand(lCount3, 1, value(size(request->assays, 5)), qr.task_assay_cd, request->assays[lCount3].task_assay_cd)
            and qr.perform_dt_tm between cnvtdatetime(request->begin_dt_tm) and cnvtdatetime(request->end_dt_tm)
            and qr.result_status_cd in(dResultStatusAcceptCd, dResultStatusReviewedCd, dResultStatusVerifiedCd,
                                       dResultStatusAutoVerfCd, dResultStatusCorrectedCd, dResultStatusChangedCd,
                                       dResultStatusRejectedCd)
            and qr.result_type_cd = dNumericCd
            and qr.qc_result_type_flag = 0
            and ((request->lot_type_flag = 0) or
                (request->lot_type_flag = 1 and qr.preactive_ind = 1) or 
                (request->lot_type_flag = 2 and qr.preactive_ind = 0))

join arl  where arl.arl_id = qr.arl_id
 
join d1
 
join qgcr where qgcr.service_resource_cd = qr.service_resource_cd
            and qgcr.control_id = qr.control_id
            and qgcr.active_ind = 1
 
join d4
            
join qga  where qga.control_group_cd = qgcr.control_group_cd
            and qga.task_assay_cd = qr.task_assay_cd
            and ((arl.manf_mean >= qga.result_range_min_value and arl.manf_mean < qga.result_range_max_value) or
                (qga.result_range_min_value = 0 and qga.result_range_max_value = 0))
            and qga.active_ind = 1
      
join cv where cv.code_value = qga.control_group_cd

join d2
                
join dm   where dm.task_assay_cd = qr.task_assay_cd
            and dm.data_map_type_flag in (0, 1)
            and dm.active_ind = 1
            
join d3 
          
join rg   where rg.parent_service_resource_cd = dm.service_resource_cd
            and rg.child_service_resource_cd = qr.service_resource_cd
            and rg.resource_group_type_cd = dServResSubsectionCd
            and rg.root_service_resource_cd = 0.0

head qr.service_resource_cd 
  dServiceResourceCd = qr.service_resource_cd
  if (IsResourceViewable(dServiceResourceCd))
    nResourceSecInd = true
  else
    nResourceSecInd = false
  endif 

head arl.arl_id 
  if (nResourceSecInd = true)
    lCumulativeCount = lCumulativeCount + 1
    if (lCumulativeCount > size(cumulative_stats->qual, 5))
      stat = alterlist(cumulative_stats->qual, lCumulativeCount)
    endif
    cumulative_stats->qual[lCumulativeCount].arl_id = arl.arl_id 
    cumulative_stats->qual[lCumulativeCount].lot_id = arl.lot_id 
    cumulative_stats->qual[lCumulativeCount].control_id = qr.control_id 
    cumulative_stats->qual[lCumulativeCount].service_resource_cd = qr.service_resource_cd 
    cumulative_stats->qual[lCumulativeCount].task_assay_cd = qr.task_assay_cd 
    cumulative_stats->qual[lCumulativeCount].expected_mean = qr.mean 
    cumulative_stats->qual[lCumulativeCount].expected_std_dev = qr.statistical_std_dev 
    cumulative_stats->qual[lCumulativeCount].manf_mean = arl.manf_mean 
    if (qc_assay_exists = true and cv.active_ind = 1)
      cumulative_stats->qual[lCumulativeCount].deviation_type_flag = qga.deviation_type_flag 
      cumulative_stats->qual[lCumulativeCount].max_dispersion = qga.max_dispersion_value 
      cumulative_stats->qual[lCumulativeCount].max_mean = qga.max_mean_value 
      cumulative_stats->qual[lCumulativeCount].max_result_deviation = qga.max_result_deviation_value 
      cumulative_stats->qual[lCumulativeCount].control_group_cd = qga.control_group_cd 
    endif
    lDataMapLevel = 0
    lMaxDigits = 8
    lMinDigits = 1
    lMinDecimalPlaces = 2
    
    lResultCount = 0
  endif

head qr.qc_result_id 
  row + 0

detail
  if (nResourceSecInd = true)                                          
    if (data_map_exists = true)
      ;* Check for exact match on QC data map
      if (lDataMapLevel <= 3
          and dm.data_map_type_flag = 1
          and dm.service_resource_cd > 0.0
          and dm.service_resource_cd = qr.service_resource_cd)
        lDataMapLevel = 4
        lMaxDigits = dm.max_digits
        lMinDigits = dm.min_digits
        lMinDecimalPlaces = dm.min_decimal_places
      endif

      ;* Check for exact match on data map
      if (lDataMapLevel <= 2
          and dm.data_map_type_flag = 0
          and dm.service_resource_cd > 0.0
          and dm.service_resource_cd = qr.service_resource_cd)
        lDataMapLevel = 3
        lMaxDigits = dm.max_digits
        lMinDigits = dm.min_digits
        lMinDecimalPlaces = dm.min_decimal_places
      endif

      ;* Check for subsection level data map
      if (lDataMapLevel <= 1
          and dm.data_map_type_flag = 0
          and dm.service_resource_cd > 0.0
          and resource_group_exists = true
          and rg.parent_service_resource_cd = dm.service_resource_cd
          and rg.child_service_resource_cd = qr.service_resource_cd)
        lDataMapLevel = 2
        lMaxDigits = dm.max_digits
        lMinDigits = dm.min_digits
        lMinDecimalPlaces = dm.min_decimal_places
      endif

      ;* Check for default all resources level data map
      if (lDataMapLevel = 0
          and dm.data_map_type_flag = 0
          and dm.service_resource_cd = 0.0)
        lDataMapLevel = 1
        lMaxDigits = dm.max_digits
        lMinDigits = dm.min_digits
        lMinDecimalPlaces = dm.min_decimal_places
      endif
    endif
  endif

foot qr.qc_result_id 
  if (nResourceSecInd = true)
    cumulative_stats->qual[lCumulativeCount].max_digits = lMaxDigits
    cumulative_stats->qual[lCumulativeCount].min_digits = lMinDigits
    cumulative_stats->qual[lCumulativeCount].min_decimal_places = lMinDecimalPlaces
    
    nProcessResultId = false
    if (lIntervalCnt = 0)
      nProcessResultId = true
    else
      for (i = 1 to lIntervalCnt)
        if (qr.perform_dt_tm between intervals->qual[i].begin_dt_tm and intervals->qual[i].end_dt_tm)  
          intervals->qual[i].current_sequence = intervals->qual[i].current_sequence + 1
          lTempIndex = i
          i = lIntervalCnt + 1
        endif
      endfor
      if (intervals->qual[lTempIndex].current_sequence = request->series_sequence_nbr or
         (intervals->qual[lTempIndex].current_sequence = 1 and request->series_sequence_nbr = -999))
        nProcessResultId = true
      endif
    endif
    
    if (nProcessResultId = true)
      lResultCount = lResultCount + 1
      if (lResultCount > size(cumulative_stats->qual[lCumulativeCount]->results, 5))
        stat = alterlist(cumulative_stats->qual[lCumulativeCount]->results, lResultCount)
      endif
      cumulative_stats->qual[lCumulativeCount]->results[lResultCount].qc_result_id = qr.qc_result_id 
      cumulative_stats->qual[lCumulativeCount].sum_results = 
        cumulative_stats->qual[lCumulativeCount].sum_results + qr.result_value_numeric 
      cumulative_stats->qual[lCumulativeCount].sum_sqr =
        cumulative_stats->qual[lCumulativeCount].sum_sqr + qr.result_value_numeric ** 2 
      cumulative_stats->qual[lCumulativeCount].count = 
        cumulative_stats->qual[lCumulativeCount].count + 1
    endif
  endif

foot arl.arl_id 
  if (nResourceSecInd = true)    
    lStatCount = cumulative_stats->qual[lCumulativeCount].count
    
    if (lStatCount = 0)
    
      stat = alterlist(cumulative_stats->qual, lCumulativeCount - 1, lCumulativeCount - 1)
      lCumulativeCount = lCumulativeCount - 1
      
    else
      
      lMaxResults = maxval(lMaxResults, lResultCount)
      
      ; mean
      sTempResult = ""
      dMean = cumulative_stats->qual[lCumulativeCount].sum_results / lStatCount
      sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dMean)
      cumulative_stats->qual[lCumulativeCount].mean = trim(sTempResult)
  
      ; standard deviation
      sTempResult = ""
      dStdDev = (cumulative_stats->qual[lCumulativeCount].sum_sqr -
                   (cumulative_stats->qual[lCumulativeCount].sum_results **2) / lStatCount) / (lStatCount - 1)
      dStdDev = dStdDev ** 0.5
      sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dStdDev)
      cumulative_stats->qual[lCumulativeCount].std_dev = trim(sTempResult)
      
      ; coefficient of variance
      sTempResult = ""
      dCoVar = (dStdDev / dMean) * 100
      sTempResult = uar_fmt_result(lMinPercentDigits, lMaxPercentDigits, lMinPercentDecimalPlaces + 1, 0, dCoVar)
      cumulative_stats->qual[lCumulativeCount].co_var = trim(sTempResult)
      
      ; f value
      sTempResult = ""
      dVariance1 = cumulative_stats->qual[lCumulativeCount].expected_std_dev ** 2
      dVariance2 = dStdDev ** 2
      if (dVariance1 > dVariance2)
        dFVal = dVariance1 / dVariance2                                                                   ;002
      else
        dFval = dVariance2 / dVariance1                                                                   ;002
      endif
      sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dFVal)
      cumulative_stats->qual[lCumulativeCount].fval = trim(sTempResult) 
      
      ; z stat
      sTempResult = ""
      dTempResult = (cumulative_stats->qual[lCumulativeCount].sum_results / lStatCount) -
                      cumulative_stats->qual[lCumulativeCount].expected_mean
      dZStat = dTempResult / cumulative_stats->qual[lCumulativeCount].expected_std_dev
      sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dZStat)
      cumulative_stats->qual[lCumulativeCount].zstat = trim(sTempResult)
      
    endif
    
  endif

  ;reset the interval current_sequence to process the next arl_id appropriately
  for (i = 1 to lIntervalCnt)
    intervals->qual[i].current_sequence = 0
  endfor

with nocounter,
     outerjoin = d1,
     outerjoin = d2,
     outerjoin = d3,
     outerjoin = d4,
     dontcare = qga,
     dontcare = cv,
     dontcare = dm,
     dontcare = qgcr

/********************************************************************/
/* get comments                                                     */
/********************************************************************/

if (size(cumulative_stats->qual, 5) = 0)
  go to exit_script
endif

select into "nl:"
  comment_exists   = decode(qc.seq, true, false)
  
from (dummyt d1 with seq = value(size(cumulative_stats->qual, 5))),
     (dummyt d2 with seq = value(lMaxResults)),
     (dummyt d3),
     qc_comment qc,
     long_text lt
     
plan d1   where cumulative_stats->qual[d1.seq].count > 0
            and maxrec(d2, size(cumulative_stats->qual[d1.seq]->results, 5))

join d2 

join d3 

join qc   where qc.qc_result_id = cumulative_stats->qual[d1.seq]->results[d2.seq].qc_result_id 
            and qc.comment_type_cd in(dFootNoteCd, dReviewNoteCd)
                
join lt   where lt.long_text_id = qc.long_text_id        
        
order by qc.qc_result_id, 
         qc.comment_type_cd,
         qc.action_sequence desc
        
head qc.qc_result_id 
  row + 0

head qc.comment_type_cd 
  if (comment_exists = true)
    sInBuffer = ""
    sOutBuffer = ""
    sInBuffer = lt.long_text 
    lInBufLen = size(sInBuffer) 
    call uar_rtf(sInBuffer, lInBufLen, sOutBuffer, lOutBufLen, lRetBufLen, bFlag)
    if (qc.comment_type_cd = dFootNoteCd)      
      cumulative_stats->qual[d1.seq]->results[d2.seq].result_comment = sOutBuffer
    else
      cumulative_stats->qual[d1.seq]->results[d2.seq].review_note = sOutBuffer
    endif
  endif

with outerjoin = d3  
        
/********************************************************************/
/* get troubleshooting steps                                        */
/********************************************************************/

select into "nl:"
  trouble_exists   = evaluate(nullind(qts.trouble_id), false, true, false)
  
from (dummyt d1 with seq = value(size(cumulative_stats->qual, 5))),
     (dummyt d2 with seq = value(lMaxResults)),   
     qc_result_trouble_r qrtr,
     qc_trouble_step qts       
            
plan d1   where cumulative_stats->qual[d1.seq].count > 0
            and maxrec(d2, size(cumulative_stats->qual[d1.seq]->results, 5))

join d2 

join qrtr where qrtr.qc_result_id = outerjoin(cumulative_stats->qual[d1.seq]->results[d2.seq].qc_result_id)
            and qrtr.active_ind = outerjoin(1)
            
join qts  where qts.trouble_id = outerjoin(qrtr.trouble_id)            

order by qrtr.qc_result_id, 
         qts.step_nbr 

head qrtr.qc_result_id 
  row + 0
  
detail
  if (trouble_exists = true)
    if (size(cumulative_stats->qual[d1.seq]->results[d2.seq].trouble_step) = 0)
      cumulative_stats->qual[d1.seq]->results[d2.seq].trouble_step = qts.step
    else
      cumulative_stats->qual[d1.seq]->results[d2.seq].trouble_step = 
        concat(cumulative_stats->qual[d1.seq]->results[d2.seq].trouble_step, "; ", qts.step)
    endif
  endif

with nocounter


/************************************************************************
*display report                                                         *
************************************************************************/

execute cpm_create_file_name "bchmk", "dat"

if (cpm_cfn_info->status_data.status != "S")
  call populate_subeventstatus_msg("SELECT", "F", "FILE_NAME", "Failed to create a file name", LOG_LEVEL_AUDIT)
  go to exit_script
endif

set reply->file_name = cpm_cfn_info->file_name_path

select into cpm_cfn_info->file_name_path
  verf_prsnl_exists      = evaluate(nullind(p2.person_id), false, true, false),
  autoverf_prsnl_exists  = evaluate(nullind(p3.person_id), false, true, false),
  units1_exists          = evaluate(nullind(rrf1.units_cd), false, true, false),
  units2_exists          = evaluate(nullind(rrf2.units_cd), false, true, false),
  dept_exists            = evaluate(nullind(dept.child_service_resource_cd), false, true, false),
  perf_prsnl_exists      = evaluate(nullind(p.person_id), false, true, false)

from (dummyt d1 with seq = value(size(cumulative_stats->qual, 5))),
     (dummyt d2 with seq = value(lMaxResults)),
     qc_result qr,
     resource_group sub,
     resource_group sect,
     resource_group dept,
     control_material cm,
     control_lot cl,
     reference_range_factor rrf1,
     reference_range_factor rrf2,
     qc_result_event qre1,
     qc_result_event qre2,
     prsnl p,
     prsnl p2,
     prsnl p3

plan d1   where cumulative_stats->qual[d1.seq].count > 0
            and maxrec(d2, size(cumulative_stats->qual[d1.seq]->results, 5))

join d2   

join qr   where qr.qc_result_id = cumulative_stats->qual[d1.seq]->results[d2.seq].qc_result_id

join cm   where cm.control_id = qr.control_id 

join cl   where cl.lot_id = qr.lot_id 

join rrf1 where rrf1.service_resource_cd = outerjoin(qr.service_resource_cd)
            and rrf1.task_assay_cd = outerjoin(qr.task_assay_cd) 
            and rrf1.active_ind = outerjoin(1)
                
join rrf2 where rrf2.task_assay_cd = outerjoin(qr.task_assay_cd)
            and rrf2.service_resource_cd = outerjoin(0)
            and rrf2.active_ind = outerjoin(1)

join sub  where sub.child_service_resource_cd = outerjoin(cumulative_stats->qual[d1.seq].service_resource_cd)
            and sub.resource_group_type_cd = outerjoin(dServResSubSectionCd)
            and sub.root_service_resource_cd = outerjoin(0.0)

join sect where sect.child_service_resource_cd = outerjoin(sub.parent_service_resource_cd)
            and sect.resource_group_type_cd = outerjoin(dServResSectionCd)
            and sect.root_service_resource_cd = outerjoin(0.0)

join dept where dept.child_service_resource_cd = outerjoin(sect.parent_service_resource_cd)
            and dept.resource_group_type_cd = outerjoin(dServResDeptCd)
            and dept.root_service_resource_cd = outerjoin(0.0)

join p    where p.person_id = outerjoin(qr.perform_personnel_id)

join qre1 where qre1.qc_result_id = outerjoin(qr.qc_result_id)
            and qre1.event_type_cd = outerjoin(dResultStatusVerifiedCd)

join qre2 where qre2.qc_result_id = outerjoin(qr.qc_result_id)
            and qre2.event_type_cd = outerjoin(dResultStatusAutoVerfCd)

join p2   where p2.person_id = outerjoin(qre1.event_personnel_id)

join p3   where p3.person_id = outerjoin(qre2.event_personnel_id)

order by d1.seq,
         qr.perform_dt_tm,
         qr.qc_result_id 

head report
%i cclsource:pcs_report_macros.inc

head page
  row + 2
  col 1 report_elements->ReportHeader
  col + 1 report_elements->ReportName 
  call center(report_elements->Title, 1, 130)
  col 98 report_elements->PrintedDate 
  col 108 curdate "@SHORTDATE4YR"
  row + 1
  col 1 report_elements->FromDate 
  col + 1 request->begin_dt_tm "@SHORTDATE4YR"
  col + 1 request->begin_dt_tm "@TIMENOSECONDS"
  col 98 report_elements->PrintedTime 
  col 108 curtime3 "@TIMENOSECONDS"
  row + 1
  col 1 report_elements->ToDate  
  col + 1 request->end_dt_tm "@SHORTDATE4YR"
  col + 1 request->end_dt_tm "@TIMENOSECONDS"
  row + 1
  col 1 report_elements->Interval 
  if (request->series_interval_nbr > 0)
    col + 1 request->series_interval_nbr ";l"
  else
    col + 1 col + 1 report_elements->NA 
  endif
  row + 1
  col 1 report_elements->Sequence 
  if (request->series_sequence_nbr = 0)
    col + 1 col + 1 report_elements->NA
  elseif (request->series_sequence_nbr = 1)  
    col + 1 report_elements->First
  elseif (request->series_sequence_nbr = -999)  
    col + 1 report_elements->Last
  else  
    col + 1 request->series_sequence_nbr ";l"
  endif
  col 98 report_elements->PageNumber 
  col 108 curpage ";l"
  row + 1
  
head d1.seq
  if (row > 12)
    break
  endif
  
  nResultFootnote = false
  nSDFootnote = false
  nCVFootnote = false
  nMeanDevFootnote = false
  nPercentDevFootnote = false
  lFootnoteCount = 1
  
  lMaxDigits = cumulative_stats->qual[d1.seq].max_digits 
  lMinDigits = cumulative_stats->qual[d1.seq].min_digits 
  lMinDecimalPlaces = cumulative_stats->qual[d1.seq].min_decimal_places 
  
  row + 1
  col 1 report_elements->FullLine   
  row + 1
  col 1 report_elements->Lab 
  if (dept_exists = true)
    sTempString = uar_get_code_display(dept.parent_service_resource_cd)
    col 21 sTempString
  endif
  col 65 report_elements->Procedure 
  sTempString = uar_get_code_display(cumulative_stats->qual[d1.seq].task_assay_cd) 
  col 95 sTempString
  row + 1
  col 1 report_elements->TestSite 
  sTempString = uar_get_code_display(cumulative_stats->qual[d1.seq].service_resource_cd)
  col 21 sTempString
  col 65 report_elements->Units 
  if (units1_exists = true)
    if (rrf1.units_cd > 0.0)
      sTempString = uar_get_code_display(rrf1.units_cd)
      col 95 sTempString
      sUnits = sTempString
    elseif (units2_exists = true)
      if (rrf2.units_cd > 0.0)
        sTempString = uar_get_code_display(rrf2.units_cd)
        col 95 sTempString
        sUnits = sTempString
      endif
    endif
  elseif (units2_exists = true)
    if (rrf2.units_cd > 0.0)
      sTempString = uar_get_code_display(rrf2.units_cd)
      col 95 sTempString
      sUnits = sTempString
    endif
  endif
  row + 1
  col 1 report_elements->Control 
  sTempString = trim(cm.short_description)
  col 21 sTempString
  col 65 report_elements->ManfMean 
  ; format result
  if (cumulative_stats->qual[d1.seq].manf_mean > 0.0)
    dTempResult = cumulative_stats->qual[d1.seq].manf_mean
    sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dTempResult)
    sTempResult = trim(sTempResult)
    col 95 sTempResult
  else
    col 95 report_elements->NA 
  endif 
  row + 1
  col 1 report_elements->Manf
  sTempString = uar_get_code_display(cm.manufacturer_cd)
  col 21 sTempString
  col 65 report_elements->MaxResDev 
  ; format result
  if (cumulative_stats->qual[d1.seq].max_result_deviation > 0.0)
    dTempResult = cumulative_stats->qual[d1.seq].max_result_deviation
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
      sTempResult = uar_fmt_result(lMinPercentDigits, lMaxPercentDigits, lMinPercentDecimalPlaces + 1, 0, dTempResult)
    else
      sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dTempResult)
    endif
    sTempResult = trim(sTempResult)
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
      sTempResult = concat(sTempResult, "%")
    else
      sTempResult = concat(sTempResult, " ", sUnits)
    endif
    col 95 sTempResult
  else
    col 95 report_elements->NA
  endif
  row + 1
  col 1 report_elements->LotNumber 
  sTempString = trim(cl.lot_number)
  col 21 sTempString
  col 65 report_elements->MaxMeanDev 
  ; format result
  if (cumulative_stats->qual[d1.seq].max_mean > 0.0)
    dTempResult = cumulative_stats->qual[d1.seq].max_mean
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
      sTempResult = uar_fmt_result(lMinPercentDigits, lMaxPercentDigits, lMinPercentDecimalPlaces + 1, 0, dTempResult)
    else
      sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dTempResult)
    endif
    sTempResult = trim(sTempResult)
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
      sTempResult = concat(sTempResult, "%")
    else
      sTempResult = concat(sTempResult, " ", sUnits)
    endif
    col 95 sTempResult
  else
    col 95 report_elements->NA
  endif
  row + 1
  col 1 report_elements->ControlGroup 
  if (cumulative_stats->qual[d1.seq].control_group_cd > 0.0)
    sTempString = uar_get_code_display(cumulative_stats->qual[d1.seq].control_group_cd)
    col 21 sTempString
  else
    col 21 report_elements->NA
  endif
  col 65 report_elements->MaxDisp 
  ; format result
  if (cumulative_stats->qual[d1.seq].max_dispersion > 0.0)
    dTempResult = cumulative_stats->qual[d1.seq].max_dispersion
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
      sTempResult = uar_fmt_result(lMinPercentDigits, lMaxPercentDigits, lMinPercentDecimalPlaces + 1, 0, dTempResult)
    else
      sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dTempResult)
    endif
    sTempResult = trim(sTempResult)
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
      sTempResult = concat(sTempResult, "%")
    else
      sTempResult = concat(sTempResult, " ", sUnits)
    endif
    col 95 sTempResult
  else
    col 95 report_elements->NA
  endif
  row + 1
  col 1 report_elements->FullLine 
  row + 4
  col 4 report_elements->Number 
  col 10 report_elements->PerfDate 
  col 23 report_elements->Time 
  col 37 report_elements->Result 
  col 51 report_elements->AbsDev 
  col 65 report_elements->PercentDev 
  col 78 report_elements->Evaluation
  col 95 report_elements->PerfTech 
  col 111 report_elements->VerfTech 
  row + 1
  col 2 "------"
  col 9 "-----------"
  col 22 "-------"
  col 34 "------------"
  col 50 "---------"
  col 63 "----------"
  col 76 "-------------"
  col 93 "------------"
  col 109 "------------"
  lResultCount = 0
  row + 1
  
head qr.qc_result_id 
  lResultCount = lResultCount + 1
  if (lResultCount < 9999)
    col 5 lResultCount ";l"
  else
    col 5 "####"
  endif
  col 9 qr.perform_dt_tm "@SHORTDATE4YR"
  col 23 qr.perform_dt_tm "@TIMENOSECONDS"
  if (cumulative_stats->qual[d1.seq].manf_mean > 0.0)
    dTempResult = abs(cumulative_stats->qual[d1.seq].manf_mean - qr.result_value_numeric)
    ; format result
    dAbsDev = dTempResult
    sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dTempResult)
    sTempResult = trim(sTempResult)
    col 51 sTempResult
  else
    col 51 report_elements->NA
  endif
  if (cumulative_stats->qual[d1.seq].manf_mean > 0.0)
    dTempResult = (dTempResult / cumulative_stats->qual[d1.seq].manf_mean) * 100
    dPercentDev = dTempResult
    ; format result
    sTempResult = uar_fmt_result(lMinPercentDigits, lMaxPercentDigits, lMinPercentDecimalPlaces + 1, 0, dTempResult)
    sTempResult = trim(sTempResult)
    col 65 sTempResult
  else
    col 65 report_elements->NA
  endif 
  ; format result
  dTempResult = qr.result_value_numeric
  sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dTempResult)
  sTempResult = trim(sTempResult)
  ; determine if footnote is needed
  if (cumulative_stats->qual[d1.seq].max_result_deviation > 0.0)
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1)
      if (dPercentDev > cumulative_stats->qual[d1.seq].max_result_deviation)
        sStarString = "*"
        sTempResult = concat(sTempResult, sStarString)
        if (lFootnoteCount = 1)
          lFootnoteCount = lFootnoteCount + 1
        endif
        nResultFootnote = true
      endif
    else
      if (dAbsDev > cumulative_stats->qual[d1.seq].max_result_deviation)    
        sStarString = "*"
        sTempResult = concat(sTempResult, sStarString)
        if (lFootnoteCount = 1)
          lFootnoteCount = lFootnoteCount + 1
        endif
        nResultFootnote = true
      endif
    endif
  endif
  col 36 sTempResult
  sTempString = uar_get_code_display(qr.result_status_cd) 
  col 78 sTempString
  if (perf_prsnl_exists = true)
    sTempString = trim(p.username) 
    col 95 sTempString
  endif
  if (verf_prsnl_exists = true)
    sTempString = trim(p2.username)  
    col 111 sTempString 
  elseif (autoverf_prsnl_exists = true)
    sTempString = trim(p3.username)
    col 111 sTempString 
  endif
  
  nWrappingIndent = 1
  nWrappingHangingIndent = 12
  nWrappingLeftCol = 0
  bWrappingResetValues = false
  row +1
  if (size(cumulative_stats->qual[d1.seq]->results[d2.seq].trouble_step) > 0) 
    col 9 report_elements->TroubleStep 
    sWrappingString = cumulative_stats->qual[d1.seq]->results[d2.seq].trouble_step
    wrappingString
  endif
  if (size(cumulative_stats->qual[d1.seq]->results[d2.seq].result_comment) > 0) 
    col 9 report_elements->ResultComment 
    sWrappingString = cumulative_stats->qual[d1.seq]->results[d2.seq].result_comment
    wrappingString
  endif
  if (size(cumulative_stats->qual[d1.seq]->results[d2.seq].review_note) > 0) 
    col 9 report_elements->ReviewNote 
    sWrappingString = cumulative_stats->qual[d1.seq]->results[d2.seq].review_note
    wrappingString
  endif
  
foot d1.seq 
  row + 3
  col 2 report_elements->ReportStats 
  col 33 report_elements->Mean 
  col 49 report_elements->SD 
  col 64 report_elements->CV
  col 80 report_elements->MeanDev 
  col 97 report_elements->PercentDev 
  row + 1
  col 23 report_elements->PartialLine  
  row + 1
  ; format result
  col 33 cumulative_stats->qual[d1.seq].mean
  ; format result
  sTempResult = cumulative_stats->qual[d1.seq].std_dev
  if (cumulative_stats->qual[d1.seq].max_dispersion > 0.0)
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 2) ; absolute
      if (cnvtreal(cumulative_stats->qual[d1.seq].std_dev) > cumulative_stats->qual[d1.seq].max_dispersion)
        if (lFootnoteCount = 1)
          sStarString = "*"
        else
          sStarString = "**"
        endif
        lFootnoteCount = lFootnoteCount + 1
        sTempResult = concat(sTempResult, sStarString)
        nSDFootnote = true
      endif
    endif
  endif
  col 48 sTempResult
  ; format result
  sTempResult = cumulative_stats->qual[d1.seq].co_var
  if (cumulative_stats->qual[d1.seq].max_dispersion > 0.0)
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
      if (cnvtreal(cumulative_stats->qual[d1.seq].co_var) > cumulative_stats->qual[d1.seq].max_dispersion)
        if (lFootnoteCount = 1)
          sStarString = "*"
        else
          sStarString = "**"
        endif
        lFootnoteCount = lFootnoteCount + 1
        sTempResult = concat(sTempResult, sStarString)
        nCVFootnote = true
      endif
    endif
  endif
  col 63 sTempResult 
  if (cumulative_stats->qual[d1.seq].manf_mean > 0.0)
    ; format result
    dTempResult = cnvtreal(cumulative_stats->qual[d1.seq].mean)
    dTempResult = abs(dTempResult - cumulative_stats->qual[d1.seq].manf_mean) 
    sTempResult = uar_fmt_result(lMinDigits, lMaxDigits, lMinDecimalPlaces + 1, 0, dTempResult)
    sTempResult = trim(sTempResult)
    if (cumulative_stats->qual[d1.seq].max_mean > 0.0)
      if (cumulative_stats->qual[d1.seq].deviation_type_flag = 2) ; absolute
        if (cnvtreal(sTempResult) > cumulative_stats->qual[d1.seq].max_mean)
          if (lFootnoteCount = 1)
            sStarString = "*"
          elseif(lFootnoteCount = 2)
            sStarString = "**"
          else
            sStarString = "***"
          endif
          lFootnoteCount = lFootnoteCount + 1
          sTempResult = concat(sTempResult, sStarString)
          nMeanDevFootnote = true
        endif
      endif
    endif
    col 82 sTempResult
  else
    col 82 report_elements->NA
  endif
  if (cumulative_stats->qual[d1.seq].manf_mean > 0.0)
    ; format result
    dTempResult = cnvtreal(cumulative_stats->qual[d1.seq].mean)
    dTempResult = abs(dTempResult - cumulative_stats->qual[d1.seq].manf_mean)
    dTempResult = (dTempResult / cumulative_stats->qual[d1.seq].manf_mean) * 100
    sTempResult = uar_fmt_result(lMinPercentDigits, lMaxPercentDigits, lMinPercentDecimalPlaces + 1, 0, dTempResult)
    sTempResult = trim(sTempResult)
    if (cumulative_stats->qual[d1.seq].max_mean > 0.0)
      if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
        if (cnvtreal(sTempResult) > cumulative_stats->qual[d1.seq].max_mean)
          if (lFootnoteCount = 1)
            sStarString = "*"
          elseif(lFootnoteCount = 2)
            sStarString = "**"
          else
            sStarString = "***"
          endif
          lFootnoteCount = lFootnoteCount + 1
          sTempResult = concat(sTempResult, sStarString)
          nPercentDevFootnote = true
        endif
      endif
    endif
    col 96 sTempResult
  else
    col 96 report_elements->NA
  endif
  row + 1
  col 23 report_elements->PartialLine 
  row + 1
  if (d1.seq < size(cumulative_stats->qual, 5))
    break
  endif
  
foot page
  if (nResultFootnote = true or nSDFootnote = true or nCVFootnote = true or
      nMeanDevFootnote = true or nPercentDevFootnote = true)
    row + 1
    col 2 report_elements->FootNotes 
    if (nResultFootnote = true)
      row + 1
      sTempString = concat("* ", report_elements->FootNoteResult)
      col 9 sTempString 
    endif
    if (cumulative_stats->qual[d1.seq].deviation_type_flag = 1) ; percent
      if (nCVFootnote = true)
        row + 1
        if (nResultFootnote = true)
          sTempString = concat("** ", report_elements->FootNoteCV)
        else
          sTempString = concat("* ", report_elements->FootNoteCV)
        endif
        col 9 sTempString
      endif
      if (nPercentDevFootnote = true)
        row + 1
        if (nResultFootnote = true)
          if (nCVFootnote = true)
            sTempString = concat("*** ", report_elements->FootNotePercentDev)
          else
            sTempString = concat("** ", report_elements->FootNotePercentDev)
          endif
        else
          if (nCVFootnote = true)
            sTempString = concat("** ", report_elements->FootNotePercentDev)
          else
            sTempString = concat("* ", report_elements->FootNotePercentDev)
          endif
        endif
        col 9 sTempString
      endif
    else ; absolute
      if (nSDFootnote = true)
        row + 1
        if (nResultFootnote = true)
          sTempString = concat("** ", report_elements->FootNoteSD)
        else
          sTempString = concat("* ", report_elements->FootNoteSD)
        endif
        col 9 sTempString
      endif
      if (nMeanDevFootnote = true)
        row + 1
        if (nResultFootnote = true)
          if (nSDFootnote = true)
            sTempString = concat("*** ", report_elements->FootNoteMeanDev)
          else
            sTempString = concat("** ", report_elements->FootNoteMeanDev)
          endif
        else
          if (nSDFootnote = true)
            sTempString = concat("** ", report_elements->FootNoteMeanDev)
          else
            sTempString = concat("* ", report_elements->FootNoteMeanDev)
          endif
        endif
        col 9 sTempString
      endif
    endif
  endif
  
foot report  
  row + 3
  call center(report_elements->EOR, 1, 130)
 
with nocounter, nullreport

/************************************************************************
*insert rows into qc_stat_period (if necessary)                         *
************************************************************************/

if (request->save_statistics_ind = 1)
  
  for (i = 1 to size(cumulative_stats->qual, 5))
    
    select into "nl:"
      y = seq(reference_seq,nextval)
      
    from dual  
      
    detail
      dStatId = y
        
    with nocounter

    
    insert into qc_stat_period qsp

    set qsp.qc_stat_id                = dStatId,
        qsp.lot_id                    = cumulative_stats->qual[i].lot_id,
        qsp.qc_stat_type_cd           = 0,
        qsp.qc_result_type_flag       = 0,
        qsp.pdm_param_id              = 0,
        qsp.pdm_range_id              = 0,
        qsp.control_id                = cumulative_stats->qual[i].control_id,
        qsp.service_resource_cd       = cumulative_stats->qual[i].service_resource_cd,
        qsp.service_resource_group_ind = 0,
        qsp.task_assay_cd             = cumulative_stats->qual[i].task_assay_cd,
        qsp.beg_dt_tm                 = cnvtdatetime(request->begin_dt_tm),
        qsp.end_dt_tm                 = cnvtdatetime(request->end_dt_tm),
        qsp.sum_of_results            = cumulative_stats->qual[i].sum_results,
        qsp.sum_of_squares            = cumulative_stats->qual[i].sum_sqr,
        qsp.result_cnt                = cumulative_stats->qual[i].count,
        qsp.mean                      = cnvtreal(cumulative_stats->qual[i].mean),
        qsp.arl_id                    = cumulative_stats->qual[i].arl_id,
        qsp.std_dev                   = cnvtreal(cumulative_stats->qual[i].std_dev),
        qsp.co_var                    = cnvtreal(cumulative_stats->qual[i].co_var),
        qsp.f_val                     = cnvtreal(cumulative_stats->qual[i].fval),
        qsp.z_stat                    = cnvtreal(cumulative_stats->qual[i].zstat),
        qsp.normal_cnt                = 0,
        qsp.abnormal_cnt              = 0,
        qsp.review_cnt                = 0,
        qsp.series_interval_nbr       = request->series_interval_nbr,
        qsp.series_sequence_nbr       = request->series_sequence_nbr,
        qsp.results_inc_flag          = 0,
        qsp.updt_dt_tm                = cnvtdatetime(curdate,curtime),
        qsp.updt_cnt                  = 0,
        qsp.updt_task                 = reqinfo->updt_task,
        qsp.updt_id                   = reqinfo->updt_id,
        qsp.updt_applctx              = reqinfo->updt_applctx
      
    with  nocounter

    set lErrorCode = error(sErrorMessage, 0)
    if (lErrorCode > 0)
      set reply->status_data.subeventstatus[1].TargetObjectValue = "Error inserting into qc_stat_period."
      set nFailed = true
      go to exit_script
    endif

  endfor
  
endif

#EXIT_SCRIPT

if (nFailed = true)
  set reqinfo->commit_ind = 0
else
  if (size(cumulative_stats->qual, 5) > 0)
    if(validate(qc_benchmark->output_dist) = 0)
      if (size(trim(request->output_dist)) > 0)
        set spool = value(reply->file_name) value(request->output_dist) 
      endif
    else
      if (size(trim(request->output_dist)) > 0)
        set spool = value(reply->file_name) value(qc_benchmark->output_dist)
      endif
    endif
    set reply->status_data.status = "S"
    set reqinfo->commit_ind = 1
  else
    set reply->status_data.status = "Z"
    set reqinfo->commit_ind = 0
  endif
endif

free set intervals
free set cumulative_stats
free set report_elements

end

go

;Generated by GNU enscript 1.6.4.
