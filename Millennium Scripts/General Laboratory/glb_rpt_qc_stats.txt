 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_qc_stats/glb_rpt_qc_stats.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_RPT_QC_STATS.PRG
        Object name:            GLB_RPT_QC_STATS
        Request #:              257543
 
        Product:                General Lab - Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Calculate statistics for a given time period
                                and geterate report
 
        Tables read:            n/a
 
        Tables updated:         qc_stat_period
 
        Executing from:         General Lab QC Inquiry
 
        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/10/97 Chad Moats           Initial Release                     *
;    *001 11/18/97 Hal Patchen          Add subsection level data map check *
;    *002 12/12/97 Kevin Brunner        Add auto verify logic               *
;    *003 12/15/97 Chad Moats           Only show stats if count > 0        *
;    *004 01/22/98 Chad Moats           Add operaions logic                 *
;    *005 06/02/98 Chad Moats           Data map plus one for calcs         *
;    *006 09/16/98 Chad Moats           Add Patient Data logic              *
;    *007 11/23/99 Gary Runde           Adjust column headers               *
;    *008 12/07/99 Gary Runde           Internationalization                *
;    *009 03/23/04 Craig Sumrall        Added parsers for select use and new*
;    *                                  flags to the request                *
;    *010 07/22/05 Scott Sundahl        Analytical series enhancement       *
;    *011 10/20/05 Matt Schile			Add head on qsp.qc_stat_id and      *
;										changed to Oracle outerjoin         *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
      drop program GLB_RPT_QC_STATS:dba go
      create program GLB_RPT_QC_STATS:dba
 
;008 Start New Code
 
; free record structures
free set captions
free set reply
free set lot
free set holdstat
free set cumrec
free set ops_params
free set assay_result_type
free set formatted 
 
; I18N INCLUDE FILE
%i cclsource:i18n_uar.inc
 
; INITIALIZE VARIABLE THAT KEEPS HANDLE TO I18N DATA
set i18nHandle = 0
 
; CALL uar_i18nlocalizationinit
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)
 
record captions
(
1 rpt_no = vc
1 glb_rpt = vc
1 time = vc
1 stat_frm = vc
1 to_ = vc
1 prep = vc
1 ctrl_mat = vc
1 pat_dat = vc
1 serv_res = vc
1 asy = vc
1 lot_no = vc
1 dt_rng = vc
1 cnt = vc
1 mean = vc
1 std_dev = vc
1 cv = vc
1 f_val = vc
1 z_stat = vc
1 norm = vc
1 abnorm = vc
1 rev = vc
1 na_ = vc
1 lot_to = vc
1 pg = vc
1 series_value = vc
1 series_interval = vc
)
 
Set captions->rpt_no = uar_i18ngetmessage(i18nHandle,"rpt_no","REPORT NO:  ")
Set captions->glb_rpt = uar_i18ngetmessage(i18nHandle,"glb_rpt","GLB_RPT_QC_STATS.PRG")
Set captions->time = uar_i18ngetmessage(i18nHandle,"time","TIME: ")
Set captions->stat_frm = uar_i18ngetmessage(i18nHandle,"stat_frm","STATISTICS FROM ")
Set captions->to_ = uar_i18ngetmessage(i18nHandle,"to_","TO ")
Set captions->prep = uar_i18ngetmessage(i18nHandle,"prep","PREPARED: ")
Set captions->ctrl_mat = uar_i18ngetmessage(i18nHandle,"ctrl_mat","CONTROL MATERIAL:")
Set captions->pat_dat = uar_i18ngetmessage(i18nHandle,"pat_dat","Patient Data")
Set captions->serv_res = uar_i18ngetmessage(i18nHandle,"serv_res","TEST SITE:")
Set captions->asy = uar_i18ngetmessage(i18nHandle,"tsk_asy","ASSAY:")
Set captions->lot_no = uar_i18ngetmessage(i18nHandle,"lot_no","LOT NUMBER")
Set captions->dt_rng = uar_i18ngetmessage(i18nHandle,"dt_rng","DATE RANGE")
Set captions->cnt = uar_i18ngetmessage(i18nHandle,"cnt","COUNT")
Set captions->mean = uar_i18ngetmessage(i18nHandle,"mean","MEAN")
Set captions->std_dev = uar_i18ngetmessage(i18nHandle,"std_dev","STD DEV")
Set captions->cv = uar_i18ngetmessage(i18nHandle,"cv","CV")
Set captions->f_val = uar_i18ngetmessage(i18nHandle,"f_val","F-VAL")
Set captions->z_stat = uar_i18ngetmessage(i18nHandle,"z_stat","Z-STAT")
Set captions->norm = uar_i18ngetmessage(i18nHandle,"norm","NORMAL")
Set captions->abnorm = uar_i18ngetmessage(i18nHandle,"abnorm","ABNORMAL")
Set captions->rev = uar_i18ngetmessage(i18nHandle,"rev","REVIEW")
Set captions->na_ = uar_i18ngetmessage(i18nHandle,"na","N/A")
Set captions->lot_to = uar_i18ngetmessage(i18nHandle,"lot_to","LOT TO DATE:")
Set captions->pg = uar_i18ngetmessage(i18nHandle,"pg","PAGE ")
set captions->series_value = uar_i18ngetmessage(i18nHandle,"series_value","SER VAL") 
set captions->series_interval = uar_i18ngetmessage(i18nHandle,"series_interval","SER INT")
 
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 control_id              = f8
         1 service_resource_cd     = f8
         1 task_assay_cd           = f8
         1 beg_dt_tm               = dq8
         1 end_dt_tm               = dq8
         1 ops_ind                 = i2
         1 printer_name            = vc
         1 batch_selection         = vc
         1 output_dist             = vc
         1 ops_date                = dq8
         1 qc_result_type_flag     = i2
         1 controls[*]
           2 control_id            = f8
         1 test_sites[*]
           2 service_resource_cd   = f8
         1 assays[*]
           2 task_assay_cd         = f8
         1 lot_to_date_ind         = i4
      )
 
record reqinfo
( 1 commit_ind  = i2
  1 updt_id     = f8
  1 position_cd = f8
  1 updt_app    = i4
  1 updt_task   = i4
  1 updt_req    = i4
  1 updt_applctx= i4
)
*/
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/
 
      record reply
      (
         1 status_data
           2 status                = c1
           2 subeventstatus[1]
             3 OperationName       = c15
             3 OperationStatus     = c1
             3 TargetObjectName    = c15
             3 TargetObjectValue   = vc
         1 file_name               = vc
      )
 
      record lot
      (
         1 lots[*]
           2 lot_sequence                 = i4
           2 lot_id                       = f8
           2 lot_number                   = c30
           2 receive_dt_tm                = dq8
           2 lot_expiration               = dq8
           2 control_id                   = f8
           2 control_name                 = c20
           2 lot_used                     = i2
       )
 
      record holdstat
      (
         1 stats[*]
           2 mean                         = f8
           2 sd                           = f8
           2 lot_id                       = f8
           2 control_id                   = f8
           2 service_resource_cd          = f8
           2 task_assay_cd                = f8
       )
 
      record cumrec
      (
         1 cums[*]
           2 cum_sequence                 = i4
           2 control_name                 = c25
           2 task_assay_cd                = f8
           2 lot_id                       = f8
           2 lot_number                   = c30
           2 receive_dt_tm                = dq8
           2 lot_sequence                 = i4
           2 cum_mean                     = f8
           2 cum_sum_sqr                  = f8
           2 cum_count                    = f8
           2 expected_mean                = f8
           2 expected_std_dev             = f8
           2 normal_cnt                   = i4
           2 abnormal_cnt                 = i4
           2 review_cnt                   = i4
           2 ltd_cum_mean                 = f8
           2 ltd_cum_sum_sqr              = f8
           2 ltd_cum_count                = f8
           2 ltd_normal_cnt               = i4
           2 ltd_abnormal_cnt             = i4
           2 ltd_review_cnt               = i4
           2 service_resource_cd          = f8
       )
 
      record ops_params
      (
         1  qual[6]
            2  param                     = c100
      )
 
      record assay_result_type
      (
         1  qual[*]
            2  task_assay_cd            = f8
            2  result_type_cd           = f8
      )
 
         ;* Data used to format a numeric result
         record formatted
         (
            01  template     = c33
            01  negative_ind = i2
            01  result_value = c36
         )
 
     #Script
      set reply->status_data->status = "F"
      set s_cnt = 0
      set arg_min_digits = 0
      set arg_max_digits = 0
      set arg_min_dec_places = 0
      set arg_less_great_flag = 0
      set arg_raw_value = 0.0
      declare uar_fmt_result (min, max, dec, flag, result) = c50 with protect, noconstant("")
      set rslt = fillstring(50," ")
      set tempstring = "        "
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty
 
      set RESULT_STATUS_CODESET       = 1901
      set RESULT_STATUS_ACCEPT_CDF    = "ACCEPT"
      set RESULT_STATUS_VERIFIED_CDF  = "VERIFIED"
      set RESULT_STATUS_AUTO_VERF_CDF = "AUTOVERIFIED"
      set RESULT_STATUS_REVIEWED_CDF = "REVIEWED"
      set RESULT_STATUS_CORRECTED_CDF = "CORRECTED"
      set RESULT_STATUS_CHANGED_CDF = "CHANGE"
      set RESULT_STATUS_REJECTED_CDF = "REJECT"
      set SERVICE_RESOURCE_TYPE_CODESET = 223
      set SERV_RES_SUBSECTION_CDF = "SUBSECTION"
      declare serv_res_subsection_cd = f8
      declare ALPHA_CD = f8
      declare NUMERIC_CD = f8
      declare WITHIN_RANGE_CD = f8
      declare ALP_NORMAL_CD = f8
      declare ALP_ABNORMAL_CD = f8
      declare ALP_REVIEW_CD = f8
      declare result_status_accept_cd = f8
      declare result_status_reviewed_cd  = f8
      declare result_status_verified_cd  = f8
      declare result_status_auto_verf_cd = f8
      declare result_status_corrected_cd = f8
      declare result_status_changed_cd = f8
      declare result_status_rejected_cd = f8
      declare value = f8
      declare lotnumber = c15
      declare mean = f8
      declare std_dev = f8
      declare variance1 = f8
      declare variance2 = f8
      declare cum_mean = f8
      declare cum_std_dev = f8
      declare nbrdays = i2
      set cum_mean = 0.0
      set cum_std_dev = 0.0
      set hold_lot_seq = 0
      set x = 0
      set x2 = 0
      set cum_cnt = 0
      set lot_cnt = 0
      set l_cnt = 0
      set mean = 0.00
      set count = 0
      set std_dev = 0.00
      set variance1 = 0.00
      set variance2 = 0.00
      set value = 0.00
      set rslt = fillstring(50, " ")
      set hold_lot_dt_tm = request->beg_dt_tm
      set formatted_dt_tm = datetimeadd(request->end_dt_tm, -1)
      set alpha_ind = 0
      set assay_cnt = 0
 
      declare lControlslist                        = i4 with protect, constant(size(request->controls,5))
      declare lTestSiteslist                       = i4 with protect, constant(size(request->test_sites,5))
      declare lProcedureslist                      = i4 with protect, constant(size(request->assays,5))
      declare sControl_Parser                      = vc with protect, noconstant("")
      declare sTestsite_Parser                     = vc with protect, noconstant("")
      declare sProcedure_Parser                    = vc with protect, noconstant("")
      declare nControlCnt                          = i2 with protect, noconstant(0)
      declare nTestsiteCnt                         = i4 with protect, noconstant(0)
      declare nProcedureCnt                        = i4 with protect, noconstant(0)
      declare sProcedures                          = vc with protect, noconstant("")
      declare sTestsites                           = vc with protect, noconstant("")
      declare GetTestsiteParser(sTable)            = vc
      declare GetProcedureParser(sTable)           = vc
      declare GetControlParser(sTable)             = vc
      declare nFound                               = i2 with protect, noconstant(0)
      
      declare sNA                                  = vc with protect, noconstant(" ")
      declare sFirst                               = vc with protect, noconstant(" ")
      declare sLast                                = vc with protect, noconstant(" ")
      
      set sNA = uar_i18ngetmessage(i18nHandle,"sNA","N/A")
      set sFirst = uar_i18ngetmessage(i18nHandle,"sFirst","First")
      set sLast = uar_i18ngetmessage(i18nHandle,"sLast","Last")
 
/************************************************************************
*build parsers (2)                                                      *
************************************************************************/
 
subroutine GetTestsiteParser(sTable)
  if( validate(stat_req->end_dt_tm) = 0)/*determine if stat_req exists to build parser*/
    if (lTestSiteslist > 0)
      if (sTable =  "qsp")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,qsp.service_resource_cd,",
            "request->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "q")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "q.service_resource_cd,request->test_sites[nTestsiteCnt].service_resource_cd)")
      endif
    elseif (request->service_resource_cd > 0)
      if (sTable =  "qsp")
    	  set sTestsite_Parser = "qsp.service_resource_cd = request->service_resource_cd"
      elseif(sTable = "q")
        set sTestsite_Parser = "q.service_resource_cd = request->service_resource_cd"
      endif
    else
  	 	set sTestsite_Parser = "1 = 1"
  	endif
    return(sTestsite_Parser)
  else  /* else for use of stat_req if its available to build parser*/
    if (lTestSiteslist > 0)
      if (sTable =  "qsp")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,qsp.service_resource_cd,",
            "stat_req->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "q")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "q.service_resource_cd,stat_req->test_sites[nTestsiteCnt].service_resource_cd)")
      endif
    else
  	 	set sTestsite_Parser = "1 = 1"
  	endif
    return(sTestsite_Parser)
  endif
end
 
 
subroutine GetProcedureParser(sTable)
  if( validate(stat_req->end_dt_tm) = 0)/*determine if stat_req exists to build parser*/
    if (lProcedureslist > 0)
  	  if (sTable = "qsp")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "qsp.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "q")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "q.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
  		endif
  	elseif (request->task_assay_cd > 0)
   		if (sTable = "qsp")
   		 	set sProcedure_Parser = "qsp.task_assay_cd = request->task_assay_cd"
  	  elseif(sTable = "q")
  	    set sProcedure_Parser = "q.task_assay_cd = request->task_assay_cd"
      endif
  	else
  		set sProcedure_Parser = "1 = 1"
  	endif
    return(sProcedure_Parser)
  else  /* else for use of stat_req if its available to build parser*/
    if (lProcedureslist > 0)
  	  if (sTable = "qsp")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "qsp.task_assay_cd, stat_req->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "q")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "q.task_assay_cd, stat_req->assays[nProcedureCnt].task_assay_cd)")
  		endif
  	else
  		set sProcedure_Parser = "1 = 1"
  	endif
    return(sProcedure_Parser)
  endif
end
 
subroutine GetControlParser(sTable)
 
 
  if( validate(stat_req->end_dt_tm) = 0)/*determine if stat_req exists to build parser*/
    if (lControlslist > 0)
      if (sTable =  "c")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,c.control_id,",
            "request->controls[nControlCnt].control_id)")
      elseif (sTable = "q")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "q.control_id,request->controls[nControlCnt].control_id)")
      elseif (sTable = "qsp")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "qsp.control_id,request->controls[nControlCnt].control_id)")
      endif
    elseif (request->control_id > 0)
      if (sTable =  "c")
   	    set sControl_Parser = "c.control_id = request->control_id"
 	    elseif(sTable = "q")
        set sControl_Parser = "q.control_id = request->control_id"
      elseif(sTable = "qsp")
        set sControl_Parser = "qsp.control_id = request->control_id"
      endif
    else
 	 	  set sControl_Parser = "1 = 1"
 	  endif
    return(sControl_Parser)
  else/* else for use of stat_req if its available to build parser*/
    if (lControlslist > 0)
      if (sTable =  "c")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,c.control_id,",
            "stat_req->controls[nControlCnt].control_id)")
      elseif (sTable = "q")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "q.control_id,stat_req->controls[nControlCnt].control_id)")
      elseif (sTable = "qsp")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "qsp.control_id,stat_req->controls[nControlCnt].control_id)")
      endif
    else
 	 	  set sControl_Parser = "1 = 1"
 	  endif
    return(sControl_Parser)
  endif
end
 
 /***********************************************************************
 * Load code values                                                     *
 ***********************************************************************/
 			set ALPHA_CD = uar_get_code_by("MEANING", 289, "2")
 			set NUMERIC_CD = uar_get_code_by("MEANING", 289, "3")
 			set WITHIN_RANGE_CD = uar_get_code_by("MEANING", 1902, "WITHIN_RANGE")
 			set ALP_NORMAL_CD = uar_get_code_by("MEANING", 1902, "ALP_NORMAL")
 			set ALP_ABNORMAL_CD = uar_get_code_by("MEANING", 1902, "ALP_ABNORMAL")
 			set ALP_REVIEW_CD = uar_get_code_by("MEANING", 1902, "ALP_REVIEW")
 
      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
       	set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif
 
 /***********************************************************************
 * Load result status code set                                          *
 ***********************************************************************/
 			set result_status_accept_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, nullterm(RESULT_STATUS_ACCEPT_CDF))
 			set result_status_reviewed_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, nullterm(RESULT_STATUS_REVIEWED_CDF))
 			set result_status_verified_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, nullterm(RESULT_STATUS_VERIFIED_CDF))
 			set result_status_auto_verf_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, nullterm(RESULT_STATUS_AUTO_VERF_CDF))
 			set result_status_corrected_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, nullterm(RESULT_STATUS_CORRECTED_CDF))
 			set result_status_changed_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, nullterm(RESULT_STATUS_CHANGED_CDF))
 			set result_status_rejected_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, nullterm(RESULT_STATUS_REJECTED_CDF))

      set error_check = ERROR(sErrorMsg,0)   ;get error message
     	if (error_check != 0)
       	set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif
 
/***********************************************************************
 * Load operations parameter list                                       *
 ***********************************************************************/
         if (trim(request->batch_selection) > " ")                                              
            set batch_selection_cd = cnvtreal(trim(request->batch_selection))                   
            set parm_string = fillstring(100, " ")                                              
 
            select into "nl:"                                                                   
              cv.code_value                                                                     
            from                                                                                
              code_value cv                                                                     
                where cv.code_set = 1950
										and cv.active_ind = 1
										and cv.cdf_meaning in ("PSTAT", "STAT") and  ;004
                trim(cv.display_key) = trim(cnvtupper(cnvtalphanum(request->batch_selection))) 
            detail                                                                              
               cdf_string = trim(cv.cdf_meaning)                                              
               parm_string = trim(cv.definition)                                                
            with                                                                                
               nocounter                                                                        
 
            if (curqual = 0)                                                                    
                select into "nl:"                                                               
                        cv.code_value                                                           
                from                                                                            
                        code_value cv                                                           
                where cv.code_set = 1950 and cv.active_ind = 1
										and cv.cdf_meaning in ("STAT", "PSTAT")      ;004
                and cv.code_value = batch_selection_cd                                          
                detail                                                                          
                        cdf_string = trim(cv.cdf_meaning)                                       
                        parm_string = trim(cv.definition)                                       
                with                                                                            
                nocounter                                                                       
                if (curqual = 0)                                                                
                        set reply->status_data->status = "Z"                                    
                        go to exit_script                                                       
                endif                                                                           
            endif                                                                               
 
            ;* Locate the individual parameters in parm_string                                  
            ;* and put them in the ops_params array.                                            
            set ptr = 1                                                                         
            set start_ptr = 1                                                                   
            set param_idx = 1                                                                   
            for (param_idx = 1 TO 6)                                                            
               set ptr = findstring(",", parm_string, start_ptr)                                
               if (ptr < 1)                                                                     
                  set ptr = 100                                                                 
               endif                                                                            
               set parm_len = ptr - start_ptr                                                   
               set ops_params->qual[param_idx].param =                                          
                 trim(substring(start_ptr, value(parm_len), parm_string), 3)                    
               set start_ptr = ptr + 1                                                          
            endfor                                                                              
 
            ;* Use array of ops parameters to set request fields.                               
            set request->control_id = cnvtreal(ops_params->qual[1].param)                       
            set request->service_resource_cd = cnvtreal(ops_params->qual[2].param)              
            set request->task_assay_cd = cnvtreal(ops_params->qual[3].param)                    
            set nbrdays = cnvtreal(ops_params->qual[4].param)                                   
            set nbrdays = nbrdays * -1                                                          
            set request->end_dt_tm = cnvtdatetime(request->ops_date)                            
            set request->beg_dt_tm = cnvtdatetime(request->ops_date)                            
            set request->beg_dt_tm = datetimeadd(request->beg_dt_tm, nbrdays)                   
            set request->ops_ind = cnvtreal(ops_params->qual[5].param)                          
            set request->qc_result_type_flag = cnvtreal(ops_params->qual[6].param)              
            set request->printer_name = request->output_dist                                    
            set hold_lot_dt_tm = request->beg_dt_tm                                             
         endif                                                                                  
 
      if (request->qc_result_type_flag = NULL)
        set request->qc_result_type_flag = 0
      endif
 
 /***********************************************************************
 * Load service resource type code values                               *
 ***********************************************************************/
 			set serv_res_subsection_cd = uar_get_code_by("MEANING", SERVICE_RESOURCE_TYPE_CODESET, nullterm(SERV_RES_SUBSECTION_CDF))

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
	      set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif
 
/********************************************************************/
/* SELECT LOT NUMBERS                                               */
/********************************************************************/
 
 
 
     if (request->qc_result_type_flag = 0)
     SELECT
       into "nl:"
         c.lot_id,
         c.lot_number,
         cm.control_id,
         rlr.lot_id,
         arl.lot_id
     FROM
         control_lot c,
         control_material cm,
         resource_lot_r rlr,
         assay_resource_lot arl
     PLAN c
        where parser(GetControlParser("c"))
     JOIN cm
        where cm.control_id = c.control_id
     JOIN rlr
        where rlr.lot_id = c.lot_id
     JOIN arl
        where arl.lot_id = rlr.lot_id and
        arl.service_resource_cd = rlr.service_resource_cd and
        arl.active_ind = 1
 
     order by c.lot_id
 
     HEAD c.lot_id
        lot_cnt = lot_cnt + 1
        if (mod(lot_cnt,5) = 1)
            stat = alterlist(lot->lots,lot_cnt + 5)
        endif
        lot->lots[lot_cnt].lot_sequence = lot_cnt,
        lot->lots[lot_cnt].lot_id = c.lot_id,
        lot->lots[lot_cnt].lot_number = c.lot_number,
        lot->lots[lot_cnt].receive_dt_tm = c.receive_dt_tm,
        lot->lots[lot_cnt].lot_expiration = c.expiration_dt_tm,
        lot->lots[lot_cnt].control_name = cm.short_description,
        lot->lots[lot_cnt].control_id = cm.control_id
         x = datetimediff(c.receive_dt_tm, hold_lot_dt_tm)
 
         if (x < 0 and c.receive_dt_tm > 0)
           hold_lot_dt_tm = c.receive_dt_tm
         endif
     DETAIL
        s_cnt = s_cnt + 1
        if (mod(s_cnt,5) = 1)
            stat = alterlist(holdstat->stats,s_cnt + 5)
        endif
        holdstat->stats[s_cnt].mean = arl.mean,
        holdstat->stats[s_cnt].sd = arl.statistical_std_dev,
        holdstat->stats[s_cnt].lot_id = arl.lot_id,
        holdstat->stats[s_cnt].service_resource_cd = arl.service_resource_cd,
        holdstat->stats[s_cnt].task_assay_cd = arl.task_assay_cd,
        holdstat->stats[s_cnt].control_id = c.control_id
     WITH
        nocounter
 
         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif
 
/********************************************************************/
/* Get Lot To Date Stats                                            */
/********************************************************************/
 
     if(request->lot_to_date_ind = 1)
       set request->beg_dt_tm = hold_lot_dt_tm
     endif
 
     SELECT
       into "nl:"
         q.qc_result_id,
         performdatetime = cnvtdatetime(q.perform_dt_tm),
         q.task_assay_cd,
         q.control_id,
         q.lot_id
       FROM
         qc_result q
       PLAN q
         where parser(GetProcedureParser("q")) and
               parser(GetControlParser("q")) and
               parser(GetTestSiteParser("q")) and
               (q.perform_dt_tm between cnvtdatetime(hold_lot_dt_tm) and cnvtdatetime(request->end_dt_tm)) and
               q.result_status_cd in ( result_status_accept_cd,
                                       result_status_verified_cd,
                                       result_status_auto_verf_cd,
                                       result_status_changed_cd,
                                       result_status_reviewed_cd,
                                       result_status_corrected_cd,
                                       result_status_rejected_cd)
 
       ORDER BY
         q.service_resource_cd,
         q.task_assay_cd,
         q.lot_id,
         q.qc_result_id
 
      HEAD q.service_resource_cd
         row +0
 
      HEAD q.task_assay_cd
         for (x=1 to lot_cnt)
           cum_cnt = cum_cnt + 1
           if (mod(cum_cnt,5) = 1)
               stat = alterlist(cumrec->cums,cum_cnt + 5)
           endif
           cumrec->cums[cum_cnt].cum_sequence = cum_cnt,
           cumrec->cums[cum_cnt].lot_sequence = lot->lots[x].lot_sequence,
           cumrec->cums[cum_cnt].lot_number = lot->lots[x].lot_number,
           cumrec->cums[cum_cnt].lot_id = lot->lots[x].lot_id,
           cumrec->cums[cum_cnt].receive_dt_tm = lot->lots[x].receive_dt_tm,
           cumrec->cums[cum_cnt].control_name = lot->lots[x].control_name,
           cumrec->cums[cum_cnt].task_assay_cd = q.task_assay_cd,
           cumrec->cums[cum_cnt].service_resource_cd = q.service_resource_cd
         endfor
         assay_cnt = assay_cnt + 1                                              
         if (mod(assay_cnt ,5) = 1)                                             
             stat = alterlist(assay_result_type->qual, assay_cnt + 5)           
         endif                                                                  
         assay_result_type->qual[assay_cnt].task_assay_cd = q.task_assay_cd     
         assay_result_type->qual[assay_cnt].result_type_cd = q.result_type_cd   
       HEAD q.lot_id
         x = 0
       HEAD q.qc_result_id
         for (x = 1 to lot_cnt)
           if (q.lot_id = cumrec->cums[x].lot_id)
              hold_lot_seq = lot->lots[x].lot_sequence
              x = lot_cnt + 1
           endif
         endfor
         for (x = 1 to cum_cnt)
           if (q.lot_id = cumrec->cums[x].lot_id and q.task_assay_cd = cumrec->cums[x].task_assay_cd and
              q.service_resource_cd = cumrec->cums[x].service_resource_cd)
             eval_bdate = datetimediff(q.perform_dt_tm, request->beg_dt_tm)
             eval_edate = datetimediff(q.perform_dt_tm, request->end_dt_tm)
             cumrec->cums[x].expected_mean = q.mean,
             cumrec->cums[x].expected_std_dev = q.statistical_std_dev
             if (q.result_type_cd != alpha_cd)
               if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
                 cumrec->cums[x].cum_mean = cumrec->cums[x].cum_mean + q.result_value_numeric
                 cumrec->cums[x].cum_sum_sqr = cumrec->cums[x].cum_sum_sqr + q.result_value_numeric ** 2
                 cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
               endif
               cumrec->cums[x].ltd_cum_mean = cumrec->cums[x].ltd_cum_mean + q.result_value_numeric
               cumrec->cums[x].ltd_cum_sum_sqr = cumrec->cums[x].ltd_cum_sum_sqr + q.result_value_numeric ** 2
               cumrec->cums[x].ltd_cum_count = cumrec->cums[x].ltd_cum_count + 1
 
               cumrec->cums[x].normal_cnt = 0
               cumrec->cums[x].abnormal_cnt = 0
               cumrec->cums[x].review_cnt = 0
               cumrec->cums[x].ltd_normal_cnt = 0
               cumrec->cums[x].ltd_abnormal_cnt = 0
               cumrec->cums[x].ltd_review_cnt = 0
             else
               if (q.result_process_cd = ALP_NORMAL_CD or q.result_process_cd = WITHIN_RANGE_CD)
                 if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
                   cumrec->cums[x].normal_cnt = cumrec->cums[x].normal_cnt + 1
                   cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                 endif
                 cumrec->cums[x].ltd_normal_cnt = cumrec->cums[x].ltd_normal_cnt + 1
                 cumrec->cums[x].ltd_cum_count = cumrec->cums[x].ltd_cum_count + 1
               elseif (q.result_process_cd = ALP_ABNORMAL_CD)
                 if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
                   cumrec->cums[x].abnormal_cnt = cumrec->cums[x].abnormal_cnt + 1
                   cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                 endif
                 cumrec->cums[x].ltd_abnormal_cnt = cumrec->cums[x].ltd_abnormal_cnt + 1
                 cumrec->cums[x].ltd_cum_count = cumrec->cums[x].ltd_cum_count + 1
               elseif (q.result_process_cd = ALP_REVIEW_CD)
                 if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
                   cumrec->cums[x].review_cnt = cumrec->cums[x].review_cnt + 1
                   cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                 endif
                 cumrec->cums[x].ltd_review_cnt = cumrec->cums[x].ltd_review_cnt + 1
                 cumrec->cums[x].ltd_cum_count = cumrec->cums[x].ltd_cum_count + 1
               endif
               cumrec->cums[x].cum_mean = 0
               cumrec->cums[x].cum_sum_sqr = 0
               cumrec->cums[x].ltd_cum_mean = 0
               cumrec->cums[x].ltd_cum_sum_sqr = 0
             endif
             x = cum_cnt + 1
           endif
         endfor
       DETAIL
         x=0
       FOOT q.lot_id
         x= 0
       FOOT q.task_assay_cd
         x=0
       WITH
         nocounter
 
     endif
 
 
      declare FormatStatResult( result_value ) = vc
      subroutine FormatStatResult( result_value )
           set oldValue = trim(result_value, 3)
           set first = substring(1,1, oldValue)
           set second = substring(2,1, oldValue)
           set length = size(oldValue)
           set newValue = "                                             "
           if (first = ".")
              set newValue = build("0", oldValue)
           elseif ((first = "-") and (second = "."))
              set last = substring(2, (length - 1), oldValue)
              set newValue = build(first, "0", last)
           else
              set newValue = oldValue
           endif
 
           return (newValue)
       end
 
/********************************************************************/
/* SELECT QC STATS                                                  */
/********************************************************************/
;execute cpm_create_file_name "GLB_QST", "txt"
execute cpm_create_file_name "QST", "txt" 
 
if (cpm_cfn_info->status_data.status != "S")
  set reply->status_data->status = "F"
  set reply->status_data->subeventstatus[1]->operationname = "get"
  set reply->status_data->subeventstatus[1]->operationstatus = "F"
  set reply->status_data->subeventstatus[1]->targetobjectname = "filename"
  set reply->status_data->subeventstatus[1]->targetObjectValue = "Filename Retrieval Unsuccessful"
  go to exit_script
endif
 
set reply->file_name = cpm_cfn_info->file_name_path
 
      SELECT
       into cpm_cfn_info->file_name_path
         qsp.qc_stat_id,
         qsp.task_assay_cd,
         qsp.beg_dt_tm,
         qsp.lot_id,
	       break_lot_pdm	=  concat(cnvtstring(qsp.lot_id,32,0), cnvtstring(qsp.pdm_range_id,32,0)),
         cl.lot_id,
         hold_lot_number = substring(1, 50,cl.lot_number),
         cl.receive_dt_tm,
         cm.description,
         dta.task_assay_cd,
         dta.mnemonic,
         data_map_exists = evaluate(nullind(dm.seq), 1, "N", "Y"),                   
         dm.task_assay_cd,                                             
         d_rg.seq,                                                     
         rg_exists = decode(rg.seq, "Y", "N"),                         
         rg.parent_service_resource_cd,                                
         rg.child_service_resource_cd,                                 
         rg.resource_group_type_cd,                                    
         rg.root_service_resource_cd                                 
      FROM
         qc_stat_period qsp,
         control_material cm,
         control_lot cl,
         discrete_task_assay dta,                                   
         data_map dm,                                                  
         (dummyt d_rg with seq = 1),                                   
         resource_group rg                                            
      PLAN qsp
         where parser(GetControlParser("qsp")) and
         parser(GetTestSiteParser("qsp")) and
         parser(GetProcedureParser("qsp")) and
         (qsp.ops_ind = 1 or request->ops_ind = 0) and
	       (qsp.qc_result_type_flag = request->qc_result_type_flag) and
         ((qsp.beg_dt_tm between cnvtdate(request->beg_dt_tm) and cnvtdate(request->end_dt_tm)) or
         (qsp.end_dt_tm between cnvtdate(request->beg_dt_tm) and cnvtdate(request->end_dt_tm)))
      JOIN dta
         where dta.task_assay_cd = qsp.task_assay_cd
      JOIN cl
         where cl.lot_id = outerjoin(qsp.lot_id)
      JOIN cm
         where cm.control_id = outerjoin(cl.control_id)
      JOIN dm 
         where dm.task_assay_cd = outerjoin(qsp.task_assay_cd) 
           and dm.active_ind = outerjoin(1) 
      JOIN d_rg                                                        
         where d_rg.seq = 1                                            
      JOIN rg                                                          
         where rg.parent_service_resource_cd = dm.service_resource_cd
           and rg.child_service_resource_cd = qsp.service_resource_cd
           and rg.resource_group_type_cd = serv_res_subsection_cd
           and rg.root_service_resource_cd = 0.0
      ORDER BY
         qsp.control_id,
         qsp.service_resource_cd,
         qsp.task_assay_cd,
         break_lot_pdm,
         qsp.qc_stat_id

      HEAD REPORT
%i cclsource:glb_rpt_macros.inc
      HEAD PAGE
         COL 1    captions->rpt_no                
         COL 13   captions->glb_rpt                  
	 			 if (request->qc_result_type_flag = 0)
           CALL CENTER(uar_i18ngetmessage(i18nHandle,"qc_rpt",("QC STATISTICS REPORT")), 1, 132)
	 			 else
           CALL CENTER(uar_i18ngetmessage(i18nHandle,"pdm_rpt",("PDM STATISTICS REPORT")), 1, 132)
	 			 endif
         COL 107  captions->time                         
         COL 117 CURTIME "@TIMENOSECONDS;;M"                 
         ROW+1
         col 1   captions->stat_frm                 
         col 17 request->beg_dt_tm "@SHORTDATE;;Q"                 
         col 26  captions->to_             
         request->end_dt_tm = datetimeadd(request->end_dt_tm, -1)
         col 29 request->end_dt_tm "@SHORTDATE;;Q"           
         request->end_dt_tm = datetimeadd(request->end_dt_tm, 1)
         COL 107  captions->prep               
         COL 117 CURDATE "@SHORTDATE;;Q"            
         ROW+2
         COL 1     captions->ctrl_mat               
		  	 if (request->qc_result_type_flag = 0)
           control = substring(1, 20, cm.short_description)
 				 else
           control = captions->pat_dat              
	  		 endif
         col 20   control
         row + 1
         COL 1    captions->serv_res         
         service_resource = trim(UAR_GET_CODE_DISPLAY(qsp.service_resource_cd),3)
         col 20  service_resource
         row + 2
        
      HEAD qsp.control_id
        if (row > 7)
          break
        endif
 
      HEAD qsp.service_resource_cd
        if (row > 7)
          break
        endif 
 
      HEAD qsp.task_assay_cd
         if (Row > 55)
           BREAK
         endif
         col 1   captions->asy
         task_assay = substring(1,20, dta.mnemonic)
         col 11 task_assay
         row + 1
         underscore = fillstring(130,"-")
         col 1  underscore
         row + 1
         col 1  captions->lot_no
         col 22 captions->dt_rng
         col 43 captions->cnt
         ;find out if current assay is a alpha result or not
         for (Acnt = 1 to assay_cnt)
            if (qsp.task_assay_cd = assay_result_type->qual[Acnt].task_assay_cd)
               if (assay_result_type->qual[Acnt].result_type_cd = alpha_cd)
                   alpha_ind = 1
               else
                   alpha_ind = 0
               endif
               Acnt = assay_cnt + 1
            endif
         endfor
         if (alpha_ind = 0)
           col 53  captions->MEAN
           col 63  captions->STD_DEV
           col 78  captions->CV
           col 90  captions->F_VAL
           col 100 captions->Z_STAT
           col 111 captions->series_value
           col 122 captions->series_interval 
         else
           col 53  captions->norm
           col 63  captions->abnorm
           col 78  captions->rev
           col 89  captions->series_value 
           col 100 captions->series_interval
         endif
         row + 1
         col 1   underscore
         row + 1
      HEAD break_lot_pdm 
         if (row > 55)
           BREAK
         endif
         result_cnt = 0
         arg_max_digits = 8                                            
         arg_min_digits = 1                                         
         arg_min_dec_places = 2                                     
         data_map_level = 0
      HEAD qsp.qc_stat_id
      	 if (row > 55)
           BREAK
         endif                                         
      DETAIL
         if (row > 55)
           BREAK
         endif
         if (data_map_exists = "Y")                            
            ;* Check for exact match on QC data map                   
            if (data_map_level <= 3                                   
            and dm.data_map_type_flag = 1                              
            and dm.service_resource_cd > 0.0                            
            and dm.service_resource_cd = qsp.service_resource_cd)       
               data_map_level = 4                                      
               arg_max_digits = dm.max_digits                          
               arg_min_digits = dm.min_digits                          
               arg_min_dec_places =                                   
                 dm.min_decimal_places                                
            endif                                                      
            ;* Check for exact match on data map                     
            if (data_map_level <= 2                                    
            and dm.data_map_type_flag = 0                              
            and dm.service_resource_cd > 0.0                         
            and dm.service_resource_cd = qsp.service_resource_cd)      
               data_map_level = 3                                     
               arg_max_digits = dm.max_digits                         
               arg_min_digits = dm.min_digits                       
               arg_min_dec_places =                                   
                 dm.min_decimal_places                               
            endif                                                      
            ;* Check for subsection level data map                     
            if (data_map_level <= 1                                    
            and dm.data_map_type_flag = 0                              
            and dm.service_resource_cd > 0.0                            
            and rg_exists = "Y"                                         
            and rg.parent_service_resource_cd = dm.service_resource_cd  
            and rg.child_service_resource_cd = qsp.service_resource_cd) 
               data_map_level = 2                                  
               arg_max_digits = dm.max_digits                     
               arg_min_digits = dm.min_digits                         
               arg_min_dec_places =                               
                 dm.min_decimal_places                               
            endif                                                     
            ;* Check for default all resources level data map          
            if (data_map_level = 0                                  
            and dm.data_map_type_flag = 0                        
            and dm.service_resource_cd = 0.0)                      
               data_map_level = 1                                   
               arg_max_digits = dm.max_digits                   
               arg_min_digits = dm.min_digits                   
               arg_min_dec_places =                              
                 dm.min_decimal_places                             
            endif                                                  
         endif                                                       
      FOOT qsp.qc_stat_id
         if (row > 55)
           BREAK
         endif
         result_cnt = result_cnt + 1
         if (result_cnt = 1 and request->qc_result_type_flag = 0)	
           lot_number = substring(1, 19, cl.lot_number)
           col 1 lot_number
	 			 elseif (result_cnt = 1 and request->qc_result_type_flag = 0)
           lot_number = captions->na_                  
           col 1 lot_number
         endif
         col 22  qsp.beg_dt_tm "@SHORTDATE;;Q"        
         col 31 "-"
         col 33 qsp.end_dt_tm "@SHORTDATE;;Q"          
         col 43 qsp.result_cnt "####;I;F"      
         if (qsp.result_cnt > 0)
            if (alpha_ind = 0)                     
              arg_raw_value = qsp.mean
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)         
              col 50 rslt "########;R;I"            
              arg_raw_value = qsp.std_dev
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)      
              col 60 rslt "########;R;I"                 
              arg_raw_value = qsp.co_var
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)        
              col 75 rslt "########;R;I"           
              arg_raw_value = qsp.f_val
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)      
              col 87 rslt "########;R;I"               
              arg_raw_value = qsp.z_stat
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)        
              col 97 rslt "########;R;I"                
              if (qsp.series_sequence_nbr = 1)
                col 111 sFirst
              elseif (qsp.series_sequence_nbr = -999)
                col 111 sLast
              elseif (qsp.series_sequence_nbr = 0)
                col 111 sNA
              else
                col 111 qsp.series_sequence_nbr "###;R;I"
              endif
              if (qsp.series_interval_nbr = 0)
                col 122 sNA
              else
                col 122 qsp.series_interval_nbr "###;R;I"                           
              endif
            else                                      
               col 53 qsp.normal_cnt "####;R;I"             
               col 63 qsp.abnormal_cnt "####;R;I"             
               col 78 qsp.review_cnt "####;R;I"
               if (qsp.series_sequence_nbr = 1)
                 col 89 sFirst
               elseif (qsp.series_sequence_nbr = -999)
                 col 89 sLast
               elseif (qsp.series_sequence_nbr = 0)
                 col 89 sNA
               else
                 col 89 qsp.series_sequence_nbr "###;R;I"
               endif
               if (qsp.series_interval_nbr = 0)
                 col 100 sNA
               else
                 col 100 qsp.series_interval_nbr "###;R;I"                           
               endif              
            endif                                  
         endif
         row + 1
      FOOT break_lot_pdm
         if (Row > 55)
           BREAK
         endif
         if (request->qc_result_type_flag = 0)
 
         COL 1  captions->lot_to                      
         for (x = 1 to cum_cnt)
           if (cumrec->cums[x].lot_id = qsp.lot_id)
           for (x2 = 1 to s_cnt)
             if (qsp.task_assay_cd = cumrec->cums[x].task_assay_cd and
                 qsp.service_resource_cd = cumrec->cums[x].service_resource_cd)
               if (cumrec->cums[x].lot_id = holdstat->stats[x2].lot_id)
                 if (holdstat->stats[x2].service_resource_cd = qsp.service_resource_cd and
                   holdstat->stats[x2].task_assay_cd = qsp.task_assay_cd)
                     col 22 cumrec->cums[x].receive_dt_tm "@SHORTDATE;;Q"  
                     col 31 "-"
                     col 33 formatted_dt_tm "@SHORTDATE;;Q"                
                     value = 0
                     count = cumrec->cums[x].ltd_cum_count
                     COL 43  count "####;R;I"                            
                     if (alpha_ind = 0)
                        mean = cumrec->cums[x].ltd_cum_mean / count
                        arg_hold_dec_places = arg_min_dec_places
                        arg_raw_value = mean
                        rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                        rslt =  FormatStatResult(rslt)                                                      
                        COL 50  rslt "########;R;I"                         
                        stddev = (cumrec->cums[x].ltd_cum_sum_sqr - (cumrec->cums[x].ltd_cum_mean **2)/count)/(count-1)
                        stddev = stddev ** 0.5
                        arg_raw_value = stddev
                        rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                        rslt =  FormatStatResult(rslt)                                                    
                        COL 60 rslt "########;R;I"                            
                        value = (stddev / mean) * 100
                        arg_raw_value = value
                        rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                        rslt =  FormatStatResult(rslt)                                                     
                        COL 75  rslt "########;R;I"                              
                        variance1 = cumrec->cums[x].expected_std_dev ** 2
                        variance2 = stddev ** 2
                        if (variance1 > variance2)
                          value = variance1 / variance2
                        else
                          value = variance2 / variance1
                        endif
                        arg_raw_value = value
                        rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                        rslt =  FormatStatResult(rslt)                                                     
                        COL 87  rslt "########;R;I"                                
                        value = mean - cumrec->cums[x].expected_mean
                        value = value / cumrec->cums[x].expected_std_dev
                        arg_raw_value = value
                        rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                        rslt =  FormatStatResult(rslt)                                                      
                        COL 97 rslt "########;R;I"                                
                        arg_min_dec_places = arg_hold_dec_places
                     else
                        if (request->qc_result_type_flag = 0)
                          count = cumrec->cums[x].ltd_normal_cnt
                          COL 53  count "####;R;I"                              
                          count = cumrec->cums[x].ltd_abnormal_cnt
                          COL 63  count "####;R;I"                               
                          count = cumrec->cums[x].ltd_review_cnt
                          COL 78  count "####;R;I" 
            		        endif
                     endif
                     ROW+1
                 endif
               endif
             endif
           endfor
           endif
         endfor
         ROW+1
         endif
      FOOT qsp.task_assay_cd
         row + 2
         if (Row > 55)
           BREAK
         endif
      FOOT PAGE
         tempstring = trim(concat(captions->pg," ", cnvtstring(CURPAGE)))   
 
         call center(tempstring, 0, 125)
 
      FOOT REPORT
         row + 2
         call center(uar_i18ngetmessage(i18nHandle,"end",("##### END OF REPORT #####")), 0, 125)      
      WITH
         outerjoin = d_rg,                                      
         dontcare = rg,                                         
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif
 
      if (curqual=0)
         go to qsp_get_failed
      else
        set reply->status_data->status = "S"
        if (size(trim(request->output_dist)) > 0)
           SET spool = value(reply->file_name) value(request->output_dist)
        endif
      endif
 
      go to exit_script
 
/********************************************************************/
/* Executed if control_lot table insert is unsuccessful.            */
/********************************************************************/
     #qsp_get_failed
      set reply->status_data->subeventstatus[1]->operationname =
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "F"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "qc_stat_period table"
      set reply->status_data->status = "Z"
 
      go to exit_script
 
/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
 
 
END GO
 

;Generated by GNU enscript 1.6.4.
