 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_order_comment/glb_get_order_comment.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_GET_ORDER_COMMENT.PRG
        Object name:            GLB_GET_ORDER_COMMENT
        Request #:              250072

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieve an order comment

        Tables read:            long_text
                                order_comment
                               
        Tables updated:         n/a
        Executing from:         General Lab result entry application(s)

        Special Notes:          If the request->current_ind = 1, then load
                                the current order_comment. 

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 04/05/96 Newton Hughes        Initial Release                     *
;     001 02/05/98 Jeff Fry             Add logic to support Review Comments*
;     002 01/09/02 Ahti Rovainen        Order by for each head; UAR         *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_ORDER_COMMENT: dba go
      create program GLB_GET_ORDER_COMMENT:dba
      
%i cclsource:pcs_subevent.inc

/*
      record request
      (
         1  order_id            = f8
      )
*/

      record reply
      (
;001         1  comment_types[3]
         1  comment_types[4]                                            ;001
            2  comment_mean        = vc
            2  comment_ind         = i2
            2  comment_text        = vc
%i cclsource:status_block.inc
      )

/* Initialization */

      declare ORDER_COMMENT_CODESET  = i4 with protected, constant(14)
      declare ORDER_COMMENT          = c12 with protected, constant("ORD COMMENT") ;chartable
      declare ORDER_NOTE             = c12 with protected, constant("ORD NOTE")    ;non-chartable
      declare REVIEW_COMMENT         = c12 with protected, constant("REVIEW")
      declare CANCEL_REASON          = c12 with protected, constant("CANCELREASON") ;Cancel comment
      declare order_comment_type_cd  = f8 with protected, noconstant(0.0)
      declare order_note_type_cd     = f8 with protected, noconstant(0.0)
      declare review_comment_type_cd = f8 with protected, noconstant(0.0)
      declare cancel_reason_type_cd  = f8 with protected, noconstant(0.0)
      declare comment_action_seq     = i4
      declare note_action_seq        = i4
      declare review_action_seq      = i4
      declare cancel_action_seq      = i4
      declare first_value            = i4
      
      declare dCodes[100]            = f8 with protected
      declare lStart                 = i4 with protected, noconstant(1)
      declare lRemaining             = i4 with protected, noconstant(0)
      declare lOccur                 = i4 with protected, noconstant(100)
      declare lCnt                   = i4 with protected, noconstant(0)
            
      record listCodeValues(
      	1 list[lOccur + 3]
      		2 dCode = f8
      )
      
      
      set reply->status_data->status = "Z" ;assume none found
      set reply->comment_types[1]->comment_mean = ORDER_COMMENT
      set reply->comment_types[1]->comment_ind = 0
      set reply->comment_types[1]->comment_text = ""
      set reply->comment_types[2]->comment_mean = ORDER_NOTE
      set reply->comment_types[2]->comment_ind = 0
      set reply->comment_types[2]->comment_text = ""
      set reply->comment_types[3]->comment_mean = CANCEL_REASON
      set reply->comment_types[3]->comment_ind = 0
      set reply->comment_types[3]->comment_text = ""
      set reply->comment_types[4]->comment_mean = REVIEW_COMMENT        ;001
      set reply->comment_types[4]->comment_ind = 0                      ;001
      set reply->comment_types[4]->comment_text = ""                    ;001
      set first_value = 0
      
      call uar_get_code_list_by_meaning (ORDER_COMMENT_CODESET,nullterm(ORDER_COMMENT),lStart,lOccur,lRemaining,dCodes)

      if(lOccur = 0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of ORD COMMENT (cs 14) failed.")
        go to exit_script
      endif  
      
      for(i = 1 to lOccur)
        set listCodeValues->list[i].dCode = dCodes[i]
      endfor
 
    SET stat = UAR_GET_MEANING_BY_CODESET(ORDER_COMMENT_CODESET,ORDER_NOTE,1,order_note_type_cd)
    if (order_note_type_cd = 0.0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of ORD NOTE (cs 14) failed.")
        go to exit_script
    endif
    
    SET stat = UAR_GET_MEANING_BY_CODESET(ORDER_COMMENT_CODESET,REVIEW_COMMENT,1,review_comment_type_cd)
    if (review_comment_type_cd = 0.0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REVIEW (cs 14) failed.")
        go to exit_script
    endif
    
    SET stat = UAR_GET_MEANING_BY_CODESET(ORDER_COMMENT_CODESET,CANCEL_REASON,1,cancel_reason_type_cd)

    if (cancel_reason_type_cd = 0.0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of CANCELREASON (cs 14) failed.")
        go to exit_script
    endif
    set listCodeValues->list[lOccur + 1].dCode = order_note_type_cd
    set listCodeValues->list[lOccur + 2].dCode = cancel_reason_type_cd
    set listCodeValues->list[lOccur + 3].dCode = review_comment_type_cd


/* Get order comment */
      select into "nl:"
         o.order_id,
         o.comment_type_cd,
         lt.long_text_id
      from
         order_comment o,
         long_text lt
      plan o  where o.order_id = request->order_id
                and expand(lCnt, 1, lOccur + 3, o.comment_type_cd, listCodeValues->list[lCnt].dCode, lOccur)
      join lt where lt.long_text_id = o.long_text_id
      order o.order_id, o.comment_type_cd, o.action_sequence desc

      head o.order_id
         lMaxSeq = 0
      head o.comment_type_cd
         if(expand(lCnt, 1, lOccur, o.comment_type_cd, listCodeValues->list[lCnt].dCode) and
           lMaxSeq < o.action_sequence)          
           reply->comment_types[1]->comment_ind = 1
           reply->comment_types[1]->comment_text = lt.long_text
           reply->status_data->status = "S"
           lMaxSeq = o.action_sequence
         endif
         if(o.comment_type_cd = order_note_type_cd)
           reply->comment_types[2]->comment_ind = 1
           reply->comment_types[2]->comment_text = lt.long_text
           reply->status_data->status = "S"
         endif
         if(o.comment_type_cd = cancel_reason_type_cd)
           reply->comment_types[3]->comment_ind = 1
           reply->comment_types[3]->comment_text = lt.long_text
           reply->status_data->status = "S"         
         endif
         if(o.comment_type_cd = review_comment_type_cd)
           reply->comment_types[4]->comment_ind = 1                       
           reply->comment_types[4]->comment_text = lt.long_text           
           reply->status_data->status = "S"           
         endif
      detail
         row + 0
      foot o.comment_type_cd
         row + 0
      foot o.order_id
         row + 0
      with nocounter
      
     #exit_script      
      free set listCodeValues

end go

;Generated by GNU enscript 1.6.4.
