 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_patient_info/glb_get_patient_info.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_GET_PATIENT_INFO.PRG
        Object name:            GLB_GET_PATIENT_INFO
        Request #:              250071

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve patient info and location, and
                                determine whether encounter- or order-
                                level comments exist

        Tables read:            person
                                person_alias
                                encounter
                                order_comment
                                encntr_info

        Tables updated:         n/a
        Executing from:         General Lab result entry application(s)

        Special Notes:          n/a

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 04/04/96 Newton Hughes        Initial Release                     *
;     001 02/04/98 Jeff Fry             Retrieve additional fields for      *
;                                       Outreach Services                   *
;    *002 08/13/98 Jeff Fry             Move Reply record to include file.  *
;    *003 06/09/99 Gary Runde           Retrieve encnt_status_cd and        *
;                                       org_name to check for discharged    *
;    *004 09/17/99 Chris Heil           Use cnvtalias to return formatted   *
;    *005 01/07/02 Sasi Gandham         Add UARs and Order By               *
;                                       alias.                              *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_PATIENT_INFO: dba go
      create program GLB_GET_PATIENT_INFO:dba

%i cclsource:pcs_subevent.inc

/*
      * NOTE:  Keep in sync with GLB_REQ_GET_PATIENT_INFO.INC
      record request
      (
         1  order_id                    = F8
         1  encntr_id                   = F8
         1  last_action_sequence        = I4
         1  person_id                   = F8
      )
*/

if (validate(reply->status_data->status, "U") = "U")

      record reply
      (
;002 - Added below ***
%i cclsource:glb_reply_get_patient_info.inc
;002 - Added above ***
;002         1  name_full_formatted         = VC
;002         1  birth_dt_tm                 = DQ8
;002         1  sex_cd                      = F8
;002         1  sex_disp                    = VC
;002         1  species_cd                  = F8
;002         1  alias                       = VC
;002         1  info_type_cd                = F8
;002         1  comment_type_cd             = F8
;002         1  action_sequence             = I4
;002         1  loc_facility_cd             = F8
;002         1  loc_facility_disp           = VC
;002         1  loc_nurse_unit_cd           = F8
;002         1  loc_nurse_unit_disp         = VC
;002         1  loc_room_cd                 = F8
;002         1  loc_room_disp               = VC
;002         1  loc_bed_cd                  = F8
;002         1  loc_bed_disp                = VC
;002         1  reason_for_visit            = VC
;002         1  location_cd                 = F8                            ;001
;002         1  organization_id             = F8                            ;001
;002         1  encntr_type_cd              = F8                            ;001

;003         1  encntr_status_cd            = f8
;003         1  encntr_status_disp          = vc
;003         1  org_name                    = vc
;return discharged code value to ARE
;003	     1  discharged_cd		    = f8
%i cclsource:status_block.inc
      )

endif

%i cclsource:pcs_format_age.inc

/* Variable initialization */
	  declare failed                 = c1  with protected, noconstant("F")

	  declare COMMENT_TYPE_CODESET   = i4  with public, constant(14)
	  declare NUMBER_TYPE_CODESET    = i4  with public, constant(4)

      declare ordcom_cd = f8 with protected, noconstant(0.0) ; order_comment code value
      declare mrn_cd = f8 with protected, noconstant(0.0)    ; medical record number code
      set reply->status_data->status = "F"


/* Get discharged code value */

      declare discharged_cd = f8 with protected, noconstant(0.0)
      set stat = uar_get_meaning_by_codeset(261, "DISCHARGED", 1,
					discharged_cd)
      set reply->discharged_cd = discharged_cd

/* Get code value used to retrieve order comments and medical record number */

SET stat = UAR_GET_MEANING_BY_CODESET(COMMENT_TYPE_CODESET,"ORD COMMENT",1,ordcom_cd)

if (ordcom_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of ORD_COMMENT (cs 14) failed.")
  go to exit_script
endif


SET stat = UAR_GET_MEANING_BY_CODESET(NUMBER_TYPE_CODESET,"MRN",1,mrn_cd)

if (mrn_cd = 0)
  set failed = "T"
  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of NUMBER (cs 4) failed.")
  go to exit_script
endif

/* Retrieve the name, birth date & time, species, and sex of person matching
   the given person_id.  Also retrieve medical record number if on exists. */

      select into "nl:"
         p.person_id,
         p.name_full_formatted,
         p.birth_dt_tm,
         p.species_cd,
         p.sex_cd,
         pa.alias,
         pa_exists = evaluate(nullind(pa.person_alias_id), 0, "Y", "N")
      from
         person p,
         person_alias pa
      plan p  where p.person_id = request->person_id
      join pa where pa.person_id = outerjoin(p.person_id)
                and pa.person_alias_type_cd = outerjoin(mrn_cd)
                and pa.active_ind = outerjoin(1)
                and pa.beg_effective_dt_tm <= outerjoin(cnvtdatetime(curdate,curtime3))
                and pa.end_effective_dt_tm > outerjoin(cnvtdatetime(curdate,curtime3))

      detail
         reply->name_full_formatted = p.name_full_formatted
         reply->birth_dt_tm = p.birth_dt_tm
         reply->age = FormatAge(p.birth_dt_tm, p.deceased_dt_tm, "CHRONOAGE")
         reply->species_cd = p.species_cd
         reply->sex_cd = p.sex_cd
         reply->race_cd = p.race_cd
         if (pa_exists = "Y")
            reply->alias = cnvtalias(pa.alias, pa.alias_pool_cd)      ;004
         endif
      with nocounter

/* If no record matching person_id exists in person file, exit with return
   status of "F". */

      if (curqual = 0)
        go to EXIT_PROGRAM
      endif

/* Retrieve the nursing unit, room and bed location codes for this encounter. */

      select into "nl:"
         enc.loc_facility_cd,
         enc.loc_nurse_unit_cd,
         enc.loc_room_cd,
         enc.loc_bed_cd,
         enc.reason_for_visit,
	 org.organization_id,                                   ;003
	 org.org_name                                           ;003
      from
         encounter enc,
	 organization org                                       ;003
      plan enc where request->encntr_id = enc.encntr_id
      join org where org.organization_id = enc.organization_id  ;003
      detail
         reply->loc_facility_cd = enc.loc_facility_cd
         reply->loc_nurse_unit_cd = enc.loc_nurse_unit_cd
         reply->loc_room_cd = enc.loc_room_cd
         reply->loc_bed_cd = enc.loc_bed_cd
         reply->reason_for_visit = enc.reason_for_visit
         reply->location_cd = enc.location_cd                           ;001
         reply->organization_id = enc.organization_id                   ;001
         reply->encntr_type_cd = enc.encntr_type_cd                     ;001
         reply->encntr_status_cd = enc.encntr_status_cd                 ;003
	 reply->org_name = org.org_name
      with nocounter

/* See whether order-level comment exists */

      select into "nl:"
         ordcom.action_sequence
      from
         order_comment ordcom
      where
         request->order_id = ordcom.order_id and
         ordcom_cd = ordcom.comment_type_cd and
         request->last_action_sequence >= ordcom.action_sequence
      order by ordcom.action_sequence desc
      detail
         reply->action_sequence = ordcom.action_sequence
         reply->comment_type_cd = ordcom_cd
      with nocounter, maxqual(ordcom, 1)

      if (curqual = 0)
         set reply->action_sequence = 0
         set reply->comment_type_cd = 0
      endif

/* See if encounter-level comment exists */

      select into "nl:"
         enci.info_type_cd
      from
         encntr_info enci
      where
         request->encntr_id = enci.encntr_id
      detail
         reply->info_type_cd = enci.info_type_cd
      with nocounter

      if (curqual = 0)
         set reply->info_type_cd = 0
      endif

      set reply->status_data->status = "S"

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
    #exit_script
    if (failed = "T")
        set reply->status_data->status = "Z"
    else
        set reply->status_data->status = "S"
    endif

#EXIT_PROGRAM

     end go

;Generated by GNU enscript 1.6.4.
