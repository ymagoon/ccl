 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_x_test_site_stats/glb_rpt_x_test_site_stats.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_RPT_X_TEST_SITE_STATS.PRG
        Object name:            GLB_RPT_X_TEST_SITE_STATS
        Request #:              257559

        Product:                General Lab - Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Calculate statistics for a given time period
                                across test sites and geterate report

        Tables read:            n/a

        Tables updated:         qc_stat_period

        Executing from:         General Lab QC Inquiry

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/19/98 Chad Moats           Initial Release                     *
;    *001 06/02/98 Chad Moats           Data map plus one for calcs         *
;    *002 11/23/99 Gary Runde           Adjust column headers               *
;    *003 12/07/99 Gary Runde           Internationalization                *
;    *004 09/19/02 Mark Brooks          Added service resource security.    *
;    *005 03/23/04 Craig Sumrall        Added Parsers for new lists, and ind*
;    *006 07/22/05 Scott Sundahl        Analytical series enhancement       *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_RPT_X_TEST_SITE_STATS:dba go
      create program GLB_RPT_X_TEST_SITE_STATS:dba


%i cclsource:pcs_resource_security.inc                                 ;004

;003 Start New Code

; free record structures
free set captions
free set reply
free set lot
free set holdstat
free set cumrec
free set ops_params
free set assay_result_type
free set formatted
free set qcStats
free set qcResults

; I18N INCLUDE FILE
%i cclsource:i18n_uar.inc

; INITIALIZE VARIABLE THAT KEEPS HANDLE TO I18N DATA
set i18nHandle = 0

; CALL uar_i18nlocalizationinit
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)

/********************************************************************/
/*  Captions Record  003                                            */
/********************************************************************/
record captions
(
1 rpt_no = vc
1 prg = vc
1 tm = vc
1 stat_frm = vc
1 to_ = vc
1 prepared = vc
1 ctrl_mat = vc
1 assay = vc
1 lot_no = vc
1 tst_ste = vc
1 dt_rnge = vc
1 count = vc
1 mean = vc
1 std_dev = vc
1 cv = vc
1 f_val = vc
1 z_stat = vc
1 normal = vc
1 abnormal = vc
1 review = vc
1 lot_to_dt = vc
1 pg = vc
1 series_value = vc
1 series_interval = vc
)

Set captions->pg = uar_i18ngetmessage(i18nHandle,"pg","PAGE")
Set captions->rpt_no = uar_i18ngetmessage(i18nHandle,"rpt_no","REPORT NO:")
Set captions->prg = uar_i18ngetmessage(i18nHandle,"prg","GLB_RPT_X_TEST_SITE_STATS.PRG")
Set captions->tm = uar_i18ngetmessage(i18nHandle,"tm","TIME:")
Set captions->stat_frm = uar_i18ngetmessage(i18nHandle,"stat_frm","STATISTICS FROM")
Set captions->to_ = uar_i18ngetmessage(i18nHandle,"to_","TO")
Set captions->prepared = uar_i18ngetmessage(i18nHandle,"prepared","PREPARED:")
Set captions->ctrl_mat = uar_i18ngetmessage(i18nHandle,"ctrl_mat","CONTROL MATERIAL:")
Set captions->assay = uar_i18ngetmessage(i18nHandle,"tsk_assay","ASSAY:")
Set captions->lot_no = uar_i18ngetmessage(i18nHandle,"lot_no","LOT NUMBER /")
Set captions->tst_ste = uar_i18ngetmessage(i18nHandle,"tst_ste","TEST SITE")
Set captions->dt_rnge = uar_i18ngetmessage(i18nHandle,"dt_rnge","DATE RANGE")
Set captions->count = uar_i18ngetmessage(i18nHandle,"count","COUNT")
Set captions->mean = uar_i18ngetmessage(i18nHandle,"mean","MEAN")
Set captions->std_dev = uar_i18ngetmessage(i18nHandle,"std_dev","STD DEV")
Set captions->cv = uar_i18ngetmessage(i18nHandle,"cv","CV")
Set captions->f_val = uar_i18ngetmessage(i18nHandle,"f_val","F-VAL")
Set captions->z_stat = uar_i18ngetmessage(i18nHandle,"z_stat","Z-STAT")
Set captions->normal = uar_i18ngetmessage(i18nHandle,"normal","NORMAL")
Set captions->abnormal = uar_i18ngetmessage(i18nHandle,"abnormal","ABNORMAL")
Set captions->review = uar_i18ngetmessage(i18nHandle,"review","REVIEW")
Set captions->lot_to_dt = uar_i18ngetmessage(i18nHandle,"lot_to_dt","LOT TO DATE:")
set captions->series_value = uar_i18ngetmessage(i18nHandle,"series_value","SER VAL") 
set captions->series_interval = uar_i18ngetmessage(i18nHandle,"series_interval","SER INT")

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 control_id              = f8
         1 task_assay_cd           = f8
         1 beg_dt_tm               = dq8
         1 end_dt_tm               = dq8
         1 ops_ind                 = i2
         1 printer_name            = vc
         1 batch_selection         = vc
         1 output_dist             = vc
         1 ops_date                = dq8
         1 resource_sec_ind        = i2
         1 test_sites[*]
           2 service_resource_cd   = f8
         1 assays[*]
           2 task_assay_cd         = f8
         1 lot_to_date_ind         = i2
      )

record reqinfo
( 1 commit_ind  = i2
  1 updt_id     = f8
  1 position_cd = f8
  1 updt_app    = i4
  1 updt_task   = i4
  1 updt_req    = i4
  1 updt_applctx= i4
)
*/
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
%i cclsource:status_block.inc
        1 file_name       = vc
      )

      record lot
      (
         1 lots[*]
           2 lot_sequence                 = i4
           2 lot_id                       = f8
           2 lot_number                   = c30
           2 receive_dt_tm                = dq8
           2 expiration_dt_tm             = dq8
           2 control_id                   = f8
           2 control_name                 = c20
           2 lot_used                     = i2
       )

      record holdstat
      (
         1 stats[*]
           2 lot_id                       = f8
           2 control_id                   = f8
           2 task_assay_cd                = f8
       )

      record cumrec
      (
         1 cums[*]
           2 cum_sequence                 = i4
           2 control_name                 = c25
           2 task_assay_cd                = f8
           2 lot_id                       = f8
           2 lot_number                   = c30
           2 lot_sequence                 = i4
           2 receive_dt_tm                = dq8
           2 expiration_dt_tm             = dq8
           2 cum_mean                     = f8
           2 cum_sum_sqr                  = f8
           2 cum_count                    = f8
           2 expected_mean                = f8
           2 expected_std_dev             = f8
           2 normal_cnt                   = i4
           2 abnormal_cnt                 = i4
           2 review_cnt                   = i4
           2 ltd_cum_mean                     = f8
           2 ltd_cum_sum_sqr                  = f8
           2 ltd_cum_count                    = f8
           2 ltd_normal_cnt                   = i4
           2 ltd_abnormal_cnt                 = i4
           2 ltd_review_cnt                   = i4
       )

      record ops_params
      (
         1  qual[4]
            2  param                     = c100
      )

      record assay_result_type                               
      (                                                            
         1  qual[*]                                              
            2  task_assay_cd            = f8                    
            2  result_type_cd           = f8                    
      )                                                          

         ;* Data used to format a numeric result
         record formatted
         (
            01  template     = c33
            01  negative_ind = i2
            01  result_value = c36
         )



     record qcStats                                               
     (                                                            
         1  qcStatList[*]                                        
             2  qc_stat_id = f8                                
     )                                                           

     record qcResults                                          
     (                                                            
         1  qcResultList[*]                                     
             2  qc_result_id = f8                                
     )                                                           


     #Script
     
      set reply->status_data->status = "F"
      set s_cnt = 0
      set arg_min_digits = 0
      set arg_max_digits = 0
      set arg_min_dec_places = 0
      set arg_less_great_flag = 0
      set arg_raw_value = 0.0
      declare uar_fmt_result (min, max, dec, flag, result) = c50 with protect, noconstant("")
      set rslt = fillstring(50," ")
      set tempstring = "        "
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

      declare RESULT_STATUS_CODESET       = i4 with protect, constant(1901)
      declare RESULT_STATUS_ACCEPT_CDF    = c12 with protect, constant("ACCEPT")
      declare RESULT_STATUS_VERIFIED_CDF  = c12 with protect, constant("VERIFIED")
      declare RESULT_STATUS_AUTO_VERF_CDF = c12 with protect, constant("AUTOVERIFIED")
      declare RESULT_STATUS_REVIEWED_CDF  = c12 with protect, constant("REVIEWED")
      declare RESULT_STATUS_CORRECTED_CDF = c12 with protect, constant("CORRECTED")
      declare RESULT_STATUS_CHANGED_CDF   = c12 with protect, constant("CHANGE")
      declare RESULT_STATUS_REJECTED_CDF  = c12 with protect, constant("REJECT")
      declare SERVICE_RESOURCE_TYPE_CODESET = i4 with protect, constant(223)
      declare SERV_RES_SUBSECTION_CDF    = c12 with protect, constant("SUBSECTION")
      declare serv_res_subsection_cd = f8
      declare ALPHA_CD = f8
      declare NUMERIC_CD = f8
      declare WITHIN_RANGE_CD = f8
      declare ALP_NORMAL_CD = f8
      declare ALP_ABNORMAL_CD = f8
      declare ALP_REVIEW_CD = f8
      declare result_status_accept_cd = f8
      declare result_status_reviewed_cd  = f8
      declare result_status_verified_cd  = f8
      declare result_status_auto_verf_cd = f8
      declare result_status_corrected_cd = f8
      declare result_status_changed_cd = f8
      declare result_status_rejected_cd = f8
      declare nbrdays = i2
      declare value = f8
      declare lotnumber = c15
      declare mean = f8
      declare std_dev = f8
      declare variance1 = f8
      declare variance2 = f8
      declare cum_mean = f8
      declare cum_std_dev = f8
      declare nIdx = i4 with protect, noconstant(0)
      declare nTotal = i4 with protect, noconstant(0)
      declare nTotal2 = i4  with protect, noconstant(0)
      declare nSize = i4 with protect, constant(100)
      declare nStart = i4 with protect, noconstant(0)
      set cum_mean = 0.0
      set cum_std_dev = 0.0
      set hold_lot_seq = 0
      set x = 0
      set x2 = 0
      set cum_cnt = 0
      set lot_cnt = 0
      set l_cnt = 0
      set mean = 0.00
      set count = 0
      set std_dev = 0.00
      set variance1 = 0.00
      set variance2 = 0.00
      set value = 0.00
      set rslt = fillstring(50, " ")
      set hold_lot_dt_tm = request->beg_dt_tm
      set formatted_dt_tm = datetimeadd(request->end_dt_tm, -1)
      set alpha_ind = 0                             
      set assay_cnt = 0

      declare dServiceResourceCd = f8 with protect, noconstant(0.0)      
      declare lStatCnt = i4 with protect, noconstant(0)               
      declare lResultCnt = i4 with protect, noconstant(0)                
      declare nResourceSecInd = i2 with protect, noconstant(0)           

      declare RESULT_TYPE_CS     = i4  with protect, constant(289)
      declare RESULT_FLAG_CS     = i4  with protect, constant(1902)

      declare ALPHA_CDF          = c12 with protect, constant("2")
      declare NUMERIC_CDF        = c12 with protect, constant("3")
      declare WITHIN_RANGE_CDF   = c12 with protect, constant("WITHIN_RANGE")
      declare ALP_NORMAL_CDF     = c12 with protect, constant("ALP_NORMAL")
      declare ALP_ABNORMAL_CDF   = c12 with protect, constant("ALP_ABNORMAL")
      declare ALP_REVIEW_CDF     = c12 with protect, constant("ALP_REVIEW")

      call InitResourceSecurity(request->resource_sec_ind)               
      
      declare lTestSiteslist                       = i4 with protect, constant(size(request->test_sites,5))
      declare lProcedureslist                      = i4 with protect, constant(size(request->assays,5))
      declare sTestsite_Parser                     = vc with protect, noconstant(" ")
      declare sProcedure_Parser                    = vc with protect, noconstant(" ")
      declare nTestsiteCnt                         = i4 with protect, noconstant(0)
      declare nProcedureCnt                        = i4 with protect, noconstant(0)
      declare sProcedures                          = vc with protect, noconstant(" ")
      declare sTestsites                           = vc with protect, noconstant(" ")
      declare GetTestsiteParser(sTable)            = vc
      declare GetProcedureParser(sTable)           = vc
      
      declare sNA                                  = vc with protect, noconstant(" ")
      declare sFirst                               = vc with protect, noconstant(" ")
      declare sLast                                = vc with protect, noconstant(" ")
      
      set sNA = uar_i18ngetmessage(i18nHandle,"sNA","N/A")
      set sFirst = uar_i18ngetmessage(i18nHandle,"sFirst","First")
      set sLast = uar_i18ngetmessage(i18nHandle,"sLast","Last")

/************************************************************************
*build parsers (2)                                                      *
************************************************************************/
subroutine GetTestsiteParser(sTable)
  
  if (lTestSiteslist > 0) 
    if (validate(stat_req->beg_dt_tm) = 0) 
        if (sTable =  "qr")
          set sTestsite_Parser = build("expand(nTestsiteCnt, 1, value(lTestSiteslist), ",
          "qr.service_resource_cd,request->test_sites[nTestsiteCnt].service_resource_cd)")
        endif
    else
        if (sTable =  "qr")
          set sTestsite_Parser = build("expand(nTestsiteCnt, 1, value(lTestSiteslist), ",
          "qr.service_resource_cd,stat_req->test_sites[nTestsiteCnt].service_resource_cd)")
        endif
    endif
  else
    set sTestsite_Parser = " qr.service_resource_cd = rar.service_resource_cd"
  endif
  
  return(sTestsite_Parser) 
end

subroutine GetProcedureParser(sTable)
  if (lProcedureslist > 0)
    if (validate(stat_req->beg_dt_tm) = 0) 
    	if (sTable = "qsp")
    	  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
    		  "qsp.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
    	elseif (sTable = "qr")
    	  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
    		  "qr.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
        endif
    else
        if (sTable = "qsp")
    	  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
    		  "qsp.task_assay_cd, stat_req->assays[nProcedureCnt].task_assay_cd)")
    	elseif (sTable = "qr")
    	  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
    		  "qr.task_assay_cd, stat_req->assays[nProcedureCnt].task_assay_cd)")
        endif
    endif
  elseif (request->task_assay_cd > 0)
    if (validate(stat_req->beg_dt_tm) = 0) 
        if (sTable = "qsp")
     	  set sProcedure_Parser = "qsp.task_assay_cd = request->task_assay_cd"
    	elseif(sTable = "qr")
    	  set sProcedure_Parser = "qr.task_assay_cd = request->task_assay_cd"
        endif
    else
        if (sTable = "qsp")
     	  set sProcedure_Parser = "qsp.task_assay_cd = stat_req->task_assay_cd"
    	elseif(sTable = "qr")
    	  set sProcedure_Parser = "qr.task_assay_cd = stat_req->task_assay_cd"
        endif
    endif
  else
	set sProcedure_Parser = "1 = 1"
  endif  
 return(sProcedure_Parser)
end

 /***********************************************************************
 * Load code values                                                     *
 ***********************************************************************/


	  set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CS, ALPHA_CDF,1, alpha_cd)

	  set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CS, NUMERIC_CDF,1, numeric_cd)

	  set stat = uar_get_meaning_by_codeset(RESULT_FLAG_CS, WITHIN_RANGE_CDF,1, within_range_cd)

	  set stat = uar_get_meaning_by_codeset(RESULT_FLAG_CS, ALP_NORMAL_CDF,1, alp_normal_cd)

	  set stat = uar_get_meaning_by_codeset(RESULT_FLAG_CS, ALP_ABNORMAL_CDF,1, alp_abnormal_cd)

	  set stat = uar_get_meaning_by_codeset(RESULT_FLAG_CS, ALP_REVIEW_CDF,1, alp_review_cd)

	  set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_ACCEPT_CDF,1, result_status_accept_cd)
	  set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_REVIEWED_CDF,1, result_status_reviewed_cd)
	  set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_VERIFIED_CDF,1, result_status_verified_cd)
	  set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_AUTO_VERF_CDF,1, result_status_auto_verf_cd)
	  set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_CORRECTED_CDF,1, result_status_corrected_cd)
	  set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_CHANGED_CDF,1, result_status_changed_cd)
	  set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_REJECTED_CDF,1, result_status_rejected_cd)

/***********************************************************************
 * Load operations parameter list                                       *
 ***********************************************************************/
         if (trim(request->batch_selection) > " ")
            set batch_selection_cd = cnvtreal(trim(request->batch_selection))
            set parm_string = fillstring(100, " ")

            select into "nl:"
              cv.code_value
            from
              code_value cv
                where cv.code_set = 1950 and cv.active_ind = 1 and cv.cdf_meaning = "XSTAT" and
                trim(cv.display_key) = trim(cnvtupper(cnvtalphanum(request->batch_selection)))
            detail
               cdf_string = trim(cv.cdf_meaning)
               parm_string = trim(cv.definition)
            with
               nocounter

            if (curqual = 0)
                select into "nl:"
                        cv.code_value
                from
                        code_value cv
                where cv.code_set = 1950 and cv.active_ind = 1 and cv.cdf_meaning = "XSTAT"
                and cv.code_value = batch_selection_cd
                detail
                        cdf_string = trim(cv.cdf_meaning)
                        parm_string = trim(cv.definition)
                with
                nocounter
                if (curqual = 0)
                        set reply->status_data->status = "Z"
                        go to exit_script
                endif
            endif

            ;* Locate the individual parameters in parm_string
            ;* and put them in the ops_params array.
            set ptr = 1
            set start_ptr = 1
            set param_idx = 1
            for (param_idx = 1 TO 4)
               set ptr = findstring(",", parm_string, start_ptr)
               if (ptr < 1)
                  set ptr = 100
               endif
               set parm_len = ptr - start_ptr
               set ops_params->qual[param_idx].param =
                 trim(substring(start_ptr, value(parm_len), parm_string), 3)
               set start_ptr = ptr + 1
            endfor

            ;* Use array of ops parameters to set request fields.
            set request->control_id = cnvtreal(ops_params->qual[1].param)
            set request->task_assay_cd = cnvtreal(ops_params->qual[2].param)
            set nbrdays = cnvtreal(ops_params->qual[3].param)
            set nbrdays = nbrdays * -1
            set request->end_dt_tm = cnvtdatetime(request->ops_date)
            set request->beg_dt_tm = cnvtdatetime(request->ops_date)
            set request->beg_dt_tm = datetimeadd(request->beg_dt_tm, nbrdays)
            set request->ops_ind = cnvtreal(ops_params->qual[4].param)
            set request->printer_name = request->output_dist
            set hold_lot_dt_tm = request->beg_dt_tm
         endif

 /***********************************************************************
 * Load service resource type code values                               *
 ***********************************************************************/
	 set serv_res_subsection_cd = uar_get_code_by("MEANING", SERVICE_RESOURCE_TYPE_CODESET, nullterm(SERV_RES_SUBSECTION_CDF))

/********************************************************************/
/* SELECT LOT NUMBERS                                               */
/********************************************************************/
     SELECT
       into "nl:"
         c.lot_id,
         c.lot_number,
         cm.control_id  ,
         rlr.lot_id,
         arl.lot_id,
         arl.task_assay_cd
     FROM
         control_lot c,
         control_material cm,
         resource_lot_r rlr,
         assay_resource_lot arl
     PLAN c
        where c.control_id = request->control_id
     JOIN cm
        where cm.control_id = c.control_id
     JOIN rlr
        where rlr.lot_id = c.lot_id
     JOIN arl
        where arl.lot_id = rlr.lot_id and
        arl.active_ind = 1
     ORDER BY c.lot_id, arl.task_assay_cd
     HEAD c.lot_id
        lot_cnt = lot_cnt + 1
        if (mod(lot_cnt,5) = 1)
            stat = alterlist(lot->lots,lot_cnt + 5)
        endif
        lot->lots[lot_cnt].lot_sequence = lot_cnt,
        lot->lots[lot_cnt].lot_id = c.lot_id,
        lot->lots[lot_cnt].lot_number = c.lot_number,
        lot->lots[lot_cnt].receive_dt_tm = c.receive_dt_tm,
        lot->lots[lot_cnt].expiration_dt_tm = c.expiration_dt_tm,
        lot->lots[lot_cnt].control_name = cm.short_description,
        lot->lots[lot_cnt].control_id = cm.control_id
        x = datetimediff(c.receive_dt_tm, hold_lot_dt_tm)
        if (x < 0 and c.receive_dt_tm > 0)
          hold_lot_dt_tm = c.receive_dt_tm
        endif
     HEAD arl.task_assay_cd
        s_cnt = s_cnt + 1
        if (mod(s_cnt,5) = 1)
            stat = alterlist(holdstat->stats,s_cnt + 5)
        endif
        holdstat->stats[s_cnt].lot_id = arl.lot_id,
        holdstat->stats[s_cnt].task_assay_cd = arl.task_assay_cd,
        holdstat->stats[s_cnt].control_id = c.control_id
     DETAIL
        row + 0
     WITH
        nocounter

     set error_check = ERROR(sErrorMsg,0)   ;get error message
     if (error_check != 0)
     	 set reply->status_data->status = "F"
       set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
       go to exit_script
     endif
;004 - Begin
    ;******************************************************************
    ;* Build list of only qc results where the user has access to the *
    ;* associated resource.                                           *
    ;******************************************************************
    select distinct into "nl:"
    	qr.qc_result_id,
    	qr.service_resource_cd
    from
        resource_accession_r rar,
        qc_result qr
    plan rar
      where rar.control_id = request->control_id
    join qr
      where parser(GetProcedureParser("qr")) 
        and parser(GetTestSiteParser("qr"))
        and qr.control_id = rar.control_id
        and qr.perform_dt_tm between cnvtdatetime(hold_lot_dt_tm)
                                  and cnvtdatetime(request->end_dt_tm)
        and qr.result_status_cd in (result_status_accept_cd,
                                    result_status_verified_cd, result_status_auto_verf_cd,
                                    result_status_changed_cd, result_status_reviewed_cd,
                                    result_status_corrected_cd, result_status_rejected_cd)
    order by
        qr.service_resource_cd

    head qr.service_resource_cd
        dServiceResourceCd = qr.service_resource_cd
        if (IsResourceViewable(dServiceResourceCd))
            nResourceSecInd = 1
        else
            nResourceSecInd = 0
        endif

    detail
        if (nResourceSecInd = 1)
            lResultCnt = lResultCnt + 1
            if (mod(lResultCnt, 10) = 1)
                stat = alterlist(qcResults->qcResultList, lResultCnt + 10)
            endif
            qcResults->qcResultList[lResultCnt].qc_result_id = qr.qc_result_id
        endif

    foot report
        stat = alterlist(qcResults->qcResultList, lResultCnt)

    with nocounter
    
    set error_check = ERROR(sErrorMsg,0)
    if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
    endif
    
    if(request->lot_to_date_ind = 1)
      set request->beg_dt_tm = hold_lot_dt_tm 
    endif
    
    if (lResultCnt > 0)                                                      
      set nTotal2 = value(lResultCnt)
      set nTotal = ceil( cnvtreal(nTotal2) /nSize) * nSize
      set nStart = 1
      set stat = alterlist(qcResults->qcResultList, nTotal)
			
      for(nIdx = nTotal2 + 1 to nTotal)
        set qcResults->qcResultList[nIdx].qc_result_id = qcResults->qcResultList[nTotal2].qc_result_id
      endfor

        /********************************************************************/
        /* Get Lot To Date Stats                                            */
        /********************************************************************/
        SELECT
           into "nl:"
             q.qc_result_id,
             performdatetime = cnvtdatetime(q.perform_dt_tm),
             q.task_assay_cd,
             q.control_id,
             q.lot_id
           FROM
             qc_result q,
             (dummyt d1 with seq = value(1+((nTotal-1)/nSize)))
           plan d1 where initarray(nStart,evaluate(d1.seq,1,1,nStart+nSize))
           JOIN q                                                                     
             where expand(nIdx, nStart, nStart+(nSize-1), q.qc_result_id, qcResults->qcResultList[nIdx].qc_result_id)
           ORDER BY
             q.task_assay_cd,
             q.lot_id,
             q.qc_result_id
          HEAD q.task_assay_cd
             for (x=1 to lot_cnt)
               cum_cnt = cum_cnt + 1
               if (mod(cum_cnt,5) = 1)
                   stat = alterlist(cumrec->cums,cum_cnt + 5)
               endif
               cumrec->cums[cum_cnt].cum_sequence = cum_cnt,
               cumrec->cums[cum_cnt].lot_sequence = lot->lots[x].lot_sequence,
               cumrec->cums[cum_cnt].lot_number = lot->lots[x].lot_number,
               cumrec->cums[cum_cnt].receive_dt_tm = lot->lots[x].receive_dt_tm,
               cumrec->cums[cum_cnt].expiration_dt_tm = lot->lots[x].expiration_dt_tm,
               cumrec->cums[cum_cnt].lot_id = lot->lots[x].lot_id,
               cumrec->cums[cum_cnt].control_name = lot->lots[x].control_name,
               cumrec->cums[cum_cnt].task_assay_cd = q.task_assay_cd,
               cumrec->cums[cum_cnt].expected_mean = q.mean, 
               cumrec->cums[cum_cnt].expected_std_dev = q.statistical_std_dev  
             endfor
             assay_cnt = assay_cnt + 1                                           
             if (mod(assay_cnt ,5) = 1)                                          
                 stat = alterlist(assay_result_type->qual, assay_cnt + 5)         
             endif                                                                
             assay_result_type->qual[assay_cnt].task_assay_cd = q.task_assay_cd     
             assay_result_type->qual[assay_cnt].result_type_cd = q.result_type_cd   
           HEAD q.lot_id
             x = 0
           HEAD q.qc_result_id
             for (x = 1 to lot_cnt)
               if (q.lot_id = cumrec->cums[x].lot_id)
                  hold_lot_seq = lot->lots[x].lot_sequence
                  x = lot_cnt + 1
               endif
             endfor
             for (x = 1 to cum_cnt)
               if (q.lot_id = cumrec->cums[x].lot_id and q.task_assay_cd = cumrec->cums[x].task_assay_cd)
                 eval_bdate = datetimediff(q.perform_dt_tm, request->beg_dt_tm)
                 eval_edate = datetimediff(q.perform_dt_tm, request->end_dt_tm)
                 if (q.result_type_cd != alpha_cd)
                   if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
                     cumrec->cums[x].cum_mean = cumrec->cums[x].cum_mean + q.result_value_numeric
                     cumrec->cums[x].cum_sum_sqr = cumrec->cums[x].cum_sum_sqr + q.result_value_numeric ** 2
                     cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                   endif
                   cumrec->cums[x].ltd_cum_mean = cumrec->cums[x].ltd_cum_mean + q.result_value_numeric
                   cumrec->cums[x].ltd_cum_sum_sqr = cumrec->cums[x].ltd_cum_sum_sqr + q.result_value_numeric ** 2
                   cumrec->cums[x].ltd_cum_count = cumrec->cums[x].ltd_cum_count + 1

                   cumrec->cums[x].normal_cnt = 0
                   cumrec->cums[x].abnormal_cnt = 0
                   cumrec->cums[x].review_cnt = 0
                   cumrec->cums[x].ltd_normal_cnt = 0
                   cumrec->cums[x].ltd_abnormal_cnt = 0
                   cumrec->cums[x].ltd_review_cnt = 0
                 else
                   if (q.result_process_cd = ALP_NORMAL_CD or q.result_process_cd = WITHIN_RANGE_CD)
                     if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
                       cumrec->cums[x].normal_cnt = cumrec->cums[x].normal_cnt + 1
                       cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                     endif
                     cumrec->cums[x].ltd_normal_cnt = cumrec->cums[x].ltd_normal_cnt + 1
                     cumrec->cums[x].ltd_cum_count = cumrec->cums[x].ltd_cum_count + 1
                   elseif (q.result_process_cd = ALP_ABNORMAL_CD)
                     if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
                       cumrec->cums[x].abnormal_cnt = cumrec->cums[x].abnormal_cnt + 1
                       cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                     endif
                     cumrec->cums[x].ltd_abnormal_cnt = cumrec->cums[x].ltd_abnormal_cnt + 1
                     cumrec->cums[x].ltd_cum_count = cumrec->cums[x].ltd_cum_count + 1
                   elseif (q.result_process_cd = ALP_REVIEW_CD)
                     if ((eval_bdate >= 0 or request->lot_to_date_ind = 1) and eval_edate <= 0)
                       cumrec->cums[x].review_cnt = cumrec->cums[x].review_cnt + 1
                       cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                     endif
                     cumrec->cums[x].ltd_review_cnt = cumrec->cums[x].ltd_review_cnt + 1
                     cumrec->cums[x].ltd_cum_count = cumrec->cums[x].ltd_cum_count + 1
                   endif
                   cumrec->cums[x].cum_mean = 0
                   cumrec->cums[x].cum_sum_sqr = 0
                   cumrec->cums[x].ltd_cum_mean = 0
                   cumrec->cums[x].ltd_cum_sum_sqr = 0
                 endif
                 x = cum_cnt + 1
               endif
             endfor
           DETAIL
             x=0
           FOOT q.lot_id
             x= 0
           FOOT q.task_assay_cd
             x=0
           WITH
             nocounter
      endif                                           

      declare FormatStatResult( result_value ) = vc
      subroutine FormatStatResult( result_value )
           set oldValue = trim(result_value, 3)
           set first = substring(1,1, oldValue)
           set second = substring(2,1, oldValue)
           set length = size(oldValue)
           set newValue = "                                             "
           if (first = ".")
              set newValue = build("0", oldValue)
           elseif ((first = "-") and (second = "."))
              set last = substring(2, (length - 1), oldValue)
              set newValue = build(first, "0", last)
           else
              set newValue = oldValue
           endif

           return (newValue)
       end


;004 - Begin
   ;******************************************************************
   ;*  Build list of qc stats that contains only those qc stat ids   *
   ;*  where the user has access to the associated service resource. *
   ;******************************************************************
    select into "nl:"
    from
        qc_stat_period qsp
    plan qsp
        where ((qsp.control_id = request->control_id)
                and parser(GetProcedureParser("qsp"))
                and ((qsp.ops_ind = 1)
                    or (request->ops_ind = 0))
                and (qsp.beg_dt_tm between cnvtdate(request->beg_dt_tm)
                    and cnvtdate(request->end_dt_tm))
                or (qsp.end_dt_tm between cnvtdate(request->beg_dt_tm)
                    and cnvtdate(request->end_dt_tm)))

    order by qsp.service_resource_cd

    head qsp.service_resource_cd
        dServiceResourceCd = qsp.service_resource_cd
        if (IsResourceViewable(dServiceResourceCd))
            nResourceSecInd = 1
        else
            nResourceSecInd = 0
        endif

    detail
        if (nResourceSecInd = 1)
            lStatCnt = lStatCnt + 1
            if (mod(lStatCnt, 5) = 1)
                stat = alterlist(qcStats->qcStatList, lStatCnt + 5)
            endif
            qcStats->qcStatList[lStatCnt].qc_stat_id = qsp.qc_stat_id
        endif

    foot report
        stat = alterlist(qcStats->qcStatList, lStatCnt)

    with nocounter
	
    set error_check = ERROR(sErrorMsg,0)
    if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
    endif

;004 - End


    if (lStatCnt > 0)    
    
      execute cpm_create_file_name "XST", "txt" ; "GLB_XST", "txt"

      if (cpm_cfn_info->status_data.status != "S")
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->operationname = "get"
        set reply->status_data->subeventstatus[1]->operationstatus = "F"
        set reply->status_data->subeventstatus[1]->targetobjectname = "filename"
        set reply->status_data->subeventstatus[1]->targetObjectValue = "Filename Retrieval Unsuccessful"
        go to exit_script
      endif

      set reply->file_name = cpm_cfn_info->file_name_path                                               ;004
      
      set nTotal2 = value(lStatCnt)
      set nTotal = ceil( cnvtreal(nTotal2) /nSize) * nSize
      set nStart = 1
      set stat = alterlist(qcStats->qcStatList, nTotal)
		
      for(nIdx = nTotal2 + 1 to nTotal)
        set qcStats->qcStatList[nIdx].qc_stat_id = qcStats->qcStatList[nTotal2].qc_stat_id
      endfor
      
          SELECT
           into cpm_cfn_info->file_name_path
             qsp.qc_stat_id,
             qsp.task_assay_cd,
             qsp.beg_dt_tm,
             qsp.lot_id,
             qsp.service_resource_cd,
             cl.lot_id,
             hold_lot_number = substring(1, 50,cl.lot_number),
             cl.receive_dt_tm,
             cm.description,
             dta.task_assay_cd,
             dta.mnemonic,
             cv.display,
             data_map_exists = decode(dm.seq, "Y", "N"),
             dm.task_assay_cd,                                          
             d_rg.seq,                                                
             rg_exists = decode(rg.seq, "Y", "N"),
             rg.parent_service_resource_cd,                             
             rg.child_service_resource_cd,                             
             rg.resource_group_type_cd,                               
             rg.root_service_resource_cd                                
          FROM
             (dummyt d1 with seq = value(1+((nTotal-1)/nSize))),
             qc_stat_period qsp,
             control_material cm,
             control_lot cl,
             discrete_task_assay dta,
             data_map dm,                                         
             (dummyt d_rg with seq = 1),                             
             resource_group rg             
          plan d1 where initarray(nStart,evaluate(d1.seq,1,1,nStart+nSize)) 
          JOIN qsp                                                     
             where expand(nIdx, nStart, nStart+(nSize-1), qsp.qc_stat_id, qcStats->qcStatList[nIdx].qc_stat_id)
          JOIN dta
             where dta.task_assay_cd = qsp.task_assay_cd
          JOIN cl
             where cl.lot_id = qsp.lot_id
          JOIN cm
             where cm.control_id = cl.control_id
          JOIN dm                                                       
             where dm.task_assay_cd = qsp.task_assay_cd
               and dm.data_map_type_flag in (0, 1)                      
               and dm.active_ind = 1
          JOIN d_rg                                                      
             where d_rg.seq = 1                                        
          JOIN rg                                                         
             where rg.parent_service_resource_cd = dm.service_resource_cd
               and rg.child_service_resource_cd = qsp.service_resource_cd
               and rg.resource_group_type_cd = serv_res_subsection_cd
               and rg.root_service_resource_cd = 0.0
          ORDER BY
             qsp.task_assay_cd,
             qsp.lot_id,
             qsp.service_resource_cd,
             qsp.beg_dt_tm,
             qsp.end_dt_tm,
    	 			 qsp.qc_stat_id,
             cl.receive_dt_tm
          HEAD REPORT
%i cclsource:glb_rpt_macros.inc
          HEAD PAGE
             COL 1    captions->rpt_no				
             COL 13   captions->prg					
             CALL CENTER(uar_i18ngetmessage(i18nHandle,"title",("CROSS TEST SITE STATISTICS REPORT")),1,132) 	;003
             COL 107  captions->tm					
             COL 117 CURTIME "@TIMENOSECONDS;;M"			
             ROW+1
             col 1   captions->stat_frm				
             col 17 request->beg_dt_tm "@SHORTDATE;;Q"		
             col 26  captions->to_					
             request->end_dt_tm = datetimeadd(request->end_dt_tm, -1)
        	 col 29 request->end_dt_tm "@SHORTDATE;;Q"		
             request->end_dt_tm = datetimeadd(request->end_dt_tm, 1)
     	 COL 107  captions->prepared				
             COL 117 CURDATE "@SHORTDATE;;Q"		
             ROW+2
             COL 1     captions->ctrl_mat				
             control = substring(1, 20, cm.short_description)
             col 20   control
             row + 2

          HEAD qsp.task_assay_cd
               if (Row > 50)
                 BREAK
               endif
             col 1  captions->assay				
             task_assay = substring(1,20, dta.mnemonic)
             col 11 task_assay
             row + 1
             underscore = fillstring(130,"-")
             col 1  underscore
             row + 1
             col 1 captions->lot_no					
             row + 1
             col 1    captions->tst_ste				
             col 22   captions->dt_rnge				
             col 42   captions->count				
             ;find out if current assay is a alpha result or not                       
             for (Acnt = 1 to assay_cnt)                                            
                if (qsp.task_assay_cd = assay_result_type->qual[Acnt].task_assay_cd)   
                   if (assay_result_type->qual[Acnt].result_type_cd = alpha_cd)        
                       alpha_ind = 1                                                  
                   else                                                               
                       alpha_ind = 0                                                  
                   endif                                                                  
                   Acnt = assay_cnt + 1                                                 
                endif                                                                   
             endfor                                                                     
             if (alpha_ind = 0)                                                        
               col 53  captions->MEAN
               col 63  captions->STD_DEV
               col 78  captions->CV
               col 90  captions->F_VAL
               col 100 captions->Z_STAT
               col 111 captions->series_value
               col 122 captions->series_interval 
             else
               col 53  captions->normal
               col 63  captions->abnormal
               col 78  captions->review
               col 89  captions->series_value 
               col 100 captions->series_interval		
             endif                                                                       
             row+1
             col 1   underscore
             row + 1
          HEAD qsp.lot_id
             if (Row > 53)
               BREAK
             endif
             result_cnt = 0
             lot_number = substring(1, 20, cl.lot_number)
             col 1  lot_number
             row + 1
          HEAD qsp.service_resource_cd
             if (Row > 55)
               BREAK
             endif
             service_resource = substring(1,19,trim(UAR_GET_CODE_DISPLAY(qsp.service_resource_cd),3))
             col 3 service_resource
          HEAD qsp.qc_stat_id
             arg_max_digits = 8                                           
             arg_min_digits = 1                                           
             arg_min_dec_places = 2                                      
             data_map_level = 0                                           
          DETAIL
             if (Row > 55)
               BREAK
             endif
             if (data_map_exists = "Y")                                   
                ;* Check for exact match on QC data map                  
                if (data_map_level <= 3                                   
                and dm.data_map_type_flag = 1                            
                and dm.service_resource_cd > 0.0                           
                and dm.service_resource_cd = qsp.service_resource_cd)      
                   data_map_level = 4                                     
                   arg_max_digits = dm.max_digits                          
                   arg_min_digits = dm.min_digits                         
                   arg_min_dec_places =                                  
                     dm.min_decimal_places                                
                endif                                                      
                ;* Check for exact match on data map                      
                if (data_map_level <= 2                                    
                and dm.data_map_type_flag = 0                               
                and dm.service_resource_cd > 0.0                          
                and dm.service_resource_cd = qsp.service_resource_cd)       
                   data_map_level = 3                                       
                   arg_max_digits = dm.max_digits                         
                   arg_min_digits = dm.min_digits                          
                   arg_min_dec_places =                                     
                     dm.min_decimal_places                                 
                endif                                                     
                ;* Check for subsection level data map                     
                if (data_map_level <= 1                                   
                and dm.data_map_type_flag = 0                              
                and dm.service_resource_cd > 0.0                            
                and rg_exists = "Y"                                        
                and rg.parent_service_resource_cd = dm.service_resource_cd  
                and rg.child_service_resource_cd = qsp.service_resource_cd) 
                   data_map_level = 2                                       
                   arg_max_digits = dm.max_digits                          
                   arg_min_digits = dm.min_digits                          
                   arg_min_dec_places =                                   
                     dm.min_decimal_places                                
                endif                                                      
                ;* Check for default all resources level data map           
                if (data_map_level = 0                                      
                and dm.data_map_type_flag = 0                               
                and dm.service_resource_cd = 0.0)                           
                   data_map_level = 1                                      
                   arg_max_digits = dm.max_digits                         
                   arg_min_digits = dm.min_digits                       
                   arg_min_dec_places =                                   
                     dm.min_decimal_places                                 
                endif                                                     
             endif                                                      
          FOOT qsp.qc_stat_id
             if (Row > 55)
               BREAK
             endif
             result_cnt = result_cnt + 1
             col 22  qsp.beg_dt_tm "@SHORTDATE;;Q"	
             col 31 "-"
             col 33 qsp.end_dt_tm "@SHORTDATE;;Q"
             col 42 qsp.result_cnt "####;R"
             if (qsp.result_cnt > 0)
                if (alpha_ind = 0)                        
                  arg_raw_value = qsp.mean
                  rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                  rslt =  FormatStatResult(rslt)          
                  col 50 rslt "########;R"
                  arg_raw_value = qsp.std_dev
                  rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                  rslt =  FormatStatResult(rslt)          
                  col 60 rslt "########;R"
                  arg_raw_value = qsp.co_var
                  rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                  rslt =  FormatStatResult(rslt)          
                  col 75 rslt "########;R"
                  arg_raw_value = qsp.f_val
                  rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                  rslt =  FormatStatResult(rslt)          
                  col 87 rslt "########;R"
                  arg_raw_value = qsp.z_stat
                  rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                  rslt =  FormatStatResult(rslt)           
                  col 97 rslt "########;R"
                  if (qsp.series_sequence_nbr = 1)
                    col 111 sFirst
                  elseif (qsp.series_sequence_nbr = -999)
                    col 111 sLast
                  elseif (qsp.series_sequence_nbr = 0)
                    col 111 sNA
                  else
                    col 111 qsp.series_sequence_nbr "###;R;I"
                  endif
                  if (qsp.series_interval_nbr = 0)
                    col 122 sNA
                  else
                    col 122 qsp.series_interval_nbr "###;R;I"                           
                  endif
                else                                      
                  col 53 qsp.normal_cnt "####;R"
                  col 63 qsp.abnormal_cnt "####;R"
                  col 78 qsp.review_cnt "####;R"
                  if (qsp.series_sequence_nbr = 1)
                    col 89 sFirst
                  elseif (qsp.series_sequence_nbr = -999)
                    col 89 sLast
                  elseif (qsp.series_sequence_nbr = 0)
                    col 89 sNA
                  else
                    col 89 qsp.series_sequence_nbr "###;R;I"
                  endif
                  if (qsp.series_interval_nbr = 0)
                    col 100 sNA
                  else
                    col 100 qsp.series_interval_nbr "###;R;I"                           
                  endif 
                endif                                      
             endif
             row + 1
          FOOT qsp.lot_id
               if (Row > 55)
                 BREAK
               endif
             COL 1   captions->lot_to_dt			
             for (x = 1 to cum_cnt)
               if (cumrec->cums[x].lot_id = qsp.lot_id)
               for (x2 = 1 to s_cnt)
                 if (qsp.task_assay_cd = cumrec->cums[x].task_assay_cd)
                   if (cumrec->cums[x].lot_id = holdstat->stats[x2].lot_id)
                     if (holdstat->stats[x2].task_assay_cd = qsp.task_assay_cd)
    		               col 22  cumrec->cums[x].receive_dt_tm "@SHORTDATE;;Q"
                       col 31 "-"
                       col 33  formatted_dt_tm "@SHORTDATE;;Q"            
                       value = 0
                       count = cumrec->cums[x].ltd_cum_count
                       COL 42  count "####;R"
                       if (alpha_ind = 0)
                         mean = cumrec->cums[x].ltd_cum_mean / count
                         arg_hold_dec_places = arg_min_dec_places
                         arg_raw_value = mean
                         rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                         rslt =  FormatStatResult(rslt)        
                         col 50 rslt "########;R"
                         stddev = (cumrec->cums[x].ltd_cum_sum_sqr - (cumrec->cums[x].ltd_cum_mean **2)/count)/(count-1)
                         stddev = stddev ** 0.5
                         arg_raw_value = stddev
                         rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places + 1, 0, arg_raw_value)
                         rslt =  FormatStatResult(rslt)          
                         COL 60 rslt "########;R"
                         COL 75 "-"
                         COL 87 "-"
                         COL 97 "-"
                       else
                         count = cumrec->cums[x].ltd_normal_cnt
                         COL 53  count "####;R"
                         count = cumrec->cums[x].ltd_abnormal_cnt
                         COL 63  count "####;R"
                         count = cumrec->cums[x].ltd_review_cnt
                         COL 78  count "####;R"
                       endif
                       ROW+1
                     endif
                   endif
                 endif
               endfor
               endif
             endfor
             ROW+1
          FOOT qsp.task_assay_cd
             row + 2
               if (Row > 55)
                 BREAK
               endif
          FOOT PAGE
             tempstring = trim(concat(captions->pg," ", cnvtstring(CURPAGE)))	

                call center(tempstring, 0, 125)


           FOOT REPORT
                ROW +1                                                    
                call center(uar_i18ngetmessage(i18nHandle,"end_rpt",("##### END OF REPORT #####")), 0, 125)
          WITH
             dontcare = dm,
             outerjoin = d_rg,
             dontcare = rg,
             nocounter

          set error_check = ERROR(sErrorMsg,0)   ;get error message
          if (error_check != 0)
            set reply->status_data->status = "F"
            set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
            go to exit_script
          endif

          if (curqual=0)
             go to qsp_get_failed
          else
            set reply->status_data->status = "S"
            if (size(trim(request->output_dist)) > 0)
              SET spool = value(reply->file_name) value(request->output_dist) 
            endif
          endif

          go to exit_script
    endif                                                              

/********************************************************************/
/* Executed if control_lot table insert is unsuccessful.            */
/********************************************************************/
     #qsp_get_failed
      set reply->status_data->subeventstatus[1]->operationname =
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "F"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "qc_stat_period table"
      set reply->status_data->status = "Z"

      go to exit_script

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script

     if ((reply->status_data->status != "F") and
          (GetResourceSecurityStatus(0) != "S"))                           
        call PopulateResSecStatusBlock(0)                              
        set reply->status_data->status = GetResourceSecurityStatus(0)    
     endif


END GO

;Generated by GNU enscript 1.6.4.
