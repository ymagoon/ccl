 ;;Solution_Test/script/PathNet -- Gen Lab/glb_delta_check_audit/GLB_DELTA_CHECK_AUDIT.PRG Turn on black mode



     /*~BB~*******************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 12/21/00 Ahti Rovainen        Initial Release                     *
;    *001 01/03/02 Ahti Rovainen        Add order by for head               *
;    *002 05/16/02 Sasi Gandham         Sort task assay alphabetically      *
;~DE~************************************************************************

	drop program GLB_DELTA_CHECK_AUDIT:DBA go
	create program GLB_DELTA_CHECK_AUDIT:DBA
	paint

execute cclseclogin

	;INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
	;INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
	set i18nHandle = 0
	;CALL UAR_I18NLOCALIZATIONINIT
	set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)
	/*************************     i18n     **************************/

	record captions
	  (
	      1 acttype 	= vc
	      1 ffrom 		= vc
	      1 spacetto	= vc
	      1 notfound 	= vc
	      1 unknown 	= vc
	      1 ddate 		= vc
	      1 gla 		= vc
	      1 pageno 		= vc
	      1 ttime 		= vc
	      1 ocmnemonic 	= vc
	      1 tamne 		= vc
	      1 curprevflag	= vc
	      1 equivassays  	= vc
	      1 allresources 	= vc
	      1 refrange     	= vc
	      1 allspectypes 	= vc
	      1 allgenders   	= vc
	      1 allresults   	= vc
	      1 percentsign     = vc
	      1 notapp        	= vc
	      1 delta_cur    	= vc
	      1 delta_curprev 	= vc
	      1 delta_no    	= vc
	      1 nodelta       	= vc
	      1 resultrange   	= vc
	      1 rr_type       	= vc
	      1 rr_value      	= vc
	      1 rr_minutes    	= vc
	      1 endrpt 		= vc
	      1 temp		= vc
	      1 GLTitle 	= vc
	      1 GLActType 	= vc
	      1 GLActSubType 	= vc
	      1 GLMnemFrom 	= vc
	      1 GLTo 		= vc
	      1 GLIncInact 	= vc
	      1 GLHelp 		= vc
	      1 GLLoadAct 	= vc
		 )


      ;Internationalized strings
      set captions->GLTitle        = uar_i18ngetmessage(i18nHandle,"GLA","DELTA CHECK PARAMETERS AUDIT")
      set captions->GLActType      = uar_i18ngetmessage(i18nHandle,"at","Activity Type:")
      set captions->GLMnemFrom     = uar_i18ngetmessage(i18nHandle,"ocmf","Discrete Assay Mnemonic From:")
      set captions->GLTo           = uar_i18ngetmessage(i18nHandle,"tto2","To:")
      set captions->GLHelp         = uar_i18ngetmessage(i18nHandle,"help1","Press <Shift F5> for help")
      set captions->GLLoadAct      = uar_i18ngetmessage(i18nHandle,"loading","Loading activity types...")
      set captions->acttype        = uar_i18ngetmessage(i18nHandle,"acttype",    "ACTIVITY TYPE:")
      set captions->ffrom 	   = uar_i18ngetmessage(i18nHandle,"ffrom",	    "From:")
      set captions->spacetto 	   = uar_i18ngetmessage(i18nHandle,"spacetto",	    " to ")
      set captions->notfound 	   = uar_i18ngetmessage(i18nHandle,"notfound",   "Not Found")
      set captions->unknown 	   = uar_i18ngetmessage(i18nHandle,"unknown",    "Unknown")
      set captions->ddate 	   = uar_i18ngetmessage(i18nHandle,"ddate",	    "DATE:")
      set captions->gla 	   = uar_i18ngetmessage(i18nHandle,"gla",	    "D E L T A   C H E C K   A U D I T")
      set captions->pageno 	   = uar_i18ngetmessage(i18nHandle,"pageno",	    "PAGE NO:")
      set captions->ttime 	   = uar_i18ngetmessage(i18nHandle,"ttime",	    "TIME:")
      set captions->ocmnemonic 	   = uar_i18ngetmessage(i18nHandle,"ocmnemonic", "ORDER CATALOG MNE")
      set captions->tamne 	   = uar_i18ngetmessage(i18nHandle,"tamne",	    "TASK ASSAY MNEMONIC")
      set captions->curprevflag    = uar_i18ngetmessage(i18nHandle,"curprevflag","CURRENT/PREVIOUS FLAG")
      set captions->equivassays    = uar_i18ngetmessage(i18nHandle,"equivassays","EQUIVALENT ASSAYS")
      set captions->allresources   = uar_i18ngetmessage(i18nHandle,"allresources","All resources")
      set captions->refrange       = uar_i18ngetmessage(i18nHandle,"refrange","REFERENCE RANGE:")
      set captions->allspectypes   = uar_i18ngetmessage(i18nHandle,"allspectypes","All specimen types")
      set captions->allgenders     = uar_i18ngetmessage(i18nHandle,"allgenders","All genders")
      set captions->allresults     = uar_i18ngetmessage(i18nHandle,"allresults","All results")
      set captions->percentsign    = uar_i18ngetmessage(i18nHandle,"pctsign","%")
      set captions->notapp         = uar_i18ngetmessage(i18nHandle,"notapp","N/A")
      set captions->nodelta        = uar_i18ngetmessage(i18nHandle,"nodelta","Delta check parameters not defined")
      set captions->delta_cur      = uar_i18ngetmessage(i18nHandle,"delta_cur","Current")
      set captions->delta_curprev  = uar_i18ngetmessage(i18nHandle,"delta_curprev","Current/Previous")
      set captions->delta_no       = uar_i18ngetmessage(i18nHandle,"delta_no","Not defined")
      set captions->resultrange    = uar_i18ngetmessage(i18nHandle,"resultrange","Result Range:")
      set captions->rr_type        = uar_i18ngetmessage(i18nHandle,"rr_type","Type:")
      set captions->rr_value       = uar_i18ngetmessage(i18nHandle,"rr_value","Value:")
      set captions->rr_minutes     = uar_i18ngetmessage(i18nHandle,"rr_minutes","Minutes:")
      set captions->endrpt 	   = uar_i18ngetmessage(i18nHandle,"endrpt","* * *  E N D   O F   R E P O R T  * * *")


/***********************************************************************************************end 004 mod block*/
      /***********************************************************************
      * Activity Type Record                                                 *
      ***********************************************************************/
      record act_type
      (
         1  qual[*]
            2  glb_activity_type_cd      = f8
            2  disp                      = vc		;corresponding display vlaue for the code
      )


      /***********************************************************************
      * Internal Record                                                      *
      ***********************************************************************/

	  record assay_delta
	  (
	    1 qual[*]
		2   task_assay                   = c20  ;string for task_assay
		2   task_assay_cd                = f8   ;assay code, needed to get equivalent assays
		2   curprev                      = i2   ;current/previous flag
		2   related_assays[*]
		    3	equiv_assay 	         = f8   ;code for equivalent assay
		2   numrefranges                 = i2	;number of reference ranges
		2   numdeltas                    = i2   ;number of ranges with deltas defined
		2   refranges[*]
		    3   precedence_species       = vc	;string combines precedence and species
		    3   spec_type                = vc   ;specimen type
		    3   gender                   = vc   ;gender string
		    3   agerange                 = vc   ;age range in a string
		    3   service_res              = vc   ;service resource
		    3	advanced                 = i2   ;flag for how deltas are defined
		    3   numresranges             = i2	;number of result ranges
		    3   resultranges[*]
		  	4   deltastring          = vc   ;result range string
		  	4   typestring           = vc   ;delta type string
		  	4   valuestring          = vc   ;delta value string
		  	4   minutestring         = vc   ;minutes string
	  )


      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set ACTIVITY_TYPE_CODESET       = 106
         set GEN_LAB_CDF                 = "GLB"
         set BBD_CDF                     = "BBDONOR"
         set BB_CDF                      = "BB"
         set HLA_CDF                     = "HLA"

         ;the below 2 lines are for the "old" method of getting activity types
         set MNE_TYPE_CODESET            = 6011
         set MNE_TYPE_PRIMARY_CDF        = "PRIMARY"

         set AGE_UNIT_CODESET            = 340      ;age units codeset
         set DAYS_CDF                    = "DAYS"
	 set HOURS_CDF                   = "HOURS"
	 set MINUTES_CDF                 = "MINUTES"
	 set WEEKS_CDF                   = "WEEKS"
	 set MONTHS_CDF                  = "MONTHS"
	 set YEARS_CDF                   = "YEARS"

	 set DELTA_TYPE_CODESET		 = 236	;delta type codeset
	 set PERCENT_CDF                 = "TYPE_4"
	 set ALPHA_CDF     	         = "TYPE_ALPHA"

         declare stat                    = i4   ;used in alterlist
         declare at_cnt                  = i4   ;activity type count

         declare delta_cnt               = i2   ;counter for defined deltas
         declare equiv_cnt               = i2   ;counter for equivalent assays
         declare ref_cnt                 = i2   ;counter for reference ranges
         declare res_cnt                 = i2   ;counter for result ranges
         declare deltalevel              = i2   ;current, current/previous, or not defined

         declare assay_cnt               = i4	;counter for assays
         set assay_cnt = 0

         declare i                       = i4   ;loop counter
         declare j                       = i4   ;loop counter

         declare activity_type_assay     = f8   ;used to filter by activity type

         declare is_first_assay_on_page  = i2   ;flag for 1st assay on page

         declare service_resource        = vc   ;service resource string

         declare age_from_unit_string    = c16  ;"from" age unit
         declare age_to_unit_string      = c16  ;"to" age unit
         declare age_from_actual         = i4   ;"from" age converted from minutes to proper unit
         declare age_to_actual           = i4   ;"to" age converted from minutes to proper unit

         declare agestring               = c30  ;age range converted to string
         declare valuestring             = c20  ;value converted to string
         declare minutestring            = c10  ;minutes converted to string
         declare deltastring             = vc	;used to format type, value, minutes
         declare deltastring2             = vc	;used to format type, value, minutes

         declare deltaflag3              = i2	;variable to prevent writing out huge struct/pointer

         set max_nbr_rows                = 50

         ;for conversion from minutes to proper unit
         set minutes_minute              = 1
         set minutes_hour                = 60
         set minutes_day                 = 1440
         set minutes_week                = 10080
         set minutes_month               = 43200
         set minutes_year                = 525600

         ;for determining unit
         ;to be calculated from code set
         ;assumes we won't use seconds as a unit
         declare minute_cv               = f8
         declare hour_cv                 = f8
         declare day_cv                  = f8
         declare week_cv                 = f8
         declare month_cv                = f8
         declare year_cv                 = f8

         ;type units
         declare percent_type_cv	 = f8
         declare alpha_type_cv		 = f8


      /***********************************************************************
      * Display screen                                                       *
      ***********************************************************************/
         set actvty_type_default = fillstring(30, " ")
         set actvty_type = fillstring(30," ")
         set actvty_type_disp = fillstring(30," ")
         set actvty_type_cdf = fillstring(12, " ")
         set actvty_subtype_cd = 0.0
         set actvty_subtype_disp = fillstring(30, " ")
         set mne_beg = fillstring(20," ")
         set mne_end = fillstring(20," ")
         set ref_range_yn = " "
         call clear(1,1)
         call video(n)
         call box(1,1,3,80)
         ;004 call text(2,3, "DELTA CHECK PARAMETERS AUDIT")
         call text(2,3, captions->GLTitle )
         ;004 call text(5,3, "Activity Type:")
         call text(5,3,   captions->GLActType)
          ;004  call text(9,3,"Discrete Assay Mnemonic:")
         call text(7,3,   captions->GLMnemFrom)
         ;004 call text(7,28, "To:")
         call text(8,28, captions->GLTo)


      /***********************************************************************
      * Build list of code values for age units                              *
      ***********************************************************************/

	set stat = UAR_GET_MEANING_BY_CODESET(AGE_UNIT_CODESET,DAYS_CDF,1,day_cv)
	set stat = UAR_GET_MEANING_BY_CODESET(AGE_UNIT_CODESET,HOURS_CDF,1,hour_cv)
	set stat = UAR_GET_MEANING_BY_CODESET(AGE_UNIT_CODESET,MINUTES_CDF,1,minute_cv)
	set stat = UAR_GET_MEANING_BY_CODESET(AGE_UNIT_CODESET,WEEKS_CDF,1,week_cv)
	set stat = UAR_GET_MEANING_BY_CODESET(AGE_UNIT_CODESET,MONTHS_CDF,1,month_cv)
	set stat = UAR_GET_MEANING_BY_CODESET(AGE_UNIT_CODESET,YEARS_CDF,1,year_cv)


      /***********************************************************************
      * Build list of code values and display values for activity types      *
      ***********************************************************************/

      ;UNCOMMENT THE BELOW BLOCK IF USING THE NEW METHOD OF ACTIVITY TYPES
      /*
	set at_cnt = 4				;hardcoding the 4 activity types
	set stat = alterlist(act_type->qual,at_cnt)

	set stat = UAR_GET_MEANING_BY_CODESET(ACTIVITY_TYPE_CODESET,GEN_LAB_CDF,1,act_type->qual[1].glb_activity_type_cd)
	set stat = UAR_GET_MEANING_BY_CODESET(ACTIVITY_TYPE_CODESET,BBD_CDF,1,act_type->qual[2].glb_activity_type_cd)
	set stat = UAR_GET_MEANING_BY_CODESET(ACTIVITY_TYPE_CODESET,BB_CDF,1,act_type->qual[3].glb_activity_type_cd)
	set stat = UAR_GET_MEANING_BY_CODESET(ACTIVITY_TYPE_CODESET,HLA_CDF,1,act_type->qual[4].glb_activity_type_cd)

	set i = 0
	while (i < at_cnt)
	  set i = i + 1
	  set act_type->qual[i].disp = cnvtupper(uar_get_code_display(act_type->qual[i].glb_activity_type_cd))
	endwhile

	*/

      /***********************************************************************
      * Store code values for percent type and alpha type                    *
      ***********************************************************************/

	set stat = UAR_GET_MEANING_BY_CODESET(DELTA_TYPE_CODESET,PERCENT_CDF,1,percent_type_cv)
	set stat = UAR_GET_MEANING_BY_CODESET(DELTA_TYPE_CODESET,ALPHA_CDF,1,alpha_type_cv)


      /***********************************************************************
      * Accept activity type.                                                *
      ***********************************************************************/

      ;THIS IS THE OLD WAY TO GET ACTIVITY TYPES
      ;"NEW" METHOD USING UARS IS ABOVE, COMMENTED OUT
         select into "nl:"
            cv.display
         from
            code_value cv
         where cv.code_set = ACTIVITY_TYPE_CODESET
           and cv.cdf_meaning = GEN_LAB_CDF
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
         detail
            actvty_type_default = cnvtupper(cv.display)
         with
            nocounter,
            maxread(cv, 1)

	        ; "Press <Shift F5> for help"
                call text(24,3, captions->GLHelp)
		set help = select activity_type = cnvtupper(cv.display)
                    from code_value cv
                    where cv.code_set = ACTIVITY_TYPE_CODESET
                      and cv.cdf_meaning in (GEN_LAB_CDF,
                                             BB_CDF,
                                             BBD_CDF,
                                             HLA_CDF)

                    order by cv.display_key
                    with nocounter
         call accept(5,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU", actvty_type_default)
         set help = off
         call clear(24,3,70)
         set actvty_type_disp = curaccept
         set actvty_type = cnvtalphanum(curaccept)

      /***********************************************************************
      * Select activity types.                                               *
      ***********************************************************************/
         ;  "Loading activity Types..."
         ;call text(24,3, captions->GLLoadAct)
         select into "nl:"
            cv.code_value,
            cv.cdf_meaning

         from
            code_value cv

         where ((cv.code_set = ACTIVITY_TYPE_CODESET
             and cv.display_key = actvty_type
             and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF, BBD_CDF,HLA_CDF))
            or  (cv.code_set = MNE_TYPE_CODESET
              and cv.cdf_meaning = MNE_TYPE_PRIMARY_CDF))
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         head report
            stat = alterlist(act_type->qual,10)
            at_cnt = 0

         detail
            if (cv.code_set = ACTIVITY_TYPE_CODESET)
               at_cnt = at_cnt + 1
                if (mod(at_cnt,10) = 1 and at_cnt!= 1)
                   stat = alterlist(act_type->qual, at_cnt + 10)
                endif

               act_type->qual[at_cnt].glb_activity_type_cd = cv.code_value
               activity_type_assay = act_type->qual[at_cnt].glb_activity_type_cd
               actvty_type_cdf = cv.cdf_meaning
            endif
            if (cv.code_set = MNE_TYPE_CODESET)
               mne_type_primary_cd = cv.code_value
            endif
         foot report
            stat = alterlist(act_type->qual,at_cnt)

         with nocounter


      ;below is good activity type code that uses UAR functions
      ;if UAR functions do not work or the program has symptoms such as blank
      ;activity types, we can use the above older method of getting activity type
      /*
	set actvty_type_default = cnvtupper(uar_get_code_display(act_type->qual[1].glb_activity_type_cd))

	; "Press <Shift F5> for help"
	call text(24,3, captions->GLHelp)

	set help = select into "nl:"
	             activity_type = cnvtupper(uar_get_code_display(act_type->qual[d1.seq].glb_activity_type_cd))
		   from (dummyt d1 with seq = value(size(act_type->qual,5)))
		   order activity_type
	  	   with nocounter

	call accept(5,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU", actvty_type_default)
	set help = off
	call clear(24,3,70)

	set actvty_type_disp = curaccept

	;convert back from display string to code value

	set i = 0				;loop through struct to find matching code value for display
	while (i < at_cnt)
     	  set i = i + 1
      	  if (actvty_type_disp = act_type->qual[i].disp)
      	    set activity_type_assay = act_type->qual[i].glb_activity_type_cd	;store code
      	    set i =  at_cnt + 1	;break out of loop
      	  endif
        endwhile

        */


      /***********************************************************************
      * Accept Discrete Assay mnemonic range.                                *
      ***********************************************************************/
         call accept(7,33, "PPPPPPPPPPPPPPPPPPPP;;CU", "A")
         set mne_beg = curaccept
         if (mne_beg = "A")
            call accept(8,33, "PPPPPPPPPPPPPPPPPPPP;;CU",
                        "ZZZZZZZZZZZZZZZZZZZZ")
         else
            call accept(8,33, "PPPPPPPPPPPPPPPPPPPP;;CU")
         endif
         set mne_end = curaccept


      /***********************************************************************
      * retrieve data and fill structure             			             *
      ***********************************************************************/

	select into "nl:"
	task_assay_cd = dta.task_assay_cd,
	delta_level = dta.delta_lvl_flag,

	refid = rrf.reference_range_factor_id,
	precedence = rrf.precedence_sequence,
	species = uar_get_code_display(rrf.species_cd),
	specimen_type = uar_get_code_display(rrf.specimen_type_cd),
	gender = uar_get_code_display(rrf.sex_cd),
	age_from = rrf.age_from_minutes,
	age_from_unit = rrf.age_from_units_cd,
	age_to = rrf.age_to_minutes,
	age_to_unit = rrf.age_to_units_cd,
	service_resource_cd = rrf.service_resource_cd,
	deltaflag = rrf.delta_chk_flag,
	type1 = rrf.delta_check_type_cd,
	value1 = rrf.delta_value,
	minutes1 = rrf.delta_minutes,

	advanced_delta = ad.advanced_delta_id,
	deltalow = ad.delta_low,
	deltahigh = ad.delta_high,
	type2 = ad.delta_check_type_cd,
	value2 = ad.delta_value,
	minutes2 = ad.delta_minutes

	from
	discrete_task_assay dta,
	reference_range_factor rrf,
	advanced_delta ad,
	dummyt d

	plan dta
	where
	 (dta.activity_type_cd = activity_type_assay  ;the user entered activity_type
          and dta.mnemonic_key_cap between mne_beg and mne_end  ;user entered start/end mnemonics
         )

	join rrf where (rrf.active_ind = 1)
		and (rrf.task_assay_cd = dta.task_assay_cd)

	join d
	join ad where (ad.active_ind = 1)
		and (ad.reference_range_factor_id = rrf.reference_range_factor_id)


	order
	  dta.mnemonic_key_cap,		;sort alphabetically by discrete assay mnemonic
      task_assay_cd,
	  precedence			    ;for each assay, order reference ranges by precedence sequence


	head report
	  spacing = 0
	  curr_accn_row = 0
	  accn_col = 0


	head task_assay_cd

	  ;allocate more memory if needed
	  assay_cnt = assay_cnt + 1
	  if (mod(assay_cnt, 10) = 1)
	    stat = alterlist(assay_delta->qual, assay_cnt + 9)
	  endif

	 delta_cnt = 0				;initialize delta counter
	 ref_cnt = 0				;initialize # of reference ranges

	 ;store mnemonic and name
	 assay_delta->qual[assay_cnt]->task_assay = uar_get_code_display(task_assay_cd)
         assay_delta->qual[assay_cnt]->task_assay_cd = task_assay_cd
	 assay_delta->qual[assay_cnt]->curprev = delta_level

	head precedence
	  ref_cnt = ref_cnt + 1

	;allocate more memory if needed
	if (ref_cnt > size(assay_delta->qual[assay_cnt]->refranges, 5))
	  stat = alterlist(assay_delta->qual[assay_cnt]->refranges, ref_cnt + 9)
	endif

	assay_delta->qual[assay_cnt]->refranges[ref_cnt]->numresranges = 0

	;number (precedence sequence) and species
	;to eliminate long spaces in number field, use string to concat the two fields
	assay_delta->qual[assay_cnt]->refranges[ref_cnt]->precedence_species =
	  concat(trim(cnvtstring(precedence))," ",trim(species))


	;specimen type
	if (rrf.specimen_type_cd = 0)
     	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->spec_type = captions->allspectypes
	else
	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->spec_type = specimen_type
	endif


	;gender
	if (rrf.sex_cd = 0)
     	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->gender = captions->allgenders
	else
     	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->gender = gender
	endif


	;age range
	age_from_unit_string = uar_get_code_display(age_from_unit)
	age_to_unit_string = uar_get_code_display(age_to_unit)


	;set actual numbers in case it doesn't find a match
	age_from_actual = age_from
	age_to_actual = age_to

	case(age_from_unit)
	  of minute_cv:		age_from_actual = age_from / minutes_minute
 	  of hour_cv:		age_from_actual = age_from / minutes_hour
 	  of day_cv:		age_from_actual = age_from / minutes_day
 	  of week_cv:		age_from_actual = age_from / minutes_week
 	  of month_cv:		age_from_actual = age_from / minutes_month
 	  of year_cv:		age_from_actual = age_from / minutes_year
	endcase

	case(age_to_unit)
   	  of minute_cv:	        age_to_actual = age_to / minutes_minute
 	  of hour_cv:		age_to_actual = age_to / minutes_hour
 	  of day_cv:		age_to_actual = age_to / minutes_day
 	  of week_cv:		age_to_actual = age_to / minutes_week
 	  of month_cv:	        age_to_actual = age_to / minutes_month
 	  of year_cv:		age_to_actual = age_to / minutes_year
	endcase

	agestring = concat(
	  trim(cnvtstring(age_from_actual))," ",
	  trim(age_from_unit_string)," ",
	  trim(cnvtstring(age_to_actual))," ",
	  trim(age_to_unit_string))

	assay_delta->qual[assay_cnt]->refranges[ref_cnt]->agerange = agestring


	;service resource
	service_resource = (
     	  if(service_resource_cd = 0.0)		captions->allresources
	  else		uar_get_code_display(service_resource_cd)
	  endif
	     )

	assay_delta->qual[assay_cnt]->refranges[ref_cnt]->service_res = service_resource

	assay_delta->qual[assay_cnt]->refranges[ref_cnt]->advanced = deltaflag

	res_cnt = 0


	detail

	if (deltaflag > 0)
	  delta_cnt = delta_cnt + 1

	  res_cnt = res_cnt + 1
          ;allocate more memory if needed
	  if (res_cnt > size(assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges, 5))
	    stat = alterlist(assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges, res_cnt + 9)
	  endif

	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->numresranges = res_cnt

	  ;delta check parameters

	  if (deltaflag = 1)
     	  ;no delta_low, no delta_high

     	    assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges[res_cnt]->typestring = uar_get_code_display(type1)

     	    ;value
     	    valuestring = (
     	      if(type1 = alpha_type_cv)		""
 	      elseif(value1 = 0.0)		captions->notapp
     	      else     				trim(format(value1,"#######.#;P ;F"),3)
     	      endif
     		)

     	    if (value1 = percent_type_cv)	;percent type
     	    	valuestring = build(valuestring,captions->percentsign)
     	    endif

     	    assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges[res_cnt]->valuestring = valuestring

     	    minutestring = trim(cnvtstring(minutes1))
     	    assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges[res_cnt]->minutestring = minutestring


 	  elseif (deltaflag = 2)
     	  ;advanced, use advanced_delta instead of rrf

     	  deltastring = build(
     	    				trim(format(deltalow,"#######.#;P ;F"),3),
     					captions->spacetto)
     	  deltastring2 = concat(" ",
     					trim(format(deltahigh,"#######.#;P ;F"),3)
     				)

     	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges[res_cnt]->deltastring = build(deltastring, deltastring2)

     	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges[res_cnt]->typestring = uar_get_code_display(type2)

     	  ;value
     	  valuestring = (
            if(type2 = alpha_type_cv)		""
     	    elseif(value2 = 0.0)		captions->notapp
     	    else     				trim(format(value2,"#######.#;P ;F"),3)
     	    endif
     		)

      	    if (type2 = percent_type_cv)	;percent type
     	    	valuestring = build(valuestring,captions->percentsign)
     	    endif


     	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges[res_cnt]->valuestring = valuestring

	  ;minutes
   	  minutestring = trim(cnvtstring(minutes2))
     	  assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges[res_cnt]->minutestring = minutestring

	  endif
	endif     ;delta flag > 0


	foot refid

	;resize result range structure
	if (res_cnt > 0)
	  stat = alterlist(assay_delta->qual[assay_cnt]->refranges[ref_cnt]->resultranges, res_cnt)
	endif


	foot task_assay_cd

	assay_delta->qual[assay_cnt]->numrefranges = ref_cnt

	;resize reference range structure
	if (ref_cnt > 0)
	  stat = alterlist(assay_delta->qual[assay_cnt]->refranges, ref_cnt)
	endif

	;store delta count
	assay_delta->qual[assay_cnt]->numdeltas = delta_cnt


	foot page
	row + 0


	foot report

	;resize memory to actual number of records
	if (assay_cnt > 0)
	  stat = alterlist(assay_delta->qual,assay_cnt)
	endif


	with	outerjoin = d,		;get records even if no advanced match
		counter


      /***********************************************************************
      * Find equivalent assays                                               *
      ***********************************************************************/

	select into "nl:"
	task_assay_cd = assay_delta->qual[d1.seq]->task_assay_cd,
	task_assay = assay_delta->qual[d1.seq]->task_assay,
	ra.related_entity_id,
	ra2.task_assay_cd

	from
	(dummyt d1 with seq = value(size(assay_delta->qual,5))),
	related_assay ra,
	related_assay ra2

	plan d1 where assay_delta->qual[d1.seq]->numdeltas > 0
	join ra where ra.task_assay_cd = assay_delta->qual[d1.seq]->task_assay_cd
	join ra2 where ra.related_entity_id = ra2.related_entity_id

    order task_assay, task_assay_cd

	head task_assay_cd

	equiv_cnt = 0

	detail

	if (task_assay = ra.task_assay_cd)
	  if (ra.related_entity_id = ra2.related_entity_id)
	  ;found an equivalent assay

	  if (task_assay != ra2.task_assay_cd)	;don't show assays equivalent to themselves
	    equiv_cnt = equiv_cnt + 1
	    if (mod(equiv_cnt,10) = 1)
	      stat = alterlist(assay_delta->qual[d1.seq]->related_assays,equiv_cnt+9)
	    endif
	    assay_delta->qual[d1.seq]->related_assays[equiv_cnt]->equiv_assay = ra2.task_assay_cd
	  endif
	  endif
	endif


	foot task_assay

	if (equiv_cnt > 0)
	  stat = alterlist(assay_delta->qual[d1.seq]->related_assays,equiv_cnt)
	endif


	with nocounter


      /***********************************************************************
      * Display report                                                       *
      ***********************************************************************/


	select
	task_assay_cd = assay_delta->qual[d1.seq]->task_assay_cd,
	task_assay = assay_delta->qual[d1.seq]->task_assay

	from
	(dummyt d1 with seq = value(size(assay_delta->qual,5)))

	where assay_delta->qual[d1.seq]->numdeltas > 0

        order by task_assay, task_assay_cd

	head report
	  row + 0

	head page
	today = format(curdate,"dd-mmm-yy;;q")
	col 1 captions->ddate
	col +1 today
	col 40 captions->gla
	col 110 captions->pageno
	col +1 curpage
	row +1
	col 1 captions->ttime
	col +1 curtime
	row +1
	col 1 captions->glacttype
	col +1 actvty_type_disp
	row +2		;separate page header from report info

	is_first_assay_on_page = 1


	head task_assay

	;formatting
	;if starts too low, start new page
	if (assay_delta->qual[assay_cnt]->numrefranges > 0)
	  res_cnt = assay_delta->qual[d1.seq]->refranges[1]->numresranges ;number of ref ranges in 1st element
	  if ((row + res_cnt + 4 > max_nbr_rows) and (res_cnt < max_nbr_rows - 10))
	    row + max_nbr_rows
	  endif
	endif

	if (is_first_assay_on_page)
	  ;labels for the assay
	  col 1  captions->tamne
	  col 26 captions->curprevflag
	  col 51 captions->equivassays
	  row +1
	  col 1  "---------------------------------------------------------------------------"
	  row +1

	  is_first_assay_on_page = 0
	endif

	col 1 assay_delta->qual[d1.seq]->task_assay

	deltalevel = assay_delta->qual[d1.seq]->curprev

	if (deltalevel = 1)
	  col 26 captions->delta_cur
	elseif (deltalevel = 2)
	  col 26 captions->delta_curprev
	elseif (deltalevel = 0)
	  col 26 captions->delta_no
	endif

	;list equiv assays if any
	equiv_cnt = size(assay_delta->qual[d1.seq]->related_assays,5)

	i = 0

	while(i < equiv_cnt)
	  i = i + 1
	  if (i > 1)
	    row + 1		;start new line if more than 1 equiv assay
	  endif
	  equiv_string = uar_get_code_display(assay_delta->qual[d1.seq]->related_assays[i]->equiv_assay)
	  col 51 equiv_string
	endwhile


   	/*-------------------------------------------------------------------------
		                           reference ranges
	---------------------------------------------------------------------------*/

	ref_cnt = assay_delta->qual[d1.seq]->numrefranges ;should equal size(assay_delta->qual[d1.seq]->refranges,5)

	i = 0					;for each reference range
     	while (i < ref_cnt)
     	  i = i + 1
	  row + 2				;separate reference ranges by whitespace

	  res_cnt = assay_delta->qual[d1.seq]->refranges[i]->numresranges   ;number of result ranges. Should equal size...


 	;formatting
 	;start new page if it would go across reference ranges
  	  if ((row + res_cnt + 1 > max_nbr_rows) and (res_cnt < max_nbr_rows - 10))
 	    row + max_nbr_rows
 	  endif

	;reference range
	  col 1 captions->refrange

	;number (precedence sequence) and species
	  col 19 assay_delta->qual[d1.seq]->refranges[i]->precedence_species


	;specimen type
 	  col 34 assay_delta->qual[d1.seq]->refranges[i]->spec_type

	;gender
	  col 54 assay_delta->qual[d1.seq]->refranges[i]->gender

	;age range
	  col 71 assay_delta->qual[d1.seq]->refranges[i]->agerange

	;service resource
	  col 101 assay_delta->qual[d1.seq]->refranges[i]->service_res

	;delta check parameters
	  deltaflag3 = assay_delta->qual[d1.seq]->refranges[i]->advanced

	  if (deltaflag3 = 0)
    	    row + 1
 	    col 11 captions->nodelta		;delta check parameters not defined
	  else
	/*--------------------------------------------------------------
		                 Print result ranges if any
	--------------------------------------------------------------*/

	  j = 0
	  while (j < res_cnt)				;for each result range

	    row + 1
	    j = j + 1

	;print result range or "all results"
	    if (deltaflag3 = 1)
	      col 11 captions->allresults
	    elseif (deltaflag3 = 2)
	      col 11 captions->resultrange
	      col 26 assay_delta->qual[d1.seq]->refranges[i]->resultranges[j]->deltastring
	    endif

	;print type, value, and minutes
	    col 53 captions->rr_type
	    col 60 assay_delta->qual[d1.seq]->refranges[i]->resultranges[j]->typestring

	    col 80 captions->rr_value
	    col 88 assay_delta->qual[d1.seq]->refranges[i]->resultranges[j]->valuestring

	    col 101 captions->rr_minutes
	    col 111 assay_delta->qual[d1.seq]->refranges[i]->resultranges[j]->minutestring

           endwhile		;for each result range
     	  endif			;if any result ranges
     	endwhile		;for each reference range



        row +2
        col 1  "---------------------------------------------------------------------------"
        row +1


	detail
	row + 0

	foot page
	row + 0

	foot report
	row + 2
	;        col 44, "* * *  E N D   O F   R E P O R T  * * *"
	col 44, captions->endrpt


	with nullreport


	end
	go

;Generated by GNU enscript 1.6.4.
