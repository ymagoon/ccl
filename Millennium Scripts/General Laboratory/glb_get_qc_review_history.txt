 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_qc_review_history/glb_get_qc_review_history.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                          *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &            *
  *                              Technology, Inc.                            *
  *                                                                          *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.             *
  *  This material contains the valuable properties and trade secrets of     *
  *  Cerner Corporation of Kansas City, Missouri, United States of           *
  *  America (Cerner), embodying substantial creative efforts and            *
  *  confidential information, ideas and expressions, no part of which       *
  *  may be reproduced or transmitted in any form or by any means, or        *
  *  retained in any storage or retrieval system without the express         *
  *  written permission of Cerner.                                           *
  *                                                                          *
  *  Cerner is a registered mark of Cerner Corporation.                      *
  *                                                                          *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       glb_get_qc_review_history.prg
        Object name:            glb_get_qc_review_history
        Request #:              250230
 
        Product:                PathNet General Lab
        Product Team:           PathNet General Lab
        HNA Version:            500
        CCL Version:            8.0
 
        Program purpose:        Returns the primary and secondary review history of
        						a QC result to be displayed to the user
 
        Tables read:            QC_RESULT_EVENT, PRSNL
 
        Tables updated:         NONE
 
        Executing from:         General Lab QC Inquiry
 
        Special Notes:
 
************************************************************************************/
;~DB~********************************************************************************
;~DB~********************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG                      *
;    ********************************************************************************
;    * Mod Date     Engineer       Comment                                          *
;    * --- -------- -------------- ------------------------------------------------ *
;    * 001 05/20/04 Scott Sundahl  Initial                                          *
;~DE~********************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ***************************/
drop program glb_get_qc_review_history:dba go
create program glb_get_qc_review_history:dba
 
%i cclsource:pcs_subevent.inc
 
 
;***********************************************************************
;*   Record Request                                                    *
;***********************************************************************
/*
record request
(
	1 qc_result_id			
)
*/
 
 
;***********************************************************************
;*   Record Reply                                                      *
;***********************************************************************
record reply
(
	1 qual[*]
		2 review_by			= vc
		2 review_dt_tm		= dq8
		2 review_type_flag	= i2	
 
%I CCLSOURCE:STATUS_BLOCK.INC
)
 
 
;***********************************************************************
;*   Variable Declarations                                             *
;***********************************************************************

declare nCount = i4                     	 with protect, noconstant(0)

declare RESULT_STATUS_CODESET = i4           with protect, constant(1901)

declare RESULT_STATUS_REVIEWED_CDF = c12     with protect, constant("REVIEWED")
declare result_status_reviewed_cd  = f8      with protect, noconstant(0.0)

declare RESULT_STATUS_REVIEWED2_CDF = c12    with protect, constant("REVIEWED2")
declare result_status_reviewed2_cd  = f8     with protect, noconstant(0.0)

;***********************************************************************
;* Initializations                                                     *
;***********************************************************************
 
set reply->status_data->status = "F"
 
 
;***********************************************************************
;* Load result status code set                                         *
;***********************************************************************

set stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_REVIEWED_CDF,1,result_status_reviewed_cd)
if (result_status_reviewed_cd = 0)
    call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REVIEWED (cs 1901) failed.")
    go to exit_script
endif

set stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_REVIEWED2_CDF,1,result_status_reviewed2_cd)
if (result_status_reviewed2_cd = 0)
    call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REVIEWED2 (cs 1901) failed.")
    go to exit_script
endif

;***********************************************************************
;* Retrieve data from the database                                     *
;***********************************************************************

select into "nl:"

from
	qc_result_event qre,
	prsnl p

plan qre where qre.qc_result_id = request->qc_result_id and
	qre.event_type_cd in (result_status_reviewed_cd, result_status_reviewed2_cd)
	
join p where p.person_id = qre.event_personnel_id

detail 
	nCount = nCount + 1
    if (nCount > size(reply->qual, 5))
        stat = alterlist(reply->qual, nCount + 10)
    endif
    reply->qual[nCount].review_by = p.name_full_formatted 
	reply->qual[nCount].review_dt_tm = qre.event_dt_tm
	if (qre.event_type_cd = result_status_reviewed_cd)		
		reply->qual[nCount].review_type_flag = 1
	else 
		reply->qual[nCount].review_type_flag = 2
	endif
	
foot report
 
 	stat = alterlist(reply->qual, nCount)
 
with nocounter

;***********************************************************************
;* Script Exit                                                         *
;***********************************************************************
if (nCount = 0)
  set reply->status_data->status = "Z"
else
  set reply->status_data->status = "S"
endif

#exit_script
 
end
 
go

;Generated by GNU enscript 1.6.4.
