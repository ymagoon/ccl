 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_detail_procedures/glb_get_detail_procedures.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_DETAIL_PROCEDURES.PRG
        Object name:            GLB_GET_DETAIL_PROCEDURES
        Request #:              250089

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieves detail procedures for a given 
                                alphabetical range.
                               
        Tables read:            discrete_task_assay
                                
        Tables updated:         n/a

        Executing from:         General Lab build/maintain differential tool
                                General Lab build/maintain qc reference tool


        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 05/28/96 Chad Moats           Initial Release                     *
;     001 04/06/99 Chad Moats           Added result type filter to request *
;                                       and error checking                  *
;	  002 12/04/03 Scott Sundahl		Modified to filter non genlab 		*
;										procedures.  Shows all procedures	*
;										when user does not specify a 		*
;										specific value or range				*
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_DETAIL_PROCEDURES:dba go    
      create program GLB_GET_DETAIL_PROCEDURES:dba
      
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                               
         1 mnemonic_begin            = vc        
         1 mnemonic_end              = vc
         1 result_type               = i2                       ;001
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 procedures[5]
           2 nbr_procedures          = i4
           2 mnemonic                = vc
           2 task_assay_cd           = f8
         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
      )

     #Script
      declare mnemonic_size = i4
      set failed = "F"
      set reply->status_data->status = "F"
      set procedure_cnt = 0
      set mnemonic_begin = cnvtupper(request->mnemonic_begin)
      set mnemonic_end = cnvtupper(request->mnemonic_end)
      if (request->result_type = NULL)                                  ;001
        set request->result_type = 0                                    ;001
      endif                                                             ;001
      if (request->mnemonic_begin = "")
          set mnemonic_begin = ""
          set mnemonic_end = "" 
      endif
      set RESULT_TYPE_CODE_SET = 289                                    ;001
      declare RESULT_TYPE_CD = f8                                       ;001
      set sErrorMsg = FILLSTRING(255," ")                               ;001 - string containing error message
      set error_check = ERROR(sErrorMsg,1)                              ;001 - reset error queue to empty

/*******************************************************************/
/* Get Result Types                                                */
/*******************************************************************/
     if (request->result_type > 0)                                      ;001
       SELECT                                                           ;001
        into  "nl:"                                                     ;001
           c.code_value                                                 ;001
        FROM                                                            ;001    
           code_value c                                                 ;001
        PLAN c                                                          ;001
           where (c.code_set = RESULT_TYPE_CODE_SET and c.cdf_meaning = cnvtstring(request->result_type)) ;001 
        DETAIL                                                          ;001
           RESULT_TYPE_CD = c.code_value                                ;001
       WITH                                                             ;001
           nocounter                                                    ;001

       set error_check = ERROR(sErrorMsg,0)                             ;001 - get error message
       if (error_check != 0)                                            ;001
         set reply->status_data->status = "F"                           ;001
         set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg ;001
         set failed = "T"                                               ;001
         go to exit_script                                              ;001
       endif                                                            ;001
     endif
     set mnemonic_size = size(trim(mnemonic_begin),1)

/*******************************************************************/
/* Get mnemonics for requested procedure range.                    */
/*******************************************************************/
      SELECT 
      into  "nl:"
         d.mnemonic_key_cap,
         d.task_assay_cd
      FROM
         discrete_task_assay d
      WHERE (d.mnemonic_key_cap between mnemonic_begin and mnemonic_end 
      	 or mnemonic_size = 0)
         and (request->result_type = 0 or d.default_result_type_cd = RESULT_TYPE_CD) ;001
      	 and parser(build("d.activity_type_cd in (", GetGenLabActivityTypes(0), ")"))
      ORDER d.mnemonic_key_cap
      DETAIL
         procedure_cnt = procedure_cnt + 1
         IF (mod(procedure_cnt, 5) = 1 and procedure_cnt != 1)
             stat = alter(reply->procedures, procedure_cnt + 5)
         ENDIF
         reply->procedures[procedure_cnt]->nbr_procedures = procedure_cnt
         reply->procedures[procedure_cnt]->mnemonic = d.mnemonic_key_cap
         reply->procedures[procedure_cnt]->task_assay_cd = d.task_assay_cd
      WITH
         nocounter
      if (curqual = 0)
         go to invalid_procedure
      endif
      set stat = alter(reply->procedures, procedure_cnt)

      set error_check = ERROR(sErrorMsg,0)                                      ;001 - get error message
      if (error_check != 0)                                                     ;001    
        set reply->status_data->status = "F"                                    ;001
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg ;001
        set failed = "T"                                                        ;001
        go to exit_script                                                       ;001
      endif                                                                     ;001

      go to exit_script

/********************************************************************/ 
/* Executed if requested procedure is not found.                    */
/********************************************************************/
     #invalid_procedure
      set reply->status_data->subeventstatus[1]->operationname = 
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "S"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "discrete_task_assay table"
      set failed = "Z"
      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
      elseif (failed = "Z")
         set reply->status_data->status = "Z"
      else
         set reply->status_data->status = "F"
      endif

/********************************************************************/
/* Parser															*/
/********************************************************************/

	declare GetGenLabActivityTypes(none = i2) = vc with private
	subroutine GetGenLabActivityTypes(none)
  	declare nTotal = i4 with private, noconstant(0)
  	declare nCurrent = i4 with private, noconstant(1)
  	declare nLoopCount = i4 with private, noconstant(1)
  	declare dCodeValue = f8 with private, noconstant(0.0)
  	declare sCodeValues = vc with private, noconstant

  	while (nTotal = 0 or nCurrent <= nTotal)
      set stat = uar_get_meaning_by_codeset(106, "GLB", nCurrent, dCodeValue)
      if (stat != 0 or dCodeValue = 0.0)
      	set g_nUarErrorInd = 1
      	go to EXIT_SCRIPT
      endif

      set sCodeValues = build(sCodeValues, ",", dCodeValue)

      if (nTotal = 0)
      	set nTotal = nCurrent
      endif

      set nLoopCount = nLoopCount + 1
      set nCurrent = nLoopCount
  	endwhile

  	;Strip leading comma
  	set sCodeValues = substring(2, size(sCodeValues) - 1, sCodeValues)

  	return (sCodeValues)
	end ;subroutine

END
GO     


;Generated by GNU enscript 1.6.4.
