 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_lot_ts_assay/glb_get_lot_ts_assay.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_LOT_TS_ASSAY.PRG
        Object name:            GLB_GET_LOT_TS_ASSAY
        Request #:              257511

        Product:                General Lab/Quality Control           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieve assay info associated with
                                the lot, test site, & service resource

        Tables read:            assay_resource_lot

        Tables updated:         n/a

        Executing from:         General Lab Build/Maintain Control Material

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 07/08/96 Chad Moats           Initial Release                     *
;     001 01/03/02 Ahti Rovainen        Added Order By for Each Head        *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_LOT_TS_ASSAY:dba go    
      create program GLB_GET_LOT_TS_ASSAY:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                                       
         1 control_id             = f8
         1 lot_id                 = f8
         1 service_resource_cd    = f8
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 service_resource_cd       = f8
         1 lot_id                    = f8
         1 nbr_assays                = i2
         1 assay_data[*]
           2 task_assay_cd           = f8
           2 task_assay_disp         = vc
           2 mean                    = f8
           2 clinical_std_dev        = f8
           2 statistical_std_dev     = f8
           2 abs_low                 = f8
           2 abs_high                = f8
	   2 manf_mean		     = f8
	   2 manf_std_dev	     = f8
	   2 manf_low		     = f8
	   2 manf_high		     = f8
           2 rule_id                 = f8
           2 nbr_alphas              = i2
           2 assay_updt_cnt          = i4
           2 alpha_data[*]
             3 nomenclature_id       = f8
             3 result_process_cd     = f8
             3 alpha_response        = vc
%i cclsource:status_block.inc
      )

     #Script
      set reply->status_data->status = "F"
      set assay_cnt = 0
      set alpha_cnt = 0
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

/********************************************************************/
/* Select numeric procedures from assay_resource_lot                */
/********************************************************************/

     SELECT into "nl:"
         a.task_assay_cd,
         a.lot_id,
         q.task_assay_cd,
         q_exists = decode(q.seq,"Y","N"),
         n.nomenclature_id
      FROM
         assay_resource_lot a,
         qc_alpha_responses q,
         nomenclature n ,
         (dummyt d1 with seq = 1)
      PLAN a
         where request->lot_id = a.lot_id and
               request->service_resource_cd = a.service_resource_cd 
               and a.active_ind = 1
      JOIN d1
         where d1.seq = 1
      JOIN q
         where (q.service_resource_cd = a.service_resource_cd
         and q.task_assay_cd = a.task_assay_cd 
         and q.control_id = request->control_id) 
      JOIN n 
         where n.nomenclature_id = q.nomenclature_id

      order by a.lot_id, a.task_assay_cd

      HEAD a.lot_id
            reply->service_resource_cd = a.service_resource_cd,
            reply->lot_id = a.lot_id
      HEAD a.task_assay_cd
            alpha_cnt = 0
            assay_cnt = assay_cnt + 1
            if (mod(assay_cnt,5) = 1)
               stat =  alterlist(reply->assay_data,assay_cnt + 5)
            endif        
            reply->nbr_assays = assay_cnt,
            reply->assay_data[assay_cnt]->task_assay_cd = a.task_assay_cd,
            reply->assay_data[assay_cnt]->mean = a.mean,
            reply->assay_data[assay_cnt]->clinical_std_dev = a.clinical_std_dev,
            reply->assay_data[assay_cnt]->statistical_std_dev = a.statistical_std_dev,
            reply->assay_data[assay_cnt]->abs_low = a.abs_low,
            reply->assay_data[assay_cnt]->abs_high = a.abs_high,
            reply->assay_data[assay_cnt]->manf_mean = a.manf_mean,
            reply->assay_data[assay_cnt]->manf_std_dev = a.manf_std_dev,
            reply->assay_data[assay_cnt]->manf_low = a.manf_low,
            reply->assay_data[assay_cnt]->manf_high = a.manf_high,
            reply->assay_data[assay_cnt]->rule_id = a.rule_id,
            reply->assay_data[assay_cnt]->assay_updt_cnt = a.updt_cnt
      DETAIL
         if (q_exists = "Y") 
           alpha_cnt = alpha_cnt + 1
           if (mod(alpha_cnt,5) = 1)
              stat =  alterlist(reply->assay_data[assay_cnt].alpha_data,alpha_cnt + 5)
           endif        
           reply->assay_data[assay_cnt].nbr_alphas = alpha_cnt,
           reply->assay_data[assay_cnt]->alpha_data[alpha_cnt].result_process_cd = q.result_process_cd,
           reply->assay_data[assay_cnt]->alpha_data[alpha_cnt].nomenclature_id = n.nomenclature_id,
           reply->assay_data[assay_cnt]->alpha_data[alpha_cnt].alpha_response = n.source_string
         else
           reply->assay_data[assay_cnt].nbr_alphas = 0
         endif
      FOOT a.task_assay_cd
         stat = alterlist(reply->assay_data[assay_cnt].alpha_data,alpha_cnt) 
      FOOT a.lot_id
         stat = alterlist(reply->assay_data,assay_cnt) 
      WITH
         outerjoin = d1,
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

      if (curqual = 0)
        go to no_assays
      else
        set reply->status_data->status = "S"
      endif

      go to exit_script

/********************************************************************/ 
/* Executed if assay_resource_lot table get is unsuccessful         */
/********************************************************************/
      #no_assays
        set reply->status_data->subeventstatus[1]->operationname = 
           "get"
        set reply->status_data->subeventstatus[1]->operationstatus = 
           "Z"
        set reply->status_data->subeventstatus[1]->targetobjectname = 
           "table"
        set reply->status_data->subeventstatus[1]->targetObjectValue = 
           "assay_resource_lot table"
        set reply->status_data->status = "S"

      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script

END GO
     

;Generated by GNU enscript 1.6.4.
