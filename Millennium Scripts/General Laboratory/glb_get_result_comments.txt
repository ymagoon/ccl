 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_result_comments/glb_get_result_comments.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_GET_RESULT_COMMENTS.PRG
        Object name:            GLB_GET_RESULT_COMMENTS
        Request #:              250109

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve chartable and non-chartable
                                result comments

        Tables read:            long_text
                                result_comment

        Tables updated:         n/a
        Executing from:         General Lab result entry application(s)

        Special Notes:          If the request->current_ind = 1, then load
                                the current comments.

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 08/11/96 Jeff Fry             Initial Release                     *
;     001 01/05/02 Sasi Gandham         Add UARs and Order By               *
;     002 06/12/02 Gary Runde           Retrieve Review Notes               *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_RESULT_COMMENTS:dba go
      create program GLB_GET_RESULT_COMMENTS:dba

%i cclsource:pcs_subevent.inc

/*
      record request
      (
         1  result_id           = f8
      )
*/

      record reply
      (
         1  comment_types[3]
            2  comment_mean     = vc
            2  comment_ind      = i2
            2  comment_text     = vc
%i cclsource:status_block.inc
      )

/* Initialization */
	  declare failed                 = c1  with protect, noconstant("F")
	  declare COMMENT_TYPE_CODESET   = i4  with protect, constant(14)

	  declare RESULT_COMMENT         = c12 with protect, constant("RES COMMENT")  ;chartable
	  declare RESULT_NOTE            = c12 with protect, constant("RES NOTE")     ;non-chartable
	  declare REVIEW_NOTE            = c12 with protect, constant("REVIEW")       ;non-chartable

   declare result_comment_type_cd = f8 with protect, noconstant(0.0)
   declare result_note_type_cd    = f8 with protect, noconstant(0.0)
   declare review_note_type_cd    = f8 with protect, noconstant(0.0)
   
   declare comment_action_seq     = i4
   declare note_action_seq        = i4

   set reply->status_data->status = "Z" ;assume none found
   set reply->comment_types[1]->comment_mean = RESULT_COMMENT
   set reply->comment_types[1]->comment_ind = 0
   set reply->comment_types[1]->comment_text = ""
   set reply->comment_types[2]->comment_mean = RESULT_NOTE
   set reply->comment_types[2]->comment_ind = 0
   set reply->comment_types[2]->comment_text = ""
   set reply->comment_types[3]->comment_mean = REVIEW_NOTE
   set reply->comment_types[3]->comment_ind = 0
   set reply->comment_types[3]->comment_text = ""

	/* Get order comment/note code value */
	
	SET stat = UAR_GET_MEANING_BY_CODESET(COMMENT_TYPE_CODESET,RESULT_COMMENT,1,result_comment_type_cd)
	
	if (result_comment_type_cd =0)
	  set failed = "T"
	  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of RESULT_COMMENT (cs 14) failed.")
	  go to exit_script
	endif
	
	set nCodeCnt = 1
	
	SET stat = UAR_GET_MEANING_BY_CODESET(COMMENT_TYPE_CODESET,RESULT_NOTE,1,result_note_type_cd)
	
	if (result_note_type_cd= 0)
	  set failed = "T"
	  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of RESULT_NOTE (cs 14) failed.")
	  go to exit_script
	endif

	SET stat = UAR_GET_MEANING_BY_CODESET(COMMENT_TYPE_CODESET,REVIEW_NOTE,1,review_note_type_cd)
	
	if (review_note_type_cd= 0)
	  set failed = "T"
	  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REVIEW (cs 14) failed.")
	  go to exit_script
	endif


/* Get Chartable comment */
      select into "nl:"
         rc.result_id,
         rc.comment_type_cd,
         lt.long_text_id
      from
         result_comment rc,
         long_text lt
      plan rc where rc.result_id = request->result_id
                and rc.comment_type_cd = result_comment_type_cd
      join lt where lt.long_text_id = rc.long_text_id
      order rc.result_id, rc.action_sequence desc

      head rc.result_id
         reply->comment_types[1]->comment_ind = 1
         reply->comment_types[1]->comment_text = lt.long_text
         reply->status_data->status = "S"
      with nocounter

/* Get Non-chartable note */
      select into "nl:"
         rc.result_id,
         rc.comment_type_cd,
         lt.long_text_id
      from
         result_comment rc,
         long_text lt
      plan rc where rc.result_id = request->result_id
                and rc.comment_type_cd = result_note_type_cd
      join lt where lt.long_text_id = rc.long_text_id
      order rc.result_id, rc.action_sequence desc
      head rc.result_id
         reply->comment_types[2]->comment_ind = 1
         reply->comment_types[2]->comment_text = lt.long_text
         reply->status_data->status = "S"
      with nocounter

/* Get review note */
      select into "nl:"
         rc.result_id,
         rc.comment_type_cd,
         lt.long_text_id
      from
         result_comment rc,
         long_text lt
      plan rc where rc.result_id = request->result_id
                and rc.comment_type_cd = review_note_type_cd
      join lt where lt.long_text_id = rc.long_text_id
      order rc.result_id, rc.action_sequence desc
      head rc.result_id
         reply->comment_types[3]->comment_ind = 1
         reply->comment_types[3]->comment_text = lt.long_text
         reply->status_data->status = "S"
      with nocounter

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
    #exit_script
    if (failed = "T")
        set reply->status_data->status = "Z"
    else
        set reply->status_data->status = "S"
    endif

end go

;Generated by GNU enscript 1.6.4.
