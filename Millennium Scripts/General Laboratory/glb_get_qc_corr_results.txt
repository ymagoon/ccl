 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_qc_corr_results/glb_get_qc_corr_results.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_get_qc_corr_results.prg
        Object name:            glb_get_qc_corr_results
        Request #:              257530

        Product:                General Lab Quality Control
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Load a number of Quality Control results
                                based on the number of results within 
                                control (request->max_within_control) and
                                optionally the number of results across
                                controls (request->max_across_control).
                                Results are selected back from a starting
                                perform date and time.

        Tables read:            code_value
                                control_x_check
                                qc_result
                                qc_result_grp_id

        Tables updated:         None
        Executing from:         

        Special Notes:          

******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 08/16/96 Hal Patchen          Initial Release                     *
;    *001 12/12/97 Kevin Brunner        Add auto verify logic               *
;    *002 08/17/98 Chad Moats           Add patient data logic              *
;    *003 10/08/99 Gary Runde           Retrieve rejected results also      *
;    *004 03/17/05 Scott Sundahl        Add sorting logic to fix cross      *
;    *                                  control rule issues.                *
;    *005 11/11/10 Ryan Manuel          Add logic for within run            *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

             drop program GLB_GET_QC_CORR_RESULTS:dba go    
             create program GLB_GET_QC_CORR_RESULTS:dba
     
      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  control_id                   = f8
         1  service_resource_cd          = f8
         1  task_assay_cd                = f8
         1  across_control_ind           = i2   ;0 = look within a given control
                                                ;1 = look across controls
         1  start_perform_dt_tm          = dq8
         1  max_within_control           = i4
         1  max_across_control           = i4
         1  qc_result_type_flag          = i2   ;0 = qc results         ;003    
                                                ;1 = patient results    ;003
         1  within_run_ind               = i2
         1  worklist_id                  = f8
      )
      */

      /***********************************************************************
      * Temporary Record                                                     *
      ***********************************************************************/
      record temp_reply
      (
         1  qual[*]
            2  qc_result_id              = f8
            2  lot_id                    = f8
            2  control_id                = f8
            2  service_resource_cd       = f8
            2  task_assay_cd             = f8
            2  task_assay_disp           = vc
            2  preactive_ind             = i2
            2  result_status_cd          = f8
            2  perform_personnel_id      = f8
            2  perform_dt_tm             = dq8
            2  result_type_cd            = f8
            2  result_value_numeric      = f8
            2  numeric_raw_value         = f8
            2  result_value_alpha        = c25
            2  nomenclature_id           = f8
            2  resource_error_codes      = vc
            2  multiplex_resource_cd     = f8
            2  rule_id                   = f8
            2  prev_result_id            = f8
            2  mean                      = f8
            2  clinical_std_dev          = f8
            2  statistical_std_dev       = f8
            2  abs_low                   = f8
            2  abs_high                  = f8
            2  arl_id                    = f8
            2  result_control_cd         = f8
            2  updt_cnt                  = i4
            2  qc_group_id               = f8
            2  result_process_cd         = f8
            2  worklist_id               = f8
      )

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      (
         1  qual[*]
            2  qc_result_id              = f8
            2  lot_id                    = f8
            2  control_id                = f8
            2  service_resource_cd       = f8
            2  task_assay_cd             = f8
            2  task_assay_disp           = vc
            2  preactive_ind             = i2
            2  result_status_cd          = f8
            2  perform_personnel_id      = f8
            2  perform_dt_tm             = dq8
            2  result_type_cd            = f8
            2  result_value_numeric      = f8
            2  numeric_raw_value         = f8
            2  result_value_alpha        = c25
            2  nomenclature_id           = f8
            2  resource_error_codes      = vc
            2  multiplex_resource_cd     = f8
            2  rule_id                   = f8
            2  prev_result_id            = f8
            2  mean                      = f8
            2  clinical_std_dev          = f8
            2  statistical_std_dev       = f8
            2  abs_low                   = f8
            2  abs_high                  = f8
            2  arl_id                    = f8
            2  result_control_cd         = f8
            2  updt_cnt                  = i4
            2  qc_group_id               = f8
            2  result_process_cd         = f8
            2  worklist_id               = f8
%i cclsource:status_block.inc
      )

      /***********************************************************************
      * Internal Record                                                      *
      ***********************************************************************/
      record internal
      ( 
         1  qual[*]
            2  control_id                = f8
      )

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set CV_REQUIRED_RECS            = 5
         declare cv_cnt                  = i4
         set RESULT_STATUS_CODESET       = 1901
         declare RESULT_STATUS_REJECT_CDF    = c12 with protect, constant("REJECT")
         declare RESULT_STATUS_ACCEPT_CDF    = c12 with protect, constant("ACCEPT")
         declare RESULT_STATUS_VERIFIED_CDF  = c12 with protect, constant("VERIFIED")
         declare RESULT_STATUS_AUTO_VERF_CDF = c12 with protect, constant("AUTOVERIFIED")
         declare RESULT_STATUS_CHANGED_CDF   = c12 with protect, constant("CHANGE")
         declare result_status_reject_cd = f8              ;003
         declare result_status_accept_cd = f8
         declare result_status_verified_cd   = f8
         declare result_status_auto_verf_cd  = f8  ;001
         declare result_status_changed_cd = f8
         declare stat                    = i4 with protect, noconstant(0)
         declare cnt                     = i4 with protect, noconstant(0)
         declare q_cnt                   = i4 with protect, noconstant(0)
         declare tot_within              = i4 with protect, noconstant(0)
         declare tot_across              = i4 with protect, noconstant(0)
         
         declare nContineProcessingInd   = i2 with protect, noconstant(0)
         declare lLookBackDays           = i4 with protect, noconstant(0)
         declare lLookAheadDays          = i4 with protect, noconstant(0)
         
         if (request->qc_result_type_flag = NULL)       ;003
           set request->qc_result_type_flag = 0         ;003
         endif                                          ;003

         set reply->status_data.status = "F"

      /***********************************************************************
      * Load result status code set                                          *
      ***********************************************************************/
         set cv_cnt = 0

         call uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_ACCEPT_CDF, 1, result_status_accept_cd)
         if (result_status_accept_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
         
         call uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_REJECT_CDF, 1, result_status_reject_cd)
         if (result_status_reject_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
         
         call uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_VERIFIED_CDF, 1, result_status_verified_cd)
         if (result_status_verified_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
         
         call uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_AUTO_VERF_CDF, 1, result_status_auto_verf_cd)
         if (result_status_auto_verf_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
         
         call uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_CHANGED_CDF, 1, result_status_changed_cd)
         if (result_status_changed_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
         
         ;* Verify that all required code value records were read.
         if (cv_cnt != CV_REQUIRED_RECS)
            go to Exit_Script
         endif

      /***********************************************************************
      * Load control's to search across for results.                         *
      ***********************************************************************/
      if (request->qc_result_type_flag = 0)                     ;003
         if (request->across_control_ind = 1)
            select into "nl:"
               cxc.control_id,
               cxc.control_x_id
            from 
               control_x_check cxc
            plan cxc where cxc.control_id = request->control_id
            detail
               cnt = cnt + 1,
               stat = alterlist(internal->qual, cnt),
               internal->qual[cnt].control_id = cxc.control_x_id
            with nocounter
         endif
      endif                                                     ;003

      /***********************************************************************
      * Select qc results for the across control results                     *
      ***********************************************************************/

       set nContineProcessingInd = 1
       set lLookBackDays = 0
       set lLookAheadDays = 3

       while ((nContineProcessingInd = 1) and (cnt > 0))
       
         set lLookBackDays = lLookBackDays - 3
         set lLookAheadDays = lLookAheadDays - 3
         
         ;check for if we have not found enough results after ninty days
         if (lLookAheadDays = -90)
           ;set the day range to be very large so to get all results
           set lLookBackDays = cnvtint(datetimediff(cnvtdatetime("01-JAN-1990 00:00:00"), 
                                       cnvtdatetime(request->start_perform_dt_tm)))
           set nContineProcessingInd = 0
         endif

         select into "nl:"
            d.seq,
            qr.seq
         from
            (dummyt d with seq = value(cnt)),
            qc_result qr
 
         plan    d
         join    qr  where qr.control_id = internal->qual[d.seq].control_id
                       and qr.service_resource_cd = request->service_resource_cd
                       and qr.task_assay_cd = request->task_assay_cd
                       and qr.result_status_cd in ( result_status_accept_cd,
                                                    result_status_reject_cd, ;003
                                                    result_status_verified_cd,
                                                    result_status_auto_verf_cd,  ;001
                                                    result_status_changed_cd)
                       and qr.qc_result_type_flag = request->qc_result_type_flag ;003
                       and qr.preactive_ind = 0
                       and qr.perform_dt_tm <=
                                     cnvtdatetime(datetimeadd(request->start_perform_dt_tm, lLookAheadDays))
                       and qr.perform_dt_tm >
                                     cnvtdatetime(datetimeadd(request->start_perform_dt_tm, lLookBackDays))

         order by
            cnvtdatetime(qr.perform_dt_tm) desc

         detail

            ;*************************************************
            ;* Check for a qualifying result across controls *
            ;*************************************************
            if (tot_across < request->max_across_control)
               tot_across = tot_across + 1
               
               ;stop processing if we found the last result
               if (tot_across = request->max_across_control)
                 nContineProcessingInd = 0
               endif

               q_cnt = q_cnt + 1
               if (q_cnt > size(temp_reply->qual, 5))
                  stat = alterlist(temp_reply->qual, q_cnt + 10)
               endif

               temp_reply->qual[q_cnt].qc_result_id = qr.qc_result_id
               temp_reply->qual[q_cnt].lot_id = qr.lot_id
               temp_reply->qual[q_cnt].control_id = qr.control_id
               temp_reply->qual[q_cnt].service_resource_cd = qr.service_resource_cd
               temp_reply->qual[q_cnt].task_assay_cd = qr.task_assay_cd
               temp_reply->qual[q_cnt].preactive_ind = qr.preactive_ind
               temp_reply->qual[q_cnt].result_status_cd = qr.result_status_cd
               temp_reply->qual[q_cnt].perform_personnel_id = qr.perform_personnel_id
               temp_reply->qual[q_cnt].perform_dt_tm = qr.perform_dt_tm
               temp_reply->qual[q_cnt].result_type_cd = qr.result_type_cd
               temp_reply->qual[q_cnt].result_value_numeric = qr.result_value_numeric
               temp_reply->qual[q_cnt].numeric_raw_value = qr.numeric_raw_value
               temp_reply->qual[q_cnt].result_value_alpha = qr.result_value_alpha
               temp_reply->qual[q_cnt].nomenclature_id = qr.nomenclature_id
               temp_reply->qual[q_cnt].resource_error_codes = qr.resource_error_codes
               temp_reply->qual[q_cnt].multiplex_resource_cd = qr.multiplex_resource_cd
               temp_reply->qual[q_cnt].rule_id = qr.rule_id
               temp_reply->qual[q_cnt].prev_result_id = qr.prev_result_id
               temp_reply->qual[q_cnt].mean = qr.mean
               temp_reply->qual[q_cnt].clinical_std_dev = qr.clinical_std_dev
               temp_reply->qual[q_cnt].statistical_std_dev = qr.statistical_std_dev
               temp_reply->qual[q_cnt].abs_low = qr.abs_low
               temp_reply->qual[q_cnt].abs_high = qr.abs_high
               temp_reply->qual[q_cnt].arl_id = qr.arl_id
               temp_reply->qual[q_cnt].result_control_cd = qr.result_control_cd
               temp_reply->qual[q_cnt].result_process_cd = qr.result_process_cd
               temp_reply->qual[q_cnt].updt_cnt = qr.updt_cnt
               temp_reply->qual[q_cnt].qc_group_id = qr.qc_group_id
               if (request->within_run_ind = 1 and 
                   request->worklist_id > 0.0 and
                   qr.copy_forward_worklist_id = request->worklist_id)
                 temp_reply->qual[q_cnt].worklist_id = qr.copy_forward_worklist_id
               else
                 temp_reply->qual[q_cnt].worklist_id = qr.worklist_id
               endif
            endif
            
         foot report
            stat = alterlist(temp_reply->qual, q_cnt)

         with 
            nocounter
       endwhile

      /***********************************************************************
      * Select qc results for the within control results                     *
      ***********************************************************************/

       set nContineProcessingInd = 1
       set lLookBackDays = 0
       set lLookAheadDays = 3
              
       while (nContineProcessingInd = 1)

         set lLookBackDays = lLookBackDays - 3
         set lLookAheadDays = lLookAheadDays - 3

         ;check for if we have not found enough results after ninty days
         if (lLookAheadDays = -90)
           ;set the day range to be very large so to get all results
           set lLookBackDays = cnvtint(datetimediff(cnvtdatetime("01-JAN-1990 00:00:00"), 
                                       cnvtdatetime(request->start_perform_dt_tm)))
           set nContineProcessingInd = 0
         endif

         select into "nl:"
            qr.seq
         from
            qc_result qr
 
         plan    qr  where qr.control_id = request->control_id
                       and qr.service_resource_cd = request->service_resource_cd
                       and qr.task_assay_cd = request->task_assay_cd
                       and qr.result_status_cd in ( result_status_accept_cd,
                                                    result_status_reject_cd, ;003
                                                    result_status_verified_cd,
                                                    result_status_auto_verf_cd,  ;001
                                                    result_status_changed_cd)
                       and qr.qc_result_type_flag = request->qc_result_type_flag ;003
                       and qr.preactive_ind = 0
                       and qr.perform_dt_tm <=
                                     cnvtdatetime(datetimeadd(request->start_perform_dt_tm, lLookAheadDays))
                       and qr.perform_dt_tm >
                                     cnvtdatetime(datetimeadd(request->start_perform_dt_tm, lLookBackDays))

         order by
            cnvtdatetime(qr.perform_dt_tm) desc

         detail
            ;*************************************************
            ;* Check for a qualifying result across controls *
            ;*************************************************
            if (tot_within < request->max_within_control)
               tot_within = tot_within + 1
               
               ;stop processing if we found the last result
               if (tot_within = request->max_within_control)
                 nContineProcessingInd = 0
               endif

               q_cnt = q_cnt + 1
               if (q_cnt > size(temp_reply->qual, 5))
                  stat = alterlist(temp_reply->qual, q_cnt + 10)
               endif

               temp_reply->qual[q_cnt].qc_result_id = qr.qc_result_id
               temp_reply->qual[q_cnt].lot_id = qr.lot_id
               temp_reply->qual[q_cnt].control_id = qr.control_id
               temp_reply->qual[q_cnt].service_resource_cd = qr.service_resource_cd
               temp_reply->qual[q_cnt].task_assay_cd = qr.task_assay_cd
               temp_reply->qual[q_cnt].preactive_ind = qr.preactive_ind
               temp_reply->qual[q_cnt].result_status_cd = qr.result_status_cd
               temp_reply->qual[q_cnt].perform_personnel_id = qr.perform_personnel_id
               temp_reply->qual[q_cnt].perform_dt_tm = qr.perform_dt_tm
               temp_reply->qual[q_cnt].result_type_cd = qr.result_type_cd
               temp_reply->qual[q_cnt].result_value_numeric = qr.result_value_numeric
               temp_reply->qual[q_cnt].numeric_raw_value = qr.numeric_raw_value
               temp_reply->qual[q_cnt].result_value_alpha = qr.result_value_alpha
               temp_reply->qual[q_cnt].nomenclature_id = qr.nomenclature_id
               temp_reply->qual[q_cnt].resource_error_codes = qr.resource_error_codes
               temp_reply->qual[q_cnt].multiplex_resource_cd = qr.multiplex_resource_cd
               temp_reply->qual[q_cnt].rule_id = qr.rule_id
               temp_reply->qual[q_cnt].prev_result_id = qr.prev_result_id
               temp_reply->qual[q_cnt].mean = qr.mean
               temp_reply->qual[q_cnt].clinical_std_dev = qr.clinical_std_dev
               temp_reply->qual[q_cnt].statistical_std_dev = qr.statistical_std_dev
               temp_reply->qual[q_cnt].abs_low = qr.abs_low
               temp_reply->qual[q_cnt].abs_high = qr.abs_high
               temp_reply->qual[q_cnt].arl_id = qr.arl_id
               temp_reply->qual[q_cnt].result_control_cd = qr.result_control_cd
               temp_reply->qual[q_cnt].result_process_cd = qr.result_process_cd
               temp_reply->qual[q_cnt].updt_cnt = qr.updt_cnt
               temp_reply->qual[q_cnt].qc_group_id = qr.qc_group_id
               if (request->within_run_ind = 1 and 
                   request->worklist_id > 0.0 and
                   qr.copy_forward_worklist_id = request->worklist_id)
                 temp_reply->qual[q_cnt].worklist_id = qr.copy_forward_worklist_id
               else
                 temp_reply->qual[q_cnt].worklist_id = qr.worklist_id
               endif
            endif
            
         foot report
            stat = alterlist(temp_reply->qual, q_cnt)

         with 
            nocounter
       endwhile
       
       if (request->within_run_ind = 1 and request->worklist_id > 0.0)
         select into "nl:"
            qr.seq
         from
            qc_result qr
 
         plan    qr  where qr.control_id+0.0 = request->control_id
                       and qr.service_resource_cd+0.0 = request->service_resource_cd
                       and qr.task_assay_cd+0.0 = request->task_assay_cd
                       and qr.worklist_id = request->worklist_id
                       and qr.result_status_cd in ( result_status_accept_cd,
                                                    result_status_reject_cd,
                                                    result_status_verified_cd,
                                                    result_status_auto_verf_cd,  
                                                    result_status_changed_cd)
                       and qr.qc_result_type_flag = request->qc_result_type_flag 
                       and qr.preactive_ind = 0
                       and qr.perform_dt_tm <= cnvtdatetime(request->start_perform_dt_tm)

         order by
            cnvtdatetime(qr.perform_dt_tm) desc

         detail
           ;*************************************************
           ;* Check for a qualifying result within run      *
           ;*************************************************
           lIndex = 0
           lSizeReply = size(temp_reply->qual, 5)
           if (lSizeReply = 0 or
               locateval(lIndex, 1, lSizeReply, qr.qc_result_id, temp_reply->qual[lIndex].qc_result_id) <= 0)
             q_cnt = q_cnt + 1
             if (q_cnt > lSizeReply)
                stat = alterlist(temp_reply->qual, q_cnt + 10)
             endif
  
             temp_reply->qual[q_cnt].qc_result_id = qr.qc_result_id
             temp_reply->qual[q_cnt].lot_id = qr.lot_id
             temp_reply->qual[q_cnt].control_id = qr.control_id
             temp_reply->qual[q_cnt].service_resource_cd = qr.service_resource_cd
             temp_reply->qual[q_cnt].task_assay_cd = qr.task_assay_cd
             temp_reply->qual[q_cnt].preactive_ind = qr.preactive_ind
             temp_reply->qual[q_cnt].result_status_cd = qr.result_status_cd
             temp_reply->qual[q_cnt].perform_personnel_id = qr.perform_personnel_id
             temp_reply->qual[q_cnt].perform_dt_tm = qr.perform_dt_tm
             temp_reply->qual[q_cnt].result_type_cd = qr.result_type_cd
             temp_reply->qual[q_cnt].result_value_numeric = qr.result_value_numeric
             temp_reply->qual[q_cnt].numeric_raw_value = qr.numeric_raw_value
             temp_reply->qual[q_cnt].result_value_alpha = qr.result_value_alpha
             temp_reply->qual[q_cnt].nomenclature_id = qr.nomenclature_id
             temp_reply->qual[q_cnt].resource_error_codes = qr.resource_error_codes
             temp_reply->qual[q_cnt].multiplex_resource_cd = qr.multiplex_resource_cd
             temp_reply->qual[q_cnt].rule_id = qr.rule_id
             temp_reply->qual[q_cnt].prev_result_id = qr.prev_result_id
             temp_reply->qual[q_cnt].mean = qr.mean
             temp_reply->qual[q_cnt].clinical_std_dev = qr.clinical_std_dev
             temp_reply->qual[q_cnt].statistical_std_dev = qr.statistical_std_dev
             temp_reply->qual[q_cnt].abs_low = qr.abs_low
             temp_reply->qual[q_cnt].abs_high = qr.abs_high
             temp_reply->qual[q_cnt].arl_id = qr.arl_id
             temp_reply->qual[q_cnt].result_control_cd = qr.result_control_cd
             temp_reply->qual[q_cnt].result_process_cd = qr.result_process_cd
             temp_reply->qual[q_cnt].updt_cnt = qr.updt_cnt
             temp_reply->qual[q_cnt].qc_group_id = qr.qc_group_id
             if (request->within_run_ind = 1 and 
                 request->worklist_id > 0.0 and
                 qr.copy_forward_worklist_id = request->worklist_id)
               temp_reply->qual[q_cnt].worklist_id = qr.copy_forward_worklist_id
             else
               temp_reply->qual[q_cnt].worklist_id = qr.worklist_id
             endif
           endif
            
         foot report
            stat = alterlist(temp_reply->qual, q_cnt)

         with nocounter
         
         select into "nl:"
            qr.seq
         from
            qc_result qr
 
         plan    qr  where qr.control_id+0.0 = request->control_id
                       and qr.service_resource_cd+0.0 = request->service_resource_cd
                       and qr.task_assay_cd+0.0 = request->task_assay_cd
                       and qr.copy_forward_worklist_id = request->worklist_id
                       and qr.result_status_cd in ( result_status_accept_cd,
                                                    result_status_reject_cd,
                                                    result_status_verified_cd,
                                                    result_status_auto_verf_cd,  
                                                    result_status_changed_cd)
                       and qr.qc_result_type_flag = request->qc_result_type_flag 
                       and qr.preactive_ind = 0
                       and qr.perform_dt_tm <= cnvtdatetime(request->start_perform_dt_tm)

         order by
            cnvtdatetime(qr.perform_dt_tm) desc

         detail
           ;*************************************************
           ;* Check for a qualifying result within run      *
           ;*************************************************
           lIndex = 0
           lSizeReply = size(temp_reply->qual, 5)
           if (lSizeReply = 0 or
               locateval(lIndex, 1, lSizeReply, qr.qc_result_id, temp_reply->qual[lIndex].qc_result_id) <= 0)
             q_cnt = q_cnt + 1
             if (q_cnt > lSizeReply)
                stat = alterlist(temp_reply->qual, q_cnt + 10)
             endif
  
             temp_reply->qual[q_cnt].qc_result_id = qr.qc_result_id
             temp_reply->qual[q_cnt].lot_id = qr.lot_id
             temp_reply->qual[q_cnt].control_id = qr.control_id
             temp_reply->qual[q_cnt].service_resource_cd = qr.service_resource_cd
             temp_reply->qual[q_cnt].task_assay_cd = qr.task_assay_cd
             temp_reply->qual[q_cnt].preactive_ind = qr.preactive_ind
             temp_reply->qual[q_cnt].result_status_cd = qr.result_status_cd
             temp_reply->qual[q_cnt].perform_personnel_id = qr.perform_personnel_id
             temp_reply->qual[q_cnt].perform_dt_tm = qr.perform_dt_tm
             temp_reply->qual[q_cnt].result_type_cd = qr.result_type_cd
             temp_reply->qual[q_cnt].result_value_numeric = qr.result_value_numeric
             temp_reply->qual[q_cnt].numeric_raw_value = qr.numeric_raw_value
             temp_reply->qual[q_cnt].result_value_alpha = qr.result_value_alpha
             temp_reply->qual[q_cnt].nomenclature_id = qr.nomenclature_id
             temp_reply->qual[q_cnt].resource_error_codes = qr.resource_error_codes
             temp_reply->qual[q_cnt].multiplex_resource_cd = qr.multiplex_resource_cd
             temp_reply->qual[q_cnt].rule_id = qr.rule_id
             temp_reply->qual[q_cnt].prev_result_id = qr.prev_result_id
             temp_reply->qual[q_cnt].mean = qr.mean
             temp_reply->qual[q_cnt].clinical_std_dev = qr.clinical_std_dev
             temp_reply->qual[q_cnt].statistical_std_dev = qr.statistical_std_dev
             temp_reply->qual[q_cnt].abs_low = qr.abs_low
             temp_reply->qual[q_cnt].abs_high = qr.abs_high
             temp_reply->qual[q_cnt].arl_id = qr.arl_id
             temp_reply->qual[q_cnt].result_control_cd = qr.result_control_cd
             temp_reply->qual[q_cnt].result_process_cd = qr.result_process_cd
             temp_reply->qual[q_cnt].updt_cnt = qr.updt_cnt
             temp_reply->qual[q_cnt].qc_group_id = qr.qc_group_id
             if (request->within_run_ind = 1 and 
                 request->worklist_id > 0.0 and
                 qr.copy_forward_worklist_id = request->worklist_id)
               temp_reply->qual[q_cnt].worklist_id = qr.copy_forward_worklist_id
             else
               temp_reply->qual[q_cnt].worklist_id = qr.worklist_id
             endif
           endif
            
         foot report
            stat = alterlist(temp_reply->qual, q_cnt)

         with nocounter
         
         if (cnt > 0)
           select into "nl:"
              d.seq,
              qr.seq
           from
              (dummyt d with seq = value(cnt)),
              qc_result qr
   
           plan    d
           join    qr  where qr.control_id+0.0 = internal->qual[d.seq].control_id
                         and qr.service_resource_cd+0.0 = request->service_resource_cd
                         and qr.task_assay_cd+0.0 = request->task_assay_cd
                         and qr.worklist_id = request->worklist_id
                         and qr.result_status_cd in ( result_status_accept_cd,
                                                      result_status_reject_cd, ;003
                                                      result_status_verified_cd,
                                                      result_status_auto_verf_cd,  ;001
                                                      result_status_changed_cd)
                         and qr.qc_result_type_flag = request->qc_result_type_flag ;003
                         and qr.preactive_ind = 0
                         and qr.perform_dt_tm <= cnvtdatetime(request->start_perform_dt_tm)
  
           order by
              cnvtdatetime(qr.perform_dt_tm) desc
  
           detail
  
              ;*************************************************
              ;* Check for a qualifying result across controls *
              ;*************************************************
              lIndex = 0
              lSizeReply = size(temp_reply->qual, 5)
              if (lSizeReply = 0 or
                 locateval(lIndex, 1, lSizeReply, qr.qc_result_id, temp_reply->qual[lIndex].qc_result_id) <= 0)
                 q_cnt = q_cnt + 1
                 if (q_cnt > lSizeReply)
                    stat = alterlist(temp_reply->qual, q_cnt + 10)
                 endif
  
                 temp_reply->qual[q_cnt].qc_result_id = qr.qc_result_id
                 temp_reply->qual[q_cnt].lot_id = qr.lot_id
                 temp_reply->qual[q_cnt].control_id = qr.control_id
                 temp_reply->qual[q_cnt].service_resource_cd = qr.service_resource_cd
                 temp_reply->qual[q_cnt].task_assay_cd = qr.task_assay_cd
                 temp_reply->qual[q_cnt].preactive_ind = qr.preactive_ind
                 temp_reply->qual[q_cnt].result_status_cd = qr.result_status_cd
                 temp_reply->qual[q_cnt].perform_personnel_id = qr.perform_personnel_id
                 temp_reply->qual[q_cnt].perform_dt_tm = qr.perform_dt_tm
                 temp_reply->qual[q_cnt].result_type_cd = qr.result_type_cd
                 temp_reply->qual[q_cnt].result_value_numeric = qr.result_value_numeric
                 temp_reply->qual[q_cnt].numeric_raw_value = qr.numeric_raw_value
                 temp_reply->qual[q_cnt].result_value_alpha = qr.result_value_alpha
                 temp_reply->qual[q_cnt].nomenclature_id = qr.nomenclature_id
                 temp_reply->qual[q_cnt].resource_error_codes = qr.resource_error_codes
                 temp_reply->qual[q_cnt].multiplex_resource_cd = qr.multiplex_resource_cd
                 temp_reply->qual[q_cnt].rule_id = qr.rule_id
                 temp_reply->qual[q_cnt].prev_result_id = qr.prev_result_id
                 temp_reply->qual[q_cnt].mean = qr.mean
                 temp_reply->qual[q_cnt].clinical_std_dev = qr.clinical_std_dev
                 temp_reply->qual[q_cnt].statistical_std_dev = qr.statistical_std_dev
                 temp_reply->qual[q_cnt].abs_low = qr.abs_low
                 temp_reply->qual[q_cnt].abs_high = qr.abs_high
                 temp_reply->qual[q_cnt].arl_id = qr.arl_id
                 temp_reply->qual[q_cnt].result_control_cd = qr.result_control_cd
                 temp_reply->qual[q_cnt].result_process_cd = qr.result_process_cd
                 temp_reply->qual[q_cnt].updt_cnt = qr.updt_cnt
                 temp_reply->qual[q_cnt].qc_group_id = qr.qc_group_id
                 temp_reply->qual[q_cnt].worklist_id = qr.worklist_id
                 if (request->within_run_ind = 1 and 
                     request->worklist_id > 0.0 and
                     qr.copy_forward_worklist_id = request->worklist_id)
                   temp_reply->qual[q_cnt].worklist_id = qr.copy_forward_worklist_id
                 else
                   temp_reply->qual[q_cnt].worklist_id = qr.worklist_id
                 endif
              endif
              
           foot report
              stat = alterlist(temp_reply->qual, q_cnt)
  
           with 
              nocounter
              
           select into "nl:"
              d.seq,
              qr.seq
           from
              (dummyt d with seq = value(cnt)),
              qc_result qr
   
           plan    d
           join    qr  where qr.control_id+0.0 = internal->qual[d.seq].control_id
                         and qr.service_resource_cd+0.0 = request->service_resource_cd
                         and qr.task_assay_cd+0.0 = request->task_assay_cd
                         and qr.copy_forward_worklist_id = request->worklist_id
                         and qr.result_status_cd in ( result_status_accept_cd,
                                                      result_status_reject_cd, ;003
                                                      result_status_verified_cd,
                                                      result_status_auto_verf_cd,  ;001
                                                      result_status_changed_cd)
                         and qr.qc_result_type_flag = request->qc_result_type_flag ;003
                         and qr.preactive_ind = 0
                         and qr.perform_dt_tm <= cnvtdatetime(request->start_perform_dt_tm)
  
           order by
              cnvtdatetime(qr.perform_dt_tm) desc
  
           detail
  
              ;*************************************************
              ;* Check for a qualifying result across controls *
              ;*************************************************
              lIndex = 0
              lSizeReply = size(temp_reply->qual, 5)
              if (lSizeReply = 0 or
                 locateval(lIndex, 1, lSizeReply, qr.qc_result_id, temp_reply->qual[lIndex].qc_result_id) <= 0)
                 q_cnt = q_cnt + 1
                 if (q_cnt > lSizeReply)
                    stat = alterlist(temp_reply->qual, q_cnt + 10)
                 endif
  
                 temp_reply->qual[q_cnt].qc_result_id = qr.qc_result_id
                 temp_reply->qual[q_cnt].lot_id = qr.lot_id
                 temp_reply->qual[q_cnt].control_id = qr.control_id
                 temp_reply->qual[q_cnt].service_resource_cd = qr.service_resource_cd
                 temp_reply->qual[q_cnt].task_assay_cd = qr.task_assay_cd
                 temp_reply->qual[q_cnt].preactive_ind = qr.preactive_ind
                 temp_reply->qual[q_cnt].result_status_cd = qr.result_status_cd
                 temp_reply->qual[q_cnt].perform_personnel_id = qr.perform_personnel_id
                 temp_reply->qual[q_cnt].perform_dt_tm = qr.perform_dt_tm
                 temp_reply->qual[q_cnt].result_type_cd = qr.result_type_cd
                 temp_reply->qual[q_cnt].result_value_numeric = qr.result_value_numeric
                 temp_reply->qual[q_cnt].numeric_raw_value = qr.numeric_raw_value
                 temp_reply->qual[q_cnt].result_value_alpha = qr.result_value_alpha
                 temp_reply->qual[q_cnt].nomenclature_id = qr.nomenclature_id
                 temp_reply->qual[q_cnt].resource_error_codes = qr.resource_error_codes
                 temp_reply->qual[q_cnt].multiplex_resource_cd = qr.multiplex_resource_cd
                 temp_reply->qual[q_cnt].rule_id = qr.rule_id
                 temp_reply->qual[q_cnt].prev_result_id = qr.prev_result_id
                 temp_reply->qual[q_cnt].mean = qr.mean
                 temp_reply->qual[q_cnt].clinical_std_dev = qr.clinical_std_dev
                 temp_reply->qual[q_cnt].statistical_std_dev = qr.statistical_std_dev
                 temp_reply->qual[q_cnt].abs_low = qr.abs_low
                 temp_reply->qual[q_cnt].abs_high = qr.abs_high
                 temp_reply->qual[q_cnt].arl_id = qr.arl_id
                 temp_reply->qual[q_cnt].result_control_cd = qr.result_control_cd
                 temp_reply->qual[q_cnt].result_process_cd = qr.result_process_cd
                 temp_reply->qual[q_cnt].updt_cnt = qr.updt_cnt
                 temp_reply->qual[q_cnt].qc_group_id = qr.qc_group_id
                 temp_reply->qual[q_cnt].worklist_id = qr.worklist_id
                 if (request->within_run_ind = 1 and 
                     request->worklist_id > 0.0 and
                     qr.copy_forward_worklist_id = request->worklist_id)
                   temp_reply->qual[q_cnt].worklist_id = qr.copy_forward_worklist_id
                 else
                   temp_reply->qual[q_cnt].worklist_id = qr.worklist_id
                 endif
              endif
              
           foot report
              stat = alterlist(temp_reply->qual, q_cnt)
  
           with 
              nocounter
         endif
       endif


      /***********************************************************************
      * Create reply record                                                  *
      ***********************************************************************/

      if (size(temp_reply->qual, 5) = 0)
        set reply->status_data.status = "Z"
        go to Exit_Script
      endif

      set stat = alterlist(reply->qual, size(temp_reply->qual, 5))
      set q_cnt = 0

      select into "nl:"

      from (dummyt d with seq = value(size(temp_reply->qual, 5)))

      order by temp_reply->qual[d.seq].perform_dt_tm desc

      detail
      
        q_cnt = q_cnt + 1
        reply->qual[q_cnt].qc_result_id = temp_reply->qual[d.seq].qc_result_id
        reply->qual[q_cnt].lot_id = temp_reply->qual[d.seq].lot_id
        reply->qual[q_cnt].control_id = temp_reply->qual[d.seq].control_id
        reply->qual[q_cnt].service_resource_cd = temp_reply->qual[d.seq].service_resource_cd
        reply->qual[q_cnt].task_assay_cd = temp_reply->qual[d.seq].task_assay_cd
        reply->qual[q_cnt].preactive_ind = temp_reply->qual[d.seq].preactive_ind
        reply->qual[q_cnt].result_status_cd = temp_reply->qual[d.seq].result_status_cd
        reply->qual[q_cnt].perform_personnel_id = temp_reply->qual[d.seq].perform_personnel_id
        reply->qual[q_cnt].perform_dt_tm = temp_reply->qual[d.seq].perform_dt_tm
        reply->qual[q_cnt].result_type_cd = temp_reply->qual[d.seq].result_type_cd
        reply->qual[q_cnt].result_value_numeric = temp_reply->qual[d.seq].result_value_numeric
        reply->qual[q_cnt].numeric_raw_value = temp_reply->qual[d.seq].numeric_raw_value
        reply->qual[q_cnt].result_value_alpha = temp_reply->qual[d.seq].result_value_alpha
        reply->qual[q_cnt].nomenclature_id = temp_reply->qual[d.seq].nomenclature_id
        reply->qual[q_cnt].resource_error_codes = temp_reply->qual[d.seq].resource_error_codes
        reply->qual[q_cnt].multiplex_resource_cd = temp_reply->qual[d.seq].multiplex_resource_cd
        reply->qual[q_cnt].rule_id = temp_reply->qual[d.seq].rule_id
        reply->qual[q_cnt].prev_result_id = temp_reply->qual[d.seq].prev_result_id
        reply->qual[q_cnt].mean = temp_reply->qual[d.seq].mean
        reply->qual[q_cnt].clinical_std_dev = temp_reply->qual[d.seq].clinical_std_dev
        reply->qual[q_cnt].statistical_std_dev = temp_reply->qual[d.seq].statistical_std_dev
        reply->qual[q_cnt].abs_low = temp_reply->qual[d.seq].abs_low
        reply->qual[q_cnt].abs_high = temp_reply->qual[d.seq].abs_high
        reply->qual[q_cnt].arl_id = temp_reply->qual[d.seq].arl_id
        reply->qual[q_cnt].result_control_cd = temp_reply->qual[d.seq].result_control_cd
        reply->qual[q_cnt].result_process_cd = temp_reply->qual[d.seq].result_process_cd
        reply->qual[q_cnt].updt_cnt = temp_reply->qual[d.seq].updt_cnt
        reply->qual[q_cnt].qc_group_id = temp_reply->qual[d.seq].qc_group_id
        reply->qual[q_cnt].worklist_id = temp_reply->qual[d.seq].worklist_id
      
      with nocounter      

      if (q_cnt > 0)
        set reply->status_data.status = "S"    ;Successful
      else
        set reply->status_data.status = "Z"    ;Zero
      endif

      #Exit_Script
        
      free set temp_reply
      free set internal
      
      end
      go      

;Generated by GNU enscript 1.6.4.
