 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_valid_equation/glb_get_valid_equation.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_GET_VALID_EQUATION.PRG
        Object name:            GLB_GET_VALID_EQUATION
        Request #:              250061

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Ensure that the given equation components are
                                valid detail procedures.

        Tables read:            discrete_task_assay
                                
        Tables updated:         n/a

        Executing from:         General Lab equation database tool

        Special Notes:
******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ###  02/21/96 Dennis Boyer         Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_VALID_EQUATION:dba go    
      create program GLB_GET_VALID_EQUATION:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                                       
        1  components[x]
           2  mnemonic  = vc
      ) 
*/

/*********************************************************************/
/*       Internal Record                                             */
/*********************************************************************/
      record internal
      ( 
        1 qual[1]
          2 status               = i1
      )

/*********************************************************************/
/*       Conversion Record                                           */
/*********************************************************************/
      record convert
      ( 
        1 procedures[1]
          2 mnemonic             = vc
      )

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      ( 
        1 component_data[1]
          2 mnemonic            = vc
          2 task_assay_cd       = f8
        1 status_data
          2 status              = c1
          2 subeventstatus[1]
            3 OperationName     = c25
            3 OperationStatus   = c1
            3 TargetObjectName  = c25
            3 TargetObjectValue = vc
      )
     
     #Script
      set cnt = 0
      set cnt2 = 0      
      set comp_cnt = size(request->components,5)
      set stat = alter(reply->component_data,comp_cnt+1)
      set stat = alter(convert->procedures,comp_cnt+1)
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

/********************************************************************/
/* Convert mnemonics to uppercase and initialize reply.             */
/********************************************************************/
      for (cnt2 = 1 to comp_cnt)
         set convert->procedures[cnt2]->mnemonic =
            cnvtupper(request->components[cnt2]->mnemonic) 
         set reply->component_data[cnt2]->mnemonic =
            convert->procedures[cnt2]->mnemonic
         set reply->component_data[cnt2]->task_assay_cd = 0
      endfor

/********************************************************************/
/* Select task_assay rows                                           */
/********************************************************************/
      SELECT into "nl:"
         d.task_assay_cd,
         d.mnemonic,
         d1.seq
      FROM
         discrete_task_assay d,
         (dummyt d1 with seq = value(comp_cnt))
      PLAN d1
      JOIN d
         where convert->procedures[d1.seq]->mnemonic = d.mnemonic_key_cap

      HEAD d1.seq
         for (cnt2 = 1 to comp_cnt)
            if (reply->component_data[cnt2]->mnemonic = d.mnemonic_key_cap)
               reply->component_data[cnt2]->mnemonic = d.mnemonic,
               reply->component_data[cnt2]->task_assay_cd = d.task_assay_cd,
               cnt = cnt + 1
            endif
         endfor           
      WITH
         nocounter
      set stat = alter(reply->component_data,comp_cnt)

/****************************************************************************
*       Load reply with any errors and set status                           *
*****************************************************************************/
      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
      elseif (cnt < comp_cnt)
         set reply->status_data->subeventstatus[1]->OperationName = "SELECT"
         set reply->status_data->subeventstatus[1]->OperationStatus = "Z"
         set reply->status_data->subeventstatus[1]->TargetObjectName = "TABLE"
         set reply->status_data->subeventstatus[1]->TargetObjectValue  = "DISCRETE_TASK_ASSAY table"
         set reply->status_data->status = "Z"
      else
         set reply->status_data->status = "S"
      endif
end
go      

;Generated by GNU enscript 1.6.4.
