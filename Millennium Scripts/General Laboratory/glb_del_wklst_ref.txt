 ;;Solution_Test/script/PathNet -- Gen Lab/glb_del_wklst_ref/glb_del_wklst_ref.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1999 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_del_wklst_ref.prg
        Object name:            glb_del_wklst_ref
        Request #:              250185

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Delete (inactivate) a worklist ref record 
                                and associated children.

        Tables read:            None

        Tables updated:         worklist_group
                                worklist_ref
                                worklist_ref_priority
                                worklist_ref_procedure
                                worklist_ref_qc

        Executing from:         General Lab applications

        Special Notes:          

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 05/10/99 Hal Patchen          Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
  
             drop program GLB_DEL_WKLST_REF:dba go    
             create program GLB_DEL_WKLST_REF:dba

      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  worklist_ref_id              = f8
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      ( 
%i cclsource:status_block.inc
      )

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set reply->status_data->status = "F"
         set failed_ind = 0
         set parent_ind = 0

         ;* Lock row for update.
         select into "nl:"
            wrp.seq
         from 
            worklist_ref_procedure wrp
         where wrp.worklist_ref_id = request->worklist_ref_id
         with 
            nocounter,
            forupdate(wrp)

         ;* Update row.
         if (curqual > 0)
            update into worklist_ref_procedure wrp
            set
               wrp.active_ind = 0,
               wrp.active_status_cd = reqdata->inactive_status_cd,
               wrp.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
               wrp.active_status_prsnl_id = reqinfo->updt_id,
               wrp.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               wrp.updt_id = reqinfo->updt_id,
               wrp.updt_task = reqinfo->updt_task,
               wrp.updt_applctx = reqinfo->updt_applctx,
               wrp.updt_cnt = wrp.updt_cnt + 1
            plan wrp where wrp.worklist_ref_id = request->worklist_ref_id
            with nocounter
         endif

         ;* Lock row for update.
         select into "nl:"
            wrp.seq
         from 
            worklist_ref_priority wrp
         where wrp.worklist_ref_id = request->worklist_ref_id
         with 
            nocounter,
            forupdate(wrp)

         ;* Update row.
         if (curqual > 0)
            update into worklist_ref_priority wrp
            set
               wrp.active_ind = 0,
               wrp.active_status_cd = reqdata->inactive_status_cd,
               wrp.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
               wrp.active_status_prsnl_id = reqinfo->updt_id,
               wrp.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               wrp.updt_id = reqinfo->updt_id,
               wrp.updt_task = reqinfo->updt_task,
               wrp.updt_applctx = reqinfo->updt_applctx,
               wrp.updt_cnt = wrp.updt_cnt + 1
            plan wrp where wrp.worklist_ref_id = request->worklist_ref_id
            with nocounter
         endif

         ;* Lock row for update.
         select into "nl:"
            wrq.seq
         from 
            worklist_ref_qc wrq
         where wrq.worklist_ref_id = request->worklist_ref_id
         with 
            nocounter,
            forupdate(wrq)

         ;* Update row.
         if (curqual > 0)
            update into worklist_ref_qc wrq
            set
               wrq.active_ind = 0,
               wrq.active_status_cd = reqdata->inactive_status_cd,
               wrq.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
               wrq.active_status_prsnl_id = reqinfo->updt_id,
               wrq.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               wrq.updt_id = reqinfo->updt_id,
               wrq.updt_task = reqinfo->updt_task,
               wrq.updt_applctx = reqinfo->updt_applctx,
               wrq.updt_cnt = wrq.updt_cnt + 1
            plan wrq where wrq.worklist_ref_id = request->worklist_ref_id
            with nocounter
         endif

         ;* Lock row for update.
         select into "nl:"
            wr.seq
         from 
            worklist_ref wr
         where wr.worklist_ref_id = request->worklist_ref_id
         detail
            parent_ind = wr.parent_ind
         with 
            nocounter,
            forupdate(wr)

         ;* Update row.
         if (curqual > 0)
            update into worklist_ref wr
            set
               wr.active_ind = 0,
               wr.active_status_cd = reqdata->inactive_status_cd,
               wr.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
               wr.active_status_prsnl_id = reqinfo->updt_id,
               wr.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               wr.updt_id = reqinfo->updt_id,
               wr.updt_task = reqinfo->updt_task,
               wr.updt_applctx = reqinfo->updt_applctx,
               wr.updt_cnt = wr.updt_cnt + 1
            plan wr where wr.worklist_ref_id = request->worklist_ref_id
            with nocounter
            if (curqual = 0)
               set failed_ind = 1
            endif
         endif
   
         if (parent_ind = 1)
            ;* Lock row for update.
            select into "nl:"
               wg.seq
            from 
               worklist_group wg
            where wg.parent_worklist_ref_id = request->worklist_ref_id
            with 
               nocounter,
               forupdate(wg)
            ;* Update row.
            if (curqual > 0)
               update into worklist_group wg
               set 
                  wg.active_ind = 0,
                  wg.active_status_cd = reqdata->inactive_status_cd,
                  wg.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
                  wg.active_status_prsnl_id = reqinfo->updt_id,
                  wg.updt_dt_tm = cnvtdatetime(curdate, curtime3),
                  wg.updt_id = reqinfo->updt_id,
                  wg.updt_task = reqinfo->updt_task,
                  wg.updt_applctx = reqinfo->updt_applctx,
                  wg.updt_cnt = wg.updt_cnt + 1
               plan wg
                  where wg.parent_worklist_ref_id = request->worklist_ref_id
               with nocounter
            endif
         else
            ;* Child worklist ref (parent_ind = 0)
            ;* Lock row for update.
            select into "nl:"
               wg.seq
            from 
               worklist_group wg
            where wg.child_worklist_ref_id = request->worklist_ref_id
            with 
               nocounter,
               forupdate(wg)
            ;* Update row.
            if (curqual > 0)
               update into worklist_group wg
               set 
                  wg.active_ind = 0,
                  wg.active_status_cd = reqdata->inactive_status_cd,
                  wg.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
                  wg.active_status_prsnl_id = reqinfo->updt_id,
                  wg.updt_dt_tm = cnvtdatetime(curdate, curtime3),
                  wg.updt_id = reqinfo->updt_id,
                  wg.updt_task = reqinfo->updt_task,
                  wg.updt_applctx = reqinfo->updt_applctx,
                  wg.updt_cnt = wg.updt_cnt + 1
               plan wg
                  where wg.child_worklist_ref_id = request->worklist_ref_id
               with nocounter
            endif
         endif

      /***********************************************************************
      * Exit script                                                          *
      ***********************************************************************/
      #Exit_Script
      if (failed_ind = 1)
         set reply->status_data->status = "Z"
         set reqinfo->commit_ind = 0
      else
         set reply->status_data->status = "S"
         set reqinfo->commit_ind = 1
      endif

      end
      go

;Generated by GNU enscript 1.6.4.
