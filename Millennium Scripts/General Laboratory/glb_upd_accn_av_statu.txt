 ;;Solution_Test/script/PathNet -- Gen Lab/glb_upd_accn_av_status/glb_upd_accn_av_status.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_UPD_ACCN_AV_STATUS.PRG
        Object name:            GLB_UPD_ACCN_AV_STATUS
        Request #:              250213

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Update the accession_order_r table and write
                                av_status event

        Tables read:

        Tables updated:         accession_order_r

        Executing from:         General Lab AVStatus.dll

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 07/13/00 Gary Runde           Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_UPD_ACCN_AV_STATUS:dba go
      create program GLB_UPD_ACCN_AV_STATUS:dba

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
        1  accession_id          = f8
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
%I cclsource:status_block.inc
      )


     #Script
      set reply->status_data->status = "F"
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty
      set FAILED = "F"

/********************************************************************/
/* Update the accession_order_r's restrict_av_ind                   */
/********************************************************************/

      update into
         accession_order_r aor
      set
         aor.RESTRICT_AV_IND   = 1,
         aor.updt_applctx      = reqinfo->updt_applctx,
         aor.updt_cnt          = aor.updt_cnt + 1,
         aor.updt_dt_tm        = cnvtdatetime(curdate, curtime3),
         aor.updt_id           = reqinfo->updt_id,
         aor.updt_task         = reqinfo->updt_task
      plan aor where
         request->accession_id = aor.accession_id
      with nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set Failed = "T"
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

/********************************************************************/
/* write the new av_status_event row                                */
/********************************************************************/
      declare av_status_id = f8 with protect, noconstant(0.0)

      select into "nl:"
        next_seq_nbr = seq(pathnet_seq,nextval)
      from
        dual
      detail
        av_status_id = next_seq_nbr
      with nocounter, format

      insert into av_status_event ae
      set
        ae.accession_id           = request->accession_id,
        ae.av_event_id            = av_status_id,
        ae.av_ind                 = 1,
        ae.person_id              = 0.0,
        ae.service_resource_cd    = 0.0,
        ae.updt_applctx           = reqinfo->updt_applctx,
        ae.updt_cnt               = 0,
        ae.updt_dt_tm             = cnvtdatetime(curdate, curtime3),
        ae.updt_id                = reqinfo->updt_id,
        ae.updt_task              = reqinfo->updt_task
      plan ae
      with nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set Failed = "T"
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

/********************************************************************/
/*  Exit Script                                                     */
/********************************************************************/
#EXIT_SCRIPT
     if (failed = "F")
        set reply->status_data->status = "S"
        commit
     else
        rollback
     endif


END
GO

;Generated by GNU enscript 1.6.4.
