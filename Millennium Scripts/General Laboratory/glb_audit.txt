 ;;Solution_Test/script/PathNet -- Gen Lab/glb_audit/glb_audit.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 08/27/96 Hal Patchen          Initial Release                     *
;    *001 12/02/98 Chris Heil           Add support for unknown ages        *
;    *002 12/15/98 Hal Patchen          Add support for HLA activity        *
;    *003 04/26/99 Chad Moats           Removed joins to code_value table   *
;    *004 06/22/99 Derek Hime		    Internationalization of script      *
;                  Kasie Sly            Merged internationlization code     *
;                                       from mod 004                        *
;~DE~************************************************************************
							;003

             drop program GLB_AUDIT:dba go
             create program GLB_AUDIT:dba

             paint
/**********************************************************************beginning 004 mod block****/
/*************************     i18n     **************************/ 		;004
;INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
;INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
set i18nHandle = 0
;CALL UAR_I18NLOCALIZATIONINIT
set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)
/*************************     i18n     **************************/		;004
	  record captions
	  (
	  1 acttype 	  = vc
      1 actsubtype 	  = vc
      1 ffrom 		  = vc
      1 tto 		  = vc
      1 notfound 	  = vc
      1 unknown 	  = vc
      1 ddate 		  = vc
      1 gla 		  = vc
      1 pageno 		  = vc
      1 ttime 		  = vc
      1 ocmnemonic 	  = vc
      1 tamne 		  = vc
      1 servres 	  = vc
      1 restype 	  = vc
      1 maxdig 		  = vc
      1 mindig 		  = vc
      1 mindec 		  = vc
      1 datamap 	  = vc
      1 refrange 	  = vc
      1 allspecies 	  = vc
      1 allspecimen   = vc
      1 allgen 		  = vc
      1 allages 	  = vc
      1 age 		  = vc
      1 noages 		  = vc
      1 allres 		  = vc
      1 unage 		  = vc
      1 aresp 		  = vc
      1 endrpt 		  = vc
      1 temp		  = vc
      1 normal		  = vc
      1 review		  = vc
      1 critical	  = vc
      1 units		  = vc
      1 GLTitle = vc
      1 GLActType = vc
      1 GLActSubType = vc
      1 GLMnemFrom = vc
      1 GLTo = vc
      1 GLPrintRef = vc
      1 GLHelp = vc
      1 GLLoadAct = vc
	  )

      set captions->GLTitle         = uar_i18ngetmessage(i18nHandle,"GLA","GENERAL LAB AUDIT")
      set captions->GLActType       = uar_i18ngetmessage(i18nHandle,"at","Activity Type:")
      set captions->GLActSubType    = uar_i18ngetmessage(i18nHandle,"ast","Activity Subtype:")
      set captions->GLMnemFrom      = uar_i18ngetmessage(i18nHandle,"ocmf","Order Catalog Mnemonic From:")
      set captions->GLTo            = uar_i18ngetmessage(i18nHandle,"tto2","To:")
      set captions->GLPrintRef      = uar_i18ngetmessage(i18nHandle,"prntrefrng","Print Reference Ranges:")
      set captions->GLHelp          = uar_i18ngetmessage(i18nHandle,"help1","Press <Shift F5> for help")
      set captions->GLLoadAct       = uar_i18ngetmessage(i18nHandle,"loading","Loading activity subtypes...")
      set captions->acttype       = uar_i18ngetmessage(i18nHandle,"acttype",    "ACTIVITY TYPE:")
      set captions->actsubtype 	  = uar_i18ngetmessage(i18nHandle,"actsubtype", "ACTIVITY SUBTYPE:")
      set captions->ffrom 		  = uar_i18ngetmessage(i18nHandle,"ffrom",	    "From:")
      set captions->tto 		  = uar_i18ngetmessage(i18nHandle,"tto",	    "to")
      set captions->notfound 	  = uar_i18ngetmessage(i18nHandle,"notfound",   "Not Found")
      set captions->unknown 	  = uar_i18ngetmessage(i18nHandle,"unknown",    "Unknown")
      set captions->ddate 		  = uar_i18ngetmessage(i18nHandle,"ddate",	    "DATE:")
      set captions->gla 		  = uar_i18ngetmessage(i18nHandle,"gla",	    "G E N E R A L   L A B   A U D I T")
      set captions->pageno 		  = uar_i18ngetmessage(i18nHandle,"pageno",	    "PAGE NO:")
      set captions->ttime 		  = uar_i18ngetmessage(i18nHandle,"ttime",	    "TIME:")
      set captions->ocmnemonic 	  = uar_i18ngetmessage(i18nHandle,"ocmnemonic", "ORDER CATALOG MNE")
      set captions->tamne 		  = uar_i18ngetmessage(i18nHandle,"tamne",	    "TASK ASSAY MNEMONIC")
      set captions->servres 	  = uar_i18ngetmessage(i18nHandle,"servres",    "SERVICE RESOURCE")
      set captions->restype 	  = uar_i18ngetmessage(i18nHandle,"restype",    "RESULT TYPE")
      set captions->maxdig 		  = uar_i18ngetmessage(i18nHandle,"maxdig",	    "MAX DIGITS")
      set captions->mindig 		  = uar_i18ngetmessage(i18nHandle,"mindig",	    "MIN DIGITS")
      set captions->mindec 		  = uar_i18ngetmessage(i18nHandle,"mindec",	    "MIN DECIMAL")
      set captions->datamap 	  = uar_i18ngetmessage(i18nHandle,"datamap",    "Default Data Map")
      set captions->refrange 	  = uar_i18ngetmessage(i18nHandle,"refrange",   "REFERENCE RANGE:")
      set captions->allspecies 	  = uar_i18ngetmessage(i18nHandle,"allspecies", "All species")
      set captions->allspecimen   = uar_i18ngetmessage(i18nHandle,"allspecimen","All specimen types")
      set captions->allgen 		  = uar_i18ngetmessage(i18nHandle,"allgen",		"All genders")
      set captions->allages 	  = uar_i18ngetmessage(i18nHandle,"allages",	"All ages")
      set captions->age 		  = uar_i18ngetmessage(i18nHandle,"age",		"Age")
      set captions->noages 		  = uar_i18ngetmessage(i18nHandle,"noages",		"No ages found")
      set captions->allres 		  = uar_i18ngetmessage(i18nHandle,"allres",		"All resources")
      set captions->unage 		  = uar_i18ngetmessage(i18nHandle,"unage",		"Unknown age range")
      set captions->aresp 		  = uar_i18ngetmessage(i18nHandle,"aresp",		"ALPHA RESPONSE")
      set captions->endrpt 		  = uar_i18ngetmessage(i18nHandle,"endrpt","* * *  E N D   O F   R E P O R T  * * *")
      set captions->normal		  = uar_i18ngetmessage(i18nHandle,"normal",		"Normal")
      set captions->review		  = uar_i18ngetmessage(i18nHandle,"review",		"Review")
      set captions->critical	          = uar_i18ngetmessage(i18nHandle,"critical",	"Critical")
      set captions->units		  = uar_i18ngetmessage(i18nHandle,"units",		"Units")


/***********************************************************************************************end 004 mod block*/
      /***********************************************************************
      * Activity Type Record                                                 *
      ***********************************************************************/
      record act_type
      ( 
         1  qual[*]
            2  glb_activity_type_cd      = f8
      )

      /***********************************************************************
      * Activity Subtype Record                                              *
      ***********************************************************************/
      record act_subtype
      ( 
         1  qual[*]
            2  glb_activity_subtype_disp = c30
            2  glb_activity_subtype_cd   = f8
      )

      /***********************************************************************
      * Internal Record                                                      *
      ***********************************************************************/
      record internal
      ( 
         1  qual[*]
            2  catalog_cd                = f8
            2  mnemonic                  = vc
            2  assays_cnt                = i4
            2  assays[*]
               3  task_assay_cd          = f8
               3  mnemonic               = vc
               3  dflt_dm_max_digits     = i4
               3  dflt_dm_min_digits     = i4
               3  dflt_dm_min_dec_places = i4
               3  serv_res_cnt           = i4
               3  serv_res[*]
                  4  service_resource_cd      = f8
                  4  service_resource_disp    = vc
                  4  default_result_type_cd   = f8
                  4  default_result_type_disp = vc
                  4  data_map_ind             = i2 ;0-none, 1-specific, 2-group
                  4  max_digits               = i4
                  4  min_decimal_places       = i4
                  4  min_digits               = i4
      )

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set ACTIVITY_TYPE_CODESET       = 106
         set GEN_LAB_CDF                 = "GLB" 
         set BB_CDF                      = "BB"
         set HLA_CDF                     = "HLA"                       ;002
         set ACTIVITY_SUBTYPE_CODESET    = 5801
         set MNE_TYPE_CODESET            = 6011
         set MNE_TYPE_PRIMARY_CDF        = "PRIMARY"
         set AGE_DAYS_CDF                = "DAYS" 
         set AGE_WEEKS_CDF               = "WEEKS" 
         set AGE_MONTHS_CDF              = "MONTHS" 
         set AGE_YEARS_CDF               = "YEARS" 
         set AGE_HOURS_CDF               = "HOURS" 
         set AGE_MINUTES_CDF             = "MINUTES" 
         set AGE_SECONDS_CDF             = "SECONDS" 
         set DATA_MAP_TYPE_FLAG          = 0    ;Fill out with correct value.
         declare mne_type_primary_cd     = f8
         declare stat                    = i4
         declare at_cnt                  = i4
         declare ash_cnt                 = i4
         declare q_cnt                   = i4
         declare a_cnt                   = i4
         declare r_cnt                   = i4
         declare cnt                     = i4
         declare max_q_cnt               = i4
         declare max_a_cnt               = i4
         declare max_r_cnt               = i4
         declare age_from                = i4
         declare age_to                  = i4
         set age_disp                    = fillstring(100," ")
         set range_disp                  = fillstring(100," ")

      /***********************************************************************
      * Display screen                                                       *
      ***********************************************************************/
         set actvty_type_default = fillstring(30, " ")
         set actvty_type = fillstring(30," ")
         set actvty_type_disp = fillstring(30," ")
         set actvty_type_cdf = fillstring(12, " ")
         set actvty_subtype_cd = 0.0
         set actvty_subtype_disp = fillstring(30, " ")
         set mne_beg = fillstring(20," ")
         set mne_end = fillstring(20," ")
         set ref_range_yn = " "
         call clear(1,1)
         call video(n)
         call box(1,1,3,80)
         ;004 call text(2,3, "GENERAL LAB AUDIT")
         call text(2,3, captions->GLTitle ) 			;004        	
         ;004 call text(5,3, "Activity Type:")
         call text(5,3,   captions->GLActType)				;004
         ;004 call text(7,3, "Activity Subtype:")
         call text(7,3,   captions->GLActSubType)				;004
         ;004  call text(9,3, "Order Catalog Mnemonic From:")
         call text(9,3,   captions->GLMnemFrom)		;004
         ;004 call text(10,28, "To:")
         call text(10,28, captions->GLTo)          				;004
         ;004 call text(12,3, "Print Reference Ranges:")
         call text(12,3,  captions->GLPrintRef)	;004

      /***********************************************************************
      * Accept activity type.                                                *
      ***********************************************************************/
         select into "nl:"
            cv.display
         from 
            code_value cv
         where cv.code_set = ACTIVITY_TYPE_CODESET
           and cv.cdf_meaning = GEN_LAB_CDF
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
         detail
            actvty_type_default = cnvtupper(cv.display)
         with 
            nocounter,
            maxread(cv, 1)

;004		call text(24,3, "Press <Shift F5> for help")
                call text(24,3, captions->GLHelp)  	;004       
		set help = select activity_type = cnvtupper(cv.display)
                    from code_value cv
                    where cv.code_set = ACTIVITY_TYPE_CODESET
;002                      and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF)
                      and cv.cdf_meaning in (GEN_LAB_CDF,              ;002
                                             BB_CDF,                   ;002
                                             HLA_CDF)                  ;002
                    order by cv.display_key
                    with nocounter
         call accept(5,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU", actvty_type_default)
         set help = off
         call clear(24,3,70)
         set actvty_type_disp = curaccept
         set actvty_type = cnvtalphanum(curaccept)

      /***********************************************************************
      * Select activity types.                                               *
      ***********************************************************************/
;004 	   call text(24,3, "Loading activity subtypes...")
         call text(24,3, captions->GLLoadAct)   	;004
         select into "nl:"
            cv.code_value,
            cv.cdf_meaning

         from 
            code_value cv

         where ((cv.code_set = ACTIVITY_TYPE_CODESET
             and cv.display_key = actvty_type
;002             and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF))
             and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF, HLA_CDF))     ;002
            or  (cv.code_set = MNE_TYPE_CODESET
              and cv.cdf_meaning = MNE_TYPE_PRIMARY_CDF))
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         head report
            at_cnt = 0

         detail
            if (cv.code_set = ACTIVITY_TYPE_CODESET)
               at_cnt = at_cnt + 1
               stat = alterlist(act_type->qual, at_cnt)
               act_type->qual[at_cnt].glb_activity_type_cd = cv.code_value
               actvty_type_cdf = cv.cdf_meaning
            endif
            if (cv.code_set = MNE_TYPE_CODESET)
               mne_type_primary_cd = cv.code_value
            endif

         with nocounter

      /***********************************************************************
      * Select activity subtypes.                                            *
      ***********************************************************************/
         set ash_cnt = 1
         set stat = alterlist(act_subtype->qual, ash_cnt)
         set act_subtype->qual[ash_cnt].glb_activity_subtype_disp = "ALL"
         set act_subtype->qual[ash_cnt].glb_activity_subtype_cd = 0.0

         select into "nl:"
            activity_subtype_disp = cnvtupper(cv.display),
            cv.code_value

         from code_value cv

         where cv.code_set = ACTIVITY_SUBTYPE_CODESET
           and cv.definition = actvty_type_cdf
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         order by cv.display_key

         detail
            ash_cnt = ash_cnt + 1
            stat = alterlist(act_subtype->qual, ash_cnt)
            act_subtype->qual[ash_cnt].glb_activity_subtype_disp =
              activity_subtype_disp
            act_subtype->qual[ash_cnt].glb_activity_subtype_cd =
              cv.code_value

         with nocounter

         call clear(24,3,70)

      /***********************************************************************
      * Accept activity subtype.                                             *
      ***********************************************************************/
;004 	   call text(24,3, "Press <Shift F5> for help")
         call text(24,3, captions->GLHelp)		;004
         set help = select activity_subtype = cnvtupper(act_subtype->qual[d.seq]
                      .glb_activity_subtype_disp)
                    from (dummyt d with seq = value(ash_cnt))
                    where d.seq <= ash_cnt
                    with nocounter
         call accept(7,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU", "ALL")
         set help = off
         call clear(24,3,70)
         set actvty_subtype_disp = curaccept
         set actvty_subtype_cd = -1
         for (cnt = 1 to ash_cnt)
            if (cnvtupper(act_subtype->qual[cnt]
             .glb_activity_subtype_disp) = actvty_subtype_disp)
               set actvty_subtype_cd = 
                 act_subtype->qual[cnt].glb_activity_subtype_cd
            endif
         endfor

      /***********************************************************************
      * Accept order catalog mnemonic range.                                 *
      ***********************************************************************/
         call accept(9,33, "PPPPPPPPPPPPPPPPPPPP;;CU", "A")
         set mne_beg = curaccept
         if (mne_beg = "A")
            call accept(10,33, "PPPPPPPPPPPPPPPPPPPP;;CU", 
                        "ZZZZZZZZZZZZZZZZZZZZ")
         else
            call accept(10,33, "PPPPPPPPPPPPPPPPPPPP;;CU")
         endif
         set mne_end = curaccept

      /***********************************************************************
      * Accept reporting of reference ranges and alpha responses.            *
      ***********************************************************************/
         call accept(12,33, "P;;CU", "Y")
         set ref_range_yn = curaccept

      /***********************************************************************
      * Select General Lab order catalog procedures.                         *
      * NOTE: Separated select from assays so that order by clause would run *
      *       on UNIX box (120 bytes max)                                    *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            ocs.mnemonic_key_cap,
            oc.catalog_cd,
            oc.activity_type_cd

         from
            (dummyt d with seq = value(at_cnt)),
             order_catalog_synonym ocs,
             order_catalog oc

         plan d
         join ocs     where ocs.mnemonic_key_cap between mne_beg and mne_end
                        and ocs.mnemonic_type_cd = mne_type_primary_cd
                        and ocs.active_ind > 0
         join oc      where oc.catalog_cd = ocs.catalog_cd
                        and oc.activity_type_cd = 
                              act_type->qual[d.seq].glb_activity_type_cd
                        and oc.activity_type_cd > 0.0
                        and oc.active_ind > 0
                        and ((actvty_subtype_cd > 0.0
                           and oc.activity_subtype_cd = actvty_subtype_cd)
                          or (actvty_subtype_cd = 0.0))

         order by
            ocs.mnemonic_key_cap,
            oc.catalog_cd

         head report
            q_cnt = 0
            max_q_cnt = 0

         head ocs.mnemonic_key_cap
            row+0

         head oc.catalog_cd
            q_cnt = q_cnt + 1
            if (q_cnt > max_q_cnt)
               max_q_cnt = q_cnt
            endif
            stat = alterlist(internal->qual, q_cnt)
            internal->qual[q_cnt].catalog_cd = oc.catalog_cd
            internal->qual[q_cnt].mnemonic = ocs.mnemonic

         foot oc.catalog_cd
            row+0

         foot ocs.mnemonic_key_cap
            row+0

         with counter

      /***********************************************************************
      * Select General Lab order catalog procedures associated task assays   *
      * and service resources.                                               *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            d1.seq,
            dta_exists = decode(dta.seq, "Y", "N"),
            ptr.task_assay_cd,
            dta.task_assay_cd,
            dta.mnemonic,
            d2.seq,
            apr_exists = decode(apr.seq, "Y", "N"),
            apr.service_resource_cd,
;003            cv1.display,
	    testsite_disp = trim(UAR_GET_CODE_DISPLAY(apr.service_resource_cd),3),		;003
            apr.default_result_type_cd,
;003            cv2.display,
            d3.seq,
            data_map_resource_exists = decode(dm.seq, "Y", "N"),
            dm.max_digits,
            dm.min_digits,
            dm.min_decimal_places,
            d4.seq,
            data_map_group_exists = decode(dmg.seq, "Y", "N"),
            dmg.max_digits,
            dmg.min_digits,
            dmg.min_decimal_places


         from
            (dummyt d with seq = value(max_q_cnt)),
             dummyt d1,
             profile_task_r ptr,
             discrete_task_assay dta,
             dummyt d2,
             assay_processing_r apr,
;003             code_value cv1,
;003             code_value cv2,
             dummyt d3,
             data_map dm,
             dummyt d4,
             data_map dmg

         plan d
         join d1      where d1.seq = 1
         join ptr     where ptr.catalog_cd = internal->qual[d.seq].catalog_cd
                        and ptr.catalog_cd > 0.0
                        and ptr.active_ind > 0
         join dta     where dta.task_assay_cd = ptr.task_assay_cd
                        and dta.task_assay_cd > 0.0
                        and dta.active_ind > 0
         join d2      where d2.seq = 1
         join apr     where apr.task_assay_cd = dta.task_assay_cd
                        and apr.active_ind > 0
;003         join cv1     where cv1.code_value = apr.service_resource_cd
;003         join cv2     where cv2.code_value = apr.default_result_type_cd
         join d3      where d3.seq = 1
         join dm      where dm.service_resource_cd = apr.service_resource_cd
                        and dm.task_assay_cd = apr.task_assay_cd
                        and dm.data_map_type_flag = DATA_MAP_TYPE_FLAG
         join d4      where d4.seq = 1
         join dmg     where dmg.service_resource_cd = 0.0
                        and dmg.task_assay_cd = apr.task_assay_cd
                        and dmg.data_map_type_flag = DATA_MAP_TYPE_FLAG

         order by
            d.seq,
            dta.mnemonic,
            dta.task_assay_cd,
	    testsite_disp,						;003   
;003            cv1.display,
            apr.service_resource_cd

         head report
            a_cnt = 0
            r_cnt = 0
            max_a_cnt = 0
            max_r_cnt = 0

         head d.seq
            q_cnt = d.seq
            a_cnt = 0

         head dta.mnemonic
            row+0

         head dta.task_assay_cd
            a_cnt = a_cnt + 1
            if (a_cnt > max_a_cnt)
               max_a_cnt = a_cnt
            endif
            stat = alterlist(internal->qual[q_cnt].assays, a_cnt)
            internal->qual[q_cnt].assays_cnt = a_cnt
            if (dta_exists = "Y")
               internal->qual[q_cnt].assays[a_cnt].task_assay_cd = dta.task_assay_cd
               internal->qual[q_cnt].assays[a_cnt].mnemonic = dta.mnemonic
            else
               internal->qual[q_cnt].assays[a_cnt].task_assay_cd = 0.0
;004           internal->qual[q_cnt].assays[a_cnt].mnemonic = "Not Found"
               internal->qual[q_cnt].assays[a_cnt].mnemonic = captions->notfound				;004
            endif
            r_cnt = 0

         head testsite_disp						;003
;003         head cv1.display
            row+0

         head apr.service_resource_cd
            r_cnt = r_cnt + 1
            if (r_cnt > max_r_cnt)
               max_r_cnt = r_cnt
            endif
            stat = alterlist(internal->qual[q_cnt].assays[a_cnt].serv_res, r_cnt)
            internal->qual[q_cnt].assays[a_cnt].serv_res_cnt = r_cnt
            if (apr_exists = "Y")
               internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                 .service_resource_cd = apr.service_resource_cd
               internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                 .service_resource_disp = testsite_disp			;003
;003                 .service_resource_disp = cv1.display
               internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                 .default_result_type_cd = apr.default_result_type_cd
               if (apr.default_result_type_cd > 0.0)
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .default_result_type_disp = trim(UAR_GET_CODE_DISPLAY(apr.default_result_type_cd),3)  ;003
;003                    .default_result_type_disp = cv2.display
               else
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
;004                .default_result_type_disp = "Unknown"
                    .default_result_type_disp = captions->unknown						;004
               endif
               if (data_map_resource_exists = "Y")
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .data_map_ind = 1
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .max_digits = dm.max_digits
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .min_digits = dm.min_digits
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .min_decimal_places = dm.min_decimal_places
               elseif (data_map_group_exists = "Y")
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .data_map_ind = 2
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .max_digits = dmg.max_digits
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .min_digits = dmg.min_digits
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .min_decimal_places = dmg.min_decimal_places
                  internal->qual[q_cnt].assays[a_cnt]
                    .dflt_dm_max_digits = dmg.max_digits
                  internal->qual[q_cnt].assays[a_cnt]
                    .dflt_dm_min_digits = dmg.min_digits
                  internal->qual[q_cnt].assays[a_cnt]
                    .dflt_dm_min_dec_places = dmg.min_decimal_places
               else
                  internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .data_map_ind = 0
               endif
            else
               internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                 .service_resource_cd = 0.0
               internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
       ;004      .service_resource_disp = "Not Found"
                 .service_resource_disp = captions->notfound						;004
               internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                 .default_result_type_cd = 0.0
               internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
       ;004      .default_result_type_disp = "Unknown"
                 .default_result_type_disp = captions->unknown						;004
            endif

         detail
            row+0

         foot apr.service_resource_cd
            row+0
;003         foot cv1.display
         foot testsite_disp						;003
            row+0

         foot dta.task_assay_cd
            row+0

         foot dta.mnemonic
            row+0

         foot d.seq
            row+0

         with counter,
            outerjoin = d1,
            outerjoin = d2,
            outerjoin = d3,
            dontcare = dm,
            outerjoin = d4,
            dontcare = dmg

      /***********************************************************************
      * Generate General Lab audit.                                          *
      ***********************************************************************/
         select
            d1.seq,
            d2.seq,
            d3.seq,
            rrf.task_assay_cd,
            rrf.reference_range_factor_id,
            rrf.precedence_sequence,
            rrf.species_cd,
            rrf.specimen_type_cd,
            rrf.sex_cd,
            rrf.unknown_age_ind,                                       ;001
            rrf.age_from_units_cd,
            rrf.age_from_minutes,
            rrf.age_to_units_cd,
            rrf.age_to_minutes,
            rrf.service_resource_cd,
            rrf.normal_ind,
            rrf.normal_low,
            rrf.normal_high,
            rrf.critical_ind,
            rrf.critical_low,
            rrf.critical_high,
            rrf.units_cd,
            d4.seq,
            species_exists = decode(cv_rrf1.seq, "Y", "N"),
            cv_rrf1.display,
            d5.seq,
            spec_type_exists = decode(cv_rrf2.seq, "Y", "N"),
            cv_rrf2.display,
            d6.seq,
            sex_exists = decode(cv_rrf3.seq, "Y", "N"),
            cv_rrf3.display,
            d7.seq,
            age_from_units_exists = decode(cv_rrf4.seq, "Y", "N"),
            cv_rrf4.display,
            cv_rrf4.cdf_meaning,
            d8.seq,
            age_to_units_exists = decode(cv_rrf5.seq, "Y", "N"),
            cv_rrf5.display,
            cv_rrf5.cdf_meaning,
            d9.seq,
            serv_res_exists = decode(cv_rrf6.seq, "Y", "N"),
            cv_rrf6.display,
            d10.seq,
            cv_rrf7.display,
            d11.seq,
            ar_exists = decode(ar.seq, "Y", "N"),
            ar.reference_range_factor_id,
            n.nomenclature_id,
            n.short_string,
            d12.seq,
            result_process_exists = decode(cv_ar.seq, "Y", "N"),
            cv_ar.display

         from
            (dummyt d1 with seq = value(max_q_cnt)),
            (dummyt d2 with seq = value(max_a_cnt)),
             dummyt d3,
             reference_range_factor rrf,
             dummyt d4,
             code_value cv_rrf1,
             dummyt d5,
             code_value cv_rrf2,
             dummyt d6,
             code_value cv_rrf3,
             dummyt d7,
             code_value cv_rrf4,
             dummyt d8,
             code_value cv_rrf5,
             dummyt d9,
             code_value cv_rrf6,
             dummyt d10,
             code_value cv_rrf7,
             dummyt d11,
             alpha_responses ar,
             nomenclature n,
             dummyt d12,
             code_value cv_ar

         plan d1
         join d2      where d2.seq <= internal->qual[d1.seq].assays_cnt
         join d3      where d3.seq = 1
         join rrf     where rrf.task_assay_cd = 
                            internal->qual[d1.seq].assays[d2.seq].task_assay_cd
                        and rrf.active_ind > 0
                        and ref_range_yn = "Y"
         join d4      where d4.seq = 1
         join cv_rrf1 where cv_rrf1.code_value = rrf.species_cd
                        and cv_rrf1.code_value > 0.0
         join d5      where d5.seq = 1
         join cv_rrf2 where cv_rrf2.code_value = rrf.specimen_type_cd
                        and cv_rrf2.code_value > 0.0
         join d6      where d6.seq = 1
         join cv_rrf3 where cv_rrf3.code_value = rrf.sex_cd
                        and cv_rrf3.code_value > 0.0
         join d7      where d7.seq = 1
         join cv_rrf4 where cv_rrf4.code_value = rrf.age_from_units_cd
                        and cv_rrf4.code_value > 0.0
         join d8      where d8.seq = 1
         join cv_rrf5 where cv_rrf5.code_value = rrf.age_to_units_cd
                        and cv_rrf5.code_value > 0.0
         join d9      where d9.seq = 1
         join cv_rrf6 where cv_rrf6.code_value = rrf.service_resource_cd
                        and cv_rrf6.code_value > 0.0
         join d10     where d10.seq = 1
         join cv_rrf7 where cv_rrf7.code_value = rrf.units_cd
                        and cv_rrf7.code_value > 0.0
         join d11     where d11.seq = 1
         join ar      where ar.reference_range_factor_id = 
                                           rrf.reference_range_factor_id
                        and ar.active_ind > 0
         join n       where n.nomenclature_id = ar.nomenclature_id
                        and n.nomenclature_id > 0.0
         join d12     where d12.seq = 1
         join cv_ar   where cv_ar.code_value = ar.result_process_cd
                        and cv_ar.code_value > 0.0

         order by
            d1.seq,
            d2.seq,
            rrf.precedence_sequence,
            ar.reference_range_factor_id,
            ar.sequence

         head report
            line = fillstring(127, "-")
            r_cnt = 0
            dflt_dm_used_ind = 0
            unknown_age_ind = 0                                        ;002
            col_nbr = 0
            normal_range_txt = fillstring(125, " ")
            normal_low_txt = fillstring(50, " ")
            normal_high_txt = fillstring(50, " ")
            critical_range_txt = fillstring(125, " ")
            critical_low_txt = fillstring(50, " ")
            critical_high_txt = fillstring(50, " ")
            review_range_txt = fillstring(125, " ")
            review_low_txt = fillstring(50, " ")
            review_high_txt = fillstring(50, " ")
            units_txt = fillstring(50, " ")
            text_nbr = fillstring(50," ")   ;fill out before macro call
            min_dec_digits = 0              ;fill out before macro call
            text_char = " "
            text = fillstring(50," ")
            ptr = 0
            start_pos = 0
            nbr_len = 0
            dec_start_pos = 0
            nbr_dec_digits = 0

            ;* Macro to format a reference range number
            macro(convert_range_number)
               ptr = 0
               start_pos = 0
               nbr_len = 0
               dec_start_pos = 0
               nbr_dec_digits = 0
               text = ""
               for (ptr = 1 to size(trim(text_nbr),3))
                  text_char = substring(ptr, 1, text_nbr)
                  ;* Find start position
                  if (text_char > " " and start_pos = 0)
                     start_pos = ptr
                  endif
                  ;* Find decimal point
                  if (text_char = ".")
                    dec_start_pos = ptr
                  endif
                  ;* Count decimal places
                  if (dec_start_pos > 0 and text_char != "0")
                     nbr_dec_digits = ptr - dec_start_pos
                  endif
               endfor
               if (nbr_dec_digits < min_dec_digits)
                  nbr_dec_digits = min_dec_digits
               endif
               ;* Determine length of number
               if (nbr_dec_digits > 0)
                  nbr_len = (dec_start_pos - start_pos) + 1
                  nbr_len = nbr_len + nbr_dec_digits
               else
                  nbr_len = dec_start_pos - start_pos
               endif
               text = substring(start_pos, nbr_len, text_nbr)
            endmacro

         head page
;004        col 1, "DATE:", col+2, curdate "ddmmmyy;;d"
		ddate = format (curdate, "@DATECONDENSED;;d")								;004
		col 1, captions->ddate, col+2, ddate									;004
;004        col 49, "G E N E R A L   L A B   A U D I T "
		col 49, captions->gla												;004
;004        col 110, "PAGE NO:", col+2, curpage "######;;i"
		cpage = format(curpage, "######;;i")									;004
		col 110, captions->pageno, col+2, cpage "######;;i"							;004
            row + 1
;004        col 1, "TIME:", col+2, curtime
		col 1, captions->ttime, col+2, curtime									;004
            row + 1
;004        col 1, "ACTIVITY TYPE:   ", col+2, actvty_type_disp
		col 1, captions->acttype,"   ",col+2, actvty_type_disp						;004
            row + 1
;004        col 1, "ACTIVITY SUBTYPE:", col+2, actvty_subtype_disp
		col 1, captions->actsubtype, col+2, actvty_subtype_disp						;004
            row + 2
;004        col 1,  "ORDER CATALOG MNE"
		col 1, captions->ocmnemonic											;004
;004        col 23, "TASK ASSAY MNEMONIC"
		col 23, captions->tamne												;004
;004        col 45, "SERVICE RESOURCE"
		col 45, captions->servres											;004							
;004        col 78, "RESULT TYPE"
		col 78, captions->restype											;004
;004        col 92, "MAX DIGITS"
		col 92, captions->maxdig											;004
;004        col 104, "MIN DIGITS"
		col 104, captions->mindig											;004
;004        col 116, "MIN DECIMAL"
		col 116, captions->mindec											;004
            row + 1
            col 1,  "--------------------"
            col 23, "--------------------"
            col 45, "------------------------------"
            col 78, "-----------"
            col 92, "----------"
            col 104, "----------"
            col 116, "-----------"
            row + 1 

         head d1.seq
            q_cnt = d1.seq
            if (ref_range_yn != "Y")
               col 1, internal->qual[q_cnt].mnemonic "####################;;c"
            endif

         head d2.seq
            dflt_dm_used_ind = 0
            a_cnt = d2.seq
            if (ref_range_yn = "Y")
               col 1, internal->qual[q_cnt].mnemonic "####################;;c"
            endif
            col 23, internal->qual[q_cnt].assays[a_cnt].mnemonic "####################;;c"
            for (r_cnt = 1 to internal->qual[q_cnt].assays[a_cnt].serv_res_cnt)
               col 45, internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                 .service_resource_disp "##############################;;c" 
               col 78, internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                 .default_result_type_disp "###########;;c"
               if (internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                 .data_map_ind > 0)
                  if (internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .data_map_ind = 2)
                     dflt_dm_used_ind = 1
                     col 90, "*"
                  endif
                  col 92, internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .max_digits "##########;;i"
                  col 104, internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .min_digits "##########;;i"
                  col 116, internal->qual[q_cnt].assays[a_cnt].serv_res[r_cnt]
                    .min_decimal_places "###########;;i"
               endif
               row + 1
            endfor
            if (dflt_dm_used_ind = 1)
;004           col 72, "* - Default Data Map" 
		   col 72, "* - ",captions->datamap										;004
               col 92, internal->qual[q_cnt].assays[a_cnt]
                 .dflt_dm_max_digits "##########;;i"
               col 104, internal->qual[q_cnt].assays[a_cnt]
                 .dflt_dm_min_digits "##########;;i"
               col 116, internal->qual[q_cnt].assays[a_cnt]
                 .dflt_dm_min_dec_places "###########;;i"
               row + 1
            endif

         head rrf.precedence_sequence
            if (ref_range_yn = "Y")
               unknown_age_ind = 0                                     ;002
;004           col 4, "REFERENCE RANGE:"
		   col 4, captions->refrange											;004
               col 21, rrf.precedence_sequence "##;;i"
               col 23, " "
               if (species_exists = "Y")
                  col 24, cv_rrf1.display "###########;;c" 
               else
;004              col 24, "All species" 
                  col 24, captions->allspecies										;004
               endif
               if (spec_type_exists = "Y")
                  col 37, cv_rrf2.display "##################;;c"
               else
;004              col 37, "All specimen types"
                  col 37, captions->allspecimen										;004
               endif
               if (sex_exists = "Y")
                  col 57, cv_rrf3.display "###########;;c" 
               else
;004              col 57, "All genders"
			col 57, captions->allgen										;004
               endif
               if (age_from_units_exists = "Y")
                  if (cv_rrf4.cdf_meaning = AGE_DAYS_CDF)
                     age_from = rrf.age_from_minutes / 1440
                  elseif (cv_rrf4.cdf_meaning = AGE_WEEKS_CDF)
                     age_from = rrf.age_from_minutes / (1440 * 7)
                  elseif (cv_rrf4.cdf_meaning = AGE_MONTHS_CDF)
                     age_from = rrf.age_from_minutes / (1440 * 30)
                  elseif (cv_rrf4.cdf_meaning = AGE_YEARS_CDF)
                     age_from = rrf.age_from_minutes / (1440 * 365)
                  elseif (cv_rrf4.cdf_meaning = AGE_MINUTES_CDF)
                     age_from = rrf.age_from_minutes
                  elseif (cv_rrf4.cdf_meaning = AGE_HOURS_CDF)
                     age_from = rrf.age_from_minutes / 60
                  else
                     age_from = 0
                  endif
               endif
               if (age_to_units_exists = "Y")
                  if (cv_rrf5.cdf_meaning = AGE_DAYS_CDF)
                     age_to = rrf.age_to_minutes / 1440
                  elseif (cv_rrf5.cdf_meaning = AGE_WEEKS_CDF)
                     age_to = rrf.age_to_minutes / (1440 * 7)
                  elseif (cv_rrf5.cdf_meaning = AGE_MONTHS_CDF)
                     age_to = rrf.age_to_minutes / (1440 * 30)
                  elseif (cv_rrf5.cdf_meaning = AGE_YEARS_CDF)
                     age_to = rrf.age_to_minutes / (1440 * 365)
                  elseif (cv_rrf5.cdf_meaning = AGE_MINUTES_CDF)
                     age_to = rrf.age_to_minutes
                  elseif (cv_rrf5.cdf_meaning = AGE_HOURS_CDF)
                     age_to = rrf.age_to_minutes / 60
                  else
                     age_to = 0
                  endif
               endif
               
               if (age_from_units_exists = "Y"
               and age_to_units_exists = "Y")
                  if (cv_rrf4.cdf_meaning = AGE_MINUTES_CDF
                  and rrf.age_from_minutes = 0
                  and cv_rrf5.cdf_meaning = AGE_YEARS_CDF
                  and rrf.age_to_minutes = 78840000)
                     if (rrf.unknown_age_ind = 0)                      ;001
;004                   age_disp = "All ages"
			     age_disp = captions->allages									;004
                     else                                              ;001
                       unknown_age_ind = 1                             ;002
;004                   age_disp = "All ages   (#)"                     ;001
                       age_disp = captions->allages,"   (#)"							;004
                     endif                                             ;001
                  else
                     if (rrf.unknown_age_ind = 0)                      ;001
;004                   age_disp = concat( "Age ", 
                       age_disp = concat(captions->age," ",								;004
                         trim(cnvtstring(age_from)), " ",
                         trim(cv_rrf4.display), " ",
                         trim(cnvtstring(age_to)), " ",
                         trim(cv_rrf5.display))
                     else                                              ;001
                       unknown_age_ind = 1                             ;002
;004                   age_disp = concat( "Age ",                      ;001
			     age_disp = concat(captions->age," ",								;004
                         trim(cnvtstring(age_from)), " ",              ;001
                         trim(cv_rrf4.display), " ",                   ;001
                         trim(cnvtstring(age_to)), " ",                ;001
                         trim(cv_rrf5.display), "   (#)")              ;001
                     endif                                             ;001
                  endif
               else
                  if (rrf.unknown_age_ind = 0)                         ;001
;004                age_disp = "<No ages found>"
                    age_disp = concat("<",captions->noages,">")							;004
                  else                                                 ;001
                    unknown_age_ind = 1                                ;002
;004                age_disp = "<No ages found>   (#)"                 ;001
                    age_disp = concat("<",captions->noages,"   (#)>")						;004
                  endif                                                ;001
               endif
               col 70, age_disp "##############################;;c"
               if (serv_res_exists = "Y")
                  col 102, cv_rrf6.display "###############;;c"
               else
;004              col 102, "All resources  "
                  col 102, captions->allres,"  "									;004
               endif
               row + 1
               
               r_cnt = 1
               for (cnt = 1 to internal->qual[q_cnt].assays[a_cnt].serv_res_cnt)
                  if (rrf.service_resource_cd = internal->qual[q_cnt]
                      .assays[a_cnt].serv_res[cnt].service_resource_cd)
                     r_cnt = cnt
                  endif
               endfor
               min_dec_digits = internal->qual[q_cnt]
                 .assays[a_cnt].serv_res[r_cnt].min_decimal_places
               normal_range_txt = ""
               normal_low_txt = ""
               normal_high_txt = ""
               if (rrf.normal_ind = 1)
                  text_nbr = 
;004                format(rrf.normal_low, "##########.##########;;f")
                    format(rrf.normal_low, "##########.##########;I;f")						;004
                  convert_range_number
                  normal_low_txt = text
                  normal_range_txt = 
;004                concat("Normal: >", trim(normal_low_txt))
                    concat(captions->normal,": >", trim(normal_low_txt))					;004
               endif
               if (rrf.normal_ind = 2)
                  text_nbr = 
;004                format(rrf.normal_high, "##########.##########;;f")
                    format(rrf.normal_high, "##########.##########;I;f")					;004				
                  convert_range_number
                  normal_high_txt = text
                  normal_range_txt = 
;004                concat("Normal: <", trim(normal_high_txt))
       			concat(captions->normal,": <", trim(normal_high_txt))					;004
               endif
               if (rrf.normal_ind = 3)
                  text_nbr = 
;004                format(rrf.normal_low, "##########.##########;;f")
                    format(rrf.normal_low, "##########.##########;I;f")						;004
                  convert_range_number
                  normal_low_txt = text
                  text_nbr = 
;004                format(rrf.normal_high, "##########.##########;;f")
                    format(rrf.normal_high, "##########.##########;I;f")					;004
                  convert_range_number
                  normal_high_txt = text
;004              normal_range_txt = concat("Normal: ", trim(normal_low_txt),
		      normal_range_txt = concat(captions->normal,": ", trim(normal_low_txt),			;004
;004                                        " to ", trim(normal_high_txt))
									" ",captions->tto," ", trim(normal_high_txt))   ;004
               endif
               critical_range_txt = ""
               critical_low_txt = ""
               critical_high_txt = ""
               if (rrf.critical_ind = 1)
                  text_nbr = 
;004                format(rrf.critical_low, "##########.##########;;f")
				format(rrf.critical_low, "##########.##########;I;f")					;004
                  convert_range_number
                  critical_low_txt = text
                  critical_range_txt = 
;004                concat("Critical: <", trim(critical_low_txt))
				concat(captions->critical,": <", trim(critical_low_txt))				;004
               endif
               if (rrf.critical_ind = 2)
                  text_nbr = 
;004                format(rrf.critical_high, "##########.##########;;f")
                    format(rrf.critical_high, "##########.##########;I;f")					;004
                  convert_range_number
                  critical_high_txt = text
                  critical_range_txt = 
;004                concat("Critical: >", trim(critical_high_txt))
                    concat(captions->critical,": >", trim(critical_high_txt))					;004
               endif
               if (rrf.critical_ind = 3)
                  text_nbr = 
;004                format(rrf.critical_low, "##########.##########;;f")
                    format(rrf.critical_low, "##########.##########;I;f")					;004			
                  convert_range_number
                  critical_low_txt = text
                  text_nbr = 
;004                format(rrf.critical_high, "##########.##########;;f")
                    format(rrf.critical_high, "##########.##########;I;f")					;004  
                  convert_range_number
                  critical_high_txt = text
                  critical_range_txt = 
;004                concat("Critical: ", trim(critical_low_txt),
                    concat(captions->critical,": ", trim(critical_low_txt),					;004
;004                       " to ", trim(critical_high_txt))
                           " ",captions->tto," ", trim(critical_high_txt))					;004
               endif
               review_range_txt = ""
               review_low_txt = ""
               review_high_txt = ""
               if (rrf.review_ind = 1)
                  text_nbr = 
;004                format(rrf.review_low, "##########.##########;;f")
                    format(rrf.review_low, "##########.##########;I;f")						;004
                  convert_range_number
                  review_low_txt = text
;004              review_range_txt = concat("Review: <", trim(review_low_txt))
                  review_range_txt = concat(captions->review,": <", trim(review_low_txt))			;004
               endif
               if (rrf.review_ind = 2)
                  text_nbr = 
;004                format(rrf.review_high, "##########.##########;;f")
                    format(rrf.review_high, "##########.##########;I;f")					;004
                  convert_range_number
                  review_high_txt = text
;004              review_range_txt = concat("Review: >", trim(review_high_txt))
                  review_range_txt = concat(captions->review,": >", trim(review_high_txt))		;004
               endif
               if (rrf.review_ind = 3)
                  review_prefix = "Review:"
                  text_nbr = 
;004                format(rrf.review_low, "##########.##########;;f")
                    format(rrf.review_low, "##########.##########;I;f")						;004
                  convert_range_number
                  review_low_txt = text
                  review_sep = " to "
                  text_nbr = 
;004                format(rrf.review_high, "##########.##########;;f")
                    format(rrf.review_high, "##########.##########;I;f")					;004
                  convert_range_number
                  review_high_txt = text
;004              review_range_txt = concat("Review: ", trim(review_low_txt),
                  review_range_txt = concat(captions->review,": ", trim(review_low_txt),			;004
;004                                          " to ", trim(review_high_txt))
                                              " ",captions->tto," ", trim(review_high_txt))		;004
               endif
               if (cv_rrf7.code_value > 0.0)
;004              units_txt = concat("Units: ", cv_rrf7.display)
                  units_txt = concat(captions->units,": ", cv_rrf7.display)					;004
               else
                  units_txt = fillstring(50, " ")
               endif
               if (rrf.normal_ind > 0
               or  rrf.critical_ind > 0
               or  rrf.review_ind > 0
               or  cv_rrf7.code_value > 0.0)
                  range_disp = ""
                  if (cv_rrf7.code_value > 0.0)
                     range_disp = 
                       concat(trim(units_txt), trim(range_disp))
                  endif
                  if (rrf.review_ind > 0)
                     range_disp = 
                       concat(trim(review_range_txt), "   ", trim(range_disp))
                  endif
                  if (rrf.critical_ind > 0)
                     range_disp = 
                       concat(trim(critical_range_txt), "   ", trim(range_disp))
                  endif
                  if (rrf.normal_ind > 0)
                     range_disp = 
                       concat(trim(normal_range_txt), "   ", trim(range_disp))
                  endif
                  col 24, range_disp
                  row + 1
               endif
               if (unknown_age_ind = 1)                                ;002
;004              col 24, "(# = Unknown age range)"                    ;002
                  col 24, "(# = ",captions->unage,")"									;004
                  row + 1                                              ;002
               endif                                                   ;002
            endif
   
         detail
            if (ar_exists = "Y" and ref_range_yn = "Y")
;004           col 8, "ALPHA RESPONSE:"
		   col 8, captions->aresp,":"											;004
               text = trim(n.short_string)
               if (result_process_exists = "Y")
                  text = concat(trim(text), " (", trim(cv_ar.display), ")")
               endif
               col 24, text
               row + 1
            endif

         foot rrf.precedence_sequence
;002            col 8 "(# = unknown age range)"                            ;001
            row+0

         foot d2.seq
            row + 1

         foot d1.seq
            col 1, line
            row + 1

         foot report
            row + 2
;004        col 44, "* * *  E N D   O F   R E P O R T  * * *"
		col 44, captions->endrpt                             ;004

         with counter,
            outerjoin = d3,
            outerjoin = d4,
            dontcare = cv_rrf1,
            outerjoin = d5,
            dontcare = cv_rrf2,
            outerjoin = d6,
            dontcare = cv_rrf3,
            outerjoin = d7,
            dontcare = cv_rrf4,
            outerjoin = d8,
            dontcare = cv_rrf5,
            outerjoin = d9,
            dontcare = cv_rrf6,
            outerjoin = d10,
            dontcare = cv_rrf7,
            outerjoin = d11,
            dontcare = ar,
            dontcare = n,
            outerjoin = d12,
            dontcare = cv_ar,
            nullreport

         end
         go

;Generated by GNU enscript 1.6.4.
