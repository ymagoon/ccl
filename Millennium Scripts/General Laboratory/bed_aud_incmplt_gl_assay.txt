 ;;Solution_Test/script/Bedrock/bed_aud_incmplt_gl_assay/bed_aud_incmplt_gl_assay.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:        bed_aud_incmplt_gl_assay.prg
        Object name:             bed_aud_incmplt_gl_assay
        Request #:
 
        Product:                 Bedrock
        Product Team:            Bedrock
        HNA Version:             500
        CCL Version:             8.0
 
        Program purpose:
 
        Tables read:
 
 
        Tables updated:
 
        Executing from:          BEDROCK
 
        Special Notes:
 
 
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 04/03/08 Kelli Wade           Change column headings
;     002 11/03/08 Kelli Wade           Correctly return stats for dashboard green/red light
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program bed_aud_incmplt_gl_assay:dba go
create program bed_aud_incmplt_gl_assay:dba
 
if (not (validate (request,0)))
 record request
  (
    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
    1 paramlist[*]
      2 param_type_mean = vc
      2 pdate1 = dq8
      2 pdate2 = dq8
      2 vlist[*]
        3 dbl_value = f8
        3 string_value = vc
  )
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*]
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1  high_volume_flag = i2
    1  output_filename = vc
    1  run_status_flag = i2
    1  statlist[*]
       2 statistic_meaning = vc
       2 status_flag = i2
       2 qualifying_items = i4
       2 total_items = i4
    1  status_data
      2  status  =  C1
      2  SUBEVENTSTATUS [ 1 ]
        3  OPERATIONNAME  =  C15
        3  OPERATIONSTATUS  =  C1
        3  TARGETOBJECTNAME  =  C15
        3  TARGETOBJECTVALUE  =  C100
  )
endif
 
record request_serv_res
( 1 slist[*]
    2 code_value = f8
  1 activity_type_code_value = f8
)
 
record reply_serv_res
( 1 rlist[*]
    2 code_value = f8
    2 display = vc
    2 description = vc
    2 mean = vc
  1 error_msg = vc
%i cclsource:status_block.inc
)
 
record request_sr_detail
( 1 service_resources[*]
    2 code_value = f8
  1 load
    2 sequence_ind = i2
    2 result_type_ind = i2
    2 alpha_ind = i2
    2 numeric_ind = i2
)
 
record reply_sr_detail
( 1 service_resources[*]
    2 code_value = f8
    2 assay_need_seq_ind = i2
    2 assay_need_result_type_ind = i2
    2 assay_need_alpha_ind = i2
    2 assay_need_numeric_ind = i2
%i cclsource:status_block.inc
)
 
record temp
(  1 qual[*]
     2 org_id = f8
     2 org_disp = vc
     2 code_value = f8
     2 display = vc
     2 assay_need_seq_ind = i2
     2 assay_need_result_type_ind = i2
     2 assay_need_alpha_ind = i2
     2 assay_need_numeric_ind = i2
)
 
set need_result_type_cnt = 0
set need_alpha_cnt = 0
set need_numeric_cnt = 0
 
set glb_cd = 0.0
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 106
    and cv.cdf_meaning = "GLB"
    and cv.active_ind = 1
detail
  glb_cd = cv.code_value
with nocounter
 
set high_volume_cnt = 0
if (request->skip_volume_check_ind = 0)
  select into "nl:"
    hv_cnt = count(*)
  from service_resource s,
       code_value cv
  plan s
    where s.active_ind = 1
      and s.activity_type_cd = glb_cd
  join cv
    where cv.code_value = s.service_resource_cd
      and cv.active_ind = 1
      and cv.code_set = 221
      and cv.cdf_meaning in ("BENCH","INSTRUMENT")
  detail
    high_volume_cnt = hv_cnt
  with nocounter
 
  call echo(high_volume_cnt)
 
  if (high_volume_cnt > 1000)
    set reply->high_volume_flag = 2
    go to exit_script
  elseif (high_volume_cnt > 3000)
    set reply->high_volume_flag = 1
    go to exit_script
  endif
endif
 
set stat = alterlist(reply->collist,6)
set reply->collist[1].header_text = "Organization"
set reply->collist[1].data_type = 1 ;string
set reply->collist[1].hide_ind = 0
set reply->collist[2].header_text = "Instrument/Bench/Multiplexor"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 0
;001 set reply->collist[3].header_text = "Missing Assay Sequencing"
set reply->collist[3].header_text = "Assays Missing Sequencing"				;001
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
;001 set reply->collist[4].header_text = "Missing Result Type Review"
set reply->collist[4].header_text = "Assays Missing Result Type"			;001
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
;001 set reply->collist[5].header_text = "Missing Numeric Ranges"
set reply->collist[5].header_text = "Assays Missing Numeric Ranges"			;001
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
;001 set reply->collist[6].header_text = "Missing Alpha Ranges"
set reply->collist[6].header_text = "Assays Missing Alpha Responses"		;001
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
 
set request_serv_res->activity_type_code_value = glb_cd
set trace recpersist
execute bed_get_service_resource with replace ("REQUEST",request_serv_res),
                                      replace ("REPLY",reply_serv_res)
set rcnt = size(reply_serv_res->rlist,5)
call echo(build("rcnt:",rcnt))
if (rcnt = 0)
  go to skip_detail
endif
 
set stat = alterlist(request_sr_detail->service_resources,rcnt)
for (ridx = 1 to rcnt)
  set request_sr_detail->service_resources[ridx].code_value =
           reply_serv_res->rlist[ridx].code_value
endfor
set request_sr_detail->load.sequence_ind = 1
set request_sr_detail->load.result_type_ind = 1
set request_sr_detail->load.alpha_ind = 1
set request_sr_detail->load.numeric_ind = 1
set trace recpersist
execute bed_get_sr_detail with replace ("REQUEST",request_sr_detail),
                               replace ("REPLY",reply_sr_detail)
set r2cnt = size(reply_sr_detail->service_resources,5)
call echo(build("r2cnt:",r2cnt))
if (r2cnt = 0)
  set rcnt = 0
  go to skip_detail
endif
 
set qcnt = 0
select into "nl:"
  sr_disp = cnvtupper(reply_serv_res->rlist[d.seq].display)
from (dummyt d with seq = r2cnt),
     service_resource sr,
     organization o
plan d
  where (reply_sr_detail->service_resources[d.seq].assay_need_seq_ind = 1
  or reply_sr_detail->service_resources[d.seq].assay_need_result_type_ind = 1
  or reply_sr_detail->service_resources[d.seq].assay_need_alpha_ind = 1
  or reply_sr_detail->service_resources[d.seq].assay_need_numeric_ind = 1)
join sr
  where sr.service_resource_cd =
           reply_sr_detail->service_resources[d.seq].code_value
join o
  where o.organization_id = outerjoin(sr.organization_id)
order by o.org_name_key, sr_disp
detail
  qcnt = qcnt + 1
  stat = alterlist(temp->qual,qcnt)
  temp->qual[qcnt].org_id = sr.organization_id
  temp->qual[qcnt].org_disp = o.org_name
  temp->qual[qcnt].code_value =
        reply_sr_detail->service_resources[d.seq].code_value
  temp->qual[qcnt].display =
        reply_serv_res->rlist[d.seq].display
  temp->qual[qcnt].assay_need_seq_ind =
        reply_sr_detail->service_resources[d.seq].assay_need_seq_ind
  temp->qual[qcnt].assay_need_result_type_ind =
        reply_sr_detail->service_resources[d.seq].assay_need_result_type_ind
  temp->qual[qcnt].assay_need_numeric_ind =
        reply_sr_detail->service_resources[d.seq].assay_need_numeric_ind
  temp->qual[qcnt].assay_need_alpha_ind =
        reply_sr_detail->service_resources[d.seq].assay_need_alpha_ind
with nocounter
 
call echo(build("qcnt:",qcnt))
if (qcnt = 0)
  go to skip_detail
endif
 
set row_nbr = 0
select into "nl:"
from  (dummyt d with seq = qcnt)
plan d
detail
  row_nbr = row_nbr + 1
  stat = alterlist(reply->rowlist,row_nbr)
  stat = alterlist(reply->rowlist[row_nbr].celllist,6)
  reply->rowlist[row_nbr].celllist[1].string_value =
                        temp->qual[d.seq].org_disp
  reply->rowlist[row_nbr].celllist[2].string_value =
                        temp->qual[d.seq].display
  if (temp->qual[d.seq].assay_need_seq_ind = 1)
    reply->rowlist[row_nbr].celllist[3].string_value = "X"
  else
    reply->rowlist[row_nbr].celllist[3].string_value = " "
  endif
  if (temp->qual[d.seq].assay_need_result_type_ind = 1)
    reply->rowlist[row_nbr].celllist[4].string_value = "X"
    need_result_type_cnt = need_result_type_cnt + 1
  else
    reply->rowlist[row_nbr].celllist[4].string_value = " "
  endif
  if (temp->qual[d.seq].assay_need_numeric_ind = 1)
    reply->rowlist[row_nbr].celllist[5].string_value = "X"
    need_numeric_cnt = need_numeric_cnt + 1
  else
    reply->rowlist[row_nbr].celllist[5].string_value = " "
  endif
  if (temp->qual[d.seq].assay_need_alpha_ind = 1)
    reply->rowlist[row_nbr].celllist[6].string_value = "X"
    need_alpha_cnt = need_alpha_cnt + 1
  else
    reply->rowlist[row_nbr].celllist[6].string_value = " "
  endif
with nocounter
 
#skip_detail
 
;002 if (rcnt > 0)
if (need_result_type_cnt > 0 	;002
or need_alpha_cnt > 0			;002
or need_numeric_cnt > 0)		;002
  set reply->run_status_flag = 3
else
  set reply->run_status_flag = 1
endif
 
set stat = alterlist(reply->statlist,3)
set reply->statlist[1].statistic_meaning = "GLASSAYNEEDRESTYPE"
set reply->statlist[1].total_items = rcnt
set reply->statlist[1].qualifying_items = need_result_type_cnt
if (need_result_type_cnt > 0)
  set reply->statlist[1].status_flag = 3
else
  set reply->statlist[1].status_flag = 1
endif
set reply->statlist[2].statistic_meaning = "GLASSAYNEEDALPHA"
set reply->statlist[2].total_items = rcnt
set reply->statlist[2].qualifying_items = need_alpha_cnt
if (need_alpha_cnt > 0)
  set reply->statlist[2].status_flag = 3
else
  set reply->statlist[2].status_flag = 1
endif
set reply->statlist[3].statistic_meaning = "GLASSAYNEEDNUM"
set reply->statlist[3].total_items = rcnt
set reply->statlist[3].qualifying_items = need_numeric_cnt
if (need_numeric_cnt > 0)
  set reply->statlist[3].status_flag = 3
else
  set reply->statlist[3].status_flag = 1
endif
 
#exit_script
 
set reply->status_data->status = "S"
 
if (reply->high_volume_flag in (1,2))
  set reply->output_filename = build("incmplt_gl_assay_audit.csv")
endif
 
if (request->output_filename > " ")
  execute bed_rpt_file
endif
 
end go

;Generated by GNU enscript 1.6.4.
