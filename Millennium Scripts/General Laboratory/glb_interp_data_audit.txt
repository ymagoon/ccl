 ;;Solution_Test/script/PathNet -- Gen Lab/glb_interp_data_audit/glb_interp_data_audit.prg Turn on black mode

/*~BB~************************************************f************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
  /*****************************************************************************

        Source file name:       glb_interp_data_audit.prg
        Object name:            glb_interp_data_audit
        Request #:              n/a

        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        To provide a database audit of the defined interpretive data
        			information for each discrete assay.

        Tables read:            interp_data
				discrete_task_assay
			        long_text

        Tables updated:         None
        Executing from:         GLB_MENU

        Special Notes:
******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 12/08/00 Raj Mishra           Initial Release                     *
;                   *
;~DE~************************************************************************


             drop program GLB_INTERP_DATA_AUDIT:DBA go
             create program GLB_INTERP_DATA_AUDIT:DBA



             paint
/************************************************************************/
/*************************     RTF to TEXT     **************************/

%i cclsource:aps_uar_rtf.inc
;to convert from RTF to TEXT

/*************************     RTF to TEXT    **************************/
/*************************     i18n     **************************/

;INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
;INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
set i18nHandle = 0
;CALL UAR_I18NLOCALIZATIONINIT
set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)
/*************************     i18n     **************************/
  record captions
  (
      1 acttype 	  = vc
      1 ffrom 		  = vc
      1 tto 		  = vc
      1 notfound 	  = vc
      1 unknown 	  = vc
      1 ddate 		  = vc
      1 ida 		  = vc
      1 idc 		  = vc
      1 pageno 		  = vc
      1 ttime 		  = vc
      1 tamne 		  = vc
      1 servres 	  = vc
      1 allresources      = vc
      1 endrpt 		  = vc
      1 temp		  = vc
      1 begdatetime       = vc
      1 enddatetime       = vc
      1 GLTitle 	  = vc
      1 GLActType 	  = vc
      1 GLMnemFrom 	  = vc
      1 GLTo 		  = vc
      1 GLIncInact 	  = vc
      1 GLHelp 		  = vc
      1 GLLoadAct 	  = vc
  )

      set captions->GLTitle 	    = uar_i18ngetmessage(i18nHandle,"ida",	    "I N T E R P R E T I V E    D A T A    A U D I T")
      set captions->idc             = uar_i18ngetmessage(i18nHandle,"idc","INTERPRETIVE DATA: ")
      set captions->GLActType       = uar_i18ngetmessage(i18nHandle,"at","Activity Type:")
      set captions->GLMnemFrom      = uar_i18ngetmessage(i18nHandle,"ocmf","Discrete Assay Mnemonic From:")
      set captions->GLTo            = uar_i18ngetmessage(i18nHandle,"tto2","To:")
      set captions->GLIncInact      = uar_i18ngetmessage(i18nHandle,"prntrefrng","Include Inactive Interpretive Data?:")
      set captions->GLHelp          = uar_i18ngetmessage(i18nHandle,"help1","Press <Shift F5> for help")
      set captions->GLLoadAct       = uar_i18ngetmessage(i18nHandle,"loading","Loading activity types...")
      set captions->acttype         = uar_i18ngetmessage(i18nHandle,"acttype",    "ACTIVITY TYPE:")
      set captions->ffrom 	    = uar_i18ngetmessage(i18nHandle,"ffrom",	    "From:")
      set captions->tto       	    = uar_i18ngetmessage(i18nHandle,"tto",	    "to")
      set captions->notfound 	    = uar_i18ngetmessage(i18nHandle,"notfound",   "Not Found")
      set captions->unknown 	    = uar_i18ngetmessage(i18nHandle,"unknown",    "Unknown")
      set captions->ddate 	    = uar_i18ngetmessage(i18nHandle,"ddate",	    "DATE:")
      set captions->pageno 	    = uar_i18ngetmessage(i18nHandle,"pageno",	    "PAGE NO:")
      set captions->ttime 	    = uar_i18ngetmessage(i18nHandle,"ttime",	    "TIME:")
      set captions->tamne 	    = uar_i18ngetmessage(i18nHandle,"tamne",	    "TASK ASSAY MNEMONIC")
      set captions->servres 	    = uar_i18ngetmessage(i18nHandle,"servres",    "SERVICE RESOURCE")
      set captions->allresources    = uar_i18ngetmessage(i18nHandle,"allresources","All resources")
      set captions->begdatetime	    = uar_i18ngetmessage(i18nHandle,"begdatetime",    "BEGIN EFFECTIVE DATE/TIME")
      set captions->enddatetime	    = uar_i18ngetmessage(i18nHandle,"enddatetime",    "END EFFECTIVE DATE/TIME")
      set captions->endrpt 	    = uar_i18ngetmessage(i18nHandle,"endrpt","* * *  E N D   O F   R E P O R T  * * *")


      /***********************************************************************
      * Activity Type Record                                                 *
      ***********************************************************************/
      record act_type
      (
         1  qual[*]
            2  glb_activity_type_cd      = f8
      )


      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set ACTIVITY_TYPE_CODESET       = 106
         set GEN_LAB_CDF                 = "GLB"
         set BBD_CDF                     = "BBDONOR"
         set BB_CDF                      = "BB"
         set HLA_CDF                     = "HLA"
         set AP_CDF                      = "AP"
         set MICRO_CDF			 = "MICROBIOLOGY"
         set MNE_TYPE_CODESET            = 6011
         set MNE_TYPE_PRIMARY_CDF        = "PRIMARY"
         set DATA_MAP_TYPE_FLAG          = 0    ;Fill out with correct value.
         set max_nbr_rows                = 50
         declare mne_type_primary_cd     = f8
         declare stat                    = i4
         declare at_cnt                  = i4
         declare q_cnt                   = i4
         declare cnt                     = i4
         declare max_q_cnt               = i4
         declare activity_type_assay     = f8
         declare service_resource        = vc
         declare Inc_Inact               = i2
         declare task_mnemonic           = fillstring(20," ")

      /***********************************************************************
      * Display screen                                                       *
      ***********************************************************************/
         set actvty_type_default = fillstring(30, " ")
         set actvty_type = fillstring(30," ")
         set actvty_type_disp = fillstring(30," ")
         set actvty_type_cdf = fillstring(12, " ")
         set mne_beg = fillstring(20," ")
         set mne_end = fillstring(20," ")
         call clear(1,1)
         call video(n)
         call box(1,1,3,80)
         ; "INTERPRETIVE DATA AUDIT"
         call text(2,3, captions->GLTitle )
         ; "Activity Type:"
         call text(5,3,   captions->GLActType)
          ;"Discrete Assay Mnemonic:"
         call text(7,3,   captions->GLMnemFrom)
         ; "To:"
         call text(8,28, captions->GLTo)
         ; "Include Inactive Interpretive Data:"
         call text(10,3,  captions->GLIncInact)	;

      /***********************************************************************
      * Accept activity type.                                                *
      ***********************************************************************/
   /*      set disp_value = vc

         set stat = UAR_GET_MEANING_BY_CODESET(106,"GLB",1,disp_value)

	 select into "nl:"
            actvty_type_default = cnvtupper(cv.display)
         from
            code_value cv
         where cv.code_set = disp_value

    */

         select into "nl:"
            cv.display
         from
            code_value cv
         where cv.code_set = ACTIVITY_TYPE_CODESET
           and cv.cdf_meaning = GEN_LAB_CDF
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
         detail
            actvty_type_default = cnvtupper(cv.display)
         with
            nocounter,
            maxread(cv, 1)

	        ; "Press <Shift F5> for help"
                call text(24,3, captions->GLHelp)
		set help = select activity_type = cnvtupper(cv.display)
                    from code_value cv
                    where cv.code_set = ACTIVITY_TYPE_CODESET
                      and cv.cdf_meaning in (GEN_LAB_CDF,
                                             BB_CDF,
                                             BBD_CDF,
                                             HLA_CDF,
                                             AP_CDF,
                                             MICRO_CDF)
                    order by cv.display_key
                    with nocounter
         call accept(5,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU", actvty_type_default)
         set help = off
         call clear(24,3,70)
         set actvty_type_disp = curaccept
         set actvty_type = cnvtalphanum(curaccept)

      /***********************************************************************
      * Select activity types.                                               *
      ***********************************************************************/
         ;  "Loading activity Types..."
         ;call text(24,3, captions->GLLoadAct)
         select into "nl:"
            cv.code_value,
            cv.cdf_meaning

         from
            code_value cv

         where ((cv.code_set = ACTIVITY_TYPE_CODESET
             and cv.display_key = actvty_type
             and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF, BBD_CDF,HLA_CDF,AP_CDF,
                                             MICRO_CDF))
            or  (cv.code_set = MNE_TYPE_CODESET
              and cv.cdf_meaning = MNE_TYPE_PRIMARY_CDF))
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         head report
            stat = alterlist(act_type->qual,10)
            at_cnt = 0

         detail
            if (cv.code_set = ACTIVITY_TYPE_CODESET)
               at_cnt = at_cnt + 1
                if (mod(at_cnt,10) = 1 and at_cnt!= 1)
                   stat = alterlist(act_type->qual, at_cnt + 10)
                endif

               act_type->qual[at_cnt].glb_activity_type_cd = cv.code_value
               activity_type_assay = act_type->qual[at_cnt].glb_activity_type_cd
               actvty_type_cdf = cv.cdf_meaning
            endif
            if (cv.code_set = MNE_TYPE_CODESET)
               mne_type_primary_cd = cv.code_value
            endif
         foot report
            stat = alterlist(act_type->qual,at_cnt)

         with nocounter


      /***********************************************************************
      * Accept Discrete Assay mnemonic range.                                *
      ***********************************************************************/
         call accept(7,33, "PPPPPPPPPPPPPPPPPPPP;;CU", "A")
         set mne_beg = curaccept
         if (mne_beg = "A")
            call accept(8,33, "PPPPPPPPPPPPPPPPPPPP;;CU",
                        "ZZZZZZZZZZZZZZZZZZZZ")
         else
            call accept(8,33, "PPPPPPPPPPPPPPPPPPPP;;CU")
         endif
         set mne_end = curaccept


      /***********************************************************************
      * Accept Inactive Interpretive Data responses.		             *
      ***********************************************************************/
         call accept(10,40, "P;;CU", "N")
         set inc_inact_int_data = curaccept
         if (inc_inact_int_data = "Y")
            set Inc_Inact = 0
         else
            set Inc_Inact = 1
         endif

      /***********************************************************************
      * retrieving data and printing report.  			             *
      ***********************************************************************/

	select
	       task_mnemonic = uar_get_code_display(id.task_assay_cd),
	       service_resource_cd = id.service_resource_cd,
	       beg_dt_tm = format(id.beg_effective_dt_tm,"dd-mmm-yyyy      hh:mm;;q"),
	       end_dt_tm = format(id.end_effective_dt_tm,"dd-mmm-yyyy     hh:mm;;q"),
	       id.long_text_id,
	       dta.interp_data_ind,
	       arg_text_in = lt.long_text

	from interp_data id,
	     discrete_task_assay dta,
	     long_text lt

	plan dta where dta.interp_data_ind = 1		;only get the ones that have interp defined
	         and dta.active_ind >= Inc_Inact	;get active or inactives based on user input
	         and dta.activity_type_cd = activity_type_assay  ;the user entered activity_type
	         and dta.mnemonic_key_cap between mne_beg and mne_end  ;user entered start/end mnemonics

	join id  where id.task_assay_cd = dta.task_assay_cd
 		   and id.active_ind >= Inc_Inact

	join lt where id.long_text_id = lt.long_text_id

	order task_mnemonic,
	      id.interp_data_id


	head report
	     spacing = 0
	     curr_accn_row = 0
	     accn_col = 0

	head page
	     today = format(curdate,"dd-mmm-yy;;q")
	     col 1 captions->ddate
	     col +1 today
	     col 40 captions->GLTitle
	     col 110 captions->pageno
	     col +1 curpage
	     row +1
	     col 1  captions->ttime
	     col +1 curtime
	     row+1
	     col 1 captions->glacttype
	     col +1 actvty_type_disp
	     row +1
	     col 1  captions->tamne
	     col 26 captions->servres
	     col 51 captions->begdatetime
	     col 81 captions->enddatetime
	     row +1
	     col 1  "-------------------"
	     col 26 "-----------------"
	     col 51 "-------------------------"
	     col 81 "------------------------"
	     ROW +1

	head task_mnemonic
	     row +0

	detail

	     col 1  task_mnemonic

	     service_resource = (
      	 	if(service_resource_cd = 0.0)	captions->allresources
	     	else uar_get_code_display(service_resource_cd)
		endif
		)

	     col 26 service_resource
	     col 51 beg_dt_tm
	     col 81 end_dt_tm
	     row +1
	     if (dta.interp_data_ind =1)
	        row +1
	        col 1 captions->idc
	        row +2
	        call rtf_to_text(trim(lt.long_text),1,130)
	        for (q_cnt = 1 to size(tmptext->qual,5))
	           col 1 tmptext->qual[q_cnt].text
	           row +1
	           if (row > max_nbr_rows)
	              row 1
	              break
	           endif
	        endfor
	     endif

	foot task_mnemonic
	     row +1
	     col 1  "-------------------"
	     col 26 "-----------------"
	     col 51 "-------------------------"
	     col 81 "------------------------"
	     row +1

	foot report
	   row + 2
	   ; "* * *  E N D   O F   R E P O R T  * * *"
	   col 44, captions->endrpt

	       with counter,
	            nullreport,
                    memsort

	end
	go

;Generated by GNU enscript 1.6.4.
