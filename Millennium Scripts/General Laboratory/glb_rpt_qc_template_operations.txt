 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_qc_template_operations/glb_rpt_qc_template_operations.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_RPT_QC_TEMPLATE_OPERATIONS.PRG
        Object name:            GLB_RPT_QC_TEMPLATE_OPERATIONS
        Request #:              250227
 
        Product:                General Lab - Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Insert a statistical period into the database
 
        Tables read:            code_value, pcs_qc_filter_default, pcs_qc_filter
 
        Tables updated:         n/a
 
        Executing from:         General Lab QC Inquiry
 
        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 04/01/04 Craig Sumrall        Initial Release                     *
;	 001  03/20/08 Subramanya			Fix for not displaying QC Results   *
;										performed Last day of the month
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program GLB_RPT_QC_TEMPLATE_OPERATIONS:dba go
create program GLB_RPT_QC_TEMPLATE_OPERATIONS:dba
 
%i CCLSOURCE:GLB_SCRIPT_LOGGING.INC

set LOG_PROGRAM_NAME = "glb_rpt_qc_template_operations"
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/

/*
  record request
  (
    1 batch_selection = vc
    1 output_dist     = vc
    1 ops_date        = dq8
  )
*/
 
%i cclsource:pm_create_request.inc
%i cclsource:pm_dynamic_query.inc

record reply
      (    
%i cclsource:status_block.inc
      )

record qc_templates
(
    1 beg_dt_tm                     = dq8
    1 end_dt_tm                     = dq8
    1 default_preactive_lot_ind     = i2
    1 default_active_lot_ind        = i2
    1 lot_to_date_ind               = i2
    1 default_controls[*]
      2 control_id                  = f8
    1 default_test_sites[*]
      2 service_resource_cd         = f8
    1 default_procs[*]
      2 task_assay_cd               = f8
    1 default_ljc
      2 manf_ind                    = i2
      2 exp_ind                     = i2
      2 x_cntrl_ind                 = i2
      2 verify_ind                  = i2
      2 lot_per_graph_ind           = i2
      2 control_per_graph_ind       = i2
      2 use_actual_exp_val_ind      = i2
    1 default_hljc
      2 manf_ind                    = i2
      2 lot_per_graph_ind           = i2
      2 control_per_graph_ind       = i2
      2 use_actual_exp_val_ind      = i2
    1 default_qrl
      2 accept_ind                  = i2
      2 verify_ind                  = i2
      2 change_ind                  = i2
      2 oldchange_ind               = i2
      2 reject_ind                  = i2
      2 discard_ind                 = i2
      2 outcontrol_ind              = i2
    1 default_stat_ops_ind          = i2
    1 default_qcbenchmark_rpt
      2 series_sequence_nbr	        = i4
      2 series_interval_nbr         = i4
      2 save_statistics_ind         = i2
    1 filter_sets[*]
      2 filter_set_nbr              = i4
      2 controls[*]
        3 control_id                = f8
      2 test_sites[*]
        3 service_resource_cd       = f8
      2 procs[*]
        3 task_assay_cd             = f8
      2 preactive_lot_ind           = i2
      2 active_lot_ind              = i2
      2 ljc
        3 manf_ind                  = i2
        3 exp_ind                   = i2
        3 x_cntrl_ind               = i2
        3 verify_ind                = i2
        3 lot_per_graph_ind         = i2
        3 control_per_graph_ind     = i2
        3 use_actual_exp_val_ind    = i2
        3 applied_ind               = i2
      2 hljc
        3 manf_ind                  = i2
        3 lot_per_graph_ind         = i2
        3 control_per_graph_ind     = i2
        3 use_actual_exp_val_ind    = i2
        3 applied_ind               = i2        
      2 qrl
        3 accept_ind                = i2
        3 verify_ind                = i2
        3 change_ind                = i2
        3 oldchange_ind             = i2
        3 reject_ind                = i2
        3 discard_ind               = i2
        3 outcontrol_ind            = i2
        3 applied_ind               = i2        
      2 stat_ops_ind                = i2
      2 stat_applied_ind            = i2
      2 qcbenchmark_rpt
        3 series_sequence_nbr       = i4
        3 series_interval_nbr       = i4
        3 save_statistics_ind       = i2
        3 applied_ind               = i2
 )
 
  /****************************************
  * Declare variables                     *
  *****************************************/
 
  declare nString_length           = i4 with protect, noconstant(0)
  declare nStart_position          = i4 with protect, noconstant(1)
  declare nPosition                = i4 with protect, noconstant(1)
  declare sBatch_Selection         = vc with protect, noconstant("")
  declare sTEMPLATE_NAME_CONST     = vc with protect, constant("TEMPLATE[")
  declare sREPORT_NAME_CONST       = vc with protect, constant("REPORT[")
  declare nDetailFlag              = i2 with protect, noconstant(0)
  declare nInValidFilterRange      = i2 with protect, noconstant(0)
  declare sParentId                = vc with protect, noconstant("")
  declare bCreateReq               = i2 with protect, noconstant(FALSE)
  declare nTestCnt                 = i4 with protect, noconstant(0)
  declare nDefTestCnt              = i4 with protect, noconstant(0)
  declare nDefCtrlCnt              = i4 with protect, noconstant(0)
  declare nDefProcCnt              = i4 with protect, noconstant(0)
  declare nControlCnt              = i4 with protect, noconstant(0)
  declare nAssayCnt                = i4 with protect, noconstant(0)
  declare nListCnt                 = i4 with protect, noconstant(0)
  declare dNewDate                 = f8 with protect, noconstant(0.0)
  declare dTempDate                = f8 with protect, noconstant(CNVTDATETIME(request->ops_date))
  declare dTempDate2               = f8 with protect, noconstant(0.0)
  declare dStartDate               = f8 with protect, noconstant(0.0)
  declare dFinishDate              = f8 with protect, noconstant(0.0)
  declare dMonthDate               = f8 with protect, noconstant(0.0)
  declare dWeekDate                = f8 with protect, noconstant(0.0)
  declare nSetCnt                  = i4 with protect, noconstant(0)
  declare sFilterMean              = c12 with protect, noconstant("")
  declare y                        = i4 with protect, noconstant(0)
  declare nNumControls             = i4 with protect, noconstant(0)
  declare nNumTestSites            = i4 with protect, noconstant(0)

  set reply->status_data.status = "S"

/**********************************************************************
* Parse out sBatch_Selection                                          *
*                                                                     *
**********************************************************************/
 
set sBatch_Selection = CNVTUPPER(trim(request->batch_selection))
 
  ;locate the TEMPLATE[ string
set nPosition = findstring(sTEMPLATE_NAME_CONST, sBatch_Selection, nStart_position,0)
  ;check to see if string was found
if (nPosition > 0)
    ;set the start position of the template supplied
  set nStart_position = nPosition + size(sTEMPLATE_NAME_CONST)
 
    ;get the left bracket position of the template supplied
  set nPosition = findstring("]", sBatch_Selection, nStart_position)
 
    ;retrieve the template string size
  set nString_length = nPosition - nStart_position
  set sTemplateName = trim(substring(nStart_position, nString_length, sBatch_Selection))
 
endif
 
set nPosition = 0

  ;locate the REPORTS[ string
set nPosition = findstring(sREPORT_NAME_CONST, sBatch_Selection, nStart_position,0)
 
  ;check to see if string was found
if (nPosition > 0)
    ;set the start position of the report supplied
  set nStart_position = nPosition + size(sREPORT_NAME_CONST)
 
    ;get the left bracket position of the report supplied
  set nPosition = findstring("]", sBatch_Selection, nStart_position)
 
    ;retrieve the report string
  set nString_length = nPosition - nStart_position
  set sReportName = trim(substring(nStart_position, nString_length, sBatch_Selection))
 
endif

/*************************************************************************
*Validate Report Name LJC/MLJC/QRL/QCSTAT/XSTAT                          *
*************************************************************************/
if(sReportName not in("LJC", "MLJC", "QRL", "QCSTAT", "QCBENCHMARK"))
  set reply->status_data.status = "F"
  go to exit_script
endif
 
Select into "nl:"
 
FROM
  code_value cv,
  pcs_qc_filter pqf,
  pcs_qc_filter_default pqfd
 
PLAN CV
  where cv.code_set = 255232 and cv.display_key = CNVTALPHANUM(sTemplateName)
JOIN PQF
  where pqf.template_cd = cv.code_value
JOIN PQFD
  where pqfd.filter_id = outerjoin(pqf.filter_id)
 
ORDER
  pqf.filter_set_nbr,
  pqf.filter_cd
 
HEAD pqf.filter_set_nbr
 
  if(pqf.filter_set_nbr > 0)
    nSetCnt = nSetCnt + 1
    if(nSetCnt > size(qc_templates->filter_sets, 5))
      stat = alterlist(qc_templates->filter_sets, nSetCnt + 10)
    endif
  endif
 

HEAD pqf.filter_cd
sFilterMean = uar_get_code_meaning(pqf.filter_cd)
  nDetailFlag = 0
  nDefCnt = 0
  nAssayCnt = 0
  nTestCnt = 0
  nControlCnt = 0
  
  case (sFilterMean)

    of "A_DAYS": 
      qc_templates->beg_dt_tm = datetimeadd(dTempDate, - pqfd.filter_nbr);request->ops_date, - pqfd.filter_nbr)
      qc_templates->end_dt_tm = dTempDate
      
    of "A_MTH_DT":
      qc_templates->end_dt_tm = request->ops_date
      qc_templates->beg_dt_tm = DATETIMEFIND(cnvtdatetime(curdate,0), "M", "B", "B")
       
    of "A_PREV_MTH":
      
      dNewDate = DATETIMEFIND(dTempDate, "M", "B", "B") ;set dNewDate to first day of month      

      for(x = 1 to pqfd.filter_nbr)
        dTempDate = DATETIMEADD(dNewDate, - 1); set dNewDate to last day of previous month
        
        dMonthDate = DATETIMEFIND(dTempDate, "M", "B", "B") ;set dTempDate to first day of month
        
        dNewDate = dMonthDate
      endfor
      
      dTempDate2 = DATETIMEFIND(request->ops_date, "M", "B", "E"); set final date to be first day of month. ;001
      dFinishDate = DATETIMEADD(dTempDate2, - 1)          
 
      qc_templates->beg_dt_tm = dNewDate
      qc_templates->end_dt_tm = dFinishDate
            
 
    of "A_PREV_WK":


       dStartDate = DATETIMEFIND(dTempDate, "W", "B", "B") ;set dTempDate to first day of week

      for(x = 1 to pqfd.filter_nbr)

        dTempDate2 = DATETIMEADD(dStartDate, - 1); set dNewDate to last day of previous week

        dWeekDate = DATETIMEFIND(dTempDate2, "W", "B", "B") ;set dWeekDate to first day of week;
        dStartDate = dWeekDate
        
      endfor
      
      dTempDate2 = DATETIMEFIND(dTempDate, "W", "B", "E"); set final date to be first day of week.
      dFinishDate = DATETIMEADD(dTempDate2, - 1);get date for end of first week (last week)

      qc_templates->beg_dt_tm = dStartDate
      qc_templates->end_dt_tm = dFinishDate
 

    of "A_WK_DT":
      qc_templates->end_dt_tm = dTempDate
      qc_templates->beg_dt_tm = DATETIMEFIND(dTempDate, "W", "B", "B");cnvtdatetime(curdate,0), "W", "B", "B")
 
    of "G_LT_TO_DT":
 
      qc_templates->end_dt_tm = dTempDate
      qc_templates->lot_to_date_ind = 1
 
    of "G_RSULT":
 
      nInValidFilterRange = 1
 
    of "G_TS":
 
      nDetailFlag = 1
 
    of "G_PROC":
 
      nDetailFlag = 1
 
    of "G_CTRL":
 
      nDetailFlag = 1
 
    of "G_PRE_LOT":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_preactive_lot_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].preactive_lot_ind = 1
      endif
 
    of "G_ACT_LOT":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_active_lot_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].active_lot_ind = 1
      endif
 
    of "G_LJC_CPG":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_ljc.control_per_graph_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].ljc.control_per_graph_ind = 1
        qc_templates->filter_sets[nSetCnt].ljc.applied_ind = 1
      endif
 
    of "G_LJC_MN_SD":
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_ljc.exp_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].ljc.exp_ind = 1
        qc_templates->filter_sets[nSetCnt].ljc.applied_ind = 1
      endif
       
    of "G_LJC_LPG":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_ljc.lot_per_graph_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].ljc.lot_per_graph_ind = 1
        qc_templates->filter_sets[nSetCnt].ljc.applied_ind = 1
      endif
 
    of "G_LJC_MANF":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_ljc.manf_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].ljc.manf_ind = 1
        qc_templates->filter_sets[nSetCnt].ljc.applied_ind = 1
      endif
 
    of "G_LJC_TECH":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_ljc.verify_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].ljc.verify_ind = 1
        qc_templates->filter_sets[nSetCnt].ljc.applied_ind = 1
      endif
 
    of "G_LJC_XC":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_ljc.x_cntrl_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].ljc.x_cntrl_ind = 1
        qc_templates->filter_sets[nSetCnt].ljc.applied_ind = 1
      endif
 
 
    of "G_HLJC_CPG":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_hljc.control_per_graph_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].hljc.control_per_graph_ind = 1
        qc_templates->filter_sets[nSetCnt].hljc.applied_ind = 1
      endif
 
    of "G_HLJC_MN_SD":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_hljc.use_actual_exp_val_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].hljc.use_actual_exp_val_ind  = 1
        qc_templates->filter_sets[nSetCnt].hljc.applied_ind = 1
      endif
 
    of "G_HLJC_LPG":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_hljc.lot_per_graph_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].hljc.lot_per_graph_ind = 1
        qc_templates->filter_sets[nSetCnt].hljc.applied_ind = 1
      endif
 
    of "G_HLJC_MANF":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_hljc.manf_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].hljc.manf_ind = 1
        qc_templates->filter_sets[nSetCnt].hljc.applied_ind = 1
      endif
 
    of "G_RL_OUT":
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_qrl.outcontrol_ind = 1
        qc_templates->default_qrl.accept_ind = 0
        qc_templates->default_qrl.verify_ind = 0
        qc_templates->default_qrl.change_ind = 0
        qc_templates->default_qrl.oldchange_ind = 0
        qc_templates->default_qrl.reject_ind = 0
        qc_templates->default_qrl.discard_ind = 0
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].qrl.outcontrol_ind = 1
        qc_templates->filter_sets[nSetCnt].qrl.accept_ind = 0
        qc_templates->filter_sets[nSetCnt].qrl.verify_ind = 0
        qc_templates->filter_sets[nSetCnt].qrl.change_ind = 0
        qc_templates->filter_sets[nSetCnt].qrl.oldchange_ind = 0
        qc_templates->filter_sets[nSetCnt].qrl.reject_ind = 0
        qc_templates->filter_sets[nSetCnt].qrl.discard_ind = 0
        qc_templates->filter_sets[nSetCnt].applied_ind = 1
      endif
 
    of "G_RL_RS":
      nDetailFlag = 1
 
    of "G_ST_OUT":
 
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_stat_ops_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].stat_ops_ind = 1
        qc_templates->filter_sets[nSetCnt].stat_applied_ind = 1
      endif
 
    of "G_QC_INTVL":
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_qcbenchmark_rpt->series_interval_nbr = pqfd.filter_nbr
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.series_interval_nbr = pqfd.filter_nbr
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.applied_ind = 1
      endif

    of "G_FIRST_SEQ":
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_qcbenchmark_rpt->series_sequence_nbr = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.series_sequence_nbr = 1
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.applied_ind = 1
      endif

    of "G_LAST_SEQ":
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_qcbenchmark_rpt->series_sequence_nbr = -999
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.series_sequence_nbr = -999
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.applied_ind = 1
      endif

    of "G_OTHER_SEQ":
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_qcbenchmark_rpt->series_sequence_nbr = pqfd.filter_nbr
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.series_sequence_nbr = pqfd.filter_nbr
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.applied_ind = 1
      endif

    of "G_SAVE_STAT":
      if(pqf.filter_set_nbr = 0)
        qc_templates->default_qcbenchmark_rpt->save_statistics_ind = 1
      elseif (pqf.filter_set_nbr > 0)
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.save_statistics_ind = 1
        qc_templates->filter_sets[nSetCnt].qcbenchmark_rpt.applied_ind = 1
      endif
  endcase

  DETAIL

  if (nDetailFlag = 1)
    if(sFilterMean = "G_RL_RS")
      if(pqf.filter_set_nbr = 0)
        if(qc_templates->default_qrl.outcontrol_ind = 0)
          sParentId = uar_get_code_meaning(pqfd.parent_entity_id)
        endif
      elseif (pqf.filter_set_nbr > 0)
        if(qc_templates->filter_sets[nSetCnt].qrl.outcontrol_ind = 0)
          sParentId = uar_get_code_meaning(pqfd.parent_entity_id)
        endif
      endif
      case (sParentId)
        of "ACCEPT":
          if(pqf.filter_set_nbr = 0)
            qc_templates->default_qrl.accept_ind = 1
          elseif(pqf.filter_set_nbr > 0)
            qc_templates->filter_sets[nSetCnt].qrl.accept_ind = 1
            qc_templates->filter_sets[nSetCnt].qrl.applied_ind = 1 
          endif
        of "VERIFIED":
          if(pqf.filter_set_nbr = 0)
            qc_templates->default_qrl.verify_ind = 1
          elseif(pqf.filter_set_nbr > 0)
            qc_templates->filter_sets[nSetCnt].qrl.verify_ind = 1
            qc_templates->filter_sets[nSetCnt].qrl.applied_ind = 1
          endif
        of "AUTOVERIFIED":
          if(pqf.filter_set_nbr = 0)
            qc_templates->default_qrl.verify_ind = 1
          elseif(pqf.filter_set_nbr > 0)
            qc_templates->filter_sets[nSetCnt].qrl.verify_ind = 1
            qc_templates->filter_sets[nSetCnt].qrl.applied_ind = 1
          endif
        of "CHANGE":
          if(pqf.filter_set_nbr = 0)
            qc_templates->default_qrl.change_ind = 1
          elseif(pqf.filter_set_nbr > 0)
            qc_templates->filter_sets[nSetCnt].qrl.change_ind = 1
            qc_templates->filter_sets[nSetCnt].qrl.applied_ind = 1
          endif
        of "OLD CHANGE":
          if(pqf.filter_set_nbr = 0)
            qc_templates->default_qrl.oldchange_ind = 1
          elseif(pqf.filter_set_nbr > 0)
            qc_templates->filter_sets[nSetCnt].qrl.oldchange_ind = 1
            qc_templates->filter_sets[nSetCnt].qrl.applied_ind = 1
          endif
        of "REJECT":
          if(pqf.filter_set_nbr = 0)
            qc_templates->default_qrl.reject_ind = 1
          elseif(pqf.filter_set_nbr > 0)
            qc_templates->filter_sets[nSetCnt].qrl.reject_ind = 1
            qc_templates->filter_sets[nSetCnt].qrl.applied_ind = 1
          endif
        of "DISCARD":
          if(pqf.filter_set_nbr = 0)
            qc_templates->default_qrl.discard_ind = 1
          elseif(pqf.filter_set_nbr > 0)
            qc_templates->filter_sets[nSetCnt].qrl.discard_ind = 1
            qc_templates->filter_sets[nSetCnt].qrl.applied_ind = 1
          endif
      endcase
    elseif (sFilterMean = "G_TS")
      if(pqf.filter_set_nbr = 0)
        nDefTestCnt = nDefTestCnt + 1
        if (nDefTestCnt > size(qc_templates->default_test_sites, 5))
          stat = alterlist(qc_templates->default_test_sites, nDefTestCnt+ 10)
        endif
        qc_templates->default_test_sites[nDefTestCnt].service_resource_cd = pqfd.parent_entity_id
 
      elseif (pqf.filter_set_nbr > 0)
        nTestCnt = nTestcnt + 1
        if(nTestCnt > size(qc_templates->filter_sets[nSetCnt].test_sites, 5))
          stat = alterlist(qc_templates->filter_sets[nSetCnt].test_sites, nTestCnt + 10)
        endif
        qc_templates->filter_sets[nSetCnt].test_sites[nTestCnt].service_resource_cd = pqfd.parent_entity_id
 
      endif
    elseif (sFilterMean = "G_PROC")
      if(pqf.filter_set_nbr = 0)
        nDefProcCnt = nDefProcCnt + 1
        if (nDefProcCnt > size(qc_templates->default_procs, 5))
          stat = alterlist(qc_templates->default_procs, nDefProcCnt+ 10)
        endif
        qc_templates->default_procs[nDefProcCnt].task_assay_cd = pqfd.parent_entity_id
 
      elseif (pqf.filter_set_nbr > 0)
          nAssayCnt = nAssayCnt + 1
          if (nAssayCnt > size(qc_templates->filter_sets[nSetCnt].procs, 5))
            stat = alterlist(qc_templates->filter_sets[nSetCnt].procs, nAssayCnt + 10)
          endif
        qc_templates->filter_sets[nSetCnt].procs[nAssayCnt].task_assay_cd = pqfd.parent_entity_id
 
      endif
    elseif (sFilterMean = "G_CTRL")
      
      if(pqf.filter_set_nbr = 0)
        nDefCtrlCnt = nDefCtrlCnt + 1
        if (nDefCtrlCnt > size(qc_templates->default_controls, 5))
          stat = alterlist(qc_templates->default_controls, nDefCtrlCnt + 10)
        endif
        qc_templates->default_controls[nDefCtrlCnt].control_id = pqfd.parent_entity_id
 
      elseif (pqf.filter_set_nbr > 0)
        nControlCnt = nControlCnt + 1
        if(nControlCnt > size(qc_templates->filter_sets[nSetCnt].controls, 5))
           stat = alterlist(qc_templates->filter_sets[nSetCnt].controls, nControlCnt + 10)
        endif
        qc_templates->filter_sets[nSetCnt].controls[nControlCnt].control_id = pqfd.parent_entity_id
 
      endif
    endif
  endif
 
  foot pqf.filter_cd
    if(nAssayCnt > 0 )
      stat = alterlist(qc_templates->filter_sets[nSetCnt].procs, nAssayCnt)
    elseif (nDefProcCnt > 0)
      stat = alterlist(qc_templates->default_procs, nDefProcCnt)
    endif
    if (nTestCnt > 0)
      stat = alterlist(qc_templates->filter_sets[nSetCnt].test_sites, nTestCnt)
    elseif (nDefTestCnt > 0)
      stat = alterlist(qc_templates->default_test_sites, nDefTestCnt)
    endif
    if (nControlCnt > 0)
      stat = alterlist(qc_templates->filter_sets[nSetCnt].controls, nControlCnt)
    elseif (nDefCtrlCnt > 0)
      stat = alterlist(qc_templates->default_controls, nDefCtrlCnt)
    endif

  foot report
    stat = alterlist (qc_templates->filter_sets, nSetCnt)      
  with nocounter

if(nInValidFilterRange = 1)
  set reply->status_data.status = "F"
  go to exit_script
endif

/******************************
***start req builder
*******************************/
  for(nFScnt = 1 to nSetCnt )
    if(sReportName = "LJC")
      set bCreateReq = cr_createRequest(0, 257532, "LJC_REQ")
      if (bCreateReq != TRUE)
   	    set reply->status_data.status = "F"
        go to exit_script
      endif
 
      set ljc_req->begin_date             = qc_templates->beg_dt_tm
      set ljc_req->end_date               = qc_templates->end_dt_tm
      set ljc_req->output_dist            = request->output_dist
      set ljc_req->ops_date               = request->ops_date
      
      if(qc_templates->filter_sets[nFScnt].ljc.applied_ind = 1)
        set ljc_req->manf_ind               = qc_templates->filter_sets[nFScnt].ljc.manf_ind
        set ljc_req->exp_ind                = qc_templates->filter_sets[nFScnt].ljc.exp_ind
        set ljc_req->x_cntrl_ind            = qc_templates->filter_sets[nFScnt].ljc.x_cntrl_ind      
        set ljc_req->verify_ind             = qc_templates->filter_sets[nFScnt].ljc.verify_ind
        set ljc_req->lot_per_graph_ind      = qc_templates->filter_sets[nFScnt].ljc.lot_per_graph_ind
        set ljc_req->control_per_graph_ind  = qc_templates->filter_sets[nFScnt].ljc.control_per_graph_ind
        set ljc_req->use_actual_exp_val_ind = qc_templates->filter_sets[nFScnt].ljc.use_actual_exp_val_ind 
      else
        set ljc_req->manf_ind               = qc_templates->default_ljc.manf_ind
        set ljc_req->exp_ind                = qc_templates->default_ljc.exp_ind
        set ljc_req->x_cntrl_ind            = qc_templates->default_ljc.x_cntrl_ind
        set ljc_req->verify_ind             = qc_templates->default_ljc.verify_ind
        set ljc_req->lot_per_graph_ind      = qc_templates->default_ljc.lot_per_graph_ind
        set ljc_req->control_per_graph_ind  = qc_templates->default_ljc.control_per_graph_ind
        set ljc_req->use_actual_exp_val_ind = qc_templates->default_ljc.use_actual_exp_val_ind 
      endif
     
     if(size(qc_templates->filter_sets[nFScnt].controls,5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].controls, 5)
        set stat = alterlist(ljc_req->controls,nListCnt)
        for(y = 1 to nListCnt)
          set ljc_req->controls[y].control_id = qc_templates->filter_sets[nFScnt].controls[y].control_id
        endfor
      elseif (size(qc_templates->default_controls, 5) > 0)
        set nListCnt = size(qc_templates->default_controls, 5)
        set stat = alterlist(ljc_req->controls,nListCnt)
        for(y = 1 to nListCnt)
          set ljc_req->controls[y].control_id = qc_templates->default_controls[y].control_id
        endfor
      endif

      if(size(qc_templates->filter_sets[nFScnt].test_sites, 5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].test_sites, 5)
        set stat = alterlist(ljc_req->test_sites,nListCnt)
        for(y = 1 to nListCnt)
          set ljc_req->test_sites[y].service_resource_cd = qc_templates->filter_sets[nFScnt].test_sites[y].service_resource_cd
        endfor
      elseif (size(qc_templates->default_test_sites, 5) > 0)
        set nListCnt = size(qc_templates->default_test_sites, 5)
        set stat = alterlist(ljc_req->test_sites,nListCnt)
        for(y = 1 to nListCnt)
          set ljc_req->test_sites[y].service_resource_cd = qc_templates->default_test_sites[y].service_resource_cd
        endfor
      endif

      if(size(qc_templates->filter_sets[nFScnt].procs,5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].procs, 5)
        set stat = alterlist(ljc_req->assays,nListCnt)
        for(y = 1 to nListCnt)
          set ljc_req->assays[y].task_assay_cd = qc_templates->filter_sets[nFScnt].procs[y].task_assay_cd
        endfor
      elseif (size(qc_templates->default_procs, 5) > 0)
        set nListCnt = size(qc_templates->default_procs, 5)
        set stat = alterlist(ljc_req->assays, nListCnt)
        for(y = 1 to nListCnt)
          set ljc_req->assays[y].task_assay_cd = qc_templates->default_procs[y].task_assay_cd
        endfor
      endif

    if(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 0 and qc_templates->filter_sets[nFScnt].active_lot_ind = 0)
 
        if(qc_templates->default_preactive_lot_ind = 1 and qc_templates->default_active_lot_ind = 1)
          set ljc_req->lot_type_flag = 0
        elseif(qc_templates->default_preactive_lot_ind = 1 and qc_templates->default_active_lot_ind = 0)
          set ljc_req->lot_type_flag = 1
        elseif(qc_templates->default_preactive_lot_ind = 0 and qc_templates->default_active_lot_ind = 1)
          set ljc_req->lot_type_flag = 2
        endif
      else
        if(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 1 and qc_templates->filter_sets[nFScnt].active_lot_ind = 1)
          set ljc_req->lot_type_flag = 0
        elseif(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 1 and qc_templates->filter_sets[nFScnt].active_lot_ind = 0)
          set ljc_req->lot_type_flag = 1
        elseif(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 0 and qc_templates->filter_sets[nFScnt].active_lot_ind = 1)
          set ljc_req->lot_type_flag = 2
        endif
      endif

call echorecord(ljc_req)
     execute GLB_RPT_LEVY_JENNINGS with replace ("REQUEST", "LJC_REQ")
 
    elseif(sReportName = "MLJC")
 
      set bCreateReq = cr_createRequest(0, 257554, "MLJC_REQ")
      if (bCreateReq != TRUE)
   	    set reply->status_data.status = "F"
   	    go to exit_script
      endif
      
      set mljc_req->begin_date             = datetimeadd(request->ops_date, - 31)
      set mljc_req->end_date               = request->ops_date
      set mljc_req->output_dist            = request->output_dist
      set mljc_req->ops_date               = request->ops_date
      
      if(qc_templates->filter_sets[nFScnt].hljc.applied_ind = 1)        
        set mljc_req->manf_ind               = qc_templates->filter_sets[nFScnt].hljc.manf_ind
        set mljc_req->lot_per_graph_ind      = qc_templates->filter_sets[nFScnt].hljc.lot_per_graph_ind
        set mljc_req->control_per_graph_ind  = qc_templates->filter_sets[nFScnt].hljc.control_per_graph_ind
        set mljc_req->use_actual_exp_val_ind = qc_templates->filter_sets[nFScnt].hljc.use_actual_exp_val_ind
      else
        set mljc_req->manf_ind               = qc_templates->default_hljc.manf_ind
        set mljc_req->lot_per_graph_ind      = qc_templates->default_hljc.lot_per_graph_ind
        set mljc_req->control_per_graph_ind  = qc_templates->default_hljc.control_per_graph_ind
        set mljc_req->use_actual_exp_val_ind = qc_templates->default_hljc.use_actual_exp_val_ind
      endif
      
        if(size(qc_templates->filter_sets[nFScnt].controls,5) > 0)
          set nListCnt = size(qc_templates->filter_sets[nFScnt].controls, 5)
          set stat = alterlist(mljc_req->controls,nListCnt)
          for(y = 1 to nListCnt)
            set mljc_req->controls[y].control_id = qc_templates->filter_sets[nFScnt].controls[y].control_id
          endfor
        elseif (size(qc_templates->default_controls, 5) > 0)
          set nListCnt = size(qc_templates->default_controls, 5)
          set stat = alterlist(mljc_req->controls, nListCnt)
          for(y = 1 to nListCnt)
            set mljc_req->controls[y].control_id = qc_templates->default_controls[y].control_id
          endfor
        endif

        if(size(qc_templates->filter_sets[nFScnt].test_sites, 5) > 0)
          set nListCnt = size(qc_templates->filter_sets[nFScnt].test_sites, 5)
          set stat = alterlist(mljc_req->test_sites,nListCnt)
          for(y = 1 to nListCnt)
            set mljc_req->test_sites[y].service_resource_cd = qc_templates->filter_sets[nFScnt].test_sites[y].service_resource_cd
          endfor
        elseif (size(qc_templates->default_test_sites, 5) > 0)
          set nListCnt = size(qc_templates->default_test_sites, 5)
          set stat = alterlist(mljc_req->test_sites,nListCnt)
          for(y = 1 to nListCnt)
            set mljc_req->test_sites[y].service_resource_cd = qc_templates->default_test_sites[y].service_resource_cd
          endfor
        endif

        if(size(qc_templates->filter_sets[nFScnt].procs,5) > 0)
          set nListCnt = size(qc_templates->filter_sets[nFScnt].procs, 5)
          set stat = alterlist(mljc_req->assays,nListCnt)
          for(y = 1 to nListCnt)
            set mljc_req->assays[y].task_assay_cd = qc_templates->filter_sets[nFScnt].procs[y].task_assay_cd
          endfor
        elseif (size(qc_templates->default_procs, 5) > 0)
          set nListCnt = size(qc_templates->default_procs, 5)
          set stat = alterlist(mljc_req->assays,nListCnt)
          for(y = 1 to nListCnt)
            set mljc_req->assays[y].task_assay_cd = qc_templates->default_procs[y].task_assay_cd
          endfor
        endif

       if(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 0 and qc_templates->filter_sets[nFScnt].active_lot_ind = 0)
         if(qc_templates->default_preactive_lot_ind = 1 and qc_templates->default_active_lot_ind = 1)
           set mljc_req->lot_type_flag = 0
         elseif(qc_templates->default_preactive_lot_ind = 1 and qc_templates->default_active_lot_ind = 0)
           set mljc_req->lot_type_flag = 1
         elseif(qc_templates->default_preactive_lot_ind = 0 and qc_templates->default_active_lot_ind = 1)
           set mljc_req->lot_type_flag = 2
         endif
       else
         if(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 1 and qc_templates->filter_sets[nFScnt].active_lot_ind = 1)
           set mljc_req->lot_type_flag = 0
         elseif(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 1 and qc_templates->filter_sets[nFScnt].active_lot_ind = 0)
           set mljc_req->lot_type_flag = 1
         elseif(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 0 and qc_templates->filter_sets[nFScnt].active_lot_ind = 1)
           set mljc_req->lot_type_flag = 2
         endif
       endif

call echorecord(mljc_req)
      execute GLB_RPT_MONTHLY_LJC with replace ("REQUEST", "MLJC_REQ")

    elseif(sReportName = "QCSTAT")

      
      if(size(qc_templates->filter_sets[nFScnt].controls,5) > 0)
        set nNumControls = size(qc_templates->filter_sets[nFScnt].controls, 5)
      elseif (size(qc_templates->default_controls, 5) > 0)
        set nNumControls = size(qc_templates->default_controls, 5)
      endif

      if(size(qc_templates->filter_sets[nFScnt].test_sites, 5) > 0)
        set nNumTestSites = size(qc_templates->filter_sets[nFScnt].test_sites, 5)
      elseif (size(qc_templates->default_test_sites, 5) > 0)
        set nNumTestSites = size(qc_templates->default_test_sites, 5)
      endif
      
      if(nNumControls = 1 and (nNumTestSites = 0 or nNumTestSites > 1))
        set bCreateReq = cr_createRequest(0, 257559, "stat_req")
      else
        set bCreateReq = cr_createRequest(0, 257543, "stat_req")
      endif
      
      if (bCreateReq != TRUE)
   	    set reply->status_data.status = "F"
   	    go to exit_script
      endif
      
      set stat_req->beg_dt_tm            = qc_templates->beg_dt_tm
      set stat_req->end_dt_tm            = qc_templates->end_dt_tm
      set stat_req->output_dist          = request->output_dist
      set stat_req->ops_date             = request->ops_date
      set stat_req->lot_to_date_ind      = qc_templates->lot_to_date_ind
      
      if(qc_templates->filter_sets[nFScnt].stat_applied_ind = 1)
        set stat_req->ops_ind       = qc_templates->filter_sets[nFScnt].stat_ops_ind
      else
        set stat_req->ops_ind       = qc_templates->default_stat_ops_ind
      endif
      
      if(size(qc_templates->filter_sets[nFScnt].controls,5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].controls, 5)
        set stat = alterlist(stat_req->controls,nListCnt)
        for(y = 1 to nListCnt)
          set stat_req->controls[y].control_id = qc_templates->filter_sets[nFScnt].controls[y].control_id
        endfor
      elseif (size(qc_templates->default_controls, 5) > 0)
        set nListCnt = size(qc_templates->default_controls, 5)
        set stat = alterlist(stat_req->controls,nListCnt)
        for(y = 1 to nListCnt)
          set stat_req->controls[y].control_id = qc_templates->default_controls[y].control_id
        endfor
      endif

      if(size(qc_templates->filter_sets[nFScnt].test_sites, 5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].test_sites, 5)
        set stat = alterlist(stat_req->test_sites,nListCnt)
        for(y = 1 to nListCnt)
          set stat_req->test_sites[y].service_resource_cd = qc_templates->filter_sets[nFScnt].test_sites[y].service_resource_cd
        endfor
      elseif (size(qc_templates->default_test_sites, 5) > 0)
        set nListCnt = size(qc_templates->default_test_sites, 5)
        set stat = alterlist(stat_req->test_sites,nListCnt)
        for(y = 1 to nListCnt)
          set stat_req->test_sites[y].service_resource_cd = qc_templates->default_test_sites[y].service_resource_cd
        endfor
      endif

      if(size(qc_templates->filter_sets[nFScnt].procs,5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].procs, 5)
        set stat = alterlist(stat_req->assays,nListCnt)
        for(y = 1 to nListCnt)
          set stat_req->assays[y].task_assay_cd = qc_templates->filter_sets[nFScnt].procs[y].task_assay_cd
        endfor
      elseif (size(qc_templates->default_procs, 5) > 0)
        set nListCnt = size(qc_templates->default_procs, 5)
        set stat = alterlist(stat_req->assays,nListCnt)
        for(y = 1 to nListCnt)
          set stat_req->assays[y].task_assay_cd = qc_templates->default_procs[y].task_assay_cd
        endfor
      endif
      
      if(size(stat_req->controls, 5) = 1 and (size(stat_req->test_sites, 5) = 0 or size(stat_req->test_sites, 5) > 1))
        execute GLB_RPT_X_TEST_SITE_STATS with replace ("REQUEST", "STAT_REQ") 
      else
        execute GLB_RPT_QC_STATS with replace ("REQUEST", "STAT_REQ")      
      endif

    elseif(sReportName = "QRL")
      set bCreateReq = cr_createRequest(0, 257544, "qrl_req")
 
      if (bCreateReq != TRUE)
        set reply->status_data.status = "F"
   	    go to exit_script
      endif
      
      set qrl_req->output_dist          = request->output_dist
      set qrl_req->ops_date             = request->ops_date 
      set qrl_req->begin_date           = qc_templates->beg_dt_tm
      set qrl_req->end_date             = qc_templates->end_dt_tm

      if(qc_templates->filter_sets[nFScnt].qrl.applied_ind = 1)    
        set qrl_req->accept_ind           = qc_templates->filter_sets[nFScnt].qrl.accept_ind
        set qrl_req->verify_ind           = qc_templates->filter_sets[nFScnt].qrl.verify_ind
        set qrl_req->change_ind           = qc_templates->filter_sets[nFScnt].qrl.change_ind
        set qrl_req->oldchange_ind        = qc_templates->filter_sets[nFScnt].qrl.oldchange_ind
        set qrl_req->reject_ind           = qc_templates->filter_sets[nFScnt].qrl.reject_ind
        set qrl_req->discard_ind          = qc_templates->filter_sets[nFScnt].qrl.discard_ind
        set qrl_req->outcontrol_ind       = qc_templates->filter_sets[nFScnt].qrl.outcontrol_ind
      else
        set qrl_req->accept_ind           = qc_templates->default_qrl.accept_ind
        set qrl_req->verify_ind           = qc_templates->default_qrl.verify_ind
        set qrl_req->change_ind           = qc_templates->default_qrl.change_ind
        set qrl_req->oldchange_ind        = qc_templates->default_qrl.oldchange_ind
        set qrl_req->reject_ind           = qc_templates->default_qrl.reject_ind
        set qrl_req->discard_ind          = qc_templates->default_qrl.discard_ind
        set qrl_req->outcontrol_ind       = qc_templates->default_qrl.outcontrol_ind
      endif

      if(size(qc_templates->filter_sets[nFScnt].controls,5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].controls, 5)
        set stat = alterlist(qrl_req->controls,nListCnt)
        for(y = 1 to nListCnt)
          set qrl_req->controls[y].control_id = qc_templates->filter_sets[nFScnt].controls[y].control_id
        endfor
      elseif (size(qc_templates->default_controls, 5) > 0)
        set nListCnt = size(qc_templates->default_controls, 5)
        set stat = alterlist(qrl_req->controls,nListCnt)
        for(y = 1 to nListCnt)
          set qrl_req->controls[y].control_id = qc_templates->default_controls[y].control_id
        endfor
      endif

      if(size(qc_templates->filter_sets[nFScnt].test_sites, 5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].test_sites, 5)
        set stat = alterlist(qrl_req->test_sites,nListCnt)
        for(y = 1 to nListCnt)
          set qrl_req->test_sites[y].service_resource_cd = qc_templates->filter_sets[nFScnt].test_sites[y].service_resource_cd
        endfor
      elseif (size(qc_templates->default_test_sites, 5) > 0)
        set nListCnt = size(qc_templates->default_test_sites, 5)
        set stat = alterlist(qrl_req->test_sites,nListCnt)
        for(y = 1 to nListCnt)
          set qrl_req->test_sites[y].service_resource_cd = qc_templates->default_test_sites[y].service_resource_cd
        endfor
      endif

      if(size(qc_templates->filter_sets[nFScnt].procs,5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].procs, 5)
        set stat = alterlist(qrl_req->assays,nListCnt)
        for(y = 1 to nListCnt)
          set qrl_req->assays[y].task_assay_cd = qc_templates->filter_sets[nFScnt].procs[y].task_assay_cd
        endfor
      elseif (size(qc_templates->default_procs, 5) > 0)
        set nListCnt = size(qc_templates->default_procs, 5)
        set stat = alterlist(qrl_req->assays,nListCnt)
        for(y = 1 to nListCnt)
          set qrl_req->assays[y].task_assay_cd = qc_templates->default_procs[y].task_assay_cd
        endfor
      endif

      if(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 0 and qc_templates->filter_sets[nFScnt].active_lot_ind = 0)
        if(qc_templates->default_preactive_lot_ind = 1 and qc_templates->default_active_lot_ind = 1)
          set qrl_req->lot_type_flag = 0
        elseif(qc_templates->default_preactive_lot_ind = 1 and qc_templates->default_active_lot_ind = 0)
          set qrl_req->lot_type_flag = 1
        elseif(qc_templates->default_preactive_lot_ind = 0 and qc_templates->default_active_lot_ind = 1)
          set qrl_req->lot_type_flag = 2
        endif
      else
        if(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 1 and qc_templates->filter_sets[nFScnt].active_lot_ind = 1)
          set qrl_req->lot_type_flag = 0
        elseif(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 1 and qc_templates->filter_sets[nFScnt].active_lot_ind = 0)
          set qrl_req->lot_type_flag = 1
        elseif(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 0 and qc_templates->filter_sets[nFScnt].active_lot_ind = 1)
          set qrl_req->lot_type_flag = 2
        endif
      endif

call echorecord(qrl_req)
      execute GLB_RPT_QC_RESULTS with replace ("REQUEST", "QRL_REQ")     
    
    elseif(sReportName = "QCBENCHMARK")
      set bCreateReq = cr_createRequest(0, 257594, "qc_benchmark")
 
      if (bCreateReq != TRUE)
        set reply->status_data.status = "F"
   	    go to exit_script
      endif
      
      set qc_benchmark->output_dist          = request->output_dist
      set qc_benchmark->begin_dt_tm          = qc_templates->beg_dt_tm
      set qc_benchmark->end_dt_tm            = qc_templates->end_dt_tm

      if(size(qc_templates->filter_sets[nFScnt].controls,5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].controls, 5)
        set stat = alterlist(qc_benchmark->controls,nListCnt)
        for(y = 1 to nListCnt)
          set qc_benchmark->controls[y].control_id = qc_templates->filter_sets[nFScnt].controls[y].control_id
        endfor
      elseif (size(qc_templates->default_controls, 5) > 0)
        set nListCnt = size(qc_templates->default_controls, 5)
        set stat = alterlist(qc_benchmark->controls,nListCnt)
        for(y = 1 to nListCnt)
          set qc_benchmark->controls[y].control_id = qc_templates->default_controls[y].control_id
        endfor
      endif

      if(size(qc_templates->filter_sets[nFScnt].test_sites, 5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].test_sites, 5)
        set stat = alterlist(qc_benchmark->test_sites,nListCnt)
        for(y = 1 to nListCnt)
          set qc_benchmark->test_sites[y].service_resource_cd = qc_templates->filter_sets[nFScnt].test_sites[y].service_resource_cd
        endfor
      elseif (size(qc_templates->default_test_sites, 5) > 0)
        set nListCnt = size(qc_templates->default_test_sites, 5)
        set stat = alterlist(qc_benchmark->test_sites,nListCnt)
        for(y = 1 to nListCnt)
          set qc_benchmark->test_sites[y].service_resource_cd = qc_templates->default_test_sites[y].service_resource_cd
        endfor
      endif

      if(size(qc_templates->filter_sets[nFScnt].procs,5) > 0)
        set nListCnt = size(qc_templates->filter_sets[nFScnt].procs, 5)
        set stat = alterlist(qc_benchmark->assays,nListCnt)
        for(y = 1 to nListCnt)
          set qc_benchmark->assays[y].task_assay_cd = qc_templates->filter_sets[nFScnt].procs[y].task_assay_cd
        endfor
      elseif (size(qc_templates->default_procs, 5) > 0)
        set nListCnt = size(qc_templates->default_procs, 5)
        set stat = alterlist(qc_benchmark->assays,nListCnt)
        for(y = 1 to nListCnt)
          set qc_benchmark->assays[y].task_assay_cd = qc_templates->default_procs[y].task_assay_cd
        endfor
      endif
      if(qc_templates->filter_sets[nFScnt].qcbenchmark_rpt.applied_ind = 1)
        set qc_benchmark->series_sequence_nbr = qc_templates->filter_sets[nFScnt].qcbenchmark_rpt.series_sequence_nbr 
        set qc_benchmark->series_interval_nbr = qc_templates->filter_sets[nFScnt].qcbenchmark_rpt.series_interval_nbr 
        set qc_benchmark->save_statistics_ind = qc_templates->filter_sets[nFScnt].qcbenchmark_rpt.save_statistics_ind 
      else
        set qc_benchmark->series_sequence_nbr = qc_templates->default_qcbenchmark_rpt->series_sequence_nbr 
        set qc_benchmark->series_interval_nbr = qc_templates->default_qcbenchmark_rpt->series_interval_nbr 
        set qc_benchmark->save_statistics_ind = qc_templates->default_qcbenchmark_rpt->save_statistics_ind 
      endif

      if(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 0 and qc_templates->filter_sets[nFScnt].active_lot_ind = 0)
        if(qc_templates->default_preactive_lot_ind = 1 and qc_templates->default_active_lot_ind = 1)
          set qc_benchmark->lot_type_flag = 0
        elseif(qc_templates->default_preactive_lot_ind = 1 and qc_templates->default_active_lot_ind = 0)
          set qc_benchmark->lot_type_flag = 1
        elseif(qc_templates->default_preactive_lot_ind = 0 and qc_templates->default_active_lot_ind = 1)
          set qc_benchmark->lot_type_flag = 2
        endif
      else
        if(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 1 and qc_templates->filter_sets[nFScnt].active_lot_ind = 1)
          set qc_benchmark->lot_type_flag = 0
        elseif(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 1 and qc_templates->filter_sets[nFScnt].active_lot_ind = 0)
          set qc_benchmark->lot_type_flag = 1
        elseif(qc_templates->filter_sets[nFScnt].preactive_lot_ind = 0 and qc_templates->filter_sets[nFScnt].active_lot_ind = 1)
          set qc_benchmark->lot_type_flag = 2
        endif
      endif

call echorecord(qc_benchmark)

      execute GLB_RPT_QC_BENCHMARK with replace ("REQUEST", "QC_BENCHMARK")
    endif
  endfor

/***********************************************************************
 *   exit_script                                                       *
 ***********************************************************************/
#exit_script
 
end go

;Generated by GNU enscript 1.6.4.
