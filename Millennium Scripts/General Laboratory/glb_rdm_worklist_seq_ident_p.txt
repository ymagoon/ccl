 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_worklist_seq_ident/glb_rdm_worklist_seq_ident_p.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-2005 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:   glb_rdm_worklist_seq_ident_p.prg
        Object name:        glb_rdm_worklist_seq_ident_p
        Request #:          N/A
 
        Product:            PathNet General Laboratory
        Product Team:       Data Access Review
        HNA Version:        GLB
        CCL Version:        8.0
 
        Program purpose:    This program will  populate the new sequence identifer
	                        columns (i.e. seq_ident_ind, seq_ident_start_nbr, seq_
	                        ident_beg_range, seq_ident_end_range) on the Worklist table.
       
        Tables read:        DM_INFO
 
        Tables updated:     DM_INFO
 
        Executing from:   
 
        Special Notes:      This is a readme

        Legend:             Variables should be prefixed with scope and type,
                            followed by an underscore and deobjective variable name.

                            Variable Scope Abbreviations    Variable Type Abbreviations
                            p - private                     n - i2
                            m - protect                     l - i2
                            g - public                      f - f8
                            u - persistobject               d - dq8
                                                            s - vc
                                                            c - c

                            Examples:
                            pn_status_ind = private, i2
                            gf_number     = public, f8

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *001 02/21/07 Paul Lessin          Initial Release                     *
;                                                                           *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program   glb_rdm_worklist_seq_ident_p:dba  go
create program glb_rdm_worklist_seq_ident_p:dba 
 
%i cclsource:dm_readme_data.inc

;set default status
set readme_data->status = 'F'
set readme_data->message = concat('FAILED STARTING README ', cnvtstring( readme_data->readme_id,32,2))

;declare the variables
declare mf_min_range_id        = f8 with protect, noconstant(0.0)
declare mf_max_range_id        = f8 with protect, noconstant(0.0)
declare ms_info_domain_nm      = vc with protect, noconstant("")
declare mf_cur_min_id          = f8 with protect, noconstant(0.0)
declare mf_cur_max_id          = f8 with protect, noconstant(0.0)
declare mf_range_id_increment  = f8 with protect, noconstant(0.0)
declare mn_child_failed        = i2 with protect, noconstant(0)
declare mn_rollback_seg_failed = i2 with protect, noconstant(0)
declare ms_status              = vc with protect, noconstant("")
declare ms_max_name            = vc with protect, noconstant("")

declare sbr_dm2_rdm_resume_on_chk(pn_null = i2) = NULL
declare sbr_dm2_rdm_resume_off_chk(pn_null = i2) = NULL

;set the default variables
set ms_info_domain_nm = "PATHNET GLB README WRKSEQ"
set ms_max_name = "GLB_RDM_WORKLIST_SEQ_IDENT"

;declare record structure
free set string_struct
record string_struct
(
  1 ms_err_msg = vc
 
)

select into "nl:"
from dm_ocd_log dol
plan dol
where dol.project_type   = "README"
and dol.project_name   = cnvtstring(readme_data->readme_id,19,0)
and dol.project_instance = readme_data->instance
and dol.status         = "SUCCESS"
and dol.environment_id = (select di.info_number
                          from dm_info di
                          where di.info_domain = "DATA MANAGEMENT"
                          and di.info_name   = "DM_ENV_ID")
with nocounter

;if there are any errors exit out
if ( error(string_struct->ms_err_msg, 0) != 0)
  set readme_data->status = 'F'
  set readme_data->message = concat('Error checking previous readme version on the dm_ocd_log table:', string_struct->ms_err_msg)
  go to EXIT_PROGRAM
endif

if (curqual = 0)
  delete from dm_info
  where info_domain = ms_info_domain_nm
  with nocounter
  
  ;if there are any errors exit out
  if ( error(string_struct->ms_err_msg, 0) != 0)
    set readme_data->status = 'F'
    set readme_data->message = concat('Error deleting from dm_info table:', string_struct->ms_err_msg)
    go to EXIT_PROGRAM
  endif
endif

;always start the minimum at 1
set mf_min_range_id = 1.0

select into "nl:" 
 from  dm_info di
where  di.info_domain = ms_info_domain_nm
  and  di.info_name   = concat(ms_max_name, " ", cnvtstring(readme_data->readme_id,19,0))
detail
  ms_status = di.info_char
  mf_min_range_id = di.info_number
 with  nocounter
 
 
call echo("****************")
call echo(ms_info_domain_nm)
call echo(concat(ms_max_name, " ", cnvtstring(readme_data->readme_id,32,2)))

;if there are any errors exit out
if ( error(string_struct->ms_err_msg, 0) != 0)
  set readme_data->status = 'F'
  set readme_data->message = concat('Error checking dm_info table to determine past success:', string_struct->ms_err_msg)
  go to EXIT_PROGRAM
endif

if (curqual > 0 and ms_status = "SUCCESS")
  set readme_data->status = 'S'
  set readme_data->message = 'Readme previously ran successfully'
  go to EXIT_PROGRAM
elseif (curqual = 0)
  insert into dm_info
  set info_domain = ms_info_domain_nm,
      info_name   = concat(ms_max_name, " ", cnvtstring(readme_data->readme_id,19,0))
  with nocounter
endif

;set the increment range
set mf_range_id_increment = 250000

;this select finds the maximum id that will be broken into 3 seperate values.  
select into "nl:"
  max_val = max(w.worklist_id)
from
  worklist w
detail
  mf_max_range_id = cnvtreal(max_val)
with nocounter

;if there are any errors exit out
if ( error(string_struct->ms_err_msg, 0) != 0)
  set readme_data->status = 'F'
  set readme_data->message = concat('Error selecting from driver table to determine max id:', string_struct->ms_err_msg)
  go to EXIT_PROGRAM
endif

set mf_cur_min_id = mf_min_range_id
set mf_cur_max_id = mf_cur_min_id + mf_range_id_increment - 1

;turn on oracle resumable funtionality
call sbr_dm2_rdm_resume_on_chk(0)
while(mf_cur_min_id <= mf_max_range_id)
 
  if(mf_cur_max_id > mf_max_range_id)
    set mf_cur_max_id = mf_max_range_id
  endif

  execute  glb_rdm_worklist_seq_ident_c value(mf_cur_min_id), value(mf_cur_max_id)
  
  ;if the child had an error exit the program
  if( mn_child_failed = 1)
    call sbr_dm2_rdm_resume_off_chk(0)
    go to EXIT_PROGRAM
  endif

  ;if this flag is true we had a rollback issue
  ;if we are able, lower the update size
  if( mn_rollback_seg_failed = 1)
    if( mf_range_id_increment > 2000) 
      set mf_range_id_increment = ceil( mf_range_id_increment/2)
    elseif( mf_range_id_increment > 1000)
      set mf_range_id_increment = 1000
    else
      ;TOO MANY ROLLBACK SEGMENT FAILURES...FAIL README!
      set readme_data->status = 'F'
      set readme_data->message = concat('Encountered rollback segment failure; Could not recover...',readme_data->message)
      call sbr_dm2_rdm_resume_off_chk(0)
      go to EXIT_PROGRAM      
    endif
    
    ;if we make it here, adjust the new numbers to attempt 
    set mf_cur_max_id = mf_cur_min_id + mf_range_id_increment - 1
    set mn_rollback_seg_failed = 0
    
  else
    ;else everything worked fine.  Adjust our new range to look at
    ;and run the child script again
    set mf_cur_min_id = mf_cur_max_id + 1
    set mf_cur_max_id = mf_cur_min_id + mf_range_id_increment -1
  endif
endwhile 
call sbr_dm2_rdm_resume_off_chk(0)

;if we made it here with no errors be sure to set the readme to successful
if (readme_data->script != 'S')
  set readme_data->status = 'S'
  set readme_data->message = 'Readme successfully completed'
endif

;===============================================================
; sbr_dm2_rdm_resume_on_chk
;
; Turns on oracle resume logic.  Oracle resume logic
; allows a script to pause, allocate more space, 
; then continue where is left off
; 
; Return: NULL
;
; Parameter definitions (Input):
; -None

subroutine sbr_dm2_rdm_resume_on_chk(pn_null)
  if (checkprg("DM2_RDM_RESUME_ON") > 0)
    execute dm2_rdm_resume_on
  endif
end

;===============================================================
; sbr_dm2_rdm_resume_off_chk
;
; Turns off oracle resume logic.  Oracle resume logic
; allows a script to pause, allocate more space, 
; then continue where is left off
; 
; Return: NULL
;
; Parameter definitions (Input):
; -None

subroutine sbr_dm2_rdm_resume_off_chk(pn_null)
  if (checkprg("DM2_RDM_RESUME_OFF") > 0)
    execute dm2_rdm_resume_off
  endif
end

#EXIT_PROGRAM


;if the readme failed, rollback
if (readme_data->status = 'F')
  rollback
else
  update into dm_info
  set info_char = "SUCCESS"
  where info_domain = ms_info_domain_nm 
  commit
endif

if(readme_data->readme_id > 0)
  execute dm_readme_status
else
  call echorecord(readme_data)
endif

end
go



;Generated by GNU enscript 1.6.4.
