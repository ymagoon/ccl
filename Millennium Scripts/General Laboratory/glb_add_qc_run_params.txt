 ;;Solution_Test/script/PathNet -- Gen Lab/glb_add_qc_run_params/glb_add_qc_run_params.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_ADD_QC_RUN_PARAMS.PRG
        Object name:            GLB_ADD_QC_RUN_PARAMS
        Request #:              257550

        Product:                General Lab - Quality Control           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Add QC Run parameters for a given service_resource

        Tables read:            n/a

        Tables updated:         run_setup
                                run_ctrl

        Executing from:         General Lab QC Maintenance

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 04/01/97 Chad Moats           Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_ADD_QC_RUN_PARAMS:dba go    
      create program GLB_ADD_QC_RUN_PARAMS:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                                       
         1 service_resource_cd     = f8
         1 qual[*]
           2 cycle_setup_id          = f8
           2 task_assay_cd           = f8
           2 nbr_exp_min             = i4
           2 nbr_pat_accn            = i4
           2 active_ind              = i2
           2 start_in_out_flag       = i2
           2 steps[*]
             3 step_nbr                = i4
             3 interval_min            = i4
             3 interval_accn           = i4
             3 acc_step_nbr            = i4
             3 rej_step_nbr            = i4
             3 beg_new_run_ind         = i2
             3 rerun_flag              = i2
             3 cntrls[*]
	       4 cntrl_cnt	       = i2
               4 sequence              = i4
               4 control_id            = f8
           2 req_qcs[*]
             3 sequence                = i4
             3 control_id              = f8
      ) 
*/

/* record reqinfo
( 1 commit_ind  = i2
  1 updt_id     = f8
  1 position_cd = f8
  1 updt_app    = i4
  1 updt_task   = i4
  1 updt_req    = i4
  1 updt_applctx= i4
)
*/
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      ( 
         1 status_data
           2 status                = c1
           2 subeventstatus[1]
             3 OperationName       = c15
             3 OperationStatus     = c1
             3 TargetObjectName    = c15
             3 TargetObjectValue   = vc
      )

     #Script
      set failed = "F"
      set reply->status_data->status = "F"
      set action_flag = 0
      set q_cnt = size(request->qual,5)
      set cycle_cnt = 0
      set cnt = 0
      set cnt2 = 0
      set tempindex = 0
      set new_flag = 0
      set temp_cnt = 0

/*******************************************************************/
/* Get Sequence numbers                                            */
/*******************************************************************/

    for (cnt = 1 to q_cnt)
      set cntrl_max = 0
      set cst_cnt = size(request->qual[cnt]->steps,5)
      for (cnt2 = 1 to cst_cnt)
	if (size(request->qual[cnt]->steps[cnt2]->cntrls,5) > cntrl_max)
	  set cntrl_max = size(request->qual[cnt]->steps[cnt2]->cntrls,5)
        endif
      endfor

      if (request->qual[cnt].cycle_setup_id = 0)
        SELECT 
          into "nl:"
            y = seq(reference_seq,nextval) "##################;rp0"
        FROM 
          dual
        DETAIL
          request->qual[cnt]->cycle_setup_id = cnvtreal(y)
        WITH
          format, counter

        if (curqual = 0)
          go to seq_failed
        endif

/*******************************************************************/
/* Insert into Run_Setup table                                     */
/*******************************************************************/


      INSERT
        into cycle_setup cs 
      SET
        cs.cycle_setup_id       = request->qual[cnt]->cycle_setup_id,
        cs.service_resource_cd  = request->service_resource_cd,
        cs.task_assay_cd        = request->qual[cnt].task_assay_cd,
        cs.nbr_exp_min          = request->qual[cnt].nbr_exp_min,
        cs.nbr_pat_accn         = request->qual[cnt].nbr_pat_accn,
        cs.start_in_out_flag    = request->qual[cnt].start_in_out_flag,
        cs.beg_effective_dt_tm  = cnvtdatetime(curdate, curtime3),
        cs.end_effective_dt_tm  = cnvtdatetime("31 DEC 2100 00:00"),
        cs.active_ind           = request->qual[cnt].active_ind,
        cs.updt_dt_tm           = cnvtdatetime(curdate, curtime3),
        cs.updt_id              = reqinfo->updt_id,
        cs.updt_task            = reqinfo->updt_task,
        cs.updt_cnt             = 1,
        cs.updt_applctx         = reqinfo->updt_applctx
      WITH nocounter

/*******************************************************************/
/* Insert into Cycle_Step table                                    */
/*******************************************************************/

      INSERT
        into cycle_step cst,
           (dummyt d1 with seq = value(cst_cnt))
      SET
        cst.cycle_setup_id        = request->qual[cnt]->cycle_setup_id,
        cst.step_nbr              = request->qual[cnt]->steps[d1.seq].step_nbr,
        cst.interval_min          = request->qual[cnt]->steps[d1.seq].interval_min,
        cst.interval_accn         = request->qual[cnt]->steps[d1.seq].interval_accn,
        cst.acc_step_nbr          = request->qual[cnt]->steps[d1.seq].acc_step_nbr,
        cst.rej_step_nbr          = request->qual[cnt]->steps[d1.seq].rej_step_nbr,
        cst.beg_new_run_ind       = request->qual[cnt]->steps[d1.seq].beg_new_run_ind,
        cst.rerun_flag            = request->qual[cnt]->steps[d1.seq].rerun_flag,
        cst.updt_dt_tm            = cnvtdatetime(curdate, curtime3),
        cst.updt_id               = reqinfo->updt_id,
        cst.updt_task             = reqinfo->updt_task,
        cst.updt_cnt              = 1,
        cst.updt_applctx          = reqinfo->updt_applctx
      PLAN d1
      JOIN cst	
        where cst.step_nbr = d1.seq
     WITH
         nocounter,
         outerjoin = d1,
         dontexist

/*******************************************************************/
/* Insert into Cycle_Ctrl table                                    */
/*******************************************************************/

      INSERT
        into cycle_ctrl cc,
           (dummyt d1 with seq = value(cst_cnt)),
           (dummyt d2 with seq = value(cntrl_max))
      SET
        cc.cycle_setup_id        = request->qual[cnt]->cycle_setup_id,
        cc.step_nbr              = request->qual[cnt]->steps[d1.seq].step_nbr,
        cc.sequence              = request->qual[cnt]->steps[d1.seq]->cntrls[d2.seq].sequence,
        cc.control_id            = request->qual[cnt]->steps[d1.seq]->cntrls[d2.seq].control_id,
        cc.updt_dt_tm            = cnvtdatetime(curdate, curtime3),
        cc.updt_id               = reqinfo->updt_id,
        cc.updt_task             = reqinfo->updt_task,
        cc.updt_cnt              = 1,
        cc.updt_applctx          = reqinfo->updt_applctx
      PLAN d1
      JOIN d2
        where request->qual[cnt]->steps[d1.seq]->cntrls[d2.seq].sequence = d2.seq
      JOIN cc
        where cc.sequence = request->qual[cnt]->steps[d1.seq]->cntrls[d2.seq].sequence
     WITH
         nocounter,
         outerjoin = d1,
	 outerjoin = d2
;         dontexist
        
   
      endif
    endfor
   

      go to exit_script

/********************************************************************/ 
/*  Sequence Failed                                                 */
/********************************************************************/
     #seq_failed
      set reply->status_data->subeventstatus[1]->operationname = 
         "sequence"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "F"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "sequence"
      set failed = "T"

      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
         commit
      else
         rollback
      endif

END
GO     
      

;Generated by GNU enscript 1.6.4.
