 ;;Solution_Test/script/PathNet -- Gen Lab/glb_build_av_req/glb_build_av_req.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:       GLB_BUILD_AV_REQ.PRG
        Object name:            GLB_BUILD_AV_REQ
        Request #:              250231
 
        Product:                General Lab
        Product Team:           General Lab
        HNA Version:            500
        CCL Version:            8.2.5
 
        Program purpose:        Accepts the request from the glb result server
                                and formats it into a usable format to be used
                                for the modular type instruments.
 
        Tables read:            None
 
        Tables updated:         None
 
        Executing from:         GLB RESULT SERVER
 
        Special Notes:          None
 
*****************************************************************************/
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 05/06/05 David Fifer          Initial Release                     *
;~DE~************************************************************************
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program glb_build_av_req go
create program glb_build_av_req
 
/*****************************************************************************
 *                               Request Record                              *
 *****************************************************************************/
 
/*
 record request
 (
   1 use_req_dt_tm_ind				= i2
   1 event_dt_tm					= dq8
   1 event_personnel_id				= f8
   1 app_mode_ind					= i2
   1 orders[*]
     2 complete_ind					= i2
     2 cs_order_id					= f8
     2 order_id						= f8
     2 restrict_av_ind				= i4
     2 updt_cnt						= i4
     2 catalog_cd					= f8
     2 catalog_type_cd				= f8
     2 person_id					= f8
     2 encntr_id					= f8
     2 accession_id					= f8
     2 accession					= c20
     2 review_required_ind			= i2
     2 pending_review_ind			= i2
     2 activity_type_mean			= c12
     2 do_not_chart_ind				= i2
     2 accn_av_ind					= i2
     2 ord_dr_id					= f8
     2 pat_location_cd				= f8
     2 organization_id				= f8
     2 rpt_priority_cd				= f8
     2 encounter_type_cd			= f8
     2 assays_cnt					= i4
     2 assays[*]
       3 task_assay_cd				= f8
       3 event_cd					= f8
       3 units_cd					= f8
       3 result_id					= f8
       3 container_id				= f8
       3 in_lab_dt_tm				= dq8
       3 drawn_dt_tm				= dq8
       3 service_resource_cd		= f8
       3 interface_flag				= i2
       3 interface_av_ind			= i2
       3 upld_assay_alias			= c25
       3 perform_result_id			= f8
       3 repeat_ind					= i2
       3 repeat_nbr					= i4
       3 perform_personnel_id 		= f8
       3 perform_dt_tm				= dq8
       3 perform_ind				= i2
       3 result_status_cd			= f8
       3 result_status_disp			= vc
       3 result_type_cd				= f8
       3 nomenclature_id			= f8
       3 result_value_numeric		= f8
       3 max_digits					= i4
       3 min_decimal_places			= i4
       3 min_digits					= i4
       3 numeric_raw_value			= f8
       3 less_great_flag			= i2
       3 result_value_alpha			= vc
       3 result_value_dt_tm			= dq8
       3 rtf_text					= vc
       3 ascii_text					= vc
       3 normal_cd					= f8
       3 critical_cd				= f8
       3 review_cd					= f8
       3 linear_cd					= f8
       3 feasible_cd				= f8
       3 delta_cd					= f8
       3 normal_range_flag			= i2
       3 normal_low					= f8
       3 normal_high				= f8
       3 normal_alpha				= vc
       3 critical_range_flag		= i2
       3 critical_low				= f8
       3 critical_high				= f8
       3 signature_line_ind			= i2
       3 call_back_ind				= i2
       3 chartable_flag				= i2
       3 security_level_cd			= f8
       3 repeat_number				= i4
       3 reference_range_factor_id	= f8
       3 advanced_delta_id			= f8
       3 dilution_factor			= f8
       3 av_error_cd				= f8
       3 resource_error_codes		= vc
       3 capture_file				= vc
       3 equation_id 				= f8
       3 multiplex_resource_cd		= f8
       3 result_updt_cnt			= i4
       3 perform_result_updt_cnt	= i4
       3 result_key					= f8
       3 perform_result_key			= f8
       3 components_cnt				= i4
         4 components[*]
         4 included_assay_cd		= f8
         4 result_type_cd			= f8
         4 used_order_id			= f8
         4 used_perform_result_id	= f8
       3 result_comment_cnt			= i4
       3 result_comment[*]
         4 comment_type_cd			= f8
         4 comment_text				= vc
         4 comment_prsnl_id			= f8
         4 comment_id				= f8
       3 auto_verify_code_cnt		= i4
       3 auto_verify_codes[*]
         4 auto_verify_cd			= f8
       3 bb_result_code_set_cd		= f8
   1 manual_route_hierarchy_id		= f8
   1 review_queue_ind				= i2
   1 review_items[*]
     2 process_flag					= i4
     2 review_id					= f8
     2 parent_entity_name			= vc
     2 parent_entity_id				= f8
     2 order_id						= f8
     2 review_status_cd				= f8
     2 updt_cnt						= i4
     2 updt_id						= f8
     2 queue_assignments[*]
       3 queue_review_id			= f8
       3 queue_id					= f8
       3 review_id					= f8
       3 order_id					= f8
       3 review_level_seq			= i4
       3 review_type_cd				= f8
       3 review_status_cd			= f8
       3 return_to_sender_ind		= i2
       3 from_queue_review_id		= f8
       3 from_prsnl_id				= f8
       3 updt_cnt					= i4
     2 review_history[*]
       3 review_history_id			= f8
       3 queue_review_id			= f8
       3 review_status_cd			= f8
       3 prsnl_id					= f8
       3 active_ind					= i2
 )
*/
 
/*****************************************************************************
 *                               Reply Record                                *
 *****************************************************************************/
 
 record reply
 (
   1 resources[*]
     2 service_resource_cd	= f8
     2 orders[*]
        3 order_id			= f8
        3 order_idx			= i4 ; zero based index.
        3 assays[*]
           4 task_assay_cd	= f8
           4 assay_idx		= i4 ; zero based index.
%I CCLSOURCE:STATUS_BLOCK.INC
 )
 
 record flat_request
 (
   1 qual[*]
     2 order_id					= f8
     2 order_idx				= i4
     2 assay_cnt				= i4
     2 assays[*]
     	3 task_assay_cd			= f8
     	3 service_resource_cd	= f8
     	3 assay_idx				= i4
 )
 
 ;Include i18n function declarations.
%i cclsource:i18n_uar.inc
 
/*****************************************************************************
 *                           Initialize Variables                            *
 *****************************************************************************/
 
 declare sName = vc with protect, noconstant("")
 declare nFailed = i2 with protect, noconstant(0)
 declare nCount1 = i4 with protect, noconstant(0)
 declare nCount2 = i4 with protect, noconstant(0)
 declare i18nHandle = i4 with protect, noconstant(0)
 declare nServResCnt = i4 with protect, noconstant(0)
 declare nOrdListCnt = i4 with protect, noconstant(0)
 declare nOrderIdCnt = i4 with protect, noconstant(0)
 declare nMaxAssayCnt = i4 with protect, noconstant(0) 
 declare sObjectName = vc with protect, noconstant("")
 declare sObjectValue = vc with protect, noconstant("")
 declare nAssayListCnt = i4 with protect, noconstant(0)
 declare nTaskAssayCnt = i4 with protect, noconstant(0)
 
/*****************************************************************************/
 
 ;Call the uar_i18nlocalizationinit function.
 set hStatus = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)
 
 set reply->status_data->status = "F"
 set nOrdListCnt = size(request->orders, 5)
 set sName = uar_i18ngetmessage(i18nHandle, "Operation Name", "script")
 set sObjectName = uar_i18ngetmessage(i18nHandle, "ObjectName", "glb_build_av_req")
 set sObjectValue = uar_i18ngetmessage(i18nHandle, "ObjectValue", "The request order list is empty.")
 
 if (nOrdListCnt = 0)
 	set nFailed = 1
 	go to exit_script
 else
 	set stat = alterlist(flat_request->qual, nOrdListCnt)
 
    for (nCount1 = 1 to nOrdListCnt)
    	set flat_request->qual[nCount1].order_id = request->orders[nCount1].order_id
        set flat_request->qual[nCount1].order_idx = nCount1 - 1
  		set stat = alterlist(flat_request->qual[nCount1]->assays, size(request->orders[nCount1]->assays, 5))
  		set nAssayListCnt = size(request->orders[nCount1]->assays, 5)
        set flat_request->qual[nCount1].assay_cnt = nAssayListCnt
 
        for (nCount2 = 1 to nAssayListCnt)
            set flat_request->qual[nCount1]->assays[nCount2].task_assay_cd =
            	request->orders[nCount1]->assays[nCount2].task_assay_cd
            set flat_request->qual[nCount1]->assays[nCount2].service_resource_cd =
            	request->orders[nCount1]->assays[nCount2].service_resource_cd
            set flat_request->qual[nCount1]->assays[nCount2].assay_idx = nCount2 - 1
       endfor
       if (nMaxAssayCnt < nAssayListCnt)
          set nMaxAssayCnt = nAssayListCnt
       endif
    endfor
 endif
 
 select dServiceResourceCd = flat_request->qual[d1.seq]->assays[d2.seq].service_resource_cd,
		dOrderId = flat_request->qual[d1.seq].order_id,
		dTaskAssayCd = flat_request->qual[d1.seq]->assays[d2.seq].task_assay_cd
 
 from (dummyt d1 with seq = size(flat_request->qual, 5)),
      (dummyt d2 with seq = nMaxAssayCnt)
 
 plan d1 where maxrec(d2, size(flat_request->qual[d1.seq].assays, 5))
 join d2
 
 order dServiceResourceCd, dOrderId, dTaskAssayCd
 
 head dServiceResourceCd
      nServResCnt = nServResCnt + 1
      stat = alterlist(reply->resources, nServResCnt)
      reply->resources[nServResCnt].service_resource_cd = flat_request->qual[d1.seq]->assays[d2.seq].service_resource_cd
      nOrderIdCnt = 0
 
 head dOrderId
      nOrderIdCnt = nOrderIdCnt + 1
      stat = alterlist(reply->resources[nServResCnt].orders, nOrderIdCnt)
      reply->resources[nServResCnt].orders[nOrderIdCnt].order_id = flat_request->qual[d1.seq].order_id
      reply->resources[nServResCnt].orders[nOrderIdCnt].order_idx = flat_request->qual[d1.seq].order_idx
      nTaskAssayCnt = 0
 
 head dTaskAssayCd
      nTaskAssayCnt = nTaskAssayCnt + 1
      stat = alterlist(reply->resources[nServResCnt].orders[nOrderIdCnt].assays, nTaskAssayCnt)
      reply->resources[nServResCnt].orders[nOrderIdCnt].assays[nTaskAssayCnt].task_assay_cd =
                                                        flat_request->qual[d1.seq]->assays[d2.seq].task_assay_cd
      reply->resources[nServResCnt].orders[nOrderIdCnt].assays[nTaskAssayCnt].assay_idx =
                                                        flat_request->qual[d1.seq]->assays[d2.seq].assay_idx
 with nocounter
 
/******************************************************************************
 *                                 Exit Script                                *
 ******************************************************************************/
 
#exit_script
 
 if (nFailed > 0)
 	set reply->status_data->subeventstatus[1]->OperationName = sName
 	set reply->status_data->subeventstatus[1]->OperationStatus = "F"
 	set reply->status_data->subeventstatus[1]->TargetObjectName = sObjectName
 	set reply->status_data->subeventstatus[1]->TargetObjectValue = sObjectValue
 else
    set reply->status_data->status = "S"
 endif
 
end go

;Generated by GNU enscript 1.6.4.
