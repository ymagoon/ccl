 ;;Solution_Test/script/PathNet -- Gen Lab/glb_solcap_bre_calcs/glb_solcap_bre_calcs.prg Turn on black mode

/*~BB~*******************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-2013 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 *~BE~*******************************************************************/
/************************************************************************
        Source file name:       GLB_SOLCAP_BRE_CALCS
        Object name:            GLB_SOLCAP_BRE_CALCS
        Request #:              None

        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            8.8.3

        Program purpose:        Tracks capability 2012.1.00150.3
        
        Tables read:            RESULT_EVENT
                                PERFORM_RESULT
                                SERVICE_RESOURCE
                                LOCATION
                                
        Tables updated:         None

        Executing from:         Lights On Network Capability Collector

        Special Notes:

******************************************************************************/
/*****************************************************************************
 **                                                                          *
 **Mod Date     Dev       Engineer             Comment                       *
 **--- -------- ------- -------------------- --------------------------------*
 **000 02/28/13         Hal Patchen          Initial release                 *
 *****************************************************************************
 *************************  END OF ALL MODCONTROL BLOCKS  ********************/

drop program GLB_SOLCAP_BRE_CALCS:dba go
create program GLB_SOLCAP_BRE_CALCS:dba
  
/*
free record request
record request
(
	1 start_dt_tm = dq8            ; Beginning of the time range to check for
	                               ; capability use.
	1 end_dt_tm = dq8              ; End of the range.
)
 
set request->start_dt_tm = cnvtdatetime(curdate-1, 000000)
set request->end_dt_tm = cnvtdatetime(curdate, 235959)
 
free record reply

if (not validate(reply ,0))
record reply
(
	1 solcap[*]                    ; One for each capability returned by the
	                               ; script
 
		2 identifier = vc          ; Required - capability identifier from PMO.
 
		2 degree_of_use_num = i4   ; At least one of the degree_of_uses must be
		2 degree_of_use_str = vc   ; filled out with a value measuring whether
		                           ; the capability is being used.
 
		2 distinct_user_count = i4 ; Optional - number of distinct users of the
		                           ; capability.
 
		2 position[*]              ; Optional - breakdown of capability use by
		                           ; position
			3 display = vc         ; Display name of the position
 
			3 value_num = i4       ; At least one of the values must be filled
			3 value_str = vc       ; out with the use by that position.
 
		2 facility[*]              ; Optional - breakdown of capability use by
		                           ; facility
			3 display = vc         ; Display name of the facility
 
			3 value_num = i4       ; At least one of the values must be filled
			3 value_str = vc       ; out with the use by that facility.
 
		2 other[*]                 ; Optional - breakdown of use by some other
		                           ; category; multiple "other" breakdowns are
		                           ; allowed
 
			3 category_name = vc   ; The type of breakdown performed.
			3 value[*]
				4 display = vc     ; Display name of the category
				4 value_num = i4   ; Degree of use by that category
				4 value_str = vc
)
endif
*/

declare lSRCnt              = i4 with protect, noconstant(0)
declare lFacilityCdCnt      = i4 with protect, noconstant(0)
declare lResultCnt          = i4 with protect, noconstant(0)
declare lIdx                = i4 with protect, noconstant(0)
declare lStat               = i4 with protect, noconstant(0)
declare lValidFacilityCdCnt = i4 with protect, noconstant(0)
declare sFacilityDisplay    = vc with protect, noconstant("")
  

declare nBRE_APP_MODE       = i2 with protect, constant(6)
declare dPERFORMED_CD       = f8 with protect, constant(uar_get_code_by("MEANING", 1901, "PERFORMED"))
declare dVERIFIED_CD        = f8 with protect, constant(uar_get_code_by("MEANING", 1901, "VERIFIED"))
declare dINREVIEW_CD        = f8 with protect, constant(uar_get_code_by("MEANING", 1901, "INREVIEW"))
declare dOLDPERFORMED_CD    = f8 with protect, constant(uar_get_code_by("MEANING", 1901, "OLDPERFORMED"))
declare dOLDVERIFIED_CD     = f8 with protect, constant(uar_get_code_by("MEANING", 1901, "OLDVERIFIED"))
declare dOLDINREVIEW_CD     = f8 with protect, constant(uar_get_code_by("MEANING", 1901, "OLDINREVIEW"))
declare dCALCULATION_CD     = f8 with protect, constant(uar_get_code_by("MEANING", 289, "8"))
declare dFACILITY_TYPE_CD   = f8 with protect, constant(uar_get_code_by("MEANING", 222, "FACILITY"))

free record service_resources_rec
record service_resources_rec
(
  1 service_resources[*]
    2 service_resource_cd   = f8
    2 result_count          = i4
)

free record facility_codes_rec
record facility_codes_rec
(
  1 facility_codes[*]
    2 facility_cd           = f8
    2 result_count          = i4
)

set lStat = alterlist(reply->solcap, 1)
set reply->solcap[1].identifier = "2012.1.00150.3"
  
select into "nl:"
  re.result_id
 ,re.perform_result_id
 ,re.event_reason
 ,pr.result_status_cd
 ,pr.service_resource_cd

from
  result_event re
 ,perform_result pr

plan re where re.event_dt_tm between cnvtdatetime(request->start_dt_tm) 
                                 and cnvtdatetime(request->end_dt_tm)
          and re.event_type_cd in (dPERFORMED_CD, dVERIFIED_CD, dINREVIEW_CD)
join pr where pr.perform_result_id = re.perform_result_id
          and pr.app_mode_ind = nBRE_APP_MODE
          and pr.result_type_cd = dCALCULATION_CD
          and pr.result_status_cd in (dPERFORMED_CD, dVERIFIED_CD, dINREVIEW_CD,
                                      dOLDPERFORMED_CD, dOLDVERIFIED_CD, dOLDINREVIEW_CD)
order by pr.service_resource_cd, pr.perform_result_id
 
head report
  lSRCnt = 0
  lResultCnt = 0

head pr.service_resource_cd
  lSRCnt = lSRCnt + 1
  if (mod(lSRCnt, 10) = 1)
     stat = alterlist(service_resources_rec->service_resources, lSRCnt + 9)
  endif
  service_resources_rec->service_resources[lSRCnt].service_resource_cd = pr.service_resource_cd
  lResultCnt = 0 

head pr.perform_result_id
  lResultCnt = lResultCnt + 1

foot pr.perform_result_id
  row+0

foot pr.service_resource_cd 
  service_resources_rec->service_resources[lSRCnt].result_count = lResultCnt
  reply->solcap[1].degree_of_use_num = reply->solcap[1].degree_of_use_num + lResultCnt

foot report
  stat = alterlist(service_resources_rec->service_resources, lSRCnt)
with nocounter
  

if (reply->solcap[1].degree_of_use_num > 0)
  set reply->solcap[1].degree_of_use_str = "Yes"
else
  set reply->solcap[1].degree_of_use_str = "No"
endif
  
if (reply->solcap[1].degree_of_use_num = 0 )
  go to EXIT_SCRIPT
endif
  
select into "nl:"
  l.location_cd
 ,sr.service_resource_cd
  
from
  service_resource sr
 ,location l  

plan sr where expand(lIdx, 1, lSRCnt, sr.service_resource_cd,
                     service_resources_rec->service_resources[lIdx].service_resource_cd)
join l  where l.organization_id = sr.organization_id 
          and l.location_type_cd = dFACILITY_TYPE_CD
  
order by l.location_cd, sr.service_resource_cd 
  
head report
  lFacilityCdCnt = 0
  
head l.location_cd 
  lFacilityCdCnt = lFacilityCdCnt + 1
  if (mod(lFacilityCdCnt, 10) = 1 )
    stat = alterlist(facility_codes_rec->facility_codes, lFacilityCdCnt + 9)
  endif
  facility_codes_rec->facility_codes[lFacilityCdCnt].facility_cd = l.location_cd 

head sr.service_resource_cd 
  lSRIdx = locateval(lIdx, 1, lSRCnt, sr.service_resource_cd, 
                     service_resources_rec->service_resources[lIdx].service_resource_cd)
  if (lSRIdx > 0)  ;this should always be > 0 because the the select is based on the service_resources_rec record
    facility_codes_rec->facility_codes[lFacilityCdCnt].result_count = 
      facility_codes_rec->facility_codes[lFacilityCdCnt].result_count + 
      service_resources_rec->service_resources[lSRIdx].result_count 
  endif  

foot report
  stat = alterlist(facility_codes_rec->facility_codes, lFacilityCdCnt)

with nocounter
  
set lStat = alterlist(reply->solcap[1].facility, lFacilityCdCnt)
set lValidFacilityCdCnt = 0
for (lIdx = 1 to lFacilityCdCnt)
  set sFacilityDisplay = uar_get_code_display(facility_codes_rec->facility_codes[lIdx].facility_cd)
  ;only add to reply if the facility code is valid
  if (trim(sFacilityDisplay,3) > "")
    set lValidFacilityCdCnt = lValidFacilityCdCnt + 1
    set reply->solcap[1].facility[lValidFacilityCdCnt].display = 
          uar_get_code_display(facility_codes_rec->facility_codes[lIdx].facility_cd)
    set reply->solcap[1].facility[lValidFacilityCdCnt].value_num = 
          facility_codes_rec->facility_codes[lIdx].result_count 
  endif
endfor 
set lStat = alterlist(reply->solcap[1].facility, lValidFacilityCdCnt)

#EXIT_SCRIPT
free record service_resources_rec
free record facility_codes_rec

end
go

;Generated by GNU enscript 1.6.4.
