 ;;Solution_Test/script/PathNet -- Gen Lab/glb_routing_audit/glb_routing_audit.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 06/10/98 Hal Patchen          Initial Release                     *
;    *001 12/15/98 Hal Patchen          Add support for HLA activity        *
;    *002 05/03/99 Chad Moats		    Removed multiple joins to code_value*
;    *003 06/24/99 Laura Pott           Internationalization                *
;	    12/12/99 Kasie Sly		    Merge of 003 Internationalization   *
;~DE~************************************************************************
								;002

             drop program GLB_ROUTING_AUDIT:dba go
             create program GLB_ROUTING_AUDIT:dba

             paint
/******************************************************************************************begin 003 mod block**/
;include i18n function declarations
%i CCLSOURCE:i18n_uar.inc

;initialize variable that will keep the handle to i18n data
set i18nHandle = 0   
;call uar_i18nlocalizationinit
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)

      /***********************************************************************
      * Captions Record (internationalization)                               *
      ***********************************************************************/
      record captions
      (
      1 date = vc
      1 gen_lab = vc
      1 pg_no = vc
      1 time = vc
      1 act_tp = vc
      1 act_sub = vc
      1 tsk_assay = vc
      1 ord_cat = vc
      1 rte_lvl = vc
      1 seq = vc
      1 serv_res = vc
      1 serv_res_tp = vc
      1 apr_stat = vc
      1 not_fnd = vc
      1 active = vc
      1 inactive = vc
      1 missing = vc
      1 end_rpt = vc
      1 GLTitle = vc
      1 GLActType = vc
      1 GLActSubType = vc
      1 GLMnemFrom = vc
      1 GLTo = vc
      1 GLPrintRef = vc
      1 GLHelp = vc
      1 GLLoadAct = vc
)

      set captions->GLTitle         = uar_i18ngetmessage(i18nHandle,"title","GENERAL LAB ROUTING AUDIT")
      set captions->GLActType       = uar_i18ngetmessage(i18nHandle,"at","Activity Type:")
      set captions->GLActSubType    = uar_i18ngetmessage(i18nHandle,"ast","Activity Subtype:")
      set captions->GLMnemFrom      = uar_i18ngetmessage(i18nHandle,"ocmf","Order Catalog Mnemonic From:")
      set captions->GLTo            = uar_i18ngetmessage(i18nHandle,"tto2","To:")
      set captions->GLHelp          = uar_i18ngetmessage(i18nHandle,"help1","Press <Shift F5> for help")

      Set captions->date = uar_i18ngetmessage(i18nHandle,"date","DATE:")
      Set captions->gen_lab = uar_i18ngetmessage(i18nHandle,"gen_lab","G E N E R A L   L A B   R O U T I N G   A U D I T ")
      Set captions->pg_no = uar_i18ngetmessage(i18nHandle,"pg_no","PAGE NO:")
      Set captions->time = uar_i18ngetmessage(i18nHandle,"time","TIME:")
      Set captions->act_tp = uar_i18ngetmessage(i18nHandle,"act_tp","ACTIVITY TYPE:   ")
      Set captions->act_sub = uar_i18ngetmessage(i18nHandle,"act_sub","ACTIVITY SUBTYPE:")
      Set captions->tsk_assay = uar_i18ngetmessage(i18nHandle,"tsk_assay","TASK ASSAY MNEMONIC")
      Set captions->ord_cat = uar_i18ngetmessage(i18nHandle,"ord_cat","ORDER CATALOG MNE")
      Set captions->rte_lvl = uar_i18ngetmessage(i18nHandle,"rte_lvl","ROUTE LVL")
      Set captions->seq = uar_i18ngetmessage(i18nHandle,"seq","SEQ")
      Set captions->serv_res = uar_i18ngetmessage(i18nHandle,"serv_res","SERVICE RESOURCE")
      Set captions->serv_res_tp = uar_i18ngetmessage(i18nHandle,"serv_res_tp","SERV RES TYPE")
      Set captions->apr_stat = uar_i18ngetmessage(i18nHandle,"apr_stat","APR STATUS")
      Set captions->not_fnd = uar_i18ngetmessage(i18nHandle,"not_fnd", "Not Found")
      Set captions->active = uar_i18ngetmessage(i18nHandle,"active","Active")
      Set captions->inactive = uar_i8ngetmessage(i18nHandle,"inactive","Inactive")
      Set captions->missing = uar_i18ngetmessage(i18nHandle,"missing","Missing")
      Set captions->end_rpt = uar_i18ngetmessage(i18nHandle,"end_rpt","* * *  E N D   O F   R E P O R T  * * *")
/*******************************************************************************************end 003 mod block**/
      /***********************************************************************
      * Activity Type Record                                                 *
      ***********************************************************************/
      record act_type
      ( 
         1  qual[*]
            2  glb_activity_type_cd      = f8
      )

      /***********************************************************************
      * Activity Subtype Record                                              *
      ***********************************************************************/
      record act_subtype
      ( 
         1  qual[*]
            2  glb_activity_subtype_disp = c30
            2  glb_activity_subtype_cd   = f8
      )

      /***********************************************************************
      * Task Assay Record                                                    *
      ***********************************************************************/
      record taskassay
      ( 
         1  qual[*]
            2  mne_key_cap               = vc
            2  task_assay_cd             = f8
            2  mnemonic                  = vc
      )
            
      /***********************************************************************
      * Internal Record                                                      *
      ***********************************************************************/
      record internal
      ( 
         1  qual[*]
            2  task_assay_cd             = f8
            2  mnemonic                  = vc
            2  orderables_cnt            = i4
            2  orderables[*]
               3  catalog_cd                = f8
               3  mnemonic                  = vc
               3  resource_route_lvl        = i4
      )

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set ACTIVITY_TYPE_CODESET       = 106
         set GEN_LAB_CDF                 = "GLB" 
         set BB_CDF                      = "BB"
         set HLA_CDF                     = "HLA"                       ;001
         set ACTIVITY_SUBTYPE_CODESET    = 5801
         set MNE_TYPE_CODESET            = 6011
         set MNE_TYPE_PRIMARY_CDF        = "PRIMARY"
         declare mne_type_primary_cd     = f8
         declare stat                    = i4
         declare at_cnt                  = i4
         declare ash_cnt                 = i4
         declare dta_cnt                 = i4
         declare q_cnt                   = i4
         declare o_cnt                   = i4
         declare cnt                     = i4
         declare max_q_cnt               = i4
         declare max_o_cnt               = i4

      /***********************************************************************
      * Display screen                                                       *
      ***********************************************************************/
         set actvty_type_default = fillstring(30, " ")
         set actvty_type = fillstring(30," ")
         set actvty_type_disp = fillstring(30," ")
         set actvty_type_cdf = fillstring(12, " ")
         set actvty_subtype_cd = 0.0
         set actvty_subtype_disp = fillstring(30, " ")
         set mne_beg = fillstring(20," ")
         set mne_end = fillstring(20," ")
         call clear(1,1)
         call video(n)
         call box(1,1,3,80)
;003     call text(2,3, "GENERAL LAB ROUTING AUDIT")
         call text(2,3, captions->GLTitle)			;003
;003     call text(5,3, "Activity Type:")
         call text(5,3, captions->GLActType)					;003
;003     call text(7,3, "Activity Subtype:")
         call text(7,3, captions->GLActSubType)				;003
;003     call text(9,3, "Task Assay Mnemonic From:")
         call text(9,3, captions->GLMnemFrom)			;003
;003     call text(10,25, "To:")
         call text(10,25, captions->GLTo ) 							;003

      /***********************************************************************
      * Accept activity type.                                                *
      ***********************************************************************/
         select into "nl:"
            cv.display
         from 
            code_value cv
         where cv.code_set = ACTIVITY_TYPE_CODESET
           and cv.cdf_meaning = GEN_LAB_CDF
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
         detail
            actvty_type_default = cnvtupper(cv.display)
         with 
            nocounter,
            maxread(cv, 1)

;003     call text(24,3, "Press <Shift F5> for help")
         call text(24,3, captions->GLHelp)		;003
         set help = select activity_type = cnvtupper(cv.display)
                    from code_value cv
                    where cv.code_set = ACTIVITY_TYPE_CODESET
;001                      and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF)
                      and cv.cdf_meaning in (GEN_LAB_CDF,              ;001
                                             BB_CDF,                   ;001
                                             HLA_CDF)                  ;001
                    order by cv.display_key
                    with nocounter
         call accept(5,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU",
                     actvty_type_default)
         set help = off
         call clear(24,3,70)
         set actvty_type_disp = curaccept
         set actvty_type = cnvtalphanum(curaccept)

      /***********************************************************************
      * Select activity types.                                               *
      ***********************************************************************/
;003     call text(24,3, "Loading activity subtypes...")
         call text(24,3,(i18n_getmessage(i18nHandle,"load","Loading activity subtypes...")))		;003

         select into "nl:"
            cv.code_value,
            cv.cdf_meaning

         from 
            code_value cv

         where ((cv.code_set = ACTIVITY_TYPE_CODESET
             and cv.display_key = actvty_type
;001             and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF))
                 and cv.cdf_meaning in (GEN_LAB_CDF, BB_CDF, HLA_CDF)) ;001
            or  (cv.code_set = MNE_TYPE_CODESET
              and cv.cdf_meaning = MNE_TYPE_PRIMARY_CDF))
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         head report
            at_cnt = 0

         detail
            if (cv.code_set = ACTIVITY_TYPE_CODESET)
               at_cnt = at_cnt + 1
               stat = alterlist(act_type->qual, at_cnt)
               act_type->qual[at_cnt].glb_activity_type_cd = cv.code_value
               actvty_type_cdf = cv.cdf_meaning
            endif
            if (cv.code_set = MNE_TYPE_CODESET)
               mne_type_primary_cd = cv.code_value
            endif

         with nocounter

      /***********************************************************************
      * Select activity subtypes.                                            *
      ***********************************************************************/
         set ash_cnt = 1
         set stat = alterlist(act_subtype->qual, ash_cnt)
         set act_subtype->qual[ash_cnt].glb_activity_subtype_disp = "ALL"
         set act_subtype->qual[ash_cnt].glb_activity_subtype_cd = 0.0

         select into "nl:"
            activity_subtype_disp = cnvtupper(cv.display),
            cv.code_value

         from code_value cv

         where cv.code_set = ACTIVITY_SUBTYPE_CODESET
           and cv.definition = actvty_type_cdf
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         order by cv.display_key

         detail
            ash_cnt = ash_cnt + 1
            stat = alterlist(act_subtype->qual, ash_cnt)
            act_subtype->qual[ash_cnt].glb_activity_subtype_disp =
              activity_subtype_disp
            act_subtype->qual[ash_cnt].glb_activity_subtype_cd =
              cv.code_value

         with nocounter

         call clear(24,3,70)

      /***********************************************************************
      * Accept activity subtype.                                             *
      ***********************************************************************/
;003     call text(24,3, "Press <Shift F5> for help")
         call text(24,3, captions->GLHelp)		;003
         set help = select activity_subtype = cnvtupper(act_subtype->qual[d.seq]
                      .glb_activity_subtype_disp)
                    from (dummyt d with seq = value(ash_cnt))
                    where d.seq <= ash_cnt
                    with nocounter
         call accept(7,23, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP;;CU", "ALL")
         set help = off
         call clear(24,3,70)
         set actvty_subtype_disp = curaccept
         set actvty_subtype_cd = -1
         for (cnt = 1 to ash_cnt)
            if (cnvtupper(act_subtype->qual[cnt]
             .glb_activity_subtype_disp) = actvty_subtype_disp)
               set actvty_subtype_cd = 
                 act_subtype->qual[cnt].glb_activity_subtype_cd
            endif
         endfor

      /***********************************************************************
      * Accept task assay mnemonic range.                                    *
      ***********************************************************************/
         call accept(9,30, "PPPPPPPPPPPPPPPPPPPP;;CU", "A")
         set mne_beg = curaccept
         if (mne_beg = "A")
            call accept(10,30, "PPPPPPPPPPPPPPPPPPPP;;CU", 
                        "ZZZZZZZZZZZZZZZZZZZZ")
         else
            call accept(10,30, "PPPPPPPPPPPPPPPPPPPP;;CU")
         endif
         set mne_end = curaccept

      /***********************************************************************
      * Select General Lab order task assay mnemonics.                       *
      * NOTE: Separated select from order catalog so that order by clause    *
      * would run on UNIX box (120 bytes max)                                *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            dta.task_assay_cd,
            dta.mnemonic_key_cap,
            dta.mnemonic,
            dta.activity_type_cd

         from
            (dummyt d with seq = value(at_cnt)),
            discrete_task_assay dta

         plan d
         join dta   where dta.activity_type_cd = 
                              act_type->qual[d.seq].glb_activity_type_cd
                      and dta.mnemonic_key_cap between mne_beg and mne_end
                      and dta.active_ind > 0

         order by
            dta.mnemonic_key_cap,
            dta.task_assay_cd

         head report
            dta_cnt = 0

         head dta.mnemonic_key_cap
            row+0

         head dta.task_assay_cd
            dta_cnt = dta_cnt + 1
            stat = alterlist(taskassay->qual, dta_cnt)
            taskassay->qual[dta_cnt].mne_key_cap = 
              dta.mnemonic_key_cap
            taskassay->qual[dta_cnt].task_assay_cd = 
              dta.task_assay_cd
            taskassay->qual[dta_cnt].mnemonic = 
              dta.mnemonic

         foot dta.task_assay_cd
            row+0

         foot dta.mnemonic_key_cap
            row+0

         with
            counter

      /***********************************************************************
      * Select related order catalog procedures.                             *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            taskassay_cd = taskassay->qual[d.seq].task_assay_cd,
            taskassay_mne = taskassay->qual[d.seq].mne_key_cap,
            d_ptr.seq,
            ptr_exists = decode(ptr.seq, "Y", "N"),
            ptr.task_assay_cd,
            ptr.catalog_cd,
            oc.catalog_cd,
            oc.activity_type_cd,
            oc.activity_subtype_cd,
            ocs.mnemonic_key_cap

         from
            (dummyt d with seq = value(dta_cnt)),
            (dummyt d_ptr with seq = 1),
            profile_task_r ptr,
            order_catalog oc,
            order_catalog_synonym ocs

         plan d
         join d_ptr where d_ptr.seq = 1
         join ptr   where ptr.task_assay_cd = 
                             taskassay->qual[d.seq].task_assay_cd
                      and ptr.catalog_cd > 0.0
                      and ptr.active_ind > 0
         join oc    where oc.catalog_cd = ptr.catalog_cd
                      and oc.active_ind > 0
                      and ((actvty_subtype_cd > 0.0
                         and oc.activity_subtype_cd = actvty_subtype_cd)
                        or (actvty_subtype_cd = 0.0))
         join ocs   where ocs.catalog_cd = oc.catalog_cd
                      and ocs.mnemonic_type_cd = mne_type_primary_cd
                      and ocs.active_ind > 0

         order by
            d.seq,
            ocs.mnemonic_key_cap,
            oc.catalog_cd

         head report
            q_cnt = 0
            o_cnt = 0
            max_q_cnt = 0
            max_o_cnt = 0

         head d.seq
            if (actvty_subtype_cd = 0.0
            or (actvty_subtype_cd > 0.0 and ptr_exists = "Y"))
               cnt = d.seq
               q_cnt = q_cnt + 1
               if (q_cnt > max_q_cnt)
                  max_q_cnt = q_cnt
               endif
               stat = alterlist(internal->qual, q_cnt)
               internal->qual[q_cnt].task_assay_cd =
                 taskassay->qual[cnt].task_assay_cd
               internal->qual[q_cnt].mnemonic =
                 taskassay->qual[cnt].mnemonic
               internal->qual[q_cnt].orderables_cnt = 0
               o_cnt = 0
            endif

         head ocs.mnemonic_key_cap
            row+0

         head oc.catalog_cd
            if (ptr_exists = "Y")
               o_cnt = o_cnt + 1
               if (o_cnt > max_o_cnt)
                  max_o_cnt = o_cnt
               endif
               stat = alterlist(internal->qual[q_cnt].orderables, o_cnt)
               internal->qual[q_cnt].orderables_cnt = o_cnt
               internal->qual[q_cnt].orderables[o_cnt].catalog_cd =
                 oc.catalog_cd
               internal->qual[q_cnt].orderables[o_cnt].mnemonic =
                 ocs.mnemonic
               internal->qual[q_cnt].orderables[o_cnt].resource_route_lvl =
                 oc.resource_route_lvl
            endif

         foot oc.catalog_cd
            row+0

         foot ocs.mnemonic_key_cap
            row+0

         foot d.seq
            row+0

         with
            counter,
            outerjoin = d_ptr

      /***********************************************************************
      * Generate General Lab audit.                                          *
      ***********************************************************************/
         select
            join_path = decode(orl.seq, "1",
                               arl.seq, "2",
                                        "0"),
            d1.seq,
            d2.seq,
            d_orl.seq,
            orl.catalog_cd,
            orl.service_resource_cd,
            orl.sequence,
;002            cv_sr1.display,
;002            cv_type1.display,
            d_apr1.seq,
            apr1_exists = decode(apr1.seq, "Y", "N"),
            apr1.service_resource_cd,
            apr1.task_assay_cd,
            d_arl.seq,
            arl.task_assay_cd,
            arl.service_resource_cd,
            arl.sequence,
;002            cv_sr2.display,
;002            cv_type2.display,
            d_apr2.seq,
            apr2_exists = decode(apr2.seq, "Y", "N"),
            apr2.service_resource_cd,
            apr2.task_assay_cd

         from
            (dummyt d1 with seq = value(max_q_cnt)),
            (dummyt d2 with seq = value(max_o_cnt)),
            (dummyt d_orl with seq = 1),
            orc_resource_list orl,
            service_resource sr1,
;002            code_value cv_sr1,
;002            code_value cv_type1,
            (dummyt d_apr1 with seq = 1),
            assay_processing_r apr1,
            (dummyt d_arl with seq = 1),
            assay_resource_list arl,
            service_resource sr2,
;002            code_value cv_sr2,
;002            code_value cv_type2,
            (dummyt d_apr2 with seq = 1),
            assay_processing_r apr2

         plan d1
         join d2      where d2.seq <= internal->qual[d1.seq].orderables_cnt
         join (d_orl  where d_orl.seq = 1
                        and internal->qual[d1.seq].orderables[d2.seq]
                             .resource_route_lvl = 1
           join orl   where orl.catalog_cd = internal->qual[d1.seq]
                             .orderables[d2.seq].catalog_cd
                        and orl.active_ind > 0
           join sr1   where sr1.service_resource_cd = 
                             orl.service_resource_cd
                        and sr1.active_ind > 0
;002           join cv_sr1 where cv_sr1.code_value = sr1.service_resource_cd
;002           join cv_type1 where cv_type1.code_value = 
;002                             sr1.service_resource_type_cd
           join d_apr1 where d_apr1.seq = 1
           join apr1   where apr1.task_assay_cd = internal->qual[d1.seq]
                             .task_assay_cd
                         and apr1.service_resource_cd = 
                             orl.service_resource_cd)
         orjoin (d_arl where d_arl.seq = 1
                        and internal->qual[d1.seq].orderables[d2.seq]
                             .resource_route_lvl = 2
           join arl   where arl.task_assay_cd = 
                             internal->qual[d1.seq].task_assay_cd
                        and arl.active_ind = 1
           join sr2   where sr2.service_resource_cd = 
                             arl.service_resource_cd
                        and sr2.active_ind > 0
;002           join cv_sr2 where cv_sr2.code_value = sr2.service_resource_cd
;002           join cv_type2 where cv_type2.code_value = 
;002                             sr2.service_resource_type_cd
           join d_apr2 where d_apr2.seq = 1
           join apr2   where apr2.task_assay_cd = internal->qual[d1.seq]
                             .task_assay_cd
                         and apr2.service_resource_cd = 
                             arl.service_resource_cd)
               
         order by
            d1.seq,
            d2.seq,
            orl.sequence,
            arl.sequence

         head report
            line = fillstring(127, "-")

         head page
;003        col 1, "DATE:", col+2, curdate "ddmmmyy;;d"
            col 1,   captions->date, col+2, curdate "@SHORTDATE;;Q"						;003
;003        col 41, "G E N E R A L   L A B   R O U T I N G   A U D I T "
            col 41,  captions->gen_lab 											;003
;003        col 110, "PAGE NO:", col+2, curpage "######;;i"
            col 110, captions->pg_no, col+2, curpage "######;;i"							;003
            row + 1
;003        col 1, "TIME:", col+2, curtime
            col 1,   captions->time, col+2, curtime "@TIMENOSECONDS;;M"						;003
            row + 1
;003        col 1, "ACTIVITY TYPE:   ", col+2, actvty_type_disp
            col 1,   captions->act_tp, col+2, actvty_type_disp 							;003
            row + 1
;003        col 1, "ACTIVITY SUBTYPE:", col+2, actvty_subtype_disp
            col 1,   captions->act_sub, col+2, actvty_subtype_disp						;003
            row + 2
;003        col 1, "TASK ASSAY MNEMONIC"
            col 1,   captions->tsk_assay											;003
;003        col 28, "ORDER CATALOG MNE"
            col 28,  captions->ord_cat											;003
;003        col 55, "ROUTE LVL"
            col 55,  captions->rte_lvl											;003
;003        col 66, "SEQ",
            col 66,  captions->seq  											;003
;003        col 71, "SERVICE RESOURCE"
            col 71,  captions->serv_res  											;003
;003        col 103, "SERV RES TYPE"
            col 103, captions->serv_res_tp										;003
;003        col 118, "APR STATUS"
            col 118, captions->apr_stat 											;003
            row + 1
            col 1,  "-------------------------"
            col 28, "-------------------------"
            col 55, "---------"
            col 66, "---",
            col 71, "------------------------------"
            col 103, "-------------"
            col 118, "----------"
            row + 1 

         head d1.seq
            q_cnt = d1.seq
            col 1, internal->qual[q_cnt]
              .mnemonic "#########################;;c"

         head d2.seq
            if (internal->qual[q_cnt].orderables_cnt > 0)
               o_cnt = d2.seq
               col 28, internal->qual[q_cnt].orderables[o_cnt]
                 .mnemonic "#########################;;c"
               col 58, internal->qual[q_cnt].orderables[o_cnt]
                 .resource_route_lvl "##;;i"
            else
;003           col 28, "Not Found"
               col 28, captions->not_fnd 											;003
            endif

         detail
            case (join_path)
             of "1":
               col 66, orl.sequence "###;;i"
	       serv_res_disp = trim(UAR_GET_CODE_DISPLAY(sr1.service_resource_cd),3)		;002
;003           col 71, serv_res_disp "##############################;;c"			;002
               col 71, serv_res_disp "##############################;;c;i" 					;003
;002               col 71, cv_sr1.display "##############################;;c"
	       serv_res_type = trim(UAR_GET_CODE_DISPLAY(sr1.service_resource_type_cd), 3)	;002
;003           col 103, serv_res_type "#############;;c"					;002
               col 103, serv_res_type "#############;;c;i" 								;003
;002               col 103, cv_type1.display "#############;;c"
               if (apr1_exists = "Y")
                  if (apr1.active_ind = 1)
;003                 col 118, "Active"
                     col 118, captions->active										;003
                  else
;003                 col 118, "Inactive"
                     col 118,  captions->inactive									;003
                  endif
               else
;003              col 118, "Missing"
                  col 118,  captions->missing 										;003
               endif
             of "2":
               col 66, arl.sequence "###;;i"
	       serv_res_disp = trim(UAR_GET_CODE_DISPLAY(sr2.service_resource_cd),3)		;002
;003           col 71, serv_res_disp "##############################;;c"			;002
               col 71, serv_res_disp "##############################;;c;i"                    		;003

;002               col 71, cv_sr2.display "##############################;;c"
	       serv_res_type = trim(UAR_GET_CODE_DISPLAY(sr2.service_resource_type_cd),3)	;002
;003           col 103, serv_res_type "#############;;c"					;002
               col 103, serv_res_type "#############;;c;i"  							;003
;002               col 103, cv_type2.display "#############;;c"
               if (apr2_exists = "Y")
                  if (apr2.active_ind = 1)
;003                 col 118, "Active"
                     col 118,  captions->active  									;003
                  else
;003                 col 118, "Inactive"
                     col 118,  captions->inactive									;003
                  endif
               else
;003              col 118, "Missing"
                  col 118,  captions->missing										;003
		   endif
             else
;003           col 71, "Not Found"
               col 71,  captions->not_fnd 										;003
            endcase
            row + 1

         foot d2.seq
            row + 1

         foot d1.seq
            col 1, line
            row + 1

         foot report
            row + 2
;003        col 44, "* * *  E N D   O F   R E P O R T  * * *"
            col 44, captions->end_rpt 											;003

         with 
            counter,
            outerjoin = d1,
            outerjoin = d2,
            outerjoin = d_orl,
            outerjoin = d_apr1,
            dontcare = apr1,
            outerjoin = d_arl,
            outerjoin = d_apr2,
            dontcare = apr2,
            nullreport

         end
         go

;Generated by GNU enscript 1.6.4.
