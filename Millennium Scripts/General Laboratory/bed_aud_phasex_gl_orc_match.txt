 ;;Solution_Test/script/Bedrock/bed_aud_phasex_gl_orc_match/bed_aud_phasex_gl_orc_match.prg Turn on black mode

drop program bed_aud_phasex_gl_orc_match:dba go
create program bed_aud_phasex_gl_orc_match:dba
 
if (not (validate (request,0)))
 record request
  (
    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
    1 paramlist[*]
      2 param_type_mean = vc
      2 pdate1 = dq8
      2 pdate2 = dq8
      2 vlist[*]
        3 dbl_value = f8
        3 string_value = vc
  )
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*] 
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1  high_volume_flag = i2
    1  output_filename = vc
    1  run_status_flag = i2
    1  statlist[*]
       2 statistic_meaning = vc
       2 status_flag = i2
       2 qualifying_items = i4
       2 total_items = i4
    1  status_data
      2  status  =  C1 
      2  SUBEVENTSTATUS [ 1 ] 
        3  OPERATIONNAME  =  C15 
        3  OPERATIONSTATUS  =  C1 
        3  TARGETOBJECTNAME  =  C15 
        3  TARGETOBJECTVALUE  =  C100 
  )
endif

free record temp
record temp
( 1 fcnt = i2
  1 fqual[*]
    2 facility = vc
    2 cnt = i2
    2 qual[*]
      3 id = f8
      3 alias = vc
      3 activity_type = vc
      3 desc = vc
      3 mnemonic = vc
      3 match = vc
      3 add = vc
      3 oc_desc = vc
      3 oc_cd = f8
      3 synonym = vc
      3 remove = vc
      3 match_ind = i2
      3 match_cd = f8
      3 concept_cki = vc
      3 bed_name = vc
      3 bed_desc = vc
)

set high_volume_cnt = 0
if (request->skip_volume_check_ind = 0)
  select into "nl:"
    hv_cnt = count(*)
  from br_oc_work b
  plan b
  where b.catalog_type = "LAB*"
    and cnvtupper(b.activity_type) = "GENERAL LAB"
  detail
    high_volume_cnt = hv_cnt
  with nocounter

  call echo(high_volume_cnt)
 
  if (high_volume_cnt > 10000)
    set reply->high_volume_flag = 2
    go to exit_script
  elseif (high_volume_cnt > 5000)
    set reply->high_volume_flag = 1
    go to exit_script
  endif
endif

set cat_cd = 0.0
select into "nl:"
from code_value c
plan c
where c.code_set = 6000
  and c.cdf_meaning = "GENERAL LAB"
  and c.active_ind = 1
detail
 cat_cd = c.code_value
with nocounter

set act_cd = 0.0
select into "nl:"
from code_value c
plan c
where c.code_set = 106
  and c.cdf_meaning = "GLB"
  and c.active_ind = 1
detail
 act_cd = c.code_value
with nocounter

set new_phase_x_match_ind = 0
select into "nl:"
from br_name_value br,
  dummyt d
plan br
  where br.br_nv_key1 = "NEW_PHASE_X_MATCH"
join d
  where cnvtint(br.br_name) = cat_cd
    and cnvtint(br.br_value) = act_cd
detail
  new_phase_x_match_ind = 1
with nocounter

set fcnt = 0
set cnt = 0
select into "nl:"
from br_oc_work b,
  dummyt d,
  br_name_value nv,
  code_value_alias a,
  order_catalog oc
plan b
  where b.catalog_type = "LAB*"
    and cnvtupper(b.activity_type) = "GENERAL LAB"
join d
join nv
  where nv.br_nv_key1 = "REL_CONTRIBUTOR_FACILITY"
    and nv.br_value = b.facility
join a
  where a.code_set = 200
    and a.contributor_source_cd = cnvtint(nv.br_name)
    and (a.alias = b.alias1 or a.alias = b.alias2)
join oc
  where oc.catalog_cd = a.code_value
order cnvtupper(b.facility), cnvtupper(b.catalog_type), cnvtupper(b.activity_type), cnvtupper(b.short_desc)
head b.facility
  cnt = 0
  fcnt = fcnt + 1
  temp->fcnt = fcnt
  stat = alterlist(temp->fqual,fcnt)
  temp->fqual[fcnt].facility = b.facility
detail
  cnt = cnt + 1
  temp->fqual[fcnt].cnt = cnt
  stat = alterlist(temp->fqual[fcnt].qual,cnt)
  temp->fqual[fcnt].qual[cnt].activity_type = b.activity_type
  if (b.alias1 > " ")
    temp->fqual[fcnt].qual[cnt].alias = b.alias1
  else
    temp->fqual[fcnt].qual[cnt].alias = b.alias2
  endif
  temp->fqual[fcnt].qual[cnt].id = b.oc_id
  if (b.org_long_name > " ")
    temp->fqual[fcnt].qual[cnt].desc = b.org_long_name
  else
    temp->fqual[fcnt].qual[cnt].desc = b.long_desc
  endif
  if (b.org_short_name > " ")
    temp->fqual[fcnt].qual[cnt].mnemonic = b.org_short_name
  else
    temp->fqual[fcnt].qual[cnt].mnemonic = b.short_desc
  endif
  if (b.status_ind = 3)
    temp->fqual[fcnt].qual[cnt].remove = "X"
  endif
  temp->fqual[fcnt].qual[cnt].match_cd = b.match_orderable_cd
  temp->fqual[fcnt].qual[cnt].oc_desc = oc.description
  temp->fqual[fcnt].qual[cnt].oc_cd = oc.catalog_cd
  temp->fqual[fcnt].qual[cnt].synonym = oc.primary_mnemonic
  if (b.match_ind > 0)
    temp->fqual[fcnt].qual[cnt].match = "Matched"
  else
    temp->fqual[fcnt].qual[cnt].match = "Not Matched"
  endif
  if (b.match_orderable_cd > 0)
    if (temp->fqual[fcnt].qual[cnt].oc_cd > 0)
      temp->fqual[fcnt].qual[cnt].add = "Not Added"
    else
      temp->fqual[fcnt].qual[cnt].add = "Added"
    endif
  else
    temp->fqual[fcnt].qual[cnt].add = "Not Added"
  endif
with nocounter,outerjoin=d

for (x = 1 to fcnt)
  set cnt = size(temp->fqual[x].qual,5)
  if (cnt > 0)
    if (new_phase_x_match_ind = 0)
      select into "nl:"
      from (dummyt d with seq = value(cnt)),
        br_auto_order_catalog oc
      plan d
        where temp->fqual[x].qual[d.seq].match_ind = 0
          and temp->fqual[x].qual[d.seq].match_cd > 0
      join oc
        where oc.catalog_cd = temp->fqual[x].qual[d.seq].match_cd
      order d.seq
      head d.seq
        temp->fqual[x].qual[d.seq].bed_name = oc.primary_mnemonic
        temp->fqual[x].qual[d.seq].bed_desc = oc.description
        temp->fqual[x].qual[d.seq].concept_cki = oc.concept_cki
        temp->fqual[x].qual[d.seq].match_ind = 1
      with nocounter,skipbedrock=1

      select into "nl:"
      from (dummyt d with seq = value(cnt)),
        order_catalog oc
      plan d
        where temp->fqual[x].qual[d.seq].match_ind = 0
          and temp->fqual[x].qual[d.seq].match_cd > 0
      join oc
        where oc.catalog_cd = temp->fqual[x].qual[d.seq].match_cd
      order d.seq
      head d.seq
        temp->fqual[x].qual[d.seq].oc_desc = oc.description
        temp->fqual[x].qual[d.seq].oc_cd = oc.catalog_cd
        temp->fqual[x].qual[d.seq].synonym = oc.primary_mnemonic
        temp->fqual[x].qual[d.seq].match_ind = 1
      with nocounter
    else
      select into "nl:"
      from (dummyt d with seq = value(cnt)),
        br_auto_order_catalog oc
      plan d
      join oc
        where oc.catalog_cd = temp->fqual[x].qual[d.seq].match_cd
      order d.seq
      head d.seq
        temp->fqual[x].qual[d.seq].bed_name = oc.primary_mnemonic
        temp->fqual[x].qual[d.seq].bed_desc = oc.description
        temp->fqual[x].qual[d.seq].concept_cki = oc.concept_cki
      with nocounter,skipbedrock=1

      select into "nl:"
      from (dummyt d with seq = value(cnt)),
        br_name_value b,
        order_catalog oc,
        dummyt d1,
        dummyt d2 ;001
      plan d
      join b
        where b.br_nv_key1 = "PHASE_X_MATCH"
;001          and b.br_name = cnvtstring(temp->fqual[x].qual[d.seq].id)
      join d2 ;001
        where cnvtint(trim(b.br_name)) = temp->fqual[x].qual[d.seq].id ;001
      join oc
      join d1
        where oc.catalog_cd = cnvtint(b.br_value)
      order d.seq
      head d.seq
        temp->fqual[x].qual[d.seq].oc_desc = oc.description
        temp->fqual[x].qual[d.seq].oc_cd = oc.catalog_cd
        temp->fqual[x].qual[d.seq].synonym = oc.primary_mnemonic
      with nocounter
    endif
  endif
endfor

set stat = alterlist(reply->collist,12)
set reply->collist[1].header_text = "Facility"
set reply->collist[1].data_type = 1 ;string
if (fcnt > 1)
  set reply->collist[1].hide_ind = 0
else
  set reply->collist[1].hide_ind = 1
endif
set reply->collist[2].header_text = "Activity Type"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 1
set reply->collist[3].header_text = "Legacy Mnemonic"
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
set reply->collist[4].header_text = "Legacy Description"
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
set reply->collist[5].header_text = "Millennium Name"
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
set reply->collist[6].header_text = "Millennium Description"
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
set reply->collist[7].header_text = "Order Catalog CD"
set reply->collist[7].data_type = 2 ;double
set reply->collist[7].hide_ind = 1
set reply->collist[8].header_text = "Match"
set reply->collist[8].data_type = 1 ;string
set reply->collist[8].hide_ind = 0
set reply->collist[9].header_text = "Added"
set reply->collist[9].data_type = 1 ;string
set reply->collist[9].hide_ind = 0
set reply->collist[10].header_text = "Bedrock Name"
set reply->collist[10].data_type = 1 ;string
set reply->collist[10].hide_ind = 0
set reply->collist[11].header_text = "Bedrock Description"
set reply->collist[11].data_type = 1 ;string
set reply->collist[11].hide_ind = 0
set reply->collist[12].header_text = "Remove"
set reply->collist[12].data_type = 1 ;string
set reply->collist[12].hide_ind = 0

if (fcnt = 0)
  go to exit_script
endif

set row_nbr = 0

for (x = 1 to fcnt)
  set cnt = size(temp->fqual[x].qual,5)
  for (y = 1 to cnt)
    set row_nbr = row_nbr + 1
    set stat = alterlist(reply->rowlist,row_nbr)
    set stat = alterlist(reply->rowlist[row_nbr].celllist,12)
    set reply->rowlist[row_nbr].celllist[1].string_value = temp->fqual[x].facility
    set reply->rowlist[row_nbr].celllist[2].string_value = temp->fqual[x].qual[y].activity_type
    set reply->rowlist[row_nbr].celllist[3].string_value = temp->fqual[x].qual[y].mnemonic
    set reply->rowlist[row_nbr].celllist[4].string_value = temp->fqual[x].qual[y].desc
    set reply->rowlist[row_nbr].celllist[5].string_value = temp->fqual[x].qual[y].synonym
    set reply->rowlist[row_nbr].celllist[6].string_value = temp->fqual[x].qual[y].oc_desc
    set reply->rowlist[row_nbr].celllist[7].double_value = temp->fqual[x].qual[y].oc_cd
    set reply->rowlist[row_nbr].celllist[8].string_value = temp->fqual[x].qual[y].match
    set reply->rowlist[row_nbr].celllist[9].string_value = temp->fqual[x].qual[y].add
    set reply->rowlist[row_nbr].celllist[10].string_value = temp->fqual[x].qual[y].bed_name
    set reply->rowlist[row_nbr].celllist[11].string_value = temp->fqual[x].qual[y].bed_desc
    set reply->rowlist[row_nbr].celllist[12].string_value = temp->fqual[x].qual[y].remove
  endfor
endfor

#exit_script
if (reply->high_volume_flag in (1,2))
  set reply->output_filename = build("x_gl_orc_match_audit.csv")
endif

if (request->output_filename > " ")
  execute bed_rpt_file
endif

end go

;Generated by GNU enscript 1.6.4.
