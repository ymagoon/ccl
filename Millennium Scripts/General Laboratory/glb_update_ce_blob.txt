 ;;Solution_Test/script/PathNet -- Gen Lab/glb_update_ce_blob/glb_update_ce_blob.prg Turn on black mode

drop program GLB_UPDATE_CE_BLOB:dba go
create program GLB_UPDATE_CE_BLOB:dba

/****************************************************************************
 *                                                                          *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &            *
 *                              Technology, Inc.                            *
 *       Revision      (c) 1984-1997 Cerner Corporation                     *
 *                                                                          *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.             *
 *  This material contains the valuable properties and trade secrets of     *
 *  Cerner Corporation of Kansas City, Missouri, United States of           *
 *  America (Cerner), embodying substantial creative efforts and            *
 *  confidential information, ideas and expressions, no part of which       *
 *  may be reproduced or transmitted in any form or by any means, or        *
 *  retained in any storage or retrieval system without the express         *
 *  written permission of Cerner.                                           *
 *                                                                          *
 *  Cerner is a registered mark of Cerner Corporation.                      *
 *                                                                          *
 *                                                                          *
 **************************************************************************** 

/*****************************************************************************
 
  Source file name:       glb_update_ce_blob.prg
  Object name:            glb_update_ce_blob
 
  Product:                PathNet General Laboratory
  Product Team:           PathNet General Laboratory
  HNA Version:
  CCL Version:            8.0.01
 
  Program purpose:        Update the blob_contents on the ce_blob to convert
                          ascii text into rtf format
 
  Tables updated:         CE_BLOB
 
  Executing from:         
 
  Special Notes:          This Script is a Cleanup Script and needs to be run
                          manually		  
  
 ****************************************************************************
 *                  GENERATED MODIFICATION CONTROL LOG                      *
 ****************************************************************************
 *                                                                          *
 *Mod     Date       Engineer        Feature  Comment                       *
 *-----   ---------- --------------- -------  ------------------------------*
  000     11/02/2010 Balaji Murali    262648  Initial Release.
 **********************************************************************
 
 *******************  END OF ALL MODCONTROL BLOCKS  ********************/
 
execute crmrtl
execute srvrtl
 
;***********************************************************************
;INITIALIZE
;***********************************************************************
;Constants
   declare WR      = vc with constant(" \plain \f0 \fs24 \cb2 ")
   declare RTFEOF  = vc with constant("}")
   declare RHEAD   = vc with
   constant("{\rtf1\ansi\deff0{\fonttbl{\f0\fswiss Microsoft Sans Serif;}{\f1\fswiss Tahoma;}}\deflang2057\deflange2057")
 
   declare RESULTTYPECD = f8 with constant(uar_get_code_by("MEANING", 289, "1"))
   declare CATALOGTYPECD = f8 with constant(uar_get_code_by("MEANING", 6000, "GENERAL LAB"))
 
   declare CORRECTEDINREVIEW = f8 with constant(uar_get_code_by("MEANING", 1901, "CORRINREV"))
   declare VERIFIEDRESULTSTATUSCD = f8 with constant(uar_get_code_by("MEANING", 1901, "VERIFIED"))
   declare CORRECTEDRESULTSTATUSCD = f8 with constant(uar_get_code_by("MEANING", 1901, "CORRECTED"))
   declare AUTOVERIFIEDRESULTSTATUSCD = f8 with constant(uar_get_code_by("MEANING", 1901, "AUTOVERIFIED"))
    
   declare BBACTIVITYTYPECD = f8 with constant(uar_get_code_by("MEANING", 106, "BB"))
   declare GLBACTIVITYTYPECD = f8 with constant(uar_get_code_by("MEANING", 106, "GLB"))
   declare HLAACTIVITYTYPECD = f8 with constant(uar_get_code_by("MEANING", 106, "HLA"))
 
   declare SUCCNTYPECD = f8 with constant(uar_get_code_by("MEANING", 63, "FINAL"))
   declare STORAGECD = f8 with constant(uar_get_code_by("MEANING", 25, "BLOB"))
   declare FORMATCD = f8 with constant(uar_get_code_by("MEANING", 23, "RTF"))
 
;Variables
   declare rtf_text = vc
   declare lBlobSize = i4
 
;CRM Variables
   declare hApp  = i4
   declare hTask = i4
   declare hStep = i4
   declare doNothing = i4
 
   declare hReq  = i4
   declare hItem = i4
   declare hBlob = i4
   declare hStruct   = i4
   declare hBlobItem = i4
   declare hBlobSummary = i4
   declare crmStatus = i2
 
;STATUS Variables
   declare srvStat = i4
 
;***********************************************************************
;MAIN
;***********************************************************************
 
   set crmStatus = uar_CrmBeginApp(1000012, hApp)
   if (crmStatus != 0)
      call echo("Error in Begin App for application 1000012.")
      call echo(build("Crm Status: ", crmStatus))
      call echo("Cannot call Event_Ensure. Exiting Script.")
      go to END_PROGRAM
   endif
 
   set crmStatus = uar_CrmBeginTask(hApp, 1000012, hTask)
   if (crmStatus != 0)
      call echo("Error in Begin Task for task 1000012.")
      call echo(build("Crm Status: ", crmStatus))
      call echo("Cannot call Event_Ensure. Exiting Script.")
      call uar_CrmEndApp(hApp)
      go to END_PROGRAM
   endif
 
  select
      pr.long_text_id,
      cb.event_id,
      r.result_id,
      r.task_assay_cd,
      o.order_id,
      lt.long_text
   from
      perform_result pr,
      long_text lt,
      result r,
      orders o,
      clinical_event ce,
      ce_blob cb,
      dummyt d
   plan pr
     where pr.result_type_cd = RESULTTYPECD
     and pr.result_status_cd in(VERIFIEDRESULTSTATUSCD, CORRECTEDRESULTSTATUSCD, AUTOVERIFIEDRESULTSTATUSCD, CORRECTEDINREVIEW)
   join d
   join lt
      where lt.long_text_id = pr.long_text_id and lt.long_text NOT LIKE "*{\rtf*"
   join r
      where r.result_id = pr.result_id
   join o
      where o.order_id = r.order_id and o.catalog_type_cd = CATALOGTYPECD
      and o.activity_type_cd in (BBACTIVITYTYPECD, GLBACTIVITYTYPECD, HLAACTIVITYTYPECD)
   join ce
      where ce.order_id = o.order_id and ce.task_assay_cd = r.task_assay_cd
   join cb
      where cb.event_id = ce.event_id
   detail
      call UpdateEventServer(lt.long_text, ce.event_id)      
   with nocounter
   
   call echo("Rows Updated Successfully")
 
   subroutine UpdateEventServer(long_text, event_id)
      set crmStatus = uar_CrmBeginReq(hTask, "", 1000012, hStep)
 
	   if(crmStatus != 0)
	      call echo("Error in Begin Request for request 1000012.")
	      call echo(build("Crm Status: ", crmStatus))
	   else
	      set hReq = uar_CrmGetRequest(hStep)
 
	      ;Build the Request
	      set srvStat = uar_SrvSetShort (hReq, "ensure_type", 2)
 
	      set hStruct = uar_SrvGetStruct(hReq, "clin_event")
 
	      set srvStat = uar_SrvSetShort (hStruct, "ensure_type", 2)
	      set srvStat = uar_SrvSetDouble(hStruct, "event_id", event_id)
 
	      set srvStat = uar_SrvSetShort (hStruct, "view_level_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "event_start_dt_tm_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "event_end_dt_tm_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "event_end_dt_tm_os_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "authentic_flag_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "publish_flag_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "subtable_bit_map_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "expiration_dt_tm_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "clinsig_updt_dt_tm_ind", 1)
 
	      set hBlobItem = uar_SrvAddItem(hStruct, "blob_result")
	      set srvstat = uar_SrvSetDouble(hBlobItem, "succession_type_cd", SUCCNTYPECD)
	      set srvstat = uar_SrvSetDouble(hBlobItem, "storage_cd", STORAGECD)
	      set srvstat = uar_SrvSetDouble(hBlobItem, "format_cd", FORMATCD)
 
	      set hBlob = uar_SrvAddItem(hBlobItem, "blob")
	      set rtf_text = concat(RHEAD, WR, " ", long_text, WR, RTFEOF)
              set lBlobSize = size(rtf_text, 1)
	      set srvStat = uar_SrvSetAsIs(hBlob, "blob_contents", rtf_text, lBlobSize)
 
	      set hBlobSummary = uar_SrvAddItem(hBlobItem, "blob_summary")
	      set srvStat = uar_SrvSetLong(hBlobSummary, "blob_length", lBlobSize)
 
	      set srvStat = uar_SrvSetShort (hStruct, "valid_until_dt_tm_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "valid_from_dt_tm_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "verified_dt_tm_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "performed_dt_tm_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "updt_dt_tm_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "updt_task_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "updt_cnt_ind", 1)
	      set srvStat = uar_SrvSetShort (hStruct, "updt_applctx_ind", 1)
 
	      ;Call the Event Server
	      set crmStatus = uar_CrmPerform(hStep)
	      if(crmStatus != 0)
	         call echo("Error in Perform Request for request 1000012.")
	         call echo(build("Crm Status : ", crmStatus))
	      endif
	   endif
  end
 
#END_PROGRAM
 
   ;Destroy CRM Handles
   set crmStatus = uar_CrmEndTask(hTask)
   set crmStatus = uar_CrmEndApp(hApp)
end
go

;Generated by GNU enscript 1.6.4.
