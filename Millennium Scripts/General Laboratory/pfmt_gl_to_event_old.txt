 ;;Solution_Test/script/PathNet -- Gen Lab/pfmt_gl_to_event_old/pfmt_gl_to_event_old.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:       pfmt_gl_to_event_old.prg
        Object name:            pfmt_gl_to_event_old
        Request #:              120210 (request for event server)
 
        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Post results from lab activity to clinical
                                event table
 
                                This is the old version of pfmt_gl_to_event
                                that was used before the result recovery logic
                                was introduced.  This script is called from the
                                new pfmt_gl_to_event script when the pn_results
                                structure does not exist, meaning that the result
                                recovery logic is not being used.  This keeps the
                                passivity for this script.
 
        Tables read:            order_catalog
 
        Tables updated:         clinical_event
                                ce_string_result
                                ce_coded_result
        Executing from:         Process Server
 
        Special Notes:          Triggered from Request 250074.
 
******************************************************************************/
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 11/11/96 Kevin Brunner        Initial Release                     *
;    *001 06/18/97 Jon Weekes           Modified SetHeaderForProduct sub-   *
;       routine to post verified_dt_tm to clinical_event row for BBPRODUCT  *
;       row so crossmatches will show up on interim charts.                 *
;    *002 08/01/97 Kevin Brunner        Change the action personnel type    *
;       code from corrected to modified ce_event_personnel.                 *
;    *003 09/05/97 Kevin Brunner        Add autoverify logic.               *
;    *004 10/06/97 Kevin Brunner        New expedite processing structure   *
;    *005 09/19/97 Todd Gugler          Check do_not_chart_ind              *
;    *006 09/19/97 Todd Gugler          Changes for HLA Typing proceedures  *
;    *007 12/08/97 Kevin Brunner        Addition for date result types      *
;    *008 12/08/97 Kevin Brunner        Addition for interpretive data      *
;    *009 12/11/97 Kevin Brunner        Post normal alpha to normal low     *
;    *010 12/16/97 Kevin Brunner        Post alpha result units             *
;    *011 12/19/97 Hal Patchen          Use reply perform dt tm for Gen Lab *
;    *012 12/22/97 Todd Gugler          Set HLA parent publish flag properly*
;    *013 01/08/98 Jon Weekes           Added code to create                *
;       event_prsnl_list instances for BBPRODUCT row --verified_dt_tm       *
;       on clinical_event table is set based on a ce_event_prsnl row with   *
;       a action_type_cd = verified                                         *
;    *014 01/14/98 Jon Weekes           Correction to 013, commented out line
;       which set perform_dt_tm from requestin->request...                  *
;    *015 02/12/98 Bryan Muehlmeier     Added view_level to an HLA select   *
;    *016 02/20/98 Kevin Brunner        Post footnote on verify only        *
;    *017 03/06/98 Kevin Brunner        Check for interp_data_id > 0        *
;    *018 04/23/98 Kevin Brunner        Remove ce_string_result when        *
;                                       ce_coded_result is posted           *
;    *019 06/26/98 Kevin Brunner        "CERNER" for perform of zero        *
;    *020 07/02/98 Jeff Fry             If "CERNER" id = 0, then use the    *
;                                       verify id                           *
;    *021 08/05/98 Mike Goings          added call echo to show if event end*
;                                       and start dt tm is NULL             *
;    *022 10/07/98 Hal Patchen          Inactivate old results before adding*
;    *                                  new results.                        *
;    *023 12/03/98 Todd Gugler          Check view_level when selecting     *
;    *                                  related recipients.                 *
;    *024 12/08/98 Todd Gugler          Update verified_dt_tm for HLA       *
;    *                                  Dummy Parent.                       *
;    *025 03/03/99 Hal Patchen          Check for event recs before         *
;    *                                  inactivating old results.           *
;    *026 08/24/99 Gary Runde           Add error logging to msgview        *
;    *027 08/03/99 Kevin Winkel         Check for HLA Crossmatch activity   *
;    *                                  subtype and add donor_id to ce_     *
;    *                                  event_modifier table.               *
;    *028 09/21/99 Chris Heil           Post units of measure with alpha    *
;    *                                  responses.                          *
;    *029 04/06/99 Chris Heil           Add electronic signature line.      *
;    *030 08/01/00 Gary Runde           Check for synch posting before      *
;    *                                  processing script                   *
;    *031 10/11/00 Chris Heil           Fill out collating_seq on CE table  *
;    *                                  to sort outbound results.           *
;    *                                  Allow logging override with DM_INFO.*
;    *032 10/12/00 Kevin Winkel         Changes made for modifications to   *
;                                       ce_event_modifier table             *
;    *033 08/01/01 Kevin Emerson        Add order action event prsnl for    *
;                                       inbox result endorsement.           *
;    *034 08/16/01 Mike Gabrick         Add checking for twice-verified     *
;                                       result.                             *
;    *035 09/26/01 Gary Runde           Rename to pfmt_gl_to_event_old      *
;    *036 12/18/01 Gary Runde           Add validate to fail_reason_flag    *
;    *037 01/15/02 Gary Runde           Add with persist to context record  *
;    *038 03/20/02 Gary Runde           Result Recovery Logic               *
;    *039 11/24/02 Kevin Power          Resolve posting HLA recipient data  *
;                                       on 'performed results.'             *
;    *040 12/5/03  Amy Henry	          Resolve posting HLA Typing RR on CE *
;                                       when a parent event already exists  *
;    *041 03/11/04 Andrew Dittrich      Added join to ORDER table to        *
;    *                                  return ORIG_ORDER_DT_TM and _TZ     *
;    *042 08/30/04 Andrew Dittrich    Now uses glb_format_result_decimal.inc*
;    *043 08/31/04 Craig Sumrall        Added request fields for signature  *
;    *044 01/17/06 Nick Smith           Handle scientific notation results  *
;    *045 07/25/06 Jason Osborn         Handle multiple antigens on products*
;    *046 07/25/06 Nick Smith           Add suppress_line_ind to request.   *
;    *047 12/06/06 Matt Schile          Adding posting of result alpha mnemonic*
;    *048 06/11/07 Elliott Hoffman      Support online code sets        	*
;    *049 07/20/07 Abraham Areguy       Added posting of recvd_dt_tm        *
;    *050 01/11/08 SR015537             Fix for defect 1-1550216988         *
;    *051 01/12/08 AR017304             Added Logic for LOINC Assignment    *
;    *052 04/03/08 MS011812             Multiple comments enhancement       *
;    *053 08/04/09 CG8820               Added support for Helix LOINC pref. *
;    *022 08/10/09 RD017636             Remove comments enhancement         *
;    *055 11/02/10 MB018382             Fix for defect 1-3993840231         *
;    *056 11/17/10 MB018382             Fix for defect 1-4335484969         *
;    *057 12/03/12 GS022503             Fix for CR 1-5665655154 - skipping  *
;										control codes posting to clinical_event*
;										table for blood bank orderables     *
;    *058 05/02/14 Hal Patchen          Check fixed width font preference   *
;~DE~************************************************************************
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program pfmt_gl_to_event_old:dba go                      ;035
create program pfmt_gl_to_event_old:dba                       ;035
 
%i CCLSOURCE:GLB_SCRIPT_LOGGING.INC                                  ;026
SET LOG_PROGRAM_NAME = "pfmt_gl_to_event_old"                        ;026  ;035
 
   if (CD->cerner_prsnl_id = 0)                                        ;020
;022      set CD->cerner_prsnl_id = request->event_personnel_id            ;020
      set CD->cerner_prsnl_id = requestin->request->event_personnel_id ;022
   endif                                                               ;020
 
/****************************************************************************
* Internationalization                                                       *
*****************************************************************************/

    ; INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
   ; INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
   set i18nHandle = 0
   ; CALL UAR_I18NLOCALIZATIONINIT
   set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)

  /************************************************************************
  * Declare Record to Pass Signature Line Parameters                      *
  ************************************************************************/
  record request                                                       ;029
  (                                                                    ;029
      1  verified_prsnl_id     = f8                                    ;029
      1  verified_dt_tm        = dq8                                   ;029
      1  verified_tz           = i4
      1  task_assay_cd         = f8                                    ;029
      1  row_qual[*]                                                   ;029
         2  line_num           = i4                                    ;029
         2  col_qual[*]                                                ;029
            3  position        = i4                                    ;029
            3  value           = c200                                  ;029
            3  max_size        = i4                                    ;029
            3  literal_display = c100                                  ;029
            3  literal_size    = i4                                    ;029
         2  suppress_line_ind  = i2
      1  max_cols              = i4                                    ;029
      1  called_ind            = c1
      1  perform_prsnl_id      = f8
      1  perform_dt_tm         = dq8
      1  perform_tz            = i4
  )                                                                    ;029
 
  record reply                                                         ;029
  (                                                                    ;029
     1 signature_line  = vc                                            ;029
%i cclsource:status_block.inc                                          ;029
  )                                                                    ;029

/* To create request for 1040001 (PCS_ADD_RES_CD_ARGS) */
%i cclsource:pm_dynamic_query.inc
%i cclsource:pm_create_request.inc

  call cr_createRequest(0, 1040001, "req1040001") 
  
/***********************************************************************
 *   Print date and time to log file.                                  *
 ***********************************************************************/
  select into "nl:"                                                ;026
    currentdate = cnvtdatetime(curdate,curtime3)                   ;026
  detail                                                           ;026
    sText = fillstring(254, " ")                                   ;026
    sText = CONCAT("{{Script::PFMT_GL_TO_EVENT}} Started at ",     ;026
                   format(currentdate, "dd-mmm-yyyy-hhmm;;d"))     ;026
    call uar_SysEvent(hSys, 4, "ScriptBegin", NULLTERM(sText))     ;026
  with nocounter                                                   ;026
 
 
   /***********************************************************************
   * Subroutines                                                          *
   ***********************************************************************/
%i cclsource:glb_format_result_decimal.inc

%i cclsource:pn_assay_info.inc

%i cclsource:pcs_preference_manager.inc

   declare PopulateEventNoteIds() = NULL with protect

   record vc_string
   (
      1  curr_long_text = vc
      1  curr_dt_tm     = dq8
      1  curr_tz        = i4
      1  curr_prsnl_id  = f8
   )
   
   declare d_curr_bb_result_id             = f8 with public, noconstant(0.0)
   declare use_recvd_dt_tm_old_ind         = i2 with protect, noconstant(0)
   declare d_req_in_lab_dt_tm              = f8 with protect, noconstant(0.0)
   declare i_req_interface_flag            = i2 with protect, noconstant(0)
   declare comment_pref_loaded_ind         = i2 with protect, noconstant(0)
   declare post_one_comment                = vc with protect, noconstant("")
   
   ;Feature 165264
   declare GetAssignmentMethod(sActivityTypeMean = vc) = f8 with protect
   declare isPreferenceLoaded(activityTypeMeaning = vc) = i2 with protect
   
   ; Feature 200139
   declare lCommentCnt             = i4 with protect, noconstant(0)
   declare nPopulateResComInd      = i2 with protect, noconstant(0)
   declare nPopulateResNoteInd     = i2 with protect, noconstant(0)
   declare nTextNotBlankInd        = i2 with protect, noconstant(0)
   declare nResComPopulatedInd     = i2 with protect, noconstant(0)
   declare nResNotePopulatedInd    = i2 with protect, noconstant(0)
   
   declare ProcessInboundRefCds() = null with protect
   declare ARG_DB_CD               = f8 with protect, noconstant(uar_get_code_by("MEANING" , 4002244 , "ARG_DB"))   
   
   ;Feature 165264
	Subroutine isPreferenceLoaded(activityTypeMeaning)
		declare idx = i2 with protect, noconstant(1)
		for(idx = 1 to size(loinc_assignment->activity_type_list,5))
			if(trim(activityTypeMeaning) = trim(loinc_assignment->activity_type_list[idx].activity_type_meaning))			
				return (1)
			endif 
		endfor
		return (0)
	End
	
   ;Feature 165264
 	Subroutine GetAssignmentMethod(sActivityTypeMean)
 	 	declare assigment_method_cd = f8 with protect, noconstant(0.0)
        ;Determine the activity type
	    case (sActivityTypeMean)
	       of "GLB":
	          set assigment_method_cd = uar_get_code_by("MEANING", 4002244, "TMS")
	       of "HLX":                                                                ;053
	          set assigment_method_cd = uar_get_code_by("MEANING", 4002244, "TMS")  ;053
	       ;of "BB":
	        ; set assigment_method_cd = uar_get_code_by("MEANING",4002244,"BB")            
	    endcase
       return (assigment_method_cd)
 	End
 	
   /***********************************************************************
   * Process Details Subroutine                                           *
   ***********************************************************************/
   subroutine ProcessDetails ( none1 )
 
Call LOG_MESSAGE ("Called into ProcessDetails", LOG_LEVEL_DEBUG)                          ;026

Call LOG_MESSAGE (build( "Processing assaycnt: ", elcnt ), LOG_LEVEL_DEBUG)               ;026
 
   ;* These indexes are defined to track the number of occurs
   ;* used within each child_event structure of a result.
   set bridx = 0        ;* Blob result
   set bidx = 0         ;* Blob
   set sidx = 0         ;* String result
   set cridx = 0        ;* Coded result                                ;022
   set didx = 0         ;* Date result
   set spidx = 0        ;* Specimen
   set string_flag = 0
   if (requestin->reply->orders[ordcnt]->assays[elcnt]
     ->result_status_cd = CD->correct_status_cd)
      set correct_ind = 1
   else
      set correct_ind = 0
   endif
 
   if (validate(requestin->request->orders[ordcnt]->assays[elcnt]->product_id, -1) = -1)
      ;* Skip Blood Bank logic
      set product_written = 0
      set d_curr_bb_result_id = 0.0
      
      if (activity_subtype_mean != "HLA TYPING")  
           ;reset the use_product_level_ind
         set three_level_ind = 0
      endif
   else
      if (requestin->request->orders[ordcnt]->assays[elcnt]->product_id > 0
      and (requestin->request->orders[ordcnt]->assays[elcnt]->product_id != product_written
       or  requestin->reply->orders[ordcnt]->assays[elcnt]->bb_result_id != d_curr_bb_result_id))
       
Call LOG_MESSAGE (build("(prev) product_written:", product_written), LOG_LEVEL_DEBUG)      ;026
 
         set prodcnt = elcnt2
         set prodcnt = prodcnt + 1
 
         Call LOG_MESSAGE (build("prodcnt: ", prodcnt), LOG_LEVEL_DEBUG)                   ;026
 
         set elcnt3 = 0
         set prod_antigen_cnt = 0
         ;* Create one instance for each product. Thus: 1 clinical event
         ;* for the order, 1 child event list for each product,
         ;* 1 child event list under the previous one for each result
         ;* for the product
         set stat = alterlist( replyout->clin_event->child_event_list[prodcnt]->product, 1)
         
         set product_written = requestin->request->orders[ordcnt]->assays[elcnt]->product_id  
         set d_curr_bb_result_id = requestin->reply->orders[ordcnt]->assays[elcnt]->bb_result_id

         set three_level_ind = 1                                       ;006
         select
            prod.product_cd,
            prod.product_nbr,
            bp.cur_abo_cd,
            bp.cur_rh_cd
         from
            product prod,
            blood_product bp
         plan prod where requestin->request->orders[ordcnt]->assays[elcnt]
                             ->product_id = prod.product_id
         join bp   where requestin->request->orders[ordcnt]->assays[elcnt]
                             ->product_id = bp.product_id
         detail
            replyout->clin_event->child_event_list[prodcnt]->product[1]
              ->product_id =
              requestin->request->orders[ordcnt]->assays[elcnt]->product_id
            replyout->clin_event->child_event_list[prodcnt]->product[1]
              ->product_nbr =
             concat(trim(bp.supplier_prefix), trim(prod.product_nbr), " ", trim(prod.product_sub_nbr))
            replyout->clin_event->child_event_list[prodcnt]->product[1]
              ->product_cd = prod.product_cd
            replyout->clin_event->child_event_list[prodcnt]->product[1]
              ->abo_cd = bp.cur_abo_cd
            replyout->clin_event->child_event_list[prodcnt]->product[1]
              ->rh_cd = bp.cur_rh_cd
         with nocounter
         CALL ERROR_MESSAGE(0)                                ;026
 
         Call LOG_MESSAGE (build("(new) product_written (product_id):", product_written), LOG_LEVEL_DEBUG)                 ;026
 
         Call LOG_MESSAGE (concat("Product Number: ", replyout->clin_event->
                        child_event_list[prodcnt]->product[1]->product_nbr), LOG_LEVEL_DEBUG)                                ;026
 
         call SetHeaderForProduct( 0 )
 
         CALL ERROR_MESSAGE(0)                           ;026
 
         ;* Add ce_event_prsnl for "Product" row.
         ;* verified_dt_tm on the clinical_event table is set only
         ;* if there is a ce_event_prsnl row with a action_type_cd =
         ;* verified.  The following code creates event_prsnl_list
         ;* instances for the "Product"/2nd level row for verified
         ;* or corrected events.
         if ( validate( CDBB->blood_bank_ind , "N" ) = "Y" )           ;013
            if (requestin->reply->orders[ordcnt]->assays[elcnt]        ;013
              ->result_status_cd = CD->correct_status_cd)              ;013
               set stat = alterlist( replyout->clin_event              ;013
                 ->child_event_list[prodcnt]->event_prsnl_list, 1 )    ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_type_cd =               ;013
                 CD->ce_modified_status_cd                             ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_dt_tm =                 ;013
                 requestin->reply->event_dt_tm                         ;013
               if(curutc = 1)
                 set replyout->clin_event->child_event_list[prodcnt]
                   ->event_prsnl_list[1]->action_tz =
                   requestin->reply->event_tz
               endif
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_dt_tm_ind = 0           ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_prsnl_id =              ;013
                 requestin->request->event_personnel_id                ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_status_cd =             ;013
                 CD->ce_cplt_status_cd                                 ;013
            else                                                       ;013
               set stat = alterlist( replyout->clin_event              ;013
                 ->child_event_list[prodcnt]->event_prsnl_list, 2 )    ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_type_cd =               ;013
                 CD->ce_verify_status_cd                               ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_dt_tm =                 ;013
                 requestin->reply->event_dt_tm                         ;013
               if(curutc = 1)
                   set replyout->clin_event->child_event_list[prodcnt]
                     ->event_prsnl_list[1]->action_tz =
                     requestin->reply->event_tz
               endif
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_dt_tm_ind = 0           ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_prsnl_id =              ;013
                 requestin->request->event_personnel_id                ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[1]->action_status_cd =             ;013
                 CD->ce_cplt_status_cd                                 ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[2]->action_type_cd =               ;013
                 CD->ce_perform_status_cd                              ;013
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[2]->action_dt_tm =                 ;013
;014                 requestin->request->orders[ordcnt]->assays[elcnt]     ;013
;014                 ->perform_dt_tm                                       ;013
                 requestin->reply->orders[ordcnt]->assays[elcnt]       ;014
                 ->perform_dt_tm                                       ;014
               if(curutc = 1)
                  set replyout->clin_event->child_event_list[prodcnt]
                    ->event_prsnl_list[2]->action_tz =
                    requestin->reply->orders[ordcnt]->assays[elcnt]
                                     ->perform_tz
               endif
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[2]->action_dt_tm_ind = 0           ;013
               if (requestin->request->orders[ordcnt]->assays[elcnt]   ;019
                 ->perform_personnel_id = 0)                           ;019
                  set replyout->clin_event->child_event_list[prodcnt]  ;019
                    ->event_prsnl_list[2]->action_prsnl_id =           ;019
                    CD->cerner_prsnl_id                                ;019
               else                                                    ;019
                  set replyout->clin_event->child_event_list[prodcnt]  ;019
                    ->event_prsnl_list[2]->action_prsnl_id =           ;019
                    requestin->request->orders[ordcnt]->assays[elcnt]  ;019
                    ->perform_personnel_id                             ;019
               endif                                                   ;019
               set replyout->clin_event->child_event_list[prodcnt]     ;013
                 ->event_prsnl_list[2]->action_status_cd =             ;013
                 CD->ce_cplt_status_cd                                 ;013
            endif                                                      ;013
            CALL ERROR_MESSAGE(0)                                      ;026
         endif
      else
         if (requestin->request->orders[ordcnt]->assays[elcnt]->product_id > 0
         and requestin->request->orders[ordcnt]->assays[elcnt]->product_id =
                             product_written)
            set elcnt2 = elcnt2 - 1
         endif
      endif
      if (requestin->request->orders[ordcnt]->assays[elcnt]->product_id > 0)
         Call LOG_MESSAGE (build("Special testing verify YN: ",
           requestin->request->orders[ordcnt]->assays[elcnt]
           ->special_testing_verify_yn), LOG_LEVEL_DEBUG)                          ;026
 
         Call LOG_MESSAGE (build("BB result code set cd: ",
           requestin->request->orders[ordcnt]->assays[elcnt]
           ->bb_result_code_set_cd), LOG_LEVEL_DEBUG)                                   ;026
 
 
         if (requestin->request->orders[ordcnt]->assays[elcnt]
           ->special_testing_verify_yn = "Y"
         and requestin->request->orders[ordcnt]->assays[elcnt]
           ->bb_result_code_set_cd > 0)
 
            Call LOG_MESSAGE ("Build antigen list", LOG_LEVEL_DEBUG)                    ;026
 
            set prod_antigen_cnt = prod_antigen_cnt + 1
            if ( prod_antigen_cnt > 0 )
               set stat = alterlist( replyout->clin_event
                 ->child_event_list[prodcnt]->product[1]
                 ->product_antigen_list, prod_antigen_cnt)
            endif
            set replyout->clin_event->child_event_list[prodcnt]->product[1]
              ->product_antigen_list[prod_antigen_cnt]->antigen_cd =
              requestin->request->orders[ordcnt]->assays[elcnt]
              ->bb_result_code_set_cd
            set replyout->clin_event->child_event_list[prodcnt]->product[1]
              ->product_antigen_list[prod_antigen_cnt]->prod_ant_seq_nbr =
              prod_antigen_cnt
            set replyout->clin_event->child_event_list[prodcnt]
              ->subtable_bit_map = 3145729
            set replyout->clin_event->child_event_list[prodcnt]->product[1]
              ->product_status_cd = CDBB->antigen_status_cd
            set replyout->clin_event->child_event_list[prodcnt]->reference_nbr =
                     build(replyout->clin_event->child_event_list[prodcnt]->reference_nbr,
                           requestin->reply->orders[ordcnt]->assays[elcnt]->result_id)
         else
            if (requestin->request->orders[ordcnt]->assays[elcnt]
              ->product_id > 0)
               set replyout->clin_event->child_event_list[prodcnt]->product[1]
                 ->product_status_cd = CDBB->crossmatched_status_cd
               set replyout->clin_event->child_event_list[prodcnt]
                 ->subtable_bit_map = 1048577
            endif
         endif
      endif
   endif
 
   set tasks->dta_cd =
     requestin->request->orders[ordcnt]->assays[elcnt]->task_assay_cd
   execute TaskListGet
   if (tasks->event_cd = 0)
      Call LOG_MESSAGE (build ("No event code for task assay:", tasks->dta_cd), LOG_LEVEL_DEBUG)   ;026
      Call LOG_MESSAGE ("WILL NOT POST THIS RESULT TO OCF.", LOG_LEVEL_DEBUG)                      ;026
   else
      ;* For HLA Typing orders, set elcnt2 = 0 and prodcnt = 1 each time.
      ;* This will ensure that the level 2 structure ends up with 1
      ;* occurence and that all level 3 structures are added to the first
      ;* occurance of level 2.
      if (activity_subtype_mean = "HLA TYPING")                        ;006
         set elcnt2 = 0                                                ;006
         set prodcnt = 1                                               ;006
      endif                                                            ;006
 
      set elcnt2 = elcnt2 + 1
      set elcnt3 = elcnt3 + 1   ;yck
      call SetHeader( 0 )
 
      Call LOG_MESSAGE (build("processing assay:", tasks->dta_cd,
        " to event:", tasks->event_cd ), LOG_LEVEL_DEBUG)                               ;026
 
      if (outbound_seq_ind = 1)                                                                    ;031
        select into "nl:"                                                                          ;031
          ptr.sequence                                                                             ;031
        from profile_task_r ptr                                                                    ;031
        where ptr.catalog_cd = replyout->clin_event->catalog_cd                                    ;031
          and ptr.task_assay_cd = tasks->dta_cd                                                    ;031
        detail                                                                                     ;031
           dta_seq = ptr.sequence                                                                  ;031
        with nocounter                                                                             ;031
      endif                                                                                        ;031
;006      if (product_written = 0)
      if (three_level_ind = 0)                                         ;006
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_cd = tasks->event_cd
         set replyout->clin_event->child_event_list[elcnt2]
           ->task_assay_cd = tasks->dta_cd
         set replyout->clin_event->child_event_list[elcnt2]
           ->resource_cd =
           requestin->request->orders[ordcnt]->assays[elcnt]
           ->service_resource_cd
         if (outbound_seq_ind = 1)                                                                 ;031
           set replyout->clin_event->child_event_list[elcnt2]                                      ;031
             ->collating_seq = format(dta_seq, "#####;p0")                                         ;031
         endif                                                                                     ;031
      else
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_cd = tasks->event_cd
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->task_assay_cd = tasks->dta_cd
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->resource_cd =
           requestin->request->orders[ordcnt]->assays[elcnt]
           ->service_resource_cd
         if (outbound_seq_ind = 1)                                                                 ;031
           set replyout->clin_event->child_event_list[prodcnt]                                     ;031
             ->child_event_list[elcnt3]->collating_seq = format(dta_seq, "#####;p0")               ;031
         endif                                                                                     ;031
      endif
 
      set num_min = 0
      set num_max = 0
      set num_dec = 0
      set num_less_great_flag = 0
      set num_sci_note_ind = 0
      set num_value = 0.0
      set date_rslt_type = 0                                           ;007
      set comment_ind = 0                                              ;029
 
      set result_type =
        requestin->request->orders[ordcnt]->assays[elcnt]->result_type_cd
 
      ;* Determine if the scientific notation indicator is set for this assay
      set num_sci_note_ind = get_sci_notation_ind(requestin->request->orders[ordcnt]->assays[elcnt]->task_assay_cd)
 
      ;* Need to add new Result types
      case (result_type)
        of CD->txt_result_type_cd:
           call TextResult ( 0 )
           call FootNote ( 0 )
           call SignatureLine ( 0 )                                    ;029
           call Prsnl ( 0 )
 
        of CD->alp_result_type_cd:
           call AlphaResult ( 0 )
           call FootNote ( 0 )
           call Prsnl ( 0 )
 
        of CD->num_result_type_cd:
           call NumericResult ( 0 )
           call FootNote ( 0 )
           call Prsnl ( 0 )
 
        of CD->interp_result_type_cd:
           call InterpResult ( 0 )
           call FootNote ( 0 )
           call SignatureLine ( 0 )                                    ;029
           call Prsnl ( 0 )
 
        of CD->date_result_type_cd:
           set date_rslt_type = 1                                      ;007
           call DateResult ( 0 )
           call FootNote ( 0 )
           call Prsnl ( 0 )
 
        of CD->freetxt_result_type_cd:
           call FreetextResult ( 0 )
           call FootNote ( 0 )
           call Prsnl ( 0 )
 
        of CD->cal_result_type_cd:
           ;* Add processing for components
           call CalcResult ( 0 )
           call FootNote ( 0 )
           call Prsnl ( 0 )
 
        of CD->time_result_type_cd:
           set date_rslt_type = 2                                      ;007
           call DateResult ( 0 )
           call FootNote ( 0 )
           call Prsnl ( 0 )
 
        of CD->date_time_result_type_cd:
           set date_rslt_type = 0                                      ;007
           call DateResult ( 0 )
           call FootNote ( 0 )
           call Prsnl ( 0 )        
 
        else
 
           ;support online code sets                                ;047
           if((result_type = CD->online_codeset_type_cd) AND (requestin->request->orders[ordcnt]->activity_type_mean = "HLX")) 
             call LOG_MESSAGE("online code set", LOG_LEVEL_DEBUG)
             call OnlineCodeSetResult(0)
             call FootNote ( 0 )
             call Prsnl ( 0 )        
        
           elseif (requestin->request->orders[ordcnt]->assays[elcnt]
             ->result_value_numeric != 0 )
              Call LOG_MESSAGE ("default numeric" , LOG_LEVEL_DEBUG)                       ;026
 
              call NumericResult ( 0 )
              call FootNote ( 0 )
              call Prsnl ( 0 )
           else
 
              Call LOG_MESSAGE ("default alpha", LOG_LEVEL_DEBUG)          ;026
 
              call AlphaResult ( 0 )
              call FootNote ( 0 )
              call Prsnl ( 0 )
           endif
      endcase
      
      ;Call the PopulateEventNoteIds subroutine after all of the subroutines that populate the event_note structure
      ;have been called.
      call PopulateEventNoteIds(0)
 
;006      if (product_written = 0)
      if (three_level_ind = 0)                                         ;006
         set replyout->clin_event->child_event_list[elcnt2]
           ->result_val =
           replyout->clin_event->child_event_list[elcnt2]->event_tag
         set replyout->clin_event->child_event_list[elcnt2]
           ->result_units_cd =
           requestin->request->orders[ordcnt]->assays[elcnt]->units_cd
         set replyout->clin_event->child_event_list[elcnt2]
           ->verified_dt_tm =
           requestin->reply->event_dt_tm
         set replyout->clin_event->child_event_list[elcnt2]
           ->verified_dt_tm_ind = 0
         if(curutc = 1)
           set replyout->clin_event->child_event_list[elcnt2]
             ->verified_tz =  requestin->reply->event_tz
         endif
         set replyout->clin_event->child_event_list[elcnt2]
           ->verified_prsnl_id =
           requestin->request->event_personnel_id
         set replyout->clin_event->child_event_list[elcnt2]
           ->performed_dt_tm =
;011           requestin->request->orders[ordcnt]->assays[elcnt]->perform_dt_tm
           requestin->reply->orders[ordcnt]->assays[elcnt]->perform_dt_tm ;011
         if(curutc = 1)
            set replyout->clin_event->child_event_list[elcnt2]
              ->performed_tz =
              requestin->reply->orders[ordcnt]->assays[elcnt]->perform_tz
         endif
         set replyout->clin_event->child_event_list[elcnt2]
           ->performed_dt_tm_ind = 0
         if (requestin->request->orders[ordcnt]->assays[elcnt]
           ->perform_personnel_id = 0)                                 ;019
            set replyout->clin_event->child_event_list[elcnt2]         ;019
              ->performed_prsnl_id =                                   ;019
              CD->cerner_prsnl_id                                      ;019
         else                                                          ;019
            set replyout->clin_event->child_event_list[elcnt2]
              ->performed_prsnl_id =
              requestin->request->orders[ordcnt]->assays[elcnt]
              ->perform_personnel_id
         endif                                                         ;019
      else
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->result_val =
           replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_tag
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->result_units_cd =
           requestin->request->orders[ordcnt]->assays[elcnt]->units_cd
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->verified_dt_tm =
           requestin->reply->event_dt_tm
         if(curutc = 1)
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->verified_tz =
           requestin->reply->event_tz
         endif
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->verified_dt_tm_ind = 0
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->verified_prsnl_id =
           requestin->request->event_personnel_id
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->performed_dt_tm =
           requestin->request->orders[ordcnt]->assays[elcnt]->perform_dt_tm
         if(curutc = 1)
            set replyout->clin_event->child_event_list[prodcnt]
             ->child_event_list[elcnt3]->performed_tz =
             requestin->reply->orders[ordcnt]->assays[elcnt]->perform_tz
         endif
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->performed_dt_tm_ind = 0
         if (requestin->request->orders[ordcnt]->assays[elcnt]
           ->perform_personnel_id = 0)                                 ;019
            set replyout->clin_event->child_event_list[prodcnt]        ;019
              ->child_event_list[elcnt3]->performed_prsnl_id =         ;019
              CD->cerner_prsnl_id                                      ;019
         else                                                          ;019
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->performed_prsnl_id =
              requestin->request->orders[ordcnt]->assays[elcnt]
              ->perform_personnel_id
         endif                                                         ;019
      endif
 
      if (requestin->request->orders[ordcnt]->assays[elcnt]->container_id > 0)
         call ProcessSpecimenInfo ( 0 )
      endif
 
;      call ProcessInterpData ( 0 )
      call SetNormal ( 0 )

      if (AddImages( 0 ) = 0)
        return (0)
      endif

;006      if (product_written = 0)
      if (three_level_ind = 0)                                         ;006
         set replyout->clin_event->child_event_list[elcnt2]
           ->subtable_bit_map_ind = 0
         set replyout->clin_event->child_event_list[elcnt2]
           ->subtable_bit_map = subtablemap
 
         Call LOG_MESSAGE (build("subtable bit map: ",
           replyout->clin_event->child_event_list[elcnt2]->subtable_bit_map), LOG_LEVEL_DEBUG)  ;026
         Call LOG_MESSAGE (build("result: ",
           replyout->clin_event->child_event_list[elcnt2]->event_tag), LOG_LEVEL_DEBUG)         ;026
 
      else
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->subtable_bit_map_ind = 0
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->subtable_bit_map = subtablemap
 
         Call LOG_MESSAGE (build("subtable bit map: ",
           replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->subtable_bit_map), LOG_LEVEL_DEBUG)                      ;026
 
         Call LOG_MESSAGE (build("result: ",
           replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_tag), LOG_LEVEL_DEBUG)
 
      endif
 
      ;* If correcting, attempt to inactivate the previous result
      ;* to keep Powerchart from displaying both result values as
      ;* active.  This happens when results exists on multiple tables
      ;* for example ce_string_result and ce_coded_result.
      if (correct_ind = 1)                                             ;022
         case (result_type)                                            ;022
                                                                       ;022
           of CD->alp_result_type_cd:                                  ;022
              call InactivateStringResult( 0 )                         ;022
                                                                       ;022
           of CD->num_result_type_cd:                                  ;022
              call InactivateCodedResult( 0 )                          ;022
                                                                       ;022
           of CD->freetxt_result_type_cd:                              ;022
              call InactivateCodedResult( 0 )                          ;022
                                                                       ;022
           of CD->cal_result_type_cd:                                  ;022
              call InactivateCodedResult( 0 )                          ;022
                                                                       ;022
         endcase                                                       ;022
      endif                                                            ;022
   endif
 
   call ProcessInboundRefCds(0)
   
   end
 
   /***********************************************************************
   * Set Header For Product Subroutine                                    *
   ***********************************************************************/
   subroutine SetHeaderForProduct( none19 )
 
   set replyout->clin_event->child_event_list[prodcnt]->event_start_dt_tm =
     replyout->clin_event->event_start_dt_tm
   set replyout->clin_event->child_event_list[prodcnt]->event_end_dt_tm =
     replyout->clin_event->event_end_dt_tm
   if (replyout->clin_event->event_start_dt_tm = NULL)                 ;021
      Call LOG_MESSAGE ("Event start date time is NULL", LOG_LEVEL_DEBUG)              ;026
   endif                                                               ;021
   if (replyout->clin_event->event_end_dt_tm = NULL)                   ;021
      Call LOG_MESSAGE ("Event end date time is NULL", LOG_LEVEL_DEBUG)                ;026
   endif                                                               ;021
 
   set replyout->clin_event->child_event_list[prodcnt]
     ->valid_until_dt_tm_ind = replyout->clin_event->valid_until_dt_tm_ind
   set replyout->clin_event->child_event_list[prodcnt]
     ->valid_from_dt_tm_ind = replyout->clin_event->valid_from_dt_tm_ind
   set replyout->clin_event->child_event_list[prodcnt]
     ->updt_dt_tm_ind = replyout->clin_event->updt_dt_tm_ind
 
   set replyout->clin_event->child_event_list[prodcnt]
     ->order_id = replyout->clin_event->order_id
   set replyout->clin_event->child_event_list[prodcnt]
     ->person_id = replyout->clin_event->person_id
   set replyout->clin_event->child_event_list[prodcnt]
     ->encntr_id = replyout->clin_event->encntr_id
   set replyout->clin_event->child_event_list[prodcnt]
     ->accession_nbr = replyout->clin_event->accession_nbr
   set replyout->clin_event->child_event_list[prodcnt]
     ->catalog_cd = replyout->clin_event->catalog_cd
 
   set replyout->clin_event->child_event_list[prodcnt]
     ->record_status_cd = CD->active_cd
   if (correct_ind = 1)
      set replyout->clin_event->child_event_list[prodcnt]
        ->result_status_cd = CD->modified_cd
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->result_status_cd = CD->auth_cd
   endif
 
   set replyout->clin_event->child_event_list[prodcnt]->authentic_flag = 1
   set replyout->clin_event->child_event_list[prodcnt]->view_level = 0
 
   if (validate(                                                       ;005
     requestin->request->orders[ordcnt]->do_not_chart_ind,0) = 0)      ;005
      set replyout->clin_event->child_event_list[prodcnt]
        ->publish_flag = 1
   else                                                                ;005
      set replyout->clin_event->child_event_list[prodcnt]              ;005
        ->publish_flag = 0                                             ;005
   endif                                                               ;005
 
   set replyout->clin_event->child_event_list[prodcnt]
     ->contributor_system_cd = replyout->clin_event->contributor_system_cd
   set replyout->clin_event->child_event_list[prodcnt]
     ->event_reltn_cd = CD->child_event_reltn_cd
   set replyout->clin_event->child_event_list[prodcnt]
     ->event_class_cd = CD->grp_event_class_cd
   set replyout->clin_event->child_event_list[prodcnt]
     ->reference_nbr = build(requestin->request->orders[ordcnt]->order_id,
     requestin->request->orders[ordcnt]->catalog_cd,
     requestin->request->orders[ordcnt]->assays[elcnt]->product_id)
 
   Call LOG_MESSAGE (build("prod reference nbr: ",
     replyout->clin_event->child_event_list[prodcnt]->reference_nbr), LOG_LEVEL_DEBUG)  ;026
 
   set replyout->clin_event->child_event_list[prodcnt]
     ->inquire_security_cd = replyout->clin_event->inquire_security_cd
   set replyout->clin_event->child_event_list[prodcnt]
     ->event_tag = replyout->clin_event->event_tag
   ;* Need alias for blood bank product - for international reasons
   set replyout->clin_event->child_event_list[prodcnt]
     ->event_cd = CDBB->product_event_cd
   set replyout->clin_event->child_event_list[prodcnt]                 ;001
     ->verified_dt_tm = requestin->reply->event_dt_tm                  ;001
   if(curutc = 1)
      set replyout->clin_event->child_event_list[prodcnt]
        ->verified_tz = requestin->reply->event_tz
   endif
   set replyout->clin_event->child_event_list[prodcnt]                 ;001
     ->verified_dt_tm_ind = 0                                          ;001
 
   end
 
   /***********************************************************************
   * Set Header Subroutine                                                *
   ***********************************************************************/
   subroutine SetHeader( none2 )
 
   Call LOG_MESSAGE ("Called into SetHeader", LOG_LEVEL_DEBUG)                          ;026
 
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_start_dt_tm = replyout->clin_event->event_start_dt_tm
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_end_dt_tm = replyout->clin_event->event_end_dt_tm
      set replyout->clin_event->child_event_list[elcnt2]
        ->valid_until_dt_tm_ind = replyout->clin_event->valid_until_dt_tm_ind
      set replyout->clin_event->child_event_list[elcnt2]
        ->valid_from_dt_tm_ind = replyout->clin_event->valid_from_dt_tm_ind
      set replyout->clin_event->child_event_list[elcnt2]
        ->updt_dt_tm_ind = replyout->clin_event->updt_dt_tm_ind
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->order_id = replyout->clin_event->order_id
      set replyout->clin_event->child_event_list[elcnt2]
        ->person_id = replyout->clin_event->person_id
      set replyout->clin_event->child_event_list[elcnt2]
        ->encntr_id = replyout->clin_event->encntr_id
      set replyout->clin_event->child_event_list[elcnt2]
        ->accession_nbr = replyout->clin_event->accession_nbr
      set replyout->clin_event->child_event_list[elcnt2]
        ->catalog_cd = replyout->clin_event->catalog_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->contributor_system_cd = replyout->clin_event->contributor_system_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->inquire_security_cd = replyout->clin_event->inquire_security_cd
      if (requestin->request->orders[ordcnt]->assays[elcnt]->result_key =
        requestin->reply->orders[ordcnt]->assays[elcnt]->result_key)
         set fidx = elcnt
      else
         set nbr_of_assays_reply =
           size(requestin->reply->orders[ordcnt]->assays, 5)
         for (fidx = 1 to nbr_of_assays_reply)
            if (requestin->request->orders[ordcnt]->assays[elcnt]->result_key =
              requestin->reply->orders[ordcnt]->assays[fidx]->result_key)
               exitfor
            endif
         endfor
      endif
      set replyout->clin_event->child_event_list[elcnt2]
        ->reference_nbr = build(requestin->request->orders[ordcnt]->order_id,
        requestin->reply->orders[ordcnt]->assays[fidx]->result_id,
        requestin->request->orders[ordcnt]->assays[elcnt]->task_assay_cd)
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->view_level = 1
      set replyout->clin_event->child_event_list[elcnt2]
        ->authentic_flag = 1
      ;* Remove when publish flag can be determined by client
      if ( validate( CDBB->blood_bank_ind , "N" ) = "Y" )
         set hold_set_name = " "
         select into "nl:"
            e.event_set_name
         from
            v500_event_code e
         where e.event_cd = tasks->event_cd
         detail
            hold_set_name = e.event_set_name
         with
           nocounter
         CALL ERROR_MESSAGE(0)                                                  ;026
 
         if (curqual = 0)
            call LOG_MESSAGE("V500 Event Code not found", LOG_LEVEL_DEBUG)                      ;026
 
            set replyout->clin_event->child_event_list[elcnt2]
              ->publish_flag = 0
         else
            if (trim(hold_set_name) > " ")
 
               Call LOG_MESSAGE ("Event Set name not blank", LOG_LEVEL_DEBUG)                   ;026
 
               if (requestin->request->orders[ordcnt]->assays[elcnt]
                 ->bb_control_cell_cd > 0)
                  if (requestin->request->orders[ordcnt]->assays[elcnt]
                    ->antigen_verify_yn = "Y"
                  or requestin->request->orders[ordcnt]->assays[elcnt]
                    ->antibody_verify_yn = "Y")
                     Call LOG_MESSAGE ("Publish flag on", LOG_LEVEL_DEBUG)                      ;026
 
                     set replyout->clin_event->child_event_list[elcnt2]
                       ->publish_flag = 1
                  else
                     Call LOG_MESSAGE ("Publish flag oFF", LOG_LEVEL_DEBUG)                     ;026
 
                     set replyout->clin_event->child_event_list[elcnt2]
                       ->publish_flag = 0
                  endif
               else
                  if (requestin->request->orders[ordcnt]->assays[elcnt]
                    ->product_id > 0
                  and requestin->request->orders[ordcnt]->assays[elcnt]
                    ->special_testing_verify_yn = "Y")
                     Call LOG_MESSAGE ("Publish flag oFF", LOG_LEVEL_DEBUG)                     ;026
 
                     set replyout->clin_event->child_event_list[elcnt2]
                       ->publish_flag = 0
                  else
                     Call LOG_MESSAGE ("Publish flag on", LOG_LEVEL_DEBUG)                      ;026
                     set replyout->clin_event->child_event_list[elcnt2]
                       ->publish_flag = 1
                  endif
               endif
            else
               Call LOG_MESSAGE ("Event Set name blank", LOG_LEVEL_DEBUG)                       ;026
 
               set replyout->clin_event->child_event_list[elcnt2]
                 ->publish_flag = 0
            endif
         endif
      else
         if (validate(
           requestin->request->orders[ordcnt]->do_not_chart_ind,0) = 0) ;005
            set replyout->clin_event->child_event_list[elcnt2]
              ->publish_flag = 1
         else                                                          ;005
            set replyout->clin_event->child_event_list[elcnt2]         ;005
              ->publish_flag = 0                                       ;005
         endif                                                         ;005
      endif
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_reltn_cd = CD->child_event_reltn_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_class_cd = CD->grp_event_class_cd
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->record_status_cd = CD->active_cd
      if (correct_ind = 1)
        set replyout->clin_event->child_event_list[elcnt2]
          ->result_status_cd = CD->modified_cd
      else
        set replyout->clin_event->child_event_list[elcnt2]
          ->result_status_cd = CD->auth_cd
      endif
 
   else
      set stat = alterlist(replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list, elcnt3)
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->event_start_dt_tm =
;006       replyout->clin_event->event_start_dt_tm
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->event_end_dt_tm =
;006       replyout->clin_event->event_end_dt_tm
;006
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->valid_until_dt_tm_ind =
;006       replyout->clin_event->valid_until_dt_tm_ind
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->valid_from_dt_tm_ind =
;006       replyout->clin_event->valid_from_dt_tm_ind
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->updt_dt_tm_ind =
;006       replyout->clin_event->updt_dt_tm_ind
;006
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->order_id =
;006       replyout->clin_event->order_id
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->person_id =
;006       replyout->clin_event->person_id
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->encntr_id =
;006       replyout->clin_event->encntr_id
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->accession_nbr =
;006       replyout->clin_event->accession_nbr
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->catalog_cd =
;006       replyout->clin_event->catalog_cd
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->contributor_system_cd =
;006       replyout->clin_event->contributor_system_cd
;006     set replyout->clin_event->child_event_list[prodcnt]
;006       ->child_event_list[elcnt3]->inquire_security_cd =
;006       replyout->clin_event->inquire_security_cd
 
         ;* Set the level 3 child_event_list variables to the level 2
         ;* child_event_list variables instead of using the level 1
         ;* clin_event variables since for HLA Typing orders the
         ;* clin_event variables aren't always populated.
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->event_start_dt_tm =             ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->event_start_dt_tm                                         ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->event_end_dt_tm =               ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->event_end_dt_tm
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->valid_until_dt_tm_ind =         ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->valid_until_dt_tm_ind                                     ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->valid_from_dt_tm_ind =          ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->valid_from_dt_tm_ind                                      ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->updt_dt_tm_ind =                ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->updt_dt_tm_ind                                            ;006
 
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->order_id =                      ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->order_id                                                  ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->person_id =                     ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->person_id                                                 ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->encntr_id =                     ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->encntr_id                                                 ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->accession_nbr =                 ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->accession_nbr                                             ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->catalog_cd =                    ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->catalog_cd                                                ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->contributor_system_cd =         ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->contributor_system_cd                                     ;006
         set replyout->clin_event->child_event_list[prodcnt]           ;006
           ->child_event_list[elcnt3]->inquire_security_cd =           ;006
           replyout->clin_event->child_event_list[prodcnt]             ;006
           ->inquire_security_cd                                       ;006
 
         if (requestin->request->orders[ordcnt]->assays[elcnt]->result_key =
           requestin->reply->orders[ordcnt]->assays[elcnt]->result_key)
            set fidx = elcnt
         else
            set nbr_of_assays_reply =
              size(requestin->reply->orders[ordcnt]->assays, 5)
            for (fidx = 1 to nbr_of_assays_reply)
               if (requestin->request->orders[ordcnt]->assays[elcnt]
                 ->result_key =
                 requestin->reply->orders[ordcnt]->assays[fidx]->result_key)
                  exitfor
               endif
            endfor
         endif
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->reference_nbr =
           build(requestin->request->orders[ordcnt]->order_id,
           requestin->reply->orders[ordcnt]->assays[fidx]->result_id,
           requestin->request->orders[ordcnt]->assays[elcnt]->task_assay_cd)
 
         Call LOG_MESSAGE (build("Prod detail reference nbr: ",
           replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->reference_nbr), LOG_LEVEL_DEBUG)                 ;026
 
         if (activity_subtype_mean = "HLA TYPING")                     ;006
            set replyout->clin_event->child_event_list[prodcnt]        ;006
              ->child_event_list[elcnt3]->view_level = 0               ;006
         else                                                          ;006
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->view_level = 1
         endif                                                         ;006
 
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->authentic_flag = 1
 
      if ( validate( CDBB->blood_bank_ind , "N" ) = "Y" )              ;006
         if (requestin->request->orders[ordcnt]->assays[elcnt]
           ->special_testing_verify_yn = "Y")
            set replyout->clin_event->child_event_list[prodcnt]
              ->event_cd = CDBB->product_antigen_event_cd
         endif
 
         ;* Remove when publish flag can be determined by client
         set hold_set_name = " "
         select into "nl:"
            e.event_set_name
         from
            v500_event_code e
         where e.event_cd = tasks->event_cd
         detail
            hold_set_name = e.event_set_name
         with
            nocounter
         CALL ERROR_MESSAGE(0)                                    ;026
 
         if (curqual = 0)
            Call LOG_MESSAGE ("V500 Event Code not found", LOG_LEVEL_DEBUG)                     ;026
 
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->publish_flag = 0
         else
            if (trim(hold_set_name) > " ")
               Call LOG_MESSAGE ("Event Set name not blank", LOG_LEVEL_DEBUG)                   ;026
 
               if (requestin->request->orders[ordcnt]->assays[elcnt]
                 ->bb_control_cell_cd > 0)
                  if (requestin->request->orders[ordcnt]->assays[elcnt]
                    ->antigen_verify_yn = "Y"
                  or requestin->request->orders[ordcnt]->assays[elcnt]
                    ->antibody_verify_yn = "Y")
                     Call LOG_MESSAGE ("Publish flag on", LOG_LEVEL_DEBUG)                      ;026
 
                     set replyout->clin_event->child_event_list[prodcnt]
                       ->child_event_list[elcnt3]->publish_flag = 1
                  else
                     Call LOG_MESSAGE ("Publish flag off", LOG_LEVEL_DEBUG)                     ;026
 
                     set replyout->clin_event->child_event_list[prodcnt]
                       ->child_event_list[elcnt3]->publish_flag = 0
                  endif
               else
                  if (requestin->request->orders[ordcnt]->assays[elcnt]
                    ->product_id > 0
                  and requestin->request->orders[ordcnt]->assays[elcnt]
                    ->special_testing_verify_yn = "Y")
                     set replyout->clin_event->child_event_list[prodcnt]
                       ->child_event_list[elcnt3]->publish_flag = 0
                  else
                     Call LOG_MESSAGE ("Publish flag on", LOG_LEVEL_DEBUG)                      ;026
 
                     set replyout->clin_event->child_event_list[prodcnt]
                       ->child_event_list[elcnt3]->publish_flag = 1
                  endif
               endif
            else
               Call LOG_MESSAGE ("Event Set name blank", LOG_LEVEL_DEBUG)                       ;026
 
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->publish_flag = 0
            endif
         endif
      else                                                             ;006
         if (validate(                                                 ;006
           requestin->request->orders[ordcnt]->do_not_chart_ind,0) = 0);006
            set replyout->clin_event->child_event_list[prodcnt]        ;006
              ->child_event_list[elcnt3]->publish_flag = 1             ;006
         else                                                          ;006
            set replyout->clin_event->child_event_list[prodcnt]        ;006
              ->child_event_list[elcnt3]->publish_flag = 0             ;006
         endif                                                         ;006
      endif
 
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_reltn_cd = CD->child_event_reltn_cd
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_class_cd = CD->grp_event_class_cd
 
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->record_status_cd = CD->active_cd
      if (correct_ind = 1)
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->result_status_cd = CD->modified_cd
      else
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->result_status_cd = CD->auth_cd
      endif
   endif
 
   end
 
   /***********************************************************************
   * Set Header Sub Child Subroutine                                      *
   ***********************************************************************/
   subroutine SetHeaderSubChild( none17 )
 
   Call LOG_MESSAGE ("Called into SetHeaderSubChild", LOG_LEVEL_DEBUG)                  ;026
 
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->valid_until_dt_tm_ind =
        replyout->clin_event->valid_until_dt_tm_ind
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->valid_from_dt_tm_ind =
        replyout->clin_event->valid_from_dt_tm_ind
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->updt_dt_tm_ind =
        replyout->clin_event->updt_dt_tm_ind
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->event_start_dt_tm =
        replyout->clin_event->event_start_dt_tm
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->event_end_dt_tm =
        replyout->clin_event->event_end_dt_tm
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->order_id =
        replyout->clin_event->order_id
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->person_id =
        replyout->clin_event->person_id
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->encntr_id =
        replyout->clin_event->encntr_id
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->accession_nbr =
        replyout->clin_event->accession_nbr
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->catalog_cd =
        replyout->clin_event->catalog_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->contributor_system_cd =
        replyout->clin_event->contributor_system_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->inquire_security_cd =
        replyout->clin_event->inquire_security_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->reference_nbr =
        build(requestin->request->orders[ordcnt]->order_id,
        requestin->request->orders[ordcnt]->assays[elcnt]->result_id,
        requestin->request->orders[ordcnt]->assays[elcnt]->task_assay_cd,
        "INTERPDATA")
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->view_level = 1
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->authentic_flag = 1
 
      if (validate(                                                    ;005
        requestin->request->orders[ordcnt]->do_not_chart_ind,0) = 0)   ;005
         set replyout->clin_event->child_event_list[elcnt2]
           ->child_event_list[1]->publish_flag = 1
      else                                                             ;005
         set replyout->clin_event->child_event_list[elcnt2]            ;005
           ->child_event_list[1]->publish_flag = 0                     ;005
      endif                                                            ;005
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->event_reltn_cd = CD->child_event_reltn_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->event_class_cd = CD->int_event_class_cd
 
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->child_event_list[1]->record_status_cd = CD->active_cd
      if (correct_ind = 1)
         set replyout->clin_event->child_event_list[elcnt2]
           ->child_event_list[1]->result_status_cd = CD->modified_cd
      else
         set replyout->clin_event->child_event_list[elcnt2]
           ->child_event_list[1]->result_status_cd = CD->auth_cd
      endif
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]
        ->valid_until_dt_tm_ind =
        replyout->clin_event->valid_until_dt_tm_ind
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]
        ->valid_from_dt_tm_ind =
        replyout->clin_event->valid_from_dt_tm_ind
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->updt_dt_tm_ind =
        replyout->clin_event->updt_dt_tm_ind
 
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->event_start_dt_tm =
        replyout->clin_event->event_start_dt_tm
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->event_end_dt_tm =
        replyout->clin_event->event_end_dt_tm
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->order_id =
        replyout->clin_event->order_id
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->person_id =
        replyout->clin_event->person_id
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->encntr_id =
        replyout->clin_event->encntr_id
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->accession_nbr =
        replyout->clin_event->accession_nbr
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->catalog_cd =
        replyout->clin_event->catalog_cd
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]
        ->contributor_system_cd =
        replyout->clin_event->contributor_system_cd
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]
        ->inquire_security_cd =
        replyout->clin_event->inquire_security_cd
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->reference_nbr =
        build(requestin->request->orders[ordcnt]->order_id,
        requestin->request->orders[ordcnt]->assays[elcnt]->result_id,
        requestin->request->orders[ordcnt]->assays[elcnt]->task_assay_cd,
        "INTERPDATA")
 
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->view_level = 1
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->authentic_flag = 1
 
      if (validate(                                                    ;005
        requestin->request->orders[ordcnt]->do_not_chart_ind,0) = 0)   ;005
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->child_event_list[1]
           ->publish_flag = 1
      else                                                             ;005
         set replyout->clin_event->child_event_list[prodcnt]           ;005
           ->child_event_list[elcnt3]->child_event_list[1]             ;005
           ->publish_flag = 0                                          ;005
      endif                                                            ;005
 
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->event_reltn_cd =
        CD->child_event_reltn_cd
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->event_class_cd =
        CD->int_event_class_cd
 
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->child_event_list[1]->record_status_cd =
        CD->active_cd
      if (correct_ind = 1)
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->child_event_list[1]
           ->result_status_cd = CD->modified_cd
      else
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->child_event_list[1]
           ->result_status_cd = CD->auth_cd
      endif
   endif
 
   end
 
   /***********************************************************************
   * Process Specimen Info Subroutine                                     *
   ***********************************************************************/
   subroutine ProcessSpecimenInfo ( none15 )
 
   Call LOG_MESSAGE ("Called into  ProcessSpecimenInfo", LOG_LEVEL_DEBUG)                       ;026
 
   if ( spidx = 0 )
      set subtablemap = subtablemap + 16 ; add specimen collection
   endif
   set spidx = spidx + 1
  
   
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set stat = alterlist( replyout->clin_event->child_event_list[elcnt2]
        ->specimen_coll, spidx )
      set replyout->clin_event->child_event_list[elcnt2]
        ->specimen_coll[spidx]->container_id =
        requestin->request->orders[ordcnt]->assays[elcnt]->container_id
   else
      set stat = alterlist( replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->specimen_coll, spidx )
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->specimen_coll[spidx]->container_id =
        requestin->request->orders[ordcnt]->assays[elcnt]->container_id
   endif
 
   ;* Look up the specimen id from the container table.
   if (requestin->request->orders[ordcnt]->assays[elcnt]
     ->container_id != curr_container_id)
      set curr_container_id =
        requestin->request->orders[ordcnt]->assays[elcnt]->container_id
      select into "nl:"
         c.container_id,
         c.specimen_id,
         vs.specimen_id,
         vs.specimen_type_cd
      from
         container c, 
         v500_specimen vs
      plan c where c.container_id =
         requestin->request->orders[ordcnt]->assays[elcnt]->container_id
      join vs where vs.specimen_id = c.specimen_id
      detail
         curr_specimen_id = c.specimen_id
         d_curr_specimen_type_cd = vs.specimen_type_cd
      with
         nocounter
      CALL ERROR_MESSAGE(0)                                               ;026
   endif
 
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]
        ->specimen_coll[spidx]->specimen_id = curr_specimen_id
      set replyout->clin_event->child_event_list[elcnt2]
        ->specimen_coll[spidx]->collect_dt_tm =
        requestin->request->orders[ordcnt]->assays[1]->drawn_dt_tm
      set replyout->clin_event->child_event_list[elcnt2]
        ->specimen_coll[spidx]->collect_dt_tm_ind = 0
      set replyout->clin_event->child_event_list[elcnt2]
        ->specimen_coll[spidx]->source_type_cd = d_curr_specimen_type_cd
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->specimen_coll[spidx]
        ->specimen_id = curr_specimen_id
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->specimen_coll[spidx]
        ->collect_dt_tm =
        requestin->request->orders[ordcnt]->assays[1]->drawn_dt_tm
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->specimen_coll[spidx]
        ->collect_dt_tm_ind = 0
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->specimen_coll[spidx]
        ->source_type_cd = d_curr_specimen_type_cd
   endif
     
     if ( validate(replyout->clin_event->child_event_list[elcnt2]
             ->specimen_coll[spidx]->recvd_dt_tm, -9999.0 ) != -9999.0 )
         set use_recvd_dt_tm_old_ind = 1
     endif
     
     if(use_recvd_dt_tm_old_ind = 1)
       select into "nl:"
         osrc.order_id,
         osrc.container_id,
         osrc.in_lab_dt_tm
       from 
         order_serv_res_container osrc
       plan osrc where osrc.order_id = 
         requestin->request->orders[ordcnt]->order_id and osrc.container_id = curr_container_id 
       order by osrc.container_id
     
       head osrc.container_id
           if (three_level_ind = 0)
               replyout->clin_event->child_event_list[elcnt2]
               ->specimen_coll[spidx]->recvd_dt_tm = osrc.in_lab_dt_tm
           else
               replyout->clin_event->child_event_list[prodcnt]
               ->child_event_list[elcnt3]->specimen_coll[spidx]
               ->recvd_dt_tm = osrc.in_lab_dt_tm
           endif   
       
       with nocounter
     endif
     
     if (validate(requestin->request->orders[ordcnt]->assays[elcnt] ->in_lab_dt_tm, -9999.0 ) != -9999.0 )
         set d_req_in_lab_dt_tm = cnvtdatetime(requestin->request->orders[ordcnt]->assays[elcnt]
                                  ->in_lab_dt_tm)  	    
     endif
            
     if (validate(requestin->request->orders[ordcnt]->assays[elcnt] ->interface_flag , -1) != -1)
         set i_req_interface_flag  = requestin->request->orders[ordcnt]->assays[elcnt]
                                      ->interface_flag
     endif
     
     if (d_req_in_lab_dt_tm > 0.0 and i_req_interface_flag = 2)
       if (three_level_ind = 0)
          set replyout->clin_event->child_event_list[elcnt2]
            ->specimen_coll[spidx]->recvd_dt_tm = d_req_in_lab_dt_tm
       else
          set replyout->clin_event->child_event_list[prodcnt]
            ->child_event_list[elcnt3]->specimen_coll[spidx]
            ->recvd_dt_tm = d_req_in_lab_dt_tm 
       endif        
     endif
      
   end
 
   /***********************************************************************
   * Process Interp Data Subroutine                                       *
   ***********************************************************************/
   subroutine ProcessInterpData ( none16 )
 
   Call LOG_MESSAGE ("Called into ProcessInterpData", LOG_LEVEL_DEBUG)                  ;026
 
   set vc_string->curr_long_text = " "
   if (requestin->reply->orders[ordcnt]->assays[elcnt]                 ;017
     ->interp_data_id > 0)                                             ;017
      ;* Look up the task assay and see if interp data is defined
      ;* Will need to add a check for service resource in the future
      ;* - currently interp data is not adjusted by service resource.
      select into "nl:"
;008         dta.task_assay_cd,
;008         dta.interp_data_ind,
;008         id.task_assay_cd,
;008         id.service_resource_cd,
         id.interp_data_id,                                            ;008
         id.long_text_id,
         lt.long_text_id,
         lt.long_text
      from
;008         discrete_task_assay dta,
         interp_data id,
         long_text lt
;008      plan dta
;008        where dta.task_assay_cd = requestin->request->orders[ordcnt]
;008                ->assays[elcnt]->task_assay_cd
;008          and dta.interp_data_ind = 1
;008      join id
;008        where id.task_assay_cd = dta.task_assay_cd
;008          and id.service_resource_cd = 0
      plan id                                                          ;008
        where id.interp_data_id = requestin->reply->orders[ordcnt]     ;008
               ->assays[elcnt]->interp_data_id                         ;008
      join lt
        where lt.long_text_id = id.long_text_id
      detail
        vc_string->curr_long_text = lt.long_text
      with
        nocounter
        CALL ERROR_MESSAGE(0)                                    ;026
 
      Call LOG_MESSAGE (build("Text length = ",
        textlen(trim(vc_string->curr_long_text))), LOG_LEVEL_DEBUG)                     ;026
 
      if (textlen(trim(vc_string->curr_long_text)) > 0)
         Call LOG_MESSAGE ("InterpData Defined", LOG_LEVEL_DEBUG)                       ;026
 
;006         if (product_written = 0)
         if (three_level_ind = 0)                                      ;006
            set comment_cnt = size(replyout->clin_event                ;016
              ->child_event_list[elcnt2]->event_note_list, 5)          ;016
            set stat = alterlist(replyout->clin_event
              ->child_event_list[elcnt2]->event_note_list, comment_cnt + 1 )
         else
            set comment_cnt = size(replyout->clin_event                ;016
              ->child_event_list[prodcnt]->child_event_list[elcnt3]    ;016
              ->event_note_list, 5)                                    ;016
            set stat = alterlist( replyout->clin_event
              ->child_event_list[prodcnt]->child_event_list[elcnt3]
              ->event_note_list, comment_cnt + 1 )
         endif
         set comment_idx = comment_cnt + 1
         ;* Add interp data
;006         if (product_written = 0)
         if (three_level_ind = 0)                                      ;006
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->note_type_cd =
              CD->interpdata_cd
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->long_blob =
              vc_string->curr_long_text
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->note_dt_tm =
;011              requestin->request->orders[ordcnt]->assays[elcnt]
;011              ->perform_dt_tm
              requestin->reply->orders[ordcnt]->assays[elcnt]          ;011
              ->perform_dt_tm                                          ;011
           if(curutc = 1)
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[comment_idx]->note_tz =
                 requestin->reply->orders[ordcnt]->assays[elcnt]          ;011
                 ->perform_tz
            endif
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->note_dt_tm_ind = 0
            if (requestin->request->orders[ordcnt]->assays[elcnt]      ;019
              ->perform_personnel_id = 0)                              ;019
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[comment_idx]->note_prsnl_id =       ;019
                 CD->cerner_prsnl_id                                   ;019
            else                                                       ;019
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[comment_idx]->note_prsnl_id =
                 requestin->request->orders[ordcnt]->assays[elcnt]
                 ->perform_personnel_id
            endif                                                      ;019
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->record_status_cd =
              CD->active_cd
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->entry_method_cd =
              CD->entry_method_cd
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->note_format_cd =
              CD->rtf_blob_format_cd
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->valid_until_dt_tm_ind = 1
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->valid_from_dt_tm_ind = 1
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_note_list[comment_idx]->checksum_ind = 1
         else
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->note_type_cd = CD->interpdata_cd
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->long_blob = vc_string->curr_long_text
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->note_dt_tm =
              requestin->request->orders[ordcnt]->assays[elcnt]->perform_dt_tm
            if(curutc = 1)
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[comment_idx]
                 ->note_tz =
                 requestin->reply->orders[ordcnt]->assays[elcnt]->perform_tz
            endif
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->note_dt_tm_ind = 0
            if (requestin->request->orders[ordcnt]->assays[elcnt]      ;019
              ->perform_personnel_id = 0)                              ;019
               set replyout->clin_event->child_event_list[prodcnt]     ;019
                 ->child_event_list[elcnt3]                            ;019
                 ->event_note_list[comment_idx]->note_prsnl_id =       ;019
                 CD->cerner_prsnl_id                                   ;019
            else                                                       ;019
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]
                 ->event_note_list[comment_idx]->note_prsnl_id =
                 requestin->request->orders[ordcnt]->assays[elcnt]
                 ->perform_personnel_id
            endif                                                      ;019
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->record_status_cd = CD->active_cd
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->entry_method_cd = CD->entry_method_cd
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->note_format_cd = CD->rtf_blob_format_cd
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->valid_until_dt_tm_ind = 1
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->valid_from_dt_tm_ind = 1
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_note_list[comment_idx]
              ->checksum_ind = 1
         endif
      else
         Call LOG_MESSAGE ("No InterpData found on Long_Text", LOG_LEVEL_DEBUG)         ;026
      endif
   else                                                                ;017
      Call LOG_MESSAGE ("No InterpData Defined for Assay", LOG_LEVEL_DEBUG)             ;026
   endif                                                               ;017
 
   end
 
   /***********************************************************************
   * Process Result Comment Subroutine                                    *
   ***********************************************************************/
   subroutine ProcessComment ( none22 )                                ;016
                                                                       ;016
   Call LOG_MESSAGE ("Called into ProcessComment", LOG_LEVEL_DEBUG)                            ;026
 
   set vc_string->curr_long_text = " "                                 ;016
   set vc_string->curr_tz  = 0
   select into "nl:"                                                   ;016
      rc.result_id,                                                    ;016
      rc.comment_type_cd,                                              ;016
      lt.long_text_id,                                                 ;016
      lt.long_text                                                     ;016
   from                                                                ;016
      result_comment rc,                                               ;016
      long_text lt                                                     ;016
   plan rc                                                             ;016
     where rc.result_id =                                              ;016
           requestin->reply->orders[ordcnt]->assays[elcnt]->result_id  ;016
       and rc.comment_type_cd = CD->res_comment_cd                     ;016
   join lt                                                             ;016
     where lt.long_text_id = rc.long_text_id                           ;016
                                                                       ;016
   order                                                               ;016
      rc.action_sequence asc                                           ;016
                                                                       ;016
   detail                                                              ;016
      vc_string->curr_long_text = lt.long_text                         ;016
      vc_string->curr_dt_tm     = rc.comment_dt_tm                     ;016
      if(curutc = 1)
        vc_string->curr_tz        = rc.comment_tz
      endif
      vc_string->curr_prsnl_id  = rc.comment_prsnl_id                  ;016
   with                                                                ;016
      nocounter                                                        ;016
                                                                       ;016
   CALL ERROR_MESSAGE(0)                                               ;026
 
   Call LOG_MESSAGE (build("Text length = ",
     textlen(trim(vc_string->curr_long_text))), LOG_LEVEL_DEBUG)       ;026
                                                                       ;016
   if (curqual > 0)                                                    ;016
      
     if (three_level_ind = 0)
        set curalias = RepOut_CurEventList
          replyout->clin_event->child_event_list[elcnt2]
     else
        set curalias = RepOut_CurEventList
          replyout->clin_event->child_event_list[prodcnt]->child_event_list[elcnt3]
     endif
         
     set nPopulateResComInd = 0
     if (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->correct_status_cd)
        select into "nl:"
        from clinical_event ce,
          ce_event_note cen
        plan ce
          where ce.reference_nbr = RepOut_CurEventList->reference_nbr
           and ce.contributor_system_cd = RepOut_CurEventList->contributor_system_cd
           and ce.valid_until_dt_tm = cnvtdatetime("31-DEC-2100 00:00:00.00")
        join cen
          where cen.event_id = ce.event_id
           and cen.note_type_cd = CD->res_comment_cd
        with nocounter

        if (curqual != 0)
         set nPopulateResComInd = 1
        endif
      endif
 
     set nTextNotBlankInd = 0
     if ((textlen(trim(vc_string->curr_long_text, 3)) > 0) and
         (trim(vc_string->curr_long_text, 3) != uar_i18ngetmessage(i18nHandle, "TEXTREMOVED", "<Text removed>")))
          set nTextNotBlankInd = 1
     endif
 
     if ((((requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->verify_status_cd) or
           (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->correct_status_cd) or
           (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->auto_verify_status_cd)) and
           (nTextNotBlankInd = 1)) Or
          (nPopulateResComInd = 1))
 
        Call LOG_MESSAGE ("Result Comment Defined", LOG_LEVEL_DEBUG)                             ;026
   
        if (three_level_ind = 0)                                         ;016
           set comment_cnt = size(replyout->clin_event                   ;016
             ->child_event_list[elcnt2]->event_note_list, 5)             ;016
           set stat = alterlist( replyout->clin_event                    ;016
             ->child_event_list[elcnt2]->event_note_list,                ;016
             comment_cnt + 1 )                                           ;016
                                                                         ;016
           set comment_idx = comment_cnt + 1                             ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_type_cd =              ;016
             CD->res_comment_cd                                          ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->long_blob =                 ;016
             vc_string->curr_long_text                                   ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_dt_tm =                ;016
             vc_string->curr_dt_tm                                       ;016
           if(curutc = 1)
              set replyout->clin_event->child_event_list[elcnt2]
                ->event_note_list[comment_idx]->note_tz =
                           vc_string->curr_tz
           endif
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_dt_tm_ind = 0          ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_prsnl_id =             ;016
             vc_string->curr_prsnl_id                                    ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->record_status_cd =          ;016
             CD->active_cd                                               ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->entry_method_cd =           ;016
             CD->entry_method_cd                                         ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_format_cd =            ;016
             CD->blob_format_cd                                          ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->valid_until_dt_tm_ind = 1   ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->valid_from_dt_tm_ind = 1    ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->checksum_ind = 1            ;016
        else                                                             ;016
           set comment_cnt = size(replyout->clin_event                   ;016
             ->child_event_list[prodcnt]->child_event_list[elcnt3]       ;016
             ->event_note_list, 5)                                       ;016
           set stat = alterlist( replyout->clin_event                    ;016
             ->child_event_list[prodcnt]->child_event_list[elcnt3]       ;016
             ->event_note_list, comment_cnt + 1 )                        ;016
           set comment_idx = comment_cnt + 1                             ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_type_cd = CD->res_comment_cd                         ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->long_blob = vc_string->curr_long_text                     ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_dt_tm = vc_string->curr_dt_tm                        ;016
           if(curutc = 1)
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->event_note_list[comment_idx]
                ->note_tz = vc_string->curr_tz
           endif
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_dt_tm_ind = 0                                        ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_prsnl_id = vc_string->curr_prsnl_id                  ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->record_status_cd = CD->active_cd                          ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->entry_method_cd = CD->entry_method_cd                     ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_format_cd = CD->blob_format_cd                       ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->valid_until_dt_tm_ind = 1                                 ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->valid_from_dt_tm_ind = 1                                  ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->checksum_ind = 1                                          ;016
        endif                                                            ;016
     endif
   else                                                                ;016
      Call LOG_MESSAGE ("No Result Comment", LOG_LEVEL_DEBUG)          ;026
   endif                                                               ;016
                                                                       ;016
   end                                                                 ;016
 
   /***********************************************************************
   * Process Result Note Subroutine                                       *
   ***********************************************************************/
   subroutine ProcessNote ( none23 )                                   ;016
                                                                       ;016
   Call LOG_MESSAGE ("Called into ProcessNote", LOG_LEVEL_DEBUG)       ;026
   set vc_string->curr_long_text = " "                                 ;016
   set vc_string->curr_tz = 0
   select into "nl:"                                                   ;016
      rc.result_id,                                                    ;016
      rc.comment_type_cd,                                              ;016
      lt.long_text_id,                                                 ;016
      lt.long_text                                                     ;016
   from                                                                ;016
      result_comment rc,                                               ;016
      long_text lt                                                     ;016
   plan rc                                                             ;016
     where rc.result_id =                                              ;016
           requestin->reply->orders[ordcnt]->assays[elcnt]->result_id  ;016
       and rc.comment_type_cd = CD->res_note_cd                        ;016
   join lt                                                             ;016
     where lt.long_text_id = rc.long_text_id                           ;016
                                                                       ;016
   order                                                               ;016
      rc.action_sequence asc                                           ;016
                                                                       ;016
   detail                                                              ;016
      vc_string->curr_long_text = lt.long_text                         ;016
      vc_string->curr_dt_tm     = rc.comment_dt_tm                     ;016
      if(curutc = 1)
        vc_string->curr_tz        = rc.comment_tz
      endif
      vc_string->curr_prsnl_id  = rc.comment_prsnl_id                  ;016
   with                                                                ;016
      nocounter                                                        ;016
                                                                       ;016
   CALL ERROR_MESSAGE(0)                                               ;026
 
   Call LOG_MESSAGE (build("Text length = ",
     textlen(trim(vc_string->curr_long_text))), LOG_LEVEL_DEBUG)       ;026
                                                                       ;016
   if (curqual > 0)                                                    ;016
      if (three_level_ind = 0)
         set curalias = RepOut_CurEventList
           replyout->clin_event->child_event_list[elcnt2]
      else
         set curalias = RepOut_CurEventList
           replyout->clin_event->child_event_list[prodcnt]->child_event_list[elcnt3]
      endif
   
      set nPopulateResNoteInd = 0
      if (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->correct_status_cd)
         select into "nl:"
         from clinical_event ce,
              ce_event_note cen
         plan ce
           where ce.reference_nbr = RepOut_CurEventList->reference_nbr
              and ce.contributor_system_cd = RepOut_CurEventList->contributor_system_cd
              and ce.valid_until_dt_tm = cnvtdatetime("31-DEC-2100 00:00:00.00")              
         join cen
           where cen.event_id = ce.event_id
             and cen.note_type_cd = CD->res_note_cd
         with nocounter
         
         if (curqual != 0)
          set nPopulateResNoteInd = 1
         endif
      endif
 
      set nTextNotBlankInd = 0
      if ((textlen(trim(vc_string->curr_long_text, 3)) > 0) and
          (trim(vc_string->curr_long_text, 3) != uar_i18ngetmessage(i18nHandle, "TEXTREMOVED", "<Text removed>")))
        set nTextNotBlankInd = 1
      endif
 
      if ((((requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->verify_status_cd) or
            (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->correct_status_cd) or
            (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->auto_verify_status_cd)) and
            (nTextNotBlankInd = 1)) Or
          (nPopulateResNoteInd = 1))
          call log_message("ProcessNote--note information found", log_level_debug)
        Call LOG_MESSAGE ("Result Note Defined", LOG_LEVEL_DEBUG)        ;026
   
        if (three_level_ind = 0)                                         ;016
           set comment_cnt = size(replyout->clin_event                   ;016
             ->child_event_list[elcnt2]->event_note_list, 5)             ;016
           set stat = alterlist( replyout->clin_event                    ;016
             ->child_event_list[elcnt2]->event_note_list,                ;016
             comment_cnt + 1 )                                           ;016
           set comment_idx = comment_cnt + 1                             ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_type_cd =              ;016
             CD->res_note_cd                                             ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->long_blob =                 ;016
             vc_string->curr_long_text                                   ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_dt_tm =                ;016
             vc_string->curr_dt_tm                                       ;016
           if(curutc = 1)
             set replyout->clin_event->child_event_list[elcnt2]
               ->event_note_list[comment_idx]->note_tz =
               vc_string->curr_tz
           endif
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_dt_tm_ind = 0          ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_prsnl_id =             ;016
             vc_string->curr_prsnl_id                                    ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->record_status_cd =          ;016
             CD->active_cd                                               ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->entry_method_cd =           ;016
             CD->entry_method_cd                                         ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->note_format_cd =            ;016
             CD->blob_format_cd                                          ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->valid_until_dt_tm_ind = 1   ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->valid_from_dt_tm_ind = 1    ;016
           set replyout->clin_event->child_event_list[elcnt2]            ;016
             ->event_note_list[comment_idx]->checksum_ind = 1            ;016
        else                                                             ;016
           set comment_cnt = size(replyout->clin_event                   ;016
             ->child_event_list[prodcnt]->child_event_list[elcnt3]       ;016
             ->event_note_list, 5)                                       ;016
           set stat = alterlist( replyout->clin_event                    ;016
             ->child_event_list[prodcnt]->child_event_list[elcnt3]       ;016
             ->event_note_list, comment_cnt + 1 )                        ;016
           set comment_idx = comment_cnt + 1                             ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_type_cd = CD->res_note_cd                            ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->long_blob = vc_string->curr_long_text                     ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_dt_tm = vc_string->curr_dt_tm                        ;016
           if (curutc = 1)
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->event_note_list[comment_idx]
                ->note_tz = vc_string->curr_tz
           endif
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_dt_tm_ind = 0                                        ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_prsnl_id = vc_string->curr_prsnl_id                  ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->record_status_cd = CD->active_cd                          ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->entry_method_cd = CD->entry_method_cd                     ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->note_format_cd = CD->blob_format_cd                       ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->valid_until_dt_tm_ind = 1                                 ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->valid_from_dt_tm_ind = 1                                  ;016
           set replyout->clin_event->child_event_list[prodcnt]           ;016
             ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;016
             ->checksum_ind = 1                                          ;016
        endif 
      endif                                                            ;016
   else                                                                ;016
      Call LOG_MESSAGE ("No Result Note", LOG_LEVEL_DEBUG)             ;026
   endif                                                               ;016
                                                                       ;016
   end                                                                 ;016
 
   /***********************************************************************
   * Process Electronic Signature Subroutine                              *
   ***********************************************************************/
   subroutine SignatureLine ( none26 )                                 ;029
                                                                       ;029
   Call LOG_MESSAGE("Called into Process Electronic Signature", LOG_LEVEL_DEBUG) ;029
                                                                       ;029
   ;********************************                                   ;029
   ;*  Start Build signature lines                                     ;029
   ;********************************                                   ;029
   set request->verified_prsnl_id =                                    ;029
       requestin->request->event_personnel_id                          ;029
   set request->verified_dt_tm =                                       ;029
       requestin->reply->event_dt_tm                                   ;029
   set request->task_assay_cd =                                        ;029
       requestin->request->orders[ordcnt]->                            ;029
                  assays[elcnt]->task_assay_cd                         ;029
   set request->called_ind = "Y"
   set request->perform_prsnl_id =
       requestin->request->orders[ordcnt]->
                  assays[elcnt]->perform_personnel_id
   set request->perform_dt_tm =
       requestin->reply->orders[ordcnt]->
                  assays[elcnt]->perform_dt_tm
   if(curutc = 1)
      set request->verified_tz  = requestin->reply->event_tz
      set request->perform_tz  = requestin->reply->orders[ordcnt]->assays[elcnt].perform_tz
   endif
   EXECUTE glb_build_signature_line                                    ;029
   ;********************************                                   ;029
   ;*  End Build signature lines                                       ;029
   ;********************************                                   ;029
                                                                       ;029
   if (curqual > 0)                                                    ;029
      Call LOG_MESSAGE("Electronic Signature Defined", LOG_LEVEL_DEBUG)  ;029
      if (comment_ind = 0)                                             ;029
        set subtablemap = subtablemap + 2          ;* Add footnotes    ;029
      endif                                                            ;029
                                                                       ;029
      if (three_level_ind = 0)                                         ;029
         set comment_cnt = size(replyout->clin_event                   ;029
           ->child_event_list[elcnt2]->event_note_list, 5)             ;029
         set stat = alterlist( replyout->clin_event                    ;029
           ->child_event_list[elcnt2]->event_note_list,                ;029
           comment_cnt + 1 )                                           ;029
         set comment_idx = comment_cnt + 1                             ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->note_type_cd =              ;029
           CD->sign_line_cd                                            ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->long_blob =                 ;029
           reply->signature_line                                       ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->note_dt_tm =                ;029
           requestin->reply->event_dt_tm                               ;029
         if(curutc = 1)
           set replyout->clin_event->child_event_list[elcnt2]
             ->event_note_list[comment_idx]->note_tz =
             requestin->reply->event_tz
         endif
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->note_dt_tm_ind = 0          ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->note_prsnl_id =             ;029
           requestin->request->event_personnel_id                      ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->record_status_cd =          ;029
           CD->active_cd                                               ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->entry_method_cd =           ;029
           CD->entry_method_cd                                         ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->note_format_cd =            ;029
           CD->blob_format_cd                                          ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->valid_until_dt_tm_ind = 1   ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->valid_from_dt_tm_ind = 1    ;029
         set replyout->clin_event->child_event_list[elcnt2]            ;029
           ->event_note_list[comment_idx]->checksum_ind = 1            ;029
      else                                                             ;029
         set comment_cnt = size(replyout->clin_event                   ;029
           ->child_event_list[prodcnt]->child_event_list[elcnt3]       ;029
           ->event_note_list, 5)                                       ;029
         set stat = alterlist( replyout->clin_event                    ;029
           ->child_event_list[prodcnt]->child_event_list[elcnt3]       ;029
           ->event_note_list, comment_cnt + 1 )                        ;029
         set comment_idx = comment_cnt + 1                             ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->note_type_cd = CD->sign_line_cd                           ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->long_blob = reply->signature_line                         ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->note_dt_tm = requestin->reply->event_dt_tm                ;029
         if(curutc = 1)
             set replyout->clin_event->child_event_list[elcnt2]
               ->event_note_list[comment_idx]->note_tz =
               requestin->reply->event_tz
         endif
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->note_dt_tm_ind = 0                                        ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->note_prsnl_id = requestin->request->event_personnel_id    ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->record_status_cd = CD->active_cd                          ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->entry_method_cd = CD->entry_method_cd                     ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->note_format_cd = CD->blob_format_cd                       ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->valid_until_dt_tm_ind = 1                                 ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->valid_from_dt_tm_ind = 1                                  ;029
         set replyout->clin_event->child_event_list[prodcnt]           ;029
           ->child_event_list[elcnt3]->event_note_list[comment_idx]    ;029
           ->checksum_ind = 1                                          ;029
      endif                                                            ;029
   else                                                                ;029
      Call LOG_MESSAGE("No Electronic Signature", LOG_LEVEL_DEBUG)     ;029
   endif                                                               ;029
                                                                       ;029
   end                                                                 ;029
 
   /***********************************************************************
   * Text Result Subroutine                                               *
   ***********************************************************************/
   subroutine TextResult ( none10 )
 
   Call LOG_MESSAGE ("Called into TextResult", LOG_LEVEL_DEBUG)        ;026
 
   call SetBlobResult ( 0 )
 
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_class_cd = CD->doc_event_class_cd
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_class_cd = CD->doc_event_class_cd
   endif
 
   end
 
   /***********************************************************************
   * Alpha Result Subroutine                                              *
   ***********************************************************************/
   subroutine AlphaResult ( none7 )
   
   declare sActivityTypeMean       = vc with protect, noconstant("")
   declare sActivityType           = vc with protect, noconstant("")
   declare nPrefIdx                = i2 with protect, noconstant(0)
   declare sPostAlphaPref          = vc with protect, noconstant("")
   declare stat                    = i4 with public, noconstant(0)
 
   Call LOG_MESSAGE ("Called into AlphaResult", LOG_LEVEL_DEBUG)                 ;026
   
   
   if (requestin->request->orders[ordcnt]->assays[elcnt]->nomenclature_id > 0)
      ;Determine the activity_type_mean
      if(textlen(trim(requestin->request->orders[ordcnt].activity_type_mean)) > 0)
        set sActivityTypeMean = trim(requestin->request.orders[ordcnt].activity_type_mean)
      else
        ;Retrieve the activity_type_mean from the orders table
        select into "nl:"
        from orders o
        where o.order_id = requestin->request.orders[ordcnt].order_id
        detail
          sActivityTypeMean = trim(uar_get_code_meaning(o.activity_type_cd))
        with nocounter
      endif
      
      ;Determine the activity type
      case (sActivityTypeMean)
        of "GLB":
          set sActivityType = "General Lab"
        of "HLX":
          set sActivityType = "Helix"
        of "BB":
          set sActivityType = "Blood Bank"
      endcase

     if(textlen(sActivityType) > 0)
       ;Load the alpha mnemonic preference        
       if(LoadPreferences("system", "", "", "", "module", sActivityType) = 1)
         Set nPrefIdx = FindPreference("post alpha response mnemonic to clinical events")
         
         if(nPrefIdx > 0)
           ;Get the preference value
           Set sPostAlphaPref = GetPreferenceValue(nPrefIdx)
           
           ;If it's set to Yes, retrieve the mnemonic from the nomenclature table
           if(trim(sPostAlphaPref) = "Yes")
             select into "nl:"
             from nomenclature nc
             plan nc where nc.nomenclature_id = requestin->request->orders[ordcnt]->assays[elcnt]->nomenclature_id
             detail
               requestin->request->orders[ordcnt]->assays[elcnt]->result_value_alpha = nc.mnemonic
             with nocounter

             ;If this is a correction and the previous result was a coded result, we'll let the clinical event server carry
             ;forward the nomen_string_flag from the previous event, as it can't handle a change in the flag under that 
		     ;circumstance. Otherwise, we'll set it to 1.
             if ((correct_ind = 1) and (FindPrevCodedResult(0) = 1))
               ;Do nothing
               set stat = 0
             else
               if (three_level_ind = 0)
                 set replyout->clin_event->child_event_list[elcnt2]->nomen_string_flag = 1
               else
                 set replyout->clin_event->child_event_list[prodcnt]->child_event_list[elcnt3]->nomen_string_flag = 1
               endif ; three_level_ind?
             endif ; corrected with/out previous coded result
           endif ; sPostAlphaPref = "Yes"
         endif ; nPrefIdx > 0
       endif ; LoadPreferences
     endif ; sActivityType > 0
   endif ;nomenclature_id > 0
 
   ;* Set the numeric map for reference ranges if available
   set num_min =
     requestin->request->orders[ordcnt]->assays[elcnt]->min_digits
   set num_max =
     requestin->request->orders[ordcnt]->assays[elcnt]->max_digits
   set num_dec =
     requestin->request->orders[ordcnt]->assays[elcnt]->min_decimal_places
   ;* Set the tag equal to the response
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]->event_tag =
        requestin->request->orders[ordcnt]->assays[elcnt]->result_value_alpha
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_tag =
        requestin->request->orders[ordcnt]->assays[elcnt]->result_value_alpha
   endif
 
   ;* Check for nomenclature entry and only do string result when
   ;* a normal low/high or critical low/high exist.
   if (requestin->request->orders[ordcnt]->assays[elcnt]->nomenclature_id > 0)

      call SetCodedResult ( 0 )
 
      if (string_flag = 2
      or requestin->request->orders[ordcnt]->assays[elcnt]
        ->normal_range_flag > 0
      or requestin->request->orders[ordcnt]->assays[elcnt]
        ->critical_range_flag > 0
        or (textlen(trim(requestin->request->orders[ordcnt]              ;009
          ->assays[elcnt]->normal_alpha)) > 0)                           ;009
        or requestin->request->orders[ordcnt]->assays[elcnt]             ;010
          ->units_cd > 0 )                                               ;010
 
         call SetNormalValues( 0 )
;018         call SetStringResult ( 0 )
      endif
   else
      if (string_flag = 2)
         if (textlen(trim(requestin->request->orders[ordcnt]
           ->assays[elcnt]->result_value_alpha)) > 0)
            call SetStringResult ( 0 )
         endif
      else
         call SetStringResult ( 0 )
      endif
   endif
 
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_class_cd = CD->txt_event_class_cd
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_class_cd = CD->txt_event_class_cd
   endif
 
   end

 
 
  ;047
  /***********************************************************************
  * Set online code set subroutine                                   *
  ***********************************************************************/
  subroutine OnlineCodeSetResult (none8)
   
    Call LOG_MESSAGE ("Called into OnlineCodeSetResult", LOG_LEVEL_DEBUG)
     
    ;Imitate OnlineCodeSet in pfmt_gl_to_event 
    set replyout->clin_event->child_event_list[elcnt2]->event_class_cd = CD->txt_event_class_cd
    set replyout->clin_event->child_event_list[elcnt2]->event_tag = 
    trim(uar_get_code_display(requestin->request->orders[ordcnt]->assays[elcnt]->bb_result_code_set_cd))
  
    Call SetStringResult(0)
 
  end


 
   /***********************************************************************
   * Set Coded Result Subroutine                                          *
   ***********************************************************************/
   subroutine SetCodedResult ( none8 )
 
   Call LOG_MESSAGE ("Called into SetCodedResult", LOG_LEVEL_DEBUG)                 ;026
 
   if ( cridx = 0 )                                                    ;022
      set subtablemap = subtablemap + 32768  ;* Add coded result
   endif                                                               ;022
   set cridx = cridx + 1                                               ;022
 
   if (three_level_ind = 0)                                            ;006
      set stat = alterlist( replyout->clin_event                       ;022
        ->child_event_list[elcnt2]->coded_result_list, cridx)          ;022
      set replyout->clin_event->child_event_list[elcnt2]               ;022
        ->coded_result_list[cridx]->nomenclature_id =                  ;022
        requestin->request->orders[ordcnt]->assays[elcnt]              ;022
        ->nomenclature_id                                              ;022
      set replyout->clin_event->child_event_list[elcnt2]               ;022
        ->coded_result_list[cridx]->ensure_type = 2                    ;022
      set replyout->clin_event->child_event_list[elcnt2]               ;022
        ->coded_result_list[cridx]->sequence_nbr = 1                   ;022
      set replyout->clin_event->child_event_list[elcnt2]               ;028
        ->coded_result_list[cridx]->unit_of_measure_cd =               ;028
        requestin->request->orders[ordcnt]->assays[elcnt]->units_cd    ;028
   else                                                                ;022
      set stat = alterlist( replyout->clin_event                       ;022
        ->child_event_list[prodcnt]->child_event_list[elcnt3]          ;022
        ->coded_result_list, cridx )                                   ;022
      set replyout->clin_event->child_event_list[prodcnt]              ;022
        ->child_event_list[elcnt3]->coded_result_list[cridx]           ;022
        ->nomenclature_id =                                            ;022
        requestin->request->orders[ordcnt]->assays[elcnt]              ;022
        ->nomenclature_id                                              ;022
      set replyout->clin_event->child_event_list[prodcnt]              ;022
        ->child_event_list[elcnt3]->coded_result_list[cridx]           ;022
        ->ensure_type = 2                                              ;022
      set replyout->clin_event->child_event_list[prodcnt]              ;022
        ->child_event_list[elcnt3]->coded_result_list[cridx]           ;022
        ->sequence_nbr = 1                                             ;022
      set replyout->clin_event->child_event_list[prodcnt]              ;028
        ->child_event_list[elcnt3]->coded_result_list[cridx]           ;028
        ->unit_of_measure_cd =                                         ;028
        requestin->request->orders[ordcnt]->assays[elcnt]->units_cd    ;028
   endif                                                               ;022
 
;006    if (product_written = 0)
;022   if (three_level_ind = 0)                                            ;006
;022      set stat = alterlist( replyout->clin_event
;022        ->child_event_list[elcnt2]->coded_result_list, 1 )
;022      set replyout->clin_event->child_event_list[elcnt2]
;022        ->coded_result_list[1]->nomenclature_id =
;022        requestin->request->orders[ordcnt]->assays[elcnt]->nomenclature_id
;022      set replyout->clin_event->child_event_list[elcnt2]
;022        ->coded_result_list[1]->ensure_type = 2
;022      set replyout->clin_event->child_event_list[elcnt2]
;022        ->coded_result_list[1]->sequence_nbr = 1
;022   else
;022      set stat = alterlist( replyout->clin_event
;022        ->child_event_list[prodcnt]->child_event_list[elcnt3]
;022        ->coded_result_list, 1 )
;022      set replyout->clin_event->child_event_list[prodcnt]
;022        ->child_event_list[elcnt3]->coded_result_list[1]
;022        ->nomenclature_id =
;022        requestin->request->orders[ordcnt]->assays[elcnt]->nomenclature_id
;022      set replyout->clin_event->child_event_list[prodcnt]
;022        ->child_event_list[elcnt3]->coded_result_list[1]
;022        ->ensure_type = 2
;022      set replyout->clin_event->child_event_list[prodcnt]
;022        ->child_event_list[elcnt3]->coded_result_list[1]
;022        ->sequence_nbr = 1
;022   endif
 
   end
 
   /***********************************************************************
   * Numeric Result Subroutine                                            *
   ***********************************************************************/
   subroutine NumericResult ( none3 )
 
   Call LOG_MESSAGE ("Called into NumericResult", LOG_LEVEL_DEBUG)                      ;026
 
   set string_flag = 1
   ;* Format the result
   set num_min =
     requestin->request->orders[ordcnt]->assays[elcnt]->min_digits
   set num_max =
     requestin->request->orders[ordcnt]->assays[elcnt]->max_digits
   set num_dec =
     requestin->request->orders[ordcnt]->assays[elcnt]->min_decimal_places
   set num_less_great_flag =
     requestin->request->orders[ordcnt]->assays[elcnt]->less_great_flag
   set num_value =
     requestin->request->orders[ordcnt]->assays[elcnt]->result_value_numeric
   call format_numeric_result ( num_min, num_max, num_dec,
     num_less_great_flag, num_value, num_sci_note_ind )
 
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]->event_tag =
        formatted->result_value
      if (replyout->clin_event->child_event_list[elcnt2]->event_tag = " ")
         set replyout->clin_event->child_event_list[elcnt2]->event_tag =
           requestin->request->orders[ordcnt]->assays[elcnt]->ascii_text
      endif
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_tag = formatted->result_value
      if (replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_tag = " ")
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_tag =
           requestin->request->orders[ordcnt]->assays[elcnt]->ascii_text
      endif
   endif
 
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_class_cd = CD->num_event_class_cd
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_class_cd = CD->num_event_class_cd
   endif
   call SetStringResult ( 0 )
 
   end
 
   /***********************************************************************
   * Set Normal Subroutine                                                *
   ***********************************************************************/
   subroutine SetNormal( none18 )
 
   Call LOG_MESSAGE ("Called into SetNormal", LOG_LEVEL_DEBUG)                          ;026
 
   if (requestin->request->orders[ordcnt]->assays[elcnt]
     ->critical_cd = CD->num_critical_cd
   or requestin->request->orders[ordcnt]->assays[elcnt]
     ->critical_cd = CD->alp_critical_cd)
;006      if (product_written = 0)
      if (three_level_ind = 0)                                         ;006
         set replyout->clin_event->child_event_list[elcnt2]
           ->normalcy_cd = CD->ce_critical_cd
      else
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->normalcy_cd = CD->ce_critical_cd
      endif
   else
      set normal_cd =
        requestin->request->orders[ordcnt]->assays[elcnt]->normal_cd
;006      if (product_written = 0)
      if (three_level_ind = 0)                                         ;006
         case (normal_cd)
           of CD->num_low_cd:
              set replyout->clin_event->child_event_list[elcnt2]
                ->normalcy_cd = CD->ce_low_cd
           of CD->num_high_cd:
              set replyout->clin_event->child_event_list[elcnt2]
                ->normalcy_cd = CD->ce_high_cd
           of CD->num_normal_cd:
              set replyout->clin_event->child_event_list[elcnt2]
                ->normalcy_cd = CD->ce_normal_cd
           of CD->alp_normal_cd:
              set replyout->clin_event->child_event_list[elcnt2]
                ->normalcy_cd = CD->ce_normal_cd
           of CD->alp_abnormal_cd:
              set replyout->clin_event->child_event_list[elcnt2]
                ->normalcy_cd = CD->ce_abnormal_cd
           of CD->na_cd:
              set replyout->clin_event->child_event_list[elcnt2]
                ->normalcy_cd = CD->ce_na_cd
           else
              set replyout->clin_event->child_event_list[elcnt2]
                ->normalcy_cd = CD->ce_unknown_cd
         endcase
         set replyout->clin_event->child_event_list[elcnt2]
           ->normalcy_method_cd = CD->unk_normalcy_meth_cd
      else
         case (normal_cd)
           of CD->num_low_cd:
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->normalcy_cd = CD->ce_low_cd
           of CD->num_high_cd:
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->normalcy_cd = CD->ce_high_cd
           of CD->num_normal_cd:
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->normalcy_cd = CD->ce_normal_cd
           of CD->alp_normal_cd:
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->normalcy_cd = CD->ce_normal_cd
           of CD->alp_abnormal_cd:
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->normalcy_cd = CD->ce_abnormal_cd
           of CD->na_cd:
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->normalcy_cd = CD->ce_na_cd
           else
              set replyout->clin_event->child_event_list[prodcnt]
                ->child_event_list[elcnt3]->normalcy_cd = CD->ce_unknown_cd
         endcase
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->normalcy_method_cd =
           CD->unk_normalcy_meth_cd
      endif
   endif
 
   end
 
   /***********************************************************************
   * Personnel Subroutine                                                 *
   ***********************************************************************/
   subroutine Prsnl( none4 )
 
   Call LOG_MESSAGE ("Called into Prsnl", LOG_LEVEL_DEBUG)              ;026
 
   set subtablemap = subtablemap + 1 ; add personnel ids
   if (requestin->reply->orders[ordcnt]->assays[elcnt]->result_status_cd =
      CD->correct_status_cd)
;006      if (product_written = 0)
      if (three_level_ind = 0)                                         ;006
         set stat = alterlist( replyout->clin_event
           ->child_event_list[elcnt2]->event_prsnl_list, 1 )
         set replyout->clin_event->child_event_list[elcnt2]            ;002
           ->event_prsnl_list[1]->action_type_cd =                     ;002
           CD->ce_modified_status_cd                                   ;002
;002         set replyout->clin_event->child_event_list[elcnt2]
;002           ->event_prsnl_list[1]->action_type_cd =
;002           CD->ce_correct_status_cd
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_dt_tm =
           requestin->reply->event_dt_tm
         if(curutc = 1)
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_prsnl_list[1]->action_tz =
              requestin->reply->event_tz
         endif
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_dt_tm_ind = 0
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_prsnl_id =
           requestin->request->event_personnel_id
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_status_cd =
           CD->ce_cplt_status_cd
      else
         set stat = alterlist( replyout->clin_event
           ->child_event_list[prodcnt]->child_event_list[elcnt3]
           ->event_prsnl_list, 1 )
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_type_cd = CD->ce_modified_status_cd                ;002
;002           ->action_type_cd = CD->ce_correct_status_cd
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_dt_tm = requestin->reply->event_dt_tm
         if(curutc = 1)
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_prsnl_list[1]
              ->action_tz = requestin->reply->event_tz
         endif
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_dt_tm_ind = 0
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_prsnl_id = requestin->request->event_personnel_id
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_status_cd = CD->ce_cplt_status_cd
      endif
   else
;006      if (product_written = 0)
      if (three_level_ind = 0)                                         ;006
         set stat = alterlist( replyout->clin_event
           ->child_event_list[elcnt2]->event_prsnl_list, 2 )
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_type_cd =
           CD->ce_verify_status_cd
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_dt_tm =
           requestin->reply->event_dt_tm
         if(curutc = 1)
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_prsnl_list[1]->action_tz =
              requestin->reply->event_tz
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_prsnl_list[2]->action_tz =
              requestin->reply->orders[ordcnt]->assays[elcnt]->perform_tz
         endif
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_dt_tm_ind = 0
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_prsnl_id =
           requestin->request->event_personnel_id
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[1]->action_status_cd =
           CD->ce_cplt_status_cd
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[2]->action_type_cd =
           CD->ce_perform_status_cd
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[2]->action_dt_tm =
;011           requestin->request->orders[ordcnt]->assays[elcnt]->perform_dt_tm
           requestin->reply->orders[ordcnt]->assays[elcnt]->perform_dt_tm ;011
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[2]->action_dt_tm_ind = 0
         if (requestin->request->orders[ordcnt]->assays[elcnt]         ;019
           ->perform_personnel_id = 0)                                 ;019
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_prsnl_list[2]->action_prsnl_id =                 ;019
              CD->cerner_prsnl_id                                      ;019
         else                                                          ;019
            set replyout->clin_event->child_event_list[elcnt2]
              ->event_prsnl_list[2]->action_prsnl_id =
              requestin->request->orders[ordcnt]->assays[elcnt]
              ->perform_personnel_id
         endif                                                         ;019
         set replyout->clin_event->child_event_list[elcnt2]
           ->event_prsnl_list[2]->action_status_cd =
           CD->ce_cplt_status_cd
      else
         set stat = alterlist( replyout->clin_event
           ->child_event_list[prodcnt]->child_event_list[elcnt3]
           ->event_prsnl_list, 2 )
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_type_cd = CD->ce_verify_status_cd
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_dt_tm = requestin->reply->event_dt_tm
         if(curutc = 1)
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_prsnl_list[1]
              ->action_tz = requestin->reply->event_tz
             set replyout->clin_event->child_event_list[prodcnt]
               ->child_event_list[elcnt3]->event_prsnl_list[2]
               ->action_tz =
               requestin->reply->orders[ordcnt]->assays[elcnt]->perform_tz
         endif
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_dt_tm_ind = 0
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_prsnl_id = requestin->request->event_personnel_id
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[1]
           ->action_status_cd = CD->ce_cplt_status_cd
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[2]
           ->action_type_cd = CD->ce_perform_status_cd
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[2]
           ->action_dt_tm =
           requestin->request->orders[ordcnt]->assays[elcnt]->perform_dt_tm
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[2]
           ->action_dt_tm_ind = 0
         if (requestin->request->orders[ordcnt]->assays[elcnt]
           ->perform_personnel_id = 0)                                 ;019
            set replyout->clin_event->child_event_list[prodcnt]        ;019
              ->child_event_list[elcnt3]->event_prsnl_list[2]          ;019
              ->action_prsnl_id = CD->cerner_prsnl_id                  ;019
         else                                                          ;019
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->event_prsnl_list[2]
              ->action_prsnl_id =
              requestin->request->orders[ordcnt]->assays[elcnt]
              ->perform_personnel_id
         endif                                                         ;019
         set replyout->clin_event->child_event_list[prodcnt]
           ->child_event_list[elcnt3]->event_prsnl_list[2]
           ->action_status_cd = CD->ce_cplt_status_cd
      endif
   endif
 
   if (activity_subtype_mean != "HLA TYPING")                          ;033
     if (three_level_ind = 0)                                          ;033
       Call SetEventOrderActionPrsnl (2)                                    ;033
     else                                                              ;033
       Call SetEventOrderActionPrsnl (3)                                    ;033
     endif                                                             ;033
   endif                                                               ;033
 
   end
 
   /***********************************************************************
   * Result Footnote Subroutine                                           *
   ***********************************************************************/
   subroutine FootNote( none5 )
 
   Call LOG_MESSAGE ("Called into FootNote", LOG_LEVEL_DEBUG)                           ;026
 
   Call LOG_MESSAGE (build( "Comment cnt:",
     requestin->request->orders[ordcnt]->assays[elcnt]->result_comment_cnt ), LOG_LEVEL_DEBUG)  ;026
 
   set nPopulateResComInd = 0
   set nPopulateResNoteInd = 0
   set nResComPopulatedInd = 0
   set nResNotePopulatedInd = 0
 
   set comment_cnt = 0
   if (requestin->request->orders[ordcnt]->assays[elcnt]->result_comment_cnt > 0)
      set comment_cnt = requestin->request->orders[ordcnt]->assays[elcnt]->result_comment_cnt
      if (three_level_ind = 0)
         set stat = alterlist( replyout->clin_event
           ->child_event_list[elcnt2]->event_note_list, comment_cnt )
          set curalias = RepOut_CurEventList
            replyout->clin_event->child_event_list[elcnt2]
      else
         set stat = alterlist( replyout->clin_event
           ->child_event_list[prodcnt]->child_event_list[elcnt3]
           ->event_note_list, comment_cnt )
          set curalias = RepOut_CurEventList
            replyout->clin_event->child_event_list[prodcnt]->child_event_list[elcnt3]
      endif
         
      if (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->correct_status_cd)
        select into "nl:"
        from clinical_event ce,
             ce_event_note cen
        plan ce
          where ce.reference_nbr = RepOut_CurEventList->reference_nbr
             and ce.contributor_system_cd = RepOut_CurEventList->contributor_system_cd
             and ce.valid_until_dt_tm = cnvtdatetime("31-DEC-2100 00:00:00.00")
        join cen
          where cen.event_id = ce.event_id
            and cen.note_type_cd in (CD->res_comment_cd, CD->res_note_cd)
        detail
          if (cen.note_type_cd = CD->res_comment_cd)
            nPopulateResComInd = 1
          elseif (cen.note_type_cd = CD->res_note_cd)
            nPopulateResNoteInd = 1
          endif
        with nocounter
            
        if (curqual != 0)
         set nPopulateResComInd = 1
        endif
      endif
 
      set comment_idx = 0
      set lCommentCnt = 0
      for (comment_idx = 1 to comment_cnt)
;006         if (product_written = 0)

         if (requestin->request->orders[ordcnt]->assays[elcnt]->result_comment[comment_idx]->comment_type_cd = CD->res_note_cd)
           set nResNotePopulatedInd = 1
         elseif (requestin->request->orders[ordcnt]->assays[elcnt]->result_comment[comment_idx]->comment_type_cd = 
                                                                                                            CD->res_comment_cd)
           set nResComPopulatedInd = 1
         endif
         
         set nTextNotBlankInd = 0
         if ((textlen(trim(requestin->request->orders[ordcnt]->assays[elcnt]->result_comment[comment_idx]->comment_text, 3)) > 0)
             and (trim(requestin->request->orders[ordcnt]->assays[elcnt]->result_comment[comment_idx]->comment_text, 3) !=
             uar_i18ngetmessage(i18nHandle, "TEXTREMOVED", "<Text removed>")))
              set nTextNotBlankInd = 1
         endif
 
         if ((((requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->verify_status_cd) or
               (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->correct_status_cd) or
               (requestin->request->orders[ordcnt]->assays[elcnt]->result_status_cd = CD->auto_verify_status_cd)) and
               (nTextNotBlankInd = 1)) Or
               (nPopulateResComInd = 1 and requestin->request->orders[ordcnt]->assays[elcnt]->result_comment[comment_idx]->
               comment_type_cd = CD->res_comment_cd) Or
               (nPopulateResNoteInd = 1 and requestin->request->orders[ordcnt]->assays[elcnt]->result_comment[comment_idx]->
               comment_type_cd = CD->res_note_cd))
  
            set lCommentCnt = lCommentCnt + 1
            if (three_level_ind = 0)                                      ;006
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->note_type_cd =
                 requestin->request->orders[ordcnt]->assays[elcnt]
                 ->result_comment[comment_idx]->comment_type_cd
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->long_blob =
                 requestin->request->orders[ordcnt]->assays[elcnt]
                 ->result_comment[comment_idx]->comment_text
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->note_dt_tm =
   ;011              requestin->request->orders[ordcnt]->assays[elcnt]
   ;011              ->perform_dt_tm
                 requestin->reply->orders[ordcnt]->assays[elcnt]          ;011
                 ->perform_dt_tm                                          ;011
               if(curutc =1 )
                   set replyout->clin_event->child_event_list[elcnt2]
                     ->event_note_list[lCommentCnt]->note_tz =
                     requestin->reply->orders[ordcnt]->assays[elcnt]
                     ->perform_tz
               endif
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->note_dt_tm_ind = 0
               if (requestin->request->orders[ordcnt]->assays[elcnt]      ;019
                 ->perform_personnel_id = 0)                              ;019
                  set replyout->clin_event->child_event_list[elcnt2]      ;019
                    ->event_note_list[lCommentCnt]->note_prsnl_id =       ;019
                    CD->cerner_prsnl_id                                   ;019
               else                                                       ;019
                  set replyout->clin_event->child_event_list[elcnt2]
                    ->event_note_list[lCommentCnt]->note_prsnl_id =
                    requestin->request->orders[ordcnt]->assays[elcnt]
                    ->perform_personnel_id
               endif                                                      ;019
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->record_status_cd =
                 CD->active_cd
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->entry_method_cd =
                 CD->entry_method_cd
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->note_format_cd =
                 CD->blob_format_cd
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->valid_until_dt_tm_ind = 1
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->valid_from_dt_tm_ind = 1
               set replyout->clin_event->child_event_list[elcnt2]
                 ->event_note_list[lCommentCnt]->checksum_ind = 1
            else
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->note_type_cd =
                 requestin->request->orders[ordcnt]->assays[elcnt]
                 ->result_comment[comment_idx]->comment_type_cd
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->long_blob =
                 requestin->request->orders[ordcnt]->assays[elcnt]
                 ->result_comment[comment_idx]->comment_text
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->note_dt_tm =
                 requestin->request->orders[ordcnt]->assays[elcnt]
                 ->perform_dt_tm
               if(curutc = 1)
                  set replyout->clin_event->child_event_list[elcnt2]
                    ->event_note_list[lCommentCnt]->note_tz =
                    requestin->reply->orders[ordcnt]->assays[elcnt]
                    ->perform_tz
               endif
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->note_dt_tm_ind = 0
               if (requestin->request->orders[ordcnt]->assays[elcnt]      ;019
                 ->perform_personnel_id = 0)                              ;019
                  set replyout->clin_event->child_event_list[prodcnt]     ;019
                    ->child_event_list[elcnt3]->event_note_list[lCommentCnt] ;019
                    ->note_prsnl_id = CD->cerner_prsnl_id                 ;019
               else                                                       ;019
                  set replyout->clin_event->child_event_list[prodcnt]
                    ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                    ->note_prsnl_id =
                    requestin->request->orders[ordcnt]->assays[elcnt]
                    ->perform_personnel_id
               endif                                                      ;019
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->record_status_cd = CD->active_cd
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->entry_method_cd = CD->entry_method_cd
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->note_format_cd = CD->blob_format_cd
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->valid_until_dt_tm_ind = 1
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->valid_from_dt_tm_ind = 1
               set replyout->clin_event->child_event_list[prodcnt]
                 ->child_event_list[elcnt3]->event_note_list[lCommentCnt]
                 ->checksum_ind = 1
            endif
         endif   
      endfor
      if (lCommentCnt > 0)
        set comment_ind = 1
        set subtablemap = subtablemap + 2  ;* Add footnotes
      endif
      set stat = alterlist(RepOut_CurEventList->event_note_list, lCommentCnt)
      call ProcessInterpData ( 0 )
   endif
   if (nResComPopulatedInd = 0 or nResNotePopulatedInd = 0)
      ;* Logic to perform only result with footnote then verify only
      if (requestin->request->orders[ordcnt]->assays[elcnt]            ;016
        ->chartable_flag = 1)                                          ;016
         set comment_ind = 1                                           ;029
         set subtablemap = subtablemap + 2  ;* Add footnotes           ;016
                                                                       ;016
         if (nResComPopulatedInd = 0)
           call ProcessComment ( 0 )                                   ;016
         endif
         
         if (nResNotePopulatedInd = 0)
           call ProcessNote ( 0 )                                      ;016
         endif
                                                                       ;016
         if (requestin->request->orders[ordcnt]->assays[elcnt]->result_comment_cnt = 0)
           call ProcessInterpData ( 0 )                                ;016
         endif
      else 
         if (requestin->request->orders[ordcnt]->assays[elcnt]->result_comment_cnt = 0)
           call ProcessInterpData ( 0 )
         endif
         if (textlen(trim(vc_string->curr_long_text)) > 0)
            ;* Add interpdata with no footnote
            set comment_ind = 1                                        ;029
            set subtablemap = subtablemap + 2
         endif
      endif                                                            ;016
   endif
 
   end
 
   /***********************************************************************
   * Freetext Result Subroutine                                           *
   ***********************************************************************/
   subroutine FreetextResult ( none9 )
 
   Call LOG_MESSAGE ("Called into FreetextResult", LOG_LEVEL_DEBUG)       ;026
 
   ;* Format the result
   set num_min =
     requestin->request->orders[ordcnt]->assays[elcnt]->min_digits
   set num_max =
     requestin->request->orders[ordcnt]->assays[elcnt]->max_digits
   set num_dec =
     requestin->request->orders[ordcnt]->assays[elcnt]->min_decimal_places
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set replyout->clin_event->child_event_list[elcnt2]->event_tag =
        requestin->request->orders[ordcnt]->assays[elcnt]->ascii_text
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_class_cd = CD->txt_event_class_cd
   else
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_tag =
        requestin->request->orders[ordcnt]->assays[elcnt]->ascii_text
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_class_cd =
        CD->txt_event_class_cd
   endif
   call SetStringResult ( 0 )
 
   end
 
   /***********************************************************************
   * Date Result Subroutine                                               *
   ***********************************************************************/
   subroutine DateResult ( none3 )
 
   Call LOG_MESSAGE ("Called into DateResult", LOG_LEVEL_DEBUG)                        ;026
 
   if ( didx = 0 )
      set subtablemap = subtablemap + 4194304  ;* Add date result
   endif
   set didx = didx + 1
;006    if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set stat = alterlist( replyout->clin_event
        ->child_event_list[elcnt2]->date_result, didx )
      set replyout->clin_event->child_event_list[elcnt2]->event_tag =
        format(requestin->request->orders[ordcnt]->assays[elcnt]
        ->result_value_dt_tm, "ddmmmyyyy;;d")
        ;* May need to concatenate time in the future.
;       format(requestin->request->orders[ordcnt]->assays[elcnt]
;       ->result_value_dt_tm, "hh:mm;;m"))
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->date_result[didx]->result_dt_tm =
        requestin->request->orders[ordcnt]->assays[elcnt]
        ->result_value_dt_tm
      set replyout->clin_event->child_event_list[elcnt2]
        ->date_result[didx]->result_dt_tm_ind = 0
      set replyout->clin_event->child_event_list[elcnt2]
        ->date_result[didx]->result_dt_tm_os_ind = 1
      set replyout->clin_event->child_event_list[elcnt2]               ;007
        ->date_result[didx]->date_type_flag = date_rslt_type           ;007
      set replyout->clin_event->child_event_list[elcnt2]               ;007
        ->date_result[didx]->date_type_flag_ind = 0                    ;007
 
      set replyout->clin_event->child_event_list[elcnt2]
        ->event_class_cd = CD->txt_event_class_cd
   else
      set stat = alterlist( replyout->clin_event
        ->child_event_list[prodcnt]->child_event_list[elcnt3]
        ->date_result, didx )
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_tag =
        format(requestin->request->orders[ordcnt]->assays[elcnt]
        ->result_value_dt_tm, "ddmmmyyyy;;d")
        ;* May need to concatenate time in the future.
;       format(requestin->request->orders[ordcnt]->assays[elcnt]
;       ->result_value_dt_tm, "hh:mm;;mt"))
 
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->date_result[didx]->result_dt_tm =
        requestin->request->orders[ordcnt]->assays[elcnt]
        ->result_value_dt_tm
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->date_result[didx]
        ->result_dt_tm_ind = 0
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->date_result[didx]
        ->result_dt_tm_os_ind = 1
 
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->event_class_cd =
        CD->txt_event_class_cd
   endif
 
   end
 
   /***********************************************************************
   * Interp Result Subroutine                                             *
   ***********************************************************************/
   subroutine InterpResult ( none12 )
 
   Call LOG_MESSAGE ("Called into InterpResult", LOG_LEVEL_DEBUG)                ;026
 
   ;* Setting the string_flag to 2 will force a string_result entry
   ;* for components to be tied to.
   set string_flag = 2
   call AlphaResult ( 0 )
   if (trim(requestin->request->orders[ordcnt]->assays[elcnt]
     ->rtf_text) > " ")
      call TextResult ( 0 )
   endif
   if ( validate( CDBB->blood_bank_ind , "N" ) = "N" )
      call SetComponent ( 0 )
   endif
 
   end
 
   /***********************************************************************
   * Calculation Result Subroutine                                        *
   ***********************************************************************/
   subroutine CalcResult ( none13 )
 
   Call LOG_MESSAGE ("Called into CalcResult", LOG_LEVEL_DEBUG)                ;026
 
   call NumericResult ( 0 )
   if ( validate( CDBB->blood_bank_ind , "N" ) = "N" )
      call SetComponent ( 0 )
   endif
 
   end
 
   /***********************************************************************
   * Add Images Subroutine                                                 *
   ***********************************************************************/
   declare AddImages( ) = i2
   subroutine AddImages(null)
 
     call log_message("called into AddImages", log_level_debug)
     
     declare lChildEventListIdx    = i4 with protect, noconstant(0)
     declare lImageIdx             = i4 with protect, noconstant(0)

     declare dImage_cd             = f8 with protect, noconstant(0.0)
     declare dImage_event_cd       = f8 with protect, noconstant(0.0)

     ;set up the alias for this subroutine
     set curalias = rep_assays
                    requestin->reply->orders[ordcnt]->assays[elcnt]

     ;set up the aliases for this subroutine
     if (three_level_ind = 0)
       set curalias = RepOut_SetImage
                          replyout->clin_event->child_event_list[elcnt2]->child_event_list[lChildEventListIdx]
  
       set curalias = RepOut_SetImageParent
                          replyout->clin_event->child_event_list[elcnt2]
     else
       ;set up the alias for this subroutine
       set curalias = RepOut_SetImage
                          replyout->clin_event->child_event_list[prodcnt]->child_event_list[elcnt3]
                                              ->child_event_list[lChildEventListIdx]
  
       set curalias = RepOut_SetImageParent
                          replyout->clin_event->child_event_list[prodcnt]->child_event_list[elcnt3]
     endif

     set dImage_cd = uar_get_code_by("MEANING", 73, "DOC_IMAGE")
       
     select into "nl:"
     from 
       code_value_event_r cver
     plan cver where cver.parent_cd = dImage_cd
     detail
       dImage_event_cd = cver.event_cd
     with nocounter

       call log_message("doc_image event code was not found.", log_level_warning)
     if (dImage_event_cd = 0.0 or dImage_cd = 0.0)
       call log_message("doc_image event code was not found.", log_level_warning)
       return(0)
     endif


     for (lImageIdx = 1 to rep_assays->image_cnt)

       if (((((rep_assays->result_status_cd = CD->verify_status_cd) or 
             (rep_assays->result_status_cd = CD->auto_verify_status_cd))
        and (rep_assays->images[lImageIdx]->delete_ind = 0))

       or (rep_assays->result_status_cd = CD->correct_status_cd))

        and (rep_assays->images[lImageIdx]->blob_ref_id > 0.0))
        
         set lChildEventListIdx = size(RepOut_SetImageParent->child_event_list, 5) + 1
         set stat = alterlist( RepOut_SetImageParent->child_event_list, lChildEventListIdx)
  
         set RepOut_SetImage->event_start_dt_tm     = RepOut_SetImageParent->event_start_dt_tm
         set RepOut_SetImage->event_end_dt_tm       = RepOut_SetImageParent->event_end_dt_tm
         set RepOut_SetImage->valid_until_dt_tm_ind = RepOut_SetImageParent->valid_until_dt_tm_ind
         set RepOut_SetImage->valid_from_dt_tm_ind 	= RepOut_SetImageParent->valid_from_dt_tm_ind
         set RepOut_SetImage->updt_dt_tm_ind        = RepOut_SetImageParent->updt_dt_tm_ind
         set RepOut_SetImage->order_id              = RepOut_SetImageParent->order_id
         set RepOut_SetImage->person_id             = RepOut_SetImageParent->person_id
         set RepOut_SetImage->encntr_id             = RepOut_SetImageParent->encntr_id
         set RepOut_SetImage->accession_nbr         = RepOut_SetImageParent->accession_nbr
         set RepOut_SetImage->catalog_cd            = RepOut_SetImageParent->catalog_cd
         set RepOut_SetImage->contributor_system_cd = RepOut_SetImageParent->contributor_system_cd
         set RepOut_SetImage->inquire_security_cd   = RepOut_SetImageParent->inquire_security_cd
         set RepOut_SetImage->reference_nbr         = concat(trim(cnvtstring(rep_assays->result_id,32,6)),
                                                         trim(cnvtstring(rep_assays->images[lImageIdx]->blob_ref_id,32,6)))
         set RepOut_SetImage->view_level 	          = 1
         set RepOut_SetImage->authentic_flag 	      = 1
         set RepOut_SetImage->event_cd              = dImage_event_cd
  
         set RepOut_SetImage->publish_flag              = rep_assays->images[lImageIdx]->publish_flag
         set RepOut_SetImage->event_reltn_cd            = CD->child_event_reltn_cd
         set RepOut_SetImage->event_class_cd            = CD->doc_event_class_cd
         set RepOut_SetImage->record_status_cd          = CD->active_cd
  
         if (correct_ind = 1)
           set RepOut_SetImage->result_status_cd        = CD->modified_cd
         else
           set RepOut_SetImage->result_status_cd        = CD->auth_cd
         endif
  
         set RepOut_SetImage->event_tag                 = rep_assays->images[lImageIdx]->blob_title
         set RepOut_SetImage->event_title_text          = rep_assays->images[lImageIdx]->blob_title
         set RepOut_SetImage->subtable_bit_map          = 256
    
         set stat = alterlist(RepOut_SetImage->blob_result, 1)
         set RepOut_SetImage->blob_result[1]->succession_type_cd  = CD->blob_succession_cd
         set RepOut_SetImage->blob_result[1]->storage_cd          = cd->otg_storage_cd
         set RepOut_SetImage->blob_result[1]->format_cd           = rep_assays->images[lImageIdx]->format_cd

         if (rep_assays->images[lImageIdx]->delete_ind = 0)
           set RepOut_SetImage->blob_result[1]->blob_handle       = rep_assays->images[lImageIdx]->blob_handle
         else
           set RepOut_SetImage->blob_result[1]->blob_handle       = '""'
         endif

       endif

     endfor
     
     set curalias rep_assays off
     set curalias RepOut_SetImage off
     set curalias RepOut_SetImageParent off

     return (1)

   end

   /***********************************************************************
   * Set Component Subroutine                                             *
   ***********************************************************************/
   subroutine SetComponent( none14 )
 
   Call LOG_MESSAGE ("Called into SetComponent", LOG_LEVEL_DEBUG)                ;026
 
   Call LOG_MESSAGE (build( "Component cnt:",
     (requestin->reply->orders[ordcnt]->assays[elcnt]->components_cnt)), LOG_LEVEL_DEBUG)         ;026
 
   if (requestin->reply->orders[ordcnt]->assays[elcnt]->components_cnt > 0)
      set subtablemap = subtablemap + 16384  ;* Add components
      set component_cnt = requestin->reply->orders[ordcnt]->assays[elcnt]
        ->components_cnt
;006      if (product_written = 0)
      if (three_level_ind = 0)                                         ;006
         set stat = alterlist( replyout->clin_event
           ->child_event_list[elcnt2]->string_result[sidx]
           ->interp_comp_list, component_cnt )
         set component_idx = 0
         for (component_idx = 1 to component_cnt)
            set replyout->clin_event->child_event_list[elcnt2]
              ->string_result[sidx]->interp_comp_list[component_idx]
              ->comp_idx = component_idx
            set replyout->clin_event->child_event_list[elcnt2]
              ->string_result[sidx]->interp_comp_list[component_idx]
              ->comp_event_id =
              requestin->reply->orders[ordcnt]->assays[elcnt]
              ->components[component_idx]->used_perform_result_id
         endfor
      else
         set stat = alterlist( replyout->clin_event
           ->child_event_list[prodcnt]->child_event_list[elcnt3]
           ->string_result[sidx]->interp_comp_list, component_cnt )
         set component_idx = 0
         for (component_idx = 1 to component_cnt)
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->string_result[sidx]
              ->interp_comp_list[component_idx]->comp_idx =
              component_idx
            set replyout->clin_event->child_event_list[prodcnt]
              ->child_event_list[elcnt3]->string_result[sidx]
              ->interp_comp_list[component_idx]->comp_event_id =
              requestin->reply->orders[ordcnt]->assays[elcnt]
              ->components[component_idx]->used_perform_result_id
         endfor
      endif
   endif
 
   end
 
   /***********************************************************************
   * Set Blob Result Subroutine                                           *
   ***********************************************************************/
   subroutine SetBlobResult( none11 )

   declare WR        = vc with constant(" \plain \f0 \fs24 \cb2 ")
   declare RTFEOF    = vc with constant("}")
   declare RHEAD     = vc with
   constant("{\rtf1\ansi\deff0{\fonttbl{\f0\fswiss Microsoft Sans Serif;}{\f1\fswiss Tahoma;}}\deflang2057\deflange2057")
   declare RHEAD_FIXED = vc with
   constant("{\rtf1\ansi\deff0{\fonttbl{\f0\fmodern\fcharset0\fprq1 Courier New;}}\plain\f0\fs24")

   Call LOG_MESSAGE ("Called into SetBlobResult", LOG_LEVEL_DEBUG)                  ;026
 
   if ( bridx = 0 )
      set subtablemap = subtablemap + 256  ;* Add blob result
   endif
   set bridx = bridx + 1
;006   if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set stat = alterlist( replyout->clin_event
        ->child_event_list[elcnt2]->blob_result, bridx )
      set replyout->clin_event->child_event_list[elcnt2]
        ->blob_result[bridx]->succession_type_cd = CD->blob_succession_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->blob_result[bridx]->storage_cd = CD->blob_storage_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->blob_result[bridx]->format_cd = CD->rtf_blob_format_cd
      if ( bidx = 0 )
         set subtablemap = subtablemap + 512  ;* Add blob
      endif
      set bidx = bidx + 1
      set stat = alterlist( replyout->clin_event
        ->child_event_list[elcnt2]->blob_result[bridx]->blob, bidx )
      set replyout->clin_event->child_event_list[elcnt2]
        ->blob_result[bridx]->blob[bidx]->blob_seq_num_ind = 1
      set replyout->clin_event->child_event_list[elcnt2]
        ->blob_result[bridx]->blob[bidx]->blob_length_ind = 1
             
      if(substring(1, 5, requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text)!= asis("{\rtf"))
        /* Get the facility of the perform location */
        select into "nl:"
          l.location_cd
        from
          service_resource sr,
          location l
        plan sr where sr.service_resource_cd = requestin->request->orders[ordcnt]->assays[elcnt]->service_resource_cd
        join l  where l.organization_id = sr.organization_id
                  and l.location_type_cd = CD->loc_type_facility_cd
                  and l.active_ind = 1
        detail
          loc_facility_cd = l.location_cd
        with nocounter
    
        /* Load the used fixed width font preference value */
        if (LoadPreferences("system", trim(cnvtstring(loc_facility_cd,32,2)), 
                            "", "", "config", "laboratory") = 1)
          set pref_idx = FindPreference("use fixed width font for text results")
          set pref_use_fixed_width_font = GetPreferenceValue(pref_idx)
        else
          set pref_use_fixed_width_font = "No"
        endif
 
        /* Apply RTF formatting and font to the plain text */
        if (pref_use_fixed_width_font = "Yes")
          set requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text =
            concat(RHEAD_FIXED, " ", requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text, RTFEOF)
        else
          set requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text =
            concat(RHEAD, WR, " ", requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text, WR, RTFEOF)
        endif
      endif        
      
      set replyout->clin_event->child_event_list[elcnt2]
        ->blob_result[bridx]->blob[bidx]->blob_contents =
        requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text
   else
      set stat = alterlist( replyout->clin_event
        ->child_event_list[prodcnt]->child_event_list[elcnt3]
        ->blob_result, bridx )
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->blob_result[bridx]
        ->succession_type_cd = CD->blob_succession_cd
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->blob_result[bridx]
        ->storage_cd = CD->blob_storage_cd
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->blob_result[bridx]
        ->format_cd = CD->rtf_blob_format_cd
      if ( bidx = 0 )
         set subtablemap = subtablemap + 512  ;* Add blob
      endif
      set bidx = bidx + 1
      set stat = alterlist( replyout->clin_event
        ->child_event_list[prodcnt]->child_event_list[elcnt3]
        ->blob_result[bridx]->blob, bidx )
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->blob_result[bridx]
        ->blob[bidx]->blob_seq_num_ind = 1
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->blob_result[bridx]
        ->blob[bidx]->blob_length_ind = 1
      
      if(substring(1, 5, requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text)!= asis("{\rtf"))
        /* Get the facility of the perform location */
        select into "nl:"
          l.location_cd
        from
          service_resource sr,
          location l
        plan sr where sr.service_resource_cd = requestin->request->orders[ordcnt]->assays[elcnt]->service_resource_cd
        join l  where l.organization_id = sr.organization_id
                  and l.location_type_cd = CD->loc_type_facility_cd
                  and l.active_ind = 1
        detail
          loc_facility_cd = l.location_cd
        with nocounter
      
        /* Load the used fixed width font preference value */
        if (LoadPreferences("system", trim(cnvtstring(loc_facility_cd,32,2)), 
                            "", "", "config", "laboratory") = 1)
          set pref_idx = FindPreference("use fixed width font for text results")
          set pref_use_fixed_width_font = GetPreferenceValue(pref_idx)
        else
          set pref_use_fixed_width_font = "No"
        endif
 
        /* Apply RTF formatting and font to the plain text */
        if (pref_use_fixed_width_font = "Yes")
          set requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text =
            concat(RHEAD_FIXED, " ", requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text, RTFEOF)
        else
          set requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text =
            concat(RHEAD, WR, " ", requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text, WR, RTFEOF)
        endif
      endif
              
      set replyout->clin_event->child_event_list[prodcnt]
        ->child_event_list[elcnt3]->blob_result[bridx]
        ->blob[bidx]->blob_contents =
        requestin->request->orders[ordcnt]->assays[elcnt]->rtf_text
   endif
 
   end
 
   /***********************************************************************
   * Set String Result Subroutine                                         *
   ***********************************************************************/
   subroutine SetStringResult( none6 )
 
   ;* Note the string result table has had the normal low/high and
   ;* critical low/high removed and placed on the clinical event,
   ;* but this is still filled out in this paragraph.
   Call LOG_MESSAGE ("Called into SetStringResult", LOG_LEVEL_DEBUG)             ;026
 
   if ( sidx = 0 )
      set subtablemap = subtablemap + 8192  ;* Add string result
   endif
   set sidx = sidx + 1
 
   ;* Format the string result table
;006   if (product_written = 0)
   if (three_level_ind = 0)                                            ;006
      set stat = alterlist( replyout->clin_event
        ->child_event_list[elcnt2]->string_result, sidx )
      set replyout->clin_event->child_event_list[elcnt2]
        ->string_result[sidx]->string_result_text =
        replyout->clin_event->child_event_list[elcnt2]->event_tag
      if (string_flag = 1)
         set replyout->clin_event->child_event_list[elcnt2]
           ->string_result[sidx]->string_result_format_cd =
           CD->string_num_cd
      else
         set replyout->clin_event->child_event_list[elcnt2]
           ->string_result[sidx]->string_result_format_cd =
           CD->string_alp_cd
      endif
      set replyout->clin_event->child_event_list[elcnt2]
        ->string_result[sidx]->last_norm_dt_tm_ind = 1
      set replyout->clin_event->child_event_list[elcnt2]
        ->string_result[sidx]->unit_of_measure_cd =
        requestin->request->orders[ordcnt]->assays[elcnt]->units_cd
      set replyout->clin_event->child_event_list[elcnt2]
        ->string_result[sidx]->feasible_ind_ind = 0
      if ((requestin->request->orders[ordcnt]->assays[elcnt]
        ->review_cd = CD->num_review_cd)
      or (requestin->request->orders[ordcnt]->assays[elcnt]
        ->review_cd = CD->alp_review_cd))
         set replyout->clin_event->child_event_list[elcnt2]
           ->string_result[sidx]->feasible_ind = 1
      else
         set replyout->clin_event->child_event_list[elcnt2]
           ->string_result[sidx]->feasible_ind = 0
      endif
 
      call SetNormalValues( 0 )
 
      ;* normal_range_flag 0=no ranges, 1=low only, 2= high only, 3=both
      set normal_range_flag = requestin->request->orders[ordcnt]       ;018
        ->assays[elcnt]->normal_range_flag                             ;018
      case (normal_range_flag)                                         ;018
        of 0:                                                          ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_high = '""'                       ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_low = '""'                        ;018
        of 1:                                                          ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_high = '""'                       ;018
           set num_value = requestin->request->orders[ordcnt]          ;018
             ->assays[elcnt]->normal_low                               ;018
           call format_numeric_result                                  ;018
             ( num_min, num_max, num_dec, 4, num_value, num_sci_note_ind )               ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_low = formatted->result_value                    ;018
        of 2:                                                          ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_low = '""'                        ;018
           set num_value = requestin->request->orders[ordcnt]          ;018
             ->assays[elcnt]->normal_high                              ;018
           call format_numeric_result                                  ;018
             ( num_min, num_max, num_dec, 3, num_value, num_sci_note_ind )               ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_high = formatted->result_value                   ;018
        of 3:                                                          ;018
           set num_value = requestin->request->orders[ordcnt]          ;018
             ->assays[elcnt]->normal_high                              ;018
           call format_numeric_result                                  ;018
             ( num_min, num_max, num_dec, 0, num_value, num_sci_note_ind )               ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_high = formatted->result_value                   ;018
           set num_value = requestin->request->orders[ordcnt]          ;018
             ->assays[elcnt]->normal_low                               ;018
           call format_numeric_result                                  ;018
             ( num_min, num_max, num_dec, 0, num_value, num_sci_note_ind )               ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_low = formatted->result_value                    ;018
        else                                                           ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_high = '""'                       ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->normal_low = '""'                        ;018
      endcase                                                          ;018
      ;* critical_range_flag 0=no ranges, 1=low only, 2= high only, 3=both
      set critical_range_flag = requestin->request->orders[ordcnt]     ;018
        ->assays[elcnt]->critical_range_flag                           ;018
      case (critical_range_flag)                                       ;018
        of 0:                                                          ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->critical_high = '""'                     ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->critical_low = '""'                      ;018
        of 1:                                                          ;018
           set replyout->clin_event->child_event_list[elcnt2]          ;018
             ->critical_high = '""'                     ;018
           set num_value = requestin->request->orders[ordcnt]          ;018
             ->assays[elcnt]->critical_low                             ;018
           call format_numeric_result                                  ;018
             ( num_min, num_max