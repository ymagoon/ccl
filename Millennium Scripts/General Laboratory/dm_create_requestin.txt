 ;;Solution_Test/script/Database Architecture -- Tools/DM_DBIMPORT/dm_create_requestin.inc Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1995 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:       dm_create_requestin.inc
        Object name:            N/A
        Request #:              None
 
        Product:                Database Architecture -ACCESS
        Product Team:           Database Architecture -ACCESS
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        This program is only intended to create the
                                requestin record structure used as part
                                of the csv file loading process.
 
        Tables updated:         None
 
        Executing from:         CCL
 
        Special Notes:          This include file could be used from one of two possible scenarios.
                                1) The script intending to perform a db_dbimport load wants access
                                to this record structure after the load has completed, in which
                                case this subroutine will get called before dm_dbimport runs,
                                and should be invoked with a validate_flag of 0.
                                2) This method is invoked during the normal dm_dbimport load, which
                                could be the first or second time it has been run.  It should
                                always have a validate_flag of 0 for this scenario.
 
******************************************************************************/
/*DB~************************************************************************
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer  Comment                                        *
;    *--- -------- --------- ---------------------------------------------- *
;    *000 05/16/06 AC010168  Initial Release                                *
;    *001 06/05/06 AC010168  Added 2 new readmes to exemption list          *
;    *003 01/14/07 MC014342  Enhanced so that dm_dbimport loads can support *
;    *                       tab-delimited files. CR 1-1673702555           *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************/
 
%i cclsource:dm_readme_data.inc
 
/*****  If this is the second time through, and I already created
        the record structure, then just exist successfully  *****/ 
        
if (validate(requestin->dm_dbimport_validate, "Nope") != "Nope")
  set rdm_status           = 'S'
  set readme_data->status  = 'S'
  set readme_data->message = 'Requestin Already Created Successfully'
 
  go to exit_requestin
endif
 
%i cclsource:dm_purge_requestin.inc
 
if (validate(dm2_debug_flag, -1) = -1 and validate(dm2_debug_flag, -2) = -2)
   free set dm_rr_debug_flag
   declare dm_rr_debug_flag = i2
   set dm_rr_debug_flag = 0
else
   free set dm_rr_debug_flag
   declare dm_rr_debug_flag = i2
   set dm_rr_debug_flag = dm2_debug_flag
endif
 
if (not validate(rec_info, 0))
  free record rec_info
  record rec_info
  (1 list_0[*]
     2 rec_line        = vc
     2 assignment_line = vc ) with public
endif
 
if (not validate(rdm_line_data, 0))
  free record rdm_line_data
  record rdm_line_data
  (1  str = vc) with public
endif
 
if (not validate(str_data, 0))
  free record str_data
  record str_data
  (1 string_qual = vc) with public
endif
 
if (not validate(columns_1, 0))
  free record columns_1
  record columns_1
  (1 list_1[*]
     2 field_name  = vc ) with public
endif
 
/*****  Variables only used in dm_create_requestin.inc  *****/
if (validate(rdm_for_cnt, -999) = -999)
  declare rdm_for_cnt     = i4   with public, noconstant(1)   ;counter used in for loop
endif
if (validate(rdm_line_len, -999) = -999)
  declare rdm_line_len    = i4   with public, noconstant(0)   ;length of individual line
endif
if (validate(rdm_check_pos, -999) = -999)
  declare rdm_check_pos   = i4   with public, noconstant(0)   ;integer value for parsing
endif
if (validate(rdm_field_total, -999) = -999)
  declare rdm_field_total = i4   with public, noconstant(0)   ;total number of fields
endif
if (validate(rdm_csv_name, "Nothing") = "Nothing")
  declare rdm_csv_name    = c100 with public                  ;csv file name
endif
if (validate(rdm_status, "Q") = "Q")
  declare rdm_status      = c1   with public, noconstant("F") ;success or fail status
endif
if (validate(rdm_err_msg, "Nothing") = "Nothing")
  declare rdm_err_msg     = c132 with public                  ;used for error message
endif
if (validate(rdm_col_size, -999) = -999)
  declare rdm_col_size    = i4   with public, noconstant(0)   ;size of col rec struct
endif
if (validate(delim, "Q") = "Q")
  declare delim           = c1   with public                  ;used to store the delimiter
endif
if (validate(rdm_stat, -999) = -999)
  declare rdm_stat        = i4   with public, noconstant(0)   ;generic variable use
endif
 
/*****  Variables used in dm_create_requestin.inc and dm_dbimport.prg  *****/
if (validate(dm_dbi_rtl3_ind, -999) = -999)
  declare dm_dbi_rtl3_ind = i2   with public, noconstant(-1)   ;determines if we're using rtl3 or rtl2
endif
 
free define rtl2
 
/*****  Make sure the csv file exists, since it may not have already
        been previously validated by dm_dbimport  *****/
set rdm_stat = findfile(trim(dm_dbi_csv_name,3))
if (rdm_stat = 0)
  call echo("*****************************************")
  call echo("********    Program failed     **********")
  call echo("**** DATA file could not be found *******") 
  call echo("*****************************************")
 
  set readme_data->status  = "F"
  set readme_data->message = "DATA File cound not be found." 
  go to exit_requestin
endif
 
/*****  Define the rtl logical to open the csv file  *****/
if (readme_data->readme_id > 0)
   set rdm_csv_name = concat("rdm_csv",trim(cnvtstring(readme_data->readme_id),3))
else
   set rdm_csv_name = "rdm_csv_name"
endif
 
call parser(concat('set logical ',trim(value(rdm_csv_name),3),' "',trim(dm_dbi_csv_name,3),'"'));004
call parser('go')
 
declare cur_csv_name = c100 with private, noconstant(value(rdm_csv_name))
 
free define rtl2
define rtl2 is value(cur_csv_name)
 
if (dm_dbi_rtl3_ind = -1)
  select into "NL:"
    from rtl2t t
  detail
    if (textlen(trim(t.line,3)) > 1999)
      dm_dbi_rtl3_ind = 1
    endif
  with nocounter
endif
 
if (dm_rr_debug_flag >= 2)
  call echo("*")
  call echo(build("**** MEMORY:", CURMEM, "- End set logical, Begin define"))
  call echo("*")
endif
 
if (dm_dbi_rtl3_ind = 1)
   set maxcolwidth = 32000
   free define rtl3
        define rtl3 is value(rdm_csv_name)
else
   free define rtl2
        define rtl2 is value(rdm_csv_name)
endif
 
if (dm_rr_debug_flag >= 2)
  call echo("*")
  call echo(build("**** MEMORY:", CURMEM, "- End define, begin Create requestin def"))
  call echo("*")
endif
 
/*****  Parse out column headings  *****/
select
  if (dm_dbi_rtl3_ind = 1)
    from rtl3t t
    where t.line 