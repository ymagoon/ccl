 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_upd_wklst_ref/glb_rdm_upd_wklst_ref.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
	Source file name:       Glb_rdm_upd_wklst_ref.prg
	Object name:            Glb_rdm_upd_wklst_ref
	Readme #:		            0
 
	Product:		            PathNet GENLAB
	Product Team:		        PathNet GENLAB
	HNA Version:            500
	CCL Version:
 
	Program purpose:        This readme will popoulate the worklist element table
	                        from the rows that currently exist on the worklist_elements
	                        table.
 
	Tables read,		        TABLE_NAME		          METHOD (UNIQUE, RANGE, FULL)
	and access method:      --------------------    -----------------------------
				                  worklist_ref            Full
				                  output_dest             Full
 
	Tables updated:		      worklist_ref
 
	Executing from:
 
	Special Notes:		      n/a
 
	Run Occurance:		(select ONE of the following)
				-----------------------------
				[X] 1. RUN ONCE
				[ ] 2. RUN MANY
 
	ReadMe Category:	(select ONE of the following)
				-----------------------------
				[ ] 1. Data Load
				[X] 2. Data Conversion
				[ ] 3. Data Migration
				[ ] 4. File Copy
 
	Execution Time:		(select TWO of the following)
				------------------------------------
				[ ] 1. Uptime before uptime schema.
				[X] 2. Uptime after uptime schema.
				[X] 5. Uptime after downtime.
 
	Exec. Justification:	N/A
 
  	Parent Script:		    N/A
 
  	Check Script:		    N/A
 
	Data file for import:   N/A
 
	Execution Duration:	(select ONE of the following)
				----------------------------------
				[ ] 1. Fixed Time
				[X] 2. Driver Table: worklist_ref
;~DB~*************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG               *
;    *************************************************************************
;    *                                                                       *
;    *Mod Date     Engineer             Comment                              *
;    *--- -------- -------------------- -----------------------------------  *
;     000 04/20/06 Shawn Clark		      Initial Creation                     *
;     001 07/12/06 Shawn Clark          Changed status from failed to        *
;                                       success when "UPDATES COMPLETE" found*
;                                       Removed some unnecessary vars        *
/****************************************************************************/
 
DROP PROGRAM glb_rdm_upd_wklst_ref:dba GO
CREATE PROGRAM glb_rdm_upd_wklst_ref:dba
 
%i cclsource:pathnet_ocd_subroutines.inc
%i cclsource:pcs_dm_info_master.inc
 
/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
declare sREADME_NAME = vc with protect, noconstant("")
set sREADME_NAME = "GLB_RDM_UPD_WKLST_REF"
call LOGSCRIPTSTART(sREADME_NAME)
 
/**************************************************************
; DECLARED RECORD STRUCTURES
**************************************************************/
record 	worklist_ref
(
	1 printer_qual[*]
		2 output_dest_name	= vc
		2 output_dest_cd	= f8
)
 
/**************************************************************
; DECLARED VARIABLES
**************************************************************/
declare nReturn           = i2	with protect, noconstant(1)
declare nStat             = i2	with protect, noconstant(0)
declare dInfo_Date        = f8	with protect, noconstant(0.0)
declare sInfo_Char        = vc	with protect, noconstant("")
declare lPrinterCount     = i4	with protect, noconstant(0)
declare sUpdatesComplete  = c1  with protect, noconstant("F")
declare sFailed           = c1  with protect, noconstant("F")
declare iIndex            = i4	with protect, noconstant(0)
declare sErrorMsg         = vc  with protect, noconstant("")
declare nErrorStatus      = i4  with protect, noconstant(0)
 
/**************************************************************
; CONSTANTS
**************************************************************/
declare sUPDATE_COMPLETE	= vc	with protect, constant("UPDATES COMPLETE")
declare sINFO_DOMAIN		  = vc	with protect, constant("Pathnet")
declare sINFO_NAME			  = vc	with protect, constant("glb_rdm_upd_wklst_ref")

set sErrorMsg = FILLSTRING(255, " ")
set nErrorStatus = error(sErrorMsg, 1)
 
/**************************************************************
; SELECT
**************************************************************/
select into "nl:"
from
	dm_info dm
plan dm
	where dm.info_domain = sINFO_DOMAIN
  	  and dm.info_name = sINFO_NAME
detail
	sInfo_Char = dm.info_char
	dInfo_Date = dm.info_date
with NOCOUNTER

if (curqual = 1 and sInfo_Char = sUPDATE_COMPLETE)  ; Exit script if UPDATES_COMPLETE
  set sFailed = "F"
  set sUpdatesComplete = "T"
  go to EXIT_SCRIPT
  
elseif (curqual = 1)
  call InitDMInfoUpdate(1)
  set nStat = gm_u_dm_info2388_dq8('INFO_DATE', cnvtdatetime(curdate, curtime3), 1, 0, 0)
  set gm_u_dm_info2388_req->allow_partial_ind = 0
  set gm_u_dm_info2388_req->force_updt_ind  = 1
  set nReturn = UpdateDMInfo(1.0, sINFO_DOMAIN, sINFO_NAME, sUPDATE_COMPLETE, 0.0, 1)
  if (nReturn = 0)
    rollback
    set sFailed = "T"
    call CleanupDMInfoUpdate(1)
    call LOGSTATUS("DM_INFO table failed to update.", "F")
    go to EXIT_SCRIPT
  endif
  call CleanupDMInfoUpdate(1)

elseif (curqual = 0)
  call InitDMInfoInsert(0)
  set nStat = gm_i_dm_info2388_dq8('INFO_DATE', cnvtdatetime(curdate, curtime3), 1, 0)
  set nReturn = InsertDMInfo(1.0, sINFO_DOMAIN, sINFO_NAME, "", 0.0)
  if (nReturn = 0)
    rollback
    set sFailed = "T"
    call CleanupDMInfoInsert(0)
    call LOGSTATUS("DM_INFO table failed to insert.", "F")
  endif
  call CleanupDMInfoInsert(0)
  set dInfo_Date = cnvtdatetime("01-JAN-1980 00:00")
  
endif

/***********************************************************************
* UPDATE worklist_ref table.                                           *
***********************************************************************/
update into
  worklist_ref wr
set
  wr.mrn_ind                   = 1
  , wr.age_ind                 = 1
  , wr.sex_ind                 = 1
  , wr.room_bed_ind            = 1
  , wr.facility_ind            = 1
  , wr.nurse_unit_ind          = 1
  , wr.report_priority_ind     = 1
  , wr.collect_dt_tm_ind       = 1
  , wr.ordering_physician_ind  = 1
  , wr.updt_dt_tm              = cnvtdatetime(curdate,curtime3)
  , wr.updt_id                 = reqinfo->updt_id
  , wr.updt_task               = reqinfo->updt_task
  , wr.updt_cnt                = wr.updt_cnt + 1
  , wr.updt_applctx            = reqinfo->updt_applctx
where   wr.active_ind = 1 and
  wr.updt_dt_tm > cnvtdatetime(dInfo_Date)
with nocounter
 
/**************************************************************
; SELECT
**************************************************************/
select into "nl:"
  wr.printer
  ,wr.output_dest_cd
from
  worklist_ref wr
plan wr 
  where  wr.active_ind = 1 and
  wr.updt_dt_tm > cnvtdatetime(dInfo_Date)
order by wr.printer
head report
  lPrinterCount = 0
head  wr.printer
  if ((wr.output_dest_cd = 0.0) and (wr.printer > ""))
    lPrinterCount = lPrinterCount + 1
    if (lPrinterCount > size(worklist_ref->printer_qual, 5))
      stat = alterlist(worklist_ref->printer_qual, lPrinterCount + 9)
    endif
    worklist_ref->printer_qual[lPrinterCount].output_dest_name = wr.printer
  endif
with nocounter

if (lPrinterCount > 0)
  set stat = alterlist(worklist_ref->printer_qual, lPrinterCount)
 
  /**************************************************************
  ; SELECT
  **************************************************************/
  select into "nl:"
    od.output_dest_cd
  from
    output_dest od
  plan od where expand(iIndex, 1, lPrinterCount, trim(od.name), worklist_ref->printer_qual[iIndex].output_dest_name)
  detail
    iIndex1 = locateval(iIndex, 1, lPrinterCount, trim(od.name), worklist_ref->printer_qual[iIndex].output_dest_name)
    worklist_ref->printer_qual[iIndex1].output_dest_cd = od.output_dest_cd
  with nocounter
   
  /*******************************************************************/
  /* Select row in worklist_ref table for update.                    */
  /*******************************************************************/
  select into "nl:"
    wr.*
  from
    worklist_ref wr
    ,(dummyt d1 with seq = value(lPrinterCount))
  plan d1 where worklist_ref->printer_qual[d1.seq].output_dest_cd > 0.0
  join wr
      where wr.printer = worklist_ref->printer_qual[d1.seq].output_dest_name
      and wr.output_dest_cd = 0.0
  with nocounter, forupdate(wr)

  /***********************************************************************
  * UPDATE worklist_ref table.                                           *
  ***********************************************************************/
  update into
    worklist_ref wr
    ,(dummyt d1 with seq = value(lPrinterCount))
  set
    wr.output_dest_cd    = worklist_ref->printer_qual[d1.seq].output_dest_cd
    , wr.updt_dt_tm      = cnvtdatetime(curdate,curtime3)
    , wr.updt_id         = reqinfo->updt_id
    , wr.updt_task       = reqinfo->updt_task
    , wr.updt_cnt        = wr.updt_cnt + 1
    , wr.updt_applctx    = reqinfo->updt_applctx
  plan d1 where worklist_ref->printer_qual[d1.seq].output_dest_cd > 0.0
  join wr
      where wr.printer = worklist_ref->printer_qual[d1.seq].output_dest_name
      and wr.output_dest_cd = 0.0
  with nocounter
  
endif   ;if (lPrinterCount > 0)

set nErrorStatus = error(sErrorMsg, 0)
if (nErrorStatus != 0)
    ; errors were returned, so fail script
    rollback
    set sFailed = "T"
    call LOGSTATUS("Readme did not execute successfully.", "F")
    go to EXIT_SCRIPT
endif
 
#EXIT_SCRIPT
if (sFailed = "F")
  ;Script was successful
  if (sUpdatesComplete = "T")
    call LOGSTATUS("Found row and info_char='UPDATES COMPLETE' on the dm_info table.", "S")
  else
    commit
    call LOGSTATUS("Readme executed successfully.", "S")
  endif
endif
 
call LOGSCRIPTEND(sREADME_NAME)
free record worklist_ref
 
end
go
 

;Generated by GNU enscript 1.6.4.
