 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_dta_list/glb_get_dta_list.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_DTA_LIST.PRG
        Object name:            GLB_GET_DTA_LIST
        Request #:              250036

        Product:                Nexus Doc
        Product Team:           GLB
		HNA Version:            500
        CCL Version:            4.0

        Program purpose:        list specified entries from
                                the Discrete_task_assay and
								assay_process_r table

        Tables read:            Discrete_task_assay
        Tables updated:         -
        Executing from:         EquationBuildDLL

        Special Notes:          -

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date       Engineer             Comment                           *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 09/12/2003 Fone Ji              Initial Release                   *
;                  *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program glb_get_dta_list:dba go
create program glb_get_dta_list:dba
/*
record request
(
  1 activity_type_cd = f8
  1 result_type_cd = f8
)
*/

record reply
(
  1 dta_cnt = i4
  1 qual[*]
    2 task_assay_cd = f8
    2 mnemonic = vc
    2 description = vc
%i cclsource:status_block.inc
)

declare dtaCount=i4
declare apr_exists=i2
set reply->status_data->status = "F"
set dtaCount = 0
set reply->dta_cnt = 0
set apr_exists=0


if(request->activity_type_cd  > 0)

	select into "nl:"
	*,   apr_exists = evaluate(nullind(a.task_assay_cd), 0, 1, 0)
	from discrete_task_assay d,
	      assay_processing_r a
	plan d
	where d.activity_type_cd  = request->activity_type_cd
		and d.task_assay_cd>0
		and d.active_ind = 1
	join a where a.task_assay_cd =outerjoin(d.task_assay_cd)
	order by d.mnemonic,d.task_assay_cd

	head d.task_assay_cd
	if(apr_exists = 1)
	   if(a.default_result_type_cd = request->result_type_cd)
	   	  dtaCount = dtaCount + 1
		  if (dtaCount > size(reply->qual,5))
		     stat = alterlist(reply->qual, dtaCount+1)
		  endif

		  reply->qual[dtaCount].task_assay_cd = d.task_assay_cd
		  reply->qual[dtaCount].mnemonic = d.mnemonic
		  reply->qual[dtaCount].description = d.description
		  call echo(build("Iam here"))
	   endif
	elseif(d.default_result_type_cd = request->result_type_cd)
		dtaCount = dtaCount + 1
		if (dtaCount > size(reply->qual,5))
		   stat = alterlist(reply->qual,dtaCount+1)
		endif
		reply->qual[dtaCount].task_assay_cd = d.task_assay_cd
		reply->qual[dtaCount].mnemonic = d.mnemonic
		reply->qual[dtaCount].description = d.description
		call echo(build("dta"))
	endif
    with nocounter

elseif(request->activity_type_cd = 0)
	select into "nl"
	from assay_processing_r a,
		 discrete_task_assay d
	plan a where a.task_assay_cd>0 and a.default_result_type_cd = request->result_type_cd
		 and a.active_ind=1
	join d where d.task_assay_cd = a.task_assay_cd
		   and d.active_ind = 1
	order by d.mnemonic,d.task_assay_cd
	
	head d.task_assay_cd
	

	dtaCount = dtaCount + 1
	if (dtaCount > size(reply->qual,5))
		stat = alterlist(reply->qual,dtaCount+1)
	endif
	reply->qual[dtaCount].task_assay_cd = d.task_assay_cd
	reply->qual[dtaCount].mnemonic = d.mnemonic
	reply->qual[dtaCount].description = d.description

	with nocounter

endif


/* logic for select failed */
if (curqual = 0)
    set reply->status_data->status = "Z"
else
    set reply->status_data->status = "S"
endif

set stat = alterlist(reply->qual, dtaCount)
set reply->dta_cnt = dtaCount

#exit_script

end
go






;Generated by GNU enscript 1.6.4.
