 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_qc_corr_rules/glb_get_qc_corr_rules.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_QC_CORR_RULES.PRG
        Object name:            GLB_GET_QC_CORR_RULES
        Request #:              257529

        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve QC Result info from the database

        Tables read:            qc_result
                                discrete_task_assay
                                nomenclature
                                qc_rule
                                qc_trouble_step

        Tables updated:         n/a

        Executing from:         General Lab QC Correction

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 08/13/96 Chad Moats           Initial Release                     *
;     001 05/11/98 Chad Moats           Add logic to return data map        *
;     002 07/08/98 Chad Moats           Check Active_Ind on QC_Trouble_Step *
;     003 08/17/98 Chad Moats           Add patient data logic              *
;     004 01/06/99 Chad Moats		    Return TSSteps in correct order     *
;     005 05/11/00 Gary Runde           Return the control's short desc     *
;     006 01/03/02 Sasi Gandham         Add UARs and Order By               *
;     007 04/04/07 Faheem Kabeer        Remove expand within Select onto    *
;                                       QC Results                          *
;     008 11/11/10 Ryan Manuel          Add logic for within run            *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_QC_CORR_RULES:dba go
      create program GLB_GET_QC_CORR_RULES:dba

%i cclsource:pcs_subevent.inc
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 ids[5]
           2 qc_result_id             = f8
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 resultids[*]
           2 qc_result_id                 = f8
           2 control_name                 = vc
           2 short_desc                   = vc                ;005
           2 service_resource_cd          = f8
           2 service_resource_disp        = vc
           2 control_id                   = f8
           2 lot_id                       = f8
           2 task_assay_cd                = f8
           2 mnemonic                     = vc
           2 result_type_cd               = f8
           2 result_type                  = vc
           2 result_value_numeric         = f8
           2 result_value_alpha           = c25
           2 nomenclature_id              = f8
           2 perform_dt_tm                = dq8
           2 mean                         = f8
           2 clinical_std_dev             = f8
           2 statistical_std_dev          = f8
           2 abs_low                      = f8
           2 abs_high                     = f8
           2 arl_id                       = f8
           2 result_process_cd            = f8
           2 result_status_cd             = f8
           2 result_control_cd            = f8
           2 qc_group_id                  = f8
           2 comment_type_cd              = f8
           2 action_sequence              = i4
           2 comment_text                 = vc
           2 comment_prsnl_name           = vc
           2 comment_dt_tm                = dq8
           2  perform_prsnl_id            = f8
           2  preactive_ind               = i2
           2  resource_error_codes        = vc
           2  multiplex_resource_cd       = f8
           2  rule_id                     = f8
           2  updt_cnt                    = i4
           2  min_digits                  = i4            
           2  max_digits                  = i4            
           2  min_decimal_places          = i4            
           2 rules[*]
             3 rule_id                    = f8
             3 sequence                   = i4
             3 error_flag                 = i2
             3 rule_form_flag             = i2
             3 rule_definition            = vc
             3 across_control_ind         = i2
             3 across_run_ind             = i2
             3 trig_ind                   = i2
             3 max_req_results            = i4
             3 req_trouble_step_ind       = i2
             3 req_comment_ind            = i2
             3 qc_group_assays[*]
               4 qc_group_assay_id        = f8
               4 deviation_type_flag      = i2
               4 max_result_deviation_value = f8
               4 min_range                = f8
               4 max_range                = f8
           2 troublesteps[*]
             3 trouble_id                 = f8
             3 step                       = vc
             3 step_nbr                   = i2
             3 error_flag                 = i2
             3 updt_cnt                   = i2
             3 selected                   = i2

           2 manf_mean                    = f8
           2 qc_group_assay_id            = f8
           2 units_cd                     = f8
           2 units_disp                   = c40
           2 worklist_id                  = f8

         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
      )

     #Script
      set reply->status_data->status = "F"
      set i_cnt = 0
      set r_cnt = 0
      set t_cnt = 0
      set x = 0
      declare FOOTNOTE_CDF = f8
      declare SERV_RES_TYPE_CODESET       = i4 with protect, constant(223)
      declare SERV_RES_SUBSECTION_CDF     =  c12 with protect, constant("SUBSECTION")
      declare serv_res_subsection_cd  = f8 with protect, noconstant(0.0)
      set ids_to_get = size(request->ids, 5)
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

      record benchmark_criteria
      (
        1 qual[*]
          2 id_idx             = i4
          2 r_idx              = i4
      )
      
      declare bc_idx = i4 with protect, noconstant(0)
      declare q_idx = i4 with protect, noconstant(0)
      
   /***********************************************************************
   * Load code values                                                     *
   ***********************************************************************/

	SET stat = UAR_GET_MEANING_BY_CODESET(SERV_RES_TYPE_CODESET,SERV_RES_SUBSECTION_CDF,1,serv_res_subsection_cd)

    if (serv_res_subsection_cd = 0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of SUBSECTION_CD (cs 223) failed.")
        go to exit_script
    endif

	SET stat = UAR_GET_MEANING_BY_CODESET(14,"QC FTNT",1,FOOTNOTE_CDF)

    if (FOOTNOTE_CDF = 0)
        set failed = "T"
        call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of QC FOOTNOTE (cs 14) failed.")
        go to exit_script
    endif

/*********************************************************************/
/* Select qc results, rules, and troubleshooting steps from database */
/*********************************************************************/

      SELECT
       into "nl:"
         qr_exists_ind       = evaluate(nullind(qr.rule_id), 0, 1, 0),
         data_map_exists_ind = evaluate(nullind(dm.task_assay_cd), 0, 1, 0),
         rg_exists_ind       = evaluate(nullind(rg.child_service_resource_cd), 0, 1, 0),
         rrf1_exists_ind     = evaluate(nullind(rrf1.reference_range_factor_id), 0, 1, 0),
         rrf2_exists_ind     = evaluate(nullind(rrf2.reference_range_factor_id), 0, 1, 0)
      FROM
         qc_result q,
         control_material cm,
         discrete_task_assay d,
         nomenclature n,
         qc_rule qr,
         data_map dm,                             
         resource_group rg,                       
         reference_range_factor rrf1,
         reference_range_factor rrf2
         ,(dummyt d1 with seq = value(ids_to_get))
      PLAN d1
      JOIN q
         where q.qc_result_id = request->ids[d1.seq].qc_result_id
      JOIN cm
         where cm.control_id = q.control_id
      JOIN d
         where d.task_assay_cd = outerjoin(q.task_assay_cd)
      JOIN n
         where n.nomenclature_id = q.nomenclature_id
      JOIN qr
         where qr.rule_id = outerjoin(q.rule_id)
      JOIN dm                                                   
         where dm.task_assay_cd = outerjoin(q.task_assay_cd)
           and dm.active_ind = outerjoin(1)
      JOIN rg                                                   
         where rg.child_service_resource_cd = outerjoin(q.service_resource_cd)
           and rg.resource_group_type_cd = outerjoin(serv_res_subsection_cd)
           and rg.root_service_resource_cd = outerjoin(0.0)
      JOIN rrf1
         where rrf1.service_resource_cd = outerjoin(q.service_resource_cd)
           and rrf1.task_assay_cd       = outerjoin(q.task_assay_cd)
           and rrf1.active_ind          = outerjoin(1)
      JOIN rrf2
         where rrf2.service_resource_cd = outerjoin(0.0)
           and rrf2.task_assay_cd       = outerjoin(q.task_assay_cd)
           and rrf2.active_ind          = outerjoin(1)
     
      ORDER BY q.qc_result_id, qr.sequence
      HEAD q.qc_result_id
         i_cnt = i_cnt + 1
         if (mod(i_cnt,5) = 1)
            stat =  alterlist(reply->resultids,i_cnt + 5)
         endif
         reply->resultids[i_cnt].qc_result_id = q.qc_result_id,
         reply->resultids[i_cnt].control_id = q.control_id,
         reply->resultids[i_cnt].lot_id = q.lot_id,
         reply->resultids[i_cnt].control_name = cm.description
         reply->resultids[i_cnt].short_desc = cm.short_description
         reply->resultids[i_cnt].service_resource_cd = q.service_resource_cd,
         reply->resultids[i_cnt].task_assay_cd = q.task_assay_cd,
         reply->resultids[i_cnt].mnemonic = d.mnemonic,
         reply->resultids[i_cnt].result_type_cd = q.result_type_cd,
         reply->resultids[i_cnt].result_type = uar_get_code_meaning(q.result_type_cd),
         reply->resultids[i_cnt].result_value_numeric = q.result_value_numeric,
         reply->resultids[i_cnt].perform_dt_tm = cnvtdatetime(q.perform_dt_tm),
         reply->resultids[i_cnt].mean = q.mean,
         reply->resultids[i_cnt].clinical_std_dev = q.clinical_std_dev,
         reply->resultids[i_cnt].statistical_std_dev = q.statistical_std_dev,
         reply->resultids[i_cnt].abs_low = q.abs_low,
         reply->resultids[i_cnt].abs_high = q.abs_high,
         reply->resultids[i_cnt].arl_id = q.arl_id,
         reply->resultids[i_cnt].result_process_cd = q.result_process_cd,
         reply->resultids[i_cnt].result_status_cd = q.result_status_cd,
         reply->resultids[i_cnt].result_control_cd = q.result_control_cd,
         reply->resultids[i_cnt].qc_group_id = q.qc_group_id,
         reply->resultids[i_cnt].result_value_alpha = n.source_string,
         reply->resultids[i_cnt].nomenclature_id = q.nomenclature_id,
         reply->resultids[i_cnt].perform_prsnl_id = q.perform_personnel_id,
         reply->resultids[i_cnt].preactive_ind = q.preactive_ind,
         reply->resultids[i_cnt].resource_error_codes = q.resource_error_codes,
         reply->resultids[i_cnt].multiplex_resource_cd = q.multiplex_resource_cd,
         reply->resultids[i_cnt].rule_id = q.rule_id
         reply->resultids[i_cnt].updt_cnt = q.updt_cnt
         reply->resultids[i_cnt].worklist_id = q.worklist_id
         ;* Set the default data map in the event that no data map is found
         data_map_level = 0
         reply->resultids[i_cnt].max_digits = 8
         reply->resultids[i_cnt].min_digits = 1
         reply->resultids[i_cnt].min_decimal_places = 0
         r_cnt = 0
         t_cnt = 0
         if (rrf1_exists_ind = 1)
           reply->resultids[i_cnt].units_cd = rrf1.units_cd
         elseif (rrf2_exists_ind = 1)
           reply->resultids[i_cnt].units_cd = rrf2.units_cd
         endif
      HEAD qr.sequence
         r_cnt = r_cnt + 1
         if (mod(r_cnt,5) = 1)
           stat =  alterlist(reply->resultids[i_cnt].rules,r_cnt + 5)
         endif
         reply->resultids[i_cnt].rules[r_cnt].rule_id = qr.rule_id,
         reply->resultids[i_cnt].rules[r_cnt].sequence = qr.sequence,
         reply->resultids[i_cnt].rules[r_cnt].error_flag = qr.error_flag,
         reply->resultids[i_cnt].rules[r_cnt].rule_form_flag = qr.rule_form_flag,
         reply->resultids[i_cnt].rules[r_cnt].rule_definition = qr.rule_definition,
         reply->resultids[i_cnt].rules[r_cnt].across_control_ind = qr.across_control_ind
         reply->resultids[i_cnt].rules[r_cnt].across_run_ind = qr.across_run_ind
         reply->resultids[i_cnt].rules[r_cnt].trig_ind = qr.trig_ind
         reply->resultids[i_cnt].rules[r_cnt].max_req_results = qr.max_req_results
         reply->resultids[i_cnt].rules[r_cnt].req_trouble_step_ind = qr.req_trouble_step_ind
         reply->resultids[i_cnt].rules[r_cnt].req_comment_ind = qr.req_comment_ind
         if (qr.rule_form_flag = 6 and qr_exists_ind = 1)  ;benchmark deviation rule type
           bc_idx = bc_idx + 1
           if (bc_idx > size(benchmark_criteria->qual, 5))
             stat = alterlist(benchmark_criteria->qual, bc_idx + 5)
           endif
           benchmark_criteria->qual[bc_idx]->id_idx = i_cnt
           benchmark_criteria->qual[bc_idx]->r_idx = r_cnt
           reply->resultids[i_cnt].qc_group_assay_id = q.qc_group_assay_id
         endif
      DETAIL
         if (data_map_exists_ind = 1)                              
            ;* Check for exact match on QC data map              
            if (data_map_level <= 3                              
            and dm.data_map_type_flag = 1                        
            and dm.service_resource_cd > 0.0                     
            and dm.service_resource_cd = q.service_resource_cd)  
               data_map_level = 4                                
               reply->resultids[i_cnt].max_digits = dm.max_digits
               reply->resultids[i_cnt].min_digits = dm.min_digits
               reply->resultids[i_cnt].min_decimal_places =      
                 dm.min_decimal_places                           
            endif                                                
            ;* Check for exact match on data map                 
            if (data_map_level <= 2                              
            and dm.data_map_type_flag = 0                        
            and dm.service_resource_cd > 0.0                     
            and dm.service_resource_cd = q.service_resource_cd)  
               data_map_level = 3                                
               reply->resultids[i_cnt].max_digits = dm.max_digits
               reply->resultids[i_cnt].min_digits = dm.min_digits
               reply->resultids[i_cnt].min_decimal_places =      
                 dm.min_decimal_places                           
            endif                                                
            ;* Check for subsection level data map               
            if (data_map_level <= 1                              
            and dm.data_map_type_flag = 0                        
            and dm.service_resource_cd > 0.0                     
            and rg_exists_ind = 1
            and rg.parent_service_resource_cd = dm.service_resource_cd 
            and rg.child_service_resource_cd = q.service_resource_cd)  
               data_map_level = 2                                
               reply->resultids[i_cnt].max_digits = dm.max_digits
               reply->resultids[i_cnt].min_digits = dm.min_digits
               reply->resultids[i_cnt].min_decimal_places =      
                 dm.min_decimal_places                           
            endif                                                
            ;* Check for default all resources level data map    
            if (data_map_level = 0                               
            and dm.data_map_type_flag = 0                        
            and dm.service_resource_cd = 0.0)                    
               data_map_level = 1                                
               reply->resultids[i_cnt].max_digits = dm.max_digits
               reply->resultids[i_cnt].min_digits = dm.min_digits
               reply->resultids[i_cnt].min_decimal_places =      
                 dm.min_decimal_places                           
            endif                                                
         endif                                                   

      FOOT q.qc_result_id
         stat =  alterlist(reply->resultids[i_cnt].rules, r_cnt)
      WITH
         nocounter,       
         maxread(rrf1, 1),
         maxread(rrf2, 1)

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

      if (r_cnt = 0)
         go to rules_failed
      endif

      if (bc_idx > 0)
        set stat = alterlist(benchmark_criteria->qual, bc_idx)
        
        for (b_idx = 1 to bc_idx)
          select into "nl:"
            rule_sequence = reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx].sequence,
            qga_exists = decode(qga.seq, "Y", "N")
          from
            qc_result qr,
            assay_resource_lot arl,
            dummyt d1,
            qc_group_ctrl_resource qgcr,
            qc_group_assay qga
          plan qr
            where qr.qc_result_id = reply->resultids[benchmark_criteria->qual[b_idx].id_idx].qc_result_id
          join arl
            where arl.arl_id = qr.arl_id
          join d1
          join qgcr
            where qgcr.control_id = qr.control_id
              and qgcr.service_resource_cd = qr.service_resource_cd
          join qga
            where qga.control_group_cd = qgcr.control_group_cd
              and qga.task_assay_cd = qr.task_assay_cd
              and qr.perform_dt_tm between qga.beg_effective_dt_tm 
                                       and qga.end_effective_dt_tm 
          order by qr.qc_result_id, 
                   rule_sequence,
                   qga.qc_group_assay_id
          head qr.qc_result_id
            reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->manf_mean = arl.manf_mean
          head rule_sequence
            row +0
            qga_cnt = 0
          head qga.qc_group_assay_id
            if (qga_exists = "Y")
              qga_cnt = qga_cnt + 1
              if (qga_cnt > size(reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx]->qc_group_assays, 5))
                stat = alterlist(reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx]->qc_group_assays, qga_cnt + 4)
              endif
              
              reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx]
                                   ->qc_group_assays[qga_cnt].qc_group_assay_id = qga.qc_group_assay_id
              reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx]
                                   ->qc_group_assays[qga_cnt].deviation_type_flag = qga.deviation_type_flag
              reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx]
                                   ->qc_group_assays[qga_cnt].max_result_deviation_value = qga.max_result_deviation_value
              reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx]
                                   ->qc_group_assays[qga_cnt].min_range = qga.result_range_min_value
              reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx]
                                   ->qc_group_assays[qga_cnt].max_range = qga.result_range_max_value
            endif
          foot rule_sequence
            if (qga_cnt > 0)
              stat = alterlist(reply->resultids[benchmark_criteria->qual[b_idx].id_idx]->
                                   rules[benchmark_criteria->qual[b_idx].r_idx]
                                   ->qc_group_assays, qga_cnt)
            endif
          with nocounter,
               outerjoin = d1
        endfor
      endif


/*********************************************************************/
/* Get QC Trouble Steps                                              */
/*********************************************************************/

      SELECT
       into "nl:"
         d1.seq,
         q.qc_result_id,
         qt.task_assay_cd,
         qt.trouble_id,
	 qt.step_nbr,							;004
	 qt.error_flag,							;004
         qt_exists = decode(qt.seq, "Y", "N"),
         qcrt.trouble_id,
         qcrt_exists = decode(qcrt.seq, "Y", "N")
      FROM
         qc_result q,
         qc_trouble_step qt,
         qc_result_trouble_r qcrt,
         (dummyt d1 with seq = value(i_cnt)),
         (dummyt d2 with seq = 1),
         (dummyt d3 with seq = 1)
      PLAN d1
      JOIN q
         where q.qc_result_id = request->ids[d1.seq].qc_result_id
      JOIN d2
         where d2.seq = 1
      JOIN qt
         where qt.service_resource_cd = q.service_resource_cd and
               (qt.task_assay_cd = q.task_assay_cd or qt.task_assay_cd = 0)
               and qt.active_ind > 0                                                    ;002
      JOIN d3
         where d3.seq = 1
      JOIN qcrt
         where qcrt.qc_result_id = q.qc_result_id
         and qcrt.trouble_id = qt.trouble_id
      ORDER BY d1.seq, qt.error_flag, qt.step_nbr, qt.trouble_id					;004
      HEAD d1.seq
        x=0
        t_cnt = 0
      HEAD qt.trouble_id
         if (qt_exists = "Y")
           t_cnt = t_cnt + 1
           if (mod(t_cnt,5) = 1)
              stat =  alterlist(reply->resultids[d1.seq].troublesteps,t_cnt + 5)
           endif
           reply->resultids[d1.seq].troublesteps[t_cnt].trouble_id = qt.trouble_id,
           reply->resultids[d1.seq].troublesteps[t_cnt].step = qt.step,
           reply->resultids[d1.seq].troublesteps[t_cnt].step_nbr = qt.step_nbr,
           reply->resultids[d1.seq].troublesteps[t_cnt].error_flag = qt.error_flag,
           if(qcrt_exists = "Y")
             reply->resultids[d1.seq].troublesteps[t_cnt].updt_cnt = qcrt.updt_cnt,
             reply->resultids[d1.seq].troublesteps[t_cnt].selected = qcrt.active_ind
           else
             reply->resultids[d1.seq].troublesteps[t_cnt].updt_cnt = qt.updt_cnt,
             reply->resultids[d1.seq].troublesteps[t_cnt].selected = 0
           endif
         endif
      DETAIL
            x = 0
      FOOT d1.seq
         stat =  alterlist(reply->resultids[d1.seq].troublesteps,t_cnt)
      WITH
         outerjoin = d2,
         outerjoin = d3,
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

/*********************************************************************/
/* Select qc comments from database                                  */
/*********************************************************************/


      SELECT
       into "nl:"
         qc.qc_result_id,
         p.person_id,
         l.long_text_id
      FROM
         qc_comment qc,
         prsnl p,
         long_text l,
         (dummyt d1 with seq = value(i_cnt))
      PLAN d1
      JOIN qc
         where qc.qc_result_id = request->ids[d1.seq].qc_result_id
         and qc.comment_type_cd = FOOTNOTE_CDF
      JOIN l
         where l.long_text_id = qc.long_text_id
      JOIN p
        where p.person_id = qc.perform_prsnl_id
      ORDER BY qc.qc_result_id,
               qc.action_sequence desc
      HEAD qc.qc_result_id
        reply->resultids[d1.seq].comment_type_cd = qc.comment_type_cd,
        reply->resultids[d1.seq].comment_text = l.long_text,
        reply->resultids[d1.seq].perform_prsnl_id = qc.perform_prsnl_id,
        reply->resultids[d1.seq].comment_prsnl_name = p.name_full_formatted
        reply->resultids[d1.seq].comment_dt_tm = qc.comment_dt_tm,
        reply->resultids[d1.seq].action_sequence = qc.action_sequence
      WITH
        nocounter

      set stat = alterlist(reply->resultids,i_cnt)

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

      set reply->status_data->status = "S"
      go to exit_script

/********************************************************************/
/* Executed if qc_result table get is unsuccessful                  */
/********************************************************************/
      #rules_failed
        set reply->status_data->subeventstatus[1]->operationname =
           "get"
        set reply->status_data->subeventstatus[1]->operationstatus =
           "F"
        set reply->status_data->subeventstatus[1]->targetobjectname =
           "table"
        set reply->status_data->subeventstatus[1]->targetObjectValue =
           "qc_results table"
        set reply->status_data->status = "Z"

      go to exit_script

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
  
  free set benchmark_criteria
  
END GO

;Generated by GNU enscript 1.6.4.
