 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rdm_upd_wklst_elements/Glb_rdm_upd_wklst_elements.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

	Source file name:       Glb_rdm_upd_wklst_elements.prg
	Object name:            Glb_rdm_upd_wklst_elements
	Readme #:		            0

	Product:		            PathNet GENLAB
	Product Team:		        PathNet GENLAB
	HNA Version:            500
	CCL Version:            

	Program purpose:        This readme will popoulate the worklist element table 
	                        from the rows that currently exist on the worklist_elements 
	                        table.

	Tables read,		        TABLE_NAME		          METHOD (UNIQUE, RANGE, FULL)
	and access method:      --------------------    -----------------------------
				                  worklist_elements         Full 

	Tables updated:		      worklist_elements
	                        worklist_element
	Executing from:         

	Special Notes:		      n/a

	Run Occurance:		(select ONE of the following)
				-----------------------------
				[X] 1. RUN ONCE
				[ ] 2. RUN MANY

	ReadMe Category:	(select ONE of the following)
				-----------------------------
				[ ] 1. Data Load
				[ ] 2. Data Conversion
				[X] 3. Data Migration
				[ ] 4. File Copy

	Execution Time:		(select TWO of the following)
				------------------------------------
				[ ] 1. Uptime before uptime schema.
				[X] 2. Uptime after uptime schema.
				[X] 5. Uptime after downtime.

	Exec. Justification:	n/a

  Parent Script:		    N/A

  Check Script:		    N/A

	Data file for import:   n/a

	Execution Duration:	(select ONE of the following)
				----------------------------------
				[ ] 1. Fixed Time
				[X] 2. Driver Table: worklist_elements
;~DB~*************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG               *
;    *************************************************************************
;    *                                                                       *
;    *Mod Date     Engineer             Comment                              *
;    *--- -------- -------------------- -----------------------------------  *
;     000 11/09/04 Kevin Weisgerber     Initial Creation                     *
/****************************************************************************/
 
drop program Glb_rdm_upd_wklst_elements:dba go
create program Glb_rdm_upd_wklst_elements:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "GLB_RDM_UPD_WKLST_ELEMENTS"
CALL LOGSCRIPTSTART(sREADME_NAME)

/**************************************************************
; DECLARED RECORD STRUCTURES
**************************************************************/

RECORD worklist_element
      (
        1 qual[*]
        	2 worklist_id       = f8
        	2 components[*]
        		3 catalog_cd      = f8
        		3 task_assay_cd   = f8
        	2 orders[*]
        		3 order_id        = f8	
      )

RECORD new_worklist_element
      (
        1 qual[*]
        	2 worklist_id       = f8
        	2 catalog_cd        = f8
        	2 task_assay_cd     = f8
        	2 order_id          = f8
      )

/**************************************************************
; DECLARED VARIABLES
**************************************************************/
DECLARE lWorklistCount      = i4  with protect, noconstant(0)
DECLARE lCompCount          = i4  with protect, noconstant(0)
DECLARE x                   = i4  with protect, noconstant(0)
DECLARE lOrderIdCount       = i4  with protect, noconstant(0)
DECLARE lOrdersCount        = i4  with protect, noconstant(0)
DECLARE lNewCount           = i4  with protect, noconstant(0)
DECLARE dWorklistElementId  = f8  with protect, noconstant(0.0)
DECLARE y                   = i4  with protect, noconstant(0)
DECLARE sErrorMessage       = vc  with protect, noconstant(" ")
DECLARE lErrorCode          = i4  with protect, noconstant(0)
declare sFailed             = c1  with protect, noconstant("F") 
declare dMaxWklistId        = f8  with protect, noconstant(0.0)
SET readme_data->status     = "F"

/**************************************************************
; SELECT
**************************************************************/

	SELECT INTO "nl:"
	
	FROM worklist_elements we
	
	ORDER BY we.worklist_id	
	
	HEAD we.worklist_id
		lWorklistCount = lWorklistCount + 1
    IF (lWorklistCount > SIZE(worklist_element->qual, 5))
     	stat = alterlist(worklist_element->qual, lWorklistCount + 9)
		ENDIF
		worklist_element->qual[lWorklistCount].worklist_id = we.worklist_id
		if (we.worklist_id > dMaxWklistId)
		  dMaxWklistId = we.worklist_id
		endif
		lCompCnt = 0
	
	DETAIL
	  If(we.catalog_cd > 0.0 or we.task_assay_cd > 0.0)
	    lCompCnt = lCompCnt + 1
      IF (lCompCnt > SIZE(worklist_element->qual[lWorklistCount].components, 5))
     	  stat = alterlist(worklist_element->qual[lWorklistCount].components, lCompCnt + 9)
		  ENDIF
	    worklist_element->qual[lWorklistCount].components[lCompCnt].catalog_cd = we.catalog_cd
	 	  worklist_element->qual[lWorklistCount].components[lCompCnt].task_assay_cd = we.task_assay_cd
	 	ENDIF
	
	FOOT we.worklist_id
	  IF (lCompCnt > 0)
     	stat = alterlist(worklist_element->qual[lWorklistCount].components, lCompCnt)
	  ENDIF
 	WITH NOCOUNTER
 	
 	IF (lWorklistCount > 0)
    SET stat = alterlist(worklist_element->qual, lWorklistCount)
  ELSE
    CALL LOGSTATUS("No rows found on worklist_elements table.", "S")
    GO TO EXIT_SCRIPT
	ENDIF
 	
/**************************************************************
; SELECT
**************************************************************/   
	SELECT INTO "nl:"
	
	FROM worklist_order_r wor
	 	,(dummyt d1 with seq = value(lWorklistCount))
	
	PLAN d1 
	
	JOIN wor WHERE wor.worklist_id = worklist_element->qual[d1.seq].worklist_id
	
	ORDER d1.seq, wor.order_id
	
	HEAD d1.seq
	   lOrderIdCount = 0
	
	HEAD wor.order_id
	 	lOrderIdCount = lOrderIdCount + 1
		IF (lOrderIdCount > SIZE(worklist_element->qual[d1.seq].orders, 5))
     	stat = alterlist(worklist_element->qual[d1.seq].orders, lOrderIdCount + 9)
	  ENDIF      
	  worklist_element->qual[d1.seq].orders[lOrderIdCount].order_id = wor.order_id
	
	FOOT d1.seq
	  IF(lOrderIdCount > 0)
	    stat = alterlist(worklist_element->qual[d1.seq].orders, lOrderIdCount)
	  ENDIF
	
	WITH NOCOUNTER
  
  ; lock rows for delete
  
  select into "nl:"
  
  from worklist_elements we
  
  where we.worklist_id > 0.0
    and we.worklist_id <= dMaxWklistId
  
  with forupdate(we)
  
  
  DELETE 
  
  FROM worklist_elements we
  
  WHERE we.worklist_id > 0.0
    and we.worklist_id <= dMaxWklistId 	
  
  set lErrorCode = error(sErrorMessage, 0)
  if (lErrorCode > 0)
    rollback
    set sFailed = "T"
    call logmsg ("Error deleting from the worklist_element table.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
    call logmsg (sErrorMessage, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
    CALL LOGSTATUS("Error inserting worklist_element table.", "F")
    go to exit_script
  endif
    
/**************************************************************
; SELECT
**************************************************************/

	FOR (x = 1 to lWorklistCount)
	  
	  SET lOrdersCount = SIZE(worklist_element->qual[x].orders, 5)
	  
	  IF(SIZE(worklist_element->qual[x].components, 5) > 0)
	    
	    FOR(y = 1 to lOrdersCount)
			
  			SELECT INTO "nl:"
  			
  			FROM orders o
  				 ,(dummyt d1 with seq = value(SIZE(worklist_element->qual[x].components, 5)))
  		  
  		  PLAN d1
  			WHERE worklist_element->qual[x].components[d1.seq].catalog_cd > 0.0 
  			
  			JOIN o 
  			WHERE o.order_id = worklist_element->qual[x].orders[y].order_id 
  				AND o.catalog_cd = worklist_element->qual[x].components[d1.seq].catalog_cd
  			
  			ORDER o.order_id
  			
  			HEAD o.order_id
  				lNewCount = lNewCount + 1
        	IF (lNewCount > SIZE(new_worklist_element->qual, 5))
         		stat = alterlist(new_worklist_element->qual, lNewCount + 9)
        	ENDIF
  				new_worklist_element->qual[lNewCount].order_id = o.order_id
  				new_worklist_element->qual[lNewCount].catalog_cd = o.catalog_cd
  				new_worklist_element->qual[lNewCount].worklist_id = worklist_element->qual[x].worklist_id
  			
  			WITH NOCOUNTER
  	       	
  	       	
  			SELECT INTO "nl:"
  			
  			FROM orders o
  				 , profile_task_r ptr
  				 ,(dummyt d1 with seq = value(SIZE(worklist_element->qual[x].components, 5)))
  		 
  		  PLAN d1
  			WHERE worklist_element->qual[x].components[d1.seq].task_assay_cd > 0.0 
  			
  			JOIN o 
  			WHERE o.order_id = worklist_element->qual[x].orders[y].order_id 
  			
  			JOIN ptr
  			WHERE ptr.catalog_cd = o.catalog_cd
  				AND ptr.task_assay_cd = worklist_element->qual[x].components[d1.seq].task_assay_cd
  			
  			ORDER o.order_id, ptr.task_assay_cd
  			
  			HEAD o.order_id
  			    row +0
  			
  			HEAD ptr.task_assay_cd
  				lNewCount = lNewCount + 1
        	IF (lNewCount > SIZE(new_worklist_element->qual, 5))
         		stat = alterlist(new_worklist_element->qual, lNewCount + 9)
        	ENDIF
  				new_worklist_element->qual[lNewCount].order_id = o.order_id
  				new_worklist_element->qual[lNewCount].task_assay_cd = ptr.task_assay_cd
  				new_worklist_element->qual[lNewCount].worklist_id = worklist_element->qual[x].worklist_id
  			
  			WITH NOCOUNTER
			
      ENDFOR
       
    ENDIF
	
	ENDFOR
		
	
	IF (lNewCount > 0)
	
    SET stat = alterlist(new_worklist_element->qual, lNewCount)
	  
	  FOR (x = 1 to lNewCount)
    
      SELECT INTO "nl:"
        z = seq(PATHNET_SEQ,nextval) "##################;rp0"
      
      FROM dual
            
      DETAIL
        dWorklistElementId = cnvtreal(z)
                
      WITH
        NOCOUNTER
      
      IF (curqual = 0)
	      rollback
        set sFailed = "T"
        call logmsg ("Error obtaining sequence.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
        call logmsg (sErrorMessage, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
        CALL LOGSTATUS("Error obtaining sequence.", "F")
	      GO TO exit_script
	    ENDIF
      
	    INSERT INTO worklist_element we
      
      SET	 we.catalog_cd = new_worklist_element->qual[x].catalog_cd
           ,we.worklist_element_id = dWorklistElementId 
    	     ,we.task_assay_cd = new_worklist_element->qual[x].task_assay_cd
    	     ,we.order_id = new_worklist_element->qual[x].order_id
    	     ,we.worklist_id = new_worklist_element->qual[x].worklist_id
    	     ,we.updt_dt_tm = cnvtdatetime(curdate, curtime3)
           ,we.updt_id = reqinfo->updt_id
           ,we.updt_task = reqinfo->updt_task
           ,we.updt_cnt = 0
           ,we.updt_applctx = reqinfo->updt_applctx
      
      WITH NOCOUNTER
      
    
      set lErrorCode = error(sErrorMessage, 0)
      if (lErrorCode > 0)
        rollback
        set sFailed = "T"
        call logmsg ("Error inserting worklist_element table.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
        call logmsg (sErrorMessage, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
        CALL LOGSTATUS("Error inserting worklist_element table.", "F")
        go to exit_script
      endif
    
    ENDFOR
  
  ENDIF
     

if (sFailed = "F")
  commit
  CALL LOGSTATUS("Success inserting worklist_element table.", "S")
endif    

#EXIT_SCRIPT

free set worklist_element
free set new_worklist_element

CALL LOGSCRIPTEND(sREADME_NAME)

END
GO

;Generated by GNU enscript 1.6.4.
