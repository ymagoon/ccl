 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_av_params_all/glb_get_av_params_all.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_AV_PARAMS_ALL.PRG
        Object name:            GLB_GET_AV_PARAMS_ALL
        Request #:              250130

        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieves parameters for autoverification for
                                all testsites

        Tables read:            lab_instrument
                                auto_verify

        Tables updated:         n/a

        Executing from:         PathNet General Lab:  Result Verify

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 06/13/97 Kevin Brunner        Initial Release                     *
;     001 11/04/98 Chad Moats           Robotics_Login_Loc_R renamed to     *
;                                       Robitics_Items                      *
;     002 04/04/00 Chris Heil           Return result_type to server.       *
;     003 04/05/00 Chris Heil           Retrieve from new delta_chk_flag    *
;     004 06/02/00 Terry Weakley        Add call_robotics_ind.              *
;     005 06/28/00 Chris Heil           Remove av_part_ind field.           *
;                                       Add new instr_error_code field.     *
;                                       Add new consistency fields.         *
;     006 07/12/00 Chris Heil           Retrieve related assays.            *
;                                       Retrieve instrument assignment      *
;                                          indicators.                      *
;     007 08/17/00 Chris Heil           Return Z status only if no          *
;                                          instruments found.               *
;     008 09/12/00 Chris Heil           Retrieve consistency comments prefs *
;     009 10/09/00 Chris Heil           Return related assays even if equiv *
;                                          av test not on.                  *
;     010 02/27/01 Gary Runde           Add fields for QC exemption changes *
;     011 09/04/01 Gary Runde           Return av_check_part_qc_flag        *
;     012 03/01/06 David Fifer          Added schedule segment logic to the *
;                                       Autoverification functionality.     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop   program GLB_GET_AV_PARAMS_ALL:dba go
      create program GLB_GET_AV_PARAMS_ALL:dba

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (

      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 consistency_comment_ind    = i2
         1 consistency_comment        = vc
         1 consistency_chartable_ind  = i2
         1 instr_assignment_ind       = i2
         1 instr[*]
           2 service_resource_cd      = f8
           2 av_ind                   = i2
           2 av_flag                  = i2
           2 av_qc_ind                = i2
           2 av_req_qc_ind            = i2
           2 av_chk_part_qc_ind       = i2
           2 av_qc_part_ind           = i2
           2 robotics_loc_cd          = f8
           2 call_robotics_ind        = i2
           2 assay[*]
             3 av_ref_id              = f8
             3 task_assay_cd          = f8
             3 result_type_cd         = f8
             3 prev_verf_ind          = i2
             3 ref_range_ind          = i2
             3 rev_range_ind          = i2
             3 crit_range_ind         = i2
             3 feas_range_ind         = i2
             3 lin_range_ind          = i2
             3 delta_chk_flag         = i2
             3 unverf_prev_rslt_ind   = i2
             3 dup_assay_ind          = i2
             3 instr_error_code_ind   = i2
             3 notify_range_ind       = i2
             ;values to return information for qc exemption logic   ;010
             3 validate_qc_schedule_ind = i2                        ;010
             3 qc_instr_error_code_ind  = i2                        ;010
             3 repeat_map             = c50
             3 consistency_array[*]
                4 av_consistency_flag     = i2
                4 consistency_ind         = i2
                4 consistency_minutes     = i4
                4 consistency_units_cd    = f8
                4 consistency_type_flag   = i2
                4 consistency_variance    = f8
             3 related_assays[*]
                4 task_assay_cd            = f8
           2 orderable[*]
             3 av_res_cat_id          = f8
             3 catalog_cd             = f8
             3 av_res_cat_flag        = i2
             3 assoc_catalog_cd       = f8
           2 av_check_part_qc_flag      = i2               ;011
           2 schedule_segments[*]
             3 schedule_cd				= f8
             3 holiday_schedule_ind		= i2
             3 beg_time					= i4
             3 end_time					= i4
             3 day_of_week_bit			= i4
             3 system_on_ind			= i2
             3 holiday_count			= i2
             3 holidays[*]
               4 holiday_cd             = f8
               4 holiday_dt_tm          = dq8
%i cclsource:status_block.inc
      )
 
%i cclsource:mic_expand_subs.inc
 
/********************************************************************/
/* Variable declarations                                            */
/********************************************************************/
 
      declare nStat                = i2 with protect, noconstant(0)
      declare lIndex               = i4 with protect, noconstant(0)
      declare lListCnt             = i4 with protect, noconstant(0)
      declare lInstrCnt            = i4 with protect, noconstant(0)
      declare lActualSize          = i4 with protect, noconstant(0)
      declare lExpandSize          = i4 with protect, noconstant(0)
      declare lHolidayCnt          = i4 with protect, noconstant(0)
      declare lExpandTotal         = i4 with protect, noconstant(0)
      declare lExpandStart         = i4 with protect, noconstant(1)
      declare lScheduleCnt         = i4 with protect, noconstant(0)
      
      ; constants
      declare INSTASSIGNON         = vc with protect, constant("InstrumentAssignmentOn")
      declare ASSIGNREQVERF        = vc with protect, constant("AssignReqforAutoVerf")
      declare CONSISTCOMMCHART     = vc with protect, constant("ConsistentCommentChartable")
 
/********************************************************************/
/*  Script                                                          */
/********************************************************************/

%i cclsource:aps_uar_rtf.inc   ;* For converting rtf to ascii

     #Script
      set failed = "F"
      set reply->status_data->status = "F"
      set max_assay_cnt = -1
      set reply->instr_assignment_ind = 0
      set reply->consistency_comment_ind = 0
      set reply->consistency_comment = ""
      set reply->consistency_chartable_ind = 0

/********************************************************************/
/*  Get autoverification flags from LAB_INSTRUMENT                  */
/*      and AUTO_VERIFY                                             */
/********************************************************************/
         SELECT into "nl:"
           lt_exists = evaluate(nullind(lt.long_text_id), 0, 1, 0),
           pref = dp.pref_name
         FROM
           dm_prefs dp,
           wp_template_text wtt,
           long_text lt
         PLAN dp where
           dp.pref_domain = "PATHNET GLB" and
           ((dp.pref_section = "RESULTENTRY" and dp.pref_name = INSTASSIGNON)
           or
           (dp.pref_section = "AUTOVERIFICATION" and
            dp.pref_name in(ASSIGNREQVERF, "ConsistentComment", CONSISTCOMMCHART)))
         JOIN wtt where
           wtt.template_id = outerjoin(dp.pref_cd) and
           wtt.long_text_id > outerjoin(0.0)
         JOIN lt where
           lt.long_text_id = outerjoin(wtt.long_text_id)

         HEAD REPORT
           instr_assign_ind = 0
           assign_required_ind = 0

         DETAIL
           if(pref = INSTASSIGNON and dp.pref_nbr = 1)
             instr_assign_ind = 1
           endif

           if(pref = ASSIGNREQVERF and dp.pref_nbr = 1)
             assign_required_ind = 1
           endif

           if(lt_exists = 1)
             reply->consistency_comment_ind = 1
             ; Strip RTF from consistency comment template
             call rtf_to_text(lt.long_text, 0, 0)
             reply->consistency_comment = NoRtfText
           endif

           if(pref = CONSISTCOMMCHART)
             reply->consistency_chartable_ind = dp.pref_nbr
           endif

         FOOT REPORT
           reply->instr_assignment_ind = instr_assign_ind * assign_required_ind

         WITH NOCOUNTER


/********************************************************************/
/*  Get autoverification flags from LAB_INSTRUMENT                  */
/*      and AUTO_VERIFY                                             */
/********************************************************************/

         SELECT
           into "nl:"
           join_path = decode(av.seq, "av", arc.seq, "arc", "none")
           ,l.service_resource_cd
           ,sr.service_resource_cd
           ,av.service_resource_cd
           ,av.task_assay_cd
           ,apr.default_result_type_cd
           ,arc.catalog_cd
           ,d1.seq
           ,d2.seq
           ,av.seq
           ,arc.seq
         FROM
            lab_instrument l
           ,service_resource sr
           ,dummyt d1
           ,auto_verify av
           ,assay_processing_r apr
           ,dummyt d2
           ,av_res_cat arc
         PLAN L
         JOIN SR
            where l.service_resource_cd = sr.service_resource_cd
              and sr.active_ind = 1
              and cnvtdatetime(curdate, curtime3) between sr.beg_effective_dt_tm
                                                      and sr.end_effective_dt_tm
         JOIN (D1
            where d1.seq = 1
         JOIN AV
            where av.service_resource_cd = l.service_resource_cd
              and av.active_ind = 1
              and cnvtdatetime(curdate, curtime3)
                              between av.beg_effective_dt_tm
                                   and av.end_effective_dt_tm
         JOIN APR
           where apr.service_resource_cd = av.service_resource_cd
             and apr.task_assay_cd = av.task_assay_cd
             and apr.active_ind = 1)
         ORJOIN (D2
            where d2.seq = 1
         JOIN ARC
            where arc.service_resource_cd = l.service_resource_cd
              and arc.active_ind = 1)
         ORDER
            l.service_resource_cd

         HEAD report
            assay_cnt = 0
            orderable_cnt = 0

         HEAD l.service_resource_cd
            lInstrCnt = lInstrCnt + 1
            if (mod(lInstrCnt,10) = 1)
              stat = alterlist(reply->instr, lInstrCnt + 9)
            endif
            reply->instr[lInstrCnt].service_resource_cd = l.service_resource_cd
            reply->instr[lInstrCnt].av_ind = l.av_ind
            reply->instr[lInstrCnt].av_flag = l.av_flag
            reply->instr[lInstrCnt].av_qc_ind = l.av_qc_ind
            reply->instr[lInstrCnt].av_req_qc_ind = l.av_req_qc_ind
            reply->instr[lInstrCnt].av_chk_part_qc_ind = l.av_chk_part_qc_ind
            reply->instr[lInstrCnt].av_qc_part_ind = l.av_qc_part_ind
            reply->instr[lInstrCnt].av_check_part_qc_flag = l.av_check_part_qc_flag
            assay_cnt = 0
            orderable_cnt = 0

         DETAIL
            case (join_path)
              of "av":
                 assay_cnt = assay_cnt + 1
                 if (mod(assay_cnt,10) = 1)
                   stat = alterlist(reply->instr[lInstrCnt].assay, assay_cnt + 9)
                 endif
                 reply->instr[lInstrCnt].assay[assay_cnt].av_ref_id = av.av_ref_id
                 reply->instr[lInstrCnt].assay[assay_cnt].task_assay_cd = av.task_assay_cd
                 reply->instr[lInstrCnt].assay[assay_cnt].result_type_cd = apr.default_result_type_cd   ;002

                 reply->instr[lInstrCnt].assay[assay_cnt].prev_verf_ind = av.prev_verf_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].ref_range_ind = av.ref_range_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].rev_range_ind = av.rev_range_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].crit_range_ind = av.crit_range_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].feas_range_ind = av.feas_range_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].lin_range_ind = av.lin_range_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].delta_chk_flag = av.delta_chk_flag       ;003
                 reply->instr[lInstrCnt].assay[assay_cnt].unverf_prev_rslt_ind = av.unverf_prev_rslt_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].dup_assay_ind = av.dup_assay_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].instr_error_code_ind = av.instr_error_code_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].notify_range_ind = av.notify_range_ind
                 
                 ;return information for the qc exemption logic                          ;010
                 reply->instr[lInstrCnt].assay[assay_cnt].qc_instr_error_code_ind =      ;010
                       av.qc_instr_error_code_ind                                        ;010
                 reply->instr[lInstrCnt].assay[assay_cnt].validate_qc_schedule_ind =     ;010
                       av.validate_qc_schedule_ind
                 reply->instr[lInstrCnt].assay[assay_cnt].repeat_map  = av.repeat_map
              of "arc":
                 orderable_cnt = orderable_cnt + 1
                 if (mod(orderable_cnt,10) = 1)
                   stat = alterlist(reply->instr[lInstrCnt].orderable, orderable_cnt + 9)
                 endif
                 reply->instr[lInstrCnt].orderable[orderable_cnt].av_res_cat_id = arc.av_res_cat_id
                 reply->instr[lInstrCnt].orderable[orderable_cnt].catalog_cd = arc.catalog_cd
                 reply->instr[lInstrCnt].orderable[orderable_cnt].av_res_cat_flag = arc.av_res_cat_flag
                 reply->instr[lInstrCnt].orderable[orderable_cnt].assoc_catalog_cd = arc.assoc_catalog_cd
            endcase

         FOOT l.service_resource_cd
            if (assay_cnt > max_assay_cnt)
              max_assay_cnt = assay_cnt
            endif
            stat = alterlist(reply->instr[lInstrCnt].assay, assay_cnt)
            stat = alterlist(reply->instr[lInstrCnt].orderable, orderable_cnt)

         FOOT report
            stat = alterlist(reply->instr, lInstrCnt)

         WITH
            nocounter
           ,outerjoin = d1
           ,outerjoin = d2

         IF (lInstrCnt = 0)
            set failed = "Z"
            go to exit_script
         ENDIF

/********************************************************************/
/*  Populate the autoverification schedule_segments                 */
/********************************************************************/
 
         set lExpandStart = 1
         set lActualSize = size(reply->instr, 5)
         set lExpandSize = DetermineExpandSize(lActualSize, 100)
         set lExpandTotal = DetermineExpandTotal(lActualSize, lExpandSize)
         set nStat = alterlist(reply->instr, lExpandTotal)
         for (i = lActualSize + 1 to lExpandTotal)
           set reply->instr[i].service_resource_cd = reply->instr[lActualSize].service_resource_cd
         endfor
 
         select into "nl:"
            d1.seq
            ,d2.seq
            ,lLocateStart = lExpandStart
            ,holiday_cd_exist = evaluate(nullind(psshr.pcs_schedule_segment_id), 0, 1, 0)
 
         from
            (dummyt d1 with seq = value(lExpandTotal/lExpandSize))
            ,lab_instrument l
            ,pcs_schedule_segment pss
            ,dummyt d2
            ,pcs_schedule_seg_hldy_r psshr
 
         plan d1
           where assign(lExpandStart, evaluate(d1.seq, 1, 1, lExpandStart + lExpandSize))
         join l
            where expand(lListCnt, lExpandStart, lExpandStart + lExpandSize - 1,
                         l.service_resource_cd, reply->instr[lListCnt].service_resource_cd)
         join pss
            where pss.schedule_cd in (l.schedule_cd, l.holiday_schedule_cd)
         join (d2
            where d2.seq = 1
         join psshr
            where psshr.pcs_schedule_segment_id = pss.pcs_schedule_segment_id)
 
         order
            l.service_resource_cd
            ,pss.pcs_schedule_segment_id
 
         head l.service_resource_cd
            lScheduleCnt = 0
            lIndex = locateval(lListCnt, lLocateStart, lLocateStart + lExpandSize - 1,
                               l.service_resource_cd, reply->instr[lListCnt].service_resource_cd)
 
         head pss.pcs_schedule_segment_id
            lHolidayCnt = 0
            if (((l.schedule_cd > 0.0) and (l.schedule_cd = pss.schedule_cd)) or
                ((l.holiday_schedule_cd > 0.0) and (l.holiday_schedule_cd = pss.schedule_cd)))
              lScheduleCnt = lScheduleCnt + 1
              if (mod(lScheduleCnt,10) = 1)
                nStat = alterlist(reply->instr[lIndex].schedule_segments, lScheduleCnt + 9)
              endif
              reply->instr[lIndex].schedule_segments[lScheduleCnt].schedule_cd = pss.schedule_cd
              reply->instr[lIndex].schedule_segments[lScheduleCnt].beg_time = pss.beg_tm_nbr
              reply->instr[lIndex].schedule_segments[lScheduleCnt].end_time = pss.end_tm_nbr
              reply->instr[lIndex].schedule_segments[lScheduleCnt].day_of_week_bit = pss.day_of_week_bit
              reply->instr[lIndex].schedule_segments[lScheduleCnt].system_on_ind = pss.system_on_ind
              ;If a regular schedule qualified.  Otherwise a holiday schedule qualified.
              if (l.schedule_cd = pss.schedule_cd)
                reply->instr[lIndex].schedule_segments[lScheduleCnt].holiday_schedule_ind = 0
                reply->instr[lIndex].schedule_segments[lScheduleCnt].holiday_count = 0
              else
                reply->instr[lIndex].schedule_segments[lScheduleCnt].holiday_schedule_ind = 1
              endif
            endif
 
         detail
            ;If this is a holiday schedule. (This check is necessary to catch
            ;the case where a holiday day is associated to a regular schedule).
            if (l.holiday_schedule_cd = pss.schedule_cd)
              ;If a holiday 'day' is built.
              if (holiday_cd_exist = 1)
                if ((pss.pcs_schedule_segment_id > 0.0) and (pss.pcs_schedule_segment_id = psshr.pcs_schedule_segment_id))
                  lHolidayCnt = lHolidayCnt + 1
                  reply->instr[lIndex].schedule_segments[lScheduleCnt].holiday_count = lHolidayCnt
                  if (mod(lHolidayCnt,10) = 1)
                    nStat = alterlist(reply->instr[lIndex].schedule_segments[lScheduleCnt].holidays, lHolidayCnt + 9)
                  endif
                  reply->instr[lIndex].schedule_segments[lScheduleCnt].holidays[lHolidayCnt].holiday_cd = psshr.holiday_day_cd
                  reply->instr[lIndex].schedule_segments[lScheduleCnt].holidays[lHolidayCnt].holiday_dt_tm =
                                                                   cnvtdatetimeutc(uar_get_code_display(psshr.holiday_day_cd))
                endif
              endif
            endif
 
         foot pss.pcs_schedule_segment_id
            if (lHolidayCnt > 0)
              nStat = alterlist(reply->instr[lIndex].schedule_segments[lScheduleCnt].holidays, lHolidayCnt)
            endif
 
         foot l.service_resource_cd
            nStat = alterlist(reply->instr[lIndex].schedule_segments, lScheduleCnt)

         with
            nocounter,
            outerjoin = d2
 
        set nStat = alterlist(reply->instr, lInstrCnt)
/********************************************************************/
/*  Get consistency flags from AV_CONSISTENCY                       */
/********************************************************************/
         SELECT into  "nl:"
          resource = reply->instr[d1.seq]->service_resource_cd,
          assay = reply->instr[d1.seq]->assay[d2.seq]->task_assay_cd,
          join_path = decode(ac.seq,  "ac", ra2.seq, "ra", "none")
         FROM
            (dummyt d1 with seq = value(lInstrCnt)),
            (dummyt d2 with seq = value(max_assay_cnt)),
            av_consistency ac,
            (dummyt d3 with seq = 1),
            related_assay ra1,
            related_assay ra2
         PLAN d1
         JOIN d2
            where d2.seq <= size(reply->instr[d1.seq]->assay, 5)
         JOIN (ac
            where ac.av_ref_id = reply->instr[d1.seq]->assay[d2.seq]->av_ref_id)
         ORJOIN (d3
            where d3.seq = 1
         JOIN ra1
            where ra1.task_assay_cd = reply->instr[d1.seq]->assay[d2.seq]->task_assay_cd
         JOIN ra2
            where ra2.related_entity_id = ra1.related_entity_id
              and ra2.task_assay_cd != ra1.task_assay_cd)

         ORDER BY
            resource,
            assay

         HEAD resource
            row+0

         HEAD assay
            ac_cnt = 0
            rel_cnt = 0

         DETAIL
            case (join_path)
              of "ac":
                 ac_cnt = ac_cnt + 1
                 if (mod(ac_cnt, 5) = 1)
                   stat = alterlist(reply->instr[d1.seq]->assay[d2.seq]->consistency_array, ac_cnt + 4)
                 endif
                 reply->instr[d1.seq]->assay[d2.seq]->
                        consistency_array[ac_cnt]->av_consistency_flag = ac.av_consistency_flag
                 reply->instr[d1.seq]->assay[d2.seq]->
                        consistency_array[ac_cnt]->consistency_ind = ac.consistency_ind
                 reply->instr[d1.seq]->assay[d2.seq]->
                        consistency_array[ac_cnt]->consistency_minutes = ac.consistency_minutes
                 reply->instr[d1.seq]->assay[d2.seq]->
                        consistency_array[ac_cnt]->consistency_units_cd = ac.consistency_units_cd
                 reply->instr[d1.seq]->assay[d2.seq]->
                        consistency_array[ac_cnt]->consistency_type_flag = ac.consistency_type_flag
                 reply->instr[d1.seq]->assay[d2.seq]->
                        consistency_array[ac_cnt]->consistency_variance = ac.consistency_variance
              of "ra":
                 rel_cnt = rel_cnt + 1
                 if (mod(rel_cnt, 5) = 1)
                   stat = alterlist(reply->instr[d1.seq]->assay[d2.seq]->related_assays, rel_cnt + 4)
                 endif
                 reply->instr[d1.seq]->assay[d2.seq]->related_assays[rel_cnt]->task_assay_cd = ra2.task_assay_cd
            endcase

         FOOT assay
            stat = alterlist(reply->instr[d1.seq]->assay[d2.seq]->consistency_array, ac_cnt)
            stat = alterlist(reply->instr[d1.seq]->assay[d2.seq]->related_assays, rel_cnt)

         FOOT resource
            row+0

         WITH
            outerjoin = d3,
            nocounter

         IF (curqual = 0)
            set failed = "Z"
            go to exit_script
         ENDIF

/********************************************************************/
/*  Get robotics flags from ROBOTICS_ITEMS                          */
/********************************************************************/

         SELECT into "nl:"
         FROM
           (dummyt d1 with seq = value(lInstrCnt)),
           robotics_items ri
         PLAN D1
         JOIN RI where
            ri.service_resource_cd = reply->instr[d1.seq]->service_resource_cd
         DETAIL
            reply->instr[d1.seq].robotics_loc_cd = ri.robotics_service_resource_cd
            reply->instr[d1.seq].call_robotics_ind = ri.call_robotics_ind
         WITH nocounter

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
      elseif (failed = "Z")
         set reply->status_data->status = "Z"
      else
         set reply->status_data->status = "F"
      endif
END
GO

;Generated by GNU enscript 1.6.4.
