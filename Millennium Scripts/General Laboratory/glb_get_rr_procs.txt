 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_rr_procs/GLB_GET_RR_PROCS.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_GET_RR_PROCS.PRG
        Object name:            GLB_GET_RR_PROCS
        Request #:              250175

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:      

        Tables read:            assay_processing_r
                                discrete_task_assay

        Tables updated:         n/a

        Executing from:         General Lab Round Robin Building tool

        Special Notes:          This script will return task_assay_cds
				that qualify for all of the service resource
				codes passed in.

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 11/20/98 Gary Runde           Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_RR_PROCS:dba go    
      create program GLB_GET_RR_PROCS:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                   
	 1 resources[*]                    
         	2 service_resource_cd  = f8
      ) 
*/
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      ( 
	   1  assays[*]
		   2  display_sequence	       = i4
	           2  task_assay_cd            = f8
        	   2  task_assay_disp          = vc
%i cclsource:status_block.inc
      )


     #Script
      set reply->status_data->status = "F"
	set assay_cnt = 0
	set qual_cnt = 0
	set nbr_resources = size(request->resources, 5)
	set NUMERIC = 0.0
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty


         set hSys = 0
         set SysStat = 0
         call uar_SysCreateHandle(hSys,SysStat)
         set sText = fillstring(254, " ")

/********************************************************************/
/* Get codevalue for numeric type procedures                        */
/********************************************************************/
	SELECT INTO "NL:"
		C.CODE_VALUE
	FROM 
		CODE_VALUE C
	WHERE C.CODE_SET = 289 AND C.CDF_MEANING = "3"
	DETAIL
		NUMERIC = C.CODE_VALUE
	WITH NOCOUNTER, MAXQUAL(C, 1)

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

/********************************************************************/
/* Select assays for resource(s)                                    */
/********************************************************************/
  
    SELECT into "nl:"
         a.task_assay_cd,
	 a.display_sequence,
         dta.task_assay_cd
      FROM 
         (dummyt d3 with seq = value(nbr_resources)),
         assay_processing_r a,
	 discrete_task_assay dta
      PLAN d3         
      JOIN a
         where a.service_resource_cd = request->resources[d3.seq].service_resource_cd
      JOIN dta
         where dta.task_assay_cd = a.task_assay_cd
	 and   dta.default_result_type_cd = NUMERIC
      ORDER by dta.task_assay_cd
      HEAD REPORT
	 qual_cnt = 0
      HEAD dta.task_assay_cd
         assay_cnt = 0 
      DETAIL
         assay_cnt = assay_cnt + 1
      FOOT DTA.TASK_ASSAY_CD
         if (assay_cnt = nbr_resources)
            qual_cnt = qual_cnt + 1
            if (mod(qual_cnt,5) = 1)
                 stat = alterlist(reply->assays, qual_cnt + 5)
            endif
            reply->assays[qual_cnt]->task_assay_cd = a.task_assay_cd
            reply->assays[qual_cnt]->display_sequence = a.display_sequence
         endif          
      WITH
         nocounter
     set stat = alterlist(reply->assays, qual_cnt)
set sText = build("NumAssays: ", qual_cnt)
call uar_SysEvent(hSys, 3, "GET_RR_PROCS NUM ASSAYS", NULLTERM(sText))

call echo(build("qual: ", qual_cnt))
      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif


    if (curqual = 0)
       set reply->status_data->status = "Z"
    else    
       set reply->status_data->status = "S"
    endif

#exit_script

call uar_SysDestroyHandle(hSys)
end
go      

;Generated by GNU enscript 1.6.4.
