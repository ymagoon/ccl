 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_results/glb_get_results.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:       glb_get_results.prg
        Object name:            glb_get_results
        Request #:              250144
 
        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:
 
        Program purpose:        Load General Lab results.
 
        Tables read:            long_text
                                perform_result
                                prsnl
                                reference_range_factor
                                result_comment
 
        Tables updated:         None
        Executing from:
 
        Special Notes:
 
******************************************************************************/
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 01/16/98 Hal Patchen          Initial Release                     *
;    *001 03/08/00 Gary Runde           Return normal_range_flag and  .     *
;    *                                  crit_range_flag from the            *
;    *                                  reference_range_factor table .      *
;    *002 07/17/06 Ryan Manuel          Added notify_cd to the reply        *
;    *003 12/06/06 Matt Schile          Added result_value_alpha_mnemonic   *
;    *004 02/08/07 Tom Brecht           Added service_resource_cd to reply  *
;    *005 06/27/08 Matt Schile          Added qc_override_cd to reply       *
;    *006 12/01/10 Ryan Manuel          Added automatic_worklist_id to the  *
;                                       reply                               *
;    *007 05/01/11 Ryan Manuel          Support subsection                  *
;~DE~************************************************************************
 
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
             drop program GLB_GET_RESULTS:dba go
             create program GLB_GET_RESULTS:dba
 
      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  results[*]
            2  accession_id              = f8
            2  order_id                  = f8
            2  task_assay_cd             = f8
            2  result_id                 = f8
            2  result_status_cd          = f8
            2  updt_cnt                  = i4
            2  disp_seq_by_perf_serv_res_ind = i2
      )
      */
 
      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      (
         1  qual[*]
            2  accession_id              = f8    ;Optional, used by calling app
            2  order_id                  = f8    ;Optional, used by calling app
            2  task_assay_cd             = f8    ;Optional, used by calling app
            2  result_id                 = f8
            2  result_status_cd          = f8
            2  result_status_disp        = vc
            2  result_status_mean        = c12
            2  next_repeat_nbr           = i4
            2  updt_cnt                  = i4   ;Result updt cnt
            2  display_sequence 		 = i4
            2  results_cnt               = i4
            2  results[*]
               3  perform_result_id         = f8
               3  repeat_nbr                = i4
               3  reference_range_factor_id = f8
               3  advanced_delta_id         = f8
               3  normal_cd                 = f8
               3  normal_disp               = vc
               3  normal_mean               = vc
               3  critical_cd               = f8
               3  critical_disp             = vc
               3  critical_mean             = vc
               3  review_cd                 = f8
               3  review_disp               = vc
               3  review_mean               = vc
               3  linear_cd                 = f8
               3  linear_disp               = vc
               3  linear_mean               = vc
               3  feasible_cd               = f8
               3  feasible_disp             = vc
               3  feasible_mean             = vc
               3  dilution_factor           = f8
               3  delta_cd                  = f8
               3  delta_disp                = vc
               3  delta_mean                = vc
               3  units_cd                  = f8
               3  normal_range_flag         = i2 ;1=L, 2=H, 3=Both
               3  normal_low                = f8
               3  normal_high               = f8
               3  normal_alpha              = vc
               3  critical_range_flag       = i2 ;1=L, 2=H, 3=Both
               3  critical_low              = f8
               3  critical_high             = f8
               3  result_type_cd            = f8
               3  result_type_disp          = vc
               3  result_type_mean          = c12
               3  equation_id               = f8
               3  nomenclature_id           = f8
               3  result_value_numeric      = f8
               3  numeric_raw_value         = f8
               3  less_great_flag           = i2
               3  result_value_alpha        = vc
               3  result_value_dt_tm        = dq8
               3  long_text_id              = f8
               3  rtf_text                  = vc
               3  ascii_text                = vc
               3  result_comment_ind        = i2
               3  perform_personnel_id      = f8
               3  perform_personnel_name    = vc
               3  perform_dt_tm             = dq8
               3  perform_result_updt_cnt   = i4
               3  notify_cd                 = f8
               3  notify_disp               = c40
               3  notify_mean               = c12
               3  result_value_alpha_mnemonic = c25
               3  service_resource_cd       = f8
               3  service_resource_disp     = c40
               3  qc_override_cd            = f8
               3  automatic_worklist_id     = f8
%i cclsource:status_block.inc
      )
 
      record temp_record_perform_result
      (
       		1  qual[*]
       			2  order_id						   = f8
       			2  result_id					   = f8
           		2  service_resource_cd             = f8
            	2  task_assay_cd                   = f8
            	
      )
 
      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         declare nbr_of_results          = i4
         declare q_cnt                   = i4
         declare r_cnt                   = i4
         declare next_repeat_nbr         = i4
         set reply->status_data.status = "F"
 
      /***********************************************************************
      * Load results                                                         *
      ***********************************************************************/
         set q_cnt = 0
         set nbr_of_results = size(request->results, 5)
         if (nbr_of_results = 0)
            set reply->status_data.status = "Z"    ;Zero
            go to Exit_Script
         endif
 
         select into "nl:"
            d.seq,
            pr.seq,
            rrf.seq,
            pl.seq,
            lt.seq,
            d_rc.seq,
            result_comment_yn = decode(rc.seq, "Y", "N"),
            rc.seq
            /* selection fields:
            d.seq,
            pr.perform_result_id,
            pr.result_id,
            pr.result_status_cd,
            pr.result_type_cd,
            pr.repeat_nbr,
            pr.normal_cd,
            pr.critical_cd,
            pr.review_cd,
            pr.linear_cd,
            pr.feasible_cd,
            pr.dilution_factor,
            pr.delta_cd,
            pr.normal_low,
            pr.normal_high,
            pr.normal_alpha,
            pr.units_cd,
            pr.nomenclature_id,
            pr.result_value_numeric,
            pr.numeric_raw_value,
            pr.result_value_alpha,
            pr.result_value_dt_tm,
            pr.long_text_id,
            pr.ascii_text,
            pr.less_great_flag,
            pr.perform_personnel_id,
            pr.perform_dt_tm,
            pr.updt_cnt,
            rrf.critical_low,
            rrf.critical_high,
            pl.name_full_formatted,
            lt.long_text_id,
            lt.long_text,
            d_rc.seq,
            result_comment_yn = decode(rc.seq, "Y", "N"),
            rc.result_id,
            pr.service_resource_cd
            */
 
         from
            (dummyt d with seq = value(nbr_of_results)),
            perform_result pr,
            reference_range_factor rrf,
            prsnl pl,
            long_text lt,
            nomenclature nc,
            (dummyt d_rc with seq = 1),
            result_comment rc
 
         plan d
         join pr  where pr.result_id = request->results[d.seq].result_id
                    and pr.result_status_cd =
                                request->results[d.seq].result_status_cd
         join rrf where rrf.reference_range_factor_id =
                                pr.reference_range_factor_id
         join pl  where pl.person_id = pr.perform_personnel_id
         join lt  where lt.long_text_id = pr.long_text_id
         join nc  where nc.nomenclature_id = pr.nomenclature_id
         join d_rc where d_rc.seq = 1
         join rc where rc.result_id = pr.result_id
 
         order by d.seq, pr.perform_dt_tm
 
         head report
            q_cnt = 0
            r_cnt = 0
 
         head d.seq
            q_cnt = d.seq
            next_repeat_nbr = -1
            r_cnt = 0
            if (mod(q_cnt,10) = 1)
               stat = alterlist(reply->qual, q_cnt + 10)
            endif
            reply->qual[q_cnt].accession_id =
              request->results[q_cnt].accession_id
            reply->qual[q_cnt].order_id =
              request->results[q_cnt].order_id
            reply->qual[q_cnt].task_assay_cd =
              request->results[q_cnt].task_assay_cd
            reply->qual[q_cnt].result_id =
              request->results[q_cnt].result_id
            reply->qual[q_cnt].result_status_cd =
              request->results[q_cnt].result_status_cd
            reply->qual[q_cnt].updt_cnt =
              request->results[q_cnt].updt_cnt
 
            if(request->results[q_cnt].disp_seq_by_perf_serv_res_ind = 1)
            	 if (mod(q_cnt,10) = 1)
            	 	stat = alterlist(temp_record_perform_result->qual, q_cnt + 10)
            	 endif
            	 temp_record_perform_result->qual[q_cnt].service_resource_cd =
            	 	pr.service_resource_cd
            	 temp_record_perform_result->qual[q_cnt].task_assay_cd =
            	 	request->results[q_cnt].task_assay_cd
            	 temp_record_perform_result->qual[q_cnt].order_id = 
            	 	request->results[q_cnt].order_id
            	 temp_record_perform_result->qual[q_cnt].result_id = 
            	 	request->results[q_cnt].result_id
            	 
            endif
 
         detail
            ;* Current result
            r_cnt = r_cnt + 1
            if (mod(r_cnt,10) = 1)
               stat = alterlist(reply->qual[q_cnt].results, r_cnt + 10)
            endif
            reply->qual[q_cnt].results_cnt = r_cnt
            reply->qual[q_cnt].results[r_cnt].perform_result_id =
              pr.perform_result_id
            if (pr.repeat_nbr > next_repeat_nbr)
               next_repeat_nbr = pr.repeat_nbr
            endif
            reply->qual[q_cnt].results[r_cnt].repeat_nbr =
              pr.repeat_nbr
            reply->qual[q_cnt].results[r_cnt].reference_range_factor_id =
              pr.reference_range_factor_id
            reply->qual[q_cnt].results[r_cnt].advanced_delta_id =
              pr.advanced_delta_id
            reply->qual[q_cnt].results[r_cnt].normal_cd =
              pr.normal_cd
            reply->qual[q_cnt].results[r_cnt].critical_cd =
              pr.critical_cd
            reply->qual[q_cnt].results[r_cnt].review_cd =
              pr.review_cd
            reply->qual[q_cnt].results[r_cnt].linear_cd =
              pr.linear_cd
            reply->qual[q_cnt].results[r_cnt].feasible_cd =
              pr.feasible_cd
            reply->qual[q_cnt].results[r_cnt].dilution_factor =
              pr.dilution_factor
            reply->qual[q_cnt].results[r_cnt].delta_cd =
              pr.delta_cd
;001            if (normal_low_null = 0
;001            and normal_high_null = 1)
;001               ;* Normal low only exists
;001               reply->qual[q_cnt].results[r_cnt].normal_range_flag = 1
;001            elseif (normal_low_null = 1
;001                and normal_high_null = 0)
;001               ;* Normal high only exists
;001               reply->qual[q_cnt].results[r_cnt].normal_range_flag = 2
;001            elseif (normal_low_null = 0
;001                and normal_high_null = 0)
;001               ;* Both normal low and high exists
;001               reply->qual[q_cnt].results[r_cnt].normal_range_flag = 3
;001            else
;001               reply->qual[q_cnt].results[r_cnt].normal_range_flag = 0
;001            endif
            reply->qual[q_cnt].results[r_cnt].normal_range_flag = rrf.normal_ind        ;001
            reply->qual[q_cnt].results[r_cnt].normal_low =
              pr.normal_low
            reply->qual[q_cnt].results[r_cnt].normal_high =
              pr.normal_high
            reply->qual[q_cnt].results[r_cnt].normal_alpha =
              pr.normal_alpha
;001            if (critical_low_null = 0
;001            and critical_high_null = 1)
;001               ;* Critical low only exists
;001               reply->qual[q_cnt].results[r_cnt].critical_range_flag = 1
;001            elseif (critical_low_null = 1
;001                and critical_high_null = 0)
;001               ;* Critical high only exists
;001               reply->qual[q_cnt].results[r_cnt].critical_range_flag = 2
;001            elseif (critical_low_null = 0
;001                and critical_high_null = 0)
;001               ;* Both critical low and high exists
;001               reply->qual[q_cnt].results[r_cnt].critical_range_flag = 3
;001            else
;001               reply->qual[q_cnt].results[r_cnt].critical_range_flag = 0
;001            endif
            reply->qual[q_cnt].results[r_cnt].critical_range_flag = rrf.critical_ind        ;001
            reply->qual[q_cnt].results[r_cnt].critical_low =
              rrf.critical_low
            reply->qual[q_cnt].results[r_cnt].critical_high =
              rrf.critical_high
            reply->qual[q_cnt].results[r_cnt].result_type_cd =
              pr.result_type_cd
            reply->qual[q_cnt].results[r_cnt].equation_id =
              pr.equation_id
            reply->qual[q_cnt].results[r_cnt].units_cd =
              pr.units_cd
            reply->qual[q_cnt].results[r_cnt].nomenclature_id =
              pr.nomenclature_id
            reply->qual[q_cnt].results[r_cnt].result_value_numeric =
              pr.result_value_numeric
            reply->qual[q_cnt].results[r_cnt].numeric_raw_value =
              pr.numeric_raw_value
            reply->qual[q_cnt].results[r_cnt].result_value_alpha =
              pr.result_value_alpha
            reply->qual[q_cnt].results[r_cnt].result_value_alpha_mnemonic =
              nc.mnemonic
            reply->qual[q_cnt].results[r_cnt].result_value_dt_tm =
              pr.result_value_dt_tm
            reply->qual[q_cnt].results[r_cnt].long_text_id =
              pr.long_text_id
            if (lt.long_text_id > 0.0)
               reply->qual[q_cnt].results[r_cnt].rtf_text =
                 lt.long_text
            endif
            reply->qual[q_cnt].results[r_cnt].ascii_text =
              pr.ascii_text
            reply->qual[q_cnt].results[r_cnt].less_great_flag =
              pr.less_great_flag
            reply->qual[q_cnt].results[r_cnt].perform_personnel_id =
              pr.perform_personnel_id
            if (pl.person_id > 0.0)
               reply->qual[q_cnt].results[r_cnt].perform_personnel_name =
                pl.name_full_formatted
            endif
            reply->qual[q_cnt].results[r_cnt].perform_dt_tm =
              pr.perform_dt_tm
            reply->qual[q_cnt].results[r_cnt].perform_result_updt_cnt =
              pr.updt_cnt
            if (result_comment_yn = "Y")
               reply->qual[q_cnt].results[r_cnt].result_comment_ind = 1
            else
               reply->qual[q_cnt].results[r_cnt].result_comment_ind = 0
            endif
            reply->qual[q_cnt].results[r_cnt].notify_cd =
              pr.notify_cd
            reply->qual[q_cnt].results[r_cnt].service_resource_cd =
              pr.service_resource_cd
            reply->qual[q_cnt].results[r_cnt].qc_override_cd =
              pr.qc_override_cd
            reply->qual[q_cnt].results[r_cnt].automatic_worklist_id = pr.worklist_id
 
         foot d.seq
            reply->qual[q_cnt].next_repeat_nbr = next_repeat_nbr + 1
            if (r_cnt > 0)
               stat = alterlist(reply->qual[q_cnt].results, r_cnt)
            endif
 
         foot report
            stat = alterlist(reply->qual, q_cnt)
            stat = alterlist(temp_record_perform_result->qual,q_cnt)
 
         with
            nocounter,
            outerjoin = d_rc,
            maxread(rc, 1)
 
 		
      set qual_count = size(reply->qual,5)
      if(qual_count > 0)
        set qual_idx = 1
        if(request->results[qual_idx].disp_seq_by_perf_serv_res_ind = 1)
 
 
        		set idx1 = 0
        		set idx2 = 0
        		set idx3 = 0
        		set lIndex=0
        		
	        	select apr.display_sequence,apr.task_assay_cd
	        	from
	        	assay_processing_r apr
	        	plan apr
	        	where expand(idx1,1,qual_count,apr.service_resource_cd,temp_record_perform_result->qual[idx1].service_resource_cd,apr.
	        	task_assay_cd,temp_record_perform_result->qual[idx1].task_assay_cd)
	        	and apr.loaded_service_resource_cd >= 0.0
	        	detail
	        		lindex = 0
	        		idx3 = 0
	        		start_idx = 1
 										
	        		lindex = locateval(idx3,1,qual_count,apr.task_assay_cd,reply->qual[idx3].task_assay_cd)
	        		
	        		while(lindex > 0)
	           		
	        			if(reply->qual[lindex].order_id = temp_record_perform_result->qual[lindex].order_id and
	        				reply->qual[lindex].result_id = temp_record_perform_result->qual[lindex].result_id)
	        				reply->qual[lindex].display_sequence = apr.display_sequence
	        				temp_record_perform_result->qual[lindex].result_id = 0.0
	        				temp_record_perform_result->qual[lindex].order_id = 0.0
	        				lindex = qual_count
	        			endif

	        			idx3 = 0
	        			start_idx = lindex + 1
	        			if(start_idx <= qual_count)
	        				lindex = locateval(idx3,start_idx,qual_count,apr.task_assay_cd,reply->qual[idx3].task_assay_cd)
	        			else
	        				lindex = 0
	        			endif
	        		endwhile
	        		
	        	with nocounter
 
      	endif
      endif
      
       
      /***********************************************************************
      * Resize reply record                                                  *
      ***********************************************************************/
      #Resize_Reply
         if (q_cnt > 0)
            set reply->status_data.status = "S"    ;Successful
         else
            set reply->status_data.status = "Z"    ;Zero
         endif
 
 
      #Exit_Script
         end
         go

;Generated by GNU enscript 1.6.4.
