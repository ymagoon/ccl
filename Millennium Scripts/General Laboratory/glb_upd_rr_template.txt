 ;;Solution_Test/script/PathNet -- Gen Lab/glb_upd_rr_template/glb_upd_rr_template.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_UPD_RR_TEMPLATE.PRG         
        Object name:            GLB_UPD_RR_TEMPLATE             
        Request #:              257572

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Update the PDM_PARAMS table with new values
                           

        Tables read:            n/a
 
        Tables updated:         pdm_params
        Executing from:         General Lab internet application

        Special Notes:          n/a
*/
;    ************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 11/23/98 Gary Runde           Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

        drop program GLB_UPD_RR_TEMPLATE:DBA GO        
        create program GLB_UPD_RR_TEMPLATE:DBA   
/*
;     record request
;     (
;   1  round_robin_ref_id   = f8
;   1  display      = vc
;   1  old_display    = vc
;   1  Resources[*]
;   2  service_resource_cd  = f8
;   1  assays[*]
;   2  task_assay_cd  = f8
;   2  outlier_ind    = i2
;   2  outlier    = f8
;   2  display_seq    = i4
;      )
 */

        record reply
        (
    1  round_robin_ref_id = f8
    1  display    = vc
%i cclsource:status_block.inc
        )

/* Variable initialization */
  set FAILED = "F"
        set reply->status_data->status = "F"
  set reply->display = request->display
  declare round_robin_ref_id = f8 with protect, noconstant(0.0)
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty


         set hSys = 0
         set SysStat = 0
   set d_cnt = 0
         call uar_SysCreateHandle(hSys,SysStat)
         set sText = fillstring(254, " ")

      /***********************************************************************
      * Check to make sure the template name does not already exist          *
      ***********************************************************************/
  ; if new template or template name is being changed 
        if (request->old_display != request->display)   
    select into "nl:"
        rf.display
    from round_robin_ref rf
    where cnvtupper(rf.display) = cnvtupper(request->display)
         and rf.active_ind = 1
    head report
      d_cnt = 0
    detail
      d_cnt = d_cnt + 1
    with nocounter
    
    ;if active template name already found error out
    if (d_cnt > 0) 
                    set reply->status_data.subeventstatus[1].OperationName =
                       "UPDATE_RR_TEMPLATE"
                    set reply->status_data.subeventstatus[1].OperationStatus =
                       "F"
                    set reply->status_data.subeventstatus[1].TargetObjectName =
                       "ROUND_ROBIN_REF"
                    set reply->status_data.subeventstatus[1].TargetObjectValue =
                        build("Round Robin Template name already exists!  " ,  
                                 "The template name must be unique!")
                    go to exit_script
                endif
        endif

      /***********************************************************************
      * Add new row to the round_robin_ref table with new ID                 *
      ***********************************************************************/
subroutine Add_rr_template(x)

        set sText = ("add_rr_template")
        call uar_SysEvent(hSys, 3, "upd_rr add_rr_template", NULLTERM(sText))

  SELECT 
           into "nl:"
              y = seq(pathnet_seq,nextval) "##################;rp0"
        FROM 
           dual
        DETAIL
           round_robin_ref_id = y
        WITH
           format, counter
        
        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif


       insert
          into 
                round_robin_ref rf
        set
    rf.round_robin_ref_id   = round_robin_ref_id,
    rf.display      = request->display,
          rf.active_ind     = 1,
    rf.beg_effective_dt_tm  = CNVTDATETIME(CURDATE, CURTIME),
    rf.end_effective_dt_tm  = cnvtdatetime("31-DEC-2100"),
    rf.updt_dt_tm           = cnvtdatetime(curdate,curtime),
          rf.updt_cnt             = 0,
          rf.updt_task            = reqinfo->updt_task,
          rf.updt_id              = reqinfo->updt_id,
          rf.updt_applctx         = reqinfo->updt_applctx
        with nocounter

  if (curqual = 0)
        set FAILED = "T"
  endif
        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif


      /***********************************************************************
      * Add new row to the rr_assay_r table with new ID                      *
      ***********************************************************************/

       for (cnt = 1 to size(request->resources, 5)) 

       insert
    into  
    rr_assay_r ra,
    (dummyt d1 with seq = value(size(request->assays, 5)))
    set
          ra.round_robin_ref_id   = round_robin_ref_id,
          ra.service_resource_cd  = request->resources[cnt].service_resource_cd,
          ra.task_assay_cd  = request->assays[d1.seq].task_assay_cd,
          ra.display_sequence = request->assays[d1.seq].display_seq,
    ra.outlier_ind    = request->assays[d1.seq].outlier_ind,
    ra.outlier    = request->assays[d1.seq].outlier,
          ra.updt_dt_tm           = cnvtdatetime(curdate,curtime),
                ra.active_ind     = 1,
          ra.beg_effective_dt_tm  = CNVTDATETIME(CURDATE, CURTIME),
        ra.end_effective_dt_tm  = cnvtdatetime("31-DEC-2100"),
          ra.updt_cnt             = 0,
          ra.updt_task            = reqinfo->updt_task,
          ra.updt_id              = reqinfo->updt_id,
          ra.updt_applctx         = reqinfo->updt_applctx
  plan d1
  join ra where ra.seq = d1.seq
        with nocounter

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

  if (curqual = 0)
         set FAILED = "T"
  endif
        endfor

      /***********************************************************************
      * Check the display to see if it has changed if so, change all displays*
      ***********************************************************************/
        ;if template name changed and not a new template
        if (request->old_display != request->display and
    request->round_robin_ref_id > 0)
           update into round_robin_ref rf
           set rf.display = request->display
     where rf.display = request->old_display
     with nocounter
  
     if (curqual = 0)
        set FAILED = "T"
     endif
           set error_check = ERROR(sErrorMsg,0)   ;get error message
           if (error_check != 0)
             set reply->status_data->status = "F"
             set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
             go to exit_script
           endif
        endif 

end ;add_rr_template

subroutine inactivate_template(y)

       set sText = ("inactivateTemplate")
       call uar_SysEvent(hSys, 4, "upd_rr inactivatetemp", NULLTERM(sText))

  update into round_robin_ref rf
        set
          rf.active_ind     = 0,
    rf.end_effective_dt_tm  = CNVTDATETIME(CURDATE, CURTIME3),
    rf.updt_dt_tm           = cnvtdatetime(curdate,curtime),
          rf.updt_cnt             = rf.updt_cnt + 1,
          rf.updt_task            = reqinfo->updt_task,
          rf.updt_id              = reqinfo->updt_id,
          rf.updt_applctx         = reqinfo->updt_applctx
        where rf.round_robin_ref_id = request->round_robin_ref_id
        with nocounter
  
        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

  update into rr_assay_r ra
        set
          ra.active_ind     = 0,
    ra.end_effective_dt_tm  = CNVTDATETIME(CURDATE, CURTIME3),
    ra.updt_dt_tm           = cnvtdatetime(curdate,curtime),
          ra.updt_cnt             = ra.updt_cnt + 1,
          ra.updt_task            = reqinfo->updt_task,
          ra.updt_id              = reqinfo->updt_id,
          ra.updt_applctx         = reqinfo->updt_applctx
        where ra.round_robin_ref_id = request->round_robin_ref_id
  with nocounter

        set error_check = ERROR(sErrorMsg,0)   ;get error message
        if (error_check != 0)
          set reply->status_data->status = "F"
          set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
          go to exit_script
        endif

  if (curqual = 0)
         set FAILED = "T"
  endif
end ;inactivate_template

/***********************************************
* Script                                       *
***********************************************/

if (request->round_robin_ref_id > 0)
  call inactivate_template(0)
endif

if (failed = "F")
  call add_rr_template(0)
endif

set reply->round_robin_ref_id = round_robin_ref_id  

if (FAILED = "T")
  rollback
else
  commit
        set reply->status_data->status = "S"  
endif
  
#exit_script
call uar_SysDestroyHandle(hSys)
end 
go

;Generated by GNU enscript 1.6.4.
