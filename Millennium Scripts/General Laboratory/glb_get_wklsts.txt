 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_wklsts/glb_get_wklsts.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1999 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_GET_WKLSTS.PRG
        Object name:            GLB_GET_WKLSTS
        Request #:              250054

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Return a list of all worklist parameters
                                defined on the worklist_ref table.

        Tables read:            worklist
                                worklist_ref

        Tables updated:         n/a

        Executing from:         General Lab worklist application
                                General Lab database building tool

        Special Notes:          Input parameter worklist_type:
                                     0 = all worklist names
                                     1 = worklist groups only
                                     2 = individual worklists only
******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ###  1/16/95 Dennis Boyer         Initial Release                     *
;    *001 11/17/99 Hal Patchen          Worklist rewrite                    *
;    *002 08/23/02 Mark Brooks          Added service resouce security      *
;    *003 05/04/07 Ryan Manuel          Added the ability to filter out     *
;                                       all but Gen Lab and HLA SR's        *
;    *004 08/09/10 Oliver Barbara       Return automatic_worklist_ind in    *
;                                       reply.                              *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_WKLSTS:dba go
      create program GLB_GET_WKLSTS:dba

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
        1 worklist_type        = i2
        1 service_resource_cd  = f8
        1 filter_hlx_srs_ind   = i2
      )
*/
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
        1  nbr_wklsts                = i4
        1  wklsts[*]
           2  worklist_ref_id        = f8
           2  display                = c20
           2  parent_ind             = i2
           2  service_resource_cd    = f8
           2  service_resource_disp  = vc
           2  service_resource_mean  = vc
           2  active_ind             = i2
           2  active_status_dt_tm    = dq8
           2  worklist_exists_ind    = i2
           2  automatic_worklist_ind = i2
%i cclsource:status_block.inc
      )

%i cclsource:pcs_resource_security.inc         

declare GetActivityTypes(none = i2) = i4 with protect
       
  record valid_codes
  (
    1 qual[*]
      2 code = f8
  )

declare lCnt                           = i4  with protect, noconstant(0)
  
     #Script
/********************************************************************/
/* Select worklist rows                                             */
/********************************************************************/
      if ( (request->worklist_type = 2) and (request->service_resource_cd = 0) )    ;002
         call InitResourceSecurity(1)                                               ;002
      else                                                                          ;002
         call InitResourceSecurity(0)                                               ;002
      endif

      set wklst_cnt = 0
      set reply->status_data->status = "F"                                          ;002

      set lNumActivityTypes = GetActivityTypes(0)
      
      ; Be careful which fields are added to the report section of this query.  Anything that is used
      ; in the report section will be used as part of the distinct.
      select
      if (request->worklist_type = 1)
         plan wr
           where wr.worklist_ref_id > 0.0
             and wr.parent_ind = 1
             and wr.active_ind = 1
         join sr
           where sr.service_resource_cd = wr.service_resource_cd
             and (expand(lCnt, 1, lNumActivityTypes, sr.activity_type_cd, valid_codes->qual[lCnt].code) 
              or request->filter_hlx_srs_ind = 0)
         join w
           where w.worklist_ref_id = outerjoin(wr.worklist_ref_id)
      elseif (request->worklist_type = 2
      and request->service_resource_cd > 0.0)
         plan wr
           where wr.worklist_ref_id > 0.0
             and wr.parent_ind = 0
             and wr.service_resource_cd = request->service_resource_cd
             and wr.active_ind = 1
         join sr
           where sr.service_resource_cd = wr.service_resource_cd
             and (expand(lCnt, 1, lNumActivityTypes, sr.activity_type_cd, valid_codes->qual[lCnt].code) 
              or request->filter_hlx_srs_ind = 0)
         join w
           where w.worklist_ref_id = outerjoin(wr.worklist_ref_id)
      elseif (request->worklist_type = 2
      and request->service_resource_cd = 0.0)
         plan wr
           where wr.worklist_ref_id > 0.0
             and wr.parent_ind = 0
             and wr.active_ind = 1
         join sr
           where sr.service_resource_cd = wr.service_resource_cd
             and (expand(lCnt, 1, lNumActivityTypes, sr.activity_type_cd, valid_codes->qual[lCnt].code) 
              or request->filter_hlx_srs_ind = 0)
         join w
           where w.worklist_ref_id = outerjoin(wr.worklist_ref_id)
      elseif (request->worklist_type = 0
      and request->service_resource_cd > 0.0)
         plan wr
           where wr.worklist_ref_id > 0.0
             and wr.service_resource_cd = request->service_resource_cd
             and wr.active_ind = 1
         join sr
           where sr.service_resource_cd = wr.service_resource_cd
             and (expand(lCnt, 1, lNumActivityTypes, sr.activity_type_cd, valid_codes->qual[lCnt].code) 
              or request->filter_hlx_srs_ind = 0)
         join w
           where w.worklist_ref_id = outerjoin(wr.worklist_ref_id)
      else
         plan wr
           where wr.worklist_ref_id > 0.0
             and wr.active_ind = 1
         join sr
           where sr.service_resource_cd = wr.service_resource_cd
             and (expand(lCnt, 1, lNumActivityTypes, sr.activity_type_cd, valid_codes->qual[lCnt].code) 
              or request->filter_hlx_srs_ind = 0)
         join w
           where w.worklist_ref_id = outerjoin(wr.worklist_ref_id)
      endif
      distinct
      into "nl:"
         wr.worklist_ref_id
        ,worklist_exists_yn = evaluate(nullind(w.worklist_ref_id), 0, 1, 0)

      from
         worklist_ref wr
        ,worklist w
        ,service_resource sr

      order by
         wr.display_key,
         wr.worklist_ref_id

      head wr.worklist_ref_id
         if (IsResourceViewable(wr.service_resource_cd) = True)        ;002
            wklst_cnt = wklst_cnt + 1
            if (mod(wklst_cnt, 100) = 1)
               stat = alterlist(reply->wklsts, wklst_cnt + 100)
            endif
            reply->nbr_wklsts = wklst_cnt
            reply->wklsts[wklst_cnt].worklist_ref_id = wr.worklist_ref_id
            reply->wklsts[wklst_cnt].display = wr.display
            reply->wklsts[wklst_cnt].parent_ind = wr.parent_ind
            reply->wklsts[wklst_cnt].service_resource_cd =
               wr.service_resource_cd
            reply->wklsts[wklst_cnt].active_ind = wr.active_ind
            reply->wklsts[wklst_cnt].active_status_dt_tm =
               cnvtdatetime(wr.active_status_dt_tm)
            if (worklist_exists_yn = 1)
               reply->wklsts[wklst_cnt].worklist_exists_ind = 1
            else
               reply->wklsts[wklst_cnt].worklist_exists_ind = 0
            endif
            reply->wklsts[wklst_cnt].automatic_worklist_ind = wr.automatic_worklist_ind
         endif                                                              ;002
      foot report
         stat = alterlist(reply->wklsts, wklst_cnt)

      with
         nocounter

      if (wklst_cnt = 0)
         if (GetResourceSecurityStatus(0) != "S")                           ;002
           call PopulateResSecStatusBlock(0)                                ;002
           set reply->status_data->status = GetResourceSecurityStatus(0)    ;002
         Else                                                               ;002
           set reply->status_data->status = "Z"
         endif                                                              ;002
      else
         set reply->status_data->status = "T"
      endif
 
subroutine GetActivityTypes(none)
  declare lTotal = i4 with private, noconstant(0)
  declare lCurrent = i4 with private, noconstant(1)
  declare lLoopCount = i4 with private, noconstant(1)
  declare dCodeValue = f8 with private, noconstant(0.0)
  declare lRunningTotal = i4 with private, noconstant(0)
 
  while (lCurrent != lTotal)
    set stat = uar_get_meaning_by_codeset(106, "GLB", lCurrent, dCodeValue)
    if (stat != 0 or dCodeValue = 0.0)
      go to EXIT_SCRIPT
    endif
    
    set lTotal = lTotal + 1
    set lRunningTotal = lRunningTotal + 1
    
    set stat = alterlist(valid_codes->qual, lRunningTotal)
    set valid_codes->qual[lRunningTotal].code = dCodeValue
  endwhile
  
  set lTotal = 0
  set lCurrent = 1
  set lLoopCount = 1
  set dCodeValue = 0.0
  
  while (lCurrent != lTotal)
    set stat = uar_get_meaning_by_codeset(106, "HLA", lCurrent, dCodeValue)
    if (stat != 0 or dCodeValue = 0.0)
      go to EXIT_SCRIPT
    endif
    
    set lTotal = lTotal + 1
    set lRunningTotal = lRunningTotal + 1
    
    set stat = alterlist(valid_codes->qual, lRunningTotal)
    set valid_codes->qual[lRunningTotal].code = dCodeValue
  endwhile
  
  return (lRunningTotal)
end ;subroutine

free set valid_codes

end
go

;Generated by GNU enscript 1.6.4.
