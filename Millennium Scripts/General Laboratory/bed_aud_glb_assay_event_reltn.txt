 ;;Solution_Test/script/Bedrock/bed_aud_glb_assay_event_reltn/bed_aud_glb_assay_event_reltn.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:        bed_aud_glb_assay_event_reltn.prg
        Object name:             bed_aud_glb_assay_event_reltn
        Request #:
 
        Product:                 Bedrock
        Product Team:            Bedrock
        HNA Version:             500
        CCL Version:             8.0
 
        Program purpose:
 
        Tables read:
 
 
        Tables updated:
 
        Executing from:          BEDROCK
 
        Special Notes:
 
 
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 02/05/10 Devi Peddineni       Initial Release
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bed_aud_glb_assay_event_reltn:dba go
create program bed_aud_glb_assay_event_reltn:dba
 
if (not (validate (request,0)))
 record request
  (
    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
    1 paramlist[*]
      2 param_type_mean = vc
      2 pdate1 = dq8
      2 pdate2 = dq8
      2 vlist[*]
        3 dbl_value = f8
        3 string_value = vc
  )
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*]
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1  high_volume_flag = i2
    1  output_filename = vc
    1  run_status_flag = i2
    1  statlist[*]
       2 statistic_meaning = vc
       2 status_flag = i2
       2 qualifying_items = i4
       2 total_items = i4
    1  status_data
      2  status  =  C1
      2  SUBEVENTSTATUS [ 1 ]
        3  OPERATIONNAME  =  C15
        3  OPERATIONSTATUS  =  C1
        3  TARGETOBJECTNAME  =  C15
        3  TARGETOBJECTVALUE  =  C100
  )
endif
 
 
 
free record temp
record temp
(
  1 tqual[*]
    2 activity_type		= vc
    2 catalog_type 		= vc
	2 assay_disp		= vc
	2 assay_desc		= vc
	2 event_code_disp	= vc
	2 event_set_name	= vc
	2 event_set_disp	= vc
	2 event_set_desc	= vc
)
 
 
declare LAB = f8 with public, noconstant(0.0)
declare GLB = f8 with public, noconstant(0.0)
declare act_type = vc with Public
declare cat_type = vc with Public
 
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 106
    and cv.cdf_meaning = "GLB"
    and cv.active_ind = 1
detail
  GLB = cv.code_value
  act_type = cv.display
with nocounter
 
 
select into "NL:"
from code_value cv
plan cv
	where cv.code_set = 6000
	  and cv.cdf_meaning = "GENERAL LAB"
	  and cv.active_ind = 1
detail
	LAB = cv.code_value
	cat_type = cv.display
with nocounter
 
 
set high_volume_cnt = 0
if (request->skip_volume_check_ind = 0)
  select into "nl:"
    hv_cnt = count(*)
  from discrete_task_assay dta,
     code_value_event_r cver,
     v500_event_code vec,
     v500_event_set_explode vese,
     v500_event_set_code vesc
plan dta
 	where dta.activity_type_cd = GLB
 	and dta.active_ind = 1
  join cver
 	where cver.parent_cd = outerjoin(dta.task_assay_cd)
  join vec
 	where vec.event_cd = outerjoin(cver.event_cd)
  join vese
	where vese.event_cd = outerjoin(vec.event_cd)
		and vese.event_set_level = outerjoin(0)
  join vesc
	where vesc.event_set_name = outerjoin(vec.event_set_name)
  detail
    high_volume_cnt = hv_cnt
  with nocounter
 
  call echo(high_volume_cnt)
 
  if (high_volume_cnt > 20000)
    set reply->high_volume_flag = 2
    go to exit_script
  elseif (high_volume_cnt > 10000)
    set reply->high_volume_flag = 1
    go to exit_script
  endif
endif
 
set tcnt = 0
 
select into "NL:"
from discrete_task_assay dta,
     code_value_event_r cver,
     v500_event_code vec,
     v500_event_set_explode vese,
     v500_event_set_code vesc
plan dta
 	where dta.activity_type_cd = GLB
 	and dta.active_ind = 1
join cver
 	where cver.parent_cd = outerjoin(dta.task_assay_cd)
join vec
 	where vec.event_cd = outerjoin(cver.event_cd)
join vese
	where vese.event_cd = outerjoin(vec.event_cd)
		and vese.event_set_level = outerjoin(0)
join vesc
	where vesc.event_set_cd = outerjoin(vese.event_set_cd)
order by dta.mnemonic_key_cap, vec.event_cd_disp, vesc.event_set_cd_disp
detail
	tcnt = tcnt + 1
	stat = alterlist(temp->tqual,tcnt)
	temp->tqual[tcnt].activity_type		= act_type
	temp->tqual[tcnt].catalog_type 		= cat_type
	temp->tqual[tcnt].assay_disp 		= dta.mnemonic
	temp->tqual[tcnt].assay_desc 		= dta.description
	temp->tqual[tcnt].event_code_disp 	= vec.event_cd_disp
	temp->tqual[tcnt].event_set_name 	= vesc.event_set_name
	temp->tqual[tcnt].event_set_disp 	= vesc.event_set_cd_disp
	temp->tqual[tcnt].event_set_desc 	= vesc.event_set_cd_descr
with nocounter
 
set stat = alterlist(reply->collist,8)
set reply->collist[1].header_text = "Catalog Type"
set reply->collist[1].data_type = 1 ;string
set reply->collist[1].hide_ind = 0
set reply->collist[2].header_text = "Activity Type"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 0
set reply->collist[3].header_text = "Assay Display"
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
set reply->collist[4].header_text = "Assay Description"
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
set reply->collist[5].header_text = "Event Code Display (Paper Chart)"
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
set reply->collist[6].header_text = "Event Set Name"
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
set reply->collist[7].header_text = "Event Set Display (PowerChart Flowsheet)"
set reply->collist[7].data_type = 1 ;string
set reply->collist[7].hide_ind = 0
set reply->collist[8].header_text = "Event Set Description"
set reply->collist[8].data_type = 1 ;string
set reply->collist[8].hide_ind = 0
 
if (tcnt = 0)
  go to exit_script
endif
 
set row_nbr = 0
for (x = 1 to tcnt)
	set row_nbr = row_nbr + 1
	set stat = alterlist(reply->rowlist,row_nbr)
	set stat = alterlist(reply->rowlist[row_nbr].celllist,8)
	set reply->rowlist[row_nbr].celllist[1].string_value = temp->tqual[x].catalog_type
	set reply->rowlist[row_nbr].celllist[2].string_value = temp->tqual[x].activity_type
	set reply->rowlist[row_nbr].celllist[3].string_value = temp->tqual[x].assay_disp
	set reply->rowlist[row_nbr].celllist[4].string_value = temp->tqual[x].assay_desc
	set reply->rowlist[row_nbr].celllist[5].string_value = temp->tqual[x].event_code_disp
	set reply->rowlist[row_nbr].celllist[6].string_value = temp->tqual[x].event_set_name
	set reply->rowlist[row_nbr].celllist[7].string_value = temp->tqual[x].event_set_disp
	set reply->rowlist[row_nbr].celllist[8].string_value = temp->tqual[x].event_set_desc
endfor
 
#exit_script
if (reply->high_volume_flag in (1,2))
  set reply->output_filename = build("glb_assays_to_evntcd_evntset.csv")
endif
 
if (request->output_filename > " ")
  execute bed_rpt_file
endif
 
end go

;Generated by GNU enscript 1.6.4.
