 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_correction/glb_rpt_correction.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2000 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_RPT_CORRECTION.PRG
        Object name:            GLB_RPT_CORRECTION
        Request #:              250116

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Produce a corrections report showing
                                General Lab corrected result activity.

        Tables read:            code_value
                                container
                                container_accession
                                data_map
                                discrete_task_assay
                                encounter
                                long_text
                                orders
                                order_comment
                                order_laboratory
                                organization
                                perform_result
                                person
                                person_alias
                                profile_task_r
                                prsnl
                                resource_group
                                result
                                result_comment
                                result_event

        Tables updated:         none

        Executing from:         General Lab application

        Special Notes:          n/a

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 08/16/96 Newton Hughes        Initial Release                     *
;     001 09/19/97 Gayla Benson         Add linear, feasible, & dilution.   *
;                     Reformatted report to make result column wide enough. *
;                     Also added check of event_sequence.                   *
;    *002 09/19/97 Hal Patchen          Add autoverification logic          *
;    *003 10/13/97 Jeff Fry             Add sub-section service_resource_cd *
;                                       to sub-section logic.               *
;    *004 11/14/97 Hal Patchen          Add subsection level data map check *
;    *005 12/08/97 Hal Patchen          Add MRN & Accn number formatting    *
;    *006 01/09/98 Hal Patchen          Fix corrections across resources    *
;    *007 05/05/98 Hal Patchen          Verify subsection level data map    *
;    *                                  is associated with route test site  *
;    *008 05/06/98 Hal Patchen          Fix printing of verifying tech id   *
;    *                                  when performed by different tech    *
;    *009 04/23/99 Chad Moats           Remove joins to code_value table    *
;    *010 06/07/99 Gary Runde           Display the encounter status code   *
;    *                                  and the org_name                    *
;    *011 06/28/99 Laura Pott           Internationalize                    *
;    *    12/14/99 Jack Moore           Merged I18n code from mod above into*
;    *                                  production code.                    *
;    *012 01/31/00 Hal Patchen          Add sub-sort option by service      *
;    *                                  resource or patient name.           *
;    *013 10/15/01 Saeed Zafar          Allow orders of Activity type HLA to*
;    *                                  qualify for the reports if they are *
;    *                                  associated with the selected test   *
;    *                                  site.                               *
;    *014 01/08/02 Ahti Rovainen        Order by for each head              *
;    *                                  +0 suppression of undesired indices *
;    *015 01/03/02 Mike Gabrick         Correct truncation of display.      *
;    *                                  Allow report to print if no data.   *
;    *                                  Sort by person_name and person_id   *
;    *                                  in case same name exists.           *
;    *016 09/11/02 Mark Brooks          Added service resource security.    *
;    *017 08/07/03 Craig Sumrall		    Updated select table (person-prsnl) *
;    *018 07/11/07 Ryan Manuel          Added file_name to the reply and    *
;    *                                  now return it to print on front end *
;    *                                  instead of spooling on the backend  *
;    *019 08/13/07 Scott Haven          Added HLX functionality to the script *
;                                       as well as scientific notation      *
;    *020 04/17/08 Oliver Barbara       Added code to handle letter size    *
;                                       printing                            *
;    *021 07/28/08 Rahul Deshmukh       Added code to include interp text flag *
;                                       in bldstr function                  *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
;012 cclseclogin go                                                          ;009

             drop program GLB_RPT_CORRECTION:dba go
             create program GLB_RPT_CORRECTION:dba
%i CCLSOURCE:GLB_SCRIPT_LOGGING.INC                                    ;015
set LOG_PROGRAM_NAME = "glb_rpt_correction"                            ;015
      /***********************************************************************
      * Internationalization                                                 *
      ***********************************************************************/
%i cclsource:pcs_format_age.inc
         ;* include i18n function declarations                         ;011
%i cclsource:i18n_uar.inc                                              ;011
                                                                       ;011
         ;* initialize variable that will keep the handle to i18n data ;011
         set i18nHandle = 0                                            ;011
         ;* call uar_i18nlocalizationinit                              ;011
         set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev) ;011
                                                                       ;011
      record captions                                                  ;011
      (                                                                ;011
         1  beg_tm                       = vc                          ;011
         1  end_tm                       = vc                          ;011
         1  req                          = vc                          ;011
         1  serv_res                     = vc                          ;011
         1  seq                          = vc                          ;011
         1  inst                         = vc                          ;011
         1  dept                         = vc                          ;011
         1  sect                         = vc                          ;011
         1  sub_sect                     = vc                          ;011
         1  tst_ste                      = vc                          ;011
         1  nbr_prs                      = vc                          ;011
         1  nbr_com                      = vc                          ;011
         1  ord_id                       = vc                          ;011
         1  corr_rpt                     = vc                          ;011
         1  to_                          = vc                          ;011
         1  dr                           = vc                          ;011
         1  demo                         = vc                          ;011
         1  title                        = vc                          ;011
         1  date                         = vc                          ;011
         1  dir                          = vc                          ;011
         1  time                         = vc                          ;011
         1  byuse                        = vc                          ;011
         1  pg                           = vc                          ;011
         1  instit                       = vc                          ;011
         1  depart                       = vc                          ;011
         1  section                      = vc                          ;011
         1  sub_section                  = vc                          ;011
         1  test_site                    = vc                          ;011
         1  orig                         = vc                          ;011
         1  corr                         = vc                          ;011
         1  orderable                    = vc                          ;011
         1  result1                      = vc                          ;011
         1  result2                      = vc                          ;011
         1  not_fnd                      = vc                          ;011
         1  unknown                      = vc                          ;011
         1  ord_cmnt                     = vc                          ;011
         1  ord_note                     = vc                          ;011
         1  org_txt_rslt                 = vc                          ;011
         1  cor_txt_rslt                 = vc                          ;011
         1  rslt_note                    = vc                          ;011
         1  rslt_cmnt                    = vc                          ;011
         1  interp_text_flag             = vc                          ;011
      )    
         declare LOCALE = vc with protect, noconstant( "" )
         set LOCALE = cnvtupper(logical("CCL_LANG"))
         if (LOCALE = "")
          set LOCALE = cnvtupper(logical("LANG"))
         endif
         set LOCALE = substring(1, 5, LOCALE)
         declare localeObjectName = 
             vc with protect, noconstant("EN_US") 
         
         if(LOCALE != localeObjectName)  
            set request->letter_size_ind = 0
         endif                                                                  
      declare EndReportVar = vc                                        ;015

         set EndReportVar = uar_i18ngetmessage(i18nHandle,"end_rpt","#### END OF REPORT ####") ;015

         set captions->not_fnd =                                       ;011
           uar_i18ngetmessage(i18nHandle,"not_fnd","Not Found")        ;011
         set captions->unknown =                                       ;011
           uar_i18ngetmessage(i18nHandle,"unknown","Unknown")          ;011

         set captions->orderable =                                     ;011
           uar_i18ngetmessage(i18nHandle,"orderable",                  ;011
           "ORDERABLE INFO         PROCEDURE  ")                       ;011
       if(LOCALE = localeObjectName) 
         if(request->letter_size_ind = 1)
            set captions->result1 =
               uar_i18ngetmessage(i18nHandle,"result1",
               "                RESULT         TECH ID   DATE   TIME ")
         else
             set captions->result1 =                                       ;011
               uar_i18ngetmessage(i18nHandle,"result1",                    ;011
               "           RESULT         TECH ID   DATE   TIME ")         ;011
         endif

         set captions->result2 =                                       ;011
           uar_i18ngetmessage(i18nHandle,"result2",                    ;011
           "          RESULT         TECH ID   DATE   TIME")           ;011
        else
         if(request->letter_size_ind = 1)
            set captions->result1 =
               uar_i18ngetmessage(i18nHandle,"result1",
               "                RESULT         TECH ID    DATE    TIME ")
         else
             set captions->result1 =                                       
               uar_i18ngetmessage(i18nHandle,"result1",                    
               "           RESULT         TECH ID     DATE    TIME ")        
         endif
 
         set captions->result2 =                                       
           uar_i18ngetmessage(i18nHandle,"result2",                    
           "        RESULT        TECH ID     DATE    TIME")           
        endif
         set captions->orig =                                          ;011
           uar_i18ngetmessage(i18nHandle,"orig","ORIGINAL")            ;011
         set captions->corr =                                          ;011
           uar_i18ngetmessage(i18nHandle,"corr","CORRECTED")           ;011
         set captions->beg_tm =                                        ;011
           uar_i18ngetmessage(i18nHandle,"beg_tm",":00.00")            ;011
         set captions->end_tm =                                        ;011
           uar_i18ngetmessage(i18nHandle,"end_tm",":59.99")            ;011
         set captions->req =                                           ;011
           uar_i18ngetmessage(i18nHandle,"req",                        ;011
           "request->service_resource_cd = ")                          ;011
         set captions->serv_res =                                      ;011
           uar_i18ngetmessage(i18nHandle,"serv_res",                   ;011
           "serv_res_level_flag = ")                                   ;011
         set captions->seq =                                           ;011
           uar_i18ngetmessage(i18nHandle,"seq","Sequence = ")          ;011
         set captions->inst =                                          ;011
           uar_i18ngetmessage(i18nHandle,"inst","   Institution = ")   ;011
         set captions->dept =                                          ;011
           uar_i18ngetmessage(i18nHandle,"dept","   Department = ")    ;011
         set captions->sect =                                          ;011
           uar_i18ngetmessage(i18nHandle,"sect","   Section = ")       ;011
         set captions->sub_sect =                                      ;011
           uar_i18ngetmessage(i18nHandle,"sub_sect","   Sub Sect = ")  ;011
         set captions->tst_ste =                                       ;011
           uar_i18ngetmessage(i18nHandle,"tst_ste","   Test Site = ")  ;011
         set captions->nbr_prs =                                       ;011
           uar_i18ngetmessage(i18nHandle,"nbr_prs","nbr_prs = ")       ;011
         set captions->nbr_com =                                       ;011
           uar_i18ngetmessage(i18nHandle,"nbr_com","nbr_o_comments = ") ;011
         set captions->ord_id =                                        ;011
           uar_i18ngetmessage(i18nHandle,"ord_id","Order id = ")       ;011
         set captions->corr_rpt =                                      ;011
           uar_i18ngetmessage(i18nHandle,"corr_rpt",                   ;011
           "CORRECTION REPORT")                                        ;011
         set captions->to_ =                                           ;011
           uar_i18ngetmessage(i18nHandle,"to_"," to ")                 ;011
         set captions->dr =                                            ;011
           uar_i18ngetmessage(i18nHandle,"dr","DR. ")                  ;011
         set captions->demo =                                          ;011
           uar_i18ngetmessage(i18nHandle,"demo","DEMOGRAPHICS")        ;011
         set captions->title =                                         ;011
           uar_i18ngetmessage(i18nHandle,"title",                      ;011
           "REPORT:  GLB_RPT_CORRECTION.PRG")                          ;011
         set captions->date =                                          ;011
           uar_i18ngetmessage(i18nHandle,"date","DATE:")               ;011
         set captions->dir =                                           ;011
           uar_i18ngetmessage(i18nHandle,"dir","DIRECTORY:")           ;011
         set captions->time =                                          ;011
           uar_i18ngetmessage(i18nHandle,"time","TIME:")               ;011
         set captions->byuse =                                         ;011
           uar_i18ngetmessage(i18nHandle,"by","  BY:")                 ;011
         set captions->pg =                                            ;011
           uar_i18ngetmessage(i18nHandle,"pg","PAGE:")                 ;011
          set captions->instit =                                        ;011
           uar_i18ngetmessage(i18nHandle,"instit","INSTITUTION:")      ;011
         set captions->depart =                                        ;011
           uar_i18ngetmessage(i18nHandle,"depart","DEPARTMENT:")       ;011
         set captions->section =                                       ;011
           uar_i18ngetmessage(i18nHandle,"section","SECTION:")         ;011
         set captions->sub_section =                                   ;011
           uar_i18ngetmessage(i18nHandle,"sub_section","SUB SECTION:") ;011
         set captions->test_site =                                     ;011
           uar_i18ngetmessage(i18nHandle,"test_site","TEST SITE:")     ;011
         set captions->ord_cmnt =                                      ;011
           uar_i18ngetmessage(i18nHandle,"ord_cmnt"," Order Comment:") ;011
         set captions->ord_note =                                      ;011
           uar_i18ngetmessage(i18nHandle,"ord_note"," Order Note:")    ;011
         set captions->org_txt_rslt =                                  ;011
           uar_i18ngetmessage(i18nHandle,"org_txt_rslt",               ;011
           " Original Text Result:")                                   ;011
         set captions->cor_txt_rslt =                                  ;011
           uar_i18ngetmessage(i18nHandle,"cor_txt_rslt",               ;011
           " Corrected Text Result:")                                  ;011
         set captions->rslt_note =                                     ;011
           uar_i18ngetmessage(i18nHandle,"rslt_note"," Result Note:")  ;011
         set captions->rslt_cmnt =                                     ;011
           uar_i18ngetmessage(i18nHandle,"rslt_cmnt"," Result Comment:") ;011
         set captions->interp_text_flag =
           uar_i18ngetmessage(i18nHandle, "interp_text_flag","(t)")


      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  dt_tm_begin                  = dq8
         1  dt_tm_end                    = dq8
         1  service_resource_cd          = f8
         1  sub_sort_flag                = i2                          ;012
            ;* 0 = service resource hierarchy (default)                ;012
            ;* 1 = patient name                                        ;012
         1  printer_name                 = vc
         1  batch_selection              = vc
         1  output_dist                  = vc
         1  ops_date                     = dq8
         1  resource_sec_ind             = i2                          ;016
         1  letter_size_ind              = i2
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      (
         1 file_name = vc
%i cclsource:status_block.inc
      )

      /***********************************************************************
      * Internal Record Structures                                           *
      ***********************************************************************/
      record test_site
      (
         1  qual[*]
            2  service_resource_cd       = f8
            2  inst_cd                   = f8
            2  inst_disp                 = vc
            2  dept_cd                   = f8
            2  dept_disp                 = vc
            2  sect_cd                   = f8
            2  sect_disp                 = vc
            2  subsect_cd                = f8
            2  subsect_disp              = vc
            2  ts_cd                     = f8
            2  ts_disp                   = vc
            2  serv_res_hier_seq         = i4
      )

      record ts_sort
      (
         1  key1                      = vc
         1  key2                      = vc
         1  service_resource_cd       = f8
         1  inst_cd                   = f8
         1  inst_disp                 = vc
         1  dept_cd                   = f8
         1  dept_disp                 = vc
         1  sect_cd                   = f8
         1  sect_disp                 = vc
         1  subsect_cd                = f8
         1  subsect_disp              = vc
         1  ts_cd                     = f8
         1  ts_disp                   = vc
      )

      record actvty_type
      (
         1  qual[*]
            2  activity_type_cd      = f8
      )

      ;* Array of results that fall within the specified time frame and
      ;* which are verified or corrected.
      record perf_results
      (
         1  qual[*]
            2  result_id                 = f8
            2  perform_result_id         = f8
            2  event_sequence            = i4                          ;001
            2  service_resource_cd       = f8
            2  task_assay_cd             = f8
            2  detail_mnemonic           = vc
            2  accession                 = vc
            2  order_id                  = f8
            2  catalog_cd                = f8
            2  drawn_dt_tm               = c12
            2  result_type_cd            = f8
            2  data_map_ind              = i2
            2  max_digits                = i4
            2  min_decimal_places        = i4
            2  min_digits                = i4
            2  long_text_id              = f8
            2  long_text                 = vc
            2  inst_cd                   = f8
            2  inst_disp                 = vc
            2  dept_cd                   = f8
            2  dept_disp                 = vc
            2  sect_cd                   = f8
            2  sect_disp                 = vc
            2  subsect_cd                = f8
            2  subsect_disp              = vc
            2  ts_cd                     = f8
            2  ts_disp                   = vc
            2  serv_res_hier_seq         = i4
            2  sci_notation_ind          = i2
            2  drawn_dt_tm_locale        = c15
      )

      ;* Report display fields used to determine page breaks.
      record rpt
      (
         1  inst_disp                    = vc
         1  dept_disp                    = vc
         1  sect_disp                    = vc
         1  subsect_disp                 = vc
         1  ts_disp                      = vc
      )
%i cclsource:glb_rpt_subs.inc
%i cclsource:pcs_resource_security.inc                                 ;016

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
      execute accrtl_sci_note

      set reply->status_data.status = "F"

         ;* Code Sets
;002         set CV_REQUIRED_RECS            = 18
         set CV_REQUIRED_RECS            = 22                          ;002           ;013
         declare ACTIVITY_TYPE_HLA_CDF   = c12 with public, constant("HLA        ")   ;013
         declare ACTIVITY_TYPE_HLX_CDF   = c12 with public, constant("HLX")
         declare glb_act_type_found_ind  = i2 with public, noconstant(0)              ;013
         declare cv_cnt                  = i4
         set ALIAS_TYPE_CODESET          = 319
         set ALIAS_TYPE_MRN_CDF          = "MRN"
         declare alias_type_mrn_cd       = f8
         set ACTIVITY_TYPE_CODESET       = 106
         set ACTIVITY_TYPE_GLB_CDF       = "GLB"
         set RESULT_STATUS_CODESET       = 1901
         set RESULT_STATUS_PERFORMED_CDF = "PERFORMED"
         set RESULT_STATUS_OLD_PERF_CDF  = "OLDPERFORMED"
         set RESULT_STATUS_VERIFIED_CDF  = "VERIFIED"
         set RESULT_STATUS_OLD_VERF_CDF  = "OLDVERIFIED"
         set RESULT_STATUS_AUTOVERIFIED_CDF  = "AUTOVERIFIED"          ;002
         set RESULT_STATUS_OLD_AUTOVERF_CDF  = "OLDAUTOVERF"           ;002
         set RESULT_STATUS_CORRECTED_CDF = "CORRECTED"
         set RESULT_STATUS_OLD_CORR_CDF  = "OLDCORRECTED"
         declare performed_cd            = f8
         declare oldperformed_cd         = f8
         declare verified_cd             = f8
         declare oldverified_cd          = f8
         declare autoverified_cd         = f8                          ;002
         declare oldautoverified_cd      = f8                          ;002
         declare corrected_cd            = f8
         declare oldcorrected_cd         = f8
         declare QC_OVERRIDE_CDF           = c12 with protect, constant("QC_OVERRIDE")
         set COMMENT_TYPE_CODESET        = 14
         set COMMENT_TYPE_ORD_COMMENT_CDF = "ORD COMMENT"
         set COMMENT_TYPE_ORD_NOTE_CDF    = "ORD NOTE"
         set COMMENT_TYPE_RES_COMMENT_CDF = "RES COMMENT"
         set COMMENT_TYPE_RES_NOTE_CDF    = "RES NOTE"
	 set DISCHARGED_STATUS_CDF	  = "DISCHARGED"
	 declare discharged_cd		  = f8
         declare order_comment_cd         = f8
         declare order_note_cd            = f8
         declare result_comment_cd        = f8
         declare result_note_cd           = f8
         set SERVICE_RESOURCE_TYPE_CODESET = 223
         set SERV_RES_INSTITUTION_CDF     = "INSTITUTION"
         set SERV_RES_DEPARTMENT_CDF      = "DEPARTMENT"
         set SERV_RES_SECTION_CDF         = "SECTION"
         set SERV_RES_SUBSECTION_CDF      = "SUBSECTION"
         declare serv_res_institution_cd  = f8
         declare serv_res_department_cd   = f8
         declare serv_res_section_cd      = f8
         declare serv_res_subsection_cd   = f8
         set RESULT_TYPE_CODESET          = 289
         set RESULT_TYPE_NUMERIC_CDF      = "3"
         set RESULT_TYPE_CALC_CDF         = "8"
         declare result_type_numeric_cd   = f8
         declare result_type_calc_cd      = f8         
         declare serv_res_cd              = f8                         ;015
         declare RESULT_PRCSS_CODESET = i4 with protect, constant(1902)

         ;* Operations
         declare batch_selection_cd       = f8

         declare normal_high_cd   = f8 with protect, noconstant(0.0)
         declare normal_low_cd    = f8 with protect, noconstant(0.0)
         declare alp_abnormal_cd  = f8 with protect, noconstant(0.0)
         declare critical_cd      = f8 with protect, noconstant(0.0)
         declare alp_critical_cd  = f8 with protect, noconstant(0.0)
         declare review_cd        = f8 with protect, noconstant(0.0)
         declare alp_review_cd    = f8 with protect, noconstant(0.0)
         declare linear_cd        = f8 with protect, noconstant(0.0)
         declare feasible_cd      = f8 with protect, noconstant(0.0)
         declare delta_fail_cd    = f8 with protect, noconstant(0.0)
         declare notify_cd        = f8 with protect, noconstant(0.0)
         declare alp_notify_cd    = f8 with protect, noconstant(0.0)
         declare p_hdg3           = vc with protect, noconstant(" ")
         declare pat_loc          = vc with protect, noconstant(" ")
         declare interp_flag      = vc with protect, noconstant(" ")
         
         set normal_high_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "NORMAL_HIGH")
         set normal_low_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "NORMAL_LOW")
         set alp_abnormal_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "ALP_ABNORMAL")
         set critical_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "CRITICAL")
         set alp_critical_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "ALP_CRITICAL")
         set review_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "REVIEW")
         set alp_review_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "ALP_REVIEW")
         set linear_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "LINEAR")
         set feasible_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "FEASIBLE")
         set delta_fail_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "DELTA_FAIL")
         set notify_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "NOTIFY")
         set alp_notify_cd = uar_get_code_by("MEANING", RESULT_PRCSS_CODESET, "ALP_NOTIFY")
         
         set sub_sort_flag                = 0                          ;012
         if (validate(request->sub_sort_flag, -1) = -1)                ;012
            set sub_sort_flag = 1                                      ;012
         else                                                          ;012
            set sub_sort_flag = request->sub_sort_flag                 ;012
         endif                                                         ;012
         set serv_res_level_flag          = 0
         set nbr_ts                       = 0
         set nbr_actvty_types             = 0
         set nbr_prs                      = 0
         set nbr_o_comments               = 0
         set paramarray[5] = fillstring(15, " ")
         set resultflagstr = fillstring(16, " ")                       ;001

         set i = 0         ; used to index report_data array
         set offset = 0    ; position within a report_data row to insert a
                           ; report item
         set hyphen_line = fillstring(125, "-")
         set cdf_string = fillstring(100," ")

         ;* Keep track of next row to put detail on,
         ;* next row to put comment on
         set order_row = 0
         set detail_row = 0
      	 set username = captions->not_fnd
         declare dServiceResourceCd = f8 with protect, noconstant(0.0) ;016

	       ;get the discharged code_value              ;010
	       set stat = UAR_GET_MEANING_BY_CODESET(261, DISCHARGED_STATUS_CDF, 1, discharged_cd)

      /***********************************************************************
      * Select needed code values                                            *
      ***********************************************************************/
         set cv_cnt = 0

         select into "nl:"
            cv.code_value

         from
            code_value cv

         where ((cv.code_set = ALIAS_TYPE_CODESET
               and cv.cdf_meaning = ALIAS_TYPE_MRN_CDF)
             or (cv.code_set = ACTIVITY_TYPE_CODESET
               and cv.cdf_meaning in (ACTIVITY_TYPE_GLB_CDF, ACTIVITY_TYPE_HLA_CDF, ACTIVITY_TYPE_HLX_CDF))       ;013
             or (cv.code_set = RESULT_STATUS_CODESET)
             or (cv.code_set = COMMENT_TYPE_CODESET
               and cv.cdf_meaning in ( COMMENT_TYPE_ORD_COMMENT_CDF,
                                       COMMENT_TYPE_ORD_NOTE_CDF,
                                       COMMENT_TYPE_RES_COMMENT_CDF,
                                       COMMENT_TYPE_RES_NOTE_CDF ))
             or (cv.code_set = SERVICE_RESOURCE_TYPE_CODESET
               and cv.cdf_meaning in ( SERV_RES_INSTITUTION_CDF,
                                       SERV_RES_DEPARTMENT_CDF,
                                       SERV_RES_SECTION_CDF,
                                       SERV_RES_SUBSECTION_CDF ))
             )
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         detail
            if (cv.code_set = ALIAS_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of ALIAS_TYPE_MRN_CDF:
                    alias_type_mrn_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = ACTIVITY_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of ACTIVITY_TYPE_GLB_CDF:
                    nbr_actvty_types = nbr_actvty_types + 1
                    stat = alterlist(actvty_type->qual, nbr_actvty_types)
                    actvty_type->qual[nbr_actvty_types].activity_type_cd =    ;013
                      cv.code_value
                    ;* Make sure at least 1 GLB activity type exists.
                    if (glb_act_type_found_ind = 0)                           ;013
                       cv_cnt = cv_cnt + 1
                       glb_act_type_found_ind = 1                             ;013
                    endif
                 of ACTIVITY_TYPE_HLA_CDF:                                    ;013
                    nbr_actvty_types = nbr_actvty_types + 1                   ;013
                    cv_cnt = cv_cnt + 1                                       ;013
                    stat = alterlist(actvty_type->qual, nbr_actvty_types)     ;013
                     actvty_type->qual[nbr_actvty_types].activity_type_cd =   ;013
                      cv.code_value                                           ;013
                 of ACTIVITY_TYPE_HLX_CDF:                                    
                    nbr_actvty_types = nbr_actvty_types + 1                   
                    cv_cnt = cv_cnt + 1                                       
                    stat = alterlist(actvty_type->qual, nbr_actvty_types)     
                     actvty_type->qual[nbr_actvty_types].activity_type_cd =   
                      cv.code_value 
                 endcase                                                      ;013
            endif                                                             ;013
            if (cv.code_set = RESULT_STATUS_CODESET)
               case (cv.cdf_meaning)
                 of RESULT_STATUS_PERFORMED_CDF:
                    performed_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_OLD_PERF_CDF:
                    oldperformed_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_VERIFIED_CDF:
                    verified_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_OLD_VERF_CDF:
                    oldverified_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_AUTOVERIFIED_CDF:                    ;002
                    autoverified_cd = cv.code_value                    ;002
                    cv_cnt = cv_cnt + 1                                ;002
                 of RESULT_STATUS_OLD_AUTOVERF_CDF:                    ;002
                    oldautoverified_cd = cv.code_value                 ;002
                    cv_cnt = cv_cnt + 1                                ;002
                 of RESULT_STATUS_CORRECTED_CDF:
                    corrected_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_OLD_CORR_CDF:
                    oldcorrected_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = COMMENT_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of COMMENT_TYPE_ORD_COMMENT_CDF:
                    order_comment_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_ORD_NOTE_CDF:
                    order_note_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_RES_COMMENT_CDF:
                    result_comment_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_RES_NOTE_CDF:
                    result_note_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = SERVICE_RESOURCE_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of SERV_RES_INSTITUTION_CDF:
                    serv_res_institution_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_DEPARTMENT_CDF:
                    serv_res_department_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_SECTION_CDF:
                    serv_res_section_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_SUBSECTION_CDF:
                    serv_res_subsection_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif

         with
            nocounter

         select into "nl:"
            cv.code_value

         from
            code_value cv

         where ((cv.code_set = RESULT_TYPE_CODESET
               and cv.cdf_meaning in ( RESULT_TYPE_NUMERIC_CDF,
                                       RESULT_TYPE_CALC_CDF ))
             )
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         detail
            if (cv.code_set = RESULT_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of RESULT_TYPE_NUMERIC_CDF:
                    result_type_numeric_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_TYPE_CALC_CDF:
                    result_type_calc_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif

         with
            nocounter

         ;* Verify that all required code value records were read.
         if (cv_cnt != CV_REQUIRED_RECS)
           go to Exit_Script
         endif

/***Debug***
         call echo("actvty_type array dump", 1)
         for (x = 1 to nbr_actvty_types)
            call echo(actvty_type->qual[x].activity_type_cd, 1)
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Load operations parameter list                                       *
      ***********************************************************************/
         if (trim(request->batch_selection) > " ")
            set batch_selection_cd = cnvtreal(trim(request->batch_selection))
            set parm_string = fillstring(100, " ")

            select into "nl:"
              cv.code_value
            from
              code_value cv
;jpm            where cv.code_value = batch_selection_cd
                where cv.code_set = 1950 and cv.active_ind = 1
                and trim(cv.display_key) = trim(cnvtupper(cnvtalphanum(request->batch_selection)))
            detail
               cdf_string = trim(cv.cdf_meaning)
               parm_string = trim(cv.definition)
            with
               nocounter

            if (curqual = 0)
                        select into "nl:"
                                cv.code_value
                        from
                                code_value cv
                                where cv.code_set = 1950 and cv.active_ind = 1
                                and cv.code_value = batch_selection_cd
                        detail
                                cdf_string = trim(cv.cdf_meaning)
                                parm_string = trim(cv.definition)
                        with
                                nocounter

                        if (curqual = 0)
                                set reply->status_data->status = "Z"
                                go to Exit_Script
                        endif
                endif

;**********************jpm
                if (cdf_string != "COR")
                   set reply->status_data->status = "F"
                   set reply->status_data->subeventstatus[1]->operationname = "select"
                   set reply->status_data->subeventstatus[1]->operationstatus = "F"
                   set reply->status_data->subeventstatus[1]->targetobjectname = "code_value"
                   set reply->status_data->subeventstatus[1]->targetobjectvalue =
                                "selected display_key's cdf_meaning <> COR"
                        go to Exit_Script
                endif
;**********************jpm
            ;* Locate the individual parameters in parm_string
            ;* and put them in the ops_params array.
            set ptr = 1
            set start_ptr = 1
            set param_idx = 1
;012             for (param_idx = 1 TO 3)
            
            for (param_idx = 1 TO 4)                                   ;012
               set ptr = findstring(",", parm_string, start_ptr)
               if (ptr < 1)
                  set ptr = 100
               endif
               
               set parm_len = ptr - start_ptr
;012                set ops_params->qual[param_idx].param =
               if (parm_len > 0)
                   set paramarray[param_idx] =                             ;012
                     trim(substring(start_ptr, value(parm_len), parm_string), 3)
               endif

               set start_ptr = ptr + 1
            endfor

            
            ; The 5th parameter may not be present if the parameters were stored before
            ; the scripts were updated.
            if (size(trim(substring(start_ptr, 1, parm_string))) > 0) 
                set paramarray[5] = trim(substring(start_ptr, 1, parm_string))
                set start_ptr = start_ptr + 2
            else 
                set paramarray[5] = "0"
            endif

            ;* Use array of ops parameters to set request fields.
            set request->service_resource_cd =
;012               cnvtreal(ops_params->qual[1].param)
              cnvtreal(paramarray[1])                                  ;012
            set request->printer_name = request->output_dist
            set todays_date = format(request->ops_date, "dd-mmm-yyyy;;d")
;            set todays_date = format(request->ops_date, "@MEDIUMDATE4YR;;Q") ;011
            set date_begin_string = concat(todays_date, " ",
;011              trim(ops_params->qual[2].param, 3), ":00.00")
;012              trim(ops_params->qual[2].param, 3), captions->beg_tm)    ;011
              trim(paramarray[2], 3), captions->beg_tm)                ;012
            set date_end_string = concat(todays_date, " ",
;011              trim(ops_params->qual[3].param, 3), ":59.99")
;012               trim(ops_params->qual[3].param, 3), captions->end_tm)    ;011
              trim(paramarray[3], 3), captions->end_tm)                ;012
            set request->dt_tm_begin = cnvtdatetime(date_begin_string)
            if (request->dt_tm_begin > request->ops_date)
               set request->dt_tm_begin = datetimeadd(request->dt_tm_begin, -1)
            endif
            set request->dt_tm_end = cnvtdatetime(date_end_string)
            if (request->dt_tm_end > request->ops_date)
               set request->dt_tm_end = datetimeadd(request->dt_tm_end, -1)
            endif
            if (request->dt_tm_begin > request->dt_tm_end)
               set request->dt_tm_begin = datetimeadd(request->dt_tm_begin, -1)
            endif
            if (trim(paramarray[4], 3) = "0"                           ;012
            or  trim(paramarray[4], 3) = "1")                          ;012
               set sub_sort_flag =                                     ;012
                 cnvtint(trim(paramarray[4], 3))                       ;012
            endif                                                      ;012

            set request->letter_size_ind = cnvtint(trim(paramarray[5]))
            if(LOCALE != localeObjectName)  
            set request->letter_size_ind = 0
          endif
         endif

      /***********************************************************************
      * Determine if the service resource passed is a section, subsection,   *
      * or test site.  Note: Service resource of 0.0 means print activity    *
      * for all testing sites.                                               *
      ***********************************************************************/
         call InitResourceSecurity(request->resource_sec_ind)          ;016

         if (request->service_resource_cd = 0.0)
            set serv_res_level_flag = 3  ;* All Sections
         else
            select into "nl:"
               cv.code_value
            from
               code_value cv
            where cv.code_value = request->service_resource_cd
            detail
               case (cv.cdf_meaning)
                 of "SECTION":
                    serv_res_level_flag = 2
                 of "SUBSECTION":
                    serv_res_level_flag = 1
                 else
                    serv_res_level_flag = 0
                    stat = alterlist(test_site->qual, 1)
                    test_site->qual[1].service_resource_cd =
                           request->service_resource_cd
                    nbr_ts = 1
               endcase
            with
              nocounter

         if (curqual = 0)
               set reply->status_data->status = "Z"
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Load the testing sites associated with the service resource passed in*
      * based on its resource level.                                         *
      ***********************************************************************/
         if (serv_res_level_flag != 0)
            if (serv_res_level_flag = 1)  ;* Process subsection
               select into "nl:"
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group subsect
               where subsect.parent_service_resource_cd =
                                          request->service_resource_cd
                 and subsect.resource_group_type_cd = serv_res_subsection_cd
                 and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                      nbr_ts = nbr_ts + 1
                      stat = alterlist(test_site->qual, nbr_ts)
                      test_site->qual[nbr_ts].service_resource_cd =
                            subsect.parent_service_resource_cd
                  endif                                                         ;016
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.child_service_resource_cd
                  endif                                                         ;016
               with
                  nocounter
            elseif (serv_res_level_flag = 2)  ;* Process section
               select into "nl:"
                  sect.parent_service_resource_cd,
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group sect,
                  resource_group subsect
               plan sect    where sect.resource_group_type_cd =
                                            serv_res_section_cd
                              and sect.parent_service_resource_cd =
                                            request->service_resource_cd
                              and sect.root_service_resource_cd+0 = 0.0
               join subsect where subsect.parent_service_resource_cd =
                                            sect.child_service_resource_cd
                              and subsect.resource_group_type_cd =
                                            serv_res_subsection_cd
                              and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.parent_service_resource_cd
                  endif                                                         ;016
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                      nbr_ts = nbr_ts + 1
                      stat = alterlist(test_site->qual, nbr_ts)
                      test_site->qual[nbr_ts].service_resource_cd =
                        subsect.child_service_resource_cd
                  endif                                                         ;016
               with
                  nocounter
            elseif (serv_res_level_flag = 3)  ;* Process all sections
               ;* If no service resource was passed, load all test sites
               ;* under all sections.
               select into "nl:"
                  sect.parent_service_resource_cd,
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group sect,
                  resource_group subsect
               plan sect    where sect.resource_group_type_cd =
                                            serv_res_section_cd
                              and sect.root_service_resource_cd = 0.0
               join subsect where subsect.parent_service_resource_cd =
                                            sect.child_service_resource_cd
                              and subsect.resource_group_type_cd =
                                            serv_res_subsection_cd
                              and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.parent_service_resource_cd
                  endif                                                         ;016
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.child_service_resource_cd
                  endif                                                         ;016
               with
                  nocounter
            endif

            if (nbr_ts = 0)
               set reply->status_data->status = "Z"
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Load the institution, department, section, subsection,and test site  *
      * names associated with each testing site.                             *
      ***********************************************************************/
         select into "nl:"
            d1.seq,
;009            cv_ts.display,
            testsite_disp = trim(substring(1, 40, UAR_GET_CODE_DISPLAY(test_site->qual[d1.seq].service_resource_cd)), 3), ;009
            d2.seq,
            subsect_exists = decode(subsect.seq, "Y", "N"),
            subsect.parent_service_resource_cd,
            subsect.child_service_resource_cd,
;009            cv_subsect.display,
            d3.seq,
            sect_exists = decode(sect.seq, "Y", "N"),
            sect.parent_service_resource_cd,
            sect.child_service_resource_cd,
;009            cv_sect.display,
            d4.seq,
            dept_exists = decode(dept.seq, "Y", "N"),
            dept.parent_service_resource_cd,
            dept.child_service_resource_cd,
;009            cv_dept.display,
            d5.seq,
            inst_exists = decode(inst.seq, "Y", "N"),
            inst.parent_service_resource_cd,
            inst.child_service_resource_cd
;009            cv_inst.display

         from
            (dummyt d1 with seq = value(nbr_ts)),
;009            code_value cv_ts,
            (dummyt d2 with seq = 1),
            resource_group subsect,
;009            code_value cv_subsect,
            (dummyt d3 with seq = 1),
            resource_group sect,
;009            code_value cv_sect,
            (dummyt d4 with seq = 1),
            resource_group dept,
;009            code_value cv_dept,
            (dummyt d5 with seq = 1),
            resource_group inst
;009            code_value cv_inst

         plan d1
;009         join cv_ts   where cv_ts.code_value =
;009                               test_site->qual[d1.seq].service_resource_cd
         join d2      where d2.seq = 1
;003         join subsect where subsect.child_service_resource_cd =
;003                               test_site->qual[d1.seq].service_resource_cd
         join subsect where (subsect.child_service_resource_cd =        ;003
                           test_site->qual[d1.seq].service_resource_cd  ;003
                          or subsect.parent_service_resource_cd =       ;003
                           test_site->qual[d1.seq].service_resource_cd) ;003
                        and subsect.resource_group_type_cd =
                               serv_res_subsection_cd
                        and subsect.root_service_resource_cd = 0.0
                        and subsect.active_ind = 1
                        and cnvtdatetime(curdate, curtime) between subsect.beg_effective_dt_tm and 
                            subsect.end_effective_dt_tm
;009         join cv_subsect where cv_subsect.code_value =
;009                               subsect.parent_service_resource_cd
         join d3      where d3.seq = 1
         join sect    where sect.child_service_resource_cd =
                               subsect.parent_service_resource_cd
                        and sect.resource_group_type_cd =
                               serv_res_section_cd
                        and sect.root_service_resource_cd = 0.0
;009         join cv_sect where cv_sect.code_value = sect.parent_service_resource_cd
         join d4      where d4.seq = 1
         join dept    where dept.child_service_resource_cd =
                               sect.parent_service_resource_cd
                        and dept.resource_group_type_cd =
                               serv_res_department_cd
                        and dept.root_service_resource_cd = 0.0
;009         join cv_dept where cv_dept.code_value = dept.parent_service_resource_cd
         join d5      where d5.seq = 1
         join inst    where inst.child_service_resource_cd =
                               dept.parent_service_resource_cd
                        and inst.resource_group_type_cd =
                               serv_res_institution_cd
                        and inst.root_service_resource_cd = 0.0
;009         join cv_inst where cv_inst.code_value = inst.parent_service_resource_cd

         detail
;012            test_site->qual[d1.seq].serv_res_hier_seq = d1.seq
            if (test_site->qual[d1.seq].service_resource_cd > 0.0)                              ;009
;009            if (cv_ts.code_value > 0.0)
;009               test_site->qual[d1.seq].ts_cd = cv_ts.code_value
               test_site->qual[d1.seq].ts_cd = test_site->qual[d1.seq].service_resource_cd      ;009
               test_site->qual[d1.seq].ts_disp = testsite_disp                                  ;009
;009               test_site->qual[d1.seq].ts_disp =
;009                 trim(substring(1, 40, cv_ts.display), 3)
            else
               test_site->qual[d1.seq].ts_cd = 0.0
;011               test_site->qual[d1.seq].ts_disp = "Not Found"
	       test_site->qual[d1.seq].ts_disp = captions->not_fnd     ;011
            endif
            if (subsect_exists = "Y"
            and subsect.parent_service_resource_cd > 0.0)				;009
;009            and cv_subsect.code_value > 0.0)
;009               test_site->qual[d1.seq].subsect_cd = cv_subsect.code_value
               test_site->qual[d1.seq].subsect_cd =  subsect.parent_service_resource_cd
               test_site->qual[d1.seq].subsect_disp =
    		   trim(substring(1,40,UAR_GET_CODE_DISPLAY(subsect.parent_service_resource_cd)),3) ;009
;009                 trim(substring(1, 40, cv_subsect.display), 3)
            else
               test_site->qual[d1.seq].subsect_cd = 0.0
;011               test_site->qual[d1.seq].subsect_disp = "Not Found"
               test_site->qual[d1.seq].subsect_disp = captions->not_fnd ;011
            endif
            if (sect_exists = "Y"
	    and sect.parent_service_resource_cd > 0.0)					;009
;009            and cv_sect.code_value > 0.0)
;009               test_site->qual[d1.seq].sect_cd = cv_sect.code_value
               test_site->qual[d1.seq].sect_cd = sect.parent_service_resource_cd	;009
               test_site->qual[d1.seq].sect_disp =
		     trim(substring(1,40, UAR_GET_CODE_DISPLAY(sect.parent_service_resource_cd)),3) ;009
;009                 trim(substring(1, 40, cv_sect.display), 3)
            else
               test_site->qual[d1.seq].sect_cd = 0.0
;011               test_site->qual[d1.seq].sect_disp = "Not Found"
               test_site->qual[d1.seq].sect_disp = captions->not_fnd   ;011
            endif
            if (dept_exists = "Y"
	    and dept.parent_service_resource_cd > 0.0)					;009
;009            and cv_dept.code_value > 0.0)
;009               test_site->qual[d1.seq].dept_cd = cv_dept.code_value
               test_site->qual[d1.seq].dept_cd = dept.parent_service_resource_cd	;009
               test_site->qual[d1.seq].dept_disp =
		     trim(substring(1,40, UAR_GET_CODE_DISPLAY(dept.parent_service_resource_cd)), 3)	;009
;009                 trim(substring(1, 40, cv_dept.display), 3)
            else
               test_site->qual[d1.seq].dept_cd = 0.0
;011               test_site->qual[d1.seq].dept_disp = "Not Found"
               test_site->qual[d1.seq].dept_disp = captions->not_fnd   ;011
            endif
            if (inst_exists = "Y"
;009            and cv_inst.code_value > 0.0)
            and inst.parent_service_resource_cd > 0.0)					;009
               test_site->qual[d1.seq].inst_cd = inst.parent_service_resource_cd	;009
;009               test_site->qual[d1.seq].inst_cd = cv_inst.code_value
               test_site->qual[d1.seq].inst_disp =
		     	   trim(substring(1,40,UAR_GET_CODE_DESCRIPTION(inst.parent_service_resource_cd)),3)      ;015
;009                 trim(substring(1, 40, cv_inst.display), 3)
            else
               test_site->qual[d1.seq].inst_cd = 0.0
;011               test_site->qual[d1.seq].inst_disp = "Not Found"
               test_site->qual[d1.seq].inst_disp = captions->not_fnd   ;011
            endif
         with
            nocounter,
            outerjoin = d2,
            maxread(subsect, 1),
            outerjoin = d3,
            maxread(sect, 1),
            outerjoin = d4,
            maxread(dept, 1),
            outerjoin = d5,
            maxread(inst, 1)

/***Debug***
         call echo("test_site array dump", 1)
         for (x = 1 to nbr_ts)
            call echo(test_site->qual[x].service_resource_cd, 1)
            call echo(build("   Institution = ", test_site->qual[x].inst_disp))
            call echo(build("   Department = ", test_site->qual[x].dept_disp))
            call echo(build("   Section = ", test_site->qual[x].sect_disp))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_disp))
            call echo(build("   Test Site = ", test_site->qual[x].ts_disp))
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Sort test_site array in alphabetical order.                          *
      ***********************************************************************/
         for (cnt = 1 to (nbr_ts - 1))
            for (cnt2 = cnt to nbr_ts)
               set ts_sort->key1 = concat(
                substring(1, 40, cnvtupper(test_site->qual[cnt].inst_disp)),
                format(test_site->qual[cnt].inst_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt].dept_disp)),
                format(test_site->qual[cnt].dept_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt].sect_disp)),
                format(test_site->qual[cnt].sect_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt].subsect_disp)),
                format(test_site->qual[cnt].subsect_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt].ts_disp)),
                format(test_site->qual[cnt].ts_cd,"###############.##;p0;f"))
               set ts_sort->key2 = concat(
                substring(1, 40, cnvtupper(test_site->qual[cnt2].inst_disp)),
                format(test_site->qual[cnt2].inst_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt2].dept_disp)),
                format(test_site->qual[cnt2].dept_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt2].sect_disp)),
                format(test_site->qual[cnt2].sect_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt2].subsect_disp)),
                format(test_site->qual[cnt2].subsect_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt2].ts_disp)),
                format(test_site->qual[cnt2].ts_cd,"###############.##;p0;f"))
                if (ts_sort->key1 > ts_sort->key2)
                  set ts_sort->service_resource_cd =
                    test_site->qual[cnt].service_resource_cd
                  set ts_sort->inst_cd = test_site->qual[cnt].inst_cd
                  set ts_sort->inst_disp = test_site->qual[cnt].inst_disp
                  set ts_sort->dept_cd = test_site->qual[cnt].dept_cd
                  set ts_sort->dept_disp = test_site->qual[cnt].dept_disp
                  set ts_sort->sect_cd = test_site->qual[cnt].sect_cd
                  set ts_sort->sect_disp = test_site->qual[cnt].sect_disp
                  set ts_sort->subsect_cd = test_site->qual[cnt].subsect_cd
                  set ts_sort->subsect_disp = test_site->qual[cnt].subsect_disp
                  set ts_sort->ts_cd = test_site->qual[cnt].ts_cd
                  set ts_sort->ts_disp = test_site->qual[cnt].ts_disp
                  set test_site->qual[cnt].service_resource_cd =
                    test_site->qual[cnt2].service_resource_cd
                  set test_site->qual[cnt].inst_cd =
                    test_site->qual[cnt2].inst_cd
                  set test_site->qual[cnt].inst_disp =
                    test_site->qual[cnt2].inst_disp
                  set test_site->qual[cnt].dept_cd =
                    test_site->qual[cnt2].dept_cd
                  set test_site->qual[cnt].dept_disp =
                    test_site->qual[cnt2].dept_disp
                  set test_site->qual[cnt].sect_cd =
                    test_site->qual[cnt2].sect_cd
                  set test_site->qual[cnt].sect_disp =
                    test_site->qual[cnt2].sect_disp
                  set test_site->qual[cnt].subsect_cd =
                    test_site->qual[cnt2].subsect_cd
                  set test_site->qual[cnt].subsect_disp =
                    test_site->qual[cnt2].subsect_disp
                  set test_site->qual[cnt].ts_cd =
                    test_site->qual[cnt2].ts_cd
                  set test_site->qual[cnt].ts_disp =
                    test_site->qual[cnt2].ts_disp
;012                  set test_site->qual[cnt].serv_res_hier_seq = cnt
                  set test_site->qual[cnt2].service_resource_cd =
                    ts_sort->service_resource_cd
                  set test_site->qual[cnt2].inst_cd =
                    ts_sort->inst_cd
                  set test_site->qual[cnt2].inst_disp =
                    ts_sort->inst_disp
                  set test_site->qual[cnt2].dept_cd =
                    ts_sort->dept_cd
                  set test_site->qual[cnt2].dept_disp =
                    ts_sort->dept_disp
                  set test_site->qual[cnt2].sect_cd =
                    ts_sort->sect_cd
                  set test_site->qual[cnt2].sect_disp =
                    ts_sort->sect_disp
                  set test_site->qual[cnt2].subsect_cd =
                    ts_sort->subsect_cd
                  set test_site->qual[cnt2].subsect_disp =
                    ts_sort->subsect_disp
                  set test_site->qual[cnt2].ts_cd =
                    ts_sort->ts_cd
                  set test_site->qual[cnt2].ts_disp =
                    ts_sort->ts_disp
;012                  set test_site->qual[cnt2].serv_res_hier_seq = cnt2
               endif
            endfor
         endfor

      /***********************************************************************
      * Set the sort sequence values                                         *
      ***********************************************************************/
         set hier_seq = 0                                              ;012
         for (cnt = 1 to nbr_ts)                                       ;012
            set inst_break_ind = 0                                     ;012
            set dept_break_ind = 0                                     ;012
            set sect_break_ind = 0                                     ;012
            set subsect_break_ind = 0                                  ;012
            set ts_break_ind = 0                                       ;012
                                                                       ;012
            if (cnt = 1)                                               ;012
               set inst_break_ind = 1                                  ;012
               set dept_break_ind = 1                                  ;012
               set sect_break_ind = 1                                  ;012
               set subsect_break_ind = 1                               ;012
               set ts_break_ind = 1                                    ;012
            else                                                       ;012
               if (test_site->qual[cnt].inst_cd !=                     ;012
                             test_site->qual[cnt - 1].inst_cd)         ;012
                  set inst_break_ind = 1                               ;012
                  set dept_break_ind = 1                               ;012
                  set sect_break_ind = 1                               ;012
                  set subsect_break_ind = 1                            ;012
                  set ts_break_ind = 1                                 ;012
               endif                                                   ;012
               if (test_site->qual[cnt].dept_cd !=                     ;012
                             test_site->qual[cnt - 1].dept_cd)         ;012
                  set dept_break_ind = 1                               ;012
                  set sect_break_ind = 1                               ;012
                  set subsect_break_ind = 1                            ;012
                  set ts_break_ind = 1                                 ;012
               endif                                                   ;012
               if (test_site->qual[cnt].sect_cd !=                     ;012
                             test_site->qual[cnt - 1].sect_cd)         ;012
                  set sect_break_ind = 1                               ;012
                  set subsect_break_ind = 1                            ;012
                  set ts_break_ind = 1                                 ;012
               endif                                                   ;012
               if (test_site->qual[cnt].subsect_cd !=                  ;012
                             test_site->qual[cnt - 1].subsect_cd)      ;012
                  set subsect_break_ind = 1                            ;012
                  set ts_break_ind = 1                                 ;012
               endif                                                   ;012
               if (test_site->qual[cnt].ts_cd !=                       ;012
                             test_site->qual[cnt - 1].ts_cd)           ;012
                  set ts_break_ind = 1                                 ;012
               endif                                                   ;012
            endif                                                      ;012
                                                                       ;012
            if (inst_break_ind = 1                                     ;012
            or  dept_break_ind = 1                                     ;012
            or  sect_break_ind = 1)                                    ;012
               set hier_seq = hier_seq + 1                             ;012
            elseif (subsect_break_ind = 1)                             ;012
               if (sub_sort_flag = 0                                   ;012
               or (sub_sort_flag = 1 and serv_res_level_flag in (0,1)));012
                  set hier_seq = hier_seq + 1                          ;012
               endif                                                   ;012
            elseif (ts_break_ind = 1)                                  ;012
               if (sub_sort_flag = 0                                   ;012
               or (sub_sort_flag = 1 and serv_res_level_flag = 0))     ;012
                  set hier_seq = hier_seq + 1                          ;012
               endif                                                   ;012
            endif                                                      ;012
                                                                       ;012
            set test_site->qual[cnt].serv_res_hier_seq = hier_seq      ;012
         endfor                                                        ;012

/***Debug***
         call echo("Sorted test_site array dump", 1)
         for (x = 1 to nbr_ts)
            call echo(build("Sequence = ",test_site->qual[x].serv_res_hier_seq))
            call echo(test_site->qual[x].service_resource_cd, 1)
            call echo(build("   Institution = ", test_site->qual[x].inst_disp))
            call echo(build("   Institution = ", test_site->qual[x].inst_cd))
            call echo(build("   Department = ", test_site->qual[x].dept_disp))
            call echo(build("   Department = ", test_site->qual[x].dept_cd))
            call echo(build("   Section = ", test_site->qual[x].sect_disp))
            call echo(build("   Section = ", test_site->qual[x].sect_cd))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_disp))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_cd))
            call echo(build("   Test Site = ", test_site->qual[x].ts_disp))
            call echo(build("   Test Site = ", test_site->qual[x].ts_cd))
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Load the perform_result records that qualify for the report.         *
      ***********************************************************************/
         select into "nl:"
            re.event_dt_tm,
            re.event_type_cd,
            re2.event_sequence,                                        ;008
            pr_c.perform_result_id,                                    ;006
            pr_c.service_resource_cd,                                  ;006
            pr.perform_result_id,
            pr.service_resource_cd,
            r.result_id,
            o.order_id,
            o.activity_type_cd,
            d_at.seq,
            dta.mnemonic,
            dta.sci_notation_ind,
            c_exists = decode(c.seq, "Y", "N"),
;011            drawn_dttm = format(c.drawn_dt_tm, "ddmmmyy hhmm;;d"),
            drawn_dttm = format(c.drawn_dt_tm, "@DATETIMECONDENSED;;Q"), ;011
            drawn_dttm_locale = format(c.drawn_dt_tm, "YYYY/MM/DD HHMM;;Q"),
            ts_disp = substring(1,40,test_site->qual[d_ts.seq].ts_disp),
            ca.accession                                               ;005

         from
            result_event re,
            perform_result pr_c,                                       ;006
            perform_result pr,
            result_event re2,                                          ;008
            (dummyt d_ts with seq = value(nbr_ts)),
            result r,
            orders o,
            (dummyt d_at with seq = value(nbr_actvty_types)),
            discrete_task_assay dta,
            profile_task_r ptr,
            (dummyt d1 with seq = 1),
            container c,
            container_accession ca

         plan re   where re.event_dt_tm between cnvtdatetime(request->dt_tm_begin)
                                            and cnvtdatetime(request->dt_tm_end)
                     and re.event_type_cd in (corrected_cd)            ;001
         join pr_c where pr_c.perform_result_id = re.perform_result_id ;006
         join d_ts where test_site->qual[d_ts.seq].service_resource_cd = ;006
                           pr_c.service_resource_cd                    ;006
;001...                     and re.event_type_cd in (corrected_cd,
;001...                                              verified_cd)
;001...         join pr   where pr.perform_result_id = re.perform_result_id
         join pr   where pr.result_id = re.result_id                   ;001
                     and pr.result_status_cd in ( corrected_cd,
                                                  oldcorrected_cd,
                                                  oldautoverified_cd,  ;002
                                                  oldverified_cd )
         join re2  where re2.result_id = pr.result_id                  ;008
                     and re2.perform_result_id = pr.perform_result_id  ;008
                     and ((re2.event_type_cd = corrected_cd            ;008
                       and pr.result_status_cd = corrected_cd)         ;008
                     or   (re2.event_type_cd = corrected_cd            ;008
                       and pr.result_status_cd = oldcorrected_cd)      ;008
                     or   (re2.event_type_cd = verified_cd             ;008
                       and pr.result_status_cd = oldverified_cd)       ;008
                     or   (re2.event_type_cd = autoverified_cd         ;008
                       and pr.result_status_cd = oldautoverified_cd))  ;008
;006         join d_ts where test_site->qual[d_ts.seq].service_resource_cd =
;006                           pr.service_resource_cd
         join r    where r.result_id = pr.result_id
         join o    where o.order_id = r.order_id
         join d_at where actvty_type->qual[d_at.seq].activity_type_cd =   ;013
                           o.activity_type_cd
         join dta  where dta.task_assay_cd = r.task_assay_cd
         join ptr  where ptr.catalog_cd = o.catalog_cd
                     and ptr.task_assay_cd = dta.task_assay_cd
         join d1   where d1.seq = 1
         join c    where c.container_id = pr.container_id
         join ca   where ca.container_id = pr.container_id

         order by
            o.person_id,
            ca.accession,
            o.catalog_cd,
            o.order_id,
            ptr.sequence,
            ts_disp,
            pr.result_id,
            pr.perform_result_id,
            re.event_sequence

         head report
            nbr_prs = 0

         head pr.result_id
            row + 0
         head pr.perform_result_id
            nbr_prs = nbr_prs + 1
            if (mod(nbr_prs, 50) = 1)
               stat = alterlist(perf_results->qual, nbr_prs + 50)
            endif
            perf_results->qual[nbr_prs].result_id =
              pr.result_id
            perf_results->qual[nbr_prs].perform_result_id =
              pr.perform_result_id
            perf_results->qual[nbr_prs].event_sequence =               ;001
              re2.event_sequence                                       ;008
;008              re.event_sequence                                        ;001
            perf_results->qual[nbr_prs].service_resource_cd =
;006              pr.service_resource_cd
              pr_c.service_resource_cd                                 ;006
            perf_results->qual[nbr_prs].task_assay_cd =
              r.task_assay_cd
            perf_results->qual[nbr_prs].detail_mnemonic =
              dta.mnemonic
            perf_results->qual[nbr_prs].sci_notation_ind =
              dta.sci_notation_ind
            perf_results->qual[nbr_prs].order_id =
              r.order_id
            perf_results->qual[nbr_prs].catalog_cd =
              r.catalog_cd
            if (c_exists = "Y")
               perf_results->qual[nbr_prs].drawn_dt_tm = drawn_dttm
               perf_results->qual[nbr_prs].drawn_dt_tm_locale = drawn_dttm_locale
;005               perf_results->qual[nbr_prs].accession = ca.accession
               perf_results->qual[nbr_prs].accession = uar_fmt_accession(ca.accession, size(ca.accession,1))            ;005
            else
               perf_results->qual[nbr_prs].drawn_dt_tm = ""
               perf_results->qual[nbr_prs].drawn_dt_tm_locale = ""
               perf_results->qual[nbr_prs].accession = ""
            endif
            perf_results->qual[nbr_prs].result_type_cd = pr.result_type_cd
            perf_results->qual[nbr_prs].data_map_ind = 0
            perf_results->qual[nbr_prs].max_digits = 0
            perf_results->qual[nbr_prs].min_decimal_places = 0
            perf_results->qual[nbr_prs].min_digits = 0
            perf_results->qual[nbr_prs].long_text_id = pr.long_text_id
            perf_results->qual[nbr_prs].long_text = " "
            perf_results->qual[nbr_prs].inst_cd =
              test_site->qual[d_ts.seq].inst_cd
            perf_results->qual[nbr_prs].inst_disp =
              test_site->qual[d_ts.seq].inst_disp
            perf_results->qual[nbr_prs].dept_cd =
              test_site->qual[d_ts.seq].dept_cd
            perf_results->qual[nbr_prs].dept_disp =
              test_site->qual[d_ts.seq].dept_disp
            perf_results->qual[nbr_prs].sect_cd =
              test_site->qual[d_ts.seq].sect_cd
            perf_results->qual[nbr_prs].sect_disp =
              test_site->qual[d_ts.seq].sect_disp
            perf_results->qual[nbr_prs].subsect_cd =
              test_site->qual[d_ts.seq].subsect_cd
            perf_results->qual[nbr_prs].subsect_disp =
              test_site->qual[d_ts.seq].subsect_disp
            perf_results->qual[nbr_prs].ts_cd =
              test_site->qual[d_ts.seq].ts_cd
            perf_results->qual[nbr_prs].ts_disp =
              test_site->qual[d_ts.seq].ts_disp
            perf_results->qual[nbr_prs].serv_res_hier_seq =
              test_site->qual[d_ts.seq].serv_res_hier_seq

         detail
            row+0

         foot report
            stat = alterlist(perf_results->qual, nbr_prs)

         with
            nocounter,
            outerjoin = d1

/***Debug***
         call echo(build("nbr_prs = ", nbr_prs))
         if (nbr_prs > 0)
            call echo("      result_id   perform_result_id     order_id    task_assay_cd", 1)
            for (x = 1 to nbr_prs)
               call echo(x, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].result_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].perform_result_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].order_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].task_assay_cd, 1)
            endfor
            call echo(" ", 1)
         endif

***Debug***/

      /***********************************************************************
      * Load the data_map records for numeric results.                       *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            d1.seq,
;004            data_map_resource_exists = decode(dm.seq, "Y", "N"),
            data_map_exists = decode(dm.seq, "Y", "N"),                ;004
            dm.service_resource_cd,
            dm.task_assay_cd,
            dm.data_map_type_flag,
            dm.max_digits,
            dm.min_decimal_places,
            dm.min_digits,
            d_rg.seq,                                                  ;007
            rg_exists = decode(rg.seq, "Y", "N"),                      ;007
            rg.seq                                                     ;007
;004            d2.seq,
;004            data_map_group_exists = decode(dmg.seq, "Y", "N"),
;004            dmg.service_resource_cd,
;004            dmg.task_assay_cd,
;004            dmg.data_map_type_flag,
;004            dmg.max_digits,
;004            dmg.min_decimal_places,
;004            dmg.min_digits
;007            cv_dm.cdf_meaning                                          ;004

         from
            (dummyt d with seq = value(nbr_prs)),
            dummyt d1,
            data_map dm,
            (dummyt d_rg with seq = 1),                                ;007
            resource_group rg                                          ;007
;004            dummyt d2,
;004            data_map dmg
;007            code_value cv_dm                                           ;004

         plan d    where perf_results->qual[d.seq].result_type_cd in
                       (result_type_numeric_cd, result_type_calc_cd)
         join d1   where d1.seq = 1
;004         join dm   where dm.service_resource_cd = perf_results->qual[d.seq]
;004                       .service_resource_cd
;004                     and dm.task_assay_cd = perf_results->qual[d.seq]
         join dm   where dm.task_assay_cd = perf_results->qual[d.seq]  ;004
                       .task_assay_cd
                     and dm.data_map_type_flag = 0
                     and dm.active_ind = 1
         join d_rg where d_rg.seq = 1                                  ;007
         join rg   where rg.parent_service_resource_cd =               ;007
                           dm.service_resource_cd                      ;007
                     and rg.child_service_resource_cd =                ;007
                           perf_results->qual[d.seq].service_resource_cd ;007
                     and rg.resource_group_type_cd =                   ;007
                           serv_res_subsection_cd                      ;007
                     and rg.root_service_resource_cd = 0.0             ;007
;004         join d2   where d2.seq = 1
;004         join dmg  where dmg.service_resource_cd = 0.0
;004                     and dmg.task_assay_cd = perf_results->qual[d.seq]
;004                       .task_assay_cd
;004                     and dmg.data_map_type_flag = 0
;004                     and dmg.active_ind = 1
;007         join cv_dm  where cv_dm.code_value = dm.service_resource_cd   ;004

         head report
            cnt = 0
            data_map_level = 0                                         ;004

         head d.seq
            cnt = d.seq
            data_map_level = 0                                         ;004

         detail
;004            if (data_map_resource_exists = "Y"
;004            and perf_results->qual[cnt].data_map_ind = 0)
;004               perf_results->qual[cnt].data_map_ind = 1
;004               perf_results->qual[cnt].max_digits = dm.max_digits
;004               perf_results->qual[cnt].min_decimal_places =
;004                 dm.min_decimal_places
;004               perf_results->qual[cnt].min_digits = dm.min_digits
;004            elseif (data_map_group_exists = "Y"
;004            and perf_results->qual[cnt].data_map_ind = 0)
;004               perf_results->qual[cnt].data_map_ind = 1
;004               perf_results->qual[cnt].max_digits = dmg.max_digits
;004               perf_results->qual[cnt].min_decimal_places =
;004                 dmg.min_decimal_places
;004               perf_results->qual[cnt].min_digits = dmg.min_digits
;004            endif
            if (data_map_exists = "Y")                                 ;004
               ;* Check for exact match on data map                    ;004
               if (data_map_level <= 2                                 ;004
               and dm.service_resource_cd > 0.0                        ;004
               and dm.service_resource_cd = perf_results->qual[cnt]    ;004
                 .service_resource_cd)                                 ;004
                  data_map_level = 3                                   ;004
                  perf_results->qual[cnt].data_map_ind = 1             ;004
                  perf_results->qual[cnt].max_digits = dm.max_digits   ;004
                  perf_results->qual[cnt].min_digits = dm.min_digits   ;004
                  perf_results->qual[cnt].min_decimal_places =         ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
               ;* Check for subsection level data map                  ;004
               if (data_map_level <= 1                                 ;004
               and dm.service_resource_cd > 0.0                        ;004
               and rg_exists = "Y"                                     ;007
               and rg.parent_service_resource_cd =                     ;007
                        dm.service_resource_cd                         ;007
               and rg.child_service_resource_cd =                      ;007
                        perf_results->qual[cnt].service_resource_cd)   ;007
;007               and cv_dm.cdf_meaning = SERV_RES_SUBSECTION_CDF)        ;004
                  data_map_level = 2                                   ;004
                  perf_results->qual[cnt].data_map_ind = 1             ;004
                  perf_results->qual[cnt].max_digits = dm.max_digits   ;004
                  perf_results->qual[cnt].min_digits = dm.min_digits   ;004
                  perf_results->qual[cnt].min_decimal_places =         ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
               ;* Check for default all resources level data map       ;004
               if (data_map_level = 0                                  ;004
               and dm.service_resource_cd = 0.0)                       ;004
                  data_map_level = 1                                   ;004
                  perf_results->qual[cnt].data_map_ind = 1             ;004
                  perf_results->qual[cnt].max_digits = dm.max_digits   ;004
                  perf_results->qual[cnt].min_digits = dm.min_digits   ;004
                  perf_results->qual[cnt].min_decimal_places =         ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
            endif                                                      ;004

         foot d.seq
            ;* If no data_map rec found, set default map values
            if (perf_results->qual[cnt].data_map_ind = 0)
               perf_results->qual[cnt].data_map_ind = 1
               perf_results->qual[cnt].max_digits = 8
               perf_results->qual[cnt].min_decimal_places = 0
               perf_results->qual[cnt].min_digits = 1
            endif

         with
            nocounter,
            outerjoin = d1,
            dontcare = dm,
            outerjoin = d_rg,                                          ;007
            dontcare = rg                                              ;007
;007            dontcare = cv_dm                                           ;004
;004            outerjoin = d2,
;004            dontcare = dmg

      /***********************************************************************
      * Load the long_text records for textual results.                      *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            lt.long_text_id

         from
            (dummyt d with seq = value(nbr_prs)),
            long_text lt

         plan d
         join lt   where lt.long_text_id =
                       perf_results->qual[d.seq].long_text_id

         head report
%i cclsource:glb_rpt_macros.inc
            cnt = 0

         detail
            cnt = d.seq
            if (lt.long_text_id > 0.0)
               arg_text_in = fillstring(30000, " ")
               arg_text_in = trim(lt.long_text)
               rtf_to_ascii
               ;call echo(text_out, 1)
               perf_results->qual[cnt].long_text = trim(text_out)
            endif

         with
            nocounter


      /***********************************************************************
      * Load the most recent chartable and non-chartable order comments.     *
      ***********************************************************************/
         ;* Initialize order comment array
         select into "nl:"
            d.seq,
            ord_id = perf_results->qual[d.seq].order_id

         from
            (dummyt d with seq = value(nbr_prs))

         plan d

         order by
            ord_id

         head ord_id
            nbr_o_comments = nbr_o_comments + 1
            if (mod(nbr_o_comments, 20) = 1 and nbr_o_comments > 20)
               stat = alter(o_comments->qual, nbr_o_comments + 20)
            endif
            o_comments->qual[nbr_o_comments].order_id = ord_id
            o_comments->qual[nbr_o_comments].comment_exists = "N"
            o_comments->qual[nbr_o_comments].note_exists = "N"

         detail
            row+0

         with
            nocounter

/***Debug***
         call echo(build("nbr_o_comments = ", nbr_o_comments))
         if (nbr_o_comments > 0)
            call echo("o_comments array dump", 1)
            for (x = 1 to nbr_o_comments)
               call echo(build("Order id = ", o_comments->qual[x].order_id))
            endfor
            call echo(" ", 1)
         endif
***Debug***/

         ;* Load order comments, if any exists
         select into "nl:"
            d1.seq,
            d2.seq,
            oc_exists = decode(oc.seq, "Y", "N"),
            oc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_o_comments)),
            (dummyt d2 with seq = 1),
            order_comment oc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join oc where oc.order_id = o_comments->qual[d1.seq].order_id
                   and oc.comment_type_cd = order_comment_cd
         join lt where lt.long_text_id = oc.long_text_id

         order by
            d1.seq,
            oc.action_sequence desc

         head d1.seq
            if (oc_exists = "Y")
               o_comments->qual[d1.seq].comment_exists = "Y"
               o_comments->qual[d1.seq].comment_text = lt.long_text
            endif

         detail
            row+0

         with
            nocounter,
            outerjoin = d2

         ;* Load order notes, if any exists
         select into "nl:"
            d1.seq,
            d2.seq,
            oc_exists = decode(oc.seq, "Y", "N"),
            oc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_o_comments)),
            (dummyt d2 with seq = 1),
            order_comment oc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join oc where oc.order_id = o_comments->qual[d1.seq].order_id
                   and oc.comment_type_cd = order_note_cd
         join lt where lt.long_text_id = oc.long_text_id

         order by
            d1.seq,
            oc.action_sequence desc

         head d1.seq
            if (oc_exists = "Y")
               o_comments->qual[d1.seq].note_exists = "Y"
               o_comments->qual[d1.seq].note_text = lt.long_text
            endif

         detail
            row+0

         with
            nocounter,
            outerjoin = d2


      /***********************************************************************
      * Load the most recent chartable and non-chartable result comments.    *
      ***********************************************************************/
         set stat = alter(r_comments->qual, nbr_prs)
         ;* Load result comments
         select into "nl:"
            d1.seq,
            d2.seq,
            rc_exists = decode(rc.seq, "Y", "N"),
            rc.action_sequence

         from
            (dummyt d1 with seq = value(nbr_prs)),
            (dummyt d2 with seq = 1),
            result_comment rc

         plan d1
         join d2 where d2.seq = 1
         join rc where rc.result_id = perf_results->qual[d1.seq].result_id
                   and rc.comment_type_cd = result_comment_cd

         order by
            d1.seq,
            rc.action_sequence desc

         head d1.seq
            r_comments->qual[d1.seq].result_id =
              perf_results->qual[d1.seq].result_id

            if (rc_exists = "Y")
               r_comments->qual[d1.seq].comment_exists = "Y"
            else
               r_comments->qual[d1.seq].comment_exists = "N"
            endif
            r_comments->qual[d1.seq].note_exists = "N"

         detail
            row+0

         with
            nocounter,
            outerjoin = d2

         select into "nl:"													;015
            d1.seq,															;015
            rc.action_sequence,												;015
            lt.long_text_id													;015

         from																;015
            (dummyt d1 with seq = value(nbr_prs)),							;015
            result_comment rc,												;015
            long_text lt													;015

         plan d1 where r_comments->qual[d1.seq].comment_exists = "Y"		;015
         join rc where rc.result_id = r_comments->qual[d1.seq].result_id	;015
                   and rc.comment_type_cd = result_comment_cd				;015
         join lt where lt.long_text_id = rc.long_text_id					;015

         detail																;015
           r_comments->qual[d1.seq].comment_text = lt.long_text				;015

         with																;015
            nocounter														;015

         ;* Load result footnotes
         select into "nl:"
            d1.seq,
            d2.seq,
            rc_exists = decode(rc.seq, "Y", "N"),
            rc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_prs)),
            (dummyt d2 with seq = 1),
            result_comment rc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join rc where rc.result_id = perf_results->qual[d1.seq].result_id
                   and rc.comment_type_cd = result_note_cd
         join lt where lt.long_text_id = rc.long_text_id

         order by
            d1.seq,
            rc.action_sequence desc

         head d1.seq
            if (rc_exists = "Y")
               r_comments->qual[d1.seq].note_exists = "Y"
               r_comments->qual[d1.seq].note_text = lt.long_text
            endif

         detail
            row+0

         with
           nocounter,
           outerjoin = d2

         if (curqual = 0)
            go to Exit_Script
         endif

      /***********************************************************************
      * Print report                                                         *
      ***********************************************************************/
      #Print_Report
         set title_text = captions->corr_rpt                           ;011

         if(LOCALE = localeObjectName)
         set begin_dat = format(request->dt_tm_begin, "@DATECONDENSED;;Q") ;011
           set end_dat = format(request->dt_tm_end, "@DATECONDENSED;;Q") ;011
         else
           set begin_dat = format(request->dt_tm_begin, "YYYY/MM/DD;;Q") 
           set end_dat = format(request->dt_tm_end, "YYYY/MM/DD;;Q")  
         endif
         set begin_tm = format(request->dt_tm_begin, "@TIMENOSECONDS;;M") ;011

         set end_tm = format(request->dt_tm_end, "@TIMENOSECONDS;;M")  ;011

         set report_date_range =                                       ;011
           concat(begin_dat, " ", begin_tm, Captions->to_ , " ",       ;011
                  end_dat, " ", end_tm)                                ;011

         select into "nl:"
            p.username
         from prsnl p
         where p.person_id = reqinfo->updt_id
         detail
            username = trim(p.username)
         with nocounter
         
         execute cpm_create_file_name "GLB_CORR", "txt"
    
         if (cpm_cfn_info->status_data.status != "S")
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->operationname = "get"
           set reply->status_data->subeventstatus[1]->operationstatus = "F"
           set reply->status_data->subeventstatus[1]->targetobjectname = "filename"
           set reply->status_data->subeventstatus[1]->targetObjectValue = "Filename Retrieval Unsuccessful"
           go to exit_script
         endif
        
         set reply->file_name = cpm_cfn_info->file_name_path

         select into trim(reply->file_name)
            d_pr.seq,
            serv_res_hier = perf_results->qual[d_pr.seq].serv_res_hier_seq,

            detail_mne = if(request->letter_size_ind = 1)
                trim(nullterm(substring(1, 16, perf_results->qual[d_pr.seq].detail_mnemonic)))
            else
                trim(nullterm(substring(1, 11, perf_results->qual[d_pr.seq].detail_mnemonic)))
            endif,

            drawn_dttm = perf_results->qual[d_pr.seq].drawn_dt_tm,
            drawn_dttm_locale = perf_results->qual[d_pr.seq].drawn_dt_tm_locale,
            pr.perform_result_id,
            pr.result_status_cd,
            pr.numeric_raw_value,
            pr.dilution_factor,                                        ;001
            pr.result_value_numeric,                                   ;001
            alpha_result = trim(substring(1, 15, pr.result_value_alpha)),
            freetext_result = trim(substring(1, 14, pr.ascii_text)),
            code_value_result = trim(substring(1, 15, UAR_GET_CODE_DISPLAY(pr.result_code_set_cd))),
            date_result = format(pr.result_value_dt_tm, "@SHORTDATE;;Q"), ;011
            date_result_locale = format(pr.result_value_dt_tm, "YYYY/MM/DD;;Q"), 
            re.perform_result_id,
            re.event_sequence,
            re.event_dt_tm,
            re.event_type_cd,
            event_date = format(re.event_dt_tm, "@DATETIMECONDENSED;;Q"), ;011
            event_date_locale = format(re.event_dt_tm, "YYYY/MM/DD HHMM;;Q"),
            order_unique = build(o.catalog_cd, o.order_id),
            ord_mnem = trim(substring(1, 19, o.order_mnemonic)),
            person_unique = build(trim(p.name_full_formatted), p.person_id,e.encntr_id),
            p_name_full = trim(cnvtupper(p.name_full_formatted)),      ;012
            short_name = trim(substring(1, 21, p.name_full_formatted)),
            e.encntr_id,
      	    e.encntr_status_cd,    ;010
            e.loc_nurse_unit_cd,
            e.loc_room_cd,
            e.loc_bed_cd,
            e.reason_for_visit,                                        ;001
            d_oc.seq,
            ptr.sequence,
      	    org.org_name,           ;010
      	    org.organization_id,    ;010
            accn = perf_results->qual[d_pr.seq].accession,             ;005
            psex = substring(1, 7, UAR_GET_CODE_DISPLAY(p.sex_cd)),   ;009
      	    result_type_mean = trim(substring(1,15,UAR_GET_CODE_MEANING(pr.result_type_cd)),3), ;009
      	    qc_override = trim(substring(1,15,UAR_GET_CODE_MEANING(pr.qc_override_cd)),3),
            doctor_name = concat(captions->dr," ", substring(1,17,p_doc.name_full_formatted)),  ;011
            priority = substring(1, 10, UAR_GET_CODE_DISPLAY(ol.report_priority_cd)),    ;009
            testsite_disp = substring(1, 10, UAR_GET_CODE_DISPLAY(perf_results->qual[d_pr.seq].service_resource_cd)),
            tech_name = substring(1, 8, pl.username),                  ;001
            d_ea.seq,
            ea_exists = decode(ea.seq, "Y", "N"),
            pat_nbr = cnvtalias(ea.alias, ea.alias_pool_cd),           ;005
            nowtime = format(curtime, "@TIMENOSECONDS;;M"),            ;011
            nowdate = format(curdate, "@SHORTDATE4YR;;Q"),              ;011
            nowdate_locale = format(curdate,"YYYY/MM/DD;;Q")
         from
            (dummyt d_pr with seq = value(nbr_prs)),
            perform_result pr,
            result_event re,
            orders o,
            order_laboratory ol,
            person p,
            encounter e,
	          organization org,           ;010
            (dummyt d_oc with seq = value(nbr_o_comments)),
            profile_task_r ptr,
            prsnl p_doc,
            prsnl pl,
            (dummyt d_ea with seq = 1),
            encntr_alias ea

         plan d_pr
         join pr
           where pr.perform_result_id =
                    perf_results->qual[d_pr.seq].perform_result_id
         join re
           where re.result_id = perf_results->qual[d_pr.seq].result_id
             and re.perform_result_id = pr.perform_result_id
             and re.event_sequence =                                   ;001
                    perf_results->qual[d_pr.seq].event_sequence        ;001
         join o
           where o.order_id = perf_results->qual[d_pr.seq].order_id
         join ol
           where ol.order_id = perf_results->qual[d_pr.seq].order_id
         join p
           where p.person_id = o.person_id
         join e
           where e.encntr_id = o.encntr_id
         join org                                                  ;010
           where org.organization_id = e.organization_id           ;010
         join d_oc
           where o_comments->qual[d_oc.seq].order_id = o.order_id
         join ptr
           where ptr.catalog_cd = perf_results->qual[d_pr.seq].catalog_cd
             and ptr.task_assay_cd =
                    perf_results->qual[d_pr.seq].task_assay_cd
         join p_doc
           where p_doc.person_id = o.last_update_provider_id
         join pl
           where pl.person_id = re.event_personnel_id
         join d_ea
           where d_ea.seq = 1
         join ea
           where ea.encntr_id = e.encntr_id
             and ea.encntr_alias_type_cd = alias_type_mrn_cd

         order by
            serv_res_hier,
            person_unique,   ;p_name_full    ;015
            accn,
            order_unique,
    		    testsite_disp,
    		    ptr.sequence,
    		    pr.perform_result_id,
    		    d_pr.seq

        head report
%i cclsource:glb_rpt_macros.inc
          if (limit = 0)
             call clear_report_data(' ')
          endif
          ;* Initialize report variables
          first_time_yn = "Y"
          break_yn = "N"
          if (nbr_prs > 0)
             rpt->inst_disp = perf_results->qual[d_pr.seq].inst_disp
             rpt->dept_disp = perf_results->qual[d_pr.seq].dept_disp
             rpt->sect_disp = perf_results->qual[d_pr.seq].sect_disp
             rpt->subsect_disp = perf_results->qual[d_pr.seq].subsect_disp
             rpt->ts_disp = perf_results->qual[d_pr.seq].ts_disp
          else
             rpt->inst_disp = test_site->qual[1]->inst_disp      ;015
             rpt->dept_disp = test_site->qual[1]->dept_disp           ;015
             rpt->sect_disp = test_site->qual[1]->sect_disp           ;015
             rpt->subsect_disp = test_site->qual[1]->subsect_disp     ;015
             rpt->ts_disp = test_site->qual[1]->ts_disp               ;015
          endif
          p_hdg1 = captions->demo                                    ;011
         if(LOCALE = localeObjectName)
          if(request->letter_size_ind = 1)
              p_hdg2 = concat("---------------------------------------- ",
                       "---------------------------------------------------------- ",
                       "------------------------------")

              p_hdg3 = concat("                                  ",
                          "     --------------- ", captions->orig,
                          " -------------------- ",
                          "--------------- ", captions->corr,
                          " -------------------")

              p_hdg5 = concat("--------------------- ---------------- ",
                          "----------------------- -------- ------- ---- ",
                          "----------------------- -------- ------- ----")
          else
              p_hdg2 = concat("---------------------------------------- ",  ;001
                              "---------------------------------------- ",  ;001
                              "------------------------------")          ;001

              p_hdg3 = concat("                                  ",     ;011
                          "--------------- ", captions->orig,       ;011
                          " -------------------- ",                 ;011
                          "--------------- ", captions->corr,       ;011
                          " -------------------")  ;011

              p_hdg5 = concat("--------------------- ----------- ",      ;001
                          "----------------------- -------- ------- ---- ", ;001
                          "----------------------- -------- ------- ----")  ;001
          endif
          else
           if(request->letter_size_ind = 1)
              p_hdg2 = concat("---------------------------------------- ",
                       "---------------------------------------------------------- ",
                       "------------------------------")
 
              p_hdg3 = concat("                                  ",
                          "     --------------- ", captions->orig,
                          " ----------------------- ",
                          "--------------- ", captions->corr,
                          " -------------------")
 
              p_hdg5 = concat("--------------------- ---------------- ",
                          "----------------------- -------- ---------- ---- ",
                          "-------------------- -------- ---------- ----")
           else
              p_hdg2 = concat("---------------------------------------- ",  ;001
                              "---------------------------------------- ",  ;001
                              "------------------------------")          ;001
 
              p_hdg3 = concat("                                  ",     ;011
                          "--------------- ", captions->orig,       ;011
                          " ----------------------- ",                 ;011
                          "--------------- ", captions->corr,       ;011
                          " -------------------")  ;011
 
              p_hdg5 = concat("--------------------- ----------- ",      ;001
                          "----------------------- -------- ---------- ---- ", ;001
                          "-------------------- -------- ---------- ----")  ;001
           endif
          endif
          
  
           p_hdg4 = concat(captions->orderable,                   ;011
                              captions->result1,captions->result2)   ;011
  
          

         head page
            call center(trim(rpt->inst_disp), 0, 125)
            col 0, captions->title                                     ;011
            col 109, captions->date                                    ;011
            if(LOCALE = localeObjectName)                                  ;011
            col + 1, nowdate
            else
            col + 1, nowdate_locale
            endif
            row + 1
            col 0, captions->dir                                       ;011
            col 109, captions->time                                    ;011
            col + 1, nowtime
            row + 1
            call center(title_text, 0, 125)
            col 109, captions->byuse                                   ;011
            col + 1, username
            row + 1
            call center(report_date_range, 0, 125)
            col 109, captions->pg                                      ;011
            col + 1, curpage "####;L;I"
            row + 1
            col 0, captions->instit                                    ;011
            col 14, rpt->inst_disp
            row + 1
            col 0, captions->depart                                    ;011
            col 14, rpt->dept_disp
            row + 1
            col 0, captions->section                                   ;011
            col 14, rpt->sect_disp
            row + 1
            if (serv_res_level_flag in (0,1)                           ;012
            or  sub_sort_flag = 0)                                     ;012
               col 0, captions->sub_section                            ;011
               col 14, rpt->subsect_disp
               row + 1
            endif
            if (serv_res_level_flag = 0                                ;012
            or  sub_sort_flag = 0)                                     ;012
               col 0, captions->test_site                              ;011
               col 14, rpt->ts_disp
               row + 1
            endif
            ;* Print column headers
            row + 1

         head serv_res_hier
            if (first_time_yn = "N")
               if ((serv_res_level_flag = 0 or serv_res_level_flag = 3 or sub_sort_flag = 0)
               and (perf_results->qual[d_pr.seq].inst_disp != rpt->inst_disp
                 or perf_results->qual[d_pr.seq].dept_disp != rpt->dept_disp
                 or perf_results->qual[d_pr.seq].sect_disp != rpt->sect_disp
                 or perf_results->qual[d_pr.seq].subsect_disp != rpt->subsect_disp
                 or perf_results->qual[d_pr.seq].ts_disp != rpt->ts_disp))
                  break_yn = "Y"
               elseif ((serv_res_level_flag = 1)
               and (perf_results->qual[d_pr.seq].inst_disp != rpt->inst_disp
                 or perf_results->qual[d_pr.seq].dept_disp != rpt->dept_disp
                 or perf_results->qual[d_pr.seq].sect_disp != rpt->sect_disp
                 or perf_results->qual[d_pr.seq].subsect_disp != rpt->subsect_disp))
                  break_yn = "Y"
               elseif ((serv_res_level_flag = 2)
               and (perf_results->qual[d_pr.seq].inst_disp != rpt->inst_disp
                 or perf_results->qual[d_pr.seq].dept_disp != rpt->dept_disp
                 or perf_results->qual[d_pr.seq].sect_disp != rpt->sect_disp))
                  break_yn = "Y"
               else
                  break_yn = "N"
               endif
               rpt->inst_disp = perf_results->qual[d_pr.seq].inst_disp
               rpt->dept_disp = perf_results->qual[d_pr.seq].dept_disp
               rpt->sect_disp = perf_results->qual[d_pr.seq].sect_disp
               rpt->subsect_disp = perf_results->qual[d_pr.seq].subsect_disp
               rpt->ts_disp = perf_results->qual[d_pr.seq].ts_disp
               if (break_yn = "Y")
                 break
               endif
            endif
            first_time_yn = "N"

         head person_unique          ;015
            call store_item(0, 1, p_hdg1)                              ;001
            call store_item(0, 2, p_hdg2)                              ;001
            short_age = FormatAge(p.birth_dt_tm, p.deceased_dt_tm, "LABRPTAGE")
            call store_item(0, 3, short_name)   ; patient name         ;001
            if (ea_exists = "Y")
               call store_item(0, 4, pat_nbr)   ; patient number       ;001
            endif

            call store_item(41, 3, short_age)    ; patient age         ;001

            if (p.sex_cd > 0.0)
               call store_item(60, 3, psex)      ; patient sex         ;001
            endif
            ;* Patient facility location
            pat_fac = fillstring(20, " ")
            pat_nurse = fillstring(20, " ")
            fac_loc = fillstring(43, " ")
            if (e.loc_facility_cd > 0.0)						;009
               pat_fac = substring(1, 15, trim(UAR_GET_CODE_DISPLAY(e.loc_facility_cd)))  ;009
            else
               pat_fac = captions->unknown                             ;011
            endif
            if (e.loc_nurse_unit_cd > 0.0)						;009
               pat_nurse = substring(1, 15, trim(UAR_GET_CODE_DISPLAY(e.loc_nurse_unit_cd))) ;009
            else
               pat_nurse = captions->unknown                           ;011
            endif

            ;* Patient location
            pat_room = fillstring(20, " ")
	          pat_org = fillstring(100, " ")
            pat_bed = fillstring(20, " ")

            if(request->letter_size_ind = 1)
                pat_loc = fillstring(58, " ")
            else
                pat_loc = fillstring(45, " ")
            endif

            if (e.loc_room_cd > 0.0)					;009
               pat_room = substring(1, 04, trim(UAR_GET_CODE_DISPLAY(e.loc_room_cd)))   ;009
            else
               pat_room = captions->unknown                            ;011
            endif
      	    if (e.organization_id > 0.0)                    ;010
      		    pat_org = trim(org.org_name)
      	    endif                                           ;010
            if (e.loc_bed_cd > 0.0)				       ;009
              pat_bed = substring(1, 04, trim(UAR_GET_CODE_DISPLAY(e.loc_bed_cd)))     ;009
            else
	            pat_bed = captions->unknown                             ;011
            endif

      	    ;if patient is discharged display org/discharged             ;010
      	    if (e.encntr_status_cd = discharged_cd)                      ;010
        		  pat_loc = concat(substring(1, 20, trim(pat_org)), "/",                     ;010
        			trim(uar_get_code_display(e.encntr_status_cd)))  ;010
      	    else                                                         ;010
      		    ;disp fac/nurse/room/bed                                 ;010
              if (pat_fac != pat_org)                                 ;010
                ;display org if different from facility              ;010
                 pat_loc = concat(trim(pat_fac), "/", trim(pat_nurse), "/", ;001
                   trim(pat_room), "/", trim(pat_bed), "/", trim(pat_org))                      ;001
              else
                 pat_loc = concat(trim(pat_fac), "/", trim(pat_nurse), "/", ;001
                   trim(pat_room), "/", trim(pat_bed))                      ;001
              endif                                                   ;010
      	    endif                                                       ;010

            if(request->letter_size_ind = 1)
                call store_item(41, 4, substring(1, 58, pat_loc))
            else
                call store_item(41, 4, substring(1, 40, pat_loc))          ;001
            endif

            if (trim(doctor_name)!=  captions->dr)                  ;011
            
                if(request->letter_size_ind = 1)
                    call store_item(100, 3, doctor_name)  ; ordering phys
                else
                    call store_item(82, 3, doctor_name)  ; ordering physician ;001
                endif

            endif
            reason_for_visit = fillstring(30, " ")                     ;001
            reason_for_visit = substring(1, 30, trim(e.reason_for_visit)) ;001

            if(request->letter_size_ind = 1)
                call store_item(100, 4, reason_for_visit)
            else
                call store_item(82, 4, reason_for_visit)                   ;001
            endif  

            order_row = 5                                              ;001
            detail_row = 5                                             ;001
            first_order = "Y"                                          ;001

        head order_unique
            ;* Start new order 2 lines following last detail of previous order.
            ;* Otherwise, start 1st detail of each order on 1st line of order.
            if (detail_row > order_row)
;001...               detail_row = detail_row + 1
               order_row = detail_row
            else
               ;* Check for multiple orders per patient and add space
               detail_row = order_row
            endif
            if (first_order = "Y")                                     ;001
              order_row = order_row + 1                                ;001
              call store_item(0, order_row, p_hdg3)                    ;001
              order_row = order_row + 1                                ;001
              call store_item(0, order_row, p_hdg4)                    ;001
              order_row = order_row + 1                                ;001
              call store_item(0, order_row, p_hdg5)                    ;001
              first_order = "N"                                        ;001
            endif                                                      ;001
            order_row = order_row + 1                                  ;001
            detail_row = order_row                                     ;001
            ;* Store 1st detail line of current order
            save1stline = order_row
;001...            offset = 22
            offset = 0                                                 ;001
            call store_item(offset, order_row, ord_mnem)
            order_row = order_row + 1
            call store_item(offset, order_row, accn)
            order_row = order_row + 1
            if (size(trim(drawn_dttm), 3) > 0)
              if(LOCALE = localeObjectName)
               call store_item(offset, order_row, drawn_dttm)
              else
               call store_item(offset, order_row, drawn_dttm_locale)
              endif
               order_row = order_row + 1
            endif
            call store_item(offset, order_row, priority)
            order_row = order_row + 1
            ;* Print order comments, if any exist
            if (o_comments->qual[d_oc.seq].comment_exists = "Y")
               order_row = save1stline + 4                             ;001
               offset = size(trim(ord_mnem), 3) + 1                    ;001
               call store_item(1, order_row, ord_mnem)                 ;001
               order_row = order_row + 1                               ;001
               offset = 1                                              ;001
               call store_item(offset, order_row, captions->ord_cmnt)  ;011
               order_row = order_row + 1
               vcstring->text = o_comments->qual[d_oc.seq].comment_text
               order_row = store_varchar_item(order_row, 3, 18, 1)     ;001
            endif
            if (o_comments->qual[d_oc.seq].note_exists = "Y")
               if (o_comments->qual[d_oc.seq].comment_exists = "N")
                  order_row = save1stline + 4                          ;001
               endif
               offset = size(trim(ord_mnem), 3) + 1                    ;001
               call store_item(1, order_row, ord_mnem)                 ;001
               call store_item(offset, order_row, captions->ord_note)  ;011
               order_row = order_row + 1
               vcstring->text = o_comments->qual[d_oc.seq].note_text
               order_row = store_varchar_item(order_row, 3, 18, 1)     ;001
            endif

         head testsite_disp                                            ;009
            row+0

         head ptr.sequence
            row+0

         head pr.perform_result_id
            call store_item(22, detail_row, detail_mne)                ;001
            ;* Determine which column to print result

            if(request->letter_size_ind = 1)
                if (pr.result_status_cd in (oldverified_cd,
                                            oldautoverified_cd))
                   offset = 39
                elseif (pr.result_status_cd in ( corrected_cd, oldcorrected_cd ))
                   offset = 85
                endif
            else
                if (pr.result_status_cd in (oldverified_cd,                ;002
                                            oldautoverified_cd))           ;002
                   offset = 34                                             ;001
                elseif (pr.result_status_cd in ( corrected_cd, oldcorrected_cd ))
                  if(LOCALE = localeObjectName)
                   offset = 80                                             ;001
                  else
                   offset = 83   
                  endif                   
                endif
            endif

            ;* Print result
            if (result_type_mean = "1")                    ;Textual result	;009
               call store_item(offset, detail_row, " ")
            elseif (result_type_mean = "2")                ;Alpha result	;009
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
            elseif (result_type_mean in ("3", "8"))        ;Numeric result	;009
               arg_max_digits = perf_results->qual[d_pr.seq].max_digits
               arg_min_dec_places = perf_results->qual[d_pr.seq]
                 .min_decimal_places
               arg_min_digits = perf_results->qual[d_pr.seq].min_digits
               arg_less_great_flag = pr.less_great_flag
               arg_raw_value = pr.result_value_numeric                 ;001
               if(perf_results->qual[d_pr.seq].sci_notation_ind = 1)
                  formatted->result_value = uar_AccFormatResultStringSciNote(arg_min_digits, 
                                                                             arg_max_digits, 
                                                                             arg_min_dec_places, 
                                                                             arg_raw_value, 
                                                                             arg_less_great_flag, 1) 
               else
                  format_numeric_result
               endif
               call store_item(offset, detail_row, formatted->result_value)
               offset = offset + size(trim(formatted->result_value), 3)
            elseif (result_type_mean = "4")                ;Interp result	;009
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
            elseif (result_type_mean = "6")                ;Date result	;009
              if(LOCALE = localeObjectName)
               call store_item(offset, detail_row, date_result)
               offset = offset + size(trim(date_result), 3)
              else
               call store_item(offset, detail_row, date_result_locale)
               offset = offset + size(trim(date_result_locale), 3)
              endif
            elseif (result_type_mean = "7")                ;Freetext result	;009
               call store_item(offset, detail_row, freetext_result)
               offset = offset + size(trim(freetext_result), 3)
            elseif (result_type_mean = "9")
               call store_item(offset, detail_row, code_value_result)
               offset = offset + size(trim(code_value_result), 3)
            endif
            ;* Build a string of result flags
            resultflagstr = fillstring(17, " ")                        ;001
            if (pr.result_status_cd in (corrected_cd, oldcorrected_cd))
               correction_flag = "Y"
            else
               correction_flag = "N"
            endif
            if (pr.normal_cd in(normal_high_cd, normal_low_cd, alp_abnormal_cd))
               cv_normflag = trim(substring(1, 40, UAR_GET_CODE_DISPLAY(pr.normal_cd)), 3) ;009
            else
               cv_normflag = " "
            endif

            if (pr.critical_cd in(critical_cd, alp_critical_cd))
               cv_critflag = trim(substring(1,40,UAR_GET_CODE_DISPLAY(pr.critical_cd)),3) ;009
            else
               cv_critflag = " "
            endif
	          if (pr.review_cd in(review_cd, alp_review_cd))
               cv_revwflag = trim(substring(1,40,UAR_GET_CODE_DISPLAY(pr.review_cd)),3) ;009
            else
               cv_revwflag = " "
            endif
      	    if (pr.linear_cd = linear_cd)
               cv_linflag = trim(substring(1,40,UAR_GET_CODE_DISPLAY(pr.linear_cd)),3)
            else
               cv_linflag = " "
            endif
            if (pr.feasible_cd = feasible_cd)				;009
               cv_feasflag = trim(substring(1,40,UAR_GET_CODE_DISPLAY(pr.feasible_cd)),3) ;009
            else									;001
               cv_feasflag = " "							;001
            endif
            if (pr.delta_cd = delta_fail_cd)				;009
               cv_deltaflag = trim(substring(1,40,UAR_GET_CODE_DISPLAY(pr.delta_cd)),3) ;009
            else
               cv_deltaflag = " "
            endif
            if(pr.notify_cd in(notify_cd, alp_notify_cd))
               cv_notifyflag = trim(substring(1,40,UAR_GET_CODE_DISPLAY(pr.notify_cd)),3)
            else
               cv_notifyflag = " "
            endif
            
            if ((pr.nomenclature_id > 0.0) and (pr.long_text_id > 0.0))
              interp_flag = captions->interp_text_flag
            else
              interp_flag = "" 
            endif
			
            if (pr.qc_override_cd > 0.0
            and qc_override = QC_OVERRIDE_CDF)
               sQCOverride = trim(substring(1,40,UAR_GET_CODE_DISPLAY(pr.qc_override_cd)),3)
            else
               sQCOverride = " "
            endif
            
            rc_exists = r_comments->qual[d_pr.seq].comment_exists
            rn_exists = r_comments->qual[d_pr.seq].note_exists
            resultflagstr =
              bldresultflagstr(cv_normflag, cv_critflag, cv_revwflag,
                               cv_linflag, cv_feasflag,                ;001
                               cv_deltaflag, rc_exists, rn_exists,
                               correction_flag, sQCOverride, cv_notifyflag, interp_flag)
            if (pr.dilution_factor > 0.0)                              ;001
               dilution = cnvtstring(pr.dilution_factor,6,2,l)           ;001
               idx = 1                                                   ;001
               while(substring(idx,1,dilution) = "0")                  ;001
                 l=movestring(" ",1,dilution,idx,1)   ;remove leading zeroes ;001
                 idx = idx+1                                           ;001
               endwhile                                                ;001
               idx=6                                                   ;001
               while(substring(idx,1,dilution) = "0")                  ;001
                 l=movestring(" ",1,dilution,idx,1)   ;remove trailing zeroes ;001
                 idx = idx-1                                           ;001
               endwhile                                                ;001
               if (substring(idx,1,dilution )= ".")                    ;001
                 l=movestring(" ",1,dilution,idx,1)   ;remove decimal point if not needed ;001
               endif                                                   ;001
               resultflagstr = concat(" ", "x", trim(dilution,3), " ", ;001
                 resultflagstr)                                        ;001
            else                                                       ;001
               resultflagstr = concat(" ", resultflagstr)              ;001
            endif                                                      ;001
            if (size(trim(resultflagstr), 3) > 0)
               call store_item(offset, detail_row, resultflagstr)
            endif
            ;* Determine which column to print tech id, date, and time
            if (pr.result_status_cd in (oldverified_cd,                ;002
                                        oldautoverified_cd))           ;002

               if(request->letter_size_ind = 1)
                   offset = 63
               else
                   offset = 58                                          ;001
               endif

               call store_item(offset, detail_row, tech_name)
;001...               offset = offset + 8
               offset = offset + 9                                     ;001
               if(LOCALE = localeObjectName)
               call store_item(offset, detail_row, event_date)  ;Verify date
               else
               call store_item(offset, detail_row, event_date_locale)             
               endif
            elseif (pr.result_status_cd in ( corrected_cd, oldcorrected_cd ))
;001...               offset = 105

               if(request->letter_size_ind = 1)
                   offset = 109
               else
                   offset = 104                                            ;001
               endif
               
               call store_item(offset, detail_row, tech_name)
;001...               offset = offset + 8
               offset = offset + 9                                     ;001
               if(LOCALE = localeObjectName)
               call store_item(offset, detail_row, event_date)  ;Corrected date
               else
                call store_item(offset, detail_row, event_date_locale)  ;Corrected date new format
               endif                                   
               detail_row = detail_row + 1
            endif

         detail
            row+0

         foot pr.perform_result_id
;009            if (cv_type.cdf_meaning = "1")  ;Textual result
            if (result_type_mean = "1")  ;Textual result		;009
;001...               offset = 44
               offset = 23                                             ;001
;002               if (pr.result_status_cd = oldverified_cd)
               if (pr.result_status_cd in (oldverified_cd,             ;002
                                           oldautoverified_cd))        ;002
                  detail_row = detail_row + 1
                  call store_item(offset, detail_row, detail_mne)

                  if(request->letter_size_ind = 1)
                    offset = 39
                  else
                    offset = offset + size(trim(detail_mne), 3)
                  endif
;011	                  call store_item(offset, detail_row, " Original Text Result:")
                  call store_item(offset, detail_row, captions->org_txt_rslt) ;011
               elseif (pr.result_status_cd in ( corrected_cd, oldcorrected_cd ))
                  call store_item(offset, detail_row, detail_mne)

                  if(request->letter_size_ind = 1)
                    offset = 85
                  else
                    offset = offset + size(trim(detail_mne), 3)
                  endif
;011                  call store_item(offset, detail_row, " Corrected Text Result:")
                  call store_item(offset, detail_row, captions->cor_txt_rslt) ;011
               endif
               detail_row = detail_row + 1
               if (pr.long_text_id > 0.0)
                  vcstring->text = perf_results->qual[d_pr.seq].long_text
               else
;011                  vcstring->text = "Textual Result Not Found"
	          vcstring->text =                                     ;011
                    uar_i18ngetmessage(i18nHandle,"txt_fnd","Textual Result Not Found") ;011
               endif
;001...               detail_row = store_varchar_item(detail_row, 47, 77, 1)
               detail_row = store_varchar_item(detail_row, 26, 77, 1)  ;001
            endif
;009            if (cv_type.cdf_meaning = "4"   ;Textual interp result
            if (result_type_mean = "4"   ;Textual interp result		;009
            and pr.long_text_id > 0.0)
;001...               offset = 44
               offset = 23                                             ;001
;002               if (pr.result_status_cd = oldverified_cd)
               if (pr.result_status_cd in (oldverified_cd,             ;002
                                           oldautoverified_cd))        ;002
                  detail_row = detail_row + 1
                  call store_item(offset, detail_row, detail_mne)

                  if(request->letter_size_ind = 1)
                    offset = 39
                  else
                    offset = offset + size(trim(detail_mne), 3)
                  endif
;011                  call store_item(offset, detail_row, " Original Text Result:")
                  call store_item(offset, detail_row, captions->org_txt_rslt) ;011
               elseif (pr.result_status_cd in ( corrected_cd, oldcorrected_cd ))
                  call store_item(offset, detail_row, detail_mne)

                  if(request->letter_size_ind = 1)
                    offset = 85
                  else
                    offset = offset + size(trim(detail_mne), 3)
                  endif
;011                  call store_item(offset, detail_row, " Corrected Text Result:")
                  call store_item(offset, detail_row, captions->cor_txt_rslt) ;011
               endif
               detail_row = detail_row + 1
               vcstring->text = perf_results->qual[d_pr.seq].long_text
;001...               detail_row = store_varchar_item(detail_row, 47, 77, 1)
               detail_row = store_varchar_item(detail_row, 26, 77, 1)  ;001
            endif

         foot ptr.sequence
            ;* Print result comment, if any exist
            if (r_comments->qual[d_pr.seq].comment_exists = "Y")
;001...               offset = 44
               offset = 23                                             ;001
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
;011               call store_item(offset, detail_row, " Result Comment:")
               call store_item(offset, detail_row, captions->rslt_cmnt) ;011
               detail_row = detail_row + 1
               vcstring->text = r_comments->qual[d_pr.seq].comment_text
;001...               detail_row = store_varchar_item(detail_row, 47, 77, 1)
               detail_row = store_varchar_item(detail_row, 26, 77, 1)  ;001
            endif
            ;* Print result footnote, if any exist
            if (r_comments->qual[d_pr.seq].note_exists = "Y")
;001...               offset = 44
               offset = 23                                             ;001
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
;011               call store_item(offset, detail_row, " Result Note:")
               call store_item(offset, detail_row, captions->rslt_note) ;011
               detail_row = detail_row + 1
               vcstring->text = r_comments->qual[d_pr.seq].note_text
;001...               detail_row = store_varchar_item(detail_row, 47, 77, 1)
               detail_row = store_varchar_item(detail_row, 26, 77, 1)  ;001
            endif

         foot order_unique
            ;* Determine the total number of lines for this order
            if (detail_row > order_row)                                ;001
               report_data->qual[save1stline].detailcount =
                 detail_row - save1stline + 1
            else                                                       ;001
               report_data->qual[save1stline].detailcount =            ;001
                 order_row - save1stline + 1                           ;001
            endif                                                      ;001

		  foot person_unique                ;015
            ;* Print out previous patient info and erase it from
            ;* report_data array.
           report_data->qual[1].detailcount =                         ;001
             report_data->qual[9].detailcount + 8                     ;001
            print_report_data
            row + 1
         foot report
            ;* Print out last patient info and erase it from
            ;* report_data array.
            print_report_data
            row + 2
;011            call center("##### END OF REPORT #####", 0, 125)
			call center(EndReportVar, 0, 125)          ;015
         with
            nocounter,
            outerjoin = d_ea,
            dontcare = ea,
            maxread(ea, 1),
            nullreport

            if (size(trim(request->printer_name)) > 0)
              SET spool = value(reply->file_name) value(request->printer_name)
            endif

            set reply->status_data->status = "S"

 #Exit_Script
         if ((reply->status_data->status != "F") and
             (GetResourceSecurityStatus(0) != "S"))                        ;016
            call PopulateResSecStatusBlock(0)                              ;016
            set reply->status_data->status = GetResourceSecurityStatus(0)  ;016
         endif                                                             ;016

         call uar_SysDestroyHandle(hSys)                                   ;015
         
         free set test_site
         free set ts_sort
         free set actvty_type
         free set perf_results
         free set qc_comments
         free set rpt
         free set qc_results
         free set r_comments
         free set o_comments
         free set p_comments
         free set ops_params
         free set report_data
         free set vcstring
         free set formatted
         free set captions
         end
         go

;Generated by GNU enscript 1.6.4.
