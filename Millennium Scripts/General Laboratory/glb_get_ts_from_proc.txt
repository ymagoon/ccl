 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_ts_from_proc/glb_get_ts_from_proc.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_TS_FROM_PROC.PRG
        Object name:            GLB_GET_TS_FROM_PROC
        Request #:              250114

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieves available test sites for a given 
                                procedure.
                               
        Tables read:            discrete_task_assay
                                assay_processing_r
                                
        Tables updated:         n/a

        Executing from:         Equation Build

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 09/26/96 Chad Moats           Initial Release                     *
;     001 06/18/98 Chad Moats           Change read from discrete_task_assay*
;                                       table to the code_value table       *
;     002 01/02/04 Scott Sundahl        Allow assays containing non alpha-  *
;					                    numeric characters to be returned   *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_TS_FROM_PROC:dba go    
      create program GLB_GET_TS_FROM_PROC:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                               
         1 mnemonic                  = vc        
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 testsites[5]
           2 service_resource_cd     = f8
           2 service_resource_disp   = vc
         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
      )

     #Script
      set failed = "F"
      set ts_cnt = 0
      set reply->status_data->status = "F"
;001      set mnemonic = cnvtupper(request->mnemonic)
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

/*******************************************************************/
/* Get mnemonics for requested procedure range.                    */
/*******************************************************************/
      SELECT 
      into  "nl:"
;001         d.mnemonic_key_cap,
;001         d.task_assay_cd,
	 c.code_value,						;001
         a.default_result_type_cd
      FROM
;001         discrete_task_assay d,
	 code_value c,						;001
         assay_processing_r a
;001      PLAN d
;001         where d.mnemonic_key_cap = cnvtupper(request->mnemonic)
      PLAN c							;001
         where c.code_set = 14003 and				;001
	       cnvtupper(c.display) = cnvtupper(request->mnemonic)	;002	
      JOIN a
;001         where a.task_assay_cd = d.task_assay_cd
         where a.task_assay_cd = c.code_value			;001
         and a.active_ind = 1
      ORDER
      	 uar_get_code_display(a.service_resource_cd)
      DETAIL
         ts_cnt = ts_cnt + 1
         IF (mod(ts_cnt, 5) = 1 and ts_cnt != 1)
             stat = alter(reply->testsites, ts_cnt + 5)
         ENDIF
         reply->testsites[ts_cnt]->service_resource_cd = a.service_resource_cd
      WITH
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        set failed = "T"
        go to exit_script
      endif

      if (curqual = 0)
         go to no_testsites_found
      endif

      set stat = alter(reply->testsites, ts_cnt)
      go to exit_script

/********************************************************************/ 
/* Executed if requested procedure is not found.                    */
/********************************************************************/
     #no_testsites_found
      set reply->status_data->subeventstatus[1]->operationname = 
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "Z"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "assay_processing_r table"
      set failed = "Z"
      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
      elseif (failed = "Z")
         set reply->status_data->status = "Z"
      else
         set reply->status_data->status = "F"
      endif
END
GO     

;Generated by GNU enscript 1.6.4.
