 ;;Solution_Test/script/Database Architecture -- Tools/DM_ADD_SEQUENCE/dm_add_sequence.prg Turn on black mode

drop program dm_add_sequence:dba go
create program dm_add_sequence:dba

;----------------------------------------------------------------------------
;Mod Date     Name         Description
;----------------------------------------------------------------------------
;001 01/16/01 RS2155       Initial program create.
;002 10/27/02 CERCAF       Modifications to comply with DB2
;003 03/18/03 MG4751       Insert/Update in DM_SEQUENCES (admin) table
;004 10/23/03 JM6512       Increased the cache size to 2000 for certain conditions
;			   Also add check to see if view exists
;----------------------------------------------------------------------------


;%i cclsource:dm_seq_reply.inc

/*
record dm_seq_reply
(1 status = c1
 1 msg = vc
)

*/

set dm_sname = cnvtupper(trim($1))
set dm_min_val = 0.0
set dm_min_val = $2
set dm_max_val = 0.0
set dm_max_val = $3
set dm_cycle_flg = 0
set dm_cycle_flg = $4
set dm_incr_by = 0
set dm_incr_by = $5

;check to see if view exists		;004
select into "nl:"
  from user_tab_columns
where table_name = "DM2_USER_SEQUENCES" 
with nocounter

if (curqual = 0)
   set dm_seq_reply->msg = concat("FAILED: sequence can not be created because dm2_user_sequences view does not exist")
   set dm_seq_reply->status = 'F'
   go to exit_script
endif

select into "nl:"
    u.sequence_name
;002 from user_sequences u
from dm2_user_sequences u  ;002
where u.sequence_name = dm_sname
with nocounter

if (curqual = 0)
  if (currdb = "ORACLE")
    call parser (concat('rdb create sequence ', dm_sname))
    if (dm_incr_by = 0)
        call parser ('increment by 1')
    else
        call parser(concat('increment by ', cnvtstring(dm_incr_by)))
    endif
    if (dm_min_val > 0)
        call parser(concat('minvalue ', cnvtstring(dm_min_val)))
    endif
    if (dm_max_val > 0)
        call parser(concat('maxvalue ', cnvtstring(dm_max_val)))
    endif
    if (dm_cycle_flg = 1)
        call parser ('cycle')
    endif
    if (dm_cycle_flg = 0 AND dm_max_val >= 999999999)			;004
       call parser ('cache 2000')					;004
    else								;004
       call parser ('cache 20')						;004
    endif								;004
    call parser ('go')
  elseif (currdb = "DB2UDB")                                            ;002
    call parser (concat('rdb create sequence ', dm_sname, ' as bigint')) ;002
    if (dm_incr_by = 0)                                                 ;002
        call parser ('increment by 1')                                  ;002
    else                                                                ;002
        call parser(concat('increment by ', cnvtstring(dm_incr_by)))    ;002
    endif                                                               ;002
    if (dm_min_val > 0)                                                 ;002
        call parser(concat('minvalue ', cnvtstring(dm_min_val)))        ;002
    endif                                                               ;002
    if (dm_max_val > 0)                                                 ;002
        call parser(concat('maxvalue ', cnvtstring(dm_max_val)))        ;002
    endif                                                               ;002
    if (dm_cycle_flg = 1)                                               ;002
        call parser ('cycle')                                           ;002
    endif                                                               ;002
    if (dm_cycle_flg = 0 AND dm_max_val >= 999999999)                   ;004
       call parser ('cache 2000')                                       ;004
    else                                                                ;004
       call parser ('cache 20')                                         ;004
    endif                                                               ;004
    call parser ('go')                                                  ;002
  endif                                                                 ;002
  
    ;check to see if sequence was created successfully
    
    set dm_errcode=0
    set dm_errmsg = fillstring(132," ")
    set dm_errcode = error(dm_errmsg,0)
    if (dm_errcode!=0)
        set dm_seq_reply->msg = concat("Could not create sequence ", dm_sname, ": ", dm_errmsg)
        set dm_seq_reply->status = 'F'
    else
        set dm_seq_reply->status = 'S'
        set dm_seq_reply->msg = 'Sequence created successfully.'     
    endif
 
else
    set dm_seq_reply->status = 'S'
    set dm_seq_reply->msg = 'Sequence did not need to be created since it already existed.'     
endif
        
;003 ...
if (dm_seq_reply->status = 'S')
  select into 'nl:'
    from dm_sequences ds
   where ds.sequence_name = cnvtupper(dm_sname)
    with nocounter
    
  if (curqual=0)
    set dm_errcode=0
    set dm_errmsg = fillstring(132," ")
    insert into dm_sequences ds
    (ds.sequence_name,
     ds.min_value,
     ds.max_value,
     ds.increment_by,
     ds.cycle)
     (select d2s.sequence_name,
             d2s.min_value,
             d2s.max_value,
             d2s.increment_by,
             d2s.cycle_flag
        from dm2_user_sequences d2s
       where d2s.sequence_name = cnvtupper(dm_sname))
    with nocounter
    
    set dm_errcode = error(dm_errmsg,0)
    if (dm_errcode!=0)
      rollback
      set dm_seq_reply->status = 'F'
      set dm_seq_reply->msg = concat("Could not insert sequence ", dm_sname, " in dm_sequences table: ", dm_errmsg)
    else
      commit
      set dm_seq_reply->status = 'S'
      set dm_seq_reply->msg = 'Sequence recorded in admin successfully.'     
    endif
  endif  
endif
;...003

#exit_script

end
go
;force update 

;Generated by GNU enscript 1.6.4.
