 ;;Solution_Test/script/PathNet -- Gen Lab/glb_check_event/glb_check_event.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Author:                 Kevin Brunner
        Date Written:           06/25/97
        Source file name:       glb_check_event.prg
        Object name:            glb_check_event
        Request #:              250187
 
        Product:                PathNet General Lab
        Product Team:           PathNet General Lab
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Check if results have posted to CE table.
 
        Tables read:            Result,
                                Clinical_event,
                                Performed_result,
                                Result_event
 
        Tables updated:         None
 
        Special Notes:
 
******************************************************************************/
 
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *001 06/25/97 Kevin Brunner        Initial Release                     *
;    *002 09/19/97 Hal Patchen          Add autoverification logic          *
;    *003 11/04/97 Kevin Brunner        Check the event_code_r table        *
;    *004 11/21/97 Hal Patchen          Add check for accession primary_flag*
;    *005 05/03/99 Chad Moats           Removed multiple joins to code_value*
;    *006 07/06/99 Gary Runde           Add request/reply to script to      *
;                                       call this from Visual Basic         *
;    *007 08/11/99 Chris Heil           Allow run from operations.          *
;                                       Remove unused code values.          *
;    *008 09/15/99 Chris Heil           Validate on batch_selection, not    *
;                                       start_dt_tm.                        *
;    *009 12/17/99 Chris Heil           Qualify on verified date/time.      *
;                                       Change date/time prompts.           *
;                                       Rewrite and clean-up.               *
;    *010 02/29/00 Chris Heil           Add prompt for current results only.*
;    *011 03/09/00 Chris Heil           Return only GLB results to app.     *
;    *012 03/13/00 Gary Runde           add footers so to return correct data*
;    *013 04/28/00 Chris Heil           Do not perform 2nd select if 1st    *
;                                       returns no records.                 *
;    *014 04/28/00 Gary Runde           Internationalization                *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop   program glb_check_event:dba go
create program glb_check_event:dba

/****************************     i18n     ************************begin mod ;014**/

; INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
; INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
set i18nHandle = 0
; CALL UAR_I18NLOCALIZATIONINIT
set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)

record EventCaptions
(
1 title               = vc
1 resultsfrom         = vc
1 ToVal               = vc
1 showonly            = vc
1 notinclin           = vc
1 processing          = vc
1 y                   = vc
1 a                   = vc
1 n                   = vc
1 Corr                = vc
1 startearlier        = vc
1 title2              = vc
1 daterange           = vc
1 accession           = vc
1 ordermne            = vc
1 assaymne            = vc
1 eventtype           = vc
1 eventdtTm           = vc
1 currce              = vc
1 resultid            = vc
1 notconfig           = vc
1 assay               = vc
1 alias               = vc
1 note1               = vc
1 note2               = vc
1 ask                 = vc
)

set EventCaptions->title = uar_i18ngetmessage(i18nHandle, "title", "GLB Clinical Event Audit")
set EventCaptions->resultsfrom = uar_i18ngetmessage(i18nHandle, "resultsfrom", "Results From:")
set EventCaptions->ToVal = uar_i18ngetmessage(i18nHandle, "ToVal", "To:")
set EventCaptions->showonly = uar_i18ngetmessage(i18nHandle, "showonly", "Show only assays in which the most current result is")
set EventCaptions->notinclin = uar_i18ngetmessage(i18nHandle, "notinclin", "not in clinical events (Yes/All)?")
set EventCaptions->processing = uar_i18ngetmessage(i18nHandle, "processing", "Processing...")
set EventCaptions->y = uar_i18ngetmessage(i18nHandle, "y", "Y")
set EventCaptions->a = uar_i18ngetmessage(i18nHandle, "a", "A")
set EventCaptions->n = uar_i18ngetmessage(i18nHandle, "n", "N")
set EventCaptions->Corr = uar_i18ngetmessage(i18nHandle, "Corr", "Correct (Y/N)?")
set EventCaptions->startearlier = uar_i18ngetmessage(i18nHandle, "startearlier", "Start date must be earlier than end date!")
set EventCaptions->title2 = uar_i18ngetmessage(i18nHandle, "title2", "GLB Activity and Clinical Event Audit Report")
set EventCaptions->daterange = uar_i18ngetmessage(i18nHandle, "daterange", "Date Range:")
set EventCaptions->accession = uar_i18ngetmessage(i18nHandle, "accession", "Accession")
set EventCaptions->ordermne = uar_i18ngetmessage(i18nHandle, "ordermne", "Order Mnemonic")
set EventCaptions->assaymne = uar_i18ngetmessage(i18nHandle, "assaymne", "Assay Mnemonic")
set EventCaptions->eventtype = uar_i18ngetmessage(i18nHandle, "eventtype", "Event Type")
set EventCaptions->eventdtTm = uar_i18ngetmessage(i18nHandle, "eventdtTm", "Event Date/Time")
set EventCaptions->currce = uar_i18ngetmessage(i18nHandle, "currce", "Curr CE")
set EventCaptions->resultid = uar_i18ngetmessage(i18nHandle, "resultid", "Result ID")
set EventCaptions->notconfig = 
         uar_i18ngetmessage(i18nHandle, "notconfig", "Assays not configured to post to Clinical Event tables:")
set EventCaptions->assay = uar_i18ngetmessage(i18nHandle, "assay", "Assay")
set EventCaptions->alias = uar_i18ngetmessage(i18nHandle, "alias", "Alias")
set EventCaptions->note1 = 
    uar_i18ngetmessage(i18nHandle, "note1", 
       "NOTE:  Curr CE column indicates whether the most recent result for this discrete assay is in clinical events.")
set EventCaptions->note2 = uar_i18ngetmessage(i18nHandle, "note2", 
       "An 'N' in this column means action must be taken to ensure the correct results are in clinical events.")
set EventCaptions->ask = uar_i18ngetmessage(i18nHandle, "ask", "*")

/****************************     i18n     ************************end mod ;014**/

%i cclsource:glb_script_logging.inc
 
/***********************************************************************
 * Request Record                                                      *
 ***********************************************************************/
/*
  record request
  (
     1 start_dt_tm          = dq8
     1 end_dt_tm            = dq8
     1 batch_selection      = vc
     1 output_dist          = vc
     1 ops_date             = dq8
  )
*/
 
/***********************************************************************
 *   Reply Record                                                      *
 ***********************************************************************/
  record reply
  (
     1 qual[*]
       2 accession          = c20
       2 order_id           = f8
       2 catalog_cd         = f8
       2 catalog_disp       = c40
       2 task_assay_cd      = f8
       2 task_assay_disp    = c40
       2 result_id          = f8
       2 result_dt_tm       = dq8
       2 result_type_cd     = f8
       2 result_type_disp   = c40
       2 ref_nbr            = c60
       2 alias_nf_ind       = i2
       2 final_event_ind    = i2
%i cclsource:status_block.inc
  )
 
/***********************************************************************
 *   Work Records                                                      *
 ***********************************************************************/
  ;* Record used to hold dates used to qualify data
  record dates
  (
     1 start_dt_tm          = dq8
     1 end_dt_tm            = dq8
  )
 
  ;* Record used to hold data in activity but not clinical events
  record activity
  (
     1 qual[*]
       2 accession          = c20
       2 order_id           = f8
       2 catalog_cd         = f8
       2 task_assay_cd      = f8
       2 result_id          = f8
       2 result_dt_tm       = dq8
       2 result_type_cd     = f8
       2 ref_nbr            = c60
       2 alias_nf_ind       = i2
       2 activity_type_cd   = f8                                                                   ;011
  )
 
  ;* Record used to hold task assays without an code_value_event_r row
  record assay_nf
  (
     1 assay[*]
       2 task_assay_cd      = f8
       2 task_assay_disp    = c20
  )
 
/***********************************************************************
 * Declare Constants                                                   *
 ***********************************************************************/
  set EVENT_TYPE_CODESET = 1901
  set VERIFIED_CDF = "VERIFIED"
  set CORRECTED_CDF = "CORRECTED"
  set AUTOVERIFIED_CDF = "AUTOVERIFIED"
  set ACTIVITY_TYPE_CODESET = 106                                                                  ;011
  set GLB_CDF = "GLB"                                                                              ;011
 
/***********************************************************************
 * Declare Variables                                                   *
 ***********************************************************************/
  set ver_cd = 0.0
  set cor_cd = 0.0
  set glb_cd = 0.0                                                                                 ;011
  set reply_cnt = 0
  set auto_ver_cd = 0.0
  set interface_flag = 0        ;0 = CCL, 1 = Ops, 2 = Req/Reply
  set ce_activity_cnt = 0
  set nf_activity_cnt = 0
  set curr_result_ind = 0      
  set reply->status_data->status = "F"
  set cdf_meaning = fillstring(12, " ")
  set log_program_name = "GLB_CHECK_EVENT"
 
set tempdatecmp = 0 
 
  set dt_day_beg   = fillstring(2," ")
  set dt_month_beg = fillstring(3," ")
  set dt_year_beg  = fillstring(4," ")
  set dt_day_end   = fillstring(2," ")
  set dt_month_end = fillstring(3," ")
  set dt_year_end  = fillstring(4," ")
  set tm_hour_beg  = fillstring(2," ")
  set tm_min_beg   = fillstring(2," ")
  set tm_hour_end  = fillstring(2," ")
  set tm_min_end   = fillstring(2," ")
  set dt_tm_beg    = fillstring(23, " ")
  set dt_tm_end    = fillstring(23, " ")
 
/***********************************************************************
 * Retrieve Code Values                                                *
 ***********************************************************************/
  set code_set = EVENT_TYPE_CODESET
  set code_value = 0.0
  set cdf_meaning = VERIFIED_CDF
  execute cpm_get_cd_for_cdf
  set ver_cd = code_value
 
  set code_set = EVENT_TYPE_CODESET
  set code_value = 0.0
  set cdf_meaning = CORRECTED_CDF
  execute cpm_get_cd_for_cdf
  set cor_cd = code_value
 
  set code_set = EVENT_TYPE_CODESET
  set code_value = 0.0
  set cdf_meaning = AUTOVERIFIED_CDF
  execute cpm_get_cd_for_cdf
  set auto_ver_cd = code_value
 
  set code_set = ACTIVITY_TYPE_CODESET                                                             ;011
  set code_value = 0.0                                                                             ;011
  set cdf_meaning = GLB_CDF                                                                        ;011
  execute cpm_get_cd_for_cdf                                                                       ;011
  set glb_cd = code_value                                                                          ;011
 
/***********************************************************************
 * Prompt for Event Date Range                                         *
 ***********************************************************************/
  if (validate(request->batch_selection, "N") = "N")
      /* From CCL */
      cclseclogin
 
      set interface_flag = 0
      set output_dest = "FORMS"
  else
      if (trim(request->output_dist) > "")
         /* From Ops */
         set curr_result_ind = 1                                                                   ;010
         set interface_flag = -1
         set output_dest = request->output_dist
 
         if (request->batch_selection = "")
           set nbr_days = 0
         else
           set nbr_days = (0 - cnvtint(request->batch_selection))
         endif
         set holddate = datetimeadd(cnvtdatetime(request->ops_date), nbr_days)
         set dates->start_dt_tm = cnvtdatetime(holddate)
         set dates->end_dt_tm = cnvtdatetime(CURDATE, 2359)
      else
         /* From glbAudits.exe */
         set curr_result_ind = 1                                                                   ;010
         set interface_flag = 1
         set output_dest = "nl:"
 
         set dates->start_dt_tm = request->start_dt_tm
         set dates->end_dt_tm = datetimeadd(request->end_dt_tm, 1)
      endif
 
      go to BEGIN_SCRIPT
  endif
 
/***********************************************************************
 * Prompt for order date range.                                        *
 ***********************************************************************/
  call clear (1,1)
  call video (n)
  call box   (1,1,3,80)
;014  call text  (2, 3, "GLB Clinical Event Audit")
  call text  (2, 3, EventCaptions->title)                                                    ;014
  call video (n)
;014  call text  (5, 3, "Results From:")            
  call text  (5, 3, EventCaptions->resultsfrom)                                              ;014 
;014  call text  (6, 13, "To:")
  call text  (6, 13, EventCaptions->ToVal)                                                   ;014 
  
;014  call text  (9, 3, "Show only assays in which the most current result is")                        ;010
  call text  (9, 3, EventCaptions->showonly)                                                 ;014 
;014  call text  (10, 3, "not in clinical events (Yes/All)?")                                          ;010
  call text  (10, 3, EventCaptions->notinclin)                                              ;014 
  
/*014  
  set dt_day_beg = format(day(curdate), "##;P0;I")
  set dt_month_beg = format(cnvtdatetime(curdate, curtime3), "MMM;;D")
  set dt_year_beg = format(year(curdate), "####;P0;I")
  set tm_hour_beg = "00"
  set tm_min_beg = "00"
  set dt_day_end = format(day(curdate), "##;P0;I")
  set dt_month_end = format(cnvtdatetime(curdate, curtime3), "MMM;;D")
  set dt_year_end = format(year(curdate), "####;P0;I")
  set tm_hour_end = format(hour(curtime), "##;P0;I")
  set tm_min_end = format(minute(curtime), "##;P0;I")
 
  call video(l)
  call text(5,17, dt_day_beg)
  call text(5,19, "-")
  call text(5,20, dt_month_beg)
  call text(5,23, "-")
  call text(5,24, dt_year_beg)
  call text(5,30, tm_hour_beg)
  call text(5,32, ":")
  call text(5,33, tm_min_beg)
  call text(6,17, dt_day_end)
  call text(6,19, "-")
  call text(6,20, dt_month_end)
  call text(6,23, "-")
  call text(6,24, dt_year_end)
  call text(6,30, tm_hour_end)
  call text(6,32, ":")
  call text(6,33, tm_min_end)
014  */
  set dispDate = concat(format(curdate-1,"@MEDIUMDATE4YR;;q")," ",    ;014 
                format(curtime,"@TIMENOSECONDS;;q"))                ;014 
  set dt_tm_beg = dispDate                                          ;014 
  call text(5, 17, dispDate)                                        ;014 
  set dispDate = concat(format(curdate,"@MEDIUMDATE4YR;;q")," ", format(curtime,"@TIMENOSECONDS;;q"))
  set dt_tm_end = dispDate                                          ;014 
  call text(6, 17, dispDate)                                        ;014 
										   
;014  call text(10, 40, "Y")                                                                          ;010
  call text(10, 40, EventCaptions->y)                              ;014
  go to CORRECT_YN
 
#ACC_DATE_RANGE
/***********************************************************************
 * Accept begin order date.                                            *
 ***********************************************************************/
;014  call accept(5,17, "NN", value(dt_day_beg)
;014       where cnvtint(curaccept) between 1 and 31)
;014  set dt_day_beg = format(curaccept, "##;P0;I")
;014 
;014  call accept(5,20, "XXX;;CU", value(dt_month_beg)
;014       where curaccept in ("JAN", "FEB", "MAR", "APR", "MAY", "JUN",
;014                           "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"))
;014  set dt_month_beg = curaccept
;014 
;014  call accept(5,24, "NNNN", value(dt_year_beg))
;014  set dt_year_beg = format(curaccept, "####;P0;I")
;014 
;014  call accept(5,30, "NN", value(tm_hour_beg)
;014       where cnvtint(curaccept) between 0 and 24)
;014  set tm_hour_beg = format(curaccept, "##;P0;I")
;014 
;014  call accept(5,33, "NN", value(tm_min_beg)
;014       where cnvtint(curaccept) between 0 and 59)
;014  set tm_min_beg = format(curaccept, "##;P0;I")
 
call accept (5, 17, "NNDCCCDNNNNDNNDNN;C", concat(format(curdate,"@MEDIUMDATE4YR;;q")," ",
										   format(curtime,"@TIMENOSECONDS;;q")))
set dt_tm_beg = curaccept

call accept (6, 17, "NNDCCCDNNNNDNNDNN;C", concat(format(curdate,"@MEDIUMDATE4YR;;q")," ",
										   format(curtime,"@TIMENOSECONDS;;q")))
set dt_tm_end = curaccept

/***********************************************************************
 * Accept end order date.                                              *
 ***********************************************************************/
;014  call accept(6,17, "NN", value(dt_day_end)
;014       where cnvtint(curaccept) between 1 and 31)
;014  set dt_day_end = format(curaccept, "##;P0;I")
;014 
;014  call accept(6,20, "XXX;;CU", value(dt_month_end)
;014       where curaccept in ("JAN", "FEB", "MAR", "APR", "MAY", "JUN",
;014                           "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"))
;014  set dt_month_end = curaccept
;014 
;014  call accept(6,24, "NNNN", value(dt_year_end))
;014  set dt_year_end = format(curaccept, "####;P0;I")
;014 
;014  call accept(6,30, "NN", value(tm_hour_end)
;014       where cnvtint(curaccept) between 0 and 24)
;014  set tm_hour_end = format(curaccept, "##;P0;I")
;014 
;014  call accept(6,33, "NN", value(tm_min_end)
;014       where cnvtint(curaccept) between 0 and 59)
;014  set tm_min_end = format(curaccept, "##;P0;I")

 
/***********************************************************************
 * Accept current only prompt.                                         *
 ***********************************************************************/
;014  call accept(10,40, "X;;CU", "Y" where curaccept in ("Y", "A"))                                   ;010
;014  if (curaccept = "Y")                                                                             ;010
;014    set curr_result_ind = 1                                                                        ;010
;014  elseif (curaccept = "A")                                                                         ;010
;014    set curr_result_ind = 0                                                                        ;010
;014  endif                                                                                            ;010
 
  call accept(10,40, "X;;CU", EventCaptions->y where 
              curaccept in (EventCaptions->y, EventCaptions->a))                                   ;014
  if (curaccept = EventCaptions->y)                                                                ;014
    set curr_result_ind = 1                                                                        ;014
  elseif (curaccept = EventCaptions->a) 
    set curr_result_ind = 0                                                                        ;014
  endif                                                                                            ;014
#CORRECT_YN
/***********************************************************************
 * Prompt for Correct Y/N.                                             *
 ***********************************************************************/
;014  call text(24,2, "Correct (Y/N)?")
  call text(24,2, EventCaptions->Corr)                                                             ;014
;014  call accept(24,17, "X;;CU", "Y" where curaccept in ("Y", "N"))
  call accept(24,17, "X;;CU", EventCaptions->y where 
        curaccept in (EventCaptions->y, EventCaptions->n))                                         ;014

;014  if (curaccept = "N")
  if (curaccept = EventCaptions->n)                                                                ;014
    go to ACC_DATE_RANGE
  endif
 
;014  set dt_tm_beg = concat(dt_day_beg, "-", dt_month_beg, "-",
;014      dt_year_beg, " ", tm_hour_beg, ":", tm_min_beg, ":00.00")
;014  set dt_tm_end = concat(dt_day_end, "-", dt_month_end, "-",
;014      dt_year_end, " ", tm_hour_end, ":", tm_min_end, ":59.99")
  set dates->start_dt_tm = cnvtdatetime(dt_tm_beg)
  set dates->end_dt_tm = cnvtdatetime(dt_tm_end)
  
  set tempdatecmp = datetimecmp(dates->end_dt_tm, dates->start_dt_tm)
  if (tempdatecmp < 0)    
    call text(15,3, EventCaptions->startearlier)                                                       ;014
    go to ACC_DATE_RANGE                                                                           ;010
  endif                                                                                            ;010
 
;010   call clear(7,1)
  call clear(11,1)                                                                                 ;010
;014  call text(15,3, "Processing...")
  call text(15,3, EventCaptions->processing)                                 ;014
 
#BEGIN_SCRIPT
/***********************************************************************
 * Retrieve Qualifying Data not in Clinical Events and Write Report    *
 ***********************************************************************/
  select into "nl:"
/*
    aor.accession,
    aor.order_id,
    aor.activity_type_cd,                                                                          ;011
    r.catalog_cd,
    r.task_assay_cd,
    r.result_id,
    pr.perform_result_id,
    re.event_dt_tm,
    re.event_type_cd,
    ref_nbr = trim(build(r.order_id, r.result_id, r.task_assay_cd)),
    accn = substring(0,20,trim(uar_fmt_accession(aor.accession,
                               size(aor.accession,1)))),
    catalog_disp = substring(0,20,trim(UAR_GET_CODE_DISPLAY(r.catalog_cd),3)),
    event_type_disp = substring(0,15,trim(UAR_GET_CODE_DISPLAY(re.event_type_cd),3)),
*/
    task_assay_disp = substring(0,20,trim(UAR_GET_CODE_DISPLAY(r.task_assay_cd),3)),
    cver_ind = decode(cver.seq, "Y", "N")
  from
    result_event re,
    perform_result pr,
    result r,
    accession_order_r aor,
    dummyt d1,
    code_value_event_r cver
  plan re
    where re.event_type_cd in (ver_cd, cor_cd, auto_ver_cd)
      and re.event_dt_tm >= cnvtdatetime(dates->start_dt_tm)
      and re.event_dt_tm <= cnvtdatetime(dates->end_dt_tm)
  join pr
    where pr.result_id = re.result_id
      and pr.perform_result_id = re.perform_result_id
  join r
    where r.result_id = pr.result_id
  join aor
    where aor.order_id = r.order_id
      and aor.primary_flag = 0
  join d1
    where d1.seq = 1
  join cver
    where cver.parent_cd = r.task_assay_cd
 
  order by
    task_assay_disp
 
  head report
    ce_activity_cnt = 0
    nf_activity_cnt = 0
 
  head task_assay_disp
    if ((interface_flag != 1) and (cver_ind = "N"))
      nf_activity_cnt = nf_activity_cnt + 1
      if (mod(nf_activity_cnt, 10) = 1)
        stat = alterlist(assay_nf->assay, nf_activity_cnt + 10)
      endif
 
      ;*
      ;* List of assays not on code_value_event_r table (not aliased)
      ;*
      assay_nf->assay[nf_activity_cnt].task_assay_cd = r.task_assay_cd
      assay_nf->assay[nf_activity_cnt].task_assay_disp = task_assay_disp
    endif
 
  detail
    ce_activity_cnt = ce_activity_cnt + 1
    if (mod(ce_activity_cnt, 100) = 1)
      stat = alterlist(activity->qual, ce_activity_cnt + 100)
    endif
 
    ;*
    ;* Records of activity data in time frame
    ;*
    activity->qual[ce_activity_cnt].accession = aor.accession
    activity->qual[ce_activity_cnt].order_id = r.order_id
    activity->qual[ce_activity_cnt].catalog_cd = r.catalog_cd
    activity->qual[ce_activity_cnt].task_assay_cd = r.task_assay_cd
    activity->qual[ce_activity_cnt].result_id = r.result_id
    activity->qual[ce_activity_cnt].result_dt_tm = re.event_dt_tm
    activity->qual[ce_activity_cnt].result_type_cd = re.event_type_cd
    activity->qual[ce_activity_cnt].result_type_cd = re.event_type_cd
    activity->qual[ce_activity_cnt].activity_type_cd = aor.activity_type_cd                        ;011
    activity->qual[ce_activity_cnt].ref_nbr =
              trim(build(r.order_id, r.result_id, r.task_assay_cd))
    if (cver_ind = "N")
      activity->qual[ce_activity_cnt].alias_nf_ind = 1
    else
      activity->qual[ce_activity_cnt].alias_nf_ind = 0
    endif
 
  foot report
    stat = alterlist(activity->qual, ce_activity_cnt)
    stat = alterlist(assay_nf->assay, nf_activity_cnt)
 
  with outerjoin = d1,
       nocounter
 
  if (ERROR_MESSAGE(1) = 1)
    go to exit_script
  endif
 
  if (ce_activity_cnt < 1)                                                                         ;013
    go to exit_script                                                                              ;013
  endif                                                                                            ;013

/***********************************************************************
 * Retrieve Qualifying Data not in Clinical Events and Write Report    *
 ***********************************************************************/
  select into concat(value(output_dest))
    order_id = activity->qual[d1.seq]->order_id,                             ;012
    accn2 = activity->qual[d1.seq]->accession,                               ;012
    ce1_ind = decode(ce1.seq, "Y", "N"),
;010     ce2_ind = decode(ce2.seq, "Y", "N")
    ce2_ind = decode(ce2.seq, "Y", "N"),                                                           ;010
    task_assay_cd = activity->qual[d1.seq]->task_assay_cd,                                         ;010
    result_dt_tm = cnvtdatetime(activity->qual[d1.seq]->result_dt_tm)                              ;010
  from
    (dummyt d1 with seq = value(ce_activity_cnt)),
    dummyt d2,
    clinical_event ce1,
    dummyt d3,
    perform_result pr2,
    result_event re2,
    clinical_event ce2
  plan d1
  join d2
    where d2.seq = 1
  join ce1
    where ce1.reference_nbr = activity->qual[d1.seq]->ref_nbr
      and ce1.verified_dt_tm =
              cnvtdatetime(activity->qual[d1.seq]->result_dt_tm)
  join d3
    where d3.seq = 1
  join pr2
    where pr2.result_id = activity->qual[d1.seq]->result_id
      and pr2.result_status_cd in (ver_cd, auto_ver_cd, cor_cd)
  join re2
    where re2.result_id = pr2.result_id
      and re2.perform_result_id = pr2.perform_result_id
  join ce2
    where ce2.reference_nbr = activity->qual[d1.seq]->ref_nbr
      and ce2.verified_dt_tm = re2.event_dt_tm
 
  order by
;012    activity->qual[d1.seq]->accession,
;010     cnvtdatetime(activity->qual[d1.seq]->result_dt_tm),
;010     activity->qual[d1.seq]->order_id
;012    activity->qual[d1.seq]->order_id,                                                              ;010
    accn2,                                                   ;012
    order_id,                                                ;012
    task_assay_cd,                                                                                 ;010
    result_dt_tm                                                                                   ;010
 
 
  head report
    reply_cnt = 0
 
    if (interface_flag != 1)
;014      call center("GLB Activity and Clinical Event Audit Report", 0, 125)
      call center(EventCaptions->title2, 0, 125)                                          ;014
      row + 1
;014      col 34,  "Date Range:"
      col 34,  EventCaptions->daterange                                                   ;014
;014      col + 1, dates->start_dt_tm "DD-MMM-YYYY HH:MM:SS;;D"
      dispDate = concat(format(dates->start_dt_tm, "@MEDIUMDATE4YR;;q"), " ",             ;014
                       format(dates->start_dt_tm, "@TIMEWITHSECONDS;;q"))                 ;014
      col + 1, dispDate                                                                   ;014
      col + 1, "-"
;014      col + 1, dates->end_dt_tm "DD-MMM-YYYY HH:MM:SS;;D"
      dispDate = concat(format(dates->end_dt_tm, "@MEDIUMDATE4YR;;q"), " ",               ;014
                       format(dates->end_dt_tm, "@TIMEWITHSECONDS;;q"))                   ;014
      col + 1, dispDate                                                                   ;014
      row + 2
      prt_page_head = 1
    endif
 
  head page
    if (interface_flag != 1)
      if (prt_page_head = 1)
;014        col 0,   "Accession"
;014        col 23,  "Order Mnemonic"
;014        col 45,  "Assay Mnemonic"
;014        col 67,  "Event Type"
;014        col 83,  "Event Date/Time"

        col 0,   EventCaptions->accession                         ;014
        col 23,  EventCaptions->ordermne                          ;014
        col 45,  EventCaptions->assaymne                          ;014
        col 67,  EventCaptions->eventtype                         ;014
        col 83,  EventCaptions->eventdtTm                         ;014

;010         col 99,  "Current"
;014        col 99,  "Curr CE"                                                                         ;010
;014        col 107, "Result ID"
        col 99,  EventCaptions->currce                             ;014
        col 107, EventCaptions->resultid                           ;014
        row + 1
      else
;014        col 2,  "Assays not configured to post to Clinical Event tables:"
        col 2,  EventCaptions->notconfig                           ;014
        row + 1
;014        col 0,  "Assay"
;014        col 21, "Alias"
        col 0,  EventCaptions->assay                               ;014
        col 21, EventCaptions->alias                               ;014
        row + 1
      endif
    endif
 
  detail
;010     if (ce1_ind = "N")
    if ((ce1_ind = "N") and (curr_result_ind = 0))                                                 ;010
      ;*
      ;* Records that should be on clinical_event table, but are not
      ;*
;012      reply_cnt = reply_cnt + 1
      if (interface_flag != 1)
        accn = substring(0,20,trim(uar_fmt_accession(activity->
                                                     qual[d1.seq]->accession,
                                   size(activity->qual[d1.seq]->accession,1))))
        catalog_disp = substring(0,20,trim(UAR_GET_CODE_DISPLAY(activity->
                                           qual[d1.seq]->catalog_cd),3))
        task_assay_disp = substring(0,20,trim(UAR_GET_CODE_DISPLAY(activity->
                                              qual[d1.seq]->task_assay_cd),3))
        result_type_disp = substring(0,15,trim(UAR_GET_CODE_DISPLAY(activity->
                                               qual[d1.seq]->result_type_cd),3))
        result_id = trim(cnvtstring(activity->qual[d1.seq]->result_id,19,0),3)
 
        col 0    accn
        if (activity->qual[d1.seq]->alias_nf_ind = 0)
;014          col + 1, "*"
          col + 1, EventCaptions->ask                                   ;014
        else
          col + 1, " "
        endif
        col + 1, catalog_disp
        col + 2, task_assay_disp
        col + 2, result_type_disp
        dispDate = concat(format(activity->qual[d1.seq]->result_dt_tm, "@MEDIUMDATE;;q"), " ",  ;014
                       format(activity->qual[d1.seq]->result_dt_tm, "@TIMENOSECONDS;;q"))          ;014
        col + 1, dispDate                                                                          ;014
;014        col + 1, activity->qual[d1.seq]->result_dt_tm "DD-MMM-YY HH:MM;;D"
        col 102, ce2_ind
        col 107, result_id
        row + 1
;012      else
;012        if (activity->qual[d1.seq]->activity_type_cd = glb_cd)                                     ;011
;012          if (mod(reply_cnt, 100) = 1)
;012            stat = alterlist(reply->qual, reply_cnt + 100)
;012          endif
;012
;012          reply->qual[reply_cnt].accession = activity->qual[d1.seq]->accession
;012          reply->qual[reply_cnt].order_id = activity->qual[d1.seq]->order_id
;012          reply->qual[reply_cnt].catalog_cd = activity->qual[d1.seq]->catalog_cd
;012          reply->qual[reply_cnt].task_assay_cd =
;012                 activity->qual[d1.seq]->task_assay_cd
;012          reply->qual[reply_cnt].result_id = activity->qual[d1.seq]->result_id
;012          reply->qual[reply_cnt].result_type_cd =
;012                 activity->qual[d1.seq]->result_type_cd
;012          reply->qual[reply_cnt].result_dt_tm =
;012                 activity->qual[d1.seq]->result_dt_tm
;012          reply->qual[reply_cnt].ref_nbr = activity->qual[d1.seq]->ref_nbr,
;012          reply->qual[reply_cnt].alias_nf_ind =
;012                 activity->qual[d1.seq]->alias_nf_ind
;012          if (ce2_ind = "Y")
;012            reply->qual[reply_cnt].final_event_ind = 1
;012          else
;012            reply->qual[reply_cnt].final_event_ind = 0
;012          endif
;012        endif                                                                                      ;011
      endif
    endif
 
  foot accn2                                                ;012
    row +0                                                  ;012
                                                            ;012
  foot order_id                                             ;012
    row +0                                                  ;012
 
 
  foot task_assay_cd                                                                               ;010
    if ((ce1_ind = "N") and ((ce2_ind = "N") and (curr_result_ind = 1)))                           ;010
      ;*                                                                                           ;010
      ;* Records that should be on clinical_event table, but are not                               ;010
      ;*                                                                                           ;010
      if (interface_flag != 1)                                                                     ;010
        accn = substring(0,20,trim(uar_fmt_accession(activity->                                    ;010
                                                     qual[d1.seq]->accession,                      ;010
                                   size(activity->qual[d1.seq]->accession,1))))                    ;010
        catalog_disp = substring(0,20,trim(UAR_GET_CODE_DISPLAY(activity->                         ;010
                                           qual[d1.seq]->catalog_cd),3))                           ;010
        task_assay_disp = substring(0,20,trim(UAR_GET_CODE_DISPLAY(activity->                      ;010
                                              qual[d1.seq]->task_assay_cd),3))                     ;010
        result_type_disp = substring(0,15,trim(UAR_GET_CODE_DISPLAY(activity->                     ;010
                                               qual[d1.seq]->result_type_cd),3))                   ;010
        result_id = trim(cnvtstring(activity->qual[d1.seq]->result_id,19,0),3)                          ;010
 
        col 0    accn                                                                              ;010
        if (activity->qual[d1.seq]->alias_nf_ind = 0)                                              ;010
;014          col + 1, "*"
          col + 1, EventCaptions->ask                                   ;014
        else                                                                                       ;010
          col + 1, " "                                                                             ;010
        endif                                                                                      ;010
        col + 1, catalog_disp                                                                      ;010
        col + 2, task_assay_disp                                                                   ;010
        col + 2, result_type_disp                                                                  ;010
        dispDate = concat(format(activity->qual[d1.seq]->result_dt_tm, "@MEDIUMDATE;;q"), " ",     ;014
                       format(activity->qual[d1.seq]->result_dt_tm, "@TIMENOSECONDS;;q"))          ;014
        col + 1, dispDate                                                                          ;014
;014        col + 1, activity->qual[d1.seq]->result_dt_tm "DD-MMM-YY HH:MM;;D"                         ;010
        col 102, ce2_ind                                                                           ;010
        col 107, result_id                                                                         ;010
        row + 1                                                                                    ;010
      else                                                                                         ;010
        if (activity->qual[d1.seq]->activity_type_cd = glb_cd)                                     ;011
          reply_cnt = reply_cnt + 1                                                                    ;010
 
          if (mod(reply_cnt, 100) = 1)                                                             ;010
            stat = alterlist(reply->qual, reply_cnt + 100)                                         ;010
          endif                                                                                    ;010
 
          reply->qual[reply_cnt].accession = activity->qual[d1.seq]->accession                     ;010
          reply->qual[reply_cnt].order_id = activity->qual[d1.seq]->order_id                       ;010
          reply->qual[reply_cnt].catalog_cd = activity->qual[d1.seq]->catalog_cd                   ;010
          reply->qual[reply_cnt].task_assay_cd =                                                   ;010
                 activity->qual[d1.seq]->task_assay_cd                                             ;010
          reply->qual[reply_cnt].result_id = activity->qual[d1.seq]->result_id                     ;010
          reply->qual[reply_cnt].result_type_cd =                                                  ;010
                 activity->qual[d1.seq]->result_type_cd                                            ;010
          reply->qual[reply_cnt].result_dt_tm =                                                    ;010
                 activity->qual[d1.seq]->result_dt_tm                                              ;010
          reply->qual[reply_cnt].ref_nbr = activity->qual[d1.seq]->ref_nbr,                        ;010
          reply->qual[reply_cnt].alias_nf_ind =                                                    ;010
                 activity->qual[d1.seq]->alias_nf_ind                                              ;010
          if (ce2_ind = "Y")                                                                       ;010
            reply->qual[reply_cnt].final_event_ind = 1                                             ;010
          else                                                                                     ;010
            reply->qual[reply_cnt].final_event_ind = 0                                             ;010
          endif                                                                                    ;010
        endif                                                                                      ;011
      endif                                                                                        ;010
    endif                                                                                          ;010
 
  foot report
    stat = alterlist(reply->qual, reply_cnt)
 
    if (interface_flag != 1)
      row + 1                                                                                      ;010
;014      col 0, "NOTE:  Curr CE column indicates whether the most recent 
;014                result for this discrete assay is in clinical events."  ;010
      col 0, EventCaptions->note1                                                           ;014
      row + 1                                                                                      ;010
;014      col 0, "       An 'N' in this column means action must be taken to ensure the 
;014                correct results are in clinical events."  ;010
      col 0, "      "                                                                      ;014
      col +1, EventCaptions->note2                                                          ;014
 
      if (nf_activity_cnt > 0)                                                                     ;010
        prt_page_head = 0
        break                                                                                      ;010
;010         row + 1
;010         col 2,  "Assays not configured to post to Clinical Event tables:"
;010         row + 1
;010         col 0,  "Assay"
;010         col 21, "Alias"
;010         row + 1
        for (i = 1 to nf_activity_cnt)
          task_assay = trim(cnvtstring(assay_nf->assay[i]->task_assay_cd, 19, 0, r))
 
          col 0,   assay_nf->assay[i]->task_assay_disp
          col + 1, task_assay
          row + 1
        endfor
      endif                                                                                        ;010
    endif
 
  with outerjoin = d2,
       outerjoin = d3,
       dontcare = ce1,
       nullreport,
       nocounter
 
  if (ERROR_MESSAGE(1) = 1)
    go to exit_script
  endif
 
/***********************************************************************
 * Exit Script                                                         *
 ***********************************************************************/
#exit_script
  if (reply_cnt = 0)
    set reply->status_data->status = "Z"
  else
    set reply->status_data->status = "S"
  endif
 
  call uar_SysDestroyHandle(hSys)
end go

;Generated by GNU enscript 1.6.4.
