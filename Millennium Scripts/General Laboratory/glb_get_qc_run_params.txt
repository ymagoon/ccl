 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_qc_run_params/glb_get_qc_run_params.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_QC_RUN_PARAMS.PRG
        Object name:            GLB_GET_QC_RUN_PARAMS
        Request #:              257549

        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieves parameters for qc run for a given testsite

        Tables read:            run_setup
                                run_cntrl

        Tables updated:         n/a

        Executing from:         PathNet General Lab:  DB QC Run Build DLL

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 04/01/97 Chad Moats           Initial Release                     *
;     001 11/30/98 Gary Runde		Change for new tables               *
;     002 08/18/00 Gary Runde		Return new values for new QCScheduler
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_QC_RUN_PARAMS:dba go
      create program GLB_GET_QC_RUN_PARAMS:dba

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 service_resource_cd            = f8
         1 task_assay_cd                  = f8
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
        1 service_resource_cd          = f8
        1 service_resource_disp        = vc
        1 qc_schedule_id               = f8
        1 start_dt_tm                  = dq8
        1 active_ind                   = i2
        1 multi_control_limit          = i4          ;002
        1 steps[*]
          2 qc_schedule_id             = f8
          2 step_nbr                   = i4
          2 interval_min               = i4
          2 cntrls[*]
            3 qc_schedule_id           = f8
            3 step_nbr                 = i4
            3 control_id               = f8
            3 control_name             = vc
            3 assays[*]
              4 task_assay_cd          = f8
              4 task_assay_disp        = c40
          2 verify_minutes_nbr         = i4
          2 verify_results_nbr         = i4
        1 enforce_verified_results_ind = i2
        1 reminder_minutes_nbr         = i4
        1 reminder_results_nbr         = i4          
        1 status_data
          2 status                     = c1
          2 subeventstatus[1]
            3 OperationName            = c15
            3 OperationStatus          = c1
            3 TargetObjectName         = c15
            3 TargetObjectValue        = vc
      )

     #Script
      declare qssc_cnt = i4 with protect, noconstant(0)
      
      set reply->status_data->status = "F"
      set qs_cnt = 0
      set qst_cnt = 0
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

/*******************************************************************/
/* Get QC Run parameters                                           */
/*******************************************************************/

         SELECT
          into  "nl:"
            qs.service_resource_cd,
            qst.step_nbr,
            qst_exists_ind = evaluate(nullind(qst.qc_schedule_id),0,1,0),
            qsc.control_id,
            qsc_exists_ind = evaluate(nullind(qsc.qc_schedule_id),0,1,0),
            qsc.control_id,
            qssc_exists_ind = evaluate(nullind(qssc.qc_schedule_id),0,1,0),
            qs.multi_control_limit,
            cm.short_description
            
         FROM
            qc_schedule qs,
            qc_schedule_step qst,
            qc_schedule_ctrl qsc,
            control_material cm,
            qc_schd_step_ctrl_assay qssc
         PLAN qs
            where qs.service_resource_cd = request->service_resource_cd and
            qs.active_ind = 1
         JOIN qst
           where qst.qc_schedule_id = outerjoin(qs.qc_schedule_id)
         JOIN qsc
            where qsc.qc_schedule_id = outerjoin(qst.qc_schedule_id)
            and qsc.step_nbr = outerjoin(qst.step_nbr)
            and qsc.error_step_ind = outerjoin(qst.error_step_ind)
         JOIN cm
            where cm.control_id = outerjoin(qsc.control_id)
         JOIN qssc
             where qssc.control_id = outerjoin(qsc.control_id)
             and qssc.error_step_ind = outerjoin(qsc.error_step_ind)
             and qssc.qc_schedule_id = outerjoin(qsc.qc_schedule_id)
             and qssc.step_nbr = outerjoin(qsc.step_nbr)
;002         ORDER BY qs.qc_schedule_id, qst.step_nbr, cm.short_description
         ORDER BY qs.qc_schedule_id, qst.step_nbr, qsc.control_id, qssc.task_assay_cd
         HEAD qs.qc_schedule_id
            reply->service_resource_cd  = qs.service_resource_cd
            reply->qc_schedule_id       = qs.qc_schedule_id
            reply->multi_control_limit  = qs.multi_control_limit
            reply->start_dt_tm          = qs.start_dt_tm
            reply->active_ind           = qs.active_ind
            reply->enforce_verified_results_ind = qs.enforce_verified_results_ind
            reply->reminder_minutes_nbr = qs.reminder_minutes_nbr
            reply->reminder_results_nbr = qs.reminder_results_nbr
            qst_cnt = 0
         HEAD qst.step_nbr
           if (qst_exists_ind = 1)
            qst_cnt = qst_cnt + 1
            IF (mod(qst_cnt, 5) = 1)
              stat = alterlist(reply->steps, qst_cnt + 5)
            ENDIF
            reply->steps[qst_cnt].qc_schedule_id         = qst.qc_schedule_id
            reply->steps[qst_cnt].step_nbr               = qst.step_nbr
            reply->steps[qst_cnt].interval_min           = qst.interval_min
            reply->steps[qst_cnt].verify_minutes_nbr     = qst.verify_minutes_nbr
            reply->steps[qst_cnt].verify_results_nbr     = qst.verify_results_nbr           
          endif
          qsc_cnt = 0
         HEAD qsc.control_id
          if (qsc_exists_ind = 1)
            qsc_cnt = qsc_cnt + 1
            IF (mod(qsc_cnt, 5) = 1)
              stat = alterlist(reply->steps[qst_cnt]->cntrls, qsc_cnt + 5)
            ENDIF
            reply->steps[qst_cnt]->cntrls[qsc_cnt]->qc_schedule_id      = qsc.qc_schedule_id
            reply->steps[qst_cnt]->cntrls[qsc_cnt]->step_nbr            = qsc.step_nbr
            reply->steps[qst_cnt]->cntrls[qsc_cnt]->control_id          = qsc.control_id
            reply->steps[qst_cnt]->cntrls[qsc_cnt]->control_name        = cm.short_description
           endif
           qssc_cnt = 0
         HEAD qssc.task_assay_cd
          if (qssc_exists_ind = 1)
            qssc_cnt = qssc_cnt + 1
            IF (qssc_cnt > size(reply->steps[qst_cnt]->cntrls[qsc_cnt].assays, 5))
              stat = alterlist(reply->steps[qst_cnt]->cntrls[qsc_cnt].assays, qssc_cnt + 5)
            ENDIF
            reply->steps[qst_cnt]->cntrls[qsc_cnt]->assays[qssc_cnt]->task_assay_cd = qssc.task_assay_cd
          endif
         FOOT qsc.control_id
            if (qssc_cnt > 0)
             stat = alterlist(reply->steps[qst_cnt]->cntrls[qsc_cnt]->assays, qssc_cnt)
           endif
         FOOT qst.step_nbr
            if (qsc_cnt > 0)
              stat = alterlist(reply->steps[qst_cnt]->cntrls, qsc_cnt)
            endif
         FOOT qs.qc_schedule_id
            if (qst_cnt > 0)
              stat = alterlist(reply->steps, qst_cnt)
            endif
         WITH
            nocounter,
            outerjoin = d1,
            outerjoin = d2

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

      IF (curqual = 0)
         go to none_found
      ENDIF

      if (qs_cnt > 0)
        set stat = alterlist(reply->params, qs_cnt)
      endif

      set reply->status_data->status = "S"
      go to exit_script

/********************************************************************/
/* Executed if requested description is not found.                  */
/********************************************************************/
     #none_found
      set reply->status_data->subeventstatus[1]->operationname =
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "S"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "service_resource table"
      set reply->status_data->status = "Z"

      go to exit_script

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
END GO

;Generated by GNU enscript 1.6.4.
