 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_dta/glb_get_dta.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_DTA.PRG
        Object name:            GLB_GET_DTA
        Request #:              250039

        Product:                Nexus Doc
        Product Team:           GLB
		HNA Version:            500
        CCL Version:            4.0

        Program purpose:        get dta from
                                the Discrete_task_assay and
								assay_process_r table

        Tables read:            Discrete_task_assay,assay_process_r
        Tables updated:         -
        Executing from:         EquationBuildDLL

        Special Notes:          -

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date       Engineer             Comment                           *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 09/22/2003 Fone Ji            Initial Release                     *
;     001 02/04/2005 Andrew Dittrich    Now PLAN on discrete_task_assay     *
;                                       table to ensure exact match.        *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program glb_get_dta:dba go
create program glb_get_dta:dba
/*
record request
(
  1 task_assay_cd             = f8
  1 mnemonic                  = vc
  1 service_resource_cd       = f8
  1 result_type_cdf           = vc
)
*/

record reply
(
  1 task_assay_cd             = f8
%i cclsource:status_block.inc
)


#Script
declare failed = c1
declare sErrorMsg=vc
declare error_check=f8
set failed = "F"
set reply->status_data->status = "F"
set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
set error_check = ERROR(sErrorMsg,1)
set reply->status_data->status = "F"


declare  rq_result_type_calc=f8
declare  rq_result_type_num=f8

set rq_result_type_calc=0
set rq_result_type_num=0

if (request->task_assay_cd = 0)
    set uprMne = cnvtupper(request->mnemonic)
endif


if (request->result_type_cdf != "0")
	set rq_result_type_calc = uar_get_code_by( "MEANING", 289, "8" )
	set rq_result_type_num  = uar_get_code_by( "MEANING", 289, "3" )
endif


	SELECT
         if ((request->task_assay_cd > 0) and (request->service_resource_cd > 0) and (request->result_type_cdf = "8"))
            PLAN d
               WHERE d.task_assay_cd = request->task_assay_cd
            JOIN a
               WHERE a.task_assay_cd = d.task_assay_cd
                  and a.service_resource_cd = request->service_resource_cd
                  and a.default_result_type_cd = rq_result_type_calc
         elseif ((request->service_resource_cd > 0) and (request->result_type_cdf = "8"))
            PLAN d
               WHERE d.mnemonic_key_cap = uprMne
            JOIN a
               WHERE a.task_assay_cd = d.task_assay_cd
                  and  a.service_resource_cd = request->service_resource_cd
                  and   a.default_result_type_cd = rq_result_type_calc
         elseif ((request->task_assay_cd > 0) and (request->result_type_cdf = "8"))
            PLAN d
               WHERE d.task_assay_cd = request->task_assay_cd
            JOIN a
               WHERE a.task_assay_cd = d.task_assay_cd
                  and a.default_result_type_cd = rq_result_type_calc
         elseif (request->result_type_cdf = "8")
            PLAN d
               WHERE d.mnemonic_key_cap = uprMne
            JOIN a
               where a.task_assay_cd = d.task_assay_cd
                  and a.default_result_type_cd = rq_result_type_calc
         endif
      INTO "nl:"
      FROM
         discrete_task_assay d,
         assay_processing_r a
      PLAN d
         where d.mnemonic_key_cap = uprMne
      JOIN a
         where a.task_assay_cd = d.task_assay_cd
      DETAIL
         reply->task_assay_cd = a.task_assay_cd
      WITH
         nocounter

	/***get error message***/
	set error_check = ERROR(sErrorMsg,0)
    if (error_check != 0)
    	set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        set failed = "T"
        go to exit_script
    endif

if (curqual = 0)
	SELECT

	if(request->task_assay_cd>0)
		PLAN d
		WHERE d.default_result_type_cd in( rq_result_type_calc,rq_result_type_num)
			and d.task_assay_cd = request->task_assay_cd
			and d.active_ind = 1
	elseif(request->task_assay_cd=0 )
		PLAN d
		WHERE d.default_result_type_cd in( rq_result_type_calc,rq_result_type_num)
			and d.mnemonic_key_cap = uprMne
			and d.active_ind = 1
	endif
	INTO "nl"
	FROM
	 	discrete_task_assay d

	DETAIL

	reply->task_assay_cd = d.task_assay_cd

	with nocounter

	/***get error message***/
	set error_check = ERROR(sErrorMsg,0)
        if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           set failed = "T"
           go to exit_script
        endif
endif

    if (curqual = 0)
        go to invalid_dta
    endif

    go to exit_script

/********************************************************************/
/* Executed if requested dta is not found.                          */
/********************************************************************/
	#invalid_dta
    set failed = "Z"
    go to exit_script


/*******Script exit*******/
	#exit_script
    if (failed = "F")
       set reply->status_data->status = "S"
    elseif (failed = "Z")
       set reply->status_data->status = "Z"
    else
       set reply->status_data->status = "F"
    endif
END
GO







;Generated by GNU enscript 1.6.4.
