 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_qc_results/glb_rpt_qc_results.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_RPT_QC_RESULTS.PRG
        Object name:            GLB_RPT_QC_RESULTS
        Request #:              257544

        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve QC Result info from the database
                                and produce outlier report

        Tables read:            qc_result
                                resource_accession_r
                                control_lot
                                accession
                                discrete_task_assay
                                nomenclature
                                prsnl
                                qc_comment

        Tables updated:         n/a

        Executing from:         General Lab QC Inquiry

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/16/97 Chad Moats           Initial Release                     *
;    *001 11/18/97 Hal Patchen          Add subsection level data map check *
;    *002 12/12/97 Kevin Brunner        Add auto verify logic               *
;    *003 01/22/98 Chad Moats           Add operaions logic                 *
;    *004 09/18/98 Chad Moats           Add patient data logic              *
;    *005 05/03/99 Chad Moats           Removed multiple joins to code_value*
;    *006 09/08/99 Gary Runde           Make sure results qualify before    *
;                                       printing comments                   *
;    *007 09/15/99 Gary Runde           Verified instead of performed tech  *
;                                       Show page numbers                   *
;                                       Show failed rules                   *
;                                       Show secondary reviewed (if exists) *
;                                       Add "summary of statuses"           *
;    *008 11/23/99 Gary Runde           Additional report changes           *
;    *009 12/07/99 Gary Runde           Internationalization                *
;    *010 02/23/99 Gary Runde           Remove Verf Tech column for PDM     *
;    *011 07/05/00 Gary Runde           Show comments for PDM               *
;    *012 03/22/04 Craig Sumrall        Added lists to the request and the  *
;    *                                  logic to parse it.                  *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
      drop program GLB_RPT_QC_RESULTS:dba go
      create program GLB_RPT_QC_RESULTS:dba

;009 Start New Code

; Free record structures
free set I18N_Captions
free set reply
free set formatted
free set failed_rules
free set trouble_steps
free set data_map
free set cmt
free set ops_params

; I18N INCLUDE FILE
%i cclsource:i18n_uar.inc

; INITIALIZE VARIABLE THAT KEEPS HANDLE TO I18N DATA
set i18nHandle = 0

; CALL uar_i18nlocalizationinit
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)

record I18N_Captions (
        1 ASSAY = vc
        1 RESULT = vc
        1 FLAG = vc
        1 PERF_DATE = vc
        1 VERF_TECH = vc
        1 ACTION = vc
        1 REV_TECH = vc
        1 REV_DATE = vc
        1 SEC_REV = vc
        1 SEC_REV_DATE = vc
        1 pat_dat = vc
        1 rpt_no = vc
        1 prg = vc
        1 tm = vc
        1 as_of = vc
        1 prep = vc
        1 ctrl_mat = vc
        1 serv_res = vc
        1 qc_ident = vc
        1 dt_rnge = vc
        1 lot_no = vc
        1 instrument = vc
        1 rslt_com = vc
        1 trbl_step = vc
        1 page_no = vc
        1 RULES_FAILED = vc

        1 tot_stat = vc
        1 COUNT = vc
        1 verified = vc
        1 accepted = vc
        1 changed = vc
        1 rejected = vc
        1 discarded = vc
        1 total = vc
        1 per_tot = vc
        1 na = vc
)
set I18N_Captions->ASSAY = uar_i18ngetmessage(i18nHandle,"key_4","ASSAY")
set I18N_Captions->RESULT = uar_i18ngetmessage(i18nHandle,"key_5","RESULT")
set I18N_Captions->FLAG = uar_i18ngetmessage(i18nHandle,"key_6","FLAG")
set I18N_Captions->PERF_DATE = uar_i18ngetmessage(i18nHandle,"key_7","PERF DATE")
set I18N_Captions->VERF_TECH = uar_i18ngetmessage(i18nHandle,"key_8","VERF TECH")
set I18N_Captions->ACTION = uar_i18ngetmessage(i18nHandle,"key_9","ACTION")
set I18N_Captions->REV_TECH = uar_i18ngetmessage(i18nHandle,"key_10","REV TECH")
set I18N_Captions->REV_DATE = uar_i18ngetmessage(i18nHandle,"key_11","REV DATE")
set I18N_Captions->SEC_REV = uar_i18ngetmessage(i18nHandle,"SECREV","SEC REV")
set I18N_Captions->SEC_REV_DATE = uar_i18ngetmessage(i18nHandle,"SCREVDATE","SEC REV DATE")

Set I18N_Captions->pat_dat = uar_i18ngetmessage(i18nHandle,"pat_dat","Patient Data")
Set I18N_Captions->rpt_no = uar_i18ngetmessage(i18nHandle,"rpt_no","REPORT NO:  ")
Set I18N_Captions->prg = uar_i18ngetmessage(i18nHandle,"prg","GLB_RPT_QC_RESULTS.PRG")
Set I18N_Captions->tm = uar_i18ngetmessage(i18nHandle,"tm","TIME: ")
Set I18N_Captions->as_of = uar_i18ngetmessage(i18nHandle,"as_of","AS OF DATE: ")
Set I18N_Captions->prep = uar_i18ngetmessage(i18nHandle,"prep","PREPARED: ")
Set I18N_Captions->ctrl_mat = uar_i18ngetmessage(i18nHandle, "ctrl_mat","CONTROL MATERIAL: ")
Set I18N_Captions->serv_res = uar_i18ngetmessage(i18nHandle, "serv_res","SERVICE RESOURCE:")
Set I18N_Captions->qc_ident = uar_i18ngetmessage(i18nHandle, "qc_ident","QC IDENTIFIER:")
Set I18N_Captions->dt_rnge = uar_i18ngetmessage(i18nHandle, "dt_rnge","DATE RANGE: ")
Set I18N_Captions->lot_no = uar_i18ngetmessage(i18nHandle, "lot_no","LOT NUMBER:  ")
Set I18N_Captions->instrument = uar_i18ngetmessage(i18nHandle, "instrument","INSTRUMENT        ")
Set I18N_Captions->rslt_com = uar_i18ngetmessage(i18nHandle, "rslt_com","RESULT COMMENT:  ")
Set I18N_Captions->trbl_step = uar_i18ngetmessage(i18nHandle, "trbl_step","TROUBLESHOOTING STEP:  ")
Set I18N_Captions->page_no = uar_i18ngetmessage(i18nHandle, "pageno","PAGE NO: ")
Set I18N_Captions->RULES_FAILED = uar_i18ngetmessage(i18nHandle, "RULES_FAILED","RULES FAILED:")

Set I18N_Captions->tot_stat = uar_i18ngetmessage(i18nHandle,"tot_stat","TOTAL OF ACTIONS FOUND WITHIN THE DATE RANGE:")
Set I18N_Captions->COUNT = uar_i18ngetmessage(i18nHandle,"COUNT","COUNT")
Set I18N_captions->verified = uar_i18ngetmessage(i18nHandle,"verified","VERIFIED")
Set I18N_captions->accepted = uar_i18ngetmessage(i18nHandle,"accepted","ACCEPTED")
Set I18N_captions->discarded = uar_i18ngetmessage(i18nHandle,"discarded","DISCARDED")
Set I18N_captions->changed = uar_i18ngetmessage(i18nHandle,"changed","CHANGED")
Set I18N_captions->rejected = uar_i18ngetmessage(i18nHandle,"rejected","REJECTED")
Set I18N_captions->total = uar_i18ngetmessage(i18nHandle,"total","TOTAL")
Set I18N_Captions->COUNT = uar_i18ngetmessage(i18nHandle,"COUNT","COUNT")
Set I18N_captions->per_tot = uar_i18ngetmessage(i18nHandle,"%tot","% OF TOTAL")
Set I18N_captions->na = uar_i18ngetmessage(i18nHandle,"n/a","N/A")


;009 End New Code
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 task_assay_cd                = f8
         1 control_id                   = f8
         1 service_resource_cd          = f8
         1 begin_date                   = dq8
         1 end_date                     = dq8
         1 accept_ind                   = i2
         1 verify_ind                   = i2
         1 review_ind                   = i2
         1 change_ind                   = i2
         1 oldchange_ind                = i2
         1 reject_ind                   = i2
         1 discard_ind                  = i2
         1 incontrol_ind                = i2
         1 outcontrol_ind               = i2
         1 qc_result_type_flag          = i2
         1 printer_name                 = vc
         1 batch_selection              = vc
         1 output_dist                  = vc
         1 ops_date                     = dq8
         1 controls[*]
           2 control_id                 = f8
         1 test_sites[*]
           2 service_resource_cd        = f8
         1 assays[*]
           2 task_assay_cd              = f8
         1 lot_to_date_ind              = i2
         1 lot_type_flag                = i2
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
         1 file_name                 = vc    
      )

         ;* Data used to format a numeric result
         record formatted
         (
            01  template     = c33
            01  negative_ind = i2
            01  digits       = i4
            01  result_value = c36
         )


     ;record to hold the failed rules                      ;007
     record failed_rules                                   ;007
     (                                                     ;007
         1 qual[*]                                         ;007
           2 qc_result_id                     = f8         ;007
           2 num_rules                        = i4         ;007
           2 rules[*]                                      ;007
             3 rule_definition                = vc         ;007
     )                                                     ;007

     ;record to hold the trouble steps                     ;007
     record trouble_steps                                  ;007
     (                                                     ;007
         1 qual[*]                                         ;007
           2 qc_result_id                     = f8         ;007
           2 num_steps                        = i4         ;007
           2 steps[*]                                      ;007
               3 step                         = vc         ;007
     )                                                     ;007

     record data_map
      (
         1  dms[*]
            2  task_assay_cd                = f8
            2  max_digits                   = i2
            2  min_digits                   = i2
            2  min_decimal_places           = i2
       )

      record cmt
       (
         1 comments[*]
            2 qc_result_id                 = f8
            2 comment_type_cd              = f8
            2 action_sequence              = i4
            2 perform_prsnl_id             = f8
            2 comment_text                 = vc
            2 comment_prsnl_name           = vc
            2 comment_dt_tm                = dq8
       )

      record ops_params                                                                         ;003
      (                                                                                         ;003
         1  qual[12]                                                                            ;004
            2  param                     = c100                                                 ;003
      )                                                                                         ;003

     #Script
      set RESULT_STATUS_CODESET       = 1901
      set RESULT_PROCESS_CODESET       = 1902
      set FOOTNOTE_CODESET            = 14
      set RESULT_TYPE_CODESET         = 289
      set RESULT_STATUS_ACCEPT_CDF    = "ACCEPT"
      set RESULT_STATUS_VERIFIED_CDF  = "VERIFIED"
      set RESULT_STATUS_AUTO_VERF_CDF = "AUTOVERIFIED"                                          ;002
      set RESULT_STATUS_REVIEWED_CDF = "REVIEWED"
      set RESULT_STATUS_REVIEWED2_CDF = "REVIEWED2"                              ;007
      set RESULT_STATUS_CORRECTED_CDF = "CORRECTED"
      set RESULT_STATUS_OLDCORRECTED_CDF  = "OLDCORRECTED"
      set RESULT_STATUS_CHANGED_CDF = "CHANGE"
      set RESULT_STATUS_OLDCHANGED_CDF = "OLD CHANGE"
      set RESULT_STATUS_REJECTED_CDF = "REJECT"
      set RESULT_STATUS_DISCARDED_CDF = "DISCARD"
      set RESULT_PROCESS_INCONTROL_CDF = "IN_CONTROL"
      set RESULT_PROCESS_OUTCONTROL_CDF = "OUT_CONTROL"

      set RESULT_STATUS_ALP_ABNORMAL_CDF = "ALP_ABNORMAL"         ;008
      set RESULT_STATUS_ALP_CRITICAL_CDF = "ALP_CRITICAL"         ;008
      set RESULT_STATUS_ALP_NORMAL_CDF = "ALP_NORMAL"             ;008
      set RESULT_STATUS_ALP_REVIEW_CDF = "ALP_REVIEW"             ;008

      set FOOTNOTE_CDF = "QC FTNT"
      set RESULT_TYPE_NUMERIC_CDF = "3"
      set SERVICE_RESOURCE_TYPE_CODESET = 223                                                   ;001
      set SERV_RES_SUBSECTION_CDF = "SUBSECTION"                                                ;001
      declare serv_res_subsection_cd = f8                                                       ;001
      declare result_process_incontrol_cd = f8
      declare result_process_outcontrol_cd  = f8

      declare result_status_alp_critical_cd = f8           ;008
      declare result_status_alp_normal_cd = f8             ;008
      declare result_status_alp_review_cd = f8             ;008
      declare result_status_alp_abnormal_cd = f8           ;008

      declare result_status_accept_cd = f8
      declare result_status_reviewed_cd  = f8
      declare result_status_reviewed2_cd  = f8                          ;007
      declare result_status_verified_cd  = f8
      declare result_status_auto_verf_cd = f8                                                   ;002
      declare result_status_corrected_cd = f8
      declare result_status_oldcorrected_cd  = f8
      declare result_status_rejected_cd = f8
      declare result_status_discarded_cd = f8
      declare result_status_changed_cd = f8
      declare result_status_oldchanged_cd = f8

      declare result_status_accept_disp = c12
      declare result_status_reviewed_disp  = c12
      declare result_status_reviewed2_disp  = c12                          ;007
      declare result_status_verified_disp  = c12
      declare result_status_auto_verf_disp = c12  ;002
      declare result_status_corrected_disp = c12
      declare result_status_oldcorrected_disp  = c12
      declare result_status_rejected_disp = c12
      declare result_status_discarded_disp = c12
      declare result_status_changed_disp = c12
      declare result_status_oldchanged_disp = c12

      set result_status_verified_count = 0                                ;007
      set result_status_accepted_count = 0                                ;007
      set result_status_changed_count = 0                                 ;007
      set result_status_rejected_count = 0                                ;007
      set result_status_discarded_count = 0                               ;007


      declare nbrdays = i2                                                                     ;003
      declare result_type_numeric_cd = f8

      set underscore = fillstring(128, "-")
      set failed = "F"
      set reply->status_data->status = "F"
      set r_cnt = 0
      set t_cnt = 0
      set temp_cnt = 0
      set cnt = 0
      set qcc_cnt = 0
      declare FOOTNOTE_CD = f8
      declare uar_fmt_result (min, max, dec, flag, result) = c50 with protect, noconstant("")
      set dm_cnt = 0
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty
      set hold_lot_dt_tm = request->begin_date
      
      declare sResultStatusDisp = vc with protect, noconstant("")
      
      declare lControlslist                        = i4 with protect, constant(size(request->controls,5))
      declare lTestSiteslist                       = i4 with protect, constant(size(request->test_sites,5))
      declare lProcedureslist                      = i4 with protect, constant(size(request->assays,5))
      declare sControl_Parser                      = vc with protect, noconstant("")
      declare sTestsite_Parser                     = vc with protect, noconstant("")
      declare sProcedure_Parser                    = vc with protect, noconstant("")
      declare nControlCnt                          = i2 with protect, noconstant(0)
      declare nTestsiteCnt                         = i4 with protect, noconstant(0)
      declare nProcedureCnt                        = i4 with protect, noconstant(0)
      declare sProcedures                          = vc with protect, noconstant("")
      declare sTestsites                           = vc with protect, noconstant("")
      declare sControls                            = vc with protect, noconstant("")
      declare GetTestsiteParser(sTable)            = vc
      declare GetProcedureParser(sTable)           = vc  
      declare GetControlParser(sTable)             = vc


/************************************************************************
*build parsers (2)                                                      *
************************************************************************/

subroutine GetTestsiteParser(sTable)
  if( validate(qrl_req->end_date) = 0)/*determine if qrl_req exists to build parser*/
    if (lTestSiteslist > 0)
      if (sTable =  "rlr")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,rlr.service_resource_cd,",
            "request->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "p")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "p.service_resource_cd,request->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "q")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "q.service_resource_cd,request->test_sites[nTestsiteCnt].service_resource_cd)")
      endif
    elseif (request->service_resource_cd > 0)
      if (sTable =  "rlr") 	
    	  set sTestsite_Parser = "rlr.service_resource_cd = request->service_resource_cd"
  	  elseif(sTable = "p")
  	    set sTestsite_Parser = "p.service_resource_cd = request->service_resource_cd"
      elseif(sTable = "q")
        set sTestsite_Parser = "q.service_resource_cd = request->service_resource_cd"  
      endif
    else
  	 	set sTestsite_Parser = "1 = 1"
  	endif
    return(sTestsite_Parser) 
  else /* else for use of qrl_req if its available to build parser*/
    if (lTestSiteslist > 0)
      if (sTable =  "rlr")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,rlr.service_resource_cd,",
            "qrl_req->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "p")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "p.service_resource_cd,qrl_req->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "q")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "q.service_resource_cd,qrl_req->test_sites[nTestsiteCnt].service_resource_cd)")
      endif
    else
  	 	set sTestsite_Parser = "1 = 1"
  	endif
    return(sTestsite_Parser) 
  endif
end

subroutine GetProcedureParser(sTable)
  if( validate(qrl_req->end_date) = 0)/*determine if qrl_req exists to build parser*/
    if (lProcedureslist > 0)
  	  if (sTable = "p")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "p.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "q")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "q.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "arl")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "arl.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
  		endif
  	elseif (request->task_assay_cd > 0)
   		if (sTable = "p")
   		 	set sProcedure_Parser = "p.task_assay_cd = request->task_assay_cd"
  	  elseif(sTable = "q")
  	    set sProcedure_Parser = "q.task_assay_cd = request->task_assay_cd"
  	  elseif(sTable = "arl")
  	    set sProcedure_Parser = "arl.task_assay_cd = request->task_assay_cd"
      endif
  	else
  		set sProcedure_Parser = "1 = 1"
  	endif  
    return(sProcedure_Parser)
  else /* else for use of qrl_req if its available to build parser*/
    if (lProcedureslist > 0)
  	  if (sTable = "p")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "p.task_assay_cd, qrl_req->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "q")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "q.task_assay_cd, qrl_req->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "arl")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "arl.task_assay_cd, qrl_req->assays[nProcedureCnt].task_assay_cd)")
  		endif
  	else
  		set sProcedure_Parser = "1 = 1"
  	endif  
    return(sProcedure_Parser)
  endif
end      

subroutine GetControlParser(sTable)
  if( validate(qrl_req->end_date) = 0)/*determine if qrl_req exists to build parser*/
    if (lControlslist > 0)
      if (sTable =  "c")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,c.control_id,",
            "request->controls[nControlCnt].control_id)")
      elseif (sTable = "q")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "q.control_id,request->controls[nControlCnt].control_id)")
      elseif (sTable = "cm") 
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "cm.control_id,request->controls[nControlCnt].control_id)")
      endif
    elseif (request->control_id > 0)
      if (sTable =  "c") 	
    	  set sControl_Parser = "c.control_id = request->control_id"
  	  elseif(sTable = "q")
        set sControl_Parser = "q.control_id = request->control_id"  
      elseif(sTable = "cm")
        set sControl_Parser = "cm.control_id = request->control_id"
      endif
    else
  	 	set sControl_Parser = "1 = 1"
  	endif
    return(sControl_Parser) 
  else /* else for use of qrl_req if its available to build parser*/
    if (lControlslist > 0)
      if (sTable =  "c")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,c.control_id,",
            "qrl_req->controls[nControlCnt].control_id)")
      elseif (sTable = "q")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "q.control_id,qrl_req->controls[nControlCnt].control_id)")
      elseif (sTable = "cm") 
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "cm.control_id,qrl_req->controls[nControlCnt].control_id)")
      endif
    else
  	 	set sControl_Parser = "1 = 1"
  	endif
    return(sControl_Parser) 
  endif
end
 /***********************************************************************
 * Load result status and footnote code set                             *
 ***********************************************************************/
      select into "nl:"
        cv.code_set,
        cv.code_value

      from code_value cv

      where cv.code_set = RESULT_STATUS_CODESET
         or cv.code_set = RESULT_PROCESS_CODESET
         or cv.code_set = FOOTNOTE_CODESET
         or cv.code_set = RESULT_TYPE_CODESET
      and cv.cdf_meaning in ( RESULT_STATUS_ACCEPT_CDF,
                              RESULT_STATUS_REVIEWED_CDF,
                              RESULT_STATUS_VERIFIED_CDF,
                              RESULT_STATUS_AUTO_VERF_CDF,  ;002
                              RESULT_STATUS_OLDCORRECTED_CDF,
                              RESULT_STATUS_REJECTED_CDF,
                              RESULT_STATUS_DISCARDED_CDF,
                              RESULT_STATUS_CHANGED_CDF,
                              RESULT_STATUS_OLDCHANGED_CDF,
                              RESULT_STATUS_CORRECTED_CDF,
                              RESULT_PROCESS_INCONTROL_CDF,
                              RESULT_STATUS_ALP_ABNORMAL_CDF,           ;008
                              RESULT_STATUS_ALP_CRITICAL_CDF,           ;008
                              RESULT_STATUS_ALP_NORMAL_CDF,             ;008
                              RESULT_STATUS_ALP_REVIEW_CDF,             ;008
                              RESULT_PROCESS_OUTCONTROL_CDF,
                              RESULT_TYPE_NUMERIC_CDF,
                              FOOTNOTE_CDF )

         detail
            case ( cv.cdf_meaning )
              of RESULT_STATUS_ALP_ABNORMAL_CDF:
                 RESULT_STATUS_ALP_ABNORMAL_cd = cv.code_value
              of RESULT_STATUS_ALP_NORMAL_CDF:
                 RESULT_STATUS_ALP_NORMAL_cd = cv.code_value
              of RESULT_STATUS_ALP_REVIEW_CDF:
                 RESULT_STATUS_ALP_REVIEW_cd = cv.code_value
              of RESULT_STATUS_ALP_CRITICAL_CDF:
                 RESULT_STATUS_ALP_CRITICAL_cd = cv.code_value
              of RESULT_STATUS_ACCEPT_CDF:
                 result_status_accept_cd = cv.code_value
                 result_status_accept_disp = cv.display
              of RESULT_STATUS_ACCEPT_CDF:
                 result_status_accept_cd = cv.code_value
                 result_status_accept_disp = cv.display
              of RESULT_STATUS_REVIEWED_CDF:
                 result_status_reviewed_cd = cv.code_value
                 result_status_reviewed_disp = substring(1,12,cv.display)
              of RESULT_STATUS_REVIEWED2_CDF:                                              ;007
                 result_status_reviewed2_cd = cv.code_value                                ;007
                 result_status_reviewed2_disp = substring(1,12,cv.display)                 ;007
              of RESULT_STATUS_VERIFIED_CDF:
                 result_status_verified_cd = cv.code_value
                 result_status_verified_disp = substring(1,12,cv.display)
              of RESULT_STATUS_AUTO_VERF_CDF:  ;002
                 result_status_auto_verf_cd = cv.code_value  ;002
                 result_status_auto_verf_disp = substring(1,12,cv.display)  ;002
              of RESULT_STATUS_CORRECTED_CDF:
                 result_status_corrected_cd = cv.code_value
                 result_status_corrected_disp = substring(1,12,cv.display)
              of RESULT_STATUS_OLDCORRECTED_CDF:
                 result_status_oldcorrected_cd = cv.code_value
                 result_status_oldcorrected_disp = substring(1,12,cv.display)
              of RESULT_STATUS_REJECTED_CDF:
                 result_status_rejected_cd = cv.code_value
                 result_status_rejected_disp = substring(1,12,cv.display)
              of RESULT_STATUS_DISCARDED_CDF:
                 result_status_discarded_cd = cv.code_value
                 result_status_discarded_disp = substring(1,12,cv.display)
              of RESULT_STATUS_CHANGED_CDF:
                 result_status_changed_cd = cv.code_value
                 result_status_changed_disp = substring(1,12,cv.display)
              of RESULT_STATUS_OLDCHANGED_CDF:
                 result_status_oldchanged_cd = cv.code_value
                 result_status_oldchanged_disp = substring(1,12,cv.display)
              of RESULT_PROCESS_INCONTROL_CDF:
                 result_process_incontrol_cd = cv.code_value
              of RESULT_PROCESS_OUTCONTROL_CDF:
                 result_process_outcontrol_cd = cv.code_value
              of RESULT_TYPE_NUMERIC_CDF:
                 result_type_numeric_cd = cv.code_value
              of "QC FTNT":
                 FOOTNOTE_CD = cv.code_value
            endcase

         with nocounter

         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif

 /***********************************************************************
 * Load operations parameter list                                       *
 ***********************************************************************/
         if (trim(request->batch_selection) > " ")                                              ;003
            set batch_selection_cd = cnvtreal(trim(request->batch_selection))                   ;003
            set parm_string = fillstring(100, " ")                                              ;003

            select into "nl:"                                                                   ;003
              cv.code_value                                                                     ;003
            from                                                                                ;003
              code_value cv                                                                     ;003
                where cv.code_set = 1950
                and cv.active_ind = 1
                and cv.cdf_meaning in ("PRL", "RL") and    ;003
                trim(cv.display_key) = trim(cnvtupper(cnvtalphanum(request->batch_selection)))  ;003
            detail                                                                              ;003
               cdf_string = trim(cv.cdf_meaning)                                                ;003
               parm_string = trim(cv.definition)                                                ;003
            with                                                                                ;003
               nocounter                                                                        ;003
            if (curqual = 0)                                                                    ;003
                select into "nl:"                                                               ;003
                        cv.code_value                                                           ;003
                from                                                                            ;003
                        code_value cv                                                           ;003
                where cv.code_set = 1950
                and cv.active_ind = 1 and cv.cdf_meaning in ("PRL", "RL")        ;003
                and cv.code_value = batch_selection_cd                                          ;003
                detail                                                                          ;003
                        cdf_string = trim(cv.cdf_meaning)                                       ;003
                        parm_string = trim(cv.definition)                                       ;003
                with                                                                            ;003
                nocounter                                                                       ;003
                if (curqual = 0)                                                                ;003
                        set reply->status_data->status = "Z"                                    ;003
                        go to exit_script                                                       ;003
                endif                                                                           ;003
            endif                                                                               ;003

            ;* Locate the individual parameters in parm_string                                  ;003
            ;* and put them in the ops_params array.                                            ;003
            set ptr = 1                                                                         ;003
            set start_ptr = 1                                                                   ;003
            set param_idx = 1                                                                   ;003
            for (param_idx = 1 TO 12)                                                           ;003
               set ptr = findstring(",", parm_string, start_ptr)                                ;003
               if (ptr < 1)                                                                     ;003
                  set ptr = 100                                                                 ;003
               endif                                                                            ;003
               set parm_len = ptr - start_ptr                                                   ;003
               set ops_params->qual[param_idx].param =                                          ;003
                 trim(substring(start_ptr, value(parm_len), parm_string), 3)                    ;003
               set start_ptr = ptr + 1                                                          ;003
            endfor                                                                              ;003

            ;* Use array of ops parameters to set request fields.                               ;003
            set request->control_id = cnvtreal(ops_params->qual[1].param)                       ;003
            set request->service_resource_cd = cnvtreal(ops_params->qual[2].param)              ;003
            set request->task_assay_cd = cnvtreal(ops_params->qual[3].param)                    ;003
            set nbrdays = cnvtreal(ops_params->qual[4].param)                                   ;003
            set nbrdays = nbrdays * -1                                                          ;003
            set request->end_date = cnvtdatetime(request->ops_date)                             ;003
            set request->begin_date = cnvtdatetime(request->ops_date)                           ;003
            set request->begin_date = datetimeadd(request->begin_date, nbrdays)                 ;003
            set request->outcontrol_ind = cnvtreal(ops_params->qual[5].param)                   ;003
            set request->verify_ind = cnvtreal(ops_params->qual[6].param)                       ;003
            set request->accept_ind = cnvtreal(ops_params->qual[7].param)                       ;003
            set request->reject_ind = cnvtreal(ops_params->qual[8].param)                       ;003
            set request->oldchange_ind = cnvtreal(ops_params->qual[9].param)                    ;003
            set request->change_ind = cnvtreal(ops_params->qual[10].param)                      ;003
            set request->discard_ind = cnvtreal(ops_params->qual[11].param)                     ;003
            set request->qc_result_type_flag = cnvtreal(ops_params->qual[12].param)             ;004
            set request->printer_name = request->output_dist                                    ;003
            set hold_lot_dt_tm = request->begin_date                                            ;003
         endif                                                                                  ;003

         if (request->qc_result_type_flag = NULL)                                               ;004
           set request->qc_result_type_flag = 0                                                 ;004
         endif                                                                                  ;004

 /***********************************************************************
 * Load service resource type code values                               *
 ***********************************************************************/
      select into "nl:"                                                                         ;001
        cv.code_set,                                                                            ;001
        cv.code_value                                                                           ;001
                                                                                                ;001
      from code_value cv                                                                        ;001
                                                                                                ;001
      where cv.code_set = SERVICE_RESOURCE_TYPE_CODESET                                         ;001
      and cv.cdf_meaning = SERV_RES_SUBSECTION_CDF                                              ;001
                                                                                                ;001
         detail                                                                                 ;001
            case ( cv.cdf_meaning )                                                             ;001
              of SERV_RES_SUBSECTION_CDF:                                                       ;001
                 serv_res_subsection_cd = cv.code_value                                         ;001
            endcase                                                                             ;001
                                                                                                ;001
         with nocounter                                                                         ;001
                                                                                                ;001
         set error_check = ERROR(sErrorMsg,0)   ;get error message                              ;001
         if (error_check != 0)                                                                  ;001
           set reply->status_data->status = "F"                                                 ;001
           set reply->status_data->subeventstatus[1]                                            ;001
             ->TargetObjectValue = sErrorMsg                                                    ;001
           go to exit_script                                                                    ;001
         endif                                                                                  ;001

/********************************************************************/
/*  QC Comments                                                     */
/********************************************************************/
if(request->lot_to_date_ind = 1)
  Select into "nl:"
    c.lot_id,
    c.lot_number,
    rlr.lot_id,
    arl.lot_id
  FROM
    control_lot c,
    resource_lot_r rlr,
    assay_resource_lot arl
  PLAN c
    where parser(GetControlParser("c"))
  JOIN rlr
    where rlr.lot_id = c.lot_id
  JOIN arl
    where arl.lot_id = rlr.lot_id and
    arl.service_resource_cd = rlr.service_resource_cd 
  
  order by
    c.lot_id
    
  HEAD c.lot_id
  
    x = datetimediff(c.receive_dt_tm, hold_lot_dt_tm)
    if (x < 0 and c.receive_dt_tm > 0)
      hold_lot_dt_tm = c.receive_dt_tm
    endif
    
    
  DETAIL
  row + 0
  
    
  WITH
    nocounter

endif

      SELECT
       into "nl:"
         q.qc_result_id,
         qcc.qc_result_id,
         qcc.action_sequence,
         qcc.comment_type_cd,
         p.name_full_formatted,
         l.long_text_id
      FROM
         qc_result q,
         qc_comment qcc,
         prsnl p,
         long_text l
       PLAN q
         where parser(GetProcedureParser("q")) and
               parser(GetControlParser("q")) and
               parser(GetTestsiteParser("q")) and
               (q.perform_dt_tm between cnvtdate(request->begin_date) and cnvtdate(request->end_date)
               or q.perform_dt_tm = cnvtdate(request->begin_date) or q.perform_dt_tm = cnvtdate(request->end_date)) and
               ((q.result_status_cd = result_status_accept_cd and request->accept_ind = 1) or
               (q.result_status_cd = result_status_verified_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_auto_verf_cd and request->verify_ind = 1) or ;002
               (q.result_status_cd = result_status_rejected_cd and request->reject_ind = 1) or
               (q.result_status_cd = result_status_discarded_cd and request->discard_ind = 1) or
               (q.result_status_cd = result_status_changed_cd and request->change_ind = 1) or
               (q.result_status_cd = result_status_oldchanged_cd and request->oldchange_ind = 1) or
               (request->outcontrol_ind = 1))                            
      JOIN qcc
         where qcc.qc_result_id = q.qc_result_id
         and qcc.comment_type_cd = FOOTNOTE_CD
      JOIN l
         where qcc.long_text_id = l.long_text_id
      JOIN p
        where p.person_id = qcc.perform_prsnl_id
      ORDER BY qcc.comment_type_cd,
               qcc.action_sequence desc
      HEAD qcc.comment_type_cd
         x = 0
      DETAIL
            qcc_cnt = qcc_cnt + 1
            if (mod(qcc_cnt,5) = 1)
               stat =  alterlist(cmt->comments,qcc_cnt + 5)
            endif
           cmt->comments[qcc_cnt].qc_result_id = q.qc_result_id,
           cmt->comments[qcc_cnt].comment_type_cd = qcc.comment_type_cd,
           if (l.long_text_id > 0)
;008             cmt->comments[qcc_cnt].comment_text = substring(1, 125, l.long_text)
             cmt->comments[qcc_cnt].comment_text = l.long_text   ;008
           endif
           cmt->comments[qcc_cnt].perform_prsnl_id = qcc.perform_prsnl_id,
           cmt->comments[qcc_cnt].comment_prsnl_name = p.name_full_formatted,
           cmt->comments[qcc_cnt].comment_dt_tm = qcc.comment_dt_tm,
           cmt->comments[qcc_cnt].action_sequence = qcc.action_sequence
      WITH
        nocounter

      set stat =  alterlist(cmt->comments,qcc_cnt)

         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif


/********************************************************************/
/* Get QC Data Map                                                  */
/********************************************************************/

     SELECT
       into "nl:"
         q.qc_result_id,
         q.task_assay_cd,
         data_map_exists = decode(dm.seq, "Y", "N"),                   ;001
         dm.task_assay_cd,                                             ;001
         d_rg.seq,                                                     ;004
         rg_exists = decode(rg.seq, "Y", "N"),                         ;004
         rg.parent_service_resource_cd,                                ;004
         rg.child_service_resource_cd,                                 ;004
         rg.resource_group_type_cd,                                    ;004
         rg.root_service_resource_cd                                   ;004
       FROM
         qc_result q,
         data_map dm,
         (dummyt d_rg with seq = 1),
         resource_group rg,
         (dummyt d1 with seq = 1)
       PLAN q
         where parser(GetProcedureParser("q")) and
               q.qc_result_type_flag = request->qc_result_type_flag and                         ;007
               parser(GetControlParser("q")) and
               parser(GetTestSiteParser("q")) and
               q.qc_result_type_flag = request->qc_result_type_flag and
               (q.perform_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) and
               q.result_status_cd in ( result_status_accept_cd,
                                       result_status_verified_cd,
                                       result_status_auto_verf_cd,
                                       result_status_changed_cd,
                                       result_status_reviewed_cd,
                                       result_status_corrected_cd,
                                       result_status_rejected_cd) and
               ((request->lot_type_flag = 0) or (request->lot_type_flag = 1 and q.preactive_ind = 1) or 
               (request->lot_type_flag = 2 and q.preactive_ind = 0))                                       
       JOIN d1 where d1.seq = 1
       JOIN dm
         where dm.task_assay_cd = q.task_assay_cd
           and dm.data_map_type_flag in (0, 1)
           and dm.active_ind = 1
       JOIN d_rg
         where d_rg.seq = 1
       JOIN rg
         where rg.parent_service_resource_cd = dm.service_resource_cd
           and rg.child_service_resource_cd = q.service_resource_cd
           and rg.resource_group_type_cd = serv_res_subsection_cd
           and rg.root_service_resource_cd = 0.0
       ORDER BY
         q.task_assay_cd
      HEAD q.task_assay_cd
         ;* Set the default data map in the event that no data map is found
         data_map_level = 0
         arg_max_digits = 8
         arg_min_digits = 1
         arg_min_decimal_places = 0
      DETAIL
         if (data_map_exists = "Y")
            ;* Check for exact match on QC data map
            if (data_map_level <= 3
            and dm.data_map_type_flag = 1
            and dm.service_resource_cd > 0.0
            and dm.service_resource_cd = q.service_resource_cd)
               data_map_level = 4
               arg_max_digits = dm.max_digits
               arg_min_digits = dm.min_digits
               arg_min_decimal_places = dm.min_decimal_places
            endif
            ;* Check for exact match on data map
            if (data_map_level <= 2
            and dm.data_map_type_flag = 0
            and dm.service_resource_cd > 0.0
            and dm.service_resource_cd = q.service_resource_cd)
               data_map_level = 3
               arg_max_digits = dm.max_digits
               arg_min_digits = dm.min_digits
               arg_min_decimal_places = dm.min_decimal_places
            endif
            ;* Check for subsection level data map
            if (data_map_level <= 1
            and dm.data_map_type_flag = 0
            and dm.service_resource_cd > 0.0
            and rg_exists = "Y"
            and rg.parent_service_resource_cd = dm.service_resource_cd
            and rg.child_service_resource_cd = q.service_resource_cd)
               data_map_level = 2
               arg_max_digits = dm.max_digits
               arg_min_digits = dm.min_digits
               arg_min_decimal_places = dm.min_decimal_places
            endif
            ;* Check for default all resources level data map
            if (data_map_level = 0
            and dm.data_map_type_flag = 0
            and dm.service_resource_cd = 0.0)
               data_map_level = 1
               arg_max_digits = dm.max_digits
               arg_min_digits = dm.min_digits
               arg_min_decimal_places = dm.min_decimal_places
            endif
         endif
      FOOT q.task_assay_cd
         dm_cnt = dm_cnt + 1
         if (mod(dm_cnt,5) = 1)
             stat = alterlist(data_map->dms,dm_cnt + 5)
         endif
         data_map->dms[dm_cnt].task_assay_cd = q.task_assay_cd
         data_map->dms[dm_cnt].max_digits = arg_max_digits
         data_map->dms[dm_cnt].min_digits = arg_min_digits
         data_map->dms[dm_cnt].min_decimal_places = arg_min_decimal_places
      WITH
         outerjoin = d_rg,
         dontcare = rg,
         outerjoin = d1,
         nocounter
set stat = alterlist(data_map->dms, dm_cnt)


/*007 BEGIN NEW CODE TO GET THE QC FAILED RULES FROM THE DATABASE    */
set rule_cnt = 0
set r_cnt = 0
/********************************************************************/
/* Select the QC failed rules from the database                     */
/********************************************************************/

      SELECT
       into "nl:"
         q.qc_result_id,
         qr.rule_id,
         qr.sequence,
         qrr.qc_result_id
      FROM
         qc_result q,
         qc_rule qr,
         qc_result_rule_r qrr
      PLAN q
         where parser(GetProcedureParser("q")) and
               parser(GetControlParser("q")) and
               q.qc_result_type_flag = request->qc_result_type_flag and
               q.service_resource_cd = request->service_resource_cd and
               (q.perform_dt_tm between cnvtdate(request->begin_date) and cnvtdate(request->end_date)
               or q.perform_dt_tm = cnvtdate(request->begin_date) or q.perform_dt_tm = cnvtdate(request->end_date)) and
               ((q.result_status_cd = result_status_accept_cd and request->accept_ind = 1) or
               (q.result_status_cd = result_status_verified_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_auto_verf_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_rejected_cd and request->reject_ind = 1) or
               (q.result_status_cd = result_status_discarded_cd and request->discard_ind = 1) or
               (q.result_status_cd = result_status_changed_cd and request->change_ind = 1) or
               (q.result_status_cd = result_status_oldchanged_cd and request->oldchange_ind = 1) or
               (request->outcontrol_ind = 1)) and ((request->lot_type_flag = 0) or
               (request->lot_type_flag = 1 and q.preactive_ind = 1) or 
               (request->lot_type_flag = 2 and q.preactive_ind = 0))
      JOIN qr
         where qr.rule_id = q.rule_id
      JOIN qrr
         where qrr.qc_result_id = q.qc_result_id
         and qrr.rule_id = qr.rule_id
         and qrr.sequence = qr.sequence
         and qrr.status_flag = 0
      ORDER BY q.qc_result_id, qr.sequence
      HEAD REPORT
         rule_cnt = 0
      HEAD q.qc_result_id
         rule_cnt = rule_cnt + 1
         if (mod(rule_cnt, 5) = 1)
            stat = alterlist(failed_rules->qual, rule_cnt + 5)
         endif
         failed_rules->qual[rule_cnt].qc_result_id = qrr.qc_result_id
         failed_rules->qual[rule_cnt].num_rules = 0
         r_cnt = 0
      DETAIL
         r_cnt = r_cnt + 1
         if (mod(r_cnt, 5) = 1)
            stat = alterlist(failed_rules->qual[rule_cnt].rules, r_cnt + 5)
         endif
         failed_rules->qual[rule_cnt].rules[r_cnt].rule_definition = qr.rule_definition
      FOOT qrr.qc_result_id
         failed_rules->qual[rule_cnt].num_rules = r_cnt
         stat = alterlist(failed_rules->qual[rule_cnt].rules, r_cnt)
      FOOT REPORT
         if (rule_cnt > 0)
            stat = alterlist(failed_rules->qual, rule_cnt)
         endif
      WITH NOCOUNTER

set trouble_cnt = 0
set t_cnt = 0
/********************************************************************/
/* Select the QC trouble steps from the database                    */
/********************************************************************/

      SELECT
       into "nl:"
         q.qc_result_id,
         qcrt.qc_result_id,
         qt.step
      FROM
         qc_result q,
         qc_result_trouble_r qcrt,
         qc_trouble_step qt
      PLAN q
         where parser(GetProcedureParser("q")) and
               parser(GetControlParser("q")) and
               q.qc_result_type_flag = request->qc_result_type_flag and
               parser(GetTestSiteParser("q")) and
               (q.perform_dt_tm between cnvtdate(request->begin_date) and cnvtdate(request->end_date)
               or q.perform_dt_tm = cnvtdate(request->begin_date) or q.perform_dt_tm = cnvtdate(request->end_date)) and
               ((q.result_status_cd = result_status_accept_cd and request->accept_ind = 1) or
               (q.result_status_cd = result_status_verified_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_auto_verf_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_rejected_cd and request->reject_ind = 1) or
               (q.result_status_cd = result_status_discarded_cd and request->discard_ind = 1) or
               (q.result_status_cd = result_status_changed_cd and request->change_ind = 1) or
               (q.result_status_cd = result_status_oldchanged_cd and request->oldchange_ind = 1) or
               (request->outcontrol_ind = 1)) and ((request->lot_type_flag = 0) or
               (request->lot_type_flag = 1 and q.preactive_ind = 1) or 
               (request->lot_type_flag = 2 and q.preactive_ind = 0))
      JOIN qcrt
         where qcrt.qc_result_id = q.qc_result_id
         and qcrt.active_ind > 0
      JOIN qt
         where qt.trouble_id = qcrt.trouble_id
      ORDER BY q.qc_result_id
      HEAD REPORT
         trouble_cnt = 0
      HEAD q.qc_result_id
         trouble_cnt = trouble_cnt + 1
         if (mod(trouble_cnt, 5) = 1)
            stat = alterlist(trouble_steps->qual, trouble_cnt + 5)
         endif
         trouble_steps->qual[trouble_cnt].qc_result_id = qcrt.qc_result_id
         trouble_steps->qual[trouble_cnt].num_steps = 0
         t_cnt = 0
      DETAIL
         t_cnt = t_cnt + 1
         if (mod(t_cnt, 5) = 1)
            stat = alterlist(trouble_steps->qual[trouble_cnt].steps, t_cnt + 5)
         endif
         trouble_steps->qual[trouble_cnt].steps[t_cnt].step = qt.step
      FOOT q.qc_result_id
         trouble_steps->qual[trouble_cnt].num_steps = t_cnt
         stat = alterlist(trouble_steps->qual[trouble_cnt].steps, t_cnt)
      FOOT REPORT
         if (trouble_cnt > 0)
            stat = alterlist(trouble_steps->qual, trouble_cnt)
         endif
      WITH NOCOUNTER

/*007 END NEW CODE */
set t2_cnt = 0
set r2_cnt = 0
%i cclsource:aps_uar_rtf.inc                               ;008
/********************************************************************/
/* Select QC Results from the database                              */
/********************************************************************/
;cms
execute cpm_create_file_name "GLB_QRL", "txt"

if (cpm_cfn_info->status_data.status != "S")
  set reply->status_data->status = "F"
  set reply->status_data->subeventstatus[1]->operationname = "get"
  set reply->status_data->subeventstatus[1]->operationstatus = "F"
  set reply->status_data->subeventstatus[1]->targetobjectname = "filename"
  set reply->status_data->subeventstatus[1]->targetObjectValue = "Filename Retrieval Unsuccessful"
  go to exit_script
endif

set reply->file_name = cpm_cfn_info->file_name_path

     SELECT
       into cpm_cfn_info->file_name_path
         q.qc_result_id,
         q.service_resource_cd,
         q.lot_id,
         perform_date = cnvtdatetime(q.perform_dt_tm),
         break_lot_pdm = concat(trim(cnvtstring(q.lot_id,32,0)), trim(cnvtstring(q.pdm_range_id,32,0))),
         c.lot_number,
         a.accession,
         d.task_assay_cd,
         d.mnemonic,
         n.nomenclature_id,
         p1.name_full_formatted,
         qe2.event_type_cd,                                        ;007
         qe3.event_type_cd,                                        ;007
         qe.qc_result_id,
         qe_exists = decode(qe.seq, "Y","N"),
         qe3_exists = decode(qe3.seq, "Y", "N"),                   ;007
         p3.person_id,
         p4.person_id,
         qrp.qc_group_id,
         cm.control_id
       FROM
         qc_result q,
         qc_result_grp qrp,
         accession a,
         discrete_task_assay d,
         nomenclature n,
         (dummyt d2 with seq = 1),
         control_lot c,
         qc_result_event qe2,                             ;007
         prsnl p1,
         (dummyt d3 with seq = 1),
         qc_result_event qe,
         prsnl p3,
         (dummyt d5 with seq = 1),                        ;007
         qc_result_event qe3,                             ;007
         prsnl p4,                                         ;007
         control_material cm

       PLAN q
         where parser(GetProcedureParser("q")) and
               parser(GetControlParser("q")) and
               q.qc_result_type_flag = request->qc_result_type_flag and                         ;004
               parser(GetTestSiteParser("q")) and
               (q.perform_dt_tm between cnvtdate(request->begin_date) and cnvtdate(request->end_date)
               or q.perform_dt_tm = cnvtdate(request->begin_date) or q.perform_dt_tm = cnvtdate(request->end_date)) and
               ((q.result_status_cd = result_status_accept_cd and request->accept_ind = 1) or
               (q.result_status_cd = result_status_verified_cd and request->verify_ind = 1) or
               (q.result_status_cd = result_status_auto_verf_cd and request->verify_ind = 1) or ;002
               (q.result_status_cd = result_status_rejected_cd and request->reject_ind = 1) or
               (q.result_status_cd = result_status_discarded_cd and request->discard_ind = 1) or
               (q.result_status_cd = result_status_changed_cd and request->change_ind = 1) or
               (q.result_status_cd = result_status_oldchanged_cd and request->oldchange_ind = 1) or
               (request->outcontrol_ind = 1)) and ((request->lot_type_flag = 0) or
               (request->lot_type_flag = 1 and q.preactive_ind = 1) or 
               (request->lot_type_flag = 2 and q.preactive_ind = 0))
       JOIN qrp
          where q.qc_group_id = qrp.qc_group_id
       JOIN a
         where a.accession_id = qrp.accession_id
       JOIN d
         where d.task_assay_cd = q.task_assay_cd
       JOIN n
         where n.nomenclature_id = q.nomenclature_id
       JOIN cm
         where cm.control_id = q.control_id
       JOIN d2 where d2.seq = 1
       JOIN c
         where c.lot_id = q.lot_id
       JOIN qe2                                                        ;007
         where qe2.qc_result_id = q.qc_result_id and                   ;007
               (qe2.event_type_cd = result_status_verified_cd 
               or qe2.event_type_cd = result_status_auto_verf_cd)           ;007
       JOIN p1                                                         ;007
         where p1.person_id = qe2.event_personnel_id                   ;007
       JOIN d3 where d3.seq = 1
       JOIN qe
         where qe.qc_result_id = q.qc_result_id and
               qe.event_type_cd = result_status_reviewed_cd
       JOIN p3
         where p3.person_id = qe.event_personnel_id
       JOIN d5                                                         ;007
         where d5.seq = 1                                              ;007
       JOIN qe3                                                        ;007
         where qe3.qc_result_id = q.qc_result_id and                   ;007
               qe3.event_type_cd = result_status_reviewed2_cd          ;007
       JOIN p4                                                         ;007
         where qe3.event_personnel_id = p4.person_id                   ;007
      
        
      ORDER BY 
        q.control_id,
        q.service_resource_cd, 
        q.task_assay_cd, 
        q.lot_id,
        q.qc_result_id desc
      
        
      HEAD REPORT
%i cclsource:glb_print_text.inc
%i cclsource:glb_rpt_macros.inc
 
      
      HEAD PAGE
;009     COL 1   "REPORT NO:  "
         COL 1   I18N_Captions->rpt_no          ;009
;009     COL 13  "GLB_RPT_QC_RESULTS.PRG"
         COL 13  I18N_Captions->prg             ;009
;_I18N_:009          CALL CENTER("QC RESULTS LISTING",1,132)
         CALL CENTER(uar_i18ngetmessage(i18nHandle,"key_3","QC RESULTS LISTING"),1,132) ;_I18N_:009 MAX=18
;009     COL 107 "TIME: "
         COL 107 I18N_Captions->tm              ;009
;009     COL 117 CURTIME "HH:MM;;M"
         COL 117 CURTIME "@TIMENOSECONDS;;M"    ;009
         ROW+1
;009     COL 1   "AS OF DATE: "
         COL 1   I18N_Captions->as_of           ;009
;009     COL 13   CURDATE "MM/DD/YY;;D"
         COL 13   CURDATE "@SHORTDATE;;Q"       ;009
;009     COL 107 "PREPARED: "
         COL 107  I18N_Captions->prep           ;009
;009     COL 117 CURDATE "MM/DD/YY;;D"
         COL 117 CURDATE "@SHORTDATE;;Q"        ;009
         ROW +1                                            ;007
;009         COL 107 "PAGE NO: "                               ;007
         COL 107 I18N_Captions->page_no         ;009
         COL 117 CURPAGE "###;L"                           ;007
         ROW+2
;009     COL 1    "CONTROL MATERIAL: "
         COL 1    I18N_Captions->ctrl_mat  
           if (q.qc_result_type_flag = 1)
             control_name = I18N_Captions->pat_dat
           else  
              control_name = substring(1, 20, cm.short_description)
           endif
              
         call echo ("looking for data 1")
                call echo (q.control_id)
                call echo (cm.control_id)
                call echo (control_name)
         COL 20 control_name
     
         ROW+1
;009     COL 1    "SERVICE RESOURCE:"
         COL 1    I18N_Captions->serv_res       ;009
         serv_res = substring(1, 18, trim(UAR_GET_CODE_DISPLAY(q.service_resource_cd),3))       ;003
;003         serv_res = substring(1, 18, cv3.display)
         COL 20  serv_res                                                         

         row+1
;009     COL 1   "DATE RANGE: "
         COL 1   I18N_Captions->dt_rnge         ;009
;009     COL 20 request->begin_date "MM/DD/YY;;D"
         COL 20 request->begin_date "@SHORTDATE;;Q"     ;009
         COL 30 "-"
         request->end_date = datetimeadd(request->end_date, -1)
;009     COL 32 request->end_date "MM/DD/YY;;D"
         COL 32 request->end_date "@SHORTDATE;;Q"       ;009
         request->end_date = datetimeadd(request->end_date, 1)
         ROW+2
;007         COL 55    "     PERFORMED BY"
;009         COL 7     "ASSAY"
;009         COL 23    "RESULT"
;009         COL 34    "FLAG"
;009         COL 41    "PERF DATE"
;009         COL 54    "VERF TECH"
;009         COL 66    "ACTION"
;009         COL 75    "REV TECH"
;009         COL 88    "REV DATE"
;009         COL 101   "SEC REV"
;009         COL 111   "SEC REV DATE"

         COL 7     I18N_Captions->ASSAY                ;009
         COL 23    I18N_Captions->RESULT               ;009
         COL 34    I18N_Captions->FLAG                 ;009
         COL 41    I18N_Captions->PERF_DATE            ;009

         if (request->qc_result_type_flag = 0)                         ;010
             COL 54    I18N_Captions->VERF_TECH            ;009        ;010
             COL 66    I18N_Captions->ACTION               ;009        ;010
             COL 75    I18N_Captions->REV_TECH             ;009        ;010
             COL 88    I18N_Captions->REV_DATE             ;009        ;010
             COL 101   I18N_Captions->SEC_REV              ;009        ;010
             COL 111   I18N_Captions->SEC_REV_DATE         ;009        ;010
             ROW + 1
             COL 1   "---------------- --------------- ---- -------------- ---------  -------- ----------"
             COL 85  "-------------- --------- --------------"
         else                                                          ;010
             COL 56    I18N_Captions->ACTION               ;009        ;010
             COL 65    I18N_Captions->REV_TECH             ;009        ;010
             COL 78    I18N_Captions->REV_DATE             ;009        ;010
             COL 91    I18N_Captions->SEC_REV              ;009        ;010
             COL 101   I18N_Captions->SEC_REV_DATE         ;009        ;010
             ROW + 1
             COL 1   "---------------- --------------- ---- --------------  -------- ----------"
             COL 75  "-------------- --------- --------------"
         endif                                                         ;010
         ROW + 1
       
       HEAD q.control_id
         if (row > 12)
           break
         endif
         
       HEAD q.service_resource_cd
         if (row > 12)
          BREAK
         endif
         t_cnt = 0
       HEAD q.task_assay_cd
         found_results = 0                                               ;008
         result_status_verified_count = 0.0                              ;007
         result_status_accepted_count = 0.0                              ;007
         result_status_changed_count = 0.0                               ;007
         result_status_rejected_count = 0.0                              ;007
         result_status_discarded_count = 0.0                             ;007
         total_cnt = 0.0
         arg_max_digits = 8
         arg_min_digits = 1
         arg_min_dec_places = 0
         arg_stat_dec_places = 0
         if (q.result_type_cd = result_type_numeric_cd)
           for (x = 1 to dm_cnt)
             if (q.task_assay_cd = data_map->dms[x].task_assay_cd)
               arg_max_digits = data_map->dms[x].max_digits
               arg_min_digits = data_map->dms[x].min_digits
               arg_min_dec_places = data_map->dms[x].min_decimal_places
               arg_stat_dec_places = data_map->dms[x].min_decimal_places + 1
             endif
           endfor
         endif
       HEAD q.lot_id
         printed_lot_header = 0
         ROW +1
       HEAD q.qc_result_id
         t_cnt = 0                                                                                ;007
         ;check the number of lines needed for this result, break to next page if needed          ;007
         num_footnotes = 6                                                                        ;007
         ;look for secondary reviewed                                                             ;007
         if (qe3_exists = "Y")                                                                    ;007
            num_footnotes = num_footnotes + 1                                                     ;007
         endif                                                                                    ;007
         if ((q.result_control_cd = result_process_outcontrol_cd and request->outcontrol_ind = 1) or ;007
             (q.result_Type_cd != result_type_numeric_cd and request->outcontrol_ind = 1 and                                 ;008
             (q.result_process_cd = result_status_alp_abnormal_cd or q.result_process_cd = result_status_alp_review_cd)) or  ;008
              request->outcontrol_ind = 0)                                                     ;007
              if ((request->qc_result_type_flag = 0) and (printed_lot_header = 0))
                 if (ROW > 50)                                  ;007
                    BREAK                                       ;007
                 endif                                          ;007
                 printed_lot_header = 1
                 COL 1   I18N_Captions->qc_ident        ;009
                 accession = concat(substring(6,2,a.accession),"-",substring(10,2,a.accession),"-",substring(12,7,a.accession))
                 COL 20   accession
                 ROW+1
;009       COL 1    "LOT NUMBER:  "
                 COL 1    I18N_Captions->lot_no         ;009
                 lot_number = substring(1, 20, c.lot_number)
                 COL 20 lot_number
                 ROW+2
              endif
              ;look for a comment                                                                 ;007
              for (cnt = 1 to qcc_cnt)                                                            ;007
                if (q.qc_result_id = cmt->comments[cnt].qc_result_id)                             ;007
                   num_footnotes = num_footnotes + 2                                              ;007
                   cnt = qcc_cnt + 1                                                              ;007
                endif                                                                             ;007
              endfor                                                                              ;007
              ;look for trouble steps                                                             ;007
              for (t_cnt = 1 to trouble_cnt)                                                      ;007
                 if (trouble_steps->qual[t_cnt].qc_result_id = q.qc_result_id)                    ;007
                   num_footnotes = num_footnotes + trouble_steps->qual[t_cnt].num_steps           ;007
                   t_cnt = trouble_cnt + 1                                                        ;007
                 endif                                                                            ;007
              endfor                                                                              ;007
              ;look for failed rules                                                              ;007
              for (r_cnt = 1 to rule_cnt)                                                         ;007
                 if (failed_rules->qual[r_cnt].qc_result_id = q.qc_result_id)                     ;007
                   num_footnotes = num_footnotes + failed_rules->qual[r_cnt].num_rules            ;007
                   r_cnt = rule_cnt + 1                                                           ;007
                 endif                                                                            ;007
              endfor                                                                              ;007
              ;count up the statuses to show summary at end of report                             ;007
              case ( q.result_status_cd )                                                         ;007
                 of result_status_verified_cd:                                                    ;007
                      result_status_verified_count = result_status_verified_count + 1             ;007
                 of result_status_auto_verf_cd:                                                   ;007
                      result_status_verified_count = result_status_verified_count + 1             ;007
                 of result_status_accept_cd:                                                      ;007
                      result_status_accepted_count = result_status_accepted_count + 1             ;007
                 of result_status_changed_cd:                                                     ;007
                      result_status_changed_count = result_status_changed_count + 1               ;007
                 of result_status_rejected_cd:                                                    ;007
                      result_status_rejected_count = result_status_rejected_count + 1            ;007
                 of result_status_discarded_cd:                                                   ;007
                      result_status_discarded_count = result_status_discarded_count + 1           ;007
                 else                                                                             ;007
                   ROW +0                                                                         ;007
              endcase                                                                             ;007
         endif                                                                                    ;007
         ;break if too many footnotes to fit on this page                                         ;007
         if (ROW + num_footnotes > 55)                                                            ;007
            BREAK                                                                                 ;007
         endif                                                                                    ;007

         if ((q.result_control_cd = result_process_outcontrol_cd and request->outcontrol_ind = 1) or
             (q.result_Type_cd != result_type_numeric_cd and request->outcontrol_ind = 1 and                                 ;008
             (q.result_process_cd = result_status_alp_abnormal_cd or q.result_process_cd = result_status_alp_review_cd)) or  ;008
             request->outcontrol_ind = 0)
           found_results = 1                                               ;008
           task_assay = substring(1,13,d.mnemonic)
           COL 4 task_assay
           if (q.result_type_cd = result_type_numeric_cd) ;numeric type result
             rslt = fillstring(50, " ")
             rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, q.result_value_numeric)
             COL 25  rslt "########;R"
           else
              alpha = substring(1, 15, n.source_string)
              COL 18 alpha ";R"
           endif
           res_process = trim(UAR_GET_CODE_DISPLAY(q.result_process_cd),3)                      ;005
           res_control = trim(UAR_GET_CODE_DISPLAY(q.result_control_cd),3)                      ;005
           result_flag = concat(substring(1, 1, res_process),substring(1, 1, res_control))      ;005
;005           result_flag = concat(substring(1, 1, cv1.display),substring(1, 1, cv4.display))
           COL 34 result_flag "####;C"
;009           COL 40 q.perform_dt_tm "MM/DD/YY HH:MM;;D"
           COL 39 q.perform_dt_tm "@SHORTDATE;;Q"       ;009
           COL +1 q.perform_dt_tm "@TIMENOSECONDS;;Q"   ;009
;007           if (q.perform_personnel_id = 0)
;007             result_tech = "INSTRUMENT        "
;007           else
;           result_tech = substring(1, 18, p1.name_full_formatted)
           result_tech = substring(1, 18, p1.username)             ;008
;007           endif
           if (request->qc_result_type_flag = 0)                       ;010
                COL 54 result_tech                                     ;010
           endif                                                       ;010
              case (q.result_status_cd)
                of result_status_accept_cd:
                   sResultStatusDisp = substring(1,12, result_status_accept_disp)
                of result_status_reviewed_cd:
                   sResultStatusDisp = substring(1,12,result_status_reviewed_disp)
                of result_status_verified_cd:
                   sResultStatusDisp = substring(1,12,result_status_verified_disp)
                of result_status_auto_verf_cd:                                                  ;002
                   sResultStatusDisp = substring(1,12,result_status_auto_verf_disp)                        ;002
                of result_status_corrected_cd:
                   sResultStatusDisp = substring(1,12,result_status_corrected_disp)
                of result_status_oldcorrected_cd:
                   sResultStatusDisp = substring(1,12,result_status_oldcorrected_disp)
                of result_status_rejected_cd:
                   sResultStatusDisp = substring(1,12,result_status_rejected_disp)
                of result_status_discarded_cd:
                   sResultStatusDisp = substring(1,12,result_status_discarded_disp)
                of result_status_changed_cd:
                   sResultStatusDisp = substring(1,12,result_status_changed_disp)
                of result_status_oldchanged_cd:
                   sResultStatusDisp = substring(1,12,result_status_oldchanged_disp)
              endcase
           if (request->qc_result_type_flag = 0)                       ;010
               COL 65 sResultStatusDisp                                ;010
               if (qe_exists = "Y")                                    ;010
                 reviewed_by = substring(1, 18, p3.username)             ;008                       ;010
                 COL 75 reviewed_by                                    ;010
                 COL 85 qe.event_dt_tm "@SHORTDATE;;Q"  ;009
                 COL +1 qe.event_dt_tm "@TIMENOSECONDS;;Q"      ;009
               endif                                                   ;010
               if (qe3_exists = "Y")                                   ;010
                 reviewed_by = substring(1, 18, p4.username)             ;008                       ;010
                 COL 101 reviewed_by                                   ;010
                 COL 111 qe3.event_dt_tm "@SHORTDATE;;Q"        ;009
                 COL +1  qe3.event_dt_tm "@TIMENOSECONDS;;Q"    ;009
               endif                                                   ;010
           else                                                        ;010
               COL 55 sResultStatusDisp                                           ;010
               if (qe_exists = "Y")                                    ;010
                 reviewed_by = substring(1, 18, p3.username)             ;008                       ;010
                 COL 65 reviewed_by                                    ;010
                 COL 75 qe.event_dt_tm "@SHORTDATE;;Q"  ;009
                 COL +1 qe.event_dt_tm "@TIMENOSECONDS;;Q"      ;009
               endif                                                   ;009
               if (qe3_exists = "Y")                                   ;010
                 reviewed_by = substring(1, 18, p4.username)             ;008                       ;010
                 COL 91  reviewed_by                                    ;010
                 COL 101 qe3.event_dt_tm "@SHORTDATE;;Q"        ;010
                 COL +1  qe3.event_dt_tm "@TIMENOSECONDS;;Q"    ;010
               endif                                                   ;010
           endif                                                       ;010
           ROW + 1
          ; qcc_cnt = 0
           temp_cnt = 0
         endif
      DETAIL
         found = 0                       ;008
         if ((q.result_control_cd = result_process_outcontrol_cd and request->outcontrol_ind = 1) or            ;006
             (q.result_Type_cd != result_type_numeric_cd and request->outcontrol_ind = 1 and                                 ;008
             (q.result_process_cd = result_status_alp_abnormal_cd or q.result_process_cd = result_status_alp_review_cd)) or  ;008
             request->outcontrol_ind = 0)                                                                       ;006
              for (cnt = 1 to qcc_cnt)
                if (q.qc_result_id = cmt->comments[cnt].qc_result_id)
                   temp_cnt = temp_cnt + 1
                   found = 1             ;008
                   if (temp_cnt = 1)
;009                   COL 5 "RESULT COMMENT:  "
                     COL 5  I18N_Captions->rslt_com             ;009
                     ROW +1
                     print_text = cmt->comments[cnt].comment_text
;008                     print_text_routine
                     call rtf_to_text(trim(print_text),1,110)                ;008
                     for (z = 1 to size(tmptext->qual,5))                    ;008
                       col 10 tmptext->qual[z].text                          ;008
                       if (size(tmptext->qual,5) > 1)                        ;008
                          row + 1                                            ;008
                       endif                                                 ;008
                       if (row + 2 > 60)                                     ;008
                           BREAK                                             ;008
                       endif                                                 ;008
                     endfor                                                  ;008
                     ROW +1                                                  ;008
                   endif
                endif
              endfor
         endif                                                                                                 ;006

;007         if (qt_exists = "Y")
;007;           if ((q.result_control_cd != result_process_outcontrol_cd and request->incontrol_ind = 1) or
;007           if ((q.result_control_cd = result_process_outcontrol_cd and request->outcontrol_ind = 1) or
;007              request->outcontrol_ind = 0)
;007              t_cnt = t_cnt + 1
;007              if (t_cnt = 1)
;007                COL 5 "TROUBLESHOOTING STEP:  "
;007                ROW+1
;007              endif
;007              print_text = qt.step
;007              print_text_routine
;007           endif
;007         endif

/*007 Start new code*/
       FOOT q.qc_result_id
             ;print out the troubleshooting steps
             if (trouble_cnt > 0)
                if ((q.result_control_cd = result_process_outcontrol_cd and request->outcontrol_ind = 1) or
;008
;008
                   request->outcontrol_ind = 0)
                 for (t_cnt = 1 to trouble_cnt)
                    if (trouble_steps->qual[t_cnt].qc_result_id = q.qc_result_id)
                       for (t2_cnt = 1 to trouble_steps->qual[t_cnt].num_steps)
                          found = 1             ;008
                          if (t2_cnt = 1)
;009                              COL 5 "TROUBLESHOOTING STEP:  "
                             COL 5  I18N_Captions->trbl_step            ;009
                             ROW+1
                          endif
                          print_text = trouble_steps->qual[t_cnt].steps[t2_cnt].step
                          print_text_routine
                       endfor
                    endif
                 endfor
                endif
             endif

         ;print out the rules that failed
         if (rule_cnt > 0)
           if ((q.result_control_cd = result_process_outcontrol_cd and request->outcontrol_ind = 1) or
               (q.result_Type_cd != result_type_numeric_cd and request->outcontrol_ind = 1 and                                 ;008
               (q.result_process_cd = result_status_alp_abnormal_cd or q.result_process_cd = result_status_alp_review_cd)) or  ;008
              request->outcontrol_ind = 0)
            for (r_cnt = 1 to rule_cnt)
               if (failed_rules->qual[r_cnt].qc_result_id = q.qc_result_id)
                   for (r2_cnt = 1 to failed_rules->qual[r_cnt].num_rules)
                      found = 1                  ;008
                      if (r2_cnt = 1)
;009                         COL 5 "RULES FAILED: "
                         COL 5 I18N_Captions->RULES_FAILED         ;009
                         ROW +1
                      endif
                      print_text = failed_rules->qual[r_cnt].rules[r2_cnt].rule_definition
                      print_text_routine
                   endfor
               endif
            endfor
            if (found = 1)                       ;008
               ROW +1                            ;008
            endif                                ;008
           endif
         endif
       FOOT q.lot_id
            ROW +1
            if (found_results = 1)
              Col 1 Underscore                               ;008
              ROW +2
            endif
       FOOT q.task_assay_cd
           if (found_results = 1)
              ROW +1
              if (ROW > 55)
                  BREAK
              endif
;009              COL 1 "TOTAL OF ACTIONS FOUND WITHIN THE DATE RANGE:"
;009              ROW + 1
;009              COL 17  "VERIFIED"
;009              COL 32  "ACCEPTED"
;009              COL 47  "CHANGED"
;009              COL 62  "REJECTED"
;009              COL 77  "DISCARDED"
;009              COL 92  "TOTAL"

              COL 1 I18N_Captions->tot_stat
              ROW +1
              COL 17  I18N_Captions->VERIFIED
              COL 32  I18N_Captions->ACCEPTED
              COL 47  I18N_Captions->CHANGED
              COL 62  I18N_Captions->REJECTED
              COL 77  I18N_Captions->DISCARDED
              COL 92  I18N_Captions->TOTAL
              ROW + 1
              COL 17  "--------"
              COL 32  "--------"
              COL 47  "--------"
              COL 62  "--------"
              COL 77  "--------"
              COL 92  "-----"
              ROW+1
;009              COL 5   "COUNT"
              COL 5   I18N_Captions->COUNT                        ;009
              COL 20  result_status_verified_count "###;R"
              COL 35  result_status_accepted_count "###;R"
              COL 50  result_status_changed_count "###;R"
              COL 65  result_status_rejected_count "###;R"
              COL 80  result_status_discarded_count "###;R"
              total_cnt = result_status_verified_count  + result_status_accepted_count
                        + result_status_changed_count + result_status_rejected_count
                        + result_status_discarded_count
              COL 95  total_cnt  "###;R"
              ROW+1
;009              COL 5   "% OF TOTAL"
              COL 5   I18N_captions->per_tot                                 ;009
              if (cnvtint(total_cnt) > 0)
                arg_raw_value = (result_status_verified_count / total_cnt) * 100.0
                rslt = uar_fmt_result(2, 4, 1, 0, arg_raw_value)
                COL 18  rslt "#####;R"

                arg_raw_value = (result_status_accepted_count / total_cnt) * 100.0
                rslt = uar_fmt_result(2, 4, 1, 0, arg_raw_value)
                COL 33  rslt "#####;R"

                arg_raw_value = (result_status_changed_count / total_cnt) * 100.0
                rslt = uar_fmt_result(2, 4, 1, 0, arg_raw_value)
                COL 48  rslt "#####;R"

                arg_raw_value = (result_status_rejected_count / total_cnt) * 100.0
                rslt = uar_fmt_result(2, 4, 1, 0, arg_raw_value)
                COL 63  rslt "#####;R"

                arg_raw_value = (result_status_discarded_count / total_cnt) * 100.0
                rslt = uar_fmt_result(2, 4, 1, 0, arg_raw_value)
                COL 78  rslt "#####;R"

                arg_raw_value = (total_cnt / total_cnt) * 100.0
                rslt = uar_fmt_result(2, 4, 1, 0, arg_raw_value)
                COL 93  rslt "#####;R"
            else
;009                COL 20  "N/A"
;009                COL 35  "N/A"
;009                COL 50  "N/A"
;009                COL 65  "N/A"
;009                COL 80  "N/A"
;009                COL 95  "N/A"

                COL 20  I18N_captions->na               ;009
                COL 35  I18N_captions->na               ;009
                COL 50  I18N_captions->na               ;009
                COL 65  I18N_captions->na               ;009
                COL 80  I18N_captions->na               ;009
                COL 95  I18N_captions->na               ;009
            endif
            ROW +1
            Col 1 Underscore
            ROW +1
         endif
/*007 End new code*/
       FOOT q.service_resource_cd
;         BREAK
         ROW + 0
       FOOT REPORT

            ROW +2
;_I18N_:009             call center("##### END OF REPORT #####", 0, 125)
            call center(uar_i18ngetmessage(i18nHandle,"key_21","##### END OF REPORT #####"), 0, 125) ;_I18N_:009 MAX=25
      WITH
         outerjoin = d4,
         outerjoin = d2,
         dontcare  = c,
         dontcare  = qe2,                               ;007
         dontcare  = p1,                                ;007
         dontcare  = qe,                                ;007
         dontcare  = p3,                                ;007
         outerjoin = d3,
         outerjoin = d5,                                ;007
         nocounter

         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif

      if (curqual = 0)
         go to results_failed
      else
         set reply->status_data->status = "S"
         if (size(trim(request->output_dist)) > 0)
           SET spool = value(reply->file_name) value(request->output_dist) 
         endif
      endif

      go to exit_script

/********************************************************************/
/* Executed if qc_result table get is unsuccessful                  */
/********************************************************************/
      #results_failed
        set reply->status_data->subeventstatus[1]->operationname =
           "get"
        set reply->status_data->subeventstatus[1]->operationstatus =
           "F"
        set reply->status_data->subeventstatus[1]->targetobjectname =
           "table"
        set reply->status_data->subeventstatus[1]->targetObjectValue =
           "qc_results table"
        set reply->status_data->status = "Z"

      go to exit_script

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
    #exit_script

END GO

;Generated by GNU enscript 1.6.4.
