 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_mult_prev_results/glb_get_mult_prev_results.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_get_mult_prev_results.prg
        Object name:            glb_get_mult_prev_results
        Request #:              250095

        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Get previous results for a given person_id
                                and task_assay.

        Tables read:            accession_order_r
                                code_value
                                container
                                data_map
                                orders
                                perform_result
                                profile_task_r
                                resource_group
                                result

        Tables updated:         None
        Executing from:         MultiplePreviousResults.dll

        Special Notes:          None

******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 04/03/97 John Mitchell        Initial Release                     *
;    *001 08/18/97 Jeff Fry             Add Linear/Feasible/Dilution        *
;    *002 09/19/97 Hal Patchen          Add Autoverification logic          *
;    *003 09/25/97 Jeff Fry             Add related assay logic             *
;    *004 11/14/97 Hal Patchen          Add subsection level data map check *
;    *005 11/21/97 Hal Patchen          Add check for accession primary_flag*
;    *006 05/05/98 Hal Patchen          Verify subsection level data map    *
;    *                                  is associated with route test site  *
;    *007 06/09/00 Gary Runde           Return result_code_set_cd for BB    *
;    *008 09/24/02 Mark Brooks          Added service resource security.    *
;    *009 10/13/04 Jim Jensen           Retrieve INREVIEW & CORRINREV status*
;    *010 11/05/05 Josh W Arnold        Get historical names                *
;    *011 01/25/06 Matt Schile          Added sci_notation_ind to the reply *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

             drop program GLB_GET_MULT_PREV_RESULTS:dba go
             create program GLB_GET_MULT_PREV_RESULTS:dba

      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  person_id                    = f8
         1  task_assay_cd                = f8
         1  startdate                    = dq8
         1  enddate                      = dq8
         1  maxnum                       = i4
         1  resource_sec_ind             = i2
         1  get_historical_names_ind     = i2                    
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/

      record reply
      (
       1 qual[*]
        2 task_assay_cd            = f8                                 
        2 task_assay_disp          = vc                                 
        2 order_id                 = f8
        2 order_dt_tm              = dq8
        2 result                   = f8
        2 result_value_dt_tm       = dq8
        2 collect_dt_tm            = dq8
        2 perform_dt_tm            = dq8
        2 verify_dt_tm             = dq8
        2 accession                = c20
        2 result_type_cd           = f8
        2 result_type_disp         = vc
        2 result_type_mean         = c12
        2 result_status_cd         = f8
        2 result_status_disp       = vc
        2 result_status_mean       = c12
        2 result_value_alpha       = vc
        2 ascii_text               = vc
        2 result_code_set_cd       = f8                        
        2 result_code_set_disp     = vc                        
        2 normal_cd                = f8
        2 normal_disp              = vc
        2 normal_mean              = c12
        2 critical_cd              = f8
        2 critical_disp            = vc
        2 critical_mean            = c12
        2 review_cd                = f8
        2 review_disp              = vc
        2 review_mean              = c12
        2 delta_cd                 = f8
        2 delta_disp               = vc
        2 delta_mean               = c12
        2 linear_cd                = f8                                 
        2 linear_disp              = vc                                 
        2 linear_mean              = c12                                
        2 feasible_cd              = f8                                 
        2 feasible_disp            = vc                                 
        2 feasible_mean            = c12                                
        2 dilution_factor          = f8                                 
        2 normal_high              = f8
        2 normal_low               = f8
        2 normal_alpha             = vc
        2 data_map_ind             = i2
        2 max_digits               = i4
        2 min_digits               = i4
        2 min_decimal_places       = i4
        2 less_great_flag          = i2
        2 qc_override_cd           = f8
        2 qc_override_disp         = c40
        2 qc_override_mean         = c12
        2 historical_name          = vc
        2 sci_notation_ind         = i2
        2 notify_cd                = f8
        2 notify_disp              = vc
        2 notify_mean              = c12
       1 historical_demog_ind = i2
%i cclsource:status_block.inc
      )


      record assays                                                     
      (                                                                 
        1  cnt                          = i2                            
        1  qual[*]                                                      
           2  task_assay_cd             = f8                            
      )                                                                 

	  record hist_names
      (                                                                 
        1  cnt                          = i2
        1  qual[*]                                                      
           2  name			            = vc
           2  beg_dt_tm                 = dq8
      )                                                                 

%i cclsource:pcs_resource_security.inc                                  


      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
      
         declare FindHistName(qDate=Q8)=VC

         set CV_REQUIRED_RECS               = 6
         declare cv_cnt                     = i4
         set ACTIVITY_TYPE_CODESET          = 106
         set ACTIVITY_TYPE_GLB_CDF          = "GLB"
         set ORDER_STATUS_CODESET           = 6004
         set ORDER_STATUS_CANCELED_CDF      = "CANCELED"
         set ORDER_COMMENT_CODESET          = 14
         set ORDER_COMMENT_CDF              = "ORD COMMENT"
         set ORDER_NOTE_CDF                 = "ORD NOTE"
         set RESULT_STATUS_CODESET          = 1901
         set RESULT_STATUS_VERIFIED_CDF     = "VERIFIED"
         set RESULT_STATUS_AUTOVERIFIED_CDF = "AUTOVERIFIED"
         set RESULT_STATUS_CORRECTED_CDF    = "CORRECTED"
         set RELATED_ASSAY_TYPE_CODESET     = 15189
         set RELATED_ASSAY_TYPE_DELTA_CDF   = "DELTA"
         set DATA_MAP_TYPE_FLAG             = 0
         set SERV_RES_TYPE_CODESET          = 223
         set SERV_RES_SUBSECTION_CDF        = "SUBSECTION"
         declare order_status_canceled_cd      = f8
         declare order_comment_cd              = f8
         declare order_note_cd                 = f8
         declare result_status_verified_cd     = f8
         declare result_status_autoverified_cd = f8
         declare result_status_corrected_cd    = f8
         declare related_assay_type_delta_cd   = f8
         declare serv_res_subsection_cd        = f8
         declare q_cnt                         = i4
         declare c_cnt                         = i4
         declare a_cnt                         = i4
         declare i_cnt                         = i4
         declare r_cnt                         = i4
         declare max_q_cnt                     = i4
         declare max_c_cnt                     = i4
         declare max_a_cnt                     = i4
         declare idx                           = i4
         declare cnt1                          = i4
         declare cnt2                          = i4
         declare cnt3                          = i4
         declare ra_cnt                        = i4
         declare r_found                       = i2
         declare dHistoryCd                    = f8 with protect, noconstant(0.0)
         declare dCurrentNameTypeCd            = f8 with protect, noconstant(0.0)
         declare lHistNameCnt                  = i4 with protect, noconstant(0)
         declare lRepIndx                      = i4 with protect, noconstant(0)

         declare dServiceResourceCd            = f8  with protect, noconstant(0.0)
         declare nResourceSecInd               = i2  with protect, noconstant(0)
         declare sRESULT_STATUS_INREVIEW_CDF   = c12 with protect, constant("INREVIEW")
         declare dResult_Status_InReview_cd    = f8  with protect, noconstant(0.0)
         declare sRESULT_STATUS_CORRINREV_CDF  = c12 with protect, constant("CORRINREV")
         declare dResult_Status_CorrInRev_cd   = f8  with protect, noconstant(0.0)
         
         ;Slightly < one minute, expressed as a fraction of a day, used for rounding up
         declare dMINUTE                       = f8  with protect, constant(1/1450.0) 


         call InitResourceSecurity(request->resource_sec_ind)

         set reply->status_data.status = "F"

         if (request->maxnum = 0)
            set request->maxnum = 100
         endif

		set dHistoryCd = uar_get_code_by("MEANING", 20790, "HISTORY")
		set dCurrentNameTypeCd = uar_get_code_by("MEANING", 213, "CURRENT")
		set hist_names->cnt = 0
		;Determine if we should get historical names
		set reply->historical_demog_ind = 0
		if ((request->get_historical_names_ind != 0) and (request->person_id != 0.0))
			;Make sure the client stores historical demographics
			select into "nl:"
			from code_value_extension cve
			where cve.code_value = dHistoryCd
			  and cve.field_name = "OPTION"
			  and cve.code_set = 20790
			detail 
				if (trim(cve.field_value,3) = "1")
					reply->historical_demog_ind = 1
				endif
			with nocounter
		endif
      /***********************************************************************
      * Load order status, order comment and result status code sets         *
      ***********************************************************************/
         set cv_cnt = 0

         select into "nl:"
            cv.code_set,
            cv.code_value
         from
            code_value cv
         where ((cv.code_set = RESULT_STATUS_CODESET)
            or  (cv.code_set = RELATED_ASSAY_TYPE_CODESET)
            or  (cv.code_set = SERV_RES_TYPE_CODESET
             and cv.cdf_meaning = SERV_RES_SUBSECTION_CDF))
           and cv.active_ind = 1
           and (cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
             and  cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3))
         detail
            if (cv.code_set = RESULT_STATUS_CODESET
            or  cv.code_set = RELATED_ASSAY_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of RESULT_STATUS_VERIFIED_CDF:
                    result_status_verified_cd     = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_AUTOVERIFIED_CDF:
                    result_status_autoverified_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RESULT_STATUS_CORRECTED_CDF:
                    result_status_corrected_cd    = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of sRESULT_STATUS_INREVIEW_CDF:
                    dResult_Status_InReview_cd    = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of sRESULT_STATUS_CORRINREV_CDF:
                    dResult_Status_CorrInRev_cd   = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of RELATED_ASSAY_TYPE_DELTA_CDF:
                    related_assay_type_delta_cd   = cv.code_value
               endcase
            endif
            if (cv.code_set = SERV_RES_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of SERV_RES_SUBSECTION_CDF:
                    serv_res_subsection_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif

         with nocounter

         ;* Verify that all required code value records were read.
         if (cv_cnt != CV_REQUIRED_RECS)
            go to Exit_Script
         endif

set assays->cnt = 0                                                     

select into "nl:"                                                       
   ra.task_assay_cd                                                     
from                                                                    
   related_assay ra                                                     
where                                                                   
   ra.related_entity_id =                                               
      (                                                                 
       select                                                           
          related_entity_id                                             
       from                                                             
          related_assay                                                 
       where                                                            
          task_assay_cd = request->task_assay_cd                        
       and                                                              
          rel_type_cd = related_assay_type_delta_cd                     
      )                                                                 
detail                                                                  
   assays->cnt = assays->cnt + 1                                        
   stat = alterlist(assays->qual, assays->cnt)                          
   assays->qual[assays->cnt]->task_assay_cd = ra.task_assay_cd          
with nocounter                                                          

if (curqual = 0)                                                        
   set assays->cnt = 1                                                  
   set stat = alterlist(assays->qual, assays->cnt)                      
   set assays->qual[assays->cnt]->task_assay_cd =                       
      request->task_assay_cd                                            
endif                                                                   

declare start_pos  = i4                                                 
subroutine insert_result( none1 )                                       

   if (idx < request->maxnum)                                           
      set start_pos = r_cnt - 1                                         
   else                                                                 
      set start_pos = request->maxnum - 1                               
   endif                                                                

   call echo(" ", 1)                                                    
   call echo(build("Making space at qual[", idx, "]"), 1)               
   set cnt1 = start_pos                                                 
   while (cnt1 >= idx)                                                  
        call echo(build                                                 
           ("  --> Moving [", cnt1, "] to [", cnt1 + 1, "]"), 1)        
        set reply->qual[cnt1 + 1]->task_assay_cd =                      
                reply->qual[cnt1]->task_assay_cd                        
        set reply->qual[cnt1 + 1]->order_id =                           
                reply->qual[cnt1]->order_id                             
        set reply->qual[cnt1 + 1]->result = reply->qual[cnt1]->result   
        set reply->qual[cnt1 + 1]->collect_dt_tm =                      
                reply->qual[cnt1]->collect_dt_tm                        
        set reply->qual[cnt1 + 1]->perform_dt_tm =                      
                reply->qual[cnt1]->perform_dt_tm                        
        set reply->qual[cnt1 + 1]->verify_dt_tm =                       
                reply->qual[cnt1]->verify_dt_tm                         
        set reply->qual[cnt1 + 1]->accession =                          
                reply->qual[cnt1]->accession                            
        set reply->qual[cnt1 + 1]->result_status_cd =                   
                reply->qual[cnt1]->result_status_cd                     
        set reply->qual[cnt1 + 1]->result_type_cd =                     
                reply->qual[cnt1]->result_type_cd                       
        set reply->qual[cnt1 + 1]->result_value_alpha =                 
                reply->qual[cnt1]->result_value_alpha                   
        set reply->qual[cnt1 + 1]->ascii_text =                         
                reply->qual[cnt1]->ascii_text                           
        set reply->qual[cnt1 + 1]->normal_cd =                          
                reply->qual[cnt1]->normal_cd                            
        set reply->qual[cnt1 + 1]->critical_cd =                        
                reply->qual[cnt1]->critical_cd                          
        set reply->qual[cnt1 + 1]->review_cd =                          
                reply->qual[cnt1]->review_cd                            
        set reply->qual[cnt1 + 1]->delta_cd =                           
                reply->qual[cnt1]->delta_cd                             
        set reply->qual[cnt1 + 1]->linear_cd =                          
                reply->qual[cnt1]->linear_cd                            
        set reply->qual[cnt1 + 1]->feasible_cd =                        
                reply->qual[cnt1]->feasible_cd                          
        set reply->qual[cnt1 + 1]->dilution_factor =                    
                reply->qual[cnt1]->dilution_factor                      
        set reply->qual[cnt1 + 1]->normal_low =                         
                reply->qual[cnt1]->normal_low                           
        set reply->qual[cnt1 + 1]->normal_high =                        
                reply->qual[cnt1]->normal_high                          
        set reply->qual[cnt1 + 1]->less_great_flag =                    
                reply->qual[cnt1]->less_great_flag                      
        set reply->qual[cnt1 + 1]->normal_alpha =                       
                reply->qual[cnt1]->normal_alpha                         
        set reply->qual[cnt1 + 1]->result_value_dt_tm =                 
                reply->qual[cnt1]->result_value_dt_tm                   
        set reply->qual[cnt1 + 1]->order_dt_tm =                        
                reply->qual[cnt1]->order_dt_tm
        set reply->qual[cnt1 + 1]->qc_override_cd =
                reply->qual[cnt1]->qc_override_cd
        set reply->qual[cnt1 + 1]->notify_cd =
                reply->qual[cnt1]->notify_cd
      set cnt1 = cnt1 - 1                                               
   endwhile                                                             

   return                                                               
end                                                                     

set r_cnt = 0                                                           
for (ar_cnt = 1 to assays->cnt)                                         
   select into "nl:"
        o.seq,
        pr.perform_result_id,
        pr.perform_dt_tm,
        pr.result_value_numeric,
        pr.result_status_cd,
        pr.result_type_cd,
        pr.service_resource_cd,
        aor.accession,
        c.drawn_dt_tm,
        r.seq,
        re.event_dt_tm,
        dm.service_resource_cd,
        data_map_exists = decode(dm.seq, "Y", "N"),
        d_rg.seq,
        rg_exists = decode(rg.seq, "Y", "N"),
        rg.seq

   from
        perform_result pr,
        result r,
        orders o,
        accession_order_r aor,
        container c,
        result_event re,
        data_map dm,                                        
        dummyt d1,
        (dummyt d_rg with seq = 1),
        resource_group rg,
        discrete_task_assay dta

   plan
        r where r.person_id = request->person_id
        and r.task_assay_cd = assays->qual[ar_cnt]->task_assay_cd
   join
        re where re.result_id = r.result_id
        and re.event_type_cd in (result_status_verified_cd,
                                 result_status_autoverified_cd,
                                 result_status_corrected_cd,
                                 dResult_Status_InReview_cd,
                                 dResult_Status_CorrInRev_cd)
   join
        pr where pr.result_id = r.result_id
        and pr.result_status_cd = r.result_status_cd
   join
        c where c.container_id = pr.container_id
        and (request->enddate = 0.0 or c.drawn_dt_tm <=
             cnvtdatetime(request->enddate))
        and (request->startdate = 0.0 or c.drawn_dt_tm >=
             cnvtdatetime(request->startdate))
   join
        aor where aor.order_id = r.order_id
              and aor.primary_flag = 0
   join
        o where o.order_id = r.order_id
   join
        dta where dta.task_assay_cd = r.task_assay_cd
   join
        d1 where d1.seq = 1
   join
        dm where r.task_assay_cd = dm.task_assay_cd and dm.active_ind = 1
        and dm.data_map_type_flag = 0
    join
        d_rg  where d_rg.seq = 1
    join
        rg    where rg.parent_service_resource_cd = dm.service_resource_cd
                and rg.child_service_resource_cd  = pr.service_resource_cd
                and rg.resource_group_type_cd     = serv_res_subsection_cd
                and rg.root_service_resource_cd   = 0.0

   order
        cnvtdatetime(c.drawn_dt_tm) desc,
        pr.perform_result_id desc,
        dm.service_resource_cd,
        cnvtdatetime(re.event_dt_tm) desc

   head report                                                         
      data_map_level = 0                                               

   head pr.perform_result_id
      dServiceResourceCd = pr.service_resource_cd                          
      if (IsResourceViewable(dServiceResourceCd))                          
         nResourceSecInd = 1                                               

         if (r_cnt < request->maxnum)                                      
            r_cnt = r_cnt + 1
            if (mod(r_cnt, 10) = 1)
               call echo(" ", 1)                                           
               call echo(build                                             
                   ("--> Altering qual to [", r_cnt + 10, "]"), 1)         
               stat = alterlist(reply->qual,r_cnt + 10)
            endif
         endif
         data_map_level = 0                                               
         r_found = 0                                                       
         idx = 1                                                           
         if (r_cnt = 1)                                                    
            r_found = 1                                                    
         else                                                              
            r_cnt_hold = r_cnt - 1                                         
            while (r_found = 0 and idx < r_cnt_hold)                       
               if (c.drawn_dt_tm > reply->qual[idx]->collect_dt_tm)        
                  stat = insert_result(0)                                  
                  r_found = 1                                              
               else                                                        
                  idx = idx + 1                                            
               endif                                                       
            endwhile                                                       
             if (r_found = 0)                                               
               idx = r_cnt                                                 
            endif                                                          
         endif                                                             

         if (idx <= request->maxnum)                                       
            call echo(build("Adding at qual[", idx, "]"), 1)                
            reply->qual[idx]->task_assay_cd =                               
                   assays->qual[ar_cnt]->task_assay_cd                     
            reply->qual[idx]->order_id = r.order_id
            reply->qual[idx]->result = pr.result_value_numeric
            reply->qual[idx]->collect_dt_tm = c.drawn_dt_tm
            reply->qual[idx]->perform_dt_tm = pr.perform_dt_tm
            reply->qual[idx]->verify_dt_tm = re.event_dt_tm
            reply->qual[idx]->accession = aor.accession
            reply->qual[idx]->result_status_cd = pr.result_status_cd
            reply->qual[idx]->result_type_cd = pr.result_type_cd
            reply->qual[idx]->result_value_alpha = pr.result_value_alpha
            reply->qual[idx]->result_code_set_cd = pr.result_code_set_cd     
            reply->qual[idx]->ascii_text = pr.ascii_text
            reply->qual[idx]->normal_cd = pr.normal_cd
            reply->qual[idx]->critical_cd = pr.critical_cd
            reply->qual[idx]->review_cd = pr.review_cd
            reply->qual[idx]->delta_cd = pr.delta_cd
            reply->qual[idx]->linear_cd = pr.linear_cd                      
            reply->qual[idx]->feasible_cd = pr.feasible_cd                  
            reply->qual[idx]->dilution_factor = pr.dilution_factor          
            reply->qual[idx]->normal_low = pr.normal_low
            reply->qual[idx]->normal_high = pr.normal_high
            reply->qual[idx]->less_great_flag = pr.less_great_flag
            reply->qual[idx]->normal_alpha = pr.normal_alpha
            reply->qual[idx]->result_value_dt_tm = pr.result_value_dt_tm
            reply->qual[idx]->order_dt_tm = o.orig_order_dt_tm
            reply->qual[idx]->data_map_ind = 0  
            reply->qual[idx]->qc_override_cd = pr.qc_override_cd                           
            reply->qual[idx]->sci_notation_ind = dta.sci_notation_ind
            reply->qual[idx]->notify_cd = pr.notify_cd
         endif
      else
         nResourceSecInd = 0                                               
      endif                                                                


   head dm.service_resource_cd
       if (nResourceSecInd = 1)                                            
          if (data_map_exists = "Y")                                       
                ;* Check for exact match on data map                          
             if (data_map_level <= 2                                       
                and dm.service_resource_cd > 0.0                          
                and dm.service_resource_cd = pr.service_resource_cd)      

                data_map_level = 3                                         
                reply->qual[idx].data_map_ind = 1                          
                reply->qual[idx].max_digits = dm.max_digits                
                reply->qual[idx].min_digits = dm.min_digits                
                reply->qual[idx].min_decimal_places =                      
                   dm.min_decimal_places                                    
             endif                                                         

             ;* Check for subsection level data map                        
             if (data_map_level <= 1                                       
                and dm.service_resource_cd > 0.0                           
                and rg_exists = "Y"                                        
                and rg.parent_service_resource_cd = dm.service_resource_cd 
                and rg.child_service_resource_cd = pr.service_resource_cd) 
                data_map_level = 2                                         
                reply->qual[idx].data_map_ind = 1                          
                reply->qual[idx].max_digits = dm.max_digits                
                reply->qual[idx].min_digits = dm.min_digits                
                reply->qual[idx].min_decimal_places =                      
                      dm.min_decimal_places                                
             endif                                                         

             ;* Check for default all resources level data map             
             if (data_map_level = 0                                        
                and dm.service_resource_cd = 0.0)                          

                data_map_level = 1                                         
                reply->qual[idx].data_map_ind = 1                          
                reply->qual[idx].max_digits = dm.max_digits                
                reply->qual[idx].min_digits = dm.min_digits                
                reply->qual[idx].min_decimal_places =                      
                      dm.min_decimal_places                                
             endif                                                         
          endif                                                               
       endif

   with
      outerjoin = d1, dontcare = dm, outerjoin = d_rg, dontcare = rg   
endfor

call echo(" ", 1)                                                       
call echo(build("--> Altering qual to [", r_cnt, "]"), 1)               
set stat = alterlist(reply->qual,r_cnt)                                 

;If getting historical names
if (reply->historical_demog_ind = 1)
	;First retrieve all historical names for the person (ordered by transaction date, ascending)
	set lHistNameCnt = 0
	select into "nl:" pnh.name_full
	from person_name_hist pnh
	plan pnh where pnh.person_id = request->person_id
		and pnh.active_ind = 1
		and pnh.name_type_cd = dCurrentNameTypeCd
	order by pnh.transaction_dt_tm asc
	detail
		lHistNameCnt = lHistNameCnt + 1
		if (lHistNameCnt > size(hist_names->qual,5))
			stat = alterlist(hist_names->qual,lHistNameCnt + 9)
		endif
		hist_names->qual[lHistNameCnt]->name = pnh.name_full
		hist_names->qual[lHistNameCnt]->beg_dt_tm = pnh.transaction_dt_tm
	with nocounter
	set hist_names->cnt = lHistNameCnt
	set stat = alterlist(hist_names->qual,lHistNameCnt)
	;Now set the historical name info into the reply.
	;The collection datetime is rounded up to work around filing-time round-off errors
	for (lRepIndx = 1 to r_cnt)
		set reply->qual[lRepIndx]->historical_name = FindHistName(datetimeadd(reply->qual[lRepIndx]->collect_dt_tm, dMINUTE))
	endfor
endif

set reply->status_data->status = "S"


call echo(" ", 1)                                                       
for (idx = 1 to r_cnt)                                                  
   call echo(build("qual[", idx, "]"), 1)                               
   call echo(build                                                      
        ("task_assay_cd =", reply->qual[idx]->task_assay_cd), 1)        
   call echo(build("collected =",                                       
        format(reply->qual[idx]->collect_dt_tm,                         
        "MM/DD/YY HH:MM;;D")), 1)                                       
   call echo(" ", 1)                                                    
endfor                                                                  

#Exit_Script

    if ((reply->status_data->status != "F") and
        (GetResourceSecurityStatus(0) != "S"))                          
       call PopulateResSecStatusBlock(0)                                
       set reply->status_data->status = GetResourceSecurityStatus(0)    
    endif


;Look in the hist_names structure to find the historical name for the given date
subroutine FindHistName(qDate)
	declare lFirst = I4 with private,noconstant(0)
	declare lLast = I4 with private,noconstant(0)
	declare lCur = I4 with private,noconstant(0)
	declare sEmpty = VC with private,constant(" ")
	;If hist_names list is empty
	if (hist_names->cnt < 1)
		return (sEmpty)
	endif
	set lFirst = 1
	set lLast = hist_names->cnt
	;Do quick checks first
	if (qDate < hist_names->qual[lFirst]->beg_dt_tm)
		return (sEmpty)
	endif
	if (qDate >= hist_names->qual[lLast]->beg_dt_tm)
		return (hist_names->qual[lLast]->name)
	endif
	;Do a binary search to find the name.  To see that the logic works,
	;notice that we start with the date >= lFirst and < lLast.  This
	;invariant is preserved throughout the search.   
	while ((lLast - lFirst) > 1)
		set lCur = (lFirst + lLast) / 2
		if (qDate < hist_Names->qual[lCur]->beg_dt_tm)
			set lLast = lCur
		else
			set lFirst = lCur
		endif
	endwhile
	return (hist_names->qual[lFirst]->name)
end


    end
    go


;Generated by GNU enscript 1.6.4.
