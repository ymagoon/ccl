 ;;Solution_Test/script/PathNet -- Gen Lab/glb_accn_ce_audit/glb_accn_ce_audit.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Author:                 Kevin Brunner
        Date Written:           3/97
        Source file name:       glb_accn_ce_audit.prg
        Object name:            glb_accn_ce_audit

        Product:                General Lab
        Product Team:           General Lab
        HNA Version:            500
        CCL Version:            4.0

        Program purpose: Audit clinical event for accession
        Tables read: 
        Tables updated:
        Special Notes:

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 03/12/97 Kevin Brunner        Initial Release                     *
;    *002 09/19/97 Hal Patchen          Add autoverification logic          *
;    *003 05/03/99 Chad Moats		Removed multiple joins to code_value    *
;    *004 06/21/99 Derek Hime			Internationalization of script      *
;    *005 12/11/99 Kasie Sly			Merge of Internationalization       *
;    *006 08/07/03 Craig Sumrall		Update select table (person-prsnl)  *
;    *007 09/03/03 Craig Sumrall		Removed seclogin statement          *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program glb_accn_ce_audit:dba go
create program glb_accn_ce_audit:dba

paint

execute cclseclogin 

/*************************     i18n     **************************************begin mod ;004**/
; INCLUDE I18N FUNCTION DECLARATIONS
%i cclsource:i18n_uar.inc
; INITIALIZE VARIABLE THAT WILL KEEP THE HANDLE TO I18N DATA
set i18nHandle = 0
; CALL UAR_I18NLOCALIZATIONINIT
set h = uar_i18nlocalizationinit(i18nHandle,curprog,"",curcclrev)
/*************************     i18n     *************************************************;004**/
record captions
(
1 accnum 	= vc
1 name 		= vc
1 ordmnemonic	= vc
1 catalogcd	= vc
1 ordid		= vc
1 catalogdesc	= vc
1 dtadisp	= vc
1 dtacd	= vc
1 eventcd	= vc
1 subbmp	= vc
1 pdttm		= vc
1 perfby	= vc
1 verdttm	= vc
1 verby		= vc
1 resultval	= vc
1 resultunits	= vc
1 Title1	= vc
1 AccnPrompt	= vc
)
set captions-> accnum 		= uar_i18ngetmessage(i18nHandle,"accnum","Accession No:")
set captions-> name 		= uar_i18ngetmessage(i18nHandle,"name","Name")
set captions-> ordmnemonic	= uar_i18ngetmessage(i18nHandle,"ordmnemonic","Order Mnemonic")
set captions-> catalogcd	= uar_i18ngetmessage(i18nHandle,"catalogcd","catalog cd")
set captions-> ordid		= uar_i18ngetmessage(i18nHandle,"ordid","Order ID")
set captions-> catalogdesc	= uar_i18ngetmessage(i18nHandle,"catalogdesc","Catalog Description")
set captions-> dtadisp		= uar_i18ngetmessage(i18nHandle,"dtadisp","DTA(display)")
set captions-> dtacd		= uar_i18ngetmessage(i18nHandle,"dtacode","DTA (code)")
set captions-> eventcd		= uar_i18ngetmessage(i18nHandle,"eventcd","Event Code")
set captions-> subbmp		= uar_i18ngetmessage(i18nHandle,"subbmp","Subtable Bitmap")
set captions-> pdttm		= uar_i18ngetmessage(i18nHandle,"pdttm","Performed Date Time")
set captions-> perfby		= uar_i18ngetmessage(i18nHandle,"perfby","Performed by")
set captions-> verdttm		= uar_i18ngetmessage(i18nHandle,"verdttm","Verified Date time")
set captions-> verby		= uar_i18ngetmessage(i18nHandle,"verby","Verified by")
set captions-> resultval	= uar_i18ngetmessage(i18nHandle,"resultval","Result Val")
set captions-> resultunits	= uar_i18ngetmessage(i18nHandle,"resultunits","Result Units(display)")
set captions->Title1	        = uar_i18ngetmessage(i18nHandle,"title1","GLB Clinical Event Accession Audit")
set captions->AccnPrompt       = uar_i18ngetmessage(i18nHandle,"prompt","Accession? ")
/*********************************************************************************************end mod ;004**/

call clear (1,1)
call video (i)
call box   (1,1,22,80)
call line  (3,1,80,XHORAZ)
;004 call text (2, 3, "GLB Clinical Event Accession Audit")
call text (2, 3, captions->Title1)		;004
call video (n)

;004 call text (9, 5, "Accession? ")
call text (9, 5, captions->AccnPrompt)						;004

call accept (9, 40, "CCCCCCCCCCCCCCCCCC;C")
;, format(CURDATE, "DD-MMM-YYYY;;D"))
set accn_nbr = curaccept
;call accept (10, 40, "NNNN;C", format(CURTIME, "HHMM;;M"))
;set starttime = curaccept
;call accept (11, 40, "NNDCCCDNNNN;C", format(CURDATE, "DD-MMM-YYYY;;D"))
;set enddate = curaccept
;call accept (12, 40, "NNNN;C", format(CURTIME, "HHMM;;M"))
;set endtime = curaccept

set num_cd = 0.0
set alpha_cd = 0.0
set calc_cd = 0.0
set o_cnt = 0
set a_cnt = 0
set r_cnt = 0
set oidx = 0
set aidx = 0
set ridx = 0
set oldperf = 0.0
set perfnum = 0.0
set oldver = 0.0
set oldautover = 0.0                                                   ;002
set oldcor = 0.0
set vernum = 0.0
set autovernum = 0.0                                                   ;002
set cornum = 0.0

select into 'nl:'
  c.code_value
from code_value c
where c.code_set=289 and
      c.cdf_meaning in ("2","3","8")
detail
  if (c.cdf_meaning="2")
    alpha_cd=c.code_value
  elseif (c.cdf_meaning="3")
    num_cd=c.code_value
  elseif (c.cdf_meaning="8")
    calc_cd=c.code_value
  endif
with nocounter

select into 'nl:'
  c.code_value
from code_value c
where c.code_set=1901 and
      c.cdf_meaning in ("VERIFIED","CORRECTED",
                        "AUTOVERIFIED", "OLDAUTOVERF",                 ;002
                        "OLDVERIFIED","OLDCORRECTED",
                        "PERFORMED", "OLDPERFORMED")
detail
  if (c.cdf_meaning="VERIFIED")
    vernum=c.code_value
  elseif (c.cdf_meaning="AUTOVERIFIED")                                ;002
    autovernum = c.code_value                                          ;002
  elseif (c.cdf_meaning="CORRECTED")
    cornum=c.code_value
  elseif (c.cdf_meaning="OLDVERIFIED")
    oldver=c.code_value
  elseif (c.cdf_meaning="OLDAUTOVERF")                                 ;002
    oldautover = c.code_value                                          ;002
  elseif (c.cdf_meaning="OLDCORRECTED")
    oldcor=c.code_value
  elseif (c.cdf_meaning="OLDPERFORMED")
    oldperf=c.code_value
  elseif (c.cdf_meaning="PERFORMED")
    perfnum=c.code_value
  endif
with nocounter


select ; into 'nl:'
  ce.accession_nbr
 ,ce.order_id
 ,ce.task_assay_cd
 ,p.name_full_formatted
 ,o.order_id
 ,o.order_mnemonic
 ,o.catalog_cd
 ,ce.event_cd						;003
; ,ce.result_unit_cd					;003
 ;,ce.result_status_cd					;003
 ,ce.subtable_bit_map					;003
 ,date2=cnvtdatetime(ce.verified_dt_tm)	 		;003
 ,ce.verified_prsnl_id				
 ,date1=cnvtdatetime(ce.performed_dt_tm)	
 ,ce.performed_prsnl_id					;003
 ,ce.normal_low						;003
 ,ce.normal_high					;003
 ,ce.critical_low					;003
 ,ce.critical_high					;003
;001 ,c5.display						;003
;001 ,c2.description
;001 ,c3.display
;001 ,c4.display
 ,p2.name_full_formatted
 ,p3.name_full_formatted

from
  clinical_event ce
 ,person p
 ,orders o
;001 ,code_value c1
;001 ,code_value c2
;001 ,code_value c3
;001 ,code_value c4
;001 ,code_value c5
 ,prsnl p2
 ,prsnl p3
plan
  ce
   where ce.accession_nbr = accn_nbr
join
  p
   where p.person_id = ce.person_id
join
  o
   where o.order_id = ce.order_id
;003 join
;003  c1
;003   where c1.code_value = ce.task_assay_cd
;003 join 
;003  c2
;003   where c2.code_value = ce.catalog_cd
;003 join
;003  c3
;003   where c3.code_value = ce.result_units_cd
;003 join
;003  c4
;003   where c4.code_value = ce.record_status_cd
;003 join
;003  c5
;003   where c5.code_value = ce.result_status_cd
join
  p2
   where p2.person_id = ce.performed_prsnl_id
join
  p3
   where p3.person_id = ce.verified_prsnl_id 

order
  ce.accession_nbr
 ,ce.order_id
 ,ce.task_assay_cd
 ,ce.verified_prsnl_id

head report
  under=fillstring(131,"=")
;004  vdate = format(date2,"mm/dd/yy hh:mm:ss ;;d")
	vdate = concat(format(date2,"@SHORTDATE;;q")," ",format(date2,"@TIMEWITHSECONDS;;q"))		;004
;004  pdate = format(date1,"mm/dd/yy hh:mm:ss ;;d")
	pdate = concat(format(date1,"@SHORTDATE;;q")," ",format(date1,"@TIMEWITHSECONDS;;q"))		;004
head page
;004  col 0, "Accession No:"
	col 0, captions->accnum													;004
;  col 25, "Order Id",
;  col 40, "Catalog Cd",
;  col 55, "Task Assay Cd",
;  col 70, "Status Cd",
;  col 85, "Status",
;  row +1, col 0, under,
;  row +1

head ce.accession_nbr
  col 15, ce.accession_nbr,
  row +1,  
;004  col 0,"Name : ", call print(substring(1, 50, trim(p.name_full_formatted))),
	col 0,captions->name," : ", call print(substring(1, 50, trim(p.name_full_formatted))),		;004
  row +1,
  col 0, under,
  row +1


head ce.order_id
;004  col 5,"Order Mnemonic:", call print(substring(1, 20, trim(o.order_mnemonic))),
	col 5,captions->ordmnemonic,":", call print(substring(1, 20, trim(o.order_mnemonic))),		;004
;004  col 35,"catalog cd:", o.catalog_cd,
	col 35,captions->catalogcd,":", o.catalog_cd,									;004
  row +1,
;004  col 5,"Order ID:" o.order_id,
	col 5,captions->ordid,":", o.order_id,										;004
  cat_desc = trim(UAR_GET_CODE_DESCRIPTION(ce.catalog_cd),3)				;003
;004  col 35,"Catalog Description:" cat_desc,						;003
	col 35,captions->catalogdesc,":", cat_desc,									;004 
;003  col 35,"Catalog Description:" c2.description, 
  row +1

head ce.task_assay_cd
  task_assay = trim(UAR_GET_CODE_DISPLAY(ce.task_assay_cd),3)				;003
;004  col 10,"DTA(display) :", call print(substring(1, 20, task_assay)),			;003
	col 10,captions->dtadisp," :", call print(substring(1, 20, task_assay)),				;004
;003  col 10,"DTA(display) :", call print(substring(1, 20, trim(c1.display))),
;004  col 40,"DTA (code):",ce.task_assay_cd,
	col 40,captions->dtacd,":",ce.task_assay_cd,									;004
;004  col 70,"Event Code:", ce.event_cd,
	col 70,captions->eventcd,":", ce.event_cd,									;004
  row +1
                      

head ce.verified_prsnl_id
;004  col 12,"Subtable Bitmap:", ce.subtable_bit_map,
	col 12,captions->subbmp,":", ce.subtable_bit_map, 								;004
  row +1,
;004  col 15, "Performed Date Time:" pdate,
	col 15, captions->pdttm,":", pdate,											;004
;004  col 45, "Performed by:"
	col 45, captions->perfby,":"												;004
            call print(substring(1, 50, trim(p2.name_full_formatted)))
  row + 1,
;004  col 15, "Verified Date time:",vdate,
	col 15, captions->verdttm,":",vdate,										;004
;004  col 45, "Verified By:"
	col 45, captions->verby,":"												;004
           call print(substring(1, 50, trim( p3.name_full_formatted)))
  row +1
 
                      
detail
;004  col 15,"Result Val:", call print(substring(1,20, trim(ce.result_val))),
	col 15,captions->resultval,":", call print(substring(1,20, trim(ce.result_val))),				;004
  result_units = trim(UAR_GET_CODE_DISPLAY(ce.result_units_cd),3)			;003
;004  col 45,"Result Units(display):" result_units,						;003
	col 45,captions->resultunits,":",												;004
	   	  result_units,														;004
;003  col 45,"Result Units(display):" c3.display,
  row+ 1              

foot ce.task_assay_cd
 row + 1


with nocounter
        
end go










;Generated by GNU enscript 1.6.4.
