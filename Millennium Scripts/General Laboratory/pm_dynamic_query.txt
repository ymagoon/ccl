 ;;Solution_Test/script/Person Management/pm_dynamic_query/pm_dynamic_query.inc Turn on black mode

/****************************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-2000 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 ************************************************************************

          Date Written:
          Source file name:
          Object name:
          Request #:

          Product:            PM
          Product Team:       PM
          HNA Version:        HNA Millennium
          CCL Version:

          Program purpose: Provide a standard set of API to build dynamic
                           queries.

          Tables read:
          Tables updated:
          Executing from:

          Special Notes:

 ***********************************************************************
 *                  GENERATED MODIFICATION CONTROL LOG                 *
 ***********************************************************************
 *                                                                     *
 *Mod  Date      Engineer        Comment                                 *
 *---  --------  --------------- ----------------------------------------*
  000  ??????    Rober Farr      Initial Release
SS001  11/03/02  Sara Schmidt    changed begin_select to not automatically wrap quotes
                                 around the device passed in.
323099 03/13/12  Chiranjeevi     1-5501739091 - Person not combining due to excesive use call of parser                             
 ***********************************************************************

 ******************  END OF ALL MODCONTROL BLOCKS  ********************/
if(validate(dq_parser_rec->buffer_count,-99) = -99)
call echo("*****inside pm_dynamic_query include file *****")

free record dq_parser_rec
record dq_parser_rec
(
	1 buffer_count = i2
  1 plan_count = i2
  1 set_count = i2
  1 table_count = i2
  1 with_count = i2
  1 buffer[*]
    2 line = vc
)
set dq_parser_rec->buffer_count = 0
set dq_parser_rec->plan_count = 0
set dq_parser_rec->set_count = 0
set dq_parser_rec->table_count = 0
set dq_parser_rec->with_count = 0

/***************************************************/
/* Declares                                        */
/***************************************************/
  declare dq_add_detail(dqad_dummy) = null
  declare dq_add_footer(dqaf_target) = null
  declare dq_add_header(dqah_target) = null
  declare dq_add_line(dqal_line) = null
  declare dq_get_line(dqgl_idx) = vc
  declare dq_upt_line(dqul_idx, dqul_line) = null
  declare dq_add_planjoin(dqap_range) = null
  declare dq_add_set(dqas_to, dqas_from) = null
  declare dq_add_table(dqat_table_name, dqat_table_alias) = null
  declare dq_add_with(dqaw_control_option) = null
  declare dq_begin_insert(dqbi_dummy) = null
  declare dq_begin_select(dqbs_distinct_ind, dqbs_output_device) = null
  declare dq_begin_update(dqbu_dummy) = null
  declare dq_echo_query(dqeq_level) = null
  declare dq_end_query(dqes_dummy) = null
  declare dq_execute(dqe_reset) = null
  declare dq_reset_query(dqrb_dummy) = null
  ;declare dq_expand(dqe_not_ind, dqe_target, dqe_start, dqe_end, dqe_list, dqe_list_field) = null

/***************************************************/
/* Subroutines                                     */
/***************************************************/
subroutine dq_add_detail(dqad_dummy)
;Add detail
  call dq_add_line("detail")
end ;dq_add_detail

subroutine dq_add_footer(dqaf_target)
;add footer
  if( size(trim(dqaf_target),1) > 0 )
    call dq_add_line(concat("foot ", dqaf_target))
  else
    call dq_add_line("foot report")
  endif
end ;dq_add_footer

subroutine dq_add_header(dqah_target)
;add header
  if( size(trim(dqah_target),1) > 0 )
    call dq_add_line(concat("head ", dqah_target))
  else
    call dq_add_line("head report")
  endif
end ;dq_add_header

subroutine dq_add_line(dqal_line)
;Add a line to the parser buffer
  set dq_parser_rec->buffer_count = dq_parser_rec->buffer_count + 1
  if( mod(dq_parser_rec->buffer_count,10) = 1 )
    set stat = alterlist(dq_parser_rec->buffer, dq_parser_rec->buffer_count + 9)
  endif
  set dq_parser_rec->buffer[dq_parser_rec->buffer_count]->line = trim(dqal_line, 3)
end ;dq_add_line

subroutine dq_get_line(dqgl_idx)
  if( dqgl_idx > 0 and dqgl_idx <= size(dq_parser_rec->buffer,5))
    return(dq_parser_rec->buffer[dqgl_idx]->line)
  endif
end; dq_get_line

subroutine dq_upt_line(dqul_idx, dqul_line)
  if( dqul_idx > 0 and dqul_idx <= size(dq_parser_rec->buffer,5))
    set dq_parser_rec->buffer[dqul_idx]->line = dqul_line
  endif
end; dq_upt_line

subroutine dq_add_planjoin(dqap_range)
;add plan
  declare dqap_str = vc with private, noconstant(" ")

  if( dq_parser_rec->plan_count > 0 )
    set dqap_str = "join"
  else
    set dqap_str = "plan"
  endif

  if( size(trim(dqap_range),1) > 0 )
    call dq_add_line(concat(dqap_str, " ", dqap_range, " where"))
    set dq_parser_rec->plan_count = dq_parser_rec->plan_count + 1
  else
    call dq_add_line("where ")
  endif
end ;dq_add_plan

subroutine dq_add_set(dqas_to, dqas_from)
;Add set for insert or update
	if( dq_parser_rec->set_count > 0 )
    ;add additional set
    call dq_add_line(concat(",", dqas_to, " = ", dqas_from))
  else
    ;add first set
    call dq_add_line(concat("set ", dqas_to, " = ", dqas_from))
  endif

  set dq_parser_rec->set_count = dq_parser_rec->set_count + 1
end ;dq_add_set

subroutine dq_add_table(dqat_table_name, dqat_table_alias)
;Add table to query
  declare dqat_str = vc with private, noconstant(" ")

;build table string
  if( dq_parser_rec->table_count > 0 )
    ;Add additional table to query
    set dqat_str = concat(" , ", dqat_table_name)
  else
    ;Add first table
    set dqat_str = concat(" from ", dqat_table_name)
  endif

  if( size(trim(dqat_table_alias),1) > 0 )
    set dqat_str = concat(dqat_str, " ", dqat_table_alias)
  endif

  set dq_parser_rec->table_count = dq_parser_rec->table_count + 1

;Add line to parser buffer
	call dq_add_line(dqat_str)
end ;dq_add_table

subroutine dq_add_with(dqaw_control_option)
;Add with clause
	if( dq_parser_rec->with_count > 0 )
    ;add additional with
    call dq_add_line(concat(",", dqaw_control_option))
  else
    ;add first with
    call dq_add_line(concat("with ", dqaw_control_option))
  endif

  set dq_parser_rec->with_count = dq_parser_rec->with_count + 1
end ;dq_add_with

subroutine dq_begin_insert(dqbi_dummy)
;Start insert query

;Empty buffer
	call dq_reset_query(1)

;add insert
  call dq_add_line("insert")

end ;dq_begin_insert

subroutine dq_begin_select(dqbs_distinct_ind, dqbs_output_device)
;Start a select query.
  declare dqbs_str = vc with noconstant(" ")

;Empty buffer
	call dq_reset_query(1)

;Generate begin select
  if( dqbs_distinct_ind = 0 )
    set dqbs_str = "select"
  else
    set dqbs_str = "select distinct"
  endif

  if( size(trim(dqbs_output_device),1) > 0 )
    ;ss001 set dqbs_str = concat(dqbs_str, " into ", char(34), dqbs_output_device, char(34))
    set dqbs_str = concat(dqbs_str, " into ", dqbs_output_device) ;ss001
  endif

;Add line to buffer
  call dq_add_line(dqbs_str)
end ;dq_begin_select

subroutine dq_begin_update(dqbu_dummy)
;Start update query

;Empty buffer
	call dq_reset_query(1)

;add update
  call dq_add_line("update")

end ;dq_begin_insert

subroutine dq_echo_query(dqeq_level)
;Echo query
	declare dqeq_i = i4 with private, noconstant(0)
  declare dqeq_j = i4 with private, noconstant(0)

  if( dqeq_level = 1 )
    call echo("-------------------------------------------------------------------")
    call echo("Parser Buffer Echo:")
    call echo("-------------------------------------------------------------------")
    for( dqeq_i = 1 to dq_parser_rec->buffer_count )
      call echo(dq_parser_rec->buffer[dqeq_i]->line)
    endfor
    call echo("-------------------------------------------------------------------")
  elseif( dqeq_level = 2 )
    if( validate(reply->debug[1]->line,"-9") != "-9" )
      set dqeq_j = size(reply->debug,5)
      set stat = alterlist(reply->debug, dqeq_j + size(dq_parser_rec->buffer, 5) + 4)
      set reply->debug[dqeq_j + 1]->line = "-------------------------------------------------------------------"
      set reply->debug[dqeq_j + 2]->line = "Parser Buffer Echo:"
      set reply->debug[dqeq_j + 3]->line = "-------------------------------------------------------------------"
      for( dqeq_i = 1 to dq_parser_rec->buffer_count )
        set reply->debug[dqeq_j + dqeq_i + 3]->line = dq_parser_rec->buffer[dqeq_i]->line
      endfor
      set reply->debug[dqeq_j + dq_parser_rec->buffer_count + 4]->line
          = "-------------------------------------------------------------------"
    endif
  endif
end; dq_echo_query

subroutine dq_end_query(dqes_dummy)
;End the query, resize the buffer

;Add line to buffer
  call dq_add_line(" go")

;Resize buffer to minimum
  set stat = alterlist(dq_parser_rec->buffer, dq_parser_rec->buffer_count)
end ;dq_end_query

subroutine dq_execute(dqe_reset)

;323099++
;check to see if the prg exists and if exists then execute the script.
 if (checkprg("PM_DQ_EXECUTE_PARSER") > 0)
    execute pm_dq_execute_parser with replace ("TEMP_DQ_PARSER_REC","DQ_PARSER_REC")
    if( dqe_reset = 1 )
      set stat = initrec(dq_parser_rec)
    endif
 else
;323099--
;Execute buffer
    declare dqe_i = i4 with private, noconstant(0)

;Loop through buffer
    for( dqe_i = 1 to dq_parser_rec->buffer_count )
      call parser(dq_parser_rec->buffer[dqe_i]->line, 1)
    endfor

;Reset query
    if( dqe_reset = 1 )
      call dq_reset_query(1)
    endif
 endif    ;323099
end       ;dq_execute
 
subroutine dq_reset_query(dqrb_dummy)
;Reset query
  set stat = alterlist(dq_parser_rec->buffer,0)
  set dq_parser_rec->buffer_count = 0
  set dq_parser_rec->plan_count = 0
  set dq_parser_rec->set_count = 0
  set dq_parser_rec->table_count = 0
  set dq_parser_rec->with_count = 0
end ;dq_reset_query
endif

;Generated by GNU enscript 1.6.4.
