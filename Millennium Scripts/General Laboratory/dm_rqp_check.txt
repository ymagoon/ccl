 ;;Solution_Test/script/Database Architecture -- Tools/DM_REQUEST_PROCESSING/dm_rqp_check.prg Turn on black mode

drop program dm_rqp_check:dba go
create program dm_rqp_check:dba

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1995 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       DM_RQP_CHECK.PRG
        Object name:            DM_RQP_CHECK
        Request #:              ?

        Product:                ACCESS MANAGEMENT
        Product Team:           ACCESS MANAGEMENT
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Determine if all records in a CSV file are in
                                the Request_Processing table. The CSV file must
                                be located in the "Cer_install" directory. The
                                CSV file name must be passed to the program.
                                Example: DM_RQP_CHECK "dm_rqp.csv" go.

                                The CSV file should head a header line. The
                                field values in the CSV must be in the
                                following order:

                                request_number,sequence,target_request_number,
                                format_script,service,forward_override_ind,
                                destination_step_id,active_ind,
                                reprocess_reply_ind.

        Tables read:            Request_Processing

        Tables updated:         N/A

        Executing from:         ?

        Special Notes:          Feature number 18297
******************************************************************************/
;~DB~************************************************************************
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 05/14/2001 DH3635            Initial Release                      *
;     001 05/20/2002 DH3635            Allow for longer file names to be    *
;                                      passed in. 			    *
;     002 09/12/2002 JM6512	       Modified error message 		    *
;     003 12/09/2002 JM6512	       Added cnvtupper			    *
;     004 02/25/04 CERCAF               change check for service and format *
;					script to <= " " or null 
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************/

%i cclsource:dm_readme_data.inc 

set rqp_emsg = fillstring(132, " ")  ;used with the error() function to trap
                                     ;ccl errors
set rqp_ecode = 0                    ;used with the error() function to trap
                                     ;ccl errors

set unique_cnt = 0 ;number of records in the CSV file

set rqp_error_cnt = 0 ;number of records that did not make it into the table

;create record structure to load data from CSV file into

free record mmp_rqp
record mmp_rqp
(1 data[*]
   2 request_number = i4
   2 sequence = i4
   2 target_request_number = i4
   2 format_script = vc
   2 service = vc
   2 forward_override_ind = i2
   2 destination_step_id = f8
   2 active_ind = i2
   2 reprocess_reply_ind = i2
)

;read data into record structure

set rdm_infile_name = concat("cer_install:",$1)

call parser(concat('set logical rdm_csv_name"',rdm_infile_name,'"'))
call parser('go')

free define rtl2
     define rtl2 is "rdm_csv_name"
select into "nl:"
t.line
  from rtl2t t
 where t.line > " "


Head report
unique_stat = alterlist(mmp_rqp->data, 50)
unique_cnt = 0

line_data = fillstring(2000," ")


First_one = "Y" ;first record is the header line

detail


if(first_one = "N") ;don't use the header line

        unique_cnt= unique_cnt+ 1

        if(mod(unique_cnt,50)=1 and unique_cnt != 1)
                 unique_stat = alterlist(mmp_rqp->data, unique_cnt+49)
        endif

        ;find commas and split the data into the correct fields

        line_data = t.line

        ;line_data row + 1 ;testing


        field_number = 1 ;each line contains 9 fields
        check_pos = 0

        while(field_number <= 9 )

        check_char = " "
        check_pos = 0

        While(check_pos <= 2000 and check_char != ",")

        check_pos = check_pos + 1
        check_char =substring(check_pos,1,line_data)

        endwhile

        found_field = substring(1,check_pos-1,line_data)

        case (field_number)
                ;"Request_number"
        of 1 : mmp_rqp->data[unique_cnt].request_number = cnvtint(found_field)
                ;"Sequence"
        of 2 : mmp_rqp->data[unique_cnt].sequence = cnvtint(found_field)
                ;"Target_request_ind"
        of 3 : mmp_rqp->data[unique_cnt].target_request_number
                                                  = cnvtint(found_field)
                ;"Format_script"
        of 4 : mmp_rqp->data[unique_cnt].format_script = found_field
                ;"Service"
        of 5 : mmp_rqp->data[unique_cnt].service = found_field
                ;"Forward_override_ind"
        of 6 : mmp_rqp->data[unique_cnt].Forward_override_ind
                                                 = cnvtint(found_field)
                ;"Destination_step_ind"
        of 7 : mmp_rqp->data[unique_cnt].Destination_step_id
                                                 = cnvtreal(found_field)
                ;"Active_ind"
        of 8 : mmp_rqp->data[unique_cnt].active_ind = cnvtint(found_field)
                ;"Reprocess_Reply_ind"
        of 9 : mmp_rqp->data[unique_cnt].Reprocess_Reply_ind
                                                    = cnvtint(found_field)
        endcase

                /* testing data dump
                col + 10
                "field , field number" row + 1
                found_field col + 10  col + 1 "d"
                field_number col + 1 "d"row + 1  ;testing
                */

        line_data = substring(check_pos+1,2000,line_data)

        field_number = field_number + 1

        endwhile

endif

first_one = "N"

with nocounter, maxcol = 2100

set stat = alterlist(mmp_rqp->data,unique_cnt)

set all_in_the_csv = "Y"

;join with outerjoin, dontexist. Exception reporting. If the join does not
;happen the record does not exist on the Request_Processing table

select into "nl:"

rqp.request_number

from (dummyt d with seq=value(unique_cnt)),
     request_processing rqp

plan d

join rqp where
mmp_rqp->data[d.seq].request_number = rqp.request_number and
mmp_rqp->data[d.seq].target_request_number = rqp.target_request_number

  and

(
(cnvtupper(mmp_rqp->data[d.seq].format_script) = cnvtupper(rqp.format_script)) ;003 
OR
;004 ((mmp_rqp->data[d.seq].format_script =" ") and (rqp.format_script = null)) 
/*004*/((mmp_rqp->data[d.seq].format_script =" ") and (rqp.format_script = null or rqp.format_script <= " ")) 
)

and

(
(cnvtupper(mmp_rqp->data[d.seq].service) = cnvtupper(rqp.service))    ;003
OR
;004((mmp_rqp->data[d.seq].service = " ") and (rqp.service = null))
/*004*/((mmp_rqp->data[d.seq].service = " ") and (rqp.service = null or rqp.service <= " "))
)

and

mmp_rqp->data[d.seq].destination_step_id = rqp.destination_step_id and
mmp_rqp->data[d.seq].Forward_override_ind = rqp.Forward_override_ind and
mmp_rqp->data[d.seq].Reprocess_Reply_ind = rqp.Reprocess_Reply_ind
 

detail

rqp_error_cnt = rqp_error_cnt + 1
all_in_the_csv = "N"

if (rqp_error_cnt = 1)							;002
   rqp_emsg = build("ERROR Inserting request numbers: ",
				mmp_rqp->data[d.seq].request_number)
else
   rqp_emsg = build(rqp_emsg,",",mmp_rqp->data[d.seq].request_number)	
endif									;002


/**		;002
;if the detail section ran, at least one record in the CSV file was not in
;the request_processing table. Set status = fail, send the 5 fields we
;are checking

readme_data->status = "F"
readme_data->message = build("This record is in the CSV file, but is not on",
" the request_processing table.",
" Request #: ",                 mmp_rqp->data[d.seq].request_number,
", Target RQ#: ",               mmp_rqp->data[d.seq].target_request_number,
", Format Script: ",            mmp_rqp->data[d.seq].format_script,
", Service: ",                  mmp_rqp->data[d.seq].service,
", Dest St id: ",               mmp_rqp->data[d.seq].destination_step_id,
", Forward ovr ind: ",          mmp_rqp->data[d.seq].Forward_override_ind,
", Reproc Reply ind: ",         mmp_rqp->data[d.seq].Reprocess_Reply_ind
)
**/		;002

with outerjoin = d, dontexist



if (curqual > 0)
        set readme_data->status = "F"
        set readme_data->message = rqp_emsg
elseif(all_in_the_csv = "Y")
        set readme_data->status = "S"
        set readme_data->message =
           "All records in the CSV file are in the request_processing table"
endif

;call echorecord (mmp_rqp) ;testing only 
;call echorecord (readme_data) ;testing only 

;call echorecord(readme_data)

end
go

;Generated by GNU enscript 1.6.4.
