 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_equation_list/glb_get_equation_list.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_EQUATION_LIST.PRG
        Object name:            GLB_GET_EQUATION_LIST
        Request #:              250065

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieve list of equation(s) associated with
                                the given procedure, test site, or both.

        Tables read:            discrete_task_assay
                                equation
                                assay_processing_r

        Tables updated:         n/a

        Executing from:         General Lab build/maintain equation tool

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 02/28/96 Dennis Boyer         Initial Release                     *
;     001 06/18/98 Chad Moats           Change to read code_value table     *
;                                       instead of discrete_task_assay      *
;     002 12/01/98 Chris Heil           Add support for unknown ages        *
;     003 02/04/05 Andrew Dittrich      Now PLAN on discrete_task_assay     *
;                                       to ensure exact match.              *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_EQUATION_LIST:dba go    
      create program GLB_GET_EQUATION_LIST:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                                       
         1 procedure                 = vc
         1 service_resource_cd       = f8
         1 active_ind                = i2 
         1 calc_type_ind             = i2
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 task_assay_cd             = f8
         1 equations[*] 
           2 equation_id             = f8
           2 service_resource_cd     = f8
           2 service_resource_disp   = vc
           2 unknown_age_ind         = i2        ;002
           2 age_from_units_cd       = f8
           2 age_from_minutes        = i4
           2 age_to_units_cd         = f8
           2 age_to_minutes          = i4
           2 sex_cd                  = f8
           2 sex_disp                = vc
           2 species_cd              = f8
           2 species_disp            = vc
           2 active_dt_tm            = dq8
           2 inactive_dt_tm          = dq8
           2 default_ind             = i2
           2 active_ind              = i2
         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
      )

     #Script
      declare dResult_Type_Calc = f8 with protect, noconstant(0.0)
      declare RESULT_TYPE_CALC_CDF = c1 with protect, constant("8")
      declare RESULT_TYPE_CODE_SET = i4 with protect, constant(289)
      declare sUprProc = vc with protect, noconstant(" ") 
      set sUprProc = cnvtupper(trim(request->procedure))
      set eq_cnt = 0
      set failed = "F"
      set reply->status_data->status = "F"
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

/*******************************************************************/
/* Get code_value for calculation type.                            */
/*******************************************************************/
      if (request->calc_type_ind > 0)
         set dResult_Type_Calc = uar_get_code_by("MEANING", RESULT_TYPE_CODE_SET, nullterm(RESULT_TYPE_CALC_CDF))
         
         if (dResult_Type_Calc <= 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = "UAR Failed.  No calculation result type found."
           set failed = "T"
           go to exit_script
         endif
      endif

/*******************************************************************/
/* Get task_assay_cd for requested procedure.  Validate against    */
/* the assay_processing_r to prove that the requested procedure    */
/* is a calculation type procedure.                                */
/*******************************************************************/
      SELECT 
         if (request->service_resource_cd > 0 and dResult_Type_Calc > 0)
            PLAN d
               where d.mnemonic_key_cap = sUprProc
            JOIN a      
               where d.task_assay_cd = a.task_assay_cd
                  and a.service_resource_cd = request->service_resource_cd
                  and a.default_result_type_cd = dResult_Type_Calc
         elseif (request->service_resource_cd > 0 and dResult_Type_Calc = 0)
            PLAN d
               where d.mnemonic_key_cap = sUprProc
            JOIN a
               where d.task_assay_cd = a.task_assay_cd                     ;001
                  and a.service_resource_cd = request->service_resource_cd
         elseif (request->service_resource_cd = 0 and dResult_Type_Calc = 0)
            PLAN d
               where d.mnemonic_key_cap = sUprProc
            JOIN a
               where d.task_assay_cd = a.task_assay_cd                     ;001
         endif
      into "nl:"
         d.task_assay_cd,
         a.default_result_type_cd
      FROM
         discrete_task_assay d,
         assay_processing_r a
      PLAN d
         where d.mnemonic_key_cap = sUprProc
      JOIN a
         where d.task_assay_cd = a.task_assay_cd
               and a.default_result_type_cd = dResult_Type_Calc
      DETAIL
         reply->task_assay_cd = d.task_assay_cd         
      WITH
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        set failed = "T"
        go to exit_script
      endif

      if (curqual = 0)
         go to no_procedures
      endif

/*******************************************************************/
/* Select equations based on task_assay and, if it is provided,    */
/* service_resource_cd.                                            */
/*******************************************************************/
      
      SELECT
         if (request->service_resource_cd > 0 and request->active_ind = 1)
            WHERE          
               e.task_assay_cd = reply->task_assay_cd and
               e.service_resource_cd = request->service_resource_cd and
               e.active_ind > 0
         elseif (request->service_resource_cd > 0)
            WHERE          
               e.task_assay_cd = reply->task_assay_cd and
               e.service_resource_cd = request->service_resource_cd
         elseif (request->service_resource_cd = 0 and request->active_ind = 1)
            WHERE
               e.task_assay_cd = reply->task_assay_cd and
               e.active_ind = 1
         endif
      into "nl:"
         e.equation_id,
         e.service_resource_cd,
         e.unknown_age_ind,         ;002
         e.age_from_units_cd,
         e.age_from_minutes,
         e.age_to_units_cd,
         e.age_to_minutes,
         e.sex_cd,
         e.species_cd,
         e.equation_description,
         e.active_dt_tm,
         e.inactive_dt_tm,
         e.default_ind

      FROM
         equation e
      WHERE
         e.task_assay_cd = reply->task_assay_cd 
      HEAD e.equation_id
         eq_cnt = eq_cnt + 1
         if (mod(eq_cnt,5) = 1)
            stat =  alterlist(reply->equations,eq_cnt + 5)
         endif
         reply->equations[eq_cnt]->equation_id = 
            e.equation_id
         reply->equations[eq_cnt]->service_resource_cd = 
            e.service_resource_cd
         reply->equations[eq_cnt]->unknown_age_ind =                    ;002
            e.unknown_age_ind                                           ;002
         reply->equations[eq_cnt]->age_from_units_cd = 
            e.age_from_units_cd
         reply->equations[eq_cnt]->age_from_minutes = 
            e.age_from_minutes
         reply->equations[eq_cnt]->age_to_units_cd = 
            e.age_to_units_cd
         reply->equations[eq_cnt]->age_to_minutes = 
            e.age_to_minutes
         reply->equations[eq_cnt]->sex_cd = 
            e.sex_cd
         reply->equations[eq_cnt]->species_cd =
            e.species_cd
         reply->equations[eq_cnt]->active_dt_tm = 
            cnvtdatetime(e.active_dt_tm)
         reply->equations[eq_cnt]->inactive_dt_tm = 
            cnvtdatetime(e.inactive_dt_tm)
         reply->equations[eq_cnt]->default_ind = 
            e.default_ind
         reply->equations[eq_cnt]->active_ind = 
            e.active_ind
      WITH
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        set failed = "T"
        go to exit_script
      endif

      set stat = alterlist(reply->equations, eq_cnt)
      if (eq_cnt = 0)
         go to no_equation
      endif

      go to exit_script

/********************************************************************/ 
/* Executed if requested procedure is not found.                    */
/********************************************************************/
     #no_procedures
      set reply->status_data->subeventstatus[1]->operationname = 
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "Z"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "discrete_task_assay table"
      set failed = "Z"

      go to exit_script

/********************************************************************/ 
/* Executed if no equations were found.                             */
/********************************************************************/
     #no_equation
      set reply->status_data->subeventstatus[1]->operationname = 
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "Z"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "equation table"
      set failed = "Z"
      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
      elseif (failed = "Z")
         set reply->status_data->status = "Z"
      else
         set reply->status_data->status = "F"
      endif
END
GO     

;Generated by GNU enscript 1.6.4.
