 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_monthly_ljc/glb_rpt_monthly_ljc.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_RPT_MONTHLY_LJC.PRG
        Object name:            GLB_RPT_MONTHLY_LJC
        Request #:              257554

        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve QC Results for
                                Monthly Levy_Jennings Report

        Tables read:            qc_result
                                resource_accession_r
                                control_lot
                                accession
                                discrete_task_assay
                                nomenclature
                                prsnl
                                qc_comment

        Tables updated:         n/a

        Executing from:         General Lab QC Inquiry

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 09/02/97 Chad Moats           Initial Release                     *
;    *001 11/18/97 Hal Patchen          Add subsection level data map check *
;    *002 12/12/97 Kevin Brunner        Add auto verify logic               *
;    *003 12/12/97 Chad Moats           Fixed y coordinates(was backwards)  *
;    *004 12/17/97 Chad Moats           Stats were being calculated with    *
;                                       first lots expected mean & sd only  *
;    *005 01/22/98 Chad Moats           Add operaions logic                 *
;    *006 09/22/98 Chad Moats           Add patient data logic              *
;    *007 05/05/99 Chad Moats           Removed multiple joins to code_value*
;    *008 05/07/99 Chad Moats           Use data map for sd values          *
;    *009 06/21/99 Gary Runde           Rewrite summary stats portion       *
;    *010 08/15/99 Gary Runde           Remove exp_ind                      *
;    *011 08/20/99 Gary Runde           Move group stats up into report stats*
;    *012 09/16/99 Gary Runde           Additional report changes           *
;    *013 11/22/99 Gary Runde           Additional report changes           *
;    *014 12/06/99 Gary Runde           Internationalization                *
;    *015 07/05/00 Gary Runde           Show expected row for PDM           *
;    *016 05/08/03 Gary Runde           Fixed assay's that would display    *
;                                       that didn't have performed results  *
;                                       for the selected date range         *
;    *017 03/17/03 Craig Sumrall        Added logic to print various graphs *
;    *018 12/11/08 Deshmukh Rahul        Fixed Monthly LJC print preview issue*
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
      drop program GLB_RPT_MONTHLY_LJC:dba go
      create program GLB_RPT_MONTHLY_LJC:dba

execute cclseclogin

/*014 Start New Code */

; free record structures
free set captions
free set data_map
free set reply
free set coord
free set lot
free set holdstat
free set cumrec
free set cumlot
free set ops_params
free set formatted
; I18N INCLUDE FILE
%i cclsource:i18n_uar.inc

; INITIALIZE VARIABLE THAT KEEPS HANDLE TO I18N DATA
set i18nHandle = 0

; CALL uar_i18nlocalizationinit
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)

/********************************************************************/
/*  Captions Record - Internationalization                          */
/********************************************************************/
record captions
(
1 rpt_no = vc
1 qc_mljc = vc
1 tm = vc
1 as_of = vc
1 prep = vc
1 dt_frm = vc
1 to_ = vc
1 pg_no = vc
1 tst_ste = vc
1 proc = vc
1 ctrl_nm = vc
1 ctrl_rle = vc
1 pat_dta = vc
1 alpha = vc
1 3sd = vc
1 2sd = vc
1 1sd = vc
1 mean = vc
1 sd = vc
1 sd2 = vc
1 sd3 = vc
1 norm = vc
1 abnorm = vc
1 rev = vc
1 summ = vc
1 ctrl_desc = vc
1 lot_no = vc
1 sd_ = vc
1 low = vc
1 high = vc
1 cnt = vc
1 cv = vc
1 f_val = vc
1 z_stat = vc
1 lot_to_dt = vc
1 expect = vc
1 man = vc
1 normal = vc
1 abnormal = vc
1 reviewed = vc
1 total = vc
1 grp = vc
1 species = vc
1 gender = vc
1 age_frm = vc
1 age_to = vc
1 trim_low = vc
1 trim_high = vc
1 all_gend = vc
1 tot_stat = vc
1 verified = vc
1 accepted = vc
1 changed = vc
1 rejected = vc
1 total = vc
1 per_tot = vc
1 na = vc
1 report_statistics = vc
1 group = vc
1 calculated = vc
1 curr_exp = vc
1 rslt = vc
)

Set captions->curr_exp = uar_i18ngetmessage(i18nHandle,"CurrExp","CURRENT EXPECTED:")
Set captions->calculated = uar_i18ngetmessage(i18nHandle,"Calculated","CALCULATED:")
Set captions->rpt_no = uar_i18ngetmessage(i18nHandle,"rpt_no","REPORT NO:  ")
Set captions->qc_mljc = uar_i18ngetmessage(i18nHandle,"qc_mljc","QC-MLJC")
Set captions->tm = uar_i18ngetmessage(i18nHandle,"tm","TIME: ")
Set captions->as_of = uar_i18ngetmessage(i18nHandle,"as_of","AS OF DATE: ")
Set captions->prep = uar_i18ngetmessage(i18nHandle,"prep","PREPARED: ")
Set captions->dt_frm = uar_i18ngetmessage(i18nHandle,"dt_frm","DATE FROM ")
Set captions->to_ = uar_i18ngetmessage(i18nHandle,"to_","TO ")
Set captions->pg_no = uar_i18ngetmessage(i18nHandle,"pg_no","PAGE NO:  ")
Set captions->tst_ste = uar_i18ngetmessage(i18nHandle,"tst_ste","TEST SITE:     ")
Set captions->proc = uar_i18ngetmessage(i18nHandle,"proc","PROCEDURE:     ")
Set captions->ctrl_nm = uar_i18ngetmessage(i18nHandle,"ctrl_nm","CONTROL NAME:  ")
Set captions->pat_dta = uar_i18ngetmessage(i18nHandle,"pat_dta","Patient Data")
Set captions->ctrl_rle = uar_i18ngetmessage(i18nHandle,"ctrl_rle","CONTROL RULE:  ")
Set captions->alpha = uar_i18ngetmessage(i18nHandle,"alpha","ALPHA")
Set captions->3sd = uar_i18ngetmessage(i18nHandle,"3sd","+ 3SD")
Set captions->2sd = uar_i18ngetmessage(i18nHandle,"2sd","+ 2SD")
Set captions->1sd = uar_i18ngetmessage(i18nHandle,"1sd","+ 1SD")
Set captions->mean = uar_i18ngetmessage(i18nHandle,"mean","MEAN")
set captions->REPORT_STATISTICS = uar_i18ngetmessage(i18nHandle,"rptstat","REPORT STATISTICS")
set captions->GROUP = uar_i18ngetmessage(i18nHandle,"group","GROUP")
Set captions->sd = uar_i18ngetmessage(i18nHandle,"sd","- 1SD")
Set captions->sd2 = uar_i18ngetmessage(i18nHandle,"sd2","- 2SD")
Set captions->sd3 = uar_i18ngetmessage(i18nHandle,"sd3","- 3SD")
Set captions->norm = uar_i18ngetmessage(i18nHandle,"norm","NORMAL:  ")
Set captions->abnorm = uar_i18ngetmessage(i18nHandle,"abnorm","ABNORMAL:")
Set captions->rev = uar_i18ngetmessage(i18nHandle,"rev","REVIEW:  ")
Set captions->summ = uar_i18ngetmessage(i18nHandle,"summ","SUMMARY STATISTICS: ")
Set captions->ctrl_desc = uar_i18ngetmessage(i18nHandle,"ctrl_desc","CONTROL DESCRIPTION ")
Set captions->lot_no = uar_i18ngetmessage(i18nHandle,"lot_no","LOT NUMBER")
Set captions->sd_ = uar_i18ngetmessage(i18nHandle,"sd_","SD")
Set captions->low = uar_i18ngetmessage(i18nHandle,"low","LOW")
Set captions->high = uar_i18ngetmessage(i18nHandle,"high","HIGH")
Set captions->cnt = uar_i18ngetmessage(i18nHandle,"cnt","COUNT")
Set captions->cv = uar_i18ngetmessage(i18nHandle,"cv","CV")
Set captions->f_val = uar_i18ngetmessage(i18nHandle,"f-val","F-VAL")
Set captions->z_stat = uar_i18ngetmessage(i18nHandle,"z-stat","Z-STAT")
Set captions->lot_to_dt = uar_i18ngetmessage(i18nHandle,"lot_to_dt","LOT TO REPORT END:")
Set captions->expect = uar_i18ngetmessage(i18nHandle,"expect","EXPECTED:")
Set captions->man = uar_i18ngetmessage(i18nHandle,"man","MANF STATISTICS:")
Set captions->normal = uar_i18ngetmessage(i18nHandle,"normal","NORMAL")
Set captions->abnormal = uar_i18ngetmessage(i18nHandle,"abnormal","ABNORMAL")
Set captions->reviewed = uar_i18ngetmessage(i18nHandle,"reviewed","REVIEWED")
Set captions->total = uar_i18ngetmessage(i18nHandle,"total","TOTAL")
Set captions->grp = uar_i18ngetmessage(i18nHandle,"grp","GRP")
Set captions->species = uar_i18ngetmessage(i18nHandle,"species","SPECIES")
Set captions->gender = uar_i18ngetmessage(i18nHandle,"gender","GENDER")
Set captions->age_frm = uar_i18ngetmessage(i18nHandle,"age_frm","AGE FROM")
Set captions->age_to = uar_i18ngetmessage(i18nHandle,"age_to","AGE TO")
Set captions->trim_low = uar_i18ngetmessage(i18nHandle,"trim_low","TRIM LOW")
Set captions->trim_high = uar_i18ngetmessage(i18nHandle,"trim_high","TRIM HIGH")
Set captions->all_gend = uar_i18ngetmessage(i18nHandle,"all_gend","All")
Set captions->tot_stat = uar_i18ngetmessage(i18nHandle,"tot_stat","TOTAL OF ACTIONS FOUND WITHIN THE DATE RANGE:")
Set captions->verified = uar_i18ngetmessage(i18nHandle,"verified","VERIFIED")
Set captions->accepted = uar_i18ngetmessage(i18nHandle,"accepted","ACCEPTED")
Set captions->changed = uar_i18ngetmessage(i18nHandle,"changed","CHANGED")
Set captions->rejected = uar_i18ngetmessage(i18nHandle,"rejected","REJECTED")
Set captions->total = uar_i18ngetmessage(i18nHandle,"total","TOTAL")
Set captions->per_tot = uar_i18ngetmessage(i18nHandle,"%tot","% OF TOTAL")
Set captions->na = uar_i18ngetmessage(i18nHandle,"n/a","N/A")

/*014 End New Code */

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 task_assay_cd                = f8
         1 control_id                   = f8
         1 control_short_desc           = c20
         1 manf_ind                     = i2
         1 service_resource_cd          = f8
         1 begin_date                   = dq8
         1 end_date                     = dq8
         1 qc_result_type_flage         = i2
         1 printer_name                 = vc
         1 batch_selection              = vc 
         1 output_dist                  = vc 
         1 ops_date                     = dq8
         1 controls[*]
           2 control_id                 = f8
         1 test_sites[*]
           2 service_resource_cd        = f8
         1 assays[*]
           2 task_assay_cd              = f8
         1 lot_type_flag                = i2
         1 lot_per_graph_ind            = i2
         1 control_per_graph_ind        = i2
         1 use_actual_exp_val_ind       = i2
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
         1 file_name                 = vc             
      )

/***********************************************************************
* Internal Records                                                     *
***********************************************************************/

     record data_map
      (
         1  dms[*]
            2  task_assay_cd                = f8
            2  max_digits                   = i2
            2  min_digits                   = i2
            2  min_decimal_places           = i2
       )

      record coord
      (
         1 coords[*]
           2 x                            = i2
           2 y                            = i2
           2 result_value_alpha           = vc
           2 result_cnt                   = i4
           2 graphed                      = i2
           2 hold_lot_seq                 = i4                          ;009
       )

      record lot
      (
         1 lots[*]
           2 lot_sequence                 = i4
           2 lot_id                       = f8
           2 lot_number                   = c30
           2 task_assay_cd                = f8
           2 lot_expiration               = dq8
           2 control_id                   = f8
           2 control_name                 = c20
           2 expected_group_row           = i4                                  ;011
           2 lot_used_ind                 = i2
           2 pdm_range_id                 = f8                                  ;006
           2 sex_cd                       = f8                                  ;006
           2 sex_disp                     = vc                                  ;006
           2 species_cd                   = f8                                  ;006
           2 species_disp                 = vc                                  ;006
           2 age_from_display             = vc                                  ;006
           2 age_to_display               = vc                                  ;006
       )

      record holdstat
      (
         1 stats[*]
           2 stat_cnt                     = i4  ;009
           2 mean                         = f8
           2 sd                           = f8
           2 lot_id                       = f8
           2 pdm_range_id                 = f8                                                  ;006
           2 control_id                   = f8
           2 end_effective_dt_tm          = f8
           2 beg_effective_dt_tm          = f8
           2 service_resource_cd          = f8
           2 arl_id                       = f8
           2 active_ind                   = i2
           2 task_assay_cd                = f8
           2 manf_mean                    = f8                                                  ;004
           2 manf_std_dev                 = f8                                                  ;004
           2 manf_low                     = f8                                                  ;004
           2 manf_high                    = f8                                                  ;004
           2 abs_low                      = f8                                                  ;004
           2 abs_high                     = f8                                                  ;004
       )

      record cumrec
      (
         1 cums[*]
           2 stat_cnt                     = i4   ;011
           2 task_assay_cd                = f8
           2 lot_sequence                 = i4
           2 lot_id                       = f8
           2 lot_number                   = c30
           2 cum_mean                     = f8
           2 cum_sum_sqr                  = f8
           2 cum_count                    = f8
           2 normal_cnt                   = i4
           2 abnormal_cnt                 = i4
           2 review_cnt                   = i4
           2 pdm_range_id                 = f8                                                  ;007
           2 sex_cd                       = f8                                                  ;007
           2 sex_disp                     = vc                                                  ;007
           2 species_cd                   = f8                                                  ;007
           2 species_disp                 = vc                                                  ;007
           2 age_from_display             = vc                                                  ;007
           2 age_to_display               = vc                                                  ;007
           2 service_resource_cd          = f8
       )

      record cumlot
      (
         1 cumlots[*]
           2 lot_id                       = f8
           2 task_assay_cd                = f8
           2 service_resource_cd          = f8
           2 ltd_cum_mean                 = f8
           2 ltd_cum_sum_sqr              = f8
           2 ltd_cum_count                = f8
           2 ltd_normal_cnt               = i4
           2 ltd_abnormal_cnt             = i4
           2 ltd_review_cnt               = i4
           2 pdm_range_id                 = f8                                          ;007
           2 lot_number                   = c30
           2 verify_cnt                   = f8                                                  ;012
           2 accept_cnt                   = f8                                                  ;012
           2 change_cnt                   = f8                                                  ;012
           2 discard_cnt                  = f8                                                  ;012
           2 reject_cnt                   = f8                                                  ;012
           2 total_cnt                    = f8                                                  ;012
;012           2 manf_mean                    = f8
;012           2 manf_std_dev                 = f8
;012           2 manf_low                     = f8
;012           2 manf_high                    = f8
;012           2 cum_mean                     = f8
;012           2 cum_sum_sqr                  = f8
;012           2 cum_count                    = f8
;012           2 normal_cnt                   = i4
;012           2 abnormal_cnt                 = i4
;012           2 review_cnt                   = i4
       )

      record ops_params                                                                         ;005
      (                                                                                         ;005
         1  qual[4]                                                                             ;006;005
            2  param                     = c100                                                 ;005
      )                                                                                         ;005

         ;* Data used to format a numeric result
         record formatted
         (
            01  template     = c33
            01  negative_ind = i2
            01  result_value = c36
         )


     #Script
      set arg_min_digits = 0
      set arg_max_digits = 0
      set arg_min_dec_places = 0
      set arg_less_great_flag = 0
      set arg_raw_value = 0.0
      set arg_hold_dec_places = 0

      set RESULT_STATUS_CODESET       = 1901
      set RESULT_STATUS_ACCEPT_CDF    = "ACCEPT"
      set RESULT_STATUS_VERIFIED_CDF  = "VERIFIED"
      set RESULT_STATUS_AUTO_VERF_CDF = "AUTOVERIFIED"                                          ;002
      set RESULT_STATUS_REVIEWED_CDF = "REVIEWED"
      set RESULT_STATUS_CORRECTED_CDF = "CORRECTED"
      set RESULT_STATUS_CHANGED_CDF = "CHANGE"
      set RESULT_STATUS_REJECTED_CDF = "REJECT"
      set RESULT_STATUS_DISCARDED_CDF = "DISCARD"
      set SERVICE_RESOURCE_TYPE_CODESET = 223                                                   ;001
      set SERV_RES_SUBSECTION_CDF = "SUBSECTION"                                                ;001
      declare serv_res_subsection_cd = f8                                                       ;001
      declare ALPHA_CD = f8
      declare NUMERIC_CD = f8
      declare WITHIN_RANGE_CD = f8
      declare ALP_NORMAL_CD = f8
      declare ALP_ABNORMAL_CD = f8
      declare ALP_REVIEW_CD = f8
      declare result_status_accept_cd = f8
      declare result_status_reviewed_cd  = f8
      declare result_status_verified_cd  = f8
      declare result_status_auto_verf_cd = f8                                                   ;002
      declare result_status_corrected_cd = f8
      declare result_status_changed_cd = f8
      declare result_status_rejected_cd = f8
      declare result_status_discarded_cd = f8
      declare value = f8
      declare lotnumber = c15
      declare mean = f8
      declare std_dev = f8
      declare variance1 = f8
      declare variance2 = f8
      declare cum_mean = f8
      declare cum_std_dev = f8
      declare uar_fmt_result (min, max, dec, flag, result) = c50 with protect, noconstant("")
      set cum_mean = 0.0
      set cum_std_dev = 0.0
      set hold_lot_seq = 0
      set x = 0
      set x2 = 0
      set failed = "F"
      set reply->status_data->status = "F"
      set chartline  = "|-----------------------------------------------------------------------------------------------|"
      set minorline  = "+  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  |"
      set cum_cnt = 0
      set lot_cnt = 0
      set xy_cnt = 0
      set l_cnt = 0
      set s_cnt = 0
      set range_cnt = 0                                                                         ;006
      set cumlot_cnt = 0
      set holdrow = 0
      set result = 0.00
      set mean = 0.00
      set count = 0
      set std_dev = 0.00
      set variance1 = 0.00
      set variance2 = 0.00
      set value = 0.00
;      set rslt = fillstring(50, " ")
      set rsltcntstr = "  "
      set startdt = CNVTDATE2(FORMAT(request->begin_date, "YYYYMMDD;;D"),"YYYYMMDD")
      set starttm= CNVTREAL(CNVTMIN(CNVTINT(FORMAT(request->begin_date, "HHMMSS;;M")),2)*100*60)
      set hold_lot_dt_tm = request->begin_date
;012      declare accept_cnt = f8
;012      declare verify_cnt = f8
;012      declare change_cnt = f8
;012      declare discard_cnt = f8
;012      declare reject_cnt = f8
;012      declare total_cnt = f8
      declare percent = f8
      set ColExp = 0
;012      set accept_cnt = 0
;012      set verify_cnt = 0
;012      set change_cnt = 0
;012      set discard_cnt = 0
;012      set reject_cnt = 0
;012      set total_cnt = 0
      set percent = 00.00
      set percentstr = "    "
      declare tempdaystr = c2
      declare tempExpectedGroupStr = vc               ;011
      declare tempStatDtTm = vc                       ;011
      declare FOOTNOTE_CD = f8
      declare REVIEW_NOTE_CD = f8
      declare TSTEP_CD = f8
      declare temptaskassay = f8
      declare WAY = c1
      set WAY = "F"
      declare NBRDAYS = i2
      set NBRDAYS = 2
      set DAYSTRING = "DAYS"
      declare units_cd = f8                                                                     ;006
      set units_cd = 0.0                                                                        ;006
      declare units_disp = c20                                                                  ;006
      set units_disp = "                   "                                                    ;006
      declare units_cdf = c12                                                                   ;006
      set units_cdf = "            "                                                            ;006
      set age_from = 0                                                                          ;006
      set age_to = 0                                                                            ;006
      set dm_cnt = 0
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

declare prev_task_assay_cd                   = f8 with protect, noconstant(0.0)
declare prev_control_id                      = f8 with protect, noconstant(0.0)
declare prev_foot_task_assay_cd              = f8 with protect, noconstant(0.0)
declare dStatMean                            = f8 with protect, noconstant(0.0)
declare dStatStdDev                          = f8 with protect, noconstant(0.0)
declare nStatCnt                             = i2 with protect, noconstant(0)
declare lControlslist                        = i4 with protect, constant(size(request->controls,5))
declare lTestSiteslist                       = i4 with protect, constant(size(request->test_sites,5))
declare lProcedureslist                      = i4 with protect, constant(size(request->assays,5))
declare sControl_Parser                      = vc with protect, noconstant("")
declare sTestsite_Parser                     = vc with protect, noconstant("")
declare sProcedure_Parser                    = vc with protect, noconstant("")
declare nControlCnt                          = i2 with protect, noconstant(0)
declare nTestsiteCnt                         = i4 with protect, noconstant(0)
declare nProcedureCnt                        = i4 with protect, noconstant(0)
declare sProcedures                          = vc with protect, noconstant("")
declare sTestsites                           = vc with protect, noconstant("")
declare sControls                            = vc with protect, noconstant("")
declare GetTestsiteParser(sTable)            = vc
declare GetProcedureParser(sTable)           = vc
declare GetControlParser(sTable)             = vc
declare nFound                               = i2 with protect, noconstant(0)
declare rslt                                 = vc with protect, noconstant("")
declare y                                    = i2 with protect, noconstant(0)
/************************************************************************
*build parsers (2)                                                      *
************************************************************************/

subroutine GetTestsiteParser(sTable)
  if( validate(mljc_req->begin_date) = 0)/*determine if mljc_req exists to build parser*/
    if (lTestSiteslist > 0)
      if (sTable =  "rlr")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,rlr.service_resource_cd,",
            "request->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "p")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "p.service_resource_cd,request->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "q")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "q.service_resource_cd,request->test_sites[nTestsiteCnt].service_resource_cd)")
      endif
    elseif (request->service_resource_cd > 0)
      if (sTable =  "rlr") 	
    	  set sTestsite_Parser = "rlr.service_resource_cd = request->service_resource_cd"
  	  elseif(sTable = "p")
  	    set sTestsite_Parser = "p.service_resource_cd = request->service_resource_cd"
      elseif(sTable = "q")
        set sTestsite_Parser = "q.service_resource_cd = request->service_resource_cd"  
      endif
    else
  	 	set sTestsite_Parser = "1 = 1"
  	endif
    return(sTestsite_Parser) 
  else /* else for use of mljc_req if its available to build parser*/
    if (lTestSiteslist > 0)
      if (sTable =  "rlr")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,rlr.service_resource_cd,",
            "mljc_req->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "p")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "p.service_resource_cd,mljc_req->test_sites[nTestsiteCnt].service_resource_cd)")
      elseif (sTable = "q")
        set sTestsite_Parser = build("expand(nTestsiteCnt,1,lTestSiteslist,",
            "q.service_resource_cd,mljc_req->test_sites[nTestsiteCnt].service_resource_cd)")
      endif
    else
  	 	set sTestsite_Parser = "1 = 1"
  	endif
    return(sTestsite_Parser) 
  endif
end

subroutine GetProcedureParser(sTable)
  if( validate(mljc_req->begin_date) = 0)/*determine if mljc_req exists to build parser*/
    if (lProcedureslist > 0)
  	  if (sTable = "p")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "p.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "q")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "q.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "arl")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "arl.task_assay_cd, request->assays[nProcedureCnt].task_assay_cd)")
  		endif
  	elseif (request->task_assay_cd > 0)
   		if (sTable = "p")
   		 	set sProcedure_Parser = "p.task_assay_cd = request->task_assay_cd"
  	  elseif(sTable = "q")
  	    set sProcedure_Parser = "q.task_assay_cd = request->task_assay_cd"
  	  elseif(sTable = "arl")
  	    set sProcedure_Parser = "arl.task_assay_cd = request->task_assay_cd"
      endif
  	else
  		set sProcedure_Parser = "1 = 1"
  	endif  
    return(sProcedure_Parser)
  else /* else for use of mljc_req if its available to build parser*/
    if (lProcedureslist > 0)
  	  if (sTable = "p")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "p.task_assay_cd, mljc_req->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "q")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "q.task_assay_cd, mljc_req->assays[nProcedureCnt].task_assay_cd)")
  		elseif (sTable = "arl")
  		  set sProcedure_Parser = build("expand(nProcedureCnt, 1, lProcedureslist,",
  		      "arl.task_assay_cd, mljc_req->assays[nProcedureCnt].task_assay_cd)")
  		endif
  	else
  		set sProcedure_Parser = "1 = 1"
  	endif  
    return(sProcedure_Parser)
  endif
end

subroutine GetControlParser(sTable)
  if( validate(mljc_req->begin_date) = 0)/*determine if mljc_req exists to build parser*/
    if (lControlslist > 0)
      if (sTable =  "c")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,c.control_id,",
            "request->controls[nControlCnt].control_id)")
      elseif (sTable = "q")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "q.control_id,request->controls[nControlCnt].control_id)")
      endif
    elseif (request->control_id > 0)
      if (sTable =  "c") 	
   	    set sControl_Parser = "c.control_id = request->control_id"
   	  elseif(sTable = "q")
        set sControl_Parser = "q.control_id = request->control_id"  
      endif
    else
   	 	set sControl_Parser = "1 = 1"
   	endif
    return(sControl_Parser)
  else /* else for use of mljc_req if its available to build parser*/
    if (lControlslist > 0)
      if (sTable =  "c")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,c.control_id,",
            "mljc_req->controls[nControlCnt].control_id)")
      elseif (sTable = "q")
        set sControl_Parser = build("expand(nControlCnt,1,lControlslist,",
            "q.control_id,mljc_req->controls[nControlCnt].control_id)")
      endif
    else
   	 	set sControl_Parser = "1 = 1"
   	endif
    return(sControl_Parser)
  endif
end

 /***********************************************************************
 * Load code values                                                     *
 ***********************************************************************/

      SELECT
       into "nl:"
         c.code_value
      FROM
         code_value c
      WHERE
         (c.code_set = 289) or (c.code_set = 1902) and
         c.cdf_meaning in ("2",
                           "3",
                           "WITHIN_RANGE",
                           "ALP_NORMAL",
                           "ALP_ABNORMAL",
                           "ALP_REVIEW")
         detail
            case ( c.cdf_meaning )
              of "2":
                 ALPHA_CD = c.code_value
              of "3":
                 NUMERIC_CD = c.code_value
              of "WITHIN_RANGE":
                 WITHIN_RANGE_CD = c.code_value
              of "ALP_NORMAL":
                 ALP_NORMAL_CD = c.code_value
              of "ALP_ABNORMAL":
                 ALP_ABNORMAL_CD = c.code_value
              of "ALP_REVIEW":
                 ALP_REVIEW_CD = c.code_value
            endcase
      WITH
         format,
         nocounter

         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif

 /***********************************************************************
 * Load result status code set                                          *
 ***********************************************************************/
      select into "nl:"
        cv.code_set,
        cv.code_value

      from code_value cv

      where cv.code_set = RESULT_STATUS_CODESET
      and cv.cdf_meaning in ( RESULT_STATUS_ACCEPT_CDF,
                              RESULT_STATUS_REVIEWED_CDF,
                              RESULT_STATUS_VERIFIED_CDF,
                              RESULT_STATUS_AUTO_VERF_CDF,                                      ;002
                              RESULT_STATUS_CHANGED_CDF,
                              RESULT_STATUS_DISCARDED_CDF,
                              RESULT_STATUS_CORRECTED_CDF,
                              RESULT_STATUS_REJECTED_CDF )

         detail
            case ( cv.cdf_meaning )
              of RESULT_STATUS_ACCEPT_CDF:
                 result_status_accept_cd = cv.code_value
              of RESULT_STATUS_REVIEWED_CDF:
                 result_status_reviewed_cd = cv.code_value
              of RESULT_STATUS_VERIFIED_CDF:
                 result_status_verified_cd = cv.code_value
              of RESULT_STATUS_AUTO_VERF_CDF:  ;002
                 result_status_auto_verf_cd = cv.code_value  ;002
              of RESULT_STATUS_CORRECTED_CDF:
                 result_status_corrected_cd = cv.code_value
              of RESULT_STATUS_CHANGED_CDF:
                 result_status_changed_cd = cv.code_value
              of RESULT_STATUS_REJECTED_CDF:
                 result_status_rejected_cd = cv.code_value
              of RESULT_STATUS_DISCARDED_CDF:
                 result_status_discarded_cd = cv.code_value
            endcase

         with nocounter

         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif

/***********************************************************************
 * Load operations parameter list                                       *
 ***********************************************************************/
         if (trim(request->batch_selection) > " ")                                              ;005
            set batch_selection_cd = cnvtreal(trim(request->batch_selection))                   ;005
            set parm_string = fillstring(100, " ")                                              ;005

            select into "nl:"                                                                   ;005
              cv.code_value                                                                     ;005
            from                                                                                ;005
              code_value cv                                                                     ;005
                where cv.code_set = 1950 and cv.active_ind = 1
                and cv.cdf_meaning in ("MLJC", "PMLJC") and  ;005
                trim(cv.display_key) = trim(cnvtupper(cnvtalphanum(request->batch_selection)))  ;005
            detail                                                                              ;005
               cdf_string = trim(cv.cdf_meaning)                                                ;005
               parm_string = trim(cv.definition)                                                ;005
            with                                                                                ;005
               nocounter                                                                        ;005

            if (curqual = 0)                                                                    ;005
                select into "nl:"                                                               ;005
                        cv.code_value                                                           ;005
                from                                                                            ;005
                        code_value cv                                                           ;005
                where cv.code_set = 1950 and
                cv.active_ind = 1 and cv.cdf_meaning in ("MLJC", "PMLJC")      ;005
                and cv.code_value = batch_selection_cd                                          ;005
                detail                                                                          ;005
                        cdf_string = trim(cv.cdf_meaning)                                       ;005
                        parm_string = trim(cv.definition)                                       ;005
                with                                                                            ;005
                nocounter                                                                       ;005
                if (curqual = 0)                                                                ;005
                        set reply->status_data->status = "Z"                                    ;005
                        go to exit_script                                                       ;005
                endif                                                                           ;005
            endif                                                                               ;005

            ;* Locate the individual parameters in parm_string                                  ;005
            ;* and put them in the ops_params array.                                            ;005
            set ptr = 1                                                                         ;005
            set start_ptr = 1                                                                   ;005
            set param_idx = 1                                                                   ;005
            for (param_idx = 1 TO 4)                                                            ;005
               set ptr = findstring(",", parm_string, start_ptr)                                ;005
               if (ptr < 1)                                                                     ;005
                  set ptr = 100                                                                 ;005
               endif                                                                            ;005
               set parm_len = ptr - start_ptr                                                   ;005
               set ops_params->qual[param_idx].param =                                          ;005
                 trim(substring(start_ptr, value(parm_len), parm_string), 3)                    ;005
               set start_ptr = ptr + 1                                                          ;005
            endfor                                                                              ;005

            ;* Use array of ops parameters to set request fields.                               ;005
            set request->control_id = cnvtreal(ops_params->qual[1].param)                       ;005
            set request->service_resource_cd = cnvtreal(ops_params->qual[2].param)              ;005
            set request->task_assay_cd = cnvtreal(ops_params->qual[3].param)                    ;005
            set request->qc_result_type_flag = cnvtreal(ops_params->qual[4].param)              ;006
            set request->end_date = cnvtdatetime(request->ops_date)                             ;005
            set request->begin_date = cnvtdatetime(request->ops_date)                           ;005
            set request->begin_date = datetimeadd(request->begin_date, -31)                     ;005
            set request->printer_name = request->output_dist                                    ;005
            set hold_lot_dt_tm = request->begin_date                                            ;005
         endif                                                                                  ;005
         if (request->qc_result_type_flag = NULL)                                               ;006
           set request->qc_result_type_flag = 0                                                 ;006
         endif                                                                                  ;006
 /***********************************************************************
 * Load service resource type code values                               *
 ***********************************************************************/
      select into "nl:"                                                ;001
        cv.code_set,                                                   ;001
        cv.code_value                                                  ;001
                                                                       ;001
      from code_value cv                                               ;001
                                                                       ;001
      where cv.code_set = SERVICE_RESOURCE_TYPE_CODESET                ;001
      and cv.cdf_meaning = SERV_RES_SUBSECTION_CDF                     ;001
                                                                       ;001
         detail                                                        ;001
            case ( cv.cdf_meaning )                                    ;001
              of SERV_RES_SUBSECTION_CDF:                              ;001
                 serv_res_subsection_cd = cv.code_value                ;001
            endcase                                                    ;001
                                                                       ;001
         with nocounter                                                ;001
                                                                       ;001
         set error_check = ERROR(sErrorMsg,0)   ;get error message     ;001
         if (error_check != 0)                                         ;001
           set reply->status_data->status = "F"                        ;001
           set reply->status_data->subeventstatus[1]                   ;001
             ->TargetObjectValue = sErrorMsg                           ;001
           go to exit_script                                           ;001
         endif                                                         ;001

/********************************************************************/
/* SELECT LOT NUMBERS                                               */
/********************************************************************/
   if (request->qc_result_type_flag = 0)                                                        ;006
     SELECT
       into "nl:"
         c.lot_id,
         c.lot_number,
         cm.control_id,
         rlr.lot_id,
         assay_arl = concat(trim(cnvtstring(arl.task_assay_cd,32,0)), trim(cnvtstring(arl.arl_id,32,0))),
         lot_assay = concat(trim(cnvtstring(arl.task_assay_cd,32,0)), trim(cnvtstring(c.lot_id,32,0))),
         arl.lot_id
     FROM
         control_lot c,
         control_material cm,
         resource_lot_r rlr,
         assay_resource_lot arl
     PLAN c
        where parser(GetControlParser("c")) and
        ((c.receive_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) or
        (c.expiration_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) or
        (c.receive_dt_tm < cnvtdatetime(request->begin_date) and c.expiration_dt_tm > cnvtdatetime(request->end_date)))
     JOIN cm
        where cm.control_id = c.control_id 
     JOIN rlr
        where rlr.lot_id = c.lot_id and
        parser(GetTestsiteParser("rlr"))
     JOIN arl
        where arl.lot_id = rlr.lot_id and
        arl.service_resource_cd = rlr.service_resource_cd
        and parser(GetProcedureParser("arl"))
        and ((arl.beg_effective_dt_tm between cnvtdatetime(request->begin_date)
                                and cnvtdatetime(request->end_date)) or
        (arl.end_effective_dt_tm between cnvtdatetime(request->begin_date)
                                and cnvtdatetime(request->end_date)) or
        (arl.beg_effective_dt_tm < cnvtdatetime(request->begin_date)
                and arl.end_effective_dt_tm > cnvtdatetime(request->end_date))) 

     ORDER BY  lot_assay, 
               cnvtdatetime(arl.end_effective_dt_tm) ;desc
               
     HEAD lot_assay
        lot_cnt = lot_cnt + 1
        if (mod(lot_cnt,5) = 1)
            stat = alterlist(lot->lots,lot_cnt + 5)
        endif
        lot->lots[lot_cnt].lot_sequence = lot_cnt,
        lot->lots[lot_cnt].lot_id = c.lot_id,
        lot->lots[lot_cnt].pdm_range_id = 0,                                                    ;006
        lot->lots[lot_cnt].task_assay_cd = arl.task_assay_cd,
        lot->lots[lot_cnt].lot_number = c.lot_number,
        lot->lots[lot_cnt].lot_expiration = c.expiration_dt_tm,
        lot->lots[lot_cnt].control_name = cm.short_description,
        lot->lots[lot_cnt].control_id = cm.control_id
         if (c.receive_dt_tm < hold_lot_dt_tm)
           hold_lot_dt_tm = c.receive_dt_tm
         endif
     HEAD assay_arl
        s_cnt = s_cnt + 1
        if (mod(s_cnt,5) = 1)
            stat = alterlist(holdstat->stats,s_cnt + 5)
        endif
        holdstat->stats[s_cnt].control_id = c.control_id,
        holdstat->stats[s_cnt].stat_cnt = s_cnt,                           ;009
        holdstat->stats[s_cnt].active_ind = arl.active_ind,                ;009
        holdstat->stats[s_cnt].arl_id = arl.arl_id,                        ;009
        holdstat->stats[s_cnt].end_effective_dt_tm = arl.end_effective_dt_tm, ;009
        holdstat->stats[s_cnt].beg_effective_dt_tm = arl.beg_effective_dt_tm, ;009
        holdstat->stats[s_cnt].mean = arl.mean,
        holdstat->stats[s_cnt].sd = arl.statistical_std_dev,
        holdstat->stats[s_cnt].lot_id = arl.lot_id,
        holdstat->stats[s_cnt].service_resource_cd = arl.service_resource_cd,
        holdstat->stats[s_cnt].task_assay_cd = arl.task_assay_cd,
        holdstat->stats[s_cnt].manf_mean = arl.manf_mean,                                                       ;004
        holdstat->stats[s_cnt].manf_std_dev = arl.manf_std_dev,                                                 ;004
        holdstat->stats[s_cnt].manf_low = arl.manf_low,                                                         ;004
        holdstat->stats[s_cnt].manf_high = arl.manf_high,                                                       ;004
        holdstat->stats[s_cnt].abs_low = arl.abs_low,                                                           ;004
        holdstat->stats[s_cnt].abs_high = arl.abs_high                                                          ;004
     WITH
        nocounter
        set stat = alterlist(lot->lots,lot_cnt)
        set stat = alterlist(holdstat->stats, s_cnt)
    else                                                                                        ;006
     SELECT                                                                                     ;006
       into "nl:"                                                                               ;006
         p.pdm_param_id,                                                                        ;006
         p.task_assay_cd,                                                                       ;006
         r.pdm_range_id,                                                                        ;006
         q.qc_result_id                                                                         ;006
     FROM                                                                                       ;006
         pdm_params p,                                                                          ;006
         pdm_ranges r                                                                           ;006
;009         qc_result q                                                                            ;006
     PLAN p                                                                                     ;006
        where parser(GetTestsiteParser("p")) and
          parser(GetProcedureParser("p"))
     JOIN r                                                                                     ;006
        where p.pdm_param_id = r.pdm_param_id and                                               ;006
        ((r.beg_effective_dt_tm between                                                         ;006
                cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) or       ;006
        (r.end_effective_dt_tm between                                                          ;006
                cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)) or       ;006
        (r.beg_effective_dt_tm < cnvtdatetime(request->begin_date)                              ;006
                and r.end_effective_dt_tm > cnvtdatetime(request->end_date)))                   ;006

     ORDER BY p.task_assay_cd, r.end_effective_dt_tm ;desc 
     
     HEAD p.task_assay_cd                                                                       ;006
        range_cnt = 0                                                                           ;006
     HEAD r.pdm_range_id                                                                        ;006
        range_cnt = range_cnt + 1                                                               ;006
        lot_cnt = lot_cnt + 1                                                                   ;006
        if (mod(lot_cnt,5) = 1)                                                                 ;006
            stat = alterlist(lot->lots,lot_cnt + 5)                                             ;006
        endif                                                                                   ;006
        lot->lots[lot_cnt].lot_sequence = range_cnt,                                            ;006
        lot->lots[lot_cnt].lot_id = 0,                                                          ;006
        lot->lots[lot_cnt].task_assay_cd = p.task_assay_cd,                                     ;006
        lot->lots[lot_cnt].lot_number = cnvtstring(r.pdm_range_id,19,0),                             ;006
        lot->lots[lot_cnt].lot_expiration = r.end_effective_dt_tm,                              ;006
        lot->lots[lot_cnt].control_name = "Patient Data",                                       ;006
        lot->lots[lot_cnt].control_id = 0                                                       ;006
        lot->lots[lot_cnt].pdm_range_id = r.pdm_range_id,                                       ;006
        lot->lots[lot_cnt].sex_cd = r.sex_cd,                                                   ;006
        lot->lots[lot_cnt].sex_disp = substring(1,15,UAR_GET_CODE_DISPLAY(r.sex_cd)),           ;006
        lot->lots[lot_cnt].species_cd = r.species_cd,                                           ;006
        lot->lots[lot_cnt].species_disp = substring(1,15,UAR_GET_CODE_DISPLAY(r.species_cd)),   ;006
        units_cd = r.age_from_units_cd,                                                         ;006
        units_cdf = UAR_GET_CODE_MEANING(r.age_from_units_cd),                                  ;006
        units_disp = UAR_GET_CODE_DISPLAY(r.age_from_units_cd),                                 ;006
        CASE (trim(units_cdf))                                                                  ;006
          OF "DAYS":                                                                            ;006
            age_from = r.age_from_minutes / 1440                                                ;006
          OF "WEEKS":                                                                           ;006
            age_from = r.age_from_minutes / (1440 * 7)                                          ;006
          OF "MONTHS":                                                                          ;006
            age_from = r.age_from_minutes / (1440 * 30)                                         ;006
          OF "YEARS":                                                                           ;006
            age_from = r.age_from_minutes / (1440 * 365)                                        ;006
          OF "MINUTES":                                                                         ;006
            age_from = r.age_from_minutes                                                       ;006
          OF "HOURS":                                                                           ;006
            age_from = r.age_from_minutes / 60                                                  ;006
        ENDCASE                                                                                 ;006
        lot->lots[lot_cnt].age_from_display = concat(trim(cnvtstring(age_from)), " ", units_disp)       ;006
        units_cd = r.age_to_units_cd,                                                           ;006
        units_cdf = UAR_GET_CODE_MEANING(r.age_to_units_cd),                                    ;006
        units_disp = UAR_GET_CODE_DISPLAY(r.age_to_units_cd),                                   ;006
        CASE (trim(units_cdf))                                                                  ;006
          OF "DAYS":                                                                            ;006
            age_to = r.age_to_minutes / 1440                                                    ;006
          OF "WEEKS":                                                                           ;006
            age_to = r.age_to_minutes / (1440 * 7)                                              ;006
          OF "MONTHS":                                                                          ;006
            age_to = r.age_to_minutes / (1440 * 30)                                             ;006
          OF "YEARS":                                                                           ;006
            age_to = r.age_to_minutes / (1440 * 365)                                            ;006
          OF "MINUTES":                                                                         ;006
            age_to = r.age_to_minutes                                                           ;006
          OF "HOURS":                                                                           ;006
            age_to = r.age_to_minutes / 60                                                      ;006
        ENDCASE                                                                                 ;006
        lot->lots[lot_cnt].age_to_display = concat(trim(cnvtstring(age_to)), " ", units_disp)   ;006
        s_cnt = s_cnt + 1                                                                       ;006
        if (mod(s_cnt,5) = 1)                                                                   ;006
            stat = alterlist(holdstat->stats,s_cnt + 5)                                         ;006
        endif                                                                                   ;006
        holdstat->stats[s_cnt].control_id = 0,                                                  ;006
        holdstat->stats[s_cnt].mean = r.mean,                                                   ;006
        holdstat->stats[s_cnt].sd = r.std_dev,                                                  ;006
        holdstat->stats[s_cnt].lot_id = 0,                                                      ;006
        holdstat->stats[s_cnt].beg_effective_dt_tm = r.beg_effective_dt_tm,                        ;015
        holdstat->stats[s_cnt].end_effective_dt_tm = r.end_effective_dt_tm,                     ;006
        holdstat->stats[s_cnt].pdm_range_id = r.pdm_range_id,                                   ;006
        holdstat->stats[s_cnt].service_resource_cd = p.service_resource_cd,                     ;006
        holdstat->stats[s_cnt].task_assay_cd = p.task_assay_cd,                                 ;006
        holdstat->stats[s_cnt].manf_mean = 0,                                                   ;006
        holdstat->stats[s_cnt].manf_std_dev = 0,                                                ;006
        holdstat->stats[s_cnt].manf_low = 0,                                                    ;006
        holdstat->stats[s_cnt].manf_high = 0,                                                   ;006
        holdstat->stats[s_cnt].abs_low = r.result_low,                                          ;006
        holdstat->stats[s_cnt].abs_high = r.result_high                                         ;006
    DETAIL                                                                                      ;006
        row + 0                                                                                 ;006
     WITH                                                                                       ;006
        nocounter                                                                               ;006
        set stat = alterlist(lot->lots,lot_cnt)
        set stat = alterlist(holdstat->stats, s_cnt)
                                                                                                ;006
     endif                                                                                      ;006

         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif

/********************************************************************/
/* Get QC Data Map                                                  */
/********************************************************************/
     SELECT
       into "nl:"
         q.qc_result_id,
         q.task_assay_cd,
         data_map_exists = decode(dm.seq, "Y", "N"),                   ;001
         dm.task_assay_cd,                                             ;001
         d_rg.seq,                                                     ;004
         rg_exists = decode(rg.seq, "Y", "N"),                         ;004
         rg.parent_service_resource_cd,                                ;004
         rg.child_service_resource_cd,                                 ;004
         rg.resource_group_type_cd,                                    ;004
         rg.root_service_resource_cd                                   ;004
       FROM
         qc_result q,
         data_map dm,
         (dummyt d_rg with seq = 1),
         resource_group rg,
         (dummyt d1 with seq = 1)
       PLAN q
         where parser(GetProcedureParser("q")) and
               q.qc_result_type_flag = request->qc_result_type_flag and                         ;006
               parser(GetControlParser("q")) and
               parser(GetTestsiteParser("q")) and
               q.qc_result_type_flag = request->qc_result_type_flag and                         ;003
               (q.perform_dt_tm between cnvtdatetime(hold_lot_dt_tm) and cnvtdatetime(request->end_date)) and
               q.result_status_cd in ( result_status_accept_cd,
                                       result_status_verified_cd,
                                       result_status_auto_verf_cd,                              ;002
                                       result_status_changed_cd,
                                       result_status_discarded_cd,
                                       result_status_reviewed_cd,
                                       result_status_corrected_cd,
                                       result_status_rejected_cd)
       JOIN d1 where d1.seq = 1
       JOIN dm                                                         ;001
         where dm.task_assay_cd = q.task_assay_cd                      ;001
           and dm.data_map_type_flag in (0, 1)                         ;001
           and dm.active_ind = 1                                       ;001
       JOIN d_rg                                                       ;004
         where d_rg.seq = 1                                            ;004
       JOIN rg                                                         ;004
         where rg.parent_service_resource_cd = dm.service_resource_cd  ;004
           and rg.child_service_resource_cd = q.service_resource_cd    ;004
           and rg.resource_group_type_cd = serv_res_subsection_cd      ;004
           and rg.root_service_resource_cd = 0.0                       ;004
       ORDER BY
         q.task_assay_cd
         
      HEAD q.task_assay_cd
         ;* Set the default data map in the event that no data map is found
         data_map_level = 0                                            ;001
         arg_max_digits = 8                          ;001
         arg_min_digits = 1                          ;001
         arg_min_decimal_places = 0                  ;001
      DETAIL
         if (data_map_exists = "Y")                                    ;001
            ;* Check for exact match on QC data map                    ;001
            if (data_map_level <= 3                                    ;001
            and dm.data_map_type_flag = 1                              ;001
            and dm.service_resource_cd > 0.0                           ;001
            and dm.service_resource_cd = q.service_resource_cd)        ;001
               data_map_level = 4                                      ;001
               arg_max_digits = dm.max_digits        ;001
               arg_min_digits = dm.min_digits        ;001
               arg_min_decimal_places = dm.min_decimal_places          ;001
            endif                                                      ;001
            ;* Check for exact match on data map                       ;001
            if (data_map_level <= 2                                    ;001
            and dm.data_map_type_flag = 0                              ;001
            and dm.service_resource_cd > 0.0                           ;001
            and dm.service_resource_cd = q.service_resource_cd)        ;001
               data_map_level = 3                                      ;001
               arg_max_digits = dm.max_digits        ;001
               arg_min_digits = dm.min_digits        ;001
               arg_min_decimal_places = dm.min_decimal_places          ;001
            endif                                                      ;001
            ;* Check for default all resources level data map          ;001
            if (data_map_level = 0                                     ;001
            and dm.data_map_type_flag = 0                              ;001
            and dm.service_resource_cd = 0.0)                          ;001
               data_map_level = 1                                      ;001
               arg_max_digits = dm.max_digits        ;001
               arg_min_digits = dm.min_digits        ;001
               arg_min_decimal_places = dm.min_decimal_places          ;001
            endif                                                      ;001
         endif                                                         ;001
      FOOT q.task_assay_cd
         dm_cnt = dm_cnt + 1
         if (mod(dm_cnt,5) = 1)
             stat = alterlist(data_map->dms,dm_cnt + 5)
         endif
         data_map->dms[dm_cnt].task_assay_cd = q.task_assay_cd
         data_map->dms[dm_cnt].max_digits = arg_max_digits
         data_map->dms[dm_cnt].min_digits = arg_min_digits
         data_map->dms[dm_cnt].min_decimal_places = arg_min_decimal_places
      WITH
         outerjoin = d_rg,
         dontcare = rg,
         outerjoin = d1,
         nocounter
set stat = alterlist(data_map->dms, dm_cnt)
      declare FormatStatResult( result_value ) = vc
      subroutine FormatStatResult( result_value )
           set oldValue = trim(result_value, 3)
           set first = substring(1,1, oldValue)
           set second = substring(2,1, oldValue)
           set length = size(oldValue)
           set newValue = "                                             "
           if (first = ".")
              set newValue = build("0", oldValue)
           elseif ((first = "-") and (second = "."))
              set last = substring(2, (length - 1), oldValue)
              set newValue = build(first, "0", last)
           else
              set newValue = oldValue
           endif

           return (newValue)
       end

/********************************************************************/
/* REPORT                                                           */
/********************************************************************/
execute cpm_create_file_name "GLB_HJC", "txt"

if (cpm_cfn_info->status_data.status != "S")
  set reply->status_data->status = "F"
  set reply->status_data->subeventstatus[1]->operationname = "get"
  set reply->status_data->subeventstatus[1]->operationstatus = "F"
  set reply->status_data->subeventstatus[1]->targetobjectname = "filename"
  set reply->status_data->subeventstatus[1]->targetObjectValue = "Filename Retrieval Unsuccessful"
  go to exit_script
endif

set reply->file_name = cpm_cfn_info->file_name_path

SELECT if (request->control_per_graph_ind = 1)
           PLAN q
             where parser(GetProcedureParser("q")) and
                   parser(GetControlParser("q")) and
                   q.qc_result_type_flag = request->qc_result_type_flag and
                   parser(GetTestsiteParser("q")) and
                   (q.perform_dt_tm between cnvtdatetime(hold_lot_dt_tm) and cnvtdatetime(request->end_date)) and
                   q.result_status_cd in (result_status_accept_cd,
                                          result_status_verified_cd,
                                          result_status_auto_verf_cd,
                                          result_status_changed_cd,
                                          result_status_reviewed_cd,
                                          result_status_corrected_cd,
                                          result_status_rejected_cd)
           JOIN dta
             where dta.task_assay_cd = q.task_assay_cd
           JOIN d5 where d5.seq = 1
           JOIN cm
             where cm.control_id = q.control_id
           JOIN d4 where d4.seq = 1
           JOIN rt
             where rt.rule_id = q.rule_id
           JOIN p1
             where p1.person_id = q.perform_personnel_id
           JOIN n
             where n.nomenclature_id = q.nomenclature_id
           JOIN d3 where d3.seq = 1
           join cm2 where cm2.control_id = q.control_id
 
           ORDER BY
             q.service_resource_cd,
             q.task_assay_cd,
             q.control_id,
             q.lot_id,
             performdatetime desc
       else
           PLAN q
             where parser(GetProcedureParser("q")) and
                   parser(GetControlParser("q")) and
                   q.qc_result_type_flag = request->qc_result_type_flag and
                   parser(GetTestsiteParser("q")) and
                   (q.perform_dt_tm between cnvtdatetime(hold_lot_dt_tm) and cnvtdatetime(request->end_date)) and
                   q.result_status_cd in (result_status_accept_cd,
                                          result_status_verified_cd,
                                          result_status_auto_verf_cd,
                                          result_status_changed_cd,
                                          result_status_reviewed_cd,
                                          result_status_corrected_cd,
                                          result_status_rejected_cd)
           JOIN dta
             where dta.task_assay_cd = q.task_assay_cd
           JOIN d5 where d5.seq = 1
           JOIN cm
             where cm.control_id = q.control_id
           JOIN d4 where d4.seq = 1
           JOIN rt
             where rt.rule_id = q.rule_id
           JOIN p1
             where p1.person_id = q.perform_personnel_id
           JOIN n
             where n.nomenclature_id = q.nomenclature_id
           JOIN d3 where d3.seq = 1
           join cm2 where cm2.control_id = q.control_id
 
           ORDER BY
             q.service_resource_cd,
             q.task_assay_cd,
             q.lot_id,
             performdatetime desc
       endif
 
into cpm_cfn_info->file_name_path
       q.qc_result_id,
       performdatetime = cnvtdatetime(q.perform_dt_tm),
       q.task_assay_cd,
       q.control_id,
       q.lot_id,
       q.preactive_ind,
       break_lot_pdm = concat(cnvtstring(q.lot_id,32,0), cnvtstring(q.pdm_range_id,32,0)),
       cv1.display,
       cv2.display,
       cm.short_description,
       rt.short_description,
       dta.mnemonic,
       n.nomenclature_id,
       p1.name_full_formatted
FROM
       qc_result q,
       control_material cm,
       qc_rule_type rt,
       discrete_task_assay dta,
       nomenclature n,
       prsnl p1,
       (dummyt d3 with seq = 1),
       (dummyt d4 with seq = 1),
       (dummyt d5 with seq = 1),
       control_material cm2
 
      HEAD REPORT
%i cclsource:glb_print_text.inc
%i cclsource:glb_rpt_macros.inc
      HEAD PAGE
         COL 1    captions->rpt_no  
         COL 13   captions->qc_mljc 
         CALL CENTER(uar_i18ngetmessage(i18nHandle,"title",("M O N T H L Y  L E V E Y  J E N N I N G S  C H A R T")),1,132)
         COL 107  captions->tm  
         COL 117 CURTIME "@TIMENOSECONDS;;M" 
         ROW+1        
         COL 1    captions->as_of  
         COL 13   CURDATE "@SHORTDATE4YR;;Q"
         COL 107  captions->prep        
         COL 117 CURDATE "@SHORTDATE4YR;;Q" 
         ROW+1
         COL 1  captions->dt_frm,
         COL 11 request->begin_date "@SHORTDATE4YR;;Q"
         COL 22  captions->to_  
         COL 25 request->end_date "@SHORTDATE4YR;;Q" 
         COL 107,  captions->pg_no   
         COL 117  CURPAGE "###;L"
         ROW+1
         LINE = FILLSTRING(130,"=")
         COL 1, LINE
         ROW+1

      Head q.service_resource_cd
        row + 0
      HEAD q.task_assay_cd
         results_found = 0
         
         for (x = 1 to dm_cnt)
           if (q.task_assay_cd = data_map->dms[x].task_assay_cd)
             arg_max_digits = data_map->dms[x].max_digits
             arg_min_digits = data_map->dms[x].min_digits
             arg_min_dec_places = data_map->dms[x].min_decimal_places
             arg_stat_dec_places = data_map->dms[x].min_decimal_places + 1
           endif
         endfor
         
         eval_bdate = datetimediff(q.perform_dt_tm, request->begin_date)
         eval_edate = datetimediff(q.perform_dt_tm, request->end_date)
           
         nStatCnt = 0                          
         if(request->use_actual_exp_val_ind = 1)
           for (y = 1 to s_cnt)
             if (holdstat->stats[y].task_assay_cd = q.task_assay_cd
               and holdstat->stats[y].service_resource_cd = q.service_resource_cd)                         
               dStatMean = holdstat->stats[y].mean
               dStatStdDev = holdstat->stats[y].sd
               nStatCnt = nStatCnt + 1
             endif                                                                                            
           endfor
         endif 
         if (eval_bdate >= 0 and eval_edate <= 0)
             results_found = 1
           if (request->qc_result_type_flag = 1)
             for (x=1 to lot_cnt)
               cum_cnt = cum_cnt + 1
              if (mod(cum_cnt,5) = 1)
                 stat = alterlist(cumrec->cums,cum_cnt + 5)
              endif
              cumrec->cums[cum_cnt].lot_number = lot->lots[x].lot_number,
              cumrec->cums[cum_cnt].lot_id = lot->lots[x].lot_id,
              cumrec->cums[cum_cnt].pdm_range_id = lot->lots[x].pdm_range_id,                      ;006
              cumrec->cums[cum_cnt].lot_sequence = lot->lots[x].lot_sequence,                      ;006
              cumrec->cums[cum_cnt].task_assay_cd = q.task_assay_cd,
              cumrec->cums[cum_cnt].sex_cd = lot->lots[x].sex_cd,                                  ;006
              cumrec->cums[cum_cnt].sex_disp = lot->lots[x].sex_disp,                              ;006
              cumrec->cums[cum_cnt].species_cd = lot->lots[x].species_cd,                          ;006
              cumrec->cums[cum_cnt].species_disp = lot->lots[x].species_disp,                      ;006
              cumrec->cums[cum_cnt].age_from_display = lot->lots[x].age_from_display,              ;006
              cumrec->cums[cum_cnt].age_to_display = lot->lots[x].age_to_display                   ;006
        	    cumrec->cums[cum_cnt].service_resource_cd = q.service_resource_cd
            endfor
          endif
         endif

           prev_task_assay_cd = 0 
           prev_control_id = 0

           if (Row > 7)
             BREAK
           endif
 
       HEAD q.control_id
       	row + 0
 
       HEAD break_lot_pdm  ;q.lot_id                                                    ;006
         eval_bdate = datetimediff(q.perform_dt_tm, request->begin_date)   ;020
         eval_edate = datetimediff(q.perform_dt_tm, request->end_date)     ;020
         if (eval_bdate >= 0 and eval_edate <= 0)   
            ROW + 0  
           if (request->qc_result_type_flag = 0)
           for (x=1 to lot_cnt)
              ;fill the cumlot record with the lots for calculating lot statistics
              if (lot->lots[x].task_assay_cd = q.task_assay_cd and
                   q.lot_id = lot->lots[x].lot_id
                  and q.control_id = lot->lots[x].control_id)
                    cumlot_cnt = cumlot_cnt + 1
                    if (mod(cumlot_cnt,5) = 1)
                       stat = alterlist(cumlot->cumlots, cumlot_cnt + 5)
                    endif
                    cumlot->cumlots[cumlot_cnt].lot_id = lot->lots[x].lot_id,
                    cumlot->cumlots[cumlot_cnt].task_assay_cd = q.task_assay_cd,
                    cumlot->cumlots[cumlot_cnt].lot_number = lot->lots[x].lot_number,
                    cumlot->cumlots[cumlot_cnt].pdm_range_id = lot->lots[x].pdm_range_id
                    ;loop through holdstat array to get correct stats
               for (x2 = 1 to s_cnt)
                 if (request->qc_result_type_flag = 0                                                     ;009
                      and holdstat->stats[x2].task_assay_cd = q.task_assay_cd                             ;009
                      and holdstat->stats[x2].service_resource_cd =                                       ;009
                                  q.service_resource_cd                                                   ;009
                      and lot->lots[x].lot_id = holdstat->stats[x2].lot_id                                ;009
                      and q.control_id = lot->lots[x].control_id)
                     cum_cnt = cum_cnt + 1
                     if (mod(cum_cnt,5) = 1)
                           stat = alterlist(cumrec->cums,cum_cnt + 5)
                     endif
                     cumlot->cumlots[cumlot_cnt].service_resource_cd = holdstat->stats[x2].service_resource_cd,
                     cumrec->cums[cum_cnt].stat_cnt = holdstat->stats[x2].stat_cnt, 
                     cumrec->cums[cum_cnt].lot_number = lot->lots[x].lot_number,
                     cumrec->cums[cum_cnt].lot_id = lot->lots[x].lot_id,
                     cumrec->cums[cum_cnt].pdm_range_id = lot->lots[x].pdm_range_id,                      ;006
                     cumrec->cums[cum_cnt].lot_sequence = lot->lots[x].lot_sequence,                      ;006
                     cumrec->cums[cum_cnt].task_assay_cd = q.task_assay_cd,
                     cumrec->cums[cum_cnt].sex_cd = lot->lots[x].sex_cd,                                  ;006
                     cumrec->cums[cum_cnt].sex_disp = lot->lots[x].sex_disp,                              ;006
                     cumrec->cums[cum_cnt].species_cd = lot->lots[x].species_cd,                          ;006
                     cumrec->cums[cum_cnt].species_disp = lot->lots[x].species_disp,                      ;006
                     cumrec->cums[cum_cnt].age_from_display = lot->lots[x].age_from_display,              ;006
                     cumrec->cums[cum_cnt].age_to_display = lot->lots[x].age_to_display   
                     cumrec->cums[cum_cnt].service_resource_cd = q.service_resource_cd
                  endif
              endfor                                                                                      ;009
             endif
           endfor
          endif
         

    if (request->control_per_graph_ind = 1 AND q.control_id != prev_control_id)
      if(prev_control_id != 0)
        break
      endif
      prev_control_id = q.control_id
      prev_task_assay_cd = 0
    endif
    if (request->lot_per_graph_ind = 1)
      nStatCnt = 0                          
    
      if(request->use_actual_exp_val_ind = 1)
        for (x2 = 1 to s_cnt)        
          if (holdstat->stats[x2].task_assay_cd = q.task_assay_cd
             and holdstat->stats[x2].service_resource_cd = q.service_resource_cd and
             holdstat->stats[x2].lot_id = q.lot_id)                                   
      
            dStatMean = holdstat->stats[x2].mean
            dStatStdDev = holdstat->stats[x2].sd
            nStatCnt = nStatCnt + 1
          endif 
        endfor
      endif
      if (prev_task_assay_cd != 0)
        BREAK
      endif           

      
        prev_task_assay_cd = -1
    endif  
      if (prev_task_assay_cd != q.task_assay_cd)
        prev_task_assay_cd = q.task_assay_cd

        COL 1,    captions->tst_ste   
        testsite = trim(UAR_GET_CODE_DISPLAY(q.service_resource_cd), 3) 
        COL+4,   testsite                                               
        temptaskassay = q.task_assay_cd
        COL 66,    captions->proc      
        mnemonic = SUBSTRING(1,20,dta.mnemonic)
        COL+4,   mnemonic
        ROW+1
        COL 1,    captions->ctrl_nm 
        if (request->qc_result_type_flag = 0)
          COL+1,    cm2.short_description
        else
          COL+1      captions->pat_dta 
        endif
        COL 66,    captions->ctrl_rle  
        if (q.result_type_cd != alpha_cd)
          COL+1,   rt.short_description
        else
          COL+1,    captions->alpha 
        endif
        ROW+1
        LINE = FILLSTRING(130,"=")
        COL 1, LINE
        ROW+2        
          if (q.result_type_cd != alpha_cd)
            COL 24  "|"
            COL 120 "|"
            if (request->use_actual_exp_val_ind = 1)
              arg_raw_value = (dStatMean + (dStatStdDev * 3))
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)              
              rslt =  FormatStatResult(rslt)             
              COL 5 rslt "#####;I;F"
            else
              COL 5   captions->3sd  
            endif
            COL 24  chartline
            ROW+1
            for (cnt = 1 to 3)
              COL 24  "|"
              COL 120 "|"
              ROW+1
            endfor
            if (request->use_actual_exp_val_ind = 1)
              arg_raw_value = (dStatMean + (dStatStdDev * 2))
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)             
              COL 5 rslt "#####;I;F"
            else
              COL 5   captions->2sd
            endif
            COL 24  chartline
            ROW+1
            for (cnt = 1 to 3)
              COL 24  "|"
              COL 120 "|"
              ROW+1
            endfor
            if (request->use_actual_exp_val_ind = 1)
              arg_raw_value = (dStatMean + (dStatStdDev * 1))
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)             
              COL 5 rslt "#####;I;F"
            else
              COL 5    captions->1sd    
            endif  
            COL 24  chartline
            ROW+1
            for (cnt = 1 to 3)
              COL 24  "|"
              COL 120 "|"
              ROW+1
            endfor
            if (request->use_actual_exp_val_ind = 1)
              arg_raw_value = (dStatMean)
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)             
              COL 5 rslt "#####;I;F"
            else
              COL 5    captions->mean  
            endif
            COL 24  chartline
            ROW+1
            for (cnt = 1 to 3)
              COL 24  "|"
              COL 120 "|"
              ROW+1
            endfor
            if (request->use_actual_exp_val_ind = 1)
              arg_raw_value = (dStatMean - (dStatStdDev * 1))
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)             
              COL 5 rslt "#####;I;F"
            else
              COL 5   captions->sd    
            endif
            COL 24  chartline
            ROW+1
            for (cnt = 1 to 3)
              COL 24  "|"
              COL 120 "|"
              ROW+1
            endfor
            if (request->use_actual_exp_val_ind = 1)
              arg_raw_value = (dStatMean - (dStatStdDev * 2))
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)             
              COL 5 rslt "#####;I;F"
            else
              COL 5   captions->sd2 
            endif  
            COL 24  chartline
            ROW+1
            for (cnt = 1 to 3)
              COL 24  "|"
              COL 120 "|"
              ROW+1
            endfor
            if (request->use_actual_exp_val_ind = 1)
              arg_raw_value = (dStatMean - (dStatStdDev * 3))
              rslt = uar_fmt_result(arg_min_digits, arg_max_digits, arg_min_dec_places, 0, arg_raw_value)
              rslt =  FormatStatResult(rslt)             
              COL 5 rslt "#####;I;F"
            else
              COL 5   captions->sd3
            endif
            COL 24  chartline
            ROW+1
            COL 24  "|"
            COL 120 "|"
            ROW+1
            tempdaystr = cnvtstring(day(request->begin_date))
            tempdate = cnvtdatetime(request->begin_date)
            COL 24 tempdaystr "###;I;F"  ;014
            ROW+1
            prevmonthstr = trim(format(startdt,"@MONTHABBREV;;Q"),3)  ;014
            COL 24 prevmonthstr
            ROW-1
            tempcol = 24
            val = 0
            for (cnt = 1 to 15)
              newdttm = datetimeadd(tempdate, 2)
              tempdaystr = cnvtstring(day(newdttm))
              tempcol = tempcol + 6
              COL tempcol, tempdaystr "###;I;F"          ;014
              tempmonthstr = trim(format(newdttm,"@MONTHABBREV;;Q"),3) ;014
              if (tempmonthstr != prevmonthstr)
                ROW+1
                COL tempcol, tempmonthstr
                prevmonthstr = tempmonthstr
                ROW-1
              endif
              tempdate = newdttm
            endfor
            ROW+2
            if (request->qc_result_type_flag = 0)                                
                ;display the expected group for each lot for this task_assay_cd
              for (x = 1 to lot_cnt)                                          
                if (lot->lots[x].task_assay_cd = q.task_assay_cd and
                    request->qc_result_type_flag = 0 and 
                    (q.lot_id = lot->lots[x].lot_id or request->lot_per_graph_ind = 0) and
                    (q.control_id = lot->lots[x].control_id or request->control_per_graph_ind = 0))
                  tempExpectedGroupStr = concat(uar_i18ngetmessage(i18nHandle,"ExpGrp",("EXP GRP ")),
                  trim(lot->lots[x].lot_number), ": ")                     
                  COL 0 tempExpectedGroupStr                                                 
                  lot->lots[x].expected_group_row = ROW                                      
                  ROW +1                                                                     
                endif                                                                        
              endfor                                                                         
            else                                                                             
                ;display header for PDM group row                                                 
              tempExpectedGroupStr = uar_i18ngetmessage(i18nHandle,"EXPPDMRange", "EXP PDM GRP ")   
              COL 0 tempExpectedGroupStr                                                            
              ROW +1                                                                                
            endif                                                                                   
            ROW -1                                                                                  
          endif
          xy_cnt = 0
          stat = alterlist(coord->coords,0)
        endif
      endif
         
       HEAD q.qc_result_id
            ;get the PDM stats sequence  
            if (eval_bdate >= 0 and eval_edate <= 0)
                for (x = 1 to lot_cnt)                               ;009
                if ( q.pdm_range_id = cumrec->cums[x].pdm_range_id ) ;009
                     hold_lot_seq = lot->lots[x].lot_sequence        ;009
                     x = lot_cnt + 1                                 ;009
                endif                                                ;009
                endfor                                               ;009
            endif                                                    ;009
            ;get the ARL stats sequence                              ;009
            if ( request->qc_result_type_flag = 0 )                  ;009
                for (x = 1 to s_cnt)                                 ;009
                if ( q.arl_id = holdstat->stats[x].arl_id )          ;009
                     hold_lot_seq = holdstat->stats[x].stat_cnt      ;009
                     x = s_cnt + 1                                   ;009
                endif                                                ;009
                endfor                                               ;009
            endif                                                    ;009
         ;calculate the lot statistics
        if (request->qc_result_type_flag = 0)
          for (x = 1 to cumlot_cnt)
            if (q.lot_id = cumlot->cumlots[x].lot_id 
              and q.task_assay_cd = cumlot->cumlots[x].task_assay_cd
              and q.service_resource_cd = cumlot->cumlots[x].service_resource_cd)
              
             eval_bdate = datetimediff(q.perform_dt_tm, request->begin_date)             
             eval_edate = datetimediff(q.perform_dt_tm, request->end_date)
             
             if (eval_bdate >= 0 and eval_edate <= 0)
                 results_found = 1
                 if (q.result_status_cd = result_status_accept_cd)                ;012
                    cumlot->cumlots[x].accept_cnt = cumlot->cumlots[x].accept_cnt + 1   ;012
                 elseif (q.result_status_cd = result_status_verified_cd)          ;012
                    cumlot->cumlots[x].verify_cnt = cumlot->cumlots[x].verify_cnt + 1   ;012
                 elseif (q.result_status_cd = result_status_auto_verf_cd)         ;012
                    cumlot->cumlots[x].verify_cnt = cumlot->cumlots[x].verify_cnt + 1   ;012
                 elseif (q.result_status_cd = result_status_changed_cd)           ;012
                    cumlot->cumlots[x].change_cnt = cumlot->cumlots[x].change_cnt + 1   ;012
                 elseif (q.result_status_cd = result_status_rejected_cd)          ;012
                    cumlot->cumlots[x].reject_cnt = cumlot->cumlots[x].reject_cnt + 1   ;012
                 endif                                                            ;012
                 cumlot->cumlots[x].total_cnt = cumlot->cumlots[x].total_cnt + 1  ;012
             endif                                                                ;012
             if (q.result_type_cd != alpha_cd)
               cumlot->cumlots[x].ltd_cum_mean = cumlot->cumlots[x].ltd_cum_mean + q.result_value_numeric
               cumlot->cumlots[x].ltd_cum_sum_sqr = cumlot->cumlots[x].ltd_cum_sum_sqr + q.result_value_numeric ** 2
               cumlot->cumlots[x].ltd_cum_count = cumlot->cumlots[x].ltd_cum_count + 1
             else
               if (q.result_process_cd = ALP_NORMAL_CD or q.result_process_cd = WITHIN_RANGE_CD)

                 cumlot->cumlots[x].ltd_normal_cnt = cumlot->cumlots[x].ltd_normal_cnt + 1
                 cumlot->cumlots[x].ltd_cum_count = cumlot->cumlots[x].ltd_cum_count + 1
               elseif (q.result_process_cd = ALP_ABNORMAL_CD)
                 cumlot->cumlots[x].ltd_abnormal_cnt = cumlot->cumlots[x].ltd_abnormal_cnt + 1
                 cumlot->cumlots[x].ltd_cum_count = cumlot->cumlots[x].ltd_cum_count + 1
               elseif (q.result_process_cd = ALP_REVIEW_CD)

                 cumlot->cumlots[x].ltd_review_cnt = cumlot->cumlots[x].ltd_review_cnt + 1
                 cumlot->cumlots[x].ltd_cum_count = cumlot->cumlots[x].ltd_cum_count + 1
               endif
             endif
           endif
         endfor
       endif
         ;calculate the PDM statistics
;011         if (request->qc_result_type_flag = 1)
         for (x = 1 to cum_cnt)
           if (((request->qc_result_type_flag = 0 
              and q.lot_id = cumrec->cums[x].lot_id               
              and cumrec->cums[x].stat_cnt = hold_lot_seq)        
              or (request->qc_result_type_flag = 1 and            
                 q.pdm_range_id = cumrec->cums[x].pdm_range_id    
              and cumrec->cums[x].lot_sequence = hold_lot_seq))   
              and q.task_assay_cd = cumrec->cums[x].task_assay_cd
              and q.service_resource_cd = cumrec->cums[x].service_resource_cd)
              
             eval_bdate = datetimediff(q.perform_dt_tm, request->begin_date)
             eval_edate = datetimediff(q.perform_dt_tm, request->end_date)
             
             if (q.result_type_cd != alpha_cd)
               if (eval_bdate >= 0 and eval_edate <= 0)
                 cumrec->cums[x].cum_mean = cumrec->cums[x].cum_mean + q.result_value_numeric
                 cumrec->cums[x].cum_sum_sqr = cumrec->cums[x].cum_sum_sqr + q.result_value_numeric ** 2
                 cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
               endif
             else
               if (q.result_process_cd = ALP_NORMAL_CD or q.result_process_cd = WITHIN_RANGE_CD)
                 if (eval_bdate >= 0 and eval_edate <= 0)
                   cumrec->cums[x].normal_cnt = cumrec->cums[x].normal_cnt + 1
                   cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                 endif
               elseif (q.result_process_cd = ALP_ABNORMAL_CD)
                 if (eval_bdate >= 0 and eval_edate <= 0)
                   cumrec->cums[x].abnormal_cnt = cumrec->cums[x].abnormal_cnt + 1
                   cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                 endif
               elseif (q.result_process_cd = ALP_REVIEW_CD)
                 if (eval_bdate >= 0 and eval_edate <= 0)
                   cumrec->cums[x].review_cnt = cumrec->cums[x].review_cnt + 1
                   cumrec->cums[x].cum_count = cumrec->cums[x].cum_count + 1
                 endif
               endif
             endif
           endif
         endfor

         x = datetimediff(q.perform_dt_tm, request->begin_date)

         if ((x >= 0) and (eval_bdate >= 0 and eval_edate <= 0))
         y = 0
         mean = q.mean
         std_dev = q.statistical_std_dev
         result = q.result_value_numeric

         if (q.result_type_cd != alpha_cd)
           if (result <= (mean - (std_dev * 3)))
               y = 0                                                                    ;003 y = 12
           elseif ((result > (mean - (std_dev * 3))) and
                   (result < (mean - (std_dev * 2))))
               y = 1                                                                    ;003 y = 11
           elseif (result = (mean - (std_dev * 2)))
               y = 2                                                                    ;003 y = 10
           elseif ((result > (mean - (std_dev * 2))) and
                   (result < (mean - std_dev)))
               y = 3                                                                    ;003 y = 9
           elseif (result = (mean - std_dev))
               y = 4                                                                    ;003 y = 8
           elseif ((result > (mean - std_dev)) and
                   (result < mean))
               y = 5                                                                    ;003 y = 7
           elseif (result = mean)
               y = 6                                                                    ;003 y = 6
           elseif ((result > mean) and
                   (result < (mean + std_dev)))
               y = 7                                                                    ;003 y = 5
           elseif (result = (mean + std_dev))
               y = 8                                                                    ;003 y = 4
           elseif ((result > (mean + std_dev)) and
                   (result < (mean + (std_dev * 2))))
               y = 9                                                                    ;003 y = 3
           elseif (result = (mean + (std_dev * 2)))
               y = 10                                                                   ;003 y = 2
           elseif ((result > (mean + (std_dev * 2))) and
                   (result < (mean + (std_dev * 3))))
               y = 11                                                                   ;003 y = 1
           elseif (result >= (mean + (std_dev * 3)))
               y = 12                                                                   ;003 y = 0
           endif
           found = 0
           for (cnt = 1 to xy_cnt)
              if (coord->coords[cnt].x = x and coord->coords[cnt].y = y)
                  found = 1
                  coord->coords[cnt].result_cnt = coord->coords[cnt].result_cnt + 1
                  if (coord->coords[cnt].hold_lot_seq != hold_lot_seq)                  ;009
                        coord->coords[cnt].hold_lot_seq = hold_lot_seq                  ;009
                  endif                                                                 ;009
                  cnt = xy_cnt + 1
              endif
           endfor
         else
           if (q.result_process_cd = ALP_NORMAL_CD or q.result_process_cd = WITHIN_RANGE_CD)
               y = 1
           elseif (q.result_process_cd = ALP_ABNORMAL_CD)
               y = 2
           elseif (q.result_process_cd = ALP_REVIEW_CD)
               y = 3
           endif
           found = 0
           for (cnt = 1 to xy_cnt)
              if (coord->coords[cnt].x = x and trim(coord->coords[cnt].result_value_alpha) = trim(q.result_value_alpha))
                  found = 1
                  coord->coords[cnt].result_cnt = coord->coords[cnt].result_cnt + 1
                  if (coord->coords[cnt].hold_lot_seq != hold_lot_seq)                  ;009
                        coord->coords[cnt].hold_lot_seq = hold_lot_seq                  ;009
                  endif                                                                 ;009
                  cnt = xy_cnt + 1
              endif
           endfor
         endif
         if (found = 0)
           xy_cnt = xy_cnt + 1
           if (mod(xy_cnt,5) = 1)
               stat = alterlist(coord->coords,xy_cnt + 5)
           endif
           coord->coords[xy_cnt].x = x
           coord->coords[xy_cnt].y = y
           coord->coords[xy_cnt].result_cnt = 1
           coord->coords[xy_cnt].result_value_alpha = q.result_value_alpha
           coord->coords[xy_cnt].hold_lot_seq = hold_lot_seq                            ;009
         endif
       endif

       DETAIL
         row + 0
         already_disp_ind = 0
         
FOOT break_lot_pdm

  if(request->lot_per_graph_ind = 1 and already_disp_ind = 0)
%i cclsource:glb_rpt_monthly_ljc_foot.inc
    already_disp_ind = 1
  endif
  row + 0       
  
FOOT q.control_id
  if(request->control_per_graph_ind = 1 and already_disp_ind = 0) 
%i cclsource:glb_rpt_monthly_ljc_foot.inc
    already_disp_ind = 1
  endif
    
    
FOOT q.task_assay_cd

  if(request->lot_per_graph_ind = 0 and request->control_per_graph_ind = 0
    and already_disp_ind = 0)
%i cclsource:glb_rpt_monthly_ljc_foot.inc
    already_disp_ind = 1
  endif  
  row + 0

       FOOT PAGE
         COL 1, LINE
       FOOT REPORT
           row + 2
            call center(uar_i18ngetmessage(i18nHandle,"end_rpt",("##### END OF REPORT #####")), 0, 125)  ;014
       WITH
         outerjoin = d5,
         dontcare = cm,
         outerjoin = d4,
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
         set reply->status_data->status = "F"
         set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
         go to exit_script
       endif

       if (curqual = 0)
         go to results_failed
       else
         set reply->status_data->status = "S"
         set reply->status_data->subeventstatus[1]->TargetObjectValue = "Successful"
         if (size(trim(request->output_dist)) > 0)
           SET spool = value(reply->file_name) value(request->output_dist) 
         endif
       endif

       go to exit_script
/********************************************************************/
/* Executed if qc_result table get is unsuccessful                  */
/********************************************************************/
      #results_failed
        set reply->status_data->subeventstatus[1]->operationname = "get"
        set reply->status_data->subeventstatus[1]->operationstatus = "Z"
        set reply->status_data->subeventstatus[1]->targetobjectname = "table"
        set reply->status_data->subeventstatus[1]->targetObjectValue = "No records found"
        set reply->status_data->status = "Z"
       
        go to exit_script

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script

END GO

;Generated by GNU enscript 1.6.4.
