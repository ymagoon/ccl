 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_iam_old/GLB_GET_IAM_OLD.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_GET_IAM.PRG
        Object name:            GLB_GET_IAM                  
        Request #:              250168

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieve all accessions pertaining to a   
				specific service_resource_cd with result_status
				of autoverified and a performed_dt_tm between a 
				specified time period

        Tables read:            perform_result
				result
				accession_order_r
 
        Tables updated:         n/a
        Executing from:         General Lab Instrument Activity Monitor App.

        Special Notes:          n/a

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 07/27/98 Gary Runde           Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

	drop program glb_get_iam_OLD:dba go
	create program glb_get_iam_OLD:dba

/*
	record request
	(
	   1  service_resource_cd	= F8
	   1  start_dt_tm		= DQ8
	)
*/

	record reply
	(
	   1  qual[*]
	      2  accession		= VC
	      2  name			= VC	
	      2  tasks[*]
		 3  task_assay_cd	= F8
		 3  task_assay_disp	= VC  
		 3  result_type_cd	= F8
		 3  result_value_dt_tm	= DQ8
		 3  result_value_alpha	= VC
		 3  result_value_numeric= F8
		 3  ascii_text		= VC
		 3  less_great_flag	= I2
		 3  dilution_factor	= F8
		 3  normal_cd		= F8
		 3  critical_cd		= F8
		 3  review_cd		= F8
		 3  delta_cd		= F8
		 3  linear_cd		= F8
		 3  feasible_cd		= F8
		 3  perform_dt_tm	= DQ8
%i cclsource:status_block.inc
	)

/* Variable initialization */

        set reply->status_data->status = "F"
	set AUTOVERIFY = 0.0
 	set a_cnt = 0
	set t_cnt = 0

/*get the code value for the auto verfiy*/
select into "nl:"
	code_value
from code_value cv
where cv.code_set = 1901 and cv.cdf_meaning = "AUTOVERIFIED"
detail
	AUTOVERIFY = cv.code_value
with nocounter

select into "nl:"
	pr.result_id,
	pr.perform_dt_tm,
	r.task_assay_cd,
	aor.accession
from
	perform_result pr,
	person p,
	result r,	
	accession_order_r aor
plan pr	where pr.service_resource_cd = request->service_resource_cd
		and pr.result_status_cd = AUTOVERIFY
	    	and pr.perform_dt_tm >= cnvtdatetime(request->start_dt_tm)
	  	and pr.perform_dt_tm <= cnvtdatetime(curdate, curtime3)
join r	where pr.result_id = r.result_id
join p  where r.person_id = p.person_id
join aor where r.order_id = aor.order_id
order	 pr.perform_dt_tm desc, r.task_assay_cd
head report
	a_cnt = 0
head pr.perform_dt_tm
	a_cnt = a_cnt + 1
        if (mod(a_cnt,10) = 1)
        	stat = alterlist(reply->qual, (a_cnt + 10))     
        endif
	reply->qual[a_cnt].accession = aor.accession
	reply->qual[a_cnt].name = p.name_full_formatted
	t_cnt = 0
detail
	t_cnt = t_cnt + 1	
        if (mod(t_cnt,10) = 1)
        	stat = alterlist(reply->qual[a_cnt].tasks, (t_cnt + 10))     
        endif
	reply->qual[a_cnt].tasks[t_cnt].task_assay_cd = r.task_assay_cd
	reply->qual[a_cnt].tasks[t_cnt].result_type_cd = pr.result_type_cd
	reply->qual[a_cnt].tasks[t_cnt].result_value_dt_tm = 
						pr.result_value_dt_tm
	reply->qual[a_cnt].tasks[t_cnt].result_value_numeric = 
						pr.result_value_numeric
	reply->qual[a_cnt].tasks[t_cnt].result_value_alpha = 
						pr.result_value_alpha
	reply->qual[a_cnt].tasks[t_cnt].ascii_text = pr.ascii_text
	reply->qual[a_cnt].tasks[t_cnt].perform_dt_tm = 
						pr.perform_dt_tm
	reply->qual[a_cnt].tasks[t_cnt].less_great_flag = pr.less_great_flag
	reply->qual[a_cnt].tasks[t_cnt].dilution_factor = pr.dilution_factor
	reply->qual[a_cnt].tasks[t_cnt].normal_cd = pr.normal_cd
	reply->qual[a_cnt].tasks[t_cnt].critical_cd = pr.critical_cd
	reply->qual[a_cnt].tasks[t_cnt].review_cd = pr.review_cd
	reply->qual[a_cnt].tasks[t_cnt].delta_cd = pr.delta_cd
	reply->qual[a_cnt].tasks[t_cnt].linear_cd = pr.linear_cd
	reply->qual[a_cnt].tasks[t_cnt].feasible_cd = pr.feasible_cd
foot pr.perform_dt_tm
       	stat = alterlist(reply->qual[a_cnt].tasks, t_cnt)		
with nocounter

      set stat = alterlist(reply->qual, a_cnt)     

/* If no record matching, exit with return
   status of "F". */

      if (curqual = 0)
        set reply->status_data->status = "Z"
        go to EXIT_PROGRAM
      endif

      set reply->status_data->status = "S"

#EXIT_PROGRAM
      end go

;Generated by GNU enscript 1.6.4.
