 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_numeric_dtas/glb_get_numeric_dtas.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_NUMERIC_DTAS.PRG
        Object name:            GLB_GET_NUMERIC_DTAS
        Request #:              250170

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieves NUMERIC procedures for a given 
                                service resource or all service resources.
                               
        Tables read:            discrete_task_assay
                                code_value
                                
        Tables updated:         n/a

        Executing from:         QC Inquiry

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 08/17/98 Chad Moats           Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_NUMERIC_DTAS:dba go    
      create program GLB_GET_NUMERIC_DTAS:dba
     
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request                                      
      (                               
         1 service_resource_cd       = f8        
         1 data_map_ind		     = i2
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 assays[*]
           2 task_assay_cd           = f8
           2 task_assay_disp         = vc
           2 max_digits              = i2
           2 min_digits              = i2
           2 min_decimal_places      = i2 
         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
      )

     #Script
      set failed = "F"
      set reply->status_data->status = "F"
      set a_cnt = 0
      set detail_cnt = 0
      set RESULT_TYPE_CODE_SET = 289
      set RESULT_TYPE_NUMERIC_CDF = "3"
      declare RESULT_TYPE_NUMERIC_CD = f8
      set SERV_RES_TYPE_CODESET       = 223                            
      set SERV_RES_SUBSECTION_CDF     = "SUBSECTION"                   
      declare SERV_RES_SUBSECTION_CD  = f8             
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty

      if (request->data_map_ind = NULL)
        set request->data_map_ind = 0
      endif

/*******************************************************************/
/* Get mnemonics for requested procedure range.                    */
/*******************************************************************/
 
     SELECT 
      into  "nl:"
         c.code_value
      FROM
         code_value c
      PLAN c 
         where (c.code_set = RESULT_TYPE_CODE_SET and c.cdf_meaning = RESULT_TYPE_NUMERIC_CDF) or
               (c.code_set = SERV_RES_TYPE_CODESET and c.cdf_meaning = SERV_RES_SUBSECTION_CDF) 
      DETAIL
         case (c.cdf_meaning)                                      
            of SERV_RES_SUBSECTION_CDF:                              
               SERV_RES_SUBSECTION_CD = c.code_value               
            of RESULT_TYPE_NUMERIC_CDF:
               RESULT_TYPE_NUMERIC_CD = c.code_value
         endcase
      WITH
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        set failed = "T"
        go to exit_script
      endif

     SELECT 
      into  "nl:"
         a.task_assay_cd,
         a.default_result_type_cd
      FROM
         assay_processing_r a
      PLAN a
         where a.service_resource_cd = request->service_resource_cd
         and a.default_result_type_cd = RESULT_TYPE_NUMERIC_CD
         and a.active_ind = 1
      ORDER BY a.task_assay_cd
      HEAD a.task_assay_cd
         a_cnt = a_cnt + 1
         IF (mod(a_cnt, 5) = 1)
             stat = alterlist(reply->assays, a_cnt + 5)
         ENDIF
         reply->assays[a_cnt]->task_assay_cd = a.task_assay_cd
      DETAIL
         detail_cnt = detail_cnt + 1
      WITH
         nocounter

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        set failed = "T"
        go to exit_script
      endif

      if (curqual = 0)
         go to invalid_procedure
      endif
      set stat = alterlist(reply->assays, a_cnt)


      if (request->data_map_ind = 1)

        select into "nl:"
          d1.seq,
          data_map_exists = decode(dm.seq, "Y", "N"),                   
          dm.task_assay_cd,                                             
          d_rg.seq,                                                     
          rg_exists = decode(rg.seq, "Y", "N"),                         
          rg.parent_service_resource_cd,                                
          rg.child_service_resource_cd,                                 
          rg.resource_group_type_cd,                                    
          rg.root_service_resource_cd                                             
        FROM data_map dm,
             (dummyt d_rg with seq = 1),
             resource_group rg,
             (dummyt d1 with seq = value(a_cnt))
        PLAN d1      
        JOIN dm                                                        
         where dm.task_assay_cd = reply->assays[d1.seq].task_assay_cd                      
           and dm.data_map_type_flag = 0                         
           and dm.active_ind = 1                                       
       JOIN d_rg                                                       
         where d_rg.seq = 1                                            
       JOIN rg                                                         
         where rg.parent_service_resource_cd = dm.service_resource_cd  
           and rg.child_service_resource_cd = request->service_resource_cd    
           and rg.resource_group_type_cd = SERV_RES_SUBSECTION_CD      
           and rg.root_service_resource_cd = 0.0                       
        HEAD d1.seq
          data_map_level = 0
          reply->assays[d1.seq].max_digits = 6        
          reply->assays[d1.seq].min_digits = 1        
          reply->assays[d1.seq].min_decimal_places = 0             
        DETAIL
          if (data_map_exists = "Y")                                    
             ;* Check for exact match on data map                       
             if (data_map_level <= 2                                    
             and dm.data_map_type_flag = 0                              
             and dm.service_resource_cd > 0.0                           
             and dm.service_resource_cd = request->service_resource_cd)        
                data_map_level = 3                                      
                reply->assays[d1.seq].max_digits = dm.max_digits       
                reply->assays[d1.seq].min_digits = dm.min_digits        
                reply->assays[d1.seq].min_decimal_places =              
                  dm.min_decimal_places                                 
             endif                                                      
             ;* Check for subsection level data map                     
             if (data_map_level <= 1                                    
             and dm.data_map_type_flag = 0                              
             and dm.service_resource_cd > 0.0                           
             and rg_exists = "Y"                                        
             and rg.parent_service_resource_cd = dm.service_resource_cd 
             and rg.child_service_resource_cd = request->service_resource_cd)  
                data_map_level = 2                                      
                reply->assays[d1.seq].max_digits = dm.max_digits        
                reply->assays[d1.seq].min_digits = dm.min_digits        
                reply->assays[d1.seq].min_decimal_places =              
                  dm.min_decimal_places                                 
             endif                                                      
             ;* Check for default all resources level data map          
             if (data_map_level = 0                                     
             and dm.data_map_type_flag = 0                              
             and dm.service_resource_cd = 0.0)                          
                data_map_level = 1                                      
                reply->assays[d1.seq].max_digits = dm.max_digits        
                reply->assays[d1.seq].min_digits = dm.min_digits        
                reply->assays[d1.seq].min_decimal_places =              
                  dm.min_decimal_places                                 
             endif                                                      
          endif                                                         
      WITH
         dontcare = dm,                                                
         outerjoin = d_rg,                                             
         dontcare = rg,                                                
         nocounter

      endif
      go to exit_script

/********************************************************************/ 
/* Executed if requested procedure is not found.                    */
/********************************************************************/
     #invalid_procedure
      set reply->status_data->subeventstatus[1]->operationname = 
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus = 
         "Z"
      set reply->status_data->subeventstatus[1]->targetobjectname = 
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue = 
         "discrete_task_assay table"
      set failed = "Z"
      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
      elseif (failed = "Z")
         set reply->status_data->status = "Z"
      else
         set reply->status_data->status = "F"
      endif
END
GO     

;Generated by GNU enscript 1.6.4.
