 ;;Solution_Test/script/Bedrock/bed_aud_gl_loc_srvarea/bed_aud_gl_loc_srvarea.prg Turn on black mode

/************************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-1995 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 ************************************************************************
 
          Date Written:
          Source file name:   bed_aud_gl_loc_srvarea.prg
          Object name:        bed_aud_gl_loc_srvarea
          Request #:          XXXXXX
 
          Product:            V500
          HNA Version:        V500
          CCL Version:
 
          Program purpose:    Prints a report that shows
                               locations not assigned to a lab service
                               area, and locations that have been
                               assigned to more than one serv area
 
          Tables read:
          Tables updated:
 
          Executing from:     ccl
 
          Special Notes:
 
 ***********************************************************************
 *                  GENERATED MODIFICATION CONTROL LOG                 *
 ***********************************************************************
 *                                                                     *
 *Mod	Date		Engineer	Comment                                *
 *---	--------	--------	---------------------------------------*
  000	06/04/07	Huffman		Initial Release
  001	02/12/09	Kelli Wade	1) Remove "Location Type" column
  								2) To populate "Organization (Location)" column, get organization of the
  									parent building of the location that is a child of a service area.
  									If more than one parent building, then populate column with "multiple orgs"
 ******************  END OF ALL MODCONTROL BLOCKS  ********************/
 
drop program bed_aud_gl_loc_srvarea:dba go
create program bed_aud_gl_loc_srvarea:dba
 
/***********************************************************************
* Request Record                                                       *
************************************************************************/
 
if (not (validate (request,0)))
 record request
  (
    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
    1 paramlist[*]
      2 param_type_mean = vc
      2 pdate1 = dq8
      2 pdate2 = dq8
      2 vlist[*]
        3 dbl_value = f8
        3 string_value = vc
  )
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*]
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1 high_volume_flag = i2
    1 output_filename = vc
    1 run_status_flag = i2
    1 statlist[*]
      2 statistic_meaning = vc
      2 status_flag = i2
      2 qualifying_items = i4
      2 total_items = i4
    1  status_data
      2  status  =  C1
      2  SUBEVENTSTATUS [ 1 ]
        3  OPERATIONNAME  =  C15
        3  OPERATIONSTATUS  =  C1
        3  TARGETOBJECTNAME  =  C15
        3  TARGETOBJECTVALUE  =  C100
  )
endif
 
record temp
(
  1 loclist[*]
    2 loc_disp = vc
    2 loc_desc = vc
    2 loc_cd = f8
    2 org_id = f8
    2 org_name = vc
;001    2 loc_type_disp = vc
    2 loc_type_cd = f8
    2 not_in_srvarea_ind = i2
    2 mult_srvarea_ind = i2
    2 srvarea_disp1 = vc
    2 srvarea_cd1 = f8
    2 srvarea_disp2 = vc
    2 srvarea_cd2 = f8
)
 
 /* Set the reply */
;001 set stat = alterlist(reply->collist, 8)
set stat = alterlist(reply->collist, 7)	;001
set reply->collist[1].header_text = "Location Description"
set reply->collist[1].data_type = 1 ;string
set reply->collist[1].hide_ind = 0
set reply->collist[2].header_text = "Location Display"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 0
set reply->collist[3].header_text = "Organization"
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
;001 set reply->collist[4].header_text = "Location Type"
;001 set reply->collist[4].data_type = 1 ;string
;001 set reply->collist[4].hide_ind = 0
;001 set reply->collist[5].header_text = "Location Not in Service Area"
;001 set reply->collist[5].data_type = 1 ;string
;001 set reply->collist[5].hide_ind = 0
;001 set reply->collist[6].header_text = "Location in more than one Service Area"
;001 set reply->collist[6].data_type = 1 ;string
;001 set reply->collist[6].hide_ind = 0
;001 set reply->collist[7].header_text = "Multiple Service Area 1"
;001 set reply->collist[7].data_type = 1 ;string
;001 set reply->collist[7].hide_ind = 0
;001 set reply->collist[8].header_text = "Multiple Service Area 2"
;001 set reply->collist[8].data_type = 1 ;string
;001 set reply->collist[8].hide_ind = 0
/*beginning mod 001*/
set reply->collist[4].header_text = "Location Not in Service Area"
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
set reply->collist[5].header_text = "Location in more than one Service Area"
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
set reply->collist[6].header_text = "Multiple Service Area 1"
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
set reply->collist[7].header_text = "Multiple Service Area 2"
set reply->collist[7].data_type = 1 ;string
set reply->collist[7].hide_ind = 0
/*end mod 001*/
 
 
; Set some code values
;set unauth = get_code_value(8,"UNAUTH")
set glb_ac_cd = get_code_value(106,"GLB")
set lab_ct_cd = get_code_value(6000,"GENERAL LAB")
set nu_cd = get_code_value(222,"NURSEUNIT")
set amb_cd = get_code_value(222,"AMBULATORY")
set cslogin_cd = get_code_value(222,"CSLOGIN")
set srvarea_cd = get_code_value(222,"SRVAREA")
set bldg_cd = get_code_value(222,"BUILDING")		;001
set subsect_cd = get_code_value(223,"SUBSECTION")
set bench_cd = get_code_value(223,"BENCH")
set instr_cd = get_code_value(223,"INSTRUMENT")
 
set totcnt = 0
set high_volume_cnt = 0
select into "nl:"
  hv_cnt = count(*)
from location l
plan l
  where l.location_type_cd in (amb_cd,nu_cd,cslogin_cd)
    and l.active_ind = 1
detail
  high_volume_cnt = hv_cnt
with nocounter
 
if (request->skip_volume_check_ind = 0)
  if (high_volume_cnt > 5000)
    set reply->high_volume_flag = 2
    go to exit_script
  elseif (high_volume_cnt = 3000)
    set reply->high_volume_flag = 1
    go to exit_script
  endif
endif
 
set lcnt = 0
select into "nl:"
from location l1,
     (dummyt d with seq = 1),
     location_group lg,
     location l2
plan l1
  where l1.location_type_cd in (amb_cd,nu_cd,cslogin_cd)
    and l1.active_ind = 1
join d
join lg
  where lg.child_loc_cd = l1.location_cd
    and lg.location_group_type_cd = srvarea_cd
    and lg.active_ind = 1
join l2
  where l2.location_cd = lg.parent_loc_cd
    and l2.discipline_type_cd = lab_ct_cd
head report
  lcnt = 0
detail
  lcnt = lcnt + 1
  stat = alterlist(temp->loclist,lcnt)
  temp->loclist[lcnt].loc_cd = l1.location_cd
  temp->loclist[lcnt].loc_type_cd = l1.location_type_cd
  temp->loclist[lcnt].org_id = l1.organization_id
  temp->loclist[lcnt].not_in_srvarea_ind = 1
with nocounter, outerjoin=d, dontexist
/*
select into "nl:"
from service_resource sr,
     location l1,
     (dummyt d with seq = 1),
     location_group lg,
     location l2
plan sr
  where sr.service_resource_type_cd in (bench_cd,instr_cd)
    and sr.cs_login_loc_cd > 0
    and sr.discipline_type_cd = lab_ct_cd
    and sr.active_ind = 1
join l1
  where l1.location_cd = sr.cs_login_loc_cd
    and l1.location_type_cd = cslogin_cd
    and l1.active_ind = 1
join d
join lg
  where lg.child_loc_cd = l1.location_cd
    and lg.location_group_type_cd = srvarea_cd
    and lg.active_ind = 1
join l2
  where l2.location_cd = lg.parent_loc_cd
    and l2.discipline_type_cd = lab_ct_cd
detail
  lcnt = lcnt + 1
  stat = alterlist(temp->loclist,lcnt)
  temp->loclist[lcnt].loc_cd = l1.location_cd
  temp->loclist[lcnt].loc_type_cd = l1.location_type_cd
  temp->loclist[lcnt].org_id = l1.organization_id
  temp->loclist[lcnt].not_in_srvarea_ind = 1
with nocounter, outerjoin=d, dontexist
 
select into "nl:"
from service_resource sr,
     sub_section ss,
     location l1,
     (dummyt d with seq = 1),
     location_group lg,
     location l2
plan sr
  where sr.service_resource_type_cd = subsect_cd
    and sr.cs_login_loc_cd > 0
    and sr.discipline_type_cd = lab_ct_cd
    and sr.active_ind = 1
join ss
  where ss.service_resource_cd = sr.service_resource_cd
    and ss.multiplexor_ind = 1
join l1
  where l1.location_cd = sr.cs_login_loc_cd
    and l1.location_type_cd = cslogin_cd
    and l1.active_ind = 1
join d
join lg
  where lg.child_loc_cd = l1.location_cd
    and lg.location_group_type_cd = srvarea_cd
    and lg.active_ind = 1
join l2
  where l2.location_cd = lg.parent_loc_cd
    and l2.discipline_type_cd = lab_ct_cd
detail
  lcnt = lcnt + 1
  stat = alterlist(temp->loclist,lcnt)
  temp->loclist[lcnt].loc_cd = l1.location_cd
  temp->loclist[lcnt].loc_type_cd = l1.location_type_cd
  temp->loclist[lcnt].org_id = l1.organization_id
  temp->loclist[lcnt].not_in_srvarea_ind = 1
with nocounter, outerjoin=d, dontexist
*/
select into "nl:"
from location l1,
     location_group lg1,
     location l2,
     location_group lg2,
     location l3
plan l1
  where l1.location_type_cd in (amb_cd,nu_cd,cslogin_cd)
    and l1.active_ind = 1
join lg1
  where lg1.child_loc_cd = l1.location_cd
    and lg1.location_group_type_cd = srvarea_cd
    and lg1.active_ind = 1
join l2
  where l2.location_cd = lg1.parent_loc_cd
    and l2.discipline_type_cd = lab_ct_cd
join lg2
  where lg2.child_loc_cd = l1.location_cd
    and lg2.location_group_type_cd = srvarea_cd
    and lg2.active_ind = 1
    and lg2.parent_loc_cd > lg1.parent_loc_cd
join l3
  where l3.location_cd = lg2.parent_loc_cd
    and l3.discipline_type_cd = lab_ct_cd
detail
  lcnt = lcnt + 1
  stat = alterlist(temp->loclist,lcnt)
  temp->loclist[lcnt].loc_cd = l1.location_cd
  temp->loclist[lcnt].loc_type_cd = l1.location_type_cd
  temp->loclist[lcnt].org_id = l1.organization_id
  temp->loclist[lcnt].mult_srvarea_ind = 1
  temp->loclist[lcnt].srvarea_cd1 = lg1.parent_loc_cd
  temp->loclist[lcnt].srvarea_cd2 = lg2.parent_loc_cd
with nocounter;, outerjoin=d, dontexist
 
if (lcnt > 0)
  select into "nl:"
  from (dummyt d with seq = lcnt),
        code_value cv1
;001        code_value cv2
  plan d
  join cv1
    where cv1.code_value = temp->loclist[d.seq].loc_cd
;001  join cv2
;001    where cv2.code_value = temp->loclist[d.seq].loc_type_cd
  detail
    temp->loclist[d.seq].loc_disp = cv1.display
    temp->loclist[d.seq].loc_desc = cv1.description
;001    temp->loclist[d.seq].loc_type_disp = cv2.display
  with nocounter
 
  select into "nl:"
  from (dummyt d with seq = lcnt),
        code_value cv1,
        code_value cv2
  plan d
    where temp->loclist[d.seq].mult_srvarea_ind = 1
  join cv1
    where cv1.code_value = temp->loclist[d.seq].srvarea_cd1
  join cv2
    where cv2.code_value = temp->loclist[d.seq].srvarea_cd2
  detail
    temp->loclist[d.seq].srvarea_disp1 = cv1.display
    temp->loclist[d.seq].srvarea_disp2 = cv2.display
  with nocounter
 
  set not_in_srvarea_cnt = 0
  set mult_srvarea_cnt = 0
 
 
 
;001  select into "nl:"
;001  from (dummyt d with seq = lcnt),
;001        organization o
;001  plan d
;001    where temp->loclist[d.seq].org_id > 0
;001  join o
;001    where o.organization_id = temp->loclist[d.seq].org_id
;001  detail
;001    temp->loclist[d.seq].org_name = o.org_name
;001  with nocounter
 
 
/*beginning mod 001*/
;;;;;;;;;; get organizations for locations ;;;;;;;;;;
if (lcnt > 0)
	select into "NL:"
	from (dummyt d with seq = lcnt),
		 location_group lg,
		 location l,
		 organization o
	plan d
	join lg
		where lg.child_loc_cd = temp->loclist[d.seq].loc_cd
		  and lg.location_group_type_cd = bldg_cd
		  and lg.active_ind = 1
	join l
		where l.location_cd = lg.parent_loc_cd
		  and l.active_ind = 1
	join o
		where o.organization_id = l.organization_id
		  and o.active_ind = 1
	head d.seq
		total_bldgs = 0
	detail
		total_bldgs = total_bldgs + 1
		if (total_bldgs > 1)
			temp->loclist[d.seq].org_name = "multiple orgs"
		else
			temp->loclist[d.seq].org_name = o.org_name
		endif
	with counter
endif
/*end mod 001*/
 
 
 
  set rcnt = 0
  select into "nl:"
     loc_desc = cnvtupper(temp->loclist[d.seq].loc_desc),
     loc_cd = temp->loclist[d.seq].loc_cd,
     org_disp = cnvtupper(temp->loclist[d.seq].org_name)
  from (dummyt d with seq = lcnt)
  order by loc_desc, loc_cd,
           org_disp
  head loc_cd
    rcnt = rcnt + 1
    stat = alterlist(reply->rowlist,rcnt)
;001    stat = alterlist(reply->rowlist[rcnt].celllist,8)
    stat = alterlist(reply->rowlist[rcnt].celllist,7)	;001
    reply->rowlist[rcnt].celllist[1].string_value =
                           temp->loclist[d.seq].loc_desc
    reply->rowlist[rcnt].celllist[2].string_value =
                           temp->loclist[d.seq].loc_disp
    reply->rowlist[rcnt].celllist[3].string_value =
                           temp->loclist[d.seq].org_name
;001     reply->rowlist[rcnt].celllist[4].string_value =
;001                            temp->loclist[d.seq].loc_type_disp
;001     if (temp->loclist[d.seq].not_in_srvarea_ind = 1)
;001       reply->rowlist[rcnt].celllist[5].string_value = "X"
;001       not_in_srvarea_cnt = not_in_srvarea_cnt + 1
;001     else
;001       reply->rowlist[rcnt].celllist[5].string_value = " "
;001     endif
;001     if (temp->loclist[d.seq].mult_srvarea_ind = 1)
;001       mult_srvarea_cnt = mult_srvarea_cnt + 1
;001       reply->rowlist[rcnt].celllist[6].string_value = "X"
;001       reply->rowlist[rcnt].celllist[7].string_value =
;001                             temp->loclist[d.seq].srvarea_disp1
;001       reply->rowlist[rcnt].celllist[8].string_value =
;001                             temp->loclist[d.seq].srvarea_disp2
;001     else
;001       reply->rowlist[rcnt].celllist[6].string_value = " "
;001       reply->rowlist[rcnt].celllist[7].string_value = " "
;001       reply->rowlist[rcnt].celllist[8].string_value = " "
;001     endif
	/*beginning mod 001*/
    if (temp->loclist[d.seq].not_in_srvarea_ind = 1)
      reply->rowlist[rcnt].celllist[4].string_value = "X"
      not_in_srvarea_cnt = not_in_srvarea_cnt + 1
    else
      reply->rowlist[rcnt].celllist[4].string_value = " "
    endif
    if (temp->loclist[d.seq].mult_srvarea_ind = 1)
      mult_srvarea_cnt = mult_srvarea_cnt + 1
      reply->rowlist[rcnt].celllist[5].string_value = "X"
      reply->rowlist[rcnt].celllist[6].string_value =
                            temp->loclist[d.seq].srvarea_disp1
      reply->rowlist[rcnt].celllist[7].string_value =
                            temp->loclist[d.seq].srvarea_disp2
    else
      reply->rowlist[rcnt].celllist[5].string_value = " "
      reply->rowlist[rcnt].celllist[6].string_value = " "
      reply->rowlist[rcnt].celllist[7].string_value = " "
    endif
	/*end mod 001*/
  with nocounter
endif
 
if (rcnt > 0)
  set reply->run_status_flag = 3
else
  set reply->run_status_flag = 1
endif
 
set stat = alterlist(reply->statlist,2)
set reply->statlist[1].statistic_meaning = "GLLOCNOSRVAREA"
set reply->statlist[1].total_items = high_volume_cnt
set reply->statlist[1].qualifying_items = not_in_srvarea_cnt
if (not_in_srvarea_cnt > 0)
  set reply->statlist[1].status_flag = 3
else
  set reply->statlist[1].status_flag = 1
endif
set reply->statlist[2].statistic_meaning = "GLLOCMULTSRVAREA"
set reply->statlist[2].total_items = high_volume_cnt
set reply->statlist[2].qualifying_items = mult_srvarea_cnt
if (mult_srvarea_cnt > 0)
  set reply->statlist[2].status_flag = 3
else
  set reply->statlist[2].status_flag = 1
endif
 
subroutine get_code_value(Xcodeset, Xcdf)
; get next sequence number
 
; Xcodeset           f8   INPUT    code set
; Xcdf               vc   INPUT    CDF to look up
; (returns)          f8   OUTPUT   code value
 
  set to_return = 0.0
  select into "nl:"
  from code_value c
  plan c
    where c.code_set = Xcodeset
      and c.cdf_meaning = Xcdf
      and c.active_ind = 1
  detail
    to_return = c.code_value
  with nocounter
 
  return(to_return)
end
 
#exit_script
set reply->status_data->status = "S"
if (reply->high_volume_flag in (1,2))
  set reply->output_filename = build("gl_loc_srvarea_audit.csv")
endif
 
if (request->output_filename > " ")
  execute bed_rpt_file
endif
 
end go
 

;Generated by GNU enscript 1.6.4.
