 ;;Solution_Test/script/Person Management/pm_main_history/pm_create_request.inc Turn on black mode

/************************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-2001 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 ************************************************************************

          Date Written:       11/13/02
          Source file name:   pm_create_request.inc
          Object name:
          Request #:

          Product:            CORE V500
          Product Team:       CORE V500
          HNA Version:        V500
          CCL Version:

          Program purpose:    This include file will create dynamic requests

          Tables read:
          Tables updated:
          Executing from:


          Special Notes:

 ***********************************************************************
 *                  GENERATED MODIFICATION CONTROL LOG                 *
 ***********************************************************************
 *                                                                     *
 *Mod Date     Engineer             Comment                            *
 *---   -------- -------------------- ---------------------------------*
 *000 11/13/02 Chad Pugh            Initial Release
 CP001  04/02/03 Chad Pugh            Trying to clean up any memory leaks
 ***********************************************************************

 ******************  END OF ALL MODCONTROL BLOCKS  ********************/

;***********************************
;VALIDATE
;***********************************
if(validate(PM_CREATE_REQ_DEF, -9) = -9)
  declare PM_CREATE_REQ_DEF  = i2 with constant(0)

;***********************************
;INITIALIZE
;***********************************

;Declare variables
  declare cr_hMsg       = i4 with noconstant(0)
  declare cr_hMsgType   = i4 with noconstant(0)
  declare cr_hInst      = i4 with noconstant(0)
  declare cr_hItem      = i4 with noconstant(0)
  declare cr_lLevel     = i4 with noconstant(0)
  declare cr_lCnt       = i4 with noconstant(0)
  declare cr_lCharLen   = i4 with noconstant(0)
  declare cr_sIterator  = i4 with noconstant(0)
  declare cr_lFieldType = i4 with noconstant(0)
  declare cr_sFieldName = vc with noconstant(" ")
  declare cr_bList      = i2 with noconstant(FALSE)
  declare cr_bFound     = i2 with noconstant(FALSE)

;Declare constants
  declare cr_eSrvString = i4 with constant(1)
  declare cr_eSrvShort  = i4 with constant(2)
  declare cr_eSrvLong   = i4 with constant(3)
  declare cr_eSrvDouble = i4 with constant(6)
  declare cr_eSrvAsIs   = i4 with constant(7)
  declare cr_eSrvList   = i4 with constant(8)
  declare cr_eSrvStruct = i4 with constant(9)
  declare cr_eSrvUChar  = i4 with constant(10)
  declare cr_eSrvULong  = i4 with constant(12)
  declare cr_eSrvDate   = i4 with constant(13)

  ;Here are the ones we don't use
  ;declare cr_eSrvUnknown = i4 with constant(0)
  ;declare cr_eSrvChar    = i4 with constant(4)
  ;declare cr_eSrvFloat   = i4 with constant(5)
  ;declare cr_eSrvUShort  = i4 with constant(11)
  ;declare cr_eSrvDynList = i4 with constant(14)
  ;declare cr_eSrvPointer = i4 with constant(15)

;Declare subroutines
  declare cr_createRequest(mode = i2, req_id = i4, req_name = vc) = i2
  declare cr_popStack(dummyVar = i2) = null
  declare cr_pushStack(hVal = i4, sVal = i4) = null

;Create record structure for dynamic request
  free record cr_stack
  record cr_stack
  ( 1 list[10]
      2  hInst     = i4
      2  sIterator = i4
  )


;***********************************
;Subroutines
;***********************************

  subroutine cr_createRequest(mode, req_id, req_name)
  /***********************************
  * Sets string values               *
  *----------------------------------*
  * Inputs:  mode = i2 0 for request,*
  *                    1 for reply   *
  *          req_id = i4             *
  *          req_name = vc           *
  *                                  *
  * Outputs: None                    *
  ************************************/
    ;Reset the level for the tree
    set cr_lLevel = 1

    ;Check to see if the request/reply already exists
    call dq_reset_query(null)
    call dq_add_line(concat("free record ", req_name, " go"))

    ;Start building the request/reply
    call dq_add_line(concat("record ", req_name))
    call dq_add_line("(")

    set cr_hMsg = uar_SrvSelectMessage(req_id)

    if(cr_hMsg != 0)
        ;Mode = 0 for request, 1 for reply
        if (mode = 0)
           set cr_hInst = uar_SrvCreateRequest(cr_hMsg)
        else
           set cr_hInst = uar_SrvCreateReply(cr_hMsg)
        endif

        ;call uar_SrvDestroyMessage(cr_hMsg)  ;CP001

    else
        ;Log an error and exit
        set reply->status_data->operationname = "INVALID_hMsg"
        set reply->status_data->subeventstatus[1]->targetobjectname = "CREATE_REQUEST"
        set reply->status_data->subeventstatus[1]->targetobjectvalue = "GET"
        return(FALSE)
    endif

    if (cr_hInst > 0)
       ;Get the first field
    	set cr_sFieldName = uar_SrvFirstField(cr_hInst, cr_sIterator)
        set cr_sFieldName = trim(cr_sFieldName, 3)
    	call cr_pushStack(cr_hInst, cr_sIterator)
    else
        set reply->status_data->operationname = "INVALID_hInst"
        set reply->status_data->subeventstatus[1]->targetobjectname = "CREATE_REQUEST"
        set reply->status_data->subeventstatus[1]->targetobjectvalue = "GET"
        
        ;+CP001 - clean up the SRV handles
        if (cr_hInst)
          call uar_SrvDestroyInstance(cr_hInst)
          set cr_hInst = 0
        endif
        ;-CP001 

        return(FALSE)
    endif

    ;Loop through and create the rest of the request
    while(textlen(cr_sFieldName) > 0)
        set cr_lFieldType = uar_SrvGetType(cr_stack->list[cr_lCnt]->hInst, nullterm(cr_sFieldName))

        ;These help with debugging
        ;call echo(cr_sFieldName, 0)
        ;call echo(cnvtstring(cr_lFieldType))

        case (cr_lFieldType)
             of cr_eSrvStruct:
                set cr_hItem = 0
                set cr_hItem = uar_SrvGetStruct(cr_stack->list[cr_lCnt]->hInst, nullterm(cr_sFieldName))

                if (cr_hItem > 0)
  					set cr_sIterator = 0
  					call cr_pushStack(cr_hItem, cr_sIterator)
                   call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName))
                   set cr_lLevel = cr_lLevel + 1
                   set cr_bList = TRUE
                else
                   ;Log an error and exit
                   set reply->status_data->operationname = "INVALID_hItem"
                   set reply->status_data->subeventstatus[1]->targetobjectname = "CREATE_REQUEST"
                   set reply->status_data->subeventstatus[1]->targetobjectvalue = "GET"
                   
                   ;+CP001 - clean up the SRV handles
                   if (cr_hInst)
                     call uar_SrvDestroyInstance(cr_hInst)
                     set cr_hInst = 0
                   endif
                    ;-CP001 

                   return(FALSE)
                endif

             of cr_eSrvList:
                set cr_hItem = 0
                set cr_hItem = uar_SrvAddItem(cr_stack->list[cr_lCnt]->hInst, nullterm(cr_sFieldName))

                if (cr_hItem > 0)
  					set cr_sIterator = 0
  					call cr_pushStack(cr_hItem, cr_sIterator)
                   call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, "[*]"))
                   set cr_lLevel = cr_lLevel + 1
                   set cr_bList = TRUE
                else
                   ;Log an error and exit
                   set reply->status_data->operationname = "INVALID_hInst"
                   set reply->status_data->subeventstatus[1]->targetobjectname = "CREATE_REQUEST"
                   set reply->status_data->subeventstatus[1]->targetobjectvalue = "GET"
                   
                   ;+CP001 - clean up the SRV handles
                   if (cr_hInst)
                     call uar_SrvDestroyInstance(cr_hInst)
                     set cr_hInst = 0
                   endif
                   ;-CP001 

                   return(FALSE)
                endif

             of cr_eSrvString:
                set cr_lCharLen = uar_SrvGetStringMax(cr_stack->list[cr_lCnt]->hInst, nullterm(cr_sFieldName))

                if (cr_lCharLen > 0)
  					call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = c", cnvtString(cr_lCharLen)))
                else
                   call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = vc"))
                endif

             of cr_eSrvUChar:
                call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = c1"))

             of cr_eSrvShort:
                call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = i2"))

             of cr_eSrvLong:
                call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = i4"))

             of cr_eSrvULong:
                call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = ui4"))

             of cr_eSrvDouble:
                call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = f8"))

             of cr_eSrvDate:
                call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = dq8"))

             of cr_eSrvAsIs:
                call dq_add_line(concat(cnvtString(cr_lLevel), " ", cr_sFieldName, " = gvc"))

             else
                ;Else it is crap so get out of here
                set reply->status_data->operationname = "INVALID_SrvType"
                set reply->status_data->subeventstatus[1]->targetobjectname = "CREATE_REQUEST"
                set reply->status_data->subeventstatus[1]->targetobjectvalue = "GET"
                
                ;+CP001 - clean up the SRV handles
                if (cr_hInst)
                  call uar_SrvDestroyInstance(cr_hInst)
                  set cr_hInst = 0
                endif
                ;-CP001 

                return(FALSE)
        endcase

        set cr_sFieldName = ""
           if (cr_bList)
              ;If this is a struct or a list, then get the first field
			set cr_sFieldName = uar_SrvFirstField(cr_stack->list[cr_lCnt]->hInst, cr_stack->list[cr_lCnt]->sIterator)
              set cr_sFieldName = trim(cr_sFieldName, 3)
              set cr_bList = FALSE
           else
              ;Get the next field
	  		set cr_sFieldName = uar_SrvNextField(cr_stack->list[cr_lCnt]->hInst, cr_stack->list[cr_lCnt]->sIterator)
              set cr_sFieldName = trim(cr_sFieldName, 3)

              if (textlen(cr_sFieldName) <= 0)
                  ;Reset this flag
                  set cr_bFound = FALSE

                  while (cr_bFound != TRUE)
                      call cr_popStack(null)

                      if (cr_stack->list[cr_lCnt]->hInst > 0 and cr_lCnt > 0)
			  			set cr_sFieldName = uar_SrvNextField(cr_stack->list[cr_lCnt]->hInst, cr_stack->list[cr_lCnt]->sIterator)
                         set cr_sFieldName = trim(cr_sFieldName, 3)
                      else
                         set cr_bFound = TRUE
                      endif

                      if (textlen(cr_sFieldName) > 0)
                          set cr_bFound = TRUE
                      endif
                  endwhile
              endif
           endif
    endwhile

    ;If building a request, add the status block
    if (mode = 1)
        call dq_add_line("1  status_data")
        call dq_add_line("2  status  = c1")
        call dq_add_line("2  subeventstatus[1]")
        call dq_add_line("3  operationname = c15")
        call dq_add_line("3  operationstatus = c1")
        call dq_add_line("3  targetobjectname = c15")
        call dq_add_line("3  targetobjectvalue = vc")
    endif

    ;Finish up the request
    call dq_add_line(")  with persistscript")
    call dq_end_query(null)
    ;call dq_echo_query(1)
    call dq_execute(null)
  
    ;+CP001 
    if (cr_hInst)
      call uar_SrvDestroyInstance(cr_hInst)
      set cr_hInst = 0
    endif
    ;-CP001    
    
    return(TRUE)
  end


  subroutine cr_popStack(dummyVar)
  /***********************************
  * Pop top off of Stack             *
  *----------------------------------*
  * Inputs:  None                    *
  *                                  *
  * Outputs: None                    *
  ************************************/

    ;Decrement the stack pointer
    set cr_lCnt = cr_lCnt - 1

    ;Decrement the level
    set cr_lLevel = cr_lLevel - 1
  end


  subroutine cr_pushStack(hVal, lVal)
  /***********************************
  * Push item on to Stack            *
  *----------------------------------*
  * Inputs:  hVal = i4               *
  * Inputs:  lVal = i4               *
  *                                  *
  * Outputs: None                    *
  ************************************/

    ;Increment the stack pointer
    set cr_lCnt = cr_lCnt + 1

    if (mod(cr_lCnt, 10) = 1 and cr_lCnt != 1)
        set stat = alterlist(cr_stack->list, cr_lCnt + 9)
    endif

    ; add value to the top of the stack
    set cr_stack->list[cr_lCnt]->hInst = hVal
    set cr_stack->list[cr_lCnt]->sIterator = lVal
  end

endif

;Generated by GNU enscript 1.6.4.
