 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_valid_ctrl_grp_data/glb_get_valid_ctrl_grp_data.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_get_valid_ctrl_grp_data.prg
        Object name:            glb_get_valid_ctrl_grp_data
        Request #:              257591

        Product:                PathNet                             
        Product Team:           General Lab      
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Get all control_group data.
                                
        Tables read:            control_material,
                                control_lot,
                                resource_lot_r,
                                assay_resource_lot,
                                data_map,
                                resource_group,
                                qc_group_crtl_resource
        
        Executing from:         QC Benchmark dll 

        Special Notes:          None                                                                                

******************************************************************************/

 
;~DB~****************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG                  *
;    ****************************************************************************
;    *                                                                          *
;    *Mod Date     Engineer             Comment                                 *
;    *--- -------- -------------------- --------------------------------------- *
;     001 06/16/05 Scott Sundahl        Initial release                         *
;~DE~****************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program glb_get_valid_ctrl_grp_data:dba go
create program glb_get_valid_ctrl_grp_data:dba


/****************************************************************************
* Declarations                                                              *
*****************************************************************************/

/*
record request
(
)
*/

record reply
(
  1 controls [*]
    2 control_id                  = f8
    2 short_description           = c20
    2 resources [*]
      3 service_resource_cd       = f8
      3 service_resource_disp     = c40
      3 control_group_cd          = f8
      3 procedures [*]
        4 task_assay_cd           = f8
        4 task_assay_disp         = c40
        4 min_digits              = i4
        4 max_digits              = i4
        4 min_dec_places          = i4
%i cclsource:status_block.inc
)

%i cclsource:pcs_resource_security.inc

call InitResourceSecurity(1)

declare dTempServRes              = f8 with protect, noconstant(0.0)
declare lCount                    = i4 with protect, noconstant(0)
declare lCount2                   = i4 with protect, noconstant(0)
declare lCount3                   = i4 with protect, noconstant(0)
declare lCount4                   = i4 with protect, noconstant(0)
declare lPosition                 = i4 with protect, noconstant(0)
declare lDataMapLevel             = i4 with protect, noconstant(0)
declare nServResSecPassed         = i2 with protect, noconstant(false)
declare dSubsectionCd             = f8 with protect, noconstant(0.0)

set dSubsectionCd = uar_get_code_by("MEANING", 223, "SUBSECTION")

set reply->status_data.status = "F"

/****************************************************************************
* Populate reply                                                            *
*****************************************************************************/

select into "nl:"
  qc_join_success = evaluate(nullind(qc.qc_group_ctrl_resource_id), false, true, false)

from control_material cm,
     control_lot cl,
     resource_lot_r rlr,
     assay_resource_lot arl,
     qc_group_ctrl_resource qc,
     (dummyt d with seq = 1)

plan cm

join cl where cl.control_id = cm.control_id 
          and cnvtdatetime(curdate, curtime3) between cl.receive_dt_tm and cl.expiration_dt_tm
          
join rlr where rlr.lot_id = cl.lot_id 

join arl where arl.lot_id = rlr.lot_id 
           and arl.service_resource_cd = rlr.service_resource_cd
           and arl.active_ind = 1
; use a CCL outerjoin here since we are outerjoining to two different tables
join d where d.seq = 1

join qc where qc.service_resource_cd = rlr.service_resource_cd 
          and qc.control_id = cm.control_id 
          and qc.active_ind = 1
          and cnvtdatetime(curdate, curtime3) between qc.beg_effective_dt_tm and qc.end_effective_dt_tm 
          
order by cm.control_id,
         rlr.service_resource_cd,
         arl.task_assay_cd 
         
head cm.control_id 
  lCount = lCount + 1
  stat = alterlist(reply->controls, lCount)
  lCount2 = 0
  nServResSecPassed = false 

head rlr.service_resource_cd 
  dTempServRes = rlr.service_resource_cd
  if (dTempServRes != 0.0)
    if (IsResourceViewable(dTempServRes) = true)
      nServResSecPassed = true 
      lCount2 = lCount2 + 1
      if (lCount2 > size(reply->controls[lCount]->resources, 5))
        stat = alterlist(reply->controls[lCount]->resources, lCount2 + 9)
      endif
      reply->controls[lCount].resources[lCount2].service_resource_cd = rlr.service_resource_cd 
      if (qc_join_success = true)
        reply->controls[lCount].resources[lCount2].control_group_cd = qc.control_group_cd 
      endif
    endif
  endif
  lCount3 = 0
  
head arl.task_assay_cd 
  if (nServResSecPassed = true and arl.mean > 0.0)
    lCount3 = lCount3 + 1
    if (lCount3 > size(reply->controls[lCount]->resources[lCount2]->procedures, 5))
      stat = alterlist(reply->controls[lCount]->resources[lCount2]->procedures, lCount3 + 9)
    endif
    reply->controls[lCount].resources[lCount2].procedures[lCount3].task_assay_cd = arl.task_assay_cd
  endif
  
foot rlr.service_resource_cd
  if (lCount3 > 0)
    stat = alterlist(reply->controls[lCount]->resources[lCount2]->procedures, lCount3)
  endif

foot cm.control_id 
  if (lCount2 = 0)
    stat = alterlist(reply->controls, lCount - 1, lCount - 1)
    lCount = lCount - 1
  else
    reply->controls[lCount].control_id = cm.control_id 
    reply->controls[lCount].short_description = cm.short_description 
    stat = alterlist(reply->controls[lCount]->resources, lCount2)
  endif 
  
with nocounter,
     outerjoin = d

/****************************************************************************
* Retrieve data map information                                             *
*****************************************************************************/

set lCount = 0
set lCount2 = 0
set lCount3 = 0

if (size(reply->controls, 5) > 0)

  for (lCount = 1 to size(reply->controls, 5))

    for (lCount2 = 1 to size(reply->controls[lCount].resources, 5))

      select into "nl:"
        rg_join_success = evaluate(nullind(rg.parent_service_resource_cd), false, true, false)
      
      from data_map dm,
           resource_group rg
           
      plan dm where expand(lCount3, 1, size(reply->controls[lCount]->resources[lCount2]->procedures, 5), 
                           dm.task_assay_cd, reply->controls[lCount]->resources[lCount2]->procedures[lCount3].task_assay_cd)
                and dm.data_map_type_flag +0 in (0, 1)
                and dm.active_ind +0 = 1
      
      join rg where rg.child_service_resource_cd = outerjoin(reply->controls[lCount]->resources[lCount2].service_resource_cd)
                and rg.parent_service_resource_cd = outerjoin(dm.service_resource_cd)
                and rg.resource_group_type_cd = outerjoin(dSubsectionCd)
                and rg.root_service_resource_cd = outerjoin(0.0)

      head dm.task_assay_cd 
        lDataMapLevel = 0
      
      detail
        lPosition = locateval(lCount4, 1, size(reply->controls[lCount]->resources[lCount2]->procedures, 5), 
                              dm.task_assay_cd, reply->controls[lCount]->resources[lCount2]->procedures[lCount4].task_assay_cd)
        if (lDataMapLevel <= 3 and dm.data_map_type_flag = 1 and dm.service_resource_cd > 0.0 and 
            dm.service_resource_cd = reply->controls[lCount]->resources[lCount2].service_resource_cd)
          lDataMapLevel = 4
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].max_digits = dm.max_digits 
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].min_digits = dm.min_digits 
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].min_dec_places = dm.min_decimal_places
        endif
        ;* Check for exact match on data map
        if (lDataMapLevel <= 2 and dm.data_map_type_flag = 0 and 
            dm.service_resource_cd > 0.0 and 
            dm.service_resource_cd = reply->controls[lCount]->resources[lCount2].service_resource_cd)
          lDataMapLevel = 3
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].max_digits = dm.max_digits
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].min_digits = dm.min_digits
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].min_dec_places = dm.min_decimal_places
        endif
        ;* Check for subsection level data map
        if (lDataMapLevel <= 1 and dm.data_map_type_flag = 0 and dm.service_resource_cd > 0.0 and 
            rg_join_success = true and rg.parent_service_resource_cd = dm.service_resource_cd and 
            rg.child_service_resource_cd = reply->controls[lCount]->resources[lCount2].service_resource_cd)
          lDataMapLevel = 2
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].max_digits = dm.max_digits
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].min_digits = dm.min_digits
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].min_dec_places = dm.min_decimal_places
        endif
        ;* Check for default all resources level data map
        if (lDataMapLevel = 0 and dm.data_map_type_flag = 0 and dm.service_resource_cd = 0.0)
          lDataMapLevel = 1
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].max_digits = dm.max_digits
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].min_digits = dm.min_digits
          reply->controls[lCount]->resources[lCount2]->procedures[lPosition].min_dec_places = dm.min_decimal_places
        endif        

      with nocounter
      

    endfor

  endfor

endif

if (lCount > 0)
  set reply->status_data.status = "S"
else
  set reply->status_data.status = "Z"
endif

#EXIT_SCRIPT

end 

go

;Generated by GNU enscript 1.6.4.
