 ;;Solution_Test/script/PathNet -- Gen Lab/glb_util_equation/glb_util_equation.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_UTIL_EQUATION.PRG
        Object name:            GLB_UTIL_EQUATION
        Request #:              

        Product:                General Lab           
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Run this utility to fill out the postfix
                                column on the equation table.

        Tables read:            equation, equation_component

        Tables updated:         equation

        Executing from:         read me step

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 11/14/97 Kevin Brunner        Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_UTIL_EQUATION:dba go    
      create program GLB_UTIL_EQUATION:dba
     
/********************************************************************/
/* Internal Record						    */
/********************************************************************/

      record equation_list
      (
         1 equations[*]
           2 equation_id               = f8
           2 description               = c200
           2 equation_postfix          = c200
           2 dup_component             = i2
           2 component[*]
             3 name                    = c50
      )

     record temp_string
      (
          1 new_string           = c200
          1 equation             = c200
          1 new_equation         = c200
      )

     #Script
      set equation_cnt = 0
      set ec_cnt = 0
      set failed = "F"
      set i = 0
      set j = 0
      set k = 0
      set srchstat = 0
      set const_quote = '"'

;THE FOLLOWING CODE CHANGES THE EQUATION TO A POSTFIX FORMAT
      declare iret = i4 
      set inbuff = fillstring(200," ") 
      set obuff = fillstring(200," ") 
      declare inlen = i4 
      declare olen = i4 
      set olen = 200 
      declare uar_eparser(inbuff,inlen,obuff,olen) = i2
   
/********************************************************************/
/* Select equations         					    */
/********************************************************************/
      select into "nl:"
         e.equation_id
        ,e.equation_description
        ,ec.name
      from
         equation e
        ,equation_component ec
      plan e
       where
         e.equation_id > 0
      join ec
       where
         e.equation_id = ec.equation_id

      order 
        e.equation_id

      HEAD REPORT
         equation_cnt = 0
         ec_cnt = 0

      head e.equation_id
         equation_cnt = equation_cnt + 1          
         if (mod(equation_cnt,40) = 1)
            stat =  alterlist(equation_list->equations,equation_cnt + 40)
         endif
         equation_list->equations[equation_cnt]->equation_id = e.equation_id
         equation_list->equations[equation_cnt]->description = e.equation_description
         equation_list->equations[equation_cnt]->equation_postfix = " "
         ec_cnt = 0

      DETAIL
         ec_cnt = ec_cnt + 1          
         if (mod(ec_cnt,4) = 1)
            stat =  alterlist(equation_list->equations[equation_cnt]->component,ec_cnt + 4)
         endif
         equation_list->equations[equation_cnt]->component[ec_cnt]->name = ec.name

      foot e.equation_id
         stat = alterlist(equation_list->equations[equation_cnt]->component, ec_cnt)

      WITH
         nocounter

      if (curqual = 0)
         go to exit_script
      endif
      set stat = alterlist(equation_list->equations, equation_cnt)

      for (i = 1 to equation_cnt)
        set ec_cnt = size(equation_list->equations[i]->component, 5)
        set found = 0
        for (j = 1 to ec_cnt)
          for (k = 1 to ec_cnt)
            if (j != k)
              set srchstat = FINDSTRING((TRIM(equation_list->equations[i]->component[j]->name)),
                                        (TRIM(equation_list->equations[i]->component[k]->name)))
;call echo(TRIM(equation_list->equations[i]->component[j]->name))
;call echo(TRIM(equation_list->equations[i]->component[k]->name))
;call echo(srchstat)
              if (srchstat > 0)
                set found = 1
              endif
            endif
          endfor
        endfor
        if (found = 1)
;call echo ("Y")
;call echo (equation_list->equations[i]->equation_id)
          set equation_list->equations[i]->dup_component = 1
        else
          set equation_list->equations[i]->dup_component = 0
        endif
      endfor

/********************************************************************/
/* Set the equation for postfix if possible			    */
/********************************************************************/

      for (i = 1 to equation_cnt)
        set inbuff = fillstring(200," ") 
        set obuff = fillstring(200," ") 
        if ((equation_list->equations[i]->dup_component)= 0)
          set ec_cnt = size(equation_list->equations[i]->component, 5)
          set temp_string->equation = TRIM(equation_list->equations[i]->description)
          for (j = 1 to ec_cnt)
            set temp_string->new_string = BUILD(const_quote,
                                            (equation_list->equations[i]->component[j]->name),
                                             const_quote)
            set temp_string->new_equation = REPLACE(TRIM(temp_string->equation),
                                                    TRIM(equation_list->equations[i]->component[j]->name),
                                                    TRIM(temp_string->new_string),
                                                     0)
            set temp_string->equation = temp_string->new_equation
          endfor
          set equation_list->equations[i]->description = temp_string->equation
          set inbuff = equation_list->equations[i]->description
;call echo(inbuff)
          set inlen = TEXTLEN(TRIM(equation_list->equations[i]->description))
          set olen = 200
          set iret = uar_eparser(inbuff,inlen,obuff,olen) 
          if ((iret > 0) and (olen > 0))
            set equation_list->equations[i]->equation_postfix = obuff
          else
            set equation_list->equations[i]->equation_postfix = " "
          endif
;call echo(build("olen = ", olen))
;call echo(build("iret = ", iret))
;call echo(obuff)
        endif
      endfor

/********************************************************************/
/*  Update into equation table the new postfix value	    */
/********************************************************************/

      update into
         equation e
        ,(dummyt d1 with seq = value(equation_cnt))
      set 
        e.equation_postfix = TRIM(equation_list->equations[d1.seq]->equation_postfix)
      plan d1
      join e
        where e.equation_id = equation_list->equations[d1.seq]->equation_id
      with
        nocounter

      go to exit_script

/********************************************************************/ 
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         commit
      else
         rollback
      endif
END
GO     

;Generated by GNU enscript 1.6.4.
