 ;;Solution_Test/script/PathNet -- Common Services/ACCESSION_GENERATE/ACCESSION_GENERATE.PRG Turn on black mode

;;
;; File:  accession_generate.prg
;; Description: Batch accession assignment.
;; Request Nbr: 265059
;;
;;-----------------------------------------------------------------------------
;; Date                  Feature    Description
;; -------- -----------  ---------- -------------------------------------------
;; 07/01/99 CERGYL             6255 File creation.
;; 04/14/04 CERGYL            xxxxx UTC and sequence generation fixes.
;; 07/19/04 CERGYL            xxxxx Fix duplicate accession numbers.
;;

drop program accession_generate:dba go
create program accession_generate:dba

record reply
(
 1 accession_status        = i4
 1 accession_meaning       = vc
 1 qual[*]
   2 accession             = c20
   2 accession_id          = f8
   2 accession_formatted   = c25
%I CCLSOURCE:STATUS_BLOCK.INC
)

%I CCLSOURCE:ACCESSION_COMMON.INC

set reply->status_data->status = "Z"
set reqinfo->commit_ind = 0

declare acc_date = q8
if (request->quantity = 0)
  set accession_status = ACC_ERROR
  set accession_meaning = "No accessions requested"
  go to EXIT_SCRIPT
endif

set sequence_length = JULIAN_SEQUENCE_LENGTH
if (request->accession_format_cd > 0)
  set sequence_length = PREFIX_SEQUENCE_LENGTH
endif

set increment_value = 1
set acc_seq_number = 0

;*
;* Get the increment value and sequence for the bucket from the accession pool.
;*

if (request->accession_sequence_nbr > acc_seq_number)
  set acc_seq_number = request->accession_sequence_nbr
endif

;call echo(build("First acc_seq = ", acc_seq_number))
select into "nl:" aa.accession_seq_nbr, aa.increment_value
from accession_assignment aa
where aa.acc_assign_pool_id = request->accession_pool_id
  and aa.acc_assign_date = cnvtdatetimeutc (request->acc_assign_date, 2)
 
detail
  if (aa.accession_seq_nbr > acc_seq_number)
    acc_seq_number = aa.accession_seq_nbr
  endif

  increment_value = aa.increment_value
with nocounter, forupdatewait(aa)
;call echo(build("Second acc_seq= ", acc_seq_number))
;call echo(curqual)
if (curqual = 0)

  select into "nl:" aap.increment_value, aap.initial_value
  from accession_assign_pool aap
  where aap.accession_assignment_pool_id = request->accession_pool_id
 
  detail
    increment_value = aap.increment_value
    if (acc_seq_number = 0)
       acc_seq_number = aap.initial_value
     endif
  with nocounter
;call echo(build("Third acc_seq = ", acc_seq_number))
 
  if (curqual = 0)
    set assignment_status = ACC_TEMPLATE
    set assignment_meaning =  "Error getting accession pool information"
    go to EXIT_SCRIPT
  endif

  if (cnvtdatetimeutc(request->acc_assign_date) = null)
     set iYear = (request->accession_year)
     set iDay =  (request->accession_day) 
     set SDATE  =  build("01-JAN-", iYear, " 12:00:00") 
     ;call echo(sdate)  

     set DATE_3 = CNVTDATE2(SDATE, "DD-MMM-YYYY")  

     ;call echo(date_3)  

     set acc_date = cnvtdatetime(date_3 + iDay-1, curtime3)  
     
  else
     set acc_date = cnvtdatetimeutc (request->acc_assign_date, 2)
  endif
 
  ;call echo(format(cnvtdatetime(acc_date), ";;q"))  
  insert into accession_assignment aa
    set aa.acc_assign_pool_id = request->accession_pool_id,
        aa.acc_assign_date = cnvtdatetimeutc(acc_date),
        aa.accession_seq_nbr = acc_seq_number,
        aa.increment_value = increment_value,
        aa.last_increment_dt_tm = cnvtdatetime (curdate, curtime3),
        aa.updt_dt_tm = cnvtdatetime (curdate, curtime3),
        aa.updt_id = reqinfo->updt_id,
        aa.updt_task = reqinfo->updt_task,
        aa.updt_applctx = reqinfo->updt_applctx,
        aa.updt_cnt = 0
  with nocounter
 
  if (curqual = 0)
    set assignment_status = ACC_POOL
    set assignment_meaning =  "Error inserting accession pool on the accession_assignment table"
    go to EXIT_SCRIPT
  endif
endif
                
set acc_cnt = 0
set accession_id = 0.0

for (i = 1 to request->quantity)

  set acc_loop = 1
  while (acc_loop = 1)

    set accession_chk->accession = fillstring (20, " ")
    set accession_chk->accession_nbr_check = fillstring (50, " ")

    set accession_chk->accession = 
        concat (trim (accession_chk->accession), trim (request->accession),
                cnvtstring (acc_seq_number, value (sequence_length), 0, r))

    set accession_chk->accession_nbr_check = 
        concat (trim (accession_chk->accession_nbr_check), request->accession_nbr_check, 
                cnvtstring (acc_seq_number, value (sequence_length), 0, r))

    set accession_chk->check_disp_ind = 0
    set accession_chk->site_prefix_cd = request->site_prefix_cd
    set accession_chk->accession_year = request->accession_year
    set accession_chk->accession_day = request->accession_day
    set accession_chk->accession_pool_id = request->accession_pool_id
    set accession_chk->accession_seq_nbr = acc_seq_number
    set accession_chk->accession_class_cd = 0
    set accession_chk->accession_format_cd = request->accession_format_cd
    set accession_chk->alpha_prefix = request->alpha_prefix
    set accession_chk->action_ind = 0
    set accession_chk->preactive_ind = 0
    set accession_chk->assignment_ind = request->assignment_ind

    execute accession_check

    if (accession_status = ACC_SUCCESS)
      if (accession_dup_id = 0 and accession_id > 0)
        set acc_loop = 0
        set acc_cnt = acc_cnt + 1

        if (acc_cnt > size (reply->qual, 5))
          set stat = alterlist (reply->qual, acc_cnt + 10)
        endif
        set reply->qual[acc_cnt].accession = accession_chk->accession
        set reply->qual[acc_cnt].accession_id = accession_id
        set reply->qual[acc_cnt].accession_formatted = 
            uar_fmt_accession (accession_chk->accession, size (accession_chk->accession))
      endif

    elseif (accession_status != ACC_DUPLICATE)
      go to EXIT_SCRIPT
    endif

    set acc_seq_number = acc_seq_number + increment_value

  endwhile

endfor

set stat = alterlist (reply->qual, acc_cnt)
set accession_status = ACC_SUCCESS
        
#EXIT_SCRIPT

set reply->accession_status = accession_status
set reply->accession_meaning = accession_meaning

if (accession_status = ACC_SUCCESS)
  set reqinfo->commit_ind = 1
  set reply->status_data->status = "S"
else
  set reply->status_data->status = "F"
endif

end go

;Generated by GNU enscript 1.6.4.
