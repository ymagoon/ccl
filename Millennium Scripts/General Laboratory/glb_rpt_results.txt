 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_results/glb_rpt_results.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2000 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       GLB_RPT_RESULTS.PRG
        Object name:            GLB_RPT_RESULTS
        Request #:              250109

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Produce a daily activity report showing
                                General Lab resulted activity.

        Tables read:            accession
                                container_accession
                                code_value
                                container
                                control_lot
                                control_material
                                data_map
                                discrete_task_assay
                                encounter
                                long_text
                                orders
                                order_comment
                                order_laboratory
                                perform_result
                                person
                                person_alias
                                profile_task_r
                                prsnl
                                qc_comment
                                qc_result
                                qc_result_event
                                resource_group
                                result
                                result_comment
                                result_event

        Tables updated:         none

        Executing from:         General Lab application

        Special Notes:          n/a

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 08/16/96 Newton Hughes        Initial Release                     *
;     001 09/19/97 Gayla Benson         Add linear, feasible, & dilution.   *
;                     Reformatted report to make result column wide enough. *
;    *002 09/19/97 Hal Patchen          Add autoverification logic          *
;    *003 10/13/97 Jeff Fry             Add sub-section service_resource_cd *
;                                       to sub-section logic.               *
;    *004 11/14/97 Hal Patchen          Add subsection level data map check *
;    *005 12/08/97 Hal Patchen          Add MRN & Accn number formatting    *
;    *006 12/12/97 Kevin Brunner        Add QC auto verify logic            *
;    *007 05/05/98 Hal Patchen          Verify subsection level data map    *
;    *                                  is associated with route test site  *
;    *008 01/26/99 Hal Patchen          Correct the printing of performed   *
;    *                                  result values.                      *
;    *009 04/21/99 Chad Moats           Resplaced code_value joins with uar *
;    *010 06/08/99 Gary Runde           Display org name and discharged     *
;    *011 12/10/99 Hal Patchen          Fix processing of repeated results  *
;    *012 07/15/99 Laura Pott           Internationalization                *
;    *    12/13/99 Jack Moore           Merged I18n code from mod above into*
;    *                                  production code.                    *
;    *013 01/31/00 Hal Patchen          Add sub-sort option by service      *
;    *                                  resource or patient name.           *
;    *014 10/15/01 Saeed Zafar          Allow orders of Activity type HLA to*
;    *                                  qualify for the reports if they are *
;    *                                  associated with the selected test   *
;    *                                  site.                               *
;    *015 01/08/02 Ahti Rovainen        Order by for each head              *
;    *                                  +0 to suppress undesired indices    *
;    *016 12/18/01 Mike Gabrick         Correct truncation of display.      *
;    *                                  Sort by person_name and person_id   *
;    *                                  in case same name exists.           *
;    *017 03/08/02 Sara Grice		    Added glb_act_type_found_ind        *
;    *         					        variable to ensure that cv_cnt is   *
;    *					                incremented correctly.              *
;    *018 09/11/02 Mark Brooks          Added service resource security.    *
;    *017 07/15/03 Nirmal Sanganee      Print corr_in-review results's      *
;    *                                  previous verified result for report *
;    *020 08/20/03           			updated print report join from      *
;    *									person to prsnl						*
;    *021 10/08/04 Scott Sundahl        Ensure "Accepted" results show up on*
;    *                                  the report                          *
;    *022 07/11/07 Ryan Manuel          Added file_name to the reply and    *
;    *                                  now return it to print on front end *
;    *                                  instead of spooling on the backend  *
;    *019 08/13/07 Scott Haven          Added HLX functionality to the script *
;                                       as well as scientific notation      *
;    *020 04/17/08 Oliver Barbara       Added code to handle letter size    *
;                                       printing                            *
;    *021 07/28/08 Rahul Deshmukh       Added code to include interp text flag *
;                                       in bldstr function                  *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
;013 cclseclogin go                                                          ;009
             drop program GLB_RPT_RESULTS:dba go
             create program GLB_RPT_RESULTS:dba

      /***********************************************************************
      * Internationalization                                                 *
      ***********************************************************************/
      ;* I18N INCLUDE FILE   
%i cclsource:pcs_format_age.inc                                        ;012
%i cclsource:i18n_uar.inc                                              ;012
%i CCLSOURCE:GLB_SCRIPT_LOGGING.INC                                    ;016
set LOG_PROGRAM_NAME = "glb_rpt_results"                               ;016
      ;* INITIALIZE VARIABLE THAT KEEPS HANDLE TO I18N DATA            ;012
         set i18nHandle = 0                                            ;012
                                                                       ;012
      ;* CALL uar_i18nlocalizationinit                                 ;012
      set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev) ;012
                                                                       ;012
      record I18N_Captions                                             ;012
      (                                                                ;012
         1  text_not_fnd                 = vc                          ;012
         1  DAR                          = vc                          ;012
         1  SECTION                      = vc                          ;012
         1  SUBSECTION                   = vc                          ;012
         1  Y                            = vc                          ;012
         1  N                            = vc                          ;012
         1  zero                         = vc                          ;012
         1  fifnin                       = vc                          ;012
         1  not_fnd                      = vc                          ;012
         1  qc_info                      = vc                          ;012
         1  perf                         = vc                          ;012
         1  access                       = vc                          ;012
         1  proc                         = vc                          ;012
         1  tech_id                      = vc                          ;012
         1  title                        = vc                          ;012
         1  to_                          = vc                          ;012
         1  dr_                          = vc                          ;012
         1  demo                         = vc                          ;012
         1  orderable                    = vc                          ;012
         1  performed                    = vc                          ;012
         1  priority                     = vc                          ;012
         1  result                       = vc                          ;012
         1  time                         = vc                          ;012
         1  rpt                          = vc                          ;012
         1  date                         = vc                          ;012
         1  dir                          = vc                          ;012
         1  tm                           = vc                          ;012
         1  by_                          = vc                          ;012
         1  pg                           = vc                          ;012
         1  instit                       = vc                          ;012
         1  dept                         = vc                          ;012
         1  sect                         = vc                          ;012
         1  sub_sect                     = vc                          ;012
         1  tst_ste                      = vc                          ;012
         1  unknown                      = vc                          ;012
         1  ord_cmnt                     = vc                          ;012
         1  ord_note                     = vc                          ;012
         1  rslt_note                    = vc                          ;012
         1  rslt_cmnt                    = vc                          ;012
         1  txt_rslt                     = vc                          ;012
         1  interp_text_flag             = vc                          ;012
      )                                                                ;012
         declare LOCALE = vc with protect, noconstant( "" )
         set LOCALE = cnvtupper(logical("CCL_LANG"))
         if (LOCALE = "")
           set LOCALE = cnvtupper(logical("LANG"))
         endif
         set LOCALE = substring(1, 5, LOCALE)
         declare localeObjectName = 
             vc with protect, noconstant("EN_US")       
         if(LOCALE != localeObjectName)  
           set request->letter_size_ind = 0
         endif                                                          
         set perf_ver =                                                ;012
"                                                                                PERFORMED             VERIFIED"  ;012
         set perf_ver2 =                                               ;012
"                                                           PERFORMED             VERIFIED"  ;012
         set I18N_captions->ord_cmnt =                                 ;012
           uar_i18ngetmessage(i18nHandle,"ord_cmnt"," Order Comment:") ;012
         set I18N_captions->ord_note =                                 ;012
           uar_i18ngetmessage(i18nHandle,"ord_note"," Order Note:")    ;012
         set I18N_captions->rslt_note =                                ;012
           uar_i18ngetmessage(i18nHandle,"rslt_note"," Result Note:")  ;012
         set I18N_captions->rslt_cmnt =                                ;012
           uar_i18ngetmessage(i18nHandle,"rslt_cmnt",                  ;012
           " Result Comment:")                                         ;012
         set I18N_captions->txt_rslt =                                 ;012
           uar_i18ngetmessage(i18nHandle,"txt_rslt"," Text Result:")   ;012
         set I18N_Captions->text_not_fnd =                             ;012
           uar_i18ngetmessage(i18nHandle,"text_not_fnd",               ;012
           "Textual Result Not Found")                                 ;012
         set I18N_Captions->DAR =                                      ;012
           uar_i18ngetmessage(i18nHandle,"key_1","DAR")                ;012
         set I18N_Captions->SECTION =                                  ;012
           uar_i18ngetmessage(i18nHandle,"key_2","SECTION")            ;012
         set I18N_Captions->SUBSECTION =                               ;012
           uar_i18ngetmessage(i18nHandle,"key_3","SUBSECTION")         ;012
         set I18N_Captions->Y =                                        ;012
           uar_i18ngetmessage(i18nHandle,"key_4","Y")                  ;012
         set I18N_Captions->N =                                        ;012
           uar_i18ngetmessage(i18nHandle,"key_29","N")                 ;012
         set I18N_Captions->zero =                                     ;012
           uar_i18ngetmessage(i18nHandle, "zero",":00.00")             ;012
         set I18N_Captions->fifnin =                                   ;012
           uar_i18ngetmessage(i18nHandle, "fifnin",":59.99")           ;012
         set I18N_Captions->not_fnd =                                  ;012
           uar_i18ngetmessage(i18nHandle, "not_fnd","Not Found")       ;012
         set I18N_Captions->qc_info =                                  ;012
           uar_i18ngetmessage(i18nHandle, "qc_info","QC INFORMATION")  ;012
         set I18N_Captions->perf =                                     ;012
           uar_i18ngetmessage(i18nHandle, "perf",perf_ver)             ;012
         set I18N_Captions->access =                                   ;012
           uar_i18ngetmessage(i18nHandle, "access",                    ;012
           "           ACCESSION #       TEST SITE")                   ;012
         set I18N_Captions->proc =                                     ;012
           uar_i18ngetmessage(i18nHandle, "proc",                      ;012
           "  PROCEDURE       RESULT             ")                    ;012
         if(LOCALE = localeObjectName)
         set I18N_Captions->tech_id =                                  ;012
           uar_i18ngetmessage(i18nHandle, "tech_id",                   ;012
           "              TECH ID   DATE   TIME TECH ID   DATE   TIME") ;012
           set I18N_Captions->time =                                     ;012
           uar_i18ngetmessage(i18nHandle, "time",                      ;012
           "              TECH ID   DATE   TIME TECH ID   DATE   TIME") ;012
         else
           set I18N_Captions->tech_id =                                  
           uar_i18ngetmessage(i18nHandle, "tech_id",                   
           "              TECH ID    DATE     TIME  TECH ID   DATE     TIME") 
           set I18N_Captions->time =                                     
           uar_i18ngetmessage(i18nHandle, "time",                       
           "              TECH ID   DATE     TIME  TECH ID    DATE    TIME")  
         endif  
         set I18N_Captions->title =                                 
           uar_i18ngetmessage(i18nHandle, "title","ACTIVITY REPORT")   ;012
         set I18N_Captions->to_ =                                      ;012
           uar_i18ngetmessage(i18nHandle, "to_"," to  ")               ;012
         set I18N_Captions->dr_ =                                      ;012
           uar_i18ngetmessage(i18nHandle, "dr_","DR. ")                ;012
         set I18N_Captions->demo =                                     ;012
           uar_i18ngetmessage(i18nHandle, "demo","DEMOGRAPHICS")       ;012
         set I18N_Captions->orderable =                                ;012
           uar_i18ngetmessage(i18nHandle, "orderable",                 ;012
           "ORDERABLE/    ACCESSION # /               ")               ;012
         set I18N_Captions->performed =                                ;012
           uar_i18ngetmessage(i18nHandle, "performed",perf_ver2)       ;012
         set I18N_Captions->priority =                                 ;012
           uar_i18ngetmessage(i18nHandle, "priority",                  ;012
           "PRIORITY      COLLECT DATE/TIME    TEST SITE ")            ;012
           
         if(request->letter_size_ind = 1)  
             set I18N_Captions->result =
               uar_i18ngetmessage(i18nHandle, "result",
               "  PROCEDURE           RESULT             ")
         else
             set I18N_Captions->result =                               ;012
               uar_i18ngetmessage(i18nHandle, "result",                ;012
               "  PROCEDURE       RESULT             ")                ;012
         endif
         
         
         set I18N_Captions->rpt =                                      ;012
           uar_i18ngetmessage(i18nHandle, "rpt",                       ;012
           "REPORT:  GLB_RPT_RESULTS.PRG")                             ;012
         set I18N_Captions->date =                                     ;012
           uar_i18ngetmessage(i18nHandle, "date","DATE:")              ;012
         set I18N_Captions->dir =                                      ;012
           uar_i18ngetmessage(i18nHandle, "dir","DIRECTORY:")          ;012
         set I18N_Captions->tm =                                       ;012
           uar_i18ngetmessage(i18nHandle, "tm","TIME:")                ;012
         set I18N_Captions->by_ =                                      ;012
           uar_i18ngetmessage(i18nHandle, "by_","  BY:")               ;012
         set I18N_Captions->pg =                                       ;012
           uar_i18ngetmessage(i18nHandle, "pg","PAGE:")                ;012
         set I18N_Captions->instit =                                   ;012
           uar_i18ngetmessage(i18nHandle, "instit","INSTITUTION:")     ;012
         set I18N_Captions->dept =                                     ;012
           uar_i18ngetmessage(i18nHandle, "dept","DEPARTMENT:")        ;012
         set I18N_Captions->sect =                                     ;012
           uar_i18ngetmessage(i18nHandle, "sect","SECTION:")           ;012
         set I18N_Captions->sub_sect =                                 ;012
           uar_i18ngetmessage(i18nHandle, "sub_sect","SUB SECTION:")   ;012
         set I18N_Captions->tst_ste =                                  ;012
           uar_i18ngetmessage(i18nHandle, "tst_ste","TEST SITE:")      ;012
         set I18N_Captions->unknown =                                  ;012
           uar_i18ngetmessage(i18nHandle, "unknown","Unknown")         ;012
         set I18N_Captions->interp_text_flag =                         ;012
           uar_i18ngetmessage(i18nHandle, "interp_text_flag","(t)")    ;012

      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  dt_tm_begin                  = dq8
         1  dt_tm_end                    = dq8
         1  service_resource_cd          = f8
         1  sub_sort_flag                = i2                          ;013
            ;* 0 = service resource hierarchy (default)                ;013
            ;* 1 = patient name                                        ;013
         1  printer_name                 = vc
         1  batch_selection              = vc
         1  output_dist                  = vc
         1  ops_date                     = dq8
         1  resource_sec_ind             = i2                          ;018
         1  letter_size_ind              = i2
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      (
        1 file_name = vc
%i cclsource:status_block.inc
      )

      /***********************************************************************
      * Internal Record Structures                                           *
      ***********************************************************************/
      record test_site
      (
         1  qual[*]
            2  service_resource_cd       = f8
            2  inst_cd                   = f8
            2  inst_disp                 = vc
            2  dept_cd                   = f8
            2  dept_disp                 = vc
            2  sect_cd                   = f8
            2  sect_disp                 = vc
            2  subsect_cd                = f8
            2  subsect_disp              = vc
            2  ts_cd                     = f8
            2  ts_disp                   = vc
            2  serv_res_hier_seq         = i4
      )

      record ts_sort
      (
         1  key1                      = vc
         1  key2                      = vc
         1  service_resource_cd       = f8
         1  inst_cd                   = f8
         1  inst_disp                 = vc
         1  dept_cd                   = f8
         1  dept_disp                 = vc
         1  sect_cd                   = f8
         1  sect_disp                 = vc
         1  subsect_cd                = f8
         1  subsect_disp              = vc
         1  ts_cd                     = f8
         1  ts_disp                   = vc
      )

      record actvty_type
      (
         1  qual[*]
            2  activity_type_cd      = f8              ;014
      )


      ;* Array of results that fall within the specified time frame and
      ;* which are verified or corrected.
      record perf_results
      (
         1  qual[*]
            2  result_id                 = f8
            2  perform_result_id         = f8
            2  service_resource_cd       = f8
            2  task_assay_cd             = f8
            2  detail_mnemonic           = vc
            2  accession                 = vc
            2  order_id                  = f8
            2  catalog_cd                = f8
            2  drawn_dt_tm               = c12
            2  result_type_cd            = f8
            2  data_map_ind              = i2
            2  max_digits                = i4
            2  min_decimal_places        = i4
            2  min_digits                = i4
            2  long_text_id              = f8
            2  long_text                 = vc
            2  inst_cd                   = f8
            2  inst_disp                 = vc
            2  dept_cd                   = f8
            2  dept_disp                 = vc
            2  sect_cd                   = f8
            2  sect_disp                 = vc
            2  subsect_cd                = f8
            2  subsect_disp              = vc
            2  ts_cd                     = f8
            2  ts_disp                   = vc
            2  serv_res_hier_seq         = i4
            2  sci_notation_ind          = i2
            2  drawn_dt_tm_locale        = c15
      )

      ;* Lists the qc results that fall within the specified time frame and
      ;* which are verified, corrected, rejected, or changed.
      record qc_results
      (
         1  qual[*]
            2  qc_result_id              = f8
            2  control_id                = f8
            2  lot_id                    = f8
            2  service_resource_cd       = f8
            2  task_assay_cd             = f8
            2  accession_id              = f8
            2  control_name              = c20
            2  lot_number                = c20
            2  detail_mnemonic           = vc
            2  result_type_cd            = f8
            2  data_map_ind              = i2
            2  max_digits                = i4
            2  min_decimal_places        = i4
            2  min_digits                = i4
            2  inst_cd                   = f8
            2  inst_disp                 = vc
            2  dept_cd                   = f8
            2  dept_disp                 = vc
            2  sect_cd                   = f8
            2  sect_disp                 = vc
            2  subsect_cd                = f8
            2  subsect_disp              = vc
            2  ts_cd                     = f8
            2  ts_disp                   = vc
      )

      ;* Array containing the most recent chartable and non-chartable
      ;* qc result comments.
      record qc_comments
      (
         1  qual[*]
            2  qc_result_id              = f8
            2  comment_exists            = c1
            2  comment_text              = vc
            2  note_exists               = c1
            2  note_text                 = vc
      )

      ;* Report display fields used to determine page breaks.
      record rpt
      (
         1  inst_disp                    = vc
         1  dept_disp                    = vc
         1  sect_disp                    = vc
         1  subsect_disp                 = vc
         1  ts_disp                      = vc
      )

%i cclsource:glb_rpt_subs.inc
%i cclsource:pcs_resource_security.inc                                 ;018

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
        execute accrtl_sci_note
         set reply->status_data.status = "F"

         declare CV_REQUIRED_RECS               = i4 with protect, constant(3)
         declare ACTIVITY_TYPE_HLA_CDF          = vc with protect, constant("HLA")
         declare ACTIVITY_TYPE_CODESET          = i4 with protect, constant(106)
         declare ACTIVITY_TYPE_HLX_CDF          = vc with protect, constant("HLX")
         declare ACTIVITY_TYPE_GLB_CDF          = vc with protect, constant("GLB")
         declare RESULT_STATUS_CODESET          = i4 with protect, constant(1901)
         declare COMMENT_TYPE_CODESET           = i4 with protect, constant(14)
         declare SERVICE_RESOURCE_TYPE_CODESET  = i4 with protect, constant(223)
         declare RESULT_TYPE_CODESET            = i4 with protect, constant(289)
         declare RESULT_FLAG_CODE_SET           = i4 with protect, constant(1902)

         declare cv_cnt                     = i4 with protect, noconstant(0)
         declare alias_type_mrn_cd          = f8 with protect, noconstant(0.0)
         declare corrinrev_cd               = f8 with protect, noconstant(0.0)
         declare performed_cd               = f8 with protect, noconstant(0.0)
         declare oldperformed_cd            = f8 with protect, noconstant(0.0)
         declare verified_cd                = f8 with protect, noconstant(0.0)
         declare oldverified_cd             = f8 with protect, noconstant(0.0)
         declare autoverified_cd            = f8 with protect, noconstant(0.0)
         declare oldautoverified_cd         = f8 with protect, noconstant(0.0)
         declare corrected_cd               = f8 with protect, noconstant(0.0)
         declare oldcorrected_cd            = f8 with protect, noconstant(0.0)
         declare rejected_cd                = f8 with protect, noconstant(0.0)
         declare changed_cd                 = f8 with protect, noconstant(0.0)
         declare accepted_cd                = f8 with protect, noconstant(0.0)
         declare order_comment_cd           = f8 with protect, noconstant(0.0)
         declare order_note_cd              = f8 with protect, noconstant(0.0)
         declare result_comment_cd          = f8 with protect, noconstant(0.0)
         declare result_note_cd             = f8 with protect, noconstant(0.0)
         declare qc_footnote_cd             = f8 with protect, noconstant(0.0)
         declare qc_review_note_cd          = f8 with protect, noconstant(0.0)
         declare serv_res_institution_cd    = f8 with protect, noconstant(0.0)
         declare serv_res_department_cd     = f8 with protect, noconstant(0.0)
         declare serv_res_section_cd        = f8 with protect, noconstant(0.0)
         declare serv_res_subsection_cd     = f8 with protect, noconstant(0.0)
         declare result_type_numeric_cd     = f8 with protect, noconstant(0.0)
         declare result_type_calc_cd        = f8 with protect, noconstant(0.0)
         declare result_flag_in_control_cd  = f8 with protect, noconstant(0.0)
         declare result_flag_checked_cd     = f8 with protect, noconstant(0.0)
         declare result_flag_out_control_cd = f8 with protect, noconstant(0.0)
         declare normal_high_cd             = f8 with protect, noconstant(0.0)
         declare normal_low_cd              = f8 with protect, noconstant(0.0)
         declare alp_abnormal_cd            = f8 with protect, noconstant(0.0)
         declare critical_cd                = f8 with protect, noconstant(0.0)
         declare alp_critical_cd            = f8 with protect, noconstant(0.0)
         declare review_cd                  = f8 with protect, noconstant(0.0)
         declare alp_review_cd              = f8 with protect, noconstant(0.0)
         declare linear_cd                  = f8 with protect, noconstant(0.0)
         declare feasible_cd                = f8 with protect, noconstant(0.0)
         declare delta_fail_cd              = f8 with protect, noconstant(0.0)
         declare qc_override_cd             = f8 with protect, noconstant(0.0)
         declare notify_cd                  = f8 with protect, noconstant(0.0)
         declare alp_notify_cd              = f8 with protect, noconstant(0.0)
         declare discharged_cd              = f8 with protect, noconstant(0.0)
         declare resultflagstr              = vc with protect, noconstant(" ")
         declare qc_hdg3                    = vc with protect, noconstant(" ")
         declare qc_hdg5                    = vc with protect, noconstant(" ")
         declare p_hdg5                     = vc with protect, noconstant(" ")
         declare p_hdg3                     = vc with protect, noconstant(" ")
         declare pat_loc                    = vc with protect, noconstant(" ")
         ;* Operations
         declare batch_selection_cd = f8 with protect, noconstant(0.0)

         set sub_sort_flag                = 0                          ;013
         if (validate(request->sub_sort_flag, -1) = -1)                ;013
            set sub_sort_flag = 0                                      ;013
         else                                                          ;013
            set sub_sort_flag = request->sub_sort_flag                 ;013
         endif                                                         ;013
         set serv_res_level_flag          = 0
         set nbr_ts                       = 0
         set nbr_actvty_types             = 0
         set nbr_prs                      = 0
         set nbr_o_comments               = 0
         set nbr_qcs                      = 0
         set paramarray[5] = fillstring(15, " ")
         set prev_lot_nbr = fillstring(20, " ")                        ;001

         set i = 0         ; used to index report_data array
         set offset = 0    ; position within a report_data row to insert a
                           ; report item
         set hyphen_line = fillstring(125, "-")

         ;* Keep track of next row to put detail on,
         ;* next row to put comment on
         set main_row = 0
         set order_row = 0
         set detail_row = 0
         set cdf_string = fillstring(100, " ")                         ;jpm
      	 set username = I18N_Captions->not_fnd                         ;012
         declare dServiceResourceCd = f8 with protect, noconstant(0.0) ;018
         declare interp_flag = vc with protect, noconstant(" ")


      /***********************************************************************
      * Select needed code values                                            *
      ***********************************************************************/
         set result_flag_in_control_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "IN_CONTROL")
         set result_flag_checked_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "CHECKED")
         set result_flag_out_control_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "OUT_CONTROL")
         set performed_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "PERFORMED")
         set oldperformed_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "OLDPERFORMED")
         set verified_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "VERIFIED")
         set corrinrev_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "CORRINREV")
         set oldverified_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "OLDVERIFIED")
         set autoverified_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "AUTOVERIFIED")
         set oldautoverified_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "OLDAUTOVERF")
         set corrected_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "CORRECTED")
         set oldcorrected_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "OLDCORRECTED")
         set changed_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "CHANGE")
         set rejected_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "REJECT")
         set accepted_cd = uar_get_code_by("MEANING", RESULT_STATUS_CODESET, "ACCEPT")
         set alias_type_mrn_cd = uar_get_code_by("MEANING", 319, "MRN")
         set order_comment_cd = uar_get_code_by("MEANING", COMMENT_TYPE_CODESET, "ORD COMMENT")
         set order_note_cd = uar_get_code_by("MEANING", COMMENT_TYPE_CODESET, "ORD NOTE")
         set result_comment_cd = uar_get_code_by("MEANING", COMMENT_TYPE_CODESET, "RES COMMENT")
         set result_note_cd = uar_get_code_by("MEANING", COMMENT_TYPE_CODESET, "RES NOTE")
         set qc_footnote_cd = uar_get_code_by("MEANING", COMMENT_TYPE_CODESET, "QC FTNT")
         set qc_review_note_cd = uar_get_code_by("MEANING", COMMENT_TYPE_CODESET, "QC RVNT")
         set serv_res_institution_cd = uar_get_code_by("MEANING", SERVICE_RESOURCE_TYPE_CODESET, "INSTITUTION")
         set serv_res_department_cd = uar_get_code_by("MEANING", SERVICE_RESOURCE_TYPE_CODESET, "DEPARTMENT")
         set serv_res_section_cd = uar_get_code_by("MEANING", SERVICE_RESOURCE_TYPE_CODESET, "SECTION")
         set serv_res_subsection_cd = uar_get_code_by("MEANING", SERVICE_RESOURCE_TYPE_CODESET, "SUBSECTION")
         set result_type_numeric_cd = uar_get_code_by("MEANING", RESULT_TYPE_CODESET, "3")
         set result_type_calc_cd = uar_get_code_by("MEANING", RESULT_TYPE_CODESET, "8")
         set normal_high_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "NORMAL_HIGH")
         set normal_low_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "NORMAL_LOW")
         set alp_abnormal_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "ALP_ABNORMAL")
         set critical_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "CRITICAL")
         set alp_critical_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "ALP_CRITICAL")
         set review_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "REVIEW")
         set alp_review_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "ALP_REVIEW")
         set linear_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "LINEAR")
         set feasible_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "FEASIBLE")
         set delta_fail_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "DELTA_FAIL")
         set qc_override_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "QC_OVERRIDE")
         set notify_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "NOTIFY")
         set alp_notify_cd = uar_get_code_by("MEANING", RESULT_FLAG_CODE_SET, "ALP_NOTIFY")
         set discharged_cd = uar_get_code_by("MEANING", 261, "DISCHARGED")
         
         select into "nl:"
           cv.code_value
         from
           code_value cv
         where cv.code_set = ACTIVITY_TYPE_CODESET
           and cv.cdf_meaning in (ACTIVITY_TYPE_GLB_CDF, ACTIVITY_TYPE_HLA_CDF, ACTIVITY_TYPE_HLX_CDF)
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
         head report								;017
           glb_act_type_found_ind = 0						;017
         detail
           case (cv.cdf_meaning)
           of ACTIVITY_TYPE_GLB_CDF:
             nbr_actvty_types = nbr_actvty_types + 1
             stat = alterlist(actvty_type->qual, nbr_actvty_types)
             actvty_type->qual[nbr_actvty_types].activity_type_cd = cv.code_value
             if (glb_act_type_found_ind = 0)				;017
               cv_cnt = cv_cnt + 1
               glb_act_type_found_ind = 1				;017
             endif
           of ACTIVITY_TYPE_HLA_CDF:                                                    ;014
             nbr_actvty_types = nbr_actvty_types + 1                  ;014
             cv_cnt = cv_cnt + 1                                       ;014
             stat = alterlist(actvty_type->qual, nbr_actvty_types)    ;014
             actvty_type->qual[nbr_actvty_types].activity_type_cd = cv.code_value

           of ACTIVITY_TYPE_HLX_CDF:                                                    ;014
             nbr_actvty_types = nbr_actvty_types + 1                  ;014
             cv_cnt = cv_cnt + 1                                       ;014
             stat = alterlist(actvty_type->qual, nbr_actvty_types)    ;014
             actvty_type->qual[nbr_actvty_types].activity_type_cd = cv.code_value
           endcase
         with nocounter
      
         ;* Verify that all required code value records were read.
         if (cv_cnt != CV_REQUIRED_RECS)
            go to Exit_Script
         endif

      /***********************************************************************
      * Load operations parameter list                                       *
      ***********************************************************************/
         if (trim(request->batch_selection) > " ")
            set batch_selection_cd = cnvtreal(trim(request->batch_selection))
            set parm_string = fillstring(100, " ")

            select into "nl:"
              cv.code_value
            from
              code_value cv
            ;where cv.code_value = batch_selection_cd                                      ;jpm
                where cv.code_set = 1950 and cv.active_ind = 1                             ;jpm
                and trim(cv.display_key) = trim(cnvtupper(cnvtalphanum(request->batch_selection)))        ;jpm
            detail
                   cdf_string = trim(cv.cdf_meaning)                                       ;jpm
               parm_string = trim(cv.definition)
            with
               nocounter

            if (curqual = 0)
                select into "nl:"
                        cv.code_value
                from
                        code_value cv
                where cv.code_set = 1950 and cv.active_ind = 1                             ;jpm
                and cv.code_value = batch_selection_cd                                     ;jpm
                detail
                        cdf_string = trim(cv.cdf_meaning)                                       ;jpm
                        parm_string = trim(cv.definition)
                with
                nocounter
                if (curqual = 0)
                        set reply->status_data->status = "Z"
                        go to Exit_Script
                endif
            endif

;**********************jpm
                if (cdf_string != "DAR")
                   set reply->status_data->status = "F"
                   set reply->status_data->subeventstatus[1]->operationname = "select"
                   set reply->status_data->subeventstatus[1]->operationstatus = "F"
                   set reply->status_data->subeventstatus[1]->targetobjectname = "code_value"
                   set reply->status_data->subeventstatus[1]->targetobjectvalue =
                                "selected display_key's cdf_meaning <> DAR"
                        go to Exit_Script
                endif
;**********************jpm

            ;* Locate the individual parameters in parm_string
            ;* and put them in the ops_params array.
            set ptr = 1
            set start_ptr = 1
            set param_idx = 1
;013             for (param_idx = 1 TO 3)
            for (param_idx = 1 TO 4)                                   ;013
               set ptr = findstring(",", parm_string, start_ptr)
               if (ptr < 1)
                  set ptr = 100
               endif
               set parm_len = ptr - start_ptr
;013                set ops_params->qual[param_idx].param =
      
               ;Check that the length is not negative before attempting to use it
               if(parm_len > 0) 
                 set paramarray[param_idx]=                              ;013
                   trim(substring(start_ptr, value(parm_len), parm_string), 3)
               endif
      
               set start_ptr = ptr + 1
            endfor

            ; The 5th parameter may not be present if the parameters were stored before
            ; the scripts were updated.
            if (size(trim(substring(start_ptr, 1, parm_string))) > 0) 
                set paramarray[5] = trim(substring(start_ptr, 1, parm_string))
                set start_ptr = start_ptr + 2
            else 
                set paramarray[5] = "0"
            endif

            ;* Use array of ops parameters to set request fields.
;013             set request->service_resource_cd =
;013               cnvtreal(ops_params->qual[1].param)
            set request->service_resource_cd =                         ;013
              cnvtreal(paramarray[1])                                  ;013
            set request->printer_name = request->output_dist
;012           set todays_date = format(request->ops_date, "dd-mmm-yyyy;;d")
            set todays_date =                                          ;012
              format(request->ops_date, "@MEDIUMDATE4YR;;Q")           ;012
            set date_begin_string = concat(todays_date, " ",
;012              trim(ops_params->qual[2].param, 3), ":00.00")
;013              trim(ops_params->qual[2].param, 3), I18N_Captions->zero) ;012
              trim(paramarray[2], 3), I18N_Captions->zero)             ;013
            set date_end_string = concat(todays_date, " ",
;012              trim(ops_params->qual[3].param, 3), ":59.99")
;013               trim(ops_params->qual[3].param, 3), I18N_Captions->fifnin) ;012
              trim(paramarray[3], 3), I18N_Captions->fifnin)           ;013
            set request->dt_tm_begin = cnvtdatetime(date_begin_string)
            if (request->dt_tm_begin > request->ops_date)
               set request->dt_tm_begin = datetimeadd(request->dt_tm_begin, -1)
            endif
            set request->dt_tm_end = cnvtdatetime(date_end_string)
            if (request->dt_tm_end > request->ops_date)
               set request->dt_tm_end = datetimeadd(request->dt_tm_end, -1)
            endif
            if (request->dt_tm_begin > request->dt_tm_end)
               set request->dt_tm_begin = datetimeadd(request->dt_tm_begin, -1)
            endif
            if (trim(paramarray[4], 3) = "0"                           ;013
            or  trim(paramarray[4], 3) = "1")                          ;013
               set sub_sort_flag =                                     ;013
                 cnvtint(trim(paramarray[4], 3))                       ;013
            endif                                                      ;013

            set request->letter_size_ind = cnvtint(trim(paramarray[5]))
            if(LOCALE != localeObjectName)  
              set request->letter_size_ind = 0
            endif
         endif

      /***********************************************************************
      * Determine if the service resource passed is a section, subsection,   *
      * or test site.  Note: Service resource of 0.0 means print activity    *
      * for all testing sites.                                               *
      ***********************************************************************/
         call InitResourceSecurity(request->resource_sec_ind)          ;018

         if (request->service_resource_cd = 0.0)
            set serv_res_level_flag = 3  ;* All Sections
         else
            select into "nl:"
               cv.code_value
            from
               code_value cv
            where cv.code_value = request->service_resource_cd
            detail
               case (cv.cdf_meaning)
                 of "SECTION":
                    serv_res_level_flag = 2
                 of "SUBSECTION":
                    serv_res_level_flag = 1
                 else
                    serv_res_level_flag = 0
                    stat = alterlist(test_site->qual, 1)
                    test_site->qual[1].service_resource_cd =
                          request->service_resource_cd
                    nbr_ts = 1
               endcase
            with
              nocounter

            if (curqual = 0)
               set reply->status_data->status = "Z"
               go to Exit_Script
            endif
         endif


      /***********************************************************************
      * Load the testing sites associated with the service resource passed in*
      * based on its resource level.                                         *
      ***********************************************************************/
         if (serv_res_level_flag != 0)
            if (serv_res_level_flag = 1)  ;* Process subsection
               select into "nl:"
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group subsect
               where subsect.parent_service_resource_cd =
                                          request->service_resource_cd
                 and subsect.resource_group_type_cd = serv_res_subsection_cd
                 and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;018
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;018
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.parent_service_resource_cd
                  endif                                                         ;018
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;018
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;018
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.child_service_resource_cd
                  endif                                                         ;018
               with
                  nocounter
            elseif (serv_res_level_flag = 2)  ;* Process section
               select into "nl:"
                  sect.parent_service_resource_cd,
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group sect,
                  resource_group subsect
               plan sect    where sect.resource_group_type_cd =
                                            serv_res_section_cd
                              and sect.parent_service_resource_cd =
                                            request->service_resource_cd
                              and sect.root_service_resource_cd+0 = 0.0
               join subsect where subsect.parent_service_resource_cd =
                                            sect.child_service_resource_cd
                              and subsect.resource_group_type_cd =
                                            serv_res_subsection_cd
                              and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;018
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;018
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.parent_service_resource_cd
                  endif                                                         ;018
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;018
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;018
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.child_service_resource_cd
                  endif                                                         ;018
               with
                  nocounter
            elseif (serv_res_level_flag = 3)  ;* Process all sections
               ;* If no service resource was passed, load all test sites
               ;* under all sections.
               select into "nl:"
                  sect.parent_service_resource_cd,
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group sect,
                  resource_group subsect
               plan sect    where sect.resource_group_type_cd =
                                            serv_res_section_cd
                              and sect.root_service_resource_cd = 0.0
               join subsect where subsect.parent_service_resource_cd =
                                            sect.child_service_resource_cd
                              and subsect.resource_group_type_cd =
                                            serv_res_subsection_cd
                              and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;018
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;018
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.parent_service_resource_cd
                  endif                                                         ;018
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;018
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;018
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.child_service_resource_cd
                  endif                                                         ;018
               with
                  nocounter
            endif

            if (nbr_ts = 0)
               set reply->status_data->status = "Z"
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Load the institution, department, section, subsection,and test site  *
      * names associated with each testing site.                             *
      ***********************************************************************/
         select into "nl:"
            d1.seq,
;009            cv_ts.display,
            d2.seq,
            subsect_exists = decode(subsect.seq, "Y", "N"),
            subsect.parent_service_resource_cd,
            subsect.child_service_resource_cd,
;009            cv_subsect.display,
            d3.seq,
            sect_exists = decode(sect.seq, "Y", "N"),
            sect.parent_service_resource_cd,
            sect.child_service_resource_cd,
;009            cv_sect.display,
            d4.seq,
            dept_exists = decode(dept.seq, "Y", "N"),
            dept.parent_service_resource_cd,
            dept.child_service_resource_cd,
;009            cv_dept.display,
            d5.seq,
            inst_exists = decode(inst.seq, "Y", "N"),
            inst.parent_service_resource_cd,
            inst.child_service_resource_cd
;009            cv_inst.display

         from
            (dummyt d1 with seq = value(nbr_ts)),
;009            code_value cv_ts,
            (dummyt d2 with seq = 1),
            resource_group subsect,
;009            code_value cv_subsect,
            (dummyt d3 with seq = 1),
            resource_group sect,
;009            code_value cv_sect,
            (dummyt d4 with seq = 1),
            resource_group dept,
;009            code_value cv_dept,
            (dummyt d5 with seq = 1),
            resource_group inst
;009            code_value cv_inst

         plan d1
;009         join cv_ts   where cv_ts.code_value =
;009                               test_site->qual[d1.seq].service_resource_cd
         join d2      where d2.seq = 1
;003         join subsect where subsect.child_service_resource_cd =
;003                               test_site->qual[d1.seq].service_resource_cd
         join subsect where (subsect.child_service_resource_cd =        ;003
                           test_site->qual[d1.seq].service_resource_cd  ;003
                          or subsect.parent_service_resource_cd =       ;003
                           test_site->qual[d1.seq].service_resource_cd) ;003
                        and subsect.resource_group_type_cd =
                               serv_res_subsection_cd
                        and subsect.root_service_resource_cd = 0.0
                        and subsect.active_ind = 1
                        and cnvtdatetime(curdate, curtime) between subsect.beg_effective_dt_tm and 
                            subsect.end_effective_dt_tm

;009         join cv_subsect where cv_subsect.code_value =
;009                               subsect.parent_service_resource_cd
         join d3      where d3.seq = 1
         join sect    where sect.child_service_resource_cd =
                               subsect.parent_service_resource_cd
                        and sect.resource_group_type_cd =
                               serv_res_section_cd
                        and sect.root_service_resource_cd = 0.0
;009         join cv_sect where cv_sect.code_value = sect.parent_service_resource_cd
         join d4      where d4.seq = 1
         join dept    where dept.child_service_resource_cd =
                               sect.parent_service_resource_cd
                        and dept.resource_group_type_cd =
                               serv_res_department_cd
                        and dept.root_service_resource_cd = 0.0
;009         join cv_dept where cv_dept.code_value = dept.parent_service_resource_cd
         join d5      where d5.seq = 1
         join inst    where inst.child_service_resource_cd =
                               dept.parent_service_resource_cd
                        and inst.resource_group_type_cd =
                               serv_res_institution_cd
                        and inst.root_service_resource_cd = 0.0
;009         join cv_inst where cv_inst.code_value = inst.parent_service_resource_cd

         detail
;013            test_site->qual[d1.seq].serv_res_hier_seq = d1.seq
;009            if (cv_ts.code_value > 0.0)
            if (test_site->qual[d1.seq].service_resource_cd > 0.0)              ;009
;009               test_site->qual[d1.seq].ts_cd = cv_ts.code_value
               test_site->qual[d1.seq].ts_cd =
                 test_site->qual[d1.seq].service_resource_cd                    ;009
               test_site->qual[d1.seq].ts_disp =
                 trim(substring(1,40,UAR_GET_CODE_DISPLAY(test_site->qual[d1.seq].service_resource_cd)), 3)  ;009
;009                 trim(substring(1, 40, cv_ts.display), 3)
            else
               test_site->qual[d1.seq].ts_cd = 0.0
;012               test_site->qual[d1.seq].ts_disp = "Not Found"
               test_site->qual[d1.seq].ts_disp = I18N_Captions->not_fnd ;012
            endif
            if (subsect_exists = "Y"
            and subsect.parent_service_resource_cd > 0.0)                       ;009
;009            and cv_subsect.code_value > 0.0)
;009               test_site->qual[d1.seq].subsect_cd = cv_subsect.code_value
               test_site->qual[d1.seq].subsect_cd =                             ;009
                   subsect.parent_service_resource_cd                           ;009
               test_site->qual[d1.seq].subsect_disp =
                   trim(substring(1,15,UAR_GET_CODE_DISPLAY(subsect.parent_service_resource_cd)), 3) ;009
;009                 trim(substring(1, 40, cv_subsect.display), 3)
            else
               test_site->qual[d1.seq].subsect_cd = 0.0
;012               test_site->qual[d1.seq].subsect_disp = "Not Found"
               test_site->qual[d1.seq].ts_disp = I18N_Captions->not_fnd ;012
            endif
            if (sect_exists = "Y"
              and sect.parent_service_resource_cd > 0.0)
;009            and cv_sect.code_value > 0.0)
;009               test_site->qual[d1.seq].sect_cd = cv_sect.code_value
               test_site->qual[d1.seq].sect_cd = sect.parent_service_resource_cd
               test_site->qual[d1.seq].sect_disp =
                 trim(substring(1,40,UAR_GET_CODE_DISPLAY(sect.parent_service_resource_cd)), 3)  ;009
;009                 trim(substring(1, 40, cv_sect.display), 3)
            else
               test_site->qual[d1.seq].sect_cd = 0.0
;012               test_site->qual[d1.seq].sect_disp = "Not Found"
               test_site->qual[d1.seq].subsect_disp = I18N_Captions->not_fnd ;012
            endif
            if (dept_exists = "Y"
            and dept.parent_service_resource_cd > 0.0)                          ;009
;009            and cv_dept.code_value > 0.0)
;009               test_site->qual[d1.seq].dept_cd = cv_dept.code_value
               test_site->qual[d1.seq].dept_cd = dept.parent_service_resource_cd ;009
               test_site->qual[d1.seq].dept_disp =
                 trim(substring(1,40,UAR_GET_CODE_DISPLAY(dept.parent_service_resource_cd)), 3)  ;009
;009                 trim(substring(1, 40, cv_dept.display), 3)
            else
               test_site->qual[d1.seq].dept_cd = 0.0
;012               test_site->qual[d1.seq].dept_disp = "Not Found"
               test_site->qual[d1.seq].sect_disp = I18N_Captions->not_fnd ;012
            endif
            if (inst_exists = "Y"
            and inst.parent_service_resource_cd > 0.0)                          ;009
;009            and cv_inst.code_value > 0.0)
;009               test_site->qual[d1.seq].inst_cd = cv_inst.code_value
               test_site->qual[d1.seq].inst_cd = inst.parent_service_resource_cd
               test_site->qual[d1.seq].inst_disp =
               trim(substring(1,40,UAR_GET_CODE_DESCRIPTION(inst.parent_service_resource_cd)), 3)     ;016
;009                 trim(substring(1, 40, cv_inst.display), 3)
            else
               test_site->qual[d1.seq].inst_cd = 0.0
;012               test_site->qual[d1.seq].inst_disp = "Not Found"
               test_site->qual[d1.seq].inst_disp = I18N_Captions->not_fnd ;012
            endif

         with
            nocounter,
            outerjoin = d2,
            maxread(subsect, 1),
            outerjoin = d3,
            maxread(sect, 1),
            outerjoin = d4,
            maxread(dept, 1),
            outerjoin = d5,
            maxread(inst, 1)

/***Debug***
         call echo("test_site array dump", 1)
         for (x = 1 to nbr_ts)
            call echo(test_site->qual[x].service_resource_cd, 1)
            call echo(build("   Institution = ", test_site->qual[x].inst_disp))
            call echo(build("   Department = ", test_site->qual[x].dept_disp))
            call echo(build("   Section = ", test_site->qual[x].sect_disp))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_disp))
            call echo(build("   Test Site = ", test_site->qual[x].ts_disp))
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Sort test_site array in alphabetical order.                          *
      ***********************************************************************/
         for (cnt = 1 to (nbr_ts - 1))
            for (cnt2 = cnt to nbr_ts)
               set ts_sort->key1 = concat(
                substring(1, 40, cnvtupper(test_site->qual[cnt].inst_disp)),
;012                format(test_site->qual[cnt].inst_cd,"###############.##;p0;f"),
                format(test_site->qual[cnt].inst_cd,"###############.##;p0;f;I;F"), ;012

                substring(1, 40, cnvtupper(test_site->qual[cnt].dept_disp)),
;012                format(test_site->qual[cnt].dept_cd,"###############.##;p0;f"),
                format(test_site->qual[cnt].dept_cd,"###############.##;p0;f;I;F"), ;012

                substring(1, 40, cnvtupper(test_site->qual[cnt].sect_disp)),
;012                format(test_site->qual[cnt].sect_cd,"###############.##;p0;f"),
                format(test_site->qual[cnt].sect_cd,"###############.##;p0;f;I;F"), ;012

                substring(1, 40, cnvtupper(test_site->qual[cnt].subsect_disp)),
;012                format(test_site->qual[cnt].subsect_cd,"###############.##;p0;f"),
                format(test_site->qual[cnt].subsect_cd,"###############.##;p0;f;I;F"), ;012

                substring(1, 40, cnvtupper(test_site->qual[cnt].ts_disp)),
;012                format(test_site->qual[cnt].ts_cd,"###############.##;p0;f"))
                format(test_site->qual[cnt].ts_cd,"###############.##;p0;f;I;F")) ;012

               set ts_sort->key2 = concat(
                substring(1, 40, cnvtupper(test_site->qual[cnt2].inst_disp)),
;012                format(test_site->qual[cnt2].inst_cd,"###############.##;p0;f"),
                format(test_site->qual[cnt2].inst_cd,"###############.##;p0;f;I;F"), ;012

                substring(1, 40, cnvtupper(test_site->qual[cnt2].dept_disp)),
;012                format(test_site->qual[cnt2].dept_cd,"###############.##;p0;f"),
                format(test_site->qual[cnt2].dept_cd,"###############.##;p0;f;I;F"), ;012

                substring(1, 40, cnvtupper(test_site->qual[cnt2].sect_disp)),
;012                format(test_site->qual[cnt2].sect_cd,"###############.##;p0;f"),
                format(test_site->qual[cnt2].sect_cd,"###############.##;p0;f;I;F"), ;012

                substring(1, 40, cnvtupper(test_site->qual[cnt2].subsect_disp)),
;012                format(test_site->qual[cnt2].subsect_cd,"###############.##;p0;f"),
                format(test_site->qual[cnt2].subsect_cd,"###############.##;p0;f;I;F"), ;012

                substring(1, 40, cnvtupper(test_site->qual[cnt2].ts_disp)),
;012                format(test_site->qual[cnt2].ts_cd,"###############.##;p0;f"))
                format(test_site->qual[cnt2].ts_cd,"###############.##;p0;f;I;F")) ;012

                if (ts_sort->key1 > ts_sort->key2)
                  set ts_sort->service_resource_cd =
                    test_site->qual[cnt].service_resource_cd
                  set ts_sort->inst_cd = test_site->qual[cnt].inst_cd
                  set ts_sort->inst_disp = test_site->qual[cnt].inst_disp
                  set ts_sort->dept_cd = test_site->qual[cnt].dept_cd
                  set ts_sort->dept_disp = test_site->qual[cnt].dept_disp
                  set ts_sort->sect_cd = test_site->qual[cnt].sect_cd
                  set ts_sort->sect_disp = test_site->qual[cnt].sect_disp
                  set ts_sort->subsect_cd = test_site->qual[cnt].subsect_cd
                  set ts_sort->subsect_disp = test_site->qual[cnt].subsect_disp
                  set ts_sort->ts_cd = test_site->qual[cnt].ts_cd
                  set ts_sort->ts_disp = test_site->qual[cnt].ts_disp
                  set test_site->qual[cnt].service_resource_cd =
                    test_site->qual[cnt2].service_resource_cd
                  set test_site->qual[cnt].inst_cd =
                    test_site->qual[cnt2].inst_cd
                  set test_site->qual[cnt].inst_disp =
                    test_site->qual[cnt2].inst_disp
                  set test_site->qual[cnt].dept_cd =
                    test_site->qual[cnt2].dept_cd
                  set test_site->qual[cnt].dept_disp =
                    test_site->qual[cnt2].dept_disp
                  set test_site->qual[cnt].sect_cd =
                    test_site->qual[cnt2].sect_cd
                  set test_site->qual[cnt].sect_disp =
                    test_site->qual[cnt2].sect_disp
                  set test_site->qual[cnt].subsect_cd =
                    test_site->qual[cnt2].subsect_cd
                  set test_site->qual[cnt].subsect_disp =
                    test_site->qual[cnt2].subsect_disp
                  set test_site->qual[cnt].ts_cd =
                    test_site->qual[cnt2].ts_cd
                  set test_site->qual[cnt].ts_disp =
                    test_site->qual[cnt2].ts_disp
;013                  set test_site->qual[cnt].serv_res_hier_seq = cnt
                  set test_site->qual[cnt2].service_resource_cd =
                    ts_sort->service_resource_cd
                  set test_site->qual[cnt2].inst_cd =
                    ts_sort->inst_cd
                  set test_site->qual[cnt2].inst_disp =
                    ts_sort->inst_disp
                  set test_site->qual[cnt2].dept_cd =
                    ts_sort->dept_cd
                  set test_site->qual[cnt2].dept_disp =
                    ts_sort->dept_disp
                  set test_site->qual[cnt2].sect_cd =
                    ts_sort->sect_cd
                  set test_site->qual[cnt2].sect_disp =
                    ts_sort->sect_disp
                  set test_site->qual[cnt2].subsect_cd =
                    ts_sort->subsect_cd
                  set test_site->qual[cnt2].subsect_disp =
                    ts_sort->subsect_disp
                  set test_site->qual[cnt2].ts_cd =
                    ts_sort->ts_cd
                  set test_site->qual[cnt2].ts_disp =
                    ts_sort->ts_disp
;013                  set test_site->qual[cnt2].serv_res_hier_seq = cnt2
               endif
            endfor
         endfor

      /***********************************************************************
      * Set the sort sequence values                                         *
      ***********************************************************************/
         set hier_seq = 0                                              ;013
         for (cnt = 1 to nbr_ts)                                       ;013
            set inst_break_ind = 0                                     ;013
            set dept_break_ind = 0                                     ;013
            set sect_break_ind = 0                                     ;013
            set subsect_break_ind = 0                                  ;013
            set ts_break_ind = 0                                       ;013
                                                                       ;013
            if (cnt = 1)                                               ;013
               set inst_break_ind = 1                                  ;013
               set dept_break_ind = 1                                  ;013
               set sect_break_ind = 1                                  ;013
               set subsect_break_ind = 1                               ;013
               set ts_break_ind = 1                                    ;013
            else                                                       ;013
               if (test_site->qual[cnt].inst_cd !=                     ;013
                             test_site->qual[cnt - 1].inst_cd)         ;013
                  set inst_break_ind = 1                               ;013
                  set dept_break_ind = 1                               ;013
                  set sect_break_ind = 1                               ;013
                  set subsect_break_ind = 1                            ;013
                  set ts_break_ind = 1                                 ;013
               endif                                                   ;013
               if (test_site->qual[cnt].dept_cd !=                     ;013
                             test_site->qual[cnt - 1].dept_cd)         ;013
                  set dept_break_ind = 1                               ;013
                  set sect_break_ind = 1                               ;013
                  set subsect_break_ind = 1                            ;013
                  set ts_break_ind = 1                                 ;013
               endif                                                   ;013
               if (test_site->qual[cnt].sect_cd !=                     ;013
                             test_site->qual[cnt - 1].sect_cd)         ;013
                  set sect_break_ind = 1                               ;013
                  set subsect_break_ind = 1                            ;013
                  set ts_break_ind = 1                                 ;013
               endif                                                   ;013
               if (test_site->qual[cnt].subsect_cd !=                  ;013
                             test_site->qual[cnt - 1].subsect_cd)      ;013
                  set subsect_break_ind = 1                            ;013
                  set ts_break_ind = 1                                 ;013
               endif                                                   ;013
               if (test_site->qual[cnt].ts_cd !=                       ;013
                             test_site->qual[cnt - 1].ts_cd)           ;013
                  set ts_break_ind = 1                                 ;013
               endif                                                   ;013
            endif                                                      ;013
                                                                       ;013
            if (inst_break_ind = 1                                     ;013
            or  dept_break_ind = 1                                     ;013
            or  sect_break_ind = 1)                                    ;013
               set hier_seq = hier_seq + 1                             ;013
            elseif (subsect_break_ind = 1)                             ;013
               if (sub_sort_flag = 0                                   ;013
               or (sub_sort_flag = 1 and serv_res_level_flag in (0,1)));013
                  set hier_seq = hier_seq + 1                          ;013
               endif                                                   ;013
            elseif (ts_break_ind = 1)                                  ;013
               if (sub_sort_flag = 0                                   ;013
               or (sub_sort_flag = 1 and serv_res_level_flag = 0))     ;013
                  set hier_seq = hier_seq + 1                          ;013
               endif                                                   ;013
            endif                                                      ;013
                                                                       ;013
            set test_site->qual[cnt].serv_res_hier_seq = hier_seq      ;013
         endfor                                                        ;013

/***Debug***
         call echo("Sorted test_site array dump", 1)
         for (x = 1 to nbr_ts)
            call echo(build("Sequence = ",test_site->qual[x].serv_res_hier_seq))
            call echo(test_site->qual[x].service_resource_cd, 1)
            call echo(build("   Institution = ", test_site->qual[x].inst_disp))
            call echo(build("   Institution = ", test_site->qual[x].inst_cd))
            call echo(build("   Department = ", test_site->qual[x].dept_disp))
            call echo(build("   Department = ", test_site->qual[x].dept_cd))
            call echo(build("   Section = ", test_site->qual[x].sect_disp))
            call echo(build("   Section = ", test_site->qual[x].sect_cd))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_disp))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_cd))
            call echo(build("   Test Site = ", test_site->qual[x].ts_disp))
            call echo(build("   Test Site = ", test_site->qual[x].ts_cd))
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Load the perform_result records that qualify for the report.         *
      ***********************************************************************/

         select into "nl:"
            re.event_dt_tm,
            re.event_type_cd,
            re.event_sequence,
            pr.perform_result_id,
            pr.service_resource_cd,
            r.result_id,
            o.order_id,
            o.catalog_cd,
            o.person_id,
            o.activity_type_cd,
            d_at.seq,
            dta.mnemonic,
            dta.sci_notation_ind,
            ptr.sequence,
            c_exists = decode(c.seq, "Y", "N"),
;012            drawn_dttm = format(c.drawn_dt_tm, "ddmmmyy hhmm;;d"),
            drawn_dttm = format(c.drawn_dt_tm, "@DATETIMECONDENSED;;Q"), ;012
            drawn_dttm_locale = format(c.drawn_dt_tm, "YYYY/MM/DD HHMM;;Q"),
            ts_disp = substring(1,40,test_site->qual[d_ts.seq].ts_disp),
            ca.accession

         from
            result_event re,
            perform_result pr,
            (dummyt d_ts with seq = value(nbr_ts)),
            result r,
            orders o,
            (dummyt d_at with seq = value(nbr_actvty_types)),
            discrete_task_assay dta,
            profile_task_r ptr,
            (dummyt d1 with seq = 1),
            container c,
            container_accession ca

         plan re   where re.event_dt_tm between cnvtdatetime(request->dt_tm_begin)
                                            and cnvtdatetime(request->dt_tm_end)
                     and re.event_type_cd in (corrected_cd,
                                              autoverified_cd,         ;002
                                              verified_cd,
                                              corrinrev_cd)
         join pr   where pr.perform_result_id = re.perform_result_id       ;011
                     and pr.result_status_cd in (verified_cd, corrected_cd, autoverified_cd,
					                               oldverified_cd, oldcorrected_cd, oldautoverified_cd)
         join d_ts where test_site->qual[d_ts.seq].service_resource_cd =
                            pr.service_resource_cd
         join r    where r.result_id = pr.result_id
         join o    where o.order_id = r.order_id
         join d_at where actvty_type->qual[d_at.seq].activity_type_cd =    ;014
                           o.activity_type_cd
         join dta  where dta.task_assay_cd = r.task_assay_cd
         join ptr  where ptr.catalog_cd = o.catalog_cd
                     and ptr.task_assay_cd = dta.task_assay_cd
         join d1   where d1.seq = 1
         join c    where c.container_id = pr.container_id
         join ca   where ca.container_id = pr.container_id

         order by
            o.person_id,
            ca.accession,
            o.catalog_cd,
            o.order_id,
            ptr.sequence,
            ts_disp,
            pr.result_id,
            pr.perform_result_id,
            re.event_sequence

         head report
            nbr_prs = 0

         head pr.result_id
            row + 0
         head pr.perform_result_id
            nbr_prs = nbr_prs + 1
            if (mod(nbr_prs, 50) = 1)
               stat = alterlist(perf_results->qual, nbr_prs + 50)
            endif
            perf_results->qual[nbr_prs].result_id =
              pr.result_id
            perf_results->qual[nbr_prs].perform_result_id =
              pr.perform_result_id
            perf_results->qual[nbr_prs].service_resource_cd =
              pr.service_resource_cd
            perf_results->qual[nbr_prs].task_assay_cd =
              r.task_assay_cd
            perf_results->qual[nbr_prs].detail_mnemonic =
              dta.mnemonic
            perf_results->qual[nbr_prs].sci_notation_ind =
              dta.sci_notation_ind
            perf_results->qual[nbr_prs].order_id =
              r.order_id
            perf_results->qual[nbr_prs].catalog_cd =
              r.catalog_cd
            if (c_exists = "Y")
               perf_results->qual[nbr_prs].drawn_dt_tm = drawn_dttm
               perf_results->qual[nbr_prs].drawn_dt_tm_locale = drawn_dttm_locale
;005               perf_results->qual[nbr_prs].accession = ca.accession
               perf_results->qual[nbr_prs].accession = uar_fmt_accession(ca.accession, size(ca.accession,1))
            else
               perf_results->qual[nbr_prs].drawn_dt_tm = ""
                perf_results->qual[nbr_prs].drawn_dt_tm_locale = ""
               perf_results->qual[nbr_prs].accession = ""
            endif
            perf_results->qual[nbr_prs].result_type_cd = pr.result_type_cd
            perf_results->qual[nbr_prs].data_map_ind = 0
            perf_results->qual[nbr_prs].max_digits = 0
            perf_results->qual[nbr_prs].min_decimal_places = 0
            perf_results->qual[nbr_prs].min_digits = 0
            perf_results->qual[nbr_prs].long_text_id = pr.long_text_id
            perf_results->qual[nbr_prs].long_text = " "
            perf_results->qual[nbr_prs].inst_cd =
              test_site->qual[d_ts.seq].inst_cd
            perf_results->qual[nbr_prs].inst_disp =
              test_site->qual[d_ts.seq].inst_disp
            perf_results->qual[nbr_prs].dept_cd =
              test_site->qual[d_ts.seq].dept_cd
            perf_results->qual[nbr_prs].dept_disp =
              test_site->qual[d_ts.seq].dept_disp
            perf_results->qual[nbr_prs].sect_cd =
              test_site->qual[d_ts.seq].sect_cd
            perf_results->qual[nbr_prs].sect_disp =
              test_site->qual[d_ts.seq].sect_disp
            perf_results->qual[nbr_prs].subsect_cd =
              test_site->qual[d_ts.seq].subsect_cd
            perf_results->qual[nbr_prs].subsect_disp =
              test_site->qual[d_ts.seq].subsect_disp
            perf_results->qual[nbr_prs].ts_cd =
              test_site->qual[d_ts.seq].ts_cd
            perf_results->qual[nbr_prs].ts_disp =
              test_site->qual[d_ts.seq].ts_disp
            perf_results->qual[nbr_prs].serv_res_hier_seq =
              test_site->qual[d_ts.seq].serv_res_hier_seq

         detail
            row+0

         foot report
            stat = alterlist(perf_results->qual, nbr_prs)

         with
            nocounter,
            outerjoin = d1

/***Debug***
         call echo(build("nbr_prs = ", nbr_prs))
         if (nbr_prs > 0)
            call echo("      result_id   perform_result_id     order_id    task_assay_cd", 1)
            for (x = 1 to nbr_prs)
               call echo(x, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].result_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].perform_result_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].order_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].task_assay_cd, 1)
            endfor
            call echo(" ", 1)
         endif
***Debug***/

      /***********************************************************************
      * Load the data_map records for numeric results.                       *
      ***********************************************************************/
         if (nbr_prs = 0)
            set stat = alter(o_comments->qual, nbr_prs)
            set stat = alter(r_comments->qual, nbr_prs)
            go to Load_QC_Results
         endif

         select into "nl:"
            d.seq,
            d1.seq,
;004            data_map_resource_exists = decode(dm.seq, "Y", "N"),
            data_map_exists = decode(dm.seq, "Y", "N"),                ;004
            dm.service_resource_cd,
            dm.task_assay_cd,
            dm.data_map_type_flag,
            dm.max_digits,
            dm.min_decimal_places,
            dm.min_digits,
            d_rg.seq,                                                  ;007
            rg_exists = decode(rg.seq, "Y", "N"),                      ;007
            rg.seq                                                     ;007
         from
            (dummyt d with seq = value(nbr_prs)),
            dummyt d1,
            data_map dm,
            (dummyt d_rg with seq = 1),                                ;007
            resource_group rg                                          ;007
         plan d    where perf_results->qual[d.seq].result_type_cd in
                       (result_type_numeric_cd, result_type_calc_cd)
         join d1   where d1.seq = 1
         join dm   where dm.task_assay_cd = perf_results->qual[d.seq]  ;004
                       .task_assay_cd
                     and dm.data_map_type_flag = 0
                     and dm.active_ind = 1
         join d_rg where d_rg.seq = 1                                  ;007
         join rg   where rg.parent_service_resource_cd =               ;007
                           dm.service_resource_cd                      ;007
                     and rg.child_service_resource_cd =                ;007
                           perf_results->qual[d.seq].service_resource_cd ;007
                     and rg.resource_group_type_cd =                   ;007
                           serv_res_subsection_cd                      ;007
                     and rg.root_service_resource_cd = 0.0             ;007
         head report
            cnt = 0
            data_map_level = 0                                         ;004

         head d.seq
            cnt = d.seq
            data_map_level = 0                                         ;004

         detail
            if (data_map_exists = "Y")                                 ;004
               ;* Check for exact match on data map                    ;004
               if (data_map_level <= 2                                 ;004
               and dm.service_resource_cd > 0.0                        ;004
               and dm.service_resource_cd = perf_results->qual[cnt]    ;004
                 .service_resource_cd)                                 ;004
                  data_map_level = 3                                   ;004
                  perf_results->qual[cnt].data_map_ind = 1             ;004
                  perf_results->qual[cnt].max_digits = dm.max_digits   ;004
                  perf_results->qual[cnt].min_digits = dm.min_digits   ;004
                  perf_results->qual[cnt].min_decimal_places =         ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
               ;* Check for subsection level data map                  ;004
               if (data_map_level <= 1                                 ;004
               and dm.service_resource_cd > 0.0                        ;004
               and rg_exists = "Y"                                     ;007
               and rg.parent_service_resource_cd =                     ;007
                        dm.service_resource_cd                         ;007
               and rg.child_service_resource_cd =                      ;007
                        perf_results->qual[cnt].service_resource_cd)   ;007
;007               and cv_dm.cdf_meaning = SERV_RES_SUBSECTION_CDF)        ;004
                  data_map_level = 2                                   ;004
                  perf_results->qual[cnt].data_map_ind = 1             ;004
                  perf_results->qual[cnt].max_digits = dm.max_digits   ;004
                  perf_results->qual[cnt].min_digits = dm.min_digits   ;004
                  perf_results->qual[cnt].min_decimal_places =         ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
               ;* Check for default all resources level data map       ;004
               if (data_map_level = 0                                  ;004
               and dm.service_resource_cd = 0.0)                       ;004
                  data_map_level = 1                                   ;004
                  perf_results->qual[cnt].data_map_ind = 1             ;004
                  perf_results->qual[cnt].max_digits = dm.max_digits   ;004
                  perf_results->qual[cnt].min_digits = dm.min_digits   ;004
                  perf_results->qual[cnt].min_decimal_places =         ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
            endif                                                      ;004

         foot d.seq
            ;* If no data_map rec found, set default map values
            if (perf_results->qual[cnt].data_map_ind = 0)
               perf_results->qual[cnt].data_map_ind = 1
               perf_results->qual[cnt].max_digits = 8
               perf_results->qual[cnt].min_decimal_places = 0
               perf_results->qual[cnt].min_digits = 1
            endif

         with
            nocounter,
            outerjoin = d1,
            dontcare = dm,
            outerjoin = d_rg,                                          ;007
            dontcare = rg                                              ;007

      /***********************************************************************
      * Load the long_text records for textual results.                      *
      ***********************************************************************/
         if (nbr_prs = 0)
            set stat = alter(o_comments->qual, nbr_prs)
            set stat = alter(r_comments->qual, nbr_prs)
            go to Load_QC_Results
         endif

         select into "nl:"
            d.seq,
            lt.long_text_id

         from
            (dummyt d with seq = value(nbr_prs)),
            long_text lt

         plan d
         join lt   where lt.long_text_id =
                       perf_results->qual[d.seq].long_text_id

         head report
%i cclsource:glb_rpt_macros.inc
            cnt = 0

         detail
            cnt = d.seq
            if (lt.long_text_id > 0.0)
               arg_text_in = fillstring(30000, " ")
               arg_text_in = trim(lt.long_text)
               rtf_to_ascii
               ;call echo(text_out, 1)
               perf_results->qual[cnt].long_text = trim(text_out)
            endif

         with
            nocounter


      /***********************************************************************
      * Load the most recent chartable and non-chartable order comments.     *
      ***********************************************************************/
         if (nbr_prs = 0)
            set stat = alter(o_comments->qual, nbr_prs)
            set stat = alter(r_comments->qual, nbr_prs)
            go to Load_QC_Results
         endif

         ;* Initialize order comment array
         select into "nl:"
            d.seq,
            ord_id = perf_results->qual[d.seq].order_id

         from
            (dummyt d with seq = value(nbr_prs))

         plan d

         order by
            ord_id

         head ord_id
            nbr_o_comments = nbr_o_comments + 1
            if (mod(nbr_o_comments, 20) = 1 and nbr_o_comments > 20)
               stat = alter(o_comments->qual, nbr_o_comments + 20)
            endif
            o_comments->qual[nbr_o_comments].order_id = ord_id
            o_comments->qual[nbr_o_comments].comment_exists = "N"
            o_comments->qual[nbr_o_comments].note_exists = "N"

         detail
            row+0

         with
            nocounter

/***Debug***
         call echo(build("nbr_o_comments = ", nbr_o_comments))
         if (nbr_o_comments > 0)
            call echo("o_comments array dump", 1)
            for (x = 1 to nbr_o_comments)
               call echo(build("Order id = ", o_comments->qual[x].order_id))
            endfor
            call echo(" ", 1)
         endif
***Debug***/

         ;* Load order comments, if any exists
         select into "nl:"
            d1.seq,
            d2.seq,
            oc_exists = decode(oc.seq, "Y", "N"),
            oc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_o_comments)),
            (dummyt d2 with seq = 1),
            order_comment oc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join oc where oc.order_id = o_comments->qual[d1.seq].order_id
                   and oc.comment_type_cd = order_comment_cd
         join lt where lt.long_text_id = oc.long_text_id

         order by
            d1.seq,
            oc.action_sequence desc

         head d1.seq
            if (oc_exists = "Y")
               o_comments->qual[d1.seq].comment_exists = "Y"
               o_comments->qual[d1.seq].comment_text = lt.long_text
            endif

         detail
            row+0

         with
            nocounter,
            outerjoin = d2

         ;* Load order notes, if any exists
         select into "nl:"
            d1.seq,
            d2.seq,
            oc_exists = decode(oc.seq, "Y", "N"),
            oc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_o_comments)),
            (dummyt d2 with seq = 1),
            order_comment oc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join oc where oc.order_id = o_comments->qual[d1.seq].order_id
                   and oc.comment_type_cd = order_note_cd
         join lt where lt.long_text_id = oc.long_text_id

         order by
            d1.seq,
            oc.action_sequence desc

         head d1.seq
            if (oc_exists = "Y")
               o_comments->qual[d1.seq].note_exists = "Y"
               o_comments->qual[d1.seq].note_text = lt.long_text
            endif

         detail
            row+0

         with
            nocounter,
            outerjoin = d2

      /***********************************************************************
      * Load the most recent chartable and non-chartable result comments.    *
      ***********************************************************************/
         set stat = alter(r_comments->qual, nbr_prs)

         ;* Load result comments
         select into "nl:"
            d1.seq,
            d2.seq,
            rc_exists = decode(rc.seq, "Y", "N"),
            rc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_prs)),
            (dummyt d2 with seq = 1),
            result_comment rc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join rc where rc.result_id = perf_results->qual[d1.seq].result_id
                   and rc.comment_type_cd = result_comment_cd
         join lt where lt.long_text_id = rc.long_text_id

         order by
            d1.seq,
            rc.action_sequence desc

         head d1.seq
            r_comments->qual[d1.seq].result_id =
              perf_results->qual[d1.seq].result_id
            if (rc_exists = "Y")
               r_comments->qual[d1.seq].comment_exists = "Y"
               r_comments->qual[d1.seq].comment_text = lt.long_text
            else
               r_comments->qual[d1.seq].comment_exists = "N"
            endif
            r_comments->qual[d1.seq].note_exists = "N"

         detail
            row+0

         with
            nocounter,
            outerjoin = d2

         ;* Load result footnotes
         select into "nl:"
            d1.seq,
            d2.seq,
            rc_exists = decode(rc.seq, "Y", "N"),
            rc.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_prs)),
            (dummyt d2 with seq = 1),
            result_comment rc,
            long_text lt

         plan d1
         join d2 where d2.seq = 1
         join rc where rc.result_id = perf_results->qual[d1.seq].result_id
                   and rc.comment_type_cd = result_note_cd
         join lt where lt.long_text_id = rc.long_text_id

         order by
            d1.seq,
            rc.action_sequence desc

         head d1.seq
            if (rc_exists = "Y")
               r_comments->qual[d1.seq].note_exists = "Y"
               r_comments->qual[d1.seq].note_text = lt.long_text
            endif

         detail
            row+0

         with
           nocounter,
           outerjoin = d2

         if (curqual = 0)
            go to Exit_Script
         endif

      /***********************************************************************
      * Load qc results if they exist.                                       *
      ***********************************************************************/
      #Load_QC_Results
      declare arl_x = i4 with protect, noconstant(0)
      declare arl_val = i4 with protect, noconstant(0)
         select into "nl:"
            qc_r.qc_result_id,
            qc_g.accession_id,
            cm.short_description,
            cl.lot_number,
            lot_nbr = substring(1, 20, cl.lot_number),
            dta.mnemonic

         from
            assay_resource_lot arl,
            qc_result qc_r,
            qc_result_grp qc_g,
            control_material cm,
            control_lot cl,
            discrete_task_assay dta
 
         plan arl where 
              expand(arl_x, 1, size(test_site->qual, 5), arl.service_resource_cd, test_site->qual[arl_x].service_resource_cd)
         join qc_r  where qc_r.task_assay_cd = arl.task_assay_cd
                      and qc_r.service_resource_cd = arl.service_resource_cd
                      and qc_r.result_status_cd in (verified_cd, autoverified_cd, 
                                                    corrected_cd, rejected_cd, changed_cd,
                                                    accepted_cd)
                      and qc_r.result_control_cd in (result_flag_in_control_cd,
                                                     result_flag_checked_cd, 
                                                     result_flag_out_control_cd)
                      and qc_r.event_dt_tm between cnvtdatetime(request->dt_tm_begin)
                                               and cnvtdatetime(request->dt_tm_end)
         join qc_g  where qc_g.qc_group_id = qc_r.qc_group_id
         join cm    where cm.control_id = qc_r.control_id
         join cl    where cl.lot_id = qc_r.lot_id
         join dta   where dta.task_assay_cd = qc_r.task_assay_cd

         order by
            qc_r.qc_result_id

         head qc_r.qc_result_id
            nbr_qcs = nbr_qcs + 1
            stat = alterlist(qc_results->qual, nbr_qcs)
            qc_results->qual[nbr_qcs].qc_result_id = qc_r.qc_result_id
            qc_results->qual[nbr_qcs].control_id = qc_r.control_id
            qc_results->qual[nbr_qcs].lot_id = qc_r.lot_id
            qc_results->qual[nbr_qcs].service_resource_cd =
              qc_r.service_resource_cd
            qc_results->qual[nbr_qcs].task_assay_cd = qc_r.task_assay_cd
            qc_results->qual[nbr_qcs].accession_id = qc_g.accession_id
            qc_results->qual[nbr_qcs].control_name = cm.short_description
            qc_results->qual[nbr_qcs].lot_number = lot_nbr
            qc_results->qual[nbr_qcs].detail_mnemonic = dta.mnemonic
            qc_results->qual[nbr_qcs].result_type_cd = qc_r.result_type_cd
            qc_results->qual[nbr_qcs].data_map_ind = 0
            qc_results->qual[nbr_qcs].max_digits = 0
            qc_results->qual[nbr_qcs].min_decimal_places = 0
            qc_results->qual[nbr_qcs].min_digits = 0
            arl_val = 
                   locateval(arl_x, 1, size(test_site->qual,5), arl.service_resource_cd, test_site->qual[arl_x].service_resource_cd)
            qc_results->qual[nbr_qcs].inst_cd =
              test_site->qual[arl_val].inst_cd
            qc_results->qual[nbr_qcs].inst_disp =
              test_site->qual[arl_val].inst_disp
            qc_results->qual[nbr_qcs].dept_cd =
              test_site->qual[arl_val].dept_cd
            qc_results->qual[nbr_qcs].dept_disp =
              test_site->qual[arl_val].dept_disp
            qc_results->qual[nbr_qcs].sect_cd =
              test_site->qual[arl_val].sect_cd
            qc_results->qual[nbr_qcs].sect_disp =
              test_site->qual[arl_val].sect_disp
            qc_results->qual[nbr_qcs].subsect_cd =
              test_site->qual[arl_val].subsect_cd
            qc_results->qual[nbr_qcs].subsect_disp =
              test_site->qual[arl_val].subsect_disp
            qc_results->qual[nbr_qcs].ts_cd =
              test_site->qual[arl_val].ts_cd
            qc_results->qual[nbr_qcs].ts_disp =
              test_site->qual[arl_val].ts_disp

         detail
            row+0

         with
            nocounter, expand = 1

      /***********************************************************************
      * Load the data_map records for qc numeric results.                    *
      ***********************************************************************/
         if (nbr_qcs = 0)
            go to Print_Report
         endif

         select into "nl:"
            d.seq,
            d1.seq,
            data_map_exists = decode(dm.seq, "Y", "N"),                ;004
            dm.service_resource_cd,                                    ;004
            dm.task_assay_cd,                                          ;004
            dm.data_map_type_flag,                                     ;004
            dm.max_digits,                                             ;004
            dm.min_decimal_places,                                     ;004
            dm.min_digits,                                             ;004
            d_rg.seq,                                                  ;007
            rg_exists = decode(rg.seq, "Y", "N"),                      ;007
            rg.seq                                                     ;007

         from
            (dummyt d with seq = value(nbr_qcs)),
            dummyt d1,
            data_map dm,                                               ;004
            (dummyt d_rg with seq = 1),                                ;007
            resource_group rg                                          ;007
         plan d    where qc_results->qual[d.seq].result_type_cd =
                       result_type_numeric_cd
         join d1   where d1.seq = 1
         join dm   where dm.task_assay_cd = qc_results->qual[d.seq]    ;004
                       .task_assay_cd                                  ;004
                     and dm.data_map_type_flag in (0, 1)               ;004
                     and dm.active_ind = 1                             ;004
         join d_rg where d_rg.seq = 1                                  ;007
         join rg   where rg.parent_service_resource_cd =               ;007
                           dm.service_resource_cd                      ;007
                     and rg.child_service_resource_cd =                ;007
                           qc_results->qual[d.seq].service_resource_cd ;007
                     and rg.resource_group_type_cd =                   ;007
                           serv_res_subsection_cd                      ;007
                     and rg.root_service_resource_cd = 0.0             ;007
         head report
            cnt = 0
            data_map_level = 0                                         ;004

         head d.seq
            cnt = d.seq
            data_map_level = 0                                         ;004

         detail
            if (data_map_exists = "Y")                                 ;004
               ;* Check for exact match on QC data map                 ;004
               if (data_map_level <= 3                                 ;004
               and dm.data_map_type_flag = 1                           ;004
               and dm.service_resource_cd > 0.0                        ;004
               and dm.service_resource_cd = qc_results->qual[cnt]      ;004
                 .service_resource_cd)                                 ;004
                  data_map_level = 4                                   ;004
                  qc_results->qual[cnt].data_map_ind = 1               ;004
                  qc_results->qual[cnt].max_digits = dm.max_digits     ;004
                  qc_results->qual[cnt].min_digits = dm.min_digits     ;004
                  qc_results->qual[cnt].min_decimal_places =           ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
               ;* Check for exact match on data map                    ;004
               if (data_map_level <= 2                                 ;004
               and dm.data_map_type_flag = 0                           ;004
               and dm.service_resource_cd > 0.0                        ;004
               and dm.service_resource_cd = qc_results->qual[cnt]      ;004
                 .service_resource_cd)                                 ;004
                  data_map_level = 3                                   ;004
                  qc_results->qual[cnt].data_map_ind = 1               ;004
                  qc_results->qual[cnt].max_digits = dm.max_digits     ;004
                  qc_results->qual[cnt].min_digits = dm.min_digits     ;004
                  qc_results->qual[cnt].min_decimal_places =           ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
               ;* Check for subsection level data map                  ;004
               if (data_map_level <= 1                                 ;004
               and dm.data_map_type_flag = 0                           ;004
               and dm.service_resource_cd > 0.0                        ;004
               and rg_exists = "Y"                                     ;007
               and rg.parent_service_resource_cd =                     ;007
                        dm.service_resource_cd                         ;007
               and rg.child_service_resource_cd =                      ;007
                        qc_results->qual[cnt].service_resource_cd)     ;007
;007               and cv_dm.cdf_meaning = SERV_RES_SUBSECTION_CDF)        ;004
                  data_map_level = 2                                   ;004
                  qc_results->qual[cnt].data_map_ind = 1               ;004
                  qc_results->qual[cnt].max_digits = dm.max_digits     ;004
                  qc_results->qual[cnt].min_digits = dm.min_digits     ;004
                  qc_results->qual[cnt].min_decimal_places =           ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
               ;* Check for default all resources level data map       ;004
               if (data_map_level = 0                                  ;004
               and dm.data_map_type_flag = 0                           ;004
               and dm.service_resource_cd = 0.0)                       ;004
                  data_map_level = 1                                   ;004
                  qc_results->qual[cnt].data_map_ind = 1               ;004
                  qc_results->qual[cnt].max_digits = dm.max_digits     ;004
                  qc_results->qual[cnt].min_digits = dm.min_digits     ;004
                  qc_results->qual[cnt].min_decimal_places =           ;004
                    dm.min_decimal_places                              ;004
               endif                                                   ;004
            endif                                                      ;004

         foot d.seq
            ;* If no data_map rec found, set default map values
            if (qc_results->qual[cnt].data_map_ind = 0)
               qc_results->qual[cnt].data_map_ind = 1
               qc_results->qual[cnt].max_digits = 8
               qc_results->qual[cnt].min_decimal_places = 0
               qc_results->qual[cnt].min_digits = 1
            endif

         with
            nocounter,
            outerjoin = d1,
            dontcare = dm,                                             ;004
            outerjoin = d_rg,                                          ;007
            dontcare = rg                                              ;007

      /***********************************************************************
      * Load the most recent chartable and non-chartable qc result comments. *
      ***********************************************************************/
         if (nbr_qcs = 0)
            go to Print_Report
         endif

         set stat = alterlist(qc_comments->qual, nbr_qcs)

         select into "nl:"
            d1.seq,
            d2.seq,
            qc_c_exists = decode(qc_c.seq, "Y", "N"),
            qc_c.qc_result_id,
            qc_c.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_qcs)),
            (dummyt d2 with seq = 1),
            qc_comment qc_c,
            long_text lt

         plan d1
         join d2   where d2.seq = 1
         join qc_c where qc_c.qc_result_id =
                            qc_results->qual[d1.seq].qc_result_id
                     and qc_c.comment_type_cd = qc_footnote_cd
         join lt   where qc_c.long_text_id = lt.long_text_id

         order by
            d1.seq,
            qc_c.action_sequence desc

         head d1.seq
            qc_comments->qual[d1.seq].qc_result_id =
              qc_c.qc_result_id
            if (qc_c_exists = "Y")
               qc_comments->qual[d1.seq].comment_exists = "Y"
               qc_comments->qual[d1.seq].comment_text = lt.long_text
            else
               qc_comments->qual[d1.seq].comment_exists = "N"
            endif
            qc_comments->qual[d1.seq].note_exists = "N"

         detail
            row+0

         with
            nocounter,
            outerjoin = d2

         select into "nl:"
            d1.seq,
            d2.seq,
            qc_c_exists = decode(qc_c.seq, "Y", "N"),
            qc_c.qc_result_id,
            qc_c.action_sequence,
            lt.long_text_id

         from
            (dummyt d1 with seq = value(nbr_qcs)),
            (dummyt d2 with seq = 1),
            qc_comment qc_c,
            long_text lt

         plan d1
         join d2   where d2.seq = 1
         join qc_c where qc_c.qc_result_id =
                            qc_results->qual[d1.seq].qc_result_id
                     and qc_c.comment_type_cd = qc_review_note_cd
         join lt   where lt.long_text_id = qc_c.long_text_id

         order by
            d1.seq,
            qc_c.action_sequence desc

         head d1.seq
            if (qc_c_exists = "Y")
               qc_comments->qual[d1.seq].note_exists = "Y"
               qc_comments->qual[d1.seq].qc_result_id = qc_c.qc_result_id
               qc_comments->qual[d1.seq].note_text = lt.long_text
            else
               qc_comments->qual[d1.seq].note_exists = "N"
            endif

         detail
            row+0

         with
            nocounter,
            outerjoin = d2

      /***********************************************************************
      * Load report_data array with QC information so that it can be printed *
      * along with the patient results on the report.                        *
      ***********************************************************************/
         select into "nl:"
            detail_mne = trim(substring(1, 11, qc_results->qual[d_qc.seq]
              .detail_mnemonic)),
            control_name = qc_results->qual[d_qc.seq].control_name,
            lot_nbr = concat("Lot: ", qc_results->qual[d_qc.seq].lot_number),
            qc_r.qc_group_id,
            qc_r.service_resource_cd,
            alpha_result = trim(substring(1, 13, qc_r.result_value_alpha)),
            qc_r.numeric_raw_value,
            qc_r.result_value_numeric,                                 ;001
            qc_re.qc_result_id,
            qc_re.event_sequence,
;012            event_date = format(qc_re.event_dt_tm, "ddmmmyy hhmm;;d"),
            event_date = format(qc_re.event_dt_tm, "@DATETIMECONDENSED;;Q"), ;012
            event_date_locale = format(qc_re.event_dt_tm, "YYYY/MM/DD HHMM;;Q"),
            cm.short_description,
;005            qc_accn = concat(substring(6, 2, a.accession), "-",
;005                             substring(10,2, a.accession), "-",
;005                             substring(12,7, a.accession)),
            qc_accn = uar_fmt_accession(a.accession, size(a.accession, 1)), ;005
            a.accession,
;001            tech_name = substring(1, 7, pl.username),
            tech_name = substring(1, 8, pl.username),                  ;001
            cv_type.cdf_meaning,
;009            cv_ts.display_key,
;009            testsite_disp = substring(1, 10, cv_ts.display)
            testsite_disp = trim(substring(1, 10, UAR_GET_CODE_DISPLAY(qc_r.service_resource_cd)), 3),    ;009
            result_type_mean = trim(substring(1, 10, UAR_GET_CODE_MEANING(qc_r.result_type_cd)), 3)        ;009
         from
            (dummyt d_qc with seq = value(nbr_qcs)),
            qc_result qc_r,
            qc_result_event qc_re,
            control_material cm,
            accession a,
            prsnl pl
;009            code_value cv_ts,
;009            code_value cv_type

         plan d_qc
         join qc_r    where qc_r.qc_result_id =
                               qc_results->qual[d_qc.seq].qc_result_id
         join qc_re   where qc_re.qc_result_id =
                               qc_results->qual[d_qc.seq].qc_result_id
         join cm      where cm.control_id =
                               qc_results->qual[d_qc.seq].control_id
         join a       where a.accession_id =
                               qc_results->qual[d_qc.seq].accession_id
         join pl      where pl.person_id = qc_re.event_personnel_id
;009         join cv_ts   where cv_ts.code_value = qc_r.service_resource_cd
;009         join cv_type where cv_type.code_value = qc_r.result_type_cd

         order by
            cm.short_description,
            a.accession,
;009            cv_ts.display_key,
            testsite_disp,                                              ;009
            qc_r.qc_group_id,
            qc_re.qc_result_id,
            qc_re.event_sequence

         head report
%i cclsource:glb_rpt_macros.inc
            ;* Clear the initially-allocated rows of report_data array
            call clear_report_data(' ')
            main_row = 1
            detail_row = 1
;012            qc_hdg1 = "QC INFORMATION"                                 ;001
            qc_hdg1 = I18N_Captions->qc_info                           ;012
            qc_hdg2 =                                                  ;001
              concat("---------------------------------------- ",      ;001
                     "----------------------------------------")       ;001
            qc_hdg3 =                                                  ;001
               concat("                                  ",            ;001
                     "                                              ", ;001
;012                      "PERFORMED             VERIFIED")                ;001
               I18N_Captions->perf)                                    ;012
            qc_hdg4 =                                                  ;001
;012              concat("           ACCESSION #       TEST SITE ",        ;001
;012                     "  PROCEDURE       RESULT             ",          ;001
;012                     "TECH ID   DATE   TIME TECH ID   DATE   TIME")    ;001
              concat(I18N_Captions->access,                            ;012
              I18N_Captions->proc,                                     ;012
              I18N_Captions->tech_id)                                  ;012
            if(LOCALE = localeObjectName)
            qc_hdg5 =                                                  ;001
              concat("      --------------------- ---------- ",        ;001
                     "------------ ----------------------- ",          ;001
                     "-------- ------- ---- -------- ------- ----")    ;001
            else
             qc_hdg5 =                                                   
              concat("      --------------------- ---------- ",          
                     "------------ ----------------------- ",           
                     "-------- ---------- ---- -------- ---------- ----")     
            endif

         head a.accession
            row+0


;009         head cv_ts.display_key
         head testsite_disp                                             ;009
            row+0

         head qc_r.qc_group_id
            if (main_row > detail_row)
               detail_row = main_row
            else
               main_row = detail_row
            endif
            if (lot_nbr != prev_lot_nbr)                               ;001
               save1stline = main_row                                  ;001
               call store_item(0, main_row, qc_hdg1)                   ;001
               main_row = main_row + 1                                 ;001
               call store_item(0, main_row, qc_hdg2)                   ;001
               main_row = main_row + 1                                 ;001
               call store_item(0, main_row, control_name)
;001               call store_item(23, main_row, qc_accn)
;001               main_row = main_row + 1
;001               call store_item(0, main_row, lot_nbr)
               call store_item(41, main_row, lot_nbr)                  ;001
               main_row = main_row + 1
               call store_item(0, main_row, qc_hdg3)                   ;001
               main_row = main_row + 1                                 ;001
               call store_item(0, main_row, qc_hdg4)                   ;001
               main_row = main_row + 1                                 ;001
               call store_item(0, main_row, qc_hdg5)                   ;001
               main_row = main_row + 1                                 ;001
               prev_lot_nbr = lot_nbr                                  ;001
            endif                                                      ;001
            call store_item(06, main_row, qc_accn)                     ;001
;001            call store_item(43, detail_row, testsite_disp)
            call store_item(28, main_row, testsite_disp)               ;001
            detail_row = main_row                                      ;001

         head qc_re.qc_result_id
;001            call store_item(55, detail_row, detail_mne)
            call store_item(39, detail_row, detail_mne)                ;001
            ;* QC results are either alpha or numeric
            ;* use offset to keep track of where to put result flags
;001            offset = 67
            offset = 52                                                ;001
            if (result_type_mean = "2") ;Alpha result                   ;009
;009            if (cv_type.cdf_meaning = "2")  ;Alpha result
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
            elseif (result_type_mean = "3")  ;Numeric result
;009            elseif (cv_type.cdf_meaning = "3")  ;Numeric result
               arg_max_digits = qc_results->qual[d_qc.seq].max_digits
               arg_min_dec_places = qc_results->qual[d_qc.seq]
                 .min_decimal_places
               arg_min_digits = qc_results->qual[d_qc.seq].min_digits
               arg_less_great_flag = 0
;001               arg_raw_value = qc_r.numeric_raw_value
               arg_raw_value = qc_r.result_value_numeric               ;001
               format_numeric_result
               call store_item(offset, detail_row, formatted->result_value)
               offset = offset + size(trim(formatted->result_value), 3)
            endif

         detail
            if (qc_re.event_type_cd in (verified_cd, oldverified_cd,
                                        autoverified_cd, oldautoverified_cd,  ;006
                                        corrected_cd, oldcorrected_cd))
;001               offset = 105
               if(LOCALE = localeObjectName)
               offset = 98                                             ;001
               else
                offset = 101
               endif
               call store_item(offset, detail_row, tech_name)
;001               offset = offset + 8
               offset = offset + 9                                     ;001
               if(LOCALE = localeObjectName)
               call store_item(offset, detail_row, event_date)  ;Verify date
               else
                call store_item(offset, detail_row, event_date_locale)  ;Verify date
               endif               
               detail_row = detail_row + 1
            elseif (qc_re.event_type_cd in (performed_cd, oldperformed_cd))
;001               offset = 84
               offset = 76                                             ;001
               call store_item(offset, detail_row, tech_name)
;001               offset = offset + 8
               offset = offset + 9                                     ;001
               if(LOCALE = localeObjectName)
               call store_item(offset, detail_row, event_date)  ;Perform date
               else
                call store_item(offset, detail_row, event_date_locale)  ;Perform date
               endif                               
            endif

          foot qc_re.qc_result_id
            if (qc_comments->qual[d_qc.seq].comment_exists = "Y")
;001               offset = 57
               offset = 40                                             ;001
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
               call store_item(offset, detail_row, " Comment:")
               detail_row = detail_row + 1
               vcstring->text = qc_comments->qual[d_qc.seq].comment_text
;001               detail_row = store_varchar_item(detail_row, 60, 64, 1)
               detail_row = store_varchar_item(detail_row, 43, 64, 1)  ;001
            endif
            ;* Print qc review note
            if (qc_comments->qual[d_qc.seq].note_exists = "Y")
;001               offset = 57
               offset = 40                                             ;001
               offset = offset + size(trim(detail_mne), 3)
;001               call store_item(57, detail_row, detail_mne)
               call store_item(46, detail_row, detail_mne)             ;001
               call store_item(offset, detail_row, " Note:")
               detail_row = detail_row + 1
               vcstring->text = qc_comments->qual[d_qc.seq].comment_text
;001               detail_row = store_varchar_item(detail_row, 60, 64, 1)
               detail_row = store_varchar_item(detail_row, 43, 64, 1)  ;001
            endif

         foot qc_r.qc_group_id
            ;* Determine the total number of lines for this qc
            if (detail_row > main_row)                                 ;001
               report_data->qual[save1stline].detailcount =            ;001
                 detail_row - save1stline + 1                          ;001
            else                                                       ;001
               report_data->qual[save1stline].detailcount =            ;001
                 main_row - save1stline + 1                            ;001
            endif                                                      ;001
            if (detail_row < main_row)
               detail_row = main_row
            endif
            detail_row = detail_row + 1
         foot testsite_disp                                     ;009
;009         foot cv_ts.display_key
            row+0


         foot a.accession
            row+0

         with
            nocounter

/***Debug***
         for (i = 1 to nitems)
            call echo(report_data->qual[i].printline, 1)
         endfor
         call echo(" ", 1)
         call echo(build("nitems = ", nitems))
         call echo(build("limit  = ", limit))
         call echo(" ", 1)
***Debug***/
      /***********************************************************************
      * Print report                                                         *
      ***********************************************************************/
      #Print_Report
;012         set title_text = "ACTIVITY REPORT"
         set title_text = I18N_Captions->title                         ;012
;012         set begin_date = format(request->dt_tm_begin, "ddmmmyy hh:mm;;d")
		if(LOCALE = localeObjectName)
          set begin_dat = format(request->dt_tm_begin, "@DATECONDENSED;;Q") ;012
         set end_dat = format(request->dt_tm_end, "@DATECONDENSED;;Q") ;012
        else
         set begin_dat = format(request->dt_tm_begin, "YYYY/MM/DD;;Q") 
         set end_dat = format(request->dt_tm_end, "YYYY/MM/DD;;Q") 
        endif

;012         set end_date = format(request->dt_tm_end, "ddmmmyy hh:mm;;d")
        set begin_tm = format(request->dt_tm_begin, "@TIMENOSECONDS;;M")
         set end_tm = format(request->dt_tm_end, "@TIMENOSECONDS;;M") ;012

;012         set report_date_range = concat(begin_date, " to ", end_date)
         set report_date_range = concat(begin_dat," ",begin_tm,        ;012
           I18N_Captions->to_," ", end_dat," ", end_tm)                ;012

         select into "nl:"
            p.username
         from prsnl p 
         where p.person_id = reqinfo->updt_id
         detail
            username = trim(p.username)
         with nocounter

         execute cpm_create_file_name "GLB_RES", "txt"
    
         if (cpm_cfn_info->status_data.status != "S")
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->operationname = "get"
           set reply->status_data->subeventstatus[1]->operationstatus = "F"
           set reply->status_data->subeventstatus[1]->targetobjectname = "filename"
           set reply->status_data->subeventstatus[1]->targetObjectValue = "Filename Retrieval Unsuccessful"
           go to exit_script
         endif
        
         set reply->file_name = cpm_cfn_info->file_name_path

         select into trim(reply->file_name)
            d_pr.seq,
            serv_res_hier = perf_results->qual[d_pr.seq].serv_res_hier_seq,
            
            detail_mne = if(request->letter_size_ind = 1)
                 trim(nullterm(substring(1, 15, perf_results->qual[d_pr.seq]
                  .detail_mnemonic)))         
            else
                 trim(nullterm(substring(1, 11, perf_results->qual[d_pr.seq]
                  .detail_mnemonic)))
            endif,
            
            drawn_dttm = perf_results->qual[d_pr.seq].drawn_dt_tm,
            drawn_dttm_locale = perf_results->qual[d_pr.seq].drawn_dt_tm_locale,
            pr.result_id,
            pr.perform_result_id,
            pr.result_status_cd,
            pr.numeric_raw_value,
            pr.result_value_numeric,                                   ;001
            pr.dilution_factor,                                        ;001
            alpha_result = trim(substring(1, 15, pr.result_value_alpha)),
            freetext_result = trim(substring(1, 15, pr.ascii_text)),
            code_value_result = trim(substring(1, 15, UAR_GET_CODE_DISPLAY(pr.result_code_set_cd))),
;012            date_result = format(pr.result_value_dt_tm, "mm/dd/yy;;d"),
            date_result = format(pr.result_value_dt_tm, "@SHORTDATE;;Q"), ;012
            date_result_locale = format(pr.result_value_dt_tm, "YYYY/MM/DD;;Q"),
            re.perform_result_id,
            re.event_sequence,
            re.event_type_cd,
            re.event_dt_tm,
            re.event_personnel_id,                                     ;008
;012            event_date = format(re.event_dt_tm, "ddmmmyy hhmm;;d"),
            event_date = format(re.event_dt_tm, "@DATETIMECONDENSED;;Q"), ;012
            event_date_locale = format(re.event_dt_tm, "YYYY/MM/DD HHMM;;Q"),
            order_unique = build(o.catalog_cd, o.order_id),
;001            ord_mnem = trim(substring(1, 19, o.order_mnemonic)),
            ord_mnem = trim(substring(1, 11, o.order_mnemonic)),       ;001
            person_unique = build(trim(p.name_full_formatted), p.person_id,e.encntr_id),
;013            p_name_full = trim(p.name_full_formatted),
            p_name_full = trim(cnvtupper(p.name_full_formatted)),      ;013
            short_name = trim(substring(1, 22, p.name_full_formatted)),
            e.encntr_id,
	    org.seq,					;010
            e.loc_facility_cd,
            e.loc_nurse_unit_cd,
            e.loc_room_cd,
            e.loc_bed_cd,
            e.reason_for_visit,                                        ;001
            d_oc.seq,
            ptr.sequence,
            accn = perf_results->qual[d_pr.seq].accession,             ;005
            psex = trim(substring(1, 7, UAR_GET_CODE_DISPLAY(p.sex_cd)), 3),    ;009
            result_type_mean = trim(substring(1, 15, UAR_GET_CODE_MEANING(pr.result_type_cd)), 3), ;009
            perf_date = format(pr.perform_dt_tm, "@DATETIMECONDENSED;;Q"), ;012
            perf_date_locale = format(pr.perform_dt_tm, "YYYY/MM/DD HHMM;;Q"),
            doctor_name = concat(I18N_Captions->dr_," ", substring(1, 18, p_doc.name_full_formatted)),	;012
            priority = substring(1, 11, UAR_GET_CODE_DISPLAY(ol.report_priority_cd)), ;009
            testsite_disp = substring(1, 10, UAR_GET_CODE_DISPLAY(pr.service_resource_cd)), ;009
            tech_name = substring(1, 8, pl.username),                  ;001
            perf_tech_name = substring(1, 8, pl2.username),            ;011
            d_ea.seq,
            ea_exists = decode(ea.seq, "Y", "N"),
            pat_nbr = cnvtalias(ea.alias, ea.alias_pool_cd),           ;005
            nowtime = format(curtime, "@TIMENOSECONDS;;M"),            ;012
            nowdate = format(curdate, "@SHORTDATE4YR;;Q"),              ;012
            nowdate_locale = format(curdate,"YYYY/MM/DD;;Q")

         from
            (dummyt d_pr with seq = value(nbr_prs)),
            perform_result pr,
            result_event re,
            orders o,
            order_laboratory ol,
	          organization org,			;010
            person p,
            encounter e,
            (dummyt d_oc with seq = value(nbr_o_comments)),
            profile_task_r ptr,
            prsnl p_doc,
            prsnl pl,
            prsnl pl2,
            (dummyt d_ea with seq = 1),
            encntr_alias ea

         plan d_pr
         join pr
           where pr.perform_result_id =
                    perf_results->qual[d_pr.seq].perform_result_id
         join re
           where re.result_id = perf_results->qual[d_pr.seq].result_id
             and re.perform_result_id = pr.perform_result_id
         join o
           where o.order_id = perf_results->qual[d_pr.seq].order_id
         join ol
           where ol.order_id = perf_results->qual[d_pr.seq].order_id
         join p
           where p.person_id = o.person_id
         join e
           where e.encntr_id = o.encntr_id
	 join org
	   where e.organization_id = org.organization_id
         join d_oc
           where o_comments->qual[d_oc.seq].order_id = o.order_id
         join ptr
           where ptr.catalog_cd = perf_results->qual[d_pr.seq].catalog_cd
             and ptr.task_assay_cd =
                    perf_results->qual[d_pr.seq].task_assay_cd
         join p_doc
           where p_doc.person_id = o.last_update_provider_id
         join pl
           where pl.person_id = re.event_personnel_id
         join pl2                                                      ;011
           where pl2.person_id = pr.perform_personnel_id               ;011
         join d_ea
           where d_ea.seq = 1
         join ea
           where ea.encntr_id = e.encntr_id
             and ea.encntr_alias_type_cd = alias_type_mrn_cd

         order by
            serv_res_hier,
            person_unique,     ;p_name_full   ;016
            accn,
            order_unique,
            testsite_disp,
            ptr.sequence,
            pr.perform_result_id,
            d_pr.seq,
            re.event_sequence

         head report
%i cclsource:glb_rpt_macros.inc
            ;* If there are no qc results in the report_data array, clear it
            if (limit = 0)
               call clear_report_data(' ')
            endif
            ;* Initialize report variables
            first_time_yn = "Y"
            break_yn = "N"
            if (nbr_prs > 0)
               rpt->inst_disp = perf_results->qual[d_pr.seq].inst_disp
               rpt->dept_disp = perf_results->qual[d_pr.seq].dept_disp
               rpt->sect_disp = perf_results->qual[d_pr.seq].sect_disp
               rpt->subsect_disp = perf_results->qual[d_pr.seq].subsect_disp
               rpt->ts_disp = perf_results->qual[d_pr.seq].ts_disp
            elseif (nbr_qcs > 0)
               rpt->inst_disp = qc_results->qual[1].inst_disp
               rpt->dept_disp = qc_results->qual[1].dept_disp
               rpt->sect_disp = qc_results->qual[1].sect_disp
               rpt->subsect_disp = qc_results->qual[1].subsect_disp
               rpt->ts_disp = qc_results->qual[1].ts_disp
            else
               rpt->inst_disp = test_site->qual[1]->inst_disp          ;016
               rpt->dept_disp = test_site->qual[1]->dept_disp          ;016
               rpt->sect_disp = test_site->qual[1]->sect_disp          ;016
               rpt->subsect_disp = test_site->qual[1]->subsect_disp    ;016
               rpt->ts_disp = test_site->qual[1]->ts_disp              ;016
            endif

            p_hdg1 = I18N_Captions->demo                               ;012
            
            if(request->letter_size_ind = 1)
                p_hdg2 =
                  concat("---------------------------------------- ",
                         "---------------------------------------------------------- ",
                         "------------------------------")
            else
                p_hdg2 =                                                   ;001
                  concat("---------------------------------------- ",      ;001
                         "---------------------------------------- ",      ;001
                         "------------------------------")                 ;001
            endif
            
            p_hdg3 =                                                   ;001
              concat(I18N_Captions->orderable,                         ;012
                     "                                            ",   ;001
                     I18N_Captions->performed)                         ;012
            p_hdg4 =                                                   ;001
              concat(I18N_Captions->priority, I18N_Captions->result,   ;012
                     I18N_Captions->time)                              ;012
           if(LOCALE = localeObjectName)
            if(request->letter_size_ind = 1)
                p_hdg5 =
                  concat("----------- --------------------- ---------- ",
                         "---------------- ----------------------- ",
                         "-------- ------- ---- -------- ------- ----")
            else
	            p_hdg5 =                                                   ;001
                  concat("----------- --------------------- ---------- ",  ;001
                         "------------ ----------------------- ",          ;001
                         "-------- ------- ---- -------- ------- ----")    ;001
            endif
           else
            if(request->letter_size_ind = 1)
                p_hdg5 =
                 concat("----------- --------------------- ---------- ",  
                         "------------ ---------------------- ",          
                         "-------- ---------- ---- -------- ---------- ----")
            else
	            p_hdg5 =                                                  
                  concat("----------- --------------------- ---------- ",  
                         "------------ ---------------------- ",          
                         "-------- ---------- ---- -------- ---------- ----")    
            endif
           endif

         head page
            call center(trim(rpt->inst_disp), 0, 125)
            col 0, I18N_Captions->rpt                                  ;012
            col 109, I18N_Captions->date                               ;012
            if(LOCALE = localeObjectName)
            col + 1, nowdate
            else
             col + 1, nowdate_locale
            endif           
            row + 1
            col 0, I18N_Captions->dir                                  ;012
            col 109, I18N_Captions->tm                                 ;012
            col + 1, nowtime
            row + 1
            call center(title_text, 0, 125)
            col 109, I18N_Captions->by_                                ;012
            col + 1, username
            row + 1
            call center(report_date_range, 0, 125)
            col 109, I18N_Captions->pg                                 ;012
            col + 1, curpage "####;l;i"
            row + 1
            col 0, I18N_Captions->instit                               ;012
            col 14, rpt->inst_disp
            row + 1
            col 0, I18N_Captions->dept                                 ;012
            col 14, rpt->dept_disp
            row + 1
            col 0, I18N_Captions->sect                                 ;012
            col 14, rpt->sect_disp
            row + 1
            if (serv_res_level_flag in (0,1))                          ;013
               col 0, I18N_Captions->sub_sect                          ;012
               col 14, rpt->subsect_disp
               row + 1
            endif
            if (serv_res_level_flag = 0)                               ;013
               col 0, I18N_Captions->tst_ste                           ;012
               col 14, rpt->ts_disp
               row + 1
            endif
            ;* Print column headers
            row + 1
            ;* if this is the 1st page and there is qc data in the
            ;* report_data array, then print it.
            if (curpage = 1 and limit > 0)
               print_report_data
               row + 1
            endif

         head serv_res_hier
            if (first_time_yn = "N")
               if ((serv_res_level_flag = 0
                 or serv_res_level_flag = 1
                 or serv_res_level_flag = 3)
               and (perf_results->qual[d_pr.seq].inst_disp != rpt->inst_disp
                 or perf_results->qual[d_pr.seq].dept_disp != rpt->dept_disp
                 or perf_results->qual[d_pr.seq].sect_disp != rpt->sect_disp
                 or perf_results->qual[d_pr.seq].subsect_disp != rpt->subsect_disp))
                  break_yn = "Y"
               elseif ((serv_res_level_flag = 2)
               and (perf_results->qual[d_pr.seq].inst_disp != rpt->inst_disp
                 or perf_results->qual[d_pr.seq].dept_disp != rpt->dept_disp
                 or perf_results->qual[d_pr.seq].sect_disp != rpt->sect_disp))
                  break_yn = "Y"
               else
                  break_yn = "N"
               endif
               rpt->inst_disp = perf_results->qual[d_pr.seq].inst_disp
               rpt->dept_disp = perf_results->qual[d_pr.seq].dept_disp
               rpt->sect_disp = perf_results->qual[d_pr.seq].sect_disp
               rpt->subsect_disp = perf_results->qual[d_pr.seq].subsect_disp
               rpt->ts_disp = perf_results->qual[d_pr.seq].ts_disp
               if (break_yn = "Y")
                  break
               endif
            endif
            if (nbr_qcs > 0                                            ;001
            and first_time_yn = "Y")                                   ;001
               qc_data_yn = "N"                                        ;001
               break                                                   ;001
            endif                                                      ;001
            first_time_yn = "N"

          head person_unique                                           ;016
            call store_item(0, 1, p_hdg1)                              ;001
            call store_item(0, 2, p_hdg2)                              ;001
            short_age = FormatAge(p.birth_dt_tm, p.deceased_dt_tm, "LABRPTAGE")
            call store_item(0, 3, short_name)   ; patient name         ;001
            if (ea_exists = "Y")
               call store_item(0, 4, pat_nbr)   ; patient number       ;001
            endif
            call store_item(41, 3, short_age)    ; patient age         ;001
            if (p.sex_cd > 0.0)                                        ;009
               call store_item(60, 3, psex)      ; patient sex
            endif
            ;* Patient facility location
            pat_fac = fillstring(20, " ")
            pat_nurse = fillstring(20, " ")
            fac_loc = fillstring(43, " ")
            if (e.loc_facility_cd > 0.0)                                ;009
               pat_fac = trim(substring(1, 15, UAR_GET_CODE_DISPLAY(e.loc_facility_cd)), 3) ;009
            else
               pat_fac = I18N_Captions->unknown                        ;012
            endif
            if (e.loc_nurse_unit_cd > 0.0)                              ;009
               pat_nurse = trim(substring(1, 15, UAR_GET_CODE_DISPLAY(e.loc_nurse_unit_cd)), 3) ;009
            else
               pat_nurse = I18N_Captions->unknown                      ;012
            endif
            ;* Patient location
            pat_room = fillstring(20, " ")
            pat_bed = fillstring(20, " ")

            if(request->letter_size_ind = 1)
                pat_loc = fillstring(58, " ")
            else
                pat_loc = fillstring(43, " ")
            endif

            if (e.loc_room_cd > 0.0)                                    ;009
               pat_room = trim(substring(1, 04, UAR_GET_CODE_DISPLAY(e.loc_room_cd)), 3)   ;009
            else
               pat_room = I18N_Captions->unknown                       ;012
            endif
            if (e.loc_bed_cd > 0.0)                                     ;009
               pat_bed = trim(substring(1, 04, UAR_GET_CODE_DISPLAY(e.loc_bed_cd)), 3)     ;009
            else
               pat_bed = I18N_Captions->unknown                        ;012
            endif
	    if (e.encntr_status_cd = discharged_cd)                     ;010
    		pat_loc = concat(trim(org.org_name), "/",               ;010
		  	trim(uar_get_code_display(e.encntr_status_cd))) ;010
	    else                                                        ;010
        pat_loc = concat(trim(pat_fac), "/", trim(pat_nurse),      ;001
          "/", trim(pat_room), "/", trim(pat_bed))                 ;001
		if (trim(pat_fac) != trim(org.org_name))                  ;010
		   pat_loc = concat(trim(pat_loc), "/", trim(org.org_name));010
		endif                                                      ;010
            endif                                                        ;010
            
            if(request->letter_size_ind = 1)
                call store_item(41, 4, substring(1, 58, pat_loc))
            else
                call store_item(41, 4, substring(1, 40, pat_loc))      ;001
            endif
            
            if (trim(doctor_name) != I18N_Captions->dr_)               ;012
            
                if(request->letter_size_ind = 1)
                    call store_item(100, 3, doctor_name)  ; ordering phys
                else
                    call store_item(82, 3, doctor_name)  ; ordering phys    ;001
                endif

            endif
            reason_for_visit = fillstring(30, " ")                     ;001
            reason_for_visit =                                         ;001
              substring(1, 30, trim(e.reason_for_visit))               ;001
            
            if(request->letter_size_ind = 1)
                call store_item(100, 4, reason_for_visit)
            else
                call store_item(82, 4, reason_for_visit)               ;001
            endif  

            order_row = 5                                              ;001
            detail_row = 5                                             ;001
            first_order = "Y"                                          ;001

         head order_unique
            ;* Start new order 2 lines following last detail of previous order.
            ;* Otherwise, start 1st detail of each order on 1st line of order.
            if (detail_row > order_row)
               order_row = detail_row
            else
               ;* Check for multiple orders per patient and add space
               detail_row = order_row
            endif
            if (first_order = "Y")                                     ;001
              order_row = order_row + 1                                ;001
              call store_item(0, order_row, p_hdg3)                    ;001
              order_row = order_row + 1                                ;001
              call store_item(0, order_row, p_hdg4)                    ;001
              order_row = order_row + 1                                ;001
              call store_item(0, order_row, p_hdg5)                    ;001
              first_order = "N"                                        ;001
            endif                                                      ;001
            order_row = order_row + 1                                  ;001
            detail_row = order_row                                     ;001
            ;* Store 1st detail line of current order
            save1stline = order_row
            offset = 0                                                 ;001
            call store_item(offset, order_row, ord_mnem)
            call store_item(12, order_row, accn)                       ;001
            order_row = order_row + 1
            offset = 12                                                ;001
            if (size(trim(drawn_dttm), 3) > 0)
             if(LOCALE = localeObjectName)
               call store_item(offset, order_row, drawn_dttm)
             else 
              call store_item(offset, order_row, drawn_dttm_locale)
             endif                           
            endif
            offset = 0                                                 ;001
            call store_item(offset, order_row, priority)
            order_row = order_row + 1
            ;* Print order comments, if any exist
            if (o_comments->qual[d_oc.seq].comment_exists = "Y")
               order_row = save1stline + 2                             ;001
               offset = size(trim(ord_mnem), 3) + 4
               call store_item(1, order_row, ord_mnem)                 ;001
               order_row = order_row + 1                               ;001
               offset = 1                                              ;001
               call store_item(offset, order_row, I18N_Captions->ord_cmnt) ;012
               order_row = order_row + 1
               vcstring->text = o_comments->qual[d_oc.seq].comment_text
               order_row = store_varchar_item(order_row, 3, 30, 1)     ;001
            endif
            if (o_comments->qual[d_oc.seq].note_exists = "Y")
               if (o_comments->qual[d_oc.seq].comment_exists = "N")
                  order_row = save1stline + 2                          ;001
               endif
               offset = size(trim(ord_mnem), 3) + 4
               call store_item(1, order_row, ord_mnem)                 ;001
               order_row = order_row + 1                               ;001
               offset = 1                                              ;001
               call store_item(offset, order_row, I18N_Captions->ord_note) ;012
               order_row = order_row + 1
               vcstring->text = o_comments->qual[d_oc.seq].note_text
               order_row = store_varchar_item(order_row, 3, 30, 1)     ;001
            endif

         head testsite_disp                                            ;009
            call store_item(34, detail_row, testsite_disp)             ;001

         head ptr.sequence
            row+0

         head pr.perform_result_id
          if (pr.result_status_cd in (verified_cd,                     ;008
                                      oldverified_cd,                  ;008
                                      autoverified_cd,                 ;008
                                      oldautoverified_cd,              ;008
                                      corrected_cd,                    ;008
                                      oldcorrected_cd))                ;008
           ;* Print detail information.
            call store_item(45, detail_row, detail_mne)                ;001
            
            if(request->letter_size_ind = 1)
                offset = 62
            else
                offset = 58                                             ;001
            endif

            if (result_type_mean = "1")                       ;Textual result ;009
               call store_item(offset, detail_row, " ")
            elseif (result_type_mean = "2")                ;Alpha result  ;009
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
            elseif (result_type_mean in ("3", "8"))        ;Numeric result  ;009
               arg_max_digits = perf_results->qual[d_pr.seq].max_digits
               arg_min_dec_places = perf_results->qual[d_pr.seq]
                 .min_decimal_places
               arg_min_digits = perf_results->qual[d_pr.seq].min_digits
               arg_less_great_flag = pr.less_great_flag
               arg_raw_value = pr.result_value_numeric                 ;001
               if (perf_results->qual[d_pr.seq].sci_notation_ind = 1)
                  formatted->result_value = 
                    uar_AccFormatResultStringSciNote(arg_min_digits,
                                                     arg_max_digits,
                                                     arg_min_dec_places,
                                                     arg_raw_value,
                                                     arg_less_great_flag, 1)
               else
                  format_numeric_result
               endif
               call store_item(offset, detail_row, formatted->result_value)
               offset = offset + size(trim(formatted->result_value), 3)
            elseif (result_type_mean = "4")                ;Interp result  ;009
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
            elseif (result_type_mean = "6")                ;Date result  ;009
             if(LOCALE = localeObjectName)
               call store_item(offset, detail_row, date_result)
               offset = offset + size(trim(date_result), 3)
             else
               call store_item(offset, detail_row, date_result_locale)
               offset = offset + size(trim(date_result_locale), 3)
             endif
            elseif (result_type_mean = "7")                ;Freetext result  ;009
               call store_item(offset, detail_row, freetext_result)
               offset = offset + size(trim(freetext_result), 3)
            elseif (result_type_mean = "9")
               call store_item(offset, detail_row, code_value_result)
               offset = offset + size(trim(code_value_result), 3)
            endif
            ;* Build a string of result flags
            if (pr.result_status_cd in (corrected_cd, oldcorrected_cd))
               correction_flag = "Y"
            else
               correction_flag = "N"
            endif
            if (pr.normal_cd in(normal_high_cd, normal_low_cd, alp_abnormal_cd))
               cv_normflag = UAR_GET_CODE_DISPLAY(pr.normal_cd)
            else
               cv_normflag = " "
            endif
            if (pr.critical_cd in(critical_cd, alp_critical_cd))
               cv_critflag = UAR_GET_CODE_DISPLAY(pr.critical_cd)
            else
               cv_critflag = " "
            endif
            if (pr.review_cd in(review_cd, alp_review_cd))
               cv_revwflag = UAR_GET_CODE_DISPLAY(pr.review_cd)
            else
               cv_revwflag = " "
            endif
            if (pr.linear_cd = linear_cd)
               cv_linflag = UAR_GET_CODE_DISPLAY(pr.linear_cd)
            else
               cv_linflag = " "
            endif
            if (pr.feasible_cd = feasible_cd)
               cv_feasflag = UAR_GET_CODE_DISPLAY(pr.feasible_cd)
            else
               cv_feasflag = " "
            endif
            if (pr.delta_cd = delta_fail_cd)
               cv_deltaflag = UAR_GET_CODE_DISPLAY(pr.delta_cd)
            else
               cv_deltaflag = " "
            endif
            if (pr.qc_override_cd = qc_override_cd)
               sQCOverride = UAR_GET_CODE_DISPLAY(pr.qc_override_cd)
            else                                                      
               sQCOverride = " "                                      
            endif
            if(pr.notify_cd in(notify_cd, alp_notify_cd))
              cv_notifyflag = UAR_GET_CODE_DISPLAY(pr.notify_cd)
            else
              cv_notifyflag = " "
            endif
            if ((pr.nomenclature_id > 0.0) and (pr.long_text_id > 0.0))
              interp_flag = I18N_Captions->interp_text_flag 
            else
              interp_flag = "" 
            endif
            rc_exists = r_comments->qual[d_pr.seq].comment_exists
            rn_exists = r_comments->qual[d_pr.seq].note_exists
            resultflagstr =
              bldresultflagstr(cv_normflag, cv_critflag, cv_revwflag,
                               cv_linflag, cv_feasflag,                ;001
                               cv_deltaflag, rc_exists, rn_exists,
                               correction_flag, sQCOverride, cv_notifyflag, interp_flag)
            if (pr.dilution_factor > 0.0)                              ;001
               dilution=cnvtstring(pr.dilution_factor,6,2,l)           ;001
               idx=1                                                   ;001
               while(substring(idx,1,dilution) = "0")                  ;001
                 ;* Remove leading zeroes                              ;001
                 l=movestring(" ",1,dilution,idx,1)                    ;001
                 idx = idx+1                                           ;001
               endwhile                                                ;001
               idx=6                                                   ;001
               while(substring(idx,1,dilution) = "0")                  ;001
                 ;* Remove trailing zeroes                             ;001
                 l=movestring(" ",1,dilution,idx,1)                    ;001
                 idx = idx-1                                           ;001
               endwhile                                                ;001
               if (substring(idx,1,dilution )= ".")                    ;001
                 ;* Remove decimal point if not needed                 ;001
                 l=movestring(" ",1,dilution,idx,1)                    ;001
               endif                                                   ;001
               resultflagstr = concat(" ", "x", trim(dilution,3),      ;001
                 " ", resultflagstr)                                   ;001
            else                                                       ;001
               resultflagstr = concat(" ", resultflagstr)              ;001
            endif                                                      ;001
            if (size(trim(resultflagstr), 3) > 0)
               call store_item(offset, detail_row, resultflagstr)
            endif
          endif                                                        ;008

         detail
            ;* Decide which column this entry goes in,
            ;* and when to proceed to a new line
            if (re.event_type_cd in (verified_cd,
                                     autoverified_cd,                  ;002
                                     corrected_cd))
               ;* Display perform info on verification rows            ;011
               if (re.event_type_cd in (verified_cd,                   ;011
                                        autoverified_cd))              ;011
                 if(LOCALE = localeObjectName)                      
                  if(request->letter_size_ind = 1)
                      offset = 86
                  else
                      offset = 82                                      ;011
                  endif
                 else                  
                      offset = 81                                                
                 endif

                  call store_item(offset, detail_row, perf_tech_name)  ;011
                  offset = offset + 9                                  ;011
                  if(LOCALE = localeObjectName)
                  call store_item(offset, detail_row, perf_date)       ;011
                  else                
                   call store_item(offset, detail_row, perf_date_locale)       
                  endif                             
               endif                                                   ;011
;001               offset = 105
		      if(LOCALE = localeObjectName)
               if(request->letter_size_ind = 1)
                   offset = 108
               else
                   offset = 104                                        ;001
               endif
              else               
                   offset = 106                             
              endif

               call store_item(offset, detail_row, tech_name)
;001               offset = offset + 8
               offset = offset + 9                                     ;001
               if(LOCALE = localeObjectName)
               call store_item(offset, detail_row, event_date)  ;Verify date
               else
                call store_item(offset, detail_row, event_date_locale)             
               endif                                    
               detail_row = detail_row + 1
            endif

         foot pr.perform_result_id
          if (pr.result_status_cd in (verified_cd,                     ;008
                                      oldverified_cd,                  ;008
                                      autoverified_cd,                 ;008
                                      oldautoverified_cd,              ;008
                                      corrected_cd,                    ;008
                                      oldcorrected_cd))                ;008
            if (result_type_mean = "1")  ;Textual result  ;009
               call store_item(46, detail_row, detail_mne)             ;001
               
               if(request->letter_size_ind = 1)
                   offset = 62
               else
                   offset = size(trim(detail_mne), 3) + 46             ;001
               endif    
               
               call store_item(offset, detail_row, I18N_Captions->txt_rslt) ;012
               detail_row = detail_row + 1
               if (pr.long_text_id > 0.0)
                  vcstring->text = perf_results->qual[d_pr.seq].long_text
               else
                  vcstring->text = I18N_Captions->text_not_fnd         ;012
               endif
               detail_row = store_varchar_item(detail_row, 49, 64, 1)  ;001
            endif
            if (result_type_mean = "4"   ;Textual interp result  ;009
            and pr.long_text_id > 0.0)
               call store_item(46, detail_row, detail_mne)             ;001
               
               if(request->letter_size_ind = 1)
                   offset = 62
               else
                   offset = size(trim(detail_mne), 3) + 46                 ;001
               endif
               
               call store_item(offset, detail_row, I18N_Captions->txt_rslt) ;012
               detail_row = detail_row + 1
               vcstring->text = perf_results->qual[d_pr.seq].long_text
               detail_row = store_varchar_item(detail_row, 49, 64, 1)  ;001
            endif
          endif                                                        ;008

         foot ptr.sequence
            ;* Print result comment, if any exist
            if (r_comments->qual[d_pr.seq].comment_exists = "Y")
               call store_item(46, detail_row, detail_mne)             ;001
               offset = size(trim(detail_mne), 3) + 46                 ;001
               call store_item(offset, detail_row, I18N_Captions->rslt_cmnt) ;012
               detail_row = detail_row + 1
               vcstring->text = r_comments->qual[d_pr.seq].comment_text
               detail_row = store_varchar_item(detail_row, 49, 64, 1)  ;001
            endif
            ;* Print result footnote, if any exist
            if (r_comments->qual[d_pr.seq].note_exists = "Y")
               offset = size(trim(detail_mne), 3) + 46                 ;001
               call store_item(46, detail_row, detail_mne)             ;001
               call store_item(offset, detail_row, I18N_Captions->rslt_note) ;012
               detail_row = detail_row + 1
               vcstring->text = r_comments->qual[d_pr.seq].note_text
               detail_row = store_varchar_item(detail_row, 49, 64, 1)  ;001
            endif

         foot testsite_disp                                            ;009
            row+0

         foot order_unique
            ;* Determine the total number of lines for this order
            if (detail_row > order_row)                                ;001
               report_data->qual[save1stline].detailcount =
                 detail_row - save1stline + 1
            else                                                       ;001
               report_data->qual[save1stline].detailcount =            ;001
                 order_row - save1stline + 1                           ;001
            endif                                                      ;001

         foot person_unique                                            ;016
            ;* Print out previous patient info and erase it from
            ;* report_data array.
            report_data->qual[1].detailcount =                         ;001
              report_data->qual[9].detailcount + 8                     ;001
            print_report_data
            row + 1

         foot report
            ;* Print out last patient info and erase it from
            ;* report_data array.
            print_report_data
            row + 2
            call center(uar_i18ngetmessage(i18nHandle,"key_38","##### END OF REPORT #####"), 0, 125) ;012 MAX=25

         with
            nocounter,
            outerjoin = d_ea,
            dontcare = ea,
            maxread(ea, 1),
            nullreport

            if (size(trim(request->printer_name)) > 0)
              SET spool = value(reply->file_name) value(request->printer_name)
            endif
            
            set reply->status_data->status = "S"

#Exit_Script
      if ((reply->status_data->status != "F") and
          (GetResourceSecurityStatus(0) != "S"))                        ;018
         call PopulateResSecStatusBlock(0)                              ;018
         set reply->status_data->status = GetResourceSecurityStatus(0)  ;018
      endif                                                             ;018
      call uar_SysDestroyHandle(hSys)                                   ;016
      free set I18N_Captions 
      free set test_site
      free set ts_sort
      free set actvty_type
      free set perf_results
      free set qc_comments
      free set rpt
      free set qc_results
      free set r_comments
      free set o_comments
      free set p_comments
      free set ops_params
      free set report_data
      free set vcstring
      free set formatted
      end
      go

;Generated by GNU enscript 1.6.4.
