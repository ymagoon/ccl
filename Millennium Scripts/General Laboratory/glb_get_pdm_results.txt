 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_pdm_results/glb_get_pdm_results.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_PDM_RESULTS.PRG
        Object name:            GLB_GET_PDM_RESULTS
        Request #:              257566

        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve PDM Result info from the database

        Tables read:            PDM_RESULT
                                PDM_DATA_POINT

        Tables updated:         n/a

        Executing from:         General Lab QC Inquiry

        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 07/27/98 Chad Moats           Initial Release                     *
;     001 08/27/99 Gary Runde           Return apr display_sequence         *
;     002 06/13/00 Gary Runde           Return PDM rangeID and paramID      *
;     003 05/16/02 Sasi Gandham         Add Fields to Order by for Head and *
;                                       use UARs                            *
;	 *004 05/23/07 Subramanya 			Change cnvtdate to cnvtdatetime to fetch * 
;										the result based on both date and time	*
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

      drop program GLB_GET_PDM_RESULTS:dba go
      create program GLB_GET_PDM_RESULTS:dba

%i cclsource:pcs_subevent.inc

/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 task_assay_cd                = f8
         1 service_resource_cd          = f8
         1 begin_date                   = dq8
         1 end_date                     = dq8
      )
*/

/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/

      record reply
      (
         1 results[*]
           2 qc_result_id               = f8
           2 qc_group_id                  = f8
           2 accession_id               = f8
           2 accession                  = vc
           2 result_status_cd           = f8
           2 result_status_disp         = vc
           2 review_tech                  = vc
           2 review_dt_tm               = dq8
           2 review2_tech                  = vc
           2 review2_dt_tm               = dq8
           2 control_id                 = f8
           2 lot_id                     = f8
           2 lot_number                 = c20
           2 service_resource_cd        = f8
           2 service_resource_disp      = vc
           2 task_assay_cd              = f8
           2 mnemonic                   = vc
           2 result_tech                = c100
           2 result_tech_id             = f8
           2 perform_dt_tm              = dq8
           2 result_type_cd             = f8
           2 result_type_disp           = vc
           2 result_type_mean           = vc
           2 result_value_numeric       = f8
           2 result_value_alpha         = c25
           2 nomenclature_id            = f8
           2 resource_error_codes         = c100
           2 mulitplex_resource_cd        = f8
           2 rule_id                      = f8
           2 mean                         = f8
           2 prev_result_id             = f8
           2 clinical_std_dev           = f8
           2 statistical_std_dev        = f8
           2 abs_low                    = f8
           2 abs_high                   = f8
           2 result_control_cd            = f8
           2 result_control_disp          = vc
           2 result_control_mean          = vc
           2 numeric_raw_value            = f8
           2 preactive_ind                = i2
           2 qc_result_updt_cnt           = i4
           2 result_process_cd            = f8
           2 result_process_disp          = vc
           2 ascii_text                   = c60
           2 interface_flag               = i2
           2 max_digits                   = i2
           2 min_digits                   = i2
           2 min_decimal_places           = i2
           2 comment_ind                  = i2
           2 display_sequence             = i4           ;001
           2 pdm_range_id                 = f8           ;002
           2 pdm_param_id                 = f8           ;002
         1 status_data
           2 status                  = c1
           2 subeventstatus[1]
             3 OperationName         = c15
             3 OperationStatus       = c1
             3 TargetObjectName      = c15
             3 TargetObjectValue     = vc
      )


     #Script
      declare FOOTNOTE_CODESET            = i4 with public, constant(14)
      declare FOOTNOTE_CDF                = c12 with public, constant("QC FTNT")
      declare FOOTNOTE_CD                 = f8 with public, noconstant(0.0)
      declare SERV_RES_TYPE_CODESET       = i4 with public, constant(223)
      declare SERV_RES_SUBSECTION_CDF     = c12 with public, constant("SUBSECTION")
      declare serv_res_subsection_cd      = f8 with public, noconstant(0.0)
      declare RESULT_STATUS_CODESET       = i4 with public, constant(1901)
      declare RESULT_STATUS_REVIEWED_CDF  = c12 with public, constant("REVIEWED")
      declare RESULT_STATUS_REVIEWED2_CDF = c12 with public, constant("REVIEWED2")
      declare result_status_reviewed_cd   = f8 with public, noconstant(0.0)
      declare result_status_reviewed2_cd  = f8 with public, noconstant(0.0)

      set reply->status_data->status = "F"
      set r_cnt = 0
      set x = 0
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty


SET stat = UAR_GET_MEANING_BY_CODESET(SERV_RES_TYPE_CODESET,SERV_RES_SUBSECTION_CDF,1,serv_res_subsection_cd)
if (serv_res_subsection_cd = 0)
    set failed = "T"
    call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of SUBSECTION_CD (cs 223) failed.")
    go to exit_script
endif


SET stat = UAR_GET_MEANING_BY_CODESET(FOOTNOTE_CODESET,FOOTNOTE_CDF,1,FOOTNOTE_CD)
if (FOOTNOTE_CD = 0)
    set failed = "T"
    call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of QC FOOTNOTE (cs 14) failed.")
    go to exit_script
endif

SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,"REVIEWED",1,result_status_reviewed_cd)
if (result_status_reviewed_cd = 0)
    set failed = "T"
	  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REVIEWED (cs 1901) failed.")
	  go to exit_script
endif

SET stat = UAR_GET_MEANING_BY_CODESET(RESULT_STATUS_CODESET,RESULT_STATUS_REVIEWED2_CDF,1,result_status_reviewed2_cd)
if (result_status_reviewed2_cd = 0)
    set failed = "T"
	  call subevent_add("SELECT","F","CODE_VALUE","Selecting for cdf_meaning of REVIEWED2 (cs 1901) failed.")
	  go to exit_script
endif

/********************************************************************/
/* Select QC Results from the database                              */
/********************************************************************/

     SELECT
       into "nl:"
	 apr_exists = decode(apr.seq, "Y", "N"),        ;001
	 apr.display_sequence,				;001
         q.qc_result_id,
         qe1.qc_result_id,
         p1.person_id,
         qe2.qc_result_id,
         p2.person_id,
         d.task_assay_cd
        FROM
         qc_result q,
         discrete_task_assay d,
         qc_result_event qe1,
         prsnl p1,
         qc_result_event qe2,
         prsnl p2,
         assay_processing_r apr,     ;001
         (dummyt d1 with seq = 1),
         (dummyt d2 with seq = 1),
         (dummyt d3 with seq = 1)    ;001
       PLAN q
         where (q.task_assay_cd = request->task_assay_cd or request->task_assay_cd = 0) and
               q.control_id = 0.0 and
               q.service_resource_cd = request->service_resource_cd and
               q.qc_result_type_flag = 1 and
               (q.perform_dt_tm between cnvtdatetime(request->begin_date) and cnvtdatetime(request->end_date)	;004
               or q.perform_dt_tm = cnvtdatetime(request->begin_date) or q.perform_dt_tm = cnvtdatetime(request->end_date))	;004
       JOIN d
         where d.task_assay_cd = q.task_assay_cd
       JOIN d3 where d3.seq = 1                                        ;001
       JOIN apr where apr.service_resource_cd = q.service_resource_cd  ;001
		  and apr.task_assay_cd = q.task_assay_cd              ;001
       JOIN d1 where d1.seq = 1
       JOIN qe1
         where qe1.qc_result_id = q.qc_result_id and
               qe1.event_type_cd = result_status_reviewed_cd
       JOIN p1
         where p1.person_id = qe1.event_personnel_id
       JOIN d2 where d2.seq = 1
       JOIN qe2
         where qe2.qc_result_id = q.qc_result_id and
               qe2.event_type_cd = result_status_reviewed2_cd
       JOIN p2
         where p2.person_id = qe2.event_personnel_id
      ORDER BY q.qc_result_id
      HEAD q.qc_result_id
         r_cnt = r_cnt + 1
         if (mod(r_cnt,5) = 1)
            stat =  alterlist(reply->results,r_cnt + 5)
         endif
         reply->results[r_cnt]->qc_result_id = q.qc_result_id,
         reply->results[r_cnt]->service_resource_cd = q.service_resource_cd,
         reply->results[r_cnt]->task_assay_cd = q.task_assay_cd,
         reply->results[r_cnt]->mnemonic = d.mnemonic,
         reply->results[r_cnt]->result_type_cd = q.result_type_cd,
         reply->results[r_cnt]->result_value_numeric = q.result_value_numeric,
         reply->results[r_cnt]->perform_dt_tm = cnvtdatetime(q.perform_dt_tm),
         reply->results[r_cnt]->result_status_cd = q.result_status_cd,
         reply->results[r_cnt]->result_process_cd = q.result_process_cd,
         reply->results[r_cnt]->result_control_cd = q.result_control_cd,
         reply->results[r_cnt]->qc_group_id = q.qc_group_id,
         reply->results[r_cnt]->resource_error_codes = q.resource_error_codes,
         reply->results[r_cnt]->rule_id = q.rule_id,
         reply->results[r_cnt]->mean = q.mean,
         reply->results[r_cnt]->prev_result_id = q.prev_result_id,
         reply->results[r_cnt]->clinical_std_dev = q.clinical_std_dev,
         reply->results[r_cnt]->statistical_std_dev = q.statistical_std_dev,
         reply->results[r_cnt]->abs_low = q.abs_low,
         reply->results[r_cnt]->abs_high = q.abs_high,
         reply->results[r_cnt]->numeric_raw_value = q.numeric_raw_value,
         reply->results[r_cnt]->preactive_ind = q.preactive_ind,
         reply->results[r_cnt]->qc_result_updt_cnt = q.updt_cnt,
         reply->results[r_cnt]->comment_ind = q.comment_ind,
         reply->results[r_cnt]->pdm_range_id = q.pdm_range_id,                        ;002
         reply->results[r_cnt]->pdm_param_id = q.pdm_param_id,                        ;002
         if (apr_exists = "Y")                                    ;001
              reply->results[r_cnt]->display_sequence = apr.display_sequence ;001
         else                                                     ;001
              reply->results[r_cnt]->display_sequence = 0         ;001
         endif                                                    ;001

;* Set the default data map in the event that no data map is found
         data_map_level = 0
         reply->results[r_cnt].max_digits = 8
         reply->results[r_cnt].min_digits = 1
         reply->results[r_cnt].min_decimal_places = 0
         if (qe1.event_type_cd = result_status_reviewed_cd)
           reply->results[r_cnt].review_tech = p1.name_full_formatted
           reply->results[r_cnt].review_dt_tm = qe1.event_dt_tm
         endif
         if (qe2.event_type_cd = result_status_reviewed2_cd)
           reply->results[r_cnt].review2_tech = p2.name_full_formatted
           reply->results[r_cnt].review2_dt_tm = qe2.event_dt_tm
         endif
      DETAIL
	row +0
       WITH
         outerjoin = d3,                  ;001
         dontcare = apr,                  ;001
         outerjoin = d1,
         dontcare = qe1,
         dontcare = p1,
         outerjoin = d2,
         dontcare = qe2,
         dontcare = p2,
         nocounter

      set stat = alterlist(reply->results,r_cnt)

      set error_check = ERROR(sErrorMsg,0)   ;get error message
      if (error_check != 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
        go to exit_script
      endif

      if (r_cnt = 0)
        set reply->status_data->status = "Z"
      else
        set reply->status_data->status = "S"
      endif

      go to exit_script

/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
END
GO

;Generated by GNU enscript 1.6.4.
