 ;;Solution_Test/script/PathNet -- Gen Lab/glb_add_robotics_av_transaction/glb_add_robotics_av_transaction.prg Turn on black mode


/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_add_robotics_av_transaction.prg
        Object name:            glb_add_robotics_av_transaction
        Request #:              250203

        Product:                General Lab
        Product Team:           Pathnet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Used by autoverify server to pass the
                                task_assay_cds,av_error_cds,etc to robotics when
                                results have been performed on an instrument.

        Tables read:            none
        Tables updated:         robotics_av_transaction
        Executing from:

        Special Notes:          None

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 06/07/00 Terry Weakley        Initial Release                     *
;     002 07/03/00 Chris Heil           Move order_id up in request.        *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop   program glb_add_robotics_av_trans:dba go
create program glb_add_robotics_av_trans:dba

/****************************************************************************
*     Request record                                                        *
*****************************************************************************/
/*
record request
(  1 service_resource_cd             f8
   1 max_errors_per_list             i4
   1 assay_list[*]
     2 order_id                      f8                                                            ;002
     2 task_assay_cd                 f8
     2 initial_ind                   i2
     2 error_list[*]
        3 av_error_cd                f8
;002         3 order_id                   f8
)
*/

/****************************************************************************
*     Reply record                                                          *
*****************************************************************************/
record reply
( 
  1 robotics_av_transaction_id   = f8
%i cclsource:status_block.inc
)

/****************************************************************************
*     Initialize Variables                                                  *
*****************************************************************************/
declare transaction_id = f8

set reply->status_data->status = "F"
set failed = "F"
set nbr_of_assays = size(request->assay_list,5)

/****************************************************************************
*     Determine if this result is the initial result for this order/assay.  *
*****************************************************************************/
select into "nl:"
  r_ind = decode(r.seq, "Y", "N")
from (dummyt d1 with seq = value(size(request->assay_list,5))),
     (dummyt d2 with seq = 1),
     result r
plan d1
join d2
join r
  where r.order_id = request->assay_list[d1.seq]->order_id
    and r.task_assay_cd = request->assay_list[d1.seq]->task_assay_cd

detail
  if (r_ind = "Y")
    request->assay_list[d1.seq]->initial_ind = 0
  else
    request->assay_list[d1.seq]->initial_ind = 1
  endif

with outerjoin = d2,
     nocounter

/****************************************************************************
*     Get sequence number                                                   *
*****************************************************************************/
select into "nl:"
    nextseqnum = seq(robotics_seq, nextval) "#################;RP0"
from dual
detail
    transaction_id = nextseqnum
with format, nocounter

insert into robotics_av_transaction ra,
       (dummyt d1 with seq = value(size(request->assay_list,5))),
       (dummyt d2 with seq = value(request->max_errors_per_list)) set

  ra.robotics_av_transaction_id = transaction_id,
  ra.service_resource_cd        = request->service_resource_cd,
  ra.task_assay_cd              = request->assay_list[d1.seq]->task_assay_cd,
  ra.initial_ind                = request->assay_list[d1.seq]->initial_ind,
  ra.av_error_cd                = request->assay_list[d1.seq]->error_list[d2.seq]->av_error_cd,
;002   ra.order_id                   = request->assay_list[d1.seq]->error_list[d2.seq]->order_id,
  ra.order_id                   = request->assay_list[d1.seq]->order_id,                           ;002
  ra.updt_dt_tm                 = cnvtdatetime(curdate,curtime3),
  ra.updt_id                    = reqinfo->updt_id,
  ra.updt_task                  = reqinfo->updt_task,
  ra.updt_applctx               = reqinfo->updt_applctx,
  ra.updt_cnt                   = 0

  plan d1
  join d2
     where d2.seq <= size(request->assay_list[d1.seq]->error_list,5)
  join ra

  with nocounter

if (curqual = 0)
   set failed = "T"
endif


if (failed = "T")
  set reqinfo->commit_ind = 0
else
  set reqinfo->commit_ind = 1
  set reply->robotics_av_transaction_id = transaction_id
  set reply->status_data->status = "S"
;  call echo(build("transaction id: ",cnvtstring(reply->robotics_av_transaction_id)))
endif

end go

;Generated by GNU enscript 1.6.4.
