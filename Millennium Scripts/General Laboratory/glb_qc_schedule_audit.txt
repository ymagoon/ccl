 ;;Solution_Test/script/PathNet -- Gen Lab/glb_qc_schedule_audit/glb_qc_schedule_audit.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 2001 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       glb_qc_schedule_audit,prg
        						glb_qc_schedule_audit

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        This is an audit to show the user where they are
                                in the QC schedule by selecting a desired service
                                resource.


        Tables read:            qc_step_status
                                qc_schedule
        						qc_schedule_step
        						qc_schedule_ctrl
	                            qc_result
	                            qc_result_event

        Tables updated:         none
        
        Executing from:         CCL

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 06/5/01  Gary Runde           Initial Release                     *
;    *001 08/2/01  Gary Runde           Do not return zero row in help      *
;~DE~************************************************************************

drop   program glb_qc_schedule_audit:dba go
create program glb_qc_schedule_audit:dba

cclseclogin2

; I18N INCLUDE FILE
%i cclsource:i18n_uar.inc

; INITIALIZE VARIABLE THAT KEEPS HANDLE TO I18N DATA
declare i18nHandle = i4 with public, noconstant(0)

declare g_enforce_verified_results_ind  = i2 with protect, noconstant(0)

; CALL uar_i18nlocalizationinit
declare h = i4 with public, noconstant(0)
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)

   record i18nCaptions
   (
     1 sDate               = vc
     1 sTime               = vc
     1 sTitle              = vc
     1 sPageNumber         = vc
     1 sAssayHdr           = vc
     1 sStep               = vc
     1 sComplete           = vc
     1 sExpire             = vc
     1 sDtTm               = vc
     1 sNext               = vc
     1 sGroup              = vc
     1 sLimit              = vc
     1 sControlsRun        = vc
     1 sControlsScheduled  = vc
     1 sProblemResults     = vc
     1 sServiceResource    = vc
     1 sCycleStartTime     = vc
     1 sQCValidLevel       = vc
     1 sPerformed          = vc
     1 sOutofCntrl         = vc
     1 sNone               = vc
     1 sInstrument         = vc
     1 sOff                = vc
     1 sAssay              = vc
     1 sReportTitle        = vc
     1 sTestSite           = vc
     1 sHelp               = vc
     1 sNoAssaysFound      = vc
     1 sVerify             = vc
     1 sMinutes            = vc
     1 sResults            = vc
     1 sCurrent            = vc
   )
        
   set i18nCaptions->sDate = uar_i18ngetmessage(i18nHandle,"key_1","DATE:")
   set i18nCaptions->sTime = uar_i18ngetmessage(i18nHandle,"key_2","TIME:")
   set i18nCaptions->sTitle = uar_i18ngetmessage(i18nHandle,
                            "key_3","G E N E R A L  L A B  Q C  S C H E D U L E  A U D I T")
   set i18nCaptions->sPageNumber = uar_i18ngetmessage(i18nHandle,"key_4","PAGE NO:")
   set i18nCaptions->sAssayHdr = uar_i18ngetmessage(i18nHandle,"key_5","ASSAY")
   set i18nCaptions->sStep = uar_i18ngetmessage(i18nHandle,"key_6","STEP")
   set i18nCaptions->sComplete = uar_i18ngetmessage(i18nHandle,"key_7","COMPLETE")
   set i18nCaptions->sExpire = uar_i18ngetmessage(i18nHandle,"key_8","EXPIRATION")
   set i18nCaptions->sDtTm = uar_i18ngetmessage(i18nHandle,"key_9","DATE/TIME")
   set i18nCaptions->sNext = uar_i18ngetmessage(i18nHandle,"key_10","NEXT")
   set i18nCaptions->sGroup = uar_i18ngetmessage(i18nHandle,"key_11","GROUP")
   set i18nCaptions->sLimit = uar_i18ngetmessage(i18nHandle,"key_12","LIMIT")
   set i18nCaptions->sControlsRun = uar_i18ngetmessage(i18nHandle,"key_13","Controls Run:")
   set i18nCaptions->sControlsScheduled = uar_i18ngetmessage(i18nHandle,"key_14","Controls Scheduled:")
   set i18nCaptions->sProblemResults = uar_i18ngetmessage(i18nHandle,"key_15","Problem Results:")
   set i18nCaptions->sServiceResource = uar_i18ngetmessage(i18nHandle,"key_16","Service Resource:")
   set i18nCaptions->sCycleStartTime = uar_i18ngetmessage(i18nHandle,"key_17","Cycle Start Time:")
   set i18nCaptions->sQCValidLevel = uar_i18ngetmessage(i18nHandle,"key_18","QC Validation Level:")
   set i18nCaptions->sPerformed = uar_i18ngetmessage(i18nHandle,"key_19","Performed Results")
   set i18nCaptions->sOutofCntrl = uar_i18ngetmessage(i18nHandle,"key_20","Out of Control Results")
   set i18nCaptions->sInstrument = uar_i18ngetmessage(i18nHandle,"key_21","Instrument")
   set i18nCaptions->sAssay = uar_i18ngetmessage(i18nHandle,"key_22","Assay")
   set i18nCaptions->sNone = uar_i18ngetmessage(i18nHandle,"key_224","None")
   set i18nCaptions->sOff = uar_i18ngetmessage(i18nHandle,"key_23","Off")
   set i18nCaptions->sReportTitle = uar_i18ngetmessage(i18nHandle,"sRepTitle", 
                                         "GLB QC Schedule Audit")
   set i18nCaptions->sHelp = uar_i18ngetmessage(i18nHandle,"sHelpString", 
                                         "Press <Shift F5> for help")
   set i18nCaptions->sTestSite = uar_i18ngetmessage(i18nHandle,"AcptString", "Test Site")
   set i18nCaptions->sNoAssaysFound = uar_i18ngetmessage(i18nHandle,"sNoAssaysFound",
                          "No data found for the selected instrument.")
   set i18nCaptions->sVerify = uar_i18ngetmessage(i18nHandle, "VerifyString", "VERIFY")
   set i18nCaptions->sMinutes = uar_i18ngetmessage(i18nHandle, "MinutesString", "MINUTES")
   set i18nCaptions->sResults = uar_i18ngetmessage(i18nHandle, "ResultsString", "RESULTS")
   set i18nCaptions->sCurrent = uar_i18ngetmessage(i18nHandle, "Current", "CURRENT")
   
  /**************************************************************/
  /* Subroutine to prompt the user to enter a test site         */
  /**************************************************************/
declare PromptForTestSite (none) = i2
subroutine PromptForTestSite (none)

  declare resource_dispkey = vc with public, noconstant(fillstring(12, " "))

  ;clear the screen
  call clear(1,1)
  ;set the video display 
  call video(L)
  ;draw box around screen
  call box   (1,1,22,80)
  ;draw the header line
  call line  (3,1,80,XHORAZ)

  ;display report title
  call text (2, 3, i18nCaptions->sReportTitle)

  ;display string asking user to input service resource
  call text(9, 3, i18nCaptions->sTestSite)	

  call text(21, 3, i18nCaptions->sHelp)
  ;set up the help string
  set help select 
             Instrument = uar_get_code_display(qs.service_resource_cd)
           from 
             qc_schedule qs         
           plan qs where qs.qc_schedule_id > 0.0           ;001
           order by Instrument
           with nocounter

  ;set the position on the screen for the help box
  set help = POS(5, 30, 10, 30)
  
  ;accept the service resource code they select
  call accept(9, 40, "CCCCCCCCCCCCCCCCCCC;;CU")  
  
  ;turn off the help string
  set help = off
  
  ;clear the screen
  call clear(1,1)

  ;get the service resource CDF from what the user entered
  set resource_dispkey = cnvtupper(cnvtalphanum(curaccept))

  ;get the service resource code by planning from the 
  ;code value table and joining to the qc_schedule table
  ;so that only a valid schedule resource is returned.
  select into "nl:"
    cv.code_value,
    qs.service_resource_cd
  from 
    code_value cv,
    qc_schedule qs
  plan cv
    where cv.code_Set = 221
      and cv.display_key = resource_dispkey
  join qs
    where qs.service_resource_cd = cv.code_value
      and qs.active_ind = 1
      and cnvtdatetime(g_curr_date_time) between 
                qs.beg_effective_dt_tm and qs.end_effective_dt_tm
  detail
    g_service_resource_cd = cv.code_value
  with nocounter
  
end

  /**********************************************************************************/
  /* Retrieve all of the available assays under this service resource's schedule    */
  /**********************************************************************************/
declare GetQCScheduleAssays (none) = i2
subroutine GetQCScheduleAssays (none)

	;get the step information for this resource
	select into "nl:"
	   qs.qc_schedule_id,
	   qs.service_resource_cd,
	   serv_res_disp = uar_get_code_display(qs.service_resource_cd),
	   qsc.control_id,
	   cl.lot_id,
	   rlr.service_resource_cd,
	   arl.task_assay_cd,
	   task_assay_disp = substring(1, 15, uar_get_code_display(arl.task_assay_cd)),
	   li.service_resource_cd
	from qc_schedule qs,
	     qc_schedule_ctrl qsc,
         control_lot cl,
         resource_lot_r rlr,
         assay_resource_lot arl,
         lab_instrument li,
         qc_step_status qss
    plan qs
      where qs.service_resource_cd = g_service_resource_cd and
            qs.active_ind = 1 and
            cnvtdatetime(g_curr_date_time)
                 between qs.beg_effective_dt_tm and qs.end_effective_dt_tm
    join qsc
      where qsc.qc_schedule_id = qs.qc_schedule_id
    ;join to control_lot to get active lot
    join cl
      where cl.control_id = qsc.control_id
        and cl.lot_flag = 1
    ;join to resource_lot_r to make sure the resource is active
    join rlr
      where rlr.lot_id = cl.lot_id
        and rlr.service_resource_cd+0 = g_service_resource_cd
        and cnvtdatetime(curdate,curtime3) between
                 rlr.defined_active_dt_tm and
                 rlr.defined_inactive_dt_tm
    ;join to assay_resource_lot to get only the controls that
    ;contain the desired task_assay_cd
    join arl
      where arl.lot_id = cl.lot_id
        and arl.service_resource_cd+0 = rlr.service_resource_cd
        and arl.active_ind = 1
    ;join to the lab instrument to get info
    join li
      where li.service_resource_cd = qs.service_resource_cd
    ;join to the qc_step_status to find the last step completed, if one exists
    join qss
      where qss.service_resource_cd = outerjoin(arl.service_resource_cd)
        and qss.task_assay_cd = outerjoin(arl.task_assay_cd)
    order by qs.qc_schedule_id, arl.task_assay_cd, cnvtdatetime(qss.step_complete_dt_tm) desc
    head qs.qc_schedule_id
       ;get the qc schedule information
       QCAssayInfo->service_resource_cd = qs.service_resource_cd
       QCAssayInfo->service_resource_disp = serv_res_disp
       QCAssayInfo->cycle_start_dt_tm = qs.start_dt_tm
       if (li.av_req_qc_ind = 1)
          QCAssayInfo->qc_valid_level_ind = li.av_chk_part_qc_ind
       else
          QCAssayInfo->qc_valid_level_ind = -1
       endif
       QCAssayInfo->multi_control_limit = qs.multi_control_limit
       QCAssayInfo->qc_schedule_id = qs.qc_schedule_id
       g_enforce_verified_results_ind = qs.enforce_verified_results_ind
    head arl.task_assay_cd
       ;get the assay information
       g_num_assays = g_num_assays + 1
       if (mod(g_num_assays, 5) = 1)
          stat = alterlist(QCAssayInfo->assays, g_num_assays + 5)
       endif
       QCAssayInfo->assays[g_num_assays].task_assay_cd   = arl.task_assay_cd
       QCAssayInfo->assays[g_num_assays].task_assay_disp = task_assay_disp
       if (qss.qc_step_status_id > 0.0)
         QCAssayInfo->assays[g_num_assays].last_step_found_ind = 1
call echo("here")         
call echo("here")         
call echo("here")         
call echo("here")         
call echo(qss.step_nbr)         
         QCAssayInfo->assays[g_num_assays].last_step_completed_nbr  = qss.step_nbr
         QCAssayInfo->assays[g_num_assays].verify_minutes_nbr = qss.verify_minutes_nbr
         QCAssayInfo->assays[g_num_assays].verify_results_nbr = qss.verify_results_nbr
         QCAssayInfo->assays[g_num_assays].current_results_nbr = qss.current_results_nbr
         QCAssayInfo->assays[g_num_assays].last_step_complete_dt_tm = qss.step_complete_dt_tm
         QCAssayInfo->assays[g_num_assays].last_step_expire_dt_tm = 
               datetimeadd(cnvtdatetime(qss.step_complete_dt_tm),
                          (cnvtreal(qss.interval_min) / 1440.0))
         QCAssayInfo->assays[g_num_assays].next_step_nbr = 0
       else
         QCAssayInfo->assays[g_num_assays].last_step_found_ind = 0
       endif
    foot qs.qc_schedule_id
       if (g_num_assays > 0)
          stat = alterlist(QCAssayInfo->assays, g_num_assays)
       endif
    with nocounter

end       ;subroutine GetQCScheduleAssays

  /************************************************************************/
  /* Get this schedule's steps and fill out the steps record structure    */
  /************************************************************************/
declare GetQCScheduleSteps (none) = i2
subroutine GetQCScheduleSteps (none)

call echo("Begin subroutine GetQCScheduleSteps")
    ;set the counter for the number of steps to be zero
    set g_num_steps = 0

	;get the step information for this resource
	select into "nl:"
	   qst.step_nbr,
	   qst.interval_min
	from qc_schedule_step qst
    plan qst
      where qst.qc_schedule_id = QCAssayInfo->qc_schedule_id
    order by qst.step_nbr
    head report
       g_num_steps = 0
    head qst.step_nbr
       ;get the step information
       g_num_steps = g_num_steps + 1
       if (mod(g_num_steps, 5) = 1)
          stat = alterlist(steps->steps, g_num_steps + 5)
       endif
       steps->steps[g_num_steps].verify_minutes_nbr = qst.verify_minutes_nbr
       steps->steps[g_num_steps].verify_results_nbr = qst.verify_results_nbr
       steps->steps[g_num_steps].step_nbr = qst.step_nbr
       steps->steps[g_num_steps].interval_min = qst.interval_min
    foot report
       if (g_num_steps > 0)
          stat = alterlist(steps->steps, g_num_steps)
       endif
    with nocounter
end       ;subroutine GetQCScheduleSteps

  /************************************************************************/
  /* Evaluate the assays found and calculate the current step number      */
  /************************************************************************/
declare ProcessAssaysFound (none) = i2
subroutine ProcessAssaysFound (none)

    call echo("Begin subroutine ProcessAssaysFound")

    declare cycle_start_dt_tm = q8 with private, noconstant(cnvtdatetime(curdate, curtime3))
    declare step_begin_dt_tm = q8 with private, noconstant(cnvtdatetime(curdate, curtime3))
    declare step_end_dt_tm = q8 with private, noconstant(cnvtdatetime(curdate, curtime3))
    declare cycle_start_dt_tm = q8 with private, noconstant(cnvtdatetime(curdate, curtime3))
    declare cycle_start_dt_tm = q8 with private, noconstant(cnvtdatetime(curdate, curtime3))
    declare curr_mins = vc
    declare cycleStartMins = vc
    declare tempdatestr = vc
    declare temptimestr = vc
    declare s_cnt = i4 with private, noconstant(0)

    set g_assay_cnt = 0

    ;get the current dt/tm's minutes
    set curr_mins = format(cnvtdatetime(g_curr_date_time), "hhmmss;;m")
    ;format the schedule start time's minutes so we can compare it to the current date/time's minutes
    set cycleStartMins = format(cnvtdatetime(QCAssayInfo->cycle_start_dt_tm), "hhmmss;;m")

    ;if the current minutes is before the cycle start minutes then
    ;the cycle started yesterday, else the cycle started today
    if (curr_mins < cycleStartMins)
       set tempdatestr = format(cnvtdatetime(curdate-1, curtime3), "dd-mmm-yyyy;;d")
    else
       set tempdatestr = format(cnvtdatetime(curdate, curtime3), "dd-mmm-yyyy;;d")
    endif

    ;format the schedule start time's minutes so it can be used in the cnvtdatetime function
    set temptimestr = format(cnvtdatetime(QCAssayInfo->cycle_start_dt_tm), "hh:mm:ss;;m")

    ;convert the datetime to a rdb string value and set it to the cycle start date/time
    set cycle_start_dt_tm = cnvtdatetime(concat(trim(tempdatestr), " ", trim(temptimestr)))

    for (g_assay_cnt = 1 to g_num_assays)

    call echo("Going to process assay->", 0)
    call echo(QCAssayInfo->assays[g_assay_cnt].task_assay_disp)
      ;first check to see if the current time is after the cycle start time
      ;and the last step complete time is before the cycle start time
      ;or no step number was found that was completed

      if (((cnvtdatetime(g_curr_date_time) >= cnvtdatetime(cycle_start_dt_tm)) and
           (cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].last_step_complete_dt_tm) < cnvtdatetime(cycle_start_dt_tm))
           and (QCAssayInfo->assays[g_assay_cnt].last_step_completed_nbr > 0))
         or (QCAssayInfo->assays[g_assay_cnt].last_step_found_ind = 0))
         ;we need to evaluate what step we are on based on the cycle start time
         call echo("no step status row found or we have started the new cycle")
         ;start out with the step begin and end date/time the same as the cycle start time
         set step_begin_dt_tm = cnvtdatetime(cycle_start_dt_tm)
         set step_end_dt_tm = cnvtdatetime(cycle_start_dt_tm)

         set s_cnt = 0
  
         while (QCAssayInfo->assays[g_assay_cnt].next_step_nbr = 0)
            ;if we are on the last step, reset the step
            if (s_cnt = g_num_steps)
              set s_cnt = 0
            endif
            ;increment the step number to add the minutes to the
            ;next value
            set s_cnt = s_cnt + 1
            ;the begin date/time will be the same as the end_dt_tm of the previous step
            set step_begin_dt_tm = step_end_dt_tm
            ;the end date/time will be the begin date/time plus the interval minutes for this step
            set step_end_dt_tm = datetimeadd(cnvtdatetime(step_begin_dt_tm),
                                        (cnvtreal(steps->steps[s_cnt].interval_min) / 1440.0))
            ;if the current date/time is between the step's start and end date/time then this
            ;is the step that we are currently on
            if (cnvtdatetime(g_curr_date_time) >= cnvtdatetime(step_begin_dt_tm) 
               and cnvtdatetime(g_curr_date_time) < cnvtdatetime(step_end_dt_tm))
                ;set the start time for the next step number
                set QCAssayInfo->assays[g_assay_cnt].next_step_start_dt_tm = cnvtdatetime(step_begin_dt_tm)
                ;call sub to check to see if this step number contains this assay
                ;and to set the step_nbr and step_mins
                call CheckStepNumberFound(s_cnt)
            endif
         endwhile
      ;elseif check to see if the last step completed has expired yet
      elseif ((cnvtdatetime(g_curr_date_time) >= cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].last_step_complete_dt_tm) 
           and cnvtdatetime(g_curr_date_time) < cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].last_step_expire_dt_tm))  
           and (QCAssayInfo->assays[g_assay_cnt].last_step_completed_nbr > 0))
         ;if step is not expired the current step number to use is the last one plus one
call echo("step status row found and it is not expired")         
         ;set the start time for the next step number
         set QCAssayInfo->assays[g_assay_cnt].next_step_start_dt_tm = 
                      cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].last_step_complete_dt_tm)
         ;the current is the next step number
         ;if we are on the last step, reset the step
         if (QCAssayInfo->assays[g_assay_cnt].last_step_completed_nbr = g_num_steps)
 
           ;call sub to check to see if this step number contains this assay
           ;and to set the step_nbr and step_mins
            call CheckStepNumberFound(1)
         else
           ;call sub to check to see if this step number contains this assay
           ;and to set the step_nbr and step_mins
            call CheckStepNumberFound(QCAssayInfo->assays[g_assay_cnt].last_step_completed_nbr + 1)
         endif
      ;else check to see if the current step has expired
      ;and we are not on the next cycle yet
      elseif ((cnvtdatetime(g_curr_date_time) > 
               cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].last_step_expire_dt_tm))
               and (QCAssayInfo->assays[g_assay_cnt].last_step_completed_nbr > 0))
call echo("Step status row found but it is expired")
         ;start the steps at the step number that expired
         set s_cnt = QCAssayInfo->assays[g_assay_cnt].last_step_completed_nbr
         ;set the beg and end dt/tm to the time that the step expired
         set step_begin_dt_tm = cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].last_step_complete_dt_tm)
         set step_end_dt_tm = cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].last_step_complete_dt_tm)

         while (QCAssayInfo->assays[g_assay_cnt].next_step_nbr = 0)
            ;if we are on the last step, reset the step
            if (s_cnt = g_num_steps)
               set s_cnt = 0
            endif
           ;increment the step number to add the minutes to the
           ;next value
            set s_cnt = s_cnt + 1
           ;the begin date/time will be the same as the end_dt_tm of the previous step
            set step_begin_dt_tm = step_end_dt_tm
            ;the end date/time will be the begin date/time plus the interval minutes for this step
            set step_end_dt_tm = datetimeadd(cnvtdatetime(step_begin_dt_tm),
                                        (cnvtreal(steps->steps[s_cnt].interval_min) / 1440.0))
            ;if the current date/time is between the step's start and end date/time then this
            ;is the step that we are currently on
            if (cnvtdatetime(g_curr_date_time) >= cnvtdatetime(step_begin_dt_tm) 
               and cnvtdatetime(g_curr_date_time) < cnvtdatetime(step_end_dt_tm))
                ;set the start time for the next step number
                set QCAssayInfo->assays[g_assay_cnt].next_step_start_dt_tm = 
                         cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].last_step_complete_dt_tm)

                ;call sub to check to see if this step number contains this assay
                call CheckStepNumberFound(s_cnt)
            endif
         endwhile
      endif      
    endfor

    ;call subroutine to display information to the user
    call DisplayQCScheduleData (0)
call echo("End subroutine ProcessAssaysFound")
end               ;subroutine ProcessAssaysFound

  /************************************************************************/
  /* Check to see if the step found contains the resource/assay we are on */
  /* and retrieve the controls for the current step that we are on        */
  /************************************************************************/
declare CheckStepNumberFound (step_cnt) = i2
subroutine CheckStepNumberFound (step_cnt)

call echo("Begin subroutine CheckStepNumberFound")
    ;variable to tell whether we have found a step with this assay
    declare found_step_nbr_valid = i4 with public, noconstant(0)

    ;variable to count the number of steps we have checked
    declare eval_step_cnt = i4 with public, noconstant(0)

    ;counter to go through the steps record structure
    declare s_cnt = i4 with public, noconstant(step_cnt)
    
    ;counter for number of controls
    declare num_cntrls = i4 with public, noconstant(0)

    ;loop until we either find a step that contains the assay
    while (found_step_nbr_valid = 0)

       set eval_step_cnt = eval_step_cnt + 1
       set num_cntrls = 0

       ;check the QC tables to see if this current step contains
       ;a control that contains this assay
       select into "nl:"
          qsc.control_id,
          qsc.step_nbr,
          cm.control_id,
          cl.lot_id,
          rlr.lot_id,
          arl.task_assay_cd,
          qsca_exists_ind = evaluate(nullind(qsca.qc_schedule_id),0,1,0)
       from
          qc_schedule_ctrl qsc,
          control_material cm,
          control_lot cl,
          resource_lot_r rlr,
          assay_resource_lot arl,
          qc_schd_step_ctrl_assay qsca
       plan qsc
         where qsc.qc_schedule_id = QCAssayInfo->qc_schedule_id
           and qsc.step_nbr = steps->steps[s_cnt].step_nbr
       join cm
         where cm.control_id = qsc.control_id
       join cl
         where cl.control_id = qsc.control_id
           and cl.lot_flag = 1
       join rlr
         where cl.lot_id = rlr.lot_id
           and rlr.service_resource_cd+0 = g_service_resource_cd
           and cnvtdatetime(curdate,curtime3) between
                    rlr.defined_active_dt_tm and
                    rlr.defined_inactive_dt_tm
       join arl
         where arl.lot_id = cl.lot_id
           and arl.service_resource_cd+0 = rlr.service_resource_cd
           and arl.task_assay_cd+0 = QCAssayInfo->assays[g_assay_cnt].task_assay_cd
           and arl.active_ind = 1
       join qsca 
         where qsca.control_id = outerjoin(qsc.control_id)
           and qsca.error_step_ind = outerjoin(qsc.error_step_ind)
           and qsca.qc_schedule_id = outerjoin(qsc.qc_schedule_id)
           and qsca.step_nbr = outerjoin(qsc.step_nbr)
       order by qsc.control_id, qsca.task_assay_cd
       head qsc.control_id
          ;if a valid step number has been found, load the controls for the step number
          match_found_ind = 0
          if (qsca_exists_ind = 0)
            match_found_ind = 1
          endif
       head qsca.task_assay_cd
         if (qsca_exists_ind = 1 and qsca.task_assay_cd = QCAssayInfo->assays[g_assay_cnt].task_assay_cd)
           match_found_ind = 1
         endif
       foot qsc.control_id
         if (match_found_ind = 1)
           num_cntrls = num_cntrls + 1
           if (mod(num_cntrls, 5) = 1)
             stat = alterlist(QCAssayInfo->assays[g_assay_cnt].controls, num_cntrls + 5)
            endif
            found_step_nbr_valid = 1
            QCAssayInfo->assays[g_assay_cnt].next_step_nbr = steps->steps[s_cnt].step_nbr
            QCAssayInfo->assays[g_assay_cnt].controls[num_cntrls].control_id = qsc.control_id
            QCAssayInfo->assays[g_assay_cnt].controls[num_cntrls].control_name = cm.short_description
            QCAssayInfo->assays[g_assay_cnt].controls[num_cntrls].control_run_ind = 0
            if (g_enforce_verified_results_ind = 1)
              QCAssayInfo->assays[g_assay_cnt].verify_minutes_nbr = steps->steps[s_cnt].verify_minutes_nbr
              QCAssayInfo->assays[g_assay_cnt].verify_results_nbr = steps->steps[s_cnt].verify_results_nbr
            elseif (g_enforce_verified_results_ind = 0)
              QCAssayInfo->assays[g_assay_cnt].verify_minutes_nbr = 0
              QCAssayInfo->assays[g_assay_cnt].verify_results_nbr = 0
            endif             
          endif
call echo("The number of controls found for this step is->", 0)
call echo(num_cntrls)
       with nocounter
       
       if (num_cntrls > 0)
         set QCAssayInfo->assays[g_assay_cnt].num_controls = num_cntrls
         set stat = alterlist(QCAssayInfo->assays[g_assay_cnt].controls, num_cntrls)
       endif
       
       ;if controls were found for this assay, call the CheckAssaysControlsRun subroutine
       if ((num_cntrls > 0) and (found_step_nbr_valid = 1))
         call CheckAssaysControlsRun (0)
       endif    

       ;if this step does not contain the assay and we have not evaluated all of the steps
       ;then increment to the next step number
       if ((found_step_nbr_valid = 0) and
           (eval_step_cnt < g_num_steps))
call echo("We found that step number->", 0)
call echo(steps->steps[s_cnt].step_nbr, 0)
call echo(" is not valid")
          ;if we are on the last step, then go back to the first step
          if (s_cnt = g_num_steps)
             set s_cnt = 0
          endif

          ;increment the step counter
          set s_cnt = s_cnt + 1
       elseif ((found_step_nbr_valid = 0) and
               (eval_step_cnt = g_num_steps))
call echo("all steps have been searched and no valid step number has been found")
          ;we have evaluated all of the steps so no current step number found
          ;set the found_step_nbr_valid to get out of this while loop
          set found_step_nbr_valid = 1
          
          ;set the step number to a -1 to get out of the while statement in the
          ;while (g_curr_step_nbr = 0) statement in GetCurrentStepNumber sub
          set QCAssayInfo->assays[g_assay_cnt].next_step_nbr = -1
       endif
    endwhile

call echo("End subroutine CheckStepNumberFound")
end             ;subroutine CheckStepNumberFound

  /**************************************************************/
  /* Query the qc result table looking for controls ran         */
  /**************************************************************/
declare CheckAssaysControlsRun (none) = i2
subroutine CheckAssaysControlsRun (none)
    ;sub to check to see if all of the controls have been ran for this step

    set g_num_results = 0

    select into "nl:"
      d1.seq,
      d2.seq,
      qr.task_assay_cd,
      qr.service_resource_cd,
      qr.result_control_cd,
      qre.event_dt_tm,
      qr_exists = decode(qr.seq, "Y", "N"),
      qr2_exists = decode(qr2.seq, "Y", "N")
    from
      (dummyt d1 with seq = value(QCAssayInfo->assays[g_assay_cnt].num_controls)),
      (dummyt d2 with seq = 1),
      qc_result qr,
      qc_result_event qre,
      (dummyt d3 with seq = 1),
      qc_result qr2
    plan d1
    join d2
    join qr
      where qr.task_assay_cd = QCAssayInfo->assays[g_assay_cnt].task_assay_cd
        and qr.service_resource_cd = g_service_resource_cd
        and qr.control_id = QCAssayInfo->assays[g_assay_cnt].controls[d1.seq].control_id
        and qr.preactive_ind = 0
        and qr.qc_result_type_flag = 0
    join qre
      where qre.qc_result_id = qr.qc_result_id
        and qre.event_type_cd = qr.result_status_cd
        and qre.event_dt_tm > cnvtdatetime(QCAssayInfo->assays[g_assay_cnt].next_step_start_dt_tm)
        and qre.event_dt_tm <= cnvtdatetime(curdate, curtime3)
    join d3
    join qr2
      where qr2.task_assay_cd = QCAssayInfo->assays[g_assay_cnt].task_assay_cd
        and qr2.service_resource_cd = g_service_resource_cd
        and qr2.preactive_ind = 0
        and qr2.qc_result_type_flag = 0
        and qr2.result_status_cd = result_status_performed_cd
    order by d1.seq, cnvtdatetime(qre.event_dt_tm) desc
    head d1.seq

       if (qr_exists = "Y")
         ;if the qc results have been found, see if the result is either in_control or checked
         ;and the result status cd is either autoverified, verified, accepted, or changed
         if ((qr.result_control_cd in (in_control_cd, checked_cd))
          and (qr.result_status_cd in (result_status_verified_cd, result_status_auto_verf_cd, 
                                       result_status_accepted_cd, result_status_changed_cd)))
               ;set the indicator to say this control has been ran successfully
call echo("found successful run for control ", 0)
call echo(QCAssayInfo->assays[g_assay_cnt].controls[d1.seq].control_name)
               QCAssayInfo->assays[g_assay_cnt].controls[d1.seq].control_run_ind = 1
               QCAssayInfo->assays[g_assay_cnt].controls[d1.seq].control_run_dt_tm = cnvtdatetime(qre.event_dt_tm)
         ;if the if statement above is not successful check to see if the result has been rejected or discarded becase
         ;it is out of control
         elseif ((qr.result_status_cd = result_status_rejected_cd) or
                 (qr.result_status_cd = result_status_discard_cd))
call echo("found out of control result for assay ", 0)
call echo(QCAssayInfo->assays[g_assay_cnt].task_assay_disp)
           QCAssayInfo->assays[g_assay_cnt].problem_results_ind = problem_results_out_of_control
         endif
       endif
       ;if we have found not any problems with the results above, check to see if any results are performed only
       if ((qr2_exists = "Y") and (QCAssayInfo->assays[g_assay_cnt].problem_results_ind = 0))
          ;if the QR2 table exists it means we have performed results
          ;and we will not allow the user to turn on AV with them
          ;set the problem_results_ind to indicate perform results found
call echo("found performed result for assay ", 0)
call echo(QCAssayInfo->assays[g_assay_cnt].task_assay_disp)
          QCAssayInfo->assays[g_assay_cnt].problem_results_ind = problem_results_performed
       endif
    with nocounter, 
         outerjoin = d2,
         dontcare  = qr,
         dontcare  = qre,
         outerjoin = d3
    
end        ;subroutine CheckAssaysControlsRun


  /**************************************************************/
  /* Display the retrieved data on the screen to the user       */
  /**************************************************************/
declare DisplayQCScheduleData (none) = i2
subroutine DisplayQCScheduleData (none)
   
   declare line = vc with public, constant(fillstring(130,"-"))
   declare c_cnt = i4 with public, noconstant(0)
   declare found = i4 with public, noconstant(0)
   declare sDateStr = vc with public, noconstant(fillstring(90," "))
   declare sTimeStr = vc with public, noconstant(fillstring(90," "))
   declare sCycleStartTimeStr = vc with public, noconstant(fillstring(90," "))
   declare sCompleteDateStr = vc with public, noconstant(fillstring(30," "))
   declare sCompleteTimeStr = vc with public, noconstant(fillstring(30," "))
   declare sExpireDateStr = vc with public, noconstant(fillstring(30," "))
   declare sExpireTimeStr = vc with public, noconstant(fillstring(30," "))
   declare sControlRunDateStr = vc with public, noconstant(fillstring(90," "))
   declare sControlRunTimeStr = vc with public, noconstant(fillstring(90," "))
   declare sControlRunStr = vc with public, noconstant(fillstring(90," "))

   select into "MINE"
     d1.seq
   from 
     (dummyt d1 with seq = value(g_num_assays))
   plan d1
   head page
     ;display the date at the top left of the page
     row 0
     col 1  i18nCaptions->sDate     
     sDateStr = format(cnvtdatetime(curdate, curtime3), "@MEDIUMDATE4YR")
     sDateStr = trim(sDateStr)
     col 8 sDateStr
     ;display the page number at the top right of the page
     col 113 i18nCaptions->sPageNumber
     col 124 CURPAGE "###;L"
     ;display the report title in the center of the page
     call center(i18nCaptions->sTitle,1,132)
     ;display the time under the date at the top of the page
     row 1
     col 1  i18nCaptions->sTime
     sTimeStr = format(cnvtdatetime(curdate, curtime3), "@TIMENOSECONDS")
     sTimeStr = trim(sTimeStr)
     col 8 sTimeStr
     ;display the service resource name at the top of the report
     row +2
     col 1 i18nCaptions->sServiceResource 
     col 23 QCAssayInfo->service_resource_disp 
     row +1 
     ;display the cycle start time under the service resource name
     col 1 i18nCaptions->sCycleStartTime 
     sCycleStartTimeStr = format(cnvtdatetime(QCAssayInfo->cycle_start_dt_tm), "@TIMENOSECONDS")
     sCycleStartTimeStr = trim(sCycleStartTimeStr)
     col 23 sCycleStartTimeStr
     row +1
     col 1 i18nCaptions->sQCValidLevel
     if (QCAssayInfo->qc_valid_level_ind = 0)
        ;instrument validation level for QC
        col 23 i18nCaptions->sInstrument 
     elseif (QCAssayInfo->qc_valid_level_ind = 1)
        ;assay validation level for QC
        col 23 i18nCaptions->sAssay
     elseif (QCAssayInfo->qc_valid_level_ind = -1)
        ;assay validation level for QC
        col 23 i18nCaptions->sOff
     endif     
     ;display a line at the top of the page under the header information
     row +1
     col 1, line
     row +1
     ;display the first row of  headers for the data to display to the user
     row +1
     col 42  i18nCaptions->sComplete 
     col 65  i18nCaptions->sExpire 
     col 84  i18nCaptions->sNext 
     col 92  i18nCaptions->sGroup 
     col 100 i18nCaptions->sVerify
     col 109 i18nCaptions->sVerify
     col 118 i18nCaptions->sCurrent
     ;display the second row of  headers for the data to display to the user
     row +1
     col 4   i18nCaptions->sAssayHdr 
     col 25  i18nCaptions->sStep 
     col 42  i18nCaptions->sDtTm 
     col 65  i18nCaptions->sDtTm 
     col 84  i18nCaptions->sStep 
     col 92  i18nCaptions->sLimit 
     col 100 i18nCaptions->sMinutes
     col 109 i18nCaptions->sResults
     col 118 i18nCaptions->sResults
     ;display the lines under the headers
     row +1
     col 1 "-----------"
     col 24 "------"
     col 35 "----------------------"
     col 59 "----------------------"
     col 83 "------"
     col 91 "-------"
     col 100 "-------"
     col 109 "-------"
     col 118 "-------"
   detail
     ;dislay the data to the user
     c_cnt = 0
     row +1
     ;display the procedure name to the user
     col 1  QCAssayInfo->assays[d1.seq].task_assay_disp
     if (QCAssayInfo->assays[d1.seq].last_step_found_ind = 1)
       ;if a previous step has been found, display the step complete dt/tm and step expire dt/tm
       col 26 QCAssayInfo->assays[d1.seq].last_step_completed_nbr "##;L"
       sCompleteDateStr = format(cnvtdatetime(QCAssayInfo->assays[d1.seq].last_step_complete_dt_tm),
                                       "@MEDIUMDATE4YR")
       sCompleteTimeStr = format(cnvtdatetime(QCAssayInfo->assays[d1.seq].last_step_complete_dt_tm),
                                       "@TIMEWITHSECONDS")
       sExpireDateStr   = format(cnvtdatetime(QCAssayInfo->assays[d1.seq].last_step_expire_dt_tm),
                                       "@MEDIUMDATE4YR")
       sExpireTimeStr   = format(cnvtdatetime(QCAssayInfo->assays[d1.seq].last_step_expire_dt_tm),
                                       "@TIMEWITHSECONDS")
       sCompleteDateStr = trim(sCompleteDateStr)
       sCompleteTimeStr = trim(sCompleteTimeStr)
       sExpireDateStr = trim(sExpireDateStr)
       sExpireTimeStr = trim(sExpireTimeStr)
       col 36 sCompleteDateStr
       col 48 sCompleteTimeStr
       col 60 sExpireDateStr
       col 72 sExpireTimeStr
     else
       ;if no step previous completed, then display dashes for step num, expire and complete dt/tm
       col 26 "-"
       col 45 "--"
       col 72 "--"
     endif
     ;display the next step number if one was found
     if (QCAssayInfo->assays[d1.seq].next_step_nbr > 0)
       col 86 QCAssayInfo->assays[d1.seq].next_step_nbr "##;L"
     else
       col 86 "-"
     endif
     ;display the schedules multi control limit
     col 93 QCAssayInfo->multi_control_limit "####;L"
     
     if (QCAssayInfo->assays[d1.seq].verify_minutes_nbr > 0)
       col 103 QCAssayInfo->assays[d1.seq].verify_minutes_nbr "####;L"
     else 
       col 103 "-"
     endif
     
     if (QCAssayInfo->assays[d1.seq].verify_results_nbr > 0)
       col 112 QCAssayInfo->assays[d1.seq].verify_results_nbr "####;L"
     else
       col 112 "-"
     endif
     
     if (QCAssayInfo->assays[d1.seq].current_results_nbr > 0)
       col 121 QCAssayInfo->assays[d1.seq].current_results_nbr "####;L"
     else 
       col 121 "-"
     endif
     
     ;display the controls run header
     row +1
     col 3 i18nCaptions->sControlsRun
     ;set indicator to tell whether any controls run have been found
     found = 0
     ;loop through the controls that exist under this assays step and display controls ran
     for (c_cnt = 1 to QCAssayInfo->assays[d1.seq].num_controls)
        ;check to see if the control has been completed
        if (QCAssayInfo->assays[d1.seq].controls[c_cnt].control_run_ind = 1)
          ;display the control name and time it was completed.
          sControlRunDateStr = format(cnvtdatetime(QCAssayInfo->assays[d1.seq].controls[c_cnt].control_run_dt_tm),
                                         "@MEDIUMDATE4YR")
          sControlRunTimeStr = format(cnvtdatetime(QCAssayInfo->assays[d1.seq].controls[c_cnt].control_run_dt_tm),
                                         "@TIMEWITHSECONDS")
          sControlRunStr = concat(trim(QCAssayInfo->assays[d1.seq].controls[c_cnt].control_name), " @ ",
                                 trim(sControlRunDateStr), " ",
                                 trim(sControlRunTimeStr))
          sControlRunStr = trim(sControlRunStr)
          col 24 sControlRunStr
          found = 1
          row +1
        endif
     endfor
     ;if no controls run have been found, print "None"
     if (found = 0)
        col 24 i18nCaptions->sNone 
        row +1
     endif     
     col 3 i18nCaptions->sControlsScheduled
     ;set indicator to tell whether any controls scheduled have been found
     found = 0
     ;loop through the controls that exist under this assays step and display controls scheduled
     for (c_cnt = 1 to QCAssayInfo->assays[d1.seq].num_controls)
        ;only display controls that have not been ran
        if (QCAssayInfo->assays[d1.seq].controls[c_cnt].control_run_ind = 0)
          ;display the control name
          col 24 QCAssayInfo->assays[d1.seq].controls[c_cnt].control_name
          row +1
          found = 1
        endif
     endfor
     ;if no controls scheduled have been found, print "None"
     if (found = 0)
        col 24 i18nCaptions->sNone 
        row +1
     endif     
     ;check to see if any problem results have been found
     col 3  i18nCaptions->sProblemResults 
     if (QCAssayInfo->assays[d1.seq].problem_results_ind = problem_results_out_of_control)
	    col 24 i18nCaptions->sOutofCntrl 
     elseif (QCAssayInfo->assays[d1.seq].problem_results_ind = problem_results_performed)
        col 24 i18nCaptions->sPerformed 
     elseif (QCAssayInfo->assays[d1.seq].problem_results_ind = 0)
        col 24 i18nCaptions->sNone 
     endif
     row +1
     if (row > 54)
        break
     endif
   with nocounter
end                      ;subroutine CheckAssaysControlsRun

  /**************************************************************/
  /* Subroutine to indicate to the user that no data was found  */
  /**************************************************************/
declare DisplayNoDataFound (none) = i2
subroutine DisplayNoDataFound (none)

   declare sDateStr = vc with public, constant(format(cnvtdatetime(curdate, curtime3), "@MEDIUMDATE4YR"))
   declare sTimeStr = vc with public, constant(format(cnvtdatetime(curdate, curtime3), "@TIMENOSECONDS"))
   declare line = vc with public, constant(fillstring(130,"-"))

   select into "MINE"
     d1.seq
   from 
     (dummyt d1 with seq = 1)
   plan d1
   detail
     ;display the date at the top left of the page
     row 0
     col 1  i18nCaptions->sDate
     col 8 sDateStr
     ;display the page number at the top right of the page
     col 113 i18nCaptions->sPageNumber
     col 124 CURPAGE "###;L"
     ;display the report title in the center of the page
     call center(i18nCaptions->sTitle,1,132)
     ;display the time under the date at the top of the page
     row 1
     col 1  i18nCaptions->sTime
     col 8 sTimeStr
     ;display a line at the top of the page under the header information
     row +2
     col 1, line
     row +2        
     ;display a string to the user showing that no data was found
     col 1 i18nCaptions->sNoAssaysFound
   with nocounter     
end



  /************************************************************************/
  /* Declare record structures needed                                     */
  /************************************************************************/

;main structure to hold qc schedule data to display to user
free set QCAssayInfo
record QCAssayInfo
(
   1 service_resource_cd        = f8
   1 service_resource_disp      = vc
   1 cycle_start_dt_tm          = dq8
   1 qc_valid_level_ind         = i2   ;-1 = off  0 = instrument  1 = assay
   1 multi_control_limit        = i4
   1 qc_schedule_id             = f8
   1 assays[*]
     2 task_assay_cd            = f8
     2 task_assay_disp          = vc
     2 last_step_found_ind      = i2
     2 last_step_completed_nbr  = i4
     2 last_step_complete_dt_tm = dq8
     2 last_step_expire_dt_tm   = dq8
     2 next_step_nbr            = i4
     2 next_step_start_dt_tm    = dq8
     2 problem_results_ind      = i2   ;1 = out of control found  2 = performed found      
     2 num_controls             = i4
     2 controls[*]
       3 control_id             = f8
       3 control_name           = vc
       3 control_run_ind        = i2
       3 control_run_dt_tm      = dq8
     2 verify_minutes_nbr       = i4
     2 verify_results_nbr       = i4
     2 current_results_nbr      = i4
)

;set up record to hold the steps information
free set steps
record steps
(
   1 steps[*]
     2 step_nbr           = i4
     2 interval_min       = i4
     2 verify_minutes_nbr = i4
     2 verify_results_nbr = i4
)

  /******************************************************************/
  /* Get the code values needed and declare/initialize variables    */
  /******************************************************************/
  
  declare g_num_assays               = i4 with public, noconstant(0)
  declare g_num_steps                = i4 with public, noconstant(0)
  declare g_assay_cnt                = i4 with public, noconstant(0)
  declare stat                       = i4 with public, noconstant(0)
  declare g_service_resource_cd      = f8 with public, noconstant(0.0)
  declare result_status_verified_cd  = f8 with public, noconstant(0.0)
  declare result_status_auto_verf_cd = f8 with public, noconstant(0.0)
  declare result_status_performed_cd = f8 with public, noconstant(0.0)
  declare result_status_accepted_cd  = f8 with public, noconstant(0.0)
  declare result_status_changed_cd   = f8 with public, noconstant(0.0)
  declare result_status_discard_cd   = f8 with public, noconstant(0.0)
  declare result_status_rejected_cd  = f8 with public, noconstant(0.0)
  declare checked_cd                 = f8 with public, noconstant(0.0)
  declare in_control_cd              = f8 with public, noconstant(0.0)
    
  ;set the current dt/tm in var so it is the same throughout script
  declare g_curr_date_time           = q8 with public, constant(cnvtdatetime(curdate, curtime3))
  
  ;set constants used in audit
  declare problem_results_out_of_control    = i2 with public, constant(1)
  declare problem_results_performed         = i2 with public, constant(2)


  ;get the code_value for result status control
  call uar_get_meaning_by_codeset(1902, "IN_CONTROL", 1, in_control_cd)
  call uar_get_meaning_by_codeset(1902, "CHECKED",    1, checked_cd)

  ;get other code values needed
  call uar_get_meaning_by_codeset(1901, "PERFORMED",    1, result_status_performed_cd)
  call uar_get_meaning_by_codeset(1901, "VERIFIED",     1, result_status_verified_cd)
  call uar_get_meaning_by_codeset(1901, "AUTOVERIFIED", 1, result_status_auto_verf_cd)
  call uar_get_meaning_by_codeset(1901, "ACCEPT",       1, result_status_accepted_cd)
  call uar_get_meaning_by_codeset(1901, "CHANGE",       1, result_status_changed_cd)
  call uar_get_meaning_by_codeset(1901, "DISCARD",      1, result_status_discard_cd)
  call uar_get_meaning_by_codeset(1901, "REJECT",       1, result_status_rejected_cd)

  /************************************************************************/
  /* Main Processing                                                      */
  /************************************************************************/

  ;call sub to prompt user for test site
  call PromptForTestSite (0)
  
  
  ;check to make sure valid service resource code has been found
  if (g_service_resource_cd > 0)
  
    ;call sub to get this resource's controls/steps
    call GetQCScheduleAssays (0)

    ;check to make sure that assays were found
    if (g_num_assays > 0)
      ;call sub to get this schedule's step information
      call GetQCScheduleSteps (0)

      ;check to make sure that steps were found
      if (g_num_steps > 0)
         call ProcessAssaysFound (0)
      endif            ;if (g_num_steps > 0)
    else 
      ;no assays found, display message to user 
      ;stating no data was found
      call DisplayNoDataFound (0)
    endif            ;if (g_num_assays > 0)
  else 
    ;if valid service resource code not found display report stating no data was found
    call DisplayNoDataFound (0)
  endif

  free set QCAssayInfo
  free set steps

end
go

;Generated by GNU enscript 1.6.4.
