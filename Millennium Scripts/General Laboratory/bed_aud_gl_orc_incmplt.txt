 ;;Solution_Test/script/Bedrock/bed_aud_gl_orc_incmplt/bed_aud_gl_orc_incmplt.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:        bed_aud_gl_orc_incmplt.prg
        Object name:             bed_aud_gl_orc_incmplt.prg
        Request #:
 
        Product:                 Bedrock
        Product Team:            Bedrock
        HNA Version:             500
        CCL Version:             8.0
 
        Program purpose:
 
        Tables read:
 
 
        Tables updated:
 
        Executing from:          BEDROCK
 
        Special Notes:
 
 
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 04/30/08 Kelli Wade           Change headings for "Fix It" button
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program bed_aud_gl_orc_incmplt:dba go
create program bed_aud_gl_orc_incmplt:dba
 
if (not (validate (request,0)))
 record request
  (
    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
    1 paramlist[*]
      2 param_type_mean = vc
      2 pdate1 = dq8
      2 pdate2 = dq8
      2 vlist[*]
        3 dbl_value = f8
        3 string_value = vc
  )
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*]
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1  high_volume_flag = i2
    1  output_filename = vc
    1  run_status_flag = i2
    1  statlist[*]
       2 statistic_meaning = vc
       2 status_flag = i2
       2 qualifying_items = i4
       2 total_items = i4
    1  status_data
      2  status  =  C1
      2  SUBEVENTSTATUS [ 1 ]
        3  OPERATIONNAME  =  C15
        3  OPERATIONSTATUS  =  C1
        3  TARGETOBJECTNAME  =  C15
        3  TARGETOBJECTVALUE  =  C100
  )
endif
 
free record temp
record temp
(
  1 o_cnt = i4
  1 olist[*]
    2 catalog_cd = f8
    2 primary_mnemonic = vc
    2 catalog_type_cd = f8
    2 catalog_type_disp = vc
    2 activity_type_cd = f8
    2 activity_type_disp = vc
    2 activity_subtype_cd = f8
    2 activity_subtype_disp = vc
    2 no_dta_ind = i2
    2 no_subact_ind = i2
    2 no_routing_ind = i2
    2 no_coll_req_allinstr_ind = i2
    2 no_coll_req_instr_ind = i2
    2 resource_route_lvl = i2
)
 
declare GENLAB = f8 with public, noconstant(0.0)
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 6000
    and cv.cdf_meaning = "GENERAL LAB"
    and cv.active_ind = 1
detail
  GENLAB = cv.code_value
with nocounter
 
set apat_cd = 0.0
set glbat_cd = 0.0
set apspecast_cd = 0.0
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 106
    and cv.cdf_meaning = "AP"
    and cv.active_ind = 1
detail
  apat_cd = cv.code_value
with nocounter
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 106
    and cv.cdf_meaning = "GLB"
    and cv.active_ind = 1
detail
  glbat_cd = cv.code_value
with nocounter
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 5801
    and cv.cdf_meaning = "APSPECIMEN"
    and cv.active_ind = 1
detail
  apspecast_cd = cv.code_value
with nocounter
 
set high_volume_cnt = 0
select into "nl:"
  hv_cnt = count(*)
from order_catalog oc
plan oc
  where oc.catalog_type_cd = GENLAB
    and oc.activity_type_cd = glbat_cd
    and oc.active_ind = 1
detail
  high_volume_cnt = hv_cnt
with nocounter
 
call echo(high_volume_cnt)
 
if (request->skip_volume_check_ind = 0)
  if (high_volume_cnt > 5000)
    set reply->high_volume_flag = 2
    go to exit_script
  elseif (high_volume_cnt > 3000)
    set reply->high_volume_flag = 1
    go to exit_script
  endif
endif
 
set temp->o_cnt = 0
 
select into "nl:"
from order_catalog o,
     code_value cv1,
     code_value cv2,
     code_value cv3
plan o
  where o.catalog_type_cd = GENLAB
    and o.activity_type_cd = glbat_cd
    and o.active_ind = 1
    and o.catalog_cd > 0
join cv1
  where cv1.code_value = o.catalog_type_cd
join cv2
  where cv2.code_value = o.activity_type_cd
join cv3
  where cv3.code_value = o.activity_subtype_cd
order by cv2.display_key,cnvtupper(o.primary_mnemonic)
head report
  o_cnt = 0
detail
  o_cnt = o_cnt + 1
  temp->o_cnt = o_cnt
  stat = alterlist(temp->olist,o_cnt)
  temp->olist[o_cnt].catalog_cd = o.catalog_cd
  temp->olist[o_cnt].primary_mnemonic = o.primary_mnemonic
  temp->olist[o_cnt].catalog_type_cd = o.catalog_type_cd
  temp->olist[o_cnt].catalog_type_disp = cv1.display
  temp->olist[o_cnt].activity_type_cd = o.activity_type_cd
  temp->olist[o_cnt].activity_type_disp = cv2.display
  temp->olist[o_cnt].no_subact_ind = 0
  temp->olist[o_cnt].resource_route_lvl = o.resource_route_lvl
  if (o.activity_subtype_cd > 0)
    temp->olist[o_cnt].activity_subtype_cd = o.activity_subtype_cd
    temp->olist[o_cnt].activity_subtype_disp = cv3.display
  else
; only ap and glb are supposed to have subactivity types
    if (o.activity_type_cd in (apat_cd,glbat_cd))
      temp->olist[o_cnt].no_subact_ind = 1
    endif
  endif
  temp->olist[o_cnt].no_dta_ind = 1
  temp->olist[o_cnt].no_routing_ind = 1
; AP activity subtypes other than apspecimen don't have collection requirements
  if (o.activity_type_cd = apat_cd
  and o.activity_subtype_cd != apspecast_cd)
    temp->olist[o_cnt].no_coll_req_allinstr_ind = 0
    temp->olist[o_cnt].no_coll_req_instr_ind = 0
  else
    temp->olist[o_cnt].no_coll_req_allinstr_ind = 1
    temp->olist[o_cnt].no_coll_req_instr_ind = 1
  endif
;caresets don't have routing, dtas or coll reqs
  if (o.orderable_type_flag = 2
  or o.orderable_type_flag = 6)
    temp->olist[o_cnt].no_dta_ind = 0
    temp->olist[o_cnt].no_routing_ind = 0
    temp->olist[o_cnt].no_coll_req_allinstr_ind = 0
    temp->olist[o_cnt].no_coll_req_instr_ind = 0
  endif
; bill only's don't have dtas, routing or collection requirements
  if (o.bill_only_ind = 1)
    temp->olist[o_cnt].no_dta_ind = 0
    temp->olist[o_cnt].no_routing_ind = 0
    temp->olist[o_cnt].no_coll_req_allinstr_ind = 0
    temp->olist[o_cnt].no_coll_req_instr_ind = 0
  endif
with nocounter
 
set stat = alterlist(reply->collist,8)
set reply->collist[1].header_text = "Activity Type"
set reply->collist[1].data_type = 1 ;string
set reply->collist[1].hide_ind = 1
set reply->collist[2].header_text = "Primary Name"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 0
;001 set reply->collist[3].header_text = "No Act SubType"
set reply->collist[3].header_text = "No Subactivity Type"					;001
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
set reply->collist[4].header_text = "No Assays"
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
;001 set reply->collist[5].header_text = "No Routing"
set reply->collist[5].header_text = "No Work Routing"						;001
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
;001 set reply->collist[6].header_text = "Incomplete Coll Req(All Instr)"
set reply->collist[6].header_text = "Incomplete Collection Requirements"	;001
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
;001 set reply->collist[7].header_text = "Activity SubType"
set reply->collist[7].header_text = "Subactivity Type"						;001
set reply->collist[7].data_type = 1 ;string
set reply->collist[7].hide_ind = 0
set reply->collist[8].header_text = "Catalog Cd"
set reply->collist[8].data_type = 2 ;double
set reply->collist[8].hide_ind = 1
 
if (temp->o_cnt = 0)
  go to exit_script
endif
 
select into "nl:"
from (dummyt d with seq = temp->o_cnt),
      profile_task_r ptr,
      discrete_task_assay dta
plan d
join ptr
  where ptr.catalog_cd = temp->olist[d.seq].catalog_cd
    and ptr.active_ind = 1
join dta
  where dta.task_assay_cd = ptr.task_assay_cd
    and dta.active_ind = 1
detail
  temp->olist[d.seq].no_dta_ind = 0
with nocounter
 
;order level routing check
select into "nl:"
from (dummyt d with seq = temp->o_cnt),
      orc_resource_list orl,
      code_value cv
plan d
  where temp->olist[d.seq].resource_route_lvl < 2
join orl
  where orl.catalog_cd = temp->olist[d.seq].catalog_cd
    and orl.active_ind = 1
join cv
  where cv.code_value = orl.service_resource_cd
    and cv.active_ind = 1
detail
  temp->olist[d.seq].no_routing_ind = 0
with nocounter
 
;assay level routing check
select into "nl:"
from (dummyt d with seq = temp->o_cnt),
      profile_task_r ptr,
      assay_resource_list apr,
      code_value cv
plan d
  where temp->olist[d.seq].resource_route_lvl = 2
join ptr
  where ptr.catalog_cd = temp->olist[d.seq].catalog_cd
    and ptr.active_ind = 1
join apr
  where apr.task_assay_cd = ptr.task_assay_cd
    and apr.active_ind = 1
join cv
  where cv.code_value = apr.service_resource_cd
    and cv.active_ind = 1
detail
  temp->olist[d.seq].no_routing_ind = 0
with nocounter
 
select into "nl:"
from (dummyt d with seq = temp->o_cnt),
      collection_info_qualifiers ciq1,
      collection_info_qualifiers ciq2
plan d
join ciq1
  where ciq1.catalog_cd = temp->olist[d.seq].catalog_cd
    and ciq1.specimen_type_cd > 0
join ciq2
  where ciq2.catalog_cd = outerjoin(ciq1.catalog_cd)
    and ciq2.specimen_type_cd = outerjoin(ciq1.specimen_type_cd)
    and ciq2.service_resource_cd = outerjoin(0)
order by d.seq,ciq1.catalog_cd
head ciq1.catalog_cd
  all_match = 1
detail
  if (ciq1.catalog_cd != ciq2.catalog_cd
  or ciq1.specimen_type_cd != ciq2.specimen_type_cd)
    all_match = 0
  endif
foot ciq1.catalog_cd
  if (all_match = 1)
    temp->olist[d.seq].no_coll_req_allinstr_ind = 0
  endif
with nocounter
 
set row_nbr = 0
set no_subact_cnt = 0
set no_dta_cnt = 0
set no_routing_cnt = 0
set no_coll_req_allinstr_cnt = 0
 
for (x = 1 to temp->o_cnt)
 if (temp->olist[x].no_subact_ind = 1
 or temp->olist[x].no_dta_ind = 1
 or temp->olist[x].no_routing_ind = 1
 or temp->olist[x].no_coll_req_allinstr_ind = 1)
  set row_nbr = row_nbr + 1
  set stat = alterlist(reply->rowlist,row_nbr)
  set stat = alterlist(reply->rowlist[row_nbr].celllist,8)
  set reply->rowlist[row_nbr].celllist[1].string_value
    = temp->olist[x].activity_type_disp
  set reply->rowlist[row_nbr].celllist[7].string_value
    = temp->olist[x].activity_subtype_disp
  set reply->rowlist[row_nbr].celllist[2].string_value
    = temp->olist[x].primary_mnemonic
  set reply->rowlist[row_nbr].celllist[8].double_value
    = temp->olist[x].catalog_cd
  if (temp->olist[x].no_subact_ind = 1)
    set no_subact_cnt = no_subact_cnt + 1
    set reply->rowlist[row_nbr].celllist[3].string_value = "X"
  else
    set reply->rowlist[row_nbr].celllist[3].string_value = " "
  endif
  if (temp->olist[x].no_dta_ind = 1)
    set no_dta_cnt = no_dta_cnt + 1
    set reply->rowlist[row_nbr].celllist[4].string_value = "X"
  else
    set reply->rowlist[row_nbr].celllist[4].string_value = " "
  endif
  if (temp->olist[x].no_routing_ind = 1)
    set no_routing_cnt = no_routing_cnt + 1
    set reply->rowlist[row_nbr].celllist[5].string_value = "X"
  else
    set reply->rowlist[row_nbr].celllist[5].string_value = " "
  endif
  if (temp->olist[x].no_coll_req_allinstr_ind = 1)
    set no_coll_req_allinstr_cnt = no_coll_req_allinstr_cnt + 1
    set reply->rowlist[row_nbr].celllist[6].string_value = "X"
  else
   set reply->rowlist[row_nbr].celllist[6].string_value = " "
  endif
 endif
endfor
 
if (no_dta_cnt = 0
and no_routing_cnt = 0
and no_coll_req_allinstr_cnt = 0)
  set reply->run_status_flag = 1
else
  set reply->run_status_flag = 3
endif
 
set stat = alterlist(reply->statlist,3)
set reply->statlist[1].total_items = high_volume_cnt
set reply->statlist[1].qualifying_items = no_dta_cnt
set reply->statlist[1].statistic_meaning = "PATHGLBORCNODTA"
if (no_dta_cnt > 0)
  set reply->statlist[1].status_flag = 3
else
  set reply->statlist[1].status_flag = 1
endif
set reply->statlist[2].total_items = high_volume_cnt
set reply->statlist[2].qualifying_items = no_routing_cnt
set reply->statlist[2].statistic_meaning = "PATHGLBORCNOROUTING"
if (no_routing_cnt > 0)
  set reply->statlist[2].status_flag = 3
else
  set reply->statlist[2].status_flag = 1
endif
set reply->statlist[3].total_items = high_volume_cnt
set reply->statlist[3].qualifying_items = no_coll_req_allinstr_cnt
set reply->statlist[3].statistic_meaning = "PATHGLBORCNOCOLLREQ"
if (no_coll_req_allinstr_cnt > 0)
  set reply->statlist[3].status_flag = 3
else
  set reply->statlist[3].status_flag = 1
endif
 
#exit_script
if (reply->high_volume_flag in (1,2))
  set reply->output_filename = build("gl_orc_incmplt_audit.csv")
endif
 
if (request->output_filename > " ")
  execute bed_rpt_file
endif
 
end go

;Generated by GNU enscript 1.6.4.
