 ;;Solution_Test/script/PathNet -- Gen Lab/glb_rpt_excep/glb_rpt_excep.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2000 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       GLB_RPT_EXCEP.PRG
        Object name:            GLB_RPT_EXCEP
        Request #:              250110

        Product:                General Lab
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Produce an exceptions report showing
                                General Lab results that are exceptions
                                to the normal values.

        Tables read:            assay_processing_r
                                code_value
                                container
                                container_accession
                                data_map
                                discrete_task_assay
                                encounter
                                long_text
                                orders
                                order_comment
                                order_laboratory
                                perform_result
                                person
                                person_alias
                                profile_task_r
                                prsnl
                                resource_group
                                result
                                result_comment
                                result_event

        Tables updated:         none

        Executing from:         General Lab application

        Special Notes:          n/a

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 08/16/96 Newton Hughes        Initial Release                     *
;     001 09/10/97 John Mitchell        Added linear, feasible, dilution    *
;                                       flags, but they don't "do" anything *
;     001 09/19/97 Gayla Benson         Add linear, feasible, & dilution.   *
;                     Reformatted report to make result column wide enough. *
;    *002 09/19/97 Hal Patchen          Add autoverification logic          *
;    *003 10/13/97 Jeff Fry             Add sub-section service_resource_cd *
;                                       to sub-section logic.               *
;    *004 11/14/97 Hal Patchen          Add subsection level data map check *
;    *005 11/20/97 Hal Patchen          Add linear, feasible, dilution      *
;    *                                  exception checks.                   *
;    *006 12/08/97 Hal Patchen          Add MRN & Accn number formatting    *
;    *007 05/05/98 Hal Patchen          Verify subsection level data map    *
;    *                                  is associated with route test site  *
;    *008 04/23/99 Chad Moats           Removed joins to code_value table   *
;    *009 06/07/99 Gary Runde           Display org name and discharged     *
;    *010 06/30/99 Laura Pott           Internationalization                *
;    *    12/13/99 Jack Moore           Merged I18n code from mod above into*
;    *                                  production code.                    *
;    *011 02/08/00 Hal Patchen          Add sub-sort option by service      *
;    *                                  resource or patient name.           *
;    *012 10/15/01 Saeed Zafar          Allow orders of Activity type HLA to*
;    *                                  qualify for the reports if they are *
;    *                                  associated with the selected test   *
;    *                                  site.                               *
;    *013 01/08/02 Ahti Rovainen        Orderby for each head               *
;    *                                  +0 suppress undesired indices       *
;    *014 01/03/02 Mike Gabrick         Correct truncation of display.      *
;    *                                  Allow report to print if no data.   *
;    *                                  Sort by person_name and person_id   *
;    *                                  in case same name exists.           *
;    *015 03/08/02 Sara Grice		        Changed glb_cnt_type_found_ind      *
;    *                                  to glb_act_type_found_ind           *
;    *016 09/11/02 Mark Brooks          Added service resource security     *
;    *017 07/15/03 Nirmal Sanganee      Pull corr_in-review results's       *
;    *                                  previous verified result            *
;    *018 08/27/03 Craig Sumrall		    Updated person join to Prsnl        *
;    *019 05/04/03 Craig Sumrall        Correction for alpha results not    *
;    *                                  being sent to print                 *****
;    *020 07/25/06 Joe Troy             Notify flag enhancement. Feature 75950. *
;    *021 07/11/07 Ryan Manuel          Added file_name to the reply and    *
;    *                                  now return it to print on front end *
;    *                                  instead of spooling on the backend  *
;    *019 08/13/07 Scott Haven          Added HLX functionality to the script *
;                                       as well as scientific notation      *
;    *020 04/17/08 Oliver Barbara       Added code to handle letter size    *
;                                       printing                            *
;    *021 07/28/08 Rahul Deshmukh       Added code to include interp text flag *
;                                       in bldstr function                  *
;~DE~****************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ************************
;011 cclseclogin go                                                          ;008

             drop program GLB_RPT_EXCEP:dba go
             create program GLB_RPT_EXCEP:dba
%i CCLSOURCE:GLB_SCRIPT_LOGGING.INC                                    ;014
set LOG_PROGRAM_NAME = "glb_rpt_exception"                             ;014
      /***********************************************************************
      * Internationalization                                                 *
      ***********************************************************************/
         ;* include i18n function declarations                         ;010
%i cclsource:i18n_uar.inc                                              ;010
%i cclsource:pcs_format_age.inc                                                                       ;010
         ;* initialize variable that will keep the handle to i18n data ;010
         set i18nHandle = 0                                            ;010
         ;* call uar_i18nlocalizationinit                              ;010
         set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev) ;010
                                                                       ;010
      record captions                                                  ;010
      (                                                                ;010
         1  not_fnd                    = vc                            ;010
         1  begin                      = vc                            ;010
         1  end_dt                     = vc                            ;010
         1  title                      = vc                            ;010
         1  dr                         = vc                            ;010
         1  demo                       = vc                            ;010
         1  order_                     = vc                            ;010
         1  results                    = vc                            ;010
         1  priority                   = vc                            ;010
         1  low                        = vc                            ;010
         1  tech                       = vc                            ;010
         1  rpt                        = vc                            ;010
         1  dt                         = vc                            ;010
         1  dir                        = vc                            ;010
         1  tm                         = vc                            ;010
         1  by_                        = vc                            ;010
         1  pg                         = vc                            ;010
         1  inst                       = vc                            ;010
         1  dept                       = vc                            ;010
         1  sect                       = vc                            ;010
         1  sub_sect                   = vc                            ;010
         1  tst_ste                    = vc                            ;010
         1  unknown                    = vc                            ;010
         1  to_                        = vc                            ;010
         1  ord_cmnt                   = vc                            ;010
         1  ord_note                   = vc                            ;010
         1  rslt_note                  = vc                            ;010
         1  rslt_cmnt                  = vc                            ;010
         1  txt_rslt                   = vc                            ;010
         1  txt_rslt_nf                = vc                            ;010
         1  interp_text_flag           = vc                            ;010
      )                                                                ;010
          declare LOCALE = vc with protect, noconstant( "" )
          set LOCALE = cnvtupper(logical("CCL_LANG"))
          if (LOCALE = "")
            set LOCALE = cnvtupper(logical("LANG"))
          endif
          set LOCALE = substring(1, 5, LOCALE)
          declare localeObjectName = 
             vc with protect, noconstant("EN_US")  
          if(LOCALE != localeObjectName)  
            set request->letter_size_ind = 0
          endif                                                            
          set captions->to_ =                                          ;010
            uar_i18ngetmessage(i18nHandle, "to_"," to  ")              ;010
          set captions->not_fnd =                                      ;010
            uar_i18ngetmessage(i18nHandle,"not_fnd","Not Found")       ;010
          set captions->begin =                                        ;010
            uar_i18ngetmessage(i18nHandle,"begin",":00.00")            ;010
          set captions->end_dt =                                       ;010
            uar_i18ngetmessage(i18nHandle,"end_dt",":59.99")           ;010
          set captions->title =                                        ;010
            uar_i18ngetmessage(i18nHandle,"title","EXCEPTION REPORT")  ;010
          set captions->dr =                                           ;010
            uar_i18ngetmessage(i18nHandle,"dr","DR. ")                 ;010
          set captions->demo =                                         ;010
            uar_i18ngetmessage(i18nHandle,"demo","DEMOGRAPHICS")       ;010
          set captions->order_ =                                       ;010
            uar_i18ngetmessage(i18nHandle,"order",                     ;010
            "ORDERABLE/                    ")                          ;010
          set captions->results =                                      ;010
            uar_i18ngetmessage(i18nHandle,"results",                   ;010
            "ORDERABLE/                                  RESULTS TO BE REVIEWED                 VERIFIED") ;010
          set captions->priority =                                     ;010
            uar_i18ngetmessage(i18nHandle,"priority",                  ;010
            "PRIORITY           ACCESSION        PROCEDURE  ")         ;010
 		  if(LOCALE = localeObjectName)
          if(request->letter_size_ind = 1)
              set captions->low =
                uar_i18ngetmessage(i18nHandle,"low",
                "           LOW        HIGH            RESULT          TECH ID   DATE   TIME")
          else
              set captions->low =                                          ;010
                uar_i18ngetmessage(i18nHandle,"low",                       ;010
                "      LOW        HIGH            RESULT          TECH ID   DATE   TIME") ;010
          endif

          set captions->tech =                                         ;010
            uar_i18ngetmessage(i18nHandle,"tech_id",                   ;010
            "TECH ID   DATE   TIME")
          else
          if(request->letter_size_ind = 1)
              set captions->low =
                uar_i18ngetmessage(i18nHandle,"low",
                "           LOW        HIGH            RESULT          TECH ID     DATE    TIME")
          else
              set captions->low =                                           
                uar_i18ngetmessage(i18nHandle,"low",                        
                "      LOW        HIGH            RESULT          TECH ID     DATE    TIME")  
          endif
 
          set captions->tech =                                         ;010
            uar_i18ngetmessage(i18nHandle,"tech_id",                   ;010
            "TECH ID     DATE    TIME")   
          endif                                ;010
          set captions->rpt =                                          ;010
            uar_i18ngetmessage(i18nHandle,"rpt",                       ;010
            "REPORT:  GLB_RPT_EXCEP.PRG")                              ;010
          set captions->dt =                                           ;010
            uar_i18ngetmessage(i18nHandle,"dt","DATE:")                ;010
          set captions->dir =                                          ;010
            uar_i18ngetmessage(i18nHandle,"dir","DIRECTORY:")          ;010
          set captions->tm =                                           ;010
            uar_i18ngetmessage(i18nHandle,"tm","TIME:")                ;010
          set captions->by_ =                                          ;010
            uar_i18ngetmessage(i18nHandle,"by_","  BY:")               ;010
          set captions->pg =                                           ;010
            uar_i18ngetmessage(i18nHandle,"pg","PAGE:")                ;010
          set captions->inst =                                         ;010
            uar_i18ngetmessage(i18nHandle,"inst","INSTITUTION:")       ;010
          set captions->dept =                                         ;010
            uar_i18ngetmessage(i18nHandle,"dept","DEPARTMENT:")        ;010
          set captions->sect =                                         ;010
            uar_i18ngetmessage(i18nHandle,"sect","SECTION:")           ;010
          set captions->sub_sect =                                     ;010
            uar_i18ngetmessage(i18nHandle,"sub_sect","SUB SECTION:")   ;010
          set captions->tst_ste =                                      ;010
            uar_i18ngetmessage(i18nHandle,"tst_ste","TEST SITE:")      ;010
          set captions->unknown =                                      ;010
            uar_i18ngetmessage(i18nHandle,"unknown","Unknown")         ;010
          set captions->ord_cmnt =                                     ;010
            uar_i18ngetmessage(i18nHandle,"ord_cmnt",                  ;010
            " Order Comment:")                                         ;010
          set captions->ord_note =                                     ;010
            uar_i18ngetmessage(i18nHandle,"ord_note"," Order Note:")   ;010
          set captions->rslt_note =                                    ;010
            uar_i18ngetmessage(i18nHandle,"rslt_note"," Result Note:") ;010
          set captions->rslt_cmnt =                                    ;010
            uar_i18ngetmessage(i18nHandle,"rslt_cmnt",                 ;010
            " Result Comment:")                                        ;010
          set captions->txt_rslt =                                     ;010
            uar_i18ngetmessage(i18nHandle,"txt_rslt"," Text Result:")  ;010
          set captions->txt_rslt_nf =                                  ;010
            uar_i18ngetmessage(i18nHandle,"txt_rslt_nf",               ;010
            "Textual Result Not Found")                                ;010
          set captions->interp_text_flag =                              ;010
            uar_i18ngetmessage(i18nHandle, "interp_text_flag","(t)")    ;010

      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  dt_tm_begin                  = dq8
         1  dt_tm_end                    = dq8
         1  service_resource_cd          = f8
         1  sub_sort_flag                = i2                          ;011
            ;* 0 = service resource hierarchy (default)                ;011
            ;* 1 = patient name                                        ;011
         1  printer_name                 = vc
         1  abnormal_results             = i2
         1  critical_results             = i2
         1  delta_checks                 = i2
         1  review_limit                 = i2
         1  converted_types              = i2
         1  blank_ref_ranges             = i2
         1  batch_selection              = vc
         1  output_dist                  = vc
         1  ops_date                     = dq8
         1  linear                       = i2
         1  feasible                     = i2
         1  dilution                     = i2
         1  resource_sec_ind             = i2                          ;016
         1  qc_override_ind              = i2
         1  notify_ind                   = i2
         1  letter_size_ind              = i2
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      (
        1 file_name = vc
%i cclsource:status_block.inc
      )

      /***********************************************************************
      * Internal Record Structures                                           *
      ***********************************************************************/
      record test_site
      (
         1  qual[*]
            2  service_resource_cd       = f8
            2  inst_cd                   = f8
            2  inst_disp                 = vc
            2  dept_cd                   = f8
            2  dept_disp                 = vc
            2  sect_cd                   = f8
            2  sect_disp                 = vc
            2  subsect_cd                = f8
            2  subsect_disp              = vc
            2  ts_cd                     = f8
            2  ts_disp                   = vc
            2  serv_res_hier_seq         = i4
      )

      record ts_sort
      (
         1  key1                      = vc
         1  key2                      = vc
         1  service_resource_cd       = f8
         1  inst_cd                   = f8
         1  inst_disp                 = vc
         1  dept_cd                   = f8
         1  dept_disp                 = vc
         1  sect_cd                   = f8
         1  sect_disp                 = vc
         1  subsect_cd                = f8
         1  subsect_disp              = vc
         1  ts_cd                     = f8
         1  ts_disp                   = vc
      )

      record actvty_type
      (
         1  qual[*]
            2  activity_type_cd      = f8
      )

      ;* Array of results that fall within the specified time frame and
      ;* which are verified or corrected.
      record perf_results
      (
         1  qual[*]
            2  result_id                 = f8
            2  perform_result_id         = f8
            2  service_resource_cd       = f8
            2  task_assay_cd             = f8
            2  detail_mnemonic           = vc
            2  accession                 = vc
            2  order_id                  = f8
            2  catalog_cd                = f8
            2  drawn_dt_tm               = c12
            2  result_type_cd            = f8
            2  data_map_ind              = i2
            2  max_digits                = i4
            2  min_decimal_places        = i4
            2  min_digits                = i4
            2  long_text_id              = f8
            2  long_text                 = vc
            2  inst_cd                   = f8
            2  inst_disp                 = vc
            2  dept_cd                   = f8
            2  dept_disp                 = vc
            2  sect_cd                   = f8
            2  sect_disp                 = vc
            2  subsect_cd                = f8
            2  subsect_disp              = vc
            2  ts_cd                     = f8
            2  ts_disp                   = vc
            2  serv_res_hier_seq         = i4
            2  rn_ind                    = i2
            2  rc_ind                    = i2
            2  oc_ind                    = i2
            2  on_ind                    = i2
            2  rn_text                   = vc
            2  rc_text                   = vc
            2  on_text                   = vc
            2  oc_text                   = vc
            2  sci_notation_ind          = i2
            2  drawn_dt_tm_locale        = c15
      )

      ;* Report display fields used to determine page breaks.
      record rpt
      (
         1  inst_disp                    = vc
         1  dept_disp                    = vc
         1  sect_disp                    = vc
         1  subsect_disp                 = vc
         1  ts_disp                      = vc
      )

%i cclsource:glb_rpt_subs.inc
%i cclsource:pcs_resource_security.inc                                 ;016

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         execute accrtl_sci_note
         set reply->status_data.status = "F"

         ;* Code Sets
         set CV_REQUIRED_RECS            = 38                          ;005   ;012
         declare ACTIVITY_TYPE_HLA_CDF   = c12 with public, constant("HLA")   ;012
         declare ACTIVITY_TYPE_HLX_CDF   = c12 with public, constant("HLX")
         declare glb_act_type_found_ind  = i2 with public, noconstant(0)      ;012
         declare cv_cnt                  = i4
         set ALIAS_TYPE_CODESET          = 319
         set ALIAS_TYPE_MRN_CDF          = "MRN"
         declare alias_type_mrn_cd       = f8
         set ACTIVITY_TYPE_CODESET       = 106
         set ACTIVITY_TYPE_GLB_CDF       = "GLB"
         set RESULT_TYPE_CODESET         = 289
         declare result_type_alpha_cd    = f8
         declare result_type_numeric_cd  = f8
         declare result_type_interp_cd   = f8
         declare result_type_calc_cd     = f8
         set RESULT_STATUS_CODESET       = 1901
         declare performed_cd            = f8
         declare oldperformed_cd         = f8
         declare verified_cd             = f8
         declare corrinrev_cd            = f8
         declare oldverified_cd          = f8
         declare autoverified_cd         = f8                          ;002
         declare oldautoverified_cd      = f8                          ;002
         declare corrected_cd            = f8
         declare oldcorrected_cd         = f8
         set RESULT_PRCSS_CODESET        = 1902
         declare alp_abnormal_cd         = f8
         declare alp_critical_cd         = f8
         declare alp_review_cd           = f8
         declare normal_high_cd          = f8
         declare normal_low_cd           = f8
         declare critical_cd             = f8
         declare review_cd               = f8
         declare delta_fail_cd           = f8
         declare linear_cd               = f8                          ;005
         declare feasible_cd             = f8                          ;005
         declare qc_override_cd          = f8 with protect, noconstant(0.0)
         declare notify_cd               = f8 with protect, noconstant(0.0)
         declare alp_notify_cd           = f8 with protect, noconstant(0.0)
         set COMMENT_TYPE_CODESET        = 14
         set COMMENT_TYPE_ORD_COMMENT_CDF = "ORD COMMENT"
         set COMMENT_TYPE_ORD_NOTE_CDF    = "ORD NOTE"
         set COMMENT_TYPE_RES_COMMENT_CDF = "RES COMMENT"
         set COMMENT_TYPE_RES_NOTE_CDF    = "RES NOTE"
         declare order_comment_cd         = f8
         declare order_note_cd            = f8
         declare result_comment_cd        = f8
         declare result_note_cd           = f8
         set SERVICE_RESOURCE_TYPE_CODESET = 223
         set SERV_RES_INSTITUTION_CDF     = "INSTITUTION"
         set SERV_RES_DEPARTMENT_CDF      = "DEPARTMENT"
         set SERV_RES_SECTION_CDF         = "SECTION"
         set SERV_RES_SUBSECTION_CDF      = "SUBSECTION"
         declare serv_res_institution_cd  = f8
         declare serv_res_department_cd   = f8
         declare serv_res_section_cd      = f8
         declare serv_res_subsection_cd   = f8
         declare resultflagstr = vc with protect, noconstant(" ")
         declare n = i4 with protect, noconstant(0)

	 ;discharged information
	 set DISCHARGED_CDF = "DISCHARGED"                             ;009
	 declare discharged_cd = f8                                    ;009
	 set stat = uar_Get_meaning_by_codeset(261, DISCHARGED_CDF, 1, discharged_cd)                     ;009

         ;* Operations
         declare batch_selection_cd       = f8

         set sub_sort_flag                = 0                          ;011
         if (validate(request->sub_sort_flag, -1) = -1)                ;011
            set sub_sort_flag = 1                                      ;011
         else                                                          ;011
            set sub_sort_flag = request->sub_sort_flag                 ;011
         endif                                                         ;011
         set serv_res_level_flag          = 0
         set nbr_ts                       = 0
         set nbr_actvty_types             = 0
         set nbr_prs                      = 0
         set nbr_o_comments               = 0
         set paramarray[16] = fillstring(15, " "); jpm

         set i = 0         ; used to index report_data array
         set offset = 0    ; position within a report_data row to insert a
                           ; report item
         set hyphen_line = fillstring(125, "-")
         set cdf_string = fillstring(100, " ")

         ;* Keep track of next row to put detail on,
         ;* next row to put comment on
         set order_row = 0
         set detail_row = 0
;010         set username = "Not Found"
         set username = captions->not_fnd                              ;010
         declare dServiceResourceCd = f8 with protect, noconstant(0.0) ;016
         declare interp_flag = vc with protect, noconstant(" ")

      /***********************************************************************
      * Select needed code values                                            *
      ***********************************************************************/
         set cv_cnt = 0

         select into "nl:"
            cv.code_value

         from
            code_value cv

         where ((cv.code_set = ALIAS_TYPE_CODESET
               and cv.cdf_meaning = ALIAS_TYPE_MRN_CDF)
             or (cv.code_set = ACTIVITY_TYPE_CODESET
               and cv.cdf_meaning in (ACTIVITY_TYPE_GLB_CDF, ACTIVITY_TYPE_HLA_CDF, ACTIVITY_TYPE_HLX_CDF))  ;012
             or (cv.code_set = RESULT_TYPE_CODESET)
             or (cv.code_set = RESULT_STATUS_CODESET)
             or (cv.code_set = RESULT_PRCSS_CODESET)
             or (cv.code_set = COMMENT_TYPE_CODESET
               and cv.cdf_meaning in ( COMMENT_TYPE_ORD_COMMENT_CDF,
                                       COMMENT_TYPE_ORD_NOTE_CDF,
                                       COMMENT_TYPE_RES_COMMENT_CDF,
                                       COMMENT_TYPE_RES_NOTE_CDF ))
             or (cv.code_set = SERVICE_RESOURCE_TYPE_CODESET
               and cv.cdf_meaning in ( SERV_RES_INSTITUTION_CDF,
                                       SERV_RES_DEPARTMENT_CDF,
                                       SERV_RES_SECTION_CDF,
                                       SERV_RES_SUBSECTION_CDF ))
             )
           and cv.active_ind = 1
           and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
           and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)

         detail
            if (cv.code_set = ALIAS_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of ALIAS_TYPE_MRN_CDF:
                    alias_type_mrn_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = ACTIVITY_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of ACTIVITY_TYPE_GLB_CDF:
                    nbr_actvty_types = nbr_actvty_types + 1
                    stat = alterlist(actvty_type->qual, nbr_actvty_types)
                    actvty_type->qual[nbr_actvty_types].activity_type_cd =              ;012
                      cv.code_value
                    ;* Make sure at least 1 GLB activity type exists.
                    if (glb_act_type_found_ind = 0)                                     ;012
                       cv_cnt = cv_cnt + 1
                       glb_act_type_found_ind = 1                                       ;015
                    endif
                 of ACTIVITY_TYPE_HLA_CDF:                                              ;012
                    nbr_actvty_types = nbr_actvty_types + 1                             ;012
                    cv_cnt = cv_cnt + 1                                                 ;012
                    stat = alterlist(actvty_type->qual, nbr_actvty_types)               ;012
                    actvty_type->qual[nbr_actvty_types].activity_type_cd =              ;012
                      cv.code_value                                                     ;012
                 of ACTIVITY_TYPE_HLX_CDF:                                              
                    nbr_actvty_types = nbr_actvty_types + 1                             
                    cv_cnt = cv_cnt + 1                                                 
                    stat = alterlist(actvty_type->qual, nbr_actvty_types)               
                    actvty_type->qual[nbr_actvty_types].activity_type_cd =              
                      cv.code_value  
                 endcase
            endif
            if (cv.code_set = RESULT_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of "2":
                    result_type_alpha_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "3":
                    result_type_numeric_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "4":
                    result_type_interp_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "8":
                    result_type_calc_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = RESULT_STATUS_CODESET)
               case (cv.cdf_meaning)
                 of "PERFORMED":
                    performed_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "OLDPERFORMED":
                    oldperformed_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "VERIFIED":
                    verified_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "CORRINREV":
                    corrinrev_cd = cv.code_value
                    cv_cnt = cv_cnt + 1                 
                 of "OLDVERIFIED":
                    oldverified_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "AUTOVERIFIED":                    ;002
                    autoverified_cd = cv.code_value                    ;002
                    cv_cnt = cv_cnt + 1                                ;002
                 of "OLDAUTOVERF":                    ;002
                    oldautoverified_cd = cv.code_value                 ;002
                    cv_cnt = cv_cnt + 1                                ;002
                 of "CORRECTED":
                    corrected_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "OLDCORRECTED":
                    oldcorrected_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = RESULT_PRCSS_CODESET)
               case (cv.cdf_meaning)
                 of "ALP_ABNORMAL":
                    alp_abnormal_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "ALP_CRITICAL":
                    alp_critical_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "ALP_REVIEW":
                    alp_review_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "NORMAL_HIGH":
                    normal_high_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "NORMAL_LOW":
                    normal_low_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "CRITICAL":
                    critical_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "REVIEW":
                    review_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "DELTA_FAIL":
                    delta_fail_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "LINEAR":                           ;005
                    linear_cd = cv.code_value                          ;005
                    cv_cnt = cv_cnt + 1                                ;005
                 of "FEASIBLE":                         ;005
                    feasible_cd = cv.code_value                        ;005
                    cv_cnt = cv_cnt + 1                                ;005
                 of "QC_OVERRIDE":
                    qc_override_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "NOTIFY":
                    notify_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of "ALP_NOTIFY":
                    alp_notify_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = COMMENT_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of COMMENT_TYPE_ORD_COMMENT_CDF:
                    order_comment_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_ORD_NOTE_CDF:
                    order_note_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_RES_COMMENT_CDF:
                    result_comment_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of COMMENT_TYPE_RES_NOTE_CDF:
                    result_note_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif
            if (cv.code_set = SERVICE_RESOURCE_TYPE_CODESET)
               case (cv.cdf_meaning)
                 of SERV_RES_INSTITUTION_CDF:
                    serv_res_institution_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_DEPARTMENT_CDF:
                    serv_res_department_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_SECTION_CDF:
                    serv_res_section_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
                 of SERV_RES_SUBSECTION_CDF:
                    serv_res_subsection_cd = cv.code_value
                    cv_cnt = cv_cnt + 1
               endcase
            endif

         with
            nocounter

         ;* Verify that all required code value records were read.
         if (cv_cnt != CV_REQUIRED_RECS)
            go to Exit_Script
         endif

/***Debug***
         call echo("actvty_type array dump", 1)
         for (x = 1 to nbr_actvty_types)
            call echo(actvty_type->qual[x].glb_activity_type_cd, 1)
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Load operations parameter list                                       *
      ***********************************************************************/

         if (trim(request->batch_selection) > " ")
            set batch_selection_cd = cnvtreal(trim(request->batch_selection))
            set parm_string = fillstring(100, " ")

            select into "nl:"
              cv.code_value
            from
              code_value cv
            where cv.code_set = 1950 and cv.active_ind = 1
            and trim(cv.display_key) = trim(cnvtupper(cnvtalphanum(request->batch_selection)))
            detail
               cdf_string = trim(cv.cdf_meaning)
               parm_string = trim(cv.definition)
            with
               nocounter

            if (curqual = 0)
                select into "nl:"
                        cv.code_value
                from
                        code_value cv
                where   cv.code_set = 1950 and cv.active_ind = 1
                        and cv.code_value = batch_selection_cd
                detail
                        cdf_string = trim(cv.cdf_meaning)
                        parm_string = trim(cv.definition)
                with
                        nocounter
                if (curqual = 0)
                        set reply->status_data->status = "Z"
                        go to Exit_Script
                endif
            endif

    ;**********************jpm
                if (cdf_string != "EXC")
                   set reply->status_data->status = "F"
                   set reply->status_data->subeventstatus[1]->operationname = "select"
                   set reply->status_data->subeventstatus[1]->operationstatus = "F"
                   set reply->status_data->subeventstatus[1]->targetobjectname = "code_value"
                   set reply->status_data->subeventstatus[1]->targetobjectvalue =
                                "selected display_key's cdf_meaning <> EXC"
                        go to Exit_Script
                endif
;**********************jpm
            ;* Locate the individual parameters in parm_string
            ;* and put them in the ops_params array.
            set ptr = 1
            set start_ptr = 1
            set param_idx = 1
;011             for (param_idx = 1 TO 12)
            for (param_idx = 1 TO 13)                                  ;011
               set ptr = findstring(",", parm_string, start_ptr)
               if (ptr < 1)
                  set ptr = 100
               endif
               set parm_len = ptr - start_ptr
               set paramarray[param_idx]=
                 trim(substring(start_ptr, value(parm_len), parm_string), 3)
               set start_ptr = ptr + 1
            endfor
            ; 14th and 15th position need to be checked because they are recent additions to
            ; exception reporting (qc_override and notify flags)...14 and 15 may not exist for all
            ; existing operation parameter strings on code_value table since they are new additions.
            ; The 16th parameter was added in a later update and could also possibly not exist.
            if (size(trim(substring(start_ptr, 1, parm_string))) > 0) 
                set paramarray[14] = trim(substring(start_ptr, 1, parm_string))
                set start_ptr = start_ptr + 2
                if (size(trim(substring(start_ptr, 1, parm_string))) > 0) 
                  set paramarray[15] = trim(substring(start_ptr, 1, parm_string))
                  
                  set start_ptr = start_ptr + 2
                  if (size(trim(substring(start_ptr, 1, parm_string))) > 0) 
                    set paramarray[16] = trim(substring(start_ptr, 1, parm_string))
                  else 
                    set paramarray[16] = "0"
                  endif

                else 
                  set paramarray[15] = "0"
                  set paramarray[16] = "0"
                endif
            else 
                set paramarray[14] = "0"
                set paramarray[15] = "0"
                set paramarray[16] = "0"
            endif                       
            
            ;* Use array of ops parameters to set request fields.
            set request->service_resource_cd =
              cnvtreal(paramarray[1])
            set request->printer_name = request->output_dist
            set todays_date = format(request->ops_date, "@MEDIUMDATE4YR;;Q") ;010
            set date_begin_string = concat(todays_date, " ", trim(paramarray[2],3), captions->begin)
            set date_end_string = concat(todays_date, " ", trim(paramarray[3],3), captions->end_dt)
            set request->dt_tm_begin = cnvtdatetime(date_begin_string)
            if (request->dt_tm_begin > request->ops_date)
               set request->dt_tm_begin = datetimeadd(request->dt_tm_begin, -1)
            endif
            set request->dt_tm_end = cnvtdatetime(date_end_string)
            if (request->dt_tm_end > request->ops_date)
               set request->dt_tm_end = datetimeadd(request->dt_tm_end, -1)
            endif
            if (request->dt_tm_begin > request->dt_tm_end)
               set request->dt_tm_begin = datetimeadd(request->dt_tm_begin, -1)
            endif
            set request->abnormal_results = cnvtint(trim(paramarray[4]))
            set request->blank_ref_ranges = cnvtint(trim(paramarray[5]))
            set request->converted_types = cnvtint(trim(paramarray[6]))
            set request->critical_results = cnvtint(trim(paramarray[7]))
            set request->delta_checks = cnvtint(trim(paramarray[8]))
            set request->review_limit = cnvtint(trim(paramarray[9]))
            set request->linear = cnvtint(trim(paramarray[10]))     ;jpm -flags are in there,
            set request->feasible = cnvtint(trim(paramarray[11]))   ;but but the code for their
            set request->dilution = cnvtint(trim(paramarray[12]))   ;implementation is not written
            if (trim(paramarray[13], 3) = "0" or  trim(paramarray[13], 3) = "1")
               set sub_sort_flag = cnvtint(trim(paramarray[13], 3))
            endif
            set request->qc_override_ind = cnvtint(trim(paramarray[14]))
            set request->notify_ind = cnvtint(trim(paramarray[15]))
            set request->letter_size_ind = cnvtint(trim(paramarray[16]))
            if(LOCALE != localeObjectName)  
              set request->letter_size_ind = 0
            endif 
         endif

      /***********************************************************************
      * Determine if the service resource passed is a section, subsection,   *
      * or test site.  Note: Service resource of 0.0 means print activity    *
      * for all testing sites.                                               *
      ***********************************************************************/
         call InitResourceSecurity(request->resource_sec_ind)

         if (request->service_resource_cd = 0.0)
            set serv_res_level_flag = 3  ;* All Sections
         else
            select into "nl:"
               cv.code_value
            from
               code_value cv
            where cv.code_value = request->service_resource_cd
            detail
               case (cv.cdf_meaning)
                 of "SECTION":
                    serv_res_level_flag = 2
                 of "SUBSECTION":
                    serv_res_level_flag = 1
                 else
                    serv_res_level_flag = 0
                    stat = alterlist(test_site->qual, 1)
                    test_site->qual[1].service_resource_cd =
                          request->service_resource_cd
                    nbr_ts = 1
               endcase
            with
              nocounter

            if (curqual = 0)
               set reply->status_data->status = "Z"
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Load the testing sites associated with the service resource passed in*
      * based on its resource level.                                         *
      ***********************************************************************/
         if (serv_res_level_flag != 0)
            if (serv_res_level_flag = 1)  ;* Process subsection
               select into "nl:"
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group subsect
               where subsect.parent_service_resource_cd =
                                          request->service_resource_cd
                 and subsect.resource_group_type_cd = serv_res_subsection_cd
                 and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.parent_service_resource_cd
                  endif                                                         ;016
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.child_service_resource_cd
                  endif                                                         ;016
               with
                  nocounter
            elseif (serv_res_level_flag = 2)  ;* Process section
               select into "nl:"
                  sect.parent_service_resource_cd,
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group sect,
                  resource_group subsect
               plan sect    where sect.resource_group_type_cd =
                                            serv_res_section_cd
                              and sect.parent_service_resource_cd =
                                            request->service_resource_cd
                              and sect.root_service_resource_cd+0 = 0.0
               join subsect where subsect.parent_service_resource_cd =
                                            sect.child_service_resource_cd
                              and subsect.resource_group_type_cd =
                                            serv_res_subsection_cd
                              and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.parent_service_resource_cd
                  endif                                                         ;016
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.child_service_resource_cd
                  endif                                                         ;016
               with
                  nocounter
            elseif (serv_res_level_flag = 3)  ;* Process all sections
               ;* If no service resource was passed, load all test sites
               ;* under all sections.
               select into "nl:"
                  sect.parent_service_resource_cd,
                  subsect.parent_service_resource_cd,
                  subsect.child_service_resource_cd
               from
                  resource_group sect,
                  resource_group subsect
               plan sect    where sect.resource_group_type_cd =
                                            serv_res_section_cd
                              and sect.root_service_resource_cd = 0.0
               join subsect where subsect.parent_service_resource_cd =
                                            sect.child_service_resource_cd
                              and subsect.resource_group_type_cd =
                                            serv_res_subsection_cd
                              and subsect.root_service_resource_cd+0 = 0.0
               order by
                  subsect.parent_service_resource_cd,                   ;003
                  subsect.child_service_resource_cd
               head subsect.parent_service_resource_cd                  ;003
                  dServiceResourceCd = subsect.parent_service_resource_cd       ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.parent_service_resource_cd
                  endif                                                         ;016
               head subsect.child_service_resource_cd
                  dServiceResourceCd = subsect.child_service_resource_cd        ;016
                  if (IsResourceViewable(dServiceResourceCd) = True)            ;016
                     nbr_ts = nbr_ts + 1
                     stat = alterlist(test_site->qual, nbr_ts)
                     test_site->qual[nbr_ts].service_resource_cd =
                           subsect.child_service_resource_cd
                  endif                                                         ;016
               with
                  nocounter
            endif

            if (nbr_ts = 0)
               set reply->status_data->status = "Z"
               go to Exit_Script
            endif
         endif

      /***********************************************************************
      * Load the institution, department, section, subsection,and test site  *
      * names associated with each testing site.                             *
      ***********************************************************************/
         select into "nl:"
            d1.seq,
            testsite_disp = trim(substring(1, 40, UAR_GET_CODE_DISPLAY(test_site->qual[d1.seq].service_resource_cd)),3), ;008
            d2.seq,
            subsect_exists = decode(subsect.seq, "Y", "N"),
            subsect.parent_service_resource_cd,
            subsect.child_service_resource_cd,
            d3.seq,
            sect_exists = decode(sect.seq, "Y", "N"),
            sect.parent_service_resource_cd,
            sect.child_service_resource_cd,
            d4.seq,
            dept_exists = decode(dept.seq, "Y", "N"),
            dept.parent_service_resource_cd,
            dept.child_service_resource_cd,
            d5.seq,
            inst_exists = decode(inst.seq, "Y", "N"),
            inst.parent_service_resource_cd,
            inst.child_service_resource_cd
         from
            (dummyt d1 with seq = value(nbr_ts)),
            (dummyt d2 with seq = 1),
            resource_group subsect,
            (dummyt d3 with seq = 1),
            resource_group sect,
            (dummyt d4 with seq = 1),
            resource_group dept,
            (dummyt d5 with seq = 1),
            resource_group inst
         plan d1
         join d2 where d2.seq = 1
         join subsect where (subsect.child_service_resource_cd =        ;003
                           test_site->qual[d1.seq].service_resource_cd  ;003
                          or subsect.parent_service_resource_cd =       ;003
                           test_site->qual[d1.seq].service_resource_cd) ;003
                        and subsect.resource_group_type_cd =
                               serv_res_subsection_cd
                        and subsect.root_service_resource_cd = 0.0
                        and subsect.active_ind = 1
                        and cnvtdatetime(curdate, curtime) between subsect.beg_effective_dt_tm and 
                            subsect.end_effective_dt_tm
         join d3      where d3.seq = 1
         join sect    where sect.child_service_resource_cd =
                               subsect.parent_service_resource_cd
                        and sect.resource_group_type_cd =
                               serv_res_section_cd
                        and sect.root_service_resource_cd = 0.0
         join d4      where d4.seq = 1
         join dept    where dept.child_service_resource_cd =
                               sect.parent_service_resource_cd
                        and dept.resource_group_type_cd =
                               serv_res_department_cd
                        and dept.root_service_resource_cd = 0.0
         join d5      where d5.seq = 1
         join inst    where inst.child_service_resource_cd =
                               dept.parent_service_resource_cd
                        and inst.resource_group_type_cd =
                               serv_res_institution_cd
                        and inst.root_service_resource_cd = 0.0
         detail
            if (test_site->qual[d1.seq].service_resource_cd > 0.0)
               test_site->qual[d1.seq].ts_cd = test_site->qual[d1.seq].service_resource_cd      ;008
               test_site->qual[d1.seq].ts_disp = testsite_disp
            else
               test_site->qual[d1.seq].ts_cd = 0.0
               test_site->qual[d1.seq].ts_disp = captions->not_fnd     ;010
            endif
            if (subsect_exists = "Y" and subsect.parent_service_resource_cd > 0.0)
               test_site->qual[d1.seq].subsect_cd = subsect.parent_service_resource_cd  ;008
               test_site->qual[d1.seq].subsect_disp =
                   trim(substring(1, 40, UAR_GET_CODE_DISPLAY(subsect.parent_service_resource_cd)), 3)
            else
               test_site->qual[d1.seq].subsect_cd = 0.0
               test_site->qual[d1.seq].subsect_disp = captions->not_fnd ;010
            endif
            if (sect_exists = "Y" and sect.parent_service_resource_cd > 0.0)
               test_site->qual[d1.seq].sect_cd = sect.parent_service_resource_cd        ;008
               test_site->qual[d1.seq].sect_disp =
                   trim(substring(1,40,UAR_GET_CODE_DISPLAY(sect.parent_service_resource_cd)),3)        ;008
            else
               test_site->qual[d1.seq].sect_cd = 0.0
               test_site->qual[d1.seq].subsect_disp = captions->not_fnd ;010
            endif
            if (dept_exists = "Y" and dept.parent_service_resource_cd > 0.0)
               test_site->qual[d1.seq].dept_cd = dept.parent_service_resource_cd        ;008
               test_site->qual[d1.seq].dept_disp =
                     trim(substring(1,40,UAR_GET_CODE_DISPLAY(dept.parent_service_resource_cd)),3)      ;008
            else
               test_site->qual[d1.seq].dept_cd = 0.0
               test_site->qual[d1.seq].dept_disp = captions->not_fnd   ;010
            endif
            if (inst_exists = "Y" and inst.parent_service_resource_cd > 0.0)
               test_site->qual[d1.seq].inst_cd = inst.parent_service_resource_cd        ;008
               test_site->qual[d1.seq].inst_disp =
                 trim(substring(1, 40, UAR_GET_CODE_DESCRIPTION(inst.parent_service_resource_cd)), 3)          ;014
            else
               test_site->qual[d1.seq].inst_cd = 0.0
               test_site->qual[d1.seq].inst_disp = captions->not_fnd   ;010
            endif

         with
            nocounter,
            outerjoin = d2,
            maxread(subsect, 1),
            outerjoin = d3,
            maxread(sect, 1),
            outerjoin = d4,
            maxread(dept, 1),
            outerjoin = d5,
            maxread(inst, 1)

/***Debug***
         call echo("test_site array dump", 1)
         for (x = 1 to nbr_ts)
            call echo(test_site->qual[x].service_resource_cd, 1)
            call echo(build("   Institution = ", test_site->qual[x].inst_disp))
            call echo(build("   Department = ", test_site->qual[x].dept_disp))
            call echo(build("   Section = ", test_site->qual[x].sect_disp))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_disp))
            call echo(build("   Test Site = ", test_site->qual[x].ts_disp))
         endfor
         call echo(" ", 1)
***Debug***/

      /***********************************************************************
      * Sort test_site array in alphabetical order.                          *
      ***********************************************************************/
         for (cnt = 1 to (nbr_ts - 1))
            for (cnt2 = cnt to nbr_ts)
               set ts_sort->key1 = concat(
                substring(1, 40, cnvtupper(test_site->qual[cnt].inst_disp)),
                format(test_site->qual[cnt].inst_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt].dept_disp)),
                format(test_site->qual[cnt].dept_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt].sect_disp)),
                format(test_site->qual[cnt].sect_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt].subsect_disp)),
                format(test_site->qual[cnt].subsect_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt].ts_disp)),
                format(test_site->qual[cnt].ts_cd,"###############.##;p0;f"))
               set ts_sort->key2 = concat(
                substring(1, 40, cnvtupper(test_site->qual[cnt2].inst_disp)),
                format(test_site->qual[cnt2].inst_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt2].dept_disp)),
                format(test_site->qual[cnt2].dept_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt2].sect_disp)),
                format(test_site->qual[cnt2].sect_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt2].subsect_disp)),
                format(test_site->qual[cnt2].subsect_cd,"###############.##;p0;f"),
                substring(1, 40, cnvtupper(test_site->qual[cnt2].ts_disp)),
                format(test_site->qual[cnt2].ts_cd,"###############.##;p0;f"))
                if (ts_sort->key1 > ts_sort->key2)
                  set ts_sort->service_resource_cd = test_site->qual[cnt].service_resource_cd
                  set ts_sort->inst_cd = test_site->qual[cnt].inst_cd
                  set ts_sort->inst_disp = test_site->qual[cnt].inst_disp
                  set ts_sort->dept_cd = test_site->qual[cnt].dept_cd
                  set ts_sort->dept_disp = test_site->qual[cnt].dept_disp
                  set ts_sort->sect_cd = test_site->qual[cnt].sect_cd
                  set ts_sort->sect_disp = test_site->qual[cnt].sect_disp
                  set ts_sort->subsect_cd = test_site->qual[cnt].subsect_cd
                  set ts_sort->subsect_disp = test_site->qual[cnt].subsect_disp
                  set ts_sort->ts_cd = test_site->qual[cnt].ts_cd
                  set ts_sort->ts_disp = test_site->qual[cnt].ts_disp
                  set test_site->qual[cnt].service_resource_cd = test_site->qual[cnt2].service_resource_cd
                  set test_site->qual[cnt].inst_cd = test_site->qual[cnt2].inst_cd
                  set test_site->qual[cnt].inst_disp = test_site->qual[cnt2].inst_disp
                  set test_site->qual[cnt].dept_cd = test_site->qual[cnt2].dept_cd
                  set test_site->qual[cnt].dept_disp = test_site->qual[cnt2].dept_disp
                  set test_site->qual[cnt].sect_cd = test_site->qual[cnt2].sect_cd
                  set test_site->qual[cnt].sect_disp = test_site->qual[cnt2].sect_disp
                  set test_site->qual[cnt].subsect_cd = test_site->qual[cnt2].subsect_cd
                  set test_site->qual[cnt].subsect_disp = test_site->qual[cnt2].subsect_disp
                  set test_site->qual[cnt].ts_cd = test_site->qual[cnt2].ts_cd
                  set test_site->qual[cnt].ts_disp = test_site->qual[cnt2].ts_disp
                  set test_site->qual[cnt2].service_resource_cd = ts_sort->service_resource_cd
                  set test_site->qual[cnt2].inst_cd = ts_sort->inst_cd
                  set test_site->qual[cnt2].inst_disp = ts_sort->inst_disp
                  set test_site->qual[cnt2].dept_cd = ts_sort->dept_cd
                  set test_site->qual[cnt2].dept_disp = ts_sort->dept_disp
                  set test_site->qual[cnt2].sect_cd = ts_sort->sect_cd
                  set test_site->qual[cnt2].sect_disp = ts_sort->sect_disp
                  set test_site->qual[cnt2].subsect_cd = ts_sort->subsect_cd
                  set test_site->qual[cnt2].subsect_disp = ts_sort->subsect_disp
                  set test_site->qual[cnt2].ts_cd = ts_sort->ts_cd
                  set test_site->qual[cnt2].ts_disp = ts_sort->ts_disp
               endif
            endfor
         endfor

      /***********************************************************************
      * Set the sort sequence values                                         *
      ***********************************************************************/
         set hier_seq = 0                                              ;011
         for (cnt = 1 to nbr_ts)                                       ;011
            set inst_break_ind = 0                                     ;011
            set dept_break_ind = 0                                     ;011
            set sect_break_ind = 0                                     ;011
            set subsect_break_ind = 0                                  ;011
            set ts_break_ind = 0                                       ;011
                                                                       ;011
            if (cnt = 1)
               set inst_break_ind = 1
               set dept_break_ind = 1
               set sect_break_ind = 1
               set subsect_break_ind = 1
               set ts_break_ind = 1
            else
               if (test_site->qual[cnt].inst_cd != test_site->qual[cnt - 1].inst_cd)
                  set inst_break_ind = 1
                  set dept_break_ind = 1
                  set sect_break_ind = 1
                  set subsect_break_ind = 1
                  set ts_break_ind = 1
               endif
               if (test_site->qual[cnt].dept_cd != test_site->qual[cnt - 1].dept_cd)
                  set dept_break_ind = 1
                  set sect_break_ind = 1
                  set subsect_break_ind = 1
                  set ts_break_ind = 1
               endif
               if (test_site->qual[cnt].sect_cd != test_site->qual[cnt - 1].sect_cd)
                  set sect_break_ind = 1
                  set subsect_break_ind = 1
                  set ts_break_ind = 1
               endif
               if (test_site->qual[cnt].subsect_cd != test_site->qual[cnt - 1].subsect_cd)
                  set subsect_break_ind = 1
                  set ts_break_ind = 1
               endif
               if (test_site->qual[cnt].ts_cd != test_site->qual[cnt - 1].ts_cd)
                  set ts_break_ind = 1
               endif
            endif
            if (inst_break_ind = 1 or  dept_break_ind = 1 or  sect_break_ind = 1)
               set hier_seq = hier_seq + 1
            elseif (subsect_break_ind = 1)
               if (sub_sort_flag = 0 or (sub_sort_flag = 1 and serv_res_level_flag in (0,1)))
                  set hier_seq = hier_seq + 1
               endif
            elseif (ts_break_ind = 1)
               if (sub_sort_flag = 0 or (sub_sort_flag = 1 and serv_res_level_flag = 0))
                  set hier_seq = hier_seq + 1
               endif
            endif
            set test_site->qual[cnt].serv_res_hier_seq = hier_seq
         endfor

/***Debug***
         call echo("Sorted test_site array dump", 1)
         for (x = 1 to nbr_ts)
            call echo(build("Sequence = ",test_site->qual[x].serv_res_hier_seq))
            call echo(test_site->qual[x].service_resource_cd, 1)
            call echo(build("   Institution = ", test_site->qual[x].inst_disp))
            call echo(build("   Institution = ", test_site->qual[x].inst_cd))
            call echo(build("   Department = ", test_site->qual[x].dept_disp))
            call echo(build("   Department = ", test_site->qual[x].dept_cd))
            call echo(build("   Section = ", test_site->qual[x].sect_disp))
            call echo(build("   Section = ", test_site->qual[x].sect_cd))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_disp))
            call echo(build("   Sub Sect = ", test_site->qual[x].subsect_cd))
            call echo(build("   Test Site = ", test_site->qual[x].ts_disp))
            call echo(build("   Test Site = ", test_site->qual[x].ts_cd))
         endfor
         call echo(" ", 1)
***Debug***/
      /***********************************************************************
      * Load the perform_result records that qualify for the report.         *
      ***********************************************************************/
         select into "nl:"
            norm_low_null = nullind(pr.normal_low),
            norm_high_null = nullind(pr.normal_high),
            norm_alpha_null = nullind(pr.normal_alpha),
            c_exists = decode(c.seq, "Y", "N"),
            drawn_dttm = format(c.drawn_dt_tm, "@DATETIMECONDENSED;;Q"),
            drawn_dttm_locale = format(c.drawn_dt_tm, "YYYY/MM/DD HHMM;;Q"),            
            ts_disp = substring(1,40,test_site->qual[d_ts.seq].ts_disp)
         from
            result_event re,
            perform_result pr,
            (dummyt d_ts with seq = value(nbr_ts)),
            result r,
            orders o,
            discrete_task_assay dta,
            profile_task_r ptr,
            assay_processing_r apr,
            container c,
            container_accession ca

         plan re where
            re.event_dt_tm between cnvtdatetime(request->dt_tm_begin) and cnvtdatetime(request->dt_tm_end) and
            re.event_type_cd in(verified_cd, autoverified_cd, corrected_cd, corrinrev_cd) 
         join pr where
            pr.result_id = re.result_id and
            pr.result_status_cd in(verified_cd, autoverified_cd, corrected_cd, oldverified_cd,
                                   oldcorrected_cd, oldautoverified_cd)
         join d_ts where
            test_site->qual[d_ts.seq].service_resource_cd = pr.service_resource_cd
         join r where
            r.result_id = pr.result_id and
            r.result_status_cd in (verified_cd, autoverified_cd, corrected_cd, oldverified_cd,
                                   oldcorrected_cd, oldautoverified_cd)
         join o where
            o.order_id = r.order_id and
            expand(n, 1, nbr_actvty_types, o.activity_type_cd, actvty_type->qual[n].activity_type_cd)
         join dta where
            dta.task_assay_cd = r.task_assay_cd
         join ptr where
            ptr.catalog_cd = o.catalog_cd and
            ptr.task_assay_cd = dta.task_assay_cd
         join apr where
            apr.task_assay_cd = r.task_assay_cd and
            apr.service_resource_cd = pr.service_resource_cd
         join c where
            c.container_id = outerjoin(pr.container_id)
         join ca where
            ca.container_id = outerjoin(c.container_id)
         order by
            pr.result_id,
            o.person_id,
            ca.accession,
            o.catalog_cd,
            o.order_id,
            ptr.sequence,
            ts_disp,
            pr.result_id desc,
            pr.perform_result_id desc,
            re.event_sequence

         head report
            nbr_prs = 0

         head pr.result_id
            if((request->abnormal_results = 1 and pr.normal_cd in( normal_high_cd, normal_low_cd ))
            or (request->abnormal_results = 1 and pr.normal_cd = alp_abnormal_cd)
            or (request->critical_results = 1 and pr.critical_cd in ( critical_cd, alp_critical_cd ))
            or (request->delta_checks = 1 and pr.delta_cd = delta_fail_cd)
            or (request->review_limit = 1 and pr.review_cd in (review_cd, alp_review_cd))
            or (request->linear = 1 and pr.linear_cd = linear_cd)
            or (request->feasible = 1 and pr.feasible_cd = feasible_cd)
            or (request->notify_ind = 1 and pr.notify_cd in(notify_cd, alp_notify_cd))
            or (request->dilution = 1 and pr.dilution_factor > 0.0)
            or (request->qc_override_ind = 1 and pr.qc_override_cd = qc_override_cd and pr.qc_override_cd != 0.0) 
            or (request->converted_types = 1 and apr.default_result_type_cd != pr.result_type_cd)
            or (request->blank_ref_ranges = 1 and pr.result_type_cd in(result_type_numeric_cd, result_type_calc_cd)
                and norm_low_null = 1 and norm_high_null = 1)
            or (request->blank_ref_ranges = 1 and pr.result_type_cd in(result_type_alpha_cd, result_type_interp_cd)
                and norm_alpha_null = 1))
               nbr_prs = nbr_prs + 1
               if (mod(nbr_prs, 50) = 1)
                  stat = alterlist(perf_results->qual, nbr_prs + 49)
               endif
               perf_results->qual[nbr_prs].result_id = pr.result_id
               perf_results->qual[nbr_prs].perform_result_id = pr.perform_result_id
               perf_results->qual[nbr_prs].service_resource_cd = pr.service_resource_cd
               perf_results->qual[nbr_prs].task_assay_cd = r.task_assay_cd
               perf_results->qual[nbr_prs].detail_mnemonic = dta.mnemonic
               perf_results->qual[nbr_prs].sci_notation_ind = dta.sci_notation_ind
               perf_results->qual[nbr_prs].order_id = r.order_id
               perf_results->qual[nbr_prs].catalog_cd = r.catalog_cd
               if (c_exists = "Y")
                  perf_results->qual[nbr_prs].drawn_dt_tm = drawn_dttm
                  perf_results->qual[nbr_prs].drawn_dt_tm_locale = drawn_dttm_locale
                  perf_results->qual[nbr_prs].accession = uar_fmt_accession(ca.accession, size(ca.accession,1))
               else
                  perf_results->qual[nbr_prs].drawn_dt_tm = ""
                  perf_results->qual[nbr_prs].drawn_dt_tm_locale = ""
                  perf_results->qual[nbr_prs].accession = ""
               endif
               perf_results->qual[nbr_prs].result_type_cd = pr.result_type_cd
               perf_results->qual[nbr_prs].data_map_ind = 0
               perf_results->qual[nbr_prs].max_digits = 0
               perf_results->qual[nbr_prs].min_decimal_places = 0
               perf_results->qual[nbr_prs].min_digits = 0
               perf_results->qual[nbr_prs].long_text_id = pr.long_text_id
               perf_results->qual[nbr_prs].long_text = " "
               perf_results->qual[nbr_prs].inst_cd = test_site->qual[d_ts.seq].inst_cd
               perf_results->qual[nbr_prs].inst_disp = test_site->qual[d_ts.seq].inst_disp
               perf_results->qual[nbr_prs].dept_cd = test_site->qual[d_ts.seq].dept_cd
               perf_results->qual[nbr_prs].dept_disp = test_site->qual[d_ts.seq].dept_disp
               perf_results->qual[nbr_prs].sect_cd = test_site->qual[d_ts.seq].sect_cd
               perf_results->qual[nbr_prs].sect_disp = test_site->qual[d_ts.seq].sect_disp
               perf_results->qual[nbr_prs].subsect_cd = test_site->qual[d_ts.seq].subsect_cd
               perf_results->qual[nbr_prs].subsect_disp = test_site->qual[d_ts.seq].subsect_disp
               perf_results->qual[nbr_prs].ts_cd = test_site->qual[d_ts.seq].ts_cd
               perf_results->qual[nbr_prs].ts_disp = test_site->qual[d_ts.seq].ts_disp
               perf_results->qual[nbr_prs].serv_res_hier_seq = test_site->qual[d_ts.seq].serv_res_hier_seq
            endif
         detail
            row+0
         foot report
            stat = alterlist(perf_results->qual, nbr_prs)
         with nocounter

/***Debug***
         call echo(build("nbr_prs = ", nbr_prs))
         if (nbr_prs > 0)
            call echo("      result_id   perform_result_id     order_id    task_assay_cd", 1)
            for (x = 1 to nbr_prs)
               call echo(x, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].result_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].perform_result_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].order_id, 0)
               call echo("   ", 0)
               call echo(perf_results->qual[x].task_assay_cd, 1)
            endfor
            call echo(" ", 1)
         endif

***Debug***/

      /***********************************************************************
      * Load the data_map records for numeric results.                       *
      ***********************************************************************/
         select into "nl:"
            data_map_exists = decode(dm.seq, "Y", "N"),
            rg_exists = decode(rg.seq, "Y", "N")
         from
            (dummyt d with seq = value(nbr_prs)),
            data_map dm,
            resource_group rg
         plan d where
            perf_results->qual[d.seq].result_type_cd in(result_type_numeric_cd, result_type_calc_cd)
         join dm where
            dm.task_assay_cd = outerjoin(perf_results->qual[d.seq].task_assay_cd) and
            dm.data_map_type_flag = outerjoin(0) and
            dm.active_ind = outerjoin(1)
         join rg where
            rg.parent_service_resource_cd = outerjoin(dm.service_resource_cd) and
            rg.child_service_resource_cd = outerjoin(perf_results->qual[d.seq].service_resource_cd) and
            rg.resource_group_type_cd = outerjoin(serv_res_subsection_cd) and
            rg.root_service_resource_cd = outerjoin(0.0)
         order d.seq
         head d.seq
            data_map_level = 0
         detail
            if (data_map_exists = "Y")                                 ;004
               ;* Check for exact match on data map                    ;004
               if (data_map_level < 3 and dm.service_resource_cd > 0.0 and
                   dm.service_resource_cd = perf_results->qual[d.seq].service_resource_cd)
                  data_map_level = 3                                   ;004
                  perf_results->qual[d.seq].data_map_ind = 1             ;004
                  perf_results->qual[d.seq].max_digits = dm.max_digits   ;004
                  perf_results->qual[d.seq].min_digits = dm.min_digits   ;004
                  perf_results->qual[d.seq].min_decimal_places = dm.min_decimal_places
               endif
               ;* Check for subsection level data map                  ;004
               if (data_map_level < 2 and dm.service_resource_cd > 0.0 and rg_exists = "Y" and
                   rg.parent_service_resource_cd = dm.service_resource_cd and
                   rg.child_service_resource_cd = perf_results->qual[d.seq].service_resource_cd)
                  data_map_level = 2                                   ;004
                  perf_results->qual[d.seq].data_map_ind = 1             ;004
                  perf_results->qual[d.seq].max_digits = dm.max_digits   ;004
                  perf_results->qual[d.seq].min_digits = dm.min_digits   ;004
                  perf_results->qual[d.seq].min_decimal_places = dm.min_decimal_places
               endif                                                   ;004
               ;* Check for default all resources level data map       ;004
               if (data_map_level = 0 and dm.service_resource_cd = 0.0)
                  data_map_level = 1                                   ;004
                  perf_results->qual[d.seq].data_map_ind = 1             ;004
                  perf_results->qual[d.seq].max_digits = dm.max_digits   ;004
                  perf_results->qual[d.seq].min_digits = dm.min_digits   ;004
                  perf_results->qual[d.seq].min_decimal_places = dm.min_decimal_places
               endif                                                   ;004
            endif                                                      ;004

         foot d.seq
            ;* If no data_map rec found, set default map values
            if (perf_results->qual[d.seq].data_map_ind = 0)
               perf_results->qual[d.seq].data_map_ind = 1
               perf_results->qual[d.seq].max_digits = 8
               perf_results->qual[d.seq].min_decimal_places = 0
               perf_results->qual[d.seq].min_digits = 1
            endif

         with nocounter

      /***********************************************************************
      * Load the long_text records for textual results.                      *
      ***********************************************************************/
         select into "nl:"
         from
            (dummyt d with seq = value(nbr_prs)),
            long_text lt
         plan d
         join lt where
            lt.long_text_id = perf_results->qual[d.seq].long_text_id
         head report
%i cclsource:glb_rpt_macros.inc
            cnt = 0
         detail
            cnt = d.seq
            if (lt.long_text_id > 0.0)
               arg_text_in = fillstring(30000, " ")
               arg_text_in = trim(lt.long_text)
               rtf_to_ascii
               perf_results->qual[cnt].long_text = trim(text_out)
            endif
         with nocounter

      /***********************************************************************
      * Load the most recent chartable and non-chartable order comments.     *
      ***********************************************************************/

         ;* Load order comments and notes
         select into "nl:"
            comment_type = oc.comment_type_cd
         from
            (dummyt d1 with seq = value(nbr_prs)),
            order_comment oc,
            long_text lt
         plan d1
         join oc where
            oc.order_id = perf_results->qual[d1.seq].order_id and
            oc.comment_type_cd in(order_note_cd, order_comment_cd)
         join lt where
            lt.long_text_id = oc.long_text_id and
            lt.long_text_id > 0.0
         detail
            if(comment_type = order_comment_cd)
              perf_results->qual[d1.seq].oc_ind = 1
              perf_results->qual[d1.seq].oc_text = lt.long_text
            else
              perf_results->qual[d1.seq].on_ind = 1
              perf_results->qual[d1.seq].on_text = lt.long_text
            endif
         with nocounter

      /***********************************************************************
      * Load the most recent chartable and non-chartable result comments.    *
      ***********************************************************************/

         ;* Load result comments and notes
         select into "nl:"
            comment_type = rc.comment_type_cd
         from
            (dummyt d1 with seq = value(nbr_prs)),
            result_comment rc,
            long_text lt
         plan d1
         join rc where
            rc.result_id = perf_results->qual[d1.seq].result_id and
            rc.comment_type_cd in(result_comment_cd, result_note_cd)
         join lt where
            lt.long_text_id = rc.long_text_id and
            lt.long_text_id > 0.0
         detail
            if(comment_type = result_comment_cd)
              perf_results->qual[d1.seq].rc_ind = 1
              perf_results->qual[d1.seq].rc_text = lt.long_text
            else
              perf_results->qual[d1.seq].rn_ind = 1
              perf_results->qual[d1.seq].rn_text = lt.long_text
            endif
         with nocounter
         
call echorecord(perf_results)
      /***********************************************************************
      * Print report                                                         *
      ***********************************************************************/
      #Print_Report
         set title_text = captions->title
         if(LOCALE = localeObjectName)
         set begin_dat = format(request->dt_tm_begin, "@DATECONDENSED;;Q") ;010
         set end_dat = format(request->dt_tm_end, "@DATECONDENSED;;Q") ;010
         else
         set begin_dat = format(request->dt_tm_begin, "YYYY/MM/DD;;Q") ;010
         set end_dat = format(request->dt_tm_end, "YYYY/MM/DD;;Q") ;010
         endif
         set begin_tm = format(request->dt_tm_begin, "@TIMENOSECONDS;;M")
         set end_tm = format(request->dt_tm_end, "@TIMENOSECONDS;;M")
         set report_date_range = concat(begin_dat," ",begin_tm,Captions->to_," ", end_dat," ", end_tm)

         select into "nl:"
            p.username
         from prsnl p
         where p.person_id = reqinfo->updt_id
         detail
            username = trim(p.username)
         with nocounter
         
         execute cpm_create_file_name "GLB_EXCEP", "txt"
    
         if (cpm_cfn_info->status_data.status != "S")
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->operationname = "get"
           set reply->status_data->subeventstatus[1]->operationstatus = "F"
           set reply->status_data->subeventstatus[1]->targetobjectname = "filename"
           set reply->status_data->subeventstatus[1]->targetObjectValue = "Filename Retrieval Unsuccessful"
           go to exit_script
         endif
        
         set reply->file_name = cpm_cfn_info->file_name_path

         select into trim(reply->file_name)
            serv_res_hier = perf_results->qual[d_pr.seq].serv_res_hier_seq,

            detail_mne = if(request->letter_size_ind = 1)
                 trim(nullterm(substring(1, 16, 
                    perf_results->qual[d_pr.seq].detail_mnemonic)))       
            else
                 trim(nullterm(substring(1, 11, 
                    perf_results->qual[d_pr.seq].detail_mnemonic)))
            endif,

            drawn_dttm = perf_results->qual[d_pr.seq].drawn_dt_tm,
            drawn_dttm_locale = perf_results->qual[d_pr.seq].drawn_dt_tm_locale,
            norm_low_null = nullind(pr.normal_low),
            norm_high_null = nullind(pr.normal_high),
            norm_alpha_null = nullind(pr.normal_alpha),
            alpha_result = trim(substring(1, 15, pr.result_value_alpha)),
            freetext_result = trim(substring(1, 15, pr.ascii_text)),
            code_value_result = trim(substring(1, 15, UAR_GET_CODE_DISPLAY(pr.result_code_set_cd))),
            date_result = format(pr.result_value_dt_tm, "@SHORTDATE;;Q"), ;010
            date_result_locale = format(pr.result_value_dt_tm, "YYYY/MM/DD;;Q"),
            event_date = format(re.event_dt_tm, "@DATETIMECONDENSED;;Q"), ;010
            event_date_locale = format(re.event_dt_tm,"YYYY/MM/DD HHMM;;Q"),
            order_unique = build(o.catalog_cd, o.order_id),
/*001...*/  ord_mnem = trim(substring(1, 12, o.order_mnemonic)),
            person_unique = build(trim(p.name_full_formatted), p.person_id, e.encntr_id),
            p_name_full = trim(cnvtupper(p.name_full_formatted)),      ;011
            short_name = trim(substring(1, 27, p.name_full_formatted)),
            accn = perf_results->qual[d_pr.seq].accession,             ;006
/*008...*/  result_type_mean = trim(UAR_GET_CODE_MEANING(pr.result_type_cd), 3),
/*008...*/  psex = substring(1, 7, UAR_GET_CODE_DISPLAY(p.sex_cd)),
            doctor_name = concat(captions->dr," ",substring(1, 23, p_doc.name_full_formatted)), ;010
/*008...*/  priority = substring(1, 12, UAR_GET_CODE_DISPLAY(ol.report_priority_cd)),
            testsite_disp = substring(1, 10, UAR_GET_CODE_DISPLAY(pr.service_resource_cd)),
/*001...*/  tech_name = substring(1, 8, pl.username),
            ea_exists = decode(ea.seq, "Y", "N"),
            pat_nbr = cnvtalias(ea.alias, ea.alias_pool_cd),           ;006
            nowtime = format(curtime, "@TIMENOSECONDS;;M"),            ;010
            nowdate = format(curdate, "@SHORTDATE4YR;;Q"),
            nowdate_locale = format(curdate,"YYYY/MM/DD;;Q"),
            rc_flag = evaluate(perf_results->qual[d_pr.seq].rc_ind, 1, "Y", "N"),
            rn_flag = evaluate(perf_results->qual[d_pr.seq].rn_ind, 1, "Y", "N")
         from
            (dummyt d_pr with seq = value(nbr_prs)),
            perform_result pr,
            result_event re,
            orders o,
            order_laboratory ol,
    	      organization org,
            person p,
            encounter e,
            profile_task_r ptr,
            prsnl p_doc,
            prsnl pl,
            (dummyt d_ea with seq = 1),
            encntr_alias ea

         plan d_pr
         join pr where
            pr.perform_result_id = perf_results->qual[d_pr.seq].perform_result_id and
            pr.result_id = perf_results->qual[d_pr.seq].result_id
         join re where
            re.result_id = pr.result_id and
            re.perform_result_id = pr.perform_result_id and
            re.event_type_cd in(verified_cd, autoverified_cd, corrected_cd)
         join o where
            o.order_id = perf_results->qual[d_pr.seq].order_id
         join ol where
            ol.order_id = o.order_id
         join p where
            p.person_id = o.person_id
         join e where
            e.encntr_id = o.encntr_id
	       join org where
	          org.organization_id = e.organization_id
         join ptr where
            ptr.catalog_cd = perf_results->qual[d_pr.seq].catalog_cd and
            ptr.task_assay_cd = perf_results->qual[d_pr.seq].task_assay_cd
         join p_doc where
            p_doc.person_id = o.last_update_provider_id
         join pl where
            pl.person_id = re.event_personnel_id
         join d_ea where
            d_ea.seq = 1
         join ea where
            ea.encntr_id = e.encntr_id and
            ea.encntr_alias_type_cd = alias_type_mrn_cd and
            ea.active_ind = 1
         order by serv_res_hier,
            person_unique,
            accn,
            order_unique,
            testsite_disp,
            ptr.sequence,
            pr.perform_result_id,
            d_pr.seq,
            re.event_sequence

         head report
%i cclsource:glb_rpt_macros.inc

            if (limit = 0)
               call clear_report_data(' ')
            endif
            ;* Initialize report variables
            first_time_yn = "Y"
            break_yn = "N"
            if (nbr_prs > 0)
               rpt->inst_disp = perf_results->qual[d_pr.seq].inst_disp
               rpt->dept_disp = perf_results->qual[d_pr.seq].dept_disp
               rpt->sect_disp = perf_results->qual[d_pr.seq].sect_disp
               rpt->subsect_disp = perf_results->qual[d_pr.seq].subsect_disp
               rpt->ts_disp = perf_results->qual[d_pr.seq].ts_disp
            else
               rpt->inst_disp = test_site->qual[1]->inst_disp              ;014
               rpt->dept_disp = test_site->qual[1]->dept_disp              ;014
               rpt->sect_disp = test_site->qual[1]->sect_disp              ;014
               rpt->subsect_disp = test_site->qual[1]->subsect_disp        ;014
               rpt->ts_disp = test_site->qual[1]->ts_disp                  ;014
            endif
            P_hdg1 = captions->demo                                    ;010
		  if(LOCALE = localeObjectName)
            if(request->letter_size_ind = 1)
                p_hdg2 = concat("---------------------------------------- ",
                                "---------------------------------------------------------- ", 
                                "------------------------------")
                p_hdg5 = concat("------------ --------------------- ----------------- ",
                                "---------- ---------- ----------------------- -------- ------- ----")

            else
    /*001...*/  p_hdg2 = concat("---------------------------------------- ",
    /*001...*/                  "---------------------------------------- ------------------------------")

    /*001...*/  p_hdg5 = concat("------------ --------------------- ------------ ",
/*001...*/                  "---------- ---------- ----------------------- -------- ------- ----")

            endif
           else
            p_hdg2 = concat("---------------------------------------- ",
                            "---------------------------------------- ------------------------------")

            p_hdg5 = concat("------------ --------------------- ------------ ",
                            "---------- ---------- ----------------------- -------- ---------- ----")
           endif

            p_hdg3 = captions->results
            p_hdg4 = concat(captions->priority, captions->low)

         head page
            call center(trim(rpt->inst_disp), 0, 125)
            col 0, captions->rpt
            col 109, captions->dt
            if(LOCALE = localeObjectName)
            col + 1, nowdate
            else
            col + 1, nowdate_locale
            endif
            row + 1
            col 0, captions->dir
            col 109, captions->tm
            col + 1, nowtime
            row + 1
            call center(title_text, 0, 125)
            col 109, captions->by_
            col + 1, username
            row + 1
            call center(report_date_range, 0, 125)
            col 109, captions->pg
            col + 1, curpage "####;l;i"
            row + 1
            col 0, captions->inst
            col 14, rpt->inst_disp
            row + 1
            col 0, captions->dept
            col 14, rpt->dept_disp
            row + 1
            col 0, captions->sect
            col 14, rpt->sect_disp
            row + 1
            if (serv_res_level_flag in(0,1) or  sub_sort_flag = 0)
               col 0, captions->sub_sect
               col 14, rpt->subsect_disp
               row + 1
            endif
            if (serv_res_level_flag = 0 or  sub_sort_flag = 0)
               col 0, captions->tst_ste
               col 14, rpt->ts_disp
               row + 1
            endif
            ;* Print column headers
            row + 1

         head serv_res_hier
            if (first_time_yn = "N")
               if((serv_res_level_flag = 0 or serv_res_level_flag = 3 or sub_sort_flag = 0)
                    and (perf_results->qual[d_pr.seq].inst_disp != rpt->inst_disp
                    or perf_results->qual[d_pr.seq].dept_disp != rpt->dept_disp
                    or perf_results->qual[d_pr.seq].sect_disp != rpt->sect_disp
                    or perf_results->qual[d_pr.seq].subsect_disp != rpt->subsect_disp
                    or perf_results->qual[d_pr.seq].ts_disp != rpt->ts_disp))
                  break_yn = "Y"
               elseif((serv_res_level_flag = 1) and (perf_results->qual[d_pr.seq].inst_disp != rpt->inst_disp
                    or perf_results->qual[d_pr.seq].dept_disp != rpt->dept_disp
                    or perf_results->qual[d_pr.seq].sect_disp != rpt->sect_disp
                    or perf_results->qual[d_pr.seq].subsect_disp != rpt->subsect_disp))
                  break_yn = "Y"
               elseif((serv_res_level_flag = 2) and (perf_results->qual[d_pr.seq].inst_disp != rpt->inst_disp
                    or perf_results->qual[d_pr.seq].dept_disp != rpt->dept_disp
                    or perf_results->qual[d_pr.seq].sect_disp != rpt->sect_disp))
                  break_yn = "Y"
               else
                  break_yn = "N"
               endif
               rpt->inst_disp = perf_results->qual[d_pr.seq].inst_disp
               rpt->dept_disp = perf_results->qual[d_pr.seq].dept_disp
               rpt->sect_disp = perf_results->qual[d_pr.seq].sect_disp
               rpt->subsect_disp = perf_results->qual[d_pr.seq].subsect_disp
               rpt->ts_disp = perf_results->qual[d_pr.seq].ts_disp
               if(break_yn = "Y") break endif
            endif
            first_time_yn = "N"

          head person_unique       ;014
/*001...*/  call store_item(0, 1, p_hdg1)
/*001...*/  call store_item(0, 2, p_hdg2)
            short_age = FormatAge(p.birth_dt_tm, p.deceased_dt_tm, "LABRPTAGE")
/*001...*/  call store_item(0, 3, short_name)   ; patient name
            if (ea_exists = "Y")
/*001...*/     call store_item(0, 4, pat_nbr)   ; patient number
            endif
/*001...*/  call store_item(41, 3, short_age)    ; patient age
/*008...*/  if (p.sex_cd > 0.0)
/*001...*/     call store_item(60, 3, psex)      ; patient sex
            endif
            ;* Patient facility location
            pat_fac = fillstring(20, " ")
            pat_nurse = fillstring(20, " ")
            fac_loc = fillstring(43, " ")
/*008...*/  if (e.loc_facility_cd > 0.0)
/*008...*/     pat_fac = substring(1, 15, trim(UAR_GET_CODE_DISPLAY(e.loc_facility_cd)))
            else
               pat_fac = captions->unknown                             ;010
            endif
/*008...*/  if (e.loc_nurse_unit_cd > 0.0)
/*008...*/     pat_nurse = substring(1, 15, trim(UAR_GET_CODE_DISPLAY(e.loc_nurse_unit_cd)))
            else
               pat_nurse = captions->unknown                           ;010
            endif

            ;* Patient location
            pat_room = fillstring(20, " ")
            pat_bed = fillstring(20, " ")
            pat_loc = fillstring(100, " ")
    	      pat_org = fillstring(100, " ")

/*008...*/  if (e.loc_room_cd > 0.0)
/*008...*/     pat_room = substring(1, 04, trim(UAR_GET_CODE_DISPLAY(e.loc_room_cd)))
            else
               pat_room = captions->unknown                            ;010
            endif

/*008...*/  if (e.loc_bed_cd > 0.0)
/*008...*/     pat_bed = substring(1, 04, trim(UAR_GET_CODE_DISPLAY(e.loc_bed_cd)))
            else
               pat_bed = captions->unknown                             ;010
            endif
      	    if (e.organization_id > 0.0)                	;009
      		    pat_org = trim(org.org_name)
      	    endif

      	    ;display org/discharged if discharged                         ;009
      	    if (e.encntr_status_cd = discharged_cd)
      		    pat_loc = concat(substring(1, 20, trim(pat_org)), "/", trim(uar_get_code_display(e.encntr_status_cd)))
      	    else
      		    ;display fac/nurse/room/bed if not discharged
              pat_loc = concat(trim(pat_fac), "/", trim(pat_nurse), "/", trim(pat_room), "/", trim(pat_bed))
      		    ;if org diff from fac then add org to end of string
          		if (trim(pat_fac) != trim(pat_org))
      	     	   pat_loc = concat(trim(pat_loc), "/", trim(pat_org))
      		    endif
      	    endif

            if(request->letter_size_ind = 1)
                call store_item(41, 4, substring(1, 58, pat_loc))
            else
    /*001...*/  call store_item(41, 4, substring(1, 40, pat_loc))
            endif


            if (trim(doctor_name) != captions->dr)                     ;010

                if(request->letter_size_ind = 1)
                    call store_item(100, 3, doctor_name)  ; ordering phys
                else
     /*001...*/     call store_item(82, 3, doctor_name)  ; ordering physician
                endif

            endif

/*001...*/  reason_for_visit = fillstring(30, " ")
/*001...*/  reason_for_visit = substring(1, 30, trim(e.reason_for_visit))

            if(request->letter_size_ind = 1)
                call store_item(100, 4, reason_for_visit)
            else
    /*001...*/  call store_item(82, 4, reason_for_visit)
            endif  

/*001...*/  order_row = 5
/*001...*/  detail_row = 5
/*001...*/  first_order = "Y"

         head order_unique
            ;* Start new order 2 lines following last detail of previous order.
            ;* Otherwise, start 1st detail of each order on 1st line of order.
            if (detail_row > order_row)
               order_row = detail_row
            else
               detail_row = order_row
            endif
/*001...*/  if (first_order = "Y")
/*001...*/    order_row = order_row + 1
/*001...*/    call store_item(0, order_row, p_hdg3)
/*001...*/    order_row = order_row + 1
/*001...*/    call store_item(0, order_row, p_hdg4)
/*001...*/    order_row = order_row + 1
/*001...*/    call store_item(0, order_row, p_hdg5)
/*001...*/    first_order = "N"
/*001...*/  endif
/*001...*/  order_row = order_row + 1
/*001...*/  detail_row = order_row
            ;* Store 1st detail line of current order
            save1stline = order_row
/*001...*/  offset = 0
            call store_item(offset, order_row, ord_mnem)
/*001...*/  offset = 13
            call store_item(offset, order_row, accn)
            order_row = order_row + 1
/*001...*/  offset = 0
/*001...*/  call store_item(offset, order_row, priority)
            if (size(trim(drawn_dttm), 3) > 0)
/*001...*/     offset = 13
           if(LOCALE = localeObjectName)
               call store_item(offset, order_row, drawn_dttm)
           else
            call store_item(offset, order_row, drawn_dttm_locale)
           endif
            endif
/*001...*/  order_row = order_row + 1
            ;* Print order comments, if any exist
            if(perf_results->qual[d_pr.seq].oc_ind = 1)
/*001...*/     order_row = save1stline + 2
/*001...*/     offset = size(trim(ord_mnem), 3) + 1
/*001...*/     call store_item(1, order_row, ord_mnem)
/*001...*/     order_row = order_row + 1
/*001...*/     offset = 1
               call store_item(offset, order_row, captions->ord_cmnt)  ;010
               order_row = order_row + 1
               vcstring->text = perf_results->qual[d_pr.seq].oc_text
/*001...*/     order_row = store_varchar_item(order_row, 3, 31, 1)
            endif
            if(perf_results->qual[d_pr.seq].on_ind = 1)
               if(perf_results->qual[d_pr.seq].oc_ind = 1)
/*001...*/        order_row = save1stline + 2
               endif
/*001...*/     offset = size(trim(ord_mnem), 3) + 1
/*001...*/     call store_item(1, order_row, ord_mnem)
               call store_item(offset, order_row, captions->ord_note)
               order_row = order_row + 1
               vcstring->text = perf_results->qual[d_pr.seq].on_text
/*001...*/     order_row = store_varchar_item(order_row, 3, 31, 1)
            endif

         head testsite_disp
            row+0

         head ptr.sequence
            row+0

         head pr.perform_result_id
/*001...*/  call store_item(35, detail_row, detail_mne)
            ;* Print result

            if(request->letter_size_ind = 1)
                offset = 75
            else
    /*001...*/  offset = 70
            endif

/*008...*/  if (result_type_mean = "1")
               call store_item(offset, detail_row, " ")
/*008...*/  elseif (result_type_mean = "2")                ;Alpha result
               if (norm_alpha_null = 0)
                  if(request->letter_size_ind = 1)
                      call store_item(53, detail_row, pr.normal_alpha)
                  else
    /*001...*/        call store_item(48, detail_row, pr.normal_alpha)
                  endif
               endif
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
/*008...*/  elseif (result_type_mean in ("3", "8"))        ;Numeric result
               arg_max_digits = perf_results->qual[d_pr.seq].max_digits
               arg_min_dec_places = perf_results->qual[d_pr.seq].min_decimal_places
               arg_min_digits = perf_results->qual[d_pr.seq].min_digits
               if (norm_low_null = 0)
                  arg_less_great_flag = 0
                  arg_raw_value = pr.normal_low
                  if (perf_results->qual[d_pr.seq].sci_notation_ind = 1)
                  formatted->result_value = 
                    uar_AccFormatResultStringSciNote(arg_min_digits,
                                                     arg_max_digits,
                                                     arg_min_dec_places,
                                                     arg_raw_value,
                                                     arg_less_great_flag, 1)
                  else
                    format_numeric_result
                  endif

                  if(request->letter_size_ind = 1)
                      call store_item(53, detail_row, formatted->result_value)
                  else
    /*001...*/        call store_item(48, detail_row, formatted->result_value)
                  endif

               endif
               if (norm_high_null = 0)
                  arg_less_great_flag = 0
                  arg_raw_value = pr.normal_high
                  if (perf_results->qual[d_pr.seq].sci_notation_ind = 1)
                  formatted->result_value = 
                    uar_AccFormatResultStringSciNote(arg_min_digits,
                                                     arg_max_digits,
                                                     arg_min_dec_places,
                                                     arg_raw_value,
                                                     arg_less_great_flag, 1)
                  else
                    format_numeric_result
                  endif

                  if(request->letter_size_ind = 1)
                      call store_item(64, detail_row, formatted->result_value)
                  else
    /*001...*/        call store_item(59, detail_row, formatted->result_value)
                  endif

               endif
               arg_less_great_flag = pr.less_great_flag
/*001...*/     arg_raw_value = pr.result_value_numeric
               if (perf_results->qual[d_pr.seq].sci_notation_ind = 1)
                  formatted->result_value = 
                    uar_AccFormatResultStringSciNote(arg_min_digits,
                                                     arg_max_digits,
                                                     arg_min_dec_places,
                                                     arg_raw_value,
                                                     arg_less_great_flag, 1)
               else
                 format_numeric_result
               endif
               call store_item(offset, detail_row, formatted->result_value)
               offset = offset + size(trim(formatted->result_value), 3)
/*008...*/  elseif (result_type_mean = "4")                ;Interp result
               if (norm_alpha_null = 0)

                  if(request->letter_size_ind = 1)
                     call store_item(53, detail_row, pr.normal_alpha)
                  else
   /*001...*/        call store_item(48, detail_row, pr.normal_alpha)
                  endif
               endif
               call store_item(offset, detail_row, alpha_result)
               offset = offset + size(trim(alpha_result), 3)
/*008...*/  elseif (result_type_mean = "6")                ;Date result
			  if(LOCALE = localeObjectName)
               call store_item(offset, detail_row, date_result)
               offset = offset + size(trim(date_result), 3)
              else
               call store_item(offset, detail_row, date_result_locale)
               offset = offset + size(trim(date_result_locale), 3)
              endif           
/*008...*/  elseif (result_type_mean = "7")                ;Freetext result
               call store_item(offset, detail_row, freetext_result)
               offset = offset + size(trim(freetext_result), 3)
            elseif (result_type_mean = "9")
               call store_item(offset, detail_row, code_value_result)
               offset = offset + size(trim(code_value_result), 3)
            endif
            ;* Build a string of result flags

            if (pr.result_status_cd in(corrected_cd, oldcorrected_cd))
               correction_flag = "Y"
            else
               correction_flag = "N"
            endif
            
/*008...*/  if (pr.normal_cd in(normal_high_cd, normal_low_cd, alp_abnormal_cd))
/*008...*/      cv_normflag = UAR_GET_CODE_DISPLAY(pr.normal_cd)
            else
               cv_normflag = " "
            endif

/*008...*/  if (pr.critical_cd in(critical_cd, alp_critical_cd))
/*008...*/      cv_critflag = UAR_GET_CODE_DISPLAY(pr.critical_cd)
            else
               cv_critflag = " "
            endif

/*008...*/  if (pr.review_cd in(review_cd, alp_review_cd))
/*008...*/      cv_revwflag = UAR_GET_CODE_DISPLAY(pr.review_cd)
            else
               cv_revwflag = " "
            endif

/*008...*/  if (pr.linear_cd = linear_cd)
/*008...*/     cv_linflag = UAR_GET_CODE_DISPLAY(pr.linear_cd)
/*001...*/  else
/*001...*/     cv_linflag = " "
/*001...*/  endif

/*008...*/  if (pr.feasible_cd = feasible_cd)
/*008...*/     cv_feasflag = UAR_GET_CODE_DISPLAY(pr.feasible_cd)
/*001...*/  else
/*001...*/     cv_feasflag = " "
/*001...*/  endif

/*008...*/  if (pr.delta_cd = delta_fail_cd)
               cv_deltaflag =UAR_GET_CODE_DISPLAY(pr.delta_cd)
            else
               cv_deltaflag = " "
            endif
            
            if(pr.notify_cd in(notify_cd, alp_notify_cd))
              cv_notifyflag = UAR_GET_CODE_DISPLAY(pr.notify_cd)
            else
              cv_notifyflag = " "
            endif

            if ((pr.nomenclature_id > 0.0) and (pr.long_text_id > 0.0))
              interp_flag = captions->interp_text_flag
            else
              interp_flag = ""
            endif
			
            if (pr.qc_override_cd = qc_override_cd)
               sQCOverride = UAR_GET_CODE_DISPLAY(pr.qc_override_cd)
            else
               sQCOverride = " "
            endif
            
            resultflagstr = bldresultflagstr(cv_normflag, cv_critflag, cv_revwflag, cv_linflag, cv_feasflag, cv_deltaflag,
                                             rc_flag, rn_flag, correction_flag, sQCOverride, cv_notifyflag, 
											 interp_flag)
/*001...*/  if (pr.dilution_factor > 0.0)
/*001...*/     dilution=cnvtstring(pr.dilution_factor,6,2,l)
/*001...*/     idx=1
/*001...*/     while(substring(idx,1,dilution) = "0")
/*001...*/       l=movestring(" ",1,dilution,idx,1)   ;remove leading zeroes
/*001...*/       idx = idx+1
/*001...*/     endwhile
/*001...*/     idx=6
/*001...*/     while(substring(idx,1,dilution) = "0")
/*001...*/       l=movestring(" ",1,dilution,idx,1)   ;remove trailing zeroes
/*001...*/       idx = idx-1
/*001...*/     endwhile
/*001...*/     if (substring(idx,1,dilution )= ".")
/*001...*/       l=movestring(" ",1,dilution,idx,1)   ;remove decimal point if not needed
/*001...*/     endif
/*001...*/     resultflagstr = concat(" ", "x", trim(dilution,3), " ", resultflagstr)
/*001...*/  else
/*001...*/     resultflagstr = concat(" ", resultflagstr)
/*001...*/  endif
            if (size(trim(resultflagstr), 3) > 0)
               call store_item(offset, detail_row, resultflagstr)
            endif
            ;* Print tech id, date, and time
            if(request->letter_size_ind = 1)
                offset = 99
            else
    /*001...*/  offset = 94
            endif

            call store_item(offset, detail_row, tech_name)
/*001...*/  offset = offset + 9
            if(LOCALE = localeObjectName)
            call store_item(offset, detail_row, event_date)  ;Verify date
            else
            call store_item(offset, detail_row, event_date_locale)  ;Verify date 
            endif
            detail_row = detail_row + 1

         detail
            row+0

         foot pr.perform_result_id
/*008...*/  if (result_type_mean = "1")  ;Textual result
/*001...*/     offset = 37
               detail_row = detail_row + 1
               call store_item(offset, detail_row, detail_mne)

               if(request->letter_size_ind = 1)
                 offset = 53
               else
                 offset = offset + size(trim(detail_mne), 3)
               endif               

               call store_item(offset, detail_row, captions->txt_rslt) ;010
               detail_row = detail_row + 1
               if (pr.long_text_id > 0.0)
                  vcstring->text = perf_results->qual[d_pr.seq].long_text
               else
                  vcstring->text = captions->txt_rslt_nf               ;010
               endif
/*001...*/     detail_row = store_varchar_item(detail_row, 40, 65, 1)
            endif
/*008...*/  if (result_type_mean = "4" and pr.long_text_id > 0.0)
/*001...*/     offset = 37
               detail_row = detail_row + 1
               call store_item(offset, detail_row, detail_mne)
               
               if(request->letter_size_ind = 1)
                 offset = 53
               else
                 offset = offset + size(trim(detail_mne), 3)
               endif      

               call store_item(offset, detail_row, captions->txt_rslt) ;010
               detail_row = detail_row + 1
               vcstring->text = perf_results->qual[d_pr.seq].long_text
/*001...*/     detail_row = store_varchar_item(detail_row, 40, 65, 1)
            endif

         foot ptr.sequence
            ;* Print result comment, if any exist
            if(rc_flag = "Y")
/*001...*/     offset = 37
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
               call store_item(offset, detail_row,captions->rslt_cmnt) ;010
               detail_row = detail_row + 1
               vcstring->text = perf_results->qual[d_pr.seq].rc_text
/*001...*/     detail_row = store_varchar_item(detail_row, 40, 65, 1)
            endif
            ;* Print result footnote, if any exist
            if(rn_flag = "Y")
/*001...*/     offset = 37
               call store_item(offset, detail_row, detail_mne)
               offset = offset + size(trim(detail_mne), 3)
               call store_item(offset, detail_row,captions->rslt_note) ;010
               detail_row = detail_row + 1
               vcstring->text = perf_results->qual[d_pr.seq].rn_text
/*001...*/     detail_row = store_varchar_item(detail_row, 40, 65, 1)
            endif

         foot order_unique
            ;* Determine the total number of lines for this order
/*001...*/  if (detail_row > order_row)
               report_data->qual[save1stline].detailcount = detail_row - save1stline + 1
/*001...*/  else
/*001...*/     report_data->qual[save1stline].detailcount = order_row - save1stline + 1
/*001...*/  endif

          foot person_unique     ;014
            ;* Print out previous patient info and erase it from
            ;* report_data array.
/*001...*/  report_data->qual[1].detailcount = report_data->qual[9].detailcount + 8
            print_report_data
            row + 1

         foot report
            ;* Print out last patient info and erase it from
            ;* report_data array.
            print_report_data
            row + 2
            call center(uar_i18ngetmessage(i18nHandle,"end",("##### END OF REPORT #####")), 0, 125) ;010

          with nocounter,
            outerjoin = d_ea,
            dontcare = ea,
            maxread(ea, 1),
            nullreport

            if (size(trim(request->printer_name)) > 0)
              SET spool = value(reply->file_name) value(request->printer_name)
            endif
            
            set reply->status_data->status = "S"

#Exit_Script

         if ((reply->status_data->status != "F") and
             (GetResourceSecurityStatus(0) != "S"))                        ;016
            call PopulateResSecStatusBlock(0)                              ;016
            set reply->status_data->status = GetResourceSecurityStatus(0)  ;016
         endif                                                             ;016
         call uar_SysDestroyHandle(hSys)
         free set captions
         free set test_site
         free set ts_sort
         free set actvty_type
         free set perf_results
         free set rpt
         free set r_comments
         free set o_comments
         free set p_comments
         free set ops_params
         free set report_data
         free set vcstring
         free set formatted
         end go

;Generated by GNU enscript 1.6.4.
