 ;;Solution_Test/script/Bedrock/bed_aud_gl_orc_synonyms/src/main/ccl/bed_aud_gl_orc_synonyms.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
 
        Source file name:        bed_aud_gl_orc_synonyms.prg
        Object name:             bed_aud_gl_orc_synonyms.prg
        Request #:
 
        Product:                 Bedrock
        Product Team:            Bedrock
        HNA Version:             500
        CCL Version:             8.0
 
        Program purpose:
 
        Tables read:
 
 
        Tables updated:
 
        Executing from:          BEDROCK
 
        Special Notes:
 
 
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 02/13/09 Kelli Wade           Include all mnemonic types
;     002 02/20/09 Kelli Wade           Add Clinical Category column
;     003 06/06/12 Jacob Carpenter	Retrieving OEF using Order_Catalog_Synonym table
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program bed_aud_gl_orc_synonyms:dba go
create program bed_aud_gl_orc_synonyms:dba
 
if (not (validate (request,0)))
 record request
  (
    1 program_name = vc
    1 skip_volume_check_ind = i2
    1 output_filename = vc
    1 paramlist[*]
      2 param_type_mean = vc
      2 pdate1 = dq8
      2 pdate2 = dq8
      2 vlist[*]
        3 dbl_value = f8
        3 string_value = vc
  )
endif
 
if (not(validate(reply,0)))
 record reply
  (
    1  collist[*]
      2  header_text = vc
      2  data_type = i2
      2  hide_ind = i2
    1  rowlist[*]
      2 celllist[*]
        3 date_value = dq8
        3 nbr_value = i4
        3 double_value = f8
        3 string_value = vc
        3 display_flag = i2 ;0-regular,1-bold,2-???
    1  high_volume_flag = i2
    1  output_filename = vc
    1  run_status_flag = i2
    1  statlist[*]
       2 statistic_meaning = vc
       2 status_flag = i2
       2 qualifying_items = i4
       2 total_items = i4
    1  status_data
      2  status  =  C1
      2  SUBEVENTSTATUS [ 1 ]
        3  OPERATIONNAME  =  C15
        3  OPERATIONSTATUS  =  C1
        3  TARGETOBJECTNAME  =  C15
        3  TARGETOBJECTVALUE  =  C100
  )
endif
 
free record temp
record temp
( 1 ocnt = i2
  1 oqual[*]
    2 activity_type = vc
    2 subtype = vc
    2 ord = vc
    2 catalog_cd = f8
    2 clin_category = vc	;002
    2 dept = vc
    2 bill_only = vc
    2 dept_only = vc
    2 careset = vc
    2 syncnt = i2
    2 synqual[*]
      3 synonym = vc
      3 synonym_type = vc
      3 format = vc
      3 hide = vc
)
 
;001 declare DCP = f8 with public, noconstant(0.0)
;001 declare ANCILLARY = f8 with public, noconstant(0.0)
;001 declare PRIMARY = f8 with public, noconstant(0.0)
declare ORD = f8 with public, noconstant(0.0)
declare LAB = f8 with public, noconstant(0.0)
declare GL = f8 with public, noconstant(0.0)
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 6003
    and cv.cdf_meaning = "ORDER"
    and cv.active_ind = 1
detail
  ORD = cv.code_value
with nocounter
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 6000
    and cv.cdf_meaning = "GENERAL LAB"
    and cv.active_ind = 1
detail
  LAB = cv.code_value
with nocounter
 
select into "nl:"
from code_value cv
plan cv
  where cv.code_set = 106
    and cv.cdf_meaning = "GLB"
    and cv.active_ind = 1
detail
  GL = cv.code_value
with nocounter
 
;001 select into "nl:"
;001 from code_value cv
;001 plan cv
;001   where cv.code_set = 6011
;001     and cv.cdf_meaning in ("DCP","ANCILLARY","PRIMARY")
;001     and cv.active_ind = 1
;001 detail
;001   if (cv.cdf_meaning = "DCP")
;001     DCP = cv.code_value
;001   elseif (cv.cdf_meaning = "ANCILLARY")
;001     ANCILLARY = cv.code_value
;001   elseif (cv.cdf_meaning = "PRIMARY")
;001     PRIMARY = cv.code_value
;001   endif
;001 with nocounter
 
set high_volume_cnt = 0
if (request->skip_volume_check_ind = 0)
  select into "nl:"
    hv_cnt = count(*)
  from order_catalog oc
  plan oc
    where oc.catalog_type_cd = LAB
      and oc.activity_type_cd = GL
      and oc.active_ind = 1
  detail
    high_volume_cnt = hv_cnt
  with nocounter
 
  call echo(high_volume_cnt)
 
  if (high_volume_cnt > 5000)
    set reply->high_volume_flag = 2
    go to exit_script
  elseif (high_volume_cnt > 3000)
    set reply->high_volume_flag = 1
    go to exit_script
  endif
endif
 
set ocnt = 0
set syncnt = 0
select into "nl:"
from order_catalog oc,
  order_entry_format oef,
  code_value cv,
  code_value cv2,
  order_catalog_synonym ocs,
  code_value cv3,
  code_value cv4			;002
plan oc
  where oc.catalog_type_cd = LAB
    and oc.activity_type_cd = GL
    and oc.active_ind = 1
;001 join oef
;001  where oef.oe_format_id = ocs.oe_format_id
;001    and oef.action_type_cd = ORD
join cv
  where cv.code_value = oc.activity_type_cd
join cv2
  where cv2.code_value = oc.activity_subtype_cd
join ocs
  where ocs.catalog_cd = oc.catalog_cd
;001     and ocs.mnemonic_type_cd in (PRIMARY,DCP,ANCILLARY)
    and ocs.active_ind = 1
join oef					;003
  where oef.oe_format_id = ocs.oe_format_id	;003
    and oef.action_type_cd = ORD		;003
join cv3
  where cv3.code_value = ocs.mnemonic_type_cd
join cv4													;002
	where cv4.code_value = outerjoin(oc.dcp_clin_cat_cd)	;002
	  and cv4.active_ind = outerjoin(1)						;002
order cnvtupper(oc.description),cv3.cdf_meaning desc
head oc.description
  syncnt = 0
  ocnt = ocnt + 1
  temp->ocnt = ocnt
  stat = alterlist(temp->oqual,ocnt)
  temp->oqual[ocnt].activity_type = cv.description
  temp->oqual[ocnt].subtype = cv2.description
  temp->oqual[ocnt].ord = oc.description
  temp->oqual[ocnt].catalog_cd = oc.catalog_cd
  temp->oqual[ocnt].dept = oc.dept_display_name
  temp->oqual[ocnt].clin_category = cv4.display		;002
  if (oc.bill_only_ind = 1)
    temp->oqual[ocnt].bill_only = "X"
  endif
  if (oc.orderable_type_flag = 5)
    temp->oqual[ocnt].dept_only = "X"
  endif
  if (oc.orderable_type_flag in (2,6))
    temp->oqual[ocnt].careset = "X"
  endif
head ocs.synonym_id
  syncnt = syncnt + 1
  temp->oqual[ocnt].syncnt = syncnt
  stat = alterlist(temp->oqual[ocnt].synqual,syncnt)
  temp->oqual[ocnt].synqual[syncnt].synonym = ocs.mnemonic
  temp->oqual[ocnt].synqual[syncnt].format = oef.oe_format_name
  temp->oqual[ocnt].synqual[syncnt].synonym_type = cv3.display
  if (ocs.hide_flag = 1)
    temp->oqual[ocnt].synqual[syncnt].hide = "X"
  endif
with nocounter
 
;002 set stat = alterlist(reply->collist,12)
set stat = alterlist(reply->collist,13)		;002
set reply->collist[1].header_text = "Activity Type"
set reply->collist[1].data_type = 1 ;string
set reply->collist[1].hide_ind = 1
set reply->collist[2].header_text = "Orderable Item Description"
set reply->collist[2].data_type = 1 ;string
set reply->collist[2].hide_ind = 0
set reply->collist[3].header_text = "Synonym Type"
set reply->collist[3].data_type = 1 ;string
set reply->collist[3].hide_ind = 0
set reply->collist[4].header_text = "Synonym"
set reply->collist[4].data_type = 1 ;string
set reply->collist[4].hide_ind = 0
set reply->collist[5].header_text = "Department Name"
set reply->collist[5].data_type = 1 ;string
set reply->collist[5].hide_ind = 0
set reply->collist[6].header_text = "Subactivity Type"
set reply->collist[6].data_type = 1 ;string
set reply->collist[6].hide_ind = 0
set reply->collist[7].header_text = "Order Entry Format"
set reply->collist[7].data_type = 1 ;string
set reply->collist[7].hide_ind = 0
set reply->collist[8].header_text = "Hide"
set reply->collist[8].data_type = 1 ;string
set reply->collist[8].hide_ind = 0
set reply->collist[9].header_text = "Bill Only"
set reply->collist[9].data_type = 1 ;string
set reply->collist[9].hide_ind = 0
set reply->collist[10].header_text = "Department Only"
set reply->collist[10].data_type = 1 ;string
set reply->collist[10].hide_ind = 0
set reply->collist[11].header_text = "Careset"
set reply->collist[11].data_type = 1 ;string
set reply->collist[11].hide_ind = 0
;002 set reply->collist[12].header_text = "catalog_cd"
;002 set reply->collist[12].data_type = 2 ;double
;002 set reply->collist[12].hide_ind = 1
/*beginning mod 002*/
set reply->collist[12].header_text = "Clinical Category"
set reply->collist[12].data_type = 1 ;string
set reply->collist[12].hide_ind = 0
set reply->collist[13].header_text = "catalog_cd"
set reply->collist[13].data_type = 2 ;double
set reply->collist[13].hide_ind = 1
/*end mod 002*/
if (ocnt = 0)
  go to exit_script
endif
 
set row_nbr = 0
 
for (z = 1 to temp->ocnt)
  for (w = 1 to temp->oqual[z].syncnt)
    set row_nbr = row_nbr + 1
    set stat = alterlist(reply->rowlist,row_nbr)
;002    set stat = alterlist(reply->rowlist[row_nbr].celllist,12)
    set stat = alterlist(reply->rowlist[row_nbr].celllist,13)	;002
    set reply->rowlist[row_nbr].celllist[1].string_value = temp->oqual[z].activity_type
    set reply->rowlist[row_nbr].celllist[2].string_value = temp->oqual[z].ord
    set reply->rowlist[row_nbr].celllist[3].string_value = temp->oqual[z].synqual[w].synonym_type
    set reply->rowlist[row_nbr].celllist[4].string_value = temp->oqual[z].synqual[w].synonym
    set reply->rowlist[row_nbr].celllist[5].string_value = temp->oqual[z].dept
    set reply->rowlist[row_nbr].celllist[6].string_value = temp->oqual[z].subtype
    set reply->rowlist[row_nbr].celllist[7].string_value = temp->oqual[z].synqual[w].format
    set reply->rowlist[row_nbr].celllist[8].string_value = temp->oqual[z].synqual[w].hide
    set reply->rowlist[row_nbr].celllist[9].string_value = temp->oqual[z].bill_only
    set reply->rowlist[row_nbr].celllist[10].string_value = temp->oqual[z].dept_only
    set reply->rowlist[row_nbr].celllist[11].string_value = temp->oqual[z].careset
;002    set reply->rowlist[row_nbr].celllist[12].double_value = temp->oqual[z].catalog_cd
    set reply->rowlist[row_nbr].celllist[12].string_value = temp->oqual[z].clin_category	;002
    set reply->rowlist[row_nbr].celllist[13].double_value = temp->oqual[z].catalog_cd		;002
  endfor
endfor
 
#exit_script
if (reply->high_volume_flag in (1,2))
  set reply->output_filename = build("gl_orc_synonyms_audit.csv")
endif
 
if (request->output_filename > " ")
  execute bed_rpt_file
endif
 
end go

;Generated by GNU enscript 1.6.4.
