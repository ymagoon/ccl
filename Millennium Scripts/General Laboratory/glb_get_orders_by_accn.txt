 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_orders_by_accn/glb_get_orders_by_accn.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1998 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:       glb_get_orders_by_accn.prg
        Object name:            glb_get_orders_by_accn
        Request #:              250070
 
        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Load General Lab order, task assay, and
                                result information for a given accession.
 
        Tables read:            accession_order_r
                                assay_processing_r
                                assay_resource_translation
                                code_value
                                container
                                data_map
                                discrete_task_assay
                                long_text
                                order_comment
                                order_container_r
                                order_laboratory
                                order_procedure_exception
                                order_serv_res_container
                                orders
                                perform_result
                                person
                                profile_task_r
                                prsnl
                                reference_range_factor
                                resource_group
                                result
                                result_comment
 
        Tables updated:         None
        Executing from:
 
        Special Notes:
 
******************************************************************************/
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 04/02/96 Hal Patchen          Initial Release                     *
;    *001 03/27/97 Todd Gugler          Retrieve HLA Orders and return      *
;    *                                  orders.activity_type_cd.            *
;    *002 05/02/97 Jeff Fry             Retrieve osrc.in_lab_dt_tm for use  *
;    *                                  by the AFC server.                  *
;    *003 05/02/97 Jeff Fry             Retrieve apr.default_result_        *
;    *                                  template_id for ResultEntry.        *
;    *                                  task_assay_cd, result_status_cd).   *
;    *004 05/02/97 Jeff Fry             Retrieve previous results by new    *
;    *                                  index on result table (person_id,   *
;    *                                  task_assay_cd, result_status_cd).   *
;    *005 05/06/97 Todd Gugler          Retrieve review_required_ind and    *
;    *                                  pending_review_ind from order_      *
;    *                                  laboratory table.                   *
;    *006 07/29/97 Jeff Fry             Retrieve linear_cd,feasible_cd and  *
;    *                                  dilution_factor.                    *
;    *007 07/30/97 Hal Patchen          Return ref range codes display and  *
;    *                                  meanings from decoder.              *
;    *008 08/12/97 Jeff Fry             Return delta check information for  *
;    *                                  previous result                     *
;    *009 08/12/97 Hal Patchen          Return fields for multiple accession*
;    *                                  result verification                 *
;    *010 08/22/97 Jeff Fry             Return repeat_nbr                   *
;    *011 09/16/97 Hal Patchen          Return ref range data for current   *
;    *                                  result                              *
;    *012 09/19/97 Hal Patchen          Add Autoverification logic          *
;    *013 09/24/97 Jeff Fry             Return ptr->restrict_display_ind    *
;    *                                  to support prompt tests             *
;    *014 10/01/97 Jeff Fry             Add logic to support related assays *
;    *                                  for previous result                 *
;    *015 11/14/97 Hal Patchen          Add subsection level data map check *
;    *016 02/05/98 Jeff Fry             Add logic to support HLA Review     *
;    *                                  Comments                            *
;    *017 02/09/98 Jeff Fry             Retrieve accession_id               *
;    *018 05/05/98 Hal Patchen          Verify subsection level data map    *
;    *                                  is associated with route test site  *
;    *019 05/20/98 Hal Patchen          Return flag for canceled orders     *
;    *020 07/09/98 Hal Patchen          Return perform service resource     *
;    *021 08/13/98 Jeff Fry             Move Reply record to include file.  *
;    *022 04/20/99 Chris Heil           Performance Lab performance fix.    *
;    *023 08/27/99 Chris Heil           Check for rescheduled accessions    *
;    *024 03/08/00 Gary Runde           Return normal_range_flag and  .     *
;    *                                  crit_range_flag from the            *
;    *                                  reference_range_factor table .      *
;    *025 06/05/00 DT3705               Return container_id from OCR        *
;    *                                  whose collection_status_flag != 7   *
;    *                                  to make sure that a newly created   *
;                                       container                           *
;    *                                  id is used if it exists.            *
;    *                                  Feature#: 11127                     *
;    *026 07/24/00 Gary Runde           Return restrict_av_ind off of AOR   *
;    *027 08/02/00 Gary Runde           Return sequence off of PTR to seq   *
;                                       outbound results                    *
;    *028 08/03/00 Jeff Fry             Return organization_id for Org      *
;                                       Security logic                      *
;    *029 03/03/00 Jeff Fry             Return resource_error_codes to RE   *
;    *030 09/07/00 DT3705               Modify one of the SELECTs so it     *
;                                       searches in the following order:    *
;                                       1. In-Lab                           *
;                                       2. Completed AND curr_loc = loc_cd  *
;                                       3. Completed AND curr_loc != loc_cd *
;                                       4. Not in-lab.                      *
;    *031 12/21/00 Gary Runde           Return "DELETED" as canceled orders *
;    *032 02/15/01 Gary Runde           Return default data map             *
;    *033 06/26/01 Gary Runde           Return "DISCONTINUED" as canceled   *
;                                       orders                              *
;    *034 08/19/02 Chuck Figas          Added service resource security     *
;    *035 07/16/03 Ekta Agarwal         Remove ORAHINT                      *
;    *036 09/23/04 Amy Henry            Resolve issue with different route  *
;                                       levels                              *
;    *037 11/01/04 Kevin Power          Return Helix orders when called     *
;                                       from PFMT_GL_REEVAL_RESULTS.        *
;    *038 01/19/06 Nick Smith           Return sci_notation_ind for assays  *
;    *039 05/30/06 Kevin Power          Return Helix orders for MDI         *
;    *040 07/17/06 Ryan Manuel          Returns notify_cd and prev_notify_cd*
;    *041 12/06/06 Matt Schile          Added result_value_alpha_mnemonic   *
;    *042 08/31/07 Jason Osborn         Ensure chronological sorting.       *
;    *043 11/27/07 Kevin Power          Add interface_flag for MDI.         *
;    *044 08/09/07 Abraham Areguy       Move the setting of the in_lab_dt_tm*
;                                       to immediately after the container_id*
;                                       is set in the container_serv_res list*
;    *045 07/31/09 Rahul Deshmukh       Added order comment blank indicator  *
;    *046 11/03/09 Archita S		Added a prev_service_resource_cd to the *
;					reply structure and populated it	*
;    *047 12/11/09 Brad Arndt           Determine default parent order for  *
;                                       add ons (Feature 222521)            *
;    *048 11/09/10 Steve Hendrick       Add worklist_id to Reply            *
;    *049 08/22/08 Javed Khan           Added decimal_movement_nbr in reply     *
;    *050 07/02/12 Veeresh Angadi		prevent system from applying delta  *
;										when delta flag is not defined.		*
;    *051 09/28/12 Pradeep Reddy        Fix for the CR 1-319109315          *
;    *052 10/21/12 Sujith Rai			Fix for the CR 1-6065235555			*
;~DE~*************************************************************************
 
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program GLB_GET_ORDERS_BY_ACCN:dba go
create program GLB_GET_ORDERS_BY_ACCN:dba
 
%i cclsource:pcs_resource_security.inc
%i cclsource:pcs_code.inc
 
      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      * NOTE:  Keep in sync with GLB_REQ_GET_ORDERS_BY_ACCN.INC
      record request
      (
         1  accession                    = c20
         1  instr_service_resource_cd    = f8
         1  resource_security_ind        = i2
         1  interface_flag               = i2
      )
      */
 
      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
if (validate(reply->status_data->status, "U") = "U")
 
      record reply
      (
;021 - Added following ***
%i cclsource:glb_reply_get_orders_by_accn.inc
;021 - Added above *******
;021         1  accession_id                 = f8
;021         1  person_id                    = f8
;021         1  person_name                  = vc                          ;009
;021         1  encntr_id                    = f8
;021         1  qual[*]
;021            2  cs_order_id               = f8 ;Used by AFC Server
;021            2  order_id                  = f8
;021            2  updt_cnt                  = i4 ;Used by Orders Server
;021            2  order_mnemonic            = vc
;021            2  report_priority_cd        = f8
;021            2  report_priority_disp      = vc
;021            2  report_priority_mean      = c12
;026            2  restrict_av_ind           = i2                           ;026
;021            2  review_required_ind       = i2                               ;005
;021            2  pending_review_ind        = i2                               ;005
;021            2  catalog_cd                = f8
;021            2  catalog_type_cd           = f8 ;Used by Orders Server
;021            2  activity_type_cd          = f8                           ;001
;021            2  activity_type_disp        = vc                           ;001
;021            2  activity_type_mean        = c12                          ;001
;021            2  order_status_cd           = f8
;021            2  order_status_disp         = vc
;021            2  order_status_mean         = c12
;021            2  last_action_sequence      = i4
;021            2  last_update_provider_id   = f8
;021            2  last_update_provider_name = vc
;021            2  order_comment_ind         = i2
;021            2  order_comment_action_seq  = i4
;021            2  order_note_action_seq     = i4
;021            2  route_level               = i2
;021            2  container_serv_res_cnt    = i4
;021            2  container_serv_res[*]
;021               3  container_id           = f8
;021               3  in_lab_dt_tm           = dq8 ;Used by AFC Server      ;002
;028               3  organization_id        = dq8 ;Used for organization security
;021               3  service_resource_cd    = f8
;021               3  service_resource_disp  = vc
;021               3  instr_service_resource_cd = f8
;021               3  status_flag            = i2
;021               3  specimen_type_cd       = f8
;021               3  drawn_dt_tm            = dq8
;021               3  assays_cnt             = i4
;021               3  assays[*]
;021                  4  task_assay_cd              = f8
;027                  4  ptr_sequence               = i4                    ;027
;021                  4  delta_lvl_flag             = i2                    ;008
;021                  4  rel_assay_ind              = i2                    ;014
;021                  4  task_assay_mnemonic        = vc
;021                  4  display_sequence           = i4
;021                  4  restrict_display_ind       = i2                    ;013
;021                  4  event_cd                   = f8
;021                  4  pending_ind                = i2
;021                  4  default_result_type_cd     = f8
;021                  4  default_result_type_disp   = vc
;021                  4  default_result_type_mean   = c12
;021                  4  default_result_template_id = f8                    ;003
;021                  4  data_map_ind               = i2
;021                  4  max_digits                 = i4
;021                  4  min_decimal_places         = i4
;021                  4  min_digits                 = i4
;021                  4  result_entry_format        = i4
;021                  4  instr_cnt                  = i4
;021                  4  instr[*]
;021                     5  upld_assay_alias        = c25
;021                     5  process_sequence        = i4
;021                     5  default_result_type_cd  = f8
;021                     5  post_zero_result_ind    = i2
;047                     5  decimal_movement_nbr    = i4
;021                  4  next_repeat_nbr            = i4                    ;010
;021                  4  results_cnt                = i4
;021                  4  results[*]
;021                     5  perform_result_id       = f8
;021                     5  repeat_nbr              = i4                    ;010
;021                     5  result_id               = f8
;021                     5  result_status_cd        = f8
;021                     5  result_status_disp      = vc
;021                     5  result_status_mean      = c12
;021                     5  reference_range_factor_id = f8                  ;008
;021                     5  advanced_delta_id       = f8                    ;008
;021                     5  normal_cd               = f8
;021                     5  normal_disp             = vc                    ;007
;021                     5  normal_mean             = vc                    ;007
;021                     5  critical_cd             = f8
;021                     5  critical_disp           = vc                    ;007
;021                     5  critical_mean           = vc                    ;007
;021                     5  review_cd               = f8
;021                     5  review_disp             = vc                    ;007
;021                     5  review_mean             = vc                    ;007
;021                     5  linear_cd               = f8                    ;006
;021                     5  linear_disp             = vc                    ;007
;021                     5  linear_mean             = vc                    ;007
;021                     5  feasible_cd             = f8                    ;006
;021                     5  feasible_disp           = vc                    ;007
;021                     5  feasible_mean           = vc                    ;007
;021                     5  dilution_factor         = f8                    ;006
;021                     5  delta_cd                = f8
;021                     5  delta_disp              = vc                    ;007
;021                     5  delta_mean              = vc                    ;007
;021                     5  units_cd                = f8                    ;009
;021                     5  normal_range_flag       = i2 ;1=L, 2=H, 3=Both  ;009
;021                     5  normal_low              = f8
;021                     5  normal_high             = f8
;021                     5  normal_alpha            = vc
;021                     5  critical_range_flag     = i2 ;1=L, 2=H, 3=Both  ;011
;021                     5  critical_low            = f8                    ;011
;021                     5  critical_high           = f8                    ;011
;021                     5  result_type_cd          = f8
;021                     5  result_type_disp        = vc
;021                     5  result_type_mean        = c12
;021                     5  equation_id             = f8
;021                     5  nomenclature_id         = f8
;021                     5  result_value_numeric    = f8
;021                     5  numeric_raw_value       = f8
;021                     5  less_great_flag         = i2
;021                     5  result_value_alpha      = vc
;021                     5  result_value_dt_tm      = dq8
;021                     5  long_text_id            = f8
;021                     5  rtf_text                = vc
;021                     5  ascii_text              = vc
;021                     5  result_comment_ind      = i2
;021                     5  service_resource_cd     = f8                   ;020
;021                     5  service_resource_disp   = vc                   ;020
;021                     5  service_resource_desc   = vc
;021                     5  perform_personnel_id    = f8
;021                     5  perform_personnel_name  = vc
;021                     5  perform_dt_tm           = dq8
;021                     5  perform_result_updt_cnt = i4
;021                     5  result_updt_cnt         = i4
;                        5  qc_override_cd          = f8
;                        5  qc_override_disp        = vc
;                        5  qc_override_mean        = vc
;												 5  use_units_ind						= i2
;                        5  notify_cd               = f8
;                        5  notify_disp             = c40
;                        5  notify_mean             = c12
;                        5  result_value_alpha_mnemonic = c25
;048                     5  worklist_id             = f8
;021                  ;*** PREVIOUS RESULT FIELDS ***
;021                  ;*** Note: previous results may cross order_id and service resources
;021                  4  prev_task_assay_cd         = f8                    ;014
;021                  4  prev_task_assay_disp       = vc                    ;014
;021                  4  prev_perform_result_id     = f8
;021                  4  prev_result_id             = f8
;021                  4  prev_result_status_cd      = f8
;021                  4  prev_result_status_disp    = vc
;021                  4  prev_result_status_mean    = c12
;021                  4  prev_reference_range_factor_id  = f8               ;008
;021                  4  prev_delta_chk_flag        = i2                    ;008
;021                  4  prev_advanced_delta_id     = f8                    ;008
;021                  4  prev_delta_low             = f8                    ;008
;021                  4  prev_delta_high            = f8                    ;008
;021                  4  prev_delta_check_type_cd   = f8                    ;008
;021                  4  prev_delta_minutes         = i4                    ;008
;021                  4  prev_delta_value           = f8                    ;008
;021                  4  prev_normal_cd             = f8
;021                  4  prev_critical_cd           = f8
;021                  4  prev_review_cd             = f8
;021                  4  prev_linear_cd             = f8                    ;006
;021                  4  prev_feasible_cd           = f8                    ;006
;021                  4  prev_dilution_factor       = f8                    ;006
;021                  4  prev_delta_cd              = f8
;021                  4  prev_result_type_cd        = f8
;021                  4  prev_result_type_disp      = vc
;021                  4  prev_result_type_mean      = c12
;                     4  prev_notify_cd             = f8
;                     4  prev_notify_disp           = c40
;                     4  prev_notify_mean           = c12
;021                  4  prev_nomenclature_id       = f8
;021                  4  prev_equation_id           = f8
;021                  4  prev_result_value_numeric  = f8
;021                  4  prev_numeric_raw_value     = f8
;021                  4  prev_less_great_flag       = i2
;021                  4  prev_result_value_alpha    = vc
;021                  4  prev_result_value_dt_tm    = dq8
;021                  4  prev_long_text_id          = f8
;021                  4  prev_rtf_text              = vc
;021                  4  prev_ascii_text            = vc
;021                  4  prev_collected_dt_tm       = dq8
;                     4  prev_qc_override_cd        = f8
;                     4  prev_service_resource_cd   = f8
;052               3  accession_container_alpha = vc   ;Actual Container ID
;029            2  order_comment_text_blank_ind  = i2
;021         1  fail_reason_flag             = i2                          ;019
;021            ; 1 = All orders canceled on accession
;047         1  def_parent_order_id = f8
%i cclsource:status_block.inc
      )
 
endif
 
      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         set CV_REQUIRED_RECS            = 10                       ;033
         declare cv_cnt                  = i4
         set ACTIVITY_TYPE_CODESET       = 106
         set ACTIVITY_TYPE_GLB_CDF       = "GLB"
         set ACTIVITY_TYPE_HLA_CDF       = "HLA"                    ;001
         set ACTIVITY_TYPE_HLX_CDF       = "HLX"
         set ORDER_STATUS_CODESET        = 6004
         set ORDER_STATUS_CANCELED_CDF   = "CANCELED"
         set ORDER_STATUS_DELETED_CDF    = "DELETED"                ;031
         set ORDER_STATUS_DISCONTINUED_CDF   = "DISCONTINUED"       ;033
         set ORDER_COMMENT_CODESET       = 14
         set ORDER_COMMENT_CDF           = "ORD COMMENT"
         set ORDER_NOTE_CDF              = "ORD NOTE"
         set REVIEW_COMMENT_CDF          = "REVIEW"                 ;016
         set RESULT_STATUS_CODESET       = 1901
         set RESULT_STATUS_VERIFIED_CDF  = "VERIFIED"
         set RESULT_STATUS_AUTOVERIFIED_CDF  = "AUTOVERIFIED"       ;012
         set RESULT_STATUS_CORRECTED_CDF = "CORRECTED"
         set DATA_MAP_TYPE_FLAG          = 0    ;Fill out with correct value.
         set SERV_RES_TYPE_CODESET       = 223                      ;018
         set SERV_RES_SUBSECTION_CDF     = "SUBSECTION"             ;015
         ;Default Data Map                                          ;032
         set DEFAULT_MIN = 1                                        ;032
         set DEFAULT_MAX = 8                                        ;032
         set DEFAULT_DEC = 0                                        ;032
         declare order_status_canceled_cd   = f8
         declare order_status_deleted_cd   = f8                     ;031
         declare order_status_discontinued_cd = f8                  ;033
         declare order_comment_cd        = f8
         declare order_note_cd           = f8
         declare review_comment_cd       = f8                       ;016
         declare result_status_verified_cd  = f8
         declare result_status_autoverified_cd  = f8                ;012
         declare result_status_corrected_cd = f8
         declare serv_res_subsection_cd  = f8                       ;018
         declare q_cnt                   = i4
         declare c_cnt                   = i4
         declare a_cnt                   = i4
         declare i_cnt                   = i4
         declare r_cnt                   = i4
         declare max_q_cnt               = i4
         declare max_c_cnt               = i4
         declare max_a_cnt               = i4 with protect, noconstant(0)
         declare next_repeat_nbr         = i4                           ;010
 
         declare route_lvl_one_found     = i2 with protect, noconstant(0)
         declare route_lvl_two_found     = i2 with protect, noconstant(0)
         declare rel_assay_found_ind     = i2 with protect, noconstant(0)
 
         declare lookup_helix_ind = i2 with noconstant(0), protect
 
         declare dtOldestOrig = dq8 with protect, noconstant(cnvtdatetime("31-DEC-2100 00:00:00.00")) ;;047
 
         set reply->status_data.status = "F"
 
          execute accrtl

 
         ;initialize resource security
         declare dServResCd = f8 with protect, noconstant(0.0)
         declare is_resource_viewable = i2 with protect, noconstant(0)
         call InitResourceSecurity(request->resource_security_ind)
 
      /***********************************************************************
      * Load order status, order comment and result status code sets         *
      ***********************************************************************/
         set cv_cnt = 0
 
         set order_status_canceled_cd = GetCodeValueByMeaning (ORDER_STATUS_CODESET, ORDER_STATUS_CANCELED_CDF)
         if (order_status_canceled_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set order_status_deleted_cd = GetCodeValueByMeaning(ORDER_STATUS_CODESET,ORDER_STATUS_DELETED_CDF)
         if (order_status_deleted_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set order_status_discontinued_cd = GetCodeValueByMeaning(ORDER_STATUS_CODESET, ORDER_STATUS_DISCONTINUED_CDF)
         if (order_status_discontinued_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set order_comment_cd = GetCodeValueByMeaning(ORDER_COMMENT_CODESET, ORDER_COMMENT_CDF)
         if (order_comment_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set order_note_cd = GetCodeValueByMeaning(ORDER_COMMENT_CODESET, ORDER_NOTE_CDF)
         if (order_note_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set review_comment_cd = GetCodeValueByMeaning(ORDER_COMMENT_CODESET, REVIEW_COMMENT_CDF)
         if (review_comment_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set result_status_verified_cd = GetCodeValueByMeaning(RESULT_STATUS_CODESET, RESULT_STATUS_VERIFIED_CDF)
         if (result_status_verified_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set result_status_autoverified_cd = GetCodeValueByMeaning(RESULT_STATUS_CODESET, RESULT_STATUS_AUTOVERIFIED_CDF)
         if (result_status_autoverified_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set result_status_corrected_cd = GetCodeValueByMeaning(RESULT_STATUS_CODESET, RESULT_STATUS_CORRECTED_CDF)
         if (result_status_corrected_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         set serv_res_subsection_cd = GetCodeValueByMeaning(SERV_RES_TYPE_CODESET, SERV_RES_SUBSECTION_CDF)
         if (serv_res_subsection_cd > 0.0)
           set cv_cnt = cv_cnt + 1
         endif
 
         ;* Verify that all required code value records were read.
         if (cv_cnt != CV_REQUIRED_RECS)
            set reply->status_data.subeventstatus[1].OperationName =   ;018
               "SELECT"                                                ;018
            set reply->status_data.subeventstatus[1].OperationStatus = ;018
               "F"                                                     ;018
            set reply->status_data.subeventstatus[1].TargetObjectName = ;018
               "CODE_VALUE TABLE"                                      ;018
            set reply->status_data.subeventstatus[1].TargetObjectValue = ;018
               "Unable to load all required code values for script execution" ;018
            go to Exit_Script
         endif
 
         /* NOTE: We only want to lookup HLX activity type if we are getting called from PFMT_GL_REEVAL_RESULTS
                  OR
                  if this script is called from MDI server. */
         if (reqinfo->updt_task = 1250010 or
             validate(from_pfmt_gl_reeval_results, 0) = 1 or
             validate(request->interface_flag, 0) > 0)
           call echo("Looking up Helix orders ...")
           set lookup_helix_ind = 1
         endif
 
      /***********************************************************************
      * Determine route level of order based on accession                    *
      ***********************************************************************/
         set max_q_cnt = 0
 
         select into "nl:"
            aor.seq,
            o.seq,
            cv.seq,
            ol.seq,
            p1.seq,                                                    ;009
            p.seq,
            osrc.container_id,
            osrc.order_id,
            osrc.service_resource_cd,
            ca.accession_container_nbr,
            sr.organization_id,                                         ;028
            c.seq,
            d_oc.seq,
            oc_exists = evaluate(nullind(oc.seq), 0, 1, 0),
            oc.action_sequence
 
 
         from
            accession_order_r aor,
            orders o,
            encounter e,
            code_value cv,
            order_laboratory ol,
            person p1,                                                 ;009
            prsnl p,
            order_container_r ocr,                                     ;025
            order_serv_res_container osrc,
            container_accession ca,
            service_resource sr,                                        ;028
            container c,
            order_comment oc,
            long_text lt
 
         plan    aor  where aor.accession = request->accession
                        and aor.primary_flag = 0                      ;023
         join    o    where o.order_id = aor.order_id
                        and o.order_status_cd not in (order_status_canceled_cd,               ;031
                                                      order_status_discontinued_cd,           ;033
                                                      order_status_deleted_cd)                ;031
	 join    e where e.encntr_id=o.encntr_id
         join    cv   where cv.code_value = o.activity_type_cd
                        and (cv.cdf_meaning in (ACTIVITY_TYPE_GLB_CDF, ACTIVITY_TYPE_HLA_CDF)
                         or (cv.cdf_meaning = ACTIVITY_TYPE_HLX_CDF and lookup_helix_ind = 1))
         join    ol   where ol.order_id = o.order_id
         join    p1   where p1.person_id = o.person_id                 ;009
         join    p    where p.person_id = o.last_update_provider_id
         join    ocr  where ocr.order_id = o.order_id                  ;025
                        and ocr.collection_status_flag != 7            ;025
         join    osrc where osrc.order_id = ocr.order_id               ;025
                        and osrc.container_id = ocr.container_id       ;025
         join    ca   where ca.accession_id = aor.accession_id
                        and ca.container_id = osrc.container_id
         join    sr   where sr.service_resource_cd = osrc.service_resource_cd                                       ;028
         join    c    where c.container_id = osrc.container_id
         join    oc   where oc.order_id = outerjoin(o.order_id)
         join    lt   where lt.long_text_id = outerjoin(oc.long_text_id)
 
         order by
            o.catalog_cd,
            osrc.order_id,
            osrc.service_resource_cd,
            ca.accession_container_nbr,
            oc.action_sequence
 
         head report
            q_cnt = 0
            c_cnt = 0
            max_c_cnt = 0
 
         head osrc.order_id
            q_cnt = q_cnt + 1
             if (size(reply->qual, 5) < q_cnt)
               stat = alterlist(reply->qual, q_cnt + 10)
            endif
            reply->accession_id = aor.accession_id                      ;017
            reply->person_id = o.person_id
            reply->person_name = p1.name_full_formatted                 ;009
            reply->encntr_id = o.encntr_id
            reply->encntr_reg_dt_tm = e.reg_dt_tm
            reply->encntr_disch_dt_tm = e.disch_dt_tm
            reply->qual[q_cnt].updt_cnt = o.updt_cnt
            reply->qual[q_cnt].cs_order_id = o.cs_order_id
            reply->qual[q_cnt].order_id = osrc.order_id
            reply->qual[q_cnt].order_mnemonic = o.order_mnemonic
            reply->qual[q_cnt].report_priority_cd = ol.report_priority_cd
            reply->qual[q_cnt].restrict_av_ind = aor.restrict_av_ind            ;026
            reply->qual[q_cnt].catalog_cd = o.catalog_cd
            reply->qual[q_cnt].catalog_type_cd = o.catalog_type_cd
            reply->qual[q_cnt].activity_type_cd = o.activity_type_cd    ;001
            reply->qual[q_cnt].order_status_cd = o.order_status_cd
            reply->qual[q_cnt].last_action_sequence = o.last_action_sequence
            reply->qual[q_cnt].last_update_provider_id = o.last_update_provider_id
            reply->qual[q_cnt].route_level = ol.resource_route_level_flag
            if (ol.resource_route_level_flag = 1)
              route_lvl_one_found = 1
            elseif (ol.resource_route_level_flag = 2)
              route_lvl_two_found = 1
            endif
            reply->qual[q_cnt].review_required_ind = ol.review_required_ind     ;005
            reply->qual[q_cnt].pending_review_ind = ol.pending_review_ind       ;005
            if (p.person_id > 0.0)
               reply->qual[q_cnt].last_update_provider_name =
                 p.name_full_formatted
            endif
            ;* set order comment field defaults
            reply->qual[q_cnt].order_comment_ind = 0
            reply->qual[q_cnt].order_comment_action_seq = 0
            reply->qual[q_cnt].order_note_action_seq = 0
            reply->qual[q_cnt].order_comment_text_blank_ind = 0
 
            ;;047+
            if( reply->def_parent_order_id = 0
                or o.orig_order_dt_tm < dtOldestOrig
                or (o.orig_order_dt_tm = dtOldestOrig and o.order_id < reply->def_parent_order_id))
 
               reply->def_parent_order_id = o.order_id
               dtOldestOrig = o.orig_order_dt_tm
 
            endif
            ;;047-
 
            c_cnt = 0
 
         head osrc.service_resource_cd
            dServResCd = osrc.service_resource_cd
            is_resource_viewable = IsResourceViewable(dServResCd)
            if (is_resource_viewable = TRUE)
               c_cnt = c_cnt + 1
               if (mod(c_cnt,10) = 1)
                  stat = alterlist(reply->qual[q_cnt].container_serv_res, c_cnt + 10)
               endif
               if (c_cnt > max_c_cnt)
                  max_c_cnt = c_cnt
               endif
               reply->qual[q_cnt].container_serv_res_cnt = c_cnt
               reply->qual[q_cnt].container_serv_res[c_cnt].status_flag = -1
            endif  ;034
 
         head ca.accession_container_nbr
          if (is_resource_viewable = TRUE)
;030            ;* Only return the container with the appropriate osrc status
;030            ;* in the following status order:
;030            ;*    1 = In Lab
;030            ;*    2 = Completed
;030            ;*    0 = Not in lab
 
            ;* Only return the container with the appropriate osrc status                           ;030
            ;* in the following status order:                                                       ;030
            ;  1 = In-Lab                                                                           ;030
            ;  2 = Completed and current_loc_cd = loc_cd                                            ;030
            ;  3 = Completed and current_loc_cd != loc_cd                                           ;030
            ;  0 = Not In-Lab                                                                       ;030
 
            ; status_flag is set to '3' to indicate that the order has been completed but current_loc_cd
            ; is not the same as location_cd.  This is to differentiate from order that has been completed
            ; and in-lab.  If the status_flag = 3 then it will be set two '2' at the foot section of the report
            ; writer so that the app will understand since there is no such thing as status_flag = 3.
 
            if (reply->qual[q_cnt].container_serv_res[c_cnt].status_flag = -1                           ;030
                or (reply->qual[q_cnt].container_serv_res[c_cnt].status_flag = 0                        ;030
                    and osrc.status_flag in (1,2))                                                      ;030
                or (reply->qual[q_cnt].container_serv_res[c_cnt].status_flag = 3                        ;030
                      and ((osrc.status_flag = 2 and osrc.current_location_cd = osrc.location_cd)      ;030
                      or osrc.status_flag = 1))                                                         ;030
                or (reply->qual[q_cnt].container_serv_res[c_cnt].status_flag = 2                        ;030
                      and osrc.status_flag = 1)                                                         ;030
                )                                                                                       ;030
 
               reply->qual[q_cnt].container_serv_res[c_cnt].container_id =
                 osrc.container_id
               reply->qual[q_cnt].container_serv_res[c_cnt].in_lab_dt_tm =
                   cnvtdatetime(osrc.in_lab_dt_tm)
               reply->qual[q_cnt].container_serv_res[c_cnt].organization_id =                           ;028
                 sr.organization_id                                                                     ;028
 
               reply->qual[q_cnt].container_serv_res[c_cnt]
                 .service_resource_cd = osrc.service_resource_cd
 
               if (osrc.status_flag = 2 and osrc.current_location_cd != osrc.location_cd )              ;030
                  reply->qual[q_cnt].container_serv_res[c_cnt].status_flag = 3                          ;030
               else                                                                                     ;030
                  reply->qual[q_cnt].container_serv_res[c_cnt].status_flag =
                    osrc.status_flag
               endif                                                                                    ;030
 
               reply->qual[q_cnt].container_serv_res[c_cnt].specimen_type_cd =
                 c.specimen_type_cd
               reply->qual[q_cnt].container_serv_res[c_cnt].drawn_dt_tm =
                 c.drawn_dt_tm
               reply->qual[q_cnt].container_serv_res[c_cnt].assays_cnt = 0

               reply->qual[q_cnt].container_serv_res[c_cnt].accession_container_alpha =
                 char(uar_accgetcontaineralpha(ca.accession_container_nbr))

            endif
          endif
 
         detail
          if (is_resource_viewable = TRUE)
            if (oc_exists = 1)
              if (oc.action_sequence <= o.last_action_sequence
                   and oc.comment_type_cd in (order_comment_cd, order_note_cd, review_comment_cd))
                reply->qual[q_cnt].order_comment_ind = 1
                if (oc.comment_type_cd = order_comment_cd)
                   reply->qual[q_cnt].order_comment_action_seq =
                     oc.action_sequence
                endif
                if (oc.comment_type_cd = order_note_cd)
                   reply->qual[q_cnt].order_note_action_seq =
                     oc.action_sequence
                endif
                if ((oc.comment_type_cd = order_comment_cd) and (lt.long_text_id > 0))
                  if (size(trim(lt.long_text, 3), 1) = 0)
                     reply->qual[q_cnt].order_comment_text_blank_ind = 1
                  else
                     reply->qual[q_cnt].order_comment_text_blank_ind = 0
                  endif
                endif
              endif
            endif
          endif
 
         foot ca.accession_container_nbr
            row +0
 
         foot osrc.service_resource_cd
          if (is_resource_viewable = TRUE)
            if (reply->qual[q_cnt].container_serv_res[c_cnt].status_flag = 3)                       ;030
               reply->qual[q_cnt].container_serv_res[c_cnt].status_flag = 2                     ;030
            endif                                                                                   ;030
          endif
 
         foot osrc.order_id
            stat = alterlist(reply->qual[q_cnt].container_serv_res, c_cnt)
            if (c_cnt = 0)
               q_cnt = q_cnt - 1
            endif
 
         foot report
            stat = alterlist(reply->qual, q_cnt)
 
         with
            nocounter
 
         set max_q_cnt = q_cnt
 
      /***********************************************************************
      * Check for canceled orders if necessary                               *
      ***********************************************************************/
         if (q_cnt = 0)                                                ;019
            select into "nl:"                                          ;019
               aor.accession,                                          ;019
               o.order_status_cd                                       ;019
            from                                                       ;019
               accession_order_r aor,                                  ;019
               orders o                                                ;019
            plan aor  where aor.accession = request->accession         ;019
            join o    where o.order_id = aor.order_id                  ;019
            head report                                                ;019
               all_canceled_ind = 1                                    ;023
               all_rescheduled_ind = 1                                 ;023
               all_rescheduled_or_canceled_ind = 1                     ;023
            detail                                                     ;019
               ;* Verify that order was rescheduled                    ;023
               if (aor.primary_flag != 1)                              ;023
                  all_rescheduled_ind = 0                              ;023
               endif                                                   ;023
 
               if (o.order_status_cd not in (order_status_canceled_cd,                  ;031
                                             order_status_discontinued_cd,              ;033
                                             order_status_deleted_cd))                  ;031
                  all_canceled_ind = 0                                 ;023
               endif                                                   ;019
 
               ;* Verify that all orders are canceled or rescheduled   ;023
               if (aor.primary_flag != 1 and                           ;023
                   o.order_status_cd not in (order_status_canceled_cd,                 ;031
                                             order_status_discontinued_cd,              ;033
                                             order_status_deleted_cd))                 ;031
                  all_rescheduled_or_canceled_ind = 0                  ;023
               endif                                                   ;023
            foot report                                                ;023
               if (all_rescheduled_ind = 1)                            ;023
                  reply->fail_reason_flag = 2                          ;023
               elseif (all_canceled_ind = 1 or                         ;023
                       all_rescheduled_or_canceled_ind = 1)            ;023
                  reply->fail_reason_flag = 1                          ;023
               endif                                                   ;023
            with nocounter                                             ;019
         endif                                                         ;019
 
      /***********************************************************************
      * Load assays based on route level                                     *
      ***********************************************************************/
         if (max_q_cnt = 0
         or  max_c_cnt = 0)
            go to Resize_Reply
         endif
 
         if (route_lvl_one_found = 1)
           select into "nl:"
              d1.seq
         from
            (dummyt d1 with seq = value(max_q_cnt)),
            (dummyt d2 with seq = value(max_c_cnt)),
            profile_task_r ptr1,
            discrete_task_assay dta1,
              assay_processing_r apr1
 
         plan d1
         join d2  where d2.seq <= reply->qual[d1.seq].container_serv_res_cnt
           join  ptr1 where reply->qual[d1.seq].route_level = 1
                        and ptr1.catalog_cd = reply->qual[d1.seq].catalog_cd
                        and ptr1.active_ind = 1
           join  dta1 where dta1.task_assay_cd = ptr1.task_assay_cd
                        and dta1.active_ind = 1
           join  apr1 where apr1.service_resource_cd = reply->qual[d1.seq]
                            .container_serv_res[d2.seq].service_resource_cd
                        and apr1.task_assay_cd = ptr1.task_assay_cd
 
           order by
              d1.seq,
              d2.seq,
              apr1.display_sequence,
              ptr1.task_assay_cd
 
         head report
            q_cnt = 0
            c_cnt = 0
            a_cnt = 0
 
 
         head d1.seq
            q_cnt = d1.seq
 
         head d2.seq
            c_cnt = d2.seq
            reply->qual[q_cnt].container_serv_res[c_cnt].assays_cnt = 0
            a_cnt = 0
 
         detail
                 a_cnt = a_cnt + 1
                 if (mod(a_cnt,10) = 1)
                    stat = alterlist(reply->qual[q_cnt]
                      .container_serv_res[c_cnt].assays, a_cnt + 10)
                 endif
                 if (a_cnt > max_a_cnt)
                    max_a_cnt = a_cnt
                 endif
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays_cnt =
                   a_cnt
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .task_assay_cd = ptr1.task_assay_cd
                 ;set the default data map here just in case                   ;032
                 ;app is not checking DM ind for no data map                   ;032
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]    ;032
                 .max_digits = DEFAULT_MAX                                     ;032
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]    ;032
                 .min_digits = DEFAULT_MIN                                     ;032
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]    ;032
                 .min_decimal_places = DEFAULT_DEC                             ;032
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]              ;027
                   .ptr_sequence = ptr1.sequence                                         ;027
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .delta_lvl_flag = dta1.delta_lvl_flag
 
                 reply->qual[q_cnt].container_serv_res[c_cnt]           ;014
                   .assays[a_cnt].rel_assay_ind = dta1.rel_assay_ind    ;014
              if (dta1.rel_assay_ind = 1)
                rel_assay_found_ind = 1
              endif
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt].sci_notation_ind = dta1.sci_notation_ind
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .task_assay_mnemonic = dta1.mnemonic
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .display_sequence = apr1.display_sequence
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .event_cd = dta1.event_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .pending_ind = ptr1.pending_ind
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;013
                   .restrict_display_ind = ptr1.restrict_display_ind        ;013
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .default_result_type_cd = apr1.default_result_type_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;003
                   .default_result_template_id =                            ;003
                   apr1.default_result_template_id                          ;003
 
           foot d2.seq
              if (a_cnt > 0)
                 stat = alterlist(reply->qual[q_cnt].container_serv_res[c_cnt]
                   .assays, a_cnt)
              endif
 
           foot d1.seq
              row+0
 
           with
              nocounter
 
         endif
 
         if (route_lvl_two_found = 1)
           select into "nl:"
              d1.seq
           from
              (dummyt d1 with seq = value(max_q_cnt)),
              (dummyt d2 with seq = value(max_c_cnt)),
              profile_task_r ptr2,
              discrete_task_assay dta2,
              order_procedure_exception ope,
              assay_processing_r apr2
 
           plan d1
           join d2  where d2.seq <= reply->qual[d1.seq].container_serv_res_cnt
           join  ptr2 where reply->qual[d1.seq].route_level = 2
                        and ptr2.catalog_cd = reply->qual[d1.seq].catalog_cd
                        and ptr2.active_ind = 1
           join  dta2 where dta2.task_assay_cd = ptr2.task_assay_cd
                        and dta2.active_ind = 1
           join  ope  where ope.order_id = reply->qual[d1.seq].order_id
                        and ope.task_assay_cd = ptr2.task_assay_cd
                        and ope.service_resource_cd = reply->qual[d1.seq]
                              .container_serv_res[d2.seq].service_resource_cd
           join  apr2 where apr2.service_resource_cd = reply->qual[d1.seq]
                              .container_serv_res[d2.seq].service_resource_cd
                        and apr2.task_assay_cd = ptr2.task_assay_cd
 
           order by
              d1.seq,
              d2.seq,
              apr2.display_sequence,
              ptr2.task_assay_cd
 
           head report
              q_cnt = 0
              c_cnt = 0
              a_cnt = 0
 
 
           head d1.seq
              q_cnt = d1.seq
 
           head d2.seq
              c_cnt = d2.seq
              reply->qual[q_cnt].container_serv_res[c_cnt].assays_cnt = 0
              a_cnt = 0
 
           detail
                 a_cnt = a_cnt + 1
                 if (mod(a_cnt,10) = 1)
                    stat = alterlist(reply->qual[q_cnt]
                      .container_serv_res[c_cnt].assays, a_cnt + 10)
                 endif
                 if (a_cnt > max_a_cnt)
                    max_a_cnt = a_cnt
                 endif
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays_cnt =
                   a_cnt
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .task_assay_cd = ptr2.task_assay_cd
                 ;set the default data map here just in case                   ;032
                 ;app is not checking DM ind for no data map                   ;032
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]    ;032
                 .max_digits = DEFAULT_MAX                                     ;032
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]    ;032
                 .min_digits = DEFAULT_MIN                                     ;032
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]    ;032
                 .min_decimal_places = DEFAULT_DEC                             ;032
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]              ;027
                   .ptr_sequence = ptr2.sequence                                         ;027
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .delta_lvl_flag = dta2.delta_lvl_flag
 
                 reply->qual[q_cnt].container_serv_res[c_cnt]           ;014
                   .assays[a_cnt].rel_assay_ind = dta2.rel_assay_ind    ;014
              if (dta2.rel_assay_ind = 1)
                rel_assay_found_ind = 1
              endif
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt].sci_notation_ind = dta2.sci_notation_ind
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .task_assay_mnemonic = dta2.mnemonic
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .display_sequence = apr2.display_sequence
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .event_cd = dta2.event_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .pending_ind = ptr2.pending_ind
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;013
                   .restrict_display_ind = ptr2.restrict_display_ind        ;013
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .default_result_type_cd = apr2.default_result_type_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;003
                   .default_result_template_id =                            ;003
                   apr2.default_result_template_id                          ;003
 
         foot d2.seq
            if (a_cnt > 0)
               stat = alterlist(reply->qual[q_cnt].container_serv_res[c_cnt]
                 .assays, a_cnt)
            endif
 
         foot d1.seq
            row+0
 
         with
              nocounter
         endif
 
      /***********************************************************************
      * Load results and previous results                                    *
      ***********************************************************************/
         if (max_q_cnt = 0
         or  max_c_cnt = 0
         or  max_a_cnt = 0)
            go to Resize_Reply
         endif
 
         select into "nl:"
            join_path = decode(dm.seq,  "dm",
                               r1.seq,  "r1",
                               r2.seq,  "r2",
                                        "None"),
            d1.seq,
            d2.seq,
            d3.seq,
            d_dm.seq,
            dm.seq,
            d_rg.seq,                                                  ;018
            rg_exists = decode(rg.seq, "Y", "N"),                      ;018
            rg.seq,                                                    ;018
            d_r1.seq,
            r1.seq,
            pr1.seq,
            ar_exists = decode(ar.seq, "Y", "N"),
            rrf1.seq,                                                  ;011
            pl1.seq,
            lt1.seq,
            d_rc1.seq,
            result_comment_yn = decode(rc1.seq, "Y", "N"),
            rc1.seq,
            d_r2.seq,
            r2.seq,
            pr2.seq,
            lt2.seq,
            c2.seq,
            rrf2.seq,                                                   ;008
            ad2.seq                                                     ;008
 
         from
            (dummyt d1 with seq = value(max_q_cnt)),
            (dummyt d2 with seq = value(max_c_cnt)),
            (dummyt d3 with seq = value(max_a_cnt)),
            (dummyt d_dm with seq = 1),
            data_map dm,
            (dummyt d_rg with seq = 1),                                ;018
            resource_group rg,                                         ;018
            (dummyt d_r1 with seq = 1),
            result r1,
            perform_result pr1,
            reference_range_factor rrf1,                               ;011
            prsnl pl1,
            long_text lt1,
            nomenclature nc1,
            (dummyt d_rc1 with seq = 1),
            result_comment rc1,
            (dummyt d_ar with seq = 1),
            alpha_responses ar,
            (dummyt d_r2 with seq = 1),
            result r2,
            perform_result pr2,
            long_text lt2,
            container c2,
            reference_range_factor rrf2,                                ;008
            advanced_delta ad2                                          ;008
 
         plan d1
         join d2  where d2.seq <= reply->qual[d1.seq].container_serv_res_cnt
         join d3  where d3.seq <=
                       reply->qual[d1.seq].container_serv_res[d2.seq].assays_cnt
         join (d_dm where d_dm.seq = 1
           join dm  where dm.task_assay_cd = reply->qual[d1.seq]       ;015
                        .container_serv_res[d2.seq].assays[d3.seq].task_assay_cd
                      and dm.data_map_type_flag = DATA_MAP_TYPE_FLAG
                      and dm.active_ind = 1
           join d_rg where d_rg.seq = 1                                ;018
           join rg  where rg.parent_service_resource_cd =              ;018
                            dm.service_resource_cd                     ;018
                      and rg.child_service_resource_cd =               ;018
                        reply->qual[d1.seq].container_serv_res[d2.seq] ;018
                        .service_resource_cd                           ;018
                      and rg.resource_group_type_cd =                  ;018
                            serv_res_subsection_cd                     ;018
                      and rg.root_service_resource_cd = 0.0)           ;018
         orjoin (d_r1 where d_r1.seq = 1
           join r1  where r1.order_id = reply->qual[d1.seq].order_id
                      and r1.task_assay_cd = reply->qual[d1.seq]
                        .container_serv_res[d2.seq].assays[d3.seq].task_assay_cd
           join pr1 where pr1.result_id = r1.result_id
                      and pr1.result_status_cd = r1.result_status_cd
           join rrf1 where rrf1.reference_range_factor_id =            ;011
                                  pr1.reference_range_factor_id        ;011
           join pl1 where pl1.person_id = pr1.perform_personnel_id
           join lt1 where lt1.long_text_id = pr1.long_text_id
           join nc1 where nc1.nomenclature_id = pr1.nomenclature_id
           join d_rc1 where d_rc1.seq = 1
           join rc1 where rc1.result_id = pr1.result_id
           join d_ar where d_ar.seq = 1
           join ar where ar.reference_range_factor_id = pr1.reference_range_factor_id
           					 and ar.nomenclature_id = pr1.nomenclature_id)
         orjoin (d_r2 where d_r2.seq = 1
           join r2  where r2.person_id = reply->person_id
 
                      and r2.task_assay_cd = reply->qual[d1.seq]
                        .container_serv_res[d2.seq].assays[d3.seq]
                        .task_assay_cd
                      and r2.result_status_cd
                        in (result_status_verified_cd,
                            result_status_autoverified_cd,             ;012
                            result_status_corrected_cd)
           join pr2 where pr2.result_id = r2.result_id
                      and pr2.result_status_cd = r2.result_status_cd
           join lt2 where lt2.long_text_id = pr2.long_text_id
           join c2   where c2.container_id = pr2.container_id            ;008
           join rrf2 where rrf2.reference_range_factor_id =              ;008
                                   pr2.reference_range_factor_id         ;008
           join ad2 where ad2.advanced_delta_id = pr2.advanced_delta_id) ;008
 
         head report
            q_cnt = 0
            c_cnt = 0
            a_cnt = 0
            r_cnt = 0
            data_map_level = 0                                         ;015
 
         head d1.seq
            q_cnt = d1.seq
 
         head d2.seq
            c_cnt = d2.seq
 
         head d3.seq
            next_repeat_nbr = -1                                        ;010
            a_cnt = d3.seq
            reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
              .data_map_ind = 0
            data_map_level = 0                                         ;015
            r_cnt = 0
 
         detail
            case (join_path)
              of "dm":
                 ;* Check for exact match on data map                  ;015
                 if (data_map_level <= 2                               ;015
                 and dm.service_resource_cd > 0.0                      ;015
                 and dm.service_resource_cd = reply->qual[q_cnt]       ;015
                   .container_serv_res[c_cnt].service_resource_cd)     ;015
                    data_map_level = 3                                 ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].data_map_ind = 1                 ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].max_digits = dm.max_digits       ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].min_digits = dm.min_digits       ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].min_decimal_places =             ;015
                       dm.min_decimal_places                           ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].result_entry_format =            ;015
                       dm.result_entry_format                          ;015
                 endif                                                 ;015
                 ;* Check for subsection level data map                ;015
                 if (data_map_level <= 1                               ;015
                 and dm.service_resource_cd > 0.0                      ;015
                 and rg_exists = "Y"                                   ;018
                 and rg.parent_service_resource_cd =                   ;018
                             dm.service_resource_cd                    ;018
                 and rg.child_service_resource_cd = reply->qual[q_cnt] ;018
                   .container_serv_res[c_cnt].service_resource_cd)     ;018
                    data_map_level = 2                                 ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].data_map_ind = 1                 ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].max_digits = dm.max_digits       ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].min_digits = dm.min_digits       ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].min_decimal_places =             ;015
                       dm.min_decimal_places                           ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].result_entry_format =            ;015
                       dm.result_entry_format                          ;015
                 endif                                                 ;015
                 ;* Check for default all resources level data map     ;015
                 if (data_map_level = 0                                ;015
                 and dm.service_resource_cd = 0.0)                     ;015
                    data_map_level = 1                                 ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].data_map_ind = 1                 ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].max_digits = dm.max_digits       ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].min_digits = dm.min_digits       ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].min_decimal_places =             ;015
                       dm.min_decimal_places                           ;015
                    reply->qual[q_cnt].container_serv_res[c_cnt]       ;015
                       .assays[a_cnt].result_entry_format =            ;015
                       dm.result_entry_format                          ;015
                 endif                                                 ;015
              of "r1":
                 ;* Current result
                 r_cnt = r_cnt + 1
                 if (mod(r_cnt,10) = 1)
                    stat = alterlist(reply->qual[q_cnt]
                      .container_serv_res[c_cnt]
                      .assays[a_cnt].results, r_cnt + 10)
                 endif
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results_cnt = r_cnt
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].perform_result_id = pr1.perform_result_id
 
                 if (pr1.repeat_nbr > next_repeat_nbr)                  ;010
                   next_repeat_nbr = pr1.repeat_nbr                     ;010
                 endif                                                  ;010
                 reply->qual[q_cnt].container_serv_res[c_cnt].          ;010
                   assays[a_cnt].results[r_cnt].repeat_nbr =            ;010
                     pr1.repeat_nbr                                     ;010
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].result_id = r1.result_id
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].result_status_cd = r1.result_status_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].result_type_cd = pr1.result_type_cd
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;029
                   .results[r_cnt].resource_error_codes =                   ;029
                   pr1.resource_error_codes                                 ;029
 
                 reply->qual[q_cnt].container_serv_res[c_cnt]           ;008
                   .assays[a_cnt].results[r_cnt]                        ;008
                   .reference_range_factor_id =                         ;008
                   pr1.reference_range_factor_id                        ;008
                 reply->qual[q_cnt].container_serv_res[c_cnt]           ;008
                   .assays[a_cnt].results[r_cnt].advanced_delta_id =    ;008
                   pr1.advanced_delta_id                                ;008
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].equation_id = pr1.equation_id
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].normal_cd = pr1.normal_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].qc_override_cd = pr1.qc_override_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].critical_cd = pr1.critical_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].review_cd = pr1.review_cd
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;006
                   .results[r_cnt].linear_cd = pr1.linear_cd                ;006
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;006
                   .results[r_cnt].feasible_cd = pr1.feasible_cd            ;006
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;006
                   .results[r_cnt].dilution_factor = pr1.dilution_factor    ;006
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].delta_cd = pr1.delta_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt]                            ;024
                   .assays[a_cnt].results[r_cnt].normal_range_flag = rrf1.normal_ind     ;024
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].normal_low = pr1.normal_low
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].normal_high = pr1.normal_high
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].normal_alpha = pr1.normal_alpha
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]     ;024
                   .results[r_cnt].critical_range_flag = rrf1.critical_ind      ;024
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;011
                   .results[r_cnt].critical_low = rrf1.critical_low         ;011
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;011
                   .results[r_cnt].critical_high = rrf1.critical_high       ;011
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt] ;009
                   .results[r_cnt].units_cd = pr1.units_cd                  ;009
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].nomenclature_id = pr1.nomenclature_id
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].result_value_numeric =
                   pr1.result_value_numeric
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].numeric_raw_value = pr1.numeric_raw_value
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].result_value_alpha = pr1.result_value_alpha
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].result_value_alpha_mnemonic = nc1.mnemonic
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].result_value_dt_tm = pr1.result_value_dt_tm
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].long_text_id = pr1.long_text_id
                 if (lt1.long_text_id > 0.0)
                    reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                      .results[r_cnt].rtf_text = lt1.long_text
                 endif
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].ascii_text = pr1.ascii_text
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].less_great_flag = pr1.less_great_flag
                 reply->qual[q_cnt].container_serv_res[c_cnt]          ;020
                   .assays[a_cnt].results[r_cnt].service_resource_cd = ;020
                   pr1.service_resource_cd                             ;020
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].perform_personnel_id =
                   pr1.perform_personnel_id
                 if (pl1.person_id > 0.0)
                    reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                     .results[r_cnt].perform_personnel_name =
                     pl1.name_full_formatted
                 endif
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].perform_dt_tm = pr1.perform_dt_tm
                 if(curutc = 1)
                     reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].perform_tz = pr1.perform_tz
                 endif
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].perform_result_updt_cnt = pr1.updt_cnt
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                   .results[r_cnt].result_updt_cnt = r1.updt_cnt
                 if (result_comment_yn = "Y")
                    reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                      .results[r_cnt].result_comment_ind = 1
                 else
                    reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                      .results[r_cnt].result_comment_ind = 0
                 endif
                 if(ar_exists = "Y")
                 		reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                      .results[r_cnt].use_units_ind = ar.use_units_ind
                 endif
 
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .results[r_cnt].notify_cd = pr1.notify_cd
                 reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
                    .results[r_cnt].worklist_id = pr1.worklist_id
              of "r2":
                 ;* Previous result
                 ;* Find the previous results drawn date/time which is before
                 ;* and closest to the current results drawn date/time.
                 if (cnvtdatetime(c2.drawn_dt_tm) <
                     cnvtdatetime(reply->qual[q_cnt].container_serv_res[c_cnt]
                     .drawn_dt_tm))
                    if ((reply->qual[q_cnt].container_serv_res[c_cnt]
                       .assays[a_cnt].prev_result_id <= 0.0)
                    or (reply->qual[q_cnt].container_serv_res[c_cnt]
                       .assays[a_cnt].prev_result_id > 0.0
                      and cnvtdatetime(c2.drawn_dt_tm) >
                          cnvtdatetime(reply->qual[q_cnt]
                          .container_serv_res[c_cnt]
                          .assays[a_cnt].prev_collected_dt_tm)))
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]     ;014
                         .assays[a_cnt].prev_task_assay_cd =            ;014
                         r2.task_assay_cd                               ;014
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_perform_result_id =
                         pr2.perform_result_id
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_result_id =
                         r2.result_id
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_result_status_cd =
                         r2.result_status_cd
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]     ;008
                         .assays[a_cnt].prev_reference_range_factor_id  ;008
                         = pr2.reference_range_factor_id                ;008
                       reply->qual[q_cnt].container_serv_res[c_cnt]     ;008
                         .assays[a_cnt].prev_advanced_delta_id =        ;008
                         pr2.advanced_delta_id                          ;008
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_normal_cd =
                         pr2.normal_cd
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_qc_override_cd =
                         pr2.qc_override_cd
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_critical_cd =
                         pr2.critical_cd
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_review_cd =
                         pr2.review_cd
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_notify_cd =
                         pr2.notify_cd
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]     ;006
                         .assays[a_cnt].prev_linear_cd =                ;006
                         pr2.linear_cd                                  ;006
                       reply->qual[q_cnt].container_serv_res[c_cnt]     ;006
                         .assays[a_cnt].prev_feasible_cd =              ;006
                         pr2.feasible_cd                                ;006
                       reply->qual[q_cnt].container_serv_res[c_cnt]     ;006
                         .assays[a_cnt].prev_dilution_factor =          ;006
                         pr2.dilution_factor                            ;006
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_delta_cd =
                         pr2.delta_cd
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_result_type_cd =
                         pr2.result_type_cd
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_nomenclature_id =
                         pr2.nomenclature_id
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_equation_id =
                         pr2.equation_id
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_result_value_numeric =
                         pr2.result_value_numeric
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_numeric_raw_value =
                         pr2.numeric_raw_value
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_less_great_flag =
                         pr2.less_great_flag
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_result_value_alpha =
                         pr2.result_value_alpha
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_result_value_dt_tm =
                         pr2.result_value_dt_tm
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_long_text_id =
                         pr2.long_text_id
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_service_resource_cd=
                         pr2.service_resource_cd
                       if (lt2.long_text_id > 0.0)
                          reply->qual[q_cnt].container_serv_res[c_cnt]
                            .assays[a_cnt].prev_rtf_text = lt2.long_text
                       endif
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_ascii_text = pr2.ascii_text
                       reply->qual[q_cnt].container_serv_res[c_cnt]
                         .assays[a_cnt].prev_collected_dt_tm =
                         c2.drawn_dt_tm
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]     ;029
                         .assays[a_cnt].prev_resource_error_codes =     ;029
                         pr2.resource_error_codes                       ;029
 
                       reply->qual[q_cnt].container_serv_res[c_cnt]     ;008
                         .assays[a_cnt].prev_delta_chk_flag =           ;008
                         rrf2.delta_chk_flag                            ;008
                       if (ad2.advanced_delta_id >  0)                  ;008
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_low = ad2.delta_low ;008
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_high =              ;008
                          ad2.delta_high                                ;008
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_check_type_cd =     ;008
                          ad2.delta_check_type_cd                       ;008
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_minutes =           ;008
                          ad2.delta_minutes                             ;008
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_value =             ;008
                          ad2.delta_value                               ;008
                       elseif (rrf2.delta_chk_flag > 0)                 ;008
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_low = 0.0           ;008
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_high = 0.0          ;008
                          if(rrf1.delta_chk_flag>0)						  ;050
                          	reply->qual[q_cnt].container_serv_res[c_cnt]  ;008
                          	.assays[a_cnt].prev_delta_check_type_cd =     ;008
                          	rrf2.delta_check_type_cd				      ;008
                          else											  ;050
                         	reply->qual[q_cnt].container_serv_res[c_cnt]  ;050
                          	.assays[a_cnt].prev_delta_check_type_cd =     ;050
                          	0.00					                      ;050
                          endif											  ;050
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_minutes =           ;008
                          rrf2.delta_minutes                            ;008
                         reply->qual[q_cnt].container_serv_res[c_cnt]   ;008
                          .assays[a_cnt].prev_delta_value =             ;008
                          rrf2.delta_value                              ;008
                       endif                                            ;008
                    endif
                 endif
            endcase
 
         foot d3.seq
            reply->qual[q_cnt].container_serv_res[c_cnt].               ;010
               assays[a_cnt].next_repeat_nbr = next_repeat_nbr + 1      ;010
            if (r_cnt > 0)
               stat = alterlist(reply->qual[q_cnt].container_serv_res[c_cnt]
                 .assays[a_cnt].results, r_cnt)
            endif
 
         foot d2.seq
            row+0
 
         foot d1.seq
            row+0
 
         with
            nocounter,
            outerjoin = d3,
            outerjoin = d_dm,
            dontcare = dm,
            outerjoin = d_rg,                                          ;018
            dontcare = rg,                                             ;018
            outerjoin = d_r1,
            outerjoin = d_rc1,
            dontcare = rc1,
            maxread(rc1, 1),
            outerjoin = d_ar,
            outerjoin = d_r2
 
      /***********************************************************************
      * Check to see if a related assay has been defined for each task       *
      * assay.  If so, check each related assay for a more recent previous   *
      * result.                                                              *
      ***********************************************************************/
 
         for (q_cnt = 1 to max_q_cnt)                                   ;014
            for (c_cnt = 1 to reply->qual[q_cnt]                        ;014
                              ->container_serv_res_cnt)                 ;014
               for (a_cnt = 1 to reply->qual[q_cnt]                     ;014
                              ->container_serv_res[c_cnt]               ;014
                              ->assays_cnt)                             ;014
                  if (reply->qual[q_cnt]->container_serv_res[c_cnt]     ;014
                      ->assays[a_cnt]->rel_assay_ind = 1)               ;014
                     select into "nl:"                                  ;014
                        r.result_id,                                    ;014
                        pr.perform_result_id,                           ;014
                        lt.long_text_id,                                ;014
                        c.container_id,                                 ;014
                        rrf.reference_range_factor_id,                  ;014
                        ad.advanced_delta_id                            ;014
                     from                                               ;014
                        result r,                                       ;014
                        perform_result pr,                              ;014
                        long_text lt,                                   ;014
                        container c,                                    ;014
                        reference_range_factor rrf,                     ;014
                        advanced_delta ad                               ;014
                     plan r                                             ;014
                        where r.person_id = reply->person_id            ;014
                        and   r.task_assay_cd in                        ;014
                           (select task_assay_cd                        ;014
                            from related_assay                          ;014
                            where related_entity_id =                   ;014
                               (select related_entity_id                ;014
                                from related_assay                      ;014
                                where task_assay_cd =                   ;014
                                   reply->qual[q_cnt]                   ;014
                                   ->container_serv_res[c_cnt]          ;014
                                   ->assays[a_cnt]->task_assay_cd))     ;014
                        and r.result_status_cd in                       ;014
                               (result_status_verified_cd,              ;014
                                result_status_autoverified_cd,          ;014
                                result_status_corrected_cd)             ;014
                     join pr                                            ;014
                        where pr.result_id = r.result_id                ;014
                        and   pr.result_status_cd = r.result_status_cd  ;014
                     join lt                                            ;014
                        where lt.long_text_id = pr.long_text_id         ;014
                     join c                                             ;014
                        where c.container_id = pr.container_id          ;014
                     join rrf                                           ;014
                        where rrf.reference_range_factor_id =           ;014
                              pr.reference_range_factor_id              ;014
                     join ad                                            ;014
                        where ad.advanced_delta_id =                    ;014
                              pr.advanced_delta_id                      ;014
 
                     detail                                             ;014
                        if (cnvtdatetime(c.drawn_dt_tm) <               ;014
                            cnvtdatetime(reply->qual[q_cnt]             ;014
                            .container_serv_res[c_cnt].drawn_dt_tm))    ;014
                           if ((reply->qual[q_cnt]                      ;014
                                .container_serv_res[c_cnt]              ;014
                                .assays[a_cnt].prev_result_id <= 0.0)   ;014
                           or (reply->qual[q_cnt]                       ;014
                               .container_serv_res[c_cnt]               ;014
                               .assays[a_cnt].prev_result_id > 0.0      ;014
                              and cnvtdatetime(c.drawn_dt_tm) >         ;014
                               cnvtdatetime(reply->qual[q_cnt]          ;014
                               .container_serv_res[c_cnt]               ;014
                               .assays[a_cnt].prev_collected_dt_tm)))   ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_task_assay_cd =       ;014
                                 r.task_assay_cd                        ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_perform_result_id =   ;014
                                 pr.perform_result_id                   ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_result_id =           ;014
                                 r.result_id                            ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_result_status_cd =    ;014
                                 r.result_status_cd                     ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt]                            ;014
                              .prev_reference_range_factor_id =         ;014
                                 pr.reference_range_factor_id           ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_advanced_delta_id =   ;014
                                 pr.advanced_delta_id                   ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_normal_cd =           ;014
                                 pr.normal_cd                           ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_critical_cd =         ;014
                                 pr.critical_cd                         ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_review_cd =           ;014
                                 pr.review_cd                           ;014
                              reply->qual[q_cnt]
                              .container_serv_res[c_cnt]
                              .assays[a_cnt].prev_notify_cd =
                                 pr.notify_cd
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_linear_cd =           ;014
                                 pr.linear_cd                           ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_feasible_cd =         ;014
                                 pr.feasible_cd                         ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_dilution_factor =     ;014
                                 pr.dilution_factor                     ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_delta_cd =            ;014
                                 pr.delta_cd                            ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_result_type_cd =      ;014
                                 pr.result_type_cd                      ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_nomenclature_id =     ;014
                                 pr.nomenclature_id                     ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_equation_id =         ;014
                                 pr.equation_id                         ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_result_value_numeric = ;014
                                 pr.result_value_numeric                ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_numeric_raw_value =   ;014
                                 pr.numeric_raw_value                   ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_less_great_flag =     ;014
                                 pr.less_great_flag                     ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_result_value_alpha =  ;014
                                 pr.result_value_alpha                  ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_result_value_dt_tm =  ;014
                                 pr.result_value_dt_tm                  ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_long_text_id =        ;014
                                 pr.long_text_id                        ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_service_resource_cd = ;014
                                 pr.service_resource_cd                 ;014
                              if (lt.long_text_id > 0.0)                ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_rtf_text =         ;014
                                    lt.long_text                        ;014
                              endif                                     ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_ascii_text =          ;014
                                 pr.ascii_text                          ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_collected_dt_tm =     ;014
                                 c.drawn_dt_tm                          ;014
                              reply->qual[q_cnt]                        ;014
                              .container_serv_res[c_cnt]                ;014
                              .assays[a_cnt].prev_delta_chk_flag =      ;014
                                 rrf.delta_chk_flag                     ;014
                              if (ad.advanced_delta_id >  0)            ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_delta_low =        ;014
                                    ad.delta_low                        ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_delta_high =       ;014
                                    ad.delta_high                       ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt]                         ;014
                                 .prev_delta_check_type_cd =            ;014
                                    ad.delta_check_type_cd              ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_delta_minutes =    ;014
                                    ad.delta_minutes                    ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_delta_value =      ;014
                                    ad.delta_value                      ;014
                              elseif (rrf.delta_chk_flag > 0)           ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_delta_low = 0.0    ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_delta_high = 0.0   ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt]                         ;014
                                 .prev_delta_check_type_cd =            ;014
                                    rrf.delta_check_type_cd             ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_delta_minutes =    ;014
                                    rrf.delta_minutes                   ;014
                                 reply->qual[q_cnt]                     ;014
                                 .container_serv_res[c_cnt]             ;014
                                 .assays[a_cnt].prev_delta_value =      ;014
                                    rrf.delta_value                     ;014
                              endif                                     ;014
                           endif                                        ;014
                        endif                                           ;014
                     with nocounter                                     ;014
                  endif                                                 ;014
               endfor                                                   ;014
            endfor                                                      ;014
         endfor                                                         ;014
 
      /***********************************************************************
      * Select instrument assay_processing_r and assay_resource_translation  *
      * fields when an instrument service resource is passed in the request. *
      ***********************************************************************/
         if (max_q_cnt = 0
         or  max_c_cnt = 0
         or  max_a_cnt = 0)
            go to Resize_Reply
         endif
 
         if (request->instr_service_resource_cd = 0.0)
            go to Resize_Reply
         endif
 
         select into "nl:"
            d1.seq,
            d2.seq,
            d3.seq,
            apr.seq,
            art.seq
         from
            (dummyt d1 with seq = value(max_q_cnt)),
            (dummyt d2 with seq = value(max_c_cnt)),
            (dummyt d3 with seq = value(max_a_cnt)),
            assay_processing_r apr,
            assay_resource_translation art
 
         plan d1
         join d2  where d2.seq <= reply->qual[d1.seq].container_serv_res_cnt
         join d3  where d3.seq <=
                    reply->qual[d1.seq].container_serv_res[d2.seq].assays_cnt
         join apr where apr.service_resource_cd =
                          request->instr_service_resource_cd
                    and apr.task_assay_cd = reply->qual[d1.seq]
                          .container_serv_res[d2.seq]
                          .assays[d3.seq].task_assay_cd
         join art where art.task_assay_cd = apr.task_assay_cd
                    and art.service_resource_cd+0 = apr.service_resource_cd
                    and art.active_ind > 0
 
         head report
            q_cnt = 0
            c_cnt = 0
            a_cnt = 0
            i_cnt = 0
 
         head d1.seq
            q_cnt = d1.seq
 
         head d2.seq
            c_cnt = d2.seq
 
         head d3.seq
            a_cnt = d3.seq
            i_cnt = 0
 
         detail
            i_cnt = i_cnt + 1
            stat = alterlist(reply->qual[q_cnt].container_serv_res[c_cnt]
                    .assays[a_cnt].instr, i_cnt)
            reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
              .instr_cnt = i_cnt
            reply->qual[q_cnt].container_serv_res[c_cnt]
              .instr_service_resource_cd = apr.service_resource_cd
            reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
              .instr[i_cnt].upld_assay_alias = art.upld_assay_alias
            reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
              .instr[i_cnt].process_sequence = art.process_sequence
	    reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]   ;049
              .instr[i_cnt].decimal_movement_nbr = art.decimal_movement_nbr
            reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
              .instr[i_cnt].default_result_type_cd = apr.default_result_type_cd
            reply->qual[q_cnt].container_serv_res[c_cnt].assays[a_cnt]
              .instr[i_cnt].post_zero_result_ind = art.post_zero_result_ind
 
         with nocounter
 
      /***********************************************************************
      * Resize reply record                                                  *
      ***********************************************************************/
      #Resize_Reply
         if (GetResourceSecurityStatus(0) != "S")  ;034
            call PopulateResSecStatusBlock(0)  ;034
            set reply->status_data.status = GetResourceSecurityStatus(0)  ;034
         elseif (max_q_cnt > 0)
            set reply->status_data.status = "S"    ;Successful
         else
            set reply->status_data.status = "Z"    ;Zero
         endif
 
      #Exit_Script
         end
         go
 

;Generated by GNU enscript 1.6.4.
