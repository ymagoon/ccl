 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_wklst_ref_details/glb_get_wklst_ref_details.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1999 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:       glb_get_wklst_ref_details.prg
        Object name:            glb_get_wklst_ref_details
        Request #:              250184
 
        Product:                General Lab
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Load worklist reference detail (i.e
                                procedures, priorities, qc) information.
 
        Tables read:            accession,
                                worklist_ref_priority,
                                worklist_ref_procedure,
                                worklist_ref_qc,
                                resource_accession_r,
                                control_material,
                                worklist_ref
 
        Tables updated:         None
        Executing from:
 
        Special Notes:          None
******************************************************************************/
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 04/05/99 Hal Patchen          Initial Release                     *
;    *001 04/19/06 Shawn Clark          Added field to request and reply	  *
;                                       struct, modified select statements	*
;    *002 01/25/07 Paul Lessin          Get reference positions (moved from *
;    *                                  glb_get_wklst_ref).                 *
;    *002 02/23/07 Abraham Areguy       Added field to reply struct, and    *
;                                       modified select statements          *
;~DE~************************************************************************
 
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
             drop program GLB_GET_WKLST_REF_DETAILS:dba go
             create program GLB_GET_WKLST_REF_DETAILS:dba
 
      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  worklist_ref_id  = f8
         1	worklist_id      = f8
      )
      */
 
      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      if (validate(reply->procs_cnt, -1) = -1)
         record reply
         (
            1  procs_cnt               = i4
            1  procs[*]
               2  catalog_cd           = f8
               2  catalog_disp         = vc
               2  task_assay_cd        = f8
               2  task_assay_disp      = vc
            1  priorities_cnt          = i4
            1  priorities[*]
               2  priority_cd          = f8
               2  priority_disp        = vc
               2  priority_mean        = vc
            1  qc_cnt                  = i4
            1  qc[*]
               2  accession_id         = f8
               2  accession            = c20
               2  pos                  = i4
               2  begin_ind            = i2
               2  end_ind              = i2
               2  interval_ind         = i2
               2  interval             = i4
               2  short_description	   = vc
            1  pos_cnt                 = i4
            1  positions[*]
               2  numeric_position     = vc
               2  order_id             = f8
               2  accession_id         = f8
               2  person_accession_ind = i2
            1  ref_pos_cnt             = i4
            1  position_ref[*]
               2  numeric_position     = vc
               2  accession_id         = f8
               2  position_id          = f8
               2  accession            = vc
               2  short_description    = vc
               2  dilution_cd          = f8
               2  dilution_disp        = c40
               2  sequence_nbr         = i4
               2  position_disp        = vc
 
%i cclsource:status_block.inc
         )
      endif
 
      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
         declare proc_cnt                = i4
         declare prior_cnt               = i4
         declare qc_cnt                  = i4
		     declare worklist_cnt            = i4
         set reply->status_data.status   = "F"
 
      /***********************************************************************
      * Select position records
      ***********************************************************************/
			select into "nl:"
				ac_exists = evaluate(nullind(ac.accession_id), 0, 1, 0),
				cm_exists = evaluate(nullind(cm.control_id), 0, 1, 0)
			from
				worklist_ref_pos wrp
				,accession ac
				,resource_accession_r rar
				,control_material cm
			plan wrp
				where wrp.worklist_ref_id = request->worklist_ref_id
			join ac
				where ac.accession_id = outerjoin(wrp.accession_id)
			join rar
				where rar.accession_id = outerjoin(ac.accession_id)
			join cm
				where cm.control_id = outerjoin(rar.control_id)
			head report
				worklist_cnt = 0
			detail
				worklist_cnt = worklist_cnt + 1
				if (worklist_cnt > size(reply->position_ref,5))
					stat = alterlist(reply->position_ref, worklist_cnt + 20)
				endif
				reply->position_ref[worklist_cnt].position_id      = wrp.worklist_ref_pos_id
				reply->position_ref[worklist_cnt].dilution_cd      = wrp.dilution_cd
				reply->position_ref[worklist_cnt].sequence_nbr     = wrp.position_nbr
				reply->position_ref[worklist_cnt].position_disp    = wrp.position_display_txt
				reply->position_ref[worklist_cnt].numeric_position = wrp.numeric_position_txt
				if (ac_exists = 1)
        		reply->position_ref[worklist_cnt].accession_id = ac.accession_id
        		reply->position_ref[worklist_cnt].accession    = ac.accession
	      endif
        if (cm_exists = 1)
        	reply->position_ref[worklist_cnt].short_description = cm.short_description
        endif
			foot report
				reply->ref_pos_cnt = worklist_cnt
				stat = alterlist(reply->position_ref, worklist_cnt)
			with nocounter
 
			if (request->worklist_id > 0.0)
				select into "nl:"
 
				from
					worklist_pos_order_r wro
					,worklist_ref_pos wrp
				plan wro where wro.worklist_id = request->worklist_id
				join wrp where wrp.worklist_ref_pos_id = wro.worklist_ref_pos_id
				head report
					worklist_cnt = 0
					stat = alterlist(reply->positions,worklist_cnt + 20)
				detail
					worklist_cnt = worklist_cnt + 1
					if (worklist_cnt > size(reply->positions,5))
						stat = alterlist(reply->positions,worklist_cnt + 20)
					endif
					reply->positions[worklist_cnt].numeric_position = wrp.numeric_position_txt
					reply->positions[worklist_cnt].order_id			= wro.order_id
					reply->positions[worklist_cnt].accession_id = wro.accession_id
				    reply->positions[worklist_cnt].person_accession_ind = wro.person_accession_ind
				foot report
		      reply->pos_cnt = worklist_cnt
					stat = alterlist(reply->positions,worklist_cnt)
				with
					nocounter
			endif
 
      /***********************************************************************
      * Select worklist ref procedure records                                *
      ***********************************************************************/
         select into "nl:"
            wrp.seq
         from
            worklist_ref_procedure wrp
 
         plan wrp where wrp.worklist_ref_id = request->worklist_ref_id
 
         head report
            proc_cnt = 0
 
         detail
            proc_cnt = proc_cnt + 1
            stat = alterlist(reply->procs, proc_cnt)
            reply->procs_cnt = proc_cnt
            reply->procs[proc_cnt].catalog_cd = wrp.catalog_cd
            reply->procs[proc_cnt].task_assay_cd = wrp.task_assay_cd
 
         with
            nocounter
 
      /***********************************************************************
      * Select worklist ref priority records                                 *
      ***********************************************************************/
         select into "nl:"
            wrp.seq
         from
            worklist_ref_priority wrp
 
         plan wrp where wrp.worklist_ref_id = request->worklist_ref_id
 
         head report
            prior_cnt = 0
 
         detail
            prior_cnt = prior_cnt + 1
            stat = alterlist(reply->priorities, prior_cnt)
            reply->priorities_cnt = prior_cnt
            reply->priorities[prior_cnt].priority_cd = wrp.priority_cd
 
         with
            nocounter
 
      /***********************************************************************
      * Select worklist ref QC records                                       *
      ***********************************************************************/
         select into "nl:"
            wrq.seq
           ,a.seq
         from
            worklist_ref_qc wrq
           ,accession a
           ,resource_accession_r ra
           ,control_material cm
           ,worklist_ref wr
           ,(dummyt d1 with seq=  1)
 
         plan wrq where wrq.worklist_ref_id = request->worklist_ref_id
         join a   where a.accession_id = wrq.accession_id
         join wr  where wr.worklist_ref_id = wrq.worklist_ref_id
         join d1
         join ra  where ra.accession_id = a.accession_id
         join cm  where cm.control_id = ra.control_id
 
         head report
            qc_cnt = 0
 
         detail
            qc_cnt = qc_cnt + 1
            stat = alterlist(reply->qc, qc_cnt)
            reply->qc_cnt = qc_cnt
            reply->qc[qc_cnt].accession_id = wrq.accession_id
            reply->qc[qc_cnt].accession = a.accession
            reply->qc[qc_cnt].pos = wrq.pos
            reply->qc[qc_cnt].begin_ind = wrq.begin_ind
            reply->qc[qc_cnt].end_ind = wrq.end_ind
            reply->qc[qc_cnt].interval_ind = wrq.interval_ind
            reply->qc[qc_cnt].interval = wrq.interval
            reply->qc[qc_cnt].short_description = cm.short_description
 
         with
            nocounter, outerjoin=d1
 
      /***********************************************************************
      * Resize reply record                                                  *
      ***********************************************************************/
         if (proc_cnt > 0 or  prior_cnt > 0 or  qc_cnt > 0 or worklist_cnt > 0)
            set reply->status_data.status = "S"    ;Successful
         else
            set reply->status_data.status = "Z"    ;Zero
         endif
 
      #Exit_Script
         end
         go

;Generated by GNU enscript 1.6.4.
