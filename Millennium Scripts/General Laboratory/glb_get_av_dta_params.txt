 ;;Solution_Test/script/PathNet -- Gen Lab/glb_get_av_dta_params/glb_get_av_dta_params.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************
        Source file name:       GLB_GET_AV_DTA_PARAMS.PRG
        Object name:            GLB_GET_AV_DTA_PARAMS
        Request #:              250147
 
        Product:                General Lab/Quality Control
        Product Team:           GLB
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        Retrieves detail procedure information
                                for autoverification for a given testsite
 
        Tables read:            lab_instrument
                                autoverify
 
        Tables updated:         n/a
 
        Executing from:         PathNet General Lab:  DB Autoverify Build
 
        Special Notes:          n/a
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    * generated from GLB_GET_AV_PARAMS, new for REV 7.2                    *
;     ### 02/26/98 Chad Moats           Initial Release                     *
;     001 05/25/98 Chad Moats           Added repeat_map, consistent_map,   *
;                                       cons_nbr_hrs, and dest_codes logic  *
;     002 12/14/98 Chad Moats           Added result_type_cd to reply       *
;     003 12/18/98 Chad Moats           Added display_sequence to reply     *
;     004 03/27/00 Chris Heil           Only retrieve numeric, calc, and    *
;                                       alpha.                              *
;     005 04/05/00 Chris Heil           Retrieve from new delta_chk_flag    *
;     006 06/19/00 Chris Heil           Return data map.                    *
;     007 06/21/00 Chris Heil           Return new consistency params.      *
;     008 02/27/01 Gary Runde           Add fields for QC exemption changes *
;     009 01/08/02 Raj Mishra           Order by for each head              *
;     010 02/07/03 Ekta Agarwal		Fixed a "CrmPerform Failure on      *
;					  Request	250147 Error (32).  *
;     011 01/10/13 Amy Gum		Add Interps			    *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
      drop   program GLB_GET_AV_DTA_PARAMS:dba go
      create program GLB_GET_AV_DTA_PARAMS:dba
 
/********************************************************************/
/*  Request Record                                                  */
/********************************************************************/
/*
      record request
      (
         1 service_resource_cd            = f8
      )
*/
 
/********************************************************************/
/*  Reply Record                                                    */
/********************************************************************/
 
      record reply
      (
         1 procs[*]
           2 av_ref_id              = f8
 
           2 service_resource_cd    = f8
           2 service_resource_disp  = vc
           2 task_assay_cd          = f8
           2 task_assay_disp        = vc
           2 result_type_cd         = f8                        ;002
           2 result_type_disp       = vc                        ;002
           2 result_type_mean       = vc                        ;002
           2 display_sequence       = i4                        ;003
           2 max_digits             = i4
           2 min_digits             = i4
           2 min_decimal_places     = i4
 
           2 prev_verf_ind          = i2
           2 ref_range_ind          = i2
           2 rev_range_ind          = i2
           2 crit_range_ind         = i2
           2 lin_range_ind          = i2
           2 feas_range_ind         = i2
           2 delta_chk_flag         = i2                                                           ;005
           2 unverf_prev_rslt_ind   = i2
           2 dup_assay_ind          = i2
           2 instr_error_code_ind   = i2
           2 notify_range_ind       = i2
           2 repeat_map             = vc                        ;001
 
           ;values to return information for qc exemption logic   ;008
           2 validate_qc_schedule_ind = i2                        ;008
           2 qc_instr_error_code_ind  = i2                        ;008

           2 consistency_array[*]                                                                  ;007
              3 av_consistency_flag     = i2                                                       ;007
              3 consistency_ind         = i2                                                       ;007
              3 consistency_minutes     = i4                                                       ;007
              3 consistency_units_cd    = f8                                                       ;007
              3 consistency_units_disp  = vc                                                       ;007
              3 consistency_type_flag   = i2                                                       ;007
              3 consistency_variance    = f8
         1 order_flags[*]
           2 av_res_cat_id           = f8
           2 catalog_cd              = f8
           2 catalog_disp            = vc
           2 av_res_cat_flag         = i2
           2 assoc_catalog_cd        = f8
           2 assoc_catalog_disp      = vc
%i cclsource:status_block.inc
      )
 
/********************************************************************/
/*  Internal Records                                                */
/********************************************************************/
 
     record task_assay
     (
         1 task_assays[*]
           2 service_resource_cd   = f8
           2 task_assay_cd         = f8
     )
 
     record orderable
     (
         1 orderables[*]
           2 catalog_cd            = f8
     )
 
     #Script
      set stat = 0                                                                                 ;004

      set failed = "F"
      declare o_cnt     = i4 with protect, noconstant(0)
      declare p_cnt     = i4 with protect, noconstant(0)
      declare n         = i4 with protect, noconstant(0)

      set reply->status_data->status = "F"
      set sErrorMsg = FILLSTRING(255," ")    ;string containing error message
      set error_check = ERROR(sErrorMsg,1)   ;reset error queue to empty
 
      declare alp_result_type_cd = f8 with protect, noconstant(0.0)
      declare num_result_type_cd = f8 with protect, noconstant(0.0)
      declare calc_result_type_cd = f8 with protect, noconstant(0.0)
      declare interp_result_type_cd = f8 with protect, noconstant(0.0)
      declare serv_res_subsection_cd = f8 with protect, noconstant(0.0)
      
      declare RESULT_TYPE_CS = i4 with protect, constant(289)
      
      declare nFactor   = i4 with protect, noconstant(0)
      declare lStart    = i4 with protect, noconstant(1)
      
/********************************************************************/
/*  Retrieve code values for numeric, alpha, and calc result types. */
/********************************************************************/

      set alp_result_type_cd = uar_get_code_by("MEANING", RESULT_TYPE_CS, "2")
      set num_result_type_cd = uar_get_code_by("MEANING", RESULT_TYPE_CS, "3")
      set calc_result_type_cd = uar_get_code_by("MEANING", RESULT_TYPE_CS, "8")
      set interp_result_type_cd = uar_get_code_by("MEANING", RESULT_TYPE_CS, "4")
      set serv_res_subsection_cd = uar_get_code_by("MEANING", 223, "SUBSECTION")
 
/********************************************************************/
/*  Get autoverification flags from LAB_INSTRUMENT                  */
/********************************************************************/
 
         SELECT
          into  "nl:"
            a_exists = evaluate(nullind(a.av_ref_id), 0, 1, 0)
         FROM
            assay_processing_r apr,
            auto_verify a
         PLAN apr where
            apr.service_resource_cd = request->service_resource_cd and
            apr.default_result_type_cd in(num_result_type_cd, alp_result_type_cd, calc_result_type_cd, interp_result_type_cd) and
            apr.active_ind = 1
         JOIN a where
            a.service_resource_cd = outerjoin(apr.service_resource_cd) and
            a.task_assay_cd = outerjoin(apr.task_assay_cd) and
            a.active_ind = outerjoin(1)
         ORDER BY apr.display_sequence
         DETAIL
            p_cnt = p_cnt + 1
            if (mod(p_cnt, 10) = 1)
              stat = alterlist(reply->procs, p_cnt + 9)
            endif
            reply->procs[p_cnt].display_sequence = apr.display_sequence
            reply->procs[p_cnt].task_assay_cd = apr.task_assay_cd
            reply->procs[p_cnt].result_type_cd = apr.default_result_type_cd
            reply->procs[p_cnt].service_resource_cd  = apr.service_resource_cd
            if(a_exists = 1)
              reply->procs[p_cnt].av_ref_id            = a.av_ref_id
              reply->procs[p_cnt].prev_verf_ind        = a.prev_verf_ind
              reply->procs[p_cnt].ref_range_ind        = a.ref_range_ind
              reply->procs[p_cnt].rev_range_ind        = a.rev_range_ind
              reply->procs[p_cnt].crit_range_ind       = a.crit_range_ind
              reply->procs[p_cnt].lin_range_ind        = a.lin_range_ind
              reply->procs[p_cnt].feas_range_ind       = a.feas_range_ind
              reply->procs[p_cnt].delta_chk_flag       = a.delta_chk_flag                          ;005
              reply->procs[p_cnt].unverf_prev_rslt_ind = a.unverf_prev_rslt_ind
              reply->procs[p_cnt].dup_assay_ind        = a.dup_assay_ind
              reply->procs[p_cnt].instr_error_code_ind = a.instr_error_code_ind
              reply->procs[p_cnt].notify_range_ind     = a.notify_range_ind
              ;return the information for the qc exemption logic
              reply->procs[p_cnt].validate_qc_schedule_ind = a.validate_qc_schedule_ind
              reply->procs[p_cnt].qc_instr_error_code_ind  = a.qc_instr_error_code_ind
              reply->procs[p_cnt].repeat_map           = a.repeat_map
            else
              reply->procs[p_cnt].av_ref_id            = 0
              reply->procs[p_cnt].prev_verf_ind        = 1
              reply->procs[p_cnt].ref_range_ind        = 0
              reply->procs[p_cnt].rev_range_ind        = 0
              reply->procs[p_cnt].crit_range_ind       = 0
              reply->procs[p_cnt].lin_range_ind        = 0
              reply->procs[p_cnt].feas_range_ind       = 0
              reply->procs[p_cnt].delta_chk_flag       = 0                                         ;005
              reply->procs[p_cnt].unverf_prev_rslt_ind = 0
              reply->procs[p_cnt].dup_assay_ind        = 0
              reply->procs[p_cnt].notify_range_ind     = 0
              reply->procs[p_cnt].repeat_map           = ""
              ;return the information for the qc exemption logic    ;008
              reply->procs[p_cnt].validate_qc_schedule_ind = 0      ;008
              reply->procs[p_cnt].qc_instr_error_code_ind  = 0
            endif

         with nocounter
 
         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif
 
/********************************************************************/
/* Retrieve consistency parameters.                                 */
/********************************************************************/
        ; multiple factor for breaking up reply->procs into chunks of 50 for expand
        set nFactor = ceil(p_cnt / 50.0)
        ; grow array to ensure even integrals of 50
        set stat = alterlist(reply->procs, nFactor * 50)
      
        ; fill in added entities with last entity's data
        for(n = p_cnt + 1 to nFactor * 50)
          set reply->procs[n].av_ref_id = reply->procs[p_cnt].av_ref_id
        endfor

         SELECT into  "nl:"
            ref_id = ac.av_ref_id
         from
            av_consistency ac,
            (dummyt d with seq = value(nFactor))
         plan d where
            assign(lStart, (d.seq - 1) * 50 + 1)
         join ac where
            expand(n, lStart, lStart + 49, ac.av_ref_id, reply->procs[n].av_ref_id)
         order by
            ref_id
         head ref_id
            ac_cnt = 0
            n = locateval(n, lStart, lStart + 49, ref_id, reply->procs[n].av_ref_id)
         detail
            ac_cnt = ac_cnt + 1
            if (mod(ac_cnt, 5) = 1)
              stat = alterlist(reply->procs[n]->consistency_array, ac_cnt + 4)
            endif
            reply->procs[n]->consistency_array[ac_cnt]->av_consistency_flag = ac.av_consistency_flag
            reply->procs[n]->consistency_array[ac_cnt]->consistency_ind = ac.consistency_ind
            reply->procs[n]->consistency_array[ac_cnt]->consistency_minutes = ac.consistency_minutes
            reply->procs[n]->consistency_array[ac_cnt]->consistency_units_cd = ac.consistency_units_cd
            reply->procs[n]->consistency_array[ac_cnt]->consistency_type_flag = ac.consistency_type_flag
            reply->procs[n]->consistency_array[ac_cnt]->consistency_variance = ac.consistency_variance
         foot ref_id
            stat = alterlist(reply->procs[n]->consistency_array, ac_cnt)
         WITH nocounter
 
         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if (error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif
         ; size down reply->procs back to actual size
         set stat = alterlist(reply->procs, p_cnt)
 
/********************************************************************/
/* Get orderable level flags                                        */
/********************************************************************/
         SELECT into  "nl:"
         FROM
            av_res_cat arc
         WHERE
            arc.service_resource_cd = request->service_resource_cd and
            arc.active_ind = 1
         DETAIL
            o_cnt = o_cnt + 1
            if (mod(o_cnt,5) = 1)
              stat = alterlist(reply->order_flags, o_cnt + 4)
            endif
            reply->order_flags[o_cnt].av_res_cat_id = arc.av_res_cat_id
            reply->order_flags[o_cnt].catalog_cd = arc.catalog_cd
            reply->order_flags[o_cnt].av_res_cat_flag = arc.av_res_cat_flag
            reply->order_flags[o_cnt].assoc_catalog_cd = arc.assoc_catalog_cd
         WITH nocounter
 
         set error_check = ERROR(sErrorMsg,0)   ;get error message
         if(error_check != 0)
           set reply->status_data->status = "F"
           set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg
           go to exit_script
         endif
 
/********************************************************************/
/* Retrieve data maps.                                              */
/********************************************************************/

    if(value(p_cnt) > 0)
       select into "nl:"
          rg_exists = evaluate(nullind(rg.parent_service_resource_cd), 0, 1, 0),
          serv_res = dm.service_resource_cd
       from
          (dummyt d with seq = value(p_cnt)),
          data_map dm,
          resource_group rg
       plan d
       join dm where
          dm.task_assay_cd = reply->procs[d.seq].task_assay_cd and
          dm.data_map_type_flag = 0 and
          dm.active_ind = 1
       join rg where
          rg.parent_service_resource_cd = outerjoin(dm.service_resource_cd) and
          rg.child_service_resource_cd = outerjoin(request->service_resource_cd) and
          rg.resource_group_type_cd = outerjoin(serv_res_subsection_cd) and
          rg.root_service_resource_cd = outerjoin(0.0)
       order d.seq

       head d.seq
          data_map_level = 0
       detail
         ;* Check for exact match on data map
         if (data_map_level < 3 and serv_res > 0.0 and serv_res = request->service_resource_cd)
            data_map_level = 3
            reply->procs[d.seq].max_digits = dm.max_digits
            reply->procs[d.seq].min_digits = dm.min_digits
            reply->procs[d.seq].min_decimal_places = dm.min_decimal_places
         endif
         ;* Check for subsection level data map
         if (data_map_level < 2 and serv_res > 0.0 and rg_exists = 1)
            data_map_level = 2
            reply->procs[d.seq].max_digits = dm.max_digits
            reply->procs[d.seq].min_digits = dm.min_digits
            reply->procs[d.seq].min_decimal_places = dm.min_decimal_places
         endif
         ;* Check for default all resources level data map
         if (data_map_level = 0 and serv_res = 0.0)
            data_map_level = 1
            reply->procs[d.seq].max_digits = dm.max_digits
            reply->procs[d.seq].min_digits = dm.min_digits
            reply->procs[d.seq].min_decimal_places = dm.min_decimal_places
         endif
       with nocounter
      Endif
 
      go to exit_script
 
/********************************************************************/
/* Executed if requested description is not found.                  */
/********************************************************************/
     #no_task_assays
      set reply->status_data->subeventstatus[1]->operationname =
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "S"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "assay_processing_r table"
      set failed = "T"
      go to exit_script
 
/********************************************************************/
/* Executed if requested description is not found.                  */
/********************************************************************/
     #no_lab_instrument
      set reply->status_data->subeventstatus[1]->operationname =
         "get"
      set reply->status_data->subeventstatus[1]->operationstatus =
         "S"
      set reply->status_data->subeventstatus[1]->targetobjectname =
         "table"
      set reply->status_data->subeventstatus[1]->targetObjectValue =
         "lab_instrument table"
      set failed = "T"
      go to exit_script
 
/********************************************************************/
/* Script exit.                                                     */
/********************************************************************/
     #exit_script
      if (failed = "F")
         set reply->status_data->status = "S"
         set stat = alterlist(reply->procs, p_cnt)
         set stat = alterlist(reply->order_flags, o_cnt)
      else
         set reply->status_data->status = "Z"
      endif
END GO

;Generated by GNU enscript 1.6.4.
