 ;;Solution_Test/script/PathNet -- BB Transfusion/bb_rpt_recd_products/bb_rpt_recd_products.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2006 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bb_rpt_recd_products.prg
        Object name:            bb_rpt_recd_products
        Request #:              225677

        Product:                Blood Bank
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            Rev 8.0

        Program purpose:        

        Tables read:            PRODUCT_EVENT
                                QUARANTINE
                                QUARANTINE_RELEASE
                                BLOOD_PRODUCT
                                PRODUCT

        Tables updated:         NONE
        
        Executing from:         Report Selection

        Special Notes:          NONE

;~DB~****************************************************************************************
;*                      GENERATED MODIFICATION CONTROL LOG                                  *
;********************************************************************************************
;*                                                                                          *
;*Mod Date     Engineer             ITN     Feature      Comment                            *
;*--- -------- -------------------- ------- ------------ -----------------------------------*
;*000 1/26/05  Tom Brecht            0120161 65948        Initial Release                   *
;*001 1/09/09  Amy Gum               0135050 186158       Add Pooled ABO/RHs to report      *
;*002 4/29/10  Archita s	     0144446 251384	  Add code to print the pooled ABORH*
;							  to report without truncation      *		
;~DE~****************************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ***********************************/

drop program bb_rpt_recd_products:dba go
create program bb_rpt_recd_products:dba


/*****************************************************************************/
/* Request record                                                            */
/*****************************************************************************/
/*
record request
(
  1 beg_dt_tm           = dq8;                  ; DAY[], MONTH[], YEAR[]
  1 end_dt_tm           = dq8;                  ; DAY[], MONTH[], YEAR[]
  1 batch_selection     = c100;
  1 output_dist         = c100;
  1 ops_date            = dq8;
  1 cur_owner_area_cd   = f8;                   ; OWN[]
  1 cur_inv_area_cd     = f8;                   ; INV[]
  1 address_location_cd = f8;                   ; LOC[]
  1 null_ind            = i2;                   ; NULLRPT[]
)
*/


/*****************************************************************************/
/* Reply record                                                              */
/*****************************************************************************/
record reply
(
  1 rpt_list[*]
    2 rpt_filename  = vc     
%i cclsource:status_block.inc
)

%i cclsource:pcs_subevent.inc
%i cclsource:bbt_ops_parm_passed.inc

/*****************************************************************************/
/* Variable declarations                                                     */
/*****************************************************************************/
set modify predeclare

declare SCRIPT_NAME         = c20  with protect, constant("bb_rpt_recd_products")
declare RECD_CD             = f8   with protect, constant(uar_get_code_by("MEANING",1610,"13"))
declare BLOOD_CD            = f8   with protect, constant(uar_get_code_by("MEANING",1606,"BLOOD"))
declare DERIV_CD            = f8   with protect, constant(uar_get_code_by("MEANING",1606,"DERIVATIVE"))

declare A_POS_CD            = f8   with constant(UAR_GET_CODE_BY("MEANING", 1640, "APOS"))
declare O_POS_CD            = f8   with constant(UAR_GET_CODE_BY("MEANING", 1640, "OPOS"))
declare B_POS_CD            = f8   with constant(UAR_GET_CODE_BY("MEANING", 1640, "BPOS"))
declare AB_POS_CD           = f8   with constant(UAR_GET_CODE_BY("MEANING", 1640, "ABPOS"))
declare A_NEG_CD            = f8   with constant(UAR_GET_CODE_BY("MEANING", 1640, "ANEG"))
declare O_NEG_CD            = f8   with constant(UAR_GET_CODE_BY("MEANING", 1640, "ONEG"))
declare B_NEG_CD            = f8   with constant(UAR_GET_CODE_BY("MEANING", 1640, "BNEG"))
declare AB_NEG_CD           = f8   with constant(UAR_GET_CODE_BY("MEANING", 1640, "ABNEG"))

declare A_POOL_CD            = f8   with protect, constant(UAR_GET_CODE_BY("MEANING", 1640, "APOOLRH"))
declare O_POOL_CD            = f8   with protect, constant(UAR_GET_CODE_BY("MEANING", 1640, "OPOOLRH"))
declare B_POOL_CD            = f8   with protect, constant(UAR_GET_CODE_BY("MEANING", 1640, "BPOOLRH"))
declare AB_POOL_CD           = f8   with protect, constant(UAR_GET_CODE_BY("MEANING", 1640, "ABPOOLRH"))
declare POOL_NEG_CD            = f8   with protect, constant(UAR_GET_CODE_BY("MEANING", 1640, "POOLABONEG"))
declare POOL_POS_CD            = f8   with protect, constant(UAR_GET_CODE_BY("MEANING", 1640, "POOLABOPOS"))
declare POOL_POOL_CD            = f8   with protect, constant(UAR_GET_CODE_BY("MEANING", 1640, "POOLABOPLRH"))
declare POOL_ABO_CD           = f8   with protect, constant(UAR_GET_CODE_BY("MEANING", 1640, "POOLABO"))

declare LINE8               = c8   with protect, constant(fillstring(8, "-"))
declare LINE17              = c17  with protect, constant(fillstring(17, "-"))
declare LINE22              = c22  with protect, constant(fillstring(22, "-"))
declare LINE93              = c93  with protect, constant(fillstring(93, "-"))
declare LINE131             = c131 with protect, constant(fillstring(131, "-"))

declare i18nHandle          = i4   with protect, noconstant(0)
declare num                 = i4   with protect, noconstant(0)
declare count               = i4   with protect, noconstant(0)
declare index               = i4   with protect, noconstant(0)
declare errmsg              = c132 with protect, noconstant(fillstring(132," "))
declare error_check         = i2   with protect, noconstant(error(errmsg,1))
declare stat                = i4   with protect, noconstant(0)

record totals
(
  1 qual[*]
    2 product_type      = vc
    2 total_reg_cnt     = i4
    2 total_pool_cnt    = i4
    2 aborhs[*]
      3 count           = i4
      3 pooled_ind      = i2
)

record aborh
(
  1 qual[*]
    2 aborh_cd   = f8
    2 abo_cd     = f8
    2 rh_cd      = f8
    2 aborh_disp = c10
    2 abo_disp   = c10
    2 rh_disp    = c10
    2 pooled_ind = i2
)
/*****************************************************************************/
/* Internationalization                                                      */
/*****************************************************************************/
%i cclsource:i18n_uar.inc

set stat = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)

record captions
(
  1 as_of_date          = vc
  1 beg_date            = vc
  1 end_date            = vc
  1 rpt_owner           = vc
  1 rpt_all             = vc
  1 rpt_inv_area        = vc
  1 rpt_recv_date       = vc
  1 rpt_prod_nbr        = vc
  1 rpt_aborh           = vc
  1 rpt_expire          = vc
  1 rpt_date_time       = vc
  1 rpt_prod_totals     = vc
  1 rpt_total           = vc
  1 rpt_tot_prods       = vc
  1 rpt_title           = vc
  1 rpt_page            = vc
  1 rpt_time            = vc
  1 head_products       = vc
  1 rpt_qnty            = vc
  1 rpt_intl            = vc
  1 rpt_units           = vc
  1 end_of_report       = vc
  1 interface           = vc
  1 receipt             = vc
  1 yes   				= vc
  1 no					= vc

)

set captions->as_of_date = uar_i18ngetmessage(i18nHandle,
  "as_of_date", "As Of Date:")
set captions->rpt_title = uar_i18ngetmessage(i18nHandle,
  "rpt_title", "SUMMARY OF PRODUCTS RECEIVED")
set captions->rpt_page = uar_i18ngetmessage(i18nHandle,
  "rpt_page", "Page:")
set captions->rpt_time = uar_i18ngetmessage(i18nHandle,
  "rpt_time", "Time:")
set captions->beg_date = uar_i18ngetmessage(i18nHandle,
  "beg_date", "Beginning Date:")
set captions->end_date = uar_i18ngetmessage(i18nHandle,
  "end_date", "Ending Date:")  
set captions->rpt_owner = uar_i18ngetmessage(i18nHandle,
  "rpt_owner", "Blood Bank Owner:")
set captions->rpt_inv_area = uar_i18ngetmessage(i18nHandle,
  "rpt_inv_area", "Inventory Area:")
set captions->rpt_recv_date = uar_i18ngetmessage(i18nHandle,
  "rpt_recv_date", "Receive Date")
set captions->rpt_prod_nbr = uar_i18ngetmessage(i18nHandle,
  "rpt_prod_nbr", "Product Number")
set captions->rpt_aborh = uar_i18ngetmessage(i18nHandle,
  "rpt_aborh", "ABO/Rh")
set captions->rpt_expire = uar_i18ngetmessage(i18nHandle,
  "rpt_expire", "Expiration")
set captions->rpt_date_time = uar_i18ngetmessage(i18nHandle,
  "rpt_date_time", "Date and Time")
set captions->rpt_prod_totals = uar_i18ngetmessage(i18nHandle,
  "rpt_prod_totals", "Product Totals")
set captions->rpt_total = uar_i18ngetmessage(i18nHandle,
  "rpt_total", "TOTAL")
set captions->rpt_tot_prods = uar_i18ngetmessage(i18nHandle,
  "rpt_tot_prods", "Total Products")
set captions->rpt_all = uar_i18ngetmessage(i18nHandle,
  "rpt_all", "(All)") 
set captions->rpt_qnty = uar_i18ngetmessage(i18nHandle,
  "rpt_qnty", "Quantity")
set captions->rpt_intl = uar_i18ngetmessage(i18nHandle,
  "rpt_intl", "International")
set captions->rpt_units = uar_i18ngetmessage(i18nHandle,
  "rpt_units", "Units")
set captions->head_products = uar_i18ngetmessage(i18nHandle,
  "head_products", "Product")
set captions->end_of_report = uar_i18ngetmessage(i18nHandle,
  "end_of_report", "*** End of Report ***")
set captions->interface = uar_i18ngetmessage(i18nHandle,
  "interface", "Interface")
set captions->receipt = uar_i18ngetmessage(i18nHandle,
  "receipt", "Receipt")  
set captions->yes = uar_i18ngetmessage(i18nHandle,
  "yes", "YES")
set captions->no = uar_i18ngetmessage(i18nHandle,
  "no", "NO")
  
/*****************************************************************************/
/* Script                                                                    */
/*****************************************************************************/
set reply->status_data->status = "Z"

set count = size(aborh->qual, 5)
if(A_POS_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = A_POS_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(A_POS_CD) )
endif
set count = size(aborh->qual, 5)
if(O_POS_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = O_POS_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(O_POS_CD) )
endif
set count = size(aborh->qual, 5)
if(B_POS_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = B_POS_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(B_POS_CD) )
endif
set count = size(aborh->qual, 5)
if(AB_POS_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = AB_POS_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(AB_POS_CD) )
endif
set count = size(aborh->qual, 5)
if(A_NEG_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = A_NEG_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(A_NEG_CD) )
endif
if(O_NEG_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = O_NEG_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(O_NEG_CD) )
endif
if(B_NEG_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = B_NEG_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(B_NEG_CD) )
endif
if(AB_NEG_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = AB_NEG_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(AB_NEG_CD) )
endif

if(A_POOL_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = A_POOL_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(A_POOL_CD) )
    set aborh->qual[count].pooled_ind = 1
endif
if(O_POOL_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = O_POOL_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(O_POOL_CD) )
    set aborh->qual[count].pooled_ind = 1
endif
if(B_POOL_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = B_POOL_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(B_POOL_CD) )
    set aborh->qual[count].pooled_ind = 1
endif
if(AB_POOL_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = AB_POOL_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(AB_POOL_CD) )
    set aborh->qual[count].pooled_ind = 1
endif
if(POOL_NEG_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = POOL_NEG_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(POOL_NEG_CD) )
    set aborh->qual[count].pooled_ind = 1
endif
if(POOL_POS_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = POOL_POS_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(POOL_POS_CD) )
    set aborh->qual[count].pooled_ind = 1
endif
if(POOL_POOL_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = POOL_POOL_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(POOL_POOL_CD) )
    set aborh->qual[count].pooled_ind = 1
endif
if(POOL_ABO_CD != 0.0)
    set count = count + 1
    set stat = alterlist(aborh->qual, count)
    set aborh->qual[count].aborh_cd = POOL_ABO_CD
    set aborh->qual[count].aborh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(POOL_ABO_CD) )
    set aborh->qual[count].pooled_ind = 1
endif

select c.code_value
from code_value_extension c
where expand(index, 1, size(aborh->qual, 5), c.code_value, aborh->qual[index].aborh_cd)
  and c.field_name in ("ABOOnly_cd", "RhOnly_cd")
detail
    pos = locateval(index, 1, size(aborh->qual, 5), c.code_value, aborh->qual[index].aborh_cd)
    if( c.field_name = "ABOOnly_cd" )
        aborh->qual[pos].abo_cd = cnvtreal(c.field_value)
    else
        aborh->qual[pos].rh_cd = cnvtreal(c.field_value)
    endif
with  nocounter

for (i = 1 to size(aborh->qual, 5))
    set aborh->qual[i].abo_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(aborh->qual[i].abo_cd) )
    set aborh->qual[i].rh_disp = substring( 1, 10, UAR_GET_CODE_DISPLAY(aborh->qual[i].rh_cd) )
endfor


;* Check for CCL errors.
set error_check = error(errmsg,0)
if (error_check != 0)
    set reply->status_data.status = "F"
    call subevent_add ("Select abo and rh code values.", "F", "bb_rpt_recd_products.prg", errmsg)
    go to EXIT_SCRIPT
endif

if( size(aborh->qual, 5) = 0 or curqual = 0 )
    set reply->status_data.status = "F"
    call subevent_add ("bb_rpt_recd_products.prg", "F", "uar_get_code_by",
        "Unable to retrieve the code_values for the abo and rh codes.")
    go to EXIT_SCRIPT
endif

if( RECD_CD = 0.0 or BLOOD_CD = 0.0 or DERIV_CD = 0.0 )
    set reply->status_data.status = "F"
    call subevent_add ("bb_rpt_recd_products.prg", "F", "uar_get_code_by",
        "Unable to retrieve the code_values for the cdf_meanings in code_sets 1606 and 1610.")
    go to EXIT_SCRIPT
endif

set modify nopredeclare
; Check for batch selection parameters
if (size(trim(request->batch_selection)) > 0)
    set begday = request->ops_date
    set endday = request->ops_date
    set temp_string = cnvtupper(trim(request->batch_selection))
    CALL CHECK_OPT_DATE_PASSED(SCRIPT_NAME)
    if (reply->status_data->status != "F")
        set request->beg_dt_tm = begday
        set request->end_dt_tm = endday
    endif    
    call CHECK_OWNER_CD (SCRIPT_NAME)
    call CHECK_INVENTORY_CD (SCRIPT_NAME)
    call CHECK_LOCATION_CD (SCRIPT_NAME)
    call CHECK_NULL_REPORT(SCRIPT_NAME)
endif

%i cclsource:bbt_get_location_info.inc

set modify predeclare

set reply->status_data->status = "F"; Set here to allow batch parameters to be checked

; Generate a unique filename for the report
execute cpm_create_file_name_logical "bb_reced_prods", "txt", "x"

select 
    if (request->null_ind = 1)
        with nullreport, compress, nolandscape
    else
        with nocounter, compress, nolandscape
    endif
    
into cpm_cfn_info->file_name_logical
    recd_date = cnvtdate(pe.event_dt_tm),
    p_product_disp = substring(1, 22, uar_get_code_display( p.product_cd )),
    p_owner_area = uar_get_code_display( p.cur_owner_area_cd ),
    p_inv_area = uar_get_code_display( p.cur_inv_area_cd ),
    prod_number = substring(1, 22, concat(trim(b.supplier_prefix), trim(p.product_nbr), " ", trim(p.product_sub_nbr))),
    aborh = substring(1, 22, concat(trim(uar_get_code_display(b.cur_abo_cd)), " ",trim(uar_get_code_display(b.cur_rh_cd))))
from
    product_event  pe,
    receipt  r,
    product  p,
    blood_product  b
    
plan pe where  pe.event_type_cd = RECD_CD
          and  pe.event_dt_tm between cnvtdatetime( request->beg_dt_tm )
                                  and cnvtdatetime( request->end_dt_tm )
          and  pe.active_ind = 0
join r where  r.product_event_id =   pe.product_event_id
join p where  p.product_id =   r.product_id
         and  ((request->cur_owner_area_cd != 0.0 and p.cur_owner_area_cd = request->cur_owner_area_cd)
           or  (request->cur_owner_area_cd = 0.0))
         and  ((request->cur_inv_area_cd != 0.0 and p.cur_inv_area_cd = request->cur_inv_area_cd)
           or  (request->cur_inv_area_cd = 0.0))
join b where  b.product_id =   outerjoin(p.product_id)

order by
    p.cur_owner_area_cd,
    p.cur_inv_area_cd,
    recd_date,
    p_product_disp,
    aborh

head report
    first_page = 1
    last_page = 0
    new_sum_page = 0
    print_pool_headers = 0
    owner_last = fillstring(25, " ")
    inv_last = fillstring(25, " ")
    
head page
    row 0
    call center(captions->rpt_title, 0, 125)
    col 110, captions->rpt_time
    col 122, curtime
    row + 1
    col 110, captions->as_of_date
    col 122, curdate "@DATECONDENSED;;d"
    SAVE_ROW = row
%i cclsource:bbt_print_location_info.inc 
    if( SAVE_ROW > row )
        row SAVE_ROW
    endif
    row + 1
    col 30, captions->beg_date
    col 46, request->beg_dt_tm "@DATETIMECONDENSED;;d"
    col 72, captions->end_date
    col 85, request->end_dt_tm "@DATETIMECONDENSED;;d"
    row + 2
    if( last_page != 1 and new_sum_page != 1 and print_pool_headers != 1 )
        col 0, captions->rpt_owner
        col 18, p_owner_area
        row + 1
        col 0, captions->rpt_inv_area
        col 18, p_inv_area
        row + 2
        col 0, captions->rpt_recv_date
        col 60, captions->rpt_intl
        col 97, captions->rpt_expire
        col 117, captions->interface
        row + 1
        col 0, captions->head_products
        col 25, captions->rpt_prod_nbr
        col 50, captions->rpt_qnty
        col 60, captions->rpt_units
        col 75, captions->rpt_aborh
        col 97, captions->rpt_date_time
        col 117, captions->receipt
        row + 1
        col 0, LINE22
        col 25, LINE22
        col 50, LINE8
        col 60, LINE8
        col 75, LINE17
        col 97, LINE17
        col 117, LINE8
        row + 1
    else
        col 0, captions->rpt_owner
        col 18, owner_last
        row + 1
        col 0, captions->rpt_inv_area
        col 18, inv_last
        row + 2
    endif
    
head p.cur_owner_area_cd
    if( first_page != 1 )
        first_page = 1
        break
    endif  
    owner_last = p_owner_area

    
head p.cur_inv_area_cd
    if( first_page = 1 )
        first_page = 0
    else
        break
    endif
    ;Set count variables and indicators to zero
    for( x = 1 to size(totals->qual, 5) )
        for( y = 1 to size(totals->qual[x].aborhs, 5) )
            totals->qual[x].aborhs[y].count = 0
            totals->qual[x].aborhs[y].pooled_ind = 0
        endfor
        totals->qual[x].total_reg_cnt = 0
        totals->qual[x].total_pool_cnt = 0
    endfor    
    pool_prods_found_ind = 0
    inv_last = p_inv_area
    
head recd_date
    if( row > 55 )
        break
    endif
    col 0, recd_date "@SHORTDATE;;d"
    row + 1
    
head p_product_disp
    if( row > 56 )
        break
    endif
    num_recs = size(totals->qual, 5)
    pos = locateval(num, 1, num_recs, p_product_disp, totals->qual[num].product_type)
    if( pos = 0 and p.product_class_cd = BLOOD_CD )
         stat = alterlist(totals->qual, num_recs + 1)
         pos = num_recs + 1
         totals->qual[pos].product_type = p_product_disp
         stat = alterlist(totals->qual[pos].aborhs, size(aborh->qual, 5))
    endif
    
detail
    if( row > 56 )
        break
    endif
    col 3, p_product_disp
    col 25, prod_number
    if( p.product_class_cd = BLOOD_CD )
        col 75, aborh
        num_recs = size(totals->qual, 5)
        p_pos = locateval(index, 1, num_recs, p_product_disp, totals->qual[index].product_type)
        num_recs = size(aborh->qual, 5)
        
        ;look for the blood product's abo in the aborh structure
        a_pos = locateval(index, 1, num_recs, b.cur_abo_cd, aborh->qual[index].abo_cd)
        if(a_pos > 0)
            ;look for the correct rh for the product while keeping the correct abo
            while((aborh->qual[a_pos].rh_cd != b.cur_rh_cd ) AND (aborh->qual[a_pos].abo_cd = b.cur_abo_cd )
                AND (a_pos < num_recs) AND (a_pos > 0))
                start_pos = a_pos + 1
                a_pos = locateval(index, start_pos, num_recs, b.cur_abo_cd, aborh->qual[index].abo_cd)
            endwhile      
            ;count the product
            if(aborh->qual[a_pos].rh_cd = b.cur_rh_cd ) 
                totals->qual[p_pos].aborhs[a_pos].count = totals->qual[p_pos].aborhs[a_pos].count + 1
                if(aborh->qual[a_pos].pooled_ind = 0)
                    totals->qual[p_pos].total_reg_cnt = totals->qual[p_pos].total_reg_cnt + 1
                    totals->qual[p_pos].aborhs[a_pos].pooled_ind = 0
                else
                    totals->qual[p_pos].total_pool_cnt = totals->qual[p_pos].total_pool_cnt + 1
                    totals->qual[p_pos].aborhs[a_pos].pooled_ind = 1                    
                    pool_prods_found_ind = 1
                endif
            endif
        endif
       
   
    elseif( p.product_class_cd = DERIV_CD )
        out_str = cnvtstring(r.orig_rcvd_qty)
        col 53, out_str
        out_str = cnvtstring(r.orig_intl_units)
        col 63, out_str
    endif
    col 97, p.cur_expire_dt_tm "@SHORTDATETIME;;d"
   
    IF (r.electronic_receipt_ind = 1)
    	COL 120, captions->yes
    ELSE;IF (r.electronic_receipt_ind = 0)
        COL 120, captions->no
    ENDIF
    row + 1
  
foot p_product_disp
    row + 0
            
foot recd_date  
    row + 1
    
foot p.cur_inv_area_cd
    tot_prods = 0
    for( i = 0 to size(totals->qual, 5) )
        if( (totals->qual[i].total_reg_cnt > 0) or  (totals->qual[i].total_pool_cnt > 0))
            tot_prods = tot_prods + 1
        endif
    endfor
    if( row + tot_prods > 44 )
        last_page = 1
        owner_last = p_owner_area
        inv_last = p_inv_area
        break
    endif

    if( last_page != 1 )
        row + 1
        col 0, LINE93
        row + 2
    else
        last_page = 0
    endif
    if( size(totals->qual, 5) > 0 )
        new_sum_page = 1  
        ;Loop through all products and print summary for regular aborhs      
        for( x = 1 to size(totals->qual, 5) )
            if( row > 54 )
                new_sum_page = 1
                break
            endif
            if( new_sum_page = 1 )
                ;print regular aborh headers
                col 0, captions->rpt_prod_totals
                column = 25
                for( i = 1 to size(aborh->qual, 5) )
                    if(aborh->qual[i].pooled_ind = 0) 
                        col column, aborh->qual[i].aborh_disp
                        column = column + 10
                    endif
                endfor
                col column, captions->rpt_total
                row + 1
                col 0, LINE22
                column = 25
                for( i = 1 to size(aborh->qual, 5) )
                    if(aborh->qual[i].pooled_ind = 0) 
                        col column, LINE8
                        column = column + 10
                    endif
                endfor
                col column, LINE8
                row + 1
                total = 0
                new_sum_page = 0 
            endif
            if( totals->qual[x].total_reg_cnt > 0 )
                ;print line for product with regular aborh counts
                col 0, totals->qual[x].product_type
                column = 28
                for( y = 1 to size(aborh->qual, 5) )
                    if(aborh->qual[y].pooled_ind = 0) 
                        if( totals->qual[x].aborhs[y].count > 0 )
                            string = cnvtstring(totals->qual[x].aborhs[y].count)
                            col column, string
                        endif
                        column = column + 10
                    endif
                endfor
                string = cnvtstring(totals->qual[x].total_reg_cnt)
                col column, string
                total = total + totals->qual[x].total_reg_cnt 
                row + 1
            endif
        endfor
        col 90, LINE22
        row + 1
        string = cnvtstring(total)
        col 90, captions->rpt_tot_prods
        col 108, string
        row + 2
        
        if(pool_prods_found_ind = 1)
            Print_pool_headers = 1
            for( x = 1 to size(totals->qual, 5) )
            ;Loop through all products and print summary for pooled aborhs  
                if( row > 50 )
                    Print_pool_headers = 1
                    break
                endif
                if( Print_pool_headers = 1 )
                ;print pool aborh headers, due to the length of the 
                ;aborh disp, the abo and rh are on two lines
                    col 0, captions->rpt_prod_totals
                    column = 25
                    for( j = 1 to size(aborh->qual, 5) )
                        if(aborh->qual[j].pooled_ind = 1) 
                            col column, aborh->qual[j].abo_disp
                            column = column + 11
                        endif
                    endfor
                    row + 1
                    column = 25
                    for( j = 1 to size(aborh->qual, 5) )
                        if(aborh->qual[j].pooled_ind = 1) 
                            col column, aborh->qual[j].rh_disp
                            column = column + 11
                        endif
                    endfor
                    col column, captions->rpt_total
                    row + 1
                    col 0, LINE22
                    column = 25
                    for( i = 1 to size(aborh->qual, 5) )
                        if(aborh->qual[i].pooled_ind = 1) 
                            col column, LINE8
                            column = column + 11
                        endif
                    endfor
                    col column, LINE8
                    row + 1
                    total = 0
                    Print_pool_headers = 0 
                endif
                if( totals->qual[x].total_pool_cnt > 0 )
                    col 0, totals->qual[x].product_type
                    column = 28
                    ;print line for product with pool aborh counts
                    for( y = 1 to size(aborh->qual, 5) )
                        if(aborh->qual[y].pooled_ind = 1) 
                            if( totals->qual[x].aborhs[y].count > 0 )
                                string = cnvtstring(totals->qual[x].aborhs[y].count)
                                col column, string
                            endif
                            column = column + 11
                        endif
                    endfor
                    string = cnvtstring(totals->qual[x].total_pool_cnt)
                    col column, string
                    total = total + totals->qual[x].total_pool_cnt 
                    row + 1
                endif
            endfor
            col 98, LINE22
            row + 1
            string = cnvtstring(total)
            col 98, captions->rpt_tot_prods
            col 116, string
            row + 2
            
        endif
        
    endif

foot p.cur_owner_area_cd
    row + 0
        
foot page
    row 57
    col 0, LINE131
    row + 1
    col 0, cpm_cfn_info->file_name
    col 113, captions->rpt_page
    col 120, curpage ";l"
    row + 1
        
foot report 
    row 59  
    call center(captions->end_of_report, 1, 125)

;* Check for CCL errors.
set error_check = error(errmsg,0)
if (error_check != 0)
    set reply->status_data.status = "F"
    call subevent_add ("Select received products.", "F", "bb_rpt_recd_products.prg", errmsg)
    go to EXIT_SCRIPT
endif

/*****************************************************************************/
/* Status set and exit script                                                */
/*****************************************************************************/
#SET_STATUS
if ( curqual = 0 )
   set reply->status_data->status = "Z"
else
   set reply->status_data->status = "S"
endif

if( request->null_ind = 1 or reply->status_data->status = "S" )
    set stat = alterlist(reply->rpt_list, 1)
    set reply->rpt_list[1].rpt_filename = cpm_cfn_info->file_name_path
    if(size(request->batch_selection, 1) > 0)
        call echo(request->output_dist)
        if(CHECKQUEUE(request->output_dist) = 1)
            set spool value(reply->rpt_list[1].rpt_filename) value(request->output_dist)
        endif
    endif
endif

#EXIT_SCRIPT

free set aborh
free set totals
free set captions
set modify nopredeclare

end
go



;Generated by GNU enscript 1.6.4.
