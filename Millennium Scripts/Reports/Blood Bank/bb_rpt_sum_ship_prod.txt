 ;;Solution_Test/script/PathNet -- BB Transfusion/bb_rpt_sum_ship_prod/bb_rpt_sum_ship_prod.prg Turn on black mode

/*~BB~**********************************************************************
  *                                                                        *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &          *
  *                              Technology, Inc.                          *
  *       Revision      (c) 1984-1995 Cerner Corporation                   *
  *                                                                        *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.           *
  *  This material contains the valuable properties and trade secrets of   *
  *  Cerner Corporation of Kansas City, Missouri, United States of         *
  *  America (Cerner), embodying substantial creative efforts and          *
  *  confidential information, ideas and expressions, no part of which     *
  *  may be reproduced or transmitted in any form or by any means, or      *
  *  retained in any storage or retrieval system without the express       *
  *  written permission of Cerner.                                         *
  *                                                                        *
  *  Cerner is a registered mark of Cerner Corporation.                    *
  *                                                                        *
  ~BE~**********************************************************************/
/***************************************************************************
 
        Source file name:       bb_rpt_sum_ship_prod.prg
        Object name:            bb_rpt_sum_ship_prod
        Request #:              225654
 
        Product:                Blood Bank Transfusion
        Product Team:           Pathnet
        HNA Version:            500
        CCL Version:            8.3.1
 
        Program purpose:        Report of blood total_products and/or derivatives
                                that are in a state of "shipped",
                                "transferred", or "in-transit".
 
        Tables read:            product_event, prsnl, product, location,
                                location_group, blood_product, derivative,
                                bb_ship_event, bb_shipment,
                                bb_inventory_transfer.
 
        Tables updated:         None
 
        Executing from:         Reportselection.exe
 
        Special Notes:          None
****************************************************************************/
;~DB~***********************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG             *
;    ***********************************************************************
;    *                                                                     *
;    *Mod Date     Engineer             Comment                            *
;    *--- -------- -------------------- -----------------------------------*
;    *001 05/18/06 David Fifer          Initial Release                    *
;    *002 03/29/07 Tom Brecht           Corrected Org/Inv Area issue       *
;~DE~***********************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  *******************
 
drop program bb_rpt_sum_ship_prod:dba go
create program bb_rpt_sum_ship_prod:dba
 
/***************************************************************************
*                              Request record                              *
****************************************************************************/
 
	/*
	record request
	(
		1  beg_dt_tm			= dq8
		1  end_dt_tm			= dq8
		1  organization_id		= f8
		1  cur_owner_area_cd	= f8
		1  cur_inv_area_cd		= f8
		1  address_location_cd	= f8
		1  ops_date				= dq8
		1  null_ind				= i2
		1  batch_selection		= vc100
		1  output_dist			= vc100
	)
	*/
 
/***************************************************************************
*                               Reply record                               *
****************************************************************************/
 
	record reply
	(
		1 rpt_list[*]
			2 rpt_filename	= vc
%i cclsource:status_block.inc
	)
 
/***************************************************************************
*                          Total_products record                           *
****************************************************************************/
 
    free set total_products
	record total_products
	(
		1 qual[*]
          2 username						= vc
          2 shipped_cnt						= i2
          2 event_dt_tm						= dq8
          2 event_type_cd					= f8
          2 intransit_cnt					= i2
          2 inv_area_disp					= c21
          2 product_sub_nbr					= c5
          2 owner_area_disp					= c21
          2 product_display					= c20
          2 transferred_cnt					= i2
          2 courier_display					= c20
          2 prod_nbr_display				= c21
          2 event_date_display				= c11
          2 organization_display			= c21
          2 product_state_display			= c11
          2 product_aborh_display			= c15
          2 inventory_area_display			= c21
          2 transfer_owner_area_display		= c21
		  2 transfer_inventory_area_display	= c21
		  2 transferred_qty					= i4
	)
 
/***************************************************************************
*                           Total_summary record                           *
****************************************************************************/
 
    free set total_summary
	record total_summary
	(
		1 qual[*]
		  2 shipped_cnt		= i2
		  2 intransit_cnt	= i2
		  2 transferred_cnt	= i2
		  2 product_display	= c20
	)
 
/***************************************************************************
*                          Detail_products record                          *
****************************************************************************/
 
    free set detail_products
    record detail_products
    (
		1 qual[*]
		  2 event_dt_tm				= dq8
		  2 event_date_display		= c11
		  2 date_qual[*]
		    3 shipped_cnt			= i2
		    3 intransit_cnt			= i2
		    3 transferred_cnt		= i2
		    3 product_display		= c20
		    3 product_state_display	= c11
    )
 
/***************************************************************************
*                          Detail_summary record                           *
****************************************************************************/
 
    free set detail_summary
	record detail_summary
	(
		1 qual[*]
		  2 event_dt_tm			= dq8
		  2 event_date_display	= c11
		  2 date_qual[*]
		    3 shipped_cnt		= i2
		    3 intransit_cnt		= i2
		    3 transferred_cnt	= i2
		    3 product_display	= c20
	)
 
/***************************************************************************
*                             Location record                              *
****************************************************************************/
 
	free set location
	record location
	(
		1 qual[*]
		  2 owner_area_cd		= f8
		  2 inventory_area_cd	= f8
	)
 
/***************************************************************************
*                              Captions record                             *
****************************************************************************/
 
    record captions
    (
		1 time				= vc
		1 aborh				= vc
		1 total				= vc
		1 shipped			= vc
		1 courier			= vc
		1 tech_id			= vc
		1 summary			= vc
		1 page_no			= vc
		1 beg_date			= vc
		1 end_date			= vc
		1 bb_owner			= vc
		1 report_id			= vc
		1 intransit			= vc
		1 as_of_date		= vc
		1 bb_inv_area       = vc
		1 transferred		= vc
		1 report_title		= vc
		1 product_type		= vc
		1 end_of_report		= vc
		1 product_state		= vc
		1 product_number	= vc
		1 bb_transfer_org	= vc
		1 bb_receiving_org	= vc
		1 bb_inventory_area	= vc
		1 quantity			= vc
	)
 
/***************************************************************************
*                           Initialize variables                           *
****************************************************************************/
 
declare nStat					= i2 with protect, noconstant(0)
declare nPassed					= i2 with protect, noconstant(0)
declare nProdCnt				= i2 with protect, noconstant(0)
declare nListCnt				= i2 with protect, noconstant(0)
declare nDateCnt				= i2 with protect, noconstant(0)
declare sEndDate				= c8 with protect, noconstant(fillstring(8, ""))
declare sEndTime				= c5 with protect, noconstant(fillstring(5, ""))
declare nQualCnt				= i2 with protect, noconstant(0)
declare sFillChar				= c1 with protect, noconstant(fillstring(1, ""))
declare sFillLine				= vc with protect, constant(fillstring(130, "_"))
declare nMaxSumRow				= i2 with protect, constant(57)
declare nPageBreak				= i2 with protect, noconstant(0)
declare nDetailCnt				= i2 with protect, noconstant(0)
declare nFirstTime				= i2 with protect, noconstant(0)
declare nReportCnt				= i2 with protect, noconstant(0)
declare nShippedCnt				= i2 with protect, noconstant(0)
declare li18nHandle				= i4 with persistscript
declare nProdDispCnt			= i2 with protect, noconstant(0)
declare nProdQualCnt			= i2 with protect, noconstant(0)
declare dBBInvAreaCd			= f8 with protect, noconstant(0.0)
declare nInTransitCnt			= i2 with protect, noconstant(0)
declare nTotalQualCnt			= i2 with protect, noconstant(0)
declare dBBOwnerRootCd			= f8 with protect, noconstant(0.0)
declare nTransferredCnt			= i2 with protect, noconstant(0)
declare sShippedCDFMean			= c2 with protect, constant("15")
declare sPrevInvAreaDisp		= c21 with protect, noconstant(fillstring(21, ""))
declare sInTransitCDFMean		= c2 with protect, constant("25")
declare sPrevOwnerAreaDisp		= c21 with protect, noconstant(fillstring(21, ""))
declare dShippedEventTypeCd		= f8 with protect, noconstant(0.0)
declare sTransferredCDFMean		= c1 with protect, constant("6")
declare dInTransitEventTypeCd	= f8 with protect, noconstant(0.0)
declare dTransferredEventTypeCd	= f8 with protect, noconstant(0.0)
 
/***************************************************************************
*                           Internationalization                           *
****************************************************************************/
%i cclsource:i18n_uar.inc
call uar_i18nlocalizationinit(li18nHandle, curprog, "", curcclrev)
 
/***************************************************************************
*                             Populate captions                            *
****************************************************************************/
 
set captions->time = uar_i18ngetmessage(li18nHandle,
	"time", "Time:")
set captions->aborh = uar_i18ngetmessage(li18nHandle,
	"aborh", "ABO/RH or")
set captions->total = uar_i18ngetmessage(li18nHandle,
	"total", "Total")
set captions->shipped = uar_i18ngetmessage(li18nHandle,
    "shipped", "Shipped")
set captions->courier = uar_i18ngetmessage(li18nHandle,
	"courier", "Courier")
set captions->tech_id = uar_i18ngetmessage(li18nHandle,
	"tech_id", "Tech Id")
set captions->summary = uar_i18ngetmessage(li18nHandle,
    "summary", "Summary")
set captions->page_no = uar_i18ngetmessage(li18nHandle,
	"page_no", "Page:")
set captions->beg_date = uar_i18ngetmessage(li18nHandle,
	"beg_date", "Beginning Date:")
set captions->end_date = uar_i18ngetmessage(li18nHandle,
	"end_date", "Ending Date:")
set captions->bb_owner = uar_i18ngetmessage(li18nHandle,
	"bb_owner", "Blood Bank Owner:")
set captions->report_id = uar_i18ngetmessage(li18nHandle,
	"report_id", "BB_RPT_SUM_SHIP")
set captions->intransit = uar_i18ngetmessage(li18nHandle,
    "intransit", "In-transit")
set captions->as_of_date = uar_i18ngetmessage(li18nHandle,
	"as_of_date", "As of Date:")
set captions->transferred = uar_i18ngetmessage(li18nHandle,
    "transferred", "Transferred")
set captions->report_title = uar_i18ngetmessage(li18nHandle,
	"report_title",
	"SUMMARY OF SHIPPED AND TRANSFERRED PRODUCTS")
set captions->product_type = uar_i18ngetmessage(li18nHandle,
	"product_type", "Product")
set captions->end_of_report = uar_i18ngetmessage(li18nHandle,
	"end_of_report", "* * * End of Report * * *")
set	captions->product_state = uar_i18ngetmessage(li18nHandle,
	"product_state", "State")
set captions->product_number = uar_i18ngetmessage(li18nHandle,
	"product_number", "Product Number")
set captions->bb_transfer_org = uar_i18ngetmessage(li18nHandle,
	"bb_transfer_org", "Transferred to Organization")
set captions->bb_receiving_org = uar_i18ngetmessage(li18nHandle,
	"bb_receiving_org", "Receiving Organization")
set	captions->bb_inventory_area = uar_i18ngetmessage(li18nHandle,
	"bb_inventory_area", "Inventory Area:")
set captions->bb_inv_area = uar_i18ngetmessage(li18nHandle,
	"bb_inventory_area", "Inventory Area")
set captions->quantity = uar_i18ngetmessage(li18nHandle,
	"quantity", "Quantity")
 
/***************************************************************************
* Script                                                                   *
****************************************************************************/
 
;Process values in the request->batch_selection field when running from operations.
%i cclsource:bbt_ops_parm_passed.inc

set stat = uar_get_meaning_by_codeset(222, "BBOWNERROOT", 1, dBBOwnerRootCd)
set stat = uar_get_meaning_by_codeset(222, "BBINVAREA", 1, dBBInvAreaCd)
 
if (size(trim(request->batch_selection),1) > 0)
 	set begday = request->ops_date
	set endday = request->ops_date
 	set temp_string = cnvtupper(trim(request->batch_selection))
	call CHECK_OPT_DATE_PASSED("bb_rpt_sum_ship_prod")
	if (reply->status_data->status != "F")
		set request->beg_dt_tm = begday
        set request->end_dt_tm = endday
	endif

    call CHECK_BB_ORGANIZATION("bb_rpt_sum_ship_prod")
	call CHECK_OWNER_CD ("bb_rpt_sum_ship_prod")
	call CHECK_INVENTORY_CD ("bb_rpt_sum_ship_prod")
	call CHECK_LOCATION_CD ("bb_rpt_sum_ship_prod")
	call CHECK_NULL_REPORT("bb_rpt_sum_ship_prod")
endif

;Has to be after the batch_selection processing.
%i cclsource:bbt_get_location_info.inc
%i cclsource:bbt_get_code_value.inc
 
;Get the event type codes for the qualifying states.
set dShippedEventTypeCd = GET_CODE_VALUE(1610, sShippedCDFMean)
set dInTransitEventTypeCd = GET_CODE_VALUE(1610, sInTransitCDFMean)
set dTransferredEventTypeCd = GET_CODE_VALUE(1610, sTransferredCDFMean)
 
;Default the status to failed.
set reply->status_data->status = "F"
 
execute cpm_create_file_name_logical "bb_rpt_sum_ship", "txt", "x"
 
;This select will retrieve the location info for the owner and inventory areas.
select
     ;Get the specific owner and inventory area info.
     if ((request->cur_owner_area_cd > 0.0) and (request->cur_inv_area_cd > 0.0))
     	plan l
     	  where l.location_cd in (request->cur_owner_area_cd, request->cur_inv_area_cd)
     	    and l.active_ind = 1
     	join lg
     	  where lg.child_loc_cd = l.location_cd
     	    and lg.active_ind = 1
     	
     ;Get all inventory areas for this specific owner area.
     elseif (request->cur_owner_area_cd > 0.0)
     	plan l
  		  where l.location_cd = request->cur_owner_area_cd
            and l.active_ind = 1
       join lg
         where lg.parent_loc_cd = l.location_cd
           and l.active_ind = 1
       
     ;Get all owner areas for this specific inventory area.
     elseif (request->cur_inv_area_cd > 0.0)
     	plan l
     	  where l.location_cd = request->cur_inv_area_cd
     	    and l.active_ind = 1
     	join lg
     	  where lg.child_loc_cd = l.location_cd
     	    and lg.active_ind = 1
     	
     ;Get everything for this specific org.
     elseif (request->organization_id > 0.0)
        plan l
          where l.organization_id = request->organization_id
            and l.active_ind = 1
        join lg
          where lg.child_loc_cd = l.location_cd
            and lg.active_ind = 1
        
     ;Get all owner and inventory areas.
     else
     	plan l
     	  where l.location_type_cd in (dBBOwnerRootCd, dBBInvAreaCd)
     	    and l.active_ind = 1
     	join lg
     	  where lg.child_loc_cd = l.location_cd
     	    and lg.active_ind = 1
     	
     endif

into "nl:"
from
    location l,
    location_group lg

head report
     nStat = alterlist(location->qual, 10)
 
detail
	 nDetailCnt = nDetailCnt + 1
     if (mod(nDetailCnt, 10) = 1 and nDetailCnt != 1)
         nStat = alterlist(location->qual, nDetailCnt + 9)
     endif
     location->qual[nDetailCnt].owner_area_cd = lg.parent_loc_cd
     location->qual[nDetailCnt].inventory_area_cd = lg.child_loc_cd
 
foot report
     nStat = alterlist(location->qual, nDetailCnt)
with nocounter

if (nDetailCnt = 0)
    set reply->status_data->status = "Z"
    go to EXIT_SCRIPT
endif
   
;This select populates the total_products record structure.
select into "nl:"
    d1.seq,
    pe.product_id,
    bp.supplier_prefix,
    pr.product_nbr "###############",
    pr.product_sub_nbr "#####",
    bse_exists = evaluate(nullind(bse.product_event_id), 0, 1, 0),
    bit_exists = evaluate(nullind(bit.product_event_id), 0, 1, 0),
    product_display = decode(pr.seq, substring(1, 20, uar_get_code_display(pr.product_cd)), " "),
    product_display_key = cnvtupper(substring(1,20,uar_get_code_display(pr.product_cd))),
    product_state_display = decode(pe.seq, substring(1, 11, uar_get_code_display(pe.event_type_cd)), " "),
    product_state_key = cnvtupper(substring(1, 11, uar_get_code_display(pe.event_type_cd))),
    event_date_display = substring(1, 11, format(pe.event_dt_tm, "YYYY/MM/DD;;D")),
    abo = decode(bp.seq, uar_get_code_display(bp.cur_abo_cd), " "),
    rh = decode(bp.seq, uar_get_code_display(bp.cur_rh_cd), " "),
    inventory_area_display = decode(bs.seq, substring(1, 21, uar_get_code_display(bs.inventory_area_cd)), " "),
    organization_display = decode(bs.seq, substring(1, 21, o.org_name), " "),
    courier_display = decode(bs.seq, substring(1, 20, uar_get_code_display(bs.courier_cd)), " "),
    transfer_owner_area_display = decode(bit.seq, substring(1, 21, uar_get_code_display(bit.to_owner_area_cd)), " "),
    transfer_inventory_area_display = decode(bit.seq, substring(1, 21, uar_get_code_display(bit.to_inv_area_cd)), " "),
    transferred_qty = decode(bit.seq, bit.transferred_qty, -1)
from
	(dummyt d1 with seq = value(nDetailCnt)),
	product_event pe,
    prsnl prs,
    product pr,
    blood_product bp,
    derivative de,
    bb_ship_event bse,
    bb_shipment bs,
    bb_inventory_transfer bit,
    organization o
 
plan d1
join pe
   where (pe.event_dt_tm between cnvtdatetime(request->beg_dt_tm)
     and  cnvtdatetime(request->end_dt_tm))
     and  pe.event_type_cd in (dShippedEventTypeCd, dInTransitEventTypeCd, dTransferredEventTypeCd)
     and  pe.product_event_id+0 > 0.0
join prs
   where prs.person_id = pe.event_prsnl_id
join pr
   where pr.product_id = pe.product_id
     and pr.product_id > 0.0
     and pr.active_ind = 1
join bp
   where bp.product_id = outerjoin(pr.product_id)
     and bp.active_ind = outerjoin(1)
join de
   where de.product_id = outerjoin(pr.product_id)
join bse
   where bse.product_event_id = outerjoin(pe.product_event_id)
     and bse.from_owner_area_cd = outerjoin(location->qual[d1.seq].owner_area_cd)
     and bse.from_inventory_area_cd = outerjoin(location->qual[d1.seq].inventory_area_cd)
join bs
   where bs.shipment_id = outerjoin(bse.shipment_id)
     and bs.active_ind = outerjoin(1)
join bit
   where bit.product_event_id = outerjoin(pe.product_event_id)
     and bit.from_owner_area_cd = outerjoin(location->qual[d1.seq].owner_area_cd)
     and bit.from_inv_area_cd = outerjoin(location->qual[d1.seq].inventory_area_cd)
join o 
   where o.organization_id = outerjoin(bs.organization_id)
 
order by
     event_date_display,
     product_state_key,
     product_display_key
 
head report
     nDateCnt = 0
     nProdQualCnt = 0
 
head page
     row + 0
 
head event_date_display
     nProdCnt = 0
     nDateCnt = nDateCnt + 1
     nStat = alterlist(detail_products->qual, nDateCnt)
 
head product_state_key
	 row + 0
 
head product_display_key
     nShippedCnt = 0
     nInTransitCnt = 0
     nTransferredCnt = 0
 
detail
     if ((bse_exists = 1) or (bit_exists = 1))
    	nProdQualCnt = nProdQualCnt + 1
     	nProdCnt = nProdCnt + 1
     	if (nProdCnt > size(detail_products->qual[nDateCnt].date_qual, 5))
     		stat = alterlist(detail_products->qual[nDateCnt].date_qual, nProdCnt + 10)
     	endif
     	if (nProdQualCnt > size(total_products->qual, 5))
     		stat = alterlist(total_products->qual, nProdQualCnt + 10)
     	endif
     	total_products->qual[nProdQualCnt].owner_area_disp = uar_get_code_display(location->qual[d1.seq].owner_area_cd)
     	total_products->qual[nProdQualCnt].inv_area_disp = uar_get_code_display(location->qual[d1.seq].inventory_area_cd)
     	total_products->qual[nProdQualCnt].event_dt_tm = pe.event_dt_tm
     	total_products->qual[nProdQualCnt].event_date_display = event_date_display
     	total_products->qual[nProdQualCnt].event_type_cd = pe.event_type_cd
     	total_products->qual[nProdQualCnt].product_display = product_display
     	if (pe.event_type_cd = dInTransitEventTypeCd)
         	total_products->qual[nProdQualCnt].intransit_cnt = nInTransitCnt + 1
     	 	detail_products->qual[nDateCnt].date_qual[nProdCnt].intransit_cnt = total_products->qual[nProdQualCnt].intransit_cnt
     	 	nInTransitCnt = nInTransitCnt + 1
     	elseif (pe.event_type_cd = dShippedEventTypeCd)
         	total_products->qual[nProdQualCnt].shipped_cnt = nShippedCnt + 1
     	 	detail_products->qual[nDateCnt].date_qual[nProdCnt].shipped_cnt = total_products->qual[nProdQualCnt].shipped_cnt
     	 	nShippedCnt = nShippedCnt + 1
     	elseif (pe.event_type_cd = dTransferredEventTypeCd)
     	 	total_products->qual[nProdQualCnt].transferred_cnt = nTransferredCnt + 1
     	 	detail_products->qual[nDateCnt].date_qual[nProdCnt].transferred_cnt =
     	 	                                                                  total_products->qual[nProdQualCnt].transferred_cnt
     	 	nTransferredCnt = nTransferredCnt + 1
    	endif
     	detail_products->qual[nDateCnt].event_dt_tm = pe.event_dt_tm
     	detail_products->qual[nDateCnt].event_date_display = event_date_display
     	detail_products->qual[nDateCnt].date_qual[nProdCnt].product_display = product_display
      	detail_products->qual[nDateCnt].date_qual[nProdCnt].product_state_display = product_state_display     	
     	total_products->qual[nProdQualCnt].product_state_display = product_state_display
     	total_products->qual[nProdQualCnt].product_display = product_display
     	total_products->qual[nProdQualCnt].prod_nbr_display = concat(trim(bp.supplier_prefix), trim(pr.product_nbr))
     	total_products->qual[nProdQualCnt].product_sub_nbr = pr.product_sub_nbr
     	total_products->qual[nProdQualCnt].product_aborh_display = concat(trim(abo), " ", trim(rh))
     	total_products->qual[nProdQualCnt].transferred_qty = transferred_qty
     	if ((pe.event_type_cd = dShippedEventTypeCd) or (pe.event_type_cd = dInTransitEventTypeCd))
         	if (size(trim(organization_display), 1) != 0)
    	     	total_products->qual[nProdQualCnt].organization_display = organization_display
     	 	elseif (size(trim(inventory_area_display), 1) != 0)
     		 	total_products->qual[nProdQualCnt].inventory_area_display = inventory_area_display
     	 	endif
     	else
         	if (size(trim(transfer_owner_area_display), 1) != 0)
     	     	total_products->qual[nProdQualCnt].transfer_owner_area_display = transfer_owner_area_display
    	 	elseif (size(trim(transfer_inventory_area_display), 1) != 0)
     	     	total_products->qual[nProdQualCnt].transfer_inventory_area_display = transfer_inventory_area_display
     	 	endif
     	endif
     	total_products->qual[nProdQualCnt].courier_display = courier_display
     	total_products->qual[nProdQualCnt].username = prs.username
     endif
 
foot product_display_key
     row + 0
 
foot product_state_key
     row + 0
 
foot event_date_display
     if (size(detail_products->qual[nDateCnt].date_qual, 5) = 0)
     	stat = alterlist(detail_products->qual, nDateCnt - 1, nDateCnt - 1)
     	nDateCnt = nDateCnt - 1
     else
     	stat = alterlist(detail_products->qual[nDateCnt].date_qual, nProdCnt)
     endif
 
foot page
     row + 0
 
foot report
     nStat = alterlist(total_products->qual, nProdQualCnt)
 
with nocounter
 
;This select sorts the total_products list in alphabetical order.
select into "nl:"
    d1.seq,
    prod_disp_key = cnvtupper(total_products->qual[d1.seq].product_display),
    state_disp_key = cnvtupper(total_products->qual[d1.seq].product_state_display),
    date_display = total_products->qual[d1.seq].event_date_display
 
from
   (dummyt d1 with seq = value(nProdQualCnt))
plan d1
   where d1.seq <= size(total_products->qual, 5)
 
order
    prod_disp_key,
    state_disp_key,
    date_display
 
head report
     nProdDispCnt = 0
	 nStat = alterlist(total_summary->qual, 10)
 
head prod_disp_key
     nShippedCnt = 0
     nIntransitCnt = 0
     nTransferredCnt = 0
	 nProdDispCnt = nProdDispCnt + 1
	 if (mod(nProdDispCnt, 10) = 1 and nProdDispCnt != 1)
	     nStat = alterlist(total_summary->qual, nProdDispCnt + 9)
	 endif
     total_summary->qual[nProdDispCnt].product_display = total_products->qual[d1.seq].product_display
 
head state_disp_key
     row + 0
 
head date_display
     row + 0
 
detail
     nIntransitCnt = total_products->qual[d1.seq].intransit_cnt
     nShippedCnt = total_products->qual[d1.seq].shipped_cnt
     nTransferredCnt = total_products->qual[d1.seq].transferred_cnt
 
foot date_display
     total_summary->qual[nProdDispCnt].intransit_cnt = total_summary->qual[nProdDispCnt].intransit_cnt + nIntransitCnt
     total_summary->qual[nProdDispCnt].shipped_cnt = total_summary->qual[nProdDispCnt].shipped_cnt + nShippedCnt
     total_summary->qual[nProdDispCnt].transferred_cnt = total_summary->qual[nProdDispCnt].transferred_cnt + nTransferredCnt
 
foot state_disp_key
     row + 0
 
foot prod_disp_key
     row + 0
 
foot report
     nStat = alterlist(total_summary->qual, nProdDispCnt)
 
with nocounter
 
;This select sorts the detail_products list in alphabetical order.
select into "nl:"
    d1.seq,
    d2.seq,
    prod_disp_key = cnvtupper(detail_products->qual[d1.seq].date_qual[d2.seq].product_display),
    state_disp_key = cnvtupper(detail_products->qual[d1.seq].date_qual[d2.seq].product_state_display),
    date_display = detail_products->qual[d1.seq].event_date_display
 
from
   (dummyt d1 with seq = value(nDateCnt)),
   (dummyt d2 with seq = value(nProdQualCnt))
plan d1
   where d1.seq <= size(detail_products->qual, 5)
join d2
   where d2.seq <= size(detail_products->qual[d1.seq].date_qual, 5)
 
order
    date_display,
    prod_disp_key,
    state_disp_key
 
head report
     nQualCnt = 0
	 nStat = alterlist(detail_summary->qual, 10)
 
head date_display
     nProdCnt = 0
     nQualCnt = nQualCnt + 1
     if (nQualCnt < 11)
	 	nStat = alterlist(detail_summary->qual[nQualCnt].date_qual, 10)
	 endif
     if (mod(nQualCnt, 10) = 1 and nQualCnt != 1)
        nStat = alterlist(detail_summary->qual, nQualCnt + 9)
     endif
     detail_summary->qual[nQualCnt].event_dt_tm = detail_products->qual[d1.seq].event_dt_tm
     detail_summary->qual[nQualCnt].event_date_display = date_display
 
head prod_disp_key
     nShippedCnt = 0
     nIntransitCnt = 0
     nTransferredCnt = 0
	 nProdCnt = nProdCnt + 1
     if (nProdCnt < 11)
     	nStat = alterlist(detail_summary->qual[nQualCnt].date_qual, 10)
     endif
     if (mod(nProdCnt, 10) = 1 and nProdCnt != 1)
     	nStat = alterlist(detail_summary->qual[nQualCnt].date_qual, nProdCnt + 9)
     endif
     detail_summary->qual[nQualCnt].date_qual[nProdCnt].product_display =
                                                            detail_products->qual[d1.seq].date_qual[d2.seq].product_display
head state_disp_key
     row + 0
 
detail
     nIntransitCnt = detail_products->qual[d1.seq].date_qual[d2.seq].intransit_cnt
     nShippedCnt = detail_products->qual[d1.seq].date_qual[d2.seq].shipped_cnt
     nTransferredCnt = detail_products->qual[d1.seq].date_qual[d2.seq].transferred_cnt
 
foot state_disp_key
     detail_summary->qual[nQualCnt].date_qual[nProdCnt].intransit_cnt =
                                       detail_summary->qual[nQualCnt].date_qual[nProdCnt].intransit_cnt + nIntransitCnt
     detail_summary->qual[nQualCnt].date_qual[nProdCnt].shipped_cnt =
                                       detail_summary->qual[nQualCnt].date_qual[nProdCnt].shipped_cnt + nShippedCnt
     detail_summary->qual[nQualCnt].date_qual[nProdCnt].transferred_cnt =
                                       detail_summary->qual[nQualCnt].date_qual[nProdCnt].transferred_cnt + nTransferredCnt
 
foot prod_disp_key
     nStat = alterlist(detail_summary->qual[nQualCnt].date_qual, nProdCnt)
 
foot date_display
     row + 0
 
foot report
     nStat = alterlist(detail_summary->qual, nQualCnt)
 
with nocounter
 
;This select fills out the report.
select into cpm_cfn_info->file_name_logical
   d1.seq,
   date_display = cnvtupper(total_products->qual[d1.seq].event_date_display),
   owner_area_disp = cnvtupper(total_products->qual[d1.seq].owner_area_disp),
   inventory_area_disp = total_products->qual[d1.seq].inv_area_disp
 
from
   (dummyt d1 with seq = value(nProdQualCnt))
plan d1
   where d1.seq <= size(total_products->qual, 5)
 
order
   owner_area_disp,
   inventory_area_disp,
   date_display
 
head report
     row + 0
 
head page
%i cclsource:bbt_print_location_info.inc
     row 0
     call center(captions->report_title, 1, 130)
     col 108, captions->as_of_date
     col 120, curdate "@DATECONDENSED;;d"
     row + 1
     col 108, captions->time
     col 120, curtime "@TIMENOSECONDS;;m"
     row + 1
     beg_dt_tm = cnvtdatetime(request->beg_dt_tm)
     end_dt_tm = cnvtdatetime(request->end_dt_tm)
     col 35, captions->beg_date
     col 51, beg_dt_tm "@DATECONDENSED;;d"
     col 59, beg_dt_tm "@TIMENOSECONDS;;m"
     col 72, captions->end_date
     col 85, end_dt_tm "@DATECONDENSED;;d"
     col 93, end_dt_tm "@TIMENOSECONDS;;m"
     row + 2
     if (nPageBreak = 0)
        if (size(total_products->qual, 5) > 0)
     		col 1, captions->bb_owner
     		;If data qualified use it to populate the owner area.  Otherwise blank it out.
     		if (nProdQualCnt > 0)
     			col 19 total_products->qual[d1.seq].owner_area_disp
     		else
     			col 19 sFillChar
     		endif
     		row + 1
     		col 1, captions->bb_inventory_area
     		;If data qualified use it to populate the inventory area.  Otherwise blank it out.
     		if (nProdQualCnt > 0)
     			col 19 total_products->qual[d1.seq].inv_area_disp
     		else
     			col 19 sFillChar
     		endif
     		row + 1
     		col 63, captions->aborh
     		if ((total_products->qual[d1.seq].event_type_cd = dShippedEventTypeCd) or
         		(total_products->qual[d1.seq].event_type_cd = dInTransitEventTypeCd))
    	 		col 75, captions->bb_receiving_org
     		else
     	 		col 75, captions->bb_transfer_org
     		endif
     	else
     		;No data qualified.
     		col 19 sFillChar
     		col 75 sFillChar
     	endif
     	row + 1
     	col 1, captions->product_state
     	col 14, captions->product_type
     	col 36, captions->product_number
     	col 63, captions->quantity
     	col 75, captions->bb_inv_area
     	col 98, captions->courier
     	col 120, captions->tech_id
     	row + 1
     	col 1, "-----------"
     	col 14, "--------------------"
     	col 36, "-------------------------"
     	col 63, "----------"
     	col 75, "---------------------"
     	col 98, "--------------------"
     	col 120, "-------"
     endif
     row + 1
 
head owner_area_disp
     row + 0
 
head inventory_area_disp
     row + 0
 
head date_display
     if ((size(trim(sPrevOwnerAreaDisp), 1) != 0) or (size(trim(sPrevInvAreaDisp), 1) != 0))
     	if ((total_products->qual[d1.seq].owner_area_disp != sPrevOwnerAreaDisp) or
     		(total_products->qual[d1.seq].inv_area_disp != sPrevInvAreaDisp))
     		sPrevOwnerAreaDisp = total_products->qual[d1.seq].owner_area_disp
     		sPrevInvAreaDisp = total_products->qual[d1.seq].inv_area_disp
     		break
     	endif
     endif
     col 1, total_products->qual[d1.seq].event_dt_tm "@SHORTDATE"
     row + 1
 
detail
     nTotalQualCnt = nTotalQualCnt + 1
     col 1, total_products->qual[d1.seq].product_state_display "###########"
     col 14, total_products->qual[d1.seq].product_display "####################"
     col 36, total_products->qual[d1.seq].prod_nbr_display "####################"
     if (size(trim(total_products->qual[d1.seq].product_sub_nbr), 1) > 0)
         col 56, total_products->qual[d1.seq].product_sub_nbr "#####"
     else
    	 col 56, "     "
     endif
     if(total_products->qual[d1.seq].transferred_qty <= 0)
    	col 63, total_products->qual[d1.seq].product_aborh_display "##########"
     else
     	col 63, total_products->qual[d1.seq].transferred_qty "####;p "
     endif

     if ((total_products->qual[d1.seq].event_type_cd = dShippedEventTypeCd) or
        (total_products->qual[d1.seq].event_type_cd = dInTransitEventTypeCd))
         if (size(trim(total_products->qual[d1.seq].organization_display),1) != 0)
    	     col 75, total_products->qual[d1.seq].organization_display "#####################"
    	 else
     		 col 75, total_products->qual[d1.seq].inventory_area_display "#####################"
     	 endif
     else
     	 if (size(trim(total_products->qual[d1.seq].transfer_owner_area_display), 1) != 0)
     	 	col 75, total_products->qual[d1.seq].transfer_owner_area_display "#####################"
     	 else
     	 	col 75, total_products->qual[d1.seq].transfer_inventory_area_display "#####################"
     	 endif
     endif
     col 98, total_products->qual[d1.seq].courier_display "####################"
     col 120, total_products->qual[d1.seq].username "#######"
     row + 1
     ;If there is not enough room to print the daily summary on the same page skip to the next page.
     if (row > nMaxSumRow)
     	break
     endif
 
foot date_display
     row + 1
 
foot inventory_area_disp
     sPrevInvAreaDisp = trim(total_products->qual[d1.seq].inv_area_disp)
 
foot owner_area_disp
     sPrevOwnerAreaDisp = trim(total_products->qual[d1.seq].owner_area_disp)
     if (nTotalQualCnt = size(total_products->qual, 5))
     	nPageBreak = 1
     	break
     endif
     if (nPageBreak = 1)
     	nPageBreak = 2
     endif
 
foot page
     if(nPageBreak < 2)
         row  58
         col   1, sFillLine
         row + 1
         col   1, captions->report_id,
         col 120, captions->page_no,
         col 128, curpage "###"
     endif
 
foot report
	if (nPageBreak = 2)
    	nShippedCnt = 0
     	nInTransitCnt = 0
     	nTransferredCnt = 0
     	for (nListCnt = 1 to size(detail_summary->qual, 5))
     		row + 1
     		col 1, detail_summary->qual[nListCnt].event_dt_tm "@SHORTDATE"
     		col 10, captions->summary
     		row + 1
     		col 1, captions->product_type
     		col 28, captions->intransit
    		col 41, captions->shipped
     		col 54, captions->transferred
     		row + 1
    		col 1, "-------------------------"
     		col 28, "-----------"
     		col 41, "-----------"
     		col 54, "-----------"
     		row + 1
     		for (nQualCnt = 1 to size(detail_summary->qual[nListCnt].date_qual, 5))
        		col 1,  detail_summary->qual[nListCnt].date_qual[nQualCnt].product_display "#########################"
		 		if (detail_summary->qual[nListCnt].date_qual[nQualCnt].intransit_cnt > 0)
		    		col 35, detail_summary->qual[nListCnt].date_qual[nQualCnt].intransit_cnt "####;p "
		 		endif
	 	 		if (detail_summary->qual[nListCnt].date_qual[nQualCnt].shipped_cnt > 0)
	 		 		col 48, detail_summary->qual[nListCnt].date_qual[nQualCnt].shipped_cnt "####;p "
	     		endif
	 	 		if (detail_summary->qual[nListCnt].date_qual[nQualCnt].transferred_cnt > 0)
	 		 		col 61, detail_summary->qual[nListCnt].date_qual[nQualCnt].transferred_cnt "####;p "
	 	 		endif
	         	row + 1
     			if (row + 1 >= nMaxSumRow)
     				break
     			endif
         	endfor
     	endfor         	      	
     	;If nothing qualified in the main select don't show the summary report section.
     	if (nProdQualCnt > 0)
     	    row  58
            col   1, sFillLine
            row + 1
            col   1, captions->report_id,
            col 120, captions->page_no,
            col 128, curpage "###"
     		break
	    	col 1, beg_dt_tm "@SHORTDATE"
	    	col 10, beg_dt_tm "@TIMENOSECONDS;;m"
	    	col 16, "-"
    		col 18, end_dt_tm "@SHORTDATE"
     		col 27, end_dt_tm "@TIMENOSECONDS;;m"
     		col 33, captions->summary
     		row + 1
     		col 1, captions->product_type
     		col 28, captions->intransit
     		col 41, captions->shipped
     		col 54, captions->transferred
     		row + 1
     		col 1, "-------------------------"
     		col 28, "-----------"
     		col 41, "-----------"
     		col 54, "-----------"
     		row + 1
        	for (nQualCnt = 1 to size(total_summary->qual, 5))
     			col 1, total_summary->qual[nQualCnt].product_display "#########################"
	    		if (total_summary->qual[nQualCnt].intransit_cnt > 0)
	        		col 35, total_summary->qual[nQualCnt].intransit_cnt "####;p "
	    			nInTransitCnt = nInTransitCnt + total_summary->qual[nQualCnt].intransit_cnt
	    		endif
	    		if (total_summary->qual[nQualCnt].shipped_cnt > 0)
	    			col 48, total_summary->qual[nQualCnt].shipped_cnt "####;p "
	    			nShippedCnt = nShippedCnt + total_summary->qual[nQualCnt].shipped_cnt
	    		endif
	    		if (total_summary->qual[nQualCnt].transferred_cnt > 0)
	    			col 61, total_summary->qual[nQualCnt].transferred_cnt "####;p "
	    			nTransferredCnt = nTransferredCnt + total_summary->qual[nQualCnt].transferred_cnt
	    		endif
	    		row + 1
	    		if (row >= nMaxSumRow)
	    			break
	    		endif
	    	endfor
     		col 1, "-------------------------"
     		col 28, "-----------"
     		col 41, "-----------"
     		col 54, "-----------"
    		row + 1
     		col 1, captions->total
     		if (nInTransitCnt > 0)
    			col 35, nInTransitCnt "####;p "
     		endif
     		if (nShippedCnt> 0)
     			col 48, nShippedCnt "####;p "
     		endif
     		if (nTransferredCnt > 0)
     			col 61, nTransferredCnt "####;p "
     		endif
     	endif
     endif

     row  58
     col   1, sFillLine
     row + 1
     col   1, captions->report_id,
     col 120, captions->page_no,
     col 128, curpage "###"
     row 60
     call center(captions->end_of_report, 1, 130)
     nPassed = 1
 
with nocounter,
     nullreport,
     maxrow = 61,
     compress,
     nolandscape
 
set nReportCnt = nReportCnt + 1
set nStat = alterlist(reply->rpt_list, nReportCnt)
set reply->rpt_list[nReportCnt].rpt_filename = cpm_cfn_info->file_name_path
 
if ((size(trim(request->batch_selection), 1) > 0) and (request->null_ind = 1))
    set spool value(reply->rpt_list[nReportCnt].rpt_filename) value(request->output_dist)
endif
 
if (nPassed = 1)
    set reply->status_data->status = "S"
endif
 
#EXIT_SCRIPT

;Free the record structures.
free record total_products
free record total_summary
free record detail_products
free record detail_summary
free record location
free record captions
 
end
go

;Generated by GNU enscript 1.6.4.
