 ;;Solution_Test/script/PathNet -- BB Transfusion/Bbt_Reportselection/BBT_RPT_WORKLOAD.PRG Turn on black mode

/*****************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_rpt_workload.prg
        Object name:            bbt_rpt_workload
        Request #:              225594

        Product:                Blood Bank
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Provide a workload of blood bank activity by user

        Tables read:            result_event, perform_result, result, discrete_task_assay,
                                orders, order_laboratory, bb_order_cell, product_event, product

        Tables updated:         None

        Executing from:         

        Special Notes:          

******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 10/22/98 Doug Saus            Initial Release                     *
;     001 12/21/98 Jose Suarez          Added logic to print the location name                                *
;                                       and address.  Added the address_location_cd to request.               *
;                                       Added bbt_get_location_info.inc                                       *
;                                       Added bbt_print_location_info.inc                                     *
;     002 03/10/99 Doug Saus            Fixed report failing when no activity exists
;                                       and fixed overwrite of header by the location addresses
;     003 05/21/99 Jose Suarez          change cer_temp to cer_print          *
;     004 10/22/99 Jose Suarez          Added bbt_ops_owninvloc.inc login     *
;     005 11/10/99 Jose Suarez          Enhancement when running from ops   *
;                                       removed bbt_ops_owninvloc.inc and   *
;                                       added bbt_ops_parm_passed.inc       * 
;     006 01/10/99 Doug Saus            Performance tweaks
;     007 08/09/00 Lawrence Dsouza      internationalized date and time     *
;     008 02/26/01 Rob Peterson         Internationalize script             *
;     009 07/26/02 Jason Osborn	        Unique RPT filename project         *
;     010 01/15/03 Jason Osborn         Change data types to prevent overflow*
;     011 08/04/03 Jason Osborn         Removed prompt tests from workload  *
;     012 10/20/04 Jim Jensen           Update for Clinical Validation      *
;     013 04/05/07 Jason Osborn         Enhance Service Resource Security.  *
;~DE~************************************************************************

;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program bbt_rpt_workload:dba go    
create program bbt_rpt_workload:dba

/*
record request
(
 1  beg_dt_tm                = di8
 1  end_dt_tm                = di8
 1  batch_selection          = c100
 1  output_dist              = c100
 1  ops_date                 = dq8
 1  cur_owner_area_cd        = f8
 1  cur_inv_area_cd          = f8
 1  address_location_cd      = f8
 1  parameter_list[*]
    2  personnel_break_ind   = i2
    2  cell_break_ind        = i2
    2  action_break_ind      = i2
    2  priority_break_ind    = i2
 1 qual[*]
;   2 service_resource_cd = f8
)
*/

/***************
* Reply Record *
****************/

record reply
( 
          1 rpt_list[*]
             2 rpt_filename  = vc
%i cclsource:status_block.inc
)

;Begin 008
/*****************************************************************************
* Internationalization                                                       *
*****************************************************************************/
%i cclsource:i18n_uar.inc                                              
                                                                       
set i18nHandle = 0                                                     
set h = uar_i18nlocalizationinit(i18nHandle, curprog, "", curcclrev)   
                                                                       
record captions                                                        
(                                                                      
  1  rpt_title                  = vc                                   
  1  rpt_time                   = vc                                   
  1  rpt_as_of_date             = vc                                   
  1  blood_bank_owner           = vc                                   
  1  inventory_area             = vc                                   
  1  begin_date                 = vc                                   
  1  ending_date                = vc                                   
  1  orderable_detail           = vc                                   
  1  totals                     = vc                                   
  1  cell                       = vc                                   
  1  action                     = vc                                   
  1  priority                   = vc                                   
  1  paren_p                    = vc                                   
  1  paren_a                    = vc                                   
  1  paren_c                    = vc                                   
  1  paren_od_a                 = vc                                   
  1  rpt_id                     = vc                                   
  1  rpt_page                   = vc                                   
  1  printed                    = vc                                   
  1  end_of_report              = vc                                   
  1  all						= vc											  
  1  summary_by					= vc											  
  1  personnel					= vc											  
  1  orderable_activity			= vc											  
  1  cell_header				= vc											  
  1  action_header				= vc											  
  1  priority_header			= vc											  
  1  user						= vc											  
  1  unknown					= vc											  
  1  total						= vc											  
)                                                                      
                                                                       
set captions->rpt_title = uar_i18ngetmessage(i18nHandle,               
  "rpt_title", "B L O O D   B A N K   W O R K L O A D   R E P O R T")  
set captions->rpt_time = uar_i18ngetmessage(i18nHandle,                
  "rpt_time", "Time:")                                                 
set captions->rpt_as_of_date = uar_i18ngetmessage(i18nHandle,          
  "rpt_as_of_date", "As of Date:")                                     
set captions->blood_bank_owner = uar_i18ngetmessage(i18nHandle,        
  "blood_bank_owner", "Blood Bank Owner: ")                            
set captions->inventory_area = uar_i18ngetmessage(i18nHandle,          
  "inventory_area", "Inventory Area: ")                                
set captions->begin_date = uar_i18ngetmessage(i18nHandle,              
  "begin_date", "Beginning Date:")                                     
set captions->ending_date = uar_i18ngetmessage(i18nHandle,             
  "end_date", "Ending Date:")                                          
set captions->orderable_detail = uar_i18ngetmessage(i18nHandle,        
  "orderable_detail", "Orderable - Detail / Activity (OD/A)")          
set captions->totals = uar_i18ngetmessage(i18nHandle,                  
  "totals", "Totals")                                                  
set captions->cell = uar_i18ngetmessage(i18nHandle,                    
  "cell", "Cell (C)")                                                  
set captions->action = uar_i18ngetmessage(i18nHandle,                  
  "action", "Action (A)")                                              
set captions->priority = uar_i18ngetmessage(i18nHandle,                
  "priority", "Priority (P)")                                          
set captions->paren_p = uar_i18ngetmessage(i18nHandle,                 
  "paren_p", "(P)")                                                    
set captions->paren_a = uar_i18ngetmessage(i18nHandle,                 
  "paren_a", "(A)")                                                    
set captions->paren_c = uar_i18ngetmessage(i18nHandle,                 
  "paren_c", "(C)")                                                    
set captions->paren_od_a = uar_i18ngetmessage(i18nHandle,              
  "paren_od_a", "(OD/A)")                                              
set captions->rpt_id = uar_i18ngetmessage(i18nHandle,                  
  "rpt_id", "Report ID: BBT_RPT_WORKLOAD")                             
set captions->rpt_page = uar_i18ngetmessage(i18nHandle,                
  "rpt_page", "Page:")                                                 
set captions->printed = uar_i18ngetmessage(i18nHandle,                 
  "printed", "Printed:")                                               
set captions->end_of_report = uar_i18ngetmessage(i18nHandle,           
  "end_of_report", "* * * End of Report * * *")                        
set captions->all = uar_i18ngetmessage(i18nHandle,  			           
  "all", "(All)") 										                       
set captions->summary_by = uar_i18ngetmessage(i18nHandle, 	           
  "summary_by", "Summary by:")						                       
set captions->personnel = uar_i18ngetmessage(i18nHandle, 	           
  "personnel", "Personnel,")							                       
set captions->orderable_activity = uar_i18ngetmessage(i18nHandle,      
  "orderable_activity", "Orderable/Activity") 	                       
set captions->cell_header = uar_i18ngetmessage(i18nHandle,  			  
  "cell_header", ", Cell") 							                       
set captions->action_header = uar_i18ngetmessage(i18nHandle,           
  "action_header", ", Action") 	   				                       
set captions->priority_header = uar_i18ngetmessage(i18nHandle,         
  "priority_header", ", Priority") 					                                   
set captions->user = uar_i18ngetmessage(i18nHandle, 				        
  "user", "User:")					 					                       
set captions->unknown = uar_i18ngetmessage(i18nHandle,			        
  "unknown", "Unknown   ")			 					                       
set captions->total = uar_i18ngetmessage(i18nHandle,				        
  "total", "(Total ")				 					                       
;End 008

/*****************************************************************************
* Service Resource Security                                                  *
*****************************************************************************/
%i cclsource:pcs_resource_security.inc
%i cclsource:bb_get_serv_res_access.inc
declare nSecurityInd = i2 with project, noconstant(CONST_SECURITY_ON)    ;Init security ON
declare nReturnStat  = i2 with protect, noconstant(CONST_RETURN_INVALID) ;Init to invalid return
declare nTestSiteCnt = i4 with protect, noconstant(0)                    ;Test Site Loop Counter
                                                                
/*****************************************************************************
* Script                                                                     *
*****************************************************************************/

/* Structure to keep track of workloads */
record workload_rec
(
  1  workload[*]
    2  personnel_id         = f8
    2  product_event_ind    = i2
    2  activity_event_cd    = f8
    2  task_assay_cd        = f8
    2  interp_cd            = f8 ;(bb_result_processing_cd)
    2  bb_order_cell_cd     = f8
    2  report_priority_cd   = f8
    2  status               = c2
    2  report_ind           = i2
    2  workload_sort
       3  personnel_id        = f8
       3  bb_order_cell_cd    = f8
       3  status_sort         = i2
       3  report_priority_cd  = f8
)

record ops_params
(
   1 qual[*]
      2 param = c100
)

;** Determine if running from Operations **
set nSecurityInd = CONST_SECURITY_ON
if (size(trim(request->batch_selection), 1) > 0)
  set nSecurityInd = CONST_SECURITY_OFF  ;Call is from Ops, turn security OFF.
  set begday = request->ops_date
  set endday = request->ops_date
  set temp_string = cnvtupper(trim(request->batch_selection))
  CALL CHECK_OPT_DATE_PASSED("bbt_rpt_workload")
  if (reply->status_data->status != "F")
        set request->beg_dt_tm = begday
        set request->end_dt_tm = endday
  endif
  
  call CHECK_OWNER_CD ("bbt_rpt_workload")
  call CHECK_INVENTORY_CD ("bbt_rpt_workload")
  call CHECK_LOCATION_CD ("bbt_rpt_workload")
  call CHECK_SVC_OPT ("bbt_rpt_workload")

  set stat = alterlist(request->parameter_list, 1)
  set request->parameter_list[1].personnel_break_ind = 0
  set request->parameter_list[1].cell_break_ind = 0
  set request->parameter_list[1].action_break_ind = 0
  set request->parameter_list[1].priority_break_ind = 0
endif

;Process values in the request->batch_selection field when running from operations
%i cclsource:bbt_ops_parm_passed.inc

if (InitServResRoutine(nSecurityInd) = CONST_RETURN_INVALID)
   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[1].OperationName = "bbt_rpt_workload"
   set reply->status_data.subeventstatus[1].OperationStatus = "F"
   set reply->status_data.subeventstatus[1].TargetObjectName = "InitServResRoutine()"
   set reply->status_data.subeventstatus[1].TargetObjectValue = "Invalid Status Returned."
   go to EXIT_SCRIPT
endif

set nReturnStat = DetermineServResAccess(request->qual[1]->service_resource_cd)

if (nReturnStat = CONST_RETURN_INVALID)
   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[1].OperationName = "bbt_rpt_workload"
   set reply->status_data.subeventstatus[1].OperationStatus = "F"
   set reply->status_data.subeventstatus[1].TargetObjectName = "DetermineServResAccess()"
   set reply->status_data.subeventstatus[1].TargetObjectValue = "Invalid Service Resource"
   go to EXIT_SCRIPT
elseif (nReturnStat = CONST_RETURN_NO_SECURITY)
   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[1].OperationName = "bbt_rpt_workload"
   set reply->status_data.subeventstatus[1].OperationStatus = "F"
   set reply->status_data.subeventstatus[1].TargetObjectName = "DetermineServResAccess()"
   set reply->status_data.subeventstatus[1].TargetObjectValue = "No security access for specified Service Resource"
   go to EXIT_SCRIPT
endif

set select_ok_ind = 1

;%i cclsource:bbt_get_inst_name.inc   ;001
%i cclsource:bbt_get_location_info.inc   

;/* Retrieve Institution name */                ;001     
;set Institution_name = fillstring(60, " ")     ;001
;set Institution_name = GET_INST_NAME(0)        ;001

declare workload_cnt        = i4                ;009  JO7236
declare order_start_cnt     = i4                ;009  JO7236
declare personnel_id_hold   = f8
declare personnel_cnt       = i2

declare bb_code             = f8
declare bb_product_code     = f8
declare bbdonor_code        = f8
declare bbdonorprod_code    = f8

declare autologous_code     = f8
declare directed_code       = f8
declare dispensed_code      = f8
declare disposed_code       = f8
declare modified_code       = f8
declare pooled_product_code = f8
declare received_code       = f8
declare transfused_code     = f8

declare verified_code          = f8 with protect, noconstant(0.0)
declare old_verified_code      = f8 with protect, noconstant(0.0)
declare performed_code         = f8 with protect, noconstant(0.0)
declare old_performed_code     = f8 with protect, noconstant(0.0)
declare corrected_code         = f8 with protect, noconstant(0.0)
declare old_corrected_code     = f8 with protect, noconstant(0.0)
declare inreview_code          = f8 with protect, noconstant(0.0)
declare old_inreveiw_code      = f8 with protect, noconstant(0.0)
declare corr_inreview_code     = f8 with protect, noconstant(0.0)
declare old_corr_inreview_code = f8 with protect, noconstant(0.0)

set owner_area_disp = fillstring(40, " ")
set inv_area_disp = fillstring(40, " ")

if (request->cur_owner_area_cd > 0.0)
    set owner_area_disp = uar_get_code_display(request->cur_owner_area_cd),
else
    set owner_area_disp = captions->all						;008
endif
if (request->cur_inv_area_cd > 0.0)
    set inv_area_disp = uar_get_code_display(request->cur_inv_area_cd)
else
    set inv_area_disp = captions->all							;008
endif


/*********************************/
/* Get blood bank activity types */
/*********************************/
select into "nl:"
    cv.code_value
    , cv.cdf_meaning

from
    code_value cv

where  cv.code_set              = 106
 and   cv.cdf_meaning           in ("BB", "BB PRODUCT", "BBDONOR", "BBDONORPROD")
 and   cv.active_ind            = 1
 and   cv.begin_effective_dt_tm <=  cnvtdatetime(curdate,curtime3)
 and   cv.end_effective_dt_tm   >=  cnvtdatetime(curdate,curtime3)

head report
    select_ok_ind = 0

detail
    if (cv.cdf_meaning = "BB")
        bb_code = cv.code_value
    elseif (cv.cdf_meaning = "BB PRODUCT")
        bb_product_code = cv.code_value
    elseif (cv.cdf_meaning = "BBDONOR")
        bbdonor_code = cv.code_value
    elseif (cv.cdf_meaning = "BBDONORPROD")
        bbdonorprod_code = cv.code_value
    endif
    
foot report
    select_ok_ind = 1

with nocounter

if (select_ok_ind = 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1].operationname = "bbt_rpt_workload"
    set reply->status_data->subeventstatus[1].operationstatus = "F"
    set reply->status_data->subeventstatus[1].TargetObjectName = "select"
    set reply->status_data->subeventstatus[1].TargetObjectValue = "failed for select of code set 106"
    go to Exit_Script
endif

/*********************/
/* Get results codes */
/*********************/
select into "nl:"
    cv.code_value
    , cv.cdf_meaning

from
    code_value cv

where  cv.code_set              = 1901
 and   cv.active_ind            = 1
 and   cv.begin_effective_dt_tm <=  cnvtdatetime(curdate,curtime3)
 and   cv.end_effective_dt_tm   >=  cnvtdatetime(curdate,curtime3)

head report
    select_ok_ind = 0

detail
    if (cv.cdf_meaning         = "VERIFIED")
        verified_code          = cv.code_value
    elseif (cv.cdf_meaning     = "OLDVERIFIED")
        old_verified_code      = cv.code_value
    elseif (cv.cdf_meaning     = "PERFORMED")
        performed_code         = cv.code_value
    elseif (cv.cdf_meaning     = "OLDPERFORMED")
        old_performed_code     = cv.code_value
    elseif (cv.cdf_meaning     = "CORRECTED")
        corrected_code         = cv.code_value
    elseif (cv.cdf_meaning     = "OLDCORRECTED")
        old_corrected_code     = cv.code_value
    elseif (cv.cdf_meaning     = "INREVIEW")
        inreview_code          = cv.code_value
    elseif (cv.cdf_meaning     = "OLDINREVIEW")
        old_inreveiw_code      = cv.code_value
    elseif (cv.cdf_meaning     = "CORRINREV")
        corr_inreview_code     = cv.code_value
    elseif (cv.cdf_meaning     = "OLDCORRINREV")
        old_corr_inreview_code = cv.code_value
    endif
    
foot report
    select_ok_ind = 1

with nocounter

if (select_ok_ind = 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1].operationname = "bbt_rpt_workload"
    set reply->status_data->subeventstatus[1].operationstatus = "F"
    set reply->status_data->subeventstatus[1].TargetObjectName = "select"
    set reply->status_data->subeventstatus[1].TargetObjectValue = "failed for select of code set 1901"
    go to Exit_Script
endif

/**********************/
/* Select orderables  */
/**********************/

;006 Reordered query

select into "nl:"
    product_cell = decode(boc.seq, boc.product_id, r.bb_control_cell_cd)
    , order_lab_ind = decode(ol.seq,1,0)
    , bb_result_processing_mean = uar_get_code_meaning(dta.bb_result_processing_cd)

from 
        result_event re
        , perform_result pr
        , result r
        , discrete_task_assay dta
        , orders o
        , product p
        , (dummyt d_ol with seq = 1)
        , order_laboratory ol
        , (dummyt d_boc with seq = 1)
        , bb_order_cell boc
        , profile_task_r ptr

    plan re where   re.event_dt_tm              >= cnvtdatetime(request->beg_dt_tm) 
            and     re.event_dt_tm              <= cnvtdatetime(request->end_dt_tm)
    join r  where   r.result_id                  = re.result_id
    
    join o  where   o.order_id                  = r.order_id
            and     o.activity_type_cd          in (bb_code, bb_product_code, bbdonor_code, bbdonorprod_code)
            
    join p  where p.product_id = o.product_id  
              and ((o.product_id = 0.0)          
                   or (((request->cur_owner_area_cd > 0.0 and p.cur_owner_area_cd+0 = request->cur_owner_area_cd)
                   or  (request->cur_owner_area_cd = 0.0))
                  and ((request->cur_inv_area_cd > 0.0 and p.cur_inv_area_cd+0 = request->cur_inv_area_cd)
                   or  (request->cur_inv_area_cd = 0.0))))

    join ptr where ptr.catalog_cd = o.catalog_cd
               and ptr.task_assay_cd = r.task_assay_cd
               and ptr.item_type_flag != 1
               and ptr.active_ind = 1

    join pr where   pr.perform_result_id        = re.perform_result_id
            and     pr.result_id                = re.result_id
            and     expand(nTestSiteCnt, 1, size(testsites->qual, 5), pr.service_resource_cd, 
                                                 testsites->qual[nTestSiteCnt].service_resource_cd)

    join dta where  dta.task_assay_cd           = r.task_assay_cd
    

    join d_ol where d_ol.seq                    = 1
    join ol where   ol.order_id                 = o.order_id  ;to get reporting priority

    join (d_boc where   d_boc.seq               = 1           ;used to see if associated w/product
        join boc where  boc.order_id            = o.order_id  ;i.e. an Antigen Type order 
                   and  boc.product_id          > 0.0         ; should be a 1 to 1 relationship is a row
                   and  boc.product_id          != NULL       ; is found on the bb_order_cell
                   and  boc.bb_result_id        = r.bb_result_id
                   and  boc.bb_result_id        > 0.0
                   and  boc.bb_result_id        != NULL)

order by  o.order_id, product_cell, r.result_id, pr.perform_result_id, re.event_sequence

head report
    select_ok_ind = 0
    workload_cnt = 0
    stat = alterlist(workload_rec->workload, 10)

head o.order_id
    select_ok_ind = select_ok_ind
    
head product_cell
    order_start_cnt = workload_cnt + 1

    ;** Default to report all assays for an order.  If an assay with an interp-type bb_result_processing_cd
    ; * (from code_set 1636) is NOT found, report_all_ind will remain 1 and the report_ind for all assays will 
    ; * be set to 1.  If an interp-type assay is found, report_all_ind will be set to 0 and only the report_ind
    ; * for the interp-type assay will be set to 1.
    report_all_ind = 1      

head pr.perform_result_id
    personnel_id_hold   = 0
    personnel_cnt       = 0

head re.event_sequence
    if (re.seq > 0)
        if (re.event_personnel_id != personnel_id_hold)
            workload_cnt = workload_cnt + 1
            if (workload_cnt > size(workload_rec->workload,5))
               stat = alterlist(workload_rec->workload, workload_cnt + 9)
            endif
            personnel_cnt = personnel_cnt + 1
            personnel_id_hold = re.event_personnel_id

            ;** fill out workload record structure
            workload_rec->workload[workload_cnt].personnel_id       = re.event_personnel_id
            workload_rec->workload[workload_cnt].activity_event_cd  = o.catalog_cd
            workload_rec->workload[workload_cnt].task_assay_cd      = r.task_assay_cd
            workload_rec->workload[workload_cnt].interp_cd          = dta.bb_result_processing_cd
            if (order_lab_ind = 1)
                workload_rec->workload[workload_cnt].report_priority_cd = ol.report_priority_cd
            else
                workload_rec->workload[workload_cnt].report_priority_cd = 0
            endif
            workload_rec->workload[workload_cnt].bb_order_cell_cd   = product_cell
            workload_rec->workload[workload_cnt].product_event_ind  = 0
            
            if (bb_result_processing_mean in ("HISTRY & UPD", "HISTRY ONLY", "AB SCRN INTP",
                                                "AB TITER", "ABSC CI", "AG BILL", "AG INTERP",
                                                "CELLPHASEINT", "RH PHENOTYPE", "ABID INTERP"))
                report_all_ind = 0
                workload_rec->workload[workload_cnt].report_ind         = 1
            else
                workload_rec->workload[workload_cnt].report_ind         = 0
            endif               

            ;** Determine if Perform Only or Corrected
            if (pr.result_status_cd in (performed_code, old_performed_code, inreview_code, old_inreveiw_code))
                workload_rec->workload[workload_cnt].status = "PO"
            elseif (pr.result_status_cd in (corrected_code, old_corrected_code, corr_inreview_code, old_corr_inreview_code))
                workload_rec->workload[workload_cnt].status = "CO"
            endif
        endif

        ;** For Verified Perform_Results, determine if Perform/Verified, Perform Only or Verify Only
        if (pr.result_status_cd = verified_code or pr.result_status_cd = old_verified_code)
            if (re.event_type_cd = performed_code)
                workload_rec->workload[workload_cnt].status = "PO"
            elseif (re.event_type_cd = verified_code)
                if (personnel_cnt = 1)
                    workload_rec->workload[workload_cnt].status = "PV"
                else
                    workload_rec->workload[workload_cnt].status = "VO"
                endif
            endif
        endif
    endif

foot product_cell
    if (report_all_ind = 1)
        for (idx = order_start_cnt to workload_cnt)
            workload_rec->workload[idx].report_ind = 1
        endfor
    endif

foot report
    select_ok_ind = 1
    stat = alterlist(workload_rec->workload, workload_cnt)
    

with nocounter, dontcare(ol), outerjoin(d_boc), 
	 ORAHINTCBO ("index(PTR  XPKPROFILE_TASK_R) index(R  XPKRESULT) index(O  XPKORDERS)") 

if (select_ok_ind = 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1].operationname = "bbt_rpt_workload"
    set reply->status_data->subeventstatus[1].operationstatus = "F"
    set reply->status_data->subeventstatus[1].TargetObjectName = "select"
    set reply->status_data->subeventstatus[1].TargetObjectValue = "failed for select of orderables"
    go to Exit_Script
endif

/*********************************/
/* Get product event codes       */
/*********************************/
select into "nl:"
    cv.cdf_meaning
    , cv.code_value

from
     code_value cv

where cv.code_set               = 1610
 and   cv.active_ind            = 1
 and   cv.begin_effective_dt_tm <=  cnvtdatetime(curdate,curtime3)
 and   cv.end_effective_dt_tm   >=  cnvtdatetime(curdate,curtime3)

head report
    select_ok_ind = 0

detail
    if (cv.cdf_meaning = "10")
        autologous_code = cv.code_value
    elseif (cv.cdf_meaning = "11")
        directed_code   = cv.code_value
    elseif (cv.cdf_meaning = "4")
        dispensed_code  = cv.code_value
    elseif (cv.cdf_meaning = "5")
        disposed_code   = cv.code_value
    elseif (cv.cdf_meaning = "8")
        modified_code   = cv.code_value
    elseif (cv.cdf_meaning = "18")
        pooled_product_code = cv.code_value
    elseif (cv.cdf_meaning = "13")
        received_code   = cv.code_value
    elseif (cv.cdf_meaning = "7")
        transfused_code = cv.code_value
    endif 

foot report
    select_ok_ind = 1

with nocounter

if (select_ok_ind = 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1].operationname = "bbt_rpt_workload"
    set reply->status_data->subeventstatus[1].operationstatus = "F"
    set reply->status_data->subeventstatus[1].TargetObjectName = "select"
    set reply->status_data->subeventstatus[1].TargetObjectValue = "select failed for select of code set 1610"
    go to Exit_Script
endif

/**********************/
/* Get Product Events */
/**********************/
/* variables for "parameters" to macro */
set personnel_id = 0.0
set activity_event_cd = 0.0

select into "nl:"
    dsp_ind = decode(dsp.seq, 1, 0)
    , pe.product_event_id
    , pe.event_dt_tm
    , pe.event_prsnl_id
    , pe.event_type_cd
    , pe.order_id
    , pe.related_product_event_id
    , p.product_id
    , p.cur_owner_area_cd
    , p.cur_inv_area_cd
    , reason_meaning = UAR_GET_CODE_MEANING(dsp.reason_cd)
    , method_meaning = UAR_GET_CODE_MEANING(dst.method_cd)

from
    product_event pe
    , product p
    , (dummyt d_dsp with seq = 1)
    , disposition dsp
    , product_event rpe
    , destruction dst

plan    pe  where pe.event_dt_tm    >= cnvtdatetime(request->beg_dt_tm)
            and   pe.event_dt_tm    <= cnvtdatetime(request->end_dt_tm)
            and   (pe.event_type_cd = dispensed_code ;dispense events may have product orders
            or     pe.order_id      = 0.0
            or     pe.order_id      = NULL)    
            and   pe.event_prsnl_id > 0
            and   pe.event_prsnl_id != NULL     
            and   (pe.event_type_cd in (autologous_code, directed_code, dispensed_code, modified_code, 
                                        pooled_product_code, received_code, transfused_code))
            or    (pe.event_type_cd = disposed_code 
            and   (pe.related_product_event_id = 0
            or     pe.related_product_event_id = NULL))

join    p   where p.product_id      = pe.product_id
            and   ((request->cur_owner_area_cd > 0.0
                   and p.cur_owner_area_cd = request->cur_owner_area_cd)
                   or (request->cur_owner_area_cd = 0.0))
            and   ((request->cur_inv_area_cd > 0.0
                   and p.cur_inv_area_cd = request->cur_inv_area_cd)
                   or (request->cur_inv_area_cd = 0.0))


join    (d_dsp  where d_dsp.seq = 1

    join dsp    where dsp.product_event_id              = pe.product_event_id

    join rpe    where rpe.related_product_event_id      = dsp.product_event_id

    join dst    where dst.product_event_id              = rpe.product_event_id)

order by pe.event_prsnl_id, pe.product_event_id

head report
    select_ok_ind = 0

    macro(ADD_WORKLOAD_ROW)
        workload_cnt = workload_cnt + 1
        if (workload_cnt > size(workload_rec->workload,5))
           stat = alterlist(workload_rec->workload, workload_cnt + 9)
        endif
        ;** fill out workload record structure
        workload_rec->workload[workload_cnt].personnel_id       = personnel_id
        workload_rec->workload[workload_cnt].activity_event_cd  = activity_event_cd
        workload_rec->workload[workload_cnt].task_assay_cd      = 0.0
        workload_rec->workload[workload_cnt].interp_cd          = 0.0
        workload_rec->workload[workload_cnt].report_priority_cd = 0.0
        workload_rec->workload[workload_cnt].bb_order_cell_cd   = 0.0
        workload_rec->workload[workload_cnt].report_ind         = 1
        workload_rec->workload[workload_cnt].product_event_ind  = 1
        workload_rec->workload[workload_cnt].status             = "  "
    endmacro

detail
    if (pe.event_type_cd in (dispensed_code, modified_code, pooled_product_code,
                            transfused_code, received_code, autologous_code, directed_code))
        personnel_id        = pe.event_prsnl_id
        activity_event_cd   = pe.event_type_cd
        ADD_WORKLOAD_ROW
    elseif(pe.event_type_cd = disposed_code AND dsp_ind = 1)
        if (reason_meaning NOT in ("POOLED", "MODIFIED"))
            if (method_meaning = "DESTNOW")
                personnel_id        = rpe.event_prsnl_id
                activity_event_cd   = rpe.event_type_cd
                ADD_WORKLOAD_ROW
            else
                personnel_id        = pe.event_prsnl_id
                activity_event_cd   = pe.event_type_cd
                ADD_WORKLOAD_ROW
                if (method_meaning = "DESTLATR" and rpe.event_status_flag = 0)
                    personnel_id        = rpe.event_prsnl_id
                    activity_event_cd   = rpe.event_type_cd
                    ADD_WORKLOAD_ROW
                endif
            endif
        endif
    endif

foot report
    select_ok_ind = 1
    stat = alterlist(workload_rec->workload, workload_cnt)

with    nocounter, outerjoin(d_dsp)

if (select_ok_ind = 0)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1].operationname = "bbt_rpt_workload"
    set reply->status_data->subeventstatus[1].operationstatus = "F"
    set reply->status_data->subeventstatus[1].TargetObjectName = "select"
    set reply->status_data->subeventstatus[1].TargetObjectValue = "failed for select of product events"
    go to Exit_Script
endif


/******************/
/* Select reports */
/******************/
;002 begin
if (workload_cnt > 0)
    for (idx = 1 to size(request->parameter_list, 5))
        select into "nl:"
           d.seq

        from
            (dummyt d with seq = value(workload_cnt))

        detail
            if (request->parameter_list[idx].personnel_break_ind = 1)
                workload_rec->workload[d.seq]->workload_sort.personnel_id = workload_rec->workload[d.seq]->personnel_id
            else
                workload_rec->workload[d.seq]->workload_sort.personnel_id = 0
            endif
            if (request->parameter_list[idx].cell_break_ind = 1)
                workload_rec->workload[d.seq]->workload_sort.bb_order_cell_cd = workload_rec->workload[d.seq]->bb_order_cell_cd    
            else
                workload_rec->workload[d.seq]->workload_sort.bb_order_cell_cd = 0
            endif
            if (request->parameter_list[idx].action_break_ind = 1)
                workload_rec->workload[d.seq]->workload_sort.status_sort  = 
                                          if (workload_rec->workload[d.seq].status = "PO")
                                            1
                                          elseif (workload_rec->workload[d.seq].status = "PV")
                                            2
                                          elseif (workload_rec->workload[d.seq].status = "VO")
                                            3
                                          elseif (workload_rec->workload[d.seq].status = "CO")
                                            4
                                          else
                                            5
                                          endif
            else
                workload_rec->workload[d.seq]->workload_sort.status_sort = 0
            endif
            if (request->parameter_list[idx].priority_break_ind = 1)
                workload_rec->workload[d.seq]->workload_sort.report_priority_cd = workload_rec->workload[d.seq]->report_priority_cd
            else
                workload_rec->workload[d.seq]->workload_sort.report_priority_cd = 0
            endif

        with nocounter

        call print_report(request->parameter_list[idx].personnel_break_ind
                          , request->parameter_list[idx].cell_break_ind
                          , request->parameter_list[idx].action_break_ind
                          , request->parameter_list[idx].priority_break_ind)
    endfor
else
    set stat = alterlist(workload_rec->workload, 1)
    set workload_cnt = 1
    for (idx = 1 to size(request->parameter_list, 5))
        call print_report(request->parameter_list[idx].personnel_break_ind
                              , request->parameter_list[idx].cell_break_ind
                              , request->parameter_list[idx].action_break_ind
                              , request->parameter_list[idx].priority_break_ind)
    endfor
endif
;002 end

subroutine print_report(personnel_break_ind
                        , cell_break_ind
                        , action_break_ind
                        , priority_break_ind)

    set task_assay_break_ind = 1
    set break_down_disp = fillstring(125," ")
    /***********************/
    /* Main Report Section */
    /***********************/


set rpt_cnt = 0

execute cpm_create_file_name_logical "bbt_workload", "txt", "x"
    
    select into cpm_cfn_info->file_name_logical
          personnel_Id            = workload_rec->workload[d.seq].personnel_id
        , product_event_ind     = workload_rec->workload[d.seq].product_event_ind
        , activity_event_cd     = workload_rec->workload[d.seq].activity_event_cd
        , activity_event_disp   = concat(trim(uar_get_code_display(workload_rec->workload[d.seq]->activity_event_cd))
                                        , if (workload_rec->workload[d.seq].product_event_ind = 1)
                                            ""
                                          else
                                            " - "
                                          endif
                                        , trim(uar_get_code_display(workload_rec->workload[d.seq]->task_assay_cd)))

        , task_assay_cd         = workload_rec->workload[d.seq].task_assay_cd
        , task_assay_disp       = if (workload_rec->workload[d.seq].task_assay_cd > 0)
                                    trim(uar_get_code_display(workload_rec->workload[d.seq].task_assay_cd))
                                  else
                                    ""
                                  endif

        , interp_cd             = workload_rec->workload[d.seq].interp_cd
        , interp_disp           = if (workload_rec->workload[d.seq].interp_cd > 0)
                                    trim(uar_get_code_display(workload_rec->workload[d.seq].interp_cd))
                                  else
                                    ""
                                  endif

        , bb_order_cell_cd      = workload_rec->workload[d.seq].bb_order_cell_cd
        , bb_order_cell_disp    = if (workload_rec->workload[d.seq].bb_order_cell_cd > 0)
                                    trim(uar_get_code_display(workload_rec->workload[d.seq].bb_order_cell_cd))
                                  else
                                    ""
                                  endif

        , report_priority_cd    = workload_rec->workload[d.seq].report_priority_cd
        , report_priority_disp  = if (workload_rec->workload[d.seq].report_priority_cd > 0)
                                    trim(uar_get_code_display(workload_rec->workload[d.seq].report_priority_cd))
                                  else
                                    ""
                                  endif

        , status                = workload_rec->workload[d.seq].status
        , status_sort           = if (workload_rec->workload[d.seq].status = "PO")
                                    1
                                  elseif (workload_rec->workload[d.seq].status = "PV")
                                    2
                                  elseif (workload_rec->workload[d.seq].status = "VO")
                                    3
                                  elseif (workload_rec->workload[d.seq].status = "CO")
                                    4
                                  else
                                    5
                                  endif
        , sort_person           = workload_rec->workload[d.seq].workload_sort.personnel_id
        , sort_cell             = workload_rec->workload[d.seq].workload_sort.bb_order_cell_cd
        , sort_action           = workload_rec->workload[d.seq].workload_sort.status_sort
        , sort_priority         = workload_rec->workload[d.seq].workload_sort.report_priority_cd


    from
        (dummyt d with seq = value(workload_cnt)) 
        , (dummyt d_p with seq = 1)
        , prsnl p

    plan d where   workload_rec->workload[d.seq].report_ind = 1

    join (d_p where d_p.seq     = 1
        join p where p.person_id    = workload_rec->workload[d.seq].personnel_id)

    order by    if (personnel_break_ind = 1)
                    p.username
                else
                    NULL
                endif
                , sort_person
                , product_event_ind 
                , activity_event_disp
                , activity_event_cd
                , task_assay_cd
                , sort_cell
                , sort_action
                , sort_priority

    head report
        continue_ind                = 0
        select_ok_ind               = 0

        dash_line                   = fillstring(125,"-")
        print_tech_head             = 1
        print_order_act_head        = 1
        
        status_sort_disp            = "                    " ;Don't change # of spaces here.
        task_assay_cnt              = 0
        bb_order_cell_cnt           = 0
        priority_cnt                = 0
        status_cnt                  = 0
        person_cnt                  = 0

;008        break_down_disp = trim("Summary by:")
        break_down_disp = trim(captions->summary_by)					;008
        if (personnel_break_ind = 1)
;008            break_down_disp = trim(concat(trim(break_down_disp), " ","Personnel,"))
            break_down_disp = trim(concat(trim(break_down_disp), " ", captions->personnel))      ;008
        endif
;008        break_down_disp = trim(concat(trim(break_down_disp), " ", "Orderable/Activity"))
        break_down_disp = trim(concat(trim(break_down_disp), " ", captions->orderable_activity)) ;008 
        if (cell_break_ind = 1)
;008            break_down_disp = trim(concat(trim(break_down_disp), ", Cell"))
            break_down_disp = trim(concat(trim(break_down_disp), captions->cell_header))         ;008
        endif
        if (action_break_ind = 1)
;008            break_down_disp = trim(concat(trim(break_down_disp), ", Action"))
            break_down_disp = trim(concat(trim(break_down_disp), captions->action_header))		 ;008
        endif
        if (priority_break_ind = 1)
;008            break_down_disp = trim(concat(trim(break_down_disp), ", Priority"))
            break_down_disp = trim(concat(trim(break_down_disp), captions->priority_header))		 ;008
        endif
        break_down_length = size(trim(break_down_disp))

    head page
      
        beg_dt_tm    = cnvtdatetime(request->beg_dt_tm)
        end_dt_tm    = cnvtdatetime(request->end_dt_tm)
        ;col   1, Institution_name       ;001    
;008        call center("B L O O D   B A N K   W O R K L O A D   R E P O R T",1,125)
;008        col 104, "Time:"
        call center(captions->rpt_title,1,125)                         ;008
        col 104, captions->rpt_time                                    ;008
        col 118, curtime "@TIMENOSECONDS;;M" 
        row + 1
;008        col 104, "As of Date:"
        col 104, captions->rpt_as_of_date                              ;008
        col 118, curdate "@DATECONDENSED;;d" 
        ;end row
%i cclsource:bbt_print_location_info.inc
        call center(substring(1, break_down_length, break_down_disp), 1, 125) ;002
                
        row + 1
;008        col 1, "Blood Bank Owner: ",
        col  1, captions->blood_bank_owner                             ;008
        col 19, owner_area_disp,

        row + 1
;008        col 1, "Inventory Area: ",
        col  1, captions->inventory_area                               ;008
        col 17, inv_area_disp

        row + 2
;008            col  32, "Beginning Date:"
            col  32, captions->begin_date                              ;008
            col  48, beg_dt_tm "@DATETIMECONDENSED;;d" 
;008            col  69, "Ending Date:"
            col  69, captions->ending_date                             ;008
            col  82, end_dt_tm "@DATETIMECONDENSED;;d" 
        ;end row
        row + 1
            col 1, dash_line
        ;end row
        row + 1
;008            col 1, "Orderable - Detail / Activity (OD/A)"
;008            col 75, "Totals"
            col   1, captions->orderable_detail                        ;008
            col  75, captions->totals                                  ;008
        ;end row
        row + 1
;008            col 5, "Cell (C)"
;008            col 25, "Action (A)"
;008            col 50, "Priority (P)"
;008            col 72, "(P)"
;008            col 82, "(A)"
;008            col 92, "(C)"
;008            col 100, "(OD/A)"
            col   5, captions->cell                                    ;008
            col  25, captions->action                                  ;008
            col  50, captions->priority                                ;008
            col  72, captions->paren_p                                 ;008
            col  82, captions->paren_a                                 ;008
            col  92, captions->paren_c                                 ;008
            col 100, captions->paren_od_a                              ;008

        ;end row
        row + 1
            col 1, dash_line
        ;end row
        if (sort_person > 0)
            if (continue_ind = 1)
                row + 1
                cont_disp = trim(concat("(", trim(p.username), " continued)"))
                col 1, cont_disp
                row + 1
            endif
        endif

    head sort_person
        if (sort_person > 0)
            if (row > 50)
                break
            endif
            row + 1
                if (trim(p.username) > "")
                    user = p.username 
                    dash = " - "
                else
                    user = captions->unknown										;008
                    dash = "   "
                endif
                col 1, captions->user												;008
                full_user_disp = trim(concat(trim(user), dash, trim(p.name_full_formatted))) 
                col 7, full_user_disp "###################################"
            ;end row
            person_cnt = 0
            continue_ind = 1
        endif
        
    head activity_event_cd
        row + 0

    head task_assay_cd
        first_time_cell = 1
        first_time_status = 1
        first_time_priority = 1
        row + 2
            if (row > 52)
                break
                row + 1
            endif
            col 1, activity_event_disp "##################################################"
        if (product_event_ind != 1)
            if (row > 55)
                break
                row + 1
            endif
            if (sort_cell > 0 or sort_action > 0 or sort_priority > 0)
                row + 1
            endif
        endif
        ;end row
        task_assay_cnt = 0

    head sort_cell
        if (sort_cell > 0)
            if (first_time_cell = 0)
                row + 1
            endif
            if (row > 55)
                break
                row + 1
            endif
            col 5, bb_order_cell_disp "###############"
            first_time_status = 1
            first_time_priority = 1
        endif
        bb_order_cell_cnt = 0
        first_time_cell = 0

    head sort_action
        if (sort_action > 0)
            if (product_event_ind = 0)  
                if (first_time_status = 0)
                    row + 1
                endif               
                if (row > 55)
                    break
                    row + 1
                endif
                if (sort_action = 1)
                    status_sort_disp = "Perform Only"
                elseif (sort_action = 2)
                    status_sort_disp = "Perform/Verify"
                elseif (sort_action = 3)
                    status_sort_disp = "Verify Only"
                elseif (sort_action = 4)
                    status_sort_disp = "Corrected"
                elseif (sort_action = 0)
                    status_sort_disp = ""               
                else
                    status_sort_disp = "ERROR"
                endif
                col 25, status_sort_disp
            endif
            first_time_status = 0
            status_cnt = 0
            first_time_priority = 1
        endif

    head sort_priority
        if (sort_priority > 0)
            if (first_time_priority = 0)
                row + 1
            endif
            if (row > 55)
                break
                row + 1
            endif
            col 50, report_priority_disp "####################"
        endif
        first_time_priority = 0
        priority_cnt = 0
        
    detail
        person_cnt = person_cnt + 1
        task_assay_cnt = task_assay_cnt + 1
        bb_order_cell_cnt = bb_order_cell_cnt + 1
        priority_cnt = priority_cnt + 1
        status_cnt = status_cnt + 1

    foot sort_priority
        if (sort_priority > 0)
            if (sort_priority > 0)
                if (row > 55)
                    break
                    row + 1
                endif          
                col 70, priority_cnt "######;R"
            endif
        endif

    foot sort_action 
        if (product_event_ind = 0)
            if (row > 55)
                break
                row + 1
            endif
            if (sort_priority > 0)  
                row + 1
                col 70, "------"
                if (sort_action > 0)
                    if (row > 55)
                        break
                    endif          
                    row + 1     
                    s_disp = trim(concat(captions->total, trim(status_sort_disp), ")"))	;008
                    col 25, s_disp "##############################"
                endif
            endif
            if (sort_action > 0)
                col 80, status_cnt "######;R"                
                row + 1
            endif
        endif

    foot sort_cell
        if (sort_cell > 0)
            if (row > 55)
                break
                row + 1
            endif     
            if (sort_action > 0) ; or sort_priority > 0)  
                col 80, "------"
                if (row > 55)
                    break
                endif
                row + 1
                b_disp = trim(concat(captions->total, trim(bb_order_cell_disp), ")"))
                col 5, b_disp "#########################"
            endif
            if (sort_priority > 0 and (NOT sort_action > 0))
                if (row > 55)
                    break
                endif
                row + 1
            endif
            col 90, bb_order_cell_cnt "######;R"
            row + 1
        endif

    foot task_assay_cd
        if (row > 55)
            break
            row + 1
        endif       
        if (product_event_ind != 1)
            if (sort_cell > 0 or sort_action > 0) ; or sort_priority >0)
                if (bb_order_cell_cd > 0 and sort_cell > 0)
                    col 90, "------"
                else
                    col 80, "------"
                endif
                if (row > 55)
                    break
                endif  
            endif
            if (sort_cell > 0 or sort_action > 0 or sort_priority >0)
                row + 1    
                o_disp = trim(concat(captions->total, trim(activity_event_disp), ")"))
                col 1, o_disp
            endif
        endif
        col 100, task_assay_cnt "######;R"
        
    foot sort_person 
        if (row > 55)
            break
        endif       
        row + 1
            col 100, "------"
        ;end row
        if (row > 55)
            break
        endif
        row + 1
            if (sort_person > 0)
                p_disp = trim(concat(captions->total, trim(user), ")"))
            else
                p_disp = trim(concat(captions->total, ")" ))
            endif
            col 1, p_disp "##################"
            col 100, person_cnt "######;R"
        ;end row
        if (row > 55)
            break
        else
            row + 1
                col 1, dash_line
            ;end row
        endif
        continue_ind = 0

    foot page  
        row  57
            col   1, dash_line,
        ;end row
        row + 1
;008            col   1, "Report ID: BBT_RPT_WORKLOAD"
;008            col  58, "Page:"
            col   1, captions->rpt_id                                  ;008
            col  58, captions->rpt_page                                ;008
            col  64, curpage "###;L"
;008            col 100, "Printed:"
            col 100, captions->printed                                 ;008
            col 110, curdate "@DATECONDENSED;;d" 
            col 120, curtime "@TIMENOSECONDS;;M" 
        ;end row

    foot report
        row  60
;008            col  51, "* * * End of Report * * *"
            COL  51, captions->end_of_report                           ;008
        ;end row
        select_ok_ind = 1
        
    with nocounter, outerjoin(d_p), nullreport, maxrow = 61, compress

    if (select_ok_ind = 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[1].operationname = "bbt_rpt_workload"
        set reply->status_data->subeventstatus[1].operationstatus = "F"
        set reply->status_data->subeventstatus[1].TargetObjectName = "select"
        set reply->status_data->subeventstatus[1].TargetObjectValue = "failed for select of workload structure"
        go to Exit_Script
    endif

    set rpt_cnt = rpt_cnt +1
    set stat = alterlist(reply->rpt_list, rpt_cnt)
    set reply->rpt_list[rpt_cnt].rpt_filename = cpm_cfn_info->file_name_path

    if (trim(request->batch_selection) > " ")
        set spool value(reply->rpt_list[rpt_cnt].rpt_filename) value(request->output_dist)
    endif

end

#EXIT_SCRIPT

if (select_ok_ind = 1)
    set reply->status_data->status = "S"
endif

;call echo(build("Status: ",reply->status_data->status))

;for (idx = 1 to size(workload_rec->workload,5))
;    call echo(build(idx, ": "))
;    call echo(build(    "prsnl_id: ",           workload_rec->workload[idx].personnel_id ))
;    call echo(build(    "act_event_cd: ",       workload_rec->workload[idx].activity_event_cd   ))
;    call echo(build(    "task_assay_cd: ",      workload_rec->workload[idx].task_assay_cd      ))
;    call echo(build(    "interp_cd: ",          workload_rec->workload[idx].interp_cd          ))
;    call echo(build(    "report_priority_cd: ", workload_rec->workload[idx].report_priority_cd ))
;    call echo(build(    "bb_order_cell_cd: ",   workload_rec->workload[idx].bb_order_cell_cd    ))
;    call echo(build(    "report_ind: ",         workload_rec->workload[idx].report_ind          ))
;    call echo(build(    "prod_event_ind: ",     workload_rec->workload[idx].product_event_ind   ))
;    call echo(build(    "status: ",             workload_rec->workload[idx].status              ))
;    call echo(build(". "))
;endfor

end go

;Generated by GNU enscript 1.6.4.
