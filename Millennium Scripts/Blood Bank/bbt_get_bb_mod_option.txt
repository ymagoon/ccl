 ;;Solution_Test/script/PathNet -- BB Transfusion/BBT_GET_BB_MOD_OPTION/BBT_GET_BB_MOD_OPTION.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2005 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bbt_get_bb_mod_option.prg
        Object name:            bbt_get_bb_mod_option
        Request #:              225915

        Product:                Blood Bank
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            Rev 8.0

        Program purpose:        Retrieve the current Blood Bank modification options
                                based on the most recent effective dates and times.

        Tables read:            bb_mod_device,
                                bb_mod_option,
                                bb_mod_orig_product,
                                bb_mod_new_product,
                                bb_mod_special_testing,
                                code_value,
                                product_index, 
                                bb_isbt_product_type
 
        Tables updated:         None
        Executing from:         BBProductModification.dll

        Special Notes:          By default all active modification options and the
                                option details (i.e. original products, new products,
                                special testing attributes, and devices) are returned.  
                                
                                The request->load_inactive_ind can be set 
                                to 1 in order to retrieve the most recent active and
                                inactive modification options.
                                
                                The request->load_option_list_ind can be set to 1 in
                                order to retrieve a list of modification options
                                without all of the option details.
                                
                                Populate the request->option_id to load a specific
                                modification option.
                                
                                NOTE: The script confirms that all of the product type 
                                codes are active for each modification option loaded.
                                If a product type has been inactivated after it was added
                                to the modification option and the request is to only
                                return active options, the option will be return as
                                though it is inactive.  This is necessary so that the
                                BB Modify Products application doesn't allow the user to
                                attempt to create new products for an inactive product type.
                                

;~DB~****************************************************************************************
;*                      GENERATED MODIFICATION CONTROL LOG                                  *
;********************************************************************************************
;*                                                                                          *
;*Mod Date     Engineer             ITN     Feature      Comment                            *
;*--- -------- -------------------- ------- ------------ -----------------------------------*
;*000 08/12/02 Hal Patchen          0100001 22267        Initial Release                    *
;*001 12/19/03 Hal Patchen          0110475 39436        Add ability to return a list of    *
;*                                                       options or a specific option by id *
;*002 10/24/05 Jason Coy            0111987 66427        Add label_info_prompt_ind to reply *
;*                                                       and modification records.          *
;*003 10/25/06 Jason Osborn                              Return ISBT ENumbers for products  *
;*003 05/30/07 Tom Brecht           126339  131115       Added generate_isbt_nbr_ind.       *
;*004 05/10/10 Amy Gum              143763  245972       Add Fields for Recon RBC and change*
;  			               		         				 how inactive products are handled  *
;*015 06/18/10 Ronda Zheng          143763  256650       retrieve special testing ISBT meaning*
;*016 03/23/11 Amy Gum				148479  184829       Add Barcodes						*
;~DE~****************************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ***********************************/

drop program BBT_GET_BB_MOD_OPTION:dba go
create program BBT_GET_BB_MOD_OPTION:dba

/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
/*
record request
(
  1  load_inactive_ind                 = i2
  1  load_option_list_ind              = i2
  1  option_id                         = f8
)
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
record reply
(
  1  options[*]
     2  option_id                      = f8
     2  display                        = vc
     2  beg_effective_dt_tm            = dq8
     2  end_effective_dt_tm            = dq8
     2  new_product_ind                = i2
     2  split_ind                      = i2
     2  ad_hoc_ind                     = i2
     2  change_attribute_ind           = i2
     2  crossover_ind                  = i2
     2  pool_product_ind               = i2
     2  generate_prod_nbr_ind          = i2
     2  prod_nbr_prefix                = c10
     2  prod_nbr_ccyy_ind              = i2
     2  prod_nbr_starting_nbr          = i4
     2  dispose_orig_ind               = i2
     2  chg_orig_exp_dt_ind            = i2
     2  orig_nbr_days_exp              = i2
     2  orig_nbr_hrs_exp               = i2
     2  active_ind                     = i2
     2  updt_cnt                       = i4
     2  orig_prods[*]
        3  orig_product_cd                = f8
        3  orig_product_disp              = vc
        3  e_numbers[*]
           4  e_number                    = vc
     2  new_prods[*]
        3  mod_new_prod_id                = f8
        3  orig_product_cd                = f8
        3  orig_product_disp              = vc
        3  new_product_cd                 = f8
        3  new_product_disp               = vc
        3  quantity                       = f8
        3  default_sub_id_flag            = i2  ;0-No Default, 1-Uppercase, 2-Lowercase, 3-Numeric
        3  max_prep_hrs                   = f8
        3  default_orig_exp_ind           = i2
        3  calc_exp_drawn_ind             = i2
        3  default_exp_days               = f8
        3  default_exp_hrs                = f8
        3  allow_extend_exp_ind           = i2
        3  default_orig_vol_ind           = i2
        3  default_volume                 = f8
        3  calc_vol_ind                   = i2
        3  prompt_vol_ind                 = i2
        3  validate_vol_ind               = i2
        3  default_unit_of_meas_cd        = f8
        3  default_unit_of_meas_disp      = vc
        3  synonym_id                     = f8
        3  require_assign_ind             = i2
        3  bag_type_cd                    = f8
        3  bag_type_disp                  = vc
        3  crossover_reason_cd            = f8
        3  crossover_reason_disp          = vc
        3  allow_no_aborh_ind             = i2
        3  default_supplier_id            = f8
        3  spec_testings[*]
           4  special_testing_cd             = f8
           4  special_testing_disp           = vc
           4  special_testing_mean           = c12
           4  special_isbt                   = vc
        3  e_numbers[*]
           4  e_number                       = vc
        3  orig_plasma_prod_cd            = f8
        3  orig_plasma_prod_disp          = vc
        3  default_isbt_barcode			  = vc
        3  default_codabar_barcode	      = vc
     2  devices[*]
        3  device_type_cd                 = f8
        3  device_type_disp               = vc
        3  device_type_mean               = vc
        3  default_ind                    = i2
        3  max_capacity                   = f8
        3  start_stop_time_ind            = i2
        3  modification_duration          = f8
     2  label_info_prompt_ind          = i2
     2  generate_isbt_nbr_ind             = i2
     2  recon_rbc_ind                     = i2
%i cclsource:status_block.inc
)

set reply->status_data->status = "F"

/*****************************************************************************/
/* Variable declarations                                                     */
/*****************************************************************************/
set modify predeclare

declare stat                           = i4 with noconstant(0)
declare mo_cnt                         = i4 with noconstant(0)
declare mop_cnt                        = i4 with noconstant(0)
declare mnp_cnt                        = i4 with noconstant(0)
declare mst_cnt                        = i4 with noconstant(0)
declare isbt_cnt                       = i4 with noconstant(0)
declare md_cnt                         = i4 with noconstant(0)
declare inactive_cnt                        = i4 with noconstant(0)
declare cnt                            = i4 with noconstant(0)
declare errmsg                         = c132 with noconstant(fillstring(132," "))
declare error_check                    = i2 with noconstant(error(errmsg,1))

/****************************************************************************
*       Modification options record                                         *
*****************************************************************************/
record modification
(
  1  options[*]
     2  option_id                      = f8
     2  display                        = vc
     2  beg_effective_dt_tm            = dq8
     2  end_effective_dt_tm            = dq8
     2  new_product_ind                = i2
     2  split_ind                      = i2
     2  ad_hoc_ind                     = i2
     2  change_attribute_ind           = i2
     2  crossover_ind                  = i2
     2  pool_product_ind               = i2
     2  generate_prod_nbr_ind          = i2
     2  prod_nbr_prefix                = c10
     2  prod_nbr_ccyy_ind              = i2
     2  prod_nbr_starting_nbr          = i4
     2  dispose_orig_ind               = i2
     2  chg_orig_exp_dt_ind            = i2
     2  orig_nbr_days_exp              = i2
     2  orig_nbr_hrs_exp               = i2
     2  active_ind                     = i2
     2  updt_cnt                       = i4
     2  orig_prods[*]
        3  orig_product_cd                = f8
        3  orig_product_disp              = vc
        3  e_numbers[*]
           4  e_number                    = vc
     2  new_prods[*]
        3  mod_new_prod_id                = f8
        3  orig_product_cd                = f8
        3  orig_product_disp              = vc
        3  new_product_cd                 = f8
        3  new_product_disp               = vc
        3  quantity                       = f8
        3  default_sub_id_flag            = i2  ;0-No Default, 1-Uppercase, 2-Lowercase, 3-Numeric
        3  max_prep_hrs                   = f8
        3  default_orig_exp_ind           = i2
        3  calc_exp_drawn_ind             = i2
        3  default_exp_days               = f8
        3  default_exp_hrs                = f8
        3  allow_extend_exp_ind           = i2
        3  default_orig_vol_ind           = i2
        3  default_volume                 = f8
        3  calc_vol_ind                   = i2
        3  prompt_vol_ind                 = i2
        3  validate_vol_ind               = i2
        3  default_unit_of_meas_cd        = f8
        3  default_unit_of_meas_disp      = vc
        3  synonym_id                     = f8
        3  require_assign_ind             = i2
        3  bag_type_cd                    = f8
        3  bag_type_disp                  = vc
        3  crossover_reason_cd            = f8
        3  crossover_reason_disp          = vc
        3  allow_no_aborh_ind             = i2
        3  default_supplier_id            = f8
        3  spec_testings[*]
           4  special_testing_cd             = f8
           4  special_testing_disp           = vc
           4  special_testing_mean           = c12
           4  special_isbt                   = vc
        3  e_numbers[*]
           4  e_number                    = vc
        3  orig_plasma_prod_cd            = f8
        3  orig_plasma_prod_disp          = vc
        3  default_isbt_barcode			  = vc
        3  default_codabar_barcode	      = vc
     2  devices[*]
        3  device_type_cd                 = f8
        3  device_type_disp               = vc
        3  device_type_mean               = vc
        3  default_ind                    = i2
        3  max_capacity                   = f8
        3  start_stop_time_ind            = i2
        3  modification_duration          = f8
     2  label_info_prompt_ind          = i2
     2  generate_isbt_nbr_ind          = i2
     2  recon_rbc_ind                     = i2
)

/*****************************************************************************/
/* Load modification options.                                                */
/*****************************************************************************/
select into "nl:"
   mo.display_key
  ,beg_dt_tm = cnvtdatetime(mo.beg_effective_dt_tm) ";;q" 
  ,end_dt_tm = cnvtdatetime(mo.end_effective_dt_tm) ";;q" 

from
   bb_mod_option mo

plan mo  where mo.option_id > 0.0
           and ((request->load_inactive_ind = 0 and mo.active_ind = 1)
             or (request->load_inactive_ind = 1))
           and ((request->option_id > 0.0 and mo.option_id = request->option_id)
             or (request->option_id = 0.0))

order by
   mo.display_key
  ,end_dt_tm desc
  ,beg_dt_tm desc

head report
   mo_cnt = 0

detail
   ;*
   ;* Return most recent modification options.
   ;*
   mo_cnt = mo_cnt + 1
   if (mod(mo_cnt,10) = 1)
      stat = alterlist(modification->options, mo_cnt + 9)
   endif
   modification->options[mo_cnt].option_id = mo.option_id
   modification->options[mo_cnt].display = mo.display
   modification->options[mo_cnt].beg_effective_dt_tm = cnvtdatetime(mo.beg_effective_dt_tm)
   modification->options[mo_cnt].end_effective_dt_tm = cnvtdatetime(mo.end_effective_dt_tm)
   modification->options[mo_cnt].new_product_ind = mo.new_product_ind
   modification->options[mo_cnt].split_ind = mo.split_ind
   modification->options[mo_cnt].ad_hoc_ind = mo.ad_hoc_ind
   modification->options[mo_cnt].change_attribute_ind = mo.change_attribute_ind
   modification->options[mo_cnt].crossover_ind = mo.crossover_ind
   modification->options[mo_cnt].pool_product_ind = mo.pool_product_ind
   modification->options[mo_cnt].generate_prod_nbr_ind = mo.generate_prod_nbr_ind
   modification->options[mo_cnt].prod_nbr_prefix = mo.prod_nbr_prefix
   modification->options[mo_cnt].prod_nbr_ccyy_ind = mo.prod_nbr_ccyy_ind
   modification->options[mo_cnt].prod_nbr_starting_nbr = mo.prod_nbr_starting_nbr
   modification->options[mo_cnt].dispose_orig_ind = mo.dispose_orig_ind
   modification->options[mo_cnt].chg_orig_exp_dt_ind = mo.chg_orig_exp_dt_ind
   modification->options[mo_cnt].orig_nbr_days_exp = mo.orig_nbr_days_exp
   modification->options[mo_cnt].orig_nbr_hrs_exp = mo.orig_nbr_hrs_exp
   modification->options[mo_cnt].active_ind = mo.active_ind
   modification->options[mo_cnt].updt_cnt = mo.updt_cnt
   modification->options[mo_cnt].label_info_prompt_ind = mo.label_info_prompt_ind
   modification->options[mo_cnt].generate_isbt_nbr_ind = mo.generate_isbt_nbr_ind
   modification->options[mo_cnt].recon_rbc_ind = mo.recon_rbc_ind
foot report
   stat = alterlist(modification->options, mo_cnt)

with
   nocounter

;* Check for CCL errors.
set error_check = error(errmsg,0)
if (error_check != 0)
   call ErrorHandler("SELECT", "F", "BB_MOD_OPTION", errmsg)
   go to BUILD_REPLY
endif

;* Check for no modification options returned.
if (curqual = 0)
   go to SET_STATUS
endif

/*****************************************************************************/
/* Load original products for each modification option.                      */
/*****************************************************************************/
select into "nl:"
   d.seq
  ,mop.orig_product_cd
  ,pi.active_ind
  ,cv.active_ind

from
  (dummyt d with seq = value(mo_cnt))
  ,bb_mod_orig_product mop
  ,product_index pi
  ,code_value cv
  ,bb_isbt_product_type isbt
  
plan d   where d.seq <= mo_cnt
join mop where mop.option_id = modification->options[d.seq].option_id
join pi  where pi.product_cd = mop.orig_product_cd
join cv  where cv.code_value = pi.product_cd
join isbt where isbt.product_cd = outerjoin(pi.product_cd)
            and isbt.active_ind = outerjoin(1)
 
order by
   d.seq
  ,mop.orig_product_cd
  ,isbt.isbt_barcode

head report
   cnt = 0
   mop_cnt = 0

head d.seq
   cnt = d.seq
   mop_cnt = 0
   inactive_cnt = 0

head mop.orig_product_cd
   ;*
   ;* Return original products associated with the modification option.
   ;* If only active modification options are being returned, confirm the
   ;* product codes are active.  The modification option is considered inactive
   ;* if all product codes are found to be inactive.
   ;*
   if (request->load_inactive_ind = 0
   and (pi.active_ind = 0 or cv.active_ind = 0))
      inactive_cnt = inactive_cnt + 1
   endif
   mop_cnt = mop_cnt + 1
   if (mod(mop_cnt,10) = 1)
      stat = alterlist(modification->options[cnt].orig_prods, mop_cnt + 9)
   endif
   modification->options[cnt].orig_prods[mop_cnt].orig_product_cd = mop.orig_product_cd
   isbt_cnt = 0
   
head isbt.isbt_barcode
   if (size(trim(isbt.isbt_barcode), 1) > 0)
      if ((modification->options[cnt].new_product_ind = 1) and (modification->options[cnt].split_ind = 1) 
      and (request->option_id > 0.0))
         isbt_cnt = isbt_cnt + 1
         if (mod(isbt_cnt,10) = 1)
            stat = alterlist(modification->options[cnt].orig_prods[mop_cnt].e_numbers, isbt_cnt + 9)
         endif
         modification->options[cnt].orig_prods[mop_cnt].e_numbers[isbt_cnt].e_number = isbt.isbt_barcode
      endif
   endif

detail
   row+0
   
foot isbt.isbt_barcode
   row+0
   
foot mop.orig_product_cd
   stat = alterlist(modification->options[cnt].orig_prods[mop_cnt].e_numbers, isbt_cnt)
 
foot d.seq
	;If at least one original product is active, the option will be active
   if(inactive_cnt = mop_cnt)
       modification->options[cnt].active_ind = 0
   endif
   stat = alterlist(modification->options[cnt].orig_prods, mop_cnt)
   

with
   nocounter

;* Check for CCL errors.
set error_check = error(errmsg,0)
if (error_check != 0)
   call ErrorHandler("SELECT", "F", "BB_MOD_ORIG_PRODUCT", errmsg)
   go to BUILD_REPLY
endif

/*****************************************************************************/
/* Load new products and any associated attributes for each modification     */
/* option.                                                                   */
/*****************************************************************************/
select into "nl:"
   d.seq
  ,mnp.mod_new_prod_id
  ,mnp.new_product_cd
  ,pi.active_ind
  ,cv.active_ind
  ,mst.special_testing_cd

from
  (dummyt d with seq = value(mo_cnt))
  ,bb_mod_new_product mnp
  ,product_index pi
  ,code_value cv
  ,bb_mod_special_testing mst
  ,bb_isbt_product_type isbt
  ,bb_isbt_attribute_r biar
  ,bb_isbt_attribute   bia

plan d   where d.seq <= mo_cnt
join mnp where mnp.option_id = modification->options[d.seq].option_id
join pi  where pi.product_cd = mnp.new_product_cd
join cv  where cv.code_value = pi.product_cd
join mst where mst.mod_new_prod_id = outerjoin(mnp.mod_new_prod_id)
join isbt where isbt.product_cd = outerjoin(pi.product_cd)
            and isbt.active_ind = outerjoin(1)
join biar where biar.attribute_cd = outerjoin (mst.special_testing_cd)
            and biar.active_ind   = outerjoin(1)        
join bia  where bia.bb_isbt_attribute_id = outerjoin(biar.bb_isbt_attribute_id)
            and bia.active_ind = outerjoin(1)
order by
   d.seq
  ,mnp.mod_new_prod_id
  ,mst.special_testing_cd
  ,isbt.isbt_barcode

head report
   cnt = 0
   mnp_cnt = 0
   mst_cnt = 0

head d.seq
   cnt = d.seq
   mnp_cnt = 0
   inactive_cnt = 0

head mnp.mod_new_prod_id
   ;*
   ;* Return new products associated with the modification option if they exist.
   ;* If only active modification options are being returned, confirm the
   ;* product codes are active.  The modification option is considered inactive
   ;* if all product codes are found to be inactive.
   ;*
   if (request->load_inactive_ind = 0
   and (pi.active_ind = 0 or cv.active_ind = 0))
          inactive_cnt = inactive_cnt + 1
   endif
   mnp_cnt = mnp_cnt + 1
   if (mod(mnp_cnt,10) = 1)
      stat = alterlist(modification->options[cnt].new_prods, mnp_cnt + 9)
   endif
   modification->options[cnt].new_prods[mnp_cnt].mod_new_prod_id = mnp.mod_new_prod_id
   modification->options[cnt].new_prods[mnp_cnt].orig_product_cd = mnp.orig_product_cd
   modification->options[cnt].new_prods[mnp_cnt].new_product_cd = mnp.new_product_cd
   modification->options[cnt].new_prods[mnp_cnt].quantity = mnp.quantity
   modification->options[cnt].new_prods[mnp_cnt].default_sub_id_flag = mnp.default_sub_id_flag
   modification->options[cnt].new_prods[mnp_cnt].max_prep_hrs = mnp.max_prep_hrs
   modification->options[cnt].new_prods[mnp_cnt].default_orig_exp_ind = mnp.default_orig_exp_ind
   modification->options[cnt].new_prods[mnp_cnt].calc_exp_drawn_ind = mnp.calc_exp_drawn_ind
   modification->options[cnt].new_prods[mnp_cnt].default_exp_days = mnp.default_exp_days
   modification->options[cnt].new_prods[mnp_cnt].default_exp_hrs = mnp.default_exp_hrs
   modification->options[cnt].new_prods[mnp_cnt].allow_extend_exp_ind = mnp.allow_extend_exp_ind
   modification->options[cnt].new_prods[mnp_cnt].default_orig_vol_ind = mnp.default_orig_vol_ind
   modification->options[cnt].new_prods[mnp_cnt].default_volume = mnp.default_volume
   modification->options[cnt].new_prods[mnp_cnt].calc_vol_ind = mnp.calc_vol_ind
   modification->options[cnt].new_prods[mnp_cnt].prompt_vol_ind = mnp.prompt_vol_ind
   modification->options[cnt].new_prods[mnp_cnt].validate_vol_ind = mnp.validate_vol_ind
   modification->options[cnt].new_prods[mnp_cnt].default_unit_of_meas_cd = mnp.default_unit_of_meas_cd
   modification->options[cnt].new_prods[mnp_cnt].synonym_id = mnp.synonym_id
   modification->options[cnt].new_prods[mnp_cnt].require_assign_ind = mnp.require_assign_ind
   modification->options[cnt].new_prods[mnp_cnt].bag_type_cd = mnp.bag_type_cd
   modification->options[cnt].new_prods[mnp_cnt].crossover_reason_cd = mnp.crossover_reason_cd
   modification->options[cnt].new_prods[mnp_cnt].allow_no_aborh_ind = mnp.allow_no_aborh_ind
   modification->options[cnt].new_prods[mnp_cnt].default_supplier_id = mnp.default_supplier_id
   modification->options[cnt].new_prods[mnp_cnt].orig_plasma_prod_cd = mnp.orig_plasma_prod_cd
   modification->options[cnt].new_prods[mnp_cnt].default_isbt_barcode = mnp.isbt_barcode
   modification->options[cnt].new_prods[mnp_cnt].default_codabar_barcode = mnp.codabar_barcode
   mst_cnt = 0
   isbt_cnt = 0
 
head mst.special_testing_cd
   ;*
   ;* Return new product attributes if they exist.
   ;*
   if (mst.mod_new_prod_id > 0.0)
      mst_cnt = mst_cnt + 1
      if (mod(mst_cnt,10) = 1)
         stat = alterlist(modification->options[cnt].new_prods[mnp_cnt].spec_testings, mst_cnt + 9)
      endif
      modification->options[cnt].new_prods[mnp_cnt].spec_testings[mst_cnt]
        .special_testing_cd = mst.special_testing_cd
      modification->options[cnt].new_prods[mnp_cnt].spec_testings[mst_cnt]
        .special_isbt = bia.standard_display
   endif

head isbt.isbt_barcode
   if (size(trim(isbt.isbt_barcode), 1) > 0)
      if ((modification->options[cnt].new_product_ind = 1) and (modification->options[cnt].split_ind = 1) 
      and (request->option_id > 0.0))
         isbt_cnt = isbt_cnt + 1
         if (mod(isbt_cnt,10) = 1)
            stat = alterlist(modification->options[cnt].new_prods[mnp_cnt].e_numbers, isbt_cnt + 9)
         endif
         modification->options[cnt].new_prods[mnp_cnt].e_numbers[isbt_cnt].e_number = isbt.isbt_barcode
      endif
   endif
   
detail
   row+0
   
foot isbt.isbt_barcode
   row+0

foot mst.special_testing_cd
   row+0
 
foot mnp.mod_new_prod_id
   stat = alterlist(modification->options[cnt].new_prods[mnp_cnt].spec_testings, mst_cnt)
   stat = alterlist(modification->options[cnt].new_prods[mnp_cnt].e_numbers, isbt_cnt)
 
foot d.seq
   if(inactive_cnt = mnp_cnt)
       modification->options[cnt].active_ind = 0
   endif
   stat = alterlist(modification->options[cnt].new_prods, mnp_cnt)

with
   nocounter

   
;* Check for CCL errors.
set error_check = error(errmsg,0)
if (error_check != 0)
   call ErrorHandler("SELECT", "F", "BB_MOD_NEW_PRODUCT", errmsg)
   go to BUILD_REPLY
endif

/*****************************************************************************/
/* Load modification option devices.                                         */
/*****************************************************************************/
select into "nl:"
   d.seq
  ,md.device_type_cd

from
  (dummyt d with seq = value(mo_cnt))
  ,bb_mod_device md

plan d  where d.seq <= mo_cnt
join md where md.option_id = modification->options[d.seq].option_id

order by
   d.seq

head report
   md_cnt = 0
   cnt = 0

head d.seq
   cnt = d.seq
   md_cnt = 0

detail
   ;*
   ;* Return devices associated with the modification option if they exist.
   ;*
   md_cnt = md_cnt + 1
   if (mod(md_cnt,10) = 1)
      stat = alterlist(modification->options[cnt].devices, md_cnt + 9)
   endif
   modification->options[cnt].devices[md_cnt].device_type_cd = md.device_type_cd
   modification->options[cnt].devices[md_cnt].default_ind = md.default_ind
   modification->options[cnt].devices[md_cnt].max_capacity = md.max_capacity
   modification->options[cnt].devices[md_cnt].start_stop_time_ind = md.start_stop_time_ind
   modification->options[cnt].devices[md_cnt].modification_duration = md.modification_duration

foot d.seq
   stat = alterlist(modification->options[cnt].devices, md_cnt)

with
   nocounter

;* Check for CCL errors.
set error_check = error(errmsg,0)
if (error_check != 0)
   call ErrorHandler("SELECT", "F", "BB_MOD_DEVICE", errmsg)
   go to BUILD_REPLY
endif


/*****************************************************************************/
/* ErrorHandler subroutine                                                   */
/*****************************************************************************/
declare ErrorHandler(OperationName = c25,
                     OperationStatus = c1,
                     TargetObjectName = c25,
                     TargetObjectValue = vc) = NULL

subroutine ErrorHandler(OperationName,
                        OperationStatus,
                        TargetObjectName,
                        TargetObjectValue)
   declare error_cnt = i2 with private, noconstant(0)
   
   set error_cnt = size(reply->status_data.subeventstatus, 5)
   if (error_cnt > 1
   or (error_cnt = 1 and reply->status_data.subeventstatus[error_cnt].OperationStatus != ""))
      set error_cnt = error_cnt + 1
      set stat = alter(reply->status_data.subeventstatus, error_cnt)
   endif
   
   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[error_cnt].OperationName = OperationName
   set reply->status_data.subeventstatus[error_cnt].OperationStatus = OperationStatus
   set reply->status_data.subeventstatus[error_cnt].TargetObjectName = TargetObjectName
   set reply->status_data.subeventstatus[error_cnt].TargetObjectValue = TargetObjectValue
end

/*****************************************************************************/
/* Build reply                                                               */
/*****************************************************************************/
#BUILD_REPLY
set stat = alterlist(reply->options, mo_cnt)
set mo_cnt = 0
for (cnt = 1 to size(modification->options, 5))
   if ((request->load_inactive_ind = 0 and modification->options[cnt].active_ind = 1)
   or  (request->load_inactive_ind = 1))
      ;*
      ;* Copy modification options to reply
      ;*
      set mo_cnt = mo_cnt + 1
      set reply->options[mo_cnt].option_id = modification->options[cnt].option_id
      set reply->options[mo_cnt].display = modification->options[cnt].display
      set reply->options[mo_cnt].beg_effective_dt_tm = modification->options[cnt].beg_effective_dt_tm
      set reply->options[mo_cnt].end_effective_dt_tm = modification->options[cnt].end_effective_dt_tm
      set reply->options[mo_cnt].new_product_ind = modification->options[cnt].new_product_ind
      set reply->options[mo_cnt].split_ind = modification->options[cnt].split_ind
      set reply->options[mo_cnt].ad_hoc_ind = modification->options[cnt].ad_hoc_ind
      set reply->options[mo_cnt].change_attribute_ind = modification->options[cnt].change_attribute_ind
      set reply->options[mo_cnt].crossover_ind = modification->options[cnt].crossover_ind
      set reply->options[mo_cnt].pool_product_ind = modification->options[cnt].pool_product_ind
      set reply->options[mo_cnt].generate_prod_nbr_ind = modification->options[cnt].generate_prod_nbr_ind
      set reply->options[mo_cnt].prod_nbr_prefix = modification->options[cnt].prod_nbr_prefix
      set reply->options[mo_cnt].prod_nbr_ccyy_ind = modification->options[cnt].prod_nbr_ccyy_ind
      set reply->options[mo_cnt].prod_nbr_starting_nbr = modification->options[cnt].prod_nbr_starting_nbr
      set reply->options[mo_cnt].dispose_orig_ind = modification->options[cnt].dispose_orig_ind
      set reply->options[mo_cnt].chg_orig_exp_dt_ind = modification->options[cnt].chg_orig_exp_dt_ind
      set reply->options[mo_cnt].orig_nbr_days_exp = modification->options[cnt].orig_nbr_days_exp
      set reply->options[mo_cnt].orig_nbr_hrs_exp = modification->options[cnt].orig_nbr_hrs_exp
      set reply->options[mo_cnt].active_ind = modification->options[cnt].active_ind
      set reply->options[mo_cnt].updt_cnt = modification->options[cnt].updt_cnt
      set reply->options[mo_cnt].label_info_prompt_ind = modification->options[cnt].label_info_prompt_ind
      set reply->options[mo_cnt].generate_isbt_nbr_ind = modification->options[cnt].generate_isbt_nbr_ind
	  set reply->options[mo_cnt].recon_rbc_ind = modification->options[cnt].recon_rbc_ind
      ;* Determine if option details should be returned.
      if (request->load_option_list_ind = 0)
         ;*
         ;* Copy original products to reply
         ;*
         set mop_cnt = size(modification->options[cnt].orig_prods,5)
         set stat = alterlist(reply->options[mo_cnt].orig_prods, mop_cnt)
         for (mop_cnt = 1 to size(modification->options[cnt].orig_prods,5))
            set reply->options[mo_cnt].orig_prods[mop_cnt].orig_product_cd =
              modification->options[cnt].orig_prods[mop_cnt].orig_product_cd
            ;*
            ;* Copy Original Product ISBT ENumbers to reply
            ;*
            set isbt_cnt = size(modification->options[cnt].orig_prods[mop_cnt].e_numbers, 5)
            set stat = alterlist(reply->options[mo_cnt].orig_prods[mop_cnt].e_numbers, isbt_cnt)
            for (isbt_cnt = 1 to size(modification->options[cnt].orig_prods[mop_cnt].e_numbers, 5))
               set reply->options[cnt].orig_prods[mop_cnt].e_numbers[isbt_cnt].e_number = 
                  modification->options[cnt].orig_prods[mop_cnt].e_numbers[isbt_cnt].e_number
            endfor
         endfor
         ;*
         ;* Copy new products to reply
         ;*
         set mnp_cnt = size(modification->options[cnt].new_prods,5)
         set stat = alterlist(reply->options[mo_cnt].new_prods, mnp_cnt)
         for (mnp_cnt = 1 to size(modification->options[cnt].new_prods,5))
            set reply->options[mo_cnt].new_prods[mnp_cnt].mod_new_prod_id =
              modification->options[cnt].new_prods[mnp_cnt].mod_new_prod_id
            set reply->options[mo_cnt].new_prods[mnp_cnt].orig_product_cd =
              modification->options[cnt].new_prods[mnp_cnt].orig_product_cd
            set reply->options[mo_cnt].new_prods[mnp_cnt].new_product_cd =
              modification->options[cnt].new_prods[mnp_cnt].new_product_cd
            set reply->options[mo_cnt].new_prods[mnp_cnt].orig_plasma_prod_cd =
              modification->options[cnt].new_prods[mnp_cnt].orig_plasma_prod_cd
            set reply->options[mo_cnt].new_prods[mnp_cnt].quantity =
              modification->options[cnt].new_prods[mnp_cnt].quantity
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_sub_id_flag =
              modification->options[cnt].new_prods[mnp_cnt].default_sub_id_flag
            set reply->options[mo_cnt].new_prods[mnp_cnt].max_prep_hrs =
              modification->options[cnt].new_prods[mnp_cnt].max_prep_hrs
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_orig_exp_ind =
              modification->options[cnt].new_prods[mnp_cnt].default_orig_exp_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].calc_exp_drawn_ind =
              modification->options[cnt].new_prods[mnp_cnt].calc_exp_drawn_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_exp_days =
              modification->options[cnt].new_prods[mnp_cnt].default_exp_days
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_exp_hrs =
              modification->options[cnt].new_prods[mnp_cnt].default_exp_hrs
            set reply->options[mo_cnt].new_prods[mnp_cnt].allow_extend_exp_ind =
              modification->options[cnt].new_prods[mnp_cnt].allow_extend_exp_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_orig_vol_ind =
              modification->options[cnt].new_prods[mnp_cnt].default_orig_vol_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_volume =
              modification->options[cnt].new_prods[mnp_cnt].default_volume
            set reply->options[mo_cnt].new_prods[mnp_cnt].calc_vol_ind =
              modification->options[cnt].new_prods[mnp_cnt].calc_vol_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].prompt_vol_ind =
              modification->options[cnt].new_prods[mnp_cnt].prompt_vol_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].validate_vol_ind =
              modification->options[cnt].new_prods[mnp_cnt].validate_vol_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_unit_of_meas_cd =
              modification->options[cnt].new_prods[mnp_cnt].default_unit_of_meas_cd
            set reply->options[mo_cnt].new_prods[mnp_cnt].synonym_id =
              modification->options[cnt].new_prods[mnp_cnt].synonym_id
            set reply->options[mo_cnt].new_prods[mnp_cnt].require_assign_ind =
              modification->options[cnt].new_prods[mnp_cnt].require_assign_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].bag_type_cd =
              modification->options[cnt].new_prods[mnp_cnt].bag_type_cd
            set reply->options[mo_cnt].new_prods[mnp_cnt].crossover_reason_cd =
              modification->options[cnt].new_prods[mnp_cnt].crossover_reason_cd
            set reply->options[mo_cnt].new_prods[mnp_cnt].allow_no_aborh_ind =
              modification->options[cnt].new_prods[mnp_cnt].allow_no_aborh_ind
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_supplier_id =
              modification->options[cnt].new_prods[mnp_cnt].default_supplier_id
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_isbt_barcode =
              modification->options[cnt].new_prods[mnp_cnt].default_isbt_barcode
            set reply->options[mo_cnt].new_prods[mnp_cnt].default_codabar_barcode =
              modification->options[cnt].new_prods[mnp_cnt].default_codabar_barcode
            ;*
            ;* Copy special testings to reply
            ;*
            set mst_cnt = size(modification->options[cnt].new_prods[mnp_cnt].spec_testings,5)
            set stat = alterlist(reply->options[mo_cnt].new_prods[mnp_cnt].spec_testings, mst_cnt)
            for (mst_cnt = 1 to size(modification->options[cnt].new_prods[mnp_cnt].spec_testings,5))
               set reply->options[mo_cnt].new_prods[mnp_cnt].spec_testings[mst_cnt].special_testing_cd =
                 modification->options[cnt].new_prods[mnp_cnt].spec_testings[mst_cnt].special_testing_cd
               set reply->options[mo_cnt].new_prods[mnp_cnt].spec_testings[mst_cnt].special_isbt =
                 modification->options[cnt].new_prods[mnp_cnt].spec_testings[mst_cnt].special_isbt
            endfor
            
            ;*
            ;* Copy New Product ISBT ENumbers to reply
            ;*
            set isbt_cnt = size(modification->options[cnt].new_prods[mnp_cnt].e_numbers, 5)
            set stat = alterlist(reply->options[mo_cnt].new_prods[mnp_cnt].e_numbers, isbt_cnt)
            for (isbt_cnt = 1 to size(modification->options[cnt].new_prods[mnp_cnt].e_numbers, 5))
               set reply->options[cnt].new_prods[mnp_cnt].e_numbers[isbt_cnt].e_number = 
                  modification->options[cnt].new_prods[mnp_cnt].e_numbers[isbt_cnt].e_number
            endfor
       
         endfor
         ;*
         ;* Copy modification devices to reply
         ;*
         set md_cnt = size(modification->options[cnt].devices,5)
         set stat = alterlist(reply->options[mo_cnt].devices, md_cnt)
         for (md_cnt = 1 to size(modification->options[cnt].devices,5))
            set reply->options[mo_cnt].devices[md_cnt].device_type_cd =
              modification->options[cnt].devices[md_cnt].device_type_cd
            set reply->options[mo_cnt].devices[md_cnt].default_ind =
              modification->options[cnt].devices[md_cnt].default_ind
            set reply->options[mo_cnt].devices[md_cnt].max_capacity =
              modification->options[cnt].devices[md_cnt].max_capacity
            set reply->options[mo_cnt].devices[md_cnt].start_stop_time_ind =
              modification->options[cnt].devices[md_cnt].start_stop_time_ind
            set reply->options[mo_cnt].devices[md_cnt].modification_duration =
              modification->options[cnt].devices[md_cnt].modification_duration
         endfor
      endif
   endif
endfor
set stat = alterlist(reply->options, mo_cnt)

#SET_STATUS
if (error_check != 0)
   set reply->status_data->status = "F"
elseif (mo_cnt = 0)
   set reply->status_data->status = "Z"
else
   set reply->status_data->status = "S"
endif

#EXIT_SCRIPT
free record modification

end
go

;Generated by GNU enscript 1.6.4.
