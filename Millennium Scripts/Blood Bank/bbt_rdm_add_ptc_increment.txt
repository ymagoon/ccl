 ;;Solution_Test/script/PathNet -- BB Transfusion/BB_OCD_README_SCRIPTS/bbt_rdm_add_ptc_increment.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2004 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_rdm_add_ptc_increment.prg
        Object name:            bbt_rdm_add_ptc_increment
        Request #:

        Product:                PathNet
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        The purpose of this application is to create a new
                                row on the DM_INFO table to control how many person_id's
                                are processed in one increment of the main select for 
                                the PTC Export and the PTC Report.


        Tables read,            TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
        and access method:      --------------------    -----------------------------
                                dm_info                 unique

        Tables updated:         dm_info                 unique

        Executing from:         ccl program - readme

        Special Notes:          Each section should clearly identify what the purpose
                                of that README step is.  And ALL README steps in this
                                file should be considered RUN ONCE.

        Run Occurance:          (select ONE of the following)
                                -----------------------------
                                [X] 1. RUN ONCE
                                [ ] 2. RUN MANY

        ReadMe Category:        (select ONE of the following)
                                -----------------------------
                                [X] 1. Data Load
                                [ ] 2. Data Conversion
                                [ ] 3. Data Migration

        Execution Time:         (select ONE of the following)
                                ------------------------------------
                                [X] 1. Uptime before uptime schema.
                                [ ] 2. Uptime after uptime schema.
                                [ ] 3. Downtime before downtime schema.
                                [ ] 4. Downtime after downtime schema.
                                [ ] 5. Uptime after all other components.

        Exec. Justification:    Create a new row on the DM_INFO table.

        Parent Script:          n/a

        Check Script:           n/a

        Data file for import:   n/a

        Execution Duration:     (select ONE of the following)
                                ----------------------------------
                                [X] 1. Fixed Time
                                [ ] 2. Driver Table: ___________________________

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 07/01/04 JO7236               Initial Release                     *
;     001 08/06/04 JO7236               Added PTC_REPORT_LOOP_INCREMENT.    *
;~DE~************************************************************************

;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_rdm_add_ptc_increment:dba go
create program bbt_rdm_add_ptc_increment:dba

%i cclsource:pathnet_ocd_subroutines.inc

declare ptc_loop_increment =  c18 with constant("PTC_LOOP_INCREMENT")
declare ptc_report_loop_increment = c25 with constant("PTC_REPORT_LOOP_INCREMENT")
declare pathnet_bbt = c11 with constant("PATHNET_BBT")
declare export_increment = c4 with constant("5000")
declare report_increment = c4 with constant("1000")
declare sREADME_NAME = c25 with constant("bbt_rdm_add_ptc_increment")
declare iStatus = i2
CALL LOGSCRIPTSTART(sREADME_NAME)

select into "nl:"
from dm_info dm
where dm.info_domain = pathnet_bbt
  and dm.info_name = ptc_loop_increment
with counter

if (curqual = 0)  ; Row doesn't exist, let's add it.
   insert into dm_info dm
      set dm.info_domain = pathnet_bbt
         ,dm.info_name = ptc_loop_increment
         ,dm.info_date = cnvtdatetime(curdate,curtime)
         ,dm.info_char = export_increment
         ,dm.updt_dt_tm = cnvtdatetime(curdate,curtime)
      if (curqual = 0)
         set sMsg = build("Unable to insert DM_INFO Row.")
         call logmsg(sMsg, e_DISPMSG)
         set iStatus = 1
         rollback
      else
         set sMsg = build("DM_INFO row successfully inserted.")
         call logmsg(sMsg, e_DISPMSG)
         commit   
      endif     
else    ; Row already exists, don't add again. 
    set sMsg = build("DM_INFO row already exists.")
    call logmsg(sMsg, e_DISPMSG)
endif

select into "nl:"
from dm_info dm
where dm.info_domain = pathnet_bbt
  and dm.info_name = ptc_report_loop_increment
with counter

if (curqual = 0)  ; Row doesn't exist, let's add it.
   insert into dm_info dm
      set dm.info_domain = pathnet_bbt
         ,dm.info_name = ptc_report_loop_increment
         ,dm.info_date = cnvtdatetime(curdate,curtime)
         ,dm.info_char = report_increment
         ,dm.updt_dt_tm = cnvtdatetime(curdate,curtime)
      if (curqual = 0)
         set sMsg = build("Unable to insert DM_INFO Row.")
         call logmsg(sMsg, e_DISPMSG)
         set iStatus = 1
         rollback
      else
         set sMsg = build("DM_INFO row successfully inserted.")
         call logmsg(sMsg, e_DISPMSG)
         commit   
      endif     
else    ; Row already exists, don't add again. 
    set sMsg = build("DM_INFO row already exists.  Readme Successful!.")
    call logmsg(sMsg, e_DISPMSG)
endif

if (iStatus = 0)
	call logstatus("Execution Successful","S")
else
	call logstatus("Execution Failed","F")
endif

end go

;Generated by GNU enscript 1.6.4.
