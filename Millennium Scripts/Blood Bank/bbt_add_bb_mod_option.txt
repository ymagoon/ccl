 ;;Solution_Test/script/PathNet -- BB Transfusion/BBT_ADD_BB_MOD_OPTION/BBT_ADD_BB_MOD_OPTION.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2005 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bbt_add_bb_mod_option.prg
        Object name:            bbt_add_bb_mod_option
        Request #:              225917

        Product:                Blood Bank
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            Rev 8.0

        Program purpose:        Adds a new Blood Bank modification option.

        Tables read:            bb_mod_device,
                                bb_mod_option,
                                bb_mod_orig_product,
                                bb_mod_new_product,
                                bb_mod_special_testing,
                                bb_mod_pool_nbr

        Tables updated:         bb_mod_device,
                                bb_mod_option,
                                bb_mod_orig_product,
                                bb_mod_new_product,
                                bb_mod_special_testing,
                                bb_mod_pool_nbr

        Executing from:         BBProductModification.dll

        Special Notes:          NONE

;~DB~****************************************************************************************
;*                      GENERATED MODIFICATION CONTROL LOG                                  *
;********************************************************************************************
;*                                                                                          *
;*Mod Date     Engineer             ITN     Feature      Comment                            *
;*--- -------- -------------------- ------- ------------ -----------------------------------*
;*000 09/03/02 Hal Patchen          0100001 22267        Initial Release                    *
;*001 04/25/03 Hal Patchen          0106020 30552        Set pool starting number to 1 less *
;*                                                       than the value passed in the req   *
;*002 10/25/05 Jeff Wain            0116901 63252        Remove formating around y to allow *
                                                         for large sequences                *
;*002 10/25/05 Jason Coy            0111987 66427        Adding label_info_prompt_ind to the*
;*                                                       request. Set table value           *
;*                                                       accordingly.                       *
;*003 05/30/07 Tom Brecht           126339  131115       Added generate_isbt_nbr_ind.       *
;*005 05/10/10 Amy Gum              143763  145972       Add fields for Recon RBC           *
;~DE~****************************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ***********************************/

drop program BBT_ADD_BB_MOD_OPTION:dba go
create program BBT_ADD_BB_MOD_OPTION:dba

/****************************************************************************
* Request record                                                            *
****************************************************************************/
/*
record request
(
  1  display                        = vc
  1  new_product_ind                = i2
  1  split_ind                      = i2
  1  ad_hoc_ind                     = i2
  1  change_attribute_ind           = i2
  1  crossover_ind                  = i2
  1  pool_product_ind               = i2
  1  generate_prod_nbr_ind          = i2
  1  prod_nbr_prefix                = c10
  1  prod_nbr_ccyy_ind              = i2
  1  prod_nbr_starting_nbr          = i4
  1  dispose_orig_ind               = i2
  1  chg_orig_exp_dt_ind            = i2
  1  orig_nbr_days_exp              = f8
  1  orig_nbr_hrs_exp               = f8
  1  active_ind                     = i2
  1  orig_prods[*]
     2  orig_product_cd                = f8
  1  new_prods[*]
     2  orig_product_cd                = f8
     2  new_product_cd                 = f8
     2  quantity                       = f8
     2  default_sub_id_flag            = i2  ;0-No Default, 1-Uppercase, 2-Lowercase, 3-Numeric
     2  max_prep_hrs                   = f8
     2  default_orig_exp_ind           = i2
     2  calc_exp_drawn_ind             = i2
     2  default_exp_days               = f8
     2  default_exp_hrs                = f8
     2  allow_extend_exp_ind           = i2
     2  default_orig_vol_ind           = i2
     2  default_volume                 = f8
     2  calc_vol_ind                   = i2
     2  prompt_vol_ind                 = i2
     2  validate_vol_ind               = i2
     2  default_unit_of_meas_cd        = f8
     2  synonym_id                     = f8
     2  require_assign_ind             = i2
     2  bag_type_cd                    = f8
     2  crossover_reason_cd            = f8
     2  allow_no_aborh_ind             = i2
     2  default_supplier_id            = f8
     2  spec_testings[*]
        3  special_testing_cd             = f8
     2  orig_plasma_prod_cd            = f8
     2  default_isbt_barcode		   = vc
     2  default_codabar_barcode		   = vc
  1  devices[*]
     2  device_type_cd                 = f8
     2  default_ind                    = i2
     2  max_capacity                   = f8
     2  start_stop_time_ind            = i2
     2  modification_duration          = f8
  1  label_info_prompt_ind          = i2
  1  generate_isbt_nbr_ind             = i2
  1  recon_rbc_ind                     = i2
)
*/

/****************************************************************************
* Reply record                                                              *
****************************************************************************/
record reply
(
   1  option_id                        = f8
   1  new_prods[*]
      2  mod_new_prod_id                  = f8
      2  orig_product_cd                  = f8
      2  new_product_cd                   = f8
      2  orig_plasma_prod_cd              = f8
%i cclsource:status_block.inc
)

/****************************************************************************
* Error check record                                                        *
****************************************************************************/
record err_chk
(
   1  failed_ind                          = i2
   1  qual[*]
      2  status                           = i4
      2  error_nbr                        = i4
      2  error_msg                        = vc
)

set reply->status_data->status = "F"

/*****************************************************************************/
/* Variable declarations                                                     */
/*****************************************************************************/
set modify predeclare

declare display_key_new                = vc with noconstant(" ")
declare mop_cnt                        = i4 with noconstant(0)
declare mnp_cnt                        = i4 with noconstant(0)
declare mst_cnt                        = i4 with noconstant(0)
declare md_cnt                         = i4 with noconstant(0)
declare cnt                            = i4 with noconstant(0)
declare yr                             = i2 with noconstant(0)
declare bb_mod_pool_nbr_id             = f8 with noconstant(0.0)
declare errmsg                         = c132 with noconstant(fillstring(132," "))
declare error_check                    = i2 with noconstant(error(errmsg,1))
declare errcnt                         = i4 with noconstant(0)
declare stat                           = i4 with noconstant(0)

/*****************************************************************************/
/* Verify modification option display key is unique.                         */
/*****************************************************************************/
set display_key_new = cnvtupper(cnvtalphanum(request->display))

select into "nl:"
   mo.display_key
from
   bb_mod_option mo
plan mo where mo.display_key = display_key_new
with nocounter

if (curqual > 0)
   set errmsg = build("Display key not unique:", display_key_new)
   call ErrorHandler("SELECT", "F", "BB_MOD_OPTION", errmsg)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif

/*****************************************************************************/
/* Load modification option sequence id.                                     */
/*****************************************************************************/
select into "nl:"
   y = seq(reference_seq,nextval)
from
   dual
detail
   reply->option_id = y
with
   format,
   counter

if (curqual = 0)
   set errmsg = "Unable to obtain reference sequence id"
   call ErrorHandler("SELECT", "F", "DUAL", errmsg)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif

/*****************************************************************************/
/* Insert modification option.                                               */
/*****************************************************************************/
insert into bb_mod_option mo
set
   mo.option_id = reply->option_id,
   mo.display = request->display,
   mo.display_key = display_key_new,
   mo.beg_effective_dt_tm = cnvtdatetime(curdate, curtime3),
   mo.end_effective_dt_tm = cnvtdatetime("31-DEC-2100 23:59:59.99"),
   mo.new_product_ind = request->new_product_ind,
   mo.split_ind = request->split_ind,
   mo.ad_hoc_ind = request->ad_hoc_ind,
   mo.change_attribute_ind = request->change_attribute_ind,
   mo.crossover_ind = request->crossover_ind,
   mo.pool_product_ind = request->pool_product_ind,
   mo.generate_prod_nbr_ind = request->generate_prod_nbr_ind,
   mo.prod_nbr_prefix = request->prod_nbr_prefix,
   mo.prod_nbr_ccyy_ind = request->prod_nbr_ccyy_ind,
   mo.prod_nbr_starting_nbr = request->prod_nbr_starting_nbr,
   mo.dispose_orig_ind = request->dispose_orig_ind,
   mo.chg_orig_exp_dt_ind = request->chg_orig_exp_dt_ind,
   mo.orig_nbr_days_exp = request->orig_nbr_days_exp,
   mo.orig_nbr_hrs_exp = request->orig_nbr_hrs_exp,
   mo.active_ind = request->active_ind,
   mo.active_status_cd = if (request->active_ind = 1)
                            reqdata->active_status_cd
                         else
                            reqdata->inactive_status_cd
                         endif,
   mo.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
   mo.active_status_prsnl_id = reqinfo->updt_id,
   mo.updt_applctx = reqinfo->updt_applctx,
   mo.updt_task = reqinfo->updt_task,
   mo.updt_dt_tm = cnvtdatetime(curdate, curtime3),
   mo.updt_id = reqinfo->updt_id,
   mo.updt_cnt = 0,
   mo.label_info_prompt_ind = request->label_info_prompt_ind,
   mo.generate_isbt_nbr_ind = request->generate_isbt_nbr_ind,
   mo.recon_rbc_ind = request->recon_rbc_ind
with
   nocounter

;* Check for CCL errors.
set error_check = error(errmsg,0)
if (error_check != 0)
   call ErrorHandler("INSERT", "F", "BB_MOD_OPTION", errmsg)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif

;* Check for no modification options inserted.
if (curqual = 0)
   set errmsg = "Insert failed."
   call ErrorHandler("INSERT", "F", "BB_MOD_OPTION", errmsg)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif


/*****************************************************************************/
/* Insert original products associated with the modification option.         */
/*****************************************************************************/
set mop_cnt = size(request->orig_prods, 5)

;* Validate at least 1 original product exists.
if (mop_cnt = 0)
   set errmsg = "No original products found in request."
   call ErrorHandler("SIZE", "F", "REQUEST->ORIG_PRODS", errmsg)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif

set stat = alterlist(err_chk->qual, mop_cnt)

insert into
   (dummyt d with seq = value(mop_cnt)), 
   bb_mod_orig_product mop
set
   mop.option_id = reply->option_id,
   mop.orig_product_cd = request->orig_prods[d.seq].orig_product_cd,
   mop.updt_applctx = reqinfo->updt_applctx,
   mop.updt_task = reqinfo->updt_task,
   mop.updt_dt_tm = cnvtdatetime(curdate, curtime3),
   mop.updt_id = reqinfo->updt_id,
   mop.updt_cnt = 0
plan d
join mop where mop.option_id = reply->option_id
           and mop.orig_product_cd = request->orig_prods[d.seq].orig_product_cd
with
   nocounter,
   status(err_chk->qual[d.seq].status,
          err_chk->qual[d.seq].error_nbr,
          err_chk->qual[d.seq].error_msg)

;* Check for CCL insertion errors.
set err_chk->failed_ind = 0
for (errcnt = 1 to mop_cnt)
   if (err_chk->qual[errcnt].status = 0)
      set errmsg = build(
        "Error (", err_chk->qual[errcnt].error_nbr, "):", err_chk->qual[errcnt].error_msg) 
      call ErrorHandler("INSERT", "F", "BB_MOD_ORIG_PRODUCT", errmsg)
      set err_chk->failed_ind = 1
   endif
endfor
if (err_chk->failed_ind = 1)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif

/*****************************************************************************/
/* Load new product sequence ids.                                            */
/*****************************************************************************/
set mnp_cnt = size(request->new_prods,5)

;* Validate at least 1 new product exists.
if (mnp_cnt = 0)
   set errmsg = "No new products found in request."
   call ErrorHandler("SIZE", "F", "REQUEST->NEW_PRODS", errmsg)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif

set stat = alterlist(reply->new_prods, mnp_cnt)

for (cnt = 1 to mnp_cnt)
   set reply->new_prods[cnt].orig_product_cd = request->new_prods[cnt].orig_product_cd
   set reply->new_prods[cnt].new_product_cd = request->new_prods[cnt].new_product_cd
   set reply->new_prods[cnt].orig_plasma_prod_cd = request->new_prods[cnt].orig_plasma_prod_cd
   select into "nl:"
      y = seq(reference_seq,nextval)
   from
      dual
   detail
      reply->new_prods[cnt].mod_new_prod_id = y
   with
      format,
      counter
   if (curqual = 0)
      set errmsg = "Unable to obtain reference sequence id"
      call ErrorHandler("SELECT", "F", "DUAL", errmsg)
      set reqinfo->commit_ind = 0
      go to EXIT_SCRIPT
   endif
endfor

/*****************************************************************************/
/* Insert new products associated with the modification option.              */
/*****************************************************************************/
set stat = alterlist(err_chk->qual, mnp_cnt)

insert into
   (dummyt d with seq = value(mnp_cnt)), 
   bb_mod_new_product mnp
set
   mnp.mod_new_prod_id = reply->new_prods[d.seq].mod_new_prod_id,
   mnp.option_id = reply->option_id,
   mnp.orig_product_cd = request->new_prods[d.seq].orig_product_cd,
   mnp.new_product_cd = request->new_prods[d.seq].new_product_cd,
   mnp.orig_plasma_prod_cd = request->new_prods[d.seq].orig_plasma_prod_cd,
   mnp.quantity = request->new_prods[d.seq].quantity,
   mnp.default_sub_id_flag = request->new_prods[d.seq].default_sub_id_flag,
   mnp.max_prep_hrs = request->new_prods[d.seq].max_prep_hrs,
   mnp.default_orig_exp_ind = request->new_prods[d.seq].default_orig_exp_ind,
   mnp.calc_exp_drawn_ind = request->new_prods[d.seq].calc_exp_drawn_ind,
   mnp.default_exp_days = request->new_prods[d.seq].default_exp_days,
   mnp.default_exp_hrs = request->new_prods[d.seq].default_exp_hrs,
   mnp.allow_extend_exp_ind = request->new_prods[d.seq].allow_extend_exp_ind,
   mnp.default_orig_vol_ind = request->new_prods[d.seq].default_orig_vol_ind,
   mnp.default_volume = request->new_prods[d.seq].default_volume,
   mnp.calc_vol_ind = request->new_prods[d.seq].calc_vol_ind,
   mnp.prompt_vol_ind = request->new_prods[d.seq].prompt_vol_ind,
   mnp.validate_vol_ind = request->new_prods[d.seq].validate_vol_ind,
   mnp.default_unit_of_meas_cd = request->new_prods[d.seq].default_unit_of_meas_cd,
   mnp.synonym_id = request->new_prods[d.seq].synonym_id,
   mnp.require_assign_ind = request->new_prods[d.seq].require_assign_ind,
   mnp.bag_type_cd = request->new_prods[d.seq].bag_type_cd,
   mnp.crossover_reason_cd = request->new_prods[d.seq].crossover_reason_cd,
   mnp.allow_no_aborh_ind = request->new_prods[d.seq].allow_no_aborh_ind,
   mnp.default_supplier_id = request->new_prods[d.seq].default_supplier_id,
   mnp.updt_applctx = reqinfo->updt_applctx,
   mnp.updt_task = reqinfo->updt_task,
   mnp.updt_dt_tm = cnvtdatetime(curdate, curtime3),
   mnp.updt_id = reqinfo->updt_id,
   mnp.updt_cnt = 0,
   mnp.isbt_barcode = request->new_prods[d.seq].default_isbt_barcode,
   mnp.codabar_barcode = request->new_prods[d.seq].default_codabar_barcode
plan d
join mnp where mnp.mod_new_prod_id = reply->new_prods[d.seq].mod_new_prod_id
with
   nocounter,
   status(err_chk->qual[d.seq].status,
          err_chk->qual[d.seq].error_nbr,
          err_chk->qual[d.seq].error_msg)

;* Check for CCL insertion errors.
set err_chk->failed_ind = 0
for (errcnt = 1 to mnp_cnt)
   if (err_chk->qual[errcnt].status = 0)
      set errmsg = build(
        "Error (", err_chk->qual[errcnt].error_nbr, "):", err_chk->qual[errcnt].error_msg) 
      call ErrorHandler("INSERT", "F", "BB_MOD_NEW_PRODUCT", errmsg)
      set err_chk->failed_ind = 1
   endif
endfor
if (err_chk->failed_ind = 1)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif


/*****************************************************************************/
/* Insert special testing attributes associated with each new product, if any*/
/*****************************************************************************/
for (cnt = 1 to mnp_cnt)
   set mst_cnt = size(request->new_prods[cnt].spec_testings, 5)
   if (mst_cnt > 0)
      set stat = alterlist(err_chk->qual, mst_cnt)
      ;* Insert rows.
      insert into
         (dummyt d with seq = value(mst_cnt)), 
         bb_mod_special_testing mst
      set
         mst.mod_new_prod_id = reply->new_prods[cnt].mod_new_prod_id,
         mst.special_testing_cd = request->new_prods[cnt].spec_testings[d.seq].special_testing_cd,
         mst.updt_applctx = reqinfo->updt_applctx,
         mst.updt_task = reqinfo->updt_task,
         mst.updt_dt_tm = cnvtdatetime(curdate, curtime3),
         mst.updt_id = reqinfo->updt_id,
         mst.updt_cnt = 0
      plan d
      join mst where mst.mod_new_prod_id = reply->new_prods[cnt].mod_new_prod_id
                 and mst.special_testing_cd = request->new_prods[cnt].spec_testings[d.seq].special_testing_cd
      with
         nocounter,
         status(err_chk->qual[d.seq].status,
                err_chk->qual[d.seq].error_nbr,
                err_chk->qual[d.seq].error_msg)
      ;* Check for CCL insertion errors.
      set err_chk->failed_ind = 0
      for (errcnt = 1 to mst_cnt)
         if (err_chk->qual[errcnt].status = 0)
            set errmsg = build(
              "Error (", err_chk->qual[errcnt].error_nbr, "):", err_chk->qual[errcnt].error_msg) 
            call ErrorHandler("INSERT", "F", "BB_MOD_SPECIAL_TESTING", errmsg)
            set err_chk->failed_ind = 1
         endif
      endfor
      if (err_chk->failed_ind = 1)
         set reqinfo->commit_ind = 0
         go to EXIT_SCRIPT
      endif
   endif 
endfor

/*****************************************************************************/
/* Insert pooled product number for modification option.                     */
/*****************************************************************************/
if (request->generate_prod_nbr_ind = 1)
   ;* Determine if pool product number row already exists.  If it doesn't
   ;* add a new starting pool product number.
   set yr = year(cnvtdatetime(curdate, curtime3))
   
   select into "nl:"
      mpn.option_id
     ,mpn.prefix
     ,mpn.year
   from
      bb_mod_pool_nbr mpn
   plan mpn where mpn.option_id = reply->option_id
              and mpn.prefix = request->prod_nbr_prefix
              and mpn.year = yr           
   with
      nocounter 

   ;* Check for CCL errors.
   set error_check = error(errmsg,0)
   if (error_check != 0)
      call ErrorHandler("SELECT", "F", "BB_MOD_POOL_NBR", errmsg)
      set reqinfo->commit_ind = 0
      go to EXIT_SCRIPT
   endif

   if (curqual = 0)
      ;* Get reference sequence for bb_mod_pool_nbr_id
      select into "nl:"
         y = seq(reference_seq,nextval) 
      from
         dual
      detail
         bb_mod_pool_nbr_id = y
      with
         format,
         counter
      
      ;* Validate a bb_mod_pool_nbr sequence was obtained.
      if (curqual = 0)
         set errmsg = "Unable to obtain reference sequence id"
         call ErrorHandler("SELECT", "F", "DUAL", errmsg)
         set reqinfo->commit_ind = 0
         go to EXIT_SCRIPT
      endif
      
      ;* Insert new bb_mod_pool_nbr row.
      insert into bb_mod_pool_nbr mpn
      set
         mpn.mod_pool_nbr_id = bb_mod_pool_nbr_id,
         mpn.option_id = reply->option_id,
         mpn.prefix = request->prod_nbr_prefix,
         mpn.year = yr,
         mpn.seq_nbr = request->prod_nbr_starting_nbr - 1,
         mpn.updt_applctx = reqinfo->updt_applctx,
         mpn.updt_task = reqinfo->updt_task,
         mpn.updt_dt_tm = cnvtdatetime(curdate, curtime3),
         mpn.updt_id = reqinfo->updt_id,
         mpn.updt_cnt = 0
      with
         nocounter

      ;* Check for CCL errors.
      set error_check = error(errmsg,0)
      if (error_check != 0)
         call ErrorHandler("INSERT", "F", "BB_MOD_POOL_NBR", errmsg)
         set reqinfo->commit_ind = 0
         go to EXIT_SCRIPT
      endif

      ;* Check for no modification options inserted.
      if (curqual = 0)
         set errmsg = "Insert failed."
         call ErrorHandler("INSERT", "F", "BB_MOD_POOL_NBR", errmsg)
         set reqinfo->commit_ind = 0
         go to EXIT_SCRIPT
      endif
   endif
endif

/*****************************************************************************/
/* Insert devices associated with the modification option.                   */
/*****************************************************************************/
set md_cnt = size(request->devices, 5)

;* Determine if any modification devices exist.
if (md_cnt = 0)
   go to SET_STATUS
endif

set stat = alterlist(err_chk->qual, md_cnt)

insert into
   (dummyt d with seq = value(md_cnt)), 
   bb_mod_device md
set
   md.option_id = reply->option_id,
   md.device_type_cd = request->devices[d.seq].device_type_cd,
   md.default_ind = request->devices[d.seq].default_ind,
   md.max_capacity = request->devices[d.seq].max_capacity,
   md.start_stop_time_ind = request->devices[d.seq].start_stop_time_ind,
   md.modification_duration = request->devices[d.seq].modification_duration,
   md.updt_applctx = reqinfo->updt_applctx,
   md.updt_task = reqinfo->updt_task,
   md.updt_dt_tm = cnvtdatetime(curdate, curtime3),
   md.updt_id = reqinfo->updt_id,
   md.updt_cnt = 0
plan d
join md where md.option_id = reply->option_id
          and md.device_type_cd = request->devices[d.seq].device_type_cd
with
   nocounter,
   status(err_chk->qual[d.seq].status,
          err_chk->qual[d.seq].error_nbr,
          err_chk->qual[d.seq].error_msg)

;* Check for CCL insertion errors.
set err_chk->failed_ind = 0
for (errcnt = 1 to md_cnt)
   if (err_chk->qual[errcnt].status = 0)
      set errmsg = build(
        "Error (", err_chk->qual[errcnt].error_nbr, "):", err_chk->qual[errcnt].error_msg) 
      call ErrorHandler("INSERT", "F", "BB_MOD_DEVICE", errmsg)
      set err_chk->failed_ind = 1
   endif
endfor
if (err_chk->failed_ind = 1)
   set reqinfo->commit_ind = 0
   go to EXIT_SCRIPT
endif

/*****************************************************************************/
/* ErrorHandler subroutine                                                   */
/*****************************************************************************/
declare ErrorHandler(OperationName = c25,
                     OperationStatus = c1,
                     TargetObjectName = c25,
                     TargetObjectValue = vc) = NULL

subroutine ErrorHandler(OperationName,
                        OperationStatus,
                        TargetObjectName,
                        TargetObjectValue)
   declare error_cnt = i2 with private, noconstant(0)
   
   set error_cnt = size(reply->status_data.subeventstatus, 5)
   if (error_cnt > 1
   or (error_cnt = 1 and reply->status_data.subeventstatus[error_cnt].OperationStatus != ""))
      set error_cnt = error_cnt + 1
      set stat = alter(reply->status_data.subeventstatus, error_cnt)
   endif
   
   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[error_cnt].OperationName = OperationName
   set reply->status_data.subeventstatus[error_cnt].OperationStatus = OperationStatus
   set reply->status_data.subeventstatus[error_cnt].TargetObjectName = TargetObjectName
   set reply->status_data.subeventstatus[error_cnt].TargetObjectValue = TargetObjectValue
end

#SET_STATUS

   set reply->status_data->status = "S"
   set reqinfo->commit_ind = 1

#EXIT_SCRIPT
   free record err_chk
end
go

;Generated by GNU enscript 1.6.4.
