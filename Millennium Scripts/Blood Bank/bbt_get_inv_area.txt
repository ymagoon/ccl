 ;;Solution_Test/script/PathNet -- BB Transfusion/Bbowninvdev/bbt_get_inv_area.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bbt_get_inv_area.prg
        Object name:            bbt_get_inv_area
        Request #:              

        Product:                PathNet
        Product Team:           BB Transfusion
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve locations based on root, parent
                                and child

        Tables read:            Location_Group (lg), Location (l), code_value (cv_?)

        Tables updated:         None

        Executing from:         

        Special Notes:          

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 05/23/97 Jon Weekes           Initial Release                     *
;     001 12/01/98 Emily Zhou           Script Tunning                      *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

DROP PROGRAM bbt_get_inv_area:dba go
CREATE PROGRAM bbt_get_inv_area:dba

/*
RECORD request
(
 1  location_group_type_mean    = c12
 1  child_loc_mean              = c12
 1  parent_loc_cd               = f8
)
*/

RECORD reply
(
 1  ownerlist[*]
     2  location_cd             = f8
     2  location_disp         = c40
     2  location_desc         = vc
     2  location_mean         = c12
     2  invlist[*]       
         3  location_cd        = f8
         3  location_disp      = c40
         3  location_desc      = vc
         3  location_mean      = c12
         3  devicelist[*]
             4  device_id      = f8
             4  description     = vc
%i cclsource:status_block.inc
)

/*
 * Initialize constants
 */
SET location_type_code_set      = 222         
SET bb_inv_device_code_set      = 17396
SET inv_area_device_type_mean   = "BBINVAREA"

/*
 * Initialize global variables
 */
SET count1 = 0
SET failed = "F"
SET reply->status_data->status  = "F"
SET location_group_type_cd      = 0.0
SET inv_area_device_type_cd     = 0.0
SET own_cnt                  = 0
set code_cnt                 = 1 ;002

/* Get location_group_type_cd */
set stat = 
    uar_get_meaning_by_codeset(location_type_code_set, request->location_group_type_mean, code_cnt, location_group_type_cd) ;001
/*
set location_group_type_cd = GET_CODE_VALUE(location_type_code_set, request->location_group_type_mean)
if (curqual = 0)
    set failed = "T"
    set count1 = count1 + 1
    if (count1 > 1)
        set stat = alterlist(reply->status_data->subeventstatus, count1)
    endif
    set reply->status_data->subeventstatus[count1]->OperationName = "get location_group_type_cd"
    set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
    set reply->status_data->subeventstatus[count1]->TargetObjectName = "bbt_get_inv_area"
    set reply->status_data->subeventstatus[count1]->TargetObjectValue 
        = build("Could not retrieve location_group_type_cd for request->location_group_type_mean-", 
                request->location_group_type_mean)
    go to EXIT_SCRIPT
endif
*/
/* Get Inventory Area device_type_cd */
set stat = 
    uar_get_meaning_by_codeset(bb_inv_device_code_set, inv_area_device_type_mean, code_cnt, inv_area_device_type_cd) ;001
/*
set inv_area_device_type_cd = GET_CODE_VALUE(bb_inv_device_code_set, inv_area_device_type_mean)
if (curqual = 0)
    set failed = "T"
    set count1 = count1 + 1
    if (count1 > 1)
        set stat = alterlist(reply->status_data->subeventstatus, count1)
    endif
    set reply->status_data->subeventstatus[count1]->OperationName = "get inv_area device_type_cd"
    set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
    set reply->status_data->subeventstatus[count1]->TargetObjectName = "bbt_get_inv_area"
    set reply->status_data->subeventstatus[count1]->TargetObjectValue 
        = "Could not retrieve inv_area device_type_cd" 
    go to EXIT_SCRIPT
endif
*/

/*
 * Retrieve locations/inventory areas 
 */

SELECT INTO "nl:"
    lg.location_group_type_cd
    , lg.parent_loc_cd      
    , lg.child_loc_cd       
    , cv.cdf_meaning    

    , bid.location_cd
    , bid.bb_inv_device_id
    , bid.description

FROM
    location_group lg
    , code_value cv

    , (dummyt d_bid with seq = 1)
    , bb_inv_device_r bid_r
    , bb_inv_device bid

PLAN    lg  WHERE   lg.location_group_type_cd       = location_group_type_cd
                      and ((request->parent_loc_cd  = 0.0)
                        or (request->parent_loc_cd  > 0.0
                            and lg.parent_loc_cd    = request->parent_loc_cd))
                      and lg.active_ind             = 1
                      and lg.active_status_cd       = reqdata->active_status_cd
                      and lg.beg_effective_dt_tm    <= cnvtdatetime(curdate, curtime3)
                      and lg.end_effective_dt_tm    >= cnvtdatetime(curdate, curtime3)
JOIN    cv  WHERE   cv.code_value                   = lg.child_loc_cd
                      and cv.cdf_meaning            = request->child_loc_mean
                      and cv.active_ind             = 1
                      and cv.begin_effective_dt_tm  <= cnvtdatetime(curdate, curtime3)
                      and cv.end_effective_dt_tm    >= cnvtdatetime(curdate, curtime3)

JOIN    (d_bid where d_bid.seq                      = 1
    JOIN    bid_r   WHERE   bid_r.device_r_cd           = lg.child_loc_cd
                              and bid_r.device_r_type_cd  = inv_area_device_type_cd
                              and bid_r.active_ind      = 1
    JOIN    bid     WHERE   bid.bb_inv_device_id                = bid_r.bb_inv_device_id
                              and bid.active_ind                = 1)

ORDER BY    lg.parent_loc_cd, lg.child_loc_cd, bid.bb_inv_device_id

HEAD REPORT
    own_cnt = 0
    stat = alterlist(reply->ownerlist, 5)

HEAD lg.parent_loc_cd
    if (lg.seq > 0)
        own_cnt = own_cnt + 1
        IF (MOD(own_cnt, 5) = 1 AND own_cnt != 1)
            stat = alterlist(reply->ownerlist, own_cnt + 4)
        ENDIF

        inv_cnt = 0
        stat = alterlist(reply->ownerlist[own_cnt]->invlist, 5)

        reply->ownerlist[own_cnt]->location_cd    = lg.parent_loc_cd
    endif

HEAD lg.child_loc_cd
    if (lg.seq > 0) 
        inv_cnt = inv_cnt + 1
        if (mod(inv_cnt, 5) = 1 and inv_cnt != 1)
            stat = alterlist(reply->ownerlist[own_cnt]->invlist, inv_cnt + 4)
        endif

        dev_cnt = 0
        stat = alterlist(reply->ownerlist[own_cnt]->invlist[inv_cnt]->devicelist, 10)

        reply->ownerlist[own_cnt]->invlist[inv_cnt]->location_cd   = lg.child_loc_cd
    endif

HEAD bid.bb_inv_device_id
    if (bid.seq > 0)
        dev_cnt = dev_cnt + 1
        if (mod(dev_cnt, 10) = 1 and dev_cnt != 1)
            stat = alterlist(reply->ownerlist[own_cnt]->invlist[inv_cnt]->devicelist, dev_cnt + 9)
        endif

        reply->ownerlist[own_cnt]->invlist[inv_cnt]->devicelist[dev_cnt]->device_id    = bid.bb_inv_device_id
        reply->ownerlist[own_cnt]->invlist[inv_cnt]->devicelist[dev_cnt]->description  = bid.description
    endif

FOOT lg.child_loc_cd
    stat = alterlist(reply->ownerlist[own_cnt]->invlist[inv_cnt]->devicelist, dev_cnt)

FOOT lg.parent_loc_cd
    stat = alterlist(reply->ownerlist[own_cnt]->invlist, inv_cnt)

FOOT REPORT
    stat = alterlist(reply->ownerlist, own_cnt)

WITH    NOCOUNTER, OUTERJOIN(d_bid)
                          
go to EXIT_SCRIPT


;declare GET_CODE_VALUE(sub_code_set, sub_cdf_meaning) = f8
;subroutine GET_CODE_VALUE(sub_code_set, sub_cdf_meaning)
    /*
     * Retrieve code_value using passed code_set and meaning
     */
/* 
   set gsub_code_value = 0.0

    select into "nl:"
        cv.code_value
    from    code_value cv
    where   cv.code_set             = sub_code_set                
              and cv.cdf_meaning    = sub_cdf_meaning             
              and cv.begin_effective_dt_tm <= cnvtdatetime(curdate, curtime3)
              and cv.end_effective_dt_tm >= cnvtdatetime(curdate, curtime3)
    detail
         gsub_code_value        = cv.code_value
    with    nocounter

    RETURN(gsub_code_value)
END     ; end subroutine GET_CODE_VALUE

*/
#EXIT_SCRIPT
set count1 = count1 + 1
if (count1 > 1)
    set stat = alterlist(reply->status_data->subeventstatus, count1)
endif
if (failed != "T")
    if (own_cnt > 0)
        set reply->status_data->status = "S"
        set reply->status_data->subeventstatus[count1]->OperationName = "get BBINVAREA's"
        set reply->status_data->subeventstatus[count1]->OperationStatus = "S"
        set reply->status_data->subeventstatus[count1]->TargetObjectName = "bbt_get_inv_area"
        set reply->status_data->subeventstatus[count1]->TargetObjectValue = "SUCCESS"
    else
        set reply->status_data->status = "Z"
        set reply->status_data->subeventstatus[count1]->OperationName = "get BBINVAREA's"
        set reply->status_data->subeventstatus[count1]->OperationStatus = "Z"
        set reply->status_data->subeventstatus[count1]->TargetObjectName = "bbt_get_inv_area"
        set reply->status_data->subeventstatus[count1]->TargetObjectValue = "ZERO"
    endif
else
    set reply->status_data->status = "F"
endif

for (p = 1 to own_cnt)
    call echo(reply->ownerlist[p]->location_cd)
    set c_cnt = cnvtint(size(reply->ownerlist[p]->invlist, 5))
    for (c = 1 to c_cnt)
        call echo(build("-----", reply->ownerlist[p]->invlist[c]->location_cd))
        for (d = 1 to cnvtint(size(reply->ownerlist[p]->invlist[c]->devicelist, 5)))
            call echo(build("----------", reply->ownerlist[p]->invlist[c]->devicelist[d]->device_id))
        endfor
    endfor
endfor

end go

;Generated by GNU enscript 1.6.4.
