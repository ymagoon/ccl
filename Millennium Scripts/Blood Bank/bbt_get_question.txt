 ;;Solution_Test/script/PathNet -- BB Transfusion/Dbpreferencewizard/bbt_get_question.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       BBT_GET_QUESTION
        Object name:            BBT_GET_QUESTION
        Request #:              225033

        Product:                PATHNET
        Product Team:           BLOOD BANK
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieve row(s) from the question and valid response table

        Tables read:            QUESTION, VALID RESPONSE
        Tables updated:         NA
        Executing from:         ##

        Special Notes:          NA

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 03/22/96 Yvonne Klipfel       Initial Release                     *
;     001 01/10/02 SD4221               Add order by to the corresponding head
;                                       Use UAR's instead of code value lookups
;                                       Use outerjoin function instead of dummyt
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_get_question:dba go
create program bbt_get_question:dba

/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
/*
record request
(
   1 module_meaning         = c12
   1 process_meaning        = c12
)
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
record reply
(
     1 qual[*]
       2 module_cd         = f8
       2 process_cd        = f8
       2 question_cd       = f8
       2 question_disp     = c40 
       2 question_desc     = vc 
       2 question_mean     = c12 
       2 question          = vc
       2 sequence          = i4
       2 response_flg      = i2
       2 response_length   = i4
       2 code_set          = i4
       2 cs_cdf_meaning    = c12
       2 active_ind        = i2
       2 def_answer        = vc
       2 dwb_ind           = i2
       2 updt_cnt          = i4 
       2 response_qual[*]
         3 response_cd     = f8
         3 response_disp   = c40 
         3 response_desc   = vc 
         3 response_mean   = c12 
         3 updt_cnt        = i4
%I CCLSOURCE:STATUS_BLOCK.INC
)

%I CCLSOURCE:PCS_SUBEVENT.INC

/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
set reply->status_data->status = "F"
set count1 = 0
set count2 = 0

declare failed = c1 with protected, noconstant("F")
declare module_cd = f8 with public, noconstant(0.0)
declare process_cd = f8 with public, noconstant(0.0)

/****************************************************************************
*       Find the module code value                                          *
*****************************************************************************/
if (request->module_meaning > " ")
  set stat = uar_get_meaning_by_codeset(1660, request->module_meaning, 1, module_cd)    
  if (module_cd = 0.0) 
    set failed = "T"
    call subevent_add("UAR","F","1660","CANNOT GET MODULE CODE VALUE")
  endif 
else
  call subevent_add("Request","F","Module_meaning","Module meaning not passed")
endif
/****************************************************************************
*       Find the process code value                                         *
*****************************************************************************/
if (request->process_meaning > " ")
  set stat = uar_get_meaning_by_codeset(1662, request->process_meaning, 1, process_cd)    
  if (process_cd = 0.0) 
    set failed = "T"
    call subevent_add("UAR","F","1662","CANNOT GET PROCESS CODE VALUE")
  endif
else
  call subevent_add("Request","F","Process_meaning","Process meaning not passed")
endif    


/****************************************************************************
*       Retrieve questions and valid responses (if available)               *
****************************************************************************/
select into "nl:"
   q.question_cd, r.response_cd
from question q,
     valid_response r
plan q where q.module_cd = module_cd 
and q.process_cd = process_cd and q.active_ind = 1 ;and q.dwb_ind in (NULL,0) 

join r where outerjoin(q.module_cd) = r.module_cd 
         and outerjoin(q.process_cd) = r.process_cd 
         and outerjoin(q.question_cd) = r.question_cd 
   
order by q.question_cd

head report
   count1 = 0

head q.question_cd
   count2 = 0
   count1 = count1 + 1
 
   if (mod(count1,10) = 1)
      stat = alterlist(reply->qual, count1 + 9)
   endif
   
   reply->qual[count1]->module_cd       = q.module_cd
   reply->qual[count1]->process_cd      = q.process_cd
   reply->qual[count1]->question_cd     = q.question_cd
   reply->qual[count1]->question        = trim(q.question)
   reply->qual[count1]->sequence        = q.sequence
   reply->qual[count1]->response_flg    = q.response_flag
   reply->qual[count1]->response_length = q.response_length
   reply->qual[count1]->code_set        = q.code_set
   reply->qual[count1]->cs_cdf_meaning  = q.cdf_meaning
   reply->qual[count1]->active_ind      = q.active_ind
   reply->qual[count1]->def_answer      = trim(q.def_answer)
   reply->qual[count1]->dwb_ind         = q.dwb_ind
   reply->qual[count1]->updt_cnt        = q.updt_cnt

detail
   
   if (r.response_cd != 0.0) 
      count2 = count2 + 1
      if (mod(count2,10)= 1)
         stat = alterlist(reply->qual[count1]->response_qual, count2 + 9)
      endif
   
      reply->qual[count1]->response_qual[count2]->response_cd  = r.response_cd
      reply->qual[count1]->response_qual[count2]->updt_cnt  = r.updt_cnt
   endif
   
foot q.question_cd
   
   stat = alterlist(reply->qual[count1]->response_qual, count2)

foot report
   stat = alterlist(reply->qual, count1)
   
with nocounter

if (curqual > 0)
  set reply->status_data->status = "S"
else
  set reply->status_data->status = "Z"
endif


if (failed = "T")
   set reply->status_data->status = "F"
endif
   
end go

;Generated by GNU enscript 1.6.4.
