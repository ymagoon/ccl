 ;;Solution_Test/script/PathNet -- BB Transfusion/BBT_Move_Long_Text/BBT_MOVE_LONG_TEXT.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:   bbt_move_long_text.prg
        Object name:        bbt_move_long_text    
        Request #:          none

        Product:            PathNet
        Product Team:       BBT    
        HNA Version:        500
        CCL Version:        4.0

        Program purpose:    Move reference data from the long_text table to
                            the long_text_reference table

        Tables read:        long_text, interp_result

        Tables updated:     long_text, long_text_reference

        Executing from:     Readme

        Special Notes:          

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 09/16/99 Doug Saus            Initial Release
;     001 03/22/01 Steve Harlow         Grab long_text row only once        *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program bbt_move_long_text:dba go
create program bbt_move_long_text:dba

record LongTextTable
(
 1 RowList[*]
    2 long_text_id              = f8
    2 long_text                 = vc
    2 parent_entity_name        = c32
    2 parent_entity_id          = f8
    2 active_ind                = i2
    2 active_status_cd          = f8
    2 active_status_dt_tm       = dq8
    2 active_status_prsnl_id    = f8
    2 updt_cnt                  = i4
    2 updt_dt_tm                = dq8
    2 updt_id                   = f8
    2 updt_task                 = i4
    2 updt_applctx              = i4
)

set error_ind = 0
set sErrorMsg = fillstring(255," ")
set nErrorStatus = error(sErrorMsg,1)

;retrieve and save all rows on the long_text table that have corresponding rows
;on the interp_result table.  This indicates they are reference rows
select into "nl:"
    lt.*

from    long_text lt
        , interp_result ir

plan lt where lt.long_text_id > 0

join ir where ir.long_text_id = lt.long_text_id

order by lt.long_text_id

head report
    row_cnt = 0
    stat = alterlist(LongTextTable->Rowlist,5)

head lt.long_text_id  ;001

    row_cnt = row_cnt + 1
    if (mod(row_cnt,5) = 1 and row_cnt != 1)
        stat = alterlist(LongTextTable->RowList, row_cnt + 4)
    endif
    LongTextTable->RowList[row_cnt].long_text_id            = lt.long_text_id
    LongTextTable->RowList[row_cnt].long_text               = lt.long_text
    LongTextTable->RowList[row_cnt].parent_entity_name      = lt.parent_entity_name
    LongTextTable->RowList[row_cnt].parent_entity_id        = lt.parent_entity_id
    LongTextTable->RowList[row_cnt].active_ind              = lt.active_ind
    LongTextTable->RowList[row_cnt].active_status_cd        = lt.active_status_cd
    LongTextTable->RowList[row_cnt].active_status_dt_tm     = cnvtdatetime(lt.active_status_dt_tm)
    LongTextTable->RowList[row_cnt].active_status_prsnl_id  = lt.active_status_prsnl_id
    LongTextTable->RowList[row_cnt].updt_cnt                = lt.updt_cnt
    LongTextTable->RowList[row_cnt].updt_dt_tm              = cnvtdatetime(lt.updt_dt_tm)
    LongTextTable->RowList[row_cnt].updt_id                 = lt.updt_id
    LongTextTable->RowList[row_cnt].updt_task               = lt.updt_task
    LongTextTable->RowList[row_cnt].updt_applctx            = lt.updt_applctx

detail     ;001
    row+0  ;001

foot report
    stat = alterlist(LongTextTable->Rowlist,row_cnt)    

with nocounter

set nErrorStatus = error(sErrorMsg,0)
if (nErrorStatus = 0)
    ;join to record structure and insert rows into long_text_reference table using the
    ;same sequence numbers used for the long_text table
    set row_cnt = value(size(LongTextTable->RowList,5))
    for (idx = 1 to row_cnt)
        insert into long_text_reference ltr

        set ltr.long_text_id              = LongTextTable->RowList[idx].long_text_id
            , ltr.long_text_id            = LongTextTable->RowList[idx].long_text_id
            , ltr.long_text               = LongTextTable->RowList[idx].long_text
            , ltr.parent_entity_name      = LongTextTable->RowList[idx].parent_entity_name
            , ltr.parent_entity_id        = LongTextTable->RowList[idx].parent_entity_id
            , ltr.active_ind              = LongTextTable->RowList[idx].active_ind
            , ltr.active_status_cd        = LongTextTable->RowList[idx].active_status_cd
            , ltr.active_status_dt_tm     = cnvtdatetime(LongTextTable->RowList[idx].active_status_dt_tm)
            , ltr.active_status_prsnl_id  = LongTextTable->RowList[idx].active_status_prsnl_id
            , ltr.updt_cnt                = LongTextTable->RowList[idx].updt_cnt
            , ltr.updt_dt_tm              = cnvtdatetime(LongTextTable->RowList[idx].updt_dt_tm)
            , ltr.updt_id                 = LongTextTable->RowList[idx].updt_id
            , ltr.updt_task               = LongTextTable->RowList[idx].updt_task
            , ltr.updt_applctx            = LongTextTable->RowList[idx].updt_applctx

        with nocounter
        
        set nErrorStatus = error(sErrorMsg,0)
        if (nErrorStatus != 0)
            set error_ind = 1
            go to Exit_Script
        endif
    endfor
    if (nErrorStatus = 0) 
        ;lock rows that were moved
        select into "nl:"
            
        from    long_text lt
                , (dummyt d with seq = value(size(LongTextTable->RowList,5)))

        plan d
        join lt where lt.long_text_id = LongTextTable->RowList[d.seq].long_text_id

        with nocounter, forupdate(lt)

        set nErrorStatus = error(sErrorMsg,0)
        if (nErrorStatus = 0)
            ;inactivate rows that were moved
            update  into    long_text lt
                    , (dummyt d with seq = value(size(LongTextTable->RowList,5)))

            set lt.active_ind               = 0
                , lt.active_status_cd       = reqdata->inactive_status_cd
                , lt.active_status_dt_tm    = cnvtdatetime(curdate,curtime3)
                , lt.updt_cnt               = LongTextTable->RowList[d.seq].updt_cnt + 1
                , lt.updt_dt_tm             = cnvtdatetime(curdate,curtime3)
                , lt.updt_id                = reqinfo->updt_id
                , lt.updt_task              = reqinfo->updt_task
                , lt.updt_applctx           = reqinfo->updt_applctx

            plan d
            join lt where lt.long_text_id = LongTextTable->RowList[d.seq].long_text_id

            with nocounter
            set nErrorStatus = error(sErrorMsg,0)
            if (nErrorStatus = 0)
                set error_ind = error_ind
            else
                set error_ind = 1
            endif
        else
            set error_ind = 1
        endif
    else
        set error_ind = 1
    endif
else
    set error_ind = 1
endif

#Exit_Script
    if (error_ind = 1)
       rollback
;       call echo("Rollback")
    else
       commit
;       call echo("Commit")
    endif

end 
go

;Generated by GNU enscript 1.6.4.
