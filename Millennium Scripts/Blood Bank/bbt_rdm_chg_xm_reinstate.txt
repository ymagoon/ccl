 ;;Solution_Test/script/PathNet -- BB Transfusion/BB_OCD_README_SCRIPTS/bbt_rdm_chg_xm_reinstate.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2003 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

    Source file name:       bbt_rdm_chg_xm_reinstate.prg
    Object name:            bbt_rdm_chg_xm_reinstate
    Readme #:               0

    Product:                PathNet Blood Bank
    Product Team:           Blood Bank
    HNA Version:            500
    CCL Version:

    Program purpose:        This readme will update the xm reinstate question.

    Tables read,            TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
    and access method:      --------------------    -----------------------------
                            CODE_VALUE              RANGE
                            question				RANGE

    Tables updated:         QUESTION                            

    Executing from:         ReadMe

    Special Notes:          Each section should clearly identify what the purpose
                            of that README step is.

    Run Occurance:          (select ONE of the following)
                            -----------------------------
                            [X] 1. RUN ONCE
                            [ ] 2. RUN MANY

    ReadMe Category:        (select ONE of the following)
                            -----------------------------
                            [ ] 1. Data Load
                            [X] 2. Data Conversion
                            [ ] 3. Data Migration
                            [ ] 4. Other
				 	        [ ] 5. SQL Compile


    Execution Time:         (select ONE of the following)
                            ------------------------------------
                            [X] 1. Uptime before uptime schema.
                            [ ] 2. Uptime after uptime schema.

    Exec. Justification:    Ensure that existing Donor preference questions exist
                            on a client site.

    Parent Script:          n/a

    Check Script:           n/a

    Data file for import:   n/a

    Execution Duration:     (select ONE of the following)
                            ----------------------------------
                            [X] 1. Fixed Time
                            [ ] 2. Driver Table: code_value

******************************************************************************/

;~DB~****************************************************************************************
;*                      GENERATED MODIFICATION CONTROL LOG                                  *
;********************************************************************************************
;*                                                                                          *
;*Mod Date     Engineer             ITN     Feature      Comment                            *
;*--- -------- -------------------- ------- ------------ -----------------------------------*
;*000 01/12/04 Ronda Zheng          0109908 37015        Initial Release                    *
;                                                        (note: use set statement to initialize*
;                                                        variables to be compitable with sites*
;                                                        prior to 7.8                       *
; 001 01/27/05 Ronda Zheng                               Return success status if the       *
;                                                        XM reinstate question on dependency table*
;~DE~****************************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ***********************************/

drop program bbt_rdm_chg_xm_reinstate:dba go
create program bbt_rdm_chg_xm_reinstate:dba


/****************************************************************************
* Variable declaration                                                      *
*****************************************************************************/
declare sREADME_NAME        = c25
declare MODULE_CODE_SET     = i4
declare PROCESS_CODE_SET    = i4
declare QUESTION_CODE_SET   = i4
declare dModuleCd       	= f8
declare dProcessCd       	= f8
declare dQuestionCd       	= f8
declare failed_ind          = i2
declare msg                 = c132
declare sErrorMsg           = c255
declare nErrorStatus        = i2

set sREADME_NAME            = "bbt_rdm_chg_xm_reinstate"
set MODULE_CODE_SET         = 1660
set PROCESS_CODE_SET        = 1662
set QUESTION_CODE_SET       = 1661
set dModuleCd       	    = 0.0
set dProcessCd       	    = 0.0
set dQuestionCd       	    = 0.0
set failed_ind              = 0
set msg                     = fillstring(132," ")
set sErrorMsg               = fillstring(255," ")
set nErrorStatus            = ERROR(sErrorMsg,1)


%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
call LOGSCRIPTSTART(sREADME_NAME)

/****************************************************************************
* Load the module code value (BB TRANSF)                              		*
****************************************************************************/
select into "nl:"
   cv.code_value

from
   code_value cv

where cv.code_set               = MODULE_CODE_SET
  and cv.cdf_meaning            = "BB TRANSF"
  and cv.active_ind             = 1

detail
   dModuleCd = cv.code_value

with nocounter

if (curqual = 0)
   set failed_ind = 1
   set msg = "Missing required code value for cdf_meaning = BB TRANSF on code set 1660"
   call LOGMSG(msg, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
   go to EXIT_SCRIPT
endif


/****************************************************************************
* Load the process code value (XM RELEASE)                              		*
****************************************************************************/
select into "nl:"
   cv.code_value

from
   code_value cv

where cv.code_set               = PROCESS_CODE_SET
  and cv.cdf_meaning            = "XM RELEASE"
  and cv.active_ind             = 1

detail
   dProcessCd = cv.code_value

with nocounter

if (curqual = 0)
   set failed_ind = 1
   set msg = "Missing required code value for cdf_meaning = XM RELEASE on code set 1662"
   call LOGMSG(msg, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
   go to EXIT_SCRIPT
endif

/****************************************************************************
* Load the question code value (XM REIN DYS)                              *
****************************************************************************/
select into "nl:"
   cv.code_value

from
   code_value cv

where cv.code_set               = QUESTION_CODE_SET
  and cv.cdf_meaning            = "XM REIN DYS"
  and cv.active_ind             = 1

detail
   dQuestionCd = cv.code_value

with nocounter

if (curqual = 0)
   set failed_ind = 1
   set msg = "Missing required code value for cdf_meaning = XM REIN DYS on code set 1661"
   call LOGMSG(msg, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
   go to EXIT_SCRIPT
endif

/****************************************************************************
* Update XM reinstate question on question table                            *
****************************************************************************/
select into "nl"
    q.question_cd

from 
    question q

where q.question_cd = dQuestionCd
  and q.active_ind  = 1
    
with nocounter, forupdate(q)
  
if (curqual = 0)
   set failed_ind = 1
   set msg = "Could not find XM Reinstate question in question table."
   call LOGMSG(msg, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
   go to EXIT_SCRIPT
endif

update into 
   question q

set 
   q.question 		   = "Enter the number of days or hours a reinstated crossmatch should remain active.",
   q.updt_dt_tm        = cnvtdatetime(curdate,curtime3),
   q.updt_id           = 0,
   q.updt_cnt          = q.updt_cnt + 1,
   q.updt_task         = 0,
   q.updt_applctx      = 0
   
where q.question_cd = dQuestionCd

with nocounter

set sError_Check = ERROR(sErrorMsg, 0)

if (nErrorStatus != 0)
   set failed_ind = 1
   set msg = "Could not update XM Reinstate question in question table."
   call LOGMSG(msg, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
   go to exit_script
endif  
    
/****************************************************************************
* Update XM reinstate question on dependency table                          *
****************************************************************************/
select into "nl"
    d.depend_quest_cd

from 
    dependency d

where d.depend_quest_cd = dQuestionCd
    
with nocounter, forupdate(d)
  
if (curqual = 0)
   set msg = "Could not find XM Reinstate question in dependency table."
   call LOGMSG(msg, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
   go to EXIT_SCRIPT
endif

delete from 
   dependency d

where d.depend_quest_cd = dQuestionCd

with nocounter

set sError_Check = ERROR(sErrorMsg, 0)

if (nErrorStatus != 0)
   set failed_ind = 1
   set msg = "Could not update XM Reinstate question in question table."
   call LOGMSG(msg, E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)
   go to exit_script
endif  
    
call LOGMSG("XM Reinstate question update successful.", E_RDMSTATUS + E_DISPMSG + E_LOGTOFILE)

;---------------------------------------------------------
#EXIT_SCRIPT
/****************************
**  LOG Execution Status.  **
**                         ***************************************
**  Note:  if you have a check script then you do not           **
**  need to perform the LOGSTATUS in the RDM script.            **
**  Explicit COMMIT and/or ROLLBACK must be perform             **
**  In this section both in the README and the CHECK            **
**  script.  For example:                                       **
**     if (nCnt > 0)                                            **
**       COMMIT  ;Just in case LOGSTATUS pulls an Oracle error. **
**       CALL LOGSTATUS("Execution Successful.", "S")           **
**     else                                                     **
**       ROLLBACK                                               **
**       CALL LOGSTATUS("Execution Failed because ...", "F")    **
**     endif                                                    **
**                                                              **
*****************************************************************/
if (failed_ind = 0)
   commit  ;Just in case LOGSTATUS pulls an Oracle error.
   call LOGSTATUS("Execution Successful.", "S")
else
   rollback
   call LOGSTATUS("Execution Failed", "F")
endif

/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
call LOGSCRIPTEND(sREADME_NAME)

end
go


;Generated by GNU enscript 1.6.4.
