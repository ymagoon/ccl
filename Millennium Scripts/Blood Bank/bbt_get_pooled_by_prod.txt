 ;;Solution_Test/script/PathNet -- BB Transfusion/Producthistoryreview/bbt_get_pooled_by_prod.prg Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-2006 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       BBT_GET_POOLED_BY_PROD.PRG
        Object name:            bbt_get_pooled_by_prod
        Request #:              225201

        Product:                Blood Bank Transfusion/Donor
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        When the product_id passed is a component, get its pooled product,
                                when the product_id passed is a pooled product, get its components.

        Tables read:            PRODUCT

        Tables updated:         N/A

        Executing from:         Product History Review

        Special Notes:          N/A
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *001 10/17/96 Linda DeJong         Initial Release                     *
;    *002 09/02/97 Badari Kopparapu     Modified to send ABO_cd in reply    *
;    *003 09/29/97 David Hall           Added pool_option_id to reply       * 
;    *004 10/06/97 David Hall           Added more reply info for correct   *
;    *                                  inventory                           *
;    *005 12/31/01 John Rieck           Updated script to check history     *
;    *                                  tables if the product_id passed in  *
;    *                                  is not found in live.               *
;    *006 12/17/03 John Rieck           Updated to return the earliest      *
;    *                                  event's date/time.                  *
;    *007 12/18/03 John Rieck           Updated to return a component's     *
;    *                                  original product volume.            *
;    *008 01/31/06 Jason Coy            Update to return donation type,     *
;    *                                  disease and product code.           *
;    *009 09/28/07 Matt Cummings        Fixed CR 1-1130954391               *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

        drop program bbt_get_pooled_by_prod:dba go
        create program bbt_get_pooled_by_prod:dba

/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
        /*
        record request
        (
         product_id = f8
         pooled_ind = i2
         pooled_product_id = f8
        )
        */

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
        record reply
        (1  pool_option_id      = f8
         1  qual[*]
             2  product_nbr = c20
             2  product_sub_nbr = c5
             2  supplier_prefix = c5
             2  pooled_ind = i2
             2  updt_cnt   = i4
             2  bp_updt_cnt = i4
             2  updt_dt_tm  = dq8
             2  updt_id    = f8
             2  updt_task  = i4
             2  updt_applctx = i4
             2  product_id = f8
             2  cur_abo_cd = f8
             2  cur_abo_disp = c40
             2  cur_rh_cd = f8
             2  cur_rh_disp = c40
             2  cur_volume = i4
             2  cur_unit_meas_cd = f8
             2  cur_unit_meas_disp = c40
             2  cur_expire_dt_tm = dq8
             2  earliest_event_dt_tm = dq8
             2  original_volume = i4
             2  electronic_entry_flag = i2
             2  donation_type_cd = f8
             2  disease_cd = f8
             2  product_cd = f8
             2  intended_use_print_parm_txt = c1
             2  product_type_disp = c40

%I CCLSOURCE:STATUS_BLOCK.INC
        )

/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
declare history_ind = i2 with noconstant(0)
set err_cnt = 0 
set qual_cnt = 0
set reply->status_data.status = "F"

/****************************************************************************
*       Search the PRODUCT table for the product                            *
*****************************************************************************/

select into "nl:"
	p.pooled_product_ind,
	p.pooled_product_id
      
from product p

plan p  where p.product_id = request->product_id

detail
	stat = alterlist(reply->qual, qual_cnt)
	if (p.pooled_product_ind = 1)
		request->pooled_ind = 1
		reply->pool_option_id    = p.pool_option_id
	else
		if (p.pooled_product_id > 0)
			request->pooled_ind = 2
			request->pooled_product_id = p.pooled_product_id
		else
			request->pooled_ind = 0
			reply->status_data.status = "S"
		endif
	endif          

with nocounter
if (curqual = 0)
	/****************************************************************************
	*       Search BBHIST_PRODUCT for the product                               *
	*****************************************************************************/   
	select into "nl:"
		hp.product_id
		, hp.pooled_product_ind
	
	from
		bbhist_product hp
		
	plan hp where hp.product_id = request->product_id
  
	detail
		stat = alterlist(reply->qual, qual_cnt)
   		
		; Set an indicator to show that the product is from history
		history_ind = 1
   		
		; Check to see if the product is a component or a pooled product
		if (hp.pooled_product_ind = 1)
			; The product is a pooled product
			request->pooled_ind = 1
		else
			if (hp.pooled_product_id > 0.0)
				; The product is a component
				request->pooled_ind = 2
				request->pooled_product_id = hp.pooled_product_id
			else
				request->pooled_ind = 0
				reply->status_data.status = "S"
			endif
		endif
   		          
	with nocounter
		
	if (curqual = 0)   
		set err_cnt = err_cnt + 1
		set reply->status_data->subeventstatus[err_cnt]->OperationName
			= "select"
		set reply->status_data->subeventstatus[err_cnt]->OperationStatus
			= "Z"
		set reply->status_data->subeventstatus[err_cnt]->TargetObjectName
			= "product"
		set reply->status_data->subeventstatus[err_cnt]->TargetObjectValue 
			= "Unable to find product specified"
		set reply->status_data.status = "Z"
		go to end_script
	endif
endif

/****************************************************************************
*       Read for pooled information                                         *
*****************************************************************************/
; Process based on whether the product was found in live or history
if (history_ind = 0)
	if (request->pooled_ind = 1)

       ; This select was updated to return the product's earliest
       ; event date/time.  This will be used to prevent setting an
       ; expiration date/time before components were received or
       ; created.
       
		select into "nl:"
			p.product_nbr,
			p.pooled_product_id,
			p.product_id,
			p.cur_expire_dt_tm,
			p.cur_unit_meas_cd,
			bp.cur_abo_cd,
			bp.cur_rh_cd,
			bp.cur_volume,
			bp.updt_cnt

		from 
		   product p, 
		   blood_product bp,
		   product_event pe
		   
		plan p where p.pooled_product_id = request->product_id
        		
		join bp where p.product_id = bp.product_id
		
		join pe where pe.product_id = outerjoin(bp.product_id)
        
        order by p.product_id, pe.event_dt_tm asc
        	
		head report
			qual_cnt = 0
        
        head p.product_id
			qual_cnt = qual_cnt + 1
					
			if (mod(qual_cnt,3) = 1)
   			   stat = alterlist(reply->qual,qual_cnt+2)
   		    endif
          	
			reply->qual[qual_cnt].product_nbr = p.product_nbr
			reply->qual[qual_cnt].product_sub_nbr = p.product_sub_nbr
			reply->qual[qual_cnt].pooled_ind = request->pooled_ind
			reply->qual[qual_cnt].product_id = p.product_id
			reply->qual[qual_cnt].cur_expire_dt_tm = p.cur_expire_dt_tm
			reply->qual[qual_cnt].cur_unit_meas_cd = p.cur_unit_meas_cd
			reply->qual[qual_cnt].supplier_prefix = bp.supplier_prefix
			reply->qual[qual_cnt].cur_abo_cd = bp.cur_abo_cd
			reply->qual[qual_cnt].cur_rh_cd = bp.cur_rh_cd
			reply->qual[qual_cnt].cur_volume = bp.cur_volume
			reply->qual[qual_cnt].updt_cnt = p.updt_cnt
			reply->qual[qual_cnt].bp_updt_cnt = bp.updt_cnt
			reply->qual[qual_cnt].updt_dt_tm = p.updt_dt_tm
			reply->qual[qual_cnt].updt_id = p.updt_id
			reply->qual[qual_cnt].updt_task = p.updt_task
			reply->qual[qual_cnt].updt_applctx = p.updt_applctx        		
            reply->qual[qual_cnt].earliest_event_dt_tm = pe.event_dt_tm
            reply->qual[qual_cnt].original_volume = bp.orig_volume
            reply->qual[qual_cnt].electronic_entry_flag = p.electronic_entry_flag
            reply->qual[qual_cnt].donation_type_cd = p.donation_type_cd
            reply->qual[qual_cnt].disease_cd = p.disease_cd
            reply->qual[qual_cnt].product_cd = p.product_cd
            reply->qual[qual_cnt].intended_use_print_parm_txt = trim(p.intended_use_print_parm_txt,3)
            reply->qual[qual_cnt].product_type_disp = trim(uar_get_code_display(p.product_cd))
         
		detail
		   row+0
		
		foot p.product_id
		   row+0
		
		foot report
			stat = alterlist(reply->qual,qual_cnt)

		with nocounter			

		if (curqual = 0)
			set err_cnt = err_cnt + 1
			set reply->status_data->subeventstatus[err_cnt]->OperationName
             	= "select"
			set reply->status_data->subeventstatus[err_cnt]->OperationStatus
             	= "Z"
			set reply->status_data->subeventstatus[err_cnt]->TargetObjectName
             	= "product"
			set reply->status_data->subeventstatus[err_cnt]->TargetObjectValue 
             	= "unable to return components of pooled product specified"
			set reply->status_data.status = "Z"
		else
			set reply->status_data.status = "S"
		endif
		
	else ; (request->pooled_ind = 2)

		select into "nl:"
			p.product_nbr,
			p.pooled_product_id,
			p.product_id
			
		from product p
        
		where p.product_id = request->pooled_product_id
		
		head report
			qual_cnt = 0
        		
		detail
			qual_cnt = qual_cnt + 1
					
			if (mod(qual_cnt,3) = 1)
   			stat = alterlist(reply->qual,qual_cnt+2)
   		endif

			reply->qual[qual_cnt].product_nbr = p.product_nbr
			reply->qual[qual_cnt].pooled_ind = request->pooled_ind
            reply->qual[qual_cnt].intended_use_print_parm_txt = trim(p.intended_use_print_parm_txt,3)
			

		foot report
			stat = alterlist(reply->qual,qual_cnt)
						
		with nocounter

		if (curqual = 0)
			set err_cnt = err_cnt + 1
			set reply->status_data->subeventstatus[err_cnt]->OperationName
				= "select"
			set reply->status_data->subeventstatus[err_cnt]->OperationStatus
				= "Z"
			set reply->status_data->subeventstatus[err_cnt]->TargetObjectName
				= "product"
			set reply->status_data->subeventstatus[err_cnt]->TargetObjectValue 
				= "unable to return pooled product of component specified"
			set reply->status_data.status = "Z"
		else
			set reply->status_data.status = "S"
		endif
	endif 
	
else ; (history_ind = 1)

	if (request->pooled_ind = 1)

		select into "nl:"
			hp.*

		from bbhist_product hp
		
		plan hp where hp.pooled_product_id = request->product_id
        	
		head report
			qual_cnt = 0
        		
		detail
			qual_cnt = qual_cnt + 1
					
			if (mod(qual_cnt,3) = 1)
   			stat = alterlist(reply->qual,qual_cnt+2)
   		endif
			   		          	
			reply->qual[qual_cnt].product_nbr 		= hp.product_nbr
			reply->qual[qual_cnt].product_sub_nbr 	= hp.product_sub_nbr
			reply->qual[qual_cnt].pooled_ind 		= request->pooled_ind
			reply->qual[qual_cnt].product_id 		= hp.product_id
			reply->qual[qual_cnt].cur_expire_dt_tm = hp.expire_dt_tm
			reply->qual[qual_cnt].cur_unit_meas_cd = hp.unit_meas_cd
			reply->qual[qual_cnt].supplier_prefix 	= hp.supplier_prefix
			reply->qual[qual_cnt].cur_abo_cd 		= hp.abo_cd
			reply->qual[qual_cnt].cur_rh_cd 			= hp.rh_cd
			reply->qual[qual_cnt].cur_volume 		= hp.volume
			reply->qual[qual_cnt].updt_cnt 			= hp.updt_cnt
			reply->qual[qual_cnt].updt_dt_tm 		= hp.updt_dt_tm
			reply->qual[qual_cnt].updt_id 			= hp.updt_id
			reply->qual[qual_cnt].updt_task 			= hp.updt_task
			reply->qual[qual_cnt].updt_applctx 		= hp.updt_applctx
			reply->qual[qual_cnt].electronic_entry_flag = 0
            reply->qual[qual_cnt].donation_type_cd      = 0.0
            reply->qual[qual_cnt].disease_cd            = 0.0
            reply->qual[qual_cnt].product_cd            = hp.product_cd

		foot report
			stat = alterlist(reply->qual,qual_cnt)

		with nocounter			
			
		if (curqual = 0)
			set err_cnt = err_cnt + 1
			set reply->status_data->subeventstatus[err_cnt]->OperationName
             	= "select"
			set reply->status_data->subeventstatus[err_cnt]->OperationStatus
             	= "Z"
			set reply->status_data->subeventstatus[err_cnt]->TargetObjectName
             	= "product"
			set reply->status_data->subeventstatus[err_cnt]->TargetObjectValue 
             	= "Unable to return components of pooled product specified"
			set reply->status_data.status = "Z"
		else
			set reply->status_data.status = "S"
		endif
		
	else ; (request->pooled_ind = 2)

		select into "nl:"
			hp.product_nbr
			
		from bbhist_product hp
        
		plan hp where hp.product_id = request->pooled_product_id
		
		head report
			qual_cnt = 0
 			         
		detail
			qual_cnt = qual_cnt + 1
					
			if (mod(qual_cnt,3) = 1)
   			stat = alterlist(reply->qual,qual_cnt+2)
   		endif
			
			reply->qual[qual_cnt].product_nbr 	= hp.product_nbr
			reply->qual[qual_cnt].pooled_ind 	= request->pooled_ind
			
		foot report
			stat = alterlist(reply->qual,qual_cnt)
			
		with nocounter

		if (curqual = 0)
			set err_cnt = err_cnt + 1
			set reply->status_data->subeventstatus[err_cnt]->OperationName
				= "select"
			set reply->status_data->subeventstatus[err_cnt]->OperationStatus
				= "Z"
			set reply->status_data->subeventstatus[err_cnt]->TargetObjectName
				= "product"
			set reply->status_data->subeventstatus[err_cnt]->TargetObjectValue 
				= "unable to return pooled product of component specified"
			set reply->status_data.status = "Z"
		else
			set reply->status_data.status = "S"
		endif
	endif 

endif
        
/****************************************************************************
*       exit_script                                                         *
*****************************************************************************/
#END_SCRIPT
end go


;Generated by GNU enscript 1.6.4.
