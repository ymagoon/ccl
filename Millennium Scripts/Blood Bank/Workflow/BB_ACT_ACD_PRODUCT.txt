 ;;Solution_Test/script/PathNet -- BB Transfusion/BBProduct/BB_ACT_ACD_PRODUCT.PRG Turn on black mode

/*~bb~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2006 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
        Request #:              225901
 
        Product:                PathNet
        Product Team:           BloodBank
 
        Program purpose:        Retrieve product data for receive activity dll.
 
        Executing from:
        Special Notes:          NONE
 
*******************************************************************************/
;~DB~***************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG                 *
;    ***************************************************************************
;    *                                                                         *
;    *Mod Date     Engineer             Comment                                *
;    *--- -------- -------------------- ---------------------------------------*
;    *001 07/18/00 Lawrence Dsouza       Initial Release                       *
;    *002 08/21/00 Doug Saus             Added script error checking and       *
;    *                                   changed commit and rollback to set    *
;    *                                   commit_ind and rollback_ind           *
;    *                                   Restructured adds and updates of      *
;    *                                   child tables                          *
;    *                                   Re-wrote add/chg cnt logic            *
;    *003 11/21/02 Hal Patchen           Update new modification columns       *
;    *004 03/06/03 John Rieck            Updated to add BB_LABEL_VERIFY rows   *
;    *                                   when adding a verified state.         *
;    *005 04/17/03 Chris Noe             Updated to insert bb_id_nbr to the    *
;    *                                   assign table.  Added                  *
;    *                                   default_expire_dt_tm to               *
;    *                                   bb_exception insert.                  *
;    *006 04/21/03 John Rieck            Updated to store the time zone on     *
;    *                                   the PRODUCT_EVENT table for UTC       *
;    *                                   compliance.                           *
;    *007 06/26/03 Chris Noe             Updated to add BB_INVENTORY_TRANSFER  *
;    *                                   rows when adding a transferred event. *
;    *008 04/13/05 Jason Coy             Updated to handle donor products based*
;    *                                   on the new request variable           *
;    *                                   donor_product_ind.                    *
;    *009 08/04/05 Jim Jensen            Store new info on the PRODUCT table:  *
;    *                                   DISEASE_CD, DONATION_TYPE_CD.         *
;    *010 08/26/05 Josh Arnold           Store new info on PRODUCT table:      *
;    *                                   ELECTRONIC_ENTRY_FLAG                 *
;	 *011 10/03/05 Tom Brecht			 Added bb_exception_id				   *
;    *012 12/12/05 Jason Osborn          Use the size of each product_event    *
;    *                                   structure instead of request->max_product_event
;    *                                   to determine the upper for loop value.*
;    *013 02/03/06 Jason Coy             Update to handle req_label_verify_ind,*
;    *                                   owner_area_cd and inventory_area_cd   *
;    *014 04/26/06 David Fifer           Added shipment logic.                 *
;    *015 12/11/06 Jason Coy             Inventory Import updates.             *
;    *016 02/09/07 Jason Osborn          ISBT Updates: Store Intended Use on   *
;    *                                   the product table.  Store the barcode *
;    *                                   and the modifiable_flag on the special*
;    *                                   testing table.                        *
;    *017 05/23/07 Jason Coy             Added donated_by_relative_ind to      *
;    *                                   auto_directed table.                  *
;    *018 08/30/07 Matt Cummings         Fixed CR 1-692755721                  *
;    *019 01/07/07 Matt Cummings         Fixed CR 1-1574574031                 *
;    *020 03/03/08 Matt Cummings         Fixed CR 1-1824362971                 *
;    *021 06/15/09 Sachin Yadav          Wyndgate changes. CR:1-3208152654     *
;	 *022 02/17/11 Amy Gum				 Added Product_Type_barcode			   *
;~DE~***************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ***********************
 
DROP PROGRAM   bb_act_acd_product:dba GO
CREATE PROGRAM bb_act_acd_product:dba
 
 
/*
record request
( 1 max_product_events = i2
  1 max_special_testings = i2
  1 add_exists_ind = i2
  1 chg_exists_ind = i2
  1 pr_add_cnt = i2
  1 pr_chg_cnt = i2
  1 pe_add_cnt = i2
  1 pe_chg_cnt = i2
  1 st_add_cnt = i2
  1 st_chg_cnt = i2
  1 bp_add_cnt = i2
  1 bp_chg_cnt = i2
  1 de_add_cnt = i2
  1 de_chg_cnt = i2
  1 pn_add_cnt = i2
  1 pn_chg_cnt = i2
  1 Products[*]
     2 add_ind = i2
     2 change_ind = i2
     2 product_id = f8
     2 product_cd = f8
     2 product_cat_cd = f8
     2 product_class_cd = f8
     2 product_nbr = c20
     2 product_sub_nbr = c5
     2 alternate_nbr = c20
     2 flag_chars = c2
     2 pooled_product_id = f8
     2 modified_product_id = f8
     2 locked_ind = i2
     2 cur_inv_locn_cd = f8
     2 orig_inv_locn_cd = f8
     2 cur_supplier_id = f8
     2 recv_dt_tm = dq8
     2 recv_prsnl_id = f8
     2 orig_ship_cond_cd = f8
     2 orig_vis_insp_cd = f8
     2 storage_temp_cd = f8
     2 cur_unit_meas_cd = f8
     2 orig_unit_meas_cd = f8
     2 pooled_product_ind = i2
     2 modified_product_ind = i2
     2 corrected_ind = i2
     2 updt_cnt = i4
     2 active_ind = i2
     2 cur_expire_dt_tm = dq8
     2 cur_owner_area_cd = f8
     2 cur_inv_area_cd = f8
     2 cur_inv_device_id = f8
     2 cur_dispense_device_id = f8
     2 contributor_system_cd = f8
     2 pool_option_id = f8
     2 barcode_nbr = c20
     2 create_dt_tm = dq8
     2 donated_by_relative_ind = i2
     2 disease_cd       = f8
     2 donation_type_cd = f8
     2 active_status_chg_ind = i2
     2 electronic_entry_flag = i2
     2 electronic_entry_chg_ind = i2
     2 intended_use_print_parm_txt = c1
     2 product_type_barcode = vc
     2 Derivatives
        3 add_ind = i2
        3 change_ind = i2
        3 product_cd = f8
        3 item_volume = i4
        3 item_unit_meas_cd = f8
        3 updt_cnt = i4
        3 active_ind = i2
        3 manufacturer_id = f8
        3 cur_avail_qty = i4
        3 units_per_vial = i4
        3 active_status_chg_ind = i2
        3 cur_intl_units = i4
     2 BloodProducts
        3 add_ind = i2
        3 change_ind = i2
        3 product_cd = f8
        3 supplier_prefix = c5
        3 cur_volume = i4
        3 orig_label_abo_cd = f8
        3 orig_label_rh_cd = f8
        3 cur_abo_cd = f8
        3 cur_rh_cd = f8
        3 segment_nbr = c25
        3 orig_expire_dt_tm = dq8
        3 orig_volume = i4
        3 lot_nbr = c25
        3 autologous_ind = i2
        3 directed_ind = i2
        3 drawn_dt_tm = dq8
        3 updt_cnt = i4
        3 active_status_chg_ind = i2
        3 active_ind = i2
        3 donor_person_id = f8
     2 ProductNote
        3 add_ind = i2
        3 change_ind = i2
        3 new_product_note_id = f8
        3 new_product_note = vc
        3 old_product_note_id = f8
        3 old_updt_cnt = i4
        3 new_long_text_id = f8
        3 old_long_text_id = f8
        3 old_long_text_updt_cnt = i4
     2 SpecialTests[*]
        3 add_ind  = i2
        3 change_ind = i2
        3 special_testing_id = f8
        3 special_testing_cd = f8
        3 confirmed_ind = f8
        3 updt_cnt = i4
        3 active_status_chg_ind = i2
        3 product_rh_phenotype_id = f8
        3 active_ind = i2
        3 status = i4
        3 barcode_value = c20
        3 modifiable_flag = i2
     2 ProductEvents[*]
        3 add_ind = i2
        3 change_ind = i2
        3 product_event_id = f8
        3 product_id = f8
        3 order_id = f8
        3 bb_result_id = f8
        3 event_type_cd = f8
        3 event_dt_tm = dq8
        3 event_prsnl_id = f8
        3 updt_cnt = i4
        3 active_status_chg_ind = i2
        3 event_status_flag = i2
        3 active_ind = i2
        3 person_id = f8
        3 encntr_id = f8
        3 override_ind = i2
        3 override_reason_cd = f8
        3 related_product_event_id = f8
        3 status = i4
        3 Disposition
           4 add_ind = i2
           4 change_ind = i2
           4 reason_cd = f8
           4 disposed_qty = i4
           4 updt_cnt = i4
           4 active_ind = i2
           4 active_status_chg_ind = i2
           4 disposed_intl_units = i4
        3 QuarantineRelease
           4 add_ind = i2
           4 change_ind = i2
           4 quar_release_id = f8
           4 release_dt_tm = dq8
           4 release_prsnl_id = f8
           4 release_reason_cd = f8
           4 release_qty = i4
           4 updt_cnt = i4
           4 active_ind = i2
           4 release_intl_units = i4
           4 active_status_chg_ind = i2
        3 Quarantine
           4 add_ind = i2
           4 change_ind = i2
           4 quar_reason_cd = f8
           4 updt_cnt = i4
           4 active_ind = i2
           4 orig_quar_qty = i4
           4 cur_quar_qty = i4
           4 orig_quar_intl_units = i4
           4 cur_quar_intl_units = i4
           4 active_status_chg_ind = i2
        3 AutoDirected
           4 add_ind = i2
           4 change_ind = i2
           4 person_id = f8
           4 associated_dt_tm = dq8
           4 updt_cnt = i4
           4 active_ind = i2
           4 encntr_id = f8
           4 expected_usage_dt_tm = dq8
           4 active_status_chg_ind = i2
           4 donated_by_relative_ind = i2
        3 Modification
           4 add_ind = i2
           4 change_ind = i2
           4 orig_expire_dt_tm = dq8
           4 orig_volume = i4
           4 orig_unit_meas_cd = f8
           4 cur_expire_dt_tm = dq8
           4 cur_volume = i4
           4 cur_unit_meas_cd = f8
           4 modified_qty = i4
           4 updt_cnt = i4
           4 active_ind = i2
           4 crossover_reason_cd = f8
           4 option_id = f8
           4 active_status_chg_ind = i2
           4 device_type_cd = f8
           4 start_dt_tm = dq8
           4 stop_dt_tm = dq8
           4 lot_nbr = vc
           4 accessory = vc
           4 vis_insp_cd = f8
        3 Assign
           4 add_ind = i2
           4 change_ind = i2
           4 assign_reason_cd = f8
           4 prov_id = f8
           4 updt_cnt = i4
           4 active_ind = i2
           4 orig_assign_qty = i4
           4 cur_assign_qty = i4
           4 orig_assign_intl_units = i4
           4 cur_assign_intl_units = i4
           4 person_id = f8
           4 active_status_chg_ind = i2
           4 bb_id_nbr = c20
        3 Transfusion
           4 add_ind  = i2
           4 change_ind = i2
           4 person_id = f8
           4 transfused_intl_units = i4
           4 bag_returned_ind = i2
           4 tag_returned_ind = i2
           4 transfused_vol = i4
           4 updt_cnt = i4
           4 active_ind = i2
           4 orig_transfused_qty = i4
           4 cur_transfused_qty = i4
           4 active_status_chg_ind = i2
        3 Destruction
           4 add_ind  = i2
           4 change_ind = i2
           4 method_cd = f8
           4 box_nbr = c50
           4 manifest_nbr = c50
           4 destroyed_qty = i4
           4 autoclave_ind = i2
           4 destruction_org_id = f8
           4 updt_cnt = i4
           4 active_ind = i2
           4 active_status_chg_ind = i2
        3 AboTesting
           4 add_ind = i2
           4 change_ind = i2
           4 abo_testing_id = f8
           4 product_id = f8
           4 result_id = f8
           4 abo_group_cd = f8
           4 rh_type_cd = f8
           4 current_updated_ind = i2
           4 updt_cnt = i4
           4 active_ind = i2
           4 active_status_chg_ind = i2
        3 Transfer
           4 add_ind  = i2
           4 change_ind = i2
           4 transferring_locn_cd = f8
           4 transfer_cond_cd = f8
           4 transfer_reason_cd = f8
           4 transfer_vis_insp_cd = f8
           4 transfer_qty = i4
           4 login_dt_tm = dq8
           4 login_prsnl_id = f8
           4 login_cond_cd = f8
           4 login_vis_insp_cd = f8
           4 login_qty = i4
           4 return_dt_tm = dq8
           4 return_prsnl_id = f8
           4 return_reason_cd = f8
           4 return_cond_cd = f8
           4 return_vis_insp_cd = f8
           4 return_qty = i4
           4 updt_cnt = i4
           4 active_ind = i2
           4 active_status_chg_ind = i2
        3 Crossmatch
           4 add_ind = i2
           4 change_ind = i2
           4 crossmatch_qty = i4
           4 release_dt_tm = dq8
           4 release_prsnl_id = f8
           4 release_reason_cd = f8
           4 release_qty = i4
           4 updt_cnt = i4
           4 active_ind = i2
           4 crossmatch_exp_dt_tm = dq8
           4 reinstate_reason_cd = f8
           4 bb_id_nbr = c20
           4 xm_reason_cd = f8
           4 person_id = f8
           4 active_status_chg_ind = i2
        3 DispenseReturn
           4 add_ind = i2
           4 change_ind = i2
           4 dispense_return_id = f8
           4 return_dt_tm = dq8
           4 return_prsnl_id = f8
           4 return_reason_cd = f8
           4 return_vis_insp_cd = f8
           4 return_courier_id = f8
           4 return_qty = i4
           4 return_intl_units = i4
           4 updt_cnt = i4
           4 active_ind = i2
           4 return_courier_text = c100
           4 active_status_chg_ind = i2
        3 Receipt
           4 add_ind = i2
           4 change_ind = i2
           4 active_ind = i2
           4 ship_cond_cd = f8
           4 vis_insp_cd = f8
           4 orig_rcvd_qty = i4
           4 orig_intl_units = i4
           4 updt_cnt = i4
           4 bb_supplier_id = f8
           4 alpha_translation_id = f8
           4 active_status_chg_ind = i2
           4 temperature_value = f8
           4 temperature_degree_cd = f8
           4 electronic_receipt_ind = i2
        3 PatientDispense
           4 add_ind = i2
           4 change_ind = i2
           4 person_id = f8
           4 dispense_prov_id = f8
           4 dispense_reason_cd = f8
           4 dispense_to_locn_cd = f8
           4 dispense_from_locn_cd = f8
           4 device_id = f8
           4 dispense_vis_insp_cd = f8
           4 dispense_cooler_id = f8
           4 dispense_cooler_text = c40
           4 dispense_courier_id = f8
           4 dispense_status_flag = i4
           4 orig_dispense_intl_units = i4
           4 cur_dispense_intl_units = i4
           4 orig_dispense_qty = i4
           4 cur_dispense_qty = i4
           4 unknown_patient_ind = i2
           4 unknown_patient_text = c50
           4 updt_cnt = i4
           4 active_ind = i2
           4 dispense_courier_text = c100
           4 bb_id_nbr = c20
           4 active_status_chg_ind = i2
        3 AssignRelease
           4 add_ind = i2
           4 change_ind = i2
           4 assign_release_id = f8
           4 product_event_id = f8  ;NOT USED
           4 product_id = f8        ;NOT USED
           4 release_dt_tm = dq8
           4 release_prsnl_id = f8
           4 release_reason_cd = f8
           4 release_qty = i4
           4 updt_cnt = i4
           4 active_ind = i4
           4 release_intl_units = i4
           4 active_status_chg_ind = i2
        3 BBDeviceTransfer
           4 add_ind = i2
           4 change_ind = i2
           4 from_device_id = f8
           4 to_device_id = f8
           4 reason_cd = f8
           4 updt_cnt = f8
        3 BBExceptions[*]
           4 exception_type_cd = f8
           4 override_reason_cd = f8
           4 default_expire_dt_tm = dq8
        3 BBLabelVerify
           4 add_ind = i2
           4 bb_label_verify_id = f8
           4 label_verf_dt_tm = dq8
        3 BBInventoryTransfer
           4 add_ind = i2
           4 change_ind = i2
           4 from_owner_area_cd = f8
           4 from_inv_area_cd = f8
           4 to_owner_area_cd = f8
           4 to_inv_area_cd = f8
           4 transfer_reason_cd = f8
           4 transferred_qty = i4
           4 transferred_iu = i4
           4 event_type_cd = f8
           4 updt_cnt = i4
        3 owner_area_cd     = f8
        3 inventory_area_cd = f8
     2 req_label_verify_ind = i2
     2 bb_edn_id            = f8
     2 bb_edn_product_id    = f8
     2 edn_complete_ind     = i2
  1 donor_product_ind = i2
  1 continue_on_aborh_conflict_ind = i2
  1 copy_aborh_from_orig_prod_ind = i2
)
 
*/
 
 
RECORD reply
( 1 dup_product[*]
     2 generated_product_id  = f8
     2 db_product_id = f8
     2 history_ind = i2
     2 eligible_for_rereceive_ind = i2
     2 eligible_for_ship_receipt_ind = i2
  1 conflicting_aborh[*]
     2 generated_product_id  = f8
     2 db_product_id = f8
     2 db_abo_cd = f8
     2 db_abo_disp = c40
     2 db_rh_cd = f8
     2 db_rh_disp = c40
     2 history_ind = i2
     2 db_product_cd = f8
%i cclsource:status_block.inc
)
 
record acd_status
(
  1 StatusList[*]
    2 status = i4
    2 module_name = c40
    2 errnum = i4
    2 errmsg = c132
)
 
 
%i cclsource:glb_script_logging.inc
%i cclsource:bb_upd_edn_info.inc
 
/***********************************************************************
*   Script                                                             *
***********************************************************************/
;002
;SET reply->status_data->status = "F"
 
DECLARE nMaxProduct  = i4
DECLARE nMaxProductEvent = i4
DECLARE FAILURES = c2   ;;string to see if add or update failed
DECLARE Dup_Cnt = i2
DECLARE Con_Cnt = i2
DECLARE deriv_cur_avail_qty = i4
DECLARE deriv_cur_intl_units = i4
 
DECLARE cdf_meaning = c12 ;002
 
DECLARE nDonorProductInd = i2 with protect, noconstant(0)
 
DECLARE bb_exception_id = f8 with protect, noconstant(0.0)
 
declare nStatus				= i2 with protect, noconstant(0)
declare dShippedEventType	= f8 with protect, noconstant(0.0)
declare dInTransitEventType	= f8 with protect, noconstant(0.0)

declare dup_var = i4 with protect, noconstant(0)
declare conf_var = i4 with protect, noconstant(0)
 
set nStatus = uar_get_meaning_by_codeset(1610, "15", 1, dShippedEventType)
set nStatus = uar_get_meaning_by_codeset(1610, "25", 1, dInTransitEventType)
 
SET nDonorProductInd = validate(request->donor_product_ind, 0)
 
SET Dup_Cnt = 0
SET Con_Cnt = 0
 
SET FAILURES = "Y"  ;;to check the status of each select
 
SET nMaxProduct = SIZE(request->products,5)
SET nMaxProductEvent = request->max_product_events
SET nMaxSpecialTestings = request->max_special_testings
 
SET STAT = ALTERLIST(reply->dup_product, 10)
SET STAT = ALTERLIST(reply->conflicting_aborh, 10)
 
set sErrorMsg = FILLSTRING(255," ") ;002
set sError_Check = ERROR(sErrorMsg, 1) ;002
 
if (request->add_exists_ind = 1)
    if (nDonorProductInd = 1)
        /***********************************************************************
        *   Donor Duplicate Checking for Blood Products                        *
        ***********************************************************************/
        select into "nl:"
            p.*
        from
            product p,
            (dummyt d with seq = value(nMaxProduct))
        plan d
        join p
            where p.product_nbr = cnvtupper(request->products[d.seq].product_nbr)
              and p.active_ind = 1
              and request->products[d.seq].add_ind = 1
        detail
            Dup_Cnt = Dup_Cnt + 1
            if (mod(Dup_Cnt, 10) = 1 and Dup_Cnt != 1)
                stat = alterlist(reply->dup_product,Dup_Cnt + 10)
            endif
 
            reply->dup_product[Dup_Cnt].generated_product_id = request->products[d.seq].product_id
            reply->dup_product[Dup_Cnt].db_product_id = p.product_id
            reply->dup_product[Dup_Cnt].history_ind = 0
        with nocounter
 
        set sError_Check = error(sErrorMsg, 0)
        if (sError_Check != 0)
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "Select on product - dup check for blood products"
            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
        endif
 
        if (curqual > 0)
           set FAILURES = "Z"
        endif
 
        ;/***********************************************************************
        ;*  Donor Duplicate for BloodProducts (History Checking)                *
        ;***********************************************************************/
        select into "nl:"
            hp.*
 
        from
            (dummyt d with seq = value(nMaxProduct))
            ,bbhist_product hp
 
        plan d
        join hp
            where hp.product_nbr  = cnvtupper(request->products[d.seq].product_nbr)
              and hp.active_ind = 1
              and request->products[d.seq].add_ind = 1
        detail
            Dup_Cnt = Dup_Cnt + 1
            if (mod(Dup_Cnt, 10) = 1 and Dup_Cnt != 1)
                stat = alterlist(reply->dup_product,Dup_Cnt + 10)
            endif
 
            reply->dup_product[Dup_Cnt].generated_product_id = request->products[d.seq].product_id
            reply->dup_product[Dup_Cnt].db_product_id = hp.product_id
            reply->dup_product[Dup_Cnt].history_ind = 1
        with nocounter
 
        set sError_Check = error(sErrorMsg, 0)
        if (sError_Check != 0)
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "Select on bbhist_product - dup check for blood products"
            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
        endif
 
        IF (curqual > 0)
           SET FAILURES = "Z"
        ENDIF
 
    else
        /***********************************************************************
        *   Duplicate Checking for Blood Products                              *
        ***********************************************************************/
 
        SELECT into "nl:"
           *
 
        FROM product p
           ,blood_product bp
           ,(dummyt d WITH seq = VALUE(nMaxProduct))
 
        PLAN d
        JOIN p
           where p.product_nbr = cnvtupper(request->products[d.seq].product_nbr)
           and p.product_cd = request->products[d.seq].product_cd
           and (((request->products[d.seq].product_sub_nbr <= " ")
                 and (nullind(p.product_sub_nbr) = 1
                      or p.product_sub_nbr <= " "))
            or (p.product_sub_nbr = request->products[d.seq].product_sub_nbr))
           and p.active_ind = 1
           and request->products[d.seq].add_ind = 1
 
        JOIN bp
           where  bp.product_id = p.product_id
                      and ((request->products[d.seq].BloodProducts.supplier_prefix > " "
                          and bp.supplier_prefix = request->products[d.seq].BloodProducts.supplier_prefix)
                      or (request->products[d.seq].BloodProducts.supplier_prefix <= " "
                          and p.cur_supplier_id = request->products[d.seq].cur_supplier_id))
 
        detail
 
          Dup_Cnt = Dup_Cnt + 1
              IF (mod(Dup_Cnt, 10) = 1 and Dup_Cnt != 1)
                 STAT = ALTERLIST(reply->dup_product,Dup_Cnt + 10)
              ENDIF
 
           reply->dup_product[Dup_Cnt].generated_product_id = request->products[d.seq].product_id
           reply->dup_product[Dup_Cnt].db_product_id = p.product_id
           reply->dup_product[Dup_Cnt].history_ind = 0
        WITH NOCOUNTER
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (sError_Check != 0)
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "Select on product - dup check for blood products"
            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
        endif
 
        IF (CURQUAL > 0)
           SET FAILURES = "Z"
        ENDIF
 
        /***********************************************************************
        *    Conflicting ABORH for Product number                              *
        ***********************************************************************/

        SELECT into "nl:"
           d1.seq
 
        FROM product p
           ,blood_product bp
           ,product_category pc
           ,product_category pcr
           ,(dummyt d1 WITH seq = VALUE(nMaxProduct))
 
        PLAN d1
        JOIN p
           where p.product_nbr = cnvtupper(request->products[d1.seq].product_nbr)
           and p.cur_supplier_id = request->products[d1.seq].cur_supplier_id
           and p.active_ind = 1
        JOIN pc
           where pc.product_cat_cd  = p.product_cat_cd    
        JOIN pcr
           where pcr.product_cat_cd  = request->Products[d1.seq]->product_cat_cd
        JOIN bp
           where bp.product_id = p.product_id
           and (bp.cur_abo_cd != request->products[d1.seq].BloodProducts.cur_abo_cd
	           OR request->products[d1.seq].BloodProducts.cur_rh_cd != bp.cur_rh_cd
	           	And (bp.cur_rh_cd > 0 and request->products[d1.seq].BloodProducts.cur_rh_cd > 0)
	           	And not((pc.rh_required_ind = 0 and bp.cur_rh_cd = 0) 
	           			or (pcr.rh_required_ind = 0 and request->products[d1.seq].BloodProducts.cur_rh_cd = 0)))
        ORDER BY d1.seq,p.create_dt_tm
 
        DETAIL
			val = Locateval(dup_var, 1, size(reply->dup_product, 5), p.product_id, reply->dup_product[dup_var].db_product_id)
			val1 = Locateval(conf_var, 1, size(reply->conflicting_aborh, 5), request->products[d1.seq].product_id, 
 		                    reply->conflicting_aborh[conf_var].generated_product_id)
 		                    
			IF (val > 0 and val1 > 0)
				IF (request->copy_aborh_from_orig_prod_ind = 1)
					request->products[d1.seq].BloodProducts.cur_abo_cd = bp.cur_abo_cd
					request->products[d1.seq].BloodProducts.cur_rh_cd = bp.cur_rh_cd
				ENDIF
				IF (request->products[d1.seq].add_ind = 1)	 
					reply->conflicting_aborh[val1].generated_product_id = request->products[d1.seq].product_id
					reply->conflicting_aborh[val1].db_product_id = p.product_id
					reply->conflicting_aborh[val1].db_abo_cd = bp.cur_abo_cd
					reply->conflicting_aborh[val1].db_rh_cd = bp.cur_rh_cd
					reply->conflicting_aborh[val1].history_ind = 0
					reply->conflicting_aborh[val1].db_product_cd = p.product_cd
				ENDIF
			ELSE
				IF (Con_Cnt = 0 or
					reply->conflicting_aborh[Con_Cnt].generated_product_id != request->products[d1.seq].product_id)
					IF (request->copy_aborh_from_orig_prod_ind = 1)
						request->products[d1.seq].BloodProducts.cur_abo_cd = bp.cur_abo_cd
						request->products[d1.seq].BloodProducts.cur_rh_cd = bp.cur_rh_cd
					ENDIF
					IF (request->products[d1.seq].add_ind = 1)
						Con_Cnt = Con_Cnt + 1
						IF (mod(Con_Cnt, 10) = 1 and Con_Cnt != 1)
							STAT = ALTERLIST(reply->conflicting_aborh,Con_Cnt + 10)
						ENDIF
						reply->conflicting_aborh[Con_Cnt].generated_product_id = request->products[d1.seq].product_id
						reply->conflicting_aborh[Con_Cnt].db_product_id = p.product_id
						reply->conflicting_aborh[Con_Cnt].db_abo_cd = bp.cur_abo_cd
						reply->conflicting_aborh[Con_Cnt].db_rh_cd = bp.cur_rh_cd
						reply->conflicting_aborh[Con_Cnt].history_ind = 0
						reply->conflicting_aborh[Con_Cnt].db_product_cd = p.product_cd
					ENDIF 
				ENDIF
			ENDIF
        WITH NOCOUNTER
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (sError_Check != 0)
            SET FAILURES = "Z"
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "Select on product for conflicting aborh"
            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
        endif
 
        if( (CURQUAL > 0) and (request->continue_on_aborh_conflict_ind = 0)
                and (Con_Cnt > 0) )
            SET FAILURES = "Z"            
        endif
 
        /***********************************************************************
        *   Duplicate Checking for Derivatives                                 *
        ***********************************************************************/
        ;;select from Dereviatves and Product Table
 
        SELECT into "nl:"
          d2.seq
 
        FROM product p
             ,derivative der
             ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        PLAN d2
        JOIN p
            where p.product_nbr = cnvtupper(request->products[d2.seq].product_nbr)
            and p.product_cd = request->products[d2.seq].product_cd
            and (((request->products[d2.seq].product_sub_nbr <= " ")
                 and (nullind(p.product_sub_nbr) = 1
                      or p.product_sub_nbr <= " "))
            or (p.product_sub_nbr = request->products[d2.seq].product_sub_nbr))
            and (p.cur_owner_area_cd = request->products[d2.seq].cur_owner_area_cd
            or request->products[d2.seq].cur_owner_area_cd = 0)
            and (p.cur_inv_area_cd = request->products[d2.seq].cur_inv_area_cd
            or request->products[d2.seq].cur_inv_area_cd = 0)
            and p.active_ind = 1
            and request->products[d2.seq].add_ind = 1
        JOIN der
            where der.product_id  = p.product_id
            and request->products[d2.seq].derivatives.manufacturer_id = der.manufacturer_id
 
        detail
           Dup_Cnt = Dup_Cnt + 1
           IF (mod(Dup_Cnt, 10) = 1 and Dup_Cnt != 1)
             stat = ALTERLIST(reply->dup_product,Dup_Cnt + 10)
           ENDIF
 
           reply->dup_product[Dup_Cnt].generated_product_id = request->products[d2.seq].product_id
           reply->dup_product[Dup_Cnt].db_product_id = p.product_id
           reply->dup_product[Dup_Cnt].history_ind = 0
 
        WITH NOCOUNTER
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (sError_Check != 0)
            SET FAILURES = "Z"
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "Select on product - dup check for derivatives"
            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
        endif
        IF (CURQUAL > 0)
           SET FAILURES = "Z"
        ENDIF
 
 
        ;/***********************************************************************
        ;*   Duplicate for Derivatives and BloodProducts (History Checking)     *
        ;***********************************************************************/
 
        SELECT into "nl:"
           d4.seq
           ,product_class_meaning = uar_get_code_meaning(hp.product_class_cd)
 
        FROM
           (dummyt d4 with seq = value(nMaxProduct))
           ,bbhist_product hp
 
        PLAN d4
        JOIN hp
           where hp.product_nbr  = cnvtupper(request->products[d4.seq].product_nbr)
           and hp.product_cd = request->products[d4.seq].product_cd
            and (((request->products[d4.seq].product_sub_nbr <= " ")
                 and (nullind(hp.product_sub_nbr) = 1
                      or hp.product_sub_nbr <= " "))
            or (hp.product_sub_nbr = request->products[d4.seq].product_sub_nbr))
           and (hp.owner_area_cd = request->products[d4.seq].cur_owner_area_cd
           or request->products[d4.seq].cur_owner_area_cd = 0)
           and (hp.inv_area_cd = request->products[d4.seq].cur_inv_area_cd
           or request->products[d4.seq].cur_inv_area_cd = 0)
           and hp.active_ind = 1
           and request->products[d4.seq].add_ind = 1
 
 
        detail
           Dup_Cnt = Dup_Cnt + 1
              IF (mod(Dup_Cnt, 10) = 1 and Dup_Cnt != 1)
                 stat = ALTERLIST(reply->dup_product,Dup_Cnt + 10)
              ENDIF
 
           IF (product_class_meaning = "DERIVATIVE")
              IF (validate(request->products[d4.seq].Derivatives.manufacturer_id, 0.0) > 0.0)
                 IF (hp.supplier_id = request->products[d4.seq].Derivatives.manufacturer_id)
                    reply->dup_product[Dup_Cnt].generated_product_id = request->products[d4.seq].product_id
                    reply->dup_product[Dup_Cnt].db_product_id = hp.product_id
                    reply->dup_product[Dup_Cnt].history_ind = 1
                 ENDIF
              ELSEIF (validate(request->products[d4.seq].Derivatives.manufacturer_id, 0.0) = 0.0)
                 IF (hp.supplier_id = request->products[d4.seq].cur_supplier_id)
                    reply->dup_product[Dup_Cnt].generated_product_id = request->products[d4.seq].product_id
                    reply->dup_product[Dup_Cnt].db_product_id = hp.product_id
                    reply->dup_product[Dup_Cnt].history_ind = 1
                 ENDIF
              ENDIF
           ELSEIF (hp.supplier_id = request->products[d4.seq].cur_supplier_id) ;blood product
              reply->dup_product[Dup_Cnt].generated_product_id = request->products[d4.seq].product_id
              reply->dup_product[Dup_Cnt].db_product_id = hp.product_id
              reply->dup_product[Dup_Cnt].history_ind = 1
           ENDIF
 
 
        WITH NOCOUNTER
 
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (sError_Check != 0)
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "Select on product - dups for bp and de"
            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
        endif
        IF (CURQUAL > 0)
           SET FAILURES = "Z"
        ENDIF
 
        ;/***********************************************************************
        ;*   Duplicate for Conflicting ABORh (History Checking)                 *
        ;***********************************************************************/
        SELECT INTO "nl:"
           d5.seq
           ,product_class_meaning = uar_get_code_meaning(hp.product_class_cd)
           ,hp.abo_cd
           ,hp.rh_cd
           ,pcr.rh_required_ind
 
        FROM
            (dummyt d5 with seq = value(nMaxProduct))
            ,bbhist_product hp
            ,product_category pcr
            ,product_index pi
            ,product_category pc
 
        PLAN d5
        JOIN pcr
           where pcr.product_cat_cd  = request->Products[d5.seq]->product_cat_cd
        JOIN hp
           where hp.product_nbr = cnvtupper(request->products[d5.seq].product_nbr)
           and hp.supplier_id = request->products[d5.seq].cur_supplier_id                      
        JOIN pi
           where pi.product_cd = hp.product_cd
        JOIN pc
           where pc.product_cat_cd = pi.product_cat_cd
           and (hp.abo_cd != request->products[d5.seq].BloodProducts.cur_abo_cd
           		or request->products[d5.seq].BloodProducts.cur_rh_cd != hp.rh_cd
	           	And (hp.rh_cd > 0 and request->products[d5.seq].BloodProducts.cur_rh_cd > 0)
	           	And not((pc.rh_required_ind = 0 and hp.rh_cd = 0) 
	           			or (pcr.rh_required_ind = 0 and request->products[d5.seq].BloodProducts.cur_rh_cd = 0)))
        ORDER BY d5.seq,hp.active_status_dt_tm
 
        DETAIL
			val = Locateval(dup_var, 1, size(reply->dup_product, 5), hp.product_id, reply->dup_product[dup_var].db_product_id)
			val1 = Locateval(conf_var, 1, size(reply->conflicting_aborh, 5), request->products[d5.seq].product_id, 
							reply->conflicting_aborh[conf_var].generated_product_id)
			IF (val > 0 and val1 > 0)
				IF(request->copy_aborh_from_orig_prod_ind = 1)
					request->products[d5.seq].BloodProducts.cur_abo_cd = hp.abo_cd
					request->products[d5.seq].BloodProducts.cur_rh_cd = hp.rh_cd
				ENDIF
				IF (request->products[d5.seq].add_ind = 1)
					IF (product_class_meaning = "BLOOD")
						reply->conflicting_aborh[val1].generated_product_id = request->products[d5.seq].product_id
						reply->conflicting_aborh[val1].db_product_id = hp.product_id
						reply->conflicting_aborh[val1].db_abo_cd = hp.abo_cd
						reply->conflicting_aborh[val1].db_rh_cd = hp.rh_cd
						reply->conflicting_aborh[val1].history_ind = 1
						reply->conflicting_aborh[val1].db_product_cd = hp.product_cd
					ENDIF
				ENDIF
			ELSE
				IF (Con_Cnt = 0 or
					reply->conflicting_aborh[Con_Cnt].generated_product_id != request->products[d5.seq].product_id)
					IF(request->copy_aborh_from_orig_prod_ind = 1)
						request->products[d5.seq].BloodProducts.cur_abo_cd = hp.abo_cd
						request->products[d5.seq].BloodProducts.cur_rh_cd = hp.rh_cd
					ENDIF
					IF (request->products[d5.seq].add_ind = 1)
						Con_Cnt = Con_Cnt + 1
						IF (mod(Con_Cnt, 10) = 1 and Con_Cnt != 1)
							stat = ALTERLIST(reply->conflicting_aborh,Con_Cnt + 10)
						ENDIF
						IF (product_class_meaning = "BLOOD")
							reply->conflicting_aborh[Con_Cnt].generated_product_id = request->products[d5.seq].product_id
							reply->conflicting_aborh[Con_Cnt].db_product_id = hp.product_id
							reply->conflicting_aborh[Con_Cnt].db_abo_cd = hp.abo_cd
							reply->conflicting_aborh[Con_Cnt].db_rh_cd = hp.rh_cd
							reply->conflicting_aborh[Con_Cnt].history_ind = 1
							reply->conflicting_aborh[Con_Cnt].db_product_cd = hp.product_cd
						ENDIF
					ENDIF
				ENDIF
			ENDIF
        WITH NOCOUNTER
 
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (sError_Check != 0)
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "Select on bbhist_product - history dup check"
            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
        endif
 
        if( (CURQUAL > 0) and (request->continue_on_aborh_conflict_ind = 0)
                and (Con_Cnt > 0) )
            SET FAILURES = "Z" 
        endif
 
        SET STAT = ALTERLIST(reply->conflicting_aborh, Con_Cnt)
        SET STAT = ALTERLIST(reply->dup_product, Dup_Cnt)
 
        if (size(reply->dup_product,5) > 0)
            set cdf_meaning = "14"
            set dest_event_type_cd = 0.0
            set stat = uar_get_meaning_by_codeset(1610,cdf_meaning,1,dest_event_type_cd)
            ;Check dups to see if eligible for re-receive
 
            select into "nl:"
                di_reason_mean = uar_get_code_meaning(di.reason_cd)
                , product_class_mean = uar_get_code_meaning(p.product_class_cd)
                , di_ind = decode(di.seq,1,0)
 
            from
                (dummyt d with seq = value(size(reply->dup_product,5)))
                , product p
                , (dummyt d_pe with seq = 1)
                , product_event pe
                , (dummyt d_di with seq = 1)
                , disposition di
 
            plan d
            join p  where p.product_id = reply->dup_product[d.seq].db_product_id
            join d_pe
            join pe where pe.product_id = p.product_id
                      and pe.event_type_cd in (dest_event_type_cd, dShippedEventType, dInTransitEventType)
                      and pe.active_ind = 1
                      and pe.event_status_flag = 0
            join d_di
            join di where di.product_event_id = pe.related_product_event_id
 
            detail
                if (product_class_mean = "DERIVATIVE")
                    reply->dup_product[d.seq].eligible_for_rereceive_ind = 1
                else
                    if (di_ind = 1 and di_reason_mean = "RE RECEIVE")
                        reply->dup_product[d.seq].eligible_for_rereceive_ind = 1
                    endif
                endif
 
                if ((pe.event_type_cd = dShippedEventType) or (pe.event_type_cd = dInTransitEventType))
                    reply->dup_product[d.seq].eligible_for_ship_receipt_ind = 1
                else
                    reply->dup_product[d.seq].eligible_for_ship_receipt_ind = 0
                endif
 
            with nocounter, outerjoin(d_pe), outerjoin(d_di)
 
            ;002
            set sError_Check = ERROR(sErrorMsg, 0)
            if (sError_Check != 0)
                set reply->status_data->status = "F"
                set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                set reply->status_data.subeventstatus[1].OperationStatus = "F"
                set reply->status_data.subeventstatus[1].TargetObjectName = "Select for re-receive eligibility"
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            endif
        endif
    endif
 
    IF (FAILURES = "Z")
       go to exit_script
    ENDIF
    ;/***********************************************************************
    ;*     Adding Records                                                   *
    ;***********************************************************************/
    ;;adding/inserting into Product Table
 
;    set stat = alterlist(acd_status->StatusList,0)
    if (request->pr_add_cnt > 0)
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        INSERT into
           Product p
            ,(dummyt d WITH seq = VALUE(nMaxProduct))
 
        SET
            p.product_id = request->Products[d.seq].product_id
            ,p.product_cd = request->Products[d.seq].product_cd
            ,p.product_cat_cd = request->Products[d.seq].product_cat_cd
            ,p.product_class_cd = request->Products[d.seq].product_class_cd
            ,p.product_nbr = request->Products[d.seq].product_nbr
            ,p.product_sub_nbr = request->Products[d.seq].product_sub_nbr
            ,p.alternate_nbr = request->Products[d.seq].alternate_nbr
            ,p.flag_chars = request->Products[d.seq].flag_chars
            ,p.pooled_product_id = request->Products[d.seq].pooled_product_id
            ,p.modified_product_id = request->Products[d.seq].modified_product_id
            ,p.locked_ind = request->Products[d.seq].locked_ind
            ,p.cur_inv_locn_cd = request->Products[d.seq].cur_inv_locn_cd
            ,p.orig_inv_locn_cd = request->Products[d.seq].orig_inv_locn_cd
            ,p.cur_supplier_id = request->Products[d.seq].cur_supplier_id
            ,p.recv_dt_tm = cnvtdatetime(request->Products[d.seq].recv_dt_tm)
            ,p.recv_prsnl_id = request->Products[d.seq].recv_prsnl_id
            ,p.orig_ship_cond_cd = request->Products[d.seq].orig_ship_cond_cd
            ,p.orig_vis_insp_cd = request->Products[d.seq].orig_vis_insp_cd
            ,p.storage_temp_cd = request->Products[d.seq].storage_temp_cd
            ,p.cur_unit_meas_cd = request->Products[d.seq].cur_unit_meas_cd
            ,p.orig_unit_meas_cd = request->Products[d.seq].orig_unit_meas_cd
            ,p.pooled_product_ind = request->Products[d.seq].pooled_product_ind
            ,p.modified_product_ind = request->Products[d.seq].modified_product_ind
            ,p.corrected_ind = request->Products[d.seq].corrected_ind
            ,p.updt_cnt   = 0
            ,p.updt_dt_tm =  cnvtdatetime(curdate,curtime3)
            ,p.updt_id    =  reqinfo->updt_id
            ,p.updt_task =  reqinfo->updt_task
            ,p.updt_applctx  = reqinfo->updt_applctx
            ,p.active_ind = request->Products[d.seq].active_ind
            ,p.cur_expire_dt_tm = cnvtdatetime(request->Products[d.seq].cur_expire_dt_tm)
            ,p.cur_owner_area_cd = request->Products[d.seq].cur_owner_area_cd
            ,p.cur_inv_area_cd = request->Products[d.seq].cur_inv_area_cd
            ,p.cur_inv_device_id = request->Products[d.seq].cur_inv_device_id
            ,p.cur_dispense_device_id = request->Products[d.seq].cur_dispense_device_id
            ,p.contributor_system_cd = request->Products[d.seq].contributor_system_cd
            ,p.pool_option_id = request->Products[d.seq].pool_option_id
            ,p.barcode_nbr = request->Products[d.seq].barcode_nbr
            ,p.create_dt_tm = cnvtdatetime(request->Products[d.seq].create_dt_tm)
            ,p.active_status_cd =
                    if (request->Products[d.seq].active_ind = 1)
                            reqdata->active_status_cd
                    else
                            reqdata->inactive_status_cd
                    endif
            ,p.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
            ,p.active_status_prsnl_id = reqinfo->updt_id
            ,p.donated_by_relative_ind = request->Products[d.seq].donated_by_relative_ind
            ,p.disease_cd              = request->Products[d.seq].disease_cd
            ,p.donation_type_cd        = request->Products[d.seq].donation_type_cd
            ,p.electronic_entry_flag   = request->Products[d.seq].electronic_entry_flag
            ,p.req_label_verify_ind    = request->Products[d.seq].req_label_verify_ind
            ,p.intended_use_print_parm_txt = request->Products[d.seq].intended_use_print_parm_txt
            ,p.product_type_barcode = request->Products[d.seq].product_type_barcode
 
        PLAN d
            where request->products[d.seq].add_ind = 1
        JOIN P
 
        WITH NOCOUNTER, status(acd_status->StatusList[d.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pr_add_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Add count doesn't match insert count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into product"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Inserting into Derivatives Table
    ;*
    if (request->de_add_cnt > 0)
 
        set p_cnt_sub = VALUE(nMaxProduct)
 
        for (p_cnt = 1 to p_cnt_sub)
            set deriv_cur_avail_qty = request->Products[p_cnt].Derivatives.cur_avail_qty
            set deriv_cur_intl_units = request->Products[p_cnt].Derivatives.cur_intl_units
            set pe_cnt_sub = size(request->Products[p_cnt].ProductEvents,5)
            for (pe_cnt = 1 to pe_cnt_sub)
                set cdf_meaning = trim(uar_get_code_meaning(request->Products[p_cnt].ProductEvents[pe_cnt].event_type_cd))
                if (request->Products[p_cnt].ProductEvents[pe_cnt].add_ind = 1 AND
                   (cdf_meaning = "1" OR cdf_meaning = "2"))
                    set deriv_cur_avail_qty = 0
                    set deriv_cur_intl_units = 0
                    set pe_cnt = pe_cnt_sub
                endif
            endfor
 
            if (request->products[p_cnt].derivatives.add_ind = 1)
 
	        INSERT into
	            DERIVATIVE  d
 
	        SET
	             d.product_id = request->Products[p_cnt].product_id
	            ,d.product_cd = request->Products[p_cnt].Derivatives.product_cd
	            ,d.item_volume = request->Products[p_cnt].Derivatives.item_volume
	            ,d.item_unit_meas_cd = request->Products[p_cnt].Derivatives.item_unit_meas_cd
	            ,d.updt_cnt = 0
	            ,d.active_ind = request->Products[p_cnt].Derivatives.active_ind
	            ,d.manufacturer_id = request->Products[p_cnt].Derivatives.manufacturer_id
	            ,d.cur_avail_qty = deriv_cur_avail_qty
	            ,d.units_per_vial = request->Products[p_cnt].Derivatives.units_per_vial
	            ,d.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
	            ,d.updt_id = reqinfo->updt_id
	            ,d.updt_task = reqinfo->updt_task
	            ,d.updt_applctx = reqinfo->updt_applctx
	            ,d.active_status_cd =
	                    if (request->Products[p_cnt].Derivatives.active_ind = 1)
	                            reqdata->active_status_cd
	                    else
	                            reqdata->inactive_status_cd
	                    endif
	            ,d.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
	            ,d.active_status_prsnl_id = reqinfo->updt_id
	            ,d.cur_intl_units = deriv_cur_intl_units
 
 
 
 
	           WITH NOCOUNTER
 
        ;002
               set sError_Check = ERROR(sErrorMsg, 0)
               if (sError_Check != 0)
                  set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into derivative"
            go to exit_script
               endif
	        endif
 
        endfor ;End for(p_cnt = 1...)
 
    endif
 
 
    ;*
    ;* Inserting into Blood_Product Table
    ;*
    if (request->bp_add_cnt > 0)
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        INSERT into
           blood_product bp
           ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        SET
           bp.product_id = request->Products[d2.seq].product_id
           ,bp.product_cd  = request->Products[d2.seq].BloodProducts.product_cd
           ,bp.supplier_prefix = request->Products[d2.seq].BloodProducts.supplier_prefix
           ,bp.cur_volume = request->Products[d2.seq].BloodProducts.cur_volume
           ,bp.orig_label_abo_cd = request->Products[d2.seq].BloodProducts.orig_label_abo_cd
           ,bp.orig_label_rh_cd = request->Products[d2.seq].BloodProducts.orig_label_rh_cd
           ,bp.cur_abo_cd  = request->Products[d2.seq].BloodProducts.cur_abo_cd
           ,bp.cur_rh_cd  = request->Products[d2.seq].BloodProducts.cur_rh_cd
           ,bp.segment_nbr = request->Products[d2.seq].BloodProducts.segment_nbr
           ,bp.orig_expire_dt_tm = cnvtdatetime(request->Products[d2.seq].BloodProducts.orig_expire_dt_tm)
           ,bp.orig_volume  = request->Products[d2.seq].BloodProducts.orig_volume
           ,bp.lot_nbr  = request->Products[d2.seq].BloodProducts.lot_nbr
           ,bp.autologous_ind = request->Products[d2.seq].BloodProducts.autologous_ind
           ,bp.directed_ind = request->Products[d2.seq].BloodProducts.directed_ind
           ,bp.drawn_dt_tm = cnvtdatetime(request->Products[d2.seq].BloodProducts.drawn_dt_tm)
           ,bp.updt_cnt  = 0
           ,bp.active_ind = request->Products[d2.seq].BloodProducts.active_ind
           ,bp.donor_person_id = request->Products[d2.seq].BloodProducts.donor_person_id
           ,bp.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,bp.updt_id = reqinfo->updt_id
           ,bp.updt_task = reqinfo->updt_task
           ,bp.updt_applctx = reqinfo->updt_applctx
           ,bp.active_status_cd =
                    if (request->Products[d2.seq].BloodProducts.active_ind = 1)
                            reqdata->active_status_cd
                    else
                            reqdata->inactive_status_cd
                    endif
           ,bp.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,bp.active_status_prsnl_id = reqinfo->updt_id
 
        PLAN d2
           where request->products[d2.seq].BloodProducts.add_ind = 1
        JOIN bp
 
        WITH NOCOUNTER, status(acd_status->StatusList[d2.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->bp_add_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Add count doesn't match insert count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into blood_product"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Inserting into Product Note
    ;*
    if (request->pn_add_cnt > 0)
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        INSERT into
           product_note pn
           ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        SET
           pn.product_id = request->Products[d2.seq].product_id
           ,pn.product_note_id  = request->Products[d2.seq].ProductNote.new_product_note_id
           ,pn.long_text_id = request->Products[d2.seq].ProductNote.new_long_text_id
           ,pn.updt_cnt  = 0
           ,pn.active_ind = 1
           ,pn.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,pn.updt_id = reqinfo->updt_id
           ,pn.updt_task = reqinfo->updt_task
           ,pn.updt_applctx = reqinfo->updt_applctx
           ,pn.active_status_cd = reqdata->active_status_cd
           ,pn.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,pn.active_status_prsnl_id = reqinfo->updt_id
 
        PLAN d2
           where request->products[d2.seq].ProductNote.add_ind = 1
        JOIN pn
 
        WITH NOCOUNTER, status(acd_status->StatusList[d2.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pn_add_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Add count doesn't match insert count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into product_note"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Inserting into Long Text
    ;*
    if (request->pn_add_cnt > 0)
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        INSERT into
           long_text lt
           ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        SET
           lt.long_text_id = request->Products[d2.seq].ProductNote.new_long_text_id
           ,lt.long_text  = request->Products[d2.seq].ProductNote.product_note
           ,lt.parent_entity_name = "PRODUCT_NOTE"
           ,lt.parent_entity_id = request->Products[d2.seq].ProductNote.new_product_note_id
           ,lt.updt_cnt  = 0
           ,lt.active_ind = 1
           ,lt.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,lt.updt_id = reqinfo->updt_id
           ,lt.updt_task = reqinfo->updt_task
           ,lt.updt_applctx = reqinfo->updt_applctx
           ,lt.active_status_cd = reqdata->active_status_cd
           ,lt.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,lt.active_status_prsnl_id = reqinfo->updt_id
 
        PLAN d2
           where request->products[d2.seq].ProductNote.add_ind = 1
        JOIN lt
 
        WITH NOCOUNTER, status(acd_status->StatusList[d2.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pn_add_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Add count doesn't match insert count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into long_text"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Inserting into Special_Testing Table
    ;*
    if (request->st_add_cnt > 0)
        set nMaxSize = nMaxProduct * nMaxSpecialTestings
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxSize)
        INSERT into
           special_testing st
           ,(dummyt d3 with seq = VALUE(nMaxProduct))
           ,(dummyt d4 WITH seq = VALUE(nMaxSpecialTestings))
 
        SET
           st.product_id = request->Products[d3.seq].product_id
           ,st.special_testing_id = request->Products[d3.seq].SpecialTests[d4.seq].special_testing_id
           ,st.special_testing_cd = request->Products[d3.seq].SpecialTests[d4.seq].special_testing_cd
           ,st.confirmed_ind = request->Products[d3.seq].SpecialTests[d4.seq].confirmed_ind
           ,st.updt_cnt   = 0
           ,st.active_ind = request->Products[d3.seq].SpecialTests[d4.seq].active_ind
           ,st.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,st.updt_id = reqinfo->updt_id
           ,st.updt_task = reqinfo->updt_task
           ,st.updt_applctx = reqinfo->updt_applctx
           ,st.active_status_cd =
                    if (request->Products[d3.seq].SpecialTests[d4.seq].active_ind = 1)
                            reqdata->active_status_cd
                    else
                            reqdata->inactive_status_cd
                    endif
           ,st.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,st.active_status_prsnl_id = reqinfo->updt_id
           ,st.product_rh_phenotype_id = request->Products[d3.seq].SpecialTests[d4.seq].product_rh_phenotype_id
           ,st.barcode_value_txt = request->Products[d3.seq].SpecialTests[d4.seq].barcode_value
           ,st.modifiable_flag = request->Products[d3.seq].SpecialTests[d4.seq].modifiable_flag
 
        PLAN d3
        JOIN d4
           where d4.seq <= SIZE(request->products[d3.seq]->SpecialTests,5)
           and request->products[d3.seq].SpecialTests[d4.seq].add_ind = 1
        JOIN st
 
        WITH NOCOUNTER, status(request->Products[d3.seq].SpecialTests[d4.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(request->Products,5))
            for (j = 1 to size(request->Products[i].SpecialTests,5))
                if (request->Products[i].SpecialTests[j].status = 1)
                    set success_count = success_count + 1
                    ;reset the status after it is counted
                    set request->Products[i].SpecialTests[j].status = 0
                endif
            endfor
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->st_add_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Add count doesn't match insert count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into special_testing"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Inserting into Product_Events Table
    ;*
    if (request->pe_add_cnt > 0)
        set nMaxSize = nMaxProduct * nMaxProductEvent
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxSize)
 
        INSERT into
          Product_Event PE
          ,(dummyt d4 WITH seq = VALUE(nMaxProduct))
          ,(dummyt d5 WITH seq = VALUE(nMaxProductEvent))
 
        SET
           pe.product_event_id = request->Products[d4.seq].ProductEvents[d5.seq].product_event_id
           ,pe.product_id = request->Products[d4.seq].product_id
           ,pe.order_id = request->Products[d4.seq].ProductEvents[d5.seq].order_id
           ,pe.bb_result_id = request->Products[d4.seq].ProductEvents[d5.seq].bb_result_id
           ,pe.event_type_cd = request->Products[d4.seq].ProductEvents[d5.seq].event_type_cd
           ,pe.event_dt_tm = cnvtdatetime(request->Products[d4.seq].ProductEvents[d5.seq].event_dt_tm)
           ,pe.event_prsnl_id =
                    if (request->Products[d4.seq].ProductEvents[d5.seq].event_prsnl_id > 0.0)
                       request->Products[d4.seq].ProductEvents[d5.seq].event_prsnl_id
                    else
                       reqinfo->updt_id
                    endif
           ,pe.updt_cnt = 0
           ,pe.active_ind = request->Products[d4.seq].ProductEvents[d5.seq].active_ind
           ,pe.person_id = request->Products[d4.seq].ProductEvents[d5.seq].person_id
           ,pe.encntr_id = request->Products[d4.seq].ProductEvents[d5.seq].encntr_id
           ,pe.override_ind = request->Products[d4.seq].ProductEvents[d5.seq].override_ind
           ,pe.override_reason_cd = request->Products[d4.seq].ProductEvents[d5.seq].override_reason_cd
           ,pe.related_product_event_id = request->Products[d4.seq].ProductEvents[d5.seq].related_product_event_id
           ,pe.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
           ,pe.updt_id = reqinfo->updt_id
           ,pe.updt_task = reqinfo->updt_task
           ,pe.updt_applctx = reqinfo->updt_applctx
           ,pe.active_status_cd =
                    if (request->Products[d4.seq].ProductEvents[d5.seq].active_ind = 1)
                            reqdata->active_status_cd
                    else
                            reqdata->inactive_status_cd
                    endif
           ,pe.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,pe.active_status_prsnl_id = reqinfo->updt_id
           ,pe.event_status_flag =  request->Products[d4.seq].ProductEvents[d5.seq].event_status_flag
           ,pe.event_tz = if (CurUTC = 1)
                             CurTimeZoneApp
                          else
                             0
                          endif
           ,pe.owner_area_cd     =  if(request->Products[d4.seq].ProductEvents[d5.seq].owner_area_cd <= 0)
           								request->Products[d4.seq].cur_owner_area_cd
           							else
           								request->Products[d4.seq].ProductEvents[d5.seq].owner_area_cd
           							endif
           ,pe.inventory_area_cd =  if(request->Products[d4.seq].ProductEvents[d5.seq].inventory_area_cd <= 0)
           								request->Products[d4.seq].cur_inv_area_cd
           							else
           								request->Products[d4.seq].ProductEvents[d5.seq].inventory_area_cd
           							endif 
        PLAN d4
        JOIN d5
           where d5.seq <= SIZE(request->products[d4.seq]->ProductEvents,5)
           and request->products[d4.seq].ProductEvents[d5.seq].add_ind = 1
        JOIN pe
 
        WITH NOCOUNTER, status(request->Products[d4.seq].ProductEvents[d5.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(request->Products,5))
            for (j = 1 to size(request->Products[i].ProductEvents,5))
                if (request->Products[i].ProductEvents[j].status = 1)
                    set success_count = success_count + 1
                    ;reset status after it has been counted
                    set request->Products[i].ProductEvents[j].status = 0
                endif
            endfor
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pe_add_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Add count doesn't match insert count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into product_event"
            go to exit_script
        ENDIF
 
        set stat = alterlist(acd_status->StatusList,0)
 
        for (i = 1 to size(request->Products,5))
            for (j = 1 to size(request->Products[i]->ProductEvents,5))
                set cdf_meaning = uar_get_code_meaning(request->Products[i]->ProductEvents[j].event_type_cd)
 
                if (cdf_meaning = "5")
                    ;*
                    ;* Inserting into Disposition Table
                    ;*
                    if ( request->Products[i].ProductEvents[j].Disposition.add_ind = 1)
                        INSERT into
                          Disposition d
 
                        SET
                           d.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,d.product_id = request->Products[i].product_id
                           ,d.reason_cd =  request->Products[i].ProductEvents[j].Disposition.reason_cd
                           ,d.disposed_qty = request->Products[i].ProductEvents[j].Disposition.disposed_qty
                           ,d.updt_cnt = 0
                           ,d.active_ind = request->Products[i].ProductEvents[j].Disposition.active_ind
                           ,d.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                           ,d.updt_id = reqinfo->updt_id
                           ,d.updt_task = reqinfo->updt_task
                           ,d.updt_applctx = reqinfo->updt_applctx
                           ,d.active_status_cd =
                                if (request->Products[i].ProductEvents[j].active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
                           ,d.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,d.active_status_prsnl_id = reqinfo->updt_id
                           ,d.disposed_intl_units = request->Products[i].ProductEvents[j].Disposition.disposed_intl_units
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into disposition"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "2")
                    ;*
                    ;* Inserting into Quarantine Table
                    ;*
                    if (request->Products[i].ProductEvents[j].Quarantine.add_ind = 1)
 
                        INSERT into
                           Quarantine q
 
                        SET
                           q.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,q.product_id = request->Products[i].product_id
                           ,q.quar_reason_cd = request->Products[i].ProductEvents[j].Quarantine.quar_reason_cd
                           ,q.updt_cnt = 0
                           ,q.active_ind = request->Products[i].ProductEvents[j].Quarantine.active_ind
                           ,q.orig_quar_qty = request->Products[i].ProductEvents[j].Quarantine.orig_quar_qty
                           ,q.cur_quar_qty = request->Products[i].ProductEvents[j].Quarantine.cur_quar_qty
                           ,q.orig_quar_intl_units = request->Products[i].ProductEvents[j].Quarantine.orig_quar_intl_units
                           ,q.cur_quar_intl_units = request->Products[i].ProductEvents[j].Quarantine.cur_quar_intl_units
                           ,q.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,q.updt_id = reqinfo->updt_id
                           ,q.updt_task = reqinfo->updt_task
                           ,q.updt_applctx = reqinfo->updt_applctx
                           ,q.active_status_cd =
                                if (request->Products[i].ProductEvents[j].Quarantine.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
                           ,q.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,q.active_status_prsnl_id = reqinfo->updt_id
 
                        WITH NOCOUNTER
 
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into quarantine"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "10" or cdf_meaning = "11")
                    ;*
                    ;* Inserting into Auto_Directed Table
                    ;*
                    if (request->Products[i].ProductEvents[j].AutoDirected.add_ind = 1)
                        INSERT into
                           Auto_Directed ad
 
                        SET
                           ad.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,ad.product_id = request->Products[i].product_id
                           ,ad.person_id = request->Products[i].ProductEvents[j].AutoDirected.person_id
                           ,ad.associated_dt_tm =
                                    cnvtdatetime(request->Products[i].ProductEvents[j].AutoDirected.associated_dt_tm)
                           ,ad.updt_cnt = 0
                           ,ad.active_ind = request->Products[i].ProductEvents[j].AutoDirected.active_ind
                           ,ad.encntr_id = request->Products[i].ProductEvents[j].AutoDirected.encntr_id
                           ,ad.expected_usage_dt_tm =
                                    cnvtdatetime(request->Products[i].ProductEvents[j].AutoDirected.expected_usage_dt_tm)
                           ,ad.donated_by_relative_ind =
                                    request->Products[i].ProductEvents[j].AutoDirected.donated_by_relative_ind
                           ,ad.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,ad.updt_id = reqinfo->updt_id
                           ,ad.updt_task = reqinfo->updt_task
                           ,ad.updt_applctx = reqinfo->updt_applctx
                           ,ad.active_status_cd =
                                if (request->Products[i].ProductEvents[j].AutoDirected.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
 
                           ,ad.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,ad.active_status_prsnl_id = reqinfo->updt_id
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into auto_directed"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "8" or cdf_meaning = "17")
                    ;*
                    ;* Inserting into Modification Table
                    ;*
                    if (request->Products[i].ProductEvents[j].Modification.add_ind = 1)
                        INSERT into
                           Modification m
 
                        SET
                           m.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,m.product_id = request->Products[i].product_id
                           ,m.orig_expire_dt_tm
                                    = cnvtdatetime(request->Products[i].ProductEvents[j].Modification.orig_expire_dt_tm)
                           ,m.orig_volume = request->Products[i].ProductEvents[j].Modification.orig_volume
                           ,m.orig_unit_meas_cd = request->Products[i].ProductEvents[j].Modification.orig_unit_meas_cd
                           ,m.cur_expire_dt_tm
                                    = cnvtdatetime(request->Products[i].ProductEvents[j].Modification.cur_expire_dt_tm)
                           ,m.cur_volume = request->Products[i].ProductEvents[j].Modification.cur_volume
                           ,m.cur_unit_meas_cd = request->Products[i].ProductEvents[j].Modification.cur_unit_meas_cd
                           ,m.modified_qty = request->Products[i].ProductEvents[j].Modification.modified_qty
                           ,m.updt_cnt = 0
                           ,m.active_ind = request->Products[i].ProductEvents[j].Modification.active_ind
                           ,m.crossover_reason_cd = request->Products[i].ProductEvents[j].Modification.crossover_reason_cd
                           ,m.option_id = request->Products[i].ProductEvents[j].Modification.option_id
                           ,m.device_type_cd = request->Products[i].ProductEvents[j].Modification.device_type_cd
                           ,m.start_dt_tm =
                                cnvtdatetime(request->Products[i].ProductEvents[j].Modification.start_dt_tm)
                           ,m.stop_dt_tm =
                                cnvtdatetime(request->Products[i].ProductEvents[j].Modification.stop_dt_tm)
                           ,m.lot_nbr = request->Products[i].ProductEvents[j].Modification.lot_nbr
                           ,m.accessory = request->Products[i].ProductEvents[j].Modification.accessory
                           ,m.vis_insp_cd = request->Products[i].ProductEvents[j].Modification.vis_insp_cd
                           ,m.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                           ,m.updt_id = reqinfo->updt_id
                           ,m.updt_task = reqinfo->updt_task
                           ,m.updt_applctx = reqinfo->updt_applctx
                           ,m.active_status_cd =
                                if (request->Products[i].ProductEvents[j].Modification.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
 
                           ,m.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,m.active_status_prsnl_id = reqinfo->updt_id
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into modification"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "1")
                    ;*
                    ;* Inserting into Assign Table
                    ;*
                    if (request->Products[i].ProductEvents[j].Assign.add_ind = 1)
 
                        INSERT into
                           Assign a
 
                        SET
                           a.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,a.product_id = request->Products[i].product_id
                           ,a.assign_reason_cd = request->Products[i].ProductEvents[j].Assign.assign_reason_cd
                           ,a.person_id = request->Products[i].ProductEvents[j].Assign.person_id
                           ,a.prov_id = request->Products[i].ProductEvents[j].Assign.prov_id
                           ,a.updt_cnt = 0
                           ,a.active_ind = request->Products[i].ProductEvents[j].Assign.active_ind
                           ,a.orig_assign_qty = request->Products[i].ProductEvents[j].Assign.orig_assign_qty
                           ,a.cur_assign_qty = request->Products[i].ProductEvents[j].Assign.cur_assign_qty
                           ,a.orig_assign_intl_units = request->Products[i].ProductEvents[j].Assign.orig_assign_intl_units
                           ,a.cur_assign_intl_units = request->Products[i].ProductEvents[j].Assign.cur_assign_intl_units
                           ,a.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,a.updt_id = reqinfo->updt_id
                           ,a.updt_task = reqinfo->updt_task
                           ,a.updt_applctx = reqinfo->updt_applctx
                           ,a.active_status_cd =
                                if (request->Products[i].ProductEvents[j].Assign.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
 
                           ,a.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,a.active_status_prsnl_id = reqinfo->updt_id
                           ,a.bb_id_nbr = request->Products[i].ProductEvents[j].Assign.bb_id_nbr
 
                        WITH NOCOUNTER
 
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into assign"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "7")
                    ;*
                    ;* Inserting into Transfusion Table
                    ;*
                    if (request->Products[i].ProductEvents[j].Transfusion.add_ind = 1)
 
                        INSERT into
                           Transfusion t
 
                        SET
                           t.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,t.product_id = request->Products[i].product_id
                           ,t.person_id = request->Products[i].ProductEvents[j].Transfusion.person_id
                           ,t.transfused_intl_units =
                                request->Products[i].ProductEvents[j].Transfusion.transfused_intl_units
                           ,t.bag_returned_ind = request->Products[i].ProductEvents[j].Transfusion.bag_returned_ind
                           ,t.tag_returned_ind = request->Products[i].ProductEvents[j].Transfusion.tag_returned_ind
                           ,t.transfused_vol = request->Products[i].ProductEvents[j].Transfusion.transfused_vol
                           ,t.updt_cnt = 0
                           ,t.active_ind = request->Products[i].ProductEvents[j].Transfusion.active_ind
                           ,t.orig_transfused_qty = request->Products[i].ProductEvents[j].Transfusion.orig_transfused_qty
                           ,t.cur_transfused_qty = request->Products[i].ProductEvents[j].Transfusion.cur_transfused_qty
                           ,t.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,t.updt_id = reqinfo->updt_id
                           ,t.updt_task = reqinfo->updt_task
                           ,t.updt_applctx = reqinfo->updt_applctx
                           ,t.active_status_cd =
                                if (request->Products[i].ProductEvents[j].Transfusion.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
 
                           ,t.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,t.active_status_prsnl_id = reqinfo->updt_id
 
                        WITH NOCOUNTER
 
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into transfusion"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "14")
                    ;*
                    ;* Inserting into Destruction Table
                    ;*
                    if (request->Products[i].ProductEvents[j].Destruction.add_ind = 1)
                        INSERT into
                           Destruction d
 
                        SET
                           d.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,d.product_id = request->Products[i].product_id
                           ,d.method_cd = request->Products[i].ProductEvents[j].Destruction.method_cd
                           ,d.box_nbr = request->Products[i].ProductEvents[j].Destruction.box_nbr
                           ,d.manifest_nbr = request->Products[i].ProductEvents[j].Destruction.manifest_nbr
                           ,d.destroyed_qty = request->Products[i].ProductEvents[j].Destruction.destroyed_qty
                           ,d.autoclave_ind = request->Products[i].ProductEvents[j].Destruction.autoclave_ind
                           ,d.destruction_org_id = request->Products[i].ProductEvents[j].Destruction.destruction_org_id
                           ,d.updt_cnt = 0
                           ,d.active_ind = request->Products[i].ProductEvents[j].Destruction.active_ind
                           ,d.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,d.updt_id = reqinfo->updt_id
                           ,d.updt_task = reqinfo->updt_task
                           ,d.updt_applctx = reqinfo->updt_applctx
                           ,d.active_status_cd =
                                if (request->Products[i].ProductEvents[j].Destruction.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
 
                           ,d.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,d.active_status_prsnl_id = reqinfo->updt_id
 
                        WITH NOCOUNTER
 
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into destruction"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "12")
                    ;*
                    ;* Inserting into ABO_Testing Table
                    ;*
                    if (request->Products[i].ProductEvents[j].AboTesting.add_ind = 1)
                        INSERT into
                           ABO_Testing at
 
                        SET
                           at.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,at.product_id = request->Products[i].product_id
                           ,at.abo_testing_id = request->Products[i].ProductEvents[j].AboTesting.abo_testing_id
                           ,at.result_id = request->Products[i].ProductEvents[j].AboTesting.result_id
                           ,at.abo_group_cd = request->Products[i].ProductEvents[j].AboTesting.abo_group_cd
                           ,at.rh_type_cd = request->Products[i].ProductEvents[j].AboTesting.rh_type_cd
                           ,at.current_updated_ind = request->Products[i].ProductEvents[j].AboTesting.current_updated_ind
                           ,at.updt_cnt = 0
                           ,at.active_ind = request->Products[i].ProductEvents[j].AboTesting.active_ind
                           ,at.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,at.updt_id = reqinfo->updt_id
                           ,at.updt_task = reqinfo->updt_task
                           ,at.updt_applctx = reqinfo->updt_applctx
                           ,at.active_status_cd =
                                if (request->Products[i].ProductEvents[j].AboTesting.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
 
                           ,at.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,at.active_status_prsnl_id = reqinfo->updt_id
 
                        WITH NOCOUNTER
 
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into abo_testing"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "6")
                    ;*
                    ;* Inserting into Transfer Table
                    ;*
                    if (request->Products[i].ProductEvents[j].Transfer.add_ind = 1)
                        INSERT into
                           Transfer t
 
                        SET
                           t.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,t.product_id = request->Products[i].product_id
                           ,t.transferring_locn_cd = request->Products[i].ProductEvents[j].Transfer.transferring_locn_cd
                           ,t.transfer_cond_cd = request->Products[i].ProductEvents[j].Transfer.transfer_cond_cd
                           ,t.transfer_reason_cd = request->Products[i].ProductEvents[j].Transfer.transfer_reason_cd
                           ,t.transfer_vis_insp_cd = request->Products[i].ProductEvents[j].Transfer.transfer_vis_insp_cd
                           ,t.transfer_qty = request->Products[i].ProductEvents[j].Transfer.transfer_qty
                           ,t.login_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].Transfer.login_dt_tm)
                           ,t.login_prsnl_id = request->Products[i].ProductEvents[j].Transfer.login_prsnl_id
                           ,t.login_cond_cd = request->Products[i].ProductEvents[j].Transfer.login_cond_cd
                           ,t.login_vis_insp_cd = request->Products[i].ProductEvents[j].Transfer.login_vis_insp_cd
                           ,t.login_qty = request->Products[i].ProductEvents[j].Transfer.login_qty
                           ,t.return_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].Transfer.return_dt_tm)
                           ,t.return_prsnl_id = request->Products[i].ProductEvents[j].Transfer.return_prsnl_id
                           ,t.return_reason_cd = request->Products[i].ProductEvents[j].Transfer.return_reason_cd
                           ,t.return_cond_cd = request->Products[i].ProductEvents[j].Transfer.return_cond_cd
                           ,t.return_vis_insp_cd = request->Products[i].ProductEvents[j].Transfer.return_vis_insp_cd
                           ,t.return_qty = request->Products[i].ProductEvents[j].Transfer.return_qty
                           ,t.updt_cnt  = 0
                           ,t.active_ind = request->Products[i].ProductEvents[j].Transfer.active_ind
                           ,t.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                           ,t.updt_id = reqinfo->updt_id
                           ,t.updt_task = reqinfo->updt_task
                           ,t.updt_applctx = reqinfo->updt_applctx
                           ,t.active_status_cd =
                                if (request->Products[i].ProductEvents[j].Transfer.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
 
                           ,t.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,t.active_status_prsnl_id = reqinfo->updt_id
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into transfer"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                    ;*
                    ;* Inserting into BB_Device_Transfer Table
                    ;*
                    if (request->Products[i].ProductEvents[j].BBDeviceTransfer.add_ind = 1)
 
                        INSERT into
                            BB_Device_Transfer bd
 
                        SET
                           bd.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,bd.product_id = request->Products[i].product_id
                           ,bd.from_device_id = request->Products[i].ProductEvents[j].BBDeviceTransfer.from_device_id
                           ,bd.to_device_id = request->Products[i].ProductEvents[j].BBDeviceTransfer.to_device_id
                           ,bd.reason_cd = request->Products[i].ProductEvents[j].BBDeviceTransfer.reason_cd
                           ,bd.updt_cnt = 0
                           ,bd.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,bd.updt_id = reqinfo->updt_id
                           ,bd.updt_task = reqinfo->updt_task
                           ,bd.updt_applctx = reqinfo->updt_applctx
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into bbdevice_transfer"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                    ;*
                    ;*Inserting into BB_Inventory_Transfer
                    ;*
                    if (request->Products[i].ProductEvents[j].BBInventoryTransfer.add_ind = 1)
 
                        INSERT into
                            BB_Inventory_Transfer bit
 
                        SET
                            bit.from_owner_area_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.from_owner_area_cd
                           ,bit.from_inv_area_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.from_inv_area_cd
                           ,bit.product_event_id= request->Products[i].ProductEvents[j].product_event_id
                           ,bit.transfer_reason_cd= request->Products[i].ProductEvents[j].BBInventoryTransfer.transfer_reason_cd
                           ,bit.to_owner_area_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.to_owner_area_cd
                           ,bit.to_inv_area_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.to_inv_area_cd
                           ,bit.updt_cnt = 0
                           ,bit.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,bit.updt_id = reqinfo->updt_id
                           ,bit.updt_task = reqinfo->updt_task
                           ,bit.updt_applctx = reqinfo->updt_applctx
                           ,bit.transferred_qty = request->Products[i].ProductEvents[j].BBInventoryTransfer.transferred_qty
                           ,bit.transferred_intl_unit = request->Products[i].ProductEvents[j].BBInventoryTransfer.transferred_iu
                           ,bit.to_product_event_id = request->Products[i].ProductEvents[j].Related_product_event_id
                           ,bit.event_type_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.event_type_cd
 
                        WITH NOCOUNTER
 
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into bb_inventory_transfer"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
                elseif (cdf_meaning = "3")
                    ;*
                    ;* Inserting into Crossmatch Table
                    ;*
                    if (request->Products[i].ProductEvents[j].Crossmatch.add_ind = 1)
 
                        INSERT into
                           Crossmatch c
 
                        SET
                           c.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,c.product_id = request->Products[i].product_id
                           ,c.crossmatch_qty = request->Products[i].ProductEvents[j].Crossmatch.crossmatch_qty
                           ,c.release_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].Crossmatch.release_dt_tm)
                           ,c.release_prsnl_id =
                                        if (request->Products[i].ProductEvents[j].Crossmatch.release_prsnl_id > 0)
                                            request->Products[i].ProductEvents[j].Crossmatch.release_prsnl_id
                                        else
                                            reqinfo->updt_id
                                        endif
                           ,c.release_reason_cd = request->Products[i].ProductEvents[j].Crossmatch.release_reason_cd
                           ,c.release_qty = request->Products[i].ProductEvents[j].Crossmatch.release_qty
                           ,c.updt_cnt = 0
                           ,c.active_ind = request->Products[i].ProductEvents[j].Crossmatch.active_ind
                           ,c.crossmatch_exp_dt_tm
                                    = cnvtdatetime(request->Products[i].ProductEvents[j].Crossmatch.Crossmatch_exp_dt_tm)
                           ,c.reinstate_reason_cd = request->Products[i].ProductEvents[j].Crossmatch.reinstate_reason_cd
                           ,c.bb_id_nbr = request->Products[i].ProductEvents[j].Crossmatch.bb_id_nbr
                           ,c.xm_reason_cd = request->Products[i].ProductEvents[j].Crossmatch.xm_reason_cd
                           ,c.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                           ,c.updt_id = reqinfo->updt_id
                           ,c.updt_task = reqinfo->updt_task
                           ,c.updt_applctx = reqinfo->updt_applctx
                           ,c.active_status_cd =
                                if (request->Products[i].ProductEvents[j].Crossmatch.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
 
                           ,c.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,c.active_status_prsnl_id = reqinfo->updt_id
                           ,c.person_id = request->Products[i].ProductEvents[j].Crossmatch.person_id
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into crossmatch"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "4")
                    ;*
                    ;* Inserting into Patient_Dispense Table
                    ;*
                    if (request->Products[i].ProductEvents[j].PatientDispense.add_ind = 1)
 
                        INSERT into
                           Patient_Dispense pd
 
                        SET
                           pd.product_event_id
                                    = request->Products[i].ProductEvents[j].product_event_id
                           ,pd.product_id
                                    = request->Products[i].product_id
                           ,pd.person_id
                                    = request->Products[i].ProductEvents[j].PatientDispense.person_id
                           ,pd.dispense_prov_id
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_prov_id
                           ,pd.dispense_reason_cd
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_reason_cd
                           ,pd.dispense_to_locn_cd
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_to_locn_cd
                           ,pd.dispense_from_locn_cd
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_from_locn_cd
                           ,pd.device_id
                                    = request->Products[i].ProductEvents[j].PatientDispense.device_id
                           ,pd.dispense_vis_insp_cd
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_vis_insp_cd
                           ,pd.dispense_cooler_id
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_cooler_id
                           ,pd.dispense_cooler_text
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_cooler_text
                           ,pd.dispense_courier_id
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_courier_id
                           ,pd.dispense_status_flag
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_status_flag
                           ,pd.orig_dispense_intl_units
                                    = request->Products[i].ProductEvents[j].PatientDispense.orig_dispense_intl_units
                           ,pd.cur_dispense_intl_units
                                    = request->Products[i].ProductEvents[j].PatientDispense.cur_dispense_intl_units
                           ,pd.orig_dispense_qty
                                    = request->Products[i].ProductEvents[j].PatientDispense.orig_dispense_qty
                           ,pd.cur_dispense_qty
                                    = request->Products[i].ProductEvents[j].PatientDispense.cur_dispense_qty
                           ,pd.unknown_patient_ind
                                    = request->Products[i].ProductEvents[j].PatientDispense.unknown_patient_ind
                           ,pd.unknown_patient_text
                                    = request->Products[i].ProductEvents[j].PatientDispense.unknown_patient_text
                           ,pd.updt_cnt
                                    = 0
                           ,pd.active_ind
                                    = request->Products[i].ProductEvents[j].PatientDispense.active_ind
                           ,pd.dispense_courier_text
                                    = request->Products[i].ProductEvents[j].PatientDispense.dispense_courier_text
                           ,pd.updt_dt_tm
                                    = cnvtdatetime(curdate,curtime3)
                           ,pd.updt_id
                                    = reqinfo->updt_id
                           ,pd.updt_task
                                    = reqinfo->updt_task
                           ,pd.updt_applctx
                                    = reqinfo->updt_applctx
                           ,pd.active_status_cd =
                                if (request->Products[i].ProductEvents[j].PatientDispense.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
                           ,pd.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,pd.active_status_prsnl_id = reqinfo->updt_id
                           ,pd.bb_id_nbr = request->Products[i].ProductEvents[j].PatientDispense.bb_id_nbr
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into patient_dispense"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
                elseif (cdf_meaning = "13")
                    ;*
                    ;* Insert into Receipt Table
                    ;*
                    if (request->Products[i].ProductEvents[j].Receipt.add_ind = 1)
                        INSERT into
                           Receipt r
 
                        SET
                           r.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                           ,r.product_id = request->Products[i].product_id
                           ,r.active_ind = request->Products[i].ProductEvents[j].Receipt.active_ind
                           ,r.ship_cond_cd = request->Products[i].ProductEvents[j].Receipt.ship_cond_cd
                           ,r.vis_insp_cd = request->Products[i].ProductEvents[j].Receipt.vis_insp_cd
                           ,r.orig_rcvd_qty = request->Products[i].ProductEvents[j].Receipt.orig_rcvd_qty
                           ,r.orig_intl_units =  request->Products[i].ProductEvents[j].Receipt.orig_intl_units
                           ,r.updt_cnt = 0
                           ,r.bb_supplier_id = request->Products[i].ProductEvents[j].Receipt.bb_supplier_id
                           ,r.alpha_translation_id = request->Products[i].ProductEvents[j].Receipt.alpha_translation_id
                           ,r.temperature_value = request->Products[i].ProductEvents[j].Receipt.temperature_value
                           ,r.temperature_degree_cd = request->Products[i].ProductEvents[j].Receipt.temperature_degree_cd
                           ,r.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                           ,r.updt_id = reqinfo->updt_id
                           ,r.updt_task = reqinfo->updt_task
                           ,r.updt_applctx = reqinfo->updt_applctx
                           ,r.active_status_cd =
                                if (request->Products[i].ProductEvents[j].Receipt.active_ind = 1)
                                        reqdata->active_status_cd
                                else
                                        reqdata->inactive_status_cd
                                endif
                           ,r.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,r.active_status_prsnl_id = reqinfo->updt_id
                           ,r.electronic_receipt_ind = request->Products[i].ProductEvents[j].Receipt.electronic_receipt_ind
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into receipt"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
 
               elseif (cdf_meaning = "23")
                    ;*
                    ;* Inserting into BB_LABEL_VERIFY table
                    ;*
                    if (request->Products[i].ProductEvents[j].BBLabelVerify.add_ind = 1)
 
                        INSERT into
                           bb_label_verify blv
 
                        SET
                           blv.active_ind = 1
                           ,blv.active_status_cd = reqdata->active_status_cd
                           ,blv.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,blv.active_status_prsnl_id = reqinfo->updt_id
                           ,blv.bb_label_verify_id = request->Products[i].ProductEvents[j].BBLabelVerify.bb_label_verify_id
                           ,blv.label_verf_dt_tm =
                              cnvtdatetime(request->Products[i].ProductEvents[j].BBLabelVerify.label_verf_dt_tm)
                           ,blv.personnel_id = reqinfo->updt_id
                           ,blv.product_id = request->Products[i].product_id
                           ,blv.updt_applctx = reqinfo->updt_applctx
                           ,blv.updt_cnt = 0
                           ,blv.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                           ,blv.updt_id = reqinfo->updt_id
                           ,blv.updt_task = reqinfo->updt_task
 
                        WITH NOCOUNTER
 
                        ;002
                        set sError_Check = ERROR(sErrorMsg, 0)
                        if (sError_Check != 0)
                            set reply->status_data->status = "F"
                            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                            set reply->status_data.subeventstatus[1].OperationStatus = "F"
                            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into bb_label_verify"
                            set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                            go to EXIT_SCRIPT
                        endif
                    endif
                endif
            endfor
        endfor
    endif
ENDIF
 
 
 
/**********************************************************************************************
*                           TABLE UPDATES START HERE
***********************************************************************************************/
;;updating Product Table
IF (request->chg_exists_ind = 1)
    ;set stat = alterlist(acd_status->StatusList,0)
 
    if (request->pr_chg_cnt > 0)
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        update into
           Product p
            ,(dummyt d WITH seq = VALUE(nMaxProduct))
 
        SET
            p.product_id = request->Products[d.seq].product_id
            ,p.product_cd = request->Products[d.seq].product_cd
            ,p.product_cat_cd = request->Products[d.seq].product_cat_cd
            ,p.product_class_cd = request->Products[d.seq].product_class_cd
            ,p.product_nbr = request->Products[d.seq].product_nbr
            ,p.product_sub_nbr = request->Products[d.seq].product_sub_nbr
            ,p.alternate_nbr = request->Products[d.seq].alternate_nbr
            ,p.flag_chars = request->Products[d.seq].flag_chars
            ,p.pooled_product_id = request->Products[d.seq].pooled_product_id
            ,p.modified_product_id = request->Products[d.seq].modified_product_id
            ,p.locked_ind = request->Products[d.seq].locked_ind
            ,p.cur_inv_locn_cd = request->Products[d.seq].cur_inv_locn_cd
            ,p.orig_inv_locn_cd = request->Products[d.seq].orig_inv_locn_cd
            ,p.cur_supplier_id = request->Products[d.seq].cur_supplier_id
            ,p.recv_dt_tm = cnvtdatetime(request->Products[d.seq].recv_dt_tm)
            ,p.recv_prsnl_id = request->Products[d.seq].recv_prsnl_id
            ,p.orig_ship_cond_cd = request->Products[d.seq].orig_ship_cond_cd
            ,p.orig_vis_insp_cd = request->Products[d.seq].orig_vis_insp_cd
            ,p.storage_temp_cd = request->Products[d.seq].storage_temp_cd
            ,p.cur_unit_meas_cd = request->Products[d.seq].cur_unit_meas_cd
            ,p.orig_unit_meas_cd = request->Products[d.seq].orig_unit_meas_cd
            ,p.pooled_product_ind = request->Products[d.seq].pooled_product_ind
            ,p.modified_product_ind = request->Products[d.seq].modified_product_ind
            ,p.corrected_ind = request->Products[d.seq].corrected_ind
            ,p.updt_cnt   = p.updt_cnt + 1
            ,p.updt_dt_tm =  cnvtdatetime(curdate,curtime3)
            ,p.updt_id    =  reqinfo->updt_id
            ,p.updt_task =  reqinfo->updt_task
            ,p.updt_applctx  = reqinfo->updt_applctx
            ,p.active_ind = request->Products[d.seq].active_ind
            ,p.cur_expire_dt_tm = cnvtdatetime(request->Products[d.seq].cur_expire_dt_tm)
            ,p.cur_owner_area_cd = request->Products[d.seq].cur_owner_area_cd
            ,p.cur_inv_area_cd = request->Products[d.seq].cur_inv_area_cd
            ,p.cur_inv_device_id = request->Products[d.seq].cur_inv_device_id
            ,p.cur_dispense_device_id = request->Products[d.seq].cur_dispense_device_id
            ,p.contributor_system_cd = request->Products[d.seq].contributor_system_cd
            ,p.pool_option_id = request->Products[d.seq].pool_option_id
            ,p.barcode_nbr = request->Products[d.seq].barcode_nbr
            ,p.create_dt_tm = cnvtdatetime(request->Products[d.seq].create_dt_tm)
            ,p.active_status_cd =
                    if (request->Products[d.seq].active_ind = 1)
                            reqdata->active_status_cd
                    else
                            reqdata->inactive_status_cd
                    endif
            ,p.active_status_dt_tm =
                    if (request->Products[d.seq].active_status_chg_ind = 1)
                        cnvtdatetime(curdate,curtime3)
                        else
                            p.active_status_dt_tm
                        endif
            ,p.active_status_prsnl_id =
                    if (request->Products[d.seq].active_status_chg_ind = 1)
                            reqinfo->updt_id
                        else
                              p.active_status_prsnl_id
                        endif
            ,p.donated_by_relative_ind = request->Products[d.seq].donated_by_relative_ind
            ,p.disease_cd              = request->Products[d.seq].disease_cd
            ,p.donation_type_cd        = request->Products[d.seq].donation_type_cd
            ,p.electronic_entry_flag =
                    if (request->Products[d.seq].electronic_entry_chg_ind = 1)
                            request->Products[d.seq].electronic_entry_flag
                        else
                              p.electronic_entry_flag
                        endif
            ,p.req_label_verify_ind    = request->Products[d.seq].req_label_verify_ind
            ,p.intended_use_print_parm_txt = request->Products[d.seq].intended_use_print_parm_txt
            ,p.product_type_barcode = request->Products[d.seq].product_type_barcode
 
        PLAN d where request->products[d.seq].change_ind = 1
 
        JOIN p
            where p.product_id = request->products[d.seq].product_id
            and p.updt_cnt = request->products[d.seq].updt_cnt
 
 
        WITH NOCOUNTER, status(acd_status->StatusList[d.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        set sError_Check = ERROR(sErrorMsg, 0)
 
        if (request->pr_chg_cnt != success_count)
            ;002
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Change count doesn't match update count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "update into product"
            go to exit_script
        endif
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Updating into Derivatives Table
    if (request->de_chg_cnt > 0)
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
 
        set p_cnt_sub = VALUE(nMaxProduct)
 
 
        for (p_cnt = 1 to p_cnt_sub)
            set deriv_cur_avail_qty = request->Products[p_cnt].Derivatives.cur_avail_qty
            set deriv_cur_intl_units = request->Products[p_cnt].Derivatives.cur_intl_units
            set pe_cnt_sub = size(request->Products[p_cnt].ProductEvents,5)
            for (pe_cnt = 1 to pe_cnt_sub)
                set cdf_meaning = trim(uar_get_code_meaning(request->Products[p_cnt].ProductEvents[pe_cnt].event_type_cd))
                if ((request->Products[p_cnt].ProductEvents[pe_cnt].add_ind = 1
                    OR request->Products[p_cnt].ProductEvents[pe_cnt].change_ind = 1)
                    AND
                   (cdf_meaning = "1" OR cdf_meaning = "2"))
                    set deriv_cur_avail_qty = 0
                    set deriv_cur_intl_units = 0
                    set pe_cnt = pe_cnt_sub
        	    endif
        	endfor
 
            update into
                DERIVATIVE  d
 
            SET
                 d.product_id = request->Products[p_cnt].product_id
                ,d.product_cd = request->Products[p_cnt].Derivatives.product_cd
                ,d.item_volume = request->Products[p_cnt].Derivatives.item_volume
                ,d.item_unit_meas_cd = request->Products[p_cnt].Derivatives.item_unit_meas_cd
                ,d.updt_cnt = d.updt_cnt + 1
                ,d.active_ind = request->Products[p_cnt].Derivatives.active_ind
                ,d.manufacturer_id = request->Products[p_cnt].Derivatives.manufacturer_id
                ,d.cur_avail_qty =
                        if (deriv_cur_avail_qty = 0)
                            d.cur_avail_qty
                        else
                            deriv_cur_avail_qty
                        endif
                ,d.units_per_vial = request->Products[p_cnt].Derivatives.units_per_vial
                ,d.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                ,d.updt_id = reqinfo->updt_id
                ,d.updt_task = reqinfo->updt_task
                ,d.updt_applctx = reqinfo->updt_applctx
                ,d.active_status_cd =
                        if (request->Products[p_cnt].Derivatives.active_ind = 1)
                                reqdata->active_status_cd
                        else
                                reqdata->inactive_status_cd
                        endif
                ,d.active_status_dt_tm =
                        if (request->Products[p_cnt].Derivatives.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                        else
                                d.active_status_dt_tm
                        endif
                ,d.active_status_prsnl_id =
                        if (request->Products[p_cnt].Derivatives.active_status_chg_ind = 1)
                                reqinfo->updt_id
                        else
                                d.active_status_prsnl_id
                        endif
                ,d.cur_intl_units =
                        if (deriv_cur_avail_qty = 0)
                            d.cur_intl_units
                        else
                            deriv_cur_intl_units
                        endif
 
            where d.product_id = request->Products[p_cnt].product_id
            and d.updt_cnt = request->products[p_cnt].derivatives.updt_cnt
            and request->products[p_cnt].derivatives.change_ind = 1
 
            WITH NOCOUNTER, status(acd_status->StatusList[p_cnt].status)
 
        endfor ;End for(p_cnt = 1 to...)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->de_chg_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Change count doesn't match update count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "update into derivative"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Updating into Blood_Product Table
    ;*
    if (request->bp_chg_cnt > 0)
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
 
        update into
           blood_product bp
           ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        SET
           bp.product_id = request->Products[d2.seq].product_id
           ,bp.product_cd  = request->Products[d2.seq].BloodProducts.product_cd
           ,bp.supplier_prefix = request->Products[d2.seq].BloodProducts.supplier_prefix
           ,bp.cur_volume = request->Products[d2.seq].BloodProducts.cur_volume
           ,bp.orig_label_abo_cd = request->Products[d2.seq].BloodProducts.orig_label_abo_cd
           ,bp.orig_label_rh_cd = request->Products[d2.seq].BloodProducts.orig_label_rh_cd
           ,bp.cur_abo_cd  = request->Products[d2.seq].BloodProducts.cur_abo_cd
           ,bp.cur_rh_cd  = request->Products[d2.seq].BloodProducts.cur_rh_cd
           ,bp.segment_nbr = request->Products[d2.seq].BloodProducts.segment_nbr
           ,bp.orig_expire_dt_tm = cnvtdatetime(request->Products[d2.seq].BloodProducts.orig_expire_dt_tm)
           ,bp.orig_volume  = request->Products[d2.seq].BloodProducts.orig_volume
           ,bp.lot_nbr  = request->Products[d2.seq].BloodProducts.lot_nbr
           ,bp.autologous_ind = request->Products[d2.seq].BloodProducts.autologous_ind
           ,bp.directed_ind = request->Products[d2.seq].BloodProducts.directed_ind
           ,bp.drawn_dt_tm = cnvtdatetime(request->Products[d2.seq].BloodProducts.drawn_dt_tm)
           ,bp.updt_cnt  = bp.updt_cnt + 1
           ,bp.active_ind = request->Products[d2.seq].BloodProducts.active_ind
           ,bp.donor_person_id = request->Products[d2.seq].BloodProducts.donor_person_id
           ,bp.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,bp.updt_id = reqinfo->updt_id
           ,bp.updt_task = reqinfo->updt_task
           ,bp.updt_applctx = reqinfo->updt_applctx
           ,bp.active_status_cd =
                    if (request->Products[d2.seq].BloodProducts.active_ind = 1)
                            reqdata->active_status_cd
                    else
                            reqdata->inactive_status_cd
                    endif
            ,bp.active_status_dt_tm =
                    if (request->Products[d2.seq].BloodProducts.active_status_chg_ind = 1)
                        cnvtdatetime(curdate,curtime3)
                        else
                            bp.active_status_dt_tm
                        endif
            ,bp.active_status_prsnl_id =
                    if (request->Products[d2.seq].BloodProducts.active_status_chg_ind = 1)
                            reqinfo->updt_id
                        else
                              bp.active_status_prsnl_id
                        endif
 
        PLAN d2
           where request->products[d2.seq].BloodProducts.change_ind = 1
        JOIN bp
           where bp.product_id = request->Products[d2.seq].product_id
           and bp.updt_cnt = request->products[d2.seq].BloodProducts.updt_cnt
 
        WITH NOCOUNTER, status(acd_status->StatusList[d2.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->bp_chg_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Change count doesn't match update count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "update into blood_product"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
 
    ;*
    ;* Updating (inactivate) old Product Note and insert new Product Note.
    ;* Updating (inactivate) old Long Text and insert new Long Text.
    ;*
    if (request->pn_chg_cnt > 0)
        ;*
        ;* Updating (inactivate) Product Note
        ;*
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        UPDATE into
           product_note pn
           ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        SET
           pn.updt_cnt  = pn.updt_cnt + 1
           ,pn.active_ind = 0
           ,pn.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,pn.updt_id = reqinfo->updt_id
           ,pn.updt_task = reqinfo->updt_task
           ,pn.updt_applctx = reqinfo->updt_applctx
           ,pn.active_status_cd = reqdata->inactive_status_cd
           ,pn.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,pn.active_status_prsnl_id = reqinfo->updt_id
 
        PLAN d2
           where request->products[d2.seq].ProductNote.change_ind = 1
        JOIN pn
           where pn.product_note_id = request->products[d2.seq].ProductNote.old_product_note_id
             and pn.updt_cnt = request->products[d2.seq].ProductNote.old_updt_cnt
 
        WITH NOCOUNTER, status(acd_status->StatusList[d2.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pn_chg_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Change count doesn't match update count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "update into product_note"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
 
        ;*
        ;* Inserting into Product Note
        ;*
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        INSERT into
           product_note pn
           ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        SET
           pn.product_id = request->Products[d2.seq].product_id
           ,pn.product_note_id  = request->Products[d2.seq].ProductNote.new_product_note_id
           ,pn.long_text_id = request->Products[d2.seq].ProductNote.new_long_text_id
           ,pn.updt_cnt  = 0
           ,pn.active_ind = 1
           ,pn.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,pn.updt_id = reqinfo->updt_id
           ,pn.updt_task = reqinfo->updt_task
           ,pn.updt_applctx = reqinfo->updt_applctx
           ,pn.active_status_cd = reqdata->active_status_cd
           ,pn.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,pn.active_status_prsnl_id = reqinfo->updt_id
 
        PLAN d2
           where request->products[d2.seq].ProductNote.change_ind = 1
        JOIN pn
 
        WITH NOCOUNTER, status(acd_status->StatusList[d2.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pn_chg_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Change count doesn't match insert count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into product_note"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
 
        ;*
        ;* Updating into Long Text
        ;*
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        UPDATE into
           long_text lt
           ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        SET
           lt.updt_cnt  = lt.updt_cnt + 1
           ,lt.active_ind = 0
           ,lt.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,lt.updt_id = reqinfo->updt_id
           ,lt.updt_task = reqinfo->updt_task
           ,lt.updt_applctx = reqinfo->updt_applctx
           ,lt.active_status_cd = reqdata->inactive_status_cd
           ,lt.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,lt.active_status_prsnl_id = reqinfo->updt_id
 
        PLAN d2
           where request->products[d2.seq].ProductNote.change_ind = 1
        JOIN lt
           where lt.long_text_id = request->products[d2.seq].ProductNote.old_long_text_id
             and lt.updt_cnt = request->products[d2.seq].ProductNote.old_updt_cnt
 
        WITH NOCOUNTER, status(acd_status->StatusList[d2.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pn_chg_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Chg count doesn't match update count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "update into long_text"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
 
        ;*
        ;* Inserting into Long Text
        ;*
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxProduct)
        INSERT into
           long_text lt
           ,(dummyt d2 WITH seq = VALUE(nMaxProduct))
 
        SET
           lt.long_text_id = request->Products[d2.seq].ProductNote.new_long_text_id
           ,lt.long_text  = request->Products[d2.seq].ProductNote.product_note
           ,lt.parent_entity_name = "PRODUCT_NOTE"
           ,lt.parent_entity_id = request->Products[d2.seq].ProductNote.new_product_note_id
           ,lt.updt_cnt  = 0
           ,lt.active_ind = 1
           ,lt.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,lt.updt_id = reqinfo->updt_id
           ,lt.updt_task = reqinfo->updt_task
           ,lt.updt_applctx = reqinfo->updt_applctx
           ,lt.active_status_cd = reqdata->active_status_cd
           ,lt.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
           ,lt.active_status_prsnl_id = reqinfo->updt_id
 
        PLAN d2
           where request->products[d2.seq].ProductNote.change_ind = 1
        JOIN lt
 
        WITH NOCOUNTER, status(acd_status->StatusList[d2.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(acd_status->StatusList,5))
            if (acd_status->StatusList[i].status = 1)
                set success_count = success_count + 1
            endif
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pn_chg_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Change count doesn't match insert count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "insert into long_text"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Updating into Special_Testing Table
    ;*
    if (request->st_chg_cnt > 0)
        set nMaxSize = nMaxProduct * nMaxSpecialTestings
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxSize)
 
        update into
           special_testing st
           ,(dummyt d3 with seq = VALUE(nMaxProduct))
           ,(dummyt d4 WITH seq = VALUE(nMaxSpecialTestings))
 
        SET
           st.product_id = request->Products[d3.seq].product_id
           ,st.special_testing_id = request->Products[d3.seq].SpecialTests[d4.seq].special_testing_id
           ,st.special_testing_cd = request->Products[d3.seq].SpecialTests[d4.seq].special_testing_cd
           ,st.confirmed_ind = request->Products[d3.seq].SpecialTests[d4.seq].confirmed_ind
           ,st.updt_cnt   = st.updt_cnt + 1
           ,st.active_ind = request->Products[d3.seq].SpecialTests[d4.seq].active_ind
           ,st.updt_dt_tm = cnvtdatetime(curdate,curtime3)
           ,st.updt_id = reqinfo->updt_id
           ,st.updt_task = reqinfo->updt_task
           ,st.updt_applctx = reqinfo->updt_applctx
           ,st.active_status_cd =
                    if (request->Products[d3.seq].SpecialTests[d4.seq].active_ind = 1)
                            reqdata->active_status_cd
                    else
                            reqdata->inactive_status_cd
                    endif
            ,st.active_status_dt_tm =
                    if (request->Products[d3.seq].SpecialTests[d4.seq].active_status_chg_ind = 1)
                        cnvtdatetime(curdate,curtime3)
                        else
                            st.active_status_dt_tm
                        endif
            ,st.active_status_prsnl_id =
                    if (request->Products[d3.seq].SpecialTests[d4.seq].active_status_chg_ind = 1)
                            reqinfo->updt_id
                        else
                              st.active_status_prsnl_id
                        endif
           ,st.product_rh_phenotype_id = request->Products[d3.seq].SpecialTests[d4.seq].product_rh_phenotype_id
 
        PLAN d3
        join d4
            where d4.seq <= SIZE(request->products[d3.seq]->SpecialTests,5)
              and request->products[d3.seq].SpecialTests[d4.seq].change_ind = 1
        JOIN st
           where st.product_id = request->Products[d3.seq].product_id
           and st.special_testing_id = request->Products[d3.seq].SpecialTests[d4.seq].special_testing_id
           and st.updt_cnt = request->products[d3.seq].SpecialTests[d4.seq].updt_cnt
 
        WITH NOCOUNTER, status(request->Products[d3.seq].SpecialTests[d4.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(request->Products,5))
            for (j = 1 to size(request->Products[i].SpecialTests,5))
                if (request->Products[i].SpecialTests[j].status = 1)
                    set success_count = success_count + 1
                    ;reset the status after it is counted
                    set request->Products[i].SpecialTests[j].status = 0
                endif
            endfor
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if ( request->st_chg_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Change count doesn't match update count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "update into special_testing"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;*
    ;* Updating into Product_Events Table
    ;*
    if (request->pe_chg_cnt > 0)
        set nMaxSize = nMaxProduct * nMaxProductEvent
        set stat = alterlist(acd_status->StatusList,0)
        set stat = alterlist(acd_status->StatusList,nMaxSize)
        update into
          Product_Event PE
          ,(dummyt d4 WITH seq = VALUE(nMaxProduct))
          ,(dummyt d5 WITH seq = VALUE(nMaxProductEvent))
 
        SET
           pe.product_event_id = request->Products[d4.seq].ProductEvents[d5.seq].product_event_id
           ,pe.product_id = request->Products[d4.seq].product_id
           ,pe.order_id = request->Products[d4.seq].ProductEvents[d5.seq].order_id
           ,pe.bb_result_id = request->Products[d4.seq].ProductEvents[d5.seq].bb_result_id
           ,pe.event_type_cd = request->Products[d4.seq].ProductEvents[d5.seq].event_type_cd
           ,pe.event_dt_tm = cnvtdatetime(request->Products[d4.seq].ProductEvents[d5.seq].event_dt_tm)
           ,pe.event_prsnl_id =
                    if (request->Products[d4.seq].ProductEvents[d5.seq].event_prsnl_id > 0.0)
                       request->Products[d4.seq].ProductEvents[d5.seq].event_prsnl_id
                    else
                       reqinfo->updt_id
                    endif
           ,pe.updt_cnt = pe.updt_cnt + 1
           ,pe.active_ind = request->Products[d4.seq].ProductEvents[d5.seq].active_ind
           ,pe.person_id = request->Products[d4.seq].ProductEvents[d5.seq].person_id
           ,pe.encntr_id = request->Products[d4.seq].ProductEvents[d5.seq].encntr_id
           ,pe.override_ind = request->Products[d4.seq].ProductEvents[d5.seq].override_ind
           ,pe.override_reason_cd = request->Products[d4.seq].ProductEvents[d5.seq].override_reason_cd
           ,pe.related_product_event_id = request->Products[d4.seq].ProductEvents[d5.seq].related_product_event_id
           ,pe.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
           ,pe.updt_id = reqinfo->updt_id
           ,pe.updt_task = reqinfo->updt_task
           ,pe.updt_applctx = reqinfo->updt_applctx
           ,pe.active_status_cd =
                    if (request->Products[d4.seq].ProductEvents[d5.seq].active_ind = 1)
                            reqdata->active_status_cd
                    else
                            reqdata->inactive_status_cd
                    endif
            ,pe.active_status_dt_tm =
                    if (request->Products[d4.seq].ProductEvents[d5.seq].active_status_chg_ind = 1)
                        cnvtdatetime(curdate,curtime3)
                        else
                            pe.active_status_dt_tm
                        endif
            ,pe.active_status_prsnl_id =
                    if (request->Products[d4.seq].ProductEvents[d5.seq].active_status_chg_ind = 1)
                            reqinfo->updt_id
                        else
                              pe.active_status_prsnl_id
                        endif
           ,pe.event_status_flag =  request->Products[d4.seq].ProductEvents[d5.seq].event_status_flag
           ,pe.owner_area_cd     =  if(request->Products[d4.seq].ProductEvents[d5.seq].owner_area_cd <= 0)
           								request->Products[d4.seq].cur_owner_area_cd
           							else
           								request->Products[d4.seq].ProductEvents[d5.seq].owner_area_cd
           							endif
           ,pe.inventory_area_cd =  if(request->Products[d4.seq].ProductEvents[d5.seq].inventory_area_cd <= 0)
           								request->Products[d4.seq].cur_inv_area_cd
           							else
           								request->Products[d4.seq].ProductEvents[d5.seq].inventory_area_cd
           							endif
 
        PLAN d4
        JOIN d5
           where d5.seq <= SIZE(request->products[d4.seq]->ProductEvents,5)
           and request->products[d4.seq].ProductEvents[d5.seq].change_ind = 1
        JOIN pe
           where pe.product_event_id = request->Products[d4.seq].ProductEvents[d5.seq].product_event_id
           and pe.updt_cnt = request->products[d4.seq].ProductEvents[d5.seq].updt_cnt
 
        WITH NOCOUNTER, status(request->Products[d4.seq].ProductEvents[d5.seq].status)
 
        set success_count = 0
 
        for (i = 1 to size(request->Products,5))
            for (j = 1 to size(request->Products[i].ProductEvents,5))
                if (request->Products[i].ProductEvents[j].status = 1)
                    set success_count = success_count + 1
                    ;reset status after it has been counted
                    set request->Products[i].ProductEvents[j].status = 0
                endif
            endfor
        endfor
 
        ;002
        set sError_Check = ERROR(sErrorMsg, 0)
        if (request->pe_chg_cnt != success_count)
            if (sError_Check != 0)
                set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
            else
                set reply->status_data.subeventstatus[1].TargetObjectValue = "Change count doesn't match update count"
            endif
            set reply->status_data->status = "F"
            set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
            set reply->status_data.subeventstatus[1].OperationStatus = "F"
            set reply->status_data.subeventstatus[1].TargetObjectName = "update into product_event"
            go to exit_script
        ENDIF
        set stat = alterlist(acd_status->StatusList,0)
    endif
 
    ;;Update child tables
 
    for (i = 1 to size(request->Products,5))
        for (j = 1 to size(request->Products[i]->ProductEvents,5))
            set cdf_meaning = uar_get_code_meaning(request->Products[i]->ProductEvents[j].event_type_cd)
 
            if (cdf_meaning = "5")
                ;*
                ;* Updating into Disposition Table
                ;*
                if (request->Products[i].ProductEvents[j].Disposition.change_ind = 1)
                    update into
                      Disposition d
 
                    SET
                       d.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,d.product_id = request->Products[i].product_id
                       ,d.reason_cd =  request->Products[i].ProductEvents[j].Disposition.reason_cd
                       ,d.disposed_qty = request->Products[i].ProductEvents[j].Disposition.disposed_qty
                       ,d.updt_cnt = d.updt_cnt + 1
                       ,d.active_ind = request->Products[i].ProductEvents[j].Disposition.active_ind
                       ,d.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,d.updt_id = reqinfo->updt_id
                       ,d.updt_task = reqinfo->updt_task
                       ,d.updt_applctx = reqinfo->updt_applctx
                       ,d.active_status_cd =
                            if (request->Products[i].ProductEvents[j].active_ind = 1)
                                    reqdata->active_status_cd
                            else
                                    reqdata->inactive_status_cd
                            endif
                       ,d.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Disposition.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                d.active_status_dt_tm
                            endif
                       ,d.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Disposition.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                d.active_status_prsnl_id
                            endif
                       ,d.disposed_intl_units = request->Products[i].ProductEvents[j].Disposition.disposed_intl_units
 
                    where d.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and d.updt_cnt = request->Products[i].ProductEvents[j].Disposition.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into disposition"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "2")
                ;*
                ;* Updating into Quarantine Table
                ;*
                if (request->Products[i].ProductEvents[j].Quarantine.change_ind = 1)
                    update into
                       Quarantine q
 
                    SET
                       q.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,q.product_id = request->Products[i].product_id
                       ,q.quar_reason_cd = request->Products[i].ProductEvents[j].Quarantine.quar_reason_cd
                       ,q.updt_cnt = q.updt_cnt + 1
                       ,q.active_ind = request->Products[i].ProductEvents[j].Quarantine.active_ind
                       ,q.orig_quar_qty = request->Products[i].ProductEvents[j].Quarantine.orig_quar_qty
                       ,q.cur_quar_qty = request->Products[i].ProductEvents[j].Quarantine.cur_quar_qty
                       ,q.orig_quar_intl_units = request->Products[i].ProductEvents[j].Quarantine.orig_quar_intl_units
                       ,q.cur_quar_intl_units = request->Products[i].ProductEvents[j].Quarantine.cur_quar_intl_units
                       ,q.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,q.updt_id = reqinfo->updt_id
                       ,q.updt_task = reqinfo->updt_task
                       ,q.updt_applctx = reqinfo->updt_applctx
                       ,q.active_status_cd =
                            if (request->Products[i].ProductEvents[j].Quarantine.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,q.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Quarantine.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                q.active_status_dt_tm
                            endif
                       ,q.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Quarantine.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                q.active_status_prsnl_id
                            endif
 
                    where q.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and q.updt_cnt = request->Products[i].ProductEvents[j].Quarantine.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into quarantine"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
                ;*
                ;* Insert into Quarantine_Release Table
                ;*
                if (request->Products[i].ProductEvents[j].QuarantineRelease.add_ind = 1)
                    INSERT into
                       Quarantine_Release qr
 
                    SET
                       qr.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      ,qr.product_id = request->Products[i].product_id
                      ,qr.quar_release_id = request->Products[i].ProductEvents[j].QuarantineRelease.quar_release_id
                      ,qr.release_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].QuarantineRelease.release_dt_tm)
                      ,qr.release_prsnl_id =
                                        if (request->Products[i].ProductEvents[j].QuarantineRelease.release_prsnl_id > 0)
                                            request->Products[i].ProductEvents[j].QuarantineRelease.release_prsnl_id
                                        else
                                            reqinfo->updt_id
                                        endif
                      ,qr.release_reason_cd = request->Products[i].ProductEvents[j].QuarantineRelease.release_reason_cd
                      ,qr.release_qty = request->Products[i].ProductEvents[j].QuarantineRelease.release_qty
                      ,qr.updt_cnt = 0
                      ,qr.active_ind = request->Products[i].ProductEvents[j].QuarantineRelease.active_ind
                      ,qr.release_intl_units = request->Products[i].ProductEvents[j].QuarantineRelease.release_intl_units
                      ,qr.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                      ,qr.updt_id = reqinfo->updt_id
                      ,qr.updt_task = reqinfo->updt_task
                      ,qr.updt_applctx = reqinfo->updt_applctx
                      ,qr.active_status_cd =
                           if (request->Products[i].ProductEvents[j].QuarantineRelease.active_ind = 1)
                                   reqdata->active_status_cd
                           else
                                   reqdata->inactive_status_cd
                           endif
                      ,qr.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                      ,qr.active_status_prsnl_id = reqinfo->updt_id
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "insert into quarantine_release"
                        go to EXIT_SCRIPT
                    endif
                endif
 
                ;*
                ;* Updating into Quarantine_Release Table
                ;*
                if (request->Products[i].ProductEvents[j].QuarantineRelease.change_ind = 1)
                    update into
                       Quarantine_Release qr
 
                    SET
                        qr.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,qr.product_id = request->Products[i].product_id
                       ,qr.quar_release_id = request->Products[i].ProductEvents[j].QuarantineRelease.quar_release_id
                       ,qr.release_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].QuarantineRelease.release_dt_tm)
                       ,qr.release_prsnl_id =
                                        if (request->Products[i].ProductEvents[j].QuarantineRelease.release_prsnl_id > 0)
                                            request->Products[i].ProductEvents[j].QuarantineRelease.release_prsnl_id
                                        else
                                            reqinfo->updt_id
                                        endif
                       ,qr.release_reason_cd = request->Products[i].ProductEvents[j].QuarantineRelease.release_reason_cd
                       ,qr.release_qty = request->Products[i].ProductEvents[j].QuarantineRelease.release_qty
                       ,qr.updt_cnt = qr.updt_cnt + 1
                       ,qr.active_ind = request->Products[i].ProductEvents[j].QuarantineRelease.active_ind
                       ,qr.release_intl_units = request->Products[i].ProductEvents[j].QuarantineRelease.release_intl_units
                       ,qr.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,qr.updt_id = reqinfo->updt_id
                       ,qr.updt_task = reqinfo->updt_task
                       ,qr.updt_applctx = reqinfo->updt_applctx
                       ,qr.active_status_cd =
                            if (request->Products[i].ProductEvents[j].QuarantineRelease.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,qr.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].QuarantineRelease.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                qr.active_status_dt_tm
                            endif
                       ,qr.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].QuarantineRelease.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                qr.active_status_prsnl_id
                            endif
 
                    where qr.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and qr.updt_cnt = request->Products[i].ProductEvents[j].QuarantineRelease.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into quarantine_release"
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "10" or cdf_meaning = "11")
                ;*
                ;* Updating into Auto_Directed Table
                ;*
                if (request->Products[i].ProductEvents[j].AutoDirected.change_ind = 1)
                    update into
                       Auto_Directed ad
 
                    SET
                       ad.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,ad.product_id = request->Products[i].product_id
                       ,ad.person_id = request->Products[i].ProductEvents[j].AutoDirected.person_id
                       ,ad.associated_dt_tm
                                = cnvtdatetime(request->Products[i].ProductEvents[j].AutoDirected.associated_dt_tm)
                       ,ad.updt_cnt = ad.updt_cnt + 1
                       ,ad.active_ind = request->Products[i].ProductEvents[j].AutoDirected.active_ind
                       ,ad.encntr_id = request->Products[i].ProductEvents[j].AutoDirected.encntr_id
                       ,ad.expected_usage_dt_tm
                                = cnvtdatetime(request->Products[i].ProductEvents[j].AutoDirected.expected_usage_dt_tm)
                       ,ad.donated_by_relative_ind
                                = request->Products[i].ProductEvents[j].AutoDirected.donated_by_relative_ind
                       ,ad.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,ad.updt_id = reqinfo->updt_id
                       ,ad.updt_task = reqinfo->updt_task
                       ,ad.updt_applctx = reqinfo->updt_applctx
                       ,ad.active_status_cd =
                            if (request->Products[i].ProductEvents[j].AutoDirected.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,ad.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].AutoDirected.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                ad.active_status_dt_tm
                            endif
                       ,ad.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].AutoDirected.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                ad.active_status_prsnl_id
                            endif
 
                    where ad.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and ad.updt_cnt = request->Products[i].ProductEvents[j].AutoDirected.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into auto_directed"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "8" or cdf_meaning = "17")
                ;*
                ;* Updating into Modification Table
                ;*
                if (request->Products[i].ProductEvents[j].Modification.change_ind = 1)
                    update into
                       Modification m
 
                    SET
                       m.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,m.product_id = request->Products[i].product_id
                       ,m.orig_expire_dt_tm =
                            cnvtdatetime(request->Products[i].ProductEvents[j].Modification.orig_expire_dt_tm)
                       ,m.orig_volume = request->Products[i].ProductEvents[j].Modification.orig_volume
                       ,m.orig_unit_meas_cd = request->Products[i].ProductEvents[j].Modification.orig_unit_meas_cd
                       ,m.cur_expire_dt_tm =
                            cnvtdatetime(request->Products[i].ProductEvents[j].Modification.cur_expire_dt_tm)
                       ,m.cur_volume = request->Products[i].ProductEvents[j].Modification.cur_volume
                       ,m.cur_unit_meas_cd = request->Products[i].ProductEvents[j].Modification.cur_unit_meas_cd
                       ,m.modified_qty = request->Products[i].ProductEvents[j].Modification.modified_qty
                       ,m.updt_cnt = m.updt_cnt + 1
                       ,m.active_ind = request->Products[i].ProductEvents[j].Modification.active_ind
                       ,m.crossover_reason_cd = request->Products[i].ProductEvents[j].Modification.crossover_reason_cd
                       ,m.option_id = request->Products[i].ProductEvents[j].Modification.option_id
                       ,m.device_type_cd = request->Products[i].ProductEvents[j].Modification.device_type_cd
                       ,m.start_dt_tm =
                            cnvtdatetime(request->Products[i].ProductEvents[j].Modification.start_dt_tm)
                       ,m.stop_dt_tm =
                            cnvtdatetime(request->Products[i].ProductEvents[j].Modification.stop_dt_tm)
                       ,m.lot_nbr = request->Products[i].ProductEvents[j].Modification.lot_nbr
                       ,m.accessory = request->Products[i].ProductEvents[j].Modification.accessory
                       ,m.vis_insp_cd = request->Products[i].ProductEvents[j].Modification.vis_insp_cd
                       ,m.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,m.updt_id = reqinfo->updt_id
                       ,m.updt_task = reqinfo->updt_task
                       ,m.updt_applctx = reqinfo->updt_applctx
                       ,m.active_status_cd =
                            if (request->Products[i].ProductEvents[j].Modification.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,m.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Modification.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                m.active_status_dt_tm
                            endif
                       ,m.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Modification.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                m.active_status_prsnl_id
                            endif
 
                    where m.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and m.updt_cnt = request->Products[i].ProductEvents[j].Modification.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into modification"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "1")
                ;*
                ;* Updating into Assign Table
                ;*
                if (request->Products[i].ProductEvents[j].Assign.change_ind = 1)
                    update into
                       Assign a
 
                    SET
                       a.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,a.product_id = request->Products[i].product_id
                       ,a.assign_reason_cd = request->Products[i].ProductEvents[j].Assign.assign_reason_cd
                       ,a.prov_id = request->Products[i].ProductEvents[j].Assign.prov_id
                       ,a.person_id = request->Products[i].ProductEvents[j].Assign.person_id
                       ,a.updt_cnt = a.updt_cnt + 1
                       ,a.active_ind = request->Products[i].ProductEvents[j].Assign.active_ind
                       ,a.orig_assign_qty = request->Products[i].ProductEvents[j].Assign.orig_assign_qty
                       ,a.cur_assign_qty = request->Products[i].ProductEvents[j].Assign.cur_assign_qty
                       ,a.orig_assign_intl_units = request->Products[i].ProductEvents[j].Assign.orig_assign_intl_units
                       ,a.cur_assign_intl_units = request->Products[i].ProductEvents[j].Assign.cur_assign_intl_units
                       ,a.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,a.updt_id = reqinfo->updt_id
                       ,a.updt_task = reqinfo->updt_task
                       ,a.updt_applctx = reqinfo->updt_applctx
                       ,a.active_status_cd =
                            if (request->Products[i].ProductEvents[j].Assign.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,a.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Assign.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                a.active_status_dt_tm
                            endif
                       ,a.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Assign.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                a.active_status_prsnl_id
                            endif
                       ,a.bb_id_nbr = request->Products[i].ProductEvents[j].Assign.bb_id_nbr
 
                    where a.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and a.updt_cnt = request->Products[i].ProductEvents[j].Assign.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into assign"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
                ;*
                ;* Inserting into Assign_Release Table
                ;*
                if (request->Products[i].ProductEvents[j].AssignRelease.add_ind = 1)
                    INSERT into
                       Assign_Release ar
 
                    SET
                       ar.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,ar.assign_release_id = request->Products[i].ProductEvents[j].AssignRelease.assign_release_id
                       ,ar.product_id = request->Products[i].product_id
                       ,ar.release_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].AssignRelease.release_dt_tm)
                       ,ar.release_prsnl_id =
                                        if (request->Products[i].ProductEvents[j].AssignRelease.release_prsnl_id > 0)
                                            request->Products[i].ProductEvents[j].AssignRelease.release_prsnl_id
                                        else
                                            reqinfo->updt_id
                                        endif
                       ,ar.release_reason_cd = request->Products[i].ProductEvents[j].AssignRelease.release_reason_cd
                       ,ar.release_qty = request->Products[i].ProductEvents[j].AssignRelease.release_qty
                       ,ar.updt_cnt = 0
                       ,ar.active_ind = request->Products[i].ProductEvents[j].AssignRelease.active_ind
                       ,ar.release_intl_units = request->Products[i].ProductEvents[j].AssignRelease.release_intl_units
                       ,ar.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,ar.updt_id = reqinfo->updt_id
                       ,ar.updt_task = reqinfo->updt_task
                       ,ar.updt_applctx = reqinfo->updt_applctx
                       ,ar.active_status_cd =
                            if (request->Products[i].ProductEvents[j].AssignRelease.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,ar.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,ar.active_status_prsnl_id = reqinfo->updt_id
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "insert into assign_release"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
                ;*
                ;* Updating into Assign_Release Table
                ;*
                if (request->Products[i].ProductEvents[j].AssignRelease.change_ind = 1)
                    update into
                       Assign_Release ar
 
                    SET
                       ar.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,ar.assign_release_id = request->Products[i].ProductEvents[j].AssignRelease.assign_release_id
                       ,ar.product_id = request->Products[i].product_id
                       ,ar.release_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].AssignRelease.release_dt_tm)
                       ,ar.release_prsnl_id =
                                        if (request->Products[i].ProductEvents[j].AssignRelease.release_prsnl_id > 0)
                                            request->Products[i].ProductEvents[j].AssignRelease.release_prsnl_id
                                        else
                                            reqinfo->updt_id
                                        endif
                       ,ar.release_reason_cd = request->Products[i].ProductEvents[j].AssignRelease.release_reason_cd
                       ,ar.release_qty = request->Products[i].ProductEvents[j].AssignRelease.release_qty
                       ,ar.updt_cnt = ar.updt_cnt + 1
                       ,ar.active_ind = request->Products[i].ProductEvents[j].AssignRelease.active_ind
                       ,ar.release_intl_units = request->Products[i].ProductEvents[j].AssignRelease.release_intl_units
                       ,ar.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,ar.updt_id = reqinfo->updt_id
                       ,ar.updt_task = reqinfo->updt_task
                       ,ar.updt_applctx = reqinfo->updt_applctx
                       ,ar.active_status_cd =
                            if (request->Products[i].ProductEvents[j].AssignRelease.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,ar.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].AssignRelease.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                ar.active_status_dt_tm
                            endif
                       ,ar.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].AssignRelease.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                ar.active_status_prsnl_id
                            endif
 
                    where ar.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and ar.updt_cnt = request->Products[i].ProductEvents[j].AssignRelease.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into assign_release"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "7")
                ;*
                ;* Updating into Transfusion Table
                ;*
                if (request->Products[i].ProductEvents[j].Transfusion.change_ind = 1)
                    update into
                       Transfusion t
 
                    SET
                       t.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,t.product_id = request->Products[i].product_id
                       ,t.person_id = request->Products[i].ProductEvents[j].Transfusion.person_id
                       ,t.transfused_intl_units = request->Products[i].ProductEvents[j].Transfusion.transfused_intl_units
                       ,t.bag_returned_ind = request->Products[i].ProductEvents[j].Transfusion.bag_returned_ind
                       ,t.tag_returned_ind = request->Products[i].ProductEvents[j].Transfusion.tag_returned_ind
                       ,t.transfused_vol = request->Products[i].ProductEvents[j].Transfusion.transfused_vol
                       ,t.updt_cnt = t.updt_cnt + 1
                       ,t.active_ind = request->Products[i].ProductEvents[j].Transfusion.active_ind
                       ,t.orig_transfused_qty = request->Products[i].ProductEvents[j].Transfusion.orig_transfused_qty
                       ,t.cur_transfused_qty = request->Products[i].ProductEvents[j].Transfusion.cur_transfused_qty
                       ,t.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,t.updt_id = reqinfo->updt_id
                       ,t.updt_task = reqinfo->updt_task
                       ,t.updt_applctx = reqinfo->updt_applctx
                       ,t.active_status_cd =
                            if (request->Products[i].ProductEvents[j].Transfusion.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,t.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Transfusion.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                t.active_status_dt_tm
                            endif
                       ,t.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Transfusion.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                t.active_status_prsnl_id
                            endif
 
                    where t.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and t.updt_cnt = request->Products[i].ProductEvents[j].Transfusion.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into transfusion"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "14")
                ;*
                ;* Updating into Destruction Table
                ;*
                if (request->Products[i].ProductEvents[j].Destruction.change_ind = 1)
                    update into
                       Destruction d
 
                    SET
                       d.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,d.product_id = request->Products[i].product_id
                       ,d.method_cd = request->Products[i].ProductEvents[j].Destruction.method_cd
                       ,d.box_nbr = request->Products[i].ProductEvents[j].Destruction.box_nbr
                       ,d.manifest_nbr = request->Products[i].ProductEvents[j].Destruction.manifest_nbr
                       ,d.destroyed_qty = request->Products[i].ProductEvents[j].Destruction.destroyed_qty
                       ,d.autoclave_ind = request->Products[i].ProductEvents[j].Destruction.autoclave_ind
                       ,d.destruction_org_id = request->Products[i].ProductEvents[j].Destruction.destruction_org_id
                       ,d.updt_cnt = d.updt_cnt + 1
                       ,d.active_ind = request->Products[i].ProductEvents[j].Destruction.active_ind
                       ,d.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,d.updt_id = reqinfo->updt_id
                       ,d.updt_task = reqinfo->updt_task
                       ,d.updt_applctx = reqinfo->updt_applctx
                       ,d.active_status_cd =
                            if (request->Products[i].ProductEvents[j].Destruction.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,d.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Destruction.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                d.active_status_dt_tm
                            endif
                       ,d.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Destruction.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                d.active_status_prsnl_id
                            endif
 
                    where d.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and d.updt_cnt = request->Products[i].ProductEvents[j].Destruction.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into destruction"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "12")
                ;*
                ;* Updating into ABO_Testing Table
                ;*
                if (request->Products[i].ProductEvents[j].AboTesting.change_ind = 1)
                    update into
                       ABO_Testing at
 
                    SET
                       at.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,at.product_id = request->Products[i].product_id
                       ,at.abo_testing_id = request->Products[i].ProductEvents[j].AboTesting.abo_testing_id
                       ,at.result_id = request->Products[i].ProductEvents[j].AboTesting.result_id
                       ,at.abo_group_cd = request->Products[i].ProductEvents[j].AboTesting.abo_group_cd
                       ,at.rh_type_cd = request->Products[i].ProductEvents[j].AboTesting.rh_type_cd
                       ,at.current_updated_ind = request->Products[i].ProductEvents[j].AboTesting.current_updated_ind
                       ,at.updt_cnt = at.updt_cnt + 1
                       ,at.active_ind = request->Products[i].ProductEvents[j].AboTesting.active_ind
                       ,at.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,at.updt_id = reqinfo->updt_id
                       ,at.updt_task = reqinfo->updt_task
                       ,at.updt_applctx = reqinfo->updt_applctx
                       ,at.active_status_cd =
                            if (request->Products[i].ProductEvents[j].AboTesting.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,at.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].AboTesting.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                at.active_status_dt_tm
                            endif
                       ,at.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].AboTesting.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                at.active_status_prsnl_id
                            endif
 
                    where at.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and at.updt_cnt = request->Products[i].ProductEvents[j].AboTesting.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into abo_testing"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "6")
                ;*
                ;* Updating into Transfer Table
                ;*
                if (request->Products[i].ProductEvents[j].Transfer.change_ind = 1)
                    update into
                       Transfer t
 
                    SET
                       t.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,t.product_id = request->Products[i].product_id
                       ,t.transferring_locn_cd = request->Products[i].ProductEvents[j].Transfer.transferring_locn_cd
                       ,t.transfer_cond_cd = request->Products[i].ProductEvents[j].Transfer.transfer_cond_cd
                       ,t.transfer_reason_cd = request->Products[i].ProductEvents[j].Transfer.transfer_reason_cd
                       ,t.transfer_vis_insp_cd = request->Products[i].ProductEvents[j].Transfer.transfer_vis_insp_cd
                       ,t.transfer_qty = request->Products[i].ProductEvents[j].Transfer.transfer_qty
                       ,t.login_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].Transfer.login_dt_tm)
                       ,t.login_prsnl_id = request->Products[i].ProductEvents[j].Transfer.login_prsnl_id
                       ,t.login_cond_cd = request->Products[i].ProductEvents[j].Transfer.login_cond_cd
                       ,t.login_vis_insp_cd = request->Products[i].ProductEvents[j].Transfer.login_vis_insp_cd
                       ,t.login_qty = request->Products[i].ProductEvents[j].Transfer.login_qty
                       ,t.return_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].Transfer.return_dt_tm)
                       ,t.return_prsnl_id = request->Products[i].ProductEvents[j].Transfer.return_prsnl_id
                       ,t.return_reason_cd = request->Products[i].ProductEvents[j].Transfer.return_reason_cd
                       ,t.return_cond_cd = request->Products[i].ProductEvents[j].Transfer.return_cond_cd
                       ,t.return_vis_insp_cd = request->Products[i].ProductEvents[j].Transfer.return_vis_insp_cd
                       ,t.return_qty = request->Products[i].ProductEvents[j].Transfer.return_qty
                       ,t.updt_cnt  = 0
                       ,t.active_ind = request->Products[i].ProductEvents[j].Transfer.active_ind
                       ,t.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,t.updt_id = reqinfo->updt_id
                       ,t.updt_task = reqinfo->updt_task
                       ,t.updt_applctx = reqinfo->updt_applctx
                       ,t.active_status_cd =
                            if (request->Products[i].ProductEvents[j].Transfer.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,t.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Transfer.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                t.active_status_dt_tm
                            endif
                       ,t.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Transfer.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                t.active_status_prsnl_id
                            endif
 
                    where t.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and t.updt_cnt = request->Products[i].ProductEvents[j].Transfer.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into transfer"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
                ;*
                ;* Updating into BB_Device_Transfer Table
                ;*
                if (request->Products[i].ProductEvents[j].BBDeviceTransfer.change_ind = 1)
                    update into
                        BB_Device_Transfer bd
 
                    SET
                       bd.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,bd.product_id = request->Products[i].product_id
                       ,bd.from_device_id = request->Products[i].ProductEvents[j].BBDeviceTransfer.from_device_id
                       ,bd.to_device_id = request->Products[i].ProductEvents[j].BBDeviceTransfer.to_device_id
                       ,bd.reason_cd = request->Products[i].ProductEvents[j].BBDeviceTransfer.reason_cd
                       ,bd.updt_cnt = bd.updt_cnt + 1
                       ,bd.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,bd.updt_id = reqinfo->updt_id
                       ,bd.updt_task = reqinfo->updt_task
                       ,bd.updt_applctx = reqinfo->updt_applctx
 
                    where bd.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and bd.updt_cnt = request->Products[i].ProductEvents[j].BBDeviceTransfer.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into bbdevice_transfer"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
                ;*
                ;*Updating into BB_Inventory_Transfer
                ;*
                if (request->Products[i].ProductEvents[j].BBInventoryTransfer.change_ind = 1)
 
                    update into
                        BB_Inventory_Transfer bit
 
                    SET
                        bit.from_owner_area_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.from_owner_area_cd
                       ,bit.from_inv_area_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.from_inv_area_cd
                       ,bit.transfer_reason_cd= request->Products[i].ProductEvents[j].BBInventoryTransfer.transfer_reason_cd
                       ,bit.to_owner_area_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.to_owner_area_cd
                       ,bit.to_inv_area_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.to_inv_area_cd
                       ,bit.transferred_qty = request->Products[i].ProductEvents[j].BBInventoryTransfer.transferred_qty
                       ,bit.transferred_intl_unit = request->Products[i].ProductEvents[j].BBInventoryTransfer.transferred_iu
                       ,bit.to_product_event_id = request->Products[i].ProductEvents[j].Related_product_event_id
                       ,bit.event_type_cd = request->Products[i].ProductEvents[j].BBInventoryTransfer.event_type_cd
                       ,bit.updt_cnt = bit.updt_cnt + 1
                       ,bit.updt_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,bit.updt_id = reqinfo->updt_id
                       ,bit.updt_task = reqinfo->updt_task
                       ,bit.updt_applctx = reqinfo->updt_applctx
 
                    where bit.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and bit.updt_cnt = request->Products[i].ProductEvents[j].BBInventoryTransfer.updt_cnt
 
                    WITH NOCOUNTER
 
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into bb_inventory_transfer"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "3")
                ;*
                ;* Updating into Crossmatch Table
                ;*
                if (request->Products[i].ProductEvents[j].Crossmatch.change_ind = 1)
                    update into
                       Crossmatch c
 
                    SET
                       c.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,c.product_id = request->Products[i].product_id
                       ,c.crossmatch_qty = request->Products[i].ProductEvents[j].Crossmatch.crossmatch_qty
                       ,c.release_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].Crossmatch.release_dt_tm)
                       ,c.release_prsnl_id =
                                        if (request->Products[i].ProductEvents[j].Crossmatch.release_prsnl_id > 0)
                                            request->Products[i].ProductEvents[j].Crossmatch.release_prsnl_id
                                        else
                                            reqinfo->updt_id
                                        endif
                       ,c.release_reason_cd = request->Products[i].ProductEvents[j].Crossmatch.release_reason_cd
                       ,c.release_qty = request->Products[i].ProductEvents[j].Crossmatch.release_qty
                       ,c.updt_cnt = c.updt_cnt + 1
                       ,c.active_ind = request->Products[i].ProductEvents[j].Crossmatch.active_ind
                       ,c.crossmatch_exp_dt_tm =
                            cnvtdatetime(request->Products[i].ProductEvents[j].Crossmatch.Crossmatch_exp_dt_tm)
                       ,c.reinstate_reason_cd = request->Products[i].ProductEvents[j].Crossmatch.reinstate_reason_cd
                       ,c.bb_id_nbr = request->Products[i].ProductEvents[j].Crossmatch.bb_id_nbr
                       ,c.xm_reason_cd = request->Products[i].ProductEvents[j].Crossmatch.xm_reason_cd
                       ,c.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,c.updt_id = reqinfo->updt_id
                       ,c.updt_task = reqinfo->updt_task
                       ,c.updt_applctx = reqinfo->updt_applctx
                       ,c.active_status_cd =
                            if (request->Products[i].ProductEvents[j].Crossmatch.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,c.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Crossmatch.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                c.active_status_dt_tm
                            endif
                       ,c.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Crossmatch.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                c.active_status_prsnl_id
                            endif
                       ,c.person_id = request->Products[i].ProductEvents[j].Crossmatch.person_id
 
                    where c.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and c.updt_cnt = request->Products[i].ProductEvents[j].Crossmatch.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into crossmatch"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "4")
                ;*
                ;* Updating into Patient_Dispense Table
                ;*
                if (request->Products[i].ProductEvents[j].PatientDispense.change_ind = 1)
                    update into
                       Patient_Dispense pd
 
                    SET
                       pd.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,pd.product_id = request->Products[i].product_id
                       ,pd.person_id = request->Products[i].ProductEvents[j].PatientDispense.person_id
                       ,pd.dispense_prov_id =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_prov_id
                       ,pd.dispense_reason_cd =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_reason_cd
                       ,pd.dispense_to_locn_cd =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_to_locn_cd
                       ,pd.dispense_from_locn_cd =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_from_locn_cd
                       ,pd.device_id =
                            request->Products[i].ProductEvents[j].PatientDispense.device_id
                       ,pd.dispense_vis_insp_cd =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_vis_insp_cd
                       ,pd.dispense_cooler_id =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_cooler_id
                       ,pd.dispense_cooler_text =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_cooler_text
                       ,pd.dispense_courier_id =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_courier_id
                       ,pd.dispense_status_flag =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_status_flag
                       ,pd.orig_dispense_intl_units =
                            request->Products[i].ProductEvents[j].PatientDispense.orig_dispense_intl_units
                       ,pd.cur_dispense_intl_units =
                            request->Products[i].ProductEvents[j].PatientDispense.cur_dispense_intl_units
                       ,pd.orig_dispense_qty =
                            request->Products[i].ProductEvents[j].PatientDispense.orig_dispense_qty
                       ,pd.cur_dispense_qty =
                            request->Products[i].ProductEvents[j].PatientDispense.cur_dispense_qty
                       ,pd.unknown_patient_ind =
                            request->Products[i].ProductEvents[j].PatientDispense.unknown_patient_ind
                       ,pd.unknown_patient_text =
                            request->Products[i].ProductEvents[j].PatientDispense.unknown_patient_text
                       ,pd.updt_cnt = pd.updt_cnt + 1
                       ,pd.active_ind = request->Products[i].ProductEvents[j].PatientDispense.active_ind
                       ,pd.dispense_courier_text =
                            request->Products[i].ProductEvents[j].PatientDispense.dispense_courier_text
                       ,pd.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,pd.updt_id = reqinfo->updt_id
                       ,pd.updt_task = reqinfo->updt_task
                       ,pd.updt_applctx = reqinfo->updt_applctx
                       ,pd.active_status_cd =
                            if (request->Products[i].ProductEvents[j].PatientDispense.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,pd.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].PatientDispense.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                pd.active_status_dt_tm
                            endif
                       ,pd.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].PatientDispense.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                pd.active_status_prsnl_id
                            endif
                       ,pd.bb_id_nbr = request->Products[i].ProductEvents[j].PatientDispense.bb_id_nbr
 
                    where pd.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and pd.updt_cnt = request->Products[i].ProductEvents[j].PatientDispense.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into patient_dispense"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
                ;*
                ;* Insert into Dispense_Return Table
                ;*
                if (request->Products[i].ProductEvents[j].DispenseReturn.add_ind = 1)
                    INSERT into
                       Dispense_Return dr
 
                    SET
                       dr.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,dr.product_id = request->Products[i].product_id
                       ,dr.dispense_return_id = request->Products[i].ProductEvents[j].DispenseReturn.dispense_return_id
                       ,dr.return_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].DispenseReturn.return_dt_tm)
                       ,dr.return_prsnl_id = request->Products[i].ProductEvents[j].DispenseReturn.return_prsnl_id
                       ,dr.return_reason_cd = request->Products[i].ProductEvents[j].DispenseReturn.return_reason_cd
                       ,dr.return_vis_insp_cd = request->Products[i].ProductEvents[j].DispenseReturn.return_vis_insp_cd
                       ,dr.return_courier_id = request->Products[i].ProductEvents[j].DispenseReturn.return_courier_id
                       ,dr.return_qty = request->Products[i].ProductEvents[j].DispenseReturn.return_qty
                       ,dr.return_intl_units = request->Products[i].ProductEvents[j].DispenseReturn.return_intl_units
                       ,dr.updt_cnt = 0
                       ,dr.active_ind = request->Products[i].ProductEvents[j].DispenseReturn.active_ind
                       ,dr.return_courier_text = request->Products[i].ProductEvents[j].DispenseReturn.return_courier_text
                       ,dr.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,dr.updt_id = reqinfo->updt_id
                       ,dr.updt_task = reqinfo->updt_task
                       ,dr.updt_applctx = reqinfo->updt_applctx
                       ,dr.active_status_cd =
                            if (request->Products[i].ProductEvents[j].DispenseReturn.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,dr.active_status_dt_tm = cnvtdatetime(curdate,curtime3)
                       ,dr.active_status_prsnl_id = reqinfo->updt_id
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "insert into dispense_return"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
                ;*
                ;* Update into Dipense_Return Table
                ;*
                if (request->Products[i].ProductEvents[j].DispenseReturn.change_ind = 1)
                    update into
                       Dispense_Return dr
 
                    SET
                       dr.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,dr.product_id = request->Products[i].product_id
                       ,dr.dispense_return_id = request->Products[i].ProductEvents[j].DispenseReturn.dispense_return_id
                       ,dr.return_dt_tm = cnvtdatetime(request->Products[i].ProductEvents[j].DispenseReturn.return_dt_tm)
                       ,dr.return_prsnl_id = request->Products[i].ProductEvents[j].DispenseReturn.return_prsnl_id
                       ,dr.return_reason_cd = request->Products[i].ProductEvents[j].DispenseReturn.return_reason_cd
                       ,dr.return_vis_insp_cd = request->Products[i].ProductEvents[j].DispenseReturn.return_vis_insp_cd
                       ,dr.return_courier_id = request->Products[i].ProductEvents[j].DispenseReturn.return_courier_id
                       ,dr.return_qty = request->Products[i].ProductEvents[j].DispenseReturn.return_qty
                       ,dr.return_intl_units = request->Products[i].ProductEvents[j].DispenseReturn.return_intl_units
                       ,dr.updt_cnt = dr.updt_cnt + 1
                       ,dr.active_ind = request->Products[i].ProductEvents[j].DispenseReturn.active_ind
                       ,dr.return_courier_text = request->Products[i].ProductEvents[j].DispenseReturn.return_courier_text
                       ,dr.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,dr.updt_id = reqinfo->updt_id
                       ,dr.updt_task = reqinfo->updt_task
                       ,dr.updt_applctx = reqinfo->updt_applctx
                       ,dr.active_status_cd =
                            if (request->Products[i].ProductEvents[j].DispenseReturn.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,dr.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].DispenseReturn.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                dr.active_status_dt_tm
                            endif
                       ,dr.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].DispenseReturn.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                dr.active_status_prsnl_id
                            endif
 
                    where dr.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and dr.updt_cnt = request->Products[i].ProductEvents[j].DispenseReturn.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into dispense_return"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
 
            elseif (cdf_meaning = "13")
                ;*
                ;* Update into Receipt Table
                ;*
                if (request->Products[i].ProductEvents[j].Receipt.change_ind = 1)
                    update into
                       Receipt r
 
                    SET
                       r.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                       ,r.product_id = request->Products[i].product_id
                       ,r.active_ind = request->Products[i].ProductEvents[j].Receipt.active_ind
                       ,r.ship_cond_cd = request->Products[i].ProductEvents[j].Receipt.ship_cond_cd
                       ,r.vis_insp_cd = request->Products[i].ProductEvents[j].Receipt.vis_insp_cd
                       ,r.orig_rcvd_qty = request->Products[i].ProductEvents[j].Receipt.orig_rcvd_qty
                       ,r.orig_intl_units =  request->Products[i].ProductEvents[j].Receipt.orig_intl_units
                       ,r.updt_cnt = r.updt_cnt + 1
                       ,r.bb_supplier_id = request->Products[i].ProductEvents[j].Receipt.bb_supplier_id
                       ,r.alpha_translation_id = request->Products[i].ProductEvents[j].Receipt.alpha_translation_id
                       ,r.temperature_value = request->Products[i].ProductEvents[j].Receipt.temperature_value
                       ,r.temperature_degree_cd = request->Products[i].ProductEvents[j].Receipt.temperature_degree_cd
                       ,r.electronic_receipt_ind = request->Products[i].ProductEvents[j].Receipt.electronic_receipt_ind
                       ,r.updt_dt_tm =   cnvtdatetime(curdate,curtime3)
                       ,r.updt_id = reqinfo->updt_id
                       ,r.updt_task = reqinfo->updt_task
                       ,r.updt_applctx = reqinfo->updt_applctx
                       ,r.active_status_cd =
                            if (request->Products[i].ProductEvents[j].Receipt.active_ind = 1)
                                reqdata->active_status_cd
                            else
                                reqdata->inactive_status_cd
                            endif
                       ,r.active_status_dt_tm =
                            if (request->Products[i].ProductEvents[j].Receipt.active_status_chg_ind = 1)
                                cnvtdatetime(curdate,curtime3)
                            else
                                r.active_status_dt_tm
                            endif
                       ,r.active_status_prsnl_id =
                            if (request->Products[i].ProductEvents[j].Receipt.active_status_chg_ind = 1)
                                reqinfo->updt_id
                            else
                                r.active_status_prsnl_id
                            endif
 
                    where r.product_event_id = request->Products[i].ProductEvents[j].product_event_id
                      and r.updt_cnt = request->Products[i].ProductEvents[j].Receipt.updt_cnt
 
                    WITH NOCOUNTER
 
                    ;002
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "update into receipt"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endif
            endif
        endfor
    endfor
ENDIF
 
;*
;* Insert BB Exceptions, if applicable.
;*
if ((request->add_exists_ind = 1 and request->pe_add_cnt > 0)
or  (request->chg_exists_ind = 1 and request->pe_chg_cnt > 0))
    for (i = 1 to size(request->Products,5))
        for (j = 1 to size(request->Products[i]->ProductEvents,5))
            if (size(request->Products[i]->ProductEvents[j].BBExceptions,5) > 0)
                for (k = 1 to size(request->Products[i]->ProductEvents[j].BBExceptions,5))
                    set bb_exception_id = 0.0
 
                    select into "nl:"
                       seqn = seq(pathnet_seq,nextval)
                    from
                       dual
                    detail
                       bb_exception_id = seqn
                    with
                       format, nocounter
 
                    insert into
                       bb_exception b
                    set
                       b.exception_id = bb_exception_id
                      ,b.product_event_id =
                         request->Products[i]->ProductEvents[j].product_event_id
                      ,b.exception_type_cd =
                         request->Products[i]->ProductEvents[j].BBExceptions[k].exception_type_cd
                      ,b.event_type_cd =
                         request->Products[i]->ProductEvents[j].event_type_cd
                      ,b.from_abo_cd = 0.0
                      ,b.from_rh_cd = 0.0
                      ,b.to_abo_cd = 0.0
                      ,b.to_rh_cd = 0.0
                      ,b.override_reason_cd =
                         request->Products[i]->ProductEvents[j].BBExceptions[k].override_reason_cd
                      ,b.result_id = 0.0
                      ,b.perform_result_id = 0.0
                      ,b.updt_cnt = 0
                      ,b.updt_dt_tm = cnvtdatetime(curdate, curtime3)
                      ,b.updt_id = ReqInfo->updt_id
                      ,b.updt_task = ReqInfo->updt_task
                      ,b.updt_applctx = ReqInfo->updt_applctx
                      ,b.active_ind = 1
                      ,b.active_status_cd = ReqData->active_status_cd
                      ,b.active_status_dt_tm = cnvtdatetime(curdate, curtime3)
                      ,b.active_status_prsnl_id = ReqInfo->updt_id
                      ,b.donor_contact_id = 0.0
                      ,b.donor_contact_type_cd = 0.0
                      ,b.order_id = 0.0
                      ,b.exception_prsnl_id = ReqInfo->updt_id
                      ,b.exception_dt_tm = cnvtdatetime(curdate, curtime3)
                      ,b.person_id = 0.0
                      ,b.default_expire_dt_tm =
                         cnvtdatetime(request->Products[i]->ProductEvents[j].BBExceptions[k].default_expire_dt_tm)
                    with counter
 
                    set sError_Check = ERROR(sErrorMsg, 0)
                    if (sError_Check != 0)
                        set reply->status_data->status = "F"
                        set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                        set reply->status_data.subeventstatus[1].OperationStatus = "F"
                        set reply->status_data.subeventstatus[1].TargetObjectName = "insert into bb_exception"
                        set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                        go to EXIT_SCRIPT
                    endif
                endfor
            endif
        endfor
    endfor
endif
 
;*
;* Update EDN tables, if applicable.
;*
if ((request->add_exists_ind = 1) and (request->pr_add_cnt > 0))
    for (i = 1 to size(request->Products,5))
        if (validate(request->Products[i].bb_edn_id, 0.0) > 0.0)
            if (UpdateEDNComplete(request->Products[i].bb_edn_id,
                                  request->Products[i].bb_edn_product_id,
                                  request->Products[i].product_id,
                                  request->Products[i].edn_complete_ind) = 1)
                ; UpdateEDNComplete failed, exit script.
                set sError_Check = ERROR(sErrorMsg, 0)
 
                if (sError_Check != 0)
                    set reply->status_data.subeventstatus[1].TargetObjectValue = sErrorMsg
                else
                    set reply->status_data.subeventstatus[1].TargetObjectValue
                        = "UpdateEDNComplete function returned failed status."
                endif
 
                set reply->status_data->status = "F"
                set reply->status_data.subeventstatus[1].OperationName = "bb_act_acd_product.prg"
                set reply->status_data.subeventstatus[1].OperationStatus = "F"
                set reply->status_data.subeventstatus[1].TargetObjectName = "UpdateEDNComplete"
 
                go to EXIT_SCRIPT
            endif
        endif
    endfor
endif
 
#exit_script
;002 rewrote logic
 
SET STAT = ALTERLIST(reply->dup_product, Dup_Cnt)
SET STAT = ALTERLIST(reply->conflicting_aborh, Con_Cnt)
 
IF (reply->status_data->status = "F")
   ;rollback
   set reqinfo->commit_ind = 0
ELSEIF (FAILURES = "Z")
    set reply->status_data->status = "Z"
    set reply->status_data->subeventstatus[1]->operationstatus = "Z"
    set reply->status_data->subeventstatus[1]->targetobjectvalue = "Duplicates Exist"
ELSE
    set reply->status_data->status = "S"
    ;commit
    set reqinfo->commit_ind = 1
 
ENDIF
 
;call echo(build("Failures=====> ", FAILURES))
;call echo(build("reply->status_data->status =====> ", reply->status_data->status))
 
end go

;Generated by GNU enscript 1.6.4.
