 ;;Solution_Test/script/PathNet -- BB Transfusion/BBCompXMElig/BBT_GET_CODE_SETS.PRG Turn on black mode


/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bbt_get_code_sets.prg       
        Object name:            bbt_get_code_sets
        Request #:              225586    

        Product:                PathNet                
        Product Team:           BB Transfusion
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Get all code_values and any extensions for specified code_sets

        Tables read:            code_value, code_set_extension, code_value_extension

        Tables updated:         <None>

        Executing from:         VB

        Special Notes:          
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 09/30/98 Doug Saus            Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program bbt_get_code_sets:dba go
create program bbt_get_code_sets:dba

/*
record request
(
 1  codesetlist[*]
    2  code_set            = i4
    2  cdf_meaning_ind     = i2
    2  cdf_meaning         = c12
)
*/

record reply
(
 1  codesetlist[*]
     2  code_set            = i4
     2  qual[*]
         3  code_value      = f8
         3  cdf_meaning     = c12
         3  display         = c40
         3  display_key     = c40
         3  description     = vc
         3  definition      = vc
         3  collation_seq   = i4
         3  active_type_cd  = f8
         3  active_ind      = i2
         3  updt_cnt        = i4
         3  ext_cnt         = i4
         3  ext_list[*]
             4  field_name      = c32
             4  field_type      = i4
             4  field_value     = vc
             4  field_value_cd  = f8
             4  field_value_disp = c40
             4  updt_cnt        = i4
%i cclsource:status_block.inc
)

/*
 * Initialize global variables
 */
    set count1 = 0
    set failed = "T"
    set reply->status_data->status = "F"

select into "nl:"
    cv.code_set
    , cv.code_value
    , cv.cdf_meaning
    , cv.display
    , cv.display_key
    , cv.description
    , cv.definition
    , cv.collation_seq
    , cv.active_type_cd
    , cv.active_ind
    , cv.updt_cnt
    , cse.field_name
    , cve.field_type
    , cve.field_value
    , cve.updt_cnt

from
    (dummyt d_cv with seq = value(size(request->codesetlist,5)))
    , code_value cv
    , (dummyt d_cse with seq = 1)
    , code_set_extension cse
    , (dummyt d_cve with seq = 1)
    , code_value_extension cve

plan    d_cv

join    cv      where   cv.code_set                     = request->codesetlist[d_cv.seq].code_set
                          and ((request->codesetlist[d_cv.seq]->cdf_meaning_ind = 0)
                            or (request->codesetlist[d_cv.seq]->cdf_meaning_ind = 1
                                and cv.cdf_meaning      = request->codesetlist[d_cv.seq].cdf_meaning))
                          and cv.code_value             != NULL
                          and cv.code_value             > 0
                          and cv.begin_effective_dt_tm  <= cnvtdatetime(curdate, curtime3)
                          and cv.end_effective_dt_tm    >= cnvtdatetime(curdate, curtime3)
join    (d_cse  where   d_cse.seq                       = 1
    join        cse     where   cse.code_set            = cv.code_set
    join    (d_cve  where   d_cve.seq                   = 1
        join    cve     where   cve.code_set            = cse.code_set
                                  and cve.field_name    = cse.field_name
                                  and cve.code_value    = cv.code_value))

order by    cv.code_set, cv.code_value, cse.field_name

head report
    cs_cnt = 0 
    stat = alterlist(reply->codesetlist, 5)

head cv.code_set
    cs_cnt = cs_cnt + 1
    cv_cnt = 0
    if(mod(cs_cnt, 5) = 1 and cs_cnt != 1)
        stat = alterlist(reply->codesetlist, cs_cnt + 4)
    endif
    reply->codesetlist[cs_cnt].code_set = cv.code_set

    stat = alterlist(reply->codesetlist[cs_cnt]->qual, 10)

head cv.code_value
    cv_cnt = cv_cnt + 1
    if(mod(cv_cnt, 10) = 1 and cv_cnt != 1)
        stat = alterlist(reply->codesetlist[cs_cnt].qual, cv_cnt + 9)
    endif

    reply->codesetlist[cs_cnt].qual[cv_cnt]->code_value     = cv.code_value
    reply->codesetlist[cs_cnt].qual[cv_cnt]->cdf_meaning    = cv.cdf_meaning
    reply->codesetlist[cs_cnt].qual[cv_cnt]->display        = cv.display
    reply->codesetlist[cs_cnt].qual[cv_cnt]->display_key    = cv.display_key
    reply->codesetlist[cs_cnt].qual[cv_cnt]->description    = cv.description
    reply->codesetlist[cs_cnt].qual[cv_cnt]->definition     = cv.definition
    reply->codesetlist[cs_cnt].qual[cv_cnt]->collation_seq  = cv.collation_seq
    reply->codesetlist[cs_cnt].qual[cv_cnt]->active_type_cd = cv.active_type_cd
    reply->codesetlist[cs_cnt].qual[cv_cnt]->active_ind     = cv.active_ind
    reply->codesetlist[cs_cnt].qual[cv_cnt]->updt_cnt       = cv.updt_cnt

    cve_cnt = 0
    stat = alterlist(reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_list, 5)

detail
    cve_cnt = cve_cnt + 1
    if(mod(cve_cnt, 5) = 1 and cve_cnt != 1)
        stat = alterlist(reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_list, cve_cnt + 4)
    endif

    reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_list[cve_cnt]->field_name      = cve.field_name
    reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_list[cve_cnt]->field_type      = cve.field_type
    reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_list[cve_cnt]->field_value     = cve.field_value
    if (cve.field_type = 1)
        reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_list[cve_cnt]->field_value_cd = cnvtreal(cve.field_value)
    endif
    reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_list[cve_cnt]->updt_cnt        = cve.updt_cnt

foot cv.code_value
    reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_cnt = cve_cnt
    stat = alterlist(reply->codesetlist[cs_cnt].qual[cv_cnt]->ext_list, cve_cnt)

foot cv.code_set
    stat = alterlist(reply->codesetlist[cs_cnt].qual, cv_cnt)

foot report
    stat = alterlist(reply->codesetlist, cs_cnt)
    failed = "F"

with    nocounter, outerjoin(d_cse), outerjoin(d_cve), nullreport

set count1 = count1 + 1
if (count1 > 1)
    set stat = alterlist(reply->status_data->subeventstatus, count1)
endif
set reply->status_data->subeventstatus[count1]->OperationName       = "Get code_value/extensions"
set reply->status_data->subeventstatus[count1]->TargetObjectName    = "bbt_get_code_sets"

if (failed = "F")
    if (size(reply->codesetlist, 5) > 0)
        set reply->status_data->status = "S"
        set reply->status_data->subeventstatus[count1]->OperationStatus     = "S"
        set reply->status_data->subeventstatus[count1]->TargetObjectValue   = 
            "SUCCESS"
    else
        set reply->status_data->status = "Z"
        set reply->status_data->subeventstatus[count1]->OperationStatus     = "S"
        set reply->status_data->subeventstatus[count1]->TargetObjectValue   = 
            "ZERO"
    endif
else
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[count1]->OperationStatus     = "F"
    set reply->status_data->subeventstatus[count1]->TargetObjectValue   = 
        "Select on code_value/code_value_extension failed"
endif


if (request->debug_ind = 1)
    call echo(build("reply->status_data->status =", reply->status_data->status))

    for (cs = 1 to cnvtint(size(reply->codesetlist, 5)))
        call echo(build(reply->codesetlist[cs].code_set))
        for (cv = 1 to cnvtint(size(reply->codesetlist[cs].qual, 5)))
             call echo(build(
             reply->codesetlist[cs].qual[cv]->code_value      , "/",
             reply->codesetlist[cs].qual[cv]->cdf_meaning     , "/", 
             reply->codesetlist[cs].qual[cv]->display         , "/",
             reply->codesetlist[cs].qual[cv]->display_key     , "/",
             reply->codesetlist[cs].qual[cv]->description     , "/",
             reply->codesetlist[cs].qual[cv]->definition      , "/",
             reply->codesetlist[cs].qual[cv]->collation_seq   , "/",
             reply->codesetlist[cs].qual[cv]->active_type_cd  , "/",
             reply->codesetlist[cs].qual[cv]->active_ind      , "/",
             reply->codesetlist[cs].qual[cv]->updt_cnt        , "/",
             reply->codesetlist[cs].qual[cv]->ext_cnt         ))
             for (cve = 1 to cnvtint(size(reply->codesetlist[cs].qual[cv]->ext_list, 5)))
                 call echo(build("-----",
                 reply->codesetlist[cs].qual[cv]->ext_list[cve]->field_name  , "/", 
                 reply->codesetlist[cs].qual[cv]->ext_list[cve]->field_type  , "/", 
                 reply->codesetlist[cs].qual[cv]->ext_list[cve]->field_value , "/", 
                 reply->codesetlist[cs].qual[cv]->ext_list[cve]->updt_cnt    ))
            endfor
        endfor
    endfor
endif

end go

;Generated by GNU enscript 1.6.4.
