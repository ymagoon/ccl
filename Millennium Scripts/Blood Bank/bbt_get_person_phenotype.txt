 ;;Solution_Test/script/PathNet -- BB Transfusion/RESULTENTRYFORBLOODBANK/BBT_GET_PERSON_PHENOTYPE.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1995 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       BBT_GET_PERSON_PHENOTYPE
        Object name:            BBT_GET_PERSON_PHENOTYPE
        Request #:              225472

        Product:                Transfusion
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Get 1 active phenotype for a person 

        Tables read:            PERSON_RH_PHENOTYPE
                                BB_RH_PHENOTYPE
                                NOMENCLATURE

        Tables updated:         None

        Executing from:         BBAntigen dll

        Special Notes:          ??
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 11/05/97 Badari Nath K.       Initial Release                     *
;     001 11/07/97 Jon Weekes           Added code to retrieve person_antigen
;       rows associated with person_rh_phenotype row                        *
;     002 12/29/97 Jon Weekes           Modified to return                  *
;       person_rh_pheno_result row information                              *
;     003 06/18/03  Ronda Zheng         Retrieve donor info from            *
;                                       donor_rh_phenotype table            *
;    *004 01/12/09 Ronda Zheng          Removed donor code.                 *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

Drop Program BBT_GET_PERSON_PHENOTYPE:DBA Go
Create Program BBT_GET_PERSON_PHENOTYPE:DBA
/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
/*
record request
(
 1  person_id = f8    
)
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
record reply
(
 1  person_rh_phenotype_id      = f8            ; 001
 1  rh_phenotype_id             = f8            ; 001
 1  updt_cnt                    = i4            ; 001
 1  fisher_race_disp            = vc
 1  fr_nomenclature_id          = f8            ; 001
 1  wiener_disp                 = vc
 1  w_nomenclature_id           = f8            ; 001
 1  person_rh_pheno_rs_id       = f8            ; 002
 1  person_rh_pheno_rs_updt_cnt    = i4         ; 002
 1  antigenlist[*]                              ; 001
     2  person_antigen_id       = f8            ; 001
     2  antigen_cd              = f8            ; 001
     2  antigen_disp            = c40           ; 001
     2  updt_cnt                = i4            ; 001
     
 1  donor_rh_phenotype_id      = f8            
 1  dn_rh_phenotype_id         = f8        
 1  donor_updt_cnt             = i4     
 1  donor_fisher_race_disp     = vc
 1  donor_fr_nomenclature_id   = f8       
 1  donor_wiener_disp          = vc
 1  donor_w_nomenclature_id    = f8       
 1  donor_rh_pheno_rs_id       = f8           
 1  donor_rh_pheno_rs_updt_cnt = i4        
 1  donor_antigenlist[*]                        
     2  donor_antigen_id       = f8          
     2  antigen_cd             = f8          
     2  antigen_disp           = c40         
     2  updt_cnt               = i4          
 
%I CCLSOURCE:STATUS_BLOCK.INC
)

/* Initialze Global Variables */                ; 001
    set reply->status_data->status = "F"        ; 001
    set count1 = 0                              ; 001
    set type_cnt = 0                            ; 001
    set qual_cnt = 0                            ; 001   Number of "quals" on person_rh_phenotype--should only be 1
    set pa_cnt = 0                              ; 001
    set select_ok_ind = 0                       ; 001

set stat = alterlist(reply->antigenlist, 10)

SELECT INTO "nl:"
    ptype.person_id
    , ptype.person_rh_phenotype_id
    , ptype.rh_phenotype_id
    , ptype.updt_cnt
    , btype.fr_nomenclature_id
    , btype.w_nomenclature_id
    , btype.rh_phenotype_id
    , table_ind = decode(ptype_r.seq, "PTR", pa.seq, "PA", n.seq, "NM", "XX")
    , n.nomenclature_id
    , n.short_string "##########"
    , pa.person_antigen_id
    , pa.antigen_cd
    , pa.updt_cnt
    , ptype_r.person_rh_pheno_rs_id     ; 002
    , ptype_r.updt_cnt                  ; 002
from
      person_rh_phenotype ptype

    , bb_rh_phenotype btype
    , (dummyt d with seq = 1)
    , nomenclature n
    , person_antigen pa
    , person_rh_pheno_result ptype_r    ; 002

plan    ptype   where   ptype.active_ind      = 1
                  and   ptype.person_id       = request->person_id
join    btype   where   btype.rh_phenotype_id = ptype.rh_phenotype_id
                  and   btype.active_ind      = 1
join    (d      where   d.seq                 = 1
    join    n       where   n.nomenclature_id     = btype.fr_nomenclature_id
                       or   n.nomenclature_id     = btype.w_nomenclature_id
    orjoin  pa  where   pa.person_rh_phenotype_id    = ptype.person_rh_phenotype_id
                              and pa.active_ind          = 1
    orjoin  ptype_r where ptype_r.person_rh_phenotype_id = ptype.person_rh_phenotype_id         ; 002
                            and ptype_r.active_ind       = 1)                                   ; 002

order by ptype.person_rh_phenotype_id, table_ind

head report
    select_ok_ind = 0
    qual_cnt = 0
    pa_cnt = 0

head ptype.person_rh_phenotype_id
    qual_cnt = qual_cnt + 1
    reply->person_rh_phenotype_id       = ptype.person_rh_phenotype_id          ; 001
    reply->rh_phenotype_id              = ptype.rh_phenotype_id                 ; 001
    reply->updt_cnt                     = ptype.updt_cnt                        ; 001

detail
    if (table_ind = "NM")
        if (btype.fr_nomenclature_id = n.nomenclature_id)
            reply->fisher_race_disp         = n.short_string
            reply->fr_nomenclature_id       = btype.fr_nomenclature_id              ; 001
        elseif (btype.w_nomenclature_id = n.nomenclature_id)
            reply->wiener_disp              = n.short_string
            reply->w_nomenclature_id        = btype.w_nomenclature_id               ; 001
        endif 
    elseif (table_ind = "PA")
        pa_cnt = pa_cnt + 1                                                         ; 001
        if (mod(pa_cnt, 10) = 1 and pa_cnt != 1)                                    ; 001
            stat = alterlist(reply->antigenlist, pa_cnt + 9)                        ; 001
        endif                                                                       ; 001
        reply->antigenlist[pa_cnt]->person_antigen_id = pa.person_antigen_id        ; 001
        reply->antigenlist[pa_cnt]->antigen_cd        = pa.antigen_cd               ; 001
        reply->antigenlist[pa_cnt]->updt_cnt          = pa.updt_cnt                 ; 001
    elseif (table_ind = "PTR")
        reply->person_rh_pheno_rs_id                    = ptype_r.person_rh_pheno_rs_id ; 002
        reply->person_rh_pheno_rs_updt_cnt                 = ptype_r.updt_cnt              ; 002
    endif

foot report                                                                     ; 001
    stat = alterlist(reply->antigenlist, pa_cnt)                                ; 001
    select_ok_ind = 1                                                           ; 001

WITH nullreport, nocounter


if (select_ok_ind = 1)
    if (qual_cnt = 0)       ; should be only one active person_rh_phenotype row
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "Z"
             /* process */ , "select person_rh_phenotype"
             /* message */ , concat("ZERO - no active person_rh_phenotype rows for person_id=", cnvtstring(request->person_id,32,2))
            )
    elseif (qual_cnt = 1)
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "S"
             /* process */ , "select person_rh_phenotype"
             /* message */ , "SUCCESS"
            )
    else
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "F"
             /* process */ , "select person_rh_phenotype"
             /* message */ , "Multiple active person_rh_phenotype rows.  Cannot retrieve person rh_phenotype"
            )
    endif
else
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "F"
             /* process */ , "select person_rh_phenotype"
             /* message */ , "Select failed.  CCL Error."
            )
endif


go to EXIT_SCRIPT
    
subroutine LOAD_PROCESS_STATUS
    (
     sub_status,
     sub_process,
     sub_message
    )

    set reply->status_data->status = sub_status
    set count1 = count1 + 1
    if (count1 > 1)
        set stat = alter(reply->status_data->subeventstatus, count1+1)
    endif
    set reply->status_data->subeventstatus[count1]->OperationName = sub_process
    set reply->status_data->subeventstatus[count1]->OperationStatus = sub_status
    set reply->status_data->subeventstatus[count1]->TargetObjectName = "bbt_get_person_phenotype"
    set reply->status_data->subeventstatus[count1]->TargetObjectValue = sub_message
END         ; end subroutine LOAD_PROCESS_STATUS


#EXIT_SCRIPT

;call echo(build("status_data->status =", reply->status_data->status))
;for (x = 1 to count1)
;    call echo(reply->status_data->subeventstatus[x]->OperationName)
;    call echo(reply->status_data->subeventstatus[x]->OperationStatus)
;    call echo(reply->status_data->subeventstatus[x]->TargetObjectName)
;    call echo(reply->status_data->subeventstatus[x]->TargetObjectValue)
;endfor
;call echo(" ")
;
;if (qual_cnt > 0)
;    call echo(build(
;        reply->rh_phenotype_id              , "/",
;        reply->fisher_race_disp             , "/", 
;        reply->fr_nomenclature_id           , "/", 
;        reply->wiener_disp                  , "/", 
;        reply->w_nomenclature_id            , "/", 
;        reply->person_rh_phenotype_id       , "/", 
;        reply->updt_cnt                     , "/",
;         reply->person_rh_pheno_rs_id        , "/",
;         reply->person_rh_pheno_rs_updt_cnt     ))
;        for (pa = 1 to pa_cnt)
;            call echo(build(pa, "....",
;                reply->antigenlist[pa]->person_antigen_id   , "/",
;                reply->antigenlist[pa]->antigen_cd          , "/",
;                reply->antigenlist[pa]->updt_cnt            ))
;        endfor
;endif

END GO

;Generated by GNU enscript 1.6.4.
