 ;;Solution_Test/script/PathNet -- BB Transfusion/BB_OCD_README_SCRIPTS/bbt_chk_import_questions.prg Turn on black mode


/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_chk_import_questions.prg
        Object name:            bbt_chk_import_questions
        Readme #:               0

        Product:                PathNet
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            
        
        Program purpose:        The purpose of this application is to ensure
                                preference question dependencies were imported.

        Tables read,            TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
        and access method:      --------------------    -----------------------------
                                code_value              Range
                                question                Unique
                                

        Tables updated:         

        Executing from:         

        Special Notes:          Each section should clearly identify what the purpose
                                of that README step is.  
        
        Run Occurance:          (select ONE of the following)
                                -----------------------------
                                [x] 1. RUN ONCE
                                [ ] 2. RUN MANY

        ReadMe Category:        (select ONE of the following)
                                -----------------------------
                                [x] 1. Data Load
                                [ ] 2. Data Conversion
                                [ ] 3. Data Migration

        Execution Time:         (select ONE of the following)
                                ------------------------------------
                                [ ] 1. Uptime before uptime schema.
                                [x] 2. Uptime after uptime schema.
                                [ ] 3. Downtime before downtime schema.
                                [ ] 4. Downtime after downtime schema.
                                [ ] 5. Uptime after all other components.
        
        Exec. Justification:    This will check that preference question dependencies were added correctly.
      
        Parent Script:          Parent script that must execute successfully for 
                                this to execute.

        Check Script:           

        Data file for import:   
        
        Execution Duration:     (select ONE of the following)
                                ----------------------------------
                                [x] 1. Fixed Time
                                [ ] 2. Driver Table: 

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 07/28/01 Gary Runde           Initial Release                     *
;     001 06/10/02 cd4140               Changed to dispense from RE question*
;     002 02/02/03 Ronda Zheng          changed to check computer xm question*
;     003 10/11/05 JA7516               Added required logging              *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_chk_import_questions:dba go
create program bbt_chk_import_questions:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "bbt_chk_import_questions"
CALL LOGSCRIPTSTART(sREADME_NAME)
CALL LOGSTATUS(build("Readme Failed: Starting Script ",sREADME_NAME,"."),"F")


/************************
** README ACTION STEPS **
************************/
declare success_ind             = i2  with protect, noconstant(0)
declare notice_question_cd      = f8  with protect, noconstant(0.0)
declare QUESTION_CODE_SET       = i4  with protect, constant(1661)
declare NOTICE_CDF_MEANING      = c12 with protect, constant("PRODDSNOTICE")
declare sMsg                    = vc  with protect, noconstant("")

;retrieve the code_value for the product dispense notice question cdf meaning 
;on code set 1661
select into "nl:"
  c.code_value
from code_value c
plan c
  where c.code_set = QUESTION_CODE_SET
    and c.cdf_meaning = NOTICE_CDF_MEANING
detail
  notice_question_cd = c.code_value
with nocounter

;check to make sure code was retrieved successfully
if (notice_question_cd = 0.0)
  set success_ind = 0
  set sMsg = concat("Code lookup failed->", NOTICE_CDF_MEANING, " of Code Set 1661")
else
    ;check to see if this question is on the question table.
    select into "nl:"
      q.question_cd
    from question q
    where q.question_cd = notice_question_cd
    detail
      ;set success_ind to a one to indicate we found the correct row
      success_ind = 1
    with nocounter
    if (success_ind = 0)
      set sMsg = concat("Failed to find code in QUESTION table ->",NOTICE_CDF_MEANING)
    endif
endif

;---------------------------------------------------------
#EXIT_SCRIPT
/****************************
**  LOG Execution Status.  **
**                         ***************************************
**  Note:  if you have a check script then you do not           **
**  need to perform the LOGSTATUS in the RDM script.            **
**  Explicit COMMIT and/or ROLLBACK must be perform             **
**  In this section both in the README and the CHECK            **
**  script.  For example:                                       **
**     if (nCnt > 0)                                            **
**       COMMIT  ;Just in case LOGSTATUS pulls an Oracle error. **
**       CALL LOGSTATUS("Execution Successful.", "S")           **
**     else                                                     **
**       ROLLBACK                                               **
**       CALL LOGSTATUS("Execution Failed because ...", "F")    **
**     endif                                                    **
**                                                              **
*****************************************************************/

if (success_ind = 0)
  rollback
  set sMsg = concat("Execution Failed: ",sMsg)
  call logmsg (sMsg, e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
  call logstatus (sMsg, "F")
else
  call logmsg ("Inserted all QUESTION rows successfully.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
  call logstatus ("Inserted all QUESTION rows successfully.", "S") 
endif

/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
CALL LOGSCRIPTEND(sREADME_NAME)
call echorecord(readme_data)
end go

;Generated by GNU enscript 1.6.4.
