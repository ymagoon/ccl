 ;;Solution_Test/script/PathNet -- BB Transfusion/BB_OCD_README_SCRIPTS/bbt_rdm_cnvt_prod_barcode.prg Turn on black mode


/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_rdm_cnvt_prod_barcode.prg
        Object name:            bbt_rdm_cnvt_prod_barcode
        Readme #:               0

        Product:                PathNet
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            
        
        Program purpose:        The purpose of this application is to convert product 
                                barcode table to make each row have unique barcode_id

        Tables read,            TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
        and access method:      --------------------    -----------------------------
                                product_barcode

        Tables updated:         product_barcode

        Executing from:         

        Special Notes:          Each section should clearly identify what the purpose
                                of that README step is.  
        
        Run Occurance:          (select ONE of the following)
                                -----------------------------
                                [x] 1. RUN ONCE
                                [ ] 2. RUN MANY

        ReadMe Category:        (select ONE of the following)
                                -----------------------------
                                [ ] 1. Data Load
                                [x] 2. Data Conversion
                                [ ] 3. Data Migration

        Execution Time:         (select ONE of the following)
                                ------------------------------------
                                [ ] 1. Uptime before uptime schema.
                                [ ] 2. Uptime after uptime schema.
                                [ ] 3. Downtime before downtime schema.
                                [x] 4. Downtime after downtime schema.
                                [ ] 5. Uptime after all other components.
        
        Exec. Justification:    Give reason for selecting Execution Time above.
      
        Parent Script:          Parent script that must execute successfully for 
                                this to execute.

        Check Script:           bbt_chk_cnvt_prod_barcode.prg

        Data file for import:   
        
        Execution Duration:     (select ONE of the following)
                                ----------------------------------
                                [ ] 1. Fixed Time
                                [x] 2. Driver Table: product_barcode

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/12/01 Chris Cline          Initial (template) Release          *
;     001 02/01/01 Chris Cline          Template update for COMMIT.         *
;     002 02/13/01 Martin R. Slimmer    Update with BB logic                *
;     003 11/10/03 Ronda Zheng          Check if the table exists before modify*/
;     004 06/21/05 Jeff Wain            Removed cnvtint formatting on seqn  *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_rdm_cnvt_prod_barcode:dba go
create program bbt_rdm_cnvt_prod_barcode:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "bbt_rdm_cnvt_prod_barcode"
CALL LOGSCRIPTSTART(sREADME_NAME)

/************************
** README ACTION STEPS **
************************/
declare table_exists         = c1    with protect, noconstant("F")

/* Check if the table exist */
select into "NL:" 

from user_tab_columns utc 

where utc.table_name = "PRODUCT_BARCODE" 

detail 

  table_exists = "T" 

with nocounter 

if(table_exists = "F") 
 set readme_data->status = "S" 
 set readme_data->message = "New table, readme not needed to generate unique barcode ID." 
 go to skip_product_barcode_table 
endif 


DECLARE NEXT_PATHNET_SEQ(pathnet_seq_dummy) = f8

SUBROUTINE NEXT_PATHNET_SEQ(pathnet_seq_dummy)
    SET new_pathnet_seq = 0.0
    SELECT INTO "nl:"
        seqn        = seq(pathnet_seq,nextval)
    FROM
        dual
    DETAIL
         new_pathnet_seq        = seqn
    WITH
        format, nocounter
    RETURN(new_pathnet_seq)
END             ; end subroutine NEXT_PATHNET_SEQ


record pb_rec
(
 1  pb[*]
     2  PRODUCT_BARCODE_ID          = f8               
     2  PRODUCT_BARCODE             = c15 
     2  PRODUCT_CD                  = f8     
     2  PRODUCT_CAT_CD              = f8     
     2  PRODUCT_CLASS_CD            = f8     
     2  ACTIVE_IND                  = i2     
     2  ACTIVE_STATUS_CD            = f8     
     2  ACTIVE_STATUS_DT_TM         = dq8     
     2  ACTIVE_STATUS_PRSNL_ID      = f8     
     2  UPDT_CNT                    = i4     
     2  UPDT_DT_TM                  = dq8     
     2  UPDT_ID                     = f8     
     2  UPDT_TASK                   = i4     
     2  UPDT_APPLCTX                = i4     
)

declare rdb_string = c132

set failed = "F"
set pb_cnt = 0
set new_product_barcode_seq = 0.0

/* 1st clean up garbage rows with blank product_barcode   */


select into "nl:"
        * 
from user_tab_columns 
where table_name="PRODUCT_BARCODE"
and column_name="PRODUCT_BARCODE_ID"

with nocounter

if (curqual = 0)
        set rdb_string = "rdb alter table product_barcode add (product_barcode_id number) go"
        call parser(rdb_string)

        execute oragen3 'product_barcode'

        select into "nl:"
                * 
        from user_tab_columns 
        where table_name="PRODUCT_BARCODE"
        and column_name="PRODUCT_BARCODE_ID"

        if (curqual = 0)
                set failed = "T"
                go to exit_script
        endif
endif



call logmsg("Getting ready to begin Barcode conversion.", e_DISPMSG + e_RDMSTATUS + e_LOGTOFILE)

delete from product_barcode
where product_barcode = "               "
with nocounter
if (curqual > 0)  
   commit
endif

select into "nl:"
    pb.PRODUCT_BARCODE_ID,            
    pb.PRODUCT_BARCODE,
    pb.PRODUCT_CD,
    pb.PRODUCT_CAT_CD,
    pb.PRODUCT_CLASS_CD,                 
    pb.ACTIVE_IND,                 
    pb.ACTIVE_STATUS_CD,                 
    pb.ACTIVE_STATUS_DT_TM,              
    pb.ACTIVE_STATUS_PRSNL_ID,           
    pb.UPDT_CNT,                         
    pb.UPDT_DT_TM,                       
    pb.UPDT_ID,                      
    pb.UPDT_TASK,                        
    pb.UPDT_APPLCTX

from product_barcode pb

order by
   pb.product_barcode,
   pb.active_ind,
   pb.updt_cnt
; check last updated active barcode first

head report
     stat = alterlist(pb_rec->pb, 100)

head pb.product_barcode
    if (trim(pb.product_barcode) > ""
    and pb.active_ind = 1)
        pb_cnt = pb_cnt + 1
        if (mod(pb_cnt, 100) = 1 and pb_cnt != 1)
            stat = alterlist(pb_rec->pb, pb_cnt + 99)
        endif
        pb_rec->pb[pb_cnt]->PRODUCT_BARCODE_ID  = pb.product_barcode_id
        pb_rec->pb[pb_cnt]->PRODUCT_BARCODE  = pb.product_barcode        
        pb_rec->pb[pb_cnt]->PRODUCT_CD = pb.PRODUCT_CD                       
        pb_rec->pb[pb_cnt]->PRODUCT_CAT_CD = pb.PRODUCT_CAT_CD                   
        pb_rec->pb[pb_cnt]->PRODUCT_CLASS_CD = pb.PRODUCT_CLASS_CD                 
        pb_rec->pb[pb_cnt]->ACTIVE_IND = pb.ACTIVE_IND                       
        pb_rec->pb[pb_cnt]->ACTIVE_STATUS_CD = pb.ACTIVE_STATUS_CD                 
        pb_rec->pb[pb_cnt]->ACTIVE_STATUS_DT_TM = 
              cnvtdatetime(pb.ACTIVE_STATUS_DT_TM)              
        pb_rec->pb[pb_cnt]->ACTIVE_STATUS_PRSNL_ID = pb.ACTIVE_STATUS_PRSNL_ID           
        pb_rec->pb[pb_cnt]->UPDT_CNT = pb.UPDT_CNT                         
        pb_rec->pb[pb_cnt]->UPDT_DT_TM = cnvtdatetime(pb.UPDT_DT_TM)
        pb_rec->pb[pb_cnt]->UPDT_ID = pb.UPDT_ID                          
        pb_rec->pb[pb_cnt]->UPDT_TASK = pb.UPDT_TASK                        
        pb_rec->pb[pb_cnt]->UPDT_APPLCTX = pb.UPDT_APPLCTX                     
    endif

foot report
    stat = alterlist(pb_rec->pb, pb_cnt)

with nocounter

if (curqual= 0)
  go to EXIT_SCRIPT
endif

if (pb_cnt = 0)
   go to EXIT_SCRIPT
endif

call logmsg("Finished populating pb_rec record for Barcode conversion.", e_DISPMSG + e_RDMSTATUS + e_LOGTOFILE)

for (pb = 1 to pb_cnt)
  if (pb_rec->pb[pb].product_barcode_id > 0)
     set pb_cnt = pb_cnt
  else
     set new_product_barcode_seq = 0.0
     set new_product_barcode_seq = next_pathnet_seq(0)
     set pb_rec->pb[pb]->product_barcode_id = new_product_barcode_seq
  endif
endfor

delete from product_barcode pb
where trim(pb.product_barcode) > ""
        or trim(pb.product_barcode) <= ""
with nocounter

if (curqual = 0)  
   set failed = "T"
   go to exit_script
endif

for (pb = 1 to pb_cnt)

    insert into product_barcode pb

    set pb.product_barcode_id       = pb_rec->pb[pb]->PRODUCT_BARCODE_ID
        , PRODUCT_BARCODE           = pb_rec->pb[pb]->PRODUCT_BARCODE
        , PRODUCT_CD                = pb_rec->pb[pb]->PRODUCT_CD
        , PRODUCT_CAT_CD            = pb_rec->pb[pb]->PRODUCT_CAT_CD
        , PRODUCT_CLASS_CD          = pb_rec->pb[pb]->PRODUCT_CLASS_CD
        , ACTIVE_IND                = pb_rec->pb[pb]->ACTIVE_IND
        , ACTIVE_STATUS_CD          = pb_rec->pb[pb]->ACTIVE_STATUS_CD
        , ACTIVE_STATUS_DT_TM   = cnvtdatetime(pb_rec->pb[pb]->ACTIVE_STATUS_DT_TM)
        , ACTIVE_STATUS_PRSNL_ID    = pb_rec->pb[pb]->ACTIVE_STATUS_PRSNL_ID
        , UPDT_CNT                  = pb_rec->pb[pb]->UPDT_CNT
        , UPDT_DT_TM                = cnvtdatetime(pb_rec->pb[pb]->UPDT_DT_TM)
        , UPDT_ID                   = pb_rec->pb[pb]->UPDT_ID
        , UPDT_TASK                 = pb_rec->pb[pb]->UPDT_TASK
        , UPDT_APPLCTX              = pb_rec->pb[pb]->UPDT_APPLCTX

    with counter

    if (curqual = 0)
        set failed = "T"
        go to exit_script
    endif

endfor
;---------------------------------------------------------
#EXIT_SCRIPT
/****************************
**  LOG Execution Status.  **
**                         ***************************************
**  Note:  if you have a check script then you do not           **
**  need to perform the LOGSTATUS in the RDM script.            **
**  Explicit COMMIT and/or ROLLBACK must be perform             **
**  In this section both in the README and the CHECK            **
**  script.  For example:                                       **
**     if (nCnt > 0)                                            **
**       COMMIT  ;Just in case LOGSTATUS pulls an Oracle error. **
**       CALL LOGSTATUS("Execution Successful.", "S")           **
**     else                                                     **
**       ROLLBACK                                               **
**       CALL LOGSTATUS("Execution Failed because ...", "F")    **
**     endif                                                    **
**                                                              **
*****************************************************************/

if (failed = "F")
    commit
    call logstatus("Execution Successful.", "S")
else
    rollback
    CALL LOGSTATUS ("Execution failed - see log message for more details.", "F")
endif

#skip_product_barcode_table


/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
CALL LOGSCRIPTEND(sREADME_NAME)

end go



;Generated by GNU enscript 1.6.4.
