 ;;Solution_Test/script/PathNet -- BB Transfusion/RESULTENTRYFORBLOODBANK/BBT_ADD_PRS_ABORH.INC Turn on black mode

/*
 *  PURPOSE:  add row to person_aborh table
 *
 *  PRELIMINARIES:
 *   1)  Include the following code in calling program:
 *           %i cclsource:bbt_add_prs_aborh.inc
 *           END        ; end subroutine ADD_PERSON_ABORH
 *   2)  Declare the followoing variables in the calling program, prior to calling the subroutine:
 *             set gsub_person_aborh_status = "  " (gsub = global subroutine variable)
 *             set aborh_id = 0
 *   3)  Call subroutine using CALL FORMAT below
 *   4)  After control returns from subroutine, evaluate gsub_person_aborh_status as follows:
 *         "FS" = get person_aborh_id (seq) failed
 *         "FA" = add person_aborh failed                                
 *         "OK" = add successful                                           
 *
 *  CALL FORMAT (this may be copied into calling program): */
 ;       call ADD_PERSON_ABORH
 ;          (                             ** These <variables> set in calling program **
 ;           /* person_aborh_id        */ <person_aborh_id>,
 ;           /* person_id              */ <person_id>,
 ;           /* abo_cd                 */ <abo_cd>,
 ;           /* rh_cd                  */ <rh_cd>,
 ;           /* active_ind             */ <active_ind>,
 ;           /* active_status_cd       */ <reqdata->active_status_cd>,
 ;           /* active_status_dt_tm    */ cnvtdatetime(<active_status_dt_tm>),
 ;           /* active_status_prsnl_id */ <active_status_prsnl_id>,
 ;	     /* last_verified_dt_tm    */ <last_verified_dt_tm>
 ;          )

    subroutine ADD_PERSON_ABORH
        (
         sub_person_id,
         sub_abo_cd,
         sub_rh_cd,
         sub_active_ind,
         sub_active_status_cd,
         sub_active_status_dt_tm,
         sub_active_status_prsnl_id,
         sub_last_verified_dt_tm
        )

    /* Initialize gsub_person_aborh_status */
    set gsub_person_aborh_status = "  "

    /*
     * Retrieve new sequence number for person_aborh_id
     */

    set person_aborh_id = NEXT_PATHNET_SEQ(0)

    if (curqual = 0)
        set gsub_person_aborh_status = "FS"
    else
       insert into person_aborh pa
            set pa.person_aborh_id          = person_aborh_id,
                pa.person_id                = sub_person_id,
                pa.abo_cd                   = sub_abo_cd,
                pa.rh_cd                    = sub_rh_cd,
                pa.active_ind               = sub_active_ind,
                pa.active_status_cd         = sub_active_status_cd,
                pa.active_status_dt_tm      = cnvtdatetime(sub_active_status_dt_tm),
                pa.active_status_prsnl_id   = sub_active_status_prsnl_id,
                pa.begin_effective_dt_tm    = cnvtdatetime(curdate, curtime3),
                pa.end_effective_dt_tm      = cnvtdatetime( "31-DEC-2100:00:00:00.00" ),
                pa.updt_cnt                 = 0,
                pa.updt_dt_tm               = cnvtdatetime(curdate, curtime3),
                pa.updt_id                  = ReqInfo->updt_id,
                pa.updt_task                = ReqInfo->updt_task,
                pa.updt_applctx             = ReqInfo->updt_applctx,
                pa.last_verified_dt_tm      = cnvtdatetime(sub_last_verified_dt_tm)
        with    nocounter
        if (curqual = 0)
            set gsub_person_aborh_status = "FA"
        else
            set gsub_person_aborh_status = "OK"
        endif           ; endif curqual = 0 person_aborh   
    endif               ; endif curqual = 0 seq
/* END for subroutine is to be included in calling program code */

;Generated by GNU enscript 1.6.4.
