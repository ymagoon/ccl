 ;;Solution_Test/script/PathNet -- BB Transfusion/Bbt_Convert_Interp_Result/bbt_convert_interp_result.prg Turn on black mode

/****************************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-1995 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 ************************************************************************
 
          Date Written:       10/21/96
          Program purpose:    CONVERT DATA due to new LONG_TEXT table
*/ 
drop program bbt_convert_interp_result:dba go
create program bbt_convert_interp_result:dba

record request
(
 1  qual[1000]
    2  interp_result_id = f8
    2  interp_result_text = vc
    2  long_text_id = f8
    2  interp_active_ind = i2
    2  interp_active_status_cd = f8
    2  interp_active_dt_tm = dq8
    2  interp_active_id = f8
    2  updt_id = f8
    2  updt_applctx = f8
    2  updt_task = f8
) 
 
  /* Get active_code */
  set active_code = 0.0
  set x = 0
  set idx = 0
  set failed = "F"
 
    select into "nl:"
    from CODE_VALUE C
    where (C.CODE_SET = 48
      and C.CDF_MEANING = "ACTIVE")
    detail
      active_code = c.code_value
    with nocounter
    if (curqual = 0)
       set active_code = 0.0
    endif

  select * from interp_result i
;  where long_text_id = null
  detail
    x = x + 1
;    if (x > 1000)
;      failed = "T"
;      go to end_program
;    else
     request->qual[x].interp_result_id = i.INTERP_RESULT_ID
     request->qual[x].interp_result_text = i.result_text
     request->qual[x].long_text_id = i.long_text_id
     request->qual[x].interp_active_ind = i.active_ind
     request->qual[x].interp_active_status_cd = i.active_status_cd
     request->qual[x].interp_active_dt_tm = cnvtdatetime(i.active_status_dt_tm)
     request->qual[x].interp_active_id = i.active_status_prsnl_id
     request->qual[x].updt_id = i.UPDT_ID
     request->qual[x].updt_applctx = i.UPDT_APPLCTX
     request->qual[x].updt_task = i.UPDT_TASK
;   endif
  WITH
      nocounter
  if (curqual = 0)
    set failed = "T"
    go to END_PROGRAM
  endif

  if (x = 0)
    set failed = "T"    
    gO TO end_program
  endif

for (idx = 1 to x )
 IF ( request->qual[idx].long_text_id = null)
   if ( request->qual[idx].interp_result_text > "" )

    /* Get unique number */
        set new_nbr = 0.0
 
    select into "nl:"
    y = seq(LONG_DATA_SEQ, nextval)
         "##################;rp0"
    from dual
    detail
       new_nbr = cnvtreal(y)
     with format, counter
 
    if (curqual = 0)
     ;call uar_Sys_Event (hPM_ADD_LONG_TEXT,"SEQUENCE","ADDRESS_SEQ",
                          ;"NEXTVAL","F","","","")
     ;call uar_Sys_Event (hPM_ADD_LONG_TEXT,"TABLE","dual","","","","","")
     ;set sEntity = "Further Development Pending"
     ;call uar_Sys_Event (hPM_ADD_LONG_TEXT,"ENTITY",sENTITY,"ADD","F","","","")
     ;call uar_Sys_Event (hPM_ADD_LONG_TEXT,"TABLE","long_text","","","","","")
     ;call uar_Sys_Log (hPM_ADD_LONG_TEXT,"pm_add_long_text","")
     set failed = "T"    
     go to end_program
   else  
    INSERT into LONG_TEXT L
     set
    L.LONG_TEXT_ID                = new_nbr,
    L.PARENT_ENTITY_NAME          = "INTERP_RESULT",
    L.PARENT_ENTITY_ID            = request->qual[idx].interp_result_id,
    L.LONG_TEXT                   =  request->qual[idx].interp_result_text,
    L.ACTIVE_IND                  =  request->qual[idx].interp_active_ind,
    L.ACTIVE_STATUS_CD            =  request->qual[idx].interp_active_status_cd,
    L.ACTIVE_STATUS_PRSNL_ID      =  request->qual[idx].updt_id,
   L.ACTIVE_STATUS_DT_TM = cnvtdatetime(request->qual[idx].interp_active_dt_tm),
    L.UPDT_CNT                    = 0,
    L.UPDT_DT_TM                  = cnvtdatetime(curdate, curtime),
    L.UPDT_ID                     = request->qual[idx].updt_id,
    L.UPDT_APPLCTX                = request->qual[idx].updt_applctx,
    L.UPDT_TASK                   = request->qual[idx].updt_task
  
  with nocounter
 
  if (curqual = 0)
    ;set sEntity = "Further Development Pending"
    ;call uar_Sys_Event (hPM_ADD_LONG_TEXT,"ENTITY",sENTITY,"ADD","F","","","")
    ;call uar_Sys_Event (hPM_ADD_LONG_TEXT,"TABLE","long_text","","","","","")
    ;call uar_Sys_Log (hPM_ADD_LONG_TEXT,"pm_add_long_text","")
    set failed = "T"    
    go to end_program
  else
    set request->qual[idx].long_text_id = new_nbr
  endif
  endif
 endif
endif
endfor

for (idx = 1 to x) 
   if (request->qual[idx].interp_result_text > "")
     if ( request->qual[idx].long_text_id > 0 ) 
 SELECT into "nl:"
      i.*
 FROM
      interp_result i
 WHERE
      i.interp_result_id = request->qual[idx].interp_result_id
 WITH
      nocounter, forupdate(i) 
 if (curqual = 0)
   set failed = "T"
   go to end_program
 endif

  update into interp_result i
    set i.long_text_id = request->qual[idx].long_text_id,
        i.updt_cnt = i.updt_cnt + 1,
        i.updt_dt_tm = cnvtdatetime(curdate,curtime)
    where i.interp_result_id = request->qual[idx].interp_result_id
    with nocounter
    if (curqual = 0)
      set failed = "T"
      go to end_program
    endif
 else
   set failed = "T"
   go to end_program
endif 
endif       
endfor 
 
#END_PROGRAM
   if (failed = "T")
      rollback
   else
      commit
   endif

end go

;Generated by GNU enscript 1.6.4.
