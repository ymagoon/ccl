 ;;Solution_Test/script/PathNet -- BB Transfusion/RESULTENTRYFORBLOODBANK/BBT_GET_PRODUCT_RH_PHENOTYPE.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1995 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       BBT_GET_PRODUCT_RH_PHENOTYPE
        Object name:            BBT_GET_PRODUCT_RH_PHENOTYPE
        Request #:              225472

        Product:                Transfusion
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Get 1 active phenotype for a product 

        Tables read:            PRODUCT_RH_PHENOTYPE
                                BB_RH_PHENOTYPE
                                NOMENCLATURE

        Tables updated:         None

        Executing from:         BBAntigen dll

        Special Notes:          ??
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 11/05/97 Badari Nath K.       Initial Release                     *
;     001 11/07/97 Jon Weekes           Added code to retrieve special_testing
;       rows associated with product_rh_phenotype row                        *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

Drop Program BBT_GET_PRODUCT_RH_PHENOTYPE:DBA Go
Create Program BBT_GET_PRODUCT_RH_PHENOTYPE:DBA
/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
/*
record request
(
 1  product_id = f8    
)
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
record reply
(
 1  product_rh_phenotype_id     = f8            
 1  rh_phenotype_id             = f8            
 1  updt_cnt                    = i4            
 1  fisher_race_disp            = vc
 1  fr_nomenclature_id          = f8            
 1  wiener_disp                 = vc
 1  w_nomenclature_id           = f8            
 1  antigenlist[*]                              
     2  special_testing_id      = f8            
     2  special_testing_cd      = f8            
     2  special_testing_disp    = c40           
     2  updt_cnt                = i4            
     2  spcl_tst_rsl_updt_cnt   = i4
%I CCLSOURCE:STATUS_BLOCK.INC
)

/* Initialze Global Variables */                
    set reply->status_data->status = "F"        
    set count1 = 0                              
    set type_cnt = 0                            
    set qual_cnt = 0       ; Number of "quals" on product_rh_phenotype--should only be 1
    set st_cnt = 0                              
    set select_ok_ind = 0                       


set stat = alterlist(reply->antigenlist, 10)

SELECT INTO "nl:"
    prp.product_id
    , prp.product_rh_phenotype_id
    , prp.rh_phenotype_id
    , prp.updt_cnt
    , brp.fr_nomenclature_id
    , brp.w_nomenclature_id
    , brp.rh_phenotype_id
    , table_ind = decode(st.seq, "ST", n.seq, "NM", "XX")
    , n.nomenclature_id
    , n.short_string "##########"
    , st.special_testing_id
    , st.special_testing_cd
    , st.updt_cnt
    , str.updt_cnt
 
from
    product_rh_phenotype prp
    , bb_rh_phenotype brp
    , (dummyt d with seq = 1)
    , nomenclature n
    , special_testing st
    , special_testing_result str

plan    prp   where   prp.active_ind        = 1
                  and   prp.product_id      = request->product_id
join    brp   where   brp.rh_phenotype_id   = prp.rh_phenotype_id
                  and   brp.active_ind      = 1
join    (d      where   d.seq               = 1
    join    n       where   n.nomenclature_id       = brp.fr_nomenclature_id
                       or   n.nomenclature_id       = brp.w_nomenclature_id
    orjoin  (st  where   st.product_rh_phenotype_id = prp.product_rh_phenotype_id
                           and st.active_ind        = 1
        join str where   str.special_testing_id     = st.special_testing_id
                           and str.active_ind       = 1))

order by prp.product_rh_phenotype_id, table_ind

head report
    select_ok_ind = 0
    qual_cnt = 0
    st_cnt = 0

head prp.product_rh_phenotype_id
    qual_cnt = qual_cnt + 1
    reply->product_rh_phenotype_id      = prp.product_rh_phenotype_id          
    reply->rh_phenotype_id              = prp.rh_phenotype_id                 
    reply->updt_cnt                     = prp.updt_cnt                        

detail
    if (table_ind = "NM")
        if (brp.fr_nomenclature_id = n.nomenclature_id)
            reply->fisher_race_disp         = n.short_string
            reply->fr_nomenclature_id       = brp.fr_nomenclature_id              
        elseif (brp.w_nomenclature_id = n.nomenclature_id)
            reply->wiener_disp              = n.short_string
            reply->w_nomenclature_id        = brp.w_nomenclature_id               
        endif 
    elseif (table_ind = "ST")
        st_cnt = st_cnt + 1                                                         
        if (mod(st_cnt, 10) = 1 and st_cnt != 1)                                    
            stat = alterlist(reply->antigenlist, st_cnt + 9)                        
        endif                                                                       
        reply->antigenlist[st_cnt]->special_testing_id      = st.special_testing_id     
        reply->antigenlist[st_cnt]->special_testing_cd      = st.special_testing_cd     
        reply->antigenlist[st_cnt]->updt_cnt                = st.updt_cnt               
        reply->antigenlist[st_cnt]->spcl_tst_rsl_updt_cnt   = str.updt_cnt
    endif

foot report                                                                     
    stat = alterlist(reply->antigenlist, st_cnt)                                
    select_ok_ind = 1                                                           

WITH nullreport, nocounter


if (select_ok_ind = 1)
    if (qual_cnt = 0)       ; should be only one active product_rh_phenotype row
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "Z"
             /* process */ , "select product_rh_phenotype"
             /* message */ , concat("ZERO - no active product_rh_phenotype rows for product_id=", cnvtstring(request->product_id,
             32,2))
            )
    elseif (qual_cnt = 1)
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "S"
             /* process */ , "select product_rh_phenotype"
             /* message */ , "SUCCESS"
            )
    else
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "F"
             /* process */ , "select product_rh_phenotype"
             /* message */ , "Multiple active product_rh_phenotype rows.  Cannot retrieve product rh_phenotype"
            )
    endif
else
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "F"
             /* process */ , "select product_rh_phenotype"
             /* message */ , "Select failed.  CCL Error."
            )
endif

go to EXIT_SCRIPT
    
subroutine LOAD_PROCESS_STATUS
    (
     sub_status,
     sub_process,
     sub_message
    )

    set reply->status_data->status = sub_status
    set count1 = count1 + 1
    if (count1 > 1)
        set stat = alter(reply->status_data->subeventstatus, count1+1)
    endif
    set reply->status_data->subeventstatus[count1]->OperationName = sub_process
    set reply->status_data->subeventstatus[count1]->OperationStatus = sub_status
    set reply->status_data->subeventstatus[count1]->TargetObjectName = "bbt_get_product_rh_phenotype"
    set reply->status_data->subeventstatus[count1]->TargetObjectValue = sub_message
END         ; end subroutine LOAD_PROCESS_STATUS


#EXIT_SCRIPT

;call echo(build("status_data->status =", reply->status_data->status))
;for (x = 1 to count1)
;    call echo(reply->status_data->subeventstatus[x]->OperationName)
;    call echo(reply->status_data->subeventstatus[x]->OperationStatus)
;    call echo(reply->status_data->subeventstatus[x]->TargetObjectName)
;    call echo(reply->status_data->subeventstatus[x]->TargetObjectValue)
;endfor
;call echo(" ")
;
;if (qual_cnt > 0)
;    call echo(build(
;        reply->rh_phenotype_id              , "/",
;        reply->fisher_race_disp             , "/", 
;        reply->fr_nomenclature_id           , "/", 
;        reply->wiener_disp                  , "/", 
;        reply->w_nomenclature_id            , "/", 
;        reply->product_rh_phenotype_id       , "/", 
;        reply->updt_cnt                     ))
;        for (st = 1 to st_cnt)
;            call echo(build(st, "....",
;                reply->antigenlist[st]->special_testing_id   , "/",
;                reply->antigenlist[st]->special_testing_cd   , "/",
;                reply->antigenlist[st]->updt_cnt            ))
;        endfor
;endif

END GO

;Generated by GNU enscript 1.6.4.
