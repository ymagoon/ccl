 ;;Solution_Test/script/PathNet -- BB Transfusion/BBT_FOREIGN_SYSTEM_UPLOAD/bbt_add_hist_product.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2001 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************
        Source file name:     BBT_ADD_HIST_PRODUCT.PRG
        Object name:          bbt_add_hist_product
        Request #:            225514

        Product:              Blood Bank Transfusion
        Product Team:         PathNet
        HNA Version:          500
        CCL Version:          4.0

        Program purpose:      Adds transfused and disposed products, associated
        					  events and comments to the bbhist_product,
        					  bbhist_product_event, bbhist_special_testing,
        					  and long_text tables.

        Tables read:          CODE_VALUE, BBHIST_PRODUCT, PRODUCT_INDEX,
        					  PRODUCT_CATEGORY, PERSON, ENCOUNTER,

        Tables updated:       BBHIST_PRODUCT, BBHIST_PRODUCT_EVENT,
        					  BBHIST_SPECIAL_TESTING, LONG_TEXT

        Executing from:		  ESI Server

        Special Notes:        N/A
******************************************************************************/
;~DB~**************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG                *
;    **************************************************************************
;    *                                                                        *
;    *Mod Date     Engineer             Comment                               *
;    *--- -------- -------------------- -----------------------------------   *
;    *000 05/16/01 Chris Noe            Initial Release                       *
;    *001 02/19/02 Chris Noe            CAPEP00043515: Modified duplicate     *
;    *                                  checking functionality to check       *
;    *                                  cnvtupper(request->product_nbr).      *
;    *                                  Modified bbhist_product insert to     *
;    *                                  convert product_nbr and alternate_nbr *
;    *                                  to uppercase before inserting.        *
;    *002 04/15/04 John Rieck           Updated to accept flag characters from*
;    *                                  the feed, and also a product number   *
;    *                                  format code value.                    *
;    *003 09/02/04 John Rieck           Updated to default the product number *
;    *                                  format code value to zero if one was  *
;    *                                  not passed in (i.e. now not required).*
;	 *004 10/25/05 Jeff Wain			Removed formatting of snbr variable to*
;	 *									allow for large sequences.			  *
;    *005 01/10/06 Ronda Zheng          Update to handle uploading of donor products*
;                                       that are in a final disposition status.*
;                                       check for donor products that may have*
;                                       been uploaded previously as part of a *
;                                       transfusion unit upload.              *
;~DE~**************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  **********************

DROP PROGRAM bbt_add_hist_product:dba GO
CREATE PROGRAM bbt_add_hist_product:dba

/******************************************************************************
*       Request record                                                        *
******************************************************************************/
/*
[request]
   active_status_prsnl_id  [Double]
   contributor_system_cd  [Double]
   called_from_script_ind  [Short]
   debug_ind             [Short]
   productlist           [List]
      product_nbr           [String: Fixed=20]
      product_sub_nbr       [String: Fixed=5]
      alternate_nbr         [String: Fixed=20]
      product_cd            [Double]
      cur_supplier_id       [Double]
      manufacturer_id       [Double]
      supplier_prefix       [String: Fixed=5]
      abo_cd                [Double]
      rh_cd                 [Double]
      expire_dt_tm          [Date]
      volume                [Long]
      unit_meas_cd          [Double]
      owner_area_cd         [Double]
      inv_area_cd           [Double]
      pooled_product_nbr    [String: Fixed=20]
      pooled_product_cd     [Double]
      modified_product_nbr  [String: Fixed=20]
      modified_product_sub_nbr  [String: Fixed=5]
      modified_product_cd   [Double]
      pooled_product_ind    [Short]
      modified_product_ind  [Short]
      cross_reference       [String: Variable]
      eventlist             [List]
         person_id             [Double]
         encntr_id             [Double]
         event_type_cd         [Double]
         event_dt_tm           [Date]
         prsnl_id              [Double]
         reason_cd             [Double]
         volume                [Long]
         bag_returned_ind      [Short]
         tag_returned_ind      [Short]
         qty                   [Long]
         international_unit    [Long]
      specialtestinglist    [List]
         special_testing_cd    [Double]
         special_testing_dt_tm  [Date]
         special_testing_prsnl_id  [Double]
      comment               [String: Variable]
      comment_prsnl_id      [Double]
      comment_status_dt_tm  [Date]
      pooled_product_xref   [String: Fixed=40]
      modified_product_xref  [String: Fixed=40]
      segment_nbr           [String: Fixed=25]
      product_prsnl_id      [Double]
      product_status_dt_tm  [Date]
      flag_chars            [String: Fixed=2]
      check_digit           [String: Fixed=1]
      product_nbr_format_cd [Double]
      donor_xref_txt 		[String]
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
RECORD reply
(
%i cclsource:status_block.inc
)

/****************************************************************************
*       Declare and Initialize Variables                                   	*
****************************************************************************/
DECLARE nPRODUCT_COUNT					=	I4		WITH NOCONSTANT(SIZE(request->productlist,5))
DECLARE nEVENT_COUNT					=	I4		WITH NOCONSTANT(0)
DECLARE nSPECIAL_TESTING_COUNT		    = 	I4		WITH NOCONSTANT(0)
DECLARE nPRODUCT_INDEX					=	I4		WITH NOCONSTANT(0)
DECLARE nEVENT_INDEX					=	I4		WITH NOCONSTANT(0)
DECLARE nSPECIAL_TESTING_INDEX		    =	I4		WITH NOCONSTANT(0)
DECLARE sERRORMSG						=	C132	WITH NOCONSTANT(FILLSTRING(132," "))
DECLARE nERROR_CHECK					=	I2		WITH NOCONSTANT(ERROR(sERRORMSG,1))
DECLARE nPRODUCT_CD_CODE_SET			=	I4		WITH CONSTANT(1604)
DECLARE nABO_CD_CODE_SET				=	I4		WITH CONSTANT(1641)
DECLARE nRH_CD_CODE_SET					=	I4		WITH CONSTANT(1642)
DECLARE nEVENT_TYPE_CD_CODE_SET		    =	I4		WITH CONSTANT(1610)
DECLARE nSPECIAL_TESTING_CD_CODE_SET	=	I4		WITH CONSTANT(1612)
DECLARE PROD_NBR_FORMAT_CODE_SET        =   I4      WITH CONSTANT(319570)
DECLARE nOWNER_INV_AREA_CD_CODE_SET	    =	I4		WITH CONSTANT(220)
DECLARE sSCRIPT_NAME					=	C25	    WITH CONSTANT("BBT_PRODUCT_HISTORY_UPLOAD")
DECLARE dPRODUCT_ID						=	F8		WITH NOCONSTANT(0.0)
DECLARE dPRODUCT_EVENT_ID				=	F8		WITH NOCONSTANT(0.0)
DECLARE dBBHIST_SPECIAL_TESTING_ID	    =	F8		WITH NOCONSTANT(0.0)
DECLARE dPERSON_ID						=	F8		WITH NOCONSTANT(0.0)
DECLARE dLONG_TEXT_ID					=	F8		WITH NOCONSTANT(0.0)
DECLARE dPRODUCT_NOTE_ID				=	F8		WITH NOCONSTANT(0.0)
DECLARE dPRODUCT_CLASS_CD				=	F8		WITH NOCONSTANT(0.0)
DECLARE dRED_CELL_IND					=	F8		WITH NOCONSTANT(0.0)
DECLARE nABO_CODE_SET_DISCREP			=	I2		WITH NOCONSTANT(0)
DECLARE nRH_CODE_SET_DISCREP			=	I2		WITH NOCONSTANT(0)
DECLARE sCDF_TRANSFUSED					=	C12	    WITH CONSTANT("7")
DECLARE sCDF_DESTROYED					=	C12	    WITH CONSTANT("14")
DECLARE sCDF_SHIPPED					=	C12	    WITH CONSTANT("15")
DECLARE sCDF_ISBT                       =   C12	    WITH CONSTANT("ISBT")
DECLARE sCDF_NONE                       =   C12	    WITH CONSTANT("NONE")
DECLARE nOWNER_CODE_SET_DISCREP		    =	I2		WITH NOCONSTANT(0)
DECLARE nINV_AREA_CODE_SET_DISCREP	    =	I2		WITH NOCONSTANT(0)
DECLARE dPOOLED_PRODUCT_ID				=	F8		WITH NOCONSTANT(0.0)
DECLARE dMODIFIED_PRODUCT_ID			=	F8		WITH NOCONSTANT(0.0)
DECLARE sFLAG_CHARS                     =   C2      WITH NOCONSTANT(FILLSTRING(2," "))
DECLARE sDonor_XRef_TXT          		=   C40     WITH NOCONSTANT(FILLSTRING(40," "))
DECLARE nUpdate_Donor_XRef_TXT_Ind		=   I2		WITH NOCONSTANT(0)

/****************************************************************************
; DECLARED SUBROUTINES
****************************************************************************/
DECLARE UpdateDonorCrossRef(null)       = NULL


/****************************************************************************
*       Main program processing		                                        *
****************************************************************************/

;Validate contributor_system_cd
IF (request->contributor_system_cd <= 0.0)
	;Uploaded contributor_system_cd is invalid, call ErrorHandler.
	CALL ErrorHandler("F", "CONTRIBUTOR_SYSTEM_CD validation",
	"Contributor system is blank.  Upload canceled, no product data applied.  Please resolve.")
	GO TO EXIT_SCRIPT
ENDIF ;End Validate contributor_system_cd

/****************************************************************************
*       Validate required items within the product list                     *
****************************************************************************/

;Begin loop through productlist.
FOR (nPRODUCT_INDEX = 1 TO nPRODUCT_COUNT)

	;Validate ProductList.cross_reference.  Cross_reference must be > " ".
	IF (SIZE(TRIM(request->productlist[nPRODUCT_INDEX].cross_reference, 3), 1) = 0)
		;Uploaded cross_reference is invalid, call ErrorHandler.
		CALL ErrorHandler("F", "CROSS_REFERENCE validation",
		CONCAT("Cross_reference is blank.  Upload canceled, no product upload data applied.  Please resolve ",
		"for product_nbr: ", request->productlist[nPRODUCT_INDEX].product_nbr,"."))
		GO TO EXIT_SCRIPT
	ENDIF ;End validate ProductList.cross_reference.

	;Validate ProductList.product_nbr.  Product_nbr must > " ".
	IF (SIZE(TRIM(request->productlist[nPRODUCT_INDEX].product_nbr, 3), 1) = 0)
		;Uploaded product_nbr is invalid, call ErrorHandler.
		CALL ErrorHandler("F", "PRODUCT_NBR validation",
		CONCAT("Product_number is blank.  Upload canceled, no product upload data applied.  Please resolve ",
		"for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
		GO TO EXIT_SCRIPT
	ENDIF ;End validate ProductList.product_nbr.

   /********************************************************************************
   *Validate ProductList.product_nbr_format_cd.  If a product_number_format_cd was *
   *passed in, check to see if product_nbr_format_cd exists on the code_value table*
   *and in code_set 319570.                                                        *
   ********************************************************************************/
   IF (request->productlist[nPRODUCT_INDEX].product_nbr_format_cd > 0.0)
      SELECT INTO "nl:"
         cv.code_value
         , cv.code_set
   
      FROM
         code_value cv
   
      PLAN cv WHERE
           cv.code_value = request->productlist[nPRODUCT_INDEX].product_nbr_format_cd AND
           cv.code_set = PROD_NBR_FORMAT_CODE_SET AND
           cv.active_ind = 1
   
      WITH NOCOUNTER
   
      SET nERROR_CHECK = ERROR(sERRORMSG,0)
   
      ;Check for CCL error.
      IF (nERROR_CHECK = 0)
         ;Check to see if rows were returned.
         IF (CURQUAL = 0)
            ;No rows returned, call ErrorHandler.
            CALL ErrorHandler("F", "PRODUCT_NBR_FORMAT_CD validation",
            CONCAT("Product number format is invalid.  Upload canceled, no product upload data applied.  Please resolve ",
                   "for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
            GO TO EXIT_SCRIPT
         ENDIF ;End check if rows returned.
      ELSE
         ;CCL error returned, call ErrorHandler.
         CALL ErrorHandler("F", "Validate product_nbr_format_cd.", sERRORMSG)
         GO TO EXIT_SCRIPT
      ENDIF ;End check for CCL Errors.
   	
      ; Determine if the flag characters should be filled out.
      SET sFLAG_CHARS = FILLSTRING(2," ")
   	
      IF (uar_get_code_meaning(request->productlist[nPRODUCT_INDEX].product_nbr_format_cd) = sCDF_ISBT)
         IF (size(trim(request->productlist[nPRODUCT_INDEX].flag_chars)) > 0)
            SET sFLAG_CHARS = request->productlist[nPRODUCT_INDEX].flag_chars
         ELSE
            SET sFLAG_CHARS = "00"
         ENDIF
      ENDIF
   ENDIF
	
	/********************************************************************************
	*Validate ProductList.product_cd.  Product_cd must be > 0.						*
	*Check to see if product_cd exists on the code_value table and in code_set 1604.*
	*Get product_class_cd for the uploaded product_cd.								*
	********************************************************************************/
	SET dPRODUCT_CLASS_CD = 0.0
	SET dRED_CELL_IND = 1

	SELECT INTO "nl:"
		cv.code_value
		, cv.code_set
		, pi.product_class_cd
		, pc.red_cell_product_ind

	FROM
		code_value cv,
		product_index pi,
		product_category pc

	PLAN cv WHERE
		cv.code_value = request->productlist[nPRODUCT_INDEX].product_cd AND
		cv.code_set = nPRODUCT_CD_CODE_SET AND
		cv.active_ind = 1

	JOIN pi WHERE
		pi.product_cd = cv.code_value

	JOIN pc WHERE
		pc.product_cat_cd = pi.product_cat_cd

	DETAIL
		dPRODUCT_CLASS_CD = pi.product_class_cd
		dRED_CELL_IND = pc.red_cell_product_ind

	WITH NOCOUNTER

	SET nERROR_CHECK = ERROR(sERRORMSG,0)

	;Check for CCL error.
	IF (nERROR_CHECK = 0)
   		;Check to see if rows were returned.
   		IF (CURQUAL = 0)
   			;No rows returned, call ErrorHandler.
   			CALL ErrorHandler("F", "PRODUCT_CD validation",
   			CONCAT("Product_type is blank.  Upload canceled, no product upload data applied.  Please resolve ",
   			"for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   			GO TO EXIT_SCRIPT
   		ENDIF ;End check if rows returned.
	ELSE
		;CCL error returned, call ErrorHandler.
		CALL ErrorHandler("F", "Validate product_cd.", sERRORMSG)
		GO TO EXIT_SCRIPT
	ENDIF ;End check for CCL Errors.

	;Validate ProductList.cur_supplier_id.  Cur_supplier_id must be > 0.
	IF (request->productlist[nPRODUCT_INDEX].cur_supplier_id <= 0.0)
		;Uploaded cur_supplier_id is invalid, call ErrorHandler.
		CALL ErrorHandler("F", "CUR_SUPPLIER_ID validation",
		CONCAT("Product supplier is blank.  Upload canceled, no product upload data applied.  Please resolve ",
		"for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
		GO TO EXIT_SCRIPT
	ENDIF ;End validate Productlist.cur_supplier_id.

	;Validate ProductList.expire_dt_tm.  Expire_dt_tm cannot be NULL or = to 0.
	IF ((request->productlist[nPRODUCT_INDEX].expire_dt_tm = NULL) OR
		(request->productlist[nPRODUCT_INDEX].expire_dt_tm = 0))
		;Uploaded expire_dt_tm is invalid, call ErrorHandler.
		CALL ErrorHandler("F", "EXPIRE_DT_TM validation",
		CONCAT("Product expiration date and time is blank.  Upload canceled, no product upload data applied.",
		"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
		GO TO EXIT_SCRIPT
	ENDIF ;End validate Productlist.expire_dt_tm.

	/****************************************************************************
	* Validate ProductList.abo_cd and ProductList.rh_cd							*
	/***************************************************************************/
	;Set discrepancy indicators to 1.
	SET nABO_CODE_SET_DISCREP = 1
	SET nRH_CODE_SET_DISCREP = 1

	;Check to see if the uploaded product is a Red Cell product.
	IF (dRED_CELL_IND = 1)
		;Validate that the ABO_CD and RH_CD are greater than 0 if the product is a red cell.
		;Check to see if rh_cd and abo_cd exist on the code_value table and in code_set 1642 and 1641.
		SELECT INTO "nl:"
			cv.code_value
			, cv.code_set

		FROM
			code_value cv

		PLAN cv WHERE
			cv.code_value IN (request->productlist[nPRODUCT_INDEX].abo_cd, request->productlist[nPRODUCT_INDEX].rh_cd) AND
			cv.code_set IN (nABO_CD_CODE_SET, nRH_CD_CODE_SET) AND
			cv.active_ind = 1

		DETAIL
			;Verify that abo_cd is on the code_value table and in code_set 1641.
			IF (cv.code_value = (request->productlist[nPRODUCT_INDEX].abo_cd))
				IF (cv.code_set = nABO_CD_CODE_SET)
					;Code_values match abo_cd, set discrepancy indicator to 0.
					nABO_CODE_SET_DISCREP = 0
				ENDIF
			ENDIF

			;Verify that rh_cd is on the code_value table and in code_set 1642.
			IF (cv.code_value = (request->productlist[nPRODUCT_INDEX].rh_cd))
				IF (cv.code_set = nRH_CD_CODE_SET)
					;Code_values match rh_cd, set discrepancy indicator to 0.
					nRH_CODE_SET_DISCREP = 0
				ENDIF
			ENDIF

		WITH NOCOUNTER

		SET nERROR_CHECK = ERROR(sERRORMSG,0)

		;Check for CCL error.
		IF (nERROR_CHECK = 0)

   			;Check to see that rows were returned.
   			IF (CURQUAL = 0)
   				;No rows returned, call ErrorHandler.
   				CALL ErrorHandler("F", "ABO_CD/RH_CD validation",
   				CONCAT("ABO_cd or rh_cd not found on code_set 1641 or 1642.  Please resolve for ",
   				"cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   				GO TO EXIT_SCRIPT

   			;Rows returned, verify that abo_cd was valid.
   			ELSEIF (nABO_CODE_SET_DISCREP = 1)
   				;Uploaded abo_cd is invalid, call ErrorHandler.
   				CALL ErrorHandler("F", "ABO_CD validation",
   				CONCAT("ABO_CD not found in code_set 1641.  Please resolve for ",
   				"cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   				GO TO EXIT_SCRIPT

      		;Rows returned, verify that rh_cd was valid.
      		ELSEIF (nRH_CODE_SET_DISCREP = 1)
   				;Uploaded rh_cd is invalid, call ErrorHandler.
   				CALL ErrorHandler("F", "RH_CD validation",
   				CONCAT("Rh_cd not found in code_set 1642.  Please resolve for ",
   				"cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   				GO TO EXIT_SCRIPT

   			ENDIF ;End curqual check.

		ELSE
   			;CCL error returned, call ErrorHandler.
   			CALL ErrorHandler("F", "Validate ABO/Rh.", sERRORMSG)
   			GO TO EXIT_SCRIPT

		ENDIF ;End CCL error check.

	ENDIF ;End check if product is a red cell.
	/****************************************************************************
	* End validate ProductList.abo_cd and ProductList.rh_cd						*
	/***************************************************************************/

	/****************************************************************************
	*       Validate required items within the event list                       *
	****************************************************************************/
	;Set nEVENT_COUNT = to the number of events in the event list.
	SET nEVENT_COUNT = SIZE(request->productlist[nPRODUCT_INDEX].eventlist,5)

	;Begin loop through eventlist.
	FOR (nEVENT_INDEX = 1 TO nEVENT_COUNT)

		/****************************************************************************************
		* Validate ProductList.EventList.event_type_cd.  Check to see if event_type_cd exists	*
		* on the code_value table, in code_set 1610, and has a CDF_MEANING of 7 or 14.			*
		****************************************************************************************/
		SELECT INTO "nl:"
			cv.code_value
			, cv.code_set
			, cv.cdf_meaning

		FROM
			code_value cv

		PLAN cv WHERE
			cv.code_value = (request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].event_type_cd) AND
			cv.code_set = nEVENT_TYPE_CD_CODE_SET AND
			cv.cdf_meaning IN (sCDF_TRANSFUSED, sCDF_DESTROYED, sCDF_SHIPPED) AND
			cv.active_ind = 1

		WITH NOCOUNTER

		SET nERROR_CHECK = ERROR(sERRORMSG,0)
		
		;Check for CCL error.
		IF (nERROR_CHECK = 0)
   			;Check for rows returned.
   			IF (CURQUAL = 0)
   				;No rows returned, call ErrorHandler.
   				CALL ErrorHandler("F", "EVENT_TYPE_CD validation",
					CONCAT("Product event is blank.  Upload canceled, no product upload data applied.  ",
		   			"Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   				GO TO EXIT_SCRIPT
   			ENDIF ;End curqual check.
		ELSE
			;CCL error returned, call ErrorHandler.
			CALL ErrorHandler("F", "Validate event_type_cd.", sERRORMSG)
			GO TO EXIT_SCRIPT
		ENDIF ;End CCL error check.
		/****************************************************************************
		* End validate Productlist.Eventlist.event_type_cd							*
		****************************************************************************/

		/************************************************************************************
		;Validate ProductList.EventList.event_dt_tm.  Event_dt_tm cannot be NULL or = to 0.	*
		************************************************************************************/
		IF ((request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].event_dt_tm = NULL) OR
			(request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].event_dt_tm = 0))
			;Event_dt_tm is NULL or 0, call ErrorHandler.
			CALL ErrorHandler("F", "EVENT_DT_TM validation",
			CONCAT("Product event date and time is blank.  Upload canceled, no product upload data applied.",
			"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
			GO TO EXIT_SCRIPT
		ENDIF ;End ProductList.EventList.event_dt_tm validation.

		/****************************************************************************
		*       Cross validate items within the product list.eventlist              *
		****************************************************************************/
		;Cross validate person_id if it is > 0.
		IF (request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].person_id > 0)

			;Check to see if uploaded person_id is on the PERSON table.
			SELECT INTO "nl:"
				p.person_id

			FROM person p

			PLAN p WHERE p.person_id = (request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].person_id)

			WITH NOCOUNTER

			SET nERROR_CHECK = ERROR(sERRORMSG,0)

			;Check for CCL error.
			IF (nERROR_CHECK = 0)

   				;Check for rows returned.
   				IF (CURQUAL = 0)
   					;No rows returned, call ErrorHandler.
   					CALL ErrorHandler("F", "PERSON_ID cross validation",
   					CONCAT("Person_ID does not exist on the Person table.",
					"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   					GO TO EXIT_SCRIPT
   				ENDIF ;End curqual check.

			ELSE
				;CCL errors returned, call ErrorHandler.
				CALL ErrorHandler("F", "Validate person_id.", sERRORMSG)
				GO TO EXIT_SCRIPT

			ENDIF ;End CCL error check.

		ENDIF ;End person_id cross validation.

		/****************************************************************************
		*Cross validate encntr_id if it is > 0.										*
		****************************************************************************/
		SET dPERSON_ID = 0.0

		IF (request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].encntr_id > 0)

			;Check to see if the uploaded encntr_id is on the ENCOUNTER table.
			SELECT INTO "nl:"
				e.encntr_id
				, e.person_id

			FROM encounter e

			PLAN e WHERE
				e.encntr_id = (request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].encntr_id)
				AND
				(request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].person_id > 0.0
					AND e.person_id = request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].person_id)

			DETAIL
				dPERSON_ID = e.person_id

			WITH NOCOUNTER

			SET nERROR_CHECK = ERROR(sERRORMSG,0)

			;Check for CCL errors.
			IF (nERROR_CHECK = 0)
   				;Check for rows returned.
   				IF (CURQUAL = 0)
   					;No rows returned, call ErrorHandler.
   					CALL ErrorHandler("F", "ENCNTR_ID cross validation",
   					CONCAT("Encntr_id does not exist on the Encounter table.",
   					"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   					GO TO EXIT_SCRIPT
   				ENDIF ;End curqual check.
			ELSE
   				;CCL errors returned, call ErrorHandler.
   				CALL ErrorHandler("F", "Validate encntr_id.", sERRORMSG)
   				GO TO EXIT_SCRIPT
			ENDIF ;End check for CCL errors.

		ENDIF ;End encntr_id cross validation.

		/****************************************************************************
		*       End: Cross validate items within the productlist.eventlist          *
		****************************************************************************/

	ENDFOR ;End loop through eventlist.

	/****************************************************************************
	*       Validate items within the special testing list			            *
	****************************************************************************/
	;Set nSPECIAL_TESTING_COUNT = to the number of items in the specialtestinglist.
	SET nSPECIAL_TESTING_COUNT = SIZE(request->productlist[nPRODUCT_INDEX].specialtestinglist,5)

	;Begin loop through specialtestinglist.
	FOR (nSPECIAL_TESTING_INDEX = 1 TO nSPECIAL_TESTING_COUNT)
	
		;Validate ProductList.SpecialTestingList.special_testing_cd.  Special_tesing_cd must be > 0.
		;Check to see if special_testing_cd exists on the CODE_VALUE table and is in code_set 1612.
		SELECT INTO "nl:"
			cv.code_value
			, cv.code_set

		FROM
			code_value cv

		PLAN cv WHERE
			cv.code_value = (request->productlist[nPRODUCT_INDEX].specialtestinglist[nSPECIAL_TESTING_INDEX].special_testing_cd)
			AND
			cv.code_set = nSPECIAL_TESTING_CD_CODE_SET
			AND
			cv.active_ind = 1

		WITH NOCOUNTER

		SET nERROR_CHECK = ERROR(sERRORMSG,0)

		;Check for CCL errors.
		IF (nERROR_CHECK = 0)
   			;Check for rows returned.
   			IF (CURQUAL = 0)
   				;No rows returned, call ErrorHandler.
   				CALL ErrorHandler("F", "SPECIAL_TESTING_CD select",
   				CONCAT("Special_testing_cd does not exist on the code value table or is not in code_set 1612.",
   				"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   				GO TO EXIT_SCRIPT
   			ENDIF ;End curqual check.
		ELSE
			;CCL errors returned, call ErrorHandler.
			CALL ErrorHandler("F", "Validate special_testing_cd.", sERRORMSG)
			GO TO EXIT_SCRIPT
		ENDIF ;End CCL error check.

	ENDFOR ;End loop through specialtestinglist.

	/****************************************************************************
	*       Cross validate items within the product list.				        *
	****************************************************************************/
	;Set discrepancy indicators to 1.
	SET nOWNER_CODE_SET_DISCREP = 1
	SET nINV_AREA_CODE_SET_DISCREP = 1

	/**************************************************************************************
	;Cross validate ProductList.owner_area_cd and ProductList.inv_area_cd if they are > 0.*
	**************************************************************************************/
	IF ((request->productlist[nPRODUCT_INDEX].owner_area_cd > 0) AND
		(request->productlist[nPRODUCT_INDEX].inv_area_cd > 0))
		;Check to see that owner_area_cd and inv_area_cd exist on the CODE_VALUE table and that they are in code_set 220.
		;Validate relationship between owner_area_cd and location_group.parent_loc_cd.
		;Validate relationship between inv_area_cd and location_group.child_loc_cd.
		SELECT INTO "nl:"
			cv.code_value
			, cv.code_set

		FROM
			code_value cv,
			location_group lg

		PLAN cv WHERE
			cv.code_value IN
			(request->productlist[nPRODUCT_INDEX].owner_area_cd, request->productlist[nPRODUCT_INDEX].inv_area_cd)
			AND
			cv.code_set = nOWNER_INV_AREA_CD_CODE_SET
			AND
			cv.active_ind = 1

		JOIN lg WHERE
			lg.parent_loc_cd = request->productlist[nPRODUCT_INDEX].owner_area_cd AND
			lg.child_loc_cd = request->productlist[nPRODUCT_INDEX].inv_area_cd

		DETAIL
			;Verify that owner_area_cd is on code_value table and in code_set 220.
			IF (cv.code_value = (request->productlist[nPRODUCT_INDEX].owner_area_cd))
				IF (cv.code_set = nOWNER_INV_AREA_CD_CODE_SET)
					;Code_values match owner_area_cd, set discrepancy indicator to 0.
					nOWNER_CODE_SET_DISCREP = 0
				ENDIF
			ENDIF

			;Verify that inv_area_cd is on code_value table and in code_set 220.
			IF (cv.code_value = (request->productlist[nPRODUCT_INDEX].inv_area_cd))
				IF (cv.code_set = nOWNER_INV_AREA_CD_CODE_SET)
					;Code_values match owner_inv_area_cd, set discrepancy indicator to 0.
					nINV_AREA_CODE_SET_DISCREP = 0
				ENDIF
			ENDIF

		WITH NOCOUNTER

		SET nERROR_CHECK = ERROR(sERRORMSG,0)

			;Check for CCL errors.
			IF (nERROR_CHECK = 0)
   				;Check for rows returned.
   				IF (CURQUAL = 0)
   					;No rows returned, call ErrorHandler.
   					CALL ErrorHandler("F", "OWNER_AREA_CD cross validation",
   					CONCAT("Owner_area_cd or inv_area_cd not found on code_set 220.",
   					"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   					GO TO EXIT_SCRIPT
   				;Rows returned, verify that owner_area_cd was valid.
   				ELSEIF (nOWNER_CODE_SET_DISCREP = 1)
   					;Uploaded owner_area_cd is invalid, call ErrorHandler.
   					CALL ErrorHandler("F", "OWNER_AREA_CD cross validation",
   					CONCAT("Owner_area_cd not found in code_set 220.",
   					"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   					GO TO EXIT_SCRIPT
   				;Rows returned, verify that inv_area_cd was valid.
   				ELSEIF (nINV_AREA_CODE_SET_DISCREP = 1)
   					;Uploaded inv_area_cd is invalid, call ErrorHandler.
   					CALL ErrorHandler("F", "INV_AREA_CD cross validation",
   					CONCAT("Inv_area_cd not found in code_set 220.",
   					"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
   					GO TO EXIT_SCRIPT
   				ENDIF ;End curqual check.
			ELSE
				;CCL error returned, call ErrorHandler.
				CALL ErrorHandler("F", "Validate owner/inv_area_cd.", sERRORMSG)
				GO TO EXIT_SCRIPT
			ENDIF ;End CCL error check.

	ELSEIF ((request->productlist[nPRODUCT_INDEX].owner_area_cd > 0) AND
			(request->productlist[nPRODUCT_INDEX].inv_area_cd <= 0))
		;Owner_area_cd > 0 but inv_area_cd !> 0, call ErrorHandler.
		CALL ErrorHandler("F", "INV_AREA_CD cross validation",
		CONCAT("Inventory area is blank.  Upload canceled, no product data applied.  Please resolve",
		" for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
		GO TO EXIT_SCRIPT

	ELSEIF ((request->productlist[nPRODUCT_INDEX].inv_area_cd > 0) AND
			(request->productlist[nPRODUCT_INDEX].owner_area_cd <= 0))
		;Inv_area_cd > 0 but owner_area_cd !> 0, call ErrorHandler.
		CALL ErrorHandler("F", "OWNER_AREA_CD cross validation",
		CONCAT("Owner area is blank.  Upload canceled, no product data applied.  Please resolve",
		" for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
		GO TO EXIT_SCRIPT

	ENDIF ;End inv_area_cd and owner_area_cd cross validation.

	/**********************************************************************************
	*   Check for duplicate cross_reference within the current contributor_system_cd  *
	**********************************************************************************/
	SELECT INTO "nl:"
		bp.product_id

	FROM
		bbhist_product bp

	PLAN bp WHERE
		bp.cross_reference = (request->productlist[nPRODUCT_INDEX].cross_reference) AND
		bp.contributor_system_cd = (request->contributor_system_cd)
		
	DETAIL
		sDonor_XRef_TXT = bp.donor_xref_txt

	SET nERROR_CHECK = ERROR(sERRORMSG,0)

	;Check for CCL errors.
	IF (nERROR_CHECK = 0)
		;Check for rows returned.
		IF (CURQUAL > 0)
			;Rows returned, cross_reference and contributor_system code already exist on the bbhist_product table,
			;compare donor_xref_txt field to product's donor_xref_txt. 
			IF (SIZE(TRIM(request->productlist[nPRODUCT_INDEX].donor_xref_txt, 3), 1) = 0)
			    ;Request doesn't have donor cross reference info, treat the product as a transfusion product.
			    ;cross_reference and contributor_system code already exist on the bbhist_product table. 
			    ;Call duplicate error handle.
				CALL ErrorHandler("F", "Duplicate check select.",
				CONCAT("Cross-reference number is a duplicate for this contributor code.  Duplicate product.",
	 			"  Upload canceled, no product data applied.  Please resolve",
	 			" for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
	 			GO TO EXIT_SCRIPT
	 		ELSE
	 			;Request has donor_xref_txt info. Check if the donor_xref_txt exists on bbhist_product table.
	 			IF (SIZE(TRIM(sDonor_XRef_TXT, 3), 1) = 0)
	 				;donor_xref_txt doesn't exist on bbhist_product table. Update the donor_xref_txt columns only.
	 				SET nUpdate_Donor_XRef_TXT_Ind = 1
	 			ELSE
		 			;donor_xref_txt exists on bbhist_product table. Check if it is the same as product's donor_xref_txt.
	 				IF (TRIM(sDonor_XRef_TXT, 3) = 
	 					TRIM(request->productlist[nPRODUCT_INDEX].donor_xref_txt, 3))
						;donor_xref_txt on bbhist_product table matches product donor_xref_txt. 
						;Log an error message.
						CALL ErrorHandler("F", "Duplicate check select.",
						CONCAT("Donor_XRef_TXT number is a duplicate for this contributor code.  Duplicate product.",
			 			"  Upload canceled, no product data applied.  Please resolve",
			 			" for donor_xref_txt: ", request->productlist[nPRODUCT_INDEX].donor_xref_txt,"."))
			 			GO TO EXIT_SCRIPT
			 		ELSE
			 			;donor_xref_txt on bbhist_product table doesn't match product donor_xref_txt. 
						;Log an error message.
						CALL ErrorHandler("F", "Duplicate check select.",
						CONCAT("Donor_XRef_TXT number doesn't match this contributor code. ",
			 			"  Upload canceled, no product data applied.  Please resolve",
			 			" for donor_xref_txt: ", request->productlist[nPRODUCT_INDEX].donor_xref_txt,"."))
			 			GO TO EXIT_SCRIPT
			 		ENDIF
	 			ENDIF				
	 		ENDIF
      	ENDIF ;End curqual check.
	ELSE
   		;CCL errors returned, call ErrorHandler.
   		CALL ErrorHandler("F", "Duplicate checking.", sERRORMSG)
   		GO TO EXIT_SCRIPT
	ENDIF ;End CCL error check.  End of duplicate cross_reference and contributor_system_cd check.

	/***********************************************************************
	*   Perform duplicate checking				                           *
	***********************************************************************/
	SELECT INTO "nl:"
		bp.cross_reference
		, bp.product_nbr
		, bp.product_sub_nbr
		, bp.product_cd
		, bp.supplier_id
		, bp.supplier_prefix
		, bp.owner_area_cd
		, bp.inv_area_cd
		, bp.contributor_system_cd
		, bp.donor_xref_txt

	FROM
		bbhist_product bp

	PLAN bp WHERE
		bp.cross_reference = (request->productlist[nPRODUCT_INDEX].cross_reference) AND
		bp.product_nbr = (CNVTUPPER(request->productlist[nPRODUCT_INDEX].product_nbr)) AND
		bp.product_sub_nbr = (request->productlist[nPRODUCT_INDEX].product_sub_nbr) AND
		bp.product_cd = (request->productlist[nPRODUCT_INDEX].product_cd) AND
		bp.supplier_id = (request->productlist[nPRODUCT_INDEX].cur_supplier_id) AND
		bp.supplier_prefix = (request->productlist[nPRODUCT_INDEX].supplier_prefix) AND
		bp.owner_area_cd = (request->productlist[nPRODUCT_INDEX].owner_area_cd) AND
		bp.inv_area_cd = (request->productlist[nPRODUCT_INDEX].inv_area_cd) AND
		bp.contributor_system_cd = (request->contributor_system_cd) AND
		bp.donor_xref_txt = (request->productlist[nPRODUCT_INDEX].donor_xref_txt)
		
	WITH NOCOUNTER

	SET nERROR_CHECK = ERROR(sERRORMSG,0)

	;Check for CCL errors.
	IF (nERROR_CHECK = 0)
		;Check for rows returned.
		IF (CURQUAL > 0)
			;Rows returned, all fields already exist on the bbhist_product table, duplicate product.
			;Call ErrorHandler.
			CALL ErrorHandler("F", "Duplicate check.",
								CONCAT("Duplicate product.  Upload canceled, no product data applied.  Please resolve",
								" for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
			GO TO EXIT_SCRIPT
		ENDIF ;End curqual check.
	ELSE
   		;CCL errors returned, call ErrorHandler.
   		CALL ErrorHandler("F", "Duplicate check", sERRORMSG)
   		GO TO EXIT_SCRIPT
	ENDIF ;End CCL error check.

	/***********************************************************************
	*   Validation of pooled and modified products                         *
	***********************************************************************/

	;Check for a value in the uploaded pooled_product_xref.
	IF (SIZE(TRIM(request->productlist[nPRODUCT_INDEX].pooled_product_xref, 3), 1) > 0)
		SET dPOOLED_PRODUCT_ID = 0.0

		SELECT INTO "nl:"
			bp.cross_reference
			, bp.contributor_system_cd
			, bp.product_id

		FROM
			bbhist_product bp

		PLAN bp WHERE
			bp.cross_reference = (request->productlist[nPRODUCT_INDEX].pooled_product_xref) AND
			bp.contributor_system_cd = request->contributor_system_cd

		DETAIL
			dPOOLED_PRODUCT_ID = bp.product_id

		WITH NOCOUNTER

		SET nERROR_CHECK = ERROR(sERRORMSG,0)

		;Check for CCL errors.
		IF (nERROR_CHECK = 0)
			;Check for rows returned.
			IF (CURQUAL = 0)
				;No rows returned, call ErrorHandler
				CALL ErrorHandler("F", "Pooled product validation",
				CONCAT("Pooled_product_xref does not match any uploaded parent product's cross_reference.",
				"  Please resolve for product_nbr: ", request->productlist[nPRODUCT_INDEX].product_nbr,"."))
				GO TO EXIT_SCRIPT
			ENDIF ;End curqual check.
		ELSE
			;CCL errors returned, call ErrorHandler.
  			CALL ErrorHandler("F", "Pooled product check", sERRORMSG)
  			GO TO EXIT_SCRIPT
   		ENDIF ;End CCL error check
	ENDIF ;End of pooled_product_xref check.

	;Check for a value in the uploaded modified_product_xref.
	IF (SIZE(TRIM(request->productlist[nPRODUCT_INDEX].modified_product_xref, 3), 1) > 0)
		SET dMODIFIED_PRODUCT_ID = 0.0

		SELECT INTO "nl:"
			bp.cross_reference
			, bp.contributor_system_cd
			, bp.product_id

		FROM
			bbhist_product bp

		PLAN bp WHERE
			bp.cross_reference = (request->productlist[nPRODUCT_INDEX].modified_product_xref) AND
			bp.contributor_system_cd = request->contributor_system_cd

		DETAIL
			dMODIFIED_PRODUCT_ID = bp.product_id

		WITH NOCOUNTER

		SET nERROR_CHECK = ERROR(sERRORMSG,0)

		;Check for CCL errors.
		IF (nERROR_CHECK = 0)
			;Check for rows returned.
			IF (CURQUAL = 0)
				;No rows returned, call ErrorHandler.
				CALL ErrorHandler("F", "Modified_product_id validation",
				CONCAT("Modified_product_xref does not match any uploaded parent product's cross_reference.",
				"  Please resolve for product_nbr: ", request->productlist[nPRODUCT_INDEX].product_nbr,"."))
				GO TO EXIT_SCRIPT
			ENDIF ;End curqual check.
		ELSE
   			;CCL errors returned, call ErrorHandler.
   			CALL ErrorHandler("F", "Modified product check", sERRORMSG)
   			GO TO EXIT_SCRIPT
		ENDIF ;End CCL error check.
	ENDIF ;End of modified_product_xref check.
	/****************************************************
	;END Validation of pooled and modified products		*
	****************************************************/

IF (nUpdate_Donor_XRef_TXT_Ind = 0)
	/***********************************************************************
	*   Get unique sequence number for product_id                          *
	***********************************************************************/
	SELECT INTO "nl:"
		snbr = seq(blood_bank_seq,nextval)

	FROM dual

	DETAIL
		;Set product_id = unique product_id retrieved from the blood_bank_seq.
		dPRODUCT_ID = snbr

	WITH FORMAT, NOCOUNTER

	SET nERROR_CHECK = ERROR(sERRORMSG,0)

	;Check for CCL errors.
	IF (nERROR_CHECK = 0)
		;Check for rows returned.
		IF (CURQUAL = 0)
			;No rows returned, call ErrorHandler.
			CALL ErrorHandler("F", "Get unique product_id",
			"Unable to retrieve unique product_id.")
			GO TO EXIT_SCRIPT
      	ENDIF ;End curqual check.
	ELSE
   		;CCL errors returned, call ErrorHandler.
   		CALL ErrorHandler("F", "Get unique product_id", sERRORMSG)
   		GO TO EXIT_SCRIPT
	ENDIF ;End CCL error check.

	/***********************************************************************
	*   BBHIST_PRODUCT insert statement			                           *
	***********************************************************************/
	INSERT INTO bbhist_product bp

	SET	bp.product_id				=	dPRODUCT_ID
		, bp.product_nbr			=	CNVTUPPER(request->productlist[nPRODUCT_INDEX].product_nbr)
		, bp.product_sub_nbr		=	request->productlist[nPRODUCT_INDEX].product_sub_nbr
		, bp.alternate_nbr			=	CNVTUPPER(request->productlist[nPRODUCT_INDEX].alternate_nbr)
		, bp.product_cd				=	request->productlist[nPRODUCT_INDEX].product_cd
		, bp.product_class_cd		=	dPRODUCT_CLASS_CD
		, bp.supplier_id			=	request->productlist[nPRODUCT_INDEX].cur_supplier_id
		, bp.supplier_prefix		=	request->productlist[nPRODUCT_INDEX].supplier_prefix
		, bp.abo_cd					=	request->productlist[nPRODUCT_INDEX].abo_cd
		, bp.rh_cd					=	request->productlist[nPRODUCT_INDEX].rh_cd
		, bp.expire_dt_tm			=	CNVTDATETIME(request->productlist[nPRODUCT_INDEX].expire_dt_tm)
		, bp.volume					=	request->productlist[nPRODUCT_INDEX].volume
		, bp.unit_meas_cd			=	request->productlist[nPRODUCT_INDEX].unit_meas_cd
		, bp.owner_area_cd			=	request->productlist[nPRODUCT_INDEX].owner_area_cd
		, bp.inv_area_cd			=	request->productlist[nPRODUCT_INDEX].inv_area_cd
		, bp.pooled_product_id		=	dPOOLED_PRODUCT_ID
		, bp.modified_product_id	=	dMODIFIED_PRODUCT_ID
		, bp.pooled_product_ind		=	request->productlist[nPRODUCT_INDEX].pooled_product_ind
		, bp.modified_product_ind	=	request->productlist[nPRODUCT_INDEX].modified_product_ind
		, bp.cross_reference		=	request->productlist[nPRODUCT_INDEX].cross_reference
		, bp.contributor_system_cd	=	request->contributor_system_cd
		, bp.upload_dt_tm			=	CNVTDATETIME(CURDATE,CURTIME3)
		, bp.active_ind				=	1
		, bp.active_status_cd		=	reqdata->active_status_cd
		, bp.active_status_dt_tm	=	IF (request->productlist[nPRODUCT_INDEX].product_status_dt_tm > 0)
											CNVTDATETIME(request->productlist[nPRODUCT_INDEX].product_status_dt_tm)
										ELSE
											CNVTDATETIME(CURDATE,CURTIME3)
										ENDIF
		, bp.active_status_prsnl_id	=	IF (request->productlist[nPRODUCT_INDEX].product_prsnl_id > 0)
											request->productlist[nPRODUCT_INDEX].product_prsnl_id
										ELSE
											request->active_status_prsnl_id
										ENDIF
		, bp.updt_cnt               = 	0
		, bp.updt_dt_tm             = 	CNVTDATETIME(CURDATE,CURTIME3)
		, bp.updt_id                = 	reqinfo->updt_id
		, bp.updt_task              = 	reqinfo->updt_task
		, bp.updt_applctx           = 	reqinfo->updt_applctx
		, bp.flag_chars             = sFLAG_CHARS
		, bp.product_nbr_format_cd  = request->productlist[nPRODUCT_INDEX].product_nbr_format_cd
		, bp.donor_xref_txt  		= request->productlist[nPRODUCT_INDEX].donor_xref_txt

	WITH NOCOUNTER

	/***********************************************************************
	*   BBHIST_PRODUCT insert error check		                           *
	***********************************************************************/
	SET nERROR_CHECK = ERROR(sERRORMSG,0)

	;Check for CCL errors.
	IF (nERROR_CHECK = 0)
		;Check to see if rows were inserted.
		IF (CURQUAL = 0)
			;No rows inserted, call ErrorHandler.
			CALL ErrorHandler("F", "BBHIST_PRODUCT insert",
			CONCAT("Insert into BBHIST_PRODUCT table failed.",
			"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
			GO TO EXIT_SCRIPT
      	ENDIF ;End curqual check.
	ELSE
   		;CCL errors returned, call ErrorHandler.
   		CALL ErrorHandler("F", "BBHIST_PRODUCT insert", sERRORMSG)
   		GO TO EXIT_SCRIPT
	ENDIF ;End CCL error check.
   
ELSE
	;Only update donor_xref_txt field on bbhist_product table. Don't need to process the product events.
	CALL UpdateDonorCrossRef(null)
	SET reply->status_data.status = "S"
	GO TO EXIT_SCRIPT
	
ENDIF

	/***********************************************************************
	*   Begin FOR loop through the eventlist			                   *
	***********************************************************************/
	FOR (nEVENT_INDEX = 1 TO nEVENT_COUNT)

		;Get unique sequence number for product_event_id
		SELECT INTO "nl:"
			snbr = seq(pathnet_seq,nextval)

		FROM dual

		DETAIL
			;Set product_event_id = unique product_event_id retrieved from the pathnet_seq.
			dPRODUCT_EVENT_ID = snbr

		WITH FORMAT, COUNTER

		SET nERROR_CHECK = ERROR(sERRORMSG,0)

		;Check for CCL errors.
		IF (nERROR_CHECK = 0)
			;Check for rows returned.
			IF (CURQUAL = 0)
				;No rows returned, call ErrorHandler.
				CALL ErrorHandler("F", "Get unique product_event_id",
				"Unable to retrieve unique product_event_id.")
				GO TO EXIT_SCRIPT
      		ENDIF ;End curqual check.
		ELSE
   			;CCL errors returned, call ErrorHandler.
   			CALL ErrorHandler("F", "Get unique product_event_id", sERRORMSG)
   			GO TO EXIT_SCRIPT
		ENDIF ;End CCL error check.

		/***********************************************************************
		*   	BBHIST_PRODUCT_EVENT insert statement		                   *
		***********************************************************************/
		INSERT INTO bbhist_product_event bpe

		SET bpe.product_event_id		=	dPRODUCT_EVENT_ID
			, bpe.product_id				=	dPRODUCT_ID
			, bpe.person_id				=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].person_id
			, bpe.encntr_id				=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].encntr_id
			, bpe.event_type_cd			=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].event_type_cd
			, bpe.event_dt_tm				=	CNVTDATETIME(request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].event_dt_tm)
			, bpe.prsnl_id				=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].prsnl_id
			, bpe.reason_cd				=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].reason_cd
			, bpe.volume					=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].volume
			, bpe.bag_returned_ind		=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].bag_returned_ind
			, bpe.tag_returned_ind		=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].tag_returned_ind
			, bpe.qty						=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].qty
			, bpe.international_unit		=	request->productlist[nPRODUCT_INDEX].eventlist[nEVENT_INDEX].international_unit
			, bpe.contributor_system_cd	=	request->contributor_system_cd
			, bpe.active_ind				=	1
			, bpe.active_status_cd		=	reqdata->active_status_cd
			, bpe.active_status_dt_tm		=	CNVTDATETIME(CURDATE,CURTIME3)
			, bpe.active_status_prsnl_id	=	reqinfo->updt_id
			, bpe.updt_cnt                 = 	0
			, bpe.updt_dt_tm               = 	CNVTDATETIME(CURDATE,CURTIME3)
			, bpe.updt_id                  = 	reqinfo->updt_id
			, bpe.updt_task                = 	reqinfo->updt_task
			, bpe.updt_applctx             = 	reqinfo->updt_applctx

		WITH NOCOUNTER

		/***********************************************************************
		*   	BBHIST_PRODUCT_EVENT insert error check		                   *
		***********************************************************************/
		SET nERROR_CHECK = ERROR(sERRORMSG,0)

		;Check for CCL errors.
		IF (nERROR_CHECK = 0)
			;Check to see if rows were inserted.
			IF (CURQUAL = 0)
				;No rows inserted, call ErrorHandler.
				CALL ErrorHandler("F", "BBHIST_PRODUCT_EVENT insert",
				CONCAT("Insert into BBHIST_PRODUCT_EVENT table failed.",
				"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
				GO TO EXIT_SCRIPT
      		ENDIF ;End curqual check.
		ELSE
   			;CCL errors returned, call ErrorHandler.
   			CALL ErrorHandler("F", "BBHIST_PRODUCT_EVENT insert", sERRORMSG)
   			GO TO EXIT_SCRIPT
		ENDIF ;End CCL error check.

	ENDFOR ;End loop through eventlist.

	;Check to see if there are items in the specialtestinglist.
	IF (nSPECIAL_TESTING_COUNT != 0)

		;Begin loop through specialtestinglist to populate the bbhist_special_testing table.
		FOR (nSPECIAL_TESTING_INDEX = 1 TO nSPECIAL_TESTING_COUNT)

            ;Get unique sequence number for bbhist_special_testing_id
			SELECT INTO "nl:"
			snbr = seq(pathnet_seq,nextval)

			FROM dual

			DETAIL
				;Set bbhist_special_testing_id = unique bbhist_special_testing_id retrieved from the pathnet_seq.
				dBBHIST_SPECIAL_TESTING_ID = snbr

			WITH FORMAT, COUNTER

			SET nERROR_CHECK = ERROR(sERRORMSG,0)

			;Check for CCL errors.
			IF (nERROR_CHECK = 0)
				;Check for rows returned.
				IF (CURQUAL = 0)
					;No rows returned, call ErrorHandler.
					CALL ErrorHandler("F", "Get bbhist_special_testing_id",
					"Unable to retrieve unique bbhist_special_testing_id.")
					GO TO EXIT_SCRIPT
      			ENDIF ;End curqual check.
			ELSE
   				;CCL errors returned, call ErrorHandler.
   				CALL ErrorHandler("F", "Get bbhist_special_testing_id", sERRORMSG)
   				GO TO EXIT_SCRIPT
			ENDIF ;End CCL error check.

			/***********************************************************************
			*   BBHIST_SPECIAL_TESTING insert statement					           *
			***********************************************************************/
			INSERT INTO bbhist_special_testing bst

			SET bst.bbhist_special_testing_id	=	dBBHIST_SPECIAL_TESTING_ID
				, bst.product_id					=	dPRODUCT_ID
				, bst.special_testing_cd			=
				request->productlist[nPRODUCT_INDEX].specialtestinglist[nSPECIAL_TESTING_INDEX].special_testing_cd
				, bst.active_ind					=	1
				, bst.active_status_cd			=	reqdata->active_status_cd

				, bst.active_status_dt_tm			=
		IF (request->productlist[nPRODUCT_INDEX].specialtestinglist[nSPECIAL_TESTING_INDEX].special_testing_dt_tm > 0)
			CNVTDATETIME(request->productlist[nPRODUCT_INDEX].specialtestinglist[nSPECIAL_TESTING_INDEX].special_testing_dt_tm)
		ELSE
			CNVTDATETIME(CURDATE,CURTIME3)
		ENDIF ;End bst.active_status_dt_tm

				, bst.active_status_prsnl_id		=
		IF (request->productlist[nPRODUCT_INDEX].specialtestinglist[nSPECIAL_TESTING_INDEX].special_testing_prsnl_id > 0)
					request->productlist[nPRODUCT_INDEX].specialtestinglist[nSPECIAL_TESTING_INDEX].special_testing_prsnl_id
		ELSE
			request->active_status_prsnl_id
		ENDIF ;End bst.active_status_prsnl_id

				, bst.updt_cnt                 	= 	0
				, bst.updt_dt_tm               	= 	CNVTDATETIME(CURDATE,CURTIME3)
				, bst.updt_id                  	= 	reqinfo->updt_id
				, bst.updt_task                	= 	reqinfo->updt_task
				, bst.updt_applctx             	= 	reqinfo->updt_applctx

			WITH NOCOUNTER

			/***********************************************************************
			*   BBHIST_SPECIAL_TESTING insert error check				           *
			***********************************************************************/
			SET nERROR_CHECK = ERROR(sERRORMSG,0)

			;Check for CCL errors.
			IF (nERROR_CHECK = 0)
				;Check to see if rows were inserted.
				IF (CURQUAL = 0)
					;No rows inserted, call ErrorHandler.
					CALL ErrorHandler("F", "BBHIST_SPECIAL_TESTING insert",
					CONCAT("Insert into BBHIST_SPECIAL_TESTING table failed.",
					"  Please resolve for cross_reference: ",
					request->productlist[nPRODUCT_INDEX].cross_reference,"."))
					GO TO EXIT_SCRIPT
      			ENDIF ;End curqual check.
			ELSE
   				;CCL errors returned, call ErrorHandler.
   				CALL ErrorHandler("F", "Insert:BBHIST_SPECIAL_TESTING", sERRORMSG)
   				GO TO EXIT_SCRIPT
			ENDIF ;End CCL error check.

		ENDFOR ;End loop through specialtestinglist.

	ENDIF ;End check for items within the specialtestinglist.

	;Check for an uploaded comment.  If comment exists, write row to product_note and long_text tables.
	IF (SIZE(TRIM(request->productlist[nPRODUCT_INDEX].comment, 3), 1) > 0)

		;Get unique sequence number for long_text_id
		SELECT INTO "nl:"
			snbr = seq(long_data_seq,nextval)

			FROM dual

			DETAIL
				;Set long_text_id = unique long_text_id retrieved from the long_data_seq.
				dLONG_TEXT_ID = snbr

			WITH FORMAT, COUNTER

			SET nERROR_CHECK = ERROR(sERRORMSG,0)

			;Check for CCL errors.
			IF (nERROR_CHECK = 0)
				;Check for rows returned.
				IF (CURQUAL = 0)
					;No rows returned, call ErrorHandler.
					CALL ErrorHandler("F", "Get unique long_text_id",
					"Unable to retrieve unique long_text_id.")
					GO TO EXIT_SCRIPT
	      		ENDIF ;End curqual check.
			ELSE
	   			;CCL errors returned, call ErrorHandler.
	   			CALL ErrorHandler("F", "Get unique long_text_id", sERRORMSG)
	   			GO TO EXIT_SCRIPT
			ENDIF ;End CCL error check.

		/***********************************************************************
		*   LONG_TEXT insert statement								           *
		***********************************************************************/
		INSERT INTO long_text lt

		SET lt.active_ind				= 	1
			, lt.active_status_cd			= 	reqdata->active_status_cd
			, lt.active_status_dt_tm		= 	IF (request->productlist[nPRODUCT_INDEX].comment_status_dt_tm > 0)
												CNVTDATETIME(request->productlist[nPRODUCT_INDEX].comment_status_dt_tm)
											ELSE
												CNVTDATETIME(CURDATE,CURTIME3)
											ENDIF
			, lt.active_status_prsnl_id	= 	IF (request->productlist[nPRODUCT_INDEX].comment_prsnl_id > 0)
												request->productlist[nPRODUCT_INDEX].comment_prsnl_id
											ELSE
												request->active_status_prsnl_id
											ENDIF
			, lt.long_text				= 	request->productlist[nPRODUCT_INDEX].comment
			, lt.long_text_id 			= 	dLONG_TEXT_ID
			, lt.parent_entity_id			= 	dPRODUCT_ID
			, lt.parent_entity_name		= 	"BBHIST_PRODUCT"
			, lt.updt_applctx				= 	reqinfo->updt_applctx
			, lt.updt_cnt					= 	0
			, lt.updt_dt_tm				= 	CNVTDATETIME(CURDATE,CURTIME3)
			, lt.updt_id					= 	reqinfo->updt_id
			, lt.updt_task				= 	reqinfo->updt_task

		WITH NOCOUNTER

		/***********************************************************************
		*   LONG_TEXT insert error check							           *
		***********************************************************************/
		SET nERROR_CHECK = ERROR(sERRORMSG,0)

		;Check for CCL errors.
		IF (nERROR_CHECK = 0)
			;Check to see if rows were inserted.
			IF (CURQUAL = 0)
				;No rows inserted, call ErrorHandler.
				CALL ErrorHandler("F", "LONG_TEXT insert",
				CONCAT("Insert of uploaded comment into LONG_TEXT table failed.",
				"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
				GO TO EXIT_SCRIPT
	    	ENDIF ;End curqual check.
		ELSE
	   		;CCL errors returned, call ErrorHandler.
	   		CALL ErrorHandler("F", "LONG_TEXT insert", sERRORMSG)
	   		GO TO EXIT_SCRIPT
		ENDIF ;End check for CCL errors.

		;Get unique sequence number for product_note_id
		SELECT INTO "nl:"
			snbr = seq(pathnet_seq,nextval)

			FROM dual

			DETAIL
				;Set product_note_id = unique product_note_id retrieved from the pathnet_seq.
				dPRODUCT_NOTE_ID = snbr

			WITH FORMAT, COUNTER

			SET nERROR_CHECK = ERROR(sERRORMSG,0)

			;Check for CCL errors.
			IF (nERROR_CHECK = 0)
				;Check for rows returned.
				IF (CURQUAL = 0)
					;No rows returned, call ErrorHandler.
					CALL ErrorHandler("F", "Get unique product_note_id",
					"Unable to retrieve unique product_note_id.")
					GO TO EXIT_SCRIPT
	      		ENDIF ;End curqual check.
			ELSE
	   			;CCL errors returned, call ErrorHandler.
	   			CALL ErrorHandler("F", "Get unique product_note_id", sERRORMSG)
	   			GO TO EXIT_SCRIPT
			ENDIF ;End CCL error check.
			
		/***********************************************************************
		*   PRODUCT_NOTE insert statement							           *
		***********************************************************************/
		INSERT INTO product_note pn

		SET pn.active_ind				= 	1
			, pn.active_status_cd			= 	reqdata->active_status_cd
			, pn.active_status_dt_tm		= 	IF (request->productlist[nPRODUCT_INDEX].comment_status_dt_tm > 0)
												CNVTDATETIME(request->productlist[nPRODUCT_INDEX].comment_status_dt_tm)
											ELSE
												CNVTDATETIME(CURDATE,CURTIME3)
											ENDIF
			, pn.active_status_prsnl_id	= 	IF (request->productlist[nPRODUCT_INDEX].comment_prsnl_id > 0)
												request->productlist[nPRODUCT_INDEX].comment_prsnl_id
											ELSE
												request->active_status_prsnl_id
											ENDIF
			, pn.product_note_id			= 	dPRODUCT_NOTE_ID
			, pn.product_id				=	0.0
			, pn.bbhist_product_id		= 	dPRODUCT_ID
			, pn.long_text_id 			= 	dLONG_TEXT_ID
			, pn.updt_applctx				= 	reqinfo->updt_applctx
			, pn.updt_cnt					= 	0
			, pn.updt_dt_tm				= 	CNVTDATETIME(CURDATE,CURTIME3)
			, pn.updt_id					= 	reqinfo->updt_id
			, pn.updt_task				= 	reqinfo->updt_task

		WITH NOCOUNTER			
		
		/***********************************************************************
		*   PRODUCT_NOTE insert error check							           *
		***********************************************************************/
		SET nERROR_CHECK = ERROR(sERRORMSG,0)

		;Check for CCL errors.
		IF (nERROR_CHECK = 0)
			;Check to see if rows were inserted.
			IF (CURQUAL = 0)
				;No rows inserted, call ErrorHandler.
				CALL ErrorHandler("F", "PRODUCT_NOTE insert",
				CONCAT("Insert into PRODUCT_NOTE table failed.",
				"  Please resolve for cross_reference: ", request->productlist[nPRODUCT_INDEX].cross_reference,"."))
				GO TO EXIT_SCRIPT
	    	ENDIF ;End curqual check.
		ELSE
	   		;CCL errors returned, call ErrorHandler.
	   		CALL ErrorHandler("F", "PRODUCT_NOTE insert", sERRORMSG)
	   		GO TO EXIT_SCRIPT
		ENDIF ;End check for CCL errors.
		
	ENDIF ;End check for uploaded comment.

ENDFOR ;End loop through productlist.

SET reply->status_data.status = "S"

GO TO EXIT_SCRIPT

/***********************************************************************
*   ErrorHandler subroutine                                            *
***********************************************************************/
DECLARE ErrorHandler(OperationStatus = c1,
					TargetObjectName = c25,
					TargetObjectValue = vc) = NULL

SUBROUTINE ErrorHandler (OperationStatus,
						TargetObjectName,
						TargetObjectValue)
	;Fill out reply and exit script.
	SET reply->status_data.status = "F"
   	SET reply->status_data.subeventstatus[1].OperationName = sSCRIPT_NAME
   	SET reply->status_data.subeventstatus[1].OperationStatus = OperationStatus
   	SET reply->status_data.subeventstatus[1].TargetObjectName = TargetObjectName
   	SET reply->status_data.subeventstatus[1].TargetObjectValue = TargetObjectValue
END

/***********************************************************************
*   Update bbhist_product table donor_xref_txt field subroutine *
***********************************************************************/
SUBROUTINE UpdateDonorCrossRef(null)
	DECLARE dProduct_ID   = f8	with protect, noconstant(0.0)
	
	SELECT INTO "nl:"

	FROM
		bbhist_product bp

	PLAN bp WHERE
		bp.cross_reference       = (request->productlist[nPRODUCT_INDEX].cross_reference) AND
		bp.product_nbr           = (CNVTUPPER(request->productlist[nPRODUCT_INDEX].product_nbr)) AND
		bp.product_sub_nbr 		 = (request->productlist[nPRODUCT_INDEX].product_sub_nbr) AND
		bp.product_cd      		 = (request->productlist[nPRODUCT_INDEX].product_cd) AND
		bp.supplier_id           = (request->productlist[nPRODUCT_INDEX].cur_supplier_id) AND
		bp.supplier_prefix       = (request->productlist[nPRODUCT_INDEX].supplier_prefix) AND
		bp.owner_area_cd         = (request->productlist[nPRODUCT_INDEX].owner_area_cd) AND
		bp.inv_area_cd           = (request->productlist[nPRODUCT_INDEX].inv_area_cd) AND
		bp.contributor_system_cd = (request->contributor_system_cd)
	DETAIL
		dProduct_ID              = bp.product_id 
		
	WITH NOCOUNTER, FORUPDATE(bp)

	SET nERROR_CHECK = ERROR(sERRORMSG,0)

	;Check for CCL errors.
	IF (nERROR_CHECK = 0)
		;Check for rows returned.
		IF (CURQUAL > 0)
			;Rows returned, update donor_xref_txt field
			UPDATE INTO
				bbhist_product bp
			SET 
				bp.donor_xref_txt = request->productlist[nPRODUCT_INDEX].donor_xref_txt
			WHERE
			    bp.product_id = dProduct_ID
			    
			WITH NOCOUNTER
			
			SET nERROR_CHECK = ERROR(sERRORMSG,0)
			IF (nERROR_CHECK = 0)
				IF (CURQUAL = 0)
					;No row is updated, call ErrorHandler.
					CALL ErrorHandler("F", "Update donor cross reference",
									  "Upload canceled, no product data applied.  Please resolve.")										
					GO TO EXIT_SCRIPT				
				ENDIF			
			ELSE
				;CCL errors returned, call ErrorHandler.
   				CALL ErrorHandler("F", "Update donor cross reference", sERRORMSG)
   				GO TO EXIT_SCRIPT
			
			ENDIF
		ENDIF ;End curqual check.
	ELSE
   		;CCL errors returned, call ErrorHandler.
   		CALL ErrorHandler("F", "Update donor cross reference", sERRORMSG)
   		GO TO EXIT_SCRIPT
	ENDIF ;End CCL error check.
	
END

/***********************************************************************
*   Exit script                                                        *
***********************************************************************/
#EXIT_SCRIPT

IF (reply->status_data.status = "S")
	SET reqinfo->commit_ind = 1
ENDIF

/***********************************************************************
*   Debugging                                                          *
***********************************************************************/

IF (request->debug_ind = 1)
	CALL ECHORECORD(Request)
	CALL ECHORECORD(Reply)
ENDIF

END GO

;Generated by GNU enscript 1.6.4.
