 ;;Solution_Test/script/PathNet -- BB Transfusion/Bbt_Requiredtestingphasestool/BBT_CHG_REQ_TEST_PHASE.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1995 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       BBT_CHG_REQ_TEST_PHASE.PRG
        Object name:            bbt_chg_req_test_phase
        Request #:              225122

        Product:                Blood Bank Transfusion
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Update the phase changes made to the
                                specified phase code passed

        Tables read:            N/A

        Tables updated:         CODE_VALUE and/or PHASE_GROUP

        Executing from:         Required Testing Phases Tool

        Special Notes:          N/A
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 07/31/96 Linda DeJong         Initial Release                     *
;     002 03/04/97 Jon Weekes           Modified to maintain required_ind 
;                                       and sequence
;     003 08/07/98 Amy Therrien         Modified to maintain  cdf_meaning
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

        drop program bbt_chg_req_test_phase:dba go
        create program bbt_chg_req_test_phase:dba

/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
        /*
        record request
        (
          1  phase_changed = i2
          1  phase_group_cd = f8
          1  description = c40
          1  active_ind = i2
          1  cdf_meaning = c12 ;003 AT4131
          1  updt_cnt = i4
          1  qual[x]
             2  selected_changed = i2
             2  active_ind = i2
             2  task_assay_cd = f8
             2  phase_group_id = f8
             2  updt_cnt = i4
             2  add_phase = i2
             2  required_ind = i2
             2  sequence = i4
        )
        */

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
        record reply
        (
%I CCLSOURCE:STATUS_BLOCK.INC
        )

/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
        set reply->status_data->status = "F"
        set nbr_to_chg = size(request->qual,5)
        set y = 0
        set idx = 0
        set failed = "F"
        set code_updt_cnt = 0
        set code_active_ind = 0
        set code_active_dt_tm = cnvtdatetime(curdate, curtime3)
        set code_inactive_dt_tm = cnvtdatetime(curdate, curtime3)
        set phase_updt_cnt = 0
        set phase_active_ind = 0
        set phase_active_dt_tm = cnvtdatetime(curdate, curtime3)
        set phase_inactive_dt_tm = cnvtdatetime(curdate, curtime3)

/****************************************************************************
*       Determine if code set needs to be updated                      *
*****************************************************************************/
 if (request->phase_changed = 1)

/****************************************************************************
*       Lock codeset row to update                                           *
*****************************************************************************/
         select into "nl:"
           c.code_value
         from code_value c
         where (c.code_value = request->phase_group_cd
                and c.code_set = 1601)
         detail
           code_active_ind = c.active_ind
           code_updt_cnt = c.updt_cnt
           code_active_dt_tm = c.active_dt_tm
	   code_cdf_meaning = c.cdf_meaning
         with nocounter, forupdate(c)

         if (curqual = 0)
           set failed = "T"
           set reply->status_data->OperationName = "lock"
           set reply->status_data->OperationStatus = "F"
           set reply->status_data->TargetObjectName = "Code_value-1601"
           set reply->status_data->TargetObjectValue = "Lock failed"
         endif

/****************************************************************************
*       Check to see if row already changed                                 *
*****************************************************************************/
        if (request->updt_cnt != code_updt_cnt)
           set failed = "T"
           set reply->status_data->OperationName = "change"
           set reply->status_data->OperationStatus = "F"
           set reply->status_data->TargetObjectName = "Code Value-1601"
           set reply->status_data->TargetObjectValue = "Update count mismatch"
        else
/****************************************************************************
*       Update the row                                                      *
*****************************************************************************/
           update into code_value c

           set
            c.description = request->description,
            c.active_ind = request->active_ind,
	    c.cdf_meaning = request->cdf_meaning,
            c.active_type_cd = 0,
            c.active_dt_tm = cnvtdatetime(curdate,curtime3),
            c.active_status_prsnl_id = reqinfo->updt_id,
            c.updt_cnt         = c.updt_cnt + 1,
            c.updt_dt_tm       = cnvtdatetime(curdate,curtime3),
            c.updt_id          = reqinfo->updt_id,
            c.updt_task        = reqinfo->updt_task,
            c.updt_applctx     = reqinfo->updt_applctx
          
           where 
            (c.code_value = request->phase_group_cd and
             c.code_set = 1601)

            with counter
            if (curqual = 0)
              set failed = "T"
            endif

            if (failed = "T")
              set reply->status_data->status = "F"
              set reply->status_data->OperationName = "change"
              set reply->status_data->OperationStatus = "F"
              set reply->status_data->TargetObjectName = "code_value-1601"
              set reply->status_data->TargetObjectValue = "update failed"
              rollback
              go to END_SCRIPT
            endif
        endif
 endif

/****************************************************************************
*       Determine if phase group needs to be updated                          *
*****************************************************************************/
 for (idx = 1 to nbr_to_chg)
   
    if (request->qual[idx]->selected_changed = 1)
/****************************************************************************
*       Lock phase group row to update -                                    *
*****************************************************************************/
       if (request->qual[idx]->add_phase = 1)
           set next_code = 0.0
           execute cpm_next_code
           insert into phase_group p
               set p.phase_group_id = next_code,
                   p.task_assay_cd = request->qual[idx]->task_assay_cd,
                   p.phase_group_cd = request->phase_group_cd,
                   p.required_ind = request->qual[idx]->required_ind,
                   p.sequence = request->qual[idx]->sequence,
                   p.active_ind = request->qual[idx]->active_ind,
                   p.active_status_cd = 0,
                   p.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
                   p.active_status_prsnl_id = reqinfo->updt_id,
                   p.updt_cnt         = 0,
                   p.updt_dt_tm       = cnvtdatetime(curdate,curtime3),
                   p.updt_id          = reqinfo->updt_id,
                   p.updt_task        = reqinfo->updt_task,
                   p.updt_applctx     = reqinfo->updt_applctx
            with counter
            if (curqual = 0)
              set y = y + 1
              if (y > 1)
                set stat = alter(reply->status_data->subeventstatus, y+1)
              endif
              set reply->status_data->subeventstatus[y]->OperationName
               = "insert"
              set reply->status_data->subeventstatus[y]->OperationStatus
               = "F"
              set reply->status_data->subeventstatus[y]->TargetObjectName
               = "phase group"
              set reply->status_data->subeventstatus[y]->TargetObjectValue 
               = request->qual[idx]->phase_group_id
              set failed = "T"
              go to ROW_FAILED
            endif
       else
           select into "nl:"
              p.phase_group_id
           from phase_group p
           where (p.phase_group_id = request->qual[idx]->phase_group_id)
           detail
              phase_active_ind = p.active_ind
              phase_updt_cnt = p.updt_cnt
              phase_active_dt_tm = p.active_status_dt_tm
           with nocounter, forupdate(p)

           if (curqual = 0)
              set failed = "T"
              set y = y +1
              if (y > 1)
                 set stat = alter(reply->status_data->subeventstatus, y +1)
              endif     
              set reply->status_data->subeventstatus[y]->OperationName = "lock"
              set reply->status_data->subeventstatus[y]->OperationStatus = "F"
              set reply->status_data->subeventstatus[y]->TargetObjectName 
                        = "Phase group"
              set reply->status_data->subeventstatus[y]->TargetObjectValue 
                        = "Lock failed"
           endif

/****************************************************************************
*       Check to see if row already changed                                 *
*****************************************************************************/
           if (request->qual[idx]->updt_cnt != phase_updt_cnt)
              set failed = "T"
              set reply->status_data->OperationName = "change"
              set reply->status_data->OperationStatus = "F"
              set reply->status_data->TargetObjectName = "phase group"
              set reply->status_data->TargetObjectValue = "Update count mismatch"
           else
/****************************************************************************
*       Update the row                                                      *
*****************************************************************************/
             update into phase_group p

             set
              p.required_ind = request->qual[idx]->required_ind,
              p.sequence = request->qual[idx]->sequence,
              p.active_ind = request->qual[idx]->active_ind,
              p.active_status_cd = 0,
              p.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
              p.active_status_prsnl_id = reqinfo->updt_id,
              p.updt_cnt         = p.updt_cnt + 1,
              p.updt_dt_tm       = cnvtdatetime(curdate,curtime3),
              p.updt_id          = reqinfo->updt_id,
              p.updt_task        = reqinfo->updt_task,
              p.updt_applctx     = reqinfo->updt_applctx
              where
                p.phase_group_id = request->qual[idx]->phase_group_id
            
              with counter
              if (curqual = 0)
                set y = y + 1
                if (y > 1)
                  set stat = alter(reply->status_data->subeventstatus, y+1)
                endif
                set reply->status_data->subeventstatus[y]->OperationName
                     = "change"
                set reply->status_data->subeventstatus[y]->OperationStatus
                     = "F"
                set reply->status_data->subeventstatus[y]->TargetObjectName
                     = "phase group"
                set reply->status_data->subeventstatus[y]->TargetObjectValue 
                     = request->qual[idx]->phase_group_id
                set failed = "T"
                go to ROW_FAILED
              endif
           endif
       endif 
    endif 
  endfor

#ROW_FAILED
        if (failed = "T")
          set reply->status_data->status = "F"
          set reply->status_data->OperationName = "change"
          set reply->status_data->OperationStatus = "F"
          set reply->status_data->TargetObjectName = "table"
          set reply->status_data->TargetObjectValue = "phase group"
          set reqingo->commit_ind = 0
          rollback
          go to END_SCRIPT
        else    
          set reply->status_data->status = "S"  
          set reqinfo->commit_ind = 1
        endif

        commit
/****************************************************************************
*       exit_script                                                         *
*****************************************************************************/

#END_SCRIPT

end go

;Generated by GNU enscript 1.6.4.
