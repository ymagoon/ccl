 ;;Solution_Test/script/PathNet -- BB Transfusion/Receiveproducts/BBT_ADD_PRODUCT.PRG Turn on black mode

     /************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Author:                 Lisa Grayson
        Date Written:           05/09/95
        Last Modified:          04/29/96
        
        Source file name:       BBT_ADD_PRODUCT.PRG
        Object name:            bbt_add_product
        
        Request #:              225030
        Product:                Blood Bank Transfusion           
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Add records to PRODUCT & BLOOD_PRODUCT tables

        Tables read:            none
        Executing from:         Receive BB Products

******************************************************************************/
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *MOD#  BY  PIM#   DATE   RELEASE MODIFICATION TECHNIQUE/UTILITY        *
;    *---- --- ----- -------- ------- ------------------------------------- *
;*GMOD*G000 LSJ 00000 01/01/96   000  NEW SCRIPT                            * 
;       001 DMS 00000 07/14/97   001  Added test to skip addition of        *
;                                     unconfirmed state if confimatory order*
;                                     not required.                         *
;       002 DMS 00000 07/30/97   002  Added ability to override duplicate   *
;                                     product ids.  Script, if passed a     *
;                                     product_id > 0, will update the       *
;                                     product table and inactive the needed *
;                                     states.                               *
;           BNK 00000 09/11/97        Added blood_product_updt_cnt count as *
;                                     part of request & script, previously  *
;                                     was using product_updt_cnt instead    *
;       003 DMS 00000 07/13/98        Added drawn_dt_tm to insert to blood  *
;                                     product table                         *
;       004 EZ  00000 12/03/98        Add UAR calls for script tunning      *
;       005 DMS 00000 01/20/99        Added backdate_ind and backdate_dt_tm *
;                                     to allow backdating of received       *
;                                     products                              *
;       006 DMS       05/21/99        Fixed internal-> declaration
;       007 DMS       08/05/99        Added update of create_dt_tm
;       008 jg7520    12/30/03        39495: Expand SELECT with forupdate to*
;                                      be a series of single table selects. *  
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

        drop program bbt_add_product:dba go
        create program bbt_add_product:dba

        /*
        record request
        (
          1  recv_prsnl_id               = f8
          1  quar_reason_cd              = f8
          1  cur_owner_area_cd           = f8
          1  cur_inv_area_cd             = f8
          1  backdate_ind                = i2 ;005
          1  backdate_dt_tm              = dq8 ;005
          1  productlist [x]
                2 p_updt_cnt             = i4
                2 bp_updt_cnt            = i4
                2 drv_updt_cnt           = i4
                2 product_id             = f8
                2 conf_req_ind           = i2
                2 product_class_cd       = f8
                2 product_cat_cd         = f8
                2 product_nbr            = c20
                2 alternate_nbr          = c20
                2 processing_type_flag   = C1
                2 abo_cd                 = f8
                2 rh_cd                  = f8
                2 product_cd             = f8
                2 drawn_dt_tm            = di8
                2 cur_expire_dt_tm       = di8
                2 orig_vis_insp_cd       = f8
                2 orig_ship_cond_cd      = f8
                2 cur_volume             = f8
                2 cur_unit_meas_cd       = f8
                2 manufacturer_id        = f8
                2 cur_supplier_id        = f8
                2 segment_nbr            = c25
                2 recv_dt_tm             = di8
                2 storage_temp_cd        = f8
                2 available_ind          = i2
                2 quarantine_ind         = i2
                2 autologous_ind         = i2
                2 directed_ind           = i2
                2 assign_ind             = i2
                2 person_id              = f8
                2 encntr_id              = f8
                2 reason_cd              = f8
                2 prov_id                = f8                  
                2 expected_usage_dt_tm   = di8
                2 donated_by_relative_ind = i2
                2 qty_assigned           = i4
                2 orig_rcvd_qty          = i4
                2 cur_avail_qty          = i4
                2 cur_intl_units         = i4
                2 units_per_vial         = i4
                2 orig_quar_qty          = i4
                2 item_volume            = i4
                2 item_unit_meas_cd      = f8 
                2 spectest_qty           = i4
                2 supplier_prefix        = c5
                2 barcode_nbr            = c20
                2 bb_supplier_id         = f8
                2 alpha_translation_id   = f8
                2 spectestlist [x]
                  3 special_testing_cd   = f8
                  3 confirmed_ind        = i2
                2 eventlist [x]
                  3  product_event_id    = f8
                  3  event_type_cd       = f8
                  3  pe_updt_cnt         = i4  
                  3  pe_child_updt_cnt   = i4 
        )
        */

        record reply
        (1  qual[*]
            2  product_id                = f8      /*added 091296*/
            2  product_event_id          = f8         /* added 122796*/
            2  received_event_id         = f8
         1  status_data
            2  status                    = c1
            2  subeventstatus[1]
               3  SourceObjectName       = c15
               3  SourceObjectQual       = i4
               3  SourceObjectValue      = c50
               3  OperationName          = c8
               3  OperationStatus        = c1
               3  TargetObjectName       = c15
               3  TargetObjectValue      = c50
               3  Sub_Event_dt_tm        = di8
        )

;005 begin
        record internal_date ;006
        (
         1  event_dt_tm                 = dq8
        )

        if (request->backdate_ind = 1)
            set internal_date->event_dt_tm = cnvtdatetime(request->backdate_dt_tm) ;006
        else
            set internal_date->event_dt_tm = cnvtdatetime(curdate, curtime3) ;006
        endif
;005 end

        set success = 0
        set event = 0
        set prod = 0
        set reply->status_data->status = "F"
        set count1 = 0
        set nbr_to_add = size(request->productlist,5)
        set seqnbr = 0.0
        set seqnbr2 = 0.0
        set y = 0
        set failed = "F"
        set product_cat_code = 0.0
        set product_class_code = 0.0
        set gsub_product_event_status = "  " 
        set gsub_status = " "
        set gsub_process = " "
        set gsub_message = " "
        set gsub_bp_status = "  "
        set gsub_ad_status = "  " 
        set gsub_rcvd_status = "  " 
        set gsub_quar_status = "  "
        set product_event_id = 0.0
        set assign_event_id = 0.0
       /* code values for different events needed */
        set gsub_dummy = ""
;        set gsub_dummy2 = 0
;        set gsub_dummy3 = 0
;        set gsub_dummy4 = 0
;        set gsub_dummy5 = 0
        set gsub_code_value  = 0.0
        set quar_code        = 0.0
        set auto_code        = 0.0
        set directed_code    = 0.0
        set received_code    = 0.0
        set unconfirmed_code = 0.0
        set available_code = 0.0
        set destroyed_code = 0.0
        set disposed_code = 0.0

        set stat = alterlist(reply->qual, nbr_to_add)      
        set code_cnt = 1           
        /* Retrieve quarantine event_type_cd from code_value table */
        set stat = uar_get_meaning_by_codeset(1610, "2", code_cnt, quar_code)   ;004
/*
        call GET_CODE_VALUE(1610, "2")
        if (curqual = 0)
         set reply->status_data->status = "Z"
         set count1 = count1 + 1
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName =
             "get quarantine code value" 
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName =
              "code_value" 
*/
         /* don't abort because may not need to quarantine any products */ 
/*       else
            set quar_code = gsub_code_value
       endif
*/
      /* Retrieve autologous event_type_cd from code_value table */
        set stat = uar_get_meaning_by_codeset(1610, "10", code_cnt, auto_code)  ;004
/*
        call GET_CODE_VALUE(1610, "10")
        if (curqual = 0)
         set reply->status_data->status = "Z"
         set count1 = count1 + 1
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName =
             "get autologous code value from codeset 1610" 
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName =
              "code_value" 
*/         /* don't abort because may not have any autologous products */ 
/*       else
            set auto_code = gsub_code_value
       endif
*/
      /* Retrieve directed event_type_cd from code_value table */
        set stat = uar_get_meaning_by_codeset(1610, "11", code_cnt, directed_code)      ;004
/*        call GET_CODE_VALUE(1610, "11")
        if (curqual = 0)
         set reply->status_data->status = "Z"
         set count1 = count1 + 1
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName =
             "get directed code value from codeset 1610" 
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName =
              "code_value" 
*/         /* don't abort because may not have any directed products */ 
/*       else
            set directed_code = gsub_code_value
       endif
*/
      /* Retrieve received event_type_cd from code_value table */
        set stat = uar_get_meaning_by_codeset(1610, "13", code_cnt, received_code)      ;004
/*        call GET_CODE_VALUE(1610, "13")
        if (curqual = 0)
         set reply->status_data->status = "Z"
         set count1 = count1 + 1
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName =
             "get received code value from codeset 1610" 
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName =
              "code_value" 
*/         /* abort because all products have received event */ 
/*         set failed = "T"
         go to EXIT_PROGRAM
       else
         set received_code = gsub_code_value
       endif
*/
      /* Retrieve unconfirmed event_type_cd from code_value table */
        set stat = uar_get_meaning_by_codeset(1610, "9", code_cnt, unconfirmed_code)    ;004
/*        call GET_CODE_VALUE(1610, "9")
        if (curqual = 0)
         set reply->status_data->status = "Z"
         set count1 = count1 + 1
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName =
             "get unconfirmed code value from codeset 1610" 
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName =
              "code_value" 
*/         /* don't abort because may not have any unconfirmed products */ 
/*       else
         set unconfirmed_code = gsub_code_value
       endif
*/
      /* Retrieve available event_type_cd from code_value table */
        set stat = uar_get_meaning_by_codeset(1610, "12", code_cnt, available_code)     ;004
/*        call GET_CODE_VALUE(1610, "12")
        if (curqual = 0)
         set reply->status_data->status = "Z"
         set count1 = count1 + 1
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName =
             "get available code value from codeset 1610" 
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName =
              "code_value" 
*/         /* don't abort because may not have any available products */ 
/*       else
         set available_code = gsub_code_value
       endif
*/
      /* Retrieve destroyed event_type_cd from code_value table */
        set stat = uar_get_meaning_by_codeset(1610, "14", code_cnt, destroyed_code)     ;004
/*        call GET_CODE_VALUE(1610, "14")
        if (curqual = 0)
         set reply->status_data->status = "Z"
         set count1 = count1 + 1
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName =
             "get destroyed code value from codeset 1610" 
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName =
              "code_value" 
*/         /* don't abort because may not have any destroyed products */ 
/*       else
         set destroyed_code = gsub_code_value
       endif
*/
 
        /*********************************************/
        /* start looping through products in request */          
        /*********************************************/

    for (x = 1 to nbr_to_add)
        set prod = x
        /* Get unique sequence number for product */
        select into "nl:"
            snbr = seq(blood_bank_seq,nextval)
            "#####################;rp0"
        from dual
        detail
              seqnbr = cnvtreal(snbr)
        with format, counter
        if (curqual = 0)
            set y = y + 1
            if (y > 1)
                set stat = alter(reply->status_data->subeventstatus, y+1)
            endif
            set reply->status_data->subeventstatus[y]->SourceObjectName
            = "script"
            set reply->status_data->subeventstatus[y]->SourceObjectValue
            = "bbt_add_blood_product"
            set reply->status_data->subeventstatus[y]->OperationName
            = "nextval"
            set reply->status_data->subeventstatus[y]->OperationStatus
            = "F"
            set reply->status_data->subeventstatus[y]->TargetObjectName
            = "SEQUENCE"
            set reply->status_data->subeventstatus[y]->TargetObjectValue 
            = "blood_bank_seq"
            set reply->status_data->subeventstatus[y]->SourceObjectQual
            = 1
            set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
            = cnvtdatetime(curdate,curtime)
            set failed = "T"
        else
            if (request->productlist[x]->product_id = 0)
/*091296*/          set reply->qual[x].product_id = seqnbr
            else
                set reply->qual[x].product_id = 
                            request->productlist[x]->product_id
                set seqnbr = request->productlist[x]->product_id
            endif
            set reply->qual[x].product_event_id = 0
            set product_nbr =
               cnvtupper(request->productlist[x].product_nbr)
            set alternate_nbr = 
               cnvtupper(request->productlist[x].alternate_nbr)
            set barcode_nbr =
               cnvtupper(request->productlist[x].barcode_nbr)
/*002DMSBEG1*/
            if (request->productlist[x]->product_id = 0)
                insert into product p1
                    set p1.product_id       = seqnbr,
                        p1.product_nbr      = trim(product_nbr),
                        p1.alternate_nbr    = trim(alternate_nbr),
                        p1.barcode_nbr      = trim(barcode_nbr),
                        p1.product_cd       = request->productlist[x]->product_cd,
                        p1.product_cat_cd   =
                            request->productlist[x].product_cat_cd,
                        p1.product_class_cd =
                            request->productlist[x].product_class_cd,
                        p1.cur_owner_area_cd =  request->cur_owner_area_cd,
                        p1.cur_inv_area_cd = request->cur_inv_area_cd,
                        p1.recv_dt_tm   = cnvtdatetime(internal_date->event_dt_tm),
                        p1.recv_prsnl_id    = reqinfo->updt_id,
                        p1.cur_unit_meas_cd =
                                request->productlist[x]->cur_unit_meas_cd,
                        p1.orig_unit_meas_cd =
                                request->productlist[x]->cur_unit_meas_cd,
                        p1.cur_supplier_id =
                                request->productlist[x].cur_supplier_id,
                        p1.storage_temp_cd =
                                request->productlist[x].storage_temp_cd,
                        p1.pooled_product_id = 0,
                        p1.modified_product_id = 0,
                        p1.donated_by_relative_ind =
                          request->productlist[x].donated_by_relative_ind,
                        p1.cur_expire_dt_tm = 
                        cnvtdatetime(request->productlist[x]->cur_expire_dt_tm),
                        p1.active_ind        = 1,
                        p1.active_status_cd  = reqdata->active_status_cd,
                        p1.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
                        p1.active_status_prsnl_id = reqinfo->updt_id,
                        p1.updt_cnt         = 0,
                        p1.updt_dt_tm       = cnvtdatetime(curdate,curtime3),
                        p1.updt_id          = reqinfo->updt_id,
                        p1.updt_applctx     = reqinfo->updt_applctx,
                        p1.updt_task        = reqinfo->updt_task,
                        p1.create_dt_tm     = cnvtdatetime(curdate,curtime3);007
                with counter
                if (curqual = 0)
                      set y = y + 1
                      if (y > 1)
                        set stat = alter(reply->status_data->subeventstatus, y+1)
                      endif
                      set reply->status_data->subeventstatus[y]->SourceObjectName
                       = "script"
                      set reply->status_data->subeventstatus[y]->SourceObjectValue
                       = "bbt_add_blood_product"
                      set reply->status_data->subeventstatus[y]->OperationName
                       = "insert"
                      set reply->status_data->subeventstatus[y]->OperationStatus
                       = "F"
                      set reply->status_data->subeventstatus[y]->TargetObjectName
                       = "product"
                      set reply->status_data->subeventstatus[y]->TargetObjectValue 
                       = request->productlist[x]->product_nbr
                      set reply->status_data->subeventstatus[y]->SourceObjectQual
                       = 1
                      set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                       = cnvtdatetime(curdate,curtime)
                      set failed = "T"
                      ;rollback
                endif
            else
                select into "nl:"
                    p.product_id
                from 
                    product p
                plan   p      where   p.product_id     = request->productlist[x]->product_id
                                  and p.updt_cnt       = request->productlist[x]->p_updt_cnt
                with    nocounter, forupdate(p)

                if (curqual = 0)
                ;    set prod = x
                    call LOAD_PROCESS_STATUS
                    (
                     /* status  */ "F",
                     /* process */ "FORUPDATE",
                     /* message */ build("Cannot lock PRODUCT for update", ":", request->productlist[x]->updt_cnt)
                     )
                     go to EXIT_PROGRAM
                     ;rollback
                else
                    update into product p1
                      set p1.product_cat_cd   =
                              request->productlist[x].product_cat_cd,
                          p1.product_class_cd =
                              request->productlist[x].product_class_cd,
                          p1.cur_owner_area_cd =  request->cur_owner_area_cd,
                          p1.cur_inv_area_cd = request->cur_inv_area_cd,
                          p1.recv_dt_tm   = 
                               cnvtdatetime(curdate,curtime3),
                          p1.recv_prsnl_id    = reqinfo->updt_id,
                          p1.cur_unit_meas_cd =
                                  request->productlist[x]->cur_unit_meas_cd,
                          p1.orig_unit_meas_cd =
                                  request->productlist[x]->cur_unit_meas_cd,
                          p1.storage_temp_cd =
                                  request->productlist[x].storage_temp_cd,
                          p1.pooled_product_id = 0,
                          p1.modified_product_id = 0,
                          p1.donated_by_relative_ind =
                            request->productlist[x].donated_by_relative_ind,
                          p1.cur_expire_dt_tm = 
                          cnvtdatetime(request->productlist[x]->cur_expire_dt_tm),
                          p1.active_ind        = 1,
                          p1.active_status_cd  = reqdata->active_status_cd,
                          p1.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
                          p1.active_status_prsnl_id = reqinfo->updt_id,
                          p1.updt_cnt         = p1.updt_cnt + 1,
                          p1.updt_dt_tm       = cnvtdatetime(curdate,curtime3),
                          p1.updt_id          = reqinfo->updt_id,
                          p1.updt_applctx     = reqinfo->updt_applctx,
                          p1.updt_task        = reqinfo->updt_task
                    where p1.product_id = request->productlist[x]->product_id
                
                    if (curqual = 0)
                        set y = y + 1
                        if (y > 1)
                            set stat = alter(reply->status_data->subeventstatus, y+1)
                        endif
                        set reply->status_data->subeventstatus[y]->SourceObjectName
                           = "script"
                        set reply->status_data->subeventstatus[y]->SourceObjectValue
                           = "bbt_add_blood_product"
                        set reply->status_data->subeventstatus[y]->OperationName
                           = "update into product"
                        set reply->status_data->subeventstatus[y]->OperationStatus
                           = "F"
                        set reply->status_data->subeventstatus[y]->TargetObjectName
                           = "SEQUENCE"
                        set reply->status_data->subeventstatus[y]->TargetObjectValue 
                           = "blood_bank_seq"
                        set reply->status_data->subeventstatus[y]->SourceObjectQual
                           = 1
                        set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                           = cnvtdatetime(curdate,curtime)
                        set failed = "T"
                        ;rollback
                    endif
                endif
            endif
        endif
/*002DMSEND1*/
        if (request->productlist[x].processing_type_flag = "B")
            call BLOOD_PRODUCT_TBLS (x)
            if (gsub_bp_status != "OK")
                set failed = "T"
                ;rollback
                go to EXIT_PROGRAM
            endif
        ELSE
            if (request->productlist[x].processing_type_flag = "D")
                call DERIVATIVE_TBLS (x)
                if (gsub_bp_status != "OK")
                    set failed = "T"
                    ;rollback
                    go to EXIT_PROGRAM
                endif
            else
                set failed = "T"
                ;rollback
                go to EXIT_PROGRAM
            endif
        endif

        /* for all products, add received event */
        set product_event_id = 0.0
        call add_product_event
        (
            /* product_id               */ seqnbr,
            /* person_id                */ 0,
            /* encntr_id                */ 0,
            /* order_id                 */ 0,
            /* bb_result_id             */ 0.0,
            /* event_type_cd            */ received_code,
            /* event_dt_tm              */ internal_date->event_dt_tm, ;005 006
            /* event_prsnl_id           */ reqinfo->updt_id,
            /* event_status_flag        */ 0,
            /* override_ind             */ 0,
            /* override_reason_cd       */ 0,
            /* related_product_event_id */ 0,
            /* active_ind               */ 0,        /* make it inactive always */
            /* active_status_cd         */ reqdata->active_status_cd,
            /* active_status_dt_tm      */ cnvtdatetime(curdate,curtime3),
            /* active_status_prsnl_id   */ reqinfo->updt_id
        )
;      "FS" = get product_event_id (seq) failed
;      "FA" = add product_event failed                                
;      "OK" = add successful                                           
        if (gsub_product_event_status = "FS" or 
               gsub_product_event_status = "FA"   )
            set y = y + 1
            if (y > 1)
                set stat = alter(reply->status_data->subeventstatus, y+1)
            endif
            set reply->status_data->subeventstatus[y]->SourceObjectName
               = "script"
            set reply->status_data->subeventstatus[y]->SourceObjectValue
               = "bbt_add_blood_product"
            set reply->status_data->subeventstatus[y]->OperationName
               = "add product event"
            set reply->status_data->subeventstatus[y]->OperationStatus
               = "F"
            set reply->status_data->subeventstatus[y]->TargetObjectName
               = "product_event"
            set reply->status_data->subeventstatus[y]->TargetObjectValue 
               = "received event"
            set reply->status_data->subeventstatus[y]->SourceObjectQual
               = 1
            set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
               = cnvtdatetime(curdate,curtime)
            set failed = "T"
            ;rollback
            go to EXIT_PROGRAM
        endif

        set received_status = " "
        call add_received_event
        ( 
        product_event_id,
        request->productlist[x].orig_rcvd_qty,
        request->productlist[x].orig_ship_cond_cd,
        request->productlist[x].orig_vis_insp_cd,
        request->productlist[x].cur_intl_units
        )
        if (gsub_rcvd_status != "OK")
            set failed = "T"
            ;rollback
            go to EXIT_PROGRAM
        endif
        
         if (received_status = "F")
                set y = y + 1
                if (y > 1)
                    set stat = alter(reply->status_data->subeventstatus, y+1)
                endif
                set reply->status_data->subeventstatus[y]->SourceObjectName
                   = "script"
                set reply->status_data->subeventstatus[y]->SourceObjectValue
                   = "bbt_add_blood_product"
                set reply->status_data->subeventstatus[y]->OperationName
                   = "add received event"
                set reply->status_data->subeventstatus[y]->OperationStatus
                   = "F"
                set reply->status_data->subeventstatus[y]->TargetObjectName
                   = "received event"
                set reply->status_data->subeventstatus[y]->TargetObjectValue 
                   = "add received event"
                set reply->status_data->subeventstatus[y]->SourceObjectQual
                   = 1
                set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                   = cnvtdatetime(curdate,curtime)
                set failed = "T"
                ;rollback
                go to EXIT_PROGRAM
            else
                set reply->qual[x]->received_event_id = product_event_id
            endif

           
        if (request->productlist[x].available_ind = 1)
            /* (make it available - ex. platelets, plasma, derivatives) */
            ;   -- if quarantined, assigned, auto, or directed, then don't make it available
            if (request->productlist[x].assign_ind = 0 and
                request->productlist[x].quarantine_ind = 0 and  /* 031097 */
                request->productlist[x].autologous_ind = 0 and  /* 031097 */
                request->productlist[x].directed_ind = 0)
                if (available_code = 0.0)
                    set failed = "T"
                    ;rollback
                    go to EXIT_PROGRAM
                endif
                set product_event_id = 0.0
                call ADD_PRODUCT_EVENT 
                (
                /* product_id               */ seqnbr,
                /* person_id                */ 0,
                /* encntr_id                */ 0,
                /* order_id                 */ 0,
                /* bb_result_id             */ 0.0,
                /* event_type_cd            */ available_code,
                /* event_dt_tm              */ internal_date->event_dt_tm, ;005 006
                /* event_prsnl_id           */ reqinfo->updt_id,
                /* event_status_flag        */ 0,
                /* override_ind             */ 0,
                /* override_reason_cd       */ 0,
                /* related_product_event_id */ 0,
                /* active_ind               */ 1,           /* active */
                /* active_status_cd         */ reqdata->active_status_cd,
                /* active_status_dt_tm      */ cnvtdatetime(curdate,curtime3),
                /* active_status_prsnl_id   */ reqinfo->updt_id
                )
                ;         "FS" = get product_event_id (seq) failed
                ;         "FA" = add product_event failed                                
                ;         "OK" = add successful                                           
                if (gsub_product_event_status = "FS" or 
                    gsub_product_event_status = "FA"   )
                    set y = y + 1
                    if (y > 1)
                        set stat = alter(reply->status_data->subeventstatus, y+1)
                    endif
                    set reply->status_data->subeventstatus[y]->SourceObjectName
                    = "script"
                    set reply->status_data->subeventstatus[y]->SourceObjectValue
                    = "bbt_add_blood_product"
                    set reply->status_data->subeventstatus[y]->OperationName
                    = "add product event"
                    set reply->status_data->subeventstatus[y]->OperationStatus
                    = "F"
                    set reply->status_data->subeventstatus[y]->TargetObjectName
                    = "available event"
                    set reply->status_data->subeventstatus[y]->TargetObjectValue 
                    = "add product event"
                    set reply->status_data->subeventstatus[y]->SourceObjectQual
                    = 1
                    set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                    = cnvtdatetime(curdate,curtime)
                    set failed = "T"
                    ;rollback
                    go to EXIT_PROGRAM
                endif
            endif   /* no "available" table to write to, just the event */
        endif
        if (request->productlist[x].assign_ind = 1)
            set assign_status = " "
            call ADD_ASSIGN
            ( seqnbr,
              request->productlist[x].person_id,
              request->productlist[x].encntr_id,
              request->productlist[x].reason_cd,
              request->productlist[x].prov_id,  
              request->productlist[x].qty_assigned,
              request->productlist[x].cur_intl_units,
              reqinfo->updt_id,
              reqinfo->updt_task,
              reqinfo->updt_applctx,
              reqdata->active_status_cd,
              reqinfo->updt_id,
              cnvtdatetime(curdate,curtime3)
             )
            if (assign_status = "F")
                set y = y + 1
                if (y > 1)
                    set stat = alter(reply->status_data->subeventstatus, y+1)
                endif
                set reply->status_data->subeventstatus[y]->SourceObjectName
                   = "script"
                set reply->status_data->subeventstatus[y]->SourceObjectValue
                   = "bbt_add_blood_product"
                set reply->status_data->subeventstatus[y]->OperationName
                   = "add product event"
                set reply->status_data->subeventstatus[y]->OperationStatus
                   = "F"
                set reply->status_data->subeventstatus[y]->TargetObjectName
                   = "assign event"
                set reply->status_data->subeventstatus[y]->TargetObjectValue 
                   = "add product event"
                set reply->status_data->subeventstatus[y]->SourceObjectQual
                   = 1
                set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                   = cnvtdatetime(curdate,curtime)
                set failed = "T"
                ;rollback
                go to EXIT_PROGRAM
            else
                set reply->qual[x]->product_event_id = assign_event_id
            endif
        endif

        if (request->productlist[x].quarantine_ind = 1)
            if (quar_code = 0.0 or 
                request->productlist[x]->orig_vis_insp_cd = 0)
                set failed = "T"
                ;rollback
                go to EXIT_PROGRAM
            endif
            ;       select into "nl:"
            ;          from code_value_extension e 
            ;          where e.code_value = request->productlist[x]->orig_vis_insp_cd and
            ;                e.field_name = "code_value"
            ;        detail
            ;          quar_reason_cd = cnvtint(e.field_value)
            ;        with format, counter
            ;        if (curqual = 0) 
            ;          set failed = "T"
            ;          ;rollback
            ;          go to EXIT_PROGRAM
            ;        else
            set product_event_id = 0.0
            call add_product_event
            (
            /* product_id               */ seqnbr,
            /* person_id                */ 0,
            /* encntr_id                */ 0,
            /* order_id                 */ 0,
            /* bb_result_id             */ 0.0,
            /* event_type_cd            */ quar_code,
            /* event_dt_tm              */ internal_date->event_dt_tm, ;005 006
            /* event_prsnl_id           */ reqinfo->updt_id,
            /* event_status_flag        */ 0,
            /* override_ind             */ 0,
            /* override_reason_cd       */ 0,
            /* related_product_event_id */ 0,
            /* active_ind               */ 1,           /* active */
            /* active_status_cd         */ reqdata->active_status_cd,
            /* active_status_dt_tm      */ cnvtdatetime(curdate,curtime3),
            /* active_status_prsnl_id   */ reqinfo->updt_id
            )
            ;         "FS" = get product_event_id (seq) failed
            ;         "FA" = add product_event failed                                
            ;         "OK" = add successful                                           
            if (gsub_product_event_status = "FS" or 
                gsub_product_event_status = "FA"   )
                set y = y + 1
                if (y > 1)
                    set stat = alter(reply->status_data->subeventstatus, y+1)
                endif
                set reply->status_data->subeventstatus[y]->SourceObjectName
                = "script"
                set reply->status_data->subeventstatus[y]->SourceObjectValue
                = "bbt_add_blood_product"
                set reply->status_data->subeventstatus[y]->OperationName
                = "add product event"
                set reply->status_data->subeventstatus[y]->OperationStatus
                = "F"
                set reply->status_data->subeventstatus[y]->TargetObjectName
                = "product_event"
                set reply->status_data->subeventstatus[y]->TargetObjectValue 
                = "add product event"
                set reply->status_data->subeventstatus[y]->SourceObjectQual
                = 1
                set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                = cnvtdatetime(curdate,curtime)
                set failed = "T"
                ;rollback
            else
                call ADD_QUARANTINE
                (
                    product_event_id,
                    request->quar_reason_cd,         /*  comes from Preferences */
                    request->productlist[x].orig_quar_qty
                )
                if (gsub_quar_status != "OK")
                    set failed = "T"
                    ;rollback
                endif
            endif
        endif
    endfor   /* END OF MAIN LOOP */


/*********************************************************************/
/******* Insert into tables specific to Blood Products only **********/
/*********************************************************************/
subroutine BLOOD_PRODUCT_TBLS(idx)

set gsub_bp_status = "OK"
/*002DMSBEG2*/
set ev_type_cd = 0.0
if (request->productlist[idx]->product_id = 0) 
    insert into blood_product p2
    set
      p2.product_id       = seqnbr,
      p2.product_cd       = request->productlist[idx]->product_cd,
;     p2.cur_expire_dt_tm =
;                     cnvtdatetime(request->productlist[idx]->cur_expire_dt_tm),
      p2.orig_expire_dt_tm =
                      cnvtdatetime(request->productlist[idx]->cur_expire_dt_tm),
      p2.drawn_dt_tm = 
                      cnvtdatetime(request->productlist[idx]->drawn_dt_tm),
      p2.cur_volume        = request->productlist[idx]->cur_volume,
      p2.orig_volume       = request->productlist[idx]->cur_volume,
      p2.orig_label_abo_cd = request->productlist[idx].abo_cd,
      p2.orig_label_rh_cd  = request->productlist[idx].rh_cd,
      p2.cur_abo_cd        = request->productlist[idx].abo_cd,
      p2.cur_rh_cd         = request->productlist[idx].rh_cd,
      p2.autologous_ind    = request->productlist[idx].autologous_ind,
      p2.directed_ind      = request->productlist[idx].directed_ind,
      p2.segment_nbr       = TRIM(request->productlist[idx]->segment_nbr),
      p2.supplier_prefix   = request->productlist[idx].supplier_prefix,
      p2.active_ind        = 1,
      p2.active_status_cd  = reqdata->active_status_cd,
      p2.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
      p2.active_status_prsnl_id = reqinfo->updt_id,
      p2.updt_cnt          = 0,
      p2.updt_dt_tm        = cnvtdatetime(curdate,curtime3),
      p2.updt_id           = reqinfo->updt_id,
      p2.updt_task         = reqinfo->updt_task,
      p2.updt_applctx      = reqinfo->updt_applctx

    with counter
    if (curqual = 0)
        set y = y + 1
        if (y > 1)
          set stat = alter(reply->status_data->subeventstatus, y+1)
        endif
        set reply->status_data->subeventstatus[y]->SourceObjectName = "script"
        set reply->status_data->subeventstatus[y]->SourceObjectValue
                   = "bbt_add_blood_product"
        set reply->status_data->subeventstatus[y]->OperationName
                   = "insert"
        set reply->status_data->subeventstatus[y]->OperationStatus
                   = "F"
        set reply->status_data->subeventstatus[y]->TargetObjectName
                   = "TABLE"
        set reply->status_data->subeventstatus[y]->TargetObjectValue 
                   = "blood_product"
        set reply->status_data->subeventstatus[y]->SourceObjectQual
                   = 1
        set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                   = cnvtdatetime(curdate,curtime)
        set gsub_bp_status = "FI"
        set success = 0
    else
        set success = 1
    endif
else   ;COME HERE
    call INACTIVATE_EVENTS(gsub_dummy)
    select into "nl:"
            bp.product_id
    from 
            blood_product bp
    plan    bp      where   bp.product_id     = request->productlist[idx]->product_id
                            and bp.updt_cnt       = request->productlist[idx]->bp_updt_cnt
    with    nocounter, forupdate(bp)
    if (curqual = 0)
         call LOAD_PROCESS_STATUS
        (
         /* status  */ "F",
         /* process */ "FORUPDATE",
         /* message */ "Cannot lock BLOOD_PRODUCT for update"
         )
        ;rollback  
        go to EXIT_PROGRAM
    else
        update into blood_product p2
        set p2.cur_volume        = request->productlist[idx]->cur_volume,
    ;       p2.orig_volume       = request->productlist[idx]->cur_volume,
    ;       p2.orig_label_abo_cd = request->productlist[idx].abo_cd,
    ;       p2.orig_label_rh_cd  = request->productlist[idx].rh_cd,
            p2.cur_abo_cd        = request->productlist[idx].abo_cd,
            p2.cur_rh_cd         = request->productlist[idx].rh_cd,
            p2.autologous_ind    = request->productlist[idx].autologous_ind,
            p2.directed_ind      = request->productlist[idx].directed_ind,
            p2.segment_nbr       = TRIM(request->productlist[idx]->segment_nbr),
            p2.active_ind        = 1,
            p2.active_status_cd  = reqdata->active_status_cd,
            p2.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
            p2.active_status_prsnl_id = reqinfo->updt_id,
            p2.updt_cnt          = 0,
            p2.updt_dt_tm        = cnvtdatetime(curdate,curtime3),
            p2.updt_id           = reqinfo->updt_id,
            p2.updt_task         = reqinfo->updt_task,
            p2.updt_applctx      = reqinfo->updt_applctx
        where p2.product_id = request->productlist[idx]->product_id
        if (curqual = 0)
            set y = y + 1
            if (y > 1)
                set stat = alter(reply->status_data->subeventstatus, y+1)
            endif
            set reply->status_data->subeventstatus[y]->SourceObjectName = "script"
            set reply->status_data->subeventstatus[y]->SourceObjectValue
                       = "bbt_add_blood_product"
            set reply->status_data->subeventstatus[y]->OperationName
                       = "update"
            set reply->status_data->subeventstatus[y]->OperationStatus
                       = "F"
            set reply->status_data->subeventstatus[y]->TargetObjectName
                       = "TABLE"
            set reply->status_data->subeventstatus[y]->TargetObjectValue 
                       = "blood_product"
            set reply->status_data->subeventstatus[y]->SourceObjectQual
                       = 1
            set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                       = cnvtdatetime(curdate,curtime)
            set gsub_bp_status = "FU"
            set success = 0
        else
            set success = 1
        endif
    endif
endif                           
if (success = 1)
/*002DMSEND2*/
    if (request->productlist[idx].available_ind = 0 )  /* unconfirmed */
      /* add product event here for unconfirmed, available in main part*/
        if (unconfirmed_code = 0.0)
            set gsub_bp_status = "F"
        else
/*001DMS*/  if (request->productlist[idx].conf_req_ind)
                call ADD_PRODUCT_EVENT
                (
                   /* product_id               */ seqnbr,
                   /* person_id                */ 0,
                   /* encntr_id                */ 0,
                   /* order_id                 */ 0,
                   /* bb_result_id             */ 0.0,
                   /* event_type_cd            */ unconfirmed_code,
                   /* event_dt_tm              */ internal_date->event_dt_tm, ;005 006
                   /* event_prsnl_id           */ reqinfo->updt_id,
                   /* event_status_flag        */ 0,
                   /* override_ind             */ 0,
                   /* override_reason_cd       */ 0,
                   /* related_product_event_id */ 0,
                   /* active_ind               */ 1,        /* active */
                   /* active_status_cd         */ reqdata->active_status_cd,
                   /* active_status_dt_tm      */ cnvtdatetime(curdate,curtime3),
                   /* active_status_prsnl_id   */ reqinfo->updt_id
                 )
;                       "FS" = get product_event_id (seq) failed
;                       "FA" = add product_event failed                                
;                       "OK" = add successful                                           
                if (gsub_product_event_status = "FS" or 
                    gsub_product_event_status = "FA"   )
                    set gsub_bp_status = "FI"
                endif
/*001DMS*/  endif
/*0906*/ endif
    endif
;       endif
;       add antigens if necessary on this product
    if (request->productlist[idx].spectest_qty > 0)
        FOR (idx2 = 1 to request->productlist[idx].spectest_qty) 
            /* Get unique sequence number for special_testing */
            select into "nl:"
                snbr = seq(pathnet_seq,nextval) "#####################;rp0"
            from dual
            detail
                seqnbr2 = cnvtreal(snbr)
            with format, counter
            if (curqual = 0)
                set y = y + 1
                if (y > 1)
                    set stat = alter(reply->status_data->subeventstatus, y+1)
                endif
                set gsub_bp_status = "FQ"
                set reply->status_data->subeventstatus[y]->SourceObjectName
                    = "script"
                set reply->status_data->subeventstatus[y]->SourceObjectValue
                    = "bbt_add_blood_product"
                set reply->status_data->subeventstatus[y]->OperationName
                    = "nextval"
                set reply->status_data->subeventstatus[y]->OperationStatus
                    = "F"
                set reply->status_data->subeventstatus[y]->TargetObjectName
                    = "SEQUENCE"
                set reply->status_data->subeventstatus[y]->TargetObjectValue 
                    = "pathnet_seq"
                set reply->status_data->subeventstatus[y]->SourceObjectQual
                    = 1
                set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                    = cnvtdatetime(curdate,curtime)
            else
                insert into special_testing s
                    set s.special_testing_id = seqnbr2,
                        s.product_id = seqnbr,
                        s.special_testing_cd = 
                            request->productlist[idx].spectestlist[idx2].special_testing_cd,
                        s.confirmed_ind =
                            request->productlist[idx].spectestlist[idx2].confirmed_ind,
                        s.active_ind = 1,
                        s.active_status_cd = reqdata->active_status_cd,
                        s.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
                        s.active_status_prsnl_id = reqinfo->updt_id,
                        s.updt_cnt = 0,
                        s.updt_dt_tm = cnvtdatetime(curdate,curtime3),
                        s.updt_id = reqinfo->updt_id,
                        s.updt_task = reqinfo->updt_task,
                        s.updt_applctx = reqinfo->updt_applctx
                with counter
                if (curqual = 0)
                    set gsub_bp_status = "FS"
                    set y = y + 1
                    if (y > 1)
                      set stat = alter(reply->status_data->subeventstatus, y+1)
                    endif
                    set reply->status_data.subeventstatus[y].SourceObjectName
                        = "script"
                    set reply->status_data->subeventstatus[y]->SourceObjectValue
                        = "bbt_add_blood_product"
                    set reply->status_data->subeventstatus[y]->OperationName
                        = "insert"
                    set reply->status_data->subeventstatus[y]->OperationStatus
                        = "F"
                    set reply->status_data->subeventstatus[y]->TargetObjectName
                        = "TABLE"
                    set reply->status_data->subeventstatus[y]->TargetObjectValue 
                        = "special_testing"
                    set reply->status_data->subeventstatus[y]->SourceObjectQual
                        = 1
                    set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                        = cnvtdatetime(curdate,curtime)
                endif
            endif
        endfor  /* end of loop for special testing */
    endif
    if (request->productlist[idx].autologous_ind = 1)
        if (auto_code = 0.0)
            set gsub_bp_status = "F"
        else
            set product_event_id = 0.0
             call ADD_PRODUCT_EVENT
              (
               /* product_id               */ seqnbr,
               /* person_id                */ request->productlist[x].person_id,
               /* encntr_id                */ request->productlist[idx].encntr_id,
               /* order_id                 */ 0,
               /* bb_result_id             */ 0.0,
               /* event_type_cd            */ auto_code,
               /* event_dt_tm              */ internal_date->event_dt_tm, ;005 006
               /* event_prsnl_id           */ reqinfo->updt_id,
               /* event_status_flag        */ 0,
               /* override_ind             */ 0,
               /* override_reason_cd       */ 0,
               /* related_product_event_id */ 0,
               /* active_ind               */ 1,           /* active */
               /* active_status_cd         */ reqdata->active_status_cd,
               /* active_status_dt_tm      */ cnvtdatetime(curdate,curtime3),
               /* active_status_prsnl_id   */ reqinfo->updt_id
              )
;               "FS" = get product_event_id (seq) failed
;               "FA" = add product_event failed                                
;               "OK" = add successful                                           
            if (gsub_product_event_status = "FS" or 
                gsub_product_event_status = "FA"   )
                set y = y + 1
                if (y > 1)
                    set stat = alter(reply->status_data->subeventstatus, y+1)
                endif
                set reply->status_data->subeventstatus[y]->SourceObjectName
                    =  "script"
                set reply->status_data->subeventstatus[y]->SourceObjectValue
                   = "bbt_add_blood_product"
                set reply->status_data->subeventstatus[y]->OperationName
                   = "add product event"
                set reply->status_data->subeventstatus[y]->OperationStatus
                   = "F"
                set reply->status_data->subeventstatus[y]->TargetObjectName
                   = "autologous event"
                set reply->status_data->subeventstatus[y]->TargetObjectValue 
                   = concat("add product event -- product_event_status = ", gsub_product_event_status)
                set reply->status_data->subeventstatus[y]->SourceObjectQual
                   = 1
                set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                   = cnvtdatetime(curdate,curtime)
                set failed = "T"
                ;rollback
            else
                call ADD_AUTO_DIRECTED
                    (product_event_id,
                    request->productlist[idx].person_id,
                    request->productlist[idx].encntr_id, 
                    request->productlist[idx].expected_usage_dt_tm)
                if (gsub_ad_status != "OK")
                    set gsub_bp_status = "F"
                else
                    set reply->qual[x]->product_event_id = product_event_id 
                endif
            endif
        endif
    else
        if (request->productlist[idx].directed_ind = 1)
            set product_event_id = 0.0
            call ADD_PRODUCT_EVENT
                (
               /* product_id               */ seqnbr,
               /* person_id                */ request->productlist[x].person_id,
               /* encntr_id                */ request->productlist[idx].encntr_id,
               /* order_id                 */ 0,
               /* bb_result_id             */ 0.0,
               /* event_type_cd            */ directed_code,
               /* event_dt_tm              */ internal_date->event_dt_tm, ;005 006
               /* event_prsnl_id           */ reqinfo->updt_id,
               /* event_status_flag        */ 0,
               /* override_ind             */ 0,
               /* override_reason_cd       */ 0,
               /* related_product_event_id */ 0,
               /* active_ind               */ 1,           /* active */
               /* active_status_cd         */ reqdata->active_status_cd,
               /* active_status_dt_tm      */ cnvtdatetime(curdate,curtime3),
               /* active_status_prsnl_id   */ reqinfo->updt_id
              )
    ;                   "FS" = get product_event_id (seq) failed
    ;                   "FA" = add product_event failed                                
    ;                   "OK" = add successful                                           
            if (gsub_product_event_status = "FS" or 
                gsub_product_event_status = "FA"   )
                set y = y + 1
                if (y > 1)
                    set stat = alter(reply->status_data->subeventstatus, y+1)
                endif
                set reply->status_data->subeventstatus[y]->SourceObjectName
                   = "script"
                set reply->status_data->subeventstatus[y]->SourceObjectValue
                   = "bbt_add_blood_product"
                set reply->status_data->subeventstatus[y]->OperationName
                   = "add product event"
                set reply->status_data->subeventstatus[y]->OperationStatus
                   = "F"
                set reply->status_data->subeventstatus[y]->TargetObjectName
                   = "directed event"
                set reply->status_data->subeventstatus[y]->TargetObjectValue 
                   = "add product event"
                set reply->status_data->subeventstatus[y]->SourceObjectQual
                   = 1
                set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                   = cnvtdatetime(curdate,curtime)
                set gsub_bp_status = "F"
            else
                call ADD_AUTO_DIRECTED
                (product_event_id,
                request->productlist[idx].person_id,
                request->productlist[idx].encntr_id,            
                request->productlist[idx].expected_usage_dt_tm)
                if (gsub_ad_status != "OK")
                    set gsub_bp_status = "F"
                else
                    set reply->qual[x]->product_event_id = product_event_id
                endif
            endif
        endif
    endif
endif
end   /* end of blood_product_tbls subroutine */

subroutine DERIVATIVE_TBLS(idx)

set gsub_bp_status = "OK"
if (request->productlist[idx]->product_id = 0)
  insert into derivative d
    set
       d.product_id = seqnbr,
       d.manufacturer_id = request->productlist[idx].manufacturer_id,
       d.product_cd = request->productlist[idx].product_cd,
       d.cur_avail_qty = request->productlist[idx].cur_avail_qty,
       d.cur_intl_units = request->productlist[idx].cur_intl_units,
       d.units_per_vial = request->productlist[idx].units_per_vial,
       d.item_volume = request->productlist[idx].item_volume,
       d.item_unit_meas_cd = request->productlist[idx].item_unit_meas_cd,
  ;     d.cur_expire_dt_tm = 
  ;       cnvtdatetime(request->productlist[idx]->cur_expire_dt_tm),
       d.active_ind = 1,
       d.active_status_cd = reqdata->active_status_cd,
       d.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
       d.active_status_prsnl_id = reqinfo->updt_id,
       d.updt_cnt = 0,
       d.updt_dt_tm = cnvtdatetime(curdate,curtime3),
       d.updt_id = reqinfo->updt_id,
       d.updt_task = reqinfo->updt_task,
       d.updt_applctx = reqinfo->updt_applctx
     with counter
  if (curqual = 0)
    set gsub_bp_status = "FI"
    set y = y + 1
    if (y > 1)
      set stat = alter(reply->status_data->subeventstatus, y+1)
    endif
    set reply->status_data.subeventstatus[y].SourceObjectName = "script"
    set reply->status_data->subeventstatus[y]->SourceObjectValue
      = "bbt_add_blood_product"
    set reply->status_data->subeventstatus[y]->OperationName
      = "insert"
    set reply->status_data->subeventstatus[y]->OperationStatus = "F"
    set reply->status_data->subeventstatus[y]->TargetObjectName = "TABLE"
    set reply->status_data->subeventstatus[y]->TargetObjectValue 
      = "special_testing"
    set reply->status_data->subeventstatus[y]->SourceObjectQual = 1
    set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
      = cnvtdatetime(curdate,curtime)
  endif
else ;existing product id
  select into "nl:"
          drv.product_id
  from
          derivative drv
  plan    drv    where    drv.product_id            = request->productlist[idx]->product_id
                          and drv.updt_cnt          = request->productlist[idx]->drv_updt_cnt
  with    nocounter, forupdate(drv)
  if (curqual = 0)
    call LOAD_PROCESS_STATUS
    (
    /*  status    */  "F",
    /*  process   */  "FORUPDATE",
    /*  message   */  "Cannot lock DERIVATIVE for update"
    )
    go to EXIT_PROGRAM
  else
    update into derivative d
      set d.cur_avail_qty = d.cur_avail_qty + request->productlist[idx].cur_avail_qty,
        d.cur_intl_units = d.cur_intl_units + request->productlist[idx].cur_intl_units,
        d.updt_cnt = d.updt_cnt + 1,
        d.updt_dt_tm = cnvtdatetime(curdate,curtime3),
        d.updt_id = reqinfo->updt_id,
        d.updt_task = reqinfo->updt_task,
        d.updt_applctx = reqinfo->updt_applctx
    where d.product_id = request->productlist[idx]->product_id
    if (curqual = 0)
      set y = y + 1
      if (y > 1)
          set stat = alter(reply->status_data->subeventstatus, y+1)
      endif
      set reply->status_data->subeventstatus[y]->SourceObjectName = "script"
      set reply->status_data->subeventstatus[y]->SourceObjectValue
                 = "bbt_add_blood_product"
      set reply->status_data->subeventstatus[y]->OperationName
                 = "Update"
      set reply->status_data->subeventstatus[y]->OperationStatus
                 = "F"
      set reply->status_data->subeventstatus[y]->TargetObjectName
                 = "TABLE"
      set reply->status_data->subeventstatus[y]->TargetObjectValue 
                 = "Derivative"
      set reply->status_data->subeventstatus[y]->SourceObjectQual
                 = 1
      set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                 = cnvtdatetime(curdate,curtime)
      set gsub_bp_status = "FU"
      set success = 0
    else
      set success = 1
    endif
  endif
endif  

end  /* end of DERIVATIVE_TBLS subroutine */

;subroutine for ADD_PRODUCT_EVENT
%i cclsource:bbt_add_product_event.inc
end 

subroutine GET_CODE_VALUE(sub_code_set, sub_cdf_meaning)
    /*
     * Retrieve code_value using passed code_set and meaning
     */
    select into "nl:"
        cv.code_value
    from    code_value cv
    where   cv.code_set             = sub_code_set                ; alias_type  
              and cv.cdf_meaning    = sub_cdf_meaning             ;alias_type c 
    detail
         gsub_code_value       = cv.code_value
    with    nocounter
END      ; end subroutine GET_CODE_VALUE


/************************************************/
subroutine ADD_RECEIVED_EVENT(rcvd_event_id, orig_rcvd_qty, ship_cond_cd, vis_insp_cd, rcv_intl_units)

        set gsub_rcvd_status = "OK"
        insert into receipt r
          set r.product_event_id = rcvd_event_id,
              r.product_id = seqnbr,
              r.bb_supplier_id = request->productlist[x]->bb_supplier_id,
              r.alpha_translation_id = request->productlist[x]->alpha_translation_id,
              r.orig_rcvd_qty = orig_rcvd_qty,
              r.ship_cond_cd = ship_cond_cd,
              r.vis_insp_cd = vis_insp_cd,
              r.orig_intl_units = rcv_intl_units,
              r.active_ind = 0,   /* MAKE IT INACTIVE ALWAYS */
              r.active_status_cd = reqdata->active_status_cd,
              r.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
              r.active_status_prsnl_id = reqinfo->updt_id,
              r.updt_cnt = 0,
              r.updt_dt_tm = cnvtdatetime(curdate,curtime3),
              r.updt_id = reqinfo->updt_id,
              r.updt_task = reqinfo->updt_task,   
              r.updt_applctx = reqinfo->updt_applctx
          with counter
          if (curqual = 0)
            set y = y + 1
            if (y > 1)
              set stat = alter(reply->status_data->subeventstatus, y+1)
            endif
            set reply->status_data.subeventstatus[y].SourceObjectName = "script"
            set reply->status_data->subeventstatus[y]->SourceObjectValue
                        = "bbt_add_blood_product"
            set reply->status_data->subeventstatus[y]->OperationName = "insert"
            set reply->status_data->subeventstatus[y]->OperationStatus = "F"
            set reply->status_data->subeventstatus[y]->TargetObjectName
                        = "TABLE"
            set reply->status_data->subeventstatus[y]->TargetObjectValue 
                        = "receipt"
            set reply->status_data->subeventstatus[y]->SourceObjectQual = 1
            set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                        = cnvtdatetime(curdate,curtime)
            set gsub_rcvd_status = "FI"  
          endif

end     ; end subroutine ADD_RECEIVED_EVENT
          
/************************************************/
subroutine ADD_QUARANTINE(quar_event_id, reason_cd, orig_quar_qty)

        set gsub_quar_status = "OK"
   
        insert into quarantine q
          set q.product_event_id = quar_event_id,
              q.product_id = seqnbr,
              q.quar_reason_cd = reason_cd,
              q.orig_quar_qty = orig_quar_qty,
              q.cur_quar_qty = orig_quar_qty,
              q.active_ind = 1,
              q.active_status_cd = reqdata->active_status_cd,
              q.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
              q.active_status_prsnl_id = reqinfo->updt_id,
              q.updt_cnt = 0,
              q.updt_dt_tm = cnvtdatetime(curdate,curtime3),
              q.updt_id = reqinfo->updt_id,
              q.updt_task = reqinfo->updt_task,   
              q.updt_applctx = reqinfo->updt_applctx
          with counter
          if (curqual = 0)
            set y = y + 1
            if (y > 1)
              set stat = alter(reply->status_data->subeventstatus, y+1)
            endif
            set reply->status_data.subeventstatus[y].SourceObjectName = "script"
            set reply->status_data->subeventstatus[y]->SourceObjectValue
                        = "bbt_add_blood_product"
            set reply->status_data->subeventstatus[y]->OperationName = "insert"
            set reply->status_data->subeventstatus[y]->OperationStatus = "F"
            set reply->status_data->subeventstatus[y]->TargetObjectName
                        = "TABLE"
            set reply->status_data->subeventstatus[y]->TargetObjectValue 
                        = "quarantine"
            set reply->status_data->subeventstatus[y]->SourceObjectQual = 1
            set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                        = cnvtdatetime(curdate,curtime)
            set gsub_quar_status = "FI"        
          endif
end   /* quarantine subroutine ends */
/**************************SUBROUTINE "add_assign"****************/
%i cclsource:bbt_add_assign.inc
;end   /* assignment subroutine ends */

/**************************SUBROUTINE "add_auto_directed"****************/

subroutine ADD_AUTO_DIRECTED
(autodir_event_id, autodir_person_id, autodir_encntr_id,
 autodir_usage_dt_tm)            

        set gsub_ad_status = "OK"
        insert into auto_directed ad
          set ad.product_event_id = autodir_event_id,
              ad.product_id = seqnbr,
              ad.person_id = autodir_person_id,
              ad.encntr_id = autodir_encntr_id,
              ad.expected_usage_dt_tm = cnvtdatetime(autodir_usage_dt_tm),
              ad.associated_dt_tm = cnvtdatetime(curdate,curtime3),
              ad.active_ind = 1,
              ad.active_status_cd = reqdata->active_status_cd,
              ad.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
              ad.active_status_prsnl_id = reqinfo->updt_id,
              ad.updt_cnt = 0,
              ad.updt_dt_tm = cnvtdatetime(curdate,curtime3),
              ad.updt_id = reqinfo->updt_id,
              ad.updt_task = reqinfo->updt_task,   
              ad.updt_applctx = reqinfo->updt_applctx
          with counter
          if (curqual = 0)
            set y = y + 1
            if (y > 1)
              set stat = alter(reply->status_data->subeventstatus, y+1)
            endif
            set reply->status_data.subeventstatus[y].SourceObjectName = "script"
            set reply->status_data->subeventstatus[y]->SourceObjectValue
                        = "bbt_add_blood_product"
            set reply->status_data->subeventstatus[y]->OperationName = "insert"
            set reply->status_data->subeventstatus[y]->OperationStatus = "F"
            set reply->status_data->subeventstatus[y]->TargetObjectName
                        = "TABLE"
            set reply->status_data->subeventstatus[y]->TargetObjectValue 
                        = "auto_directed"
            set reply->status_data->subeventstatus[y]->SourceObjectQual = 1
            set reply->status_data->subeventstatus[y]->Sub_Event_Dt_Tm
                        = cnvtdatetime(curdate,curtime)
            set gsub_ad_status = "F"
          endif

end   /* auto directed subroutine ends */
/*002DMSBEG3*/

;subroutine for BBT_CHG_PRODUCT_EVENT
%i cclsource:bbt_chg_product_event.inc
end

subroutine INACTIVATE_EVENTS(gsub_dummy2)
    set event_cnt = cnvtint(size(request->productlist[prod]->eventlist, 5))
;    set prod = x
    if (event_cnt > 0)
        for (event = 1 to event_cnt)
            if (request->productlist[prod]->eventlist[event]->event_type_cd = unconfirmed_code)
                    call INACTIVATE_UNCONFIRMED(gsub_dummy)
            elseif (request->productlist[prod]->eventlist[event]->event_type_cd = auto_code
                        or request->productlist[prod]->eventlist[event]->event_type_cd = directed_code)
                    call INACTIVATE_AUTO_DIRECTED(gsub_dummy)
            elseif (request->productlist[prod]->eventlist[event]->event_type_cd = disposed_code) 
                    call INACTIVATE_DISPOSED(gsub_dummy)
            elseif (request->productlist[prod]->eventlist[event]->event_type_cd = destroyed_code) 
                    call INACTIVATE_DESTROYED(gsub_dummy)
            endif
        endfor
    endif
end /* inactivate events subroutine ends */

subroutine INACTIVATE_UNCONFIRMED(sub_dummy2)
    /* 
     * Lock product_event row
     */
        select into "nl:"
            pe.product_event_id
        from 
            product_event pe
        plan    pe      where   pe.product_event_id     = request->productlist[prod]->eventlist[event]->product_event_id
                                  and pe.updt_cnt       = request->productlist[prod]->eventlist[event]->pe_updt_cnt
        with    nocounter, forupdate(pe)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "forupdate",
                 /* message */ "unconfirmed product_event row could not be locked forupdate"
                )
                RETURN
        endif
;HERE
        /*
         * Inactivate UNCONFIRMED product_event row
         */
           call CHG_PRODUCT_EVENT
                (
                 /* product_event_id       */ request->productlist[prod]->eventlist[event]->product_event_id,
                 /* event_dt_tm            */ 0, 
                 /* event_prsnl_id         */ 0, 
                 /* event_status_flag      */ 0,
                 /* active_ind             */ 0,
                 /* active_status_cd       */ reqdata->inactive_status_cd,
                 /* active_status_dt_tm    */ cnvtdatetime(curdate, curtime3),
                 /* active_status_prsnl_id */ reqinfo->updt_id,
                 /* updt_cnt               */ request->productlist[prod]->eventlist[event]->pe_updt_cnt,
                 /* lock_forupdate_ind     */ 0, ; 0 = do not lock forupdate--locked above
                 /* update_dt_tm_prsnl_ind */ 0  ; 0 = do not update original event_dt_tm/prsnl_id 
                )

            if (gsub_product_event_status = "FU")           ; product_event update failed
                call LOAD_PROCESS_STATUS
                    (
                     /* status  */ "F",
                     /* process */ "Inactivate",
                     /* message */
                        build("Unconfirmed product_event row could not be inactivated--product_event_id:",
                            internal->eventlist[event]->product_event_id)
                    )
                RETURN
    
            else
                if (gsub_product_event_status != "OK")       ; product_event update successful
                    call LOAD_PROCESS_STATUS
                        (
                         /* status  */ "F",
                         /* process */"inactivate",
                         /* message */ build("Script error!  Invalid product_event_status--", gsub_product_event_status)
                        )
                    RETURN
                endif       ; endif status != "OK"
            endif
END        ; end subroutine INACTIVATE_UNCONFIRMED

subroutine INACTIVATE_AUTO_DIRECTED(sub_dummy2)
    /* 
     * Lock product_event and auto_directed rows
     */
        select into "nl:"
            pe.product_event_id
        from 
            product_event pe
        plan    pe      where   pe.product_event_id     = request->productlist[prod]->eventlist[event]->product_event_id
                                  and pe.updt_cnt       = request->productlist[prod]->eventlist[event]->pe_updt_cnt
        with    nocounter, forupdate(pe)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "forupdate",
                 /* message */ "product_event rows could not be locked forupdate"
                )
                RETURN
        endif
        
        select into "nl:"
            ad.product_event_id
        from 
            auto_directed ad
        plan    ad      where   ad.product_event_id     = request->productlist[prod]->eventlist[event]->product_event_id
                                  and ad.updt_cnt       = request->productlist[prod]->eventlist[event]->pe_child_updt_cnt
        with    nocounter, forupdate(ad)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "forupdate",
                 /* message */ "auto_directed rows could not be locked forupdate"
                )
                RETURN
        endif

        /*
         * Inactivate AUTO_DIRECTED product_event row
         */
           call CHG_PRODUCT_EVENT
                (
                 /* product_event_id       */ request->productlist[prod]->eventlist[event]->product_event_id,
                 /* event_dt_tm            */ 0, 
                 /* event_prsnl_id         */ 0, 
                 /* event_status_flag      */ 0,
                 /* active_ind             */ 0,
                 /* active_status_cd       */ reqdata->inactive_status_cd,
                 /* active_status_dt_tm    */ cnvtdatetime(curdate, curtime3),
                 /* active_status_prsnl_id */ reqinfo->updt_id,
                 /* updt_cnt               */ request->productlist[prod]->eventlist[event]->pe_updt_cnt,
                 /* lock_forupdate_ind     */ 0, ; 0 = do not lock forupdate--locked above
                 /* update_dt_tm_prsnl_ind */ 0  ; 0 = do not update original event_dt_tm/prsnl_id 
                )

            if (gsub_product_event_status = "FU")           ; product_event update failed
                call LOAD_PROCESS_STATUS
                    (
                     /* status  */ "F",
                     /* process */ "Inactivate",
                     /* message */
                        build("Auto_directed product_event row could not be inactivated--product_event_id:",
                            internal->eventlist[event]->product_event_id)
                    )
                RETURN
    
            elseif (gsub_product_event_status = "OK")       ; product_event update successful
                /*  
                 * Update and inactivate auto_directed rows) 
                 */
                    call CHG_AUTO_DIRECTED
                    (
                     /* product_event_id       */ request->productlist[prod]->eventlist[event]->product_event_id,
                     /* updt_cnt               */ request->productlist[prod]->eventlist[event]->pe_child_updt_cnt,
                     /* active_ind             */ 0,
                     /* active_status_cd       */ reqdata->inactive_status_cd,
                     /* active_status_dt_tm    */ cnvtdatetime(curdate, curtime3),
                     /* active_status_prsnl_id */ reqinfo->updt_id
                    )
            
                if (curqual = 0)
                    call LOAD_PROCESS_STATUS(gsub_status, gsub_process, gsub_message)
                    RETURN
                endif    ; endif curqual = 0 CHG_AUTO_DIRECTED
            else
                call LOAD_PROCESS_STATUS
                    (
                     /* status  */ "F",
                     /* process */"inactivate auto_directed product_event",
                     /* message */ build("Script error!  Invalid product_event_status--", gsub_product_event_status)
                    )
                RETURN
            endif
END        ; end subroutine INACTIVATE_AUTO_DIRECTED

subroutine INACTIVATE_DESTROYED(sub_dummy2)

select ; into "cer_print:bk_chk_rcvd_dst.txt"
    d.seq
from (dummyt d with seq = 1)
detail
    row 1
    col 1, request->productlist[x]->product_nbr
    col 20, "DESTROYED"
with nocounter

    /* 
     * Lock product_event and destruction rows
     */
        select into "nl:"
            pe.product_event_id
        from 
            product_event pe
        plan    pe      where   pe.product_event_id     = request->productlist[prod]->eventlist[event]->product_event_id
                                  and pe.updt_cnt       = request->productlist[prod]->eventlist[event]->pe_updt_cnt
        with    nocounter, forupdate(pe)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "forupdate",
                 /* message */ "product_event rows could not be locked forupdate"
                )
                RETURN
        endif
        
        select into "nl:"
            d.product_event_id
        from 
            destruction d
        plan    d      where   d.product_event_id     = request->productlist[prod]->eventlist[event]->product_event_id
                                  and d.updt_cnt       = request->productlist[prod]->eventlist[event]->pe_child_updt_cnt
        with    nocounter, forupdate(d)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "forupdate",
                 /* message */ "destroyed rows could not be locked forupdate"
                )
                RETURN
        endif

        /*
         * Inactivate DESTROYED product_event row
         */
           call CHG_PRODUCT_EVENT
                (
                 /* product_event_id       */ request->productlist[prod]->eventlist[event]->product_event_id,
                 /* event_dt_tm            */ 0, 
                 /* event_prsnl_id         */ 0, 
                 /* event_status_flag      */ 0,
                 /* active_ind             */ 0,
                 /* active_status_cd       */ reqdata->inactive_status_cd,
                 /* active_status_dt_tm    */ cnvtdatetime(curdate, curtime3),
                 /* active_status_prsnl_id */ reqinfo->updt_id,
                 /* updt_cnt               */ request->productlist[prod]->eventlist[event]->pe_updt_cnt,
                 /* lock_forupdate_ind     */ 0, ; 0 = do not lock forupdate--locked above
                 /* update_dt_tm_prsnl_ind */ 0  ; 0 = do not update original event_dt_tm/prsnl_id 
                )

            if (gsub_product_event_status = "FU")           ; product_event update failed
                call LOAD_PROCESS_STATUS
                    (
                     /* status  */ "F",
                     /* process */ "Inactivate",
                     /* message */
                        build("Auto_directed product_event row could not be inactivated--product_event_id:",
                            internal->eventlist[event]->product_event_id)
                    )
                RETURN
    
            elseif (gsub_product_event_status = "OK")       ; product_event update successful
                /*  
                 * Update and inactivate destroyed rows) 
                 */
                    call CHG_DESTROYED
                    (
                     /* product_event_id       */ request->productlist[prod]->eventlist[event]->product_event_id,
                     /* updt_cnt               */ request->productlist[prod]->eventlist[event]->pe_child_updt_cnt,
                     /* active_ind             */ 0,
                     /* active_status_cd       */ reqdata->inactive_status_cd,
                     /* active_status_dt_tm    */ cnvtdatetime(curdate, curtime3),
                     /* active_status_prsnl_id */ reqinfo->updt_id
                    )
            
                if (curqual = 0)
                    call LOAD_PROCESS_STATUS(gsub_status, gsub_process, gsub_message)
                    RETURN
                endif    ; endif curqual = 0 CHG_DEST
            else
                call LOAD_PROCESS_STATUS
                    (
                     /* status  */ "F",
                     /* process */"inactivate",
                     /* message */ build("Script error!  Invalid product_event_status--", gsub_product_event_status)
                    )
                RETURN
            endif
END        ; end subroutine INACTIVATE_DESTROYED


subroutine INACTIVATE_DISPOSED(sub_dummy2)

select ; into "cer_print:bk_chk_rcvd_dsp.txt"
    d.seq
from (dummyt d with seq = 1)
detail
    row 1
    col 1, request->productlist[x]->product_nbr
    col 20, "DISPOSED"
with nocounter

    /* 
     * Lock product_event and auto_directed rows
     */
        select into "nl:"
            pe.product_event_id
        from 
            product_event pe
        plan    pe      where   pe.product_event_id     = request->productlist[prod]->eventlist[event]->product_event_id
                                  and pe.updt_cnt       = request->productlist[prod]->eventlist[event]->pe_updt_cnt
        with    nocounter, forupdate(pe)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "forupdate",
                 /* message */ "product_event rows could not be locked forupdate"
                )
                RETURN
        endif
        
        select into "nl:"
            di.product_event_id
        from 
            disposition di
        plan    di      where   di.product_event_id     = request->productlist[prod]->eventlist[event]->product_event_id
                                  and di.updt_cnt       = request->productlist[prod]->eventlist[event]->pe_child_updt_cnt
        with    nocounter, forupdate(di)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "forupdate",
                 /* message */ "disposed rows could not be locked forupdate"
                )
                RETURN
        endif

        /*
         * Inactivate DISPENSED product_event row
         */
           call CHG_PRODUCT_EVENT
                (
                 /* product_event_id       */ request->productlist[prod]->eventlist[event]->product_event_id,
                 /* event_dt_tm            */ 0, 
                 /* event_prsnl_id         */ 0, 
                 /* event_status_flag      */ 0,
                 /* active_ind             */ 0,
                 /* active_status_cd       */ reqdata->inactive_status_cd,
                 /* active_status_dt_tm    */ cnvtdatetime(curdate, curtime3),
                 /* active_status_prsnl_id */ reqinfo->updt_id,
                 /* updt_cnt               */ request->productlist[prod]->eventlist[event]->pe_updt_cnt,
                 /* lock_forupdate_ind     */ 0, ; 0 = do not lock forupdate--locked above
                 /* update_dt_tm_prsnl_ind */ 0  ; 0 = do not update original event_dt_tm/prsnl_id 
                )

            if (gsub_product_event_status = "FU")           ; product_event update failed
                call LOAD_PROCESS_STATUS
                    (
                     /* status  */ "F",
                     /* process */ "Inactivate",
                     /* message */
                        build("Disposed product_event row could not be inactivated--product_event_id:",
                            internal->eventlist[event]->product_event_id)
                    )
                RETURN
    
            elseif (gsub_product_event_status = "OK")       ; product_event update successful
                /*  
                 * Update and inactivate auto_directed rows) 
                 */
                    call CHG_DISPOSED
                    (
                     /* product_event_id       */ request->productlist[prod]->eventlist[event]->product_event_id,
                     /* updt_cnt               */ request->productlist[prod]->eventlist[event]->pe_child_updt_cnt,
                     /* active_ind             */ 0,
                     /* active_status_cd       */ reqdata->inactive_status_cd,
                     /* active_status_dt_tm    */ cnvtdatetime(curdate, curtime3),
                     /* active_status_prsnl_id */ reqinfo->updt_id
                    )
            
                if (curqual = 0)
                    call LOAD_PROCESS_STATUS(gsub_status, gsub_process, gsub_message)
                    RETURN
                endif    ; endif curqual = 0 CHG_AUTO_DIRECTED
            else
                call LOAD_PROCESS_STATUS
                    (
                     /* status  */ "F",
                     /* process */"inactivate",
                     /* message */ build("Script error!  Invalid product_event_status--", gsub_product_event_status)
                    )
                RETURN
            endif
END        ; end subroutine INACTIVATE_DISPOSED

subroutine CHG_AUTO_DIRECTED
    (
     sub_product_event_id,
     sub_updt_cnt,
     sub_active_ind,
     sub_active_status_cd,
     sub_active_status_dt_tm,
     sub_active_status_prsnl_id
    )
                      
    update into auto_directed ad
        set ad.active_ind               = sub_active_ind,  
            ad.active_status_cd         = sub_active_status_cd,
            ad.active_status_dt_tm      = cnvtdatetime(sub_active_status_dt_tm),
            ad.active_status_prsnl_id   = sub_active_status_prsnl_id,
            ad.updt_cnt                 = ad.updt_cnt + 1,
            ad.updt_dt_tm               = cnvtdatetime(curdate, curtime3),
            ad.updt_task                = reqinfo->updt_task,
            ad.updt_id                  = reqinfo->updt_id,
            ad.updt_applctx             = reqinfo->updt_applctx

    where   ad.product_event_id         = sub_product_event_id
              and ad.updt_cnt           = sub_updt_cnt

    with    nocounter

    if (curqual = 0)
        set gsub_status = "F"
        set gsub_process = "inactivate auto_directed row"
        set gsub_message = "auto_directed row could not be inactivated" 
    endif    
END     ; end subroutine CHG_AUTO_DIRECTED

subroutine CHG_DESTROYED
    (
     sub_product_event_id,
     sub_updt_cnt,
     sub_active_ind,
     sub_active_status_cd,
     sub_active_status_dt_tm,
     sub_active_status_prsnl_id
    )
                      
    update into destruction d
        set d.active_ind               = sub_active_ind,  
            d.active_status_cd         = sub_active_status_cd,
            d.active_status_dt_tm      = cnvtdatetime(sub_active_status_dt_tm),
            d.active_status_prsnl_id   = sub_active_status_prsnl_id,
            d.updt_cnt                 = d.updt_cnt + 1,
            d.updt_dt_tm               = cnvtdatetime(curdate, curtime3),
            d.updt_task                = reqinfo->updt_task,
            d.updt_id                  = reqinfo->updt_id,
            d.updt_applctx             = reqinfo->updt_applctx

    where   d.product_event_id         = sub_product_event_id
;              and d.updt_cnt           = sub_updt_cnt

    with    nocounter

    if (curqual = 0)
        set gsub_status = "F"
        set gsub_process = "inactivate destruction row"
        set gsub_message = "destruction row could not be inactivated" 
    endif    
END     ; end subroutine CHG_DESTROYED


subroutine CHG_DISPOSED
    (
     sub_product_event_id,
     sub_updt_cnt,
     sub_active_ind,
     sub_active_status_cd,
     sub_active_status_dt_tm,
     sub_active_status_prsnl_id
    )
                      
    update into disposition di
        set di.active_ind               = sub_active_ind,  
            di.active_status_cd         = sub_active_status_cd,
            di.active_status_dt_tm      = cnvtdatetime(sub_active_status_dt_tm),
            di.active_status_prsnl_id   = sub_active_status_prsnl_id,
            di.updt_cnt                 = di.updt_cnt + 1,
            di.updt_dt_tm               = cnvtdatetime(curdate, curtime3),
            di.updt_task                = reqinfo->updt_task,
            di.updt_id                  = reqinfo->updt_id,
            di.updt_applctx             = reqinfo->updt_applctx

    where   di.product_event_id         = sub_product_event_id
              and di.updt_cnt           = sub_updt_cnt

    with    nocounter

    if (curqual = 0)
        set gsub_status = "F"
        set gsub_process = "inactivate disposed row"
        set gsub_message = "disposed row could not be inactivated" 
    endif    
END     ; end subroutine CHG_DISPOSED


subroutine LOAD_PROCESS_STATUS
    (
     sub_status,
     sub_process,
     sub_message
    )
    set reply->status_data[prod]->status = "F"
    set reply->status_data[prod]->subeventstatus[1]->SourceObjectName = "BBT_ADD_PRODUCT"
    set reply->status_data[prod]->subeventstatus[1]->SourceObjectQual = 0
    set reply->status_data[prod]->subeventstatus[1]->SourceObjectValue = ""
    set reply->status_data[prod]->subeventstatus[1]->operationstatus = sub_status
    set reply->status_data[prod]->subeventstatus[1]->targetobjectname = sub_process
    set reply->status_data[prod]->subeventstatus[1]->targetobjectvalue = sub_message

    set failed = "T"    
    go to EXIT_PROGRAM
END         ; end subroutine LOAD_PROCESS_STATUS

/*002DMSEND3*/

#exit_program
        if (failed = "F")
           set reqinfo->commit_ind = 1
           set reply->status_data->status = "S"
        else 
           set reqinfo->commit_ind = 0
        endif

call echo(build("status_data->status =", reply->status_data->status))
for (x = 1 to count1)
    call echo(reply->status_data->subeventstatus[x]->OperationName)
    call echo(reply->status_data->subeventstatus[x]->OperationStatus)
    call echo(reply->status_data->subeventstatus[x]->TargetObjectName)
    call echo(reply->status_data->subeventstatus[x]->TargetObjectValue)
endfor

end go

;Generated by GNU enscript 1.6.4.
