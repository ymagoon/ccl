 ;;Solution_Test/script/PathNet -- BB Transfusion/BBDuplicateCDF/BBT_DELETE_DUPLICATE_1635.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:   bbt_delete_duplicate_1635.prg
        Object name:        bbt_delete_duplicate_1635    
        Request #:          none

        Product:            PathNet
        Product Team:       BBT    
        HNA Version:        500
        CCL Version:        4.0

        Program purpose:    Delete (inactivate) duplicate cdf_meanings for a code_set    

        Tables read:        code_value, service_directory

        Tables updated:     code_value

        Executing from:     Readme

        Special Notes:          

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 08/24/99 Doug Saus            Initial Release
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

Drop program bbt_delete_duplicate_1635:dba go
Create program bbt_delete_duplicate_1635:dba

record Reply
(
%i cclsource:status_block.inc
)

record CodeSet1635
(
  1 CodeValueRows[*]
      2 code_value = f8
      2 cdf_meaning = c12
      2 active_ind = i2
)

record Duplicates
(
  1 CDFs[*]
      2 cdf_meaning = c12
      2 CodeValues[*]
          3 code_value = f8
          3 delete_ind = i2
)

record DeleteList
(
  1 CodeValues[*]
      2 code_value = f8
)

set sErrorMsg = fillstring(255," ")
set nErrorStatus = ERROR(sErrorMsg, 1)

select into "nl:"
    cv.code_value
    , cv.cdf_meaning
    , cv.active_ind
from 
    code_value cv
where   cv.code_set = 1635

head report
    row_cnt = 0
    stat = alterlist(CodeSet1635->CodeValueRows, 5)

detail
    row_cnt = row_cnt + 1
    if (mod(row_cnt,5) = 1 and row_cnt != 1)
        stat = alterlist(CodeSet1635->CodeValueRows, row_cnt + 4)
    endif
    CodeSet1635->CodeValueRows[row_cnt].code_value = cv.code_value
    CodeSet1635->CodeValueRows[row_cnt].cdf_meaning = cv.cdf_meaning
    CodeSet1635->CodeValueRows[row_cnt].active_ind = cv.active_ind

foot report
    stat = alterlist(CodeSet1635->CodeValueRows, row_cnt)

with nocounter

set nErrorStatus = ERROR(sErrorMsg,0)
if (nErrorStatus != 0)
    go to SELECT_ERROR
endif

select into "nl:"
    cv.code_value
    , cv.cdf_meaning

from 
    code_value cv
    , (dummyt d_cv with seq = value(size(CodeSet1635->CodeValueRows,5)))
    , (dummyt d_sd with seq = 1)
    , service_directory sd

plan d_cv
join cv where cv.code_set = 1635
          and CodeSet1635->CodeValueRows[d_cv.seq].cdf_meaning = cv.cdf_meaning
          and CodeSet1635->CodeValueRows[d_cv.seq].code_value != cv.code_value
          and cv.active_ind = 1

join d_sd
join sd where sd.bb_processing_cd = cv.code_value

order by 
    cv.cdf_meaning
    , cv.code_value

head report
    cdf_cnt = 0
    code_cnt = 0
    stat = alterlist(Duplicates->CDFs, 5)

head cv.cdf_meaning
    code_cnt = 0
    cdf_cnt = cdf_cnt + 1
    if (mod(cdf_cnt,5) = 1 and cdf_cnt != 1)
        stat = alterlist(Duplicates->CDFs, cdf_cnt + 4)
    endif
    Duplicates->CDFs[cdf_cnt].cdf_meaning = cv.cdf_meaning
    stat = alterlist(Duplicates->CDFs[cdf_cnt]->CodeValues, 5)

head cv.code_value
    code_cnt = code_cnt + 1
    if (mod(code_cnt,5) = 1 and code_cnt != 1)
        stat = alterlist(Duplicates->CDFs[cdf_cnt]->CodeValues, code_cnt + 4)
    endif
    Duplicates->CDFs[cdf_cnt]->CodeValues[code_cnt].code_value = cv.code_value
    if (sd.seq > 0)
        Duplicates->CDFs[cdf_cnt]->CodeValues[code_cnt].delete_ind = 0
    else
        Duplicates->CDFs[cdf_cnt]->CodeValues[code_cnt].delete_ind = 1
    endif

detail
    row + 0

foot cv.code_value
    row + 0

foot cv.cdf_meaning
    stat = alterlist(Duplicates->CDFs[cdf_cnt]->CodeValues,code_cnt)
    cnt = 1
    HasDataCount = 0
    while  (cnt <= code_cnt)
        if (Duplicates->CDFs[cdf_cnt]->CodeValues[cnt].delete_ind = 0)
            HasDataCount = HasDataCount + 1
        endif
        cnt = cnt + 1
    endwhile
    if (code_cnt > 0)
        if (HasDataCount = 0)
            Duplicates->CDFs[cdf_cnt]->CodeValues[1].delete_ind = 0
        ;elseif (HasDataCount = 1
            ;  do nothing, structure already flagged correctly
        elseif (HasDataCount > 1)
            HasDataCount = HasDataCount
            ;log message
        endif
    endif

foot report
    stat = alterlist(Duplicates->CDFs, cdf_cnt)

with nocounter, outerjoin(d_sd)

set nErrorStatus = ERROR(sErrorMsg,0)
if (nErrorStatus = 0)
    if (curqual > 0)
        set count1 = 0
        set count2 = 0
        set code_value_cnt = 0
        set stat = alterlist(DeleteList->CodeValues, 5)
        for (count1 = 1 to size(Duplicates->CDFs,5))
            for (count2 = 1 to size(Duplicates->CDFs[count1]->CodeValues,5))
                if (Duplicates->CDFs[count1]->CodeValues[count2].delete_ind = 1)
                    set code_value_cnt = code_value_cnt + 1     
                    if (mod(code_value_cnt,5) = 1 and code_value_cnt != 1)
                        set stat = alterlist(DeleteList->CodeValues, code_value_cnt + 4)
                    endif
                    set DeleteList->CodeValues[code_value_cnt].code_value = 
                                        Duplicates->CDFs[count1]->CodeValues[count2].code_value
                endif
            endfor
        endfor


        select into "nl:"
            cv.*
        from     
            (dummyt d with seq = value(size(DeleteList->CodeValues,5)))
            , code_value cv
        plan d
        join cv where cv.code_value = DeleteList->CodeValues[d.seq].code_value

        with nocounter, forupdate(cv)

        set nErrorStatus = ERROR(sErrorMsg, 0)
        if (nErrorStatus = 0)
            update into 
                (dummyt d with seq = value(size(DeleteList->CodeValues,5)))
                , code_value cv
            set cv.active_ind = 0

            plan d
            join cv where cv.code_value = DeleteList->CodeValues[d.seq].code_value    

            with nocounter

            set nErrorStatus = ERROR(sErrorMsg,0)
            if (nErrorStatus = 0)
                set reply->status_data->status = "S"
            else
                go to SELECT_ERROR
            endif
        else
            go to SELECT_ERROR
        endif
    else
        set reply->status_data->status = "S"
        go to EXIT_SCRIPT ;nothing to do, no duplicates
    endif
else
    go to SELECT_ERROR
endif

#SELECT_ERROR
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1]->OperationStatus = "F"
    set reply->status_data->subeventstatus[1]->TargetObjectValue = sErrorMsg

#EXIT_SCRIPT

end 

go

;Generated by GNU enscript 1.6.4.
