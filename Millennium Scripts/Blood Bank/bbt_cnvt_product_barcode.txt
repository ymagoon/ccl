 ;;Solution_Test/script/PathNet -- BB Transfusion/Producttool/BBT_CNVT_PRODUCT_BARCODE.PRG Turn on black mode

/****************************************************************************
 *                                                                      *
 *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
 *                              Technology, Inc.                        *
 *       Revision      (c) 1984-1995 Cerner Corporation                 *
 *                                                                      *
 *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
 *  This material contains the valuable properties and trade secrets of *
 *  Cerner Corporation of Kansas City, Missouri, United States of       *
 *  America (Cerner), embodying substantial creative efforts and        *
 *  confidential information, ideas and expressions, no part of which   *
 *  may be reproduced or transmitted in any form or by any means, or    *
 *  retained in any storage or retrieval system without the express     *
 *  written permission of Cerner.                                       *
 *                                                                      *
 *  Cerner is a registered mark of Cerner Corporation.                  *
 *                                                                      *
 ************************************************************************
 
          Date Written:       10/21/96
          Program purpose:    convert product barcode table to make each row have unique
                                barcode_id
*/ 
drop program bbt_cnvt_product_barcode:dba go
create program bbt_cnvt_product_barcode:dba

record pb_rec
(
 1  pb[*]
     2  PRODUCT_BARCODE_ID          = f8               
     2  PRODUCT_BARCODE             = c15 
     2  PRODUCT_CD                  = f8     
     2  PRODUCT_CAT_CD              = f8     
     2  PRODUCT_CLASS_CD            = f8     
     2  ACTIVE_IND                  = i2     
     2  ACTIVE_STATUS_CD            = f8     
     2  ACTIVE_STATUS_DT_TM         = dq8     
     2  ACTIVE_STATUS_PRSNL_ID      = f8     
     2  UPDT_CNT                    = i4     
     2  UPDT_DT_TM                  = dq8     
     2  UPDT_ID                     = f8     
     2  UPDT_TASK                   = i4     
     2  UPDT_APPLCTX                = i4     
)

set failed = "F"
set pb_cnt = 0
set new_product_barcode_seq = 0.0

/* 1st clean up garbage rows with blank product_barcode   */

delete from product_barcode
where product_barcode = "               "
with nocounter
if (curqual > 0)  
   commit
endif

select into "nl:"
    pb.PRODUCT_BARCODE_ID,            
    pb.PRODUCT_BARCODE,
    pb.PRODUCT_CD,
    pb.PRODUCT_CAT_CD,
    pb.PRODUCT_CLASS_CD,                 
    pb.ACTIVE_IND,                 
    pb.ACTIVE_STATUS_CD,                 
    pb.ACTIVE_STATUS_DT_TM,              
    pb.ACTIVE_STATUS_PRSNL_ID,           
    pb.UPDT_CNT,                         
    pb.UPDT_DT_TM,                       
    pb.UPDT_ID,                      
    pb.UPDT_TASK,                        
    pb.UPDT_APPLCTX

from product_barcode pb

order by
   pb.product_barcode,
   pb.active_ind,
   pb.updt_cnt
; check last updated active barcode first

head report
     stat = alterlist(pb_rec->pb, 100)

head pb.product_barcode
    if (trim(pb.product_barcode) > ""
    and pb.active_ind = 1)
        pb_cnt = pb_cnt + 1
        if (mod(pb_cnt, 100) = 1 and pb_cnt != 1)
            stat = alterlist(pb_rec->pb, pb_cnt + 99)
        endif
        pb_rec->pb[pb_cnt]->PRODUCT_BARCODE_ID  = pb.product_barcode_id
        pb_rec->pb[pb_cnt]->PRODUCT_BARCODE  = pb.product_barcode        
        pb_rec->pb[pb_cnt]->PRODUCT_CD = pb.PRODUCT_CD                       
        pb_rec->pb[pb_cnt]->PRODUCT_CAT_CD = pb.PRODUCT_CAT_CD                   
        pb_rec->pb[pb_cnt]->PRODUCT_CLASS_CD = pb.PRODUCT_CLASS_CD                 
        pb_rec->pb[pb_cnt]->ACTIVE_IND = pb.ACTIVE_IND                       
        pb_rec->pb[pb_cnt]->ACTIVE_STATUS_CD = pb.ACTIVE_STATUS_CD                 
        pb_rec->pb[pb_cnt]->ACTIVE_STATUS_DT_TM = 
              cnvtdatetime(pb.ACTIVE_STATUS_DT_TM)              
        pb_rec->pb[pb_cnt]->ACTIVE_STATUS_PRSNL_ID = pb.ACTIVE_STATUS_PRSNL_ID           
        pb_rec->pb[pb_cnt]->UPDT_CNT = pb.UPDT_CNT                         
        pb_rec->pb[pb_cnt]->UPDT_DT_TM = cnvtdatetime(pb.UPDT_DT_TM)
        pb_rec->pb[pb_cnt]->UPDT_ID = pb.UPDT_ID                          
        pb_rec->pb[pb_cnt]->UPDT_TASK = pb.UPDT_TASK                        
        pb_rec->pb[pb_cnt]->UPDT_APPLCTX = pb.UPDT_APPLCTX                     
    endif

foot report
    stat = alterlist(pb_rec->pb, pb_cnt)

with nocounter

if (curqual= 0)
  go to EXIT_SCRIPT
endif

if (pb_cnt = 0)
   go to EXIT_SCRIPT
endif

for (pb = 1 to pb_cnt)
  if (pb_rec->pb[pb].product_barcode_id > 0)
     set pb_cnt = pb_cnt
  else
     set new_product_barcode_seq = 0.0
     set new_product_barcode_seq = next_pathnet_seq(0)
     set pb_rec->pb[pb]->product_barcode_id = new_product_barcode_seq
  endif
endfor

delete from product_barcode pb
where trim(pb.product_barcode) > ""
        or trim(pb.product_barcode) <= ""
with nocounter

if (curqual = 0)  
   set failed = "T"
   go to commit_rollback
endif

for (pb = 1 to pb_cnt)

insert into product_barcode pb

set pb.product_barcode_id       = pb_rec->pb[pb]->PRODUCT_BARCODE_ID
    , PRODUCT_BARCODE           = pb_rec->pb[pb]->PRODUCT_BARCODE
    , PRODUCT_CD                = pb_rec->pb[pb]->PRODUCT_CD
    , PRODUCT_CAT_CD            = pb_rec->pb[pb]->PRODUCT_CAT_CD
    , PRODUCT_CLASS_CD          = pb_rec->pb[pb]->PRODUCT_CLASS_CD
    , ACTIVE_IND                = pb_rec->pb[pb]->ACTIVE_IND
    , ACTIVE_STATUS_CD          = pb_rec->pb[pb]->ACTIVE_STATUS_CD
    , ACTIVE_STATUS_DT_TM   = cnvtdatetime(pb_rec->pb[pb]->ACTIVE_STATUS_DT_TM)
    , ACTIVE_STATUS_PRSNL_ID    = pb_rec->pb[pb]->ACTIVE_STATUS_PRSNL_ID
    , UPDT_CNT                  = pb_rec->pb[pb]->UPDT_CNT
    , UPDT_DT_TM                = cnvtdatetime(pb_rec->pb[pb]->UPDT_DT_TM)
    , UPDT_ID                   = pb_rec->pb[pb]->UPDT_ID
    , UPDT_TASK                 = pb_rec->pb[pb]->UPDT_TASK
    , UPDT_APPLCTX              = pb_rec->pb[pb]->UPDT_APPLCTX

with counter

if (curqual = 0)
    set failed = "T"
    go to COMMIT_ROLLBACK
endif

endfor
 
%i cclsource:bbt_get_pathnet_seq_sub.inc

#COMMIT_ROLLBACK
if (failed = "F")
    commit
else
    rollback
endif

#EXIT_SCRIPT
end go

;Generated by GNU enscript 1.6.4.
