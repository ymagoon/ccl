 ;;Solution_Test/script/PathNet -- BB Transfusion/BB_OCD_README_SCRIPTS/bbt_rdm_import_exception_task.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

	Source file name:       bbt_rdm_import_exception_task.prg
	Object name:            bbt_rdm_import_exception_task
	Readme #:		0

	Product:		PathNet Blood Bank
	Product Team:		PathNet Blood Bank
	HNA Version:            500
	CCL Version:

	Program purpose:        Import new blood bank task numbers to task_access table.

	Tables read,		TABLE_NAME		METHOD (UNIQUE, RANGE, FULL)
	and access method:      --------------------    -----------------------------
				CODE_VALUE		RANGE (BETTER INDEX EXISTS)

	Tables updated:		TASK_ACCESS

	Executing from:

	Special Notes:		Each section should clearly identify what the purpose
				of that README step is.

	Run Occurance:		(select ONE of the following)
				-----------------------------
				[X] 1. RUN ONCE
				[ ] 2. RUN MANY

	ReadMe Category:	(select ONE of the following)
				-----------------------------
				[X] 1. Data Load
				[ ] 2. Data Conversion
				[ ] 3. Data Migration
				[ ] 4. File Copy

	Execution Time:		(select ONE of the following)
				------------------------------------
				[ ] 1. Uptime before uptime schema.
				[ ] 2. Uptime after uptime schema.
				[ ] 3. Downtime before downtime schema.
				[X] 4. Downtime after downtime schema.
				[ ] 5. Uptime after all other components.

	Exec. Justification:	DELETE occurs, would break existing functionality.

        Parent Script:		n/a

	Check Script:		bbt_rdm_import_exception_task

	Data file for import:	bbt_exception_task_import.CSV

	Execution Duration:	(select ONE of the following)
				----------------------------------
				[X] 1. Fixed Time
				[ ] 2. Driver Table: ___________________________

******************************************************************************/


;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer		Comment 			    *
;    *--- -------- --------------------	----------------------------------- *
;     000 08/12/02 Ronda Zheng	        Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_rdm_import_exception_task:dba go
create program bbt_rdm_import_exception_task:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
set sREADME_NAME = "bbt_rdm_import_exception_task"
CALL LOGSCRIPTSTART(sREADME_NAME)

/************************
** README ACTION STEPS **
************************/
record request
  (
   1  qual[*]
      2  old_task         = f8
      2  new_task         = f8
  )

declare list_cnt = i2  with public, noconstant(0)
declare p_cnt = i2     with public, noconstant(0)
declare x = i2         with public, noconstant(0)

set list_cnt = size(requestin->list_0, 5)

for (x = 1 to list_cnt)
  set p_cnt = p_cnt + 1
  set stat = alterlist(request->qual, p_cnt)
  set request->qual[p_cnt].old_task = cnvtreal(requestin->list_0[x].old_task)
  set request->qual[p_cnt].new_task = cnvtreal(requestin->list_0[x].new_task)
endfor
set stat = alterlist(request->qual, p_cnt)

#SCRIPT
/***********************************************************************************
** Ensure that the new tasks are not exist in the table. If exist, delete them first.           		
************************************************************************************/

delete from task_access ta,
  (dummyt d1 with seq = value(size(request->qual, 5)))
set ta.seq = 1
plan d1
join ta where ta.task_number = request->qual[d1.seq].new_task
with nocounter


/*********************************************************
** Get the app_group_cd for the task_number     		**
*********************************************************/

for (x=1 to size(request->qual,5))
  insert into task_access n
    (n.task_number, n.app_group_cd, n.updt_dt_tm,
     n.updt_id, n.updt_task, n.updt_cnt, n.updt_applctx)
    (select requestin->list_0[x].new_task, o.app_group_cd, o.updt_dt_tm,
            o.updt_id, o.updt_task, o.updt_cnt, o.updt_applctx
     from task_access o
     where o.task_number = request->qual[x].old_task)
  with nocounter
  
endfor


if (curqual = 0)
  CALL LOGSTATUS("Insert into TASK_ACCESS failed", "F")
  ROLLBACK
else
  CALL LOGSTATUS("Insert Successful.", "S")
  COMMIT
endif



;---------------------------------------------------------
#EXIT_SCRIPT
/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
CALL LOGSCRIPTEND(sREADME_NAME)

end go

;Generated by GNU enscript 1.6.4.
