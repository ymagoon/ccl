 ;;Solution_Test/script/PathNet -- BB Transfusion/BBT_RESULTGROUPTOOL/BBT_GET_BB_TEST_GROUP.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_get_bb_test_group.prg 
        Object name:            bbt_get_bb_test_group
        Request #:              225???

        Product:                PathNet
        Product Team:           Blood Bank Transfusion
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieve all bb_test_group rows and their 
                                associated bb_group_component rows

        Tables read:            bb_test_group, bb_group_component
        Tables updated:         (none)
        Executing from:         vb application name

        Special Notes:          ?

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer                     Comment                     *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 09/07/97 Jon Weekes           Initial Release                     *
;    *001 10/27/97 Jon Weekes           Modified to NEVER return inactive   *
;       bb_group_component rows.  Previously if return_inactive_ind = 1     *
;       both inactive bb_test_group AND bb_group_component rows were        *
;       returned.  Now return_inactive_ind will only apply to bb_test_group *
;       rows.                                                               *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program bbt_get_bb_test_group:dba go
create program bbt_get_bb_test_group:dba

/*
record request
(
 1  return_inactive_ind             = i2
)
*/

record reply
(
 1  grouplist[*]
     2  bb_test_group_id            = f8
     2  test_group_display          = c15
     2  test_group_description      = vc
     2  active_ind                  = i2
     2  updt_cnt                    = i4
     2  cmpntlist[*]
         3  bb_group_component_id   = f8  
         3  catalog_cd              = f8
         3  catalog_disp            = c40
         3  catalog_mean            = c12
         3  catalog_desc            = c60
         3  sequence                = i4
         3  active_ind              = i2
         3  updt_cnt                = i4
%i cclsource:status_block.inc
)

set reply->status_data->status = "F"
set count1 = 0
set select_ok_ind = 0
set group_cnt = 0
set cmpnt_cnt = 0

select into "nl:"
    btg.bb_test_group_id
    , btg.test_group_display
    , btg.test_group_description
    , btg.active_ind
    , btg.updt_cnt
    , bgc.bb_group_component_id
    , bgc.catalog_cd
    , bgc.active_ind
    , bgc.updt_cnt

from    
    bb_test_group btg
    , (dummyt d_bgc with seq = 1)
    , bb_group_component bgc

plan    btg     where   btg.bb_test_group_id                != NULL
                          and btg.bb_test_group_id          > 0
                          and ((request->return_inactive_ind   != 1
                              and btg.active_ind            = 1)                        
                            or (request->return_inactive_ind  = 1))
join    (d_bgc  where   d_bgc.seq = 1
    join    bgc     where   bgc.bb_test_group_id            = btg.bb_test_group_id
                              and bgc.bb_group_component_id != NULL
			      and bgc.bb_group_component_id > 0
                                    and bgc.active_ind              = 1)

order   btg.bb_test_group_id, bgc.bb_group_component_id

head report
    group_cnt = 0
    stat = alterlist(reply->grouplist, 10)

head btg.bb_test_group_id
    group_cnt = group_cnt + 1
    if (mod(group_cnt,10) = 1 and group_cnt != 1)
        stat = alterlist(reply->grouplist, group_cnt + 9)
    endif
    reply->grouplist[group_cnt]->bb_test_group_id       = btg.bb_test_group_id
    reply->grouplist[group_cnt]->test_group_display     = btg.test_group_display
    reply->grouplist[group_cnt]->test_group_description = btg.test_group_description
    reply->grouplist[group_cnt]->active_ind             = btg.active_ind
    reply->grouplist[group_cnt]->updt_cnt               = btg.updt_cnt

    cmpnt_cnt = 0
    stat = alterlist(reply->grouplist[group_cnt]->cmpntlist, 10)

head bgc.bb_group_component_id
    if (bgc.bb_group_component_id > 0)     ;because of dummy table join - if there are no components
	cmpnt_cnt = cmpnt_cnt + 1
	if (mod(cmpnt_cnt,10) = 1 and cmpnt_cnt != 1)
	    stat = alterlist(reply->grouplist[group_cnt]->cmpntlist, cmpnt_cnt + 9)
	endif
	reply->grouplist[group_cnt]->cmpntlist[cmpnt_cnt]->bb_group_component_id    = bgc.bb_group_component_id
	reply->grouplist[group_cnt]->cmpntlist[cmpnt_cnt]->catalog_cd               = bgc.catalog_cd
	reply->grouplist[group_cnt]->cmpntlist[cmpnt_cnt]->sequence                 = bgc.sequence
	reply->grouplist[group_cnt]->cmpntlist[cmpnt_cnt]->active_ind               = bgc.active_ind
	reply->grouplist[group_cnt]->cmpntlist[cmpnt_cnt]->updt_cnt                 = bgc.updt_cnt
    endif	

foot btg.bb_test_group_id
    stat = alterlist(reply->grouplist[group_cnt]->cmpntlist, cmpnt_cnt)

foot report
    stat = alterlist(reply->grouplist, group_cnt)
    select_ok_ind = 1

with    nocounter, outerjoin(d_bgc), nullreport

if (select_ok_ind = 1)
    if (curqual = 0)
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "Z",
             /* process */ "select bb_test_group/bb_group_component",
             /* message */ "ZERO rows found on bb_test_group/bb_group_component"
            )
    else
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "S",
             /* process */ "select bb_test_group/bb_group_component",
             /* message */ "SUCCESS"
            )
    endif
else
    call LOAD_PROCESS_STATUS
        (
         /* status  */ "F",
         /* process */ "select bb_test_group/bb_group_component",
         /* message */ "Select on bb_test_group/bb_group_component FAILED"
        )
endif

go to EXIT_SCRIPT


subroutine LOAD_PROCESS_STATUS
    (
     sub_status,
     sub_process,
     sub_message
    )

    set reply->status_data->status = sub_status
    set count1 = count1 + 1
    if (count1 > 1)
        set stat = alter(reply->status_data->subeventstatus, count1+1)
    endif
    set reply->status_data->subeventstatus[count1]->OperationName = sub_process
    set reply->status_data->subeventstatus[count1]->OperationStatus = sub_status
    set reply->status_data->subeventstatus[count1]->TargetObjectName = "bbt_add_bb_test_group"
    set reply->status_data->subeventstatus[count1]->TargetObjectValue = sub_message
END         ; end subroutine LOAD_PROCESS_STATUS

#EXIT_SCRIPT


call echo(build("status_data->status =", reply->status_data->status))
for (x = 1 to count1)
    call echo(reply->status_data->subeventstatus[x]->OperationName)
    call echo(reply->status_data->subeventstatus[x]->OperationStatus)
    call echo(reply->status_data->subeventstatus[x]->TargetObjectName)
    call echo(reply->status_data->subeventstatus[x]->TargetObjectValue)
endfor

for (grp = 1 to group_cnt)
    call echo(build(grp, ">", 
        reply->grouplist[grp]->bb_test_group_id             , "/",
        reply->grouplist[grp]->test_group_display           , "/",
        reply->grouplist[grp]->test_group_description       , "/",
        reply->grouplist[grp]->active_ind                   , "/",
        reply->grouplist[grp]->updt_cnt                     ))
    for (cmpnt = 1 to cnvtint(size(reply->grouplist[grp]->cmpntlist, 5)))
        call echo(build(".....", cmpnt, ">",
            reply->grouplist[grp]->cmpntlist[cmpnt]->bb_group_component_id  , "/",
            reply->grouplist[grp]->cmpntlist[cmpnt]->catalog_cd             , "/",
            reply->grouplist[grp]->cmpntlist[cmpnt]->active_ind             , "/",
            reply->grouplist[grp]->cmpntlist[cmpnt]->updt_cnt               ))
    endfor
endfor


end go

;Generated by GNU enscript 1.6.4.
