 ;;Solution_Test/script/PathNet -- BB Transfusion/bb_upd_printer_facility_reltn/bb_upd_printer_facility_reltn.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2006 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:       bb_upd_printer_facility_reltn.prg
        Object name:            bb_upd_printer_facility_reltn
        Request #:              225950
 
        Product:                PathNet
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            4.0
 
        Program purpose:        This script adds or updates printer/facility relationships.
 
        Tables read:            BB_FACILITY_PRINTER_R
 
        Tables updated:         BB_FACILITY_PRINTER_R
        
        Executing from:         vb application
        
        Special Notes:          None
 
******************************************************************************/
 
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 05/22/06 Heatheryn Parker     Initial Release                     *
;~DE~************************************************************************
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program bb_upd_printer_facility_reltn:dba go
create program bb_upd_printer_facility_reltn:dba

;****************************************************************************
;* Request Record                                                           *
;****************************************************************************
/*
record request
(
  1 FacilityPrinterReltnList[*]
    2 add_change_ind                   = i2
    2 active_ind                       = i2
    2 bb_facility_printer_r_id         = f8
    2 bb_printer_id                    = f8
    2 bb_organization_id               = f8
)
*/
 
 
;****************************************************************************
;* Reply Record                                                             *
;****************************************************************************
record reply
(
%i cclsource:status_block.inc
)

set reply->status_data->status = "F"

/*****************************************************************************/
/* Variable declarations                                                     */
/*****************************************************************************/
declare SCRIPT_NAME           = c29  with constant("bb_upd_printer_facility_reltn")
declare stat                  = i2   with protect, noconstant(0)
declare ADD_IND               = i2   with constant(1)
declare CHANGE_IND            = i2   with constant(2)

; Error message declarations.
declare errmsg                = vc   with protect, noconstant("")
declare error_check           = i2   with protect, noconstant(error(errmsg,1))


; Loop through the facility printer list.  Evaluate the add_change_ind to determine if a 
; row should be added to the BB_FACILITY_PRINTER_R table, or simply updated.
for (i_idx = 1 to size(request->FacilityPrinterReltnList,5))    
    select into "nl:"
        
    from bb_facility_printer_r fpr
        
    where fpr.bb_facility_printer_r_id = request->FacilityPrinterReltnList[i_idx].bb_facility_printer_r_id
    
    with nocounter, forupdate(fpr)
    
    if (curqual > 0 and request->FacilityPrinterReltnList[i_idx].add_change_ind = ADD_IND)    
        set request->FacilityPrinterReltnList[i_idx].add_change_ind = CHANGE_IND
    endif
    
    if (request->FacilityPrinterReltnList[i_idx].add_change_ind = CHANGE_IND 
        and request->FacilityPrinterReltnList[i_idx].active_ind = 1)
        update into bb_facility_printer_r fpr
        	set fpr.active_ind            = request->FacilityPrinterReltnList[i_idx].active_ind,
        	    fpr.bb_printer_id         = request->FacilityPrinterReltnList[i_idx].bb_printer_id,
        	    fpr.bb_organization_id    = request->FacilityPrinterReltnList[i_idx].bb_organization_id,
        	    fpr.updt_cnt              = fpr.updt_cnt + 1,
        	    fpr.updt_applctx          = reqinfo->updt_applctx,
                fpr.updt_dt_tm            = cnvtdatetime(curdate, curtime3),
                fpr.updt_id               = reqinfo->updt_id,
                fpr.updt_task             = reqinfo->updt_task        	            	    
        where fpr.bb_facility_printer_r_id = request->FacilityPrinterReltnList[i_idx].bb_facility_printer_r_id
        	with nocounter
        	
        ; Check for any CCL errors
         set error_check = error(errmsg,0)
         if (error_check != 0)
            call ErrorHandler("F", "Upd bb_facility_printer_r", errmsg)
         endif
    elseif (request->FacilityPrinterReltnList[i_idx].add_change_ind = CHANGE_IND 
        and request->FacilityPrinterReltnList[i_idx].active_ind = 0)        
        delete from bb_facility_printer_r fpr        
        where fpr.bb_facility_printer_r_id = request->FacilityPrinterReltnList[i_idx].bb_facility_printer_r_id
        with nocounter
        
         set error_check = error(errmsg,0)
         if (error_check != 0)
            call ErrorHandler("F", "Del bb_facility_printer_r", errmsg)
         endif        
    elseif (request->FacilityPrinterReltnList[i_idx].add_change_ind = ADD_IND)
         insert into bb_facility_printer_r fpr 
        	set fpr.active_ind            = request->FacilityPrinterReltnList[i_idx].active_ind,
        	    fpr.active_status_cd      = reqdata->active_status_cd,
                fpr.active_status_dt_tm   = cnvtdatetime(curdate, curtime3),
                fpr.active_status_prsnl_id= reqinfo->updt_id,        	
        	    fpr.bb_printer_id         = request->FacilityPrinterReltnList[i_idx].bb_printer_id,
        	    fpr.bb_organization_id    = request->FacilityPrinterReltnList[i_idx].bb_organization_id,
        	    fpr.bb_facility_printer_r_id = request->FacilityPrinterReltnList[i_idx].bb_facility_printer_r_id
        	with nocounter        

        ; Check for any CCL errors
         set error_check = error(errmsg,0)
         if (error_check != 0)
            call ErrorHandler("F", "Ins bb_facility_printer_r", errmsg)
         endif
    endif
endfor

go to SET_STATUS

/*****************************************************************************/
/* ErrorHandler subroutine                                                   */
/*****************************************************************************/
declare ErrorHandler(OperationStatus = c1,
                     TargetObjectName = c25,
                     TargetObjectValue = vc) = NULL

subroutine ErrorHandler(OperationStatus,
                        TargetObjectName,
                        TargetObjectValue)
   declare error_cnt = i2 with private, noconstant(0)

   set error_cnt = size(reply->status_data.subeventstatus, 5)
   if (error_cnt > 1
   or (error_cnt = 1 and reply->status_data.subeventstatus[error_cnt].OperationStatus != ""))
      set error_cnt = error_cnt + 1
      set stat = alter(reply->status_data.subeventstatus, error_cnt)
   endif

   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[error_cnt].OperationName = script_name
   set reply->status_data.subeventstatus[error_cnt].OperationStatus = OperationStatus
   set reply->status_data.subeventstatus[error_cnt].TargetObjectName = TargetObjectName
   set reply->status_data.subeventstatus[error_cnt].TargetObjectValue = TargetObjectValue

   set reqinfo->commit_ind = 0
   
   go to EXIT_SCRIPT
end


/*****************************************************************************/
/* Status set and exit script                                                */
/*****************************************************************************/
#SET_STATUS
   set reply->status_data->status = "S"
   set reqinfo->commit_ind = 1

#EXIT_SCRIPT

end 

go

;Generated by GNU enscript 1.6.4.
