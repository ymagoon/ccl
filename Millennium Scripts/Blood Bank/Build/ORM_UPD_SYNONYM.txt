 ;;Solution_Test/script/Order Management/orm_upd_synonym/orm_upd_synonym.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
   Source file name:       ORM_UPD_SYNONYM.PRG
   Object name:            ORM_UPD_SYNONYM
   Request #:              500107
 
   Product:                DCP
   Product Team:           ORDER MANAGEMENT
   HNA Version:            500
   CCL Version:            8.2.4
 
   Program purpose:        Updates/Adds/Deletes one or more order catalog
                           synonyms in the ORDER_CATALOG_SYNONYM table.
 
   Tables read:            -
 
   Tables updated:         ORDER_CATALOG_SYNONYM,
                           OCS_FACILITY_R,
                           CODE_VALUE
 
   Executing from:         ORC MAINTENANCE TOOL (APP 500000)
 
   Special Notes:          -
 
******************************************************************************/
 
 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 02/17/96 Joe Geris            Initial Release                     *
;     ### 09/03/96 Matt Huffman         update codevalue with primary syn   *
;     ### 09/06/96 Joe Geris            Add activity_subtype_cd             *
;     ### 09/16/96 Joe Geris            Change certain _cd's to _id's       *
;     ### 10/20/96 Joe Geris            Change _key to _key_cap             *
;     ### 11/14/96 Joe Geris            Add orderable_type_flag             *
;     ### 05/19/97 Joe Geris            Add Hide Flag                       *
;     ### 06/26/98 Shawn Purcell        add ref_text_mask                   *
;     ### 06/01/99 Shawn Purcell        add virtual_view                    *
;     010 02/02/01 Brent Petr           add health_plan_view and modify     *
;                                       virtual_view update                 *
;     011 10/30/01 Shawn Purcell        move oe_format_id to quals          *
;     012 03/03/03 Brent Petr           Add strength, strength_unit_cd      *
;                                       volume, volume_unit_cd              *
;     013 10/27/03 Talib Sharif ts9378  Added support for                   *
;                                       Ingredient_rate_conversion_ind field*
;                                       in ORDER_CATALOG_SYNONYM table      *
;     014 11/07/03 TH5562               Add witness_flag                    *
;     014 03/01/04 Talib Sharif ts9378  Added Support for MultiFacility     *
;     015 11/19/04 Mark Gromowsky       Refresh Cache                       *
;     016 01/10/05 Jim Anderson         Performance Enhancements            *
;     017 04/07/05 Jim Anderson         General Cleanup                     *
;     018 11/15/06 sw015124             High Alert Orderable                *
;     019 01/22/07 rd012555             removed call to refresh             *
;                                       orm_get_ord_search script cache     *
;     020 12/06/08 sk010962             Therapeutic Classification          *
;                                       Alternatives                        *
;     021 05/13/09 sk010962             Updated the orm_upd_synonym script  *
;                                       to save the new indicator when      *
;                                       modifying an existing catalog       *
;     022 08/03/09 GA016556             Update the script to be able to save*
;                                       the new display_additives_first_ind *
;                                       when adding or modifying a synonym  *
;     023 21/04/10 SG016492             Update the script to be able to save*
;                                       the new rounding_rule_cd            *
;                                       when adding or modifying a synonym  *
;     024 06/03/10 KK014173             Add validation to rounding_rule_cd  *
;                                       for the request field since this    *
;                                       script is called by another script  *
;                                       for passivity. See comment below.   *
;     025 01/05/12 nh020167             Update the script to be able to save*
;                                       the ign_hide_flag field,            *
;                                       which indicates that the synonym    *
;                                       should be available for the convert *
;                                       to inpatient functionality, even if *
;                                       it is hidden in the order catalog   *
;     026 10/17/12 RF012556             Updated the script to be able to    *
;                                       the new lock_target_dose_ind.       *
;     027 11/29/13 NC028538             Updated the script to support the   *
;                                       fields max_final_dose,              *
;                                       max_final_dose_unit_cd              *
;                                       and max_dose_calc_bsa_value         *
;     028 01/03/14 KS2604               preferred_dose_flag                 *
;~DE~************************************************************************
 
 
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
 
drop program orm_upd_synonym:dba go
create program orm_upd_synonym:dba
 
%i cclsource:gm_u_code_value0619_def.inc
 
/*
record request
( 1 catalog_cd = f8
  1 catalog_type_cd = f8
  1 oe_format_id = f8
  1 dcp_clin_cat_cd = f8
  1 activity_type_cd = f8
  1 activity_subtype_cd = f8
  1 orderable_type_flag = i2
  1 syn_add_cnt = i4
  1 add_qual[x]
    2 synonym_id = f8
    2 virtual_view = vc
    2 health_plan_view = vc
    2 concentration_strength          = f8;012
    2 concentration_strength_unit_cd  = f8;012
    2 concentration_volume            = f8;012
    2 concentration_volume_unit_cd    = f8;012
    2 oe_format_id = f8 ;011
    2 rx_mask = i4
    2 mnemonic = VC
    2 mnemonic_type_cd = f8
    2 order_sentence_id = f8
    2 active_ind = i2
    2 ing_rate_conversion_ind = i2 ;013
    2 hide_flag = i2
    2 ref_text_mask = i4
    2 witness_flag = i2 ;014
    2 qual_facility[*]
      3 facility_cd = f8
    2 high_alert_ind = i2           ;018
    2 high_alert_long_text = vc     ;018
    2 high_alert_notify_ind = i2    ;018
    2 intermittent_ind = i2
    2 display_additives_first_ind = i2 ;022
    2 rounding_rule_cd = f8         ;023
    2 ign_hide_flag = i2            ;025
    2 lock_target_dose_ind = i2     ;026
    2 max_final_dose = f8           ;027
    2 max_final_dose_unit_cd = f8   ;027
    2 max_dose_calc_bsa_value = f8  ;027
    2 preferred_dose_flag = i2      ;028
  1 syn_upd_cnt = i4
  1 upd_qual[*]
    2 virtual_view = vc
    2 health_plan_view = vc  ;010
    2 oe_format_id = f8 ;011
    2 rx_mask = i4
    2 synonym_id = f8
    2 mnemonic = VC
    2 mnemonic_type_cd = f8
    2 order_sentence_id = f8
    2 concentration_strength          = f8;012
    2 concentration_strength_unit_cd  = f8;012
    2 concentration_volume            = f8;012
    2 concentration_volume_unit_cd    = f8;012
    2 active_ind = i2
    2 ing_rate_conversion_ind = i2 ;013
    2 hide_flag = i2
    2 updt_cnt = i4
    2 ref_text_mask = i4
    2 witness_flag = i2 ;014
    2 qual_facility_add[*]
      3 facility_cd = f8
    2 qual_facility_remove[*]
      3 facility_cd = f8
    2 high_alert_ind = i2           ;018
    2 high_alert_long_text_id = f8  ;018
    2 high_alert_long_text = vc     ;018
    2 high_alert_notify_ind = i2    ;018
    2 intermittent_ind = i2
    2 display_additives_first_ind = i2 ;022
    2 rounding_rule_cd = f8         ;023
    2 ign_hide_flag = i2            ;025
    2 lock_target_dose_ind = i2     ;026
    2 max_final_dose = f8           ;027
    2 max_final_dose_unit_cd = f8   ;027
    2 max_dose_calc_bsa_value = f8  ;027
    2 preferred_dose_flag = i2      ;028
  1 syn_del_cnt = i4
  1 del_qual[*]
    2 synonym_id = f8
)
*/
 
/*** READ: This script is called by another script.
     When adding a new field in the request,
     make sure to use validate() to validate the
     field in the request to see if that field is
     valid before accessing it. The caller does
     not know of the change and this script needs
     to be passive.
 
     Notify the team that calls this script so
     that they can plan to add this new field
     into their script in the future version. ***/             ;024
 
record reply
(
%i cclsource:status_block.inc
)
 
set reply->status_data->status = "F"
 
declare UpdatePrimaryMnemonic(catalog_cd, mnemonic)   = NULL with private
declare ExitOnOpFail(operationname, targetobjectname) = NULL with private
declare LockingFailed(targetobjectname)               = NULL with private
 
;declare last_mod = c3 with private, noconstant("000")
declare size     = i4 with protect, constant(200)
declare failed   = c1 with private, noconstant("F")
declare count1   = i4 with protect, noconstant(0)
declare num      = i4 with protect, noconstant(0)
declare start    = i4 with protect, noconstant(0)
declare stop     = i4 with protect, noconstant(0)
declare errmsg   = vc with protect, noconstant("")
declare total    = i4 with protect, noconstant(0)
declare longTextId      = f8 with protect, noconstant(0.0)  ;018
declare highTextInd     = i2 with protect, noconstant(0)    ;018
declare highAlertText   = vc with protect, noconstant("")   ;018
 
declare add_facility_cnt = i4 with protect, noconstant(0)
 
declare PRIMARY_CD = f8 with public, constant(uar_get_code_by("MEANING", 6011, "PRIMARY"))
declare PHARMACY_CD = f8 with public, constant(uar_get_code_by("MEANING",6000,"PHARMACY"))

set atc = 0                    ;018 start
 
select into "nl:"
  from code_value m
  where m.code_set = 48 and m.cdf_meaning = "ACTIVE" and m.active_ind = 1
  detail atc = m.code_value
with nocounter                 ;018 end
 
; Add new synonyms
 
for (x = 1 to request->syn_add_cnt)
 
   ; Get next unique sequence number.
 
   select into "nl:"
      seqnum = seq(reference_seq, nextval)
      from dual
      detail
         request->add_qual[x].synonym_id = seqnum
   with nocounter
 
   ; Insert the synonym.
 
   if (request->add_qual[x].synonym_id > 0.0)
 
      set request->add_qual[x].mnemonic = substring(1, 100, trim(request->add_qual[x].mnemonic, 3))
 
      if (textlen(request->add_qual[x]->high_alert_long_text) != 0)    ;018 start
         select into "nl:"
            y = seq(long_data_seq,nextval)
         from dual
         detail
            longTextId = y
         with nocounter
 
         call ExitOnOpFail("select", "nl:")
 
         insert into long_text l set
            l.long_text = request->add_qual[x]->high_alert_long_text,
            l.long_text_id = longTextId,
            l.active_status_cd = atc,
            l.active_ind = 1,
            l.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
            l.updt_dt_tm = cnvtdatetime(curdate,curtime3),
            l.updt_id = reqinfo->updt_id,
            l.updt_task = reqinfo->updt_task,
            l.updt_applctx = reqinfo->updt_applctx,
            l.updt_cnt = 0
 
         with nocounter
 
         call ExitOnOpFail("insert", "long_text")
      else
         set longTextId = 0.0
      endif                                                            ;018 end
 
      insert
        into order_catalog_synonym ocs
         set ocs.synonym_id                     = request->add_qual[x].synonym_id,
             ocs.dcp_clin_cat_cd                = request->dcp_clin_cat_cd,
             ocs.catalog_cd                     = request->catalog_cd,
             ocs.activity_type_cd               = request->activity_type_cd,
             ocs.activity_subtype_cd            = request->activity_subtype_cd,
             ocs.mnemonic                       = request->add_qual[x].mnemonic,
             ocs.mnemonic_key_cap               = cnvtupper(request->add_qual[x].mnemonic),
             ocs.rx_mask                        = request->add_qual[x].rx_mask,
             ocs.mnemonic_type_cd               = request->add_qual[x].mnemonic_type_cd,
             ocs.active_ind                     = request->add_qual[x].active_ind,
             ocs.ingredient_rate_conversion_ind = request->add_qual[x].ing_rate_conversion_ind,
             ocs.witness_flag                   = request->add_qual[x].witness_flag,
             ocs.hide_flag                      = request->add_qual[x].hide_flag,
             ocs.order_sentence_id              = request->add_qual[x].order_sentence_id,
             ocs.catalog_type_cd                = request->catalog_type_cd,
             ocs.orderable_type_flag            = request->orderable_type_flag,
             ocs.oe_format_id                   = if (request->add_qual[x].oe_format_id > 0.0)
                                                     request->add_qual[x].oe_format_id
                                                  else
                                                     request->oe_format_id
                                                  endif,
             ocs.ref_text_mask                  = request->add_qual[x].ref_text_mask,
             ocs.virtual_view                   = request->add_qual[x].virtual_view,
             ocs.health_plan_view               = request->add_qual[x].health_plan_view,
             ocs.concentration_strength         = request->add_qual[x].concentration_strength,
             ocs.concentration_strength_unit_cd = request->add_qual[x].concentration_strength_unit_cd,
             ocs.concentration_volume           = request->add_qual[x].concentration_volume,
             ocs.concentration_volume_unit_cd   = request->add_qual[x].concentration_volume_unit_cd,
             ocs.active_status_cd               = reqdata->active_status_cd,
             ocs.active_status_dt_tm            = cnvtdatetime(curdate, curtime3),
             ocs.active_status_prsnl_id         = reqinfo->updt_id,
             ocs.updt_dt_tm                     = cnvtdatetime(curdate, curtime3),
             ocs.updt_id                        = reqinfo->updt_id,
             ocs.updt_task                      = reqinfo->updt_task,
             ocs.updt_applctx                   = reqinfo->updt_applctx,
             ocs.updt_cnt                       = 0,
             ocs.high_alert_ind                 = request->add_qual[x].high_alert_ind,                      ;018
             ocs.high_alert_required_ntfy_ind   = request->add_qual[x].high_alert_notify_ind,               ;018
             ocs.high_alert_long_text_id        = longTextId,                                               ;018
             ocs.intermittent_ind               = request->add_qual[x].intermittent_ind,
             ocs.display_additives_first_ind    = request->add_qual[x].display_additives_first_ind,         ;022
             ocs.rounding_rule_cd               = validate(request->add_qual[x].rounding_rule_cd, 0.0),     ;024
             ocs.ignore_hide_convert_ind        = validate(request->add_qual[x].ign_hide_flag, 0),          ;025
             ocs.lock_target_dose_ind           = validate(request->add_qual[x].lock_target_dose_ind, 0),   ;026
	         ocs.max_final_dose                 = validate(request->add_qual[x].max_final_dose, 0.0),         ;027
	         ocs.max_final_dose_unit_cd         = validate(request->add_qual[x].max_final_dose_unit_cd, 0.0), ;027
	         ocs.max_dose_calc_bsa_value        = validate(request->add_qual[x].max_dose_calc_bsa_value, 0.0), ;027
             ocs.preferred_dose_flag            = validate(request->add_qual[x].preferred_dose_flag, 0)     ;028
 
      call ExitOnOpFail("insert", "order_catalog_synonym")
 
      set add_facility_cnt = size(request->add_qual[x].qual_facility, 5)
 
      if (add_facility_cnt > 0)
 
         ; Add facility information for this synonym.
 
         insert
           into ocs_facility_r ocsfr,
                (dummyt d with seq = value(add_facility_cnt))
            set ocsfr.synonym_id   = request->add_qual[x].synonym_id,
                ocsfr.facility_cd  = request->add_qual[x].qual_facility[d.seq].facility_cd,
                ocsfr.updt_cnt     = 0,
                ocsfr.updt_dt_tm   = cnvtdatetime(curdate, curtime3),
                ocsfr.updt_id      = reqinfo->updt_id,
                ocsfr.updt_task    = reqinfo->updt_task,
                ocsfr.updt_applctx = reqinfo->updt_applctx
           plan d
           join ocsfr
 
         call ExitOnOpFail("insert", "ocs_facility_r")
      endif
 
      if (PRIMARY_CD != request->add_qual[x].mnemonic_type_cd and
          PHARMACY_CD = request->catalog_type_cd and
          size(request->therapeutic_category_qual,5) > 0)
 
			record ahfs_request
			(
			  1 synonym_id  =f8
			  1 qual[*]
			   2 sequence          = i4
			   2 short_description = vc
			   2 class_id          = f8
			)
 
			; synonym id for the new synonym that we want to insert into the hierarchy
			set ahfs_request->synonym_id  = request->add_qual[x].synonym_id
			set stat = alterlist(ahfs_request->qual,size(request->therapeutic_category_qual,5))
 
			; set the short description of the therapeutic category parents
			for (i = 1 to size(request->therapeutic_category_qual,5))
			   set ahfs_request->qual[i].short_description = request->therapeutic_category_qual[i].short_description
			endfor
 
			; execute the script to insert the synonym
			;insert new non-primary pharmacy synonyms into the therapeutic class hierarchy
 
			execute rx_add_ahfs_list with replace("REQUEST","AHFS_REQUEST")
 
			call ExitOnOpFail("insert", "rx_add_ahfs_list")
 
      endif
   else
      ; A valid sequence number was not obtained for the new synonym.
 
      set reply->status_data->subeventstatus[1].operationname     = "insert"
      set reply->status_data->subeventstatus[1].operationstatus   = "F"
      set reply->status_data->subeventstatus[1].targetobjectname  = "order_catalog_synonym"
      set reply->status_data->subeventstatus[1].targetobjectvalue = "invalid sequence number"
      set failed = "T"
      go to exit_script
   endif
endfor
 
; Update existing synonyms.
 
if (request->syn_upd_cnt > 0)
 
   declare rem_facility_cnt = i4 with protect, noconstant(0)
 
   record ocsfrdel
   (
      1 qual_cnt = i4
      1 qual[*]
         2 synonym_id  = f8
         2 facility_cd = f8
   )
 
   ; Lock rows for update.
 
   set total = request->syn_upd_cnt + (size - mod(request->syn_upd_cnt, size))
   set stat  = alterlist(request->upd_qual, total)
   set start = 1
 
   select into "nl:"
      from  (dummyt d1 with seq = value(total/size)),
            order_catalog_synonym ocs
 
       plan d1
      where initarray (start, evaluate(d1.seq, 1, 1, start+size))
 
       join ocs
      where expand (num, start, start+(size-1), ocs.synonym_id, request->upd_qual[num].synonym_id)
        and ocs.synonym_id > 0.0
 
      head report
         count1 = 0
 
      detail
         num = locateval(num, 1, request->syn_upd_cnt, ocs.synonym_id, request->upd_qual[num].synonym_id)
 
         ; Verify the row has not been changed by another user.
 
         if (request->upd_qual[num].updt_cnt = ocs.updt_cnt)
            count1 = count1 + 1
         else
            call cancel(1)
         endif
 
   with nocounter, forupdate(ocs)
 
   if (count1 != request->syn_upd_cnt)
      call LockingFailed("order_catalog_synonym")
   endif
 
   for (x = 1 to request->syn_upd_cnt)
 
      ; Update synonym.
 
      set request->upd_qual[x].mnemonic = substring(1, 100, trim(request->upd_qual[x].mnemonic, 3))
 
      ; Update the high alert long text if needed
 
      set longTextId = request->upd_qual[x].high_alert_long_text_id   ;018 start
      set highAlertInd = request->upd_qual[x].high_alert_ind
      set highAlertText = request->upd_qual[x].high_alert_long_text
 
      if (longTextId = 0.0)
         if (textlen(highAlertText) != 0)
 
            ; Create the row in long_text table.
 
            select into "nl:"
               y = seq(long_data_seq,nextval)
               from dual
               detail
               longTextId = y
            with nocounter
 
            call ExitOnOpFail("select", "nl:")
 
            insert into long_text l set
               l.long_text = request->upd_qual[x]->high_alert_long_text,
               l.long_text_id = longTextId,
               l.active_status_cd = atc,
               l.active_ind = 1,
               l.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
               l.updt_dt_tm = cnvtdatetime(curdate,curtime3),
               l.updt_id = reqinfo->updt_id,
               l.updt_task = reqinfo->updt_task,
               l.updt_applctx = reqinfo->updt_applctx,
               l.updt_cnt = 0
 
            with nocounter
 
            call ExitOnOpFail("insert", "long_text")
         endif
      else
         if (textlen(highAlertText) = 0)
 
            ; Remove row from long_text table.
 
            delete from long_text l
 
            where l.long_text_id = longTextId
 
            with nocounter
 
            set longTextId = 0.0
         else
 
            ; Update the row in long_text table.
 
            update into long_text l set
               l.long_text = request->upd_qual[x]->high_alert_long_text,
               l.updt_dt_tm = cnvtdatetime(curdate,curtime3),
               l.updt_id = reqinfo->updt_id,
               l.updt_task = reqinfo->updt_task,
               l.updt_applctx = reqinfo->updt_applctx,
               l.updt_cnt = l.updt_cnt + 1
 
               where l.long_text_id = longTextId
         endif
      endif                                                           ;018 end
 
      update into order_catalog_synonym ocs set
         ocs.catalog_cd                     = request->catalog_cd,
         ocs.dcp_clin_cat_cd                = request->dcp_clin_cat_cd,
         ocs.activity_type_cd               = request->activity_type_cd,
         ocs.activity_subtype_cd            = request->activity_subtype_cd,
         ocs.mnemonic                       = request->upd_qual[x].mnemonic,
         ocs.mnemonic_key_cap               = cnvtupper(request->upd_qual[x].mnemonic),
         ocs.rx_mask                        = request->upd_qual[x].rx_mask,
         ocs.mnemonic_type_cd               = request->upd_qual[x].mnemonic_type_cd,
         ocs.active_ind                     = request->upd_qual[x].active_ind,
         ocs.ingredient_rate_conversion_ind = request->upd_qual[x].ing_rate_conversion_ind,
         ocs.witness_flag                   = request->upd_qual[x].witness_flag,
         ocs.hide_flag                      = request->upd_qual[x].hide_flag,
         ocs.order_sentence_id              = request->upd_qual[x].order_sentence_id,
         ocs.virtual_view                   = if (request->upd_qual[x].virtual_view > "")
                                                  trim(request->upd_qual[x].virtual_view)
                                               else
                                                  ocs.virtual_view
                                               endif,
         ocs.health_plan_view               = if (request->upd_qual[x].health_plan_view > "")
                                                 trim(request->upd_qual[x].health_plan_view)
                                              else
                                                 ocs.health_plan_view
                                              endif,
         ocs.concentration_strength         = request->upd_qual[x].concentration_strength,
         ocs.concentration_strength_unit_cd = request->upd_qual[x].concentration_strength_unit_cd,
         ocs.concentration_volume           = request->upd_qual[x].concentration_volume,
         ocs.concentration_volume_unit_cd   = request->upd_qual[x].concentration_volume_unit_cd,
         ocs.catalog_type_cd                = request->catalog_type_cd,
         ocs.oe_format_id                   = if (request->upd_qual[x].oe_format_id > 0)
                                                 request->upd_qual[x].oe_format_id
                                              else
                                                 request->oe_format_id
                                              endif,
         ocs.orderable_type_flag            = request->orderable_type_flag,
         ocs.updt_dt_tm                     = cnvtdatetime(curdate, curtime3),
         ocs.updt_id                        = reqinfo->updt_id,
         ocs.updt_task                      = reqinfo->updt_task,
         ocs.updt_applctx                   = reqinfo->updt_applctx,
         ocs.updt_cnt                       = ocs.updt_cnt + 1,                                           ;018 Added , to end
         ocs.high_alert_ind                 = highAlertInd,                                               ;018
         ocs.high_alert_required_ntfy_ind   = request->upd_qual[x].high_alert_notify_ind,                 ;018
         ocs.high_alert_long_text_id        = longTextId,                                                 ;018
         ocs.intermittent_ind	            = request->upd_qual[x].intermittent_ind,                      ;sk010962
         ocs.display_additives_first_ind    = request->upd_qual[x].display_additives_first_ind,           ;022
         ocs.rounding_rule_cd               = validate(request->upd_qual[x].rounding_rule_cd, 0.0),       ;024
         ocs.ignore_hide_convert_ind        = validate(request->upd_qual[x].ign_hide_flag, 0),	          ;025
         ocs.lock_target_dose_ind           = validate(request->upd_qual[x].lock_target_dose_ind, 0),     ;026
         ocs.max_final_dose                 = validate(request->upd_qual[x].max_final_dose, 0.0),         ;027
         ocs.max_final_dose_unit_cd         = validate(request->upd_qual[x].max_final_dose_unit_cd, 0.0),  ;027
         ocs.max_dose_calc_bsa_value        = validate(request->upd_qual[x].max_dose_calc_bsa_value, 0.0), ;027
         ocs.preferred_dose_flag            = validate(request->upd_qual[x].preferred_dose_flag, 0)       ;028
 
         where ocs.synonym_id = request->upd_qual[x].synonym_id
           and ocs.synonym_id > 0.0
 
      call ExitOnOpFail("update", "order_catalog_synonym")
 
      ; Add facilities removed from this synonym to the list to be deleted.
 
      set rem_facility_cnt = size (request->upd_qual[x].qual_facility_remove, 5)
 
      if (rem_facility_cnt > 0)
 
         set stat = alterlist(ocsfrdel->qual, ocsfrdel->qual_cnt + rem_facility_cnt)
 
         for (num = 1 to rem_facility_cnt)
 
            set ocsfrdel->qual_cnt = ocsfrdel->qual_cnt + 1
            set ocsfrdel->qual[ocsfrdel->qual_cnt].synonym_id  = request->upd_qual[x].synonym_id
            set ocsfrdel->qual[ocsfrdel->qual_cnt].facility_cd = request->upd_qual[x].qual_facility_remove[num].facility_cd
 
         endfor
 
      endif
 
      ; Add new facility information for this synonym.
 
      set add_facility_cnt = size (request->upd_qual[x].qual_facility_add, 5)
 
      if (add_facility_cnt > 0)
 
         insert
           into ocs_facility_r ocsfr,
                (dummyt d with seq = value(add_facility_cnt))
            set ocsfr.synonym_id   = request->upd_qual[x].synonym_id,
                ocsfr.facility_cd  = request->upd_qual[x].qual_facility_add[d.seq].facility_cd,
                ocsfr.updt_cnt     = 0,
                ocsfr.updt_dt_tm   = cnvtdatetime(curdate, curtime3),
                ocsfr.updt_id      = reqinfo->updt_id,
                ocsfr.updt_task    = reqinfo->updt_task,
                ocsfr.updt_applctx = reqinfo->updt_applctx
           plan d
           join ocsfr
 
         call ExitOnOpFail("insert", "ocs_facility_r")
      endif
   endfor
 
   ; Delete the synonym/facility relationships removed from the updated synonyms.
 
   set stop = 0
 
   while (stop < ocsfrdel->qual_cnt)
      set start = stop + 1
      set stop  = stop + 200
 
      if (stop > ocsfrdel->qual_cnt)
         set stop = ocsfrdel->qual_cnt
      endif
 
      delete from ocs_facility_r ocsfr
         where expand (num, start, stop, ocsfr.synonym_id, ocsfrdel->qual[num].synonym_id,
                            ocsfr.facility_cd, ocsfrdel->qual[num].facility_cd)
      with nocounter
 
      call ExitOnOpFail("delete", "ocs_facility_r")
   endwhile
 
   free set ocsfrdel
 
endif
 
; Delete synonyms and synonym/facility relationships.
 
if (request->syn_del_cnt > 0)
 
   set stop = 0
 
   while (stop < request->syn_del_cnt)
 
      set start = stop + 1
      set stop  = stop + 200
 
      if (stop > request->syn_del_cnt)
         set stop = request->syn_del_cnt
      endif
 
      delete from ocs_facility_r ocsfr
         where expand (num, start, stop, ocsfr.synonym_id, request->del_qual[num].synonym_id)
           and ocsfr.synonym_id > 0.0
      with nocounter
 
      call ExitOnOpFail("delete", "ocs_facility_r")
 
      delete from order_catalog_synonym ocs
         where expand (num, start, stop, ocs.synonym_id, request->del_qual[num].synonym_id)
           and ocs.synonym_id > 0.0
 
      call ExitOnOpFail("delete", "order_catalog_synonym")
 
   endwhile
 
endif
 
; If the primary mnemonic for this synonym was updated or added,
; then update the code_value table as well.  Since each synonym
; only has one primary mnemonic, once we've updated it, no more
; synonyms need to be checked.
 
for (x = 1 to request->syn_upd_cnt)
   if (request->upd_qual[x].mnemonic_type_cd = PRIMARY_CD)
      call UpdatePrimaryMnemonic(request->catalog_cd, request->upd_qual[x].mnemonic)
      go to exit_script
   endif
endfor
 
for (x = 1 to request->syn_add_cnt)
   if (request->add_qual[x].mnemonic_type_cd = PRIMARY_CD)
      call UpdatePrimaryMnemonic(request->catalog_cd, request->add_qual[x].mnemonic)
      go to exit_script
   endif
endfor
 
subroutine UpdatePrimaryMnemonic(catalog_cd, mnemonic)
 
   ; Lock code_value row to update.
 
   select into "nl:"
      from  code_value cv
      where cv.code_value = request->catalog_cd
 
      head report
         count1 = 0
 
      detail
         count1 = count1 + 1
 
   with nocounter, forupdate(cv)
 
   if (count1 != 1)
      call LockingFailed("code_value")
   endif
 
   ; Perform the update.
 
   set gm_u_code_value0619_req->allow_partial_ind = 0 ; Fail if all records cannot be updated.
   set gm_u_code_value0619_req->force_updt_ind    = 1 ; Update regardless of update count (row is already locked for update)
 
   set stat = alterlist(gm_u_code_value0619_req->qual, 1)
   set stat = gm_u_code_value0619_vc("display", substring(1, 40, trim(mnemonic,3)), 1, 0, 0)
 
   ; Where Clause
 
   set stat = gm_u_code_value0619_f8 ("code_value", catalog_cd, 1, 0, 1)
 
   ; Execute the update
 
   execute gm_u_code_value0619 with replace(request, gm_u_code_value0619_req),
                                    replace(reply, gm_u_code_value0619_rep)
 
   ; Check the status of the reply from the gold master script.
 
   if (gm_u_code_value0619_rep->qual[1].status != 1)
      set reply->status_data->subeventstatus[1].operationname     =
             gm_u_code_value0619_rep->status_data->subeventstatus[1].operationname
 
      set reply->status_data->subeventstatus[1].operationstatus   =
             gm_u_code_value0619_rep->status_data->subeventstatus[1].operationstatus
 
      set reply->status_data->subeventstatus[1].targetobjectname  =
             gm_u_code_value0619_rep->status_data->subeventstatus[1].targetobjectname
 
      set reply->status_data->subeventstatus[1].targetobjectvalue =
             gm_u_code_value0619_rep->status_data->subeventstatus[1].targetobjectvalue
 
      set failed = "T"
      go to exit_script
   endif
 
end
 
subroutine ExitOnOpFail(operationname, targetobjectname)
   if (error(errmsg, 0) != 0)
      set reply->status_data->subeventstatus[1].operationname     = operationname
      set reply->status_data->subeventstatus[1].operationstatus   = "F"
      set reply->status_data->subeventstatus[1].targetobjectname  = targetobjectname
      set reply->status_data->subeventstatus[1].targetobjectvalue = errmsg
      set failed = "T"
      go to exit_script
   endif
end
 
subroutine LockingFailed(targetobjectname)
   set reply->status_data->subeventstatus[1].operationname     = "locking"
   set reply->status_data->subeventstatus[1].operationstatus   = "F"
   set reply->status_data->subeventstatus[1].targetobjectname  = targetobjectname
   set reply->status_data->subeventstatus[1].targetobjectvalue = "orm_upd_synonym"
   set failed = "T"
   go to exit_script
end
 
#exit_script
 
%i cclsource:orm_refresh_script_cache.inc
 
if (failed = "T")
   set reqinfo->commit_ind = 0
else
   set reqinfo->commit_ind = 1
   set reply->status_data->status = "S"
 
   call RefreshCache(600005, 500196, 500080, "orm_get_orc")
endif
 
%i cclsource:gm_u_code_value0619_cln.inc

SET script_version = "028 01/03/14 KS2604"
end go
 

;Generated by GNU enscript 1.6.4.
