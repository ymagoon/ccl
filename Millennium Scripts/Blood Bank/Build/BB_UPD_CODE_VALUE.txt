 ;;Solution_Test/script/PathNet -- BB Transfusion/bb_upd_code_value/bb_upd_code_value.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2003 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bb_upd_code_value.prg
        Object name:            bb_upd_code_value
        Request #:              225930

        Product:                Blood Bank
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            Rev 8.0

        Program purpose:        This program will update code value
                                information.

        Tables read:            NONE

        Tables updated:         code_value

        Executing from:         cBBCodeValues.cls, cBBCodeValue.cls

        Special Notes:          NONE

;~DB~****************************************************************************************
;*                      GENERATED MODIFICATION CONTROL LOG                                  *
;********************************************************************************************
;*                                                                                          *
;*Mod Date     Engineer             ITN     Feature      Comment                            *
;*--- -------- -------------------- ------- ------------ -----------------------------------*
;*000 10/01/03 John Rieck           0107940 34664        Initial Release                    *
;~DE~****************************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ***********************************/

drop program bb_upd_code_value:dba go
create program bb_upd_code_value:dba


/*****************************************************************************/
/* Request record                                                            */
/*****************************************************************************/
/*
record request
(
   1 CodeValueList[*]
     2 code_set            = i4
     2 code_value          = f8
     2 cdf_meaning         = c12
     2 display             = c40
     2 description         = vc
     2 definition          = vc
     2 collation_seq       = i4
     2 active_ind          = i2
     2 add_row             = i2
     2 row_number          = i4
)
*/


/*****************************************************************************/
/* Reply record                                                              */
/*****************************************************************************/
record reply
(
   1 CodeList[*]
     2 code_value    = f8  ;Newly generated code_value if inserted.
     2 row_number    = i4  ;Unique identifier of the item that was inserted.
%i cclsource:status_block.inc
)

set reply->status_data->status = "F"


/*****************************************************************************/
/* Master script include files (insert and update)                           */
/*****************************************************************************/
%i cclsource:gm_i_code_value0619_def.inc
%i cclsource:gm_u_code_value0619_def.inc


/*****************************************************************************/
/* Variable declarations                                                     */
/*****************************************************************************/
set modify predeclare

declare end_dt_tm       = q8  with constant(cnvtdatetime("31-DEC-2100 23:59:59.99"))
declare script_name     = c17 with constant("bb_upd_code_value")
declare stat            = i2  with noconstant(0)
declare cv_cnt          = i4  with noconstant(0)
declare cv_idx          = i4  with noconstant(0)
declare reply_cnt       = i4  with noconstant(0)
declare authentic_cs    = i4  with constant(8)
declare authentic_mean  = c12 with constant("AUTH")
declare authentic_cd    = f8  with noconstant(0.0)
declare count           = i4  with noconstant(0)
declare tmp_active_cd   = f8  with noconstant(0.0)
declare tmp_inactive_cd = f8  with noconstant(0.0)

;Error message declarations.
declare errmsg	         = c132 with noconstant(fillstring(132," "))


/*****************************************************************************/
/* Retrieve code values                                                      */
/*****************************************************************************/
set authentic_cd = uar_get_code_by("MEANING", authentic_cs, nullterm(authentic_mean))
if (authentic_cd <= 0.0)
    set errmsg = concat("Failed to retrieve authentic code with meaning of ", trim(authentic_mean), ".")
    call ErrorHandler("F", "uar_get_code_by", errmsg)
endif


/*****************************************************************************/
/* Insert or update CODE_VALUE information                                   */
/*****************************************************************************/

; Determine the number of code values sent in.
set cv_cnt = size(request->CodeValueList,5)

; Loop through the CodeList in the request structure
for (cv_idx = 1 to cv_cnt)

   ; Determine if a row must be added to the code_value table.
   if (request->CodeValueList[cv_idx].add_row = 1)
   
      /*****************************************************************************/
      /* Insert CODE_VALUE information                                             */
      /*****************************************************************************/
      set gm_i_code_value0619_req->allow_partial_ind = 0
            
      set stat = gm_i_code_value0619_i4('CODE_SET', 
         request->CodeValueList[cv_idx].code_set, 1, 0)      

      if (stat = 1)
         set stat = gm_i_code_value0619_vc('CDF_MEANING', 
            request->CodeValueList[cv_idx].cdf_meaning, 1, 0)
      endif

      if (stat = 1)
         set stat = gm_i_code_value0619_vc('DISPLAY', 
            request->CodeValueList[cv_idx].display, 1, 0)    
      endif
      
      if (stat = 1)
         set stat = gm_i_code_value0619_vc('DESCRIPTION', 
            request->CodeValueList[cv_idx].description, 1, 0)
      endif

      if (stat = 1)
         set stat = gm_i_code_value0619_vc('DEFINITION', 
            request->CodeValueList[cv_idx].definition, 1, 0)
      endif

      if (stat = 1)
         set stat = gm_i_code_value0619_i4('COLLATION_SEQ', 
            request->CodeValueList[cv_idx].collation_seq, 1, 0)  
      endif                                                                 
      
      if (stat = 1)
         if (request->CodeValueList[cv_idx].active_ind = 1)
            set stat = gm_i_code_value0619_f8('ACTIVE_TYPE_CD',
               reqdata->active_status_cd, 1, 0)
         else
            set stat = gm_i_code_value0619_f8('ACTIVE_TYPE_CD',
               reqdata->inactive_status_cd, 1, 0)
         endif
      endif                                                                 
      
      if (stat = 1)
         set stat = gm_i_code_value0619_i2('ACTIVE_IND', 
            request->CodeValueList[cv_idx].active_ind, 1, 0)
      endif                                                                 
      
      if (stat = 1)
         set stat = gm_i_code_value0619_dq8('ACTIVE_DT_TM', 
            cnvtdatetime(curdate,curtime3), 1, 0)  
      endif                                                                 
      
      if (stat = 1)
         set stat = gm_i_code_value0619_dq8('BEGIN_EFFECTIVE_DT_TM', 
            cnvtdatetime(curdate,curtime3), 1, 0)
      endif
      
      if (stat = 1)
         if (request->CodeValueList[cv_idx].active_ind = 1)      
            set stat = gm_i_code_value0619_dq8('END_EFFECTIVE_DT_TM',
               cnvtdatetime(end_dt_tm), 1, 0)
         else
            set stat = gm_i_code_value0619_dq8('END_EFFECTIVE_DT_TM',
               cnvtdatetime(curdate,curtime3), 1, 0)         
         endif
      endif
      
      if (stat = 1)
         set stat = gm_i_code_value0619_f8('DATA_STATUS_CD', 
            authentic_cd, 1, 0)        
      endif
      
      if (stat = 1)
         set stat = gm_i_code_value0619_dq8('DATA_STATUS_DT_TM', 
            cnvtdatetime(curdate,curtime3), 1, 0)    
      endif
      
      if (stat = 1)
         set stat = gm_i_code_value0619_f8('DATA_STATUS_PRSNL_ID', 
            reqinfo->updt_id, 1, 0)  
      endif
      
      if (stat = 1)
         set stat = gm_i_code_value0619_f8('ACTIVE_STATUS_PRSNL_ID', 
            reqinfo->updt_id, 1, 0)
      endif
      
      if (stat = 1)
         if (request->CodeValueList[cv_idx].active_ind = 0)
            set stat = gm_i_code_value0619_dq8('INACTIVE_DT_TM',
               cnvtdatetime(curdate,curtime3), 1, 0)         
         endif
      endif
      
      if (stat = 1)
         execute gm_i_code_value0619 with replace(request, gm_i_code_value0619_req),
            replace(reply, gm_i_code_value0619_rep)
            
         ; Check for CCL errors.
         if (gm_i_code_value0619_rep->status_data->status = "F")
            call ErrorHandler("F", "CODE_VALUE", gm_i_code_value0619_rep->qual[1].error_msg)
         else
         
            ; Send back code values that were inserted
            set reply_cnt = reply_cnt + 1         
            if (mod(reply_cnt,10) = 1)
               set stat = alterlist(reply->CodeList, reply_cnt + 9)
            endif
                 
            set reply->CodeList[reply_cnt].code_value = gm_i_code_value0619_rep->qual[1].code_value         
            set reply->CodeList[reply_cnt].row_number = request->CodeValueList[cv_idx].row_number
         endif
      else
         ; Check for no code value inserted.
         call ErrorHandler("F", "CODE_VALUE", "Insert failed.")     
      endif

   else

      /*****************************************************************************/
      /* Update CODE_VALUE information                                             */
      /*****************************************************************************/

      ; Update the table with the information passed into the request.
      set gm_u_code_value0619_req->allow_partial_ind = 0
      set gm_u_code_value0619_req->force_updt_ind = 1
   
      set stat = gm_u_code_value0619_f8('CODE_VALUE', 
         request->CodeValueList[cv_idx].code_value, 1, 0, 1)    
      
      if (stat = 1)
         set stat = gm_u_code_value0619_vc('CDF_MEANING', 
            request->CodeValueList[cv_idx].cdf_meaning, 1, 0, 0)
      endif
      
      if (stat = 1)
         set stat = gm_u_code_value0619_vc('DISPLAY', 
            request->CodeValueList[cv_idx].display, 1, 0, 0)    
      endif
      
      if (stat = 1)
         set stat = gm_u_code_value0619_vc('DESCRIPTION', 
            request->CodeValueList[cv_idx].description, 1, 0, 0)   
      endif
      
      if (stat = 1)
         set stat = gm_u_code_value0619_vc('DEFINITION', 
            request->CodeValueList[cv_idx].definition, 1, 0, 0)    
      endif
      
      if (stat = 1)
         set stat = gm_u_code_value0619_i4('COLLATION_SEQ', 
            request->CodeValueList[cv_idx].collation_seq, 1, 0, 0) 
      endif
      
      if (stat = 1)
         if (request->CodeValueList[cv_idx].active_ind = 0)
            set stat = gm_u_code_value0619_f8('ACTIVE_TYPE_CD', 
               reqdata->inactive_status_cd, 1, 0, 0)
         endif                        
      endif
      
      if (stat = 1)
         set stat = gm_u_code_value0619_i2('ACTIVE_IND', 
            request->CodeValueList[cv_idx].active_ind, 1, 0, 0)    
      endif
      
      if (stat = 1)
         if (request->CodeValueList[cv_idx].active_ind = 0)
            set stat = gm_u_code_value0619_dq8('INACTIVE_DT_TM', 
               cnvtdatetime(curdate,curtime3), 1, 0, 0)
         endif
      endif
      
      if (stat = 1)
         if (request->CodeValueList[cv_idx].active_ind = 0)      
            set stat = gm_u_code_value0619_dq8('END_EFFECTIVE_DT_TM', 
               cnvtdatetime(curdate,curtime3), 1, 0, 0)
         endif
      endif

      if (stat = 1)
         execute gm_u_code_value0619 with replace(request, gm_u_code_value0619_req),
            replace(reply, gm_u_code_value0619_rep)
            
         ; Check for CCL errors.
         if (gm_u_code_value0619_rep->status_data->status = "F")
            call ErrorHandler("F", "CODE_VALUE", gm_u_code_value0619_rep->qual[1].error_msg)
         endif
      else
         ; Check for no code value updated.
         call ErrorHandler("F", "CODE_VALUE", "Update failed.")
         go to EXIT_SCRIPT     
      endif  
   endif
endfor ; CodeValueList loop

; Resize the reply structure.
set stat = alterlist(reply->CodeList, reply_cnt)

go to SET_STATUS


/*****************************************************************************/
/* ErrorHandler subroutine                                                   */
/*****************************************************************************/
declare ErrorHandler(OperationStatus = c1,
                     TargetObjectName = c25,
                     TargetObjectValue = vc) = NULL

subroutine ErrorHandler(OperationStatus,
                        TargetObjectName,
                        TargetObjectValue)
   declare error_cnt = i2 with private, noconstant(0)

   set error_cnt = size(reply->status_data.subeventstatus, 5)
   if (error_cnt > 1
   or (error_cnt = 1 and reply->status_data.subeventstatus[error_cnt].OperationStatus != ""))
      set error_cnt = error_cnt + 1
      set stat = alter(reply->status_data.subeventstatus, error_cnt)
   endif

   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[error_cnt].OperationName = script_name
   set reply->status_data.subeventstatus[error_cnt].OperationStatus = OperationStatus
   set reply->status_data.subeventstatus[error_cnt].TargetObjectName = TargetObjectName
   set reply->status_data.subeventstatus[error_cnt].TargetObjectValue = TargetObjectValue

   set reqinfo->commit_ind = 0
   
   go to EXIT_SCRIPT
end


/*****************************************************************************/
/* Status set and exit script                                                */
/*****************************************************************************/
#SET_STATUS
   set reply->status_data->status = "S"
   set reqinfo->commit_ind = 1

#EXIT_SCRIPT

; Free the master insert and update record structures
%i cclsource:gm_i_code_value0619_cln.inc
%i cclsource:gm_u_code_value0619_cln.inc

end
go


;Generated by GNU enscript 1.6.4.
