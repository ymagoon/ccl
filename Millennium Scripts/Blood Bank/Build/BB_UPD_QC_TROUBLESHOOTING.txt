 ;;Solution_Test/script/PathNet -- BB Transfusion/bb_upd_qc_troubleshooting/bb_upd_qc_troubleshooting.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2003 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

  Source file name:   bb_upd_qc_troubleshooting.prg
  Object name:        bb_upd_qc_troubleshooting
  Request #:          225832

  Product:            BBT
  Product Team:       BBT
  HNA Version:        500
  CCL Version:        8.2

  Program purpose:  This script will update troubleshooting steps on
                    the BB_QC_TROUBLESHOOTING and LONG_TEXT_REFERENCE tables.

  Tables read:      BB_QC_TROUBLESHOOTING
                    LONG_TEXT_REFERENCE

  Tables updated:   BB_QC_TROUBLESHOOTING
                    LONG_TEXT_REFERENCE
                    
  Executing from:   BB DB QC Preferences Tool
  
  Special Notes:    Update the bb_qc_troubleshooting table based on the
                    values passed into the script.  Deletions are allowed
                    and versioning will NOT be applied to the table.
  
******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer                     Comment						          *
;    *																		                                  *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 05/26/04 DP9409               Initial Release						          *
;    *																		                                  *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop   program bb_upd_qc_troubleshooting:dba go
create program bb_upd_qc_troubleshooting:dba

set modify predeclare
/*
record request
(
1  TroubleshootingList[*]
   2  troubleshooting_id       = f8
   2  troubleshooting_text_id  = f8
   2  active_ind               = i2
   2  updt_cnt                 = i4
   2  long_text                = vc
   2  save_flag                = i2
   2  beg_effective_dt_tm      = dq8
   2  end_effective_dt_tm      = dq8   
)
*/

if (not validate(reply, 0))
  record reply
  (
%i cclsource:status_block.inc
  )
endif

;***********************************************************************
;*   Include logging and error routines                                *
;***********************************************************************
%i cclsource:pcs_subevent.inc

declare nINFORMATIONAL   = i2     with protect, constant(0)
declare nINSERT          = i2     with protect, constant(1)
declare nUPDATE          = i2     with protect, constant(2)
declare nDELETE          = i2     with protect, constant(3)

declare nErrorCnt        = i2     with protect, noconstant(0)
declare nCount1          = i2     with protect, noconstant(0)
declare sError           = c132   with protect, noconstant(" ")
declare dCurDate         = f8     with protect, constant(cnvtdatetime(curdate,curtime3))
declare dEndDate         = f8     with protect, constant(cnvtdatetime("31-DEC-2100 23:59:59.99"))

;***********************************************************************
;*   Initializations                                                   *
;***********************************************************************
set reply->status_data->status = "F"


  if (size(request->TroubleshootingList, 5) > 0)  
    for (nCount1 = 1 to size(request->TroubleshootingList, 5))
      if (request->TroubleshootingList[nCount1]->save_flag = nUPDATE)
      
        set nErrorCnt = 0   
        ;lock existing bbqct rows
        select into "nl:" * 
        from bb_qc_troubleshooting bbqct
        where bbqct.troubleshooting_id = 
              request->TroubleshootingList[nCount1]->troubleshooting_id
        detail
          if (request->TroubleshootingList[nCount1]->updt_cnt != bbqct.updt_cnt)
            stat = subevent_add("SELECT", "F", "BB_QC_TROUBLESHOOTING",
                   build("troubleshooting id=", request->TroubleshootingList[nCount1]->troubleshooting_id,
                   "with update count=", request->TroubleshootingList[nCount1]->updt_cnt,
                    " has been updated by another process since loaded by this application."))
            nErrorCnt = nErrorCnt + 1
          endif
        with nocounter,
             forupdate(bbqct)
        
        if (error(sError, 0) > 0)
          call subevent_add("EXECUTE", "F", "bb_upd_qc_troubleshooting", sError)
          go to exit_script
        endif

        ;lock the existing lt rows
        select into "nl:" * 
        from long_text_reference lt
        where lt.long_text_id = 
            request->TroubleshootingList[nCount1]->troubleshooting_text_id
        detail
          if (request->TroubleshootingList[nCount1]->updt_cnt != lt.updt_cnt)
            stat = subevent_add("SELECT", "F", "LONG_TEXT_REFERENCE",
                   build("long text id=", request->TroubleshootingList[nCount1]->troubleshooting_text_id,
                   "with update count=", request->TroubleshootingList[nCount1]->updt_cnt,
                    " has been updated by another process since being loaded by this application."))
            nErrorCnt = nErrorCnt + 1
          endif
        with nocounter,
             forupdate(lt)
        
        if (error(sError, 0) > 0)
          call subevent_add("EXECUTE", "F", "bb_upd_qc_troubleshooting", sError)
          go to exit_script
        endif
      
        update into
          bb_qc_troubleshooting bbqct
        set
          bbqct.troubleshooting_id = request->TroubleshootingList[nCount1]->troubleshooting_id,
          bbqct.troubleshooting_text_id = request->TroubleshootingList[nCount1]->troubleshooting_text_id,
          bbqct.active_ind = request->TroubleshootingList[nCount1]->active_ind,

          ;if inactivating, end effective as well      
          bbqct.end_effective_dt_tm = (if (request->TroubleshootingList[nCount1]->active_ind = 0)
                                         cnvtdatetime(dCurDate)
                                       else
                                         cnvtdatetime(dEndDate)
                                       endif),
          
          bbqct.updt_cnt = request->TroubleshootingList[nCount1]->updt_cnt + 1,
          bbqct.updt_applctx = reqinfo->updt_applctx,
          bbqct.updt_dt_tm = cnvtdatetime(curdate,curtime3),
          bbqct.updt_id = reqinfo->updt_id,
          bbqct.updt_task = reqinfo->updt_task
          
        where bbqct.troubleshooting_id = request->TroubleshootingList[nCount1]->troubleshooting_id
        with nocounter

        if (error(sError, 0) > 0)
          call subevent_add("EXECUTE", "F", "bb_upd_qc_troubleshooting", sError)
          go to exit_script
        endif
    
        update into
          long_text_reference lt
        set
          lt.active_ind = request->TroubleshootingList[nCount1].active_ind,
          
          lt.long_text = request->TroubleshootingList[nCount1]->long_text,
          lt.active_status_cd = (if (request->TroubleshootingList[nCount1]->active_ind = 0) 
                                   reqdata->inactive_status_cd 
                                 else          
                                   reqdata->active_status_cd
                                 endif),
          
          lt.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
          lt.active_status_prsnl_id = reqinfo->updt_id,
          lt.parent_entity_name = "BB_QC_TROUBLESHOOTING",
          lt.parent_entity_id = request->TroubleshootingList[nCount1]->troubleshooting_id,
            
          lt.updt_cnt = lt.updt_cnt + 1,
          lt.updt_applctx = reqinfo->updt_applctx,
          lt.updt_dt_tm = cnvtdatetime(curdate,curtime3),
          lt.updt_id = reqinfo->updt_id,
          lt.updt_task = reqinfo->updt_task         
           
        where lt.long_text_id = request->TroubleshootingList[nCount1]->troubleshooting_text_id
        with nocounter
          
        if (error(sError, 0) > 0)
          call subevent_add("EXECUTE", "F", "bb_upd_qc_troubleshooting", sError)
          go to exit_script
        endif          
          
      elseif(request->TroubleshootingList[nCount1]->save_flag = nINSERT)
        
        insert into long_text_reference lt
        set
          lt.long_text_id = request->TroubleshootingList[nCount1]->troubleshooting_text_id,
          lt.active_ind = request->TroubleshootingList[nCount1].active_ind,
          lt.long_text = request->TroubleshootingList[nCount1].long_text,
          
          lt.active_status_cd = (if (request->TroubleshootingList[nCount1]->active_ind = 0) 
                                   reqdata->inactive_status_cd 
                                 else          
                                   reqdata->active_status_cd
                                 endif),
          
          lt.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
          lt.active_status_prsnl_id = reqinfo->updt_id,
          lt.parent_entity_name = "BB_QC_TROUBLESHOOTING",
          lt.parent_entity_id = request->TroubleshootingList[nCount1]->troubleshooting_id,
          
          lt.updt_cnt = 0,
          lt.updt_applctx = reqinfo->updt_applctx,
          lt.updt_dt_tm = cnvtdatetime(curdate,curtime3),
          lt.updt_id = reqinfo->updt_id,
          lt.updt_task = reqinfo->updt_task
                
        with nocounter
        
        if (error(sError, 0) > 0)
          call subevent_add("EXECUTE", "F", "bb_upd_qc_troubleshooting", sError)
          go to exit_script
        endif
        
        insert into bb_qc_troubleshooting bbqct
        set
          bbqct.troubleshooting_id = request->TroubleshootingList[nCount1]->troubleshooting_id,
          
          bbqct.troubleshooting_text_id = request->TroubleshootingList[nCount1]->troubleshooting_text_id,
          bbqct.active_ind = request->TroubleshootingList[nCount1]->active_ind,
          
          bbqct.beg_effective_dt_tm = cnvtdatetime(dCurDate),
          bbqct.end_effective_dt_tm = cnvtdatetime(dEndDate),
          
          bbqct.updt_cnt = 0,
          bbqct.updt_applctx = reqinfo->updt_applctx,
          bbqct.updt_dt_tm = cnvtdatetime(curdate,curtime3),
          bbqct.updt_id = reqinfo->updt_id,
          bbqct.updt_task = reqinfo->updt_task
        with nocounter
        
        if (error(sError, 0) > 0)
          call subevent_add("EXECUTE", "F", "bb_upd_qc_troubleshooting", sError)
          go to exit_script
        endif
   
      endif
    endfor
  endif
;***********************************************************************
;*   End of Program                                                    *
;***********************************************************************
if (error(sError, 0) > 0)
    call subevent_add("EXECUTE", "F", "bb_upd_qc_troubleshooting", sError)
    go to exit_script
endif

if (value(size(request->TroubleshootingList, 5)) = 0)
  set reply->status_data->status = "Z" 
  call subevent_add("UPDATE", "Z", "bb_upd_qc_troubleshooting", "No troubleshooting steps found.")
  go to exit_script
endif

/* other wise, the script was successful */
set reply->status_data->status = "S"
set reqinfo->commit_ind = 1

#exit_script

end go


;Generated by GNU enscript 1.6.4.
