 ;;Solution_Test/script/PathNet -- BB Transfusion/BBT_ALLOGENEICBLOCKINGTOOL/BBT_UPD_DISPENSE_BLOCKING.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bbt_upd_dispense_blocking.prg
        Object name:            bbt_upd_dispense_blocking
        Request #:              225509              

        Product:                PathNet
        Product Team:           BB Transfusion
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Update (add/change) bb_dspns_block, bb_dspns_block_product

        Tables read:            bb_dspns_block, bb_dspns_block_product

        Tables updated:         bb_dspns_block, bb_dspns_block_product

        Executing from:         VB

        Special Notes:          

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 02/09/98 David Hall           Initial Release                     *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

Drop program bbt_upd_dispense_blocking:dba go
Create program bbt_upd_dispense_blocking:dba 

/*
record request
(
   dispense_block_id     [Double]
   product_cd            [Double]
   changed_ind           [Short]
   active_ind            [Short]
   allow_override_ind    [Short]
   updt_cnt              [Long]
   block_added           [List]
      block_product_id      [Double]
      product_cd            [Double]
      updt_cnt              [Long]
   block_removed         [List]
      block_product_id      [Double]
      product_cd            [Double]
      updt_cnt              [Long]
)
*/

record reply
(
 1  dispense_block_id           = f8
 1  qual[*]
     2  product_cd              = f8
     2  block_product_id        = f8
%i cclsource:status_block.inc
)

set reply->status_data->status = "F"
set count1 = 0 
set new_dispense_block_id = 0.0
set new_block_product_id = 0.0
set qual_cnt = 0
set block_cnt = 0
set block = 0
set stat = alterlist(reply->qual, 10)

if (request->dispense_block_id = 0)

    ;  * Get next pathnet_seq for dispense_block_id
    set new_dispense_block_id = NEXT_PATHNET_SEQ(0)

    if (curqual = 0)
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "F",
             /* process */ "get next pathnet_seq",
             /* message */ build("get next pathnet_seq failed--dispense_block_id =",request->dispense_block_id)
            )
        go to EXIT_SCRIPT
    endif

    insert into bb_dspns_block db set
        db.dispense_block_id            = new_dispense_block_id
        , db.product_cd                 = request->product_cd
        , db.allow_override_ind         = request->allow_override_ind
        , db.active_ind                 = request->active_ind
        , db.updt_cnt                   = 0
        , db.updt_dt_tm                 = cnvtdatetime(curdate, curtime3)
        , db.updt_id                    = reqinfo->updt_id
        , db.updt_task                  = reqinfo->updt_task
        , db.updt_applctx               = reqinfo->updt_applctx
        , db.active_status_cd
                                        = if (request->active_ind = 1)
                                            reqdata->active_status_cd
                                          else
                                            reqdata->inactive_status_cd
                                          endif
        , db.active_status_dt_tm        = cnvtdatetime(curdate, curtime3)
        , db.active_status_prsnl_id     = reqinfo->updt_id

    with nocounter

    if (curqual = 0)
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "F",
             /* process */ "insert into bb_dspns_block",
             /* message */ build("insert into bb_dspns_block failed--dispense_block_id =",request->dispense_block_id)
            )
        go to EXIT_SCRIPT
    endif

    call PROCESS_BLOCKING(new_dispense_block_id)    

    ; ** Return new_dispense_block_id to VB
    set reply->dispense_block_id      = new_dispense_block_id
    

else   ;not a new blocking auto/dir product
    if (request->changed_ind = 1)
        select into "nl:"
            db.dispense_block_id

        from
            bb_dspns_block db

        where
            db.dispense_block_id    = request->dispense_block_id
            and db.updt_cnt         = request->updt_cnt

        with    nocounter, forupdate(db)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "lock bb_dspns_block forupdate",
                 /* message */ build("lock bb_dspns_block forupdate failed--dispense_block_id =",request->dispense_block_id)
                )
            go to EXIT_SCRIPT
        endif

        update into bb_dspns_block db set
            db.allow_override_ind               = request->allow_override_ind
            , db.active_ind                     = request->active_ind
            , db.updt_cnt                       = db.updt_cnt + 1
            , db.updt_dt_tm                     = cnvtdatetime(curdate, curtime3)
            , db.updt_id                        = reqinfo->updt_id
            , db.updt_task                      = reqinfo->updt_task
            , db.updt_applctx                   = reqinfo->updt_applctx
            , db.active_ind                     = request->active_ind
            , db.active_status_cd
                = if (request->active_ind = 1)
                    reqdata->active_status_cd
                  else
                    reqdata->inactive_status_cd
                  endif
            , db.active_status_dt_tm   = cnvtdatetime(curdate, curtime3)
            , db.active_status_prsnl_id = reqinfo->updt_id

        where   db.dispense_block_id  = request->dispense_block_id

        with    nocounter

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "update into bb_dspns_block",
                 /* message */ build("update into bb_dspns_block failed--dispense_block_id ="
                                    ,request->dispense_block_id)
                )
            go to EXIT_SCRIPT
        endif
    endif       ; endif request->changed_ind

    call PROCESS_BLOCKING(request->dispense_block_id)

endif

call LOAD_PROCESS_STATUS
    (
     /* status  */ "S",
     /* process */ "SUCCESS",
     /* message */ "All records added/updated successfully"
    )
        
go to EXIT_SCRIPT

subroutine PROCESS_BLOCKING(sub_pass_dispense_block_id)
    set stat = alterlist(reply->qual, 10)
    call PROCESS_BLOCK_ADDED(sub_pass_dispense_block_id)
    call PROCESS_BLOCK_REMOVED(sub_pass_dispense_block_id)
    ; ** Resize qual to actual number returned
    set stat = alterlist(reply->qual, qual_cnt)
END ; subroutine PROCESS_BLOCKING

subroutine PROCESS_BLOCK_ADDED(sub_dispense_block_id)

    set block_cnt = size(request->block_added, 5)

    for (block = 1 to block_cnt)
        ;  * Get next pathnet_seq for block_product_id
        set new_block_product_id = NEXT_PATHNET_SEQ(0)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
              /* status  */ "F",
              /* process */ "get next pathnet_seq",
              /* message */ build("get next pathnet_seq failed--block_product_id =",request->block_added[block]->block_product_id)
                )
            go to EXIT_SCRIPT
        endif

        insert into bb_dspns_block_product dbp set
            dbp.block_product_id            = new_block_product_id
            , dbp.dispense_block_id         = sub_dispense_block_id
            , dbp.product_cd        = request->block_added[block]->product_cd
            , dbp.updt_cnt              = 0
            , dbp.updt_dt_tm            = cnvtdatetime(curdate, curtime3)
            , dbp.updt_id               = reqinfo->updt_id
            , dbp.updt_task             = reqinfo->updt_task
            , dbp.updt_applctx          = reqinfo->updt_applctx
            , dbp.active_ind            = 1
            , dbp.active_status_cd      = reqdata->active_status_cd
            , dbp.active_status_dt_tm   = cnvtdatetime(curdate, curtime3)
            , dbp.active_status_prsnl_id = reqinfo->updt_id

        with nocounter

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "insert into bb_dspns_block_product",
                 /* message */ build("insert into bb_dspns_block_product failed--dispense_block_id ="
                                        ,request->block_added[block]->dispense_block_id)
                )
            go to EXIT_SCRIPT
        endif

        ; ** Return new_block_product_id to VB
        set qual_cnt = qual_cnt + 1
        if (mod(qual_cnt, 10) = 1 and qual_cnt != 1)
            set stat = alterlist(reply->qual, qual_cnt + 9)
        endif
        set reply->qual[qual_cnt]->product_cd               = request->block_added[block]->product_cd
        set reply->qual[qual_cnt]->block_product_id         = new_block_product_id    
    endfor
END         ; END subroutine PROCESS_BLOCK_ADDED

subroutine PROCESS_BLOCK_REMOVED(sub_dispense_block_id)

    set block_cnt = size(request->block_removed, 5)

    for (block = 1 to block_cnt)
        select into "nl:"
            dbp.block_product_id

        from
            bb_dspns_block_product dbp

        where
            dbp.block_product_id   = request->block_removed[block]->block_product_id
            and dbp.updt_cnt          = request->block_removed[block]->updt_cnt

        with    nocounter, forupdate(dbp)

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "lock bb_dspns_block_product forupdate",
                 /* message */ build("lock bb_dspns_block_product forupdate failed--block_product_id ="
                                    ,request->block_removed[block]->block_product_id)
                )
            go to EXIT_SCRIPT
        endif

        update into bb_dspns_block_product dbp set
            dbp.updt_cnt                  = dbp.updt_cnt + 1
            , dbp.updt_dt_tm              = cnvtdatetime(curdate, curtime3)
            , dbp.updt_id                 = reqinfo->updt_id
            , dbp.updt_task               = reqinfo->updt_task
            , dbp.updt_applctx            = reqinfo->updt_applctx
            , dbp.active_ind              = 0
            , dbp.active_status_cd        = reqdata->inactive_status_cd
            , dbp.active_status_dt_tm     = cnvtdatetime(curdate, curtime3)
            , dbp.active_status_prsnl_id  = reqinfo->updt_id

        where   dbp.block_product_id  = request->block_removed[block]->block_product_id
    
        with    nocounter

        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "F",
                 /* process */ "update into bb_dspns_block_product",
                 /* message */ build("update into bb_dspns_block_product failed--dispense_block_id ="
                                    ,request->block_removed[block]->dispense_block_id)
                )
            go to EXIT_SCRIPT
        endif
    endfor  
END         ; END subroutine PROCESS_BLOCK_REMOVED

; ** Get next Pathnet_Seq
%i cclsource:bbt_get_pathnet_seq_sub.inc

subroutine LOAD_PROCESS_STATUS
    (
     sub_status,
     sub_process,
     sub_message
    )

    set reply->status_data->status = sub_status
    set count1 = count1 + 1
    if (count1 > 1)
        set stat = alter(reply->status_data->subeventstatus, count1+1)
    endif
    set reply->status_data->subeventstatus[count1]->OperationName = sub_process
    set reply->status_data->subeventstatus[count1]->OperationStatus = sub_status
    set reply->status_data->subeventstatus[count1]->TargetObjectName = "bbt_upd_dispense_blocking"
    set reply->status_data->subeventstatus[count1]->TargetObjectValue = sub_message
END         ; end subroutine LOAD_PROCESS_STATUS

#EXIT_SCRIPT

if (reply->status_data->status = "S")
    set reqinfo->commit_ind = 1
else
    set reqinfo->commit_ind = 0
endif

;call echo(build("status_data->status =", reply->status_data->status))
;for (x = 1 to count1)
;    call echo(reply->status_data->subeventstatus[x]->OperationName)
;    call echo(reply->status_data->subeventstatus[x]->OperationStatus)
;    call echo(reply->status_data->subeventstatus[x]->TargetObjectName)
;    call echo(reply->status_data->subeventstatus[x]->TargetObjectValue)
;endfor
;
;for (x = 1 to qual_cnt)
;    call echo(build(x, "...", 
;        reply->qual[x]->dispense_block_id     , "/",
;        reply->qual[x]->dispense_block_id      ))
;endfor

end go

;Generated by GNU enscript 1.6.4.
