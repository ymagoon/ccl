 ;;Solution_Test/script/Order Management/orm_add_caresets/orm_add_careset.prg Turn on black mode

		
/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       ORM_ADD_CARESET.PRG
        Object name:            ORM_ADD_CARESET
        Request #:              500178

        Product:                DCP                             
        Product Team:           ORDER MANAGEMENT
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Inserts one orderable into the order catalog,
                                along with one or more synonyms, zero or
                                more security entries, and zero or more 
                                cosign/review/validate entries.

        Tables read:            -
        Tables updated:         ORDER_CATALOG
                                ORDER_CATALOG_SYNONYM
                                ORDER_CATALOG_REVIEW
                                DEPT_REVIEW
                                CS_COMPONENT

        Executing from:         CARESET MAINTENANCE TOOL 

        Special Notes:          -

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 10/05/96 Joe Geris            Initial Release                     *
;     ### 10/28/97 Shawn Purcell        add modifiable flag                 *
;     002 07/17/98 Shawn Purcell        add linked_date_comp_seq            *
;     003 04/19/99 Shawn Purcell        set rx_mask=3 form ivbuildertool    *
;     004 04/29/99 Shawn Purcell        Add dcp_clin_cat_cd                 *
;     005 05/17/99 Shawn Purcell        update ord_com_template_long_text   *
;     006 08/24/00 Shawn Purcell        Fill in dept_display_name           *
;     007 07/25/03 Randy Rogers         Add Virtual View                    *
;     008 02/12/04 Mike Roco            Added lockdown_details_flag         *
;     009 03/01/04 Talib Sharif ts9378  Added Support for multifacility     *
;     010 10/27/04 Mike Roco            Added av_optional_ingredient_ind    * 
;	  011 11/19/04 Mark Gromowsky		Refreshing Cache				    *
;     012 06/06/05 dh011019             Fix to allow large sequence numbers *
;	  013 05/13/09 sk010962				Complex Meds - Add intermittent_ind *	
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program orm_add_careset:dba go
create program orm_add_careset:dba                                           

/*
record request
( 1 consent_form_ind = i2
  1 modifiable_flag = i2
  1 active_ind = i2
  1 catalog_type_cd = f8
  1 activity_type_cd = f8
  1 activity_subtype_cd = f8
  1 requisition_format_cd = f8
  1 requisition_routing_cd = f8
  1 inst_restriction_ind = i2
  1 schedule_ind = i2
  1 description = vc                      ;max length of 100 
  1 iv_ingredient_ind = i2
  1 print_req_ind = i2
  1 oe_format_id = f8
  1 orderable_type_flag = i2
  1 complete_upon_order_ind = i2
  1 quick_chart_ind = i2
  1 comment_template_flag = i2
  1 prep_info_flag = i2
  1 dup_checking_ind = i2
  1 bill_only_ind = i2
  1 cont_order_method_flag = i2
  1 order_review_ind = i2
  1 dcp_clin_cat_cd = f8       ;004
  1 orc_text = vc
  1 cscomp_cnt = i4
  1 qual_cscomp[x]
    2 comp_seq = i4
    2 comp_type_cd = f8
    2 comp_id = f8
    2 comp_label = vc
    2 comment_text = vc
    2 required_ind = i2
    2 include_exclude_ind = i2
    2 order_sentence_id = f8
    2 linked_date_comp_seq = i4           ;002
    2 lockdown_details_flag = i2           ;008
	2 av_optional_ingredient_ind = i2     ;010
 1 mnemonic_cnt = i4
  1 qual_mnemonic[x]
    2 hide_flag = i2
    2 mnemonic = vc                       ;max length of 100
    2 mnemonic_type_cd = i8
    2 order_sentence_id = f8
    2 active_ind = i2
    2 orderable_type_flag = i2
    2 dcp_clin_cat_cd = f8 ;004
    2 virtual_view = vc						;007
    2 qual_facility[x]
      3 facility_cd = f8
    2 intermittent_ind = i2
  1 review_cnt = i4
  1 qual_review[x]
    2 action_type_cd = f8
    2 nurse_review_flag = i2
    2 doctor_cosign_flag = i2
    2 rx_verify_flag = i2
  1 dup_cnt = i4
  1 qual_dup[x]
    2 dup_check_seq = i4
    2 exact_hit_action_cd = f8
    2 min_behind = i4
    2 min_behind_action_cd = f8
    2 min_ahead = i4
    2 min_ahead_action_cd = f8
    2 active_ind = i2
)
*/
record reply
( 1 ocKey = f8
  1 status_data
    2 status = c1
    2 subeventstatus[1]
      3 OperationName = c15
      3 OperationStatus = c1
      3 TargetObjectName = c15
      3 TargetObjectValue = vc
)

declare nbr_facility_cds   		= i2 with NoConstant(0),Protect

;010 - begin
declare last_mod               	= c5 with private, noconstant(fillstring(5, " "))
declare mod_date               	= c30 with private, noconstant(fillstring(30, " "))

declare nCnt 					= i4 with protect, noconstant(0)
declare fdCatCd 				= f8 with protect, noconstant(0.0)
declare fdSynCd 				= f8 with protect, noconstant(0.0)
declare msg_text_id 			= f8 with protect, noconstant(0.0) ;012
declare cFailed 				= c1 with protect, noconstant("F")
declare code_set 				= f8 with protect, noconstant(0.0)
declare code_value 				= f8 with protect, noconstant(0.0)
declare cdf_meaning 			= c12 with protect, noconstant(fillstring(12," "))
;010 - end

set reply->status_data->status = "F"

/************************************/
/*       Look up code values        */
/************************************/
set code_set = 6009
set cdf_meaning = "ORD COM TEMP"
execute cpm_get_cd_for_cdf
set text_type_cd = code_value

set code_set = 6030
set cdf_meaning = "NOTE"
execute cpm_get_cd_for_cdf
set note_type_cd = code_value
;CALL ECHO (BUILD("NOTETYPE",note_type_cd))

/***** Get unique sequence numbers to identify new records *****/
select into "nl:"
  y = seq(reference_seq,nextval) ;012 "##################;rp0"
  from dual
  detail
  fdCatCd = y ;012 cnvtint(y)
;012 with format, nocounter
with nocounter ;012
if (curqual = 0)
  go to seq_failed
endif

/***** Add entry to the order_catalog table. *****/  
insert into order_catalog oc set
  oc.catalog_cd = fdCatCd,
  oc.modifiable_flag = request->modifiable_flag,
  oc.consent_form_ind = request->consent_form_ind,
  oc.active_ind = request->active_ind,
  oc.catalog_type_cd = request->catalog_type_cd,
  oc.activity_type_cd = request->activity_type_cd,
  oc.activity_subtype_cd = request->activity_subtype_cd,
  oc.requisition_format_cd = request->requisition_format_cd,
  oc.requisition_routing_cd = request->requisition_routing_cd,
  oc.inst_restriction_ind = request->inst_restriction_ind,
  oc.schedule_ind = request->schedule_ind,
  oc.description = request->description,
  oc.print_req_ind = request->print_req_ind,
  oc.oe_format_id = request->oe_format_id,
  oc.orderable_type_flag = request->orderable_type_flag,
  oc.complete_upon_order_ind = request->complete_upon_order_ind,
  oc.quick_chart_ind = request->quick_chart_ind,
  oc.comment_template_flag = request->comment_template_flag,
  oc.prep_info_flag = request->prep_info_flag,
  oc.dup_checking_ind = request->dup_checking_ind,
  oc.bill_only_ind = request->bill_only_ind,
  oc.cont_order_method_flag = request->cont_order_method_flag,
  oc.order_review_ind = request->order_review_ind,
  oc.primary_mnemonic = request->qual_mnemonic[1]->mnemonic,
  oc.dept_display_name = request->qual_mnemonic[1]->mnemonic, ;006
  oc.dcp_clin_cat_cd = request->dcp_clin_cat_cd,
  oc.updt_dt_tm = cnvtdatetime(curdate,curtime3),
  oc.updt_id = reqinfo->updt_id,
  oc.updt_task = reqinfo->updt_task,            
  oc.updt_applctx = reqinfo->updt_applctx,
  oc.updt_cnt = 0
with nocounter
if (curqual = 0)
  go to oc_failed
endif

/***** Add corresponding entry to the codevalue table *****/

set atc = 0

select into "nl:"
  from code_value m
  where m.code_set = 48 and m.cdf_meaning = "ACTIVE" and m.active_ind = 1
  detail atc = m.code_value
with nocounter

insert into code_value cv set                              
  cv.code_value = fdCatCd,
  cv.code_set = 200,
  cv.display = substring(1,40,request->qual_mnemonic[1]->mnemonic),
  cv.display_key = substring(1,40,cnvtupper(cnvtalphanum(request->qual_mnemonic[1]->mnemonic))),
  cv.description = substring(1,60,request->description),     
  cv.active_ind = request->active_ind,
  cv.begin_effective_dt_tm = cnvtdatetime(curdate,curtime3),
  cv.active_type_cd = atc,
  cv.active_dt_tm = cnvtdatetime(curdate,curtime3),
  cv.updt_dt_tm = cnvtdatetime(curdate,curtime3),
  cv.updt_id = reqinfo->updt_id,
  cv.updt_task = reqinfo->updt_task,            
  cv.updt_applctx = reqinfo->updt_applctx,
  cv.updt_cnt = 0

with nocounter
if (curqual = 0)
  go to cv_failed
endif

/***** Add multiple entries to order_catalog_synonyms table. *****/
for (x = 1 to request->mnemonic_cnt)
   select into "nl:"
      y = seq(reference_seq,nextval) ;012 "##################;rp0"
      from dual
      detail
      fdSynCd = y ;012 cnvtint(y)
   ;012 with format, nocounter
   with nocounter ;012
   if (curqual = 0)
      go to seq_failed
   endif

   insert into order_catalog_synonym ocs set
      ocs.synonym_id = fdSynCd,
      ocs.catalog_cd = fdCatCd,
      ocs.order_sentence_id = request->qual_mnemonic[x]->order_sentence_id,
      ocs.catalog_type_cd = request->catalog_type_cd,
      ocs.activity_type_cd = request->activity_type_cd,
      ocs.activity_subtype_cd = request->activity_subtype_cd,
      ocs.oe_format_id = request->oe_format_id,
      ocs.mnemonic = request->qual_mnemonic[x]->mnemonic,
      ocs.virtual_view = request->qual_mnemonic[x]->virtual_view,			;007
      ocs.mnemonic_key_cap = trim(cnvtupper(request->qual_mnemonic[x]->mnemonic)),
      ocs.mnemonic_type_cd = request->qual_mnemonic[x]->mnemonic_type_cd,
      ocs.hide_flag = request->qual_mnemonic[x]->hide_flag,
      ocs.active_ind = request->qual_mnemonic[x]->active_ind,
      ocs.orderable_type_flag = request->orderable_type_flag,
      ocs.dcp_clin_cat_cd = request->qual_mnemonic[x]->dcp_clin_cat_cd,
      ocs.intermittent_ind = request->qual_mnemonic[x]->intermittent_ind,
      ocs.updt_dt_tm = cnvtdatetime(curdate,curtime3),
      ocs.updt_id = reqinfo->updt_id,
      ocs.updt_task = reqinfo->updt_task,            
      ocs.updt_applctx = reqinfo->updt_applctx,
      ocs.active_status_cd    = reqdata->active_status_cd,
      ocs.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
      ocs.active_status_prsnl_id = reqinfo->updt_id,
      ocs.updt_cnt = 0
   with nocounter
   if (curqual = 0)
      go to ocs_failed
   endif
   set nbr_facility_cds = size(request->qual_mnemonic[x]->qual_facility, 5)
   if (nbr_facility_cds > 0)
	   insert into 	ocs_facility_r ocsfr,
   					(dummyt d with seq = value(nbr_facility_cds))
	   set ocsfr.synonym_id = fdSynCd,
   			ocsfr.facility_cd = request->qual_mnemonic[x]->qual_facility[d.seq]->facility_cd,
   			ocsfr.updt_cnt = 0,
   			ocsfr.updt_dt_tm = cnvtdatetime(curdate,curtime3),
            ocsfr.updt_id = reqinfo->updt_id,
            ocsfr.updt_task = reqinfo->updt_task,
  			ocsfr.updt_applctx = reqinfo->updt_applctx
	   plan d
	   join ocsfr where ocsfr.synonym_id = fdSynCd
	   with nocounter

	   if (curqual = 0)
    	  go to ocsfr_failed
	   endif
   endif
endfor 
/*003 begin*/
if ((request->orderable_type_flag = 8)
   or(request->orderable_type_flag = 11));Multi-ingredient order needs rx_mask
   update into order_catalog_synonym ocs set
	ocs.rx_mask = 3
   where ocs.catalog_cd = fdCatCd
   with nocounter
endif
/*003 end*/
/***** Add entry to the order_catalog_text table */
if (request->comment_template_flag = 1)
   set msg_text_id = 0.0
   select into "nl:"
      nextseqnum = seq(long_data_seq,nextval) ;012 "#################;rp0"
   from dual      
   detail
     msg_text_id = nextseqnum ;012 cnvtint(nextseqnum)
   with nocounter ;012 format

   if (msg_text_id <= 0.0)
      go to oct_failed
   endif

   insert into long_text lt set
     lt.long_text_id = msg_text_id,
     lt.parent_entity_name = "CS_COMPONENT",
     lt.parent_entity_id = fdcatcd,
     lt.long_text = request->orc_text,
     lt.active_ind = 1,
     lt.active_status_cd = reqdata->active_status_cd,
     lt.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
     lt.active_status_prsnl_id = reqinfo->updt_id,  
     lt.updt_dt_tm = cnvtdatetime(curdate, curtime3),
     lt.updt_id = reqinfo->updt_id,
     lt.updt_task = reqinfo->updt_task,
     lt.updt_cnt = 0,
     lt.updt_applctx = reqinfo->updt_applctx
   with nocounter                      

   if (curqual = 0)
      go to oct_failed
   endif
   insert into order_catalog_text oct set      
         oct.catalog_cd = fdCatCd,
         oct.text_type_cd = text_type_cd,
         oct.text_level_flag = 0,
	 oct.long_text_id = msg_text_id,
         oct.updt_dt_tm = cnvtdatetime(curdate,curtime3),
         oct.updt_id = reqinfo->updt_id,
         oct.updt_task = reqinfo->updt_task,            
         oct.updt_applctx = reqinfo->updt_applctx,
         oct.updt_cnt = 0
   with nocounter

   if (curqual = 0)
      go to oct_failed
   endif
   ;005 start
   update into order_catalog oc set
        oc.ord_com_template_long_text_id = msg_text_id
   where oc.catalog_cd = fdcatcd
   with nocounter
   ;005 end
endif


/***** Add multiple entries to the order_catalog_review and dept_review tables */
if (request->review_cnt > 0)
   for (x = 1 to request->review_cnt)
      insert into order_catalog_review ocr set
         ocr.catalog_cd = fdCatCd,
         ocr.action_type_cd = request->qual_review[x].action_type_cd,
         ocr.nurse_review_flag = request->qual_review[x].nurse_review_flag,
	 ocr.doctor_cosign_flag = request->qual_review[x].doctor_cosign_flag,
	 ocr.rx_verify_flag = request->qual_review[x].rx_verify_flag,
         ocr.updt_dt_tm = cnvtdatetime(curdate,curtime3),
         ocr.updt_id = reqinfo->updt_id,
         ocr.updt_task = reqinfo->updt_task,            
         ocr.updt_applctx = reqinfo->updt_applctx,
         ocr.updt_cnt = 0
      with nocounter
      if (curqual = 0)
         go to ocr_failed
      endif
     
   endfor
endif

;call echo (build("compcnt: ",request->cscomp_cnt))
if (request->cscomp_cnt > 0)
   set nbr_to_add = request->cscomp_cnt

   for (x = 1 to nbr_to_add)
    if (cfailed = "F")
     if (note_type_cd = request->qual_cscomp[x].comp_type_cd)   
      set msg_text_id = 0.0
      select into "nl:"
         nextseqnum = seq(long_data_seq,nextval) ;012 "#################;rp0"
      from dual      
      detail
        msg_text_id = nextseqnum ;012 cnvtint(nextseqnum)
      with nocounter ;012 format

      if (msg_text_id <= 0.0)
        set cfailed = "T"
      else
         insert into long_text lt set
           lt.long_text_id = msg_text_id,
           lt.parent_entity_name = "CS_COMPONENT",
           lt.parent_entity_id = fdcatcd,
           lt.long_text = request->qual_cscomp[x].comment_text,
           lt.active_ind = 1,
           lt.active_status_cd = reqdata->active_status_cd,
           lt.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
           lt.active_status_prsnl_id = reqinfo->updt_id,  
           lt.updt_dt_tm = cnvtdatetime(curdate, curtime3),
           lt.updt_id = reqinfo->updt_id,
           lt.updt_task = reqinfo->updt_task,
           lt.updt_cnt = 0,
           lt.updt_applctx = reqinfo->updt_applctx
        with nocounter                      

        if (curqual = 0)
          set cfailed = "T"
        endif
      endif
     else
        set msg_text_id = 0
     endif
     insert into cs_component cc set
       cc.catalog_cd = fdcatcd,
       cc.comp_seq = request->qual_cscomp[x].comp_seq,
       cc.comp_type_cd = request->qual_cscomp[x].comp_type_cd,
       cc.comp_id = request->qual_cscomp[x].comp_id,
       cc.comp_label = request->qual_cscomp[x].comp_label,
       cc.long_text_id = msg_text_id,
       cc.required_ind = request->qual_cscomp[x].required_ind,
       cc.include_exclude_ind = request->qual_cscomp[x].include_exclude_ind,
       cc.linked_date_comp_seq = request->qual_cscomp[x].linked_date_comp_seq, 
       cc.lockdown_details_flag = request->qual_cscomp[x].lockdown_details_flag, 
	   cc.av_optional_ingredient_ind = request->qual_cscomp[x].av_optional_ingredient_ind,	;010
       cc.updt_dt_tm = cnvtdatetime(curdate,curtime3),
       cc.updt_id = reqinfo->updt_id,
       cc.updt_task = reqinfo->updt_task,            
       cc.updt_applctx = reqinfo->updt_applctx,
       cc.updt_cnt = 0
     with nocounter
     if (curqual = 0)
       set cfailed = "T"
     endif
    endif
   endfor
   if (cfailed = "T")
      go to cscomp_failed
   endif
endif


;call echo (build( "dupcnt: ",request->dup_cnt))
if (request->dup_cnt > 0)
   for (x = 1 to request->dup_cnt)
       insert into dup_checking dc set
           dc.catalog_cd = fdcatcd,
           dc.dup_check_seq = request->qual_dup[x].dup_check_seq,
           dc.exact_hit_action_cd = request->qual_dup[x].exact_hit_action_cd,
           dc.min_ahead = request->qual_dup[x].min_ahead,
           dc.min_ahead_action_cd = 
                  request->qual_dup[x].min_ahead_action_cd,
           dc.min_behind = request->qual_dup[x].min_behind,
           dc.min_behind_action_cd = 
                  request->qual_dup[x].min_behind_action_cd,
           dc.active_ind = request->qual_dup[x].active_ind,
           dc.updt_dt_tm = cnvtdatetime(curdate,curtime3),
           dc.updt_id = reqinfo->updt_id,
           dc.updt_task = reqinfo->updt_task,            
           dc.updt_applctx = reqinfo->updt_applctx,
           dc.updt_cnt = 0
       with nocounter
       if (curqual = 0)
          go to dup_failed
       endif
    endfor
endif

go to exit_script

#seq_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "nextval"
  set reply->status_data->subeventstatus[1] 
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "ref_seq"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "ORM_ADD_OCENTRY"
  set cFailed = "T"
go to exit_script

#oc_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "insert"
  set reply->status_data->subeventstatus[1] 
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "order_catalog"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "ORM_ADD_OCENTRY"
  set cFailed = "T"
go to exit_script

#cv_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "insert"
  set reply->status_data->subeventstatus[1] 
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "code_value"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "ORM_ADD_OCENTRY"
  set cFailed = "T"
go to exit_script

#ocs_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "insert"
  set reply->status_data->subeventstatus[1] 
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "orc_synonyms"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "orm_add_ocentry"
  set cFailed = "T"
go to exit_script

#dup_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "insert"
  set reply->status_data->subeventstatus[1] 
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "dup_checking"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "orm_add_ocentry"
  set cFailed = "T"
go to exit_script

#ocr_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "insert"
  set reply->status_data->subeventstatus[1] 
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "orc_review"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "orm_add_ocentry"
  set cFailed = "T"
go to exit_script

#cscomp_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "insert"
  set reply->status_data->subeventstatus[1] 
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "cs_component"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "orm_add_ocentry"
  set cFailed = "T"
go to exit_script


#oct_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "insert"
  set reply->status_data->subeventstatus[1] 
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "order_catalog_text"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "orm_add_ocentry"
  set cFailed = "T"
go to exit_script

#ocsfr_failed
  set reply->status_data->subeventstatus[1]
              ->operationname = "insert"
  set reply->status_data->subeventstatus[1]
              ->operationstatus = "F"
  set reply->status_data->subeventstatus[1]
       ->targetobjectname = "ocs_facility_r"
  set reply->status_data->subeventstatus[1]
     ->targetobjectvalue = "orm_add_careset"
  set cFailed = "T"
go to exit_script

#exit_script
if (cFailed = "T")
  rollback
  set reqinfo->commit_ind = 0
  set reply->ocKey = 0
else
  set reqinfo->commit_ind = 1
  set reply->status_data->status = "S"
  set reply->ocKey = fdCatCd
endif

/****************************************************************************
*Start 011 -  Refresh the Cache                                                        *
*****************************************************************************/

	declare app = i4 with constant(600005),private
	declare GetOrcTask = i4 with constant(500196),private
	declare OrdSearchTask = i4 with constant(500197),private
	declare OrmGetOrcReq = i4 with constant(500080),private
	declare OrmGetOrdSearchReq = i4 with constant(500563),private
	declare hApp = i4 with noconstant(0),private
	declare hTask = i4 with noconstant(0),private
	declare hStep = i4 with noconstant(0),private
	declare hReq = i4 with noconstant(0),private
	declare crmStatus = i4 with noconstant(0),private
	declare sts = i4 with noconstant(0),private
 
 	declare hReqString = vc
 
	;; begin app
	set crmStatus = uar_CrmBeginApp( app , hApp )
 
	if ( crmStatus )
		call echo(build("Error on BeginApp:", app, " Error Code:",crmStatus))
	else
 
		;; begin task
		set crmStatus = uar_CrmBeginTask( hApp , GetOrcTask , hTask )
	 
		if ( crmStatus )
			call uar_CrmEndApp( hApp )
			call echo(build("Error on BeginTask:", GetOrcTask, " Error Code:",crmStatus))
		else
			;; begin Orm Get Orc step
			set hReqString = "orm_get_orc"
			set crmStatus = uar_CrmBeginReq( hTask , hReqString , OrmGetOrcReq , hStep )
		 	
			if ( crmStatus )
				call uar_CrmEndTask( hTask )
				call uar_CrmEndApp( hApp )
				call echo(build("Error on BeginReq:", OrmGetOrcReq, " Error Code:",crmStatus))
			else
		 
				;; fill out request
				set hReq = uar_CrmGetRequest( hStep )
			 
				set sts = uar_CrmSetProperty(hReq, "Cpm.RefreshRequest", "1")
			 
				;; perform step
				set crmStatus = uar_CrmPerform( hStep )
			 
				if ( crmStatus )
					call uar_CrmEndReq( hStep )
					call uar_CrmEndTask ( hTask )
					call uar_CrmEndApp( hApp )
					call echo(build("Error on CrmPerform:", OrmGetOrcReq, " Error Code:",crmStatus))
				else
					;; clean up
					call uar_CrmEndReq( hStep )
					call uar_CrmEndTask ( hTask )
					call uar_CrmEndApp( hApp )
				endif
			endif
		endif
	endif

	set hApp = 0
	set hTask = 0
	set hReq = 0
	set hStep = 0
	;; begin app
	set crmStatus = uar_CrmBeginApp( app , hApp )
 
	if ( crmStatus )
		call echo(build("Error on BeginApp:", app, " Error Code:",crmStatus))
	else
		;; begin task
		set crmStatus = uar_CrmBeginTask( hApp , OrdSearchTask , hTask )
	 
		if ( crmStatus )
			call uar_CrmEndApp( hApp )
			call echo(build("Error on BeginTask:", OrdSearchTask, " Error Code:",crmStatus))
		else	
			;; begin Orm Get Ord Search step
			set hReqString = "orm_get_ord_search"
			set crmStatus = uar_CrmBeginReq( hTask , hReqString , OrmGetOrdSearchReq , hStep )
		 	
			if ( crmStatus )
				call uar_CrmEndTask( hTask )
				call uar_CrmEndApp( hApp )
				call echo(build("Error on BeginReq:", OrmGetOrdSearchReq, " Error Code:",crmStatus))
			else
		 
				;; fill out request
				set hReq = uar_CrmGetRequest( hStep )
			 
				set sts = uar_CrmSetProperty(hReq, "Cpm.RefreshRequest", "1")
			 
				;; perform step
				set crmStatus = uar_CrmPerform( hStep )
			 
				if ( crmStatus )
					call uar_CrmEndReq( hStep )
					call uar_CrmEndTask ( hTask )
					call uar_CrmEndApp( hApp )
					call echo(build("Error on CrmPerform:", OrmGetOrdSearchReq, " Error Code:",crmStatus))
				else
					;; clean up
					call uar_CrmEndReq( hStep )
					call uar_CrmEndTask ( hTask )
					call uar_CrmEndApp( hApp )
				endif
			endif
		endif
	endif	
/******************************* End 011 *************************************************/


 
SET last_mod = "013"
SET mod_date = "May 13, 2009"
 
end go

;Generated by GNU enscript 1.6.4.
