 ;;Solution_Test/script/PathNet -- BB Transfusion/bb_upd_label_params/bb_upd_label_params.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2005 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bb_upd_label_params.prg
        Object name:            bb_upd_label_params
        Request #:              225942

        Product:                Blood Bank
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            Rev 8.0

        Program purpose:        This program will insert, update and delete
                                rows from the BB_ISBT_LABEL_PARAM table.

        Tables read:            bb_isbt_label_param
                                
        Tables updated:         bb_isbt_label_param
        
        Executing from:         BBPrintLabel

        Special Notes:          NONE

;~DB~****************************************************************************************
;*                      GENERATED MODIFICATION CONTROL LOG                                  *
;********************************************************************************************
;*                                                                                          *
;*Mod Date     Engineer             ITN     Feature      Comment                            *
;*--- -------- -------------------- ------- ------------ -----------------------------------*
;*000 10/21/05 Jason Coy            0111987 66427        Initial Release                    *
;~DE~****************************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ***********************************/

drop program bb_upd_label_params:dba go
create program bb_upd_label_params:dba

/*****************************************************************************/
/* Request record                                                            */
/*****************************************************************************/
/*
record request
(
   1 param_list[*]
     2 label_param_id                 = f8        
     2 option_id                      = f8        
     2 orig_product_cd                = f8
     2 new_product_cd                 = f8
     2 label_type_cd                  = f8
     2 print_ind                      = i2
     2 supplier_ind                   = i2
     2 licensed_supplier_ind          = i2
     2 licensed_modifier_ind          = i2
     2 new_product_ind                = i2
     2 save_flag                      = i2 (1 = Insert, 2 = Update, 3 = Delete)
     2 updt_cnt                       = i4
)
*/

/*****************************************************************************/
/* Reply record                                                              */
/*****************************************************************************/
record reply
(
%i cclsource:status_block.inc
)

set reply->status_data->status = "F"

/*****************************************************************************/
/* Master script include files (insert and update)                           */
/*****************************************************************************/
%i cclsource:gm_i_bb_isbt_labe0450_def.inc
%i cclsource:gm_u_bb_isbt_labe0450_def.inc
%i cclsource:gm_d_bb_isbt_labe0450_def.inc

/*****************************************************************************/
/* Constant & Variable declarations                                          */
/*****************************************************************************/
declare SCRIPT_NAME           = c19  with constant("bb_upd_label_params")
declare INSERT_IND            = i2   with constant(1)
declare UPDATE_IND            = i2   with constant(2)
declare DELETE_IND            = i2   with constant(3)
declare stat                  = i2   with protect, noconstant(0)

; Error message declarations.
declare errmsg                = c132 with protect, noconstant(fillstring(132," "))
declare error_check           = i2   with protect, noconstant(error(errmsg,1))
declare uar_error             = vc   with protect, noconstant("")

; Loop index
declare i_idx                 = i4   with protect, noconstant(0)

; Loop through the param list.  Evaluate param->list[*].save_flag to determine whether to
; insert, update or delete to the bb_isbt_label_param table.
for (i_idx = 1 to size(request->param_list,5))
    if (request->param_list[i_idx].save_flag = INSERT_IND)
       /************************************************************************************ 
        *Insert into BB_ISBT_LABEL_PARAM table using the gold master script.               *
        ************************************************************************************/
        set gm_i_bb_isbt_labe0450_req->allow_partial_ind = 0 
        
        set stat = gm_i_bb_isbt_labe0450_f8('BB_ISBT_LABEL_PARAM_ID',
                   request->param_list[i_idx].label_param_id, 1, 0)
                
        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_i2('LICENSED_MODIFIER_IND',
                       request->param_list[i_idx].licensed_modifier_ind, 1, 0)
        endif

        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_i2('LICENSED_SUPPLIER_IND',
                       request->param_list[i_idx].licensed_supplier_ind, 1, 0)
        endif
        
        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_i2('NEW_PRODUCT_IND',
                       request->param_list[i_idx].new_product_ind, 1, 0)
        endif
        
        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_f8('OPTION_ID',
                       request->param_list[i_idx].option_id, 1, 0)
        endif
        
        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_i2('PRINT_IND',
                       request->param_list[i_idx].print_ind, 1, 0)
        endif
        
        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_F8('ORIG_PRODUCT_CD',
                       request->param_list[i_idx].orig_product_cd, 1, 0)
        endif
        
        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_F8('NEW_PRODUCT_CD',
                       request->param_list[i_idx].new_product_cd, 1, 0)
        endif        

        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_F8('LABEL_TYPE_CD',
                       request->param_list[i_idx].label_type_cd, 1, 0)
        endif 

        if (stat = 1)
            set stat = gm_i_bb_isbt_labe0450_i2('SUPPLIER_IND',
                       request->param_list[i_idx].supplier_ind, 1, 0)
        endif
        
        if (stat = 1)
            execute gm_i_bb_isbt_labe0450 with replace(request, gm_i_bb_isbt_labe0450_req),
                                                replace(reply,   gm_i_bb_isbt_labe0450_rep)            
            ; Check for CCL errors.
            if (gm_i_bb_isbt_labe0450_rep->status_data->status = "F")
                call ErrorHandler("F", "BB_ISBT_LABEL_PARAM", gm_i_bb_isbt_labe0450_rep->qual[1].error_msg)
            endif
        else
            ; Check for no ISBT Label Param inserted.
            call ErrorHandler("F", "BB_ISBT_LABEL_PARAM", "Insert failed.")     
        endif
        
    elseif (request->param_list[i_idx].save_flag = UPDATE_IND)
       /************************************************************************************ 
        *Update into BB_ISBT_LABEL_PARAM table using the gold master.                      *
        ************************************************************************************/
        set gm_u_bb_isbt_labe0450_req->allow_partial_ind = 0
        set gm_u_bb_isbt_labe0450_req->force_updt_ind    = 0
        
        set stat = gm_u_bb_isbt_labe0450_f8('BB_ISBT_LABEL_PARAM_ID',
                   request->param_list[i_idx].label_param_id, 1, 0, 1)               
        
        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_i2('LICENSED_MODIFIER_IND',
                       request->param_list[i_idx].licensed_modifier_ind, 1, 0, 0)
        endif

        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_i2('LICENSED_SUPPLIER_IND',
                       request->param_list[i_idx].licensed_supplier_ind, 1, 0, 0)
        endif
        
        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_i2('NEW_PRODUCT_IND',
                       request->param_list[i_idx].new_product_ind, 1, 0, 0)
        endif
        
        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_F8('OPTION_ID',
                       request->param_list[i_idx].option_id, 1, 0, 0)
        endif
        
        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_i2('PRINT_IND',
                       request->param_list[i_idx].print_ind, 1, 0, 0)
        endif
        
        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_F8('ORIG_PRODUCT_CD',
                       request->param_list[i_idx].orig_product_cd, 1, 0, 0)
        endif
        
        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_F8('NEW_PRODUCT_CD',
                       request->param_list[i_idx].new_product_cd, 1, 0, 0)
        endif  
        
        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_F8('LABEL_TYPE_CD',
                       request->param_list[i_idx].label_type_cd, 1, 0, 0)
        endif                

        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_i2('SUPPLIER_IND',
                       request->param_list[i_idx].supplier_ind, 1, 0, 0)
        endif        
   
        if (stat = 1)
            set stat = gm_u_bb_isbt_labe0450_i4('UPDT_CNT',
                       request->param_list[i_idx].updt_cnt, 1, 0, 1)
        endif

        if (stat = 1)
            execute gm_u_bb_isbt_labe0450 with replace(request, gm_u_bb_isbt_labe0450_req),
                                                 replace(reply,   gm_u_bb_isbt_labe0450_rep)            
            ; Check for CCL errors.
            if (gm_u_bb_isbt_labe0450_rep->status_data->status = "F")
                call ErrorHandler("F", "BB_ISBT_LABEL_PARAM", gm_u_bb_isbt_labe0450_rep->qual[1].error_msg)
            endif
        else
            ; Check for no donor contact updated.
            call ErrorHandler("F", "BB_ISBT_LABEL_PARAM", "Update failed.")     
        endif

    elseif (request->param_list[i_idx].save_flag = DELETE_IND)
       /************************************************************************************ 
        *Delete from BB_ISBT_LABEL_PARAM table using the gold master script.               *
        ************************************************************************************/    
        set gm_d_bb_isbt_labe0450_req->allow_partial_ind = 0   
        
        set stat = gm_d_bb_isbt_labe0450_f8('BB_ISBT_LABEL_PARAM_ID',
                   request->param_list[i_idx].label_param_id, 1)
                   
        if (stat = 1)
            execute gm_d_bb_isbt_labe0450 with replace(request, gm_d_bb_isbt_labe0450_req),
                                                 replace(reply,   gm_d_bb_isbt_labe0450_rep)            
            ; Check for CCL errors.
            if (gm_d_bb_isbt_labe0450_rep->status_data->status = "F")
                call ErrorHandler("F", "BB_ISBT_LABEL_PARAM", gm_d_bb_isbt_labe0450_rep->qual[1].error_msg)
            endif
        else
            ; Check for no donor contact updated.
            call ErrorHandler("F", "BB_ISBT_LABEL_PARAM", "Delete failed.")     
        endif
        
    endif    
endfor

go to SET_STATUS

/*****************************************************************************/
/* ErrorHandler subroutine                                                   */
/*****************************************************************************/
declare ErrorHandler(OperationStatus = c1,
                     TargetObjectName = c25,
                     TargetObjectValue = vc) = NULL

subroutine ErrorHandler(OperationStatus,
                        TargetObjectName,
                        TargetObjectValue)
   declare error_cnt = i2 with private, noconstant(0)

   set error_cnt = size(reply->status_data.subeventstatus, 5)
   if (error_cnt > 1
   or (error_cnt = 1 and reply->status_data.subeventstatus[error_cnt].OperationStatus != ""))
      set error_cnt = error_cnt + 1
      set stat = alter(reply->status_data.subeventstatus, error_cnt)
   endif

   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[error_cnt].OperationName = script_name
   set reply->status_data.subeventstatus[error_cnt].OperationStatus = OperationStatus
   set reply->status_data.subeventstatus[error_cnt].TargetObjectName = TargetObjectName
   set reply->status_data.subeventstatus[error_cnt].TargetObjectValue = TargetObjectValue

   set reqinfo->commit_ind = 0
   
   go to EXIT_SCRIPT
end

/*****************************************************************************/
/* Status set and exit script                                                */
/*****************************************************************************/
#SET_STATUS
   set reply->status_data->status = "S"
   set reqinfo->commit_ind = 1

#EXIT_SCRIPT
; Free the master insert and update record structures
%i cclsource:gm_i_bb_isbt_labe0450_cln.inc
%i cclsource:gm_u_bb_isbt_labe0450_cln.inc
%i cclsource:gm_d_bb_isbt_labe0450_cln.inc

end 
go

;Generated by GNU enscript 1.6.4.
