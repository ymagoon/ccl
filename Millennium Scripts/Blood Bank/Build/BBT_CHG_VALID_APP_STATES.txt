 ;;Solution_Test/script/PathNet -- BB Transfusion/Validappstates/BBT_CHG_VALID_APP_STATES.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       BBT_CHG_VALID_APP_STATES
        Object name:            BBT_CHG_VALID_APP_STATES
        Request #:              225053

        Product:                PATHNET
        Product Team:           BLOOD BANK
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        If the state record already exists, the active ind will be set appropriately.
                                If the record does not exist, it will be inserted

        Tables read:            na
        Tables updated:         VALID STATE
        Executing from:         ##

        Special Notes:          NA

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 04/22/96 Yvonne Klipfel       Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_chg_valid_app_states:dba go
create program bbt_chg_valid_app_states:dba

/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
/*
record request
(
   1 process_cd             = f8        ;table 1664
   1 category_cd            = f8        ;table 1605
   1 qual[x]
     2 state_cd             = f8        ;table 1610
     2 updt_cnt             = i4
)
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
record reply
( 1 qual[1]
    2 state_cd  = f8
    2 updt_cnt  = i4
%I CCLSOURCE:STATUS_BLOCK.INC
)

/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
set reply->status_data->status = "F"
set number_to_chg = size(request->qual, 5)
set cur_updt_cnt = 0
set failed = "F"
set count1 = 0
set count2 = 0
set cur_active_ind = 0
set cur_active_dt_tm = cnvtdatetime(curdate, curtime3)
set cur_inactive_dt_tm = cnvtdatetime(curdate, curtime3)
set partial_update = "F"
/****************************************************************************
*       Lock row to update                                                 *
*****************************************************************************/
for (x = 1 to number_to_chg)
   select into "nl:"
       v.state_cd
   from valid_state v
   where v.process_cd            = request->process_cd and
         v.category_cd           = request->category_cd and
         v.state_cd              = request->qual[x]->state_cd
   detail
     cur_active_ind = v.active_ind
     cur_updt_cnt = v.updt_cnt
     cur_active_dt_tm = v.active_dt_tm
     cur_inactive_dt_tm = v.inactive_dt_tm
   with nocounter, forupdate(v)
/****************************************************************************
*       Determine if row previously existed                                 *
*****************************************************************************/
   if (curqual = 0)
      insert into valid_state v set
         v.process_cd            = request->process_cd,
         v.category_cd           = request->category_cd,
         v.state_cd              = request->qual[x]->state_cd,
         v.active_ind            = 1,
         v.active_dt_tm          = cnvtdatetime(curdate, curtime3),
         v.updt_dt_tm            = cnvtdatetime(curdate, curtime3),
         v.updt_id               = reqinfo->updt_id,
         v.updt_task             = reqinfo->updt_task,
         v.updt_applctx          = reqinfo->updt_applctx,
         v.updt_cnt              = 0
      with nocounter
      if (curqual = 0)
         set failed = "T"
         set count1 = count1 + 1
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1 + 1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName = "CHG"
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName = "Valid State"
         set reply->status_data->subeventstatus[count1]->TargetObjectValue = "Insert failed"
      else
         set partial_update = "T"
         set count2 = count2 + 1
         if (count2 > 1)
            set stat = alter(reply->qual, count2 + 1)
         endif
         set reply->qual[count2]->state_cd = request->qual[x]->state_cd
         set reply->qual[count2]->updt_cnt = 0
      endif
   else
/****************************************************************************
*       Check to see if row already changed                                 *
*****************************************************************************/
     if (request->qual[x]->updt_cnt != cur_updt_cnt)
        set failed = "T"
        set count1 = count1 + 1
        if (count1 > 1)
           set stat = alter(reply->status_data->subeventstatus, count1 + 1)
        endif
        set reply->status_data->subeventstatus[count1]->OperationName = "CHG"
        set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
        set reply->status_data->subeventstatus[count1]->TargetObjectName = "Valid State"
        set reply->status_data->subeventstatus[count1]->TargetObjectValue = "Update count mismatch"
     else
/****************************************************************************
*       Reset the row that already exists                                   *
*****************************************************************************/
        update into valid_state v set
           v.active_ind          = (if (cur_active_ind = 1) 0 else 1 endif),
           v.active_dt_tm        = (if (cur_active_ind = 0) 
                                        cnvtdatetime(curdate,curtime3) 
                                    else
                                        cnvtdatetime(cur_active_dt_tm)
                                    endif),
           v.inactive_dt_tm      = (if (cur_active_ind = 1) 
                                        cnvtdatetime(curdate,curtime3) 
                                    else
                                        cnvtdatetime(cur_inactive_dt_tm)
                                    endif),
           v.updt_cnt            = v.updt_cnt + 1,
           v.updt_dt_tm          = cnvtdatetime(curdate,curtime3),
           v.updt_id             = reqinfo->updt_id,
           v.updt_task           = reqinfo->updt_task,
           v.updt_applctx        = reqinfo->updt_applctx
        where v.process_cd       = request->process_cd and
              v.category_cd      = request->category_cd and
              v.state_cd         = request->qual[x]->state_cd
        with nocounter

        if (curqual = 0)
           set failed = "T"
           set count1 = count1 + 1
           if (count1 > 1)
              set stat = alter(reply->status_data->subeventstatus, count1 + 1)
           endif
           set reply->status_data->subeventstatus[count1]->OperationName = "CHG"
           set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
           set reply->status_data->subeventstatus[count1]->TargetObjectName = "Valid State"
           set reply->status_data->subeventstatus[count1]->TargetObjectValue = "Update failed"
        else
           set partial_update = "T"
           set count2 = count2 + 1
           if (count2 > 1)
              set stat = alter(reply->qual, count2 + 1)
           endif
           set reply->qual[count2]->state_cd = request->qual[x]->state_cd
           set reply->qual[count2]->updt_cnt = request->qual[x]->updt_cnt + 1
        endif
     endif
   endif
endfor
/****************************************************************************
*       exit_script                                                         *
*****************************************************************************/
#exit_script
set stat = alter(reply->qual, count2)
if (failed = "T" and partial_update = "F")
  set reqinfo->commit_ind = 0
elseif (failed = "T" and partial_update = "T")
  set reqinfo->commit_ind = 1
  set reply->status_data->status = "P"
else
  set reqinfo->commit_ind = 1
  set reply->status_data->status = "S"
endif

end go

;Generated by GNU enscript 1.6.4.
