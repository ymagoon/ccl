 ;;Solution_Test/script/PathNet -- BB Transfusion/Bbt_Interpretationtool/bbt_add_interpretations.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       BBT_ADD_INTERPRETATIONS
        Object name:            BBT_ADD_INTERPRETATIONS
        Request #:              225141

        Product:                Pathnet
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        To create the interprations

        Tables read:            none
        Tables updated:         interp_task_assay, interp_component,
                                interp_range, result_hash_id, interp_result
        Executing from:         Interpretation Tool

        Special Notes:          ?

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 08/12/96 Mike Goings          Initial Release                     *
;     002 04/29/97 Mike Goings          Donor Modifications                 *
;     003 02/24/98 Mike Goings          days until eligible for donor       *
;     004 03/06/98 Mike Goings          Result_cd for aborh hashs           *
;     005 08/17/98 Mike Goings          From result range updating correctly*
;                                       when value is -1                    *
;     006 12/17/98 Mike Goings          Removal of bb_phases_cd - set to 0  *
;     007 10/11/99 Doug Saus		    Added unknown_age_ind               *
;     008 09/19/02 Christi Ditmars      Fix for CAPEP47681, constraint      *
;                                       violation when adding text interps. *
;     009 08/22/05 Jim Jensen           Save biohazard_ind for Donor ISBT.  *
;     010 06/30/05 Jeff Wain            Long sequence fixes on seqn variable*
;     011 01/08/09 Amy Gum              Remove hits on interp_donor_reason  *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************


drop program bbt_add_interpretations:dba go
create program bbt_add_interpretations:dba

/************************/
/*    Request record    */
/************************/
/*
record request
( 1 interp_id = f8
  1 task_assay_cd = f8
  1 order_catalog_cd = f8
  1 service_resource_cd = f8
  1 interp_type_cd  = f8
  1 interp_option_cd = f8
  1 system_ind = i4
;  1 modifiable_ind = i4
  1 task_assay_flag = vc ; "T" to add "F" not to add
  1 component_cnt = i4
  1 component_data[x]
    2 comp_id = f8
    2 sequence = i4
    2 verified_flag = i2
;    2 result_status_cd = f8
    2 inc_assay_cd = f8
    2 cross_time_ind = i4
    2 time_window_min = i4
    2 time_window_units_cd = f8
    2 result_required_flag = i4
    2 component_flag = vc ; "T" to add "F" not to add
    2 range_count = i4
    2 range_data[x]
      3 range_id = f8
      3 sequence = i4 
;      3 nomenclature_cd = f8
      3 inc_assay_cd = f8
      3 unknown_age_ind = i2 ;007
      3 age_from_min_cd = f8
      3 age_from_min = i4
      3 age_to_units_cd = f8
      3 age_to_minutes = i4
      3 species_cd = f8
      3 sex_cd = f8
      3 race_cd = f8
      3 range_flag = vc ; "T" to add "F" not to add
      3 hash_count = i4
      3 hash_data[x]
         4 sequence = i4
         4 from_result_range = f8
         4 from_result_range_yn = vc
         4 to_result_range = f8
         4 to_result_range_yn = vc
         4 result_hash = vc25
         4 nomenclature_id = f8
         4 result_cd = f8               ; 004
         4 donor_eligibility_cd = f8    ; 002 
         4 donor_reason_cd = f8         ; 002
         4 days_ineligible = i4
         4 hash_string = vc
         4 hash_flag = vc ; "T" to add "F" not to add
         4 biohazard_ind  = i2
  1 result_count = i4
  1 result_data[x]
    2 result_nomenclature_id = f8
    2 result_cd = f8
    2 hash_pattern = vc2500
    2 result_text = vc
    2 days_ineligible = i4
    2 donor_eligibility_cd = f8
    2 result_flag = vc ; "T" to add "F" not to add
    2 reason_count = i4                 ; 002
    2 reason_data[x]                    ; 002
      3 reason_cd = f8                  ; 002 
 )
*/


/************************/
/*     Reply record     */
/************************/
record reply
( 1 interp_id = f8
  1 comp_data[*]
    2 comp_id = f8
    2 comp_assay_cd = f8
    2 range_data[*]
      3 range_id = f8
      3 hash_data[*]
         4 hash_id = f8
         4 hash_string = vc
         4 range_id = f8
  1 result_data[*]
    2 result_id = f8
  1  status_data
      2  status                    = c1
      2  subeventstatus[1]
          3  SourceObjectName       = c15
          3  SourceObjectQual       = i4
          3  SourceObjectValue      = c50
          3  OperationName          = c8
          3  OperationStatus        = c1
          3  TargetObjectName       = c15
          3  TargetObjectValue      = c50
          3  Sub_Event_dt_tm        = di8
)

/************************/
/* Initialize variables */
/************************/
record current
( 
 1  system_dt_tm              = dq8
)
set current->system_dt_tm = cnvtdatetime(curdate, curtime3)

set reply->status_data->status = "F"
declare failures 				= i4 with protect, noconstant(0)
declare hold_interp_cd			= f8 with protect, noconstant(request->interp_id)
declare hold_comp_cd 			= f8 with protect, noconstant(0.0)
declare hold_range_cd 			= f8 with protect, noconstant(0.0)
declare hold_hash_cd 			= f8 with protect, noconstant(0.0)
declare new_interp_result_id 	= f8 with protect, noconstant(0.0)                      /* 002 */
declare next_code 				= f8 with protect, noconstant(0.0)
declare text_code 				= f8 with protect, noconstant(0.0)
declare count2 					= i4 with protect, noconstant(0)
/************************/
/*    Insert records     */
/************************/
if (request->task_assay_flag = "T")
 execute cpm_next_code,
 set hold_interp_cd = next_code,
 insert into interp_task_assay ita set
    ita.interp_id = hold_interp_cd,
    ita.task_assay_cd = request->task_assay_cd,
    ita.interp_type_cd = request->interp_type_cd,
    ita.generate_interp_flag = request->system_ind,
    ita.interp_option_cd = if (request->interp_option_cd = 0)
                              0
                           else
                               request->interp_option_cd
                           endif,
    ita.service_resource_cd = if (request->service_resource_cd = -1)
                        0
                              else
                        request->service_resource_cd
                              endif,
    ita.order_cat_cd = if (request->order_catalog_cd = -1)
                  0
                       else
                  request->order_catalog_cd
                       endif,
    ita.phase_cd = 0,
    ita.active_ind = 1,
    ita.active_status_cd = reqdata->active_status_cd,
    ita.active_status_prsnl_id = reqinfo->updt_id,
    ita.active_status_dt_tm = cnvtdatetime(current->system_dt_tm),
    ita.updt_cnt = 0,
    ita.updt_dt_tm = cnvtdatetime(current->system_dt_tm),
    ita.updt_id = reqinfo->updt_id,
    ita.updt_task = reqinfo->updt_task,
    ita.updt_applctx = reqinfo->updt_applctx

   set reply->interp_id = hold_interp_cd
  with nocounter

  if (curqual = 0)
      set failures = 1,
      set count2 = count2 + 1,
      set reply->status_data->subeventstatus[count2]->SourceObjectName
               = "script",
      set reply->status_data->subeventstatus[count2]->SourceObjectValue
               = "bbt_add_interpretations",
      set reply->status_data->subeventstatus[count2]->OperationName
               = "Update",
      set reply->status_data->subeventstatus[count2]->OperationStatus
               = "F",
      set reply->status_data->subeventstatus[count2]->TargetObjectName
               = "Interp Task Assay",
      set reply->status_data->subeventstatus[count2]->TargetObjectValue 
               = "task_assay_cd",
      set reply->status_data->subeventstatus[count2]->SourceObjectQual
               = 1,
      set reply->status_data->subeventstatus[count2]->Sub_Event_Dt_Tm
               = cnvtdatetime(curdate,curtime),
      go to exit_script
  endif

endif

#insert_component
for (x = 1 to request->component_cnt)
  if (request->comp_data[x].component_flag = "T")
   set next_code = 0.0
   execute cpm_next_code,
   set hold_comp_cd = next_code,
   insert into interp_component ic set
        ic.interp_id = hold_interp_cd,
        ic.interp_detail_id = hold_comp_cd,
        ic.sequence = request->comp_data[x].sequence,
        ic.verified_flag = request->comp_data[x].verified_flag,
        ic.included_assay_cd = request->comp_data[x].inc_assay_cd,
        ic.cross_drawn_dt_tm_ind = 
                        request->comp_data[x].cross_time_ind,
        ic.time_window_minutes =
                if (request->comp_data[x].time_window_min = -1)
                        null
                else
                        request->comp_data[x].time_window_min
                endif,
        ic.time_window_units_cd = 
                if (request->comp_data[x].time_window_units_cd = -1)
                        0
                else
                  request->comp_data[x].time_window_units_cd
                endif,
        ic.result_req_flag = request->comp_data[x].result_required_flag,
        ic.active_ind = 1,
        ic.active_status_cd = reqdata->active_status_cd,
        ic.active_status_prsnl_id = reqinfo->updt_id,
        ic.active_status_dt_tm = cnvtdatetime(current->system_dt_tm),
        ic.updt_cnt = 0,
        ic.updt_dt_tm = cnvtdatetime(current->system_dt_tm),
        ic.updt_id = reqinfo->updt_id,
        ic.updt_task = reqinfo->updt_task,
        ic.updt_applctx = reqinfo->updt_applctx

     set stat = alterlist (reply ->comp_data, x),
     set reply->comp_data[x].comp_id = hold_comp_cd,
     set reply->comp_data[x].comp_assay_cd = request->comp_data[x].inc_assay_cd
    with counter

    if (curqual = 0)
        set failures = 1,
        set count2 = count2 + 1,
        set reply->status_data->subeventstatus[count2]->SourceObjectName
               = "script",
        set reply->status_data->subeventstatus[count2]->SourceObjectValue
               = "bbt_add_interpretations",
        set reply->status_data->subeventstatus[count2]->OperationName
               = "Update",
        set reply->status_data->subeventstatus[count2]->OperationStatus
               = "F",
        set reply->status_data->subeventstatus[count2]->TargetObjectName
               = "Interp Component",
        set reply->status_data->subeventstatus[count2]->TargetObjectValue 
               = "inc_assay_cd",
        set reply->status_data->subeventstatus[count2]->SourceObjectQual
               = 1,
        set reply->status_data->subeventstatus[count2]->Sub_Event_Dt_Tm
               = cnvtdatetime(curdate,curtime),
        go to exit_script
    endif
  else
     set stat = alterlist (reply ->comp_data,x),
     set reply->comp_data[x].comp_id = 0.0,
     set reply->comp_data[x].comp_assay_cd = 0.0
  endif

  /************************/
  /*  Insert Range        */
  /************************/
  for (y = 1 to request->comp_data[x].range_count)
    if (request->comp_data[x].range_data[y].range_flag = "T")
      set next_code = 0.0
      execute cpm_next_code,
      set hold_range_cd = next_code
	;007 - added unknown age indicator to insert
      insert into interp_range ir set
          ir.interp_range_id = hold_range_cd,
          ir.interp_detail_id = if (hold_comp_cd = 0.0)
                request->comp_data[x].comp_id
                                else
                hold_comp_cd
                                endif,
          ir.interp_id = hold_interp_cd,
          ir.sequence = request->comp_data[x].range_data[y].sequence,
          ir.included_assay_cd = request->comp_data[x].range_data[y].inc_assay_cd,
          ir.unknown_age_ind = request->comp_data[x].range_data[y].unknown_age_ind, 
          ir.age_from_units_cd = if (request->comp_data[x].range_data[y].age_from_min_cd = -1)
                  0
                 else
                   request->comp_data[x].range_data[y].age_from_min_cd
                 endif,
          ir.age_from_minutes = if (request->comp_data[x].range_data[y].age_from_min = -1)
                  NULL
                 else
                   request->comp_data[x].range_data[y].age_from_min
                 endif,
          ir.age_to_units_cd = if (request->comp_data[x].range_data[y].age_to_units_cd = -1)
                  0
                 else
                   request->comp_data[x].range_data[y].age_to_units_cd
                 endif,
          ir.age_to_minutes = if (request->comp_data[x].range_data[y].age_to_minutes = -1)
                  NULL
                 else
                   request->comp_data[x].range_data[y].age_to_minutes
                 endif,
          ir.species_cd = if (request->comp_data[x].range_data[y].species_cd = -1)
                  0
                 else
                   request->comp_data[x].range_data[y].species_cd
                 endif,
          ir.gender_cd = if (request->comp_data[x].range_data[y].sex_cd = -1)
                  0
                 else
                   request->comp_data[x].range_data[y].sex_cd
                 endif,
          ir.race_cd = if (request->comp_data[x].range_data[y].race_cd = -1)
                  0
                 else
                   request->comp_data[x].range_data[y].race_cd
                 endif,
          ir.active_ind = 1,
          ir.active_status_cd = reqdata->active_status_cd,
          ir.active_status_prsnl_id = reqinfo->updt_id,
          ir.active_status_dt_tm = cnvtdatetime(current->system_dt_tm),
          ir.updt_cnt = 0,
          ir.updt_dt_tm = cnvtdatetime(current->system_dt_tm),
          ir.updt_id = reqinfo->updt_id,
          ir.updt_task = reqinfo->updt_task,
          ir.updt_applctx = reqinfo->updt_applctx
      
       set stat = alterlist (reply->comp_data[x].range_data, y),
       set reply->comp_data[x].range_data[y].range_id = hold_range_cd
       with counter
     
       if (curqual = 0)
          set failures = 1,
          set count2 = count2 + 1,
          set reply->status_data->subeventstatus[count2]->SourceObjectName
               = "script",
          set reply->status_data->subeventstatus[count2]->SourceObjectValue
               = "bbt_add_interpretations",
          set reply->status_data->subeventstatus[count2]->OperationName
               = "Update",
          set reply->status_data->subeventstatus[count2]->OperationStatus
               = "F",
          set reply->status_data->subeventstatus[count2]->TargetObjectName
               = "Interp Range",
          set reply->status_data->subeventstatus[count2]->TargetObjectValue 
               = "inc_assay_cd",
          set reply->status_data->subeventstatus[count2]->SourceObjectQual
               = 1,
          set reply->status_data->subeventstatus[count2]->Sub_Event_Dt_Tm
               = cnvtdatetime(curdate,curtime),
          go to exit_script
       endif
     else
       set stat = alterlist (reply->comp_data[x]->range_data, y),
       set reply->comp_data[x].range_data[y].range_id = request->comp_data[x].range_data[y].range_id
     endif
     /************************/
     /*  Insert Hash         */
     /************************/
     for (z = 1 to request->comp_data[x].range_data[y].hash_count)
       if (request->comp_data[x].range_data[y].hash_data[z].hash_flag = "T")
        set next_code = 0.0
        execute cpm_next_code,
        set hold_hash_cd = next_code
        insert into result_hash r set
            r.interp_range_id = if (hold_range_cd = 0.0)
                request->comp_data[x].range_data[y].range_id
                                else
                hold_range_cd
                                endif,
            r.interp_detail_id = if (hold_comp_cd = 0.0)
                request->comp_data[x].comp_id
                                else
                hold_comp_cd
                                endif,
            r.result_hash_id = hold_hash_cd,
            r.days_ineligible = request->comp_data[x].range_data[y].hash_data[z].days_ineligible,
            r.interp_id = hold_interp_cd,
            r.included_assay_cd = request->comp_data[x].range_data[y].inc_assay_cd,
            r.sequence = request->comp_data[x].range_data[y].hash_data[z].sequence,
; 005            r.from_result_range = if (request->comp_data[x].range_data[y].hash_data[z].from_result_range = -1)
            r.from_result_range = if (request->comp_data[x].range_data[y].hash_data[z].from_result_range_yn = "N")  ; 005
                        null
                      else
                request->comp_data[x].range_data[y].hash_data[z].from_result_range
                      endif,
; 005            r.to_result_range = if (request->comp_data[x].range_data[y].hash_data[z].to_result_range = -1)
            r.to_result_range = if (request->comp_data[x].range_data[y].hash_data[z].to_result_range_yn = "N")   ; 005
                        null
                      else
                request->comp_data[x].range_data[y].hash_data[z].to_result_range
                      endif,
            r.result_hash = request->comp_data[x].range_data[y].hash_data[z].result_hash,
            r.nomenclature_id = if (request->comp_data[x].range_data[y].hash_data[z].nomenclature_id = -1)
                        0
                      else
                request->comp_data[x].range_data[y].hash_data[z].nomenclature_id
                      endif,
            r.donor_eligibility_cd = request->comp_data[x].range_data[y].hash_data[z].donor_eligibility_cd,   /* 002 */
            r.donor_reason_cd = request->comp_data[x].range_data[y].hash_data[z].donor_reason_cd,       /* 002 */
            r.result_cd = if (request->comp_data[x].range_data[y].hash_data[z].result_cd = -1)          /* 004 */
                        0                                                                               /* 004 */
                      else                                                                              /* 004 */
                request->comp_data[x].range_data[y].hash_data[z].result_cd                              /* 004 */
                      endif,                                                                            /* 004 */
            r.biohazard_ind = request->comp_data[x].range_data[y].hash_data[z].biohazard_ind,
            r.active_ind = 1,
            r.active_status_cd = reqdata->active_status_cd,
            r.active_status_prsnl_id = reqinfo->updt_id,
            r.active_status_dt_tm = cnvtdatetime(current->system_dt_tm),
            r.updt_cnt = 0,
            r.updt_dt_tm = cnvtdatetime(current->system_dt_tm),
            r.updt_id = reqinfo->updt_id,
            r.updt_task = reqinfo->updt_task,
            r.updt_applctx = reqinfo->updt_applctx

         set stat = alterlist (reply->comp_data[x].range_data[y].hash_data, z),
         set reply->comp_data[x].range_data[y].hash_data[z].hash_id = hold_hash_cd         
         set reply->comp_data[x].range_data[y].hash_data[z].hash_string =
                request->comp_data[x].range_data[y].hash_data[z].hash_string
         set reply->comp_data[x].range_data[y].hash_data[z].range_id = 
                reply->comp_data[x].range_data[y].range_id
        with counter
        
         if (curqual = 0)
            set failures = 1,
            set count2 = count2 + 1,
            set reply->status_data->subeventstatus[count2]->SourceObjectName
               = "script",
            set reply->status_data->subeventstatus[count2]->SourceObjectValue
               = "bbt_add_interpretations",
            set reply->status_data->subeventstatus[count2]->OperationName
               = "Update",
            set reply->status_data->subeventstatus[count2]->OperationStatus
               = "F",
            set reply->status_data->subeventstatus[count2]->TargetObjectName
               = "Result Hash",
            set reply->status_data->subeventstatus[count2]->TargetObjectValue 
               = "inc_assay_cd",
            set reply->status_data->subeventstatus[count2]->SourceObjectQual
               = 1,
            set reply->status_data->subeventstatus[count2]->Sub_Event_Dt_Tm
               = cnvtdatetime(curdate,curtime),
            go to exit_script
         endif
       else
         set stat = alterlist (reply->comp_data[x]->range_data[y]->hash_data, z),
         set reply->comp_data[x].range_data[y].hash_data[z].hash_id = 0.0
       endif

     endfor
  endfor        
endfor

/************************/
/*  Insert Result    */
/************************/
for (y = 1 to request->result_count)
  if (request->result_data[y].result_flag = "T")
   if (request->result_data[y].result_text > "")
      select into "nl:"
          seqn = seq(LONG_DATA_SEQ, nextval)
      from        dual
         detail
           text_code   = seqn
         with        format, nocounter
   endif
   set next_code = 0.0
   execute cpm_next_code
   set new_interp_result_id = next_code

   if (request->result_data[y].result_text > "")
      insert into long_text_reference lt set
        lt.long_text_id             = text_code,
        lt.parent_entity_name       = "INTERP_RESULT",
        lt.parent_entity_id         = next_code,
        lt.long_text                = request->result_data[y].result_text,
        lt.updt_cnt                 = 0,
        lt.updt_dt_tm               = cnvtdatetime(current->system_dt_tm),
        lt.updt_id                  = reqinfo->updt_id,
        lt.updt_task                = reqinfo->updt_task,
        lt.updt_applctx             = reqinfo->updt_applctx,
        lt.active_ind               = 1,
        lt.active_status_cd         = reqdata->active_status_cd,
        lt.active_status_dt_tm      = cnvtdatetime(current->system_dt_tm),
        lt.active_status_prsnl_id   = reqinfo->updt_id
      with nocounter
     
      if (curqual = 0)
        set failures = 1,
        set count2 = count2 + 1,
        set reply->status_data->subeventstatus[count2]->SourceObjectName
             = "script",
        set reply->status_data->subeventstatus[count2]->SourceObjectValue
             = "bbt_add_interpretations",
        set reply->status_data->subeventstatus[count2]->OperationName
             = "Update",
        set reply->status_data->subeventstatus[count2]->OperationStatus
             = "F",
        set reply->status_data->subeventstatus[count2]->TargetObjectName
             = "Long Text",
        set reply->status_data->subeventstatus[count2]->TargetObjectValue 
             = "inc_assay_cd",
        set reply->status_data->subeventstatus[count2]->SourceObjectQual
             = 1,
        set reply->status_data->subeventstatus[count2]->Sub_Event_Dt_Tm
             = cnvtdatetime(curdate,curtime),
        go to exit_script
      endif
   endif



   insert into interp_result ir set
        ir.interp_result_id = next_code,
        ir.interp_id = hold_interp_cd,
        ir.result_nomenclature_id  = if (request->result_data[y].result_nomenclature_id = -1)
               0
                  else
               request->result_data[y].result_nomenclature_id
                  endif,
        ir.result_cd = if (request->result_data[y].result_cd = -1)
                0
                       else
                request->result_data[y].result_cd
                        endif,
        ir.hash_pattern = request->result_data[y].hash_pattern,
        ir.donor_eligibility_cd = request->result_data[y].donor_eligibility_cd,
        ir.days_ineligible = request->result_data[y].days_ineligible,
        ir.long_text_id = text_code,
        ir.active_ind = 1,
        ir.active_status_cd = reqdata->active_status_cd,
        ir.active_status_prsnl_id = reqinfo->updt_id,
        ir.active_status_dt_tm = cnvtdatetime(current->system_dt_tm),
        ir.updt_cnt = 0,
        ir.updt_dt_tm = cnvtdatetime(current->system_dt_tm),
        ir.updt_id = reqinfo->updt_id,
        ir.updt_task = reqinfo->updt_task,
        ir.updt_applctx = reqinfo->updt_applctx

    set stat = alterlist (reply->result_data, y),
    set reply->result_data[y].result_id = next_code
   with counter
   if (curqual = 0)
      set failures = 1,
      set count2 = count2 + 1,
      set reply->status_data->subeventstatus[count2]->SourceObjectName
               = "script",
      set reply->status_data->subeventstatus[count2]->SourceObjectValue
               = "bbt_add_interpretations",
      set reply->status_data->subeventstatus[count2]->OperationName
               = "Update",
      set reply->status_data->subeventstatus[count2]->OperationStatus
               = "F",
      set reply->status_data->subeventstatus[count2]->TargetObjectName
               = "Result Hash",
      set reply->status_data->subeventstatus[count2]->TargetObjectValue 
                 = "inc_assay_cd",
      set reply->status_data->subeventstatus[count2]->SourceObjectQual
               = 1,
      set reply->status_data->subeventstatus[count2]->Sub_Event_Dt_Tm
               = cnvtdatetime(curdate,curtime),
      go to exit_script
   endif
                                                                        /* 002 */
 else
    set stat = alterlist (reply->result_data, y),
    set reply->result_data[y].result_id = 0.0
 endif
endfor
/************************/
/*    exit_script       */
/************************/
#exit_script

if (failures = 0)
  commit,
  set reply->status_data->status = "S"
else
  rollback,
  set reply->status_data->status = "F"
endif

end go

;Generated by GNU enscript 1.6.4.
