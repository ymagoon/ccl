 ;;Solution_Test/script/PathNet -- BB Transfusion/Bbt_Interpretationtool/bbt_get_interp_results.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_get_interp_results.prg
        Object name:            bbt_get_interp_results
        Request #:              225151

        Product:                Pathnet                        
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Retrieve results associated the interp
                                task assay

        Tables read:            interp_result
        Tables updated:         none
        Executing from:         Interpretation Tool

        Special Notes:          
******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 08/14/96 Mike Goings          Initial Release                     *
;     002 12/16/97 Mike Goings          Changed source_string to mnemonic   *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
Drop Program   BBT_GET_INTERP_RESULTS : dba go
Create Program  BBT_GET_INTERP_RESULTS : dba

/*
Record Request
(
   1  interp_id = f8
   1  text_ind = i2
   1  alpha_ind = i2
)
*/

Record  Reply
(
  1 qual[*]
    2  interp_result_id       =  F8 
    2  result_nomenclature_id =  F8
    2  result_nomenclature_disp =  vc
    2  result_cd              =  F8
    2  result_cd_disp         =  vc
    2  hash_pattern           =  vc
    2  result_text            =  vc
    2  updt_cnt               =  i4
    2  long_text_id           =  F8
    2  text_updt_cnt          =  i4
%i cclsource:status_block.inc
)
set  reply -> status_data -> status  =  "F" 
set count = 0

if ((request->text_ind = 2) and (request->alpha_ind = 2))
/* if they are both 2 then the interpretation type has changed */
  select into "nl:"   
       ir.*
  from   
        interp_result ir,
        (dummyt d with seq = 1),
        (dummyt d2 with seq = 1),
        long_text_reference l,
        nomenclature n

  plan ir  where ir.interp_id = request->interp_id and
         ir.active_ind = 1
  join d   where d.seq = 1
  join l   where l.long_text_id = ir.long_text_id and
           l.parent_entity_name = "INTERP_RESULT" and
           l.active_ind = 1 
  join d2  where d2.seq = 1
  join n   where n.nomenclature_id = ir.result_nomenclature_id

  detail 
    count = count + 1,
    stat = alterlist(reply->qual, count),
    reply->qual[count].interp_result_id = ir.interp_result_id,
    reply->qual[count].result_nomenclature_id = ir.result_nomenclature_id,
    reply->qual[count].result_nomenclature_disp = n.mnemonic,            /* 002 */
    reply->qual[count].result_cd = ir.result_cd,
    reply->qual[count].hash_pattern = ir.hash_pattern,
    if (l.long_text_id = 0)
     reply->qual[count].result_text = ""
    else
      reply->qual[count].result_text = l.long_text
    endif,
    reply->qual[count].text_updt_cnt = l.updt_cnt,
    reply->qual[count].long_text_id = l.long_text_id,
    reply->qual[count].updt_cnt = ir.updt_cnt

  with counter, outerjoin = d2, outerjoin = d, dontcare = l
elseif ((request->text_ind = 1) and (request->alpha_ind = 1))
   select into "nl:"   
          ir.*
   from   
           interp_result ir,
           long_text_reference l,
           nomenclature n
   
   plan ir  where ir.interp_id = request->interp_id and
            ir.active_ind = 1
   join l   where l.long_text_id = ir.long_text_id and
            l.parent_entity_name = "INTERP_RESULT" and
            l.active_ind = 1 
   join n   where n.nomenclature_id = ir.result_nomenclature_id
   
   order by ir.interp_result_id

   detail 
      count = count + 1,
      stat = alterlist(reply->qual, count),
      reply->qual[count].interp_result_id = ir.interp_result_id,
      reply->qual[count].result_nomenclature_id = ir.result_nomenclature_id,
      reply->qual[count].result_nomenclature_disp = n.mnemonic,
      reply->qual[count].result_cd = ir.result_cd,
      reply->qual[count].hash_pattern = ir.hash_pattern,
      if (l.long_text_id = 0)
        reply->qual[count].result_text = ""
      else
        reply->qual[count].result_text = l.long_text
      endif,
      reply->qual[count].text_updt_cnt = l.updt_cnt,
      reply->qual[count].long_text_id = l.long_text_id,
      reply->qual[count].updt_cnt = ir.updt_cnt
   
   with counter
elseif ((request->text_ind = 1) and (request->alpha_ind = 0))
   select into "nl:"   
          ir.*
   from   
           interp_result ir,
           long_text_reference l
   
   plan ir  where ir.interp_id = request->interp_id and
            ir.active_ind = 1
   join l   where l.long_text_id = ir.long_text_id and
            l.parent_entity_name = "INTERP_RESULT" and
            l.active_ind = 1 
   
   order by ir.interp_result_id

   detail 
      count = count + 1,
      stat = alterlist(reply->qual, count),
      reply->qual[count].interp_result_id = ir.interp_result_id,
      reply->qual[count].result_nomenclature_id = ir.result_nomenclature_id,
      reply->qual[count].result_nomenclature_disp = "",
      reply->qual[count].result_cd = ir.result_cd,
      reply->qual[count].hash_pattern = ir.hash_pattern,
      if (l.long_text_id = 0)
        reply->qual[count].result_text = ""
      else
        reply->qual[count].result_text = l.long_text
      endif,
      reply->qual[count].text_updt_cnt = l.updt_cnt,
      reply->qual[count].long_text_id = l.long_text_id,
      reply->qual[count].updt_cnt = ir.updt_cnt
   
   with counter
elseif ((request->text_ind = 0) and (request->alpha_ind = 1))
   select into "nl:"   
          ir.*
   from   
           interp_result ir,
           nomenclature n
   
   plan ir  where ir.interp_id = request->interp_id and
            ir.active_ind = 1
   join n   where n.nomenclature_id = ir.result_nomenclature_id
   
   order by ir.interp_result_id

   detail 
      count = count + 1,
      stat = alterlist(reply->qual, count),
      reply->qual[count].interp_result_id = ir.interp_result_id,
      reply->qual[count].result_nomenclature_id = ir.result_nomenclature_id,
      reply->qual[count].result_nomenclature_disp = n.mnemonic,
      reply->qual[count].result_cd = ir.result_cd,
      reply->qual[count].hash_pattern = ir.hash_pattern,
      reply->qual[count].result_text = "",
      reply->qual[count].text_updt_cnt = 0,
      reply->qual[count].long_text_id = 0,
      reply->qual[count].updt_cnt = ir.updt_cnt
   
   with counter
else  ; both text and alpha response are zero
   select into "nl:"   
          ir.*
   from   
           interp_result ir
   
   plan ir  where ir.interp_id = request->interp_id and
            ir.active_ind = 1

   order by ir.interp_result_id

   detail 
      count = count + 1,
      stat = alterlist(reply->qual, count),
      reply->qual[count].interp_result_id = ir.interp_result_id,
      reply->qual[count].result_nomenclature_id = ir.result_nomenclature_id,
      reply->qual[count].result_nomenclature_disp = ""
      reply->qual[count].result_cd = ir.result_cd,
      reply->qual[count].hash_pattern = ir.hash_pattern,
      reply->qual[count].result_text = "",
      reply->qual[count].text_updt_cnt = 0,
      reply->qual[count].long_text_id = 0,
      reply->qual[count].updt_cnt = ir.updt_cnt
   
   with counter
endif

if (curqual != 0)
  set reply->status_data->status = "S"
else
  set reply->status_data->status = "Z"
endif

end go

;Generated by GNU enscript 1.6.4.
