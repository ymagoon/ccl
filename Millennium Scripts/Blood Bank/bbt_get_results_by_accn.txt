 ;;Solution_Test/script/PathNet -- BB Transfusion/RESULTENTRYFORBLOODBANK/BBT_GET_RESULTS_BY_ACCN.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-2004 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_get_results_by_accn.prg
        Object name:            bbt_get_results_by_accn
        Request #:              225157

        Product:                Blood Bank
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Load task assay and result information
                                for a given accession for result entry.

        Tables read:            assay_processing_list
                                bb_exception
                                code_value
                                container
                                data_map
                                discrete_task_assay
                                long_text
                                perform_result
                                product_event
                                result
                                result_comment
                                bb_qc_group
                                pcs_lot_information
                                reference_range_factor

        Tables updated:         None
        Executing from:

        Special Notes:

******************************************************************************/

;~DB~**************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG                *
;    **************************************************************************
;    *                                                                        *
;    *Mod Date     Engineer             Comment                               *
;    *--- -------- -------------------- --------------------------------------*
;    *000 06/05/96 Yvonne Klipfel       Initial Release                       *
;    *001 10/30/98 Matt Benson          Modified to return orders if no DTAs  *
;    *002 02/06/99 Jon Weekes           Added Person_Aborh_Id to reply from   *
;                                       PERSON_ABORH_RESULT for patient aborh *
;                                       orders                                *
;    *003 05/09/02 Chris Noe            Changes for 0101945, multiple product *
;                                       abo/rh orders loading in Result Entry.*
;    *004 09/20/02 Christi Ditmars      Changes for CAPEP00053773 to return   *
;                                       result_value_alpha for code_set result*
;    *005 10/28/02 Christi Ditmars      Changes for CAPEP00077096 limit ITA   *
;                                       rows returned.                        *
;    *006 07/26/04 Ronda Zheng          Changes for CAPEP00133933. Used blobget*
;                                       function to retrieve long_text.       *
;    *007 10/25/04 Jason Coy            BB Clin Val.                          *
;    *008 12/10/04 Ronda Zheng          sort by event_sequence on result_event*
;                                       table and retrieve perform_dt_tm.     *
;    *009 02/21/05 Ronda Zheng          Return interp_override_ind, bb_group_id*
;                                       and lot_information_id                *
;    *010 08/01/06 Ryan Manuel          Added notify_cd to the reply          *
;	 *011 05/27/08 Kiran Vankadaru		Improving the perfomance of the script*
;										by adding a new index result_id in    *
;										person_aborh_result table & suppressing*
;										the usage of index person_aborh_id    *
;~DE~**************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

             drop program BBT_GET_RESULTS_BY_ACCN:dba go                 
             create program BBT_GET_RESULTS_BY_ACCN:dba

      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  assays[*]
            2  task_assay_cd        = f8
            2  order_id             = f8
            2  service_resource_cd  = f8
         1  return_prev_results_ind = i2
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      (
         1  qual[*]
            2  order_id                    = f8
            2  person_id                   = f8
            2  service_resource_cd         = f8
            2  task_assay_cd               = f8
            2  task_assay_mnemonic         = vc
            2  event_cd                    = f8
            2  default_result_type_cd      = f8
            2  default_result_type_disp    = vc
            2  default_result_type_mean    = c12
            2  data_map_ind                = i2
            2  max_digits                  = i4
            2  min_decimal_places          = i4
            2  min_digits                  = i4
            2  result_entry_format         = i4
            2  bb_result_processing_cd     = f8
            2  bb_result_processing_disp   = vc
            2  bb_result_processing_mean   = c12
            2  container_id                = f8   
            2  drawn_dt_tm                 = dq8  
            2  results_cnt                 = i4 
            2  results[*]                         
               3  perform_result_id        = f8
               3  perform_dt_tm            = dq8
               3  result_id                = f8
               3  bb_result_id             = f8
               3  bb_control_cell_cd       = f8
               3  bb_control_cell_disp     = vc
               3  bb_control_cell_mean     = vc
               3  result_status_cd         = f8
               3  result_status_disp       = vc
               3  result_status_mean       = c12
               3  normal_cd                = f8
               3  normal_disp              = c40
               3  normal_mean              = c12
               3  critical_cd              = f8
               3  critical_disp            = c40
               3  critical_mean            = c12
               3  review_cd                = f8
               3  delta_cd                 = f8
               3  normal_low               = f8
               3  normal_high              = f8
               3  normal_alpha             = vc
               3  result_type_cd           = f8
               3  result_type_disp         = vc
               3  result_type_mean         = c12
               3  nomenclature_id          = f8
               3  short_string             = vc
               3  result_value_mean        = c12
               3  result_value_numeric     = f8
               3  numeric_raw_value        = f8
               3  less_great_flag          = i2
               3  result_value_alpha       = vc
               3  result_value_dt_tm       = dq8
               3  long_text_id             = f8     
               3  rtf_text                 = vc
               3  ascii_text               = vc
               3  result_comment_ind       = i2
               3  result_code_set_cd       = f8
               3  result_code_set_disp     = c40
               3  perform_result_updt_cnt  = i4
               3  result_updt_cnt          = i4
               3  interp_option_cd         = f8
               3  interp_option_disp       = c40
               3  person_aborh_id          = f8         
               3  result_dt_tm             = dq8
               3  result_tech_id           = f8
               3  result_tech_username     = c50
               3  units_cd                 = f8      
               3  units_disp               = c40
               3  normal_range_flag        = i2      ;1=only low defined, 2=only high defined, 3=both defined     
               3  except_cnt               = i4    
               3  bb_group_id              = f8
               3  bb_group_name            = c40
               3  lot_information_id       = f8
               3  lot_ident                = c40
               3  interp_override_ind      = i2
               3  bb_group_id              = f8
               3  lot_information_id       = f8
               3  notify_cd                = f8
               3  notify_disp              = vc
               3  notify_mean              = c12
               3  exceptlist[*]                    
                  4  exception_id          = f8
                  4  exception_type_cd     = f8
                  4  exception_type_disp   = vc
                  4  exception_type_mean   = vc
                  4  override_reason_cd    = f8
                  4  override_reason_disp  = vc
                  4  override_reason_mean  = vc
                  4  from_abo_cd           = f8
                  4  from_rh_cd            = f8
                  4  to_abo_cd             = f8
                  4  to_rh_cd              = f8
                  4  updt_cnt              = i4
                  4  active_ind            = i2
                  4  donor_contact_id      = f8
                  4  donor_contact_type_cd = f8
            ;*** Previous Result Fields ***     
            2  prev_task_assay_cd          = f8
            2  prev_task_assay_disp        = vc
            2  prev_perform_result_id      = f8
            2  prev_result_id              = f8
            2  prev_result_status_cd       = f8
            2  prev_result_status_disp     = vc
            2  prev_result_status_mean     = c12
            2  prev_result_type_cd         = f8
            2  prev_result_type_disp       = vc
            2  prev_result_type_mean       = c12
            2  prev_nomenclature_id        = f8
            2  prev_result_value_numeric   = f8
            2  prev_numeric_raw_value      = f8
            2  prev_less_great_flag        = i2
            2  prev_result_value_alpha     = vc
            2  prev_result_value_dt_tm     = dq8
            2  prev_long_text_id           = f8
            2  prev_rtf_text               = vc
            2  prev_ascii_text             = vc
            2  prev_collected_dt_tm        = dq8
%i cclsource:status_block.inc
      )

      /***********************************************************************
      * Script                                                               *
      ***********************************************************************/
      #Script
/* do we only get blood bank tests? ???? */
         set DATA_MAP_TYPE_FLAG          = 0    ;Fill out with correct value.
         set nbr_of_assays               = size(request->assays,5)
         declare a_cnt                   = i4
         declare r_cnt                   = i4
         declare e_cnt                   = i4 with protect, noconstant(0)        
         declare idx                     = i4
         set retrieve_results_yn         = "N"
         set reply->status_data.status = "F"

         declare max_result_cnt         = i4 ; Used to save the max number of results returned for any one assay for use
         set max_result_cnt             = 0  ; when joining to long text table for all retrieved long_text_id's after main select
         
         declare RESULT_STATUS_CS             = i4  with protect, constant(1901)            
         declare RESULT_STATUS_VERIFIED_MEAN  = C8  with protect, constant("VERIFIED")      
         declare RESULT_STATUS_CORRECTED_MEAN = c9  with protect, constant("CORRECTED")      
         declare result_status_verified_cd    = f8  with protect, noconstant(0.0)             
         declare result_status_corrected_cd   = f8  with protect, noconstant(0.0)           
         
         set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CS, nullterm(RESULT_STATUS_VERIFIED_MEAN),
                                               1, result_status_verified_cd)
         if (stat = 1)
             go to EXIT_SCRIPT
         endif
             
         set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CS, nullterm(RESULT_STATUS_CORRECTED_MEAN),
                                               1, result_status_corrected_cd)
         if (stat = 1)
             go to EXIT_SCRIPT
         endif
         
      /***********************************************************************
      * Select order information based on accession                          *
      * Start with container_accession using the passed accession number     *
      * Then go to order_serv_res_container (defines the orders/containers   *
      * to be processed by a service resource) to retrieve the test site     *
      * where the container will be used.  Next go to the orders table to    *
      * retrieve the order information such as doctor from the prsnl table,  *
      * the detail tests associated with the order (profile_task_assay) and  *
      * detail test information.  If products are associated with the order  *
      * they should be selected also.  If results exist, they will also be   *
      * selected                                                             *
      ***********************************************************************/
         select into "nl:"
            d.seq,
            o.seq,
            o.order_id,
            dta.seq,            ;001
            dta.task_assay_cd,
            apr.seq,
            default_result_type_disp = uar_get_code_display(apr.default_result_type_cd),
            default_result_type_mean = uar_get_code_meaning(apr.default_result_type_cd),
            d_dm.seq,
            data_map_resource_exists = decode(dm.seq, "Y", "N"),
            dm.seq,
            d_dmg.seq,
            data_map_group_exists = decode(dmg.seq, "Y", "N"),
            dmg.seq,
            results_yn = decode(r.seq, "Y", "N"),
            r.seq,
            r.result_id,
            pr.seq,
            pr.perform_result_id,
            result_type_disp = uar_get_code_display(pr.result_type_cd),
            result_type_mean = uar_get_code_meaning(pr.result_type_cd),
            par_seq = decode(par.seq, par.seq, 0),                                      ; 002
            person_aborh_id = decode(par.seq, par.person_aborh_id, 0.0),                ; 002
            d_rc.seq,
            rc.seq,
            result_comment_yn = decode(rc.seq, "Y", "N"),
	    ita.service_resource_cd	
         from
            (dummyt d with seq = value(nbr_of_assays)),
            orders o,
            (dummyt d_dta with seq = 1),                ;001
            discrete_task_assay dta,
            assay_processing_r apr,
            (dummyt d_dm with seq = 1),
            data_map dm,
            (dummyt d_dmg with seq = 1),
            data_map dmg,
            (dummyt d_r with seq = 1),
            result r,
            perform_result pr,
            pcs_lot_information pli,
            bb_qc_group bqg,
            (dummyt d_par with seq = 1),                ; 002
            person_aborh_result par,                     ; 002
            (dummyt d_rc with seq = 1),
            result_comment rc,
            (dummyt d_ita with seq = 1),
            interp_task_assay ita,
            result_event re,
            prsnl p,
            reference_range_factor rrf,           
            container c                            

/* travel through the plan using a join to the results and then join to any products associated
 * with the order.  The reason for the orjoin is due to:  example - 7 assay task exist for the order
 * and 3 products are associated with the order.  The join will cause 21 product event occurrences due
 * to joining to the product event 7 times.  Thus, need to do the orjoin to get an accurate product count */
         plan    d
         join    o    where o.order_id = request->assays[d.seq].order_id
         join   (d_dta  where d_dta.seq = 1             ;001
         join    dta  where dta.active_ind = 1 and dta.task_assay_cd = request->assays[d.seq].task_assay_cd
                      and dta.task_assay_cd > 0)
         join    apr  where apr.service_resource_cd = request->assays[d.seq].service_resource_cd
                        and apr.active_ind = 1 and apr.task_assay_cd = dta.task_assay_cd
         join    (d_dm where d_dm.seq = 1
         join    dm   where dm.service_resource_cd = apr.service_resource_cd
                      and dm.active_ind = 1 and dm.task_assay_cd = apr.task_assay_cd
                      and dm.data_map_type_flag = DATA_MAP_TYPE_FLAG)
         join    (d_dmg where d_dmg.seq = 1
         join    dmg  where dmg.service_resource_cd = 0.0
                      and dmg.active_ind = 1 and dmg.task_assay_cd = apr.task_assay_cd
                      and dmg.data_map_type_flag = DATA_MAP_TYPE_FLAG)
         join   (d_r   where d_r.seq = 1
         join    r    where r.order_id = request->assays[d.seq].order_id
                              and r.task_assay_cd = request->assays[d.seq].task_assay_cd
         join    pli  where pli.lot_information_id = outerjoin(r.lot_information_id)
         join    bqg  where bqg.group_id = outerjoin(r.bb_group_id)
         join    pr   where pr.result_id = r.result_id
                     and pr.result_status_cd = r.result_status_cd
         join    rrf  where rrf.reference_range_factor_id = pr.reference_range_factor_id       
         join    c    where c.container_id = pr.container_id                                  
         join re where re.result_id = pr.result_id
                 and re.event_type_cd = pr.result_status_cd
                 and re.perform_result_id = pr.perform_result_id
         join p where p.person_id = re.event_personnel_id
         ; ** 002 Join to Person_ABORh_Result to get Person_ABORh_Id
         ; * 011 Supress the usage of person_aborh_id index and 
         ; * 011 add a new index result_id to Person_Aborh_result table
         join    (d_par  where d_par.seq = 1                                             ; 002
             join    par   where par.result_id       = r.result_id                       ; 002
                                  and par.active_ind = 1                                 ; 002
                                  and par.person_aborh_id + 0 > 0                            ; 002
                                  and par.person_aborh_id + 0 != NULL)                       ; 002

         join    (d_rc   where d_rc.seq = 1
             join    rc   where rc.result_id = pr.result_id)
         join    (d_ita where d_ita.seq = 1
         join    ita    where ita.task_assay_cd = dta.task_assay_cd
                                and ita.task_assay_cd > 0.0
                                and ita.task_assay_cd != NULL
                                and ita.order_cat_cd = o.catalog_cd
				and (ita.service_resource_cd = request->assays[d.seq].service_resource_cd
                                or ita.service_resource_cd = 0)
				and ita.active_ind = 1
				))

         order by o.order_id, dta.task_assay_cd, r.result_id, re.event_sequence desc, ita.service_resource_cd

         head report
            stat = alterlist(reply->qual, 2)
            a_cnt = 0
            r_cnt = 0

        head o.order_id
            r_cnt = 0

        head dta.task_assay_cd
            r_cnt = 0                                   ;yck
            a_cnt = a_cnt + 1
            if (mod(a_cnt,2) = 1 and a_cnt != 1)
               stat = alterlist(reply->qual, a_cnt + 1)
            endif
            reply->qual[a_cnt].task_assay_cd = dta.task_assay_cd
            reply->qual[a_cnt].task_assay_mnemonic = dta.mnemonic
            reply->qual[a_cnt].event_cd = dta.event_cd
            reply->qual[a_cnt].order_id = o.order_id
            reply->qual[a_cnt].person_id = o.person_id
            reply->qual[a_cnt].service_resource_cd = request->assays[d.seq].service_resource_cd
            reply->qual[a_cnt].bb_result_processing_cd = dta.bb_result_processing_cd
            if (data_map_resource_exists = "Y")
                reply->qual[a_cnt].data_map_ind = 1
                reply->qual[a_cnt].max_digits = dm.max_digits
                reply->qual[a_cnt].min_decimal_places = dm.min_decimal_places
                reply->qual[a_cnt].min_digits = dm.min_digits
                reply->qual[a_cnt].result_entry_format = dm.result_entry_format
            elseif (data_map_group_exists = "Y")
                reply->qual[a_cnt].data_map_ind = 1
                reply->qual[a_cnt].max_digits = dmg.max_digits
                reply->qual[a_cnt].min_decimal_places = dmg.min_decimal_places
                reply->qual[a_cnt].min_digits = dmg.min_digits
                reply->qual[a_cnt].result_entry_format = dmg.result_entry_format
            else
                reply->qual[a_cnt].data_map_ind = 0
            endif
            reply->qual[a_cnt].default_result_type_cd = apr.default_result_type_cd
            reply->qual[a_cnt].default_result_type_mean = default_result_type_disp
            reply->qual[a_cnt].default_result_type_disp = default_result_type_mean
            reply->qual[a_cnt].container_id = c.container_id 
            reply->qual[a_cnt].drawn_dt_tm = c.drawn_dt_tm   

        head r.result_id
            r_cnt = r_cnt + 1
            stat = alterlist(reply->qual[a_cnt].results, r_cnt)            

            ;** store the # of results for each task assay (detail test)
            reply->qual[a_cnt].results_cnt = r_cnt
            reply->qual[a_cnt].results[r_cnt].perform_result_id = pr.perform_result_id
            reply->qual[a_cnt].results[r_cnt].perform_dt_tm = pr.perform_dt_tm            
            reply->qual[a_cnt].results[r_cnt].result_id = r.result_id
            reply->qual[a_cnt].results[r_cnt].bb_result_id = r.bb_result_id
            reply->qual[a_cnt].results[r_cnt].bb_control_cell_cd = r.bb_control_cell_cd
            reply->qual[a_cnt].results[r_cnt].result_status_cd = r.result_status_cd
            reply->qual[a_cnt].results[r_cnt].result_type_cd = pr.result_type_cd
            reply->qual[a_cnt].results[r_cnt].result_type_disp = result_type_disp
            reply->qual[a_cnt].results[r_cnt].result_type_mean = result_type_mean
            reply->qual[a_cnt].results[r_cnt].normal_cd = pr.normal_cd
            reply->qual[a_cnt].results[r_cnt].critical_cd = pr.critical_cd
            reply->qual[a_cnt].results[r_cnt].review_cd = pr.review_cd
            reply->qual[a_cnt].results[r_cnt].delta_cd = pr.delta_cd
            reply->qual[a_cnt].results[r_cnt].normal_low = pr.normal_low
            reply->qual[a_cnt].results[r_cnt].normal_high = pr.normal_high
            reply->qual[a_cnt].results[r_cnt].normal_alpha = pr.normal_alpha
            reply->qual[a_cnt].results[r_cnt].nomenclature_id = pr.nomenclature_id
            reply->qual[a_cnt].results[r_cnt].result_value_numeric = pr.result_value_numeric
            reply->qual[a_cnt].results[r_cnt].numeric_raw_value = pr.numeric_raw_value
            reply->qual[a_cnt].results[r_cnt].result_value_alpha = pr.result_value_alpha
            reply->qual[a_cnt].results[r_cnt].result_code_set_cd = pr.result_code_set_cd
            if (pr.result_code_set_cd > 0)
                reply->qual[a_cnt].results[r_cnt].result_value_alpha
                    = uar_get_code_display(pr.result_code_set_cd)
            endif
            reply->qual[a_cnt].results[r_cnt].result_value_dt_tm = pr.result_value_dt_tm
            reply->qual[a_cnt].results[r_cnt].long_text_id = pr.long_text_id
            reply->qual[a_cnt].results[r_cnt].ascii_text = pr.ascii_text
            reply->qual[a_cnt].results[r_cnt].less_great_flag = pr.less_great_flag
            reply->qual[a_cnt].results[r_cnt].perform_result_updt_cnt = pr.updt_cnt
            reply->qual[a_cnt].results[r_cnt].units_cd = pr.units_cd                   
            reply->qual[a_cnt].results[r_cnt].normal_range_flag = rrf.normal_ind       
            reply->qual[a_cnt].results[r_cnt].result_updt_cnt = r.updt_cnt
            reply->qual[a_cnt].results[r_cnt].result_dt_tm = re.event_dt_tm
            reply->qual[a_cnt].results[r_cnt].result_tech_id = re.event_personnel_id
            reply->qual[a_cnt].results[r_cnt].result_tech_username = p.username
            reply->qual[a_cnt].results[r_cnt].bb_group_id = r.bb_group_id
            reply->qual[a_cnt].results[r_cnt].lot_information_id = r.lot_information_id
            reply->qual[a_cnt].results[r_cnt].lot_ident = pli.lot_ident
            reply->qual[a_cnt].results[r_cnt].bb_group_name = bqg.group_name

            if (result_comment_yn = "Y")
                reply->qual[a_cnt].results[r_cnt].result_comment_ind = 1
            else
                reply->qual[a_cnt].results[r_cnt].result_comment_ind = 0
            endif
            if (par_seq > 0)
                reply->qual[a_cnt]->results[r_cnt].person_aborh_id = par.person_aborh_id
            endif
            
            reply->qual[a_cnt].results[r_cnt].interp_override_ind = pr.interp_override_ind 
            reply->qual[a_cnt].results[r_cnt].bb_group_id         = r.bb_group_id 
            reply->qual[a_cnt].results[r_cnt].lot_information_id  = r.lot_information_id 
            reply->qual[a_cnt].results[r_cnt].notify_cd = pr.notify_cd

	detail
	    ;Ordered by service resource on ITA so that if there is one for a specific
	    ;service resource it is at the bottom and the ALL is at the top.  The specific one
            ;will get set in here last and returned.
	    reply->qual[a_cnt].results[r_cnt].interp_option_cd = ita.interp_option_cd

        foot dta.task_assay_cd
            stat = alterlist(reply->qual[a_cnt]->results, r_cnt)
            if (r_cnt > max_result_cnt)
                max_result_cnt = r_cnt
            endif

        foot o.order_id
            row 0

        with
            nocounter,
            outerjoin (d_dta),                  ;001
            dontcare(dm),
            dontcare(dmg),
            outerjoin(d_r),
            dontcare(r),
            outerjoin(d_rc),
            dontcare(rc),
            dontcare(pr),
            outerjoin(d_ita),
            dontcare(par),
            maxqual(rc, 1)

        if (a_cnt > 0)
            select into "nl:"
                d_a.seq
                , results_cnt = reply->qual[d_a.seq]->results_cnt
                , d_r.seq
                , lt.seq
                , lt.long_text

            from
                (dummyt d_a with seq = value(a_cnt))
                , (dummyt d_r with seq = value(max_result_cnt))
                , long_text lt

            plan    d_a
            join    d_r     where    d_r.seq > 0
                                       and d_r.seq <= reply->qual[d_a.seq]->results_cnt
                                       and reply->qual[d_a.seq]->results[d_r.seq]->long_text_id > 0
                                       and reply->qual[d_a.seq]->results[d_r.seq]->long_text_id != NULL
            join    lt      where   lt.long_text_id > 0
                                      and lt.long_text_id != NULL
                                      and lt.long_text_id = reply->qual[d_a.seq]->results[d_r.seq]->long_text_id
            head report
                msg_buf = fillstring(32767," ")
                retlen = 0
            detail
               if (lt.seq > 0)
                  offset = 0
                  retlen = 1
                  while (retlen > 0)
                    retlen = blobget(msg_buf,offset,lt.long_text)
                    if (retlen > 0)
                      if (retlen = size(msg_buf))
                        reply->qual[d_a.seq]->results[d_r.seq]->rtf_text =  
                                notrim( concat(reply->qual[d_a.seq]->results[d_r.seq]->rtf_text, msg_buf))
                      else
                        reply->qual[d_a.seq]->results[d_r.seq]->rtf_text =   
                            notrim(concat(reply->qual[d_a.seq]->results[d_r.seq]->rtf_text, substring(1,retlen,msg_buf)))
                      endif
                    endif
                    offset = offset + retlen
                  endwhile
    
               endif

            with    nocounter, rdbarrayfetch=1
            
            /******************************************************************************   
            * Obtain exceptions for each result.                                          *
            *******************************************************************************/
            select into "nl:"
                d_a.seq,
                results_cnt = reply->qual[d_a.seq].results_cnt,
                d_r.seq,
                d_e.seq
            
            from
                (dummyt d_a with seq = value(a_cnt)),
                (dummyt d_r with seq = value(max_result_cnt)),
                bb_exception be
            
            plan d_a
            join d_r where d_r.seq >  0
                       and d_r.seq <= reply->qual[d_a.seq].results_cnt
                       and reply->qual[d_a.seq].results[d_r.seq].perform_result_id > 0
                       and reply->qual[d_a.seq].results[d_r.seq].perform_result_id != null
            join be  where be.result_id = reply->qual[d_a.seq].results[d_r.seq].result_id
                       and be.perform_result_id = reply->qual[d_a.seq].results[d_r.seq].perform_result_id
         
            head be.perform_result_id
                e_cnt = 0
            
            detail
                e_cnt = e_cnt + 1
                stat = alterlist(reply->qual[d_a.seq].results[d_r.seq].exceptlist, e_cnt)
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].exception_id = be.exception_id
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].active_ind = be.active_ind
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].donor_contact_id = be.donor_contact_id
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].donor_contact_type_cd = be.donor_contact_type_cd
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].exception_type_cd = be.exception_type_cd
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].from_abo_cd = be.from_abo_cd
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].from_rh_cd = be.from_rh_cd
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].override_reason_cd = be.override_reason_cd
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].to_abo_cd = be.to_abo_cd
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].to_rh_cd = be.to_rh_cd
                reply->qual[d_a.seq].results[d_r.seq].exceptlist[e_cnt].updt_cnt = be.updt_cnt
       
            foot be.perform_result_id
                reply->qual[d_a.seq].results[d_r.seq].except_cnt = e_cnt
                
            with nocounter 

            /******************************************************************************
            * Obtain previous result for each task assay when return_prev_results_ind = 1 *
            *******************************************************************************/
            if (request->return_prev_results_ind = 1)
                select into "nl:"
                    d_a.seq
                from
                    (dummyt d_a with seq = value(a_cnt)),
                    result r,
                    perform_result pr,
                    long_text lt,
                    container c
             
                plan d_a    
                join r   where r.person_id                   = reply->qual[d_a.seq].person_id
                           and r.task_assay_cd               = reply->qual[d_a.seq].task_assay_cd
                           and r.result_status_cd            in(result_status_verified_cd, result_status_corrected_cd)
                join pr  where pr.result_id                  = r.result_id
                           and pr.result_status_cd           = r.result_status_cd
                join lt  where lt.long_text_id               = pr.long_text_id
                join c   where c.container_id                = pr.container_id

                detail
                    if (cnvtdatetime(c.drawn_dt_tm) < cnvtdatetime(reply->qual[d_a.seq].drawn_dt_tm)
                        and cnvtdatetime(c.drawn_dt_tm) > cnvtdatetime(reply->qual[d_a.seq].prev_collected_dt_tm))
                        reply->qual[d_a.seq].prev_ascii_text = pr.ascii_text
                        reply->qual[d_a.seq].prev_collected_dt_tm = c.drawn_dt_tm
                        reply->qual[d_a.seq].prev_less_great_flag = pr.less_great_flag
                        reply->qual[d_a.seq].prev_long_text_id = lt.long_text_id
                        reply->qual[d_a.seq].prev_nomenclature_id = pr.nomenclature_id
                        reply->qual[d_a.seq].prev_numeric_raw_value = pr.numeric_raw_value
                        reply->qual[d_a.seq].prev_perform_result_id = pr.perform_result_id
                        reply->qual[d_a.seq].prev_result_id = r.result_id
                        reply->qual[d_a.seq].prev_result_status_cd = r.result_status_cd
                        reply->qual[d_a.seq].prev_result_type_cd = pr.result_type_cd
                        reply->qual[d_a.seq].prev_result_value_alpha = pr.result_value_alpha
                        reply->qual[d_a.seq].prev_result_value_dt_tm = pr.result_value_dt_tm
                        reply->qual[d_a.seq].prev_result_value_numeric = pr.result_value_numeric
                        reply->qual[d_a.seq].prev_rtf_text = lt.long_text
                        reply->qual[d_a.seq].prev_task_assay_cd = r.task_assay_cd
                    endif
                with nocounter
            endif
        endif
  
/***********************************************************************
* Resize reply record                                                  *
***********************************************************************/
#Resize_Reply

   if (a_cnt > 0)
      set reply->status_data.status = "S"    ;Successful
   else
      set reply->status_data.status = "Z"    ;Zero
      set a_cnt = 1
   endif
   set stat = alterlist(reply->qual, a_cnt)

#EXIT_SCRIPT
end go

;Generated by GNU enscript 1.6.4.
