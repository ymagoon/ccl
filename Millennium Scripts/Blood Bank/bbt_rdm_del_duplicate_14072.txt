 ;;Solution_Test/script/PathNet -- BB Transfusion/BB_OCD_README_SCRIPTS/bbt_rdm_del_duplicate_14072.prg Turn on black mode


/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_rdm_del_duplicate_14072.prg
        Object name:            bbt_rdm_del_duplicate_14072
        Readme #:               0

        Product:                PathNet
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            
        
        Program purpose:        The purpose of this application is to inactivate
                                duplicates on code_set 14072

        Tables read,            TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
        and access method:      --------------------    -----------------------------
                                code_value (14072)

        Tables updated:         

        Executing from:         

        Special Notes:          Each section should clearly identify what the purpose
                                of that README step is.  
        
        Run Occurance:          (select ONE of the following)
                                -----------------------------
                                [x] 1. RUN ONCE
                                [ ] 2. RUN MANY

        ReadMe Category:        (select ONE of the following)
                                -----------------------------
                                [ ] 1. Data Load
                                [x] 2. Data Conversion
                                [ ] 3. Data Migration

        Execution Time:         (select ONE of the following)
                                ------------------------------------
                                [x] 1. Uptime before uptime schema.
                                [ ] 2. Uptime after uptime schema.
                                [ ] 3. Downtime before downtime schema.
                                [ ] 4. Downtime after downtime schema.
                                [ ] 5. Uptime after all other components.
        
        Exec. Justification:    Inactivation of duplicate cdf_meanings.
      
        Parent Script:          n/a

        Check Script:           bbt_chk_del_duplicate_14072

        Data file for import:   n/a
        
        Execution Duration:     (select ONE of the following)
                                ----------------------------------
                                [ ] 1. Fixed Time
                                [x] 2. Driver Table: code_value

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/12/01 Chris Cline          Initial (template) Release          *
;     001 02/01/01 Chris Cline          Template update for COMMIT.         *
;     002 02/14/01 Martin R. Slimmer    Update with BB logic                *
;     003 02/14/01 Jason Osborn         Fixed errors arising from duplicate *
;                                       CDF_MEANINGS on code_value table.   *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_rdm_del_duplicate_14072:dba go
create program bbt_rdm_del_duplicate_14072:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT

declare sREADME_NAME = vc

SET sREADME_NAME = "bbt_rdm_del_duplicate_14072"
CALL LOGSCRIPTSTART(sREADME_NAME)

/************************
** README ACTION STEPS **
************************/


record Reply
(
%i cclsource:status_block.inc
)

record CodeSet14072
(
  1 CDFs[*]
     2 keeper_code_value = f8
     2 cdf_meaning       = c12
     2 CodeValues[*]
        3 code_value     = f8
        3 active_ind     = i2
        3 delete_ind     = i2
        3 bb_excep_ind   = i2
)

record DeleteList
(
  1 Delete_ind            = i2
  1 CodeValues[*]
      2 code_value        = f8
      2 keeper_code_value = f8
) 

select into "nl:"
    cv.code_value
    ,cv.cdf_meaning
    ,cv.active_ind
    ,on_bb_exception = evaluate(nullind(be.exception_type_cd),0,1,0)
from 
    code_value cv,
    bb_exception be
plan cv where cv.code_set = 14072 and cv.active_ind = 1
join be where be.exception_type_cd = outerjoin(cv.code_value)

order by 
    cv.cdf_meaning
   ,cv.code_value
    
head report
    cdf_cnt = 0
    code_cnt = 0
    dup_cnt = 1
    stat = alterlist(CodeSet14072->CDFs, 5)
    stat = alterlist(DeleteList->CodeValues, 5)

head cv.cdf_meaning
    code_cnt = 0
    cdf_cnt = cdf_cnt + 1
    if (mod(cdf_cnt,5) = 1 and cdf_cnt != 1)
        stat = alterlist(CodeSet14072->CDFs, cdf_cnt + 4)
    endif
    CodeSet14072->CDFs[cdf_cnt].cdf_meaning = cv.cdf_meaning
    stat = alterlist(CodeSet14072->CDFs[cdf_cnt]->CodeValues, 5)

head cv.code_value
    code_cnt = code_cnt + 1
    if (mod(code_cnt,5) = 1 and code_cnt != 1)
        stat = alterlist(CodeSet14072->CDFs[cdf_cnt]->CodeValues, code_cnt + 4)
    endif
    CodeSet14072->CDFs[cdf_cnt]->CodeValues[code_cnt].code_value = cv.code_value
    CodeSet14072->CDFs[cdf_cnt]->CodeValues[code_cnt].active_ind = cv.active_ind
    CodeSet14072->CDFs[cdf_cnt]->CodeValues[code_cnt].delete_ind = 1
    CodeSet14072->CDFs[cdf_cnt]->CodeValues[code_cnt].bb_excep_ind = on_bb_exception

detail
    row + 0

foot cv.code_value
    row + 0

foot cv.cdf_meaning
    stat = alterlist(CodeSet14072->CDFs[cdf_cnt]->CodeValues,code_cnt)
    cnt = 1
    FoundKeeper = 0

   if (code_cnt = 1)   ;There's just one active one, we're good, flip off the delete_ind and move on.
      CodeSet14072->CDFs[cdf_cnt]->CodeValues[code_cnt].delete_ind = 0
   else   
      DeleteList->Delete_ind = 1   ;There's duplicate code_values.  Deal with them here.
      cnt = code_cnt
      while ((cnt > 0) and (FoundKeeper = 0))
         if (CodeSet14072->CDFs[cdf_cnt]->CodeValues[cnt].bb_excep_ind = 1)
            FoundKeeper = 1
            CodeSet14072->CDFs[cdf_cnt].keeper_code_value = CodeSet14072->CDFs[cdf_cnt].CodeValues[cnt].code_value
            CodeSet14072->CDFs[cdf_cnt]->CodeValues[cnt].delete_ind = 0
         endif
         cnt = cnt - 1
      endwhile
      if (FoundKeeper = 0)  ;We didn't find a matching CDF in the bb_exception table
         CodeSet14072->CDFs[cdf_cnt]->CodeValues[code_cnt].delete_ind = 0  ; Just keep the newest one
      endif
      cnt = 1
      while (cnt <= code_cnt)
         if (mod(dup_cnt,5) = 1 and dup_cnt != 1)
            stat = alterlist(DeleteList->CodeValues, dup_cnt + 4)
         endif
         if (CodeSet14072->CDFs[cdf_cnt].CodeValues[cnt].delete_ind = 1)
            DeleteList->CodeValues[dup_cnt].code_value = CodeSet14072->CDFs[cdf_cnt].CodeValues[cnt].code_value
            DeleteList->CodeValues[dup_cnt].keeper_code_value = CodeSet14072->CDFs[cdf_cnt].keeper_code_value
            dup_cnt = dup_cnt + 1
         endif
         cnt = cnt + 1
      endwhile
         
   endif


foot report
    stat = alterlist(CodeSet14072->CDFs, cdf_cnt)
    stat = alterlist(DeleteList->CodeValues, dup_cnt)

with nocounter

if (DeleteList->Delete_ind = 1)
   ;lock rows before updating
   select into "nl:"
   from (dummyt d with seq = value(size(DeleteList->CodeValues,5))),
         code_value cv
   plan d
   join cv where cv.code_value = DeleteList->CodeValues[d.seq].code_value 
             and cv.code_value != 0   
   with nocounter, forupdate(cv)
   if (curqual = 0)
      set DeleteList->Delete_ind = 99
      go to EXIT_SCRIPT
   endif
   
   update into 
      (dummyt d with seq = value(size(DeleteList->CodeValues,5)))
      ,code_value cv
   set cv.active_ind = 0

   plan d
   join cv where cv.code_value = DeleteList->CodeValues[d.seq].code_value 
             and cv.code_value != 0   

   with nocounter
   
   ;lock rows before updating
   
   select into "nl:"
   from (dummyt d with seq = value(size(DeleteList->CodeValues,5))),     
         bb_exception be
   plan d
   join be where be.exception_type_cd = DeleteList->CodeValues[d.seq].code_value
             and be.exception_type_cd != 0
   with nocounter, forupdate(be) 
   if (curqual = 0)
      set DeleteList->Delete_ind = 99
   go to EXIT_SCRIPT
   endif

   update into 
      (dummyt d with seq = value(size(DeleteList->CodeValues,5)))
      ,bb_exception be
   set be.exception_type_cd = DeleteList->CodeValues[d.seq].keeper_code_value

   plan d
   join be where be.exception_type_cd = DeleteList->CodeValues[d.seq].code_value
             and be.exception_type_cd != 0
            
   with nocounter            
endif


;---------------------------------------------------------
#EXIT_SCRIPT
/****************************
**  LOG Execution Status.  **
**                         ***************************************
**  Note:  if you have a check script then you do not           **
**  need to perform the LOGSTATUS in the RDM script.            **
**  Explicit COMMIT and/or ROLLBACK must be perform             **
**  In this section both in the README and the CHECK            **
**  script.  For example:                                       **
**     if (nCnt > 0)                                            **
**       COMMIT  ;Just in case LOGSTATUS pulls an Oracle error. **
**       CALL LOGSTATUS("Execution Successful.", "S")           **
**     else                                                     **
**       ROLLBACK                                               **
**       CALL LOGSTATUS("Execution Failed because ...", "F")    **
**     endif                                                    **
**                                                              **
*****************************************************************/

if (DeleteList->Delete_ind = 0)
  call logstatus ("No duplicate rows on 14072 code_set inactivated.", "S")
  call logmsg ("No duplicate rows on 14072 code_set inactivated.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
elseif (DeleteList->Delete_ind = 99)
  rollback
  call logstatus ("Error locking rows for update.  Please try again.", "F")
  call logmsg ("Error locking rows for update.  Please try again.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE) 
else
  commit
  call logstatus ("Duplicate rows on 14072 code_set inactivated.", "S")
  call logmsg ("Duplicate rows on 14072 code_set inactivated.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
endif

free record CodeSet14072
free record DeleteList

/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
CALL LOGSCRIPTEND(sREADME_NAME)

end go

;Generated by GNU enscript 1.6.4.
