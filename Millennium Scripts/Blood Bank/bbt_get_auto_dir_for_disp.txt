 ;;Solution_Test/script/PathNet -- BB Transfusion/Dispenseassign/BBT_GET_AUTO_DIR_FOR_DISP.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1995 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       BBT_GET_AUTO_DIR_FOR_DISP.PRG
        Object name:            BBT_GET_AUTO_DIR_FOR_DISP 
        Request #:              225571

        Product:                Transfusion
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Get information of auto directed 
                                products associated with the patient
                                available for dispense.

        Tables read:            product, auto_directed, code_value, product_event

        Tables updated:         None

        Executing from:         DispenseAssign.exe

        Special Notes:          ??
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 08/07/98 Badari Kopparapu         Initial Release                 *
;     001 05/06/99 Doug Saus            Replaced code_value select with uars*
;    *002 04/27/06 David Fifer          Added a check for in-transit eventcd*
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

Drop Program BBT_GET_AUTO_DIR_FOR_DISP:DBA Go
Create Program BBT_GET_AUTO_DIR_FOR_DISP:DBA

/*
Record request
( 1 person_id          = f8
)
*/

Record Reply
(  1  products_present          = c1                     ;boolean flag if data found but not retreived
   1  qual[*]                                            ;product, and blood product information
     2  good_product_ind        = c1
     2  product_id              = f8
     2  product_cd              = f8
     2  product_disp            = c15
     2  product_nbr             = c20
     2  product_sub_nbr         = C5
     2  cur_expire_dt_tm        = dq8
%i cclsource:status_block.inc
)

Record Products
(
 1  productlist[*]
     2  product_id      = f8
)

Record rEvents
(
 1 event_list[*]
   2 event_id = f8
   2 event_type_cd  = f8
)


Record rResult
(
 1 qual[*]
   2 event_list[*]
     3 event_type_cd = f8
)
 
declare intransit_event_cd = f8 with protect, noconstant(0.0)
 
;Initialize varialbles and flags
set reply->status_data->status = "F" 
set reply->products_present = "F"
set count1 = 0
set count2 = 0
;001 begin
set quarantined_event_cd = 0.0
set crossmatched_event_cd = 0.0
set issued_event_cd = 0.0
set disposed_event_cd = 0.0
set transferred_event_cd = 0.0
set transfused_event_cd = 0.0
set unconfirmed_event_cd = 0.0
set autologous_event_cd = 0.0
set directed_event_cd = 0.0
set available_event_cd = 0.0
set destroyed_event_cd = 0.0
set shipped_event_cd = 0.0
set xm_in_progress_event_cd = 0.0
set drawn_event_cd = 0.0

set product_cnt = 0
set cnt = 0
set count1 = 0
set count2 = 0
set good_product = "F"
set bad_product = "F"

set cdf_meaning = fillstring(12," ")
set code_set = 1610
set code_value = 0.0
set uar_failed = 0

set cdf_meaning = "1"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set assigned_event_cd = code_value
endif
set cdf_meaning = "2"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set quarantined_event_cd = code_value
endif
set cdf_meaning = "3"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set crossmatched_event_cd = code_value
endif
set cdf_meaning = "4"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set issued_event_cd = code_value
endif
set cdf_meaning = "5"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set disposed_event_cd = code_value
endif
set cdf_meaning = "6"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set transferred_event_cd = code_value
endif
set cdf_meaning = "7"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set transfused_event_cd = code_value
endif
set cdf_meaning = "9"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set unconfirmed_event_cd = code_value
endif
set cdf_meaning = "10"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set autologous_event_cd = code_value
endif
set cdf_meaning = "11"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set directed_event_cd = code_value
endif
set cdf_meaning = "12"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set available_event_cd = code_value
endif
set cdf_meaning = "14"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set destroyed_event_cd = code_value
endif
set cdf_meaning = "15"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set shipped_event_cd = code_value
endif
set cdf_meaning = "16"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set xm_in_progress_event_cd = code_value
endif
set cdf_meaning = "20"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set drawn_event_cd = code_value
endif
set cdf_meaning = "25"
set stat = uar_get_meaning_by_codeset(code_set,cdf_meaning,1,code_value)
;call echo(code_value)
if (stat = 1)
    set uar_failed = 1
    go to SKIP_REST
else
    set intransit_event_cd = code_value
endif
 
#SKIP_REST
if (uar_failed = 1)
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[1]->OperationName = "uar_get_meaning_by_codeset failed"
    set reply->status_data->subeventstatus[1]->OperationStatus = "F"
    set reply->status_data->subeventstatus[1]->TargetObjectName = cdf_meaning
    set reply->status_data->subeventstatus[1]->TargetObjectValue = "could not get code_value"
    go to exit_script
endif
;001 end
    set product_cnt = 0
    set stat = alterlist(products->productlist, 10)

    select into "nl:"
        pe.product_id

    from 
        auto_directed ad 

    where ad.person_id = request->person_id
      and ad.active_ind = 1
      and ad.person_id != NULL
      and ad.person_id > 0.0

    order by ad.product_id

    head ad.product_id
        product_cnt = product_cnt + 1
        if (mod(product_cnt, 10) = 1 and product_cnt != 1)
            stat = alterlist(products->productlist, product_cnt + 9)
        endif
        products->productlist[product_cnt]->product_id = ad.product_id
  
    foot report
        stat = alterlist(products->productlist, product_cnt)

    with nocounter

     
     /************* load all of the product information into the reply ************/

     select into "nl:"
  
     from (dummyt d_p with seq = value(product_cnt)), 
        product_event pe,
        product p,
        blood_product bp,
        (dummyt d with seq = 1)

     plan d_p 
     join pe where pe.product_id = products->productlist[d_p.seq]->product_id
               and pe.active_ind = 1
               and pe.person_id  = request->person_id
     join p  where p.product_id  = pe.product_id
               and p.product_id  > 0 
               and p.product_id  != NULL
     join (d where d.seq = 1
         join bp where p.product_id = bp.product_id)
     
     order by pe.product_id, pe.product_event_id

     head report
        count1 = 0

     head pe.product_id
        count1 = count1 + 1
        stat = alterlist(reply->qual, count1)
        good_product = "F"
        bad_product = "F"
        count2 = 0
        reply->qual[count1]->product_id = pe.product_id
        reply->qual[count1]->product_cd       = p.product_cd 
        reply->qual[count1]->product_nbr      = p.product_nbr
        reply->qual[count1]->product_sub_nbr  = p.product_sub_nbr
        reply->qual[count1]->cur_expire_dt_tm = p.cur_expire_dt_tm

     head pe.product_event_id
      if (reply->qual[count1]->product_id = pe.product_id)
        if ((pe.event_type_cd = destroyed_event_cd)  or
           (pe.event_type_cd = disposed_event_cd)    or
           (pe.event_type_cd = transfused_event_cd)  or
           (pe.event_type_cd = transferred_event_cd) or
           (pe.event_type_cd = issued_event_cd)      or
           (pe.event_type_cd = shipped_event_cd)     or
           (pe.event_type_cd = available_event_cd)   or
           (pe.event_type_cd = intransit_event_cd))
               bad_product = "T"

        elseif (bad_product != "T")
            count2 = count2 + 1
            stat = alterlist(rEvents->event_list, count2)
            rEvents->event_list[count2].event_id = pe.product_event_id
            rEvents->event_list[count2].event_type_cd = pe.event_type_cd
               good_product = "T"
        endif
      endif

    foot pe.product_id
        if ((good_product = "T") and (bad_product = "F") and (count2 > 0))
           reply->qual[count1]->good_product_ind = "T"
           cnt = cnt + 1
        else
           reply->qual[count1]->good_product_ind = "F"
        endif

    with nocounter, outerjoin (d)

    if (cnt > 0)
        set reply->products_present = "T"
        set reply->status_data.status = "S"
    else        
        set reply->products_present = "F"
        set reply->status_data.status = "Z"
    endif

#exit_script
end go

;Generated by GNU enscript 1.6.4.
