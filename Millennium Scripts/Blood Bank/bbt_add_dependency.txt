 ;;Solution_Test/script/PathNet -- BB Transfusion/Dbpreferencewizard/bbt_add_dependency.prg Turn on black mode


/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       BBT_ADD_DEPENDENCY
        Object name:            BBT_ADD_DEPENDENCY
        Request #:              NA

        Product:                PATHNET
        Product Team:           BLOOD BANK
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Insert a row into the question dependency and dependency table

        Tables read:            NA
        Tables updated:         QUESTION DEPENDENCY, DEPENDENCY
        Executing from:         NA

        Special Notes:          NA

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 03/22/96 Yvonne Klipfel       Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_add_dependency:dba go
create program bbt_add_dependency:dba

/****************************************************************************
*       Input record                                                      *
*****************************************************************************/
/*
record input
(
 1 module_meaning               = c12
 1 process_qual[x]
   2 process_meaning            = c12
   2 nbr_of_question            = i2
   2 question_qual[x] 
     3 question_meaning         = c12
     3 nbr_of_dependency        = i2
     3 dependency_qual[x]
       4 response_meaning            = c12
       4 dependent_question_mean  = c12
)
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
record reply
(
%I CCLSOURCE:STATUS_BLOCK.INC
)

/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
set reply->status_data->status = "F"
set count1 = 0
set failed = "F"
set partial_update = "F"
set number_of_process = cnvtint(size(input->process_qual,5))

set module_cd = 0.0
select into "nl:"
        m.code_value
from code_value m
where m.code_set = 1660
  and m.cdf_meaning = input->module_meaning
detail
   module_cd = cnvtreal(m.code_value)
with nocounter

/* determine if module was found */
if (curqual = 0)
   set failed = "T"
   set count1 = count1 + 1
   /* create an occurrence of the reply record if the original occurrence previously used */
   if (count1 > 1)
      set stat = alter(reply->status_data->subeventstatus, count1+1)
   endif
   set reply->status_data->subeventstatus[count1]->OperationName = "ADD"
   set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
   set reply->status_data->subeventstatus[count1]->TargetObjectName = "Module"
   set reply->status_data->subeventstatus[count1]->TargetObjectValue = 
                                                 "Unable to retrieve module to add to question table"
   go to exit_script
else
/****************************************************************************
*       Find the process code value to use for the question table           *
*****************************************************************************/
   for (x = 1 to number_of_process)
      set process_cd = 0.0
      select into "nl:"
           p.code_value
      from code_value p
      where p.code_set = 1662
        and p.cdf_meaning = input->process_qual[x]->process_meaning
      detail
         process_cd = cnvtreal(p.code_value)
      with nocounter
      if (curqual = 0 and input->process_qual[x]->process_meaning > " ")
         set failed = "T"
         set count1 = count1 + 1
         /* create an occurrence of the reply record if the original occurrence previously used */
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName = "ADD"
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName = "Process"
         set reply->status_data->subeventstatus[count1]->TargetObjectValue = "Process code not retrieved"
      endif



/****************************************************************************
*       Insert into question_dependency table                               *
*****************************************************************************/
;for (x = 1 to number_of_process)
   set number_of_question = input->process_qual[x]->nbr_of_question
   for (y = 1 to number_of_question)
      set question_cd = 0.0
      select into "nl:"
           p.code_value
      from code_value p
      where p.code_set = 1661
        and p.cdf_meaning = input->process_qual[x]->question_qual[y]->question_meaning
      detail
         question_cd = cnvtreal(p.code_value)
      with nocounter
      if (curqual = 0 and input->process_qual[x]->question_qual[y]->question_meaning > " ")
         set failed = "T"
         set count1 = count1 + 1
         /* create an occurrence of the reply record if the original occurrence previously used */
         if (count1 > 1)
            set stat = alter(reply->status_data->subeventstatus, count1+1)
         endif
         set reply->status_data->subeventstatus[count1]->OperationName = "ADD"
         set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
         set reply->status_data->subeventstatus[count1]->TargetObjectName = "Process"
         set reply->status_data->subeventstatus[count1]->TargetObjectValue = "Process code not retrieved"
      endif

;      select into "nl:"
;          q.question_cd
;      from question_dependency q
;      where q.question_cd = question_cd
;         and question_cd > 0
;      with nocounter

;      if (curqual = 0 and question_cd > 0)
         insert into question_dependency q set
             q.question_cd           = question_cd,
             q.updt_dt_tm            = cnvtdatetime(curdate, curtime3),
             q.updt_id               = reqinfo->updt_id,
             q.updt_task             = reqinfo->updt_task,
             q.updt_applctx          = reqinfo->updt_applctx,
             q.updt_cnt              = 0
         with nocounter
         if (curqual = 0)
            set failed = "T"
            set count1 = count1 + 1
            /* create an occurrence of the reply record if the original occurrence previously used */
            if (count1 > 1)
               set stat = alter(reply->status_data->subeventstatus, count1+1)
            endif
            set reply->status_data->subeventstatus[count1]->OperationName 
                = "ADD"
            set reply->status_data->subeventstatus[count1]->OperationStatus 
                = "F"
            set reply->status_data->subeventstatus[count1]->TargetObjectName 
                = "Module"
            set reply->status_data->subeventstatus[count1]->TargetObjectValue 
                = "Unable to add to question dependency table"
         endif
;      endif
/****************************************************************************
*       Insert into dependency table                                        *
*****************************************************************************/
      set number_of_dependents = input->process_qual[x]->question_qual[y]->nbr_of_dependency
      for (z = 1 to number_of_dependents)
        set depend_question_cd = 0.0
        select into "nl:"
           p.code_value
        from code_value p
        where p.code_set = 1661
          and p.cdf_meaning = 
input->process_qual[x]->question_qual[y]->dependency_qual[z]->dependent_question_mean
        detail
          depend_question_cd = cnvtreal(p.code_value)
        with nocounter
        if (curqual = 0 and  depend_question_cd > 0)
;input->process_qual[x]->question_qual[y]->dependency_qual[z]->dependent_question_mean
;              > " ")
           set failed = "T"
           set count1 = count1 + 1
           /* create an occurrence of the reply record if the original occurrence previously used */
           if (count1 > 1)
             set stat = alter(reply->status_data->subeventstatus, count1+1)
           endif        
           set reply->status_data->subeventstatus[count1]->OperationName = "ADD"
           set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
           set reply->status_data->subeventstatus[count1]->TargetObjectName = "Process"
           set reply->status_data->subeventstatus[count1]->TargetObjectValue = "Process code not retrieved"
         endif

        set response_cd = 0.0
        select into "nl:"
           p.code_value
        from code_value p
        where p.code_set = 1659
          and p.cdf_meaning = 
input->process_qual[x]->question_qual[y]->dependency_qual[z]->response_meaning
        detail
            response_cd = cnvtreal(p.code_value)
        with nocounter
        if (curqual = 0 and  response_cd > 0)
;input->process_qual[x]->question_qual[y]->dependency_qual[z]->response_meaning
;              > " ")
           set failed = "T"
           set count1 = count1 + 1
           /* create an occurrence of the reply record if the original occurrence previously used */
           if (count1 > 1)
             set stat = alter(reply->status_data->subeventstatus, count1+1)
           endif        
           set reply->status_data->subeventstatus[count1]->OperationName 
                = "ADD"
           set reply->status_data->subeventstatus[count1]->OperationStatus 
                = "F"
           set reply->status_data->subeventstatus[count1]->TargetObjectName 
                = "Valid Response"
           set reply->status_data->subeventstatus[count1]->TargetObjectValue 
                = "Response code not retrieved"
         endif
         /* determine if insertion was successful */
         if (curqual > 0 and  depend_question_cd > 0)
;input->process_qual[x].question_qual[y].dependency_qual[z].dependent_question_mean > " ")
            /* if so, insert dependency row */
            set partial_update = "T"
            insert into dependency d set
               d.module_cd             = module_cd,
               d.process_cd            = process_cd,
               d.question_cd           = question_cd,
               d.response_cd           = response_cd,
               d.depend_quest_cd       = depend_question_cd,
               d.updt_dt_tm            = cnvtdatetime(curdate, curtime3),
               d.updt_id               = reqinfo->updt_id,
               d.updt_task             = reqinfo->updt_task,
               d.updt_applctx          = reqinfo->updt_applctx,
               d.updt_cnt              = 0
            with nocounter
            /* determine if insertion was successful */
            if (curqual = 0)
               set failed = "T"
               set count1 = count1 + 1
               /* create an occurrence of the reply record if the original occurrence previously used */
               if (count1 > 1)
                  set stat = alter(reply->status_data->subeventstatus, count1+1)
               endif
               set reply->status_data->subeventstatus[count1]->OperationName 
                        = "ADD"
               set reply->status_data->subeventstatus[count1]->OperationStatus 
                        = "F"
               set reply->status_data->subeventstatus[count1]->TargetObjectName 
                        = "Dependency"
               set reply->status_data->subeventstatus[count1]->TargetObjectValue 
                        = "Unable to add to dependency table"
            endif
         endif
      endfor
   endfor
endfor
endif
/****************************************************************************
*       exit_script                                                         *
* determine if total failure, partial update or total success occurred      *
*****************************************************************************/
#exit_script
if (failed = "T" and partial_update = "F")
   set reqinfo->commit_ind = 0
   rollback
elseif (failed = "T" and partial_update = "T")
   set reqinfo->commit_ind = 1
   set reply->status_data->status = "P"
   commit
else
   set reqinfo->commit_ind = 1
   set reply->status_data->status = "S"
   commit
endif

end go

;Generated by GNU enscript 1.6.4.
