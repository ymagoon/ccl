 ;;Solution_Test/script/PathNet -- BB Transfusion/Bbt_Generatetagslabels/BBT_GET_PATIENT_DISPENSE.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1994 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~************************************************************************
/*****************************************************************************


        Source file name:       bbt_get_patient_dispense.prg
        Object name:            bbt_get_patient_dispense
        Request #:              225251

        Product:                Pathnet                              
        Product Team:           Blood Bank
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Get patient_dipense data for dispense event_type_cd product_events
                                (probably obsolete when unknown_patient_ind and unknown_patient_text
                                added to Blood Bank Product Server)
                                
        Tables read:            patient_dispense
        Tables updated:         none
        Executing from:         Blood Bank Product Server

        Special Notes:          none
******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 12/30/96 Jon Weekes           Initial Release                     *
;     002 12/31/03 Jim Jensen           Add person_id and encntr_id to reply*
;~DE~************************************************************************

drop program bbt_get_patient_dispense:dba go
create program bbt_get_patient_dispense:dba

/*
record request
(
 1  eventlist[event]
     2  product_event_id    = f8
)
*/

record reply
(
 1 qual[*]    
    2  product_event_id         = f8
    2  unknown_patient_ind      = i2
    2  unknown_patient_text     = c50
    2  name_full_formatted      = c50
    2  person_id                = f8
    2  encntr_id                = f8
%i cclsource:status_block.inc
)

set reply->status_data->status = "F"
set count1 = 0
set event_cnt = 0
set qual_cnt = 0

/* Determine number of patient_dispense rows to be retrieved */
set event_cnt = cnvtint(size(request->eventlist,5))
/* Set size of reply->qual = to the number of rows requested */
set stat = alterlist(reply->qual, event_cnt)

    /* initialize reply->status_data->status to "I"--Incomplete */
    set reply->status_data->status = "I"
    /* Retrieve patient_dispense row based on product_event_id from request */
    select into "nl:"
        pd.unknown_patient_ind,
        pd.unknown_patient_text,
        per.name_full_formatted,
        pd.person_id,
        pe.encntr_id
    from
        (dummyt d with seq = value(event_cnt)),
        product_event pe,
        patient_dispense  pd,
        (dummyt d_per with seq = 1),
        person per
    plan    d
    join    pe    where pe.product_event_id = request->eventlist[d.seq].product_event_id
    join    pd    where pd.product_event_id = pe.product_event_id
    join    d_per where d_per.seq           = 1
    join    per   where per.person_id       = pd.person_id
                    and per.person_id       > 0

    head report
        qual_cnt = 0
    detail
        qual_cnt = qual_cnt + 1
        reply->qual[d.seq]->product_event_id        = pd.product_event_id
        reply->qual[d.seq]->unknown_patient_ind     = pd.unknown_patient_ind
        reply->qual[d.seq]->unknown_patient_text    = pd.unknown_patient_text
        reply->qual[d.seq]->person_id               = pd.person_id        
        if (per.person_id > 0)
            reply->qual[d.seq]->name_full_formatted = per.name_full_formatted
        endif
        reply->qual[d.seq]->encntr_id               = pe.encntr_id

    with nocounter, outerjoin(d_per)
    
    set count1 = count1 + 1
    if (mod(count1,10) = 1 and count1 != 1)
        set stat = alter(reply->status_data->subeventstatus,count1 + 9)
    endif
    if (curqual = 0)
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[count1]->OperationName = "bbt_get_patient_dispense"
        set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
        set reply->status_data->subeventstatus[count1]->TargetObjectName = "patient_dispense"
        set reply->status_data->subeventstatus[count1]->TargetObjectValue = "could not get all requested patient_dispense rows"
    elseif (qual_cnt != event_cnt)      
        set reply->status_data->status = "F"
        set reply->status_data->subeventstatus[count1]->OperationName = "bbt_get_patient_dispense"
        set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
        set reply->status_data->subeventstatus[count1]->TargetObjectName = "patient_dispense"
        set reply->status_data->subeventstatus[count1]->TargetObjectValue 
            = "could not get all requested patient_dispense rows"
    else
        set reply->status_data->status = "S"
        set reply->status_data->subeventstatus[count1]->OperationName = "bbt_get_patient_dispense"
        set reply->status_data->subeventstatus[count1]->OperationStatus = "S"
        set reply->status_data->subeventstatus[count1]->TargetObjectName = "patient_dispense"
        set reply->status_data->subeventstatus[count1]->TargetObjectValue = "all requested patient_dispense rows retrieved"     
    endif
go to EXIT_SCRIPT

#EXIT_SCRIPT    
if (reply->status_data->status != "S"
and reply->status_data->status != "F")
    set count1 = count1 + 1
    if (mod(count1,10) = 1 and count1 != 1)
        set stat = alter(reply->status_data->subeventstatus,count1 + 9)
    endif
    set reply->status_data->status = "F"
    set reply->status_data->subeventstatus[count1]->OperationName = "bbt_get_patient_dispense"
    set reply->status_data->subeventstatus[count1]->OperationStatus = "F"
    set reply->status_data->subeventstatus[count1]->TargetObjectName = "patient_dispense"
    set reply->status_data->subeventstatus[count1]->TargetObjectValue 
        = "unknown script failure, refer to server generated messages"
endif

for (x = 1 to count1)
    call echo(build("reply->status_data->status =", reply->status_data->status))
    call echo(reply->status_data->status)
    call echo(reply->status_data->subeventstatus[x]->OperationName)
    call echo(reply->status_data->subeventstatus[x]->OperationStatus)
    call echo(reply->status_data->subeventstatus[x]->TargetObjectName)
    call echo(reply->status_data->subeventstatus[x]->TargetObjectValue)
    call echo(build("size reqly->qual =", size(reply->qual,5)))
endfor
;for (event = 1 to event_cnt)    
    ;call echo(build(event, ".  ","unknown_patient_ind = ", reply->qual[event].unknown_patient_ind))
    ;call echo(build(event, ".  ", "unknown_patient_text = ", reply->qual[event].unknown_patient_text))
    ;call echo(build(event, ".  ", "name_full_formatted = ", reply->qual[event].name_full_formatted))
    ;call echo(build(event, ".  ", "person_id = ", reply->qual[event].person_id))
    ;call echo(build(event, ".  ", "encounter_id = ", reply->qual[event].encntr_id))
;endfor

end go        


;Generated by GNU enscript 1.6.4.
