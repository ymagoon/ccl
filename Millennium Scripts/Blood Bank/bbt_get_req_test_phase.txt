 ;;Solution_Test/script/PathNet -- BB Transfusion/Bbt_Requiredtestingphasestool/BBT_GET_REQ_TEST_PHASE.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1995 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       BBT_GET_REQ_TEST_PHASE.PRG
        Object name:            bbt_get_req_test_phase
        Request #:              225121

        Product:                Blood Bank Transfusion
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Return all information pertaining to the 
                                testing phase group requested

        Tables read:            CODE_VALUE and PHASE_GROUP

        Tables updated:         N/A

        Executing from:         Required Testing Phases Tool

        Special Notes:          N/A
******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 07/31/96 Linda DeJong         Initial Release                     *
;     002 09/22/98 Doug Saus            Added return of activity type       *
;     003 07/30/07 Jason Coy            Utilize get_xm_grp_ind in request.  *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program bbt_get_req_test_phase:dba go
create program bbt_get_req_test_phase:dba

/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
/*
record request
(
  1  phase_group_cd = f8  
  1  get_xm_grp_ind = i2        
)
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
record reply
(
  1  display                       = c40
  1  description                   = c40
  1  active_ind                    = i2
  1  cdf_meaning                   = c12
  1  updt_cnt                      = i4
  1  qual[*]
     2  phase_group_id             = f8
     2  task_assay_cd              = f8
     2  mnemonic                   = c40
     2  activity_type_cd           = f8
     2  activity_type_disp         = vc
     2  activity_type_mean         = c12
     2  sequence                   = i4
     2  required_ind               = i2
     2  updt_cnt                   = i4
     2  bb_result_processing_cd    = f8
     2  bb_result_processing_disp  = vc
     2  bb_result_processing_mean  = c12             
%I CCLSOURCE:STATUS_BLOCK.INC
)

/*****************************************************************************/
/* Variable declarations                                                     */
/*****************************************************************************/
declare err_cnt                       = i4   with protect, noconstant(0)
declare phase_cnt                     = i4   with protect, noconstant(0)

; Blood Bank Phases for Result Entry code set 1601
declare PHASES_CS                     = i4   with protect, constant(1601)

declare COMPUTERXM_PHASE_MEAN         = c12  with protect, constant("COMPUTERXM")
declare computerxm_phase_cd           = f8   with protect, noconstant(0.0)

/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
set reply->status_data.status = "F"

/*****************************************************************************/
/* Retrieve computer xm phase code value if necessary.                       */
/*****************************************************************************/
if (request->get_xm_grp_ind = 1)
    set computerxm_phase_cd = uar_get_code_by("MEANING", PHASES_CS, nullterm(COMPUTERXM_PHASE_MEAN))
    if (computerxm_phase_cd <= 0.0)
        set uar_error = concat("Failed to retrieve phase code with meaning of ", trim(COMPUTERXM_PHASE_MEAN), ".")
        call ErrorHandler("F", "uar_get_code_by", uar_error)
    endif
endif

/****************************************************************************
*       Read info from code value and phase group table            *
*****************************************************************************/
select
    if (computerxm_phase_cd > 0.0)
        plan c where (computerxm_phase_cd = c.code_value)

        join p where (c.code_value = p.phase_group_cd
                 and p.active_ind = 1)
        join d where (p.task_assay_cd = d.task_assay_cd)    
    else
        plan c where (request->phase_group_cd = c.code_value
                 and c.code_set = 1601)
        join p where (c.code_value = p.phase_group_cd
                 and p.active_ind = 1)
        join d where (p.task_assay_cd = d.task_assay_cd)    
    endif
    
into "nl:"
    c.display,
    c.description,
    c.active_ind,
    c.updt_cnt,
    c.cdf_meaning,
    p.task_assay_cd,
    p.phase_group_id,
    p.phase_group_cd,
    p.sequence,
    p.required_ind,
    p.updt_cnt,
    d.mnemonic,
    d.activity_type_cd,
    d.bb_result_processing_cd

from code_value          c,
     phase_group         p,
     discrete_task_assay d

head report
    err_cnt = 0
    phase_cnt = 0

    reply->display      = c.display
    reply->description  = c.description
    reply->active_ind   = c.active_ind
    reply->updt_cnt     = c.updt_cnt
    reply->cdf_meaning  = c.cdf_meaning
    
detail    
    phase_cnt = phase_cnt + 1

    if (phase_cnt > size(reply->qual,5))    
        stat = alterlist(reply->qual, phase_cnt + 9)
    endif    
    
    reply->qual[phase_cnt].phase_group_id          = p.phase_group_id
    reply->qual[phase_cnt].task_assay_cd           = p.task_assay_cd
    reply->qual[phase_cnt].sequence                = p.sequence
    reply->qual[phase_cnt].required_ind            = p.required_ind
    reply->qual[phase_cnt].updt_cnt                = p.updt_cnt
    reply->qual[phase_cnt].mnemonic                = d.mnemonic
    reply->qual[phase_cnt].activity_type_cd        = d.activity_type_cd
    reply->qual[phase_cnt].bb_result_processing_cd = d.bb_result_processing_cd

with format, nocounter

set stat = alterlist(reply->qual, phase_cnt)


if (curqual = 0)
    set err_cnt = err_cnt + 1
    set reply->status_data->subeventstatus[err_cnt]->OperationName = "select"
    set reply->status_data->subeventstatus[err_cnt]->OperationStatus = "F"
    set reply->status_data->subeventstatus[err_cnt]->TargetObjectName = "SEQUENCE"
    set reply->status_data->subeventstatus[err_cnt]->TargetObjectValue = "unable to return phase specified"
    set reply->status_data.status = "F"
else
    set reply->status_data.status = "S"
endif

go to EXIT_SCRIPT   

/*****************************************************************************/
/* ErrorHandler subroutine                                                   */
/*****************************************************************************/
declare ErrorHandler(OperationStatus = c1,
                     TargetObjectName = c25,
                     TargetObjectValue = vc) = NULL
 
subroutine ErrorHandler(OperationStatus,
                        TargetObjectName,
                        TargetObjectValue)
   declare error_cnt = i2 with private, noconstant(0)
 
   set error_cnt = size(reply->status_data.subeventstatus, 5)
   if (error_cnt > 1
   or (error_cnt = 1 and reply->status_data.subeventstatus[error_cnt].OperationStatus != ""))
      set error_cnt = error_cnt + 1
      set stat = alter(reply->status_data.subeventstatus, error_cnt)
   endif
 
   set reply->status_data.status = "F"
   set reply->status_data.subeventstatus[error_cnt].OperationName = SCRIPT_NAME
   set reply->status_data.subeventstatus[error_cnt].OperationStatus = OperationStatus
   set reply->status_data.subeventstatus[error_cnt].TargetObjectName = TargetObjectName
   set reply->status_data.subeventstatus[error_cnt].TargetObjectValue = TargetObjectValue
 
   go to EXIT_SCRIPT
end

/****************************************************************************
*       exit_script                                                         *
*****************************************************************************/
#EXIT_SCRIPT          
end
go

;Generated by GNU enscript 1.6.4.
