 ;;Solution_Test/script/PathNet -- BB Transfusion/BB_OCD_README_SCRIPTS/bbt_rdm_del_duplicate_1635.prg Turn on black mode


/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_rdm_del_duplicate_1635.prg
        Object name:            bbt_rdm_del_duplicate_1635
        Readme #:               0

        Product:                PathNet
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            
        
        Program purpose:        The purpose of this application is to Delete 
                                (inactivate) duplicate cdf_meanings for a code_set 1635.

        Tables read,            TABLE_NAME              METHOD (UNIQUE, RANGE, FULL)
        and access method:      --------------------    -----------------------------
                                code_value
                                Service_Directory

        Tables updated:         code_value

        Executing from:         

        Special Notes:          Each section should clearly identify what the purpose
                                of that README step is.  
        
        Run Occurance:          (select ONE of the following)
                                -----------------------------
                                [x] 1. RUN ONCE
                                [ ] 2. RUN MANY

        ReadMe Category:        (select ONE of the following)
                                -----------------------------
                                [ ] 1. Data Load
                                [x] 2. Data Conversion
                                [ ] 3. Data Migration

        Execution Time:         (select ONE of the following)
                                ------------------------------------
                                [x] 1. Uptime before uptime schema.
                                [ ] 2. Uptime after uptime schema.
                                [ ] 3. Downtime before downtime schema.
                                [ ] 4. Downtime after downtime schema.
                                [ ] 5. Uptime after all other components.
        
        Exec. Justification:    Inactivation of non-used code_values.
      
        Parent Script:          Parent script that must execute successfully for 
                                this to execute.

        Check Script:           

        Data file for import:   
        
        Execution Duration:     (select ONE of the following)
                                ----------------------------------
                                [ ] 1. Fixed Time
                                [x] 2. Driver Table: service_directory

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 01/12/01 Chris Cline          Initial (template) Release          *
;     001 02/01/01 Chris Cline          Template update for COMMIT.         *
;     002 02/14/01 Martin R. Slimmer    update for BB logic                 *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_rdm_del_duplicate_1635:dba go
create program bbt_rdm_del_duplicate_1635:dba

%i cclsource:pathnet_ocd_subroutines.inc

/**********************
** Log Start Message **
**                   **********************************
** LOGSCRIPTSTART creates log row as:                **
**    "Starting (<sREADME_NAME>) - [<date/time>]..." **
******************************************************/
#START_SCRIPT
SET sREADME_NAME = "bbt_rdm_del_duplicate_1635"
CALL LOGSCRIPTSTART(sREADME_NAME)

/************************
** README ACTION STEPS **
************************/


record Reply
(
%i cclsource:status_block.inc
)

record CodeSet1635
(
  1 CodeValueRows[*]
      2 code_value = f8
      2 cdf_meaning = c12
      2 active_ind = i2
)

record Duplicates
(
  1 CDFs[*]
      2 cdf_meaning = c12
      2 CodeValues[*]
          3 code_value = f8
          3 delete_ind = i2
)

record DeleteList
(
  1 CodeValues[*]
      2 code_value = f8
)

set bNoUpdates = 1

select into "nl:"
    cv.code_value
    , cv.cdf_meaning
    , cv.active_ind
from 
    code_value cv
where   cv.code_set = 1635

head report
    row_cnt = 0
    stat = alterlist(CodeSet1635->CodeValueRows, 5)

detail
    row_cnt = row_cnt + 1
    if (mod(row_cnt,5) = 1 and row_cnt != 1)
        stat = alterlist(CodeSet1635->CodeValueRows, row_cnt + 4)
    endif
    CodeSet1635->CodeValueRows[row_cnt].code_value = cv.code_value
    CodeSet1635->CodeValueRows[row_cnt].cdf_meaning = cv.cdf_meaning
    CodeSet1635->CodeValueRows[row_cnt].active_ind = cv.active_ind
    bNoUpdates = 0

foot report
    stat = alterlist(CodeSet1635->CodeValueRows, row_cnt)

with nocounter

if (bNoUpdates = 1)
   go to exit_script
endif

select into "nl:"
    cv.code_value
    , cv.cdf_meaning

from 
    code_value cv
    , (dummyt d_cv with seq = value(size(CodeSet1635->CodeValueRows,5)))
    , (dummyt d_sd with seq = 1)
    , service_directory sd

plan d_cv
join cv where cv.code_set = 1635
          and CodeSet1635->CodeValueRows[d_cv.seq].cdf_meaning = cv.cdf_meaning
          and CodeSet1635->CodeValueRows[d_cv.seq].code_value != cv.code_value
          and cv.active_ind = 1

join d_sd
join sd where sd.bb_processing_cd = cv.code_value

order by 
    cv.cdf_meaning
    , cv.code_value

head report
    cdf_cnt = 0
    code_cnt = 0
    stat = alterlist(Duplicates->CDFs, 5)

head cv.cdf_meaning
    code_cnt = 0
    cdf_cnt = cdf_cnt + 1
    if (mod(cdf_cnt,5) = 1 and cdf_cnt != 1)
        stat = alterlist(Duplicates->CDFs, cdf_cnt + 4)
    endif
    Duplicates->CDFs[cdf_cnt].cdf_meaning = cv.cdf_meaning
    stat = alterlist(Duplicates->CDFs[cdf_cnt]->CodeValues, 5)

head cv.code_value
    code_cnt = code_cnt + 1
    if (mod(code_cnt,5) = 1 and code_cnt != 1)
        stat = alterlist(Duplicates->CDFs[cdf_cnt]->CodeValues, code_cnt + 4)
    endif
    Duplicates->CDFs[cdf_cnt]->CodeValues[code_cnt].code_value = cv.code_value
    if (sd.seq > 0)
        Duplicates->CDFs[cdf_cnt]->CodeValues[code_cnt].delete_ind = 0
    else
        Duplicates->CDFs[cdf_cnt]->CodeValues[code_cnt].delete_ind = 1
    endif

detail
    row + 0
    bNoUpdates = 0

foot cv.code_value
    row + 0

foot cv.cdf_meaning
    stat = alterlist(Duplicates->CDFs[cdf_cnt]->CodeValues,code_cnt)
    cnt = 1
    HasDataCount = 0
    while  (cnt <= code_cnt)
        if (Duplicates->CDFs[cdf_cnt]->CodeValues[cnt].delete_ind = 0)
            HasDataCount = HasDataCount + 1
        endif
        cnt = cnt + 1
    endwhile
    if (code_cnt > 0)
        if (HasDataCount = 0)
            Duplicates->CDFs[cdf_cnt]->CodeValues[1].delete_ind = 0
        ;elseif (HasDataCount = 1
            ;  do nothing, structure already flagged correctly
        elseif (HasDataCount > 1)
            HasDataCount = HasDataCount
            ;log message
        endif
    endif

foot report
    stat = alterlist(Duplicates->CDFs, cdf_cnt)

with nocounter, outerjoin(d_sd)

    if (curqual > 0)
        set count1 = 0
        set count2 = 0
        set code_value_cnt = 0
        set stat = alterlist(DeleteList->CodeValues, 5)
        for (count1 = 1 to size(Duplicates->CDFs,5))
            for (count2 = 1 to size(Duplicates->CDFs[count1]->CodeValues,5))
                if (Duplicates->CDFs[count1]->CodeValues[count2].delete_ind = 1)
                    set code_value_cnt = code_value_cnt + 1     
                    if (mod(code_value_cnt,5) = 1 and code_value_cnt != 1)
                        set stat = alterlist(DeleteList->CodeValues, code_value_cnt + 4)
                    endif
                    set DeleteList->CodeValues[code_value_cnt].code_value = 
                                        Duplicates->CDFs[count1]->CodeValues[count2].code_value
                endif
            endfor
        endfor


        select into "nl:"
            cv.*
        from     
            (dummyt d with seq = value(size(DeleteList->CodeValues,5)))
            , code_value cv
        plan d
        join cv where cv.code_value = DeleteList->CodeValues[d.seq].code_value

        with nocounter, forupdate(cv)

        if (curqual > 0)
            update into 
                (dummyt d with seq = value(size(DeleteList->CodeValues,5)))
                , code_value cv
            set cv.active_ind = 0

            plan d
            join cv where cv.code_value = DeleteList->CodeValues[d.seq].code_value    

            with nocounter

            if (curqual > 0)
               set bNoUpdates = 0
            else
               go to exit_script
            endif
        else
            set bNoUpdates = 1
            go to exit_script
        endif
    else
        set bNoUpdates = 1
        go to EXIT_SCRIPT ;nothing to do, no duplicates
    endif


;---------------------------------------------------------
#EXIT_SCRIPT
/****************************
**  LOG Execution Status.  **
**                         ***************************************
**  Note:  if you have a check script then you do not           **
**  need to perform the LOGSTATUS in the RDM script.            **
**  Explicit COMMIT and/or ROLLBACK must be perform             **
**  In this section both in the README and the CHECK            **
**  script.  For example:                                       **
**     if (nCnt > 0)                                            **
**       COMMIT  ;Just in case LOGSTATUS pulls an Oracle error. **
**       CALL LOGSTATUS("Execution Successful.", "S")           **
**     else                                                     **
**       ROLLBACK                                               **
**       CALL LOGSTATUS("Execution Failed because ...", "F")    **
**     endif                                                    **
**                                                              **
*****************************************************************/

if (bNoUpdates = 1)
  rollback
  call logstatus ("No duplicate rows on 1635 code_set inactivated.", "F")
  call logmsg ("No duplicate rows on 1635 code_set inactivated.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
else
  call logstatus ("Duplicate rows on 1635 code_set inactivated.", "S")
  call logmsg ("Duplicate rows on 1635 code_set inactivated.", e_RDMSTATUS + e_DISPMSG + e_LOGTOFILE)
endif


/********************
** Log End Message **
**                   ******************************************
** LOGSCRIPTEND creates log row as:                          **
**    "Execution (<sREADME_NAME>) Complete - [<date/time>]." **
**************************************************************/
CALL LOGSCRIPTEND(sREADME_NAME)

end go

;Generated by GNU enscript 1.6.4.
