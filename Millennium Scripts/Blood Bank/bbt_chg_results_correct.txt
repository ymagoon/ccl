 ;;Solution_Test/script/PathNet -- BB Transfusion/RESULTENTRYFORBLOODBANK/BBT_CHG_RESULTS_CORRECT.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_chg_results_correct.prg
        Object name:            bbt_chg_results_correct
        Request #:              225193

        Product:                Blood Bank
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4

        Program purpose:        Correct lab results.

        Tables read:            code_value

        Tables updated:         perform_result
                                result
                                result_event
                                result_comment
                                product_event
                                bb_order_cell
                                person_aborh
                                person_aborh_result
                                person_antibody
                                person_antigen
                                special_testing
                                special_testing_result
                                blood_product
                                abo_testing
                                crossmatch

        Executing from:         Result Corrections

        Special Notes:          N/A

******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 09/05/96 Linda DeJong         Initial Release                     *
;    *001 05/09/97 Yvonne Klipfel       pass event dt tm for expedites      *
;    *002 01/06/97 Jon Weekes           Added complete_ind, catalog_type_cd *
;    *                                  to request->orders for              *
;    *                                  modifications to pfmt_gl_to_expedite*
;    *                                  and interp_data_id to               *
;    *                                  reply->orders->assays for           *
;    *                                  modifications to pfmt_gl_to_event   *
;    *003 02/05/98 Jon Weekes           Added "declare perf_result_seq = f8 *
;    *  as a global variable, without which exceptions were not posting     *
;    *  since they reference this variable which previously was only defined*
;    *  locally in the process_updated_result and insert_perform_result     *
;    *  subroutines.                                                        *
;    *004 03/30/98 Jon Weekes           Added perform_dt_tm to              *
;    *  reply->orders->assays and populated for 12/97 changes go            *
;    *  pfmt_gl_to_event.                                                   *
;    *005 05/01/98 Jon Weekes           Return updated ABORh data in reply  *
;    *006 07/31/98 Doug Saus            Added specimen_id to request and    *
;    *                                  sending specimen_id, container_id,  *
;    *                                  drawn_dt_tm, and person_aborh_id to *
;    *                                  add_person_aborh_result sub         *
;    *007 08/15/98 Jon Weekes           Modified to update CROSSMATCH.BB_Id_Nbr
;    *          when BB ID NBR assay is corrected for XM order              *
;    *008 08/26/98 Matt Benson          Modified to return ascii_text for   *
;    *                                  textual interps                     *
;    *009 01/04/99 DOug Saus            Added fields to add_bb_exception    *
;    *010 01/18/99 Matt Benson          Added code for handling simultaneous*
;    *                                  resulting of aborh orders           *
;    *011 01/25/99 Jon Weekes           Added declaration of long_text_seq  *
;    *  to resolve errors when correcting a textual result                  *
;    *012 10/18/99 Doug Saus            Date Time assay changes             *
;    *013 10/20/99 Doug Saus            Added logic for opposite antigen    *
;    *                                  blocking                            *
;    *014 01/20/00 Jon Weekes           Correction to check update_to_xm_yn *
;    *  before adding crossmatch.                                           *
;    *015 09/04/01 Gary Runde           Result Recovery Logic               *
;    *016 01/21/02 Soham Dhakal         Add order by for Head and Use UARs  *
;    *017 03/20/02 Gary Runde           Result Recovery Logic               *
;    *018 07/15/02 Christi Ditmars      Add xm_active_ind and               *
;                                       special testing exceptions          *
;    *019 09/13/02 Christi Ditmars      CAPEP00011536 defect fix to allow   *
;                                       antigen to be corrected to opposite *
;    *020 11/11/02 Christi Ditmars      Correct CAPEP00079140 script fails  *
;                                       when correct BBIDNbr on a XM with   *
;                                       no active XM rows.                  *
;    *021 04/23/03 John Rieck           Updated to store the time zone on   *
;    *                                  the PRODUCT_EVENT, RESULT_COMMENT,  *
;    *                                  RESULT_EVENT, PN_RECOVERY_DETAIL and*
;    *                                  PERFORM_RESULT tables for UTC       *
;    *                                  compliance.                         *
;    *022 06/10/03 Ronda Zheng          Insert or update into donor_aborh,  *
;    *                                  donor_antibody and donor_antigen    *
;    *                                  tables instead of person_aborh,     *
;    *                                  person_antibody, and person_antigen *
;    *                                  tables                              *
;    *023 08/19/03 Ronda Zheng          Check opposite antigen on donor     *
;    *024 10/15/03 Ronda Zheng          Fixed for defect CAPEP00108879.When *
;                                       check opposite antigen, use outerjoin*
;                                       on special_testing_result table     *
;    *025 10/24/03 Ronda Zheng          Add person_id in donor tables       *
;    *026 12/4/03  Ronda Zheng          Wrap long lines that exceed 131 char*
;    *027 07/26/04 Ronda Zheng          Changes for CAPEP00133933. Check if *
;                                       rtf text is over 32K.               *
;    *028 07/12/04 Christi Ditmars      Add Auto Dir exceptions             *
;    *029 08/14/04 Ronda Zheng          Updated to support clinical validation*
;    *030 12/07/04 Ronda Zheng          Added use_req_dt_tm_ind to determine*
;                                       if use current system dttm or verified*
;                                       dttm for review queue based on the final
;                                       approver ID or verified personnel ID *
;                                       preference.                         *
;    *031 12/15/04 Ronda Zheng          populate normal_low, normal_high and*
;                                       units_cd to perform_result table    *
;    *032 01/07/05 Ronda Zheng          fixed issue from code review. Changed*
;                                       active_status_dt_tm back to previous *
;                                       version code.                        *
;    *033 03/05/05 Ronda Zheng          Removed cnvtint from nextval        *
;    *034 12/09/05 Jeff Wain            Corrected Large Sequence Issues     *
;    *035 08/01/06 Ryan manuel          Added notify_cd to request          *
;    *036 10/27/06 Tom Brecht           Updated to support flex specimens   *
;    *037 11/10/06 Gary Runde           Updated to support PCS Imaging      *
;    *039 01/12/09 Ronda zheng          Removed donor code.                 *
;    *040 07/23/09 Sachin Yadav         Moved call to ADD_SPECIAL_TESTING   *
;                                       and ADD_SPECIAL_TESTING_RESULT      *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

             drop program BBT_CHG_RESULTS_CORRECT:dba go    
             create program BBT_CHG_RESULTS_CORRECT:dba
     
      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1  event_dt_tm                  = dq8
         1  event_personnel_id           = f8
         1  event_reason                 = vc
         1  use_req_dt_tm_ind            = i2
         1  orders[x]
            2  donor_ind                 = i2
            2  order_id                  = f8
            2  catalog_cd                = f8
            2  activity_type_mean        = c12
            2  bb_processing_mean        = c12          ; 007
            2  person_id                 = f8
            2  encntr_id                 = f8      ;Used to update OCF
            2  patient_order_ind         = f8
            2  accession                 = c20     ;Used to update OCF
            2  assays_cnt                = i4
            2  assays[x]
               3  result_id                 = f8
               3  bb_result_id              = f8
               3  bb_result_processing_mean = c12       ; 007
               3  task_assay_cd             = f8
               3  event_cd                  = f8   ;Used to update OCF
               3  units_cd                  = f8   ;Used to update OCF
               3  specimen_id               = f8
               3  container_id              = f8
               3  drawn_dt_tm               = dq8  ;Used by process server 
               3  service_resource_cd       = f8
               3  perform_result_id         = f8
               3  perform_personnel_id      = f8
               3  perform_dt_tm             = dq8
               3  interp_override_ind       = i2
               3  result_status_cd          = f8
               3  result_type_cd            = f8
               3  nomenclature_id           = f8
               3  result_value_numeric      = f8
               3  numeric_raw_value         = f8
               3  less_great_flag           = i2
               3  result_value_alpha        = vc
               3  result_value_dt_tm        = dq8
               3  rtf_text                  = vc
               3  ascii_text                = vc
               3  normal_cd                 = f8
               3  critical_cd               = f8
               3  review_cd                 = f8
               3  delta_cd                  = f8
               3  normal_low                = f8
               3  normal_high               = f8
               3  normal_alpha              = vc
               3  critical_low              = f8
               3  critical_high             = f8
               3  signature_line_ind        = i2
               3  call_back_ind             = i2
               3  chartable_flag            = i2
               3  security_level_cd         = f8
               3  repeat_number             = i4
               3  reference_range_factor_id = f8
               3  dilution_factor           = f8
               3  resource_error_codes      = vc
             ;  3  capture_file              = vc
               3  equation_id               = f8
               3  multiplex_resource_cd     = f8
               3  result_updt_cnt           = i4
               3  perform_result_updt_cnt   = i4
               3  result_key                = f8  ;Pass back in reply
               3  perform_result_key        = f8  ;Pass back in reply
               3  product_id                = f8
               3  bb_control_cell_cd        = f8
               3  available_prod_event_id   = f8
               3  avail_state_updt_cnt      = i4
               3  inprogress_prod_event_id  = f8
;indicates a new row in spreadsheet, thus new cell or product
               3  next_row_ind              = i2       
               3  prod_state_updt_cnt       = i4
               3  crossmatch_verify_yn      = vc
               3  update_to_xm_yn           = vc
               3  crossmatch_expire_dt_tm   = dq8
               3  bb_id_nbr                 = vc
               3  xm_reason_cd              = f8
               3  bb_result_code_set_cd     = f8  
               3  aborh_verify_yn           = vc  
               3  upd_pat_hist_aborh_yn     = vc  
               3  orig_abo_cd               = f8  
               3  orig_rh_cd                = f8  
               3  orig_result_code_set_cd   = f8   ;lqs added
               3  aborh_result_updt_cnt     = i4   ;lqs added
               3  person_aborh_updt_cnt     = i4  
               3  new_abo_cd                = f8  
               3  new_rh_cd                 = f8 
               3  person_aborh_id           = f8 ; 010  
               3  donor_aborh_updt_cnt      = i4
               3  donor_aborh_id            = f8
               3  antibody_verify_yn        = vc  
               3  person_antibody_updt_cnt  = i4   ;lqs added
               3  antigen_verify_yn         = vc  
               3  person_antigen_updt_cnt   = i4   ;lqs added
               3  product_test_special_test_yn = vc     ;indicates the test is a product test (no accession)
               3  special_testing_verify_yn = vc
               3  upd_prod_spcl_tst_yn      = vc   ;lqs added
               3  special_testing_updt_cnt  = i4   ;lqs added
               3  spcl_tst_rsl_updt_cnt     = i4   ;lqs added
               3  product_aborh_verify_yn   = vc   ;lqs added
               3  upd_blood_product_yn      = vc   ;lqs added
               3  upd_product_avail_yn      = vc   ;lqs added
               3  upd_product_conf_yn       = vc   ;lqs added
               3  upd_product_unconf_yn     = vc   ;lqs added
               3  inact_product_avail_yn    = vc
               3  add_product_unconf_yn     = vc
               3  blood_product_updt_cnt    = i4   ;lqs added
               3  abo_testing_upd_cnt       = i4   ;lqs added
               3  product_orig_abo_cd       = f8   ;lqs added
               3  product_orig_rh_cd        = f8   ;lqs added
               3  product_new_abo_cd        = f8   ;lqs added
               3  product_new_rh_cd         = f8   ;lqs added
               3  result_comment_cnt        = i4
               3  result_comment[x]
                  4  comment_type_cd        = f8
                  4  comment_text           = vc
                  4  comment_prsnl_id       = f8
               3  except_cnt                = i4
               3  exceptlist[x]
                  4  exception_type_mean    = c20
                  4  override_reason_cd     = f8
                  4  from_abo_cd            = f8
                  4  from_rh_cd             = f8
                  4  to_abo_cd              = f8
                  4  to_rh_cd               = f8
                  4  req_cnt                = i4
                  4  req_list[x]
                     5  special_testing_cd  = f8
                     5  requirement_cd      = f8
                  4  auto_dir_cnt           = i4
            		  4  auto_dir_list[x]       
          		       5  product_id          = f8
         3  rh_phenotype_verify_yn          = vc                ; 003
         3  product_rh_phenotype_verify_tn  = vc                ; 003
         3  upd_rh_phenotype_yn             = vc                ; 003
         3  rh_phenotype_id                 = f8                ; 003
         3  rh_phenotype_updt_cnt           = i4                ; 003
         3  rh_antigen_cnt                  = i4                ; 003
         3  rh_antigenlist[*]                                   ; 003
             4  table_id                    = f8                ; 003
             4  updt_cnt                    = i4                ; 003    
             4  spcl_tst_rsl_updt_cnt       = i4
         3  person_rh_pheno_rs_id           = f8
         3  person_rh_pheno_rs_updt_cnt     = i4
         3  xm_inactive_ind                   = i2
         3  result_status_disp              = vc
         3  curr_aborh_diff_from_hist_ind   = i2
         3  notify_cd                 = f8
             3  specimen_expire_dt_tm     = dq8
        )
%i cclsource:pcs_maintain_review_items_req.inc
      */



%I CCLSOURCE:PCS_SUBEVENT.INC
%i CCLSOURCE:GLB_SCRIPT_LOGGING.INC                          
set LOG_PROGRAM_NAME = "bbt_chg_results_correct" 

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      ( 
/*YCK*/  1  event_dt_tm                  = dq8
         1  event_tz                     = i4       ;Time zone for UTC.  
         1  orders[*]
            2  order_id                  = f8
            2  assays_cnt                = i4
            2  pn_recovery_id            = f8      ;used for result recovery        ;015
            2  assays[*]
               3  task_assay_cd             = f8
               3  result_id                 = f8
               3  perform_result_id         = f8
               3  perform_dt_tm             = dq8       ; 004
               3  perform_tz                = i4       ;Time zone for UTC.                
               3  parent_perform_result_id  = f8
               3  updt_id                   = f8
               3  result_updt_cnt           = i4
               3  perform_result_updt_cnt   = i4
               3  result_key                = f8
               3  perform_result_key        = f8
               3  product_id                = f8
               3  xm_prod_event_id          = f8
               3  bb_result_id              = f8
               3  result_status_cd          = f8
               3  result_status_disp        = vc
               3  result_status_mean        = vc
               3  interp_data_id            = f8        ; 002
               ; ** The new_abo/new_rh fields are used for both product and person abo/rh's
               3  new_abo_cd                = f8      ; 005
               3  new_abo_disp              = c15     ; 005
               3  new_abo_mean              = c12     ; 005
               3  new_rh_cd                 = f8      ; 005
               3  new_rh_disp               = c15     ; 005
               3  new_rh_mean               = c12     ; 005
               3  new_aborh_updt_cnt        = i4      ; 005
               3  image_cnt                 = i4
               3  images[*]
                  4 blob_ref_id             = f8
                  4 blob_handle             = vc
                  4 storage_cd              = f8
                  4 format_cd               = f8
                  4 blob_title              = vc
                  4 sequence_nbr            = i4
                  4 publish_flag            = i2
                  4 valid_from_dt_tm        = dq8
                  4 valid_until_dt_tm       = dq8
                  4 delete_ind              = i2
                  4 key_value               = i4
         1 opposite_found_product_id        = f8    ; 013
         1 opposite_found_person_id         = f8    ; 013
         1 opposite_found_order_id          = f8    ; 013
         1 opposite_found_assay_id          = f8    ; 013
         1 opposite_found_prfrm_rslt_key    = f8    ; 013
         1  err_accession                   = c20  
         1  err_catalog_cd                  = f8   
         1  err_catalog_disp                = vc    
         1  err_catalog_mean                = c12    
         1  err_patient_order_ind           = i2     
         1  err_person_product_id           = f8     
         1  err_pat_aborh_upd_conflict_ind  = i2   
         1  err_pat_aborh_ind               = i2
         1  err_prod_aborh_ind              = i2      
         1  pn_recovery_ind                 = i2
            ; 1 = pn_recovery_enabled.
            ; 0 = pn_recovery disabled.
        
%i cclsource:status_block.inc
      )

record rh_a_rec
(
 1  antigenlist[*]
     2  antigen_cd      = f8
     2  opposite_cd     = f8
)

record pe_xm_rec                                    ; 007
(                                                   ; 007
 1  pe_xm[*]                                        ; 007
     2  product_event_id        = f8                ; 007
     2  status                  = i4                ; 007
)                                                   ; 007

  /***********************************************************************
  * Review Item Processing Records                                      *
  ***********************************************************************/
record review_maintain_rep				       
(
%i cclsource:status_block.inc
)

; Master insert, update include files.     
%i cclsource:gm_i_person_aborh_r0793_def.inc    
%i cclsource:gm_u_person_aborh_r0793_def.inc        
%i cclsource:gm_i_person_rh_phen2989_def.inc

/***********************************************************************
* Variable Declaration                                                 *
***********************************************************************/
record current
( 
 1  system_dt_tm              = dq8
)

set current->system_dt_tm = cnvtdatetime(curdate, curtime3)

if (request->use_req_dt_tm_ind = 1)                           
  set reply->event_dt_tm = cnvtdatetime(request->event_dt_tm) 
else                                                         
  set request->event_dt_tm = cnvtdatetime(current->system_dt_tm)
  set reply->event_dt_tm = cnvtdatetime(current->system_dt_tm)
endif 

set select_ok_ind               = 0

declare failed                    = c1  with protected, noconstant("F")
declare RESULT_TYPE_CODESET       = i4  with public, constant(289)
declare RESULT_TYPE_TEXT_CDF      = c12 with public, constant("1")
declare RESULT_TYPE_ALPHA_CDF     = c12 with public, constant("2")
declare RESULT_TYPE_NUMERIC_CDF   = c12 with public, constant("3")
declare RESULT_TYPE_INTERP_CDF    = c12 with public, constant("4")
declare RESULT_TYPE_DATE_CDF      = c12 with public, constant("6")
declare RESULT_TYPE_FREETEXT_CDF  = c12 with public, constant("7")
declare RESULT_TYPE_CALC_CDF      = c12 with public, constant("8")
declare RESULT_TYPE_DATE_TIME_CDF = c12 with public, constant("11") ;012

declare RESULT_STATUS_CODESET       = i4  with public, constant(1901)
declare RESULT_STATUS_VERIFIED_CDF  = c12 with public, constant("VERIFIED")
declare RESULT_STATUS_OLD_VERF_CDF  = c12 with public, constant("OLDVERIFIED")
declare RESULT_STATUS_CORRECTED_CDF = c12 with public, constant("CORRECTED")
declare RESULT_STATUS_OLD_CORR_CDF  = c12 with public, constant("OLDCORRECTED")
declare RESULT_STATUS_CORR_IN_REVIEW_CDF = c12 with public, constant("CORRINREV")
declare RESULT_STATUS_OLD_CORR_IN_REVIEW_CDF = c12 with public, constant("OLDCORRINREV")

declare PRODUCT_STATE_CODESET       = i4  with public, constant(1610)
declare CROSSMATCH_CDF              = c12 with public, constant("3")
declare CONFIRMED_CDF               = c12 with public, constant("19")
declare AVAILABLE_CDF               = c12 with public, constant("12")
declare UNCONFIRMED_CDF             = c12 with public, constant("9")
declare XM_ORDER_PROCESSING_MEAN    = c12 with public, constant("XM")
declare BBIDNBR_RESULT_PROCESSING_MEAN = c12 with public, constant("BB ID NBR")
declare SPECIAL_TESTING_CODE_SET    = i4 	with protect, constant(1612)

declare result_type_text_cd     = f8
declare result_type_alpha_cd    = f8
declare result_type_interp_cd   = f8
declare result_type_numeric_cd  = f8
declare result_type_date_cd     = f8
declare result_type_freetext_cd = f8
declare result_type_calc_cd     = f8
declare result_type_date_time_cd = f8 ;012
declare result_status_verified_cd  = f8
declare result_status_old_verf_cd = f8
declare result_status_corrected_cd = f8
declare result_status_old_corr_cd = f8
declare result_status_corr_in_review_cd   = f8     with public, noconstant(0.0)
declare result_status_old_corr_in_rev_cd  = f8    with public, noconstant(0.0)
declare crossmatch_cd = f8
declare confirmed_cd = f8
declare available_cd = f8
declare unconfirmed_cd = f8

set CV_REQUIRED_RECS            = 16                ;015
declare cv_cnt                  = i4

declare pe_xm_cnt               = i4                ; 007

set result_status_verified_disp = "            "
declare nbr_of_orders           = i4
declare nbr_of_assays           = i4
declare nbr_of_result_comments  = i4
declare oidx                    = i4
declare aidx                    = i4
declare rcidx                   = i4
declare nbr_of_treqs            = i4
declare treq_idx                = i4
declare xm_active_ind           = i2
declare xm_active_cd            = f8
declare nbr_of_auto_dirs        = i4
declare auto_dir_idx            = i4

declare new_special_testing_id  = f8

declare rh_a_cnt                = i4                ; 003
declare rh_a                    = i4                ; 003
declare new_rh_phenotype_id = f8                    ; 003
declare new_person_rh_phenotype_id = f8             ; 003
declare new_product_rh_phenotype_id = f8            ; 003
declare bb_rh_phenotype_id  = f8                    ; 003  rh_phenotype_id from bb_rh_phenotype table for nomenclature_id

declare parent_perf_result_id   = f8
declare curr_result_status_cd   = f8
declare hold_product_id = f8
declare hold_control_cell = f8
declare last_action_seq = i4
declare perf_result_seq = f8
declare bb_result_seq = f8
declare in_progress_prev_update = c1
declare order_cell_prev_update = c1
declare conf_product_event_id = f8
declare person_aborh_id = f8    ;006
declare long_text_seq = f8              ; 011
declare temp_person_id = f8
set status_count = 0
declare excep_prod_event_id = f8
declare excep_prod_event_type_cd = f8

declare pn_recovery_type_cd      = f8  with public, noconstant(0.0)               ;015
declare PN_RECOVERY_TYPE_CDF     = c12 with public, constant("PNRESULT    ")      ;015
declare PN_RECOVERY_TYPE_CODESET = i4  with public, constant(28600)               ;015

declare PN_RECOVERY_INFO_DOMAIN = vc with public, constant("PATHNET")
declare PN_RECOVERY_INFO_NAME   = vc with public, constant("BB_RESULT_RECOVERY")

set RH_TEST_ONLY = " "
set ABO_TEST_ONLY = " "
set ABO_RH_TEST = " "
set WRITE_ABORH_RESULT = " "
set gsub_person_aborh_status = "  "
set gsub_person_aborh_inact_status = "  "
set gsub_inactive_aborh_rsl_status = "  "
set gsub_aborh_result_status = "  "
set gsub_person_antibody_status = "  "
set gsub_inactive_prs_antibody_status = "  "
set gsub_person_antigen_status = "  "
set gsub_inactive_prs_antigen_status = "  "
set gsub_special_testing_status = "  "
set gsub_inactive_spcl_tst_status = "  "
set gsub_spc_tst_result_status = "  "
set gsub_inactive_spc_tst_rsl_status = "  "
set PRODUCT_RH_TEST_ONLY = " "   
set PRODUCT_ABO_TEST_ONLY = " "
set PRODUCT_ABO_RH_TEST = " "
set WRITE_RESULT = " "
set current_updated_ind = 0
set gsub_blood_product_status = "  "
set gsub_abo_testing_status = "  "
set gsub_rh_phenotype_status = "  "
set pat_aborh_upd_conflict_ind = 0
declare stat = i2 with protected, noconstant(0)
declare gsub_bbd_rh_phenotype_status            = c2    with protect, noconstant(fillstring(2, "  "))
declare gdSpecial_testing_id                    = f8    with protect, noconstant(0.0)
declare exception_status                        = c2    with protect, noconstant(fillstring(2, "  "))

  
      #Script
         set reply->status_data.status = "F"

      /***********************************************************************
      * Load result type  code sets                                          *
      ***********************************************************************/  
        
        set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CODESET, RESULT_TYPE_TEXT_CDF, 1, result_type_text_cd)    
        if (result_type_text_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_TYPE_CODESET, "result_type_text_cd")
        endif 
        ;call echo(build("result_type_text_cd--->", result_type_text_cd))
        
        
        set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CODESET, RESULT_TYPE_ALPHA_CDF, 1, result_type_alpha_cd)    
        if (result_type_alpha_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_TYPE_CODESET, "result_type_alpha_cd")
        endif
        ;call echo(build("result_type_alpha_cd--->", result_type_alpha_cd))
                
        set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CODESET, RESULT_TYPE_INTERP_CDF, 1, result_type_interp_cd)    
        if (result_type_interp_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_TYPE_CODESET, "result_type_interp_cd")
        endif
        ;call echo(build("result_type_interp_cd--->", result_type_interp_cd))
                
        
        set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CODESET, RESULT_TYPE_NUMERIC_CDF, 1, result_type_numeric_cd)    
        if (result_type_numeric_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_TYPE_CODESET, "result_type_numeric_cd")
        endif
        ;call echo(build("result_type_numeric_cd--->", result_type_numeric_cd))
                
        
        set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CODESET, RESULT_TYPE_DATE_CDF, 1, result_type_date_cd)    
        if (result_type_date_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_TYPE_CODESET, "result_type_date_cd")
        endif
        ;call echo(build("result_type_date_cd--->", result_type_date_cd))
                
        
        set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CODESET, RESULT_TYPE_FREETEXT_CDF, 1, result_type_freetext_cd)    
        if (result_type_freetext_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_TYPE_CODESET, "result_type_freetext_cd")
        endif
        ;call echo(build("result_type_freetext_cd--->", result_type_freetext_cd))
                
        
        set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CODESET, RESULT_TYPE_CALC_CDF, 1, result_type_calc_cd)    
        if (result_type_calc_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_TYPE_CODESET, "result_type_calc_cd")
        endif        
        ;call echo(build("result_type_calc_cd--->", result_type_calc_cd))
        
        
        set stat = uar_get_meaning_by_codeset(RESULT_TYPE_CODESET, RESULT_TYPE_DATE_TIME_CDF, 1, result_type_date_time_cd)    
        if (result_type_date_time_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_TYPE_CODESET, "result_type_date_time_cd")
        endif        
        ;call echo(build("result_type_date_time_cd--->", result_type_date_time_cd))
        
                
      
      /***********************************************************************
      * Load result status code sets                                         *
      ***********************************************************************/           
        
        set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_OLD_VERF_CDF, 
                                                1, result_status_old_verf_cd)    
        if (result_status_old_verf_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_STATUS_CODESET, "result_status_old_verf_cd")
        endif
        ;call echo(build("result_status_old_verf_cd--->", result_status_old_verf_cd))
                
        
        set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_VERIFIED_CDF, 
                                                1, result_status_verified_cd)    
        if (result_status_verified_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_STATUS_CODESET, "result_status_verified_cd")
        endif
        ;call echo(build("result_status_verified_cd--->", result_status_verified_cd))
                
        
        set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_CORRECTED_CDF, 
                                                1, result_status_corrected_cd)    
        if (result_status_corrected_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_STATUS_CODESET, "result_status_corrected_cd")
        endif
        ;call echo(build("result_status_corrected_cd--->", result_status_corrected_cd))
        
        
        set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_OLD_CORR_CDF, 
                                                1, result_status_old_corr_cd)    
        if (result_status_old_corr_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_STATUS_CODESET, "result_status_old_corr_cd")
        endif
        ;call echo(build("result_status_old_corr_cd--->", result_status_old_corr_cd))
                
      
        set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_CORR_IN_REVIEW_CDF, 
                                                1, result_status_corr_in_review_cd)    
        if (result_status_corr_in_review_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_STATUS_CODESET, "result_status_corr_in_review_cd")
        endif


        set stat = uar_get_meaning_by_codeset(RESULT_STATUS_CODESET, RESULT_STATUS_OLD_CORR_IN_REVIEW_CDF, 
                                                1, result_status_old_corr_in_rev_cd)    
        if (result_status_old_corr_in_rev_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", RESULT_STATUS_CODESET, "result_status_old_corr_in_rev_cd")
        endif

      /***********************************************************************
      * Load product state code sets                                         *
      ***********************************************************************/
         
        set stat = uar_get_meaning_by_codeset(PRODUCT_STATE_CODESET, CROSSMATCH_CDF, 
                                                1, crossmatch_cd)    
        if (crossmatch_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", PRODUCT_STATE_CODESET, "crossmatch_cd")
        endif
        ;call echo(build("crossmatch_cd--->", crossmatch_cd))
        
        set stat = uar_get_meaning_by_codeset(PRODUCT_STATE_CODESET, CONFIRMED_CDF, 
                                                1, confirmed_cd)    
        if (confirmed_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", PRODUCT_STATE_CODESET, "confirmed_cd")
        endif
        ;call echo(build("confirmed_cd--->", confirmed_cd))
        
        
        set stat = uar_get_meaning_by_codeset(PRODUCT_STATE_CODESET, AVAILABLE_CDF, 
                                                1, available_cd)    
        if (available_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", PRODUCT_STATE_CODESET, "available_cd")
        endif
        ;call echo(build("available_cd--->", available_cd))
        
        
        set stat = uar_get_meaning_by_codeset(PRODUCT_STATE_CODESET, UNCONFIRMED_CDF, 
                                                1, unconfirmed_cd)    
        if (unconfirmed_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", PRODUCT_STATE_CODESET, "unconfirmed_cd")
        endif 
        ;call echo(build("unconfirmed_cd--->", unconfirmed_cd))
        
 
      /***********************************************************************
      * Load product state code sets                                         *
      ***********************************************************************/
         
        set stat = uar_get_meaning_by_codeset(PN_RECOVERY_TYPE_CODESET, PN_RECOVERY_TYPE_CDF, 
                                                1, pn_recovery_type_cd)    
        if (pn_recovery_type_cd = 0.0) 
            set failed = "T"
            call subevent_add("UAR","F", PN_RECOVERY_TYPE_CODESET, "pn_recovery_type_cd")
        endif  
        ;call echo(build("pn_recovery_type_cd--->", pn_recovery_type_cd))

                    if (failed = "T")
                        go to Exit_Script
                    endif

        /***********************************************************************
        * Check to see if the result recovery logic is enabled                 *
        ***********************************************************************/
  
        ;default as the pn_recovery enabled.      
        set reply->pn_recovery_ind = 1
  
        select into "nl:"
          dm.info_domain
        from
          dm_info dm
        plan dm
          where dm.info_domain = PN_RECOVERY_INFO_DOMAIN
            and dm.info_name   = PN_RECOVERY_INFO_NAME
        detail
          ;if row found on the dm_info table, pn_recovery logic is disabled.
          reply->pn_recovery_ind = 0
        with nocounter
  
        /***********************************************************************
      * Execute script to load the Interceptor Request and to call the       *
        Interceptor and the Pcs_upd_review_Items Script                      *
      ***********************************************************************/
%I cclsource:pcs_load_interceptor.inc

      ;check status from Interceptor script
      if (reply->status_data->status = "F")
         go to Exit_Script
      endif

      ;default the initial status of the script to be false to
      ;process the rest of the script
      set reply->status_data->status = "F"
      
      /***********************************************************************
      * Process new results by inserting new result, perform_result, and     *
      * result_event records.  Update existing results by updating result    *
      * records and adding new perform_result and result_event records.      *
      ***********************************************************************/
         set nbr_of_orders = size(request->orders,5)
         set stat = alterlist(reply->orders, nbr_of_orders)
         set hold_product_id = 0.0
         set hold_control_cell = 0.0
         set product_event_id = 0.0
         set re_event_type_cd = 0.0
         set result_seq = 0.0
       
;yck set event_dt_tm to current system date time until pc vs system date is resolved
;yck         set request->event_dt_tm = cnvtdatetime(curdate, curtime3)
        
         set order_update_complete = "N"  ;010

         for (oidx = 1 to nbr_of_orders)
            set nbr_of_assays = request->orders[oidx].assays_cnt
            set reply->orders[oidx]->order_id = request->orders[oidx].order_id
            set reply->orders[oidx]->assays_cnt = nbr_of_assays
            set stat = alterlist(reply->orders[oidx].assays, nbr_of_assays)

            for (aidx = 1 to nbr_of_assays)
;yck set to system date/time until pc vs system is resolved
;yck               set request->orders[oidx].assays[aidx].perform_dt_tm = cnvtdatetime(curdate, curtime3)
                ;Check if the rtf text results are exceed 32K.
                if (textlen(request->orders[oidx].assays[aidx].rtf_text) > 32000)
                    set failed = "T"
                    call subevent_add("RTF_TEXT","F", "long_text", "Long text exceeds 32,000 characters.")
                    go to EXIT_SCRIPT
                endif
              
               if (request->use_req_dt_tm_ind = 1)                       
                   set reply->orders[oidx].assays[aidx].perform_dt_tm =  
                     cnvtdatetime(request->orders[oidx].assays[aidx].perform_dt_tm)
               else                                                      
                   set request->orders[oidx].assays[aidx].perform_dt_tm = cnvtdatetime(current->system_dt_tm)
                   set reply->orders[oidx].assays[aidx].perform_dt_tm = cnvtdatetime(current->system_dt_tm)                  
               endif
            
               if (request->orders[oidx].assays[aidx].next_row_ind = 1)
                  set hold_product_id = 0.0
                  set hold_control_cell = 0.0
               endif
               set reply->orders[oidx].assays[aidx].task_assay_cd =
                 request->orders[oidx].assays[aidx].task_assay_cd
               set reply->orders[oidx].assays[aidx].updt_id = 
                 reqinfo->updt_id,
               set reply->orders[oidx].assays[aidx].result_key =
                 request->orders[oidx].assays[aidx].result_key
               set reply->orders[oidx].assays[aidx].perform_result_key =
                 request->orders[oidx].assays[aidx].perform_result_key
               set reply->orders[oidx].assays[aidx].result_status_cd =
                 request->orders[oidx].assays[aidx].result_status_cd               

               if (request->orders[oidx]->assays[aidx]->bb_result_id > 0)
                  set bb_result_seq = request->orders[oidx]->assays[aidx]->bb_result_id
               else
                  set bb_result_seq = 0.0
               endif

              /****************************/
              /* Check for updated result */
              /****************************/
               if (process_updated_result( 0 ) = 0)
                  go to Exit_Script
               endif

               set reply->orders[oidx]->assays[aidx].bb_result_id = bb_result_seq
               if (request->orders[oidx]->assays[aidx].product_id > 0)
                  set reply->orders[oidx]->assays[aidx].product_id = request->orders[oidx]->assays[aidx].product_id   
               else
                  set reply->orders[oidx]->assays[aidx].product_id = 
                                        request->orders[oidx]->assays[aidx].bb_control_cell_cd
               endif

               /* determine if the product id has changed which will mean the end of the assays for the 
                  previous product has been reached */
               if (request->orders[oidx]->assays[aidx]->bb_control_cell_cd != hold_control_cell
                   or request->orders[oidx].assays[aidx].next_row_ind = 1)
                     set hold_control_cell = request->orders[oidx]->assays[aidx]->bb_control_cell_cd
               endif               
             
           if (request->orders[oidx]->donor_ind = 0) 
                /* Transfusion orders */
               /***   crossmatch   ***/
               if (request->orders[oidx]->bb_processing_mean = XM_ORDER_PROCESSING_MEAN                                 ; 007
               and request->orders[oidx]->assays[aidx]->bb_result_processing_mean = BBIDNBR_RESULT_PROCESSING_MEAN)     ; 007
                  if (update_crossmatch_bbidnbr                                                                         ; 007
                        (                                                                                               ; 007
                         request->orders[oidx]->order_id                                                                ; 007
                         , request->orders[oidx]->assays[aidx]->ascii_text                                              ; 007
                        ) = 0)                                                                                          ; 007
                      go to Exit_Script                                                                                 ; 007
                  endif                                                                                                 ; 007
               endif                                                                                                    ; 007
               if (request->orders[oidx]->assays[aidx]->inprogress_prod_event_id > 0
                   and request->orders[oidx]->assays[aidx]->product_aborh_verify_yn != "Y")
                  if (request->orders[oidx]->assays[aidx]->product_id != hold_product_id
                              or request->orders[oidx]->assays[aidx]->crossmatch_verify_yn = "Y")
                        if (update_crossmatch( 0 ) = 0)
                           go to Exit_Script
                        endif
                  endif

               /***   patient aborh   ***/
               elseif (request->orders[oidx]->assays[aidx]->aborh_verify_yn = "Y"
                       and request->orders[oidx]->assays[aidx]->bb_result_code_set_cd > 0)
                    set person_aborh_id = 0.0           ; 006 Set from person_aborh_id added to person_aborh table so that
                                                        ;       it can be carried forward to person_aborh_result.  Initialized
                                                        ;       to zero here in the event that a person_aborh_result row 
                                                        ;       is added with out a person_aborh row and will thus be defined
                                                        ;       and set to 0.
                    ; 005 if (update_patient_aborh( 0 ) = 0)
                    if (update_patient_aborh( 0 ) = 1)                                                              ; 005
                        set reply->orders[oidx]->assays[aidx]->new_abo_cd                                           ; 005
                            = request->orders[oidx]->assays[aidx]->new_abo_cd                                       ; 005
                        set reply->orders[oidx]->assays[aidx]->new_rh_cd                                            ; 005
                            = request->orders[oidx]->assays[aidx]->new_rh_cd                                        ; 005
                        set reply->orders[oidx]->assays[aidx]->new_aborh_updt_cnt                                   ; 005
                            = request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt + 1                        ; 005
                    else                                                                                            ; 005
                        if (gsub_person_aborh_status = "FS")
                              set failed = "T"
                              set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                              if (status_count > 1)
                                 set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                              endif
                              set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                              set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                              set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Aborh"
                              set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Unable to insert person_aborh due to aborh id"
                        elseif (gsub_person_aborh_status = "FA")
                              set failed = "T"
                              set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                              if (status_count > 1)
                                 set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                              endif
                              set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                              set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                              set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Aborh"
                              set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                   "Unable to insert person aborh"
                        endif
                        if (gsub_person_aborh_inact_status = "FL")
                             set failed = "T"
                             set status_count = status_count + 1
                             /* create an occurrence of the reply status record if the original occurrence previously used */
                             if (status_count > 1)
                                set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                             endif
                             set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                             set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Aborh"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Unable to lock person_aborh for update"
                        elseif (gsub_person_aborh_inact_status = "FU")
                             set failed = "T"
                             set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                             if (status_count > 1)
                                 set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                             endif
                             set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                             set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Aborh"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to inactivate person aborh"
                        endif
                        if (gsub_inactive_aborh_rsl_status = "FL")
                           set failed = "T"
                           set status_count = status_count + 1
                           /* create an occurrence of the reply status record if the original occurrence previously used */
                           if (status_count > 1)
                              set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Aborh Result"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Unable to lock person_aborh_result for update"
                        elseif (gsub_inactive_aborh_rsl_status = "FU")
                           set failed = "T"
                           set status_count = status_count + 1
                           /* create an occurrence of the reply status record if the original occurrence previously used */
                           if (status_count > 1)
                              set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Aborh Result"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to inactivate person aborh result"
                        endif
                        if (gsub_aborh_result_status = "FP")
                              set failed = "T"
                              set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                             if (status_count > 1)
                                 set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                             endif
                             set reply->status_data->subeventstatus[status_count]->OperationName = "select"
                             set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Aborh"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Unable to find active person record on person_aborh"
                        elseif (gsub_aborh_result_status = "FS")
                             set failed = "T"
                             set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                             if (status_count > 1)
                                 set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                             endif
                             set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                             set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Aborh Result"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                              "Unable to insert aborh result due to next sequence number"
                        elseif (gsub_aborh_result_status = "FA")
                             set failed = "T"
                             set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                             if (status_count > 1)
                                 set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                             endif
                             set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                             set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Aborh Result"
                             set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to insert aborh result"
                        endif
                        go to Exit_Script
                     endif
               elseif (request->orders[oidx]->assays[aidx]->antibody_verify_yn = "Y"
                       and request->orders[oidx]->assays[aidx]->bb_result_code_set_cd > 0) 
                    set gsub_person_antibody_status = "  "
                    set gsub_inactive_prs_antibody_status = "  "
                    
                  if (request->review_queue_ind = 0)
                    ;calling from result entry
                    call CHG_PERSON_ANTIBODY
                       (
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,
                        /* antibody_cd            */ request->orders[oidx]->assays[aidx]->orig_result_code_set_cd,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* bb_result_id           */ bb_result_seq,
                        /* active_ind             */ 0,
                        /* active_status_cd       */ reqdata->active_status_cd,
                        /* updt_cnt               */ request->orders[oidx]->assays[aidx]->person_antibody_updt_cnt,
                        /* lock_forupdate_ind     */ 1
                        )
                    if (gsub_inactive_prs_antibody_status != "OK")
                      if (gsub_inactive_prs_antibody_status = "FL")
                         set failed = "T"
                         set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                         if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                         endif
                         set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                         set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antibody"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Unable to lock person_antibody for update"
                      elseif (gsub_inactive_prs_antibody_status = "FU")
                         set failed = "T"
                         set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                         if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                         endif
                         set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                         set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antibody"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to inactivate person antibody"
                      endif
                      go to Exit_script
                    endif            
                 elseif (request->review_queue_ind = 1)
                  ;calling from review queue
                    call CHG_PERSON_ANTIBODY_2
                       (
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* bb_result_id           */ bb_result_seq,
                        /* active_ind             */ 0,
                        /* active_status_cd       */ reqdata->active_status_cd
                        )
                    if (gsub_inactive_prs_antibody_status != "OK")
                      if (gsub_inactive_prs_antibody_status = "FL")
                         set failed = "T"
                         set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                         if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                         endif
                         set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                         set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antibody"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Unable to lock person_antibody for update"
                      elseif (gsub_inactive_prs_antibody_status = "FU")
                         set failed = "T"
                         set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                         if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                         endif
                         set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                         set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antibody"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to inactivate person antibody"
                      endif
                      go to Exit_script
                    endif                 
                  endif ;if (request->review_queue_ind = 0)
                    
                    
                         
                    /*write new person antibody record */
                    call ADD_PERSON_ANTIBODY
                       (
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,
                        /* antibody_cd               */ request->orders[oidx]->assays[aidx]->bb_result_code_set_cd,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* bb_result_id           */ bb_result_seq,
                        /* active_ind             */ 1,
                        /* active_status_cd       */ reqdata->active_status_cd,
;yck                        /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                        /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
                        /* active_status_prsnl_id */ request->event_personnel_id
                        )
                    if (gsub_person_antibody_status != "OK")
                        if (gsub_person_antibody_status = "FA")
                           set failed = "T"
                           set status_count = status_count + 1
                           /* create an occurrence of the reply status record if the original occurrence previously used */
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antibody"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to insert person antibody"
                        endif
                        go to Exit_script
                    endif
               /***   patient antigen   ***/
               elseif (request->orders[oidx]->assays[aidx]->antigen_verify_yn = "Y"
                        and request->orders[oidx]->assays[aidx]->bb_result_code_set_cd > 0)
                    set gsub_person_antigen_status = "  "
                    set gsub_inactive_prs_antigen_status = "  "
                    
                  if (request->review_queue_ind = 0)
                    ;calling from result entry
                    call CHG_PERSON_ANTIGEN
                       (
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,
                        /* antigen_cd             */ request->orders[oidx]->assays[aidx]->orig_result_code_set_cd,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* bb_result_id           */ bb_result_seq,
                        /* active_ind             */ 0,
                        /* active_status_cd       */ reqdata->active_status_cd,
                        /* updt_cnt               */ request->orders[oidx]->assays[aidx]->person_antigen_updt_cnt,
                        /* lock_forupdate_ind     */ 1
                        )
                    if (gsub_inactive_prs_antigen_status != "OK")
                       if (gsub_inactive_prs_antigen_status = "FL")
                           set failed = "T"
                           set status_count = status_count + 1
                           /* create an occurrence of the reply status record if the original occurrence previously used */
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antigen"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                         "Unable to lock person_antigen for update"
                       elseif (gsub_inactive_prs_antigen_status = "FU")
                           set failed = "T"
                           set status_count = status_count + 1
                           /* create an occurrence of the reply status record if the original occurrence previously used */
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antigen"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to inactivate person antigen"
                        endif
                        go to Exit_script
                    endif
                  elseif (request->review_queue_ind = 1)
                    ;calling from review queue
                    call CHG_PERSON_ANTIGEN_2
                       (
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,                        
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* bb_result_id           */ bb_result_seq,
                        /* active_ind             */ 0,
                        /* active_status_cd       */ reqdata->active_status_cd
                        )
                    if (gsub_inactive_prs_antigen_status != "OK")
                       if (gsub_inactive_prs_antigen_status = "FL")
                           set failed = "T"
                           set status_count = status_count + 1
                           /* create an occurrence of the reply status record if the original occurrence previously used */
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antigen"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                         "Unable to lock person_antigen for update"
                       elseif (gsub_inactive_prs_antigen_status = "FU")
                           set failed = "T"
                           set status_count = status_count + 1
                           /* create an occurrence of the reply status record if the original occurrence previously used */
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antigen"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to inactivate person antigen"
                        endif
                        go to Exit_script
                    endif
                  endif ;(request->review_queue_ind = 0)
                  
                    /*write new person antigen record */
                    call ADD_PERSON_ANTIGEN
                       (
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,
                        /* antigen_cd               */ request->orders[oidx]->assays[aidx]->bb_result_code_set_cd,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* bb_result_id           */ bb_result_seq,
                        /* person_rh_phenotype_id */ 0,
                        /* active_ind             */ 1,
                        /* active_status_cd       */ reqdata->active_status_cd,
                        /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
                        /* active_status_prsnl_id */ request->event_personnel_id
                        )
                    if (gsub_person_antigen_status != "OK")
                      if (gsub_person_antigen_status = "FA")
                         set failed = "T"
                         set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                         if (status_count > 1)
                             set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                         endif
                         set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                         set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Person Antigen"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to insert person antigen"
                      endif
                      go to Exit_script
                    endif
               /***   product antigen   ***/
               elseif (request->orders[oidx]->assays[aidx]->special_testing_verify_yn = "Y"
                    and request->orders[oidx]->assays[aidx]->bb_result_code_set_cd > 0)
                       set orig_special_testing_id = 0.0
                       set new_special_testing_id = 0.0
                       set gsub_special_testing_status = "  "
                       set gsub_inactive_spcl_tst_status = "  "
                       set gsub_spc_tst_result_status = "  "
                       set gsub_inactive_spc_tst_rsl_status = "  "
                       set sub_product_id = 0.0
                       if (request->orders[oidx]->assays[aidx]->product_test_special_test_yn = "Y")
                           set sub_product_id = request->orders[oidx]->person_id
                       else
                           set sub_product_id = request->orders[oidx]->assays[aidx]->product_id
                       endif
;013
                        set opposite_found_ind = 0

                        select into "nl:"
                            st.product_id
                            , st.special_testing_cd
                            , st.active_ind
                            , str.result_id
                            , cv.code_value
                            , cv.code_set
                            , cv.cdf_meaning
                            , cve.code_set
                            , cve.code_value
                            , cve.field_name
                            , cve.field_value
                            
                        from
                            special_testing st
                            , special_testing_result str
                            , code_value cv
                            , code_value_extension cve
                        
                        plan st where st.product_id = sub_product_id
                                  and st.active_ind = 1
               
                        join cv where cv.code_set = 1612
                                  and cv.code_value = st.special_testing_cd
                                  and (cv.cdf_meaning = "-"
                                      or cv.cdf_meaning = "+")

                        join cve where cve.code_set = cv.code_set
                                   and cve.code_value = cv.code_value
                                   and cve.field_name = "Opposite"
                                   
                        join str where outerjoin(st.special_testing_id) = str.special_testing_id
                        
                        head report
                            found_ind = 0

                        detail
                            if (cnvtreal(cve.field_value) = request->orders[oidx]->assays[aidx]->bb_result_code_set_cd)
                                if (reply->orders[oidx].assays[aidx].result_id != str.result_id)
                                  found_ind = 1
                                endif
                            endif
                        
                        foot report
                            opposite_found_ind = found_ind

                        with nocounter
                        if (opposite_found_ind = 1) 
                            set reply->opposite_found_product_id = sub_product_id
                            if (request->orders[oidx]->assays[aidx]->product_test_special_test_yn != "Y")
                                set reply->opposite_found_person_id = request->orders[oidx]->person_id          
                            endif
                            set reply->opposite_found_order_id = request->orders[oidx]->order_id
                            set reply->opposite_found_assay_id = request->orders[oidx]->assays[aidx]->task_assay_cd
                            set reply->opposite_found_prfrm_rslt_key = request->orders[oidx].assays[aidx].perform_result_key
                            set failed = "T"
                            set reply->status_data->status = "Z"
                            set status_count = status_count + 1
                            /* create an occurrence of the reply status record if the original occurrence previously used */
                            if (status_count > 1)
                                 set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                            endif
                            set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                            set reply->status_data->subeventstatus[status_count]->OperationStatus = "Z"
                            set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                            set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                = "Unable to insert special testing because opposite already exists on product."
                            go to exit_script

                        else
                          if (request->review_queue_ind = 0)
                           ;calling from result entry
                           call CHG_SPECIAL_TESTING_RESULT
                           (
                            /* special_testing_id     */ orig_special_testing_id,
                            /* product_id             */ sub_product_id,
                            /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                            /* bb_result_id           */ reply->orders[oidx].assays[aidx].bb_result_id,
                            /* active_ind             */ 0,
                            /* active_status_cd       */ reqdata->active_status_cd,
                            /* updt_cnt               */ request->orders[oidx]->assays[aidx]->spcl_tst_rsl_updt_cnt,
                            /* lock_forupdate_ind     */ 1,
                            /* special_testing_cd     */ request->orders[oidx]->assays[aidx]->orig_result_code_set_cd,
                            /* spcl_tst_updt_cnt      */ request->orders[oidx]->assays[aidx]->special_testing_updt_cnt
                            )
                            if (gsub_inactive_spc_tst_rsl_status != "OK")
                               if (gsub_inactive_spcl_tst_status = "FL")
                                  set failed = "T"
                                  set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                     set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                       "Unable to lock special_testing for update"
                               elseif (gsub_inactive_spcl_tst_status = "FU")
                                  set failed = "T"
                                  set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                   "Unable to inactivate special testing"
                                endif
                                go to Exit_script
                            endif               
                          elseif (request->review_queue_ind = 1)
                           ;calling from review queue
                           call CHG_SPECIAL_TESTING_RESULT_2
                           (
                            /* product_id             */ sub_product_id,
                            /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                            /* bb_result_id           */ reply->orders[oidx].assays[aidx].bb_result_id,
                            /* active_ind             */ 0,
                            /* active_status_cd       */ reqdata->active_status_cd
                            )
                            if (gsub_inactive_spc_tst_rsl_status != "OK")
                               if (gsub_inactive_spcl_tst_status = "FL")
                                  set failed = "T"
                                  set status_count = status_count + 1
                                  /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                     set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                       "Unable to lock special_testing for update"
                               elseif (gsub_inactive_spcl_tst_status = "FU")
                                  set failed = "T"
                                  set status_count = status_count + 1
                                  /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                   "Unable to inactivate special testing"
                                endif
                                go to Exit_script
                            endif              
                          endif ;(request->review_queue_ind = 0)
                                         
                          if (request->orders[oidx]->assays[aidx]->upd_prod_spcl_tst_yn = "Y")
                            if (request->review_queue_ind = 0)
                              ;calling from result entry
                               call CHG_SPECIAL_TESTING
                               (
                                /* product_id             */ sub_product_id,
                                /* special_testing_cd     */ request->orders[oidx]->assays[aidx]->orig_result_code_set_cd,
                                /* active_ind             */ 0,
                                /* active_status_cd       */ reqdata->active_status_cd,
                                /* updt_cnt               */ request->orders[oidx]->assays[aidx]->special_testing_updt_cnt,
                                /* lock_forupdate_ind     */ 1
                                )
                                if (gsub_inactive_spcl_tst_status != "OK")
                                   if (gsub_inactive_spcl_tst_status = "FL")
                                      set failed = "T"
                                      set status_count = status_count + 1
                                      /* create an occurrence of the reply status record if the original occurrence 
                                      previously used */
                                      if (status_count > 1)
                                         set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                      endif
                                      set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                           "Unable to lock special_testing for update"
                                   elseif (gsub_inactive_spcl_tst_status = "FU")
                                      set failed = "T"
                                      set status_count = status_count + 1
                                      /* create an occurrence of the reply status record if the original occurrence 
                                      previously used */
                                      if (status_count > 1)
                                           set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                      endif
                                      set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                       "Unable to inactivate special testing"
                                    endif
                                    go to Exit_script
                                endif
                             elseif (request->review_queue_ind = 1)
                              ;calling from review queue
                               call CHG_SPECIAL_TESTING_2                               
                               (
                                /* Special_testing_id     */ gdSpecial_testing_id,
                                /* active_ind             */ 0,
                                /* active_status_cd       */ reqdata->inactive_status_cd
                                )
                                if (gsub_inactive_spcl_tst_status != "OK")
                                   if (gsub_inactive_spcl_tst_status = "FL")
                                      set failed = "T"
                                      set status_count = status_count + 1
                                      /* create an occurrence of the reply status record if the original occurrence 
                                      previously used */
                                      if (status_count > 1)
                                         set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                      endif
                                      set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                           "Unable to lock special_testing for update"
                                   elseif (gsub_inactive_spcl_tst_status = "FU")
                                      set failed = "T"
                                      set status_count = status_count + 1
                                      /* create an occurrence of the reply status record if the original occurrence 
                                      previously used */
                                      if (status_count > 1)
                                           set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                      endif
                                      set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                       "Unable to inactivate special testing"
                                    endif
                                    go to Exit_script
                                endif
                              endif ;(request->review_queue_ind = 0)
                          endif
                            /*write new special testing record if not already written*/
                            /* write special testing result record */
 
                        endif
;013 end
               /***  product aborh   ***/
               elseif (request->orders[oidx]->assays[aidx]->product_aborh_verify_yn = "Y"
                        and request->orders[oidx]->assays[aidx]->bb_result_code_set_cd > 0)                 
                    ; 005 if (update_product_aborh( 0 ) = 0)
                    if (update_product_aborh( 0 ) = 1)                                                                      ; 005
                        set reply->orders[oidx]->assays[aidx]->new_abo_cd                                                   ; 005
                                = request->orders[oidx]->assays[aidx]->product_new_abo_cd                                   ; 005
                        set reply->orders[oidx]->assays[aidx]->new_rh_cd                                                    ; 005
                                = request->orders[oidx]->assays[aidx]->product_new_rh_cd                                    ; 005
                        set reply->orders[oidx]->assays[aidx]->new_aborh_updt_cnt                                           ; 005
                                = request->orders[oidx]->assays[aidx]->blood_product_updt_cnt + 1                           ; 005
                    else                                                                                                    ; 005
                      if (gsub_blood_product_status = "FL")       
                         set failed = "T"
                         set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                         if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                         endif
                         set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                         set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectName = "BLOOD_PRODUCT"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to lock blood_product"
                      elseif (gsub_blood_product_status = "FU")
                         set failed = "T"
                         set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                         if (status_count > 1)
                             set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                         endif
                         set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                         set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectName = "BLOOD_PRODUCT"
                         set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to update blood product"
                      endif
                      go to Exit_Script
                    endif

               /***   person_rh_phenotype ***/
               elseif (request->orders[oidx]->assays[aidx]->rh_phenotype_verify_yn = "Y"
               and request->orders[oidx]->assays[aidx]->nomenclature_id > 0)                 
                   if (request->orders[oidx]->assays[aidx]->upd_rh_phenotype_yn = "Y")
                       /* 
                        * Determine if existing person_rh_phenotype should be inactivated
                        */
                       if (request->orders[oidx]->assays[aidx]->rh_phenotype_id > 0)
                           /* 
                            * Inactivate existing person_rh_phenotype row
                            */
                           call CHG_PERSON_RH_PHENOTYPE
                              (
                               /* rh_phenotype_id  */ request->orders[oidx]->assays[aidx]->rh_phenotype_id
                               /* updt_cnt         */ , request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt
                               /* active_ind       */ , 0
                               /* active_status_cd */ , reqdata->inactive_status_cd
                              )

                           if (gsub_rh_phenotype_status = "FL")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT forupdate"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_phenotype"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Lock person_rh_phenotype row for update failed for person_rh_phenotype_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_id,32,2)
                                       , ", updt_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt)
                                       , ", order_id ="
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           elseif (gsub_rh_phenotype_status = "FU")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_phenotype"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Update into person_rh_phenotype failed person_rh_phenotype_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_id,32,2)
                                       , ", updt_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt)
                                       , ", order_id ="
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           elseif (gsub_rh_phenotype_status != "OK")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_phenotype"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Update into person_rh_phenotype failed. Invalid status ("
                                       , trim(gsub_rh_phenotype_status)
                                       , ") person_rh_phenotype_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_id,32,2)
                                       , ", updt_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt)
                                       , ", order_id ="
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           endif       ; endif gsub_rh_phenotype_status = "FL"

                           if (request->orders[oidx]->assays[aidx]->person_rh_pheno_rs_id > 0)
                               /* 
                                * Inactivate current person_rh_pheno_result row
                                */
                               call CHG_PERSON_RH_PHENO_RESULT
                                  (
                                   /* rh_phenotype_id  */ request->orders[oidx]->assays[aidx]->person_rh_pheno_rs_id
                                   /* updt_cnt         */ , request->orders[oidx]->assays[aidx]->person_rh_pheno_rs_updt_cnt
                                   /* active_ind       */ , 0
                                   /* active_status_cd */ , reqdata->inactive_status_cd
                                  )

                               if (gsub_rh_phenotype_status = "FL")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT forupdate"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName 
                                       = "person_rh_pheno_result"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Lock person_rh_pheno_result row for update failed for person_rh_pheno_rs_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->person_rh_pheno_rs_id,32,2)
                                           , ", updt_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt)
                                           , ", order_id ="
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               elseif (gsub_rh_phenotype_status = "FU")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName 
                                       = "person_rh_pheno_result"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Update into person_rh_pheno_result failed person_rh_pheno_rs_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->person_rh_pheno_rs_id,32,2)
                                           , ", updt_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt)
                                           , ", order_id ="
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               elseif (gsub_rh_phenotype_status != "OK")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName 
                                       = "person_rh_pheno_result"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Update into person_rh_pheno_result failed. Invalid status ("
                                           , trim(gsub_rh_phenotype_status)
                                           , ") person_rh_pheno_rs_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->person_rh_pheno_rs_id,32,2)
                                           , ", updt_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt)
                                           , ", order_id ="
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               endif       ; endif gsub_rh_phenotype_status = "FL"
                           endif                    

                           /*
                            * Inactivate existing antigens (person_antigen) for inactivated person_rh_phenotype
                            */
                           set rh_a_cnt = request->orders[oidx]->assays[aidx]->rh_antigen_cnt
                           for (rh_a = 1 to rh_a_cnt)
                               call CHG_PERSON_ANTIGEN_BY_KEY
                                  (                      
                                   /* person_antigen_id */ request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id
                                   /* updt_cnt          */ , request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->updt_cnt
                                   /* active_ind        */ , 0
                                   /* active_status_cd  */ , reqdata->inactive_status_cd
                                  )

                               if (gsub_rh_phenotype_status = "FL")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT forupdate"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_antigen"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Lock person_antigen row for update failed for person_antigen_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id,32,2)
                                           , ", updt_cnt = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->updt_cnt)
                                           , ", order_id = "
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               elseif (gsub_rh_phenotype_status = "FU")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_antigen"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Update into person_antigen failed for person_antigen_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id,32,2)
                                           , ", updt_cnt = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->updt_cnt)
                                           , ", order_id = "
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               elseif (gsub_rh_phenotype_status != "OK")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_antigen"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Update into person_antigen failed.  Invalid status ("
                                           , trim(gsub_rh_phenotype_status)
                                           , ") for person_antigen_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id,32,2)
                                           , ", updt_cnt = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->updt_cnt)
                                           , ", order_id = "
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               endif           ; endif gsub_rh_phenotype_status = "FL"
                           endfor
                       endif       ; endif rh_phenotype_id > 0

                       /* 
                        * Add current person_rh_phenotype
                        */
                       set gsub_rh_phenotype_status = "  "
                       call ADD_PERSON_RH_PHENOTYPE
                          (                          
                           /* person_id              */ request->orders[oidx]->person_id
                           /* nomenclature_id        */ , request->orders[oidx]->assays[aidx]->nomenclature_id
                           /* active_ind             */ , 1
                           /* active_status_cd       */ , reqdata->active_status_cd
                           /* active_status_dt_tm    */ , cnvtdatetime(curdate, curtime3)
                           /* active_status_prsnl_id */ , reqinfo->updt_id
                          )

                       if (gsub_rh_phenotype_status = "FZ")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("No rows exist on bb_rh_phenotype for resulted nomenclature_id for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2)
                                   , ".  Could not retrieve rh_phenotype_id")
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status = "FM")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("Multiple bb_rh_phenotype rows found for resulted nomenclature_id for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2)
                                   , ".  Could not retrieve rh_phenotype_id")
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status = "FF")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("CCL error.  Select failed on bb_rh_phenotype table "
                                   , "for resulted nomenclature_id for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2)
                                   , ".  Could not retrieve rh_phenotype_id")
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status = "FS")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("Could not insert person_rh_phenotype row--get next pathnet_seq"
                                   , " for id failed for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2))
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status = "FA")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("Insert person_rh_phenotype row failed for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2))
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status != "OK")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("Could not insert person_rh_phenotype row due to invalid insert status ("
                                   , trim(gsub_rh_phenotype_status)
                                   , ") for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2))
                           go to EXIT_SCRIPT
                       endif

                       /*
                        * Save new person_rh_phenotype_id
                        */
                       set new_person_rh_phenotype_id = new_rh_phenotype_id

                       /* 
                        * Retrieve antigens associated with nomenclature_id for resulted rh phenotype, using bb_rh_phenotype_id
                        * retrieved from rh_phenotype row for resulted nomenclature_id
                        */
                       set gsub_rh_phenotype_status = "  "
                       call GET_RH_PHENOTYPE_ANTIGENS(bb_rh_phenotype_id)
                       if (gsub_rh_phenotype_status != "OK")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("rh_phenotype select failed for nomenclature_id = "
                                   , cnvtstring(request->orders[oidx]->assays[aidx]->nomenclature_id,32,2)
                                   , ", for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2)
                                   , ".  No results added/updated.")
                           go to EXIT_SCRIPT
                       endif

                       /* 
                        * Add person_antigen rows for each associated antigen 
                        */
                           set rh_a_cnt = size(rh_a_rec->antigenlist, 5)

                       for (rh_a = 1 to rh_a_cnt)
                           set gsub_person_antigen_status = "  "
                           call ADD_PERSON_ANTIGEN
                               (                        
                                /* person_id              */ request->orders[oidx]->person_id
                                /* encntr_id              */ , request->orders[oidx]->encntr_id
                                /* antigen_cd             */ , rh_a_rec->antigenlist[rh_a]->antigen_cd
                                /* result_id              */ , reply->orders[oidx]->assays[aidx]->result_id  
                                /* bb_result_id           */ , 0
                                /* rh_phenotype_id        */ , new_person_rh_phenotype_id
                                /* active_ind             */ , 1
                                /* active_status_cd       */ , reqdata->active_status_cd
                                /* active_status_dt_tm    */ , cnvtdatetime(curdate, curtime3) 
                                /* active_status_prsnl_id */ , reqinfo->updt_id
                               )

                           if (gsub_person_antigen_status = "FS")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_antigen"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Could not insert person_antigen row--get next pathnet_seq for id failed "
                                       , "for order_id = "
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           elseif (gsub_person_antigen_status = "FA")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_antigen"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Insert person_antigen row failed for order_id = "
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           elseif (gsub_person_antigen_status != "OK")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_antigen"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Could not insert person_antigen row due to invalid insert status ("
                                       , trim(gsub_person_antigen_status)
                                       , ") for order_id = "
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           endif
                       endfor      ; endfor (rh_a = 1 to rh_a_cnt)
                   endif       ; endif (upd_rh_phenotype_yn = "Y")

                   /*
                    * Insert person_rh_pheno_result row
                    */
                   call ADD_PERSON_RH_PHENO_RESULT
                      (                          
                       /* person_id              */ request->orders[oidx]->person_id
                       /* encntr_id              */ , request->orders[oidx]->encntr_id
                       /* nomenclature_id        */ , request->orders[oidx]->assays[aidx]->nomenclature_id
                       /* person_rh_phenotype_id */ , new_person_rh_phenotype_id
                       /* result_id              */ , reply->orders[oidx]->assays[aidx]->result_id
                       /* active_ind             */ , 1
                       /* active_status_cd       */ , reqdata->active_status_cd
                       /* active_status_dt_tm    */ , cnvtdatetime(curdate, curtime3)
                       /* active_status_prsnl_id */ , reqinfo->updt_id
                      )

                   if (gsub_rh_phenotype_status = "FS")
                       set failed = "T"
                       set status_count = status_count + 1
                       if (status_count > 1)
                           set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                       endif
                       set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                       set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                       set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_pheno_result"
                       set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                           = concat("Could not insert person_rh_pheno_result row--get next pathnet_seq for id failed "
                               , "for order_id = "
                               , cnvtstring(request->orders[oidx]->order_id,32,2))
                       go to EXIT_SCRIPT
                   elseif (gsub_rh_phenotype_status = "FA")
                       set failed = "T"
                       set status_count = status_count + 1
                       if (status_count > 1)
                           set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                       endif
                       set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                       set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                       set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_pheno_result"
                       set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                           = concat("Insert person_rh_pheno_result row failed for order_id = "
                               , cnvtstring(request->orders[oidx]->order_id,32,2))
                       go to EXIT_SCRIPT
                   elseif (gsub_rh_phenotype_status != "OK")
                       set failed = "T"
                       set status_count = status_count + 1
                       if (status_count > 1)
                           set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                       endif
                       set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                       set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                       set reply->status_data->subeventstatus[status_count]->TargetObjectName = "person_rh_pheno_result"
                       set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                           = concat("Could not insert person_rh_pheno_result row due to invalid insert status ("
                               , trim(gsub_rh_phenotype_status)
                               , ") for order_id = "
                               , cnvtstring(request->orders[oidx]->order_id,32,2))
                       go to EXIT_SCRIPT
                   endif       ; endif gsub_rh_phenotype_status = "FS"


               /***   product_rh_phenotype ***/
               elseif (request->orders[oidx]->assays[aidx]->product_rh_phenotype_verify_yn = "Y"
               and request->orders[oidx]->assays[aidx]->nomenclature_id > 0)                 
                   set new_special_testing_id = 0.0
                   set gsub_special_testing_status = "  "
                   set gsub_inactive_spcl_tst_status = "  "
                   set gsub_spc_tst_result_status = "  "
                   set gsub_inactive_spc_tst_rsl_status = "  "
                   if (request->orders[oidx]->assays[aidx]->upd_rh_phenotype_yn = "Y")
                       /* 
                        * Determine if existing product_rh_phenotype should be inactivated
                        */
                       if (request->orders[oidx]->assays[aidx]->rh_phenotype_id > 0)
                           /* 
                            * Inactivate existing product_rh_phenotype row
                            */
                           call CHG_PRODUCT_RH_PHENOTYPE
                              (
                               /* rh_phenotype_id  */ request->orders[oidx]->assays[aidx]->rh_phenotype_id
                               /* updt_cnt         */ , request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt
                               /* active_ind       */ , 0
                               /* active_status_cd */ , reqdata->inactive_status_cd
                              )

                           if (gsub_rh_phenotype_status = "FL")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT forupdate"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "product_rh_phenotype"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Lock product_rh_phenotype row for update failed for product_rh_phenotype_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_id,32,2)
                                       , ", updt_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt)
                                       , ", order_id ="
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           elseif (gsub_rh_phenotype_status = "FU")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "product_rh_phenotype"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Update into product_rh_phenotype failed product_rh_phenotype_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_id,32,2)
                                       , ", updt_id = "
                                       , cnvtstring(request->orders[oidx]->assays[aidx]->rh_phenotype_updt_cnt)
                                       , ", order_id ="
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           endif       ; endif gsub_rh_phenotype_status = "FL"

                           /*
                            * Inactivate existing antigens (special_testing rows) for inactivated product_rh_phenotype
                            */
                           set rh_a_cnt = request->orders[oidx]->assays[aidx]->rh_antigen_cnt
                           for (rh_a = 1 to rh_a_cnt)
                               call CHG_SPECIAL_TESTING_BY_KEY
                                  (                      
                                   /* special_testing_id */ request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id
                                   /* updt_cnt          */ , request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->updt_cnt
                                   /* active_ind        */ , 0
                                   /* active_status_cd  */ , reqdata->inactive_status_cd
                                  )

                               if (gsub_rh_phenotype_status = "FL")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT forupdate"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName = "special_testing"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Lock special_testing row for update failed for special_testing_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id,32,2)
                                           , ", updt_cnt = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->updt_cnt)
                                           , ", order_id = "
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               elseif (gsub_rh_phenotype_status = "FU")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName = "special_testing"     
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Update into special_testing failed for special_testing_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id,32,2)
                                           , ", updt_cnt = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->updt_cnt)
                                           , ", order_id = "
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               elseif (gsub_rh_phenotype_status != "OK")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName = "special_testing"     
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Update into special_testing failed.  Invalid file status ("
                                           , trim(gsub_rh_phenotype_status)
                                           , ") for special_testing_id = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id,32,2)
                                           , ", updt_cnt = "
                                           , cnvtstring(request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->updt_cnt)
                                           , ", order_id = "
                                           , cnvtstring(request->orders[oidx]->order_id,32,2))
                                   go to EXIT_SCRIPT
                               endif           ; endif gsub_rh_phenotype_status = "FL"

                              call CHG_SPECIAL_TESTING_RESULT
                              (
                               /* special_testing_id     */ request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->table_id
                               /* product_id             */ , request->orders[oidx]->person_id
                               /* result_id              */ , reply->orders[oidx].assays[aidx].result_id
                               /* bb_result_id           */ , 0.0
                               /* active_ind             */ , 0
                               /* active_status_cd       */ , reqdata->inactive_status_cd
                               /* updt_cnt               */ 
                                    , request->orders[oidx]->assays[aidx]->rh_antigenlist[rh_a]->spcl_tst_rsl_updt_cnt
                               /* lock_forupdate_ind     */ , 1
                               /* special_testing_cd     */ , 0.0 
                               /* spcl_tst_updt_cnt      */ , 0
                              )
                               if (gsub_inactive_spc_tst_rsl_status != "OK")
                                  if (gsub_inactive_spcl_tst_status = "FL")
                                     set failed = "T"
                                     set status_count = status_count + 1
                                     if (status_count > 1)
                                        set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                     endif
                                     set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                                     set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                     set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                     set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                          "Unable to lock special_testing for update"
                                  elseif (gsub_inactive_spcl_tst_status = "FU")
                                     set failed = "T"
                                     set status_count = status_count + 1
                                     if (status_count > 1)
                                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                     endif
                                     set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                                     set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                     set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                     set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                      "Unable to inactivate special testing"
                                  else
                                     set failed = "T"
                                     set status_count = status_count + 1
                                     if (status_count > 1)
                                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                     endif
                                     set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                                     set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                     set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                     set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                         concat("Unable to inactivate special testing--Invalid status: "
                                             , trim(gsub_inactive_spcl_tst_status))
                                 endif
                                 go to Exit_script
                              endif
                           endfor
                       endif       ; endif rh_phenotype_id > 0
                       
                      /*
                      * Retrieve antigens associated with nomenclature_id. 
                      */                  
                      /* need to keep this variable gsub_bbd_rh_phenotype_status 
                      since it is required by BBD_GET_RH_PHENOTYPE_ANTIGENS subroutine */
                      set gsub_bbd_rh_phenotype_status  = "  "
                      /* free record rh_a_rec */
                      set rh_a_cnt = size(rh_a_rec->antigenlist, 5)
                      if (rh_a_cnt > 0)
                          for (rh_a = 1 to rh_a_cnt)
                              set rh_a_rec->antigenlist[rh_a].antigen_cd        = 0.0
                              set rh_a_rec->antigenlist[rh_a].opposite_cd       = 0.0
                          endfor
                          set stat = alterlist(rh_a_rec->antigenlist, 0)
                      endif
  
                      call BBD_GET_RH_PHENOTYPE_ANTIGENS(request->orders[oidx].assays[aidx].nomenclature_id)
                      if (gsub_bbd_rh_phenotype_status != "OK")
                          set failed = "T"
                          set status_count = status_count + 1
                          if (status_count > 1)
                              set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                          endif
                          set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                          set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                          set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_rh_phenotype"
                          set reply->status_data->subeventstatus[status_count]->TargetObjectValue
                              = concat("rh_phenotype select failed for nomenclature_id = "
                                  , cnvtstring(request->orders[oidx]->assays[aidx]->nomenclature_id,32,2)
                                  , ", for order_id = "
                                  , cnvtstring(request->orders[oidx]->order_id,32,2)
                                  , ".  No results added/updated.")
                          go to EXIT_SCRIPT
                      endif
                
                      /*  get opposite code  */
                      set rh_cnt = 0
                      set rh_a_cnt = size(rh_a_rec->antigenlist, 5)
             
                      select into "nl:"
                      from 
                           code_value cv,
                           code_value_extension cve,
                           (dummyt d with seq = value(rh_a_cnt))
                      plan d
                      join cv  where cv.code_value = rh_a_rec->antigenlist[d.seq].antigen_cd 
                                 and cv.code_set = SPECIAL_TESTING_CODE_SET  
                                 and (cv.cdf_meaning = "-"
                                    or cv.cdf_meaning = "+") 
                                 and cv.active_ind = 1
                      join cve where cve.code_value = cv.code_value  
                               and cve.field_name = "Opposite"
                      head cve.code_value
                         rh_cnt = rh_cnt + 1
                      detail
                            rh_a_rec->antigenlist[rh_cnt].opposite_cd = cnvtreal(cve.field_value)
                      with nocounter  
                    
                      if (rh_a_cnt != rh_cnt)
                          set failed = "T"
                          set status_count = status_count + 1
                          if (status_count > 1)
                              set stat = alterlist(reply->status_data.subeventstatus, status_count+1)
                          endif
                          set reply->status_data.subeventstatus[status_count].OperationName = "SELECT"
                          set reply->status_data.subeventstatus[status_count].OperationStatus = "F"
                          set reply->status_data.subeventstatus[status_count].TargetObjectName = "code_value_extension"
                          set reply->status_data.subeventstatus[status_count].TargetObjectValue 
                              = "Could not load opposites or posting rh phenotype.  No results added/updated."
                          go to EXIT_SCRIPT
                      endif
                      /*
                      for (rh_cnt = 1 to rh_a_cnt)
                          call echo(build("antigen_cd: ", rh_a_rec->antigenlist[rh_cnt].antigen_cd))
                          call echo(build("opposite_cd: ", rh_a_rec->antigenlist[rh_cnt].opposite_cd))
                      endfor
                      */                
                      /* check if opposite antigen exists on the product */  
                     if (request->orders[oidx]->assays[aidx]->product_rh_phenotype_verify_yn = "Y")
                          set sub_product_id = request->orders[oidx]->person_id
                      else
                          set sub_product_id = request->orders[oidx]->assays[aidx]->product_id
                      endif
                       
                      set opposite_found_ind = 0
                      select into "nl:"
                      from
                          special_testing st
                          , (dummyt d with seq = value(rh_a_cnt))
                     
                      plan d  where rh_a_rec->antigenlist[d.seq].opposite_cd > 0.0
                      join st where st.product_id         = sub_product_id
                                and st.special_testing_cd = rh_a_rec->antigenlist[d.seq].opposite_cd
                                and st.active_ind         = 1
                      detail
                          opposite_found_ind = 1
                      with nocounter
                     
                      if (opposite_found_ind = 1)
                          set reply->opposite_found_product_id = sub_product_id
                          set reply->opposite_found_order_id = request->orders[oidx]->order_id
                          set reply->opposite_found_assay_id = request->orders[oidx]->assays[aidx]->task_assay_cd
                          set reply->opposite_found_prfrm_rslt_key = request->orders[oidx].assays[aidx]->perform_result_key
                          set failed = "T"
                          /* create an occurrence of the reply status record if the original occurrence previously used */
                          set reply->status_data->status = "Z"
                          set status_count = status_count + 1
                          if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                          endif
                          set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                          set reply->status_data->subeventstatus[status_count]->OperationStatus = "Z"
                          set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                          set reply->status_data->subeventstatus[status_count]->TargetObjectValue
                              = "Unable to insert special testing because opposite already exists on product."
                          go to exit_script
                      endif     

                       /* 
                        * Add current product_rh_phenotype
                        */
                       set gsub_rh_phenotype_status = "  "
                       call ADD_PRODUCT_RH_PHENOTYPE
                          (                          

                            /* product_id             */ request->orders[oidx]->person_id
                            /* nomenclature_id        */ , request->orders[oidx]->assays[aidx]->nomenclature_id
                            /* active_ind             */ , 1
                            /* active_status_cd       */ , reqdata->active_status_cd
                            /* active_status_dt_tm    */ , cnvtdatetime(curdate, curtime3)
                            /* active_status_prsnl_id */ , reqinfo->updt_id
                          )

                       if (gsub_rh_phenotype_status = "FZ")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("No rows exist on bb_rh_phenotype for resulted nomenclature_id for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2)
                                   , ".  Could not retrieve rh_phenotype_id")
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status = "FM")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("Multiple bb_rh_phenotype rows found for resulted nomenclature_id for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2)
                                   , ".  Could not retrieve rh_phenotype_id")
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status = "FF")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("CCL error.  Select failed on bb_rh_phenotype table "
                                   , "for resulted nomenclature_id for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2)
                                   , ".  Could not retrieve rh_phenotype_id")
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status = "FS")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "product_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("Could not insert product_rh_phenotype row--get next pathnet_seq"
                                   , "for id failed for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2))
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status = "FA")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "product_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("Insert product_rh_phenotype row failed for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2))
                           go to EXIT_SCRIPT
                       elseif (gsub_rh_phenotype_status != "OK")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "product_rh_phenotype"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("Could not insert product_rh_phenotype row due to invalid insert status ("
                                   , trim(gsub_rh_phenotype_status)
                                   , ") for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2))
                           go to EXIT_SCRIPT
                       endif

                       /*
                        * Save new product_rh_phenotype_id
                        */
                       set new_product_rh_phenotype_id = new_rh_phenotype_id

                       /* 
                        * Retrieve antigens associated with nomenclature_id for resulted rh phenotype, using bb_rh_phenotype_id
                        * retrieved from bb_rh_phenotype row for resulted nomenclature_id
                        */
                       set gsub_rh_phenotype_status = "  "
                       call GET_RH_PHENOTYPE_ANTIGENS(bb_rh_phenotype_id)
                       if (gsub_rh_phenotype_status != "OK")
                           set failed = "T"
                           set status_count = status_count + 1
                           if (status_count > 1)
                               set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                           endif
                           set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                           set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                           set reply->status_data->subeventstatus[status_count]->TargetObjectName = "product_rh_phenotype"

                           set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                               = concat("rh_phenotype select failed for nomenclature_id = "
                                   , cnvtstring(request->orders[oidx]->assays[aidx]->nomenclature_id,32,2)
                                   , ", for order_id = "
                                   , cnvtstring(request->orders[oidx]->order_id,32,2)
                                   , ".  No results added/updated.")
                           go to EXIT_SCRIPT
                       endif

                       /* 
                        * Add special_testing rows for each associated antigen 
                        */
                       set rh_a_cnt = size(rh_a_rec->antigenlist, 5)

                       for (rh_a = 1 to rh_a_cnt)
                           set gsub_special_testing_status = "  "
                           set new_special_testing_id = 0.0
                           call ADD_SPECIAL_TESTING
                               (                        
                                /* product_id              */ request->orders[oidx]->person_id
                                /* special_testing_cd      */ , rh_a_rec->antigenlist[rh_a]->antigen_cd
                                /* confirmed_ind           */ , 1
                                /* product_rh_phenotype_id */ , new_product_rh_phenotype_id
                                /* active_ind              */ , 1
                                /* active_status_cd        */ , reqdata->active_status_cd
                                /* active_status_dt_tm     */ , cnvtdatetime(curdate, curtime3) 
                                /* active_status_prsnl_id  */ , reqinfo->updt_id
                                /* check_for_duplicates_yn */ , "N"
                               )

                           if (gsub_special_testing_status = "FS")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "special_testing"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Could not insert special_testing row--get next pathnet_seq for id failed "
                                       , "for order_id = "
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           elseif (gsub_special_testing_status = "FA")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "special_testing"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Insert special_testing row failed for order_id = "
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           elseif (gsub_special_testing_status != "OK")
                               set failed = "T"
                               set status_count = status_count + 1
                               if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                               endif
                               set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "special_testing"
                               set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                   = concat("Could not insert special_testing row due to invalid insert status ("
                                       , trim(gsub_special_testing_status)
                                       , ") for order_id = "
                                       , cnvtstring(request->orders[oidx]->order_id,32,2))
                               go to EXIT_SCRIPT
                           endif

                           call ADD_SPECIAL_TESTING_RESULT
                               (
                                /* special_testing_id     */ new_special_testing_id
                                /* product_id             */ , request->orders[oidx].person_id
                                /* result_id              */ , reply->orders[oidx].assays[aidx].result_id
                                /* bb_result_id           */ , bb_result_seq
                                /* active_ind             */ , 1
                                /* active_status_cd       */ , reqdata->active_status_cd
                                /* active_status_dt_tm    */ , cnvtdatetime(current->system_dt_tm)
                                /* active_status_prsnl_id */ , request->event_personnel_id
                               )
                           if (gsub_spc_tst_result_status != "OK")
                               if (gsub_spc_tst_result_status = "FA")
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName 
                                        = "Special Testing Result"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Insert special_testing_result row failed for order_id = "
                                           , cnvtstring(request->orders[oidx]->order_id,32,2)
                                           , ", product_id = "
                                           , cnvtstring(request->orders[oidx]->person_id,32,2))
                                   set failed = "T"
                                   set status_count = status_count + 1
                                   if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                   endif
                               else
                                   set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectName 
                                        = "Special Testing Result"
                                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                       = concat("Insert special_testing_result row failed for order_id = "
                                           , cnvtstring(request->orders[oidx]->order_id,32,2)
                                           , ", product_id = "
                                           , cnvtstring(request->orders[oidx]->person_id,32,2))
                               endif
                               go to Exit_script
                           endif
                       endfor      ; endfor (rh_a = 1 to rh_a_cnt)
                   endif       ; endif upd_rh_phenotype_yn = "Y"
               endif  /* endif for checking what to update */
            endif
               
  
               ;ADD EXCEPTIONS, IF ANY
            if (request->review_queue_ind = 0)
              ;Calling from result entry
               set nbr_of_excepts = request->orders[oidx]->assays[aidx].except_cnt
               set cntr = 0
               if (nbr_of_excepts > 0) 
                  for (cntr = 1 to nbr_of_excepts)
                     set exception_status = "I"
                     set bb_exception_id = 0.0
                     set temp_person_id = 0.0
                     set excep_prod_event_id = product_event_id
                     set excep_prod_event_type_cd = re_event_type_cd
                     if (request->orders[oidx].patient_order_ind = 1)
                     	set temp_person_id = request->orders[oidx].person_id
                     	if (temp_person_id > 0 and request->orders[oidx]->assays[aidx]->exceptlist[cntr].exception_type_mean = "INCXM"
                     	    and request->orders[oidx]->assays[aidx]->crossmatch_verify_yn = "N")
						   ;retrieve the crossmatch product event id if the product is already crossmatched.
						   select into "nl:"				               
				           from product_event pe
				           where request->orders[oidx]->assays[aidx].product_id > 0 and
				                 pe.product_id = request->orders[oidx]->assays[aidx].product_id and
				                 pe.person_id = temp_person_id and
				                 pe.event_type_cd = crossmatch_cd and
				                 pe.active_ind = 1
				           detail
				                excep_prod_event_id = pe.product_event_id
				           with nocounter
				           set excep_prod_event_type_cd = crossmatch_cd
						endif						
                     endif

                    ;If the result is CORR-INREVIEW status, add to bb_exception table with active_ind = 0
                    if (request->orders[oidx].assays[aidx].result_status_cd != result_status_corr_in_review_cd)
                     call Add_bb_Exception
                       ( temp_person_id,
                         request->orders[oidx].order_id,
                         request->event_personnel_id,
                         cnvtdatetime(request->event_dt_tm),
                         excep_prod_event_id,
                         request->orders[oidx]->assays[aidx]->exceptlist[cntr].exception_type_mean,
                         request->orders[oidx]->assays[aidx]->exceptlist[cntr].override_reason_cd,
                         excep_prod_event_type_cd,
                         result_seq,
                         perf_result_seq,
                         request->orders[oidx]->assays[aidx]->exceptlist[cntr].from_abo_cd,
                         request->orders[oidx]->assays[aidx]->exceptlist[cntr].from_rh_cd,
                         request->orders[oidx]->assays[aidx]->exceptlist[cntr].to_abo_cd,
                         request->orders[oidx]->assays[aidx]->exceptlist[cntr].to_rh_cd,
                         cnvtdatetime(request->orders[oidx]->assays[aidx].specimen_expire_dt_tm)
                       )
                     if (exception_status = "F")
                        set failed = "T"
                        set status_count = status_count + 1
                        /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "BB EXCEPTION"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                        "Unable to insert exception"
                        go to Exit_Script
                     endif

                     set nbr_of_treqs = request->orders[oidx]->assays[aidx]->exceptlist[cntr].req_cnt
                     if (nbr_of_treqs > 0)
                        set treq_idx = 0 
                        for (treq_idx = 1 to nbr_of_treqs)
                            call ADD_REQS_EXCEPTION
                                (request->orders[oidx]->assays[aidx]->exceptlist[cntr].req_list[treq_idx].special_testing_cd, 
                                 request->orders[oidx]->assays[aidx]->exceptlist[cntr].req_list[treq_idx].requirement_cd
                                )
                          if (exception_status = "F")
                              set failed = "T"
                              set status_count = status_count + 1
                              /* create an occurrence of the reply status record if the original occurrence previously used */
                              if (status_count > 1)
                                  set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                              endif
                              set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                              set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                              set reply->status_data->subeventstatus[status_count]->TargetObjectName = "BB REQS EXCEPTION"
                              set reply->status_data->subeventstatus[status_count]->TargetObjectValue = "Unable to ins req except"
                              go to EXIT_SCRIPT
                          endif
                        endfor
                     endif
                     
                     set nbr_of_auto_dirs = 0
                     set nbr_of_auto_dirs = request->orders[oidx]->assays[aidx]->exceptlist[cntr].auto_dir_cnt  
                     if (nbr_of_auto_dirs > 0)
                         set auto_dir_idx = 0
                         for (auto_dir_idx = 1 to nbr_of_auto_dirs)
                             call Add_Autodir_Reqs_Exception
                                (
                                 request->orders[oidx].assays[aidx].exceptlist[cntr].auto_dir_list[auto_dir_idx].product_id 
                                )
                             if (exception_status = "F")
                                 set failed = "T"
                                 set status_count = status_count + 1
                                 /* create an occurrence of the reply status record if the original occurrence previously used */
                                 if (status_count > 1)
                                     set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                 endif
                                 set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                                 set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                 set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bb_autodir_exception"
                                 set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                                    = "Unable to ins AUTO DIR except"
                                 go to EXIT_SCRIPT
                             endif
                         endfor
                     endif
                     
                    else  ;(request->orders[oidx].assays[aidx].result_status_cd != result_status_corr_in_review_cd)
                      call ADD_BB_INACTIVE_EXCEPTION
                       (
                        temp_person_id,
                        request->orders[oidx].order_id,
                        request->event_personnel_id,
                        cnvtdatetime(request->event_dt_tm), 
                        excep_prod_event_id,
                        request->orders[oidx]->assays[aidx]->exceptlist[cntr].exception_type_mean,
                        request->orders[oidx]->assays[aidx]->exceptlist[cntr].override_reason_cd,
                        excep_prod_event_type_cd,
                        request->orders[oidx].assays[aidx].result_id,
                        perf_result_seq,
                        request->orders[oidx]->assays[aidx]->exceptlist[cntr].from_abo_cd,
                        request->orders[oidx]->assays[aidx]->exceptlist[cntr].from_rh_cd,
                        request->orders[oidx]->assays[aidx]->exceptlist[cntr].to_abo_cd,
                        request->orders[oidx]->assays[aidx]->exceptlist[cntr].to_rh_cd,
                        cnvtdatetime(request->orders[oidx]->assays[aidx].specimen_expire_dt_tm)
                       )

                    if (exception_status = "F")
                        set failed = "T"
                        set status_count = status_count + 1
                        /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "BB EXCEPTION"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue = "Unable to insert exception"
                        go to EXIT_SCRIPT
                    elseif (exception_status = "FU")
                        set failed = "T"
                        set status_count = status_count + 1
                        /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "UAR"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "BB EXCEPTION"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue ="Unable to get exception_type_cd"
                        go to EXIT_SCRIPT
                    endif           
                    
                    endif ;(request->orders[oidx].assays[aidx].result_status_cd != result_status_corr_in_review_cd)
                  endfor
               endif
            elseif (request->review_queue_ind = 1)  
               ;Calling from review queue.           
               set nbr_of_excepts = request->orders[oidx]->assays[aidx].except_cnt
               set cntr = 0
               if (nbr_of_excepts > 0) 
                  for (cntr = 1 to nbr_of_excepts)
                     set exception_status = "I"
                     set bb_exception_id = 0.0
                    ;Activate the exception
                     call Activate_bb_Exception
                       ( 
                         request->orders[oidx]->assays[aidx]->exceptlist[cntr].exception_id,
                         request->orders[oidx]->assays[aidx]->exceptlist[cntr].updt_cnt
                        )
                     if (exception_status = "FL")
                        set failed = "T"
                        set status_count = status_count + 1
                        /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "Lock"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "BB EXCEPTION"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                        "Unable to lock exception"
                        go to Exit_Script
                     elseif (exception_status = "F")
                        set failed = "T"
                        set status_count = status_count + 1
                        /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "Update"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "BB EXCEPTION"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                        "Unable to update exception"
                        go to Exit_Script
                     endif
                  endfor
               endif
            endif   ;if (request->review_queue_ind = 0)
               
               

               ;call subroutine to write pn_recovery rows                        ;015
               if (request->orders[oidx].assays[aidx].result_status_cd in        ;015
                                               (result_status_verified_cd,       ;026
                                               result_status_corrected_cd)       ;015
                and (reply->pn_recovery_ind = 1)
                and (request->orders[oidx].patient_order_ind = 1))               ;015
                 if (insert_pn_recovery_data ( 0 ) = 0)                          ;015
                   go to Exit_Script                                             ;015
                 endif                                                           ;015
               endif                                                             ;015
 
            endfor  ;End for aidx
         endfor; End for oidx
 
/*write new special testing record and new special_testing_result if not already written*/
         for (oidx = 1 to nbr_of_orders)
            set nbr_of_assays = request->orders[oidx].assays_cnt                    
            set stat = alterlist(reply->orders[oidx].assays, nbr_of_assays)
 
            for (aidx = 1 to nbr_of_assays)
            	if (request->orders[oidx]->assays[aidx]->special_testing_verify_yn = "Y"
                    and request->orders[oidx]->assays[aidx]->bb_result_code_set_cd > 0)
 
                       set orig_special_testing_id = 0.0
                       set new_special_testing_id = 0.0
                       set gsub_special_testing_status = "  "
                       set gsub_inactive_spcl_tst_status = "  "
                       set gsub_spc_tst_result_status = "  "
                       set gsub_inactive_spc_tst_rsl_status = "  "
                       set sub_product_id = 0.0
                       if (request->orders[oidx]->assays[aidx]->product_test_special_test_yn = "Y")
                           set sub_product_id = request->orders[oidx]->person_id
                       else
                           set sub_product_id = request->orders[oidx]->assays[aidx]->product_id
                       endif
                       if (request->orders[oidx]->assays[aidx]->bb_result_id > 0)
                  	   		set bb_result_seq = request->orders[oidx]->assays[aidx]->bb_result_id
		               else
        			        set bb_result_seq = 0.0
		               endif
                         /* write special testing record */
					   set opposite_found_ind = 0
 
                        select into "nl:"
                            st.product_id
                            , st.special_testing_cd
                            , st.active_ind
                            , str.result_id
                            , cv.code_value
                            , cv.code_set
                            , cv.cdf_meaning
                            , cve.code_set
                            , cve.code_value
                            , cve.field_name
                            , cve.field_value
 
                        from
                            special_testing st
                            , special_testing_result str
                            , code_value cv
                            , code_value_extension cve
 
                        plan st where st.product_id = sub_product_id
                                  and st.active_ind = 1
 
                        join cv where cv.code_set = 1612
                                  and cv.code_value = st.special_testing_cd
                                  and (cv.cdf_meaning = "-"
                                      or cv.cdf_meaning = "+")
 
                        join cve where cve.code_set = cv.code_set
                                   and cve.code_value = cv.code_value
                                   and cve.field_name = "Opposite"
 
                        join str where outerjoin(st.special_testing_id) = str.special_testing_id
 
                        head report
                            found_ind = 0
 
                        detail
                            if (cnvtreal(cve.field_value) = request->orders[oidx]->assays[aidx]->bb_result_code_set_cd)
                                if (reply->orders[oidx].assays[aidx].result_id != str.result_id)
                                  found_ind = 1
                                endif
                            endif
 
                        foot report
                            opposite_found_ind = found_ind
 
                        with nocounter
                        if (opposite_found_ind = 1)
                            set reply->opposite_found_product_id = sub_product_id
                            set reply->opposite_found_person_id = request->orders[oidx]->person_id                            
                            set reply->opposite_found_order_id = request->orders[oidx]->order_id
                            set reply->opposite_found_assay_id = request->orders[oidx]->assays[aidx]->task_assay_cd
                            set reply->opposite_found_prfrm_rslt_key = request->orders[oidx].assays[aidx].perform_result_key
                            set failed = "T"
                            set reply->status_data->status = "Z"
                            set status_count = status_count + 1
                            /* create an occurrence of the reply status record if the original occurrence previously used */
                            if (status_count > 1)
                                 set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                            endif
                            set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                            set reply->status_data->subeventstatus[status_count]->OperationStatus = "Z"
                            set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                            set reply->status_data->subeventstatus[status_count]->TargetObjectValue
                                = "Unable to insert special testing because opposite already exists on product."
                            go to exit_script
 
                        else
                           call ADD_SPECIAL_TESTING
                           (
                            /* product_id             */ sub_product_id,
                            /* special_testing_cd     */ request->orders[oidx]->assays[aidx]->bb_result_code_set_cd,
                            /* confirmed_ind          */ 1,
                            /* rh_phenotype_id        */ 0.0,
                            /* active_ind             */ 1,
                            /* active_status_cd       */ reqdata->active_status_cd,
                            /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
                            /* active_status_prsnl_id */ request->event_personnel_id,
                            /* check_for_duplicate_yn */ "Y"
                            )
                            if (gsub_special_testing_status != "OK")
                               if (gsub_special_testing_status = "FS")
                                  set failed = "T"
                                  set status_count = status_count + 1
                                  /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                      set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue =
                                              "Unable to insert special testing due to special testing id"
                               elseif (gsub_special_testing_status = "FA")
                                  set failed = "T"
                                  set status_count = status_count + 1
                                  /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                     set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special_testing"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue =
                                                                   "Unable to insert special testing"
                               elseif (gsub_special_testing_status = "FL")
                                  set failed = "T"
                                  set status_count = status_count + 1
                                  /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                      set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "LOCK"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue =
                                                   "Unable to lock special testing for update"
                               elseif (gsub_special_testing_status = "FU")
                                  set failed = "T"
                                  set status_count = status_count + 1
                                  /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Special Testing"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue =
                                                                   "Unable to mark confirmed on Special Testing"
                                endif
                                go to Exit_script
                            endif
                        /* write special testing result record */
                           call ADD_SPECIAL_TESTING_RESULT
                           (
                            /* special_testing_id     */ new_special_testing_id,
                            /* product_id             */ sub_product_id,
                            /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                            /* bb_result_id           */ bb_result_seq,
                            /* active_ind             */ 1,
                            /* active_status_cd       */ reqdata->active_status_cd,
                            /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
                            /* active_status_prsnl_id */ request->event_personnel_id
                            )
                            if (gsub_spc_tst_result_status != "OK")
                               if (gsub_spc_tst_result_status = "FA")
                                  set failed = "T"
                                  set status_count = status_count + 1
                                  /* create an occurrence of the reply status record if the original occurrence previously used */
                                  if (status_count > 1)
                                     set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                  endif
                                  set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectName =
                                        "Special Testing Result"
                                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue =
                                                                   "Unable to insert special Testing Result"
                               endif
                               go to Exit_script
                            endif
                        endif
                endif
            endfor
         endfor
         set order_update_complete = "Y"
      set reply->status_data.status = "S"

      go to EXIT_SCRIPT


      /***********************************************************************
      * Process an updated result subroutine                                 *
      ***********************************************************************/

         declare process_updated_result( ) = i4

         subroutine process_updated_result( null )
            set result_seq = request->orders[oidx].assays[aidx].result_id

            /* update result status to corrected */
            if (update_result( result_seq ) = 0)
               return(0)
            endif

            set reply->orders[oidx].assays[aidx].result_id = result_seq
            set reply->orders[oidx].assays[aidx].result_updt_cnt = 
                request->orders[oidx].assays[aidx].result_updt_cnt + 1

            set perf_result_seq = request->orders[oidx].assays[aidx].perform_result_id

            ; insert images
            if (request->orders[oidx]->assays[aidx]->image_cnt > 0)
               if (insert_images(0) = 0)
                  return(0)
               endif
            endif


            /********************************************************/
            /* Determine if result is being reperformed by checking */
            /* the current result status on the perform_result      */
            /* record.  If so, update the status to "old perform"   */
            /* and write new perform_result record.                 */
            /* ex: rewrite old perform result with status of        */
            /* "old performed" and write new perform result with    */
            /* status of "performed"  This method helps to find the */
            /* current result since result will have "performed" as */
            /* its results status too.                              */
            /********************************************************/
            if (read_perform_result( result_seq, perf_result_seq ) = 0)
                set failed = "T"
                set status_count = status_count + 1
                /* create an occurrence of the reply status record if the original occurrence previously used */
                if (status_count > 1)
                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                endif
                set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT"
                set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                set reply->status_data->subeventstatus[status_count]->TargetObjectName = 
                                                                              "Perform Result"
                set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                      "Unable to retrieve perform result"
                return(0)
            endif

            if (curr_result_status_cd = result_status_verified_cd)
               if (update_perform_result(result_seq, perf_result_seq, result_status_old_verf_cd ) =0) 
                    return(0)
               endif
            elseif (curr_result_status_cd = result_status_corrected_cd)
               if (update_perform_result(result_seq, perf_result_seq, result_status_old_corr_cd ) =0) 
                    return(0)
               endif
            elseif (curr_result_status_cd = result_status_corr_in_review_cd)
               if (update_perform_result(result_seq, perf_result_seq, result_status_old_corr_in_rev_cd ) =0)
                  return(0)
               endif
            endif
                     
            /********************************************/
            /* Write new perform_result record with new */
            /* result status                            */
            /********************************************/
            set parent_perf_result_id = perf_result_seq
            if (insert_perform_result( result_seq, 
                                      parent_perf_result_id ) = 0)
              set failed = "T"
              set status_count = status_count + 1
              /* create an occurrence of the reply status record if the original occurrence previously used */
              if (status_count > 1)
                  set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
              endif
              set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
              set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
              set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Perform Result"
              set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                "Unable to insert perform result"
              return(0)
            endif
            set reply->orders[oidx].assays[aidx].perform_result_id = perf_result_seq
            set reply->orders[oidx].assays[aidx].parent_perform_result_id = parent_perf_result_id
            set reply->orders[oidx].assays[aidx].perform_result_updt_cnt = 0  

            /*********************************/
            /* If result comments exists,    */
            /* insert new result comment */
            /*********************************/
            set nbr_of_result_comments = 
                   request->orders[oidx].assays[aidx].result_comment_cnt
            if (nbr_of_result_comments > 0
                and request->orders[oidx].assays[aidx].result_status_cd
                                             in (result_status_verified_cd,
                                                 result_status_corr_in_review_cd,
                                                 result_status_corrected_cd))
                 for (rcidx = 1 to nbr_of_result_comments)
                    if (insert_result_comment( result_seq ) = 0)
                       return(0)
                    endif
                 endfor
            endif

            if (insert_result_event( result_seq, perf_result_seq ) = 0)
               set failed = "T"
               set status_count = status_count + 1
               /* create an occurrence of the reply status record if the original occurrence previously used */
               if (status_count > 1)
                  set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
               endif
               set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Result Event"
               set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                   "Unable to insert result event"
               return(0)
            endif
            return(1)
         end

      /***********************************************************************
      * Update result subroutine                                             *
      ***********************************************************************/
         declare update_result( arg_result_id ) = i4
         subroutine update_result( arg_result_id )
            set return_value = 0
            set cur_updt_cnt = 0 
            /* lock row */
            select into "nl:"
                  r.*
            from result r
                 where r.result_id = result_seq
            detail
                 cur_updt_cnt = r.updt_cnt
            with nocounter, forupdate(r)

            if (curqual = 0)
               set failed = "T"
               set status_count = status_count + 1
               /* create an occurrence of the reply status record if the original occurrence previously used */
               if (status_count > 1)
                  set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
               endif
               set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Result"
               set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                              "Unable to lock result"
               set return_value = 0
            elseif (cur_updt_cnt != request->orders[oidx].assays[aidx].result_updt_cnt)
               set failed = "T"
               set status_count = status_count + 1
               /* create an occurrence of the reply status record if the original occurrence previously used */
               if (status_count > 1)
                  set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
               endif
               set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Result"
               set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                "Update conflict on result"
               set return_value = 0
            else
               update into 
                  result r
               set
                  r.call_back_ind =
                    request->orders[oidx].assays[aidx].call_back_ind,
                  r.result_status_cd = 
                    request->orders[oidx].assays[aidx].result_status_cd,
                  r.chartable_flag =
                    request->orders[oidx].assays[aidx].chartable_flag,
                  r.security_level_cd =
                    request->orders[oidx].assays[aidx].security_level_cd,
                  r.repeat_number =
                    request->orders[oidx].assays[aidx].repeat_number,
                  r.updt_dt_tm = cnvtdatetime(curdate, curtime3),
                  r.updt_id = reqinfo->updt_id,
                  r.updt_task = reqinfo->updt_task,
                  r.updt_applctx = reqinfo->updt_applctx,
                  r.updt_cnt = r.updt_cnt + 1
               plan r  where r.result_id = arg_result_id
                         and r.updt_cnt = 
                             request->orders[oidx].assays[aidx].result_updt_cnt
               with nocounter
               if (curqual = 0)
                     set failed = "T"
                     set status_count = status_count + 1
                     /* create an occurrence of the reply status record if the original occurrence previously used */
                     if (status_count > 1)
                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                     endif
                     set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                     set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                     set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Result"
                     set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                              "Unable to update result"
                     set return_value = 0
               else
                     set return_value = 1
               endif
            endif
            return(return_value)
         end

      /***********************************************************************
      * Insert perform_result subroutine                                     *
      ***********************************************************************/
         declare perf_result_seq         = f8
         declare insert_perform_result( arg_result_id, 
                                        arg_parent_perf_rslt_id ) = i4

         subroutine insert_perform_result( arg_result_id,
                                           arg_parent_perf_rslt_id )

            /*********************************/
            /* If result contains rtf_text,  */
            /* read new long_text_id before  */
            /* inserting perform result rec. */
            /*********************************/
            if (request->orders[oidx].assays[aidx].result_type_cd
                in (result_type_freetext_cd, result_type_text_cd,
                    result_type_interp_cd)
            and request->orders[oidx].assays[aidx].rtf_text > " ")
               if (read_long_data_seq( 0 ) = 0)
                  return(0)
               endif
            else
               set long_text_seq = 0.0
            endif

            select into "nl:"
               next_seq_nbr = seq(pathnet_seq,nextval)
            from dual
            detail
               perf_result_seq = next_seq_nbr
            with nocounter

            insert into 
               perform_result pr
            set
               pr.perform_result_id = perf_result_seq,
               pr.result_id = arg_result_id,
               pr.parent_perform_result_id = arg_parent_perf_rslt_id,
               pr.container_id =  
                 request->orders[oidx].assays[aidx].container_id,
               pr.service_resource_cd = 
                 request->orders[oidx].assays[aidx].service_resource_cd,
               pr.perform_personnel_id = 
                 request->orders[oidx].assays[aidx].perform_personnel_id,
               pr.perform_dt_tm = 
                        cnvtdatetime(request->event_dt_tm),
;yck                 cnvtdatetime(request->orders[oidx].assays[aidx].perform_dt_tm),
               pr.result_status_cd = 
                 request->orders[oidx].assays[aidx].result_status_cd,
               pr.result_type_cd = 
                 request->orders[oidx].assays[aidx].result_type_cd,
               pr.nomenclature_id = 
                 request->orders[oidx].assays[aidx].nomenclature_id,
               pr.result_code_set_cd = 
                 if (request->orders[oidx].assays[aidx].bb_result_code_set_cd > 0)
                    request->orders[oidx].assays[aidx].bb_result_code_set_cd
                 else
                    0
                 endif,
               pr.result_value_alpha =
                 if (request->orders[oidx].assays[aidx].result_type_cd 
                   in (result_type_text_cd, result_type_alpha_cd, result_type_interp_cd))
                    request->orders[oidx].assays[aidx].result_value_alpha
                 else
                    NULL
                 endif,
               pr.result_value_numeric = 
               if (request->orders[oidx].assays[aidx].result_type_cd
                   in (result_type_numeric_cd, result_type_calc_cd, result_type_interp_cd))    
                    request->orders[oidx].assays[aidx].result_value_numeric
                 else
                    NULL
                 endif,
               pr.numeric_raw_value = 
                 if (request->orders[oidx].assays[aidx].result_type_cd
                   in (result_type_numeric_cd, result_type_calc_cd, result_type_interp_cd))
                    request->orders[oidx].assays[aidx].numeric_raw_value
                 else
                    NULL
                 endif,
            pr.less_great_flag =
             if (request->orders[oidx].assays[aidx].less_great_flag 
                in (0,1,2))
                request->orders[oidx].assays[aidx].less_great_flag
              else
                NULL
             endif,
               pr.result_value_dt_tm = 
                 if (request->orders[oidx].assays[aidx].result_type_cd = result_type_date_cd) 
                    cnvtdatetime(request->orders[oidx].assays[aidx].result_value_dt_tm)
                 elseif (request->orders[oidx].assays[aidx].result_type_cd = result_type_date_time_cd) ;012
                    cnvtdatetime(request->orders[oidx].assays[aidx].result_value_dt_tm) ;012
                 else
                    NULL
                 endif,
               pr.long_text_id = long_text_seq,
               pr.ascii_text = 
                 if (request->orders[oidx].assays[aidx].ascii_text > " ")
;008                 if (request->orders[oidx].assays[aidx].result_type_cd
;008                   in (result_type_freetext_cd, result_type_text_cd))
                    request->orders[oidx].assays[aidx].ascii_text
                 else
                    NULL
                 endif,
               pr.reference_range_factor_id =
                 request->orders[oidx].assays[aidx].reference_range_factor_id,
               pr.normal_cd = 
                 request->orders[oidx].assays[aidx].normal_cd,
               pr.critical_cd = 
                 request->orders[oidx].assays[aidx].critical_cd,
               pr.review_cd = 
                 request->orders[oidx].assays[aidx].review_cd,
               pr.delta_cd = 
                 request->orders[oidx].assays[aidx].delta_cd,
			         pr.units_cd = 
               	 request->orders[oidx].assays[aidx].units_cd,  
               pr.notify_cd = 
                 request->orders[oidx].assays[aidx].notify_cd,             
               pr.normal_low = 
               	 request->orders[oidx].assays[aidx].normal_low,
               pr.normal_high = 
                 request->orders[oidx].assays[aidx].normal_high,
               pr.normal_alpha = 
                 if (trim(request->orders[oidx].assays[aidx].normal_alpha) >" ")
                    request->orders[oidx].assays[aidx].normal_alpha
                 else
                    NULL
                 endif,
               pr.dilution_factor =
                 request->orders[oidx].assays[aidx].dilution_factor,
               pr.resource_error_codes =
                 request->orders[oidx].assays[aidx].resource_error_codes,
               pr.equation_id =
                 request->orders[oidx].assays[aidx].equation_id,
               pr.multiplex_resource_cd = 
                 request->orders[oidx].assays[aidx].multiplex_resource_cd,
               pr.interp_override_ind = 
                 request->orders[oidx].assays[aidx].interp_override_ind,
               pr.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               pr.updt_id = reqinfo->updt_id,
               pr.updt_task = reqinfo->updt_task,
               pr.updt_applctx = reqinfo->updt_applctx,
               pr.updt_cnt = 0,
               pr.perform_tz = if (CurUTC = 1)
                                CurTimeZoneApp
                             else
                                0
                             endif                 
            plan pr
            with nocounter

            if (curqual = 0)
               return(0)
            endif


            /*********************************/
            /* If result contains rtf_text,  */
            /* insert new long_text record.  */
            /*********************************/
            if (long_text_seq > 0.0)
               insert into 
                  long_text lt
               set
                  lt.long_text_id = long_text_seq,
                  lt.parent_entity_name = "PERFORM_RESULT",
                  lt.parent_entity_id = perf_result_seq,
                  lt.long_text = request->orders[oidx].assays[aidx].rtf_text,
                  lt.active_ind = 1,
                  lt.active_status_cd = reqdata->active_status_cd,
;yck                  lt.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
                  lt.active_status_dt_tm = cnvtdatetime(current->system_dt_tm), 
                  lt.active_status_prsnl_id = request->orders[oidx].assays[aidx].perform_personnel_id,
                  lt.updt_dt_tm = cnvtdatetime(curdate, curtime3),
                  lt.updt_id = reqinfo->updt_id,
                  lt.updt_task = reqinfo->updt_task,
                  lt.updt_applctx = reqinfo->updt_applctx,
                  lt.updt_cnt = 0
               plan lt
               with nocounter
               if (curqual = 0)
                  return(0)
               endif
            endif

            return(1)
         end

       /***********************************************************************
      * Insert result image subroutine                                        *
      ***********************************************************************/
         declare insert_images( none ) = i4
 
         subroutine insert_images( none )
            declare nCnt = i2 with protect, noconstant(0)
            declare i    = i4 with protect, noconstant(0)
            declare lErrorCode    = i4 with protect, noconstant(0)
            declare sErrorMessage    = vc with protect, noconstant(" ")
            
            ; lock rows for update or delete
            select into "nl:"
            
            from blob_reference br,
                 (dummyt d with seq = value(request->orders[oidx]->assays[aidx]->image_cnt))
            
            plan d where request->orders[oidx]->assays[aidx]->images[d.seq].blob_ref_id > 0.0
            join br where br.blob_ref_id = request->orders[oidx]->assays[aidx]->images[d.seq].blob_ref_id
         
            with forupdate(br)
            
            set lErrorCode = error(sErrorMessage, 0)
            if (lErrorCode > 0)
                set reply->status_data.subeventstatus[1].OperationName = "lock failed"
                set reply->status_data.subeventstatus[1].OperationStatus = "F"
                set reply->status_data.subeventstatus[1].TargetObjectName = "blob_reference"
                set reply->status_data.subeventstatus[1].TargetObjectValue = "locking blob_reference failed"
                return(0)
            endif 
           
            ; delete records where blob_ref_id > 0.0 and delete_ind = 1 and in a status
            delete from blob_reference br,
                        (dummyt d with seq = value(request->orders[oidx]->assays[aidx]->image_cnt))
            
            set br.seq = 1
            
            plan d where request->orders[oidx]->assays[aidx]->images[d.seq].blob_ref_id > 0.0
                     and (request->orders[oidx]->assays[aidx]->images[d.seq].delete_ind = 1 and
                         request->orders[oidx]->assays[aidx]->result_status_cd in(result_status_verified_cd))
            
            join br where br.blob_ref_id = request->orders[oidx]->assays[aidx]->images[d.seq].blob_ref_id
                      and br.parent_entity_id = request->orders[oidx]->assays[aidx]->result_id
           
            with nocounter
           
            set lErrorCode = error(sErrorMessage, 0)
            if (lErrorCode > 0)
                set reply->status_data.subeventstatus[1].OperationName = "delete failed"
                set reply->status_data.subeventstatus[1].OperationStatus = "F"
                set reply->status_data.subeventstatus[1].TargetObjectName = "blob_reference"
                set reply->status_data.subeventstatus[1].TargetObjectValue = "deleting from blob_reference failed"
                return(0)
            endif 
           
            ; update records where blob_ref_id > 0.0
            update into blob_reference br,
                        (dummyt d with seq = value(request->orders[oidx]->assays[aidx]->image_cnt))
            
              set br.blob_handle          = request->orders[oidx]->assays[aidx]->images[d.seq].blob_handle,
                  br.storage_cd           = request->orders[oidx]->assays[aidx]->images[d.seq].storage_cd,
                  br.format_cd            = request->orders[oidx]->assays[aidx]->images[d.seq].format_cd,
                  br.blob_title           = request->orders[oidx]->assays[aidx]->images[d.seq].blob_title,
                  br.sequence_nbr         = request->orders[oidx]->assays[aidx]->images[d.seq].sequence_nbr,
                  br.publish_flag         = request->orders[oidx]->assays[aidx]->images[d.seq].publish_flag,
                  br.valid_until_dt_tm    = if (request->orders[oidx]->assays[aidx]->images[d.seq].delete_ind = 0)
                                              cnvtdatetime("31-DEC-2100")
                                            else
                                              cnvtdatetime(curdate, curtime3)
                                            endif,
                  br.parent_entity_name   = "RESULT",
                  br.parent_entity_id     = request->orders[oidx]->assays[aidx].result_id,
                  br.updt_dt_tm           = cnvtdatetime(curdate, curtime3),
                  br.updt_id              = reqinfo->updt_id,
                  br.updt_task            = reqinfo->updt_task,
                  br.updt_applctx         = reqinfo->updt_applctx,
                  br.updt_cnt             = br.updt_cnt + 1  
            
            plan d where request->orders[oidx]->assays[aidx]->images[d.seq].blob_ref_id > 0.0
                     and request->orders[oidx]->assays[aidx]->images[d.seq].delete_ind = 0
                      or (request->orders[oidx]->assays[aidx]->images[d.seq].delete_ind = 1 and
                          not (request->orders[oidx]->assays[aidx]->result_status_cd in(result_status_verified_cd)))
            
            join br where br.blob_ref_id = request->orders[oidx]->assays[aidx]->images[d.seq].blob_ref_id
                       
            with nocounter
 
            set lErrorCode = error(sErrorMessage, 0)
            if (lErrorCode > 0)
                set reply->status_data.subeventstatus[1].OperationName = "update failed"
                set reply->status_data.subeventstatus[1].OperationStatus = "F"
                set reply->status_data.subeventstatus[1].TargetObjectName = "blob_reference"
                set reply->status_data.subeventstatus[1].TargetObjectValue = "update of blob_reference failed"
                return(0)
            endif
            
            ; retrieve new ids for records to be inserted
            record m_dm2_seq_stat
            (
    		      1 n_status    = i4
    		      1 s_error_msg = vc
            ) with protect

            record new_ids
            (
              1 qual[*]
                2 id   = f8
            )
          
            record ids
            (
              1 qual[*]
                2 id   = f8
            )          
            
            ; determine the number of new ids to be generated
            for (i = 1 to request->orders[oidx]->assays[aidx]->image_cnt)
               if (request->orders[oidx]->assays[aidx]->images[i].blob_ref_id = 0.0)
                  set nCnt = nCnt + 1
               endif
            endfor
            
            set stat = alterlist(ids->qual, request->orders[oidx]->assays[aidx]->image_cnt)
            
            ; get ids
            execute dm2_dar_get_bulk_seq "new_ids->qual", nCnt, "id", 1, "reference_seq"
            
            ; populate request with new ids, also create a second temporary list to plan on for the insert
            set nCnt = 0
            for (i = 1 to request->orders[oidx]->assays[aidx]->image_cnt)
               if (request->orders[oidx]->assays[aidx]->images[i].blob_ref_id = 0.0)
                  set nCnt = nCnt + 1
                  set ids->qual[i].id = new_ids->qual[nCnt].id
                  set request->orders[oidx]->assays[aidx]->images[i].blob_ref_id = ids->qual[i].id 
                  set request->orders[oidx]->assays[aidx]->images[i].valid_from_dt_tm = cnvtdatetime(curdate, curtime3)
                  set request->orders[oidx]->assays[aidx]->images[i].valid_until_dt_tm = cnvtdatetime("31-DEC-2100")
               endif
            endfor
            
            call echorecord(new_ids)
            call echorecord(ids)
            
            ; insert
            insert into blob_reference br,
                        (dummyt d with seq = value(size(ids->qual, 5)))
            
              set br.blob_ref_id          = request->orders[oidx]->assays[aidx]->images[d.seq].blob_ref_id,
                  br.blob_handle          = request->orders[oidx]->assays[aidx]->images[d.seq].blob_handle,
                  br.storage_cd           = request->orders[oidx]->assays[aidx]->images[d.seq].storage_cd,
                  br.format_cd            = request->orders[oidx]->assays[aidx]->images[d.seq].format_cd,
                  br.blob_title           = request->orders[oidx]->assays[aidx]->images[d.seq].blob_title,
                  br.sequence_nbr         = request->orders[oidx]->assays[aidx]->images[d.seq].sequence_nbr,
                  br.publish_flag         = request->orders[oidx]->assays[aidx]->images[d.seq].publish_flag,
                  br.parent_entity_name   = "RESULT",
                  br.parent_entity_id     = request->orders[oidx]->assays[aidx].result_id,
                  br.valid_from_dt_tm     = cnvtdatetime(request->orders[oidx]->assays[aidx]->images[d.seq].valid_from_dt_tm),
                  br.valid_until_dt_tm    = cnvtdatetime(request->orders[oidx]->assays[aidx]->images[d.seq].valid_until_dt_tm),
                  br.updt_dt_tm           = cnvtdatetime(curdate, curtime3),
                  br.updt_id              = reqinfo->updt_id,
                  br.updt_task            = reqinfo->updt_task,
                  br.updt_applctx         = reqinfo->updt_applctx,
                  br.updt_cnt             = 0 
            
            plan d where ids->qual[d.seq].id > 0.0
            join br
            
            with nocounter
            
            set lErrorCode = error(sErrorMessage, 0)
            if (lErrorCode > 0)
                set reply->status_data.subeventstatus[1].OperationName = "insert failed"
                set reply->status_data.subeventstatus[1].OperationStatus = "F"
                set reply->status_data.subeventstatus[1].TargetObjectName = "blob_reference"
                set reply->status_data.subeventstatus[1].TargetObjectValue = "insert into blob_reference failed"
                return(0)
            endif
 
            ; update reply structure
            set reply->orders[oidx]->assays[aidx]->image_cnt = request->orders[oidx]->assays[aidx]->image_cnt
            set stat = alterlist(reply->orders[oidx]->assays[aidx]->images, reply->orders[oidx]->assays[aidx]->image_cnt)
            for (i = 1 to reply->orders[oidx]->assays[aidx]->image_cnt)
                set reply->orders[oidx]->assays[aidx]->images[i].blob_ref_id = 
                             request->orders[oidx]->assays[aidx]->images[i].blob_ref_id
                set reply->orders[oidx]->assays[aidx]->images[i].blob_handle = 
                             request->orders[oidx]->assays[aidx]->images[i].blob_handle
                set reply->orders[oidx]->assays[aidx]->images[i].storage_cd = 
                             request->orders[oidx]->assays[aidx]->images[i].storage_cd
                set reply->orders[oidx]->assays[aidx]->images[i].format_cd = 
                             request->orders[oidx]->assays[aidx]->images[i].format_cd
                set reply->orders[oidx]->assays[aidx]->images[i].blob_title = 
                             request->orders[oidx]->assays[aidx]->images[i].blob_title
                set reply->orders[oidx]->assays[aidx]->images[i].sequence_nbr = 
                             request->orders[oidx]->assays[aidx]->images[i].sequence_nbr
                set reply->orders[oidx]->assays[aidx]->images[i].publish_flag = 
                             request->orders[oidx]->assays[aidx]->images[i].publish_flag
                set reply->orders[oidx]->assays[aidx]->images[i].valid_from_dt_tm = 
                             request->orders[oidx]->assays[aidx]->images[i].valid_from_dt_tm
                set reply->orders[oidx]->assays[aidx]->images[i].valid_until_dt_tm = 
                             request->orders[oidx]->assays[aidx]->images[i].valid_until_dt_tm
                set reply->orders[oidx]->assays[aidx]->images[i].delete_ind = 
                             request->orders[oidx]->assays[aidx]->images[i].delete_ind
                set reply->orders[oidx]->assays[aidx]->images[i].key_value = 
                             request->orders[oidx]->assays[aidx]->images[i].key_value
            endfor
 
            free set m_dm2_seq_stat
            free set new_ids
            free set ids
 
            return(1)
    
         end     

      /***********************************************************************
      * Update perform_result subroutine.  Update the result_status_cd on    *
      * reperforms.                                                          *
      ***********************************************************************/
         declare update_perform_result( arg_result_id, 
                                        arg_perf_result_id,
                                        arg_result_status_cd ) = i4

         subroutine update_perform_result( arg_result_id,
                                           arg_perf_result_id,
                                           arg_result_status_cd )

            set return_value = 0
            set cur_updt_cnt = 0
            select into "nl:"
                    r.*
            from perform_result r
                where r.perform_result_id = perf_result_seq
            detail
               cur_updt_cnt = r.updt_cnt
            with nocounter, forupdate(r)

            if (curqual = 0)
                set failed = "T"
                set status_count = status_count + 1
                /* create an occurrence of the reply status record if the original occurrence previously used */
                if (status_count > 1)
                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                endif
                set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Perform Result"
                set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to lock perform result"
                set return_value = 0
            elseif (cur_updt_cnt != request->orders[oidx].assays[aidx].perform_result_updt_cnt)
                set failed = "T"
                set status_count = status_count + 1
                /* create an occurrence of the reply status record if the original occurrence previously used */
                if (status_count > 1)
                       set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                endif
                set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Perform Result"
                set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                      "Update conflict on perform result"
                set return_value = 0
            else
                update into 
                   perform_result pr
                set
                  pr.result_status_cd = arg_result_status_cd,
                  pr.updt_dt_tm = cnvtdatetime(curdate, curtime3),
                  pr.updt_id = reqinfo->updt_id,
                  pr.updt_task = reqinfo->updt_task,
                  pr.updt_applctx = reqinfo->updt_applctx,
                  pr.updt_cnt = pr.updt_cnt + 1                 
                plan pr where pr.perform_result_id = arg_perf_result_id
                          and pr.result_id = arg_result_id
                with nocounter
                if (curqual = 0)
                   set failed = "T"
                   set status_count = status_count + 1
                   /* create an occurrence of the reply status record if the original occurrence previously used */
                   if (status_count > 1)
                      set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                   endif
                   set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                   set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                   set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Perform Result"
                   set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                   "Unable to update perform result"
                   set return_value = 0
                else
                   set return_value = 1
                endif
            endif
            return(return_value)
         end

      /***********************************************************************
      * Read perform_result subroutine.  Gets current result status.         *
      ***********************************************************************/
         declare read_perform_result( arg_result_id, 
                                      arg_perf_result_id ) = i4

         subroutine read_perform_result( arg_result_id,
                                         arg_perf_result_id )
            set curr_result_status_cd = 0.0
            set curr_parent_perf_result_id = 0.0

            select into "nl:"
               pr.result_status_cd,
               pr.parent_perform_result_id

            from
               perform_result pr

            plan pr where pr.perform_result_id = arg_perf_result_id
                      and pr.result_id = arg_result_id
            detail
               curr_result_status_cd = pr.result_status_cd
               curr_parent_perf_result_id = pr.parent_perform_result_id

            with nocounter

            return(curqual)
         end

      /***********************************************************************
      * Insert result_event subroutine                                       *
      ***********************************************************************/
         declare insert_result_event( arg_result_id, 
                                      arg_perf_result_id ) = i4

         subroutine insert_result_event( arg_result_id,
                                          arg_perf_result_id )
            insert into
               result_event re
            set
               re.result_id = arg_result_id,
               re.perform_result_id = arg_perf_result_id,
               re.event_sequence = 1,
;yck               re.event_dt_tm = cnvtdatetime(request->event_dt_tm),
               re.event_dt_tm = cnvtdatetime(request->event_dt_tm),
               re.event_personnel_id = request->event_personnel_id,
               re.event_reason = request->orders[oidx].assays[aidx].result_status_disp,
               re.signature_line_ind = 
                 request->orders[oidx].assays[aidx].signature_line_ind,
               re.called_back_ind =
                 request->orders[oidx].assays[aidx].call_back_ind,
               re.event_type_cd = request->orders[oidx].assays[aidx].result_status_cd,
               re.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               re.updt_id = reqinfo->updt_id,
               re.updt_task = reqinfo->updt_task,
               re.updt_applctx = reqinfo->updt_applctx,
               re.updt_cnt = 0             
            plan re
            with nocounter
            return(curqual)
         end

      /***********************************************************************
      * Insert result_comment subroutine                                     *
      ***********************************************************************/
         declare insert_result_comment( arg_result_id ) = i4

         subroutine insert_result_comment( arg_result_id )

            /******************************************/
            /* Read new long_text_id for comment text */
            /******************************************/
            set long_text_seq = 0.0
            if (read_long_data_seq( 0 ) = 0)
               return(0)
            endif

            /* Find the last result comment action sequence */
            set last_action_seq = 0
            select into "nl:"
               rc.result_id,
               rc.action_sequence
            from result_comment rc
            plan rc where rc.result_id = arg_result_id
                      and rc.comment_type_cd = request->orders[oidx]
                            .assays[aidx].result_comment[rcidx].comment_type_cd
            order rc.result_id, rc.action_sequence desc
            head rc.result_id
               last_action_seq = rc.action_sequence
            with nocounter

            insert into
               result_comment rc
            set
               rc.result_id = arg_result_id,
               rc.action_sequence = last_action_seq + 1,
               rc.comment_type_cd = request->orders[oidx].assays[aidx]
                 .result_comment[rcidx].comment_type_cd,
               rc.long_text_id = long_text_seq,
;               rc.comment_text = request->orders[oidx].assays[aidx]
;                 .result_comment[rcidx].comment_text,
               rc.comment_prsnl_id = request->orders[oidx].assays[aidx]
                 .result_comment[rcidx].comment_prsnl_id,
;yck               rc.comment_dt_tm = cnvtdatetime(curdate, curtime3),
               rc.comment_dt_tm = cnvtdatetime(current->system_dt_tm), 
               rc.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               rc.updt_id = reqinfo->updt_id,
               rc.updt_task = reqinfo->updt_task,
               rc.updt_applctx = reqinfo->updt_applctx,
               rc.updt_cnt = 0,
               rc.comment_tz = if (CurUTC = 1)
                                  CurTimeZoneApp
                               else
                                  0
                               endif                
            plan rc
            with nocounter
 
            if (curqual = 0)
               return(0)
            endif

            /*************************************************/
            /* Insert new long_text record with comment text */
            /*************************************************/
            insert into 
               long_text lt
            set
               lt.long_text_id = long_text_seq,
               lt.parent_entity_name = "RESULT_COMMENT",
               lt.parent_entity_id = arg_result_id,
               lt.long_text = request->orders[oidx].assays[aidx]
                 .result_comment[rcidx].comment_text,
               lt.active_ind = 1,
               lt.active_status_cd = reqdata->active_status_cd,
;yck               lt.active_status_dt_tm = cnvtdatetime(curdate, curtime3),
               lt.active_status_dt_tm = cnvtdatetime(current->system_dt_tm), 
               lt.active_status_prsnl_id = request->event_personnel_id,
               lt.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               lt.updt_id = reqinfo->updt_id,
               lt.updt_task = reqinfo->updt_task,
               lt.updt_applctx = reqinfo->updt_applctx,
               lt.updt_cnt = 0
            plan lt
            with nocounter

            if (curqual = 0)
               return(0)
            endif

           return(curqual)
         end

      /***********************************************************************
      * Read long_data_seq subroutine                                        *
      ***********************************************************************/
         declare long_text_seq           = f8
         declare read_long_data_seq( ) = i4
         subroutine read_long_data_seq( null )
            set long_text_seq = 0.0
            select into "nl:"
               next_seq_nbr = 
                 seq(long_data_seq,nextval) 
            from dual
            detail
               long_text_seq = next_seq_nbr
            with nocounter

            return(curqual)
         end


      /***********************************************************************
      * update patient aborh subroutine                                      *
      ***********************************************************************/
        declare update_patient_aborh( ) = i4

        subroutine update_patient_aborh( null )
            if (request->orders[oidx]->assays[aidx]->upd_pat_hist_aborh_yn = "Y")     ;lqs

                ; ** 010 Begin
                ; 
                ; Retrieve current person_aborh row to verify that it has not changed since the order was retrieved.
                ; Note:  If reqeust->orig_abo_cd and request->orig_rh_cd are 0 this indicates that the patient's aborh
                ; was unknown when the order was retrieved.

                set pa_rec_cnt = 0
                set pa_updt_cnt = 0
                set pa_abo_cd = 0.0
                set pa_rh_cd = 0.0
                set pa_person_aborh_id = 0.0

                select 
                    pa.person_aborh_id 
                from
                    person_aborh pa             
                where
                    pa.person_id = request->orders[oidx]->person_id
                      and pa.active_ind = 1
                detail              
                    pa_rec_cnt          = pa_rec_cnt + 1
                    pa_updt_cnt         = pa.updt_cnt
                    pa_abo_cd           = pa.abo_cd
                    pa_rh_cd            = pa.rh_cd
                    pa_person_aborh_id  = pa.person_aborh_id
                with    nocounter

                if (pa_rec_cnt = 0)
                    ;** No rows on Person_Aborh table for person_id.  Verify that aborh previously unknown
                    if (request->orders[oidx]->assays[aidx]->orig_abo_cd > 0
                    or request->orders[oidx]->assays[aidx]->orig_rh_cd > 0
                    or request->orders[oidx]->assays[aidx]->person_aborh_id > 0
                    or request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt > 0)
                        ;** ABORh was previously determined; however, no active rows currently on Person_Aborh
                        set failed = "T"
                        set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "Update Patient ABORh"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bbt_upd_lab_results"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                            = concat("Cannot update patient ABO/Rh for Accession :"
                                , request->orders[oidx]->accession
                                , ".  Patient ABO/Rh has changed since procedure retrieved.  No active Person_Aborh row.")
                        return(0)
                    endif
                elseif (pa_rec_cnt = 1)
                    ;** Verify that original aborh = values on current active person_aborh row
                    if (pa_person_aborh_id != request->orders[oidx]->assays[aidx]->person_aborh_id
                    or pa_updt_cnt != request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt)
                        ;** aborh has been changed by another user since current user retrieved aborh order
                        set failed = "T"
                        set status_count = status_count + 1
                         /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set pat_aborh_upd_conflict_ind = 1
                        set reply->status_data->subeventstatus[status_count]->OperationName = "Update Patient ABORh"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bbt_upd_lab_results"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                            = concat("Cannot update patient ABO/Rh for Accession :"
                                , request->orders[oidx]->accession
                                , ".  Patient ABO/Rh has changed since procedure retrieved.  Current patient ABO/Rh different"
                                , " than when procedure retrieved.")
                        return(0)
                    endif
                elseif (pa_rec_cnt > 1)
                    ;** Multiple active rows exist on the person_aborh table.  This is invalid
                    set failed = "T"
                    set status_count = status_count + 1
                     /* create an occurrence of the reply status record if the original occurrence previously used */
                    if (status_count > 1)
                        set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                    endif
                    set reply->status_data->subeventstatus[status_count]->OperationName = "Update Patient ABORh"
                    set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                    set reply->status_data->subeventstatus[status_count]->TargetObjectName = "bbt_upd_lab_results"
                    set reply->status_data->subeventstatus[status_count]->TargetObjectValue 
                        = concat("Cannot update patient ABO/Rh for Accession :"
                            , request->orders[oidx]->accession
                            , ".  Multiple active Person_Aborh rows.")
                    return(0)
                endif
                ;** 010 End

                set RH_TEST_ONLY = "N"
                set ABO_TEST_ONLY = "N"
                set ABO_RH_TEST = "N"
                set write_aborh_result = "N"
                  
                if (request->orders[oidx]->assays[aidx]->new_abo_cd > 0                       ; 010
                or request->orders[oidx]->assays[aidx]->new_rh_cd > 0)                        ; 010
                    ; ** Patient ABO/Rh changed.  Inactivate PERSON_ABORH row and write new   ; 010

                  if (request->orders[oidx]->assays[aidx]->new_abo_cd = 0)
                       set RH_TEST_ONLY = "Y"
                  else
                      if (request->orders[oidx]->assays[aidx]->new_rh_cd = 0)
                            set ABO_TEST_ONLY = "Y"
                      else
                            set ABO_RH_TEST = "Y"
                      endif
                  endif
                  if (RH_TEST_ONLY = "Y")
                     /* use orig_abo_cd and new_rh_cd */
                     if (request->orders[oidx]->assays[aidx]->new_rh_cd = 
                         request->orders[oidx]->assays[aidx]->orig_rh_cd)
                             /* write aborh_result only!!!!! */
                             set write_aborh_result = "Y"
                     else   /* new and old rh codes do not match */
                         set gsub_person_aborh_status = "  "
                         set gsub_person_aborh_inact_status = " "
                         if (request->orders[oidx]->assays[aidx]->orig_rh_cd = 0)
                             if (request->orders[oidx]->assays[aidx]->orig_abo_cd = 0)
                                  /* write new person_aborh and aborh_result */
                                  call ADD_PERSON_ABORH
                                     (
                                      /* person_id              */ request->orders[oidx]->person_id,
                                      /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                      /* rh_cd                  */ request->orders[oidx]->assays[aidx]->new_rh_cd,
                                      /* active_ind             */ 1,
                                      /* active_status_cd       */ reqdata->active_status_cd,
                                      /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
                                      /* active_status_prsnl_id */ request->event_personnel_id,
                                      /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                                     )
                                   if (gsub_person_aborh_status != "OK")
                                        return(0)
                                   endif
                                   set write_aborh_result = "Y"
                             else  /* orig abo is not blank */
                                   /* inactivate person_aborh, write new person_aborh and aborh_result*/
                                   call CHG_PERSON_ABORH
                                      (
                                      /* person_id              */ request->orders[oidx]->person_id,
                                      /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                      /* rh_cd                  */ request->orders[oidx]->assays[aidx]->orig_rh_cd,
                                      /* active_ind             */ 0,
                                      /* active_status_cd       */ reqdata->active_status_cd,
                                      /* updt_cnt               */ request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt,
                                      /* lock_forupdate_ind     */ 1
                                      )
                                     if (gsub_person_aborh_inact_status != "OK")
                                         return(0)
                                     endif
                                     call ADD_PERSON_ABORH
                                        (
                                         /* person_id              */ request->orders[oidx]->person_id,
                                         /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                         /* rh_cd                  */ request->orders[oidx]->assays[aidx]->new_rh_cd,
                                         /* active_ind             */ 1,
                                         /* active_status_cd       */ reqdata->active_status_cd,
                                         /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                                         /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                                         /* active_status_prsnl_id */ request->event_personnel_id,
                                         /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                                        )
                                      if (gsub_person_aborh_status != "OK")
                                          return(0)
                                      endif
                                      set write_aborh_result = "Y"
                             endif /* orig abo blank or not blank check */
                         else   /* orig rh code is not blank */
                                /* inactivate person_aborh, write new person_aborh and aborh_result*/
                               call CHG_PERSON_ABORH
                                  (
                                   /* person_id              */ request->orders[oidx]->person_id,
                                   /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                   /* rh_cd                  */ request->orders[oidx]->assays[aidx]->orig_rh_cd,
                                   /* active_ind             */ 0,
                                   /* active_status_cd       */ reqdata->active_status_cd,
                                   /* updt_cnt               */ request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt,
                                   /* lock_forupdate_ind     */ 1
                                   )
                                if (gsub_person_aborh_inact_status != "OK")
                                    return(0)
                                endif
                                call ADD_PERSON_ABORH
                                   (
                                    /* person_id              */ request->orders[oidx]->person_id,
                                    /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                    /* rh_cd                  */ request->orders[oidx]->assays[aidx]->new_rh_cd,
                                    /* active_ind             */ 1,
                                    /* active_status_cd       */ reqdata->active_status_cd,
                                    /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                                    /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                                    /* active_status_prsnl_id */ request->event_personnel_id,
                                    /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                                    )
                                 if (gsub_person_aborh_status != "OK")
                                     return(0)
                                 endif
                                 set write_aborh_result = "Y"
                         endif /* orig rh  blank or not blank check */
                     endif   /* check to determine if new and old rh codes match */
                  elseif (ABO_TEST_ONLY = "Y")
                     set gsub_person_aborh_status = "  "
                     set gsub_person_aborh_inact_status = " "
                     /* use new_abo_cd */
                     if (request->orders[oidx]->assays[aidx]->new_abo_cd = 
                         request->orders[oidx]->assays[aidx]->orig_abo_cd)
                         /* use orig_rh_cd */
                         /*write aborh_result only !!!!*/
                         set write_aborh_result = "Y"
                     else   /* new and old abo do not match */
                         if (request->orders[oidx]->assays[aidx]->orig_abo_cd = 0)
                             if (request->orders[oidx]->assays[aidx]->orig_rh_cd = 0)
                                /* use orig_rh_cd */
                                /* write new person_aborh and aborh_result*/
                                call ADD_PERSON_ABORH
                                    (
                                      /* person_id              */ request->orders[oidx]->person_id,
                                      /* abo_cd                 */ request->orders[oidx]->assays[aidx]->new_abo_cd,
                                      /* rh_cd                  */ request->orders[oidx]->assays[aidx]->orig_rh_cd,
                                      /* active_ind             */ 1,
                                      /* active_status_cd       */ reqdata->active_status_cd,
                                      /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                                      /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                                      /* active_status_prsnl_id */ request->event_personnel_id,
                                      /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                                     )
                                 if (gsub_person_aborh_status != "OK")
                                      return(0)
                                 endif
                                 set write_aborh_result = "Y"
                             else  /* orig rh is not blank */
                                 /* use orig_rh_cd */
                                 /* inactivate person_aborh, write new person_aborh and aborh_result*/
                                 call CHG_PERSON_ABORH
                                    (
                                      /* person_id              */ request->orders[oidx]->person_id,
                                      /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                      /* rh_cd                  */ request->orders[oidx]->assays[aidx]->orig_rh_cd,
                                      /* active_ind             */ 0,
                                      /* active_status_cd       */ reqdata->active_status_cd,
                                      /* updt_cnt               */ request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt,
                                      /* lock_forupdate_ind     */ 1
                                    )
                                  if (gsub_person_aborh_inact_status != "OK")
                                      return(0)
                                  endif
                                  call ADD_PERSON_ABORH
                                     (
                                       /* person_id              */ request->orders[oidx]->person_id,
                                       /* abo_cd                 */ request->orders[oidx]->assays[aidx]->new_abo_cd,
                                       /* rh_cd                  */ request->orders[oidx]->assays[aidx]->orig_rh_cd,
                                       /* active_ind             */ 1,
                                       /* active_status_cd       */ reqdata->active_status_cd,
                                       /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                                       /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                                       /* active_status_prsnl_id */ request->event_personnel_id,
                                       /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                                      )
                                   if (gsub_person_aborh_status != "OK")                                         
                                      return(0)
                                    endif
                                    set write_aborh_result = "Y"
                             endif  /* orig rh blank or not blank check */
                         else   /* orig abo is not blank */
                                /* use new_rh_cd */
                                /* inactivate person_aborh, write new person_aborh and aborh_result*/
                                call CHG_PERSON_ABORH
                                  (
                                  /* person_id              */ request->orders[oidx]->person_id,
                                  /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                  /* rh_cd                  */ request->orders[oidx]->assays[aidx]->orig_rh_cd,
                                  /* active_ind             */ 0,
                                  /* active_status_cd       */ reqdata->active_status_cd,
                                  /* updt_cnt               */ request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt,
                                  /* lock_forupdate_ind     */ 1
                                  )
                                if (gsub_person_aborh_inact_status != "OK")
                                    return(0)
                                endif
                                call ADD_PERSON_ABORH
                                  (
                                    /* person_id              */ request->orders[oidx]->person_id,
                                    /* abo_cd                 */ request->orders[oidx]->assays[aidx]->new_abo_cd,
                                    /* rh_cd                  */ request->orders[oidx]->assays[aidx]->new_rh_cd,
                                    /* active_ind             */ 1,
                                    /* active_status_cd       */ reqdata->active_status_cd,
                                    /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                                    /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                                    /* active_status_prsnl_id */ request->event_personnel_id,
                                    /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                                  )
                                if (gsub_person_aborh_status != "OK")
                                       return(0)
                                endif
                                set write_aborh_result = "Y"
                         endif  /* orig abo blank or not blank check */
                     endif  /* orig and new abo match or not match check */
                  elseif (ABO_RH_TEST = "Y")
                     set gsub_person_aborh_status = "  "
                     set gsub_person_aborh_inact_status = " "
                     /* use new_abo_cd and new_rh_cd */
                     if (request->orders[oidx]->assays[aidx]->orig_abo_cd = 0
                         and request->orders[oidx]->assays[aidx]->orig_rh_cd = 0)
                          /* write new person_aborh and aborh_result*/
                          set write_aborh_result = "Y"
                          call ADD_PERSON_ABORH
                            (
                             /* person_id              */ request->orders[oidx]->person_id,
                             /* abo_cd                 */ request->orders[oidx]->assays[aidx]->new_abo_cd,
                             /* rh_cd                  */ request->orders[oidx]->assays[aidx]->new_rh_cd,
                             /* active_ind             */ 1,
                             /* active_status_cd       */ reqdata->active_status_cd,
                             /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                             /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                             /* active_status_prsnl_id */ request->event_personnel_id,
                             /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                             )
                           if (gsub_person_aborh_status != "OK")
                                return(0)
                           endif
                     else  /* orig abo and orig rh are not both blank */
                          if (request->orders[oidx]->assays[aidx]->new_abo_cd = 
                              request->orders[oidx]->assays[aidx]->orig_abo_cd)
                              if (request->orders[oidx]->assays[aidx]->new_rh_cd = 
                                  request->orders[oidx]->assays[aidx]->orig_rh_cd)
                                   /*  write aborh_result only !!!!! */
                                   set write_aborh_result = "Y"
                              else   /* orig rh does not match new rh */
                                    /* inactivate person_aborh, write new person_aborh and aborh_result*/
                                    call CHG_PERSON_ABORH
                                       (
                                       /* person_id              */ request->orders[oidx]->person_id,
                                       /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                       /* rh_cd                  */ request->orders[oidx]->assays[aidx]->orig_rh_cd,
                                       /* active_ind             */ 0,
                                       /* active_status_cd       */ reqdata->active_status_cd,
                                       /* updt_cnt               */ request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt,
                                       /* lock_forupdate_ind     */ 1
                                       )
                                    if (gsub_person_aborh_inact_status != "OK")
                                        return(0)
                                    endif
                                    call ADD_PERSON_ABORH
                                      (
                                        /* person_id              */ request->orders[oidx]->person_id,
                                        /* abo_cd                 */ request->orders[oidx]->assays[aidx]->new_abo_cd,
                                        /* rh_cd                  */ request->orders[oidx]->assays[aidx]->new_rh_cd,
                                        /* active_ind             */ 1,
                                        /* active_status_cd       */ reqdata->active_status_cd,
                                        /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                                        /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                                        /* active_status_prsnl_id */ request->event_personnel_id,
                                        /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                                        )
                                      if (gsub_person_aborh_status != "OK")
                                           return(0)
                                      endif
                                      set write_aborh_result = "Y"
                              endif  /* orig rh and new rh match or do not match check */
                           else   /* orig abo and new abo do not match */
                               /* inactivate person_aborh, write new person_aborh and aborh_result*/
                               call CHG_PERSON_ABORH
                                 (
                                  /* person_id              */ request->orders[oidx]->person_id,
                                  /* abo_cd                 */ request->orders[oidx]->assays[aidx]->orig_abo_cd,
                                  /* rh_cd                  */ request->orders[oidx]->assays[aidx]->orig_rh_cd,
                                  /* active_ind             */ 0,
                                  /* active_status_cd       */ reqdata->active_status_cd,
                                  /* updt_cnt               */ request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt,
                                  /* lock_forupdate_ind     */ 1
                                  )
                               if (gsub_person_aborh_inact_status != "OK")
                                   return(0)
                               endif
                               call ADD_PERSON_ABORH
                                 (
                                  /* person_id              */ request->orders[oidx]->person_id,
                                  /* abo_cd                 */ request->orders[oidx]->assays[aidx]->new_abo_cd,
                                  /* rh_cd                  */ request->orders[oidx]->assays[aidx]->new_rh_cd,
                                  /* active_ind             */ 1,
                                  /* active_status_cd       */ reqdata->active_status_cd,
                                  /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                                  /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                                  /* active_status_prsnl_id */ request->event_personnel_id,
                                  /* last_verified_dt_tm    */ cnvtdatetime(request->event_dt_tm)
                                  )
                                if (gsub_person_aborh_status != "OK")
                                      return(0)
                                endif
                                set write_aborh_result = "Y"
                           endif   /* orig abo and new abo match or do not match check */
                     endif    /* orig abo and orig rh both blank or not both blank check */
                  endif      /* abo_test_only check */
                else                                                                                                ; 010
                    ; ** Patient ABO/Rh not changed.  Update Person_ABORH.Updt_Cnt and .Last_Verified_Dt_Tm         ; 010
                                                                                                                    ; 010
                    set write_aborh_result = "Y"                                                                    ; 010
                    
                    select person_aborh_id                                                                          ; 010 
                    from person_aborh pa                                                                            ; 010
                    where pa.person_aborh_id = request->orders[oidx]->assays[aidx]->person_aborh_id                 ; 010
                    with forupdate(pa)                                                                              ; 010
                    if (curqual = 0)                                                                                ; 010
                        set gsub_person_aborh_inact_status = "FU"                                                   ; 010
                        return(0)                                                                                   ; 010
                    endif                                                                                           ; 010

                    update into person_aborh pa                                                                     ; 010
                        set pa.updt_cnt                 = pa.updt_cnt + 1,                                          ; 010
                            pa.updt_dt_tm               = cnvtdatetime(curdate, curtime3),                          ; 010
                            pa.updt_id                  = ReqInfo->updt_id,                                         ; 010
                            pa.updt_task                = ReqInfo->updt_task,                                       ; 010
                            pa.updt_applctx             = ReqInfo->updt_applctx,                                    ; 010
                            pa.last_verified_dt_tm      = cnvtdatetime(request->event_dt_tm)                        ; 010
                    where   pa.person_aborh_id          = request->orders[oidx].assays[aidx]->person_aborh_id       ; 010
                            and pa.updt_cnt             = request->orders[oidx]->assays[aidx]->person_aborh_updt_cnt   ; 010  
                    with    nocounter                                                                               ; 010
                    
                    if (curqual = 0)                                                                                ; 010
                      set gsub_person_aborh_inact_status = "FU"                                                     ; 010
                      return(0)                                                                                     ; 010
                    endif                                                                                           ; 010
                endif      
                  
            else   /*  upd pat hist does not equal "Y" */
                if (request->orders[oidx]->assays[aidx]->upd_pat_hist_aborh_yn = "N")   /* update_pat_hist_aborh_yn  = "N" */
                   /* use new_abo_cd and new_rh_cd */
                   /* write aborh_result only!! */
                      set write_aborh_result = "Y"
                endif 
            endif    /* upd_pat_hist_aborh_yn check */
            set gsub_inactive_aborh_rsl_status = "  "
            if (write_aborh_result = "Y")
                set write_aborh_result = "N"
              if (request->review_queue_ind = 0)
                ;calling from result entry
                call CHG_ABORH_RESULT
                    (
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* result_cd              */ request->orders[oidx]->assays[aidx]->orig_result_code_set_cd,
                        /* active_ind             */ 0,
                        /* active_status_cd       */ reqdata->active_status_cd,
                        /* updt_cnt               */ request->orders[oidx]->assays[aidx]->aborh_result_updt_cnt,
                        /* lock_forupdate_ind     */ 1
                    )
                  if (gsub_inactive_aborh_rsl_status != "OK")
                      return(0)
                  endif
               elseif (request->review_queue_ind = 1)
                ;calling from review_queue.
                 call CHG_ABORH_RESULT_2
                    (
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* active_ind             */ 0,
                        /* active_status_cd       */ reqdata->active_status_cd
                    )
                  if (gsub_inactive_aborh_rsl_status != "OK")
                      return(0)
                  endif
               endif
               
                  set gsub_aborh_result_status = "  "
                  call ADD_ABORH_RESULT
                       (
                        /* specimen_id            */ request->orders[oidx].assays[aidx].specimen_id,      ;006
                        /* container_id           */ request->orders[oidx].assays[aidx].container_id,     ;006
                        /* drawn_dt_tm            */ request->orders[oidx].assays[aidx].drawn_dt_tm,      ;006
                        /* person_aborh_id        */ person_aborh_id,   ;006 Set in ADD_PERSON_ABORH
                        /* person_id              */ request->orders[oidx]->person_id,
                        /* encntr_id              */ request->orders[oidx]->encntr_id,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* result_cd              */ request->orders[oidx]->assays[aidx]->bb_result_code_set_cd,
                        /* active_ind             */ 1,
                        /* active_status_cd       */ reqdata->active_status_cd,
                        /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                        /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                        /* active_status_prsnl_id */ request->event_personnel_id
                        )
                  if (gsub_aborh_result_status != "OK")
                     go to Exit_script
                  endif
            endif /* write aborh result check */
            return(1)
        end

      /***********************************************************************
      * update product aborh subroutine                                      *
      ***********************************************************************/
        declare update_product_aborh( ) = i4

        subroutine update_product_aborh( null )
             set sub_product_id = request->orders[oidx]->person_id
             if (request->orders[oidx]->assays[aidx]->upd_blood_product_yn = "Y")     
                 set current_updated_ind = 1
                 set PRODUCT_RH_TEST_ONLY = "N"
                 set PRODUCT_ABO_TEST_ONLY = "N"
                 set PRODUCT_ABO_RH_TEST = "N"
                 set write_result = "N"
                 if (request->orders[oidx]->assays[aidx]->product_new_abo_cd = 0)
                     set PRODUCT_RH_TEST_ONLY = "Y"
                 else
                     if (request->orders[oidx]->assays[aidx]->product_new_rh_cd = 0)
                        set PRODUCT_ABO_TEST_ONLY = "Y"
                     else
                        set PRODUCT_ABO_RH_TEST = "Y"
                     endif
                 endif
                 if (PRODUCT_RH_TEST_ONLY = "Y")
                     /* use product_orig_abo_cd and product_new_rh_cd */
                     if (request->orders[oidx]->assays[aidx]->product_new_rh_cd = 
                         request->orders[oidx]->assays[aidx]->product_orig_rh_cd)
                          /* write result only!!!!! */
                          set write_result = "Y"
                     else   /* new and old product rh codes do not match */
                          set gsub_blood_product_status = "  "
                          /* upd blood product table and write results */
                          call UPD_BLOOD_PRODUCT
                             (
                                /* product_id             */ sub_product_id,
                                /* abo_cd                 */ request->orders[oidx]->assays[aidx]->product_orig_abo_cd,
                                /* rh_cd                  */ request->orders[oidx]->assays[aidx]->product_new_rh_cd,
                                /* active_ind             */ 1,
                                /* updt_cnt               */ request->orders[oidx]->assays[aidx]->blood_product_updt_cnt,
                                /* lock_forupdate_ind     */ 1
                              )
                           if (gsub_blood_product_status != "OK")
                               return(0)
                           endif
                           set write_result = "Y"
                     endif   /* check to determine if new and old rh codes match */
                 elseif (PRODUCT_ABO_TEST_ONLY = "Y")
                    set gsub_blood_product_status = "  "
                    /* use product_new_abo_cd */
                    if (request->orders[oidx]->assays[aidx]->product_new_abo_cd = 
                        request->orders[oidx]->assays[aidx]->product_orig_abo_cd)
                        /* use product_orig_rh_cd */
                        /*write result only !!!!*/
                         set write_result = "Y"
                    else   /* new and old product abo do not match */
                        if (request->orders[oidx]->assays[aidx]->product_orig_abo_cd = 0)
                            /* use product_orig_rh_cd */
                            /* update blood_product and write results */
                           call UPD_BLOOD_PRODUCT
                               (
                                   /* product_id             */ sub_product_id,
                                   /* abo_cd                 */ request->orders[oidx]->assays[aidx]->product_new_abo_cd,
                                   /* rh_cd                  */ request->orders[oidx]->assays[aidx]->product_orig_rh_cd,
                                   /* active_ind             */ 1,
                                   /* updt_cnt               */ request->orders[oidx]->assays[aidx]->blood_product_updt_cnt,
                                   /* lock_forupdate_ind     */ 1
                               )
                           if (gsub_blood_product_status != "OK")
                               return(0)
                           endif
                           set write_result = "Y"
                       else   /* orig product abo is not blank */
                           /* use product_new_rh_cd */
                            /* update blood_product and write results */
                           call UPD_BLOOD_PRODUCT
                               (
                                   /* product_id             */ sub_product_id,
                                   /* abo_cd                 */ request->orders[oidx]->assays[aidx]->product_new_abo_cd,
                                   /* rh_cd                  */ request->orders[oidx]->assays[aidx]->product_new_rh_cd,
                                   /* active_ind             */ 1,
                                   /* updt_cnt               */ request->orders[oidx]->assays[aidx]->blood_product_updt_cnt,
                                   /* lock_forupdate_ind     */ 1
                               )
                           if (gsub_blood_product_status != "OK")
                               return(0)
                           endif
                           set write_result = "Y"
                       endif  /* orig product abo blank or not blank check */
                    endif  /* orig and new product abo match or not match check */
                 elseif (PRODUCT_ABO_RH_TEST = "Y")
                       set gsub_blood_product_status = "  "
                       /* use product_new_abo_cd and product_new_rh_cd */
                       if (request->orders[oidx]->assays[aidx]->product_orig_abo_cd = 0
                           and request->orders[oidx]->assays[aidx]->product_orig_rh_cd = 0)
                           /* update blood_product and results */
                           call UPD_BLOOD_PRODUCT
                                (
                                   /* product_id             */ sub_product_id,
                                   /* abo_cd                 */ request->orders[oidx]->assays[aidx]->product_new_abo_cd,
                                   /* rh_cd                  */ request->orders[oidx]->assays[aidx]->product_new_rh_cd,
                                   /* active_ind             */ 1,
                                   /* updt_cnt               */ request->orders[oidx]->assays[aidx]->blood_product_updt_cnt,
                                   /* lock_forupdate_ind     */ 1
                                )
                           if (gsub_blood_product_status != "OK")
                               return(0)
                           endif
                           set write_result = "Y"
                       else  /* orig product abo and orig product rh are not both blank */
                           if (request->orders[oidx]->assays[aidx]->product_new_abo_cd = 
                               request->orders[oidx]->assays[aidx]->product_orig_abo_cd)
                               if (request->orders[oidx]->assays[aidx]->product_new_rh_cd = 
                                   request->orders[oidx]->assays[aidx]->product_orig_rh_cd)
                                   /*  write results only !!!!! */
                                   set write_result = "Y"
                               else   /* orig product rh does not match new product rh */
                                    /* update blood_product and results */
                                   call UPD_BLOOD_PRODUCT
                                      (
                                       /* product_id             */ sub_product_id,
                                       /* abo_cd                 */ request->orders[oidx]->assays[aidx]->product_new_abo_cd,
                                       /* rh_cd                  */ request->orders[oidx]->assays[aidx]->product_new_rh_cd,
                                       /* active_ind             */ 1,
                                       /* updt_cnt               */ request->orders[oidx]->assays[aidx]->blood_product_updt_cnt,
                                       /* lock_forupdate_ind     */ 1
                                      )
                                   if (gsub_blood_product_status != "OK")
                                       return(0)
                                   endif
                                   set write_result = "Y"
                               endif  /* orig rh and new rh match or do not match check */
                           else   /* orig abo and new abo do not match */
                                   /* update blood_product and results */
                                   call UPD_BLOOD_PRODUCT
                                      (
                                       /* product_id             */ sub_product_id,
                                       /* abo_cd                 */ request->orders[oidx]->assays[aidx]->product_new_abo_cd,
                                       /* rh_cd                  */ request->orders[oidx]->assays[aidx]->product_new_rh_cd,
                                       /* active_ind             */ 1,
                                       /* updt_cnt               */ request->orders[oidx]->assays[aidx]->blood_product_updt_cnt,
                                       /* lock_forupdate_ind     */ 1
                                      )
                                   if (gsub_blood_product_status != "OK")
                                       return(0)
                                   endif
                                   set write_result = "Y"
                            endif   /* orig abo and new abo match or do not match check */
                       endif    /* orig abo and orig rh both blank or not both blank check */
                 endif      /* abo_test_only check */
             else   /*  upd blood product does not equal "Y" */
                   if (request->orders[oidx]->assays[aidx]->upd_blood_product_yn = "N")   /* update_blood_product_yn  = "N" */
                      /* use product_new_abo_cd and product_new_rh_cd */
                      /* write result only!! */
                      set write_result = "Y"
                      set current_updated_ind = 0
                   endif 
             endif    /* upd_blood_product_yn check */
             set conf_product_event_id = 0.0
             if (request->orders[oidx]->assays[aidx]->upd_product_conf_yn = "Y")
                set product_event_id = 0.0
                set re_event_type_cd = confirmed_cd
                /* insert confirmed state */
                set gsub_product_event_status = "  "
                call ADD_PRODUCT_EVENT
                     (
                      /* product_id             */ sub_product_id,
                      /* person_id              */ 0,
                      /* encntr_id              */ 0,
                      /* order_id               */ request->orders[oidx].order_id,
                      /* bb_result_id           */ 0,
                      /* event_type_cd          */ confirmed_cd,
                      /* event_dt_tm            */ cnvtdatetime(request->orders[oidx]->assays[1]->perform_dt_tm), ;lqs
                      /* event_prsnl_id         */ request->event_personnel_id,
                      /* event_status_flag        */ 0,
                      /* override_ind        */ if (request->orders[oidx]->assays[aidx].except_cnt > 0)
                                                   1
                                                else
                                                   0
                                                endif,
                      /* override_reason_cd  */ 
                                                if (request->orders[oidx]->assays[aidx].except_cnt > 0)
                                                   request->orders[oidx]->assays[aidx]->exceptlist[1].override_reason_cd
                                                else
                                                   0
                                                endif,
                      /* related_product_event_id */ 0,
                      /* active_ind               */ 0,
                      /* active_status_cd       */ reqdata->active_status_cd,
;yck                      /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                      /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
                      /* active_status_prsnl_id */ request->event_personnel_id
                    )
                set conf_product_event_id = product_event_id
                 /* determine if change was successful */
                 if (gsub_product_event_status = "FS")
                     set failed = "T"
                     set status_count = status_count + 1
                     /* create an occurrence of the reply status record if the original occurrence previously used */
                     if (status_count > 1)
                         set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                     endif
                     set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                     set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                     set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                     set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                    "Unable to insert confirmed product event due to product event id"
                     return(0)
                 elseif (gsub_product_event_status = "FA")
                     set failed = "T"
                     set status_count = status_count + 1
                     /* create an occurrence of the reply status record if the original occurrence previously used */
                     if (status_count > 1)
                         set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                     endif
                     set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                     set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                     set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                     set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                   "Unable to insert confirmed product event"
                     return(0)
                endif
             endif /* update to confirmed check */
             if (request->orders[oidx]->assays[aidx]->upd_product_unconf_yn = "Y")
                 /* inactivate the unconfirmed event */
                 if (update_in_progress( 0, 0 ) = 0)
                    return(0)
                 endif
             endif
             if (request->orders[oidx]->assays[aidx]->inact_product_avail_yn = "Y")
                 /* inactivate the available event */
                 if (update_in_progress( 0, 0 ) = 0)
                    return(0)
                 endif
             endif
             if (request->orders[oidx]->assays[aidx]->upd_product_avail_yn = "Y")
                set product_event_id = 0.0
                set re_event_type_cd = available_cd
                /* insert available state */
                set gsub_product_event_status = "  "
                call ADD_PRODUCT_EVENT
                    (
                        /* product_id             */ sub_product_id,
                        /* person_id              */ 0,
                        /* encntr_id              */ 0,
                        /* order_id               */ 0,
                        /* bb_result_id           */ 0,
                        /* event_type_cd          */ available_cd,
                        /* event_dt_tm            */ cnvtdatetime(request->orders[oidx]->assays[1]->perform_dt_tm), ;lqs
                        /* event_prsnl_id         */ request->event_personnel_id,     
                        /* event_status_flag        */ 0,
                        /* override_ind             */ 0,
                        /* override_reason_cd       */ 0,
                        /* related_product_event_id */ 0,
                        /* active_ind               */ 1,
                        /* active_status_cd       */ reqdata->active_status_cd,
                        /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                        /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                        /* active_status_prsnl_id */ request->event_personnel_id
                      )
                /* determine if change was successful */
                if (gsub_product_event_status = "FS")
                      set failed = "T"
                      set status_count = status_count + 1
                      /* create an occurrence of the reply status record if the original occurrence previously used */
                      if (status_count > 1)
                         set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                      endif
                      set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                    "Unable to insert available product event due to product event id"
                      return(0)
                 elseif (gsub_product_event_status = "FA")
                      set failed = "T"
                      set status_count = status_count + 1
                      /* create an occurrence of the reply status record if the original occurrence previously used */
                      if (status_count > 1)
                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                      endif
                      set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                  "Unable to insert available product event"
                      return(0)
                 endif
             endif /* update to available check */
             if (request->orders[oidx]->assays[aidx]->add_product_unconf_yn = "Y")
                  set product_event_id = 0.0
                  set re_event_type_cd = unconfirmed_cd
                  /* insert unconfirmed state */
                  set gsub_product_event_status = "  "
                  call ADD_PRODUCT_EVENT
                      (
                       /* product_id             */ sub_product_id,
                       /* person_id              */ 0,
                       /* encntr_id              */ 0,
                       /* order_id               */ 0,
                       /* bb_result_id           */ 0,
                       /* event_type_cd          */ unconfirmed_cd,
                       /* event_dt_tm            */ cnvtdatetime(request->orders[oidx]->assays[1]->perform_dt_tm), ;lqs
                       /* event_prsnl_id         */ request->event_personnel_id,     
                       /* event_status_flag        */ 0,
                       /* override_ind             */ 0,
                       /* override_reason_cd       */ 0,
                       /* related_product_event_id */ 0,
                       /* active_ind               */ 1,
                       /* active_status_cd       */ reqdata->active_status_cd,
                       /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                       /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                       /* active_status_prsnl_id */ request->event_personnel_id
                      )
                  /* determine if change was successful */
                  if (gsub_product_event_status = "FS")
                      set failed = "T"
                      set status_count = status_count + 1
                      /* create an occurrence of the reply status record if the original occurrence previously used */
                      if (status_count > 1)
                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                      endif
                      set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                "Unable to insert unconfirmed product event due to product event id"
                      return(0)
                  elseif (gsub_product_event_status = "FA")
                      set failed = "T"
                      set status_count = status_count + 1
                      /* create an occurrence of the reply status record if the original occurrence previously used */
                      if (status_count > 1)
                          set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                      endif
                      set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                  "Unable to insert unconfirmed product event"
                      return(0)
                 endif
             endif /* update to unconfirmed check */
             set gsub_abo_testing_status = "  "
             set product_event_id = conf_product_event_id
             if (write_result = "Y")
                 set write_result = "N"
                 if (inactivate_abo_testing( 0 ) = 0)
                     go to Exit_Script
                 endif
                 call ADD_ABO_TESTING
                    (
                        /* product_id             */ sub_product_id,
                        /* result_id              */ reply->orders[oidx].assays[aidx].result_id,
                        /* abo_cd                 */ request->orders[oidx]->assays[aidx]->product_new_abo_cd,
                        /* rh_cd                  */ request->orders[oidx]->assays[aidx]->product_new_rh_cd,
                        /* product_event_id       */ conf_product_event_id,
                        /* current_updated_ind    */ current_updated_ind,
                        /* active_ind             */ 1,
                        /* active_status_cd       */ reqdata->active_status_cd,
                        /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
;yck                        /* active_status_dt_tm    */ cnvtdatetime(curdate,curtime3),
                        /* active_status_prsnl_id */ request->event_personnel_id
                     )
                  if (gsub_abo_testing_status != "OK")
                    if (gsub_abo_testing_status = "FA")
                       set failed = "T"
                       set status_count = status_count + 1
                      /* create an occurrence of the reply status record if the original occurrence previously used */
                      if (status_count > 1)
                         set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                      endif
                      set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "ABO_TESTING"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to insert row in ABO_TESTING"
                    elseif (gsub_abo_testing_status = "FS")
                      set failed = "T"
                      set status_count = status_count + 1
                      /* create an occurrence of the reply status record if the original occurrence previously used */
                      if (status_count > 1)
                         set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                      endif
                      set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                      set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Ab Testing"
                      set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                              "Unable to insert aborh result due to next sequence number"
                      endif
                      return(0)
                  endif
             endif /* write result check */
             return(1)
        end

      /***********************************************************************
      * in-activate available subroutine                                     *
      ***********************************************************************/
        declare update_available(dProductId=f8 ) = i4

        subroutine update_available(dProductId)
           set return_value = 0
           set dProd_Event_id = 0.0

           select into "nl:"
                p.*
           from product_event p
                where p.product_id = dProductId
                and p.event_type_cd = available_cd
                and p.active_ind = 1
           detail
                dProd_Event_Id = p.product_event_id
           with nocounter, forupdate(p)

           if (curqual = 0)
               ;No active Available state
               set return_value = 1
           else
               update into product_event pe set
                   pe.active_ind               = 0,
                   pe.active_status_cd         = reqdata->active_status_cd,
                   pe.updt_cnt                 = pe.updt_cnt + 1,
                   pe.updt_dt_tm               = cnvtdatetime(curdate, curtime3),
                   pe.updt_id                  = ReqInfo->updt_id,
                   pe.updt_task                = ReqInfo->updt_task,
                   pe.updt_applctx             = ReqInfo->updt_applctx                   

               where   pe.product_event_id = dProd_Event_id
               with nocounter

               if (curqual = 0)
                  set failed = "T"
                  set status_count = status_count + 1
                  /* create an occurrence of the reply status record if the original occurrence previously used */
                  if (status_count > 1)
                    set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                  endif
                  set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                  set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                  set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                  set reply->status_data->subeventstatus[status_count]->TargetObjectValue =
                                                              "Unable to update available product event"
                  set return_value = 0
               else
                  set return_value = 1
               endif
           endif
           return(return_value)
        end

      /***********************************************************************
      * in-activate abo_testing subroutine                                   *
      ***********************************************************************/
        declare inactivate_abo_testing( ) = i4

        subroutine inactivate_abo_testing( null )
           set return_value = 0
           set cur_updt_cnt = 0

           select into "nl:"
                at.product_id 
           from abo_testing at
                where at.product_id = sub_product_id
                  and at.result_id =  reply->orders[oidx].assays[aidx].result_id
                  and at.active_ind = 1
           detail
                cur_updt_cnt = at.updt_cnt
           with nocounter, forupdate(at)

           if (curqual = 0)
               set failed = "T"
               set status_count = status_count + 1
               /* create an occurrence of the reply status record if the original occurrence previously used */
               if (status_count > 1)
                  set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
               endif
               set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Abo Testing"
               set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                             "Unable to lock abo testing"
               set return_value = 0
           elseif (cur_updt_cnt != request->orders[oidx].assays[aidx]->abo_testing_upd_cnt)
                 set failed = "T"
                 set status_count = status_count + 1
                 /* create an occurrence of the reply status record if the original occurrence previously used */
                 if (status_count > 1)
                      set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                 endif
                 set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                 set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                 set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Abo Testing"
                    set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Update conflict on abo testing"
                 set return_value = 0
           else
                 update into abo_testing at set
                     at.active_ind               = 0,
                     at.active_status_cd         = reqdata->active_status_cd,
                     at.updt_cnt                 = at.updt_cnt + 1,
                     at.updt_dt_tm               = cnvtdatetime(curdate, curtime3),
                     at.updt_id                  = ReqInfo->updt_id,
                     at.updt_task                = ReqInfo->updt_task,
                     at.updt_applctx             = ReqInfo->updt_applctx
                 where at.product_id = sub_product_id
                   and at.result_id =  reply->orders[oidx].assays[aidx].result_id
                   and at.active_ind = 1 
                 with    nocounter
                 if (curqual = 0)
                    set failed = "T"
                    set status_count = status_count + 1
                    /* create an occurrence of the reply status record if the original occurrence previously used */
                    if (status_count > 1)
                      set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                    endif
                    set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                    set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                    set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Abo Testing"
                    set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                "Unable to update abo testing"
                    set return_value = 0
                 else
                    set return_value = 1
                 endif
           endif
           return(return_value)
        end

      /***********************************************************************
      * update crossmatch subroutine                                         *
      ***********************************************************************/
        declare update_crossmatch( ) = i4

        subroutine update_crossmatch( null )
           set hold_product_id = request->orders[oidx]->assays[aidx]->product_id
           if (request->orders[oidx]->assays[aidx]->crossmatch_verify_yn = "Y")

                /* Determine if user wishes to update the product to crossmatch state */
                if (request->orders[oidx]->assays[aidx]->update_to_xm_yn = "Y")
                   /* release available if necessary */
                   if (update_available( hold_product_id ) = 0)
                      return(0)
                   endif

                    set product_event_id = 0.0
                    set re_event_type_cd = crossmatch_cd
                   if (request->orders[oidx]->assays[aidx]->xm_inactive_ind = 0)
                       set xm_active_ind = 1
                       set xm_active_cd = reqdata->active_status_cd
                   else
                       set xm_active_ind = 0
                       set xm_active_cd = reqdata->inactive_status_cd
                   endif 
                    /* insert crossmatch state */
                    set gsub_product_event_status = "  "
                    call ADD_PRODUCT_EVENT
                       (
                        /* product_id          */ request->orders[oidx]->assays[aidx]->product_id,
                        /* person_id           */ request->orders[oidx]->person_id,
                        /* encntr_id           */ request->orders[oidx]->encntr_id,
                        /* order_id            */ request->orders[oidx]->order_id,
                        /* bb_result_id        */ bb_result_seq,
                        /* event_type_cd       */ crossmatch_cd,
                        /* event_dt_tm         */ cnvtdatetime(request->orders[oidx]->assays[1]->perform_dt_tm), ;lqs
                        /* event_prsnl_id      */ request->event_personnel_id,     
                        /* event_status_flag   */ 0,
                        /* override_ind        */ if (request->orders[oidx]->assays[aidx]->except_cnt > 0)
                                                     1
                                                  else
                                                     0
                                                  endif,
                        /* override_reason_cd  */ 
                                        if (request->orders[oidx]->assays[aidx]->except_cnt > 0)
                                           request->orders[oidx]->assays[aidx]->exceptlist[1]->override_reason_cd
                                        else
                                           0
                                        endif,
                        /* related_product_event_id */ 0,
                        /* active_ind             */ xm_active_ind,
                        /* active_status_cd       */ xm_active_cd,
                        /* active_status_dt_tm    */ cnvtdatetime(current->system_dt_tm),
                        /* active_status_prsnl_id */ request->event_personnel_id
                       )
                    /* determine if change was successful */
                    if (gsub_product_event_status = "FS")
                        set failed = "T"
                        set status_count = status_count + 1
                        /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                       "Unable to insert product event due to product event id"
                        return(0)
                    elseif (gsub_product_event_status = "FA")
                        set failed = "T"
                        set status_count = status_count + 1
                        /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                            set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                        "Unable to insert product event"
                        return(0)
                    endif

                    set reply->orders[oidx]->assays[aidx]->xm_prod_event_id = product_event_id

                   if (insert_crossmatch( product_event_id, xm_active_ind, xm_active_cd ) = 0)
                       set failed = "T"
                       set status_count = status_count + 1
                       /* create an occurrence of the reply status record if the original occurrence previously used */
                       if (status_count > 1)
                         set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                       endif
                       set reply->status_data->subeventstatus[status_count]->OperationName = "INSERT"
                       set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                       set reply->status_data->subeventstatus[status_count]->TargetObjectName = 
                                                                                       "Crossmatch"
                       set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                    "Unable to insert crossmatch"
                       return(0)
                    endif
                endif               ; 014
           endif
           return(1)
        end

; ** JOWBeg 007
      /*
       *  Update crossmatch bb_id_nbr subroutine
       */
        declare update_crossmatch_bbidnbr(sub_ucb_order_id, sub_ucb_bb_id_nbr) = i4

        subroutine update_crossmatch_bbidnbr(sub_ucb_order_id, sub_ucb_bb_id_nbr)

            ; ** Retrieve all crossmatchs associated with order_id
            set pe_xm_cnt = 0
            set stat = alterlist(pe_xm_rec->pe_xm, 0)

            set select_ok_ind = 0

            select into "nl:"
                pe.product_event_id

            from
                product_event pe
                , crossmatch xm

            plan    pe      where   pe.order_id                 = sub_ucb_order_id
                                      and pe.order_id           > 0
                                      and pe.order_id           != NULL
                                      and pe.product_event_id   > 0
                                      and pe.product_event_id   != NULL
            join    xm      where   xm.product_event_id         = pe.product_event_id

            head report
                select_ok_ind = 0

            detail
                pe_xm_cnt = pe_xm_cnt + 1
                stat = alterlist(pe_xm_rec->pe_xm, pe_xm_cnt)
                
                pe_xm_rec->pe_xm[pe_xm_cnt]->product_event_id   = pe.product_event_id

            foot report
                select_ok_ind = 1
                
            with nocounter, forupdate(xm), nullreport          

            if (select_ok_ind = 1)
                if (pe_xm_cnt > 0)

                    ; ** Update CROSSMATCH.Bb_Id_Nbr for all crossmatch PRODUCT_EVENT.Product_Event_Id's associated with Order_Id
                    update into crossmatch xm,
                                (dummyt d_xm with seq = value(pe_xm_cnt))
                        set xm.bb_id_nbr          = sub_ucb_bb_id_nbr
                            , xm.updt_cnt         = xm.updt_cnt + 1
                            , xm.updt_dt_tm       = cnvtdatetime(curdate, curtime3)
                            , xm.updt_id          = ReqInfo->updt_id
                            , xm.updt_task        = ReqInfo->updt_task
                            , xm.updt_applctx     = ReqInfo->updt_applctx

                    plan    d_xm
                    join    xm      where   xm.product_event_id = pe_xm_rec->pe_xm[d_xm.seq]->product_event_id

                    with    nocounter, status(pe_xm_rec->pe_xm[d_xm.seq]->status)

                    if (curqual > 0)
                        for (pe_xm = 1 to pe_xm_cnt)
                            if (pe_xm_rec->pe_xm[pe_xm]->status != 1)
                                set failed = "T"
                                set status_count = status_count + 1
                                /* create an occurrence of the reply status record if the original occurrence previously used */
                                if (status_count > 1)
                                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                                endif
                                set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE CROSSMATCH"
                                set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                                set reply->status_data->subeventstatus[status_count]->TargetObjectName = "CROSSMATCH"
                                set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                    concat("Unable to update CROSSMATCH row for Bb_Id_Nbr.  "
                                        , "Order_id = ", cnvtstring(sub_ucb_order_id,32,2)
                                        , ".  Product_Event_Id = ", cnvtstring(pe_xm_rex->pe_xm[pe_xm]->product_event_id,32,2))
                                return(0)
                            endif
                        endfor              
                        return(1)
                    else
                        set failed = "T"
                        set status_count = status_count + 1
                        /* create an occurrence of the reply status record if the original occurrence previously used */
                        if (status_count > 1)
                           set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                        endif
                        set reply->status_data->subeventstatus[status_count]->OperationName = "UPDATE CROSSMATCH"
                        set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectName = "CROSSMATCH"
                        set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                            concat("Unable to update CROSSMATCH row for Bb_Id_Nbr.  "
                                , "Order_id = ", cnvtstring(sub_ucb_order_id,32,2))
                        return(0)
                    endif
                else
                    ; ** No crossmatch rows found associated with order_id
                    return(1)
                endif
            else
                set failed = "T"
                set status_count = status_count + 1
                /* create an occurrence of the reply status record if the original occurrence previously used */
                if (status_count > 1)
                   set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                endif
                set reply->status_data->subeventstatus[status_count]->OperationName = "SELECT PRODUCT_EVENT"
                set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                set reply->status_data->subeventstatus[status_count]->TargetObjectName = "PRODUCT_EVENT"
                set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                    concat("Script Error:PRODUCT_EVENT select for crossmatches encountered errors"
                         , "Order_id = ", cnvtstring(sub_ucb_order_id,32,2))

                return(0)
            endif
        end         ; END SUBROUTINE update_crossmatch_bbidnbr
;** JOWEnd 007                 

      /***********************************************************************
      * in-activate in progress subroutine                                   *
      ***********************************************************************/
        declare update_in_progress( arg_bb_result_id, arg_active_ind ) = i4

        subroutine update_in_progress( arg_bb_result_id, arg_active_ind )
           set return_value = 0
           set cur_updt_cnt = 0
           select into "nl:"
                p.*
           from product_event p
                where p.product_event_id 
                        = request->orders[oidx]->assays[aidx]->inprogress_prod_event_id
           detail
                cur_updt_cnt = p.updt_cnt
           with nocounter, forupdate(p)

           if (curqual = 0)
               set failed = "T"
               set status_count = status_count + 1
               /* create an occurrence of the reply status record if the original occurrence previously used */
               if (status_count > 1)
                  set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
               endif
               set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
               set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
               set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
               set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                             "Unable to lock product event"
               set return_value = 0
           elseif (cur_updt_cnt != request->orders[oidx].assays[aidx]->prod_state_updt_cnt)
                 set failed = "T"
                 set status_count = status_count + 1
                 /* create an occurrence of the reply status record if the original occurrence previously used */
                 if (status_count > 1)
                      set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                 endif
                 set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                 set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                 set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                 if (request->orders[oidx]->assays[aidx]->upd_product_unconf_yn = "Y")
                    set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Update conflict on product event for unconfirmed"
                 elseif (request->orders[oidx]->assays[aidx]->inact_product_avail_yn = "Y")
                    set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Update conflict on product event for available"
                 else
                    set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                               "Update conflict on product event for inprogress"
                 endif
                 set return_value = 0
           else
                 update into product_event pe set
                     pe.bb_result_id             = arg_bb_result_id,
                     pe.active_ind               = arg_active_ind,
                     pe.active_status_cd         = reqdata->active_status_cd,
                     pe.updt_cnt                 = pe.updt_cnt + 1,
                     pe.updt_dt_tm               = cnvtdatetime(curdate, curtime3),
                     pe.updt_id                  = ReqInfo->updt_id,
                     pe.updt_task                = ReqInfo->updt_task,
                     pe.updt_applctx             = ReqInfo->updt_applctx,
                     pe.event_tz                 = if ((CurUTC = 1) and (arg_active_ind = 1))
                                                      CurTimeZoneApp
                                                   else
                                                      0
                                                   endif                      
    
                 where   pe.product_event_id     
                                = request->orders[oidx]->assays[aidx]->inprogress_prod_event_id
                     and pe.updt_cnt      = request->orders[oidx]->assays[aidx]->prod_state_updt_cnt    
                 with    nocounter
                 if (curqual = 0)
                    set failed = "T"
                    set status_count = status_count + 1
                    /* create an occurrence of the reply status record if the original occurrence previously used */
                    if (status_count > 1)
                      set stat = alterlist(reply->status_data->subeventstatus, status_count+1)
                    endif
                    set reply->status_data->subeventstatus[status_count]->OperationName = "CHANGE"
                    set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
                    set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
                    set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                                "Unable to update product event"
                    set return_value = 0
                 else
                    set return_value = 1
                 endif
           endif
           return(return_value)
        end
        
        
      /***********************************************************************
      * add crossmatch state subroutine                                      *
      ***********************************************************************/
%i cclsource:bbt_add_product_event.inc
END     ;end subroutine ADD_PRODUCT_EVENT

      /***********************************************************************
      * add exception subroutine                                             *
      ***********************************************************************/
%i cclsource:bbt_add_bb_exception.inc
        ;end subroutine Add_bb_Exception

      /***********************************************************************
      * add subroutines for person aborh, antibody, antigen                  *
      *     special_testing, and product aborh updates                       *
      ***********************************************************************/
%i cclsource:bbt_add_prs_aborh.inc
END     ;end subroutine ADD_PERSON_ABORH
%i cclsource:bbt_chg_prs_aborh.inc
END     ;end subroutine CHG_PERSON_ABORH
%i cclsource:bbt_add_aborh_rsl.inc
END     ;end subroutine ADD_ABORH_RESULT
%i cclsource:bbt_chg_aborh_rsl.inc
END     ;end subroutine CHG_ABORH_RESULT
%i cclsource:bbt_add_prs_antibody.inc
END     ;end subroutine ADD_PERSON_ANTIBODY
%i cclsource:bbt_chg_prs_antibody.inc
END     ;end subroutine CHG_PERSON_ANTIBODY
%i cclsource:bbt_add_prs_antigen.inc
END     ;end subroutine ADD_PERSON_ANTIGEN
%i cclsource:bbt_chg_prs_antigen.inc
END     ;end subroutine CHG_PERSON_ANTIGEN
%i cclsource:bbt_add_spcl_tst.inc
END     ;end subroutine ADD_SPECIAL_TESTING
%i cclsource:bbt_chg_spcl_tst.inc
END     ;end subroutine CHG_SPECIAL_TESTING
%i cclsource:bbt_add_spcl_tst_rsl.inc
END     ;end subroutine ADD_SPECIAL_TESTING_RESULT
%i cclsource:bbt_chg_spcl_tst_rsl.inc
END     ;end subroutine CHG_SPECIAL_TESTING_RESULT
%i cclsource:bbt_upd_bld_prd.inc
END     ;end subroutine UPD_BLOOD_PRODUCT    
%i cclsource:bbt_add_abo_testing.inc
END     ;end subroutine ADD_ABO_TESTING
%i cclsource:bbt_add_person_rh_phenotype.inc
END     ;end subroutine ADD_PERSON_RH_PHENOTYPE
%i cclsource:bbt_chg_person_rh_phenotype.inc
END     ;end subroutine CHG_PERSON_RH_PHENOTYPE
%i cclsource:bbt_get_rh_phenotype_antigens.inc
END     ;end subroutine GET_RH_PHENOTYPE_ANTIGENS
%I cclsource:bbt_add_person_rh_pheno_result.inc
END     ;end subroutine ADD_PERSON_RH_PHENO_RESULT
%i cclsource:bbt_add_product_rh_phenotype.inc
END     ;end subroutine ADD_PRODUCT_RH_PHENOTYPE
%i cclsource:bbt_chg_product_rh_phenotype.inc
END     ;end subroutine CHG_PRODUCT_RH_PHENOTYPE
%i cclsource:bbt_chg_spcl_tst_by_key.inc
END     ;end subroutine CHG_SPECIAL_TESTING_BY_KEY
%i cclsource:bbt_chg_person_antigen_by_key.inc
END     ;end subroutine CHG_PERSON_ANTIGEN_BY_KEY
%i cclsource:bbt_chg_person_rh_pheno_result.inc
END     ;end subroutine CHG_PERSON_RH_PHENO_RESULT
%i cclsource:bbt_get_pathnet_seq_sub.inc

      /***********************************************************************
      * Insert crossmatch subroutine                                         *
      ***********************************************************************/
         declare insert_crossmatch( arg_product_event_id = f8, arg_xm_active_ind = i2, arg_xm_status_cd = f8  ) = i4

         subroutine insert_crossmatch( arg_product_event_id, arg_xm_active_ind, arg_xm_status_cd)
 
           /* Insert crossmatch record */
            insert into 
               crossmatch c
            set
               c.product_event_id = arg_product_event_id,
               c.product_id = request->orders[oidx]->assays[aidx]->product_id,
               c.person_id = request->orders[oidx]->person_id,
               c.crossmatch_qty = 0,
               c.release_dt_tm = NULL,
               c.release_prsnl_id = 0,
               c.release_reason_cd = 0,
               c.release_qty = 0,
               c.crossmatch_exp_dt_tm 
                   = cnvtdatetime(request->orders[oidx].assays[aidx].crossmatch_expire_dt_tm),
               c.bb_id_nbr = request->orders[oidx].assays[aidx].bb_id_nbr,
               c.reinstate_reason_cd = 0,
               c.xm_reason_cd = request->orders[oidx].assays[aidx].xm_reason_cd,
               c.active_ind = arg_xm_active_ind,
               c.active_status_cd = arg_xm_status_cd,
;yck               c.active_status_dt_tm = cnvtdatetime(curdate,curtime3),
               c.active_status_dt_tm = cnvtdatetime(current->system_dt_tm),
               c.active_status_prsnl_id = request->event_personnel_id,
               c.updt_dt_tm = cnvtdatetime(curdate, curtime3),
               c.updt_id = reqinfo->updt_id,
               c.updt_task = reqinfo->updt_task,
               c.updt_applctx = reqinfo->updt_applctx,
               c.updt_cnt = 0
            plan c
            with nocounter
            return(curqual)
         end


      /***********************015 START NEW CODE ************************/

      /*****************************************************************************
      * This subroutine will write the necessary rows to the pn_recovery_* tables  *
      ******************************************************************************/
         declare insert_pn_recovery_data( ) = i4
         subroutine insert_pn_recovery_data( null )

           declare sub_pn_recovery_child_id  = f8 with public, noconstant(0.0)

           ;declare variables to hold the pn_recovery_detail information
           declare sub_pn_recovery_detail_id     = f8  with public, noconstant(0.0)
           declare pn_dtl_cnt                = i4  with public, noconstant(0)
           declare detail_parent_entity_name = vc  with public, noconstant("")
           declare detail_parent_entity_id   = f8  with public, noconstant(0.0)
           declare sub_detail_mean               = vc  with public, noconstant("")
           declare sub_detail_value              = i4  with public, noconstant(0)
           declare sub_detail_desc               = vc  with public, noconstant("")
    
           ;if this is the first assay for the order, write the pn_recovery rows
           if (reply->orders[oidx].pn_recovery_id = 0.0)
             ;retrieve a pn_recovery_id for this order
             select into "nl:"
               next_seq_nbr = seq(pathnet_recovery_seq ,nextval) 
             from dual
             detail
               reply->orders[oidx].pn_recovery_id = next_seq_nbr
             with nocounter

             if (reply->orders[oidx].pn_recovery_id = 0.0)
               return(0)
             endif
           
             ;insert pn_recovery row
             insert into 
               pn_recovery pr
             set
               pr.pn_recovery_id       = reply->orders[oidx].pn_recovery_id,
               pr.parent_entity_name   = "ORDERS",
               pr.parent_entity_id     = reply->orders[oidx].order_id,
               pr.recovery_type_cd     = pn_recovery_type_cd,
               pr.in_process_flag      = 0,
               pr.expire_dt_tm         = cnvtdatetime(curdate, curtime3),
               pr.failure_cnt          = 0,
               pr.first_failure_dt_tm  = NULL,
               pr.last_failure_dt_tm   = NULL,               
               pr.updt_dt_tm           = cnvtdatetime(curdate, curtime3),
               pr.updt_id              = reqinfo->updt_id,
               pr.updt_task            = reqinfo->updt_task,
               pr.updt_applctx         = reqinfo->updt_applctx,
               pr.updt_cnt             = 0
             with nocounter

             if (curqual = 0)
               set reply->status_data.subeventstatus[1].OperationName =
                  "INSERT"
               set reply->status_data.subeventstatus[1].OperationStatus =
                  "F"
               set reply->status_data.subeventstatus[1].TargetObjectName =
                  "PN_RECOVERY TABLE"
               set reply->status_data.subeventstatus[1].TargetObjectValue =
                  "Unable to insert pn_recovery record"
               return(0)
             endif
             
             ;insert the pn_recovery_detail rows with the correct data
             for (pn_dtl_cnt = 1 to 3)
              
             ;retrieve a sub_pn_recovery_detail_id
               select into "nl:"
                 next_seq_nbr = seq(pathnet_recovery_seq ,nextval) 
               from dual
               detail
                 sub_pn_recovery_detail_id = next_seq_nbr
               with nocounter

               if (sub_pn_recovery_detail_id = 0)
                 return(0)
               endif
              
               ;fill out the values that are to be written to the pn_recovery_detail table
               case (pn_dtl_cnt)
               of 1:
               ;insert pn_recovery_detail row for the Event_dt_Tm
               ;we only want to insert one event_dt_tm for each order
               set sub_detail_mean               = "EVENT_DT_TM"
               set detail_parent_entity_name = "PN_RECOVERY"
               set detail_parent_entity_id   = reply->orders[oidx].pn_recovery_id
               if (CurUTC = 1)
                  set sub_detail_value           = CurTimeZoneApp
               else
                  set sub_detail_value           = 0
               endif

               of 2:
               ;insert pn_recovery_detail row for the complete_ind
               ;we only want to insert one event_dt_tm for each order
               set sub_detail_mean               = "COMPLETE_IND"
               set detail_parent_entity_name = "PN_RECOVERY"
               set detail_parent_entity_id   = reply->orders[oidx].pn_recovery_id
               set sub_detail_value              = request->orders[oidx].complete_ind

               of 3:
               ;insert pn_recovery_detail row for the do_not_chart_ind
               ;we only want to insert one event_dt_tm for each order
               set sub_detail_mean               = "DO_NOT_CHART"
               set detail_parent_entity_name = "PN_RECOVERY"
               set detail_parent_entity_id   = reply->orders[oidx].pn_recovery_id
               set sub_detail_value              = 0
               endcase
               
               insert into 
                 pn_recovery_detail prd
               set
                 prd.pn_recovery_detail_id   = sub_pn_recovery_detail_id,
                 prd.parent_entity_name      = detail_parent_entity_name,
                 prd.parent_entity_id        = detail_parent_entity_id,
                 prd.detail_mean             = sub_detail_mean,
                 prd.detail_dt_tm            = cnvtdatetime(reply->event_dt_tm),
                 prd.detail_value            = sub_detail_value,
                 prd.updt_dt_tm              = cnvtdatetime(curdate, curtime3),
                 prd.updt_id                 = reqinfo->updt_id,
                 prd.updt_task               = reqinfo->updt_task,
                 prd.updt_applctx            = reqinfo->updt_applctx,
                 prd.updt_cnt                = 0               
               with nocounter
            
               if (curqual = 0)
                 set reply->status_data.subeventstatus[1].OperationName =
                    "INSERT"
                 set reply->status_data.subeventstatus[1].OperationStatus =
                    "F"
                 set reply->status_data.subeventstatus[1].TargetObjectName =
                    "PN_RECOVERY_DETAIL TABLE"
                 set reply->status_data.subeventstatus[1].TargetObjectValue =
                    "Unable to insert pn_recovery_detail record"
                 return(0)
               endif
             endfor
           endif

           ;retrieve a pn_recovery_child_id
           select into "nl:"
             next_seq_nbr = seq(pathnet_recovery_seq ,nextval) 
           from dual
           detail
             sub_pn_recovery_child_id = next_seq_nbr
           with nocounter

           if (sub_pn_recovery_child_id = 0)
             return(0)
           endif
           
           ;insert pn_Recovery_child row
           insert into 
             pn_recovery_child prc
           set
             prc.pn_recovery_id       = reply->orders[oidx].pn_recovery_id,
             prc.pn_recovery_child_id = sub_pn_recovery_child_id,
             prc.child_entity_name    = "PERFORM_RESULT",
             prc.child_entity_id      = reply->orders[oidx].assays[aidx].perform_result_id,
             prc.updt_dt_tm           = cnvtdatetime(curdate, curtime3),
             prc.updt_id              = reqinfo->updt_id,
             prc.updt_task            = reqinfo->updt_task,
             prc.updt_applctx         = reqinfo->updt_applctx,
             prc.updt_cnt             = 0
           with nocounter

           if (curqual = 0)
             set reply->status_data.subeventstatus[1].OperationName =
                "INSERT"
             set reply->status_data.subeventstatus[1].OperationStatus =
                "F"
             set reply->status_data.subeventstatus[1].TargetObjectName =
                "PN_RECOVERY_CHILD TABLE"
             set reply->status_data.subeventstatus[1].TargetObjectValue =
                "Unable to insert pn_recovery_child record"
             return(0)
           endif

           ;insert the pn_recovery_detail rows with the correct data
           for (pn_dtl_cnt = 1 to 8)
              
             ;retrieve a sub_pn_recovery_detail_id
             select into "nl:"
               next_seq_nbr = seq(pathnet_recovery_seq ,nextval) 
             from dual
             detail
               sub_pn_recovery_detail_id = next_seq_nbr
             with nocounter

             if (sub_pn_recovery_detail_id = 0)
               return(0)
             endif
              
             ;fill out the values that are to be written to the pn_recovery_detail table
             case (pn_dtl_cnt)
             of 1:
               set sub_detail_mean               = "EVENT_SEQUENCE"
               set detail_parent_entity_name = "PN_RECOVERY_CHILD"
               set detail_parent_entity_id   = sub_pn_recovery_child_id
               set sub_detail_value              = 1
               set sub_detail_desc               = ""
             of 2:
               set sub_detail_mean               = "MAX_DIGITS"
               set detail_parent_entity_name = "PN_RECOVERY_CHILD"
               set detail_parent_entity_id   = sub_pn_recovery_child_id
               set sub_detail_value              = request->orders[oidx].assays[aidx].max_digits
               set sub_detail_desc               = ""
             of 3:
               set sub_detail_mean               = "MIN_DIGITS"
               set detail_parent_entity_name = "PN_RECOVERY_CHILD"
               set detail_parent_entity_id   = sub_pn_recovery_child_id
               set sub_detail_value              = request->orders[oidx].assays[aidx].min_digits
               set sub_detail_desc               = ""
             of 4:
               set sub_detail_mean               = "MIN_DEC_PLACES"
               set detail_parent_entity_name = "PN_RECOVERY_CHILD"
               set detail_parent_entity_id   = sub_pn_recovery_child_id
               set sub_detail_value              = request->orders[oidx].assays[aidx].min_decimal_places
               set sub_detail_desc               = ""
             of 5:
               set sub_detail_mean               = "ANTIBODY_VERIFY"
               set detail_parent_entity_name = "PN_RECOVERY_CHILD"
               set detail_parent_entity_id   = sub_pn_recovery_child_id
               set sub_detail_value              = 0
               set sub_detail_desc               = request->orders[oidx].assays[aidx].antibody_verify_yn
             of 6:
               set sub_detail_mean               = "ANTIGEN_VERIFY"
               set detail_parent_entity_name = "PN_RECOVERY_CHILD"
               set detail_parent_entity_id   = sub_pn_recovery_child_id
               set sub_detail_value              = 0
               set sub_detail_desc               = request->orders[oidx].assays[aidx].antigen_verify_yn
             of 7:
               set sub_detail_mean               = "SPEC_TESTING_VERIFY"
               set detail_parent_entity_name = "PN_RECOVERY_CHILD"
               set detail_parent_entity_id   = sub_pn_recovery_child_id
               set sub_detail_value              = 0
               set sub_detail_desc               = request->orders[oidx].assays[aidx].special_testing_verify_yn
             of 8:
               set sub_detail_mean               = "PRODUCT_ID"
               set detail_parent_entity_name = "PN_RECOVERY_CHILD"
               set detail_parent_entity_id   = sub_pn_recovery_child_id
               set sub_detail_value              = request->orders[oidx]->assays[aidx]->product_id
               set sub_detail_desc               = ""
             endcase
             
             ;insert pn_recovery_detail rows
             insert into 
               pn_recovery_detail prd
             set
               prd.pn_recovery_detail_id   = sub_pn_recovery_detail_id,
               prd.parent_entity_name      = detail_parent_entity_name,
               prd.parent_entity_id        = detail_parent_entity_id,
               prd.detail_mean             = sub_detail_mean,
               prd.detail_value            = sub_detail_value,
               prd.detail_desc             = sub_detail_desc,
               prd.updt_dt_tm              = cnvtdatetime(curdate, curtime3),
               prd.updt_id                 = reqinfo->updt_id,
               prd.updt_task               = reqinfo->updt_task,
               prd.updt_applctx            = reqinfo->updt_applctx,
               prd.updt_cnt                = 0             
             with nocounter

             if (curqual = 0)
               set reply->status_data.subeventstatus[1].OperationName =
                  "INSERT"
               set reply->status_data.subeventstatus[1].OperationStatus =
                  "F"
               set reply->status_data.subeventstatus[1].TargetObjectName =
                  "PN_RECOVERY_DETAIL TABLE"
               set reply->status_data.subeventstatus[1].TargetObjectValue =
                  "Unable to insert pn_recovery_detail record"
               return(0)
             endif

           endfor

           ;subroutine was successfull, return one
           return(1)
         end
         
      /***********************************************************************
      * Execute PCS_MAINTAIN_REVIEW_ITEMS Subroutine                        *
      ***********************************************************************/
         declare execute_maintain_review_items(none = i2) = i2  
         subroutine execute_maintain_review_items(none)

              execute pcs_maintain_review_items with replace (request, request), 
				                     replace (reply, review_maintain_rep)

              if (review_maintain_rep->status_data->status != "S")
                 set reply->status_data->status = "F"
                 set reply->status_data->subeventstatus[1]->OperationName = 
	                review_maintain_rep->status_data->subeventstatus[1]->OperationName
                 set reply->status_data->subeventstatus[1]->OperationStatus = 
                        review_maintain_rep->status_data->subeventstatus[1]->OperationStatus
                 set reply->status_data->subeventstatus[1]->TargetObjectName = 
                        review_maintain_rep->status_data->subeventstatus[1]->TargetObjectName
                 set reply->status_data->subeventstatus[1]->TargetObjectValue = 
                        review_maintain_rep->status_data->subeventstatus[1]->TargetObjectValue
                 return(0)
              endif

              return(1)

         end
      /***********************015 END NEW CODE ************************/


/***********************************************************************
* Exit script                                                          *
***********************************************************************/
#Exit_Script
    if (oidx > 0) 
        if (order_update_complete != "Y")
            set reply->err_accession = 
            uar_fmt_accession(request->orders[oidx]->accession, size(request->orders[oidx]->accession,1))
            set reply->err_catalog_cd = request->orders[oidx]->catalog_cd
            set reply->err_patient_order_ind = request->orders[oidx]->patient_order_ind
            set reply->err_person_product_id = request->orders[oidx]->person_id
            if (aidx > 0)
               if (request->orders[oidx]->assays[aidx]->upd_pat_hist_aborh_yn = "Y")
                 set reply->err_pat_aborh_upd_conflict_ind = pat_aborh_upd_conflict_ind
               endif
            endif
        endif
    endif


    ;**** 012 BEGIN ****   
    set max_assay_cnt = 0

    select into "nl:"
        d.seq

    from (dummyt d with seq = value(nbr_of_orders))

    head report
        max_assay_cnt = 0

    detail
        if (request->orders[d.seq]->assays_cnt > max_assay_cnt)
            max_assay_cnt = request->orders[d.seq]->assays_cnt
        endif

    with nocounter 

    select into "nl:"
        d_o.seq
        , d_a.seq

    from 
        (dummyt d_o with seq = value(nbr_of_orders))
        , (dummyt d_a with seq = value(max_assay_cnt))

    plan d_o
    join d_a where d_a.seq <= request->orders[d_o.seq]->assays_cnt

    detail
        if (request->orders[d_o.seq]->assays[d_a.seq]->upd_pat_hist_aborh_yn = "Y")
            reply->err_pat_aborh_ind = 1
        elseif (request->orders[d_o.seq]->assays[d_a.seq]->product_aborh_verify_yn = "Y")
            reply->err_prod_aborh_ind = 1
        endif

    with nocounter
    ;**** 012 END ****

   ;Determine if need to execute PCS_MAINTAIN_REVIEW_ITEMS
   if ((reply->status_data.status != "F") AND (size(request->review_items, 5) > 0))
      call execute_maintain_review_items(0)
   endif

   set reqinfo->commit_ind = 0
 
    if (reply->status_data.status = "F"
        or reply->status_data.status = "Z") ;013
        set reqinfo->commit_ind = 0
    else
        set reqinfo->commit_ind = 1
        ;            if (request->event_reason = result_status_verified_disp)
        ;               execute cpm_add_clinical_event
        ;            endif 
    endif

;master insert, update include files to free request and reply records.
%i cclsource:gm_i_person_aborh_r0793_cln.inc
%i cclsource:gm_u_person_aborh_r0793_cln.inc
%i cclsource:gm_i_person_rh_phen2989_cln.inc

end go














;Generated by GNU enscript 1.6.4.
