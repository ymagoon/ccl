 ;;Solution_Test/script/PathNet -- BB Transfusion/RESULTENTRYFORBLOODBANK/BBT_GET_TASK_ASSAY_INFO.PRG Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1996 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_get_task_assay_info.prg
        Object name:            bbt_get_task_assay_info
        Request #:              225133

        Product:                Blood Bank
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve task assay information 
                                for specific task assays

        Tables read:            data_map
                                discrete_task_assay
                                assay_processing_r

        Tables updated:         None
        Executing from:         

        Special Notes:          

******************************************************************************/

;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;    *000 08/07/96 Yvonne Klipfel       Initial Release                     *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

             drop program BBT_GET_TASK_ASSAY_INFO:dba go    
             create program BBT_GET_TASK_ASSAY_INFO:dba
     
      /***********************************************************************
      * Request Record                                                       *
      ***********************************************************************/
      /*
      record request
      (
         1 service_resource_cd                = f8
         1 task_assay_qual[x] 
           2 task_assay_cd                    = f8
      )
      */

      /***********************************************************************
      * Reply Record                                                         *
      ***********************************************************************/
      record reply
      ( 1  assays[*]
           2  task_assay_cd            = f8
           2  task_assay_mnemonic      = vc
           2  event_cd                 = f8
           2  default_result_type_cd   = f8
           2  default_result_type_disp = vc
           2  default_result_type_mean = c12
           2  data_map_ind             = i2
           2  max_digits               = i4
           2  min_decimal_places       = i4
           2  min_digits               = i4
           2  result_entry_format      = i4
           2  bb_result_processing_cd  = f8
           2  bb_result_processing_disp = vc
           2  bb_result_processing_mean = c12
%i cclsource:status_block.inc
      )

/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
set reply->status_data->status = "F"
set number_of_assay = size(request->task_assay_qual,5)      
set DATA_MAP_TYPE_FLAG          = 0    ;Fill out with correct value.
declare a_cnt                   = i4

/****************************************************************************
*       Retrieve assay information                                          *
****************************************************************************/
         select into "nl:"
            d1.seq,
            dta.seq,
            apr.seq,
            d2.seq,
            data_map_yn = decode(dm.seq, "Y", "N"),
            dm.seq,
            d3.seq,
            data_map_group_exists = decode(dmg.seq, "Y", "N"),
            dmg.seq
         from
            (dummyt d1 with seq = value(number_of_assay)),
            discrete_task_assay dta,
            assay_processing_r apr,
            dummyt d2,
            data_map dm,
            dummyt d3,
            data_map dmg

         plan  d1
               join    dta  where dta.task_assay_cd = request->task_assay_qual[d1.seq]->task_assay_cd
                            and dta.active_ind = 1 and dta.task_assay_cd > 0
               join    apr  where apr.service_resource_cd = request->service_resource_cd
                            and apr.task_assay_cd = dta.task_assay_cd and apr.active_ind = 1
               join    d2   where d2.seq = 1
               join    dm   where dm.service_resource_cd = apr.service_resource_cd and dm.active_ind = 1
                            and dm.task_assay_cd = apr.task_assay_cd
                            and dm.data_map_type_flag = DATA_MAP_TYPE_FLAG
               join    d3 where d3.seq = 1
               join    dmg  where dmg.service_resource_cd = 0.0
                            and dmg.active_ind = 1 and dmg.task_assay_cd = apr.task_assay_cd
                            and dmg.data_map_type_flag = DATA_MAP_TYPE_FLAG
         head report
             stat = alterlist(reply->assays, 2)
             a_cnt = 0
         detail
             a_cnt = a_cnt + 1
             /* determine if array resize is necessary */
             if (mod(a_cnt,2) = 1 and a_cnt != 1)
                  stat = alterlist(reply->assays, a_cnt + 2)
             endif
             reply->assays[a_cnt].task_assay_cd = dta.task_assay_cd
             reply->assays[a_cnt].task_assay_mnemonic = dta.mnemonic
             reply->assays[a_cnt].event_cd = dta.event_cd
             reply->assays[a_cnt].default_result_type_cd = apr.default_result_type_cd
             if (data_map_yn = "Y")
                 reply->assays[a_cnt].data_map_ind = 1
                 reply->assays[a_cnt].max_digits = dm.max_digits
                 reply->assays[a_cnt].min_decimal_places = dm.min_decimal_places
                 reply->assays[a_cnt].min_digits = dm.min_digits
                 reply->assays[a_cnt].result_entry_format = dm.result_entry_format
             elseif (data_map_group_exists = "Y")
                 reply->assays[a_cnt].data_map_ind = 1
                 reply->assays[a_cnt].max_digits = dmg.max_digits
                 reply->assays[a_cnt].min_decimal_places = dmg.min_decimal_places
                 reply->assays[a_cnt].min_digits = dmg.min_digits
                 reply->assays[a_cnt].result_entry_format = dmg.result_entry_format
             else
                 reply->assays[a_cnt].data_map_ind = 0
             endif
             reply->assays[a_cnt].bb_result_processing_cd = dta.bb_result_processing_cd

         with 
            nocounter,
            outerjoin = d2,
            dontcare = dm,
            dontcare = dmg,
            outerjoin = d3

      /***********************************************************************
      * Resize reply record                                                  *
      ***********************************************************************/
      #Resize_Reply
         if (a_cnt > 0)
            set reply->status_data.status = "S"    ;Successful
         else
            set reply->status_data.status = "Z"    ;Zero
            set a_cnt = 1
         endif
         set stat = alterlist(reply->assays, a_cnt)

         end
         go      

;Generated by GNU enscript 1.6.4.
