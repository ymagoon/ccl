 ;;Solution_Test/script/PathNet -- BB Transfusion/BBT_RESULTGROUPTOOL/BBT_GET_ORDERABLES_BY_MEAN.PRG Turn on black mode

/*~BB~************************************************************************
  *                                                                      *
  *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
  *                              Technology, Inc.                        *
  *       Revision      (c) 1984-1997 Cerner Corporation                 *
  *                                                                      *
  *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
  *  This material contains the valuable properties and trade secrets of *
  *  Cerner Corporation of Kansas City, Missouri, United States of       *
  *  America (Cerner), embodying substantial creative efforts and        *
  *  confidential information, ideas and expressions, no part of which   *
  *  may be reproduced or transmitted in any form or by any means, or    *
  *  retained in any storage or retrieval system without the express     *
  *  written permission of Cerner.                                       *
  *                                                                      *
  *  Cerner is a registered mark of Cerner Corporation.                  *
  *                                                                      *
  ~BE~***********************************************************************/
/*****************************************************************************

        Source file name:       bbt_get_orderables_by_mean.prg
        Object name:            bbt_get_orderables_by_mean
        Request #:              

        Product:                PathNet
        Product Team:           BB Transfusion
        HNA Version:            500
        CCL Version:            4.0

        Program purpose:        Retrieve all orderables from order_catalog
                                for request activity_type_cd cdf_meanings

        Tables read:            code_value, order_catalog

        Tables updated:         None

        Executing from:         VB

        Special Notes:          

******************************************************************************/
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     000 10/15/97 David Hall           Initial Release
;     001 05/10/99 Doug Saus            Replaced code_value select with uar *
;~DE~************************************************************************
;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************

drop program bbt_get_orderables_by_mean:dba go
create program bbt_get_orderables_by_mean:dba

/*
record request
(
 1  typelist[*]
     2  activity_type_cd        = f8
     2  activity_type_mean      = c12
)
*/

record reply
(
 1  qual[*]
     2  catalog_cd      = f8
     2  catalog_disp    = c40
     2  catalog_mean    = c12
     2  catalog_desc    = c60
%i cclsource:status_block.inc
)

/*
 * Initialize constants
 */
    set gsub_program_name = "bbt_get_orderables_by_mean"
    set activity_type_code_set = 106

/*
 * Initialize variables
 */
    set reply->status_data->status = "F"
    set count1 = 0
    set select_ok_ind = 0
    set qual_cnt = 0

/* Determine number of requested activity type cdf_meanings */
    set type_cnt = size(request->typelist, 5)

/* 
 * Retrieve activity type code_values for requested activity type cdf_meanings
 */
;001 begin
    set cdf_meaning = fillstring(12," ")
    set code_value = 0.0
    set idx = 0
    set failed = 0
    for (idx = 1 to type_cnt)
        set cdf_meaning = request->typelist[idx]->activity_type_mean
        set stat = uar_get_meaning_by_codeset(activity_type_code_set,cdf_meaning,1,code_value)
        if (stat = 0)
            set request->typelist[idx]->activity_type_cd = code_value
        else
            set failed = 1
        endif
        call echo(request->typelist[idx]->activity_type_cd)
    endfor
    if (failed = 1)
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "F",
             /* process */ "select code_value for activity_type_cd's",
             /* message */ "code_value select FAILED--Script Error!"
            )
        go to EXIT_SCRIPT
    endif
;001 end

/* 
 * Select all order_catalog rows for requested activity_type_cd's/cdf_meanings
 */
    set select_ok_ind = 0

    set stat = alterlist(reply->qual, 50)

    select into "nl:" 
        d.seq
        , activity_type_mean = request->typelist[d.seq]->activity_type_mean
        , oc.catalog_cd

    from
        (dummyt d with seq = value(type_cnt))
        , order_catalog oc

    plan    d
    join    oc   where  oc.activity_type_cd     = request->typelist[d.seq]->activity_type_cd 
                          and oc.active_ind     = 1

    detail
       qual_cnt = qual_cnt + 1
       if (mod(qual_cnt, 50) = 1 and qual_cnt != 1)
           stat = alterlist(reply->qual, qual_cnt + 49)
       endif
       reply->qual[qual_cnt]->catalog_cd        = oc.catalog_cd

    foot report
        stat = alterlist(reply->qual, qual_cnt)
        select_ok_ind = 1

    with    nocounter, nullreport


    if (select_ok_ind = 1)
        if (curqual = 0)
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "Z",
                 /* process */ "select order_catalog",
                 /* message */ "ZERO order_catalog rows found for requested activity-type cdf_meanings"
                )
            go to EXIT_SCRIPT
        else
            call LOAD_PROCESS_STATUS
                (
                 /* status  */ "S",
                 /* process */ "select order_catalog",
                 /* message */ "SUCCESS"
                )
            go to EXIT_SCRIPT
        endif
    else
        call LOAD_PROCESS_STATUS
            (
             /* status  */ "F",
             /* process */ "select order_catalog",
             /* message */ "select order_catalog FAILED--Script error!"
            )
        go to EXIT_SCRIPT
    endif

    go to EXIT_SCRIPT


subroutine LOAD_PROCESS_STATUS
    (
     sub_status,
     sub_process,
     sub_message
    )

    set reply->status_data->status = sub_status
    set count1 = count1 + 1
    if (count1 > 1)
        set stat = alter(reply->status_data->subeventstatus, count1+1)
    endif
    set reply->status_data->subeventstatus[count1]->OperationName = sub_process
    set reply->status_data->subeventstatus[count1]->OperationStatus = sub_status
    set reply->status_data->subeventstatus[count1]->TargetObjectName = gsub_program_name
    set reply->status_data->subeventstatus[count1]->TargetObjectValue = sub_message
END         ; end subroutine LOAD_PROCESS_STATUS

#EXIT_SCRIPT

;call echo(reply->status_data)
;for (x = 1 to count1)
;    call echo(reply->status_data->subeventstatus[count1]->OperationName)
;    call echo(reply->status_data->subeventstatus[count1]->OperationStatus)
;    call echo(reply->status_data->subeventstatus[count1]->TargetObjectName)
;    call echo(reply->status_data->subeventstatus[count1]->TargetObjectValue)
;endfor
;
;for (x = 1 to qual_cnt)
;    call echo(reply->qual[x]->catalog_cd)
;endfor

end go

;Generated by GNU enscript 1.6.4.
