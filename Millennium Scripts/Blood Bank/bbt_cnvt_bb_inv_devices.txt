 ;;Solution_Test/script/PathNet -- BB Transfusion/BBInventoryDeviceTool/bbt_cnvt_bb_inv_devices.prg Turn on black mode

/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       bbt_cnvt_bb_inv_devices.prg
        Object name:            bbt_cnvt_bb_inv_devices
        Request #:              225###            

        Product:                Blood Bank Transfusion/Donor                       
        Product Team:           PathNet
        HNA Version:            500
        CCL Version:            4.0
            
        Program purpose:        This program transfers the entries from the bb_device table to the 
                                new tables (bb_inv_device and bb_inv_device_r).
        
        Tables read:            bb_device
        Tables updated:         bb_inv_device, bb_inv_device_r
        Executing from:         
        Special Notes:          N/A

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     001 08/19/98 Matt Benson          Initial Release                     *
;     002 03/25/99 Matt Benson	        Switched to use UARs                *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************





drop program bbt_cnvt_bb_inv_devices:dba go
create program bbt_cnvt_bb_inv_devices:dba

%i cclsource:bbt_get_pathnet_seq_sub.inc

Record Reply
(
 1 qual[*] 
    2  bb_inv_device_id         =  f8
    2  description              = c40
    2  device_type_cd           =  f8
    2  updt_cnt                 =  i4
    2  updt_id                  =  f8
    2  updt_task                =  i4
    2  updt_applctx             =  i4
    2  active_ind               =  i2
    2  active_status_cd         =  f8
    2  active_status_prsnl_id   =  f8
    2  bb_inv_device_r_id       =  f8
    2  device_location_cd       =  f8
    2  device_invarea_cd        =  f8
    2  device_srvres_cd         =  f8
)

set new_device_id = 0.0
set loop = 0
set qual_cnt = 0
set stat = alterlist(reply->qual, 10)
set locn_cd = 0.0
set invarea_cd = 0.0
set srvres_cd = 0.0

;002 begin
set stat = uar_get_meaning_by_codeset(17396, "BBPATLOCN", 1, locn_cd)

set stat = uar_get_meaning_by_codeset(17396, "BBINVAREA", 1, invarea_cd)

set stat = uar_get_meaning_by_codeset(17396, "BBSRVRESRC", 1, srvres_cd)
; 002 end

select into "nl:" * from bb_device bd where bd.device_id NOT in (0.0, null)

head report
    qual_cnt = 0

detail 
    
    qual_cnt = qual_cnt + 1
    if (mod(qual_cnt, 10) = 1 and qual_cnt != 1)
        stat = alterlist(reply->qual, qual_cnt + 9)
    endif    
    reply->qual[qual_cnt]->bb_inv_device_id     = bd.device_id  
    reply->qual[qual_cnt]->description          = bd.description
    reply->qual[qual_cnt]->device_type_cd       = bd.device_type_cd
    reply->qual[qual_cnt]->updt_cnt             = bd.updt_cnt
    reply->qual[qual_cnt]->updt_id              = bd.updt_id
    reply->qual[qual_cnt]->updt_task            = bd.updt_task
    reply->qual[qual_cnt]->updt_applctx         = bd.updt_applctx
    reply->qual[qual_cnt]->active_ind           = bd.active_ind
    reply->qual[qual_cnt]->active_status_cd     = bd.active_status_cd
    reply->qual[qual_cnt]->active_status_prsnl_id = bd.active_status_prsnl_id
    reply->qual[qual_cnt]->bb_inv_device_r_id       = new_device_id
    reply->qual[qual_cnt]->device_location_cd              = bd.location_cd
    reply->qual[qual_cnt]->device_invarea_cd            = bd.inventory_area_cd
    reply->qual[qual_cnt]->device_srvres_cd             = bd.service_resource_cd
with counter, outerjoin(d_bdr)  


set stat = alterlist(reply->qual, qual_cnt)    
for (loop = 1 to qual_cnt)
    insert into bb_inv_device bbd set 
        bbd.bb_inv_device_id             = reply->qual[loop]->bb_inv_device_id
        , bbd.device_type_cd             = reply->qual[loop]->device_type_cd
        , bbd.active_ind                 = reply->qual[loop]->active_ind
        , bbd.updt_cnt                   = reply->qual[loop]->updt_cnt
        , bbd.updt_dt_tm                 = cnvtdatetime(curdate, curtime3)
        , bbd.updt_id                    = reply->qual[loop]->updt_id
        , bbd.updt_task                  = reply->qual[loop]->updt_task
        , bbd.updt_applctx               = reply->qual[loop]->updt_applctx
        , bbd.active_status_cd           = reply->qual[loop]->active_status_cd
        , bbd.active_status_dt_tm        = cnvtdatetime(curdate, curtime3)
        , bbd.active_status_prsnl_id     = reply->qual[loop]->active_status_prsnl_id
        , bbd.description                = reply->qual[loop]->description
endfor
for (loop = 1 to qual_cnt)
if (reply->qual[loop]->device_location_cd > 0) 
set new_device_id = NEXT_PATHNET_SEQ(0)
    insert into bb_inv_device_r bdr set
        bdr.bb_inv_device_r_id           = new_device_id
        , bdr.bb_inv_device_id           = reply->qual[loop]->bb_inv_device_id
        , bdr.device_r_cd                = reply->qual[loop]->device_location_cd
        , bdr.device_r_type_cd           = locn_cd      ;Locations
        , bdr.updt_cnt                   = reply->qual[loop]->updt_cnt
        , bdr.updt_dt_tm                 = cnvtdatetime(curdate, curtime3)
        , bdr.updt_id                    = reply->qual[loop]->updt_id
        , bdr.updt_task                  = reply->qual[loop]->updt_task
        , bdr.updt_applctx               = reply->qual[loop]->updt_applctx
        , bdr.active_ind                 = reply->qual[loop]->active_ind
        , bdr.active_status_cd           = reply->qual[loop]->active_status_cd
        , bdr.active_status_dt_tm        = cnvtdatetime(curdate, curtime3)
        , bdr.active_status_prsnl_id     = reply->qual[loop]->active_status_prsnl_id
endif
endfor
for (loop = 1 to qual_cnt)
if (reply->qual[loop]->device_invarea_cd > 0)
set new_device_id = NEXT_PATHNET_SEQ(0)
    insert into bb_inv_device_r bdr set
        bdr.bb_inv_device_r_id           = new_device_id
        , bdr.bb_inv_device_id           = reply->qual[loop]->bb_inv_device_id
        , bdr.device_r_cd                = reply->qual[loop]->device_invarea_cd
        , bdr.device_r_type_cd           = invarea_cd      ;Inventory Areas
        , bdr.updt_cnt                   = reply->qual[loop]->updt_cnt
        , bdr.updt_dt_tm                 = cnvtdatetime(curdate, curtime3)
        , bdr.updt_id                    = reply->qual[loop]->updt_id
        , bdr.updt_task                  = reply->qual[loop]->updt_task
        , bdr.updt_applctx               = reply->qual[loop]->updt_applctx
        , bdr.active_ind                 = reply->qual[loop]->active_ind
        , bdr.active_status_cd           = reply->qual[loop]->active_status_cd
        , bdr.active_status_dt_tm        = cnvtdatetime(curdate, curtime3)
        , bdr.active_status_prsnl_id     = reply->qual[loop]->active_status_prsnl_id
endif
endfor
for (loop = 1 to qual_cnt)
if (reply->qual[loop]->device_srvres_cd > 0)
set new_device_id = NEXT_PATHNET_SEQ(0)
    insert into bb_inv_device_r bdr set
        bdr.bb_inv_device_r_id           = new_device_id
        , bdr.bb_inv_device_id           = reply->qual[loop]->bb_inv_device_id
        , bdr.device_r_cd                = reply->qual[loop]->device_srvres_cd
        , bdr.device_r_type_cd           = srvres_cd    ;Service Resources
        , bdr.updt_cnt                   = reply->qual[loop]->updt_cnt
        , bdr.updt_dt_tm                 = cnvtdatetime(curdate, curtime3)
        , bdr.updt_id                    = reply->qual[loop]->updt_id
        , bdr.updt_task                  = reply->qual[loop]->updt_task
        , bdr.updt_applctx               = reply->qual[loop]->updt_applctx
        , bdr.active_ind                 = reply->qual[loop]->active_ind
        , bdr.active_status_cd           = reply->qual[loop]->active_status_cd
        , bdr.active_status_dt_tm        = cnvtdatetime(curdate, curtime3)
        , bdr.active_status_prsnl_id     = reply->qual[loop]->active_status_prsnl_id
endif
endfor
commit
end go

;Generated by GNU enscript 1.6.4.
