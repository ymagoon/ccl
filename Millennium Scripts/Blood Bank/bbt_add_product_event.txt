 ;;Solution_Test/script/PathNet -- BB Transfusion/BBT_ADDPRODUCTEVENT/BBT_ADD_PRODUCT_EVENT.PRG Turn on black mode


/*~BB~************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/

/*****************************************************************************

        Source file name:       BBT_ADD_PRODUCT_EVENT
        Object name:            BBT_ADD_PRODUCT_EVENT
        Request #:              225069

        Product:                PATHNET
        Product Team:           BLOOD BANK
        HNA Version:            500
        CCL Version:            4.0
        
        Program purpose:        Inserts a product event into the product_event table

        Tables read:            CODE_VALUE
        Tables updated:         PRODUCT_EVENT
        Executing from:         ##

        Special Notes:          NA

******************************************************************************/

 
;~DB~************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG              *
;    ************************************************************************
;    *                                                                      *
;    *Mod Date     Engineer             Comment                             *
;    *--- -------- -------------------- ----------------------------------- *
;     ### 06/05/96 Yvonne Klipfel       Initial Release                     *
;    *001 04/05/99 Matt Benson		Changed select on CV to UAR call    *
;~DE~************************************************************************


;~END~ ******************  END OF ALL MODCONTROL BLOCKS  ********************
drop program bbt_add_product_event:dba go
create program bbt_add_product_event:dba

/****************************************************************************
*       Request record                                                      *
*****************************************************************************/
/*
record request
1  qual[x]
   2  product_id             = f8
   2  person_id              = f8
   2  encntr_id              = f8
   2  order_id               = f8
   2  bb_result_id           = f8
   2  event_type_meaning     = c12
   2  event_dt_tm            = dq8
   2  event_prsnl_id         = f8
)
*/

/****************************************************************************
*       Reply record                                                        *
*****************************************************************************/
record reply
(
1  qual[1]
   2  product_id	= f8
   2  event_id		= f8
%i cclsource:status_block.inc
)

/****************************************************************************
*       Initialize Variables                                                *
*****************************************************************************/
declare bb_result_seq           = f8
declare event_type_cd           = f8
declare event_prsnl_id  = f8

set reply->status_data->status = "F"
set number_of_process = cnvtint(size(request->qual,5))
set failed = "F"
set status_count = 0
set partial_update = "F"
set stat = alter(reply->qual, number_of_process)
set product_event_id = 0.0
set gsub_product_event_status = "  "
set event_type_mean = "               "     ;001

%i cclsource:bbt_get_code_value.inc   

%i cclsource:bbt_add_product_event.inc
END     ; end subroutine ADD_PRODUCT_EVENT

 /***********************************************************************
  * Insert the new product event                                        *
  ***********************************************************************/

for (x = 1 to number_of_process)
     set event_type_cd = 0.0
     set bb_result_seq = 0.0

     /* select the event type state to be used */
     set event_type_mean = request->qual[x]->event_type_meaning     ;001
     set event_type_cd = GET_CODE_VALUE(1610, event_type_mean)      ;001

     if (event_type_cd = 0.0)
         set failed = "T"
         set status_count = status_count + 1
         /* create an occurrence of the reply status record if the original occurrence previously used */
         if (status_count > 1)
            set stat = alter(reply->status_data->subeventstatus, status_count+1)
         endif
         set reply->status_data->subeventstatus[status_count]->OperationName = "GET"
         set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
         set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Code Value"
         set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                               "Unable to retrieve code value"
     else

         if (request->qual[x]->bb_result_id > 0)
            set bb_result_seq = request->qual[x]->bb_result_id
         endif

         if (request->qual[x]->event_dt_tm > 0)
            set event_dt_tm = cnvtdatetime(request->qual[x]->event_dt_tm)
         else
            set event_dt_tm = cnvtdatetime(curdate,curtime3)
         endif

         if (request->qual[x]->event_prsnl_id > 0)
            set event_prsnl_id = request->qual[x]->event_prsnl_id
         else
            set event_prsnl_id = reqinfo->updt_id
         endif

         /* insert state record */
         call ADD_PRODUCT_EVENT
            (
              /* product_id             */   request->qual[x]->product_id,
              /* person_id              */   request->qual[x]->person_id,
              /* encntr_id              */   request->qual[x]->encntr_id,
              /* order_id               */   request->qual[x]->order_id,
              /* bb_result_id           */   bb_result_seq,
              /* event_type_cd          */   event_type_cd,
              /* event_dt_tm            */   event_dt_tm,
              /* event_prsnl_id         */   event_prsnl_id,
              /* event_status_flag      */   0,
              /* override_ind           */   0,
              /* override_reason_cd     */   0,
              /* related_product_event_id */ 0,
              /* active_ind             */   1,
              /* active_status_cd       */   reqdata->active_status_cd,
              /* active_status_dt_tm    */   cnvtdatetime(curdate,curtime3),
              /* active_status_prsnl_id */   reqinfo->updt_id
             )
         /* determine if insert was successful */
         if (gsub_product_event_status = "FS")
             set failed = "T"
             set status_count = status_count + 1
             /* create an occurrence of the reply status record if the original occurrence previously used */
             if (status_count > 1)
                set stat = alter(reply->status_data->subeventstatus, status_count+1)
             endif
             set reply->status_data->subeventstatus[status_count]->OperationName = "ADD"
             set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
             set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
             set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                "Unable to insert product event due to product event id"
         elseif (gsub_product_event_status = "FA")
             set failed = "T"
             set status_count = status_count + 1
             /* create an occurrence of the reply status record if the original occurrence previously used */
             if (status_count > 1)
                set stat = alter(reply->status_data->subeventstatus, status_count+1)
             endif
             set reply->status_data->subeventstatus[status_count]->OperationName = "ADD"
             set reply->status_data->subeventstatus[status_count]->OperationStatus = "F"
             set reply->status_data->subeventstatus[status_count]->TargetObjectName = "Product Event"
             set reply->status_data->subeventstatus[status_count]->TargetObjectValue = 
                                                              "Unable to insert product event"
         else
             set partial_update = "T"
         endif
         set reply->qual[x]->product_id = request->qual[x]->product_id
         set reply->qual[x]->event_id = product_event_id
    endif
endfor

/****************************************************************************
*       exit_script                                                         *
* Determine if total failure, partial success or total success occurred     *
*****************************************************************************/
#exit_script
if (failed = "T" and partial_update = "F")
   set reqinfo->commit_ind = 0
elseif (failed = "T" and partial_update = "T")
   set reqinfo->commit_ind = 1
   set reply->status_data->status = "P"
else
   set reqinfo->commit_ind = 1
   set reply->status_data->status = "S"
endif

end go

;Generated by GNU enscript 1.6.4.
