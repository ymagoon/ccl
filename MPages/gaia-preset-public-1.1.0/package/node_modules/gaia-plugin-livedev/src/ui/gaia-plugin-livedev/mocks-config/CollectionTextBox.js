import { UIComponent, composite,  helpers } from "MPageFusion";
import { DISPATCH, MOCK_RESPONSE_LOCATION_CHANGE, MOCK_RESPONSE_COLLECTION_CHANGE, MOCK_REFRESH_COLLECTION } from "../actions";
import { runCommand } from "Gaia";
const { form: { FormTextBox }} = composite;
const { props: { forwardProp }} = helpers;

/**
 * Events private to this control.
 * @type {{VALUE_CHANGE: string}}
 */
const PRIVATE_EVENTS = {
    VALUE_CHANGE: "__CollectionTextBox::valueChange__"
};

/**
 * Creates the text box to select the location of the collection of recorded responses
 * @class
 */
export default class CollectionTextBox extends UIComponent {
    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            mockResponseLocation: (mockResponseLocation) => {
                this.getChild("input").setProp("value", mockResponseLocation)
            },
            showErrorText: forwardProp(this, "showErrorText", "input")
        }
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                input: new FormTextBox({
                    value: this.getProp("mockResponseLocation"),
                    helperHandler: () => "Enter the path to your artifact's mocked responses.",
                    errorHandler: () => "The file does not exist or the json object is not formatted correctly.",
                    showHelperText: true,
                    showErrorText: this.getProp("showErrorText"),
                    display: "Mocked responses location",
                    valueChangeEventName: PRIVATE_EVENTS.VALUE_CHANGE
                })
            }
        ]
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(PRIVATE_EVENTS.VALUE_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.VALUE_CHANGE);
            this.emit(DISPATCH, {
                type: MOCK_RESPONSE_LOCATION_CHANGE,
                payload: payload
            });
            runCommand("injector", "saveMockResponses", {
                mockResponseLocation: payload.value
            }).then((resp) => {
                this.emit(MOCK_REFRESH_COLLECTION);
            });

        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return this.renderChildren();
    }
}
