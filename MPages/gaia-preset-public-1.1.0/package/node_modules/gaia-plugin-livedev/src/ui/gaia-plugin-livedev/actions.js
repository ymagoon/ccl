/**
 * @file This file contains the various actions for the livedev plugin.
 */

import { runCommand, rootUrl } from "Gaia";

const AUTH_USERNAME_CHANGE = "LiveDev::Auth::usernameChange";
const AUTH_PASSWORD_CHANGE = "LiveDev::Auth::passwordChange";
const AUTH_DOMAIN_CHANGE = "LiveDev::Auth::domainChange";
const BEDROCK_MOCK_LOCATION_CHANGE = "LiveDev::BedrockMockLocation::change";
const CANCEL_LAUNCH = "LiveDev::cancelLaunch";
const CCL_PROGRAM_CHANGE = "LiveDev::CCLProgram::change";
const CONFIG_SAVE_IN_PROGRESS = "LiveDev::Config::save::progress";
const CSS_LOCATION_CHANGE = "LiveDev::CSSLocation::change";
const DISPATCH = "LiveDev::dispatch";
const ENABLE_BEDROCK_MOCKS = "LiveDev::BedrockMockEnable::change";
const I18N_LOCATION_CHANGE = "LiveDev::I18nLocation::change";
const MOCK_RESPONSE_LOCATION_CHANGE = "LiveDev::MockResponseLocation::change";
const MOCK_RESPONSE_COLLECTION_CHANGE = "LiveDev::MockResponseCollection::change";
const MOCK_REFRESH_COLLECTION = "LiveDev::MockResponseCollectionRefresh::change";
const MOCK_RESPONSE_COLLECTION_NAMES = "LiveDev::MockResponseCollectionNames::change";
const PERFORM_LAUNCH = "LiveDev::performLaunch";
const PROGRAM_PARAMS_CHANGE = "LiveDev::ProgramParams::change";
const REQUEST_LAUNCH = "LiveDev::requestLaunch";
const SAVE_CONFIG = "LiveDev::save";
const SOURCE_CODE_LOCATION_CHANGE = "LiveDev::SourceCodeLocation::change";
const STATIC_CONTENT_LOCATION_CHANGE = "LiveDev::StaticContent::locationChange";
const WEBPACK_ENABLE = "LiveDev::Webpack::enable";
const WEBPACK_AUTO_REFRESH = "LiveDev::Webpack::autoRefresh";
const WEBPACK_TARGET_CHANGE = "LiveDev::Webpack::targetChange";
const WEBSERVICE_CHANGE = "LiveDev::Config::webserviceChange";

const RECORD_STATE_CHANGE = "LiveDev::Recorder::recordStateChanged";
const MOCK_DATA_CHANGE = "LiveDev::Recorder::mockDataChanged";
const COLLECTION_TEXT_CHANGE = "LiveDev::Recorder::collectionTextChanged";

/**
 * Configures the live-dev plugin.
 * @param {String} cssLocation - The CSS location path.
 * @param {String} i18nLocation - The i18n location path.
 * @param {String} sourceCodeLocation - The source-code location path.
 * @param {String} bedrockMocksLocation - The bedrock mocks location path.
 * @param {Boolean} isBedrockEnabled - Flag for whether bedrock mocks should be used or not.
 * @param {String} cclProgram - The CCL driver program.
 * @param {String} programParams - The CCL program parameters.
 * @param {object} artifactConfig - Object used for webpack settings.
 * @param {String} mockResponseLocation - Filepath of mock responses.
 * @param {String} mockResponseCollection - Key of mock responses required for mock responses collection.
 * @param {String} webServiceUrl - Url of the webservice.
 * @param {Object} auth - details for the user logging in to Millennium
 * @returns {Promise} Resolved when the live-dev plugin is configured.
 */
const configureLiveDev =
    ({
        cssLocation,
        i18nLocation,
        sourceCodeLocation,
        bedrockMocksLocation,
        isBedrockEnabled,
        cclProgram,
        programParams,
        artifactConfig,
        mockResponseLocation,
        mockResponseCollection,
        webServiceUrl,
        auth
    }) => () =>
        runCommand("livedev", "configureLiveDev", {
            cssLocation,
            i18nLocation,
            sourceCodeLocation,
            bedrockMocksLocation,
            isBedrockEnabled,
            cclProgram,
            programParams,
            mockResponseLocation,
            mockResponseCollection,
            isWebpackEnabled: artifactConfig.isWebpackEnabled,
            isWebpackAutoRefreshEnabled: artifactConfig.isWebpackAutoRefreshEnabled,
            webServiceUrl,
            username: auth.username,
            domain: auth.domain
        });

/**
 * Configures the content server plugin.
 * @param {String} cssLocation - The CSS location path.
 * @param {String} i18nLocation - The i18n location path.
 * @param {String} staticContentLocation - The static content location path.
 * @param {String} sourceCodeLocation - The source-code location path.
 * @param {Boolean} isBedrockEnabled - Flag for whether bedrock mocks should be used or not.
 * @param {String} bedrockMocksLocation - The bedrock mocks location path.
 * @returns {Promise} Resolved when the contentserver plugin is configured.
 */
const configureContentServer =
    ({ cssLocation, i18nLocation, staticContentLocation, sourceCodeLocation, isBedrockEnabled, bedrockMocksLocation }) => () =>
        runCommand("livedev", "configureContentServer", { cssLocation, i18nLocation, staticContentLocation, sourceCodeLocation, isBedrockEnabled, bedrockMocksLocation });

/**
 * Configures the injector plugin.
 * @param {String} cssLocation - The CSS location path.
 * @param {String} i18nLocation - The i18n location path.
 * @param {String} cclProgram - The CCL driver program.
 * @param {String} sourceCodeLocation - The source-code location path.
 * @param {String} bedrockMocksLocation - The bedrock mocks location path.
 * @param {Boolean} isBedrockEnabled - Flag for whether bedrock mocks should be used or not.
 * @param {object} artifactConfig - Object used for webpack settings.
 * @param {String} webServiceUrl - Url of the webservice.
 * @param {String} mockResponseLocation - File-path of mock responses.
 * @param {String} mockResponseCollection - Key of mock responses required for mock responses collection.
 * @returns {Promise} Resolved when the injector plugin is configured.
 */
const configureInjector =
    ({ cssLocation,
        i18nLocation,
        cclProgram,
        sourceCodeLocation,
        bedrockMocksLocation,
        isBedrockEnabled,
        artifactConfig,
        webServiceUrl,
        mockResponseLocation,
        mockResponseCollection
        }) => () =>
        runCommand(
            "livedev",
            "configureInjector",
            {
                webServiceUrl,
                cssLocation,
                i18nLocation,
                cclProgram,
                sourceCodeLocation,
                bedrockMocksLocation,
                isBedrockEnabled,
                webpackTarget: artifactConfig.webpackTargets[artifactConfig.webpackTarget],
                isWebpackEnabled: artifactConfig.isWebpackEnabled,
                isWebpackAutoRefreshEnabled: artifactConfig.isWebpackAutoRefreshEnabled,
                rootUrl: rootUrl(),
                mockResponseLocation: mockResponseLocation,
                mockResponseCollection: mockResponseCollection

            }
        );

/**
 * Saves all configuration for the livedev plugin and depencency plugins.
 * @param {Object} state - The state of the livedev plugin.
 * @returns {Promise} Resolved when the livedev, contentserver, and injector plugins have all been saved.
 */
const saveAllConfig = (state) => [
        configureLiveDev(state),
        configureContentServer(state),
        configureInjector(state)
    ].reduce((acc, next) => acc.then(() => next()), Promise.resolve());

/**
 * Reads the mock response collection file set in the injector settings and returns formatted array for select box.
 * @param {string} filePath - Path to mocked responses.
 * @returns {array} Array of collection names.
 */
const retrieveMockResponseCollectionNames = () => (
    runCommand(
        "injector",
        "retrieveMockResponseCollectionNames",
        {}
    )
);

export {
    AUTH_DOMAIN_CHANGE,
    AUTH_PASSWORD_CHANGE,
    AUTH_USERNAME_CHANGE,
    BEDROCK_MOCK_LOCATION_CHANGE,
    CANCEL_LAUNCH,
    CCL_PROGRAM_CHANGE,
    COLLECTION_TEXT_CHANGE,
    CONFIG_SAVE_IN_PROGRESS,
    CSS_LOCATION_CHANGE,
    I18N_LOCATION_CHANGE,
    DISPATCH,
    ENABLE_BEDROCK_MOCKS,
    MOCK_DATA_CHANGE,
    MOCK_RESPONSE_LOCATION_CHANGE,
    MOCK_RESPONSE_COLLECTION_CHANGE,
    MOCK_REFRESH_COLLECTION,
    MOCK_RESPONSE_COLLECTION_NAMES,
    PERFORM_LAUNCH,
    PROGRAM_PARAMS_CHANGE,
    RECORD_STATE_CHANGE,
    REQUEST_LAUNCH,
    SAVE_CONFIG,
    SOURCE_CODE_LOCATION_CHANGE,
    STATIC_CONTENT_LOCATION_CHANGE,
    WEBPACK_AUTO_REFRESH,
    WEBPACK_ENABLE,
    WEBPACK_TARGET_CHANGE,
    WEBSERVICE_CHANGE,
    saveAllConfig,
    retrieveMockResponseCollectionNames
};
