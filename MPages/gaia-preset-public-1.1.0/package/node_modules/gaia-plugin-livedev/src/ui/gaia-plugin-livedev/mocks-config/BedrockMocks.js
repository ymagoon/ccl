import { UIComponent, composite } from "MPageFusion";
import { DISPATCH, BEDROCK_MOCK_LOCATION_CHANGE, ENABLE_BEDROCK_MOCKS } from "../actions";
const { form: { FormTextBox, FormCheckbox }} = composite;

/**
 * Events private to this control.
 * @type {{VALUE_CHANGE: string}}
 */
const PRIVATE_EVENTS = {
    LOCATION_CHANGE: "__BedrockMockLocationInput::valueChange__",
    ENABLE_BEDROCK_CHANGE: "__EnableBedrockMocks::valueChange__"
};

/**
 * Creates an input for the i18n location.
 * @class i18nLocationInput
 */
class BedrockMocks extends UIComponent {
    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isBedrockEnabled: (isBedrockEnabled) => this.getChild("enableBedrockMock").setProp("value", isBedrockEnabled),
            isLocationEnabled: (isLocationEnabled) => this.getChild("input").setProp("isDisabled", !isLocationEnabled),
            value: (value) => this.getChild("input").setProp("value", value)
        }
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                enableBedrockMock: new FormCheckbox({
                    display: "Enable Bedrock Mocks",
                    valueChangeEventName: PRIVATE_EVENTS.ENABLE_BEDROCK_CHANGE
                })
            },
            {
                input: new FormTextBox({
                    helperHandler: () => "Enter the path to your artifact's bedrock mocks",
                    showHelperText: true,
                    display: "Bedrock Mocks Location",
                    valueChangeEventName: PRIVATE_EVENTS.LOCATION_CHANGE
                })
            }
        ]
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(PRIVATE_EVENTS.LOCATION_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.LOCATION_CHANGE);
            this.emit(DISPATCH, {
                type: BEDROCK_MOCK_LOCATION_CHANGE,
                payload: payload
            });
        });
        this.on(PRIVATE_EVENTS.ENABLE_BEDROCK_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.ENABLE_BEDROCK_CHANGE);
            this.emit(DISPATCH, {
                type: ENABLE_BEDROCK_MOCKS,
                payload: { isEnabled: payload.value }
            });
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return this.renderChildren();
    }
}

export default BedrockMocks;
