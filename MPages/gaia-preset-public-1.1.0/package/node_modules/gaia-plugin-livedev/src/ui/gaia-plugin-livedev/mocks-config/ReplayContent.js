import { atomic, UIComponent, composite, helpers } from "MPageFusion";
import { runCommand } from "Gaia";
import { DISPATCH, MOCK_RESPONSE_LOCATION_CHANGE, MOCK_RESPONSE_COLLECTION_CHANGE, MOCK_REFRESH_COLLECTION } from "../actions";
import CollectionTextBox from "./CollectionTextBox";

const { form: { FormTextBox }} = composite;
const { selection: { Select }} = atomic;
const { props: { forwardProp }} = helpers;

/**
 * Events private to this control.
 * @type {{VALUE_CHANGE: string}}
 */
const PRIVATE_EVENTS = {
    VALUE_CHANGE: "__MockResponseLocationInput::valueChange__"
};

/**
 * Helper function to set properties if mock responses are found
 * @param {object} control - Reference to the form control
 * @returns undefined
 */
const mocksFound = (control) => {
    control.getChild("select").setProp("isDisabled", false);
    control.getChild("collectionInput").setProp("showErrorText", false);
};
/**
 * Helper function to set properties if mock responses are not found
 * @param {object} control - Reference to the form control
 * @returns undefined
 */
const mocksNotFound = (control) => {
    control.getChild("select").setProp("isDisabled", true);
    control.getChild("collectionInput").setProp("showErrorText", true);
};

/**
 * Creates the content to be displayed in the Record tab of the data retrieval section
 * @class
 */
export default class RecordContent extends UIComponent {

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            mockResponseCollectionNames: (mockResponseCollectionNames = []) => {
                mockResponseCollectionNames.length ? mocksFound(this) : mocksNotFound(this);
                this.getChild("select").setProp("items", mockResponseCollectionNames);
            },
            mockResponseLocation: forwardProp(this, "mockResponseLocation", "collectionInput"),
            mockResponseCollection: (selectedId = "") => this.getChild("select").setProp("selectedId", selectedId)
        }
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                collectionInput: new CollectionTextBox({
                    mockResponseLocation: this.getProp("mockResponseLocation"),
                    showErrorText: false
                })
            }, {
                select: new Select ({
                    selectionChangeEventName: MOCK_RESPONSE_COLLECTION_CHANGE,
                    noOptionsDisplay: "No mock collections found."
                })
            }
        ]
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(MOCK_RESPONSE_COLLECTION_CHANGE, (src, payload) => {
            this.stopPropagation(MOCK_RESPONSE_COLLECTION_CHANGE);
            runCommand("injector", "saveMockResponses", {
                mockCollectionName: payload
            }).then((resp) => {
                this.emit(DISPATCH, {
                    type: MOCK_RESPONSE_COLLECTION_CHANGE,
                    payload: payload
                });
            });
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return this.renderChildren();
    }
}
