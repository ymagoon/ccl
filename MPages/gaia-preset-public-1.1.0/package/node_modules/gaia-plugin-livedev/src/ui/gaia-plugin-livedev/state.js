/**
 * @file Contains helpers responsible for updating portions of the livedev plugin state.
 */

import {
    AUTH_DOMAIN_CHANGE,
    AUTH_PASSWORD_CHANGE,
    AUTH_USERNAME_CHANGE,
    BEDROCK_MOCK_LOCATION_CHANGE,
    CANCEL_LAUNCH,
    CCL_PROGRAM_CHANGE,
    CONFIG_SAVE_IN_PROGRESS,
    CSS_LOCATION_CHANGE,
    ENABLE_BEDROCK_MOCKS,
    I18N_LOCATION_CHANGE,
    MOCK_RESPONSE_LOCATION_CHANGE,
    MOCK_RESPONSE_COLLECTION_CHANGE,
    MOCK_RESPONSE_COLLECTION_NAMES,
    PROGRAM_PARAMS_CHANGE,
    RECORD_STATE_CHANGE,
    REQUEST_LAUNCH,
    SOURCE_CODE_LOCATION_CHANGE,
    STATIC_CONTENT_LOCATION_CHANGE,
    WEBPACK_AUTO_REFRESH,
    WEBPACK_ENABLE,
    WEBPACK_TARGET_CHANGE,
    WEBSERVICE_CHANGE
} from "./actions";

/**
 * Initial state of the LiveDev plugin
 */
const initialState = {
    bedrockMocksLocation: "",
    cclProgram: "",
    cssLocation: "",
    i18nLocation: "",
    isBedrockEnabled: false,
    isRequestingLaunch: false,
    isSavingConfig: false,
    programParams: "",
    staticContentLocation: "",
    sourceCodeLocation: "",
    mockResponseLocation: "",
    mockResponseCollection: ""
};

/**
 * Initial state for the artifact config
 */
const initialArtifactState = {
    isWebpackEnabled: false,
    isWebpackAutoRefreshEnabled: false,
    webpackTarget: "",
    webpackTargets: []
};

/**
 * Initial auth state
 */
const initialAuthState = {
    username: "",
    password: "",
    domain: ""
};

/**
 * Updates the artifact config slice of state.
 * @param {Object} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {Object} Outgoing state.
 */
const artifactConfig = (state = initialArtifactState, action) => {
    const { payload } = action;
    switch(action.type) {
        case WEBPACK_AUTO_REFRESH:
            return Object.assign({}, state, {
                isWebpackAutoRefreshEnabled: payload.isEnabled
            });
        case WEBPACK_ENABLE:
            return Object.assign({}, state, {
                isWebpackEnabled: payload.isEnabled
            });
        case WEBPACK_TARGET_CHANGE:
            return Object.assign({}, state, {
                webpackTarget: payload.target
            });
        default:
            return state;
    }
};

/**
 * Updates the bedrock enabled state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const enableBedrockMocks = (state = false, action) => {
    const { payload } = action;
    switch(action.type) {
        case ENABLE_BEDROCK_MOCKS:
            return payload.isEnabled;
        default:
            return state;
    }
};

/**
 * Updates the config-saving state.
 * @param {Boolean} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {Boolean} Outgoing state.
 */
const isSavingConfig = (state = false, action) => {
    const { payload } = action;
    switch (action.type) {
        case CONFIG_SAVE_IN_PROGRESS:
            return payload.isSaveInProgress;
        default:
            return state;
    }
};

/**
 * Updates the static content location state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const staticContentLocation = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case STATIC_CONTENT_LOCATION_CHANGE:
            return payload.value;
        default:
            return state;
    }
};

/**
 * Updates the CCL program state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const cclProgram = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case CCL_PROGRAM_CHANGE:
            return payload.value;
        default:
            return state;
    }
};

/**
 * Updates the program params state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const programParams = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case PROGRAM_PARAMS_CHANGE:
            return payload.value;
        default:
            return state;
    }
};

/**
 * Updates the CSS location state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const cssLocation = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case CSS_LOCATION_CHANGE:
            return payload.value;
        default:
            return state;
    }
};

/**
 * Updates the bedrock mocks location state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const bedrockMocksLocation = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case BEDROCK_MOCK_LOCATION_CHANGE:
            return payload.value;
        default:
            return state;
    }
};

/**
 * Updates the i18n location state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const i18nLocation = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case I18N_LOCATION_CHANGE:
            return payload.value;
        default:
            return state;
    }
};

/**
 * Updates the source-code location state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const sourceCodeLocation = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case SOURCE_CODE_LOCATION_CHANGE:
            return payload.value;
        default:
            return state;
    }
};

/**
 * Updates the mock response location state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const mockResponseLocation = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case MOCK_RESPONSE_LOCATION_CHANGE:
            return payload.value;
        default:
            return state;
    }
};

/**
 * Updates the mock response collection state.
 * @param {String} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {String} Outgoing state.
 */
const mockResponseCollection = (state = "", action) => {
    const { payload } = action;
    switch (action.type) {
        case MOCK_RESPONSE_COLLECTION_CHANGE:
            return payload;
        default:
            return state;
    }
};

/**
 * Updates the mock response collection names state.
 * @param {Array} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {Array} Outgoing state.
 */
const mockResponseCollectionNames = (state = [], action) => {
    const { payload } = action;
    switch (action.type) {
        case MOCK_RESPONSE_COLLECTION_NAMES:
            return payload;
        default:
            return state;
    }
};

/**
 * Handles the auth portion of the state.
 * @param {Object} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {Object} Outgoing state.
 */
const auth = (state = initialAuthState, action) => {
    switch(action.type) {
        case AUTH_USERNAME_CHANGE:
            return Object.assign({}, state, { username: action.payload.value });
        case AUTH_PASSWORD_CHANGE:
            return Object.assign({}, state, { password: action.payload.value });
        case AUTH_DOMAIN_CHANGE:
            return Object.assign({}, state, { domain: action.payload.value });
        default:
            return state;
    }
};

/**
 * Handles the launch-request portion of state.
 * @param {Boolean} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {Boolean} Outgoing state.
 */
const isRequestingLaunch = (state = false, action) => {
    switch(action.type) {
        case REQUEST_LAUNCH:
            return true;
        case CANCEL_LAUNCH:
            return false;
        default:
            return state;
    }
};

const webServiceUrl = (state = "", action) => {
    switch(action.type) {
        case WEBSERVICE_CHANGE:
            return action.payload;
        default:
            return state;
    }
};

const recordMode = (state = 0, action) => {
    switch(action.type) {
        case RECORD_STATE_CHANGE:
            return action.payload;
        default:
            return state;
    }
};


/**
 * Handles the entire livedev plugin state. The state slices are delegated to the
 * individual state slice handlers.
 * @param {Object} state - Incoming state.
 * @param {Object} action - Incoming action.
 * @returns {Object} The livedev plugin state.
 */
const liveDevState = (state = initialState, action) => {
    return {
        artifactConfig: artifactConfig(state.artifactConfig, action),
        auth: auth(state.auth, action),
        bedrockMocksLocation: bedrockMocksLocation(state.bedrockMocksLocation, action),
        cclProgram: cclProgram(state.cclProgram, action),
        cssLocation: cssLocation(state.cssLocation, action),
        i18nLocation: i18nLocation(state.i18nLocation, action),
        isBedrockEnabled: enableBedrockMocks(state.isBedrockEnabled, action),
        isRequestingLaunch: isRequestingLaunch(state.isRequestingLaunch, action),
        isSavingConfig: isSavingConfig(state.isSavingConfig, action),
        mockResponseLocation: mockResponseLocation(state.mockResponseLocation, action),
        mockResponseCollectionNames: mockResponseCollectionNames(state.mockResponseCollectionNames, action),
        mockResponseCollection: mockResponseCollection(state.mockResponseCollection, action),
        programParams: programParams(state.programParams, action),
        staticContentLocation: staticContentLocation(state.staticContentLocation, action),
        sourceCodeLocation: sourceCodeLocation(state.sourceCodeLocation, action),
        webServiceUrl: webServiceUrl(state.webServiceUrl, action),
        recordMode: recordMode(state.recordMode, action)
    };
};

export {
    liveDevState
};
