import { atomic, composite, UIComponent, helpers} from "MPageFusion";
import { runCommand } from "Gaia";
import { MOCK_REFRESH_COLLECTION } from "../actions";
import CollectionTextBox from "./CollectionTextBox";

const PRIVATE_EVENTS = {
    VALUE_CHANGE: "__DataRetrievalSettings::RecordContent_valueChange__",
    SAVE: "__DataRetrievalSettings::RecordContent_click__"
}

const { props: { forwardProp }} = helpers;
const { form: { FormTextBox }} = composite;
const { button: { Button }} = atomic;

/**
 * Creates the content to be displayed in the Record tab of the data retrieval settings
 * @class
 */
class RecordContent extends UIComponent {
    /**
     * @inheritDoc
     */
    initialState() {
        return {
            collectionName: ""
        }
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            mockResponseLocation: forwardProp(this, "mockResponseLocation", "collectionInput"),
        }
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                collectionInput: new CollectionTextBox({
                    mockResponseLocation: this.getProp("mockResponseLocation"),
                    showErrorText: false
                })
            },
            {
                collectionName: new FormTextBox({
                    display: "Collection Name",
                    options: {
                        placeholder: "Test Collection"
                    },
                    valueChangeEventName: PRIVATE_EVENTS.VALUE_CHANGE
                })
            },
            {
                save: new Button({
                    display: "Save Collection",
                    disabled: true,
                    clickEventName: PRIVATE_EVENTS.SAVE
                })
            }
        ]
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(PRIVATE_EVENTS.SAVE, () => {
            this.stopPropagation(PRIVATE_EVENTS.SAVE);
            runCommand("injector", "saveCollection", {
                collectionName: this._state.collectionName
            }).then((res) => {
                this.emit(MOCK_REFRESH_COLLECTION);
            });
        });

        this.on(PRIVATE_EVENTS.VALUE_CHANGE, (context, { value, isValid}) => {
            this.stopPropagation(PRIVATE_EVENTS.VALUE_CHANGE);
            this.setState({collectionName: value});
            const canSaveText = value && value.length && isValid;
            this.getChild("save").setProp("disabled", canSaveText ? false : true);
            this.update();
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return this.renderChildren();
    }
}

export default RecordContent;
