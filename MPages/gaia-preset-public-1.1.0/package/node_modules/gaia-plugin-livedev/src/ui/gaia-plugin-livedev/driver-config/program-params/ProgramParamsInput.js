import { UIComponent, composite, atomic } from "MPageFusion";
import { DISPATCH, PROGRAM_PARAMS_CHANGE } from "../../actions";
import getParser from "./parser";
import { rootUrl } from "Gaia";

const { button: { Button }, header: { ContentHeader }, footer: { AffirmDenyFooter }} = atomic;
const { form: { FormTextBox }} = composite;
const { dialog: { Modal } } = composite;
const { button: { ButtonGroup } } = composite;

/**
 * Events private to this file.
 * @type {{SOURCE_CHANGE: string, FINISH: string, GENERATE: string, TYPE_CHANGE: string, VALUE_CHANGE: string, OPEN_PARSER: string}}
 */
const PRIVATE_EVENTS = {
    SOURCE_CHANGE: "__ParamParser::sourceChange__",
    FINISH: "__ParamParser::finish__",
    GENERATE: "__ParamParser::generate__",
    TYPE_CHANGE: "__ParamParser::typeChange__",
    VALUE_CHANGE: "__ProgramParams::valueChange__",
    OPEN_PARSER: "__ParamParser::open__"
};

/**
 * Generates params with a given parser mode.
 * @param {String} mode - The parser mode.
 * @param {String} source - The parser source.
 * @param {Object} config - Parser config.
 * @returns {String} Program params.
 */
const generateParams = (mode, source, config = {}) => {
    return getParser(mode)({
        source,
        config
    });
};

/**
 * Creates a class for the param parser modal body.
 * @class ModalBody.
 */
class ModalBody extends UIComponent {
    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                typeSelect: new ButtonGroup({
                    selectionChangeEventName: PRIVATE_EVENTS.TYPE_CHANGE,
                    canDeselect: false,
                    items: [
                        { id: "unified_driver", display: "Unified Driver", isSelected: true },
                        { id: "criterion", display: "Criterion JSON" }
                    ]
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return el(
            "div",
            {
                class: "gaia-ParamParser"
            },
            [
                mapped.typeSelect.render(),
                el(
                    "textarea",
                    {
                        class: "gaia-ParamParser-source",
                        placeholder: "Paste page source",
                        oninput: (e) => {
                            this.emit(PRIVATE_EVENTS.SOURCE_CHANGE, e.target.value);
                        }
                    }
                )
            ]
        );
    }
}

/**
 * Creates an input for the program params.
 * @class ProgramParamsInput.
 */
class ProgramParamsInput extends UIComponent {
    /**
     * @inheritDoc
     */
    initialState() {
        return {
            parseMode: "unified_driver",
            source: ""
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            value: (value) => this.getChild("input").setProp("value", value)
        }
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                input: new FormTextBox({
                    helperHandler: () => "The parameters to be passed to the CCL program when launched",
                    showHelperText: true,
                    display: "Program parameters",
                    valueChangeEventName: PRIVATE_EVENTS.VALUE_CHANGE
                })
            },
            {
                modal: new Modal({
                    header: new ContentHeader({
                        title: "Param Parser"
                    }),
                    body: new ModalBody(),
                    footer: new AffirmDenyFooter({
                        affirmClickEventName: PRIVATE_EVENTS.GENERATE,
                        affirmDisplay: "Generate",
                        denyDisplay: "Finish",
                        denyClickEventName: PRIVATE_EVENTS.FINISH
                    })
                })
            },
            {
                button: new Button({
                    display: "Param Parser",
                    clickEventName: PRIVATE_EVENTS.OPEN_PARSER
                })
            }
        ]
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(PRIVATE_EVENTS.FINISH, () => {
            this.stopPropagation(PRIVATE_EVENTS.FINISH);
            this.getChild("modal").setProp("isVisible", false).update();
        });
        this.on(PRIVATE_EVENTS.SOURCE_CHANGE, (source) => {
            this.stopPropagation(PRIVATE_EVENTS.SOURCE_CHANGE);
            this.setState({
                source: source
            }).update();
        });
        this.on(PRIVATE_EVENTS.GENERATE, () => {
            this.stopPropagation(PRIVATE_EVENTS.GENERATE);
            this.emit(DISPATCH, {
                type: PROGRAM_PARAMS_CHANGE,
                payload: {
                    value: generateParams(
                        this._state.parseMode,
                        this._state.source,
                        {
                            staticContentLocation: `${rootUrl()}/api/routes/contentserver/content/staticContent`
                        }
                    )
                }
            });
        });
        this.on(PRIVATE_EVENTS.TYPE_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.TYPE_CHANGE);
            this.setState({
                parseMode: payload.selected.ids[0],
                source: this._state.source
            });
        });
        this.on(PRIVATE_EVENTS.VALUE_CHANGE, (src, payload) => {
            this.stopPropagation(PRIVATE_EVENTS.VALUE_CHANGE);
            this.emit(DISPATCH, {
                type: PROGRAM_PARAMS_CHANGE,
                payload: payload
            });
        });
        this.on(PRIVATE_EVENTS.OPEN_PARSER, () => {
            this.stopPropagation(PRIVATE_EVENTS.OPEN_PARSER);
            this.getChild("modal").setProp("isVisible", true).update();
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return el(
            "div",
            {},
            [
                el(
                    "div",
                    {},
                    mapped.input.render(),
                    mapped.button.render()
                ),
                mapped.modal.render()
            ]
        );
    }
}

export default ProgramParamsInput;
