import {atomic, composite, UIComponent} from "MPageFusion";
import i18n from "../../../i18n/en_us";
import {runCommand} from "Gaia";
import ConfigForm from "./form/ConfigForm";

const {
    footer: { AffirmDenyFooter },
    panel: { ContentPanel }
} = atomic;

const {
    banner: { BannerItem }
} = composite;

/**
 * Generate a human-readable representation of the new configuration
 */
const moreConfigDetails = (config) => Object.keys(config)
    .map((key) => `${key}="${config[key]}"`)
    .join(", ");

export default class Config extends UIComponent {
    static get EVENT() {
        return {
            "AFFIRM": "WhatsUpDoc::Config::Event::Affirm",
            "DENY": "WhatsUpDoc::Config::Event::Deny",
            "DISMISS": "WhatsUpDoc::Config::Banner::Event::Dismiss"
        };
    }

    createChildren() {
        return [{
            panel: new ContentPanel({
                bodyClassNames: "mpageui-u-pad-absolute-loose",
                content: [new ConfigForm()],
                footer: new AffirmDenyFooter({
                    affirmClickEventName: Config.EVENT.AFFIRM,
                    affirmDisplay: i18n.button.save,
                    denyClickEventName: Config.EVENT.DENY,
                    denyDisplay: i18n.button.reset
                }),
                headerDisplay: i18n.tabs.config,
                showHeaderBottomBorder: false
            })
        }]
    }

    initialState() {
        return {
            // Success Banner state
            success: false,
            successMoreDetails: "",
            successDescription: "",
            // Failure Banner state
            alert: false,
            alertMoreDetails: "",
            alertDescription: ""
        }
    }

    afterCreate() {
        this.on(ConfigForm.EVENT.UPDATE, (configForm, { value }) => {
            this.stopPropagation(ConfigForm.EVENT.UPDATE);
            this._formData = value;
        });

        this.on(Config.EVENT.AFFIRM, () => {
            this.stopPropagation(Config.EVENT.AFFIRM);
            const { exportPath: markdownOutputLocation, files } = Object.assign(this._formData);
            runCommand("whats-up-doc", "config", { markdownOutputLocation, files })
                .then((newConfig) => this.setBannerState({
                    success: true,
                    successDescription: i18n.banner.config.success.description,
                    successMoreDetails: moreConfigDetails(newConfig)
                }).update())
                .catch((err) => this.setBannerState({
                    alert: true,
                    alertDescription: i18n.banner.config.alert.description,
                    alertMoreDetails: err.message
                }).update());
        });

        // Reset the form by
        this.on(Config.EVENT.DENY, () => {
            this.stopPropagation(Config.EVENT.DENY);
            // Synchronize _formData with the empty configuration
            this._formData = { files: "", exportPath: "" };

            // Initialize a new ConfigForm with the current _formData details
            this.getChild("panel")
                .setProp("content", [new ConfigForm({
                    files: "",
                    exportPath: "",
                    isDisabled: false
                })])
                .update()
        });

        this.on(Config.EVENT.DISMISS, () => {
            this.stopPropagation(Config.EVENT.DISMISS);
            this.setBannerState({}).update();
        });

        runCommand("config", "read", { plugin: "whatsupdoc" })
            .then(({ files = "", markdownOutputLocation: exportPath = "" }) => {
                // Synchronize _formData with current configuration in the event of an immediate Save without changes
                this._formData = { files, exportPath };

                // Initialize a new ConfigForm with the current _formData details
                this.getChild("panel")
                    .setProp("content", [new ConfigForm({ files, exportPath, isDisabled: false })])
                    .update();
            })
            .catch(console.log);
    }

    beforeRender(state) {
        this.setupBanner(state, "success", 0, (nextState) => new BannerItem({
            bannerDismissClickEventName: Config.EVENT.DISMISS,
            description: nextState.successDescription,
            moreDetailText: nextState.successMoreDetails,
            key: "WhatsUpDoc::Config::Banner::SuccessfulConfigSave",
            type: BannerItem.TYPE.SUCCESS
        }));

        this.setupBanner(state, "alert", 0, (nextState) => new BannerItem({
            bannerDismissClickEventName: Config.EVENT.DISMISS,
            description: nextState.alertDescription,
            moreDetailText: nextState.alertMoreDetails,
            key: "WhatsUpDoc::Config::Banner::UnsuccessfulConfigSave",
            type: BannerItem.TYPE.ALERT
        }));
    }

    view() {
        return this.renderChildren();
    }

    setBannerState(newState) {
        return this.setState(Object.assign({}, {
            // Success Banner state
            success: false,
            successMoreDetails: "",
            successDescription: "",
            // Failure Banner state
            alert: false,
            alertMoreDetails: "",
            alertDescription: ""
        }, newState));
    }

    setupBanner({ state, nextState }, name, index, newBannerFn) {
        // did the state change?
        const didBannerStateChange = state[name] !== nextState[name]
            || state[`${name}MoreDetails`] !== nextState[`${name}MoreDetails`]
            || state[`${name}Description`] !== nextState[`${name}Description`];

        if (didBannerStateChange) {
            const banner = this.getChild(name);
            // is there currently a banner displaying
            const isDisplaying = !!banner;
            // should the banner be displaying?
            const shouldDisplay = nextState[name];

            if (shouldDisplay) {
                return isDisplaying
                    ? this.replaceMappedChild(name, newBannerFn(nextState))
                    : this.addMappedChild(name, newBannerFn(nextState), index);
            }
            else if (!shouldDisplay && isDisplaying) {
                return this.removeChild(banner);
            }
        }

        return this;
    }
}
