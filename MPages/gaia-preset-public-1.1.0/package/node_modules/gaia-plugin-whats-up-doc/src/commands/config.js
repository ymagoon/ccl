/**
 * @module whatsupdoc/commands/config
 * @requires glob
 * @requires path
 * @requires module:wud/constants
 */
const glob = require("glob");
const path = require("path");
const constants = require("../constants");

/**
 * @private
 * @function module:whatsupdoc/commands/config~redirectError
 * @param {*} newErr - The redirected error.
 * @returns {Function}
 */
const redirectError = newErr => oldErr => {
    console.error(oldErr);
    return Promise.reject(newErr);
};

/**
 * Expand an array of file globs into an array of file paths. Defaults to `./src/main/**\/*.js`
 * when no file configuration is specified in `gaia.json`
 *
 * @private
 * @function module:whatsupdoc/commands/config~globFiles
 * @param {String[]} files - An array of file globs
 * @returns {Promise}
 */
const globFiles = ({ files }) => Promise.all(
    ([files]).map(fileGlob => new Promise((ok, error) => glob(
        fileGlob, {}, (err, files) => (err ? error(err) : ok(files))
    ))))
// concatenate an array of arrays of file paths into one array of file paths
    .then(Array.prototype.concat.apply.bind(Array.prototype.concat, []));

/**
 * Reads the config file `gaia.json` that may or may not exist
 * and checks for any `whatsupdoc` settings
 *
 * @function module:whatsupdoc/commands/config~getConfig
 * @param {object} gaia - The MPages Gaia object
 * @param {object} args - The arguments passed to the plugin
 * @returns {Promise}
 */
const getConfig = (gaia, args = {}) => gaia
    .runCommand("config", "read", Object.assign(args, { plugin: "whatsupdoc" }));

/**
 * Writes to the default configuration file and overrides any specified configuration
 * options from the input `newConfig`.
 *
 * @function module:whatsupdoc/commands/config~writeConfig
 * @param {object} gaia - the mpages Gaia object
 * @param {object} newConfig - an object containing new configuration properties
 * @returns {Promise}
 */
const writeConfig = (gaia, newConfig) => getConfig(gaia)
    .then(config => Object.assign(config, newConfig))
    .then(config => gaia.runCommand("config", "write", { plugin: "whatsupdoc", config }))
    .catch((err) => {
        console.error(err);
        return Promise.reject(err);
    });

/**
 * @public
 * @function module:whatsupdoc/commands/config.get.files
 * @param {Object} gaia - the Gaia namespace
 * @returns {Promise}
 */
const files = gaia => getConfig(gaia)
    .then(globFiles)
    .catch(redirectError(new Error(constants.error.config.getFiles)));

/**
 * @public
 * @function module:whatsupdoc/commands/config.get.markdownOutputLocation
 * @param {Object} gaia - the Gaia namespace
 * @param {Object} args - arguments
 * @returns {Promise}
 */
const markdownOutputLocation = (gaia, args) => getConfig(gaia)
    .then(({ markdownOutputLocation }) => path.resolve(args.cwd, markdownOutputLocation))
    .catch(redirectError(new Error(constants.error.config.getMarkdownOutputLocation)));

/**
 * Create a string representation of a configuration object
 * @function module:whatsupdoc/command/config.get.configString
 * @param {object} config
 * @returns {string}
 */
const configString = (config) => Object.keys(config)
    .map(key => `\t${key}: ${config[key]}`)
    .join("\n");

/**
 * @alias module:whatsupdoc/commands/config
 */
module.exports = {
    get: {
        files,
        markdownOutputLocation
    },
    set(gaia, { files, markdownOutputLocation }) {
        const newConfig = Object.assign({
            files: "",
            markdownOutputLocation: ""
        }, { files, markdownOutputLocation });
        return writeConfig(gaia, newConfig)
            .then(_ => console.log(`WhatsUpDoc Updated: \n${configString(newConfig)}`))
            .catch(_ => console.log(`WhatsUpDoc Update Failure: \n${configString(newConfig)}`))
            .then(() => newConfig);
    }
};
