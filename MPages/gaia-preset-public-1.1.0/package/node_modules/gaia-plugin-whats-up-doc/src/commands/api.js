/**
 * @module whatsupdoc/commands/api
 * @requires whats-up-doc
 * @requires module:whatsupdoc/commands/config
 * @requires module:whatsupdoc/commands/util/files
 * @requires fs
 */

const whatsUpDoc = require("whats-up-doc");
const config = require("./config");
const fs = require("fs");
const fileUtil = require("./utility/files");
const {promisify} = require("util");

/**
 * Promisified standard lib variants
 */
const writeFileP = promisify(fs.writeFile);

/**
 * @private
 * @function module:whatsupdoc/commands/api~rejectPromise
 * @param {*} err - The rejected error.
 * @returns {Promise}
 */
const rejectPromise = err => {
    // Log out the error server-side
    console.error(err);

    // Pass the error on to consumers
    return Promise.reject(err);
};

/**
 * Scans the current working directory for JSDoc and generates a Markdown
 * string with the documentation.
 *
 * @public
 * @function module:whatsupdoc/commands/api.toMarkdownString
 * @param gaia - The MPage Gaia object
 * @param cwd - The current working directory
 * @returns {Promise}
 */
const toMarkdownString = (gaia, { cwd }) => {
    return config.get.files(gaia)
        .then(files => whatsUpDoc.toMarkdown({ cwd, files }))
        .catch(rejectPromise);
};

/**
 * Outputs the API markdown string to the `markdownOutputLocation` file
 *
 * @public
 * @function module:whatsupdoc/commands/api.toMarkdownFile
 * @param gaia - the MPage Gaia object
 * @param cwd - The current working directory
 * @returns {Promise}
 */
const toMarkdownFile = (gaia, { cwd }) => {
    return Promise.all([toMarkdownString(gaia, { cwd }), config.get.markdownOutputLocation(gaia, { cwd })])
        .then(([markdown, outFilePath]) => writeFileP(outFilePath, markdown))
        .catch(rejectPromise);
};

/**
 * Retrieves list of guide files.
 *
 * @public
 * @function module:whatsupdoc/commands/api.getGuide
 * @returns {Promise}
 */
const getGuide = () =>
    fileUtil
        .readFiles("../../../docs/guide/tags")
        .catch(rejectPromise);

module.exports = {
    toMarkdownFile,
    toMarkdownString,
    getGuide
};
