const {
    webpackCompiler
} = require("./config");

const ServerManager = require("gaia-servermanager");

/**
 * 
 * @param {} serverManager
 */
const watchHandler = (serverManager) => (err, stats) => {
    if (err) {
        serverManager.changeStatus({
            isRunning: true,
            message: "Error",
            error: err
        });
        return;
    }

    serverManager.changeStatus({
        isRunning: true,
        message: "Webpack compilation done.",
        error: null
    });
};

const startHandler = ([gaia, args], serverManager) =>
    webpackCompiler(gaia, args)
      .then((compiler) => Promise.resolve([
          compiler.watch({}, watchHandler(serverManager)),
          "Watcher started"
      ]));

const stopHandler = ([gaia, args], compiler) =>
    new Promise((ok, err) => compiler.close(ok));

const getWatcherManager = (state) => {
    if (!state.watcherManager) {
        state.watcherManager = new ServerManager(startHandler, stopHandler, console);
    }
    return state.watcherManager;
};

const send = (msg, state) => {
    if (!state.watcherSockets) return;
    state.watcherSockets
        .filter((ws) => ws.readyState == 1)
        .forEach((ws) => ws.send(msg));
};

const sendServerStatus = (state, manager) => () => {
    send(JSON.stringify(manager.getStatus()), state);
    return Promise.resolve("ok");
};

const startWatcher = (gaia, args, state) => {
    const manager = getWatcherManager(state);
    return manager.start([gaia, args])
        .then(sendServerStatus(state, manager));
};

const stopWatcher = (gaia, args, state) => {
    const manager = getWatcherManager(state);
    return manager.stop([gaia, args])
        .then(sendServerStatus(state, manager));
};

const watcherStatus = (gaia, args) =>
    Promise.resolve(manager.getStatus());

const watcherStatusLog = (gaia, args) =>
    Promise.resolve(manager.getStatusLog());

const watcherSocket = (gaia, args, ws, req, state) => {
    if (!state.watcherSockets) {
        state.watcherSockets = [];
    }
    state.watcherSockets.push(ws);
    ws.on("error", (err) => console.log(err));
    ws.send(JSON.stringify(getWatcherManager(state).getStatus()));
};

module.exports = {
    startWatcher,
    stopWatcher,
    watcherStatus,
    watcherStatusLog,
    watcherSocket
};
