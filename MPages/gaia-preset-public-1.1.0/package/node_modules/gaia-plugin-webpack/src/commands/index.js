const fs = require("mz/fs");
const path = require("path");
const webpack = require("webpack");
const {
    readFullConfig,
    writeTargetConfig,
    readTargetConfig,
    writeFullConfig,
    getTargetList,
    readExternals,
    convertConfigToWebpackFormat,
    webpackCompiler
} = require("./config");
const {
    startWatcher,
    stopWatcher,
    watcherStatus
} = require("./watcher");
const {
    startDevServer,
    stopDevServer,
    devServerStatus,
    devServerStatusLog
} = require("./devServer");

/**
 * Creates the default target and saves it in the gaia.json
 * @param {*} gaia the gaia context
 * @param {*} args command line args
 * @returns {Promise<*>} promise that resolves once the save is finished
 */
const createDefaultTarget = (gaia, args) =>
    writeTargetConfig(gaia, Object.assign(args, {
        target: args.target || "default",
        config: {
            devtool: "inline-source-map",
            outputFolder: "dist",
            entryPoints: [ "./src/index.js" ],
            fileName: `${args.packageJson.name}.js`,
            cssFileName: "",
            libraryName: args.packageJson.name,
            libraryTarget: "umd",
            sourceFolders: [
                "."
            ],
            contentBase: "",
            publicPath: "",
            port: "",
            autoRefresh: false,
            includeCSS: false,
            envify: true,
            minify: true,
            includePolyfills: false
        }
    }));

/**
 *  
 * @param {} gaia
 * @param {} args
 */
const run = (gaia, args) =>
      webpackCompiler(gaia, args)
      .then(
          (compiler) =>
              new Promise(
                  (ok, err) =>
                      compiler.run(
                          (error, stats) => error ? err(error) : ok(stats)
                      )
              )
      );

module.exports = {
    run,
    createDefaultTarget,
    startWatcher,
    stopWatcher,
    watcherStatus,
    startDevServer,
    stopDevServer,
    devServerStatus,
    devServerStatusLog,
    readFullConfig,
    writeFullConfig,
    writeTargetConfig,
    getTargetList,
    readExternals
};
