import * as Fusion from "MPageFusion";
import WebpackUI from "./WebpackUI";
import { runCommand, openWebsocket } from "Gaia";

const writeConfig = (control, config) => {
    if (control._configTimeout) {
        clearTimeout(control._configTimeout);
    }
    control._configTimeout = setTimeout(
        () => runCommand(
            "webpack",
            "writeFullConfig",
            {
                config: config
            }
        )
        , 500);
};

const removeTargetName = (target) => {
    const clone = Object.assign({}, target);
    delete clone.name;
    return clone;
};

const readTargetsArray = (targets) =>
    targets.reduce(
        (result, target) =>
            Object.assign(
                {},
                result,
                { [target.name] : removeTargetName(target) }
            ),
        {}
    );

const makeTargetsArray = (targets) =>
    Object.keys(targets).map(
        (targetName) =>
            Object.assign(
                {},
                targets[targetName],
                { name: targetName}
            )
    );

const TARGETS_CHANGE = "Internal::WebpackIndex::TargetsChange";
const RUN_DEV_SERVER = "Internal::WebpackIndex::RunDevServer";
const RUN_WATCH_SERVER = "Internal::WebpackIndex::RunWatcherServer";
const STOP_DEV_SERVER = "Internal::WebpackIndex::StopDevServer";
const STOP_WATCH_SERVER = "Internal::WebpackIndex::StopWatchServer";


class WebpackIndex extends Fusion.UIComponent {

    createChildren() {
        return [
            {
                ui: new WebpackUI({
                    targetsChangeEventName: TARGETS_CHANGE,
                    runDevServerEventName: RUN_DEV_SERVER,
                    runWatchServerEventName: RUN_WATCH_SERVER,
                    stopDevServerEventName: STOP_DEV_SERVER,
                    stopWatchServerEventName: STOP_WATCH_SERVER
                })
            }
        ];
    }

    afterCreate() {
        runCommand("webpack", "readFullConfig", {})
            .then(
                (fullConfig) =>
                    this
                    .getChild("ui")
                    .setProp(
                        "targets",
                        fullConfig.targets ? makeTargetsArray(fullConfig.targets) : {}
                    )
                    .update()
            );

        openWebsocket("webpack", "devServerStatus")
            .then((ws) => {
                ws.onmessage = (msg) => {
                    const message = JSON.parse(msg.data);
                    this.getChild("ui")
                        .setProp("isDevServerRunning", message.isRunning)
                        .update();
                };
            });

        openWebsocket("webpack", "watcherStatus")
            .then((ws) => {
                ws.onmessage = (msg) => {
                    const message = JSON.parse(msg.data);
                    this.getChild("ui")
                        .setProp("isWatchServerRunning", message.isRunning)
                        .update();
                };
            });

        this.on(
            TARGETS_CHANGE,
            (source, newTargets) => {
                writeConfig(this, { targets: readTargetsArray(newTargets) });
                this.getChild("ui").setProp("targets", newTargets).update();
            }
        );

        this.on(
            RUN_DEV_SERVER,
            (source, target) => {
                runCommand("webpack", "startDevServer", {
                    target: target.name
                });
            }
        );

        this.on(
            STOP_DEV_SERVER,
            (source) => runCommand("webpack", "stopDevServer")
        );

        this.on(
            RUN_WATCH_SERVER,
            (source, target) => {
                runCommand("webpack", "startWatcher", {
                    target: target.name
                });
            }
        );

        this.on(
            STOP_WATCH_SERVER,
            (source) => runCommand("webpack", "stopWatcher")
        );
    }

    view(el) {
        return this.renderChildren();
    }
};

export default {
    label: "Webpack",
    control: WebpackIndex,
    showHelp: true
};
