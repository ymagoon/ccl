import * as Fusion from "MPageFusion";
import * as gaia from "Gaia";

const Table = Fusion.atomic.table.Table;
const JsonForm = gaia.controls.JsonForm;
const Button = Fusion.atomic.button.Button;

const DELETE_CLICK = "Externals::DeleteClick";
const NEW_EXTERNAL_CHANGE = "Externals::NewExternalChange";
const NEW_EXTERNAL_CLICK = "Externals::NewExternalClick";

const removeVariable = (variableName, externals) => {
    delete externals[variableName];
    return externals;
};

export default class Externals extends Fusion.UIComponent {

    initialProps() {
        return {
            externals: {},
            externalsChangeEventName: null
        };
    }

    createChildren() {
        return [
            {
                newExternalForm: new JsonForm({
                    changeEventName: NEW_EXTERNAL_CHANGE,
                    formDefinition: [
                        {
                            key: "variableName",
                            label: "Variable name",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        },
                        {
                            key: "value",
                            label: "Value",
                            type: JsonForm.CONTROL_TYPES.TEXTBOX
                        }
                    ]
                })
            },
            {
                newExternalButton: new Button({
                    display: "Add",
                    clickEventName: NEW_EXTERNAL_CLICK
                })
            },
            {
                table: new Table({
                    columns: [
                        { display: "Variable name", key: "variable" },
                        { display: "Value", key: "value" },
                        { display: "", key: "actions" }
                    ]
                })
            }
        ];
    }

    propChangeHandlers() {
        return {
            externals: (externals) =>
                this.getChild("table").setProp(
                    "rows",
                    Object.keys(externals || {}).map(
                        (variableName, i) => ({
                            key: variableName,
                            data: [
                                { display: variableName },
                                { display: externals[variableName] },
                                { content: [
                                    new Button({
                                        display: "Delete",
                                        clickEventName: DELETE_CLICK,
                                        _varName: variableName
                                    })
                                ]}
                            ]
                        })
                    )
                )
        };
    }

    afterCreate() {
        this.convertEventUsingProp(
            DELETE_CLICK,
            "externalsChangeEventName",
            (source) => [
                this,
                removeVariable(
                    source.getProp("_varName"),
                    Object.assign({}, this.getProp("externals"))
                )
            ]
        );

        this.on(
            NEW_EXTERNAL_CHANGE,
            (source, newExternal) => this.setState(newExternal)
        );

        this.convertEventUsingProp(
            NEW_EXTERNAL_CLICK,
            "externalsChangeEventName",
            (source) => [
                this,
                Object.assign(
                    {},
                    this.getProp("externals"),
                    { [this._state.variableName]: this._state.value }
                )
            ]
        );
    }

    view(el, props, children, mChildren) {
        return [
            el("h3", {}, "Externals"),
            mChildren.newExternalForm.render(),
            mChildren.newExternalButton.render(),
            mChildren.table.render()
        ];
    }
}
