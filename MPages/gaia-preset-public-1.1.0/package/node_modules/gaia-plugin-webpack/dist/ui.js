(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("MPageFusion"), require("Gaia"));
	else if(typeof define === 'function' && define.amd)
		define(["MPageFusion", "Gaia"], factory);
	else if(typeof exports === 'object')
		exports["gaia-plugin-webpack"] = factory(require("MPageFusion"), require("Gaia"));
	else
		root["gaia-plugin-webpack"] = factory(root["MPageFusion"], root["Gaia"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(3);


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__WebpackUI__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Gaia__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Gaia___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_Gaia__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





var writeConfig = function writeConfig(control, config) {
    if (control._configTimeout) {
        clearTimeout(control._configTimeout);
    }
    control._configTimeout = setTimeout(function () {
        return Object(__WEBPACK_IMPORTED_MODULE_2_Gaia__["runCommand"])("webpack", "writeFullConfig", {
            config: config
        });
    }, 500);
};

var removeTargetName = function removeTargetName(target) {
    var clone = Object.assign({}, target);
    delete clone.name;
    return clone;
};

var readTargetsArray = function readTargetsArray(targets) {
    return targets.reduce(function (result, target) {
        return Object.assign({}, result, _defineProperty({}, target.name, removeTargetName(target)));
    }, {});
};

var makeTargetsArray = function makeTargetsArray(targets) {
    return Object.keys(targets).map(function (targetName) {
        return Object.assign({}, targets[targetName], { name: targetName });
    });
};

var TARGETS_CHANGE = "Internal::WebpackIndex::TargetsChange";
var RUN_DEV_SERVER = "Internal::WebpackIndex::RunDevServer";
var RUN_WATCH_SERVER = "Internal::WebpackIndex::RunWatcherServer";
var STOP_DEV_SERVER = "Internal::WebpackIndex::StopDevServer";
var STOP_WATCH_SERVER = "Internal::WebpackIndex::StopWatchServer";

var WebpackIndex = function (_Fusion$UIComponent) {
    _inherits(WebpackIndex, _Fusion$UIComponent);

    function WebpackIndex() {
        _classCallCheck(this, WebpackIndex);

        return _possibleConstructorReturn(this, _Fusion$UIComponent.apply(this, arguments));
    }

    WebpackIndex.prototype.createChildren = function createChildren() {
        return [{
            ui: new __WEBPACK_IMPORTED_MODULE_1__WebpackUI__["a" /* default */]({
                targetsChangeEventName: TARGETS_CHANGE,
                runDevServerEventName: RUN_DEV_SERVER,
                runWatchServerEventName: RUN_WATCH_SERVER,
                stopDevServerEventName: STOP_DEV_SERVER,
                stopWatchServerEventName: STOP_WATCH_SERVER
            })
        }];
    };

    WebpackIndex.prototype.afterCreate = function afterCreate() {
        var _this2 = this;

        Object(__WEBPACK_IMPORTED_MODULE_2_Gaia__["runCommand"])("webpack", "readFullConfig", {}).then(function (fullConfig) {
            return _this2.getChild("ui").setProp("targets", fullConfig.targets ? makeTargetsArray(fullConfig.targets) : {}).update();
        });

        Object(__WEBPACK_IMPORTED_MODULE_2_Gaia__["openWebsocket"])("webpack", "devServerStatus").then(function (ws) {
            ws.onmessage = function (msg) {
                var message = JSON.parse(msg.data);
                _this2.getChild("ui").setProp("isDevServerRunning", message.isRunning).update();
            };
        });

        Object(__WEBPACK_IMPORTED_MODULE_2_Gaia__["openWebsocket"])("webpack", "watcherStatus").then(function (ws) {
            ws.onmessage = function (msg) {
                var message = JSON.parse(msg.data);
                _this2.getChild("ui").setProp("isWatchServerRunning", message.isRunning).update();
            };
        });

        this.on(TARGETS_CHANGE, function (source, newTargets) {
            writeConfig(_this2, { targets: readTargetsArray(newTargets) });
            _this2.getChild("ui").setProp("targets", newTargets).update();
        });

        this.on(RUN_DEV_SERVER, function (source, target) {
            Object(__WEBPACK_IMPORTED_MODULE_2_Gaia__["runCommand"])("webpack", "startDevServer", {
                target: target.name
            });
        });

        this.on(STOP_DEV_SERVER, function (source) {
            return Object(__WEBPACK_IMPORTED_MODULE_2_Gaia__["runCommand"])("webpack", "stopDevServer");
        });

        this.on(RUN_WATCH_SERVER, function (source, target) {
            Object(__WEBPACK_IMPORTED_MODULE_2_Gaia__["runCommand"])("webpack", "startWatcher", {
                target: target.name
            });
        });

        this.on(STOP_WATCH_SERVER, function (source) {
            return Object(__WEBPACK_IMPORTED_MODULE_2_Gaia__["runCommand"])("webpack", "stopWatcher");
        });
    };

    WebpackIndex.prototype.view = function view(el) {
        return this.renderChildren();
    };

    return WebpackIndex;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

;

/* harmony default export */ __webpack_exports__["default"] = ({
    label: "Webpack",
    control: WebpackIndex,
    showHelp: true
});

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TargetList__ = __webpack_require__(5);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var forwardProp = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["helpers"].props.forwardProp;
var Button = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].button.Button;

var TARGETS_CHANGE = "Internal::WebpackUI::TargetsChange";
var ADD_TARGET = "Internal::WebpackUI::AddTarget";
var RUN_DEV_SERVER = "Internal::WebpackUI::RunDevServer";
var RUN_WATCH_SERVER = "Internal::WebpackUI::RunWatchServer";
var STOP_DEV_SERVER = "Internal::WebpackUI::StopDevServer";
var STOP_WATCH_SERVER = "Internal::WebpackUI::StopWatchServer";

var WebpackUI = function (_Fusion$UIComponent) {
    _inherits(WebpackUI, _Fusion$UIComponent);

    function WebpackUI() {
        _classCallCheck(this, WebpackUI);

        return _possibleConstructorReturn(this, _Fusion$UIComponent.apply(this, arguments));
    }

    WebpackUI.prototype.initialProps = function initialProps() {
        return {
            targets: [],
            targetsChangeEventName: null,
            runDevServerEventName: null,
            runWatchServerEventName: null,
            stopDevServerEventName: null,
            stopWatchServerEventName: null,
            isDevServerRunning: false,
            isWatchServerRunning: false
        };
    };

    WebpackUI.prototype.propChangeHandlers = function propChangeHandlers() {
        return {
            targets: forwardProp(this, "targets", "targetList")
        };
    };

    WebpackUI.prototype.dependentPropChangeHandlers = function dependentPropChangeHandlers() {
        var _this2 = this;

        return [["isDevServerRunning", "isWatchServerRunning", function (isDevServerRunning, isWatchServerRunning) {
            return _this2.getChild("targetList").setProp("showServerButtons", !isDevServerRunning && !isWatchServerRunning);
        }]];
    };

    WebpackUI.prototype.createChildren = function createChildren() {
        return [{
            targetList: new __WEBPACK_IMPORTED_MODULE_1__TargetList__["a" /* default */]({
                targetsChangeEventName: TARGETS_CHANGE,
                runDevServerEventName: RUN_DEV_SERVER,
                runWatchServerEventName: RUN_WATCH_SERVER
            })
        }, {
            addTarget: new Button({
                display: "Add target",
                clickEventName: ADD_TARGET
            })
        }, {
            stopDevServer: new Button({
                classNames: "mpageui-u-margin-absolute-loose",
                display: "Stop",
                clickEventName: STOP_DEV_SERVER
            })
        }, {
            stopWatchServer: new Button({
                classNames: "mpageui-u-margin-absolute-loose",
                display: "Stop",
                clickEventName: STOP_WATCH_SERVER
            })
        }];
    };

    WebpackUI.prototype.afterCreate = function afterCreate() {
        var _this3 = this;

        this.convertEventUsingProp(TARGETS_CHANGE, "targetsChangeEventName", function (source, targets) {
            return [_this3, targets];
        });

        this.convertEventUsingProp(ADD_TARGET, "targetsChangeEventName", function (source) {
            return [_this3, _this3.getProp("targets").concat({ name: "New target" })];
        });

        this.convertEventUsingProp(RUN_DEV_SERVER, "runDevServerEventName", function (source, target) {
            return [_this3, target];
        });

        this.convertEventUsingProp(RUN_WATCH_SERVER, "runWatchServerEventName", function (source, target) {
            return [_this3, target];
        });

        this.convertEventUsingProp(STOP_WATCH_SERVER, "stopWatchServerEventName", function (source) {
            return [_this3];
        });

        this.convertEventUsingProp(STOP_DEV_SERVER, "stopDevServerEventName", function (source) {
            return [_this3];
        });
    };

    WebpackUI.prototype.view = function view(el, props, children, mChildren) {
        return [props.isDevServerRunning ? el("div", {}, ["Dev server running", mChildren.stopDevServer.render()]) : [], props.isWatchServerRunning ? el("div", {}, ["Watch server running", mChildren.stopWatchServer.render()]) : []].concat([mChildren.targetList.render(), mChildren.addTarget.render()]);
    };

    return WebpackUI;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (WebpackUI);

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Target__ = __webpack_require__(6);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var TARGET_CHANGE = "Internal::TargetList::TargetChange";
var TARGET_DELETED = "Internal::TargetList::TargetDelete";
var RUN_WATCH_SERVER = "Internal::TargetList::RunWatchServer";
var RUN_DEV_SERVER = "Internal::TargetList::RunDevServer";

var TargetList = function (_Fusion$UIComponent) {
    _inherits(TargetList, _Fusion$UIComponent);

    function TargetList() {
        _classCallCheck(this, TargetList);

        return _possibleConstructorReturn(this, _Fusion$UIComponent.apply(this, arguments));
    }

    TargetList.prototype.initialProps = function initialProps() {
        return {
            targets: {},
            targetsChangeEventName: null,
            runWatchServerEventName: null,
            runDevServerEventName: null,
            showServerButtons: true
        };
    };

    TargetList.prototype.dependentPropChangeHandlers = function dependentPropChangeHandlers() {
        var _this2 = this;

        return [["targets", "showServerButtons", function (targets, showServerButtons) {
            return _this2.replaceAllChildren(targets.map(function (target, i) {
                return new __WEBPACK_IMPORTED_MODULE_1__Target__["a" /* default */]({
                    targetChangeEventName: TARGET_CHANGE,
                    targetSettings: target,
                    deleteEventName: TARGET_DELETED,
                    runDevServerEventName: RUN_DEV_SERVER,
                    runWatchServerEventName: RUN_WATCH_SERVER,
                    _targetIndex: i,
                    showServerButtons: showServerButtons
                });
            }));
        }]];
    };

    TargetList.prototype.afterCreate = function afterCreate() {
        var _this3 = this;

        this.convertEventUsingProp(TARGET_DELETED, "targetsChangeEventName", function (source) {
            var newTargetList = _this3.getProp("targets").slice(0);
            newTargetList.splice(source.getProp("_targetIndex"), 1);
            return [_this3, newTargetList];
        });

        this.convertEventUsingProp(TARGET_CHANGE, "targetsChangeEventName", function (source, newTarget) {
            var newTargetList = _this3.getProp("targets").slice(0);
            newTargetList[source.getProp("_targetIndex")] = newTarget;
            return [_this3, newTargetList];
        });

        this.convertEventUsingProp(RUN_WATCH_SERVER, "runWatchServerEventName", function (source, target) {
            return [_this3, target];
        });

        this.convertEventUsingProp(RUN_DEV_SERVER, "runDevServerEventName", function (source, target) {
            return [_this3, target];
        });
    };

    TargetList.prototype.view = function view(el, props, children) {
        return this.renderChildren();
    };

    return TargetList;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (TargetList);

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_Gaia__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Externals__ = __webpack_require__(7);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Button = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].button.Button;
var JsonForm = __WEBPACK_IMPORTED_MODULE_1_Gaia__["controls"].JsonForm;

var RUN_DEV_SERVER_CLICK = "Target::RunDevServerClick";
var RUN_WATCH_SERVER_CLICK = "Target::RunWatchServerClick";
var DELETE_CLICK = "Target::DeleteClick";
var SETTINGS_CHANGE = "Target::SettingsChange";
var EXTERNALS_CHANGE = "Target::ExternalsChange";

var serverButtons = function serverButtons(props, mChildren) {
    return props.showServerButtons ? [mChildren.runDevServer.render(), mChildren.runWatchServer.render()] : [];
};

var Target = function (_Fusion$UIComponent) {
    _inherits(Target, _Fusion$UIComponent);

    function Target() {
        _classCallCheck(this, Target);

        return _possibleConstructorReturn(this, _Fusion$UIComponent.apply(this, arguments));
    }

    Target.prototype.initialProps = function initialProps() {
        return {
            targetSettings: {},
            targetChangeEventName: null,
            runDevServerEventName: null,
            runWatchServerEventName: null,
            deleteEventName: null,
            showServerButtons: true
        };
    };

    Target.prototype.propChangeHandlers = function propChangeHandlers() {
        var _this2 = this;

        return {
            targetSettings: function targetSettings(_targetSettings) {
                _this2.getChild("settings").setProp("jsonObject", _targetSettings);
                _this2.getChild("externals").setProp("externals", _targetSettings.externals);
            }
        };
    };

    Target.prototype.createChildren = function createChildren() {
        return [{
            settings: new JsonForm({
                changeEventName: SETTINGS_CHANGE,
                formDefinition: [{
                    key: "name",
                    label: "Target name",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "devtool",
                    label: "Dev tool",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "fileName",
                    label: "Output file name",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "cssFileName",
                    label: "CSS Output file name",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "outputFolder",
                    label: "Output folder",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "libraryName",
                    label: "Library name",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "entryPoints",
                    label: "Entry points (comma separated)",
                    type: JsonForm.CONTROL_TYPES.TEXTARRAY
                }, {
                    key: "sourceFolders",
                    label: "Source Folders (comma separated)",
                    type: JsonForm.CONTROL_TYPES.TEXTARRAY
                }, {
                    key: "contentBase",
                    label: "Content Base",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "publicPath",
                    label: "Public Path",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "port",
                    label: "Port",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "autoRefresh",
                    label: "Auto Refresh",
                    type: JsonForm.CONTROL_TYPES.CHECKBOX
                }, {
                    key: "includeCSS",
                    label: "Include CSS in bundle",
                    type: JsonForm.CONTROL_TYPES.CHECKBOX
                }, {
                    key: "envify",
                    label: "Envify",
                    type: JsonForm.CONTROL_TYPES.CHECKBOX
                }, {
                    key: "minify",
                    label: "Minify",
                    type: JsonForm.CONTROL_TYPES.CHECKBOX
                }, {
                    key: "includePolyfills",
                    label: "Include Polyfills",
                    type: JsonForm.CONTROL_TYPES.CHECKBOX
                }]
            })
        }, {
            runDevServer: new Button({
                clickEventName: RUN_DEV_SERVER_CLICK,
                type: Button.TYPE.LINK,
                display: "Run dev server"
            })
        }, {
            runWatchServer: new Button({
                clickEventName: RUN_WATCH_SERVER_CLICK,
                type: Button.TYPE.LINK,
                display: "Run watch server"
            })
        }, {
            delete: new Button({
                clickEventName: DELETE_CLICK,
                type: Button.TYPE.LINK,
                display: "Delete"
            })
        }, {
            externals: new __WEBPACK_IMPORTED_MODULE_2__Externals__["a" /* default */]({
                externalsChangeEventName: EXTERNALS_CHANGE
            })
        }];
    };

    Target.prototype.afterCreate = function afterCreate() {
        var _this3 = this;

        this.convertEventUsingProp(SETTINGS_CHANGE, "targetChangeEventName", function (source, newTarget) {
            return [_this3, newTarget];
        });
        this.convertEventUsingProp(EXTERNALS_CHANGE, "targetChangeEventName", function (source, externals) {
            return [_this3, Object.assign({}, _this3.getProp("targetSettings"), { externals: externals })];
        });
        this.convertEventUsingProp(DELETE_CLICK, "deleteEventName", function (source) {
            return [_this3];
        });
        this.convertEventUsingProp(RUN_DEV_SERVER_CLICK, "runDevServerEventName", function (source) {
            return [_this3, _this3.getProp("targetSettings")];
        });
        this.convertEventUsingProp(RUN_WATCH_SERVER_CLICK, "runWatchServerEventName", function (source) {
            return [_this3, _this3.getProp("targetSettings")];
        });
    };

    Target.prototype.view = function view(el, props, children, mChildren) {
        return [el("h2", {}, props.targetSettings.name), el("div", {
            class: "gaia-webpack-targetActions"
        }, serverButtons(props, mChildren).concat([mChildren.delete.render()])), el("div", {
            class: "gaia-section"
        }, [mChildren.settings.render(), mChildren.externals.render()])];
    };

    return Target;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (Target);

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_Gaia__);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Table = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].table.Table;
var JsonForm = __WEBPACK_IMPORTED_MODULE_1_Gaia__["controls"].JsonForm;
var Button = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].button.Button;

var DELETE_CLICK = "Externals::DeleteClick";
var NEW_EXTERNAL_CHANGE = "Externals::NewExternalChange";
var NEW_EXTERNAL_CLICK = "Externals::NewExternalClick";

var removeVariable = function removeVariable(variableName, externals) {
    delete externals[variableName];
    return externals;
};

var Externals = function (_Fusion$UIComponent) {
    _inherits(Externals, _Fusion$UIComponent);

    function Externals() {
        _classCallCheck(this, Externals);

        return _possibleConstructorReturn(this, _Fusion$UIComponent.apply(this, arguments));
    }

    Externals.prototype.initialProps = function initialProps() {
        return {
            externals: {},
            externalsChangeEventName: null
        };
    };

    Externals.prototype.createChildren = function createChildren() {
        return [{
            newExternalForm: new JsonForm({
                changeEventName: NEW_EXTERNAL_CHANGE,
                formDefinition: [{
                    key: "variableName",
                    label: "Variable name",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }, {
                    key: "value",
                    label: "Value",
                    type: JsonForm.CONTROL_TYPES.TEXTBOX
                }]
            })
        }, {
            newExternalButton: new Button({
                display: "Add",
                clickEventName: NEW_EXTERNAL_CLICK
            })
        }, {
            table: new Table({
                columns: [{ display: "Variable name", key: "variable" }, { display: "Value", key: "value" }, { display: "", key: "actions" }]
            })
        }];
    };

    Externals.prototype.propChangeHandlers = function propChangeHandlers() {
        var _this2 = this;

        return {
            externals: function externals(_externals) {
                return _this2.getChild("table").setProp("rows", Object.keys(_externals || {}).map(function (variableName, i) {
                    return {
                        key: variableName,
                        data: [{ display: variableName }, { display: _externals[variableName] }, { content: [new Button({
                                display: "Delete",
                                clickEventName: DELETE_CLICK,
                                _varName: variableName
                            })] }]
                    };
                }));
            }
        };
    };

    Externals.prototype.afterCreate = function afterCreate() {
        var _this3 = this;

        this.convertEventUsingProp(DELETE_CLICK, "externalsChangeEventName", function (source) {
            return [_this3, removeVariable(source.getProp("_varName"), Object.assign({}, _this3.getProp("externals")))];
        });

        this.on(NEW_EXTERNAL_CHANGE, function (source, newExternal) {
            return _this3.setState(newExternal);
        });

        this.convertEventUsingProp(NEW_EXTERNAL_CLICK, "externalsChangeEventName", function (source) {
            return [_this3, Object.assign({}, _this3.getProp("externals"), _defineProperty({}, _this3._state.variableName, _this3._state.value))];
        });
    };

    Externals.prototype.view = function view(el, props, children, mChildren) {
        return [el("h3", {}, "Externals"), mChildren.newExternalForm.render(), mChildren.newExternalButton.render(), mChildren.table.render()];
    };

    return Externals;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (Externals);

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,