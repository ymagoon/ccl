import * as Fusion from "MPageFusion";

const { forwardProp } = Fusion.helpers.props;
const Button = Fusion.atomic.button.Button;
const FormTextBox = Fusion.composite.form.FormTextBox;
const ContentHeader = Fusion.atomic.header.ContentHeader;
const BannerItem = Fusion.composite.banner.BannerItem;

const START_SERVER_EVENT = "Internal::MilproxyUI::StartServer";
const STOP_SERVER_EVENT = "Internal::MilproxyUI::StopServer";
const USER_VAL_CHANGE_EVENT = "Internal::MilproxyUI::UserChange";
const PASSWORD_VAL_CHANGE_EVENT = "Internal::MilproxyUI::PasswordChange";
const DOMAIN_CHANGE_EVENT = "Internal::MilproxyUI::DomainChange";
const LOGIN_EVENT = "Internal::MilproxyUI::Login";

export default class MilproxyUI extends Fusion.UIComponent {

    constructor(props, children) {
        super(props, children);
        this._state = {
            username: "",
            password: "",
            domain: ""
        };
    }

    initialProps() {
        return {
            serverStatus: {},
            startEventName: null,
            stopEventName: null,
            loginEventName: null
        };
    }

    propChangeHandlers() {
        return {
            username: (value) => {
                this._state.username = value;
                this.getChild("username").setProp("value", value)
            },
            password: (value) => {
                this._state.password = value;
                this.getChild("password").setProp("value", value)
            },
            domain: (value) => {
                this._state.domain = value;
                this.getChild("domain").setProp("value", value)
            },
        }
    }

    createChildren() {
        return [
            {
                startServerButton : new Button({
                    display: "Start",
                    clickEventName: START_SERVER_EVENT
                })
            },
            {
                stopServerButton : new Button({
                    display: "Stop",
                    clickEventName: STOP_SERVER_EVENT
                })
            },
            {
                username: new FormTextBox({
                    display: "User",
                    valueChangeEventName: USER_VAL_CHANGE_EVENT
                })
            },
            {
                password: new FormTextBox({
                    display: "Password",
                    options: {
                        inputType: "password"
                    },
                    valueChangeEventName: PASSWORD_VAL_CHANGE_EVENT
                })
            },
            {
                domain: new FormTextBox({
                    display: "Domain",
                    valueChangeEventName: DOMAIN_CHANGE_EVENT
                })
            },
            {
                loginButton: new Button({
                    display: "Login",
                    clickEventName: LOGIN_EVENT
                })
            }

        ];
    }

    afterCreate() {
        this.convertEventUsingProp(
            START_SERVER_EVENT,
            "startEventName",
            () => [ this ]
        );
        this.convertEventUsingProp(
            STOP_SERVER_EVENT,
            "stopEventName",
            () => [ this ]
        );
        this.convertEventUsingProp(
            LOGIN_EVENT,
            "loginEventName",
            () =>
                [
                    this,
                    {
                        username: this._state.username,
                        password: this._state.password,
                        domain: this._state.domain
                    }
                ]
        );
        this.on(
            USER_VAL_CHANGE_EVENT,
            (source, val) => {
                this._state.username = val.value;
            }
        );
        this.on(
            PASSWORD_VAL_CHANGE_EVENT,
            (source, val) => {
                this._state.password = val.value;
            }
        );
        this.on(
            DOMAIN_CHANGE_EVENT,
            (source, val) => {
                this._state.domain = val.value;
            }
        );
    }

    view(el, props, arr, children) {
        return el(
            "div",
            {
                class: "gaia-root-section"
            },
            [
                new BannerItem({
                    title: "Proxy will run at http://localhost:8081/mil",
                    description: `CCL can be ran through the reports URL, such as http://localhost:8081/mil/reports/CCL_SCRIPT_NAME?parameters=params`,
                    enableDismissClick: false
                }).render(),
                new ContentHeader({ title: "Server" }).render(),
                el(
                    "div",
                    {
                        class: "gaia-section"
                    },
                    [
                        `Server status: ${props.serverStatus.isRunning ? "Running " : "Stopped "}`,
                        children.startServerButton.render(),
                        " ",
                        children.stopServerButton.render(),
                    ]
                ),
                new ContentHeader({ title: "Domain Login" }).render(),
                el(
                    "div",
                    {
                        class: "gaia-section"
                    },
                    [
                        children.username.render(),
                        children.password.render(),
                        children.domain.render(),
                        children.loginButton.render()
                    ]
                )
            ]
        );
    }
}
