/**
 * @module whatsupdoc
 * @requires module:jsdoc-api
 * @see {@link https://github.com/jsdoc2md/jsdoc-api|module:jsdoc-api}
 * @requires module:marked
 * @see {@link https://github.com/chjj/marked|module:marked}
 * @requires module:jsdoc-to-markdown
 * @see {@link https://github.com/jsdoc2md/jsdoc-to-markdown|module:jsdoc-to-markdown}
 */
const jsdoc2md = require("jsdoc-to-markdown");
const marked = require("marked");
const assignProps = require("./lib/util/assignProps");

/**
 * The default config that serves as the base of the configuration passed
 * to the `jsdoc-to-markdown#render` method.
 *
 * @var {object} module:whatsupdoc~defaultConfig
 */
let defaultConfig = {
    files: [],
    access: "all",
    recurse: true
};

/**
 * Logs and re-rejects a Promise. This is useful for intermediate
 * functions that should be logging out information as well as
 * telling consumers that an error occurred.
 *
 * @function module:whatsupdoc~logAndReject
 * @param {*} err - An error
 * @returns {Promise}
 * @example
 * Promise.resolve(myValue)\n
 *      .then(myAction)\n
 *      .catch(logAndReject);
 */
const logAndReject = (err) => {
    console.error(err);
    return Promise.reject(err);
};

/**
 * Generated GFM Markdown from the input configuration
 *
 * @public
 * @function
 * @memberOf module:whatsupdoc
 * @param {WhatsUpDocConfig} config
 * @returns {Promise}
 */
const toMarkdown = config => Promise
    .resolve(assignProps(defaultConfig)(config))
    .then(config => (config.files.length ? jsdoc2md.render(config) : ""))
    .catch(logAndReject);

/**
 * Generates a GFM-based (github-flavored-markdown) HTML string from the input configuration
 *
 * @public
 * @function
 * @memberOf module:whatsupdoc
 * @param {WhatsUpDocConfig} config - a custom configuration
 * @returns {Promise}
 */
const toHTML = config => toMarkdown(config)
    .then(markdown => new Promise((res, rej) => {
        marked(markdown, (err, html) => (err ? rej(err) : res(html)));
    }))
    .catch(logAndReject);

module.exports = {
    toHTML,
    toMarkdown
};