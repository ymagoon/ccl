/**
 * @module lib/util/assignProps
 */

/**
 * @name module:lib/util/assignProps~innerTakeProps
 * @function
 * @param {object} target - Any old object will do
 * @returns {object}
 */
/**
 * Pulls a set of properties from a target object into a source object; if the property doesn't exist in
 * the target object, the value of the property in the source object is retained. Supports deep nesting
 * of objects.
 *
 * @alias module:lib/util/assignProps
 * @param {object} source - Properties and their default values
 * @returns {module:lib/util/assignProps~innerTakeProps}
 * @example
 * assignProps({}, { foo: 6, bar: 7 }) // == {} \n
 * assignProps({ foo: 5 }, { foo: 6, bar: 7 }) // == { foo: 6 }
 */
module.exports = source => target => Object.keys(source)
    .filter(prop => !!target[prop])
    .map(prop => (
        typeof source[prop] === "object"
        && target[prop] === "object"
        && !Array.isArray(source[prop])
            ? assignProps(source[prop])(target[prop])
            : { [prop]: target[prop] }
    ))
    .reduce(Object.assign, source);