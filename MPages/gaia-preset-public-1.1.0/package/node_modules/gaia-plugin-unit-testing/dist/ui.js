(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("MPageFusion"), require("Gaia"));
	else if(typeof define === 'function' && define.amd)
		define(["MPageFusion", "Gaia"], factory);
	else if(typeof exports === 'object')
		exports["gaia-plugin-unit-testing"] = factory(require("MPageFusion"), require("Gaia"));
	else
		root["gaia-plugin-unit-testing"] = factory(root["MPageFusion"], root["Gaia"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
    tabs: {
        tests: "Test Output",
        coverage: "Code Coverage",
        config: "Config"
    },
    content: {
        browserContent: {
            allPass: "All Tests are Passing!"
        },
        config: {
            selectAbove: "Please select a webpack target above",
            noExternals: "No externals found in selected target",
            singleRunHelp: "Uncheck to leave karma running and watch your files. Ctrl + c will kill the server (and Gaia's server).",
            singleRunDisplay: "Single Run",
            browsersDisplay: "Browsers",
            oneBrowser: "You must select at least one browser to run your unit tests",
            srcPathDisplay: "Source Path",
            unitTestPathDisplay: "Unit Test Path",
            specPathDisplay: "Spec Path",
            mockPathDisplay: "Mock Path",
            spyPathDisplay: "Spy Path",
            usesFusionDisplay: "My Artifact Uses Fusion",
            selectTarget: "Select a Webpack Target",
            targetDisplay: "Webpack Externals",
            saveDisplay: "Save Changes",
            testHeader: "Test Run Config",
            pathHeader: "Path Config",
            otherHeader: "Other Config"
        },
        resultsSummary: {
            success: "Success:",
            failed: "Failed:",
            skipped: "Skipped:",
            error: "Reporting Error:"
        },
        unitTester: {
            inCIMode: "SingleRun is not turned on. Use open browsers to debug or watch code changes. Press ctrl+c in cmd prompt window to exit this mode and see test results below.",
            runTests: "Run my unit tests"
        }
    },
    metadata: {
        name: "Unit Testing"
    }
});


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(11);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(13)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {
	module.hot.accept("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/index.js!./UnitTester.less", function() {
		var newContent = require("!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/index.js!./UnitTester.less");

		if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var settings = {
    browser: ["Chrome", "IE"],
    singleRun: true,
    srcPath: "src/main",
    unitTestPath: "src/__tests__",
    specPath: "src/__tests__/unit-tests/spec",
    mockPath: "src/__tests__/unit-tests/mock",
    spyPath: "src/__tests__/unit-tests/spy",
    usesFusion: true,
    target: null,
    externals: {}
};
/* harmony default export */ __webpack_exports__["a"] = (settings);

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(6);


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__i18n_en_us__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__js_Body__ = __webpack_require__(7);



/* harmony default export */ __webpack_exports__["default"] = ({
    label: __WEBPACK_IMPORTED_MODULE_0__i18n_en_us__["a" /* default */].metadata.name,
    control: __WEBPACK_IMPORTED_MODULE_1__js_Body__["a" /* default */],
    showHelp: true
});

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__UnitTester__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Coverage__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Config__ = __webpack_require__(16);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var RUN_KARMA = "Config::runKarma";
var TabControl = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["composite"].navigation.TabControl;

/**
 * This class creates the three tabs that make up the Unit Testing tab in Gaia: Unit Tester, Coverage, and Config
 * @class Body
 */

var Body = function (_UIComponent) {
    _inherits(Body, _UIComponent);

    function Body() {
        _classCallCheck(this, Body);

        return _possibleConstructorReturn(this, _UIComponent.apply(this, arguments));
    }

    /**
     * @inheritdoc
     */
    Body.prototype.createChildren = function createChildren() {
        return [{
            tabs: new TabControl({
                content: [{
                    id: "tests",
                    display: __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__["a" /* default */].tabs.tests,
                    view: new __WEBPACK_IMPORTED_MODULE_2__UnitTester__["a" /* default */]()
                }, {
                    id: "coverage",
                    display: __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__["a" /* default */].tabs.coverage,
                    view: new __WEBPACK_IMPORTED_MODULE_3__Coverage__["a" /* default */]()
                }, {
                    id: "config",
                    display: __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__["a" /* default */].tabs.config,
                    view: new __WEBPACK_IMPORTED_MODULE_4__Config__["a" /* default */]({
                        runKarmaEventName: RUN_KARMA
                    })
                }]
            })
        }];
    };

    /**
     * @inheritdoc
     */


    Body.prototype.afterCreate = function afterCreate() {
        var _this2 = this;

        //The Config tab will emit this event when it has saved the config and wants the tests ran
        this.on(RUN_KARMA, function () {
            _this2.stopPropagation(RUN_KARMA);
            var testerTab = _this2.getChild("tabs").getProp("content").find(function (tab) {
                return tab.id === "tests";
            }).view;
            Object(__WEBPACK_IMPORTED_MODULE_2__UnitTester__["b" /* runAfterConfigSave */])(testerTab);
        });
    };

    /**
     * @inheritdoc
     */


    Body.prototype.view = function view(el, props, children, mappedChildren) {
        return mappedChildren.tabs.render();
    };

    return Body;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (Body);
;

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return runAfterConfigSave; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_Gaia__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BrowserContent__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__defaultSettings__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__ = __webpack_require__(0);
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var ContentPanel = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].panel.ContentPanel,
    Button = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].button.Button,
    Container = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].container.Container;
var BannerItem = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["composite"].banner.BannerItem;


var RUN_TESTS = "UnitTester::runTests";

/**
 * This function calls the readConfig command for the unit tester
 * @function readConfig
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {Promise} A promise that runs the readConfig command
 */
var readConfig = function readConfig(tester) {
    return Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["runCommand"])("unit-testing", "readConfig");
};

/**
 * This function combines the testers settings with the config object from gaia.json and calls checkCIMode
 * @function updateSettings
 * @param {Object} config The gaia.json settings
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {Promise} A resolved promise that returns the combined settings
 */
var updateSettings = function updateSettings(config, tester) {
    var combinedSettings = Object.assign({}, tester._state.settings, config);
    checkCIMode(combinedSettings.singleRun, tester);
    tester.setState({ settings: combinedSettings });
    tester.update();
    return Promise.resolve(combinedSettings);
};

/**
 * This function calls the saveConfig command for the unit tester
 * @function saveConfig
 * @param {Object} settings The current settings for the unit tester
 * @returns {Promise} A promise that runs the saveConfig command
 */
var saveConfig = function saveConfig(settings) {
    return Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["runCommand"])("unit-testing", "saveConfig", { settings: settings });
};

/**
 * This function calls the run command for the unit tester
 * @function runKarma
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {Promise} A promise that runs the run command
 */
var runKarma = function runKarma(tester) {
    return Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["runCommand"])("unit-testing", "run", {});
};

/**
 * This function sets CI mode to false, calls update, and cals the readResults command for the unit tester
 * @function readOutput
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {Promise} A promise that runs the readResults command
 */
var readOutput = function readOutput(tester) {
    tester.setProp("inCIMode", false);
    tester.update();
    return Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["runCommand"])("unit-testing", "readResults", {});
};

/**
 * This function checks the singleRun parameter and sets the CI mode to true if singleRun is false and calls update.
 * @function readOutput
 * @param {Boolean} singleRun A value to represent if the user wants to run the tests once or not
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {undefined}
 */
var checkCIMode = function checkCIMode(singleRun, tester) {
    if (!singleRun) {
        tester.setProp("inCIMode", true);
        tester.update();
    }
};

/**
 * This function handles showing an error (and clearing other content) banner if an error occurs.
 * @function errorOccurred
 * @param {Object} error The error object that was thrown
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {undefined}
 */
var errorOccurred = function errorOccurred(error, tester) {
    var errMsg = error.message || error;

    tester.getChild("runTestsBtn").setProp("disabled", false);
    tester.getChild("alertBanner").setProp("description", errMsg);

    tester.setProp("content", []);
    tester.getChild("container").removeAllChildren();
    tester.setProp("showError", true);

    tester.update();
};

/**
 * This function is called when the Config tab has had changes saved. The config does not need to be checked
 * since it was just updated.
 * @function runAfterConfigSave
 * @param {UnitTester} tester The current UnitTester object instance
 * @returns {undefined}
 */
var runAfterConfigSave = function runAfterConfigSave(tester) {
    tester.getChild("runTestsBtn").setProp("disabled", true);
    tester.setProp("content", []);
    runKarma(tester).then(function () {
        return readOutput(tester);
    }).then(function (results) {
        return parseBrowsers(tester, results);
    }).catch(function (error) {
        return errorOccurred(error, tester);
    });
};

/**
 * Loops through each browser in the output. Creates a new ContentPanel for each browser with a header
 * and content. Removes the spinner.
 * @function parseBrowsers
 * @param {UnitTester} tester The current UnitTester object instance
 * @param {Object} results The test results output
 * @returns {undefined}
 */
var parseBrowsers = function parseBrowsers(tester, results) {
    results.browsers.forEach(function (browsers) {
        tester.getProp("content").push(new ContentPanel({
            headerDisplay: browsers.browser.name,
            content: [new __WEBPACK_IMPORTED_MODULE_2__BrowserContent__["a" /* default */]({
                browsers: browsers
            })],
            classNames: "mpageui-u-margin-top-relative-loose"
        }));
    });
    tester.getChild("container").replaceAllChildren(tester.getProp("content"));
    tester.getChild("runTestsBtn").setProp("disabled", false);
    tester.setProp("showError", false);
    tester.update();
};

/**
 * @class UnitTester
 */

var UnitTester = function (_UIComponent) {
    _inherits(UnitTester, _UIComponent);

    function UnitTester() {
        _classCallCheck(this, UnitTester);

        return _possibleConstructorReturn(this, _UIComponent.apply(this, arguments));
    }

    /**
     * @inheritdoc
     */
    UnitTester.prototype.initialProps = function initialProps() {
        return {
            content: [],
            inCIMode: false, //true if singleRun is set to false
            showError: false
        };
    };

    /**
     * @inheritdoc
     */


    UnitTester.prototype.beforeCreate = function beforeCreate() {
        this._state = {
            settings: __WEBPACK_IMPORTED_MODULE_3__defaultSettings__["a" /* default */]
        };
    };

    /**
     * @inheritDoc
     */


    UnitTester.prototype.createChildren = function createChildren() {
        return [{
            alertBanner: new BannerItem({
                description: "Something went wrong",
                type: BannerItem.TYPE.ERROR,
                enableDismissClick: false,
                moreDetailText: "Try changing some settings on the 'Config' tab.",
                classNames: "mpageui-u-margin-relative-tight"
            })
        }, {
            runTestsBtn: new Button({
                type: Button.TYPE.SECONDARY,
                clickEventName: RUN_TESTS,
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.unitTester.runTests
            })
        }, {
            container: new Container()
        }];
    };

    /**
     * @inheritDoc
     */


    UnitTester.prototype.afterCreate = function afterCreate() {
        var _this2 = this;

        this.on(RUN_TESTS, function () {
            _this2.stopPropagation(RUN_TESTS);
            _this2.getChild("runTestsBtn").setProp("disabled", true);
            _this2.setProp("content", []);
            _this2.update();
            readConfig(_this2) //reads the gaia.json settings
            .then(function (config) {
                return updateSettings(config, _this2);
            }) // merges it with default settings
            .then(function (config) {
                return saveConfig(config);
            }) //saves off final settings to gaia.json
            .then(function () {
                return runKarma(_this2);
            }) //runs karma with gaia.json settings used
            .then(function () {
                return readOutput(_this2);
            }).then(function (results) {
                return parseBrowsers(_this2, results);
            }).catch(function (error) {
                return errorOccurred(error, _this2);
            });
        });
    };

    /**
     * @inheritDoc
     */


    UnitTester.prototype.view = function view(el, props, children, mappedChildren) {
        return el("div", {}, [el("div", {}, mappedChildren.runTestsBtn.render())].concat(_toConsumableArray(props.inCIMode ? [el("div", {}, __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.unitTester.inCIMode)] : []), _toConsumableArray(props.showError ? [mappedChildren.alertBanner.render()] : []), [el("div", {}, mappedChildren.container.render())]));
    };

    return UnitTester;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (UnitTester);

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ResultsSummary__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__i18n_en_us__ = __webpack_require__(0);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * Combines the errors from an array to a string, each on a new line
 * @function renderErrors
 * @param errors The errors array from the test result output
 * @returns {String} The errors in a string, each on a new line
 */
var renderErrors = function renderErrors(errors) {
    if (errors) return errors.join("\n");
};

/**
 * Parses through the failures array from the test result output.
 * For each failure, it joins the suite into a string, each piece on a new line.
 * It trims the error messages and joins them each on a new line.
 * Then it returns the suite, description, and error.
 * @function parseFailures
 * @param results The results from the test result output
 * @param el The element object
 * @returns {Array} The array of failures setup in an easy to read format
 */
var parseFailures = function parseFailures(results, el) {
    if (results.errors.length) return [];

    if (!results.failures.length) return [__WEBPACK_IMPORTED_MODULE_2__i18n_en_us__["a" /* default */].content.browserContent.allPass];

    return results.failures.map(function (result) {
        var suiteStr = result.suite.join("\n");
        var errorLog = result.log.map(function (str) {
            return str.trim();
        }).join("\n");

        return [el("div", {}, suiteStr + "\n\t" + result.description)].concat([el("div", { style: "color: red; font-weight: bold; margin: 0 0 10px 60px;" }, errorLog)]);
    });
};

/**
 * Updates the summary content for the browser output
 * @function renderSummary
 * @param browserContent The BrowserContent object
 * @param results The test results output
 * @returns {undefined}
 */
var renderSummary = function renderSummary(browserContent, results) {
    browserContent.getChild("browserSummary").setProp("summary", results.lastResult);
    browserContent.update();
};

/**
 * @class BrowserContent
 */

var BrowserContent = function (_UIComponent) {
    _inherits(BrowserContent, _UIComponent);

    function BrowserContent() {
        _classCallCheck(this, BrowserContent);

        return _possibleConstructorReturn(this, _UIComponent.apply(this, arguments));
    }

    /**
     * @inheritDoc
     */
    BrowserContent.prototype.initialProps = function initialProps() {
        return {
            browsers: {}
        };
    };

    /**
     * @inheritDoc
     */


    BrowserContent.prototype.createChildren = function createChildren() {
        return [{
            browserSummary: new __WEBPACK_IMPORTED_MODULE_1__ResultsSummary__["a" /* default */]()
        }];
    };

    /**
     * @inheritDoc
     */


    BrowserContent.prototype.afterCreate = function afterCreate() {
        renderSummary(this, this.getProp("browsers").browser);
    };

    /**
     * @inheritDoc
     */


    BrowserContent.prototype.view = function view(el, props, children, mappedChildren) {
        return el("div", { class: "mpageui-u-pad-relative-base" }, [el("div", {}, mappedChildren.browserSummary.render()), el("div", { style: "color: red; font-weight: bold;" }, renderErrors(props.browsers.errors)), el("div", { style: "white-space: pre-wrap;" }, parseFailures(props.browsers, el))]);
    };

    return BrowserContent;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (BrowserContent);

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_UnitTester_less__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_UnitTester_less___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_UnitTester_less__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * Displays the summary of the unit tests results for a browser.
 * @class ResultsSummary
 */

var ResultsSummary = function (_UIComponent) {
    _inherits(ResultsSummary, _UIComponent);

    function ResultsSummary() {
        _classCallCheck(this, ResultsSummary);

        return _possibleConstructorReturn(this, _UIComponent.apply(this, arguments));
    }

    /**
     * @inheritDoc
     */
    ResultsSummary.prototype.initialProps = function initialProps() {
        return {
            summary: {
                success: "",
                failed: "",
                skipped: "",
                error: false
            }
        };
    };

    /**
     * @inheritDoc
     */


    ResultsSummary.prototype.view = function view(el, props) {
        return el("div", { class: "mpageui-u-pad-bottom-relative-base" }, [el("div", { class: "results-success" }, __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__["a" /* default */].content.resultsSummary.success + " " + props.summary.success), el("div", { class: "results-failed" }, __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__["a" /* default */].content.resultsSummary.failed + " " + props.summary.failed), el("div", { class: "results-skipped" }, __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__["a" /* default */].content.resultsSummary.skipped + " " + props.summary.skipped), el("div", {}, __WEBPACK_IMPORTED_MODULE_1__i18n_en_us__["a" /* default */].content.resultsSummary.error + " " + props.summary.error)]);
    };

    return ResultsSummary;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (ResultsSummary);

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(12)(false);
// imports


// module
exports.push([module.i, ".gaia-plugin-UnitTester .mpageui-FormTextBox {\n  margin-bottom: 1rem;\n}\n.gaia-plugin-UnitTester .mpageui-FormCheckbox {\n  margin-bottom: 1rem;\n}\n.wrap-json {\n  white-space: pre-wrap;\n}\n.results-success {\n  color: green;\n}\n.results-failed {\n  color: red;\n}\n.results-skipped {\n  color: orange;\n}\n@media (max-width: 759px) {\n  .coverage-view {\n    height: 75vh;\n  }\n}\n@media (min-width: 760px) {\n  .coverage-view {\n    height: 80vh;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 12 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(14);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 14 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_Gaia__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__i18n_en_us__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_UnitTester_less__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_UnitTester_less___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__styles_UnitTester_less__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var DocumentRenderer = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].DocumentRenderer;

/**
 * Displays the code coverage of the unit test suite.
 * @class Coverage
 */

var Coverage = function (_UIComponent) {
    _inherits(Coverage, _UIComponent);

    function Coverage() {
        _classCallCheck(this, Coverage);

        return _possibleConstructorReturn(this, _UIComponent.apply(this, arguments));
    }

    /**
     * @inheritDoc
     */
    Coverage.prototype.createChildren = function createChildren() {
        return [{
            docRend: new DocumentRenderer({
                src: Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["routeUrl"])("unit-testing", "coverage") + "/index.html"
            })
        }];
    };

    /**
     * @inheritDoc
     */


    Coverage.prototype.view = function view(el, props, children, mappedChildren) {
        return el("div", { class: "coverage-view" }, mappedChildren.docRend.render());
    };

    return Coverage;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (Coverage);

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_MPageFusion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Gaia___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_Gaia__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_UnitTester_less__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_UnitTester_less___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_UnitTester_less__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__defaultSettings__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__ = __webpack_require__(0);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var _composite$form = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["composite"].form,
    FormCheckbox = _composite$form.FormCheckbox,
    FormCheckboxGroup = _composite$form.FormCheckboxGroup,
    FormTextBox = _composite$form.FormTextBox,
    FormSelect = _composite$form.FormSelect;
var Button = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].button.Button,
    ContentHeader = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].header.ContentHeader,
    _atomic$indicator = __WEBPACK_IMPORTED_MODULE_0_MPageFusion__["atomic"].indicator,
    LoadingSpinner = _atomic$indicator.LoadingSpinner,
    Notify = _atomic$indicator.Notify;

/**
 * This function calls the saveConfig command for the unit tester. Then it enables the save button and emits
 * an event to tell the unit tests to run with the new config.
 * @function saveConfig
 * @param {Object} settings The new settings to save to the gaia.json file
 * @param {Config} configObj The current Config object instance
 * @returns {Promise} A promise that runs the saveConfig command and then emits an event
 */

var saveConfig = function saveConfig(settings, configObj) {
    Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["runCommand"])("unit-testing", "saveConfig", { settings: settings }).then(function () {
        configObj.getChild("saveChangesButton").setProp("disabled", false);
        configObj.update();
        configObj.emit(configObj.getProp("runKarmaEventName"), configObj);
    });
};

/**
 * This function calls the readConfig command for the unit tester.
 * @function readConfig
 * @param {Config} configObj The current Config object instance
 * @returns {Promise} A promise that runs the readConfig command
 */
var readConfig = function readConfig(configObj) {
    return Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["runCommand"])("unit-testing", "readConfig");
};

/**
 * This function calls the getTargetList command for the webpack plugin.
 * @function getTargetNames
 * @param {Config} configObj The current Config object instance
 * @returns {Promise} A promise that runs the getTargetList command
 */
var getTargetNames = function getTargetNames(configObj) {
    return Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["runCommand"])("webpack", "getTargetList");
};

/**
 * This function calls the readExternals command for the webpack plugin.
 * @function getTargetExternals
 * @param {String} targetName The name of the desired external's target
 * @returns {Promise} A promise that runs the readExternals command
 */
var getTargetExternals = function getTargetExternals(targetName) {
    return Object(__WEBPACK_IMPORTED_MODULE_1_Gaia__["runCommand"])("webpack", "readExternals", {
        target: targetName
    });
};

/**
 * This function takes the new settings and updates all the children with them. Then it calls finishChanges.
 * @function updateChildren
 * @param {Array} targetNames The names of all the targets created in the webpack plugin
 * @param {Config} configObj The current Config object instance
 * @returns {undefined}
 */
var updateChildren = function updateChildren(targetNames, configObj) {
    var newSettings = configObj._state.settings;
    configObj.getChild("singleRunCheckbox").setProp("value", newSettings.singleRun);
    configObj.getChild("browserCheckboxGroup").setProp("value", newSettings.browser);
    configObj.getChild("srcPathTextBox").setProp("value", newSettings.srcPath);
    configObj.getChild("unitTestPathTextBox").setProp("value", newSettings.unitTestPath);
    configObj.getChild("specPathTextBox").setProp("value", newSettings.specPath);
    configObj.getChild("mockPathTextBox").setProp("value", newSettings.mockPath);
    configObj.getChild("spyPathTextBox").setProp("value", newSettings.spyPath);
    configObj.getChild("usesFusionCheckbox").setProp("value", newSettings.usesFusion);
    configObj.getChild("targetNamesDropDown").getProp("options").items = targetNames;
    configObj.getChild("targetNamesDropDown").setProp("value", newSettings.target);
    configObj.setProp("externalsList", getExternalsText(newSettings.target, newSettings.externals));
    finishChanges(configObj);
};

/**
 * This function decides what text should show below the target drop down. If the helper text is select or
 * a target is selected that doesn't have externals then helper text shows. Otherwise, the externals object
 * is printed out for the selected webpack target.
 * @function getExternalsText
 * @param {String} target The selected value from the drop down
 * @param {Object} externals The externals from the selected webpack target
 * @returns {String} Helper text or the externals for the selected webpack target
 */
var getExternalsText = function getExternalsText(target, externals) {
    if (!target) {
        //If target is null, helper text is selected
        return __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.selectAbove;
    }

    if (Object.keys(externals).length) {
        //If externals object has values
        return JSON.stringify(externals, null, "\t");
    }

    //else, a target is selected that has no externals
    return __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.noExternals;
};

/**
 * This function takes the array of target names returned from the webpack plugin and creates a new array with
 * values setup so the drop down can display them.
 * @function createTargetList
 * @param {Array} targetNames The target names from the webpack plugin
 * @returns {Promise} A resolved promise with a new array of names to display in the target drop down
 */
var createTargetList = function createTargetList(targetNames) {
    return Promise.resolve(targetNames.map(function (name) {
        return {
            display: name,
            id: name
        };
    }));
};

/**
 * This function does some cleanup for the tab. It turns off the spinner and enables the save button.
 * Then it calls update on the tab.
 * @function finishChanges
 * @param {Config} configObj The current Config object instance
 * @returns {undefined}
 */
var finishChanges = function finishChanges(configObj) {
    //remove spinner
    configObj.getChild("spinner").setProp("isLoading", false);
    //enable save button
    configObj.getChild("saveChangesButton").setProp("disabled", false);
    configObj.update();
};

/**
 * Small helper to render a header.
 * @function header
 * @param {String} title - The title of the header.
 * @returns {VDom} Rendered header.
 */
var header = function header(title) {
    return new ContentHeader({ title: title }).render();
};

//Use this later when Notify is available from Fusion
/*class NotifyMessage extends UIComponent {
    view(el, props, children) {
        return el(
            "div",
            {
                class: "mpageui-NotifyMessage mpageui-NotifyMessage--added"
            },
            props.display
        );
    }
}*/

/**
 * @class Config
 */

var Config = function (_UIComponent) {
    _inherits(Config, _UIComponent);

    function Config() {
        _classCallCheck(this, Config);

        return _possibleConstructorReturn(this, _UIComponent.apply(this, arguments));
    }

    /**
     * @inheritdoc
     */
    Config.prototype.initialState = function initialState() {
        return {
            settings: __WEBPACK_IMPORTED_MODULE_3__defaultSettings__["a" /* default */],
            submitted: false
        };
    };

    /**
     * @inheritdoc
     */


    Config.prototype.initialProps = function initialProps() {
        return {
            runKarmaEventName: "",
            externalsList: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.selectAbove
        };
    };

    /**
     * @inheritdoc
     */


    Config.prototype.beforeCreate = function beforeCreate() {
        var _this2 = this;

        readConfig(this).then(function (config) {
            return Promise.resolve(Object.assign(_this2._state.settings, config));
        }).then(function () {
            return getTargetNames(_this2);
        }).then(function (names) {
            return createTargetList(names);
        }).then(function (items) {
            return updateChildren(items, _this2);
        });
    };

    /**
     * @inheritdoc
     */


    Config.prototype.createChildren = function createChildren() {
        return [{
            singleRunCheckbox: new FormCheckbox({
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.singleRunDisplay,
                helperHandler: function helperHandler() {
                    return __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.singleRunHelp;
                },
                value: this._state.settings.singleRun,
                valueChangeEventName: "singleRunChange"
            })
        }, {
            browserCheckboxGroup: new FormCheckboxGroup({
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.browsersDisplay,
                isRequired: true,
                helperHandler: function helperHandler(value) {
                    return value.length > 0 ? null : __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.oneBrowser;
                },
                options: {
                    items: [{ display: "Chrome", id: "Chrome" }, { display: "Firefox", id: "Firefox" }, { display: "IE", id: "IE" }, { display: "Opera", id: "Opera" }, { display: "PhantomJS", id: "PhantomJS" }, { display: "Safari", id: "Safari" }]
                },
                value: this._state.settings.browser,
                valueChangeEventName: "browserChange"
            })
        }, {
            srcPathTextBox: new FormTextBox({
                valueChangeEventName: "srcPathChange",
                options: {
                    placeholder: this._state.settings.srcPath
                },
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.srcPathDisplay
            })
        }, {
            unitTestPathTextBox: new FormTextBox({
                valueChangeEventName: "unitTestPathChange",
                options: {
                    placeholder: this._state.settings.unitTestPath
                },
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.unitTestPathDisplay
            })
        }, {
            specPathTextBox: new FormTextBox({
                valueChangeEventName: "specPathChange",
                options: {
                    placeholder: this._state.settings.specPath
                },
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.specPathDisplay
            })
        }, {
            mockPathTextBox: new FormTextBox({
                valueChangeEventName: "mockPathChange",
                options: {
                    placeholder: this._state.settings.mockPath
                },
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.mockPathDisplay
            })
        }, {
            spyPathTextBox: new FormTextBox({
                valueChangeEventName: "spyPathChange",
                options: {
                    placeholder: this._state.settings.spyPath
                },
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.spyPathDisplay
            })
        }, {
            usesFusionCheckbox: new FormCheckbox({
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.usesFusionDisplay,
                value: this._state.settings.usesFusion,
                valueChangeEventName: "usesFusionChange"
            })
        }, {
            targetNamesDropDown: new FormSelect({
                valueChangeEventName: "targetChange",
                options: {
                    placeholder: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.selectTarget,
                    items: []
                },
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.targetDisplay
            })
        }, {
            saveChangesButton: new Button({
                display: __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.saveDisplay,
                clickEventName: "saveForm",
                type: "primary",
                disabled: true
            })
        }, {
            spinner: new LoadingSpinner({
                isLoading: true,
                size: LoadingSpinner.SIZE.LARGE
            })
            /*,
            {
                saveSuccessNotify: new Notify({
                    content: [
                        new NotifyMessage({
                            display: "Settings saved successfully. Re-running unit tests now."
                        })
                    ]
                })
            }*/
        }];
    };

    /**
     * @inheritdoc
     */


    Config.prototype.afterCreate = function afterCreate() {
        var _this3 = this;

        Object.keys(this._state.settings).filter(function (fieldName) {
            return fieldName !== "target";
        }).forEach(function (fieldName) {
            _this3.on(fieldName + "Change", function (context, _ref) {
                var value = _ref.value,
                    isValid = _ref.isValid;

                _this3.stopPropagation(fieldName + "Change");
                _this3._state.settings[fieldName] = value;
                _this3.update();
            });
        });

        this.on("saveForm", function () {
            _this3.stopPropagation("saveForm");
            _this3.setState({ submitted: true });
            _this3.getChild("saveChangesButton").setProp("disabled", true);
            _this3.update();
            saveConfig(_this3._state.settings, _this3);
        });

        this.on("targetChange", function (context, _ref2) {
            var value = _ref2.value,
                isValid = _ref2.isValid;

            _this3.stopPropagation("targetChange");
            if (!value) {
                _this3.setProp("externalsList", __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.selectAbove);
                _this3.setState({ settings: Object.assign({}, _this3._state.settings, { externals: {}, target: value }) });
                _this3.update();
                return;
            }
            getTargetExternals(value).then(function (externals) {
                if (externals) {
                    //if externals exist, set prop to string version and set setting to json version
                    _this3.setProp("externalsList", JSON.stringify(externals, null, "\t"));
                    _this3.setState({ settings: Object.assign({}, _this3._state.settings, { externals: externals, target: value }) });
                } else {
                    //if externals do not exist, set prop to string saying so and setting to empty object
                    _this3.setProp("externalsList", __WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.noExternals);
                    _this3.setState({ settings: Object.assign({}, _this3._state.settings, { externals: {}, target: value }) });
                }
                _this3.update();
            });
        });
    };

    /**
     * @inheritdoc
     */


    Config.prototype.view = function view(el, props, children, mappedChildren) {
        return el("div", { class: "gaia-plugin-UnitTester gaia-root-section" }, el("div", {}, [mappedChildren.spinner.render()]), header(__WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.testHeader), el("section", { class: "gaia-section" }, [mappedChildren.singleRunCheckbox.render(), mappedChildren.browserCheckboxGroup.render()]), el("hr", {}), header(__WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.pathHeader), el("section", { class: "gaia-section" }, [mappedChildren.srcPathTextBox.render(), mappedChildren.unitTestPathTextBox.render(), mappedChildren.specPathTextBox.render(), mappedChildren.mockPathTextBox.render(), mappedChildren.spyPathTextBox.render()]), el("hr", {}), header(__WEBPACK_IMPORTED_MODULE_4__i18n_en_us__["a" /* default */].content.config.otherHeader), el("section", { class: "gaia-section" }, [mappedChildren.usesFusionCheckbox.render(), mappedChildren.targetNamesDropDown.render(), el("div", { class: "wrap-json" }, props.externalsList)]), el("div", { class: "mpageui-u-flexgrid-row" }, [el("div", { class: "mpageui-u-flexgrid-col-sm-6 mpageui-u-flexgrid-col-12" }, mappedChildren.saveChangesButton.render()) /*,
el("div", { class: "mpageui-u-flexgrid-col-sm-6 mpageui-u-flexgrid-col-12" },
mappedChildren.saveSuccessNotify.render()

        ]));
    };

    return Config;
}(__WEBPACK_IMPORTED_MODULE_0_MPageFusion__["UIComponent"]);

/* harmony default export */ __webpack_exports__["a"] = (Config);
;

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,