/**
   (The MIT License)

Copyright (c) 2014 Philipp Otto

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
**/

'use strict';

var util = require('util');
var stream = require('stream');


var TransformerStream = function (transformerFunction, req, res) {
  this.transformerFunction = transformerFunction;
  this.req = req;
  this.res = res;
  this.readable = true;
  this.writable = true;
  this.chunks = [];
};

util.inherits(TransformerStream, stream);

TransformerStream.prototype.write = function (data) {
  this.chunks.push(data);
};

TransformerStream.prototype.end = function () {
  var self = this;
  var emit = function(data) {
    self.emit('data', data);
    self.emit('end');
  };

  // When used in an express server, chunks might be strings instead and
  // not always buffers
  const dataStr =
    this.chunks[0] && this.chunks[0] instanceof Buffer
    ? Buffer.concat(this.chunks).toString()
    : this.chunks.join("");

  var data = this.transformerFunction(dataStr, this.req, this.res);

  if (data.constructor.name === 'Promise') {
    data.then(emit, emit);
  } else {
    emit(data);
  }
};


module.exports = function transformerProxy(transformerFunction, options) {
  var identity = function (data) {
    return data;
  };

  if (!options) {
    options = {};
  }

  return function transformerProxy(req, res, next) {
    var identityOrTransformer = (options.match && !options.match.test(req.url)) ? identity : transformerFunction;

    var transformerStream = new TransformerStream(identityOrTransformer, req, res);

    var resWrite = res.write.bind(res);
    var resEnd = res.end.bind(res);
    var resWriteHead = res.writeHead.bind(res);

    res.write = function (data, encoding) {
      transformerStream.write(data, encoding);
    };

    res.end = function (data, encoding) {
      if (data) {
        this.write(data, encoding);
      }
      transformerStream.end(data, encoding);
    };

    transformerStream.on('data', function (buf) {
      resWrite(buf);
    });

    transformerStream.on('end', function () {
      resEnd();
    });

    res.writeHead = function (code, headers) {
      res.removeHeader('Content-Length');

      if (options.headers) {
        options.headers.forEach(function (header) {
          if (header.value) {
            res.setHeader(header.name, header.value);
          } else {
            res.removeHeader(header.name);
          }
        });
      }

      if (headers) {
        delete headers['content-length'];
      }

      resWriteHead.apply(null, arguments);
    };

    next();
  }
};
