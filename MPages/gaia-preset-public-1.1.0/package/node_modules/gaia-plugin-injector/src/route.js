const { readConfig } = require("./commands/config");
const { injectUrls } = require("fusion-injector");
const { getMatchingMockRequest } = require("./mockRequestManager");

// Initialize proxy server
const httpProxy = require("http-proxy").createProxyServer((req,res) => {});
httpProxy.on("error", (err, errReq, errRes) => {
    errRes.writeHead(500, {
        'Content-Type': 'text/plain'
    });
    console.log(err);
    errRes.end(JSON.stringify(err));
});


/**
 * This function routes requests to the httpProxy server.  If a request matches a mocked up response the reply is
 * injected and the http request is bypassed.
 * @param gaia The current gaia object
 * @param args The plugin arguments
 * @param req The http request
 * @param res The http response
 * @param state The current plugin state
 * @param next optional passthrough function
 */
const inject = (gaia, args, req, res, next, state) => {
    readConfig(gaia, args)
        .then(
            (config) => {
                const url = req.params[0] || req.url;
                req.url = req.url.substr("/injector/inject".length);
                const mockResponse = getMatchingMockRequest(config, args, url, state.recordingState);
                // Included injected URLs in the written response
                injectUrls(
                    config.urls,
                    config.settings.prefix || "",
                    req,
                    res
                );
                if (mockResponse) {
                    const latency = mockResponse.latency || 0;
                    setTimeout(() => {
                        res.send(mockResponse.response);
                    }, latency);
                }
                else {
                    // Send request through proxy to target URL (typically millenium proxy)
                    httpProxy.web(req, res, {target: config.settings.targetUrl, changeOrigin: true});
                }
            }
        );
};

module.exports = {
    inject,
    httpProxy
};
