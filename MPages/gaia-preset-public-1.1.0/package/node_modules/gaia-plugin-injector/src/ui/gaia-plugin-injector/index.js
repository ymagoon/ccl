import * as Fusion from "MPageFusion";
import InjectorUI from "./InjectorUI";

import { runCommand } from "Gaia";

const URLS_CHANGED = "InjectorIndex::UrlsChanged";
const SETTINGS_CHANGED = "InjectorIndex::SettingsChanged";

const retrieveSettings = (control) =>
    runCommand("injector", "readSettings", {})
    .then(
        (settings) =>
            control
            .getChild("injectorUI")
            .setProp("settings", settings)
            .update()
    );

const convertUrlsToUI = (urls) =>
    Object.keys(urls).reduce(
        (result, urlKey) =>
            result.concat({
                url: urlKey,
                top: urls[urlKey].top,
                bottom: urls[urlKey].bottom
            })
        , []
    );

const convertUrlsToConfig = (urls) =>
    urls.reduce(
        (result, url) => {
            result[url.url] = {
                top: url.top,
                bottom: url.bottom
            };
            return result;
        },
        {}
    );

const retrieveUrls = (control) =>
    runCommand("injector", "readUrls", {})
    .then(
        (urls) =>
            control
            .getChild("injectorUI")
            .setProp("urls", convertUrlsToUI(urls))
            .update()
    );

const saveSettings = (timeout, settings) => {
    if (timeout) {
        clearTimeout(timeout);
    }
    return setTimeout(
        () => runCommand("injector", "saveSettings", { settings }),
        200
    );
};

const saveUrls = (timeout, urls) => {
    if (timeout) {
        clearTimeout(timeout);
    }
    return setTimeout(
        () => runCommand("injector", "saveUrls", { urls: convertUrlsToConfig(urls) }),
        200
    );
};

class InjectorIndex extends Fusion.UIComponent {

    createChildren() {
        return [
            {
                injectorUI: new InjectorUI({
                    settingsChangedEventName: SETTINGS_CHANGED,
                    urlsChangedEventName: URLS_CHANGED
                })
            },
        ];
    }

    afterCreate() {
        retrieveSettings(this);
        retrieveUrls(this);

        this.on(URLS_CHANGED, (source, urls) => {
            this.getChild("injectorUI")
                .setProp("urls", urls)
                .update();
            this._saveUrlTimeout = saveUrls(
                this._saveUrlTimeout,
                urls
            );
        });

        this.on(SETTINGS_CHANGED, (source, settings) => {
            this.getChild("injectorUI")
                .setProp("settings", settings)
                .update();

            this._saveSettingsTimeout = saveSettings(
                this._saveSettingsTimeout,
                settings
            );
        });
    }

    view(el, props, children, mChildren) {
        return  this.renderChildren();
    }
};


export default {
	label: "Injector",
	control: InjectorIndex,
    showHelp: true
};
