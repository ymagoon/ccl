import * as Fusion from "MPageFusion";
import DeletableTextbox from "./DeletableTextbox";
import TextboxList from "./TextboxList";


const Textbox = Fusion.composite.form.FormTextBox;
const UIComponent = Fusion.UIComponent;
const Button = Fusion.atomic.button.Button;
const forwardProp = Fusion.helpers.props.forwardProp;
const ContentPanel = Fusion.atomic.panel.ContentPanel;
const AddIcon = Fusion.atomic.icon.svg.content.Add;

const URL_CHANGE = "Internal::SingleUrl::UrlChange";
const URL_DELETE = "Internal::SIngleUrl::Delete";
const TOP_VALUE_CHANGE = "Internal::SingleUrl::TopValueChange";
const TOP_ADD = "Internal::SingleUrl::TopAdd";
const BOTTOM_VALUE_CHANGE = "Internal::SingleUrl::BottomValueChange";
const BOTTOM_ADD = "Internal::SingleUrl::BottomAdd";

const setContentProp = (control, prop) => (value) =>
      control.getChild("contentPanel").getProp("content")[0].setProp(prop, value);

class SingleUrlContent extends UIComponent {

    createChildren() {
        return [
            {
                delete: new Button({
                    display: "Delete Url",
                    type: Button.TYPE.LINK,
                    clickEventName: URL_DELETE
                })
            },
            {
                url: new Textbox({
                    display: "Url to intercept",
                    valueChangeEventName: URL_CHANGE
                })
            },
            {
                topList: new TextboxList({
                    valueChangeEventName: TOP_VALUE_CHANGE
                })
            },
            {
                topAdd: new Button({
                    clickEventName: TOP_ADD,
                    icon: new AddIcon()
                })
            },
            {
                bottomList: new TextboxList({
                    valueChangeEventName: BOTTOM_VALUE_CHANGE
                })
            },
            {
                bottomAdd: new Button({
                    clickEventName: BOTTOM_ADD,
                    icon: new AddIcon()
                })
            },
        ];
    }

    propChangeHandlers() {
        return {
            urlToIntercept: forwardProp(this, "value", "url"),
            topFiles: forwardProp(this, "values", "topList"),
            bottomFiles: forwardProp(this, "values", "bottomList")
        };
    }

    view (el, props, children, mChildren) {
        return [
            el(
                "section",
                {
                    class: "gaia-section"
                },
                [
                    mChildren.delete.render(),
                    mChildren.url.render(),
                    el(
                        "div",
                        {
                            class: "mpageui-FormControl-title"
                        },
                        [
                            "Top ",
                            mChildren.topAdd.render(),
                        ]
                    ),
                    mChildren.topList.render(),
                    el(
                        "div",
                        {
                            class: "mpageui-FormControl-title"
                        },
                        [
                            "Bottom ",
                            mChildren.bottomAdd.render()
                        ]
                    ),
                    mChildren.bottomList.render()

                ]
            )
        ];
    }
}

class SingleUrl extends UIComponent {
    initialProps() {
        return {
            urlToIntercept: "",
            topFiles: [],
            bottomFiles: [],
            urlChangeEventName: "SingleUrl::UrlChange",
            urlDeleteEventName: "SingleUrl::UrlDelete",
            topChangeEventName: "SingleUrl::TopChange",
            bottomChangeEventName: "SingleUrl::BottomChange"
        };
    }

    createChildren() {
        return [
            {
                contentPanel : new ContentPanel({
                    content: [ new SingleUrlContent() ]
                })
            }
        ];
    }

    propChangeHandlers() {
        return {
            urlToIntercept: (urlToIntercept) => {
                this.getChild("contentPanel").setProp("headerDisplay", urlToIntercept);
                this.getChild("contentPanel").getProp("content")[0].setProp("urlToIntercept", urlToIntercept);
            },
            topFiles: setContentProp(this, "topFiles"),
            bottomFiles: setContentProp(this, "bottomFiles")
        };
    }

    afterCreate() {
        this.convertEventUsingProp(
            URL_CHANGE,
            "urlChangeEventName",
            (source, value) => {
                return [ this, this.getProp("urlToIntercept"), value.value ];

            }
        );
        this.convertEventUsingProp(
            URL_DELETE,
            "urlDeleteEventName",
            (source) => [ this, this.getProp("urlToIntercept") ]
        );
        this.convertEventUsingProp(
            TOP_VALUE_CHANGE,
            "topChangeEventName",
            (source, topValues) => [ this, topValues, this.getProp("urlToIntercept") ]
        );
        this.convertEventUsingProp(
            TOP_ADD,
            "topChangeEventName",
            (source) => [
                this,
                this.getProp("topFiles").concat(""),
                this.getProp("urlToIntercept")
            ]
        );
        this.convertEventUsingProp(
            BOTTOM_VALUE_CHANGE,
            "bottomChangeEventName",
            (source, bottomValues) => [ this, bottomValues, this.getProp("urlToIntercept") ]
        );
        this.convertEventUsingProp(
            BOTTOM_ADD,
            "bottomChangeEventName",
            (source) => [
                this,
                this.getProp("bottomFiles").concat(""),
                this.getProp("urlToIntercept")
            ]
        );
    }

    view (el, props, children, mChildren) {
        return this.renderChildren();
    }
}

SingleUrl.ORIGINATING_LIST = {
    BOTTOM: "bottom",
    TOP: "top"
};

export default SingleUrl;
