
import * as Fusion from "MPageFusion";
import DeletableTextbox from "./DeletableTextbox";

const UIComponent = Fusion.UIComponent;
const forwardProp = Fusion.helpers.props.forwardProp;

const VALUE_CHANGE_EVENT = "Internal::TextboxList::ValueChange";
const DELETE_EVENT = "Internal::TextboxList::Delete";

const createChildren = (values) =>
    values.map(
        (value, i) => new DeletableTextbox({
            index: i,
            value: value,
            valueChangeEventName: VALUE_CHANGE_EVENT,
            deleteEventName: DELETE_EVENT,
            placeholder: "path to the file to be injected"
        })
    );

const deleteValueAtIndex = (values, index) => {
    const copy = values.slice(0);
    copy.splice(index, 1);
    return copy;
};

const changeValueAtIndex = (newValue, values, index) => {
    const copy = values.slice(0);
    copy[index] = newValue;
    return copy;
};

export default class TextboxList extends UIComponent {
    initialProps() {
        return {
            values: [],
            valueChangeEventName: "TextboxList::ValueChange"
        };
    }

    propChangeHandlers() {
        return {
            values: (values) => this.replaceAllChildren(createChildren(values))
        };
    }

    afterCreate() {
        this.convertEventUsingProp(
            VALUE_CHANGE_EVENT,
            "valueChangeEventName",
            (source, value) => [
                this,
                changeValueAtIndex(value, this.getProp("values"), source.getProp("index"))
            ]
        );
        this.convertEventUsingProp(
            DELETE_EVENT,
            "valueChangeEventName",
            (source) => [
                this,
                deleteValueAtIndex(this.getProp("values"), source.getProp("index"))
            ]
        );
    }

    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}
