import * as Fusion from "MPageFusion";

const UIComponent = Fusion.UIComponent;
const Button = Fusion.atomic.button.Button;
const Textbox = Fusion.composite.form.FormTextBox;
const forwardProp = Fusion.helpers.props.forwardProp;
const ClearIcon = Fusion.atomic.icon.svg.content.Clear;

const VALUE_CHANGE_EVENT = "Internal::DeletableTextbox::ValueChange";
const DELETE_EVENT = "Internal::DeletableTextbox::Delete";
const BLUR_EVENT = "Internal::DeletableTextbox::Blur";

export default class DeletableTextbox extends UIComponent {
    initialProps() {
        return {
            display: "",
            placeholder: "",
            value: "",
            valueChangeEventName: "DeletableTextbox::ValueChange",
            blurEventName: "DeletableTextbox::Blur",
            deleteEventName: "DeletableTextbox::Delete",
            classNames: ""
        };
    }

    createChildren() {
        return [
            {
                textbox: new Textbox({
                    valueChangeEventName: VALUE_CHANGE_EVENT,
                    blurEventName: BLUR_EVENT
                })
            },
            {
                button: new Button({
                    clickEventName: DELETE_EVENT,
                    icon: new ClearIcon(),
                    type: Button.TYPE.LINK
                })
            }
        ];
    }

    propChangeHandlers() {
        return {
            display: forwardProp(this, "display", "textbox"),
            value: forwardProp(this, "value", "textbox"),
            placeholder: (placeholder) =>
                this.getChild("textbox").setProp("options", {
                    placeholder: placeholder
                })
        };
    }

    afterCreate() {
        this.convertEventUsingProp(
            VALUE_CHANGE_EVENT,
            "valueChangeEventName",
            (source, event) => [this, event.value]
        );
        this.convertEventUsingProp(
            DELETE_EVENT,
            "deleteEventName",
            (source) => [this]
        );
        this.convertEventUsingProp(
            BLUR_EVENT,
            "blurEventName",
            (source, value) => [this]
        );
    }

    view(el, props, children, mChildren) {
        return el(
            "div",
            {
                class: `gaia-injector-DeletableTextbox mpageui-u-flexgrid-row ${props.classNames}`
            },
            [
                el(
                    "div",
                    {
                        class: "mpageui-u-flexgrid-col mpageui-u-flexgrid-col--pad-very-tight"
                    },
                    [ mChildren.textbox.render() ]
                ),
                el(
                    "div",
                    {
                        class: "mpageui-u-flexgrid-col-1 mpageui-u-flexgrid-col--pad-very-tight"
                    },
                    [ mChildren.button.render() ]
                )
            ]
        );
    }
}
