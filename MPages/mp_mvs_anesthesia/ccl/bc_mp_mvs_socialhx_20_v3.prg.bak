drop program bc_mp_mvs_socialhx_20:dba go
create program bc_mp_mvs_socialhx_20:dba
/**************************************************************************************************
              Purpose: Displays the Social History 
     Source File Name: bc_mp_mvs_socialhx_10.PRG
              Analyst: MediView Solutions
          Application: PowerChart, SurgiNet
  Execution Locations: 
            Request #: 
      Translated From: 
        Special Notes:
**************************************************************************************************/
/**************************************************************************************************
  Mod  Date            Engineer                Description
   ---  --------------- ----------------------- ------------------------------------------------
    1   08/09/2011      MediView Solutions 	    Initial Release
    2	02/09/2012		Karen Speaks			WO# 
    											Look for grids on all forms not just on ed patient hx
	3	06/15/2012		Karen Speaks			WO# 836306
												Change from Tobacco Grid to tobacco use
	3 	mm/dd/yyyy      FirstName LastName      Comments for first modification

**************************************************************************************************/

prompt 
	"Output to File/Printer/MINE" = "MINE"   ;* Enter or select the printer or file name to send this report to.
	, "USERID" = 0
	, "PERSONID" = 0
	, "ENCNTRID" = 0
	, "OPTIONS" = "" 

with OUTDEV, USERID, PERSONID, ENCNTRID, OPTIONS

record socialhx(
 1  person_id = f8
 1  encntr_id = f8
 1  evnt_cnt = i4
 1  no_hx = vc
 1  events[*]
    2  event_id = f8 ;use row
    2  event_name = vc
    2  event_dt_tm = vc
    2  event_dt = vc
    2  rslt_cnt = i2
    2  result[*]
       3 result_id = f8
       3 result_tag	= vc
       3 result_val	= vc
       3 result_seq	= i2
)

declare ACTV_48_CV   		= f8 with public, constant(uar_get_code_by("MEANING", 48, "ACTIVE"))
 
declare INERROR_8_CV		= f8 with public, constant(uar_get_code_by("MEANING", 8, "INERROR"))
declare INERROR2_8_CV  		= f8 with public, constant(uar_get_code_by("MEANING", 8, "IN ERROR" ))
declare NOTDONE_8_CV  		= f8 with public, constant(uar_get_code_by("MEANING", 8, "NOT DONE" ))

declare ALCHOLGRID_72_CV	= f8 with public, constant(uar_get_code_by("DISPLAYKEY", 72, "ALCOHOLUSEGRID"))
declare TOBACCOUSE_72_CV	= f8 with public, constant(uar_get_code_by("DISPLAYKEY", 72, "TOBACCOUSE"))
declare TOBACOGRID_72_CV 	= f8 with public, constant(uar_get_code_by("DISPLAYKEY", 72, "TOBACCOUSEGRID"))
declare MEDHXVERIF_72_CV  	= f8 with public, constant(uar_get_code_by("DISPLAYKEY", 72, "MEDICALHISTORYVERIFICATION"))

declare ACTIVE_4002172_CV 	= f8 with public, constant(uar_get_code_by("MEANING", 4002172 ,"ACTIVE"))
	
declare evnt_counter 		= i4 with public, noconstant(0) ;a counter for loading the recordset
declare rslt_counter 		= i4 with public, noconstant(0) ;a counter for loading the recordset


SELECT INTO "NL:"
FROM
	ENCOUNTER E
PLAN E
  WHERE E.ENCNTR_ID = $ENCNTRID
DETAIL
socialhx->person_id = $PERSONID
socialhx->encntr_id = $ENCNTRID
 
 WITH NOCOUNTER, MAXREC = 1

SELECT INTO "NL:"
FROM
	clinical_event ce3
	, clinical_event ce4
	, clinical_event ce5
 
PLAN ce3
  WHERE ce3.person_id = $PERSONID
	AND ce3.event_cd in (ALCHOLGRID_72_CV, TOBACOGRID_72_CV)
  	AND ce3.event_end_dt_tm+0 < CNVTDATETIME(curdate,curtime3)
  	AND ce3.valid_until_dt_tm+0 = cnvtdatetime(cnvtdate(12312100),0000)
	AND ce3.encntr_id+0 = $ENCNTRID
  	AND NOT ce3.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV);(28,31,36)
	and ce3.event_title_text != "Date\Time Correction"
JOIN ce4 
	WHERE ce4.parent_event_id = ce3.event_id
  	AND ce4.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
 JOIN ce5 
	WHERE ce5.parent_event_id = ce4.event_id
  	AND ce5.event_end_dt_tm < CNVTDATETIME(curdate,curtime3)
  	AND ce5.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
  	AND NOT ce5.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV);(28,31,36)
 
ORDER ce3.event_end_dt_tm desc
	, ce3.collating_seq
	, ce4.collating_seq
	, ce5.collating_seq
 
HEAD REPORT
STAT = ALTERLIST(SOCIALHX->EVENTS,10)
 
HEAD ce4.event_id
SOCIALHX->evnt_cnt = SOCIALHX->evnt_cnt + 1
EVNT_Counter = SOCIALHX->evnt_cnt

;check for available memory in the department list
IF(MOD(EVNT_Counter,10) = 1 AND EVNT_Counter > 10)
	;if needed allocate memory for 10 more encounters
	STAT = ALTERLIST(SOCIALHX->EVENTS, EVNT_Counter + 9)
ENDIF

SOCIALHX->EVENTS[EVNT_Counter].event_id 		= ce4.event_id
SOCIALHX->EVENTS[EVNT_Counter].event_dt_tm		= FORMAT(ce3.event_end_dt_tm, "MM/DD/YY HH:MM")
SOCIALHX->EVENTS[EVNT_Counter].event_dt		= FORMAT(ce3.event_end_dt_tm, "MM/DD/YY;;q")
SOCIALHX->EVENTS[EVNT_Counter].event_name		= REPLACE(TRIM(ce4.event_tag,3), "Row", " ", 2)
	 
DETAIL
SOCIALHX->EVENTS[EVNT_Counter].rslt_cnt = SOCIALHX->EVENTS[EVNT_Counter].rslt_cnt + 1
RSLT_Counter = SOCIALHX->EVENTS[EVNT_Counter].rslt_cnt

;check for available memory in the department list
IF(MOD(RSLT_Counter,10) = 1)
	;if needed allocate memory for 10 more encounters
	STAT = ALTERLIST (SOCIALHX->EVENTS[EVNT_Counter].RESULT, RSLT_Counter + 9)
ENDIF

SOCIALHX->EVENTS[EVNT_Counter].RESULT[RSLT_Counter].result_id		= ce5.event_id
SOCIALHX->EVENTS[EVNT_Counter].RESULT[RSLT_Counter].result_tag		= TRIM(ce5.event_tag,3)
SOCIALHX->EVENTS[EVNT_Counter].RESULT[RSLT_Counter].result_val		= TRIM(ce5.result_val,3)
SOCIALHX->EVENTS[EVNT_Counter].RESULT[RSLT_Counter].result_seq		= CNVTINT(ce5.collating_seq)
	 
FOOT ce4.event_id
STAT = ALTERLIST(SOCIALHX->EVENTS[EVNT_Counter].RESULT,RSLT_Counter)
 
FOOT REPORT
STAT = ALTERLIST(SOCIALHX->EVENTS,EVNT_Counter)
 
 with COUNTER

if ( socialhx->evnt_cnt = 0 )	;grid no longer in use
	SELECT INTO "NL:"
	FROM
	clinical_event ce
	 
	PLAN ce
	  where ce.person_id = $PERSONID
		and ce.event_cd = TOBACCOUSE_72_CV
	  	and ce.event_end_dt_tm+0 < CNVTDATETIME(curdate,curtime3)
	  	and ce.valid_until_dt_tm+0 = cnvtdatetime(cnvtdate(12312100),0000)
		and ce.encntr_id+0 = $ENCNTRID
	  	and ce.result_status_cd not in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV);(28,31,36)	
		and ce.event_title_text != "Date\Time Correction"
	
	ORDER ce.event_end_dt_tm desc
		 
	HEAD REPORT
	socialhx->evnt_cnt =  1
	stat = alterlist(socialhx->events, 1)
	socialhx->events[1].event_id = ce.event_id
	socialhx->events[1].event_dt_tm = format(ce.event_end_dt_tm, "mm/dd/yy hh:mm")
	socialhx->events[1].event_dt = format(ce.event_end_dt_tm, "mm/dd/yy;;q")
	socialhx->events[1].event_name = ce.event_title_text
	
	stat = alterlist(socialhx->events[1]->result, 1)
	socialhx->events[1]->result[1].result_id = ce.event_id
	socialhx->events[1]->result[1].result_tag = trim(ce.event_tag, 3)
	socialhx->events[1]->result[1].result_val = trim(ce.result_val, 3)

	 with nocounter
endif

SELECT into 'nl:'
FROM shx_activity sa,
	shx_category_ref scr,
	shx_response sr,
	shx_alpha_response sar,
	nomenclature n,
	code_value cv1,
	code_value cv2
PLAN sa
  where sa.person_id =  $PERSONID
	and sa.active_ind = 1
	and sa.beg_effective_dt_tm < sysdate
	and sa.end_effective_dt_tm > sysdate
	and sa.status_cd = ACTIVE_4002172_CV
JOIN scr
	where scr.shx_category_ref_id = sa.shx_category_ref_id
JOIN sr
	where sr.shx_activity_id = sa.shx_activity_id
	and sr.active_ind = 1
	and sr.beg_effective_dt_tm < sysdate
	and sr.end_effective_dt_tm > sysdate
JOIN sar
	where sar.shx_response_id = outerjoin(sr.shx_response_id)
	and sar.active_ind = outerjoin(1)
	and sar.beg_effective_dt_tm < outerjoin(sysdate)
	and sar.end_effective_dt_tm > outerjoin(sysdate)
JOIN n
	where n.nomenclature_id = outerjoin(sar.nomenclature_id)
;	and n.concept_source_cd = outerjoin(0.0)
JOIN cv1
	where cv1.code_value = sr.task_assay_cd
JOIN cv2
	where cv2.code_value = outerjoin(sr.response_unit_cd)

ORDER sa.beg_effective_dt_tm desc
	, sa.shx_activity_id
	, sr.shx_response_id

HEAD sa.shx_activity_id
cnt = socialhx->evnt_cnt + 1
socialhx->evnt_cnt = cnt
stat = alterlist(socialhx->EVENTS, cnt)
socialhx->EVENTS[cnt].event_id = sa.shx_activity_id
socialhx->EVENTS[cnt].event_dt = format(sa.beg_effective_dt_tm, "mm/dd/yy;;q")
socialhx->EVENTS[cnt].event_name = scr.description
stat = alterlist(socialhx->EVENTS[cnt].RESULT,1)
cnt2 = 0

DETAIL
if (sr.response_type = "ALPHA")
	if (cnt2 > 0)
		socialhx->EVENTS[cnt].RESULT[1].result_val = concat(trim(socialhx->EVENTS[cnt].RESULT[1].result_val),
			"; ",concat(trim(cv1.description), " ",trim(n.short_string), 
			" ", trim(cv2.description)))
	else
		socialhx->EVENTS[cnt].RESULT[1].result_val = concat(trim(cv1.description), " ",trim(n.short_string), 
			" ", trim(cv2.description))
	endif
else
	if (cnt2 > 0)
		socialhx->EVENTS[cnt].RESULT[1].result_val = concat(trim(socialhx->EVENTS[cnt].RESULT[1].result_val),
			"; ",concat(trim(cv1.description), " ",build(sr.response_val), 
			" ", trim(cv2.description)))
	else
		socialhx->EVENTS[cnt].RESULT[1].result_val = concat(trim(cv1.description), " ",build(sr.response_val), 
			" ", trim(cv2.description))
	endif
endif
cnt2 = (cnt2 + 1)

 with nocounter

call echojson(socialhx, $OUTDEV)


end
go
