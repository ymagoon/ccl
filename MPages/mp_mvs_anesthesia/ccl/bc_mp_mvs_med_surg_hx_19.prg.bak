drop program bc_mp_mvs_med_surg_hx_19:dba go
create program bc_mp_mvs_med_surg_hx_19:dba
/**************************************************************************************************
              Purpose: Displays the Patient Medical History and Surgical History
     Source File Name: bc_mp_mvs_medhx_10.PRG
              Analyst: MediView Solutions
          Application: PowerChart, SurgiNet
  Execution Locations: PowerChart, SurgiNet
            Request #: 
      Translated From: 
        Special Notes:
**************************************************************************************************/
/**************************************************************************************************
  Mod  Date            Engineer                Description
   ---  --------------- ----------------------- ------------------------------------------------
    1   08/09/2011      MediView Solutions 	    Initial Release
    2   mm/dd/yyyy      Engineer Name           Initial Release
	3 	mm/dd/yyyy      FirstName LastName      Comments for first modification

**************************************************************************************************/

prompt 
	"Output to File/Printer/MINE" = "MINE"   ;* Enter or select the printer or file name to send this report to.
	, "USERID" = 0
	, "PERSONID" = 0
	, "ENCNTRID" = 0
	, "OPTIONS" = "" 

with OUTDEV, USERID, PERSONID, ENCNTRID, OPTIONS


RECORD history (
  1 person_id = f8
  1 encntr_id = f8
  1 med_hx[1]
	  2 NO_HX		= vc
	  2 TYPE [*]
	    3 HX_TYPE 	= vc
	    3 NAME [*]
	     4 HX_NAME 	= vc
	     4 HX_LINE 	= vc
	1 surg_hx[1]
		2 rec_cnt 			= i2
		2 NO_SHX			= vc
		2 SURG_LIST[*]
			3 surg_type		= vc
			3 surg_cnt		= i2
			3 SURGERY[*]
				4 surg_name	= vc
				4 surg_dt		= vc
		2 actual_surg_cnt = i4
		2 actual_surg_list[*]
			3 surg_case_id = f8
			3 surg_dt = vc
			3 surg_name = vc
	1 admissiondb[1]
		2 rec_cnt = i4
		2 hx[*]
			3 description = vc
			3 value = vc
			3 date = vc
			3 is_full_row = i1
)

DECLARE  INERROR_8_CV = F8 WITH  PUBLIC , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  8 ,  "INERROR" ))
DECLARE  INERROR2_8_CV = F8 WITH  PUBLIC , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  8 , "IN ERROR" ))
DECLARE  NOTDONE_8_CV = F8 WITH  PUBLIC , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  8 ,  "NOT DONE" ))
DECLARE  NOK_72_CV = F8 WITH  PUBLIC , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAYKEY" ,  72 ,  "NONEMEDICALHISTORY"))
DECLARE  UNK_72_CV = F8 WITH  PUBLIC , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAYKEY" ,  72 ,  "UNKNOWNMEDICALHISTORY"))
DECLARE  medhxverif_72_CV = F8 WITH PUBLIC , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAYKEY",72,"MEDICALHISTORYVERIFICATION"))
 
DECLARE  FORM_EVENT_ID = F8 WITH PUBLIC , NOCONSTANT ( 0.00 )

DECLARE OCULARMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
										(UAR_GET_CODE_BY("description", 72, "Ocular Medical History Grid"))
DECLARE IMMUNOLOGICMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
										(UAR_GET_CODE_BY("description", 72, "Immunologic Medical History Grid"))
DECLARE NEUROLOGICALMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
										(UAR_GET_CODE_BY("description", 72, "Neurological Medical History Grid"))
DECLARE RESPIRATORYMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
										(UAR_GET_CODE_BY("description", 72, "Respiratory Medical History Grid"))
DECLARE ENDOCRINEMETHMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
								(UAR_GET_CODE_BY("description", 72, "Endocrine Metabolic Medical History Grid"))
DECLARE GASTROINTESTINAL_72_CV = F8 WITH PROTECT, CONSTANT 
								(UAR_GET_CODE_BY("description", 72, "Gastrointestinal Medical History Grid"))
DECLARE HEMATOLOGICMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
									(UAR_GET_CODE_BY("description", 72, "Hematologic Medical History Grid"))
DECLARE GENITOURINARYMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
									(UAR_GET_CODE_BY("description", 72, "Genitourinary Medical History Grid"))
DECLARE MUSCULOSKELETALMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
									(UAR_GET_CODE_BY("description", 72, "Musculoskeletal Medical History Grid"))
DECLARE PSYCHOSOCIALMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
									(UAR_GET_CODE_BY("description", 72, "Psychosocial Medical History Grid"))
DECLARE ONCOLOGICMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
									(UAR_GET_CODE_BY("description", 72, "Oncologic Medical History Grid"))
DECLARE CARDIOVASCULARMEDHX_72_CV = F8 WITH PROTECT, CONSTANT 
									(UAR_GET_CODE_BY("description", 72, "Cardiovascular Medical History Grid"))

;Admission Database Grids
declare ONCOLOGICPASTMEDICALHISTORYGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"ONCOLOGICPASTMEDICALHISTORYGRID"))
declare PSYCHIATRICPASTMEDICALHISTORYGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"PSYCHIATRICPASTMEDICALHISTORYGRID"))
declare MUSCULOSKELETALPASTMEDICALHXGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"MUSCULOSKELETALPASTMEDICALHXGRID"))
declare NEUROLOGICALPASTMEDICALHISTORYGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"NEUROLOGICALPASTMEDICALHISTORYGRID"))
declare IMMUNOLOGICPASTMEDICALHISTORYGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"IMMUNOLOGICPASTMEDICALHISTORYGRID"))
declare ENDOCRINEMETABOLICPASTMEDICALHXGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"ENDOCRINEMETABOLICPASTMEDICALHXGRID"))
declare HEMATOLOGICPASTMEDICALHISTORYGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"HEMATOLOGICPASTMEDICALHISTORYGRID"))
declare GENITOURINARYPASTMEDICALHXGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"GENITOURINARYPASTMEDICALHXGRID"))
declare GASTROINTESTINALPASTMEDICALHXGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"GASTROINTESTINALPASTMEDICALHXGRID"))
declare RESPIRATORYPASTMEDICALHISTORYGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"RESPIRATORYPASTMEDICALHISTORYGRID"))
declare CARDIOVASCULARMEDICALHISTORYGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"CARDIOVASCULARMEDICALHISTORYGRID"))
declare OCULARPASTMEDICALHISTORYGRID_72_CV = f8 
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"OCULARPASTMEDICALHISTORYGRID"))

;Previous Illness
declare PREVIOUSILLNESSHOSPITALIZATIONSGRID_72_CV = f8
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"PREVIOUSILLNESSHOSPITALIZATIONSGRID"))
declare HOSPITALIZATIONEXPERIENCE_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"HOSPITALIZATIONEXPERIENCE"))
declare REQUIREDHOSPITALIZATION_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"REQUIREDHOSPITALIZATION"))
declare ILLNESSDESCRIPTION_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"ILLNESSDESCRIPTION"))
declare ILLNESSDATE_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"ILLNESSDATE"))

declare MISSINGLIMBGRID_72_CV = f8
	with protect, constant(uar_get_code_by("DISPLAYKEY",72,"MISSINGLIMBGRID"))
declare MISSINGLIMBREASON_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"MISSINGLIMBREASON"))
declare MISSINGLIMBLOCATION_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"MISSINGLIMBLOCATION"))
declare BODYLATERALITY_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"BODYLATERALITY"))

declare MEDICALDEVICESIMPLANTS_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"MEDICALDEVICESIMPLANTS"))
declare MEDICALDEVICEREPINFO_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"MEDICALDEVICEREPINFO"))
declare PROSTHESIS_72_CV = f8 with protect, constant(uar_get_code_by("DISPLAYKEY",72,"PROSTHESIS"))

										
DECLARE  ENC_ID =  F8  WITH  PUBLIC , NOCONSTANT ( 0.00 )
DECLARE  PER_ID =  F8  WITH  PUBLIC , NOCONSTANT ( 0.00 )
DECLARE  CNTP  	=  I4  WITH  PUBLIC , NOCONSTANT ( 0 )
DECLARE  CNTA  	=  I4  WITH  PUBLIC , NOCONSTANT ( 0 )
 
DECLARE ACTV_48_CV   	= f8 WITH Constant(uar_get_code_by("MEANING",48,"ACTIVE")),Protect
 
DECLARE edpthist_72_CV 	= f8 WITH public, constant(uar_get_code_by("DISPLAYKEY",72,"EDPATIENTHISTORY"))
DECLARE prevsurg_72_CV 	= f8 WITH public, constant(uar_get_code_by("DISPLAYKEY",72,"NONEPREVSURG"))
 
DECLARE SURG_Counter = I4 WITH PUBLIC, NOCONSTANT(0) ;A counter for loading the recordset
DECLARE LIST_Counter = I4 WITH PUBLIC, NOCONSTANT(0) ;A counter for loading the recordset

declare PREVIOUSSURGERYHISTORYROW_72_CV = f8
	with constant(uar_get_code_by("DISPLAYKEY",72,"PREVIOUSSURGERYHISTORYROW")),protect

SELECT  INTO  "nl:"
   E.PERSON_ID
FROM  ENCOUNTER  E 
PLAN  E 
 	WHERE E.ENCNTR_ID = $ENCNTRID 
 
HEAD  REPORT
	history->person_id = $PERSONID
	history->encntr_id = $ENCNTRID
WITH  NOCOUNTER
 
SELECT INTO  "NL:"
 
FORM_EVENT_ID = CE.EVENT_ID,
CE.*
FROM ( CLINICAL_EVENT  CE )
PLAN  CE
   WHERE ce.person_id = $PERSONID
   AND ce.encntr_id +0 = $ENCNTRID
   AND  TRIM (CE.EVENT_TITLE_TEXT) in ("FN Medical History","FN Medical History P2")
   AND  NOT CE.RESULT_STATUS_CD IN(INERROR_8_CV,INERROR2_8_CV,NOTDONE_8_CV)
   AND CE.VALID_UNTIL_DT_TM > CNVTDATETIME ( CURDATE ,  CURTIME )
 
ORDER BY  CE.PERSON_ID, CE.EVENT_END_DT_TM DESC
 
HEAD CE.PERSON_ID 

FORM_EVENT_ID = CE.EVENT_ID
 
WITH  NOCOUNTER 
 
/**************************************************************************************************
				Select to get details of the medical History
**************************************************************************************************/
 
SELECT  INTO "nl:"
	CE.EVENT_TITLE_TEXT
	, CE2.EVENT_TITLE_TEXT
	, hx_type = replace(CE2.EVENT_TAG,"Grid","",1)  		; Remove the word "Grid"
	, hx_name = CE3.EVENT_TITLE_TEXT
	, HX_LINE = trim(REPLACE(CE3.event_tag,"Self,","",1),2) ; Remove the workd "Self"
	, ce3.parent_event_id
	, ce3.event_id
	, CE3.valid_from_dt_tm "MM/DD/YYYY HH:MM;;D"
	
FROM
	CLINICAL_EVENT   CE
	, CLINICAL_EVENT   CE2
	, CLINICAL_EVENT   CE3
 
PLAN CE
   WHERE CE.PERSON_ID = $PERSONID 
    AND ce.encntr_id +0 = $ENCNTRID
   AND CE.event_ID =  FORM_EVENT_ID 
   AND CE.EVENT_TITLE_TEXT in ("FN Medical History","FN Medical History P2")
   AND CE.valid_until_dt_tm > CNVTDATETIME ( CURDATE ,  CURTIME ) 
   AND  NOT CE.RESULT_STATUS_CD IN(INERROR_8_CV,INERROR2_8_CV,NOTDONE_8_CV)
 
JOIN CE2
   WHERE CE2.PARENT_EVENT_ID = ce.event_id
   AND CE2.EVENT_TITLE_TEXT = "Discrete Grid"
   AND CE2.EVENT_CD  IN ( OCULARMEDHX_72_CV, IMMUNOLOGICMEDHX_72_CV, NEUROLOGICALMEDHX_72_CV
					, RESPIRATORYMEDHX_72_CV, ENDOCRINEMETHMEDHX_72_CV, GASTROINTESTINAL_72_CV
					, HEMATOLOGICMEDHX_72_CV, GENITOURINARYMEDHX_72_CV, MUSCULOSKELETALMEDHX_72_CV
					, PSYCHOSOCIALMEDHX_72_CV, ONCOLOGICMEDHX_72_CV, CARDIOVASCULARMEDHX_72_CV ) 		
					
   AND CE2.valid_until_dt_tm > CNVTDATETIME ( CURDATE ,  CURTIME )
   AND  NOT CE2.RESULT_STATUS_CD IN(INERROR_8_CV,INERROR2_8_CV,NOTDONE_8_CV)
 
JOIN CE3
   WHERE CE3.PARENT_EVENT_ID = ce2.event_id
   AND CE3.EVENT_TAG = "Self*"
   AND CE3.valid_until_dt_tm > CNVTDATETIME ( CURDATE ,  CURTIME ) ;CNVTDATETIME(CNVTDATE(12312100),0000)
   AND  NOT CE3.RESULT_STATUS_CD IN(INERROR_8_CV,INERROR2_8_CV,NOTDONE_8_CV);IN ( 28 , 31 ,36 )
 
 
ORDER BY	; collating seq sets the order to be the same as it is displayed on the form
	CE2.COLLATING_SEQ,
	CE3.COLLATING_SEQ
	 
HEAD REPORT
 
	CNTP = 0
	CNTPX = 0
	CNTPA = 0
	CNTA = 0
	STAT_CNT = 0
 
	;initialize history->med_hx record structure
	STAT = ALTERLIST(history->med_hx->TYPE,10)
 
HEAD  ce2.collating_seq
 
	CNTP = CNTP + 1		; increment counter
 
	; set STAT to CNTP divided by 10 if stat = 1 then add additional blank rows
	STAT = MOD(CNTP, 10)
 
	IF(STAT = 1 AND CNTP != 1)
	   STAT = ALTERLIST(history->med_hx->TYPE,CNTP + 10)
	ENDIF
 
	;	store data for the TYPE segment of the record structure
	history->med_hx->TYPE[CNTP]->HX_TYPE = HX_TYPE
 
	CNTA = 0
	STAT = ALTERLIST(history->med_hx->TYPE[CNTP]-> NAME , 10)
 
DETAIL
 
	CNTA = CNTA + 1
	 
	; add BLANK ROWS the NAME segment if needed
	STAT = MOD(CNTA,10)
	IF(STAT = 1 AND CNTA !=1)
		STAT = ALTERLIST(history->med_hx->TYPE[CNTP]->NAME,CNTA + 10)
	ENDIF
	 
	; store the data in the NAME segment of the record structure
	history->med_hx->TYPE[CNTP]->NAME[CNTA]->HX_NAME = HX_NAME
	
	IF ( HX_LINE != "Self"  )
		history->med_hx->TYPE[CNTP]->NAME[CNTA]->HX_LINE = trim(REPLACE(CE3.event_tag,"Self,","",1),2)
	ENDIF 
	
	 
FOOT ce2.collating_seq
	 
	; remove unused history->med_hx->type->name segment ROWS
	STAT = ALTERLIST(history->med_hx->TYPE[CNTP]->NAME,CNTA)
 
FOOT REPORT
	CNTAX = 1
	CNTPX = 1
	 
	; remove unused history->med_hx->TYPE segment ROWS
	STAT = ALTERLIST(history->med_hx->TYPE,CNTP)

WITH NOCOUNTER, SEPARATOR=" ", FORMAT
 
/**************************************************************************************************
			Select to get "No Known Medical History" and "Unknown Medical History"
**************************************************************************************************/ 
 
SELECT DISTINCT  INTO "nl:"
      CE.PERSON_ID
    , CE.EVENT_TITLE_TEXT
	, CE2_EVENT_DISP = UAR_GET_CODE_DISPLAY(CE2.EVENT_CD)
	, CE2.EVENT_CD
	, CE2.PERFORMED_DT_TM
 
FROM
      CLINICAL_EVENT   CE
	, CLINICAL_EVENT   CE2
 
plan  CE
   WHERE CE.PERSON_ID = $PERSONID
    AND ce.encntr_id +0 = $ENCNTRID
   AND CE.EVENT_TITLE_TEXT = "FN Medical History*"
   AND CE.VALID_UNTIL_DT_TM = CNVTDATETIME(CNVTDATE(12312100),0000)
   AND  NOT CE.RESULT_STATUS_CD IN(INERROR_8_CV,INERROR2_8_CV,NOTDONE_8_CV)
 
JOIN CE2
   WHERE CE2.PARENT_EVENT_ID = CE.EVENT_ID
   AND CE2.EVENT_CD = medhxverif_72_CV 			;Medical History Verification
   AND CE2.VALID_UNTIL_DT_TM = CNVTDATETIME(CNVTDATE(12312100),0000)
   AND  NOT CE2.RESULT_STATUS_CD IN(INERROR_8_CV,INERROR2_8_CV,NOTDONE_8_CV)
 
ORDER BY
	CE2.PERFORMED_DT_TM   DESC
 
HEAD REPORT
	cnt = 0
 
DETAIL
	;get latest dta
	IF(cnt = 0)
	   history->med_hx->NO_HX = TRIM(ce2.result_val,3)
	   cnt = 1
	ENDIF
 
WITH NOCOUNTER

SELECT DISTINCT INTO "NL:"
	ce.event_id,
	ce.parent_event_id,
	ce.event_cd,
	ce.event_title_text,
	ce.event_tag,
	ce.result_val,
	ce.event_end_dt_tm "@SHORTDATETIME",
	ce_col = ce.collating_seq,
	ce2.event_id,
	ce2.parent_event_id,
	ce2.event_cd,
	ce2.event_title_text,
	ce2.event_tag,
	ce2.result_val,
	ce2_col = ce2.collating_seq,
	ce3.event_id,
	ce3.parent_event_id,
	ce3.event_cd,
	ce3.event_title_text,
	ce3.event_tag,
	ce3.result_val,
	ce3_col = ce3.collating_seq,
	ce4.event_id,
	ce4.parent_event_id,
	ce4.event_cd,
	ce4.event_title_text,
	ce4.event_tag,
	ce4.result_val,
	ce4_col = ce4.collating_seq,
	ce5.event_id,
	ce5.parent_event_id,
	ce5.event_cd,
	ce5.event_title_text,
	ce5.event_tag,
	ce5.result_val,
	ce5_col = ce5.collating_seq,
	ce5.event_end_dt_tm "@SHORTDATETIME"
 
FROM
	clinical_event ce,
	clinical_event ce2,
	clinical_event ce3,
	clinical_event ce4,
	clinical_event ce5
 
PLAN ce WHERE ce.person_id = $PERSONID
  AND ce.encntr_id +0 = $ENCNTRID
  AND ce.event_cd =   edpthist_72_CV ;112139042.00
  AND ce.event_end_dt_tm < CNVTDATETIME(curdate,curtime3)
  AND ce.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
  AND NOT ce.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV);(28,31,36)
 
JOIN ce2 WHERE ce2.parent_event_id = ce.event_id
  AND ce2.event_title_text = "FN Surgical History P2" ;Section of ED PT HIST PF
  AND ce2.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
 
JOIN ce3 WHERE ce3.parent_event_id = ce2.event_id
  AND ce3.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
 
JOIN ce4 WHERE ce4.parent_event_id = ce3.event_id
  AND ce4.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
 
JOIN ce5 WHERE ce5.parent_event_id = ce4.event_id
  AND ce5.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
  AND NOT ce.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV);(28,31,36)
 
ORDER BY ce.event_end_dt_tm desc,
	ce.collating_seq,
	ce2.collating_seq,
	ce3.collating_seq,
	ce4.collating_seq,
	ce5.parent_event_id,
	ce5.collating_seq
 
HEAD REPORT
 
	STAT = ALTERLIST(history->surg_hx.SURG_LIST,10)
 
HEAD ce3.event_tag
 
	history->surg_hx.rec_cnt = history->surg_hx.rec_cnt + 1
	LIST_Counter = history->surg_hx.rec_cnt
 
 ;check for available memory in the department list
 IF(MOD(LIST_Counter,10) = 1 AND LIST_Counter > 10)
	;if needed allocate memory for 10 more encounters
    STAT = ALTERLIST(history->surg_hx.SURG_LIST, LIST_Counter + 9)
 ENDIF
 
 IF(ce3.event_tag = "Previous Surgery History*")
    history->surg_hx.SURG_LIST[LIST_Counter].surg_type = CONCAT("Other ",REPLACE(TRIM(ce3.event_tag),"Grid"," ",2))
 ELSE
   history->surg_hx.SURG_LIST[LIST_Counter].surg_type = REPLACE(TRIM(ce3.event_tag),"Grid"," ",2)
 ENDIF
 
 ;Previous Surgery History Grid -ce3
 ;Previous Surgery History Row -ce4
 
HEAD ce5.parent_event_id
 
 history->surg_hx.SURG_LIST[LIST_Counter].surg_cnt = history->surg_hx.SURG_LIST[LIST_Counter].surg_cnt + 1
 SURG_Counter = history->surg_hx.SURG_LIST[LIST_Counter].surg_cnt
 
  ;check for available memory in the department list
 IF(MOD(SURG_Counter,10) = 1)
	;if needed allocate memory for 10 more encounters
    STAT = ALTERLIST(history->surg_hx.SURG_LIST[LIST_Counter].SURGERY, SURG_Counter + 9)
 ENDIF
 
DETAIL
 ;pull in surgery details
 IF(history->surg_hx.SURG_LIST[LIST_Counter].surg_type = "Other Previous Surgery History")
   IF(ce5.event_tag = "Surgery Description")
      history->surg_hx.SURG_LIST[LIST_Counter].SURGERY[SURG_Counter].surg_name 	= TRIM(ce5.result_val,3)
   ELSEIF(ce5.event_tag = "Surgery Date")
      history->surg_hx.SURG_LIST[LIST_Counter].SURGERY[SURG_Counter].surg_dt		= TRIM(ce5.result_val,3)
   ENDIF
 ELSE
    history->surg_hx.SURG_LIST[LIST_Counter].SURGERY[SURG_Counter].surg_name 	= TRIM(ce4.event_tag,3)
    history->surg_hx.SURG_LIST[LIST_Counter].SURGERY[SURG_Counter].surg_dt	= TRIM(ce5.result_val,3)
 ENDIF
 
FOOT ce3.event_tag
 
	STAT = ALTERLIST(history->surg_hx.SURG_LIST[LIST_Counter].SURGERY,SURG_Counter)
 
FOOT REPORT
 
	STAT = ALTERLIST(history->surg_hx.SURG_LIST,LIST_Counter)
 
WITH NOCOUNTER
 
/*===============================================================================================================
                                 GET SURGERY NONE DETAIL
===============================================================================================================*/
SELECT DISTINCT INTO "NL:"
      CE.PERSON_ID
    , CE.EVENT_TITLE_TEXT
	, CE2_EVENT_DISP = UAR_GET_CODE_DISPLAY(CE2.EVENT_CD)
	, CE2.EVENT_CD
	, CE2.PERFORMED_DT_TM
 
FROM
      CLINICAL_EVENT   CE
	, CLINICAL_EVENT   CE2
 
PLAN  CE
   WHERE CE.PERSON_ID = $PERSONID
   AND ce.encntr_id +0 = $ENCNTRID
   AND CE.EVENT_TITLE_TEXT = "FN Surgical History*"
   AND CE.VALID_UNTIL_DT_TM = CNVTDATETIME(CNVTDATE(12312100),0000)
   AND NOT CE.RESULT_STATUS_CD IN(INERROR_8_CV,INERROR2_8_CV,NOTDONE_8_CV);IN ( 28 , 31 ,36 )
 
JOIN CE2
   WHERE CE2.PARENT_EVENT_ID = CE.EVENT_ID
   AND CE2.EVENT_CD = prevsurg_72_CV
   AND CE2.VALID_UNTIL_DT_TM = CNVTDATETIME(CNVTDATE(12312100),0000)
   AND NOT CE2.RESULT_STATUS_CD IN(INERROR_8_CV,INERROR2_8_CV,NOTDONE_8_CV);IN ( 28 , 31 ,36 )
 
ORDER BY
	CE2.PERFORMED_DT_TM   DESC
 
HEAD REPORT
cnt = 0
 
DETAIL
;pull latest dta
IF(cnt = 0)
   IF(ce2.event_tag = "No")
      history->surg_hx.NO_SHX = "No History Results Found - No Previous Surgeries"
      cnt = 1
   ELSE
      history->surg_hx.NO_SHX = TRIM(ce2.result_val,3)  		 ; CONCAT("Limited to No History Results Found - ",   )
      cnt = 1
   ENDIF
ENDIF
 
WITH NOCOUNTER

select into 'nl:'
from surgical_case sc,
	surg_case_procedure scp
plan sc
	where sc.person_id = $PERSONID
	and sc.active_ind = 1
	and sc.cancel_dt_tm = null
	and sc.surg_start_dt_tm != null
	and sc.surg_stop_dt_tm != null
	and sc.surg_stop_dt_tm < sysdate
join scp
	where scp.surg_case_id = sc.surg_case_id
	and scp.active_ind = 1
	and scp.primary_proc_ind = 1
order by sc.surg_start_dt_tm desc
detail
	cnt = history->surg_hx.actual_surg_cnt + 1
	history->surg_hx.actual_surg_cnt = cnt
	stat = alterlist(history->surg_hx.actual_surg_list, cnt)
	history->surg_hx.actual_surg_list[cnt].surg_case_id = sc.surg_case_id
	history->surg_hx.actual_surg_list[cnt].surg_dt = format(sc.surg_start_dt_tm, "mm/dd/yyyy;;q")
	if (trim(scp.proc_text) > "")
		history->surg_hx.actual_surg_list[cnt].surg_name = trim(scp.proc_text)
	else
		history->surg_hx.actual_surg_list[cnt].surg_name = trim(uar_get_code_display(scp.sched_surg_proc_cd))
	endif
with nocounter


;PREVIOUSSURGERYHISTORYROW_72_CV
select into 'nl:'
from clinical_event ce,
	clinical_event ce_cell
PLAN ce 
  WHERE ce.person_id = $PERSONID
  AND ce.encntr_id +0 = $ENCNTRID
  AND ce.event_cd =   PREVIOUSSURGERYHISTORYROW_72_CV
  AND ce.event_end_dt_tm < CNVTDATETIME(curdate,curtime3)
  AND ce.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
  AND NOT ce.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
join ce_cell
	where ce_cell.parent_event_id = ce.event_id
	AND ce_cell.event_end_dt_tm < CNVTDATETIME(curdate,curtime3)
  AND ce_cell.valid_until_dt_tm = cnvtdatetime(cnvtdate(12312100),0000)
  AND NOT ce_cell.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
head report
	cnt = history->surg_hx.rec_cnt + 1
	history->surg_hx.rec_cnt = cnt
	stat = alterlist(history->surg_hx.SURG_LIST, cnt)
	history->surg_hx.SURG_LIST[cnt].surg_type = "Surgeries Recorded at Admission"
head ce.event_id
	cnt2 = history->surg_hx.SURG_LIST[cnt].surg_cnt + 1
	history->surg_hx.SURG_LIST[cnt].surg_cnt = cnt2
	stat = alterlist(history->surg_hx.SURG_LIST[cnt].SURGERY, cnt2)
detail
call echo(ce_cell.event_tag)
	if (ce_cell.event_tag = "Surgery Description")
		history->surg_hx.SURG_LIST[cnt].SURGERY[cnt2].surg_name = ce_cell.result_val
	endif
	if (ce_cell.event_tag = "Surgery Date")
		history->surg_hx.SURG_LIST[cnt].SURGERY[cnt2].surg_dt = ce_cell.result_val
	endif
with nocounter

;RESPIRATORYPASTMEDICALHISTORYGRID_72_CV
;CARDIOVASCULARMEDICALHISTORYGRID_72_CV
;OCULARPASTMEDICALHISTORYGRID_72_CV

;Admission Database Information
select into 'nl:'
from clinical_event ce,
	clinical_event ce_cell
PLAN ce 
  WHERE ce.person_id = $PERSONID
  AND ce.encntr_id +0 = $ENCNTRID
  AND ce.event_cd in (ONCOLOGICPASTMEDICALHISTORYGRID_72_CV,
						PSYCHIATRICPASTMEDICALHISTORYGRID_72_CV,
						MUSCULOSKELETALPASTMEDICALHXGRID_72_CV,
						NEUROLOGICALPASTMEDICALHISTORYGRID_72_CV,
						IMMUNOLOGICPASTMEDICALHISTORYGRID_72_CV,
						ENDOCRINEMETABOLICPASTMEDICALHXGRID_72_CV,
						HEMATOLOGICPASTMEDICALHISTORYGRID_72_CV,
						GENITOURINARYPASTMEDICALHXGRID_72_CV,
						GASTROINTESTINALPASTMEDICALHXGRID_72_CV,
						RESPIRATORYPASTMEDICALHISTORYGRID_72_CV,
						CARDIOVASCULARMEDICALHISTORYGRID_72_CV,
						OCULARPASTMEDICALHISTORYGRID_72_CV)
  AND ce.event_end_dt_tm < sysdate
  and ce.valid_from_dt_tm < sysdate
  AND ce.valid_until_dt_tm > sysdate
  AND NOT ce.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
  and ce.view_level = 0
join ce_cell
	where ce_cell.parent_event_id = ce.event_id
	AND ce_cell.event_end_dt_tm < sysdate
  AND ce_cell.valid_until_dt_tm > sysdate
  and ce_cell.valid_from_dt_tm < sysdate
  AND NOT ce_cell.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
  and ce_cell.view_level = 1
  and not exists(select ce_tmp.clinical_event_id
  				from clinical_event ce_tmp
  				where ce_tmp.person_id = $PERSONID
  				and ce_tmp.encntr_id +0 = $ENCNTRID
  				and ce_tmp.event_cd = ce_cell.event_cd
  				and ce_tmp.valid_from_dt_tm < sysdate
  				and ce_tmp.valid_until_dt_tm > sysdate
  				and ce_tmp.event_end_dt_tm < sysdate
  				and not ce_tmp.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
  				and ce_tmp.event_end_dt_tm > ce_cell.event_end_dt_tm)
detail
	cnt = history->admissiondb.rec_cnt + 1
	history->admissiondb.rec_cnt = cnt
	stat = alterlist(history->admissiondb.hx, cnt)
	history->admissiondb.hx[cnt].description = uar_get_code_display(ce_cell.event_cd)
	history->admissiondb.hx[cnt].value = ce_cell.result_val
	history->admissiondb.hx[cnt].date = format(ce_cell.event_end_dt_tm, "mm/dd/yyyy hh:mm;;q")
with nocounter

select into 'nl:'
	sort_id = if (ce_cell.event_cd = ILLNESSDATE_72_CV) '01'
		elseif (ce_cell.event_cd = ILLNESSDESCRIPTION_72_CV) '02'
		elseif (ce_cell.event_cd = REQUIREDHOSPITALIZATION_72_CV) '03'
		elseif (ce_cell.event_cd = HOSPITALIZATIONEXPERIENCE_72_CV) '04'
		else '05'
		endif
from clinical_event ce_grid,
	clinical_event ce_row,
	clinical_event ce_cell
plan ce_grid
	where ce_grid.person_id = $PERSONID
	and ce_grid.encntr_id +0 = $ENCNTRID
	and ce_grid.event_cd = PREVIOUSILLNESSHOSPITALIZATIONSGRID_72_CV
	and ce_grid.event_end_dt_tm < sysdate
	and ce_grid.valid_from_dt_tm < sysdate
	and ce_grid.valid_until_dt_tm > sysdate
	and not ce_grid.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
	and not exists(select ce_tmp.clinical_event_id
  				from clinical_event ce_tmp
  				where ce_tmp.person_id = $PERSONID
  				and ce_tmp.encntr_id +0 = $ENCNTRID
  				and ce_tmp.event_cd = ce_grid.event_cd
  				and ce_tmp.valid_from_dt_tm < sysdate
  				and ce_tmp.valid_until_dt_tm > sysdate
  				and ce_tmp.event_end_dt_tm < sysdate
  				and not ce_tmp.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
  				and ce_tmp.event_end_dt_tm > ce_grid.event_end_dt_tm)
join ce_row
	where ce_row.parent_event_id = ce_grid.event_id
	and ce_row.event_end_dt_tm < sysdate
	and ce_row.valid_from_dt_tm < sysdate
	and ce_row.valid_until_dt_tm > sysdate
	and not ce_row.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
join ce_cell
	where ce_cell.parent_event_id = ce_row.event_id
	and ce_cell.event_end_dt_tm < sysdate
	and ce_cell.valid_from_dt_tm < sysdate
	and ce_cell.valid_until_dt_tm > sysdate
	and not ce_cell.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
order by ce_row.event_end_dt_tm, sort_id
head ce_row.event_id
	cnt = history->admissiondb.rec_cnt + 1
	history->admissiondb.rec_cnt = cnt
	stat = alterlist(history->admissiondb.hx, cnt)
	history->admissiondb.hx[cnt].is_full_row = 1
detail
	txt = trim(ce_cell.result_val)
	case (ce_cell.event_cd)
	of REQUIREDHOSPITALIZATION_72_CV:
		txt = concat("Required Hospitalization: ", trim(ce_cell.result_val))
	of HOSPITALIZATIONEXPERIENCE_72_CV:
		txt = concat("Hospital Experience: ", trim(ce_cell.result_val))
	endcase
	if (trim(history->admissiondb.hx[cnt].description) > "")
		history->admissiondb.hx[cnt].description = concat(trim(history->admissiondb.hx[cnt].description),
			" - ", trim(txt))
	else
		history->admissiondb.hx[cnt].description = trim(txt)
	endif
with nocounter


select into 'nl:'
	sort_id = if (ce_cell.event_cd = BODYLATERALITY_72_CV) '01'
		elseif (ce_cell.event_cd = MISSINGLIMBLOCATION_72_CV) '02'
		elseif (ce_cell.event_cd = MISSINGLIMBREASON_72_CV) '03'
		else '04'
		endif
from clinical_event ce_grid,
	clinical_event ce_row,
	clinical_event ce_cell
plan ce_grid
	where ce_grid.person_id = $PERSONID
	and ce_grid.encntr_id +0 = $ENCNTRID
	and ce_grid.event_cd = MISSINGLIMBGRID_72_CV
	and ce_grid.event_end_dt_tm < sysdate
	and ce_grid.valid_from_dt_tm < sysdate
	and ce_grid.valid_until_dt_tm > sysdate
	and not ce_grid.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
	and not exists(select ce_tmp.clinical_event_id
  				from clinical_event ce_tmp
  				where ce_tmp.person_id = $PERSONID
  				and ce_tmp.encntr_id +0 = $ENCNTRID
  				and ce_tmp.event_cd = ce_grid.event_cd
  				and ce_tmp.valid_from_dt_tm < sysdate
  				and ce_tmp.valid_until_dt_tm > sysdate
  				and ce_tmp.event_end_dt_tm < sysdate
  				and not ce_tmp.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
  				and ce_tmp.event_end_dt_tm > ce_grid.event_end_dt_tm)
join ce_row
	where ce_row.parent_event_id = ce_grid.event_id
	and ce_row.event_end_dt_tm < sysdate
	and ce_row.valid_from_dt_tm < sysdate
	and ce_row.valid_until_dt_tm > sysdate
	and not ce_row.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
join ce_cell
	where ce_cell.parent_event_id = ce_row.event_id
	and ce_cell.event_end_dt_tm < sysdate
	and ce_cell.valid_from_dt_tm < sysdate
	and ce_cell.valid_until_dt_tm > sysdate
	and not ce_cell.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
order by ce_row.event_end_dt_tm, sort_id
head ce_row.event_id
	cnt = history->admissiondb.rec_cnt + 1
	history->admissiondb.rec_cnt = cnt
	stat = alterlist(history->admissiondb.hx, cnt)
	history->admissiondb.hx[cnt].is_full_row = 1
detail
	txt = "                                                                                                 "

	case (ce_cell.event_cd)
	of BODYLATERALITY_72_CV:
		txt = concat("Laterality: ", trim(ce_cell.result_val))
	of MISSINGLIMBLOCATION_72_CV:
		txt = concat("Location: ", trim(ce_cell.result_val))
	of MISSINGLIMBREASON_72_CV:
		txt = concat("Reason: ", trim(ce_cell.result_val))
	endcase
	if (trim(history->admissiondb.hx[cnt].description) > "")
		history->admissiondb.hx[cnt].description = concat(trim(history->admissiondb.hx[cnt].description),
			" - ", trim(txt))
	else
		history->admissiondb.hx[cnt].description = concat("Missing Limb - ",trim(txt))
	endif
with nocounter


select into 'nl:'
from clinical_event ce
PLAN ce 
  WHERE ce.person_id = $PERSONID
  AND ce.encntr_id +0 = $ENCNTRID
  AND ce.event_cd in (MEDICALDEVICESIMPLANTS_72_CV,
						MEDICALDEVICEREPINFO_72_CV,
						PROSTHESIS_72_CV)
  AND ce.event_end_dt_tm < CNVTDATETIME(curdate,curtime3)
  AND ce.valid_until_dt_tm > sysdate
  and ce.valid_from_dt_tm < sysdate
  AND NOT ce.result_status_cd IN (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
	and not exists(select ce_tmp.clinical_event_id
  				from clinical_event ce_tmp
  				where ce_tmp.person_id = $PERSONID
  				and ce_tmp.encntr_id +0 = $ENCNTRID
  				and ce_tmp.event_cd = ce.event_cd
  				and ce_tmp.valid_from_dt_tm < sysdate
  				and ce_tmp.valid_until_dt_tm > sysdate
  				and ce_tmp.event_end_dt_tm < sysdate
  				and not ce_tmp.result_status_cd in (INERROR_8_CV ,INERROR2_8_CV, NOTDONE_8_CV)
  				and ce_tmp.event_end_dt_tm > ce.event_end_dt_tm)
detail
	cnt = history->admissiondb.rec_cnt + 1
	history->admissiondb.rec_cnt = cnt
	stat = alterlist(history->admissiondb.hx, cnt)
	history->admissiondb.hx[cnt].is_full_row = 0
	history->admissiondb.hx[cnt].description = uar_get_code_display(ce.event_cd)
	history->admissiondb.hx[cnt].value = ce.result_val
with nocounter

select into 'nl:'
from encounter e,
	procedure p,
	nomenclature n
plan e
	where e.person_id = $PERSONID
join p
	where p.encntr_id = e.encntr_id
	and p.active_ind = 1
	and p.beg_effective_dt_tm < sysdate
	and p.end_effective_dt_tm > sysdate
join n
	where n.nomenclature_id = outerjoin(p.nomenclature_id)
order by p.proc_dt_tm desc
head p.procedure_id
	cnt = history->surg_hx[1].actual_surg_cnt + 1
	history->surg_hx[1].actual_surg_cnt = cnt
	stat = alterlist(history->surg_hx[1].SURG_LIST, cnt)
	history->surg_hx[1].SURG_LIST[cnt].surg_cnt = 1
	history->surg_hx[1].SURG_LIST[cnt].surg_type = ""
	stat = alterlist(history->surg_hx[1].SURG_LIST[cnt].SURGERY, 1)
	history->surg_hx[1].SURG_LIST[cnt].SURGERY[1].surg_dt = format(p.proc_dt_tm, "mm/dd/yyyy;;q")
	if (n.nomenclature_id > 0.0)
		surghx->SURG_LIST[cnt].SURGERY[1].surg_name = n.source_string
	else
		history->surg_hx[1].SURG_LIST[cnt].SURGERY[1].surg_name = p.procedure_note
	endif
with nocounter

call echorecord(history)
call echojson(history, $OUTDEV)
end
go
