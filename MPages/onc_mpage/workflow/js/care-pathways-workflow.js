var CarePathwaysWorkflow=function(){this.m_nodeId=0;
this.m_pathwayId=0;
this.m_pathwayInstanceId=0;
this.m_loadUnversionedChanges=0;
if(CPEventManager){var that=this;
CPEventManager.addObserver("COMMIT_NODE_ACTION",function(params){if(params.hasOwnProperty("CP_NODE_ID")){var nodeConfig=that.getNodeConfig();
if(nodeConfig&&(params.CP_NODE_ID===nodeConfig.CP_NODE_ID)){var intentionCdMeaning=nodeConfig.INTENTION_CD_MEANING;
var actionDetails=params.ACTION_DETAILS;
var criterion=that.getCriterion();
var actionJSON=[];
var actionTypeMean;
var x;
if(intentionCdMeaning==="ASSESSMENT"){actionTypeMean="COMMITASSESS";
}else{if(intentionCdMeaning==="TREATMENTS"){actionTypeMean="COMMITTREAT";
}}if(actionTypeMean&&actionDetails.length>0){var scriptRequest=new ScriptRequest();
var compiledActions=[];
var curAction,curDetail,y,i,j;
compiledActions.push(params);
actionJSON.push('{"ACTIONREQ" : {"ACTIONS" : [');
for(x=0,y=compiledActions.length;
x<y;
x++){curAction=compiledActions[x];
actionJSON.push('{"PATHWAY_INSTANCE_ID" :'+parseFloat(that.getPathwayInstanceId()).toFixed(2)+",");
actionJSON.push('"CP_NODE_ID" : '+parseFloat(curAction.CP_NODE_ID).toFixed(2)+",");
actionJSON.push('"ENCNTR_ID" : '+parseFloat(criterion.encntr_id).toFixed(2)+",");
actionJSON.push('"CP_COMPONENT_ID" :'+parseFloat(curAction.CP_COMPONENT_ID).toFixed(2)+",");
actionJSON.push('"PRSNL_ID" : '+parseFloat(criterion.provider_id).toFixed(2)+",");
actionJSON.push('"TREATMENT_LINE_CD" :'+(curAction.TREATMENT_LINE_CD||0).toFixed(2)+",");
actionJSON.push('"ACTION_TYPE_MEAN" :"'+actionTypeMean+'",');
actionJSON.push('"ACTION_DT_TM" : 0.00,');
actionJSON.push('"DETAILS" : [');
for(i=0,j=curAction.ACTION_DETAILS.length;
i<j;
i++){curDetail=curAction.ACTION_DETAILS[i];
actionJSON.push("{");
actionJSON.push('"ACTION_DETAIL_ENTITY_NAME" : "'+curDetail.PARENT_ENTITY_NAME+'",');
actionJSON.push('"ACTION_DETAIL_ENTITY_ID" :'+parseFloat(curDetail.PARENT_ENTITY_ID).toFixed(2)+",");
actionJSON.push('"ACTION_DETAIL_TEXT" : "'+(curDetail.ACTION_DETAIL_TEXT?curDetail.ACTION_DETAIL_TEXT:"")+'",');
actionJSON.push('"ACTION_DETAIL_ENTITY_TEXT" : "'+(curDetail.PARENT_ENTITY_TEXT?curDetail.PARENT_ENTITY_TEXT:"")+'",');
actionJSON.push('"CP_ACTION_DETAIL_TYPE_MEAN" : "'+curDetail.ACTION_DETAIL_TYPE_MEAN+'"');
actionJSON.push("}");
if(i<j-1){actionJSON.push(",");
}}actionJSON.push("]}");
if(x<y-1){actionJSON.push(",");
}}actionJSON.push("]}}");
actionJSON=actionJSON.join("");
scriptRequest.setProgramName("cp_add_pathway_action");
scriptRequest.setParameterArray(["^MINE^","@"+actionJSON.length+":"+actionJSON+"@"]);
scriptRequest.setResponseHandler(function(response){if(actionTypeMean!=="COMMITTREAT"&&response.m_status==="S"){response=response.m_responseData;
CPEventManager.notifyObservers("UPDATE_TRAIL");
}else{logger.logError("Failed to commit node action.");
}});
if(!CERN_Platform.inMillenniumContext()){scriptRequest.execute=function(){var request=new XMLHttpRequest();
var parameterArray=this.getParameterArray();
var programName=this.getProgramName();
if(!this.m_validEntry){throw new Error("ScriptRequest.execute: The execute function should not be called directly.  Please utilize the performRequest function for starting data requests.");
}this.validateScriptRequestFields();
request.onreadystatechange=this.generateStateChangeHandler();
request.open("POST",programName,this.m_asyncInd);
request.setRequestHeader("Content-type","application/x-www-form-urlencoded");
request.send("parameters="+parameterArray.join(","));
};
}scriptRequest.performRequest();
}}}});
}};
CarePathwaysWorkflow.prototype=new WorkflowView();
CarePathwaysWorkflow.prototype.constructor=WorkflowView;
CarePathwaysWorkflow.prototype.getNodeId=function(){return this.m_nodeId;
};
CarePathwaysWorkflow.prototype.getPathwayId=function(){return this.m_pathwayId;
};
CarePathwaysWorkflow.prototype.getPathwayInstanceId=function(){return this.m_pathwayInstanceId;
};
CarePathwaysWorkflow.prototype.getLoadUnversionedChanges=function(){return this.m_loadUnversionedChanges;
};
CarePathwaysWorkflow.prototype.setNodeId=function(val){this.m_nodeId=val;
};
CarePathwaysWorkflow.prototype.setPathwayId=function(val){this.m_pathwayId=val;
};
CarePathwaysWorkflow.prototype.setPathwayInstanceId=function(val){this.m_pathwayInstanceId=val;
};
CarePathwaysWorkflow.prototype.setLoadUnversionedChanges=function(val){this.m_loadUnversionedChanges=val;
};
CarePathwaysWorkflow.prototype.createNavigatorSubsectionObjects=function(){var tempSubsection=new DetailedReviewSubsection();
tempSubsection.setWorkflowViewId(this.getCategoryMean());
this.setNavigatorSubsections(null);
this.addNavigatorSubsection(tempSubsection);
};
CarePathwaysWorkflow.prototype.createTreatmentLineModel=function(){var pathwayConfig=this.getSharedResourceData();
var treatmentLines=[];
var line;
var x;
for(var x=0;
x<pathwayConfig.NODE_LIST.length;
x++){line={};
line.CP_NODE_ID=pathwayConfig.NODE_LIST[x].CP_NODE_ID;
line.NODE_NAME=pathwayConfig.NODE_LIST[x].NODE_NAME;
treatmentLines.push(line);
}return treatmentLines;
};
CarePathwaysWorkflow.prototype.createTreatmentLineSelector=function(){var that=this;
var treatmentLines=this.createTreatmentLineModel();
var selector;
var x;
var y;
if(treatmentLines.length>1){var selectorHtml=[];
selectorHtml.push("<select id='cpwSelector"+this.getPathwayId()+"'>");
for(x=0,y=treatmentLines.length;
x<y;
x++){selectorHtml.push("<option value='"+treatmentLines[x].CP_NODE_ID+"' "+(treatmentLines[x].CP_NODE_ID===this.getNodeId()?"selected":"")+">"+treatmentLines[x].NODE_NAME+"</option>");
}selectorHtml.push("</select>");
selector=$(selectorHtml.join(""));
selector.change(function(){var nodeId=parseInt(this.value,10);
if(nodeId!==that.getNodeId()){var sharedResource=MP_Resources.getSharedResource("CP_DYN_VIEW_"+that.getPathwayId());
if(sharedResource){sharedResource.launchDynamicView(that.getPathwayId(),that.getPathwayInstanceId(),nodeId);
}else{throw new Error("createTreatmentLineSelector - Unable to locate shared resource.");
}}});
}return selector;
};
CarePathwaysWorkflow.prototype.getNodeConfig=function(nodeId){var resourceData=this.getSharedResourceData();
nodeId=nodeId||this.getNodeId();
if(resourceData&&nodeId){var x;
for(x=resourceData.NODE_LIST.length;
x--;
){if(resourceData.NODE_LIST[x].CP_NODE_ID===nodeId){return resourceData.NODE_LIST[x];
}}}else{logger.logJSError("Invalid Node ID or no resource data.",null,"care-pathways-workflow.js","getNodeConfig");
}return null;
};
CarePathwaysWorkflow.prototype.getSharedResourceData=function(resourceName){resourceName=resourceName||"CP_SETTINGS_"+this.getPathwayId();
var sharedResource=MP_Resources.getSharedResource(resourceName);
if(sharedResource){return sharedResource.getResourceData();
}return null;
};
CarePathwaysWorkflow.prototype.getViewSettingsObject=function(){var that=this;
var pathwayId=this.getPathwayId();
var nodeConfig=this.getNodeConfig();
var skipCpRetrieval=false;
var x;
if(nodeConfig){skipCpRetrieval=true;
}var criterion=this.getCriterion();
var scriptRequest=new ScriptRequest();
var viewSettings;
scriptRequest.setAsyncIndicator(false);
scriptRequest.setName("View Settings Retrieval");
scriptRequest.setProgramName("CP_GET_MPAGE_SETTINGS");
scriptRequest.setParameterArray(["^MINE^","^"+this.getCategoryMean()+"^",criterion.provider_id+".0",criterion.position_cd+".0",1,0,criterion.encntr_id+".0",pathwayId+".0",0,this.getPathwayInstanceId()+".0",((criterion.debug_ind&8)===8?1:0),skipCpRetrieval]);
scriptRequest.setResponseHandler(function(scriptResponse){var response=scriptResponse.getResponse();
viewSettings=response.MPAGE[0].SETTINGS;
if(!skipCpRetrieval){var keys=Object.keys(response);
var resourceData={};
for(x=keys.length;
x--;
){if(["STATUS_DATA","MPAGE"].indexOf(keys[x])===-1){resourceData[keys[x]]=response[keys[x]];
}}for(x=resourceData.NODE_LIST.length;
x--;
){if(resourceData.NODE_LIST[x].CATEGORY_MEAN===that.getCategoryMean()){that.setNodeId(resourceData.NODE_LIST[x].CP_NODE_ID);
break;
}}MP_Resources.setSharedResourceData("CP_SETTINGS_"+pathwayId,resourceData);
}});
scriptRequest.performRequest();
return viewSettings;
};
CarePathwaysWorkflow.prototype.injectTreatmentSelector=function(){var treatmentLineSelector=this.createTreatmentLineSelector();
if(treatmentLineSelector){var categoryMean=this.getCategoryMean();
var parentContainer=$("#"+categoryMean);
var viewContainerElement=$("#wrkflwViews_"+categoryMean);
var treatmentSelectorHTML=[];
var treatmentSelector;
if(parentContainer.length&&viewContainerElement.length){if($("#"+categoryMean+"_TREATMENTS").length===0){treatmentSelectorHTML.push("<div id='"+categoryMean+"_TREATMENTS' class='cpw-treatment-selector wf'>");
treatmentSelectorHTML.push("<div class='cpw-selector-container'>"+i18n.discernabu.care_pathways_workflow.TREATMENT_LINE+": <span class='cpw-selector'></span></div>");
treatmentSelectorHTML.push("</div>");
treatmentSelector=$(treatmentSelectorHTML.join(""));
treatmentSelector.insertBefore(viewContainerElement);
parentContainer.find(".cpw-selector").append(treatmentLineSelector);
this.resizeView();
}else{parentContainer.find("#cpwSelector"+this.getPathwayId()).val(this.getNodeId());
}}}};
CarePathwaysWorkflow.prototype.postProcessing=function(){var nodeConfig=this.getNodeConfig();
if(nodeConfig){var navigatorSubsections=this.getNavigatorSubsections();
var nodeId=nodeConfig.CP_NODE_ID;
var idx=-1;
var x;
for(x=navigatorSubsections.length;
x--;
){if(navigatorSubsections[x].getWorkflowViewId()===this.getCategoryMean()){idx=x;
break;
}}if(idx>-1){var subsection=navigatorSubsections[idx];
var view=subsection.getAssociatedView();
if(view){var components=view.getComponents();
if(components){for(x=components.length;
x--;
){this.processComponentConfig(components[x]);
}}}}if(nodeConfig.INTENTION_CD_MEANING==="TREATMENTS"){var commitNodeAction={};
var actionDetails=[{}];
actionDetails[0].PARENT_ENTITY_NAME="CP_NODE";
actionDetails[0].PARENT_ENTITY_ID=nodeId;
actionDetails[0].ACTION_DETAIL_TYPE_MEAN="TREATSEL";
commitNodeAction.CP_NODE_ID=nodeId;
commitNodeAction.CP_COMPONENT_ID=0;
commitNodeAction.ACTION_DETAILS=actionDetails;
CPEventManager.notifyObservers("COMMIT_NODE_ACTION",commitNodeAction);
}}else{logger.logJSError("Error retrieving Node Config",null,"care-pathways-workflow.js","postProcessing");
}this.injectTreatmentSelector();
};
CarePathwaysWorkflow.prototype.processComponentConfig=function(component){var nodeConfig=this.getNodeConfig();
var cpSharedResource=MP_Resources.getSharedResource("CP_SETTINGS_"+this.getPathwayId());
var resourceData;
var mapping;
var componentSettings;
var x;
if(cpSharedResource){resourceData=cpSharedResource.getResourceData();
if(resourceData){for(x=resourceData.MAPPINGS.length;
x--;
){if(resourceData.MAPPINGS[x].REPORT_MEAN===component.getReportMean()){mapping=resourceData.MAPPINGS[x];
break;
}}if(mapping){if(mapping.CARE_PATHWAY_ONLY){for(x=nodeConfig.COMPONENT_LIST.length;
x--;
){if(nodeConfig.COMPONENT_LIST[x].COMP_TYPE_CD_MEANING===mapping.COMP_TYPE_MEAN){componentSettings=nodeConfig.COMPONENT_LIST[x];
break;
}}if(componentSettings){var nodeId=this.getNodeId();
var pathwayId=this.getPathwayId();
var intentionCd=nodeConfig.INTENTION_CD||0;
if(typeof component.setComponentConfig!=="undefined"){component.setComponentConfig(componentSettings.COMP_DETAIL_LIST);
}if(typeof component.setConceptCd!=="undefined"){component.setConceptCd(nodeConfig.CONCEPT_CD||0);
}if(typeof component.setConceptMean!=="undefined"){component.setConceptMean(nodeConfig.CONCEPT_CD_MEAN||"");
}if(typeof component.setIntentionCd!=="undefined"){component.setIntentionCd(intentionCd);
}if(typeof component.setIntentionMean!=="undefined"){component.setIntentionMean(nodeConfig.INTENTION_CD_MEANING||"");
}if(typeof component.setNodeId!=="undefined"){component.setNodeId(nodeId);
}if(typeof component.setPathwayId!=="undefined"){component.setPathwayId(pathwayId);
}if(typeof component.setCpComponentId!=="undefined"){component.setCpComponentId(componentSettings.CP_COMPONENT_ID||0);
}if(typeof component.setConceptGroupCd!=="undefined"){component.setConceptGroupCd(componentSettings.CONCEPT_GROUP_CD);
}if(typeof component.setPathwayInstanceId!=="undefined"){component.setPathwayInstanceId(this.getPathwayInstanceId());
}if(typeof component.processComponentConfig!=="undefined"){component.processComponentConfig(componentSettings.COMP_DETAIL_LIST);
}}else{logger.logJSError("Error finding settings for "+component.getReportMean()+".",null,"care-pathways-workflow.js","processComponentConfig");
}}}else{logger.logJSError("Error finding mapping for "+component.getReportMean()+".",null,"care-pathways-workflow.js","processComponentConfig");
}}else{logger.logJSError("Shared Resource has no data.",null,"care-pathways-workflow.js","processComponentConfig");
}}else{logger.logJSError("Error retrieving Shared Resource.",null,"care-pathways-workflow.js","processComponentConfig");
}};
CarePathwaysWorkflow.prototype.resizeView=function(){var selectorContainer=$("#"+this.getCategoryMean()+"_TREATMENTS");
var availableHeight=this.m_$parentWorkflowContainer.height()-selectorContainer.height();
this.m_$navContainer.height(availableHeight);
this.m_$viewContainer.height(availableHeight);
this.applyNavigatorScrolling();
};
