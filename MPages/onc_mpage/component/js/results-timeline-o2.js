function WorkflowResultTimelineStyle(){this.initByNamespace("rt-wf");
}WorkflowResultTimelineStyle.prototype=new ComponentStyle();
WorkflowResultTimelineStyle.prototype.constructor=ComponentStyle;
function WorkflowResultTimelineComponent(criterion){this.setCriterion(criterion);
this.setStyles(new WorkflowResultTimelineStyle());
this.setIncludeLineNumber(false);
this.setResourceRequired(true);
this.setComponentLoadTimerName("USR:MPG.RESULTTIMELINE.O2 - load component");
this.setComponentRenderTimerName("ENG:MPG.RESULTTIMELINE.O2 - render component");
this.m_pregInfoResource=null;
this.m_pregInfo=null;
this.m_numOfWeeksInFirstTrimester=0;
this.m_numOfWeeksInSecondTrimester=0;
this.m_numOfWeeksInThirdTrimester=0;
this.m_weekDateArray=null;
this.m_resultDateArray=null;
this.m_sidePanel=null;
this.m_showPanel=false;
this.m_sidePanelContainer=null;
this.m_outpatientVisitType=0;
this.m_inpatientVisitType=0;
this.m_observationTriageVisitType=0;
this.m_emergencyVisitType=0;
this.m_isValidVisitTypesMapped=true;
this.m_labsMicrobiology=null;
this.m_ultrasounds=null;
this.m_noteTypes=null;
this.m_procedures=false;
this.m_medication=false;
this.EMPTY_STRING="--";
this.INPATINET_VISIT_DAY_TYPE={NONE:0,ARRIVAL_DAY:1,STAY:2,DISCHARGE_DAY:3,ARRIVED_DISCHARED:4};
this.m_currentEga="";
this.m_deliveryDate="";
this.m_deliveryDateDisply="";
CERN_EventListener.addListener(this,"pregnancyInfoAvailable",this.retrieveComponentData,this);
}WorkflowResultTimelineComponent.prototype=new MPageComponent();
WorkflowResultTimelineComponent.prototype.constructor=MPageComponent;
WorkflowResultTimelineComponent.prototype.getPregencyInfo=function(){this.m_pregInfoResource=MP_Resources.getSharedResource("pregnancyInfo");
if(this.m_pregInfoResource&&this.m_pregInfoResource.isResourceAvailable()){this.m_pregInfo=this.m_pregInfoResource.getResourceData();
}return this.m_pregInfo;
};
WorkflowResultTimelineComponent.prototype.setOutpatientVisitType=function(outpatientVisitType){if(!(outpatientVisitType instanceof Array)){throw new Error("Invalid outpatient VisitType");
}if(!outpatientVisitType.length||outpatientVisitType.length>1){this.m_isValidVisitTypesMapped&=false;
}else{this.m_outpatientVisitType=outpatientVisitType[0];
}};
WorkflowResultTimelineComponent.prototype.getOutpatientVisitType=function(){return this.m_outpatientVisitType;
};
WorkflowResultTimelineComponent.prototype.setInpatientVisitType=function(inpatientVisitType){if(!(inpatientVisitType instanceof Array)){throw new Error("Invalid inpatient VisitType");
}if(!inpatientVisitType.length||inpatientVisitType.length>1){this.m_isValidVisitTypesMapped&=false;
}else{this.m_inpatientVisitType=inpatientVisitType[0];
}};
WorkflowResultTimelineComponent.prototype.getInpatientVisitType=function(){return this.m_inpatientVisitType;
};
WorkflowResultTimelineComponent.prototype.setObservationTriageVisitType=function(observationTriageVisitType){if(!(observationTriageVisitType instanceof Array)){throw new Error("Invalid observationTriage VisitType");
}if(!observationTriageVisitType.length||observationTriageVisitType.length>1){this.m_isValidVisitTypesMapped&=false;
}else{this.m_observationTriageVisitType=observationTriageVisitType[0];
}};
WorkflowResultTimelineComponent.prototype.getObservationTriageVisitType=function(){return this.m_observationTriageVisitType;
};
WorkflowResultTimelineComponent.prototype.setEmergencyVisitType=function(emergencyVisitType){if(!(emergencyVisitType instanceof Array)){throw new Error("Invalid emergency VisitType");
}if(!emergencyVisitType.length||emergencyVisitType.length>1){this.m_isValidVisitTypesMapped&=false;
}else{this.m_emergencyVisitType=emergencyVisitType[0];
}};
WorkflowResultTimelineComponent.prototype.getEmergencyVisitType=function(){return this.m_emergencyVisitType;
};
WorkflowResultTimelineComponent.prototype.setLabsMicrobiology=function(labsMicrobiology){if(!(labsMicrobiology instanceof Array)){throw new Error("Invalid labs/microbiology event sets");
}this.m_labsMicrobiology=labsMicrobiology;
};
WorkflowResultTimelineComponent.prototype.getLabsMicrobiology=function(){return this.m_labsMicrobiology||[];
};
WorkflowResultTimelineComponent.prototype.setUltrasounds=function(ultrasounds){if(!(ultrasounds instanceof Array)){throw new Error("Invalid ultrasounds event sets");
}this.m_ultrasounds=ultrasounds;
};
WorkflowResultTimelineComponent.prototype.getUltrasounds=function(){return this.m_ultrasounds||[];
};
WorkflowResultTimelineComponent.prototype.setVisitNoteTypes=function(noteTypes){if(!(noteTypes instanceof Array)){throw new Error("Invalid note type event sets");
}this.m_noteTypes=noteTypes;
};
WorkflowResultTimelineComponent.prototype.getVisitNoteTypes=function(){return this.m_noteTypes||[];
};
WorkflowResultTimelineComponent.prototype.setProceduresBool=function(procedures){this.m_procedures=procedures;
};
WorkflowResultTimelineComponent.prototype.getProceduresBool=function(){return this.m_procedures;
};
WorkflowResultTimelineComponent.prototype.setMedicationBool=function(medication){this.m_medication=medication;
};
WorkflowResultTimelineComponent.prototype.getMedicationBool=function(){return this.m_medication;
};
WorkflowResultTimelineComponent.prototype.loadFilterMappings=function(){this.m_isValidVisitTypesMapped=true;
this.addFilterMappingObject("WF_PREG_RT_OUTPATIENT_VISIT",{setFunction:this.setOutpatientVisitType,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_PREG_RT_INPATIENT_VISIT",{setFunction:this.setInpatientVisitType,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_PREG_RT_OBSERVATION_VISIT",{setFunction:this.setObservationTriageVisitType,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_PREG_RT_ED_VISIT",{setFunction:this.setEmergencyVisitType,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_PREG_RT_LABS_MICROBIOLOGY",{setFunction:this.setLabsMicrobiology,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_PREG_RT_ULTRASOUNDS",{setFunction:this.setUltrasounds,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_PREG_RT_CLINICAL_DOC",{setFunction:this.setVisitNoteTypes,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_PREG_RT_TREATMENTS_PROCE",{setFunction:this.setProceduresBool,type:"Boolean",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_PREG_RT_TREATMENTS_MEDI",{setFunction:this.setMedicationBool,type:"Boolean",field:"FREETEXT_DESC"});
};
WorkflowResultTimelineComponent.prototype.RetrieveRequiredResources=function(){try{if(this.getPregencyInfo()){this.retrieveComponentData();
}else{PREGNANCY_BASE_UTIL_O1.LoadPregnancyData(this.getCriterion());
}}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","RetrieveRequiredResources");
}};
WorkflowResultTimelineComponent.prototype.retrieveComponentData=function(){try{var criterion=this.getCriterion();
var component=this;
if(!(this.validatePregancyInfo()&&this.validateVisitTypeBedrockSettings())){return;
}var loadTimer=new RTMSTimer(this.getComponentLoadTimerName());
var renderTimer=new RTMSTimer(this.getComponentRenderTimerName());
var request=new ComponentScriptRequest();
var viewableEncounters=criterion.getPersonnelInfo().getViewableEncounters();
viewableEncounters=viewableEncounters?"value("+viewableEncounters+")":"0.0";
var wFIndicator=1;
request.setName("Result Time line data Request");
request.setProgramName("MP_GET_RESULTS_TIMELINE");
request.setComponent(this);
request.setParameterArray(["^MINE^",criterion.person_id+".0",viewableEncounters,criterion.provider_id+".0",criterion.position_cd+".0",criterion.ppr_cd+".0",this.getPregencyInfo().getLookBack(),MP_Util.CreateParamArray(this.getLabsMicrobiology(),1),MP_Util.CreateParamArray(this.getUltrasounds(),1),MP_Util.CreateParamArray(this.getVisitTypeArray(),1),MP_Util.CreateParamArray(this.getVisitNoteTypes(),1),this.getProceduresBool()?1:0,this.getMedicationBool()?1:0,wFIndicator]);
request.setLoadTimer(loadTimer);
request.setRenderTimer(renderTimer);
request.setAsyncIndicator(true);
request.performRequest();
request.setResponseHandler(function(scriptReply){if(scriptReply.getStatus()==="F"){MP_Util.Doc.FinalizeComponent(MP_Util.HandleErrorResponse(component.getStyles().getNameSpace()),component,"");
}else{component.renderComponent(scriptReply.getResponse());
}});
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","retrieveComponentData");
}};
WorkflowResultTimelineComponent.prototype.getVisitTypeArray=function(){var inpatinetVisitType=this.getInpatientVisitType();
var outpatinetVisitType=this.getOutpatientVisitType();
var observationVisitType=this.getObservationTriageVisitType();
var emergencyVisitType=this.getEmergencyVisitType();
var visitTypes=[];
if(inpatinetVisitType){visitTypes.push(inpatinetVisitType);
}if(outpatinetVisitType){visitTypes.push(outpatinetVisitType);
}if(observationVisitType){visitTypes.push(observationVisitType);
}if(emergencyVisitType){visitTypes.push(emergencyVisitType);
}return visitTypes;
};
WorkflowResultTimelineComponent.prototype.renderComponent=function(recordData){try{var compHtml="";
var compId=this.getComponentId();
var compNS=this.getStyles().getNameSpace();
this.processResultsForRender(recordData);
var bannerHtml=this.getDateBannerHtml();
var visitTypeLegendHtml=this.getVisitTypeLegendHtml();
var resultTableHtml="<div id='"+compId+"resultsBody' class='rt-wf-component-container'><div id='"+compId+"resultTableBody' class='"+compNS+"-result-table-body'>"+this.getResultLabelHtml()+this.getResultDataHtml()+"</div></div>";
compHtml=bannerHtml+visitTypeLegendHtml+resultTableHtml;
MP_Util.Doc.FinalizeComponent(compHtml,this,"");
this.dayListener();
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","renderComponent");
}};
WorkflowResultTimelineComponent.prototype.updateCurrentDeliveryDayIndicator=function(){var currentDay=new Date();
var compId=this.getComponentId();
var $currDayColumn=$("#"+compId+currentDay.format("_MM_dd_yyyy"));
var scrollContainerWidth=$("#"+compId+"scrollContainer").outerWidth();
var bufferWidth=2;
if(this.m_deliveryDate){var $deliveryBox=$("#"+compId+"deliveryBox");
var deliveryDate=new Date();
deliveryDate.setISO8601(this.m_deliveryDate);
var $delvDayColumn=$("#"+compId+deliveryDate.format("_MM_dd_yyyy"));
if($delvDayColumn.length){$delvDayColumn.addClass("rt-wf-delivery-day-column");
var delvColumnLeftPosition=$delvDayColumn.position().left;
var deliveryBoxWidth=$deliveryBox.outerWidth();
var delvDayMarginLeft=Math.max(delvColumnLeftPosition-deliveryBoxWidth/2,0);
var maxDelvLeftMargin=scrollContainerWidth-(deliveryBoxWidth+bufferWidth);
delvDayMarginLeft=Math.min(maxDelvLeftMargin,delvDayMarginLeft);
$deliveryBox.css("margin-left",delvDayMarginLeft+"px");
}else{$deliveryBox.html("&nbsp;");
$deliveryBox.addClass("rt-wf-empty-box");
}$("#"+compId+"resultLabelSection").css("margin-top","26px");
}var $todayBox=$("#"+compId+"todayBox");
if($currDayColumn.length){var currEga=$currDayColumn.attr("EGA");
$currDayColumn.addClass("rt-wf-today-column");
$("#"+compId+"todayEGA").html(currEga);
var currColumnLeftPosition=$currDayColumn.position().left;
var todayBoxWidth=$todayBox.outerWidth();
var currDayMarginLeft=Math.max(currColumnLeftPosition-todayBoxWidth/2,0);
var maxTodayLeftMargin=scrollContainerWidth-(todayBoxWidth+bufferWidth);
currDayMarginLeft=Math.min(maxTodayLeftMargin,currDayMarginLeft);
$todayBox.css("margin-left",currDayMarginLeft+"px");
var $resultDataSection=$("#"+compId+"resultDataSection");
var halfWidth=$resultDataSection.width()/2;
if(halfWidth<currDayMarginLeft){currDayMarginLeft=currDayMarginLeft-halfWidth;
}else{currDayMarginLeft=0;
}$resultDataSection.scrollLeft(currDayMarginLeft);
}else{$todayBox.html("&nbsp;");
$todayBox.addClass("rt-wf-empty-box");
}};
WorkflowResultTimelineComponent.prototype.resizeComponent=function(){MPageComponent.prototype.resizeComponent.call(this,null);
if(this.m_sidePanel){this.m_sidePanel.resizePanel();
}this.updateCurrentDeliveryDayIndicator();
};
WorkflowResultTimelineComponent.prototype.validatePregancyInfo=function(){var isValidInfo=false;
try{var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
if(this.getCriterion().getPatientInfo().getSex().meaning!=="FEMALE"){var messageHtml="<h3 class='info-hd'><span class='res-normal'>"+resultTimelinei18n.NOT_FEMALE+"</span></h3><span class='res-none'>"+resultTimelinei18n.NOT_FEMALE+"</span>";
MP_Util.Doc.FinalizeComponent(messageHtml,this,"");
return isValidInfo;
}var pregInfoObj=this.getPregencyInfo();
if(pregInfoObj){isValidInfo=this.validatePregnancyId(pregInfoObj)&&this.validateEdd(pregInfoObj);
}return isValidInfo;
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","validatePregancyInfo");
return false;
}};
WorkflowResultTimelineComponent.prototype.validatePregnancyId=function(pregInfoObj){var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
var message="";
var pregId=pregInfoObj.getPregnancyId();
if(pregId===0){message=resultTimelinei18n.NO_ACTIVE_PREG;
}else{if(pregId===-1){message=resultTimelinei18n.PREG_DATA_ERROR;
}}if(message){var messageHtml="<h3 class='info-hd'><span class='res-normal'>"+message+"</span></h3><span class='res-none'>"+message+"</span>";
MP_Util.Doc.FinalizeComponent(messageHtml,this,"");
return false;
}return true;
};
WorkflowResultTimelineComponent.prototype.validateVisitTypeBedrockSettings=function(){var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
if(!this.m_isValidVisitTypesMapped){var messageHtml="<h3 class='info-hd'><span class='res-normal'>"+resultTimelinei18n.INCORRECT_BEDROCK_CONFIG+"</span></h3><span class='res-none'>"+resultTimelinei18n.INCORRECT_BEDROCK_CONFIG+"</span>";
MP_Util.Doc.FinalizeComponent(messageHtml,this,"");
return false;
}return true;
};
WorkflowResultTimelineComponent.prototype.validateEdd=function(pregInfoObj){var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
if(pregInfoObj.getEddId()===0){var messageHtml="<h3 class='info-hd'><span class='res-normal'>"+resultTimelinei18n.NO_EDD+"</span></h3><span class='res-none'>"+resultTimelinei18n.NO_EDD+"</span>";
MP_Util.Doc.FinalizeComponent(messageHtml,this,"");
return false;
}return true;
};
WorkflowResultTimelineComponent.prototype.getDateBannerHtml=function(){try{var pregInfoObj=this.getPregencyInfo();
var pregOnsetDate=pregInfoObj.getOnsetDate();
var compNS=this.getStyles().getNameSpace();
var deliveryDate=pregInfoObj.getDeliveryDate();
var eddOrDeliveryDateHtml="";
var pregOnsetDateDisplay=pregOnsetDate?pregOnsetDate.format("mediumDate"):this.EMPTY_STRING;
if(deliveryDate===0){eddOrDeliveryDateHtml=this.getEddHtml(pregInfoObj.getEstDeliveryDate());
}else{eddOrDeliveryDateHtml=this.getDeliveryDateHtml(deliveryDate);
}var onsetDateHtml="<span class='"+compNS+"-onset-date-label'>"+i18n.discernabu.result_timeline_o2.ONSET_DATE+"</span><span class='"+compNS+"-date-value'>"+pregOnsetDateDisplay+"</span>";
return"<div class='"+compNS+"-date-banner'>"+onsetDateHtml+eddOrDeliveryDateHtml+"</div>";
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","getDateBannerHtml");
return"";
}};
WorkflowResultTimelineComponent.prototype.getEddHtml=function(estDeliveryDateString){var eddString=this.EMPTY_STRING;
if(estDeliveryDateString){var estimatedDeliveryDate=new Date();
estimatedDeliveryDate.setISO8601(estDeliveryDateString);
eddString=estimatedDeliveryDate.format("mediumDate");
}return"<span class='rt-wf-edd-date-label'>"+i18n.discernabu.result_timeline_o2.EDD+"</span><span class='rt-wf-date-value'>"+eddString+"</span>";
};
WorkflowResultTimelineComponent.prototype.getDeliveryDateHtml=function(deliveryDate){var actualDeliveryDate=new Date();
actualDeliveryDate.setISO8601(deliveryDate);
this.m_deliveryDate=deliveryDate;
this.m_deliveryDateDisply=actualDeliveryDate.format("shortDate2");
return"<span class='rt-wf-edd-date-label'>"+i18n.discernabu.result_timeline_o2.DELIVERY_DATE+"</span><span class='rt-wf-date-value'>"+actualDeliveryDate.format("mediumDate")+"</span>";
};
WorkflowResultTimelineComponent.prototype.getVisitTypeLegendHtml=function(){try{var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
var compNS=this.getStyles().getNameSpace();
var visitTypeHtml="";
var visitTypeArray=[{VISIST_TYPE:resultTimelinei18n.OUTPATIENT,IMAGE_CLASS:compNS+"-outpatient-visit-image"},{VISIST_TYPE:resultTimelinei18n.INPATIENT,IMAGE_CLASS:compNS+"-inpatient-visit-image"},{VISIST_TYPE:resultTimelinei18n.OBSERVATION_TRIAGE,IMAGE_CLASS:compNS+"-observation-visit-image"},{VISIST_TYPE:resultTimelinei18n.ED,IMAGE_CLASS:compNS+"-ed-visit-image"}];
var visitTypeCount=visitTypeArray.length;
for(var index=0;
index<visitTypeCount;
index++){var visit=visitTypeArray[index];
visitTypeHtml+="<span class='"+visit.IMAGE_CLASS+"'><span class='"+compNS+"-visit-type'>"+visit.VISIST_TYPE+"</span></span>";
}return"<div class='"+compNS+"-visit-types-legend'><span class='"+compNS+"-visit-types-label'>"+resultTimelinei18n.VISIT_TYPES+"</span>"+visitTypeHtml+"</div>";
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","getVisitTypeLegendHtml");
return"";
}};
WorkflowResultTimelineComponent.prototype.getResultLabelHtml=function(){try{var compId=this.getComponentId();
var compNS=this.getStyles().getNameSpace();
var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
var labelHtml="<div id='"+compId+"resultLabelSection' class='"+compNS+"-result-label-section'><dl class='rt-wf-label-empty'><dd>&nbsp;</dd></dl><dl class='rt-wf-empty-row'><dd>&nbsp;</dd></dl><dl class='"+compNS+"-gestational-age'><dd>"+resultTimelinei18n.GESTATIONAL_AGE+"</dd></dl><dl class='"+compNS+"-gestational-age-week'><dd>"+resultTimelinei18n.WEEK_IN_PARENTHESES+"</dd></dl><dl class='"+compNS+"-label-day-ticks'><dd>&nbsp;</dd></dl><dl class='"+compNS+"-result-label-visits'><dd>"+resultTimelinei18n.VISITS+"</dd></dl><dl class='"+compNS+"-result-label'><dd>"+resultTimelinei18n.LABS_AND_MICRO+"</dd></dl><dl class='"+compNS+"-result-label'><dd>"+resultTimelinei18n.ULTRASOUNDS+"</dd></dl><dl class='"+compNS+"-result-label'><dd>"+resultTimelinei18n.MONITORING_EPISODES+"</dd></dl><dl class='"+compNS+"-result-label'><dd>"+resultTimelinei18n.TREATMENTS+"</dd></dl></div>";
return labelHtml;
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","getResultLabelHtml");
return"";
}};
WorkflowResultTimelineComponent.prototype.getResultDataHtml=function(){try{var compId=this.getComponentId();
var compNS=this.getStyles().getNameSpace();
var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
var firstTrimesterStartWeek=0;
var firstTrimesterEndWeek=this.m_numOfWeeksInFirstTrimester;
var secondTrimesterStartWeek=firstTrimesterEndWeek;
var secondTrimesterEndWeek=this.m_numOfWeeksInFirstTrimester+this.m_numOfWeeksInSecondTrimester;
var thirdTrimesterStartWeek=secondTrimesterEndWeek;
var thirdTrimesterEndtWeek=this.m_numOfWeeksInFirstTrimester+this.m_numOfWeeksInSecondTrimester+this.m_numOfWeeksInThirdTrimester;
var deliveryBoxHtml=this.m_deliveryDateDisply?"<dl><div id='"+compId+"deliveryBox' class='rt-wf-delivery-box'><span class='rt-wf-box-label'>"+resultTimelinei18n.DELIVERY_DATE.replace(":"," - ")+"</span><span id='"+compId+"deliveryDate' class='rt-wf-box-value'>"+this.m_deliveryDateDisply+"</span></div></dl>":"";
var resultDataHtml="<div id='"+compId+"resultDataSection' class='"+compNS+"-result-data-section'><div id='"+compId+"scrollContainer' class='"+compNS+"-scroll-container'>"+deliveryBoxHtml+"<dl><div id='"+compId+"todayBox' class='rt-wf-today-box'><span class='rt-wf-box-label'>"+resultTimelinei18n.TODAY+" </span><span id='"+compId+"todayEGA' class='rt-wf-box-value'>"+this.EMPTY_STRING+"</span></div></dl>"+this.getTrimesterSectionHtml(resultTimelinei18n.TRIMESTER1,firstTrimesterStartWeek,firstTrimesterEndWeek,"rt-wf-trimester-odd")+this.getTrimesterSectionHtml(resultTimelinei18n.TRIMESTER2,secondTrimesterStartWeek,secondTrimesterEndWeek,"rt-wf-trimester-even")+this.getTrimesterSectionHtml(resultTimelinei18n.TRIMESTER3,thirdTrimesterStartWeek,thirdTrimesterEndtWeek,"rt-wf-trimester-odd")+"</div></div>";
return resultDataHtml;
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","getResultDataHtml");
return"";
}};
WorkflowResultTimelineComponent.prototype.getTrimesterSectionHtml=function(trimesterLabel,startWeek,endWeek,bgColorClass){try{var compId=this.getComponentId();
var compNS=this.getStyles().getNameSpace();
var trimesterHtml="<div id='"+compId+trimesterLabel+"' class='"+compNS+"-trimester-section'><dl><dd class='"+compNS+"-trimester-label "+bgColorClass+"'>"+trimesterLabel+"</dd></dl><dl class='"+compNS+"-gestational-age-row'>"+this.getGestationalAgeWeekRowHtml(startWeek,endWeek,true)+"</dl><dl class='"+compNS+"-week-row'>"+this.getGestationalAgeWeekRowHtml(startWeek,endWeek,false)+"</dl><dl class='"+compNS+"-day-ticks'>"+this.getDayTicksRowHtml(startWeek,endWeek)+"</dl><dl>"+this.getResultsValueRowHtml(startWeek,endWeek)+"</dl></div>";
return trimesterHtml;
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","getTrimesterSectionHtml");
return"";
}};
WorkflowResultTimelineComponent.prototype.getGestationalAgeWeekRowHtml=function(startWeek,endWeek,isAgeRow){try{var compNS=this.getStyles().getNameSpace();
var ageHtml="";
var displayText="";
for(var index=startWeek;
index<endWeek;
index++){displayText=isAgeRow?index+"w":new Date(this.m_weekDateArray[index]).format("shortDate3");
ageHtml+="<dd class='"+compNS+"-week-label'>"+displayText+"</dd>";
}return ageHtml;
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","getGestationalAgeWeekRowHtml");
return"";
}};
WorkflowResultTimelineComponent.prototype.getDayTicksRowHtml=function(startWeek,endWeek){try{var compNS=this.getStyles().getNameSpace();
var tickHtml="";
for(var index=startWeek;
index<endWeek;
index++){tickHtml+="<dd class='"+compNS+"-day-tick-column'>";
var dayHtml="";
for(var dayIndex=0;
dayIndex<6;
dayIndex++){dayHtml+="<span class='"+compNS+"-day-tick-cell'>&nbsp;</span>";
}tickHtml+=dayHtml+"</dd>";
}return tickHtml;
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","getGestationalAgeWeekRowHtml");
return"";
}};
WorkflowResultTimelineComponent.prototype.getResultsValueRowHtml=function(startWeek,endWeek){try{var compNS=this.getStyles().getNameSpace();
var compId=this.getComponentId();
var resultHtml="";
if(!this.m_weekDateArray||endWeek>this.m_weekDateArray.length){return resultHtml;
}var dayShadeClass=compNS+"-day-value-shade";
var resultClass=" "+compNS+"-has-result";
for(var index=startWeek;
index<endWeek;
index++){var weekDayDate=new Date(this.m_weekDateArray[index]);
var weekHtml="<dd class='"+compNS+"-week-column'>";
for(var dayIndex=0;
dayIndex<7;
dayIndex++){var weekDayDateDisplay=weekDayDate.format("shortDate2");
var resultObject=this.m_resultDateArray[weekDayDateDisplay];
var dayHtml="";
var dayClass=compNS+"-day-value";
var isFutureDay=false;
var columnClass=" "+compNS+"-day-column";
var labResultClass=dayShadeClass;
var ultraSoundResultClass=dayShadeClass;
var monitoringEpisodeResultClass=dayShadeClass;
var treatmentResultClass=dayShadeClass;
var currentEga=index+"w "+dayIndex+"d";
var currentDay=new Date();
if(currentDay<weekDayDate){columnClass+=" rt-wf-future-day";
isFutureDay=true;
}else{if(resultObject){columnClass+=" rt-wf-result-exist rt-wf-day-column-hover";
labResultClass+=resultObject.HAS_LAB_RESULTS?resultClass:"";
ultraSoundResultClass+=resultObject.HAS_ULTRASOUND_RESULTS?resultClass:"";
monitoringEpisodeResultClass+=resultObject.HAS_MONITORING_EPISODES?resultClass:"";
treatmentResultClass+=resultObject.HAS_TREATMENT_PROCEDURES?resultClass:"";
resultObject.EGA_DISPLAY=currentEga;
}}dayHtml+="<dl date_display ="+weekDayDate.format("MM/dd/yyyy")+" EGA = '"+currentEga+"' class='"+columnClass+"' id ='"+compId+weekDayDate.format("_MM_dd_yyyy")+"' >"+this.getVisitDayCellHtml(resultObject,isFutureDay)+"<dd class='"+dayClass+"'><span class='"+labResultClass+"'>&nbsp;</span></dd><dd class='"+dayClass+"'><span class='"+ultraSoundResultClass+"'>&nbsp;</span></dd><dd class='"+dayClass+"'><span class='"+monitoringEpisodeResultClass+"'>&nbsp;</span></dd><dd class='"+dayClass+"'><span class='"+treatmentResultClass+"'>&nbsp;</span></dd></dl>";
weekHtml+=dayHtml;
weekDayDate.setDate(weekDayDate.getDate()+1);
}resultHtml+=weekHtml+"</dd>";
}return resultHtml;
}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","getResultsValueRowHtml");
return"";
}};
WorkflowResultTimelineComponent.prototype.getVisitDayCellHtml=function(resultObject,isFutureDay){var outpatientVisitClass="rt-wf-outpatient-visit";
var inpatientVisitClass="rt-wf-visit_type";
var observationVisitClass="rt-wf-visit_type";
var emergencyVisitClass="rt-wf-visit_type";
var dayClass="rt-wf-day-value";
if(!isFutureDay&&resultObject){outpatientVisitClass+=resultObject.HAS_OUTPATIENT_VISIT?" rt-wf-outpatient-visit-image":"";
observationVisitClass+=resultObject.HAS_OBSERVATION_VISIT?" rt-wf-observation-visit-image":"";
emergencyVisitClass+=resultObject.HAS_EMERGENCY_VISIT?" rt-wf-ed-visit-image":"";
var visitDayType=resultObject.INPATINET_VISIT_DAY_TYPE;
switch(visitDayType){case this.INPATINET_VISIT_DAY_TYPE.ARRIVAL_DAY:inpatientVisitClass+=" rt-wf-inpatient-arrival-day";
break;
case this.INPATINET_VISIT_DAY_TYPE.STAY:inpatientVisitClass+=" rt-wf-inpatient-stay-day";
break;
case this.INPATINET_VISIT_DAY_TYPE.DISCHARGE_DAY:inpatientVisitClass+=" rt-wf-inpatient-discharge-day";
break;
case this.INPATINET_VISIT_DAY_TYPE.ARRIVED_DISCHARED:inpatientVisitClass+=" rt-wf-inpatient-visit-image";
break;
}}return"<dd class='"+dayClass+"'><span class='"+outpatientVisitClass+"'>&nbsp;</span><span class='"+observationVisitClass+"'>&nbsp;</span><span class='"+emergencyVisitClass+"'>&nbsp;</span><span class='"+inpatientVisitClass+"'>&nbsp;</span></dd>";
};
WorkflowResultTimelineComponent.prototype.dayListener=function(){var component=this;
var compId=this.getComponentId();
component.m_sidePanel=null;
$(".rt-wf-result-exist").click(function(){var criterion=component.getCriterion();
(new CapabilityTimer("CAP:MPG.RESULTTIMELINE.O2 - DAY SELECTION",criterion.category_mean)).capture();
var capTimer=MP_Util.CreateTimer("CAP:MPG.RESULTTIMELINE.O2 - DAY SELECTION");
if(capTimer){capTimer.SubtimerName=criterion.category_mean;
capTimer.Stop();
}var tableId=compId+"resultTableBody";
var compNS=component.getStyles().getNameSpace();
var tableClass=compNS+"-result-table-body";
var dateOfCol=$(this).attr("date_display");
if(dateOfCol!==undefined){var weekDayDate=new Date(dateOfCol);
var weekDayDateDisplay=weekDayDate.format("shortDate2");
var resultObject=component.m_resultDateArray[weekDayDateDisplay];
if(resultObject){$(".rt-wf-result-exist").removeClass("rt-wf-column-selected").addClass("rt-wf-day-column-hover");
$(this).removeClass("rt-wf-day-column-hover").addClass("rt-wf-column-selected");
$("#"+tableId).removeClass(tableClass).addClass("rt-wf-result-table-body-min");
component.createSidePanel(resultObject,weekDayDate);
}}if(component.m_deliveryDateDisply){$("#"+compId+"sidePanelContainer").css("padding-top","60px");
}var leftPos=$(this).position().left;
var $resultDataSection=$("#"+compId+"resultDataSection");
var containerWidth=$resultDataSection.width();
if(leftPos+10>containerWidth){var currScrollPos=$resultDataSection.scrollLeft();
var scrollLeftPos=currScrollPos+(leftPos-containerWidth/2);
$resultDataSection.scrollLeft(scrollLeftPos);
}});
};
WorkflowResultTimelineComponent.prototype.createSidePanel=function(resultObject,weekDayDate){var self=this;
var compId=this.getComponentId();
var sidePanelContId=compId+"sidePanelContainer";
var sidePanelContainer=$("#"+sidePanelContId);
this.m_sidePanelMinHeight="175px";
var tableId=compId+"resultTableBody";
this.m_tableContainer=$("#"+tableId);
var tableHeight=$("#"+tableId).css("height");
if(!this.m_sidePanel){if(!sidePanelContainer.length){sidePanelContainer=$("<div id='"+sidePanelContId+"' class='rt-wf-side-panel'>&nbsp;</div>");
$("#"+compId+"resultsBody").append(sidePanelContainer);
}sidePanelContainer.css("display","inline-block");
this.m_sidePanel=new CompSidePanel(compId,sidePanelContId);
this.m_sidePanel.setExpandOption(this.m_sidePanel.expandOption.EXPAND_DOWN);
self.m_sidePanel.showHideExpandBar=function(){if(this.m_usingUpdatedPanel&&this.m_sidePanelObj[0].offsetHeight){var sidePanelBody=document.getElementById("sidePanelBodyContents"+this.m_uniqueId);
var visibleSidePanelHeight=this.m_sidePanelObj[0].offsetHeight;
var titleHeight=this.m_sidePanelHeader[0].offsetHeight;
var visibleBodyHeight=0;
if(titleHeight<visibleSidePanelHeight){visibleBodyHeight=visibleSidePanelHeight-titleHeight;
}else{this.m_expCollapseBarObj.removeClass("hidden");
}if(visibleBodyHeight){if(sidePanelBody.scrollHeight+10>=visibleBodyHeight){this.m_expCollapseBarObj.removeClass("hidden");
}else{this.m_expCollapseBarObj.addClass("hidden");
}}}};
var bufferHeight=24;
if(this.m_deliveryDateDisply){bufferHeight=46;
}tableHeight=parseInt(tableHeight,10)-bufferHeight;
this.m_sidePanel.setHeight(tableHeight+"px");
this.m_sidePanel.setOffsetHeight(40);
this.m_sidePanel.renderPreBuiltSidePanel();
this.m_sidePanel.showCornerCloseButton();
this.m_sidePanel.setCornerCloseFunction(function(){$(".rt-wf-result-exist").removeClass("rt-wf-column-selected").addClass("rt-wf-day-column-hover");
var compNS=self.getStyles().getNameSpace();
var tableClass=compNS+"-result-table-body";
self.m_tableContainer.removeClass("rt-wf-result-table-body-min").addClass(tableClass);
sidePanelContainer.css("display","none");
self.m_sidePanel=null;
});
}var sidePanelHTML="<div id='sidePanelScrollContainer"+compId+"'>"+this.createVisitTypSection(resultObject)+this.createLabSection(resultObject)+this.createUltraSoundSection(resultObject)+this.createMonitoringEpisodeSection(resultObject)+this.createProceduresAndTreatmentSection(resultObject)+"</div>";
this.m_sidePanel.setActionsAsHTML("<div class='rt-wf-side-panel-action-bar-date'>"+weekDayDate.format("mediumDate")+"</div><div class ='rt-wf-side-panel-ega'>"+resultObject.EGA_DISPLAY+"</div>");
this.m_sidePanel.setContents(sidePanelHTML,"wf_alContent"+compId);
$("#sidePanelHeaderText"+compId).addClass("hidden");
$(".rt-wf-exp-col-btn").click(function(){var $expandCollapseIcon=$(this);
var $detailsSection=$("#"+$expandCollapseIcon.attr("section_id"));
if($expandCollapseIcon.hasClass("rt-wf-hide-expand-btn")){$expandCollapseIcon.removeClass("rt-wf-hide-expand-btn").addClass("rt-wf-show-expand-btn");
$detailsSection.hide();
}else{$expandCollapseIcon.removeClass("rt-wf-show-expand-btn").addClass("rt-wf-hide-expand-btn");
$detailsSection.show();
}});
$(".rt-wf-res-viewer").click(function(){var eventId=$(this).attr("event_id");
ResultViewer.launchAdHocViewer(parseInt(eventId,10));
});
};
WorkflowResultTimelineComponent.prototype.createVisitTypSection=function(resultObject){if(!resultObject.HAS_VISITS){return"";
}var compId=this.getComponentId();
var outpatinetVisitDetailsHtml=resultObject.HAS_OUTPATIENT_VISIT?this.getVisitSectionHtml(resultObject.OUTPATIENT_VISIT_DATA):"";
var inpatinetVisitDetailsHtml=resultObject.HAS_INPATIENT_VISIT?this.getVisitSectionHtml(resultObject.INPATIENT_VISIT_DATA):"";
var observationVisitDetailsHtml=resultObject.HAS_OBSERVATION_VISIT?this.getVisitSectionHtml(resultObject.OBSERVATION_VISIT_DATA):"";
var emergencyVisitDetailsHtml=resultObject.HAS_EMERGENCY_VISIT?this.getVisitSectionHtml(resultObject.EMERGENCY_VISIT_DATA):"";
var visitCount=resultObject.OUTPATIENT_VISIT_DATA.length+resultObject.INPATIENT_VISIT_DATA.length+resultObject.OBSERVATION_VISIT_DATA.length+resultObject.EMERGENCY_VISIT_DATA.length;
var expandCollapseHtml="<div class='rt-wf-exp-col-btn rt-wf-hide-expand-btn' section_id='"+compId+"visitDetailsSection'>&nbsp;</div>";
var sectionTitleHtml="<div class='rt-wf-sp-section-header'>"+i18n.discernabu.result_timeline_o2.VISITS+" ("+visitCount+")</div>";
return"<div class='rt-wf-sp-section-container'>"+expandCollapseHtml+sectionTitleHtml+"<div id='"+compId+"visitDetailsSection'>"+outpatinetVisitDetailsHtml+inpatinetVisitDetailsHtml+observationVisitDetailsHtml+emergencyVisitDetailsHtml+"</div></div>";
};
WorkflowResultTimelineComponent.prototype.getVisitSectionHtml=function(visitTypeList){var visitCount=visitTypeList.length;
var visitSectionHtml="";
var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
for(var visitIndex=0;
visitIndex<visitCount;
visitIndex++){var visitObj=visitTypeList[visitIndex];
var noteCount=visitObj.NOTES.length;
var noteHtml="";
var noteObj=null;
for(var noteIndex=0;
noteIndex<noteCount-1;
noteIndex++){noteObj=visitObj.NOTES[noteIndex];
noteHtml+="<a href=# event_id ='"+noteObj.EVENT_ID+"' class=' rt-wf-res-viewer rt-wf-visit-note-title'>"+(noteObj.TITLE||noteObj.EVENT_CD_DISP)+"</a> , ";
}if(noteCount){noteObj=visitObj.NOTES[noteCount-1];
noteHtml+="<a href=# event_id ='"+noteObj.EVENT_ID+"' class=' rt-wf-res-viewer rt-wf-visit-note-title'>"+(noteObj.TITLE||noteObj.EVENT_CD_DISP)+"</a>";
}visitSectionHtml+="<div class='rt-wf-visit-type-name'> "+visitObj.ENCOUNTER_TYPE+" "+resultTimelinei18n.VISIT+"</div><div class='rt-wf-visit-details'><div><span class='rt-wf-visit-details-label'>"+resultTimelinei18n.LOCATION+"</span><span>"+visitObj.LOCATION+"</span></div><div><span class='rt-wf-visit-details-label'>"+resultTimelinei18n.REASON_FOR_VISIT+"</span><span>"+(visitObj.REASON_FOR_VISIT||this.EMPTY_STRING)+"</span></div><div><span class='rt-wf-visit-details-label'>"+resultTimelinei18n.NOTES+" </span>"+(noteHtml||this.EMPTY_STRING)+"</div></div>";
}return visitSectionHtml;
};
WorkflowResultTimelineComponent.prototype.createLabSection=function(resultObject){if(!resultObject.HAS_LAB_RESULTS){return"";
}var labsHTML="";
var labLength=resultObject.LAB_DATA.length;
var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
var compId=this.getComponentId();
this.sortResults(resultObject.LAB_DATA);
labsHTML+="<div class='rt-wf-sp-section-container'><div section_id ='"+compId+"labsResSection' class='rt-wf-exp-col-btn rt-wf-hide-expand-btn'>&nbsp;</div><div class='rt-wf-sp-section-header'>"+resultTimelinei18n.LABS_AND_MICRO+" ("+labLength+")</div>";
labsHTML+="<div class='rt-wf-labs-results-header' id='"+compId+"labsResSection'><dl><dt class = 'rt-wf-labs-first-column-header'>"+resultTimelinei18n.NAME+"</dt><dt class = 'rt-wf-labs-second-column-header'>"+resultTimelinei18n.RESULT+"</dt><dt class='rt-wf-labs-third-column-header'>"+resultTimelinei18n.TIME+"</dt>";
labsHTML+="<div class='rt-wf-table-header-border'></div>";
for(var i=0;
i<labLength;
i++){var labObj=resultObject.LAB_DATA[i];
var date=new Date(labObj.DATE);
if(labObj.RESULT==="Free Text Note"||labObj.RESULT===""){labsHTML+="<dd class = 'rt-wf-labs-first-column-result'>"+labObj.NAME+"</dd><dd  class='rt-wf-labs-second-column-result rt-wf-comments-pic  rt-wf-res-viewer' event_id = '"+labObj.EVENT_ID+"'></dd><dd class = 'rt-wf-labs-third-column-result'>"+date.format("HH:MM")+"</dd>";
}else{var resIndClass="res-normal";
switch(labObj.NORMALCY_DESC){case"CRITICAL":case"EXTREMEHIGH":case"PANICHIGH":case"EXTREMELOW":case"PANICLOW":case"VABNORMAL":case"POSITIVE":resIndClass="res-severe";
break;
case"HIGH":resIndClass="res-high";
break;
case"LOW":resIndClass="res-low";
break;
case"ABNORMAL":resIndClass="res-abnormal";
break;
default:resIndClass="res-normal";
break;
}resIndClass+=" rt-wf-res-viewer";
labsHTML+="<dd class = 'rt-wf-labs-first-column-result'>"+labObj.NAME+"</dd><dd class='rt-wf-labs-second-column-result "+resIndClass+"' event_id = '"+labObj.EVENT_ID+"'><span class='res-ind'></span><span class='"+resIndClass+"'>"+labObj.RESULT+"</span></dd><dd class = 'rt-wf-labs-third-column-result'>"+date.format("HH:MM")+"</dd>";
}}labsHTML+="</dl></div>";
labsHTML+="</div>";
return labsHTML;
};
WorkflowResultTimelineComponent.prototype.createUltraSoundSection=function(resultObject){var ultraSoundHTML="";
var ultraSoundLength=resultObject.ULTRA_SOUND_DATA.length;
var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
var compId=this.getComponentId();
if(!resultObject.HAS_ULTRASOUND_RESULTS){return ultraSoundHTML;
}ultraSoundHTML+="<div class='rt-wf-sp-section-container'><div section_id='"+compId+"ultraSoundResSection' class='rt-wf-exp-col-btn rt-wf-exp-col-btn rt-wf-hide-expand-btn'></div><div class='rt-wf-ultrasound-header'>"+resultTimelinei18n.ULTRASOUNDS+" ("+ultraSoundLength+")</div>";
ultraSoundHTML+="<div id = '"+compId+"ultraSoundResSection'>";
for(var i=0;
i<ultraSoundLength;
i++){var ultraSoundObj=resultObject.ULTRA_SOUND_DATA[i];
ultraSoundHTML+="<div class='rt-wf-ultrasound-type-header'>"+resultTimelinei18n.TYPE+"<span class ='rt-wf-type-result'>"+ultraSoundObj.NAME+" </span></div>";
ultraSoundHTML+="<div class='rt-wf-ultrasound-note-header'>"+resultTimelinei18n.NOTE+"<a href=# class ='rt-wf-note-result rt-wf-res-viewer' event_id = '"+ultraSoundObj.ID+"'>"+ultraSoundObj.NAME+"</a></div>";
}ultraSoundHTML+="</div></div>";
return ultraSoundHTML;
};
WorkflowResultTimelineComponent.prototype.createMonitoringEpisodeSection=function(resultObject){var monitoringHTML="";
var monitoringLength=resultObject.MONITORING_EPISODES.length;
var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
var compId=this.getComponentId();
if(!resultObject.HAS_MONITORING_EPISODES){return monitoringHTML;
}monitoringHTML+="<div class='rt-wf-sp-section-container'><div section_id='"+compId+"monitoringResSection' class='rt-wf-exp-col-btn rt-wf-hide-expand-btn'></div><div class='rt-wf-monitoring-header'>"+resultTimelinei18n.MONITORING_EPISODES+" ("+monitoringLength+")</div>";
monitoringHTML+="<div id ='"+compId+"monitoringResSection'>";
for(var i=0;
i<monitoringLength;
i++){var monitoringObj=resultObject.MONITORING_EPISODES[i];
var episodeStartTime=new Date(monitoringObj.EPISODESTARTDATE);
var episodeEndTime=new Date(monitoringObj.EPISODEENDDATE);
var episodeStartDate=monitoringObj.EPISODESTARTDATE;
var episodeEndDate=monitoringObj.EPISODEENDDATE;
var episodeStartDateDisplay=episodeStartDate?episodeStartDate.format("mediumDate"):this.EMPTY_STRING;
var episodeEndDateDisplay=episodeEndDate?episodeEndDate.format("mediumDate"):this.EMPTY_STRING;
if(monitoringObj.REASONFORMONITORING===""||monitoringObj.REASONFORMONITORING==="(NoReasonSpecified)"){monitoringObj.REASONFORMONITORING=this.EMPTY_STRING;
}else{monitoringObj.REASONFORMONITORING=monitoringObj.REASONFORMONITORING;
}monitoringHTML+="<div class='rt-wf-monitoring-reasons-header' >"+resultTimelinei18n.REASON_FOR_MONITORING+"<span class ='rt-wf-reasons-result'>"+monitoringObj.REASONFORMONITORING+" </span></div>";
monitoringHTML+="<div class = 'rt-wf-main-start-end-div'><div class='rt-wf-monitoring-Start-header'>"+resultTimelinei18n.START+"<span class ='rt-wf-start-date-res'>"+episodeStartDateDisplay+" </span><span class = 'rt-wf-start-time'>"+episodeStartTime.format("HH:MM")+"</span></div><div class ='rt-wf-monitoring-End-header'>"+resultTimelinei18n.END+"<span class ='rt-wf-start-date-res'>"+episodeEndDateDisplay+"</span><span class = 'rt-wf-end-time'>"+episodeEndTime.format("HH:MM")+"</span></div></div>";
}monitoringHTML+="</div></div>";
return monitoringHTML;
};
WorkflowResultTimelineComponent.prototype.createProceduresAndTreatmentSection=function(resultObject){if(!resultObject.HAS_TREATMENT_PROCEDURES){return"";
}var treatmentsHTML="";
var treatmentLength=resultObject.PROCEDURES_AND_TREATMENT_DATA.length;
var resultTimelinei18n=i18n.discernabu.result_timeline_o2;
var compId=this.getComponentId();
treatmentsHTML+="<div class='rt-wf-sp-section-container'><div section_id ='"+compId+"treatmentsResSection' class='rt-wf-exp-col-btn rt-wf-hide-expand-btn'>&nbsp;</div><div class='rt-wf-sp-section-header'>"+resultTimelinei18n.TREATMENTS+" ("+treatmentLength+")</div>";
treatmentsHTML+="<div id='"+compId+"treatmentsResSection'><dl><dt class='rt-wf-treatments-results-name-header'>"+resultTimelinei18n.NAME+"</dt><dt class='rt-wf-treatments-results-time-header'>"+resultTimelinei18n.TIME+"</dt>";
treatmentsHTML+="<div class='rt-wf-table-header-border'></div>";
for(var i=0;
i<treatmentLength;
i++){var treatmentsObj=resultObject.PROCEDURES_AND_TREATMENT_DATA[i];
var date=new Date(treatmentsObj.DATE);
treatmentsHTML+="<dd class='rt-wf-treatments-results-name-res'>"+treatmentsObj.NAME+"</dd><dd class='rt-wf-treatments-results-time-res'>"+date.format("HH:MM")+"</dd>";
}treatmentsHTML+="</dl></div>";
treatmentsHTML+="</div>";
return treatmentsHTML;
};
WorkflowResultTimelineComponent.prototype.sortResults=function(results){var temp;
var resultsLength=results.length;
for(var firstIndex=0;
firstIndex<resultsLength;
firstIndex++){var date1=new Date(results[firstIndex].DATE);
var dateFormatted1=0+date1.format("HH:MM");
for(var secondIndex=0;
secondIndex<resultsLength;
secondIndex++){var date2=new Date(results[secondIndex].DATE);
var dateFormatted2=0+date2.format("HH:MM");
if(dateFormatted1>dateFormatted2){temp=results[firstIndex];
results[firstIndex]=results[secondIndex];
results[secondIndex]=temp;
}}}};
WorkflowResultTimelineComponent.prototype.processResultsForRender=function(recordData){try{this.setGestationalAgePreference(recordData.GESTATION_AGE_PREF);
var totalWeeks=this.m_numOfWeeksInFirstTrimester+this.m_numOfWeeksInSecondTrimester+this.m_numOfWeeksInThirdTrimester;
var incrementDate=new Date();
incrementDate.setDate(incrementDate.getDate()-this.getPregencyInfo().getRtLookBack());
this.m_weekDateArray=[];
for(var weekIndex=0;
weekIndex<=totalWeeks;
weekIndex++){var incrementDateDisplay=incrementDate.format("MM/dd/yyyy");
this.m_weekDateArray[weekIndex]=incrementDateDisplay;
incrementDate.setDate(incrementDate.getDate()+7);
}this.m_resultDateArray=[];
this.processMonitoringEpisodeDetails(recordData.FETALMONITORINGEPISODES);
this.processVisitTypeDetails(recordData.VISIT_TYPES_LIST);
var resultCount=recordData.RESULT_LIST.length;
for(var resultIndex=0;
resultIndex<resultCount;
resultIndex++){var result=recordData.RESULT_LIST[resultIndex];
if(!result||!result.ROW_NAME||!result.EVENT_DT_TM){continue;
}var eventDate=new Date();
eventDate.setISO8601(result.EVENT_DT_TM);
var eventDateDisplay=eventDate.format("shortDate2");
var resultObject=this.m_resultDateArray[eventDateDisplay];
if(!resultObject){resultObject=this.initializeResultObject();
}if(result.ROW_NAME==="Labs"){resultObject.HAS_LAB_RESULTS=true;
resultObject.LAB_DATA.push({DATE:eventDate,NAME:result.EVENT_NAME,RESULT:result.RESULT_VAL,UNIT:result.RESULT_UNITS,LOW:result.NORMAL_LOW,HIGH:result.NORMAL_HIGH,NORMALCY:result.NORMALCY_FLG,NORMALCY_DESC:result.NORMALCY_DESCRIPTION,EVENT_ID:result.EVENT_ID});
}if(result.ROW_NAME==="Ultrasounds"){resultObject.HAS_ULTRASOUND_RESULTS=true;
resultObject.ULTRA_SOUND_DATA.push({DATE:eventDate,NAME:result.EVENT_NAME,ID:result.EVENT_ID});
}if(result.ROW_NAME==="Treatements"){resultObject.HAS_TREATMENT_PROCEDURES=true;
resultObject.PROCEDURES_AND_TREATMENT_DATA.push({DATE:eventDate,NAME:result.EVENT_NAME});
}this.m_resultDateArray[eventDateDisplay]=resultObject;
}}catch(error){logger.logJSError(error,this,"resulttimeline-o2.js","processResultsForRender");
}};
WorkflowResultTimelineComponent.prototype.setGestationalAgePreference=function(prefValue){if(prefValue==="41"){this.m_numOfWeeksInFirstTrimester=15;
this.m_numOfWeeksInSecondTrimester=13;
this.m_numOfWeeksInThirdTrimester=15;
}else{this.m_numOfWeeksInFirstTrimester=13;
this.m_numOfWeeksInSecondTrimester=14;
this.m_numOfWeeksInThirdTrimester=16;
}};
WorkflowResultTimelineComponent.prototype.processVisitTypeDetails=function(VISIT_TYPES_LIST){var visitCount=VISIT_TYPES_LIST.length;
var oupatientVisitCd=this.getOutpatientVisitType();
var inpatientVisitCd=this.getInpatientVisitType();
var observationVisitCd=this.getObservationTriageVisitType();
var emergencyVisitCd=this.getEmergencyVisitType();
for(var visitIndex=0;
visitIndex<visitCount;
visitIndex++){var visitObj=VISIT_TYPES_LIST[visitIndex];
if(!visitObj||!visitObj.ENCOUNTER_TYPE||!visitObj.VISIT_DT_TM){continue;
}var visitDate=new Date();
visitDate.setISO8601(visitObj.VISIT_DT_TM);
var visitDateDisplay=visitDate.format("shortDate2");
var resultObject=this.m_resultDateArray[visitDateDisplay];
if(!resultObject){resultObject=this.initializeResultObject();
}if(visitObj.ENCOUNTER_TYPE_CD===oupatientVisitCd){resultObject.HAS_OUTPATIENT_VISIT=true;
resultObject.OUTPATIENT_VISIT_DATA.push(visitObj);
}if(visitObj.ENCOUNTER_TYPE_CD===inpatientVisitCd){this.processInpatientVisitDetails(resultObject,visitObj,visitDate);
resultObject.HAS_INPATIENT_VISIT=true;
resultObject.INPATIENT_VISIT_DATA.push(visitObj);
}if(visitObj.ENCOUNTER_TYPE_CD===observationVisitCd){resultObject.HAS_OBSERVATION_VISIT=true;
resultObject.OBSERVATION_VISIT_DATA.push(visitObj);
}if(visitObj.ENCOUNTER_TYPE_CD===emergencyVisitCd){resultObject.HAS_EMERGENCY_VISIT=true;
resultObject.EMERGENCY_VISIT_DATA.push(visitObj);
}resultObject.HAS_VISITS=true;
this.m_resultDateArray[visitDateDisplay]=resultObject;
}};
WorkflowResultTimelineComponent.prototype.processInpatientVisitDetails=function(resultObject,visitObj,visitDate){var dischargeDate=null;
if(visitObj.DISCHARGE_DT_TM){dischargeDate=new Date();
dischargeDate.setISO8601(visitObj.DISCHARGE_DT_TM);
}resultObject.INPATINET_VISIT_DAY_TYPE=this.INPATINET_VISIT_DAY_TYPE.ARRIVAL_DAY;
if(dischargeDate){if(visitDate.toDateString()===dischargeDate.toDateString()){resultObject.INPATINET_VISIT_DAY_TYPE=this.INPATINET_VISIT_DAY_TYPE.ARRIVED_DISCHARED;
}else{var dichargeDateDisplay=dischargeDate.format("shortDate2");
var dichargeDayResultObj=this.m_resultDateArray[dichargeDateDisplay];
if(!dichargeDayResultObj){dichargeDayResultObj=this.initializeResultObject();
}dichargeDayResultObj.INPATINET_VISIT_DAY_TYPE=this.INPATINET_VISIT_DAY_TYPE.DISCHARGE_DAY;
dichargeDayResultObj.HAS_VISITS=true;
dichargeDayResultObj.HAS_INPATIENT_VISIT=true;
dichargeDayResultObj.INPATIENT_VISIT_DATA.push(visitObj);
this.m_resultDateArray[dichargeDateDisplay]=dichargeDayResultObj;
}}else{dischargeDate=new Date();
}var incrementDate=new Date(visitDate);
incrementDate.setDate(incrementDate.getDate()+1);
while(incrementDate<dischargeDate){var incrementDateDisplay=incrementDate.format("shortDate2");
var incDayResultObject=this.m_resultDateArray[incrementDateDisplay];
if(!incDayResultObject){incDayResultObject=this.initializeResultObject();
}incDayResultObject.INPATINET_VISIT_DAY_TYPE=this.INPATINET_VISIT_DAY_TYPE.STAY;
incDayResultObject.HAS_VISITS=true;
incDayResultObject.HAS_INPATIENT_VISIT=true;
incDayResultObject.INPATIENT_VISIT_DATA.push(visitObj);
this.m_resultDateArray[incrementDateDisplay]=incDayResultObject;
incrementDate.setDate(incrementDate.getDate()+1);
}};
WorkflowResultTimelineComponent.prototype.processMonitoringEpisodeDetails=function(FETAL_MONITORING_EPISODESJSON){if(!FETAL_MONITORING_EPISODESJSON){return;
}var fetalMonitoringObj=JSON.parse(FETAL_MONITORING_EPISODESJSON);
var episodeLength=fetalMonitoringObj.RECORD_DATA.EPISODES.length;
if(episodeLength>0){for(var episodeIndex=0;
episodeIndex<episodeLength;
episodeIndex++){var episodeResult=fetalMonitoringObj.RECORD_DATA.EPISODES[episodeIndex];
var eventEpisodeStartDate=new Date();
var eventEpisodeEndDate=new Date();
eventEpisodeStartDate.setISO8601(episodeResult.INITIAL_DT_TM);
eventEpisodeEndDate.setISO8601(episodeResult.COMPLETE_DT_TM);
var reasonForMonitoring=episodeResult.REASON_FOR_MONITORING;
var eventEpisodeDateDisplay=eventEpisodeStartDate.format("shortDate2");
var resultObject=this.m_resultDateArray[eventEpisodeDateDisplay];
if(!resultObject){resultObject=this.initializeResultObject();
}resultObject.HAS_MONITORING_EPISODES=true;
resultObject.MONITORING_EPISODES.push({EPISODESTARTDATE:eventEpisodeStartDate,EPISODEENDDATE:eventEpisodeEndDate,REASONFORMONITORING:reasonForMonitoring});
this.m_resultDateArray[eventEpisodeDateDisplay]=resultObject;
}}};
WorkflowResultTimelineComponent.prototype.initializeResultObject=function(){return{HAS_VISITS:false,HAS_LAB_RESULTS:false,HAS_ULTRASOUND_RESULTS:false,HAS_MONITORING_EPISODES:false,HAS_TREATMENT_PROCEDURES:false,HAS_OUTPATIENT_VISIT:false,HAS_INPATIENT_VISIT:false,INPATINET_VISIT_DAY_TYPE:this.INPATINET_VISIT_DAY_TYPE.NONE,HAS_OBSERVATION_VISIT:false,HAS_EMERGENCY_VISIT:false,OUTPATIENT_VISIT_DATA:[],INPATIENT_VISIT_DATA:[],OBSERVATION_VISIT_DATA:[],EMERGENCY_VISIT_DATA:[],LAB_DATA:[],ULTRA_SOUND_DATA:[],MONITORING_EPISODES:[],PROCEDURES_AND_TREATMENT_DATA:[]};
};
MP_Util.setObjectDefinitionMapping("WF_PREG_RT",WorkflowResultTimelineComponent);
