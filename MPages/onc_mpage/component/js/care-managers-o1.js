CareManagers=(function(){function Component(criterion){this.setCriterion(criterion);
this.setStyles(new Style());
this.setComponentLoadTimerName("USR:MPG.CARE_MANAGERS.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.CARE_MANAGERS.O1 - render component");
Component.i18n=i18n.discernabu.CareManagers;
}function Style(){this.initByNamespace("hcmCareManagers");
}Style.prototype=new ComponentStyle();
Component.prototype=new MPageComponent();
MP_Util.setObjectDefinitionMapping("CARE_MANAGERS_COMP",Component);
var PAGE_SIZE=20;
Component.prototype.loadFilterMappings=function(){var component=this;
this.addFilterMappingObject("CARE_MANAGERS_TEST_URI",{setFunction:function(value){component.testURI(value);
},type:"STRING",field:"FREETEXT_DESC"});
this.addFilterMappingObject("HIDE_POTENTIAL_CASES_COUNT",{setFunction:function(value){component.setIsPotentialCasesDisabled(value);
},type:"BOOLEAN",field:"FREETEXT_DESC"});
};
Component.prototype.testURI=function(uri){if(uri){this._testURI=uri.replace(/&#047;/g,"/");
}return this._testURI||"";
};
Component.prototype.setIsPotentialCasesDisabled=function(hidePotentialCasesFlag){this.isPotentialCasesDisabled=hidePotentialCasesFlag;
};
Component.prototype.getIsPotentialCasesDisabled=function(){return this.isPotentialCasesDisabled||false;
};
Component.prototype.retrieveComponentData=function(){var component=this;
component.performMFA();
if(component.mfaAuthStatus&&component.mfaAuthStatus.value===false){component.setIsPotentialCasesDisabled(true);
}component.retrieveCareManagers(0,function(careManagers){component.renderComponent(careManagers);
});
};
Component.prototype.performMFA=function(){var authStatus=new Mfa_Auth().RetrieveMfaAuthStatus();
var authResourceAvailable=authStatus&&authStatus.isResourceAvailable();
var authStatusData=authResourceAvailable&&authStatus.getResourceData();
if(authStatusData){authStatusData.value=authStatusData.status===0||authStatusData.status===5;
this.mfaAuthStatus=authStatusData;
}else{this.mfaAuthStatus={value:false,message:i18n.discernabu.mfa_auth.MFA_ERROR_MSG,status:4};
}this.auditMFAEvent();
};
Component.prototype.auditMFAEvent=function(){var providerID=this.criterion.provider_id+".0";
var mpEventAudit=new MP_EventAudit();
var dateFormatter=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var dateTime=dateFormatter.format(new Date(),mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR);
mpEventAudit.setAuditMode(0);
mpEventAudit.setAuditParticipantType("PERSON");
mpEventAudit.setAuditParticipantRoleCd("PROVIDER");
mpEventAudit.setAuditParticipantID(providerID);
mpEventAudit.setAuditParticipantIDType("PROVIDER_NUMBER");
mpEventAudit.setAuditDataLifeCycle(null);
mpEventAudit.setAuditEventName("HCM_CARE_MANAGER_LIST_MFA_ATTEMPT");
mpEventAudit.setAuditEventType("SECURITY");
mpEventAudit.setAuditParticipantName("STATUS="+this.mfaAuthStatus.status+";DATE="+dateTime);
mpEventAudit.addAuditEvent();
mpEventAudit.submit();
};
Component.prototype.retrieveCareManagers=function(page,successCallback){var component=this;
var isPotentialCasesDisabled=component.getIsPotentialCasesDisabled();
scriptRequest(component,{name:"HCM_GET_CARE_MANAGERS_V2",params:[component.getCriterion().provider_id+".0",page*PAGE_SIZE,PAGE_SIZE,"^"+component.testURI()+"^",isPotentialCasesDisabled],success:function(response){var careManagers=formatAlignmentCounts(response.CARE_MANAGERS);
careManagers.total_results=response.TOTAL_RESULTS;
successCallback&&successCallback(careManagers);
}});
};
Component.prototype.mfaAlertBanner=function(){var bannerHtml="";
var alertBanner;
if(!this.mfaAuthStatus.value){alertBanner=new MPageUI.AlertBanner();
if(this.mfaAuthStatus.status===2||this.mfaAuthStatus.status===3){alertBanner.setType(MPageUI.ALERT_OPTIONS.TYPE.INFO);
}else{alertBanner.setType(MPageUI.ALERT_OPTIONS.TYPE.ERROR);
}alertBanner.setPrimaryText(this.mfaAuthStatus.message).setSecondaryText(Component.i18n.MFA_SECONDARY_ERROR_TXT);
bannerHtml=alertBanner.render();
}return bannerHtml;
};
Component.prototype.renderComponent=function(careManagers,table,pager){var component=this;
var html="";
var nameSpace=this.getStyles().getNameSpace();
var componentId=this.getComponentId();
var categoryMean=component.getCriterion().category_mean;
var table=table||new CareManagersTable(careManagers,nameSpace,componentId,categoryMean,component.getIsPotentialCasesDisabled());
var pager=pager||new CareManagersPager(careManagers.total_results,PAGE_SIZE,function(pageInfo){component.retrieveCareManagers(pageInfo.currentPage,function(careManagers){pageComponent(careManagers,table,pager);
});
});
html+=component.mfaAlertBanner();
html+=table.render();
if(pager.numberPages()>1){html+=pager.render();
}this.finalizeComponent(html,Component.i18n.TOTAL_RESULTS.replace("{total_results}",careManagers.total_results));
if(pager.numberPages()>1){pager.attachEvents();
}this.setComponentTable(table);
table.finalize();
};
Component.__private={pageComponent:pageComponent,scriptRequest:scriptRequest,handleRawResponse:handleRawResponse};
function formatAlignmentCounts(careManagers){var formatted=careManagers.slice();
$.each(formatted,function(_,careManager){if(careManager.POTENTIAL_CASES===-1){careManager.POTENTIAL_CASES=Component.i18n.NO_DATA;
}});
return formatted;
}function pageComponent(careManagers,table,pager){table.update(careManagers);
pager.update(careManagers.total_results);
table.clickRow(0);
}function scriptRequest(component,settings){var settings=settings||{},loadTimer=settings.loadTimer||new RTMSTimer(component.getComponentLoadTimerName()),renderTimer=settings.renderTimer||new RTMSTimer(component.getComponentRenderTimerName()),scriptRequest=new ComponentScriptRequest();
scriptRequest.setComponent(component);
scriptRequest.setLoadTimer(loadTimer);
scriptRequest.setRenderTimer(renderTimer);
scriptRequest.setProgramName(settings.name);
settings.params&&scriptRequest.setParameterArray(["^MINE^"].concat(settings.params));
if(settings.rawDataIndicator){scriptRequest.setRawDataIndicator(settings.rawDataIndicator);
scriptRequest.setResponseHandler(function(reply){handleRawResponse(reply,settings.success,settings.failure);
});
}else{scriptRequest.setResponseHandler(function(reply){settings.success(reply.getResponse());
});
}scriptRequest.performRequest();
}function handleRawResponse(reply,successHandler,failureHandler){var proxyReply=JSON.parse(reply.getResponse()).PROXYREPLY,status=proxyReply.HTTPREPLY.STATUS;
if(proxyReply.TRANSACTIONSTATUS.SUCCESSIND===1&&status===200){successHandler&&successHandler(JSON.parse(proxyReply.HTTPREPLY.BODY));
}else{if(proxyReply.TRANSACTIONSTATUS.PREREQERRORIND===1){failureHandler&&failureHandler(proxyReply);
}}}return Component;
})();
