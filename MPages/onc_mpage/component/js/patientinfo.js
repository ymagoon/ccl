function PatientInfoComponentStyle(){this.initByNamespace("pt");
}PatientInfoComponentStyle.inherits(ComponentStyle);
function PatientInfoComponent(criterion){this.rowCount=0;
this.setCriterion(criterion);
this.setStyles(new PatientInfoComponentStyle());
this.m_visitTypeMeanings=null;
this.m_visitTypeCodes=null;
this.m_chiefComplaintCodes=null;
this.m_estimatedDischargeDateCodes=null;
this.m_displayMedicalService=false;
this.m_displayRFV=false;
this.m_primaryPhysDisplay=false;
this.m_attedingPhysDisplay=false;
this.m_admittingPhysDisplay=false;
this.m_referringPhysDisplay=false;
this.m_roombedDisplay=false;
this.m_admitDateDisplay=false;
this.m_modeofArrval=null;
this.m_advancedDirectives=null;
this.m_resusOrderCodes=null;
this.m_emergencyContactsDisplay=false;
this.m_documentTypeCodes=null;
this.m_viewableEncntrs="";
this.setResourceRequired(true);
this.setComponentLoadTimerName("USR:MPG.PATINFO.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.PATINFO.O1 - render component");
PatientInfoComponent.method("RetrieveRequiredResources",function(){var veObj=MP_Core.GetViewableEncntrs(this.getCriterion().person_id);
if(veObj.isResourceAvailable()&&veObj.getResourceData()){this.setViewableEncntrs(veObj.getResourceData());
CERN_PATINFO_O1.SendPatientData(this);
}else{CERN_EventListener.addListener(this,"viewableEncntrInfoAvailable",this.HandleViewableEncounters,this);
}});
PatientInfoComponent.method("HandleViewableEncounters",function(event,srObj){if(srObj.isResourceAvailable()&&srObj.getResourceData()){this.setViewableEncntrs(srObj.getResourceData());
CERN_PATINFO_O1.SendPatientData(this);
}else{var errMsg="No viewable encounters available for this patient";
this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(),errMsg),(this.isLineNumberIncluded()?"(0)":""));
}});
PatientInfoComponent.method("setViewableEncntrs",function(value){this.m_viewableEncntrs=value;
});
PatientInfoComponent.method("getViewableEncntrs",function(value){return(this.m_viewableEncntrs);
});
PatientInfoComponent.method("HandleSuccess",function(recordData){CERN_PATINFO_O1.GetPatientInfo(this,recordData);
});
PatientInfoComponent.method("InsertData",function(){CERN_PATINFO_O1.SendPatientData(this);
});
PatientInfoComponent.method("setVisitTypeCodes",function(value){this.m_visitTypeCodes=value;
});
PatientInfoComponent.method("addVisitTypeCode",function(value){if(this.m_visitTypeCodes==null){this.m_visitTypeCodes=[];
}this.m_visitTypeCodes.push(value);
});
PatientInfoComponent.method("getVisitTypeCodes",function(){if(this.m_visitTypeCodes!=null){return this.m_visitTypeCodes;
}});
PatientInfoComponent.method("setChiefComplaint",function(value){this.rowCount++;
this.m_chiefComplaintCodes=value;
});
PatientInfoComponent.method("addChiefComplaint",function(value){if(this.m_chiefComplaintCodes==null){this.m_chiefComplaintCodes=[];
}this.m_chiefComplaintCodes.push(value);
});
PatientInfoComponent.method("getChiefComplaint",function(){return this.m_chiefComplaintCodes;
});
PatientInfoComponent.method("setAdvancedDirectives",function(value){this.rowCount++;
this.m_advancedDirectives=value;
});
PatientInfoComponent.method("addAdvancedDirectives",function(value){if(this.m_advancedDirectives==null){this.m_advancedDirectives=[];
}this.m_advancedDirectives.push(value);
});
PatientInfoComponent.method("getAdvancedDirectives",function(){return this.m_advancedDirectives;
});
PatientInfoComponent.method("setResusOrders",function(value){this.rowCount++;
this.m_resusOrderCodes=value;
});
PatientInfoComponent.method("addResusOrders",function(value){if(this.m_resusOrderCodes==null){this.m_resusOrderCodes=[];
}this.m_resusOrderCodes.push(value);
});
PatientInfoComponent.method("getResusOrders",function(){return this.m_resusOrderCodes;
});
PatientInfoComponent.method("setEstimatedDischargeDate",function(value){this.rowCount++;
this.m_estimatedDischargeDateCodes=value;
});
PatientInfoComponent.method("addEstimatedDischargeDate",function(value){if(this.m_estimatedDischargeDateCodes==null){this.m_estimatedDischargeDateCodes=[];
}this.m_estimatedDischargeDateCodes.push(value);
});
PatientInfoComponent.method("getEstimatedDischargeDate",function(){return this.m_estimatedDischargeDateCodes;
});
PatientInfoComponent.method("setModeofArrival",function(value){this.rowCount++;
this.m_modeofArrival=value;
});
PatientInfoComponent.method("addModeofArrival",function(value){if(this.m_modeofArrival==null){this.m_modeofArrival=[];
}this.m_modeofArrival.push(value);
});
PatientInfoComponent.method("getModeofArrival",function(){return this.m_modeofArrival;
});
PatientInfoComponent.method("setDocumentTypes",function(value){this.m_documentTypeCodes=value;
});
PatientInfoComponent.method("addDocumentTypes",function(value){if(this.m_documentTypeCodes==null){this.m_documentTypeCodes=[];
}this.m_documentTypeCodes.push(value);
});
PatientInfoComponent.method("getDocumentTypes",function(){return this.m_documentTypeCodes;
});
PatientInfoComponent.method("isMedicalServiceDisplay",function(){return this.m_displayMedicalService;
});
PatientInfoComponent.method("setMedicalServiceDisplay",function(value){if(value==1){this.rowCount++;
}this.m_displayMedicalService=(value==1?true:false);
});
PatientInfoComponent.method("isRFVDisplay",function(){return this.m_displayRFV;
});
PatientInfoComponent.method("setRFVDisplay",function(value){if(value==1){this.rowCount++;
}this.m_displayRFV=(value==1?true:false);
});
PatientInfoComponent.method("isPrimaryPhysDisplay",function(){return this.m_primaryPhysDisplay;
});
PatientInfoComponent.method("setPrimaryPhysDisplay",function(value){if(value==1){this.rowCount++;
}this.m_primaryPhysDisplay=(value==1?true:false);
});
PatientInfoComponent.method("isAttendingPhysDisplay",function(){return this.m_attedingPhysDisplay;
});
PatientInfoComponent.method("setAttendingPhysDisplay",function(value){if(value==1){this.rowCount++;
}this.m_attedingPhysDisplay=(value==1?true:false);
});
PatientInfoComponent.method("isAdmittingPhysDisplay",function(){return this.m_admittingPhysDisplay;
});
PatientInfoComponent.method("setAdmittingPhysDisplay",function(value){if(value==1){this.rowCount++;
}this.m_admittingPhysDisplay=(value==1?true:false);
});
PatientInfoComponent.method("isReferringPhysDisplay",function(){return this.m_referringPhysDisplay;
});
PatientInfoComponent.method("setReferringPhysDisplay",function(value){if(value==1){this.rowCount++;
this.m_referringPhysDisplay=true;
}});
PatientInfoComponent.method("isRoomBedDisplay",function(){return this.m_roombedDisplay;
});
PatientInfoComponent.method("setRoomBedDisplay",function(value){if(value==1){this.rowCount++;
}this.m_roombedDisplay=(value==1?true:false);
});
PatientInfoComponent.method("isAdmitDateDisplay",function(){return this.m_admitDateDisplay;
});
PatientInfoComponent.method("setAdmitDateDisplay",function(value){if(value==1){this.rowCount++;
}this.m_admitDateDisplay=(value==1?true:false);
});
PatientInfoComponent.method("isEmergencyContactsDisplay",function(){return this.m_emergencyContactsDisplay;
});
PatientInfoComponent.method("setEmergencyContactsDisplay",function(value){this.m_emergencyContactsDisplay=(value==1?true:false);
});
PatientInfoComponent.method("getRowCount",function(){return this.rowCount;
});
PatientInfoComponent.method("getDietOrders",function(){return(this.m_diet);
});
PatientInfoComponent.method("setDietOrders",function(value){this.m_diet=value;
});
PatientInfoComponent.method("getPatientActivityOrders",function(){return(this.m_patAct);
});
PatientInfoComponent.method("setPatientActivityOrders",function(value){this.m_patAct=value;
});
}PatientInfoComponent.inherits(MPageComponent);
var CERN_PATINFO_O1=function(){var timerPatInfoLoad=null;
return{SendPatientData:function(component){var criterion=component.getCriterion();
var sendVal=[];
sendVal.push("^MINE^",criterion.person_id+".0",criterion.encntr_id+".0");
var codes=component.getVisitTypeCodes();
sendVal.push(MP_Util.CreateParamArray(codes,1));
sendVal.push(MP_Util.CreateParamArray(component.getEstimatedDischargeDate(),1));
sendVal.push(MP_Util.CreateParamArray(component.getChiefComplaint(),1));
sendVal.push(MP_Util.CreateParamArray(component.getModeofArrival(),1));
sendVal.push(MP_Util.CreateParamArray(component.getAdvancedDirectives(),1));
sendVal.push(MP_Util.CreateParamArray(component.getResusOrders(),1));
sendVal.push(MP_Util.CreateParamArray(component.getDocumentTypes(),1));
var encntrs=component.getViewableEncntrs();
var encntrVal=(encntrs)?"value("+encntrs+")":"0.0";
sendVal.push(0,encntrVal,criterion.provider_id+".0",criterion.ppr_cd+".0");
sendVal.push(MP_Util.CreateParamArray(component.getDietOrders(),1));
sendVal.push(MP_Util.CreateParamArray(component.getPatientActivityOrders(),1));
if(CERN_BrowserDevInd){sendVal.push(1);
}MP_Core.XMLCclRequestWrapper(component,"mp_get_patinfo",sendVal,true);
return;
},GetPatientInfo:function(component,reportData){var criterion=component.getCriterion();
var patInfoI18n=i18n.discernabu.patinfo_o1;
var jsPtHTML=[];
var tempAr=[];
var ptHTML="";
var countText="";
var rfv=patInfoI18n.NO_RESULTS_FOUND;
var roomBed=patInfoI18n.NO_RESULTS_FOUND;
var admitDiag=patInfoI18n.NO_RESULTS_FOUND;
var admitDate=patInfoI18n.NO_RESULTS_FOUND;
var primPhys=patInfoI18n.NO_RESULTS_FOUND;
var attPhys=patInfoI18n.NO_RESULTS_FOUND;
var admPhys=patInfoI18n.NO_RESULTS_FOUND;
var refPhys=patInfoI18n.NO_RESULTS_FOUND;
var medService=patInfoI18n.NO_RESULTS_FOUND;
var dischargeDate=patInfoI18n.NO_RESULTS_FOUND;
var recCount=0;
var dateTime=new Date();
var contact=5;
var patLstVstdisp;
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var lastVisitDtTm=new Date();
var visitListCnt=reportData.VISIT_LIST.length;
var multVisitTypeInd=reportData.MULT_VISIT_TYPE_IND;
if(reportData.RFV!=""){rfv=reportData.RFV;
}if(reportData.ROOM_BED!=""){roomBed=reportData.ROOM_BED;
}if(reportData.ADMIT_DT_TM!=""){admitDate=reportData.ADMIT_DT_TM;
dateTime.setISO8601(admitDate);
admitDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_2YEAR);
}if(reportData.PRIMARY_PHYS!=""){primPhys=reportData.PRIMARY_PHYS;
}if(reportData.ATTENDING_PHYS!=""){attPhys=reportData.ATTENDING_PHYS;
}if(reportData.ADMITTING_PHYS!=""){admPhys=reportData.ADMITTING_PHYS;
}if(reportData.REFERRING_PHYS!=""){refPhys=reportData.REFERRING_PHYS;
}if(reportData.MED_SERVICE!=""){medService=reportData.MED_SERVICE;
}if(reportData.ESTIMATED_DEPART_DT_TM!=""){dischargeDate=EventDisplay(reportData.ESTIMATED_DEPART_DT_TM,reportData.ESTIMATED_DEPART_DATE_IND);
}jsPtHTML.push("<div class='",MP_Util.GetContentClass(component,component.getRowCount()),"'>");
if(component.getChiefComplaint()!=null){var chiefComplaint="<dd class='pt-detail'><span>"+patInfoI18n.NO_RESULTS_FOUND+"</span></dd>";
if(reportData.CHIEFCOMPLAINTS.length>0){var complaint=EventDisplay(reportData.CHIEFCOMPLAINTS[0].CHIEFCOMPLAINT,reportData.CHIEFCOMPLAINTS[0].DATE_IND);
if(complaint>""){tempAr=[];
var resModified=(reportData.CHIEFCOMPLAINTS[0].MODIFIED_FLAG>0)?"<span class='res-modified'>&nbsp;</span>":"";
var eventid=reportData.CHIEFCOMPLAINTS[0].EVENTID;
var viewerLink=ptEventViewerLink(criterion.person_id+".0",eventid,complaint);
tempAr.push("<dd class='pt-detail'><span>",viewerLink,"</span>",resModified,"</dd>");
chiefComplaint=tempAr.join("");
}}jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.CHIEF_COMPLAINT,":</span></dt>",chiefComplaint,"</dl>");
}if(component.isRFVDisplay()){jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.RFV,":</span></dt><dd class='pt-detail'><span>",rfv,"</span></dd></dl>");
}if(component.isPrimaryPhysDisplay()){jsPtHTML.push("<dl class='pt-info'><dt  class='pt-label'><span>",patInfoI18n.PRIM_PHYS,":</span></dt><dd class='pt-detail'><span>",primPhys,"</span></dd></dl>");
}if(component.isAttendingPhysDisplay()){jsPtHTML.push("<dl class='pt-info'><dt  class='pt-label'><span>",patInfoI18n.ATTEND_PHYS,":</span></dt><dd class='pt-detail'><span>",attPhys,"</span></dd></dl>");
}if(component.isAdmittingPhysDisplay()){jsPtHTML.push("<dl class='pt-info'><dt  class='pt-label'><span>",patInfoI18n.ADMIT_PHYS,":</span></dt><dd class='pt-detail'><span>",admPhys,"</span></dd></dl>");
}if(component.isReferringPhysDisplay()){jsPtHTML.push("<dl class='pt-info'><dt  class='pt-label'><span>",patInfoI18n.REFER_PHYS,":</span></dt><dd class='pt-detail'><span>",refPhys,"</span></dd></dl>");
}if(component.isMedicalServiceDisplay()){jsPtHTML.push("<dl class='pt-info'><dt  class='pt-label'><span>",patInfoI18n.SERVICE,":</span></dt><dd class='pt-detail'><span>",medService,"</span></dd></dl>");
}if(component.isRoomBedDisplay()){jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.ROOM_BED,":</span></dt><dd class='pt-detail'><span>",roomBed,"</span></dd></dl>");
}if(component.isAdmitDateDisplay()){jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.ADMIT_DATE,":</span></dt><dd class='pt-detail'><span>",admitDate,"</span></dd></dl>");
}if(component.getEstimatedDischargeDate()!=null){var resModified=(reportData.ESTIMATED_DEPART_MODIFIED_FLAG>0)?"<span class='res-modified'>&nbsp;</span>":"";
var eventid=reportData.ESTIMATED_DEPART_EVENTID;
if(eventid>0){var viewerLink=ptEventViewerLink(criterion.person_id+".0",eventid,dischargeDate);
}else{var viewerLink=dischargeDate;
}jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.TARGETED_DISCHARGE_DATE,":</span></dt><dd class='pt-detail'><span>",viewerLink,"</span>",resModified,"</dd></dl>");
}if(component.getModeofArrival()!=null){var modeofArrival="<dd class='pt-detail'><span>"+patInfoI18n.NO_RESULTS_FOUND+"</span></dd>";
if(reportData.MODESOFARRIVAL.length>0){var arrival=EventDisplay(reportData.MODESOFARRIVAL[0].MODEOFARRIVAL,reportData.MODESOFARRIVAL[0].DATE_IND);
if(arrival>""){tempAr=[];
var resModified=(reportData.MODESOFARRIVAL[0].MODIFIED_FLAG>0)?"<span class='res-modified'>&nbsp;</span>":"";
var eventid=reportData.MODESOFARRIVAL[0].EVENTID;
var viewerLink=ptEventViewerLink(criterion.person_id+".0",eventid,arrival);
tempAr.push("<dd class='pt-detail'><span>",viewerLink,"</span>",resModified,"</dd>");
modeofArrival=tempAr.join("");
}}jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.MODE_OF_ARRVAL,":</span></dt>",modeofArrival,"</dl>");
}if(component.getAdvancedDirectives()!=null){var advancedirective="<dd class='pt-detail'><span>"+patInfoI18n.NO_RESULTS_FOUND+"</span></dd>";
if(reportData.ADVANCEDDIRECTIVES.length>0){var directive=EventDisplay(reportData.ADVANCEDDIRECTIVES[0].ADVANCEDIRECTIVE,reportData.ADVANCEDDIRECTIVES[0].DATE_IND);
if(directive>""){tempAr=[];
var resModified=(reportData.ADVANCEDDIRECTIVES[0].MODIFIED_FLAG>0)?"<span class='res-modified'>&nbsp;</span>":"";
var eventid=reportData.ADVANCEDDIRECTIVES[0].EVENTID;
var viewerLink=ptEventViewerLink(criterion.person_id+".0",eventid,directive);
tempAr.push("<dd class='pt-detail'><span>",viewerLink,"</span>",resModified,"</dd>");
advancedirective=tempAr.join("");
}}jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.ADVANCE_DIRECTIVE,":</span></dt>",advancedirective,"</dl>");
}if(visitListCnt>0){patLstVstdisp="";
var resModified=(reportData.LASTVISITDOCMODFLAG>0)?"<span class='res-modified'>&nbsp;</span>":"";
if(reportData.VISIT_LIST[0].UTCDATE!=""){var lastVisit=reportData.VISIT_LIST[0].UTCDATE;
lastVisitDtTm.setISO8601(lastVisit);
patLstVstdisp=df.format(lastVisitDtTm,mp_formatter.DateTimeFormatter.FULL_DATE_2YEAR);
}if(((reportData.DOCVIEWERTYPE==="AP")&&(reportData.LASTVISITEVENTID>0)&&(reportData.LASTVISITPEVENTID>0))||((reportData.DOCVIEWERTYPE!=="AP")&&(reportData.DOCVIEWERTYPE!=="STANDARD")&&(reportData.LASTVISITEVENTID>0))){if(CERN_BrowserDevInd){var sParams=[];
var arDisplay=[];
sParams.push(component.getCriterion().person_id,component.getCriterion().encntr_id,reportData.LASTVISITEVENTID,'"'+patLstVstdisp+"&nbsp("+reportData.VISIT_LIST[0].TYPE+')"','"'+reportData.DOCVIEWERTYPE+'"',reportData.LASTVISITPEVENTID,'""',component.getCriterion().provider_id,0,'""');
arDisplay.push("<a onclick='MD_reachViewerDialog.LaunchReachClinNoteViewer(",sParams,"); return false;' href='#'>",patLstVstdisp+"&nbsp("+reportData.VISIT_LIST[0].TYPE+")","</a>");
var linkDisplay=arDisplay.join("");
jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.LAST_VISIT,":</span></dt><dd class='pt-detail'><span>",linkDisplay,"</span></dd></dl>");
}else{jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.LAST_VISIT,":</span></dt><dd class='pt-detail'><span>",MP_Util.CreateClinNoteLink(component.getCriterion().person_id,component.getCriterion().encntr_id,reportData.LASTVISITEVENTID,patLstVstdisp+"&nbsp("+reportData.VISIT_LIST[0].TYPE+")",reportData.DOCVIEWERTYPE,reportData.LASTVISITPEVENTID),"</span></dd></dl>");
}}else{jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.LAST_VISIT,":</span></dt><dd class='pt-detail'><span>",patLstVstdisp,"&nbsp","(",reportData.VISIT_LIST[0].TYPE,")","</span>",resModified,"</dd></dl>");
}if(visitListCnt>1){jsPtHTML.push("<h4 class='det-hd'><span>",patInfoI18n.DETAILS,"</span></h4><div class='hvr'><dl class='pt-det'>");
if(multVisitTypeInd==0){for(var j=0,m=reportData.VISIT_LIST.length;
j<m;
j++){if(reportData.VISIT_LIST[j].UTCDATE!=""){var lastVis=reportData.VISIT_LIST[j].UTCDATE;
lastVisitDtTm.setISO8601(lastVis);
jsPtHTML.push("<dd><span>",df.format(lastVisitDtTm,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR),"</span></dd><br/>");
}}}else{if(multVisitTypeInd==1){for(var j=0,m=reportData.VISIT_LIST.length;
j<m;
j++){if(reportData.VISIT_LIST[0].UTCDATE!=""){var lastVisit1=reportData.VISIT_LIST[j].UTCDATE;
lastVisitDtTm.setISO8601(lastVisit1);
jsPtHTML.push("<dd><span>",df.format(lastVisitDtTm,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR),"&nbsp","(",reportData.VISIT_LIST[j].TYPE,")","</span></dd><br/>");
}}}}jsPtHTML.push("</dl></div>");
}}else{jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",patInfoI18n.LAST_VISIT,":</span></dt><dd class='pt-detail'><span>",patInfoI18n.NO_RESULTS_FOUND,"</span></dd></dl>");
}if(component.getResusOrders()!=null){var codeStatus="";
var codeStatusDetails="";
for(i=0,k=reportData.RESUSCITATION.length;
i<k;
i++){if(i>0){codeStatus+=", ";
}codeStatus+=reportData.RESUSCITATION[i].CODE_STATUS;
codeStatusDetails=reportData.RESUSCITATION[i].CODE_STATUS_DETAILS;
}if(codeStatus==""){codeStatus=patInfoI18n.NO_RESULTS_FOUND;
codeStatusDetails="";
}if(codeStatus==="--"){jsPtHTML.push("<dl class='pt-info'><dt  class='pt-label'><span>",patInfoI18n.CODE_STATUS,":</span></dt><dd class='pt-detail'><span>",codeStatus,"</span></dd></dl>");
}else{jsPtHTML.push("<dl class='pt-info'><dt  class='pt-label'><span>",patInfoI18n.CODE_STATUS,":</span></dt><dd class='pt-detail'><span class='res-severe'>",codeStatus,"</span></dd></dl>");
}if(codeStatusDetails!=""){jsPtHTML.push("<h4 class='det-hd'><span>",patInfoI18n.DETAILS,"</span></h4><div class='hvr'><dl class='pt-det'><dd><span>",codeStatusDetails,"</span></dd></dl></div>");
}}if(component.getDietOrders()||component.getPatientActivityOrders()){if(!reportData.DIET&&!reportData.ACTIVITY_ORDER){jsPtHTML.push("<div class='sub-sec closed'><h3 class='sub-sec-hd'><span class='sub-sec-hd-tgl'>-</span><span class='sub-sec-title'>",patInfoI18n.DIET_ACTIVITY," (0) </span></h3><div class='sub-sec-content'><span class='res-none'>",patInfoI18n.NO_RESULTS_FOUND,"</span></div></div>");
}else{var counter=(reportData.DIET&&reportData.ACTIVITY_ORDER)?2:1;
jsPtHTML.push("<div class='sub-sec'><h3 class='sub-sec-hd'><span class='sub-sec-hd-tgl'>-</span><span class='sub-sec-title'>",patInfoI18n.DIET_ACTIVITY," (",counter,")</span></h3><div class='sub-sec-content'>");
if(reportData.DIET){jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",reportData.DIET,"</span></dt><dd class='pt-detail'><span>",reportData.DIET_ORDER_DISP,"</span></dd></dl>");
}if(reportData.ACTIVITY_ORDER){jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",reportData.ACTIVITY_ORDER,"</span></dt><dd class='pt-detail'><span>",reportData.ACTIVITY_ORDER_DISP,"</span></dd></dl>");
}jsPtHTML.push("</div></div>");
}}if(component.isEmergencyContactsDisplay()){var contactList=reportData.CONTACT_LIST;
var emcContactHTML=[];
var otherContactHTML=[];
if(contactList.length>0){jsPtHTML.push("<div class='sub-sec'><h3 class='sub-sec-hd'><span class='sub-sec-hd-tgl'>-</span><span class='sub-sec-title'>",CERN_BrowserDevInd?patInfoI18n.CONTACTS:patInfoI18n.EMER_CONTACT," (",contactList.length,")</span></h3><div class='sub-sec-content'>");
for(var j=0,m=contactList.length,k=1;
j<m;
j++){if(CERN_BrowserDevInd){if(contactList[j].MEANING==="EMC"){emcContactHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",contactList[j].TYPE," ",k," :</span></dt><dd class='pt-detail'><div>",contactList[j].NAME,"</div><div class = 'pt-phonenum-label'>",contactList[j].NUMBER,"</div></dd></dl>");
k=k+1;
}else{otherContactHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",contactList[j].TYPE," "," :</span></dt><dd class='pt-detail'><div>",contactList[j].NAME,"</div><div class = 'pt-phonenum-label'>",contactList[j].NUMBER,"</div></dd></dl>");
}if(contactList[j].CONTACT_PHONE.length>0){(contactList[j].MEANING==="EMC")?emcContactHTML.push("<h4 class='det-hd'><span>",patInfoI18n.DETAILS,"</span></h4><div class='hvr'><dl class='pt-det'>"):otherContactHTML.push("<h4 class='det-hd'><span>",patInfoI18n.DETAILS,"</span></h4><div class='hvr'><dl class='pt-det'>");
}for(var x=0,y=contactList[j].CONTACT_PHONE.length;
x<y;
x++){(contactList[j].MEANING==="EMC")?emcContactHTML.push("<dd><span>",contactList[j].CONTACT_PHONE[x].NUMBER,"</span></dd><br/>"):otherContactHTML.push("<dd><span>",contactList[j].CONTACT_PHONE[x].NUMBER,"</span></dd><br/>");
}contactList[j].MEANING==="EMC"?emcContactHTML.push("</dl></div>"):otherContactHTML.push("</dl></div>");
}else{jsPtHTML.push("<dl class='pt-info'><dt class='pt-label'><span>",contactList[j].NAME,":</span></dt><dd class='pt-detail'><span>",contactList[j].NUMBER,"</span></dd></dl>");
if(contactList[j].CONTACT_PHONE.length>0){jsPtHTML.push("<h4 class='det-hd'><span>",patInfoI18n.DETAILS,"</span></h4><div class='hvr'><dl class='pt-det'>");
}for(var x=0,y=contactList[j].CONTACT_PHONE.length;
x<y;
x++){jsPtHTML.push("<dd><span>",contactList[j].CONTACT_PHONE[x].NUMBER,"</span></dd><br/>");
}jsPtHTML.push("</dl></div>");
}}if(CERN_BrowserDevInd){jsPtHTML.push(emcContactHTML.join(""),otherContactHTML.join(""),"</dl></div>");
}jsPtHTML.push("</div></div>");
}else{jsPtHTML.push("<div class='sub-sec closed'><h3 class='sub-sec-hd'><span class='sub-sec-hd-tgl'>-</span><span class='sub-sec-title'>",CERN_BrowserDevInd?patInfoI18n.CONTACTS:patInfoI18n.EMER_CONTACT," (0)</span></h3><div class='sub-sec-content'><span class='res-none'>",patInfoI18n.NO_RESULTS_FOUND,"</span></div></div>");
}}jsPtHTML.push("</div>");
ptHTML=jsPtHTML.join("");
countText=MP_Util.CreateTitleText(component,component.getRowCount(),false,false,false);
MP_Util.Doc.FinalizeComponent(ptHTML,component,countText);
return;
}};
function ptEventViewerLink(personid,eventid,result){var ar=[];
var params=[personid,"0.0",eventid,'"EVENT"',"0.0"];
if(CERN_BrowserDevInd){ar.push("<a onclick='MD_resultViewerDialog.initResultViewer(",eventid,',"',"Result Details",'"',");return false;' href='#'>",result,"</a>");
}else{ar.push("<a onclick='MP_Util.LaunchClinNoteViewer(",params.join(","),"); return false;' href='#'>",result,"</a>");
}return ar.join("");
}function EventDisplay(sResult,bDateInd){var formattedResult=sResult;
if(bDateInd===1){var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
formattedResult=df.formatISO8601(sResult,mp_formatter.DateTimeFormatter.FULL_DATE_TIME_2YEAR);
}return(formattedResult);
}}();
