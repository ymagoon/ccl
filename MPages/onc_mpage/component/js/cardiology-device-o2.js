function WfPaceMakerComponentStyle(){this.initByNamespace("pmc2");
}WfPaceMakerComponentStyle.prototype=new ComponentStyle();
WfPaceMakerComponentStyle.prototype.constructor=ComponentStyle;
function WfPaceMakerComponent(criterion){this.componentId="";
this.i18n={};
this.JSONData={};
this.staticCntntPath="";
this.alertMessage=null;
this.dataLoaded=false;
this.setComponentLoadTimerName("USR:MPG.Cardiology.Device.Summary.o2 - load component ");
this.setComponentRenderTimerName("ENG:MPG.Cardiology.Device.Summary.o2 - render component");
this.setCriterion(criterion);
this.setStyles(new WfPaceMakerComponentStyle());
this.setIncludeLineNumber(true);
this.suggestedMatchPulseGenIDs=[];
this.shortEpisodeList=[];
this.longEpisodeList=[];
this.episodeTable=[];
this.linkText=[];
this.tablesExpandStatus=[];
this.i18n=i18n.discernabu.cardiology_device_integration_o2;
this.devicesToAssociate=[];
this.devicesToDisassociate=[];
}WfPaceMakerComponent.prototype=new MPageComponent();
WfPaceMakerComponent.prototype.constructor=MPageComponent;
WfPaceMakerComponent.prototype.refreshComponent=function(){this.componentId="";
this.i18n=i18n.discernabu.cardiology_device_integration_o2;
this.JSONData={};
this.staticCntntPath="";
this.alertMessage=null;
this.shortEpisodeList=[];
this.longEpisodeList=[];
this.episodeTable=[];
this.linkText=[];
this.tablesExpandStatus=[];
this.devicesToAssociate=[];
this.devicesToDisassociate=[];
this.dataLoaded=false;
this.setIncludeLineNumber(true);
MPageComponent.prototype.refreshComponent.call(this);
};
WfPaceMakerComponent.prototype.retrieveComponentData=function(){var component=arguments[0]?arguments[0]:this;
var request=new MP_Core.ScriptRequest(component,component.getComponentLoadTimerName());
request.setProgramName("PEX_GET_ICD_INFO");
request.setParameters(["^MINE^",component.getCriterion().person_id+".00","^18,m^","^^","1","0","1","1","0","1"]);
request.setAsync(true);
MP_Core.XMLCCLRequestCallBack(component,request,component.handleLoad);
};
WfPaceMakerComponent.prototype.renderComponent=function(recordData){var component,opHTML,deviceIterator;
component=this;
this.componentId=this.getComponentId();
try{this.JSONData=recordData;
this.dataLoaded=true;
this.scopeId=component.m_rootComponentNode.id;
this.scopeObj=$("#"+this.scopeId);
this.staticCntntPath=component.getCriterion().static_content;
this.createDeviceData();
opHTML="";
for(deviceIterator=0;
deviceIterator<this.JSONData.PULSE_GENS.length;
deviceIterator++){if(deviceIterator===0){opHTML+=this.constructDeviceInformationPanel(deviceIterator,false);
}else{opHTML+=this.constructDeviceInformationPanel(deviceIterator,true);
}this.episodeTable[deviceIterator]=this.createDataTable(deviceIterator);
this.episodeTable[deviceIterator].bindData(this.shortEpisodeList[deviceIterator]);
opHTML+=this.episodeTable[deviceIterator].render();
opHTML+=this.createShowMoreLinkHTML(deviceIterator);
opHTML+="<br />";
this.linkText[deviceIterator]="";
this.tablesExpandStatus[deviceIterator]=false;
}MP_Util.Doc.FinalizeComponent(opHTML,component,"");
}catch(err){MP_Util.LogJSError(this,err,"WfPaceMakerComponent.js","renderComponent");
throw err;
}};
WfPaceMakerComponent.prototype.createDeviceData=function(){var shortDataList=[],longDataList=[],dateResult,eventType,eventInfo={},deviceCounter,episodeIterator;
for(deviceCounter=0;
deviceCounter<this.JSONData.PULSE_GENS.length;
deviceCounter++){shortDataList[deviceCounter]=[];
longDataList[deviceCounter]=[];
for(episodeIterator=0;
episodeIterator<this.JSONData.PULSE_GENS[deviceCounter].EPISODES.length;
episodeIterator++){dateResult=new Date();
dateResult.setISO8601(this.JSONData.PULSE_GENS[deviceCounter].EPISODES[episodeIterator].DETECTION_DT_TM);
eventInfo={date:dateResult.format("mediumDate"),time:dateResult.format("shortTime"),duration:this.parseDurationSeconds(parseInt(this.JSONData.PULSE_GENS[deviceCounter].EPISODES[episodeIterator].DURATION_VALUE,10))};
eventType=this.JSONData.PULSE_GENS[deviceCounter].EPISODES[episodeIterator].TYPE_DISP;
if(this.JSONData.PULSE_GENS[deviceCounter].EPISODES[episodeIterator].DOC_UID!==""){eventType+='<a onclick=\'var slaTimer = MP_Util.CreateTimer("USR:MPG.Cardiology.Device.Summary.o2 - get episode doc"); if (slaTimer) { slaTimer.SubtimerName = "'+this.criterion.category_mean+'"; slaTimer.Stop(); }CCLLINK("pex_disp_pulse_gen_episode_doc","^MINE^,^'+this.JSONData.PULSE_GENS[deviceCounter].EPISODES[episodeIterator].DOC_UID+"^\",1);'><span class='pmc2-ekg-icon'></span></a>";
}if(episodeIterator<5){shortDataList[deviceCounter][episodeIterator]=eventInfo;
if(eventType!==""){shortDataList[deviceCounter][episodeIterator].event_type=eventType;
}}longDataList[deviceCounter][episodeIterator]=eventInfo;
if(eventType!==""){longDataList[deviceCounter][episodeIterator].event_type=eventType;
}}this.shortEpisodeList[deviceCounter]=shortDataList[deviceCounter];
this.longEpisodeList[deviceCounter]=longDataList[deviceCounter];
}};
WfPaceMakerComponent.prototype.createDataTable=function(deviceNum){var tableColumns=[],episodeDataTable;
episodeDataTable=new ComponentTable();
episodeDataTable.setNamespace(this.getStyles().getId()+deviceNum);
episodeDataTable.setCustomClass("pmc2-episode-tabular-data");
tableColumns[0]=new TableColumn();
tableColumns[1]=new TableColumn();
tableColumns[2]=new TableColumn();
tableColumns[3]=new TableColumn();
tableColumns[0].setColumnId("pmc2-tablecol-event-type");
tableColumns[1].setColumnId("pmc2-tablecol-date");
tableColumns[2].setColumnId("pmc2-tablecol-time");
tableColumns[3].setColumnId("pmc2-tablecol-duration");
tableColumns[0].setCustomClass("pmc2-tablecol-event-type");
tableColumns[1].setCustomClass("pmc2-tablecol-date");
tableColumns[2].setCustomClass("pmc2-tablecol-time");
tableColumns[3].setCustomClass("pmc2-tablecol-duration");
tableColumns[0].setColumnDisplay(this.i18n.EVENT_TYPE);
tableColumns[1].setColumnDisplay(this.i18n.DATE);
tableColumns[2].setColumnDisplay(this.i18n.TIME);
tableColumns[3].setColumnDisplay(this.i18n.DURATION);
tableColumns[0].setRenderTemplate("<span>${event_type}</span>");
tableColumns[1].setRenderTemplate("<span>${date}</span>");
tableColumns[2].setRenderTemplate("<span>${time}</span>");
tableColumns[3].setRenderTemplate("<span>${duration}</span>");
episodeDataTable.addColumn(tableColumns[0]);
episodeDataTable.addColumn(tableColumns[1]);
episodeDataTable.addColumn(tableColumns[2]);
episodeDataTable.addColumn(tableColumns[3]);
return episodeDataTable;
};
WfPaceMakerComponent.prototype.createShowMoreLinkHTML=function(deviceNum){if(this.JSONData.PULSE_GENS[deviceNum]){if(this.JSONData.PULSE_GENS[deviceNum].EPISODES.length>=5){return"<div id='pmc2-show-more-results-panel-"+deviceNum+"' class='pmc2-show-all'><a id='pmc2-show-hide-more-link-"+deviceNum+"' href='#' class = 'pmc2-show-hide-more-link'>"+this.i18n.SHOW_ALL+" ("+this.JSONData.PULSE_GENS[deviceNum].EPISODES.length+")</a></div>";
}else{return"";
}}else{return"";
}};
WfPaceMakerComponent.prototype.postProcessing=function(){var $self,$showHideLink;
if(!this.disassociateDialogSequence){this.disassociateDialogSequence=0;
}if(!this.scopeObj){this.scopeObj=$("#"+this.m_rootComponentNode.id);
}$self=this.scopeObj;
if(this.dataLoaded===true){$showHideLink=$self.find(".pmc2-show-hide-more-link");
if($showHideLink.data("Loaded")&&$showHideLink.data("Loaded")===1){return;
}$showHideLink.data("Loaded",1);
$showHideLink.click({scope:this},this.showLinkClick);
this.constructImplantInfoTooltips();
this.enableManageDevicesMenuItem();
}};
WfPaceMakerComponent.prototype.constructImplantInfoTooltips=function(){var $implantDetailHover=$("#"+this.m_rootComponentNode.id).find(".pmc2-implant-date .pmc2-header-value"),deviceTooltip,deviceIdx;
for(deviceIdx=0;
deviceIdx<this.JSONData.PULSE_GENS.length;
deviceIdx++){deviceTooltip=new MPageTooltip();
deviceTooltip.setContent(this.constructHoverTable([this.i18n.IMPLANTING_PHYSICIAN,this.i18n.FACILITY,this.i18n.CONTACT_DATA],[this.JSONData.PULSE_GENS[deviceIdx].IMPLANTER_NAME,this.JSONData.PULSE_GENS[deviceIdx].IMPLANTING_FACILITY_NAME,this.JSONData.PULSE_GENS[deviceIdx].IMPLANTER_CONTACT_INFO]));
deviceTooltip.setAnchor($implantDetailHover.eq(deviceIdx));
$implantDetailHover.eq(deviceIdx).mouseover({tooltip:deviceTooltip},this.showHoverData);
}};
WfPaceMakerComponent.prototype.getManageDevicesDialogId=function(){return this.getStyles().getNameSpace()+"manageDevices"+this.getComponentId();
};
WfPaceMakerComponent.prototype.enableManageDevicesMenuItem=function(){var manageDevices=this.getMenu().m_menuItemArr[0],thisComponent=this;
manageDevices.setIsDisabled(false);
manageDevices.setClickFunction(function(){var manageDevicesDialogId=thisComponent.getManageDevicesDialogId(),submitButton,cancelButton,manageDevicesDialog=MP_ModalDialog.modalDialogObjects[manageDevicesDialogId],manageDevicesHtml=thisComponent.constructDeviceManagement();
if(manageDevicesDialog===undefined){submitButton=new ModalButton("pmc2-apply-changes");
cancelButton=new ModalButton("pmc2-cancel-changes");
manageDevicesDialog=new ModalDialog(manageDevicesDialogId);
cancelButton.setText(i18n.discernabu.cardiology_device_integration_o2.CANCEL).setIsDithered(false).setCloseOnClick(true).setOnClickFunction(function(){thisComponent.devicesToAssociate=[];
thisComponent.devicesToDisassociate=[];
});
submitButton.setText(i18n.discernabu.cardiology_device_integration_o2.SUBMIT).setIsDithered(false).setCloseOnClick(true).setFocusInd(true).setOnClickFunction(function(){var personId=thisComponent.getCriterion().person_id,deviceIdx,associateDeviceCount=thisComponent.devicesToAssociate.length,disassociateDeviceCount=thisComponent.devicesToDisassociate.length;
if(associateDeviceCount!==0||disassociateDeviceCount!==0){for(deviceIdx=0;
deviceIdx<associateDeviceCount;
deviceIdx++){thisComponent.updateDeviceAssociation(thisComponent.devicesToAssociate[deviceIdx],personId,undefined,false);
}for(deviceIdx=0;
deviceIdx<disassociateDeviceCount;
deviceIdx++){thisComponent.updateDeviceAssociation(thisComponent.devicesToDisassociate[deviceIdx],0,undefined,false);
}thisComponent.devicesToAssociate=[];
thisComponent.devicesToDisassociate=[];
thisComponent.refreshComponent();
}});
manageDevicesDialog.setLeftMarginPercentage(5).setRightMarginPercentage(5).setTopMarginPercentage(20).setBottomMarginPercentage(20).setHeaderTitle(i18n.discernabu.cardiology_device_integration_o2.MANAGE_DEVICES).setIsBodySizeFixed(false).setIsFooterAlwaysShown(true).addFooterButton(submitButton).addFooterButton(cancelButton).setShowCloseIcon(true).setHeaderCloseFunction(function(){thisComponent.devicesToAssociate=[];
thisComponent.devicesToDisassociate=[];
});
MP_ModalDialog.addModalDialogObject(manageDevicesDialog);
}MP_ModalDialog.showModalDialog(manageDevicesDialogId);
manageDevicesDialog.setBodyHTML(manageDevicesHtml);
thisComponent.setDeviceManagementEvents($("#"+manageDevicesDialog.getBodyElementId()));
});
};
WfPaceMakerComponent.prototype.getAssociateDialogId=function(){return this.getStyles().getNameSpace()+"AssociateDeviceDialog"+this.getComponentId();
};
WfPaceMakerComponent.prototype.constructDeviceManagement=function(){var manageDevicesHtml="";
manageDevicesHtml+=this.constructDeviceManagementDisassociation(this.getDevicePIDs());
manageDevicesHtml+=this.constructDeviceManagementAssociation();
return manageDevicesHtml;
};
WfPaceMakerComponent.prototype.getDevicePIDs=function(){var deviceIdx,devicePIDs=[];
if($.isEmptyObject(this.JSONData.PULSE_GENS)===false){for(deviceIdx=0;
deviceIdx<this.JSONData.PULSE_GENS.length;
deviceIdx++){devicePIDs.push({SEX_CDF:this.JSONData.PULSE_GENS[deviceIdx].PID[0].SEX_TXT,BIRTH_DT_TM_TXT:this.JSONData.PULSE_GENS[deviceIdx].PID[0].BIRTH_DT_TM_TXT,SERIAL_TXT:this.JSONData.PULSE_GENS[deviceIdx].SERIAL_TXT,NAME_LAST:this.JSONData.PULSE_GENS[deviceIdx].PID[0].NAME_LAST,NAME_FIRST:this.JSONData.PULSE_GENS[deviceIdx].PID[0].NAME_FIRST});
}}return devicePIDs;
};
WfPaceMakerComponent.prototype.constructDeviceManagementDisassociation=function(devices){var diassociationHtml="",deviceCount=devices.length,deviceIdx;
diassociationHtml+="<div class='pmc2-manage-dev-disassociation'>   <div class='pmc2-matching-device-title'>"+i18n.discernabu.cardiology_device_integration_o2.PATIENT_DEVICES+"   </div>   <div class='pmc2-manage-dev-disassociation-devices'>";
for(deviceIdx=0;
deviceIdx<deviceCount;
deviceIdx++){diassociationHtml+=this.constructDevicePanel(devices[deviceIdx],i18n.discernabu.cardiology_device_integration_o2.DISASSOCIATE,undefined,true);
}diassociationHtml+="   </div></div>";
return diassociationHtml;
};
WfPaceMakerComponent.prototype.constructDevicePanel=function(deviceData,buttonLabel,customInputId){var i18nCardiology=i18n.discernabu.cardiology_device_integration_o2,deviceHtml="",customInputIdHtml=customInputId?"id='"+customInputId+"'":"";
deviceHtml+="<div class='pmc2-search-output'>   <div class='pmc2-search-data'>       <span class='pmc2-search-patient-name'>"+deviceData.NAME_LAST+", "+deviceData.NAME_FIRST+"</span>       <span class='pmc2-serial-number'>"+deviceData.SERIAL_TXT+"</span>       <br />       <span class='pmc2-search-patient-dob'>"+i18nCardiology.DOB+" "+this.formatDOB(deviceData.BIRTH_DT_TM_TXT)+"</span>       <span class='pmc2-search-patient-details'>"+i18nCardiology.SEX+" "+deviceData.SEX_CDF+"</span>   </div>   <div class='pmc2-add-device-btn'>       <input type='button' "+customInputIdHtml+" name='pmc2-add-device-button' class='pmc2-associate-device-button' value='"+buttonLabel+"'/>   </div></div>";
return deviceHtml;
};
WfPaceMakerComponent.prototype.constructDeviceManagementAssociation=function(){var associationHtml="";
associationHtml+="<div class='pmc2-manage-dev-association'>"+this.constructDeviceSearch("pmc2-search-device-content-manage-dev")+this.constructDeviceManagementAssistedAssociation()+"</div>";
return associationHtml;
};
WfPaceMakerComponent.prototype.constructDeviceManagementAssistedAssociation=function(){var thisComponent=this,containerClass="pmc2-manage-dev-assisted";
this.getSuggestedDevicesToAssociate(this.getCriterion().person_id,function(scriptReply){var $deviceManagement=$("div#"+thisComponent.getManageDevicesDialogId()+"body"),$assistedContainer=$deviceManagement.find("div."+containerClass),assistedContainerHtml="",scriptStatus=scriptReply.getStatus();
$assistedContainer.empty();
if(scriptStatus==="S"){assistedContainerHtml+="<div class='pmc2-matching-device-title'>"+i18n.discernabu.cardiology_device_integration_o2.POSSIBLE_MATCHES+"</div><div class='pmc2-suggested-matches'>"+thisComponent.populateSuggestedMatches(scriptReply,true)+"</div>";
$assistedContainer.append(assistedContainerHtml);
$assistedContainer.find(".pmc2-manage-dev-undo").hide();
thisComponent.setDeviceManagementAssistedAssociationEvents($assistedContainer,$deviceManagement.find(".pmc2-manage-dev-disassociation"));
}else{if(scriptStatus==="Z"){assistedContainerHtml+="<div class='pmc2-matching-device-title'>"+i18n.discernabu.cardiology_device_integration_o2.NO_DEVICE+"<br/>"+i18n.discernabu.cardiology_device_integration_o2.NO_DEVICE_1+"</div>";
$assistedContainer.append(assistedContainerHtml);
}else{logger.logScriptCallError(this,scriptReply,"cardiology-device-o2.js","constructDeviceManagementAssistedAssociation");
}}});
return"<div class='"+containerClass+"'></div>";
};
WfPaceMakerComponent.prototype.setDeviceManagementEvents=function($deviceManagement){this.setDeviceManagementDisassociationEvents($deviceManagement.find(".pmc2-manage-dev-disassociation"));
this.setDeviceManagementAssociationEvents($deviceManagement.find(".pmc2-search-device-content-manage-dev"),$deviceManagement.find(".pmc2-manage-dev-assisted"));
};
WfPaceMakerComponent.prototype.setDeviceManagementDisassociationEvents=function($disassociation){var thisComponent=this,$disassociateButtons=$disassociation.find(".pmc2-associate-device-button"),disassociateButtonCount=$disassociateButtons.length,disassociateButtonIdx,pulseGenIdKey="pulseGenId";
for(disassociateButtonIdx=0;
disassociateButtonIdx<disassociateButtonCount;
disassociateButtonIdx++){$disassociateButtons.eq(disassociateButtonIdx).data(pulseGenIdKey,this.JSONData.PULSE_GENS[disassociateButtonIdx].PULSE_GEN_ID);
}$disassociateButtons.click(function(){var $disassociateButton=$(this);
if($disassociateButton.val()===i18n.discernabu.cardiology_device_integration_o2.DISASSOCIATE){thisComponent.addDeviceToDisassociate($disassociateButton.data(pulseGenIdKey));
$disassociateButton.attr("value",i18n.discernabu.cardiology_device_integration_o2.UNDO);
}else{thisComponent.removeDeviceToDisassociate($disassociateButton.data(pulseGenIdKey));
$disassociateButton.attr("value",i18n.discernabu.cardiology_device_integration_o2.DISASSOCIATE);
}});
};
WfPaceMakerComponent.prototype.setDeviceManagementAssociationEvents=function($manualAssociation,$assistedAssociation){var $manualSearchButton=$manualAssociation.find(".pmc2-find-device-btn");
this.setDeviceManagementManualAssociationEvents($manualAssociation);
$manualSearchButton.click(function(){$assistedAssociation.hide();
});
};
WfPaceMakerComponent.prototype.setDeviceManagementManualAssociationEvents=function($manualAssociation){var thisComponent=this;
this.postProcessingSearchDevice(this,$manualAssociation,function(deviceId,reply){var $deviceManagementDialog=$("div#"+thisComponent.getManageDevicesDialogId()+"body"),$manualAssociationPanel=$deviceManagementDialog.find(".pmc2-search-device-content-manage-dev"),$associationButton=$manualAssociationPanel.find(".pmc2-associate-device-button"),$disassociation=$deviceManagementDialog.find(".pmc2-manage-dev-disassociation"),$undoButton,$devicePanel,deviceInfo,devicePID;
if($associationButton.length===0){deviceInfo=reply.getResponse().PULSE_GENS[0];
devicePID={SEX_CDF:deviceInfo.SEX_CDF,BIRTH_DT_TM_TXT:deviceInfo.BIRTH_DT_TM_TXT,SERIAL_TXT:deviceInfo.SERIAL_TXT,NAME_LAST:deviceInfo.NAME_LAST,NAME_FIRST:deviceInfo.NAME_FIRST};
$devicePanel=$(thisComponent.constructDevicePanel(devicePID,i18n.discernabu.cardiology_device_integration_o2.ASSOCIATE,undefined,true));
$associationButton=$devicePanel.find(".pmc2-associate-device-button");
$manualAssociationPanel.find(".pmc2-search-results").empty();
}$associationButton.data("pulseGenId",deviceId);
if($associationButton.val()===i18n.discernabu.cardiology_device_integration_o2.ASSOCIATE){thisComponent.onClickDeviceManagementAssociationButton($associationButton,$disassociation);
$undoButton=$associationButton;
$undoButton.click(function(){thisComponent.onClickDeviceManagementUndoButton($undoButton,$manualAssociationPanel.find(".pmc2-search-results"));
});
}});
};
WfPaceMakerComponent.prototype.setDeviceManagementAssistedAssociationEvents=function($assistedAssociation,$disassociation){var thisComponent=this,$associateButtons=$assistedAssociation.find(".pmc2-associate-device-button"),associateButtonsCount=$associateButtons.length,associateButtonIdx,$associateButton;
for(associateButtonIdx=0;
associateButtonIdx<associateButtonsCount;
associateButtonIdx++){$associateButton=$associateButtons.eq(associateButtonIdx);
$associateButton.data("pulseGenId",this.suggestedMatchPulseGenIDs[associateButtonIdx]);
$associateButton.click({scope:$associateButton,thisComponent:thisComponent,$assistedAssociation:$assistedAssociation,$disassociation:$disassociation},thisComponent.setAssociateButtonClickHandler);
}};
WfPaceMakerComponent.prototype.setAssociateButtonClickHandler=function(eventData){var $associateButton=eventData.data.scope,$assistedAssociation=eventData.data.$assistedAssociation,$disassociation=eventData.data.$disassociation,thisComponent=eventData.data.thisComponent;
if($associateButton.val()===i18n.discernabu.cardiology_device_integration_o2.ASSOCIATE){thisComponent.onClickDeviceManagementAssociationButton($associateButton,$disassociation);
}else{thisComponent.onClickDeviceManagementUndoButton($associateButton,$assistedAssociation);
}};
WfPaceMakerComponent.prototype.onClickDeviceManagementAssociationButton=function($addDeviceButton,$disassociation){var $devicePanel,selectedClass="pmc2-manage-dev-association-selected";
if($addDeviceButton.hasClass(selectedClass)===false){$devicePanel=$addDeviceButton.parents(".pmc2-search-output");
$addDeviceButton.addClass(selectedClass).attr("value",i18n.discernabu.cardiology_device_integration_o2.UNDO);
this.addDeviceToAssociate($addDeviceButton.data("pulseGenId"));
$devicePanel.detach();
$disassociation.append($devicePanel);
}};
WfPaceMakerComponent.prototype.onClickDeviceManagementUndoButton=function($addDeviceButton,$undoTarget){var $devicePanel=$addDeviceButton.parents(".pmc2-search-output"),suggestedPulseGenId=$addDeviceButton.data("pulseGenId"),selectedClass="pmc2-manage-dev-association-selected";
$addDeviceButton.removeClass(selectedClass).attr("value",i18n.discernabu.cardiology_device_integration_o2.ASSOCIATE);
this.removeDeviceToAssociate(suggestedPulseGenId);
$devicePanel.detach();
$undoTarget.append($devicePanel);
};
WfPaceMakerComponent.prototype.addDeviceToAssociate=function(deviceId){this.addUniqueToArray(deviceId,this.devicesToAssociate);
};
WfPaceMakerComponent.prototype.removeDeviceToAssociate=function(deviceId){this.removeFromArray(deviceId,this.devicesToAssociate);
};
WfPaceMakerComponent.prototype.addDeviceToDisassociate=function(deviceId){this.addUniqueToArray(deviceId,this.devicesToDisassociate);
};
WfPaceMakerComponent.prototype.removeDeviceToDisassociate=function(deviceId){this.removeFromArray(deviceId,this.devicesToDisassociate);
};
WfPaceMakerComponent.prototype.addUniqueToArray=function(val,arr){if($.inArray(val,arr)===-1){arr.push(val);
}};
WfPaceMakerComponent.prototype.removeFromArray=function(val,arr){var valIdx=$.inArray(val,arr);
if(valIdx!==-1){arr.splice(valIdx,1);
}};
WfPaceMakerComponent.prototype.disableManageDevicesMenuItem=function(){var manageDevices=this.getMenu().m_menuItemArr[0];
manageDevices.setIsDisabled(true);
manageDevices.setClickFunction(function(){});
};
WfPaceMakerComponent.prototype.parseDurationSeconds=function(durationSeconds){var sec,min,hour,days,time1,time2,reducTot;
sec=this.i18n.S_time_label;
min=this.i18n.M_time_label;
hour=this.i18n.H_time_label;
days=this.i18n.D_time_label;
if(durationSeconds<3600){time2=durationSeconds%60;
time1=(durationSeconds-time2)/60;
return time1+min+" "+time2+sec;
}else{if(durationSeconds>=3600&&durationSeconds<86400){reducTot=(durationSeconds-durationSeconds%60)/60;
time2=reducTot%60;
time1=(reducTot-time2)/60;
return time1+hour+" "+time2+min;
}else{if(durationSeconds>=86400){reducTot=(durationSeconds-durationSeconds%3600)/3600;
time2=reducTot%24;
time1=(reducTot-time2)/24;
return time1+days+" "+time2+hour;
}}}};
WfPaceMakerComponent.prototype.constructHoverTable=function(nameCollection,valueCollection){var i,opHTML="";
for(i=0;
i<nameCollection.length;
i++){opHTML+="<tr><td><span class='pmc2-tooltip-labeltext'>"+nameCollection[i]+"</span>: <span class ='pmc2-tooltip-valuetext'>"+valueCollection[i]+"</span></td></tr>";
}return"<table class='pmc2-tooltip'>"+opHTML+"</table>";
};
WfPaceMakerComponent.prototype.constructDeviceInformationPanel=function(pulseGenNum,isHistoricalPanel){var PMData=this.JSONData.PULSE_GENS[pulseGenNum],battery=PMData.BATTERY_MEASUREMENTS[0],batteryVoltage="",ERI="",implantDate=new Date(),opHTML="";
if(isHistoricalPanel===false){if(battery){ERI=battery.RRT_TRIGGER===""?"":"("+battery.RRT_TRIGGER+")";
batteryVoltage=battery.VOLTAGE_VALUE+"v";
}else{batteryVoltage=this.i18n.NO_BATTERY_INFO;
}}opHTML+="<div class='pmc2-device-info'><div class='pmc2-device-header'>"+PMData.MANUFACTURER_DISP+" "+PMData.MODEL_IDENT;
if(isHistoricalPanel===true){opHTML+=" ("+this.i18n.INACTIVE+")";
}opHTML+="</div><div><span class='pmc2-header-label'>"+this.i18n.PACEMAKER_SN+"</span>:<span class='pmc2-header-value'>"+PMData.SERIAL_TXT+"</span></div>";
opHTML+="<div class='pmc2-implant-date'>";
if(PMData.IMPLANT_DT_TM!=="/Date(0000-00-00T00:00:00.000+00:00)/"){implantDate.setISO8601(PMData.IMPLANT_DT_TM);
opHTML+="<span class='pmc2-header-label'>"+this.i18n.IMPLANTED+"</span>:<span class='pmc2-header-value'>"+implantDate.format("longDate")+"</span>";
}opHTML+="</div>";
if(isHistoricalPanel===false){opHTML+="<span class='pmc2-header-label'>"+this.i18n.BATTERY+"</span>:<span class='pmc2-header-value'>"+batteryVoltage+" "+ERI+"</span><br/><span class='pmc2-header-label'>"+this.i18n.DEVICE_MODE+"</span>:<span class='pmc2-header-value'>"+PMData.BRADY_SETTINGS[0].MODE_DISP+"</span>";
}opHTML+="</div>";
return opHTML;
};
WfPaceMakerComponent.prototype.showLinkClick=function(eventData){var self=eventData.data.scope;
var deviceNumStr=this.id.substring(this.id.length-1);
var deviceNum=Number(deviceNumStr);
if(self.linkText[deviceNum]===""){self.linkText[deviceNum]=this.innerHTML;
}if(self.tablesExpandStatus[deviceNum]===false){this.innerHTML=self.i18n.SHOW_FEWER;
self.episodeTable[deviceNum].bindData(self.longEpisodeList[deviceNum]);
self.episodeTable[deviceNum].refresh();
self.tablesExpandStatus[deviceNum]=true;
}else{this.innerHTML=self.linkText[deviceNum];
self.episodeTable[deviceNum].bindData(self.shortEpisodeList[deviceNum]);
self.episodeTable[deviceNum].refresh();
self.tablesExpandStatus[deviceNum]=false;
}return self.tablesExpandStatus[deviceNum];
};
WfPaceMakerComponent.prototype.showHoverData=function(eventData){eventData.data.tooltip.setX(eventData.pageX).setY(eventData.pageY).show();
};
WfPaceMakerComponent.prototype.preProcessing=function(){this.addMenuItems();
};
WfPaceMakerComponent.prototype.addMenuItems=function(){var compMenu,compId,manageDevices;
compMenu=this.getMenu();
compId=this.getComponentId();
if(this.isDisplayable()===true){manageDevices=new MenuSelection("manageDevices"+compId);
manageDevices.setLabel(i18n.discernabu.cardiology_device_integration_o2.MANAGE_DEVICES+"...");
manageDevices.setIsDisabled(true);
compMenu.addMenuItem(manageDevices);
}};
WfPaceMakerComponent.prototype.postProcessingSearchDevice=function(component,$self,associateFunc){var $serialText,$searchDeviceButton,$searchResults,$searchPulseGenId,associateDevice,confirmAssociation,currentPersonId=component.getCriterion().person_id,thisComponent=this,searchDeviceReply;
if(!$self){$self=$("#"+this.m_rootComponentNode.id);
}$serialText=$self.find(component.writeUniqueID("SerialText",component,"#"));
$searchDeviceButton=$self.find(component.writeUniqueID("SearchDeviceButton",component,"#"));
$searchResults=$self.find(component.writeUniqueID("SearchResults",component,"#"));
$searchPulseGenId=$(component.writeUniqueID("DevicePGId",component,"#"));
associateDevice=component.writeUniqueID("AssociateDevice",component,"#");
confirmAssociation=component.writeUniqueID("ConfirmAssociation",component,"#");
if($serialText.data("Loaded")&&$serialText.data("Loaded")===1){return;
}$serialText.data("Loaded",1);
$serialText.blur(function(){if(this.value===""){this.value=i18n.discernabu.cardiology_device_integration_o2.PACEMAKER_SN;
$serialText.css("color","#9f9f9f");
}});
$serialText.focus(function(){if(this.value===i18n.discernabu.cardiology_device_integration_o2.PACEMAKER_SN){this.value="";
$serialText.css("color","#000");
}});
$searchDeviceButton.click(function(){var deviceText=$serialText.val();
if(deviceText!==i18n.discernabu.cardiology_device_integration_o2.PACEMAKER_SN&&deviceText!==""){$searchResults.html("<div></div>");
component.performManualDeviceSearch(deviceText,function(reply){searchDeviceReply=reply;
component.handleSearchDevice(reply);
});
}else{$searchResults.html("<div class='pmc2-device-search-errorMsg'> <span>"+i18n.discernabu.cardiology_device_integration_o2.NO_MATCHES+"</span></div>");
}});
$searchResults.on("click",associateDevice,function(){if(associateFunc){associateFunc($searchPulseGenId.val());
}else{component.updateDeviceAssociation($searchPulseGenId.val(),currentPersonId,function(reply){component.handleAssociate(reply);
});
}});
$searchResults.on("click",confirmAssociation,function(){var confirmAssociationDialog,modalDialogId=component.writeUniqueID("ConfirmAssociationDialog",component,""),assocButton,cancelButton;
confirmAssociationDialog=MP_ModalDialog.retrieveModalDialogObject(modalDialogId);
if(!confirmAssociationDialog){assocButton=new ModalButton("pmc2-confirm-association");
cancelButton=new ModalButton("pmc2-confirm-cancel");
cancelButton.setText(i18n.discernabu.cardiology_device_integration_o2.CANCEL).setIsDithered(false).setCloseOnClick(true);
assocButton.setText(i18n.discernabu.cardiology_device_integration_o2.ASSOCIATE).setIsDithered(false).setCloseOnClick(true).setFocusInd(true).setOnClickFunction(function(){var deviceId=$(component.writeUniqueID("DevicePGId",component,"#")).val();
if(associateFunc){associateFunc(deviceId,searchDeviceReply);
}else{if(deviceId!==""){thisComponent.updateDeviceAssociation(deviceId,currentPersonId,function(reply){component.handleAssociate(reply);
});
}}});
confirmAssociationDialog=new ModalDialog(modalDialogId);
confirmAssociationDialog.setLeftMarginPercentage(33).setRightMarginPercentage(33).setTopMarginPercentage(20).setBottomMarginPercentage(20).setHeaderTitle(i18n.discernabu.cardiology_device_integration_o2.ASSOCIATE_PACEMAKER).setIsBodySizeFixed(false).setIsFooterAlwaysShown(true).addFooterButton(assocButton).addFooterButton(cancelButton);
MP_ModalDialog.addModalDialogObject(confirmAssociationDialog);
}MP_ModalDialog.showModalDialog(modalDialogId);
confirmAssociationDialog.setBodyHTML(component.alreadyAssociatedMessage);
});
};
WfPaceMakerComponent.prototype.postProcessingSuggestedMatches=function(component,$self){var $suggMatchResults,thisComponent=this;
if(!$self){$self=$("#"+this.m_rootComponentNode.id);
}$suggMatchResults=$self.find(".pmc2-sugg-match-results");
if($suggMatchResults.data("Loaded")&&$suggMatchResults.data("Loaded")===1){return;
}$suggMatchResults.data("Loaded",1);
$suggMatchResults.delegate(".pmc2-search-output","click",function(event){if($(event.target).hasClass("pmc2-associate-device-button")){thisComponent.updateDeviceAssociation(component.suggestedMatchPulseGenIDs[$(this).index()],thisComponent.getCriterion().person_id,function(reply){thisComponent.handleAssociate(reply);
});
}});
};
WfPaceMakerComponent.prototype.updateDeviceAssociation=function(pulseGenId,personId,responseHandler,async){var request=new ScriptRequest();
request.setProgramName("PEX_UPDATE_DEVICE_ASSOCIATION").setParameterArray(["^MINE^",pulseGenId+".00",personId+".00"]).setAsyncIndicator(async!==undefined?async:true).setResponseHandler(function(reply){if(responseHandler!==undefined){responseHandler(reply);
}}).performRequest();
};
WfPaceMakerComponent.prototype.activateDevice=function(pulseGenId,responseHandler){var request=new ScriptRequest();
request.setProgramName("PEX_UPDT_DEVICE_REMOVAL_DT_TM").setParameterArray(["^MINE^",pulseGenId+".00","1",""]).setAsyncIndicator(true).setResponseHandler(function(reply){if(responseHandler!==undefined){responseHandler(reply);
}}).performRequest();
};
WfPaceMakerComponent.prototype.writeStandardMessage=function(msg){return"<h3 class='info-hd'><span class='res-normal'>"+msg+"</span></h3><span class='res-none'>"+msg+"</span>";
};
WfPaceMakerComponent.prototype.handleCallbackLogic=function(reply,sZMessage,ZSearchDevice,fSuccess,fZ,fFinally){var component=this;
var errMsg=[];
var opHTML="";
var compId=component.getComponentId();
var pmc2MessageType=MPageControls.AlertMessage.MessageTypes.INFORMATION;
var template=MPageControls.getDefaultTemplates().messageBar;
var pmc2DisclaimerElement;
var disclaimerText="";
if(reply.getStatus()==="S"){if(fSuccess){fSuccess(reply);
}else{if(this.alertMessage!==null){this.alertMessage.close();
}component.retrieveComponentData(component);
}}else{if(reply.getStatus()==="Z"){if(fZ){fZ(reply);
}else{component.dataLoaded=false;
this.disableManageDevicesMenuItem();
if(sZMessage){component.createWfPaceMakerCompDisclaimer(compId);
disclaimerText+="<span>"+sZMessage+"</span>";
pmc2DisclaimerElement=$("#opPacemakerWorflowDisclaimer"+compId);
if(this.alertMessage===null){this.alertMessage=new MPageControls.AlertMessage(pmc2DisclaimerElement,template,pmc2MessageType);
this.alertMessage.render(disclaimerText);
}else{this.alertMessage.getElement().show();
}}opHTML+="<div class = 'pmc2-cardiology-component-body'>";
if(ZSearchDevice&4){opHTML+=component.constructSuggestedMatchesPlaceholder();
}if(ZSearchDevice&1){opHTML+=component.constructDeviceSearch("pmc2-search-device-content-faceup");
}opHTML+="</div>";
component.finalizeComponent(opHTML,component.isLineNumberIncluded()?"(0)":"");
if(ZSearchDevice&2){component.postProcessingSearchDevice(component);
}if(ZSearchDevice&8){component.postProcessingSuggestedMatches(component);
}}}else{MP_Util.LogScriptCallError(component,reply,"master-components.js","handleLoad");
errMsg=component.getErrorMessage(reply);
component.finalizeComponent(MP_Util.HandleErrorResponse(component.getStyles().getNameSpace(),errMsg.join("")),component.isLineNumberIncluded()?"(0)":"");
}}if(fFinally){fFinally(reply);
}};
WfPaceMakerComponent.prototype.createWfPaceMakerCompDisclaimer=function(compId){var pmc2DisclaimerDiv=_g("opPacemakerWorflowDisclaimer"+compId),contentNode=this.getRootComponentNode(),contentNodeHd;
if(pmc2DisclaimerDiv){return;
}pmc2DisclaimerDiv=Util.cep("div",{className:"message-container",id:"opPacemakerWorflowDisclaimer"+compId});
if(contentNode){contentNodeHd=_gbt("H2",contentNode)[0];
Util.ia(pmc2DisclaimerDiv,contentNodeHd);
}};
WfPaceMakerComponent.prototype.getErrorMessage=function(reply){var errorMessage=[],recordData=reply.getResponse(),statusData=recordData.STATUS_DATA,i18nCore=i18n.discernabu,ss=null,subStatusIdx,subStatusLen;
errorMessage.push("<b>",i18nCore.DISCERN_ERROR,"</b><br /><ul><li>",i18nCore.STATUS,": ",reply.status,"</li><li>",i18nCore.REQUEST,": ",reply.requestText,"</li>");
if(statusData.SUBEVENTSTATUS.length&&statusData.SUBEVENTSTATUS.length>0){for(subStatusIdx=0,subStatusLen=statusData.SUBEVENTSTATUS.length;
subStatusIdx<subStatusLen;
subStatusIdx++){ss=statusData.SUBEVENTSTATUS[subStatusIdx];
errorMessage.push("<li>",i18nCore.ERROR_OPERATION,": ",ss.OPERATIONNAME,"</li><li>",i18nCore.ERROR_OPERATION_STATUS,": ",ss.OPERATIONSTATUS,"</li><li>",i18nCore.ERROR_TARGET_OBJECT,": ",ss.TARGETOBJECTNAME,"</li><li>",i18nCore.ERROR_TARGET_OBJECT_VALUE,": ",ss.TARGETOBJECTVALUE,"</li>");
}}else{if(statusData.SUBEVENTSTATUS.length===undefined){ss=statusData.SUBEVENTSTATUS;
errorMessage.push("<li>",i18nCore.ERROR_OPERATION,": ",ss.OPERATIONNAME,"</li><li>",i18nCore.ERROR_OPERATION_STATUS,": ",ss.OPERATIONSTATUS,"</li><li>",i18nCore.ERROR_TARGET_OBJECT,": ",ss.TARGETOBJECTNAME,"</li><li>",i18nCore.ERROR_TARGET_OBJECT_VALUE,": ",ss.TARGETOBJECTVALUE,"</li>");
}}errorMessage.push("</ul>");
return errorMessage;
};
WfPaceMakerComponent.prototype.handleAssociate=function(reply){var component=this;
var msg=i18n.discernabu.cardiology_device_integration_o2.UNABLE_TO_ADD_DEVICE;
component.handleCallbackLogic(reply,msg,1);
};
WfPaceMakerComponent.prototype.handleDisassociate=function(reply){var component=this;
var msg=i18n.discernabu.cardiology_device_integration_o2.UNABLE_TO_REMOVE_DEVICE;
component.handleCallbackLogic(reply,msg,1);
};
WfPaceMakerComponent.prototype.handleLoad=function(reply){var component=reply.getComponent();
var msgSrc=i18n.discernabu.cardiology_device_integration_o2;
var msg=msgSrc.NO_DEVICE+" "+msgSrc.NO_DEVICE_1;
component.handleCallbackLogic(reply,msg,15,component.renderOnCallback,null,function(replyCallBack){if(replyCallBack.getStatus()==="Z"){component.getSuggestedDevicesToAssociate(component.getCriterion().person_id);
}});
};
WfPaceMakerComponent.prototype.getSuggestedDevicesToAssociate=function(personId,responseHandler){var thisComponent=this;
var request=new ScriptRequest();
request.setProgramName("PEX_GET_DEVICES_TO_ASSOCIATE").setParameterArray(["^MINE^","2","1","^^",personId]).setAsyncIndicator(true).setResponseHandler(function(reply){if(responseHandler===undefined){thisComponent.handleLoadingSuggestedMatches(reply);
}else{responseHandler(reply);
}}).performRequest();
};
WfPaceMakerComponent.prototype.performManualDeviceSearch=function(pulseGenSerial,responseHandler){var request=new ScriptRequest();
request.setProgramName("PEX_GET_DEVICES_TO_ASSOCIATE").setParameterArray(["^MINE^","1","1","^"+encodeURIComponent(pulseGenSerial)+"^"]).setAsyncIndicator(true).setResponseHandler(function(reply){if(responseHandler!==undefined){responseHandler(reply);
}}).performRequest();
};
WfPaceMakerComponent.prototype.writeUniqueID=function(name,component,useAsSelector){var compNs=component.getStyles().getNameSpace();
var compId=component.getComponentId();
var start="";
if(useAsSelector){start="#";
}return start+compNs+name+compId;
};
WfPaceMakerComponent.prototype.handleLoadingSuggestedMatches=function(reply){var suggmatchVal,i18nCore=i18n.discernabu.cardiology_device_integration_o2,component=this;
component.handleCallbackLogic(reply,"",0,function(replyCallbackLogic){suggmatchVal=component.populateSuggestedMatches(replyCallbackLogic);
},function(){suggmatchVal="<div class = 'pmc2-no-results-errorMsg'><b>"+i18nCore.NO_DEVICE+"</b><br />"+i18nCore.NO_DEVICE_1+"</div>";
},function(){$(".pmc2-sugg-match-results").html(suggmatchVal);
});
};
WfPaceMakerComponent.prototype.renderOnCallback=function(reply){var recordData=reply.getResponse(),component=reply.getComponent(),renderTimer=null,i18nCore=i18n.discernabu,secTitle;
try{renderTimer=MP_Util.CreateTimer(component.getComponentRenderTimerName(),component.getCriterion().category_mean);
secTitle=Util.Style.g("sec-total",component.getRootComponentNode(),"span");
secTitle[0].innerHTML=i18nCore.RENDERING_DATA+"...";
component.renderComponent(recordData);
}catch(err){MP_Util.LogJSError(err,component,"master-components.js","handleLoad");
if(renderTimer){renderTimer.Abort();
renderTimer=null;
}throw err;
}finally{if(renderTimer){renderTimer.Stop();
}}};
WfPaceMakerComponent.prototype.constructDeviceSearch=function(containerClass){var opHTML,i18nCardiology=i18n.discernabu.cardiology_device_integration_o2;
opHTML="<div class='"+containerClass+"'>   <div id='pmc2-search-device-section'>       <div class = 'pmc2-matching-device-title'>"+i18nCardiology.MANUAL_ASSOCIATION+":       </div>       <div class='pmc2-search-device-inputs'>           <div class='pmc2-manual-search-input'>              <input type='text' name='pmc2-serial-text' id='"+this.writeUniqueID("SerialText",this,"")+"' class='pmc2-device-serial-text' value='"+i18nCardiology.PACEMAKER_SN+"'>           </div>           <div class='pmc2-manual-search-button'>               <input type='button' name='pmc2-search-device-button' id='"+this.writeUniqueID("SearchDeviceButton",this,"")+"' class='pmc2-find-device-btn' value='"+i18nCardiology.FIND+"' />           </div>           <input type='hidden' name='pmc2-search-device-pg-id' id='"+this.writeUniqueID("DevicePGId",this,"")+"' value='' />           <input type='hidden' name='pmc2-search-device-pers-id' id='"+this.writeUniqueID("PersonId",this,"")+"' value='' />           <input type='hidden' name='pmc2-search-device-alias' id='"+this.writeUniqueID("DeviceAlias",this,"")+"' value='' />           <input type='hidden' name='pmc2-search-device-alias-type' id='"+this.writeUniqueID("DeviceAliasType",this,"")+"' value='' />           <input type='hidden' name='pmc2-confirm-message' id='"+this.writeUniqueID("confirmMessage",this,"")+"' value='' />       </div>   </div>   <div id='"+this.writeUniqueID("SearchResults",this,"")+"' class='pmc2-search-results'></div></div>";
return opHTML;
};
WfPaceMakerComponent.prototype.constructSuggestedMatchesPlaceholder=function(){var opHTML="<div class='pmc2-sugg-match-content'>   <div class='pmc2-sugg-match-section'>       <div class='pmc2-matching-device-title'>"+i18n.discernabu.cardiology_device_integration_o2.POSSIBLE_MATCHES+"       </div>   </div>   <div class='pmc2-sugg-match-results'></div></div>";
return opHTML;
};
WfPaceMakerComponent.prototype.populateSuggestedMatches=function(reply){var jsonData=reply.getResponse().PULSE_GENS,suggmatchVal="",suggmatchIdx=0,i18nCardiology=i18n.discernabu.cardiology_device_integration_o2;
for(suggmatchIdx=0;
suggmatchIdx<jsonData.length;
suggmatchIdx++){suggmatchVal+=this.constructDevicePanel(jsonData[suggmatchIdx],i18nCardiology.ASSOCIATE,undefined);
this.suggestedMatchPulseGenIDs[suggmatchIdx]=parseInt(jsonData[suggmatchIdx].PULSE_GEN_ID,10);
}return suggmatchVal;
};
WfPaceMakerComponent.prototype.formatDOB=function(dbDOB){var printPatientDOB=dbDOB.substring(4,6)+"/"+dbDOB.substring(6,8)+"/"+dbDOB.substring(0,4);
return printPatientDOB;
};
WfPaceMakerComponent.prototype.handleSearchDevice=function(reply){var compNs=this.getStyles().getNameSpace(),compId=this.getComponentId(),jsonData,searchResultVal="",pulseGenId="",replyStatus=reply.getStatus(),existingPersonId="",existingPersonAlias="",existingPersonAliasType="",existingPatientFullName="",existingFullAlias="";
if(replyStatus==="S"){jsonData=reply.getResponse().PULSE_GENS;
pulseGenId=parseInt(jsonData[0].PULSE_GEN_ID,10);
existingPersonId=parseInt(jsonData[0].PERSON_ID,10);
existingPersonAlias=jsonData[0].MRN_NUMBER;
existingPersonAliasType=jsonData[0].MRN_TYPE;
existingPatientFullName=jsonData[0].EXISTING_NAME;
if(existingPersonAlias!==""&&existingPersonAliasType!==""){existingFullAlias=" ("+existingPersonAliasType+": "+existingPersonAlias+"). ";
}if(existingPersonId===""||existingPersonId==="0"||existingPersonId===0){searchResultVal=this.constructDevicePanel(jsonData[0],i18n.discernabu.cardiology_device_integration_o2.ASSOCIATE,compNs+"AssociateDevice"+compId);
}else{this.alreadyAssociatedMessage="<div class='pmc2-search-info-icon'>   <img src='"+this.getCriterion().static_content+"/images/4017_24.png' alt='information'/></div>";
if(existingPersonAlias===""){this.alreadyAssociatedMessage+="<div class='pmc2-associate-info-text'>"+i18n.discernabu.cardiology_device_integration_o2.ASSOCIATION_WARNING_NO_MRN.replace("{0}",existingPatientFullName);
}else{this.alreadyAssociatedMessage+="<div class='pmc2-associate-info-text'>"+i18n.discernabu.cardiology_device_integration_o2.ASSOCIATION_WARNING.replace("{0}",existingPatientFullName).replace("{1}",existingPersonAliasType).replace("{2}",existingPersonAlias);
}searchResultVal=this.alreadyAssociatedMessage+"<br/><a id='"+compNs+"ConfirmAssociation"+compId+"'>"+i18n.discernabu.cardiology_device_integration_o2.ASSOCIATE_ANYWAY+"</a></div>";
}}else{if(replyStatus==="Z"){searchResultVal="<div class='pmc2-no-results-errorMsg'>   <b>"+i18n.discernabu.cardiology_device_integration_o2.NO_RESULTS_FOUND.replace("{0}",$("#"+compNs+"SerialText"+compId).val())+"</b>   <br />"+i18n.discernabu.cardiology_device_integration_o2.NO_RESULTS_FOUND_1+"</div>";
}else{logger.logScriptCallError(this,reply,"cardiology-device-o2.js","handleSearchDevice");
return;
}}$("#"+compNs+"SearchResults"+compId).html(searchResultVal);
$("#"+compNs+"DevicePGId"+compId).val(pulseGenId);
$("#"+compNs+"PersonId"+compId).val(existingPersonId);
$("#"+compNs+"PersonFullName"+compId).val(existingPatientFullName);
$("#"+compNs+"DeviceAlias"+compId).val(existingPersonAlias);
$("#"+compNs+"DeviceAliasType"+compId).val(existingPersonAliasType);
$("#"+compNs+"confirmMessage"+compId).val(existingPatientFullName+existingFullAlias);
};
MP_Util.setObjectDefinitionMapping("WF_PACE_SUMMARY",WfPaceMakerComponent);
