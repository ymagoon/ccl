function DocumentationView(){this.m_namespace="";
this.m_id="";
this.m_rendered=false;
this.m_component=null;
this.m_viewElementId="";
return this;
}DocumentationView.prototype.finalize=function(){};
DocumentationView.prototype.getViewElementId=function(){if(!this.m_viewElementId){this.m_viewElementId=this.getNamespace()+":"+this.getId();
}return this.m_viewElementId;
};
DocumentationView.prototype.show=function(){$(document.getElementById(this.getViewElementId())).show();
};
DocumentationView.prototype.hide=function(){$(document.getElementById(this.getViewElementId())).hide();
};
DocumentationView.prototype.isRendered=function(){return this.m_rendered;
};
DocumentationView.prototype.setIsRendered=function(isRendered){this.m_rendered=isRendered;
};
DocumentationView.prototype.render=function(data){};
DocumentationView.prototype.refresh=function(){};
DocumentationView.prototype.setNamespace=function(namespace){if(typeof namespace!=="string"){throw new Error("Called setNamespace on DocumentationView with incorrect type, expecting string.");
}this.m_namespace=namespace;
return this;
};
DocumentationView.prototype.getNamespace=function(){return this.m_namespace;
};
DocumentationView.prototype.setId=function(id){if(typeof id!=="string"){throw new Error("Called setId on DocumentationView with incorrect type, expecting string.");
}this.m_id=id;
return this;
};
DocumentationView.prototype.getId=function(){return this.m_id;
};
DocumentationView.prototype.getComponent=function(){return this.m_component;
};
DocumentationView.prototype.setComponent=function(component){if(typeof component!=="object"){throw new Error("Called setComponent on DocumentationView with incorrect type, expecting object.");
}this.m_component=component;
return this;
};
function FreeTextDocumentationView(){}FreeTextDocumentationView.prototype=new DocumentationView();
FreeTextDocumentationView.prototype.constructor=DocumentationView;
FreeTextDocumentationView.prototype.getViewElementId=function(){var editor=this.getEditor();
if(!this.m_viewElementId&&editor){this.m_viewElementId=editor.container.$.id;
}return this.m_viewElementId;
};
FreeTextDocumentationView.prototype.getEditor=function(){return this.getComponent().getEditorInstance();
};
FreeTextDocumentationView.prototype.render=function(recordData){this.m_component.renderComponent(recordData);
this.m_viewElementId=null;
};
FreeTextDocumentationView.prototype.finalize=function(){var component=this.m_component;
window.setTimeout(function(){component.createTextEditor($("#"+component.getStyles().getContentId()+" .documentation-content")[0]);
},0);
};
FreeTextDocumentationView.prototype.resize=function(availableHeight){var editor=this.getEditor();
if(editor){editor.fire("updateEditorMaxHeight",{maxHeight:availableHeight});
}};
function StructureDocumentationView(){this.m_structureOrganizer=null;
this.m_saveButton=null;
this.m_$viewContainer=null;
this.m_$addTemplateButton=null;
this.m_$questionContainer=null;
this.m_$structureContainer=null;
this.m_$structureOrganizerContents=null;
this.m_$questionContents=null;
this.m_$messageContainer=null;
this.m_structureData=null;
this.m_questionData=null;
this.m_activityData=null;
this.m_replyData=null;
this.m_questionSet=null;
this.m_answers=null;
return this;
}StructureDocumentationView.prototype=new DocumentationView();
StructureDocumentationView.prototype.constructor=DocumentationView;
StructureDocumentationView.prototype.getAddTemplateButton=function(){if(!this.m_$addTemplateButton||!this.m_$addTemplateButton.length){this.m_$addTemplateButton=$("#"+this.m_namespace+"AddTemplateButton");
}return this.m_$addTemplateButton;
};
StructureDocumentationView.prototype.setStatus=function(status){if(typeof status!=="string"){throw new Error("StructureDocumentationView.prototype.setStatus expects a string");
}this.m_status=status;
return this;
};
StructureDocumentationView.prototype.setStructureData=function(structureData){this.m_structureData=structureData;
return this;
};
StructureDocumentationView.prototype.setQuestionData=function(questionData){this.m_questionData=questionData;
return this;
};
StructureDocumentationView.prototype.setActivityData=function(activity){this.m_activityData=activity;
return this;
};
StructureDocumentationView.prototype.setViewContainer=function(viewContainer){if(typeof viewContainer!=="object"){throw new Error("StructureDocumentationView.prototype.setViewContainer expects a jQuery object.");
}this.m_$viewContainer=viewContainer;
return this;
};
StructureDocumentationView.prototype.setQuestionContainer=function(questionContainer){if(typeof questionContainer!=="object"){throw new Error("StructureDocumentationView.prototype.setQuestionContainer expects a jQuery object.");
}this.m_$questionContainer=questionContainer;
return this;
};
StructureDocumentationView.prototype.setQuestionContents=function(questionContents){if(typeof questionContents!=="object"){throw new Error("StructureDocumentationView.prototype.setQuestionContents expects a jQuery object.");
}this.m_$questionContents=questionContents;
return this;
};
StructureDocumentationView.prototype.setAddTemplateButton=function(addTemplateButton){if(typeof addTemplateButton!=="object"){throw new Error("StructureDocumentationView.prototype.setAddTemplateButton expects a jQuery object.");
}this.m_$addTemplateButton=addTemplateButton;
return this;
};
StructureDocumentationView.prototype.setStructureContainer=function(structureContainer){if(typeof structureContainer!=="object"){throw new Error("StructureDocumentationView.prototype.setStructureContainer expects a jQuery object.");
}this.m_$structureContainer=structureContainer;
return this;
};
StructureDocumentationView.prototype.setStructureOrganizerContents=function(structureOrganizerContents){if(typeof structureOrganizerContents!=="object"){throw new Error("StructureDocumentationView.prototype.setStructureOrganizerContents expects a jQuery object.");
}this.m_$structureOrganizerContents=structureOrganizerContents;
return this;
};
StructureDocumentationView.prototype.setMessageContainer=function(messageContainer){if(typeof messageContainer!=="object"){throw new Error("StructureDocumentationView.prototype.setMessageContainer expects a jQuery object.");
}this.m_$messageContainer=messageContainer;
return this;
};
StructureDocumentationView.prototype.getOrganizer=function(){return this.m_structureOrganizer;
};
StructureDocumentationView.prototype.setOrganizer=function(organizer){this.m_structureOrganizer=organizer;
};
StructureDocumentationView.prototype.getSaveButtonElement=function(){if(!this.m_saveButton||!this.m_saveButton.length){this.m_saveButton=$("#"+this.m_namespace+"StructureSaveButton");
}return this.m_saveButton;
};
StructureDocumentationView.prototype.hasQuestions=function(){return this.m_questionData!==null;
};
StructureDocumentationView.prototype.hasStructuredContent=function(){return(this.m_structureData&&this.m_structureData.length>0);
};
StructureDocumentationView.prototype.generateQuestionSet=function(){var self=this;
var questionData=this.m_questionData;
this.m_questionSet=(new JSONStructureOrganizerBuilder().setNamespace(this.m_namespace)).buildQuestionSet(questionData);
this.m_questionSet.setOnCompleteCallback(function(complete){self.getAddTemplateButton().prop("disabled",!complete);
});
return this.m_questionSet;
};
StructureDocumentationView.prototype.onAddTemplateClick=function(){this.getAddTemplateButton().prop("disabled",true);
this.m_answers=this.m_questionSet.getAnswers();
this.completeRefresh();
};
StructureDocumentationView.prototype.completeRefresh=function(){var component=this.m_component;
this.resetReplyData();
if(component.hasMixedContent()||component.hasSectionActivity()){this.openExisting();
}else{this.queryTemplate();
}};
StructureDocumentationView.prototype.openExisting=function(){var self=this;
var component=this.m_component;
var criterion=component.getCriterion();
var userOptionResponses=(this.m_answers&&this.m_answers.length)?'{ "user_option_responses" : { "options": '+this.m_answers+"} }":null;
var parameterArray=["^MINE^","^CLINICAL_EVENT^",component.getEventId()+".0",criterion.person_id+".0",criterion.encntr_id+".0",criterion.position_cd+".0",criterion.ppr_cd+".0","^"+component.getConceptCKI()+"^",criterion.provider_id+".0"];
var openStructureRequest=new ScriptRequest().setProgramName("mp_open_structured_section").setParameterArray(parameterArray).setResponseHandler(function(reply){self.m_answers=null;
self.setReplyData(reply);
self.refresh();
});
if(userOptionResponses){openStructureRequest.setDataBlob(userOptionResponses);
}openStructureRequest.performRequest();
};
StructureDocumentationView.prototype.queryTemplate=function(){var component=this.m_component;
var criterion=component.getCriterion();
var userOptionResponses=(this.m_answers&&this.m_answers.length)?'{ "user_option_responses" : { "options": '+this.m_answers+"} }":null;
var self=this;
var parameterArray=["^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.position_cd+".0",criterion.ppr_cd+".0","^"+component.getConceptCKI()+"^",criterion.provider_id+".0"];
var getStructureTemplateRequest=new ScriptRequest().setProgramName("mp_get_structured_template").setParameterArray(parameterArray).setResponseHandler(function(reply){self.m_answers=null;
self.setReplyData(reply);
self.refresh();
});
if(userOptionResponses){getStructureTemplateRequest.setDataBlob(userOptionResponses);
}getStructureTemplateRequest.performRequest();
};
StructureDocumentationView.prototype.refresh=function(){if(this.m_status!=="S"){this.m_$structureContainer.hide();
this.m_$questionContainer.hide();
this.showStructureErrorMessage(i18n.discernabu.documentation_base.STRUCTURED_DOC_UNAVAILABLE);
return;
}if(this.hasQuestions()){this.m_$structureContainer.hide();
this.m_$messageContainer.hide();
this.showQuestions();
}else{if(this.hasStructuredContent()){this.m_$questionContainer.hide();
this.m_$messageContainer.hide();
this.showStructure();
this.handleMergeActivity();
this.finalizeStructure();
this.m_component.resizeComponent();
}else{this.m_$structureContainer.hide();
this.m_$questionContainer.hide();
this.showStructureErrorMessage(i18n.discernabu.documentation_base.STRUCTURED_TEMPLATES_NOT_FOUND);
}}};
StructureDocumentationView.prototype.showQuestions=function(){var $questionContainer=this.m_$questionContainer;
var questionSet=this.generateQuestionSet();
this.m_$questionContents.html(questionSet.render());
this.getAddTemplateButton().prop("disabled",true);
$questionContainer.show();
};
StructureDocumentationView.prototype.setReplyData=function(reply){this.m_replyData=reply;
var response=reply.getResponse();
var status=reply.getStatus();
var replyJSON=JSON.parse(response.REPLY_JSON);
this.setStatus(status||"F");
this.setStructureData(replyJSON.section_ref||null);
this.setActivityData(replyJSON.section_act||null);
if(replyJSON.user_options){var userOptionsJSON=replyJSON.user_options;
var questionData=userOptionsJSON.length?userOptionsJSON:null;
this.setQuestionData(questionData);
}};
StructureDocumentationView.prototype.resetReplyData=function(){this.m_replyData=null;
this.m_structureData=null;
this.m_activityData=null;
this.m_questionData=null;
};
StructureDocumentationView.prototype.showStructure=function(){this.m_$structureContainer.show();
var component=this.m_component;
var $structureContainer=this.m_$structureOrganizerContents;
var structureData=this.m_structureData;
var docI18N=i18n.discernabu.documentation_base;
if(!structureData||!structureData.length){$structureContainer.append(docI18N.STRUCTURED_TEMPLATES_NOT_FOUND);
return;
}structureData=structureData[0];
var builder=new JSONStructureOrganizerBuilder();
builder.setNamespace(component.getStyles().getId());
builder.setStructureJSON(structureData);
var organizer=builder.buildStructureTree();
this.m_structureOrganizer=organizer;
this.m_saveButton=null;
$structureContainer.html(organizer.renderHtml());
};
StructureDocumentationView.prototype.finalizeStructure=function(){var organizer=this.m_structureOrganizer;
var self=this;
if(!organizer){return;
}organizer.setResizeFunction(function(elements){var maxHeightInPx=parseFloat(self.m_$viewContainer.css("max-height").replace("px",""))-2;
maxHeightInPx-=($("#"+self.m_namespace+"StructureFooter")[0].offsetHeight);
if(organizer.m_isMultiSection){maxHeightInPx-=(elements.rootElement.find(".structure-tab-parent")[0].offsetHeight);
}elements.rootElement.css({"overflow-y":"hidden"});
elements.rootElement.find(".structure-navigator-panel").height((maxHeightInPx)+"px");
elements.rootElement.find(".structure-navigator").css({"max-height":(maxHeightInPx-34)+"px","overflow-y":"auto"});
elements.rootElement.find(".structure-body").css({"max-height":(maxHeightInPx)+"px"});
if(organizer.m_isMultiSection&&organizer.getActiveSection()){organizer.getActiveSection().adjustContentHeight();
}else{organizer.adjustContentHeight();
}});
organizer.setOnDirtyChangeCallback(function(isDirty){self.getSaveButtonElement().prop("disabled",!isDirty);
if(isDirty){self.m_component.setDirty();
}else{self.m_component.resetDirty();
}});
organizer.finalize();
(new CycleStructureTermController()).attach(organizer);
(new InputStructureTermController()).attach(organizer);
(new StructureGroupController()).attach(organizer);
(new YesNoStructureTermController()).attach(organizer);
(new StructureTermGroupController()).attach(organizer);
(new TableTermController()).attach(organizer);
if(organizer.isMultiSection()){var tabController=new StructureTabController();
tabController.attach(organizer);
this.m_tabController=tabController;
}};
StructureDocumentationView.prototype.renderInto=function(element){element.append(this.render());
this.handleMergeActivity();
this.finalize();
};
StructureDocumentationView.prototype.handleMergeActivity=function(){if(!this.m_structureOrganizer||!this.m_activityData){return;
}var updater=new JSONStructureOrganizerBuilder();
updater.update(this.getOrganizer(),this.m_activityData);
this.resetDirty();
};
StructureDocumentationView.prototype.render=function(){this.m_rendered=true;
var docI18N=i18n.discernabu.documentation_base;
var reply=this.m_replyData;
var status=reply.getStatus();
var self=this;
var namespace=this.m_namespace;
var id=this.m_id;
var $structureView=$("<div id='"+namespace+":"+this.getId()+"' class='structured-documentation-view content-body'>");
this.setViewContainer($structureView);
var $questionContainer=$("<div id='"+namespace+"QuestionContainer' class='structure-question-container'></div>").hide();
this.setQuestionContainer($questionContainer);
var $addTemplateButton=$("<button id='"+namespace+"AddTemplateButton' class='structure-add-template-btn' disabled>Add Template(s)</button>");
$addTemplateButton.click(function(){self.onAddTemplateClick();
});
this.setAddTemplateButton($addTemplateButton);
$questionContainer.append($addTemplateButton);
var $infoIcon=$("<div class='structure-question-info-icon'></div>");
$questionContainer.append($infoIcon);
var $questionContents=$("<div id='"+namespace+"QuestionContents' class='structure-question-contents'></div>");
$questionContainer.append($questionContents);
this.setQuestionContents($questionContents);
$structureView.append($questionContainer);
var $structureContainer=$("<div id='"+namespace+"StructureContainer'></div>").hide();
$structureView.append($structureContainer);
this.setStructureContainer($structureContainer);
var $structureOrganizerContents=$("<div id='"+namespace+"StructureOrganizerContents'></div>");
$structureContainer.append($structureOrganizerContents);
this.setStructureOrganizerContents($structureOrganizerContents);
$structureContainer.append("<div id='"+namespace+"StructureFooter' class='structure-organizer-footer'><span class='structure-last-saved-text'>&nbsp</span><button id='"+namespace+"StructureSaveButton' disabled class='structure-save-button'>"+docI18N.STRUCTURED_SAVE+"</button></div>");
var $messageContainer=$("<div id='"+namespace+"StructureMessageContainer'></div>").hide();
$structureView.append($messageContainer);
this.setMessageContainer($messageContainer);
if(status!=="S"){this.showStructureErrorMessage(docI18N.STRUCTURED_DOC_UNAVAILABLE);
return $structureView;
}if(this.hasQuestions()){this.showQuestions();
}else{if(this.hasStructuredContent()){this.showStructure();
}else{this.showStructureErrorMessage(docI18N.STRUCTURED_TEMPLATES_NOT_FOUND);
}}return $structureView;
};
StructureDocumentationView.prototype.showStructureErrorMessage=function(message){this.m_$messageContainer.html(message);
this.m_$messageContainer.show();
};
StructureDocumentationView.prototype.resize=function(){if(this.m_structureOrganizer){this.m_structureOrganizer.resize();
}if(this.m_tabController){this.m_tabController.resize();
}};
StructureDocumentationView.prototype.resetDirty=function(){this.getSaveButtonElement().prop("disabled",true);
this.m_structureOrganizer.resetDirty();
};
StructureDocumentationView.prototype.isDirty=function(){return this.m_structureOrganizer?this.m_structureOrganizer.checkIsDirty():false;
};
StructureDocumentationView.prototype.finalize=function(){var self=this;
this.finalizeStructure();
this.getSaveButtonElement().click(function(){self.m_component.save(function(status){if(status==="S"){self.resetDirty();
}});
});
this.finalizeQuestions();
};
StructureDocumentationView.prototype.finalizeQuestions=function(){var self=this;
this.m_$questionContainer.on("change",".structure-answer-box",function(event){var nodeId=$(this).attr("data-lookup");
var node=self.m_questionSet.getLookup()[nodeId];
if(!node){logger.logWarning("StructureDocumentationView.prototype.finalizeQuestions: could not find answer node with id = "+nodeId);
return;
}node.cycleState();
});
this.m_$questionContainer.on("click",".structure-answer-display",function(event){var nodeId=$(this).attr("data-lookup");
var node=self.m_questionSet.getLookup()[nodeId];
if(!node){logger.logWarning("StructureDocumentationView.prototype.finalizeQuestions: could not find answer node with id = "+nodeId);
return;
}node.cycleState();
$(this).siblings(".structure-answer-box").prop("checked",(node.getState().getValue()?true:false));
});
};
StructureDocumentationView.prototype.show=function(){DocumentationView.prototype.show.call(this);
};
StructureDocumentationView.prototype.restoreNavigation=function(){var organizer=this.m_structureOrganizer;
var activeSection=null;
var activeNavigation=null;
var navigator=null;
var tabController=null;
var $activeTab=null;
var $structureTabWrapper=null;
var miscPadding=8;
var tabPosition=0;
if(!organizer){return;
}if(organizer.isMultiSection()){tabController=this.m_tabController;
activeSection=organizer.getActiveSection();
navigator=activeSection.getNavigator();
if(tabController){$activeTab=tabController.getStructureTabGroup().find(".structure-tab-active").closest(".structure-tab");
$structureTabWrapper=tabController.getStructureTabWrapper();
tabPosition=$activeTab.position().left+$structureTabWrapper.scrollLeft();
$structureTabWrapper.scrollLeft(tabPosition-miscPadding);
}}else{navigator=organizer.getNavigator();
}if(!navigator){return;
}activeNavigation=navigator.getActiveNavigation();
if(!activeNavigation){return;
}activeNavigation.onSelect();
};
function DocumentationBaseComponentStyle(){this.initByNamespace("documentation");
}DocumentationBaseComponentStyle.prototype=new ComponentStyle();
DocumentationBaseComponentStyle.prototype.constructor=ComponentStyle;
function DocumentationBaseComponent(criterion){this.setCriterion(criterion);
this.setStyles(new DocumentationBaseComponentStyle());
this.m_documentationTimerName="MPG.DOCUMENTATION_BASE.O1";
this.setComponentLoadTimerName("USR:"+this.m_documentationTimerName+" - load component");
this.setComponentRenderTimerName("ENG:"+this.m_documentationTimerName+" - render component");
this.setIncludeLineNumber(false);
this.setRefreshEnabled(false);
this.m_loadTimer=null;
this.m_workflowId=0;
this.m_conceptType="";
this.m_conceptCKI="";
this.m_eventId=0;
this.m_docContent="";
this.m_docVersion=0;
this.m_editorInstance=null;
this.m_placeholderText="";
this.m_isDynDocAvailable=false;
this.m_enableStructuredDoc=false;
this.m_hoverEnabled=false;
this.m_emrEnabled=false;
this.m_freetextView=null;
this.m_structureView=null;
this.m_defaultView=null;
this.m_currentView=null;
this.m_isLoadingStructured=false;
this.setScope(2);
this.m_preEMRIsEditorCheck=false;
this.setContextualViewCompatible(true);
}DocumentationBaseComponent.prototype=new MPageComponent();
DocumentationBaseComponent.prototype.constructor=MPageComponent;
DocumentationBaseComponent.VIEWS={FREETEXT:0,STRUCTURE:1};
DocumentationBaseComponent.prototype.getConceptCKI=function(){return this.m_conceptCKI;
};
DocumentationBaseComponent.prototype.setConceptCKI=function(conceptCKI){this.m_conceptCKI=conceptCKI;
};
DocumentationBaseComponent.prototype.getConceptType=function(){return this.m_conceptType;
};
DocumentationBaseComponent.prototype.setConceptType=function(conceptType){this.m_conceptType=conceptType;
};
DocumentationBaseComponent.prototype.setDirty=function(){this.checkPendingSR(true);
};
DocumentationBaseComponent.prototype.resetDirty=function(){this.checkPendingSR(false);
};
DocumentationBaseComponent.prototype.getDocumentationContent=function(){return this.m_docContent;
};
DocumentationBaseComponent.prototype.setDocumentationContent=function(content){this.m_docContent=content;
};
DocumentationBaseComponent.prototype.getDocumentationTimerName=function(){return this.m_documentationTimerName;
};
DocumentationBaseComponent.prototype.setDocumentationTimerName=function(timerName){this.m_documentationTimerName=timerName;
};
DocumentationBaseComponent.prototype.getDocumentationVersion=function(){return this.m_docVersion;
};
DocumentationBaseComponent.prototype.setDocumentationVersion=function(version){this.m_docVersion=version;
};
DocumentationBaseComponent.prototype.getEditorInstance=function(){return this.m_editorInstance;
};
DocumentationBaseComponent.prototype.setEditorInstance=function(editorInstance){this.m_editorInstance=editorInstance;
};
DocumentationBaseComponent.prototype.getEventId=function(){return this.m_eventId;
};
DocumentationBaseComponent.prototype.setEventId=function(eventId){this.m_eventId=eventId;
};
DocumentationBaseComponent.prototype.getFreetextView=function(){return this.m_freetextView;
};
DocumentationBaseComponent.prototype.getPlaceholderText=function(){return this.m_placeholderText;
};
DocumentationBaseComponent.prototype.setPlaceholderText=function(text){this.m_placeholderText=text;
};
DocumentationBaseComponent.prototype.getHoverEnabled=function(){return this.m_hoverEnabled;
};
DocumentationBaseComponent.prototype.setEmrEnabled=function(enabled){this.m_emrEnabled=enabled;
};
DocumentationBaseComponent.prototype.isEmrEnabled=function(){return this.m_emrEnabled;
};
DocumentationBaseComponent.prototype.setHoverEnabled=function(value){this.m_hoverEnabled=value;
};
DocumentationBaseComponent.prototype.getSaveButton=function(){var editor=this.getEditorInstance();
return $("#"+editor.container.$.id+" button.autosave.save");
};
DocumentationBaseComponent.prototype.enableSaving=function(){return this.getSaveButton().removeAttr("disabled");
};
DocumentationBaseComponent.prototype.disableSaving=function(){return this.getSaveButton().attr("disabled","disabled");
};
DocumentationBaseComponent.prototype.getPreEMRIsEditorDirtyCheck=function(){return this.m_preEMRIsEditorCheck;
};
DocumentationBaseComponent.prototype.setPreEMRIsEditorDirtyCheck=function(value){this.m_preEMRIsEditorCheck=value;
};
DocumentationBaseComponent.prototype.reset=function(){var editor=this.getEditorInstance();
if(editor){editor.destroy();
}var structuredView=this.getStructuredView();
if(structuredView){structuredView.setOrganizer(null);
structuredView.setIsRendered(false);
}this.m_freetextView=new FreeTextDocumentationView();
this.m_freetextView.setNamespace(this.getStyles().getId()).setId("freetextView").setComponent(this);
this.m_defaultView=this.m_freetextView;
this.activateHeaderToggle(0);
};
DocumentationBaseComponent.prototype.refreshComponent=function(){this.reset();
MPageComponent.prototype.refreshComponent.call(this);
};
DocumentationBaseComponent.prototype.getPreSaveFunction=function(){var self=this;
var docI18N=i18n.discernabu.documentation_base;
var busyHTML=['<img src="',self.getCriterion().static_content,'/images/6439_16.gif" alt="',docI18N.SAVING,'"/>',docI18N.SAVING].join("");
return function(){self.setLastSaveText(busyHTML);
if(self.m_structureView&&self.m_structureView.getOrganizer()){self.enableMixedContent();
}};
};
DocumentationBaseComponent.prototype.getSaveFunction=function(){var self=this;
return function(documentContent,statusCallback){var structuredView=self.m_structureView;
var organizer=structuredView.getOrganizer();
if(structuredView&&organizer&&organizer.isDirty()){self.saveBoth(documentContent,organizer.convertToJSON(),statusCallback);
}else{self.saveFreetext(documentContent,statusCallback);
}};
};
DocumentationBaseComponent.prototype.getStructuredDocInd=function(){return this.m_enableStructuredDoc;
};
DocumentationBaseComponent.prototype.setStructuredDocInd=function(isEnabled){this.m_enableStructuredDoc=isEnabled;
};
DocumentationBaseComponent.prototype.getStructuredView=function(){return this.m_structureView;
};
DocumentationBaseComponent.prototype.getWorkflowId=function(){return this.m_workflowId;
};
DocumentationBaseComponent.prototype.setWorkflowId=function(workflowId){this.m_workflowId=workflowId;
};
DocumentationBaseComponent.prototype.setTimeZone=function(timeZone){this.m_timeZone=timeZone;
};
DocumentationBaseComponent.prototype.getTimeZone=function(){return this.m_timeZone;
};
DocumentationBaseComponent.prototype.setLoadingStructured=function(isLoading){this.m_isLoadingStructured=isLoading;
};
DocumentationBaseComponent.prototype.isLoadingStructured=function(){return this.m_isLoadingStructured;
};
DocumentationBaseComponent.prototype.preProcessing=function(){var docI18N=i18n.discernabu.documentation_base;
if(this.getStructuredDocInd()){this.setHeaderToggles([{active:"documentation-view-button documentation-view-button-active",inactive:"documentation-view-button",text:docI18N.FREETEXT_VIEW},{active:"documentation-view-button documentation-view-button-no-left-border documentation-view-button-active",inactive:"documentation-view-button documentation-view-button-no-left-border",text:docI18N.STRUCTURE_VIEW}]);
}this.m_freetextView=new FreeTextDocumentationView();
this.m_structureView=new StructureDocumentationView();
this.m_freetextView.setNamespace(this.getStyles().getId()).setId("freetextView").setComponent(this);
this.m_structureView.setNamespace(this.getStyles().getId()).setId("structureView").setComponent(this);
this.m_defaultView=this.m_freetextView;
this.m_currentView=this.m_defaultView;
};
DocumentationBaseComponent.prototype.retrieveComponentData=function(){if(this.getStructuredDocInd()){this.disableHeaderToggle(DocumentationBaseComponent.VIEWS.STRUCTURE);
}this.checkIfDynamicDocumentationIsAvailable();
};
DocumentationBaseComponent.prototype.beginInitialization=function(){var self=this;
var docI18N=i18n.discernabu.documentation_base;
if(!this.m_isDynDocAvailable){this.finalizeComponent(docI18N.DYN_DOC_UNAVAILABLE,"");
return;
}BroadcastDispatcher.subscribe(BroadcastDispatcher.DYN_DOC_REFRESH,function(payload){self.reset();
self.refreshWorkflowInformation();
});
this.initializeWorkflowInformation();
};
DocumentationBaseComponent.prototype.initializeWorkflowInformation=function(){var sendAr=null;
var criterion=this.getCriterion();
var workflowResource=MP_Resources.getSharedResource("documentationWorkflow");
var self=this;
if(workflowResource){CERN_EventListener.addListener(this,"documentationWorkflowAvailable",function(event,dataString){self.processWorkflowInformation(event,dataString);
},this);
if(workflowResource.isResourceAvailable()){this.processWorkflowInformation(null,workflowResource.getResourceData());
}else{workflowResource.retrieveSharedResourceData();
}}else{sendAr=["^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.provider_id+".0"];
workflowResource=MP_Resources.createSharedResourceObj("documentationWorkflow",this,"MP_GET_WORKFLOW",sendAr,"documentationWorkflowAvailable");
if(workflowResource){CERN_EventListener.addListener(this,"documentationWorkflowAvailable",function(event,dataString){self.processWorkflowInformation(event,dataString);
},this);
workflowResource.retrieveSharedResourceData();
}}};
DocumentationBaseComponent.prototype.getDocumentation=function(){var concept=this.getConceptType()?this.getConceptType():(this.getConceptCKI()?this.getConceptCKI():"");
var emrEnabled=this.isEmrEnabled()?1:0;
if(!concept){throw new Error("Attempted to pass an empty string for the concept parameter of the mp_get_dyn_doc_blob_contents script");
}var sendAr=["^MINE^",this.getWorkflowId()+".0","^"+concept+"^",this.getEventId()+".0",emrEnabled];
var loadTimer=new RTMSTimer("ENG:"+this.getDocumentationTimerName()+" - get workflow documentation",this.getCriterion().category_mean);
var self=this;
var getDocumentationRequest=new ScriptRequest().setProgramName("mp_get_dyn_doc_blob_contents").setParameterArray(sendAr).setLoadTimer(loadTimer).setResponseHandler(function(reply){if(reply.getStatus()==="S"){self.handleSuccess(reply.getResponse());
}else{logger.logError("mp_get_dyn_doc_blob_contents failed: unable to get documentation for "+self.getStyles().getNamespace()+self.getComponentId());
self.finalizeComponent(self.generateScriptFailureHTML(),"");
if(self.m_loadTimer){self.m_loadTimer.fail();
self.m_loadTimer=null;
}}});
getDocumentationRequest.performRequest();
};
DocumentationBaseComponent.prototype.renderComponent=function(recordData){var content=null;
var version=0;
var html=null;
var renderTimer=new RTMSTimer(this.getComponentRenderTimerName(),this.getCriterion().category_mean);
renderTimer.start();
try{content=((recordData&&recordData.BLOB_CONTENTS)?recordData.BLOB_CONTENTS:"");
version=((recordData&&recordData.BLOB_VERSION)?recordData.BLOB_VERSION:0);
var contentLowerCase=content.toLowerCase();
var indexContentHTML=contentLowerCase.indexOf("<body>");
var indexEndContentHTML=contentLowerCase.indexOf("</body>");
var modContentBodyHTML=content.substring((indexContentHTML+6),indexEndContentHTML);
content=modContentBodyHTML.replace(/[\n\r]/g,"");
html=['<div class="documentation-content">',content,"</div>"];
this.setDocumentationContent(content);
this.setDocumentationVersion(version);
this.finalizeComponent(html.join(""),"");
}catch(err){var errMsg=["<b>",i18n.JS_ERROR,"</b><br><ul><li>",i18n.MESSAGE,": ",err.message,"</li><li>",i18n.NAME,": ",err.name,"</li><li>",i18n.NUMBER,": ",(err.number&65535),"</li><li>",i18n.DESCRIPTION,": ",err.description,"</li></ul>"];
logger.logError(errMsg.join(""));
this.finalizeComponent(this.generateScriptFailureHTML(),"");
if(renderTimer){renderTimer.fail();
renderTimer=null;
}if(this.m_loadTimer){this.m_loadTimer.fail();
this.m_loadTimer=null;
}throw (err);
}finally{if(renderTimer){renderTimer.stop();
renderTimer=null;
}if(this.m_loadTimer){this.m_loadTimer.stop();
this.m_loadTimer=null;
}}};
DocumentationBaseComponent.prototype.customCKEditorGetUrl=function(resource){if(!CKEDITOR.basePathStaticContent){CKEDITOR.basePathStaticContent=JSON.parse(m_criterionJSON).CRITERION.STATIC_CONTENT+"/ckeditor/";
}if(resource.indexOf(CKEDITOR.basePathStaticContent)==-1&&resource.indexOf("/")!==0){resource=CKEDITOR.basePathStaticContent+resource;
}return resource;
};
DocumentationBaseComponent.prototype.postEditorCleanup=function(){$("#"+this.getStyles().getContentId()+" .documentation-content").remove();
var editor=this.getEditorInstance();
var editableContent=editor.editable().$;
editor.execCommand(DDCMD_SANITIZECONTENT,editableContent);
};
DocumentationBaseComponent.prototype.injectFreeTextElement=function(){var editor=this.getEditorInstance();
var editable=editor.editable();
var $editableArea=$(editor.editable().$);
if(!editable.isReadOnly()){editable.setReadOnly(true);
}this.prepareExistingFreetext();
if($editableArea.children(".ddfreetext").length){return;
}var freetextElement=new CKEDITOR.dom.element("div");
freetextElement.addClass("ddfreetext ddremovable");
freetextElement.setAttribute("dd:btnfloatingstyle","top-right");
freetextElement.setAttribute("contenteditable",true);
if(!this.isEmrEnabled()){editable.moveChildren(freetextElement);
}editable.append(freetextElement);
editor.saveEditorSnapshot();
};
DocumentationBaseComponent.prototype.prepareExistingFreetext=function(){var $freeTextElement=$(this.getEditorInstance().editable().$).find(".ddfreetext");
$freeTextElement.attr({contenteditable:true,"dd:btnfloatingstyle":"top-right"});
this.getEditorInstance().saveEditorSnapshot();
};
DocumentationBaseComponent.prototype.createTextEditor=function(element){var self=this;
var criterionLocale=this.getCriterion().locale_id;
var configObj={};
function replaceEditor(){return function(){var editorInstance=CKEDITOR.replace(element,configObj);
self.setEditorInstance(editorInstance);
editorInstance.on("instanceReady",function(){self.postEditorCleanup();
if(self.hasMixedContent()){editorInstance.setData(self.getDocumentationContent());
var $freetextAreas=$(editorInstance.editable().$).find(".ddfreetext");
$freetextAreas.attr("contenteditable","true");
editorInstance.saveEditorSnapshot();
self.enableMixedContent();
$(editorInstance.editable().$).attr("ddactive",true);
editorInstance.fire("updateStructuredContent");
}else{self.injectFreeTextElement();
}if(self.isEmrEnabled()){self.updateEMRContent();
}editorInstance.resetUndo();
var cernundo=editorInstance.plugins.cernundo;
cernundo.handleBaseSnapshot(editorInstance);
if(self.getStructuredDocInd()){self.enableHeaderToggle(DocumentationBaseComponent.VIEWS.STRUCTURE);
}});
editorInstance.on("structureElementClicked",function(event){if(event.data){self.showStructuredView(event.data);
self.captureNavigationTimer();
}});
editorInstance.on("refreshStateChange",function(){if(editorInstance.refreshState==="stable"){self.postEMRRefresh();
}self.updateSaveButton();
});
editorInstance.on("refreshEmrFail",function(event){self.displayEMRError();
});
editorInstance.on("afterddremovesection",function(){self.handleEmptySections();
});
};
}if(!element||(typeof element.nodeType==="undefined")||element.nodeType!==1){return;
}if((typeof CKEDITOR!=="undefined")&&CKEDITOR){criterionLocale=criterionLocale.toLowerCase();
criterionLocale={fr_fr:"fr",en_us:"en",es_es:"es",de_de:"de",en_gb:"en-gb",pt_br:"pt-br",en_au:"en-au"}[criterionLocale]||"en";
configObj.language=criterionLocale;
configObj.startupFocus=false;
configObj.title="";
configObj.preSaveFunction=this.getPreSaveFunction();
configObj.autosaveFunction=this.getSaveFunction();
configObj.setDirtyFunction=function(component){return function(){component.setDirty();
};
}(this);
configObj.resetDirtyFunction=function(component){return function(){component.resetDirty();
};
}(this);
configObj.canSaveFunction=function(component){return function(){return component.canSave();
};
}(this);
configObj.structuredDocumentationEnabled=this.getStructuredDocInd()?true:false;
configObj.placeholderText=this.getPlaceholderText();
configObj.hoverEnabled=this.getHoverEnabled();
configObj.emrEnabled=this.isEmrEnabled();
configObj.cernGrow_maxHeight=this.getAvailableComponentHeight()||200;
self.customizeEditorConfiguration(configObj);
CKEDITOR.config.customConfig="";
if(CKEDITOR.getUrl!==self.customCKEditorGetUrl){CKEDITOR.getUrl=self.customCKEditorGetUrl;
}CKEDITOR.plugins.initializePlugins(configObj,replaceEditor());
}};
DocumentationBaseComponent.prototype.customizeEditorConfiguration=function(config){return config;
};
DocumentationBaseComponent.prototype.captureNavigationTimer=function(){var capTimer=new CapabilityTimer("CAP:MPG Structured Documentation - Navigate To Structured Element",this.getCriterion().category_mean);
capTimer.addMetaData("rtms.legacy.metadata.1",this.m_reportMean);
capTimer.capture();
};
DocumentationBaseComponent.prototype.enableMixedContent=function(){var editor=this.getEditorInstance();
var editable=editor.editable();
var $editingArea=$(editable.$);
if(!editable.isReadOnly()){editable.setReadOnly(true);
}var wasDirty=editor.isEditorDirty();
var $freeTextAreas=$editingArea.find(".ddfreetext");
var $structuredArea=$editingArea.find(".ddstructuredtext");
var foundStructured=$structuredArea.length>0;
var foundFreetextTop=($freeTextAreas.length>1||($structuredArea.length&&($structuredArea.prev(".ddfreetext").length>0))||($freeTextAreas.length===1&&!foundStructured));
var foundFreetextBottom=$freeTextAreas.length>1||($structuredArea.length&&($structuredArea.next(".ddfreetext").length>0));
var children;
var freetextTopHtml="<div class='ddfreetext ddremoveable' contenteditable='true' dd:btnfloatingstyle='top-right'></div>";
if(!foundFreetextTop){children=$editingArea.children();
if(children.length){$editingArea.children().first().before(freetextTopHtml);
}else{$editingArea.append(freetextTopHtml);
}}if(!foundStructured){$editingArea.find(".ddfreetext:first").after('<div class="ddstructuredtext"></div>');
}if(!foundFreetextBottom){$editingArea.append("<div class='ddfreetext ddremoveable' contenteditable='true' dd:btnfloatingstyle='top-right'></div>");
}if(!wasDirty){editor.saveEditorSnapshot();
}editor.resetUndo();
};
DocumentationBaseComponent.prototype.hasMixedContent=function(){var editor=this.getEditorInstance();
if(editor===null){return false;
}var $editableContainer=$(editor.editable().$);
return $editableContainer.find(".ddstructuredtext").length>0;
};
DocumentationBaseComponent.prototype.updateReadOnlyContent=function(html){var editor=this.getEditorInstance();
var editable=editor.editable();
var $editingArea=$(editable.$);
var $readonlyElement=$editingArea.find(".ddstructuredtext");
var tempContainer=document.createElement("div");
tempContainer.innerHTML=html;
var $structuredText=$(tempContainer).find(".ddstructuredtext");
if($structuredText.length===0){$readonlyElement.html("");
return;
}var ckeditorElement;
if(!$readonlyElement.length){editable.appendHtml($structuredText[0].outerHTML);
ckeditorElement=new CKEDITOR.dom.element("div");
ckeditorElement.addClass("ddfreetext ddremoveable bottom");
ckeditorElement.setAttribute("id",this.getStyles().getId()+"ddFreeTextBottom");
ckeditorElement.setAttribute("contenteditable",true);
ckeditorElement.setHtml("<div></div>");
editable.append(ckeditorElement);
}else{$readonlyElement[0].innerHTML=$structuredText.html();
}$(editor.editable().$).attr("ddactive",true);
editor.fire("updateStructuredContent");
};
DocumentationBaseComponent.prototype.initPendingSR=function(){var srObj=null;
var dataObj={};
var pendingSR=MP_Resources.getSharedResource("pendingDataSR");
if(!pendingSR){srObj=new SharedResource("pendingDataSR");
dataObj.pendingDataObj=CERN_Platform.getDiscernObject("PVFRAMEWORKLINK");
dataObj.pendingDataCompArr=[];
srObj.setIsAvailable(true);
srObj.setResourceData(dataObj);
MP_Resources.addSharedResource("pendingDataSR",srObj);
}else{dataObj=pendingSR.getResourceData();
var idx=dataObj.pendingDataCompArr.length;
while(idx--){if(this.getComponentId()==dataObj.pendingDataCompArr[idx]){dataObj.pendingDataCompArr.splice(idx,1);
break;
}}MP_Resources.setSharedResourceData("pendingDataSR",dataObj);
}dataObj.pendingDataObj.SetPendingData(dataObj.pendingDataCompArr.length===0?0:1);
};
DocumentationBaseComponent.prototype.checkPendingSR=function(pendingInd){var srObj=null;
var dataObj={};
var compId=this.getComponentId();
var srObj=MP_Resources.getSharedResource("pendingDataSR");
if(!srObj){return;
}dataObj=srObj.getResourceData();
var pendingArr=dataObj.pendingDataCompArr;
if(pendingInd){if(pendingArr.join("|").indexOf(compId)===-1){pendingArr.push(compId);
}}else{var idx=pendingArr.length;
while(idx--){if(compId===pendingArr[idx]){pendingArr.splice(idx,1);
break;
}}}dataObj.pendingDataObj.SetPendingData(dataObj.pendingDataCompArr.length===0?0:1);
MP_Resources.setSharedResourceData("pendingDataSR",dataObj);
};
DocumentationBaseComponent.prototype.handleHeaderToggleClick=function(index){if(index===DocumentationBaseComponent.VIEWS.STRUCTURE&&this.m_currentView!==this.m_structureView){this.showStructuredView(null);
}else{if(index===DocumentationBaseComponent.VIEWS.FREETEXT&&this.m_currentView!==this.m_freetextView){this.showFreetextView();
}}};
DocumentationBaseComponent.prototype.disableHeaderToggle=function(toggleIndex){var $headerToggles=$("#"+this.getStyles().getId()).find(".documentation-view-button");
if(toggleIndex<0||toggleIndex>=$headerToggles.length){throw new Error("Attempted to call DocumentationBaseComponent.prototype.disableHeaderToggle with an out-of-range index");
}$($headerToggles[toggleIndex]).prop("disabled",true);
};
DocumentationBaseComponent.prototype.enableHeaderToggle=function(toggleIndex){var $headerToggles=$("#"+this.getStyles().getId()).find(".documentation-view-button");
if(toggleIndex<0||toggleIndex>=$headerToggles.length){throw new Error("Attempted to call DocumentationBaseComponent.prototype.enableHeaderToggle with an out-of-range index");
}$($headerToggles[toggleIndex]).prop("disabled",false);
};
DocumentationBaseComponent.prototype.showFreetextView=function(){var component=this;
var self=this;
var freetextView=this.getFreetextView();
var structuredView=this.getStructuredView();
var editor=this.getEditorInstance();
var structureToggleIndex=DocumentationBaseComponent.VIEWS.STRUCTURE;
if(structuredView.isDirty()){this.disableHeaderToggle(structureToggleIndex);
editor.save(function(status){if(status==="S"){structuredView.hide();
freetextView.show();
self.m_currentView=freetextView;
self.resizeComponent();
structuredView.resetDirty();
}else{self.activateHeaderToggle(structureToggleIndex);
}self.enableHeaderToggle(structureToggleIndex);
});
return;
}structuredView.hide();
freetextView.show();
component.m_currentView=freetextView;
self.resizeComponent();
};
DocumentationBaseComponent.prototype.showStructuredView=function(navigationData){var structureView=this.m_structureView;
var freetextView=this.m_freetextView;
var self=this;
var freeTextToggleIndex=DocumentationBaseComponent.VIEWS.FREETEXT;
var organizer=null;
var updateAndRenderResponse=function(reply){self.setLoadingStructured(false);
var $secContentNode=$(self.getSectionContentNode());
self.enableHeaderToggle(freeTextToggleIndex);
freetextView.hide();
structureView.setReplyData(reply);
if(!structureView.isRendered()){structureView.renderInto($secContentNode);
}self.m_currentView=structureView;
self.resizeComponent();
if(navigationData){self.activateHeaderToggle(DocumentationBaseComponent.VIEWS.STRUCTURE);
if(structureView.getOrganizer()){structureView.getOrganizer().navigateToNode(navigationData);
}}};
var retrieveStructuredData=function(){self.setLoadingStructured(true);
if(self.hasMixedContent()||self.hasSectionActivity()){self.openExistingStructuredSection(updateAndRenderResponse);
}else{self.getStructuredTemplate(updateAndRenderResponse);
}};
if(self.isLoadingStructured()){return;
}var editor=this.getEditorInstance();
if(!structureView.getOrganizer()&&!structureView.isRendered()){this.disableHeaderToggle(freeTextToggleIndex);
if(editor&&editor.isEditorDirty()){editor.save(function(status){if(status==="S"){retrieveStructuredData();
}else{self.enableHeaderToggle(freeTextToggleIndex);
self.activateHeaderToggle(freeTextToggleIndex);
}});
}else{retrieveStructuredData();
}return;
}if(editor.isEditorDirty()){this.disableHeaderToggle(freeTextToggleIndex);
editor.save(function(status){if(status==="S"){structureView.show();
self.m_freetextView.hide();
self.m_currentView=structureView;
self.resizeComponent();
organizer=structureView.getOrganizer();
if(organizer){organizer.clearHighlighter();
}if(navigationData){self.activateHeaderToggle(DocumentationBaseComponent.VIEWS.STRUCTURE);
if(organizer){organizer.navigateToNode(navigationData);
}}else{structureView.restoreNavigation();
}}else{self.activateHeaderToggle(freeTextToggleIndex);
}self.enableHeaderToggle(freeTextToggleIndex);
});
}else{structureView.show();
this.m_freetextView.hide();
this.m_currentView=structureView;
this.resizeComponent();
organizer=structureView.getOrganizer();
if(organizer){organizer.clearHighlighter();
}if(navigationData){self.activateHeaderToggle(DocumentationBaseComponent.VIEWS.STRUCTURE);
if(organizer){organizer.navigateToNode(navigationData);
}}else{structureView.restoreNavigation();
}}};
DocumentationBaseComponent.prototype.hasSectionActivity=function(){var eventId=this.getEventId();
var hasActivity=false;
var activityData=null;
var hasActivityRequest=new ScriptRequest().setProgramName("mp_check_sdoc_section").setParameterArray(["^MINE^",eventId+".0"]).setAsyncIndicator(false).setResponseHandler(function(reply){if(reply.getStatus()!=="S"){return;
}activityData=reply.getResponse();
hasActivity=(activityData.SDOC_RESULTS&&activityData.SDOC_RESULTS.length>0);
});
hasActivityRequest.performRequest();
return hasActivity;
};
DocumentationBaseComponent.prototype.isStaleWorkflow=function(){var self=this;
var isStale=true;
var criterion=this.getCriterion();
var parameterArray=["^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.provider_id+".0"];
var loadTimer=new RTMSTimer("ENG:"+this.getDocumentationTimerName()+" - is stale workflow",criterion.category_mean);
var isStaleRequest=new ScriptRequest().setProgramName("MP_GET_WORKFLOW").setParameterArray(parameterArray).setAsyncIndicator(false).setLoadTimer(loadTimer).setResponseHandler(function(reply){var data=null;
var componentsList=null;
var concept=self.getConceptType();
var conceptCKI=self.getConceptCKI();
var i=0;
var componentRef=null;
if(reply.getStatus()==="S"){data=reply.getResponse();
if(data){if(data.WORKFLOW_ID!==self.getWorkflowId()){return;
}componentsList=data.COMPONENTS;
for(i=componentsList.length;
i--;
){componentRef=componentsList[i];
var componentConceptCKI=componentRef.CONCEPT_CKI;
if(componentConceptCKI&&(componentConceptCKI===conceptCKI)){if(self.getEventId()!==componentRef.EVENT_ID){return;
}break;
}else{if(concept&&concept===componentRef.CONCEPT){if(self.getEventId()!==componentRef.EVENT_ID){return;
}break;
}}}isStale=false;
}}else{logger.logError("No workflow information was found.");
}});
isStaleRequest.performRequest();
return isStale;
};
DocumentationBaseComponent.prototype.setLastSaveText=function(lastSaveText){var lastSavedElement=$(this.getSectionContentNode()).find(".cke .last-saved-text");
if(lastSavedElement.length===0){$(this.getSectionContentNode()).find(".cke .autosave.save").after('<div class="last-saved-text">'+(lastSaveText?lastSaveText:"&nbsp;")+"</div>");
}else{$(this.getSectionContentNode()).find(".cke .last-saved-text").html((lastSaveText?lastSaveText:"&nbsp;"));
}var view=this.m_structureView;
var organizer=view?view.getOrganizer():null;
if(organizer){$("#"+view.getNamespace()+"StructureFooter .structure-last-saved-text").html(lastSaveText);
}};
DocumentationBaseComponent.prototype.escapeSymbols=function(html){return html.replace(/[$]/g,"&#36;").replace(/\^/g,"&#94;");
};
DocumentationBaseComponent.prototype.save=function(statusCallback){var component=this;
var docI18N=i18n.discernabu.documentation_base;
var busyHTML=['<img src="',component.getCriterion().static_content,'/images/6439_16.gif" alt="',docI18N.SAVING,'"/>',docI18N.SAVING].join("");
var editor=this.getEditorInstance();
this.setLastSaveText(busyHTML);
var structuredView=this.m_structureView;
if(structuredView&&structuredView.getOrganizer()){this.enableMixedContent();
this.saveBoth(editor.getAutosaveData(),structuredView.getOrganizer().convertToJSON(),statusCallback);
}else{this.saveFreetext(editor.getAutosaveData(),statusCallback);
}};
DocumentationBaseComponent.prototype.saveFreetext=function(content,statusCallback){var self=this;
var lowerCaseBodyHTML=content.toLowerCase();
var indexBodyHTML=lowerCaseBodyHTML.indexOf("<body>");
var indexEndBodyHTML=lowerCaseBodyHTML.indexOf("</body>");
var modifiedBodyHTML=content.substring((indexBodyHTML+6),indexEndBodyHTML);
var finalBodyHTML=modifiedBodyHTML.replace(/[$]/g,"&#36;");
finalBodyHTML=finalBodyHTML.replace(/\^/g,"&#94;");
content=content.replace(modifiedBodyHTML,finalBodyHTML);
if(!CERN_Platform.inMillenniumContext()){content=content.replace(/\u200b/g,"");
content=encodeURIComponent(content);
}var component=this;
var docI18N=i18n.discernabu.documentation_base;
var editor=null;
if(this.isStaleWorkflow()){MP_Util.AlertConfirm(docI18N.REFRESH_REQUIRED_MSG,docI18N.REFRESH_REQUIRED_TITLE,i18n.discernabu.CONFIRM_OK,null,false,null);
editor=component.getEditorInstance();
this.disableSaving();
this.resetDirty();
editor.saveEditorSnapshot();
this.setLastSaveText(null);
return;
}var eventId=component.getEventId();
var version=component.getDocumentationVersion();
var criterion=component.getCriterion();
var parameterArray=["^MINE^",criterion.person_id+".0",criterion.provider_id+".0",criterion.encntr_id+".0",criterion.ppr_cd+".0","^"+this.getConceptType()+"^",this.getWorkflowId()+".0","^^",(eventId!==0?eventId+".0":"0.0"),(version!==0?version+".0":"0.0"),"^"+this.getConceptCKI()+"^"];
var loadTimer=new RTMSTimer("ENG:"+this.getDocumentationTimerName()+" - save workflow documentation");
var saveDocumentationRequest=new ScriptRequest().setProgramName("mp_add_wkf_txt_result").setParameterArray(parameterArray).setLoadTimer(loadTimer).setDataBlob(content).setResponseHandler(function(reply){var response=reply.getResponse();
var componentList=null;
var componentRef=null;
var concept=self.getConceptType();
var conceptCKI=self.getConceptCKI();
var i=0;
var df=null;
var lastSavedText=null;
if(reply.getStatus()==="S"){componentList=response.SUCCEEDED_COMPONENTS;
for(i=componentList.length;
i--;
){componentRef=componentList[i];
var componentConceptCKI=componentRef.CONCEPT_CKI;
var isMatchingComponent=false;
if(componentConceptCKI&&(componentConceptCKI===conceptCKI)){isMatchingComponent=true;
}else{if(concept&&concept===componentRef.COMPONENT_CONCEPT){isMatchingComponent=true;
}}if(isMatchingComponent){self.setEventId(parseFloat(componentRef.EVENT_ID));
self.setDocumentationVersion(parseFloat(componentRef.VERSION_NUMBER));
self.resetDirty();
self.getEditorInstance().saveEditorSnapshot();
df=MP_Util.GetDateFormatter();
lastSavedText=docI18N.LAST_SAVE+df.format(new Date(),mp_formatter.DateTimeFormatter.FULL_DATE_TIME_2YEAR);
self.setLastSaveText(lastSavedText);
if(typeof statusCallback==="function"){statusCallback("S");
}return;
}}}lastSavedText=docI18N.SAVE_FAILED_MSG;
self.setLastSaveText(lastSavedText);
if(typeof statusCallback==="function"){statusCallback("F");
}});
if(!CERN_Platform.inMillenniumContext()){saveDocumentationRequest.execute=function(){if(!this.m_validEntry){throw new Error("ScriptRequest.execute: The execute function should not be called directly.  Please utilize the performRequest function for starting data requests");
}var dataBlob=this.getDataBlob();
var loadTimer=this.getLoadTimer();
var parameterArray=this.getParameterArray();
var programName=this.getProgramName();
this.validateScriptRequestFields();
if(loadTimer){loadTimer.start();
}var request=new XMLHttpRequest();
request.onreadystatechange=this.generateStateChangeHandler();
request.open("POST",programName,this.m_asyncInd);
request.setRequestHeader("Content-type","application/x-www-form-urlencoded");
request.send("parameters="+parameterArray.join(",")+"&blobIn="+dataBlob);
};
}saveDocumentationRequest.performRequest();
};
DocumentationBaseComponent.prototype.saveBoth=function(content,activityJson,statusCallback){var editor=this.getEditorInstance();
var docI18N=i18n.discernabu.documentation_base;
var self=this;
if(this.isStaleWorkflow()){MP_Util.AlertConfirm(docI18N.REFRESH_REQUIRED_MSG,docI18N.REFRESH_REQUIRED_TITLE,i18n.discernabu.CONFIRM_OK,null,false,null);
this.disableSaving();
this.resetDirty();
editor.saveEditorSnapshot();
this.setLastSaveText(null);
return;
}var lowerCaseBodyHTML=content.toLowerCase();
var indexBodyHTML=lowerCaseBodyHTML.indexOf("<body>");
var indexEndBodyHTML=lowerCaseBodyHTML.indexOf("</body>");
var bodyContentHTML=content.substring((indexBodyHTML+6),indexEndBodyHTML);
var tempDiv=document.createElement("div");
tempDiv.innerHTML=bodyContentHTML;
var hasDDFreetext=false;
var topFreetextPortion="";
var $structuredElement=$(tempDiv).find(".ddstructuredtext");
var $topFreeText=$structuredElement.prev(".ddfreetext");
if($topFreeText.length>0){topFreetextPortion=editor.dataProcessor.toDataFormat($topFreeText[0].innerHTML);
topFreetextPortion=this.escapeSymbols(topFreetextPortion);
hasDDFreetext=true;
}var bottomFreetextPortion="";
var $bottomFreeText=$structuredElement.next(".ddfreetext");
if($bottomFreeText.length>0){bottomFreetextPortion=editor.dataProcessor.toDataFormat($bottomFreeText[0].innerHTML);
bottomFreetextPortion=this.escapeSymbols(bottomFreetextPortion);
hasDDFreetext=true;
}if(!hasDDFreetext&&$(tempDiv).find(".ddstructuredtext").length===0&&bodyContentHTML.length>0){topFreetextPortion=bodyContentHTML;
}tempDiv=null;
var component=this;
var eventId=this.getEventId();
var version=this.getDocumentationVersion();
var criterion=this.getCriterion();
var requestJson=['"PARENT_ENTITY_ID" : '+eventId+".0",'"PARENT_ENTITY_NAME" : "CLINICAL_EVENT"','"PARENT_ENTITY_VERSION" : '+version,'"TOP_FREETEXT" : "'+topFreetextPortion.replace(/"/g,'\\"')+'"',activityJson,'"BOTTOM_FREETEXT" : "'+bottomFreetextPortion.replace(/"/g,'\\"')+'"'];
var parameterArray=["^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.provider_id+".0",criterion.provider_id+".0",this.getWorkflowId()+".0",criterion.ppr_cd+".0","^"+this.getConceptType()+"^","~~"];
var activityBlob='{ "ACTIVITY" : {'+requestJson.join(",")+"}}";
if(!CERN_Platform.inMillenniumContext()){activityBlob=activityBlob.replace(/\u200b/g,"");
activityBlob=encodeURIComponent(activityBlob);
}var saveStructureRequest=new ScriptRequest().setProgramName("mp_save_structured_section").setParameterArray(parameterArray).setDataBlob(activityBlob).setResponseHandler(function(reply){var response=reply.getResponse();
var lastSavedText="";
if(reply.getStatus()==="S"){var responseJson=JSON.parse(response.REPLY_JSON);
self.setEventId(parseFloat(responseJson.parent_entity_id));
self.setDocumentationVersion(parseInt(responseJson.parent_entity_version,10));
var organizer=self.m_structureView.getOrganizer();
organizer.clear();
var builder=new JSONStructureOrganizerBuilder();
builder.update(organizer,responseJson.section_act);
component.getStructuredView().resetDirty();
var content=responseJson.generated_text;
var contentLowerCase=content.toLowerCase();
var indexContentHTML=contentLowerCase.indexOf("<body>");
var indexEndContentHTML=contentLowerCase.indexOf("</body>");
var modContentBodyHTML=content.substring((indexContentHTML+6),indexEndContentHTML);
content=modContentBodyHTML;
component.updateReadOnlyContent(content);
self.resetDirty();
editor.saveEditorSnapshot();
var df=MP_Util.GetDateFormatter();
lastSavedText=docI18N.LAST_SAVE+df.format(new Date(),mp_formatter.DateTimeFormatter.FULL_DATE_TIME_2YEAR);
self.setLastSaveText(lastSavedText);
if(typeof statusCallback==="function"){statusCallback("S");
}}else{logger.logError("Failed to save and generate structured text.");
lastSavedText=docI18N.SAVE_FAILED_MSG;
self.setLastSaveText(lastSavedText);
if(typeof statusCallback==="function"){statusCallback("F");
}}});
if(!CERN_Platform.inMillenniumContext()){saveStructureRequest.execute=function(){if(!this.m_validEntry){throw new Error("ScriptRequest.execute: The execute function should not be called directly.  Please utilize the performRequest function for starting data requests");
}var dataBlob=this.getDataBlob();
var loadTimer=this.getLoadTimer();
var parameterArray=this.getParameterArray();
var programName=this.getProgramName();
this.validateScriptRequestFields();
if(loadTimer){loadTimer.start();
}var request=new XMLHttpRequest();
request.onreadystatechange=this.generateStateChangeHandler();
request.open("POST",programName,this.m_asyncInd);
request.setRequestHeader("Content-type","application/x-www-form-urlencoded");
request.send("parameters="+parameterArray.join(",")+"&blobIn="+dataBlob);
};
}saveStructureRequest.performRequest();
};
DocumentationBaseComponent.prototype.getStructuredTemplate=function(callback){var criterion=this.getCriterion();
var parameterArray=["^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.position_cd+".0",criterion.ppr_cd+".0","^"+this.getConceptCKI()+"^",criterion.provider_id+".0"];
var loadTimer=new RTMSTimer("ENG:"+this.getDocumentationTimerName()+" - get structured template",criterion.category_mean);
var structureTemplateRequest=new ScriptRequest().setProgramName("mp_get_structured_template").setParameterArray(parameterArray).setLoadTimer(loadTimer).setResponseHandler(function(reply){if(reply.getStatus()!=="S"){logger.logError("Unable to retrieve the structured documentation template");
}callback(reply);
});
structureTemplateRequest.performRequest();
};
DocumentationBaseComponent.prototype.openExistingStructuredSection=function(callback){var criterion=this.getCriterion();
var parameterArray=["^MINE^","^CLINICAL_EVENT^",this.getEventId()+".0",criterion.person_id+".0",criterion.encntr_id+".0",criterion.position_cd+".0",criterion.ppr_cd+".0","^"+this.getConceptCKI()+"^",criterion.provider_id+".0"];
var loadTimer=new RTMSTimer("ENG:"+this.getDocumentationTimerName()+" - open existing structure",this.getCriterion().category_mean);
var openStructureRequest=new ScriptRequest().setProgramName("mp_open_structured_section").setParameterArray(parameterArray).setLoadTimer(loadTimer).setResponseHandler(function(reply){if(reply.getStatus()!=="S"){logger.logError("Unable to open existing structured section");
}callback(reply);
});
openStructureRequest.performRequest();
};
DocumentationBaseComponent.prototype.processWorkflowInformation=function(event,dataString){var data=null;
var componentsList=null;
var concept=this.getConceptType();
var conceptCKI=this.getConceptCKI();
var i=0;
var componentRef=null;
if(dataString){data=JSON.parse(dataString);
if(data){data=data.RECORD_DATA;
}}if(data){this.setEventId(0);
this.setWorkflowId(data.WORKFLOW_ID);
this.setTimeZone(data.TIME_ZONE);
componentsList=data.COMPONENTS;
for(i=componentsList.length;
i--;
){var componentConceptCKI=componentsList[i].CONCEPT_CKI;
if(componentConceptCKI&&(componentConceptCKI===conceptCKI)){componentRef=componentsList[i];
this.setEventId(componentRef.EVENT_ID);
}else{if(concept&&concept===componentsList[i].CONCEPT){componentRef=componentsList[i];
this.setEventId(componentRef.EVENT_ID);
}}}}this.m_loadTimer=new RTMSTimer(this.getComponentLoadTimerName(),this.getCriterion().category_mean);
this.m_loadTimer.start();
if(this.getEventId()<=0&&!this.isEmrEnabled()){this.handleSuccess(null);
}else{this.getDocumentation();
}};
DocumentationBaseComponent.prototype.handleSuccess=function(recordData){var self=this;
if(CERN_Platform.inMillenniumContext()){this.initPendingSR();
}try{self.m_defaultView.render(recordData,self);
self.m_defaultView.finalize();
}catch(err){var errMsg=["<b>",i18n.JS_ERROR,"</b><br><ul><li>",i18n.MESSAGE,": ",err.message,"</li><li>",i18n.NAME,": ",err.name,"</li><li>",i18n.NUMBER,": ",(err.number&65535),"</li><li>",i18n.DESCRIPTION,": ",err.description,"</li></ul>"];
logger.logError(errMsg.join(""));
this.finalizeComponent(this.generateScriptFailureHTML(),"");
}finally{if(this.m_loadTimer){this.m_loadTimer.stop();
this.m_loadTimer=null;
}}};
DocumentationBaseComponent.prototype.processServiceAvailability=function(serviceData){var serviceDataJSON=JSON.parse(serviceData);
serviceDataJSON=serviceDataJSON.RECORD_DATA;
var status=serviceDataJSON.STATUS_DATA.STATUS;
var hasNecessaryServices=false;
if(status!=="S"){this.m_isDynDocAvailable=false;
}else{hasNecessaryServices=serviceDataJSON.ENSURE_COMPONENT_SERVICE.STATUS==="S"&&serviceDataJSON.GET_WORKFLOW_SERVICE.STATUS==="S";
if(CERN_Platform.inMillenniumContext()){var hasAutoText=(CERN_Platform.getDiscernObject("AUTOTEXTHELPER")!==null);
var hasClipboard=(CERN_Platform.getDiscernObject("CLIPBOARDHELPER")!==null);
var hasSpellcheck=(CERN_Platform.getDiscernObject("SPELLCHECKHELPER")!==null);
var dynDoc=CERN_Platform.getDiscernObject("DYNDOC");
var hasDynDoc=(dynDoc&&("OpenDynDocByWorkflowId" in dynDoc));
this.m_isDynDocAvailable=hasDynDoc&&hasAutoText&&hasClipboard&&hasSpellcheck&&hasNecessaryServices;
}else{this.m_isDynDocAvailable=hasNecessaryServices;
}}this.beginInitialization();
};
DocumentationBaseComponent.prototype.checkIfDynamicDocumentationIsAvailable=function(){var parameterArray=["^MINE^"];
var documentationServiceResource=MP_Resources.getSharedResource("documentationServiceAvailability");
var self=this;
if(documentationServiceResource){CERN_EventListener.addListener(this,"documentationServiceAvailability",function(event,reply){self.processServiceAvailability(reply);
},this);
if(documentationServiceResource.isResourceAvailable()){var serviceInfo=documentationServiceResource.getResourceData();
this.processServiceAvailability(serviceInfo);
}else{documentationServiceResource.retrieveSharedResourceData();
}}else{documentationServiceResource=MP_Resources.createSharedResourceObj("documentationServiceAvailability",this,"MP_CHECK_DYNDOC_SERVICES",parameterArray,"documentationServiceAvailability");
if(documentationServiceResource){CERN_EventListener.addListener(this,"documentationServiceAvailability",function(event,reply){self.processServiceAvailability(reply);
},this);
documentationServiceResource.retrieveSharedResourceData();
}}this.listenForDiagnosisEvents();
this.listenForOrderEvents();
};
DocumentationBaseComponent.prototype.listenForOrderEvents=function(){CERN_EventListener.addListener(this,EventListener.EVENT_ORDER_ACTION,this.onOrderAdded,this);
};
DocumentationBaseComponent.prototype.onOrderAdded=function(){};
DocumentationBaseComponent.prototype.onDiagnosisAdded=function(){var structureView=this.m_structureView;
var editor=this.getEditorInstance();
if(!structureView||!structureView.isRendered()){logger.logMessage("DocumentationBaseComponent.prototype.onDiagnosisAdded: ignoring event, structure has not been loaded");
return;
}if(structureView.isDirty()){editor.save(function(status){if(status==="S"){logger.logMessage("DocumentationBaseComponent.prototype.onDiagnosisAdded: Refreshing the structured documentation view");
structureView.completeRefresh();
}});
}else{logger.logMessage("DocumentationBaseComponent.prototype.onDiagnosisAdded: Refreshing the structured documentation view");
structureView.completeRefresh();
}};
DocumentationBaseComponent.prototype.refreshWorkflowInformation=function(){var workflowResource=MP_Resources.getSharedResource("documentationWorkflow");
if(workflowResource&&workflowResource.isResourceAvailable()){workflowResource.retrieveSharedResourceData();
}};
DocumentationBaseComponent.prototype.resizeComponent=function(){MPageComponent.prototype.resizeComponent.call(this);
if(this.m_currentView&&this.m_currentView.resize){this.m_currentView.resize(this.getAvailableComponentHeight());
}};
DocumentationBaseComponent.prototype.getAvailableComponentHeight=function(){var viewContainer=$("#vwpBody");
if(!viewContainer.length){return 0;
}var miscPadding=22;
var viewHeight=viewContainer.height();
var sectionHeaderElement=this.getRootComponentNode().firstChild;
var sectionHeaderHeight=$(sectionHeaderElement).outerHeight(true);
return viewHeight-sectionHeaderHeight-miscPadding;
};
DocumentationBaseComponent.prototype.updateEMRContent=function(){var editor=this.getEditorInstance();
if(!editor){logger.logMessage("DocumentationBaseComponent.prototype.updateEMRContent: EMR content not updated if editor doesn't exist");
return;
}var version=this.getDocumentationVersion();
var emrRetrievalType=g_sATTRIBUTE_REFRESHING;
if(version<1){emrRetrievalType=g_sATTRIBUTE_INITIALIZING;
}this.populateCKEditorCriteria();
var editable=editor.editable();
var $editableArea=$(editor.editable().$);
var editorIsDirty=editor.isEditorDirty();
this.setPreEMRIsEditorDirtyCheck(editorIsDirty);
if($editableArea.length){editor.execCommand(DDCMD_REFRESHELEMENT,{element:$editableArea,type:emrRetrievalType});
}};
DocumentationBaseComponent.prototype.displayEMRError=function(){var $contentNode=$(this.getSectionContentNode());
var docI18N=i18n.discernabu.documentation_base;
var errorBanner=new MPageUI.AlertBanner();
errorBanner.setType(MPageUI.ALERT_OPTIONS.TYPE.ERROR);
errorBanner.setPrimaryText(docI18N.ERROR_RETRIEVING_DATA);
errorBanner.setSecondaryText(docI18N.CONTACT_SYS_ADMIN);
errorMessageHTML=errorBanner.render();
$contentNode.prepend(errorMessageHTML);
};
DocumentationBaseComponent.prototype.postEMRRefresh=function(){var editor=this.getEditorInstance();
var version=this.getDocumentationVersion();
var editorIsDirtyPrePostUpdate=this.getPreEMRIsEditorDirtyCheck();
var freeTextAreas=$(editor.editable().$).find(".ddfreetext");
var freeTextAreasText=freeTextAreas.text();
var isFreeTextDirty=$.trim(freeTextAreasText).length>0;
editor.resetUndo();
this.handleEmptySections();
if(!editorIsDirtyPrePostUpdate&&version===0&&!isFreeTextDirty){editor.saveEditorSnapshot();
this.resetDirty();
}};
DocumentationBaseComponent.prototype.handleEmptySections=function(){var editor=this.getEditorInstance();
var editable=editor.editable();
var $editableArea=$(editor.editable().$);
var $emrContent=$editableArea.find(".ddemrcontent");
if(!$emrContent.children().length){$editableArea.addClass("documentation-empty-emr");
}else{$editableArea.removeClass("documentation-empty-emr");
}};
DocumentationBaseComponent.prototype.populateCKEditorCriteria=function(){var criterion=this.getCriterion();
CKEDITOR.dPatientId=criterion.person_id;
CKEDITOR.dNoteEncounterId=criterion.encntr_id;
CKEDITOR.dChartEncounterId=criterion.encntr_id;
CKEDITOR.dUserId=criterion.provider_id;
CKEDITOR.lUserTimezone=this.getTimeZone();
CKEDITOR.dPPRCd=criterion.ppr_cd;
CKEDITOR.dWorkflowId=this.getWorkflowId();
};
DocumentationBaseComponent.prototype.canSave=function(){var editor=this.getEditorInstance();
if(editor.refreshState==="refreshing"||!editor.isEditorDirty()){return false;
}return true;
};
DocumentationBaseComponent.prototype.updateSaveButton=function(){if(this.canSave()){this.enableSaving();
}else{this.disableSaving();
}};
