function HIMProceduresComponentStyle(){this.initByNamespace("himproc");
}HIMProceduresComponentStyle.inherits(ComponentStyle);
function HIMProceduresComponent(criterion){this.setCriterion(criterion);
this.setStyles(new HIMProceduresComponentStyle());
this.setComponentLoadTimerName("USR:MPG.HIM_PROCEDURES.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.HIM_PROCEDURES.O1 - render component");
var i18nProcedures=i18n.accesshim.him.procedures;
var nameSpace=this.getStyles().getNameSpace();
function ProcedureSection(displayName,procedureEventSetIdentifiers){var _enabled=true;
var _displayName=displayName;
var _procedureEventSetIdentifiers=procedureEventSetIdentifiers;
function setEnabled(enabled){_enabled=enabled;
}function isEnabled(){return _enabled;
}function setDisplayName(displayName){if(displayName){_displayName=displayName;
}}function getDisplayName(){return _displayName;
}function setProcedureEventSetIdentifiers(procedureEventSetIdentifiers){_procedureEventSetIdentifiers=procedureEventSetIdentifiers;
}function getProcedureEventSetIdentifiers(){return _procedureEventSetIdentifiers;
}function generateHTML(procedureSectionData){if(!isEnabled()||!getProcedureEventSetIdentifiers().length){return"";
}var procedureSectionHTMLArray=[];
procedureSectionHTMLArray.push("<div class='sub-sec'><h5 class='sub-sec-hd'><span class='sub-sec-hd-tgl' title='",i18n.HIDE_SECTION,"'>-</span><span class='sub-sec-title'>",getDisplayName()," (",procedureSectionData.EVENT_SET_QUAL.length,") </span></h5>","<div class='sub-sec-content'>");
procedureSectionHTMLArray.push(generateProcedureHTMLs(procedureSectionData.EVENT_SET_QUAL));
procedureSectionHTMLArray.push("</div></div>");
return procedureSectionHTMLArray.join("");
}function generateProcedureHTMLs(procedureDataSets){var procedureHTMLsArray=[];
for(var procedureIndex=0;
procedureIndex<procedureDataSets.length;
procedureIndex++){procedureHTMLsArray.push(generateProcedureHTML(procedureDataSets[procedureIndex]));
}if(!procedureHTMLsArray.length){procedureHTMLsArray.push("<span class='res-none'>",i18nProcedures.NO_RESULTS_FOUND,"</span>");
}return procedureHTMLsArray.join("");
}function generateProcedureHTML(procedureDataSet){function generateRowHTML(leftLabel,leftValue,rightLabel,rightValue){var rowHTMLArray=["<tr>"];
rowHTMLArray.push("<td class='"+nameSpace+"-label'>",leftLabel,"</td><td class='"+nameSpace+"-text'>",leftValue,"</td>");
rowHTMLArray.push("<td class='"+nameSpace+"-label'>",rightLabel,"</td><td class='"+nameSpace+"-text'>",rightValue,"</td>");
rowHTMLArray.push("</tr>");
return rowHTMLArray.join("");
}function formatTime(timeToFormat){if(!timeToFormat){return"";
}var dateTime=new Date();
dateTime.setISO8601(timeToFormat);
var dateFormatter=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
return dateFormatter.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
}function getDateDiffString(startDateString,endDateString){if(!startDateString||!endDateString){return"";
}var startDate=new Date();
var endDate=new Date();
var diff=new Date();
var HOUR=1000*60*60;
var MINUTE=1000*60;
startDate.setISO8601(startDateString);
endDate.setISO8601(endDateString);
diff.setTime(Math.abs(startDate.getTime()-endDate.getTime()));
var timeDiff=diff.getTime();
hours=Math.floor(timeDiff/HOUR);
timeDiff-=hours*HOUR;
minutes=Math.floor(timeDiff/MINUTE);
timeDiff-=minutes*MINUTE;
if(hours==0&&minutes==0){return"";
}return(hours+"<span class='"+nameSpace+"-small-text'>"+i18nProcedures.HOURS+"</span> "+minutes+"<span class='"+nameSpace+"-small-text'>"+i18nProcedures.MINUTES+"</span>");
}var procedureHTMLArray=[];
procedureHTMLArray.push("<div class='closed'><h6 class='"+nameSpace+"-sec-hd'><span class='sub-sec-hd-tgl "+nameSpace+"-section' title='",i18n.SHOW_SECTION,"'>-</span><span class='sub-sec-title'>",procedureDataSet.PROCEDURE_NAME,"</span></h6>","<div class='sub-sec-content'>");
procedureHTMLArray.push("<table class='"+nameSpace+"'>");
procedureHTMLArray.push(generateRowHTML(i18nProcedures.PROCEDURE_NAME,procedureDataSet.PROCEDURE_NAME,i18nProcedures.PROCEDURE_DATE,formatTime(procedureDataSet.PROCEDURE_DATE)));
procedureHTMLArray.push(generateRowHTML(i18nProcedures.START_DATE,formatTime(procedureDataSet.START_DATE),i18nProcedures.END_DATE,formatTime(procedureDataSet.END_DATE)));
procedureHTMLArray.push(generateRowHTML(i18nProcedures.TOTAL_TIME,getDateDiffString(procedureDataSet.START_DATE,procedureDataSet.END_DATE),i18nProcedures.PROCEDURE_LOCATION,procedureDataSet.PROCEDURE_LOCATION));
procedureHTMLArray.push(generateRowHTML(i18nProcedures.PERFORMING_PHYSICIAN,procedureDataSet.PERFORMING_PHYSICIAN,"&nbsp;","&nbsp;"));
procedureHTMLArray.push("</table></div></div>");
return procedureHTMLArray.join("");
}this.setEnabled=setEnabled;
this.setDisplayName=setDisplayName;
this.getProcedureEventSetIdentifiers=getProcedureEventSetIdentifiers;
this.setProcedureEventSetIdentifiers=setProcedureEventSetIdentifiers;
this.generateHTML=generateHTML;
}var procedureSections=new Array(10);
for(var index=0;
index<10;
index++){procedureSections[index]=new ProcedureSection("Section "+(index+1),[]);
}this.procedureSections=procedureSections;
}HIMProceduresComponent.prototype=new MPageComponent();
HIMProceduresComponent.prototype.constructor=MPageComponent;
HIMProceduresComponent.prototype.loadFilterMappings=function(){for(var i=1;
i<=10;
i++){var filterName="HIM_SECTION"+i+"_IS_ENABLED";
this.addFilterMappingObject(filterName,{setFunction:this.procedureSections[i-1].setEnabled,type:"BOOLEAN",field:"FREETEXT_DESC"});
filterName="HIM_SECTION"+i+"_DISPLAY_NAME";
this.addFilterMappingObject(filterName,{setFunction:this.procedureSections[i-1].setDisplayName,type:"STRING",field:"FREETEXT_DESC"});
filterName="HIM_SECTION"+i+"_PROC_EVENT_SETS";
this.addFilterMappingObject(filterName,{setFunction:this.procedureSections[i-1].setProcedureEventSetIdentifiers,type:"ARRAY",field:"PARENT_ENTITY_ID"});
}};
HIMProceduresComponent.prototype.retrieveComponentData=function(){var criterion=this.getCriterion();
var sendArray=[];
sendArray.push("^MINE^",criterion.person_id+".0",criterion.encntr_id+".0");
for(var section=0;
section<this.procedureSections.length;
section++){sendArray.push(MP_Util.CreateParamArray(this.procedureSections[section].getProcedureEventSetIdentifiers(),1));
}var loadTimer=new RTMSTimer(this.getComponentLoadTimerName(),this.getCriterion().category_mean);
var renderTimer=new RTMSTimer(this.getComponentRenderTimerName(),this.getCriterion().category_mean);
var scriptRequest=new ComponentScriptRequest();
scriptRequest.setProgramName("him_mp_get_procedures");
scriptRequest.setParameterArray(sendArray);
scriptRequest.setComponent(this);
scriptRequest.setLoadTimer(loadTimer);
scriptRequest.setRenderTimer(renderTimer);
scriptRequest.performRequest();
};
HIMProceduresComponent.prototype.renderComponent=function(reply){var procedureSectionHTMLsArray=[];
var procedureSections=this.procedureSections;
for(var index=0;
index<reply.QUAL.length;
index++){procedureSectionHTMLsArray.push(procedureSections[index].generateHTML(reply.QUAL[index]));
}var mainHTMLArray=[];
mainHTMLArray.push("<div class ='",MP_Util.GetContentClass(this)," himproc-outer'>",procedureSectionHTMLsArray.join(""),"</div>");
MP_Util.Doc.FinalizeComponent(mainHTMLArray.join(""),this,"");
};
MP_Util.setObjectDefinitionMapping("HIM_PROCEDURES",HIMProceduresComponent);
