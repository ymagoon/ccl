function GeneticScreeningComponentStyle(){this.initByNamespace("genscr");
}GeneticScreeningComponentStyle.inherits(ComponentStyle);
function GeneticScreeningComponent(criterion){this.setCriterion(criterion);
this.setStyles(new GeneticScreeningComponentStyle());
this.setComponentLoadTimerName("USR:MPG.GeneticScreening.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.GeneticScreening.O1 - render component");
this.setIncludeLineNumber(true);
this.setScope(1);
this.setResultCount(1);
this.setIncludeComments(true);
this.geneticPFId=0;
this.setResourceRequired(true);
GeneticScreeningComponent.method("GSInsertData",function(){CERN_GENETICSCREENING_O1.RetrieveData(this);
});
GeneticScreeningComponent.method("HandleSuccess",function(replyAr,component){CERN_GENETICSCREENING_O1.RenderComponent(component,replyAr[0].getResponse());
});
GeneticScreeningComponent.method("RetrieveRequiredResources",function(){var patientGenderInfo=criterion.getPatientInfo().getSex();
var gsi18n=i18n.discernabu.geneticscreening_o1;
if(patientGenderInfo===null){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+gsi18n.GENDER_UNDEFINED+"</span></h3><span class='res-none'>"+gsi18n.GENDER_UNDEFINED+"</span>";
MP_Util.Doc.FinalizeComponent(messageHTML,this,"(0)");
return;
}var pregInfoObj=null;
pregInfoObj=MP_Resources.getSharedResource("pregnancyInfo");
if(pregInfoObj&&pregInfoObj.isResourceAvailable()){this.GSInsertData();
}else{PREGNANCY_BASE_UTIL_O1.LoadPregnancyData(this.getCriterion());
}});
GeneticScreeningComponent.method("getSelectedPowerform",function(powerFormId){return this.geneticPFId;
});
GeneticScreeningComponent.method("setSelectedPowerform",function(powerFormId){this.geneticPFId=powerFormId;
});
GeneticScreeningComponent.method("openTab",function(){if(this.geneticPFId>0){var criterion=this.getCriterion();
var param=criterion.person_id+"|"+criterion.encntr_id+"|"+this.geneticPFId+"|0|0";
MP_Util.LogMpagesEventInfo(this,"POWERFORM",param,"geneticscreening.js","openDropDown");
MPAGES_EVENT("POWERFORM",param);
this.GSInsertData();
}});
CERN_EventListener.addListener(this,"pregnancyInfoAvailable",this.GSInsertData,this);
}GeneticScreeningComponent.inherits(MeasurementBaseComponent);
var CERN_GENETICSCREENING_O1=function(){function SortGeneticScreening(a,b){return 0;
}return{RetrieveData:function(component){var criterion=component.getCriterion();
var gsi18n=i18n.discernabu.geneticscreening_o1;
var messageHTML="";
var pregInfoObj=null;
var pregInfoSR=MP_Resources.getSharedResource("pregnancyInfo");
var pregnancyId=0;
if(criterion.getPatientInfo().getSex().meaning!=="FEMALE"){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+gsi18n.NOT_FEMALE+"</span></h3><span class='res-none'>"+gsi18n.NOT_FEMALE+"</span>";
MP_Util.Doc.FinalizeComponent(messageHTML,component,"(0)");
return;
}else{if(pregInfoSR&&pregInfoSR.isResourceAvailable()){pregInfoObj=pregInfoSR.getResourceData();
pregnancyId=pregInfoObj.getPregnancyId();
if(pregnancyId===-1){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+gsi18n.PREG_DATA_ERROR+"</span></h3><span class='res-none'>"+gsi18n.PREG_DATA_ERROR+"</span>";
MP_Util.Doc.FinalizeComponent(messageHTML,component,"(0)");
return;
}else{if(!pregnancyId){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+gsi18n.NO_ACTIVE_PREG+"</span></h3><span class='res-none'>"+gsi18n.NO_ACTIVE_PREG+"</span>";
MP_Util.Doc.FinalizeComponent(messageHTML,component,"(0)");
return;
}else{component.InsertData(component);
}}}}},RenderComponent:function(component,recordData){var timerRenderComponent=MP_Util.CreateTimer(component.getComponentRenderTimerName());
try{var sHTML="",countText="";
var ar=[];
var codeArray=MP_Util.LoadCodeListJSON(recordData.CODES);
var personnelArray=MP_Util.LoadPersonelListJSON(recordData.PRSNL);
var measureArray=CERN_MEASUREMENT_BASE_O1.LoadMeasurementDataArray(recordData,personnelArray,codeArray,SortGeneticScreening);
var geneticScreeningi18n=i18n.discernabu.geneticscreening_o1;
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var measLen=measureArray.length;
ar.push("<div class='",MP_Util.GetContentClass(component,measLen),"'>");
for(var i=0,l=measureArray.length;
i<l;
i++){var measObject=measureArray[i];
var display=measObject.getEventCode().display;
var sAffectedPerson=MP_Util.Measurement.GetNormalcyResultDisplay(measObject);
ar.push("<dl class='genscr-info'><dt class='genscr-det-hd'>",geneticScreeningi18n.GENETIC_SCREENING,"</dt><dd class='genscr-name'><span class='row-label'>",display,"</span></dd><dd class='genscr-res'>",sAffectedPerson,"</dd></dl><h4 class='det-hd'><span>",geneticScreeningi18n.GENETIC_SCREENING_DETAILS,"</span></h4><div class='hvr'><dt class='genscr-det-type'><span>",geneticScreeningi18n.GENETIC_DISORDER,":</span></dt><dd class='genscr-result'><span>",display,"</span></dd><dt class='genscr-det-type'><span>",geneticScreeningi18n.AFFECTED_PERSON,":</span></dt><dd class='genscr-result'><span>",sAffectedPerson,"</span></dd><dt class='genscr-det-type'><span>",geneticScreeningi18n.COMMENTS,":</span></dt><dd class='genscr-result'><span>",measObject.getComment(),"</span></dd></div>");
}ar.push("</div>");
sHTML=ar.join("");
countText=MP_Util.CreateTitleText(component,measLen);
var compNS=component.getStyles().getNameSpace();
MP_Util.Doc.FinalizeComponent(sHTML,component,countText);
}catch(err){if(timerRenderComponent){timerRenderComponent.Abort();
timerRenderComponent=null;
}throw (err);
}finally{if(timerRenderComponent){timerRenderComponent.Stop();
}}}};
}();
