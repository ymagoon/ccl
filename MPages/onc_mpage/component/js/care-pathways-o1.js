function CarePathwaysO1ComponentStyle(){this.initByNamespace("cpo");
}CarePathwaysO1ComponentStyle.prototype=new ComponentStyle();
CarePathwaysO1ComponentStyle.prototype.constructor=ComponentStyle;
function CarePathwaysComponentO1(criterion){this.m_allPathways=[];
this.m_suggestedPathways=[];
this.m_prefIdentifier="CPO_NODE_PREFS";
this.m_statusDisplayValues={};
this.setCriterion(criterion);
this.setComponentLoadTimerName("USR:MPG.CPM.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.CPM.O1 - render component");
this.setStyles(new CarePathwaysO1ComponentStyle());
}CarePathwaysComponentO1.prototype=new MPageComponent();
CarePathwaysComponentO1.prototype.constructor=MPageComponent;
CarePathwaysComponentO1.prototype.getAllPathways=function(){return this.m_allPathways;
};
CarePathwaysComponentO1.prototype.getPrefIdentifier=function(){return this.m_prefIdentifier;
};
CarePathwaysComponentO1.prototype.getStatusDisplayValues=function(){return this.m_statusDisplayValues;
};
CarePathwaysComponentO1.prototype.getSuggestedPathways=function(){return this.m_suggestedPathways;
};
CarePathwaysComponentO1.prototype.setAllPathways=function(val){this.m_allPathways=val;
};
CarePathwaysComponentO1.prototype.setPrefIdentifier=function(val){this.m_prefIdentifier=val;
};
CarePathwaysComponentO1.prototype.setSuggestedPathways=function(val){this.m_suggestedPathways=val;
};
CarePathwaysComponentO1.prototype.setStatusDisplayValues=function(val){this.m_statusDisplayValues=val;
};
CarePathwaysComponentO1.prototype.addPathwayActivity=function(pathwayId,instanceId,activityType){var that=this;
var allPathwaysIdx=-1;
var activepathwayIdx=-1;
var allPathways=this.getAllPathways();
var activePathways=this.getActivePathways();
var x;
pathwayId=parseInt(pathwayId,10);
if(["ACTIVE","COMPLETE","VOID"].indexOf(activityType)>-1){if(activityType==="ACTIVE"||(["COMPLETE","VOID"].indexOf(activityType)>-1&&instanceId>0)){for(x=allPathways.length;
x--;
){if(allPathways[x].CP_PATHWAY_ID===pathwayId){allPathwaysIdx=x;
break;
}}if(allPathwaysIdx>-1){for(x=activePathways.length;
x--;
){if(activePathways[x].CP_PATHWAY_ID===pathwayId){activepathwayIdx=x;
break;
}}if(activityType==="ACTIVE"&&activepathwayIdx>-1){var sharedResource=this.getDynamicViewSharedResource(pathwayId);
if(sharedResource){sharedResource.launchDynamicView(pathwayId,instanceId);
}}else{var criterion=this.getCriterion();
var scriptRequest=new ScriptRequest();
scriptRequest.setAsyncIndicator(false);
scriptRequest.setProgramName("CP_ADD_PATHWAY_ACTIVITY");
scriptRequest.setParameterArray(["^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.provider_id+".0",pathwayId,"^"+String(activityType).toUpperCase()+"^",instanceId+".0"]);
scriptRequest.setResponseHandler(function(scriptResponse){if(scriptResponse.getStatus()==="S"){that.applyPathwayActivity(scriptResponse.getResponse());
}else{logger.logJSError("Failure on CP_ADD_PATHWAY_ACTIVITY - "+scriptRequest.getParameterArray().join(","),null,"care-pathways-o1.js","addPathwayActivity");
}});
scriptRequest.performRequest();
return true;
}}else{logger.logJSError("Unable to locate pathway.",null,"care-pathways-o1.js","addPathwayActivity");
return false;
}}else{logger.logJSError("Invalid instance ID.",null,"care-pathways-o1.js","addPathwayActivity");
return false;
}}else{logger.logJSError("Invalid activity type.",null,"care-pathways-o1.js","addPathwayActivity");
return false;
}};
CarePathwaysComponentO1.prototype.applyPathwayActivity=function(response){var actionDtTm=new Date();
var allPathways=this.getAllPathways();
var dateFormatter=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var allPathwaysResource=MP_Resources.getSharedResource("ALL_PATHWAYS");
var pathways=allPathwaysResource.getResourceData();
var sharedResource;
var resourceData;
var x;
var y;
if(response.PATHWAY_STATUS_MEANING==="ACTIVE"){var match=false;
for(x=pathways.length;
x--;
){if(pathways[x].PATHWAY_ACTIVITY_STATUS_MEAN==="ACTIVE"&&pathways[x].CP_PATHWAY_ID===response.CP_PATHWAY_ID){match=true;
break;
}}if(!match){var url="";
var newObj={};
for(x=allPathways.length;
x--;
){if(allPathways[x].CP_PATHWAY_ID===response.CP_PATHWAY_ID){url=allPathways[x].PATHWAY_DIAGRAM_URL;
break;
}}newObj.CP_PATHWAY_ID=response.CP_PATHWAY_ID;
newObj.PATHWAY_NAME=$("#"+response.CP_PATHWAY_ID).find(".cpo-pathway-name").html();
newObj.PATHWAY_INSTANCE_ID=response.PATHWAY_INSTANCE_ID;
newObj.PATHWAY_ACTIVITY_STATUS_MEAN=response.PATHWAY_STATUS_MEANING;
newObj.OFF_PATHWAY_IND=response.OFF_PATHWAY_IND;
newObj.CLINICAL_TRIAL_IND=response.CLINICAL_TRIAL_IND;
newObj.PATHWAY_DIAGRAM_URL=url;
pathways.push(newObj);
}}else{this.updateUserPrefs("REMOVE",response.PATHWAY_INSTANCE_ID);
sharedResource=MP_Resources.getSharedResource("CP_SETTINGS_"+response.CP_PATHWAY_ID);
if(sharedResource){resourceData=sharedResource.getResourceData();
if(resourceData&&resourceData.hasOwnProperty("NODE_LIST")){for(y=resourceData.NODE_LIST.length;
y--;
){var viewContainer=MP_Viewpoint.getViewContainerById(resourceData.NODE_LIST[y].CATEGORY_MEAN);
var tabControlObject=MP_Viewpoint.getTabControlObject();
if(viewContainer){viewContainer.setPreviouslyActivatedInd(false);
$("#"+resourceData.NODE_LIST[y].CATEGORY_MEAN).remove();
}if(tabControlObject){tabControlObject.removeTab(resourceData.NODE_LIST[y].CATEGORY_MEAN);
}}}MP_Resources.setSharedResourceData("CP_SETTINGS_"+response.CP_PATHWAY_ID,null);
}}for(x=pathways.length;
x--;
){if(pathways[x].CP_PATHWAY_ID===response.CP_PATHWAY_ID&&(pathways[x].PATHWAY_INSTANCE_ID===response.PATHWAY_INSTANCE_ID||pathways[x].PATHWAY_INSTANCE_ID===0)){actionDtTm.setISO8601(response.BEG_EFFECTIVE_DT_TM);
pathways[x].PATHWAY_INSTANCE_ID=response.PATHWAY_INSTANCE_ID;
pathways[x].PATHWAY_ACTIVITY_STATUS_MEAN=response.PATHWAY_STATUS_MEANING;
pathways[x].ACTION_DT_TM=dateFormatter.formatISO8601(response.BEG_EFFECTIVE_DT_TM,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
break;
}}MP_Resources.setSharedResourceData("ALL_PATHWAYS",pathways);
this.updateComponentLayout();
if(response.PATHWAY_STATUS_MEANING==="ACTIVE"){sharedResource=this.getDynamicViewSharedResource(response.CP_PATHWAY_ID);
if(sharedResource){sharedResource.launchDynamicView(response.CP_PATHWAY_ID,response.PATHWAY_INSTANCE_ID);
}}};
CarePathwaysComponentO1.prototype.completeOrVoidInstance=function(instanceId,activityType){var scriptRequest=new ScriptRequest();
scriptRequest.setAsyncIndicator(false);
scriptRequest.setResponseHandler(function(){});
if(["COMPLETE","VOID"].indexOf(activityType)>-1){scriptRequest.setProgramName(activityType==="COMPLETE"?"cp_complete_pathway_instance":"cp_void_pathway_instance");
if(instanceId>0){scriptRequest.setParameterArray(["^MINE^",instanceId+".0"]);
scriptRequest.performRequest();
return true;
}else{logger.logJSError("Invalid instance ID.",null,"care-pathways-o1.js","completeOrVoidInstance");
return false;
}}else{logger.logJSError("Invalid activity type.",null,"care-pathways-o1.js","completeOrVoidInstance");
return false;
}};
CarePathwaysComponentO1.prototype.bindEvents=function(){var componentBody=$(this.getSectionContentNode());
componentBody.find(".cpo-section-header").on("click",function(){var element=$(this);
var iconContainer=element.children(".cpo-icon-container");
if(iconContainer.hasClass("cpo-collapsed-icon")||iconContainer.hasClass("cpo-expanded-icon")){iconContainer.toggleClass("cpo-collapsed-icon cpo-expanded-icon");
element.siblings(".cpo-section-details").toggleClass("hidden");
}});
componentBody.find(".cpo-pathway-name-container>.cpo-icon-container").on("click",function(){var element=$(this);
var extraInformation=element.parent().parent().siblings(".cpo-extra-information");
if(element.hasClass("cpo-collapsed-icon")){element.removeClass("cpo-collapsed-icon").addClass("cpo-expanded-icon");
extraInformation.show();
}else{if(element.hasClass("cpo-expanded-icon")){element.removeClass("cpo-expanded-icon").addClass("cpo-collapsed-icon");
extraInformation.hide();
}}});
};
CarePathwaysComponentO1.prototype.findMatchingPathways=function(searchString){var availablePathways=this.getAvailablePathways();
var retVal;
if(searchString===""){retVal=availablePathways;
}else{retVal=$.grep(availablePathways,function(pathway){return(String(pathway.PATHWAY_NAME).toUpperCase().indexOf(String(searchString).toUpperCase())>-1);
});
}return retVal;
};
CarePathwaysComponentO1.prototype.generateActivePathwaysHtml=function(activePathways){var html="";
var x;
var y;
if(activePathways.length===0){html+="<div class='cpo-disabled-text cpo-no-pathways'>"+i18n.discernabu.care_pathways_o1.NO_ACTIVE_PATHWAYS+"</div>";
}else{for(x=0,y=activePathways.length;
x<y;
x++){html+="<div id='"+activePathways[x].CP_PATHWAY_ID+"' instance-id='"+activePathways[x].PATHWAY_INSTANCE_ID+"' class='cpo-overview-row "+(x<activePathways.length-1?"cpo-overview-row-border-bottom":"")+"'><table><tr><td class='cpo-pathway-name-container'><span class='cpo-pathway-name'>"+activePathways[x].PATHWAY_NAME+"</span></td><td class='cpo-pathway-button-container'></td></tr></table></div>";
}}return html;
};
CarePathwaysComponentO1.prototype.generateAvailablePathwaysHtml=function(availablePathways){var html="";
var x;
var y;
if(availablePathways.length===0){html+="<div class='cpo-disabled-text cpo-no-pathways'>"+i18n.discernabu.care_pathways_o1.NO_AVAILABLE_PATHWAYS+"</div>";
}else{for(x=0,y=availablePathways.length;
x<y;
x++){html+="<div id='"+availablePathways[x].CP_PATHWAY_ID+"' class='cpo-overview-row "+(x<availablePathways.length-1?"cpo-overview-row-border-bottom":"")+"'><table><tr><td class='cpo-pathway-name-container'><span class='cpo-pathway-name'>"+availablePathways[x].PATHWAY_NAME+"</span></td><td class='cpo-pathway-button-container'></td></tr></table></div>";
}}return html;
};
CarePathwaysComponentO1.prototype.generateComponentHtml=function(){var componentHtml=[];
var activePathways=this.getActivePathways();
var availablePathways=this.getAvailablePathways();
var availableSuggestedPathways=this.getAvailableSuggestedPathways();
var allPathwaysResource=MP_Resources.getSharedResource("ALL_PATHWAYS");
var pathways=allPathwaysResource.getResourceData();
var pathwaysi18n=i18n.discernabu.care_pathways_o1;
var historicalPathways=$.grep(pathways,function(pathway){return pathway.PATHWAY_ACTIVITY_STATUS_MEAN==="COMPLETE";
});
componentHtml.push("<div class='cpo-section-container'><span class='cpo-half-section cpo-left-section'>");
componentHtml.push("<div class='cpo-search-container'><form class='cpo-search-form' onsubmit='return false'><div id='pwOverviewSearch"+this.getComponentId()+"'></div></form></div>");
componentHtml.push("<div class='cpo-available-pathways cpo-section'><div class='cpo-section-header'>"+pathwaysi18n.AVAILABLE_PATHWAYS+"</div><div class='cpo-section-details'>"+this.generateAvailablePathwaysHtml(availablePathways)+"</div>");
componentHtml.push("</div></span><span class='cpo-half-section cpo-right-section'><div class='cpo-sections'>");
componentHtml.push("<div class='cpo-suggested-pathways cpo-section'><div class='cpo-section-header'><span class='cpo-icon-container'></span>"+pathwaysi18n.SUGGESTED_PATHWAYS+"</div><div class='cpo-section-details'>"+this.generateSuggestedPathwaysHtml(availableSuggestedPathways)+"</div></div>");
componentHtml.push("<div class='cpo-active-pathways cpo-section'><div class='cpo-section-header'><span class='cpo-icon-container'></span>"+pathwaysi18n.ACTIVE_PATHWAYS+"</div><div class='cpo-section-details'>"+this.generateActivePathwaysHtml(activePathways)+"</div></div>");
componentHtml.push("<div class='cpo-historical-pathways cpo-section'><div class='cpo-section-header'><span class='cpo-icon-container'></span>"+pathwaysi18n.HISTORICAL_PATHWAYS+"</div><div class='cpo-section-details'>"+this.generateHistoricalPathwaysHtml(historicalPathways)+"</div></div></div></span></div>");
return componentHtml.join("");
};
CarePathwaysComponentO1.prototype.generateHistoricalPathwaysHtml=function(historicalPathways){var pathwaysi18n=i18n.discernabu.care_pathways_o1;
var html="";
var x;
var y;
if(historicalPathways.length===0){html+="<div class='cpo-disabled-text cpo-no-pathways'>"+pathwaysi18n.NO_HISTORICAL_PATHWAYS+"</div>";
}else{historicalPathways.sort(function(a,b){var date1=new Date(a.ACTION_DT_TM);
var date2=new Date(b.ACTION_DT_TM);
return date1-date2;
});
for(x=0,y=historicalPathways.length;
x<y;
x++){html+="<div id='"+historicalPathways[x].CP_PATHWAY_ID+"' class='cpo-overview-row "+(x<historicalPathways.length-1?"cpo-overview-row-border-bottom":"")+"'><table><tr><td class='cpo-pathway-overview-text'><span class='cpo-pathway-name'>"+historicalPathways[x].PATHWAY_NAME+"</span>&nbsp;<span class='cpo-disabled-text'>-&nbsp;"+pathwaysi18n.COMPLETED+"&nbsp;"+historicalPathways[x].ACTION_DT_TM+"</span></td></tr></ul></td></tr></table></div>";
}}return html;
};
CarePathwaysComponentO1.prototype.generateSuggestedPathwaysHtml=function(suggestedPathways){var pathwaysi18n=i18n.discernabu.care_pathways_o1;
var html="";
var x;
var y;
var i;
var j;
if(suggestedPathways.length===0){html+="<div class='cpo-disabled-text cpo-no-pathways'>"+pathwaysi18n.NO_SUGGESTED_PATHWAYS+"</div>";
}else{for(x=0,y=suggestedPathways.length;
x<y;
x++){html+="<div id='"+suggestedPathways[x].CP_PATHWAY_ID+"' instance-id='"+suggestedPathways[x].PATHWAY_INSTANCE_ID+"' class='cpo-overview-row "+(x<suggestedPathways.length-1?"cpo-overview-row-border-bottom":"")+"'><table><tr><td class='cpo-pathway-name-container'>";
if(suggestedPathways[x].PROPOSED_IND||suggestedPathways[x].QUALIFYING_NOMENCLATURE_CNT>0){html+="<span class='cpo-hover-cursor-pointer cpo-icon-container cpo-collapsed-icon'></span>";
}html+="<span class='cpo-pathway-name'>"+suggestedPathways[x].PATHWAY_NAME+"</span>"+(suggestedPathways[x].PROPOSED_IND?"&nbsp;<span class='cpo-disabled-text'>("+pathwaysi18n.PROPOSED+")</span>":"")+"</td><td class='cpo-pathway-button-container'></tr>";
if(suggestedPathways[x].PROPOSED_IND||suggestedPathways[x].QUALIFYING_NOMENCLATURE_CNT>0){html+="<tr class='cpo-extra-information hidden'><td class='cpo-extra-information-content'>";
if(suggestedPathways[x].PROPOSED_IND>0){html+="<div class='cpo-extra-information-item'><span class='cpo-disabled-text'>"+pathwaysi18n.PROPOSED_BY+":&nbsp;</span>"+suggestedPathways[x].PROPOSED_BY+"</div>";
}else{if(suggestedPathways[x].QUALIFYING_NOMENCLATURE_CNT>0){html+="<div>"+pathwaysi18n.REASON_SUGGESTED+"</div>";
for(i=0,j=suggestedPathways[x].QUALIFYING_NOMENCLATURE_CNT;
i<j;
i++){html+="<div class='cpo-extra-information-item'><span class='cpo-disabled-text'>"+(suggestedPathways[x].QUALIFYING_NOMENCLATURE[i].PROBLEM_IND?pathwaysi18n.PROBLEM:pathwaysi18n.DIAGNOSIS)+":</span> "+suggestedPathways[x].QUALIFYING_NOMENCLATURE[i].NOMENCLATURE_DISPLAY+"</div>";
}}}html+="</td></tr>";
}html+="</table></div>";
}}return html;
};
CarePathwaysComponentO1.prototype.getActivePathways=function(){var allPathwaysResource=MP_Resources.getSharedResource("ALL_PATHWAYS");
var pathways=allPathwaysResource.getResourceData();
return $.grep(pathways,function(pathway){return pathway.PATHWAY_ACTIVITY_STATUS_MEAN==="ACTIVE";
});
};
CarePathwaysComponentO1.prototype.getAvailablePathways=function(){var availablePathways=[];
var allPathways=this.getAllPathways();
var activePathways=this.getActivePathways();
var suggestedPathways=this.getSuggestedPathways();
var idx;
var x;
var y;
for(x=allPathways.length;
x--;
){idx=-1;
for(y=activePathways.length;
y--;
){if(activePathways[y].CP_PATHWAY_ID===allPathways[x].CP_PATHWAY_ID){idx=y;
break;
}}if(idx===-1){for(y=suggestedPathways.length;
y--;
){if(suggestedPathways[y].CP_PATHWAY_ID===allPathways[x].CP_PATHWAY_ID){idx=y;
break;
}}}if(idx===-1){availablePathways.push(allPathways[x]);
}}return availablePathways;
};
CarePathwaysComponentO1.prototype.getAvailableSuggestedPathways=function(){var availableSuggestedPathways=[];
var activePathways=this.getActivePathways();
var suggestedPathways=this.getSuggestedPathways();
var idx;
var x;
var y;
for(x=suggestedPathways.length;
x--;
){idx=-1;
for(y=activePathways.length;
y--;
){if(activePathways[y].CP_PATHWAY_ID===suggestedPathways[x].CP_PATHWAY_ID){idx=y;
break;
}}if(idx===-1){availableSuggestedPathways.push(suggestedPathways[x]);
}}return availableSuggestedPathways;
};
CarePathwaysComponentO1.prototype.getDynamicViewSharedResource=function(pathwayId){var that=this;
var sharedResource=MP_Resources.getSharedResource("CP_DYN_VIEW_"+pathwayId);
var allPathways=this.getAllPathways();
if(!sharedResource){sharedResource=new SharedResource("CP_DYN_VIEW_"+pathwayId);
sharedResource.viewObject=null;
sharedResource.launchDynamicView=function(pathwayID,instanceId,nodeId){var pathwayIdx=-1;
var viewExists=false;
var tabControlObject=MP_Viewpoint.getTabControlObject();
var cpSharedResource=MP_Resources.getSharedResource("CP_SETTINGS_"+pathwayID);
var categoryMean;
var timer;
var x;
for(x=allPathways.length;
x--;
){if(allPathways[x].CP_PATHWAY_ID===parseInt(pathwayID,10)){pathwayIdx=x;
break;
}}if(pathwayIdx>-1){if(cpSharedResource){if(nodeId){var resourceData=cpSharedResource.getResourceData();
if(resourceData){for(x=resourceData.NODE_LIST.length;
x--;
){if(resourceData.NODE_LIST[x].CP_NODE_ID===nodeId){categoryMean=resourceData.NODE_LIST[x].CATEGORY_MEAN;
break;
}}}}}else{cpSharedResource=new SharedResource("CP_SETTINGS_"+pathwayID);
MP_Resources.addSharedResource("CP_SETTINGS_"+pathwayID,cpSharedResource);
}if(!categoryMean){var prefs=that.getPreferencesObj();
if(prefs&&prefs.hasOwnProperty(instanceId)){categoryMean=prefs[instanceId];
}else{categoryMean=allPathways[pathwayIdx].DEFAULT_CATEGORY_MEAN;
}if(!categoryMean){throw new Error("launchDynamicView - Unable to locate a category mean.");
}}viewExists=tabControlObject.tabExists(categoryMean);
if(viewExists){$("#"+categoryMean+"tab").click();
}else{var viewContainer=new ViewContainer(categoryMean);
var tabs=tabControlObject.getTabs();
var workflowView;
var tempTab;
if(!this.viewObject){this.viewObject=new CarePathwaysWorkflow();
}workflowView=this.viewObject;
workflowView.setPathwayId(pathwayID);
workflowView.setPathwayInstanceId(instanceId);
workflowView.setCategoryMean(categoryMean);
if(nodeId){workflowView.setNodeId(nodeId);
}viewContainer.setSequence(0);
viewContainer.setId(categoryMean);
viewContainer.setViewType("DYN_CPM");
viewContainer.setViewObject(workflowView);
viewContainer.setCategoryMean(categoryMean);
viewContainer.setViewName(allPathways[pathwayIdx].PATHWAY_NAME);
MP_Viewpoint.addDynamicTab(viewContainer,true);
for(x=tabs.length;
x--;
){if(tabs[x].id===categoryMean){tempTab=tabs[x];
break;
}}if(tempTab){for(x=tabs.length;
x--;
){if(tabs[x].label===tempTab.label&&tabs[x].id!==tempTab.id){$("#"+tabs[x].id+"tab .close-tab").click();
}}}that.updateUserPrefs("ADD",instanceId,categoryMean);
}timer=new CapabilityTimer("CAP:MPG_CPM-o1_SELECTED",categoryMean);
timer.addMetaData("rtms.legacy.metadata.1",nodeId);
timer.capture();
}else{throw new Error("launchDynamicView - Could not find pathway for ID "+pathwayID+".");
}};
MP_Resources.addSharedResource("CP_DYN_VIEW_"+pathwayId,sharedResource);
}return sharedResource;
};
CarePathwaysComponentO1.prototype.initializePathwayModel=function(response){var pathways=[];
var curQualEndDate=new Date();
var currDate=new Date();
var diagramURLMap={};
var suggestedPathways=[];
var dateFormatter=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var allPathwaysResource=new SharedResource("ALL_PATHWAYS");
var curQual;
var pathwayId;
var instanceId;
var idx;
var x;
var y;
var z;
var newObj;
for(x=response.PATHWAY_LIST.length;
x--;
){curQual=response.PATHWAY_LIST[x];
diagramURLMap[curQual.CP_PATHWAY_ID]=curQual.PATHWAY_DIAGRAM_URL;
}for(x=0,y=response.ACTIVITY_CNT;
x<y;
x++){curQual=response.ACTIVITY_QUAL[x];
if(pathwayId!==curQual.CP_PATHWAY_ID||instanceId!==curQual.PATHWAY_INSTANCE_ID){pathwayId=curQual.CP_PATHWAY_ID;
instanceId=curQual.PATHWAY_INSTANCE_ID;
newObj={};
newObj.ACTION_DT_TM=dateFormatter.formatISO8601(curQual.BEG_EFFECTIVE_DT_TM,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
newObj.CP_PATHWAY_ID=pathwayId;
newObj.PATHWAY_INSTANCE_ID=instanceId;
newObj.PATHWAY_NAME=curQual.PATHWAY_NAME;
newObj.PATHWAY_ACTIVITY_STATUS_MEAN=curQual.PATHWAY_ACTIVITY_STATUS_MEAN;
newObj.OFF_PATHWAY_IND=curQual.OFF_PATHWAY_IND;
newObj.CLINICAL_TRIAL_IND=curQual.CLINICAL_TRIAL_IND;
newObj.PATHWAY_DIAGRAM_URL=diagramURLMap[pathwayId];
pathways.push(newObj);
}}for(x=0,y=response.SUGGEST_CNT;
x<y;
x++){response.SUGGEST_QUAL[x].PROPOSED_IND=0;
response.SUGGEST_QUAL[x].PROPOSED_BY="";
suggestedPathways.push(response.SUGGEST_QUAL[x]);
}for(x=0,y=response.ACTIVITY_CNT;
x<y;
x++){idx=-1;
curQual=response.ACTIVITY_QUAL[x];
if(curQual.PATHWAY_ACTIVITY_STATUS_MEAN==="PROPOSED"){for(z=suggestedPathways.length;
z--;
){if(suggestedPathways[z].CP_PATHWAY_ID===curQual.CP_PATHWAY_ID){idx=z;
break;
}}curQualEndDate.setISO8601(curQual.END_EFFECTIVE_DT_TM);
if(idx===-1){if(!(curQualEndDate<=currDate)){newObj={};
newObj.CP_PATHWAY_ID=curQual.CP_PATHWAY_ID;
newObj.PATHWAY_DIAGRAM_URL=diagramURLMap[curQual.CP_PATHWAY_ID];
newObj.PATHWAY_NAME=curQual.PATHWAY_NAME;
newObj.PATHWAY_INSTANCE_ID=curQual.PATHWAY_INSTANCE_ID;
newObj.PROPOSED_IND=1;
newObj.PROPOSED_BY=curQual.UPDT_NAME;
newObj.QUALIFYING_NOMENCLATURE_CNT=0;
newObj.QUALIFYING_NOMENCLATURE=[];
newObj.PATHWAY_DIAGRAM_URL=diagramURLMap[pathwayId];
suggestedPathways.push(newObj);
}}}}this.setStatusDisplayValues(response.PATHWAY_ACTIVITY_STATUS_DISPLAY);
allPathwaysResource.setResourceData(pathways);
MP_Resources.addSharedResource("ALL_PATHWAYS",allPathwaysResource);
this.setAllPathways(response.PATHWAY_LIST);
this.setSuggestedPathways(suggestedPathways);
};
CarePathwaysComponentO1.prototype.readNodePrefs=function(){var that=this;
var criterion=this.getCriterion();
var scriptRequest=new ScriptRequest();
scriptRequest.setAsyncIndicator(true);
scriptRequest.setProgramName("MP_GET_USER_PREFS");
scriptRequest.setParameterArray(["^MINE^",criterion.provider_id+".0","^"+this.getPrefIdentifier()+"^"]);
scriptRequest.setResponseHandler(function(scriptResponse){var response=scriptResponse.getResponse();
var prefString=response.PREF_STRING;
var prefs;
try{prefs=JSON.parse(prefString);
}catch(e){prefs={};
}that.setPreferencesObj(prefs);
});
scriptRequest.performRequest();
};
CarePathwaysComponentO1.prototype.retrieveComponentData=function(){var that=this;
var criterion=this.getCriterion();
var scriptRequest=new ComponentScriptRequest();
var loadTimer=new RTMSTimer(this.getComponentLoadTimerName(),criterion.category_mean);
var renderTimer=new RTMSTimer(this.getComponentRenderTimerName(),criterion.category_mean);
this.readNodePrefs();
scriptRequest.setComponent(this);
scriptRequest.setLoadTimer(loadTimer);
scriptRequest.setRenderTimer(renderTimer);
scriptRequest.setProgramName("cp_get_overview");
scriptRequest.setParameterArray(["^MINE^",criterion.person_id,criterion.encntr_id,criterion.provider_id]);
scriptRequest.setResponseHandler(function(scriptResponse){var timer=new CapabilityTimer("CAP:MPG_CPM-o1_TRIGGERED",criterion.category_mean);
that.initializePathwayModel(scriptResponse.getResponse());
that.finalizeComponent("");
that.updateComponentLayout();
timer.capture();
});
scriptRequest.performRequest();
};
CarePathwaysComponentO1.prototype.updateComponentLayout=function(){var that=this;
var activePathways=this.getActivePathways();
var contentNode=$(this.getSectionContentNode());
var availableSuggestedPathways=that.getAvailableSuggestedPathways();
var allPathwaysResource=MP_Resources.getSharedResource("ALL_PATHWAYS");
var pathways=allPathwaysResource.getResourceData();
var statusDisplayValues=this.getStatusDisplayValues();
var pathwaysi18n=i18n.discernabu.care_pathways_o1;
var historicalPathways=$.grep(pathways,function(pathway){return pathway.PATHWAY_ACTIVITY_STATUS_MEAN==="COMPLETE";
});
var activePathwaysHeader,suggestedPathwaysHeader,historicalPathwaysHeader,historicalPathwaysBody,searchObject,buttonContainers,button,x;
contentNode.html(this.generateComponentHtml());
activePathwaysHeader=contentNode.find(".cpo-active-pathways>.cpo-section-header");
suggestedPathwaysHeader=contentNode.find(".cpo-suggested-pathways>.cpo-section-header");
historicalPathwaysHeader=contentNode.find(".cpo-historical-pathways>.cpo-section-header");
historicalPathwaysBody=contentNode.find(".cpo-historical-pathways>.cpo-section-details");
searchObject=$("#pwOverviewSearch"+this.getComponentId());
var addStartButton=function(container){button=new MPageUI.Button();
button.setLabel(container.parents(".cpo-active-pathways").length>0?pathwaysi18n.OPEN:pathwaysi18n.START);
button.setOnClickCallback(function(){var element=this.getRootElement();
var parent=element.parents(".cpo-overview-row");
var instanceId;
if(parent.length>0){instanceId=parseInt(parent.attr("instance-id")||0,10);
that.addPathwayActivity(parent.attr("id"),instanceId,"ACTIVE");
}});
container.append(button.render());
button.attachEvents();
};
if(searchObject.length>0){var searchControl=new MPageControls.AutoSuggest(searchObject);
var availablePathwaysBody=contentNode.find(".cpo-available-pathways>.cpo-section-details");
searchControl.setCaption(pathwaysi18n.SEARCH_PATHWAYS);
searchControl.activateCaption();
searchControl.processTextboxKeyDown=function(){var containers;
var i;
availablePathwaysBody.empty().html(that.generateAvailablePathwaysHtml(that.findMatchingPathways(searchControl.getValue())));
containers=contentNode.find(".cpo-available-pathways .cpo-pathway-button-container");
for(i=containers.length;
i--;
){addStartButton($(containers[i]));
}};
}buttonContainers=contentNode.find(".cpo-pathway-button-container");
for(x=buttonContainers.length;
x--;
){buttonContainers[x]=$(buttonContainers[x]);
addStartButton(buttonContainers[x]);
if(buttonContainers[x].parents(".cpo-active-pathways").length>0){var parent=buttonContainers[x].parents(".cpo-overview-row");
var option={};
option.label=statusDisplayValues.VOID_DISPLAY;
option.onSelect=function(){addPathwayActivity(this.pathwayId,this.instanceId,"VOID");
};
option.pathwayId=parent.attr("id");
option.instanceId=parent.attr("instance-id");
var addPathwayActivity=function(pathwayId,instanceId,activityType){that.addPathwayActivity(pathwayId,instanceId,activityType);
that.completeOrVoidInstance(instanceId,activityType);
};
button=new MPageUI.SplitButton();
button.setLabel(statusDisplayValues.COMPLETE_DISPLAY);
button.setLabelButtonClickCallback(function(){var rootElement=this.getRootElement();
if(rootElement){var overviewRow=rootElement.parents(".cpo-overview-row");
if(overviewRow.length>0){addPathwayActivity(overviewRow.attr("id"),overviewRow.attr("instance-id"),"COMPLETE");
}}});
button.addOptions([option]);
buttonContainers[x].append(button.render());
button.attachEvents();
}}if(activePathways.length!==0){activePathwaysHeader.addClass("cpo-hover-cursor-pointer");
activePathwaysHeader.children(".cpo-icon-container").addClass("cpo-expanded-icon");
}if(availableSuggestedPathways.length!==0){suggestedPathwaysHeader.addClass("cpo-hover-cursor-pointer");
suggestedPathwaysHeader.children(".cpo-icon-container").addClass("cpo-expanded-icon");
}if(historicalPathways.length!==0){historicalPathwaysHeader.addClass("cpo-hover-cursor-pointer");
historicalPathwaysHeader.children(".cpo-icon-container").addClass("cpo-collapsed-icon");
historicalPathwaysBody.addClass("hidden");
}this.bindEvents();
};
CarePathwaysComponentO1.prototype.updateUserPrefs=function(mode,instanceId,nodeMeaning){var prefs=this.getPreferencesObj();
var changed=false;
if(!prefs){prefs={};
}if(mode==="ADD"){if(prefs.hasOwnProperty(instanceId)){if(prefs[instanceId]!==nodeMeaning){prefs[instanceId]=nodeMeaning;
changed=true;
}}else{prefs[instanceId]=nodeMeaning;
changed=true;
}}else{if(mode==="REMOVE"){delete prefs[instanceId];
changed=true;
}}this.setPreferencesObj(prefs);
if(changed){this.writeNodePrefs();
}};
CarePathwaysComponentO1.prototype.writeNodePrefs=function(){var criterion=this.getCriterion();
var prefs=this.getPreferencesObj();
var scriptRequest=new ScriptRequest();
if(!prefs){prefs={};
}prefs=JSON.stringify(prefs);
scriptRequest.setAsyncIndicator(false);
scriptRequest.setProgramName("MP_MAINTAIN_USER_PREFS");
scriptRequest.setParameterArray(["^MINE^",criterion.provider_id+".0","^"+this.getPrefIdentifier()+"^","~"+prefs+"~"]);
scriptRequest.setResponseHandler(function(){});
scriptRequest.performRequest();
};
MP_Util.setObjectDefinitionMapping("WF_CARE_PATH_COMP",CarePathwaysComponentO1);
