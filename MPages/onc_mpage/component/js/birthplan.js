function BirthPlanComponentStyle(){this.initByNamespace("bp");
}BirthPlanComponentStyle.inherits(ComponentStyle);
function BirthPlanComponent(criterion){this.setCriterion(criterion);
this.setStyles(new BirthPlanComponentStyle());
this.setComponentLoadTimerName("USR:MPG.BirthPlan.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.BirthPlan.O1 - render component");
this.setIncludeLineNumber(true);
this.birthPlanPFId=0;
this.setLookbackUnitTypeFlag(2);
this.setResourceRequired(true);
this.setPregnancyLookbackInd(true);
BirthPlanComponent.method("InsertData",function(){CERN_BIRTHPLAN_O1.GetBirthPlan(this);
});
BirthPlanComponent.method("HandleSuccess",function(recordData){CERN_BIRTHPLAN_O1.RenderComponent(this,recordData);
});
BirthPlanComponent.method("RetrieveRequiredResources",function(){var patientGenderInfo=criterion.getPatientInfo().getSex();
var bpi18n=i18n.discernabu.birthplan_o1;
if(patientGenderInfo===null){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+bpi18n.GENDER_UNDEFINED+"</span></h3><span class='res-none'>"+bpi18n.GENDER_UNDEFINED+"</span>";
MP_Util.Doc.FinalizeComponent(messageHTML,this,"(0)");
return;
}var pregInfoObj=null;
pregInfoObj=MP_Resources.getSharedResource("pregnancyInfo");
if(pregInfoObj&&pregInfoObj.isResourceAvailable()){this.InsertData();
}else{PREGNANCY_BASE_UTIL_O1.LoadPregnancyData(this.getCriterion());
}});
BirthPlanComponent.method("getBirthPlanPF",function(powerFormId){return this.birthPlanPFId;
});
BirthPlanComponent.method("setBirthPlanPF",function(powerFormId){this.birthPlanPFId=powerFormId;
});
BirthPlanComponent.method("openTab",function(){if(this.birthPlanPFId>0){var paramString=criterion.person_id+"|"+criterion.encntr_id+"|"+this.birthPlanPFId+"|0|0";
MPAGES_EVENT("POWERFORM",paramString);
CERN_EventListener.fireEvent(null,this,EventListener.EVENT_CLINICAL_EVENT);
}});
CERN_EventListener.addListener(this,EventListener.EVENT_CLINICAL_EVENT,this.InsertData,this);
CERN_EventListener.addListener(this,"pregnancyInfoAvailable",this.InsertData,this);
}BirthPlanComponent.inherits(MPageComponent);
var CERN_BIRTHPLAN_O1=function(){return{GetBirthPlan:function(component){var bpi18n=i18n.discernabu.birthplan_o1;
var criterion=component.getCriterion();
var encntrs=criterion.getPersonnelInfo().getViewableEncounters();
var encntrVal=(encntrs)?"value("+encntrs+")":"0.0";
var groups=component.getGroups();
var messageHTML="";
var pregInfoObj=null;
var pregInfoSR=MP_Resources.getSharedResource("pregnancyInfo");
var pregnancyId=0;
var sendAr=[];
var sES="0.0";
if(criterion.getPatientInfo().getSex().meaning!=="FEMALE"){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+bpi18n.NOT_FEMALE+"</span></h3><span class='res-none'>"+bpi18n.NOT_FEMALE+"</span>";
MP_Util.Doc.FinalizeComponent(messageHTML,component,"(0)");
return;
}else{if(pregInfoSR&&pregInfoSR.isResourceAvailable()){pregInfoObj=pregInfoSR.getResourceData();
pregnancyId=pregInfoObj.getPregnancyId();
if(pregnancyId===-1){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+bpi18n.PREG_DATA_ERROR+"</span></h3><span class='res-none'>"+bpi18n.PREG_DATA_ERROR+"</span>";
MP_Util.Doc.FinalizeComponent(messageHTML,component,"(0)");
return;
}else{if(!pregnancyId){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+bpi18n.NO_ACTIVE_PREG+"</span></h3><span class='res-none'>"+bpi18n.NO_ACTIVE_PREG+"</span>";
MP_Util.Doc.FinalizeComponent(messageHTML,component,"(0)");
return;
}else{if(groups&&groups.length>0){sES=MP_Util.CreateParamArray(groups[0].getEventSets(),1);
}sendAr.push("^MINE^",criterion.person_id+".0",criterion.provider_id+".0",encntrVal,sES,criterion.ppr_cd+".0",pregInfoObj.getLookBack());
MP_Core.XMLCclRequestWrapper(component,"MP_GET_BIRTH_PLANS",sendAr,true);
return;
}}}}},RenderComponent:function(component,recordData){try{var birthPlani18n=i18n.discernabu.birthplan_o1;
var countText="(0)";
var jsBirthPlanHTML=[];
var birthPlanHTML="";
var birthPlanArray=recordData.PLANLIST;
var birthPlanLength=birthPlanArray.length;
if(birthPlanLength>0){jsBirthPlanHTML.push("<div class='",MP_Util.GetContentClass(component,birthPlanArray.length),"'>");
for(var i=0;
i<birthPlanLength;
i++){jsBirthPlanHTML.push("<h3 class='info-hd'><span>",birthPlani18n.BIRTHPLAN,"</span></h3><dl class='bp-info'><dd class='bp-title'><span class='row-label'>",birthPlanArray[i].SPLANNAME,"</span></dd><dd class='bp-result'>",birthPlanArray[i].SPLANRESULT,"</dd></dl>");
}jsBirthPlanHTML.push("</div>");
birthPlanHTML=jsBirthPlanHTML.join("");
countText=MP_Util.CreateTitleText(component,birthPlanArray.length);
}else{birthPlanHTML=MP_Util.HandleNoDataResponse(component.getStyles().getNameSpace());
}MP_Util.Doc.FinalizeComponent(birthPlanHTML,component,countText);
}catch(err){MP_Util.LogJSError(err,component,"birthplan.js","RenderComponent");
throw (err);
}}};
}();
