function SafetyComponentStyle(){this.initByNamespace("sa");
}SafetyComponentStyle.inherits(ComponentStyle);
function SafetyComponent(criterion){this.setCriterion(criterion);
this.setStyles(new SafetyComponentStyle());
this.setComponentLoadTimerName("USR:MPG.SAFETY.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.SAFETY.O1 - render component");
this.setIncludeLineNumber(true);
this.m_iViewAdd=false;
this.m_isEventSetInfo=true;
this.m_isComment=true;
this.saI18n=i18n.discernabu.safety_o1;
this.sEventSets="0.0";
this.sEventCodes="0.0";
this.sBeginDate="^^";
this.sEndDate="^^";
this.esInfo=null;
this.groups=this.getGroups();
this.sEncntr=null;
this.commentInfo=null;
}SafetyComponent.prototype=new MPageComponent();
SafetyComponent.prototype.constructor=MPageComponent;
SafetyComponent.prototype.setIViewAdd=function(iViewAdd){if(typeof iViewAdd!="boolean"){throw new Error("setIViewAdd: Invalid iViewAdd");
}else{this.m_iViewAdd=iViewAdd;
}};
SafetyComponent.prototype.isIViewAdd=function(){return(this.m_iViewAdd);
};
SafetyComponent.prototype.openTab=function(){var criterion=this.getCriterion();
var paramString=criterion.person_id+"|"+criterion.encntr_id+"|"+0+"|0|0";
MP_Util.LogMpagesEventInfo(this,"POWERFORM",paramString,"safety.js","openTab");
MPAGES_EVENT("POWERFORM",paramString);
CERN_EventListener.fireEvent(null,this,EventListener.EVENT_CLINICAL_EVENT,"Safety");
};
SafetyComponent.prototype.openDropDown=function(formID){var criterion=this.getCriterion();
var paramString=criterion.person_id+"|"+criterion.encntr_id+"|"+formID+"|0|0";
MP_Util.LogMpagesEventInfo(this,"POWERFORM",paramString,"safety.js","openDropDown");
MPAGES_EVENT("POWERFORM",paramString);
CERN_EventListener.fireEvent(null,this,EventListener.EVENT_CLINICAL_EVENT,"Safety");
};
SafetyComponent.prototype.openIView=function(){var bandName="";
var sectionName="";
var itemName="";
var criterion=this.getCriterion();
var paramString="'"+bandName+"','"+sectionName+"','"+itemName+"',"+criterion.person_id+".0,"+criterion.encntr_id+".0";
MP_Util.LogMpagesEventInfo(this,"IVIEW",paramString,"safety.js","openIView");
try{var launchIViewApp=window.external.DiscernObjectFactory("TASKDOC");
launchIViewApp.LaunchIView(bandName,sectionName,itemName,criterion.person_id+".0",criterion.encntr_id+".0");
CERN_EventListener.fireEvent(null,this,EventListener.EVENT_CLINICAL_EVENT,"Safety");
}catch(err){MP_Util.LogJSError(err,null,"safety.js","openIView");
}};
SafetyComponent.prototype.loadFilterMappings=function(){this.addFilterMappingObject("SAFETY_CHART",{setFunction:this.setIViewAdd,type:"BOOLEAN",field:"FREETEXT_DESC"});
};
SafetyComponent.prototype.preProcessing=function(){MPageComponent.prototype.preProcessing.call(this);
if(this.groups&&this.groups.length>0){var criterion=this.getCriterion();
this.esInfo=(this.m_isEventSetInfo)?1:0;
this.commentInfo=(this.m_isComment)?1:0;
this.sEncntr=(this.getScope()===2)?criterion.encntr_id+".0":"0.0";
for(var x=0,xl=this.groups.length;
x<xl;
x++){var group=this.groups[x];
if(group instanceof MPageEventSetGroup){this.sEventSets=MP_Util.CreateParamArray(group.getEventSets(),1);
}else{if(group instanceof MPageEventCodeGroup){this.sEventCodes=MP_Util.CreateParamArray(group.getEventCodes(),1);
}else{if(group instanceof MPageSequenceGroup){var mapItems=group.getMapItems();
this.sEventSets=MP_Util.CreateParamArray(MP_Util.GetValueFromArray("CODE_VALUE",mapItems),1);
}else{if(group instanceof MPageGrouper){var grps=group.getGroups();
var evtCode=[];
for(var y=0,yl=grps.length;
y<yl;
y++){if(grps[y] instanceof MPageEventCodeGroup){evtCode=evtCode.concat(grps[y].getEventCodes());
}}this.sEventCodes=MP_Util.CreateParamArray(evtCode,1);
}else{continue;
}}}}}}};
SafetyComponent.prototype.retrieveComponentData=function(){var sendAr=[];
if(this.groups&&this.groups.length>0){var criterion=this.getCriterion();
sendAr.push("^MINE^",criterion.person_id+".0",this.sEncntr,criterion.provider_id+".0",criterion.ppr_cd+".0",1,"^^",this.sEventSets,this.sEventCodes,this.getLookbackUnits(),this.getLookbackUnitTypeFlag(),this.esInfo,this.sBeginDate,this.sEndDate,this.commentInfo);
var programName="MP_RETRIEVE_N_RESULTS_JSON";
var loadTimer=new RTMSTimer(this.getComponentLoadTimerName());
var renderTimer=new RTMSTimer(this.getComponentRenderTimerName());
var scriptRequest=new ComponentScriptRequest();
scriptRequest.setProgramName(programName);
scriptRequest.setParameterArray(sendAr);
scriptRequest.setComponent(this);
scriptRequest.setLoadTimer(loadTimer);
scriptRequest.setRenderTimer(renderTimer);
scriptRequest.performRequest();
}};
SafetyComponent.prototype.LoadMeasurementDataMap=function(recordData,personnelArray,codeArray,sortOption){var mapObjects=[];
var results=recordData.RESULTS;
if(!codeArray){codeArray=MP_Util.LoadCodeListJSON(recordData.CODES);
}if(!personnelArray){personnelArray=MP_Util.LoadPersonelListJSON(recordData.PRSNL);
}for(var i=0,il=results.length;
i<il;
i++){var result=results[i];
if(result.CLINICAL_EVENTS.length>0){for(var j=0,jl=result.CLINICAL_EVENTS.length;
j<jl;
j++){var measureArray=[];
var mapObject=null;
if(result.EVENT_CD>0){mapObject=new MP_Core.MapObject(result.EVENT_CD,measureArray);
}else{mapObject=new MP_Core.MapObject(result.EVENT_SET_NAME,measureArray);
}var meas=result.CLINICAL_EVENTS[j];
for(var k=0,kl=meas.MEASUREMENTS.length;
k<kl;
k++){var measurement=new MP_Core.Measurement();
measurement.initFromRec(meas.MEASUREMENTS[k],codeArray);
measureArray.push(measurement);
}if(measureArray.length>0){if(sortOption){measureArray.sort(sortOption);
}else{measureArray.sort(this.sortByEffectiveDateDesc);
}mapObjects.push(mapObject);
}}}}return mapObjects;
};
SafetyComponent.prototype.sortByEffectiveDateDesc=function(a,b){if(a.getDateTime()>b.getDateTime()){return -1;
}else{if(a.getDateTime()<b.getDateTime()){return 1;
}}return 0;
};
SafetyComponent.prototype.renderComponent=function(reply){try{var sHTML="";
var ar=[];
var codeArray=MP_Util.LoadCodeListJSON(reply.CODES);
var personnelArray=MP_Util.LoadPersonelListJSON(reply.PRSNL);
var measureArray=this.LoadMeasurementDataMap(reply,personnelArray,codeArray);
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var measLen=measureArray.length;
ar.push("<div class='",MP_Util.GetContentClass(this,measLen),"'>");
if(measLen>0){for(var i=0,l=measLen;
i<l;
i++){var measObject=measureArray[i].value[0];
var display=measObject.getEventCode().display;
var result=MP_Util.Measurement.GetNormalcyResultDisplay(measObject);
var status=measObject.getStatus().display;
var oDate=measObject.getDateTime();
var sDate=(oDate)?df.format(oDate,mp_formatter.DateTimeFormatter.FULL_DATE_TIME_2YEAR):"";
var sDateHover=(oDate)?df.format(oDate,mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR):"";
ar.push("<div class='sub-sec-content'><div class='content-body'><dl class='result-info sa-info'><dt >","<dd><span class='sa-name'>",display,"</span><span class='sa-res'>",result,"</span><span class='sa-dt'>",sDate,"</span></dd></dt>","</dl>","<div class='result-details'><h4 class='det-hd'>",this.saI18n.SAFETY_DETAILS,"</h4>","<dl>","<dt><span>",display,":</span></dt>","<dd><span>",result,"</span></dd>","<dt><span>",this.saI18n.RESULT_DT_TM,":</span></dt>","<dd><span>",sDateHover,"</span></dd>","<dt><span>",this.saI18n.STATUS,":</span></dt>","<dd><span>",status,"</span></dd>","</dl>","</div></div></div>");
}}ar.push("</div>");
sHTML=ar.join("");
var countText=MP_Util.CreateTitleText(this,measLen);
this.finalizeComponent(sHTML,countText);
}catch(err){MP_Util.LogJSError(err,this,"safety.js","renderComponent");
throw (err);
}};
MP_Util.setObjectDefinitionMapping("SAFETY",SafetyComponent);
