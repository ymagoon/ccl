function DiagnosesComponentStyle(){this.initByNamespace("dx");
}DiagnosesComponentStyle.inherits(ComponentStyle);
function DiagnosesComponent(criterion){this.m_searchTypeFlag=null;
this.m_suggestionLimit=null;
this.m_diagnosisVocab=null;
this.m_diagnosisAddTypeCd=null;
this.m_diagnosisClass=null;
this.m_diagnosisVocabInd=0;
this.curSearchCounter=0;
this.nextSearchCounter=0;
this.replySearchCounter=0;
this.setCriterion(criterion);
this.setStyles(new DiagnosesComponentStyle());
this.setComponentLoadTimerName("USR:MPG.DIAGNOSES.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.DIAGNOSES.O1 - render component");
this.setIncludeLineNumber(true);
this.setScope(2);
DiagnosesComponent.method("InsertData",function(){this.setEditMode(true);
CERN_DIAGNOSES_O1.GetDiagnosisTable(this);
});
DiagnosesComponent.method("HandleSuccess",function(recordData){CERN_DIAGNOSES_O1.RenderComponent(this,recordData);
});
DiagnosesComponent.method("setDiagnosisType",function(value){this.m_diagnosisType=value;
});
DiagnosesComponent.method("getDiagnosisType",function(){if(this.m_diagnosisType!==null){return this.m_diagnosisType;
}});
DiagnosesComponent.method("setDiagnosisVocab",function(value){this.m_diagnosisVocab=value;
});
DiagnosesComponent.method("getDiagnosisVocab",function(){return this.m_diagnosisVocab;
});
DiagnosesComponent.method("setDiagnosisAddTypeCd",function(value){this.m_diagnosisAddTypeCd=value;
});
DiagnosesComponent.method("getDiagnosisAddTypeCd",function(){return this.m_diagnosisAddTypeCd;
});
DiagnosesComponent.method("setDiagnosisClassification",function(value){this.m_diagnosisClass=value;
});
DiagnosesComponent.method("getDiagnosisClassification",function(){return this.m_diagnosisClass;
});
DiagnosesComponent.method("setDiagnosisVocabInd",function(value){this.m_diagnosisVocabInd=value;
});
DiagnosesComponent.method("getDiagnosisVocabInd",function(){return this.m_diagnosisVocabInd;
});
DiagnosesComponent.method("getSearchTypeFlag",function(){return this.m_searchTypeFlag;
});
DiagnosesComponent.method("setSearchTypeFlag",function(value){this.m_searchTypeFlag=value;
});
DiagnosesComponent.method("getSuggestionLimit",function(){return this.m_suggestionLimit;
});
DiagnosesComponent.method("setSuggestionLimit",function(value){this.m_suggestionLimit=value;
});
DiagnosesComponent.method("getCurSearchCounter",function(){return this.curSearchCounter;
});
DiagnosesComponent.method("setCurSearchCounter",function(value){this.curSearchCounter=value;
});
DiagnosesComponent.method("incCurSearchCounter",function(){this.curSearchCounter++;
});
DiagnosesComponent.method("getNextSearchCounter",function(){return this.nextSearchCounter;
});
DiagnosesComponent.method("setNextSearchCounter",function(value){this.nextSearchCounter=value;
});
DiagnosesComponent.method("incNextSearchCounter",function(){this.nextSearchCounter++;
});
DiagnosesComponent.method("getReplySearchCounter",function(){return this.replySearchCounter;
});
DiagnosesComponent.method("setReplySearchCounter",function(value){this.replySearchCounter=value;
});
DiagnosesComponent.method("incReplySearchCounter",function(){this.replySearchCounter++;
});
}DiagnosesComponent.inherits(MPageComponent);
var CERN_DIAGNOSES_O1=function(){return{GetDiagnosisTable:function(component){var sendAr=[];
var criterion=component.getCriterion();
var encntrOption=(component.getScope()==2)?(criterion.encntr_id+".0"):"0.0";
sendAr.push("^MINE^",criterion.person_id+".0",encntrOption,0);
var types=component.getDiagnosisType();
var diagnosisType=(types&&types!==null&&types.length>0)?"value("+types.join(",")+")":"0.0";
sendAr.push(diagnosisType);
sendAr.push(criterion.provider_id+".0",criterion.ppr_cd+".0",criterion.position_cd+".0","0.0","1",component.getDiagnosisVocab()+".0",component.getDiagnosisVocabInd());
var request=new MP_Core.ScriptRequest(component,component.getComponentLoadTimerName());
request.setProgramName("MP_GET_DIAGNOSES");
request.setParameters(sendAr);
request.setAsync(true);
MP_Core.XMLCCLRequestCallBack(component,request,CERN_DIAGNOSES_O1.RenderComponent);
},RenderComponent:function(reply){var recordData=reply.getResponse();
var component=reply.getComponent();
var timerRenderComponent=MP_Util.CreateTimer(component.getComponentRenderTimerName());
try{var dxI18n=i18n.discernabu.diagnoses_o1;
var jsDxHTML=[];
var dxHTML="",countText="";
if(reply.getStatus()!=="F"){if(recordData.DX_CAN_ADD===1){jsDxHTML.push(MP_Util.CreateAutoSuggestBoxHtml(component));
component.setAutoSuggestAddScript("mp_add_diagnosis");
component.setAutoSuggestAddTimerName("USR:MPG.DIAGNOSES.O1 - add diagnosis from auto suggest");
component.setSuggestionLimit(10);
}if(reply.getStatus()==="S"){var diagDate="";
var dxCode="";
var dxTypeCode="";
var dxAnnot="";
var dxName="";
var dxFaceUp="";
var comm="";
var responProvider="";
var dateTime=new Date();
var personnelArray=[];
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
personnelArray=MP_Util.LoadPersonelListJSON(recordData.PRSNL);
codeArray=MP_Util.LoadCodeListJSON(recordData.CODES);
var diagnosisArray=recordData.DIAGNOSIS;
diagnosisArray.sort(SortByDiagnosesName);
jsDxHTML.push("<div class ='",MP_Util.GetContentClass(component,diagnosisArray.length),"'>");
for(var i=0,l=diagnosisArray.length;
i<l;
i++){var diagnose=diagnosisArray[i];
dxName=dxFaceUp=diagnose.NAME;
if(diagnose.DISPLAY_AS!=""){dxAnnot=dxFaceUp=diagnose.DISPLAY_AS;
}else{dxAnnot="";
}if(diagnose.CODE!=""&&diagnose.CODE!="()"){dxCode=diagnose.CODE;
}else{dxCode="()";
}if(diagnose.DIAG_DT_TM!=""){diagDate=df.formatISO8601(diagnose.DIAG_DT_TM,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
}else{diagDate="";
}if(diagnose.COMMENTS!=""){comm=diagnose.COMMENTS;
}else{comm="";
}if(diagnose.PRSNL_ID>0){responProvider=MP_Util.GetValueFromArray(diagnose.PRSNL_ID,personnelArray).fullName;
}else{responProvider="";
}if(diagnose.DIAG_TYPE_CD>0){dxTypeCode=MP_Util.GetValueFromArray(diagnose.DIAG_TYPE_CD,codeArray).display;
}else{dxTypeCode="";
}jsDxHTML.push("<h3 class='info-hd'><span>",dxName,"</span></h3><dl class='dx-info'><dt><span>",dxI18n.DIAGNOSES,":</span></dt><dd class='dx-name'><span>",dxFaceUp,"</span></dd><dt><span>",dxI18n.CODE,":</span></dt><dd class='dx-code'><span class='code'>",dxCode,"</span></dd></dl><h4 class='det-hd'><span>",dxI18n.DETAILS,":</span></h4><div class='hvr'><dl class='dx-det'><dt><span>",dxI18n.DIAGNOSES_NAME,":</span></dt><dd><span>",dxName,"</span></dd><dt><span>",dxI18n.ANNOTATED_DISPLAY,":</span></dt><dd><span>",dxAnnot,"</span></dd><dt><span>",dxI18n.DIAG_TYPE,":</span></dt><dd><span>",dxTypeCode,"</span></dd><dt><span>",dxI18n.DIAGNOSES_DATE,":</span></dt><dd><span>",diagDate,"</span></dd><dt><span>",dxI18n.RESPONSIBLE_PROVIDER_NAME,":</span></dt><dd><span>",responProvider,"</span></dd><dt><span>",dxI18n.COMMENTS,":</span></dt><dd><span>",comm,"</span></dd></dl></div>");
}jsDxHTML.push("</div>");
dxHTML=jsDxHTML.join("");
countText=MP_Util.CreateTitleText(component,l);
}else{if((reply.getStatus()==="Z")){dxHTML=jsDxHTML.join("");
dxHTML+=MP_Util.HandleNoDataResponse(component.getStyles().getNameSpace());
}}MP_Util.Doc.FinalizeComponent(dxHTML,component,countText);
if(recordData.DX_CAN_ADD===1){MP_Util.AddAutoSuggestControl(component,CERN_DIAGNOSES_O1.SearchNomenclature,CERN_DIAGNOSES_O1.HandleSelection,CERN_DIAGNOSES_O1.CreateSuggestionLine);
component.setSearchTypeFlag(recordData.DX_SEARCH_TYPE);
}}else{countText=MP_Util.CreateTitleText(component,0);
MP_Util.Doc.FinalizeComponent(MP_Util.HandleErrorResponse(component.getStyles().getNameSpace(),reply.getError()),component,countText);
}}catch(err){if(timerRenderComponent){timerRenderComponent.Abort();
timerRenderComponent=null;
}throw (err);
}finally{if(timerRenderComponent){timerRenderComponent.Stop();
}component.setEditMode(false);
}},SearchNomenclature:function(callback,textBox,component){var xhr=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
var returnData;
component.incCurSearchCounter();
xhr.onreadystatechange=function(){if(xhr.readyState==4&&xhr.status==200){MP_Util.LogScriptCallInfo(component,this,"diagnosis.js","SearchNomenclature");
var msg=xhr.responseText;
var jsonMsg="";
if(msg){jsonMsg=JSON.parse(msg);
}if(jsonMsg){var nextSearchCounter=component.getNextSearchCounter();
var replySearchCounter=jsonMsg.RECORD_DATA.SEARCHINDEX;
component.setReplySearchCounter(replySearchCounter);
if(replySearchCounter>nextSearchCounter&&textBox.value!=""){component.setNextSearchCounter(replySearchCounter);
returnData=jsonMsg.RECORD_DATA.NOMENCLATURE;
callback.autosuggest(returnData);
}}}};
var sendAr=["^MINE^","^"+textBox.value+"^",component.getSuggestionLimit(),component.getCurSearchCounter(),component.getSearchTypeFlag()];
if(CERN_BrowserDevInd){var url="mp_search_nomenclatures?parameters="+sendAr.join(",");
xhr.open("GET",url);
xhr.send(null);
}else{xhr.open("GET","mp_search_nomenclatures");
xhr.send(sendAr.join(","));
}},HandleSelection:function(suggestionObj,textBox,component){if(suggestionObj!=null){var criterion=component.getCriterion();
var sendAr=[];
sendAr.push("^MINE^",criterion.person_id+".0",criterion.provider_id+".0",criterion.encntr_id+".0",criterion.ppr_cd+".0",suggestionObj.VALUE+".0",criterion.position_cd+".0","0.0","1",component.getDiagnosisAddTypeCd()+".0",component.getDiagnosisClassification()+".0");
var request=new MP_Core.ScriptRequest(component,component.getAutoSuggestAddTimerName());
request.setProgramName(component.getAutoSuggestAddScript());
request.setParameters(sendAr);
request.setAsync(true);
MP_Core.XMLCCLRequestCallBack(component,request,CERN_DIAGNOSES_O1.AddDiagnosisToList);
}else{alert("No selection was made.  Please make a selection to continue.");
}},AddDiagnosisToList:function(reply){var alertMsg="";
var jsonReply=reply.getResponse();
var component=reply.getComponent();
var componentName="";
var textBox=MP_Util.RetrieveAutoSuggestSearchBox(component);
componentName=i18n.discernabu.DIAGNOSIS;
if(jsonReply&&jsonReply.PRIVILEGE_IND==0){alertMsg=i18n.discernabu.NO_PRIVS;
alertMsg=alertMsg.replace("{name}",componentName);
alert(alertMsg);
textBox.value="";
}else{if(jsonReply&&jsonReply.DUPLICATE_IND==1){alertMsg=i18n.discernabu.DUPLICATE;
alertMsg=alertMsg.replace(/{name}/gi,componentName);
alert(alertMsg);
textBox.value="";
}else{MP_Util.Doc.HideHovers();
component.InsertData();
component.fireDiagnosisAddedEvent();
}}},CreateSuggestionLine:function(suggestionObj,searchVal){return CERN_DIAGNOSES_O1.HighlightValue(suggestionObj.NAME,searchVal);
},HighlightValue:function(inString,term){return"<strong class='highlight'>"+inString.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)("+term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi,"\\$1").split(" ").join("|")+")(?![^<>]*>)(?![^&;]+;)","gi"),"</strong>$1<strong class='highlight'>")+"</strong>";
}};
function SortByDiagnosesName(a,b){var aName=(a.DISPLAY_AS!=""&&a.DISPLAY_AS!=null&&a.DISPLAY_AS!=a.NAME)?a.DISPLAY_AS.toUpperCase():a.NAME.toUpperCase();
var bName=(b.DISPLAY_AS!=""&&b.DISPLAY_AS!=null&&b.DISPLAY_AS!=a.NAME)?b.DISPLAY_AS.toUpperCase():b.NAME.toUpperCase();
if(aName<bName){return -1;
}else{if(aName>bName){return 1;
}else{return 0;
}}}}();
