function NewOrdersCPMComponentStyle(){this.initByNamespace("noCPM");
}NewOrdersCPMComponentStyle.prototype=new ComponentStyle();
function NewOrdersCPMComponent(criterion){this.setCriterion(criterion);
this.setStyles(new NewOrdersCPMComponentStyle());
this.setComponentLoadTimerName("USR:MPG.ORDEROPTS.CPM - load component");
this.setComponentRenderTimerName("ENG:MPG.ORDEROPTS.CPM - render component");
this.setScope(1);
this.setConceptGroupMeanings("ORDEROPTS");
this.m_foldersList=null;
this.m_orderController=null;
this.m_altSelCatId=null;
this.m_ruleTrigger="";
this.m_conceptGroupCd=0;
this.m_ocId="";
this.m_currentVenueType=2;
this.m_venueList=null;
}NewOrdersCPMComponent.prototype=new CPMMPageComponent();
NewOrdersCPMComponent.prototype.constructor=CPMMPageComponent;
NewOrdersCPMComponent.prototype.getCurrentVenueType=function(){return this.m_currentVenueType;
};
NewOrdersCPMComponent.prototype.setCurrentVenueType=function(type){this.m_currentVenueType=type;
};
NewOrdersCPMComponent.prototype.getFoldersList=function(){if(!this.m_foldersList){this.m_foldersList=[];
}return this.m_foldersList;
};
NewOrdersCPMComponent.prototype.setFoldersList=function(list){this.m_foldersList=list;
};
NewOrdersCPMComponent.prototype.getOrderController=function(){if(!this.m_orderController){this.initializeOrderController();
}return this.m_orderController;
};
NewOrdersCPMComponent.prototype.initializeOrderController=function(){var self=this;
this.m_orderController=new this.OrderController(this.getComponentId(),this.getCriterion());
this.m_orderController.setVenueSelectionClickFunction(function(venueVal){self.handleVenueTypeClick(venueVal);
});
var conceptCd=this.getConceptCd();
this.m_orderController.setConceptCd(conceptCd);
};
NewOrdersCPMComponent.prototype.getAltSelCatIdList=function(){if(!this.m_altSelCatId){this.m_altSelCatId=[];
}return this.m_altSelCatId;
};
NewOrdersCPMComponent.prototype.setAltSelCatIdList=function(list){this.m_altSelCatId=list;
};
NewOrdersCPMComponent.prototype.setOcId=function(value){this.m_ocId=value;
};
NewOrdersCPMComponent.prototype.getOcId=function(){return this.m_ocId;
};
NewOrdersCPMComponent.prototype.preProcessing=function(){var self=this;
CPEventManager.addObserver("BROADCAST_EVENT_ORDER_OPTION",this.broadcastEventCallbackFunc.bind(this));
CPEventManager.addObserver("CP_NODE_BEHAVIOR_REACTION",function(params){if(params.CP_NODE_ID===self.getNodeId()){self.handleCriteriaOptions(params.TYPE,params.DATA);
}});
CPEventManager.addObserver("CP_NODE_BEHAVIOR_REACTION_UNDO",function(){var orderController=self.getOrderController();
var suggestedFolders=orderController.getSuggestedFolders();
if(suggestedFolders.length){orderController.setSuggestedFolders([]);
}self.renderComponent();
});
CERN_EventListener.addListener(this,"MP_SCRATCHPAD_ORDERS_SIGNED",self.orderEventCallbackFunc,this);
};
NewOrdersCPMComponent.prototype.orderEventCallbackFunc=function(e,payload){var err;
if(payload===undefined||payload.signed_orders===undefined){err=new Error("Bad payload passed into the NewOrdersCPMComponent orderEventCallbackFunc method. Signed_orders or the payload is undefined","new-order-cpm-o1.js",134);
logger.logJSError(err,this,"new-order-cpm-o1.js","orderEventCallbackFunc");
return;
}else{if(payload.signed_orders.length<1){err=new Error("Bad payload passed into the NewOrdersCPMComponent orderEventCallbackFunc method. Signed_orders is empty","new-order-cpm-o1.js",134);
logger.logJSError(err,this,"new-order-cpm-o1.js","orderEventCallbackFunc");
return;
}else{var orderController=this.getOrderController();
var orderMap=orderController.getOrderMap();
var signedOrders=payload.signed_orders;
var keys=Object.keys(orderMap);
var actionJSON={};
var detail;
var order;
var x;
var y;
var z;
actionJSON.CP_NODE_ID=this.getNodeId();
actionJSON.CP_COMPONENT_ID=this.getCpComponentId();
actionJSON.ACTION_DETAILS=[];
for(x=0,y=signedOrders.length;
x<y;
x++){order=null;
for(z=keys.length;
z--;
){if(orderMap[keys[z]].m_synonymId===signedOrders[x].synonym_id){order=orderMap[keys[z]];
break;
}}if(order){detail={};
detail.PARENT_ENTITY_NAME="ORDER_CATALOG_SYNONYM";
detail.PARENT_ENTITY_ID=signedOrders[x].synonym_id;
detail.ACTION_DETAIL_TYPE_MEAN="ORDSELECT";
actionJSON.ACTION_DETAILS.push(detail);
detail={};
detail.PARENT_ENTITY_NAME="ORDERS";
detail.PARENT_ENTITY_ID=signedOrders[x].order_id;
detail.ACTION_DETAIL_TEXT=signedOrders[x].clin_disp;
detail.ACTION_DETAIL_TYPE_MEAN="SIGNACT";
actionJSON.ACTION_DETAILS.push(detail);
}}CPEventManager.notifyObservers("COMMIT_NODE_ACTION",actionJSON);
}}};
NewOrdersCPMComponent.prototype.handleCriteriaOptions=function(type,data){var i;
var selectedFolder=null;
var orderController=this.getOrderController();
var folderList=orderController.getFolderList();
var compId=this.getStyles().getId();
var parentEntity={};
var parentEntityId=0;
var parentEntityName="";
var parentEntityMap=[];
var parentEntityResponse=null;
if(!type||!data||!data.length){logger.logJSError("Type or Data does not exist.",this,"new-order-cpm-o1.js","handleCriteriaOptions");
return;
}var dataLength=data.length;
for(i=0;
i<dataLength;
i++){parentEntityId=data[i].PARENT_ENTITY_ID;
parentEntityName=data[i].PARENT_ENTITY_NAME;
parentEntityResponse=data[i].RESPONSE_IDENT;
parentEntity={id:parentEntityId,name:parentEntityName,response:parentEntityResponse};
parentEntityMap.push(parentEntity);
}switch(type){case"ORDER":selectedFolder=this.handleOrderFolderSuggestion(folderList,parentEntityMap);
orderController.getSuggestedFolders().push(selectedFolder);
break;
case"NODE":break;
case"REGIMEN":break;
case"PATHWAY":break;
case"SENTENCE":break;
default:logger.logJSError("Type is: "+type+". This is not an expected type.",this,"new-order-cpm-o1.js","handleCriteriaOptions");
break;
}this.renderComponent();
var newOrderCPMComponent=$("#"+compId);
if(newOrderCPMComponent.length){$("#"+selectedFolder.navId+"_0").click();
}};
NewOrdersCPMComponent.prototype.handleOrderFolderSuggestion=function(folderList,parentEntityMap){var i;
var j;
var catId=0;
var folderListLen=folderList.length;
var parentEntityMapLen=parentEntityMap.length;
var parentEntityMapId=0;
var parentEntityMapName="";
var selectedFolder=null;
for(i=0;
i<folderListLen;
i++){catId=folderList[i].m_categoryId;
for(j=0;
j<parentEntityMapLen;
j++){parentEntityMapId=parentEntityMap[j].id;
parentEntityMapName=parentEntityMap[j].name;
if(parentEntityMapId===catId&&parentEntityMapName==="ALT_SEL_CAT"){selectedFolder=folderList[i];
selectedFolder.m_recommendInd=1;
return selectedFolder;
}}}};
NewOrdersCPMComponent.prototype.broadcastEventCallbackFunc=function(item){if(!item||!item.TERMS||!item.TERMS.length){return;
}var term=item.TERMS[0];
var docEventManager=item.MANAGER;
if(!term||!docEventManager||this.getPathwayId()!==docEventManager.getPathwayId()){return;
}var ocid=term.getOCID();
var state=docEventManager.getStateByOCID(ocid);
if(!state){logger.logMPagesEventInfo(this,"SUGGEST",ocid,"new-order-cpm-o1.js","broadcastEventCallbackFunc");
docEventManager.setStateByOCID(ocid,true);
this.filterOrders(ocid);
}else{logger.logMPagesEventInfo(this,"UNSUGGEST",ocid,"new-order-cpm-o1.js","broadcastEventCallbackFunc");
docEventManager.setStateByOCID(ocid,false);
this.unsuggestOrders();
}};
NewOrdersCPMComponent.prototype.filterOrders=function(ocId){this.setOcId(ocId);
this.retrieveComponentData();
};
NewOrdersCPMComponent.prototype.unsuggestOrders=function(){this.setOcId("");
this.retrieveComponentData();
return;
};
NewOrdersCPMComponent.prototype.getDiscernExpertRuleTrigger=function(){return this.m_ruleTrigger;
};
NewOrdersCPMComponent.prototype.setDiscernExpertRuleTrigger=function(ruleName){if(typeof ruleName!=="string"){throw new Error("Type Error: Non-string type 'ruleName' passed into NewOrdersCPMComponent method 'setDiscernExpertRuleTrigger'");
}this.m_ruleTrigger=ruleName;
};
NewOrdersCPMComponent.prototype.processComponentConfig=function(componentConfig,conceptGroupConfig){CPMMPageComponent.prototype.processComponentConfig.call(this,componentConfig,conceptGroupConfig);
this.setAltSelCatIdList(null);
var altSelCatList=this.getAltSelCatIdList();
var detail=null;
var detailList=null;
var cLen;
var i;
var x;
var xl;
if(conceptGroupConfig&&conceptGroupConfig.length){cLen=conceptGroupConfig.length;
for(i=0;
i<cLen;
i++){if(conceptGroupConfig[i].CONCEPT_GROUP_CD_MEAN==="ORDEROPTS"){detailList=conceptGroupConfig[i].CG_DTL_LIST;
this.m_conceptGroupCd=conceptGroupConfig[i].CONCEPT_GROUP_CD;
for(x=0,xl=detailList.length;
x<xl;
x++){detail=detailList[x];
if(detail.CONCEPT_ENTITY_IDENT==="DISCERN_EXPERT_TRIGGER_NAME"){this.setDiscernExpertRuleTrigger(detail.CONCEPT_ENTITY_NAME||"");
}else{if(detail.CONCEPT_ENTITY_NAME==="ALT_SEL_CAT"&&detail.CONCEPT_ENTITY_ID){altSelCatList.push(detail.CONCEPT_ENTITY_ID);
}}}}}}if(componentConfig&&componentConfig.length){cLen=componentConfig.length;
for(i=0;
i<cLen;
i++){detail=componentConfig[i];
if(detail.DETAIL_RELTN_CD_MEAN==="ORDEROPTS"&&detail.ENTITY_NAME==="ALT_SEL_CAT"){altSelCatList.push(detail.ENTITY_ID);
}}}};
NewOrdersCPMComponent.prototype.processOrderOptionsData=function(response){var orderController=this.getOrderController();
orderController.setFolderList(null);
orderController.setSuggestedOrders(null);
orderController.setSuggestedFolders(null);
orderController.setTriggeringNomenclature(this.getTriggeringNomenclature());
var folderList=orderController.getFolderList();
var suggestedOrdersList=orderController.getSuggestedOrders();
var suggestedFoldersList=orderController.getSuggestedFolders();
var folder;
var parent;
var pLen;
var i;
if(!response){return;
}if(response.VENUE_TYPE_LIST){orderController.setVenueTypeList(response.VENUE_TYPE_LIST);
}parent=response.PARENT||[];
pLen=parent.length;
for(i=0;
i<pLen;
i++){folder=new this.OrderFolder();
folder.importFolder(parent[i],null,this.getCurrentVenueType());
folderList.push(folder);
suggestedOrdersList.push.apply(suggestedOrdersList,folder.getSuggestedOrders());
if(folder.m_recommendInd){suggestedFoldersList.push(folder);
folderList.pop();
}suggestedFoldersList.push.apply(suggestedFoldersList,folder.getSuggestedFolders());
}};
NewOrdersCPMComponent.prototype.handleVenueTypeClick=function(venueType){var self=this;
var orderController=this.getOrderController();
orderController.setCurrentVenueValue(venueType);
this.setCurrentVenueType(venueType);
$("#"+orderController.getId()+"OCExplorerContainer").html("<div class='cpm-tab-loading-cont'><p class='loading-spinner'></p></div></div>");
this.cclGetOrders(function(scriptReply){self.handleOrderOptionsReply(scriptReply);
});
};
NewOrdersCPMComponent.prototype.handleOrderOptionsReply=function(reply){var response;
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
if(!reply){this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(),"Component Data Retrieval Failed"),"");
return;
}if(reply.getStatus()==="S"){response=reply.getResponse();
this.processOrderOptionsData(response);
this.renderComponent();
}else{if(reply.getStatus()==="Z"){this.finalizeComponent("<span class='res-none'>"+cpmDocI18n.NO_RESULTS_FOUND+"</span>","");
}else{this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(),"Component Data Retrieval Failed"),"");
}}};
NewOrdersCPMComponent.prototype.cclGetOrders=function(callback){var self=this;
var criterion=this.getCriterion();
var sendAr=[];
var request;
var altSelCatIdList=this.getAltSelCatIdList();
var altSelCatIdsParam=(altSelCatIdList.length)?MP_Util.CreateParamArray(altSelCatIdList,1):"0.0";
sendAr.push("^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.provider_id+".0",this.getConceptCd()+".0",this.m_conceptGroupCd+".0",this.getIntentionCd()+".0",altSelCatIdsParam,"^"+this.getOcId()+"^",this.getCurrentVenueType());
request=new MP_Core.ScriptRequest(this,"ENG:NewOrdersCPMComponent_GetOrders");
request.setParameters(sendAr);
request.setName("getOrderOptions");
request.setProgramName("cpm_get_orders_flex");
request.setAsync(true);
MP_Core.XmlStandardRequest(this,request,function(reply){callback.apply(self,[reply]);
});
};
NewOrdersCPMComponent.prototype.retrieveComponentData=function(){var self=this;
this.cclGetOrders(function(reply){self.handleOrderOptionsReply(reply);
});
};
NewOrdersCPMComponent.prototype.renderComponent=function(){try{var orderController=this.getOrderController();
var html="";
html+=orderController.buildExplorerHtml();
this.finalizeComponent(html,"");
orderController.attachExplorerNavEvents();
orderController.attachExplorerContentEvents();
}catch(err){MP_Util.logJSError(err,this,"new-order-cpm.js","renderComponent");
throw err;
}};
(function(){var getScratchpadSharedResource=function(){var sharedResourceName="scratchpadSR";
var scratchpadSharedResource=MP_Resources.getSharedResource(sharedResourceName);
var dataObj={};
var listenerObj={};
if(scratchpadSharedResource){return scratchpadSharedResource;
}scratchpadSharedResource=new SharedResource(sharedResourceName);
dataObj.scratchpadObjArr=[];
scratchpadSharedResource.setIsAvailable(true);
scratchpadSharedResource.setResourceData(dataObj);
scratchpadSharedResource.setEventListenerObject(listenerObj);
scratchpadSharedResource.setEventListenerFlag(EventListener.EVENT_SCRATCHPAD_COUNT_UPDATE);
MP_Resources.addSharedResource(sharedResourceName,scratchpadSharedResource);
return scratchpadSharedResource;
};
var OrderFolder=function(){this.m_listType=0;
this.m_categoryId=0;
this.m_description="";
this.m_sequence=0;
this.m_catalogCd=0;
this.m_folderList=null;
this.m_orderList=null;
this.m_suggestedOrders=null;
this.m_suggestedFolders=null;
this.m_parentFolder=null;
this.m_hideInd=0;
this.m_openInd=0;
this.m_recommendInd=0;
this.m_hideReason="";
this.m_openReason="";
this.m_recommendReason="";
this.title="";
this.children=[];
this.isFolder=true;
this.hideCheckbox=true;
this.unselectable=false;
this.expand=false;
};
OrderFolder.prototype.getListType=function(){return this.m_listType;
};
OrderFolder.prototype.getCategoryId=function(){return this.m_categoryId;
};
OrderFolder.prototype.setCategoryId=function(id){if(typeof id!=="number"){throw new Error("Type Error: Non-number 'id' passed into 'OrderFolder' method 'setCategoryId'");
}this.m_categoryId=id;
};
OrderFolder.prototype.getSuggestedFolders=function(){if(!this.m_suggestedFolders){this.m_suggestedFolders=[];
}return this.m_suggestedFolders;
};
OrderFolder.prototype.getSuggestedOrders=function(){if(!this.m_suggestedOrders){this.m_suggestedOrders=[];
}return this.m_suggestedOrders;
};
OrderFolder.prototype.getDescription=function(){return this.m_description;
};
OrderFolder.prototype.setDescription=function(desc){if(typeof desc!=="string"){throw new Error("Type Error: Non-string 'desc' passed into 'OrderFolder' method 'setDescription'");
}this.m_description=desc;
};
OrderFolder.prototype.getSequence=function(){return this.m_sequence;
};
OrderFolder.prototype.setSequence=function(num){if(typeof num!=="number"){throw new Error("Type Error: Non-number 'num' passed into 'OrderFolder' method 'setSequence'");
}this.m_sequence=num;
};
OrderFolder.prototype.isExpanded=function(){return this.expand;
};
OrderFolder.prototype.setIsExpanded=function(flag){this.expand=flag;
};
OrderFolder.prototype.getChildFolderList=function(){if(!this.m_folderList){this.m_folderList=[];
}return this.m_folderList;
};
OrderFolder.prototype.setChildFolderList=function(list){this.m_folderList=list;
};
OrderFolder.prototype.getOrdersList=function(){if(!this.m_orderList){this.m_orderList=[];
}return this.m_orderList;
};
OrderFolder.prototype.setOrdersList=function(list){this.m_orderList=list;
};
OrderFolder.prototype.getDescColHtml=function(){var html="";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
html+="<span class='order-controller-folder-ico' title='"+cpmDocI18n.FOLDER+"'>&nbsp;</span>";
html+="<span class='order-controller-order-desc'>"+this.m_description+"</span>";
return html;
};
OrderFolder.prototype.getOrderColHtml=function(){var html="";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
html+="<a href='#' class='order-controller-folder-expand' data-dynatree-key='"+this.key+"'>"+cpmDocI18n.OPEN_FOLDER+"</a>";
return html;
};
OrderFolder.prototype.getReasonColHtml=function(){return this.m_recommendReason;
};
OrderFolder.prototype.getBreadcrumbColHtml=function(){var html="";
var bcList=[];
var parentFolder=this.m_parentFolder;
while(parentFolder){bcList.push("<span class='order-controller-bread-crumb-text' data-dynatree-key='"+parentFolder.key+"'>"+parentFolder.getDescription()+"</span>");
parentFolder=parentFolder.m_parentFolder;
}bcList.reverse();
html+=bcList.join(" ... ");
return html;
};
OrderFolder.prototype.getBreadcrumbArray=function(){var bcList=[];
var parentFolder=this;
while(parentFolder){bcList.push(parentFolder);
parentFolder=parentFolder.m_parentFolder;
}bcList.reverse();
return bcList;
};
OrderFolder.prototype.importFolder=function(folderJson,parentOrderFolder,venueType){this.m_sequence=folderJson.SEQUENCE||0;
this.m_categoryId=folderJson.CATEGORY_ID;
this.m_description=folderJson.DESCRIPTION;
this.m_catalogCd=folderJson.CATALOG_CD||0;
this.m_listType=folderJson.LIST_TYPE||1;
var ordersList=this.getOrdersList();
var childFolderList=this.getChildFolderList();
var suggestedOrdersList=this.getSuggestedOrders();
var suggestedFoldersList=this.getSuggestedFolders();
var orderOption;
var i;
var dynatreeChildren=this.children;
this.m_openInd=folderJson.OPEN_IND||0;
this.m_hideInd=folderJson.HIDE_IND||0;
this.m_recommendInd=folderJson.RECOMMEND_IND||0;
this.m_openReason=folderJson.OPEN_REASON||"";
this.m_hideReason=folderJson.HIDE_REASON||"";
this.m_recommendReason=folderJson.RECOMMEND_REASON||"";
this.title=folderJson.DESCRIPTION;
if(folderJson.CHILD&&folderJson.CHILD.length){var children=folderJson.CHILD;
var cLen=children.length;
for(i=0;
i<cLen;
i++){var child=children[i];
if(child.LIST_TYPE===1){var folder=new OrderFolder();
child.CHILD=child.SYNONYMS;
folder.importFolder(child,this,venueType);
if(folder.m_hideInd){continue;
}if(!folder.m_recommendInd){childFolderList.push(folder);
}dynatreeChildren.push(folder);
}else{if(child.LIST_TYPE>1){orderOption=new OrderOption();
orderOption.importData(child,this);
orderOption.setVenue(venueType);
if(orderOption.m_hideInd){continue;
}if(orderOption.m_recommendInd){ordersList.splice(0,0,orderOption);
dynatreeChildren.splice(0,0,orderOption);
suggestedOrdersList.push(orderOption);
}else{ordersList.push(orderOption);
dynatreeChildren.push(orderOption);
}}}}}if(suggestedOrdersList.length){this.setIsExpanded(false);
}if(parentOrderFolder){this.m_parentFolder=parentOrderFolder;
parentOrderFolder.setIsExpanded(this.isExpanded());
var parentSuggestedOrders=parentOrderFolder.getSuggestedOrders();
parentSuggestedOrders.push.apply(parentSuggestedOrders,suggestedOrdersList);
var parentSuggestedFolders=parentOrderFolder.getSuggestedFolders();
if(this.m_recommendInd){parentSuggestedFolders.push(this);
}parentSuggestedFolders.push.apply(parentSuggestedFolders,suggestedFoldersList);
}};
var OrderOption=function(){this.m_listType=0;
this.m_sequence=0;
this.m_synonymId=0;
this.m_synonym="";
this.m_sentenceId=0;
this.m_sentence="";
this.m_commentId=0;
this.m_sentenceComment="";
this.m_pathCatId=0;
this.m_pathCatSynId=0;
this.m_pathCatSynName="";
this.m_planDescription="";
this.m_catalogCd=0;
this.m_orderableTypeFlag=0;
this.m_pendingState=0;
this.m_parentFolder=null;
this.m_hideInd=0;
this.m_openInd=0;
this.m_recommendInd=0;
this.m_hideReason="";
this.m_openReason="";
this.m_recommendReason="";
this.m_dupFlag=0;
this.m_allergyFlag=0;
this.m_drugFlag=0;
this.m_mnrFlag=0;
this.m_modFlag=0;
this.m_sevFlag=0;
this.m_table_id="";
this.m_hasInteraction=false;
this.m_venue=0;
this.title="";
this.children=[];
this.isFolder=false;
this.hideCheckbox=false;
this.icon=false;
this.unselectable=false;
};
OrderOption.STATES={UNORDERED:1,ORDERED:2};
OrderOption.prototype.getListType=function(){return this.m_listType;
};
OrderOption.prototype.getVenue=function(){return this.m_venue;
};
OrderOption.prototype.setVenue=function(venue){this.m_venue=venue;
};
OrderOption.prototype.getSequence=function(){return this.m_sequence;
};
OrderOption.prototype.setSequence=function(num){if(typeof num!=="number"){throw new Error("Type Error: Non-number 'num' passed into 'OrderOption' method 'setSequence'");
}this.m_sequence=num;
};
OrderOption.prototype.hasInteraction=function(){return this.m_hasInteraction;
};
OrderOption.prototype.setHasInteraction=function(hasInteraction){this.m_hasInteraction=hasInteraction;
};
OrderOption.prototype.getPendingState=function(){return this.m_pendingState;
};
OrderOption.prototype.setPendingState=function(state){if(typeof state!=="number"){throw new Error("Type Error: Non-number 'state' passed into 'OrderOption' method 'setPendingState'");
}this.m_pendingState=state;
};
OrderOption.prototype.getFavoriteType=function(){var favType=0;
if(this.m_pathCatId){favType=2;
}else{if(this.m_orderableTypeFlag===6){favType=1;
}}return favType;
};
OrderOption.prototype.getFavSynonymId=function(){var favType=this.getFavoriteType();
return(favType===2)?this.m_pathCatId+".0":this.m_synonymId+".0";
};
OrderOption.prototype.createScratchpadObj=function(compId,sNomenId){var scratchpadObj={};
var favType=this.getFavoriteType();
var favId=(favType===2)?this.m_pathCatId:this.m_synonymId;
var favNomenId=sNomenId||"";
scratchpadObj.componentId=compId;
scratchpadObj.addedFrom="OrderOption";
scratchpadObj.favType=favType;
scratchpadObj.favName=(favType===2)?this.m_pathCatSynName:this.m_synonym;
scratchpadObj.favOrderSentDisp=(favType!==2)?this.m_sentence:"";
scratchpadObj.favSynId=this.getFavSynonymId();
scratchpadObj.favSentId=(favType===2)?this.m_pathCatSynId+".0":this.m_sentenceId+".0";
scratchpadObj.favNomenIds=favNomenId;
scratchpadObj.favId="OrderOption"+compId+favId;
scratchpadObj.favVenueType=(this.getVenue()===2)?1:0;
scratchpadObj.favOrdSet=(favType===1)?6:0;
scratchpadObj.favPPEventType=(favType===2)?0:null;
scratchpadObj.favParam=(favType===2)?this.m_pathCatId+".0|"+this.m_pathCatSynId+".0":this.m_synonymId+".0|0|"+this.m_sentenceId+".0";
return scratchpadObj;
};
OrderOption.prototype.getDescColHtml=function(){var html="";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
if(this.hasInteraction()){html+="<span class='order-controller-drug-ico'>&nbsp;</span>";
}var favType=this.getFavoriteType();
if(favType===2){html+="<span class='order-controller-powerplan-ico' title='"+cpmDocI18n.POWER_PLAN+"'>&nbsp</span>";
}else{if(favType===1){html+="<span class='order-controller-careset-ico' title='"+cpmDocI18n.CARE_SET+"'>&nbsp;</span>";
}}html+="<span class='order-controller-order-desc'>"+(favType===2)?this.m_pathCatSynName:this.m_synonym+"</span>";
html+="<span class='order-controller-order-sentence'>"+this.m_sentence+"</span>";
return html;
};
OrderOption.prototype.getReasonColHtml=function(){return this.m_recommendReason;
};
OrderOption.prototype.getBreadcrumbColHtml=function(){var html="";
var bcList=[];
var parentFolder=this.m_parentFolder;
while(parentFolder){bcList.push("<span class='order-controller-bread-crumb-text' data-dynatree-key='"+parentFolder.key+"'>"+parentFolder.getDescription()+"</span>");
parentFolder=parentFolder.m_parentFolder;
}bcList.reverse();
html+=bcList.join(" ... ");
return html;
};
OrderOption.prototype.getDynTreeTitleHtml=function(){var html="";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
if(this.hasInteraction()){html+="<span class='order-controller-drug-ico' data-dynatree-key='"+this.key+"'>&nbsp;</span>";
}var favType=this.getFavoriteType();
if(favType===2){html+="<span class='order-controller-powerplan-ico' title='"+cpmDocI18n.POWER_PLAN+"'>&nbsp</span>";
}else{if(favType===1){html+="<span class='order-controller-careset-ico' title='"+cpmDocI18n.POWER_PLAN+"'>&nbsp;</span>";
}}if(this.m_recommendInd){html+="<span class='order-controller-suggested-order'>";
}html+="<span id='"+this.m_synonymId+"_"+this.m_sentenceId+"' class='order-controller-order-desc'>"+((favType===2)?this.m_pathCatSynName:this.m_synonym)+"</span>";
html+="<span class='order-controller-order-sentence'>"+this.m_sentence+"</span>";
if(this.m_recommendInd){html+="</span>";
}return html;
};
OrderOption.prototype.getOrderColHtml=function(){var pendingState=this.getPendingState();
var btnText="";
var html="";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
if(pendingState===OrderOption.STATES.ORDERED){btnText=cpmDocI18n.REMOVE_BUTTON;
}else{if(pendingState===OrderOption.STATES.UNORDERED){btnText=cpmDocI18n.ORDER_BUTTON;
}else{btnText=cpmDocI18n.DISABLED_BUTTON;
}}html+="<button class='order-controller-order-btn'>"+btnText+"</button>";
return html;
};
OrderOption.prototype.initializePendingState=function(){var scratchpadSharedResource=getScratchpadSharedResource();
var dataObj;
var orderedState=OrderOption.STATES.ORDERED;
var unorderedState=OrderOption.STATES.UNORDERED;
var scratchpadArray;
var sLen;
var i;
this.setPendingState(unorderedState);
if(!scratchpadSharedResource){throw new Error("Runtime Error: Failed to create or retrieve scratchpad shared resource in 'OrderOption' method 'initializePendingStates'");
}dataObj=scratchpadSharedResource.getResourceData();
if(!dataObj){return;
}scratchpadArray=dataObj.scratchpadObjArr;
if(scratchpadArray&&scratchpadArray.length){var favVenue=(this.getVenue()===2)?2:1;
sLen=scratchpadArray.length;
for(i=0;
i<sLen;
i++){if(scratchpadArray[i].favSynId===this.getFavSynonymId()&&scratchpadArray[i].favSentId===(this.m_sentenceId+".0")&&scratchpadArray[i].favVenueType===favVenue){this.setPendingState(orderedState);
break;
}}}};
OrderOption.prototype.showInteractionCheckingHover=function(){var html="";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
html+="<div class='hvr order-controller-hvr'>";
html+="<div>";
html+="<dl>";
html+="<dt><span class='order-controller-bold order-controller-size'>"+this.m_synonym+"</span></dt>";
html+="<dt><span class='order-controller-bold'>"+cpmDocI18n.INTERACTIONS+":</span></dt>";
if(this.m_mnrFlag===1){html+="<dt><span><span class='order-controller-minor-ico'>&nbsp;</span><span>"+cpmDocI18n.MINOR_DRUG_INTERACTION+"</span></span></dt>";
}if(this.m_modFlag===1){html+="<dt><span><span class='order-controller-moderate-ico'>&nbsp;</span><span>"+cpmDocI18n.MODERATE_DRUG_INTERACTION+"</span></span></dt>";
}if(this.m_sevFlag===1){html+="<dt><span><span class='order-controller-severe-ico'>&nbsp;</span><span>"+cpmDocI18n.SEVERE_DRUG_INTERACTION+"</span></span></dt>";
}if(this.m_dupFlag===1){html+="<dt><span><span class='order-controller-dup-ico'>&nbsp;</span><span>"+cpmDocI18n.DUPLICATE_THERAPY_INTERACTION+"</span></span></dt>";
}if(this.m_allergyFlag===1||this.m_drugFlag===1){html+="<dt><span><span class='order-controller-allergic-ico'>&nbsp;</span><span>"+cpmDocI18n.DRUG_ALLERGY_INTERACTION+"</span></span></dt>";
}html+="</div>";
html+="</dl>";
html+="</div>";
return html;
};
OrderOption.prototype.importData=function(orderOptJson,orderFolder){if(!orderOptJson||orderOptJson.LIST_TYPE===1){return;
}this.m_sequence=orderOptJson.SEQUENCE;
this.m_listType=orderOptJson.LIST_TYPE;
this.m_synonymId=orderOptJson.SYNONYM_ID;
this.m_synonym=orderOptJson.SYNONYM;
this.m_sentenceId=orderOptJson.SENTENCE_ID;
this.m_sentence=orderOptJson.SENTENCE;
this.m_commentId=orderOptJson.COMMENT_ID;
this.m_sentenceComment=orderOptJson.SENTENCE_COMMENT;
this.m_pathCatId=orderOptJson.PATH_CAT_ID;
this.m_pathCatSynId=orderOptJson.PATH_CAT_SYN_ID;
this.m_pathCatSynName=orderOptJson.PATH_CAT_SYN_NAME;
this.m_planDescription=orderOptJson.PLAN_DESCRIPTION;
this.m_catalogCd=orderOptJson.CATALOG_CD;
this.m_orderableTypeFlag=orderOptJson.ORDERABLE_TYPE_FLAG;
this.m_parentFolder=orderFolder;
this.m_openInd=orderOptJson.OPEN_IND||0;
this.m_hideInd=orderOptJson.HIDE_IND||0;
this.m_recommendInd=orderOptJson.RECOMMEND_IND||0;
this.m_openReason=orderOptJson.OPEN_REASON||"";
this.m_hideReason=orderOptJson.HIDE_REASON||"";
this.m_recommendReason=orderOptJson.RECOMMEND_REASON||"";
this.initializePendingState();
this.title=this.getDynTreeTitleHtml();
};
var OrderController=function(id,criterion){this.m_id=id||"orderController";
this.criterion=criterion;
this.m_folderList=null;
this.m_tableList=null;
this.m_suggestedOrders=null;
this.m_suggestedFolders=null;
this.m_dynaTree=null;
this.m_dynaTreeDOM=null;
this.m_triggeringNomenclature=0;
this.m_folderMap=null;
this.m_orderMap=null;
this.m_venueTypeList=null;
this.m_idToVenueMap=null;
this.m_venueSelectionClickFunction=null;
this.m_currentVenueValue=null;
this.m_wasVenueClicked=false;
this.m_selectedFolderCategoryId=null;
this.m_conceptCd=null;
};
OrderController.prototype.wasVenueClicked=function(){return this.m_wasVenueClicked;
};
OrderController.prototype.setWasVenueClicked=function(flag){this.m_wasVenueClicked=flag;
};
OrderController.prototype.getSelectedFolderCategoryId=function(){return this.m_selectedFolderCategoryId;
};
OrderController.prototype.setSelectedFolderCategoryId=function(id){this.m_selectedFolderCategoryId=id;
};
OrderController.prototype.getCurrentVenueValue=function(){return this.m_currentVenueValue;
};
OrderController.prototype.setCurrentVenueValue=function(val){this.m_currentVenueValue=val;
};
OrderController.prototype.getCriterion=function(){return this.criterion;
};
OrderController.prototype.getVenueSelectionClickFunction=function(){return this.m_venueSelectionClickFunction;
};
OrderController.prototype.setVenueSelectionClickFunction=function(callback){if(typeof callback==="function"){this.m_venueSelectionClickFunction=callback;
}else{this.m_venueSelectionClickFunction=null;
}};
OrderController.prototype.getIdToVenueMap=function(){if(!this.m_idToVenueMap){this.m_idToVenueMap={};
}return this.m_idToVenueMap;
};
OrderController.prototype.setIdToVenueMap=function(map){this.m_idToVenueMap=map;
};
OrderController.prototype.getVenueTypeList=function(){return this.m_venueTypeList;
};
OrderController.prototype.setVenueTypeList=function(list){this.m_venueTypeList=list;
};
OrderController.prototype.getFolderMap=function(){if(!this.m_folderMap){this.m_folderMap={};
}return this.m_folderMap;
};
OrderController.prototype.setFolderMap=function(map){this.m_folderMap=map;
};
OrderController.prototype.getOrderMap=function(){if(!this.m_orderMap){this.m_orderMap={};
}return this.m_orderMap;
};
OrderController.prototype.setOrderMap=function(map){this.m_orderMap=map;
};
OrderController.prototype.setTriggeringNomenclature=function(nomenclatureId){this.m_triggeringNomenclature=nomenclatureId;
};
OrderController.prototype.getTriggeringNomenclature=function(){return this.m_triggeringNomenclature;
};
OrderController.prototype.getId=function(){return this.m_id;
};
OrderController.prototype.getFolderList=function(){if(!this.m_folderList){this.m_folderList=[];
}return this.m_folderList;
};
OrderController.prototype.setFolderList=function(list){this.m_folderList=list;
};
OrderController.prototype.getTableList=function(){if(!this.m_tableList){this.m_tableList=[];
}return this.m_tableList;
};
OrderController.prototype.getSuggestedOrders=function(){if(!this.m_suggestedOrders){this.m_suggestedOrders=[];
}return this.m_suggestedOrders;
};
OrderController.prototype.setSuggestedOrders=function(value){this.m_suggestedOrders=value;
return this.m_suggestedOrders;
};
OrderController.prototype.getSuggestedFolders=function(){if(!this.m_suggestedFolders){this.m_suggestedFolders=[];
}return this.m_suggestedFolders;
};
OrderController.prototype.setSuggestedFolders=function(value){this.m_suggestedFolders=value;
return this.m_suggestedFolders;
};
OrderController.prototype.setConceptCd=function(conceptCd){this.m_conceptCd=conceptCd;
};
OrderController.prototype.getConceptCd=function(){return this.m_conceptCd;
};
OrderController.prototype.updateOrderOptionButton=function(orderOption,jqButton){var pendingState=orderOption.getPendingState();
var states=OrderOption.STATES;
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
if(pendingState===states.UNORDERED){jqButton.text(cpmDocI18n.ORDER_BUTTON);
}else{if(pendingState===states.ORDERED){jqButton.text(cpmDocI18n.REMOVE_BUTTON);
}}};
OrderController.prototype.addOrderTimerTrigger=function(orderOption,conceptCode){var selectedFolderId=null;
var favSynId=null;
var favType=null;
var favSentId=null;
var suggestedFolders=null;
var suggestedFolderIds=null;
var synonym=0;
var sentenceId=0;
var suggestedOrders=null;
var meta1=null;
var meta2=null;
var criterion=null;
var category_mean=null;
var timer=null;
selectedFolderId=orderOption.m_parentFolder.m_categoryId;
favSynId=orderOption.getFavSynonymId();
favType=orderOption.getFavoriteType();
favSentId=(favType===2)?orderOption.m_pathCatSynId+".0":orderOption.m_sentenceId+".0";
suggestedFolders=this.getSuggestedFolders();
suggestedFolderIds=[];
var i;
for(i=0;
i<suggestedFolders.length;
++i){suggestedFolderIds.push(suggestedFolders[i].m_categoryId);
}suggestedOrders=this.getSuggestedOrders();
if(suggestedOrders.length>0){if(suggestedOrders[0].m_synonym){synonym=suggestedOrders[0].m_synonym;
}if(suggestedOrders[0].m_sentenceId){sentenceId=suggestedOrders[0].m_sentenceId;
}}meta1=conceptCode+"|"+selectedFolderId+"|"+favSynId+"|"+favSentId;
meta2=conceptCode+"|"+suggestedFolderIds+"|"+synonym+"|"+sentenceId;
criterion=this.getCriterion();
category_mean=criterion.category_mean;
timer=new CapabilityTimer("CAP:MPG_CPM-O1_ITEM_ORDERED",category_mean);
timer.addMetaData("rtms.legacy.metadata.1",meta1);
timer.addMetaData("rtms.legacy.metadata.2",meta2);
timer.capture();
};
OrderController.prototype.addToOrRemoveFromScratchpad=function(orderScratchpadObj,isRemoving){var scratchpadSharedResource=getScratchpadSharedResource();
var dataObj;
var scratchpadArray;
var scratchpadObj;
var i;
if(!orderScratchpadObj){throw new Error("Type Error: 'orderScratchpadObj' passed into 'OrderController' method 'addToOrRemoveFromScratchpad' is invalid");
}if(!scratchpadSharedResource){throw new Error("Runtime Error: Failed to create or retrieve scratchpad shared resource in 'OrderController' method 'addToOrRemoveFromScratchpad'");
}dataObj=scratchpadSharedResource.getResourceData();
if(!dataObj){return;
}scratchpadArray=dataObj.scratchpadObjArr;
if(scratchpadArray){if(isRemoving){i=scratchpadArray.length;
while(i--){scratchpadObj=scratchpadArray[i];
if(scratchpadObj.favSynId===orderScratchpadObj.favSynId&&scratchpadObj.favSentId===orderScratchpadObj.favSentId){scratchpadArray.splice(i,1);
break;
}}}else{scratchpadArray.push(orderScratchpadObj);
}}dataObj.scratchpadObjArr=scratchpadArray;
MP_Resources.setSharedResourceData(scratchpadSharedResource.getName(),dataObj);
scratchpadSharedResource.notifyResourceConsumers();
};
OrderController.prototype.toggleOrderOptionInScratchpad=function(orderOption){var id=this.getId();
var pendingState=orderOption.getPendingState();
var states=OrderOption.STATES;
var doRemove=true;
var sNomenclatureId=(this.getTriggeringNomenclature())?this.getTriggeringNomenclature()+"":"";
if(pendingState===states.ORDERED){doRemove=false;
}this.addToOrRemoveFromScratchpad(orderOption.createScratchpadObj(id,sNomenclatureId),doRemove);
};
OrderController.prototype.togglePendingStateFor=function(orderOption){var states=OrderOption.STATES;
var pendingState=orderOption.getPendingState();
if(pendingState===states.ORDERED){orderOption.setPendingState(states.UNORDERED);
}else{if(pendingState===states.UNORDERED){orderOption.setPendingState(states.ORDERED);
}}};
OrderController.prototype.checkForInteractions=function(orderOptsList){if(!window.external||!window.external.DiscernObjectFactory){return;
}if(!InteractionChecking){return;
}if(!orderOptsList||!orderOptsList.length){return;
}if(!InteractionChecking.GetisDllSupported()){return;
}var personId=this.criterion.person_id;
var synId;
var synName;
var sentDisp;
var oLen=orderOptsList.length;
var venueType=(this.getCurrentVenueValue()===2)?2:1;
var i;
InteractionChecking.init();
if(InteractionChecking.GetMedicationCnt()>0){InteractionChecking.ClearMedicationCollection();
}for(i=0;
i<oLen;
i++){var orderOpt=orderOptsList[i];
if(orderOpt.getFavoriteType()!==0){continue;
}synId=orderOpt.getFavSynonymId();
synName=orderOpt.m_synonym;
sentDisp=orderOpt.m_sentence||"n/a";
InteractionChecking.AddMedication(synId,synName,sentDisp,venueType);
}if(!InteractionChecking.GetMedicationCnt()){return;
}var interactions=InteractionChecking.CheckforInteractions(personId);
if(!interactions){return;
}this.setInteractionCheckingFlags(orderOptsList,interactions);
};
OrderController.prototype.setInteractionCheckingFlags=function(orderOptsList,interactionsList){if(!orderOptsList||!orderOptsList.length){return;
}if(!interactionsList){return;
}var interactionCheckingMeds=interactionsList.Medications;
var icmLen=interactionCheckingMeds.length;
var oLen=orderOptsList.length;
var orderIndx;
var medIndx;
for(medIndx=0;
medIndx<icmLen;
medIndx++){var med=interactionCheckingMeds[medIndx];
for(orderIndx=0;
orderIndx<oLen;
orderIndx++){var orderOpt=orderOptsList[orderIndx];
if(orderOpt.getFavSynonymId()!==med.synonym_id){continue;
}var medTypes=med.types;
var tLen=medTypes.length;
var typeIdx;
var hasInteraction=false;
for(typeIdx=0;
typeIdx<tLen;
typeIdx++){var type=medTypes[typeIdx];
var iType=type.InteractionType;
var severityLevel=type.SeverityLevel;
switch(iType){case 0:orderOpt.m_drugFlag=1;
hasInteraction=true;
break;
case 1:case 2:orderOpt.m_allergyFlag=1;
hasInteraction=true;
break;
case 3:orderOpt.m_dupFlag=1;
hasInteraction=true;
break;
default:break;
}switch(severityLevel){case 1:orderOpt.m_mnrFlag=1;
hasInteraction=true;
break;
case 2:orderOpt.m_modFlag=1;
hasInteraction=true;
break;
case 3:orderOpt.m_sevFlag=1;
hasInteraction=true;
break;
default:break;
}}orderOpt.setHasInteraction(hasInteraction);
}}};
OrderController.prototype.buildVenueSectionHtml=function(){var DEFAULT_VENUE_VAL=2;
this.setIdToVenueMap(null);
var idToVenueMap=this.getIdToVenueMap();
var currentVenueVal=this.getCurrentVenueValue();
var html="";
var i;
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
var venueTypeList=this.getVenueTypeList();
if(venueTypeList&&venueTypeList.length){var vLen=venueTypeList.length;
var hasSelectedVenue=false;
html+="<div class='order-controller-exp-venue-sec' id='"+this.getId()+"VenueSelectionSection'>";
html+="<div class='order-controller-exp-venue-inner'>"+cpmDocI18n.VENUE+": ";
for(i=0;
i<vLen;
i++){var id=this.getId()+"VenueItem"+i;
var venueObj=venueTypeList[i];
idToVenueMap[id]=venueObj;
var selectedCss="";
var display=venueObj.DISPLAY||null;
if(!display){continue;
}if(currentVenueVal){if(currentVenueVal===venueObj.SOURCE_COMPONENT_LIST[0].VALUE){selectedCss=" enabled";
}}else{if(venueObj.SOURCE_COMPONENT_LIST[0].VALUE===DEFAULT_VENUE_VAL&&!hasSelectedVenue){selectedCss=" enabled";
this.setCurrentVenueValue(DEFAULT_VENUE_VAL);
hasSelectedVenue=true;
}}html+="<span id='"+id+"' class='order-controller-venue-btn"+selectedCss+"'>"+display+"</span>";
}html+="</div>";
html+="</div>";
}return html;
};
OrderController.prototype.venueSelectionClick=function(event){var idToVenueMap=this.getIdToVenueMap();
var jqVenueButton=$(event.currentTarget);
var venueSelectionClickFunc=this.getVenueSelectionClickFunction();
var id=jqVenueButton.prop("id");
var venueObj=idToVenueMap[id];
if(!venueSelectionClickFunc||!venueObj||jqVenueButton.hasClass("enabled")){return;
}$("#"+this.getId()+"VenueSelectionSection").find(".order-controller-venue-btn").removeClass("enabled");
jqVenueButton.addClass("enabled");
var venueVal=venueObj.SOURCE_COMPONENT_LIST[0].VALUE;
venueSelectionClickFunc(venueVal);
};
OrderController.prototype.populateExplorerContentSection=function(folder){if(!folder){return;
}this.setOrderMap(null);
var orderMap=this.getOrderMap();
var jqExplorerContent=$("#"+this.getId()+"ExplorerContent");
var orderList=folder.getOrdersList();
var oLen=orderList.length;
var i;
var html="";
var orderHtmlId=this.getId()+"ExplorerContentItem_";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
html+=this.buildVenueSectionHtml();
if(folder.m_recommendInd&&folder.m_recommendReason!==""){html+="<div class='order-controller-exp-rec-folder order-controller-explorer-content-item'><span class='secondary-text'>"+cpmDocI18n.RECOMMENDED_REASON+"</span>"+folder.m_recommendReason+"</div>";
}for(i=0;
i<oLen;
i++){var order=orderList[i];
var favType=order.getFavoriteType();
var fullId=orderHtmlId+i;
orderMap[fullId]=order;
var pendingState=order.getPendingState();
var btnText="";
if(pendingState===OrderOption.STATES.ORDERED){btnText=cpmDocI18n.REMOVE_BUTTON;
}else{if(pendingState===OrderOption.STATES.UNORDERED){btnText=cpmDocI18n.ORDER_BUTTON;
}else{btnText=cpmDocI18n.DISABLED_BUTTON;
}}if(order.m_recommendInd&&order.m_recommendReason){html+="<div class='order-controller-exp-rec-order'>"+order.m_recommendReason+"</div>";
}html+="<div id='"+fullId+"' class='order-controller-explorer-content-item'>";
if(order.hasInteraction()){html+="<span class='order-controller-drug-ico'>&nbsp;</span>";
}if(favType===2){html+="<span class='order-controller-powerplan-ico' title='"+cpmDocI18n.POWER_PLAN+"'>&nbsp;</span>";
}else{if(favType===1){html+="<span class='order-controller-careset-ico' title='"+cpmDocI18n.CARE_SET+"'>&nbsp;</span>";
}}html+="<span class='order-controller-exp-cont-desc-col"+((order.m_recommendInd)?" order-controller-suggested-order":"")+"'>";
html+="<div class='order-controller-exp-cont-lbl'>"+((favType===2)?order.m_pathCatSynName:order.m_synonym)+"</div>";
html+="<div class='order-controller-exp-cont-sent secondary-text'>"+order.m_sentence+"</div>";
html+="</span>";
html+="<span class='order-controller-exp-cont-action-col'>";
html+="<button class='order-controller-order-btn'>"+btnText+"</button>";
html+="</span>";
html+="</div>";
}if(!oLen){html+="<div class='res-none'>"+cpmDocI18n.NO_ORDERS+"</div>";
}jqExplorerContent.html(html);
};
OrderController.prototype.attachExplorerContentEvents=function(){var self=this;
var controllerId=this.getId();
var jqExplorerContentContainer=$("#"+controllerId+"ExplorerContent");
var hoverTimeout=null;
var tooltip=new MPageTooltip().setShowDelay(0);
function routeTask(event){function clearTooltip(){if(tooltip.getContent()){tooltip.getContent().remove();
}if(hoverTimeout){clearTimeout(hoverTimeout);
}}function showHover(jqIcon,orderOption,e){var posX=e.pageX;
var posY=e.pageY;
var content=orderOption.showInteractionCheckingHover();
tooltip.setX(posX).setY(posY).setAnchor(jqIcon.get(0)).setContent(content);
tooltip.show();
}if(!event){return;
}var eventType=event.type;
var jqContentItem=$(event.currentTarget).closest(".order-controller-explorer-content-item");
var jqSrcElement=$(event.target);
var orderMap=self.getOrderMap();
var orderId=jqContentItem.prop("id");
var order=orderMap[orderId];
if(!order){return;
}if(eventType==="click"&&jqSrcElement.hasClass("order-controller-order-btn")){self.togglePendingStateFor(order);
self.toggleOrderOptionInScratchpad(order);
var states=OrderOption.STATES;
var pendingState=order.getPendingState();
if(pendingState===states.ORDERED){var conceptCode=self.getConceptCd();
self.addOrderTimerTrigger(order,conceptCode);
}self.updateOrderOptionButton(order,jqSrcElement);
}else{if(eventType==="mouseenter"&&jqSrcElement.hasClass("order-controller-drug-ico")){clearTooltip();
hoverTimeout=setTimeout(function(){showHover(jqSrcElement,order,event);
},500);
}else{if(eventType==="mouseleave"&&jqSrcElement.hasClass("order-controller-drug-ico")){clearTooltip();
}}}}jqExplorerContentContainer.on("click",".order-controller-explorer-content-item",function(event){routeTask(event);
});
jqExplorerContentContainer.on("mouseenter mouseleave",".order-controller-drug-ico",function(event){routeTask(event);
});
jqExplorerContentContainer.on("click",".order-controller-venue-btn",function(event){self.venueSelectionClick(event);
});
};
OrderController.prototype.attachExplorerNavEvents=function(){var self=this;
var controllerId=this.getId();
var jqExplorerNavBar=$("#"+controllerId+"ExplorerNavigationBar");
var folderMap=this.getFolderMap();
jqExplorerNavBar.on("click","li",function(event){var jqTarget=$(event.currentTarget);
var navId=jqTarget.prop("id");
var jqChildFolders=jqTarget.children("ul");
if(!jqTarget.hasClass("selected")){jqExplorerNavBar.find(".selected").removeClass("selected");
jqTarget.addClass("selected");
jqChildFolders.removeClass("hide");
var folder=folderMap[navId];
self.setSelectedFolderCategoryId(folder.getCategoryId());
try{self.checkForInteractions(folder.getOrdersList());
}catch(err){logger.logScriptCallError("Order Controller","inn_util_interaction_checking.js","new-order-cpm-o1.js","attachExplorerNavEvents");
}finally{self.populateExplorerContentSection(folder);
Util.cancelBubble(event);
return false;
}}else{if(jqChildFolders.hasClass("hide")){jqChildFolders.removeClass("hide");
}else{jqChildFolders.addClass("hide");
}}Util.cancelBubble(event);
return false;
});
var suggestedFolder=$("#"+controllerId+"ExplorerNavigationBarSuggestedItem_0");
if(suggestedFolder.length){var folderId=suggestedFolder.prop("id");
var folder=folderMap[folderId];
var childFolders=folder.getChildFolderList();
if(childFolders.length){suggestedFolder.click();
suggestedFolder.find("li").first().click();
}else{suggestedFolder.click();
}}};
OrderController.prototype.buildExplorerHtml=function(){var folderList=this.getFolderList();
var html="";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
html+="<div id='"+this.getId()+"OCExplorerContainer' class='order-controller-explorer-container'>";
html+="<div class='order-controller-explorer-row'>";
html+=this.buildExplorerNavigationHtml(folderList);
html+="<span id='"+this.getId()+"ExplorerContent' class='order-controller-content'>"+this.buildVenueSectionHtml()+"<div class='res-none'>"+cpmDocI18n.SELECT_ORDER_FOLDER+"</div></span>";
html+="</div>";
html+="</div>";
return html;
};
OrderController.prototype.buildExplorerFolderHtml=function(orderFolderList,idPrefix,isRoot){if(!orderFolderList||!orderFolderList.length){return"";
}var folderMap=this.getFolderMap();
var oLen=orderFolderList.length;
var i;
var isRootCss=(!isRoot)?"order-controller-nav-child hide":"";
var html="";
for(i=0;
i<oLen;
i++){var folder=orderFolderList[i];
var id=idPrefix+"_"+i;
folder.navId=id;
folderMap[id]=folder;
html+="<ul class='"+isRootCss+"'><li id='"+id+"' class='order-controller-navbar-item'>";
html+="<span class='order-controller-navbar-item-lbl'>"+folder.getDescription()+"</span>";
html+=this.buildExplorerFolderHtml(folder.getChildFolderList(),id);
html+="</li></ul>";
}return html;
};
OrderController.prototype.buildExplorerNavigationHtml=function(folderList){var id=this.getId()+"ExplorerNavigationBar";
var html="";
var cpmDocI18n=i18n.discernabu.new_order_cpm_o1;
if(this.getSuggestedFolders().length||this.getSuggestedOrders().length){var suggestedFolder=new OrderFolder();
suggestedFolder.setDescription(cpmDocI18n.DESCRIPTION);
suggestedFolder.setChildFolderList(this.getSuggestedFolders());
suggestedFolder.setOrdersList(this.getSuggestedOrders());
suggestedFolder.setCategoryId(-999);
}var folderId=id+"Item";
html+="<span class='order-controller-navbar' id='"+id+"'>";
if(suggestedFolder){html+=this.buildExplorerFolderHtml([suggestedFolder],id+"SuggestedItem",true);
}html+=this.buildExplorerFolderHtml(folderList,folderId,true);
html+="</span>";
return html;
};
NewOrdersCPMComponent.prototype.OrderController=OrderController;
NewOrdersCPMComponent.prototype.OrderOption=OrderOption;
NewOrdersCPMComponent.prototype.OrderFolder=OrderFolder;
})();
function TableElementHoverExtension(){this.templateMap={};
return this;
}TableElementHoverExtension.prototype=new HoverExtension();
TableElementHoverExtension.prototype.constructor=TableElementHoverExtension;
TableElementHoverExtension.prototype.addHoverForElement=function(elementClass,renderer){if(!elementClass){throw new Error("Called addHoverForColumn on TableElementHoverExtension with null element for element parameter");
}this.templateMap[elementClass]=HoverRenderFactory.getHoverRenderer(renderer);
this.setTarget("."+elementClass);
};
TableElementHoverExtension.prototype.showHover=function(event,table,anchor){var data={};
var templateMap=this.templateMap;
var jqAnchor=$(anchor);
var hoverRenderer=null;
for(var key in templateMap){if(templateMap.hasOwnProperty(key)){if(jqAnchor.hasClass(key)){hoverRenderer=templateMap[key];
break;
}}}if(!hoverRenderer){return;
}data.RESULT_DATA=ComponentTableDataRetriever.getResultFromTable(table,jqAnchor.closest("dl.result-info").get(0));
data.ELEMENT_CLASS=key;
data.SOURCE="TableElementHoverExtension:ELEMENT_HOVER";
data.EVENT=event;
var content=hoverRenderer.render(data);
if(!content){return;
}var tooltip=this.getTooltip();
tooltip.setX(event.pageX).setY(event.pageY).setAnchor(anchor).setContent(content);
tooltip.show();
};
CPMController.prototype.addComponentMapping("ORDEROPTS",NewOrdersCPMComponent);
MP_Util.setObjectDefinitionMapping("PW_ORDER_OPTS_PARAM",NewOrdersCPMComponent);
