function PhysicianImpressionsCPMComponentStyle(){this.initByNamespace("piCPM");
}PhysicianImpressionsCPMComponentStyle.prototype=new ComponentStyle();
function PhysicianImpressionsCPMComponent(criterion){var myi18n=i18n.discernabu.physician_impression_cpm_o1;
this.setCriterion(criterion);
this.setStyles(new PhysicianImpressionsCPMComponentStyle());
this.setScope(1);
this.setLabel(myi18n.LABEL);
this.setDocumentationTimerName("MPG.PHYS-IMPRESSION.CPM");
this.setComponentLoadTimerName("USR:"+this.getDocumentationTimerName()+" - load component");
this.setComponentRenderTimerName("ENG:"+this.getDocumentationTimerName()+" - render component");
this.m_editor=null;
this.m_workflowId=0;
this.m_existingDocumentation="";
}PhysicianImpressionsCPMComponent.prototype=new DocumentationBaseComponent();
PhysicianImpressionsCPMComponent.prototype.constructor=DocumentationBaseComponent;
CPMMPageComponent.attachMethods(PhysicianImpressionsCPMComponent);
PhysicianImpressionsCPMComponent.prototype.setExistingDocumentation=function(doc){if(typeof doc!=="string"){throw new Error("Type Error: Non-string 'doc' passed into 'setExistingDocumentation' method on 'PhysicianImpressionsCPMComponent'");
}this.m_existingDocumentation=doc;
};
PhysicianImpressionsCPMComponent.prototype.getExistingDocumentation=function(){return this.m_existingDocumentation;
};
PhysicianImpressionsCPMComponent.prototype.getResourcePathwayId=function(){var sharedResource;
var resourceData;
var concept;
var resourcePathwayId;
if(MP_Resources&&typeof MP_Resources.getSharedResource==="function"){sharedResource=MP_Resources.getSharedResource("CP_SETTINGS_"+this.getPathwayId());
}if(sharedResource&&typeof sharedResource.getResourceData==="function"){resourceData=sharedResource.getResourceData();
}if(resourceData&&resourceData.PATHWAY_NAME){concept=resourceData.PATHWAY_NAME+"_"+this.getPathwayInstanceId();
resourcePathwayId=concept.replace(/[^\w]+/g,"");
}if(!resourcePathwayId||!resourcePathwayId.trim()){logger.logError("Resource Pathway Id must exist. Component: PhysicianImpressionsCPMComponent File: physician-impression-cpm-o1.js Function: getResourcePathayId");
return undefined;
}return resourcePathwayId;
};
PhysicianImpressionsCPMComponent.prototype.cleanUp=function(){var compId=this.getStyles().getId();
CPMMPageComponent.prototype.cleanUp.call(this,null);
CERN_EventListener.removeListener(this,EventListener.EVENT_DYN_DOC_UPDATE,this.processWorkflowInfo,this);
var jqCompContent=$("#"+compId).children(".sec-content");
jqCompContent.off("keyup.piCPM");
this.resetDirty();
var editor=this.getEditorInstance();
if(editor){editor.destroy();
}};
PhysicianImpressionsCPMComponent.prototype.handleGetCPMDocumentation=function(reply){var resourcePathwayId=this.getResourcePathwayId();
if(!reply){throw new Error("No 'reply' passed into 'handleGetCPMDocumentation' method on 'PhysicianImpressionsCPMComponent'");
}var replyStatus=reply.getStatus();
if(replyStatus!=="S"&&replyStatus!=="Z"){this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(),"CPM Documentation Retrieval failed"),"");
return;
}var response=reply.getResponse();
var canAddDoc=!!response.PRIV_ADD_DOC;
this.setWorkflowId(response.WORKFLOW_ID||0);
if(!canAddDoc){var noPrivMsg="<span class='res-none'>"+i18n.discernabu.physician_impression_cpm_o1.NO_PRIVS+"</span>";
this.finalizeComponent(noPrivMsg,"");
}this.setExistingDocumentation("");
if(replyStatus==="S"){var meaning;
var cpmList=response.CPM_LIST||[];
var cLen=cpmList.length;
var i;
for(i=0;
i<cLen;
i++){meaning=cpmList[i].CPM_MEAN||"";
if(meaning===resourcePathwayId){this.setExistingDocumentation(cpmList[i].LONG_TEXT);
break;
}}}this.createTextEditor();
};
PhysicianImpressionsCPMComponent.prototype.createTextEditor=function(){var self=this;
var compId=this.getStyles().getId();
var criterion=this.getCriterion();
var jqDocContainer=$("#"+compId+"DocContent");
var existingDocumentation=this.getExistingDocumentation();
var docContainerDOM;
var editor;
var configObj;
if(existingDocumentation){jqDocContainer.html(existingDocumentation);
}docContainerDOM=(jqDocContainer.length)?jqDocContainer.get(0):null;
var criterionLocale=criterion.locale_id;
var basePath=criterion.static_content+"/ckeditor/";
if(!docContainerDOM||docContainerDOM.nodeType!==1){return;
}editor=this.getEditorInstance();
if(editor){editor.destroy();
}if((typeof CKEDITOR!=="undefined")&&CKEDITOR){window.CKEDITOR_BASEPATH=basePath;
configObj={};
CKEDITOR.basePath=basePath;
CKEDITOR.editorConfig(configObj);
criterionLocale=criterionLocale.toLowerCase();
switch(criterionLocale){case"fr_fr":criterionLocale="fr";
break;
case"en_us":criterionLocale="en";
break;
case"en_au":criterionLocale="en-au";
break;
case"es_es":criterionLocale="es";
break;
case"de_de":criterionLocale="de";
break;
case"en_gb":criterionLocale="en-gb";
break;
default:criterionLocale="en";
break;
}configObj.language=criterionLocale;
configObj.baseHref=basePath;
configObj.startupFocus=false;
configObj.height="";
configObj.preSaveFunction=this.getPreSaveFunction();
configObj.autosaveFunction=function(ckeditorContent,statusCallback){self.saveText(ckeditorContent,statusCallback);
};
configObj.setDirtyFunction=function(){self.setDirty();
};
configObj.resetDirtyFunction=function(){self.resetDirty();
};
configObj.placeholderText="";
CKEDITOR.config.customConfig="";
configObj.removePlugins="font";
CKEDITOR.getUrl=function(resource){if(!CKEDITOR.basePathStaticContent){CKEDITOR.basePathStaticContent=JSON.parse(m_criterionJSON).CRITERION.STATIC_CONTENT+"/ckeditor/";
}if(resource.indexOf(CKEDITOR.basePathStaticContent)===-1&&resource.indexOf("/")!==0){resource=CKEDITOR.basePathStaticContent+resource;
}if(this.timestamp&&resource.charAt(resource.length-1)!=="/"&&!(/[&?]t=/).test(resource)){resource+=(resource.indexOf("?")>=0?"&":"?")+"t="+this.timestamp;
}return resource;
};
CKEDITOR.plugins.initializePlugins(configObj,function(){self.setEditorInstance(CKEDITOR.replace(docContainerDOM,configObj));
var jqComponent=$("#"+compId);
var jqScrollContainer=jqComponent.closest(".cpm");
var jqCompContent=jqComponent.children(".sec-content");
jqCompContent.off("click.piCPM");
jqCompContent.on("click.piCPM","#cke_"+compId+"DocContent",function(){self.elementAutoScroll($("#cke_"+compId+"DocContent"),jqScrollContainer);
});
});
}};
PhysicianImpressionsCPMComponent.prototype.initializeInfo=function(){var self=this;
var criterion=this.getCriterion();
var request;
var sendAr=[];
var loadTimer=new RTMSTimer(this.getComponentLoadTimerName(),criterion.category_mean);
var renderTimerFailed=false;
var resourcePathwayId=this.getResourcePathwayId();
sendAr.push("^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.provider_id+".0",criterion.ppr_cd+".0","^"+resourcePathwayId+"^");
request=new ScriptRequest();
request.setProgramName("MP_GET_CPM_PI");
request.setParameterArray(sendAr);
request.setLoadTimer(loadTimer);
request.setResponseHandler(function(scriptReply){var renderTimer=new RTMSTimer(self.getComponentRenderTimerName(),criterion.category_mean);
renderTimer.start();
try{self.handleGetCPMDocumentation(scriptReply);
}catch(err){self.finalizeComponent(self.generateScriptFailureHTML(),"");
renderTimer.fail();
renderTimerFailed=true;
throw (err);
}finally{if(!renderTimerFailed){renderTimer.stop();
}}});
request.performRequest();
};
PhysicianImpressionsCPMComponent.prototype.convertParagraphToDiv=function(html){var pStartTagRegex=/<p(.*?)>/gi;
var pEndTagRegex=/<\/p>/gi;
var divBlankRegex=/<div(.*?)>&nbsp;<\/div>/gi;
var convertedHtml=html.replace(pStartTagRegex,"<div$1>");
convertedHtml=convertedHtml.replace(pEndTagRegex,"</div>");
convertedHtml=convertedHtml.replace(divBlankRegex,"<div$1><span>&nbsp;</span></div>");
return convertedHtml;
};
PhysicianImpressionsCPMComponent.prototype.convertDivToParagraph=function(html){var divStartTagRegex=/<div(.*?)>/gi;
var divEndTagRegex=/<\/div>/gi;
var convertedHtml=html.replace(divStartTagRegex,"<p$1>");
convertedHtml=convertedHtml.replace(divEndTagRegex,"</p>");
return convertedHtml;
};
PhysicianImpressionsCPMComponent.prototype.prepHtmlForRtf=function(html){var idAttrRegex=/(<div[^>]*id=)([\d\w\$\_\:]*)/ig;
var startTagRegex=/(<\w*)/ig;
var endTagRegex=/(<\/[^>]*)/ig;
var stylesRegex=/(<\w*[^>]*style=["|'])([^\"|^\']*)/ig;
var hexColorRegex=/#[0-9a-f]*/ig;
html=html.replace(idAttrRegex,function(match,captureGroup1,captureGroup2){var fixedId=captureGroup1;
if(captureGroup2){fixedId+='"'+captureGroup2+'"';
}return fixedId;
});
html=html.replace(startTagRegex,function(match){return match.toLowerCase();
});
html=html.replace(endTagRegex,function(match){return match.toLowerCase();
});
html=html.replace(stylesRegex,function(match,startOfTagToStyles,styleAttributes){var fixedStyles=startOfTagToStyles;
if(styleAttributes){styleAttributes=styleAttributes.replace(hexColorRegex,function(matched){var value=matched.replace("#","");
var hex=parseInt(value,16);
var r=(hex>>16)&255;
var g=(hex>>8)&255;
var b=hex&255;
return"rgb("+r+","+g+","+b+")";
});
fixedStyles+=styleAttributes.toLowerCase();
if(fixedStyles.charAt(fixedStyles.length-1)!==";"){fixedStyles+=";";
}}return fixedStyles;
});
return html;
};
PhysicianImpressionsCPMComponent.prototype.cclSaveText=function(text,statusCallback){var criterion=this.getCriterion();
var request;
var sendAr=[];
var self=this;
var ddi18n=i18n.discernabu.documentation_base;
var resourcePathwayId=this.getResourcePathwayId();
if(this.isStaleWorkflow()){MP_Util.AlertConfirm(ddi18n.REFRESH_REQUIRED_MSG,ddi18n.REFRESH_REQUIRED_TITLE,i18n.discernabu.CONFIRM_OK,null,false,null);
var editor=this.getEditorInstance();
$("#"+editor.container.$.id+" button.autosave.save").attr("disabled","disabled");
this.resetDirty();
editor.resetDirty();
this.setLastSaveText(null);
return;
}sendAr.push("^MINE^",criterion.person_id+".0",criterion.encntr_id+".0",criterion.provider_id+".0",this.getWorkflowId()+".0","^"+resourcePathwayId+"^","^"+text+"^");
request=new ScriptRequest();
request.setProgramName("MP_SAVE_CPM_PI");
request.setParameterArray(sendAr);
request.setResponseHandler(function(scriptReply){var df=MP_Util.GetDateFormatter();
var lastSavedText="";
if(scriptReply.getStatus()==="S"){self.resetDirty();
self.getEditorInstance().resetDirty();
lastSavedText=i18n.discernabu.documentation_base.LAST_SAVE+df.format(new Date(),mp_formatter.DateTimeFormatter.FULL_DATE_TIME_2YEAR);
self.setLastSaveText(lastSavedText);
if(typeof statusCallback==="function"){statusCallback("S");
}return;
}lastSavedText=ddi18n.SAVE_FAILED_MSG;
self.setLastSaveText(lastSavedText);
if(typeof statusCallback==="function"){statusCallback("F");
}});
request.performRequest();
};
PhysicianImpressionsCPMComponent.prototype.saveText=function(ckeditorContent,statusCallback){ckeditorContent=ckeditorContent.replace(/\s/gi," ");
ckeditorContent=ckeditorContent.replace(/(.*<body>)(.*)(<\/body>.*)/gi,function(match,c1,c2){return c2;
});
var modifiedCkeditorContent=ckeditorContent.replace(/\$/g,"&#36;");
modifiedCkeditorContent=modifiedCkeditorContent.replace(/\^/g,"&#94;");
modifiedCkeditorContent=this.convertParagraphToDiv(modifiedCkeditorContent);
modifiedCkeditorContent=this.prepHtmlForRtf(modifiedCkeditorContent);
this.cclSaveText(modifiedCkeditorContent,statusCallback);
};
PhysicianImpressionsCPMComponent.prototype.elementAutoScroll=function(jqElement,jqScrollContainer){if(!jqElement||!jqElement.length||!jqScrollContainer||!jqScrollContainer.length){return;
}var containerOffset=jqScrollContainer.offset();
var elementOffset=jqElement.offset();
var containerHeight=jqScrollContainer.height();
var elementHeight=jqElement.outerHeight(false);
var containerTop=containerOffset.top;
var elementTop=elementOffset.top;
var containerBottom=containerTop+containerHeight;
var elementBottom=elementTop+elementHeight;
var containerScrollTop=jqScrollContainer.scrollTop();
var delta=0;
if(elementTop>=containerTop&&elementBottom<=containerBottom){return;
}else{if(elementTop<=containerTop&&elementBottom>=containerBottom){return;
}else{if(elementTop<containerTop){delta=containerTop-elementTop;
jqScrollContainer.scrollTop(containerScrollTop-delta);
}else{if(elementBottom>containerBottom){delta=elementBottom-containerBottom;
jqScrollContainer.scrollTop(containerScrollTop+delta);
}}}}};
PhysicianImpressionsCPMComponent.prototype.retrieveComponentData=function(){var self=this;
var ddi18n=i18n.discernabu.documentation_base;
var ext=external;
var hasObjectFactory=ext&&("DiscernObjectFactory" in ext);
var hasAutoText=hasObjectFactory&&(ext.DiscernObjectFactory("AUTOTEXTHELPER"));
var hasClipboard=hasObjectFactory&&(ext.DiscernObjectFactory("CLIPBOARDHELPER"));
var hasSpellCheck=hasObjectFactory&&(ext.DiscernObjectFactory("SPELLCHECKHELPER"));
var dynDoc=hasObjectFactory&&(ext.DiscernObjectFactory("DYNDOC"));
var hasDynDoc=(dynDoc&&("OpenDynDocByWorkflowId" in dynDoc));
if(!hasAutoText||!hasClipboard||!hasSpellCheck||!hasDynDoc){logger.logError("Dynamic Documentation unavailable for this component: "+this.getStyles().getId());
this.finalizeComponent(ddi18n.DYN_DOC_UNAVAILABLE,"");
return;
}else{this.renderComponent();
}BroadcastDispatcher.subscribe(BroadcastDispatcher.DYN_DOC_REFRESH,function(){var editor=self.getEditorInstance();
if(editor){editor.destroy();
}self.renderComponent();
});
};
PhysicianImpressionsCPMComponent.prototype.renderComponent=function(){var html="";
html+="<div id='"+this.getStyles().getId()+"DocContent' class='documentation-content'></div>";
this.finalizeComponent(html,"");
this.initializeInfo();
};
CPMController.prototype.addComponentMapping("IMPRESSIONS",PhysicianImpressionsCPMComponent);
MP_Util.setObjectDefinitionMapping("PW_IMPRESSION_PARAM",PhysicianImpressionsCPMComponent);
