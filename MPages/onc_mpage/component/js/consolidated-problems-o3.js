var ConprobO3Component=null;
(function(){var modules={};
var define=function(ns,deps,fun){if(deps.apply){fun=deps;
deps=[];
}modules[ns]={definition:null,load:function(){if(this.definition){return this.definition;
}var args=[];
for(var i=0;
i<deps.length;
i++){args.push(modules[deps[i]].load());
}this.definition=fun.apply(this,args);
return this.definition;
}};
};
var require=function(deps,callback){var args=[];
for(var i=0;
i<deps.length;
i++){args.push(modules[deps[i]].load());
}callback.apply(this,args);
};
define("cerner/discernabu/components/conprobo3/CPO3Factory",["cerner/discernabu/components/conprobo3/model/CPO3Condition","cerner/discernabu/components/conprobo3/controls/ConditionListTable","cerner/discernabu/components/conprobo3/templates/ListTemplate","cerner/discernabu/components/conprobo3/views/ListView","cerner/discernabu/components/conprobo3/templates/DetailedTemplate","cerner/discernabu/components/conprobo3/controls/DetailsPanel","cerner/discernabu/components/conprobo3/views/DetailedView","cerner/discernabu/components/conprobo3/controls/toggles/ThisVisitToggle","cerner/discernabu/components/conprobo3/controls/buttons/SelectConditionButton","cerner/discernabu/components/conprobo3/controls/toggles/ChronicToggle","cerner/discernabu/components/conprobo3/controls/ConditionListTableRow","cerner/discernabu/components/conprobo3/controls/buttons/CloseDetailsPanelButton","cerner/discernabu/components/conprobo3/controls/PriorityDropDown","cerner/discernabu/components/conprobo3/controls/toggles/ResolvedToggle","cerner/discernabu/components/conprobo3/controls/buttons/ModifyButton","cerner/discernabu/components/conprobo3/controls/buttons/InfoButton","cerner/discernabu/components/conprobo3/templates/ComponentTemplate","cerner/discernabu/components/conprobo3/model/CPO3Date","cerner/discernabu/components/conprobo3/controls/buttons/CancelButton","cerner/discernabu/components/conprobo3/controls/InfoButtonErrorModal","cerner/discernabu/components/conprobo3/controls/ConditionListTableNKPRow","cerner/discernabu/components/conprobo3/controls/buttons/DocumentNoChronicProblemsButton","cerner/discernabu/components/conprobo3/controls/InfoBanner","cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTable","cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTableProblemRow","cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTableDxRow","cerner/discernabu/components/conprobo3/templates/CommentTemplate","cerner/discernabu/components/conprobo3/controls/comments/CommentPanel","cerner/discernabu/components/conprobo3/controls/comments/CommentList","cerner/discernabu/components/conprobo3/controls/comments/AddCommentTextbox","cerner/discernabu/components/conprobo3/model/CPO3ConditionComment","cerner/discernabu/components/conprobo3/controls/comments/SaveCommentButton","cerner/discernabu/components/conprobo3/controls/comments/CancelCommentButton","cerner/discernabu/components/conprobo3/controls/buttons/DxAssistantButton","cerner/discernabu/components/conprobo3/controls/UnspecifiedAlert","cerner/discernabu/components/conprobo3/controls/buttons/CommentIndicatorButton","cerner/discernabu/components/conprobo3/controls/StaleCommentsWarning"],function(CPO3Condition,ConditionListTable,ListTemplate,ListView,DetailedTemplate,DetailsPanel,DetailedView,ThisVisitToggle,SelectConditionButton,ChronicToggle,ConditionListTableRow,CloseDetailsPanelButton,PriorityDropDown,ResolvedToggle,ModifyButton,InfoButton,ComponentTemplate,CPO3Date,CancelButton,InfoButtonErrorModal,ConditionListTableNKPRow,DocumentNoChronicProblemsButton,InfoBanner,HistoricalTable,HistoricalTableProblemRow,HistoricalTableDxRow,CommentTemplate,CommentPanel,CommentList,AddCommentTextbox,CPO3ConditionComment,SaveCommentButton,CancelCommentButton,DxAssistantButton,UnspecifiedAlert,CommentIndicatorButton,StaleCommentsWarning){var CPO3Factory=function(){};
var method=CPO3Factory.prototype;
method.closeDetailsPanelButton=function(){return new CloseDetailsPanelButton(this);
};
method.componentTable=function(){return new ComponentTable();
};
method.conditionEntity=function(){return new CPO3Condition();
};
method.conditionEntityClass=function(){return CPO3Condition;
};
method.conditionCommentEntity=function(){return new CPO3ConditionComment();
};
method.conditionCommentClass=function(){return CPO3ConditionComment;
};
method.conditionListTable=function(element){return new ConditionListTable(element,this);
};
method.conditionListTableRow=function(){return new ConditionListTableRow(this);
};
method.detailsPanel=function(element){return new DetailsPanel(element,this);
};
method.tableCellClickCallbackExtension=function(){return new TableCellClickCallbackExtension();
};
method.tableColumn=function(){return new TableColumn();
};
method.tableGroup=function(){return new TableGroup();
};
method.listTemplate=function(){return ListTemplate;
};
method.selector=function(){return MPageControls.Selector;
};
method.detailedTemplate=function(){return DetailedTemplate;
};
method.listView=function(element){return new ListView(element,this);
};
method.sidePanel=function(){return new CompSidePanel("dummy","dummy");
};
method.defaultView=function(element){return this.listView(element);
};
method.detailedView=function(element){return new DetailedView(element,this);
};
method.viewGroup=function(){return new MPageControls.Group();
};
method.chronicToggle=function(){return new ChronicToggle(this);
};
method.thisVisitToggle=function(){return new ThisVisitToggle(this);
};
method.selectConditionButton=function(){return new SelectConditionButton(this);
};
method.priorityDropDown=function(){return new PriorityDropDown(this);
};
method.resolvedToggle=function(){return new ResolvedToggle(this);
};
method.modifyButton=function(){return new ModifyButton(this);
};
method.infoButton=function(){return new InfoButton(this);
};
method.componentTemplate=function(){return ComponentTemplate;
};
method.cpo3Date=function(date){return new CPO3Date(date);
};
method.bedrockConfig=function(){return new MPageEntity.BedrockConfig();
};
method.cancelButton=function(){return new CancelButton(this);
};
method.infoButtonApi=function(){return CERN_Platform.getDiscernObject("INFOBUTTONLINK");
};
method.mpageUtil=function(){return MP_Util;
};
method.mpageModalDialog=function(){return MP_ModalDialog;
};
method.mpageModalButton=function(buttonId){return new ModalButton(buttonId);
};
method.infoButtonErrorModal=function(){return new InfoButtonErrorModal(this);
};
method.conditionListTableNKPRow=function(){return new ConditionListTableNKPRow(this);
};
method.documentNoChronicProblemsBtn=function(){return new DocumentNoChronicProblemsButton(this);
};
method.infoBanner=function(){return new InfoBanner(this);
};
method.alertMessageControl=function(element,messageTemplate,messageType){return new MPageControls.AlertMessage(element,messageTemplate,messageType);
};
method.dxAssistantButton=function(){return new DxAssistantButton(this);
};
method.historicalTable=function(){return new HistoricalTable(this);
};
method.historicalTableProblemRow=function(){return new HistoricalTableProblemRow(this);
};
method.historicalTableDxRow=function(){return new HistoricalTableDxRow(this);
};
method.unspecifiedAlert=function(){return new UnspecifiedAlert(this);
};
method.textboxControl=function(){return new TextControl();
};
method.commentTemplate=function(){return CommentTemplate;
};
method.commentPanel=function(){return new CommentPanel(this);
};
method.commentList=function(){return new CommentList(this);
};
method.addCommentTextbox=function(){return new AddCommentTextbox(this);
};
method.transaction=function(){return new MPageEntity.Transaction();
};
method.saveCommentButton=function(){return new SaveCommentButton(this);
};
method.cancelCommentButton=function(){return new CancelCommentButton(this);
};
method.commentIndicatorButton=function(){return new CommentIndicatorButton(this);
};
method.nomenclatureSearch=function(element){return new MPageControls.NomenclatureSearch(element);
};
method.conditionList=function(){return new MPageEntity.entities.ConditionList();
};
method.capTimer=function(name){var addNewCAPTimer=new RTMSTimer(name);
if(addNewCAPTimer){addNewCAPTimer.addMetaData("key");
addNewCAPTimer.start();
addNewCAPTimer.stop();
}return addNewCAPTimer;
};
method.staleCommentsWarning=function(){return new StaleCommentsWarning(this);
};
return CPO3Factory;
});
define("cerner/discernabu/components/conprobo3/CPO3Style",function(){var ConprobO3Style=function(){this.initByNamespace("wf_consol_problems_o3");
};
ConprobO3Style.prototype=new ComponentStyle();
return ConprobO3Style;
});
define("cerner/discernabu/components/conprobo3/CPO3View",function(){var Selector=MPageControls.Selector;
var attribute=MPageOO.attribute;
var CPO3View=function(element,factory){Selector.call(this,element);
this.setUnselectedClass("hidden");
this.setEnabled(false);
this.setFactory(factory);
this.setIsCreated(false);
this.setOnUnselect(function(){this.hideView();
});
this.setOnSelect(function(){this.update();
this.showView();
});
};
CPO3View.prototype=new Selector();
var method=CPO3View.prototype;
attribute(CPO3View,"IsCreated");
attribute(CPO3View,"Factory");
attribute(CPO3View,"CanModifyThisVisit");
attribute(CPO3View,"CanModifyChronic");
attribute(CPO3View,"IsPriorityEnabled");
attribute(CPO3View,"IsDxAssistantEnabled");
method.create=function(build){this.setIsCreated(true);
};
method.switchToPreviousView=function(){this.getParent().switchToPreviousView();
};
method.showView=function(){};
method.hideView=function(){};
method.updateSpecifiedConditions=function(conditions){this.fire("updateSpecifiedConditions",[conditions]);
};
return CPO3View;
});
define("cerner/discernabu/components/conprobo3/ConprobO3Component",["cerner/discernabu/components/conprobo3/CPO3Style","cerner/discernabu/components/conprobo3/CPO3Factory"],function(ConprobO3Style,CPO3Factory){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var ConprobO3Component=function(criterion){MPageComponent.call(this);
this.setIsDxAssistantEnabled(true);
this.setCriterion(criterion);
this.setStyles(new ConprobO3Style());
this.setIncludeLineNumber(true);
this.setMarginBottom(30);
this.setScope(1);
this.setViewsContainer(new Control());
this.setIsRendered(false);
this.setFactory(new CPO3Factory());
this.setBedrockConfig(this.getFactory().bedrockConfig());
this.setViews(this.getFactory().viewGroup());
this.m_nomenSearchBar=null;
this.setDocumentNoChronicProblemsButton(this.getFactory().documentNoChronicProblemsBtn());
};
ConprobO3Component.prototype=new MPageComponent();
MP_Util.setObjectDefinitionMapping("WF_CONSOL_PROBLEMS_O3",ConprobO3Component);
var method=ConprobO3Component.prototype;
attribute(ConprobO3Component,"Conditions");
attribute(ConprobO3Component,"Factory");
attribute(ConprobO3Component,"Views");
attribute(ConprobO3Component,"DetailedView");
attribute(ConprobO3Component,"ListView");
attribute(ConprobO3Component,"PreviousView");
attribute(ConprobO3Component,"ViewsContainer");
attribute(ConprobO3Component,"MarginBottom");
attribute(ConprobO3Component,"IsRendered");
attribute(ConprobO3Component,"BedrockConfig");
attribute(ConprobO3Component,"NomenclatureSearchBar");
attribute(ConprobO3Component,"ClassificationFilterDropDown");
attribute(ConprobO3Component,"ClassificationFilter");
attribute(ConprobO3Component,"AddNewAsDropDown");
attribute(ConprobO3Component,"AddNewAsOption");
attribute(ConprobO3Component,"CanViewNKP");
attribute(ConprobO3Component,"CanUpdtNKP");
attribute(ConprobO3Component,"CanModifyThisVisit");
attribute(ConprobO3Component,"CanModifyChronic");
attribute(ConprobO3Component,"CancelledNKPCondition");
attribute(ConprobO3Component,"CernerNKPNomenclature");
attribute(ConprobO3Component,"HasChronicProbs");
attribute(ConprobO3Component,"NKPNomenclatures");
attribute(ConprobO3Component,"SharedCondResObj");
attribute(ConprobO3Component,"IsDxAssistantEnabled");
attribute(ConprobO3Component,"MetaObj");
attribute(ConprobO3Component,"DocumentNoChronicProblemsButton");
attribute(ConprobO3Component,"NCPAlertMessageBar");
attribute(ConprobO3Component,"IsPriorityEnabled");
attribute(ConprobO3Component,"UnspecifiedAlert");
attribute(ConprobO3Component,"ReqdThisVisitVocab");
attribute(ConprobO3Component,"ReqdThisVisitClassification");
attribute(ConprobO3Component,"ReqdThisVisitConfirmation");
attribute(ConprobO3Component,"ReqdThisVisitType");
attribute(ConprobO3Component,"ReqdChronicVocab");
attribute(ConprobO3Component,"ReqdChronicClassification");
attribute(ConprobO3Component,"ReqdChronicConfirmation");
attribute(ConprobO3Component,"ReqdChronicLifeCycleStatus");
method.setDefaultSearchVocab=function(value){this.getBedrockConfig().setDefaultSearchVocab(value);
};
method.getDefaultSearchVocab=function(){return this.getBedrockConfig().getDefaultSearchVocab();
};
method.setThisVisitVocab=function(value){this.getBedrockConfig().setThisVisitVocab(value);
};
method.getThisVisitVocab=function(){return this.getBedrockConfig().getThisVisitVocab();
};
method.setChronicVocab=function(value){this.getBedrockConfig().setChronicVocab(value);
};
method.getChronicVocab=function(){return this.getBedrockConfig().getChronicVocab();
};
method.setThisVisitDxClassification=function(value){this.getBedrockConfig().setDiagnosisClassification(value);
};
method.getThisVisitDxClassification=function(){return this.getBedrockConfig().getDiagnosisClassification();
};
method.setThisVisitDxConfirmation=function(value){this.getBedrockConfig().setDiagnosisConfirmation(value);
};
method.getThisVisitDxConfirmation=function(){return this.getBedrockConfig().getDiagnosisConfirmation();
};
method.setThisVisitDxType=function(value){this.getBedrockConfig().setDiagnosisType(value);
};
method.getThisVisitDxType=function(){return this.getBedrockConfig().getDiagnosisType();
};
method.setChronicHistoricClassification=function(value){this.getBedrockConfig().setProblemClassification(value);
};
method.getChronicHistoricClassification=function(){return this.getBedrockConfig().getProblemClassification();
};
method.setChronicHistoricConfirmation=function(value){this.getBedrockConfig().setProblemConfirmation(value);
};
method.getChronicHistoricConfirmation=function(){return this.getBedrockConfig().getProblemConfirmation();
};
method.setModifyConditionInd=function(value){this.getBedrockConfig().setModifyInd(value);
};
method.getModifyConditionInd=function(){return this.getBedrockConfig().getModifyInd();
};
method.setInfoButtonInd=function(value){this.getBedrockConfig().setInfoButtonInd(value);
};
method.getInfoButtonInd=function(){return this.getBedrockConfig().getInfoButtonInd();
};
method.setProblemListFlag=function(value){this.getBedrockConfig().setProblemListFlag(value);
};
method.getProblemListFlag=function(){return this.getBedrockConfig().getProblemListFlag();
};
method.setThisVisitPriorityInd=function(value){};
method.getThisVisitPriorityInd=function(){return;
};
method.InsertData=function(){if(this.getIsRendered()){this.getSharedCondResObj().retrieveSharedResourceData();
return;
}var gapCheckCapTimer=null;
var loadTimer=new RTMSTimer("USR:MPG.CONSOL_PROBS.O3 - load component");
loadTimer.addMetaData("key");
try{loadTimer.start();
var self=this;
var criterion=this.getCriterion();
var listQual={personId:criterion.person_id,encounterId:criterion.encntr_id};
var loadConditions=function(conditions,privsObj,metaObj){var sharedConditionResource=self.getSharedCondResObj();
if(sharedConditionResource&&sharedConditionResource.m_eventSource==self){if(self.getGapCheckRequiredInd()){self.updateSatisfierRequirementIndicator();
}return;
}var conditionCnt=conditions.length;
var condition;
var cpCondition=self.getFactory().conditionEntity();
var elist=self.getFactory().conditionList();
elist.setResponseMeta(conditions.getResponseMeta());
for(var i=0;
i<conditionCnt;
i++){condition=conditions[i];
cpCondition=self.getFactory().conditionEntity();
cpCondition.setData(condition.getData());
cpCondition.setResponseMeta(condition.getResponseMeta());
elist.push(cpCondition);
}self.setConditions(elist);
self.setCanViewNKP(privsObj.canViewNKP);
self.setCanUpdtNKP(privsObj.canUpdtNKP);
self.setCanModifyThisVisit(privsObj.canModifyThisVisit);
self.setCanModifyChronic(privsObj.canModifyChronic);
self.setNKPNomenclatures(privsObj.nkpNomenclatures);
self.setCernerNKPNomenclature(privsObj.cernerNKPNomenclature);
self.setHasChronicProbs(privsObj.hasChronicProbs);
self.setMetaObj(metaObj);
if(self.getNomenclatureSearchBar()){self.clearCount();
if(self.getClassificationFilter()){self.getListView().getConditionListTable().setClassificationFilter(self.getClassificationFilter());
}var loadedViews=self.getViews().getControls();
var numViews=loadedViews.length;
for(var x=0;
x<numViews;
x++){var view=loadedViews[x];
view.setConditions(self.getConditions());
if(view===self.getDetailedView()){view.closeDetailsPanel();
}else{view.update();
}}self.getUnspecifiedAlert().setConditions(self.getConditions());
self.getUnspecifiedAlert().update();
self.checkForNoChronicProblems();
self.postProcessing();
}else{self.renderComponent();
}if(self.getGapCheckRequiredInd()){self.loadNomenclatureInfoForGapCheck();
}if(loadTimer){loadTimer.stop();
}};
if(!self.getClassificationFilterDropDown()){self.buildClassificationFilterDropDown();
}if(self.getGapCheckRequiredInd()){gapCheckCapTimer=new CapabilityTimer("CAP:MPG.CONSOLIDATED_PROBLEMS.O3 - load component with gap-check");
gapCheckCapTimer.capture();
MPageEntity.entities.Condition.meta.loadDiagnosisTypes=1;
}self.setSharedCondResObj(SharedConditionResource.getSharedResource(loadConditions,self));
}catch(err){if(loadTimer){loadTimer.fail();
}throw (err);
}};
method.resetViews=function(){this.setViews(this.getFactory().viewGroup());
this.setListView(null);
this.setDetailedView(null);
};
method.buildUnspecifiedAlert=function(){var conditions=this.getConditions();
var build=this.getFactory();
var unspecifiedAlert=build.unspecifiedAlert();
unspecifiedAlert.setConditions(conditions);
unspecifiedAlert.setTemplate(build.componentTemplate().unspecifiedAlert);
unspecifiedAlert.setParent(this);
unspecifiedAlert.setIsDxAssistantEnabled(this.getIsDxAssistantEnabled());
this.setUnspecifiedAlert(unspecifiedAlert);
return unspecifiedAlert;
};
method.loadNomenclatureInfoForGapCheck=function(){var self=this;
var conditions=this.getConditions();
var transaction=new MPageEntity.Transaction();
transaction.track(function(){conditions.each(function(cond){cond.getDiagnoses().each(function(dx){dx.getNomenclature();
});
});
});
transaction.commit(function(){self.updateSatisfierRequirementIndicator();
});
};
method.isGapCheckRequirementSatisfied=function(){var conditions=this.getConditions();
var conditionsLength=conditions.length;
var reqdChronicVocab=this.getReqdChronicVocab();
var reqdChronicClassification=this.getReqdChronicClassification();
var reqdChronicConfirmation=this.getReqdChronicConfirmation();
var reqdLifeCycleStatus=this.getReqdChronicLifeCycleStatus();
var reqdThisVisitVocab=this.getReqdThisVisitVocab();
var reqdThisVisitClassification=this.getReqdThisVisitClassification();
var reqdThisVisitConfirmation=this.getReqdThisVisitConfirmation();
var reqdThisVisitType=this.getReqdThisVisitType();
var thisVisitSatisfied=false;
var chronicSatisfied=false;
var nkcpActiveCondition=conditions.filter("isCernerNKP",true).filter("isChronic",true);
if(nkcpActiveCondition.length){chronicSatisfied=true;
}for(var i=0;
i<conditionsLength;
i++){if(!chronicSatisfied){chronicSatisfied=this.isChronicSatisfied(conditions[i],reqdChronicVocab,reqdChronicClassification,reqdChronicConfirmation,reqdLifeCycleStatus);
}if(!thisVisitSatisfied){thisVisitSatisfied=this.isThisVisitSatisfied(conditions[i],reqdThisVisitVocab,reqdThisVisitClassification,reqdThisVisitConfirmation,reqdThisVisitType);
}if(thisVisitSatisfied&&chronicSatisfied){return true;
}}return false;
};
method.isChronicSatisfied=function(currCondition,reqdChronicVocab,reqdChronicClassification,reqdChronicConfirmation,reqdLifeCycleStatus){var currTargetVocab=null;
var currClassification=null;
var currConfirmation=null;
var currLifeCycleStatus=null;
var currProblemsArray=currCondition.getProblems();
var currProblemsArrayLength=currProblemsArray.length;
for(var j=0;
j<currProblemsArrayLength;
j++){currTargetVocab=currProblemsArray[j].getNomenclature().getSourceVocabularyValue();
currClassification=currProblemsArray[j].getClassificationCdValue();
currConfirmation=currProblemsArray[j].getConfirmationStatusValue();
currLifeCycleStatus=currProblemsArray[j].getLifeCycleStatusCdValue();
if(reqdChronicVocab.indexOf(currTargetVocab)===-1||reqdChronicClassification.indexOf(currClassification)===-1||reqdChronicConfirmation.indexOf(currConfirmation)===-1||reqdLifeCycleStatus.indexOf(currLifeCycleStatus)===-1){continue;
}return true;
}return false;
};
method.isThisVisitSatisfied=function(currCondition,reqdThisVisitVocab,reqdThisVisitClassification,reqdThisVisitConfirmation,reqdThisVisitType){var currTargetVocab=null;
var currClassification=null;
var currConfirmation=null;
var currDxType=null;
var currDiagnosesArray=currCondition.getDiagnoses();
var currDiagnosesArrayLength=currDiagnosesArray.length;
for(var j=0;
j<currDiagnosesArrayLength;
j++){currTargetVocab=currDiagnosesArray[j].getNomenclature().getSourceVocabularyValue();
currClassification=currDiagnosesArray[j].getClassificationValue();
currConfirmation=currDiagnosesArray[j].getConfirmationStatusValue();
currDxType=currDiagnosesArray[j].getTypeValue();
if(reqdThisVisitVocab.indexOf(currTargetVocab)===-1||reqdThisVisitClassification.indexOf(currClassification)===-1||reqdThisVisitConfirmation.indexOf(currConfirmation)===-1||reqdThisVisitType.indexOf(currDxType)===-1){continue;
}return true;
}return false;
};
method.update=function(){if(this.getListView()){this.getListView().update();
}if(this.getDetailedView()){this.getDetailedView().update();
}};
method.updateSatisfierRequirementIndicator=function(){var isRequirementSatisfied=this.isGapCheckRequirementSatisfied();
this.setSatisfiedInd(isRequirementSatisfied);
CERN_EventListener.fireEvent(this,this,EventListener.EVENT_SATISFIER_UPDATE,{satisfied:isRequirementSatisfied});
this.updateComponentRequiredIndicator();
};
method.getGapCheckRequiredInd=function(){if(this.getReqdThisVisitVocab()&&this.getReqdThisVisitClassification()&&this.getReqdThisVisitConfirmation()&&this.getReqdThisVisitType()&&this.getReqdChronicVocab()&&this.getReqdChronicClassification()&&this.getReqdChronicConfirmation()&&this.getReqdChronicLifeCycleStatus()){return true;
}else{return false;
}};
method.renderComponent=function(){var renderTimer=new RTMSTimer("ENG:MPG.CONSOL_PROBS.O3 - render component");
renderTimer.addMetaData("key");
try{renderTimer.start();
this.resetViews();
var self=this;
var compId=this.getComponentId();
var build=this.getFactory();
var conditions=this.getConditions();
var condLen=conditions.filter("isCernerNKP",false).length;
var cp3i18n=i18n.discernabu.conprobo3_i18n;
var alert=this.buildUnspecifiedAlert();
var nkpMsgHtml=build.componentTemplate().nkpMessageContainer({compId:this.getComponentId()});
var infoBarHtml=build.componentTemplate().infoBarSkeleton({compId:this.getComponentId(),cp3i18n:i18n.discernabu.conprobo3_i18n,unspecifiedAlertId:alert?alert.getElementId():null});
var html=nkpMsgHtml+infoBarHtml;
html+=build.componentTemplate().component({viewsContainerId:this.getViewsContainer().getElementId()});
this.finalizeComponent(html);
this.checkForNoChronicProblems();
this.buildAddNewAsDropDown();
this.createNomenclatureSearchBar();
if(alert){this.getUnspecifiedAlert().create();
this.getUnspecifiedAlert().update();
}this.showListView();
}catch(err){if(renderTimer){renderTimer.fail();
}throw (err);
}finally{if(renderTimer){renderTimer.stop();
}}};
method.switchToView=function(view){if(!view){return;
}if(!view.getIsCreated()){var el=document.createElement("div");
el.id=view.getElementId();
this.getViewsContainer().getElement().append(el);
view.setElement(el);
view.setParent(this);
if(view.setConditions){view.setConditions(this.getConditions());
}view.setBedrockConfig(this.getBedrockConfig());
view.setCanModifyThisVisit(this.getCanModifyThisVisit());
view.setCanModifyChronic(this.getCanModifyChronic());
view.setIsPriorityEnabled(this.isPriorityEnabledConsideringPrivs());
view.setIsDxAssistantEnabled(this.getIsDxAssistantEnabled());
view.create();
this.getViews().add(view);
}this.setPreviousView(this.getViews().getCurrent());
this.getViews().selectSingle(view);
this.setIsRendered(true);
this.postProcessing();
};
method.buildClassificationFilterDropDown=function(){var self=this;
var cp3i18n=i18n.discernabu.conprobo3_i18n;
var compHdrNode=this.getHeaderElement();
var controlId="cpo3ClassFilterMenu"+this.getComponentId();
var contentId="cpo3FilterMenuContent"+this.getComponentId();
var classFilterDropDown=null;
var dropDownList=null;
var ddArrowHTML="<span class='conprobo3-drop-down-arrow'>&nbsp;</span>";
var userPrefs=this.getPreferencesObj();
var localPrefs=userPrefs?userPrefs:{};
var validKeys=["ALL","MED_PATIENT"];
var filters=[{display:cp3i18n.ALL,key:"ALL"},{display:cp3i18n.MEDICAL_PATIENT_FILTER,key:"MED_PATIENT"}];
var dropDownHTML="<div id='"+controlId+"' class='conprobo3-classification-drop-down'><span>"+cp3i18n.CLASSIFICATION+":</span><span id='"+contentId+"' class='conprobo3-drop-down-display'></span></div>";
var dropDownShell=$(dropDownHTML);
this.getRenderStrategy().addComponentSection(compHdrNode,dropDownShell);
classFilterDropDown=new MPageControls.DropDownList($("#"+contentId));
classFilterDropDown.setDisplayKey("display");
if(userPrefs&&userPrefs.classFilterPref&&validKeys.indexOf(userPrefs.classFilterPref.key)>-1){classFilterDropDown.setValue(userPrefs.classFilterPref.display+ddArrowHTML);
this.setClassificationFilter(userPrefs.classFilterPref.key);
}else{classFilterDropDown.setValue(filters[1].display+ddArrowHTML);
this.setClassificationFilter(filters[1].key);
}classFilterDropDown.renderItems(filters);
classFilterDropDown.show();
classFilterDropDown.getElement().width(classFilterDropDown.getContents().width()+11);
classFilterDropDown.hide();
classFilterDropDown.setOnSelect(function(item){var classificationFilterCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Classification_Filter");
if(classificationFilterCAPTimer){classificationFilterCAPTimer.addMetaData("key");
classificationFilterCAPTimer.start();
classificationFilterCAPTimer.stop();
}var listView=self.getListView();
var detailedView=self.getDetailedView();
var dropDown=self.getClassificationFilterDropDown();
userPrefs=self.getPreferencesObj();
localPrefs=userPrefs?userPrefs:{};
self.setClassificationFilter(item.key);
listView.setClassificationFilter(item.key);
listView.update();
self.showListView();
self.resizeComponent();
dropDown.setValue(item.display+ddArrowHTML);
if(detailedView){detailedView.setClassificationFilter(item.key);
detailedView.update();
}if(localPrefs&&localPrefs.classFilterPref){localPrefs.classFilterPref=item;
}else{localPrefs.classFilterPref=item;
}self.setPreferencesObj(localPrefs);
self.savePreferences(true);
});
this.setClassificationFilterDropDown(classFilterDropDown);
self.initHoverTimeout(classFilterDropDown);
};
method.buildAddNewAsDropDown=function(){var self=this;
var cp3i18n=i18n.discernabu.conprobo3_i18n;
var contentObj=$("#cpo3AddNewAsMenuContent"+this.getComponentId());
var ddArrowHTML="<span class='conprobo3-drop-down-arrow'>&nbsp;</span>";
var addNewAsDD=null;
var userPrefs=this.getPreferencesObj();
var localPrefs=userPrefs?userPrefs:{};
var validKeys=["TV","TV_CHRONIC","CHRONIC"];
var options=[{display:cp3i18n.THIS_VISIT,key:"TV"},{display:cp3i18n.THIS_VISIT_AND_CHRONIC,key:"TV_CHRONIC"},{display:cp3i18n.CHRONIC,key:"CHRONIC"}];
addNewAsDD=new MPageControls.DropDownList(contentObj);
addNewAsDD.setDisplayKey("display");
if(userPrefs&&userPrefs.addNewAsPref&&validKeys.indexOf(userPrefs.addNewAsPref.key)>-1){switch(userPrefs.addNewAsPref.key){case"TV":addNewAsDD.setValue(options[0].display+ddArrowHTML);
break;
case"TV_CHRONIC":addNewAsDD.setValue(options[1].display+ddArrowHTML);
break;
case"CHRONIC":addNewAsDD.setValue(options[2].display+ddArrowHTML);
break;
}this.setAddNewAsOption(userPrefs.addNewAsPref.key);
}else{addNewAsDD.setValue(options[0].display+ddArrowHTML);
this.setAddNewAsOption(options[0].key);
}addNewAsDD.renderItems(options);
addNewAsDD.setOnSelect(function(item){var addProblemAsCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Add_New_As");
if(addProblemAsCAPTimer){addProblemAsCAPTimer.addMetaData("key");
addProblemAsCAPTimer.start();
addProblemAsCAPTimer.stop();
}var nomenSearchObj=self.getNomenclatureSearchBar();
var dropDown=self.getAddNewAsDropDown();
userPrefs=self.getPreferencesObj();
localPrefs=userPrefs?userPrefs:{};
self.setAddNewAsOption(item.key);
dropDown.setValue(item.display+ddArrowHTML);
if(nomenSearchObj){self.validateNomenSearchDisplay();
}if(localPrefs&&localPrefs.addNewAsPref){localPrefs.addNewAsPref=item;
}else{localPrefs.addNewAsPref=item;
}self.setPreferencesObj(localPrefs);
self.savePreferences(true);
});
this.setAddNewAsDropDown(addNewAsDD);
self.initHoverTimeout(addNewAsDD);
};
method.initHoverTimeout=function(dropDown){var self=this;
var contentId="cpo3FilterMenuContent"+this.getComponentId();
var timeout=null;
$("#"+contentId).mouseenter(function(){if(timeout){clearTimeout(timeout);
}});
$("#"+contentId).mouseleave(function(){timeout=setTimeout(function(){dropDown.getSelector().unselect();
},1000);
});
};
method.updateSharedResourceHasChronicMeta=function(reply){var sharedResource=this.getSharedCondResObj();
var reply=JSON.parse(reply);
var metaObj=reply.RECORD_DATA.META;
var hasChronicProbs=metaObj.HASCHRONICPROBS;
var sharedMeta=sharedResource.getMetaObj();
sharedMeta.HASCHRONICPROBS=hasChronicProbs;
sharedResource.setHasChronicProbs(hasChronicProbs);
var activeNKP=this.getActiveNKP();
if(sharedResource.getHasChronicProbs()&&activeNKP){this.removeNKP(activeNKP);
}this.checkForNoChronicProblems();
};
method.getActiveNKP=function(){return this.getConditions().filter(function(cond){return cond.getIsCernerNKP()&&cond.getIsChronic();
})[0];
};
method.markNKPAsCancelled=function(nkpCondition){nkpCondition.setIsChronic(false);
this.updateSharedCondition(nkpCondition);
};
method.removeNKP=function(cond){cond.setProblemDriverValue(null);
cond.setIsChronic(false);
this.getConditions().removeIfEmpty(cond);
this.getSharedCondResObj().removeEmptyCondition(cond);
};
method.checkForNoChronicProblems=function(){var cp3i18n=i18n.discernabu.conprobo3_i18n;
var compId=this.getComponentId();
var self=this;
var metaObj=this.getMetaObj();
var build=this.getFactory();
var hasChronicProbs=metaObj.HASCHRONICPROBS;
var cernerNKPNomenId=metaObj.CERNERNKPNOMENID;
var canViewNKP=this.getCanViewNKP();
var canUpdtNKP=this.getCanUpdtNKP();
var conditions=this.getConditions();
var hasNKP=false;
var noChronicAlertMsg=null;
var messageType;
var messageContent;
var messageTemplate;
var documentNkpMsg;
var activeCond=this.getActiveNKP();
if(activeCond){hasNKP=true;
}var targetElement=$("#noChronicProbMsg"+compId);
if(!parseInt(hasChronicProbs)&&cernerNKPNomenId>0){if(canViewNKP&&canUpdtNKP){if(!hasNKP){messageType=MPageControls.AlertMessage.MessageTypes.INFORMATION;
if(!targetElement.children().length){documentNkpMsg=cp3i18n.DOCUMENT_NO_CHRONIC_PROBLEMS.replace(/\{0\}/g,build.componentTemplate().documentNkpLink({buttonId:this.getDocumentNoChronicProblemsButton().getElementId(),display:cp3i18n.NO_CHRONIC_PROBLEMS}));
messageContent=build.componentTemplate().nkpMessageContent({noChronicProbsDocumented:cp3i18n.NO_CHRONIC_PROBLEMS_DOCUMENTED,documentNkpMsg:documentNkpMsg});
messageTemplate=MPageControls.getDefaultTemplates().messageBar;
noChronicAlertMsg=build.alertMessageControl(targetElement,messageTemplate,messageType);
noChronicAlertMsg.render(messageContent);
this.getDocumentNoChronicProblemsButton().setAddNKPFunction(function(){self.documentNoChronicProblems();
});
this.getDocumentNoChronicProblemsButton().init();
this.setNCPAlertMessageBar(noChronicAlertMsg);
}return;
}}}targetElement.empty();
};
method.documentNoChronicProblems=function(){var self=this;
var encntr=this.getCriterion().encntr_id;
var prsn=this.getCriterion().person_id;
var cernerNKPNomenclature=this.getCernerNKPNomenclature();
var foundNKP=self.getConditionWithNomenclature(cernerNKPNomenclature);
var vc=this.getBedrockConfig();
var nkpCondition=foundNKP?foundNKP:this.getFactory().conditionEntity();
nkpCondition.setIsChronic(true);
nkpCondition.setIsCernerNKP(true);
nkpCondition.setClassificationValue(0);
nkpCondition.setNomenclatureValue(cernerNKPNomenclature);
nkpCondition.setTargetNomenclatureValue(cernerNKPNomenclature);
nkpCondition.setEncounterValue(encntr);
nkpCondition.setPersonValue(prsn);
var updateAfterNKPCreation=function(conditionList,response){self.updateSharedResourceHasChronicMeta(response);
self.update();
self.getSharedCondResObj().notifyResourceConsumers(self);
};
if(foundNKP){nkpCondition.moveToChronic(vc,function(conditionList,response){self.getSharedCondResObj().updateCondition(nkpCondition);
updateAfterNKPCreation(conditionList,response);
});
}else{nkpCondition.create(function(conditionList,response){self.getConditions().push(nkpCondition);
self.getSharedCondResObj().addCondition(nkpCondition);
updateAfterNKPCreation(conditionList,response);
});
}};
method.createNomenclatureSearchBar=function(){var cp3i18n=i18n.discernabu.conprobo3_i18n;
var controlId="#nomenSearchBar"+this.getComponentId();
var nomenSearchBar=this.getFactory().nomenclatureSearch($(controlId));
var self=this;
nomenSearchBar.setCaption(cp3i18n.NOMENCLATURE_SEARCH_CAPTION);
nomenSearchBar.setICD10CodeValues(this.getConditions().getICD10CodeValuesFromMeta());
nomenSearchBar.activateCaption();
var searchVocab=new MPageEntity.CodeValue();
searchVocab.setId(this.getDefaultSearchVocab());
nomenSearchBar.setSourceVocabCodeValue(searchVocab);
nomenSearchBar.setOnDelay(function(){var searchText=$(controlId+" :input").val();
if(searchText){nomenSearchBar.setValue(searchText);
nomenSearchBar.searchNomens();
}});
nomenSearchBar.getList().setOnSelect(function(item){var conditionWithNomenclature=self.getConditionWithNomenclature(item.getId());
if(conditionWithNomenclature){self.updateCondition(conditionWithNomenclature,item);
}else{self.addCondition(item);
}nomenSearchBar.setValue("");
nomenSearchBar.getTextbox().focus();
});
this.setNomenclatureSearchBar(nomenSearchBar);
this.validateNomenSearchDisplay();
};
method.getConditionWithNomenclature=function(nomenclatureId){var conditions=this.getConditions();
var conditionsWithNomenclature=conditions.filter(function(cond){return cond.getNomenclatureValue()===nomenclatureId;
});
if(conditionsWithNomenclature.length){return conditionsWithNomenclature[0];
}return null;
};
method.validateNomenSearchDisplay=function(){var infoDivId="#cpo3InfoDiv"+this.getComponentId();
var nomenSearchCtrl=this.getNomenclatureSearchBar();
var addAsThisVisit=(this.getAddNewAsOption()==="TV")?true:false;
var addAsChronic=(this.getAddNewAsOption()==="CHRONIC")?true:false;
var addAsTVChronic=(this.getAddNewAsOption()==="TV_CHRONIC")?true:false;
var searchVocab=this.getDefaultSearchVocab();
var thisVisitVocab=this.getThisVisitVocab();
var chronicVocab=this.getChronicVocab();
var modThisVisitPriv=this.getCanModifyThisVisit();
var modChronicPriv=this.getCanModifyChronic();
var validSearchFlags=[1,2,3,4,5,6,7,8,9,10];
function disableNomenSearch(){if($(infoDivId).find("span").hasClass("secondary-text")){$(infoDivId).find("span").toggleClass("secondary-text disabled");
nomenSearchCtrl.disable();
}}function enableNomenSearch(){if($(infoDivId).find("span").hasClass("disabled")){$(infoDivId).find("span").toggleClass("secondary-text disabled");
nomenSearchCtrl.enable();
}}if(!CERN_Platform.inMillenniumContext()){disableNomenSearch();
return;
}if(!searchVocab){disableNomenSearch();
return;
}if((addAsThisVisit||addAsTVChronic)&&(!thisVisitVocab||!modThisVisitPriv)){disableNomenSearch();
return;
}if((addAsChronic||addAsTVChronic)&&(!chronicVocab||!modChronicPriv)){disableNomenSearch();
return;
}if(!nomenSearchCtrl.getIsEnabled()){enableNomenSearch();
return;
}};
var addOptionIsTv=function(){return this.getAddNewAsOption()==="TV"||this.getAddNewAsOption()==="TV_CHRONIC";
};
var addOptionIsChronic=function(){return this.getAddNewAsOption()==="CHRONIC"||this.getAddNewAsOption()==="TV_CHRONIC";
};
var addConditionToSharedResource=function(condition){var sharedConditionResource=this.getSharedCondResObj();
this.getConditions().push(condition);
sharedConditionResource.addCondition(condition);
sharedConditionResource.notifyResourceConsumers(this);
};
var removeEmptyCondition=function(condition){var sharedConditionResource=this.getSharedCondResObj();
if(!condition.isEmpty()){return;
}var conditions=this.getConditions();
conditions.removeIfEmpty(condition);
this.update();
sharedConditionResource.removeEmptyCondition(condition);
sharedConditionResource.notifyResourceConsumers(this);
};
var conditionCreated=function(condition,reply,err){if(this.handleConditionErrors(condition,reply,err,condition.getIsThisVisit())){this.getSharedCondResObj().retrieveSharedResourceData();
return;
}condition.setResponseMeta(this.getConditions().getResponseMeta());
addConditionToSharedResource.call(this,condition);
this.updateSharedResourceHasChronicMeta(reply);
this.update();
};
var fillThisVisitCondition=function(condition){condition.setIsThisVisit(true);
if(condition.getIsHistorical()){condition.setIsHistorical(false);
}condition.setDiagnosisTypeValue(this.getThisVisitDxType());
condition.setClassificationValue(this.getThisVisitDxClassification());
condition.setConfirmationStatusValue(this.getThisVisitDxConfirmation());
if(this.getIsPriorityEnabled()){condition.setClinicalPriority(this.getConditions().getHighestPriority()+1);
}return condition;
};
var fillChronicCondition=function(condition){condition.setIsChronic(true);
if(condition.getIsHistorical()){condition.setIsHistorical(false);
}condition.setClassificationValue(this.getChronicHistoricClassification());
condition.setConfirmationStatusValue(this.getChronicHistoricConfirmation());
condition.setOnset(new Date());
return condition;
};
var createThisVisit=function(condition){var self=this;
condition.setIsThisVisit(true);
condition.getCrossMapping(this.getBedrockConfig());
if(!condition.getTargetNomenclatureValue()){return;
}fillThisVisitCondition.call(self,condition).create(function(resp,raw,err){conditionCreated.call(self,condition,raw,err);
});
};
var createChronic=function(condition){var self=this;
condition.setIsChronic(true);
condition.getCrossMapping(this.getBedrockConfig());
if(!condition.getTargetNomenclatureValue()){return;
}fillChronicCondition.call(self,condition).create(function(resp,raw,err){conditionCreated.call(self,condition,raw,err);
});
};
var createThisVisitAndChronic=function(condition){var self=this;
var cond=fillChronicCondition.call(self,condition);
cond=fillThisVisitCondition.call(self,cond);
cond.createTvAndChronic(self.getBedrockConfig(),function(resp,raw,err){if(!resp&&err&&err.crossMappingError){return;
}conditionCreated.call(self,condition,raw,err);
});
};
method.addCondition=function(item){this.getFactory().capTimer("CAP:MPG_Consolidated_Problems_o3_Add");
var chronicSelected=addOptionIsChronic.call(this);
var tvSelected=addOptionIsTv.call(this);
var condition=this.getFactory().conditionEntity();
condition.setNomenclatureValue(item.getId());
condition.setEncounterValue(this.getCriterion().encntr_id);
condition.setPersonValue(this.getCriterion().person_id);
if(tvSelected&&chronicSelected){createThisVisitAndChronic.call(this,condition);
}else{if(tvSelected){createThisVisit.call(this,condition);
}else{if(chronicSelected){createChronic.call(this,condition);
}}}};
method.updateCondition=function(condition){var chronicSelected=addOptionIsChronic.call(this);
var tvSelected=addOptionIsTv.call(this);
if(tvSelected&&chronicSelected){this.displayDuplicateMessage(false);
}else{if(tvSelected){this.moveConditionToThisVisit(condition);
}else{if(chronicSelected){this.moveConditionToChronic(condition);
}}}};
method.showErrorModal=function(){var modalBodyHTML="";
modalBodyHTML="<div class='conprobo3-modal'><div class='error-icon-component'><span class='error-text'>"+i18n.discernabu.conprobo3_i18n.ERROR_DUE_TO_PRIVS+"</span></div></div>";
var modalObjExists=MP_ModalDialog.retrieveModalDialogObject("addProblemErrorModal");
var addProblemErrorModalObj=modalObjExists?modalObjExists:new ModalDialog("addProblemErrorModal");
if(!modalObjExists){var okCloseErrorBtn=new ModalButton("okCloseErrorBtn");
okCloseErrorBtn.setText(i18n.discernabu.CONFIRM_OK);
okCloseErrorBtn.setFocusInd(true);
okCloseErrorBtn.setCloseOnClick(true);
addProblemErrorModalObj.setTopMarginPercentage(25).setRightMarginPercentage(30).setBottomMarginPercentage(25).setLeftMarginPercentage(30).setIsBodySizeFixed(false);
addProblemErrorModalObj.setHeaderTitle(i18n.ERROR_OCCURED);
addProblemErrorModalObj.addFooterButton(okCloseErrorBtn);
addProblemErrorModalObj.setShowCloseIcon(true);
MP_ModalDialog.addModalDialogObject(addProblemErrorModalObj);
MP_ModalDialog.showModalDialog("addProblemErrorModal");
addProblemErrorModalObj.setBodyHTML(modalBodyHTML);
}else{MP_ModalDialog.showModalDialog("addProblemErrorModal");
addProblemErrorModalObj.setBodyHTML(modalBodyHTML);
}};
var handleCreateError=function(cond,err){if(!err){return false;
}if(cond.getTargetNomenclatureValue()){this.showErrorModal();
}return true;
};
var handleDuplicates=function(isThisVisit,raw){var reply=JSON.parse(raw);
if(reply.RECORD_DATA.META.ERRORCD==1){this.displayDuplicateMessage(isThisVisit);
return true;
}return false;
};
method.handleConditionErrors=function(cond,raw,err,isThisVisit){return handleDuplicates.call(this,isThisVisit,raw)||handleCreateError.call(this,cond,err);
};
method.displayDuplicateMessage=function(isThisVisit){var sTargetSection="";
if(isThisVisit){sTargetSection=i18n.discernabu.conprobo3_i18n.THIS_VISIT;
}else{sTargetSection=i18n.discernabu.conprobo3_i18n.CHRONIC;
}var sDuplicateMessage=i18n.discernabu.conprobo3_i18n.DUPLICATE_MSG.replace(/\{0\}/g,sTargetSection);
alert(sDuplicateMessage);
};
method.switchToPreviousView=function(){this.switchToView(this.getPreviousView());
};
method.getCurrentView=function(){return this.getViews().getCurrent();
};
method.resizeComponent=function(){if(!this.getIsRendered()){return;
}this.getViews().getCurrent().trigger("setMaxHeight",[this.calculateViewHeight()]);
this.getViews().getCurrent().trigger("resize");
};
method.postProcessing=function(){var compId=this.getComponentId();
var searchLabel=$("#wf_consol_problems_o3Content"+compId).find(".conprobo3-top-wrapper").find("span");
var searchBar=$("#nomenSearchBar"+compId);
var labelWidth=0;
this.resizeComponent();
if(searchLabel.length>0&&searchBar.length>0){labelWidth=searchLabel.outerWidth(true);
searchBar.css({"margin-left":labelWidth});
}};
method.showListView=function(){var listView=this.getListView();
if(!listView){listView=this.getFactory().listView();
listView.setComponent(this);
listView.setSharedCondResObj(this.getSharedCondResObj());
listView.setClassificationFilter(this.getClassificationFilter());
this.setListView(listView);
}this.switchToView(listView);
};
method.showDetailedView=function(condition){var detailedView=this.getDetailedView();
if(!detailedView){detailedView=this.getFactory().detailedView();
detailedView.setComponent(this);
detailedView.setSharedCondResObj(this.getSharedCondResObj());
detailedView.setClassificationFilter(this.getClassificationFilter());
detailedView.setCriterion(this.getCriterion());
detailedView.setMetaObj(this.getMetaObj());
detailedView.setIsInfoButtonEnabled(this.getInfoButtonInd());
this.setDetailedView(detailedView);
}this.switchToView(detailedView);
detailedView.selectCondition(condition);
this.resizeComponent();
};
method.calculateViewHeight=function(){var container=$("#vwpBody");
if(!container.length){return null;
}var viewHeight=container.height();
var sectionHeaderHeight=$(this.getHeaderElement()).outerHeight();
var infoDivHeight=$("#cpo3InfoDiv"+this.getComponentId()).outerHeight();
return viewHeight-sectionHeaderHeight-infoDivHeight-this.getMarginBottom();
};
method.updateSharedConditionAndConsumers=function(condition){this.update();
var sharedResource=this.getSharedCondResObj();
this.updateSharedCondition(condition);
sharedResource.notifyResourceConsumers(this);
};
method.updateSharedCondition=function(condition){var sharedResource=this.getSharedCondResObj();
sharedResource.updateCondition(condition);
};
method.getHeaderElement=function(){return this.getRootComponentNode().firstChild;
};
method.unresolveCondition=function(condition,reply){this.updateSharedResourceHasChronicMeta(reply);
this.updateSharedConditionAndConsumers(condition);
};
method.resolveCondition=function(condition,reply){this.updateSharedResourceHasChronicMeta(reply);
this.updateSharedConditionAndConsumers(condition);
};
method.changePriority=function(condition){this.updateSharedConditionAndConsumers(condition);
};
method.moveConditionToChronic=function(condition){var self=this;
var vc=this.getBedrockConfig();
var conditionRow=self.getListView().getConditionListTable().getRowForCondition(condition);
var handleChronicUpdates=function(condition,raw,err){if(this.handleConditionErrors(condition,raw,err,false)){this.getSharedCondResObj().retrieveSharedResourceData();
}else{this.updateSharedResourceHasChronicMeta(raw);
this.updateSharedConditionAndConsumers(condition);
}};
if(conditionRow){conditionRow.remoteCallStarted();
}if(condition.getIsResolved()){condition.activate(function(conditions,raw){handleChronicUpdates.call(self,condition,raw);
});
}else{var initialTarget=condition.getTargetNomenclatureValue();
condition.getCrossMappingChronic(vc);
if(!condition.getTargetNomenclatureValue()){condition.setTargetNomenclatureValue(initialTarget);
this.update();
return;
}fillChronicCondition.call(self,condition).moveToChronic(vc,function(conditions,raw,error){handleChronicUpdates.call(self,condition,raw,error);
});
}};
method.moveConditionToThisVisit=function(condition){var self=this;
var vc=this.getBedrockConfig();
var initialTarget=condition.getTargetNomenclatureValue();
condition.getCrossMappingTV(vc);
if(!condition.getTargetNomenclatureValue()){condition.setTargetNomenclatureValue(initialTarget);
this.update();
return;
}var conditionRow=self.getListView().getConditionListTable().getRowForCondition(condition);
if(conditionRow){conditionRow.remoteCallStarted();
}fillThisVisitCondition.call(self,condition).moveToThisVisit(vc,function(conditions,raw,err){if(self.handleConditionErrors(condition,raw,err,true)){self.getSharedCondResObj().retrieveSharedResourceData();
}else{self.updateSharedConditionAndConsumers(condition);
}});
};
method.updateOrRemoveCondition=function(condition){if(condition.isEmpty()){removeEmptyCondition.call(this,condition);
}else{this.updateSharedConditionAndConsumers(condition);
}};
method.cancelCondition=function(condition,reply){this.updateSharedResourceHasChronicMeta(reply);
this.updateOrRemoveCondition(condition);
};
method.updateSpecifiedConditions=function(conditions){this.getUnspecifiedAlert().update();
this.getCurrentView().update();
};
method.updateCurrentViewScrollPosition=function(position){this.getCurrentView().trigger("setScrollPosition",[position]);
};
method.removeConditionFromThisVisit=function(condition,priority){var sharedResource=this.getSharedCondResObj();
if(!condition.isEmpty()){this.updateSharedCondition(condition);
}else{sharedResource.removeEmptyCondition(condition);
}var toUpdate=this.getConditions().removeAndResequence(condition,priority);
var self=this;
if(!toUpdate.length){self.update();
self.getSharedCondResObj().notifyResourceConsumers(self);
return;
}var transaction=this.getFactory().transaction();
transaction.track(function(){toUpdate.each(function(updateCond){updateCond.update(function(cond){self.getSharedCondResObj().updateCondition(cond);
});
});
});
transaction.commit(function(){self.getSharedCondResObj().notifyResourceConsumers(self);
self.update();
});
};
method.isPriorityEnabledConsideringPrivs=function(){return this.getCanModifyThisVisit()&&this.getIsPriorityEnabled();
};
method.clearCount=function(){var rootComponentNode=this.getRootComponentNode();
var totalCount=$(rootComponentNode).find(".sec-total");
totalCount.html("");
};
method.scrollToComments=function(){this.getCurrentView().trigger("scrollToComments");
};
method.loadFilterMappings=function(){this.addFilterMappingObject("WF_CP3_DFT_SRCH_VCB",{setFunction:this.setDefaultSearchVocab,type:"NUMBER",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_VISIT_VOCAB",{setFunction:this.setThisVisitVocab,type:"NUMBER",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_ACTIVE_VOCAB",{setFunction:this.setChronicVocab,type:"NUMBER",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_QKADD_CLASS_DX",{setFunction:this.setThisVisitDxClassification,type:"NUMBER",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_QKADD_TYPE_DX",{setFunction:this.setThisVisitDxType,type:"NUMBER",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_QKADD_CONF_STAT",{setFunction:this.setThisVisitDxConfirmation,type:"NUMBER",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_QKADD_CLASS",{setFunction:this.setChronicHistoricClassification,type:"NUMBER",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_QKADD_TYPE_CONF",{setFunction:this.setChronicHistoricConfirmation,type:"NUMBER",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_INFO_BTN_IND",{setFunction:this.setInfoButtonInd,type:"BOOLEAN",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_CP3_TV_PRIORITY_IND",{setFunction:this.setIsPriorityEnabled,type:"BOOLEAN",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_CP3_MDF_DLG_IND",{setFunction:this.setModifyConditionInd,type:"BOOLEAN",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_CP3_ENBL_DX_ASSIST",{setFunction:this.setIsDxAssistantEnabled,type:"BOOLEAN",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_CP3_PROB_LIST_FLAG",{setFunction:this.setProblemListFlag,type:"NUMBER",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_CP3_HELP_TXT",{setFunction:this.setRequiredCompDisclaimerText,type:"STRING",field:"FTXT"});
this.addFilterMappingObject("WF_CP3_REQ_OVR",{setFunction:this.setOverrideInd,type:"Boolean",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_CP3_VISIT_REQD_VOCAB",{setFunction:this.setReqdThisVisitVocab,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_VISIT_REQD_CLASS",{setFunction:this.setReqdThisVisitClassification,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_VISIT_REQD_CONF",{setFunction:this.setReqdThisVisitConfirmation,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_VISIT_REQD_TYPE",{setFunction:this.setReqdThisVisitType,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_CHRONIC_REQD_VOCAB",{setFunction:this.setReqdChronicVocab,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_CHRONIC_REQD_CLASS",{setFunction:this.setReqdChronicClassification,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_CHRONIC_REQD_CONF",{setFunction:this.setReqdChronicConfirmation,type:"Array",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_CP3_CHRONIC_REQD_STATUS",{setFunction:this.setReqdChronicLifeCycleStatus,type:"Array",field:"PARENT_ENTITY_ID"});
};
return ConprobO3Component;
});
define("cerner/discernabu/components/conprobo3/controls/ConditionListTable",function(){var attribute=MPageOO.attribute;
var inherits=MPageOO.inherits;
var Condition=MPageEntity.entities.Condition;
var i18n=window.i18n.discernabu.conprobo3_i18n;
var ConditionListTable=function(element,factory){MPageControls.Control.call(this,element);
this.setFactory(factory);
var table=factory.componentTable();
var activeGroup=factory.tableGroup();
var historicalGroup=factory.tableGroup();
this.setTable(table);
this.setActiveGroup(activeGroup);
this.setHistoricalGroup(historicalGroup);
this.componentTableId="";
};
ConditionListTable.prototype=new MPageControls.Control();
var method=ConditionListTable.prototype;
var COLUMNS={DISPLAY:"display",CLASSIFICATION:"classification",ONSET:"onset",ACTIONS:"actions",COMMENT_IND:"comment_indicator"};
var GROUPS={ACTIVE:"active_group",HISTORICAL:"historical_group"};
attribute(ConditionListTable,"Component");
attribute(ConditionListTable,"Table");
attribute(ConditionListTable,"ActiveGroup");
attribute(ConditionListTable,"HistoricalGroup");
attribute(ConditionListTable,"Conditions");
attribute(ConditionListTable,"Factory");
attribute(ConditionListTable,"Templates");
attribute(ConditionListTable,"Rows");
attribute(ConditionListTable,"ActiveRows");
attribute(ConditionListTable,"HistoricalRows");
attribute(ConditionListTable,"TVHistoricalRows");
attribute(ConditionListTable,"MaxHeight");
attribute(ConditionListTable,"ClassificationFilter");
attribute(ConditionListTable,"BedrockConfig");
attribute(ConditionListTable,"SharedCondResObj");
attribute(ConditionListTable,"CanModifyThisVisit");
attribute(ConditionListTable,"CanModifyChronic");
attribute(ConditionListTable,"IsPriorityEnabled");
attribute(ConditionListTable,"IsDxAssistantEnabled");
var createRows=function(conditions){var rows=[];
var activeRows=[];
var historicalRows=[];
var tvHistoricalRows=[];
var build=this.getFactory();
var self=this;
var classFilter=this.getClassificationFilter();
this.setRows(rows);
this.setActiveRows(activeRows);
this.setHistoricalRows(historicalRows);
this.setTVHistoricalRows(tvHistoricalRows);
conditions.each(function(condition){var row=null;
var dxMeaning=(condition.getDiagnosisDriverFromArray())?condition.getDiagnosisDriverFromArray().getClassification().getMeaning():"";
var probMeaning=(condition.getProblemDriverFromArray())?condition.getProblemDriverFromArray().getClassificationMeaning():"";
var classificationFilterQual=["MEDICAL","PATSTATED"];
if(!condition.getIsChronic()&&!condition.getIsThisVisit()&&!condition.getIsHistorical()){return;
}else{if(condition.getIsCernerNKP()&&condition.getIsChronic()){row=build.conditionListTableNKPRow();
}else{if(classFilter==="ALL"||(classFilter==="MED_PATIENT"&&(classificationFilterQual.indexOf(dxMeaning)>-1||classificationFilterQual.indexOf(probMeaning)>-1))){row=build.conditionListTableRow();
row.setBedrockConfig(self.getBedrockConfig());
row.setCanModifyChronic(self.getCanModifyChronic());
row.setCanModifyThisVisit(self.getCanModifyThisVisit());
}}}if(row){row.setComponent(self.getComponent());
row.setParent(self);
row.setCondition(condition);
row.setConditionList(conditions);
row.setSharedCondResObj(self.getSharedCondResObj());
row.setTemplates(self.getTemplates());
row.setIsPriorityEnabled(self.getIsPriorityEnabled());
row.setIsDxAssistantEnabled(self.getIsDxAssistantEnabled());
rows.push(row);
row.create();
if(condition.getIsHistorical()&&condition.getDiagnosisDriverFromArray()&&!condition.getProblemDriverFromArray()){tvHistoricalRows.push(row);
}else{if(condition.getIsHistorical()&&!(condition.getIsChronic()||condition.getIsThisVisit())){historicalRows.push(row);
tvHistoricalRows.push(row);
}else{activeRows.push(row);
}}}});
};
var updateRows=function(noTVHistorical){var rows=(noTVHistorical)?this.getActiveRows().concat(this.getHistoricalRows()):this.getRows();
var activeCount=0;
var rowsLen=rows.length;
for(var i=0;
i<rowsLen;
i++){var row=rows[i];
var isHistorical=row.getCondition().getIsHistorical()&&!(row.getCondition().getIsChronic()||row.getCondition().getIsThisVisit());
if(!isHistorical){activeCount++;
row.setElement(this.getRowElement(i,isHistorical));
}else{row.setElement(this.getRowElement(i-activeCount,isHistorical));
}row.update();
}};
method.create=function(){this.componentTableId=this.getElementId();
var table=this.getTable();
table.setNamespace(this.componentTableId);
this.initGroups();
};
method.update=function(){if(!this.getConditions()){throw new Error("There are no conditions for the ConditionListTable to render. Please use <ConditionListTable>.setConditions() method to specify a condition array.");
}var table=this.getTable();
var activeGroup=this.getActiveGroup();
var historicalGroup=this.getHistoricalGroup();
var userPrefs=this.getComponent().getPreferencesObj();
var noTVHistorical=true;
if(userPrefs&&userPrefs.tvHistFilterPref==undefined){userPrefs.tvHistFilterPref="";
}table.clearGroups();
var ordered=this.getConditions().sortByType([Condition.TYPES.THIS_VISIT,Condition.TYPES.NKP,Condition.TYPES.CHRONIC,Condition.TYPES.HISTORICAL]);
var sortedByPriority=ordered.sortByPriority();
ordered=ordered.filter("isThisVisit",false);
ordered=sortedByPriority.concat(ordered);
createRows.call(this,ordered);
if(this.getActiveRows().length){activeGroup.clearData();
activeGroup.bindData(this.getActiveRows());
if(!table.hasGroup(GROUPS.ACTIVE)){table.addGroup(activeGroup);
}}if(userPrefs&&userPrefs.tvHistFilterPref&&this.getTVHistoricalRows().length){noTVHistorical=false;
historicalGroup.clearData();
historicalGroup.bindData(this.getTVHistoricalRows());
if(!table.hasGroup(GROUPS.HISTORICAL)){table.addGroup(historicalGroup);
}}else{if(this.getHistoricalRows().length||this.getTVHistoricalRows().length){noTVHistorical=true;
historicalGroup.clearData();
historicalGroup.bindData(this.getHistoricalRows());
if(!table.hasGroup(GROUPS.HISTORICAL)){table.addGroup(historicalGroup);
}}}this.compTableOverrides(table);
table.bindData(this.getRows());
this.getElement().html(table.render());
table.finalize();
this.attachEvents();
updateRows.call(this,noTVHistorical);
this.getComponent().resizeComponent();
};
method.getRowElement=function(index,isHistorical){var tableBody=this.getBodyElement();
var activeSection=tableBody.children[0].children[0];
var historicalSection=tableBody.children[0].children[1];
if(isHistorical&&historicalSection){return historicalSection.children[1].children[index];
}if(activeSection){return activeSection.children[1].children[index];
}};
method.getBodyElement=function(){return document.getElementById(this.componentTableId+"tableBody");
};
method.getHeaderElement=function(){return document.getElementById(this.componentTableId+"headerWrapper");
};
method.initGroups=function(){var activeGroup=null;
var historicalGroup=null;
if(this.getParent().getParent().getCurrentView()){activeGroup=this.getParent().getParent().getCurrentView().getConditionListTable().getActiveGroup();
historicalGroup=this.getParent().getParent().getCurrentView().getConditionListTable().getHistoricalGroup();
this.setActiveGroup(activeGroup);
this.setHistoricalGroup(historicalGroup);
}else{activeGroup=this.getActiveGroup();
historicalGroup=this.getHistoricalGroup();
activeGroup.setGroupId(GROUPS.ACTIVE);
activeGroup.setIsExpanded(true);
activeGroup.setHideHeader(true);
historicalGroup.setGroupId(GROUPS.HISTORICAL);
historicalGroup.setIsExpanded(false);
historicalGroup.setDisplay(i18n.HISTORICAL);
}};
method.addCommentIndicatorColumn=function(){var commentIndColumn=this.getFactory().tableColumn();
commentIndColumn.setColumnId(COLUMNS.COMMENT_IND);
commentIndColumn.setColumnDisplay("");
commentIndColumn.setCustomClass("condition-comment");
commentIndColumn.setIsSortable(false);
commentIndColumn.setRenderTemplate("${makeCommentsIndCellHtml()}");
this.getTable().addColumn(commentIndColumn);
};
method.addDisplayColumn=function(){var displayColumn=this.getFactory().tableColumn();
displayColumn.setColumnId(COLUMNS.DISPLAY);
displayColumn.setColumnDisplay(i18n.NAME);
displayColumn.setCustomClass("condition-name");
displayColumn.setIsSortable(false);
displayColumn.setRenderTemplate("${makeDisplayCellHtml()}");
this.getTable().addColumn(displayColumn);
};
method.addClassificationColumn=function(){var classificationColumn=this.getFactory().tableColumn();
classificationColumn.setColumnId(COLUMNS.CLASSIFICATION);
classificationColumn.setColumnDisplay(i18n.CLASSIFICATION);
classificationColumn.setIsSortable(false);
classificationColumn.setCustomClass("condition-classification");
classificationColumn.setRenderTemplate("${makeClassificationCellHtml()}");
this.getTable().addColumn(classificationColumn);
};
method.addActionsColumn=function(){var actionsColumn=this.getFactory().tableColumn();
actionsColumn.setColumnId(COLUMNS.ACTIONS);
actionsColumn.setColumnDisplay(i18n.ACTIONS);
actionsColumn.setIsSortable(false);
actionsColumn.setCustomClass("condition-actions");
actionsColumn.setRenderTemplate("${makeActionsCellHtml()}");
this.getTable().addColumn(actionsColumn);
};
method.highlightCondition=function(condition){var rows=this.getRows();
for(var i=rows.length;
i--;
){var row=rows[i];
if(row.getCondition()==condition){row.highlight();
}else{row.unhighlight();
}}};
method.getRowForCondition=function(condition){var rows=this.getRows();
var conditionRows=rows.filter(function(row){return row.getCondition()===condition;
});
return conditionRows.length?conditionRows[0]:null;
};
method.attachEvents=function(){var self=this;
var component=this.getComponent();
var historicalGroupId=this.getElementId()+"\\:historical_group";
var tvHistFilter=$("#tvHistFilter"+historicalGroupId);
var listTable=this.getTable();
if(tvHistFilter.length>0){tvHistFilter.on("click","input",function(){var checkedPref=$(this).prop("checked")?"checked":"";
var data=(checkedPref)?self.getTVHistoricalRows():self.getHistoricalRows();
var histGroup=listTable.getGroupById("historical_group");
var userPrefs=component.getPreferencesObj();
var localPrefs=userPrefs?userPrefs:{};
if(localPrefs){localPrefs.tvHistFilterPref=checkedPref;
component.setPreferencesObj(localPrefs);
component.savePreferences(true);
}histGroup.clearData();
histGroup.bindData(data);
listTable.refresh();
self.update();
});
}};
method.compTableOverrides=function(compTable){compTable.renderGroup=function(group){var headId=this.namespace+":"+group.getGroupId();
var escapedHeadId=this.namespace+"\\:"+group.getGroupId();
var headToggleTitle=group.isExpanded()?window.i18n.discernabu.HIDE_SECTION:window.i18n.discernabu.SHOW_SECTION;
var headToggleContent=group.isExpanded()?"-":"+";
var headToggleClass=group.isExpanded()?"":"closed";
var countHtml=group.getShowCount()?"<span class='sub-sec-total'>&nbsp;("+group.getRows().length+")</span>":"";
var toggleHtml=group.getCanCollapse()?("<span class='sub-sec-hd-tgl' title='"+headToggleTitle+"'>"+headToggleContent+"</span>"):"";
var groupCollapsibility=group.getCanCollapse()?"can-collapse ":"";
var hideHeader=group.getHideHeader()?"hidden'":"";
var tvHistFilter=$("#"+escapedHeadId).find("#tvHistFilter"+escapedHeadId+"> input");
var component=(this.getRows().length>0)?this.getRows()[0].getResultData().getComponent():null;
var userPrefs=(component)?component.getPreferencesObj():null;
var localPrefs=(userPrefs)?userPrefs:{};
var isChecked=(tvHistFilter.length&&tvHistFilter.prop("checked"))?"checked":"";
if(localPrefs.tvHistFilterPref&&!tvHistFilter.length){isChecked=localPrefs.tvHistFilterPref;
}return"<div id='"+headId+"' class='"+headToggleClass+"'><h3 id='"+headId+":header' class='sub-sec-hd "+groupCollapsibility+hideHeader+"'>"+toggleHtml+"<span class='sub-sec-title' style='display:inline-block'><"+this.getRowTag()+"><"+this.getColumnTag()+"><span class='sub-sec-display'>"+group.getDisplay()+"</span>"+countHtml+"</"+this.getColumnTag()+"></"+this.getRowTag()+"></span><span id='tvHistFilter"+headId+"' class='conprobo3-tv-hist-filter'>"+i18n.SHOW_PREV_VISITS+"  <input type='checkbox' style='vertical-align:middle' "+isChecked+"></input></span></h3><div id='"+headId+":content' class='sub-sec-content'>"+(group.getRows().length?this.renderRows(group.getRows(),group.getGroupId()):this.renderNoResults())+"</div></div>";
};
};
method.getHeight=function(){return this.getElement().outerHeight();
};
method.setMaxHeight=function(height){var body=this.getBodyElement();
var header=this.getHeaderElement();
var bodyMaxHeight=height-$(header).outerHeight();
$(body).css("max-height",bodyMaxHeight);
};
method.resize=function(){this.getTable().updateAfterResize();
};
method.getScrollPosition=function(){return this.getBodyElement().scrollTop;
};
method.setScrollPosition=function(position){this.getBodyElement().scrollTop=position;
};
method.scrollToComments=function(){this.fire("scrollToComments");
};
method.moveConditionToThisVisit=function(condition){this.fire("moveConditionToThisVisit",[condition]);
this.update();
};
method.removeConditionFromThisVisit=function(condition,priority){this.fire("removeConditionFromThisVisit",[condition,priority]);
this.update();
};
method.moveConditionToChronic=function(condition){this.fire("moveConditionToChronic",[condition]);
this.update();
};
method.resolveCondition=function(condition,reply){this.fire("resolveCondition",[condition,reply]);
this.update();
};
method.unresolveCondition=function(condition,reply){this.fire("unresolveCondition",[condition,reply]);
this.update();
};
method.handleDuplicates=function(isThisVisit,raw){this.fire("handleDuplicates",[isThisVisit,raw]);
};
method.selectCondition=function(condition){this.fire("selectCondition",[condition]);
};
method.changePriority=function(condition){this.fire("changePriority",[condition]);
};
method.cancelCondition=function(condition,reply){this.fire("cancelCondition",[condition,reply]);
};
method.updateSpecifiedConditions=function(conditions){this.update();
this.fire("updateSpecifiedConditions",[conditions]);
};
return ConditionListTable;
});
define("cerner/discernabu/components/conprobo3/controls/ConditionListTableNKPRow",["cerner/discernabu/components/conprobo3/controls/ConditionListTableRow"],function(ConditionListTableRow){var Control=MPageControls.Control;
var attribute=MPageOO.attribute;
var ConditionListTableNKPRow=function(factory){ConditionListTableRow.call(this,factory);
};
ConditionListTableNKPRow.prototype=new ConditionListTableRow();
var method=ConditionListTableNKPRow.prototype;
attribute(ConditionListTableNKPRow,"CancelButton");
var createControl=function(control){control.setParent(this);
control.setCondition(this.getCondition());
};
var initControl=function(control){if(control.getElement()===null){return;
}control.init();
};
method.create=function(){var build=this.getFactory();
var cancelButton=build.cancelButton();
cancelButton.setSharedCondResObj(this.getSharedCondResObj());
this.setCancelButton(cancelButton);
createControl.call(this,this.getCancelButton());
};
method.update=function(){initControl.call(this,this.getCancelButton());
};
method.setEnabled=function(value){if(value){this.update();
return;
}this.getCancelButton().setEnabled(false);
};
method.highlight=function(){};
method.unhighlight=function(){};
method.redirectEventToControls=function(eventName,args){this.getCancelButton().trigger(eventName,args);
};
method.makeTemplateContext=function(){var canNKPModify=false;
var nkpProblemDriver=this.getCondition().getProblemDriverFromArray();
if(nkpProblemDriver){canNKPModify=nkpProblemDriver.getCanCondModify();
}if(this.templateContext){return this.templateContext;
}this.templateContext={cancelButtonId:this.getCancelButton().getElementId(),canModify:canNKPModify,condition:{targetNomenclature:this.getCondition().getTargetNomenclatureValue(),classificationDisplay:this.getCondition().getClassificationDisplay(),display:this.getCondition().getDisplay()}};
return this.templateContext;
};
method.makeDisplayCellHtml=function(){return this.getTemplates().nkpDisplayColumn(this.makeTemplateContext());
};
method.makeActionsCellHtml=function(){return this.getTemplates().nkpActionColumn(this.makeTemplateContext());
};
method.makeClassificationCellHtml=function(){return this.getTemplates().classificationColumn(this.makeTemplateContext());
};
method.cancelCondition=function(condition,reply){this.fire("cancelCondition",[condition,reply]);
};
method.moveConditionToThisVisit=function(condition){};
method.removeConditionFromThisVisit=function(condition){};
method.moveConditionToChronic=function(condition){};
method.resolveCondition=function(condition){};
method.selectCondition=function(condition){};
return ConditionListTableNKPRow;
});
define("cerner/discernabu/components/conprobo3/controls/ConditionListTableRow",function(){var Control=MPageControls.Control;
var attribute=MPageOO.attribute;
var ConditionListTableRow=function(factory){Control.call(this);
this.setFactory(factory);
};
ConditionListTableRow.prototype=new Control();
var method=ConditionListTableRow.prototype;
attribute(ConditionListTableRow,"Component");
attribute(ConditionListTableRow,"Factory");
attribute(ConditionListTableRow,"ThisVisitToggle");
attribute(ConditionListTableRow,"ChronicToggle");
attribute(ConditionListTableRow,"SelectConditionButton");
attribute(ConditionListTableRow,"Condition");
attribute(ConditionListTableRow,"BedrockConfig");
attribute(ConditionListTableRow,"SharedCondResObj");
attribute(ConditionListTableRow,"PriorityDropDown");
attribute(ConditionListTableRow,"ResolvedToggle");
attribute(ConditionListTableRow,"Templates");
attribute(ConditionListTableRow,"CanModifyThisVisit");
attribute(ConditionListTableRow,"CanModifyChronic");
attribute(ConditionListTableRow,"ConditionList");
attribute(ConditionListTableRow,"IsPriorityEnabled");
attribute(ConditionListTableRow,"IsDxAssistantEnabled");
attribute(ConditionListTableRow,"DxAssistantButton");
attribute(ConditionListTableRow,"CommentIndicatorButton");
var createControl=function(control){control.setParent(this);
control.setCondition(this.getCondition());
};
var initControl=function(control){if(control.getElement()===null){return;
}control.init();
};
method.create=function(){var build=this.getFactory();
var thisVisitToggle=build.thisVisitToggle();
var chronicToggle=build.chronicToggle();
var resolvedToggle=build.resolvedToggle();
var dxAssistantButton=build.dxAssistantButton();
var commentIndicatorButton=build.commentIndicatorButton();
thisVisitToggle.setBedrockConfig(this.getBedrockConfig());
thisVisitToggle.setSharedCondResObj(this.getSharedCondResObj());
thisVisitToggle.setCanModifyThisVisit(this.getCanModifyThisVisit());
thisVisitToggle.setConditions(this.getConditionList());
thisVisitToggle.setIsPriorityEnabled(this.getIsPriorityEnabled());
chronicToggle.setBedrockConfig(this.getBedrockConfig());
chronicToggle.setSharedCondResObj(this.getSharedCondResObj());
chronicToggle.setCanModifyChronic(this.getCanModifyChronic());
resolvedToggle.setBedrockConfig(this.getBedrockConfig());
resolvedToggle.setSharedCondResObj(this.getSharedCondResObj());
resolvedToggle.setCanModifyChronic(this.getCanModifyChronic());
this.setCommentIndicatorButton(commentIndicatorButton);
this.setThisVisitToggle(thisVisitToggle);
this.setChronicToggle(chronicToggle);
this.setSelectConditionButton(build.selectConditionButton());
this.setResolvedToggle(resolvedToggle);
this.setPriorityDropDown(build.priorityDropDown());
this.setDxAssistantButton(build.dxAssistantButton());
this.getPriorityDropDown().setItemTemplate(this.getTemplates().priorityDropDownItem);
this.getPriorityDropDown().setConditions(this.getConditionList());
this.getPriorityDropDown().setSharedCondResObj(this.getSharedCondResObj());
this.getPriorityDropDown().setFactory(build);
this.getDxAssistantButton().setConditions(this.getConditionList());
createControl.call(this,this.getCommentIndicatorButton());
createControl.call(this,this.getThisVisitToggle());
createControl.call(this,this.getChronicToggle());
createControl.call(this,this.getSelectConditionButton());
createControl.call(this,this.getResolvedToggle());
createControl.call(this,this.getPriorityDropDown());
createControl.call(this,this.getDxAssistantButton());
};
method.update=function(){initControl.call(this,this.getThisVisitToggle());
initControl.call(this,this.getChronicToggle());
initControl.call(this,this.getSelectConditionButton());
initControl.call(this,this.getResolvedToggle());
initControl.call(this,this.getPriorityDropDown());
initControl.call(this,this.getDxAssistantButton());
initControl.call(this,this.getCommentIndicatorButton());
this.flagProblemRow();
if(this.getCondition().getIsLocked()){this.setEnabled(false);
}};
method.highlight=function(){var el=document.getElementById(this.getElementId());
$(el).addClass("highlight");
};
method.unhighlight=function(){var el=document.getElementById(this.getElementId());
$(el).removeClass("highlight");
};
method.flagProblemRow=function(){var el=document.getElementById(this.getElementId());
var condition=this.getCondition();
var bedrockConfig=this.getBedrockConfig();
if(condition.isFlagged(bedrockConfig)){$(el).addClass("flagged-problem");
}else{$(el).removeClass("flagged-problem");
}};
method.redirectEventToControls=function(eventName,args){this.getThisVisitToggle().trigger(eventName,args);
this.getChronicToggle().trigger(eventName,args);
this.getSelectConditionButton().trigger(eventName,args);
this.getResolvedToggle().trigger(eventName,args);
this.getPriorityDropDown().trigger(eventName,args);
};
method.makeTemplateContext=function(){if(this.templateContext){return this.templateContext;
}this.templateContext={selectConditionBtnId:this.getSelectConditionButton().getElementId(),chronicToggleId:this.getChronicToggle().getElementId(),thisVisitToggleId:this.getThisVisitToggle().getElementId(),resolvedToggleId:this.getResolvedToggle().getElementId(),priorityDropDownId:this.getPriorityDropDown().getElementId(),canModifyThisVisit:this.getCanModifyThisVisit(),canModifyChronic:this.getCanModifyChronic(),isPriorityEnabled:this.getIsPriorityEnabled(),isDxAssistantEnabled:this.getIsDxAssistantEnabled(),dxAssButtId:this.getDxAssistantButton().getElementId(),showDxAssIcon:this.getCondition().hasDxAssistant()&&!this.getCondition().getIsSpecific(),commentsIndButtId:this.getCommentIndicatorButton().getElementId(),condition:{priorityDisplay:this.getCondition().getPriorityDisplay(),targetNomenclature:this.getCondition().getTargetNomenclatureValue(),classificationDisplay:this.getCondition().getClassificationDisplay(),display:this.getCondition().getDisplay(),isThisVisit:this.getCondition().getIsThisVisit(),isChronic:this.getCondition().getIsChronic(),canModifyThisVisit:this.getCondition().canModifyThisVisit(),canModifyChronic:this.getCondition().canModifyChronic(),isInactive:this.getCondition().getIsInactive(),isHistorical:this.getCondition().getIsHistorical(),showCommentIcon:this.getCondition().getComments().length?true:false,canModify:this.getCondition().canModify(),hasProblem:(this.getCondition().getProblemDriverValue())?true:false,Problems:this.getCondition().getProblems(),hasDx:(this.getCondition().getDiagnosisDriverValue())?true:false}};
return this.templateContext;
};
method.setEnabled=function(value){if(value){this.update();
return;
}this.getThisVisitToggle().setEnabled(false);
this.getChronicToggle().setEnabled(false);
this.getSelectConditionButton().setEnabled(false);
this.getPriorityDropDown().setEnabled(false);
this.getResolvedToggle().setEnabled(false);
this.getDxAssistantButton().setEnabled(false);
this.getCommentIndicatorButton().setEnabled(false);
};
method.makeDisplayCellHtml=function(){return this.getTemplates().displayColumn(this.makeTemplateContext());
};
method.makeActionsCellHtml=function(){return this.getTemplates().actionsColumn(this.makeTemplateContext());
};
method.makeClassificationCellHtml=function(){return this.getTemplates().classificationColumn(this.makeTemplateContext());
};
method.makeCommentsIndCellHtml=function(){return this.getTemplates().commentsIndicatorColumn(this.makeTemplateContext());
};
method.moveConditionToThisVisit=function(condition){this.redirectEventToControls("moveConditionToThisVisit",[condition]);
this.fire("moveConditionToThisVisit",[condition]);
};
method.removeConditionFromThisVisit=function(condition,priority){this.fire("removeConditionFromThisVisit",[condition,priority]);
};
method.moveConditionToChronic=function(condition){this.redirectEventToControls("moveConditionToChronic",[condition]);
this.fire("moveConditionToChronic",[condition]);
};
method.resolveCondition=function(condition,reply){this.redirectEventToControls("resolveCondition",[condition]);
this.fire("resolveCondition",[condition,reply]);
};
method.selectCondition=function(condition){this.fire("selectCondition",[condition]);
};
method.unresolveCondition=function(condition,reply){this.fire("unresolveCondition",[condition,reply]);
};
method.handleDuplicates=function(isThisVisit,raw){this.fire("handleDuplicates",[isThisVisit,raw]);
};
method.changePriority=function(condition){this.fire("changePriority",[condition]);
};
method.cancelCondition=function(condition,reply){this.fire("cancelCondition",[condition,reply]);
};
method.updateSpecifiedConditions=function(conditions){this.fire("updateSpecifiedConditions",[conditions]);
};
method.scrollToComments=function(){this.fire("scrollToComments");
};
method.remoteCallStarted=function(condition){this.setEnabled(false);
};
method.remoteCallEnded=function(){this.setEnabled(true);
};
return ConditionListTableRow;
});
define("cerner/discernabu/components/conprobo3/controls/DetailsPanel",function(){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var i18n=window.i18n.discernabu.conprobo3_i18n;
var DetailsPanel=function(element,factory){Control.call(this,element);
this.setIsExpanded(false);
this.setFactory(factory);
this.setIsCreated(false);
};
DetailsPanel.prototype=new Control();
var method=DetailsPanel.prototype;
attribute(DetailsPanel,"SidePanel");
attribute(DetailsPanel,"Condition");
attribute(DetailsPanel,"Factory");
attribute(DetailsPanel,"ThisVisitToggle");
attribute(DetailsPanel,"ChronicToggle");
attribute(DetailsPanel,"BedrockConfig");
attribute(DetailsPanel,"ModifyButton");
attribute(DetailsPanel,"ResolvedToggle");
attribute(DetailsPanel,"InfoButton");
attribute(DetailsPanel,"CloseButton");
attribute(DetailsPanel,"FlaggedProblemBanner");
attribute(DetailsPanel,"MaxHeight");
attribute(DetailsPanel,"IsCreated");
attribute(DetailsPanel,"CanModifyThisVisit");
attribute(DetailsPanel,"CanModifyChronic");
attribute(DetailsPanel,"CancelButton");
attribute(DetailsPanel,"HistoricalTable");
attribute(DetailsPanel,"SharedCondResObj");
attribute(DetailsPanel,"Criterion");
attribute(DetailsPanel,"MetaObj");
attribute(DetailsPanel,"InfoButtonErrorModal");
attribute(DetailsPanel,"IsInfoButtonEnabled");
attribute(DetailsPanel,"IsExpanded");
attribute(DetailsPanel,"CommentPanel");
attribute(DetailsPanel,"IsDxAssistantEnabled");
attribute(DetailsPanel,"DxAssistantButton");
attribute(DetailsPanel,"ConditionList");
var createSidePanel=function(){var sp=this.getFactory().sidePanel();
sp.setContainerElementId(this.getElementId());
sp.setExpandOption(sp.expandOption.EXPAND_DOWN);
sp.setUniqueId("side_panel_"+this.getControlId());
sp.setContainerElementId(this.getElementId());
sp.setMinHeight("400px");
var self=this;
sp.setOnExpandFunction(function(){self.setIsExpanded(true);
});
sp.setOnCollapseFunction(function(){self.setIsExpanded(false);
self.resize();
});
this.setSidePanel(sp);
};
method.create=function(){createSidePanel.call(this);
var build=this.getFactory();
var flaggedBanner=build.infoBanner();
flaggedBanner.setMessage("<span>"+i18n.NONPREFERRED_TERM_MSG+"</span>");
flaggedBanner.setBedrockConfig(this.getBedrockConfig());
flaggedBanner.setParent(this);
this.setFlaggedProblemBanner(flaggedBanner);
var closeBtn=build.closeDetailsPanelButton();
closeBtn.setParent(this);
this.setCloseButton(closeBtn);
var thisVisitToggle=build.thisVisitToggle();
thisVisitToggle.setBedrockConfig(this.getBedrockConfig());
thisVisitToggle.setSharedCondResObj(this.getSharedCondResObj());
thisVisitToggle.setCanModifyThisVisit(this.getCanModifyThisVisit());
thisVisitToggle.setParent(this);
this.setThisVisitToggle(thisVisitToggle);
var chronicToggle=build.chronicToggle();
chronicToggle.setBedrockConfig(this.getBedrockConfig());
chronicToggle.setSharedCondResObj(this.getSharedCondResObj());
chronicToggle.setCanModifyChronic(this.getCanModifyChronic());
chronicToggle.setParent(this);
this.setChronicToggle(chronicToggle);
var modifyButton=build.modifyButton();
modifyButton.setParent(this);
modifyButton.setSharedCondResObj(this.getSharedCondResObj());
modifyButton.setBedrockConfig(this.getBedrockConfig());
this.setModifyButton(modifyButton);
var resolvedToggle=build.resolvedToggle();
resolvedToggle.setParent(this);
resolvedToggle.setBedrockConfig(this.getBedrockConfig());
resolvedToggle.setCanModifyChronic(this.getCanModifyChronic());
this.setResolvedToggle(resolvedToggle);
var infoButton=build.infoButton();
infoButton.setParent(this);
infoButton.setCriterion(this.getCriterion());
this.setInfoButton(infoButton);
var cancelButton=build.cancelButton();
cancelButton.setParent(this);
cancelButton.setSharedCondResObj(this.getSharedCondResObj());
this.setCancelButton(cancelButton);
var commentPanel=build.commentPanel();
commentPanel.setParent(this);
this.setCommentPanel(commentPanel);
var historicalTable=build.historicalTable();
historicalTable.setParent(this);
historicalTable.addOnsetColumn();
historicalTable.addDisplayColumn();
historicalTable.create();
this.setHistoricalTable(historicalTable);
var dxAssButt=build.dxAssistantButton();
dxAssButt.setParent(this);
dxAssButt.setConditions(this.getConditionList());
dxAssButt.setCondition(this.getCondition());
this.setDxAssistantButton(dxAssButt);
};
method.show=function(){if(this.getIsCreated()){this.getSidePanel().collapseSidePanel();
}};
method.update=function(){if(!this.getCondition()){return;
}if(this.getCondition().isEmpty()){this.closeDetailsPanel();
return;
}var build=this.getFactory();
var sp=this.getSidePanel();
var condition=this.getCondition();
this.getFlaggedProblemBanner().setCondition(condition);
this.getThisVisitToggle().setCondition(condition);
this.getChronicToggle().setCondition(condition);
this.getModifyButton().setCondition(condition);
this.getResolvedToggle().setCondition(condition);
this.getInfoButton().setCondition(condition);
this.getCancelButton().setCondition(condition);
this.getHistoricalTable().setCondition(condition);
this.getCommentPanel().setCondition(condition);
this.getDxAssistantButton().setCondition(condition);
this.getDxAssistantButton().setConditions(this.getConditionList());
var section=this.getElement().closest(".section");
this.getSidePanel().renderSidePanel();
sp.setContents(build.detailedTemplate().sidePanel(this),section.attr("id"));
sp.showCloseButton();
this.getFlaggedProblemBanner().init();
this.getThisVisitToggle().init();
this.getChronicToggle().init();
this.getModifyButton().init();
this.getResolvedToggle().init();
this.getInfoButton().init();
this.getCloseButton().init();
this.getCancelButton().init();
this.getDxAssistantButton().init();
this.getHistoricalTable().loadNomenclatureInfo();
this.getCommentPanel().create();
this.getCommentPanel().update();
this.setIsCreated(true);
this.resize();
if(this.getCondition().getIsLocked()){this.setEnabled(false);
}};
method.redirectEventToControls=function(eventName,args){this.getThisVisitToggle().trigger(eventName,args);
this.getChronicToggle().trigger(eventName,args);
this.getModifyButton().trigger(eventName,args);
this.getResolvedToggle().trigger(eventName,args);
this.getInfoButton().trigger(eventName,args);
this.getCancelButton().trigger(eventName,args);
};
method.resolveCondition=function(condition,reply){this.fire("resolveCondition",[condition,reply]);
};
method.handleDuplicates=function(isThisVisit,raw){this.fire("handleDuplicates",[isThisVisit,raw]);
};
method.unresolveCondition=function(condition,reply){this.fire("resolveCondition",[condition,reply]);
};
method.removeConditionFromThisVisit=function(condition,priority){this.fire("removeConditionFromThisVisit",[condition,priority]);
};
method.moveConditionToThisVisit=function(condition){this.fire("moveConditionToThisVisit",[condition]);
};
method.moveConditionToChronic=function(condition){this.fire("moveConditionToChronic",[condition]);
};
method.cancelCondition=function(condition,reply){this.fire("cancelCondition",[condition,reply]);
};
method.remoteCallStarted=function(condition){this.setEnabled(false);
this.fire("remoteCallStarted",[condition]);
};
method.getContentHeight=function(){if(!this.getSidePanel().m_sidePanelContents){return null;
}return this.getSidePanel().m_sidePanelContents.outerHeight();
};
method.setHeight=function(height){var minHeight=parseInt(this.getSidePanel().getMinHeight());
if(height<minHeight){this.getSidePanel().setHeight(minHeight+1+"px");
}else{this.getSidePanel().setHeight(height+"px");
}};
method.getHeight=function(){return this.getElement().outerHeight();
};
method.resize=function(){if(!this.getIsCreated()){return;
}if(this.getIsExpanded()){this.getSidePanel().collapseSidePanel();
this.getSidePanel().resizePanel();
this.getSidePanel().expandSidePanel();
this.getElement().find(".sp-expand-collapse").removeClass("hidden");
return;
}this.getSidePanel().resizePanel();
};
method.closeDetailsPanel=function(){this.fire("closeDetailsPanel");
};
method.getScrollContainerId=function(){return"sidePanelScrollContainer"+this.getSidePanel().getUniqueId();
};
method.updateSpecifiedConditions=function(conditions){this.update();
this.fire("updateSpecifiedConditions",[conditions]);
};
method.scrollToComments=function(){this.getSidePanel().expandSidePanel();
var scrollContainer=document.getElementById(this.getScrollContainerId());
scrollContainer.scrollTop=this.getCommentPanel().getElement()[0].offsetTop;
};
method.addComment=function(comment){this.fire("addComment",[comment]);
};
method.invokeInfoBtnApi=function(){var priCriteriaCd=0;
var errorModal=null;
var build=this.getFactory();
var infoBtnApi=null;
var mpageUtil=build.mpageUtil();
var mpageModalButton=build.mpageModalButton();
var criterion=this.getCriterion();
var condition=this.getCondition();
var metaObj=this.getMetaObj();
var conditionIsThisVisit=condition.getIsThisVisit();
var conditionIsChronic=condition.getIsChronic();
var conditionIsHistorical=condition.getIsHistorical();
var conditionIsInactive=condition.getIsInactive();
var nomenId;
var searchNomId;
if(conditionIsThisVisit){priCriteriaCd=metaObj.DIAG_PRIMARY_CRITERIA_CD;
nomenId=condition.getNomenclatureValue();
}else{if(conditionIsChronic||conditionIsInactive){priCriteriaCd=metaObj.PROB_PRIMARY_CRITERIA_CD;
nomenId=condition.getTargetNomenclatureValue();
searchNomId=condition.getNomenclatureValue();
}else{if(conditionIsHistorical){if(condition.getProblems().length){priCriteriaCd=metaObj.PROB_PRIMARY_CRITERIA_CD;
nomenId=condition.getTargetNomenclatureValue();
searchNomId=condition.getNomenclatureValue();
}else{if(condition.getDiagnoses().length){priCriteriaCd=metaObj.DIAG_PRIMARY_CRITERIA_CD;
nomenId=condition.getNomenclatureValue();
}}}}}var patientId=criterion.person_id;
var encounterId=criterion.encntr_id;
var description=condition.getDisplay();
try{infoBtnApi=build.infoButtonApi();
if(infoBtnApi){infoBtnApi.SetInfoButtonData(patientId,encounterId,priCriteriaCd,1,2);
if(conditionIsThisVisit){infoBtnApi.AddDiagnosis(nomenId,nomenId,description);
}else{infoBtnApi.AddProblem(nomenId,searchNomId,description);
}infoBtnApi.LaunchInfoButton();
}}catch(err){var errorModal=build.infoButtonErrorModal(this.getFactory());
this.setInfoButtonErrorModal(errorModal);
errorModal.setError(err);
errorModal.launchModalDialog();
}};
method.setEnabled=function(value){if(value){this.update();
return;
}this.getThisVisitToggle().setEnabled(false);
this.getChronicToggle().setEnabled(false);
this.getModifyButton().setEnabled(false);
this.getCancelButton().setEnabled(false);
this.getResolvedToggle().setEnabled(false);
this.getDxAssistantButton().setEnabled(false);
};
return DetailsPanel;
});
define("cerner/discernabu/components/conprobo3/controls/InfoBanner",function(){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var InfoBanner=function(factory){Control.call(this);
this.setFactory(factory);
};
InfoBanner.prototype=new Control();
var method=InfoBanner.prototype;
attribute(InfoBanner,"SidePanel");
attribute(InfoBanner,"Condition");
attribute(InfoBanner,"Factory");
attribute(InfoBanner,"BedrockConfig");
attribute(InfoBanner,"Message");
method.init=function(){var bedrockConfig=this.getBedrockConfig();
var condition=this.getCondition();
var build=this.getFactory();
var infoMessageType=MPageControls.AlertMessage.MessageTypes.INFORMATION;
var messageTemplate=MPageControls.getDefaultTemplates().messageBar;
var messageControl;
if(!this.getElement()||!this.getMessage()){return;
}if(condition.isFlagged(bedrockConfig)){messageControl=build.alertMessageControl(this.getElement(),messageTemplate,infoMessageType);
messageControl.render(this.getMessage());
}};
return InfoBanner;
});
define("cerner/discernabu/components/conprobo3/controls/InfoButtonErrorModal",function(){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var i18nABU=i18n.discernabu;
var InfoButtonErrorModal=function(factory){Control.call(this);
this.setFactory(factory);
};
InfoButtonErrorModal.prototype=new Control();
var method=InfoButtonErrorModal.prototype;
attribute(InfoButtonErrorModal,"Error");
attribute(InfoButtonErrorModal,"Factory");
method.launchModalDialog=function(){var build=this.getFactory();
var mpageUtil=build.mpageUtil();
var mpageModalDialog=build.mpageModalDialog();
var closeButton=build.mpageModalButton("closeButton");
var error=this.getError();
var errorName=error.name;
var errorMessage=error.message||i18nABU.INFO_BUTTON_ERROR_MSG;
var errorModal=mpageModalDialog.retrieveModalDialogObject("errorModal");
if(!errorModal){errorModal=mpageUtil.generateModalDialogBody("errorModal","error",errorMessage,i18nABU.INFO_BUTTON_ERROR_ACTION);
errorModal.setHeaderTitle(i18n.ERROR_OCCURED);
closeButton.setText(i18n.CLOSE);
closeButton.setCloseOnClick(true);
errorModal.addFooterButton(closeButton);
}mpageModalDialog.updateModalDialogObject(errorModal);
mpageModalDialog.showModalDialog("errorModal");
};
return InfoButtonErrorModal;
});
define("cerner/discernabu/components/conprobo3/controls/PriorityDropDown",function(){var attribute=MPageOO.attribute;
var DropDownList=MPageControls.DropDownList;
var PriorityDropDown=function(){DropDownList.call(this);
this.setDisplayKey("display");
};
PriorityDropDown.prototype=new DropDownList();
var method=PriorityDropDown.prototype;
attribute(PriorityDropDown,"Condition");
attribute(PriorityDropDown,"Conditions");
attribute(PriorityDropDown,"Factory");
attribute(PriorityDropDown,"SharedCondResObj");
method.init=function(){DropDownList.prototype.init.call(this);
var self=this;
var emptyItem={priority:0,display:"--"};
var selectedItem=emptyItem;
var items=[];
items.push(emptyItem);
var highestPriority=this.getConditions().getHighestPriority();
if(this.getCondition().getClinicalPriority()<=0){highestPriority++;
}for(var i=1;
i<=highestPriority;
i++){var item={priority:i,display:i};
items.push(item);
if(i==this.getCondition().getClinicalPriority()){selectedItem=item;
}}this.setOnShow(function(){self.renderItems(items);
});
this.setItems(items);
this.setSelectedItem(selectedItem);
this.setOnSelect(function(item){self.selectPriority(item);
});
};
method.selectPriority=function(item){var cond=this.getCondition();
if(cond.getClinicalPriority()==item.priority){return;
}var self=this;
var removeConditionFlag=0;
var toUpdate=this.getConditions().updatePriorityAndResequence(cond,item.priority,removeConditionFlag);
var transaction=this.getFactory().transaction();
transaction.track(function(){toUpdate.each(function(updateCond){updateCond.update(function(cond){self.getSharedCondResObj().updateCondition(cond);
});
});
});
transaction.commit(function(){self.fire("changePriority",[cond]);
});
};
method.setEnabled=function(value){if(!this.getElement()){return;
}DropDownList.prototype.setEnabled.call(this,value);
};
return PriorityDropDown;
});
define("cerner/discernabu/components/conprobo3/controls/StaleCommentsWarning",function(){var attribute=MPageOO.attribute;
var AlertMessage=MPageControls.AlertMessage;
var i18n=window.i18n.discernabu.conprobo3_i18n;
var StaleCommentsWarning=function(factory){AlertMessage.call(this,null,MPageControls.getDefaultTemplates().messageBar,AlertMessage.MessageTypes.INFORMATION);
};
StaleCommentsWarning.prototype=new AlertMessage();
var method=StaleCommentsWarning.prototype;
attribute(StaleCommentsWarning,"Condition");
method.update=function(){if(!this.getElement()){return;
}if(this.getCondition().getAreCommentsStale()){this.render(i18n.STALE_COMMENT);
}};
return StaleCommentsWarning;
});
define("cerner/discernabu/components/conprobo3/controls/UnspecifiedAlert",function(){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var UnspecifiedAlert=function(factory){Control.call(this);
this.setFactory(factory);
};
UnspecifiedAlert.prototype=new Control();
var method=UnspecifiedAlert.prototype;
attribute(UnspecifiedAlert,"Template");
attribute(UnspecifiedAlert,"Conditions");
attribute(UnspecifiedAlert,"Factory");
attribute(UnspecifiedAlert,"DxAssButton");
attribute(UnspecifiedAlert,"IsDxAssistantEnabled");
method.create=function(){var dxAssistantButton=this.getFactory().dxAssistantButton();
dxAssistantButton.setParent(this);
dxAssistantButton.setConditions(this.getConditions());
this.setDxAssButton(dxAssistantButton);
};
method.update=function(){if(!this.getIsDxAssistantEnabled()){this.hide();
return;
}var self=this;
var unspecifiedConditions=this.getConditions().filter("isSpecific",false).filter(function(c){return c.hasDxAssistant();
});
if(unspecifiedConditions.length){this.show();
}else{this.hide();
}this.getDxAssButton().setConditions(unspecifiedConditions);
this.renderTemplate(this.getTemplate(),{dxAssButtId:self.getDxAssButton().getElementId(),conditionsLength:unspecifiedConditions.length});
this.getDxAssButton().init();
};
method.updateSpecifiedConditions=function(conditions){this.fire("updateSpecifiedConditions",[conditions]);
};
method.hide=function(){this.getElement().addClass("hide");
};
method.show=function(){this.getElement().removeClass("hide");
};
return UnspecifiedAlert;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/Button",function(){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var Button=function(factory){Control.call(this);
this.setFactory(factory);
};
Button.prototype=new Control();
var method=Button.prototype;
attribute(Button,"Condition");
attribute(Button,"Factory");
attribute(Button,"LoadingClass");
method.init=function(){MPageControls.Control.prototype.init.call(this);
this.setLoadingClass("loading");
if(!this.getElement()){return;
}var self=this;
this.getElement().click(function(){self.click();
});
};
method.setEnabled=function(value){if(!this.getElement()){return;
}if(value){this.getElement().prop("disabled",false);
this.getElement().toggleClass("dithered");
}else{this.getElement().prop("disabled",true);
this.getElement().toggleClass("dithered");
}};
method.show=function(){if(!this.getElement()){return;
}this.getElement().css("display","inline");
};
method.hide=function(){if(!this.getElement()){return;
}this.getElement().css("display","none");
};
method.click=function(){};
method.remoteCallStarted=function(){this.getElement().addClass(this.getLoadingClass());
this.fire("remoteCallStarted",[this.getCondition()]);
};
method.remoteCallEnded=function(){if(!this.getElement()){return;
}this.getElement().removeClass(this.getLoadingClass());
this.fire("remoteCallEnded",[this.getCondition()]);
};
return Button;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/CancelButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var CancelButton=function(factory){Button.call(this,factory);
};
CancelButton.prototype=new Button();
var method=CancelButton.prototype;
attribute(CancelButton,"SharedCondResObj");
method.click=function(){var cancelCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Cancel");
if(cancelCAPTimer){cancelCAPTimer.addMetaData("key");
cancelCAPTimer.start();
cancelCAPTimer.stop();
}var self=this;
var condition=this.getCondition();
condition.cancel(function(conditions,reply){self.remoteCallEnded();
self.fire("cancelCondition",[condition,reply]);
});
this.fire("remoteCallStarted",[this.getCondition()]);
};
return CancelButton;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/CloseDetailsPanelButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var Control=MPageControls.Control;
var CloseDetailsPanelButton=function(factory){Button.call(this,factory);
};
CloseDetailsPanelButton.prototype=new Button();
var method=CloseDetailsPanelButton.prototype;
method.click=function(){this.fire("closeDetailsPanel");
};
return CloseDetailsPanelButton;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/CommentIndicatorButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var Control=MPageControls.Control;
var attribute=MPageOO.attribute;
var CommentIndicatorButton=function(factory){Button.call(this,factory);
};
CommentIndicatorButton.prototype=new Button();
var method=CommentIndicatorButton.prototype;
attribute(CommentIndicatorButton,"Condition");
method.click=function(){this.fire("selectCondition",[this.getCondition()]);
this.fire("scrollToComments");
};
return CommentIndicatorButton;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/DocumentNoChronicProblemsButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var attribute=MPageOO.attribute;
var DocumentNoChronicProblemsButton=function(factory){Button.call(this,factory);
};
DocumentNoChronicProblemsButton.prototype=new Button();
var method=DocumentNoChronicProblemsButton.prototype;
attribute(DocumentNoChronicProblemsButton,"AddNKPFunction");
method.click=function(){var addNKPFunction=this.getAddNKPFunction();
if(addNKPFunction){addNKPFunction();
}this.fire("documentNoChronicProblems",[this.getCondition()]);
};
return DocumentNoChronicProblemsButton;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/DxAssistantButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var attribute=MPageOO.attribute;
var DxAssistantButton=function(factory){Button.call(this,factory);
};
DxAssistantButton.prototype=new Button();
var method=DxAssistantButton.prototype;
attribute(DxAssistantButton,"Conditions");
attribute(DxAssistantButton,"Condition");
method.click=function(){var self=this;
var conditions=this.getConditions().getUnspecified().filter(function(c){return c.hasDxAssistant();
});
if(this.getCondition()){var i=conditions.indexOf(this.getCondition());
if(i>=0){conditions.splice(i,1);
}conditions.unshift(this.getCondition());
}conditions.launchDxAssistant(function(conditions){self.fire("updateSpecifiedConditions",[conditions]);
});
};
return DxAssistantButton;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/InfoButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var attribute=MPageOO.attribute;
var InfoButton=function(factory){Button.call(this,factory);
};
InfoButton.prototype=new Button();
var method=InfoButton.prototype;
attribute(InfoButton,"Criterion");
method.click=function(){this.fire("invokeInfoBtnApi",[this.getCondition()]);
};
return InfoButton;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/ModifyButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var attribute=MPageOO.attribute;
var ModifyButton=function(factory){Button.call(this,factory);
};
ModifyButton.prototype=new Button();
var method=ModifyButton.prototype;
attribute(ModifyButton,"SharedCondResObj");
attribute(ModifyButton,"BedrockConfig");
attribute(ModifyButton,"CanModify");
method.init=function(){if(!this.getElement()){return;
}Button.prototype.init.call(this);
if(!this.getBedrockConfig().getModifyInd()||!CERN_Platform.inMillenniumContext()){this.setEnabled(false);
}};
method.click=function(){var modifyCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Modify");
if(modifyCAPTimer){modifyCAPTimer.addMetaData("key");
modifyCAPTimer.start();
modifyCAPTimer.stop();
}var self=this;
MPageEntity.Win32ConditionModifier(this.getCondition(),function(){self.getSharedCondResObj().retrieveSharedResourceData();
});
};
return ModifyButton;
});
define("cerner/discernabu/components/conprobo3/controls/buttons/SelectConditionButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var attribute=MPageOO.attribute;
var SelectConditionButton=function(factory){Button.call(this);
};
SelectConditionButton.prototype=new Button();
var method=SelectConditionButton.prototype;
method.click=function(){var openSidePanelCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Open_side_panel");
if(openSidePanelCAPTimer){openSidePanelCAPTimer.addMetaData("key");
openSidePanelCAPTimer.start();
openSidePanelCAPTimer.stop();
}this.fire("selectCondition",[this.getCondition()]);
};
return SelectConditionButton;
});
define("cerner/discernabu/components/conprobo3/controls/comments/AddCommentTextbox",function(){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var i18n=window.i18n.discernabu.conprobo3_i18n;
var AddCommentTextbox=function(factory){Control.call(this);
this.setFactory(factory);
this.setPlaceholderText(i18n.ADD_COMMENT);
this.setPlaceholderCssClass("placeholder");
this.setLoadingClass("loading");
this.setDisabledClass("disabled");
};
AddCommentTextbox.prototype=new Control();
var method=AddCommentTextbox.prototype;
attribute(AddCommentTextbox,"Factory");
attribute(AddCommentTextbox,"PlaceholderText");
attribute(AddCommentTextbox,"PlaceholderCssClass");
attribute(AddCommentTextbox,"IsPlaceholderActive");
attribute(AddCommentTextbox,"LoadingClass");
attribute(AddCommentTextbox,"IsFocused");
attribute(AddCommentTextbox,"DisabledClass");
method.create=function(){var element=this.getElement();
if(!element){return;
}var self=this;
element.focus(function(){self.onFocus();
});
element.blur(function(){self.onBlur();
});
element.keydown(function(key){if(key.keyCode==13){self.onEnter();
}});
this.enablePlaceholder();
};
method.update=function(){};
method.onFocus=function(){this.setIsFocused(true);
if(this.getIsPlaceholderActive()){this.disablePlaceholder();
}this.fire("startAddingComment");
};
method.onBlur=function(){this.setIsFocused(false);
if(!this.getValue().length){this.enablePlaceholder();
this.fire("cancelAddingComment");
}};
method.onEnter=function(){this.fire("addComment");
};
method.enablePlaceholder=function(){this.setIsPlaceholderActive(true);
this.setValue(this.getPlaceholderText());
if(this.getIsFocused()){this.getElement().blur();
}this.getElement().addClass(this.getPlaceholderCssClass());
};
method.disablePlaceholder=function(){this.setIsPlaceholderActive(false);
this.setValue("");
this.getElement().removeClass(this.getPlaceholderCssClass());
};
method.getValue=function(){return this.getElement().val();
};
method.setValue=function(val){this.getElement().val(val);
};
method.show=function(){this.getElement().css("display","block");
};
method.hide=function(){this.getElement().css("display","none");
};
method.showLoading=function(){if(!this.getElement()){return;
}this.getElement().addClass(this.getLoadingClass());
};
method.hideLoading=function(){if(!this.getElement()){return;
}this.getElement().removeClass(this.getLoadingClass());
};
method.setEnabled=function(val){if(val){this.getElement().removeClass(this.getDisabledClass());
this.getElement().removeAttr("disabled");
return;
}this.getElement().addClass(this.getDisabledClass());
this.getElement().attr("disabled","disabled");
};
return AddCommentTextbox;
});
define("cerner/discernabu/components/conprobo3/controls/comments/CancelCommentButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var CancelCommentButton=function(factory){Button.call(this);
};
CancelCommentButton.prototype=new Button();
var method=CancelCommentButton.prototype;
method.click=function(){this.fire("cancelAddingComment");
};
return CancelCommentButton;
});
define("cerner/discernabu/components/conprobo3/controls/comments/CommentList",function(){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var SORTING=MPageEntity.EntityList.SORTING;
var CommentList=function(factory){Control.call(this);
if(factory){this.setFactory(factory);
this.setTemplate(factory.commentTemplate());
}};
CommentList.prototype=new Control();
var method=CommentList.prototype;
attribute(CommentList,"Template");
attribute(CommentList,"Factory");
attribute(CommentList,"Comments");
method.create=function(){};
method.update=function(){if(!this.getElement()){return;
}this.showLoading();
var self=this;
var transaction=this.getFactory().transaction();
transaction.track(function(){self.getComments().each(function(comment){comment.getAuthor();
});
});
transaction.commit(function(){self.renderComments();
});
};
method.showLoading=function(){var self=this;
this.renderTemplate(this.getTemplate().loading);
};
method.renderComments=function(){var comments=this.getFactory().conditionCommentClass().splitDxComments(this.getComments());
var sorted=comments.sortBy("createdDateTime",SORTING.DESC);
this.setComments(sorted);
this.renderTemplate(this.getTemplate().commentList,{comments:sorted});
};
return CommentList;
});
define("cerner/discernabu/components/conprobo3/controls/comments/CommentPanel",function(){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var CommentPanel=function(factory){Control.call(this);
if(factory){this.setFactory(factory);
this.setTemplate(factory.commentTemplate());
}};
CommentPanel.prototype=new Control();
var method=CommentPanel.prototype;
var trim=function(text){return text.replace(/^\s+|\s+$/g,"");
};
attribute(CommentPanel,"Template");
attribute(CommentPanel,"Factory");
attribute(CommentPanel,"Condition");
attribute(CommentPanel,"AddCommentTextbox");
attribute(CommentPanel,"CommentList");
attribute(CommentPanel,"AuthorId");
attribute(CommentPanel,"SaveButton");
attribute(CommentPanel,"CancelButton");
attribute(CommentPanel,"StaleCommentsWarning");
method.create=function(){var build=this.getFactory();
var commentList=build.commentList();
var textbox=build.addCommentTextbox();
var saveButton=build.saveCommentButton();
var cancelButton=build.cancelCommentButton();
saveButton.setParent(this);
commentList.setParent(this);
textbox.setParent(this);
cancelButton.setParent(this);
this.setCommentList(commentList);
this.setAddCommentTextbox(textbox);
this.setSaveButton(saveButton);
this.setCancelButton(cancelButton);
this.setStaleCommentsWarning(build.staleCommentsWarning());
};
method.update=function(){if(!this.getElement()){return;
}var commentList=this.getCommentList();
var textbox=this.getAddCommentTextbox();
var saveButton=this.getSaveButton();
var cancelButton=this.getCancelButton();
var staleCommentsWarning=this.getStaleCommentsWarning();
staleCommentsWarning.setCondition(this.getCondition());
this.renderTemplate(this.getTemplate().commentPanel,{commentListId:commentList.getElementId(),addCommentTextboxId:textbox.getElementId(),saveButtonId:saveButton.getElementId(),cancelButtonId:cancelButton.getElementId(),showAddComments:this.canAddComment(),comments:this.getCondition().getComments(),staleCommentsWarningId:staleCommentsWarning.getElementId()});
commentList.create();
textbox.create();
saveButton.init();
cancelButton.init();
staleCommentsWarning.update();
this.getSaveButton().hide();
this.getCancelButton().hide();
this.getCommentList().setComments(this.getCondition().getCommentsWithAssociation());
this.getCommentList().update();
this.getAddCommentTextbox().update();
};
method.addComment=function(){var self=this;
if(!trim(this.getAddCommentTextbox().getValue()).length){return;
}this.getAddCommentTextbox().showLoading();
var comment=this.getFactory().conditionCommentEntity();
comment.setAuthorValue(this.getAuthorId());
comment.setText(this.getAddCommentTextbox().getValue());
comment.setCondition(this.getCondition());
comment.create(function(){self.getCondition().getComments().push(comment);
self.update();
self.getAddCommentTextbox().hideLoading();
self.fire("addComment",[comment]);
});
};
method.startAddingComment=function(){this.getSaveButton().show();
this.getCancelButton().show();
};
method.cancelAddingComment=function(){this.getSaveButton().hide();
this.getCancelButton().hide();
this.getAddCommentTextbox().setValue("");
this.getAddCommentTextbox().enablePlaceholder();
};
method.canAddComment=function(){var cond=this.getCondition();
if(cond.getDiagnosisDriverValue()&&cond.canModifyThisVisit()){return true;
}if(cond.getProblemDriverValue()&&cond.canModifyChronic()){return true;
}return false;
};
method.setEnabled=function(val){if(val){this.getSaveButton().setEnabled(true);
this.getCancelButton().setEnabled(true);
this.getAddCommentTextbox().setEnabled(true);
return;
}this.getSaveButton().setEnabled(false);
this.getCancelButton().setEnabled(false);
this.getAddCommentTextbox().setEnabled(false);
};
return CommentPanel;
});
define("cerner/discernabu/components/conprobo3/controls/comments/SaveCommentButton",["cerner/discernabu/components/conprobo3/controls/buttons/Button"],function(Button){var attribute=MPageOO.attribute;
var Control=MPageControls.Control;
var SaveCommentButton=function(factory){Button.call(this);
};
SaveCommentButton.prototype=new Button();
var method=SaveCommentButton.prototype;
method.click=function(){this.fire("addComment");
};
return SaveCommentButton;
});
define("cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTable",["cerner/discernabu/components/conprobo3/model/CPO3Diagnosis"],function(CPO3Diagnosis){var attribute=MPageOO.attribute;
var inherits=MPageOO.inherits;
var Condition=MPageEntity.entities.Condition;
var HistoricalTable=function(factory){MPageControls.Control.call(this);
this.setFactory(factory);
var table=factory.componentTable();
this.setTable(table);
this.componentTableId="";
};
HistoricalTable.prototype=new MPageControls.Control();
var method=HistoricalTable.prototype;
var COLUMNS={DISPLAY:"display",ONSET:"onset"};
attribute(HistoricalTable,"Table");
attribute(HistoricalTable,"Condition");
attribute(HistoricalTable,"Factory");
attribute(HistoricalTable,"Templates");
attribute(HistoricalTable,"Rows");
attribute(HistoricalTable,"MaxHeight");
method.createRows=function(){var rows=[];
var build=this.getFactory();
var self=this;
this.setRows(rows);
var condition=this.getCondition();
var problems=condition.getProblems();
var diagnoses=condition.getDiagnoses();
problems.each(function(problem){var historyTableRow=build.historicalTableProblemRow();
historyTableRow.setCondition(problem);
rows.push(historyTableRow);
});
diagnoses.each(function(dx){var historyTableRow=build.historicalTableDxRow();
historyTableRow.setCondition(dx);
rows.push(historyTableRow);
});
rows.sort(function(a,b){return b.getDateTime()-a.getDateTime();
});
return rows;
};
method.loadNomenclatureInfo=function(){var self=this;
var condition=this.getCondition();
var diagnoses=condition.getDiagnoses();
var problems=condition.getProblems();
if(problems.length+diagnoses.length<1){return;
}var transaction=new MPageEntity.Transaction();
transaction.track(function(){diagnoses.each(function(dx){dx.getNomenclature();
});
});
this.getElement().html("<div class='loading history-section-preload'></div>");
transaction.commit(function(){self.update();
});
};
method.create=function(){this.componentTableId=this.getElementId();
var table=this.getTable();
table.setIsHeaderEnabled(false);
table.setZebraStripe(true);
table.setNamespace(this.componentTableId);
};
method.update=function(){var detailPanel=this.getParent();
this.createRows();
var rows=this.getRows();
var table=this.getTable();
table.bindData(rows);
this.getElement().html(table.render());
table.finalize();
detailPanel.resize();
};
method.addDisplayColumn=function(){var displayColumn=this.getFactory().tableColumn();
displayColumn.setColumnId(COLUMNS.DISPLAY);
displayColumn.setCustomClass("historical-name-column");
displayColumn.setIsSortable(false);
displayColumn.setRenderTemplate("${makeDisplayCellHtml()}");
this.getTable().addColumn(displayColumn);
};
method.addOnsetColumn=function(){var onsetColumn=this.getFactory().tableColumn();
onsetColumn.setColumnId(COLUMNS.ONSET);
onsetColumn.setCustomClass("historical-onset-column");
onsetColumn.setIsSortable(false);
onsetColumn.setRenderTemplate("${makeOnsetCellHtml()}");
this.getTable().addColumn(onsetColumn);
};
method.getRowElement=function(index){var tableBody=this.getBodyElement();
return tableBody.children[0].children[index];
};
method.getBodyElement=function(){return document.getElementById(this.componentTableId+"tableBody");
};
method.getHeaderElement=function(){return document.getElementById(this.componentTableId+"headerWrapper");
};
method.getHeight=function(){return this.getElement().outerHeight();
};
method.setMaxHeight=function(height){var body=this.getBodyElement();
var header=this.getHeaderElement();
var bodyMaxHeight=height-$(header).outerHeight();
$(body).css("max-height",bodyMaxHeight);
};
method.resize=function(){this.getTable().updateAfterResize();
};
method.getScrollPosition=function(){return this.getBodyElement().scrollTop;
};
method.setScrollPosition=function(position){this.getBodyElement().scrollTop=position;
};
return HistoricalTable;
});
define("cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTableDxRow",["cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTableRow"],function(HistoricalTableRow){var HistoricalTableDxRow=function(factory){HistoricalTableRow.call(this,factory);
this.setIsChronic(false);
};
HistoricalTableDxRow.prototype=new HistoricalTableRow();
var method=HistoricalTableDxRow.prototype;
method.getDateTime=function(){var dx=this.getCondition();
return dx.getDiagDtTm();
};
method.makeTemplateContext=function(){if(this.templateContext){return this.templateContext;
}var dx=this.getCondition();
this.templateContext={onsetDate:dx.getFormattedDate(),vocab:dx.getNomenclature().getSourceVocabulary().getDisplay(),display:dx.getNomenclature().getSourceString(),termCode:dx.getNomenclature().getSourceIdentifier(),classification:dx.getClassificationDisplay(),isHistorical:dx.getIsHistorical(),isChronic:false};
return this.templateContext;
};
return HistoricalTableDxRow;
});
define("cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTableProblemRow",["cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTableRow"],function(HistoricalTableRow){var HistoricalTableProblemRow=function(factory){HistoricalTableRow.call(this,factory);
this.setIsChronic(true);
};
HistoricalTableProblemRow.prototype=new HistoricalTableRow();
var method=HistoricalTableProblemRow.prototype;
method.getDateTime=function(){var problem=this.getCondition();
return problem.getOnsetDateTime();
};
method.makeTemplateContext=function(){if(this.templateContext){return this.templateContext;
}var problem=this.getCondition();
this.templateContext={onsetDate:problem.getFormattedOnset(),display:problem.getNomenclature().getSourceString(),vocab:problem.getNomenclature().getSourceVocabulary().getDisplay(),termCode:problem.getNomenclature().getSourceIdentifier(),classification:problem.getClassificationDisplay(),isHistorical:problem.getIsHistorical(),isChronic:true};
return this.templateContext;
};
return HistoricalTableProblemRow;
});
define("cerner/discernabu/components/conprobo3/controls/historytable/HistoricalTableRow",function(){var Control=MPageControls.Control;
var attribute=MPageOO.attribute;
var HistoricalTableRow=function(factory){this.setFactory(factory);
};
HistoricalTableRow.prototype=new Control();
var method=HistoricalTableRow.prototype;
attribute(HistoricalTableRow,"Factory");
attribute(HistoricalTableRow,"Templates");
attribute(HistoricalTableRow,"IsChronic");
attribute(HistoricalTableRow,"Condition");
method.getDateTime=function(){throw new Error("To be implemented by child class");
};
method.makeTemplateContext=function(){throw new Error("To be implemented by child class");
};
method.makeDisplayCellHtml=function(){return this.getFactory().detailedTemplate().historicalDisplayColumn(this.makeTemplateContext());
};
method.makeOnsetCellHtml=function(){return this.getFactory().detailedTemplate().historicalOnsetColumn(this.makeTemplateContext());
};
return HistoricalTableRow;
});
define("cerner/discernabu/components/conprobo3/controls/toggles/ChronicToggle",["cerner/discernabu/components/conprobo3/controls/toggles/ToggleButton"],function(ToggleButton){var attribute=MPageOO.attribute;
var ChronicToggle=function(factory){ToggleButton.call(this,factory);
};
ChronicToggle.prototype=new ToggleButton();
var method=ChronicToggle.prototype;
attribute(ChronicToggle,"SharedCondResObj");
method.init=function(){var condition=this.getCondition();
var targetNomenclature=condition.getTargetNomenclatureValue();
var freetextInd=targetNomenclature<=0;
var pregnancyInd=(condition.getProblems().length>0&&condition.getProblems()[0].getProblemTypeFlag()==2);
var noActionsInd=(freetextInd||pregnancyInd);
var modifyProblemInd=this.getCanModifyChronic();
if(condition.getProblemDriverValue()&&!condition.getProblemDriverFromArray().getCanCondModify()){modifyProblemInd=false;
}if(!this.getElement()){return;
}ToggleButton.prototype.init.call(this);
if(condition.getIsChronic()||condition.getIsInactive()){this.performSelection();
}else{if(condition.getIsHistorical()){this.performUnselection();
this.setEnabled(true);
if(condition.getProblemDriverValue()&&!condition.getIsThisVisit()){this.getElement().toggleClass("resolved-problem");
}}else{this.performUnselection();
}}if(noActionsInd||!modifyProblemInd){this.setEnabled(false);
}};
method.onSelect=function(){var moveToChronicCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Move_to_Chronic");
if(moveToChronicCAPTimer){moveToChronicCAPTimer.addMetaData("key");
moveToChronicCAPTimer.start();
moveToChronicCAPTimer.stop();
}var self=this;
var condition=this.getCondition();
this.remoteCallStarted();
self.fire("moveConditionToChronic",[condition]);
};
method.onUnselect=function(){var moveToChronicCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Move_to_Chronic");
if(moveToChronicCAPTimer){moveToChronicCAPTimer.addMetaData("key");
moveToChronicCAPTimer.start();
moveToChronicCAPTimer.stop();
}var self=this;
this.remoteCallStarted();
var condition=this.getCondition();
condition.cancel(function(conditions,reply){self.remoteCallEnded();
self.fire("cancelCondition",[condition,reply]);
});
};
method.resolveCondition=function(condition){if(condition==this.getCondition()){this.setEnabled(false);
this.performUnselection();
}};
method.moveConditionToChronic=function(condition){if(condition==this.getCondition()){this.setEnabled(true);
}};
return ChronicToggle;
});
define("cerner/discernabu/components/conprobo3/controls/toggles/ResolvedToggle",["cerner/discernabu/components/conprobo3/controls/toggles/ToggleButton"],function(ToggleButton){var ResolvedToggle=function(factory){ToggleButton.call(this,factory);
};
ResolvedToggle.prototype=new ToggleButton();
var method=ResolvedToggle.prototype;
method.init=function(){var condition=this.getCondition();
var targetNomenclature=condition.getTargetNomenclatureValue();
var freetextInd=targetNomenclature<=0;
var pregnancyInd=(condition.getProblems().length>0&&condition.getProblems()[0].getProblemTypeFlag()==2);
var noActionsInd=(freetextInd||pregnancyInd);
var modifyProblemInd=this.getCanModifyChronic();
if(condition.getProblemDriverValue()&&!condition.getProblemDriverFromArray().getCanCondModify()){modifyProblemInd=false;
}if(!this.getElement()){return;
}ToggleButton.prototype.init.call(this);
if((condition.getIsHistorical()&&condition.getProblemDriverValue()&&!condition.getIsChronic())||(condition.getDiagnosisDriverValue()&&!condition.getIsThisVisit()&&!condition.getIsChronic())){this.performSelection();
this.setEnabled(false);
}else{this.performUnselection();
if(condition.getDiagnosisDriverValue()&&!condition.getIsChronic()){this.setEnabled(false);
}}if(noActionsInd||!modifyProblemInd){this.setEnabled(false);
}};
method.onSelect=function(){var resolveCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Resolve");
if(resolveCAPTimer){resolveCAPTimer.addMetaData("key");
resolveCAPTimer.start();
resolveCAPTimer.stop();
}var self=this;
this.remoteCallStarted();
var condition=this.getCondition();
condition.moveToHistorical(function(conditions,reply){self.remoteCallEnded();
self.fire("resolveCondition",[condition,reply]);
});
};
method.onUnselect=function(){var resolveCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Resolve");
if(resolveCAPTimer){resolveCAPTimer.addMetaData("key");
resolveCAPTimer.start();
resolveCAPTimer.stop();
}var self=this;
var vc=this.getBedrockConfig();
this.remoteCallStarted();
this.getCondition().setDiagnosisTypeValue(vc.getDiagnosisType());
this.getCondition().unresolve(function(condition,raw){self.remoteCallEnded();
self.fire("handleDuplicates",[true,raw]);
self.fire("unresolveCondition",[condition]);
});
};
return ResolvedToggle;
});
define("cerner/discernabu/components/conprobo3/controls/toggles/ThisVisitToggle",["cerner/discernabu/components/conprobo3/controls/toggles/ToggleButton"],function(ToggleButton){var attribute=MPageOO.attribute;
var ThisVisitToggle=function(factory){ToggleButton.call(this,factory);
};
ThisVisitToggle.prototype=new ToggleButton();
var method=ThisVisitToggle.prototype;
attribute(ThisVisitToggle,"SharedCondResObj");
attribute(ThisVisitToggle,"IsPriorityEnabled");
method.init=function(){var condition=this.getCondition();
var targetNomenclature=condition.getTargetNomenclatureValue();
var freetextInd=targetNomenclature<=0;
var pregnancyInd=(condition.getProblems().length>0&&condition.getProblems()[0].getProblemTypeFlag()==2);
var noActionsInd=(freetextInd||pregnancyInd);
var modifyDxInd=this.getCanModifyThisVisit();
if(condition.getDiagnosisDriverValue()&&!condition.getDiagnosisDriverFromArray().getCanCondModify()){modifyDxInd=false;
}if(!this.getElement()){return;
}ToggleButton.prototype.init.call(this);
if(condition.getIsThisVisit()){this.performSelection();
}else{this.performUnselection();
}if(condition.getIsHistorical()&&!condition.getIsThisVisit()){this.performUnselection();
this.setEnabled(true);
if(condition.getDiagnosisDriverValue()&&!condition.getIsThisVisit()&&!condition.getIsChronic()){this.getElement().toggleClass("resolved-problem");
}}if((pregnancyInd&&condition.getIsThisVisit()&&(!condition.getIsChronic()||condition.getIsHistorical()))||freetextInd||!modifyDxInd){this.setEnabled(false);
}};
method.onSelect=function(){var moveToThisVisitCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Move_to_This_Visit");
if(moveToThisVisitCAPTimer){moveToThisVisitCAPTimer.addMetaData("key");
moveToThisVisitCAPTimer.start();
moveToThisVisitCAPTimer.stop();
}var self=this;
var condition=this.getCondition();
this.remoteCallStarted();
this.fire("moveConditionToThisVisit",[condition]);
};
method.onUnselect=function(){var moveToThisVisitCAPTimer=new RTMSTimer("CAP:MPG_Consolidated_Problems_o3_Move_to_This_Visit");
if(moveToThisVisitCAPTimer){moveToThisVisitCAPTimer.addMetaData("key");
moveToThisVisitCAPTimer.start();
moveToThisVisitCAPTimer.stop();
}var self=this;
var condition=this.getCondition();
var priority=condition.getClinicalPriority();
this.remoteCallStarted();
condition.removeFromThisVisit(function(conditions){self.remoteCallEnded();
self.fire("removeConditionFromThisVisit",[condition,priority]);
});
};
method.resolveCondition=function(condition){if(condition==this.getCondition()){this.setEnabled(false);
this.performUnselection();
}};
method.moveConditionToChronic=function(condition){if(condition==this.getCondition()){this.setEnabled(true);
}};
return ThisVisitToggle;
});
define("cerner/discernabu/components/conprobo3/controls/toggles/ToggleButton",function(){var attribute=MPageOO.attribute;
var Selector=MPageControls.Selector;
var ToggleButton=function(factory){Selector.call(this);
this.setFactory(factory);
};
ToggleButton.prototype=new Selector();
var method=ToggleButton.prototype;
attribute(ToggleButton,"Selector");
attribute(ToggleButton,"LoadingClass");
attribute(ToggleButton,"Condition");
attribute(ToggleButton,"Conditions");
attribute(ToggleButton,"BedrockConfig");
attribute(ToggleButton,"SharedCondResObj");
attribute(ToggleButton,"Factory");
attribute(ToggleButton,"CanModifyChronic");
attribute(ToggleButton,"CanModifyThisVisit");
method.init=function(){if(!this.getElement()){return;
}this.getFactory().selector().prototype.init.call(this);
this.setLoadingClass("loading");
this.setSelectedClass("selected");
this.setUnselectedClass("");
var self=this;
this.setOnSelect(function(){self.onSelect();
});
this.setOnUnselect(function(){self.onUnselect();
});
this.setEnabled(true);
};
method.remoteCallStarted=function(){this.setBedrockConfig(this.getBedrockConfig());
this.setSharedCondResObj(this.getSharedCondResObj());
this.getElement().addClass(this.getLoadingClass());
this.fire("remoteCallStarted",[this.getCondition()]);
};
method.remoteCallEnded=function(){if(!this.getElement()){return;
}this.getElement().removeClass(this.getLoadingClass());
this.fire("remoteCallEnded",[this.getCondition()]);
};
method.onSelect=function(){};
method.onUnselect=function(){};
return ToggleButton;
});
define("cerner/discernabu/components/conprobo3/model/CPO3Condition",["cerner/discernabu/components/conprobo3/model/CPO3Diagnosis","cerner/discernabu/components/conprobo3/model/CPO3Problem","cerner/discernabu/components/conprobo3/model/CPO3Date","cerner/discernabu/components/conprobo3/model/CPO3ConditionComment"],function(CPO3Diagnosis,CPO3Problem,CPO3Date,CPO3ConditionComment){var entityNamespace={};
var Condition=MPageEntity.entities.Condition;
var OneToMany=MPageEntity.OneToMany;
var i18n=window.i18n.discernabu.conprobo3_i18n;
MPageEntity.Entity.extend(Condition,entityNamespace,"Condition",{fields:{diagnoses:new OneToMany(CPO3Diagnosis,"diagnosisId",{sendFullObject:true}),problems:new OneToMany(CPO3Problem,"problemId",{sendFullObject:true}),comments:new OneToMany(CPO3ConditionComment)}});
var CPO3Condition=entityNamespace.Condition;
var method=CPO3Condition.prototype;
CPO3Condition.defaultEntityListClass=MPageEntity.entities.ConditionList;
method.getFormattedOnset=function(){if(this.getDiagnoses().length&&!this.getProblems().length){return"--";
}var dt=new CPO3Date(this.getOnset());
dt.setPrecision(this.getOnsetPrecision());
return dt.getStr();
};
method.getClassificationDisplay=function(){var classDisplay=(this.getClassification().getDisplay())?this.getClassification().getDisplay():"--";
return classDisplay;
};
method.getClassificationMeaning=function(){return this.getClassification().getMeaning();
};
method.getPriorityDisplay=function(){var priority=this.getClinicalPriority();
if(!priority||priority===0){return"--";
}return priority;
};
method.getStatusDisplay=function(){var lifecycleStatus=this.getLifeCycleStatus();
if(!lifecycleStatus||lifecycleStatus.getDisplay()===""){return"--";
}return lifecycleStatus.getDisplay();
};
method.getLastUpdateDateFormatted=function(){var dt=new CPO3Date(this.getLastUpdate());
return dt.getStr();
};
method.getClinicalServiceDisplay=function(){var clinService=this.getClinicalService();
if(clinService&&clinService.getDisplay()){return clinService.getDisplay();
}return"--";
};
method.getDiagnosisTypeDisplay=function(){var dxType=this.getDiagnosisType();
if(!dxType||dxType.getDisplay()===""){return"--";
}return dxType.getDisplay();
};
method.getConditionTypeDisplay=function(){if(this.getIsThisVisit()&&this.getIsChronic()){return i18n.THIS_VISIT_AND_CHRONIC;
}if(this.getIsThisVisit()){return i18n.THIS_VISIT;
}if(this.getIsChronic()){return i18n.CHRONIC;
}if(this.getIsHistorical()){return i18n.HISTORICAL;
}if(this.getIsInactive()){return i18n.CHRONIC;
}};
method.getConfirmationStatusDisplay=function(){var conf=this.getConfirmationStatus();
if(!conf||conf.getDisplay()===""){return"--";
}return conf.getDisplay();
};
method.getIsResolved=function(){return(!this.getIsChronic()&&!this.getIsInactive()&&this.getIsHistorical()&&this.getProblemDriverValue());
};
method.hasDxAssistant=function(){if(this.getDiagnosisDriverValue()&&this.isMapped()&&!this.isFreeText()&&this.getIsSpecific()!==null&&this.getIsSpecific()!==undefined){return true;
}return false;
};
return CPO3Condition;
});
define("cerner/discernabu/components/conprobo3/model/CPO3ConditionComment",function(){var entityNamespace={};
var ConditionComment=MPageEntity.entities.ConditionComment;
var OneToMany=MPageEntity.OneToMany;
var i18n=window.i18n.discernabu.conprobo3_i18n;
MPageEntity.Entity.extend(ConditionComment,entityNamespace,"ConditionComment",{});
var CPO3ConditionComment=entityNamespace.ConditionComment;
return CPO3ConditionComment;
});
define("cerner/discernabu/components/conprobo3/model/CPO3Date",function(){var attribute=MPageOO.attribute;
var CPO3Date=function(date){if(date){this.setDate(date);
}if(typeof(dateFormat)!=="undefined"&&dateFormat&&dateFormat.masks){this.setMaskForShortDate2(dateFormat.masks.shortDate2);
this.setMaskForShortDate4(dateFormat.masks.shortDate4);
this.setMaskForShortDate5(dateFormat.masks.shortDate5);
}};
attribute(CPO3Date,"Date");
attribute(CPO3Date,"Precision");
attribute(CPO3Date,"MaskForShortDate2");
attribute(CPO3Date,"MaskForShortDate4");
attribute(CPO3Date,"MaskForShortDate5");
var method=CPO3Date.prototype;
method.getStrWithPrecision=function(){var dt=this.getDate();
if(!dt){return"--";
}var precision=this.getPrecision();
switch(precision){case 1:return dt.format(this.getMaskForShortDate2());
case 2:return dt.format(this.getMaskForShortDate4());
case 3:return dt.format(this.getMaskForShortDate5());
default:return dt.format(this.getMaskForShortDate5());
}};
method.getStr=function(){var dt=this.getDate();
if(!dt){return"--";
}return dt.format(this.getMaskForShortDate2());
};
return CPO3Date;
});
define("cerner/discernabu/components/conprobo3/model/CPO3Diagnosis",function(){var entityNamespace={};
var Diagnosis=MPageEntity.entities.Diagnosis;
MPageEntity.Entity.extend(Diagnosis,entityNamespace,"Diagnosis",{});
var CPO3Diagnosis=entityNamespace.Diagnosis;
var method=CPO3Diagnosis.prototype;
method.getFormattedDate=function(){if(!this.getDiagDtTm()){return"--";
}return this.getDiagDtTm().format(dateFormat.masks.shortDate2);
};
method.getClassificationDisplay=function(){var classification=this.getClassification();
if(!classification||!classification.getDisplay()||classification.getDisplay()===""){return"--";
}return classification.getDisplay();
};
method.getClassificationMeaning=function(){var classification=this.getClassification();
if(!classification||!classification.getMeaning()||classification.getMeaning()===""){return"--";
}return classification.getMeaning();
};
return CPO3Diagnosis;
});
define("cerner/discernabu/components/conprobo3/model/CPO3Problem",["cerner/discernabu/components/conprobo3/model/CPO3Date"],function(CPO3Date){var entityNamespace={};
var Problem=MPageEntity.entities.Problem;
var i18n=window.i18n.discernabu.conprobo3_i18n;
MPageEntity.Entity.extend(Problem,entityNamespace,"Problem",{});
var CPO3Problem=entityNamespace.Problem;
CPO3Problem.STATUSES={RESOLVED:3304,ACTIVE:3301,INACTIVE:3303,CANCELED:3302};
var method=CPO3Problem.prototype;
method.getFormattedOnset=function(){var dt=new CPO3Date(this.getOnsetDateTime());
dt.setPrecision(this.getOnsetPrecision());
return dt.getStr();
};
method.getStatusLabel=function(){var ST=CPO3Problem.STATUSES;
switch(this.getLifeCycleStatusCd()){case ST.ACTIVE:return i18n.CHRONIC;
case ST.INACTIVE:return i18n.CHRONIC+" - "+i18n.INACTIVE;
case ST.RESOLVED:return i18n.HISTORICAL;
default:return"--";
}};
method.getClassificationDisplay=function(){var classification=this.getClassificationCd();
if(!classification||!classification.getDisplay()||classification.getDisplay()===""){return"--";
}return classification.getDisplay();
};
method.isInactive=function(){return this.getLifeCycleStatusCd()==CPO3Problem.STATUSES.INACTIVE;
};
method.getClassificationMeaning=function(){var classification=this.getClassificationCd();
if(!classification||!classification.getMeaning()||classification.getMeaning()===""){return"--";
}return classification.getMeaning();
};
return CPO3Problem;
});
define("cerner/discernabu/components/conprobo3/templates/CommentTemplate",function(){var tpl={};
var i18n=window.i18n;
tpl.loading=function(){return"<div class='loading' />";
};
tpl.commentList=function(ctx){var out=[];
ctx.comments.each(function(comment){out.push("<div class='comment'>","<div class='comment-header'>",comment.getFormattedHeader(),"</div>",comment.getText().replace(/\n/g,"<br />"),"</div>");
});
return out.join("");
};
tpl.commentPanel=function(ctx){if(!ctx.showAddComments&&!ctx.comments.length){return"";
}var out=["<div class = 'sp-separator'></div>","<h2>",i18n.COMMENTS,"</h2>"];
if(ctx.showAddComments){out.push("<div class='add-comments'>","<div class='add-comment'><input type='text' class='input' id='",ctx.addCommentTextboxId,"' /></div>","<input type='button' class='save-comment' id='",ctx.saveButtonId,"' value='",i18n.SAVE,"' />","<input type='button' class='cancel-comment' id='",ctx.cancelButtonId,"' value='",i18n.CANCEL,"' />","</div>");
}out.push("<div class='message-container' id='",ctx.staleCommentsWarningId,"'></div>","<div class='comments' id='",ctx.commentListId,"'></div>");
return out.join("");
};
return tpl;
});
define("cerner/discernabu/components/conprobo3/templates/ComponentTemplate",function(){var i18n=window.i18n.discernabu.conprobo3_i18n;
var tpl={};
tpl.nkpMessageContainer=function(ctx){return"<div class ='message-container cpo3-nkp-msg' id ='noChronicProbMsg"+ctx.compId+"'></div>";
};
tpl.unspecifiedAlert=function(ctx){return["<a class='unspecified-alert' id='"+ctx.dxAssButtId+"'>",ctx.conditionsLength," ",i18n.UNSPECIFIED_PROBLEM,"</a>"].join("");
};
tpl.documentNkpLink=function(ctx){return"<a id ='"+ctx.buttonId+"'>"+ctx.display+"</a>";
};
tpl.nkpMessageContent=function(ctx){return"<span>"+ctx.noChronicProbsDocumented+" </span><span class ='conprobo3-document-ncp'>"+ctx.documentNkpMsg+"</span>";
};
tpl.infoBarSkeleton=function(ctx){var out=["<div id='cpo3InfoDiv",ctx.compId,"' class='conprobo3-top-wrapper'>"];
if(ctx.unspecifiedAlertId){out.push("<div id='",ctx.unspecifiedAlertId,"'></div>");
}out.push("<div class='conprobo3-search-bar-wrapper'>","<span class='secondary-text'>"+ctx.cp3i18n.ADD_NEW_AS+":</span>","<div id='cpo3AddNewAsMenu"+ctx.compId+"' class='conprobo3-add-new-drop-down'>","<div id='cpo3AddNewAsMenuContent"+ctx.compId+"' class='conprobo3-drop-down-display'></div>","</div>","<div id='nomenSearchBar"+ctx.compId+"'></div>","</div>","</div>");
return out.join("");
};
tpl.component=function(ctx){var out="<div class='conprobo3'><div class='views' id='"+ctx.viewsContainerId+"'></div></div>";
return out;
};
return tpl;
});
define("cerner/discernabu/components/conprobo3/templates/DetailedTemplate",function(){var i18n=window.i18n.discernabu.conprobo3_i18n;
var i18nCore=window.i18n;
var tpl={};
tpl.main=function(ctx){return"<div class='cond-list' id='"+ctx.tableId+"'></div><div class='cond-details' id='"+ctx.detailsId+"'></div>";
};
tpl.sidePanelField=function(ctx){var out="";
out+="<dl>";
out+="<dt>"+ctx.label+"</dt>";
out+="<dd>"+ctx.value+"</dd>";
out+="</dl>";
return out;
};
tpl.display=function(ctx){var out=ctx.getCondition().getDisplay();
if(ctx.getCondition().isFreeText()){out+=" ("+i18n.FREETEXT+")";
}return out;
};
tpl.topButtons=function(ctx){var out="";
var condition=ctx.getCondition();
var targetNomenclature=condition.getTargetNomenclatureValue();
var freetextInd=targetNomenclature<=0;
var pregnancyInd=(condition.getProblems().length>0&&condition.getProblems()[0].getProblemTypeFlag()==2);
var noActionsInd=(freetextInd||pregnancyInd);
var modifyDxInd=ctx.getCanModifyThisVisit();
var modifyProblemInd=ctx.getCanModifyChronic();
var disabledClass="";
if(condition.getDiagnosisDriverValue()&&!condition.getDiagnosisDriverFromArray().getCanCondModify()){modifyDxInd=false;
}if(condition.getProblemDriverValue()&&!condition.getProblemDriverFromArray().getCanCondModify()){modifyProblemInd=false;
}disabledClass=((pregnancyInd&&condition.getIsThisVisit()&&(!condition.getIsChronic()||condition.getIsHistorical()))||freetextInd||!modifyDxInd)?"disabled no-privs":"";
out+="<div class='this-visit toggle "+disabledClass+"' id='"+ctx.getThisVisitToggle().getElementId()+"'>";
out+=i18n.THIS_VISIT;
out+="</div>";
disabledClass=(noActionsInd||!modifyProblemInd)?"disabled no-privs":"";
out+="<div class='chronic toggle "+disabledClass+"' id='"+ctx.getChronicToggle().getElementId()+"'>";
out+=i18n.CHRONIC;
out+="</div>";
if(!noActionsInd&&condition.canModifyChronic()){out+="<div class='cancel toggle' id='"+ctx.getCancelButton().getElementId()+"'>";
out+=i18n.CANCEL;
out+="</div>";
}if(!pregnancyInd){if((condition.getDiagnosisDriverValue()&&condition.getIsThisVisit()&&modifyDxInd)||(condition.getProblemDriverValue()&&condition.getIsChronic()&&modifyProblemInd)||(condition.isResolved()&&modifyProblemInd)){out+="<div class='modify toggle' id='"+ctx.getModifyButton().getElementId()+"'>";
out+=i18n.MODIFY;
out+="</div>";
}if(modifyProblemInd&&condition.getIsChronic()&&!freetextInd){out+="<div class='resolve-action' id='"+ctx.getResolvedToggle().getElementId()+"'>";
out+=i18n.RESOLVE;
out+="</div>";
}}return out;
};
tpl.flaggedProblemBanner=function(ctx){return"<div class='flagged-problem-banner message-container' id='"+ctx.getFlaggedProblemBanner().getElementId()+"'></div>";
};
tpl.sidePanel=function(ctx){var out="";
var condition=ctx.getCondition();
var targetNomenclature=condition.getTargetNomenclatureValue();
out+="<div class='sp-close-btn' id='"+ctx.getCloseButton().getElementId()+"'></div>";
out+=tpl.flaggedProblemBanner(ctx);
out+="<div class='condition-details-panel'>";
out+="<div class='sp-action-holder'>";
if(CERN_Platform.inMillenniumContext()||CERN_BrowserDevInd){out+=tpl.topButtons(ctx);
}out+="</div>";
out+="<h1>"+tpl.display(ctx)+"</h1>";
out+="<div class='sp-separator'></div>";
out+="<div id='"+ctx.getScrollContainerId()+"'>";
out+="<div class='condition-details'>";
out+=tpl.sidePanelField({label:i18n.CONDITION_TYPE,value:condition.getConditionTypeDisplay()});
out+=tpl.sidePanelField({label:i18n.CLASSIFICATION,value:condition.getClassificationDisplay()});
out+=tpl.sidePanelField({label:i18n.ONSET_DATE,value:condition.getFormattedOnset()});
out+=tpl.sidePanelField({label:i18n.STATUS,value:condition.getStatusDisplay()});
out+=tpl.sidePanelField({label:i18n.CONFIRMATION,value:condition.getConfirmationStatusDisplay()});
if(!condition.isFreeText()&&ctx.getIsInfoButtonEnabled()){out+="<dl id='"+ctx.getInfoButton().getElementId()+"' class = 'conprobo3-info-btn'><span class ='info-icon'>&nbsp;</span><a>"+i18n.ONLINE_RESOURCE+" ("+i18n.INFOBUTTON+")</a></dl>";
}if(condition.hasDxAssistant()&&ctx.getIsDxAssistantEnabled()){var dxBtnId=ctx.getDxAssistantButton().getElementId();
if(condition.getIsSpecific()){out+="<dl id='"+dxBtnId+"'><a class='specified-condition' >"+i18n.SPECIFIED+"</a></dl>";
}else{out+="<dl id='"+dxBtnId+"'><a class='unspecified-condition' >"+i18n.UNSPECIFIED+"</a></dl>";
}}out+="</div>";
out+="<div id='"+ctx.getCommentPanel().getElementId()+"'></div>";
if(condition.getDiagnoses().length+condition.getProblems().length>=1){out+="<div class = 'sp-separator'></div>";
out+="<h2>"+i18nCore.DETAILS+"</h2>";
out+="<div class='historical-section' id='"+ctx.getHistoricalTable().getElementId()+"'></div>";
}out+="</div>";
out+="</div>";
out+="</div>";
return out;
};
tpl.conditionTypeLabel=function(ctx){if(ctx.isHistorical){return i18n.HISTORICAL;
}else{if(ctx.isChronic){return i18n.CHRONIC;
}else{return i18n.THIS_VISIT;
}}};
tpl.historicalDisplayColumn=function(ctx){var out="";
if(ctx.vocab||ctx.display||ctx.termCode){out+="<span class='historical-label'>"+ctx.vocab+": </span><span>"+ctx.display+" ("+ctx.termCode+") - ";
}out+=tpl.conditionTypeLabel(ctx)+"</span><br/>";
out+="<span class='historical-label'>"+i18n.CLASSIFICATION+": </span><span>"+ctx.classification+"</span>";
return out;
};
tpl.historicalOnsetColumn=function(ctx){return"<span>"+ctx.onsetDate+"</span>";
};
return tpl;
});
define("cerner/discernabu/components/conprobo3/templates/ListTemplate",function(){var i18n=window.i18n.discernabu.conprobo3_i18n;
var tpl={};
tpl.chronicToggle=function(ctx){var privClass=ctx.canModifyChronic?"":"no-privs";
var disabledClass=(ctx.condition.hasProblem&&ctx.condition.Problems[0].getProblemTypeFlag()==2)?"disabled ":"";
if(disabledClass||(ctx.condition.hasProblem&&!ctx.condition.canModifyChronic)){privClass="no-privs";
}return"<div class='chronic toggle "+disabledClass+privClass+"' id='"+ctx.chronicToggleId+"'>"+i18n.CHRONIC+"</div>";
};
tpl.thisVisitToggle=function(ctx){var pregInd=(ctx.condition.hasProblem&&ctx.condition.Problems[0].getProblemTypeFlag()==2);
var privClass=(ctx.canModifyThisVisit)?"":"no-privs";
var disabledClass=(pregInd&&ctx.condition.isThisVisit&&(!ctx.condition.isChronic||ctx.condition.isHistorical))?"disabled ":"";
if(disabledClass||(ctx.condition.hasDx&&!ctx.condition.canModifyThisVisit)){privClass="no-privs";
}return"<div class='this-visit toggle "+disabledClass+privClass+"' id='"+ctx.thisVisitToggleId+"'>"+i18n.THIS_VISIT+"</div>";
};
tpl.resolvedToggle=function(ctx){if(ctx.condition.hasProblem&&ctx.condition.isChronic&&ctx.canModifyChronic&&ctx.condition.canModifyChronic){return"<div class='resolve-action' id='"+ctx.resolvedToggleId+"'>"+i18n.RESOLVE+"</div>";
}else{return"";
}};
tpl.disabledActions=function(ctx){return"<div class='this-visit toggle disabled no-privs' id='"+ctx.thisVisitToggleId+"'>"+i18n.THIS_VISIT+"</div><div class='chronic toggle disabled no-privs' id='"+ctx.chronicToggleId+"'>"+i18n.CHRONIC+"</div>";
};
tpl.priorityDropDown=function(ctx){if(ctx.isPriorityEnabled&&ctx.condition.canModify){return"<span class='priority drop-down' id='"+ctx.priorityDropDownId+"'></span>";
}return"<span class='priority view-only'>"+ctx.condition.priorityDisplay+"</span>";
};
tpl.priorityDropDownItem=function(ctx){return"<dd id='"+ctx._elementId+'">'+ctx.priority+"</dd>";
};
tpl.removeNKPLink=function(ctx){return"<a id='"+ctx.cancelButtonId+"'>"+i18n.REMOVE+"</a>";
};
tpl.nkpActionColumn=function(ctx){if(ctx.canModify){return tpl.removeNKPLink(ctx);
}};
tpl.nkpDisplayColumn=function(ctx){return"<span class='priority' /><i>"+ctx.condition.display+"</i>";
};
tpl.buttons=function(ctx){if(ctx.condition.targetNomenclature>0){if(ctx.condition.hasProblem&&ctx.condition.Problems[0].getProblemTypeFlag()==2){return tpl.thisVisitToggle(ctx)+tpl.chronicToggle(ctx);
}return tpl.thisVisitToggle(ctx)+tpl.chronicToggle(ctx)+tpl.resolvedToggle(ctx);
}else{return tpl.disabledActions(ctx);
}};
tpl.actionsColumn=function(ctx){var out=[tpl.buttons(ctx)];
if(ctx.condition.isHistorical&&ctx.condition.isThisVisit){out.push("<span class='resolved'>"+i18n.RESOLVED+"</span>");
}return out.join("");
};
tpl.displayColumn=function(ctx){var out="";
if(ctx.condition.isThisVisit){out+=tpl.priorityDropDown(ctx);
}else{out+="<span class='priority' />";
}if(ctx.isDxAssistantEnabled&&ctx.showDxAssIcon){out+="<span id='"+ctx.dxAssButtId+"' class='unspecified-condition'>&nbsp;</span>";
}out+="<span class='display' id='"+ctx.selectConditionBtnId+"'>";
out+=ctx.condition.display;
if(ctx.condition.isInactive){out+="<span class='sec-text'>"+i18n.INACTIVE+"</span>";
}out+="</span>";
return out;
};
tpl.commentsIndicatorColumn=function(ctx){if(!ctx.condition.showCommentIcon){return"";
}return['<div class="comment-indicator" id="',ctx.commentsIndButtId,'" />'].join("");
};
tpl.classificationColumn=function(ctx){return"<span>"+ctx.condition.classificationDisplay+"</span>";
};
tpl.main=function(ctx){return"<div class='list-view' id='"+ctx.getConditionListTableId()+"'></div>";
};
return tpl;
});
define("cerner/discernabu/components/conprobo3/views/DetailedView",["cerner/discernabu/components/conprobo3/CPO3View"],function(CPO3View){var attribute=MPageOO.attribute;
var DetailedView=function(element,factory){CPO3View.call(this,element,factory);
};
DetailedView.prototype=new CPO3View();
var method=DetailedView.prototype;
attribute(DetailedView,"Component");
attribute(DetailedView,"ConditionListTable");
attribute(DetailedView,"DetailsPanel");
attribute(DetailedView,"DetailsPanelId");
attribute(DetailedView,"ConditionListTableId");
attribute(DetailedView,"Condition");
attribute(DetailedView,"Conditions");
attribute(DetailedView,"CloseDetailsPanelButton");
attribute(DetailedView,"MaxHeight");
attribute(DetailedView,"BedrockConfig");
attribute(DetailedView,"SharedCondResObj");
attribute(DetailedView,"Criterion");
attribute(DetailedView,"MetaObj");
attribute(DetailedView,"IsInfoButtonEnabled");
attribute(DetailedView,"ClassificationFilter");
method.create=function(){CPO3View.prototype.create.call(this);
var build=this.getFactory();
var table=build.conditionListTable(this.getConditionListTableId());
var details=build.detailsPanel(this.getDetailsPanelId());
var closeButton=build.closeDetailsPanelButton();
this.setCloseDetailsPanelButton(closeButton);
closeButton.setParent(this);
this.renderTemplate(build.detailedTemplate().main,{detailsId:details.getElementId(),closeBtnId:closeButton.getElementId(),tableId:table.getElementId()});
table.setTemplates(build.listTemplate());
table.setComponent(this.getComponent());
table.addDisplayColumn();
table.addCommentIndicatorColumn();
table.setParent(this);
table.setBedrockConfig(this.getBedrockConfig());
table.setClassificationFilter(this.getClassificationFilter());
table.setCanModifyThisVisit(this.getCanModifyThisVisit());
table.setCanModifyChronic(this.getCanModifyChronic());
table.setIsPriorityEnabled(this.getIsPriorityEnabled());
table.setIsDxAssistantEnabled(this.getIsDxAssistantEnabled());
table.setSharedCondResObj(this.getSharedCondResObj());
table.create();
details.setParent(this);
details.setBedrockConfig(this.getBedrockConfig());
details.setSharedCondResObj(this.getSharedCondResObj());
details.setCanModifyThisVisit(this.getCanModifyThisVisit());
details.setCanModifyChronic(this.getCanModifyChronic());
details.setCriterion(this.getCriterion());
details.setMetaObj(this.getMetaObj());
details.setIsInfoButtonEnabled(this.getIsInfoButtonEnabled());
details.setIsDxAssistantEnabled(this.getIsDxAssistantEnabled());
details.setConditionList(this.getConditions());
details.create();
this.setConditionListTable(table);
this.setDetailsPanel(details);
};
method.update=function(){this.getElement().addClass("detailed-view");
var table=this.getConditionListTable();
table.setConditions(this.getConditions());
table.setClassificationFilter(this.getClassificationFilter());
table.update();
var details=this.getDetailsPanel();
this.updateDetails();
table.highlightCondition(this.getCondition());
this.getCloseDetailsPanelButton().init();
this.getDetailsPanel().setConditionList(this.getConditions());
};
method.updateDetails=function(){var details=this.getDetailsPanel();
details.setCondition(this.getCondition());
details.update();
this.resize();
};
method.selectCondition=function(condition){if(this.getCondition()===condition){this.closeDetailsPanel();
return;
}this.setCondition(condition);
this.getConditionListTable().highlightCondition(condition);
this.updateDetails();
};
method.closeDetailsPanel=function(){var currentScrollPosition=this.getConditionListTable().getScrollPosition();
this.fire("showListView");
this.fire("updateCurrentViewScrollPosition",[currentScrollPosition]);
this.setCondition(null);
};
method.resize=function(){var maxHeight=this.getMaxHeight();
if(!maxHeight){return;
}this.getConditionListTable().trigger("setMaxHeight",[maxHeight]);
this.getConditionListTable().trigger("resize");
var tableHeight=this.getConditionListTable().getHeight();
this.getDetailsPanel().setHeight(tableHeight);
this.getDetailsPanel().trigger("resize");
};
method.scrollToComments=function(){this.getDetailsPanel().scrollToComments();
};
method.showView=function(){this.getDetailsPanel().show();
};
method.setScrollPosition=function(pos){this.getConditionListTable().setScrollPosition(pos);
};
method.removeConditionFromThisVisit=function(condition,priority){this.fire("removeConditionFromThisVisit",[condition,priority]);
};
method.resolveCondition=function(condition,reply){this.fire("resolveCondition",[condition,reply]);
};
method.unresolveCondition=function(condition,reply){this.fire("unresolveCondition",[condition,reply]);
};
method.handleDuplicates=function(isThisVisit,raw){this.fire("handleDuplicates",[isThisVisit,raw]);
};
method.changePriority=function(condition){this.fire("changePriority",[condition]);
};
method.moveConditionToThisVisit=function(condition){this.fire("moveConditionToThisVisit",[condition]);
};
method.moveConditionToChronic=function(condition){this.fire("moveConditionToChronic",[condition]);
};
method.cancelCondition=function(condition,reply){this.fire("cancelCondition",[condition,reply]);
};
method.addComment=function(comment){this.getConditionListTable().update();
this.getConditionListTable().highlightCondition(this.getCondition());
};
method.updateSpecifiedConditions=function(conditions){CPO3View.prototype.updateSpecifiedConditions.call(this,conditions);
this.getConditionListTable().highlightCondition(this.getCondition());
};
method.conditionDeleted=function(condition){if(condition==this.getCondition()){this.closeDetailsPanel();
}this.fire("conditionDeleted",[condition]);
};
return DetailedView;
});
define("cerner/discernabu/components/conprobo3/views/ListView",["cerner/discernabu/components/conprobo3/CPO3View"],function(CPO3View){var attribute=MPageOO.attribute;
var ListView=function(element,factory){CPO3View.call(this,element,factory);
};
ListView.prototype=new CPO3View();
var method=ListView.prototype;
attribute(ListView,"Component");
attribute(ListView,"ConditionListTable");
attribute(ListView,"Conditions");
attribute(ListView,"ConditionListTableId");
attribute(ListView,"BedrockConfig");
attribute(ListView,"SharedCondResObj");
attribute(ListView,"IsPriorityEnabled");
attribute(ListView,"ClassificationFilter");
method.create=function(){CPO3View.prototype.create.call(this);
if(!this.getConditionListTableId()){this.setConditionListTableId("cond_list_table_"+this.getControlId());
}var build=this.getFactory();
var templates=build.listTemplate();
this.renderTemplate(templates.main,this);
var table=build.conditionListTable(this.getConditionListTableId());
table.setComponent(this.getComponent());
table.setTemplates(templates);
table.setParent(this);
table.addDisplayColumn();
table.addCommentIndicatorColumn();
table.addClassificationColumn();
table.addActionsColumn();
table.setIsPriorityEnabled(this.getIsPriorityEnabled());
table.setCanModifyThisVisit(this.getCanModifyThisVisit());
table.setCanModifyChronic(this.getCanModifyChronic());
table.setBedrockConfig(this.getBedrockConfig());
table.setSharedCondResObj(this.getSharedCondResObj());
table.setClassificationFilter(this.getClassificationFilter());
table.setIsDxAssistantEnabled(this.getIsDxAssistantEnabled());
table.create();
this.setConditionListTable(table);
};
method.update=function(){var table=this.getConditionListTable();
table.setConditions(this.getConditions());
table.setClassificationFilter(this.getClassificationFilter());
table.update();
};
method.setMaxHeight=function(height){this.getConditionListTable().setMaxHeight(height);
};
method.resize=function(){this.getConditionListTable().resize();
};
method.setScrollPosition=function(pos){this.getConditionListTable().setScrollPosition(pos);
};
method.scrollToComments=function(){this.fire("scrollToComments");
};
method.selectCondition=function(condition){var currentScrollPosition=this.getConditionListTable().getScrollPosition();
this.fire("showDetailedView",[condition]);
this.fire("updateCurrentViewScrollPosition",[currentScrollPosition]);
};
method.resolveCondition=function(condition,reply){this.fire("resolveCondition",[condition,reply]);
};
method.unresolveCondition=function(condition,reply){this.fire("unresolveCondition",[condition,reply]);
};
method.handleDuplicates=function(isThisVisit,raw){this.fire("handleDuplicates",[isThisVisit,raw]);
};
method.changePriority=function(condition){this.fire("changePriority",[condition]);
};
method.moveConditionToThisVisit=function(condition){this.fire("moveConditionToThisVisit",[condition]);
};
method.moveConditionToChronic=function(condition){this.fire("moveConditionToChronic",[condition]);
};
method.removeConditionFromThisVisit=function(condition,priority){this.fire("removeConditionFromThisVisit",[condition,priority]);
};
method.cancelCondition=function(condition,reply){this.fire("cancelCondition",[condition,reply]);
};
return ListView;
});
require(["cerner/discernabu/components/conprobo3/ConprobO3Component"],function(comp){ConprobO3Component=comp;
});
})();
