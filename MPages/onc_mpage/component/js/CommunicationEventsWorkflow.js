function CommunicationEventsWFStyle(){this.initByNamespace("wfHcmCommEvents");
}CommunicationEventsWFStyle.prototype=new ComponentStyle();
CommunicationEventsWFStyle.prototype.constructor=ComponentStyle;
function CommunicationEventsWF(criterion){this.setCriterion(criterion);
this.setComponentLoadTimerName("USR:MPG.COMMUNICATION_EVENTS.O1.WF - load component");
this.setComponentRenderTimerName("ENG:MPG.COMMUNICATION_EVENTS.O1.WF - render component");
if(criterion.encntr_id){this.setPlusAddCustomInd(true);
}this.setIncludeLineNumber(true);
this.setStyles(new CommunicationEventsWFStyle());
this.TYPE_CODE_SET=4003448;
this.OUTCOME_CODE_SET=4003449;
this.ROLE_CODE_SET=4003451;
this.METHOD_CODE_SET=4003498;
this.ROLE_TYPE_CODE_SET=4003458;
}CommunicationEventsWF.prototype=new BaseCommunicationEvents();
CommunicationEventsWF.prototype.preProcessing=function(){var component=this;
if(!component.getCriterion().encntr_id){component.setPlusAddEnabled(false);
component.setLookbackMenuItems([]);
}};
CommunicationEventsWF.prototype.postProcessing=function(){var compNS=this.getStyles().getNameSpace();
var componentId=this.getComponentId();
if($("#lookbackContainer"+compNS+componentId).children().length){$("#lookbackContainer"+compNS+componentId).children()[0].innerHTML=i18n.discernabu.communication_events_o1.VIEW_ALL;
}};
CommunicationEventsWF.prototype.personnelId=function(){return this.criterion.getPersonnelInfo().getPersonnelId();
};
CommunicationEventsWF.prototype.submitForm=function(cclProgram,cclParams){var component=this;
var scriptRequest=new ComponentScriptRequest();
scriptRequest.setProgramName(cclProgram);
scriptRequest.setParameterArray(cclParams);
scriptRequest.setComponent(this);
scriptRequest.setResponseHandler(function(){component.retrieveComponentData();
});
scriptRequest.performRequest();
};
CommunicationEventsWF.prototype.stringParamBuilder=function(string){function encodeSemicolons(stringToEncode){return stringToEncode.replace(/;/g,"|-_|");
}string=encodeSemicolons(string);
return"@"+string.length+":"+string+"@";
};
CommunicationEventsWF.prototype.updateCommunicationEvent=function(){var component=this;
var componentId=component.getComponentId();
var $communicationForm=$("#"+componentId+"-edit-communication-form");
var commType=($communicationForm.find('input[name="typeRadio"]:checked').val()||"0")+".0";
var commId=$communicationForm.find('input[name="comm_id"]').val()+".0";
var contactedPersonNameParam=component.stringParamBuilder($communicationForm.find('input[name="contacted_person_name"]').val());
var contactedPersonId=$communicationForm.find('input[name="contacted_person_id"]').length>0?$communicationForm.find('input[name="contacted_person_id"]').val()+".0":"0.0";
var personRole=$communicationForm.find('select[name="role"]').val()+".0";
var commOutcome=$communicationForm.find('select[name="outcome"]').val()+".0";
var commMethod=$communicationForm.find('select[name="method"]').val()+".0";
var commNotesParam=component.stringParamBuilder($communicationForm.find('textarea[name="notes"]').val());
var durationInMin='"'+$.trim($communicationForm.find('input[name="duration"]').val())+'"';
var commDate=$communicationForm.find(".date-input").val();
var commTime=$communicationForm.find(".time-input").val();
var commDtTmObj=new Date(commDate.concat(" ",commTime));
if($communicationForm.find(".timezone-container").is(":visible")){var timeZone=$communicationForm.find('select[name="timeZone"]').val();
if(timeZone===MP_Timezone.getStandardAbbreviation()){commDtTmObj.setTime(commDtTmObj.getTime()+(1*60*60*1000));
}}var commDtTm='"'+commDtTmObj.toISOString()+'"';
var personnelId=component.personnelSearchControl.getSelectedProviderId()+".0";
var cclParams=["^MINE^",commId,commType,commMethod,personRole,durationInMin,commOutcome,commNotesParam,personnelId,contactedPersonNameParam,contactedPersonId,commDtTm];
component.submitForm("HCM_CHG_COMM_EVENT",cclParams);
var capTimer=new CapabilityTimer("CAP:MPG COMMUNICATION EVENTS MODIFIED EVENT");
capTimer.capture();
};
CommunicationEventsWF.prototype.confirmDeleteCommunicationEvent=function(commId){var component=this;
var compNS=component.getStyles().getNameSpace();
var modalId="RemoveCommunicationEvent"+this.getComponentId();
var mDialog=new ModalDialog(modalId);
var mBodyContent='<span class="'+compNS+'-warning-icon">'+component.i18n.DELETE_MODAL_BODY+"</span>";
mDialog.setHeaderTitle(component.i18n.DELETE_MODAL_HEADER).setTopMarginPercentage(25).setRightMarginPercentage(35).setBottomMarginPercentage(30).setLeftMarginPercentage(25).setIsBodySizeFixed(false).setHasGrayBackground(true).setIsFooterAlwaysShown(true);
mDialog.setBodyDataFunction(function(modalObj){modalObj.setBodyHTML('<div class="'+compNS+'-communication-remove-modal"><p>'+mBodyContent+"</p></div>");
});
var removeButton=new ModalButton("Remove");
removeButton.setText(component.i18n.REMOVE).setIsDithered(false).setOnClickFunction(function(){MP_Util.LoadSpinner("sidePanelContents"+component.getComponentId(),1);
component.deleteCommunicationEvent(commId);
MP_ModalDialog.closeModalDialog(modalId);
});
mDialog.addFooterButton(removeButton);
var cancelButton=new ModalButton("Cancel");
cancelButton.setText(component.i18n.CANCEL).setIsDithered(false).setOnClickFunction(function(){MP_ModalDialog.closeModalDialog(modalId);
});
mDialog.addFooterButton(cancelButton);
MP_ModalDialog.updateModalDialogObject(mDialog);
MP_ModalDialog.showModalDialog(modalId);
};
CommunicationEventsWF.prototype.deleteCommunicationEvent=function(commId){var component=this;
var cclParams=["^MINE^",commId];
component.submitForm("HCM_DELETE_COMM_EVENTS",cclParams);
var capTimer=new CapabilityTimer("CAP:MPG COMMUNICATION EVENTS REMOVED EVENT");
capTimer.capture();
};
CommunicationEventsWF.prototype.renderSidePanelForEdit=function(currentRow){var component=this;
var componentId=component.getComponentId();
var compNS=component.getStyles().getNameSpace();
var panelId=componentId+"-side-panel-container";
var actionButtonsHtml='<input type="button" id="'+componentId+'-cancel-edit-communication-btn" class="sp-button2" value="'+component.i18n.CANCEL+'"><input type="button" id="'+componentId+'-save-communication-btn" class="sp-button2" value="'+component.i18n.SAVE+'">';
var editFormId=componentId+"-edit-communication-form";
component.clonedCodeSets=[];
$.extend(true,component.clonedCodeSets,component.codeSets);
var codeValueFlags={isCurrentMethodInactive:component.isCurrentCodeValueInactive(currentRow.METHOD_CD),isCurrentTypeInactive:component.isCurrentCodeValueInactive(currentRow.TYPE_CD),isCurrentRoleInactive:component.isCurrentCodeValueInactive(currentRow.PERSON_ROLE_CD),isCurrentOutcomeInactive:component.isCurrentCodeValueInactive(currentRow.OUTCOME_CD)};
component.buildInactiveCodeSets(codeValueFlags,currentRow);
var contents='<div id="'+editFormId+'" class="'+compNS+'-communication-form"><div class="sp-content-section" id="sidePanelScrollContainer'+componentId+'"><span class="date-container"><label class="date-label required">'+component.i18n.DATE+'</label><input type="text" class="date-input" /></span><span class="time-container"><label class="time-label required">'+component.i18n.TIME+'</label><input type="text" class="time-input" /><span class="wfHcmCommEvents-clock-icon"/></span><span class="timezone-container">'+component.timezoneDropdown()+'</span><div class="ambiguous-date-container">'+component.i18n.AMBIGUOUS_DATE_MESSAGE+'</div><label for="duration">'+component.i18n.DURATION_IN_MIN+'</label><input type="text" name="duration" maxlength="3" value='+currentRow.DURATION_IN_MIN+'><label for="method" class="required">'+component.i18n.METHOD+"</label>"+component.buildSelect(component.METHOD_CODE_SET,"method",currentRow.METHOD_CD)+'<label for="type" class="required">'+component.i18n.TYPE+'</label><span class="radio" name="type">'+component.buildTypeRadio(currentRow.TYPE_CD)+'</span><label for="role" class="required">'+component.i18n.CONTACT_TYPE+"</label>"+component.buildSelect(component.ROLE_CODE_SET,"role",currentRow.PERSON_ROLE_CD)+'<input type="hidden" name="comm_id" value='+currentRow.ID+'><div id="contacted-field"/><label for="outcome" class="required">'+component.i18n.OUTCOME+"</label>"+component.buildSelectForOutcomesEdit(currentRow.OUTCOME_CD,currentRow.TYPE_CD,currentRow.METHOD_CD)+'<label for="notes">'+component.i18n.NOTES+'</label><textarea rows="8" cols="35" maxLength="250" name="notes">'+currentRow.NOTES+'</textarea><div class="created-by"><label for="created_by">'+component.i18n.CREATED_BY_OTHER_COLON.replace("{full_name}",currentRow.CREATED_BY.FULL_NAME).replace("{date_time}",currentRow.CREATED_AT)+'</label></div><div class="edited-by">'+component.buildEditedBy(currentRow)+"</div></div></div>";
try{if(component.$sidePanelContainer&&component.$sidePanelContainer.length){component.sidePanelEdit=new CompSidePanel(componentId,panelId);
component.sidePanelEdit.setExpandOption(component.sidePanelEdit.expandOption.EXPAND_DOWN);
component.sidePanelEdit.renderPreBuiltSidePanel();
component.sidePanelEdit.showCornerCloseButton();
component.sidePanelEdit.setCornerCloseFunction(function(){component.sidePanelEdit.hidePanel();
component.updateSelRowBgColor();
component.stretchTable();
});
component.sidePanelEdit.setTitleText(component.i18n.EDIT_COMMUNICATION_HEADER);
component.sidePanelEdit.setActionsAsHTML(actionButtonsHtml);
component.sidePanelEdit.setContents(contents,"sidePanelContents"+componentId);
component.initializeDateSelector(currentRow.COMM_DT_TM);
component.initializeTimeSelector(currentRow.COMM_DT_TM);
component.personnelSearchControl=component.initializeContactedField();
component.flexTypeByMethod(currentRow);
component.flexNameByRoleType(currentRow);
component.setClickHandlersForEdit(currentRow);
component.editFormValidator=new CommunicationEventsValidator(editFormId,component);
component.resizeSidePanel();
component.checkForAmbiguousDates(editFormId,true);
if(currentRow.FORMATTED_DT_TM.indexOf(MP_Timezone.getDaylightAbbreviation())!==-1){$("#"+editFormId+" select[name=timeZone]").val(MP_Timezone.getDaylightAbbreviation());
}else{if(currentRow.FORMATTED_DT_TM.indexOf(MP_Timezone.getStandardAbbreviation())!==-1){$("#"+editFormId+" select[name=timeZone]").val(MP_Timezone.getStandardAbbreviation());
}}$("#"+editFormId+" .date-input, #"+editFormId+" .time-input").on("change blur",function(){component.checkForAmbiguousDates(editFormId);
});
}}catch(err){logger.logJSError(err,component,"communication-events-o1.js","renderSidePanelForEdit");
}};
CommunicationEventsWF.prototype.buildEditedBy=function(currentRow,sidePanelForView){var component=this;
var editedByMarkup="";
if(currentRow.EDITED_BY.FULL_NAME){if(sidePanelForView){editedByMarkup='<span class="disabled">'+component.i18n.LAST_MODIFIED_BY+"</span><span>"+currentRow.EDITED_BY.FULL_NAME+"<br>"+currentRow.EDITED_AT+"</span>";
}else{editedByMarkup='<label for="last-modified-by">'+component.i18n.LAST_MODIFIED_BY_COLON.replace("{full_name}",currentRow.EDITED_BY.FULL_NAME).replace("{date_time}",currentRow.EDITED_AT)+"</label>";
}}return editedByMarkup;
};
CommunicationEventsWF.prototype.renderSidePanelForView=function(currentRow){var component=this;
var componentId=component.getComponentId();
var compNS=component.getStyles().getNameSpace();
var panelId=componentId+"-side-panel-container";
var actionButtonsHtml='<input type="button" id="'+componentId+'-delete-communication-btn" class="sp-button2" value="'+component.i18n.REMOVE+'"><input type="button" id="'+componentId+'-modify-communication-btn" class="sp-button2" value="'+component.i18n.MODIFY+'">';
var contents='<div id="'+componentId+'-communication-event-details" class="'+compNS+'-communication-event-details"><div class="sp-content-section" id="sidePanelScrollContainer'+componentId+'"><div class="person-contacted"><span class="disabled">'+component.i18n.CONTACT_NAME+"</span><span>"+currentRow.CONTACTED_PERSON_NAME_VIEW+" "+component.i18n.FORMATTED_DISPLAY.replace("{display_value}",currentRow.PERSON_ROLE_DISP)+'</span><br></div><div class="created-by"><span class="disabled">'+component.i18n.CREATED_BY_OTHER+"</span><span>"+currentRow.CREATED_BY.FULL_NAME+"<br>"+currentRow.CREATED_AT+'</span></div><div class="outcome"><span class="disabled">'+component.i18n.OUTCOME+"</span><span>"+currentRow.OUTCOME_DISP+'</span></div><div class="edited-by">'+component.buildEditedBy(currentRow,true)+'</div><div class="notes"><span class="disabled">'+component.i18n.NOTES+"</span><span>"+currentRow.NOTES_VIEW+"</span></div></div></div>";
var titleText=component.i18n.FORMATTED_METHOD_DISPLAY.replace("{title_text}",currentRow.METHOD_DISP);
if(currentRow.TYPE_DISP){titleText=titleText.replace("{type_value}",currentRow.TYPE_DISP_VIEW);
}else{titleText=titleText.replace("({type_value})","");
}var subTitleText=component.i18n.FORMATTED_DISPLAY_TIME.replace("{date_value}",currentRow.FORMATTED_DT_TM);
subTitleText=subTitleText.replace("{minute_value}",currentRow.DURATION_IN_MIN_VIEW);
try{if(component.$sidePanelContainer&&component.$sidePanelContainer.length){component.sidePanelView=new CompSidePanel(componentId,panelId);
component.sidePanelView.setExpandOption(component.sidePanelView.expandOption.EXPAND_DOWN);
component.sidePanelView.renderPreBuiltSidePanel();
component.sidePanelView.showCornerCloseButton();
component.sidePanelView.setCornerCloseFunction(function(){component.sidePanelView.hidePanel();
component.updateSelRowBgColor();
component.stretchTable();
});
component.sidePanelView.setTitleText(titleText);
component.sidePanelView.setSubtitleText(subTitleText);
component.sidePanelView.setActionsAsHTML(actionButtonsHtml);
component.sidePanelView.setContents(contents,"sidePanelContents"+componentId);
component.setClickHandlersForView(currentRow);
if(currentRow.CREATED_BY.ID!==parseInt(component.personnelId(),10)&&component.hasModifyCommEventInd!==1){$("#"+componentId+"-modify-communication-btn").hide();
$("#"+componentId+"-delete-communication-btn").hide();
}component.resizeSidePanel();
}}catch(err){logger.logJSError(err,component,"communication-events-o1.js","renderSidePanelForView");
}};
CommunicationEventsWF.prototype.setClickHandlersForView=function(currentRow){var component=this;
var componentId=component.getComponentId();
$("#"+componentId+"-modify-communication-btn").click(function(){component.renderSidePanelForEdit(currentRow);
});
$("#"+componentId+"-delete-communication-btn").click(function(){component.confirmDeleteCommunicationEvent(currentRow.ID);
});
};
CommunicationEventsWF.prototype.setClickHandlersForEdit=function(currentRow){var component=this;
var componentId=component.getComponentId();
$("#"+componentId+"-save-communication-btn").click(function(){if(component.editFormValidator.isFormValid()){MP_Util.LoadSpinner("sidePanelContents"+componentId,1);
component.updateCommunicationEvent();
component.triggerPersonnelSearchTimer(currentRow.CONTACTED_PERSONNEL.ID,component.personnelSearchControl.getSelectedProviderId());
}});
$("#"+componentId+"-cancel-edit-communication-btn").click(function(){component.renderSidePanelForView(currentRow);
});
};
CommunicationEventsWF.prototype.updateSelRowBgColor=function(selRowObj){var prevRow=this.$tableView.find(".selected");
if(prevRow.length>0){prevRow.removeClass("selected");
}if(selRowObj){$(selRowObj).addClass("selected");
}};
CommunicationEventsWF.prototype.addCellClickExtension=function(){var component=this;
var selectedRow=null;
var cellClickExtension=new TableCellClickCallbackExtension();
cellClickExtension.setCellClickCallback(function(event,data){selectedRow=$(event.target).parents("#"+component.getSectionContentNode().id+" dl.result-info");
component.updateSelRowBgColor(selectedRow);
if(component.sidePanelAdd){component.sidePanelAdd.hidePanel();
}component.shrinkTable();
component.renderSidePanelForView(data.RESULT_DATA);
});
component.communicationTable.addExtension(cellClickExtension);
};
CommunicationEventsWF.prototype.addInactiveOutcomeCodeValues=function(codeValueFlags,currentRow){var parent;
var component=this;
var isOutcomeParentOnlyInactive=component.isOutcomeParentOnlyInactive(codeValueFlags,currentRow);
if(codeValueFlags.isCurrentOutcomeInactive){parent=component.getParentForOutcome(currentRow,codeValueFlags.isCurrentTypeInactive,codeValueFlags.isCurrentMethodInactive,codeValueFlags.isCurrentOutcomeInactive);
component.addInactiveCodeValue(component.getCodeSetArray(component.OUTCOME_CODE_SET),currentRow.OUTCOME_CD,currentRow.OUTCOME_DISP,parent);
}else{if(isOutcomeParentOnlyInactive){parent=component.getParentForOutcome(currentRow,codeValueFlags.isCurrentTypeInactive,codeValueFlags.isCurrentMethodInactive,codeValueFlags.isCurrentOutcomeInactive);
component.addCodeValueParent(component.getCodeSetArray(component.OUTCOME_CODE_SET),currentRow.OUTCOME_CD,parent);
}}};
CommunicationEventsWF.prototype.removeNonCurrentCodeValues=function(codeValueFlags,codeSetArray,currentRow){if(codeValueFlags.isCurrentMethodInactive){for(var i=codeSetArray[0].CODE_VALUES.length-1;
i>=0;
i--){if(codeSetArray[0].CODE_VALUES[i].CODE_VALUE!==currentRow.TYPE_CD){codeSetArray[0].CODE_VALUES.splice(i,1);
}}}};
CommunicationEventsWF.prototype.addInactiveTypeCodeValues=function(currentRow,codeValueFlags){if(currentRow.TYPE_CD){var component=this;
var codeSetArray=component.getCodeSetArray(component.TYPE_CODE_SET);
var isTypeParentOnlyInactive=!codeValueFlags.isCurrentTypeInactive&&codeValueFlags.isCurrentMethodInactive;
var parent={CODE_SET:component.METHOD_CODE_SET,CODE_VALUE:currentRow.METHOD_CD,CDF_MEANING:""};
if(codeValueFlags.isCurrentMethodInactive){component.removeNonCurrentCodeValues(codeValueFlags,codeSetArray,currentRow);
}if(codeValueFlags.isCurrentTypeInactive){component.addInactiveCodeValue(codeSetArray,currentRow.TYPE_CD,currentRow.TYPE_DISP,parent);
}else{if(isTypeParentOnlyInactive){component.addCodeValueParent(codeSetArray,currentRow.TYPE_CD,parent);
}}}};
CommunicationEventsWF.prototype.isOutcomeParentOnlyInactive=function(codeValueFlags,currentRow){return !codeValueFlags.isCurrentOutcomeInactive&&(!currentRow.TYPE_CD&&codeValueFlags.isCurrentMethodInactive)||(currentRow.TYPE_CD&&codeValueFlags.isCurrentTypeInactive);
};
CommunicationEventsWF.prototype.triggerPersonnelSearchTimer=function(oldPersonnelId,newPersonnelId){if(oldPersonnelId>0){if(newPersonnelId>0&&oldPersonnelId!==newPersonnelId){var capTimer=new CapabilityTimer("CAP:MPG COMMUNICATION EVENTS SEARCHED FOR PERSONNEL");
capTimer.capture();
}}else{if(newPersonnelId>0){var capTimer=new CapabilityTimer("CAP:MPG COMMUNICATION EVENTS SEARCHED FOR PERSONNEL");
capTimer.capture();
}}};
CommunicationEventsWF.prototype.addInactiveMethodCodeValues=function(codeValueFlags,currentRow){if(codeValueFlags.isCurrentMethodInactive){var component=this;
component.addInactiveCodeValue(component.getCodeSetArray(component.METHOD_CODE_SET),currentRow.METHOD_CD,currentRow.METHOD_DISP);
}};
CommunicationEventsWF.prototype.addInactiveRoleCodeValues=function(codeValueFlags,currentRow){var component=this;
var parent={CODE_SET:component.ROLE_TYPE_CODE_SET,CODE_VALUE:currentRow.PERSON_ROLE_PARENT_CD,CDF_MEANING:currentRow.PERSON_ROLE_PARENT_MEAN};
if(codeValueFlags.isCurrentRoleInactive){component.addInactiveCodeValue(component.getCodeSetArray(component.ROLE_CODE_SET),currentRow.PERSON_ROLE_CD,currentRow.PERSON_ROLE_DISP,parent);
}};
CommunicationEventsWF.prototype.buildInactiveCodeSets=function(codeValueFlags,currentRow){var component=this;
component.addInactiveMethodCodeValues(codeValueFlags,currentRow);
component.addInactiveRoleCodeValues(codeValueFlags,currentRow);
component.addInactiveTypeCodeValues(currentRow,codeValueFlags);
component.addInactiveOutcomeCodeValues(codeValueFlags,currentRow);
};
CommunicationEventsWF.prototype.addInactiveCodeValue=function(codeSetArray,codeValue,display,parent){parent=parent||{};
codeSetArray[0].CODE_VALUES.push({CODE_VALUE:codeValue,DISPLAY:display,PARENTS:[parent]});
};
CommunicationEventsWF.prototype.addCodeValueParent=function(codeSetArray,codeValue,parentToAdd){var parentAlreadyExists=false;
$.each(codeSetArray[0].CODE_VALUES,function(_,codeVal){if(codeVal.CODE_VALUE===codeValue){$.each(codeVal.PARENTS,function(_,parent){if(parent.CODE_VALUE===parentToAdd.CODE_VALUE){parentAlreadyExists=true;
return false;
}});
if(!parentAlreadyExists){codeVal.PARENTS.push(parentToAdd);
}}});
};
CommunicationEventsWF.prototype.buildSelect=function(codeSetToMap,name,currCodeValue){var component=this;
var codeSetArray=component.getCodeSetArray(codeSetToMap);
var options={prompt:" ",cssClass:"comm-event-required"};
var idDisplayList=$.map(codeSetArray[0].CODE_VALUES,function(codeValue){return{id:codeValue.CODE_VALUE,display:codeValue.DISPLAY};
});
if(currCodeValue){options={selected:currCodeValue};
}var select=component.selectTag(name,idDisplayList,options,currCodeValue);
return select;
};
CommunicationEventsWF.prototype.getParentForOutcome=function(currentRow,isCurrentTypeInactive,isCurrentMethodInactive,isOutcomeInactive){var component=this;
if(currentRow.TYPE_CD&&(isCurrentTypeInactive||isOutcomeInactive)){return{CODE_SET:component.TYPE_CODE_SET,CODE_VALUE:currentRow.TYPE_CD,CDF_MEANING:currentRow.TYPE_DISP.toUpperCase()};
}else{if(!currentRow.TYPE_CD&&(isCurrentMethodInactive||isOutcomeInactive)){return{CODE_SET:component.METHOD_CODE_SET,CODE_VALUE:currentRow.METHOD_CD,CDF_MEANING:""};
}else{return{};
}}};
CommunicationEventsWF.prototype.buildSelectForOutcomesEdit=function(currOutcomeCode,currTypeCode,currMethodCode){var component=this;
var codeSetArray=component.getCodeSetArray();
currTypeCode=currTypeCode||currMethodCode;
var outcomesToDisplay=component.buildOutcomesToDisplay(codeSetArray,currTypeCode);
var idDisplayList=$.map(outcomesToDisplay,function(codeValue){return{id:codeValue.CODE_VALUE,display:codeValue.DISPLAY};
});
var options={selected:currOutcomeCode};
var outcomeSelectorHTML=component.selectTag("outcome",idDisplayList,options);
return outcomeSelectorHTML;
};
CommunicationEventsWF.prototype.selectTag=function(name,idDisplayList,options){var selectTag='<select name="'+name+'">';
idDisplayList=$.makeArray(idDisplayList);
options=options||{prompt:null,selected:null,cssClass:null};
if(options.cssClass){selectTag='<select name="'+name+'" class="'+options.cssClass+'">';
}if(options.prompt){idDisplayList.unshift({id:"",display:options.prompt});
}selectTag+=$.map(idDisplayList,function(value){if(options.selected&&options.selected===value.id){return'<option value="'+value.id+'" selected>'+value.display+"</option>";
}else{return'<option value="'+value.id+'">'+value.display+"</option>";
}}).join("");
selectTag+="</select>";
return selectTag;
};
CommunicationEventsWF.prototype.openTab=function(){var component=this;
if(component.sidePanelView){component.sidePanelView.hidePanel();
component.updateSelRowBgColor();
}component.shrinkTable();
component.renderSidePanelForAdd();
};
CommunicationEventsWF.prototype.addCommunicationEvent=function(){var component=this;
var componentId=component.getComponentId();
var criterion=component.criterion;
var $communicationForm=$("#"+componentId+"-add-communication-form");
var commType=($communicationForm.find('input[name="typeRadio"]:checked').val()||"0")+".0";
var contactedPersonNameParam=component.stringParamBuilder($communicationForm.find('input[name="contacted_person_name"]').val());
var contactedPersonId=$communicationForm.find('input[name="contacted_person_id"]').length>0?$communicationForm.find('input[name="contacted_person_id"]').val()+".0":"0.0";
var commDate=$communicationForm.find(".date-input").val();
var commTime=$communicationForm.find(".time-input").val();
var commMethod=$communicationForm.find('select[name="method"]').val()+".0";
var personRole=$communicationForm.find('select[name="role"]').val()+".0";
var commOutcome=$communicationForm.find('select[name="outcome"]').val()+".0";
var commNotesParam=component.stringParamBuilder($communicationForm.find('textarea[name="notes"]').val());
var durationInMin='"'+$.trim($communicationForm.find('input[name="duration"]').val())+'"';
var personnelId=component.personnelSearchControl.getSelectedProviderId()+".0";
var oneHourInMilleseconds=1*60*60*1000;
if(component.personnelSearchControl.getSelectedProviderId()>0){var capTimer=new CapabilityTimer("CAP:MPG COMMUNICATION EVENTS SEARCHED FOR PERSONNEL");
capTimer.capture();
}var commDtTmObj=new Date(commDate.concat(" ",commTime));
if($communicationForm.find(".timezone-container").is(":visible")){var timeZone=$communicationForm.find('select[name="timeZone"]').val();
if(timeZone===MP_Timezone.getStandardAbbreviation()){commDtTmObj.setTime(commDtTmObj.getTime()+oneHourInMilleseconds);
}}var commDtTm='"'+commDtTmObj.toISOString()+'"';
var cclParams=["^MINE^",criterion.person_id,criterion.encntr_id,commType,commMethod,personRole,durationInMin,commOutcome,commNotesParam,contactedPersonNameParam,contactedPersonId,commDtTm,personnelId];
component.submitForm("HCM_ADD_COMM_EVENT",cclParams);
var capTimer=new CapabilityTimer("CAP:MPG COMMUNICATION EVENTS ADDED EVENT");
capTimer.capture();
};
CommunicationEventsWF.prototype.timezoneDropdown=function(){var list=[{id:MP_Timezone.getDaylightAbbreviation(),display:MP_Timezone.getDaylightAbbreviation()},{id:MP_Timezone.getStandardAbbreviation(),display:MP_Timezone.getStandardAbbreviation()}];
return this.selectTag("timeZone",list);
};
CommunicationEventsWF.prototype.renderSidePanelForAdd=function(){var component=this;
var componentId=component.getComponentId();
var compNS=component.getStyles().getNameSpace();
var panelId=componentId+"-side-panel-container";
var addFormId=componentId+"-add-communication-form";
component.clonedCodeSets=null;
var actionButtonsHtml='<input type="button" id="'+componentId+'-cancel-add-communication-btn" class="sp-button2" value="'+component.i18n.CANCEL+'"><input type="button" id="'+componentId+'-add-communication-btn" class="sp-button2" value="'+component.i18n.SAVE+'">';
var addForm='<div id="'+addFormId+'" class="'+compNS+'-communication-form"><div class="sp-content-section" id="sidePanelScrollContainer'+componentId+'"><span class="date-container"><label class="date-label required">'+component.i18n.DATE+'</label><input type="text" class="date-input" /></span><span class="time-container"><label class="time-label required">'+component.i18n.TIME+'</label><input type="text" class="time-input" /><span class="wfHcmCommEvents-clock-icon"/></span><span class="timezone-container">'+component.timezoneDropdown()+'</span><div class="ambiguous-date-container">'+component.i18n.AMBIGUOUS_DATE_MESSAGE+'</div><label for="duration">'+component.i18n.DURATION_IN_MIN+'</label><input type="text" name="duration" maxlength="3"><label for="method" class="required">'+component.i18n.METHOD+"</label>"+component.buildSelect(component.METHOD_CODE_SET,"method")+'<label for="type" class="required">'+component.i18n.TYPE+'</label><span class="radio" name="type">'+component.buildTypeRadio()+'</span><label for="role" class="required">'+component.i18n.CONTACT_TYPE+"</label>"+component.buildSelect(component.ROLE_CODE_SET,"role")+'<div id="contacted-field"/><label for="outcome" class="required">'+component.i18n.OUTCOME+'</label><select name="outcome" class="comm-event-required"></select><label for="notes">'+component.i18n.NOTES+'</label><textarea rows="8" cols="35" maxLength="250" name="notes"></textarea></div></div>';
try{if(component.$sidePanelContainer&&component.$sidePanelContainer.length){component.sidePanelAdd=new CompSidePanel(componentId,panelId);
component.sidePanelAdd.setExpandOption(component.sidePanelAdd.expandOption.EXPAND_DOWN);
component.sidePanelAdd.renderPreBuiltSidePanel();
component.sidePanelAdd.showCornerCloseButton();
component.sidePanelAdd.setCornerCloseFunction(function(){component.sidePanelAdd.hidePanel();
component.stretchTable();
});
component.sidePanelAdd.setTitleText(component.i18n.ADD_COMMUNICATION_HEADER);
component.sidePanelAdd.setActionsAsHTML(actionButtonsHtml);
component.sidePanelAdd.setContents(addForm,"sidePanelContents"+componentId);
component.initializeDateSelector();
component.initializeTimeSelector();
component.personnelSearchControl=component.initializeContactedField();
component.flexTypeByMethod();
component.flexNameByRoleType();
component.addFormValidator=new CommunicationEventsValidator(addFormId,component);
component.setClickHandlersForAdd();
component.resizeSidePanel();
component.checkForAmbiguousDates(addFormId);
$("#"+addFormId+" .date-input, #"+addFormId+" .time-input").on("change blur",function(){component.checkForAmbiguousDates(addFormId);
});
}}catch(err){logger.logJSError(err,component,"communication-events-o1.js","renderSidePanelForAdd");
}};
CommunicationEventsWF.prototype.checkForAmbiguousDates=function(formId,hideAmbiguousDateMessage){var $date=$("#"+formId+" .date-input");
var $time=$("#"+formId+" .time-input");
var component=this;
var componentId=component.getComponentId();
var compNS=component.getStyles().getNameSpace();
var enteredDateTime=new Date($date.val().concat(" "+$time.val()));
if(MP_Timezone.isDSTObserved(enteredDateTime.getFullYear())){var ambigousDates=MP_Timezone.getAmbiguousEndDates(MP_Timezone.getDstSwitches(enteredDateTime.getFullYear()));
var from=new Date(ambigousDates.dst_trans_day_start);
var to=new Date(ambigousDates.dst_trans_day_end);
if(enteredDateTime>from&&enteredDateTime<=to){$("#"+formId+" .timezone-container").css("display","inline-block");
if(!hideAmbiguousDateMessage){$("#"+formId+" .ambiguous-date-container").show();
}}else{$("#"+formId+" .timezone-container").hide();
$("#"+formId+" .ambiguous-date-container").hide();
}}};
CommunicationEventsWF.prototype.initializeDateSelector=function(dateTime){var component=this,$datePicker=component.$sidePanelContainer.find(".date-container .date-input");
var datepickerOptions={dateFormat:this.i18n.DATE_PICKER_FORMAT,showOn:"both",buttonImage:CERN_static_content+"/images/4974.png",buttonImageOnly:true,changeMonth:true,changeYear:true};
$datePicker.datepicker(datepickerOptions);
if(dateTime){$datePicker.datepicker("setDate",new Date(dateTime));
}else{$datePicker.datepicker("setDate",new Date());
}};
CommunicationEventsWF.prototype.initializeTimeSelector=function(dateTime){var component=this,$timePicker=component.$sidePanelContainer.find(".time-container .time-input"),timepickerOptions={timeFormat:this.i18n.TIME_FORMAT,step:15};
$timePicker.timepicker(timepickerOptions);
if(dateTime){$timePicker.timepicker("setTime",new Date(dateTime));
}else{$timePicker.timepicker("setTime",new Date());
}component.$sidePanelContainer.find(".wfHcmCommEvents-clock-icon").click(function(){$timePicker.timepicker("show");
});
};
CommunicationEventsWF.prototype.setClickHandlersForAdd=function(){var component=this;
var componentId=component.getComponentId();
$("#"+componentId+"-add-communication-btn").click(function(){if(component.addFormValidator.isFormValid()){MP_Util.LoadSpinner("sidePanelContents"+component.getComponentId(),1);
component.addCommunicationEvent();
}});
$("#"+componentId+"-cancel-add-communication-btn").click(function(){component.sidePanelAdd.hidePanel();
component.stretchTable();
});
};
CommunicationEventsWF.prototype.findValue=function(array,predicateFunction){var valueToReturn;
var index=0;
for(index=0;
index<array.length;
index++){if(predicateFunction(array[index],index)){valueToReturn=array[index];
break;
}}return valueToReturn;
};
CommunicationEventsWF.prototype.setDefaultContactedField=function(currentRow){var component=this;
var parentCodeValues=component.getParentDetails(currentRow.PERSON_ROLE_CD);
var selectedParentCodeValue=component.findValue(parentCodeValues,function(parentCodeValue){return parentCodeValue.CODE_SET===component.ROLE_TYPE_CODE_SET;
});
if(selectedParentCodeValue){switch(selectedParentCodeValue.CDF_MEANING){case"PERSONNEL":component.renderPersonnelSearchMarkup(currentRow);
break;
case"PTADVOCATE":component.renderPatientAdvocateFieldMarkup(currentRow);
break;
case"PATIENT":component.renderPatientFieldMarkup();
break;
default:break;
}}component.resizeSidePanel();
};
CommunicationEventsWF.prototype.flexTypeByMethod=function(currentRow){var component=this;
if(typeof currentRow==="undefined"){component.$sidePanelContainer.find('span.radio, label[for="type"]').hide();
component.$sidePanelContainer.find('label[for="outcome"], select[name="outcome"]').hide();
}else{if(!currentRow.TYPE_CD){component.$sidePanelContainer.find('span.radio, label[for="type"]').hide();
}}component.$sidePanelContainer.find('select[name="method"]').change(function(){component.$sidePanelContainer.find('input[name="typeRadio"]').prop("checked",false);
component.$sidePanelContainer.find("#outcome").remove();
component.$sidePanelContainer.find("#type").remove();
component.determineSelectedMethod();
});
component.$sidePanelContainer.find("input[name=typeRadio]:radio").change(function(){var selectedTypeCode=Number(component.$sidePanelContainer.find("input[type=radio]:checked").val());
component.buildFlexedOutcomes(selectedTypeCode);
});
};
CommunicationEventsWF.prototype.determineSelectedMethod=function(){var component=this;
var selectedMethodCode=component.$sidePanelContainer.find('select[name="method"]').val();
if(selectedMethodCode===""){component.$sidePanelContainer.find('span.radio, label[for="type"]').hide();
component.$sidePanelContainer.find('label[for="outcome"], select[name="outcome"]').hide();
return;
}component.selectViewFromMethod(Number(selectedMethodCode));
};
CommunicationEventsWF.prototype.selectViewFromMethod=function(selectedMethodCode){var component=this;
var typeCodeSet=component.getCodeSetArray(component.TYPE_CODE_SET);
var parentCodeValues=component.getParentDetails(typeCodeSet[0].CODE_VALUES[0].CODE_VALUE);
var showType=component.findValue(parentCodeValues,function(parentCodeValue){return parentCodeValue.CODE_VALUE===selectedMethodCode;
})!==undefined;
if(showType){component.$sidePanelContainer.find('span.radio, label[for="type"]').show();
component.$sidePanelContainer.find('label[for="outcome"], select[name="outcome"]').hide();
}else{component.$sidePanelContainer.find('span.radio, label[for="type"]').hide();
component.buildFlexedOutcomes(selectedMethodCode);
}};
CommunicationEventsWF.prototype.buildFlexedOutcomes=function(selectedCode){var component=this;
var codeSetArray=component.getCodeSetArray();
var outcomesToDisplay=component.buildOutcomesToDisplay(codeSetArray,selectedCode);
var $outcomeSelecter=component.$sidePanelContainer.find('select[name="outcome"]');
var outcomes='<option value=""></option>';
$.each(outcomesToDisplay,function(_,value){outcomes+='<option value="'+value.CODE_VALUE+'">'+value.DISPLAY+"</option>";
});
$outcomeSelecter.empty().append(outcomes);
component.$sidePanelContainer.find('label[for="outcome"], select[name="outcome"]').show();
component.resizeSidePanel();
};
CommunicationEventsWF.prototype.buildTypeRadio=function(currentTypeCode){var component=this;
var radioHTML="";
var codeSetArray=component.getCodeSetArray(component.TYPE_CODE_SET);
$.each(codeSetArray[0].CODE_VALUES,function(_,value){if(currentTypeCode===value.CODE_VALUE){radioHTML+='<input type="radio" value = "'+value.CODE_VALUE+'" name="typeRadio" checked="checked"/> <label for="'+value.DISPLAY+'">'+value.DISPLAY+"</label>";
}else{radioHTML+='<input type="radio" value = "'+value.CODE_VALUE+'" name="typeRadio"/> <label for="'+value.DISPLAY+'">'+value.DISPLAY+"</label>";
}});
return radioHTML;
};
CommunicationEventsWF.prototype.isCurrentCodeValueInactive=function(currCodeValue){var component=this;
var codeValueInactive=true;
$.each(component.clonedCodeSets,function(index1,codeSet){$.each(codeSet.CODE_VALUES,function(index2,codeVal){if(codeVal.CODE_VALUE===currCodeValue){codeValueInactive=false;
}});
});
return codeValueInactive;
};
CommunicationEventsWF.prototype.getCodeSetArray=function(codeSetToMap){var component=this;
var codeSetArray=null;
var codeSets=component.clonedCodeSets||component.codeSets;
codeSetToMap=codeSetToMap||component.OUTCOME_CODE_SET;
codeSetArray=$.grep(codeSets,function(codeSet){return codeSet.CODE_SET===codeSetToMap;
});
return codeSetArray;
};
CommunicationEventsWF.prototype.buildOutcomesToDisplay=function(codeSetArray,typeCode){var component=this;
var outcomesToDisplay=[];
$.each(codeSetArray[0].CODE_VALUES,function(index1,value){var parentCodeValues=component.getParentDetails(value.CODE_VALUE);
$.each(parentCodeValues,function(index2,parentValue){if(parentValue.CODE_VALUE===typeCode){outcomesToDisplay.push(value);
}});
});
return outcomesToDisplay;
};
CommunicationEventsWF.prototype.flexNameByRoleType=function(currentRow){var component=this;
if(currentRow){component.setDefaultContactedField(currentRow);
}component.$sidePanelContainer.find('select[name="role"]').change(function(){component.$sidePanelContainer.find("#contacted_person, #personnel-not-found, #personnel-name-details").hide();
component.personnelSearchControl.setSelectedProvider(0,"");
var parentCodeValues=component.getParentDetails(parseInt(this.value,10));
var selectedParentCodeValue=component.findValue(parentCodeValues,function(parentCodeValue){return parentCodeValue.CODE_SET===component.ROLE_TYPE_CODE_SET;
});
if(selectedParentCodeValue){switch(selectedParentCodeValue.CDF_MEANING){case"PERSONNEL":component.renderPersonnelSearchMarkup();
break;
case"PTADVOCATE":component.renderPatientAdvocateFieldMarkup();
break;
case"PATIENT":component.renderPatientFieldMarkup();
break;
default:break;
}}component.resizeSidePanel();
});
};
CommunicationEventsWF.prototype.initializeContactedField=function(){var component=this;
var contactedHTML=$('<div id="personnel-name-details"><label>'+component.i18n.PERSONNEL_SEARCH+'</label><input type="text" class="searchText" name="personnel_search" id="personnel-search"><br></div><div id="personnel-not-found"><input type="checkbox" name="personnel_not_found">'+component.i18n.PERSONNEL_NOT_FOUND+'</div><div id="contacted_person"><label>'+component.i18n.CONTACT_NAME+'</label><input type="text" maxlength="75" name="contacted_person_name"></div>');
component.$sidePanelContainer.find("#contacted-field").append(contactedHTML);
var personnelSearchControl=new ProviderSearchControl(component.$sidePanelContainer.find("#personnel-search").get(0));
component.$sidePanelContainer.find("#contacted_person, #personnel-not-found, #personnel-name-details").hide();
return personnelSearchControl;
};
CommunicationEventsWF.prototype.renderPersonnelSearchMarkup=function(currentRow){var component=this;
var personnelDetails=component.$sidePanelContainer.find("#personnel-name-details");
var personnelNotFound=component.$sidePanelContainer.find("#personnel-not-found");
var personnelNotFoundInput=component.$sidePanelContainer.find('input:checkbox[name="personnel_not_found"]');
var contactedPersonNameInput=component.$sidePanelContainer.find('input[name="contacted_person_name"]');
var contactedPersonId=component.$sidePanelContainer.find('input[name="contacted_person_id"]');
var personnelSearchInput=component.$sidePanelContainer.find('input[name="personnel_search"]');
personnelDetails.show();
personnelNotFound.show();
personnelSearchInput.prop("disabled",false);
personnelNotFoundInput.prop("checked",false);
contactedPersonNameInput.val("").prop("disabled",false);
contactedPersonId.remove();
if(currentRow){if(currentRow.CONTACTED_PERSONNEL.ID===0){if(currentRow.CONTACTED_PERSON_NAME){personnelSearchInput.prop("disabled",true);
personnelNotFoundInput.prop("checked",true);
contactedPersonNameInput.val(currentRow.CONTACTED_PERSON_NAME);
component.toggleContactName();
}}else{component.personnelSearchControl.setSelectedProvider(currentRow.CONTACTED_PERSONNEL.ID,currentRow.CONTACTED_PERSONNEL.FULL_NAME);
}}personnelNotFoundInput.click(function(){component.togglePersonnelSearch(personnelNotFoundInput.is(":checked"));
component.resizeSidePanel();
});
};
CommunicationEventsWF.prototype.renderPatientAdvocateFieldMarkup=function(currentRow){var component=this;
component.$sidePanelContainer.find("#contacted_person").show();
component.$sidePanelContainer.find('input[name="contacted_person_name"]').val("").prop("disabled",false);
component.$sidePanelContainer.find('input[name="contacted_person_id"]').remove();
if(currentRow){component.$sidePanelContainer.find('input[name="contacted_person_name"]').val(currentRow.CONTACTED_PERSON_NAME);
}};
CommunicationEventsWF.prototype.renderPatientFieldMarkup=function(){var component=this;
var personIdHTML=$('<input type="hidden" name="contacted_person_id" value="'+component.criterion.person_id+'"></div>');
component.$sidePanelContainer.find("#contacted_person").show();
component.$sidePanelContainer.find('input[name="contacted_person_name"]').val(component.criterion.getPatientInfo().getName()).prop("disabled",true);
component.$sidePanelContainer.find("#contacted_person").append(personIdHTML);
};
CommunicationEventsWF.prototype.getParentDetails=function(codeValue){var parentCodeValues=[];
var component=this;
var codeSets=component.clonedCodeSets||component.codeSets;
$(codeSets).each(function(index1,codeSet){$(codeSet.CODE_VALUES).each(function(index2,currentCodeValue){if(currentCodeValue.CODE_VALUE===codeValue){for(var i=0;
i<currentCodeValue.PARENTS.length;
i++){parentCodeValues.push({CDF_MEANING:currentCodeValue.PARENTS[i].CDF_MEANING,CODE_VALUE:currentCodeValue.PARENTS[i].CODE_VALUE,CODE_SET:currentCodeValue.PARENTS[i].CODE_SET});
}}});
});
return parentCodeValues;
};
CommunicationEventsWF.prototype.togglePersonnelSearch=function(personnelNotFound){var component=this;
if(personnelNotFound){var capTimer=new CapabilityTimer("CAP:MPG COMMUNICATION EVENTS CHECKED PERSONNEL NOT FOUND");
capTimer.capture();
component.$sidePanelContainer.find('input[name="personnel_search"]').prop("disabled",true);
component.personnelSearchControl.setSelectedProvider(0,"");
component.$sidePanelContainer.find("#contacted_person").show();
}else{component.$sidePanelContainer.find('input[name="personnel_search"]').prop("disabled",false);
component.$sidePanelContainer.find('input[name="contacted_person_name"]').val("");
component.$sidePanelContainer.find("#contacted_person").hide();
}};
CommunicationEventsWF.prototype.toggleContactName=function(){var component=this;
component.$sidePanelContainer.find('input[name="personnel_search"]').prop("disabled",true);
component.personnelSearchControl.setSelectedProvider(0,"");
component.$sidePanelContainer.find("#contacted_person").show();
};
CommunicationEventsWF.prototype.stretchTable=function(){this.$tableView.width("100%");
};
CommunicationEventsWF.prototype.shrinkTable=function(){this.$tableView.width("60%");
};
CommunicationEventsWF.prototype.resizeSidePanel=function(){var component=this;
var $spContectSection=component.$sidePanelContainer.find('div[class="sp-content-section sp-add-scroll"]');
var scrollPosition=$spContectSection.scrollTop();
if(component.sidePanelAdd){component.sidePanelAdd.collapseSidePanel();
component.sidePanelAdd.expandSidePanel();
}if(component.sidePanelView){component.sidePanelView.collapseSidePanel();
component.sidePanelView.expandSidePanel();
}if(component.sidePanelEdit){component.sidePanelEdit.collapseSidePanel();
component.sidePanelEdit.expandSidePanel();
}$(window).resize(function(){component.$sidePanelContainer.find(".date-container .date-input").datepicker("hide");
component.$sidePanelContainer.find(".time-container .time-input").timepicker("hide");
});
component.$sidePanelContainer.find(".wfHcmCommEvents-sec .sp-expand-collapse").removeClass("hidden");
if($spContectSection.scrollTop()!==scrollPosition){$spContectSection.scrollTop(scrollPosition);
}};
CommunicationEventsWF.prototype.renderComponent=function(reply){var component=this;
var numberResults=0;
var displayNumber=null;
var communicationHTML="";
var $mainContainerObj=null;
var $tableView=null;
var $sidePanelContainer=null;
var compNS=component.getStyles().getNameSpace();
var componentId=component.getComponentId();
numberResults=reply.COMM_EVENTS.length;
displayNumber="("+numberResults+")";
component.resultCount=numberResults;
$mainContainerObj=$('<div id="'+componentId+'-main-container" class="'+compNS+'-main-container">');
$tableView=$('<div id="'+componentId+'-table-view" class="'+compNS+'-communication-table"/>');
$sidePanelContainer=$('<div id="'+componentId+'-side-panel-container" class="'+compNS+'-sidepanel-container"/>');
component.formatDataForTableDisplay(reply.COMM_EVENTS);
component.communicationTable=component.getCommunicationTable();
component.hasModifyCommEventInd=reply.HAS_MODIFY_COMM_EVENT_IND;
component.communicationTable.bindData(reply.COMM_EVENTS);
component.setComponentTable(component.communicationTable);
component.addCellClickExtension();
$tableView.append($(component.communicationTable.render()));
$mainContainerObj.append($tableView,$sidePanelContainer);
communicationHTML+=$mainContainerObj[0].outerHTML;
component.finalizeComponent(communicationHTML,displayNumber);
component.$tableView=$("#"+componentId+"-table-view");
component.$sidePanelContainer=$("#"+componentId+"-side-panel-container");
component.codeSets=reply.CODE_SETS;
CERN_EventListener.fireEvent(component,component,EventListener.EVENT_COUNT_UPDATE,{count:numberResults});
};
MP_Util.setObjectDefinitionMapping("WF_COMMUNICATION_EVENTS",CommunicationEventsWF);
