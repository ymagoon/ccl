function AddPregnancyComponentWFStyle(){this.initByNamespace("ap-wf");
}AddPregnancyComponentWFStyle.prototype=new ComponentStyle();
AddPregnancyComponentWFStyle.prototype.constructor=ComponentStyle;
function AddPregnancyWF(criterion){this.setCriterion(criterion);
this.setStyles(new AddPregnancyComponentWFStyle());
this.setComponentLoadTimerName("USR:MPG.ADDPREGNANCY.O2 - load component");
this.setComponentRenderTimerName("ENG:MPG.ADDPREGNANCY.O2 - render component");
this.setResourceRequired(true);
this.isPatientPregnant=true;
this.pregnancyActionSelected=false;
CERN_EventListener.addListener(this,"pregnancyInfoAvailable",this.retrieveComponentData,this);
}AddPregnancyWF.prototype=new MPageComponent();
AddPregnancyWF.prototype.constructor=MPageComponent;
MP_Util.setObjectDefinitionMapping("WF_PREG_ADD_PREGNANCY",AddPregnancyWF);
AddPregnancyWF.prototype.RetrieveRequiredResources=function(){var pregInfoSR=MP_Resources.getSharedResource("pregnancyInfo");
if(pregInfoSR&&pregInfoSR.isResourceAvailable()){this.retrieveComponentData();
}else{PREGNANCY_BASE_UTIL_O1.LoadPregnancyData(this.getCriterion());
}};
AddPregnancyWF.prototype.openTab=function(){this.pregnancyActionSelected=true;
var success=PREGNANCY_BASE_UTIL_O1.addOrReopenPregnancy(0);
if(success===0){this.pregnancyActionSelected=false;
}};
AddPregnancyWF.prototype.reopenLastActivePregnancy=function(){this.pregnancyActionSelected=true;
var success=PREGNANCY_BASE_UTIL_O1.addOrReopenPregnancy(1);
if(success===0){this.pregnancyActionSelected=false;
}};
AddPregnancyWF.prototype.retrieveComponentData=function(){var timerUsrComponent=MP_Util.CreateTimer(this.getComponentLoadTimerName(),this.getCriterion().category_mean);
try{var addPregnancyi18n=i18n.discernabu.addpregnancy_o2;
var criterion=this.getCriterion();
var messageHTML="";
var compId=this.getComponentId();
var component=this;
var pregInfoSR=MP_Resources.getSharedResource("pregnancyInfo");
var pregInfoObj=null;
var pregnancyId=0;
var patientGenderInfo=criterion.getPatientInfo().getSex();
if(patientGenderInfo===null||patientGenderInfo.meaning===null||patientGenderInfo.meaning!=="FEMALE"){messageHTML="<span class='res-none'>"+addPregnancyi18n.NOT_FEMALE+"</span>";
this.finalizeComponent(messageHTML,"");
return;
}if(pregInfoSR&&pregInfoSR.isResourceAvailable()){pregInfoObj=pregInfoSR.getResourceData();
pregnancyId=pregInfoObj.getPregnancyId();
if(pregnancyId===-1){messageHTML="<span class='res-none'>"+addPregnancyi18n.PREG_DATA_ERROR+"</span>";
this.finalizeComponent(messageHTML,"");
return;
}var slaTimer=MP_Util.CreateTimer("CAP:MPG.ADDPREGNANCY.O2 - Rendering component");
if(slaTimer){slaTimer.SubtimerName=criterion.category_mean;
slaTimer.Stop();
}if(!pregnancyId){messageHTML="<span class='res-none'>"+addPregnancyi18n.PREGNANCY_NOT_FOUND+"&nbsp;<a href=# class='ap-wf-info-hl' id='addAPregnancy"+compId+"'>"+addPregnancyi18n.ADD_A_PREGNANCY+"</a> or <a id='reopenLAP"+compId+"'>"+addPregnancyi18n.REOPEN_LAP+"</a></span>";
this.finalizeComponent(messageHTML,"");
var addPregObj=$("#addAPregnancy"+compId);
addPregObj.click(function(){component.openTab();
});
var reopenPregObj=$("#reopenLAP"+compId);
reopenPregObj.click(function(){var reopenInd=pregInfoObj.getReopenPregInd();
if(reopenInd){component.reopenLastActivePregnancy();
}});
this.isPatientPregnant=false;
return;
}messageHTML="<span class='res-none'>"+addPregnancyi18n.ACTIVE_PREGNANCY_FOUND+"</span>";
this.finalizeComponent(messageHTML,"");
if(this.pregnancyActionSelected){if(!this.isPatientPregnant){this.isPatientPregnant=true;
CERN_Platform.refreshMPage();
}}else{this.pregnancyActionSelected=false;
}return;
}messageHTML="<span class='res-none'>"+addPregnancyi18n.PREG_DATA_ERROR+"</span>";
this.finalizeComponent(messageHTML,"");
return;
}catch(err){MP_Util.LogJSError(err,this,"add-pregnancy.js","retrieveComponentData");
if(timerUsrComponent){timerUsrComponent.Abort();
timerUsrComponent=null;
}throw (err);
}finally{if(timerUsrComponent){timerUsrComponent.Stop();
}}};
