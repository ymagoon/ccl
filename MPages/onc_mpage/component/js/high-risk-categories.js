function HighRiskCategoriesComponentStyle(){this.initByNamespace("hrc");
}HighRiskCategoriesComponentStyle.inherits(ComponentStyle);
function HighRiskCategoriesComponent(criterion){this.setCriterion(criterion);
this.setStyles(new HighRiskCategoriesComponentStyle());
this.setComponentLoadTimerName("USR:MPG.HIGH_RISK_CATEGORIES - load component");
this.setComponentRenderTimerName("ENG:MPG.HIGH_RISK_CATEGORIES - render component");
this.setIncludeLineNumber(true);
this.setScope(0);
var totalRecordsCount=null;
function displayClinicalLabEvents(component,clinicalEventDetails,htmlContainer){var totalEvents=clinicalEventDetails.COLCELABCNT;
var currentEvent=null;
var currentCDFMeaning=null;
var currentCSSClass=null;
var htmlString="";
var imageMap=component.getImageMap();
for(var eventIndex=0;
eventIndex<totalEvents;
eventIndex++){currentEvent=clinicalEventDetails.COLCELABQUAL[eventIndex];
currentCDFMeaning=currentEvent.CELABCDFMEANING.toUpperCase();
htmlString+='<span title="'+currentEvent.CELABEVENTDISP+'"><b>'+currentEvent.CELABEVENTDISP+":</b></span>";
if(component.CSSMap.hasOwnProperty(currentCDFMeaning)){currentCSSClass=component.CSSMap[currentCDFMeaning];
if(imageMap.hasOwnProperty(currentCDFMeaning)){htmlString+='<img src="'+imageMap[currentCDFMeaning]+'"></img>';
}}else{currentCSSClass=component.CSSMap.DEFAULT;
}var roundedLabResults=component.getLocalizedNumber(currentEvent.CELABRESVALUE);
var labEventDetails=roundedLabResults+" "+currentEvent.CELABRESUNIT+";";
var dateString=component.getLocalizedDate(currentEvent.CELABDT);
htmlString+='<span class="'+currentCSSClass+'" title="'+labEventDetails+" "+dateString+'">'+labEventDetails+'</span><span title="'+dateString+'"><i>'+dateString+"</i></span><br/>";
}htmlContainer.push(htmlString);
}function displayLaboratoryEvents(component,labEvents,htmlContainer){var totalEvents=labEvents.COLLABCNT;
var currentEvent=null;
var currentCDFMeaning=null;
var currentCSSClass=null;
var isLabHigh=false;
var isLabLow=false;
var htmlString="";
var imageMap=component.getImageMap();
for(var eventIndex=0;
eventIndex<totalEvents;
eventIndex++){currentEvent=labEvents.COLLABQUAL[eventIndex];
currentCDFMeaning=currentEvent.LABCDFMEANING.toUpperCase();
isLabHigh=currentEvent.LABHIGH;
isLabLow=currentEvent.LABLOW;
htmlString+='<span title="'+currentEvent.LABEVENTDISP+'"><b>'+currentEvent.LABEVENTDISP+":</b></span>";
if(isLabHigh){currentCDFMeaning="HIGH";
}else{if(isLabLow){currentCDFMeaning="LOW";
}}if(component.CSSMap.hasOwnProperty(currentCDFMeaning)){currentCSSClass=component.CSSMap[currentCDFMeaning];
if(imageMap.hasOwnProperty(currentCDFMeaning)){htmlString+='<img src="'+imageMap[currentCDFMeaning]+'"></img>';
}}else{currentCSSClass=component.CSSMap.DEFAULT;
}var roundedLabValue=component.getLocalizedNumber(currentEvent.LABRESVALUE);
var labEventDetails=roundedLabValue+" "+currentEvent.LABRESUNIT+";";
var dateString=component.getLocalizedDate(currentEvent.LABDT);
htmlString+='<span class="'+currentCSSClass+'" title="'+labEventDetails+" "+dateString+'">'+labEventDetails+'</span><span title="'+dateString+'"> '+dateString+"</span><br/>";
}htmlContainer.push(htmlString);
}function displayAdministrationEvents(component,adminEventDetails,htmlContainer){var totalAdminEvents=adminEventDetails.COLADMEVENTCNT;
var currentEvent=null;
var currentEventDetail=null;
var currentEventHeader=null;
var dateString="";
var htmlString="";
var roundedValue="";
for(var eventIndex=0;
eventIndex<totalAdminEvents;
eventIndex++){currentEvent=adminEventDetails.COLADMEVENTQUAL[eventIndex];
currentEventHeader=currentEvent.COLADMEVENTDISP+": ";
roundedValue=component.getLocalizedNumber(currentEvent.COLADMEVENTVALUE);
currentEventDetail=roundedValue+" "+currentEvent.COLADMEVENTUNIT+"; "+currentEvent.COLADMEVENTROUTE+"; "+currentEvent.COLADMEVENTSITE+"; ";
dateString=component.getLocalizedDate(currentEvent.COLADMEVENTDT);
htmlString+='<span title="'+currentEventHeader+currentEventDetail+dateString+'"><b>'+currentEventHeader+" </b>"+currentEventDetail+"<i>"+dateString+"</i></span><br/>";
}htmlContainer.push(htmlString);
}function displayOrders(orderDetails,htmlContainer){var totalOrders=orderDetails.COLORDCNT;
var currentOrder=null;
var currentOrderDetail=null;
var htmlString="";
for(var orderIndex=0;
orderIndex<totalOrders;
orderIndex++){currentOrder=orderDetails.COLORDQUAL[orderIndex];
currentOrderDetail=currentOrder.COLORDEVENTDISP+": "+currentOrder.COLORDSIMPCLINDISP;
htmlString+='<span title="'+currentOrderDetail+'"><b>'+currentOrder.COLORDEVENTDISP+" </b>"+currentOrder.COLORDSIMPCLINDISP+"</span><br/>";
}htmlContainer.push(htmlString);
}function displaySynonyms(synonymDetails,htmlContainer){var totalSynonyms=synonymDetails.COLSYNCNT;
var currentSynonym=null;
var currentSynonymDetail=null;
var htmlString="";
for(var synonymIndex=0;
synonymIndex<totalSynonyms;
synonymIndex++){currentSynonym=synonymDetails.COLSYNQUAL[synonymIndex];
currentSynonymDetail=currentSynonym.COLSYNEVENTDISP+": "+currentSynonym.COLSYNSIMPCLINDISP;
htmlString+='<span title="'+currentSynonymDetail+'"><b>'+currentSynonym.COLSYNEVENTDISP+": </b>"+currentSynonym.COLSYNSIMPCLINDISP+"</span><br/>";
}htmlContainer.push(htmlString);
}function displayDrugClasses(drugClassDetails,htmlContainer){var totalDrugClasses=drugClassDetails.COLDRUGCNT;
var currentDrugClass=null;
var currentDrugClassDetail=null;
var htmlString="";
for(var drugClassIndex=0;
drugClassIndex<totalDrugClasses;
drugClassIndex++){currentDrugClass=drugClassDetails.COLDRUGQUAL[drugClassIndex];
currentDrugClassDetail=currentDrugClass.COLDRUGEVENTDISP+": "+currentDrugClass.COLDRUGSIMPCLINDISP;
htmlString+='<span title="'+currentDrugClassDetail+'"><b>'+currentDrugClass.COLDRUGEVENTDISP+": </b>"+currentDrugClass.COLDRUGSIMPCLINDISP+"</span><br/>";
}htmlContainer.push(htmlString);
}function displayMicroBiologyResults(component,hrcI18n,microBioDetails,htmlContainer){var totalMicroBioResults=microBioDetails.COLMBRESCNT;
var currentMicroBioResult=null;
var htmlString="";
var normalcyCdRedClass="";
var localizedDateString="";
var tempString="";
for(var microBioIndex=0;
microBioIndex<totalMicroBioResults;
microBioIndex++){currentMicroBioResult=microBioDetails.COLMBRESQUAL[microBioIndex];
if(currentMicroBioResult.NORMALCYCDRED){normalcyCdRedClass="hrc-micro-severe";
}else{normalcyCdRedClass="";
}tempString=currentMicroBioResult.SOURCETYPECDDISP+"/"+currentMicroBioResult.BODYSITECDDISP;
htmlString+='<span class="hrc-bold '+normalcyCdRedClass+'"title="'+tempString+'">';
htmlString+=tempString;
tempString=currentMicroBioResult.NORMALCYCDDISP+" "+currentMicroBioResult.ORGANISMCDDISP+" "+currentMicroBioResult.RESULTSTATUSCDDISP+" ";
htmlString+=': </span><span title="'+tempString+'">';
htmlString+=tempString;
htmlString+="<a href=\"javascript:MPAGES_EVENT('CLINICALNOTE','";
htmlString+=currentMicroBioResult.PERSONID+"|"+currentMicroBioResult.ENCOUNTERID+"|"+currentMicroBioResult.EVENTID;
htmlString+="|"+hrcI18n.CNVIEWER+'|31||0||0\');" title="';
htmlString+=hrcI18n.HCLINKCLICK;
if(normalcyCdRedClass==""){normalcyCdRedClass='class="hrc-link-text"';
}else{normalcyCdRedClass="class=hrc-micro-severe";
}htmlString+='" '+normalcyCdRedClass+">";
htmlString+=component.getLocalizedDate(currentMicroBioResult.EVENTENDDTTMDISP);
htmlString+="</a>";
htmlString+="</span><br/>";
}htmlContainer.push(htmlString);
}function displayProblems(problemDetails,htmlContainer){var totalProblems=problemDetails.COLPROBLEMCNT;
var currentProblemInfo=null;
var htmlString="";
var tempString="";
for(var problemIndex=0;
problemIndex<totalProblems;
problemIndex++){currentProblemInfo=problemDetails.COLPROBLEMQUAL[problemIndex];
if(currentProblemInfo.COLPROBLEMAD!=""){tempString=currentProblemInfo.COLPROBLEMAD;
}else{tempString=currentProblemInfo.COLPROBLEMSOURCEST;
}htmlString+='<span class="hrc-bold" title="'+tempString+'">';
htmlString+=tempString;
htmlString+="</span> ";
if(currentProblemInfo.COLPROBLEMSOURCEID!=""){htmlString+="("+currentProblemInfo.COLPROBLEMSOURCEID+")";
}htmlString+="<br/>";
}htmlContainer.push(htmlString);
}function displayDiagnosis(diagnosisDetails,htmlContainer){var totalDiagnosisResults=diagnosisDetails.COLDIAGNOSCNT;
var currentDiagnosisInfo=null;
var htmlString="";
var tempString="";
for(var diagnosisIndex=0;
diagnosisIndex<totalDiagnosisResults;
diagnosisIndex++){currentDiagnosisInfo=diagnosisDetails.COLDIAGNOSQUAL[diagnosisIndex];
if(currentDiagnosisInfo.COLDIAGNOSDISPLAY!=""){tempString=currentDiagnosisInfo.COLDIAGNOSDISPLAY;
}else{tempString=currentDiagnosisInfo.COLDIAGNOSSOURCEST;
}htmlString+='<span class="hrc-bold" title="'+tempString+'">';
htmlString+=tempString;
htmlString+=" </span>";
if(currentDiagnosisInfo.COLDIAGNOSSOURCEID!=""){htmlString+="("+currentDiagnosisInfo.COLDIAGNOSSOURCEID+")";
}htmlString+="<br/>";
}htmlContainer.push(htmlString);
}function displayDocuments(component,documentDetails,htmlContainer){var totalDocuments=documentDetails.COLDOCCNT;
var documentDisplayLimit=documentDetails.COLDOCTYPECNT;
var currentDocumentInfo=null;
var htmlString="";
var currentDocDate=null;
var previousDocDate=null;
var currentDocEventCd=0;
var previousDocEventCd=0;
var renderDocument=false;
var renderedDocumentCount=0;
for(var documentIndex=0;
documentIndex<totalDocuments;
documentIndex++){currentDocumentInfo=documentDetails.COLDOCQUAL[documentIndex];
currentDocEventCd=currentDocumentInfo.COLDOCEVENTCD;
currentDocDate=component.getLocalizedDate(currentDocumentInfo.COLDOCDTDISP);
if(previousDocEventCd==currentDocEventCd&&currentDocDate==previousDocDate){continue;
}else{renderedDocumentCount++;
renderDocument=true;
}if(renderDocument){if(renderedDocumentCount<=documentDisplayLimit){htmlString+='<span class="hrc-bold" title="'+currentDocumentInfo.COLDOCDISP+'">';
htmlString+=currentDocumentInfo.COLDOCDISP;
htmlString+=": </span>";
htmlString+=currentDocumentInfo.COLDOCAUTHOR;
htmlString+='<span class="hrc-italic" title="'+currentDocDate+'"> ';
htmlString+=currentDocDate;
htmlString+="</span><br/>";
}else{break;
}}previousDocEventCd=currentDocEventCd;
previousDocDate=currentDocDate;
renderDocument=false;
}htmlContainer.push(htmlString);
}function displayTasks(component,taskDetails,htmlContainer){var totalTasks=taskDetails.COLTASKCNT;
var taskInfo=null;
var htmlString="";
var localizedDateString="";
for(var taskIndex=0;
taskIndex<totalTasks;
taskIndex++){taskInfo=taskDetails.COLTASKQUAL[taskIndex];
htmlString+='<span class="hrc-bold" title="'+taskInfo.COLTASKDISP+'">';
htmlString+=taskInfo.COLTASKDISP;
htmlString+=": </span>";
htmlString+=taskInfo.COLTASKSIMPDISP;
localizedDateString=component.getLocalizedDate(taskInfo.COLTASKDTDISP);
htmlString+='<span class="hrc-italic" title="'+localizedDateString+'"> ';
htmlString+=localizedDateString;
htmlString+="</span><br/>";
}htmlContainer.push(htmlString);
}function displayAlerts(component,alertDetails,htmlContainer){var totalAlerts=alertDetails.COLALERTCNT;
var alertInfo=null;
var htmlString="";
var localizedDateString="";
for(var alertIndex=0;
alertIndex<totalAlerts;
alertIndex++){alertInfo=alertDetails.COLALERTQUAL[alertIndex];
htmlString+='<span class="hrc-bold" title="'+alertInfo.COLALERTDISPLAYNAME+'">';
htmlString+=alertInfo.COLALERTDISPLAYNAME;
localizedDateString=component.getLocalizedDate(alertInfo.COLALERTDATETIME);
htmlString+=' </span><span class="hrc-italic" title="'+localizedDateString+'">';
htmlString+=localizedDateString;
htmlString+="</span><br/>";
}htmlContainer.push(htmlString);
}this.getTotalRecords=function(recordData){if(totalRecordsCount!=null){return totalRecordsCount;
}var columnCount=recordData.COLCNT;
var record=null;
totalRecordsCount=0;
for(var index=0;
index<columnCount;
index++){record=recordData.COLQUAL[index];
if(this.isDataRow(record)){totalRecordsCount++;
}}return totalRecordsCount;
};
this.isDataRow=function(record){var isValidDataRow=false;
if((record.COLMBRESCNT+record.COLCELABCNT+record.COLLABCNT+record.COLADMEVENTCNT+record.COLORDCNT+record.COLSYNCNT+record.COLDRUGCNT+record.COLPROBLEMCNT+record.COLDIAGNOSCNT+record.COLALERTCNT+record.COLTASKCNT+record.COLDOCCNT)){isValidDataRow=true;
}return isValidDataRow;
};
this.displayData=function(recordData,hrcI18n){var totalRecords=this.getTotalRecords(recordData);
var htmlContainer=[];
var htmlString='<div class="content-body hrc-container">';
htmlString+='<table id="hrcTable'+this.getComponentId()+'" cellpadding="0" cellspacing="0" class="hrc-datatable">';
htmlString+="<colgroup><col><col></colgroup><tbody>";
htmlContainer.push(htmlString);
if(totalRecords==0){htmlContainer.push('<tr><td colspan="2">');
htmlContainer.push("<span class='res-none'>"+hrcI18n.NO_RECORDS_MSG+"</span>");
htmlContainer.push("</td></tr>");
}else{var className="odd";
var count=recordData.COLCNT;
var validRowCount=0;
for(var rowIndex=0;
rowIndex<count;
rowIndex++){currentRecordDetails=recordData.COLQUAL[rowIndex];
if(!this.isDataRow(currentRecordDetails)){continue;
}validRowCount++;
className=(validRowCount%2==0?"even":"odd");
htmlContainer.push('<tr class="'+className+'"><td class="hrc-column">'+currentRecordDetails.COLNAME+'</td><td class="hrc-data">');
displayMicroBiologyResults(this,hrcI18n,currentRecordDetails,htmlContainer);
displayClinicalLabEvents(this,currentRecordDetails,htmlContainer);
displayLaboratoryEvents(this,currentRecordDetails,htmlContainer);
displayAdministrationEvents(this,currentRecordDetails,htmlContainer);
displayOrders(currentRecordDetails,htmlContainer);
displaySynonyms(currentRecordDetails,htmlContainer);
displayDrugClasses(currentRecordDetails,htmlContainer);
displayProblems(currentRecordDetails,htmlContainer);
displayDiagnosis(currentRecordDetails,htmlContainer);
displayDocuments(this,currentRecordDetails,htmlContainer);
displayTasks(this,currentRecordDetails,htmlContainer);
displayAlerts(this,currentRecordDetails,htmlContainer);
htmlContainer.push("</td></tr>");
}}htmlContainer.push("</tbody></table></div>");
return htmlContainer;
};
}HighRiskCategoriesComponent.prototype=new MPageComponent();
HighRiskCategoriesComponent.prototype.constructor=MPageComponent;
HighRiskCategoriesComponent.prototype.CSSMap={CRITICAL:"hrc-res-severe",LOW:"hrc-res-low",HIGH:"hrc-res-high",ABNORMAL:"hrc-res-abnormal",POSITIVE:"hrc-res-positive",DEFAULT:"hrc-res-default"};
HighRiskCategoriesComponent.prototype.getImageMap=function(){var criterion=this.getCriterion();
var imageMap={CRITICAL:criterion.static_content+"/images/5278_11.gif",LOW:criterion.static_content+"/images/6303_11.gif",HIGH:criterion.static_content+"/images/6302_11.gif",ABNORMAL:criterion.static_content+"/images/AbnormalIcon_11.gif"};
return imageMap;
};
HighRiskCategoriesComponent.prototype.getLocalizedDate=function(utcDate){var dateString=null;
try{if(utcDate){var dateTime=new Date();
dateTime.setISO8601(utcDate);
dateString=MP_Util.DisplayDateByOption(this,dateTime);
}}catch(err){MP_Util.LogJSError(this,err,"high-risk-categories.js","getLocalizedDate");
throw (err);
}return dateString;
};
HighRiskCategoriesComponent.prototype.getLocalizedNumber=function(numberToFormat){var formattedNumber=null;
var numberFormatter=new mp_formatter.NumericFormatter(MPAGE_LOCALE);
try{if(mp_formatter._isNumber(numberToFormat)){var tempNumber=parseFloat(numberToFormat);
formattedNumber=Math.round(tempNumber*100)/100;
formattedNumber=numberFormatter.format(formattedNumber.toString(),"."+MP_Util.CalculatePrecision(formattedNumber));
}else{formattedNumber=numberToFormat;
}}catch(err){MP_Util.LogJSError(this,err,"tasks-alerts.js","getLocalizedNumber");
throw (err);
}return formattedNumber;
};
HighRiskCategoriesComponent.prototype.getQualifiedPatients=function(qualificationData){var qualifiedColumns=[];
var qualifiedPatients={hrcQual:qualifiedColumns};
var validColumn=null;
var currentColumn=null;
if(qualificationData){for(var index=0,length=qualificationData.COLQUAL.length;
index<length;
index++){currentColumn=qualificationData.COLQUAL[index];
validColumn={patQual:[]};
for(var patientIndex=0,totalPatients=currentColumn.PERSONIDCNT;
patientIndex<totalPatients;
patientIndex++){validColumn.patQual.push({personId:currentColumn.PERSONIDQUAL[patientIndex].PERSONID+".0",encntrId:currentColumn.PERSONIDQUAL[patientIndex].ENCNTR_ID+".0"});
}qualifiedColumns.push(validColumn);
}}return qualifiedPatients;
};
HighRiskCategoriesComponent.prototype.retrieveComponentData=function(){var request=null;
var sendAr=null;
var highRiskCategoriesJSON=null;
var self=this;
var criterion=this.getCriterion();
var hrcI18n=i18n.discernabu.high_risk_categories_o1;
var personId=parseFloat(criterion.person_id);
var encounterId=parseFloat(criterion.encntr_id);
var patientQualifierJSON='{"MPREQUEST":{"PTCNT":0, "PTLIST" : [], "FUCNT" : 0, "FUQUAL" : [], "ORGSEC" : 0, "PRSNLID" :';
patientQualifierJSON+=personId+".0";
patientQualifierJSON+=',"PATIENT_ID" :'+personId+".0";
patientQualifierJSON+=',"ENCNTR_ID" :'+encounterId+".0";
patientQualifierJSON+=',"BWTOPICMEAN" : "MP_RPH_WORKLIST"}}';
sendAr=["^MINE^"];
request=new MP_Core.ScriptRequest(this,this.getComponentLoadTimerName());
request.setProgramName("dc_mp_getHighRiskCategories");
request.setParameters(sendAr);
request.setAsync(true);
request.setRequestBlobIn(patientQualifierJSON);
MP_Core.XMLCCLRequestCallBack(this,request,function(reply){var isValidReply=self.validateReply(reply);
if(isValidReply){var recordData=reply.getResponse();
var patientListJSON='{"QUAL" : '+JSON.stringify(self.getQualifiedPatients(recordData))+"}";
if(recordData.PATCNT>0){var dataRequest=new MP_Core.ScriptRequest(self,self.getComponentLoadTimerName());
var arguments=["^MINE^"];
dataRequest.setProgramName("dc_mp_getHighRiskCatRes");
dataRequest.setParameters(arguments);
dataRequest.setAsync(true);
dataRequest.setRequestBlobIn(patientListJSON);
MP_Core.XMLCCLRequestCallBack(self,dataRequest,function(ajaxReply){self.renderComponent(ajaxReply);
});
}else{var htmlString='<div class="content-body hrc-container">';
htmlString+='<table id="hrcTable'+self.getComponentId()+'" cellpadding="0" cellspacing="0" class="hrc-datatable">';
htmlString+="<colgroup><col><col></colgroup><tbody>";
htmlString+='<tr><td colspan="2"><span class="res-none">'+hrcI18n.NO_RECORDS_MSG+"</span>";
htmlString+="</td></tr></table></div>";
self.finalizeComponent(htmlString,"0");
}}});
};
HighRiskCategoriesComponent.prototype.validateReply=function(reply){var isValidReply=false;
var replyStatus="";
var errMsg=[];
if(reply){replyStatus=reply.getStatus();
if(replyStatus!=="S"){if(replyStatus=="F"){errMsg.push(reply.getError());
this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(),errMsg.join("<br />")),"");
}else{this.finalizeComponent(MP_Util.HandleNoDataResponse(this.getStyles().getNameSpace()),"(0)");
}}else{isValidReply=true;
}}return isValidReply;
};
HighRiskCategoriesComponent.prototype.renderComponent=function(reply){var totalRecords=0;
var errMsg=[];
var htmlContainer=[];
var recordData=null;
var timerRenderComponent=null;
var replyStatus="";
var isScrollableHeader=false;
var hrcI18n=i18n.discernabu.high_risk_categories_o1;
var currentRecordDetails=null;
try{timerRenderComponent=MP_Util.CreateTimer(this.getComponentRenderTimerName());
if(!this.validateReply(reply)){return;
}recordData=reply.getResponse();
totalRecords=this.getTotalRecords(recordData);
htmlContainer=this.displayData(recordData,hrcI18n);
this.finalizeComponent(htmlContainer.join(""),totalRecords.toString());
}catch(err){if(timerRenderComponent){timerRenderComponent.Abort();
timerRenderComponent=null;
}MP_Util.LogJSError(this,err,"high-risk-categories.js","renderComponent");
throw (err);
}finally{if(timerRenderComponent){timerRenderComponent.Stop();
}}};
MP_Util.setObjectDefinitionMapping("RPHS_HIGH_RISK",HighRiskCategoriesComponent);
