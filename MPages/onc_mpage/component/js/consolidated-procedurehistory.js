var CERN_PROCEDURE_CONSOLIDATED=function(){var proc3I18n=i18n.discernabu.consolidated_history;
var datePrecisionCodes=null;
var contributorPowerChartCd=0;
function sortProcedure(procArr){procArr.sort(sortByDtTm);
}function sortByDtTm(a,b){if(a.ONSET_UTC>b.ONSET_UTC){return -1;
}else{if(a.ONSET_UTC<b.ONSET_UTC){return 1;
}}if(a.DISPLAY_AS.toUpperCase()>b.DISPLAY_AS.toUpperCase()){return 1;
}if(a.DISPLAY_AS.toUpperCase()<b.DISPLAY_AS.toUpperCase()){return -1;
}return 0;
}function sortSecondaryProcedures(component){component.proc3SecondaryArr.sort(sortByProcName);
}function sortByProcName(a,b){if(a.DISPLAY_AS.toUpperCase()>b.DISPLAY_AS.toUpperCase()){return 1;
}if(a.DISPLAY_AS.toUpperCase()<b.DISPLAY_AS.toUpperCase()){return -1;
}return 0;
}function sortProceduresByPatientRequest(proc1,proc2){return proc1.PAT_REQUEST_TYPE_DISPLAY.localeCompare(proc2.PAT_REQUEST_TYPE_DISPLAY);
}function setProcPatientRequestDisplay(patReqObject,component){patReqObject.PAT_REQUEST_TYPE=CERN_PROCEDURE_CONSOLIDATED.getProcPatientRequestType(patReqObject,component);
switch(patReqObject.PAT_REQUEST_TYPE){case"ADD":patReqObject.PAT_REQUEST_TYPE_DISPLAY=proc3I18n.ADD;
break;
case"UPDATE":patReqObject.PAT_REQUEST_TYPE_DISPLAY=proc3I18n.MODIFY;
break;
case"REMOVE":patReqObject.PAT_REQUEST_TYPE_DISPLAY=proc3I18n.REMOVE;
break;
}}function saveProcedure(component){var compId=component.getComponentId();
var self=component;
var procDateFormatted="";
var addProcedureTypeTimer=null;
var addProcedureActionTimer=null;
var selectedVocabTimer=null;
var procRawTime=null;
var procOnsetDateFlag=0;
var procDtPrecisionCd=0;
MP_Util.LoadSpinner("chxContent"+compId);
try{addProcedureTypeTimer=new CapabilityTimer("CAP:MPG Procedure History Type",component.criterion.category_mean);
if(addProcedureTypeTimer){if(component.isfreeTextProcedure){addProcedureTypeTimer.addMetaData("rtms.legacy.metadata.1","Free Text procedure");
}else{addProcedureTypeTimer.addMetaData("rtms.legacy.metadata.1","Codified procedure");
}addProcedureTypeTimer.capture();
}addProcedureActionTimer=new RTMSTimer("USR:MPG.PROCEDURE_HISTORY-Procedure_Actionability",component.criterion.category_mean);
if(addProcedureActionTimer){if(component.m_isProcedureModified){addProcedureActionTimer.addMetaData("rtms.legacy.metadata.1","Modified procedure");
}else{addProcedureActionTimer.addMetaData("rtms.legacy.metadata.1","Save new procedure");
}addProcedureActionTimer.start();
}var procRequest=new ProcedureRequest();
if(!component.m_isProcedureModified){procRequest.encounter_id=component.criterion.encntr_id;
var vocabSelect=document.getElementById("chxProcVocabSelect"+compId);
if(vocabSelect){var vocabIndex=vocabSelect.selectedIndex;
var vocabularyName=vocabSelect.options[vocabIndex].text;
if(vocabIndex>0){selectedVocabTimer=new CapabilityTimer("CAP:MPG Procedure History Selected Vocabulary",component.criterion.category_mean);
if(selectedVocabTimer){selectedVocabTimer.addMetaData("rtms.legacy.metadata.1","Changed Vocabulary:"+vocabularyName+"");
}selectedVocabTimer.capture();
}}if(component.onsetDtControl){procRawTime=component.onsetDtControl.getSelectedDate();
procOnsetDateFlag=component.onsetDtControl.getSelectedDateFlag();
procDtPrecisionCd=component.onsetDtControl.getSelectedDatePrecisionCode();
}procRequest.procedure_id=0;
if(component.newProcDetails.NOMENCLATURE_ID===0){procRequest.free_text=component.procedureName;
procRequest.nomenclature_id=0;
component.isfreeTextProcedure=true;
}else{procRequest.nomenclature_id=component.newProcDetails.NOMENCLATURE_ID;
}}else{if(component.SPProcDateControl){procRawTime=component.SPProcDateControl.getSelectedDate();
procOnsetDateFlag=component.SPProcDateControl.getSelectedDateFlag();
procDtPrecisionCd=component.SPProcDateControl.getSelectedDatePrecisionCode();
}procRequest.procedure_id=component.updatedProcDetails.PROCEDURE_ID;
procRequest.update_cnt=component.updatedProcDetails.UPDATE_CNT;
procRequest.encounter_id=component.updatedProcDetails.ENCNTR_ID;
if(component.updatedProcDetails.NOMENCLATURE_ID===0){procRequest.free_text=component.updatedProcDetails.DISPLAY_AS;
procRequest.nomenclature_id=0;
component.isfreeTextProcedure=true;
}else{procRequest.nomenclature_id=component.updatedProcDetails.NOMENCLATURE_ID;
}}procDateFormatted=procRawTime;
var cdUnknown=MP_Util.GetCodeByMeaning(component.datePrecisionCodes,"UNKNOWN").codeValue;
if(procDtPrecisionCd>0&&!procRawTime&&procDtPrecisionCd!=cdUnknown){procDtPrecisionCd=0;
}if(procDateFormatted){procDateFormatted=procDateFormatted.format("dd-mmm-yyyy");
procDateFormatted=procDateFormatted.toString().toUpperCase();
}procRequest.active_ind=1;
procRequest.procedure_date=procDateFormatted;
procRequest.proc_raw_time=procRawTime;
procRequest.procedure_date_precision=procOnsetDateFlag;
procRequest.procedure_date_precision_cd=procDtPrecisionCd;
retrieveContributorSystemCds(component,function(){contributorPowerChartCd=MP_Util.GetCodeByMeaning(component.contributorSystemCodes,"POWERCHART").codeValue;
var procJSONStr=buildProcedureStringRequest(procRequest,component);
var newProcScriptRequest=new ScriptRequest();
var criterion=component.getCriterion();
newProcScriptRequest.setProgramName("mp_add_update_procedures");
newProcScriptRequest.setDataBlob(procJSONStr);
newProcScriptRequest.setParameterArray(["^MINE^","^^",0,criterion.person_id]);
newProcScriptRequest.setResponseHandler(function(scriptReply){if(scriptReply.getResponse().STATUS_DATA.STATUS=="S"){self.m_isProcedureSaved=true;
var procedureId=scriptReply.getResponse().PROCEDURES[0].PROCEDURE_ID;
handleSavedProcedure(self,procedureId);
CERN_EventListener.fireEvent(null,self,"procedureHistoryUpdated",null);
}else{var historiesTabContainer=$("#chxContent"+compId).find(".chx-tab-container");
var errorMessageHTML="<div id='chxErrorMessage"+compId+"' class='chx-error-message'><div class='error-container inline-message'><span class='error-text message-info-text'>"+proc3I18n.UNABLE_TO_SAVE_PROC+"</span></div></div>";
historiesTabContainer.prepend(errorMessageHTML);
$("#chxContent"+compId).find(".loading-screen").remove();
}});
newProcScriptRequest.performRequest();
});
}catch(err){if(addProcedureActionTimer){addProcedureActionTimer.fail();
addProcedureActionTimer=null;
}MP_Util.LogJSError(err,null,"consolidated-procedurehistory.js","saveProcedure");
}finally{if(addProcedureActionTimer){addProcedureActionTimer.stop();
}}}function handleSavedProcedure(component,procedureId){component.addedProcedureId=procedureId;
component.procSidePanel=null;
component.procHistPanelShowing=false;
component.retrieveComponentData();
}function ProcedureRequest(){this.procedure_id=0;
this.encounter_id=0;
this.active_ind=0;
this.nomenclature_id=0;
this.procedure_date="";
this.procedure_date_precision=0;
this.procedure_date_precision_cd=0;
this.free_text="";
this.update_cnt=0;
}function buildProcedureStringRequest(procedureRequest,component){var procDateJSON="";
if(procedureRequest.procedure_date){var tempDate=new Date(procedureRequest.proc_raw_time);
procDateJSON=tempDate.toJSON().split(".")[0];
procDateJSON="\\/Date("+procDateJSON+".000+00:00)\\/";
}var procRequestStr='{"REQUESTIN":{"PROCEDURES":[{"PROCEDURE_ID":'+procedureRequest.procedure_id+'.0,"VERSION":'+procedureRequest.update_cnt+',"ENCOUNTER_ID":'+procedureRequest.encounter_id+'.0 ,"NOMENCLATURE_ID":'+procedureRequest.nomenclature_id+'.0,"FREE_TEXT":"'+procedureRequest.free_text+'" ,"PERFORMED_DT_TM":"'+procDateJSON+'","PERFORMED_DT_TM_PREC": '+procedureRequest.procedure_date_precision+' , "PERFORMED_DT_TM_PREC_CD":'+procedureRequest.procedure_date_precision_cd+'.00 ,"ACTIVE_IND":'+procedureRequest.active_ind+', "CONTRIBUTOR_SYSTEM_CD": '+contributorPowerChartCd+".0}]}}";
return procRequestStr;
}function retrieveContributorSystemCds(component,callBackFunction){var contributorSystemCdResource=MP_Resources.getSharedResource("contributorSystemCodes");
if(contributorSystemCdResource&&contributorSystemCdResource.isResourceAvailable()){component.contributorSystemCodes=contributorSystemCdResource.getResourceData();
if(callBackFunction){callBackFunction();
}}else{var contributorSysCdReq=new ScriptRequest();
contributorSysCdReq.setProgramName("MP_GET_CODESET");
contributorSysCdReq.setParameterArray(["^MINE^","89.0"]);
contributorSysCdReq.setAsyncIndicator(true);
contributorSysCdReq.setResponseHandler(function(scriptReply){if(scriptReply.getResponse().STATUS_DATA.STATUS==="S"){component.contributorSystemCodes=scriptReply.getResponse().CODES;
component.contributorSystemCodes=MP_Util.LoadCodeListJSON(component.contributorSystemCodes);
contributorSystemCdResource=new SharedResource("contributorSystemCodes");
if(contributorSystemCdResource){contributorSystemCdResource.setResourceData(component.contributorSystemCodes);
contributorSystemCdResource.setIsAvailable(true);
MP_Resources.addSharedResource("contributorSystemCodes",contributorSystemCdResource);
}if(callBackFunction){callBackFunction();
}}});
contributorSysCdReq.performRequest();
}}function removeProcedureRow(component,procRowToRemoveDetails){var removeProcedureActionTimer=null;
var compId=component.getComponentId();
MP_Util.LoadSpinner("chxContent"+compId);
try{removeProcedureActionTimer=new RTMSTimer("USR:MPG.PROCEDURE_HISTORY-Procedure_Actionability",component.criterion.category_mean);
if(removeProcedureActionTimer){removeProcedureActionTimer.addMetaData("rtms.legacy.metadata.1","Removed procedure history");
removeProcedureActionTimer.start();
}var removeRequest=new ProcedureRequest();
removeRequest.encounter_id=procRowToRemoveDetails.ENCNTR_ID;
removeRequest.procedure_id=procRowToRemoveDetails.PROCEDURE_ID;
removeRequest.update_cnt=procRowToRemoveDetails.UPDATE_CNT;
removeRequest.nomenclature_id=procRowToRemoveDetails.NOMENCLATURE_ID;
removeRequest.active_ind=0;
retrieveContributorSystemCds(component,function(){contributorPowerChartCd=MP_Util.GetCodeByMeaning(component.contributorSystemCodes,"POWERCHART").codeValue;
var removeRequestStr=buildProcedureStringRequest(removeRequest,component);
var self=component;
var removeProcScriptRequest=new ScriptRequest();
var criterion=component.getCriterion();
removeProcScriptRequest.setProgramName("mp_add_update_procedures");
removeProcScriptRequest.setDataBlob(removeRequestStr);
removeProcScriptRequest.setParameterArray(["^MINE^","^^",0,criterion.person_id]);
removeProcScriptRequest.setResponseHandler(function(scriptReply){if(scriptReply.getResponse().STATUS_DATA.STATUS==="S"){CERN_EventListener.fireEvent(null,self,"procedureHistoryUpdated",null);
self.retrieveComponentData();
}else{var historiesTabContainer=$("#chxContent"+compId).find(".chx-tab-container");
var errorMessageHTML="<div id='chxErrorMessage"+compId+"' class='chx-error-message'><div class='error-container inline-message'><span class='error-text message-info-text'>"+proc3I18n.UNABLE_TO_REMOVE_PROC+"</span></div></div>";
historiesTabContainer.prepend(errorMessageHTML);
$("#chxContent"+compId).find(".loading-screen").remove();
}});
removeProcScriptRequest.performRequest();
});
}catch(err){if(removeProcedureActionTimer){removeProcedureActionTimer.fail();
removeProcedureActionTimer=null;
}logger.logJSError(err,component,"consolidated-procedurehistory.js","removeProcedureRow");
}finally{if(removeProcedureActionTimer){removeProcedureActionTimer.stop();
}}}function modifyProcedureDetails(component,readOnlyProcDetails){var compId=component.getComponentId();
var self=component;
component.updatedProcDetails={};
component.m_isProcedureSaved=false;
component.m_isProcedureModified=true;
component.updatedProcDetails.NOMENCLATURE_ID=readOnlyProcDetails.NOMENCLATURE_ID;
component.updatedProcDetails.PROCEDURE_ID=readOnlyProcDetails.PROCEDURE_ID;
component.updatedProcDetails.UPDATE_CNT=readOnlyProcDetails.UPDATE_CNT;
component.updatedProcDetails.DISPLAY_AS=readOnlyProcDetails.DISPLAY_AS;
component.updatedProcDetails.ENCNTR_ID=readOnlyProcDetails.ENCNTR_ID;
component.procSearchBar.disable();
component.procSearchBar.activateCaption();
component.vocabSelect.attr("disabled",true);
var removeBtn=$("#chxRemoveButton"+compId);
var modifyBtn=$("#chxModifyButton"+compId);
modifyBtn.replaceWith("<div class='sp-button' id='chxSaveChangesBtn"+compId+"'>"+i18n.SAVE+"</div>");
removeBtn.replaceWith("<div class='sp-button' id='chxCancelChangesBtn"+compId+"'>"+i18n.CANCEL+"</div>");
var cancelChangesBtn=$("#chxCancelChangesBtn"+compId);
cancelChangesBtn.click(function(){component.procSearchBar.enable();
component.procSearchBar.activateCaption();
component.vocabSelect.attr("disabled",false);
component.m_isProcedureSaved=true;
CERN_PROCEDURE_CONSOLIDATED.showProcedureInSidePanel(readOnlyProcDetails,self);
$("#chxErrorMessage"+compId).remove();
return;
});
var chxSaveChangesBtn=$("#chxSaveChangesBtn"+compId);
chxSaveChangesBtn.click(function(){saveProcedure(self);
});
if(readOnlyProcDetails.NOMENCLATURE_ID===0&&!component.isProcedureSearchDisabled){var sidePanelHeader=$("#sidePanelContents"+compId).find(".sp-header");
var origProcedureName=sidePanelHeader.text();
sidePanelHeader.empty();
sidePanelHeader.append('<div class="chx-sp-modify-proc"><input id="chxSPProcInput'+compId+'" value="'+origProcedureName+'"/></div>');
var spProcInput=$("#chxSPProcInput"+compId);
spProcInput.bind("keyup",function(){var userEnteredFreeText=spProcInput.val();
userEnteredFreeText=userEnteredFreeText.replace(/\s+/g,"");
if(!userEnteredFreeText.length){chxSaveChangesBtn.addClass("disabled");
chxSaveChangesBtn.attr("disabled",true);
}else{chxSaveChangesBtn.removeClass("disabled");
chxSaveChangesBtn.attr("disabled",false);
self.updatedProcDetails.DISPLAY_AS=spProcInput.val();
}});
}component.SPProcDateControl=new DateSelector();
component.SPProcDateControl.retrieveRequiredResources(function(){component.SPProcDateControl.setUniqueId("SPProcDateControl"+compId);
component.SPProcDateControl.setCriterion(component.criterion);
component.SPProcDateControl.setFuzzyFlag(true);
var sidePanelModifyDateHTML=component.SPProcDateControl.renderDateControl();
var SPDateContainerElement=$("#procedureSPDateContainer"+compId);
SPDateContainerElement.find(".chx-side-panel-proc-date").html(sidePanelModifyDateHTML);
component.SPProcDateControl.finalizeActions();
if(readOnlyProcDetails.ONSET_UTC){component.SPProcDateControl.setSelectedDate(new Date(readOnlyProcDetails.ONSET_UTC));
component.SPProcDateControl.setSelectedDateFlag(readOnlyProcDetails.DATE_FLAG);
component.SPProcDateControl.dateDisplayInput.removeClass("secondary-text");
}component.SPProcDateControl.setSelectedDatePrecisionCode(readOnlyProcDetails.PROC_DT_TM_PREC_CD);
});
CERN_EventListener.addListener(component,"selectedDateAvailable"+component.SPProcDateControl.getUniqueId(),function(){var today=new Date();
if(component.SPProcDateControl&&component.SPProcDateControl.getSelectedDate()>today){chxSaveChangesBtn.addClass("disabled");
chxSaveChangesBtn.attr("disabled",true);
}else{chxSaveChangesBtn.removeClass("disabled");
chxSaveChangesBtn.attr("disabled",false);
}},component);
}return{RenderComponent:function(component){var recordData=component.getProceduresRecordData();
var compID=component.getComponentId();
component.m_procedurePatRequestRecords=[];
component.m_procedureChartRecords=[];
component.sHistoryRecords=[];
component.sSurginetRecords=[];
component.viewProcedureHistory=recordData.VIEW_PROC_HIST_PRIV||0;
component.isUpdateProcHxGranted=recordData.UPDATE_PROC_HIST_PRIV||0;
var patientEnteredDataFilter=component.getPatientEnteredDataInd();
var hiDataFilter=component.getExternalDataInd();
var viewOutsideRecordsChecked=component.getViewOutsideHistoriesInd();
var segmentedControl=null;
var patRequestsDisplayInd=CERN_PROCEDURE_CONSOLIDATED.isDisplayPatientEnteredDataEnabled(component);
var updtProcHxPrivResource=MP_Resources.getSharedResource("updtProcHxPrivResource");
if(!updtProcHxPrivResource){updtProcHxPrivResource=new SharedResource("updtProcHxPrivResource");
if(updtProcHxPrivResource){updtProcHxPrivResource.setResourceData(recordData.UPDATE_PROC_HIST_PRIV_EXCEPTIONS||{});
updtProcHxPrivResource.setIsAvailable(true);
MP_Resources.addSharedResource("updtProcHxPrivResource",updtProcHxPrivResource);
}}datePrecisionCodes=component.datePrecisionCodes;
var jsHTML=[];
CERN_PROCEDURE_CONSOLIDATED.groupProcedures(component,recordData);
if(patRequestsDisplayInd&&component.procPatRequestArr.length){component.procPatRequestArr.sort(CERN_PROCEDURE_CONSOLIDATED.sortProceduresByPatientRequest);
}if(component.m_mfaBanner){jsHTML.push(component.m_mfaBanner.render());
}if(hiDataFilter){var procedureHIDataValid=CERN_PROCEDURE_CONSOLIDATED.checkProcedureHIDataValidity(component,recordData);
component.setProcHiDataValidity(procedureHIDataValid);
jsHTML.push("<div class='chx-proc-tab-controls'>");
if(!patientEnteredDataFilter){jsHTML.push(CERN_PROCEDURE_CONSOLIDATED.createHIAddDataControl(component,procedureHIDataValid));
}else{if(viewOutsideRecordsChecked){segmentedControl=CERN_PROCEDURE_CONSOLIDATED.createSegmentedControl(component);
var segmentedControlHTML="<div id='procSegmentedControl"+compID+"' class='chx-seg-control-container'>"+segmentedControl.render()+"</div>";
jsHTML.push(segmentedControlHTML);
}}jsHTML.push("</div>");
}jsHTML.push("<div class='chx-proc-tab-content'><div class='chx-proc-table-content'> <div id='proceduresMainContainer"+compID+"'>");
CERN_PROCEDURE_CONSOLIDATED.sortProcedure(component.proc3Arr);
CERN_PROCEDURE_CONSOLIDATED.sortSecondaryProcedures(component);
CERN_PROCEDURE_CONSOLIDATED.createProceduresTable(component);
jsHTML.push(component.m_procedureTable.render());
jsHTML.push("</div></div></div>");
var chartProcedureCount=(component.getSurginet())?component.sHistoryRecords.length+component.sSurginetRecords.length:component.sHistoryRecords.length;
component.loadTabData(chartProcedureCount,jsHTML.join(""),component.HistoryComponentIndexObj.PROCEDURE_HISTORY,function(){if(component.m_procedureTable){CERN_PROCEDURE_CONSOLIDATED.resizeProcedureTabContent(component);
component.m_procedureTable.clearElementCache();
component.m_procedureTable.attachEvents();
}if(segmentedControl){segmentedControl.clearElementCache();
segmentedControl.attachEvents();
}if(component.addedProcedureId){CERN_PROCEDURE_CONSOLIDATED.triggerTableRowClick(component,component.savedProcedureDetails);
CERN_PROCEDURE_CONSOLIDATED.scrollIntoProcedureRow(component,"MILLENNIUM");
component.resizeComponent.call(component,null);
component.addedProcedureId=0;
}CERN_PROCEDURE_CONSOLIDATED.resizeProcedureTabContent(component);
},component.m_procedurePatRequestRecords.length);
component.updateProcHxPrivExceptions=recordData.UPDATE_PROC_HIST_PRIV_EXCEPTIONS||{};
},addNewProcedureRecordToTable:function(component){var newProcDetails=component.newProcDetails;
var newProcRowData={display:"<span>"+newProcDetails.PROCEDURE_NAME+"</span>",provider:"--",implant:"--",date:"--",patRequest:"--",details:component.newProcDetails};
component.sHistoryRecords.unshift(newProcRowData);
CERN_PROCEDURE_CONSOLIDATED.createChartProcedureTableGroups(component);
CERN_PROCEDURE_CONSOLIDATED.setProcedureTableData(component);
component.m_isProcedureSaved=false;
CERN_PROCEDURE_CONSOLIDATED.triggerTableRowClick(component,component.newProcDetails);
CERN_PROCEDURE_CONSOLIDATED.scrollIntoProcedureRow(component,"MILLENNIUM");
CERN_PROCEDURE_CONSOLIDATED.resizeProcedureTabContent(component);
},buildProcedureSidePanelDetailsHTML:function(procItem){var buildProcedureSidePanelColumnHTML=function(label,value){if(!label){logger.logJSError("the label for the side panel column is missing");
return;
}return"<dl class='chx-side-panel-column'><dt><span class='secondary-text'>"+label+"</span></dt><dd>"+(value||"--")+"</dd></dl>";
};
var procedureDetailsHtml="";
var commentString=CERN_PROCEDURE_CONSOLIDATED.generateProcedureCommentsHTML(procItem)||"<dd>--</dd>";
if(procItem.SURG_PROC_IND===0){procedureDetailsHtml="<div class='chx-side-panel-row'>"+buildProcedureSidePanelColumnHTML(proc3I18n.PROVIDER,procItem.PROVIDER)+buildProcedureSidePanelColumnHTML(proc3I18n.STATUS,procItem.STATUS)+buildProcedureSidePanelColumnHTML(proc3I18n.LOCATION,procItem.LOCATION)+"</div><div class='chx-side-panel-row'><dl><dt><span class='secondary-text'>"+proc3I18n.COMMENTS+"</span></dt>"+commentString+"<dl></div>";
}else{if(procItem.SURG_PROC_IND===1){var implantHTML="";
var implantLen=procItem.IMPLANT?procItem.IMPLANT.length:0;
for(var k=0;
k<implantLen;
k++){implantHTML+=(procItem.IMPLANT[k].DESC)?"<dd class='chx-side-panel-secondary-row'>"+procItem.IMPLANT[k].DESC+"</dd>":"";
}procedureDetailsHtml="<div class='chx-side-panel-row'>"+buildProcedureSidePanelColumnHTML(proc3I18n.PROVIDER,procItem.PROVIDER)+buildProcedureSidePanelColumnHTML(proc3I18n.ANESTH_TYPE,procItem.ANETHESIA_TYPE)+buildProcedureSidePanelColumnHTML(proc3I18n.CASE_NUM,procItem.SURG_CASE_NBR_FORMATTED)+"</div><div class='chx-side-panel-row'><dl><dt><span class='secondary-text'>"+proc3I18n.IMPLANTS+"</span></dt>"+(implantHTML||"<dd>--</dd>")+"</dl></div><div class='chx-side-panel-row'><dl><dt><span class='secondary-text'>"+proc3I18n.COMMENTS+"</span></dt>"+commentString+"</dl></div></div>";
}}return procedureDetailsHtml;
},checkProcedureHIDataValidity:function(component,recordData){var procedureHIDataValid=false;
if((recordData.STATUS_DATA.SUBEVENTSTATUS[0].OPERATIONSTATUS==="S")&&($.trim(recordData.STATUS_DATA.SUBEVENTSTATUS[0].OPERATIONNAME)==="getHIProcHistory")){try{var procRecordData=component.getProceduresRecordData();
var extProcedureData=JSON.parse(procRecordData.PROXYREPLY.HTTPREPLY.BODY);
component.externalProcHistory=extProcedureData.groups;
if(extProcedureData.groups[0].most_recent_procedure){procedureHIDataValid=true;
}component.m_hiTotalResults=extProcedureData.total_results;
component.hiMoreDataAvail=extProcedureData.more_results;
}catch(err){MP_Util.LogJSError(err,this,"consolidated-procedurehistory.js","RenderComponent");
}}return procedureHIDataValid;
},createChartProcedureTableGroups:function(component){component.m_procedureChartRecords=[];
if(component.getSurginet()){component.m_procedureChartRecords.push({id:"surginet-group",label:proc3I18n.SURGICAL_RECORD,expanded:true,showCount:true,records:component.sSurginetRecords});
}component.m_procedureChartRecords.push({id:"procedure-group",label:proc3I18n.PROCEDURES,expanded:true,showCount:true,records:component.sHistoryRecords});
},createChartProcedureTableRecords:function(component){var procArr=component.proc3Arr;
var procedureCount=procArr.length;
var oProcItem;
for(var i=0;
i<procedureCount;
i++){oProcItem=procArr[i];
if(oProcItem.SURG_PROC_IND===0){component.sHistoryRecords.push(CERN_PROCEDURE_CONSOLIDATED.generateProcRowData(component,oProcItem));
}else{CERN_PROCEDURE_CONSOLIDATED.groupProcedureSurgicalRecords(component,oProcItem);
}}CERN_PROCEDURE_CONSOLIDATED.createChartProcedureTableGroups(component);
},createProcedurePatRequestRecords:function(component){component.m_procedurePatRequestRecords=[];
var patReqProcsArray=component.procPatRequestArr;
var patReqProcsCnt=patReqProcsArray.length;
if(patReqProcsCnt){var oProcItem=null;
for(var k=0;
k<patReqProcsCnt;
k++){oProcItem=patReqProcsArray[k];
component.m_procedurePatRequestRecords.push(CERN_PROCEDURE_CONSOLIDATED.generateProcRowData(component,oProcItem));
}}},createNewProcedureSidePanelHTML:function(component){var compId=component.getComponentId();
component.onsetDtControl.setUniqueId("chxProc"+compId);
component.onsetDtControl.setCriterion(component.criterion);
component.onsetDtControl.setFuzzyFlag(true);
var procedureDateControlHTML=component.onsetDtControl.renderDateControl();
var sidePanelContentHtml="<div id='sidePanelScrollContainer"+compId+"'><div class='chx-sp-date-container' id='procedureDateContainer"+compId+"'><span class='secondary-text chx-proc-date-label'>"+proc3I18n.PROCEDURE_DATE+"</span>"+procedureDateControlHTML+"</div>"+CERN_PROCEDURE_CONSOLIDATED.buildProcedureSidePanelDetailsHTML(component.newProcDetails)+"</div>";
return sidePanelContentHtml;
},createProceduresTable:function(component){component.m_procedureTable=new MPageUI.Table();
component.m_procedureTable.setOptions({rows:{striped:true},columns:{separators:true},namespace:"chx-proc-table",select:MPageUI.TABLE_OPTIONS.SELECT.SINGLE_ROW});
CERN_PROCEDURE_CONSOLIDATED.createProcedureTableColumns(component);
CERN_PROCEDURE_CONSOLIDATED.createChartProcedureTableRecords(component);
if(CERN_PROCEDURE_CONSOLIDATED.isDisplayPatientEnteredDataEnabled(component)){CERN_PROCEDURE_CONSOLIDATED.createProcedurePatRequestRecords(component);
}CERN_PROCEDURE_CONSOLIDATED.setProcedureTableData(component);
},createProcedureTableColumns:function(component){var patRequestColInd=CERN_PROCEDURE_CONSOLIDATED.isDisplayPatientEnteredDataEnabled(component)&&component.procPatRequestArr.length;
var tableColumns=[{id:"display",label:proc3I18n.PROCEDURE,css:(patRequestColInd)?"chx-proc-name-small":"chx-proc-name",contents:function(record){return record.display;
}},{id:"provider",label:proc3I18n.SURGEON,css:(patRequestColInd)?"chx-provider-small":"chx-provider",contents:function(record){return record.provider;
}},{id:"implant",label:proc3I18n.IMPLANT,css:"chx-implant",contents:function(record){return record.implant;
}},{id:"date",label:proc3I18n.DATE,css:"chx-date",contents:function(record){return record.date;
}}];
if(patRequestColInd){var requestCol={id:"chx-pat-request",label:proc3I18n.REQUEST,css:"chx-pat-request",contents:function(record){return record.patRequest;
}};
tableColumns.unshift(requestCol);
}component.m_procedureTable.setColumns(tableColumns);
},createSidePanelObj:function(component){var compId=component.getComponentId();
component.procContentTable=$("#chxContent"+compId).find(".chx-proc-table-content");
component.procContentTable.addClass("chx-sp-adjustment");
component.sidePanelId="chxProcSidePanel"+compId;
if(!$("#"+component.sidePanelId).length){var chxProcSidePanelContainer="<div id='"+component.sidePanelId+"' class='chx-sp'>&nbsp;</div>";
var procTabContent=$("#chxContent"+compId).find(".chx-proc-tab-content");
procTabContent.append(chxProcSidePanelContainer);
}component.procSidePanel=new CompSidePanel(compId,component.sidePanelId);
component.procSidePanel.setExpandOption(component.procSidePanel.expandOption.EXPAND_DOWN);
component.procSidePanel.setHeight(component.procContentTable.height()+"px");
component.procSidePanel.setMinHeight("170px");
component.procSidePanel.renderPreBuiltSidePanel();
component.procSidePanel.showCornerCloseButton();
$("#sidePanelContents"+compId).removeClass("sp-all-contents");
component.procSidePanel.setCornerCloseFunction(function(){if(component.m_procedureTable.getSelectionData().length&&!component.m_isProcedureSaved){CERN_PROCEDURE_CONSOLIDATED.showConfirmationModal(component,null);
}else{if(component.hiTableObj){component.hiTableObj.removeClass("chx-hi-hide-mode");
component.hiTableObj.find(".res-selected").removeClass("res-selected");
}component.m_procedureTable.deselectAll();
component.procContentTable.removeClass("chx-sp-adjustment");
component.procSidePanel.hidePanel();
component.procSidePanel.setApplyBodyContentsPadding(false);
}$("#chxProcedureSearchContainer"+compId).find("input").prop("disabled",false);
component.vocabSelect.prop("disabled",false);
});
component.procSidePanel.setOnExpandFunction(function(){$("#chxProcSidePanel"+compId).prop("style","").addClass("chx-sp-pos-rel");
});
},formatProcedureDateField:function(procObj){var onsetDate="";
var dateTime=null;
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var patRequestType=procObj.PAT_REQUEST_TYPE;
if(patRequestType==="ADD"){onsetDate=procObj.ONSET;
onsetDateHvr=procObj.ONSET;
}else{if(procObj.ONSET){dateTime=new Date();
var onsetDt=procObj.ONSET_UTC;
dateTime.setISO8601(onsetDt);
switch(procObj.DATE_FLAG){case 0:onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_2YEAR);
break;
case 1:onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_2YEAR);
break;
case 2:onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_MONTH_4YEAR_NO_DATE);
break;
case 3:onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_4YEAR);
break;
}}else{onsetDate="--";
}}procObj.ONSET_DATE_FORMATTED=onsetDate;
},generateProcedureCommentsHTML:function(procObj){var dateTime;
var beginDtTm="";
var commentText="";
var providerName="";
var commentsHTML="";
var commentsCount=(procObj.COMMENTS)?procObj.COMMENTS.length:0;
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
for(var k=0;
k<commentsCount;
k++){if(procObj.COMMENTS[k].BEG_EFFECTIVE_DT_TM){dateTime=new Date();
dateTime.setISO8601(procObj.COMMENTS[k].BEG_EFFECTIVE_DT_TM);
beginDtTm=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
}if(procObj.SURG_PROC_IND===0){commentText=procObj.COMMENTS[k].LONG_TEXT;
providerName=procObj.COMMENTS[k].NAME_FULL_FORMATTED;
commentsHTML+=(commentText)?"<dd class='chx-side-panel-secondary-row'>"+beginDtTm+" - "+providerName+"<br/>"+commentText+"</dd>":"";
}else{commentText=procObj.COMMENTS[k].LONG_TEXT;
commentsHTML+=(commentText)?"<dd class='chx-side-panel-secondary-row'>"+commentText+"</dd>":"";
}}return commentsHTML;
},generateProcRowData:function(component,procItem){var patRequestsDisplayInd=CERN_PROCEDURE_CONSOLIDATED.isDisplayPatientEnteredDataEnabled(component);
CERN_PROCEDURE_CONSOLIDATED.formatProcedureDateField(procItem);
var patRequestType=procItem.PAT_REQUEST_TYPE;
var displayName=procItem.DISPLAY_AS||"--";
var providerName=(patRequestsDisplayInd&&patRequestType==="ADD")?"--":(procItem.PROVIDER||"--");
var implantLength=procItem.IMPLANT?procItem.IMPLANT.length:0;
var implantDisplay=(implantLength)?"<span class='chx-implant-content'><span class='chx-implant-img'>&nbsp;</span></span>":"";
var procDtTmPrec=(procItem.PROC_DT_TM_PREC_CD)?MP_Util.GetValueFromArray(procItem.PROC_DT_TM_PREC_CD,datePrecisionCodes):null;
var precisionText=(procDtTmPrec)?procDtTmPrec.display:"";
var displayDate=procItem.ONSET_DATE_FORMATTED?precisionText+" "+procItem.ONSET_DATE_FORMATTED:"--";
var surgicalProcSedondaryInd=procItem.SURG_PROC_IND===1&&procItem.PRIMARY_PROC_IND===0;
var rowClass=(patRequestsDisplayInd&&patRequestType==="REMOVE")?"chx-remove-strike":"";
var procRowDataObj={display:(surgicalProcSedondaryInd)?"<span class='chx-secondary-table-element'>"+displayName+"</span>":"<span class='"+rowClass+"'>"+displayName+"</span>",provider:"<span class='"+rowClass+"'>"+providerName+"</span>",implant:implantDisplay,date:"<span class='"+rowClass+"'>"+displayDate+"</span>",details:procItem};
if(patRequestsDisplayInd){procRowDataObj.patRequest=procItem.PAT_REQUEST_TYPE_DISPLAY||"--";
}return procRowDataObj;
},groupProcedures:function(component,recordData){var categorizeChartProcedure=function(procObj){if(procObj.SURG_PROC_IND===0||(procObj.SURG_PROC_IND===1&&procObj.PRIMARY_PROC_IND===1)){component.proc3Arr.push(procObj);
}else{if(procObj.SURG_PROC_IND===1&&procObj.PRIMARY_PROC_IND===0){component.proc3SecondaryArr.push(procObj);
}}};
component.procPatRequestArr=[];
component.proc3Arr=[];
component.proc3SecondaryArr=[];
var procCnt=recordData.PROC_CNT;
var patRequestsDisplayInd=CERN_PROCEDURE_CONSOLIDATED.isDisplayPatientEnteredDataEnabled(component);
var oProc=null;
for(var j=0;
j<procCnt;
j++){oProc=recordData.PROC[j];
if(patRequestsDisplayInd){if(CERN_PROCEDURE_CONSOLIDATED.isProcedurePatientRequest(oProc)){CERN_PROCEDURE_CONSOLIDATED.setProcPatientRequestDisplay(oProc,component);
component.procPatRequestArr.push(oProc);
}else{categorizeChartProcedure(oProc);
}}else{categorizeChartProcedure(oProc);
}if(oProc.PROCEDURE_ID===component.addedProcedureId){component.savedProcedureDetails=oProc;
}}},groupProcedureSurgicalRecords:function(component,primaryProcObj){var primaryProcRowData=CERN_PROCEDURE_CONSOLIDATED.generateProcRowData(component,primaryProcObj);
component.sSurginetRecords.push(primaryProcRowData);
var secondaryProcObj=null;
var secondaryProcRowData=null;
var secondProcsCount=component.proc3SecondaryArr.length;
for(var a=0;
a<secondProcsCount;
a++){secondaryProcObj=component.proc3SecondaryArr[a];
if(primaryProcObj.SURG_CASE_ID===secondaryProcObj.SURG_CASE_ID){secondaryProcRowData=CERN_PROCEDURE_CONSOLIDATED.generateProcRowData(component,secondaryProcObj);
component.sSurginetRecords.push(secondaryProcRowData);
}}},openSidePanelForNewProcedure:function(component){var compId=component.getComponentId();
CERN_PROCEDURE_CONSOLIDATED.createSidePanelObj(component);
var sidePanelContentHTML=CERN_PROCEDURE_CONSOLIDATED.createNewProcedureSidePanelHTML(component);
var nomenclatureID=component.newProcDetails.NOMENCLATURE_ID;
component.procSidePanel.setTitleText(component.newProcDetails.PROCEDURE_NAME);
component.procSidePanel.setActionsAsHTML("<div class='sp-button' id='chxCancelButton"+compId+"'>"+i18n.CANCEL+"</div><div class='sp-button' id='chxSaveButton"+compId+"'>"+i18n.SAVE+"</div>");
component.procSidePanel.setContents(sidePanelContentHTML,component.sidePanelId);
component.procSidePanel.setApplyBodyContentsPadding(true);
var isModifiable=component.isUpdateProcHxGranted;
var procExceptionsObj=component.updateProcHxPrivExceptions;
for(var idx in procExceptionsObj){if(procExceptionsObj.hasOwnProperty(idx)&&procExceptionsObj[idx].NOMENCLATURE_ID===nomenclatureID){isModifiable=procExceptionsObj[idx].IS_NOMEN_MODIFIABLE;
break;
}}CERN_PROCEDURE_CONSOLIDATED.scrollIntoProcedureRow(component,"MILLENNIUM");
var procSidePanelCancelBtn=$("#chxCancelButton"+compId);
procSidePanelCancelBtn.click(function(){component.procContentTable.removeClass("chx-sp-adjustment");
component.procSidePanel.hidePanel();
CERN_PROCEDURE_CONSOLIDATED.removeNewProcedureRecordFromTable(component);
component.vocabSelect.prop("disabled",false);
component.procSearchBar.enable();
component.procSearchBar.activateCaption();
component.m_isProcedureSaved=true;
$("#chxErrorMessage"+compId).remove();
});
component.onsetDtControl.finalizeActions();
component.procSidePanel.showPanel();
var self=component;
var sidePanelSaveBtn=$("#chxSaveButton"+compId);
if(!isModifiable){sidePanelSaveBtn.addClass("disabled");
sidePanelSaveBtn.prop("disabled",true);
var historiesTabContainer=$("#chxContent"+compId).find(".chx-tab-container");
var errorMessageHTML="<div id='chxErrorMessage"+compId+"' class='chx-error-message'><div class='error-container inline-message'><span class='error-text message-info-text'>"+proc3I18n.NO_PRIVILEGE_MSG+"</span></div></div>";
historiesTabContainer.prepend(errorMessageHTML);
}sidePanelSaveBtn.click(function(){saveProcedure(self);
});
CERN_EventListener.addListener(component,"selectedDateAvailable"+component.onsetDtControl.getUniqueId(),function(){var today=new Date();
var addSaveBtn=$("#chxSaveButton"+compId);
if(component.onsetDtControl&&component.onsetDtControl.getSelectedDate()>today){addSaveBtn.addClass("disabled");
addSaveBtn.prop("disabled",true);
}else{addSaveBtn.removeClass("disabled");
addSaveBtn.prop("disabled",false);
}},component);
},removeNewProcedureRecordFromTable:function(component){component.sHistoryRecords.shift();
CERN_PROCEDURE_CONSOLIDATED.createChartProcedureTableGroups(component);
CERN_PROCEDURE_CONSOLIDATED.setProcedureTableData(component);
CERN_PROCEDURE_CONSOLIDATED.resizeProcedureTabContent(component);
component.m_isProcedureSaved=true;
},resizeProcedureTabContent:function(component){var componentId=component.getComponentId();
var viewPointBodyObj=$("#vwpBody");
var chxHeaderHeight=92;
var viewPointBodyHeight=viewPointBodyObj.length?viewPointBodyObj.height():400;
var tabControlObj=$("#tabData"+componentId);
var tabControlHeight=tabControlObj.length?tabControlObj.height():0;
var $procControlsContainer=$("#chxContent"+componentId).find(".chx-proc-tab-controls");
var controlsContainerHeight=$procControlsContainer.height();
var $procedureExtDataTableContent=$("#hiTableContainer"+componentId).find(".content-body");
var $procedureExtDataPager=$("#procedureExtDataPager"+componentId);
var procExtDataPagerHeight=$procedureExtDataPager.length?$procedureExtDataPager.height():0;
var availableHeight=viewPointBodyHeight-(chxHeaderHeight+tabControlHeight+controlsContainerHeight+procExtDataPagerHeight);
availableHeight=Math.floor(availableHeight);
if($procedureExtDataTableContent.length){var halfAvailableHeight=Math.floor(availableHeight/2);
component.m_procedureTable.setMaxHeight(halfAvailableHeight);
$procedureExtDataTableContent.css({"max-height":halfAvailableHeight+"px","overflow-y":"auto"});
}else{component.m_procedureTable.setMaxHeight(availableHeight);
}if(component.procSidePanel&&component.procHistPanelShowing){var $procedureTablesContainer=$("#chxContent"+componentId).find(".chx-proc-table-content");
var sidePanelHeight=Math.floor($procedureTablesContainer.height());
component.procSidePanel.setHeight(sidePanelHeight+"px");
component.procSidePanel.resizePanel(sidePanelHeight+"px");
}},triggerTableRowClick:function(component,procObj){var procedureRowRecord=CERN_PROCEDURE_CONSOLIDATED.getProcedureTableRowRecord(component,procObj);
$("#"+procedureRowRecord._MPageUI.rowReference).click();
},scrollIntoProcedureRow:function(component,tableType){var $tableContainer=null;
var $procRowSelected=null;
var compId=component.getComponentId();
switch(tableType){case"MILLENNIUM":$tableContainer=$("#proceduresMainContainer"+compId).find(".table-body");
var selectedProcRowRecord=CERN_PROCEDURE_CONSOLIDATED.getProcedureTableRowRecord(component,component.selectedProcTableRowData);
$procRowSelected=$("#"+selectedProcRowRecord._MPageUI.rowReference);
break;
case"HI":$tableContainer=component.hiTableObj.find(".content-body");
$procRowSelected=$tableContainer.find(".res-selected");
break;
default:return;
}if($procRowSelected.length){var docViewTop=$(window).scrollTop();
var docViewBottom=docViewTop+$(window).height();
var elemTop=$procRowSelected.offset().top;
var elemBottom=elemTop+$procRowSelected.height();
var isElementVisible=((elemBottom<=docViewBottom)&&(elemTop>=docViewTop));
if(!isElementVisible){$tableContainer.scrollTo($procRowSelected);
}}},setProcedureTableData:function(component){var displayProcPatRequestsInd=CERN_PROCEDURE_CONSOLIDATED.isDisplayPatientEnteredDataEnabled(component);
if(displayProcPatRequestsInd){component.m_procedureTable.setData({groups:[{id:"patient-request-group",label:"<span class='chx-section-header-label'><span class='chx-pat-req-icon'></span><span>"+proc3I18n.PATIENT_REQUESTS+"</span></span>",css:"chx-section-header",expanded:true,collapsible:false,showCount:true,records:component.m_procedurePatRequestRecords},{label:"<span class='chx-section-header-label'>"+proc3I18n.OTHER_CHART_PROCEDURES+"</span>",css:"chx-section-header",expanded:true,collapsible:false,showCount:true,groups:component.m_procedureChartRecords}]});
}else{component.m_procedureTable.setData({groups:component.m_procedureChartRecords});
}},addProcedureActionability:function(component){var compId=component.getComponentId();
component.supportedVocabularies={CPT4:8,ICD9:9,ICD10:10};
component.m_procedureTable.setOnRowClickCallback(function(data){component.selectedProcTableRowData=data.records[0].details;
CERN_PROCEDURE_CONSOLIDATED.handleMillenniumTableRowSelection(component);
});
var vocabList=component.getVocabularyList();
var procSearchContainer=$("#chxProcedureSearchContainer"+compId);
var procSearchBar=new MPageControls.NomenclatureSearch(procSearchContainer);
var procSearchInputElement=procSearchContainer.find("input");
component.vocabSelect=$("#chxProcVocabSelect"+compId);
var optionsHTML="";
var vocabularyListLen=vocabList.length;
var unsupportedVocabularies=0;
var vocabValue="";
if(vocabularyListLen===1){vocabValue=vocabList[0];
if(vocabValue&&typeof component.supportedVocabularies[vocabValue]!=="undefined"){component.vocabSelect.replaceWith("<span id='chxVocabLabel"+compId+"' data-src-flag="+component.supportedVocabularies[vocabValue]+">"+vocabValue+"</span>");
}}else{for(var i=0;
i<vocabularyListLen;
i++){vocabValue=vocabList[i];
if(vocabValue&&typeof component.supportedVocabularies[vocabValue]!=="undefined"){optionsHTML+="<option value="+component.supportedVocabularies[vocabValue]+" index="+i+">"+vocabValue+"</option>";
}else{unsupportedVocabularies++;
}}component.vocabSelect.append(optionsHTML);
}procSearchBar.setCaption(proc3I18n.ADD_PROCEDURE);
procSearchBar.setCaptionClass("secondary-text");
procSearchBar.activateCaption();
if(!component.isUpdateProcHxGranted&&!component.updateProcHxPrivExceptions.length){component.allowProcUpdates=0;
}else{component.allowProcUpdates=1;
}if(!component.viewProcedureHistory||!component.allowProcUpdates||!vocabList.length||(unsupportedVocabularies===vocabularyListLen)){procSearchInputElement.attr("disabled",true);
component.vocabSelect.addClass("hidden");
component.isProcedureSearchDisabled=true;
return;
}else{component.isProcedureSearchDisabled=false;
}procSearchBar.setSourceFlag(parseInt(component.vocabSelect.val(),10)||parseInt($("#chxVocabLabel"+compId).attr("data-src-flag"),10));
component.vocabSelect.change(function(){procSearchBar.setSourceFlag(parseInt(component.vocabSelect.val(),10));
});
procSearchBar.setDelay(500);
var nomenSearchItemTemplate=new TemplateEngine.TemplateFactory((function(){var template=TemplateEngine;
var div=template.tag("div");
return{nomenInfo:function(context){if(context.m_Data.ID===0){return div({"class":"chx-free-text-item",id:context._elementId},context.m_Data.SOURCESTRING);
}else{return div({id:context._elementId},context.m_Data.SOURCESTRING);
}}};
})());
procSearchBar.setListItemTemplate(nomenSearchItemTemplate.nomenInfo);
var origHandleReplyList=procSearchBar.handleReplyList;
procSearchBar.handleReplyList=function(replyList,reply,err){var customNomen=new MPageEntity.entities.Nomenclature();
customNomen.setId(0);
var freeTextProcedure=$("#chxProcedureSearchContainer"+compId).find("input").val();
freeTextProcedure='"'+freeTextProcedure+'"';
customNomen.setSourceString(proc3I18n.ADD_AS_FREE_TEXT.replace("{0}",freeTextProcedure));
replyList.push(customNomen);
origHandleReplyList.call(this,replyList,reply,err);
MPageControls.NomenclatureSearch.prototype.setSuggestions.call(this,replyList);
this.getList().setSelectedIndex(0);
this.getList().highlight(0);
};
procSearchBar.getList().setOnSelect(function(nomen){if(nomen.getId()===0){nomen.setSourceString(procSearchInputElement.val());
component.procedureName=procSearchInputElement.val();
}procSearchBar.activateCaption();
procSearchBar.close();
CERN_PROCEDURE_CONSOLIDATED.handleProcedureSearchSelection(component,nomen.getId(),nomen.getSourceString());
});
component.procSearchBar=procSearchBar;
procSearchInputElement.click(function(){$("#chxErrorMessage"+compId).remove();
var procSearchContent=procSearchInputElement.val();
if(!procSearchContent||procSearchContent===proc3I18n.ADD_PROCEDURE){procSearchInputElement.val("");
procSearchInputElement.addClass("secondary-text");
}else{procSearchInputElement.removeClass("secondary-text");
}});
procSearchInputElement.bind("change focusout",function(){var procSearchContent=procSearchInputElement.val();
if(!procSearchContent||procSearchContent===proc3I18n.ADD_PROCEDURE){procSearchInputElement.val(proc3I18n.ADD_PROCEDURE);
procSearchInputElement.addClass("secondary-text");
}else{procSearchInputElement.removeClass("secondary-text");
}});
},isDisplayPatientEnteredDataEnabled:function(component){return(component.shouldDisplayPatientEnteredData()&&!component.getDisplayHiProcDataInd());
},isProcedurePatientRequest:function(procObj){return(procObj.INTEROP&&procObj.INTEROP.length&&parseInt(procObj.INTEROP[0].EXT_DATA_INFO_ID,10));
},getProcedureTableRowRecord:function(component,procObj){if(!component.m_procedureTable){return;
}var procedureRowRecord=null;
var records=component.m_procedureTable.getAllRecords();
var recordsCount=records.length;
var tableRecord=null;
for(var i=0;
i<recordsCount;
i++){tableRecord=records[i];
if(procObj.UNSAVED_PROCEDURE_IND&&tableRecord.details.UNSAVED_PROCEDURE_IND){procedureRowRecord=tableRecord;
break;
}else{if(procObj.PROCEDURE_ID&&procObj.PROCEDURE_ID===tableRecord.details.PROCEDURE_ID){procedureRowRecord=tableRecord;
break;
}else{if(CERN_PROCEDURE_CONSOLIDATED.isProcedurePatientRequest(procObj)&&CERN_PROCEDURE_CONSOLIDATED.isProcedurePatientRequest(tableRecord.details)){if(procObj.INTEROP[0].EXT_DATA_INFO_ID===tableRecord.details.INTEROP[0].EXT_DATA_INFO_ID){procedureRowRecord=tableRecord;
break;
}}else{if(procObj.SURG_PROC_IND&&tableRecord.details.SURG_PROC_IND){if((procObj.SURG_CASE_NBR_FORMATTED===tableRecord.details.SURG_CASE_NBR_FORMATTED)&&(procObj.DISPLAY_AS===tableRecord.details.DISPLAY_AS)){procedureRowRecord=tableRecord;
break;
}}}}}}return procedureRowRecord;
},acknowledgeProcPatientRequest:function(procObj,component){if(!CERN_PROCEDURE_CONSOLIDATED.isProcedurePatientRequest(procObj)){return;
}var procReconcileCAPTimer=new CapabilityTimer("CAP:MPG Histories_Procedure History Reconcile Patient Entered Data");
procReconcileCAPTimer.capture();
var proceduresRecordData=component.getProceduresRecordData();
var criterion=component.getCriterion();
var codesArray=MP_Util.LoadCodeListJSON(proceduresRecordData.CODES);
var extDataInfoId=procObj.INTEROP[0].EXT_DATA_INFO_ID;
var statusCode=MP_Util.GetCodeByMeaning(codesArray,"ACKNOWLEDGED").codeValue;
var chartReferenceId=procObj.INTEROP[0].ID;
var personnelId=criterion.provider_id;
var encounterId=criterion.encntr_id;
var requestJson='{"REQUESTIN":{"UPDATESTATUS":[{"EXT_DATA_INFO_ID":'+extDataInfoId+'.0,"STATUS_CODE":'+statusCode+'.0,"CHART_REFERENCE_ID":'+chartReferenceId+'.0,"PERSONNEL_ID":'+personnelId+'.0,"ENCNTR_ID":'+encounterId+".0}]}}";
var scriptRequest=new ScriptRequest();
scriptRequest.setProgramName("mp_exec_std_request");
scriptRequest.setRawDataIndicator(true);
scriptRequest.setDataBlob(requestJson);
scriptRequest.setParameterArray(["^MINE^","^^",3202004,3202004,964756]);
scriptRequest.setResponseHandler(function(scriptReply){try{var responseData=JSON.parse(scriptReply.getResponse());
if(responseData.RECORD_DATA.STATUS.SUCCESS_INDICATOR===1){component.retrieveComponentData();
}else{CERN_PROCEDURE_CONSOLIDATED.createSidePanelErrorBanner(component);
}}catch(err){CERN_PROCEDURE_CONSOLIDATED.createSidePanelErrorBanner(component);
}});
scriptRequest.performRequest();
},createSidePanelErrorBanner:function(component){var compId=component.getComponentId();
var alertBanner=new MPageUI.AlertBanner();
alertBanner.setType(MPageUI.ALERT_OPTIONS.TYPE.ERROR);
alertBanner.setPrimaryText(proc3I18n.REMOVE_PAT_REQUEST_ERROR_TEXT);
$("#chxProcAlert"+compId).html(alertBanner.render());
},getProcPatientRequestType:function(procObj,component){var proceduresRecordData=component.getProceduresRecordData();
var codesArray=MP_Util.LoadCodeListJSON(proceduresRecordData.CODES);
var patRequestType="";
if(CERN_PROCEDURE_CONSOLIDATED.isProcedurePatientRequest(procObj)){patRequestType=MP_Util.GetValueFromArray(procObj.INTEROP[0].REQUEST_TYPE,codesArray).meaning;
}return patRequestType;
},handleHITableRowSelection:function(component,selectedProcRow){var selectedProcedureDetails={};
var selectedRow=$(selectedProcRow);
if(selectedRow.hasClass("res-selected")){selectedRow.removeClass("res-selected");
component.procContentTable.removeClass("chx-sp-adjustment");
component.procSidePanel.hidePanel();
component.procSidePanel.setApplyBodyContentsPadding(false);
component.procHistPanelShowing=false;
}else{if(component.hiTableObj){component.hiTableObj.find(".res-selected").removeClass("res-selected");
}if(component.m_procedureTable){component.m_procedureTable.deselectAll();
}selectedRow.addClass("res-selected");
var procedureId=selectedRow.attr("data-proc-id");
var procObj=component.getProceduresRecordData().PROC;
for(var idx in procObj){if(procObj.hasOwnProperty(idx)&&procObj[idx].PROCEDURE_ID==procedureId){selectedProcedureDetails=procObj[idx];
break;
}}CERN_PROCEDURE_CONSOLIDATED.showProcedureInSidePanel(selectedProcedureDetails,component);
}CERN_PROCEDURE_CONSOLIDATED.scrollIntoProcedureRow(component,"HI");
},handleMillenniumTableRowSelection:function(component){var procedureRowData=component.selectedProcTableRowData;
var procedureSelectionsCount=component.m_procedureTable.getSelectionData().length;
if(procedureSelectionsCount){if(procedureRowData.UNSAVED_PROCEDURE_IND){CERN_PROCEDURE_CONSOLIDATED.openSidePanelForNewProcedure(component);
}else{if(component.m_isProcedureSaved===false){CERN_PROCEDURE_CONSOLIDATED.showConfirmationModal(component,function(){CERN_PROCEDURE_CONSOLIDATED.triggerTableRowClick(component,procedureRowData);
});
}else{if(component.hiTableObj){component.hiTableObj.find(".res-selected").removeClass("res-selected");
}CERN_PROCEDURE_CONSOLIDATED.showProcedureInSidePanel(procedureRowData,component);
}}}else{component.procContentTable.removeClass("chx-sp-adjustment");
component.procSidePanel.hidePanel();
component.procHistPanelShowing=false;
}},handleProcedureSearchSelection:function(component,nomenclatureID,procedureName){component.onsetDtControl=new DateSelector();
component.onsetDtControl.retrieveRequiredResources(function(){var compId=component.getComponentId();
component.m_isProcedureSaved=false;
component.m_isProcedureModified=false;
component.vocabSelect.attr("disabled",true);
component.procSearchBar.disable();
component.procSearchBar.activateCaption();
component.newProcDetails={NOMENCLATURE_ID:nomenclatureID,PROCEDURE_NAME:procedureName,SURG_PROC_IND:0,UNSAVED_PROCEDURE_IND:true};
CERN_PROCEDURE_CONSOLIDATED.addNewProcedureRecordToTable(component);
});
},showProcedureInSidePanel:function(procedureDetailsItem,component){var compId=component.getComponentId();
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var dateTime=new Date();
var onsetDt="";
var onsetDateLocaleFormat="";
var displayDate="--";
var actionsHtml="";
var alertBannerHtml='<div id="chxProcAlert'+compId+'" class="chx-sp-banner-container"></div>';
var patRequestType=procedureDetailsItem.PAT_REQUEST_TYPE;
var isUpdatePrivGranted=false;
var removeReqButton=null;
if(patRequestType){isUpdatePrivGranted=CERN_PROCEDURE_CONSOLIDATED.isPatRequestUpdatePrivGranted(procedureDetailsItem,component);
if(isUpdatePrivGranted){var buttonStyleEnum=MPageUI.BUTTON_OPTIONS.STYLE;
removeReqButton=(new MPageUI.Button()).setLabel(proc3I18n.REMOVE_REQUEST).setStyle(buttonStyleEnum.SECONDARY).setOnClickCallback(function(){CERN_PROCEDURE_CONSOLIDATED.acknowledgeProcPatientRequest(procedureDetailsItem,component);
});
actionsHtml='<div class="chx-remove-pat-request">'+removeReqButton.render()+"</div>";
}}else{actionsHtml="<div class='sp-button' id='chxRemoveButton"+compId+"'>"+i18n.discernabu.CONFIRM_REMOVE+"</div><div class='sp-button' id='chxModifyButton"+compId+"'>"+proc3I18n.MODIFY+"</div>";
}CERN_PROCEDURE_CONSOLIDATED.createSidePanelObj(component);
var sidePanelHtml="";
if(patRequestType){sidePanelHtml+=CERN_PROCEDURE_CONSOLIDATED.buildPatRequestSidePanelSection(procedureDetailsItem,patRequestType,component,isUpdatePrivGranted);
}if(procedureDetailsItem.most_recent_procedure){var imgUrl=component.getCriterion().static_content+"/images/6965.png";
imgUrl="<span><img height='22' width='22' style='float:left' id='externalDataImg' src= '"+imgUrl+"'></span>";
var label="<p id = 'externalDataLabel' class='secondary-text';>"+imgUrl+"<span style='margin-left:5px text-align:left;padding-left: 7px;'>"+proc3I18n.HI_BTN_LBL_UPON_CLICK+"</span></p>";
label+="<div class='chx-sp-date-container'>"+procedureDetailsItem.most_recent_procedure.source.partition_description+"<div class='sp-separator'>&nbsp;</div>";
sidePanelHtml+=label;
if(!patRequestType){sidePanelHtml+="</div><div><div class='chx-hi-sp-date-provider' id='procedureSPDateContainer"+compId+"'><dd class='secondary-text'>"+proc3I18n.PROCEDURE_DATE+"</dd><dd class='chx-date'>"+procedureDetailsItem.ONSET_UTC+"</dd></div><div class='chx-hi-sp-date-provider'><dd class='secondary-text'>"+proc3I18n.PROVIDER+"</dd><dd class='chx-date'>"+procedureDetailsItem.most_recent_procedure.providers[0].name+"</dd></div></div>";
}component.procSidePanel.setApplyBodyContentsPadding(true);
}else{if(patRequestType!=="ADD"&&procedureDetailsItem.ONSET.length){var precisionText=procedureDetailsItem.PROC_DT_TM_PREC_CD?MP_Util.GetValueFromArray(procedureDetailsItem.PROC_DT_TM_PREC_CD,component.datePrecisionCodes).display:"";
onsetDt=procedureDetailsItem.ONSET_UTC;
dateTime.setISO8601(onsetDt);
switch(procedureDetailsItem.DATE_FLAG){case 0:case 1:onsetDateLocaleFormat=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_2YEAR);
break;
case 2:onsetDateLocaleFormat=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_MONTH_4YEAR_NO_DATE);
break;
case 3:onsetDateLocaleFormat=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_4YEAR);
break;
}displayDate=precisionText+" "+onsetDateLocaleFormat;
}if(!procedureDetailsItem.ONSET.length&&procedureDetailsItem.PROC_DT_TM_PREC_CD>0){displayDate=MP_Util.GetValueFromArray(procedureDetailsItem.PROC_DT_TM_PREC_CD,component.datePrecisionCodes).display;
}if(patRequestType==="ADD"){sidePanelHtml+="<div id='sidePanelScrollContainer"+compId+"'></div>";
}else{sidePanelHtml+="<div id='sidePanelScrollContainer"+compId+"'><div class='chx-sp-date-container sp-body-contents-padding' id='procedureSPDateContainer"+compId+"'><dl><dd class='secondary-text'>"+proc3I18n.PROCEDURE_DATE+"</dd><dd class='chx-side-panel-proc-date'>"+displayDate+"</dd></dl>"+CERN_PROCEDURE_CONSOLIDATED.buildProcedureSidePanelDetailsHTML(procedureDetailsItem)+"</div></div>";
}}component.procSidePanel.setTitleText(procedureDetailsItem.DISPLAY_AS);
component.procSidePanel.setActionsAsHTML(actionsHtml);
component.procSidePanel.setContents(sidePanelHtml,component.sidePanelId);
component.procSidePanel.showPanel();
if(removeReqButton){removeReqButton.attachEvents();
}component.procHistPanelShowing=true;
var removeBtn=$("#chxRemoveButton"+compId);
var modifyBtn=$("#chxModifyButton"+compId);
if(!procedureDetailsItem.IS_MODIFIABLE||procedureDetailsItem.most_recent_procedure){removeBtn.addClass("hidden");
modifyBtn.addClass("hidden");
}var self=component;
removeBtn.click(function(){CERN_PROCEDURE_CONSOLIDATED.removeProcedureRow(self,procedureDetailsItem);
});
modifyBtn.click(function(){CERN_PROCEDURE_CONSOLIDATED.modifyProcedureDetails(self,procedureDetailsItem);
});
if(patRequestType){var sidePanelContainer=$("#sidePanel"+compId);
sidePanelContainer.on("click",".chx-side-panel-tgl",function(){var patReqSubSection=sidePanelContainer.find(".chx-expand-content");
if(patReqSubSection.hasClass("chx-section-closed")){$(this).removeClass("chx-show-expand-btn").addClass("chx-hide-expand-btn");
patReqSubSection.removeClass("chx-section-closed");
}else{$(this).removeClass("chx-hide-expand-btn").addClass("chx-show-expand-btn");
patReqSubSection.addClass("chx-section-closed");
}});
if(CERN_Platform.inMillenniumContext()){$(".chx-sp-proc-link").click(function(){CERN_PROCEDURE_CONSOLIDATED.openProceduresTab(component);
});
}}},buildProcedureModificationHtml:function(procedureRequestObj){var modificationsHtml='<ul class="chx-sp-item-list">';
var procRequestInfo=procedureRequestObj.INTEROP[0];
if(procRequestInfo.PROCEDURE_NAME.STATUS){var modifiedProcName=procRequestInfo.PROCEDURE_NAME.MODIFIED_NAME||"--";
modificationsHtml+="<li>"+proc3I18n.CHANGE+" "+proc3I18n.NAME+" "+proc3I18n.FROM+' "'+procRequestInfo.PROCEDURE_NAME.NAME+'" '+proc3I18n.TO+' "'+modifiedProcName+'"</li>';
}if(procRequestInfo.FT_DATE.STATUS){var modifiedProcDate=procRequestInfo.FT_DATE.MODIFIED_FT_DATE||"--";
modificationsHtml+="<li>"+proc3I18n.CHANGE+" "+proc3I18n.DATE+" "+proc3I18n.FROM+' "'+procRequestInfo.FT_DATE.FT_DATE+'" '+proc3I18n.TO+' "'+modifiedProcDate+'"</li>';
}modificationsHtml+="</ul>";
return modificationsHtml;
},buildPatRequestSidePanelSection:function(procedureRequestObj,requestType,component,isUpdatePrivGranted){var inMillenniumContextInd=CERN_Platform.inMillenniumContext();
var procRequestInfo=procedureRequestObj.INTEROP[0];
var submittedDtTm=procRequestInfo.SUBMITTED_ON.substr(6).replace(")/","");
var interopDtTm=new Date();
interopDtTm.setISO8601(submittedDtTm);
var submittedDtTmDisplay=interopDtTm.format("longDateTime3");
var proceduresRecordData=component.getProceduresRecordData();
var codesArray=MP_Util.LoadCodeListJSON(proceduresRecordData.CODES);
var requestSource=MP_Util.GetValueFromArray(procRequestInfo.SUBMITTED_BY_TYPE,codesArray).display;
var requestActionMsg="";
var procLinkSetting=component.getProceduresLink();
var mainHeaderLink=component.getLink();
var isProcLinkDisabled=!(inMillenniumContextInd&&(procLinkSetting||mainHeaderLink));
var proceduresLink=component.createTabLink(proc3I18n.PROCEDURES,isProcLinkDisabled,"chx-sp-proc-link");
var requestionActionHtml="";
var requestDetailsHtml="";
var requestSourceHtml='<dd class="chx-sp-detail-group"><dl class="chx-sp-details-sub-section"><dt class="chx-request-label">'+proc3I18n.ORIGINATING_SOURCE+"</dt><dd>"+(requestSource||"--")+'</dd></dl><dl class="chx-sp-details-sub-section"><dt class="chx-request-label">'+proc3I18n.ORIGINATING_AUTHOR+"</dt><dd>"+(procRequestInfo.SUBMITTED_BY_NAME||"--")+"</dd></dl></dd>";
var patientComment=(procRequestInfo.COMMENTS.length)?procRequestInfo.COMMENTS[0].COMMENT:"--";
var requestCommentHtml='<dd><dl><dt class="chx-request-label">'+proc3I18n.PATIENT_COMMENT+"</dt><dd>"+patientComment+"</dd></dl></dd>";
switch(requestType){case"ADD":requestActionMsg=(isUpdatePrivGranted)?proc3I18n.ADD_THIS_PROCEDURE_BY_SEARCH:"";
requestionActionHtml='<dd><dl class="chx-sp-detail-group"><dt class="chx-request-label">'+proc3I18n.ADDITION+"</dt><dt>"+requestActionMsg+"</dt></dl></dd>";
requestDetailsHtml='<dd><dl class="chx-sp-detail-group"><dt class="chx-request-label">'+proc3I18n.PROCEDURE_DATE+"</dt><dd>"+procedureRequestObj.ONSET+"</dd></dl></dd>";
break;
case"UPDATE":requestActionMsg=(isUpdatePrivGranted)?proc3I18n.UPDATE_THIS_PROCEDURE+" "+proc3I18n.WITHIN+" "+proceduresLink:"";
requestionActionHtml='<dd><dl class="chx-sp-detail-group"><dt class="chx-request-label">'+proc3I18n.MODIFICATION+"</dt><dt>"+requestActionMsg+"</dt><div>"+CERN_PROCEDURE_CONSOLIDATED.buildProcedureModificationHtml(procedureRequestObj)+"</div></dl></dd>";
break;
case"REMOVE":requestActionMsg=(isUpdatePrivGranted)?proc3I18n.REMOVE_THIS_PROCEDURE+" "+proc3I18n.WITHIN+" "+proceduresLink:"";
requestionActionHtml='<dd><dl class="chx-sp-detail-group"><dt class="chx-request-label">'+proc3I18n.REMOVAL+"</dt><dt>"+requestActionMsg+"</dt></dl></dd>";
break;
}var requestSectionHtml='<div class="chx-sp-body-contents"><dl class="chx-sp-detail-group"><dt class="chx-expand-content-section"><span class="chx-side-panel-tgl chx-hide-expand-btn" title="collapse">&nbsp;</span><span class="chx-pat-req-icon">&nbsp</span><span>'+proc3I18n.OUTSIDE_REQUESTS+'</span><span class="chx-pull-right">'+(submittedDtTmDisplay||"--")+'</span></dt></dl><div class="chx-expand-content"><dl>'+requestionActionHtml+requestDetailsHtml+requestSourceHtml+requestCommentHtml+"</dl></div></div>";
requestSectionHtml+='<div class="sp-separator2">&nbsp;</div>';
return requestSectionHtml;
},isProcUpdatePrivException:function(nomenclatureID,component){var procPrivExceptions=component.updateProcHxPrivExceptions;
var exceptionsLen=procPrivExceptions.length;
var nomenclatureFound=false;
for(var i=0;
i<exceptionsLen&&!nomenclatureFound;
i++){if(procPrivExceptions[i].NOMENCLATURE_ID===nomenclatureID){nomenclatureFound=true;
}}return nomenclatureFound;
},isPatRequestUpdatePrivGranted:function(procObj,component){var procNomenclatureId=procObj.NOMENCLATURE_ID;
var updatePriv=component.isUpdateProcHxGranted;
var updatePrivGranted=false;
if(procNomenclatureId){var isProcPrivException=CERN_PROCEDURE_CONSOLIDATED.isProcUpdatePrivException(procNomenclatureId,component);
if(updatePriv){if(!isProcPrivException){updatePrivGranted=true;
}}else{if(!updatePriv&&isProcPrivException){updatePrivGranted=true;
}}}else{if(updatePriv){updatePrivGranted=true;
}}return updatePrivGranted;
},createSegmentedControl:function(component){var displayHiDataInd=component.getDisplayHiProcDataInd();
var procHIDataValid=(component.getProcHiDataValidity())&&component.m_hiTotalResults;
var segment=new MPageUI.SegmentedControl();
segment.addSegment({label:proc3I18n.PATIENT_REQUESTS,selected:!displayHiDataInd,onSelect:function(){MP_Util.LoadSpinner(component.m_externalProcDataTable.getNamespace()+"table");
component.setDisplayProcHiDataInd(false);
component.retrieveComponentData();
}});
segment.addSegment({label:proc3I18n.OUTSIDE_RECORDS,selected:displayHiDataInd,disabled:!procHIDataValid,onSelect:function(){MP_Util.LoadSpinner("proceduresMainContainer"+component.getComponentId());
component.setDisplayProcHiDataInd(true);
component.retrieveComponentData();
}});
return segment;
},openProceduresTab:function(component){var criterion=component.getCriterion();
var proceduresLink=component.getProceduresLink();
var sidePanelTabLink=proceduresLink?proceduresLink:component.getLink();
var sParms="/PERSONID="+criterion.person_id+" /ENCNTRID="+criterion.encntr_id+" /FIRSTTAB=^"+sidePanelTabLink+"^";
APPLINK(0,criterion.executable,sParms);
},showConfirmationModal:function(component,continueCallBackFn){var compId=component.getComponentId();
component.procSidePanel.showPanel();
function resetSelectionToUnsavedProcedure(){component.m_isProcedureSaved=false;
component.m_procedureTable.deselectAll();
var procObj=(component.m_isProcedureModified)?component.updatedProcDetails:component.newProcDetails;
var unsavedProcRowRecord=CERN_PROCEDURE_CONSOLIDATED.getProcedureTableRowRecord(component,procObj);
component.m_procedureTable.deselectAll();
component.m_procedureTable.select({records:[unsavedProcRowRecord]});
}MP_ModalDialog.deleteModalDialogObject("unsavedProcedureModal");
var unsavedProcedureModalObj=MP_ModalDialog.retrieveModalDialogObject("unsavedProcedureModal");
if(!unsavedProcedureModalObj){unsavedProcedureModalObj=new ModalDialog("unsavedProcedureModal");
var unsavedProcContinueBtn=new ModalButton("unsavedProcContinueBtn");
unsavedProcContinueBtn.setText(i18n.CONTINUE);
unsavedProcContinueBtn.setFocusInd(true);
unsavedProcContinueBtn.setOnClickFunction(function(){if(component.m_isProcedureModified){component.m_procedureTable.deselectAll();
}else{CERN_PROCEDURE_CONSOLIDATED.removeNewProcedureRecordFromTable(component);
}component.procContentTable.removeClass("chx-sp-adjustment");
component.procSidePanel.hidePanel();
component.m_LostDataAndContinue=true;
component.procSearchBar.enable();
component.procSearchBar.activateCaption();
component.m_isProcedureSaved=true;
component.vocabSelect.prop("disabled",false);
if(continueCallBackFn){continueCallBackFn();
}$("#chxErrorMessage"+compId).remove();
});
unsavedProcedureModalObj.setHeaderCloseFunction(function(){resetSelectionToUnsavedProcedure();
});
var unsavedProcCancelBtn=new ModalButton("unsavedProcCancelBtn");
unsavedProcCancelBtn.setText(i18n.CANCEL);
unsavedProcCancelBtn.setFocusInd(true);
unsavedProcCancelBtn.setCloseOnClick(true);
unsavedProcCancelBtn.setOnClickFunction(function(){resetSelectionToUnsavedProcedure();
});
unsavedProcedureModalObj.setTopMarginPercentage(25).setRightMarginPercentage(30).setBottomMarginPercentage(25).setLeftMarginPercentage(30).setIsBodySizeFixed(false);
unsavedProcedureModalObj.setHeaderTitle(proc3I18n.UNSAVED_CHANGES);
unsavedProcedureModalObj.addFooterButton(unsavedProcContinueBtn);
unsavedProcedureModalObj.addFooterButton(unsavedProcCancelBtn);
MP_ModalDialog.addModalDialogObject(unsavedProcedureModalObj);
MP_ModalDialog.showModalDialog("unsavedProcedureModal");
$("#unsavedProcedureModalbody").html("<div class='chx-modal-container'><div class='chx-warning-message'><span>"+proc3I18n.UNSAVED_MESSAGE+"</span></div></div>");
}},createHIAddDataControl:function(component,hiDataRetreivalStatus){var componentId=component.getComponentId();
var hiAddDataContainer="<div id='procHiControlBanner"+componentId+"' class='chx-hi-ext-label'>";
var imgUrl=component.getCriterion().static_content+"/images/";
var imgSuccess="6965.png";
imgUrl+=imgSuccess;
var msg="";
var hiTitleSpan;
var btnSpan;
if(hiDataRetreivalStatus){if(component.m_hiTotalResults>0){msg=proc3I18n.HI_EXT_LABEL;
btnSpan="<span style='float:right'><button ";
btnSpan+="class='chx-hi-ext-btn' id='hiDataControlBtn";
btnSpan+=component.getComponentId();
btnSpan+="'>"+proc3I18n.HI_BTN_TXT+"</button></span>";
}else{return"";
}}else{msg=proc3I18n.EXTERNAL_DATA_LABEL_ERR;
btnSpan="";
}hiTitleSpan="<span style='margin-left:5px; padding-top:5px; font-weight: bold;'>";
hiTitleSpan+=msg;
hiTitleSpan+="</span>";
var imgSpan="<span><img height='22'	width='22' style='float:left' id='externalData' src= '"+imgUrl+"'></span>";
hiAddDataContainer+=imgSpan;
hiAddDataContainer+=hiTitleSpan;
hiAddDataContainer+=btnSpan;
hiAddDataContainer+="</div><br>";
return hiAddDataContainer;
},onRowClick:function(component,selectedProc){if(!selectedProc){return;
}var ind=selectedProc.getAttribute("id").replace(component.m_externalProcDataTable.getNamespace()+":row","");
$(selectedProc).attr("data-proc-id",component.externalProcHistory[ind]["id"]);
if(component.extProcSelInd==selectedProc.getAttribute("id")){component.procSidePanel.m_cornerCloseButton.click();
component.extProcSelInd="";
component.procHistPanelShowing=false;
}else{$("#"+component.m_externalProcDataTable.getNamespace()+"table").addClass("chx-hi-hide-mode");
component.extProcSelInd=selectedProc.getAttribute("id");
CERN_PROCEDURE_CONSOLIDATED.handleHITableRowSelection(component,selectedProc);
}},processExtDataForRender:function(component){for(var i=0;
i<component.externalProcHistory.length;
i++){component.externalProcHistory[i].PROCEDURE_ID=component.externalProcHistory[i]["id"];
component.externalProcHistory[i].DISPLAY_AS=component.externalProcHistory[i]["name"];
component.externalProcHistory[i].ONSET=component.externalProcHistory[i].most_recent_procedure.start_datetime;
component.externalProcHistory[i].ONSET_UTC=component.externalProcHistory[i].most_recent_procedure.start_datetime;
var onsetDt=component.externalProcHistory[i].ONSET_UTC;
if(onsetDt){var dateTime=new Date();
dateTime.setISO8601(onsetDt);
onsetDt=MP_Util.GetDateFormatter().format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_TIME_2YEAR);
}else{onsetDt="--";
}component.externalProcHistory[i].ONSET_UTC="<span class='chx-dt-hd' >"+onsetDt+"</span>";
if(component.externalProcHistory[i].most_recent_procedure.providers.length<1){var provider={};
provider.name="--";
provider.relationship="--";
component.externalProcHistory[i].most_recent_procedure.providers.push(provider);
}}},validateHIData:function(reply){this.m_HIvalidData=false;
var recordData;
try{if(typeof reply==="object"){recordData=reply;
}else{recordData=JSON.parse(reply).RECORD_DATA;
}var hiStatus=recordData.STATUS_DATA.SUBEVENTSTATUS[0].OPERATIONSTATUS;
if(hiStatus==="S"){var procedures=JSON.parse(recordData.PROXYREPLY.HTTPREPLY.BODY);
this.m_hiTotalResults=procedures.total_results;
this.m_HIvalidData=true;
}else{this.m_HIvalidData=false;
}}catch(err){MP_Util.LogJSError(err,this,"consolidated-procedurehistory.js","validateHIData");
}},loadHIProceduresPage:function(component){var criterion=component.getCriterion();
var request=null;
var sendAr=[];
var hiPrLookUpKey="null";
var hiTestUri="null";
var aliasType=(component.getAliasType().length>0)?component.getAliasType():"null";
var aliasPoolCd=0;
if($.trim(component.getHILookupKey()).length>0){hiPrLookUpKey=component.getHILookupKey();
}if($.trim(component.getHITestUri()).length>0){hiTestUri=component.getHITestUri();
}if(component.getAliasPoolCd()){aliasPoolCd=component.getAliasPoolCd()+".0";
}sendAr.push("^MINE^",criterion.person_id+".0","0.0",criterion.provider_id+".0",criterion.ppr_cd+".0",1,"^"+aliasType+"^",aliasPoolCd,"^"+hiPrLookUpKey+"^","^"+hiTestUri+"^",this.pageIndex);
var request=new MP_Core.ScriptRequest(self,component.getComponentLoadTimerName());
request.setProgramName("MP_GET_CONSOLIDATED_PROCEDURES");
request.setParameters(sendAr);
request.setAsync(true);
var self=this;
var comp=component;
MP_Core.XMLCCLRequestCallBack(self,request,function(reply){try{var response=reply.getResponse();
self.validateHIData(response);
if(self.m_HIvalidData){comp.externalProcHistory=JSON.parse(response.PROXYREPLY.HTTPREPLY.BODY).groups;
self.processExtDataForRender(comp);
comp.m_externalProcDataTable.clearData();
comp.m_externalProcDataTable.bindData(comp.externalProcHistory);
comp.hiTableObj.html(comp.m_externalProcDataTable.render());
$("#"+comp.m_externalProcDataTable.getNamespace()+"tableBody").on("click",".result-info",function(event){CERN_PROCEDURE_CONSOLIDATED.onRowClick(comp,this);
});
comp.m_externalProcDataTable.finalize();
if(comp.procHistPanelShowing){if(comp.extProcSelInd!=""){var selectedProc=comp.hiTableObj.find(".result-info")[0];
$(selectedProc).attr("data-proc-id",comp.externalProcHistory[0]["id"]);
comp.extProcSelInd=selectedProc.getAttribute("id");
CERN_PROCEDURE_CONSOLIDATED.handleHITableRowSelection(comp,selectedProc);
}}}else{var errMsg="Error in retriving external data";
comp.hiTableObj.html(MP_Util.HandleErrorResponse("",errMsg));
}}catch(err){MP_Util.LogJSError(err,self,"consolidated-procedurehistory.js","loadHIProceduresPage");
}finally{comp.hiTableObj.find(".loading-screen").remove();
comp.resizeComponent();
}});
},showHIData:function(component){var hiProcTimer=new CapabilityTimer("CAP:MPG Display HealtheIntent Data");
hiProcTimer.capture();
this.processExtDataForRender(component);
component.extProcSelInd="";
var compId=component.getComponentId();
var $procControlsContainer=$("#chxContent"+compId).find(".chx-proc-tab-controls");
var $procTablesContainer=$("#chxContent"+compId).find(".chx-proc-table-content");
var imgUrl=component.getCriterion().static_content+"/images/6965.png";
imgUrl="<span><img height='22' width='22' style='float:left' id='externalDataImg' src= '"+imgUrl+"'></span>";
var label="<p>"+imgUrl+"<span style='margin-left:5px text-align:left;padding-left: 7px;font-weight: bold;'>"+proc3I18n.HI_BTN_LBL_UPON_CLICK+"</span></p><br>";
$procControlsContainer.append(label);
var hiDataTableHTML="<div id='hiTableContainer"+compId+"'class='chx-hi-table-container'>";
component.m_externalProcDataTable=new ComponentTable();
component.m_externalProcDataTable.setNamespace("hiDataConsProcHist"+compId);
var nameColumn=new TableColumn();
nameColumn.setColumnId("Procedure");
nameColumn.setCustomClass("chx-hi-proc-name");
nameColumn.setColumnDisplay(proc3I18n.PROCEDURE);
nameColumn.setPrimarySortField("NAME_TEXT");
nameColumn.setIsSortable(true);
nameColumn.setRenderTemplate("${name}");
var providerColumn=new TableColumn();
providerColumn.setColumnId("Provider");
providerColumn.setCustomClass("chx-hi-hide");
providerColumn.setColumnDisplay(proc3I18n.PROVIDER);
providerColumn.setPrimarySortField("PROVIDER");
providerColumn.setIsSortable(true);
providerColumn.setRenderTemplate("${most_recent_procedure.providers[0].name}");
var onsetDateColumn=new TableColumn();
onsetDateColumn.setColumnId("OnsetDate");
onsetDateColumn.setCustomClass("chx-hi-hide");
onsetDateColumn.setColumnDisplay(proc3I18n.PROCEDURE_DATE);
onsetDateColumn.setPrimarySortField("OnsetDate");
onsetDateColumn.setIsSortable(true);
onsetDateColumn.setRenderTemplate("${ONSET_UTC}");
component.m_externalProcDataTable.addColumn(nameColumn);
component.m_externalProcDataTable.addColumn(providerColumn);
component.m_externalProcDataTable.addColumn(onsetDateColumn);
component.m_externalProcDataTable.bindData(component.externalProcHistory);
var procedures=component.getProceduresRecordData().PROC;
for(var i=0;
i<component.externalProcHistory.length;
i++){procedures.push(component.externalProcHistory[i]);
}hiDataTableHTML+=component.m_externalProcDataTable.render();
hiDataTableHTML+="</div>";
if(component.hiMoreDataAvail&&component.m_hiTotalResults&&component.m_hiTotalResults>20){var spinnerDiv="<div id='spinner"+component.getComponentId()+"' style='position:relative'>";
var self=this;
var noOfPages=Math.ceil(component.m_hiTotalResults/20);
var lastPageNo=0;
var comp=component;
this.pager=new MPageUI.Pager().setNumberPages(noOfPages).setCurrentPageLabelPattern("${currentPage}/${numberPages}").setNextLabel(proc3I18n.NEXT+" >").setPreviousLabel("< "+proc3I18n.PREV);
this.pager.setOnPageChangeCallback(function(){MP_Util.LoadSpinner(comp.m_externalProcDataTable.getNamespace()+"table");
if(lastPageNo<arguments[0].currentPage){self.pageIndex=self.pageIndex+20;
}else{self.pageIndex=this.pageIndex-20;
}self.loadHIProceduresPage(comp);
lastPageNo=arguments[0].currentPage;
});
var pagerDiv="<div id='procedureExtDataPager"+compId+"' class='chx-row-pager'>"+this.pager.render()+"</div>";
$procTablesContainer.prepend(spinnerDiv+hiDataTableHTML+"</div>"+pagerDiv);
this.pager.attachEvents();
}else{$procTablesContainer.prepend(hiDataTableHTML);
}$("#"+component.m_externalProcDataTable.getNamespace()+"tableBody").on("click",".result-info",function(event){CERN_PROCEDURE_CONSOLIDATED.onRowClick(component,this);
});
component.m_externalProcDataTable.finalize();
component.hiTableObj=$("#"+component.m_externalProcDataTable.getNamespace()+"table");
},modifyProcedureDetails:modifyProcedureDetails,removeProcedureRow:removeProcedureRow,setProcPatientRequestDisplay:setProcPatientRequestDisplay,sortProcedure:sortProcedure,sortProceduresByPatientRequest:sortProceduresByPatientRequest,sortSecondaryProcedures:sortSecondaryProcedures};
}();
