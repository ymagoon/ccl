var CERN_Platform={m_inMillenniumContext:null,m_inPatientChartContext:null,m_inTouchMode:false,m_scriptServletLoc:"",m_webappRoot:null,m_criterion:null};
CERN_Platform.getCriterion=function(){if(!this.m_criterion){try{this.m_criterion=JSON.parse(m_criterionJSON);
}catch(err){logger.logError("Unable to successfully parse the criterion JSON: "+m_criterionJSON);
throw new Error("Unable to successfully parse the criterion JSON");
}}return this.m_criterion;
};
CERN_Platform.getDiscernObject=function(objectName){try{return this.inMillenniumContext()?window.external.DiscernObjectFactory(objectName):this.getDiscernObjectWebEquivalent(objectName);
}catch(exe){logger.logError("In CERN_Platform.getDiscernObject: An error occurred when trying to retrieve: "+objectName+" from window.external.DiscernObjectFactory");
return null;
}};
CERN_Platform.getDiscernObjectWebEquivalent=function(discernObjectName){switch(discernObjectName){case"DOCUTILSHELPER":return null;
case"AUTOTEXTHELPER":return null;
case"PVFRAMEWORKLINK":return pvFrameworkLink;
case"INFOBUTTONLINK":return new Infobutton();
case"CHECKPOINT":return new webCheckpoint.checkpoint();
case"PVCONTXTMPAGE":return WebPVContxtMpage;
default:return null;
}};
CERN_Platform.inMillenniumContext=function(){if(this.m_inMillenniumContext===null){this.m_inMillenniumContext=(window.external&&(typeof window.external.DiscernObjectFactory!=="undefined"))?true:false;
}return this.m_inMillenniumContext;
};
CERN_Platform.inPatientChartContext=function(){if(this.m_inPatientChartContext===null){var criterion=this.getCriterion().CRITERION;
this.m_inPatientChartContext=criterion.PERSON_ID?true:false;
}return this.m_inPatientChartContext;
};
CERN_Platform.isTouchModeEnabled=function(){return this.m_inTouchMode;
};
CERN_Platform.setScriptServletLocation=function(servletLocation){this.m_scriptServletLoc=servletLocation;
};
CERN_Platform.getScriptServletLocation=function(){return this.m_scriptServletLoc;
};
CERN_Platform.setTouchModeEnabled=function(touchModeFlag){this.m_inTouchMode=touchModeFlag;
if(touchModeFlag){$("body").addClass("touch-mode");
}};
CERN_Platform.setLocation=function(newUrl){window.location.assign(newUrl);
};
CERN_Platform.refreshMPage=function(){var criterion=CERN_Platform.getCriterion().CRITERION;
var cclParams=null;
if(CERN_Platform.inPatientChartContext()){cclParams=["^MINE^",criterion.PERSON_ID+".0",criterion.ENCNTRS[0].ENCNTR_ID+".0",criterion.PRSNL_ID+".0",criterion.POSITION_CD+".0",criterion.PPR_CD+".0","^"+criterion.EXECUTABLE+"^","^"+CERN_driver_static_content.replace(/\\/g,"\\\\")+"^","^"+CERN_driver_mean+"^",criterion.DEBUG_IND];
}else{cclParams=["^MINE^",criterion.PRSNL_ID+".0",criterion.POSITION_CD+".0","^"+criterion.EXECUTABLE+"^","^"+CERN_driver_static_content.replace(/\\/g,"\\\\")+"^","^"+CERN_driver_mean+"^",criterion.DEBUG_IND];
}CCLLINK(CERN_driver_script,cclParams.join(","),1);
};
CERN_Platform.CCLLINK=function(reportName,prompts,linkDestination){if(/^MP_UNIFIED_.*DRIVER/.test(reportName.toUpperCase())){CERN_Platform.setLocation(window.location.href);
}else{logger.logWarning("CCLLINK is not supported outside of Millennium for program: "+reportName+".");
}};
CERN_Platform.MPAGES_EVENT=function(eventType,eventParams){return;
};
CERN_Platform.APPLINK=function(mode,appname,params){return;
};
CERN_Platform.makeRoot=function(){return document.cookie.replace(/(?:(?:^|.*;\s*)mpRoot\s*\=\s*([^;]*).*$)|^.*$/,"$1");
};
CERN_Platform.getWebappRoot=function(){var setWebAppRoot=function(newRoot){if(newRoot){CERN_Platform.m_webappRoot=location.protocol+"//"+location.host+newRoot;
}};
if(typeof this.m_webappRoot!=="string"){setWebAppRoot(CERN_Platform.makeRoot());
}return this.m_webappRoot;
};
if(typeof CCLLINK==="undefined"){CCLLINK=CERN_Platform.CCLLINK;
}if(typeof MPAGES_EVENT==="undefined"){MPAGES_EVENT=CERN_Platform.MPAGES_EVENT;
}if(typeof APPLINK==="undefined"){APPLINK=CERN_Platform.APPLINK;
}
(function(){var NAMESPACE="log";
var IE6_POSITION_FIXED=true;
var bbird;
var outputList;
var cache=[];
var loggingActive;
var state=getState();
var classes={};
var profiler={};
var IDs={blackbird:"blackbird",checkbox:"bbVis",filters:"bbFilters",controls:"bbControls",size:"bbSize"};
var messageTypes={debug:true,info:true,warn:true,error:true,profile:true};
function isLoggingActive(){return(state.active||loggingActive)?true:false;
}function generateMarkup(){var spans=[];
for(type in messageTypes){spans.push(['<span class="',type,'" type="',type,'"></span>'].join(""));
}var newNode=document.createElement("DIV");
newNode.id=IDs.blackbird;
newNode.style.display="none";
newNode.innerHTML=['<div class="header">','<div class="left">','<div id="',IDs.filters,'" class="filters" title="click to filter by message type">',spans.join(""),"</div>","</div>",'<div class="right">','<div id="',IDs.controls,'" class="controls">','<span id="',IDs.size,'" title="contract" op="resize"></span>','<span class="clear" title="clear" op="clear"></span>','<span class="close" title="close" op="close"></span>',"</div>","</div>","</div>",'<div class="main">','<div class="left"></div><div class="mainBody">',"<ol>",cache.join(""),"</ol>",'</div><div class="right"></div>',"</div>"].join("");
return newNode;
}function backgroundImage(){var bodyTag=document.getElementsByTagName("BODY")[0];
if(bodyTag.currentStyle&&IE6_POSITION_FIXED){if(bodyTag.currentStyle.backgroundImage=="none"){bodyTag.style.backgroundImage="url(about:blank)";
}if(bodyTag.currentStyle.backgroundAttachment=="scroll"){bodyTag.style.backgroundAttachment="fixed";
}}}function addMessage(type,content){content=(content.constructor==Array)?content.join(""):content;
if(outputList){var newMsg=document.createElement("LI");
newMsg.className=type;
newMsg.innerHTML=['<span class="icon"></span>',content].join("");
outputList.appendChild(newMsg);
scrollToBottom();
}else{cache.push(['<li class="',type,'"><span class="icon"></span>',content,"</li>"].join(""));
}}function clear(){outputList.innerHTML="";
}function clickControl(evt){if(!evt){evt=window.event;
}var el=(evt.target)?evt.target:evt.srcElement;
if(el.tagName=="SPAN"){switch(el.getAttributeNode("op").nodeValue){case"resize":resize();
break;
case"clear":clear();
break;
case"close":hide();
break;
}}}function clickFilter(evt){if(!evt){evt=window.event;
}var span=(evt.target)?evt.target:evt.srcElement;
if(span&&span.tagName=="SPAN"){var type=span.getAttributeNode("type").nodeValue;
if(evt.altKey){var filters=document.getElementById(IDs.filters).getElementsByTagName("SPAN");
var active=0;
for(entry in messageTypes){if(messageTypes[entry]){active++;
}}var oneActiveFilter=(active==1&&messageTypes[type]);
for(var i=0;
filters[i];
i++){var spanType=filters[i].getAttributeNode("type").nodeValue;
filters[i].className=(oneActiveFilter||(spanType==type))?spanType:spanType+"Disabled";
messageTypes[spanType]=oneActiveFilter||(spanType==type);
}}else{messageTypes[type]=!messageTypes[type];
span.className=(messageTypes[type])?type:type+"Disabled";
}var disabledTypes=[];
for(type in messageTypes){if(!messageTypes[type]){disabledTypes.push(type);
}}disabledTypes.push("");
outputList.className=disabledTypes.join("Hidden ");
scrollToBottom();
}}function clickVis(evt){if(!evt){evt=window.event;
}var el=(evt.target)?evt.target:evt.srcElement;
state.load=el.checked;
setState();
}function scrollToBottom(){outputList.scrollTop=outputList.scrollHeight;
}function isVisible(){return(bbird.style.display=="block");
}function hide(){bbird.style.display="none";
}function show(){var body=document.getElementsByTagName("BODY")[0];
body.removeChild(bbird);
body.appendChild(bbird);
bbird.style.display="block";
}function reposition(position){if(position===undefined||position==null){position=(state&&state.pos===null)?1:(state.pos+1)%4;
}switch(position){case 0:classes[0]="bbTopLeft";
break;
case 1:classes[0]="bbTopRight";
break;
case 2:classes[0]="bbBottomLeft";
break;
case 3:classes[0]="bbBottomRight";
break;
}state.pos=position;
setState();
}function resize(size){if(size===undefined||size===null){size=(state&&state.size==null)?1:(state.size+1)%2;
}classes[1]=(size===0)?"bbSmall":"bbLarge";
var span=document.getElementById(IDs.size);
span.title=(size===1)?"small":"large";
span.className=span.title;
state.size=size;
setState();
scrollToBottom();
}function setLogging(){state.active=true;
state.load=true;
state.size=1;
setState();
}function stopLogging(){state.active=false;
state.load=false;
state.size=1;
setState();
}function setState(){var props=[];
for(entry in state){var value=(state[entry]&&state[entry].constructor===String)?'"'+state[entry]+'"':state[entry];
props.push('"'+entry+'":'+value);
}props=props.join(",");
var expiration=new Date();
expiration.setDate(expiration.getDate()+14);
document.cookie=["blackbird={",props,"};"].join("");
var newClass=[];
for(word in classes){newClass.push(classes[word]);
}if(bbird){bbird.className=newClass.join(" ");
}}function getState(){var defState={pos:null,size:null,load:null,active:null};
var re=new RegExp(/blackbird=({[^;]+})(;|\b|$)/);
var match=re.exec(document.cookie);
try{return(match&&match[1])?JSON.parse(match[1]):defState;
}catch(error){return defState;
}}function readKey(evt){if(!evt){evt=window.event;
}var code=113;
if(evt&&evt.keyCode==code){var visible=isVisible();
if(visible&&evt.shiftKey&&evt.altKey){clear();
}else{if(visible&&evt.shiftKey){reposition();
}else{if(!evt.shiftKey&&!evt.altKey){if(isLoggingActive()){(visible)?hide():show();
}}}}}}function addEvent(obj,type,fn){var obj=(obj.constructor===String)?document.getElementById(obj):obj;
if(obj.attachEvent){obj["e"+type+fn]=fn;
obj[type+fn]=function(){obj["e"+type+fn](window.event);
};
obj.attachEvent("on"+type,obj[type+fn]);
}else{obj.addEventListener(type,fn,false);
}}function removeEvent(obj,type,fn){var obj=(obj.constructor===String)?document.getElementById(obj):obj;
if(obj.detachEvent){if(obj[type+fn]!=undefined){obj.detachEvent("on"+type,obj[type+fn]);
}obj[type+fn]=null;
}else{obj.removeEventListener(type,fn,false);
}}window[NAMESPACE]={toggle:function(){if(isLoggingActive()){(isVisible())?hide():show();
}},resize:function(){resize();
},clear:function(){clear();
},move:function(){reposition();
},debug:function(msg){if(isLoggingActive()){addMessage("debug",msg);
}},warn:function(msg){if(isLoggingActive()){addMessage("warn",msg);
}},info:function(msg){if(isLoggingActive()){addMessage("info",msg);
}},error:function(msg){if(isLoggingActive()){addMessage("error",msg);
}},activateLogging:function(){setLogging();
},disableLogging:function(){stopLogging();
},profile:function(label){var currentTime=new Date();
if(label==undefined||label==""){addMessage("error","<b>ERROR:</b> Please specify a label for your profile statement");
}else{if(profiler[label]){addMessage("profile",[label,": ",currentTime-profiler[label],"ms"].join(""));
delete profiler[label];
}else{profiler[label]=currentTime;
addMessage("profile",label);
}}return currentTime;
},isBlackBirdActive:function(){return isLoggingActive();
}};
addEvent(window,"load",function(){var body=document.getElementsByTagName("BODY")[0];
bbird=body.appendChild(generateMarkup());
outputList=bbird.getElementsByTagName("OL")[0];
backgroundImage();
addEvent(IDs.filters,"click",clickFilter);
addEvent(IDs.controls,"click",clickControl);
addEvent(document,"keyup",readKey);
resize(state.size);
reposition(state.pos);
if(state.load){show();
}scrollToBottom();
window[NAMESPACE].init=function(){show();
window[NAMESPACE].error(["<b>",NAMESPACE,"</b> can only be initialized once"]);
};
addEvent(window,"unload",function(){removeEvent(IDs.filters,"click",clickFilter);
removeEvent(IDs.controls,"click",clickControl);
removeEvent(document,"keyup",readKey);
});
if(state.active){loggingActive=true;
state.active=false;
state.load=false;
state.size=1;
setState();
}});
})();
function Logger(){this.m_activated=false;
this.m_lineBreak="";
}Logger.prototype.isActivated=function(){return this.m_activated;
};
Logger.prototype.setIsActivated=function(activated){this.m_activated=activated;
};
Logger.prototype.setLineBreak=function(lineBreak){this.m_lineBreak=lineBreak;
};
Logger.prototype.getLineBreak=function(){return this.m_lineBreak;
};
Logger.prototype.activate=function(){if(this.isActivated()){return;
}if(this.isLoggingAvailable()){this.addLoggingDefinitionsToPrototype();
}this.setIsActivated(true);
};
Logger.prototype.addLoggingDefinitionsToPrototype=function(){return;
};
Logger.prototype.isLoggingAvailable=function(){return false;
};
Logger.prototype.logMessage=function(message){return false;
};
Logger.prototype.logDebug=function(debug){return false;
};
Logger.prototype.logWarning=function(warning){return false;
};
Logger.prototype.logError=function(error){return false;
};
Logger.prototype.logScriptCallInfo=function(component,request,file,funcName){return false;
};
Logger.prototype.logScriptCallError=function(component,request,file,funcName){return false;
};
Logger.prototype.logJSError=function(err,component,file,funcName){return false;
};
Logger.prototype.logDiscernInfo=function(component,objectName,file,funcName){return false;
};
Logger.prototype.logMPagesEventInfo=function(component,eventName,params,file,funcName){return false;
};
Logger.prototype.logCCLNewSessionWindowInfo=function(component,params,file,funcName){return false;
};
Logger.prototype.logTimerInfo=function(timerName,subTimerName,timerType,file,funcName){return false;
};
Logger.prototype.logMessages=function(messages){if(!(messages instanceof Array)){throw new Error("Logger.prototype.logMessages only accepts array arguments");
}var fullMessageString=this.joinMessagesWithBreaks(messages);
this.logMessage(fullMessageString);
};
Logger.prototype.logErrors=function(messages){if(!(messages instanceof Array)){throw new Error("Logger.prototype.logErrors only accepts array arguments");
}var fullMessageString=this.joinMessagesWithBreaks(messages);
this.logError(fullMessageString);
};
Logger.prototype.joinMessagesWithBreaks=function(messages){if(!(messages instanceof Array)){throw new Error("Logger.prototype.joinMessagesWithBreaks only accepts array arguments");
}var lineBreak=this.getLineBreak();
return messages.join(lineBreak);
};
function BlackBirdLogger(){this.setLineBreak("<br />");
}BlackBirdLogger.prototype=new Logger();
BlackBirdLogger.prototype.constructor=Logger;
BlackBirdLogger.prototype.addLoggingDefinitionsToPrototype=function(){BlackBirdLogger.prototype.logMessage=function(message){log.info(message);
};
BlackBirdLogger.prototype.logDebug=function(debug){log.debug(debug);
};
BlackBirdLogger.prototype.logWarning=function(warning){log.warn(warning);
};
BlackBirdLogger.prototype.logError=function(error){log.error(error);
};
BlackBirdLogger.prototype.logScriptCallInfo=function(component,request,file,funcName){this.logDebug(["Component: ",(component?component.getLabel():""),"<br />ID: ",(component?component.getComponentId():""),"<br />File: ",file,"<br />Function: ",funcName,"<br />Script: ",request.url,"<br />Request: ",request.requestText,"<br />Reply: ",request.responseText].join(""));
};
BlackBirdLogger.prototype.logScriptCallError=function(component,request,file,funcName){this.logError(["Component: ",(component?component.getLabel():""),"<br />ID: ",(component?component.getComponentId():""),"<br />File: ",file,"<br />Function: ",funcName,"<br />Script: ",request.url,"<br />Request: ",request.requestText,"<br />Reply: ",request.responseText,"<br />Status: ",request.status].join(""));
};
BlackBirdLogger.prototype.logJSError=function(err,component,file,funcName){this.logError(["Component: ",(component?component.getLabel():""),"<br />ID: ",(component?component.getComponentId():""),"<br />File: ",file,"<br />Function: ",funcName,"<br />JS Error","<br />Message: ",err.message,"<br />Name: ",err.name,"<br />Number: ",(err.number&65535),"<br />Description: ",err.description].join(""));
};
BlackBirdLogger.prototype.logDiscernInfo=function(component,objectName,file,funcName){this.logDebug(["Component: ",(component?component.getLabel():""),"<br />ID: ",(component?component.getComponentId():""),"<br />File: ",file,"<br />Function: ",funcName,"<br />Discern Object: ",objectName].join(""));
};
BlackBirdLogger.prototype.logMPagesEventInfo=function(component,eventName,params,file,funcName){this.logDebug(["Component: ",(component?component.getLabel():""),"<br />ID: ",(component?component.getComponentId():""),"<br />File: ",file,"<br />Function: ",funcName,"<br />MPAGES_EVENT: ",eventName,"<br />Params: ",params].join(""));
};
BlackBirdLogger.prototype.logCCLNewSessionWindowInfo=function(component,params,file,funcName){this.logDebug(["CCLNEWSESSIONWINDOW Creation","Component: ",(component?component.getLabel():""),"<br />ID: ",(component?component.getComponentId():""),"<br />File: ",file,"<br />Function: ",funcName,"<br />Params: ",params].join(""));
};
BlackBirdLogger.prototype.logTimerInfo=function(timerName,subTimerName,timerType,file,funcName){this.logDebug(["Timer Name: ",timerName,"<br />Subtime Name:  ",subTimerName,"<br />Timer Type: ",timerType,"<br />File: ",file,"<br />Function: ",funcName].join(""));
};
};
BlackBirdLogger.prototype.activate=function(){Logger.prototype.activate.call(this);
log.activateLogging();
};
BlackBirdLogger.prototype.isLoggingAvailable=function(){return(typeof log=="object");
};
function ConsoleLogger(){if(typeof console.debug==="undefined"){console.debug=console.log;
}this.setLineBreak("\n");
}ConsoleLogger.prototype=new Logger();
ConsoleLogger.prototype.constructor=Logger;
ConsoleLogger.prototype.addLoggingDefinitionsToPrototype=function(){ConsoleLogger.prototype.logMessage=function(message){console.log(message);
};
ConsoleLogger.prototype.logDebug=function(debug){console.debug(debug);
};
ConsoleLogger.prototype.logWarning=function(warning){console.warn(warning);
};
ConsoleLogger.prototype.logError=function(error){console.error(error);
};
ConsoleLogger.prototype.logScriptCallInfo=function(component,request,file,funcName){this.logDebug(["Component: ",(component?component.getLabel():""),"\nID: ",(component?component.getComponentId():""),"\nFile: ",file,"\nFunction: ",funcName,"\nScript: ",request.url,"\nRequest: ",request.requestText,"\nReply: ",request.responseText].join(""));
};
ConsoleLogger.prototype.logScriptCallError=function(component,request,file,funcName){this.logError(["Component: ",(component?component.getLabel():""),"\nID: ",(component?component.getComponentId():""),"\nFile: ",file,"\nFunction: ",funcName,"\nScript: ",request.url,"\nRequest: ",request.requestText,"\nReply: ",request.responseText,"\nStatus: ",request.status].join(""));
};
ConsoleLogger.prototype.logJSError=function(err,component,file,funcName){this.logError(["Component: ",(component?component.getLabel():""),"\nID: ",(component?component.getComponentId():""),"\nFile: ",file,"\nFunction: ",funcName,"\nJS Error","\nMessage: ",err.message,"\nName: ",err.name,"\nNumber: ",(err.number&65535),"\nDescription: ",err.description].join(""));
};
ConsoleLogger.prototype.logDiscernInfo=function(component,objectName,file,funcName){this.logDebug(["Component: ",(component?component.getLabel():""),"\nID: ",(component?component.getComponentId():""),"\nFile: ",file,"\nFunction: ",funcName,"\nDiscern Object: ",objectName].join(""));
};
ConsoleLogger.prototype.logMPagesEventInfo=function(component,eventName,params,file,funcName){this.logDebug(["Component: ",(component?component.getLabel():""),"\nID: ",(component?component.getComponentId():""),"\nFile: ",file,"\nFunction: ",funcName,"\nMPAGES_EVENT: ",eventName,"\nParams: ",params].join(""));
};
ConsoleLogger.prototype.logCCLNewSessionWindowInfo=function(component,params,file,funcName){this.logDebug(["CCLNEWSESSIONWINDOW Creation","Component: ",(component?component.getLabel():""),"\nID: ",(component?component.getComponentId():""),"\nFile: ",file,"\nFunction: ",funcName,"\nParams: ",params].join(""));
};
ConsoleLogger.prototype.logTimerInfo=function(timerName,subTimerName,timerType,file,funcName){this.logDebug(["Timer Name: ",timerName,"\nSubtime Name:  ",subTimerName,"\nTimer Type: ",timerType,"\nFile: ",file,"\nFunction: ",funcName].join(""));
};
};
ConsoleLogger.prototype.isLoggingAvailable=function(){return(typeof console==="object");
};
window.logger=(CERN_Platform.inMillenniumContext())?new BlackBirdLogger():new ConsoleLogger();
(function(){var cookie=document.cookie;
if(!cookie){return;
}var loggerSettingsRegex=new RegExp(/logger=({[^;]+})(;|\b|$)/);
var loggerSettings=loggerSettingsRegex.exec(cookie);
if(!loggerSettings||!loggerSettings.length){return;
}loggerSettings=JSON.parse(loggerSettings[1]);
var wasEnabled=loggerSettings.enabled;
if(wasEnabled==="true"){window.logger.activate();
}document.cookie='logger={"enabled":"false"}';
})();
document.onkeypress=function(evt){if(!evt){evt=window.event;
}if(evt.ctrlKey==1&&evt.keyCode==28){window.logger.activate();
document.cookie='logger={"enabled":"true"}';
}};
function StructureOrganizerBuilder(){this.m_structureOrganizer=null;
this.m_nodeCount=0;
this.m_namespace="";
}StructureOrganizerBuilder.prototype.getNamespace=function(){return this.m_namespace;
};
StructureOrganizerBuilder.prototype.setNamespace=function(namespace){if(typeof namespace!=="string"){throw new Error("Attempted to call StructureOrganizerBuilder.prototype.setNamespace with invalid parameter.");
}this.m_namespace=namespace;
return this;
};
StructureOrganizerBuilder.prototype.getNodeCount=function(){return this.m_nodeCount;
};
StructureOrganizerBuilder.prototype.setNodeCount=function(nodeCount){if(typeof nodeCount!=="number"){throw new Error("Attempted to call StructureOrganizerBuilder.prototype.setNodeCount with invalid parameter.");
}this.m_nodeCount=nodeCount;
return this;
};
StructureOrganizerBuilder.prototype.getStructureOrganizer=function(){return this.m_structureOrganizer;
};
StructureOrganizerBuilder.prototype.startNewStructureOrganizer=function(){this.m_structureOrganizer=new StructureOrganizer();
this.m_structureOrganizer.setNamespace(this.getNamespace());
this.m_structureOrganizer.setId(""+this.m_nodeCount++);
};
StructureOrganizerBuilder.prototype.buildNavigator=function(){throw new Error("Attempted to call StructureOrganizerBuilder.prototype.buildNavigator. This function must be implemented by a sub-class");
};
function JSONStructureOrganizerBuilder(){this.m_structureJSON=null;
}JSONStructureOrganizerBuilder.prototype=new StructureOrganizerBuilder();
JSONStructureOrganizerBuilder.prototype.constructor=StructureOrganizerBuilder;
JSONStructureOrganizerBuilder.prototype.getStructureJSON=function(){return this.m_structureJSON;
};
JSONStructureOrganizerBuilder.prototype.setStructureJSON=function(structureJSON){this.m_structureJSON=structureJSON;
return this;
};
JSONStructureOrganizerBuilder.prototype.buildStructureTree=function(){this.m_nodeCount=0;
var structureJSON=this.m_structureJSON;
var root=new StructureOrganizer();
this.m_structureOrganizer=root;
root.setTemplateRelations(structureJSON.template_rltns);
root.setReferenceSectionId(structureJSON.dd_sref_section_id);
root.setNamespace(this.getNamespace());
root.setId(""+this.m_nodeCount++);
root.setOrganizer(root);
this.traverse(structureJSON,root);
this.handleMultiSectionStructure();
if(!root.isMultiSection()){root.setNavigator(this.buildNavigatorForSection(root));
}return root;
};
JSONStructureOrganizerBuilder.prototype.handleMultiSectionStructure=function(){var root=this.m_structureOrganizer;
var children=root.getChildren();
var childrenCount=children.length;
var child=null;
for(var i=0;
i<childrenCount;
i++){child=children[i];
if(StructureOrganizer.prototype.isPrototypeOf(child)){root.setIsMultiSection(true);
child.setNavigator(this.buildNavigatorForSection(child));
if(!root.m_activeSection){root.setActiveSection(child);
}}}};
JSONStructureOrganizerBuilder.prototype.buildNavigatorForSection=function(section){var navigator=new Navigator();
navigator.setId(this.getNamespace()+":structureNavigator:"+section.getId());
var groups=section.getChildren();
var group=null;
var groupCount=groups.length;
var namespace=this.m_namespace;
for(var i=0;
i<groupCount;
i++){group=groups[i];
var navigation=new StructureNavigation();
navigation.setContainerId(namespace+":organizer:CONTENT:"+section.getId());
navigation.setAnchorId(namespace+":group:ROOT:"+group.getId());
navigation.setLabel(group.getTitle().replace(":",""));
navigation.setId(namespace+":structureNavigation:"+group.getId());
navigation.setNode(group);
navigator.addNavigation(navigation);
}return navigator;
};
JSONStructureOrganizerBuilder.prototype.buildNavigator=function(){var navigator=new Navigator();
navigator.setId(this.getNamespace()+":structureNavigator");
var groups=this.m_structureOrganizer.getChildren();
var group=null;
var groupCount=groups.length;
for(var i=0;
i<groupCount;
i++){group=groups[i];
var navigation=new StructureNavigation();
navigation.setContainerId(this.getNamespace()+":organizer:CONTENT:"+this.m_structureOrganizer.getId());
navigation.setAnchorId(this.getNamespace()+":group:ROOT:"+group.getId());
navigation.setLabel(group.getTitle().replace(":",""));
navigation.setId(this.getNamespace()+":structureNavigation:"+group.getId());
navigator.addNavigation(navigation);
}return navigator;
};
JSONStructureOrganizerBuilder.prototype.traverse=function(node,owner){var child;
if(!(node instanceof Object)){return;
}for(child in node){if(node.hasOwnProperty(child)){if(!(node[child] instanceof Object)){continue;
}if(Array.prototype.isPrototypeOf(node[child])){var childArr=node[child];
for(var i=0;
i<childArr.length;
i++){var structureNode=this.buildNode(child,childArr[i],owner);
if(child==="attribute_menu_items"&&(childArr[i].ui_type==="EXPAND"||childArr[i].ui_type==="TABLE")){this.extractMatchingChildren(childArr,i);
}this.traverse(childArr[i],structureNode);
}}else{this.traverse(node[child],owner);
}}}};
JSONStructureOrganizerBuilder.prototype.extractMatchingChildren=function(attrMenuItems,index){var childIndex=0;
var node=attrMenuItems[index];
var totalItems=attrMenuItems.length;
for(var i=index+1;
i<totalItems;
i++){var attrMenuItem=attrMenuItems[i];
if(node.label_id&&attrMenuItem.child_label_id&&(node.label_id===attrMenuItem.child_label_id)){if(attrMenuItem.label_id){totalItems=this.extractMatchingChildren(attrMenuItems,i);
}if(typeof node.attribute_menu_items==="undefined"){node.attribute_menu_items=[];
}node.attribute_menu_items[childIndex++]=attrMenuItem;
attrMenuItems.splice(i,1);
totalItems--;
i--;
}}return totalItems;
};
JSONStructureOrganizerBuilder.prototype.buildNode=function(nodeType,nodeJSON,owner){var node=null;
if(nodeType==="subsections"){node=new StructureOrganizer();
node.setReferenceSectionId(nodeJSON.dd_sref_section_id);
node.setTemplateRelations(nodeJSON.template_rltns);
}else{if(nodeType==="groupbys"){node=new StructureGroup();
}else{if(nodeType==="subgroupbys"){node=new StructureSubGroup();
}else{if(nodeType==="items"){node=new StructureItemGroup();
}else{if(nodeType==="attributes"){node=this.buildStructureTermGroupNode(nodeJSON);
}else{if(nodeType==="attribute_menu_items"){if(nodeJSON.user_input){if(nodeJSON.ui_type==="FREE_TEXT"){node=this.buildFreeTextNode(nodeJSON);
}else{node=this.buildInputNode(nodeJSON);
}}else{if(nodeJSON.ui_type==="LINE"){node=new LineStructureTerm();
}else{if(nodeJSON.ui_type==="EXPAND"){node=new ExpandStructureTermGroup();
this.addNormality(node,nodeJSON);
}else{if(nodeJSON.ui_type==="TABLE"){node=this.buildTableStructureTermGroupNode(nodeJSON);
}else{node=this.buildCycleNode(nodeJSON,owner);
}}}}node.setCaption(nodeJSON.caption||"");
node.setDisplayPosition(nodeJSON.display_seq);
node.setUIValue(nodeJSON.ui_value);
node.setPriority(nodeJSON.priority);
}else{return null;
}}}}}}if(typeof nodeJSON.displayflag!=="undefined"){node.setShouldRender(nodeJSON.displayflag?true:false);
}node.setNamespace(this.getNamespace());
node.setOCID(nodeJSON.ocid||"");
node.setType(nodeType);
node.setTitle(nodeJSON.label||nodeJSON.value||nodeJSON.name||nodeJSON.section_label||"");
node.setId((this.m_nodeCount++)+"");
node.setOrganizer(this.getStructureOrganizer());
this.m_structureOrganizer.addTermToLookup(node);
owner.addChild(node);
return node;
};
JSONStructureOrganizerBuilder.prototype.buildStructureTermGroupNode=function(nodeJSON){switch(nodeJSON.attrib_type){case"Single":return new SingleStructureTermGroup();
case"Multiple":return new MultiStructureTermGroup();
case"YesNo":return new YesNoStructureTermGroup();
default:throw new Error("Attempted to call JSONStructureOrganizerBuilder.prototype.buildStructureTermGroupNode with unsupported ATTRIB_TYPE");
}};
JSONStructureOrganizerBuilder.prototype.buildInputNode=function(nodeJSON){var node=new InputStructureTerm();
node.setDataType(nodeJSON.data_type);
node.setActiveState(new TermState().setCSSClass((nodeJSON.normalfinding==="Abnormal")?"documented-abnormal":"documented").setValue(true));
node.setInactiveState(new TermState().setCSSClass("undocumented").setValue(null));
node.setInitialState(node.getInactiveState());
if(nodeJSON.data_type==="NUMERIC"){if(nodeJSON.min_value===0&&nodeJSON.max_value===0){node.addValidator(new DataRangeValidator());
}else{node.addValidator(new DataRangeValidator().setMinValue(nodeJSON.min_value).setMaxValue(nodeJSON.max_value));
}}node.addValidator(new DataTypeValidator().setDataType(nodeJSON.data_type));
return node;
};
JSONStructureOrganizerBuilder.prototype.buildFreeTextNode=function(nodeJSON){var node=new FreeTextStructureTerm();
node.setDataType(nodeJSON.data_type);
node.setActiveState(new TermState().setCSSClass(nodeJSON.normalfinding==="Abnormal"?"documented-abnormal":"documented").setValue(true));
node.setInactiveState(new TermState().setCSSClass("undocumented").setValue(null));
node.setInitialState(node.getInactiveState());
return node;
};
JSONStructureOrganizerBuilder.prototype.buildTableStructureTermGroupNode=function(nodeJSON){var node=new TableStructureTermGroup();
this.addNormality(node,nodeJSON);
return node;
};
JSONStructureOrganizerBuilder.prototype.buildCycleNode=function(nodeJSON,owner){var node=null;
var nodeUIType=nodeJSON.ui_type;
var isYesNo=YesNoStructureTermGroup.prototype.isPrototypeOf(owner)&&nodeUIType!=="NONE";
if(isYesNo){node=new YesNoStructureTerm();
}else{if(nodeUIType==="NONE"){node=new NoneStructureTerm();
}else{if(TableStructureTermGroup.prototype.isPrototypeOf(owner)){node=new TableStructureTerm();
}else{node=new CycleStructureTerm();
}}}this.addNormality(node,nodeJSON);
return node;
};
JSONStructureOrganizerBuilder.prototype.addNormality=function(node,nodeJSON){var isYesNo=YesNoStructureTerm.prototype.isPrototypeOf(node);
var normality=nodeJSON.normalfinding;
node.addState(new TermState().setCSSClass("undocumented").setValue(null));
switch(normality){case"Neutral":node.addState(new TermState().setCSSClass("documented").setValue(true));
if(isYesNo){node.addState(new TermState().setCSSClass("documented").setValue(false));
}break;
case"Normal":node.addState(new TermState().setCSSClass("documented").setValue(true));
if(isYesNo){node.addState(new TermState().setCSSClass("documented-abnormal").setValue(false));
}break;
case"Abnormal":node.addState(new TermState().setCSSClass("documented-abnormal").setValue(true));
if(isYesNo){node.addState(new TermState().setCSSClass("documented").setValue(false));
}break;
default:throw new Error("Unexpected normal finding value in the JSON: "+normality);
}node.setInitialState(node.getStates()[0]);
return node;
};
JSONStructureOrganizerBuilder.prototype.update=function(organizer,activityJson){organizer.setActivityId(activityJson.dd_section_id);
this.updateTraverse(activityJson,organizer);
};
JSONStructureOrganizerBuilder.prototype.updateTraverse=function(node,owner){var child;
if(!(node instanceof Object)){return;
}for(child in node){if(node.hasOwnProperty(child)){if(!(node[child] instanceof Object)){continue;
}if(Array.prototype.isPrototypeOf(node[child])){var childArr=node[child];
for(var i=0;
i<childArr.length;
i++){var structureNode=this.updateNode(child,childArr[i],owner);
if(structureNode){this.updateTraverse(childArr[i],structureNode);
}}}else{this.updateTraverse(node[child],owner);
}}}};
JSONStructureOrganizerBuilder.prototype.updateNode=function(nodeType,nodeJSON,owner){var node=null;
var children=owner.getChildren();
var i;
var currentNode;
if(nodeType==="subsections"){for(i=0;
i<children.length;
i++){currentNode=children[i];
if(this.matchesSubsection(children[i],nodeJSON)){node=currentNode;
node.setActivityId(nodeJSON.dd_section_id);
break;
}}}else{if(nodeType==="groupbys"){for(i=0;
i<children.length;
i++){currentNode=children[i];
if(nodeJSON.label===currentNode.getTitle()){node=currentNode;
node.setActivityId(nodeJSON.dd_groupby_id);
break;
}}}else{if(nodeType==="subgroupbys"){for(i=0;
i<children.length;
i++){currentNode=children[i];
if(nodeJSON.label===currentNode.getTitle()){node=currentNode;
node.setActivityId(nodeJSON.dd_sgroupby_id);
break;
}}}else{if(nodeType==="items"){for(i=0;
i<children.length;
i++){currentNode=children[i];
if(nodeJSON.ocid===currentNode.getOCID()){node=currentNode;
node.setActivityId(nodeJSON.dd_item_id);
break;
}}}else{if(nodeType==="attributes"){for(i=0;
i<children.length;
i++){currentNode=children[i];
if(nodeJSON.ocid===currentNode.getOCID()){node=currentNode;
node.setActivityId(nodeJSON.dd_attribute_id);
break;
}}}else{if(nodeType==="attribute_menu_items"){for(i=0;
i<children.length;
i++){currentNode=children[i];
if(currentNode.getChildren().length>0){this.updateNode(nodeType,nodeJSON,currentNode);
}if(nodeJSON.ocid===currentNode.getOCID()&&nodeJSON.display_seq===currentNode.getDisplayPosition()){node=currentNode;
node.setActivityId(nodeJSON.dd_attr_menu_item_id);
if(nodeJSON.comment){node.displayComment(nodeJSON.comment);
}if(node instanceof InputStructureTerm){node.setCurrentValue(nodeJSON.value_text?node.unescapePlaintextAsHtml(nodeJSON.value_text):nodeJSON.value_number+"");
node.update();
}else{if(node instanceof CycleStructureTerm){node.jumpToState(nodeJSON.truth_state_mean==="T"?1:2);
}}break;
}}}}}}}}return node;
};
JSONStructureOrganizerBuilder.prototype.matchesSubsection=function(subsectionNode,subsectionJSON){var subsectionTemplateRelations=subsectionNode.getTemplateRelations();
var activityTemplateRelations=subsectionJSON.template_rltns;
var subsectionTemplateRelationCount=subsectionTemplateRelations.length;
var activityTemplateRelationCount=activityTemplateRelations.length;
var subsectionTemplateRelation=null;
var activityTemplateRelation=null;
var matchedRelation=false;
if(subsectionTemplateRelationCount!==activityTemplateRelationCount){return false;
}for(var i=0;
i<subsectionTemplateRelationCount;
i++){subsectionTemplateRelation=subsectionTemplateRelations[i];
matchedRelation=false;
for(var j=0;
j<activityTemplateRelationCount;
j++){activityTemplateRelation=activityTemplateRelations[j];
if(subsectionTemplateRelation.dd_sref_chf_cmplnt_crit_id===activityTemplateRelation.dd_sref_chf_cmplnt_crit_id&&subsectionTemplateRelation.dd_sref_templ_instance_ident===activityTemplateRelation.dd_sref_templ_instance_ident&&subsectionTemplateRelation.parent_entity_id===activityTemplateRelation.parent_entity_id&&subsectionTemplateRelation.parent_entity_name===activityTemplateRelation.parent_entity_name){matchedRelation=true;
break;
}}if(!matchedRelation){return false;
}}return true;
};
JSONStructureOrganizerBuilder.prototype.buildQuestionSet=function(questionData){var rawQuestion=null;
var rawAnswers=null;
var rawAnswer=null;
var rawAnswerCount=null;
var questionCount=questionData.length;
var questionSet=new StructureQuestionSet();
var question=null;
var answer=null;
var nodeCount=0;
questionSet.setNamespace(this.m_namespace);
var lookup=questionSet.getLookup();
for(var i=0;
i<questionCount;
i++){rawQuestion=questionData[i];
question=new StructureQuestion();
question.setId(++nodeCount+"");
question.setNamespace(this.m_namespace);
question.setQuestionDisplay(rawQuestion.label);
question.setParentEntityId(rawQuestion.parent_entity_id);
question.setParentEntityName(rawQuestion.parent_entity_name);
rawAnswers=rawQuestion.choices;
rawAnswerCount=rawAnswers.length;
for(var j=0;
j<rawAnswerCount;
j++){rawAnswer=rawAnswers[j];
answer=new StructureAnswer();
answer.setAnswerDisplay(rawAnswer.label);
answer.setTemplateId(rawAnswer.dd_sref_chf_cmplnt_crit_id);
answer.setId(++nodeCount+"");
answer.setNamespace(this.m_namespace);
lookup[answer.getId()]=answer;
question.addChild(answer);
}questionSet.addChild(question);
}return questionSet;
};
JSONStructureOrganizerBuilder.extendClassMethods=function(childClass,parentClass,methods){var methodCnt=methods.length;
for(var i=0;
i<methodCnt;
i++){(function(x){childClass.prototype[methods[x]]=function(args){return parentClass.prototype[methods[x]].apply(this,arguments);
};
})(i);
}};
function StructureNode(){this.m_activityId=0;
this.m_children=null;
this.m_dirty=false;
this.m_displayPosition=0;
this.m_id="";
this.m_initialState=null;
this.m_namespace="";
this.m_numberDocumented=0;
this.m_ocid="";
this.m_parent=null;
this.m_previousState=null;
this.m_rootElement=null;
this.m_shouldRender=true;
this.m_isDefaultDisplayed=true;
this.m_state=null;
this.m_title="";
this.m_type="";
this.m_inNavigateStructureTree=true;
this.m_shouldSave=true;
}StructureNode.prototype.getActivityId=function(){return this.m_activityId;
};
StructureNode.prototype.setActivityId=function(activityId){if(typeof activityId!=="number"){throw new Error("Called setActivityId on StructureNode with invalid parameter for activityId");
}this.m_activityId=activityId;
return this;
};
StructureNode.prototype.getChildren=function(){if(!this.m_children){this.m_children=[];
}return this.m_children;
};
StructureNode.prototype.isDirty=function(){return this.m_dirty;
};
StructureNode.prototype.setIsDirty=function(dirty){if(typeof dirty!=="boolean"){throw new Error("Called setIsDirty on StructureNode with invalid dirty parameter.");
}this.m_dirty=dirty;
return this;
};
StructureNode.prototype.getDisplayPosition=function(){return this.m_displayPosition;
};
StructureNode.prototype.setDisplayPosition=function(displayPosition){if(typeof displayPosition!=="number"){throw new Error("Attempted to call StructureNode.prototype.setDisplayPosition with invalid parameter.");
}this.m_displayPosition=displayPosition;
return this;
};
StructureNode.prototype.getId=function(){return this.m_id;
};
StructureNode.prototype.setId=function(id){if(typeof id!=="string"){throw new Error("Called setId on StructureNode with invalid parameter for id");
}this.m_id=id;
return this;
};
StructureNode.prototype.getInitialState=function(){return this.m_initialState;
};
StructureNode.prototype.setInitialState=function(initialState){if(!TermState.prototype.isPrototypeOf(initialState)){throw new Error("Called setInitialState on StructureNode with invalid initialState parameter.");
}this.m_initialState=initialState;
return this;
};
StructureNode.prototype.getNamespace=function(){return this.m_namespace;
};
StructureNode.prototype.setNamespace=function(namespace){if(typeof namespace!=="string"){throw new Error("Called setNamespace on StructureNode with invalid namespace parameter.");
}this.m_namespace=namespace;
return this;
};
StructureNode.prototype.getNumberOfDocumentedChildren=function(){return this.m_numberDocumented;
};
StructureNode.prototype.getOCID=function(){return this.m_ocid;
};
StructureNode.prototype.setOCID=function(ocid){if(typeof ocid!=="string"){throw new Error("Attempted to call StructureNode.prototype.setOCID with invalid parameter.");
}this.m_ocid=ocid;
return this;
};
StructureNode.prototype.getParent=function(){return this.m_parent;
};
StructureNode.prototype.setParent=function(parent){if(!StructureNode.prototype.isPrototypeOf(parent)){throw new Error("Called setParent on StructureNode with invalid parent parameter.");
}this.m_parent=parent;
return this;
};
StructureNode.prototype.getPreviousState=function(){return this.m_previousState;
};
StructureNode.prototype.setPreviousState=function(previousState){if(!TermState.prototype.isPrototypeOf(previousState)&&previousState!==null){throw new Error("Attempted to call StructureNode.prototype.setPreviousState with invalid parameter.");
}this.m_previousState=previousState;
return this;
};
StructureNode.prototype.getRootElement=function(){return this.m_rootElement;
};
StructureNode.prototype.getShouldRender=function(){return this.m_shouldRender;
};
StructureNode.prototype.setShouldRender=function(shouldRender){if(typeof shouldRender!=="boolean"){throw new Error("Called setShouldRender on StructureNode with invalid shouldRender parameter.");
}this.m_shouldRender=shouldRender;
return this;
};
StructureNode.prototype.inNavigationStructureTree=function(){return this.m_inNavigateStructureTree;
};
StructureNode.prototype.shouldSave=function(){return this.m_shouldSave;
};
StructureNode.prototype.isDefaultDisplayed=function(){return this.m_isDefaultDisplayed;
};
StructureNode.prototype.setIsDefaultDisplayed=function(defaultDisplayed){if(typeof defaultDisplayed!=="boolean"){throw new Error("Called setIsDefaultDisplayed on StructureNode with invalid defaultDisplayed paramater");
}this.m_isDefaultDisplayed=defaultDisplayed;
return this;
};
StructureNode.prototype.isCurrentlyDisplayed=function(){return true;
};
StructureNode.prototype.displayNode=function(){throw new Error("displayNode is abstract, to be implemented by children");
};
StructureNode.prototype.getState=function(){return this.m_state;
};
StructureNode.prototype.setState=function(state){if(!TermState.prototype.isPrototypeOf(state)){throw new Error("Attempted to call StructureNode.prototype.setState with invalid parameter.");
}this.m_state=state;
return this;
};
StructureNode.prototype.getTitle=function(){return this.m_title;
};
StructureNode.prototype.setTitle=function(title){if(typeof title!=="string"){throw new Error("Attempted to call StructureNode.prototype.setTitle with invalid parameter.");
}this.m_title=title;
return this;
};
StructureNode.prototype.getType=function(){return this.m_type;
};
StructureNode.prototype.setType=function(type){if(typeof type!=="string"){throw new Error("Attempted to call StructureNode.prototype.setType with invalid parameter.");
}this.m_type=type;
return this;
};
StructureNode.prototype.notifyDirty=function(node){if(this.getParent()){this.getParent().notifyDirty(node);
}};
StructureNode.prototype.resetDirty=function(){this.m_dirty=false;
};
StructureNode.prototype.convertToJSON=function(){return{};
};
StructureNode.prototype.getOrganizer=function(){return this.m_organizer;
};
StructureNode.prototype.setOrganizer=function(organizer){if(!StructureOrganizer.prototype.isPrototypeOf(organizer)){throw new Error("StructureOrganizer.prototype.setOrganizer expects a StructureOrganizer object.");
}this.m_organizer=organizer;
};
StructureNode.prototype.getParentSectionNode=function(){var currentNode=this;
var sectionNode=null;
while(currentNode!==null&&!StructureOrganizer.prototype.isPrototypeOf(currentNode)){currentNode=currentNode.getParent();
}sectionNode=currentNode;
return sectionNode;
};
StructureNode.prototype.getHighlightElement=function(){return this.getRootElement();
};
StructureNode.prototype.postProcessing=function(){};
StructureNode.prototype.addChildrenJSON=function(jsonArray){var children=this.getChildren();
this.addNodesToJSON(children,jsonArray);
};
StructureNode.prototype.addNodesToJSON=function(nodes,jsonArray){var childrenMap={};
for(var i=0;
i<nodes.length;
i++){var child=nodes[i];
var stateTruth=(child.getState()?child.getState().getValue():null);
if(stateTruth===null&&child.getType()!=="subsections"||!child.shouldSave()){continue;
}if(!childrenMap[child.getType()]){childrenMap[child.getType()]=[];
}var childJSON=child.convertToJSON();
childrenMap[child.getType()].push(childJSON);
}for(var type in childrenMap){jsonArray.push('"'+type+'": ['+childrenMap[type].join(",")+"]");
}};
StructureNode.prototype.getAllDescendents=function(childList){var children=this.getChildren();
var childCnt=children.length;
var child;
for(var i=0;
i<childCnt;
i++){child=children[i];
childList.push(child);
child.getAllDescendents(childList);
}return childList;
};
StructureNode.prototype.addDescendentJSON=function(jsonArray){var descendents=this.getAllDescendents([]);
this.addNodesToJSON(descendents,jsonArray);
};
StructureNode.prototype.escapePlaintextAsHtml=function(plaintext){return plaintext.replace(/\&/g,"&#38;").replace(/\"/g,"&#34;").replace(/\'/g,"&#39;").replace(/\</g,"&#60;").replace(/\>/g,"&#62;").replace(/\\/g,"&#92;").replace(/\^/g,"&#94;").replace(/\~/g,"&#126;").replace(/\t/g,"&#9;").replace(/\r/g,"&#10;").replace(/\n/g,"&#13;");
};
StructureNode.prototype.unescapePlaintextAsHtml=function(html){return html.replace(/\&\#34\;/g,'"').replace(/\&\#39\;/g,"'").replace(/\&\#60\;/g,"<").replace(/\&\#62\;/g,">").replace(/\&\#92\;/g,"\\").replace(/\&\#94\;/g,"^").replace(/\&\#126\;/g,"~").replace(/\&\#9\;/g,"\t").replace(/\&\#10\;/g,"\r").replace(/\&\#13\;/g,"\n").replace(/\&\#38\;/g,"&");
};
StructureNode.prototype.notifyStateChange=function(node){var currentState=node.getState();
var previousState=node.getPreviousState();
if(previousState&&currentState.getValue()===previousState.getValue()){return;
}var previousNumber=this.m_numberDocumented;
if(currentState.getValue()===null){this.m_numberDocumented=Math.max(0,this.m_numberDocumented-1);
}else{if((!node.getPreviousState()||node.getPreviousState().getValue()===null)&&currentState.getValue()!==null){this.m_numberDocumented=Math.min(this.m_children.length,this.m_numberDocumented+1);
}}if(this.m_numberDocumented===0){this.updateState(new TermState().setValue(null).setKey("NULL"));
}else{if(this.m_numberDocumented>0&&previousNumber===0){this.updateState(new TermState().setValue(true).setKey("TRUE"));
}}};
StructureNode.prototype.updateState=function(state){var currentState=this.getState();
if(state!==currentState){this.setState(state);
this.setPreviousState(currentState);
if(this.getParent()){this.getParent().notifyStateChange(this);
}}this.refresh();
};
StructureNode.prototype.refresh=function(){};
StructureNode.prototype.addChild=function(child){if(child.getParent()!==this){child.setParent(this);
}this.getChildren().push(child);
};
StructureNode.prototype.render=function(structureHtml){return;
};
StructureNode.prototype.clear=function(){var children=this.getChildren();
var i;
for(i=0;
i<children.length;
i++){children[i].clear();
}this.clearSelf();
};
StructureNode.prototype.clearSelf=function(){this.setActivityId(0);
this.m_previousState=null;
this.m_state=null;
this.m_numberDocumented=0;
};
function StructureHtml(){this.m_html="";
}StructureHtml.prototype.getHtml=function(){return this.m_html;
};
StructureHtml.prototype.append=function(html){this.m_html+=html;
return this;
};
function StructureOrganizer(){this.m_lookup=null;
this.m_navigator=null;
this.m_referenceSectionId=null;
this.m_type="SECTION";
this.m_templateIds={};
this.m_templateRelations=null;
this.m_rootElement=null;
this.m_contentElement=null;
this.m_navigatorElement=null;
this.m_resizeFunction=null;
this.m_dirtyNodeList=null;
this.m_onDirtyChangeCallback=null;
this.m_previousHighlightedNode=null;
this.m_rendered=false;
this.m_isPriorityEnabled=true;
this.m_isMultiSection=false;
this.m_activeSection=null;
}StructureOrganizer.prototype=new StructureNode();
StructureOrganizer.prototype.constructor=StructureNode;
StructureOrganizer.prototype.setIsRendered=function(rendered){if(typeof rendered!=="boolean"){throw new Error("StructureOrganizer.prototype.setIsRendered expects a boolean.");
}this.m_rendered=rendered;
return this;
};
StructureOrganizer.prototype.isRendered=function(){return this.m_rendered;
};
StructureOrganizer.prototype.setTemplateRelations=function(templateRelations){this.m_templateRelations=templateRelations;
return this;
};
StructureOrganizer.prototype.getTemplateRelations=function(){return this.m_templateRelations;
};
StructureOrganizer.prototype.setActiveSection=function(activeSection){if(!StructureOrganizer.prototype.isPrototypeOf(activeSection)){throw new Error("StructureOrganizer.prototype.setActiveSection expects a jQuery element.");
}this.m_activeSection=activeSection;
return this;
};
StructureOrganizer.prototype.getActiveSection=function(){return this.m_activeSection;
};
StructureOrganizer.prototype.isMultiSection=function(){return this.m_isMultiSection;
};
StructureOrganizer.prototype.setIsMultiSection=function(multiSection){if(typeof multiSection!=="boolean"){throw new Error("StructureOrganizer.prototype.setIsMultiSection expects a boolean.");
}this.m_isMultiSection=multiSection;
return this;
};
StructureOrganizer.prototype.isPriorityEnabled=function(){return this.m_isPriorityEnabled;
};
StructureOrganizer.prototype.setIsPriorityEnabled=function(priorityEnabled){if(typeof priorityEnabled!=="boolean"){throw new Error("StructureOrganizer.prototype.setIsPriorityEnabled expects a boolean.");
}this.m_isPriorityEnabled=priorityEnabled;
};
StructureOrganizer.prototype.setOnDirtyChangeCallback=function(onDirtyChangeCallback){if(typeof onDirtyChangeCallback!=="function"){throw new Error("Attempted to call StructureOrganizer.prototype.setOnDirtyChangeCallback with invalid parameter.");
}this.m_onDirtyChangeCallback=onDirtyChangeCallback;
return this;
};
StructureOrganizer.prototype.notifyDirty=function(node){var parent=this.getParent();
if(parent){parent.notifyDirty(node);
}if(!parent){if(node.isDirty()){this.addNodeToDirtyList(node);
}else{this.removeNodeFromDirtyList(node);
}this.updateDirty();
}};
StructureOrganizer.prototype.resetDirty=function(){StructureNode.prototype.resetDirty.call(this);
var dirtyNodeList=this.getDirtyNodeList();
for(var key in dirtyNodeList){if(dirtyNodeList.hasOwnProperty(key)){this.m_lookup[key].resetDirty();
}}this.m_dirtyNodeList={};
};
StructureOrganizer.prototype.getDirtyNodeList=function(){if(!this.m_dirtyNodeList){this.m_dirtyNodeList={};
}return this.m_dirtyNodeList;
};
StructureOrganizer.prototype.removeNodeFromDirtyList=function(node){this.getDirtyNodeList()[node.getId()]=false;
};
StructureOrganizer.prototype.addNodeToDirtyList=function(node){this.getDirtyNodeList()[node.getId()]=true;
};
StructureOrganizer.prototype.getRootElement=function(){if(!this.m_rootElement||!this.m_rootElement.length){if(this.m_isMultiSection){this.m_rootElement=$("#"+this.getNamespace()+"\\:parentOrganizer\\:ROOT\\:"+this.getId());
}else{this.m_rootElement=$("#"+this.getNamespace()+"\\:organizer\\:ROOT\\:"+this.getId());
}}return this.m_rootElement;
};
StructureOrganizer.prototype.getResizeFunction=function(){return this.m_resizeFunction;
};
StructureOrganizer.prototype.setResizeFunction=function(resizeFunction){if(typeof resizeFunction!=="function"){throw new Error("Called setResizeFunction on StructureOrganizer with invalid parameter resizeFunction");
}this.m_resizeFunction=resizeFunction;
return this;
};
StructureOrganizer.prototype.getNavigatorElement=function(){if(!this.m_navigatorElement){this.m_navigatorElement=$("#"+this.getNamespace()+"\\:navigatorPanel\\:"+this.getId());
}return this.m_navigatorElement;
};
StructureOrganizer.prototype.navigateToNode=function(navigationData){var desiredString="";
var jsonData=JSON.parse(navigationData);
for(var i=0;
i<jsonData.length;
i++){var value=jsonData[i];
if(value.label){desiredString=desiredString+"label:"+value.label;
}else{if(value.ocid){desiredString=desiredString+", ocid:"+value.ocid;
}}}var returnNode=this.findNode(this,this.m_ocid,desiredString);
this.goToNode(returnNode,true,true);
};
StructureOrganizer.prototype.goToNode=function(destinationNode,highlightNode,alwaysNavigate){var sectionNode=null;
var contentOffsetTop;
var nodeOffsetTop;
var nodeOffsetBottom;
var contentHeight;
var $contentElement;
var $nodeRootElement;
if(!destinationNode){logger.logWarning("StructureOrganizer.prototype.navigateToNode: unable to find the specified node");
return;
}sectionNode=destinationNode.getParentSectionNode();
if(!sectionNode||!StructureOrganizer.prototype.isPrototypeOf(sectionNode)){logger.logWarning("StructureOrganizer.prototype.navigateToNode: unable to find a section node that is parent to the node that was navigated to.");
return;
}if(this.isMultiSection()&&(this.getActiveSection()!==sectionNode)){$("#"+this.getNamespace()+"\\:tab\\:"+sectionNode.getId()).click();
}if(!destinationNode.isCurrentlyDisplayed()){destinationNode.displayNode();
}$contentElement=sectionNode.getContentElement();
$nodeRootElement=this.findRenderedRootHighlightElement(destinationNode);
if($nodeRootElement&&$nodeRootElement.length){if(highlightNode){$nodeRootElement.addClass("highlight-navigation");
this.m_previousHighlightedNode=$nodeRootElement;
}contentOffsetTop=$contentElement.offset().top;
nodeOffsetTop=$nodeRootElement.offset().top;
nodeOffsetBottom=nodeOffsetTop+$nodeRootElement.height();
contentHeight=$contentElement.height();
if(alwaysNavigate||!((nodeOffsetBottom-contentOffsetTop>0)&&(nodeOffsetBottom-contentOffsetTop<=contentHeight))){$contentElement.scrollTop((nodeOffsetTop-contentOffsetTop+$contentElement.scrollTop())-((contentHeight/2)-$nodeRootElement.height()/2));
}}};
StructureOrganizer.prototype.findNode=function(currentNode,currentString,desiredString){if(desiredString===currentString){return currentNode;
}else{for(var i=0;
i<currentNode.getChildren().length;
i++){var childNode=currentNode.m_children[i];
var node;
if(!childNode.inNavigationStructureTree()){node=this.findNode(childNode,currentString,desiredString);
}else{var labelText=currentString+"label:"+childNode.m_title;
var ocidText=childNode.m_ocid?currentString+", ocid:"+childNode.m_ocid:currentString;
node=this.findNode(childNode,childNode.m_type==="groupbys"||childNode.m_type==="subgroupbys"||childNode.m_type==="subsections"?labelText:ocidText,desiredString);
}if(node){return node;
}}return null;
}};
StructureOrganizer.prototype.findRenderedRootHighlightElement=function(returnedNode){if(returnedNode.getShouldRender()){return returnedNode.getHighlightElement();
}var rootElement=this.findRenderedRootHighlightElement(returnedNode.getParent());
if(rootElement){return rootElement;
}else{return null;
}};
StructureOrganizer.prototype.clearHighlighter=function(){var node=this.m_previousHighlightedNode;
if(node){node.removeClass("highlight-navigation");
}};
StructureOrganizer.prototype.resize=function(){if(this.m_resizeFunction){this.m_resizeFunction({rootElement:this.getRootElement(),navigatorElement:this.getNavigatorElement(),contentElement:this.getContentElement()});
}};
StructureOrganizer.prototype.getContentElement=function(){if(!this.m_contentElement){this.m_contentElement=$("#"+this.getNamespace()+"\\:organizer\\:CONTENT\\:"+this.getId());
}return this.m_contentElement;
};
StructureOrganizer.prototype.getNavigator=function(){return this.m_navigator;
};
StructureOrganizer.prototype.setNavigator=function(navigator){if(!Navigator.prototype.isPrototypeOf(navigator)){throw new Error("Attempted to call StructureOrganizer.prototype.setNavigator with invalid parameter.");
}this.m_navigator=navigator;
return this;
};
StructureOrganizer.prototype.checkIsDirty=function(){var dirtyNodeList=this.getDirtyNodeList();
for(var key in dirtyNodeList){if(dirtyNodeList.hasOwnProperty(key)){if(dirtyNodeList[key]){return true;
}}}return false;
};
StructureOrganizer.prototype.updateDirty=function(){var wasDirty=this.m_dirty;
this.m_dirty=this.checkIsDirty();
if(wasDirty!==this.m_dirty&&this.m_onDirtyChangeCallback){this.m_onDirtyChangeCallback(this.m_dirty);
}if(this.m_previousHighlightedNode){this.clearHighlighter();
}};
StructureOrganizer.prototype.getTemplateIds=function(){return this.m_templateIds;
};
StructureOrganizer.prototype.setTemplateIds=function(templateIds){if(!Array.prototype.isPrototypeOf(templateIds)){throw new Error("Attempted to call StructureOrganizer.prototype.setTemplateIds with invalid parameter");
}this.m_templateIds=templateIds;
return this;
};
StructureOrganizer.prototype.getReferenceSectionId=function(){return this.m_referenceSectionId;
};
StructureOrganizer.prototype.setReferenceSectionId=function(referenceId){if(typeof referenceId!=="number"){throw new Error("Attempted to call StructureOrganizer.prototype.setReferenceSectionId with invalid parameter");
}this.m_referenceSectionId=referenceId;
return this;
};
StructureOrganizer.prototype.parseIdForLookup=function(id){return id.split(":")[3];
};
StructureOrganizer.prototype.addTermToLookup=function(term){this.getLookup()[term.getId()]=term;
};
StructureOrganizer.prototype.getLookup=function(){if(!this.m_lookup){this.m_lookup={};
}return this.m_lookup;
};
StructureOrganizer.prototype.render=function(structureHtml){var children=this.getChildren();
var childrenCount=children.length;
var namespace=this.m_namespace;
var child=null;
var childId="";
var tabDisplay="";
var id=this.getId();
if(this.m_isMultiSection){structureHtml.append("<div id='"+namespace+":parentOrganizer:ROOT:"+this.getId()+"' class='structure-organizer-parent structure-multi-section'>");
structureHtml.append("<div id='"+namespace+"StructureTabParent' class='structure-tab-parent'>");
structureHtml.append("<div id='"+namespace+"StructureTabBlock' class='structure-tab-block'>");
structureHtml.append("<div id='"+namespace+"StructureTabGroupWrapper' class='structure-tab-wrapper'>");
structureHtml.append("<ul id='"+namespace+"StructureTabGroup' class='structure-tab-group'>");
for(var i=0;
i<childrenCount;
i++){child=children[i];
childId=child.getId();
structureHtml.append("<li class='structure-tab'><span id='"+namespace+":tab:"+childId+"' data-lookup='"+childId+"' class='structure-tab-display"+((i===0)?" structure-tab-active":"")+"' title='"+child.getTitle().replace(":","")+"'>"+child.getTitle().replace(":","")+"</span></li>");
}structureHtml.append("</ul></div><li id='"+namespace+"StructureTabMenuButton' class='structure-tab structure-add-tab'><span>&nbsp;</span></li></div><div class='structure-tab-bottom'></div></div>");
structureHtml.append("<div id='"+namespace+"StructureTabContents' class='structure-tab-contents'>");
for(var i=0;
i<childrenCount;
i++){if(i>0){tabDisplay="style='display:none;'";
}structureHtml.append("<div id='"+namespace+":tabContent:"+children[i].getId()+"' class='structure-tab-content' "+tabDisplay+">");
if(i===0){children[i].render(structureHtml,true);
children[i].setIsRendered(true);
}structureHtml.append("</div>");
}structureHtml.append("</div>");
structureHtml.append("</div>");
}else{structureHtml.append("<div id='"+namespace+":organizer:ROOT:"+id+"' class='structure-organizer' data-lookup='"+id+"'><div id='"+namespace+":navigatorPanel:"+id+"' class='structure-navigator-panel'><div class='structure-navigator-label'>"+i18n.discernabu.mpage_structured_documentation.NAVIGATION+"</div>"+this.getNavigator().render()+"</div><div id='"+namespace+":organizer:CONTENT:"+id+"' class='structure-body structure-section-body' data-lookup='"+id+"'>");
for(var i=0;
i<childrenCount;
i++){children[i].render(structureHtml,true);
}structureHtml.append("<div id='"+namespace+":structureHeightAdjust:"+id+"' class='structure-height-adjust'></div></div></div>");
}return structureHtml.getHtml();
};
StructureOrganizer.prototype.renderHtml=function(){var html=new StructureHtml();
this.render(html);
return html.getHtml();
};
StructureOrganizer.prototype.finalize=function(){var now=new Date().getTime();
var last=new Date().getTime();
var threshold=150;
var self=this;
var scrollTimeout=null;
var groupInView=null;
function attemptGroupActivation(){groupInView=self.findGroupInView();
if(groupInView){self.updateActiveGroup(groupInView);
}}if(this.m_isMultiSection){var children=this.getChildren();
var childrenCount=children.length;
for(var i=0;
i<childrenCount;
i++){if(children[i].isRendered()){children[i].finalize();
}}}else{$("#"+this.getNamespace()+"\\:organizer\\:CONTENT\\:"+this.getId()).on("scroll",function(){now=new Date().getTime();
if(scrollTimeout){clearTimeout(scrollTimeout);
}scrollTimeout=setTimeout(function(){last=now;
attemptGroupActivation();
},200);
if((now-last)>=threshold){last=now;
attemptGroupActivation();
}});
this.getNavigator().finalize();
this.adjustContentHeight();
if(this.getChildren().length){this.updateActiveGroup(this.getChildren()[0]);
}this.performNodePostProcessing();
}};
StructureOrganizer.prototype.performNodePostProcessing=function(){var postProcess=function(node){if(node){node.postProcessing();
}var childNodes=node.getChildren();
var childCnt=childNodes.length;
for(var i=0;
i<childCnt;
i++){postProcess(childNodes[i]);
}};
postProcess(this);
};
StructureOrganizer.prototype.adjustContentHeight=function(){var groups=this.getChildren();
if(!groups.length){return;
}var $contentElement=this.getContentElement();
if(!$contentElement||!$contentElement.length){return;
}var rawContentElement=$contentElement[0];
var contentHeight=rawContentElement.offsetHeight;
var $heightAdjustElement=$("#"+this.getNamespace()+"\\:structureHeightAdjust\\:"+this.getId());
var lastGroup=groups[groups.length-1];
var lastGroupHeight=lastGroup.getRootElement().height();
var miscPadding=12;
$heightAdjustElement.height(Math.max(0,(contentHeight-lastGroupHeight)-miscPadding));
};
StructureOrganizer.prototype.updateActiveGroup=function(group){this.m_navigator.updateActiveNavigation(this.getNamespace()+":structureNavigation:"+group.getId());
};
StructureOrganizer.prototype.findGroupInView=function(){var group=null;
var rootGroupElement=null;
var rootGroupTop=null;
var groups=this.getChildren();
var groupCount=groups.length;
var $contentElement=this.getContentElement();
var rawContentElement=$contentElement[0];
var contentHeight=rawContentElement.offsetHeight;
var contentTop=$contentElement.position().top;
var totalContentHeight=rawContentElement.scrollHeight;
var scrollPosition=rawContentElement.scrollTop;
var scrollPercentage=scrollPosition/totalContentHeight;
var groupInView=null;
function isWithinZone(zoneTop,zoneBottom,groupTop){return groupTop>=zoneTop&&groupTop<=zoneBottom;
}function isCompletelyInView(zoneTop,zoneBottom,groupTop,groupBottom){return groupTop<=zoneTop&&groupBottom>=(zoneBottom-12);
}function isGroupInView(index){group=groups[index];
rootGroupElement=group.getRootElement();
rootGroupTop=rootGroupElement.position().top;
if(isWithinZone(contentDimensions.midpoint,contentDimensions.bottom,rootGroupTop)){return groups[i-1];
}if(isWithinZone(contentDimensions.top,contentDimensions.midpoint,rootGroupTop)){return group;
}if(isCompletelyInView(contentDimensions.top,contentDimensions.bottom,rootGroupTop,rootGroupTop+rootGroupElement.height())){return group;
}return null;
}var contentDimensions={top:contentTop,midpoint:(contentTop+contentHeight/2),bottom:contentTop+contentHeight};
for(var i=0;
i<groupCount;
i++){groupInView=isGroupInView(i);
if(groupInView){return groupInView;
}}return null;
};
StructureOrganizer.prototype.convertToJSON=function(){var saveJSON=[];
saveJSON.push('"section_act": {');
var sectionJson=[];
sectionJson.push('"dd_section_id": '+this.getActivityId()+".0");
sectionJson.push('"dd_sref_section_id": '+this.getReferenceSectionId()+".0");
var templateRelations=this.getTemplateRelations()||[];
var templateRelationJSON=[];
for(var i=0;
i<templateRelations.length;
i++){templateRelationJSON.push('{"dd_sref_chf_cmplnt_crit_id": '+templateRelations[i].dd_sref_chf_cmplnt_crit_id+'.0,"dd_sref_templ_instance_ident": "'+templateRelations[i].dd_sref_templ_instance_ident+'","parent_entity_id": '+templateRelations[i].parent_entity_id+'.0,"parent_entity_name": "'+templateRelations[i].parent_entity_name+'"}');
}sectionJson.push('"template_rltns": ['+templateRelationJSON.join(",")+"]");
this.addChildrenJSON(sectionJson);
if(this.getType()==="subsections"){sectionJson.push('"parent_section_id": '+this.getParent().getActivityId()+".0");
return"{"+sectionJson.join(",")+"}";
}saveJSON.push(sectionJson.join(","));
saveJSON.push("}");
return saveJSON.join("");
};
function StructureGroup(){}StructureGroup.prototype=new StructureNode();
StructureGroup.prototype.constructor=StructureNode;
StructureGroup.prototype.getRootElement=function(){if(!this.m_rootElement){this.m_rootElement=$("#"+this.getNamespace()+"\\:group\\:ROOT\\:"+this.getId());
}return this.m_rootElement;
};
StructureGroup.prototype.convertToJSON=function(){var json=[];
json.push('"dd_groupby_id": '+this.getActivityId()+".0");
json.push('"label": "'+this.getTitle()+'"');
json.push('"truth_state_mean": "T"');
this.addChildrenJSON(json);
return"{"+json.join(",")+"}";
};
StructureGroup.prototype.notifyStateChange=function(node){StructureNode.prototype.notifyStateChange.call(this,node);
var navigationElement=$("#"+this.getNamespace()+"\\:structureNavigation\\:"+this.getId());
if(this.getType()!=="groupbys"){return;
}(this.m_numberDocumented)&&(navigationElement.addClass("navigation-documented"))||(navigationElement.removeClass("navigation-documented"));
};
StructureGroup.prototype.refresh=function(){if(this.getState()&&this.getState().getValue()){$("#"+this.getNamespace()+"\\:group\\:ROOT\\:"+this.getId()).addClass("documented");
}else{$("#"+this.getNamespace()+"\\:group\\:ROOT\\:"+this.getId()).removeClass("documented");
}};
StructureGroup.prototype.getDefaultRenderChildren=function(){var children=this.getChildren();
var childCnt=children.length;
var defaultChildren=[];
var child=null;
for(var i=0;
i<childCnt;
i++){child=children[i];
if(child.isDefaultDisplayed()){defaultChildren.push(child);
}}return defaultChildren;
};
StructureGroup.prototype.renderChildren=function(structureHtml,shouldRenderColumns){var children=this.getDefaultRenderChildren();
var childrenCount=children.length;
if(shouldRenderColumns&&childrenCount>1){var maxColumns=3;
var numberColumns=(childrenCount/maxColumns)>=1?maxColumns:childrenCount;
var childrenPerColumn=Math.floor(childrenCount/numberColumns);
var remainingChildren=childrenCount%numberColumns;
var currentIndex=0;
var columnWidth=(100/numberColumns)+"%";
for(var i=0;
i<numberColumns;
i++){structureHtml.append("<div class='structure-column' style='width: "+columnWidth+";'>");
var numberToRender=remainingChildren?(childrenPerColumn+1):childrenPerColumn;
for(var j=0;
j<numberToRender;
j++){var child=children[j+currentIndex];
child.render(structureHtml,false);
}currentIndex=currentIndex+j;
remainingChildren=Math.max(0,remainingChildren-1);
structureHtml.append("</div>");
}}else{for(var i=0;
i<childrenCount;
i++){children[i].render(structureHtml,shouldRenderColumns);
}}};
StructureGroup.prototype.render=function(structureHtml,shouldRenderColumns){if(true||this.getShouldRender()){structureHtml.append("<div id='"+this.getNamespace()+":group:ROOT:"+this.getId()+"' class='structure-group group expanded'><div class='structure-group-header'><div class='structure-group-title-wrapper'><span class='structure-group-title'>"+this.getTitle().replace(":","")+"</span></div></div><div class='structure-group-children'>");
}this.renderChildren(structureHtml,shouldRenderColumns);
if(true||this.getShouldRender()){structureHtml.append("</div></div>");
}};
StructureGroup.prototype.isExpanded=function(){var root=this.getRootElement();
return root.hasClass("expanded");
};
StructureGroup.prototype.toggleExpand=function(){var root=this.getRootElement();
var addRemoveClass=root.hasClass("expanded")?{add:"collapsed",remove:"expanded"}:{add:"expanded",remove:"collapsed"};
root.addClass(addRemoveClass.add).removeClass(addRemoveClass.remove);
this.onToggleExpand();
};
StructureGroup.prototype.onToggleExpand=function(){return;
};
function StructureItemGroup(){}StructureItemGroup.prototype=new StructureGroup();
StructureItemGroup.prototype.constructor=StructureGroup;
StructureItemGroup.prototype.convertToJSON=function(){var json=[];
json.push('"dd_item_id": '+this.getActivityId()+".0");
json.push('"ocid": "'+this.getOCID()+'"');
json.push('"truth_state_mean": "T"');
this.addChildrenJSON(json);
return"{"+json.join(",")+"}";
};
StructureItemGroup.prototype.getRootElement=function(){if(!this.m_rootElement||!this.m_rootElement.length){this.m_rootElement=$("#"+this.getNamespace()+"\\:group\\:ROOT\\:"+this.getId());
}return this.m_rootElement;
};
StructureItemGroup.prototype.render=function(structureHtml,shouldRenderColumns){if(this.getShouldRender()){structureHtml.append("<div id='"+this.getNamespace()+":group:ROOT:"+this.getId()+"' class='structure-group item expanded'><div class='structure-group-header item'><span class='structure-component-toggle'></span><span class='structure-group-title'>"+this.getTitle().replace(":","")+"</span></div><div class='structure-group-children'>");
}this.renderChildren(structureHtml,shouldRenderColumns);
if(this.getShouldRender()){structureHtml.append("</div></div>");
}};
function StructureSubGroup(){}StructureSubGroup.prototype=new StructureGroup();
StructureSubGroup.prototype.constructor=StructureGroup;
StructureSubGroup.prototype.convertToJSON=function(){var json=[];
json.push('"dd_sgroupby_id": '+this.getActivityId()+".0");
json.push('"label": "'+this.getTitle()+'"');
json.push('"truth_state_mean": "T"');
this.addChildrenJSON(json);
return"{"+json.join(",")+"}";
};
StructureSubGroup.prototype.getRootElement=function(){if(!this.m_rootElement){this.m_rootElement=$("#"+this.getNamespace()+"\\:subgroup\\:ROOT\\:"+this.getId());
}return this.m_rootElement;
};
StructureSubGroup.prototype.render=function(structureHtml,shouldRenderColumns){if(this.getShouldRender()){structureHtml.append("<div id='"+this.getNamespace()+":subgroup:ROOT:"+this.getId()+"' class='structure-group sub-group expanded'><div class='structure-group-header'><span class='structure-group-title sub-group'>"+this.getTitle().replace(":","")+"</span></div><div class='structure-group-children'>");
}this.renderChildren(structureHtml,shouldRenderColumns);
if(this.getShouldRender()){structureHtml.append("</div></div>");
}};
function StructureTermGroup(){this.m_activeTerm=null;
this.m_previousActiveTerm=null;
this.m_isShowMore=false;
return this;
}StructureTermGroup.prototype=new StructureGroup();
StructureTermGroup.prototype.constructor=StructureGroup;
StructureTermGroup.prototype.getActiveTerm=function(){return this.m_activeTerm;
};
StructureTermGroup.prototype.setActiveTerm=function(activeTerm){if(!StructureTerm.prototype.isPrototypeOf(activeTerm)){throw new Error("Called setActiveTerm on StructureTermGroup with invalid activeTerm parameter.");
}this.m_activeTerm=activeTerm;
return this;
};
StructureTermGroup.prototype.getPreviousActiveTerm=function(){return this.m_previousActiveTerm;
};
StructureTermGroup.prototype.setPreviousActiveTerm=function(activeTerm){if(!StructureTerm.prototype.isPrototypeOf(activeTerm)){throw new Error("Called setPreviousActiveTerm on StructureTermGroup with invalid activeTerm parameter.");
}this.m_previousActiveTerm=activeTerm;
return this;
};
StructureTermGroup.prototype.convertToJSON=function(){var json=[];
json.push('"dd_attribute_id": '+this.getActivityId()+".0");
json.push('"ocid": "'+this.getOCID()+'"');
json.push('"truth_state_mean": "T"');
this.addDescendentJSON(json);
return"{"+json.join(",")+"}";
};
StructureTermGroup.prototype.isShowMore=function(){return this.m_isShowMore;
};
StructureTermGroup.prototype.setIsShowMore=function(showMore){if(typeof showMore!=="boolean"){throw new Error("Called setIsShowMore on StructureNode with invalid showMore paramater");
}this.m_isShowMore=showMore;
};
StructureTermGroup.prototype.hasShownMore=function(){return this.m_hasShownMore;
};
StructureTermGroup.prototype.setHasShownMore=function(hasShownMore){if(typeof hasShownMore!=="boolean"){throw new Error("Called setHasShownMore on StructureNode with invalid hasShownMore paramater");
}this.m_hasShownMore=hasShownMore;
};
StructureTermGroup.prototype.getChildrenWithPriority=function(priority){var children=this.getChildren();
var childrenWithPriority=[];
childrenWithPriority=$.grep(children,(function(term,i){return term.getPriority&&(term.getPriority()===priority);
}));
return childrenWithPriority;
};
StructureTermGroup.prototype.notifyStateChange=function(node){StructureNode.prototype.notifyStateChange.call(this,node);
this.handleTermActivity(node);
};
StructureTermGroup.prototype.handleTermActivity=function(term){this.performNoneTermUpdates(term);
};
StructureTermGroup.prototype.performNoneTermUpdates=function(term){var noneTerm=this.getNoneTerm();
var freeTextTerms=null;
var stateOfFreeText=null;
var self=this;
var noneTermHasValidState=null;
if(!noneTerm){return;
}noneTermHasValidState=noneTerm.getState()&&noneTerm.getState().getValue();
if(term!==noneTerm&&term.getState()&&term.getState().getValue()&&noneTermHasValidState){noneTerm.deactivate();
}else{if(noneTermHasValidState){freeTextTerms=this.getActiveFreeTextTerm();
if(!freeTextTerms.length){this.deactivateTerms();
}else{var stateOfFreeText=freeTextTerms[0].getState().getValue();
if(stateOfFreeText){this.setPreviousActiveTerm(this.m_activeTerm);
this.launchRemoveFreeTextWarning(function(){self.deactivateTerms();
});
}}}}this.m_activeTerm=term;
};
StructureTermGroup.prototype.getUnshownDocumentedCount=function(){var unshownChildren=this.getChildrenWithPriority(2);
var unshownChildCnt=unshownChildren.length;
var unshownDocumentedCount=0;
for(var i=0;
i<unshownChildCnt;
i++){var unshownChild=unshownChildren[i];
if(unshownChild.getChildren().length){unshownDocumentedCount+=unshownChild.getNumberOfDocumentedChildren();
}else{if(unshownChild.getState()&&unshownChild.getState().getValue()){unshownDocumentedCount++;
}}}return unshownDocumentedCount;
};
StructureTermGroup.prototype.updateUnshownDocumentedCount=function(){var $undocumentedCount=this.getDocumentedCountContainer();
var undocumentedCount=this.getUnshownDocumentedCount();
if(undocumentedCount&&!this.isShowMore()){$undocumentedCount.html(undocumentedCount);
$undocumentedCount.addClass("shown");
}else{$undocumentedCount.empty();
$undocumentedCount.removeClass("shown");
}};
StructureTermGroup.prototype.getDocumentedCountContainer=function(){if(!this.m_documentedCountContainer||!this.m_documentedCountContainer.length){this.m_documentedCountContainer=$("#documentedCountContainer"+this.getId());
}return this.m_documentedCountContainer;
};
StructureTermGroup.prototype.getActiveFreeTextTerm=function(term){var freeTextTerms=this.filterTerms(function(obj){return FreeTextStructureTerm.prototype.isPrototypeOf(obj)&&obj.getState()?obj.getState().getValue()!==null:false;
});
return freeTextTerms;
};
StructureTermGroup.prototype.getNoneTerm=function(term){if(!this.m_noneTerm){this.m_noneTerm=this.filterTerms(function(obj){return NoneStructureTerm.prototype.isPrototypeOf(obj);
})[0];
}return this.m_noneTerm;
};
StructureTermGroup.prototype.deactivateTerms=function(){var activeTerms=this.filterTerms(function(obj){return !NoneStructureTerm.prototype.isPrototypeOf(obj)&&obj.getState()?obj.getState().getValue()!==null:false;
});
for(var t=0;
t<activeTerms.length;
t++){var currentTerm=activeTerms[t];
currentTerm.deactivate();
}};
StructureTermGroup.prototype.filterTerms=function(func){if(typeof func!=="function"){throw new Error("Called filterTerms on the StructureTermGroup with an invalid callback function");
}var terms=[];
var childrenTerms=this.getAllDescendents([]);
for(var i=0;
i<childrenTerms.length;
i++){if(func(childrenTerms[i])){terms.push(childrenTerms[i]);
}}return terms;
};
StructureTermGroup.prototype.launchRemoveFreeTextWarning=function(removeBtnClickFunc){if(typeof removeBtnClickFunc!=="function"){throw new Error("Called launchRemoveFreeTextWarning on the StructureTermGroup with an invalid callback function");
}var self=this;
var modalId="removeFreeText"+this.getId();
var cancelModalBtn=null;
var removeModalBtn=null;
var removeFreeTextModal=MP_ModalDialog.retrieveModalDialogObject(modalId);
if(!removeFreeTextModal){removeFreeTextModal=new ModalDialog(modalId);
removeFreeTextModal.setShowCloseIcon(false);
removeFreeTextModal.setHeaderTitle(i18n.discernabu.mpage_structured_documentation.REMOVE_FREE_TEXT_HEADER);
removeFreeTextModal.setLeftMarginPercentage(35).setRightMarginPercentage(35).setTopMarginPercentage(20).setIsBodySizeFixed(false).setIsFooterAlwaysShown(true);
removeModalBtn=new ModalButton("removeModal");
removeModalBtn.setFocusInd(true).setCloseOnClick(true);
removeModalBtn.setOnClickFunction(removeBtnClickFunc);
removeModalBtn.setText(i18n.discernabu.mpage_structured_documentation.REMOVE);
removeFreeTextModal.addFooterButton(removeModalBtn);
cancelModalBtn=new ModalButton("cnlModal");
cancelModalBtn.setText(i18n.discernabu.mpage_structured_documentation.CANCEL);
cancelModalBtn.setOnClickFunction(function(){self.cancelFreeTextBtnCallback();
});
removeFreeTextModal.addFooterButton(cancelModalBtn);
removeFreeTextModal.setBodyDataFunction(function(modalObj){modalObj.setBodyHTML("<div class='structure-remove-free-text-warning'><span>"+i18n.discernabu.mpage_structured_documentation.REMOVE_FREE_TEXT_WARNING+"</span></div>");
});
MP_ModalDialog.addModalDialogObject(removeFreeTextModal);
}MP_ModalDialog.showModalDialog(modalId);
};
StructureTermGroup.prototype.cancelFreeTextBtnCallback=function(){var modalId="removeFreeText"+this.getId();
this.getActiveTerm().jumpToState(0);
this.setActiveTerm(this.getPreviousActiveTerm());
MP_ModalDialog.closeModalDialog(modalId);
MP_ModalDialog.deleteModalDialogObject(modalId);
};
StructureTermGroup.prototype.render=function(structureHtml,shouldRenderColumns){if(this.getShouldRender()){structureHtml.append("<div id='"+this.getNamespace()+":group:ROOT:"+this.getId()+"' class='structure-group item expanded'><div class='structure-group-header item'><span class='structure-group-title'>"+this.getTitle()+"</span></div><div class='structure-group-children'>");
}this.renderChildren(structureHtml,shouldRenderColumns);
if(this.getShouldRender()){structureHtml.append("</div>");
this.renderShowMore(structureHtml);
structureHtml.append("</div>");
}};
StructureTermGroup.prototype.renderShowMore=function(structureHtml){var docI18n=i18n.discernabu.mpage_structured_documentation;
var organizer=this.getOrganizer();
if(organizer.isPriorityEnabled()){var showMoreText=docI18n.SHOW_MORE;
if(this.getChildrenWithPriority(2).length){structureHtml.append("<div class='show-more-link-container'><a id='showMoreLink"+this.getId()+"' class='show-more-link'>"+showMoreText+"</a><div id='documentedCountContainer"+this.getId()+"' class='documented-count'></div></div>");
}}else{this.setIsShowMore(true);
}};
StructureTermGroup.prototype.getUnprioritizedContentContainer=function(){if(!this.m_unprioritizedContent||!this.m_unprioritizedContent.length){this.m_unprioritizedContent=$("#unprioritizedContent"+this.getId());
}return this.m_unprioritizedContent;
};
StructureTermGroup.prototype.getShowMoreLinkContainer=function(){if(!this.m_showMoreLinkContainer||!this.m_showMoreLinkContainer.length){this.m_showMoreLinkContainer=$("#showMoreLink"+this.getId());
}return this.m_showMoreLinkContainer;
};
StructureTermGroup.prototype.showMore=function(){var docI18n=i18n.discernabu.mpage_structured_documentation;
var $root=$(this.getRootElement());
var $unprioritizedTerms=this.getUnprioritizedContentContainer();
var defaultRenderedChildren=this.getDefaultRenderChildren();
var defaultChildrenLen=defaultRenderedChildren.length;
var lastTerm=defaultChildrenLen?defaultRenderedChildren[defaultChildrenLen-1]:null;
var $lastTerm=null;
if(lastTerm){$lastTerm=$(lastTerm.getRootElement());
}if($root.length){if(this.hasShownMore()){$unprioritizedTerms.show();
}else{var structureHtml=new StructureHtml();
this.renderUnprioritizedSectionHtml(structureHtml);
if($lastTerm&&$lastTerm.length){$lastTerm.after(structureHtml.getHtml());
}else{$root.find(".structure-group-children").prepend(structureHtml.getHtml());
}this.setHasShownMore(true);
}this.getShowMoreLinkContainer().text(docI18n.SHOW_LESS);
this.setIsShowMore(true);
}};
StructureTermGroup.prototype.showLess=function(){var docI18n=i18n.discernabu.mpage_structured_documentation;
var $unprioritizedTerms=this.getUnprioritizedContentContainer();
$unprioritizedTerms.hide();
this.getShowMoreLinkContainer().text(docI18n.SHOW_MORE);
this.setIsShowMore(false);
var organizer=this.getOrganizer();
organizer.goToNode(this,false);
};
StructureTermGroup.prototype.toggleShowMore=function(){if(this.isShowMore()){this.showLess();
}else{this.showMore();
}this.updateUnshownDocumentedCount();
};
StructureTermGroup.prototype.renderUnprioritizedSectionHtml=function(structureHtml){var children=this.getChildrenWithPriority(2);
var childrenCnt=children.length;
var hasOtherShownClass="";
if(childrenCnt!==this.getChildren().length){hasOtherShownClass="structured-has-shown-terms";
}if(childrenCnt){structureHtml.append("<div id='unprioritizedContent"+this.getId()+"' class='unprioritized-terms "+hasOtherShownClass+"'>");
for(var i=0;
i<childrenCnt;
i++){children[i].render(structureHtml,false);
}structureHtml.append("</div>");
}};
function SingleStructureTermGroup(){}SingleStructureTermGroup.prototype=new StructureTermGroup();
SingleStructureTermGroup.prototype.constructor=StructureTermGroup;
SingleStructureTermGroup.prototype.handleTermActivity=function(term){StructureTermGroup.prototype.handleTermActivity.call(this,term);
var isValidState=term.getState().getValue();
var self=this;
var freeTextTerm=this.getActiveFreeTextTerm();
if(isValidState){if(term!==this.m_activeTerm&&this.m_activeTerm){if(freeTextTerm.length&&freeTextTerm[0]===this.m_activeTerm){this.setPreviousActiveTerm(this.m_activeTerm);
self.launchRemoveFreeTextWarning(function(){freeTextTerm[0].deactivate();
});
}else{this.m_activeTerm.deactivate();
}}this.m_activeTerm=term;
}};
SingleStructureTermGroup.prototype.clearSelf=function(){StructureTermGroup.prototype.clearSelf.call(this);
this.m_activeTerm=null;
};
function MultiStructureTermGroup(){}MultiStructureTermGroup.prototype=new StructureTermGroup();
MultiStructureTermGroup.prototype.constructor=StructureTermGroup;
function YesNoStructureTermGroup(){}YesNoStructureTermGroup.prototype=new StructureTermGroup();
YesNoStructureTermGroup.prototype.constructor=StructureTermGroup;
function TableStructureTermGroup(){this.m_comment="";
this.m_inNavigateStructureTree=false;
this.m_shouldSave=false;
SingleStructureTermGroup.call(this);
CycleStructureTerm.call(this);
}TableStructureTermGroup.prototype=new SingleStructureTermGroup();
TableStructureTermGroup.prototype.constructor=TableStructureTermGroup;
JSONStructureOrganizerBuilder.extendClassMethods(TableStructureTermGroup,CycleStructureTerm,["setCaption","getCaption","addState","getCurrentState","setCurrentState","getStates","cycleState","jumpToState","deactivate","refresh","getComment","setComment","setSavedComment","buildTextArea","displayComment","checkIsDirty","getRootElement","getSavedComment","resetDirty","setPriority","getPriority","setUIValue","getUIValue","displayNode","isDefaultDisplayed","isCurrentlyDisplayed"]);
TableStructureTermGroup.prototype.checkIsDirty=function(){return false;
};
TableStructureTermGroup.prototype.convertToJSON=function(){return;
};
TableStructureTermGroup.prototype.render=function(structureHtml){var commentClass="";
var commentHTML="";
var stateClass=this.m_state?this.m_state.getCSSClass():"";
if(this.getComment()){commentHTML="<div class='structure-term-comment-wrapper'>"+this.buildTextArea()+"</div>";
commentClass="comment ";
}structureHtml.append("<div id='"+this.getNamespace()+":term:ROOT:"+this.getId()+"' class='structure-term-item table-group-term "+commentClass+stateClass+"' title='"+this.getCaption()+"'><div class='structure-term-info-wrapper'><span class='structure-term-title'>"+this.getTitle()+"</span><span class='structure-comment'>&nbsp;</span></div><div class='structure-table-group-terms'>");
this.renderChildren(structureHtml,false);
structureHtml.append("</div>"+commentHTML+"</div>");
};
TableStructureTermGroup.prototype.handleTermActivity=function(term){SingleStructureTermGroup.prototype.handleTermActivity.call(this,term);
var activeTerm=this.getActiveTerm();
var termGroupState=activeTerm?activeTerm.getState():null;
if(termGroupState){this.updateState(termGroupState);
}else{this.jumpToState(0);
}this.refresh();
};
TableStructureTermGroup.prototype.notifyStateChange=function(node){StructureTermGroup.prototype.notifyStateChange.call(this,node);
if(this.getParent()){this.getParent().notifyStateChange(node);
}};
TableStructureTermGroup.prototype.updateState=function(state){var currentState=this.getState();
if(state!==currentState){this.setState(state);
this.setPreviousState(currentState);
}this.refresh();
};
TableStructureTermGroup.prototype.clearSelf=function(){SingleStructureTermGroup.prototype.clearSelf.call(this);
CycleStructureTerm.prototype.clearSelf.call(this);
};
function ExpandStructureTermGroup(){this.m_inNavigateStructureTree=false;
this.m_shouldSave=false;
StructureTermGroup.call(this);
CycleStructureTerm.call(this);
}ExpandStructureTermGroup.prototype=new StructureTermGroup();
ExpandStructureTermGroup.prototype.constructor=ExpandStructureTermGroup;
JSONStructureOrganizerBuilder.extendClassMethods(ExpandStructureTermGroup,CycleStructureTerm,["setCaption","getCaption","addState","getCurrentState","setCurrentState","getStates","cycleState","jumpToState","deactivate","refresh","checkIsDirty","getRootElement","resetDirty","setPriority","getPriority","displayNode","isDefaultDisplayed","isCurrentlyDisplayed","setUIValue","getUIValue","postProcessing"]);
JSONStructureOrganizerBuilder.extendClassMethods(ExpandStructureTermGroup,TableStructureTermGroup,["convertToJSON","updateState","notifyStateChange","checkIsDirty"]);
ExpandStructureTermGroup.prototype.render=function(structureHtml){structureHtml.append("<div class ='structure-group expand-group collapsed' id='"+this.getNamespace()+":term:ROOT:"+this.getId()+"'><div class ='structure-group-header'> <span class='structure-component-toggle'></span><span class='structure-group-title' title ='"+this.getCaption()+"'>"+this.getTitle()+"</span><div id='documentedExpandCountContainer"+this.getId()+"' class='documented-count'></div></div><div class='structure-group-children'>");
this.renderChildren(structureHtml,false);
if(this.getShouldRender()&&this.getDefaultRenderChildren()!==this.getChildren()){this.renderShowMore(structureHtml);
}structureHtml.append("</div></div>");
};
ExpandStructureTermGroup.prototype.getDefaultRenderChildren=function(){var defaultRenderedChildren=StructureGroup.prototype.getDefaultRenderChildren.call(this);
if(!defaultRenderedChildren.length){defaultRenderedChildren=this.getChildren();
this.setIsShowMore(true);
}return defaultRenderedChildren;
};
ExpandStructureTermGroup.prototype.updateExpandDocumentedCount=function(){var $documentedCntContainer=this.getDocumentedExpandCountContainer();
var documentedCnt=this.getNumberOfDocumentedChildren();
if(this.isExpanded()||!documentedCnt){$documentedCntContainer.empty();
$documentedCntContainer.removeClass("shown");
}else{$documentedCntContainer.html(documentedCnt);
$documentedCntContainer.addClass("shown");
}};
ExpandStructureTermGroup.prototype.getDocumentedExpandCountContainer=function(){if(!this.m_documentedExpandCountContainer||!this.m_documentedExpandCountContainer.length){this.m_documentedExpandCountContainer=$("#documentedExpandCountContainer"+this.getId());
}return this.m_documentedExpandCountContainer;
};
ExpandStructureTermGroup.prototype.onToggleExpand=function(){this.updateExpandDocumentedCount();
};
function TermState(){this.m_value=null;
this.m_cssClass="";
this.m_key="";
this.m_data={};
return this;
}TermState.prototype.getValue=function(){return this.m_value;
};
TermState.prototype.setValue=function(value){this.m_value=value;
return this;
};
TermState.prototype.getCSSClass=function(){return this.m_cssClass;
};
TermState.prototype.setCSSClass=function(cssClass){if(typeof cssClass!=="string"){throw new Error("Attempted to call TermState.prototype.setCSSClass with invalid parameter.");
}this.m_cssClass=cssClass;
return this;
};
TermState.prototype.getKey=function(){return this.m_key;
};
TermState.prototype.setKey=function(key){this.m_key=key;
return this;
};
TermState.prototype.getData=function(){return this.m_data;
};
TermState.prototype.setData=function(data){this.m_data=data;
return this;
};
TermState.prototype.addData=function(key,dataPack){this.m_data[key]=dataPack;
return this;
};
TermState.prototype.getDataValue=function(key){if(!this.m_data[key]){this.m_data[key]={};
}return this.m_data[key];
};
function StructureTerm(){this.m_caption="";
this.m_comment="";
this.m_savedComment="";
return this;
}StructureTerm.prototype=new StructureNode();
StructureTerm.prototype.constructor=StructureNode;
StructureTerm.prototype.getComment=function(){return this.m_comment;
};
StructureTerm.prototype.setComment=function(comment){if(typeof comment!=="string"){throw new Error("Attempted to call StructureTerm.prototype.setComment with invalid parameter.");
}this.m_comment=comment;
return this;
};
StructureTerm.prototype.getPriority=function(){return this.m_priority;
};
StructureTerm.prototype.isDefaultDisplayed=function(){var DONT_SHOW_PRIORITY=2;
var priority=this.getPriority();
var organizer=this.getOrganizer();
if(organizer&&organizer.isPriorityEnabled()){return(priority===DONT_SHOW_PRIORITY)?false:true;
}else{return true;
}};
StructureTerm.prototype.isCurrentlyDisplayed=function(){var termGroup=this.getParent();
var DONT_SHOW_PRIORITY=2;
var priority=this.getPriority();
if((StructureTermGroup.prototype.isPrototypeOf(termGroup)&&(!termGroup.isCurrentlyDisplayed()||!termGroup.isShowMore())&&priority===DONT_SHOW_PRIORITY)||(ExpandStructureTermGroup.prototype.isPrototypeOf(termGroup)&&!termGroup.isExpanded())){return false;
}else{return true;
}};
StructureTerm.prototype.displayNode=function(){var termGroup=this.getParent();
if(StructureTermGroup.prototype.isPrototypeOf(termGroup)&&!termGroup.isShowMore()){termGroup.toggleShowMore();
}if(!termGroup.isCurrentlyDisplayed()){termGroup.displayNode();
}if(ExpandStructureTermGroup.prototype.isPrototypeOf(termGroup)&&!termGroup.isExpanded()){termGroup.toggleExpand();
}};
StructureTerm.prototype.postProcessing=function(){var node=this;
if(node.getState()&&node.getState().getValue()&&!node.isCurrentlyDisplayed()){node.displayNode();
}};
StructureTerm.prototype.setPriority=function(priority){if(typeof priority!=="number"){throw new Error("Attempted to call StructureTerm.prototype.setPriority with invalid paramater.");
}this.m_priority=priority;
};
StructureTerm.prototype.setUIValue=function(uiValue){this.m_uiValue=uiValue;
};
StructureTerm.prototype.getUIValue=function(){return this.m_uiValue;
};
StructureTerm.prototype.getSavedComment=function(){return this.m_savedComment;
};
StructureTerm.prototype.setSavedComment=function(comment){if(typeof comment!=="string"){throw new Error("Attempted to call StructureTerm.prototype.setComment with invalid parameter.");
}this.m_savedComment=comment;
return this;
};
StructureTerm.prototype.buildTextArea=function(){var textArea="<textarea id='comment"+this.getNamespace()+this.getId()+"' class='term-textarea textarea-fill' type='text' title='Add Comment' placeholder='Add Comment'>"+this.getComment()+"</textarea>";
return textArea;
};
StructureTerm.prototype.displayComment=function(comment){var validatedComment=comment?this.unescapePlaintextAsHtml(comment):comment+"";
this.setComment(validatedComment);
this.setSavedComment(validatedComment);
var termContainer=this.getRootElement();
var commentSection=termContainer.children("div.structure-term-comment-wrapper");
if(termContainer.length>0&&commentSection.length<1){commentSection="<div class='structure-term-comment-wrapper'>"+this.buildTextArea()+"</div>";
termContainer.append(commentSection);
}termContainer.addClass("comment");
};
StructureTerm.prototype.getCaption=function(){return this.m_caption;
};
StructureTerm.prototype.setCaption=function(caption){if(typeof caption!=="string"){throw new Error("Attempted to call StructureTerm.prototype.setCaption with invalid parameter.");
}this.m_caption=caption;
return this;
};
StructureTerm.prototype.convertToJSON=function(){var comment=this.getComment();
var json=[];
json.push('"dd_attr_menu_item_id": '+this.getActivityId()+".0");
json.push('"ocid": "'+this.getOCID()+'"');
json.push('"display_seq": '+this.getDisplayPosition());
json.push('"truth_state_mean": "'+((this.getState().getValue())?"T":"F")+'"');
json.push('"comment": "'+(comment?this.escapePlaintextAsHtml(comment):comment)+'"');
json.push('"comment_format_mean": "XHTML"');
json.push('"value_text": ""');
json.push('"value_text_format_mean": "XHTML"');
json.push('"value_number": 0.0');
return"{"+json.join(",")+"}";
};
StructureTerm.prototype.updateState=function(state){StructureNode.prototype.updateState.call(this,state);
this.updateDirty();
};
StructureTerm.prototype.getRootElement=function(){if(!this.m_rootElement||!this.m_rootElement.length){this.m_rootElement=$("#"+this.getNamespace()+"\\:term\\:ROOT\\:"+this.getId());
}return this.m_rootElement;
};
StructureTerm.prototype.checkIsDirty=function(){return this.getState()!==this.getInitialState();
};
StructureTerm.prototype.updateDirty=function(){var wasDirty=this.m_dirty;
this.m_dirty=this.checkIsDirty();
if(wasDirty!==this.m_dirty){this.getParent().notifyDirty(this);
}};
StructureTerm.prototype.resetDirty=function(){StructureNode.prototype.resetDirty.call(this);
this.setInitialState(this.getState());
};
StructureTerm.prototype.render=function(structureHtml){structureHtml.append("<div>"+this.getTitle()+"</div>");
};
StructureTerm.prototype.deactivate=function(){return;
};
StructureTerm.prototype.refresh=function(){if(this.m_state!==this.m_previousState){$("#"+this.getNamespace()+"\\:term\\:ROOT\\:"+this.getId()).removeClass((this.m_previousState)?this.m_previousState.getCSSClass():"").addClass(this.m_state.getCSSClass());
}};
function LineStructureTerm(){this.m_type="LINE";
return this;
}LineStructureTerm.prototype=new StructureTerm();
LineStructureTerm.prototype.constructor=StructureTerm;
LineStructureTerm.prototype.render=function(structureHtml){structureHtml.append("<div id='"+this.getNamespace()+":term:ROOT:"+this.getId()+"' class='structure-term-item line-term'></div>");
};
function CycleStructureTerm(){this.m_currentState=0;
this.m_states=null;
return this;
}CycleStructureTerm.prototype=new StructureTerm();
CycleStructureTerm.prototype.constructor=StructureTerm;
CycleStructureTerm.prototype.getCurrentState=function(){return this.m_currentState;
};
CycleStructureTerm.prototype.setCurrentState=function(currentState){if(typeof currentState!=="number"){throw new Error("Called setCurrentState on CycleStructureTerm with invalid currentState parameter.");
}if(currentState<0||currentState>=this.m_states.length){throw new Error("Called setCurrentState on CycleStructureTerm with an invalid state index.");
}this.m_currentState=currentState;
return this;
};
CycleStructureTerm.prototype.addState=function(state){if(!TermState.prototype.isPrototypeOf(state)){throw new Error("Called addState on CycleStructureTerm with invalid state parameter.");
}this.getStates().push(state);
return this;
};
CycleStructureTerm.prototype.getStates=function(){if(!this.m_states){this.m_states=[];
}return this.m_states;
};
CycleStructureTerm.prototype.cycleState=function(){this.m_currentState=(this.m_currentState+1)%this.m_states.length;
this.updateState(this.m_states[this.m_currentState]);
};
CycleStructureTerm.prototype.jumpToState=function(stateNumber){this.m_currentState=stateNumber%this.m_states.length;
this.updateState(this.m_states[this.m_currentState]);
};
CycleStructureTerm.prototype.deactivate=function(){this.m_currentState=0;
this.updateState(this.m_states[this.m_currentState]);
};
CycleStructureTerm.prototype.render=function(structureHtml){var commentClass="";
var commentHTML="";
var stateClass=this.m_state?this.m_state.getCSSClass():"";
if(this.getComment()){commentHTML="<div class='structure-term-comment-wrapper'>"+this.buildTextArea()+"</div>";
commentClass="comment ";
}structureHtml.append("<div id='"+this.getNamespace()+":term:ROOT:"+this.getId()+"' class='structure-term-item cycle-term "+commentClass+stateClass+"' title='"+this.getCaption()+"'><div class='structure-term-info-wrapper'><span class='structure-term-title'>"+this.getTitle()+"</span><span class='structure-comment'>&nbsp;</span></div><div class='structure-documented-icon-area'></div>"+commentHTML+"</div>");
};
CycleStructureTerm.prototype.clearSelf=function(){StructureTerm.prototype.clearSelf.call(this);
this.deactivate();
};
function YesNoStructureTerm(){return this;
}YesNoStructureTerm.prototype=new CycleStructureTerm();
YesNoStructureTerm.prototype.constructor=CycleStructureTerm;
YesNoStructureTerm.prototype.render=function(structureHtml){var commentClass="";
var commentHTML="";
var stateClass=this.m_state?(this.m_state.getCSSClass()+" "+this.getYesNoValue()):"";
if(this.getComment()){commentHTML="<div class='structure-term-comment-wrapper'>"+this.buildTextArea()+"</div>";
commentClass="comment ";
}structureHtml.append("<div id='"+this.getNamespace()+":term:ROOT:"+this.getId()+"' class='structure-term-item cycle-term yes-no "+commentClass+stateClass+"' title='"+this.getCaption()+"'><div class='structure-term-info-wrapper'><span class='structure-term-title'>"+this.getTitle()+"</span><span class='structure-comment'>&nbsp;</span></div><div id='"+this.getNamespace()+":term:YES:"+this.getId()+"' class='structure-yes-no-icon structure-yes'>Y</div><div id='"+this.getNamespace()+":term:NO:"+this.getId()+"' class='structure-yes-no-icon structure-no'>N</div>"+commentHTML+"</div>");
};
YesNoStructureTerm.prototype.getYesNoValue=function(){if(!this.m_state||this.m_state.getValue()===null){return"";
}if(this.m_state.getValue()){return"yes";
}return"no";
};
YesNoStructureTerm.prototype.refresh=function(){StructureTerm.prototype.refresh.call(this);
var root=$("#"+this.getNamespace()+"\\:term\\:ROOT\\:"+this.getId());
if(this.getState()&&this.getState().getValue()===true){root.addClass("yes").removeClass("no");
}else{if(this.getState()&&this.getState().getValue()===false){root.addClass("no").removeClass("yes");
}else{root.removeClass("yes").removeClass("no");
}}};
function InputStructureTerm(){this.m_dataType="";
this.m_currentValue="";
this.m_previousValue="";
this.m_validators=null;
this.m_activeState=null;
this.m_inactiveState=null;
this.m_isValid=true;
return this;
}InputStructureTerm.prototype=new StructureTerm();
InputStructureTerm.prototype.constructor=StructureTerm;
InputStructureTerm.prototype.getDataType=function(){return this.m_dataType;
};
InputStructureTerm.prototype.setDataType=function(dataType){if(typeof dataType!=="string"){throw new Error("Called setDataType on InputStructureTerm with invalid dataType parameter.");
}this.m_dataType=dataType;
return this;
};
InputStructureTerm.prototype.getPreviousValue=function(){return this.m_previousValue;
};
InputStructureTerm.prototype.resetDirty=function(){StructureTerm.prototype.resetDirty.call(this);
this.m_previousValue=this.m_currentValue;
};
InputStructureTerm.prototype.checkIsDirty=function(){var currentlyActive=this.getState()===this.getActiveState();
var wasInactive=this.getInitialState()===this.getInactiveState();
var currentValue=this.getCurrentValue();
var previousValue=this.getPreviousValue();
return(wasInactive&&currentlyActive)||(!wasInactive&&currentlyActive&&currentValue!==previousValue)||(!wasInactive&&!currentlyActive);
};
InputStructureTerm.prototype.convertToJSON=function(){var currentValue=this.getCurrentValue();
var comment=this.getComment();
var json=[];
json.push('"dd_attr_menu_item_id": '+this.getActivityId()+".0");
json.push('"ocid": "'+this.getOCID()+'"');
json.push('"display_seq": '+this.getDisplayPosition());
json.push('"truth_state_mean": "'+((this.getState().getValue())?"T":"F")+'"');
json.push('"comment": "'+(comment?this.escapePlaintextAsHtml(comment):comment)+'"');
json.push('"comment_format_mean": "XHTML"');
json.push('"value_text": "'+(currentValue?this.escapePlaintextAsHtml(currentValue):currentValue)+'"');
json.push('"value_text_format_mean": "XHTML"');
if(this.m_dataType==="NUMERIC"){currentValue=parseFloat(this.getCurrentValue());
if(currentValue%1===0){currentValue=currentValue+".0";
}json.push('"value_number": '+currentValue);
}else{json.push('"value_number": 0.0');
}return"{"+json.join(",")+"}";
};
InputStructureTerm.prototype.getCurrentValue=function(){return this.m_currentValue;
};
InputStructureTerm.prototype.update=function(){if(this.validate()){this.m_isValid=true;
if(this.m_currentValue!==""){this.getActiveState().addData("value",this.m_currentValue);
this.updateState(this.m_activeState);
}else{this.updateState(this.m_inactiveState);
}}else{this.m_isValid=false;
this.updateState(this.m_inactiveState);
}};
InputStructureTerm.prototype.refresh=function(){StructureTerm.prototype.refresh.call(this);
var input=$("#"+this.getNamespace()+"\\:term\\:INPUT\\:"+this.getId());
if(this.getCurrentValue()!==input.val()){input.val(this.getCurrentValue());
}if(!this.m_isValid){$("#"+this.getNamespace()+"\\:term\\:ROOT\\:"+this.getId()).addClass("invalid");
}else{$("#"+this.getNamespace()+"\\:term\\:ROOT\\:"+this.getId()).removeClass("invalid");
}};
InputStructureTerm.prototype.setCurrentValue=function(currentValue){if(typeof currentValue!=="string"){throw new Error("Called setCurrentValue on InputStructureTerm with invalid type: expected {String}");
}this.m_currentValue=currentValue;
return this;
};
InputStructureTerm.prototype.deactivate=function(){this.setCurrentValue("");
this.updateState(this.m_inactiveState);
};
InputStructureTerm.prototype.clearSelf=function(){StructureTerm.prototype.clearSelf.call(this);
this.deactivate();
};
InputStructureTerm.prototype.getValidators=function(){if(!this.m_validators){this.m_validators=[];
}return this.m_validators;
};
InputStructureTerm.prototype.addValidator=function(validator){if(!InputValidator.prototype.isPrototypeOf(validator)){throw new Error("Called addValidator on InputStructureTerm with invalid type, expected InputValidator");
}this.getValidators().push(validator);
return this;
};
InputStructureTerm.prototype.validate=function(){var currentValue=this.getCurrentValue();
if(currentValue==""){return true;
}var validators=this.getValidators();
var numberValidators=validators.length;
for(var i=0;
i<numberValidators;
i++){if(!validators[i].validate(currentValue)){return false;
}}return true;
};
InputStructureTerm.prototype.render=function(structureHtml){var commentClass="";
var commentHTML="";
var titleText=this.getTitle();
var itemWidth="45%";
var currentValueHtml=this.escapePlaintextAsHtml(this.m_currentValue);
var inputElement="<input style='width: "+itemWidth+";' type='text' id='"+this.getNamespace()+":term:INPUT:"+this.getId()+"' value='"+currentValueHtml+"'>";
if(titleText.indexOf("_")===-1){titleText+="_";
}if(titleText.indexOf("_")===0){titleText=inputElement+"<span class='structure-term-title' style='width: "+itemWidth+";'>"+titleText.replace(/_/g,"")+"</span>";
}else{if(titleText.lastIndexOf("_")===(titleText.length-1)){titleText="<span class='structure-term-title' style='width: "+itemWidth+";'>"+titleText.replace(/_/g,"")+"</span>"+inputElement;
}else{var textSplit=titleText.split(/_+/g);
var numberOfNonBlank=0;
var i=0;
for(i=0;
i<textSplit.length;
i++){(textSplit[i])&&numberOfNonBlank++;
}itemWidth=(90/(numberOfNonBlank+1))+"%";
inputElement="<input style='width: "+itemWidth+";' type='text' id='"+this.getNamespace()+":term:INPUT:"+this.getId()+"' value='"+currentValueHtml+"'>";
for(i=0;
i<textSplit.length;
i++){if(textSplit[i]){textSplit[i]=("<span class='structure-term-title' style='width: "+itemWidth+";'>"+textSplit[i]+"</span>");
}}titleText=textSplit.join(inputElement);
}}var stateClass=this.m_state?this.m_state.getCSSClass():"";
if(this.getComment()){commentHTML="<div class='structure-term-comment-wrapper'>"+this.buildTextArea()+"</div>";
commentClass="comment ";
}structureHtml.append("<div id='"+this.getNamespace()+":term:ROOT:"+this.getId()+"' class='structure-term-item input-term "+commentClass+stateClass+"' title='"+this.getCaption()+"'><div class='structure-term-info-wrapper'>"+titleText+"<span class='structure-comment'>&nbsp;</span></div><div class='structure-documented-icon-area'></div>"+commentHTML+"</div>");
};
InputStructureTerm.prototype.getActiveState=function(){return this.m_activeState;
};
InputStructureTerm.prototype.setActiveState=function(activeState){if(!TermState.prototype.isPrototypeOf(activeState)){throw new Error("Attempted to call InputStructureTerm.prototype.setActiveState with invalid parameter");
}this.m_activeState=activeState;
return this;
};
InputStructureTerm.prototype.getInactiveState=function(){return this.m_inactiveState;
};
InputStructureTerm.prototype.setInactiveState=function(inactiveState){if(!TermState.prototype.isPrototypeOf(inactiveState)){throw new Error("Attempted to call InputStructureTerm.prototype.setInactiveState with invalid parameter.");
}this.m_inactiveState=inactiveState;
return this;
};
function FreeTextStructureTerm(){return this;
}FreeTextStructureTerm.prototype=new InputStructureTerm();
FreeTextStructureTerm.prototype.constructor=InputStructureTerm;
FreeTextStructureTerm.prototype.render=function(structureHtml){var stateClass=this.m_state?this.m_state.getCSSClass():"";
var currentValueHtml=this.escapePlaintextAsHtml(this.m_currentValue);
structureHtml.append("<div id='"+this.getNamespace()+":term:ROOT:"+this.getId()+"' class='structure-term-item input-term freetext-term "+stateClass+"' title='"+this.getCaption()+"'><div class='structure-term-info-wrapper'><input type='text' id='"+this.getNamespace()+":term:INPUT:"+this.getId()+"' value='"+currentValueHtml+"' placeholder='"+i18n.discernabu.mpage_structured_documentation.ADD_FREE_TEXT_TERM+"'></div></div>");
};
function NoneStructureTerm(){return this;
}NoneStructureTerm.prototype=new CycleStructureTerm();
NoneStructureTerm.prototype.constructor=CycleStructureTerm;
function TableStructureTerm(){return this;
}TableStructureTerm.prototype=new CycleStructureTerm();
TableStructureTerm.prototype.constructor=CycleStructureTerm;
TableStructureTerm.prototype.render=function(structureHtml){var commentClass="";
var commentHTML="";
var stateClass=this.m_state?this.m_state.getCSSClass():"";
var columnWidth=(100/this.getParent().getChildren().length)+"%";
structureHtml.append("<div id='"+this.getNamespace()+":term:ROOT:"+this.getId()+"' class='table-term "+stateClass+"' title='"+this.getCaption()+"'  style='width: "+columnWidth+";'><div class='structure-documented-icon-area'>"+this.getUIValue()+"</div></div>");
};
TableStructureTerm.prototype.isDefaultDisplayed=function(){return true;
};
TableStructureTerm.prototype.getComment=function(){var tableGroupTerm=this.getParent();
var tableGroupTermComment=tableGroupTerm.getComment();
if(tableGroupTerm.getActiveTerm()===this){this.setComment(tableGroupTermComment);
return tableGroupTermComment;
}else{this.setComment("");
return"";
}};
TableStructureTerm.prototype.getSavedComment=function(){var tableGroupTerm=this.getParent();
return tableGroupTerm.getSavedComment();
};
TableStructureTerm.prototype.displayComment=function(comment){var validatedComment=comment?this.unescapePlaintextAsHtml(comment):comment+"";
this.setComment(validatedComment);
this.setSavedComment(validatedComment);
var tableTermGroup=this.getParent();
tableTermGroup.displayComment(comment);
};
TableStructureTerm.prototype.getHighlightElement=function(){var tableGroupTerm=this.getParent();
return tableGroupTerm.getHighlightElement();
};
TableStructureTerm.prototype.isDefaultDisplayed=function(){return true;
};
TableStructureTerm.prototype.isCurrentlyDisplayed=function(){var parentTable=this.getParent();
return parentTable.isCurrentlyDisplayed();
};
TableStructureTerm.prototype.displayNode=function(){var table=this.getParent();
table.displayNode();
};
function Navigator(){this.m_activeNavigation=null;
this.m_clickCallback=null;
this.m_id="";
this.m_navigationMap=null;
this.m_navigations=null;
this.m_skin="";
return this;
}Navigator.prototype.getClickCallback=function(){return this.m_clickCallback;
};
Navigator.prototype.setClickCallback=function(callback){if(typeof callback!=="function"){throw new Error("Attempted to call setClickCallback with invalid parameter");
}this.m_clickCallback=callback;
return this;
};
Navigator.prototype.applyCustomSkin=function(skin){if(typeof skin!=="string"){throw new Error("Attempted to call applyCustomSkin with invalid parameter.");
}this.m_skin=skin;
return this;
};
Navigator.prototype.getCustomSkin=function(){return this.m_skin;
};
Navigator.prototype.getActiveNavigation=function(){return this.m_activeNavigation;
};
Navigator.prototype.setActiveNavigation=function(activeNavigation){if(!Navigation.prototype.isPrototypeOf(activeNavigation)){throw new Error("Attempted to call setActiveNavigation with invalid parameter.");
}this.m_activeNavigation=activeNavigation;
return this;
};
Navigator.prototype.getId=function(){return this.m_id;
};
Navigator.prototype.setId=function(id){if(typeof id!=="string"){throw new Error("Attempted to call setId with invalid parameter.");
}this.m_id=id;
return this;
};
Navigator.prototype.getNavigations=function(){if(!this.m_navigations){this.m_navigations=[];
}return this.m_navigations;
};
Navigator.prototype.setNavigations=function(navigations){if(!Array.prototype.isPrototypeOf(navigations)){throw new Error("Attempted to call setNavigations with invalid parameter.");
}this.m_navigations=navigations;
return this;
};
Navigator.prototype.addNavigation=function(navigation){if(!Navigation.prototype.isPrototypeOf(navigation)){throw new Error("Attempted to call addNavigation with invalid parameter.");
}this.getNavigations().push(navigation);
this.getNavigationMap()[navigation.getId()]=navigation;
return this;
};
Navigator.prototype.getNavigationMap=function(){if(!this.m_navigationMap){this.m_navigationMap={};
}return this.m_navigationMap;
};
Navigator.prototype.render=function(){var html="";
var navigationList=this.getNavigations();
var navigationCount=navigationList.length;
html+="<div id='"+this.getId()+"' class='"+this.getCustomSkin()+" structure-navigator'>";
for(var i=0;
i<navigationCount;
i++){html+=navigationList[i].render();
}html+="</div>";
return html;
};
Navigator.prototype.finalize=function(){var self=this;
var elementId=this.getId().replace(/:/g,"\\:");
$("#"+elementId).on("click",".navigator-button",function(){self.handleNavigationSelection(this.id);
});
};
Navigator.prototype.updateActiveNavigation=function(navigationId){var navigationItem=this.getNavigationMap()[navigationId];
if(!navigationItem||navigationItem===this.getActiveNavigation()){return;
}if(this.getActiveNavigation()){this.getActiveNavigation().deselect();
}navigationItem.getElement().addClass("active");
this.setActiveNavigation(navigationItem);
};
Navigator.prototype.handleNavigationSelection=function(navigationId){var navigationItem=this.getNavigationMap()[navigationId];
if(!navigationItem||navigationItem===this.getActiveNavigation()){return;
}if(this.getActiveNavigation()){this.getActiveNavigation().deselect();
}this.setActiveNavigation(navigationItem);
navigationItem.onSelect();
if(this.m_clickCallback){this.m_clickCallback(navigationItem);
}};
function Navigation(){this.m_id="";
this.m_label="";
this.m_element=null;
return this;
}Navigation.prototype.getElement=function(){if(!this.m_element){this.m_element=$("#"+this.getId().replace(/\:/g,"\\:"));
}return this.m_element;
};
Navigation.prototype.getId=function(){return this.m_id;
};
Navigation.prototype.setId=function(id){if(typeof id!=="string"){throw new Error("Attempted to call Navigation.prototype.setId with invalid parameter.");
}this.m_id=id;
return this;
};
Navigation.prototype.getLabel=function(){return this.m_label;
};
Navigation.prototype.setLabel=function(label){if(typeof label!=="string"){throw new Error("Attempted to call Navigation.prototype.setLabel with invalid parameter.");
}this.m_label=label;
return this;
};
Navigation.prototype.onSelect=function(){this.getElement().addClass("active");
};
Navigation.prototype.deselect=function(){this.getElement().removeClass("active").blur();
};
Navigation.prototype.render=function(){return"<button id='"+this.getId()+"' class='navigator-button'>"+this.getLabel()+"</button>";
};
function ScrollNavigation(){this.m_anchorId="";
this.m_anchorElement=null;
this.m_containerId="";
this.m_containerElement=null;
return this;
}ScrollNavigation.prototype=new Navigation();
ScrollNavigation.prototype.constructor=Navigation;
ScrollNavigation.prototype.getAnchorId=function(){return this.m_anchorId;
};
ScrollNavigation.prototype.setAnchorId=function(anchorId){if(typeof anchorId!=="string"){throw new Error("Attempted to call ScrollNavigation.prototype.setAnchorId with invalid parameter.");
}this.m_anchorId=anchorId;
return this;
};
ScrollNavigation.prototype.getAnchorElement=function(){if(!this.m_anchorElement){this.m_anchorElement=$("#"+this.getAnchorId().replace(/:/g,"\\:"));
}return this.m_anchorElement;
};
ScrollNavigation.prototype.getContainerId=function(){return this.m_containerId;
};
ScrollNavigation.prototype.setContainerId=function(containerId){if(typeof containerId!=="string"){throw new Error("Attempted to call ScrollNavigation.prototype.setContainerId with invalid parameter.");
}this.m_containerId=containerId;
return this;
};
ScrollNavigation.prototype.getContainerElement=function(){if(!this.m_containerElement){this.m_containerElement=$("#"+this.getContainerId().replace(/:/g,"\\:"));
}return this.m_containerElement;
};
ScrollNavigation.prototype.onSelect=function(){Navigation.prototype.onSelect.call(this);
var containerElement=this.getContainerElement();
var anchorElement=this.getAnchorElement();
containerElement.scrollTop(anchorElement.offset().top-containerElement.offset().top+containerElement.scrollTop());
};
function CallbackNavigation(){this.m_onSelect=null;
return this;
}CallbackNavigation.prototype=new Navigation();
CallbackNavigation.prototype.constructor=Navigation;
CallbackNavigation.prototype.setOnSelect=function(onSelect){if(typeof onSelect!=="function"){throw new Error("Attempted to call CallbackNavigation.prototype.setOnSelect with invalid parameter.");
}this.m_onSelect=onSelect;
return this;
};
CallbackNavigation.prototype.onSelect=function(){Navigation.prototype.onSelect.call(this);
if(this.m_onSelect){this.m_onSelect();
}};
function StructureNavigation(){this.m_node=null;
}StructureNavigation.prototype=new ScrollNavigation();
StructureNavigation.prototype.constructor=ScrollNavigation;
StructureNavigation.prototype.setNode=function(node){this.m_node=node;
return this;
};
StructureNavigation.prototype.render=function(){var documentedClass=(this.m_node&&this.m_node.getNumberOfDocumentedChildren()>0)?" navigation-documented":"";
return"<div id='"+this.getId()+"' class='navigator-button structure-navigator-button"+documentedClass+"'><span>"+this.getLabel()+"</span><div class='navigation-documented-icon'></div></div>";
};
function StructureQuestionSet(){this.m_onCompleteCallback=null;
this.m_lookup=null;
}StructureQuestionSet.prototype=new StructureGroup();
StructureQuestionSet.prototype.constructor=StructureGroup;
StructureQuestionSet.prototype.getLookup=function(){if(!this.m_lookup){this.m_lookup={};
}return this.m_lookup;
};
StructureQuestionSet.prototype.getAnswers=function(){var answered=[];
var questions=this.getChildren();
var questionCount=questions.length;
var question=null;
var answers=null;
var answerCount=null;
var answer=null;
for(var i=0;
i<questionCount;
i++){question=questions[i];
answers=question.getChildren();
answerCount=answers.length;
for(var j=0;
j<answerCount;
j++){answer=answers[j];
if(answer.getState().getValue()){answered.push({parent_entity_id:question.getParentEntityId()+".0",parent_entity_name:question.getParentEntityName(),dd_sref_chf_cmplnt_crit_id:answer.getTemplateId()+".0"});
}}}return JSON.stringify(answered);
};
StructureQuestionSet.prototype.setOnCompleteCallback=function(onCompleteCallback){if(typeof onCompleteCallback!=="function"){throw new Error("StructureQuestionSet.prototype.setOnCompleteCallback expects a function");
}this.m_onCompleteCallback=onCompleteCallback;
return this;
};
StructureQuestionSet.prototype.getRootElement=function(){if(!this.m_rootElement||!this.m_rootElement.length){this.m_rootElement=$("#"+this.m_namespace+"StructureQuestionSet");
}return this.m_rootElement;
};
StructureQuestionSet.prototype.notifyStateChange=function(node){StructureNode.prototype.notifyStateChange.call(this,node);
if(this.m_numberDocumented===this.m_children.length){if(this.m_onCompleteCallback){this.m_onCompleteCallback(true);
}}else{this.m_onCompleteCallback(false);
}};
StructureQuestionSet.prototype.render=function(){var structureHtml=new StructureHtml();
structureHtml.append("<div id='"+this.m_namespace+"StructureQuestionSet' class='structure-question-set' data-lookup='"+this.m_id+"'>");
this.renderChildren(structureHtml,false);
structureHtml.append("</div>");
return structureHtml.getHtml();
};
function StructureQuestion(){this.m_questionDisplay="";
this.m_diagnosisGroup=0;
this.m_parentEntityId=0;
this.m_parentEntityName="";
}StructureQuestion.prototype=new MultiStructureTermGroup();
StructureQuestion.prototype.constructor=MultiStructureTermGroup;
StructureQuestion.prototype.setParentEntityId=function(parentEntityId){if(typeof parentEntityId!=="number"){throw new Error("StructureQuestion.prototype.setParentEntityId expects a number.");
}this.m_parentEntityId=parentEntityId;
return this;
};
StructureQuestion.prototype.setParentEntityName=function(parentEntityName){if(typeof parentEntityName!=="string"){throw new Error("StructureQuestion.prototype.setParentEntityName expects a string.");
}this.m_parentEntityName=parentEntityName;
return this;
};
StructureQuestion.prototype.getParentEntityId=function(){return this.m_parentEntityId;
};
StructureQuestion.prototype.getParentEntityName=function(){return this.m_parentEntityName;
};
StructureQuestion.prototype.setQuestionDisplay=function(questionDisplay){if(typeof questionDisplay!=="string"){throw new Error("StructureQuestion.prototype.setQuestionDisplay expects a string.");
}this.m_questionDisplay=questionDisplay;
return this;
};
StructureQuestion.prototype.setDiagnosisGroup=function(diagnosisGroup){if(typeof diagnosisGroup!=="number"){throw new Error("StructureQuestion.prototype.setDiagnosisGroup expects a number.");
}this.m_diagnosisGroup=diagnosisGroup;
return this;
};
StructureQuestion.prototype.render=function(structureHtml,shouldRenderColumns){structureHtml.append("<div class='structure-question' data-lookup='"+this.m_id+"'>");
structureHtml.append("<div>"+this.m_questionDisplay+"</div>");
this.renderChildren(structureHtml,false);
structureHtml.append("</div>");
};
function StructureAnswer(){this.m_answerDisplay="";
this.m_templateId=0;
this.addState(new TermState().setValue(null).setCSSClass(""));
this.addState(new TermState().setValue(true).setCSSClass("structure-answer-yes"));
this.setInitialState(this.m_states[0]);
this.m_state=this.m_states[0];
return this;
}StructureAnswer.prototype=new CycleStructureTerm();
StructureAnswer.prototype.constructor=CycleStructureTerm;
StructureAnswer.prototype.setTemplateId=function(templateId){if(typeof templateId!=="number"){throw new Error("StructureAnswer.prototype.setAnswerId expects a number.");
}this.m_templateId=templateId;
return this;
};
StructureAnswer.prototype.getTemplateId=function(){return this.m_templateId;
};
StructureAnswer.prototype.getRootElement=function(){if(!this.m_rootElement||!this.m_rootElement.length){this.m_rootElement=$("#"+this.m_namespace+"Answer"+this.m_id);
}return this.m_rootElement;
};
StructureAnswer.prototype.refresh=function(){if(this.m_state!==this.m_previousState){this.getRootElement().removeClass(this.m_previousState.getCSSClass()).addClass(this.m_state.getCSSClass());
}};
StructureAnswer.prototype.setAnswerDisplay=function(answerDisplay){if(typeof answerDisplay!=="string"){throw new Error("");
}this.m_answerDisplay=answerDisplay;
return this;
};
StructureAnswer.prototype.render=function(structureHtml,shouldRenderColumns){structureHtml.append("<div id='"+this.m_namespace+"Answer"+this.m_id+"' class='structure-answer' data-lookup='"+this.m_id+"'><input class='structure-answer-box' type='checkbox' data-lookup='"+this.m_id+"'><span class='structure-answer-display' data-lookup='"+this.m_id+"'>"+this.m_answerDisplay+"</span></div>");
};
function StructureTermController(){}StructureTermController.prototype.attach=function(organizer){throw new Error("Attempted to call StructureTermController.prototype.attach, method must be implemented by sub-class");
};
function InputStructureTermController(){}InputStructureTermController.prototype=new StructureTermController();
InputStructureTermController.prototype.constructor=StructureTermController;
InputStructureTermController.prototype.attach=function(organizer){var organizerRoot=organizer.getRootElement();
organizerRoot.on("keyup","div.input-term input",function(){var term=organizer.getLookup()[organizer.parseIdForLookup($(this).attr("id"))];
term.setCurrentValue($(this).val());
term.update();
});
organizerRoot.on("click","div.input-term input",function(){var term=organizer.getLookup()[organizer.parseIdForLookup($(this).attr("id"))];
if(!$(this).val()){return;
}term.update();
});
};
function CycleStructureTermController(){}CycleStructureTermController.prototype=new StructureTermController();
CycleStructureTermController.prototype.constructor=StructureTermController;
CycleStructureTermController.prototype.attach=function(organizer){var rootElement=organizer.getRootElement();
rootElement.on("click","div.cycle-term >.structure-documented-icon-area, div.cycle-term >.structure-term-info-wrapper",function(event){if($(event.target).hasClass("structure-comment")){return;
}var term=organizer.getLookup()[organizer.parseIdForLookup($(this).closest(".structure-term-item").attr("id"))];
term.cycleState();
var termContainer=$(this).closest(".structure-term-item");
if(term.getComment()){var commentSection=$(this).siblings("div.structure-term-comment-wrapper");
termContainer.addClass("comment");
if(commentSection.length<1){commentSection="<div class='structure-term-comment-wrapper'>"+term.buildTextArea()+"</div>";
termContainer.append(commentSection);
}}else{termContainer.removeClass("comment");
}});
rootElement.on("click","span.structure-comment",function(event){var termInfoSection=$(this).closest(".structure-term-info-wrapper");
var commentSection=$(termInfoSection).siblings("div.structure-term-comment-wrapper");
var termContainer=$(this).closest(".structure-term-item");
termContainer.addClass("comment");
if(commentSection.length<1){var term=organizer.getLookup()[organizer.parseIdForLookup($(this).closest(".structure-term-item").attr("id"))];
commentSection="<div class='structure-term-comment-wrapper'>"+term.buildTextArea()+"</div>";
termContainer.append(commentSection);
}$(termContainer).find("textarea")[0].focus();
});
rootElement.on("focusout","div.structure-term-comment-wrapper",function(event){var term=organizer.getLookup()[organizer.parseIdForLookup($(this).closest(".structure-term-item").attr("id"))];
var comment=$(this).find("textarea").val();
var termContainer=$(this).closest(".structure-term-item");
if(comment===""){termContainer.removeClass("comment");
}term.setComment(comment);
if(!term.checkIsDirty()){if(term.getComment()!==term.getSavedComment()){term.m_dirty=true;
term.notifyDirty(term);
}else{term.m_dirty=false;
term.notifyDirty(term);
}}});
};
function YesNoStructureTermController(){}YesNoStructureTermController.prototype=new StructureTermController();
YesNoStructureTermController.prototype.constructor=StructureTermController;
YesNoStructureTermController.prototype.attach=function(organizer){organizer.getRootElement().on("click","div.structure-yes, div.structure-no",function(event){var term=organizer.getLookup()[organizer.parseIdForLookup($(this).attr("id"))];
var parent=term.getParent();
var noneTerm=parent.getChildren()[0];
if(NoneStructureTerm.prototype.isPrototypeOf(noneTerm)&&noneTerm===term){noneTerm.jumpToState(0);
}var jumpTo=$(this).hasClass("structure-yes")?1:2;
var current=term.getCurrentState();
term.jumpToState(jumpTo===current?0:jumpTo);
var termContainer=$(this).closest(".structure-term-item");
if(term.getComment()){var commentSection=$(this).siblings("div.structure-term-comment-wrapper");
termContainer.addClass("comment");
if(commentSection.length<1){commentSection="<div class='structure-term-comment-wrapper'>"+term.buildTextArea()+"</div>";
termContainer.append(commentSection);
}}else{termContainer.removeClass("comment");
}});
};
function StructureGroupController(){}StructureGroupController.prototype=new StructureTermController();
StructureGroupController.prototype.constructor=StructureTermController;
StructureGroupController.prototype.attach=function(organizer){organizer.getRootElement().on("click",".structure-component-toggle, .structure-component-toggle + .structure-group-title",function(event){var group=$(this).parents(".structure-group").first();
var groupNode=organizer.getLookup()[organizer.parseIdForLookup($(group).attr("id"))];
groupNode.toggleExpand();
});
};
function TableTermController(){}TableTermController.prototype=new StructureTermController();
TableTermController.prototype.constructor=StructureTermController;
TableTermController.prototype.attach=function(organizer){var rootElement=organizer.getRootElement();
rootElement.on("click","div.table-term >.structure-documented-icon-area",function(event){var term=organizer.getLookup()[organizer.parseIdForLookup($(this).closest(".table-term").attr("id"))];
term.cycleState();
});
};
function StructureTabController(){this.m_scrollMap={};
this.m_organizer=null;
this.m_$structureTabGroup=null;
this.m_$structureTabParent=null;
this.m_$structureTabWrapper=null;
this.m_$structureTabMenuButton=null;
}StructureTabController.prototype=new StructureTermController();
StructureTabController.prototype.constructor=StructureTermController;
StructureTabController.prototype.getStructureTabGroup=function(){if(!this.m_$structureTabGroup||!this.m_$structureTabGroup.length){this.m_$structureTabGroup=$("#"+this.m_organizer.getNamespace()+"StructureTabGroup");
}return this.m_$structureTabGroup;
};
StructureTabController.prototype.getStructureTabParent=function(){if(!this.m_$structureTabParent||!this.m_$structureTabParent.length){this.m_$structureTabParent=$("#"+this.m_organizer.getNamespace()+"StructureTabParent");
}return this.m_$structureTabParent;
};
StructureTabController.prototype.getStructureTabWrapper=function(){if(!this.m_$structureTabWrapper||!this.m_$structureTabWrapper.length){this.m_$structureTabWrapper=$("#"+this.m_organizer.getNamespace()+"StructureTabGroupWrapper");
}return this.m_$structureTabWrapper;
};
StructureTabController.prototype.getStructureTabMenuButton=function(){if(!this.m_$structureTabMenuButton||!this.m_$structureTabMenuButton.length){this.m_$structureTabMenuButton=$("#"+this.m_organizer.getNamespace()+"StructureTabMenuButton");
}return this.m_$structureTabMenuButton;
};
StructureTabController.prototype.resize=function(){var $structureTabParent=this.getStructureTabParent();
var $structureTabWrapper=this.getStructureTabWrapper();
var structureTabWrapperRaw=$structureTabWrapper[0];
var $structureTabMenuButton=this.getStructureTabMenuButton();
var miscPadding=8;
structureTabWrapperRaw.style.width=(($structureTabParent[0].offsetWidth-$structureTabMenuButton[0].offsetWidth)-miscPadding)+"px";
};
StructureTabController.prototype.disableActiveTab=function(organizer,$activeTab){$activeTab.removeClass("structure-tab-active");
var activeNode=organizer.getLookup()[$activeTab.attr("data-lookup")];
if(activeNode){this.m_scrollMap[activeNode.getId()]=activeNode.getContentElement().scrollTop();
activeNode.getRootElement().closest(".structure-tab-content").hide();
}};
StructureTabController.prototype.restoreScrollPosition=function(node){var scrollTop=this.m_scrollMap[node.getId()];
if(typeof scrollTop==="undefined"){return;
}node.getContentElement().scrollTop(scrollTop);
};
StructureTabController.prototype.attach=function(organizer){this.m_organizer=organizer;
var namespace=organizer.getNamespace();
var menuItem=null;
var $structureTabGroup=$("#"+namespace+"StructureTabGroup");
var $structureTabs=$structureTabGroup.find(".structure-tab-display");
var $structureTabWrapper=this.getStructureTabWrapper();
var previousSelection=null;
var self=this;
var tabSelectionMenu=null;
var menuItemArray=null;
var selectedTabIndex=0;
var $contentBody=organizer.getRootElement().closest(".structured-documentation-view");
var miscPadding=8;
this.resize();
var createSelectionFunc=function(index){return function(){var $selectedTab=$structureTabs.eq(index);
$selectedTab.click();
var tabPosition=$selectedTab.closest(".structure-tab").position().left+$structureTabWrapper.scrollLeft();
$structureTabWrapper.scrollLeft(tabPosition-miscPadding);
};
};
organizer.getRootElement().on("click",".structure-tab-group .structure-tab .structure-tab-display",function(event){var node=organizer.getLookup()[$(this).attr("data-lookup")];
if(!node){return;
}if(node===organizer.getActiveSection()){return;
}$contentBody.css("overflow-y","hidden");
if(!node.isRendered()){var $tabContentContainer=$("#"+namespace+"\\:tabContent\\:"+node.getId());
$tabContentContainer.html(node.renderHtml());
node.finalize();
node.setIsRendered(true);
node.getParent().resize();
}node.getRootElement().closest(".structure-tab-content").show();
self.disableActiveTab(organizer,$structureTabGroup.find(".structure-tab-active"));
$(this).addClass("structure-tab-active");
node.adjustContentHeight();
organizer.setActiveSection(node);
self.restoreScrollPosition(node);
selectedTabIndex=$(this).closest(".structure-tab").index();
if(tabSelectionMenu&&menuItemArray){menuItemArray[selectedTabIndex].setIsSelected(true);
if(previousSelection){previousSelection.setIsSelected(false);
}previousSelection=menuItemArray[selectedTabIndex];
}$contentBody.css("overflow-y","auto");
});
organizer.getRootElement().on("click",".structure-add-tab",function(event){tabSelectionMenu=MP_MenuManager.getMenuObject(namespace+"structureAddTab");
if(tabSelectionMenu){MP_MenuManager.deleteMenuObject(namespace+"structureAddTab");
}tabSelectionMenu=new Menu(namespace+"structureAddTab");
tabSelectionMenu.setTypeClass("menu-page-menu structure-tab-menu");
tabSelectionMenu.setIsRootMenu(true);
tabSelectionMenu.setAnchorElementId(namespace+"StructureTabMenuButton");
tabSelectionMenu.setAnchorConnectionCorner(["bottom","right"]);
tabSelectionMenu.setContentConnectionCorner(["top","right"]);
tabSelectionMenu.setLabel("");
var children=organizer.getChildren();
var childrenCount=children.length;
var child=null;
for(var i=0;
i<childrenCount;
i++){child=children[i];
menuItem=new MenuSelection(namespace+"structureSectionTab"+child.getId());
menuItem.setLabel(child.getTitle());
menuItem.setCloseOnClick(true);
menuItem.setClickFunction(createSelectionFunc(i));
if(i===selectedTabIndex){menuItem.setIsSelected(true);
previousSelection=menuItem;
}tabSelectionMenu.addMenuItem(menuItem);
}menuItemArray=tabSelectionMenu.getMenuItemArray();
MP_MenuManager.addMenuObject(tabSelectionMenu);
MP_MenuManager.showMenu(namespace+"structureAddTab");
});
};
function StructureTermGroupController(){}StructureTermGroupController.prototype.attach=function(organizer){var organizerRoot=organizer.getRootElement();
organizerRoot.on("click","a.show-more-link",function(){var $sourceTermGroup=$(this).closest(".structure-group");
var termGroup=organizer.getLookup()[organizer.parseIdForLookup($sourceTermGroup.attr("id"))];
termGroup.toggleShowMore();
});
};
function StructureManager(){this.m_replyData=null;
this.m_referenceData=null;
this.m_activityData=null;
this.m_questionData=null;
this.m_status="";
this.m_organizer=null;
this.m_resizeFunction=null;
this.m_tabController=null;
this.m_questionSet=null;
this.m_openExistingCheckFunction=null;
this.m_answers=null;
this.m_openExistingFunction=null;
this.m_queryTemplateFunction=null;
this.m_onDirtyChangeCallback=null;
this.m_$structureManagerContainer=null;
this.m_$structureContainer=null;
this.m_$structureOrganizerContents=null;
this.m_$questionContainer=null;
this.m_$questionContents=null;
this.m_$messageContainer=null;
this.m_$addTemplateButton=null;
this.m_namespace="";
}StructureManager.prototype.setNamespace=function(namespace){if(typeof namespace!=="string"){throw new Error("StructureManager.prototype.setNamespace expects a string.");
}this.m_namespace=namespace;
return this;
};
StructureManager.prototype.setOnDirtyChangeCallback=function(dirtyChangeCallback){if(typeof dirtyChangeCallback!=="function"){throw new Error("StructureManager.prototype.setOnDirtyChangeCallback expects a function.");
}this.m_onDirtyChangeCallback=dirtyChangeCallback;
return this;
};
StructureManager.prototype.setOpenExistingFunction=function(openExistingFunction){if(typeof openExistingFunction!=="function"){throw new Error("StructureManager.prototype.setOpenExistingFunction expects a function.");
}this.m_openExistingFunction=openExistingFunction;
return this;
};
StructureManager.prototype.setQueryTemplateFunction=function(queryTemplateFunction){if(typeof queryTemplateFunction!=="function"){throw new Error("StructureManager.prototype.setQueryTemplateFunction expects a function.");
}this.m_queryTemplateFunction=queryTemplateFunction;
return this;
};
StructureManager.prototype.setOpenExistingCheckFunction=function(openExistingCheckFunction){if(typeof openExistingCheckFunction!=="function"){throw new Error("StructureManager.prototype.setOpenExistingCheckFunction expects a function.");
}this.m_openExistingCheckFunction=openExistingCheckFunction;
return this;
};
StructureManager.prototype.setOrganizerResizeFunction=function(resizeFunction){if(typeof resizeFunction!=="function"){throw new Error("StructureManager.prototype.setResizeFunction expects a function");
}this.m_resizeFunction=resizeFunction;
return this;
};
StructureManager.prototype.resize=function(){var self=this;
setTimeout(function(){if(self.m_organizer){self.m_organizer.resize();
}if(self.m_tabController){self.m_tabController.resize();
}},100);
};
StructureManager.prototype.onAddTemplateClick=function(){this.m_$addTemplateButton.prop("disabled",true);
this.m_answers=this.m_questionSet.getAnswers();
this.completeRefresh();
};
StructureManager.prototype.shouldOpenExisting=function(){if(!this.m_openExistingCheckFunction){throw new Error("StructureManager.prototype.shouldOpenExisting function expects you to have set an open existing check function.");
}return this.m_openExistingCheckFunction();
};
StructureManager.prototype.completeRefresh=function(){this.resetReplyData();
if(this.shouldOpenExisting()){this.openExisting();
}else{this.queryTemplate();
}};
StructureManager.prototype.render=function(){var self=this;
var namespace=this.m_namespace;
var $structureView=$("<div id='"+namespace+"StructureView' class='structured-documentation-view content-body'></div>");
this.m_$structureManagerContainer=$structureView;
var $questionContainer=$("<div id='"+namespace+"QuestionContainer' class='structure-question-container'></div>").hide();
this.m_$questionContainer=$questionContainer;
var $addTemplateButton=$("<button id='"+namespace+"AddTemplateButton' class='structure-add-template-btn' disabled>Add Template(s)</button>");
$addTemplateButton.click(function(){self.onAddTemplateClick();
});
this.m_$addTemplateButton=$addTemplateButton;
$questionContainer.append($addTemplateButton);
$questionContainer.append($("<div class='structure-question-info-icon'></div>"));
var $questionContents=$("<div id='"+namespace+"QuestionContents' class='structure-question-contents'></div>");
$questionContainer.append($questionContents);
this.m_$questionContents=$questionContents;
$structureView.append($questionContainer);
var $structureContainer=$("<div id='"+namespace+"StructureContainer'></div>").hide();
this.m_$structureContainer=$structureContainer;
var $structureOrganizerContents=$("<div id='"+namespace+"StructureOrganizerContents'></div>");
this.m_$structureOrganizerContents=$structureOrganizerContents;
$structureContainer.append($structureOrganizerContents);
$structureView.append($structureContainer);
var $messageContainer=$("<div id='"+namespace+"StructureMessageContainer'></div>").hide();
this.m_$messageContainer=$messageContainer;
$structureView.append($messageContainer);
if(this.m_status!=="S"){this.showStructureErrorMessage(i18n.discernabu.documentation_base.STRUCTURED_DOC_UNAVAILABLE);
return $structureView;
}if(this.hasQuestions()){this.showQuestions();
}else{if(this.hasStructuredContent()){this.showStructure();
}else{this.showStructureErrorMessage(i18n.discernabu.documentation_base.STRUCTURED_TEMPLATES_NOT_FOUND);
}}return $structureView;
};
StructureManager.prototype.renderInto=function($destinationElement){$destinationElement.append(this.render());
this.attachQuestionDelegates();
this.mergeActivity();
this.finalizeStructure();
};
StructureManager.prototype.attachQuestionDelegates=function(){var self=this;
this.m_$questionContainer.on("change",".structure-answer-box",function(event){var nodeId=$(this).attr("data-lookup");
var node=self.m_questionSet.getLookup()[nodeId];
if(!node){logger.logWarning("StructureDocumentationView.prototype.finalizeQuestions: could not find answer node with id = "+nodeId);
return;
}node.cycleState();
});
this.m_$questionContainer.on("click",".structure-answer-display",function(event){var nodeId=$(this).attr("data-lookup");
var node=self.m_questionSet.getLookup()[nodeId];
if(!node){logger.logWarning("StructureDocumentationView.prototype.finalizeQuestions: could not find answer node with id = "+nodeId);
return;
}node.cycleState();
$(this).siblings(".structure-answer-box").prop("checked",(node.getState().getValue()?true:false));
});
};
StructureManager.prototype.refresh=function(){if(this.m_status!=="S"){this.m_$structureContainer.hide();
this.m_$questionContainer.hide();
this.showStructureErrorMessage(i18n.discernabu.documentation_base.STRUCTURED_DOC_UNAVAILABLE);
return;
}if(this.hasQuestions()){this.m_$structureContainer.hide();
this.m_$messageContainer.hide();
this.showQuestions();
}else{if(this.hasStructuredContent()){this.m_$questionContainer.hide();
this.m_$messageContainer.hide();
this.showStructure();
this.mergeActivity();
this.finalizeStructure();
}else{this.m_$structureContainer.hide();
this.m_$questionContainer.hide();
this.showStructureErrorMessage(i18n.discernabu.documentation_base.STRUCTURED_TEMPLATES_NOT_FOUND);
}}};
StructureManager.prototype.navigateToNode=function(navigationData){if(!navigationData){logger.logWarning("StructureManager.prototype.navigateToNode expects navigation data.");
return;
}if(!this.m_organizer){logger.logWarning("StructureManager.prototype.navigateToNode: attempted to navigate to node without a structure organizer object.");
return;
}this.m_organizer.navigateToNode(navigationData);
};
StructureManager.prototype.finalizeStructure=function(){var organizer=this.m_organizer;
if(!organizer){return;
}organizer.setResizeFunction(this.m_resizeFunction);
organizer.setOnDirtyChangeCallback(this.m_onDirtyChangeCallback);
organizer.finalize();
(new CycleStructureTermController()).attach(organizer);
(new InputStructureTermController()).attach(organizer);
(new StructureGroupController()).attach(organizer);
(new YesNoStructureTermController()).attach(organizer);
(new TableTermController()).attach(organizer);
(new StructureTermGroupController()).attach(organizer);
if(organizer.isMultiSection()){var tabController=new StructureTabController();
tabController.attach(organizer);
this.m_tabController=tabController;
}};
StructureManager.prototype.hasStructuredContent=function(){return(this.m_referenceData!==null)&&this.m_referenceData.length>0;
};
StructureManager.prototype.hasQuestions=function(){return this.m_questionData!==null;
};
StructureManager.prototype.generateQuestionSet=function(){var self=this;
var questionData=this.m_questionData;
this.m_questionSet=(new JSONStructureOrganizerBuilder().setNamespace(this.m_namespace)).buildQuestionSet(questionData);
this.m_questionSet.setOnCompleteCallback(function(complete){self.m_$addTemplateButton.prop("disabled",!complete);
});
return this.m_questionSet;
};
StructureManager.prototype.finalize=function(){this.finalizeStructure();
this.attachQuestionDelegates();
};
StructureManager.prototype.showQuestions=function(){var $questionContainer=this.m_$questionContainer;
$questionContainer.show();
var questionSet=this.generateQuestionSet();
this.m_$questionContents.html(questionSet.render());
this.m_$addTemplateButton.prop("disabled",true);
};
StructureManager.prototype.showStructure=function(){this.m_$structureContainer.show();
var $structureOrganizerContents=this.m_$structureOrganizerContents;
var builder=new JSONStructureOrganizerBuilder();
builder.setNamespace(this.m_namespace);
builder.setStructureJSON(this.m_referenceData[0]);
var organizer=builder.buildStructureTree();
this.m_organizer=organizer;
$structureOrganizerContents.html(organizer.renderHtml());
};
StructureManager.prototype.showStructureErrorMessage=function(message){this.m_$messageContainer.html(message);
this.m_$messageContainer.show();
};
StructureManager.prototype.setReplyData=function(replyData){this.setStatus(replyData.status||"F");
this.setReferenceData(replyData.section_ref||null);
this.setActivityData(replyData.section_act||null);
if(replyData.user_options&&replyData.user_options.length){this.setQuestionData(replyData.user_options);
}else{this.setQuestionData(null);
}};
StructureManager.prototype.resetDirty=function(){if(this.m_organizer){this.m_organizer.resetDirty();
}};
StructureManager.prototype.resetReplyData=function(){this.m_replyData=null;
this.m_referenceData=null;
this.m_activityData=null;
this.m_questionData=null;
this.m_status="F";
};
StructureManager.prototype.setStatus=function(status){if(typeof status!=="string"){throw new Error("StructureManager.prototype.setStatus expects a string (S/F/Z)");
}this.m_status=status;
return this;
};
StructureManager.prototype.setReferenceData=function(referenceData){this.m_referenceData=referenceData;
return this;
};
StructureManager.prototype.setActivityData=function(activityData){this.m_activityData=activityData;
return this;
};
StructureManager.prototype.setQuestionData=function(questionData){this.m_questionData=questionData;
return this;
};
StructureManager.prototype.mergeActivity=function(){if(!this.m_organizer||!this.m_activityData){return;
}var updater=new JSONStructureOrganizerBuilder();
updater.update(this.m_organizer,this.m_activityData);
this.resetDirty();
};
StructureManager.prototype.queryTemplate=function(){if(!this.m_queryTemplateFunction){logger.logError("StructureManager.prototype.queryTemplate: No query template function provided.");
return;
}var self=this;
var requestData={USER_OPTION_RESPONSES:this.m_answers};
this.m_queryTemplateFunction(requestData,function(reply){self.m_answers=null;
self.setReplyData(reply);
self.refresh();
});
};
StructureManager.prototype.openExisting=function(){if(!this.m_openExistingFunction){logger.logError("StructureManager.prototype.openExisting: No open existing function provided.");
return;
}var self=this;
var requestData={USER_OPTION_RESPONSES:this.m_answers};
this.m_openExistingFunction(requestData,function(reply){self.m_answers=null;
self.setReplyData(reply);
self.refresh();
});
};
function InputValidator(){}InputValidator.prototype.validate=function(input){return true;
};
InputValidator.prototype.getMessage=function(){return"";
};
function DataTypeValidator(){this.m_dataType=DataTypeValidator.ALPHA_TYPE;
this.m_dataRegex=DataTypeValidator.ALPHA_REGEX;
return this;
}DataTypeValidator.ALPHA_TYPE="ALPHA";
DataTypeValidator.ALPHA_REGEX=/^[a-zA-Z0-9 `~!@#$%^&*()_+-=,.<>?;:''"{}|\\\/\[\]]*$/;
DataTypeValidator.NUMERIC_TYPE="NUMERIC";
DataTypeValidator.NUMERIC_REGEX=/^[-]?[0-9]*[.]?[0-9]*$/;
DataTypeValidator.prototype=new InputValidator();
DataTypeValidator.prototype.constructor=InputValidator;
DataTypeValidator.prototype.getDataType=function(){return this.m_dataType;
};
DataTypeValidator.prototype.setDataType=function(dataType){this.m_dataType=dataType;
switch(dataType){case DataTypeValidator.NUMERIC_TYPE:this.m_dataRegex=DataTypeValidator.NUMERIC_REGEX;
break;
case DataTypeValidator.ALPHA_TYPE:default:this.m_dataType=DataTypeValidator.ALPHA_TYPE;
this.m_dataRegex=DataTypeValidator.ALPHA_REGEX;
}return this;
};
DataTypeValidator.prototype.getMessage=function(){var message="";
switch(this.m_dataType){case DataTypeValidator.NUMERIC_TYPE:message="Number (+- 0-9)";
break;
case DataTypeValidator.ALPHA_TYPE:default:message="Alphabetical and Numeric";
}return"<span class='term-info-item'>This field accepts only {0} characters</span>".replace("{0}",message);
};
DataTypeValidator.prototype.validate=function(input){return this.m_dataRegex.test(input);
};
DataTypeValidator.prototype.getDataRegex=function(){return this.m_dataRegex;
};
DataTypeValidator.prototype.setDataRegex=function(dataRegex){if(!RegExp.prototype.isPrototypeOf(dataRegex)){throw new Error("Cannot set regex with non regex type");
}this.m_dataRegex=dataRegex;
return this;
};
function DataRangeValidator(){this.m_minValue=Number.NEGATIVE_INFINITY;
this.m_maxValue=Number.POSITIVE_INFINITY;
return this;
}DataRangeValidator.prototype=new InputValidator();
DataRangeValidator.prototype.constructor=InputValidator;
DataRangeValidator.prototype.getMessage=function(){return"<span class='term-info-item'>Number must be between {0} and {1}</span>".replace("{0}",this.m_minValue).replace("{1}",this.m_maxValue);
};
DataRangeValidator.prototype.validate=function(input){try{var numericValue=parseFloat(input);
if(isNaN(numericValue)){throw new Error("Input is not a number type, cannot validate");
}return(numericValue<=this.m_maxValue&&numericValue>=this.m_minValue);
}catch(exe){return false;
}};
DataRangeValidator.prototype.setMinValue=function(minValue){if(typeof minValue!=="number"){throw new Error("Cannot setMinValue with non number type");
}if(minValue>this.m_maxValue){throw new Error("Cannot set a minValue greater than the max value");
}this.m_minValue=minValue;
return this;
};
DataRangeValidator.prototype.setMaxValue=function(maxValue){if(typeof maxValue!=="number"){throw new Error("Cannot setMaxValue with non number type");
}if(maxValue<this.m_minValue){throw new Error("Cannot set a maxValue less than the min value");
}this.m_maxValue=maxValue;
return this;
};
var MP_ModalDialog={};
MP_ModalDialog.modalDialogObjects={};
MP_ModalDialog.whiteSpacePixels=26;
MP_ModalDialog.addModalDialogObject=function(modalObject){var modalId="";
if(!(modalObject instanceof ModalDialog)){logger.logError("MP_ModalDialog.addModalDialogObject only accepts objects of type ModalDialog");
return false;
}modalId=modalObject.getId();
if(!modalId){logger.logError("MP_ModalDialog.addModalDialogObject: no/invalid ModalDialog id given");
return false;
}else{if(this.modalDialogObjects[modalId]){logger.logError("MP_ModalDialog.addModalDialogObject: modal dialog id "+modalId+" is already in use");
return false;
}}this.modalDialogObjects[modalId]=modalObject;
return true;
};
MP_ModalDialog.addModalDialogOptionToViewpoint=function(modalDialogId){var modalObj=null;
modalObj=this.modalDialogObjects[modalDialogId];
if(!modalObj){return false;
}if(typeof MP_Viewpoint!=="undefined"&&typeof MP_Viewpoint.addModalDialogUtility!=="undefined"){MP_Viewpoint.addModalDialogUtility(modalObj);
return true;
}};
MP_ModalDialog.closeModalDialog=function(modalDialogId){var modalObj=null;
modalObj=this.modalDialogObjects[modalDialogId];
if(!modalObj){return false;
}$("#vwpModalDialog"+modalObj.getId()).remove();
$("#vwpModalBackground"+modalObj.getId()).remove();
modalObj.setIsActive(false);
$("body").css("overflow","auto");
return true;
};
MP_ModalDialog.deleteModalDialogObject=function(modalDialogId){if(this.modalDialogObjects[modalDialogId]){delete this.modalDialogObjects[modalDialogId];
return true;
}return false;
};
MP_ModalDialog.retrieveModalDialogObject=function(modalDialogId){if(this.modalDialogObjects[modalDialogId]){return this.modalDialogObjects[modalDialogId];
}return null;
};
MP_ModalDialog.resizeAllModalDialogs=function(){var dialog=null;
var attr="";
for(attr in MP_ModalDialog.modalDialogObjects){if(MP_ModalDialog.modalDialogObjects.hasOwnProperty(attr)){dialog=MP_ModalDialog.modalDialogObjects[attr];
if(dialog.isActive()){MP_ModalDialog.resizeModalDialog(dialog.getId());
}}}};
MP_ModalDialog.resizeModalDialog=function(modalDialogId){var docHeight=0;
var docWidth=0;
var topMarginSize=0;
var leftMarginSize=0;
var bottomMarginSize=0;
var rightMarginSize=0;
var modalWidth="";
var modalHeight="";
var modalObj=null;
modalObj=this.modalDialogObjects[modalDialogId];
if(!modalObj){logger.logError("MP_ModalDialog.resizeModalDialog: No modal dialog with the id "+modalDialogId+" exists");
return;
}if(!modalObj.isActive()){logger.logError("MP_ModalDialog.resizeModalDialog: this modal dialog is not active it cannot be resized");
return;
}docHeight=$(window).height();
docWidth=$(document.body).width();
topMarginSize=Math.floor(docHeight*(modalObj.getTopMarginPercentage()/100));
leftMarginSize=Math.floor(docWidth*(modalObj.getLeftMarginPercentage()/100));
bottomMarginSize=Math.floor(docHeight*(modalObj.getBottomMarginPercentage()/100));
rightMarginSize=Math.floor(docWidth*(modalObj.getRightMarginPercentage()/100));
modalWidth=(docWidth-leftMarginSize-rightMarginSize);
modalHeight=(docHeight-topMarginSize-bottomMarginSize);
$("#vwpModalDialog"+modalObj.getId()).css({top:topMarginSize,left:leftMarginSize,width:modalWidth+"px"});
if(modalObj.isBodySizeFixed()){$("#vwpModalDialog"+modalObj.getId()).css("height",modalHeight+"px");
$("#"+modalObj.getBodyElementId()).height(modalHeight-$("#"+modalObj.getHeaderElementId()).height()-$("#"+modalObj.getFooterElementId()).height()-this.whiteSpacePixels);
}else{$("#vwpModalDialog"+modalObj.getId()).css("max-height",modalHeight+"px");
$("#"+modalObj.getBodyElementId()).css("max-height",(modalHeight-$("#"+modalObj.getHeaderElementId()).height()-$("#"+modalObj.getFooterElementId()).height()-this.whiteSpacePixels)+"px");
}$("#vwpModalBackground"+modalObj.getId()).css({height:"100%",width:"100%"});
};
MP_ModalDialog.showModalDialog=function(modalDialogId){var bodyDiv=null;
var bodyLoadFunc=null;
var bottomMarginSize=0;
var button=null;
var dialogDiv=null;
var docHeight=0;
var docWidth=0;
var focusButtonId="";
var footerDiv=null;
var footerButtons=[];
var footerButtonsCnt=0;
var footerButtonContainer=null;
var headerDiv=null;
var leftMarginSize=0;
var modalDiv=null;
var modalObj=null;
var modalHeight="";
var modalWidth="";
var rightMarginSize=0;
var topMarginSize=0;
var x=0;
var footerCheckbox=null;
var footerText="";
function createButtonClickFunc(buttonObj,modalDialogId){var clickFunc=buttonObj.getOnClickFunction();
var closeModal=buttonObj.closeOnClick();
if(!clickFunc){clickFunc=function(){};
}return function(){clickFunc();
if(closeModal){MP_ModalDialog.closeModalDialog(modalDialogId);
}};
}modalObj=this.modalDialogObjects[modalDialogId];
if(!modalObj){logger.logError("MP_ModalDialog.showModalDialog: No modal dialog with the id "+modalDialogId+" exists");
return;
}if(modalObj.isActive()){return;
}headerDiv=$("<div id='"+modalObj.getHeaderElementId()+"' class='dyn-modal-hdr-container'><span class='dyn-modal-hdr-title'>"+(modalObj.getHeaderTitle()||"&nbsp;")+"</span></div>");
if(modalObj.showCloseIcon()){headerDiv.append($("<span class='dyn-modal-hdr-close'></span>").click(function(){var closeFunc=null;
var closeFunctionResponse=true;
closeFunc=modalObj.getHeaderCloseFunction();
if(closeFunc){closeFunctionResponse=closeFunc();
}if(modalObj.verifyCloseFunctionResponse()){if(closeFunctionResponse){MP_ModalDialog.closeModalDialog(modalObj.getId());
}}else{MP_ModalDialog.closeModalDialog(modalObj.getId());
}}));
}bodyDiv=$("<div id='"+modalObj.getBodyElementId()+"' class='dyn-modal-body-container'></div>");
footerButtons=modalObj.getFooterButtons();
footerButtonsCnt=footerButtons.length;
footerCheckbox=modalObj.getFooterCheckbox();
footerText=modalObj.getFooterText();
if(footerButtonsCnt||footerCheckbox.enabled||footerText!==""){footerDiv=$("<div id='"+modalObj.getFooterElementId()+"' class='dyn-modal-footer-container'></div>");
if(footerCheckbox.enabled){var checkboxContainer=$("<label class='dyn-modal-checkbox-container'></label>");
var checkboxEle=$("<input type='checkbox' class='dyn-modal-checkbox'"+((footerCheckbox.isChecked)?" checked":"")+">");
checkboxEle.click(footerCheckbox.onClick);
checkboxContainer.append(checkboxEle);
checkboxContainer.append("<span class='dyn-modal-checkbox-label'>"+footerCheckbox.label+"</span>");
footerDiv.append(checkboxContainer);
}if(footerButtonsCnt){footerButtonContainer=$("<div id='"+modalObj.getFooterElementId()+"btnCont' class='dyn-modal-button-container'></div>");
for(x=0;
x<footerButtonsCnt;
x++){button=footerButtons[x];
footerButtonContainer.append($("<button id='"+button.getId()+"' class='dyn-modal-button'"+((button.isDithered())?" disabled":"")+">"+button.getText()+"</button>").click(createButtonClickFunc(button,modalObj.getId())));
if(button.getSeparatorInd()){footerButtonContainer.append("<span class='dyn-modal-button-separator'></span>");
}if(!focusButtonId){focusButtonId=(button.getFocusInd())?button.getId():"";
}}footerDiv.append(footerButtonContainer);
}if(footerText!==""){footerDiv.append("<span id='"+modalObj.getFooterTextElementId()+"' class='dyn-modal-footer-text'>"+footerText+"</span>");
}}else{if(modalObj.isFooterAlwaysShown()){footerDiv=$("<div id='"+modalObj.getFooterElementId()+"' class='dyn-modal-footer-container'></div>");
}}docHeight=$(window).height();
docWidth=$(document.body).width();
topMarginSize=Math.floor(docHeight*(modalObj.getTopMarginPercentage()/100));
leftMarginSize=Math.floor(docWidth*(modalObj.getLeftMarginPercentage()/100));
bottomMarginSize=Math.floor(docHeight*(modalObj.getBottomMarginPercentage()/100));
rightMarginSize=Math.floor(docWidth*(modalObj.getRightMarginPercentage()/100));
modalWidth=(docWidth-leftMarginSize-rightMarginSize);
modalHeight=(docHeight-topMarginSize-bottomMarginSize);
dialogDiv=$("<div id='vwpModalDialog"+modalObj.getId()+"' class='dyn-modal-dialog'></div>").css({top:topMarginSize,left:leftMarginSize,width:modalWidth+"px"});
dialogDiv.append(headerDiv).append(bodyDiv).append(footerDiv);
modalDiv=$("<div id='vwpModalBackground"+modalObj.getId()+"' class='"+((modalObj.hasGrayBackground())?"dyn-modal-div":"dyn-modal-div-clear")+"'></div>").height($(document).height());
if(!modalObj.hasGrayBackground()){modalDiv.click(function(){var modal=$("#vwpModalDialog"+modalObj.getId());
modal.fadeOut(100);
modal.fadeIn(100);
});
}$(document.body).append(modalDiv).append(dialogDiv);
if(focusButtonId){$("#"+focusButtonId).focus();
}$("body").css("overflow","hidden");
if(modalObj.isBodySizeFixed()){$(dialogDiv).css("height",modalHeight+"px");
$(bodyDiv).height(modalHeight-$(headerDiv).height()-$(footerDiv).height()-this.whiteSpacePixels);
}else{$(dialogDiv).css("max-height",modalHeight+"px");
$(bodyDiv).css("max-height",(modalHeight-$(headerDiv).height()-$(footerDiv).height()-this.whiteSpacePixels)+"px");
}modalObj.setIsActive(true);
bodyLoadFunc=modalObj.getBodyDataFunction();
if(bodyLoadFunc){bodyLoadFunc(modalObj);
}$(window).resize(this.resizeAllModalDialogs);
};
MP_ModalDialog.updateModalDialogObject=function(modalObject){var modalDialogId="";
if(!modalObject||!(modalObject instanceof ModalDialog)){logger.logError("MP_ModalDialog.updateModalDialogObject only accepts objects of type ModalDialog");
return;
}modalDialogId=modalObject.getId();
this.modalDialogObjects[modalDialogId]=modalObject;
return;
};
function ModalButton(buttonId){this.m_buttonId=buttonId;
this.m_buttonText="";
this.m_dithered=false;
this.m_onClickFunction=null;
this.m_closeOnClick=true;
this.m_focusInd=false;
this.m_separatorInd=false;
}ModalButton.prototype.closeOnClick=function(){return this.m_closeOnClick;
};
ModalButton.prototype.isDithered=function(){return this.m_dithered;
};
ModalButton.prototype.getId=function(){return this.m_buttonId;
};
ModalButton.prototype.getCloseOnClick=function(){return this.m_closeOnClick;
};
ModalButton.prototype.getFocusInd=function(){return this.m_focusInd;
};
ModalButton.prototype.getText=function(){return this.m_buttonText;
};
ModalButton.prototype.getOnClickFunction=function(){return this.m_onClickFunction;
};
ModalButton.prototype.getSeparatorInd=function(){return this.m_separatorInd;
};
ModalButton.prototype.setId=function(buttonId){if(buttonId&&typeof buttonId==="string"){this.m_buttonId=buttonId;
}return this;
};
ModalButton.prototype.setCloseOnClick=function(closeFlag){if(typeof closeFlag==="boolean"){this.m_closeOnClick=closeFlag;
}return this;
};
ModalButton.prototype.setFocusInd=function(focusInd){if(typeof focusInd==="boolean"){this.m_focusInd=focusInd;
}return this;
};
ModalButton.prototype.setText=function(buttonText){if(buttonText&&typeof buttonText==="string"){this.m_buttonText=buttonText;
}return this;
};
ModalButton.prototype.setIsDithered=function(dithered){if(typeof dithered==="boolean"){this.m_dithered=dithered;
}return this;
};
ModalButton.prototype.setOnClickFunction=function(clickFunc){if(typeof clickFunc==="function"){this.m_onClickFunction=clickFunc;
}return this;
};
ModalButton.prototype.setSeparatorInd=function(separatorFlag){if(typeof separatorFlag==="boolean"){this.m_separatorInd=separatorFlag;
}return this;
};
function ModalDialog(modalId){this.m_modalId=modalId;
this.m_isModalActive=false;
this.m_isFixedToIcon=false;
this.m_hasGrayBackground=true;
this.m_showCloseIcon=true;
this.m_margins={top:5,right:5,bottom:5,left:5};
this.m_icon={elementId:modalId+"icon",cssClass:"",text:"",hoverText:"",isActive:true};
this.m_header={elementId:modalId+"header",title:"",closeFunction:null,verifyCloseFunctionResponse:false};
this.m_body={elementId:modalId+"body",dataFunction:null,isBodySizeFixed:true};
this.m_footer={isAlwaysShown:false,elementId:modalId+"footer",buttons:[],checkbox:{enabled:false,isChecked:false,onClick:function(){return false;
},label:""},footerText:{text:"",elementId:modalId+"FooterText"}};
}ModalDialog.prototype.addFooterButton=function(modalButton){if(!(modalButton instanceof ModalButton)){logger.logError("ModalDialog.addFooterButton: Cannot add footer button which isnt a ModalButton object.\nModalButtons can be created using the ModalDialog.createModalButton function.");
return this;
}if(!modalButton.getId()){logger.logError("ModalDialog.addFooterButton: All ModalButton objects must have an id assigned");
return this;
}this.m_footer.buttons.push(modalButton);
return this;
};
ModalDialog.prototype.hasGrayBackground=function(){return this.m_hasGrayBackground;
};
ModalDialog.prototype.isActive=function(){return this.m_isModalActive;
};
ModalDialog.prototype.isBodySizeFixed=function(){return this.m_body.isBodySizeFixed;
};
ModalDialog.prototype.isFooterAlwaysShown=function(){return this.m_footer.isAlwaysShown;
};
ModalDialog.prototype.isFixedToIcon=function(){return this.m_isFixedToIcon;
};
ModalDialog.prototype.isIconActive=function(){return this.m_icon.isActive;
};
ModalDialog.prototype.showCloseIcon=function(){return this.m_showCloseIcon;
};
ModalDialog.prototype.verifyCloseFunctionResponse=function(){return this.m_header.verifyCloseFunctionResponse;
};
ModalDialog.prototype.getBodyDataFunction=function(){return this.m_body.dataFunction;
};
ModalDialog.prototype.getBodyElementId=function(){return this.m_body.elementId;
};
ModalDialog.prototype.getBottomMarginPercentage=function(){return this.m_margins.bottom;
};
ModalDialog.prototype.getFooterButton=function(buttonId){var x=0;
var button=null;
var buttons=this.getFooterButtons();
var buttonCnt=buttons.length;
for(x=buttonCnt;
x--;
){button=buttons[x];
if(button.getId()===buttonId){return buttons[x];
}}return null;
};
ModalDialog.prototype.getFooterButtons=function(){return this.m_footer.buttons;
};
ModalDialog.prototype.getFooterElementId=function(){return this.m_footer.elementId;
};
ModalDialog.prototype.getFooterCheckbox=function(){return this.m_footer.checkbox;
};
ModalDialog.prototype.getIsFooterCheckboxEnabled=function(){return this.m_footer.checkbox.enabled;
};
ModalDialog.prototype.getFooterCheckboxIsChecked=function(){return this.m_footer.checkbox.isChecked;
};
ModalDialog.prototype.getFooterCheckboxLabel=function(){return this.m_footer.checkbox.label;
};
ModalDialog.prototype.getHasGrayBackground=function(){return this.m_hasGrayBackground;
};
ModalDialog.prototype.getHeaderCloseFunction=function(){return this.m_header.closeFunction;
};
ModalDialog.prototype.getHeaderElementId=function(){return this.m_header.elementId;
};
ModalDialog.prototype.getHeaderTitle=function(){return this.m_header.title;
};
ModalDialog.prototype.getIconClass=function(){return this.m_icon.cssClass;
};
ModalDialog.prototype.getIconElementId=function(){return this.m_icon.elementId;
};
ModalDialog.prototype.getIconHoverText=function(){return this.m_icon.hoverText;
};
ModalDialog.prototype.getIconText=function(){return this.m_icon.text;
};
ModalDialog.prototype.getId=function(){return this.m_modalId;
};
ModalDialog.prototype.getIsActive=function(){return this.m_isModalActive;
};
ModalDialog.prototype.getIsBodySizeFixed=function(){return this.m_body.isBodySizeFixed;
};
ModalDialog.prototype.getIsFixedToIcon=function(){return this.m_isFixedToIcon;
};
ModalDialog.prototype.getIsFooterAlwaysShown=function(){return this.m_footer.isAlwaysShown;
};
ModalDialog.prototype.getIsIconActive=function(){return this.m_icon.isActive;
};
ModalDialog.prototype.getLeftMarginPercentage=function(){return this.m_margins.left;
};
ModalDialog.prototype.getRightMarginPercentage=function(){return this.m_margins.right;
};
ModalDialog.prototype.getShowCloseIcon=function(){return this.m_showCloseIcon;
};
ModalDialog.prototype.getTopMarginPercentage=function(){return this.m_margins.top;
};
ModalDialog.prototype.getFooterText=function(){return this.m_footer.footerText.text;
};
ModalDialog.prototype.getFooterTextElementId=function(){return this.m_footer.footerText.elementId;
};
ModalDialog.prototype.setBodyDataFunction=function(dataFunc){if(!(typeof dataFunc==="function")&&dataFunc!==null){logger.logError("ModalDialog.setBodyDataFunction: dataFunc param must be a function or null");
return this;
}this.m_body.dataFunction=dataFunc;
return this;
};
ModalDialog.prototype.setBodyElementId=function(elementId){if(elementId&&typeof elementId==="string"){if(this.isActive()){$("#"+this.getBodyElementId()).attr("id",elementId);
}this.m_body.elementId=elementId;
}return this;
};
ModalDialog.prototype.setBodyHTML=function(html){if(html&&typeof html==="string"){if(this.isActive()){$("#"+this.getBodyElementId()).html(html);
}}return this;
};
ModalDialog.prototype.setBottomMarginPercentage=function(margin){if(typeof margin==="number"){this.m_margins.bottom=(margin<=0)?1:margin;
if(this.isActive()){MP_ModalDialog.resizeModalDialog(this.getId());
}}return this;
};
ModalDialog.prototype.setFooterButtonCloseOnClick=function(buttonId,closeOnClick){var button=null;
var buttonElement=null;
var onClickFunc=null;
var modal=this;
if(!(typeof closeOnClick==="boolean")){logger.logError("ModalDialog.setFooterButtonCloseOnClick: closeOnClick param must be of type boolean");
return this;
}button=this.getFooterButton(buttonId);
if(button){button.setCloseOnClick(closeOnClick);
if(this.isActive()){buttonElement=$("#"+buttonId);
buttonElement.click(function(){onClickFunc=button.getOnClickFunction();
if(onClickFunc&&typeof onClickFunc==="function"){onClickFunc();
}if(closeOnClick){MP_ModalDialog.closeModalDialog(modal.getId());
}});
}}else{logger.logError("ModalDialog.setFooterButtonCloseOnClick: No button with the id of "+buttonId+" exists for this ModalDialog");
}return this;
};
ModalDialog.prototype.setFooterButtonDither=function(buttonId,dithered){var button=null;
var buttonElement=null;
if(!(typeof dithered==="boolean")){logger.logError("ModalDialog.setFooterButtonDither: Dithered param must be of type boolean");
return this;
}button=this.getFooterButton(buttonId);
if(button){button.setIsDithered(dithered);
if(this.isActive()){buttonElement=$("#"+buttonId);
if(dithered){buttonElement.attr("disabled",true);
}else{buttonElement.attr("disabled",false);
}}}else{logger.logError("ModalDialog.setFooterButtonDither: No button with the id of "+buttonId+" exists for this ModalDialog");
}return this;
};
ModalDialog.prototype.setFooterButtonOnClickFunction=function(buttonId,clickFunc){var button=null;
var modal=this;
if(!(typeof clickFunc==="function")&&clickFunc!==null){logger.logError("ModalDialog.setFooterButtonOnClickFunction: clickFunc param must be a function or null");
return this;
}button=this.getFooterButton(buttonId);
if(button){button.setOnClickFunction(clickFunc);
if(this.isActive()){$("#"+buttonId).unbind("click").click(function(){if(clickFunc){clickFunc();
}if(button.closeOnClick()){MP_ModalDialog.closeModalDialog(modal.getId());
}});
}}else{logger.logError("ModalDialog.setFooterButtonOnClickFunction: No button with the id of "+buttonId+" exists for this ModalDialog");
}return this;
};
ModalDialog.prototype.setFooterButtonText=function(buttonId,buttonText){var button=null;
if(!(typeof buttonText==="string")){logger.logError("ModalDialog.setFooterButtonText: buttonText param must be a string");
return this;
}if(!buttonText){logger.logError("ModalDialog.setFooterButtonText: buttonText param must not be empty or null");
return this;
}button=this.getFooterButton(buttonId);
if(button){button.setText(buttonText);
if(this.isActive()){$("#"+buttonId).html(buttonText);
}}else{logger.logError("ModalDialog.setFooterButtonText: No button with the id of "+buttonId+" exists for this ModalDialog");
}return this;
};
ModalDialog.prototype.setFooterElementId=function(elementId){if(elementId&&typeof elementId==="string"){if(this.isActive()){$("#"+this.getFooterElementId()).attr("id",elementId);
}this.m_footer.elementId=elementId;
}return this;
};
ModalDialog.prototype.setFooterCheckboxLabel=function(label){if(typeof label==="string"&&label!==""){this.m_footer.checkbox.label=label;
}return this;
};
ModalDialog.prototype.setFooterCheckboxEnabled=function(isEnabled){if(typeof isEnabled==="boolean"){this.m_footer.checkbox.enabled=isEnabled;
}return this;
};
ModalDialog.prototype.setFooterCheckboxIsChecked=function(isChecked){if(typeof isChecked==="boolean"){this.m_footer.checkbox.isChecked=isChecked;
}return this;
};
ModalDialog.prototype.setFooterCheckboxClickFunction=function(checkboxClickFunction){if(checkboxClickFunction&&(typeof checkboxClickFunction==="function")){this.setFooterCheckboxEnabled(true);
this.m_footer.checkbox.onClick=checkboxClickFunction;
}return this;
};
ModalDialog.prototype.setVerifyCloseFunctionResponse=function(verifyResponse){if(typeof verifyResponse==="boolean"){this.m_header.verifyCloseFunctionResponse=verifyResponse;
}return this;
};
ModalDialog.prototype.activeIconClickEventHandler=function(){MP_ModalDialog.showModalDialog(this.getId());
return this;
};
ModalDialog.prototype.setIsIconActive=function(activeInd){var modal=this;
if(typeof activeInd==="boolean"){this.m_icon.isActive=activeInd;
var iconElement=$("#"+this.getIconElementId());
if(iconElement){iconElement.unbind("click");
iconElement.removeClass("vwp-util-icon");
if(activeInd){iconElement.click(function(){modal.activeIconClickEventHandler();
});
iconElement.addClass("vwp-util-icon");
}}}return this;
};
ModalDialog.prototype.setHasGrayBackground=function(hasGrayBackground){if(typeof hasGrayBackground==="boolean"){this.m_hasGrayBackground=hasGrayBackground;
}return this;
};
ModalDialog.prototype.setHeaderCloseFunction=function(closeFunc){var modal=this;
if(!(typeof closeFunc==="function")&&closeFunc!==null){logger.logError("ModalDialog.setHeaderCloseFunction: closeFunc param must be a function or null");
return this;
}this.m_header.closeFunction=closeFunc;
if(this.isActive()){$(".dyn-modal-hdr-close").click(function(){var closeFunctionResponse=true;
if(closeFunc){closeFunctionResponse=closeFunc();
}if(modal.verifyCloseFunctionResponse()){if(closeFunctionResponse){MP_ModalDialog.closeModalDialog(modal.getId());
}}else{MP_ModalDialog.closeModalDialog(modal.getId());
}});
}return this;
};
ModalDialog.prototype.setHeaderElementId=function(elementId){if(elementId&&typeof elementId==="string"){if(this.isActive()){$("#"+this.getHeaderElementId()).attr("id",elementId);
}this.m_header.elementId=elementId;
}return this;
};
ModalDialog.prototype.setHeaderTitle=function(headerTitle){if(headerTitle&&typeof headerTitle==="string"){if(this.isActive()){$("#"+this.getHeaderElementId()+" .dyn-modal-hdr-title").html(headerTitle);
}this.m_header.title=headerTitle;
}return this;
};
ModalDialog.prototype.setIconClass=function(iconClass){if(iconClass&&typeof iconClass==="string"){$("#"+this.getIconElementId()).removeClass(this.m_icon.cssClass).addClass(iconClass);
this.m_icon.cssClass=iconClass;
}return this;
};
ModalDialog.prototype.setIconElementId=function(elementId){if(elementId&&typeof elementId==="string"){$("#"+this.getIconElementId()).attr("id",elementId);
this.m_icon.elementId=elementId;
}return this;
};
ModalDialog.prototype.setIconHoverText=function(iconHoverText){if(iconHoverText!==null&&typeof iconHoverText==="string"){this.m_icon.hoverText=iconHoverText;
$("#"+this.getIconElementId()).attr("title",iconHoverText);
}return this;
};
ModalDialog.prototype.setIconText=function(iconText){if(iconText!==null&&typeof iconText==="string"){this.m_icon.text=iconText;
$("#"+this.getIconElementId()).html(iconText);
}return this;
};
ModalDialog.prototype.setId=function(id){if(id&&typeof id==="string"){this.m_modalId=id;
}return this;
};
ModalDialog.prototype.setIsActive=function(activeInd){if(typeof activeInd==="boolean"){this.m_isModalActive=activeInd;
}return this;
};
ModalDialog.prototype.setIsBodySizeFixed=function(bodyFixed){if(typeof bodyFixed==="boolean"){this.m_body.isBodySizeFixed=bodyFixed;
}return this;
};
ModalDialog.prototype.setIsFixedToIcon=function(fixedToIcon){if(typeof fixedToIcon==="boolean"){this.m_isFixedToIcon=fixedToIcon;
}return this;
};
ModalDialog.prototype.setIsFooterAlwaysShown=function(footerAlwaysShown){if(typeof footerAlwaysShown==="boolean"){this.m_footer.isAlwaysShown=footerAlwaysShown;
}return this;
};
ModalDialog.prototype.setLeftMarginPercentage=function(margin){if(typeof margin==="number"){this.m_margins.left=(margin<=0)?1:margin;
if(this.isActive()){MP_ModalDialog.resizeModalDialog(this.getId());
}}return this;
};
ModalDialog.prototype.setRightMarginPercentage=function(margin){if(typeof margin==="number"){this.m_margins.right=(margin<=0)?1:margin;
if(this.isActive()){MP_ModalDialog.resizeModalDialog(this.getId());
}}return this;
};
ModalDialog.prototype.setShowCloseIcon=function(showCloseIcon){if(typeof showCloseIcon==="boolean"){this.m_showCloseIcon=showCloseIcon;
}return this;
};
ModalDialog.prototype.setTopMarginPercentage=function(margin){if(typeof margin==="number"){this.m_margins.top=(margin<=0)?1:margin;
if(this.isActive()){MP_ModalDialog.resizeModalDialog(this.getId());
}}return this;
};
ModalDialog.prototype.setFooterText=function(footerText){if(typeof footerText==="string"&&footerText!==""){this.m_footer.footerText.text=footerText;
if(this.isActive()){$("#"+this.getFooterTextElementId()).html(footerText);
}}return this;
};
MPageOO={inherits:function(clazz,parent){var Dummy=function(){};
Dummy.prototype=parent.prototype;
clazz.prototype=new Dummy();
var methods=Object.keys(parent);
for(var i=methods.length;
i--;
){var m=methods[i];
clazz[m]=parent[m];
}},attribute:function(clazz,name){clazz.prototype["set"+name]=function(value){this["m_"+name]=value;
};
clazz.prototype["get"+name]=function(){return this["m_"+name];
};
},each:function(list,iteratee){return list.isArray?MPageOO.eachOverArray(list,iteratee):MPageOO.eachOverObject(list,iteratee);
},eachOverArray:function(list,iteratee){for(var i=0;
i<list.length;
i++){iteratee(list[i],i,list);
}return list;
},eachOverObject:function(list,iteratee){var keys=Object.keys(list);
for(var i=0;
i<keys.length;
i++){var key=keys[i];
iteratee(list[key],key,list);
}return list;
},map:function(list,iteratee){return list.isArray?MPageOO.mapOverArray(list,iteratee):MPageOO.mapOverObject(list,iteratee);
},mapOverArray:function(list,iteratee){var result=[];
for(var i=0;
i<list.length;
i++){result.push(iteratee(list[i],i,list));
}return result;
},mapOverObject:function(list,iteratee){var result=[];
var keys=Object.keys(list);
for(var i=0;
i<keys.length;
i++){var key=keys[i];
result.push(iteratee(list[key],key,list));
}return result;
},mapObject:function(object,iteratee){var result={};
var keys=Object.keys(object);
for(var i=0;
i<keys.length;
i++){var key=keys[i];
var itResult=iteratee(key,object[key],object);
result[itResult[0]]=itResult[1];
}return result;
},reduce:function(list,iteratee,memo){var i=0;
if(typeof(memo)==="undefined"){i=1;
memo=list[0];
}for(;
i<list.length;
i++){memo=iteratee(memo,list[i]);
}return memo;
},pairs:function(obj){return MPageOO.map(obj,function(v,k){return[k,v];
});
},values:function(obj){return MPageOO.map(obj,function(v){return v;
});
},mergeObjects:function(destination,source){return MPageOO.map(destination,function(v,k){return typeof(source[k])!=="undefined"?source[k]:destination[k];
});
},shallowClone:function(obj){var NewCls=function(){};
NewCls.prototype=obj;
var newObj=new NewCls();
MPageOO.each(obj,function(v,k){newObj[k]=v;
});
return newObj;
},objectFromList:function(list,iteratee){return MPageOO.reduce(list,function(memo,v){var result=iteratee(v);
memo[result[0]]=result[1];
return memo;
},{});
},filter:function(list,iteratee){return MPageOO.reduce(list,function(memo,item){if(iteratee(item)){memo.push(item);
}return memo;
},[]);
}};
TemplateEngine={};
(function(ns,$){ns.getHtmlTags=function(){var tags=["html","span","head","body","pre","h1","h2","h3","h4","h5","h6","b","i","em","strong","font","a","p","br","dl","dt","dd","ol","ul","li","div","img","hr","table","th","tr","td","tbody","thead","form","option","input","textarea","button"];
var result={};
result=ns.getTags(tags);
return result;
};
ns.getTags=function(tags){var result={};
$.each(tags,function(i,tagname){result[tagname]=ns.tag(tagname);
});
return result;
};
ns.tag=function(tagname){return function(){var args=[].slice.call(arguments);
args.unshift(tagname);
var tagObj=new ns.Tag(tagname);
ns.Tag.apply(tagObj,args);
return tagObj;
};
};
ns.button=function(attributes){attributes.type="button";
return new ns.Tag("input",attributes,null);
};
ns.textbox=function(attributes){attributes.type="text";
return new ns.Tag("input",attributes,null);
};
ns.Tag=function(name,args){this.name=name;
this.parent=null;
this.element=null;
this.content="";
this.attributes={};
if(arguments.length==1){return;
}var arg2=arguments[1];
var contentOffset=1;
if(arg2 instanceof Object&&!(arg2 instanceof ns.Tag)&&!(arg2 instanceof String)&&!(arg2 instanceof Array)){this.attributes=arg2;
contentOffset=2;
}if(arguments.length==2&&contentOffset==2){return;
}var contentArr=[];
for(var i=contentOffset;
i<arguments.length;
i++){if(arguments[i] instanceof Array){$.merge(contentArr,arguments[i]);
}else{contentArr.push(arguments[i]);
}}this.content=contentArr;
};
ns.Tag.prototype.render=function(){this.makeElement();
this.makeContent();
return this.element;
};
ns.Tag.prototype.makeElement=function(){var element=$("<"+this.name+"></"+this.name+">");
$.each(this.attributes,function(key,value){if(!value){value="";
}element.attr(key,value);
});
this.element=element;
return element;
};
ns.Tag.traverse=function(content,parentTag){if(!content){return;
}if(content instanceof ns.Tag){content.parent=parentTag;
parentTag.element.append(content.render());
return;
}if(!(content instanceof Array)){parentTag.element.append(content);
return;
}$.each(content,function(key,value){ns.Tag.traverse(value,parentTag);
});
};
ns.Tag.prototype.makeContent=function(){ns.Tag.traverse(this.content,this);
};
ns.Template=function(templateFunction){this.m_function=templateFunction;
this.m_factory=null;
};
ns.Template.prototype.render=function(context){var scope=new ns.ScopeManager();
if(this.m_factory){this.m_factory.before(scope);
}var rootTag=this.m_function(context);
if(!(rootTag instanceof ns.Tag)){alert("The template function does not return a Tag instance.");
}var rendered=rootTag.render();
scope.clean();
if(this.m_factory){this.m_factory.after(scope);
}return rendered;
};
ns.TemplateFactory=function(templates){var self=this;
$.each(templates,function(k,v){if(k!="before"&&k!="after"){self[k]=new ns.Template(v);
self[k].m_factory=self;
}else{self[k]=v;
}});
};
ns.TemplateFactory.prototype.before=function(){};
ns.TemplateFactory.prototype.after=function(){};
ns.ScopeManager=function(){this.m_originalScope={};
};
ns.ScopeManager.prototype.use=function(objects){var self=this;
$.each(objects,function(k,v){if(window[k]!==undefined){self.m_originalScope[k]=window[k];
}window[k]=v;
});
};
ns.ScopeManager.prototype.clean=function(){var self=this;
$.each(this.m_originalScope,function(k,v){window[k]=v;
});
};
}(TemplateEngine,jQuery));
function Template(){this.id="";
this.templateFunction=null;
}Template.prototype.setId=function(id){this.id=id;
};
Template.prototype.getId=function(){return this.id;
};
Template.prototype.setTemplateFunction=function(templateFunction){this.templateFunction=templateFunction;
};
Template.prototype.getTemplateFunction=function(){return this.templateFunction;
};
Template.prototype.render=function(data){data=data||{};
try{return this.templateFunction(data);
}catch(exe){throw new Error("There was an error rendering the template: "+exe.message);
}};
function TemplateBuilder(){}TemplateBuilder.buildTemplate=function(template){if(typeof template!=="string"){throw new Error("Called buildTemplate on TemplateBuilder with non string type for template parameter");
}template=template.replace(/"/g,'\\"');
var newTemplate=new Template();
var templateFunction=new Function("data",'var params=[];params.push("'+template.split("${").join('");params.push(data.').split("}").join(');params.push("')+'");return params.join("");');
newTemplate.setTemplateFunction(templateFunction);
return newTemplate;
};
TemplateBuilder.buildAndCacheTemplate=function(id,template){var templateObject=TemplateBuilder.buildTemplate(template);
TemplateCache.cacheTemplate(id,templateObject);
return templateObject;
};
function TemplateCache(){}TemplateCache.templates={};
TemplateCache.loadStandardTemplates=function(){for(var templateKey in StandardTemplates){var template=StandardTemplates[templateKey];
if(template&&typeof template==="string"){TemplateCache.cacheTemplate(templateKey,TemplateBuilder.buildTemplate(template));
}}};
TemplateCache.cacheTemplate=function(id,template){if(typeof id!=="string"){throw new Error("Called cacheTemplate on TemplateCache with non string type for id parameter");
}if(!Template.prototype.isPrototypeOf(template)){throw new Error("Called cacheTemplate on TemplateCache with non Template type for template parameter");
}if(TemplateCache.hasTemplate(id)){throw new Error("Called cacheTemplate on TemplateCache. Template with id: "+id+" already exists. Please use a different identifier.");
}TemplateCache.templates[id]=template;
};
TemplateCache.getTemplate=function(id){if(!TemplateCache.hasTemplate(id)){throw new Error("Template with id: "+id+" does not exist");
}return TemplateCache.templates[id];
};
TemplateCache.hasTemplate=function(id){return(typeof TemplateCache.templates[id]!=="undefined"&&TemplateCache.templates[id]!==null);
};
var MPageControls=MPageControls||{};
MPageObjectOriented={};
MPageObjectOriented.inherits=function(clazz,parent){$.each(parent.prototype,function(k,m){clazz.prototype[k]=m;
});
$.each(parent,function(k,m){clazz[k]=m;
});
};
MPageObjectOriented.createAttribute=function(clazz,name){clazz.prototype["set"+name]=function(value){this["m_"+name]=value;
};
clazz.prototype["get"+name]=function(){return this["m_"+name];
};
};
MPageControls.getId=function(element){if(element instanceof String||typeof element==="string"){return element;
}if(element===null){return"";
}var id=undefined;
if(element instanceof jQuery){id=element.attr("id");
}if(element&&element.getAttribute){id=element.getAttribute("id");
}if(!id){throw new Error("You have tried to pass an object to MPageControls.getId that does not have a valid ID attribute.");
}return id;
};
MPageControls.getDefaultTemplates=function(){return new TemplateEngine.TemplateFactory(MPageControls.defaultTemplates());
};
MPageControls.fromId=function(idStr){var el=$("#"+idStr);
return el.length===0?null:el;
};
MPageControls.setMaxHeight=function(maxHeight){this.m_maxHeight=maxHeight;
};
MPageControls.getMaxHeight=function(){return this.m_maxHeight;
};
(function(){var ns=MPageControls;
var attribute=MPageObjectOriented.createAttribute;
ns.Control=function(element){this.setControlId(ns.Control.idCounter);
ns.Control.idCounter++;
if(element){this.setElement(element);
this.init();
}else{this.setElement(ns.Control.ID_PREFIX+this.getControlId());
}};
ns.Control.idCounter=0;
ns.Control.ID_PREFIX="mpage_controls_control_";
attribute(ns.Control,"ControlId");
attribute(ns.Control,"Parent");
ns.Control.prototype.init=function(){};
ns.Control.prototype.setElement=function(element){this.m_element=MPageControls.getId(element);
};
ns.Control.prototype.getElement=function(){return MPageControls.fromId(this.m_element);
};
ns.Control.prototype.setContents=function(contents){this.m_contents=MPageControls.getId(contents);
};
ns.Control.prototype.getContents=function(){return MPageControls.fromId(this.m_contents);
};
ns.Control.prototype.getElementId=function(){return this.m_element;
};
ns.Control.prototype.renderTemplate=function(template,context){if(!context){context={};
}if(!context.controlId){context.controlId=this.getControlId();
}var html=template(context);
this.getElement().html(html);
};
ns.Control.prototype.fire=function(eventName,args){var parent=this.getParent();
if(!parent){return;
}if(!(parent[eventName])){return;
}if(args!=undefined||args!=null){parent[eventName].apply(parent,args);
}else{parent[eventName].apply(parent,[]);
}};
ns.Control.prototype.bind=function(eventName,element,handler){element.bind(eventName+".control"+this.getControlId(),handler);
};
ns.Control.prototype.destroyEvents=function(){if(this.getElement()){this.getElement().unbind(".control"+this.getControlId());
}};
ns.Control.prototype.focus=function(){this.getElement().focus();
};
ns.Control.prototype.trigger=function(eventName,args){if(this[eventName]){if(!args){args=[];
}return this[eventName].apply(this,args);
}};
})();
MPageControls.defaultTemplates=function(){var te=TemplateEngine;
var div=te.tag("div");
var input=te.tag("input");
var span=te.tag("span");
return{list:function(context){return div({"class":"list",tabindex:"0",id:context.listId},context.items);
},listItem:function(context){return div({"class":"list-item",id:context._elementId},context.content);
},ddListItem:function(context){return div({"class":"list-item",id:context._elementId},context[context.displayKey]);
},autoSuggest:function(context){return div({"class":"auto-suggest input"},div({id:context.closebtnId,"class":"close-btn"},"&nbsp;"),div({"class":"auto-suggest-input-wrapper"},input({type:"text","class":"search-box",id:context.textboxId})));
},autoSuggestList:function(context){return div({"class":"auto-suggest suggestions",style:"position: relative",tabindex:"0",id:context.listId},context.items);
},emptyList:function(){return div({"class":"auto-suggest suggestions res-none",style:"position: relative",tabindex:"0"},i18n.NO_RESULTS_FOUND);
},cclSearch:function(context){return div({"class":"auto-suggest"},div({"class":"auto-suggest-search-box"},input({type:"text",id:context.textboxId})),div({"class":"clear-search",id:context.closebtnId},span({"class":"clear-button",style:"display: inline-block"})));
},personnelSearchItem:function(context){return div({id:context._elementId},context.NAME_FULL_FORMATTED);
},providerSuggestList:function(context){var divDetails={"class":"auto-suggest suggestions",style:"position: relative;",tabindex:"0",id:context.listId};
var maxHeight=MPageControls.getMaxHeight();
if(maxHeight){divDetails.style="position: relative; max-height: "+maxHeight+"px;";
}return div(divDetails,context.items,div({id:"newProviderAssignment"},i18n.ASSIGN_NEW_PROVIDER));
},orderSearch:function(context){return div({"class":"auto-suggest"},div({"class":"order-search-box"},input({type:"text","class":"search-box noe2-search",id:context.textboxId})),div({"class":"clear-search",id:context.closebtnId},span({"class":"clear-button",style:"display: inline-block"})));
},orderSearchItem:function(context){return div({id:context._elementId},span({"class":context.iconClass},"&nbsp;"),context.content,span({"class":"order-sentence"},context.SENTENCE));
},nomenSearchItem:function(context){return div({id:context._elementId},context.m_Data.SOURCESTRING);
},messageBar:function(context){return div({"class":context.msgDivClass},span("&nbsp;"),context.message,span({"class":"close-btn hidden",id:context.closeBtnId},"&nbsp;"));
},venueTemplate:function(context){return div({id:context._elementId},div({"class":"venue-item"},context.VENUE_DISPLAY));
}};
};
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.AlertMessage=function(element,messageTemplate,messageType){this.setTemplate(messageTemplate);
this.setCssClass(messageType);
this.setIsClosable(false);
ns.Control.call(this,element);
};
inherits(ns.AlertMessage,ns.Control);
ns.AlertMessage.MessageTypes={WARNING:"msg-warning",INFORMATION:"msg-info",ERROR:"msg-error"};
attribute(ns.AlertMessage,"Template");
attribute(ns.AlertMessage,"CssClass");
attribute(ns.AlertMessage,"IsClosable");
var prot=ns.AlertMessage.prototype;
prot.getCloseBtnId=function(){return"control_"+this.getControlId()+"_closebtn";
};
prot.render=function(message){var context={msgDivClass:this.getCssClass(),message:message,closeBtnId:this.getCloseBtnId()};
var self=this;
this.getElement().html(this.getTemplate().render(context));
if(this.getIsClosable()){$("#"+this.getCloseBtnId()).removeClass("hidden");
$("#"+this.getCloseBtnId()).click(function(){self.close();
});
}};
prot.close=function(){$(this.getElement()).hide();
};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.AutoSuggest=function(element){this.setCaptionClass("caption");
this.setTemplate(MPageControls.getDefaultTemplates().autoSuggest);
this.setCaption("");
this.setAutoHideCloseButton(true);
this.setDelay(50);
this.setDetailDialog(null);
this.setHighlightEnabled(true);
this.setSynchSuggestionsWidth(true);
this.setBackgroundClass("search-box-image");
this.mBlurEnabled=true;
this.setOnChange(function(){});
this.setOnClose(function(){});
this.setOnEnter(function(){});
this.setOnDelay(function(){});
this.setRequestItemValueCallback(function(item){return item.content;
});
ns.Control.call(this,element);
};
inherits(ns.AutoSuggest,ns.Control);
attribute(ns.AutoSuggest,"List");
attribute(ns.AutoSuggest,"CaptionClass");
attribute(ns.AutoSuggest,"DetailDialog");
attribute(ns.AutoSuggest,"Delay");
attribute(ns.AutoSuggest,"Template");
attribute(ns.AutoSuggest,"Caption");
attribute(ns.AutoSuggest,"OnChange");
attribute(ns.AutoSuggest,"OnClose");
attribute(ns.AutoSuggest,"OnDelay");
attribute(ns.AutoSuggest,"OnEnter");
attribute(ns.AutoSuggest,"Timer");
attribute(ns.AutoSuggest,"RequestItemValueCallback");
attribute(ns.AutoSuggest,"HighlightEnabled");
attribute(ns.AutoSuggest,"SynchSuggestionsWidth");
attribute(ns.AutoSuggest,"AutoHideCloseButton");
attribute(ns.AutoSuggest,"Items");
attribute(ns.AutoSuggest,"BackgroundClass");
var prot=ns.AutoSuggest.prototype;
prot.init=function(){var self=this;
var txtBox=null;
this.getElement().empty();
this.getElement().append(this.getTemplate().render({textboxId:this.getTextboxId(),closebtnId:this.getClosebtnId()}));
txtBox=this.getTextbox();
this.activateCaption();
this.createDialog();
this.setListTemplate(MPageControls.getDefaultTemplates().autoSuggestList);
txtBox.click(function(){self.deactivateCaption();
});
txtBox.blur(function(){if(self.getValue().length===0){self.activateCaption();
}setTimeout(function(){var suggestionsContainer=$("#control_"+self.getControlId()+"_content .suggestions");
if(!suggestionsContainer.is(":focus")){self.close();
}},300);
});
txtBox.keyup(function(e){self.processTextboxKeyDown(e);
});
$("#"+this.getClosebtnId()).click(function(){self.close();
self.getTextbox()[0].value="";
self.getOnClose()();
self.activateCaption();
});
if(this.getAutoHideCloseButton()){this.hideCloseButton();
}};
prot.processTextboxKeyDown=function(e){var self=this;
var dialog=this.getDetailDialog();
if(self.getTimer()){clearTimeout(self.getTimer());
}if(this.getTextbox().hasClass(this.getCaptionClass())){this.getTextbox().removeClass(this.getCaptionClass());
}if(this.getValue().length===0){this.hideCloseButton();
if(dialog&&dialog.getVisible()){this.close();
}return;
}else{$("#"+this.getClosebtnId()).css("display","inline-block");
}if(e.keyCode==13){if(dialog&&dialog.getVisible()&&this.getList().getSelectedIndex()>=0){this.getList().getOnEnter()();
this.close();
return;
}this.close();
this.getOnEnter()();
return;
}if(self.getList()){self.getList().processKeyEvent(e);
}var dontProcess=[38,40];
if($.inArray(e.keyCode,dontProcess)!=-1){this.moveCaretToEnd();
return;
}this.getOnChange()();
var t=setTimeout(function(){self.getOnDelay()();
if(self.getValue()&&self.getValue().length===0){self.close();
}},self.getDelay());
self.setTimer(t);
};
prot.activateCaption=function(){if(this.getCaption().length===0){return;
}this.getTextbox().addClass(this.getCaptionClass());
this.getTextbox()[0].value=this.getCaption();
if(this.getAutoHideCloseButton()){this.hideCloseButton();
}};
prot.moveCaretToEnd=function(){var txtbox=this.getTextbox().get(0);
var pos=this.getValue().length;
if(txtbox.setSelectionRange){txtbox.setSelectionRange(pos,pos);
return;
}if(txtbox.createTextRange){var range=txtbox.createTextRange();
range.moveEnd("character",pos);
range.moveStart("character",pos);
range.select();
}};
prot.hideCloseButton=function(){$("#"+this.getClosebtnId()).css("display","none");
};
prot.deactivateCaption=function(){if(!this.getTextbox().hasClass(this.getCaptionClass())){return;
}this.getTextbox().removeClass(this.getCaptionClass());
this.getTextbox()[0].value="";
};
prot.getTextbox=function(){return this.getElement().find("#"+this.getTextboxId());
};
prot.getTextboxId=function(){return"control_"+this.getControlId()+"_textbox";
};
prot.getClosebtnId=function(){return"control_"+this.getControlId()+"_closebtn";
};
prot.close=function(){if(this.getDetailDialog()){this.getDetailDialog().hide();
}this.mBlurEnabled=true;
};
prot.setSuggestions=function(items){this.setItems(items);
if(items.length===0||this.getValue().length===0||this.getTextbox().hasClass(this.getCaptionClass())){this.close();
return;
}if(this.getSynchSuggestionsWidth()){$("#control_"+this.getControlId()+"_content").css("min-width",this.getElement().width()+"px");
}this.getList().renderItems(items);
this.getDetailDialog().show();
this.getDetailDialog().updatePosition();
if(this.getHighlightEnabled()){var hl=new ns.TextHighlighter(this.getList().getElement());
hl.highlight(this.getValue());
}var self=this;
var suggestionsContainer="#control_"+self.getControlId()+"_content .suggestions";
$(suggestionsContainer).attr("tabindex",0);
$(suggestionsContainer).on("blur",function(){setTimeout(function(){if(self.getElement()&&!self.getTextbox().is(":focus")){self.close();
}},300);
});
};
prot.createDialog=function(){var self=this;
var listDiv=$("<div></div>");
listDiv.appendTo(this.getElement().offsetParent());
listDiv.attr("id","control_"+this.getControlId()+"_content");
var dd=new ns.DetailDialog(this.getElement(),listDiv);
dd.setElementCorner(["bottom","left"]);
dd.setAlwaysOnTop(true);
var list=new ns.List(listDiv);
list.setOnSelect(function(item){self.setValue(self.getRequestItemValueCallback()(item));
self.getOnEnter()();
self.close();
});
this.setList(list);
this.setDetailDialog(dd);
};
prot.getValue=function(){if(!this.getElement()||!this.getTextbox().length){return null;
}return this.getTextbox()[0].value;
};
prot.setValue=function(value){this.getTextbox()[0].value=value;
};
prot.destroy=function(){if(this.getList()){this.getList().destroy();
}if(this.getDetailDialog()){this.getDetailDialog().destroy();
}};
prot.setListItemTemplate=function(template){this.getList().setItemTemplate(template);
};
prot.setListTemplate=function(template){this.getList().setListTemplate(template);
};
prot.activateBackground=function(){this.getTextbox().addClass(this.getBackgroundClass());
};
})(jQuery);
(function($){var ns=MPageControls;
var oo=MPageObjectOriented;
var inherits=oo.inherits;
var attribute=oo.createAttribute;
ns.DetailDialog=function(element,contentsElement){var defaultHideFx=function(element){element.slideUp(150);
};
var defaultShowFx=function(element){element.slideDown(150);
};
this.setAlwaysOnTop(false);
this.setElementCorner(["bottom","left"]);
this.setContentsCorner(["top","left"]);
this.setBeforeShow(function(){});
this.setAutoFlipVertical(true);
this.setAutoFlipHorizontal(true);
this.setContents(contentsElement);
this.setShowEffect(defaultShowFx);
this.setHideEffect(defaultHideFx);
this.setVisible(false);
this.setOnShow(function(){});
this.setOnHide(function(){});
ns.Control.call(this,element);
};
inherits(ns.DetailDialog,ns.Control);
attribute(ns.DetailDialog,"ShowEffect");
attribute(ns.DetailDialog,"HideEffect");
attribute(ns.DetailDialog,"Visible");
attribute(ns.DetailDialog,"OnShow");
attribute(ns.DetailDialog,"OnHide");
attribute(ns.DetailDialog,"Created");
attribute(ns.DetailDialog,"ElementCorner");
attribute(ns.DetailDialog,"ContentsCorner");
attribute(ns.DetailDialog,"ElementFlippedCorner");
attribute(ns.DetailDialog,"ContentsFlippedCorner");
attribute(ns.DetailDialog,"BeforeShow");
attribute(ns.DetailDialog,"AutoFlipVertical");
attribute(ns.DetailDialog,"AutoFlipHorizontal");
attribute(ns.DetailDialog,"AlwaysOnTop");
var prot=ns.DetailDialog.prototype;
prot.init=function(){};
prot.setFlipReference=function(reference){this.m_flipReference=MPageControls.getId(reference);
};
prot.getFlipReference=function(){return MPageControls.fromId(this.m_flipReference);
};
prot.toggle=function(){if(this.getVisible()){this.hide();
}else{this.show();
}};
prot.updatePosition=function(elementConnection,contentConnection){var element=this.getElement();
var content=this.getContents();
var elx=0;
var ely=0;
var elpos=element.offset();
if(!elementConnection){elementConnection=this.getElementCorner();
}if(!contentConnection){contentConnection=this.getContentsCorner();
}switch(elementConnection[0]){case"top":ely=elpos.top;
break;
case"bottom":ely=elpos.top+element.outerHeight();
break;
}switch(elementConnection[1]){case"left":elx=elpos.left;
break;
case"right":elx=elpos.left+element.outerWidth();
break;
}if(contentConnection[0]=="bottom"){ely=ely-content.outerHeight();
}if(contentConnection[1]=="right"){elx=elx-content.outerWidth();
}var parent=content.offsetParent();
if(parent.length&&parent.prop("tagName")==="HTML"){parent=$(document.body);
}var x=elx-parent.offset().left;
var y=0;
if(contentConnection[0]=="windowTop"){y=parent.offset().top;
}else{y=ely-parent.offset().top;
}if(this.getAlwaysOnTop()){this.getContents().css("z-index","100");
}this.getContents().css("position","absolute");
this.getContents().css({left:x,top:y}).show();
};
prot.show=function(){if(this.getVisible()){return;
}var self=this;
this.beforeShow();
this.getContents().css("display","block");
this.updatePosition(this.getElementCorner(),this.getContentsCorner());
this.setElementFlippedCorner(this.getElementCorner());
this.setContentsFlippedCorner(this.getContentsCorner());
this.autoFlipVertical();
this.autoFlipHorizontal();
this.m_OnShow(this);
this.setVisible(true);
};
prot.autoFlipUp=function(){this.autoFlipVertical();
};
prot.autoFlipVertical=function(){var anchorVertical="";
if(!this.getAutoFlipVertical()){return;
}var windowEdge=$(window).scrollTop()+$(window).height();
var contents=this.getContents();
if(this.getFlipReference()){windowEdge=this.getFlipReference().offset().top+parseInt(this.getFlipReference().outerHeight(),10);
}var contentHeight=parseInt(contents.outerHeight(),10);
var contentTop=contents.offset().top;
var bottomEdge=contentTop+contentHeight;
if(bottomEdge>=windowEdge){anchorVertical=(this.getElementFlippedCorner()[1]==this.getContentsFlippedCorner()[1])?"top":"bottom";
if(contentTop<=contentHeight){if(contentHeight>=windowEdge){contents.outerHeight(windowEdge-10);
contents.outerWidth(contents.outerWidth()+17);
contents.css("overflow-y","auto");
}this.setElementFlippedCorner([anchorVertical,this.getElementFlippedCorner()[1]]);
this.setContentsFlippedCorner(["windowTop",this.getContentsFlippedCorner()[1]]);
this.updatePosition(this.getElementFlippedCorner(),this.getContentsFlippedCorner());
}else{this.setElementFlippedCorner([anchorVertical,this.getElementFlippedCorner()[1]]);
this.setContentsFlippedCorner(["bottom",this.getContentsFlippedCorner()[1]]);
this.updatePosition(this.getElementFlippedCorner(),this.getContentsFlippedCorner());
}}};
prot.autoFlipHorizontal=function(){if(!this.getAutoFlipHorizontal()){return;
}var windowRightEdge=$(window).width();
var windowLeftEdge=0;
var flipReference=this.getFlipReference();
if(flipReference){windowLeftEdge=flipReference.offset().left;
windowRightEdge=windowLeftEdge+parseInt(flipReference.outerWidth(),10);
}var dialogLeftEdge=this.getContents().offset().left;
var dialogRightEdge=dialogLeftEdge+parseInt(this.getContents().outerWidth(),10);
if(dialogLeftEdge<windowLeftEdge){this.updatePosition([this.getElementFlippedCorner()[0],"right"],[this.getContentsFlippedCorner()[0],"left"]);
}else{if(dialogRightEdge>windowRightEdge){this.updatePosition([this.getElementFlippedCorner()[0],"left"],[this.getContentsFlippedCorner()[0],"right"]);
}}};
prot.hide=function(){if(!this.getVisible()){return;
}this.getContents().css("display","none");
this.setVisible(false);
this.m_OnHide(this);
};
prot.beforeShow=function(){this.getBeforeShow()(this);
};
prot.destroy=function(){if(this.getContents()){this.getContents().remove();
}this.setVisible(false);
this.setCreated(false);
};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.DropDown=function(element,contentsElement,defaultValue){if(element){this.setSelector(new ns.Selector(element,"selected","unselected"));
}if(contentsElement){this.setContents(contentsElement);
}this.setOnShow(function(){});
this.setOnHide(function(){});
this.setOnSelect(function(){});
this.setDisabledCssClass("disabled");
this.m_value=defaultValue;
ns.Control.call(this,element);
};
inherits(ns.DropDown,ns.Control);
attribute(ns.DropDown,"DetailDialog");
attribute(ns.DropDown,"Selector");
attribute(ns.DropDown,"OnShow");
attribute(ns.DropDown,"OnHide");
attribute(ns.DropDown,"OnSelect");
attribute(ns.DropDown,"Enabled");
attribute(ns.DropDown,"DisabledCssClass");
var prot=ns.DropDown.prototype;
prot.init=function(){this.setDetailDialog(new ns.DetailDialog(this.getElement(),this.getContents()));
if(!this.getSelector()){this.setSelector(new ns.Selector(this.getElement(),"selected","unselected"));
}var self=this;
this.getSelector().setOnSelect(function(){self.getDetailDialog().show();
});
this.getSelector().setOnUnselect(function(){self.getDetailDialog().hide();
});
this.getDetailDialog().setOnShow(function(){self.getDetailDialog().getContents().css("z-index","7000");
self.onShow();
});
this.getDetailDialog().setOnHide(function(){self.m_OnHide(self);
});
this.setValue(this.getValue());
};
prot.setValue=function(value){this.m_value=value;
if(this.getElement()){this.getElement().html(value);
}};
prot.onShow=function(){this.m_OnShow(this);
};
prot.getValue=function(){if(!this.getDetailDialog()){return"";
}return this.m_value;
};
prot.show=function(){if(!this.getDetailDialog()){return;
}this.getDetailDialog().show();
};
prot.hide=function(){if(!this.getDetailDialog()){return;
}this.getDetailDialog().hide();
this.getSelector().unselect();
};
prot.destroy=function(){if(!this.getDetailDialog()||!this.getElement()){return;
}this.getDetailDialog().destroy();
this.getElement().remove();
};
prot.disable=function(){this.m_Enabled=false;
this.hide();
this.getSelector().setEnabled(false);
this.getSelector().getElement().addClass(this.getDisabledCssClass());
};
prot.enable=function(){this.m_Enabled=true;
this.getSelector().setEnabled(true);
this.getSelector().getElement().removeClass(this.getDisabledCssClass());
};
prot.setEnabled=function(val){if(val){this.enable();
}else{this.disable();
}};
})(jQuery);
(function($){var ns=MPageControls;
var attribute=MPageObjectOriented.createAttribute;
var inherits=MPageObjectOriented.inherits;
ns.DropDownNested=function(element,tree){this.setSelector(new ns.Selector(element,"selected","unselected"));
this.setOnShow(function(){});
this.setOnHide(function(){});
this.setOnSelect(function(){});
this.setTree(tree);
ns.Control.call(this,element);
};
inherits(ns.DropDownNested,ns.Control);
var prot=ns.DropDownNested.prototype;
attribute(ns.DropDownNested,"DetailDialog");
attribute(ns.DropDownNested,"Selector");
attribute(ns.DropDownNested,"Tree");
attribute(ns.DropDownNested,"RootNode");
attribute(ns.DropDownNested,"OnShow");
attribute(ns.DropDownNested,"OnHide");
attribute(ns.DropDownNested,"OnSelect");
attribute(ns.DropDownNested,"SelectedNode");
ns.DropDownNested.Node=function(jsonData,parentNode,parentDropDown){this.children=[];
this.parent=parentNode;
this.dropDown=parentDropDown;
var self=this;
$.each(jsonData,function(k,v){if(k=="children"){$.each(v,function(){self.children.push(new ns.DropDownNested.Node(this,self,parentDropDown));
});
}else{self[k]=v;
}});
};
ns.DropDownNested.Node.prototype.makeElement=function(parentElement){var current=$("<li></li>").html(this.name);
var self=this;
$(current).click(function(){self.dropDown.select(self);
});
parentElement.append(current);
var rootUl="";
if(this.children.length>0){rootUl=$("<ul></ul>");
$.each(this.children,function(){this.makeElement(rootUl);
});
}parentElement.append(rootUl);
return current;
};
prot.init=function(){this.setRootNode(new ns.DropDownNested.Node(this.getTree(),null,this));
var id="controlContents"+this.getControlId();
var rootUl=$("<ul></ul>");
this.getRootNode().makeElement(rootUl);
var menuContent=$("<div></div>");
menuContent.attr("id",id);
menuContent.append(rootUl.children("ul"));
menuContent.appendTo($("body"));
this.setDetailDialog(new ns.DetailDialog(this.getElement(),menuContent));
var self=this;
this.getSelector().setOnSelect(function(){self.getDetailDialog().show();
});
this.getSelector().setOnUnselect(function(){self.getDetailDialog().hide();
});
this.getDetailDialog().setOnShow(function(){self.getDetailDialog().getContents().css("z-index","7000");
self.m_OnShow(self);
});
this.getDetailDialog().setOnHide(function(){self.m_OnHide(self);
});
};
prot.select=function(node){this.getElement().html(node.name);
this.setSelectedNode(node);
this.getSelector().unselect();
this.m_OnSelect(node);
};
prot.show=function(){this.getDetailDialog().show();
};
prot.hide=function(){this.getDetailDialog().hide();
};
prot.destroy=function(){this.getDetailDialog().destroy();
this.getElement().remove();
};
})(jQuery);
(function($){var ns=MPageControls;
var DropDown=MPageControls.DropDown;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
var Tree=MPageControls.Tree;
ns.DropDownTree=function(element){this.setTreeCreated(false);
this.setOnSelect(function(){});
this.setOnCreate(function(){});
DropDown.call(this,element,null);
};
inherits(ns.DropDownTree,DropDown);
attribute(ns.DropDownTree,"Tree");
attribute(ns.DropDownTree,"TreeCreated");
attribute(ns.DropDownTree,"OnLazyRead");
attribute(ns.DropDownTree,"OnCreate");
attribute(ns.DropDownTree,"OnSelect");
var prot=ns.DropDownTree.prototype;
prot.init=function(){var content=$("<div></div>");
content.appendTo(this.getElement().offsetParent());
content.attr("id","content"+this.getControlId());
this.setContents(content);
DropDown.prototype.init.call(this);
var self=this;
this.getDetailDialog().setBeforeShow(function(){self.beforeShow();
});
};
prot.setTreeElement=function(element){this.mTreeElement=MPageControls.getId(element);
};
prot.getTreeElement=function(){return MPageControls.fromId(this.mTreeElement);
};
prot.create=function(){var self=this;
var treeElement=$("<div class='dynatree'></div>").appendTo(this.getContents());
var id="treeElement"+this.getControlId();
treeElement.attr("id",id);
this.setTreeElement(treeElement);
this.setTree(new MPageControls.Tree(this.getTreeElement()));
this.getTree().setOnSelect(function(node){self.onSelect(node);
});
this.getOnCreate()();
this.setTreeCreated(true);
};
prot.onSelect=function(node){this.setValue(node.data.title);
this.getSelector().unselect();
};
prot.getSelectedNode=function(){if(this.getTree()===null||this.getTree()===undefined){return null;
}return this.getTree().getSelectedNode();
};
prot.beforeShow=function(){if(this.getTreeCreated()){return;
}this.create();
if(this.getOnLazyRead()){this.getTree().setOnLazyRead(this.getOnLazyRead());
}};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.Group=function(){this.setControls([]);
this.setCurrent(null);
};
attribute(ns.Group,"Controls");
attribute(ns.Group,"Current");
var prot=ns.Group.prototype;
prot.add=function(control){this.getControls().push(control);
};
prot.selectSingle=function(control){this.unselectAllExcept(control);
control.select();
};
prot.unselectAllExcept=function(control){var controls=this.getControls();
for(var i=controls.length;
i--;
){if(controls[i].unselect&&controls[i]!=control){controls[i].unselect();
}}this.setCurrent(control);
};
prot.each=function(fun){var controls=this.getControls();
for(var i=controls.length;
i--;
){fun(controls[i]);
}};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.List=function(element){var self=this;
ns.Control.call(this,element);
this.setSelectedIndex(-1);
this.setSelectedOption(0);
this.setListTemplate(MPageControls.getDefaultTemplates().list);
this.setItemTemplate(MPageControls.getDefaultTemplates().listItem);
this.setHighlightClass("current");
this.setSelectedOptionClass("selected-option");
this.setOnSelect(function(){});
this.setOnMoveUp(function(){});
this.setOnMoveDown(function(){});
this.setOnKeyDown(function(){});
this.setOnDblClick(function(){});
this.setOnEnter(function(){self.select(self.getSelectedIndex());
});
};
inherits(ns.List,ns.Control);
attribute(ns.List,"SelectedIndex");
attribute(ns.List,"ListTemplate");
attribute(ns.List,"ItemTemplate");
attribute(ns.List,"Items");
attribute(ns.List,"OnSelect");
attribute(ns.List,"OnMoveUp");
attribute(ns.List,"OnMoveDown");
attribute(ns.List,"OnEnter");
attribute(ns.List,"OnKeyDown");
attribute(ns.List,"OnDblClick");
attribute(ns.List,"HighlightClass");
attribute(ns.List,"DisplayKey");
attribute(ns.List,"SelectedOption");
attribute(ns.List,"SelectedOptionClass");
var prot=ns.List.prototype;
prot.init=function(){};
prot.makeItem=function(item){if(!item.content){item.content=item[this.getDisplayKey()];
}return item;
};
prot.moveUp=function(){if(this.getSelectedIndex()<=0){this.setSelectedIndex(0);
}else{this.setSelectedIndex(this.getSelectedIndex()-1);
}var listDiv=$(this.getElement()).children();
var index=this.getSelectedIndex();
var curItemDiv=listDiv.children().eq(index);
var itemTopY=curItemDiv.position().top;
if(itemTopY<0){listDiv.scrollTop(listDiv.scrollTop()+itemTopY);
}this.highlight(index);
this.getOnMoveUp()(this.getSelectedItem());
};
prot.moveDown=function(){if(this.getSelectedIndex()>=this.getItems().length-1){this.setSelectedIndex(this.getItems().length-1);
}else{this.setSelectedIndex(this.getSelectedIndex()+1);
}var listDiv=$(this.getElement()).children();
var index=this.getSelectedIndex();
var curItemDiv=listDiv.children().eq(index);
var itemBottomYDistance=curItemDiv.position().top+curItemDiv.outerHeight(true)-listDiv.height();
if(itemBottomYDistance>0){listDiv.scrollTop(listDiv.scrollTop()+itemBottomYDistance);
}this.highlight(index);
this.getOnMoveDown()(this.getSelectedItem());
};
prot.highlight=function(index){this.getElement().find("."+this.getHighlightClass()).removeClass(this.getHighlightClass());
this.getElement().find("#"+this.getIdByIndex(index)).addClass(this.getHighlightClass());
};
prot.highlightSelectedOption=function(index){var selectedOption=this.getSelectedOption();
if(index<0&&selectedOption===0){this.getElement().find("#"+this.getIdByIndex(selectedOption)).addClass(this.getSelectedOptionClass());
this.getElement().find("#"+this.getIdByIndex(index)).removeClass(this.getSelectedOptionClass());
}if(index>0||selectedOption>0){this.getElement().find(".selected-item").removeClass(this.getSelectedOptionClass());
this.getElement().find("#"+this.getIdByIndex(selectedOption)).addClass(this.getSelectedOptionClass());
}};
prot.getSelectedItem=function(){if(this.getSelectedIndex()<=-1){return null;
}var items=this.getItems();
return items[this.getSelectedIndex()];
};
prot.setSelectedItem=function(item){var index=this.getItemIndex(item);
this.setSelectedIndex(index);
this.highlight(index);
};
prot.getItemIndex=function(item){var items=this.getItems();
for(var i=items.length;
i--;
){if(items[i]==item){return i;
}}return -1;
};
prot.renderItems=function(items){var self=this;
this.setItems(items);
this.setSelectedIndex(-1);
var renderedItems=[];
$.each(items,function(i,item){item=self.makeItem(item);
item._elementId=self.getIdByIndex(i);
var rendered=self.getItemTemplate().render(item);
renderedItems.push(rendered);
rendered.click(function(){(function(index){self.select(index);
})(i);
});
rendered.dblclick(function(){(function(index){self.doubleClick(index);
})(i);
});
});
var list=this.getListTemplate().render({items:renderedItems,listId:this.getListId()});
this.getElement().empty();
this.getElement().append(list);
list.keydown(function(e){self.processKeyEvent(e);
});
};
prot.processKeyEvent=function(e){this.getOnKeyDown()(e);
switch(e.keyCode){case (40):e.preventDefault();
this.moveDown();
break;
case (38):e.preventDefault();
this.moveUp();
break;
case (13):this.getOnEnter()();
break;
}};
prot.select=function(index){if(typeof index==="undefined"||index===null){index=this.getSelectedIndex();
}this.setSelectedIndex(index);
this.highlight(index);
this.getOnSelect()(this.getSelectedItem());
this.setSelectedOption(index);
};
prot.doubleClick=function(index){this.getOnDblClick()(this.getSelectedItem());
};
prot.getIdByIndex=function(index){return"controls_"+this.getControlId()+"_"+index;
};
prot.getListId=function(){return"controls_"+this.getControlId()+"_list";
};
prot.focus=function(){$("#"+this.getListId()).focus();
};
prot.destroy=function(){this.getElement().remove();
};
})(jQuery);
(function($){var ns=MPageControls;
var oo=MPageObjectOriented;
var inherits=oo.inherits;
var attribute=oo.createAttribute;
ns.Modeless=function(element,contentsElement){this.setOnForceHide(function(){});
ns.DetailDialog.call(this,element,contentsElement);
};
ns.Modeless.hide=function(){if(ns.Modeless.visibleInstance&&ns.Modeless.visibleInstance.getVisible()){ns.Modeless.visibleInstance.hide();
ns.Modeless.visibleInstance.getOnForceHide()();
}};
ns.Modeless.visibleInstance=null;
inherits(ns.Modeless,ns.DetailDialog);
attribute(ns.Modeless,"OnForceHide");
var prot=ns.Modeless.prototype;
prot.show=function(){ns.Modeless.hide();
ns.DetailDialog.prototype.show.call(this);
ns.Modeless.visibleInstance=this;
};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.Selector=function(element,selClass,unselClass){this.setIsSelected(false);
this.setEnabled(true);
this.setSelectedClass(selClass);
this.setUnselectedClass(unselClass);
this.setUnselectOnClickEnabled(true);
this.setOnSelect(function(){});
this.setOnUnselect(function(){});
this.setDisabledClass("dithered");
ns.Control.call(this,element);
};
attribute(ns.Selector,"SelectedClass");
attribute(ns.Selector,"UnselectedClass");
attribute(ns.Selector,"IsSelected");
attribute(ns.Selector,"OnSelect");
attribute(ns.Selector,"OnUnselect");
attribute(ns.Selector,"Enabled");
attribute(ns.Selector,"DisabledClass");
attribute(ns.Selector,"UnselectOnClickEnabled");
inherits(ns.Selector,ns.Control);
var prot=ns.Selector.prototype;
prot.init=function(){var self=this;
this.getElement().addClass(this.getUnselectedClass());
this.bind("click",this.getElement(),function(){if(self.getIsSelected()&&!self.getUnselectOnClickEnabled()){return;
}if(self.getEnabled()){self.toggle();
}});
if(this.getIsSelected()){this.performSelection();
}else{this.performUnselection();
}};
prot.toggle=function(){if(this.getIsSelected()){this.unselect();
}else{this.select();
}};
prot.select=function(){if(this.getIsSelected()){return;
}this.performSelection();
this.m_OnSelect(this);
};
prot.performSelection=function(){if(this.getUnselectedClass()!==undefined){this.getElement().removeClass(this.getUnselectedClass());
}this.getElement().addClass(this.getSelectedClass());
this.setIsSelected(true);
};
prot.unselect=function(){if(!this.getIsSelected()){return;
}this.performUnselection();
this.m_OnUnselect(this);
};
prot.performUnselection=function(){if(this.getSelectedClass()!==undefined){this.getElement().removeClass(this.getSelectedClass());
}this.getElement().addClass(this.getUnselectedClass());
this.setIsSelected(false);
};
prot.destroy=function(){this.destroyEvents();
};
prot.setEnabled=function(value){this.m_Enabled=value;
if(!this.getElement()){return;
}if(value){this.getElement().removeClass(this.getDisabledClass());
}else{this.getElement().addClass(this.getDisabledClass());
}};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.Tab=function(){this.setButtonTemplate(null);
this.setButtonSelectedClass("selected");
this.setContentUnselectedClass("hidden");
this.setOnSelect(function(){});
this.setOnUnselect(function(){});
this.setOnRender(function(){});
this.setEnabled(true);
ns.Control.call(this,null);
};
inherits(ns.Tab,ns.Control);
attribute(ns.Tab,"Title");
attribute(ns.Tab,"Button");
attribute(ns.Tab,"Content");
attribute(ns.Tab,"ButtonTemplate");
attribute(ns.Tab,"ButtonSelectedClass");
attribute(ns.Tab,"ContentUnselectedClass");
attribute(ns.Tab,"OnSelect");
attribute(ns.Tab,"OnUnselect");
attribute(ns.Tab,"Enabled");
attribute(ns.Tab,"OnRender");
attribute(ns.Tab,"TabGroup");
var prot=ns.Tab.prototype;
prot.getButtonId=function(){return"control_"+this.getControlId()+"_button";
};
prot.getContentId=function(){return"control_"+this.getControlId()+"_content";
};
prot.setEnabled=function(isEnabled){this.m_Enabled=isEnabled;
if(this.getButton()){this.getButton().setEnabled(isEnabled);
}};
prot.renderButton=function(targetId){var template=TemplateBuilder.buildTemplate(this.getButtonTemplate());
var self=this;
var html=template.render({tab:this,tabButtonId:this.getButtonId()});
$("#"+targetId).append(html);
var btnDiv=$("#"+this.getButtonId());
if(!btnDiv.length){this.setButton(undefined);
return;
}var selector=new ns.Selector(btnDiv);
selector.setSelectedClass(this.getButtonSelectedClass());
selector.setUnselectOnClickEnabled(false);
selector.setOnSelect(function(){self.select();
});
selector.performUnselection();
this.setButton(selector);
};
prot.renderContent=function(targetId){var contentDiv=$("<div id='"+this.getContentId()+"'></div>");
$("#"+targetId).append(contentDiv);
this.setElement(contentDiv);
var selector=new ns.Selector(contentDiv);
selector.setUnselectedClass(this.getContentUnselectedClass());
selector.setEnabled(false);
selector.performUnselection();
this.setContent(selector);
};
prot.render=function(targetButtonId,targetContentId){this.renderButton(targetButtonId);
this.renderContent(targetContentId);
this.getOnRender()();
};
prot.select=function(){var button=this.getButton();
if(button!==undefined){button.performSelection();
}if(this.getTabGroup()){this.getTabGroup().unselectAllExcept(this);
}this.getContent().performSelection();
this.getOnSelect()();
};
prot.unselect=function(){var button=this.getButton();
if(button!==undefined){button.unselect();
}this.getContent().unselect();
this.getOnUnselect()();
};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.TabGroup=function(){ns.Group.call(this);
this.setFirstTabCSSClass("first");
this.setLastTabCSSClass("last");
};
inherits(ns.TabGroup,ns.Group);
attribute(ns.TabGroup,"ButtonsContainerId");
attribute(ns.TabGroup,"ContentsContainerId");
attribute(ns.TabGroup,"DefaultButtonTemplate");
attribute(ns.TabGroup,"FirstTabCSSClass");
attribute(ns.TabGroup,"LastTabCSSClass");
var prot=ns.TabGroup.prototype;
prot.render=function(){var controls=this.getControls();
var firstTabElement=null;
var lastTabElement=null;
for(var i=0;
i<controls.length;
i++){var tab=controls[i];
if(tab.getButtonTemplate()===null){tab.setButtonTemplate(this.getDefaultButtonTemplate());
}tab.render(this.getButtonsContainerId(),this.getContentsContainerId());
if(tab.getButton()===undefined){continue;
}var tabElement=tab.getButton().getElement();
if(firstTabElement===null){firstTabElement=tabElement;
}lastTabElement=tabElement;
tab.setTabGroup(this);
}var firstCssClass=this.getFirstTabCSSClass();
var lastCssClass=this.getLastTabCSSClass();
if(firstTabElement!==null&&firstCssClass!==null){firstTabElement.addClass(firstCssClass);
}if(lastTabElement!==null&&lastCssClass!==null){lastTabElement.addClass(lastCssClass);
}};
prot.eachControl=function(fun){var controls=this.getControls();
for(var i=controls.length;
i--;
){fun(controls[i]);
}};
prot.disableAll=function(){this.eachControl(function(control){if(control.setEnabled){control.setEnabled(false);
}});
};
prot.enableAll=function(){this.eachControl(function(control){if(control.setEnabled){control.setEnabled(true);
}});
};
prot.addTab=function(tab){this.getControls().push(tab);
};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.TextHighlighter=function(element){this.setClass("highlight");
this.setTag("span");
ns.Control.call(this,element);
};
inherits(ns.TextHighlighter,ns.Control);
attribute(ns.TextHighlighter,"Tag");
attribute(ns.TextHighlighter,"Class");
attribute(ns.TextHighlighter,"OnHighlightWord");
ns.TextHighlighter.prototype.highlight=function(term){var regex=new RegExp("(?![^&;]+;)(?!<[^<>]*)("+term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi,"\\$1").split(/[, ]/).join("|")+")(?![^<>]*>)(?![^&;]+;)","gi");
var tagStart="<"+this.getTag()+" class='"+this.getClass()+"'>";
var tagEnd="</"+this.getTag()+">";
var textNode;
var newHtml;
var textNodes=this.getElement().find("*").contents().filter(function(){return(this.nodeType===3);
});
$.each(textNodes,function(i,node){textNode=$(node);
newHtml=textNode.text().replace(regex,tagStart+"$1"+tagEnd);
textNode.replaceWith(newHtml);
});
};
})(jQuery);
(function($){var ns=MPageControls;
var attribute=MPageObjectOriented.createAttribute;
var inherits=MPageObjectOriented.inherits;
ns.Tree=function(element){this.setDynatreeOptions({});
this.setOnSelect(function(){});
ns.Control.call(this,element);
};
inherits(ns.Tree,ns.Control);
attribute(ns.Tree,"DynatreeOptions");
attribute(ns.Tree,"OnSelect");
attribute(ns.Tree,"SelectedNode");
var prot=ns.Tree.prototype;
prot.init=function(){var self=this;
var opts=this.getDynatreeOptions();
opts.onLazyRead=function(node){self.lazyRead(node);
};
opts.onActivate=function(node){self.onSelect(node);
};
opts.OnPostInit=this.treeInit;
opts.autoFocus=false;
opts.initAjax={};
this.getElement().dynatree(opts);
};
prot.setOnLazyRead=function(fun){this.m_OnLazyRead=fun;
this.lazyRead(this.getElement().dynatree("getRoot"));
};
prot.getOnLazyRead=function(){return this.m_OnLazyRead;
};
prot.lazyRead=function(node){this.m_OnLazyRead(node);
};
prot.onSelect=function(node){this.getOnSelect()(node);
this.setSelectedNode(node);
};
})(jQuery);
(function(){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
var List=MPageControls.List;
ns.DropDownList=function(element){this.setList(new List());
this.setHighlightClass("current");
this.setIsMouseOverContents(false);
ns.DropDown.call(this,element);
};
attribute(ns.DropDownList,"List");
attribute(ns.DropDownList,"DisplayKey");
attribute(ns.DropDownList,"HighlightClass");
attribute(ns.DropDownList,"IsMouseOverContents");
inherits(ns.DropDownList,ns.DropDown);
var prot=ns.DropDownList.prototype;
prot.init=function(){var self=this;
var selector=$("<div tabindex='0' id='control_"+this.getControlId()+"_selector' class='selector'></div>");
var contents=$("<div style='display: none' id='control_"+this.getControlId()+"_contents' class ='contents' ></div>");
var list=this.getList();
list.setElement(contents);
list.setListTemplate(MPageControls.getDefaultTemplates().list);
list.setItemTemplate(MPageControls.getDefaultTemplates().ddListItem);
list.setHighlightClass(this.getHighlightClass());
list.setOnSelect(function(){self.selectItem();
});
list.bind("mouseover",contents,function(){self.setIsMouseOverContents(true);
});
list.bind("mouseout",contents,function(){self.setIsMouseOverContents(false);
});
list.bind("blur",selector,function(){if(!self.getIsMouseOverContents()){self.hide();
}});
this.getElement().append(selector);
this.getElement().append(contents);
this.setContents(contents);
this.setElement(selector);
if(this.getSelector()){this.getSelector().destroyEvents();
this.getSelector().setElement(selector);
this.getSelector().init();
}this.getList().makeItem=function(item){item.displayKey=self.getDisplayKey();
return item;
};
ns.DropDown.prototype.init.call(this);
this.getDetailDialog().setVisible(false);
};
prot.onShow=function(){var selectedIndex=this.getList().getSelectedIndex();
ns.DropDown.prototype.onShow.call(this);
this.getList().setSelectedIndex(selectedIndex);
this.getList().highlight(selectedIndex);
};
prot.selectItem=function(){this.hide();
this.setValue(this.getList().getSelectedItem()[this.getDisplayKey()]);
this.getOnSelect()(this.getList().getSelectedItem());
};
prot.getSelectedItem=function(){return this.getList().getSelectedItem();
};
prot.setSelectedItem=function(item){this.setValue(item[this.getDisplayKey()]);
this.getList().setSelectedItem(item);
};
prot.renderItems=function(items){return this.getList().renderItems(items);
};
prot.setItemTemplate=function(template){this.getList().setItemTemplate(template);
};
prot.setItems=function(items){this.getList().setItems(items);
};
prot.selectByIndex=function(index){this.getList().select(index);
};
})();
(function($){var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
var ns=MPageControls;
MPageControls.CclSearch=function(element){this.setRequestCount(0);
this.setSynchSuggestionsWidth(true);
this.setInBrowserDir("../../mpages/reports/");
ns.AutoSuggest.call(this,element);
};
inherits(ns.CclSearch,ns.AutoSuggest);
attribute(ns.CclSearch,"ProgramName");
attribute(ns.CclSearch,"RequestCount");
attribute(ns.CclSearch,"InBrowserDir");
var prot=ns.CclSearch.prototype;
prot.init=function(){MPageControls.AutoSuggest.prototype.init.call(this);
var self=this;
this.setTemplate(MPageControls.getDefaultTemplates().cclSearch);
this.setOnDelay(function(){self.callProgram();
});
this.setRequestItemValueCallback(function(item){return item.content;
});
};
prot.callProgram=function(httpRequestHandler){var searchPhrase=this.getValue();
var self=this;
this.setRequestCount(this.getRequestCount()+1);
var reqNumber=this.getRequestCount();
if(httpRequestHandler){var xhr=httpRequestHandler;
}else{var xhr=(!CERN_Platform.inMillenniumContext())?new XMLHttpRequest():new XMLCclRequest();
}xhr.onreadystatechange=function(){if(xhr.readyState==4&&xhr.status==200){MP_Util.LogScriptCallInfo(null,this,"script_search.js","callProgram");
self.handleSuccess(reqNumber,xhr.responseText);
}};
var params=this.buildParameters();
if(!CERN_Platform.inMillenniumContext()){var urlSuffix=this.getProgramName()+"?parameters="+params;
var url=CERN_Platform.getScriptServletLocation()||this.getInBrowserDir();
url+=urlSuffix;
xhr.open("GET",url);
xhr.send(null);
}else{xhr.open("GET",this.getProgramName());
xhr.send(params);
}};
prot.handleSuccess=function(reqNumber,responseText){if(reqNumber!=this.getRequestCount()||!responseText){return;
}var jsonSearch=JSON.parse(responseText);
if(jsonSearch.RECORD_DATA.STATUS_DATA.STATUS==="F"){MP_Util.LogScriptCallError(null,responseText,"program_search.js","handleSuccess");
MP_Util.LogError(this.getProgramName()+" failed: "+responseText);
return;
}if(!jsonSearch){return;
}var context=this.makeContext(jsonSearch);
this.setSuggestions(context);
};
prot.buildParameters=function(){throw"buildParameters() is abstract.";
};
prot.makeContext=function(responseJson){return responseJson;
};
}(jQuery));
(function($){var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
var ns=MPageControls;
MPageControls.OrderSearch=function(element){this.setRequestCount(0);
this.setSynchSuggestionsWidth(true);
ns.AutoSuggest.call(this,element);
};
inherits(ns.OrderSearch,ns.AutoSuggest);
attribute(ns.OrderSearch,"Criterion");
attribute(ns.OrderSearch,"SuggestionLimit");
attribute(ns.OrderSearch,"EncounterTypeCd");
attribute(ns.OrderSearch,"FacilityId");
attribute(ns.OrderSearch,"SearchIndicators");
attribute(ns.OrderSearch,"VenueType");
attribute(ns.OrderSearch,"RequestCount");
attribute(ns.OrderSearch,"BirthDate");
attribute(ns.OrderSearch,"BirthDateTimeZone");
attribute(ns.OrderSearch,"ClinicalWeight");
attribute(ns.OrderSearch,"ClinicalWeightUnit");
attribute(ns.OrderSearch,"PMAInDays");
var prot=MPageControls.OrderSearch.prototype;
prot.init=function(){MPageControls.AutoSuggest.prototype.init.call(this);
var self=this;
this.setListItemTemplate(MPageControls.getDefaultTemplates().orderSearchItem);
this.setTemplate(MPageControls.getDefaultTemplates().orderSearch);
this.setOnDelay(function(){var originalValue=self.m_SearchIndicators;
self.m_SearchIndicators&=~(1<<10);
self.searchOrders();
self.m_SearchIndicators=originalValue;
});
this.setRequestItemValueCallback(function(item){return item.content;
});
};
prot.searchOrders=function(callback){var searchPhrase=this.getValue();
var self=this;
this.setRequestCount(this.getRequestCount()+1);
var reqNumber=this.getRequestCount();
var xhr=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
xhr.onreadystatechange=function(){if(xhr.readyState==4&&xhr.status==200){MP_Util.LogScriptCallInfo(null,this,"order_search.js","handleSearchOrderSuccess");
self.handleSearchOrdersSuccess(reqNumber,xhr.responseText,callback);
}};
if(this.getSearchIndicators()===null){throw"OrderSearch: no search indicators specified";
}var birthDate=this.getBirthDate()?this.getBirthDate():"";
var birthDateTimeZone=this.getBirthDateTimeZone()?this.getBirthDateTimeZone():0;
var weightValue=this.getClinicalWeight()?this.getClinicalWeight():0;
var weightUnit=this.getClinicalWeightUnit()?this.getClinicalWeightUnit():0;
var pmaInDays=this.getPMAInDays()?this.getPMAInDays():0;
var sugLimit=this.getSuggestionLimit();
if(this.getSuggestionLimit()<=0){sugLimit=50;
}var params="^MINE^,^"+searchPhrase+"^,"+sugLimit+","+this.getEncounterTypeCd()+".0,"+this.getFacilityId()+".0,"+this.getCriterion().provider_id+".0,"+this.getCriterion().ppr_cd+".0,"+this.getVenueType()+","+this.getSearchIndicators()+","+1+","+this.getCriterion().person_id+".0,^"+birthDate+"^,"+birthDateTimeZone+","+weightValue+","+weightUnit+","+pmaInDays;
if(CERN_BrowserDevInd){var url="mp_search_orders?parameters="+params;
xhr.open("GET",url);
xhr.send(null);
}else{xhr.open("GET","mp_search_orders");
xhr.send(params);
}};
prot.handleSearchOrdersSuccess=function(requestNumber,responseText,callback){if((requestNumber!=this.getRequestCount())||!responseText){return;
}var jsonSearch="";
jsonSearch=JSON.parse(responseText);
if(!jsonSearch){return;
}if(jsonSearch.RESULTS.STATUS_DATA.STATUS==="F"){MP_Util.LogScriptCallError(null,responseText,"order_search.js","handleSearchOrderSuccess");
MP_Util.LogError("mp_search_orders failed: "+responseText);
return;
}if(jsonSearch.RESULTS.BIRTH_DATE){this.setBirthDate(jsonSearch.RESULTS.BIRTH_DATE);
}if(jsonSearch.RESULTS.BIRTH_DATE_TZ){this.setBirthDateTimeZone(jsonSearch.RESULTS.BIRTH_DATE_TZ);
}if(jsonSearch.RESULTS.WEIGHT_VALUE){this.setClinicalWeight(jsonSearch.RESULTS.WEIGHT_VALUE);
}if(jsonSearch.RESULTS.WEIGHT_CODE){this.setClinicalWeightUnit(jsonSearch.RESULTS.WEIGHT_CODE);
}if(jsonSearch.RESULTS.PMA_VALUE){this.setPMAInDays(jsonSearch.RESULTS.PMA_VALUE);
}if(callback){callback(responseText);
}else{var returnData=jsonSearch.RESULTS.ORDERS.concat(jsonSearch.RESULTS.PLANS);
this.renderJson(returnData);
}};
prot.renderJson=function(returnData){var self=this;
$.each(returnData,function(i,item){if(item.SYNONYM){item.content=item.SYNONYM;
}else{if(item.PW_CAT_SYN_NAME){item.content=item.PW_CAT_SYN_NAME;
}}if(item.ORDERABLE_TYPE_FLAG==6){item.iconClass="careset-icon";
}else{if(item.ORDERABLE_TYPE_FLAG===0){item.iconClass="";
}else{if(item.PATH_CAT_ID){item.iconClass="powerplan-icon";
}}}});
this.setSuggestions(returnData);
};
})(jQuery);
(function($){var ns=MPageControls;
var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
ns.OrderVenueGroup=function(element,defaultValue,venueList,selectedOption){ns.DropDownList.call(this,element);
this.setValue(defaultValue);
this.setVenueList(venueList);
this.getList().setSelectedOption(selectedOption);
this.getList().setItemTemplate(MPageControls.getDefaultTemplates().venueTemplate);
};
attribute(ns.OrderVenueGroup,"VenueList");
inherits(ns.OrderVenueGroup,ns.DropDownList);
var prot=ns.OrderVenueGroup.prototype;
prot.init=function(){var self=this;
this.setOnShow(function(){self.getList().setDisplayKey("VENUE_DISPLAY");
self.getList().renderItems(self.getVenueList());
self.getList().highlightSelectedOption(self.getList().getSelectedIndex());
});
ns.DropDownList.prototype.init.call(this);
};
})(jQuery);
(function($){var inherits=MPageObjectOriented.inherits;
var attribute=MPageObjectOriented.createAttribute;
var ns=MPageControls;
MPageControls.PersonnelSearch=function(element){ns.CclSearch.call(this,element);
this.setProgramName("MP_GET_PRSNL_JSON");
this.setSuggestionLimit(10);
this.setListItemTemplate(MPageControls.getDefaultTemplates().personnelSearchItem);
};
inherits(ns.PersonnelSearch,MPageControls.CclSearch);
attribute(ns.PersonnelSearch,"UserId");
attribute(ns.PersonnelSearch,"SuggestionLimit");
var prot=ns.PersonnelSearch.prototype;
prot.buildParameters=function(){var lastName="";
var firstName="";
var splitted=this.getValue().split(",");
if(splitted.length>1){lastName=splitted[0];
firstName=splitted[1];
}else{lastName=splitted[0];
firstName="";
}return"^MINE^,"+this.getUserId()+".00,^"+lastName+"^,^"+firstName+"^,"+this.getSuggestionLimit();
};
prot.makeContext=function(response){return response.RECORD_DATA.PRSNL;
};
prot.setTemplateMaxHeight=function(maxHeight){ns.setMaxHeight(maxHeight);
};
})(jQuery);
var MenuManager=function(){this.menuCollection={};
this.menuStack=[];
this.offsetParent=null;
};
MenuManager.prototype.addMenuObject=function(menuObj){var menuId="";
if(!(Menu.prototype.isPrototypeOf(menuObj))){logger.logError("MenuManager.addMenuObject only accepts objects of type Menu or any object that uses Menu.prototype");
return false;
}menuId=menuObj.getId();
if(!menuId){logger.logError("MenuManager.addMenuObject: no/invalid menu id given");
return false;
}else{if(this.menuCollection[menuId]){logger.logError("MenuManager.addMenuObject: menu id"+menuId+" is already in use");
return false;
}}this.menuCollection[menuId]=menuObj;
return true;
};
MenuManager.prototype.closeMenuStack=function(forceClose){var anchorActiveClass="";
var topMenuItem=null;
try{topMenuItem=this.menuStack.pop();
if(topMenuItem){if(!forceClose){if(topMenuItem.isMouseOverMenu()){this.menuStack.push(topMenuItem);
return true;
}}$("#"+topMenuItem.getContentElementId()).remove();
topMenuItem.setContentElementId("");
anchorActiveClass=topMenuItem.getAnchorActiveClass();
if(anchorActiveClass){$("#"+topMenuItem.getAnchorElementId()).removeClass(anchorActiveClass);
}topMenuItem.setIsActive(false);
topMenuItem.setIsVisible(false);
topMenuItem.setIsMouseOverMenu(false);
topMenuItem.clearHoverTimeout();
return this.closeMenuStack(forceClose);
}this.offsetParent=null;
return true;
}catch(err){logger.logJSError(err,null,"MenuManager","closeMenu");
return false;
}};
MenuManager.prototype.deleteMenuObject=function(menuId){return delete this.menuCollection[menuId];
};
MenuManager.prototype.getMenuObject=function(menuId){return this.menuCollection[menuId]||null;
};
MenuManager.prototype.showMenu=function(menuId){var anchorActiveClass="";
var anchorElement=null;
var contentParentElement=null;
var menuClass="";
var menuControl=null;
var menuEle=null;
var menuItems=null;
var menuObj=null;
menuObj=this.getMenuObject(menuId);
if(!menuObj){logger.logError("Menu "+menuId+" does not exist");
return false;
}$("#menuContent"+menuId).remove();
if(menuObj.isRootMenu()){this.closeMenuStack(true);
}menuClass=(menuObj.isRootMenu())?"menu-container-root":"menu-container-submenu";
menuEle=$("<div></div>").attr("id","menuContent"+menuId).addClass(menuClass+" "+menuObj.getTypeClass());
if(!(menuObj.isPersistent()&&menuObj.isRootMenu())){menuEle.hover(function(){menuObj.setIsMouseOverMenu(true);
menuObj.clearHoverTimeout();
},function(){menuObj.setIsMouseOverMenu(false);
menuObj.startHoverTimeout();
});
}menuObj.setContentElementId("menuContent"+menuId);
menuItems=menuObj.generateMenuContent();
$(menuItems).each(function(index,element){$(menuEle).append(element);
});
anchorActiveClass=menuObj.getAnchorActiveClass();
if(anchorActiveClass){$("#"+menuObj.getAnchorElementId()).addClass(anchorActiveClass);
}anchorElement=$("#"+menuObj.getAnchorElementId());
contentParentElement=$("#"+menuObj.getContentParentId());
if(contentParentElement.length){$(contentParentElement).append(menuEle);
}else{$(document.body).append(menuEle);
}$(menuEle).width($(menuEle).outerWidth());
menuControl=new MPageControls.DetailDialog(anchorElement,menuEle);
menuControl.setAutoFlipHorizontal(menuObj.autoFlipHorizontal());
menuControl.setAutoFlipVertical(menuObj.autoFlipVertical());
menuControl.setElementCorner(menuObj.getAnchorConnectionCorner());
menuControl.setContentsCorner(menuObj.getContentConnectionCorner());
menuControl.show();
menuObj.setIsActive(true);
menuObj.setIsVisible(true);
if(menuObj.isRootMenu()&&!menuObj.isPersistent()){menuObj.startHoverTimeout(3000);
}this.menuStack.push(menuObj);
};
MenuManager.prototype.refreshMenuDisplay=function(menuId){var menuObj=null;
var topMenuIndex=0;
menuObj=this.getMenuObject(menuId);
if(!menuObj){logger.logError("Menu "+menuId+" does not exist");
return false;
}topMenuIndex=this.menuStack.length-1;
if(topMenuIndex>=0&&menuObj===this.menuStack[topMenuIndex]){this.showMenu(menuId);
}};
MenuManager.prototype.updateMenuObject=function(menuObj){if(!Menu.prototype.isPrototypeOf(menuObj)){logger.logError("MenuManager.updateMenuObject only accepts objects of type Menu");
return false;
}this.menuCollection[menuObj.getId()]=menuObj;
return true;
};
var MP_MenuManager=new MenuManager();
function MenuItem(menuId){this.m_activeInd=false;
this.m_clickFunc=function(){};
this.m_closeOnClick=true;
this.m_defaultClickFunction=function(){};
this.m_disabledInd=false;
this.m_elementId="";
this.m_label="";
this.m_menuItemId=menuId;
this.m_menuItemTypeClass="";
}MenuItem.prototype.closeOnClick=function(){return this.m_closeOnClick;
};
MenuItem.prototype.isActive=function(){return this.m_activeInd;
};
MenuItem.prototype.isDisabled=function(){return this.m_disabledInd;
};
MenuItem.prototype.getClickFunction=function(){return this.m_clickFunc;
};
MenuItem.prototype.getDefaultClickFunction=function(){return this.m_defaultClickFunction;
};
MenuItem.prototype.getElementId=function(){return this.m_elementId;
};
MenuItem.prototype.getId=function(){return this.m_menuItemId;
};
MenuItem.prototype.getLabel=function(){return this.m_label;
};
MenuItem.prototype.getTypeClass=function(){return this.m_menuItemTypeClass;
};
MenuItem.prototype.setClickFunction=function(clickFunc){if(typeof clickFunc==="function"){this.m_clickFunc=clickFunc;
}return this;
};
MenuItem.prototype.setCloseOnClick=function(closeFlag){if(typeof closeFlag==="boolean"){this.m_closeOnClick=closeFlag;
}return this;
};
MenuItem.prototype.setDefaultClickFunction=function(clickFunc){if(typeof clickFunc==="function"){this.m_defaultClickFunction=clickFunc;
}return this;
};
MenuItem.prototype.setElementId=function(elementId){if(typeof elementId==="string"){this.m_elementId=elementId;
}return this;
};
MenuItem.prototype.setId=function(id){if(id&&typeof id==="string"){this.m_menuItemId=id;
}return this;
};
MenuItem.prototype.setIsActive=function(activeInd){if(typeof activeInd==="boolean"){this.m_activeInd=activeInd;
}return this;
};
MenuItem.prototype.setIsDisabled=function(disabled){if(typeof disabled==="boolean"){this.m_disabledInd=disabled;
}return this;
};
MenuItem.prototype.setLabel=function(label){var menuContainerId="";
if(label&&typeof label==="string"){this.m_label=label;
if(this.isActive()){menuContainerId=this.getElementId().replace(/menuSel[0-9]+-/,"");
MP_MenuManager.refreshMenuDisplay(menuContainerId);
}}return this;
};
MenuItem.prototype.setTypeClass=function(typeClass){if(typeof typeClass==="string"){this.m_menuItemTypeClass=typeClass;
}return this;
};
MenuItem.prototype.generateSelectionContent=function(){return[$("<span>&nbsp;</span>").addClass("menu-selection-ind"),$("<span></span>").addClass("menu-selection").html(this.getLabel())];
};
function Menu(menuId){this.setId(menuId);
this.setCloseOnClick(false);
this.setDefaultClickFunction(function(clickEvent){MP_MenuManager.showMenu(this.getId());
});
this.m_autoFlipVertical=true;
this.m_autoFlipHorizontal=true;
this.m_anchorActiveClass="";
this.m_anchorElementId="";
this.anchorCorner=null;
this.contentCorner=null;
this.m_contentElementId="";
this.m_contentParentId="";
this.m_isPersistent=false;
this.m_hoverTimout=null;
this.m_menuItemArr=null;
this.m_onCloseFunction=null;
this.m_rootMenuInd=false;
this.m_mouseOverContent=false;
this.m_mouseOverAnchor=false;
this.m_visibleInd=false;
}Menu.prototype=new MenuItem();
Menu.prototype.constructor=MenuItem;
Menu.prototype.autoFlipHorizontal=function(){return this.m_autoFlipHorizontal;
};
Menu.prototype.autoFlipVertical=function(){return this.m_autoFlipVertical;
};
Menu.prototype.containsMenuItem=function(menuItemId){var x=0;
var itemArr=this.m_menuItemArr;
if(!itemArr){return false;
}for(x=itemArr.length;
x--;
){if(itemArr[x].getId()===menuItemId){return true;
}}return false;
};
Menu.prototype.isRootMenu=function(){return this.m_rootMenuInd;
};
Menu.prototype.isMouseOverMenu=function(){return this.m_mouseOverContent;
};
Menu.prototype.isMouseOverAnchor=function(){return this.m_mouseOverAnchor;
};
Menu.prototype.isPersistent=function(){return this.m_isPersistent;
};
Menu.prototype.isVisible=function(){return this.m_visibleInd;
};
Menu.prototype.getAnchorActiveClass=function(){return this.m_anchorActiveClass;
};
Menu.prototype.getAnchorConnectionCorner=function(){if(!this.anchorCorner){return["bottom","right"];
}return this.anchorCorner;
};
Menu.prototype.getAnchorElementId=function(){return this.m_anchorElementId;
};
Menu.prototype.getCloseFunction=function(){return this.m_onCloseFunction;
};
Menu.prototype.getContentConnectionCorner=function(){if(!this.contentCorner){return["top","right"];
}return this.contentCorner;
};
Menu.prototype.getContentElementId=function(){return this.m_contentElementId;
};
Menu.prototype.getContentParentId=function(){return this.m_contentParentId;
};
Menu.prototype.getMenuItemArray=function(){return this.m_menuItemArr;
};
Menu.prototype.setAnchorConnectionCorner=function(cornerArr){if(typeof cornerArr==="object"&&cornerArr.length){this.anchorCorner=cornerArr;
}return this;
};
Menu.prototype.setAnchorActiveClass=function(activeClass){if(typeof activeClass==="string"){this.m_anchorActiveClass=activeClass;
}return this;
};
Menu.prototype.setAnchorElementId=function(anchorId){if(typeof anchorId==="string"){this.m_anchorElementId=anchorId;
}return this;
};
Menu.prototype.setAutoFlipHorizontal=function(horizontalFlip){if(typeof horizontalFlip==="boolean"){this.m_autoFlipHorizontal=horizontalFlip;
}return this;
};
Menu.prototype.setAutoFlipVertical=function(verticalFlip){if(typeof verticalFlip==="boolean"){this.m_autoFlipVertical=verticalFlip;
}return this;
};
Menu.prototype.setCloseFunction=function(closeFunc){if(typeof closeFunc==="function"){this.m_onCloseFunction=closeFunc;
}return this;
};
Menu.prototype.setContentConnectionCorner=function(cornerArr){if(typeof cornerArr==="object"&&cornerArr.length){this.contentCorner=cornerArr;
}return this;
};
Menu.prototype.setContentElementId=function(elementId){if(typeof elementId==="string"){this.m_contentElementId=elementId;
}return this;
};
Menu.prototype.setContentParentId=function(parentId){if(typeof parentId==="string"){this.m_contentParentId=parentId;
}return this;
};
Menu.prototype.setElementId=function(elementId){if(typeof elementId==="string"){this.m_elementId=elementId;
this.m_anchorElementId=elementId;
}return this;
};
Menu.prototype.setIsActive=function(activeInd){var menuItems=null;
var x=0;
if(typeof activeInd==="boolean"){this.m_activeInd=activeInd;
}menuItems=this.getMenuItemArray();
if(menuItems&&menuItems.length){for(x=menuItems.length;
x--;
){menuItems[x].setIsActive(activeInd);
}}return this;
};
Menu.prototype.setIsRootMenu=function(rootMenuInd){if(typeof rootMenuInd==="boolean"){this.m_rootMenuInd=rootMenuInd;
}return this;
};
Menu.prototype.setIsMouseOverMenu=function(mouseOver){if(typeof mouseOver==="boolean"){this.m_mouseOverContent=mouseOver;
}return this;
};
Menu.prototype.setIsMouseOverAnchor=function(mouseOver){if(typeof mouseOver==="boolean"){this.m_mouseOverAnchor=mouseOver;
}return this;
};
Menu.prototype.setIsPersistent=function(persistent){if(typeof persistent==="boolean"){this.m_isPersistent=persistent;
}return this;
};
Menu.prototype.setIsVisible=function(visibleInd){if(typeof visibleInd==="boolean"){this.m_visibleInd=visibleInd;
}return this;
};
Menu.prototype.addMenuItem=function(menuItem){if(MenuItem.prototype.isPrototypeOf(menuItem)){if(!this.m_menuItemArr){this.m_menuItemArr=[];
}this.m_menuItemArr.push(menuItem);
if(Menu.prototype.isPrototypeOf(menuItem)){menuItem.setContentParentId(this.m_contentParentId);
MP_MenuManager.updateMenuObject(menuItem);
}}return this;
};
Menu.prototype.startHoverTimeout=function(setTime){var that=this;
setTime=setTime||250;
this.clearHoverTimeout();
this.m_hoverTimout=window.setTimeout(function(){var closeFunc=that.getCloseFunction();
if(closeFunc){closeFunc.call(that);
}MP_MenuManager.closeMenuStack(false);
},setTime);
};
Menu.prototype.clearHoverTimeout=function(){window.clearTimeout(this.m_hoverTimout);
};
Menu.prototype.insertMenuItem=function(menuItem,index){if(!this.m_menuItemArr){this.m_menuItemArr=[];
}if(typeof index!=="number"){return this;
}if(MenuItem.prototype.isPrototypeOf(menuItem)&&index<=this.m_menuItemArr.length&&index>=0){this.m_menuItemArr.splice(index,0,menuItem);
if(Menu.prototype.isPrototypeOf(menuItem)){MP_MenuManager.updateMenuObject(menuItem);
}}return this;
};
Menu.prototype.removeMenuItem=function(menuItem){var x=0;
var menuItemArr=this.m_menuItemArr;
if(!menuItemArr){return false;
}if(MenuItem.prototype.isPrototypeOf(menuItem)&&!this.isActive()){for(x=menuItemArr.length;
x--;
){if(menuItemArr[x]===menuItem){menuItemArr.splice(x,1);
if(Menu.prototype.isPrototypeOf(menuItem)){MP_MenuManager.deleteMenuObject(menuItem);
}return true;
}}}return false;
};
Menu.prototype.generateMenuContent=function(){var disabledClass="";
var element=null;
var elementArr=[];
var itemArr=this.getMenuItemArray();
var itemArrCnt=(itemArr)?itemArr.length:0;
var menuItem=null;
var menuItemId="";
var selectorEle=null;
var x=0;
function generateClickFunction(menuItemObj){return function(ele){var clickFunc=null;
if(!menuItemObj.isDisabled()){if(menuItemObj.closeOnClick()){MP_MenuManager.closeMenuStack(true);
}else{MP_MenuManager.closeMenuStack(false);
}clickFunc=menuItemObj.getDefaultClickFunction();
clickFunc.call(menuItemObj,ele);
clickFunc=menuItemObj.getClickFunction();
if(clickFunc){clickFunc.call(menuItemObj,ele);
}}};
}function generateHoverOverFunction(menuItemObj){return function(){if(Menu.prototype.isPrototypeOf(menuItemObj)){menuItemObj.setIsMouseOverAnchor(true);
if(menuItemObj.isVisible()){menuItemObj.clearHoverTimeout();
}else{window.setTimeout(function(){if(menuItemObj.isMouseOverAnchor()){MP_MenuManager.showMenu(menuItemObj.getId());
}},251);
}}};
}function generateHoverOutFunction(menuItemObj){return function(){if(Menu.prototype.isPrototypeOf(menuItemObj)){menuItemObj.setIsMouseOverAnchor(false);
if(menuItemObj.isVisible()){menuItemObj.startHoverTimeout();
}}};
}for(x=0;
x<itemArrCnt;
x++){menuItem=itemArr[x];
menuItemId="menuSel"+x+"-"+this.getId();
menuItem.setElementId(menuItemId);
disabledClass=(menuItem.isDisabled())?"menu-item-disabled":"";
element=$("<div></div>").addClass("menu-item "+disabledClass+" "+menuItem.getTypeClass()).attr("id",menuItemId);
$(element).hover(generateHoverOverFunction(menuItem),generateHoverOutFunction(menuItem));
selectorEle=menuItem.generateSelectionContent();
$(selectorEle).each(function(index,selector){$(element).append(selector);
});
$(element).click(generateClickFunction(menuItem));
elementArr.push(element);
}return elementArr;
};
Menu.prototype.generateSelectionContent=function(){return[$("<span>&nbsp;</span>").addClass("menu-selection-ind"),$("<span></span>").addClass("menu-selection").html(this.getLabel()),$("<span>&nbsp;</span>").addClass("menu-submenu-ind")];
};
function DynamicMenu(menuId){this.setId(menuId);
this.setCloseOnClick(false);
this.m_contentCreationFunc=function(){};
}DynamicMenu.prototype=new Menu();
DynamicMenu.prototype.constructor=Menu;
DynamicMenu.prototype.getContentCreationFunction=function(){return this.m_contentCreationFunc;
};
DynamicMenu.prototype.setContentCreationFunction=function(creationFunc){if(typeof creationFunc==="function"){this.m_contentCreationFunc=creationFunc;
}return this;
};
DynamicMenu.prototype.generateMenuContent=function(){var contentCreationFunct=this.getContentCreationFunction();
if(contentCreationFunct){return contentCreationFunct.call(this);
}return null;
};
function AdvancedFilterMenu(menuId){this.setId(menuId);
this.setTypeClass("adv-filter-menu-override");
this.setAutoFlipVertical(false);
this.settings={cancel:{enabled:false,onclick:function(){return false;
},label:i18n.CANCEL},checkbox:{enabled:false,isChecked:false,onclick:function(){return false;
},label:""},actionLink:{enabled:false,onclick:function(){return false;
},label:""},advancedFilterCreationFunction:function(){return null;
},dimensions:{width:600},save:{enabled:false,onclick:function(){return false;
},label:i18n.SAVE}};
this.setContentCreationFunction(function(){var checkbox=this.settings.checkbox;
var actionLink=this.settings.actionLink;
var save=this.settings.save;
var cancel=this.settings.cancel;
var menuContent=$("<div class='adv-filter-menu'></div>").width(this.settings.dimensions.width);
var innerContainer=$("<div class='adv-filter-menu-inner-container'></div>").appendTo(menuContent);
$("<div class='adv-filter-menu-label'>"+this.getLabel()+"</div>").appendTo(innerContainer);
$("<div class='adv-filter-menu-custom-content'></div>").html(this.settings.advancedFilterCreationFunction()).appendTo(innerContainer);
if(!(checkbox.enabled||save.enabled||cancel.enabled||actionLink.enabled)){return menuContent;
}var controlContainer=$("<div class='adv-filter-menu-control-container'></div>").appendTo(menuContent);
var buttonContainer=$("<span class='adv-filter-menu-button-container'></span>");
var savePadding=0;
if(checkbox.enabled&&checkbox.label){var checkBoxContainer=$("<span class='adv-filter-menu-checkbox-container'></span>");
var checkboxEle=$("<input type='checkbox'>");
checkboxEle[0].checked=checkbox.isChecked;
checkboxEle.click(checkbox.onclick).appendTo(checkBoxContainer);
$("<span class='adv-filter-menu-checkbox-label'>"+checkbox.label+"</span>").appendTo(checkBoxContainer);
checkBoxContainer.appendTo(controlContainer);
}else{if(actionLink.enabled&&actionLink.label){var actionLinkContainer=$("<span class='adv-filter-menu-action-container'></span>");
$("<span class='adv-filter-menu-action-label'>"+actionLink.label+"</span>").click(actionLink.onclick).appendTo(actionLinkContainer);
actionLinkContainer.appendTo(controlContainer);
}}if(cancel.enabled){$("<button type='button' class='adv-filter-menu-button'>").html(cancel.label).click(cancel.onclick).appendTo(buttonContainer);
savePadding=6;
buttonContainer.appendTo(controlContainer);
}if(save.enabled){$("<button type='button' class='adv-filter-menu-button'>").html(save.label).css("margin-right",savePadding).click(save.onclick).appendTo(buttonContainer);
buttonContainer.appendTo(controlContainer);
}return menuContent;
});
}AdvancedFilterMenu.prototype=new DynamicMenu();
AdvancedFilterMenu.prototype.constructor=DynamicMenu;
AdvancedFilterMenu.prototype.setAdvancedFilterCreationFunction=function(contentFunction){if(contentFunction&&typeof contentFunction==="function"){this.settings.advancedFilterCreationFunction=contentFunction;
}};
AdvancedFilterMenu.prototype.setCancelButtonLabel=function(label){if(label&&typeof label==="string"){this.setIsCancelButtonEnabled(true);
this.settings.cancel.label=label;
}};
AdvancedFilterMenu.prototype.setCancelFunction=function(cancelFunction){if(cancelFunction&&(typeof cancelFunction==="function")){this.setIsCancelButtonEnabled(true);
this.settings.cancel.onclick=cancelFunction;
}};
AdvancedFilterMenu.prototype.setCheckboxClickFunction=function(checkboxClickFunction){if(checkboxClickFunction&&(typeof checkboxClickFunction==="function")){this.setIsCheckboxEnabled(true);
this.settings.checkbox.onclick=checkboxClickFunction;
}};
AdvancedFilterMenu.prototype.setCheckboxLabel=function(label){if(typeof label==="string"){this.settings.checkbox.label=label;
}};
AdvancedFilterMenu.prototype.setActionLinkFunction=function(linkFunc){if(linkFunc&&typeof linkFunc==="function"){this.setIsActionLinkEnabled(true);
this.settings.actionLink.onclick=linkFunc;
}};
AdvancedFilterMenu.prototype.setActionLinkLabel=function(label){if(typeof label==="string"){this.settings.actionLink.label=label;
}};
AdvancedFilterMenu.prototype.setIsCancelButtonEnabled=function(isEnabled){if(typeof isEnabled==="boolean"){this.settings.cancel.enabled=isEnabled;
}};
AdvancedFilterMenu.prototype.setIsCheckboxChecked=function(isChecked){if(typeof isChecked==="boolean"){this.settings.checkbox.isChecked=isChecked;
}};
AdvancedFilterMenu.prototype.setIsCheckboxEnabled=function(isEnabled){if(typeof isEnabled==="boolean"){this.settings.checkbox.enabled=isEnabled;
}};
AdvancedFilterMenu.prototype.setIsActionLinkEnabled=function(isEnabled){if(typeof isEnabled==="boolean"){this.settings.actionLink.enabled=isEnabled;
}};
AdvancedFilterMenu.prototype.setIsSaveButtonEnabled=function(isEnabled){if(typeof isEnabled==="boolean"){this.settings.save.enabled=isEnabled;
}};
AdvancedFilterMenu.prototype.setSaveButtonLabel=function(label){if(label&&typeof label==="string"){this.setIsSaveButtonEnabled(true);
this.settings.save.label=label;
}};
AdvancedFilterMenu.prototype.setSaveFunction=function(saveFunction){if(saveFunction&&(typeof saveFunction==="function")){this.setIsSaveButtonEnabled(true);
this.settings.save.onclick=saveFunction;
}};
AdvancedFilterMenu.prototype.setWidth=function(width){if(width&&typeof width==="number"){this.settings.dimensions.width=width;
}};
function ContextMenu(menuId){this.setId(menuId);
this.m_xOffset=0;
this.m_yOffset=0;
}ContextMenu.prototype=new Menu();
ContextMenu.prototype.constructor=Menu;
ContextMenu.prototype.getXOffset=function(){return this.m_xOffset;
};
ContextMenu.prototype.getYOffset=function(){return this.m_yOffset;
};
ContextMenu.prototype.setXOffset=function(xOffset){if(typeof xOffset==="number"){this.m_xOffset=xOffset;
}return this;
};
ContextMenu.prototype.setYOffset=function(yOffset){if(typeof yOffset==="number"){this.m_yOffset=yOffset;
}return this;
};
ContextMenu.prototype.setAnchorElement=function(){$(document.body).append($("<div id='"+this.getId()+"Anchor' class='context-menu'></div>").css({top:this.getYOffset(),left:this.getXOffset()}));
};
ContextMenu.prototype.removeAnchorElement=function(){$("#"+this.getId()+"Anchor").remove();
};
function MenuSelection(selectionId){this.setId(selectionId);
this.setDefaultClickFunction(function(clickEvent){if(!this.closeOnClick()&&!this.isDisabled()){this.toggleSelection();
}});
this.m_selectedInd=false;
this.m_selectedClass="menu-item-selected";
}MenuSelection.prototype=new MenuItem();
MenuSelection.prototype.constructor=MenuItem;
MenuSelection.prototype.isSelected=function(){return this.m_selectedInd;
};
MenuSelection.prototype.getSelectedClass=function(){return this.m_selectedClass;
};
MenuSelection.prototype.setIsSelected=function(selected){var selectedClass="";
var element=null;
if(typeof selected==="boolean"){this.m_selectedInd=selected;
if(this.isActive()){selectedClass=this.getSelectedClass();
element=$("#"+this.getElementId()+" :first-child");
if(selected){$(element).addClass(selectedClass);
}else{$(element).removeClass(selectedClass);
}}}return this;
};
MenuSelection.prototype.setSelectedClass=function(selectedClass){if(typeof selectedClass==="string"){this.m_selectedClass=selectedClass;
}return this;
};
MenuSelection.prototype.toggleSelection=function(){this.setIsSelected(!this.isSelected());
};
MenuSelection.prototype.generateSelectionContent=function(){var selectedClass=this.getSelectedClass();
if(!this.isSelected()){selectedClass="";
}return[$("<span>&nbsp;</span>").addClass("menu-selection-ind "+selectedClass),$("<span></span>").addClass("menu-selection").html(this.getLabel())];
};
function MenuSeparator(seperatorId){this.setId(seperatorId);
this.setTypeClass("menu-separator");
}MenuSeparator.prototype=new MenuItem();
MenuSeparator.prototype.constructor=MenuItem;
MenuSeparator.prototype.generateSelectionContent=function(){return["&nbsp;"];
};
function MenuSeparator(seperatorId){this.setId(seperatorId);
this.setTypeClass("menu-separator");
}MenuSeparator.prototype=new MenuItem();
MenuSeparator.prototype.constructor=MenuItem;
MenuSeparator.prototype.generateSelectionContent=function(){return["&nbsp;"];
};
function ThemeSelector(themeSelectorId,compId,fullId,ns){this.m_componentId=compId;
this.m_styleId=ns+compId;
this.setId(themeSelectorId);
this.setLabel(i18n.discernabu.COLOR_THEME);
this.setAnchorElementId(fullId);
this.setAnchorConnectionCorner(["top","left"]);
this.setContentConnectionCorner(["top","right"]);
this.setContentCreationFunction(function(){var themeSelectorHtml="";
var i18nCore=i18n.discernabu;
var themeSelectorColors=[{title:i18nCore.COLOR_STANDARD,name:"lightgrey",capsName:"LightGrey"},{title:i18nCore.COLOR_BROWN,name:"brown",capsName:"Brown"},{title:i18nCore.COLOR_CERNER_BLUE,name:"cernerblue",capsName:"CernerBlue"},{title:i18nCore.COLOR_DARK_GREEN,name:"darkgreen",capsName:"DarkGreen"},{title:i18nCore.COLOR_GREEN,name:"green",capsName:"Green"},{title:i18nCore.COLOR_GREY,name:"grey",capsName:"Grey"},{title:i18nCore.COLOR_LIGHT_BLUE,name:"lightblue",capsName:"LightBlue"},{title:i18nCore.COLOR_NAVY,name:"navy",capsName:"Navy"},{title:i18nCore.COLOR_ORANGE,name:"orange",capsName:"Orange"},{title:i18nCore.COLOR_PINK,name:"pink",capsName:"Pink"},{title:i18nCore.COLOR_PURPLE,name:"purple",capsName:"Purple"},{title:i18nCore.COLOR_YELLOW,name:"yellow",capsName:"Yellow"}];
var titleMarkup;
var idMarkup;
var classMarkup;
var dataMarkup;
var componentIdMarkup;
var styleIdMarkup;
for(var i=0;
i<themeSelectorColors.length;
i++){titleMarkup=' title="'+themeSelectorColors[i].title+'"';
idMarkup=' id="optConfigMnu'+themeSelectorColors[i].capsName+'"';
classMarkup=' class="opts-menu-config-item opt-config-mnu-'+themeSelectorColors[i].name+'"';
dataMarkup=' data-color="'+themeSelectorColors[i].name+'"';
componentIdMarkup=' component-id="'+this.m_componentId+'"';
styleIdMarkup=' style-id="'+this.m_styleId+'"';
themeSelectorHtml+="<div"+titleMarkup+classMarkup+dataMarkup+componentIdMarkup+styleIdMarkup+idMarkup+"></div>";
}themeSelectorHtml='<div class="opts-menu-config-content-custom" id="optMenuConfig'+this.m_componentId+'">'+themeSelectorHtml+"</div>";
return[$("<span>&nbsp;</span>").html(themeSelectorHtml).click(this.themeSelectorClickHandler)];
});
}ThemeSelector.prototype=new DynamicMenu();
ThemeSelector.prototype.constructor=DynamicMenu;
ThemeSelector.prototype.themeSelectorClickHandler=function(e){var color=e.target.getAttribute("data-color");
var section=_g(e.target.getAttribute("style-id"));
if(section){var colorString="brown|cernerblue|darkgreen|grey|green|lightblue|lightgrey|lowlight|navy|orange|pink|purple|yellow";
if(colorString.indexOf(color)>=0){var colorRegExp=/brown|cernerblue|darkgreen|grey|green|lightblue|lightgrey|lowlight|navy|orange|pink|purple|yellow/;
section.className=section.className.replace(colorRegExp,"");
}Util.Style.acss(section,color);
var componentId=Number(e.target.getAttribute("component-id"));
var component=MP_Util.GetCompObjById(componentId);
component.setCompColor(color);
setTimeout(function(){MP_Core.AppUserPreferenceManager.SaveCompPreferences(componentId,color,null,false);
},0);
}};
function UtilitiesMenu(menuId){this.setId(menuId);
this.setTypeClass("utilities-menu-override");
this.setAnchorActiveClass("vwp-util-active");
this.setIsPersistent(true);
this.setIsRootMenu(true);
this.settings={utilitiesContentCreationFunction:function(){return null;
},dimensions:{width:300,maxHeight:""}};
this.setContentCreationFunction(function(){var menuContent=$("<div class='utilities-menu'></div>").width(this.settings.dimensions.width);
var innerContainer=$("<div class='utilities-menu-inner-container'></div>").appendTo(menuContent);
$("<div class='utilities-menu-label'>"+this.getLabel()+"</div>").appendTo(innerContainer);
$("<div class='utilities-menu-custom-content'></div>").css("max-height",this.settings.dimensions.maxHeight||"").html(this.settings.utilitiesContentCreationFunction()).appendTo(innerContainer);
return menuContent;
});
}UtilitiesMenu.prototype=new DynamicMenu();
UtilitiesMenu.prototype.constructor=DynamicMenu;
UtilitiesMenu.prototype.setIsRootMenu=function(isRoot){if(typeof isRoot==="boolean"){if(!isRoot){throw new Error("UtilitiesMenu can only be used as root menus");
}else{this.m_rootMenuInd=isRoot;
}}};
UtilitiesMenu.prototype.setIsPersistent=function(isPersistent){if(typeof isPersistent==="boolean"){if(!isPersistent){throw new Error("UtilitiesMenu can only be used as a persistent menu");
}else{this.m_isPersistent=isPersistent;
}}};
UtilitiesMenu.prototype.setUtilitiesContentCreationFunction=function(contentFunction){if(contentFunction&&typeof contentFunction==="function"){this.settings.utilitiesContentCreationFunction=contentFunction;
}};
UtilitiesMenu.prototype.setWidth=function(width){if(width&&typeof width==="number"){this.settings.dimensions.width=width;
}};
UtilitiesMenu.prototype.setMaxHeight=function(maxHeight){if(maxHeight&&typeof maxHeight==="number"){this.settings.dimensions.maxHeight=maxHeight;
}};
