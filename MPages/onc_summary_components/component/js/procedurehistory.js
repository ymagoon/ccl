function ProcedureComponentStyle(){this.initByNamespace("proc");
}ProcedureComponentStyle.inherits(ComponentStyle);
function ProcedureComponent(criterion){this.setCriterion(criterion);
this.setStyles(new ProcedureComponentStyle());
this.setIncludeLineNumber(true);
this.setScope(1);
this.setComponentLoadTimerName("USR:MPG.PROCEDURE.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.PROCEDURE.O1 - render component");
this.m_viewableEncntrs="";
this.setResourceRequired(true);
ProcedureComponent.method("RetrieveRequiredResources",function(){var veObj=MP_Core.GetViewableEncntrs(this.getCriterion().person_id);
if(veObj.isResourceAvailable()&&veObj.getResourceData()){this.setViewableEncntrs(veObj.getResourceData());
CERN_PROCEDURE_O1.GetProcedureTable(this);
}else{CERN_EventListener.addListener(this,"viewableEncntrInfoAvailable",this.HandleViewableEncounters,this);
}});
ProcedureComponent.method("HandleViewableEncounters",function(event,srObj){if(srObj.isResourceAvailable()&&srObj.getResourceData()){this.setViewableEncntrs(srObj.getResourceData());
CERN_PROCEDURE_O1.GetProcedureTable(this);
}else{var errMsg="No viewable encounters available for this patient";
this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(),errMsg),(this.isLineNumberIncluded()?"(0)":""));
}});
ProcedureComponent.method("setViewableEncntrs",function(value){this.m_viewableEncntrs=value;
});
ProcedureComponent.method("getViewableEncntrs",function(){return(this.m_viewableEncntrs);
});
ProcedureComponent.method("InsertData",function(){CERN_PROCEDURE_O1.GetProcedureTable(this);
});
ProcedureComponent.method("HandleSuccess",function(recordData){CERN_PROCEDURE_O1.RenderComponent(this,recordData);
});
}ProcedureComponent.inherits(MPageComponent);
var CERN_PROCEDURE_O1=function(){function formatDateTimeUTC(dttm,format){var dateTime=new Date();
dateTime.setISO8601(dttm);
return dateTime.format(format);
}function sortProcedure(procArr){procArr.sort(sortByDtTm);
}function sortByDtTm(a,b){if(a.ONSET_UTC>b.ONSET_UTC){return -1;
}else{if(a.ONSET_UTC<b.ONSET_UTC){return 1;
}}if(a.NAME.toUpperCase()>b.NAME.toUpperCase()){return 1;
}if(a.NAME.toUpperCase()<b.NAME.toUpperCase()){return -1;
}return 0;
}return{GetProcedureTable:function(component){var sendAr=[];
var criterion=component.getCriterion();
var encntrs=component.getViewableEncntrs();
var encntrVal=(encntrs)?"value("+encntrs+")":"0.0";
sendAr.push("^MINE^",criterion.person_id+".0",encntrVal,criterion.provider_id+".0",criterion.ppr_cd+".0");
MP_Core.XMLCclRequestWrapper(component,"mp_get_procedures",sendAr,true);
},RenderComponent:function(component,recordData){try{var jsHTML=[];
var procArr=[];
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
jsHTML.push("<div class='",MP_Util.GetContentClass(component,recordData.PROC_CNT),"'>");
procCnt=recordData.PROC_CNT;
for(var j=0;
j<procCnt;
j++){procArr.push(recordData.PROC[j]);
}sortProcedure(procArr);
for(var i=0;
i<procCnt;
i++){var commentString="";
var onsetDate="";
var dateTime=null;
if(procArr[i].ONSET!==""){dateTime=new Date();
var onsetDt=procArr[i].ONSET_UTC;
dateTime.setISO8601(onsetDt);
if(procArr[i].DATE_FLAG===0||procArr[i].DATE_FLAG==1){onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
}else{if(procArr[i].DATE_FLAG==2){onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_MONTH_4YEAR_NO_DATE);
}else{if(procArr[i].DATE_FLAG==3){onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_4YEAR);
}}}}jsHTML.push("<h3 class='info-hd'><SPAN>",procArr[i].DISPLAY_AS,"</SPAN></h3><dl class='proc-info'><dt class='proc-name'><span>",i18n.PROCEDURE,"</span></dt><dd class='proc-name'><span>",procArr[i].DISPLAY_AS,"</span></dd><dt class='proc-date'><span>",i18n.SIG_LINE,"</span></dt><dd class='proc-date'><span class='date-time'>",onsetDate,"</span></dd></dl><h4 class='det-hd'><span>",i18n.PROCEDURE_DETAILS,"</span></h4><div class='proc-det hvr'><dt class='proc-det-name'><span>",i18n.PROCEDURE,":</span></dt><dd class='proc-det-name'>",procArr[i].NAME,"</dd><dt class='proc-det-name'><span>",i18n.DISPLAY_AS,":</span></dt><dd class='proc-det-name'>",procArr[i].DISPLAY_AS,"</dd><dt class='proc-det-name'><span>",i18n.PROCEDURE_DATE,":</span></dt><dd class='proc-det-name'>",onsetDate,"</dd><dt class='proc-det-name'><span>",i18n.STATUS,":</span></dt><dd class='proc-det-name'>",procArr[i].STATUS,"</dd><dt class='proc-det-name'><span>",i18n.PROVIDER,":</span></dt><dd class='proc-det-name'>",procArr[i].PROVIDER,"</dd><dt class='proc-det-name'><span>",i18n.LOCATION,":</span></dt><dd class='proc-det-name'>",procArr[i].LOCATION,"</dd><dt class='proc-det-name'><span>",i18n.COMMENTS,":</span></dt>");
for(var k=0;
k<procArr[i].COMMENTS.length;
k++){var begin_dttm="";
if(procArr[i].COMMENTS[k].BEG_EFFECTIVE_DT_TM!==""){dateTime=new Date();
var beginDt=procArr[i].COMMENTS[k].BEG_EFFECTIVE_DT_TM;
dateTime.setISO8601(beginDt);
begin_dttm=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
}commentString+=begin_dttm+" - "+procArr[i].COMMENTS[k].NAME_FULL_FORMATTED+"<br/>"+procArr[i].COMMENTS[k].LONG_TEXT+"<br/>";
}jsHTML.push("<dd class='proc-det-name'>",commentString,"</dd>");
jsHTML.push("</div>");
}jsHTML.push("</div>");
var countText=MP_Util.CreateTitleText(component,recordData.PROC_CNT);
MP_Util.Doc.FinalizeComponent(jsHTML.join(""),component,countText);
}catch(err){throw (err);
}finally{}return;
}};
}();
