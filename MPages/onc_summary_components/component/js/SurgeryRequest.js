function SurgeryBase(){this.header=null;
this.content=null;
this.tabName="";
this.criterion={};
this.parentBodyId=null;
this.parentSelf=null;
this.componentId=0;
this.isPreloadMode=false;
}SurgeryBase.prototype.getRootNode=function(){return this.rootNode;
};
SurgeryBase.prototype.setRootNode=function(domNode){this.rootNode=domNode;
};
SurgeryBase.prototype.getPreloadMode=function(){return this.isPreloadMode;
};
SurgeryBase.prototype.setPreloadMode=function(bool){this.isPreloadMode=bool;
};
SurgeryBase.prototype.getTabName=function(){return this.tabName;
};
SurgeryBase.prototype.setTabName=function(name){this.tabName=name;
};
SurgeryBase.prototype.getCriterion=function(){return this.criterion;
};
SurgeryBase.prototype.setCriterion=function(criterion){this.criterion=criterion;
};
SurgeryBase.prototype.setParentBodyId=function(id){this.parentBodyId=id;
};
SurgeryBase.prototype.getParentBodyId=function(){return this.parentBodyId;
};
SurgeryBase.prototype.setParent=function(obj){this.parentSelf=obj;
};
SurgeryBase.prototype.getParent=function(){return this.parentSelf;
};
SurgeryBase.prototype.setComponentId=function(id){this.componentId=id;
};
SurgeryBase.prototype.getComponentId=function(){return this.componentId;
};
SurgeryBase.prototype.setBedrockFilters=function(){return"";
};
SurgeryBase.prototype.preProcessing=function(){return"";
};
SurgeryBase.prototype.retrieveComponentData=function(){return"";
};
SurgeryBase.prototype.createHeader=function(){return"";
};
SurgeryBase.prototype.createContent=function(){return"";
};
SurgeryBase.prototype.postProcessing=function(){return"";
};
SurgeryBase.prototype.submitDataToSharedResource=function(){return true;
};
SurgeryBase.prototype.validateData=function(){return true;
};
SurgeryBase.prototype.checkObjEmpty=function(obj){var key;
for(key in obj){if(obj.hasOwnProperty(key)){return false;
}else{return true;
}}return true;
};

function SurgeryRequestReceiptBuilder(){this.rowArr=[];
this.header="";
this.footer="";
this.ssI18n=i18n.discernabu.surgery_receipt_builder;
this.requestId=0;
}SurgeryRequestReceiptBuilder.prototype.getRequestId=function(){return this.requestId;
};
SurgeryRequestReceiptBuilder.prototype.setRequestId=function(id){this.requestId=id;
};
SurgeryRequestReceiptBuilder.prototype.getRowArr=function(){return this.rowArr;
};
SurgeryRequestReceiptBuilder.prototype.setRowArr=function(arr){this.rowArr=arr;
};
SurgeryRequestReceiptBuilder.prototype.getHeader=function(){return this.header;
};
SurgeryRequestReceiptBuilder.prototype.setHeader=function(html){this.header=html;
};
SurgeryRequestReceiptBuilder.prototype.getFooter=function(){return this.footer;
};
SurgeryRequestReceiptBuilder.prototype.setFooter=function(obj){this.footer=obj;
};
SurgeryRequestReceiptBuilder.prototype.addHeader=function(header){var date=header.date||this.ssI18n.noDateLbl;
var time=header.time||"";
var location=header.location||this.ssI18n.noLocLbl;
var layoutHtml="";
var requestId=header.reqSurgId||0;
layoutHtml+="<div class='ss-receipt-header'>";
layoutHtml+="<div class='ss-receipt-header-date' title='"+date+"'>"+date+"</div>";
layoutHtml+="<div class='ss-receipt-header-time' title='"+time+"'>"+time+"</div>";
layoutHtml+="<div class='ss-receipt-header-location' title='"+location+"'>"+location+"</div>";
layoutHtml+="</div>";
this.setHeader(layoutHtml);
this.setRequestId(requestId);
};
SurgeryRequestReceiptBuilder.prototype.addRows=function(rowArr){var rowCnt;
for(rowCnt=0;
rowCnt<rowArr.length;
rowCnt++){this.rowArr.push(new SurgeryRequestReceiptBuilder.Row(rowCnt,rowArr[rowCnt]));
}};
SurgeryRequestReceiptBuilder.prototype.addFooter=function(footer){var buttonArr=footer.buttonArr;
var $footer=$("<div class='ss-receipt-footer'></div>");
var button,btnCnt,buttonFunc,$button,$buttonDiv;
var statusCss="";
var status="";
if(footer){if(footer.status_ind==="canceled"){statusCss="sr-cancel-status";
status=this.ssI18n.canceledLbl;
}else{if(footer.status_ind==="ordered"){status=this.ssI18n.confirmedLbl+" ("+footer.surgCaseNbr+")";
}else{if(footer.status_ind==="saved"){status=this.ssI18n.lastModified+" "+footer.updtPersonName;
}else{status=this.ssI18n.pendingLbl;
}}}$footer.append("<div title='"+status+"' class='ss-receipt-footer-status "+statusCss+"'>"+status+"</div>");
for(btnCnt=0;
btnCnt<buttonArr.length;
btnCnt++){button=buttonArr[btnCnt];
if(button instanceof ModalButton){buttonFunc=button.getOnClickFunction();
$buttonDiv=$("<div class='ss-receipt-footer-btn-div'></div>");
$button=$("<input type='button' class='ss-receipt-footer-btn ss-receipt-footer-btn-hover'>");
$button.attr({id:button.getId(),value:button.getText(),disabled:button.isDithered()}).unbind("click").on("click",buttonFunc);
$buttonDiv.append($button);
$footer.append($buttonDiv);
}}}this.setFooter($footer);
};
SurgeryRequestReceiptBuilder.prototype.build=function(){var cnt;
var $receiptDom=null;
var rowArr=this.getRowArr();
var $innerReceiptDom=null;
$innerReceiptDom=$("<div class='ss-receipt-inner'></div>");
for(cnt=0;
cnt<rowArr.length;
cnt++){$innerReceiptDom.append(rowArr[cnt].render());
}$receiptDom=$("<div class='ss-receipt' id='ss-receipt-"+this.getRequestId()+"'></div>");
$receiptDom.append(this.getHeader());
$receiptDom.append($innerReceiptDom);
$receiptDom.append(this.getFooter());
return $receiptDom;
};
SurgeryRequestReceiptBuilder.Row=function(index,obj){this.surgeonArr=obj.surgeonArr||"";
this.content=obj.content||[];
this.id=index;
this.isSurgRow=obj.surgeonArr?true:false;
this.ssI18n=i18n.discernabu.surgery_receipt_builder;
};
SurgeryRequestReceiptBuilder.Row.prototype.getContent=function(){return this.content;
};
SurgeryRequestReceiptBuilder.Row.prototype.setContent=function(obj){this.content=obj;
};
SurgeryRequestReceiptBuilder.Row.prototype.getSurgeonArr=function(){return this.surgeonArr;
};
SurgeryRequestReceiptBuilder.Row.prototype.setSurgeonArr=function(arr){this.surgeonArr=arr;
};
SurgeryRequestReceiptBuilder.Row.prototype.getId=function(){return this.id;
};
SurgeryRequestReceiptBuilder.Row.prototype.setId=function(id){this.id=id;
};
SurgeryRequestReceiptBuilder.Row.prototype.getIsSurgRow=function(){return this.isSurgRow;
};
SurgeryRequestReceiptBuilder.Row.prototype.render=function(){var surgeonCnt,detailCnt;
var surgeonArr=this.getSurgeonArr();
var detailArr=this.getContent();
var layoutHtml="";
var surgNameHtml="";
var surgNameTitle="";
var surgName=this.ssI18n.noSurgLbl;
if(this.getIsSurgRow()){for(surgeonCnt=0;
surgeonCnt<surgeonArr.length;
surgeonCnt++){surgName=(parseInt(surgeonArr[surgeonCnt].id,10)===0)?this.ssI18n.noSurgLbl:("<span class='name'>"+surgeonArr[surgeonCnt].name+" </span><span class='position'>("+surgeonArr[surgeonCnt].type+")</span>");
if(surgeonArr[surgeonCnt].id!==null){if(surgeonCnt===0){surgNameHtml+="<span class='primary-surg-name' surgId='"+surgeonArr[surgeonCnt].id+"'>"+surgName+"</span>";
surgNameTitle+=surgeonArr[surgeonCnt].name+" ("+surgeonArr[surgeonCnt].type+")";
}else{surgNameHtml+="<span surgId='"+surgeonArr[surgeonCnt].id+"'><span class='name'>; "+surgeonArr[surgeonCnt].name+" </span><span class='position'>("+surgeonArr[surgeonCnt].type+")</span></span>";
surgNameTitle+="; "+surgeonArr[surgeonCnt].name+" ("+surgeonArr[surgeonCnt].type+")";
}}}layoutHtml+="<div class='ss-receipt-row' id='ss-receipt-row-"+this.getId()+"'><div class='ss-receipt-row-hdr' title='"+surgNameTitle+"'>"+surgNameHtml+"</div>";
for(detailCnt=0;
detailCnt<detailArr.length;
detailCnt++){layoutHtml+=this.createProcedure(detailArr[detailCnt]);
}}else{layoutHtml+="<div class='ss-receipt-row-details'>";
for(detailCnt=0;
detailCnt<detailArr.length;
detailCnt++){layoutHtml+=this.createDetails(detailArr[detailCnt]);
}layoutHtml+="</div>";
}return layoutHtml;
};
SurgeryRequestReceiptBuilder.Row.prototype.createProcedure=function(proc){var layoutHtml="";
var primHtml="";
var modifiersHtml="";
var modifierNameTitle="";
var modifierI18n=this.ssI18n.modifierLbl;
var detailsI18n=this.ssI18n.detailsLbl;
var primaryI18n=this.ssI18n.primaryLbl;
var cancelledMsgI18n="";
var modifiers=proc.modifiers;
var noModifer="";
var details=proc.details||"--";
var modifierComma=true;
var procName=proc.name||this.ssI18n.noProcLbl;
var modifierCnt=0;
layoutHtml+="<div class='ss-receipt-row-proc'>";
if(proc.isPrimary&&proc.name){primHtml+="<div class='ss-receipt-primary-label'>"+primaryI18n+"</div>";
}if(proc.isCancelled.toLowerCase()==="canceled"){cancelledMsgI18n=this.ssI18n.cancelledMsgI18n;
layoutHtml+="<div class='ss-receipt-row-proc-name id='"+proc.id+"'><div class='label' title='"+procName+" "+cancelledMsgI18n+"'><div class='ss-receipt-proc-cancel ss-receipt-proc-cancel-strike'>"+procName+"</div><div class='ss-receipt-proc-cancel'>* "+cancelledMsgI18n+"</div></div>"+primHtml+"</div>";
}else{layoutHtml+="<div class='ss-receipt-row-proc-name id='"+proc.id+"'><div class='label' title='"+procName+"'>"+procName+" "+cancelledMsgI18n+"</div>"+primHtml+"</div>";
for(modifierCnt=0;
modifierCnt<modifiers.length;
modifierCnt++){if(modifierComma===true){modifiersHtml+="<div class='modifier-Item' id='"+modifiers[modifierCnt].codeValue+"'>"+modifiers[modifierCnt].display+"</div>";
modifierNameTitle+=modifiers[modifierCnt].display;
}else{modifiersHtml+="<div class='modifier-Item' id='"+modifiers[modifierCnt].codeValue+"'>; "+modifiers[modifierCnt].display+"</div>";
modifierNameTitle+="; "+modifiers[modifierCnt].display;
}modifierComma=false;
}noModifer=(modifiers.length===0)?"--":"";
layoutHtml+="<div class='ss-receipt-row-proc-field ss-receipt-row-proc-mod' title='"+modifierNameTitle+"'><div class='label'><span>"+modifierI18n+":</span></div><div class='item'>"+noModifer+modifiersHtml+"</div></div>";
layoutHtml+="<div class='ss-receipt-row-proc-field ss-receipt-row-proc-detail'><div class='label'><span>"+detailsI18n+": </span></div>";
layoutHtml+="<div class='item' title='"+details+"'>"+details+"</div></div>";
}layoutHtml+="</div>";
return layoutHtml;
};
SurgeryRequestReceiptBuilder.Row.prototype.createDetails=function(detail){var layoutHtml="";
var durationI18n=this.ssI18n.durationLbl;
var patientTypeI18n=this.ssI18n.patientTypeLbl;
var instrI18n=this.ssI18n.instrLbl;
var powerPlanI18n=this.ssI18n.powerPlanLbl;
var anesthesiaI18n=this.ssI18n.anesthesiaLbl;
var powerplanCnt=0;
var anesthesia=detail.anesthesia.display||"--";
var patientType=detail.patientType||"--";
var duration=detail.duration||"--";
var instruction=detail.instruction||"--";
var powerPlan=(detail.powerplans.length)?"":"--";
if(detail.deferToAnesthesia){anesthesia=this.ssI18n.deferToAnesthLbl;
}layoutHtml+="<div class='ss-receipt-row-detail-dura ss-receipt-row-proc-field'><div class='label'><span>"+durationI18n+": </span></div><div class='item' title='"+duration+"'>"+duration+"</div></div>";
layoutHtml+="<div class='ss-receipt-row-detail-patType ss-receipt-row-proc-field'><div class='label'><span>"+patientTypeI18n+": </span></div><div class='item' title='"+patientType+"'>"+patientType+"</div></div>";
layoutHtml+="<div class='ss-receipt-row-detail-anesthesiologist ss-receipt-row-proc-field'><div class='label'><span>"+anesthesiaI18n+": </span></div><div class='item' title='"+anesthesia+"'>"+anesthesia+"</div></div>";
layoutHtml+="<div class='ss-receipt-row-detail-instr ss-receipt-row-proc-field'><div class='label'><span>"+instrI18n+": </span></div><div class='item' title='"+instruction+"'>"+instruction+"</div></div>";
layoutHtml+="<div class='ss-receipt-row-detail-powerPlan ss-receipt-row-proc-field'><div class='label'><span>"+powerPlanI18n+": </span></div>";
layoutHtml+="<div class='power-Plan-Blck'>"+powerPlan;
for(powerplanCnt=0;
powerplanCnt<detail.powerplans.length;
powerplanCnt++){layoutHtml+="<div class='item' id='"+detail.powerplans[powerplanCnt].synId+"' title='"+detail.powerplans[powerplanCnt].orderName+"'><div class='icon'></div>"+detail.powerplans[powerplanCnt].orderName+"</div>";
}layoutHtml+="</div></div>";
return layoutHtml;
};

function SurgeryRequestStyle(){this.initByNamespace("sr");
}SurgeryRequestStyle.prototype=new ComponentStyle();
SurgeryRequestStyle.prototype.constructor=ComponentStyle;
function SurgeryRequest(criterion){this.setCriterion(criterion);
this.setStyles(new SurgeryRequestStyle());
this.controller=new SurgeryRequestController();
this.dateArr=[];
this.receiptArr=[];
this.showCancelledItems=false;
this.srwfI18n=i18n.discernabu.surgery_request;
this.srReceiptI18n=i18n.discernabu.surgery_receipt_builder;
this.sdwfI18n=i18n.discernabu.surgery_details;
this.setComponentLoadTimerName("USR:MPG.SURGERYREQUEST.O2 - load component");
this.setComponentRenderTimerName("ENG:MPG.SURGERYREQUEST.O2 - render component");
this.setPlusAddCustomInd(true);
this.surgeryFavShowInd=null;
this.surgFavsArr=[];
this.preRegPref=true;
this.infoNotifyObj=null;
}SurgeryRequest.prototype=new MPageComponent();
SurgeryRequest.prototype.constructor=MPageComponent;
MP_Util.setObjectDefinitionMapping("WF_SR",SurgeryRequest);
SurgeryRequest.prototype.setSurgeryFavList=function(surgFavsArr){surgFavsArr=(!surgFavsArr)?[]:surgFavsArr;
this.surgFavsArr=surgFavsArr;
};
SurgeryRequest.prototype.getSurgeryFavList=function(){return this.surgFavsArr;
};
SurgeryRequest.prototype.setSurgeryFavShowInd=function(surgeryFavShowInd){this.surgeryFavShowInd=surgeryFavShowInd;
};
SurgeryRequest.prototype.getSurgeryFavShowInd=function(){return this.surgeryFavShowInd;
};
SurgeryRequest.prototype.loadFilterMappings=function(){this.addFilterMappingObject("WF_SR_SURG_ROLE",{setFunction:this.setSubCompFilters,type:"ARRAY",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("WF_SR_PRE_REG",{setFunction:this.setPreRegPref,type:"BOOLEAN",field:"FTXT"});
};
SurgeryRequest.prototype.setPreRegPref=function(preRegPref){this.preRegPref=preRegPref;
};
SurgeryRequest.prototype.getPreRegPref=function(){return this.preRegPref;
};
SurgeryRequest.prototype.setRecordData=function(recordData){this.recordData=recordData;
};
SurgeryRequest.prototype.getRecordData=function(){return this.recordData;
};
SurgeryRequest.prototype.getInfoNotifyObj=function(){this.infoNotifyObj=new MPageUI.AlertBanner();
this.infoNotifyObj.setType(MPageUI.ALERT_OPTIONS.TYPE.INFO);
this.infoNotifyObj.setDismissible(true);
return this.infoNotifyObj;
};
SurgeryRequest.prototype.setSubCompFilters=function(surgRoles){this.controller.setTabBedrockFilter(SurgeryRequestController.bedrockTabMapping.WF_SR_SURG_ROLE,"WF_SR_SURG_ROLE",surgRoles);
};
SurgeryRequest.prototype.refreshComponent=function(){this.dateArr=[];
this.receiptArr=[];
this.surgFavsArr=[];
MPageComponent.prototype.refreshComponent.call(this);
};
SurgeryRequest.prototype.retrieveComponentData=function(){var sendArr=[];
var lookBackMonth=6;
var unit=4;
var params=""+parseInt(this.criterion.person_id,10)+".0,"+lookBackMonth+","+unit;
sendArr.push("^MINE^",params);
MP_Core.XMLCclRequestWrapper(this,"mp_get_surg_req",sendArr,true);
};
SurgeryRequest.prototype.preProcessing=function(){var showCancelLbl=this.srwfI18n.showCancelled;
var compMenu=this.getMenu();
var compId=this.getComponentId();
var showCancelItems;
var showSurgeryFavMenuItem;
if(compMenu){showCancelItems=new MenuSelection("sr-show-cancelled-items"+compId);
showCancelItems.setLabel(showCancelLbl);
compMenu.addMenuItem(showCancelItems);
showSurgeryFavMenuItem=new MenuSelection("sr-show-favorites-column"+compId);
showSurgeryFavMenuItem.setLabel(this.srwfI18n.showSurgeryFav);
compMenu.addMenuItem(showSurgeryFavMenuItem);
}};
SurgeryRequest.prototype.renderComponent=function(recordData){var layoutHtml="";
var rootNode=null;
var namespace=null;
var plus=null;
var compId=this.getComponentId();
var recordCnt=0;
var slaTimer=MP_Util.CreateTimer("USR:MPG.SURGERYREQUEST.O2 - Version Control","MPage 5.7");
var surgeryFavShowInd=recordData.SURG_FAV_IND==="1";
try{if(slaTimer){slaTimer.Stop();
}this.setSurgeryFavShowInd(surgeryFavShowInd);
this.setSurgeryFavList(recordData.SURG_FAV);
this.setRecordData(recordData);
for(recordCnt=0;
recordCnt<recordData.SAVED_SURG_REQ.length;
recordCnt++){this.formatData(recordData.SAVED_SURG_REQ[recordCnt],true);
}for(recordCnt=0;
recordCnt<recordData.SURG_REQ.length;
recordCnt++){this.formatData(recordData.SURG_REQ[recordCnt]);
}layoutHtml+="<div id = 'surgReqNotify"+compId+"'></div>";
layoutHtml+="<div class='surgery-request-content' id='surgery-request-"+compId+"'></div>";
MP_Util.Doc.FinalizeComponent(layoutHtml,this,"");
rootNode=this.getRootComponentNode();
namespace=this.getStyles().getNameSpace();
plus=$(rootNode).find("#"+namespace+"Add")[0];
this.createContent();
$(plus).unbind("click").on("click",{self:this,compId:compId},this.addNewReceiptClick);
}catch(err){throw (err);
}};
SurgeryRequest.prototype.preloadComponent=function(surgReq,isSavedReq){var compId=this.getComponentId();
var slaTimer=MP_Util.CreateTimer("USR:MPG.SURGERYREQUEST.O2 - Launch Workflow");
var staffResource=[];
var locResource={};
var procResource={};
var planResource=[];
var detailsResource={};
var surgOrderInstance,proc,procCnt,modCnt,plan,procGroup,procArr,staffArr,staffCnt,staff,count,primaryInd;
var primaryIndex=-1;
if(slaTimer){slaTimer.Stop();
}this.controller.setParentComp(this);
this.controller.setBaseCompId(compId);
this.controller.setPreloadMode(true);
this.controller.setId("SURGREQ"+compId);
this.controller.init();
if(isSavedReq){this.controller.setSharedResource("surgReq",surgReq.SURG_REQ_ID);
}for(count=0;
count<surgReq.PROCEDURE_GROUP.length;
count++){procGroup=surgReq.PROCEDURE_GROUP[count];
procArr=[];
staffArr=[];
for(procCnt=0;
procCnt<procGroup.PROCEDURE.length;
procCnt++){proc=procGroup.PROCEDURE[procCnt];
if(!proc.PROC_SYNONYM_ID){continue;
}surgOrderInstance=new SurgeryOrders.Order("PROC",proc.PROC_SYNONYM_ID,proc.PROC_SYNONYM_NAME);
surgOrderInstance.setDetails(proc.PROCEDURE_DETAILS);
primaryInd=proc.PRIMARY_PROCEDURE_IND===1;
if(primaryIndex<0){primaryIndex=(proc.PRIMARY_PROCEDURE_IND===1)?procCnt:-1;
}surgOrderInstance.setIsPrimary(primaryInd);
for(modCnt=0;
modCnt<proc.MODIFIER.length;
modCnt++){surgOrderInstance.addModifier({display:proc.MODIFIER[modCnt].MODIFIER_DISP,codeValue:proc.MODIFIER[modCnt].MODIFIER_CD});
}surgOrderInstance.setCleanupTime(proc.PROC_CLEANUP_TIME);
surgOrderInstance.setSetupTime(proc.PROC_SETUP_TIME);
surgOrderInstance.setProcDuration(proc.PROC_DUR_TIME);
procArr.push(surgOrderInstance);
}procResource[procGroup.STAFF[0].PRSNL_ID]=procArr;
for(staffCnt=0;
staffCnt<procGroup.STAFF.length;
staffCnt++){staff=procGroup.STAFF[staffCnt];
if(!staff.PRSNL_ID){continue;
}staffArr.push({id:staff.PRSNL_ID,name:staff.PRSNL_NAME_FULL_FORMATTED,type:staff.STAFF_ROLE_DISP,typeId:staff.STAFF_ROLE_CD});
}if(procResource[procGroup.STAFF[0].PRSNL_ID]&&(procResource[procGroup.STAFF[0].PRSNL_ID].length>0)&&(primaryIndex>=0)&&procResource[procGroup.STAFF[0].PRSNL_ID][primaryIndex].getIsPrimary()){staffResource.unshift({staffTeams:staffArr,staffCommType:null});
primaryIndex=-1;
}else{staffResource.push({staffTeams:staffArr,staffCommType:null});
}}this.controller.setSharedResource("staff",staffResource);
this.controller.setSharedResource("procedures",procResource);
if(surgReq.LOCATION_CD&&surgReq.FACILITY_CD){locResource.facilityId=surgReq.FACILITY_CD;
locResource.facilityName=surgReq.FACILITY_DISP;
locResource.locationCd=surgReq.LOCATION_CD;
locResource.locationName=surgReq.LOCATION_DISP;
}this.controller.setSharedResource("location",locResource);
for(count=0;
count<surgReq.PLANS.length;
count++){plan=surgReq.PLANS[count];
if(!plan.SYNID){continue;
}surgOrderInstance=new SurgeryOrders.Order("PP",plan.SYNID,plan.ORDERNAME);
surgOrderInstance.setSynFavId(plan.SYNFAVID);
planResource.push(surgOrderInstance);
}this.controller.setSharedResource("powerPlans",planResource);
detailsResource.anesthesia={codeValue:surgReq.ANESTHESIA_CD,display:surgReq.ANESTHESIA_DISP};
detailsResource.blockTimeInd=surgReq.BLOCK_TIME_IND;
detailsResource.concurrentInd=surgReq.CONCURRENT_PROC_IND;
detailsResource.dateRequest={enDate:surgReq.REQ_END_DT_TM,startData:surgReq.REQ_START_DT_TM};
detailsResource.deferToAnesthesia=surgReq.DEFER_ANESTHESIA_IND;
detailsResource.anesthesia={codeValue:surgReq.ANESTHESIA_CD,display:surgReq.ANESTHESIA_DISP};
detailsResource.patientType={codeValue:surgReq.PATIENT_TYPE_CD,display:surgReq.PATIENT_TYPE_DISP};
detailsResource.staffInstruction=surgReq.STAFF_SPECIAL_INSTRUCTIONS;
detailsResource.timeframe={codeValue:surgReq.TIMEFRAME_CD,display:surgReq.TIMEFRAME_DISP};
this.controller.setSharedResource("details",detailsResource);
document.activeElement.blur();
};
SurgeryRequest.prototype.addNewReceiptClick=function(event){var self=event.data.self;
var compId=event.data.compId;
var slaTimer=MP_Util.CreateTimer("USR:MPG.SURGERYREQUEST.O2 - Launch Workflow");
if(slaTimer){slaTimer.Stop();
}self.controller.setParentComp(self);
self.controller.setBaseCompId(compId);
self.controller.setPreloadMode(false);
self.controller.setId("SURGREQ"+compId);
self.controller.init();
document.activeElement.blur();
};
SurgeryRequest.prototype.handleSurgFavSearch=function(searchVal){var $compFavContent=$("#surgery-request-"+this.getComponentId()).find(".sr-favorites-content");
var surgFavsArr=this.getSurgeryFavList();
var surgFavCnt;
var $surgFavRowText;
searchVal=searchVal.toLowerCase();
$compFavContent.find(".sr-fav-row").show();
for(surgFavCnt=0;
surgFavCnt<surgFavsArr.length;
surgFavCnt++){$surgFavRowText=$compFavContent.find("#"+surgFavsArr[surgFavCnt].SURG_REQ_ID+" .sr-favorite-row-text");
if((surgFavsArr[surgFavCnt].SURG_FAV_DISPLAY).toLowerCase().indexOf(searchVal)===-1){$surgFavRowText.parent().hide();
}}};
SurgeryRequest.prototype.setMenuItemEvents=function(compMenuItem){var surgeryFavShowInd=this.getSurgeryFavShowInd();
var compId=this.getComponentId();
var showSurgeryFavMenulabel=this.srwfI18n.showSurgeryFav;
var $component=$("#surgery-request-"+this.getComponentId());
var self=this;
if(compMenuItem.m_menuItemId===("sr-show-cancelled-items"+compId)){compMenuItem.setClickFunction(function(){if(!self.getShowCancelledItems()){self.setShowCancelledItems(true);
compMenuItem.setIsSelected(true);
}else{self.setShowCancelledItems(false);
compMenuItem.setIsSelected(false);
}self.createContent();
});
}else{if(compMenuItem.m_menuItemId===("sr-show-favorites-column"+compId)){compMenuItem.setLabel(showSurgeryFavMenulabel);
compMenuItem.setIsSelected(surgeryFavShowInd);
compMenuItem.setClickFunction(function(){surgeryFavShowInd=self.getSurgeryFavShowInd();
if(surgeryFavShowInd===false){$component.find(".sr-empty-content").toggleClass("sr-column-width-toggle");
$component.find(".sr-receipts-right-column").toggleClass("sr-column-width-toggle");
$component.find(".sr-favorites-left-column").show();
surgeryFavShowInd=true;
}else{$component.find(".sr-favorites-left-column").hide();
$component.find(".sr-empty-content").toggleClass("sr-column-width-toggle");
$component.find(".sr-receipts-right-column").toggleClass("sr-column-width-toggle");
surgeryFavShowInd=false;
}compMenuItem.setIsSelected(surgeryFavShowInd);
self.setSurgeryFavShowInd(surgeryFavShowInd);
self.writeSurgReqPrefs(surgeryFavShowInd);
});
}}};
SurgeryRequest.prototype.postProcessor=function(){var $component=$("#surgery-request-"+this.getComponentId());
var noReceiptI18n=this.srwfI18n.emptyMsgLbl;
var addSurgI18n=this.srwfI18n.addSurgLbl;
var self=this;
var compMenu=this.getMenu();
var compId=this.getComponentId();
var addNewReceipt;
var menuCnt;
for(menuCnt=0;
menuCnt<compMenu.m_menuItemArr.length;
menuCnt++){self.setMenuItemEvents(compMenu.m_menuItemArr[menuCnt]);
}$component.find(".sr-favorites-left-column").on("keyup",".sr-search-input",function(){var searchVal=$(this).val();
self.handleSurgFavSearch(searchVal);
});
$component.find(".sr-nav-items").on("click","li",{self:this},this.scrollReceipt);
$($component.find(".sr-nav-items li")[0]).addClass("sr-selected");
$($component.find(".sr-receipts-pane div")[0]).addClass("sr-selected");
if(this.isPlusAddEnabled()){addNewReceipt=$("<span class='sr-add-receipt'> "+addSurgI18n+".</span>").on("click",{self:self,compId:compId},this.addNewReceiptClick);
}$component.find(".sr-empty-receipt-msg").append("<span class='sr-no-receipt'>"+noReceiptI18n+".</span>").append(addNewReceipt);
$component.find(".sr-date-nav-bar").serialScroll({target:$component.find(".sr-nav-items"),items:$component.find(".sr-nav-items li"),prev:$component.find("div.sr-nav-left"),next:$component.find("div.sr-nav-right"),axis:"xy",duration:600,force:true,cycle:false,step:8,onBefore:function(e){e.preventDefault();
if(this.blur){this.blur();
}},onAfter:function(){}});
$component.find(".sr-favorites-remove").on("click",{self:self},self.addFavRemovalEvents);
$component.find(".sr-favorites-open-button").on("click",{self:self},function(){var request=new MP_Core.ScriptRequest(this);
var userID=parseInt(self.criterion.person_id,10);
var favId=parseInt($(this).closest(".sr-fav-row").attr("id"),10);
var sendAr=[];
request.setProgramName("MP_GET_SURG_REQ_FAV");
sendAr.push("^MINE^",userID+".0",favId+".0");
request.setParameters(sendAr);
request.setAsync(true);
MP_Core.XMLCCLRequestCallBack("",request,function(scriptReply){var recordData=scriptReply.getResponse();
self.preloadComponent(recordData.SURG_REQ,false);
});
});
};
SurgeryRequest.prototype.prepareSurgicalRequestData=function(surgeryStaff,surgeryLocation,surgeryOrders,surgeryDetails,surgeryProcedures,favoriteName,isSaved,surgReqId){var surgicalRequest={surgical_request:{}};
var surgicalRequestData=surgicalRequest.surgical_request;
var cnt=0;
var count=0;
var key;
var modCnt;
var modifierArr;
var staffGroups={};
var procGroups={};
var procedureArr=[];
var primSurgId;
var procObj={};
var dataTypeReqFlag=1;
var arrLen;
if(favoriteName||isSaved){dataTypeReqFlag=0;
}else{favoriteName="";
}surgicalRequestData.favorite_name=favoriteName;
surgicalRequestData.prsnl_id=parseInt(this.getCriterion().provider_id,10);
surgicalRequestData.person_id=parseInt(this.getCriterion().person_id,10);
surgicalRequestData.encntr_id=parseInt(this.getCriterion().encntr_id,10);
surgicalRequestData.surg_req_id=parseInt(surgReqId,10);
surgicalRequestData.anesthesia_cd=(surgeryDetails)?parseInt(surgeryDetails.anesthesia.codeValue,10):0;
surgicalRequestData.block_time_ind=(surgeryDetails)?surgeryDetails.blockTimeInd:null;
surgicalRequestData.concurrent_proc_ind=(surgeryDetails)?parseInt(surgeryDetails.concurrentInd,10):null;
surgicalRequestData.defer_anesthesia_ind=(surgeryDetails)?parseInt(surgeryDetails.deferToAnesthesia,10):0;
surgicalRequestData.facility_cd=(surgeryLocation)?parseInt(surgeryLocation.facilityId,10):0;
surgicalRequestData.location_cd=(surgeryLocation)?parseInt(surgeryLocation.locationCd,10):0;
surgicalRequestData.patient_type_cd=(surgeryDetails)?parseInt(surgeryDetails.patientType.codeValue,10):0;
surgicalRequestData.request_status_cd=(isSaved)?"INCOMPLETE":"";
surgicalRequestData.req_start_dt_tm=(surgeryDetails&&surgeryDetails.dateRequest.startDate)?JSON.stringify(new Date(surgeryDetails.dateRequest.startDate)).replace(/"/g,""):"";
surgicalRequestData.req_end_dt_tm=(surgeryDetails&&surgeryDetails.dateRequest.endDate)?JSON.stringify(new Date(surgeryDetails.dateRequest.endDate)).replace(/"/g,""):"";
surgicalRequestData.req_date_freetext="";
surgicalRequestData.timeframe_cd=(surgeryDetails)?parseInt(surgeryDetails.selectedTimeFrame.codeValue,10):0;
surgicalRequestData.date_req_type_flag=dataTypeReqFlag;
surgicalRequestData.staff_special_instructions=(surgeryDetails)?surgeryDetails.staffInstruction:"";
surgicalRequestData.plans=[];
surgicalRequestData.procedure_group=[];
arrLen=(surgeryStaff)?surgeryStaff.length:0;
for(cnt=0;
cnt<arrLen;
cnt++){primSurgId=(surgeryStaff[cnt].staffTeams[0].id)?parseInt(surgeryStaff[cnt].staffTeams[0].id,10):0;
staffGroups[primSurgId]=[];
for(count=0;
count<surgeryStaff[cnt].staffTeams.length;
count++){staffGroups[primSurgId].push({prsnl_id:parseInt(surgeryStaff[cnt].staffTeams[count].id,10)?parseInt(surgeryStaff[cnt].staffTeams[count].id,10):0,staff_role_cd:parseInt(surgeryStaff[cnt].staffTeams[count].typeId,10)});
}}for(key in surgeryProcedures){primSurgId=key;
procGroups[primSurgId]=[];
procedureArr=surgeryProcedures[key];
if(!procedureArr.length){procObj={proc_synonym_id:0,primary_procedure_ind:0,procedure_details:"",modifier:[]};
procGroups[primSurgId].push(procObj);
}for(cnt=0;
cnt<procedureArr.length;
cnt++){procObj={proc_synonym_id:parseInt(procedureArr[cnt].getSynId(),10)?parseInt(procedureArr[cnt].getSynId(),10):0,primary_procedure_ind:(procedureArr[cnt].getIsPrimary())?1:0,procedure_details:procedureArr[cnt].getDetails(),modifier:[]};
modifierArr=procedureArr[cnt].getModifiers();
for(modCnt=0;
modCnt<modifierArr.length;
modCnt++){procObj.modifier.push({modifier_cd:parseInt(modifierArr[modCnt].codeValue,10)?parseInt(modifierArr[modCnt].codeValue,10):0});
}procGroups[primSurgId].push(procObj);
procObj={};
}}for(primSurgId in staffGroups){if(staffGroups[primSurgId]){surgicalRequestData.procedure_group.push({procedure:(procGroups[primSurgId])?procGroups[primSurgId]:[{modifier:[],primary_procedure_ind:1,proc_synonym_id:0,procedure_details:""}],staff:staffGroups[primSurgId]});
}}arrLen=(surgeryOrders)?surgeryOrders.length:0;
for(cnt=0;
cnt<arrLen;
cnt++){surgicalRequestData.plans.push({pathway_catalog_id:parseInt(surgeryOrders[cnt].synId,10),pathway_customized_plan_id:parseInt(surgeryOrders[cnt].synFavId,10)});
}return surgicalRequest;
};
SurgeryRequest.prototype.saveSurgicalRequest=function(modalDialogId){var request=new MP_Core.ScriptRequest(this);
var sendAr=[];
var jsonString;
var surgStaffLoc=this.controller.getCompFromStore("tab1");
var surgOrderDetail=this.controller.getCompFromStore("tab2");
var savedData={staffLoc:(surgStaffLoc)?surgStaffLoc.storeTabData():null,orderDetails:(surgOrderDetail)?surgOrderDetail.storeTabData():null};
var surgeryStaff=(savedData.staffLoc)?savedData.staffLoc.data.staff:null;
var surgeryLocation=(savedData.staffLoc)?savedData.staffLoc.data.location:null;
var surgeryOrders=(savedData.orderDetails)?savedData.orderDetails.data.powerPlans:null;
var surgeryDetails=(savedData.orderDetails)?savedData.orderDetails.data.details:null;
var surgeryProcedures=(savedData.orderDetails)?savedData.orderDetails.data.procedures:null;
var surgeryReq=this.controller.getSharedResource("surgReq");
var modalId="vwpModalDialogsurgery"+this.controller.getId();
var self=this;
$("#"+modalId).append("<div class='sr-overlay-div'><span class='sr-img-spinner'></span></div>");
jsonString=JSON.stringify(this.prepareSurgicalRequestData(surgeryStaff,surgeryLocation,surgeryOrders,surgeryDetails,surgeryProcedures,"",true,surgeryReq)).replace(/"/g,"'");
jsonString=jsonString.replace(/:([0-9]+)/g,":$1.0");
sendAr.push("^MINE^","^"+jsonString+"^");
request.setProgramName("mp_store_surg_req");
request.setParameters(sendAr);
request.setAsync(true);
MP_Core.XMLCCLRequestCallBack(null,request,function(reply){if(reply.getStatus()!=="S"){$("#"+modalId).find(".sr-overlay-div").remove();
MP_ModalDialog.closeModalDialog(modalDialogId);
window.onerror("Error in mp_store_surg_req script","SugeryRequest.js","");
return;
}else{MP_ModalDialog.closeModalDialog(modalDialogId);
self.refreshComponent();
$("#"+modalId).find(".sr-overlay-div").remove();
}});
};
SurgeryRequest.prototype.processSurgicalRequest=function(modalDialogId,favoriteName){var surgeryStaff=this.controller.getSharedResource("staff");
var surgeryLocation=this.controller.getSharedResource("location");
var surgeryOrders=this.controller.getSharedResource("powerPlans");
var surgeryDetails=this.controller.getSharedResource("details");
var surgeryProcedures=this.controller.getSharedResource("procedures");
var procObj={};
var replyProcObj={};
var request=new MP_Core.ScriptRequest(this);
var sendAr=[];
var jsonString;
var self=this;
var recordData;
var arrLen;
var modalId="vwpModalDialogsurgery"+this.controller.getId();
var slaTimer=MP_Util.CreateTimer("USR:MPG.SURGERYREQUEST.O2 - Send Request");
var surgicalRequest;
var cnt;
var count;
if(slaTimer){slaTimer.Stop();
}$("#"+modalId).append("<div class='sr-overlay-div'><span class='sr-img-spinner'></span></div>");
surgicalRequest=this.prepareSurgicalRequestData(surgeryStaff,surgeryLocation,surgeryOrders,surgeryDetails,surgeryProcedures,favoriteName,false,0);
jsonString=JSON.stringify(surgicalRequest).replace(/"/g,"'");
jsonString=jsonString.replace(/:([0-9]+)/g,":$1.0");
sendAr.push("^MINE^","^"+jsonString+"^");
request.setProgramName("mp_store_surg_req");
request.setParameters(sendAr);
request.setAsync(true);
MP_Core.XMLCCLRequestCallBack(null,request,function(reply){recordData=reply.getResponse();
if(reply.getStatus()!=="S"){$("#"+modalId).find(".sr-overlay-div").remove();
MP_ModalDialog.closeModalDialog(modalDialogId);
window.onerror("Error in mp_store_surg_req script","SugeryRequest.js","");
return;
}if(recordData.SURG_FAV_IND===0){arrLen=surgicalRequest.surgical_request.procedure_group.length;
for(cnt=0;
cnt<arrLen;
cnt++){procObj=surgicalRequest.surgical_request.procedure_group[cnt].procedure;
replyProcObj=recordData.PROCEDURE_GROUP[cnt].PROCEDURE;
for(count=0;
count<procObj.length;
count++){procObj[count].surgProcId=replyProcObj[count].SURG_REQ_PROC_ID;
}surgicalRequest.surgical_request.procedure_group[cnt].procedure=procObj;
procObj=[];
replyProcObj=[];
}self.submitOrders(surgicalRequest.surgical_request.procedure_group,modalDialogId,recordData.SURG_REQ_ID);
}});
};
SurgeryRequest.prototype.submitOrders=function(procedureGrp,modalDialogId,surgReqId){var surgeryStaff=this.controller.getSharedResource("staff");
var surgeryLocation=this.controller.getSharedResource("location");
var surgeryDetails=this.controller.getSharedResource("details");
var surgeryProcedures=this.controller.getSharedResource("procedures");
var ordersObj={orders:{}};
var dataArr=[];
var dataArrLen=0;
var cnt=0;
var staffGroups={};
var procDetailObj={};
var modifierArr=[];
var self=this;
var request=new MP_Core.ScriptRequest(this);
var sendAr=[];
var jsonString="";
var criterion=this.getCriterion();
var procCount=0;
var procedureArr=[];
var primarySurgId=0;
ordersObj.orders.ordersList=[];
function evaluateModifiers(modArr){var modifierCollection={modifier1:"",modifier1Cd:0,modifier2:"",modifier2Cd:0,modifier3:"",modifier3Cd:0};
var count=1;
for(count=1;
count<=modArr.length;
count++){modifierCollection["modifier"+count]=modArr[count-1].display;
modifierCollection["modifier"+count+"Cd"]=parseInt(modArr[count-1].codeValue,10);
}return modifierCollection;
}if(surgeryStaff){dataArr=surgeryStaff;
dataArrLen=dataArr.length;
for(cnt=0;
cnt<dataArrLen;
cnt++){staffGroups[dataArr[cnt].staffTeams[0].id]={staffCommType:(dataArr[cnt].staffCommType.codeValue)?parseInt(dataArr[cnt].staffCommType.codeValue,10):0,primarySurgeonId:parseInt(dataArr[cnt].staffTeams[0].id,10),primarySurgeon:dataArr[cnt].staffTeams[0].name,firstAssistantId:(dataArr[cnt].staffTeams[1])?parseInt(dataArr[cnt].staffTeams[1].id,10):0,firstAssistant:(dataArr[cnt].staffTeams[1])?dataArr[cnt].staffTeams[1].name:"",secondAssistantId:(dataArr[cnt].staffTeams[2])?parseInt(dataArr[cnt].staffTeams[2].id,10):0,secondAssistant:(dataArr[cnt].staffTeams[2])?dataArr[cnt].staffTeams[2].name:"",thirdAssistantId:(dataArr[cnt].staffTeams[3])?parseInt(dataArr[cnt].staffTeams[3].id,10):0,thirdAssistant:(dataArr[cnt].staffTeams[3])?dataArr[cnt].staffTeams[3].name:"",fourthAssistantId:(dataArr[cnt].staffTeams[4])?parseInt(dataArr[cnt].staffTeams[4].id,10):0,fourthAssistant:(dataArr[cnt].staffTeams[4])?dataArr[cnt].staffTeams[4].name:""};
}}if(surgeryLocation){ordersObj.orders.facilityCd=parseInt(surgeryLocation.facilityId,10);
ordersObj.orders.surgicalLocationCd=parseInt(surgeryLocation.locationCd,10);
ordersObj.orders.surgicalLocation=surgeryLocation.locationName;
}if(surgeryDetails){ordersObj.orders.patientType=surgeryDetails.patientType.display;
ordersObj.orders.patientTypeCd=parseInt(surgeryDetails.patientType.codeValue,10);
ordersObj.orders.anesthesiaType=surgeryDetails.anesthesia.display;
ordersObj.orders.anesthesiaTypeCd=parseInt(surgeryDetails.anesthesia.codeValue,10);
ordersObj.orders.instToStaff=surgeryDetails.staffInstruction;
ordersObj.orders.isConcurrent=parseInt(surgeryDetails.concurrentInd,10);
ordersObj.orders.isNextAvailable=parseInt(surgeryDetails.isNextAvailable,10);
if(surgeryDetails.dateRequest){ordersObj.orders.surgStartDate=(surgeryDetails.dateRequest.startDate)?JSON.stringify(new Date(surgeryDetails.dateRequest.startDate)).replace(/"/g,""):"";
ordersObj.orders.surgEndDate=(surgeryDetails.dateRequest.endDate)?JSON.stringify(new Date(surgeryDetails.dateRequest.endDate)).replace(/"/g,""):"";
}else{ordersObj.orders.surgStartDate="";
ordersObj.orders.surgEndDate="";
}}if(surgeryProcedures){for(cnt=0;
cnt<procedureGrp.length;
cnt++){primarySurgId=procedureGrp[cnt].staff[0].prsnl_id;
procedureArr=surgeryProcedures[primarySurgId];
for(procCount=0;
procCount<procedureArr.length;
procCount++){procDetailObj={orderSynonymId:parseInt(procedureArr[procCount].getSynId(),10),isPrimary:(procedureArr[procCount].getIsPrimary())?1:0,procDetails:procedureArr[procCount].getDetails(),procName:procedureArr[procCount].getSynName(),surgProcId:parseInt(procedureGrp[cnt].procedure[procCount].surgProcId,10),surgProcDuration:parseInt(procedureArr[procCount].getProcDuration(),10),surgSetupTime:parseInt(procedureArr[procCount].getSetupTime(),10),surgCleanTime:parseInt(procedureArr[procCount].getCleanupTime(),10)};
modifierArr=evaluateModifiers(procedureArr[procCount].getModifiers());
$.extend(true,procDetailObj,staffGroups[primarySurgId],modifierArr);
ordersObj.orders.ordersList.push(procDetailObj);
procDetailObj={};
}}}jsonString=JSON.stringify(ordersObj).replace(/"/g,"'");
jsonString=jsonString.replace(/:([0-9]+)/g,":$1.0");
sendAr.push("^MINE^",criterion.person_id+".0","^"+jsonString+"^",criterion.provider_id+".0",criterion.position_cd+".0",(this.getPreRegPref())?"1":"0");
request.setProgramName("mp_surg_submit_orders");
request.setParameters(sendAr);
request.setAsync(true);
MP_Core.XMLCCLRequestCallBack(null,request,function(recordData){self.handleSubmitOrderResponse(recordData,modalDialogId,surgReqId);
});
};
SurgeryRequest.prototype.handleSubmitOrderResponse=function(recordData,modalDialogId,surgReqId){var surgeryOrders=this.controller.getSharedResource("powerPlans");
var savedSurgReqId=this.controller.getSharedResource("surgReq");
var powerOrdersMPageUtils;
var signOrderSuccess;
var modalId="vwpModalDialogsurgery"+this.controller.getId();
var slaTimerOrder;
var slaTimerPPStart;
var slaTimerPPEnd;
var cnt;
var hasPowerplans=surgeryOrders.length>0;
var status=recordData.getStatus();
var response=recordData.getResponse();
var encntrId;
var request=new ScriptRequest();
if(status!=="S"){if(hasPowerplans){this.removePlansFromRequest(surgReqId);
}$("#"+modalId).find(".sr-overlay-div").remove();
MP_ModalDialog.closeModalDialog(modalDialogId);
window.onerror("Error in mp_surg_submit_orders script","SugeryRequest.js","");
return;
}if((status==="S")&&savedSurgReqId){request.setProgramName("MP_SURG_REQ_DELETE_FAV");
request.setParameterArray(["^MINE^",parseInt(savedSurgReqId,10)+".0"]);
request.setAsyncIndicator(true);
request.setResponseHandler(function(){});
request.performRequest();
}if((status==="S")&&hasPowerplans){powerOrdersMPageUtils=CERN_Platform.getDiscernObject("MOEWEXECUTOR");
if(powerOrdersMPageUtils){slaTimerPPStart=MP_Util.CreateTimer("USR:MPG.SURGERYREQUEST.O2 - Powerplan Start");
if(slaTimerPPStart){slaTimerPPStart.Stop();
}encntrId=(this.getPreRegPref())?response.ENCNTR_ID:this.getCriterion().encntr_id;
powerOrdersMPageUtils.SetMOEWContext(this.getCriterion().person_id,encntrId,24,2,127);
powerOrdersMPageUtils.AddMOEWCustomization(2,127);
powerOrdersMPageUtils.AddMOEWCustomization(3,127);
for(cnt=0;
cnt<surgeryOrders.length;
cnt++){powerOrdersMPageUtils.AddMOEWPowerPlan(parseFloat(parseInt(surgeryOrders[cnt].getSynId(),10)+".0"),parseFloat(parseInt(surgeryOrders[cnt].getSynFavId(),10)+".0"));
}signOrderSuccess=powerOrdersMPageUtils.SignOrders();
slaTimerPPEnd=MP_Util.CreateTimer("USR:MPG.SURGERYREQUEST.O2 - Powerplan Stop");
if(slaTimerPPEnd){slaTimerPPEnd.Stop();
}if(!signOrderSuccess){this.removePlansFromRequest(surgReqId);
logger.logError("Failure in powerplan win32 signoff");
}}else{this.removePlansFromRequest(surgReqId);
}}$("#"+modalId).find(".sr-overlay-div").remove();
MP_ModalDialog.closeModalDialog(modalDialogId);
slaTimerOrder=MP_Util.CreateTimer("USR:MPG.SURGERYREQUEST.O2 - Order Complete");
if(slaTimerOrder){slaTimerOrder.Stop();
}};
SurgeryRequest.prototype.removePlansFromRequest=function(surgReqId){var scriptRequest=new ScriptRequest();
scriptRequest.setProgramName("MP_SURG_DEL_PLAN");
scriptRequest.setParameterArray(["^MINE^",parseInt(surgReqId,10)+".0"]);
scriptRequest.setResponseHandler(function(){});
scriptRequest.performRequest();
};
SurgeryRequest.prototype.writeSurgReqPrefs=function(surgeryFavShowInd){var criterion=this.getCriterion();
var cclParam=[];
var scriptRequest=new ScriptRequest();
var viewpointNameKey="SURGERY_REQUEST_FAV_IND";
var surgeryFavShowIndString;
var self=this;
surgeryFavShowIndString=surgeryFavShowInd===false?"0":"1";
cclParam.push("^mine^",parseInt(criterion.provider_id,10)+".0","^"+viewpointNameKey+"^","~"+surgeryFavShowIndString+"~");
scriptRequest.setParameterArray(cclParam);
scriptRequest.setProgramName("MP_MAINTAIN_USER_PREFS");
scriptRequest.setAsyncIndicator(true);
scriptRequest.setResponseHandler(function(scriptReply){if(scriptReply.getStatus()!=="S"){logger.logScriptCallError(self,scriptRequest,"SurgeryRequest.js","writeSurgReqPrefs");
}});
scriptRequest.performRequest();
};
SurgeryRequest.prototype.setReceiptArr=function(obj){this.receiptArr.push(obj);
};
SurgeryRequest.prototype.getReceiptArr=function(){return this.receiptArr;
};
SurgeryRequest.prototype.setDateArr=function(obj){this.dateArr.push(obj);
};
SurgeryRequest.prototype.getDateArr=function(){return this.dateArr;
};
SurgeryRequest.prototype.setShowCancelledItems=function(bool){this.showCancelledItems=bool;
};
SurgeryRequest.prototype.getShowCancelledItems=function(){return this.showCancelledItems;
};
SurgeryRequest.prototype.formatData=function(receiptData,isSavedReceipt){var procGroupCnt,procGroupArr,procCnt,procArr,staffCnt,powerPlanCnt,staffArr,modifierCnt,modifierArr,startDate,endDate,surgTime="",surgDate="";
var rowArr=[];
var row={};
var modifierList=[];
var powerPlanArr=[];
var details={};
var formattedData={};
var isProcPrimary=false;
var scheduledTime;
var durationArr=[];
var modalDeleteButton="";
var modalOpenReqButton="";
var surgReqId=receiptData.SURG_REQ_ID;
var self=this;
var rootNode=this.getRootComponentNode();
var footerObj={};
var isButtonEnable=false;
if(receiptData.DATE_REQ_TYPE_FLAG===1){startDate=new Date();
endDate=new Date();
if(receiptData.REQ_START_DT_TM!==""&&receiptData.REQ_END_DT_TM===""){startDate.setISO8601(receiptData.REQ_START_DT_TM);
surgDate=this.srReceiptI18n.afterLbl+" "+startDate.format("mediumDate");
}else{if(receiptData.REQ_START_DT_TM===""&&receiptData.REQ_END_DT_TM!==""){endDate.setISO8601(receiptData.REQ_END_DT_TM);
surgDate=this.srReceiptI18n.beforeLbl+" "+endDate.format("mediumDate");
}else{if(receiptData.REQ_START_DT_TM===""&&receiptData.REQ_END_DT_TM===""){surgDate=this.srReceiptI18n.noDateLbl;
}else{startDate.setISO8601(receiptData.REQ_START_DT_TM);
endDate.setISO8601(receiptData.REQ_END_DT_TM);
surgDate=startDate.format("mediumDate")+" - "+endDate.format("mediumDate");
}}}surgTime=receiptData.BLOCK_TIME_IND===0?"":this.srwfI18n.blockTime;
}else{if(receiptData.DATE_REQ_TYPE_FLAG===0){surgTime=receiptData.BLOCK_TIME_IND===0?"":this.srwfI18n.blockTime;
surgDate=receiptData.TIMEFRAME_DISP;
}else{surgTime=receiptData.BLOCK_TIME_IND===0?"":this.srwfI18n.blockTime;
surgDate=receiptData.REQ_DATE_FREETEXT;
}}if(!receiptData.SCHEDULED_DT_TM){this.setDateArr({display:((receiptData.REQUEST_STATUS_CDF.toLowerCase()==="incomplete")&&isSavedReceipt)?this.srReceiptI18n.savedLbl:this.srReceiptI18n.pendingLbl,cancelStatus:receiptData.REQUEST_STATUS_CDF});
}else{surgDate=new Date();
scheduledTime=new Date();
surgDate.setISO8601(receiptData.SCHEDULED_DT_TM);
scheduledTime.setISO8601(receiptData.SCHEDULED_DT_TM);
this.setDateArr({display:surgDate,cancelStatus:receiptData.REQUEST_STATUS_CDF});
surgDate=surgDate.format("mediumDate");
surgTime=scheduledTime.format("shortTime");
}formattedData.header={date:surgDate,time:surgTime,location:receiptData.LOCATION_DISP,reqSurgId:surgReqId};
formattedData.cancelStatus=receiptData.REQUEST_STATUS_CDF;
details.content=[];
procGroupArr=receiptData.PROCEDURE_GROUP;
for(procGroupCnt=0;
procGroupCnt<procGroupArr.length;
procGroupCnt++){procArr=procGroupArr[procGroupCnt].PROCEDURE;
staffArr=procGroupArr[procGroupCnt].STAFF;
row={surgeonArr:[],content:[]};
for(staffCnt=0;
staffCnt<staffArr.length;
staffCnt++){row.surgeonArr[staffCnt]={name:staffArr[staffCnt].PRSNL_NAME_FULL_FORMATTED,id:staffArr[staffCnt].PRSNL_ID,type:staffArr[staffCnt].STAFF_ROLE_DISP};
}for(procCnt=0;
procCnt<procArr.length;
procCnt++){durationArr.push(procArr[procCnt].PROC_DUR_TIME);
modifierArr=procArr[procCnt].MODIFIER;
modifierList=[];
for(modifierCnt=0;
modifierCnt<modifierArr.length;
modifierCnt++){modifierList.push({display:modifierArr[modifierCnt].MODIFIER_DISP,codeValue:modifierArr[modifierCnt].MODIFIER_CD});
}if(procArr[procCnt].PRIMARY_PROCEDURE_IND){isProcPrimary=true;
row.content.unshift({id:procArr[procCnt].PROC_SYNONYM_ID,name:procArr[procCnt].PROC_SYNONYM_NAME,modifiers:modifierList,details:procArr[procCnt].PROCEDURE_DETAILS,isPrimary:procArr[procCnt].PRIMARY_PROCEDURE_IND,isCancelled:procArr[procCnt].ORDER_STATUS_CDF});
}else{row.content.push({id:procArr[procCnt].PROC_SYNONYM_ID,name:procArr[procCnt].PROC_SYNONYM_NAME,modifiers:modifierList,details:procArr[procCnt].PROCEDURE_DETAILS,isPrimary:procArr[procCnt].PRIMARY_PROCEDURE_IND,isCancelled:procArr[procCnt].ORDER_STATUS_CDF});
}}if(isProcPrimary){isProcPrimary=false;
rowArr.unshift(row);
}else{rowArr.push(row);
}}for(powerPlanCnt=0;
powerPlanCnt<receiptData.PLANS.length;
powerPlanCnt++){powerPlanArr.push({synId:receiptData.PLANS[powerPlanCnt].SYNID,orderName:receiptData.PLANS[powerPlanCnt].ORDERNAME});
}details.content.push({duration:this.updateDurationDisplay(this.getDuration(durationArr,receiptData.CONCURRENT_PROC_IND)),patientType:receiptData.PATIENT_TYPE_DISP,deferToAnesthesia:receiptData.DEFER_ANESTHESIA_IND,anesthesia:{display:receiptData.ANESTHESIA_DISP,codeValue:receiptData.ANESTHESIA_CD},instruction:receiptData.STAFF_SPECIAL_INSTRUCTIONS,powerplans:powerPlanArr});
rowArr.push(details);
formattedData.rowArr=rowArr;
if(isSavedReceipt){isButtonEnable=false;
modalOpenReqButton=new ModalButton(""+surgReqId);
modalOpenReqButton.setIsDithered(isButtonEnable).setText(this.srwfI18n.open).setOnClickFunction(function(){var savedReqId=parseInt(this.id,10);
var $openButton=$(this);
self.lockInquire(savedReqId,1,function(data){var request;
if(data.ISAVAILABLE===1){request=new ScriptRequest();
request.setProgramName("MP_GET_SURG_REQ_FAV");
request.setParameterArray(["^MINE^",parseInt(self.criterion.person_id,10)+".0",savedReqId+".0"]);
request.setAsyncIndicator(true);
request.setResponseHandler(function(scriptReply){var recordData=scriptReply.getResponse();
if(recordData.SURG_REQ.SURG_REQ_ID>0){self.preloadComponent(recordData.SURG_REQ,true);
}else{self.notifyUser(data.LOCKED_PRSNL_NAME,self.srwfI18n.requestDeleted);
$openButton.addClass("receipt-to-delete");
self.deleteRegularRequest(self,true);
}});
request.performRequest();
}else{self.notifyUser(data.LOCKED_PRSNL_NAME);
}});
});
}modalDeleteButton=new ModalButton(""+surgReqId);
modalDeleteButton.setIsDithered(isButtonEnable).setText(this.srwfI18n.deleteLbl).setOnClickFunction(function(){var confirmDialog=MP_ModalDialog.retrieveModalDialogObject("ssDeleteSurgReqDialog");
var cancelButton;
var verifyDeleteButton;
var receiptToDeleteId=parseInt(this.id,10);
$(this).addClass("receipt-to-delete");
verifyDeleteButton=new ModalButton("ssDeleteSurgReqButton");
verifyDeleteButton.setText(self.srwfI18n.deleteLbl).setOnClickFunction(function(){self.deleteRegularRequest(self,isSavedReceipt);
});
cancelButton=new ModalButton("ssSurgReqCancelButton");
cancelButton.setText(self.srwfI18n.cancelLbl).setOnClickFunction(function(){$(rootNode).find(".receipt-to-delete").removeClass("receipt-to-delete");
});
confirmDialog=new ModalDialog("ssDeleteSurgReqDialog");
confirmDialog.setHeaderTitle(self.srwfI18n.verifyDeleteHeader).setLeftMarginPercentage(35).setRightMarginPercentage(35).setTopMarginPercentage(40).setBottomMarginPercentage(40).addFooterButton(verifyDeleteButton).addFooterButton(cancelButton);
if(!confirmDialog){MP_ModalDialog.addModalDialogObject(confirmDialog);
}else{MP_ModalDialog.updateModalDialogObject(confirmDialog);
}self.lockInquire(receiptToDeleteId,3,function(data){if(data.ISAVAILABLE===1){MP_ModalDialog.showModalDialog("ssDeleteSurgReqDialog");
confirmDialog.setBodyHTML("<div class='ss-receipt-verify-warning-body'><p>"+self.srwfI18n.verifyDelete+"</p></div>");
}else{self.notifyUser(data.LOCKED_PRSNL_NAME);
}});
});
if(receiptData.SCHEDULED_DT_TM||receiptData.REQUEST_STATUS_CDF.toLowerCase()==="canceled"){modalDeleteButton="";
}footerObj={status_ind:(isSavedReceipt)?"saved":receiptData.REQUEST_STATUS_CDF.toLowerCase(),buttonArr:[modalDeleteButton,modalOpenReqButton],updtPersonName:(receiptData.UPDT_PERSON_NAME)?receiptData.UPDT_PERSON_NAME:"",updtID:(receiptData.UPDT_ID)?receiptData.UPDT_ID:"",surgCaseNbr:(receiptData.SURG_CASE_NBR)?receiptData.SURG_CASE_NBR:""};
formattedData.footer=footerObj;
this.setReceiptArr(formattedData);
};
SurgeryRequest.prototype.deleteRegularRequest=function(comp,isSavedReceipt){var rootNode=comp.getRootComponentNode();
var $deleteButton=$(rootNode).find(".receipt-to-delete");
var receiptToDeleteId=$deleteButton.attr("id");
var cancelRequest;
var programName=(isSavedReceipt)?"MP_SURG_REQ_DELETE_FAV":"MP_CANCEL_SURG_REQ";
$deleteButton.prop("disabled",true).removeClass("ss-receipt-footer-btn-hover");
cancelRequest=new ScriptRequest();
cancelRequest.setProgramName(programName);
cancelRequest.setParameterArray(["^MINE^",parseInt(receiptToDeleteId,10)+".0"]);
cancelRequest.setAsyncIndicator(true);
cancelRequest.setResponseHandler(function(scriptReply){var dateArrIdx;
var rowArrIdx;
var procIdx;
var receiptElemIdx;
var receiptToCancel;
var $receiptToCancel;
var futureOrderCount;
if(scriptReply.getStatus()==="S"){$receiptToCancel=$("#ss-receipt-"+receiptToDeleteId);
receiptElemIdx=$receiptToCancel.index();
if(comp.showCancelledItems===false){futureOrderCount=0;
for(dateArrIdx=0;
dateArrIdx<comp.dateArr.length;
dateArrIdx++){if((comp.dateArr[dateArrIdx].cancelStatus.toLowerCase()==="future")||(comp.dateArr[dateArrIdx].cancelStatus.toLowerCase()==="incomplete")){futureOrderCount++;
}if(futureOrderCount===receiptElemIdx+1){receiptElemIdx=dateArrIdx;
break;
}}}if(isSavedReceipt){comp.dateArr.splice(receiptElemIdx,1);
comp.getReceiptArr().splice(receiptElemIdx,1);
}else{receiptToCancel=comp.getReceiptArr()[receiptElemIdx];
comp.dateArr[receiptElemIdx].cancelStatus="CANCELED";
receiptToCancel.cancelStatus="CANCELED";
for(rowArrIdx=0;
rowArrIdx<receiptToCancel.rowArr.length-1;
rowArrIdx++){for(procIdx=0;
procIdx<receiptToCancel.rowArr[rowArrIdx].content.length;
procIdx++){receiptToCancel.rowArr[rowArrIdx].content[procIdx].isCancelled="CANCELED";
}}receiptToCancel.footer.buttonArr=[""];
receiptToCancel.footer.status_ind="canceled";
}comp.createContent();
}else{$deleteButton.prop("enabled",true).addClass("ss-receipt-footer-btn-hover");
}});
cancelRequest.performRequest();
};
SurgeryRequest.prototype.createReceipt=function(receiptData){var receiptBuilder=new SurgeryRequestReceiptBuilder();
if(!this.getShowCancelledItems()&&receiptData.cancelStatus.toLowerCase()==="canceled"){return"";
}receiptBuilder.addHeader(receiptData.header);
receiptBuilder.addRows(receiptData.rowArr);
receiptBuilder.addFooter(receiptData.footer);
return receiptBuilder.build();
};
SurgeryRequest.prototype.getDuration=function(durArr,concu_ind){var duration=0;
var durCnt;
if(concu_ind===0||concu_ind===-1){for(durCnt=0;
durCnt<durArr.length;
durCnt++){duration+=durArr[durCnt];
}}else{duration=Math.max.apply(Math,durArr);
}return duration;
};
SurgeryRequest.prototype.updateDurationDisplay=function(duration){var hourText=this.sdwfI18n.hourText;
var minuteText=this.sdwfI18n.minuteText;
var hoursText=this.sdwfI18n.hoursText;
var minutesText=this.sdwfI18n.minutesText;
var durationDisplay="";
var hours;
var minutes;
if(duration>60){hours=Math.floor(duration/60);
minutes=duration%60;
if(hours===1&&minutes===1){durationDisplay=hours+" "+hourText+" "+minutes+" "+minuteText;
}else{if(minutes===1){durationDisplay=hours+" "+hoursText+" "+minutes+" "+minuteText;
}else{if(hours===1){durationDisplay=hours+" "+hourText+" "+minutes+" "+minutesText;
}else{durationDisplay=hours+" "+hoursText+" "+minutes+" "+minutesText;
}}}}else{if(duration===1){durationDisplay=duration+" "+minuteText;
}else{durationDisplay=duration+" "+minutesText;
}}return durationDisplay;
};
SurgeryRequest.prototype.createNavBar=function(){var dateCnt=0;
var dateArr=this.getDateArr();
var layoutHtml="";
var prevYear=0;
var curYear,cancelCss,isCancelled;
var navDisplay="";
layoutHtml+="<div class='sr-date-nav-bar'><div class='sr-nav-left'></div><ol class='sr-nav-items'>";
for(dateCnt=0;
dateCnt<dateArr.length;
dateCnt++){cancelCss="";
isCancelled=dateArr[dateCnt].cancelStatus.toLowerCase()==="canceled";
if(isCancelled&&!this.getShowCancelledItems()){continue;
}if(isCancelled){cancelCss="sr-cancel-status";
}if(dateArr[dateCnt].display instanceof Date){curYear=dateArr[dateCnt].display.getFullYear();
if(prevYear>0&&prevYear!==curYear){layoutHtml+="<div class='sr-nav-prev-year'>"+prevYear+"</div><div class='sr-nav-bar'></div><div class='sr-nav-next-year'>"+curYear+"</div>";
}layoutHtml+="<li class='sr-nav-bar-items "+cancelCss+"' id='"+dateCnt+"'>"+dateArr[dateCnt].display.format("mediumDateNoYear")+"</li>";
prevYear=dateArr[dateCnt].display.getFullYear();
}else{navDisplay=(isCancelled)?this.srReceiptI18n.canceledLbl:dateArr[dateCnt].display;
layoutHtml+="<li class='sr-nav-bar-items "+cancelCss+"' id='"+dateCnt+"'>"+navDisplay+"</li>";
}}layoutHtml+="</ol><div class='sr-nav-right'></div></div>";
return layoutHtml;
};
SurgeryRequest.prototype.createSurgFavContent=function(){var html="";
var cnt;
var surgFavsArr=this.getSurgeryFavList();
for(cnt=0;
cnt<surgFavsArr.length;
cnt++){html+=this.createSurgFavContentRow(surgFavsArr[cnt]);
}return html;
};
SurgeryRequest.prototype.removeFav=function(event){var self=this;
var surgFavsArr=self.getSurgeryFavList();
var cnt;
var $favRow=$(event.target).closest(".sr-fav-row");
var favId=parseInt($favRow.attr("id"),10);
var request=new ScriptRequest();
var sendAr=[];
for(cnt=0;
cnt<surgFavsArr.length;
cnt++){if(surgFavsArr[cnt].SURG_REQ_ID===favId){surgFavsArr.splice(cnt);
}}self.setSurgeryFavList(surgFavsArr);
$favRow.remove();
event.stopImmediatePropagation();
request.setProgramName("MP_SURG_REQ_DELETE_FAV");
sendAr.push("^MINE^",favId+".0");
request.setParameterArray(sendAr);
request.setAsyncIndicator(true);
request.setResponseHandler(function(scriptReply){if(scriptReply.getStatus()!=="S"){logger.logScriptCallError(self,request,"SurgeryRequest.js","removeFav");
}});
request.performRequest();
};
SurgeryRequest.prototype.checkFavRemoveButtonMoveUp=function(event){var $selectedDom=$(event.target);
var $selectedFavRow=$selectedDom.closest(".sr-fav-row");
var selectedFavRowTop=$selectedFavRow.offset().top;
var selectedFavRowHeight=$selectedFavRow.height();
var selectedFavRowBottom=selectedFavRowTop+selectedFavRowHeight;
var $containerDom=$selectedDom.closest(".surgery-request-content");
var containerTop=$containerDom.offset().top;
var containerHeight=$containerDom.height();
var containerBottom=containerTop+containerHeight;
var heightDifference=containerBottom-selectedFavRowBottom;
if(heightDifference>30){return false;
}else{return true;
}};
SurgeryRequest.prototype.addFavRemovalEvents=function(event){var self=(event.data)?event.data.self:this;
var timer;
var $removeFavButton;
var $selectedDom=$(event.target);
var removeFavButtonMoveUpClass="";
var $favoritesDom=$selectedDom.closest(".sr-favorites-content");
$favoritesDom.find(".sr-remove-fav-button").remove();
if(self.checkFavRemoveButtonMoveUp(event)){removeFavButtonMoveUpClass="sr-remove-fav-button-move-up";
}$removeFavButton=$("<div class ='sr-remove-fav-relative'><div class = 'sr-remove-fav-button "+removeFavButtonMoveUpClass+"'>"+self.srwfI18n.removeFav+"</div></div>");
$removeFavButton.find(".sr-remove-fav-button").on({click:function(event){self.removeFav(event);
},mouseenter:function(){clearTimeout(timer);
},mouseout:function(){$(this).remove();
}});
$selectedDom.append($removeFavButton);
timer=setTimeout(function(){$removeFavButton.remove();
},1000);
};
SurgeryRequest.prototype.createSurgFavContentRow=function(surgFavRowObj){var html="";
html+="<div title = '"+surgFavRowObj.SURG_FAV_DISPLAY+"' class = 'sr-fav-row' id = '"+surgFavRowObj.SURG_REQ_ID+"'><div class = 'sr-favorite-row-text'><span>"+surgFavRowObj.SURG_FAV_DISPLAY+"</span></div><div class = 'so-buttons'><div class='sr-favorites-remove'></div><input type = 'button' class = 'sr-favorites-open-button' value = '"+this.srwfI18n.add+"'></div></div>";
return html;
};
SurgeryRequest.prototype.createContent=function(){var receiptCnt=0;
var receiptArr=this.getReceiptArr();
var surgeryFavShowInd=this.getSurgeryFavShowInd();
var surgFavColDiv="<div class='sr-favorites-left-column'>";
var $receiptPane=$("<div class='sr-receipts-pane' id='sr-receipts-pane-"+this.getComponentId()+"'></div>");
var $componentDom=$("#surgery-request-"+this.getComponentId());
var isAllReceiptsCancelled=true;
var $rightParentDiv;
var leftParentDiv="";
var srColumnWidthClass=(surgeryFavShowInd===false)?" sr-column-width-toggle":"";
$rightParentDiv=$("<div class='sr-receipts-right-column"+srColumnWidthClass+"'></div>");
leftParentDiv=surgFavColDiv+"<div class='sr-fav-search-bar'><div class='sr-search-input-wrapper'><input type='text' placeholder='"+this.srwfI18n.searchFav+"' class='sr-search-input'></div></div><div class='sr-favorites-content'>"+this.createSurgFavContent()+"</div></div>";
$componentDom.empty();
if(receiptArr.length===0){$componentDom.append(leftParentDiv+"<div class='sr-empty-content"+srColumnWidthClass+"'><div class='sr-empty-receipt'></div><div class='sr-empty-receipt-msg'></div></div>");
}else{for(receiptCnt=0;
receiptCnt<receiptArr.length;
receiptCnt++){if(receiptArr[receiptCnt].cancelStatus.toLowerCase()!=="canceled"){isAllReceiptsCancelled=false;
}$receiptPane.append(this.createReceipt(receiptArr[receiptCnt]));
}if(isAllReceiptsCancelled&&!this.getShowCancelledItems()){$componentDom.append(leftParentDiv+"<div class='sr-empty-content"+srColumnWidthClass+"'><div class='sr-empty-receipt'></div><div class='sr-empty-receipt-msg'></div></div>");
}else{$rightParentDiv.append(this.createNavBar(),$receiptPane);
$componentDom.append(leftParentDiv,$rightParentDiv);
}}if(surgeryFavShowInd===false){$componentDom.find(".sr-favorites-left-column").hide();
}this.postProcessor();
};
SurgeryRequest.prototype.notifyUser=function(usedByName,message){var notifyObj=this.getInfoNotifyObj();
if(!message){message=this.srwfI18n.lockUser+" "+usedByName;
}notifyObj.setPrimaryText(message);
notifyObj.setCloseFunction(function(){notifyObj.hide();
});
$("#surgReqNotify"+this.getComponentId()).html(notifyObj.render());
notifyObj.attachEvents();
};
SurgeryRequest.prototype.lockInquire=function(surgReqId,actionType,callback){var request=new ScriptRequest();
var self=this;
request.setProgramName("MP_SURG_REQ_LOCK");
request.setParameterArray(["^MINE^",parseInt(surgReqId,10)+".0",actionType]);
request.setAsyncIndicator(true);
request.setResponseHandler(function(scriptReply){if(scriptReply.getStatus()!=="S"){logger.logScriptCallError(self,request,"SurgeryRequest.js","lockInquire");
}if(callback){callback(scriptReply.getResponse());
}});
request.performRequest();
};
SurgeryRequest.prototype.scrollReceipt=function(event){var self=(event.data)?event.data.self:this;
var $component=$("#surgery-request-"+self.getComponentId());
var $receiptPane=$component.find(".sr-receipts-pane");
var id=$(this).index();
var $receipt=$component.find(".ss-receipt")[id];
$component.find("div.sr-selected").removeClass("sr-selected");
$component.find("li.sr-selected").removeClass("sr-selected");
$($receipt).addClass("sr-selected");
$(this).addClass("sr-selected");
$receiptPane.stop().scrollTo($receipt,400,{offset:-40});
};

function SurgeryRequestController(){this.id=0;
this.isModalNew=false;
this.baseCompId=0;
this.parentComp=null;
this.surgArchI18n=i18n.discernabu.surgery_architecture;
this.activeTab={id:0,elem:""};
this.componentStore={};
this.bedrockStore={};
this.tabCount=3;
this.sharedResource={staff:[],location:{},procedures:{},powerPlans:[],details:{},surgReq:0};
this.sharedResourceEvents={staff:[],location:[],procedures:[],powerPlans:[],details:[],surgReq:0};
this.isPreloadMode=false;
}SurgeryRequestController.prototype.getPreloadMode=function(){return this.isPreloadMode;
};
SurgeryRequestController.prototype.setPreloadMode=function(bool){this.isPreloadMode=bool;
};
SurgeryRequestController.prototype.setSharedResource=function(id,obj){if(this.sharedResource.hasOwnProperty(id)){this.sharedResource[id]=obj;
}};
SurgeryRequestController.prototype.getSharedResource=function(id){if(this.sharedResource.hasOwnProperty(id)){return this.sharedResource[id];
}return null;
};
SurgeryRequestController.prototype.registerUpdateEventById=function(id,func){if(this.sharedResource.hasOwnProperty(id)){this.sharedResourceEvents[id].push(func);
}};
SurgeryRequestController.prototype.getModalDialog=function(modalId){var modal=MP_ModalDialog.retrieveModalDialogObject(modalId);
if(!modal){this.setIsModalNew(true);
return new ModalDialog(modalId);
}return modal;
};
SurgeryRequestController.prototype.getSurgArchI18n=function(){return this.surgArchI18n;
};
SurgeryRequestController.prototype.setParentComp=function(obj){this.parentComp=obj;
};
SurgeryRequestController.prototype.getParentComp=function(){return this.parentComp;
};
SurgeryRequestController.prototype.setBaseCompId=function(id){this.baseCompId=id;
};
SurgeryRequestController.prototype.getBaseCompId=function(){return this.baseCompId;
};
SurgeryRequestController.prototype.setIsModalNew=function(isPresent){this.isModalNew=isPresent;
};
SurgeryRequestController.prototype.getIsModalNew=function(){return this.isModalNew;
};
SurgeryRequestController.prototype.setId=function(id){this.id=id;
};
SurgeryRequestController.prototype.getId=function(){return this.id;
};
SurgeryRequestController.prototype.setActiveTab=function(tab){this.activeTab=tab;
};
SurgeryRequestController.prototype.getActiveTab=function(){return this.activeTab;
};
SurgeryRequestController.prototype.saveToCompStore=function(compObj,identifier){this.componentStore[identifier]=compObj;
};
SurgeryRequestController.prototype.getCompFromStore=function(identifier){return this.componentStore[identifier];
};
SurgeryRequestController.prototype.getTabCount=function(){return this.tabCount;
};
SurgeryRequestController.prototype.masterReset=function(){this.componentStore={};
this.activeTab={id:0,elem:""};
this.sharedResource={staff:[],location:{},procedures:{},powerPlans:[],details:{},surgReq:0};
this.sharedResourceEvents={staff:[],location:[],procedures:[],powerPlans:[],details:[],surgReq:0};
};
SurgeryRequestController.prototype.init=function(){var self=this;
var cancelButton=null;
var modalId="surgery"+this.getId();
var mDialog=this.getModalDialog(modalId);
var isModalNew=this.getIsModalNew();
var nextButton=null;
var previousButton=null;
var surgArchi18n=this.getSurgArchI18n();
var parentComp=this.getParentComp();
var ie8Fix;
var resizeTimer=null;
var saveLaterButton=null;
if(isModalNew){mDialog.setHeaderTitle(parentComp.getLabel());
ie8Fix=new ModalButton("ie8Fix");
ie8Fix.setText("").setIsDithered(false).setCloseOnClick(false).setOnClickFunction(function(){});
mDialog.addFooterButton(ie8Fix);
previousButton=new ModalButton("surgeryPreviousButton");
previousButton.setText(surgArchi18n.previous).setIsDithered(true).setCloseOnClick(false).setOnClickFunction(function(){self.handleButtonClicks("previous");
});
mDialog.addFooterButton(previousButton);
nextButton=new ModalButton("surgeryNextButton");
nextButton.setText(surgArchi18n.next).setIsDithered(false).setCloseOnClick(false).setOnClickFunction(function(){self.handleButtonClicks("next");
});
mDialog.addFooterButton(nextButton);
saveLaterButton=new ModalButton("surgerySaveLaterButton");
saveLaterButton.setText(surgArchi18n.saveLater).setIsDithered(false).setCloseOnClick(false).setOnClickFunction(function(){self.handleButtonClicks("save");
});
mDialog.addFooterButton(saveLaterButton);
cancelButton=new ModalButton("surgeryCancelButton");
cancelButton.setText(surgArchi18n.cancel).setIsDithered(false).setOnClickFunction(function(){self.handleButtonClicks("cancel");
});
mDialog.addFooterButton(cancelButton);
mDialog.setHeaderCloseFunction(function(){self.handleButtonClicks("cancel");
});
mDialog.resizeModalDialog=function(){};
$(window).on("resize",function(){if(resizeTimer){clearTimeout(resizeTimer);
}resizeTimer=setTimeout(function(){mDialog.resizeModalDialog();
},500);
});
MP_ModalDialog.addModalDialogObject(mDialog);
this.setIsModalNew(false);
}else{this.toggleModalButtons(1,this.getTabCount());
this.masterReset();
}MP_ModalDialog.showModalDialog(modalId);
this.generateBodyHtml(mDialog);
$("#"+modalId+"footer").find("button").attr("type","button");
$("#"+modalId+"footer").find("#ie8Fix").css("display","none");
};
SurgeryRequestController.prototype.setTabBedrockFilter=function(tab,filterName,filterValue){if(!this.bedrockStore[tab]){this.bedrockStore[tab]={};
}this.bedrockStore[tab][filterName]=filterValue;
};
SurgeryRequestController.prototype.getTabBedrockFilter=function(tab){return this.bedrockStore[tab];
};
SurgeryRequestController.prototype.renderView=function(tabNumber){var tabBodyId;
var activeTab=this.getActiveTab().elem;
var currentCompObj=null;
var activeTabNum=this.getActiveTab().id;
var next=tabNumber-activeTabNum<0?false:true;
var compObj;
var modalId="surgery"+this.getId();
var modalDialogId=this.getModalDialog(modalId).getId();
var count=0;
if(activeTab){currentCompObj=this.getCompFromStore("tab"+activeTabNum);
if(currentCompObj.submitDataToSharedResource(next)||currentCompObj.getPreloadMode()){for(count=activeTabNum;
count<=tabNumber;
count++){compObj=this.getCompFromStore("tab"+count);
if(compObj){$("#vwpModalDialog"+modalDialogId).append("<div class='sr-overlay-div'><span class='sr-img-spinner'></span></div>");
if(compObj.validateData(tabNumber)){$("#vwpModalDialog"+modalDialogId).find(".sr-overlay-div").remove();
if(!compObj.submitDataToSharedResource(next)){tabNumber=count;
break;
}}else{return null;
}}else{tabNumber=count;
break;
}}}else{return{status:false,tabNum:tabNumber};
}$("#"+activeTab).addClass("hidden");
}tabBodyId="surgery"+this.getBaseCompId()+"tab"+tabNumber;
this.setActiveTab({id:tabNumber,elem:tabBodyId});
$("#"+tabBodyId).removeClass("hidden");
if(!this.getCompFromStore("tab"+tabNumber)||(tabNumber===this.getTabCount())){this.initializeComponent(tabNumber);
}return{status:true,tabNum:tabNumber};
};
SurgeryRequestController.prototype.renderViewAsync=function(tabNumber,compObj,count){var tabBodyId;
var activeTab=this.getActiveTab().elem;
var activeTabNum=this.getActiveTab().id;
var next=tabNumber-activeTabNum<0?false:true;
var modalId="surgery"+this.getId();
var modalDialogId=this.getModalDialog(modalId).getId();
$("#"+activeTab).addClass("hidden");
if(!compObj.submitDataToSharedResource(next)){tabNumber=count;
}tabBodyId="surgery"+this.getBaseCompId()+"tab"+tabNumber;
this.setActiveTab({id:tabNumber,elem:tabBodyId});
$("#"+tabBodyId).removeClass("hidden");
this.toggleModalButtons(tabNumber,this.getTabCount());
this.setTabAsActive(activeTabNum,tabNumber);
$("#vwpModalDialog"+modalDialogId).find(".sr-overlay-div").remove();
if(tabNumber===this.getTabCount()){this.initializeComponent(tabNumber);
}};
SurgeryRequestController.prototype.initializeComponent=function(tabNumber){var tabBodyId;
var comp;
var CompConstructor;
tabBodyId="surgery"+this.getBaseCompId()+"tab"+tabNumber;
CompConstructor=SurgeryRequestController.componentTabMapping["tab"+tabNumber];
comp=new CompConstructor(this,tabNumber,this.getParentComp().getCriterion());
comp.setPreloadMode(this.getPreloadMode());
comp.setParentBodyId(tabBodyId);
comp.setBedrockFilters(this.getTabBedrockFilter("tab"+tabNumber));
this.saveToCompStore(comp,"tab"+tabNumber);
comp.preProcessing();
comp.retrieveComponentData();
};
SurgeryRequestController.prototype.generateBodyHtml=function(mDialog){var baseCompId=this.getBaseCompId();
var tabsHtml="<div id='surgeryMain"+baseCompId+"'><div class='surgery-header'>"+this.createTabContainer()+"</div><div class='surgery-body '><div class='surgery-tabs hidden section' id='surgery"+baseCompId+"tab1'></div><div class='surgery-tabs hidden section' id='surgery"+baseCompId+"tab2'></div><div class='surgery-tabs hidden section' id='surgery"+baseCompId+"tab3'></div></div>";
mDialog.setBodyHTML(tabsHtml);
this.headerEvents();
this.renderView(1);
};
SurgeryRequestController.prototype.headerEvents=function(){var headerTabs=$("#surgeryMain"+this.getBaseCompId()).children(".surgery-header");
var self=this;
var newTabNum,prevTabNum;
headerTabs.on("click",".surg-viewpoint-tab-container",function(){newTabNum=parseInt($(this).attr("tab-num"),10);
prevTabNum=self.getActiveTab().id;
self.verifyViewValidity(newTabNum,prevTabNum);
});
};
SurgeryRequestController.prototype.verifyViewValidity=function(newTabNum,prevTabNum){var renderViewObj;
renderViewObj=this.renderView(newTabNum);
if(renderViewObj&&renderViewObj.status){this.toggleModalButtons(renderViewObj.tabNum,this.getTabCount());
this.setTabAsActive(prevTabNum,renderViewObj.tabNum);
}};
SurgeryRequestController.prototype.createTabContainer=function(){var html="";
var cnt=0;
var tabCount=this.getTabCount();
var headerNames={0:this.surgArchI18n.staff,1:this.surgArchI18n.orders,2:this.surgArchI18n.summaryLbl};
for(cnt=0;
cnt<tabCount;
cnt++){html+="<div class='surg-viewpoint-tab-container "+(cnt===0?"surg-viewpoint-current":"surg-viewpoint-inactive")+"' tab-num='"+(cnt+1)+"'>";
html+="<div class='"+(cnt===0?"surg-viewpoint-left":"surg-viewpoint-tail")+"'></div>";
html+="<div class='surg-viewpoint-center'><span class='vwp-tab-label'>"+headerNames[cnt]+"</span></div>";
html+="<div class='"+(cnt===tabCount-1?"surg-viewpoint-right":"surg-viewpoint-arrow")+"'></div>";
html+="</div>";
}return html;
};
SurgeryRequestController.prototype.setTabAsActive=function(prevTabNum,tabNum){var baseCompId=this.getBaseCompId();
var $tabsHdr=$("#surgeryMain"+baseCompId);
var tempTab,cnt,$tab;
var currTabNum=tabNum;
var tabCSS="";
if(prevTabNum>tabNum){tempTab=prevTabNum;
prevTabNum=tabNum;
tabNum=tempTab;
currTabNum=prevTabNum;
}for(cnt=prevTabNum;
cnt<=tabNum;
cnt++){tabCSS=cnt===currTabNum?"surg-viewpoint-current":"surg-viewpoint-active";
$tab=$tabsHdr.find(".surgery-header").children()[cnt-1];
$($tab).removeClass().addClass("surg-viewpoint-tab-container").addClass(tabCSS);
}};
SurgeryRequestController.prototype.handleViewChange=function(isNext){var activeTabNum=this.getActiveTab().id;
var newTabNum=(isNext)?activeTabNum+1:activeTabNum-1;
var tabCount=this.getTabCount();
if(newTabNum>0&&newTabNum<=tabCount){this.verifyViewValidity(newTabNum,activeTabNum);
}};
SurgeryRequestController.prototype.handleButtonClicks=function(actionType){var modalId="surgery"+this.getId();
var parentComp=this.getParentComp();
var surgReqId=this.getSharedResource("surgReq");
switch(actionType){case"previous":this.handleViewChange(false);
break;
case"next":this.handleViewChange(true);
break;
case"send":if(surgReqId>0){parentComp.lockInquire(surgReqId,2,function(data){if(data.ISAVAILABLE===1){parentComp.processSurgicalRequest(modalId);
}else{MP_ModalDialog.closeModalDialog(modalId);
parentComp.notifyUser(data.LOCKED_PRSNL_NAME,parentComp.srwfI18n.lockExpired);
}});
}else{parentComp.processSurgicalRequest(modalId);
}break;
case"cancel":MP_ModalDialog.closeModalDialog(modalId);
if(surgReqId>0){parentComp.lockInquire(surgReqId,2);
}break;
case"save":if(surgReqId>0){parentComp.lockInquire(surgReqId,2,function(data){if(data.ISAVAILABLE===1){parentComp.saveSurgicalRequest(modalId);
}else{MP_ModalDialog.closeModalDialog(modalId);
parentComp.notifyUser(data.LOCKED_PRSNL_NAME,parentComp.srwfI18n.lockExpired);
}});
}else{parentComp.saveSurgicalRequest(modalId);
}break;
default:logger.logError("Not an appropriate call to this function");
}};
SurgeryRequestController.prototype.toggleModalButtons=function(currentViewCnt,totalViewCnt){var modalId="surgery"+this.getId();
var mDialog=this.getModalDialog(modalId);
var nextButtonAction="";
var isFirstView=false;
var surgArchi18n=this.getSurgArchI18n();
var self=this;
if(currentViewCnt===totalViewCnt){nextButtonAction="send";
isFirstView=false;
}else{if(currentViewCnt===1){nextButtonAction="next";
isFirstView=true;
}else{nextButtonAction="next";
isFirstView=false;
}}mDialog.setFooterButtonText("surgeryNextButton",surgArchi18n[nextButtonAction]).setFooterButtonOnClickFunction("surgeryNextButton",function(){self.handleButtonClicks(nextButtonAction);
});
mDialog.setFooterButtonDither("surgeryPreviousButton",isFirstView);
};
SurgeryRequestController.bedrockTabMapping={WF_SR_SURG_ROLE:"tab1"};
SurgeryRequestController.associateMapping=function(tabNumber,constructor){SurgeryRequestController.componentTabMapping["tab"+tabNumber]=constructor;
};
SurgeryRequestController.componentTabMapping={tab1:{},tab2:{},tab3:{}};

function SurgeryOrders(parentSelf,tabId,criterion){this.spwfI18n=i18n.discernabu.surgery_procedure;
this.surgArchI18n=i18n.discernabu.surgery_architecture;
this.sdwfI18n=i18n.discernabu.surgery_details;
this.soI18n=i18n.discernabu.surgery_orders;
this.sri18n=i18n.discernabu.surgery_request;
this.surgeonTabObjs={};
this.surgeonArr=[];
this.rootNode=null;
this.facilityId=0;
this.locationCd=0;
this.procDetailCCLReq=0;
this.waitForProcDetails={status:false,goToNext:false};
this.powerplans=[];
this.procFavorites=[];
this.powerPlanFavorites=[];
this.activeSurgeonId=0;
this.searchControl=null;
this.modifierArr=[];
this.primaryProcObj=null;
this.selectedOrder={PROC:{},PP:{}};
this.anesthesia={codeValue:0,display:""};
this.patientType={codeValue:0,display:""};
this.selectedTimeFrameData={codeValue:0,display:""};
this.blockTimePref=null;
this.concurentPref=0;
this.duration=null;
this.durationDisplay="";
this.patientTypeArr=[];
this.anesthesiaArr=[];
this.calendarSelection={};
this.staffInstruction="";
this.deferToAnesthesiologist=0;
this.timeFrameArr=[];
this.deletedProcedures={};
this.deletedPowerPlans={};
this.nextAvailableInd=0;
this.setCriterion(criterion);
this.setComponentId(tabId);
this.setParent(parentSelf);
}SurgeryOrders.prototype=new SurgeryBase();
SurgeryOrders.prototype.constructor=SurgeryBase;
SurgeryRequestController.associateMapping(2,SurgeryOrders);
SurgeryOrders.prototype.setDeletedProcedures=function(obj){this.deletedProcedures=obj;
};
SurgeryOrders.prototype.getDeletedProcedures=function(){return this.deletedProcedures;
};
SurgeryOrders.prototype.setDeletedPowerPlans=function(obj){this.deletedPowerPlans=obj;
};
SurgeryOrders.prototype.getDeletedPowerPlans=function(){return this.deletedPowerPlans;
};
SurgeryOrders.prototype.checkDeletedOrdersExist=function(){if(!this.checkObjEmpty(this.getDeletedProcedures())||!this.checkObjEmpty(this.getDeletedPowerPlans())){return true;
}else{return false;
}};
SurgeryOrders.prototype.setWaitForProcDetails=function(obj){this.waitForProcDetails=obj;
};
SurgeryOrders.prototype.getWaitForProcDetails=function(){return this.waitForProcDetails;
};
SurgeryOrders.prototype.setSelectedOrders=function(synId,synonym,type){if(type==="PROC"){if(this.selectedOrder.PROC[synId]){this.selectedOrder.PROC[synId].count++;
}else{this.selectedOrder.PROC[synId]={proc:{syn_id:parseInt(synId,10),synonym:synonym},count:1};
}}else{if(this.selectedOrder.PP[synId]){this.selectedOrder.PP[synId].count++;
}else{this.selectedOrder.PP[synId]={PP:{PATH_CAT_ID:parseInt(synId,10),PW_CAT_SYN_NAME:synonym},count:1};
}}};
SurgeryOrders.prototype.getSelectedOrders=function(){return this.selectedOrder;
};
SurgeryOrders.prototype.setProcDetailCCLReq=function(num){var parent=this.getParent();
var parentId=parent.getId();
var modalDialogId=parent.getModalDialog("surgery"+parentId).getId();
this.procDetailCCLReq=num;
if((num===0)&&this.getWaitForProcDetails().status){$("#vwpModalDialog"+modalDialogId).find(".sr-overlay-div").remove();
parent.handleViewChange(this.getWaitForProcDetails().goToNext);
this.setWaitForProcDetails({status:false,goToNext:false});
}};
SurgeryOrders.prototype.getProcDetailCCLReq=function(){return this.procDetailCCLReq;
};
SurgeryOrders.prototype.setDurationDisplay=function(dur){this.durationDisplay=dur;
};
SurgeryOrders.prototype.getDurationDisplay=function(){return this.durationDisplay;
};
SurgeryOrders.prototype.setDuration=function(dur){this.duration=parseInt(dur,10);
};
SurgeryOrders.prototype.getDuration=function(){return this.duration;
};
SurgeryOrders.prototype.setDeferToAnesthesiologist=function(number){this.deferToAnesthesiologist=number;
};
SurgeryOrders.prototype.getDeferToAnesthesiologist=function(){return this.deferToAnesthesiologist;
};
SurgeryOrders.prototype.setPrimaryProcObj=function(obj){this.primaryProcObj=obj;
};
SurgeryOrders.prototype.getPrimaryProcObj=function(){return this.primaryProcObj;
};
SurgeryOrders.prototype.setModifierArr=function(arr){this.modifierArr=arr;
};
SurgeryOrders.prototype.getModifierArr=function(){return this.modifierArr;
};
SurgeryOrders.prototype.setPatientTypeArr=function(arr){this.patientTypeArr=arr;
};
SurgeryOrders.prototype.getPatientTypeArr=function(){return this.patientTypeArr;
};
SurgeryOrders.prototype.setConcurentPref=function(number){this.concurentPref=number;
};
SurgeryOrders.prototype.getConcurentPref=function(){return this.concurentPref;
};
SurgeryOrders.prototype.setBlockTimePref=function(number){this.blockTimePref=number;
};
SurgeryOrders.prototype.getBlockTimePref=function(){return this.blockTimePref;
};
SurgeryOrders.prototype.setAnesthesiaArr=function(arr){this.anesthesiaArr=arr;
};
SurgeryOrders.prototype.getAnesthesiaArr=function(){return this.anesthesiaArr;
};
SurgeryOrders.prototype.setTimeFrameArr=function(arr){this.timeFrameArr=arr;
};
SurgeryOrders.prototype.getTimeFrameArr=function(){return this.timeFrameArr;
};
SurgeryOrders.prototype.setSelectedTimeFrameData=function(label,data){if(label==="codeValue"){this.selectedTimeFrameData.codeValue=data?parseInt(data,10):0;
}else{if(label==="display"){this.selectedTimeFrameData.display=data?data.toString():"";
}}};
SurgeryOrders.prototype.getSelectedTimeFrameData=function(){return this.selectedTimeFrameData;
};
SurgeryOrders.prototype.setNextAvailableInd=function(nextAvailableInd){this.nextAvailableInd=parseInt(nextAvailableInd,10);
};
SurgeryOrders.prototype.getNextAvailableInd=function(){return this.nextAvailableInd;
};
SurgeryOrders.prototype.setCalendarSelection=function(key,val){this.calendarSelection[key]=val;
};
SurgeryOrders.prototype.getCalendarSelection=function(){return this.calendarSelection;
};
SurgeryOrders.prototype.setStaffInstruction=function(str){this.staffInstruction=str.replace(/['"]+/g,"");
};
SurgeryOrders.prototype.getStaffInstruction=function(){return this.staffInstruction;
};
SurgeryOrders.prototype.setAnesthesia=function(obj){this.anesthesia=obj;
};
SurgeryOrders.prototype.getAnesthesia=function(){return this.anesthesia;
};
SurgeryOrders.prototype.setPatientType=function(obj){this.patientType=obj;
};
SurgeryOrders.prototype.getPatientType=function(){return this.patientType;
};
SurgeryOrders.prototype.setSearchControl=function(obj){this.searchControl=obj;
};
SurgeryOrders.prototype.getSearchControl=function(){return this.searchControl;
};
SurgeryOrders.prototype.setActiveSurgeonId=function(id){this.activeSurgeonId=parseInt(id,10);
};
SurgeryOrders.prototype.getActiveSurgeonId=function(){return this.activeSurgeonId;
};
SurgeryOrders.prototype.setFacilityId=function(id){this.facilityId=id;
};
SurgeryOrders.prototype.getFacilityId=function(){return this.facilityId;
};
SurgeryOrders.prototype.setProcFavorites=function(arr){this.procFavorites=arr;
};
SurgeryOrders.prototype.getProcFavorites=function(){return this.procFavorites;
};
SurgeryOrders.prototype.setPowerPlanFavorites=function(arr){this.powerPlanFavorites=arr;
};
SurgeryOrders.prototype.getPowerPlanFavorites=function(){return this.powerPlanFavorites;
};
SurgeryOrders.prototype.setLocationCd=function(id){this.locationCd=id;
};
SurgeryOrders.prototype.getLocationCd=function(){return this.locationCd;
};
SurgeryOrders.prototype.setRootNode=function(domNode){this.rootNode=domNode;
};
SurgeryOrders.prototype.getRootNode=function(){return this.rootNode;
};
SurgeryOrders.prototype.setSurgeonTab=function(id,obj){this.surgeonTabObjs[id]=obj;
};
SurgeryOrders.prototype.getSurgeonTab=function(id){return this.surgeonTabObjs[id];
};
SurgeryOrders.prototype.getAllSurgeonTabs=function(){return this.surgeonTabObjs;
};
SurgeryOrders.prototype.addSurgeon=function(id,name,isFirstStaff){var obj={id:id,name:name};
isFirstStaff=isFirstStaff||false;
if(isFirstStaff){this.surgeonArr.unshift(obj);
}else{this.surgeonArr.push(obj);
}this.setSurgeonTab(id,new SurgeryOrders.SurgeonTab(obj,this));
if(this.getRootNode()){this.getRootNode().find(".so-surgeon-list select").removeAttr("disabled");
}};
SurgeryOrders.prototype.getSurgeon=function(id){var cnt=0;
for(cnt=0;
cnt<this.surgeonArr.length;
cnt++){if(this.surgeonArr[cnt].id===id){return this.surgeonArr[cnt];
}}return null;
};
SurgeryOrders.prototype.getAllSurgeons=function(){return this.surgeonArr;
};
SurgeryOrders.prototype.removeSurgeon=function(id){var cnt=0;
for(cnt=0;
cnt<this.surgeonArr.length;
cnt++){if(parseInt(this.surgeonArr[cnt].id,10)===parseInt(id,10)){this.surgeonArr.splice(cnt,1);
delete this.surgeonTabObjs[id];
break;
}}if(this.surgeonArr.length===1){this.getRootNode().find(".so-surgeon-list select").prop("disabled","disabled");
}};
SurgeryOrders.prototype.createHeader=function(){var html="";
html+="<div class='surgery-orders'>";
html+="<h2 class='sec-hd'>";
html+="<span class='sec-title'><span class='comp-title'>"+this.surgArchI18n.orders+"</span></span>";
html+="</h2>";
html+="</div>";
return html;
};
SurgeryOrders.prototype.getFavoritesForSurgeon=function(surgId){var arrFavorites=this.getProcFavorites();
var cnt=0;
var objSurgeon;
for(cnt=0;
cnt<arrFavorites.length;
cnt++){objSurgeon=arrFavorites[cnt];
if(objSurgeon.PERSON_ID===parseInt(surgId,10)){return objSurgeon.PROCEDURE;
}}return[];
};
SurgeryOrders.prototype.getPrimarySurgeonIds=function(){var arrSurgeonIds=[];
var surgeonsArr=this.getAllSurgeons();
var cnt=0;
for(cnt=0;
cnt<surgeonsArr.length;
cnt++){arrSurgeonIds.push(surgeonsArr[cnt].id);
}return arrSurgeonIds;
};
SurgeryOrders.prototype.addPowerPlan=function(obj){this.powerplans.push(obj);
};
SurgeryOrders.prototype.getPowerPlans=function(){return this.powerplans;
};
SurgeryOrders.prototype.setPowerPlans=function(ppArr){var cnt=0;
for(cnt=0;
cnt<ppArr.length;
cnt++){ppArr[cnt].setParent(this);
}this.powerplans=ppArr;
};
SurgeryOrders.prototype.removePowerPlanByIndex=function(index){var selectedPP=this.getSelectedOrders().PP;
if(selectedPP[this.powerplans[index].getSynId()].count===1){delete selectedPP[this.powerplans[index].getSynId()];
}else{selectedPP[this.powerplans[index].getSynId()].count--;
}this.powerplans.splice(index,1);
if(this.powerplans.length===0){this.getRootNode().find(".so-pp-container").append("<div class = 'so-surg-no-result'>"+this.soI18n.none+"</div>");
}};
SurgeryOrders.prototype.removePowerPlanById=function(synId){var powerplans=this.getPowerPlans();
var $ppCont=this.getRootNode().find(".so-pp-container");
var cnt;
for(cnt=0;
cnt<powerplans.length;
cnt++){if(parseInt(powerplans[cnt].getSynId(),10)===parseInt(synId,10)){powerplans.splice(cnt,1);
}}if(this.powerplans.length===0&&$ppCont.find(".so-surg-no-result").length===0){$ppCont.append("<div class = 'so-surg-no-result'>"+this.soI18n.none+"</div>");
}};
SurgeryOrders.prototype.loadProceduresOnSurgeons=function(){var procedureData=this.getParent().getSharedResource("procedures");
var surgeonTabObjs=this.getAllSurgeonTabs();
var surgeonId;
for(surgeonId in procedureData){if(procedureData.hasOwnProperty(surgeonId)){if(surgeonTabObjs[surgeonId]){surgeonTabObjs[surgeonId].setProcArr(procedureData[surgeonId]);
}}}};
SurgeryOrders.prototype.preProcessing=function(){var parent=this.getParent();
var staffData=parent.getSharedResource("staff");
var locationData=parent.getSharedResource("location");
var cnt=0;
var staff;
for(cnt=0;
cnt<staffData.length;
cnt++){staff=staffData[cnt].staffTeams;
if(!staff[0]){continue;
}this.addSurgeon(staff[0].id,staff[0].name);
}this.setFacilityId(locationData.facilityId);
this.setLocationCd(locationData.locationCd);
if(this.getPreloadMode()){this.loadProceduresOnSurgeons();
this.setPowerPlans(parent.getSharedResource("powerPlans"));
this.setFacilityId(0);
this.setLocationCd(0);
}};
SurgeryOrders.prototype.retrieveComponentData=function(){var locationCd=0;
var parentSelf={};
var scriptRequest=new MP_Core.ScriptRequest();
var self=this;
var parent=this.getParent();
var modalDialogId=parent.getModalDialog("surgery"+parent.getId()).getId();
locationCd=this.getLocationCd();
parentSelf=this.getCriterion();
scriptRequest.setProgramName("MP_SURGERY_ORDER_DETAILS");
scriptRequest.setParameters(["^MINE^",MP_Util.CreateParamArray(this.getPrimarySurgeonIds(),1),parseInt(locationCd,10)+".0",parseInt(parentSelf.person_id,10)+".0",parseInt(parentSelf.ppr_cd,10)+".0"]);
scriptRequest.setAsync(true);
$("#vwpModalDialog"+modalDialogId).append("<div class='sr-overlay-div'><span class='sr-img-spinner'></span></div>");
MP_Core.XMLCCLRequestCallBack({},scriptRequest,function(scriptReply){self.renderComponent(scriptReply.getResponse());
});
};
SurgeryOrders.prototype.renderComponent=function(recordData){var html="";
var rootNode=$("#"+this.getParentBodyId());
var tabNumber;
var activeTabNum;
var parent=this.getParent();
var modalDialogId=parent.getModalDialog("surgery"+parent.getId()).getId();
try{this.setRootNode(rootNode);
this.setProcFavorites(recordData.PROC_FAVORITES.SURGEON);
this.setPowerPlanFavorites(recordData.PP_FAVORITES);
this.setAnesthesiaArr(recordData.ANESTHESIA_LIST);
this.setBlockTimePref(recordData.BLOCKTIME_CHECKBOX_PREF);
this.setPatientTypeArr(recordData.PAT_TYPE_LIST);
this.setModifierArr(recordData.MODIFIERS_LIST);
this.setTimeFrameArr(recordData.TIMEFRAME_LIST);
$("#vwpModalDialog"+modalDialogId).find(".sr-overlay-div").remove();
html+=this.createHeader();
html+="<div class = 'so-main'><div class='surgery-request-alert-msg surgery-request-msg'></div><div class = 'so-content-container'><div class = 'so-content-header'><div class = 'so-search'><form onsubmit = 'return false'><div id = 'soSearch"+this.getComponentId()+"'></div></form></div><div class = 'so-surgeon-list'>"+this.createSurgeonList()+"</div><div class='so-orders-sec'><div class = 'so-surgeon-fav-label'><div class = 'so-surgeon-fav-btn'></div><div>"+this.soI18n.favorites+": </div></div><div class = 'so-order-tabs'>"+this.createOrderTabs()+"</div></div></div><div class = 'so-content-body'><div class = 'so-order-results hidden'></div><div class = 'so-order-favs-proc'>"+this.createProcFavsContent()+"</div><div class = 'so-order-favs-pp hidden'>"+this.createPpFavsContent()+"</div></div></div><div class = 'so-orders-container'><div class = 'so-proc-container'>"+this.createProcContainers()+"</div><div class = 'so-pp-container'>"+this.createPowerPlansContainers()+"</div></div><div class = 'so-order-details'>"+this.createSurgeryDetails()+"</div></div>";
rootNode.append(html);
this.postProcessing();
this.detailsPostProcessing();
if(this.getPreloadMode()){tabNumber=3;
activeTabNum=2;
this.getParent().verifyViewValidity(tabNumber,activeTabNum);
}}catch(e){logger.logError(e);
throw e;
}};
SurgeryOrders.prototype.createDeleteOrdersHtml=function(deletedProcedures,deletedPowerPlans){var self=this;
var proceduresText=self.surgArchI18n.procedures;
var powerplansText=self.surgArchI18n.powerplans;
var deletedOrdersMessage=self.soI18n.deletedOrdersMessage;
var deletedProceduresHtml="";
var deletedPPHtml="";
var html="";
var powerplan;
var procedure;
var deletedOrdersContainerHtml="<div id = 'soDeletedOrdersDialog' class='so-deleted-orders-dialog'>  <div class='so-deleted-orders-message'>      <span class='information-container message-info-text'>"+deletedOrdersMessage+"      </span>  </div>  <div class='so-deleted-orders-items'>";
if(!self.checkObjEmpty(deletedProcedures)){for(procedure in deletedProcedures){deletedProceduresHtml+="<div>"+procedure+" ("+deletedProcedures[procedure]+")</div>";
}deletedProceduresHtml="   <div class='so-deleted-item'>       <div class='so-deleted-orders-title'>"+proceduresText+"       </div>       <div class='so-deleted-orders-list'>"+deletedProceduresHtml+"       </div>   </div>";
}if(!self.checkObjEmpty(deletedPowerPlans)){for(powerplan in deletedPowerPlans){deletedPPHtml+="<div>"+powerplan+" ("+deletedPowerPlans[powerplan]+")</div>";
}deletedPPHtml="   <div class='so-deleted-item'>       <div class='so-deleted-orders-title'>"+powerplansText+"       </div>       <div class='so-deleted-orders-list'>"+deletedPPHtml+"       </div>   </div>";
}html=deletedOrdersContainerHtml+deletedProceduresHtml+deletedPPHtml+"</div></div>";
return html;
};
SurgeryOrders.prototype.createDeletedOrdersDialog=function(){var self=this;
var headerTitle=self.soI18n.deletedOrdersTitle;
var closeButtonText=self.surgArchI18n.close;
var closeButtonName="soDeletedOrdersDialogCloseButton";
var soCompBaseId=self.getParent().getBaseCompId();
var soDeletedOrdersDialogCloseButton;
var soDeletedOrdersDialogName="soDeletedOrdersDialog"+soCompBaseId;
var html=self.createDeleteOrdersHtml(self.getDeletedProcedures(),self.getDeletedPowerPlans());
var soDeletedOrdersDialog=new ModalDialog(soDeletedOrdersDialogName);
soDeletedOrdersDialogCloseButton=new ModalButton(closeButtonName);
soDeletedOrdersDialogCloseButton.setText(closeButtonText);
soDeletedOrdersDialogCloseButton.setOnClickFunction(function(){self.setDeletedProcedures({});
self.setDeletedPowerPlans({});
MP_ModalDialog.closeModalDialog(soDeletedOrdersDialogName);
MP_ModalDialog.deleteModalDialogObject(soDeletedOrdersDialogName);
});
soDeletedOrdersDialog.setHeaderTitle(headerTitle);
soDeletedOrdersDialog.setLeftMarginPercentage(35);
soDeletedOrdersDialog.setRightMarginPercentage(35);
soDeletedOrdersDialog.setTopMarginPercentage(35);
soDeletedOrdersDialog.setBottomMarginPercentage(35);
soDeletedOrdersDialog.addFooterButton(soDeletedOrdersDialogCloseButton);
MP_ModalDialog.addModalDialogObject(soDeletedOrdersDialog);
MP_ModalDialog.showModalDialog(soDeletedOrdersDialogName);
soDeletedOrdersDialog.setBodyHTML(html);
};
SurgeryOrders.prototype.postProcessing=function(){var rootNode=this.getRootNode();
var self=this;
var elem;
var control;
var criterion=this.getCriterion();
var surgeonTabObjs;
var surgeonId;
this.updateProcFavsCount();
if(this.getPreloadMode()){surgeonTabObjs=this.getAllSurgeonTabs();
for(surgeonId in surgeonTabObjs){if(surgeonTabObjs.hasOwnProperty(surgeonId)){surgeonTabObjs[surgeonId].createProcRows();
}}this.createAllPowerPlanContent();
}rootNode.find(".so-pp-tab").find(".so-cnt").text(this.getPowerPlanFavorites().length);
rootNode.find(".so-surgeon-list").children("select").on("change",{self:this},this.handleSurgListChange);
rootNode.find(".so-order-tabs").on("click",".so-proc-tab, .so-pp-tab",{self:this},this.handleOrderTabChange);
rootNode.find(".so-content-body").on("click",".so-order-button",{self:this},this.handleOrderClick);
rootNode.find(".so-content-body").on("click",".so-fav",{self:this},this.handleFavClick);
rootNode.find(".so-proc-container").on("click",".so-proc-primary-btn",{self:this},this.handlePrimaryProcClick);
elem=rootNode.find("#soSearch"+this.getComponentId())[0];
control=new SurgeryOrders.Search(elem);
control.setCaption(this.soI18n.searchOrders);
control.activateCaption();
control.setFacilityId(this.getFacilityId());
control.setLocationCd(this.getLocationCd());
control.setPatientId(criterion.person_id);
control.setProviderId(this.getActiveSurgeonId());
control.setPprCd(criterion.ppr_cd);
control.deactivateCaption();
rootNode.find(".so-content-header .search-box").focus();
control.setOnEnter(function(){control.callProgram(function(response){self.loadSearchResults(response);
});
});
control.getList().setOnSelect(function(){control.close();
control.activateCaption();
self.handleOrderSelection(control.getList().getSelectedItem());
});
control.getList().setOnEnter(function(){control.close();
control.activateCaption();
self.handleOrderSelection(control.getList().getSelectedItem());
});
this.setSearchControl(control);
};
SurgeryOrders.prototype.loadSearchResults=function(searchResults){var cnt=0;
var html="<div class='so-order-result-label'>"+this.soI18n.searchResult+"</div>";
var type="";
for(cnt=0;
cnt<searchResults.length;
cnt++){if(searchResults[cnt].SYNONYM){type="PROC";
}else{type="PP";
}html+=this.createRow(searchResults[cnt],false,type);
}this.getRootNode().find(".so-order-results").html(html);
this.handleOrderTabChange(true);
};
SurgeryOrders.prototype.handleOrderSelection=function(selectedItem){var activeSurgeonTab=this.getSurgeonTab(this.getActiveSurgeonId());
if(selectedItem.SYNONYM){activeSurgeonTab.handleOrderClick(selectedItem.SYN_ID,"PROC",selectedItem.SYNONYM);
}else{this.powerPlanContentCreation(selectedItem.PATH_CAT_ID,selectedItem.PW_CAT_SYN_NAME);
}};
SurgeryOrders.prototype.powerPlanContentCreation=function(synCatId,synName,synFavId){var orderObj=new SurgeryOrders.Order("PP",synCatId,synName,this);
var ppContNode=this.getRootNode().find(".so-pp-container");
if(synFavId){orderObj.setSynFavId(synFavId);
}ppContNode.find(".so-surg-no-result").remove();
ppContNode.append(orderObj.createRowHtml());
this.addPowerPlan(orderObj);
this.setSelectedOrders(synCatId,synName,"PP");
};
SurgeryOrders.prototype.updateProcFavsCount=function(){var surgFavsArr=this.getFavoritesForSurgeon(this.getActiveSurgeonId());
var rootNode=this.getRootNode();
rootNode.find(".so-proc-tab").find(".so-cnt").text(surgFavsArr.length);
};
SurgeryOrders.prototype.createProcFavsContent=function(){var html="";
var surgFavsArr=this.getFavoritesForSurgeon(this.getActiveSurgeonId());
var cnt=0;
for(cnt=0;
cnt<surgFavsArr.length;
cnt++){html+=this.createRow(surgFavsArr[cnt],true,"PROC");
}return html;
};
SurgeryOrders.prototype.changeProcFavContentBySurgeon=function(){this.getRootNode().find(".so-order-favs-proc").html(this.createProcFavsContent());
this.updateProcFavsCount();
this.handleOrderTabChange(false);
};
SurgeryOrders.prototype.createAllPowerPlanContent=function(){var ppArr=this.getPowerPlans();
var ppContNode=this.getRootNode().find(".so-pp-container");
var cnt=0;
if(ppArr.length>0){ppContNode.find(".so-surg-no-result").remove();
}for(cnt=0;
cnt<ppArr.length;
cnt++){ppContNode.append(ppArr[cnt].createRowHtml());
this.setSelectedOrders(ppArr[cnt].getSynId(),ppArr[cnt].getSynName(),"PP");
}};
SurgeryOrders.prototype.createPpFavsContent=function(){var html="";
var ppFavsArr=this.getPowerPlanFavorites();
var cnt=0;
for(cnt=0;
cnt<ppFavsArr.length;
cnt++){html+=this.createRow(ppFavsArr[cnt],true,"PP");
}return html;
};
SurgeryOrders.prototype.createRow=function(details,isFavorite,type){var html="";
var i18n=this.spwfI18n;
var favIconCss=isFavorite===true?"so-fav-active so-is-fav":"so-fav-disable";
var ppName="";
var ppSynId=0;
var ppSynFavId=0;
if(type==="PROC"){html+="<div title = '"+details.SYNONYM+"' class = 'so-order-row so-proc' type = '"+type+"' syn_name = '"+details.SYNONYM+"' syn_id = '"+details.SYN_ID+"'><div class = 'so-order'><span>"+details.SYNONYM+"</span></div><div class = 'so-buttons'><input type = 'button' class = 'so-order-button' value = '"+i18n.order+"'><div class = 'so-fav "+favIconCss+"'></div></div></div>";
}else{if(isFavorite){ppName=details.NAME;
ppSynId=details.PATHWAY_CATALOG_ID;
ppSynFavId=details.PATHWAY_CUSTOMIZED_PLAN_ID;
}else{ppName=details.PW_CAT_SYN_NAME;
ppSynId=details.PATH_CAT_ID;
ppSynFavId="";
}html+="<div title = '"+ppName+"' class = 'so-order-row so-pp' type = '"+type+"' syn_name = '"+ppName+"' syn_id = '"+ppSynId+"' syn_fav_id = '"+ppSynFavId+"'><div class = 'powerplan-icon'></div><div class = 'so-order'><span>"+ppName+"</span></div><div class = 'so-buttons'><input type = 'button' class = 'so-order-button' value = '"+i18n.order+"'></div></div>";
}return html;
};
SurgeryOrders.prototype.createSurgeonList=function(){var html="";
var surgeonList=this.getAllSurgeons();
var disableSelect=surgeonList.length<=1?"disabled":"";
var cnt=0;
html+="<select "+disableSelect+">";
for(cnt=0;
cnt<surgeonList.length;
cnt++){if(cnt===0){this.setActiveSurgeonId(surgeonList[cnt].id);
}html+="<option id='so-surg-option-"+surgeonList[cnt].id+"' value = '"+surgeonList[cnt].id+"'>"+surgeonList[cnt].name+"</option>";
}html+="</select>";
return html;
};
SurgeryOrders.prototype.createOrderTabs=function(){var html="";
html+="<div class='so-tab-div'><button class = 'so-tab so-proc-tab so-active-tab'>"+this.soI18n.procedures+" (<span class = 'so-cnt'>0</span>) </button></div>";
html+="<div class='so-tab-div'><button class = 'so-tab so-pp-tab'> "+this.soI18n.powerplans+" (<span class = 'so-cnt'>0</span>) </button></div>";
return html;
};
SurgeryOrders.prototype.createProcContainers=function(){var surgArr=this.getAllSurgeons();
var cnt=0;
var html="";
for(cnt=0;
cnt<surgArr.length;
cnt++){html+=this.getSurgeonTab(surgArr[cnt].id).createProcContainer();
}return html;
};
SurgeryOrders.prototype.createPowerPlansContainers=function(){var html="";
html+="<div class = 'so-surg-cont-headers'>"+this.soI18n.addedPowerPlanText+"</div>";
html+="<div class = 'so-surg-no-result'>"+this.soI18n.none+"</div>";
return html;
};
SurgeryOrders.prototype.handleOrderClick=function(event){var self=(event.data)?event.data.self:this;
var synId=$(this).parent().parent().attr("syn_id");
var orderType=$(this).parent().parent().attr("type");
var synName=$(this).parent().parent().attr("syn_name");
var synFavId=$(this).parent().parent().attr("syn_fav_id");
var activeSurgeonTab;
if(orderType==="PROC"){activeSurgeonTab=self.getSurgeonTab(self.getActiveSurgeonId());
activeSurgeonTab.handleOrderClick(synId,orderType,synName);
}else{self.powerPlanContentCreation(synId,synName,synFavId);
}};
SurgeryOrders.prototype.handleSurgListChange=function(event){var self=(event.data)?event.data.self:this;
var surgId=(event.data)?this.value:event;
self.setActiveSurgeonId(surgId);
self.getSearchControl().setProviderId(surgId);
self.changeProcFavContentBySurgeon();
};
SurgeryOrders.prototype.handleOrderTabChange=function(event){var self;
var rootNode;
if(typeof event==="object"){self=(event.data)?event.data.self:this;
rootNode=self.getRootNode();
if($(this).hasClass("so-proc-tab")){rootNode.find(".so-order-favs-proc").show();
rootNode.find(".so-order-favs-pp").hide();
rootNode.find(".so-order-results").hide();
rootNode.find(".so-proc-tab").addClass("so-active-tab");
rootNode.find(".so-pp-tab").removeClass("so-active-tab");
}else{rootNode.find(".so-order-favs-proc").hide();
rootNode.find(".so-order-favs-pp").show();
rootNode.find(".so-order-results").hide();
rootNode.find(".so-proc-tab").removeClass("so-active-tab");
rootNode.find(".so-pp-tab").addClass("so-active-tab");
}}else{rootNode=this.getRootNode();
if(event){rootNode.find(".so-order-favs-proc").hide();
rootNode.find(".so-order-favs-pp").hide();
rootNode.find(".so-order-results").show();
rootNode.find(".so-proc-tab").removeClass("so-active-tab");
rootNode.find(".so-pp-tab").removeClass("so-active-tab");
}else{rootNode.find(".so-order-favs-proc").show();
rootNode.find(".so-order-favs-pp").hide();
rootNode.find(".so-order-results").hide();
rootNode.find(".so-proc-tab").addClass("so-active-tab");
rootNode.find(".so-pp-tab").removeClass("so-active-tab");
}}};
SurgeryOrders.prototype.handlePrimaryProcClick=function(event){var self=(event.data)?event.data.self:this;
var surgContDom=$(this).closest(".so-surg-cont-body");
var surgIdOfProc=surgContDom.attr("surg_id");
var rowElem=$(this).closest(".so-proc-row");
var procArrIndex=surgContDom.children().index(rowElem);
var surgTabObj=self.getSurgeonTab(surgIdOfProc);
var currentPrimProcObj=self.getPrimaryProcObj();
surgContDom.parent().find(".so-proc-primary-btn-active").removeClass("so-proc-primary-btn-active");
if(currentPrimProcObj){currentPrimProcObj.setIsPrimary(false);
}$(this).addClass("so-proc-primary-btn-active");
surgTabObj.makeProcPrimary(procArrIndex);
};
SurgeryOrders.prototype.handleFavClick=function(event){var self=(event.data)?event.data.self:this;
var iconSelf=this;
var parentElem=$(iconSelf).parent().parent();
var procedure={};
var removeFavButton;
var timer;
var removeFavButtonMoveUpClass="";
procedure.SYN_ID=""||parentElem.attr("syn_id");
procedure.SYNONYM=""||parentElem.attr("title");
if(!$(iconSelf).hasClass("so-is-fav")){self.addToFavorites(procedure);
if($(iconSelf).hasClass("so-fav-disable")){$(iconSelf).removeClass("so-fav-disable").addClass("so-fav-active");
}setTimeout(function(){$(iconSelf).removeClass("so-fav-active").addClass("so-fav-disable");
},500);
}else{self.getRootNode().find(".sr-remove-fav-button").remove();
if(parentElem.parent().children().length>1){if(self.checkFavRemoveButtonMoveUp(event)){removeFavButtonMoveUpClass="sr-remove-fav-button-move-up";
}else{removeFavButtonMoveUpClass="";
}}else{removeFavButtonMoveUpClass="sr-remove-fav-button-same-line";
}removeFavButton=$("<div class ='sr-remove-fav-relative'><div class = 'sr-remove-fav-button "+removeFavButtonMoveUpClass+"'>"+self.sri18n.removeFav+"</div></div>");
removeFavButton.on({click:function(event){self.removeFromFavorites(parseInt(procedure.SYN_ID,10));
event.stopImmediatePropagation();
$(this).remove();
},mouseenter:function(){clearTimeout(timer);
},mouseout:function(){$(this).remove();
}});
$(this).append(removeFavButton);
timer=setTimeout(function(){removeFavButton.remove();
},1000);
}};
SurgeryOrders.prototype.checkFavRemoveButtonMoveUp=function(event){var $selectedDom=$(event.target);
var $selectedFavRow=$selectedDom.closest(".so-order-row");
var selectedFavRowTop=$selectedFavRow.offset().top;
var selectedFavRowHeight=$selectedFavRow.height();
var selectedFavRowBottom=selectedFavRowTop+selectedFavRowHeight;
var $containerDom=$selectedDom.closest(".so-content-body");
var containerTop=$containerDom.offset().top;
var containerHeight=$containerDom.height();
var containerBottom=containerTop+containerHeight;
var heightDifference=containerBottom-selectedFavRowBottom;
if(heightDifference>30){return false;
}else{return true;
}};
SurgeryOrders.prototype.addToFavorites=function(procedure){var scriptRequest=new MP_Core.ScriptRequest();
var synId=parseInt(procedure.SYN_ID,10);
var surgeonIds="";
var self=this;
var objProc={};
var isAFavorite=false;
var activeSurgFavs=this.getFavoritesForSurgeon(this.getActiveSurgeonId());
if(synId>0){for(objProc in activeSurgFavs){if(objProc.SYN_ID===synId){isAFavorite=true;
break;
}}if(!isAFavorite){scriptRequest.setProgramName("mp_surg_req_add_proc_fav");
surgeonIds=MP_Util.CreateParamArray(this.getPrimarySurgeonIds(),1);
scriptRequest.setParameters(["^MINE^","^"+procedure.SYNONYM+"^",synId+".0",surgeonIds,parseInt(this.getLocationCd(),10)+".0",parseInt(this.getCriterion().person_id,10)+".0"]);
MP_Core.XMLCCLRequestCallBack(this,scriptRequest,function(recordData){self.adjustFavoritesAdd(recordData.getResponse());
});
}}};
SurgeryOrders.prototype.adjustFavoritesAdd=function(recordData){var suregonIdxRep=0;
var surgeonCntRep=0;
var arrSurgeonFav=[];
var arrProcedures=[];
var suregonIdxFav=0;
var surgeonCntFav=0;
var objFavorite={};
var surgeonId=0;
if(recordData.STATUS_DATA.STATUS==="S"&&recordData.ITEM_ADDED_IND===1){objFavorite={SYNONYM:recordData.SYNONYM,SYN_ID:recordData.SYN_ID};
surgeonCntRep=recordData.SURGEON.length;
arrSurgeonFav=this.getProcFavorites();
surgeonCntFav=arrSurgeonFav.length;
for(suregonIdxRep=0;
suregonIdxRep<surgeonCntRep;
suregonIdxRep++){if(recordData.SURGEON[suregonIdxRep].PRIV_IND===1){surgeonId=recordData.SURGEON[suregonIdxRep].PERSON_ID;
for(suregonIdxFav=0;
suregonIdxFav<surgeonCntFav;
suregonIdxFav++){if(surgeonId===arrSurgeonFav[suregonIdxFav].PERSON_ID){arrProcedures=arrSurgeonFav[suregonIdxFav].PROCEDURE;
arrProcedures.push(objFavorite);
this.addRemoveFavsRowFromDom(objFavorite,true);
break;
}}}}this.updateProcFavsCount();
}else{logger.logError("Script call mp_surg_req_add_proc_fav failed.");
}};
SurgeryOrders.prototype.removeFromFavorites=function(synId){var scriptRequest=null;
var arrSurgeonFavorites=[];
var cntProc=0;
var idxProc=0;
var objProc={};
var isAFavorite=false;
if(synId>0){arrSurgeonFavorites=this.getFavoritesForSurgeon(this.getActiveSurgeonId());
cntProc=arrSurgeonFavorites.length;
for(idxProc=0;
idxProc<cntProc;
idxProc++){objProc=arrSurgeonFavorites[idxProc];
if(objProc.SYN_ID===synId){isAFavorite=true;
arrSurgeonFavorites.splice(idxProc,1);
this.addRemoveFavsRowFromDom(objProc,false);
break;
}}if(isAFavorite){scriptRequest=new ScriptRequest();
scriptRequest.setProgramName("mp_surg_req_del_proc_fav");
scriptRequest.setParameterArray(["^MINE^",synId+".0"]);
scriptRequest.setResponseHandler(function(){});
scriptRequest.performRequest();
this.updateProcFavsCount();
}}};
SurgeryOrders.prototype.addRemoveFavsRowFromDom=function(procObj,toAdd){var procFavsDom=this.getRootNode().find(".so-order-favs-proc");
if(toAdd){procFavsDom.append(this.createRow(procObj,true,"PROC"));
}else{procFavsDom.find("[syn_id="+procObj.SYN_ID+"]").remove();
}};
SurgeryOrders.prototype.setDefaultPrimaryProc=function(){var surgeonArr=this.getAllSurgeons();
var rootNode=this.getRootNode();
var surgCnt=0;
var surgId=0;
for(surgCnt=0;
surgCnt<surgeonArr.length;
surgCnt++){surgId=surgeonArr[surgCnt].id;
if(this.getSurgeonTab(surgId).makeProcPrimary(0)){rootNode.find("#surgProcCont"+surgId).children().first().find(".so-proc-primary-btn").addClass("so-proc-primary-btn-active");
break;
}}};
SurgeryOrders.prototype.createSurgeryDetails=function(){var html="";
html+="<div class='so-surg-details-hdr'><h2 class='sec-hd'><span class='sec-title'><span class='comp-title'>"+this.surgArchI18n.surgDetails+"</span></span></h2></div><div class='so-surg-details-secs'><div class='so-surg-details-sec1'>"+this.createDateSelection()+"</div><div class='so-surg-details-sec2'>"+this.createPatientInfo()+"</div></div>";
return html;
};
SurgeryOrders.prototype.updateTimeRangeDom=function(timeRangeObj){var $rootNode=this.getRootNode();
var $startDateTextId=$rootNode.find("#startDateText");
var $endDateTextId=$rootNode.find("#endDateText");
$startDateTextId.datepicker("option","maxDate",null);
$endDateTextId.datepicker("option","minDate",timeRangeObj.startDate);
$startDateTextId.datepicker("setDate",timeRangeObj.startDate);
$endDateTextId.datepicker("setDate",timeRangeObj.endDate);
this.setCalendarSelection("startDate",timeRangeObj.startDate);
this.setCalendarSelection("endDate",timeRangeObj.endDate);
};
SurgeryOrders.prototype.getTimeRangeSelectionDates=function(timeRangeDefinition){var startDate=new Date();
var endDate=new Date();
var dateRangeArray=[];
var startDateCnt=0;
var endDateCnt=0;
var rangeType="";
var timeRangeObj={};
var nextAvailableInd=0;
dateRangeArray=timeRangeDefinition.split(",");
if(dateRangeArray.length===3){startDateCnt=parseInt(dateRangeArray[0],10);
endDateCnt=parseInt(dateRangeArray[1],10);
rangeType=dateRangeArray[2].toString().toUpperCase();
if(isNaN(startDateCnt)||isNaN(endDateCnt)||startDateCnt<0||endDateCnt<0||(endDateCnt<startDateCnt&&endDateCnt!==0)){rangeType="";
}}switch(rangeType){case"D":startDate.setDate(startDate.getDate()+startDateCnt);
endDate.setDate(endDate.getDate()+endDateCnt);
break;
case"W":startDate.setDate(startDate.getDate()+(7*startDateCnt));
endDate.setDate(endDate.getDate()+(7*endDateCnt));
break;
case"M":startDate.setMonth(startDate.getMonth()+startDateCnt);
endDate.setMonth(endDate.getMonth()+endDateCnt);
break;
case"Y":startDate.setFullYear(startDate.getFullYear()+startDateCnt);
endDate.setFullYear(endDate.getFullYear()+endDateCnt);
break;
case"N":startDate.setDate(startDate.getDate()+startDateCnt);
endDate=null;
nextAvailableInd=1;
break;
default:startDate=null;
endDate=null;
}if(endDateCnt===0){endDate=null;
}this.setNextAvailableInd(nextAvailableInd);
timeRangeObj.startDate=startDate;
timeRangeObj.endDate=endDate;
return timeRangeObj;
};
SurgeryOrders.prototype.updateTimeFrameSelection=function(timeFrameCD,timeFrameDisp){var $rootNode=this.getRootNode();
if(timeFrameCD===0||timeFrameDisp===""){$rootNode.find(".so-surg-details-date-select").prop("selectedIndex",-1);
this.setNextAvailableInd(0);
}this.setSelectedTimeFrameData("codeValue",timeFrameCD);
this.setSelectedTimeFrameData("display",timeFrameDisp);
};
SurgeryOrders.prototype.detailsPostProcessing=function(){var $rootNode=$("#surgery"+this.getParent().getBaseCompId()+"tab"+this.getComponentId());
var $startDateTextId=$rootNode.find("#startDateText");
var $endDateTextId=$rootNode.find("#endDateText");
var self=this;
$rootNode.find(".so-surg-details-date-select").prop("selectedIndex",-1);
$rootNode.on("change",".so-surg-details-date-select",function(){var $selectedTimeRange=$(this).find(":selected");
var timeRangeObj={};
timeRangeObj=self.getTimeRangeSelectionDates($selectedTimeRange.attr("description"));
self.updateTimeRangeDom(timeRangeObj);
self.updateTimeFrameSelection($selectedTimeRange.attr("codeset"),$selectedTimeRange.attr("description"));
});
$startDateTextId.datepicker({showOn:"both",buttonImage:self.getCriterion().static_content+"\\images\\4974.png",buttonImageOnly:true,minDate:new Date(),onSelect:function(selected){$startDateTextId.removeClass("sdwf-required-field");
$endDateTextId.datepicker("option","minDate",selected);
self.setCalendarSelection("startDate",this.value);
self.updateTimeFrameSelection(0,"");
}});
$endDateTextId.datepicker({showOn:"both",buttonImage:self.getCriterion().static_content+"\\images\\4974.png",buttonImageOnly:true,minDate:new Date(),onSelect:function(selected){$startDateTextId.datepicker("option","maxDate",selected);
self.setCalendarSelection("endDate",this.value);
self.updateTimeFrameSelection(0,"");
}});
$rootNode.find(".so-reset-calendar").on("click",function(){self.updateTimeFrameSelection(0,"");
$startDateTextId.datepicker("setDate",null);
$endDateTextId.datepicker("setDate",null);
self.setCalendarSelection("startDate",null);
self.setCalendarSelection("endDate",null);
});
$rootNode.find(".so-surg-details-block input").change(function(){if($(this).prop("checked")){self.setBlockTimePref(1);
}else{self.setBlockTimePref(0);
}});
$rootNode.find(".so-surg-details-patient-select").change(function(){var $selectedType=$(this).find(":selected");
self.setPatientType({display:$selectedType.text(),codeValue:$selectedType.val()});
});
document.getElementById("so-surg-details-patient"+self.getParentBodyId()).selectedIndex=-1;
$rootNode.find(".so-surg-details-anes-select").change(function(){var $selectedAnes=$(this).find(":selected");
self.setAnesthesia({display:$selectedAnes.text(),codeValue:$selectedAnes.val()});
});
document.getElementById("so-surg-details-anes"+self.getParentBodyId()).selectedIndex=-1;
$rootNode.find(".so-surg-details-doc input[type=text]").focus(function(){$(this).addClass("so-details-comment-active").removeClass("so-details-comment-not-active");
}).focusout(function(){$(this).removeClass("so-details-comment-active").addClass("so-details-comment-not-active");
self.setStaffInstruction(this.value);
});
$rootNode.find(".so-defer-to-anes").change(function(){if($(this).prop("checked")){$rootNode.find(".so-surg-details-anes-select").prop("disabled","disabled");
self.setDeferToAnesthesiologist(1);
}else{$rootNode.find(".so-surg-details-anes-select").removeAttr("disabled");
self.setDeferToAnesthesiologist(0);
}});
$rootNode.find(".so-details-duration").change(function(){if($(this).prop("checked")){self.setConcurentPref(1);
}else{self.setConcurentPref(0);
}self.updateDurationDisplay();
});
if(this.getPreloadMode()){this.preloadDetails();
}this.updateDurationDisplay();
};
SurgeryOrders.prototype.validateData=function(tabNumber){var parent=this.getParent();
var staff=parent.getSharedResource("staff");
var location=parent.getSharedResource("location");
var surgeonTabs=this.getAllSurgeonTabs();
var $rootNode=this.getRootNode();
var activeSurgId=this.getActiveSurgeonId();
var surgArr=this.getAllSurgeons();
var parentSelf=this.getCriterion();
var self=this;
var primSurgs={};
var hasChanged=false;
var procArr=[];
var powerPlanArr=[];
var jsonSurgArr=[];
var key,scriptRequest,selectedProcs,selectedPP,surgCnt,primSurg;
var control=this.getSearchControl();
var cnt=0;
var jsonStr={};
if((parseInt(location.locationCd,10)!==this.getLocationCd())||(parseInt(location.facilityId,10)!==this.getFacilityId())){hasChanged=true;
this.setLocationCd(parseInt(location.locationCd,10));
this.setFacilityId(parseInt(location.facilityId,10));
control.setFacilityId(parseInt(location.facilityId,10));
control.setLocationCd(parseInt(location.locationCd,10));
$rootNode.find(".so-order-results").html("");
}for(cnt=0;
cnt<staff.length;
cnt++){primSurg=staff[cnt].staffTeams[0];
primSurgs[primSurg.id]=primSurg.name;
if(!surgeonTabs[primSurg.id]){if(cnt===0){if(this.getPreloadMode()&&!this.getActiveSurgeonId()){this.handleSurgListChange(primSurg.id);
}this.addSurgeon(primSurg.id,primSurg.name,true);
$rootNode.find(".so-surgeon-list select").prepend("<option id='so-surg-option-"+primSurg.id+"' value = '"+primSurg.id+"'>"+primSurg.name+"</option>");
$rootNode.find(".so-proc-container").prepend(surgeonTabs[primSurg.id].createProcContainer());
}else{this.addSurgeon(primSurg.id,primSurg.name);
$rootNode.find(".so-surgeon-list select").append("<option id='so-surg-option-"+primSurg.id+"' value = '"+primSurg.id+"'>"+primSurg.name+"</option>");
$rootNode.find(".so-proc-container").append(surgeonTabs[primSurg.id].createProcContainer());
}hasChanged=true;
}}for(key in surgeonTabs){if(!primSurgs[key]){if(parseInt(key,10)===activeSurgId){for(surgCnt=0;
surgCnt<surgArr.length;
surgCnt++){if(surgArr[surgCnt].id===parseInt(key,10)){surgArr.splice(surgCnt,1);
}}this.handleSurgListChange(surgArr[0].id);
}delete surgeonTabs[key];
this.removeSurgeon(key);
$rootNode.find("#so-surg-cont-hdr-"+key).remove();
$rootNode.find("#surgProcCont"+key).remove();
$rootNode.find("#so-surg-option-"+key).remove();
this.updateDurationDisplay();
}else{selectedProcs=this.getSelectedOrders().PROC;
jsonSurgArr.push({person_id:parseInt(key,10)});
for(key in selectedProcs){procArr.push(selectedProcs[key].proc);
}}}selectedPP=this.getSelectedOrders().PP;
for(key in selectedPP){powerPlanArr.push(selectedPP[key].PP);
}if(hasChanged){jsonStr={};
jsonStr.surg_proc={person_id:parentSelf.person_id,skip_usr_order_priv_check:0,location_cd:parseInt(location.locationCd,10),facility_cd:parseInt(location.facilityId,10),surgeon:jsonSurgArr,procedure:procArr,powerPlans:powerPlanArr};
scriptRequest=new MP_Core.ScriptRequest();
jsonStr=JSON.stringify(jsonStr).replace(/"/g,"'");
jsonStr=jsonStr.replace(/:([0-9]+)/g,":$1.0");
scriptRequest.setProgramName("mp_surg_req_validate_proc");
scriptRequest.setParameters(["^MINE^","^"+jsonStr+"^"]);
scriptRequest.setAsync(true);
MP_Core.XMLCCLRequestCallBack({},scriptRequest,function(scriptReply){self.reload(tabNumber,scriptReply.getResponse());
});
}else{return true;
}};
SurgeryOrders.prototype.reload=function(tabNumber,recordData){var surgeonList=recordData.SURGEON;
var powerPlanArr=recordData.POWERPLANS;
var procDetails=recordData.PROCEDURE_LIST;
var surgeonTabs=this.getAllSurgeonTabs();
var $rootNode=$("#surgery"+this.getParent().getBaseCompId()+"tab"+this.getComponentId());
var $pplanList=$rootNode.find(".so-pp-container");
var selectedProcs=this.getSelectedOrders().PROC;
var selectedPP=this.getSelectedOrders().PP;
var isValid=false;
var procCnt,ppCnt,procDetailCnt,key,newProcArr,surgId,$procList,selectedPPLen,delCnt,surgCnt,sameProcCnt;
var parent=this.getParent();
var deletedProcedures={};
var deletedPowerPlans={};
if(!recordData){return;
}this.setProcFavorites(recordData.PROC_FAVORITES.SURGEON);
for(surgCnt=0;
surgCnt<surgeonList.length;
surgCnt++){surgId=surgeonList[surgCnt].PERSON_ID;
newProcArr=surgeonList[surgCnt].PROCEDURE;
$procList=$rootNode.find("#surgProcCont"+surgId);
for(key in selectedProcs){isValid=false;
for(procCnt=0;
procCnt<newProcArr.length;
procCnt++){if(parseInt(key,10)===parseInt(newProcArr[procCnt].SYN_ID,10)){isValid=true;
for(procDetailCnt=0;
procDetailCnt<procDetails.length;
procDetailCnt++){if(procDetails[procDetailCnt].SYNONYM_ID===parseInt(key,10)){surgeonTabs[surgId].updateProcDetails(procDetails[procDetailCnt]);
}}}}if(!isValid){if(!deletedProcedures[selectedProcs[key].proc.synonym]){deletedProcedures[selectedProcs[key].proc.synonym]=selectedProcs[key].count;
}sameProcCnt=surgeonTabs[surgId].getSameProcedureCnt(key);
for(delCnt=0;
delCnt<sameProcCnt;
delCnt++){$procList.find(".so-proc-row-"+key).remove();
surgeonTabs[surgId].removeProcedureById(key);
if(selectedProcs[key].count===1){delete selectedProcs[key];
}else{selectedProcs[key].count--;
}}}}}for(key in selectedPP){isValid=false;
selectedPPLen=selectedPP[key].count;
for(ppCnt=0;
ppCnt<powerPlanArr.length;
ppCnt++){if(parseInt(key,10)===parseInt(powerPlanArr[ppCnt].PATH_CAT_ID,10)){isValid=true;
}}if(!isValid){if(!deletedPowerPlans[selectedPP[key].PP.PW_CAT_SYN_NAME]){deletedPowerPlans[selectedPP[key].PP.PW_CAT_SYN_NAME]=selectedPP[key].count;
}if(selectedPP[key].count===1){delete selectedPP[key];
}else{selectedPP[key].count--;
}for(delCnt=0;
delCnt<selectedPPLen;
delCnt++){$pplanList.find(".so-pp-row-"+key).remove();
this.removePowerPlanById(key);
}}}this.setDeletedProcedures(deletedProcedures);
this.setDeletedPowerPlans(deletedPowerPlans);
this.handleSurgListChange(this.getActiveSurgeonId());
this.updateDurationDisplay();
parent.renderViewAsync(tabNumber,this,this.getComponentId());
};
SurgeryOrders.prototype.preloadDetails=function(){var parent=this.getParent();
var $rootNode=$("#surgery"+parent.getBaseCompId()+"tab"+this.getComponentId());
var details=parent.getSharedResource("details");
var anesArr=this.getAnesthesiaArr();
var patientArr=this.getPatientTypeArr();
var timeFrameArr=this.getTimeFrameArr();
var patientCnt,anesCnt,timeFrameCnt;
var timeRangeObj={};
for(patientCnt=0;
patientCnt<patientArr.length;
patientCnt++){if(parseInt(details.patientType.codeValue,10)===parseInt(patientArr[patientCnt].CODE_VALUE,10)){this.setPatientType(details.patientType);
$rootNode.find(".so-surg-details-patient-select").val(details.patientType.codeValue);
}}for(anesCnt=0;
anesCnt<anesArr.length;
anesCnt++){if(parseInt(details.anesthesia.codeValue,10)===parseInt(anesArr[anesCnt].CODE_VALUE,10)){this.setAnesthesia(details.anesthesia);
$rootNode.find(".so-surg-details-anes-select").val(details.anesthesia.codeValue);
}}if(parseInt(details.deferToAnesthesia,10)===1){$rootNode.find(".so-defer-to-anes").prop("checked",true);
$rootNode.find(".so-surg-details-anes-select").prop("disabled","disabled");
this.setDeferToAnesthesiologist(details.deferToAnesthesia);
}this.setStaffInstruction(details.staffInstruction);
$rootNode.find(".so-surg-details-doc input[type=text]").val(details.staffInstruction);
if(parseInt(details.concurrentInd,10)===1){this.setConcurentPref(details.concurrentInd);
$rootNode.find(".so-details-duration").prop("checked",true);
}if(parseInt(details.blockTimeInd,10)===1){this.setBlockTimePref(parseInt(details.blockTimeInd,10));
$rootNode.find(".so-surg-details-block input").prop("checked",true);
}if(details.timeframe.codeValue){for(timeFrameCnt=0;
timeFrameCnt<timeFrameArr.length;
timeFrameCnt++){if(parseInt(details.timeframe.codeValue,10)===parseInt(timeFrameArr[timeFrameCnt].CODE_VALUE,10)){timeRangeObj=this.getTimeRangeSelectionDates(timeFrameArr[timeFrameCnt].DEFINITION);
this.updateTimeRangeDom(timeRangeObj);
this.updateTimeFrameSelection(parseInt(timeFrameArr[timeFrameCnt].CODE_VALUE,10),timeFrameArr[timeFrameCnt].DISPLAY);
$rootNode.find(".so-surg-details-date-select").prop("selectedIndex",timeFrameCnt);
break;
}}}};
SurgeryOrders.prototype.createDateSelection=function(){var html="";
var blockChk="";
var timeFrameArr=this.getTimeFrameArr();
var arrCnt=0;
var timeFrameOpHtml="";
for(arrCnt=0;
arrCnt<timeFrameArr.length;
arrCnt++){timeFrameOpHtml+="<option codeset = '"+timeFrameArr[arrCnt].CODE_VALUE+"' display='"+timeFrameArr[arrCnt].DISPLAY+"' value="+timeFrameArr[arrCnt].CODE_VALUE+" description='"+timeFrameArr[arrCnt].DEFINITION+"'>"+timeFrameArr[arrCnt].DISPLAY+"</option>";
}blockChk=this.getBlockTimePref()===1?"checked":"";
html+="<div class='so-surg-details so-surg-details-pick'><span>"+this.sdwfI18n.calendarLbl+": </span><select class='so-surg-details-date-select'>"+timeFrameOpHtml+"</select></div>";
html+="<div class=' so-surg-details so-surg-details-cal'><div class='so-date-text-box'><span>"+this.sdwfI18n.startDateCalLbl+": </span><input id='startDateText' type='text' readonly='readonly'></div><div class='so-date-text-box'><span>"+this.sdwfI18n.endDateCalLbl+": </span><input id='endDateText' type='text' readonly='readonly'></div><div title='"+this.sdwfI18n.resetCalLbl+"' class='so-reset-calendar'></div></div>";
html+="<div class=' so-surg-details so-surg-details-block'><label><input type='checkbox' name='time' value='blocktime' "+blockChk+"><span>"+this.sri18n.blockTime+"</span></label></div>";
return html;
};
SurgeryOrders.prototype.createPatientInfo=function(){var html="";
var typeCnt=0;
var anesCnt=0;
var concuProcChk=this.getConcurentPref()===1?"checked":"";
var patientTypeArr=this.getPatientTypeArr();
var anesthesiaArr=this.getAnesthesiaArr();
html+="<div class='so-surg-details so-surg-details-patient'><span>"+this.sdwfI18n.patientTypeText+": </span><select class='so-surg-details-patient-select' id='so-surg-details-patient"+this.getParentBodyId()+"'>";
for(typeCnt=0;
typeCnt<patientTypeArr.length;
typeCnt++){html+="<option value='"+patientTypeArr[typeCnt].CODE_VALUE+"'>"+patientTypeArr[typeCnt].DISPLAY+"</option>";
}html+="</select></div>";
html+="<div class='so-surg-details so-surg-details-anes'><span>"+this.sdwfI18n.anesthesiaText+": </span><select class='so-surg-details-anes-select' id='so-surg-details-anes"+this.getParentBodyId()+"'>";
for(anesCnt=0;
anesCnt<anesthesiaArr.length;
anesCnt++){html+="<option value='"+anesthesiaArr[anesCnt].CODE_VALUE+"'>"+anesthesiaArr[anesCnt].DISPLAY+"</option>";
}html+="</select><label><input type='checkbox' name='anes' value='defer' class='so-defer-to-anes'><span>"+this.sdwfI18n.deferToAnesthesiaText+"</span></label></div>";
html+="<div class='so-surg-details so-surg-details-duration'><span>"+this.sdwfI18n.durationText+": </span><span class='so-duration-calc'></span><label><input type='checkbox' name='dur' value='duration' "+concuProcChk+" class='so-details-duration'><span>"+this.sdwfI18n.concurrentProcedures+"</span></label></div>";
html+="<div class='so-surg-details so-surg-details-doc'><span>"+this.sdwfI18n.instructionText+": </span><br><input type='text'/></div>";
return html;
};
SurgeryOrders.prototype.writePreferences=function(jsonObject,prefIdent,saveAsync,surgeonId){var sJson;
var ar;
var url;
var XMLRequest=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
if(!saveAsync){saveAsync=false;
}XMLRequest.onreadystatechange=function(){var jsonEval;
var recordData;
var errAr;
var statusData;
var x,xl;
var ss;
if(this.readyState===4&&this.status===200){MP_Util.LogScriptCallInfo(null,this,"mp_core.js","WritePreferences");
jsonEval=JSON.parse(this.responseText);
recordData=jsonEval.RECORD_DATA;
if(recordData.STATUS_DATA.STATUS==="Z"){return;
}else{if(recordData.STATUS_DATA.STATUS==="S"){return;
}else{MP_Util.LogScriptCallError(null,this,"mp_core.js","WritePreferences");
errAr=[];
statusData=recordData.STATUS_DATA;
errAr.push("STATUS: "+statusData.STATUS);
for(x=0,xl=statusData.SUBEVENTSTATUS.length;
x<xl;
x++){ss=statusData.SUBEVENTSTATUS[x];
errAr.push(ss.OPERATIONNAME,ss.OPERATIONSTATUS,ss.TARGETOBJECTNAME,ss.TARGETOBJECTVALUE);
}window.status="Error saving user preferences: "+errAr.join(",");
}}}};
sJson=(jsonObject!==null)?JSON.stringify(jsonObject):"";
sJson=sJson.replace(/:([0-9]+)/g,":$1.0");
ar=["^mine^",surgeonId+".0","^"+prefIdent+"^","~"+sJson+"~"];
if(CERN_BrowserDevInd){url="MP_MAINTAIN_USER_PREFS?parameters="+ar.join(",");
XMLRequest.open("GET",url,saveAsync);
XMLRequest.send(null);
}else{XMLRequest.open("GET","MP_MAINTAIN_USER_PREFS",saveAsync);
XMLRequest.send(ar.join(","));
}};
SurgeryOrders.prototype.storeTabData=function(next){var surgeonTabObjs=this.getAllSurgeonTabs();
var procedures={};
var surgeonId;
var procArr;
var orderMessage=this.spwfI18n.procedureAlertMessage;
var missingDetails=this.surgArchI18n.missingDetails;
var status={message:"",value:true,data:{procedures:{},powerPlans:{},details:{}}};
for(surgeonId in surgeonTabObjs){if(surgeonTabObjs.hasOwnProperty(surgeonId)){procArr=surgeonTabObjs[surgeonId].getProcArr();
if(!procArr.length&&next){status.value=false;
status.message="<div class='surgery-request-alert-wrapper'><div class='surgery-request-blue-cross-image'></div><span>"+missingDetails+" "+orderMessage+"</span><div>";
}procedures[surgeonId]=procArr;
}}status.data.procedures=procedures;
status.data.powerPlans=this.getPowerPlans();
status.data.details={blockTimeInd:this.getBlockTimePref(),patientType:this.getPatientType(),deferToAnesthesia:this.getDeferToAnesthesiologist(),anesthesia:this.getAnesthesia(),staffInstruction:this.getStaffInstruction(),duration:this.getDuration(),concurrentInd:this.getConcurentPref(),dateRequest:this.getCalendarSelection(),durationDisplay:this.getDurationDisplay(),isNextAvailable:this.getNextAvailableInd(),selectedTimeFrame:this.getSelectedTimeFrameData()};
return status;
};
SurgeryOrders.prototype.submitDataToSharedResource=function(next){var userId=this.getCriterion().provider_id;
var json={SURGERY_DETAILS_PREFS:{BLOCKTIME_CHECKBOX_PREF:this.getBlockTimePref()}};
var $alertBody=$("#"+this.getParentBodyId()).find(".surgery-request-alert-msg");
var parent=this.getParent();
var parentId=parent.getId();
var modalDialogId=parent.getModalDialog("surgery"+parentId).getId();
var status={};
if(this.checkDeletedOrdersExist()){this.createDeletedOrdersDialog();
}if(this.getProcDetailCCLReq()>0){this.setWaitForProcDetails({status:true,goToNext:next});
$("#vwpModalDialog"+modalDialogId).append("<div class='sr-overlay-div'><span class='sr-img-spinner'></span></div>");
return false;
}status=this.storeTabData(next);
if(!status.value){$alertBody.html(status.message).show();
return false;
}parent.setSharedResource("procedures",status.data.procedures);
parent.setSharedResource("powerPlans",status.data.powerPlans);
parent.setSharedResource("details",status.data.details);
this.writePreferences(json,"SURGERY_DETAILS_PREFS",true,userId);
$alertBody.hide();
return true;
};
SurgeryOrders.prototype.calculateDuration=function(){var surgeonTabObjs=this.getAllSurgeonTabs();
var concurrentInd=this.getConcurentPref();
var surgeonId;
var surgTabObj;
var procArr=[];
var cnt=0;
var duration=0;
var durationArr=[];
for(surgeonId in surgeonTabObjs){if(surgeonTabObjs.hasOwnProperty(surgeonId)){surgTabObj=surgeonTabObjs[surgeonId];
procArr=surgTabObj.getProcArr();
for(cnt=0;
cnt<procArr.length;
cnt++){duration+=procArr[cnt].getProcDuration();
durationArr.push(procArr[cnt].getProcDuration());
}}}if(concurrentInd<=0){this.setDuration(duration);
}else{duration=durationArr.length===0?0:Math.max.apply(null,durationArr);
this.setDuration(duration);
}};
SurgeryOrders.prototype.updateDurationDisplay=function(){var duration;
var hourText=this.sdwfI18n.hourText;
var minuteText=this.sdwfI18n.minuteText;
var hoursText=this.sdwfI18n.hoursText;
var minutesText=this.sdwfI18n.minutesText;
var durationDisplay="";
var hours;
var minutes;
this.calculateDuration();
duration=this.getDuration();
if(duration>60){hours=Math.floor(duration/60);
minutes=duration%60;
if(hours===1&&minutes===1){durationDisplay=hours+" "+hourText+" "+minutes+" "+minuteText;
}else{if(minutes===1){durationDisplay=hours+" "+hoursText+" "+minutes+" "+minuteText;
}else{if(hours===1){durationDisplay=hours+" "+hourText+" "+minutes+" "+minutesText;
}else{durationDisplay=hours+" "+hoursText+" "+minutes+" "+minutesText;
}}}}else{if(duration===1){durationDisplay=duration+" "+minuteText;
}else{durationDisplay=duration+" "+minutesText;
}}this.setDurationDisplay(durationDisplay);
this.getRootNode().find(".so-duration-calc").text(durationDisplay);
};
SurgeryOrders.prototype.updateDefaultAnesthesia=function(anesthesiaCd){var anesthesiaArr=this.getAnesthesiaArr();
var cnt=0;
anesthesiaCd=parseInt(anesthesiaCd,10);
for(cnt=0;
cnt<anesthesiaArr.length;
cnt++){if(anesthesiaArr[cnt].CODE_VALUE===anesthesiaCd){this.setAnesthesia({codeValue:anesthesiaArr[cnt].CODE_VALUE,display:anesthesiaArr[cnt].DISPLAY});
document.getElementById("so-surg-details-anes"+this.getParentBodyId()).selectedIndex=cnt;
break;
}}};
SurgeryOrders.SurgeonTab=function(surgeonObj,parentSelf){this.surgeonObj=surgeonObj;
this.parentSelf=parentSelf;
this.procArr=[];
};
SurgeryOrders.SurgeonTab.prototype.getSurgeonObj=function(){return this.surgeonObj;
};
SurgeryOrders.SurgeonTab.prototype.getParent=function(){return this.parentSelf;
};
SurgeryOrders.SurgeonTab.prototype.getProcArr=function(){return this.procArr;
};
SurgeryOrders.SurgeonTab.prototype.setProcArr=function(procArr){var cnt=0;
for(cnt=0;
cnt<procArr.length;
cnt++){procArr[cnt].setParent(this);
}this.procArr=procArr;
};
SurgeryOrders.SurgeonTab.prototype.addProcedure=function(orderObj){this.procArr.push(orderObj);
};
SurgeryOrders.SurgeonTab.prototype.updateProcDetails=function(procDetails){var parent=this.getParent();
var procArr=this.getProcArr();
var cnt;
var anesthesia=parent.getAnesthesia();
var proc;
for(cnt=0;
cnt<procArr.length;
cnt++){proc=procArr[cnt];
if(parseInt(proc.getSynId(),10)===procDetails.SYNONYM_ID){proc.setCleanupTime(procDetails.PROC_CLEANUP_TIME);
proc.setSetupTime(procDetails.PROC_SETUP_TIME);
proc.setProcDuration(procDetails.PROC_DUR_TIME);
if(parseInt(anesthesia.codeValue,10)===parseInt(proc.getDefaultAnesTypeCd(),10)&&proc.getIsPrimary()){parent.updateDefaultAnesthesia(procDetails.ANESTHESIA_TYPE_CD);
}proc.setDefaultAnesTypeCd(procDetails.ANESTHESIA_TYPE_CD);
}}};
SurgeryOrders.SurgeonTab.prototype.removeProcedureByIndex=function(index){var procArr=this.getProcArr();
var parent=this.getParent();
var selectedProcs=parent.getSelectedOrders().PROC;
var isProcPrimary=procArr[index].getIsPrimary();
if(selectedProcs[procArr[index].getSynId()].count===1){delete selectedProcs[procArr[index].getSynId()];
}else{selectedProcs[procArr[index].getSynId()].count--;
}procArr.splice(index,1);
if(isProcPrimary){this.makeProcPrimary(null);
parent.setDefaultPrimaryProc();
}if(procArr.length===0){$("#surgProcCont"+this.getSurgeonObj().id).append("<div class = 'so-surg-no-result'>"+parent.soI18n.none+"</div>");
}parent.updateDurationDisplay();
};
SurgeryOrders.SurgeonTab.prototype.getSameProcedureCnt=function(synId){var procArr=this.getProcArr();
var cnt;
var procCnt=0;
for(cnt=0;
cnt<procArr.length;
cnt++){if(parseInt(procArr[cnt].getSynId(),10)===parseInt(synId,10)){procCnt++;
}}return procCnt;
};
SurgeryOrders.SurgeonTab.prototype.removeProcedureById=function(synId){var procArr=this.getProcArr();
var $procCont=$("#surgProcCont"+this.getSurgeonObj().id);
var cnt;
var parent=this.getParent();
for(cnt=0;
cnt<procArr.length;
cnt++){if(parseInt(procArr[cnt].getSynId(),10)===parseInt(synId,10)){if(procArr[cnt].getIsPrimary()){this.makeProcPrimary(null);
}procArr.splice(cnt,1);
}}if(procArr.length===0&&$procCont.find(".so-surg-no-result").length===0){$procCont.append("<div class = 'so-surg-no-result'>"+parent.soI18n.none+"</div>");
}this.getParent().updateDurationDisplay();
};
SurgeryOrders.SurgeonTab.prototype.createProcContainer=function(){var surgObj=this.getSurgeonObj();
var html="";
var parent=this.getParent();
html+="<div class = 'so-surg-cont-headers' id='so-surg-cont-hdr-"+surgObj.id+"' title='"+surgObj.name+"'><div>"+parent.soI18n.addedProcedureText+" - "+surgObj.name+"</div></div>";
html+="<div id = 'surgProcCont"+surgObj.id+"' class = 'so-surg-cont-body' surg_id = '"+surgObj.id+"'>";
html+="<div class = 'so-surg-no-result'>"+parent.soI18n.none+"</div>";
html+="</div>";
return html;
};
SurgeryOrders.SurgeonTab.prototype.createProcRows=function(){var html="";
var $domContainer=$("#surgProcCont"+this.getSurgeonObj().id);
var procArr=this.getProcArr();
var cnt=0;
var parent=this.getParent();
if(procArr.length>0){$domContainer.find(".so-surg-no-result").remove();
}for(cnt=0;
cnt<procArr.length;
cnt++){parent.setSelectedOrders(procArr[cnt].getSynId(),procArr[cnt].getSynName(),"PROC");
html=procArr[cnt].createRowHtml();
$domContainer.append(html);
if(procArr[cnt].getIsPrimary()){this.makeProcPrimary(cnt);
}}};
SurgeryOrders.SurgeonTab.prototype.handleOrderClick=function(synId,orderType,synName){var orderObj=new SurgeryOrders.Order(orderType,synId,synName,this);
var html;
var domContainer=$("#surgProcCont"+this.getSurgeonObj().id);
var scriptRequest=new MP_Core.ScriptRequest();
var jsonStr="";
var parent=this.getParent();
this.addProcedure(orderObj);
parent.setSelectedOrders(synId,synName,"PROC");
html=orderObj.createRowHtml();
domContainer.find(".so-surg-no-result").remove();
domContainer.append(html);
jsonStr={DETAILS:{USER_ID:parent.getCriterion().person_id,PROCEDURE_CNT:1,PROCEDURE_LIST:[{SYNONYM_ID:parseInt(synId,10),SURGEON_PRSNL_ID:parseInt(this.getSurgeonObj().id,10)}],LOCATION_CD:parseInt(parent.getLocationCd(),10)}};
jsonStr=JSON.stringify(jsonStr).replace(/"/g,"'");
jsonStr=jsonStr.replace(/:([0-9]+)/g,":$1.0");
scriptRequest.setProgramName("MP_GET_SURG_PROC_DETAIL");
scriptRequest.setParameters(["^MINE^","^"+jsonStr+"^"]);
scriptRequest.setAsync(true);
parent.setProcDetailCCLReq(parent.getProcDetailCCLReq()+1);
MP_Core.XMLCCLRequestCallBack({},scriptRequest,function(scriptReply){orderObj.handleOrderDetails(scriptReply.getResponse());
parent.updateDurationDisplay();
if(!parent.getPrimaryProcObj()){parent.setDefaultPrimaryProc();
}parent.setProcDetailCCLReq(parent.getProcDetailCCLReq()-1);
});
};
SurgeryOrders.SurgeonTab.prototype.makeProcPrimary=function(index){var procArr=this.getProcArr();
var parent=this.getParent();
if(!procArr[index]){parent.setPrimaryProcObj(null);
document.getElementById("so-surg-details-anes"+parent.getParentBodyId()).selectedIndex=-1;
return false;
}procArr[index].setIsPrimary(true);
parent.setPrimaryProcObj(procArr[index]);
parent.updateDefaultAnesthesia(procArr[index].getDefaultAnesTypeCd());
return true;
};
SurgeryOrders.Order=function(type,id,name,parentSelf){this.type=type;
this.synId=id;
this.orderName=name;
this.synFavId=0;
this.modifiers=[];
this.details="";
this.isPrimary=false;
this.setupTime=0;
this.cleanupTime=0;
this.procDuration=0;
this.defaultAnesTypeCd=0;
this.parentSelf=parentSelf;
this.sdwfI18n=i18n.discernabu.surgery_details;
};
SurgeryOrders.Order.prototype.getParent=function(){return this.parentSelf;
};
SurgeryOrders.Order.prototype.setParent=function(parentObj){this.parentSelf=parentObj;
};
SurgeryOrders.Order.prototype.getDefaultAnesTypeCd=function(){return this.defaultAnesTypeCd;
};
SurgeryOrders.Order.prototype.setDefaultAnesTypeCd=function(cd){this.defaultAnesTypeCd=cd;
};
SurgeryOrders.Order.prototype.getProcDuration=function(){return this.procDuration;
};
SurgeryOrders.Order.prototype.setProcDuration=function(time){this.procDuration=time;
};
SurgeryOrders.Order.prototype.getCleanupTime=function(){return this.cleanupTime;
};
SurgeryOrders.Order.prototype.setCleanupTime=function(time){this.cleanupTime=time;
};
SurgeryOrders.Order.prototype.getSetupTime=function(){return this.setupTime;
};
SurgeryOrders.Order.prototype.setSetupTime=function(time){this.setupTime=time;
};
SurgeryOrders.Order.prototype.getIsPrimary=function(){return this.isPrimary;
};
SurgeryOrders.Order.prototype.setIsPrimary=function(isPrim){this.isPrimary=isPrim;
};
SurgeryOrders.Order.prototype.getDetails=function(){return this.details;
};
SurgeryOrders.Order.prototype.setDetails=function(detail){this.details=detail.replace(/['"]+/g,"");
};
SurgeryOrders.Order.prototype.getModifiers=function(){return this.modifiers;
};
SurgeryOrders.Order.prototype.addModifier=function(mod){this.modifiers.push(mod);
};
SurgeryOrders.Order.prototype.getSynFavId=function(){return this.synFavId;
};
SurgeryOrders.Order.prototype.setSynFavId=function(id){this.synFavId=id;
};
SurgeryOrders.Order.prototype.getSynName=function(){return this.orderName;
};
SurgeryOrders.Order.prototype.getSynId=function(){return this.synId;
};
SurgeryOrders.Order.prototype.getType=function(){return this.type;
};
SurgeryOrders.Order.prototype.handleOrderDetails=function(recordData){var procDetail=null;
if(recordData.PROCEDURE_LIST.length>0){procDetail=recordData.PROCEDURE_LIST[0];
this.setProcDuration(procDetail.PROC_DUR_TIME);
this.setSetupTime(procDetail.PROC_SETUP_TIME);
this.setCleanupTime(procDetail.PROC_CLEANUP_TIME);
this.setDefaultAnesTypeCd(procDetail.ANESTHESIA_TYPE_CD);
}};
SurgeryOrders.Order.prototype.createRowHtml=function(){var html="";
var primaryLbl=this.sdwfI18n.primaryLbl;
var addModifierLbl=this.sdwfI18n.addModifierLbl;
var commentPlaceHolder=this.sdwfI18n.procDetails;
var domObj;
var type=this.getType();
var modifiers=this.getModifiers();
var modifierHtml="";
var cnt=0;
if(type==="PROC"){for(cnt=0;
cnt<modifiers.length;
cnt++){modifierHtml+="<div class='so-modifier-selected'><div class='so-modifier-name' title='"+modifiers[cnt].display+"'>"+modifiers[cnt].display+"</div><div class='so-modifier-remove-btn'></div></div>";
}html+="<div class = 'so-proc-row so-proc-row-"+this.getSynId()+"'><div class = 'so-proc-block1'><div class = 'so-order-name-btn'><div class='so-order-name' title='"+this.getSynName()+"'>"+this.getSynName()+"</div><div class='so-proc-block2'><button class='so-proc-primary-btn "+(this.getIsPrimary()?"so-proc-primary-btn-active":"")+"'>"+primaryLbl+"</button><div class = 'so-order-remove-btn'></div></div></div><div class = 'so-proc-modifier'><div class='so-proc-modifier-list'>"+modifierHtml+"</div><span class = 'so-addModifierLink'>+"+addModifierLbl+"</span></div><div class = 'so-proc-comment'><textarea placeHolder='"+commentPlaceHolder+"' class = 'so-proc-comment-text'></textarea></div></div><div class = 'so-proc-block3'></div></div>";
}else{html+="<div class = 'so-pp-row so-pp-row-"+this.getSynId()+"'><div class = 'powerplan-icon'></div><div class = 'so-pp-name' title='"+this.getSynName()+"'>"+this.getSynName()+"</div><div class = 'so-order-remove-btn'></div></div>";
}domObj=$(html);
if(modifiers.length===3){domObj.find(".so-addModifierLink").hide();
}this.postProcessor(domObj);
return domObj;
};
SurgeryOrders.Order.prototype.postProcessor=function(domObj){var self=this;
var type=this.getType();
if(type==="PROC"){$(domObj).on("click",".so-addModifierLink",function(){self.createModifierDropdown(domObj);
$(domObj).find(".so-modifier-item").removeClass("so-modifier-hide").addClass("so-modifier-show").find(".so-modifier-highlight").removeClass("so-modifier-highlight");
$(domObj).find(".so-proc-modifier-sec .search-input").val("").focus();
});
$(domObj).on("keyup",".search-input",function(){var searchVal=$(this).val();
var modifierArr=self.getParent().getParent().getModifierArr();
var modifierCnt=0;
var $modifierItem;
function highlightValue(inString,term){return inString.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)("+term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi,"\\$1").split(" ").join("|")+")(?![^<>]*>)(?![^&;]+;)","gi"),"<span class='so-modifier-highlight'>$1</span>");
}$(domObj).find(".so-modifier-item").removeClass("so-modifier-hide").addClass("so-modifier-show");
for(modifierCnt;
modifierCnt<modifierArr.length;
modifierCnt++){$modifierItem=$(domObj).find(".so-modifierDropdown #"+modifierArr[modifierCnt].CODE_VALUE);
if((modifierArr[modifierCnt].DISPLAY).toLowerCase().indexOf(searchVal)===-1){$modifierItem.removeClass("so-modifier-show").addClass("so-modifier-hide");
}else{$modifierItem.html(highlightValue(modifierArr[modifierCnt].DISPLAY,searchVal));
}}});
$(domObj).on("click",".so-modifier-item",function(){var modifierTemp={};
var modifiers=self.getModifiers();
var $addModiferLink=domObj.find(".so-addModifierLink");
modifierTemp.codeValue=$(this).attr("id");
modifierTemp.display=$(this).attr("name");
self.addModifier(modifierTemp);
domObj.find(".so-proc-modifier-list").append("<div class='so-modifier-selected'><div class='so-modifier-name' title='"+modifierTemp.display+"'>"+modifierTemp.display+"</div><div class='so-modifier-remove-btn'></div></div>");
$(".so-proc-modifier-sec").removeClass("so-modifier-show").addClass("so-modifier-hide");
if(modifiers.length>2){$addModiferLink.hide();
}else{$addModiferLink.show();
}});
$(domObj).on("click",".so-modifier-remove-btn",function(){var modifiers=self.getModifiers();
var rowElem=$(this).closest(".so-modifier-selected");
modifiers.splice(rowElem.parent().children().index(rowElem),1);
rowElem.remove();
domObj.find(".so-addModifierLink").show();
});
domObj.find(".so-proc-comment-text").focus(function(){$(this).addClass("so-proc-comment-active");
}).focusout(function(){$(this).removeClass("so-proc-comment-active");
self.setDetails(this.value);
}).val(this.getDetails());
domObj.find(".so-order-remove-btn").on("click",function(){var rowElem=$(this).closest(".so-proc-row");
var rowIndex=rowElem.parent().children().index(rowElem);
rowElem.remove();
self.getParent().removeProcedureByIndex(rowIndex);
});
}else{domObj.find(".so-order-remove-btn").on("click",function(){var rowElem=$(this).closest(".so-pp-row");
self.getParent().removePowerPlanByIndex(rowElem.parent().children().index(rowElem)-1);
rowElem.remove();
});
}};
SurgeryOrders.Order.prototype.createModifierDropdown=function(domObj){var html="";
var count=0;
var parent=this.getParent().getParent();
var modifierArr=parent.getModifierArr();
var $rootNode=parent.getRootNode();
var $procModifier=$(domObj).find(".so-addModifierLink");
var modifierSectionNode=$rootNode.find(".so-proc-modifier-sec");
var selectedModifiers=this.getModifiers();
if($rootNode.find(".so-modifierDropdown").length===0){html+="<div class='so-proc-modifier-sec'><input type='text' name='search-modifier' placeholder='"+this.sdwfI18n.searchModifiers+"' class='search-input'><div class='so-modifierDropdown'>";
for(count=0;
count<modifierArr.length;
count++){html+="<div class='so-modifier-item' id='"+modifierArr[count].CODE_VALUE+"' title='"+modifierArr[count].DISPLAY+"' name='"+modifierArr[count].DISPLAY+"'>"+modifierArr[count].DISPLAY+"</div>";
}html+="</div></div>";
$procModifier.before(html);
if(parent.getPreloadMode()){for(count=0;
count<selectedModifiers.length;
count++){$rootNode.find("#"+selectedModifiers[count].codeValue).addClass("so-mod-hidden");
}}}else{$(".so-mod-hidden").removeClass("so-mod-hidden");
for(count=0;
count<selectedModifiers.length;
count++){$rootNode.find("#"+selectedModifiers[count].codeValue).addClass("so-mod-hidden");
}modifierSectionNode.removeClass("so-modifier-hide").addClass("so-modifier-show");
$procModifier.before(modifierSectionNode);
}};
SurgeryOrders.Search=function(element){this.suggestionLimit=10;
this.facilityId=0;
this.locationCd=0;
this.patientId=0;
this.providerId=0;
this.pprCd=0;
MPageControls.CclSearch.call(this,element);
this.setProgramName("MP_SURGERY_ORDER_SEARCH");
this.setListItemTemplate(MPageControls.getDefaultTemplates().orderSearchItem);
this.setTemplate(MPageControls.getDefaultTemplates().orderSearch);
};
SurgeryOrders.Search.prototype=new MPageControls.CclSearch();
SurgeryOrders.Search.prototype.setPprCd=function(cd){this.pprCd=parseInt(cd,10);
};
SurgeryOrders.Search.prototype.getPprCd=function(){return this.pprCd;
};
SurgeryOrders.Search.prototype.setSuggestionLimit=function(cnt){this.suggestionLimit=parseInt(cnt,10);
};
SurgeryOrders.Search.prototype.getSuggestionLimit=function(){return this.suggestionLimit;
};
SurgeryOrders.Search.prototype.setFacilityId=function(id){this.facilityId=parseInt(id,10);
};
SurgeryOrders.Search.prototype.getFacilityId=function(){return this.facilityId;
};
SurgeryOrders.Search.prototype.setLocationCd=function(cd){this.locationCd=parseInt(cd,10);
};
SurgeryOrders.Search.prototype.getLocationCd=function(){return this.locationCd;
};
SurgeryOrders.Search.prototype.setPatientId=function(id){this.patientId=parseInt(id,10);
};
SurgeryOrders.Search.prototype.getPatientId=function(){return this.patientId;
};
SurgeryOrders.Search.prototype.setProviderId=function(id){this.providerId=parseInt(id,10);
};
SurgeryOrders.Search.prototype.getProviderId=function(){return this.providerId;
};
SurgeryOrders.Search.prototype.buildParameters=function(){return"^MINE^,^"+this.getValue()+"^,"+this.getSuggestionLimit()+","+this.getFacilityId()+".0,"+this.getProviderId()+".0,"+this.getPatientId()+".0,"+this.getPprCd()+".0,"+this.getLocationCd()+".0";
};
SurgeryOrders.Search.prototype.callProgram=function(callback){var self=this;
var reqNumber;
var url;
var xhr=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
if(this.getValue().length<3){return;
}this.setRequestCount(this.getRequestCount()+1);
reqNumber=this.getRequestCount();
xhr.onreadystatechange=function(){if(xhr.readyState===4&&xhr.status===200){MP_Util.LogScriptCallInfo(null,this,"surgery request order search","callProgram");
self.handleSuccess(reqNumber,xhr.responseText,callback);
}};
if(CERN_BrowserDevInd){url=this.getInBrowserDir()+this.getProgramName()+"?parameters="+this.buildParameters();
xhr.open("GET",url);
xhr.send(null);
}else{xhr.open("GET",this.getProgramName());
xhr.send(this.buildParameters());
}};
SurgeryOrders.Search.prototype.handleSuccess=function(reqNumber,responseText,callback){var jsonSearch;
if(reqNumber!==this.getRequestCount()||!responseText){return;
}jsonSearch=JSON.parse(responseText);
if(jsonSearch.RECORD_DATA.STATUS_DATA.STATUS==="F"){logger.logError(this.getProgramName()+" failed: "+responseText);
}else{if(callback){callback(this.makeContext(jsonSearch));
}else{this.setSuggestions(this.makeContext(jsonSearch));
}}};
SurgeryOrders.Search.prototype.makeContext=function(returnData){var orders=[];
var procedures=returnData.RECORD_DATA.PROCEDURES;
var powerPlans=returnData.RECORD_DATA.PLANS;
$.each(procedures,function(i,item){if(item.SYNONYM){item.content=item.SYNONYM;
}item.iconClass="";
orders.push(item);
});
$.each(powerPlans,function(i,item){if(item.PW_CAT_SYN_NAME){item.content=item.PW_CAT_SYN_NAME;
}item.iconClass="powerplan-icon";
orders.push(item);
});
orders.sort(function(a,b){if(a.content>b.content){return 1;
}if(a.content<b.content){return -1;
}return 0;
});
return orders;
};

function SurgeryStaffLocation(parentSelf,tabId,criterion){this.criterion=criterion;
this.parentSelf=parentSelf;
this.componentId=tabId;
this.surgArchI18n=i18n.discernabu.surgery_architecture;
this.tabName=[this.surgArchI18n.staff,this.surgArchI18n.location];
this.sswfI18n=i18n.discernabu.surgery_staff;
this.primaryPhyId=null;
this.primaryPhyName=null;
this.surgeonType={};
this.bedrockFilters=[];
this.primarySurgeonFilter={};
this.containerCount=0;
this.containersObj={};
this.primSurgObj={};
this.staffOnePrimId=null;
this.commTypeArr=[];
this.defaultCommType=-1;
this.slwfI18n=i18n.discernabu.surgery_locations;
this.replyData=null;
this.locID=0;
this.locName="";
this.facilityID=0;
this.facilityName="";
this.locSelectionObj={LOCATION_CD:0,LOCATION_NAME:"",FACILITY_NAME:"",FACILITY_CD:0};
this.locDefaultObj={LOCATION_CD:0,LOCATION_NAME:"",FACILITY_NAME:"",FACILITY_CD:0};
}SurgeryStaffLocation.prototype=new SurgeryBase();
SurgeryStaffLocation.prototype.constructor=SurgeryBase;
function SurgeryStaffLocationStyle(){}SurgeryStaffLocationStyle.prototype=new ComponentStyle();
SurgeryStaffLocationStyle.prototype.constructor=ComponentStyle;
SurgeryRequestController.associateMapping(1,SurgeryStaffLocation);
SurgeryStaffLocation.prototype.setDefaultCommType=function(number){this.defaultCommType=parseInt(number,10);
};
SurgeryStaffLocation.prototype.getDefaultCommType=function(){return this.defaultCommType;
};
SurgeryStaffLocation.prototype.setCommTypeArr=function(arr){if(arr){this.commTypeArr=arr;
}};
SurgeryStaffLocation.prototype.getCommTypeArr=function(){return this.commTypeArr;
};
SurgeryStaffLocation.prototype.setStaffOnePrimId=function(id){this.staffOnePrimId=id;
};
SurgeryStaffLocation.prototype.getStaffOnePrimId=function(){return this.staffOnePrimId;
};
SurgeryStaffLocation.prototype.setPrimSurgObj=function(id){this.primSurgObj[id]=true;
};
SurgeryStaffLocation.prototype.getPrimSurgObj=function(){return this.primSurgObj;
};
SurgeryStaffLocation.prototype.setBedrockFilters=function(filter){this.bedrockFilters=filter;
};
SurgeryStaffLocation.prototype.getBedrockFilters=function(){return this.bedrockFilters;
};
SurgeryStaffLocation.prototype.setSurgeonType=function(filter){var cnt=0;
var filterLen=filter.length;
for(cnt=0;
cnt<filterLen;
cnt++){this.surgeonType[filter[cnt].CODE_VALUE]=filter[cnt].DISPLAY;
}};
SurgeryStaffLocation.prototype.getSurgeonType=function(){return $.extend({},this.surgeonType);
};
SurgeryStaffLocation.prototype.setPrimarySurgeonFilter=function(codeValue,display){this.primarySurgeonFilter.codeValue=codeValue;
this.primarySurgeonFilter.display=display;
};
SurgeryStaffLocation.prototype.getPrimarySurgeonFilter=function(){return this.primarySurgeonFilter;
};
SurgeryStaffLocation.prototype.setContainersObj=function(index,container){if(this.containersObj[index]){return false;
}this.containersObj[index]=container;
};
SurgeryStaffLocation.prototype.getContainersObj=function(){return this.containersObj;
};
SurgeryStaffLocation.prototype.setContainerCount=function(cnt){this.containerCount=cnt;
};
SurgeryStaffLocation.prototype.getContainerCount=function(){return this.containerCount++;
};
SurgeryStaffLocation.prototype.setPrimaryPhyId=function(personId){this.primaryPhyId=personId;
};
SurgeryStaffLocation.prototype.getPrimaryPhyId=function(){return this.primaryPhyId;
};
SurgeryStaffLocation.prototype.setPrimaryPhyName=function(personName){this.primaryPhyName=personName;
};
SurgeryStaffLocation.prototype.getPrimaryPhyName=function(){return this.primaryPhyName;
};
SurgeryStaffLocation.prototype.setLocSelectionObj=function(locSelectionObj){this.locSelectionObj=locSelectionObj;
};
SurgeryStaffLocation.prototype.getLocSelectionObj=function(){return this.locSelectionObj;
};
SurgeryStaffLocation.prototype.setLocDefaultObj=function(locDefaultObj){this.locDefaultObj=locDefaultObj;
};
SurgeryStaffLocation.prototype.getLocDefaultObj=function(){return this.locDefaultObj;
};
SurgeryStaffLocation.prototype.getPrimarySurgeonIdList=function(){var primarySurgeonIdList=[];
var containersObj=this.getContainersObj();
var rowObj;
var primarySurgeonFilter=this.getPrimarySurgeonFilter();
var containerKey;
var rowKey;
for(containerKey in containersObj){if(containersObj.hasOwnProperty(containerKey)){rowObj=containersObj[containerKey].getContainerRowsObj();
for(rowKey in rowObj){if(rowObj.hasOwnProperty(rowKey)&&rowObj[rowKey].getSurgID()&&rowObj[rowKey].getSurgType()===primarySurgeonFilter.codeValue){primarySurgeonIdList.push(rowObj[rowKey].getSurgID());
}}}}return primarySurgeonIdList;
};
SurgeryStaffLocation.prototype.setLocID=function(loctionID){this.locID=parseInt(loctionID,10);
};
SurgeryStaffLocation.prototype.getLocID=function(){return this.locID;
};
SurgeryStaffLocation.prototype.setLocName=function(loctionName){this.locName=loctionName;
};
SurgeryStaffLocation.prototype.getLocName=function(){return this.locName;
};
SurgeryStaffLocation.prototype.setFacilityID=function(facID){this.facilityID=parseInt(facID,10);
};
SurgeryStaffLocation.prototype.getFacilityID=function(){return this.facilityID;
};
SurgeryStaffLocation.prototype.setFacilityName=function(facName){this.facilityName=facName;
};
SurgeryStaffLocation.prototype.getFacilityName=function(){return this.facilityName;
};
SurgeryStaffLocation.prototype.getJsonData=function(){return this.replyData;
};
SurgeryStaffLocation.prototype.surgStaffCount=1;
SurgeryStaffLocation.prototype.createHeader=function(){var html="";
var tabName=this.getTabName();
var tabCnt;
var addPlusSign="";
addPlusSign+="<a id='sswfAdd' href='#' class='add-plus'><span class='add-icon'>&nbsp;</span>";
addPlusSign+="<span class='add-text'>Add</span></a>";
for(tabCnt=0;
tabCnt<tabName.length;
tabCnt++){html+="<div class='surgery-class surgery-class-"+tabName[tabCnt]+"'>";
html+="<h2 class='sec-hd'>";
html+="<span class='sec-title'><span class='comp-title'>"+tabName[tabCnt]+"</span>";
html+=tabCnt===0?addPlusSign:"";
html+="</span></h2></div>";
}return html;
};
SurgeryStaffLocation.prototype.preProcessing=function(){var bodyHTML="";
bodyHTML+=this.createHeader();
$("#"+this.getParentBodyId()).append(bodyHTML);
};
SurgeryStaffLocation.prototype.retrieveComponentData=function(){var request=new ScriptRequest();
var userID=this.getCriterion().provider_id;
var sendAr=[];
var self=this;
var recordData;
request.setProgramName("MP_SURGERY_STAFF");
sendAr.push("^MINE^",parseInt(userID,10)+".0",MP_Util.CreateParamArray(this.getBedrockFilters().WF_SR_SURG_ROLE,1));
request.setParameterArray(sendAr);
request.setAsyncIndicator(true);
request.setResponseHandler(function(scriptReply){if(scriptReply.getStatus()!=="S"){logger.logScriptCallError(self,request,"SurgeryStaffLocation.js","retrieveComponentData");
}recordData=scriptReply.getResponse();
self.renderStaffComponent(recordData);
self.retrieveLocationData([recordData.PERSON_ID],true);
});
request.performRequest();
};
SurgeryStaffLocation.prototype.retrieveLocationData=function(staffArr,isFirstLoad){var request=new ScriptRequest();
var userID=this.getStaffOnePrimId();
var sendAr=[];
var self=this;
var arr=[];
var parent=this.getParent();
var parentId=parent.getId();
var modalDialogId=parent.getModalDialog("surgery"+parentId).getId();
if(!userID){self.renderLocationComponent();
return;
}request.setProgramName("MP_FACILITY_LOCATIONS");
if(staffArr.length<=1){sendAr.push("^MINE^",parseInt(userID,10)+".0");
}else{arr=MP_Util.CreateParamArray(staffArr,1);
sendAr.push("^MINE^",arr);
}request.setParameterArray(sendAr);
request.setAsyncIndicator(true);
$("#vwpModalDialog"+modalDialogId).append("<div class='sr-overlay-div'><span class='sr-img-spinner'></span></div>");
request.setResponseHandler(function(scriptReply){if(scriptReply.getStatus()!=="S"){logger.logScriptCallError(self,request,"SurgeryStaffLocation.js","retrieveLocationData");
}self.renderLocationComponent(scriptReply.getResponse(),isFirstLoad);
$("#vwpModalDialog"+modalDialogId).find(".sr-overlay-div").remove();
});
request.performRequest();
};
SurgeryStaffLocation.prototype.renderStaffComponent=function(recordData){var rootNode=$("#"+this.getParentBodyId());
var bodyHTML=[];
var $plus=null;
try{this.setRootNode(rootNode);
this.setPrimaryPhyId(recordData.PERSON_ID);
this.setPrimaryPhyName(recordData.PERSON_NAME);
this.setSurgeonType(recordData.SURGICAL_ROLE_CD);
this.setPrimarySurgeonFilter(recordData.PRIMARY_SURG_CD,recordData.PRIMARY_SURG_DISPLAY);
this.setCommTypeArr(recordData.COMMUNICATION_TYPE);
this.setDefaultCommType(recordData.DEFAULT_COMM_CODE_VALUE);
bodyHTML.push("<div class='surgery-request-alert-msg surgery-request-msg'></div>");
bodyHTML.push("<div classs='sswf-content'></div>");
rootNode.find(".surgery-class-Staff").append(bodyHTML.join(""));
if(this.getPreloadMode()){this.preloadStaffComponent();
}else{this.addContainer();
}$plus=$("#sswfAdd")[0];
$($plus).unbind("click").on("click",{self:this},this.addContainer);
}catch(err){throw (err);
}};
SurgeryStaffLocation.prototype.renderLocationComponent=function(recordData,isFirstLoad){var compHtml="";
var placeHolder;
var showDropDownCSS="";
var requiredLocCSS="";
var showArrowCSS="arrow-down";
var tabNumber,activeTabNum;
try{if(!recordData){compHtml+="<div class='slwf-loc-required'><span>*</span>"+this.slwfI18n.location+": </span></div>";
compHtml+="<div class='slwf-dropdown "+showDropDownCSS+"'>";
compHtml+="<div type='text' name='slwf-dropdown' class='sswf-required-field slwf-search-loc "+requiredLocCSS+"'><div class='text'>"+this.slwfI18n.locationAlertMessage+"</div><div class='arrow arrow-down'></div></div>";
compHtml+=this.createLocDropdown();
compHtml+="</div>";
}else{if(recordData.FACILITY_LIST_CNT===0){compHtml+="<div class='error-container surgery-request-error-msg surgery-request-msg'><span class='error-text message-info-text'>"+this.slwfI18n.locationAlertMessage+"</span>"+this.slwfI18n.locationErrorMessage+"</div>";
compHtml+="<div class='slwf-loc-required'><span>*</span>"+this.slwfI18n.location+": </span></div>";
compHtml+="<div class='slwf-dropdown'>";
compHtml+="<div type='text' name='slwf-dropdown' class='slwf-search-loc sswf-required-field'><div class='text'>"+this.slwfI18n.noLocations+"</div><div class='arrow arrow-down'></div></div>";
compHtml+="</div>";
}else{this.setJsonData(recordData);
if(this.getPreloadMode()){this.preloadLocComponent();
}placeHolder=this.getLocID()?"<b>"+this.getLocName()+"</b>":this.slwfI18n.locationAlertMessage;
requiredLocCSS=this.getLocID()?"":"sswf-required-field";
if(recordData.FACILITY_LIST_CNT!==0){if(!isFirstLoad){showDropDownCSS="slwf-dropdown-show";
showArrowCSS="arrow-up";
}compHtml+="<div class='slwf-loc-required'><span>*</span>"+this.slwfI18n.location+": </span></div>";
compHtml+="<div class='slwf-dropdown "+showDropDownCSS+"'>";
compHtml+="<div type='text' name='slwf-dropdown' class='slwf-search-loc "+requiredLocCSS+"'><div class='text'>"+placeHolder+"</div><div class='arrow "+showArrowCSS+"'></div></div>";
compHtml+=this.createLocDropdown();
compHtml+="</div>";
}}}if($(".slwf-content").length>0){$(".slwf-content").html(compHtml);
}else{$("#"+this.getParentBodyId()).find(".surgery-class-Location").append("<div class='slwf-content'>"+compHtml+"</div>");
}this.postProcessing();
if(this.getPreloadMode()){tabNumber=2;
activeTabNum=1;
this.getParent().verifyViewValidity(tabNumber,activeTabNum);
this.setPreloadMode(false);
}}catch(err){throw (err);
}};
SurgeryStaffLocation.prototype.setStyles=function(componentStyle){this.mStyles=componentStyle;
};
SurgeryStaffLocation.prototype.getStyles=function(){return this.mStyles;
};
SurgeryStaffLocation.prototype.preloadStaffComponent=function(){var staffFavArr=this.getParent().getSharedResource("staff");
var staffCnt;
var container;
var count;
var containerDomId;
var innerLayout="";
var rootNode=this.getRootNode();
var surgeonTypes;
var surgeonType;
var staffRowCnt;
for(staffCnt=0;
staffCnt<staffFavArr.length;
staffCnt++){count=this.getContainerCount();
surgeonTypes=this.getSurgeonType();
container=new SurgeryStaffLocation.Container(count,this.getComponentId(),surgeonTypes,this,this.getPrimarySurgeonFilter());
containerDomId="sswf-container"+this.getComponentId()+count;
innerLayout="<div class='sswf-container' id='"+containerDomId+"'>"+container.createRows()+"</div>";
rootNode.find(".surgery-class-Staff").append(innerLayout);
this.setContainersObj(containerDomId,container);
this.surgStaffCount++;
container.postProcessor();
for(staffRowCnt=0;
staffRowCnt<staffFavArr[staffCnt].staffTeams.length;
staffRowCnt++){surgeonType=staffFavArr[staffCnt].staffTeams[staffRowCnt].typeId;
if(surgeonType===this.getPrimarySurgeonFilter().codeValue){continue;
}if(surgeonTypes[surgeonType]){container.addMoreRows(surgeonType);
}}}};
SurgeryStaffLocation.prototype.preloadLocComponent=function(){var locationFav=this.getParent().getSharedResource("location");
this.setLocID(locationFav.locationCd);
this.setLocName(locationFav.locationName);
this.setFacilityName(locationFav.facilityName);
this.setFacilityID(locationFav.facilityId);
};
SurgeryStaffLocation.prototype.addContainer=function(event){var self=(event)?event.data.self:this;
var count=self.getContainerCount();
var containerDomId="sswf-container"+self.getComponentId()+count;
var container=new SurgeryStaffLocation.Container(count,self.getComponentId(),self.getSurgeonType(),self,self.getPrimarySurgeonFilter());
var layoutHtml="<div class='sswf-container' id='sswf-container"+self.getComponentId()+count+"'>"+container.createRows()+"</div>";
var rootNode=self.getRootNode();
rootNode.find(".surgery-class-Staff").append(layoutHtml);
container.postProcessor();
self.setContainersObj(containerDomId,container);
self.surgStaffCount++;
};
SurgeryStaffLocation.prototype.updateContainerObj=function(containerId){var containerObj=this.getContainersObj();
var count=0;
var key=null;
var $headerDom;
delete containerObj[containerId];
for(key in containerObj){if(containerObj.hasOwnProperty(key)){$headerDom=$("#"+key).find(".sswf-staff-header-text");
count=++count;
$($headerDom).text(this.sswfI18n.SurgStaffLbl+" "+count);
}}this.surgStaffCount--;
};
SurgeryStaffLocation.prototype.createLocDropdown=function(obj){var self=obj||this;
var locData=self.getJsonData();
var html="";
var key=0;
var locCnt;
var locArr;
var selectedCss="";
var defaultLoc=this.getLocDefaultObj();
html+="<div class='slwf-dropdown-list'>";
for(key in locData){if(locData.hasOwnProperty(key)){locArr=locData[key].locationArr;
html+="<div class='slwf-dropdown-fac' id='slwf-dropdown-fac-"+key+"' facId="+key+">";
html+="<div class='slwf-dropdown-fac-item'>"+locData[key].facilityName+"</div>";
html+="<div class='slwf-dropdown-loc'>";
for(locCnt=0;
locCnt<locArr.length;
locCnt++){if(self.getLocID()){selectedCss=self.getLocID()===parseInt(locArr[locCnt].LOCATION_CD,10)?"slwf-selected-loc":"";
}else{selectedCss=defaultLoc.LOCATION_CD===parseInt(locArr[locCnt].LOCATION_CD,10)?"slwf-selected-loc":"";
}html+="<div class='slwf-dropdown-loc-item "+selectedCss+" slwf-dropdown-loc-item-"+locArr[locCnt].LOCATION_CD+"' facName='"+locData[key].facilityName+"' locName='"+locArr[locCnt].LOCATION_NAME+"' facId="+key+" locId="+locArr[locCnt].LOCATION_CD+"><div>"+locArr[locCnt].LOCATION_NAME+"</div></div>";
}html+="</div></div>";
}}html+="</div>";
return html;
};
SurgeryStaffLocation.prototype.changeLocationDropdown=function(){var self=this;
var json={};
var $rootNode=self.getRootNode();
var $locationBody=$rootNode.find(".slwf-search-loc");
var locSelectionObj=self.getLocSelectionObj();
self.setLocID(locSelectionObj.LOCATION_CD);
self.setLocName(locSelectionObj.LOCATION_NAME);
self.setFacilityName(locSelectionObj.FACILITY_NAME);
self.setFacilityID(locSelectionObj.FACILITY_CD);
$locationBody.find(".text").html("<div class='slwf-selected-loc'>"+locSelectionObj.LOCATION_NAME+"</div>");
$locationBody.parent().removeClass("slwf-dropdown-show");
$locationBody.find(".arrow").removeClass("arrow-up").addClass("arrow-down");
$locationBody.removeClass("sswf-required-field");
json={SURGERY_LOCATION_PREFS:{LOCATION_CD:self.getLocID(),LOCATION_NAME:self.getLocName(),FACILITY_NAME:self.getFacilityName(),FACILITY_ID:self.getFacilityID()}};
self.writePreferences(json,"SURGERY_LOCATION_PREFS",true,self.getStaffOnePrimId());
};
SurgeryStaffLocation.prototype.createLocationChangeWarning=function(){var self=this;
var slwfCompBaseId=self.getParent().getBaseCompId();
var slwfLocChangeWarningCancelButton;
var slwfLocChangeWarningChangeButton;
var cancelButtonName="slwfLocChangeWarningCancelButton";
var changeButtonName="slwfLocChangeWarningChangeButton";
var cancelButtonText=self.surgArchI18n.cancel;
var changeButtonText=self.surgArchI18n.Continue;
var headerTitle=self.sswfI18n.locWarningTitle;
var warningText=self.sswfI18n.locWarningText;
var surgLocChangeDialogName="slwfLocationChangeWarning"+slwfCompBaseId;
var html="<div id = 'slwfLocationChangeWarning' class='slwf-dialog-location-warning'>    <span class='warning-container message-info-text'>"+warningText+"    </span></div>";
var slwfLocationChangeWarning=new ModalDialog(surgLocChangeDialogName);
slwfLocChangeWarningCancelButton=new ModalButton(cancelButtonName);
slwfLocChangeWarningChangeButton=new ModalButton(changeButtonName);
slwfLocChangeWarningCancelButton.setText(cancelButtonText);
slwfLocChangeWarningCancelButton.setOnClickFunction(function(){$("#"+self.getParentBodyId()).find(".slwf-dropdown").removeClass("slwf-dropdown-show");
MP_ModalDialog.closeModalDialog(surgLocChangeDialogName);
MP_ModalDialog.deleteModalDialogObject(surgLocChangeDialogName);
});
slwfLocChangeWarningChangeButton.setText(changeButtonText);
slwfLocChangeWarningChangeButton.setCloseOnClick(true);
slwfLocChangeWarningChangeButton.setOnClickFunction(function(){self.changeLocationDropdown();
MP_ModalDialog.closeModalDialog(surgLocChangeDialogName);
MP_ModalDialog.deleteModalDialogObject(surgLocChangeDialogName);
});
slwfLocationChangeWarning.setHeaderTitle(headerTitle);
slwfLocationChangeWarning.setLeftMarginPercentage(25);
slwfLocationChangeWarning.setRightMarginPercentage(25);
slwfLocationChangeWarning.setTopMarginPercentage(40);
slwfLocationChangeWarning.setBottomMarginPercentage(40);
slwfLocationChangeWarning.addFooterButton(slwfLocChangeWarningChangeButton);
slwfLocationChangeWarning.addFooterButton(slwfLocChangeWarningCancelButton);
MP_ModalDialog.addModalDialogObject(slwfLocationChangeWarning);
MP_ModalDialog.showModalDialog(surgLocChangeDialogName);
slwfLocationChangeWarning.setBodyHTML(html);
};
SurgeryStaffLocation.prototype.checkOrdersExist=function(){var procedures=this.getParent().getSharedResource("procedures");
var powerplans=this.getParent().getSharedResource("powerPlans");
var surgeons;
if(this.checkObjEmpty(procedures)&&powerplans.length===0){return false;
}else{if(!this.checkObjEmpty(procedures)&&powerplans.length===0){for(surgeons in procedures){if(procedures[surgeons].length!==0){return true;
}}return false;
}}return true;
};
SurgeryStaffLocation.prototype.postProcessing=function(){var $parentBody=$("#"+this.getParentBodyId());
var $dropdown=$parentBody.find(".slwf-dropdown");
var self=this;
var primarySurgeons;
var primarySurgArr=[];
var key;
$dropdown.on("click",function(){primarySurgeons=self.getPrimSurgObj();
for(key in primarySurgeons){if(parseInt(key,10)===parseInt(self.getStaffOnePrimId(),10)){primarySurgArr.unshift(key);
}else{primarySurgArr.push(key);
}}self.retrieveLocationData(primarySurgArr);
$parentBody.find(".slwf-search-loc .arrow").removeClass("arrow-down").addClass("arrow-up");
$parentBody.find(".slwf-selected-loc").removeClass("slwf-selected-loc");
$parentBody.find(".slwf-dropdown-loc-item-"+self.getLocID()).addClass("slwf-selected-loc");
});
$dropdown.on("click",".slwf-dropdown-loc-item",function(event){var $selectedLoc=$(this);
var locID=$selectedLoc.attr("locId");
var locSelectionObj={};
locSelectionObj={LOCATION_CD:locID,LOCATION_NAME:$selectedLoc.attr("locName"),FACILITY_NAME:$selectedLoc.attr("facName"),FACILITY_CD:$selectedLoc.attr("facId")};
self.setLocSelectionObj(locSelectionObj);
if(self.checkOrdersExist()&&parseInt(locID,10)!==self.getLocID()){self.createLocationChangeWarning();
}else{self.changeLocationDropdown();
}event.stopPropagation();
});
};
SurgeryStaffLocation.prototype.writePreferences=function(jsonObject,prefIdent,saveAsync,surgeonId){var sJson;
var ar;
var url;
var XMLRequest=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
if(!saveAsync){saveAsync=false;
}XMLRequest.onreadystatechange=function(){var jsonEval;
var recordData;
var errAr;
var statusData;
var x,xl;
var ss;
if(this.readyState===4&&this.status===200){MP_Util.LogScriptCallInfo(null,this,"mp_core.js","WritePreferences");
jsonEval=JSON.parse(this.responseText);
recordData=jsonEval.RECORD_DATA;
if(recordData.STATUS_DATA.STATUS==="Z"){return;
}else{if(recordData.STATUS_DATA.STATUS==="S"){return;
}else{MP_Util.LogScriptCallError(null,this,"mp_core.js","WritePreferences");
errAr=[];
statusData=recordData.STATUS_DATA;
errAr.push("STATUS: "+statusData.STATUS);
for(x=0,xl=statusData.SUBEVENTSTATUS.length;
x<xl;
x++){ss=statusData.SUBEVENTSTATUS[x];
errAr.push(ss.OPERATIONNAME,ss.OPERATIONSTATUS,ss.TARGETOBJECTNAME,ss.TARGETOBJECTVALUE);
}window.status="Error saving user preferences: "+errAr.join(",");
}}}};
sJson=(jsonObject!==null)?JSON.stringify(jsonObject):"";
sJson=sJson.replace(/:([0-9]+)/g,":$1.0");
ar=["^mine^",surgeonId+".0","^"+prefIdent+"^","~"+sJson+"~"];
if(CERN_BrowserDevInd){url="MP_MAINTAIN_USER_PREFS?parameters="+ar.join(",");
XMLRequest.open("GET",url,saveAsync);
XMLRequest.send(null);
}else{XMLRequest.open("GET","MP_MAINTAIN_USER_PREFS",saveAsync);
XMLRequest.send(ar.join(","));
}};
SurgeryStaffLocation.prototype.setJsonData=function(recordData){var facilityCnt=recordData.FACILITY_LIST_CNT;
var $parentBody=$("#"+this.getParentBodyId());
var $dropdown=$parentBody.find(".slwf-dropdown");
var locationCnt=0;
var cnt=0;
var locCnt=0;
var locationObj={};
var facilityList=null;
var locRowCnt=-1;
var locList=null;
var locDefaultObj={LOCATION_CD:0,LOCATION_NAME:"",FACILITY_NAME:"",FACILITY_CD:0};
for(cnt=0;
cnt<facilityCnt;
cnt++){facilityList=recordData.FACILITY_LIST[cnt];
locationCnt=facilityList.LOCATION_QUAL_CNT;
for(locCnt=0;
locCnt<locationCnt;
locCnt++){locRowCnt++;
locList=facilityList.LOCATION_LIST[locCnt];
if(!this.getLocID()){if(locList.LOCATION_SELECT===1){if(!$dropdown.find(".slwf-search-loc").hasClass("sswf-required-field")){this.setLocID(locList.LOCATION_CD);
this.setLocName(locList.LOCATION_NAME);
this.setFacilityName(facilityList.FACILITY_NAME);
this.setFacilityID(facilityList.FACILITY_ID);
}locDefaultObj={LOCATION_CD:locList.LOCATION_CD,LOCATION_NAME:locList.LOCATION_NAME,FACILITY_NAME:facilityList.FACILITY_NAME,FACILITY_CD:facilityList.FACILITY_ID};
this.setLocDefaultObj(locDefaultObj);
}}if(!locationObj[facilityList.FACILITY_ID]){locationObj[facilityList.FACILITY_ID]={};
locationObj[facilityList.FACILITY_ID].locationArr=[];
}locationObj[facilityList.FACILITY_ID].facilityName=facilityList.FACILITY_NAME;
locationObj[facilityList.FACILITY_ID].locationArr.push({LOCATION_NAME:facilityList.LOCATION_LIST[locCnt].LOCATION_NAME,LOCATION_CD:String(facilityList.LOCATION_LIST[locCnt].LOCATION_CD)});
}}this.replyData=locationObj;
};
SurgeryStaffLocation.prototype.updateLocDropdown=function(){var i18nPicLoc=this.slwfI18n.locationAlertMessage;
var $parentBody=$("#"+this.getParentBodyId());
this.setLocID(0);
this.setLocName("");
this.setFacilityName("");
this.setFacilityID(0);
$parentBody.find(".slwf-search-loc").addClass("sswf-required-field").find(".text").html(i18nPicLoc);
$parentBody.find(".surgery-request-error-msg").remove();
$parentBody.find(".slwf-dropdown").removeClass("slwf-dropdown-show");
};
SurgeryStaffLocation.prototype.storeTabData=function(){var containerObj=this.getContainersObj();
var rowObj;
var containerKey;
var rowKey;
var staffTeams=[];
var staffCommType;
var defaultSurgeonType=this.getSurgeonType();
var primarySurgeonFilter=this.getPrimarySurgeonFilter();
var staffData=[];
var locationData={facilityId:0,facilityName:"",locationCd:0,locationName:""};
var missingDetails=this.surgArchI18n.missingDetails;
var staffMessage=this.sswfI18n.staffAlertMessage;
var locationMessage=this.slwfI18n.locationAlertMessage;
var commTypeMessage=this.sswfI18n.selectCommType;
var status={message:"",value:true,data:{staff:{},location:{}}};
locationData.facilityId=this.getFacilityID();
locationData.facilityName=this.getFacilityName();
locationData.locationCd=this.getLocID();
locationData.locationName=this.getLocName();
for(containerKey in containerObj){if(containerObj.hasOwnProperty(containerKey)){rowObj=containerObj[containerKey].getContainerRowsObj();
staffCommType=containerObj[containerKey].getCommType();
for(rowKey in rowObj){if(rowObj.hasOwnProperty(rowKey)){if((rowObj[rowKey].getSurgType()===primarySurgeonFilter.codeValue)&&(!rowObj[rowKey].getSurgID())){status.value=false;
status.message="<div class='surgery-request-alert-wrapper'><div class='surgery-request-blue-cross-image'></div><span>"+missingDetails+" "+staffMessage+"</span><div>";
}staffTeams.push({name:rowObj[rowKey].getSurgName(),id:rowObj[rowKey].getSurgID(),type:defaultSurgeonType[rowObj[rowKey].getSurgType()]||primarySurgeonFilter.display,typeId:rowObj[rowKey].getSurgType()});
}}staffData.push({staffTeams:staffTeams,staffCommType:staffCommType});
staffTeams=[];
if((this.getCommTypeArr().length!==0)&&!staffCommType.codeValue){status.value=false;
status.message="<div class='surgery-request-alert-wrapper'><div class='surgery-request-blue-cross-image'></div><span>"+missingDetails+" "+commTypeMessage+".</span><div>";
}}}if(!this.getLocID()){status.value=false;
status.message="<div class='surgery-request-alert-wrapper'><div class='surgery-request-blue-cross-image'></div><span>"+missingDetails+" "+locationMessage+"</span><div>";
}status.data.staff=staffData;
status.data.location=locationData;
return status;
};
SurgeryStaffLocation.prototype.submitDataToSharedResource=function(){var status=this.storeTabData();
var $alertBody=$("#"+this.getParentBodyId()).find(".surgery-request-alert-msg");
if(!status.value){$alertBody.html(status.message).show();
return false;
}else{this.getParent().setSharedResource("staff",status.data.staff);
this.getParent().setSharedResource("location",status.data.location);
$alertBody.hide();
}return true;
};
SurgeryStaffLocation.Container=function(containerId,componentId,surgeonTypes,parentSelf,primarySurgeonFilter){this.containerRowsObj={};
this.rowCount=0;
this.id=null;
this.componentId=null;
this.surgTypesObj={};
this.prevSelectedSurg=null;
this.parentSelf=null;
this.actualRowCount=1;
this.defaultSurgTypeObj=$.extend({},surgeonTypes);
this.primarySurgeonFilter=primarySurgeonFilter;
this.commType={display:"",codeValue:0};
this.setContainerId(containerId);
this.setComponentId(componentId);
this.setSurgTypesObj(surgeonTypes);
this.setParentSelf(parentSelf);
};
SurgeryStaffLocation.Container.prototype.setCommType=function(obj){this.commType=obj;
};
SurgeryStaffLocation.Container.prototype.getCommType=function(){return this.commType;
};
SurgeryStaffLocation.Container.prototype.getActualRowCount=function(){return this.actualRowCount;
};
SurgeryStaffLocation.Container.prototype.setActualRowCount=function(cnt){this.actualRowCount=cnt;
};
SurgeryStaffLocation.Container.prototype.getParentSelf=function(){return this.parentSelf;
};
SurgeryStaffLocation.Container.prototype.setParentSelf=function(comp){this.parentSelf=comp;
};
SurgeryStaffLocation.Container.prototype.setSurgTypesObj=function(types){this.surgTypesObj=types;
};
SurgeryStaffLocation.Container.prototype.getSurgTypesObj=function(){return this.surgTypesObj;
};
SurgeryStaffLocation.Container.prototype.addBackToSurgTypesObj=function(row){var type=row.getSurgType();
var defaultSurgTypeObj=this.getDefaultSurgTypeObj();
if(!this.surgTypesObj[type]){this.surgTypesObj[type]=defaultSurgTypeObj[type];
}};
SurgeryStaffLocation.Container.prototype.setContainerRowsObj=function(index,row){if(this.containerRowsObj[index]){return false;
}this.containerRowsObj[index]=row;
};
SurgeryStaffLocation.Container.prototype.getContainerRowsObj=function(){return this.containerRowsObj;
};
SurgeryStaffLocation.Container.prototype.setRowCount=function(cnt){this.rowCount=cnt;
};
SurgeryStaffLocation.Container.prototype.getRowCount=function(){return ++this.rowCount;
};
SurgeryStaffLocation.Container.prototype.getContainerId=function(){return this.id;
};
SurgeryStaffLocation.Container.prototype.setContainerId=function(containerId){this.id=containerId;
};
SurgeryStaffLocation.Container.prototype.getComponentId=function(){return this.componentId;
};
SurgeryStaffLocation.Container.prototype.setComponentId=function(id){this.componentId=id;
};
SurgeryStaffLocation.Container.prototype.getDefaultSurgTypeObj=function(){return this.defaultSurgTypeObj;
};
SurgeryStaffLocation.Container.prototype.getPrimarySurgeonFilter=function(){return this.primarySurgeonFilter;
};
SurgeryStaffLocation.Container.prototype.createRows=function(){var layoutHtml="";
var count=this.getRowCount();
var surgeonTypes=this.getSurgTypesObj();
var row=new SurgeryStaffLocation.Rows(count,this.getContainerId(),this.getComponentId(),surgeonTypes,this);
var parentSelf=this.getParentSelf();
var addSurgeonLabel=parentSelf.sswfI18n.AddSurgeonLbl;
var headerLabel=parentSelf.sswfI18n.SurgStaffLbl;
var rowDomId="sswf-row-id"+row.getParentComponentId()+row.getRowContId()+count;
var communiHtml=parentSelf.getCommTypeArr().length===0?"":this.createCommType();
var removeBtnHtml=this.getContainerId()===0?"":"<div class='sswf-staff-header-remove'></div>";
layoutHtml+="<div class='sswf-staff'><div><div class='sswf-staff-header' id='sswf-staff-header"+row.getParentComponentId()+row.getRowContId()+"'><div class='sswf-staff-header-text'>"+headerLabel+" "+parentSelf.surgStaffCount+"</div>"+removeBtnHtml+"</div><div id='sswf-row-id"+row.getParentComponentId()+row.getRowContId()+count+"' class='sswf-row'>"+row.createSingleRow()+communiHtml+"</div><div class='sswf-addSurgBtn' id='sswf-addSurgBtn"+this.getComponentId()+this.getContainerId()+"'><span class='sswf-addSurgBtnHref' id='sswf-addSurgBtnHref"+this.getComponentId()+this.getContainerId()+"' >+"+addSurgeonLabel+"</span></div></div></div>";
this.setContainerRowsObj(rowDomId,row);
this.setActualRowCount(this.getActualRowCount()+1);
return layoutHtml;
};
SurgeryStaffLocation.Container.prototype.createCommType=function(){var parent=this.getParentSelf();
var commArr=parent.getCommTypeArr();
var defaultCommType=parent.getDefaultCommType();
var html="";
var optionHtml="";
var commCnt;
var requiredCss="sswf-required-field";
for(commCnt=0;
commCnt<commArr.length;
commCnt++){if(parseInt(commArr[commCnt].CODE_VALUE,10)===parseInt(defaultCommType,10)){this.setCommType({display:commArr[commCnt].DISPLAY,codeValue:commArr[commCnt].CODE_VALUE});
requiredCss="";
}optionHtml+="<option value='"+commArr[commCnt].CODE_VALUE+"'>"+commArr[commCnt].DISPLAY+"</option>";
}html+="<div class='sswf-comm-dropdown' id='sswf-comm-dropdown-"+this.getContainerId()+"'><div class='sswf-comm-label'><span>*</span><span>"+parent.sswfI18n.communicationType+"</span></div><div class='sswf-comm-select-sec'><select id='sswf-comm-select-sec-"+this.getContainerId()+"' class='"+requiredCss+"'>"+optionHtml+"</select></div></div>";
return html;
};
SurgeryStaffLocation.Container.prototype.postProcessor=function(){var self=this;
var rowObj=this.getContainerRowsObj();
var $remove=null;
var key=null;
var parent=this.getParentSelf();
var isUserPhy=parent.getCommTypeArr().length===0;
var row=null;
var rootNode=parent.getRootNode();
for(key in rowObj){if(rowObj.hasOwnProperty(key)){row=rowObj[key];
row.postProcessor();
}}$remove=rootNode.find("#sswf-container"+this.getComponentId()+this.getContainerId()).find(".sswf-staff-header-remove");
$remove.on("click",{self:self},self.removeContainer);
if(!isUserPhy){rootNode.find("#sswf-addSurgBtn"+this.getComponentId()+this.getContainerId()).unbind("click").addClass("sswf-addSurg-not-active");
rootNode.find("#sswf-comm-dropdown-"+this.getContainerId()+" select").val(parent.getDefaultCommType());
}rootNode.find("#sswf-comm-select-sec-"+this.getContainerId()).change(function(){var $selectedCommType=$(this).find(":selected");
$(this).removeClass("sswf-required-field");
self.setCommType({display:$selectedCommType.text(),codeValue:$selectedCommType.val()});
});
};
SurgeryStaffLocation.Container.prototype.removeContainer=function(event){var self=(event)?event.data.self:this;
var parentSelf=self.getParentSelf();
var count=self.getContainerId();
var primarySurgeons=parentSelf.getPrimSurgObj();
var containerId=self.getContainerId();
var primaryRowKey="sswf-row-id"+self.getComponentId()+containerId+1;
var primaryRowId=self.containerRowsObj[primaryRowKey].getSurgID();
if(primarySurgeons[primaryRowId]){delete primarySurgeons[primaryRowId];
}$("#sswf-container"+self.getComponentId()+count).remove();
parentSelf.updateContainerObj("sswf-container"+self.getComponentId()+count);
};
SurgeryStaffLocation.Container.prototype.addMoreRows=function(event){var self=(event.data)?event.data.self:this;
var surgType=(event.data)?0:event;
var count=self.getRowCount();
var surgeonTypes=self.getSurgTypesObj();
var row=new SurgeryStaffLocation.Rows(count,self.getContainerId(),self.getComponentId(),surgeonTypes,self);
var html="";
var rowDomId="sswf-row-id"+row.getParentComponentId()+row.getRowContId()+count;
var $addSurgbtn=null;
row.setSurgType(surgType);
html+="<div id='sswf-row-id"+row.getParentComponentId()+row.getRowContId()+count+"' class='sswf-row'>";
html+=row.createSingleRow();
html+="<div class='sswf-row-remove'> </div></div>";
$addSurgbtn=$("#sswf-addSurgBtn"+self.getComponentId()+self.getContainerId());
$addSurgbtn.before(html);
self.setContainerRowsObj(rowDomId,row);
row.postProcessor();
self.setActualRowCount(self.getActualRowCount()+1);
if(!row.getSurgID()){$addSurgbtn.unbind("click").removeClass("sswf-addSurg-active").addClass("sswf-addSurg-not-active");
}};
SurgeryStaffLocation.Container.prototype.updateRowObj=function(rowId){var rowsObj=this.getContainerRowsObj();
this.addBackToSurgTypesObj(rowsObj[rowId]);
delete rowsObj[rowId];
};
SurgeryStaffLocation.Container.prototype.enableAddSurgBtn=function(){var mapRows=this.getContainerRowsObj();
var key;
for(key in mapRows){if(mapRows.hasOwnProperty(key)){if(!mapRows[key].getSurgID()){return false;
}}}return true;
};
SurgeryStaffLocation.Container.prototype.getSurgeryStaffLocationIdList=function(){var mapRows=this.getContainerRowsObj();
var key;
var SurgeryStaffLocationIdList=[];
for(key in mapRows){if(mapRows.hasOwnProperty(key)&&mapRows[key].getSurgID()){SurgeryStaffLocationIdList.push(mapRows[key].getSurgID());
}}return SurgeryStaffLocationIdList;
};
SurgeryStaffLocation.Rows=function(rowId,containerId,parentComponentId,surgTypes,parentSelf){this.mStyles=null;
this.parentComponentId=null;
this.contId=null;
this.rowId=null;
this.surgType=null;
this.surgName=null;
this.surgID=null;
this.surgDropDown=null;
this.parentSelf=null;
this.actualRowCnt=0;
this.setRowContId(containerId);
this.setParentComponentId(parentComponentId);
this.setStyles(new SurgeryStaffLocationStyle());
this.setSurgDropDown(surgTypes);
this.setParentSelf(parentSelf);
this.setRowId(rowId);
this.setActualRowCnt(parentSelf.getActualRowCount());
};
SurgeryStaffLocation.Rows.prototype.getActualRowCnt=function(){return this.actualRowCnt;
};
SurgeryStaffLocation.Rows.prototype.setActualRowCnt=function(cnt){this.actualRowCnt=cnt;
};
SurgeryStaffLocation.Rows.prototype.getParentSelf=function(){return this.parentSelf;
};
SurgeryStaffLocation.Rows.prototype.setParentSelf=function(parentSelf){this.parentSelf=parentSelf;
};
SurgeryStaffLocation.Rows.prototype.getSurgDropDown=function(){return this.surgDropDown;
};
SurgeryStaffLocation.Rows.prototype.setSurgDropDown=function(types){this.surgDropDown=types;
};
SurgeryStaffLocation.Rows.prototype.getSurgName=function(){return this.surgName;
};
SurgeryStaffLocation.Rows.prototype.setSurgName=function(name){this.surgName=name;
};
SurgeryStaffLocation.Rows.prototype.getSurgID=function(){return this.surgID;
};
SurgeryStaffLocation.Rows.prototype.setSurgID=function(id){this.surgID=id;
};
SurgeryStaffLocation.Rows.prototype.getSurgType=function(){return this.surgType;
};
SurgeryStaffLocation.Rows.prototype.setSurgType=function(type){this.surgType=parseInt(type,10);
};
SurgeryStaffLocation.Rows.prototype.getParentComponentId=function(){return this.parentComponentId;
};
SurgeryStaffLocation.Rows.prototype.setParentComponentId=function(id){this.parentComponentId=id;
};
SurgeryStaffLocation.Rows.prototype.getRowContId=function(){return this.contId;
};
SurgeryStaffLocation.Rows.prototype.setRowContId=function(id){this.contId=id;
};
SurgeryStaffLocation.Rows.prototype.setStyles=function(componentStyle){this.mStyles=componentStyle;
};
SurgeryStaffLocation.Rows.prototype.getStyles=function(){return this.mStyles;
};
SurgeryStaffLocation.Rows.prototype.getComponentId=function(){return""+this.rowId+this.contId;
};
SurgeryStaffLocation.Rows.prototype.getRowId=function(){return this.rowId;
};
SurgeryStaffLocation.Rows.prototype.setRowId=function(id){this.rowId=id;
};
SurgeryStaffLocation.Rows.prototype.onClickAddDropDown=function(event){var self=event.data.self;
var layoutHtml=[];
var surgeonTypes=self.getSurgDropDown();
var $rowDomId=$("#sswf-row-id"+self.getParentComponentId()+self.getRowContId()+self.getRowId());
var $selectSurgDom=$rowDomId.find(".sswf-select-surg");
var type=self.getSurgType();
var $arrowDom=$rowDomId.find(".sswf-selected-type-arrow");
var key=null;
var $htmlDom,$tempChildren;
if($.isEmptyObject(surgeonTypes)||self.getRowId()===1){return false;
}layoutHtml.push("<div class='sswf-fancy-dropDown'>");
for(key in surgeonTypes){if(surgeonTypes.hasOwnProperty(key)&&(type!==key)){layoutHtml.push("<div class='sswf-selected-type sswf-selected-type-hover' id='sswf-select-"+self.getRowId()+"' code-value = "+key+">"+surgeonTypes[key]+"</div>");
}}layoutHtml.push("</div>");
$htmlDom=$(layoutHtml.join(""));
$tempChildren=$($htmlDom).children();
$($htmlDom).width($($selectSurgDom).width()-1);
$($tempChildren).on("click",{self:self},self.onClickRemoveDropDown);
$($selectSurgDom).find(".sswf-selected-type").unbind("click").on("click",{self:self},self.onClickRemoveDropDown);
$selectSurgDom.append($htmlDom).addClass("sswf-selected-type-border");
$($arrowDom).removeClass("sswf-selected-type-down-arrow").addClass("sswf-selected-type-up-arrow");
};
SurgeryStaffLocation.Rows.prototype.onClickRemoveDropDown=function(event){var self=event.data.self;
var surgeonTypes=self.getSurgDropDown();
var componentId=self.getParentComponentId();
var rowContId=self.getRowContId();
var rowId=self.getRowId();
var $rowDomId=$("#sswf-row-id"+componentId+rowContId+rowId);
var $selectSurgDom=$rowDomId.find(".sswf-select-surg");
var $selectSurgDomChild=$selectSurgDom.children();
var $arrowDom=$rowDomId.find(".sswf-selected-type-arrow");
var selectedType=$(this).attr("code-value");
var oldSurgType=self.getSurgType();
var defaultSurgTypeObj=self.getParentSelf().getDefaultSurgTypeObj();
if(selectedType){self.setSurgType(selectedType);
$($selectSurgDomChild[0]).find("span").text(surgeonTypes[selectedType]).attr("title",surgeonTypes[selectedType]);
$($selectSurgDomChild[0]).find(".sswf-selected-type-text").attr("code-value",selectedType);
surgeonTypes[oldSurgType]=defaultSurgTypeObj[oldSurgType];
delete surgeonTypes[selectedType];
}$($selectSurgDomChild[0]).unbind("click").on("click",{self:self},self.onClickAddDropDown);
$($selectSurgDomChild[1]).remove();
$selectSurgDom.removeClass("sswf-selected-type-border");
$($arrowDom).removeClass("sswf-selected-type-up-arrow").addClass("sswf-selected-type-down-arrow");
};
SurgeryStaffLocation.Rows.prototype.createDropDown=function(){var layoutHtml="";
var surgeonTypes=this.getSurgDropDown();
var rowId=this.getRowId();
var key=null;
var primarySurgeonFilters=null;
layoutHtml+="<div class='sswf-select-surg'>";
if(this.getRowId()===1){primarySurgeonFilters=this.getParentSelf().getPrimarySurgeonFilter();
layoutHtml+="<div class='sswf-selected-type' id='sswf-select-"+rowId+"'><div class='sswf-selected-type-first-text' code-value = "+primarySurgeonFilters.codeValue+" title='"+primarySurgeonFilters.display+"'><span>*</span><span>"+primarySurgeonFilters.display+"</span></div></div>";
this.setSurgType(primarySurgeonFilters.codeValue);
}else{for(key in surgeonTypes){if(surgeonTypes.hasOwnProperty(key)){if(this.getSurgType()){key=this.getSurgType();
if(!surgeonTypes[key]){return"";
}}layoutHtml+="<div class='sswf-selected-type' id='sswf-select-"+rowId+"'><div class='sswf-selected-type-text' code-value = "+key+"><span title='"+surgeonTypes[key]+"'>"+surgeonTypes[key]+"</span></div><div class='sswf-selected-type-arrow sswf-selected-type-down-arrow'></div></div>";
this.setSurgType(key);
delete surgeonTypes[key];
break;
}}}layoutHtml+="</div>";
return layoutHtml;
};
SurgeryStaffLocation.Rows.prototype.createSearchSurgeon=function(){var searchBoxHTML=[];
searchBoxHTML.push("<div class='sswf-search-box'>",MP_Util.CreateAutoSuggestBoxHtml(this),"</div>");
return searchBoxHTML.join("");
};
SurgeryStaffLocation.Rows.prototype.createSingleRow=function(){var layoutHtml=[];
layoutHtml.push(this.createDropDown());
layoutHtml.push(this.createSearchSurgeon());
return layoutHtml.join("");
};
SurgeryStaffLocation.Rows.prototype.postProcessor=function(){var $rowDomId=$("#sswf-row-id"+this.getParentComponentId()+this.getRowContId()+this.getRowId());
var $remove=$rowDomId.find(".sswf-row-remove");
var $fancyDropDown=$rowDomId.find(".sswf-selected-type");
var container=null;
var component=null;
var surgname=null;
var surgId=null;
var suggestionObj={};
var rowId="sswf-row-id"+this.getParentComponentId()+this.getRowContId()+this.getRowId();
var staffFavArr,staffCnt,staffFav;
container=this.getParentSelf();
component=container.getParentSelf();
surgname=component.getPrimaryPhyName();
surgId=component.getPrimaryPhyId();
if(component.getPreloadMode()){staffFavArr=component.getParent().getSharedResource("staff");
for(staffCnt=0;
staffCnt<staffFavArr[container.getContainerId()].staffTeams.length;
staffCnt++){staffFav=staffFavArr[container.getContainerId()].staffTeams[staffCnt];
if(staffFav.typeId===this.getSurgType()){this.handleSelection({PERSON_ID:staffFav.id,PERSON_NAME:staffFav.name},"",this);
}}}else{if(component.getPrimaryPhyId()!==0&&container.getContainerId()===0&&this.getRowId()===1){suggestionObj.PERSON_NAME=surgname;
suggestionObj.PERSON_ID=surgId;
this.handleSelection(suggestionObj,"",this);
}}if(this.getRowId()===1){$("#"+rowId+" div.sswf-search-box div.search-box-div form input.search-box").addClass("sswf-required-field");
}MP_Util.AddAutoSuggestControl(this,this.searchPhysician,this.handleSelection,this.createSuggestionLine);
$fancyDropDown.on("click",{self:this},this.onClickAddDropDown);
$remove.on("click",{self:this},this.removeRow);
$rowDomId.find("input").focus();
};
SurgeryStaffLocation.Rows.prototype.removeRow=function(event){var self=(event)?event.data.self:this;
var parentSelf=self.getParentSelf();
var surgDropDownObj=self.getSurgDropDown();
var key=null;
var containerRowObj=parentSelf.getContainerRowsObj();
var $addSurgbtn=$("#sswf-addSurgBtn"+self.getParentComponentId()+self.getRowContId());
var prevRow=null;
var prevRowId=null;
var actualRowCnt=parentSelf.getActualRowCount();
var latestRow=null;
var latestRowId=null;
var cnt=0;
for(key in containerRowObj){if(containerRowObj.hasOwnProperty(key)){if(containerRowObj[key].getActualRowCnt()===actualRowCnt-1){latestRow=containerRowObj[key];
}}}if(prevRow!==null){prevRowId=prevRow.getSurgID();
}if(latestRow!==null){latestRowId=latestRow.getSurgID();
}if((latestRow!==null)&&(latestRow.getActualRowCnt()===self.getActualRowCnt())&&(self.getSurgID()===null)){$addSurgbtn.removeClass("sswf-addSurg-not-active").bind("click",{self:parentSelf},parentSelf.addMoreRows).addClass("sswf-addSurg-active");
}else{if((prevRowId!==null)&&(latestRowId!==null)&&$addSurgbtn.hasClass("sswf-addSurg-not-active")){$addSurgbtn.removeClass("sswf-addSurg-not-active").bind("click",{self:parentSelf},parentSelf.addMoreRows).addClass("sswf-addSurg-active");
}}parentSelf.updateRowObj("sswf-row-id"+self.getParentComponentId()+self.getRowContId()+self.getRowId());
$("#sswf-row-id"+self.getParentComponentId()+self.getRowContId()+self.getRowId()).remove();
if(!($.isEmptyObject(surgDropDownObj))){$("#sswf-addSurgBtn"+self.getParentComponentId()+self.getRowContId()).show();
}parentSelf.setActualRowCount(actualRowCnt-1);
for(key in containerRowObj){if(containerRowObj.hasOwnProperty(key)){containerRowObj[key].setActualRowCnt(++cnt);
}}if(parentSelf.enableAddSurgBtn()){$addSurgbtn.unbind("click").removeClass("sswf-addSurg-not-active").bind("click",{self:parentSelf},parentSelf.addMoreRows).addClass("sswf-addSurg-active");
}};
SurgeryStaffLocation.Rows.prototype.searchPhysician=function(callback,textBox,component){var params,msgSearch,jsonSearch,searchox,url,xhr,returnData,searchPhrase,currentValue;
var prohibitedPersonIds=[];
var container;
var mainComponent;
container=component.getParentSelf();
if(component.rowId===1){mainComponent=container.getParentSelf();
prohibitedPersonIds.push.apply(prohibitedPersonIds,mainComponent.getPrimarySurgeonIdList());
}prohibitedPersonIds.push.apply(prohibitedPersonIds,container.getSurgeryStaffLocationIdList());
if(textBox.value.length>1){xhr=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
searchPhrase=textBox.value;
currentValue=textBox.value;
xhr.onreadystatechange=function(){if(xhr.readyState===4&&xhr.status===200){msgSearch=xhr.responseText;
jsonSearch="";
if(msgSearch){jsonSearch=JSON.parse(msgSearch);
}if(jsonSearch){returnData=jsonSearch.RECORD_DATA.PERSON_LIST;
if(textBox.value.length>1){searchox=MP_Util.RetrieveAutoSuggestSearchBox(component);
if(searchox.value===currentValue){callback.autosuggest(returnData,true);
}}}}};
params="^MINE^, ^"+searchPhrase+"^,"+MP_Util.CreateParamArray(prohibitedPersonIds,1);
if(CERN_BrowserDevInd){url="mp_retrieve_physician?parameters="+params;
xhr.open("GET",url);
xhr.send(null);
}else{xhr.open("GET","mp_retrieve_physician");
xhr.send(params);
}}};
SurgeryStaffLocation.Rows.prototype.handleSelection=function(suggestionObj,textBox,component){var $addSurgbtn=null;
var surgeonTypes;
var containerSelf;
var surgeryStaffLocSelf;
var $rowDomId;
var $searchInputDom;
var $searchDiv;
var primarySurgeons;
if(!suggestionObj){return;
}surgeonTypes=component.getSurgDropDown();
containerSelf=component.getParentSelf();
surgeryStaffLocSelf=containerSelf.getParentSelf();
$rowDomId=$("#sswf-row-id"+component.getParentComponentId()+component.getRowContId()+component.getRowId());
$searchInputDom=$("#ContentCtrl"+component.getComponentId());
$searchDiv=$rowDomId.find(".search-box-div");
primarySurgeons=surgeryStaffLocSelf.getPrimSurgObj();
$rowDomId.find(".sswf-row-surg-name").remove();
$searchDiv.hide().after("<div class='sswf-row-surg-name'>"+suggestionObj.PERSON_NAME+"</div>");
$searchInputDom.val("");
$addSurgbtn=$("#sswf-addSurgBtn"+component.getParentComponentId()+component.getRowContId());
if(component.getRowId()===1){if(containerSelf.getContainerId()===0){surgeryStaffLocSelf.setStaffOnePrimId(suggestionObj.PERSON_ID);
}if(primarySurgeons[component.getSurgID()]){delete primarySurgeons[component.getSurgID()];
}surgeryStaffLocSelf.setPrimSurgObj(suggestionObj.PERSON_ID);
surgeryStaffLocSelf.updateLocDropdown();
}component.setSurgName(suggestionObj.PERSON_NAME);
component.setSurgID(suggestionObj.PERSON_ID);
if($.isEmptyObject(surgeonTypes)){$addSurgbtn.hide();
}$rowDomId.find(".sswf-row-surg-name").unbind("click").on("click",function(){$(this).hide();
$rowDomId.find(".search-box-div").show();
$searchInputDom.focus();
$addSurgbtn.unbind("click").addClass("sswf-addSurg-not-active").removeClass("sswf-addSurg-active");
});
$searchDiv.focusout(function(){$rowDomId.find(".sswf-row-surg-name").show();
$(this).hide();
if(component.getParentSelf().enableAddSurgBtn()){$addSurgbtn.unbind("click").bind("click",{self:containerSelf},containerSelf.addMoreRows).removeClass("sswf-addSurg-not-active").addClass("sswf-addSurg-active");
}});
if(component.getParentSelf().enableAddSurgBtn()){$addSurgbtn.unbind("click").bind("click",{self:containerSelf},containerSelf.addMoreRows).removeClass("sswf-addSurg-not-active").addClass("sswf-addSurg-active");
}};
SurgeryStaffLocation.Rows.prototype.createSuggestionLine=function(suggestionObj,searchVal){function highlightValue(inString,term){return"<strong >"+inString.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)("+term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi,"\\$1").split(" ").join("|")+")(?![^<>]*>)(?![^&;]+;)","gi"),"</strong><strong class='highlight'>$1</strong><strong>")+"</strong>";
}if(suggestionObj.PERSON_ID){return"<span class='srpwf-careset-icon'>&nbsp;</span>"+highlightValue(suggestionObj.PERSON_NAME,searchVal);
}};

function SurgerySummary(parentSelf,tabId,criterion){this.sswfI18n=i18n.discernabu.surgery_summary;
this.surgArchI18n=i18n.discernabu.surgery_architecture;
this.srReceiptI18n=i18n.discernabu.surgery_receipt_builder;
this.setCriterion(criterion);
this.setComponentId(tabId);
this.setParent(parentSelf);
this.favDialogName="";
this.favWarningMsgInd=false;
this.favWarningCheckInd=false;
this.$favDialogDom={};
this.$favDialogSaveButton={};
this.$surgReceiptDialog={};
this.favInputTimeoutId=1;
}SurgerySummary.prototype=new SurgeryBase();
SurgerySummary.prototype.constructor=SurgeryBase;
SurgeryRequestController.associateMapping(3,SurgerySummary);
SurgerySummary.prototype.setFavDialogName=function(favDialogName){this.favDialogName=favDialogName.toString();
};
SurgerySummary.prototype.getFavDialogName=function(){return this.favDialogName;
};
SurgerySummary.prototype.setFavWarningCheckInd=function(favWarningCheckInd){this.favWarningCheckInd=favWarningCheckInd;
};
SurgerySummary.prototype.getFavWarningCheckInd=function(){return this.favWarningCheckInd;
};
SurgerySummary.prototype.setFavWarningMsgInd=function(favWarningMsgInd){this.favWarningMsgInd=favWarningMsgInd;
};
SurgerySummary.prototype.getFavWarningMsgInd=function(){return this.favWarningMsgInd;
};
SurgerySummary.prototype.setFavDialogDom=function($favDialogDom){this.$favDialogDom=$favDialogDom;
};
SurgerySummary.prototype.getFavDialogDom=function(){return this.$favDialogDom;
};
SurgerySummary.prototype.setFavDialogSaveButton=function($favDialogSaveButton){this.$favDialogSaveButton=$favDialogSaveButton;
};
SurgerySummary.prototype.getFavDialogSaveButton=function(){return this.$favDialogSaveButton;
};
SurgerySummary.prototype.setSurgReceiptDialog=function($surgReceiptDialog){this.$surgReceiptDialog=$surgReceiptDialog;
};
SurgerySummary.prototype.getSurgReceiptDialog=function(){return this.$surgReceiptDialog;
};
SurgerySummary.prototype.retrieveComponentData=function(){this.renderComponent();
this.setSurgReceiptDialog($("#vwpModalDialogsurgery"+this.getParent().getId()));
};
SurgerySummary.prototype.renderComponent=function(){var receiptBuilder;
var receiptData;
try{receiptBuilder=new SurgeryRequestReceiptBuilder();
receiptData=this.formatData();
receiptBuilder.addHeader(receiptData.header);
receiptBuilder.addRows(receiptData.rowArr);
receiptBuilder.addFooter(receiptData.footer);
$("#"+this.getParentBodyId()).html($(this.createHeader()).append(receiptBuilder.build()));
}catch(err){logger.logError(err);
throw (err);
}};
SurgerySummary.prototype.createHeader=function(){var html="";
html+="<div class='surgery-summary'>";
html+="<h2 class='sec-hd'>";
html+="<span class='sec-title'><span class='comp-title'>"+this.surgArchI18n.summaryLbl+"</span></span>";
html+="</h2>";
html+="</div>";
return html;
};
SurgerySummary.prototype.formatData=function(){var staffData=this.getParent().getSharedResource("staff");
var locationData=this.getParent().getSharedResource("location");
var proceduresData=this.getParent().getSharedResource("procedures");
var powerplansData=this.getParent().getSharedResource("powerPlans");
var detailsData=this.getParent().getSharedResource("details");
var procedureCnt,staffCnt,procedureObj,procedure,time;
var detail={};
var formattedData={};
var rowArr=[];
var procArr=[];
var header=null;
var isPrimary=false;
var selectedDate="";
var dateDisplay=detailsData.dateRequest;
var procCollection=[];
var ssSaveAsFavButtonObj={};
var footerObj={};
var startDate;
var endDate;
time=parseInt(detailsData.blockTimeInd,10)<=0?"":this.sswfI18n.blockTime;
startDate=new Date();
endDate=new Date();
if(dateDisplay.startDate&&!dateDisplay.endDate){startDate.setISO8601(JSON.stringify(new Date(dateDisplay.startDate)));
selectedDate=this.srReceiptI18n.afterLbl+" "+startDate.format("mediumDate");
}else{if(!dateDisplay.startDate&&dateDisplay.endDate){endDate.setISO8601(JSON.stringify(new Date(dateDisplay.endDate)));
selectedDate=this.srReceiptI18n.beforeLbl+" "+endDate.format("mediumDate");
}else{if(!dateDisplay.startDate&&!dateDisplay.endDate){selectedDate=this.srReceiptI18n.noDateLbl;
}else{startDate.setISO8601(JSON.stringify(new Date(dateDisplay.startDate)));
endDate.setISO8601(JSON.stringify(new Date(dateDisplay.endDate)));
selectedDate=startDate.format("mediumDate")+" - "+endDate.format("mediumDate");
}}}header={date:selectedDate,location:locationData.locationName,time:time};
for(staffCnt=0;
staffCnt<staffData.length;
staffCnt++){procArr=[];
procCollection=proceduresData[staffData[staffCnt].staffTeams[0].id];
for(procedureCnt=0;
procedureCnt<procCollection.length;
procedureCnt++){procedure=procCollection[procedureCnt];
procedureObj={id:procedure.getSynId(),name:procedure.getSynName(),modifiers:procedure.getModifiers(),details:procedure.getDetails(),isPrimary:procedure.getIsPrimary(),isCancelled:"Future"};
if(procedure.getIsPrimary()){isPrimary=true;
procArr.unshift(procedureObj);
}else{procArr.push(procedureObj);
}}if(isPrimary){rowArr.unshift({surgeonArr:staffData[staffCnt].staffTeams,content:procArr});
isPrimary=false;
}else{rowArr.push({surgeonArr:staffData[staffCnt].staffTeams,content:procArr});
}}detail.content=[{duration:detailsData.durationDisplay,patientType:detailsData.patientType.display,deferToAnesthesia:detailsData.deferToAnesthesia,anesthesia:detailsData.anesthesia,instruction:detailsData.staffInstruction,powerplans:powerplansData||[]}];
rowArr.push(detail);
formattedData.header=header;
formattedData.rowArr=rowArr;
ssSaveAsFavButtonObj=this.createSaveAsFavButton();
footerObj={buttonArr:[ssSaveAsFavButtonObj]};
formattedData.footer=footerObj;
return formattedData;
};
SurgerySummary.prototype.selfUpdate=function(){this.preProcessing();
this.renderComponent();
this.postProcessing();
};
SurgerySummary.prototype.createSaveAsFavButton=function(){var self=this;
var surgReqCompBaseId=self.getParent().getBaseCompId();
var ssSaveAsFavButton=new ModalButton("ssSaveAsFavButton");
var surgFavDialogName="ssSaveAsFavSurgReqDialog"+surgReqCompBaseId;
var html="<div class = 'ss-dialog-saveasfav'><div id ='ssDialogFavForm' class = 'ss-dialog-saveasfav-form'><span class = 'surgery-required'>*</span><span class = 'ss-receipt-dialog-label'>"+self.sswfI18n.title+": </span><input id = 'ssDialogFavNameInput' maxlength='255' placeholder = '"+self.sswfI18n.favName+"' class = 'ss-dialog-saveasfav-input'></div></div>";
ssSaveAsFavButton.setText(self.sswfI18n.saveAsFav);
ssSaveAsFavButton.setOnClickFunction(function(){var ssSaveAsFavSurgReqDialog;
var ssDialogFavCancelButton;
var ssDialogFavSaveButton;
ssSaveAsFavSurgReqDialog=new ModalDialog(surgFavDialogName);
ssDialogFavCancelButton=new ModalButton("ssDialogFavCancelButton");
ssDialogFavSaveButton=new ModalButton("ssDialogFavSaveButton");
ssDialogFavCancelButton.setText(self.surgArchI18n.cancel);
ssDialogFavCancelButton.setOnClickFunction(function(){self.closeFavDialog();
});
ssDialogFavSaveButton.setText(self.surgArchI18n.save);
ssDialogFavSaveButton.setCloseOnClick(false);
ssDialogFavSaveButton.setIsDithered(true);
ssDialogFavSaveButton.setOnClickFunction(function(){self.handleFavDialogSave();
self.closeFavDialog();
});
ssSaveAsFavSurgReqDialog.setHeaderTitle(self.sswfI18n.saveAsFav);
ssSaveAsFavSurgReqDialog.setLeftMarginPercentage(35);
ssSaveAsFavSurgReqDialog.setRightMarginPercentage(35);
ssSaveAsFavSurgReqDialog.setTopMarginPercentage(35);
ssSaveAsFavSurgReqDialog.setBottomMarginPercentage(35);
ssSaveAsFavSurgReqDialog.addFooterButton(ssDialogFavSaveButton);
ssSaveAsFavSurgReqDialog.addFooterButton(ssDialogFavCancelButton);
ssSaveAsFavSurgReqDialog.setHeaderCloseFunction(function(){self.closeFavDialog();
});
MP_ModalDialog.addModalDialogObject(ssSaveAsFavSurgReqDialog);
MP_ModalDialog.showModalDialog(surgFavDialogName);
ssSaveAsFavSurgReqDialog.setBodyHTML(html);
self.afterFavDialogShowSetData(surgFavDialogName);
});
return ssSaveAsFavButton;
};
SurgerySummary.prototype.afterFavDialogShowSetData=function(surgFavDialogName){var $favDialogDom=$("#vwpModalDialog"+surgFavDialogName);
var $favDialogFooter=$favDialogDom.find("#"+surgFavDialogName+"footer");
var $favDialogSaveButton=$favDialogFooter.find("#ssDialogFavSaveButton");
var surgFavWarningHtml="<div id = 'ssDialogSaveAsFavWarning' class='ss-dialog-saveasfav-warning inline-message warning-container'><span class='message-info-text'>"+this.sswfI18n.favWarningText+"</span><br /><div class='ss-dialog-saveasfav-warning-checkbox'><input type='checkbox' name='favWarning' class='ss-dialog-saveasfav-checkbox'><span>"+this.sswfI18n.favCheckBoxText+"</span></div></div>";
$favDialogDom.find("#ssDialogFavNameInput").focus();
$(surgFavWarningHtml).insertBefore($favDialogFooter);
this.setFavDialogName(surgFavDialogName);
this.setFavDialogDom($favDialogDom);
this.setFavDialogSaveButton($favDialogSaveButton);
this.addFavDialogEvents();
};
SurgerySummary.prototype.handleFavDialogSaveDither=function(favNameInput){var $saveButton=this.getFavDialogSaveButton();
var tempWarningMsgInd;
if(this.getFavWarningMsgInd()){if(this.getFavWarningCheckInd()){tempWarningMsgInd=true;
}else{tempWarningMsgInd=false;
}}else{tempWarningMsgInd=true;
}if(favNameInput.length>0&&tempWarningMsgInd){$saveButton.attr("disabled",false);
}else{$saveButton.attr("disabled",true);
}};
SurgerySummary.prototype.addFavDialogEvents=function(){var self=this;
var $favDialogDom=self.getFavDialogDom();
var $favInput=$favDialogDom.find("#ssDialogFavNameInput");
$favDialogDom.find(".ss-dialog-saveasfav-checkbox").change(function(){if($(this).prop("checked")){self.setFavWarningCheckInd(true);
}else{self.setFavWarningCheckInd(false);
}self.handleFavDialogSaveDither($favInput.val());
});
$favInput.on("input propertychange",{self:self},self.setFavInputTimeout);
};
SurgerySummary.prototype.setFavInputTimeoutId=function(favInputTimeoutId){this.favInputTimeoutId=favInputTimeoutId;
};
SurgerySummary.prototype.getFavInputTimeoutId=function(){return this.favInputTimeoutId;
};
SurgerySummary.prototype.setFavInputTimeout=function(event){var self=(event.data)?event.data.self:this;
var favInputTimeoutId=self.getFavInputTimeoutId();
clearTimeout(favInputTimeoutId);
favInputTimeoutId=setTimeout(function(){self.showHideFavWarning();
},100);
self.setFavInputTimeoutId(favInputTimeoutId);
};
SurgerySummary.prototype.closeFavDialog=function(){var surgFavDialogName=this.getFavDialogName();
MP_ModalDialog.closeModalDialog(surgFavDialogName);
MP_ModalDialog.deleteModalDialogObject(surgFavDialogName);
this.setFavWarningCheckInd(false);
this.setFavWarningMsgInd(false);
this.setFavDialogDom({});
};
SurgerySummary.prototype.saveFavSurgicalRequest=function(surgFavName){var surgReqComp=this.getParent().getParentComp();
var $surgReceiptDialog=this.getSurgReceiptDialog();
var modalDialogId="surgery"+this.getParent().getId();
surgReqComp.processSurgicalRequest(modalDialogId,surgFavName.toString());
$surgReceiptDialog.find(".sr-overlay-div").remove();
this.closeFavDialog();
};
SurgerySummary.prototype.searchFavArr=function(surgFavName){var surgReqComp=this.getParent().getParentComp();
var surgFavsArr=surgReqComp.getSurgeryFavList();
var favCnt=0;
surgFavName=surgFavName.toString().toLowerCase().replace(/['"]+/g,"");
for(favCnt=0;
favCnt<surgFavsArr.length;
favCnt++){if(surgFavsArr[favCnt].SURG_FAV_DISPLAY.toLowerCase()===surgFavName){return true;
}}return false;
};
SurgerySummary.prototype.showHideFavWarning=function(){var self=this;
var $favDialogDom=self.getFavDialogDom();
var $favWarnMessage=$favDialogDom.find("#ssDialogSaveAsFavWarning");
var $favInput=$favDialogDom.find("#ssDialogFavNameInput");
var $favWarnCheckBox=$favWarnMessage.find(".ss-dialog-saveasfav-checkbox");
var surgFavName=$favInput.val().toString().replace(/['"]+/g,"");
if(self.searchFavArr(surgFavName)){if(!self.getFavWarningMsgInd()){$favWarnMessage.show();
self.setFavWarningMsgInd(true);
}}else{$favWarnMessage.hide();
$favWarnCheckBox.attr("checked",false);
self.setFavWarningMsgInd(false);
self.setFavWarningCheckInd(false);
}self.handleFavDialogSaveDither(surgFavName);
};
SurgerySummary.prototype.handleFavDialogSave=function(){var $favDialogDom=this.getFavDialogDom();
var $saveButton=this.getFavDialogSaveButton();
var surgFavName=$favDialogDom.find("#ssDialogFavNameInput").val().toString().replace(/['"]+/g,"");
this.showHideFavWarning();
if(!$saveButton.attr("disabled")){this.saveFavSurgicalRequest(surgFavName);
}};

