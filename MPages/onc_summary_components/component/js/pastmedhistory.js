function PastMedicalHistoryComponentStyle(){this.initByNamespace("pmh");
}PastMedicalHistoryComponentStyle.inherits(ComponentStyle);
function PastMedicalHistoryComponent(criterion){this.setCriterion(criterion);
this.setStyles(new PastMedicalHistoryComponentStyle());
this.setComponentLoadTimerName("USR:MPG.PASTMEDICALHISTORY.O1 - load component");
this.setComponentRenderTimerName("ENG:MPG.PASTMEDICALHISTORY.O1 - render component");
this.setScope(1);
this.setIncludeLineNumber(true);
PastMedicalHistoryComponent.method("HandleSuccess",function(recordData){CERN_PMH_O1.RenderComponent(this,recordData);
});
PastMedicalHistoryComponent.method("InsertData",function(){CERN_PMH_O1.GetPastMedicalHistory(this);
});
}PastMedicalHistoryComponent.inherits(MPageComponent);
var CERN_PMH_O1=function(){return{GetPastMedicalHistory:function(component){var sendAr=[];
var program="mp_get_past_med_data";
var criterion=component.getCriterion();
sendAr.push("^MINE^",criterion.person_id+".0",criterion.provider_id+".0",criterion.ppr_cd+".0");
MP_Core.XMLCclRequestWrapper(component,program,sendAr,true);
return;
},RenderComponent:function(component,recordData){try{var countText="";
var jsonEval=recordData;
var pmhhtml="";
var onsetDate;
var resDate;
var pmhArray=[];
var pmhProb=[];
var commentDt=null;
var commentStr="";
var author="";
var pmhLen=jsonEval.PASTMED_CNT;
var df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
var pmh_i18n=i18n.discernabu.past_medical_history_o1;
var dateTime=new Date();
for(var j=0;
j<pmhLen;
j++){pmhProb.push(jsonEval.PASTMED[j]);
}pmhProb.sort(SortByProblemName);
for(var i=0;
i<pmhLen;
i++){var problem=pmhProb[i];
onsetDate="";
if(problem.ONSET_DATE_UTC!=""){var onsetDt=problem.ONSET_DATE_UTC;
dateTime.setISO8601(onsetDt);
if(problem.ONSET_DATE_FLAG==0){onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
}else{if(problem.ONSET_DATE_FLAG==1){onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_MONTH_4YEAR_NO_DATE);
}else{if(problem.ONSET_DATE_FLAG==2){onsetDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_4YEAR);
}}}}resDate="";
if(problem.RES_DATE_UTC!=""){var resDt=problem.RES_DATE_UTC;
dateTime.setISO8601(resDt);
if(problem.RES_DATE_FLAG==0){resDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
}else{if(problem.RES_DATE_FLAG==1){resDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_MONTH_4YEAR_NO_DATE);
}else{if(problem.RES_DATE_FLAG==2){resDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_4YEAR);
}}}}var comObj=problem.COMMENT;
commentStr="";
author="";
for(var c=0;
c<comObj.length;
c++){commentDt="";
var comment=comObj[c];
if(comment.DATE!=""){var comDt=comment.DATE;
dateTime.setISO8601(comDt);
commentDt=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
}author=comment.AUTHOR;
commentStr+=commentDt+" - "+author+"<br/>"+comment.COMMENT+"<br/>";
}pmhArray.push("<dl class='pmh-info'><dt class='det-hd'>",pmh_i18n.PAST_MEDICAL_HISTORY,"</dt><dd class='pmh-name'>");
if(problem.ANNOTATED_DISPLAY){pmhArray.push(problem.ANNOTATED_DISPLAY,"</dd>");
}else{pmhArray.push(problem.NAME,"</dd>");
}if(problem.CODE){pmhArray.push("<dt><span>",pmh_i18n.CODE,"</span></dt><dd class='pmh-code'><span class='code'>(",problem.CODE,")</span></dd>");
}pmhArray.push("</dl><h4 class='det-hd'><span>",pmh_i18n.PAST_MEDICAL_DETAILS,"</span></h4><div class='hvr'><dl class='pmh-det'><dt><span>",pmh_i18n.PAST_PROBLEM,":</span></dt><dd><span>",problem.NAME,"</span></dd><dt><span>",pmh_i18n.ANNOTATED_DISPLAY,":</span></dt><dd><span>",problem.ANNOTATED_DISPLAY,"</span></dd><dt><span>",pmh_i18n.ONSET_DATE,":</span></dt><dd><span>",onsetDate,"</span></dd><dt><span>",pmh_i18n.PAST_RESOLVED_DATE,":</span></dt><dd><span>",resDate,"</span></dd><dt><span>",pmh_i18n.STATUS,":</span></dt><dd><span>",problem.STATUS,"</span></dd><dt><span>",pmh_i18n.COMMENTS,":</span></dt><dd><span>",commentStr,"</span></dd></dl></div>");
}var content=[];
if(pmhLen==null||pmhLen==""){pmhLen=0;
}content.push("<div class ='",MP_Util.GetContentClass(component,pmhLen),"'>",pmhArray.join(""),"</div>");
pmhhtml=content.join("");
countText=MP_Util.CreateTitleText(component,pmhLen);
MP_Util.Doc.FinalizeComponent(pmhhtml,component,countText);
}catch(err){alert("An error has occurred in PMH : "+err.name+" - "+err.message);
}finally{}}};
function SortByProblemName(a,b){var aName=a.NAME;
var bName=b.NAME;
var aUpper=(aName!=null)?aName.toUpperCase():"";
var bUpper=(bName!=null)?bName.toUpperCase():"";
if(aUpper>bUpper){return 1;
}else{if(aUpper<bUpper){return -1;
}}return 0;
}}();
