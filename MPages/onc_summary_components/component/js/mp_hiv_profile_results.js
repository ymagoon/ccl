"use strict";
var HIV_PROFILE_RESULTS=(function(){function Mutation(str){var starred,unstarred,key,isStarred;
starred="";
unstarred="";
key="";
isStarred=false;
if(str.slice(str.length-1)==="*"){starred=str;
unstarred=str.slice(0,str.length-1);
isStarred=true;
}else{starred=str+"*";
unstarred=str;
}key=unstarred.toLowerCase();
return{original:str,starred:starred,unstarred:unstarred,key:key,isStarred:isStarred};
}function filterMutations(strAr,filter){var mutation,mutations,key,removeFilterVal;
mutation=null;
mutations={};
removeFilterVal=false;
if(strAr.length>1){removeFilterVal=true;
}$.each(strAr,function(index,str){if(removeFilterVal!==true||str!==filter){mutation=new Mutation(str);
key=mutation.key;
if(key in mutations){if(!mutation.isStarred&&mutations[key].isStarred){mutations[key]=mutation;
}}else{mutations[key]=mutation;
}}});
return mutations;
}function getCurrent(meas,filter){var sumAr,resAr;
sumAr=[];
resAr=$.trim(meas.getResult()).split(",");
$.each(resAr,function(index,res){sumAr.push($.trim(res));
});
return filterMutations(sumAr,filter);
}function getSummation(measAr,filter){var sumAr,resAr,retVal;
sumAr=[];
$.each(measAr,function(idx1,meas){resAr=$.trim(meas.getResult()).split(",");
$.each(resAr,function(idx2,res){sumAr.push($.trim(res));
});
});
retVal=filterMutations(sumAr,filter);
return retVal;
}function formatSummation(mutations){var mutationsAr,finalAr,key;
mutationsAr=[];
finalAr=[];
for(key in mutations){if(mutations.hasOwnProperty(key)){mutationsAr.push(mutations[key].original);
}}mutationsAr=mutationsAr.sort();
$.each(mutationsAr,function(index,mutation){finalAr.push("<span class='lab-res'>"+mutation+"</span>");
});
return finalAr.join(", ");
}function formatCurrent(current,summation){var mutationAr,finalAr,key;
mutationAr=[];
finalAr=[];
for(key in current){if(current.hasOwnProperty(key)){if(key in summation){mutationAr.push({val:current[key].original,type:"old"});
}else{mutationAr.push({val:current[key].original,type:"new"});
}}}mutationAr=mutationAr.sort(function(a,b){if(a.val>b.val){return 1;
}else{if(a.val<b.val){return -1;
}}return 0;
});
$.each(mutationAr,function(index,mutation){if(mutation.type==="old"){finalAr.push("<span class='lab-res'>"+mutation.val+"</span>");
}else{finalAr.push("<span class='lab-res hiv-new-res'>"+mutation.val+"</span>");
}});
return finalAr.join(", ");
}function getEarliestDate(measurements){var dates,returnDate;
dates=[];
$.each(measurements,function(idx1,meas){dates.push(meas.getDateTime());
});
dates.sort(function(a,b){if(a<b){return -1;
}if(a>b){return 1;
}return 0;
});
if(dates.length>0){returnDate=dates[0];
}else{returnDate=null;
}return returnDate;
}return{MutationResult:function(measurementsAr,filter){var curSet,sumSet,curStr,sumStr,mFirst,mRest,curMeas,sumMeas,retAr;
if(measurementsAr.length>1){mRest=measurementsAr.slice(1);
sumSet=getSummation(mRest,filter);
sumStr=formatSummation(sumSet);
sumMeas={getResult:function(){return sumStr;
},getDateTime:function(){return getEarliestDate(mRest);
}};
}else{sumSet={};
}if(measurementsAr.length>0){mFirst=measurementsAr[0];
curSet=getCurrent(mFirst,filter);
curStr=formatCurrent(curSet,sumSet);
curMeas=new MP_Core.Measurement();
curMeas.init(mFirst.getEventId(),mFirst.getPersonId(),mFirst.getEncntrId(),mFirst.getEventCode(),mFirst.getDateTime(),curStr);
}return{getCurrent:function(){return curMeas;
},getSummation:function(){return sumMeas;
}};
},loadMeasurementData:function(recordData,codeArray){var mapObjects,measurements,mapObject,eventCode,dateTime,measurement,codes;
codes=MP_Util.LoadCodeListJSON(recordData.CODES);
mapObjects=[];
measurements=[];
$.each(recordData.RESULTS,function(index,result){var sortedClinEvents;
sortedClinEvents=result.CLINICAL_EVENTS.sort(function(a,b){if(a.EFFECTIVE_DATE>b.EFFECTIVE_DATE){return -1;
}else{if(a.EFFECTIVE_DATE<b.EFFECTIVE_DATE){return 1;
}else{return 0;
}}});
if(sortedClinEvents.length>0){measurements=[];
$.each(result.CLINICAL_EVENTS,function(index,clinEvent){var measKey;
mapObject=new MP_Core.MapObject(clinEvent.EVENT_CD,measurements);
eventCode=MP_Util.GetValueFromArray(clinEvent.EVENT_CD,codes);
dateTime=new Date();
dateTime.setISO8601(clinEvent.EFFECTIVE_DATE);
for(measKey in clinEvent.MEASUREMENTS){if(clinEvent.MEASUREMENTS.hasOwnProperty(measKey)){measurement=new MP_Core.Measurement();
measurement.init(clinEvent.EVENT_ID,clinEvent.PERSON_ID,clinEvent.ENCNTR_ID,eventCode,dateTime,MP_Util.Measurement.GetObject(clinEvent.MEASUREMENTS[measKey],codes));
measurement.setNormalcy(MP_Util.GetValueFromArray(clinEvent.MEASUREMENTS[measKey].NORMALCY_CD,codes));
measurements.push(measurement);
}}});
if(measurements.length>0){mapObjects.push(mapObject);
}}});
return mapObjects;
}};
}());
