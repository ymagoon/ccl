function Cv2ComponentStyle(){this.initByNamespace("cv2");
}Cv2ComponentStyle.inherits(ComponentStyle);
function Cv2Component(criterion){this.lastWindowHeight=0;
this.lastWindowWidth=0;
this.m_diagnosisTargetVocabCd=0;
this.m_problemTargetVocabCd=0;
this.m_canAddConditionFlag=0;
this.m_historicalLabelDisplay=i18n.discernabu.consolproblem_o2.HISTORICAL;
this.m_inactiveLabelDisplay=i18n.discernabu.consolproblem_o2.INACTIVE;
this.m_activeLabelDisplay=i18n.discernabu.consolproblem_o2.CHRONIC;
this.m_visitLabelDisplay=i18n.discernabu.consolproblem_o2.THIS_VISIT;
this.m_nNewConditionType=-1;
this.m_dNewConditionNomenclatureId=0;
this.m_nNewConditionIndx=0;
this.m_loadedConditions=null;
this.m_sList=[];
this.m_sPlaceHolder="";
this.m_cvDragging=false;
this.m_cvDragHvr="";
this.m_cvDragHvrLeft=0;
this.m_cvActiveHvr="";
this.m_cvDetailHvr="";
this.m_mousePos="";
this.m_isDragging=false;
this.m_dragStart="";
this.m_dragStop="";
this.m_dragTarget="";
this.m_cvDragParentDiv="";
this.m_cvDragNomenId=0;
this.m_cvSourceSection="";
this.m_rootNode="";
this.m_selectedOnDown=false;
this.m_lastMouseDownId="";
this.m_iconPath="";
this.m_isDropMenu=false;
this.m_cv2HvrTimer=null;
this.m_reprioritizedDiagnoses=null;
this.m_nProcessing=0;
this.m_nWaitCursor=0;
this.m_bActiveExpanded=true;
this.m_bHistoricalExpanded=false;
this.m_nRefreshCount=0;
this.m_cvAddAsType=-1;
this.m_df=null;
this.m_cvProbDxObj=null;
this.setCriterion(criterion);
this.setStyles(new Cv2ComponentStyle());
this.setComponentLoadTimerName("USR:MPG.CONSOL_PROB.O2 - load component");
this.setComponentRenderTimerName("ENG:MPG.CONSOL_PROB.O2 - render component");
this.setIncludeLineNumber(false);
this.m_editMode=false;
this.m_defaultSearchVocab=0;
this.m_visitVocab=0;
this.m_activeVocab=0;
this.m_visitLabel="";
this.m_activeLabel="";
this.m_historicalLabel="";
this.m_visitAddClass=0;
this.m_visitAddConf=0;
this.m_visitAddType=0;
this.m_activeAddClass=0;
this.m_activeAddType=0;
this.m_compObject={cvObject:[],cvModRootId:null,cvCompId:null,cvCompSec:null,iSearchTypeFlag:0,sec:"",criterion:null,curSearchCounter:0,replySearchCounter:0};
this.setScope(1);
this.setHasActionsMenu(true);
this.m_commentExpandFlag=[];
this.m_allowComments=1;
this.m_showAnnotatedDisplay=1;
this.m_enableModifyPrioritization=0;
this.m_viewPriorities=0;
this.m_problemListFlag=0;
this.nkpNomenclatureId=0;
this.nkpProblemId=0;
this.nkpNomenArray=[];
this.nNKPCanUpdate=0;
this.nNKPCanView=0;
this.nNKPActiveInactiveProbExist=0;
this.hasNKP=false;
this.bActiveInactiveProbFound=false;
this.c_nkpNomenclatureId=0;
this.c_nkpConditionIndex=0;
this.nkpSelected=false;
this.selectedType="";
this.mnu_removeThisVisitId="";
this.mnu_resolveId="";
this.mnu_inactivateId="";
this.mnu_cancelId="";
this.mnu_moveActiveId="";
this.mnu_moveThisVisitId="";
this.mnu_infoButtonId="";
this.mnu_seperatorId="";
this.compMenuReference={};
this.selectedStatusCounts={DIAGNOSIS:0,ACTIVE:0,INACTIVE:0,RESOLVED:0,Pregnancy:0,"Free-text":0,"DIAGNOSIS+ACTIVE":0,"DIAGNOSIS+INACTIVE":0,"DIAGNOSIS+RESOLVED":0,"HISTORICAL+DIAGNOSIS":0,"HISTORICAL+DIAGNOSIS+RESOLVED":0};
this.conditionAddedFlag=false;
this.viewableActiveConditionCount=0;
this.tooltip=new MPageTooltip().setShowDelay(0);
this.priorityMenuId="";
this.indicatorMenuId="";
this.conditionMapping=null;
this.selectedRowsCount=0;
this.dxAssistantFlag=false;
this.unspecifiedConditions=null;
this.m_enableEarlyTransitionDx=false;
Cv2Component.method("InsertData",function(){CERN_CV_O2.GetCvTable(this);
});
Cv2Component.method("HandleSuccess",function(conditionData){CERN_CV_O2.RenderComponent(this,conditionData);
});
Cv2Component.method("setDefaultSearchVocab",function(value){this.m_defaultSearchVocab=value;
});
Cv2Component.method("getDefaultSearchVocab",function(){return this.m_defaultSearchVocab;
});
Cv2Component.method("setVisitVocab",function(value){this.m_visitVocab=value;
});
Cv2Component.method("getVisitVocab",function(){return this.m_visitVocab;
});
Cv2Component.method("setActiveVocab",function(value){this.m_activeVocab=value;
});
Cv2Component.method("getActiveVocab",function(){return this.m_activeVocab;
});
Cv2Component.method("setVisitLabel",function(value){this.m_visitLabel=i18n.discernabu.consolproblem_o2.THIS_VISIT;
});
Cv2Component.method("getVisitLabel",function(){return this.m_visitLabel;
});
Cv2Component.method("setActiveLabel",function(value){this.m_activeLabel=i18n.discernabu.consolproblem_o2.CHRONIC;
});
Cv2Component.method("getActiveLabel",function(){return this.m_activeLabel;
});
Cv2Component.method("setHistoricalLabel",function(value){this.m_historicalLabel=i18n.discernabu.consolproblem_o2.HISTORICAL;
});
Cv2Component.method("getHistoricalLabel",function(){return this.m_historicalLabel;
});
Cv2Component.method("getVisitAddType",function(){return this.m_visitAddType;
});
Cv2Component.method("setVisitAddType",function(value){this.m_visitAddType=value;
});
Cv2Component.method("getVisitAddClass",function(){return this.m_visitAddClass;
});
Cv2Component.method("setVisitAddClass",function(value){this.m_visitAddClass=value;
});
Cv2Component.method("getVisitAddConf",function(){return this.m_visitAddConf;
});
Cv2Component.method("setVisitAddConf",function(value){this.m_visitAddConf=value;
});
Cv2Component.method("getActiveAddType",function(){return this.m_activeAddType;
});
Cv2Component.method("setActiveAddType",function(value){this.m_activeAddType=value;
});
Cv2Component.method("getActiveAddClass",function(){return this.m_activeAddClass;
});
Cv2Component.method("setActiveAddClass",function(value){this.m_activeAddClass=value;
});
Cv2Component.method("setModifyInd",function(value){this.m_modifyInd=(value==1?true:false);
});
Cv2Component.method("getModifyInd",function(){return this.m_modifyInd;
});
Cv2Component.method("setEnableModifyPrioritization",function(value){this.m_enableModifyPrioritization=(value==true?1:0);
});
Cv2Component.method("getEnableModifyPrioritization",function(){return this.m_enableModifyPrioritization;
});
Cv2Component.method("openTab",function(){var criterion=this.getCriterion();
var sParms="/PERSONID="+criterion.person_id+" /ENCNTRID="+criterion.encntr_id+" /FIRSTTAB=^"+this.getLink()+"+^";
APPLINK(0,criterion.executable,sParms);
this.InsertData();
});
Cv2Component.method("getDateFormatter",function(){if(!this.m_df){this.m_df=new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
}return this.m_df;
});
}Cv2Component.inherits(MPageComponent);
Cv2Component.prototype.getUnspecifiedConditions=function(){if(!this.unspecifiedConditions){this.unspecifiedConditions=[];
}return this.unspecifiedConditions;
};
Cv2Component.prototype.setUnspecifiedConditions=function(arrConditions){this.unspecifiedConditions=arrConditions;
};
Cv2Component.prototype.setIsDxAssistantEnabled=function(flag){this.dxAssistantFlag=!!flag;
};
Cv2Component.prototype.isDxAssistantEnabled=function(){return this.dxAssistantFlag;
};
Cv2Component.prototype.setConditionMapping=function(map){this.conditionMapping=map;
};
Cv2Component.prototype.getConditionMapping=function(){if(!this.conditionMapping){this.conditionMapping={};
}return this.conditionMapping;
};
Cv2Component.prototype.setProblemListFlag=function(flag){var validFlags=[1,2,3];
var val=flag|0;
if($.inArray(val,validFlags)!==-1){this.m_problemListFlag=val;
}else{this.m_problemListFlag=2;
}};
Cv2Component.prototype.getProblemListFlag=function(){return this.m_problemListFlag;
};
Cv2Component.prototype.getConditionById=function(id){if(!this.conditionMapping||!this.conditionMapping[id]){return null;
}return this.conditionMapping[id];
};
Cv2Component.prototype.createConditionMapping=function(recordData){if(!recordData){MP_Util.LogError("No record data was passed into createConditionMapping method of Cv2Component.");
return;
}var conditionsArray=[];
var data=recordData.DATA||null;
if(!data){MP_Util.LogError("Record data passed into createConditionMapping method of Cv2Component lacks 'DATA' field.");
return;
}if(data.THIS_VISIT){conditionsArray=conditionsArray.concat(data.THIS_VISIT);
}if(data.ACTIVE){conditionsArray=conditionsArray.concat(data.ACTIVE);
}if(data.HISTORICAL){conditionsArray=conditionsArray.concat(data.HISTORICAL);
}var compID=this.getStyles().getId();
var cLen=conditionsArray.length;
var i;
this.setConditionMapping(null);
var conditionMap=this.getConditionMapping();
for(i=0;
i<cLen;
i++){var condition=conditionsArray[i];
var id=compID+"ConditionID"+i;
condition.HTML_ID=id;
conditionMap[id]=condition;
}};
Cv2Component.prototype.populateDiagnosesNomenclatureSpecificity=function(conditionsList){if(!CERN_Platform.inMillenniumContext()){return;
}if(!this.isDxAssistantEnabled()){return;
}var diagnosisAssistantObj=CERN_Platform.getDiscernObject("DIAGNOSISASSISTANT");
var dxCollectionObj=CERN_Platform.getDiscernObject("DISPATCHCOLLECTION");
if(!diagnosisAssistantObj||!dxCollectionObj||!conditionsList){return;
}var clinDxConditionMap={};
this.setUnspecifiedConditions(null);
var unspecifiedConditionsArray=this.getUnspecifiedConditions();
var condition=null;
var dxObj=null;
var cLength=conditionsList.length;
var i;
for(i=0;
i<cLength;
i++){condition=conditionsList[i];
var diagnosis=CERN_CV_O2.getMostRecentDiagnosisFromCondition(condition);
if(diagnosis.TRANSITION_PRIVILEGE_FLAG==0){continue;
}dxObj=CERN_CV_O2.populateClinicalDiagnosisObj(condition,this.getComponentId());
if(dxObj&&(dxObj.NomenclatureID>0||dxObj.TransitionNomenclatureID>0)){dxCollectionObj.Add(dxObj);
clinDxConditionMap[dxObj]=condition;
}}var specificitiesRetrieved=false;
try{var getSpecificityCriteria=CERN_Platform.getDiscernObject("GETSPECIFICITYCRITERIA");
if(!getSpecificityCriteria){logger.logError("Failed to create GetSpecificityCriteria COM object.");
return;
}getSpecificityCriteria.AddClinicalDiagnosisCol(dxCollectionObj);
getSpecificityCriteria.SetReturnEffectiveDtTmByEnum(this.m_enableEarlyTransitionDx?1:0);
specificitiesRetrieved=diagnosisAssistantObj.GetNomenclatureSpecificityByCriteria(getSpecificityCriteria);
}catch(err){logger.logError("Failed to create GetSpecificityCriteria COM object. Utilizing older method without early transition support. Error: "+err);
specificitiesRetrieved=diagnosisAssistantObj.GetNomenclatureSpecificityInfo(dxCollectionObj);
}if(!specificitiesRetrieved){return;
}cLength=dxCollectionObj.GetCount();
for(i=0;
i<cLength;
i++){var clinicalDxObj=dxCollectionObj.GetAt(i);
if(!clinicalDxObj){continue;
}var specificityInd=clinicalDxObj.NomenclatureSpecific;
condition=clinDxConditionMap[clinicalDxObj];
if(condition){condition.SPECIFICITY_FLAG=specificityInd;
if(specificityInd===0){unspecifiedConditionsArray.push(condition);
}}}};
Cv2Component.prototype.buildUnspecifiedAlert=function(){if(!this.isDxAssistantEnabled()){return;
}var self=this;
var unspecifiedConditionsArray=this.getUnspecifiedConditions();
var uLen=unspecifiedConditionsArray.length;
var html="";
if(!uLen){return;
}html+="<span class='cv2-dx-ass-unspecified'>&nbsp;</span>";
html+=uLen+" "+i18n.discernabu.consolproblem_o2.UNSPECIFIED_PROBLEMS;
var jqUnspecifiedAlertCont=$("#"+this.getStyles().getId()+"UnspecifiedAlert");
jqUnspecifiedAlertCont.html(html);
jqUnspecifiedAlertCont.addClass("cv2-unspecified-alert-cont");
jqUnspecifiedAlertCont.click(function(){self.launchDxAssistant(null,false);
});
};
Cv2Component.prototype.removeDiagnoses=function(){var compIDDigits=this.getComponentId();
CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,1,true,CERN_CV_O2.updateCVActions,compIDDigits);
var criterion=this.getCriterion();
var encounterId=criterion.encntr_id;
var jqSelectedRows=$("#cv2"+compIDDigits).find(".cv2-selected");
var diagnosesIds=[];
var sLen=jqSelectedRows.length;
var i;
for(i=0;
i<sLen;
i++){var condition=this.getConditionById(jqSelectedRows.get(i).id);
if(!condition){continue;
}var nomenclatureId=condition.NOMENCLATURE_ID;
var conditionIndx=condition.CONDITION_INDEX;
var diagnoses=condition.DIAGNOSES;
var dLen=diagnoses.length;
var j;
for(j=0;
j<dLen;
j++){var diagnosis=diagnoses[j];
if(diagnosis.ENCOUNTER_ID===encounterId){diagnosesIds.push(parseFloat(diagnosis.DIAGNOSIS_ID));
this.m_nNewConditionType=0;
this.m_dNewConditionNomenclatureId=nomenclatureId;
this.m_nNewConditionIndx=conditionIndx;
}}}if(diagnosesIds.length>0){CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,2,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount+=2;
var sendAr=CERN_CV_O2.getServiceCallArrayForBatchRemove(diagnosesIds,compIDDigits);
CERN_CV_O2.loadWithCBParameters("mp_modify_diagnosis",CERN_CV_O2.cvRefresh,"cv2",sendAr.join(","),compIDDigits);
CERN_CV_O2.reprioritizeAndModifyDiagnoses(diagnosesIds,compIDDigits);
CERN_CV_O2.refreshConditions(compIDDigits);
}CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,-1,true,CERN_CV_O2.updateCVActions,compIDDigits);
};
Cv2Component.prototype.modifyProblem=function(statusFlag){var compIDDigits=this.getComponentId();
var cv2i18n=i18n.discernabu.consolproblem_o2;
var criterion=this.getCriterion();
var jqSelectedRows=$("#cv2"+compIDDigits).find(".cv2-selected");
var sLen=jqSelectedRows.length;
if(sLen===0){return;
}CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,1,true,CERN_CV_O2.updateCVActions,compIDDigits);
var nomenArray=[];
var nLen;
var nomenProcessed=false;
CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,sLen,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount+=sLen;
var i;
for(i=0;
i<sLen;
i++){var condition=this.getConditionById(jqSelectedRows.get(i).id);
if(!condition){continue;
}var nomenclatureId=condition.NOMENCLATURE_ID;
var conditionIndx=condition.CONDITION_INDEX;
nLen=nomenArray.length;
nomenProcessed=false;
for(var j=0;
j<nLen;
j++){if(nomenArray[j]===conditionIndx){nomenProcessed=true;
break;
}}if(nomenProcessed){CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,-1,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount--;
continue;
}nomenArray.push(conditionIndx);
var problemId=0;
var iProblemType=0;
var mostRecentProblem=CERN_CV_O2.getMostRecentProblem(0,conditionIndx,compIDDigits);
if(!mostRecentProblem||mostRecentProblem.PROBLEM_ID===0){CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,-1,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount--;
continue;
}else{problemId=mostRecentProblem.PROBLEM_ID;
iProblemType=mostRecentProblem.PROBLEM_TYPE_FLAG;
}if(problemId>0){if(iProblemType===2){CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,-1,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount--;
alert(cv2i18n.PROBLEM_TYPE_FLAG_2_MSG);
}else{if(mostRecentProblem.CAN_MODIFY===0){CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,-1,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount--;
alert(cv2i18n.NO_PRIVS_MSG);
}else{var paramString=["^MINE^",problemId.toFixed(1),criterion.provider_id.toFixed(1),criterion.ppr_cd.toFixed(1),statusFlag,0,0].join(",");
CERN_CV_O2.loadWithCBParameters("mp_modify_problem",CERN_CV_O2.cvRefresh,"cv2",paramString,compIDDigits);
}}}else{CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,-1,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount--;
}}CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,-1,true,CERN_CV_O2.updateCVActions,compIDDigits);
};
Cv2Component.prototype.moveConditionMenu=function(moveFlag){var compIDDigits=this.getComponentId();
var slaTimer=null;
var catMean=this.getCriterion().category_mean;
var jqSelectedRows=$("#cv2"+compIDDigits).find(".cv2-selected");
var sLen=jqSelectedRows.length;
if(sLen===0){return;
}CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,1,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount++;
var nomenclatureId=0;
CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,sLen,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount+=sLen;
var i;
for(i=0;
i<sLen;
i++){var condition=this.getConditionById(jqSelectedRows.get(i).id);
if(!condition){continue;
}nomenclatureId=condition.NOMENCLATURE_ID;
if(moveFlag===1){slaTimer=MP_Util.CreateTimer("CAP:MPG_Consolidated_Problems_02_Dropdown_Move_To_Active");
if(slaTimer){slaTimer.SubtimerName=catMean;
slaTimer.Stop();
}CERN_CV_O2.addConditionWithType(nomenclatureId,2,0,compIDDigits,0,1);
}else{if(moveFlag===2){slaTimer=MP_Util.CreateTimer("CAP:MPG_Consolidated_Problems_02_Dropdown_Move_To_This_Visit");
if(slaTimer){slaTimer.SubtimerName=catMean;
slaTimer.Stop();
}var nextPriority=0;
if(this.m_enableModifyPrioritization){nextPriority=CERN_CV_O2.getNextPriority(compIDDigits)+i;
}CERN_CV_O2.addConditionWithType(nomenclatureId,0,0,compIDDigits,nextPriority,1);
}}CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,-1,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount--;
}CERN_CV_O2.refreshConditions(compIDDigits);
};
Cv2Component.prototype.moveCondition=function(condition,type){var compIDDigits=this.getComponentId();
var nextPriority=0;
CERN_CV_O2.processingUI(this,"cv2Processing"+compIDDigits,1,true,CERN_CV_O2.updateCVActions,compIDDigits);
this.m_nRefreshCount++;
CERN_CV_O2.addConditionWithType(condition.NOMENCLATURE_ID,type,0,compIDDigits,nextPriority,1);
CERN_CV_O2.refreshConditions(compIDDigits);
};
Cv2Component.prototype.createPriorityMenu=function(){if(this.priorityMenuId){MP_MenuManager.deleteMenuObject(this.priorityMenuId);
}var compID=this.getStyles().getId();
var menuID="priorityMenu"+compID;
var priorityMenu=new Menu(menuID);
priorityMenu.setLabel("");
priorityMenu.setIsRootMenu(true);
priorityMenu.setAnchorConnectionCorner(["bottom","right"]);
priorityMenu.setContentConnectionCorner(["top","right"]);
priorityMenu.setTypeClass("cv2-priority-menu");
var nextPriority=CERN_CV_O2.getNextPriority(this.getComponentId());
var i;
for(i=0;
i<=nextPriority;
i++){var mnuItem=new MenuSelection(compID+"PriorityItem"+i);
if(i===0){mnuItem.setLabel("--");
}else{mnuItem.setLabel(i+"");
}priorityMenu.addMenuItem(mnuItem);
}MP_MenuManager.addMenuObject(priorityMenu);
this.priorityMenuId=menuID;
};
Cv2Component.prototype.createIndicatorMenu=function(){if(this.indicatorMenuId){return;
}var compID=this.getStyles().getId();
var cv2i18n=i18n.discernabu.consolproblem_o2;
var menuID="indicatorMenu"+compID;
var indicatorMenu=new Menu(menuID);
indicatorMenu.setLabel("");
indicatorMenu.setIsRootMenu(true);
indicatorMenu.setAnchorConnectionCorner(["bottom","left"]);
indicatorMenu.setContentConnectionCorner(["top","left"]);
indicatorMenu.setAnchorActiveClass("cv2-mnu-hover cv2-indicator-menu");
var thisVisitMenuItem=new MenuSelection(compID+"IndicatorThisVisit");
thisVisitMenuItem.setLabel(cv2i18n.THIS_VISIT);
var chronicMenuItem=new MenuSelection(compID+"IndicatorChronic");
chronicMenuItem.setLabel(cv2i18n.CHRONIC);
var inactiveMenuItem=new MenuSelection(compID+"IndicatorInactive");
inactiveMenuItem.setLabel(cv2i18n.INACTIVE);
var historicalMenuItem=new MenuSelection(compID+"IndicatorHistorical");
historicalMenuItem.setLabel(cv2i18n.HISTORICAL);
indicatorMenu.addMenuItem(thisVisitMenuItem);
indicatorMenu.addMenuItem(chronicMenuItem);
indicatorMenu.addMenuItem(inactiveMenuItem);
indicatorMenu.addMenuItem(historicalMenuItem);
MP_MenuManager.addMenuObject(indicatorMenu);
this.indicatorMenuId=menuID;
};
Cv2Component.prototype.toggleComment=function(jqCommentToggleIcon,jqConditionRow){var jqCommentSection=jqConditionRow.find(".cv2-comment-row");
if(jqCommentSection.hasClass("cv2-closed")){jqCommentSection.removeClass("cv2-closed");
jqCommentToggleIcon.removeClass("cv2-comment-close");
jqCommentToggleIcon.addClass("cv2-comment-open");
jqConditionRow.addClass("cv2-expanded");
}else{jqCommentSection.addClass("cv2-closed");
jqCommentToggleIcon.removeClass("cv2-comment-open");
jqCommentToggleIcon.addClass("cv2-comment-close");
jqConditionRow.removeClass("cv2-expanded");
}Util.cancelBubble(window.event);
};
Cv2Component.prototype.infoButtonClick=function(condition){var errorModal=null;
var closeButton=null;
var errorName=null;
var errorMsg=null;
var criterion=this.getCriterion();
var patientId=criterion.person_id;
var encounterId=criterion.encntr_id;
var section=condition.itemType;
var priCriteriaCd=condition.dPriCriteriaCd;
var nomenId=condition.dNomenId;
var searchNomId=condition.dOrigNomenId;
var description=condition.DISPLAY;
try{var launchInfoBtnApp=CERN_Platform.getDiscernObject("INFOBUTTONLINK");
if(launchInfoBtnApp){launchInfoBtnApp.SetInfoButtonData(parseFloat(patientId),parseFloat(encounterId),parseFloat(priCriteriaCd),1,2);
if(section!=="TV"){launchInfoBtnApp.AddProblem(parseFloat(nomenId),parseFloat(searchNomId),description);
}else{launchInfoBtnApp.AddDiagnosis(parseFloat(nomenId),parseFloat(searchNomId),description);
}launchInfoBtnApp.LaunchInfoButton();
}}catch(err){var i18nABU=i18n.discernabu;
errorName=err.name;
errorMessage=err.message||i18nABU.INFO_BUTTON_ERROR_MSG;
MP_Util.LogError(errorName+errorMessage);
errorModal=MP_ModalDialog.retrieveModalDialogObject("errorModal");
if(!errorModal){errorModal=MP_Util.generateModalDialogBody("errorModal","error",errorMessage,i18nABU.INFO_BUTTON_ERROR_ACTION);
errorModal.setHeaderTitle(i18n.ERROR_OCCURED);
closeButton=new ModalButton("closeButton");
closeButton.setText(i18n.CLOSE).setCloseOnClick(true);
errorModal.addFooterButton(closeButton);
}MP_ModalDialog.updateModalDialogObject(errorModal);
MP_ModalDialog.showModalDialog("errorModal");
}finally{Util.cancelBubble(window.event);
}};
Cv2Component.prototype.synchronizeWithWin32Diagnoses=function(){var compIDDigits=this.getComponentId();
var component=MP_Util.GetCompObjById(compIDDigits);
var probDxUtils=component.getProbDxUtilsObject();
if(!probDxUtils){logger.logError("Unable to create PROBDXUTILS COM object");
return;
}try{probDxUtils.RefreshDiagnosisCollection(component.m_compObject.criterion.person_id,component.m_compObject.criterion.encntr_id);
probDxUtils.RefreshProblemCollection(component.m_compObject.criterion.person_id);
}catch(err){logger.logError("Failed to call RefreshDiagnosisCollection or RefreshProblemCollection on probDxUtils: "+err);
}CERN_CV_O2.refreshConditions(compIDDigits);
};
Cv2Component.prototype.addSpecifiedDxToDxCollection=function(dxCollection,condition){if(!dxCollection||!condition){return;
}var dxObj=null;
dxObj=CERN_CV_O2.populateClinicalDiagnosisObj(condition,this.getComponentId());
if(dxObj){dxCollection.Add(dxObj);
}};
Cv2Component.prototype.addAllUnspecifiedDxToDxCollection=function(dxCollection,condition){if(!dxCollection){return;
}var dxObj=null;
var unspecifiedConditionsArray=this.getUnspecifiedConditions();
var uLen=unspecifiedConditionsArray.length;
var i;
if(condition){dxObj=CERN_CV_O2.populateClinicalDiagnosisObj(condition,this.getComponentId());
if(dxObj){dxCollection.Add(dxObj);
}}for(i=0;
i<uLen;
i++){if(condition&&unspecifiedConditionsArray[i]==condition){continue;
}dxObj=CERN_CV_O2.populateClinicalDiagnosisObj(unspecifiedConditionsArray[i],this.getComponentId());
if(dxObj){dxCollection.Add(dxObj);
}}};
Cv2Component.prototype.launchDxAssistant=function(condition,isSpecified){if(!this.isDxAssistantEnabled()){return;
}if(!CERN_Platform.inMillenniumContext()){return;
}var dxCollection=CERN_Platform.getDiscernObject("DISPATCHCOLLECTION");
var dxAssistant=CERN_Platform.getDiscernObject("DIAGNOSISASSISTANT");
var dxCollectionWithPrivs=null;
var criterion=this.getCriterion();
if(!dxCollection||!dxAssistant){MP_Util.LogError("Failed to create and launch DIAGNOSISASSISTANT");
return;
}var timerName=isSpecified?"CAP:MPG_Consolidated_Problems_O2_Dx_Assistant_Specified":"CAP:MPG_Consolidated_Problems_O2_Dx_Assistant_Unspecified";
var slaTimer=MP_Util.CreateTimer(timerName);
if(slaTimer){slaTimer.SubtimerName=criterion.category_mean;
slaTimer.Stop();
}if(isSpecified){this.addSpecifiedDxToDxCollection(dxCollection,condition);
this.addAllUnspecifiedDxToDxCollection(dxCollection,null);
}else{this.addAllUnspecifiedDxToDxCollection(dxCollection,condition);
}dxCollectionWithPrivs=dxAssistant.IsDxAssistantNeeded(criterion.provider_id,criterion.ppr_cd,criterion.position_cd,dxCollection);
if(!dxCollectionWithPrivs||dxCollectionWithPrivs.GetCount()<1){return;
}var comRetVal;
try{var dxAssistantCriteriaObj=CERN_Platform.getDiscernObject("DXASSISTANTCRITERIA");
dxAssistantCriteriaObj.SetParentWnd(0);
dxAssistantCriteriaObj.SetUserID(this.m_compObject.criterion.provider_id);
dxAssistantCriteriaObj.SetPPRCD(this.m_compObject.criterion.ppr_cd);
dxAssistantCriteriaObj.SetPatientID(this.m_compObject.criterion.person_id);
dxAssistantCriteriaObj.SetEncounterID(this.m_compObject.criterion.encntr_id);
dxAssistantCriteriaObj.SetCrossMapModeByEnum(0);
dxAssistantCriteriaObj.SetDialogType(0);
try{dxAssistantCriteriaObj.SetEnableEarlyTransitionDx(this.m_enableEarlyTransitionDx);
dxAssistantCriteriaObj.SetReturnEffectiveDtTmByEnum(this.m_enableEarlyTransitionDx?1:0);
}catch(err){dxAssistantCriteriaObj.SetReturnEffectiveDtTmByEnum(0);
logger.logError("Error occurred when attempting to set the early transition options in Diagnosis Assistant. An update of DiagnosisAssistant.dll may be required for this functionality. Error: "+err);
}comRetVal=dxAssistant.LaunchDiagnosisAssistantByCriteria(dxAssistantCriteriaObj,dxCollection);
}catch(err){logger.logError("Failed to create DXASSISTANTCRITERIA object: "+err);
comRetVal=dxAssistant.LaunchDiagnosisAssistant(0,criterion.provider_id,criterion.ppr_cd,criterion.person_id,criterion.encntr_id,dxCollection);
}if(comRetVal){this.synchronizeWithWin32Diagnoses();
}};
Cv2Component.prototype.getCurrentEncntrDiagnosis=function(condition){if(!condition||!condition.DIAGNOSES){return null;
}var diagnoses=condition.DIAGNOSES;
var diagnosis=null;
var dLen=diagnoses.length;
var d;
for(d=0;
d<dLen;
d++){if(diagnoses[d].ENCOUNTER_ID===this.getCriterion().encntr_id){diagnosis=diagnoses[d];
break;
}}return diagnosis;
};
Cv2Component.prototype.showPriorityMenu=function(jqSrcElement,condition){var self=this;
var compID=this.getStyles().getId();
var compIDDigits=this.getComponentId();
var priorityMenu=MP_MenuManager.getMenuObject(this.priorityMenuId);
priorityMenu.setAnchorElementId(jqSrcElement.prop("id"));
priorityMenu.setContentParentId(condition.HTML_ID+"PriorityAnchor");
var priorityFunction=function(){var newPriority=this.getLabel();
if(newPriority==="--"){newPriority=0;
}self.m_newConditionType=0;
self.m_nNewConditionIndx=condition.CONDITION_INDEX;
var reprioritizedDiagnoses=null;
var probDxUtils=self.getProbDxUtilsObject();
if(probDxUtils){var colDxObj=CERN_CV_O2.getThisVisitDiagnosisCol(compIDDigits);
var diagnosis=null;
diagnosis=self.getCurrentEncntrDiagnosis(condition);
if(diagnosis){try{reprioritizedDiagnoses=probDxUtils.ReprioritizeDiagnosesByPriority(colDxObj,diagnosis.DIAGNOSIS_ID,newPriority);
}catch(err){}}CERN_CV_O2.modifyReprioritizedDiagnoses(reprioritizedDiagnoses,compIDDigits);
}return;
};
var menuItems=priorityMenu.getMenuItemArray();
var mostRecentDiagnosis=this.getCurrentEncntrDiagnosis(condition);
var currentPriority=mostRecentDiagnosis.CLINICAL_PRIORITY;
var numItems=menuItems.length;
var i;
for(i=numItems;
i--;
){var mnuItem=menuItems[i];
if(i===currentPriority){mnuItem.setIsDisabled(true);
}else{mnuItem.setIsDisabled(false);
}mnuItem.setClickFunction(priorityFunction);
}if(priorityMenu.isActive()){MP_MenuManager.closeMenuStack(true);
}else{MP_MenuManager.showMenu(this.priorityMenuId);
}};
Cv2Component.prototype.showIndicatorMenu=function(jqIndicatorElement,condition){var self=this;
var compID=this.getStyles().getId();
var menuItemsTypeMap={};
menuItemsTypeMap[compID+"IndicatorThisVisit"]="TV";
menuItemsTypeMap[compID+"IndicatorChronic"]="AC";
menuItemsTypeMap[compID+"IndicatorInactive"]="IC";
menuItemsTypeMap[compID+"IndicatorHistorical"]="HX";
var indicatorMenu=MP_MenuManager.getMenuObject(this.indicatorMenuId);
indicatorMenu.setAnchorElementId(jqIndicatorElement.prop("id"));
indicatorMenu.setContentParentId(condition.HTML_ID+"IndicatorAnchor");
var itemType=condition.itemType;
var indicatorFunction=function(){var dNomenclatureId=condition.NOMENCLATURE_ID;
var targetType=menuItemsTypeMap[this.getId()];
if(dNomenclatureId!==0){if(targetType==="TV"&&itemType!=="TV"){self.moveCondition(condition,0);
}else{if(targetType==="AC"&&itemType!=="AC"){self.moveCondition(condition,2);
}else{if(targetType==="IC"&&itemType!=="IC"){self.moveCondition(condition,4);
}else{if(targetType==="HX"&&itemType!=="HX"){self.moveCondition(condition,3);
}}}}}else{alert(i18n.discernabu.consolproblem_o2.NO_ACTION_FREETEXT);
}};
var menuItems=indicatorMenu.getMenuItemArray();
var numItems=menuItems.length;
var i;
for(i=numItems;
i--;
){var mnuItem=menuItems[i];
if(i===0){if(itemType==="TV"){mnuItem.setTypeClass("cv2-menu-item-disabled");
}else{mnuItem.setTypeClass("");
}}else{if(i===1){if(itemType==="AC"){mnuItem.setTypeClass("cv2-menu-item-disabled");
}else{mnuItem.setTypeClass("");
}}else{if(i===2){if(itemType==="TV"||itemType==="IC"||condition.lifecycle==="HISTORICAL+DIAGNOSIS"){mnuItem.setTypeClass("cv2-menu-item-disabled");
}else{mnuItem.setTypeClass("");
}}else{if(i===3){if(itemType==="HX"){mnuItem.setTypeClass("cv2-menu-item-disabled");
}else{mnuItem.setTypeClass("");
}}}}}mnuItem.setClickFunction(indicatorFunction);
}MP_MenuManager.showMenu(this.indicatorMenuId);
};
Cv2Component.prototype.selectConditionRow=function(jqConditionRow,condition){var compID=this.getStyles().getId();
var self=this;
this.selectedType=condition.category;
jqConditionRow.addClass("cv2-selected");
this.selectedStatusCounts[condition.lifecycle]+=1;
if(condition.NOMENCLATURE_ID===0){this.selectedStatusCounts["Free-text"]+=1;
}this.selectedRowsCount+=1;
var jqAllConditionRows=$("#"+compID).find("div.cv2-result-item");
jqAllConditionRows.each(function(){var jqConditionRow=$(this);
var htmlID=jqConditionRow.prop("id");
var condition=self.getConditionById(htmlID);
if(condition.category!==self.selectedType){jqConditionRow.addClass("cv2-dithered");
}});
MP_MenuManager.closeMenuStack(true);
CERN_CV_O2.updateComponentMenuActions(this);
};
Cv2Component.prototype.deselectConditionRow=function(jqConditionRow,condition){var compID=this.getStyles().getId();
jqConditionRow.removeClass("cv2-selected");
this.selectedStatusCounts[condition.lifecycle]-=1;
if(condition.NOMENCLATURE_ID===0){this.selectedStatusCounts["Free-text"]-=1;
}this.selectedRowsCount-=1;
if(this.selectedRowsCount===0){$("#"+compID).find("div.cv2-dithered").removeClass("cv2-dithered");
this.selectedType="";
}MP_MenuManager.closeMenuStack(true);
CERN_CV_O2.updateComponentMenuActions(this);
};
Cv2Component.prototype.onConditionRowHover=function(jqConditionRow,condition,event){var posX=event.pageX;
var posY=event.pageY;
var tooltip=this.tooltip;
var detail=CERN_CV_O2.buildDetailsHover(this,condition);
tooltip.setX(posX).setY(posY).setAnchor(jqConditionRow.get(0)).setContent(detail);
tooltip.show();
};
Cv2Component.prototype.showCommentHover=function(jqCommentIcon,condition,event){var posX=event.pageX;
var posY=event.pageY;
var tooltip=this.tooltip;
var comments=CERN_CV_O2.buildCommentHover(this,condition,condition.HTML_ID);
tooltip.setX(posX).setY(posY).setAnchor(jqCommentIcon.get(0)).setContent(comments);
tooltip.show();
};
Cv2Component.prototype.canModifyCondition=function(condition){var compIDDigits=this.getComponentId();
var canModify=false;
if(this.getModifyInd()){if(condition.itemType==="TV"){var mostRecentDiagnosis=CERN_CV_O2.getMostRecentEncntrDiagnosis(0,condition.CONDITION_INDEX,compIDDigits);
if(mostRecentDiagnosis&&mostRecentDiagnosis.CAN_MODIFY===1){canModify=true;
}}else{var mostRecentProblem=CERN_CV_O2.getMostRecentProblem(0,condition.CONDITION_INDEX,compIDDigits);
if(mostRecentProblem&&mostRecentProblem.CAN_MODIFY===1&&mostRecentProblem.PROBLEM_TYPE_FLAG!==2){canModify=true;
}}}return canModify;
};
Cv2Component.prototype.showConditionRowIcons=function(jqConditionRow,condition){var compID=this.getComponentId();
var isSelected=jqConditionRow.hasClass("cv2-selected");
if(condition.itemType!=="TV"){jqConditionRow.find(".cv2-this-visit-ind").removeClass("cv2-hidden");
}if(!isSelected){if(this.canModifyCondition(condition)){jqConditionRow.find(".cv2-mod-icon").removeClass("cv2-hidden");
}jqConditionRow.find(".cv2-comment-toggle").removeClass("cv2-hidden");
}};
Cv2Component.prototype.hideConditionRowIcons=function(jqConditionRow,condition){jqConditionRow.find(".cv2-comment-toggle").addClass("cv2-hidden");
if(condition.itemType!=="TV"){if(condition.itemType!=="IC"){jqConditionRow.find(".cv2-this-visit-ind").addClass("cv2-hidden");
}if(!jqConditionRow.hasClass("cv2-flag-result")){jqConditionRow.find(".cv2-mod-icon").addClass("cv2-hidden");
}}else{jqConditionRow.find(".cv2-mod-icon").addClass("cv2-hidden");
}};
Cv2Component.prototype.attachConditionDelegates=function(){var self=this;
var compID=this.getStyles().getId();
var hoverTimeout=null;
var tooltip=this.tooltip;
function clearTooltip(){if(tooltip.getContent()){tooltip.getContent().remove();
}if(hoverTimeout){clearTimeout(hoverTimeout);
}}function routeTask(event){var jqTargetElement=$(event.currentTarget);
var jqSourceElement=$(event.target)||$(event.srcElement);
var jqConditionRow=jqTargetElement.closest(".cv2-result-item");
var rowID=jqConditionRow.prop("id");
var condition=self.getConditionById(rowID);
var jqEvent=$.Event("mouseenter");
jqEvent.pageX=event.pageX;
jqEvent.pageY=event.pageY;
var eventType=event.type;
var isSelected=jqConditionRow.hasClass("cv2-selected");
var isDithered=jqConditionRow.hasClass("cv2-dithered");
if(eventType==="click"&&jqSourceElement.hasClass("cv2-comment-toggle")&&!isSelected){self.toggleComment(jqSourceElement,jqConditionRow);
}else{if(eventType==="click"&&jqSourceElement.hasClass("cv2-mod-icon")){CERN_CV_O2.launchModifyDlg(condition,self);
}else{if(eventType==="click"&&jqSourceElement.hasClass("cv2-info-icon")){self.infoButtonClick(condition);
}else{if(eventType==="click"&&jqSourceElement.hasClass("cv2-dx-ass-unspecified")){self.launchDxAssistant(condition,false);
Util.cancelBubble(window.event);
}else{if(eventType==="click"&&jqSourceElement.hasClass("cv2-dx-ass-specified")){self.launchDxAssistant(condition,true);
Util.cancelBubble(window.event);
}else{if(eventType==="click"&&jqSourceElement.hasClass("addCommentBtn")){Util.cancelBubble(window.event);
}else{if(eventType==="click"&&jqSourceElement.hasClass("cv2-comments-link")){Util.cancelBubble(window.event);
}else{if(eventType==="click"&&jqSourceElement.hasClass("cv2-priority-drop-down-img")){self.showPriorityMenu(jqSourceElement,condition);
}else{if(eventType==="mouseenter"&&jqTargetElement.hasClass("cv2-result-item")){if(!isSelected){clearTooltip();
jqConditionRow.addClass("mpage-tooltip-hover");
if(!jqSourceElement.hasClass("cv2-this-visit-ind")&&!jqSourceElement.hasClass("cv2-comments-div")&&!jqSourceElement.hasClass("cv2-info-icon")&&!jqSourceElement.hasClass("cv2-dx-ass-specified")&&!jqSourceElement.hasClass("cv2-dx-ass-unspecified")){hoverTimeout=setTimeout(function(){self.onConditionRowHover(jqConditionRow,condition,event);
},500);
}}self.showConditionRowIcons(jqConditionRow,condition);
}else{if(eventType==="mouseleave"&&jqTargetElement.hasClass("cv2-result-item")){jqConditionRow.removeClass("mpage-tooltip-hover");
clearTooltip();
self.hideConditionRowIcons(jqConditionRow,condition);
}else{if(eventType==="mouseenter"&&jqTargetElement.hasClass("cv2-comment-ind")){clearTooltip();
self.showCommentHover(jqTargetElement,condition,event);
}else{if(eventType==="mouseleave"&&jqTargetElement.hasClass("cv2-comment-ind")){clearTooltip();
jqConditionRow.trigger(jqEvent);
}else{if(eventType==="mouseenter"&&jqTargetElement.hasClass("cv2-info-icon")){clearTooltip();
}else{if(eventType==="mouseleave"&&jqTargetElement.hasClass("cv2-info-icon")){jqConditionRow.trigger(jqEvent);
}else{if(eventType==="mouseenter"&&(jqTargetElement.hasClass("cv2-dx-ass-specified")||jqTargetElement.hasClass("cv2-dx-ass-unspecified"))){clearTooltip();
}else{if(eventType==="mouseleave"&&(jqTargetElement.hasClass("cv2-dx-ass-specified")||jqTargetElement.hasClass("cv2-dx-ass-unspecified"))){jqConditionRow.trigger(jqEvent);
}else{if(eventType==="mouseenter"&&jqTargetElement.hasClass("cv2-this-visit-ind")&&!isSelected){clearTooltip();
self.showIndicatorMenu(jqTargetElement,condition);
}else{if(eventType==="mouseleave"&&jqTargetElement.hasClass("cv2-this-visit-ind")&&!isSelected){MP_MenuManager.closeMenuStack(true);
jqConditionRow.trigger(jqEvent);
}else{if(eventType==="mouseenter"&&jqTargetElement.hasClass("cv2-comments-div")){clearTooltip();
}else{if(eventType==="mouseleave"&&jqTargetElement.hasClass("cv2-comments-div")){jqConditionRow.trigger(jqEvent);
}else{if(eventType==="click"&&jqSourceElement.hasClass("comment-form")){Util.cancelBubble(window.event);
}else{if(eventType==="click"&&!isDithered){if(isSelected){self.deselectConditionRow(jqConditionRow,condition);
jqConditionRow.trigger(jqEvent);
}else{self.selectConditionRow(jqConditionRow,condition);
clearTooltip();
self.hideConditionRowIcons(jqConditionRow,condition);
jqConditionRow.find(".cv2-this-visit-ind").removeClass("cv2-hidden");
}}}}}}}}}}}}}}}}}}}}}}}}var jqContentContainer=$("#"+compID+"ContentContainer");
jqContentContainer.on("click mouseenter mouseleave",".cv2-result-item",function(event){routeTask(event);
});
jqContentContainer.on("mouseenter mouseleave",".cv2-comment-ind",function(event){routeTask(event);
});
jqContentContainer.on("mouseenter mouseleave",".cv2-this-visit-ind",function(event){routeTask(event);
});
jqContentContainer.on("mouseenter mouseleave",".cv2-comments-div",function(event){routeTask(event);
});
jqContentContainer.on("mouseenter mouseleave",".cv2-info-icon",function(event){routeTask(event);
});
jqContentContainer.on("mouseenter mouseleave",".cv2-dx-ass-specified",function(event){routeTask(event);
});
jqContentContainer.on("mouseenter mouseleave",".cv2-dx-ass-unspecified",function(event){routeTask(event);
});
};
Cv2Component.prototype.updateProblemCount=function(){var namespace=this.getStyles().getId();
$("#"+namespace+"sechd").children(".cv2-viewable-count").text("("+this.viewableActiveConditionCount+")");
};
Cv2Component.prototype.resizeComponent=function(){var curWindowHeight=$(window).height();
var curWindowWidth=$(window).width();
if(curWindowHeight!==this.lastWindowHeight||curWindowWidth!==this.lastWindowWidth){MPageComponent.prototype.resizeComponent.call(this,null);
CERN_CV_O2.ResizeColumns(this.getComponentId());
this.lastWindowHeight=curWindowHeight;
this.lastWindowWidth=curWindowWidth;
}};
Cv2Component.prototype.getChronicDxText=function(condition){if(condition.PROBLEMS.length>0){var x=0;
var problem=null;
var hasInactive=false;
var pLength=condition.PROBLEMS.length;
for(x;
x<pLength;
x++){problem=condition.PROBLEMS[x];
if(problem.LIFECYCLE_STATUS_MEAN==="ACTIVE"){return i18n.discernabu.consolproblem_o2.CHRONIC;
}else{if(problem.LIFECYCLE_STATUS_MEAN==="INACTIVE"){hasInactive=true;
}}}if(hasInactive){return i18n.discernabu.consolproblem_o2.CHRONIC+" - "+i18n.discernabu.consolproblem_o2.INACTIVE;
}}return"";
};
Cv2Component.prototype.hasThisVisitDiagnosis=function(condition){var encntr_id=this.getCriterion().encntr_id;
if(condition.DIAGNOSES.length>0){var x=0;
var dLength=condition.DIAGNOSES.length;
for(x;
x<dLength;
x++){if(encntr_id==condition.DIAGNOSES[x].ENCOUNTER_ID){return true;
}}}return false;
};
Cv2Component.prototype.loadFilterMappings=function(){this.addFilterMappingObject("WF_CONSOL_PROB_INFO_BUTTON_IND",{setFunction:this.setHasInfoButton,type:"BOOLEAN",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_CONSOLE_ENABLE_DX_ASSIST",{setFunction:this.setIsDxAssistantEnabled,type:"BOOLEAN",field:"FREETEXT_DESC"});
this.addFilterMappingObject("WF_CONSOL_PROB_LIST_FLAG",{setFunction:this.setProblemListFlag,type:"NUMBER",field:"FREETEXT_DESC"});
};
Cv2Component.prototype.flagResultItem=function(curSecItem){var noFlagging=((this.m_defaultSearchVocab<=0)||(curSecItem.PROBLEMS.length==0||curSecItem.PROBLEMS[0].PROBLEM_TYPE_FLAG==2));
if(noFlagging){return false;
}switch(this.getProblemListFlag()){case 1:return(curSecItem.SEARCH_VOCAB_CD!==this.m_defaultSearchVocab);
case 2:return false;
case 3:var targetVocab=curSecItem.PROBLEMS[0].TARGET_VOCAB_CD;
var searchVocab=curSecItem.SEARCH_VOCAB_CD;
var sourceVocabArr=this.m_loadedConditions.DATA.VALID_SOURCE_VOCAB_CDS;
if(!sourceVocabArr){return false;
}for(var x=0;
x<sourceVocabArr.length;
x++){if((targetVocab===sourceVocabArr[x].VOCAB_CD)||(searchVocab===sourceVocabArr[x].VOCAB_CD)){return false;
}}return true;
default:return false;
}};
Cv2Component.prototype.getProbDxUtilsObject=function(){if(!this.m_cvProbDxObj){try{this.m_cvProbDxObj=CERN_Platform.getDiscernObject("PROBDXUTILS");
MP_Util.LogDiscernInfo(this,"PROBDXUTILS","consolidatedproblems-o2.js","Cv2Component");
}catch(error){MP_Util.LogJSError(error,this,"consolidatedproblems-o2.js","getProbAndDxObject");
}}return this.m_cvProbDxObj;
};
Cv2Component.prototype.preProcessing=function(){if(!this.isDisplayable()){return;
}this.m_visitLabel=i18n.discernabu.consolproblem_o2.THIS_VISIT;
this.m_activeLabel=i18n.discernabu.consolproblem_o2.CHRONIC;
this.m_historicalLabel=i18n.discernabu.consolproblem_o2.HISTORICAL;
MPageComponent.prototype.preProcessing.call(this);
var compId=this.getComponentId();
var menuId="mainCompMenu"+this.getStyles().getId();
var self=this;
var compMenu=MP_MenuManager.getMenuObject(menuId);
if(self.hasInfoButton()){this.mnu_infoButtonId="infoButtonItem"+menuId;
var infoButtonItem=new MenuSelection(this.mnu_infoButtonId);
infoButtonItem.setLabel(i18n.discernabu.INFO_BUTTON);
infoButtonItem.setIsDisabled(!self.hasInfoButton());
this.compMenuReference[infoButtonItem.getId()]=infoButtonItem;
infoButtonItem.setClickFunction(function(){CERN_CV_O2.infoButtonProblem(compId,1);
});
this.mnu_seperatorId="infoButtonSeperator"+menuId;
var compMenuSeperator=new MenuSeparator(this.mnu_seperatorId);
}this.mnu_removeThisVisitId="delDiagItem"+menuId;
var removeThisVisitItem=new MenuSelection(this.mnu_removeThisVisitId);
removeThisVisitItem.setLabel(i18n.discernabu.consolproblem_o2.REMOVE_FROM.replace("{0}",this.getVisitLabel()));
removeThisVisitItem.setIsDisabled(true);
removeThisVisitItem.setClickFunction(function(){self.removeDiagnoses();
});
this.mnu_resolveId="resolveItem"+menuId;
var resolveItem=new MenuSelection(this.mnu_resolveId);
resolveItem.setLabel(i18n.discernabu.consolproblem_o2.RESOLVE);
resolveItem.setIsDisabled(true);
resolveItem.setClickFunction(function(){self.modifyProblem(4);
});
this.mnu_inactivateId="inactivateItem"+menuId;
var inactivateItem=new MenuSelection(this.mnu_inactivateId);
inactivateItem.setLabel(i18n.discernabu.consolproblem_o2.INACTIVATE);
inactivateItem.setIsDisabled(true);
inactivateItem.setClickFunction(function(){self.modifyProblem(3);
});
this.mnu_cancelId="cancelItem"+menuId;
var cancelItem=new MenuSelection(this.mnu_cancelId);
cancelItem.setLabel(i18n.discernabu.consolproblem_o2.CANCEL);
cancelItem.setIsDisabled(true);
cancelItem.setClickFunction(function(){self.modifyProblem(2);
});
this.mnu_moveActiveId="moveActive"+menuId;
var moveToActiveItem=new MenuSelection(this.mnu_moveActiveId);
moveToActiveItem.setLabel(i18n.discernabu.consolproblem_o2.MOVE_TO.replace("{0}",this.getActiveLabel()));
moveToActiveItem.setIsDisabled(true);
moveToActiveItem.setClickFunction(function(){self.moveConditionMenu(1);
});
this.mnu_moveThisVisitId="moveThisVisit"+menuId;
var moveToThisVisitItem=new MenuSelection(this.mnu_moveThisVisitId);
moveToThisVisitItem.setLabel(i18n.discernabu.consolproblem_o2.MOVE_TO.replace("{0}",this.getVisitLabel()));
moveToThisVisitItem.setIsDisabled(true);
moveToThisVisitItem.setClickFunction(function(){self.moveConditionMenu(2);
});
compMenu.insertMenuItem(moveToThisVisitItem,0);
compMenu.insertMenuItem(moveToActiveItem,0);
compMenu.insertMenuItem(cancelItem,0);
compMenu.insertMenuItem(inactivateItem,0);
compMenu.insertMenuItem(resolveItem,0);
compMenu.insertMenuItem(removeThisVisitItem,0);
compMenu.insertMenuItem(compMenuSeperator,0);
compMenu.insertMenuItem(infoButtonItem,0);
MP_MenuManager.updateMenuObject(compMenu);
};
var CERN_CV_O2=function(){return{GetCvTable:function(component){component.m_compObject.cvCompId=component.getComponentId();
component.m_compObject.cvModRootId="cv2"+component.m_compObject.cvCompId;
component.m_compObject.cvCompSec=$("#"+component.m_compObject.cvModRootId).get(0);
var titleFrag=$("<span/>");
var innerHTMLArr=[];
innerHTMLArr.push('<span id="cv2Processing',component.m_compObject.cvCompId,'" class="cv2-processing cv2-hide">',i18n.discernabu.consolproblem_o2.PROCESSING,"</span>");
$(titleFrag).html(innerHTMLArr.join(""));
var secTitle=$(component.m_compObject.cvCompSec).find(".sec-title").first();
$(secTitle).after(titleFrag);
CERN_CV_O2.processingUI(component,"cv2Processing"+component.m_compObject.cvCompId,0,true,CERN_CV_O2.updateCVActions,component.m_compObject.cvCompId);
var sendAr=[];
component.m_compObject.criterion=component.getCriterion();
sendAr.push("^MINE^",component.m_compObject.criterion.person_id+".0",component.m_compObject.criterion.provider_id+".0",component.m_compObject.criterion.encntr_id+".0",component.m_compObject.criterion.ppr_cd+".0",component.m_compObject.criterion.position_cd+".0","^"+component.m_compObject.criterion.category_mean+"^",component.getDefaultSearchVocab()+".0","1");
MP_Core.XMLCclRequestWrapper(component,"MP_GET_CONDITIONS",sendAr,true);
component.m_compObject.sec=component.getStyles().getNameSpace();
component.m_diagnosisTargetVocabCd=component.getVisitVocab();
component.m_diagnosisTargetVocabCd=parseFloat(component.m_diagnosisTargetVocabCd.toFixed(1));
component.m_problemTargetVocabCd=component.getActiveVocab();
component.m_problemTargetVocabCd=parseFloat(component.m_problemTargetVocabCd.toFixed(1));
component.m_historicalLabelDisplay=component.getHistoricalLabel();
component.m_activeLabelDisplay=component.getActiveLabel();
component.m_visitLabelDisplay=component.getVisitLabel();
},RefreshGlobals:function(component){component.m_nProcessing=0;
component.m_nWaitCursor=0;
component.m_nRefreshCount=0;
component.selectedRowsCount=0;
CERN_CV_O2.clearSelectedStatusCounts(component);
CERN_CV_O2.clearComponentMenuActions(component);
},SetViewPriorityPriv:function(component){if(component.m_enableModifyPrioritization==0){var thisVisitConditions=component.m_loadedConditions.DATA.THIS_VISIT;
var maxPriority=CERN_CV_O2.getMaxPriority(component,thisVisitConditions);
if(maxPriority>0){component.m_viewPriorities=1;
}}else{component.m_viewPriorities=1;
}},SetEarlyTransitionEnabled:function(component){var probDxUtils=component.getProbDxUtilsObject();
if(!probDxUtils){logger.logError("Unable to generate the ProbDxUtils COM Object. Early transition will be considered inactive");
component.m_enableEarlyTransitionDx=false;
return;
}try{component.m_enableEarlyTransitionDx=probDxUtils.GetEarlyTransitionDxPreference(component.m_compObject.criterion.person_id,component.m_diagnosisTargetVocabCd);
}catch(err){logger.logError("Error occurred when using the ProbDxUtils.GetEarlyTransitionDxPreference COM method. Early transition will be considered inactive. Error: "+err);
component.m_enableEarlyTransitionDx=false;
}if(component.m_enableEarlyTransitionDx){logger.logMessage("Early Transition preference active.");
}else{logger.logMessage("Early Transition preference not active.");
}},RenderComponent:function(component,conditionData){try{CERN_CV_O2.RefreshGlobals(component);
MP_Util.Doc.HideHovers();
component.setEditMode(true);
var iconPath="";
iconPath=component.m_compObject.criterion.static_content.replace(/%5C/g,"\\");
iconPath=iconPath.replace(/%20/g," ");
component.m_iconPath=iconPath;
var secHTMLArray=[];
var secHTML="";
var countText="";
var cvSetObject=conditionData.SETTINGS;
var cvDataObject=conditionData.DATA;
var optMenuCV="";
var compID=component.m_compObject.cvCompId;
component.createConditionMapping(conditionData);
CERN_CV_O2.SetEarlyTransitionEnabled(component);
if(cvDataObject&&cvDataObject.THIS_VISIT){component.populateDiagnosesNomenclatureSpecificity(cvDataObject.THIS_VISIT);
}component.m_loadedConditions=conditionData;
CERN_CV_O2.SetViewPriorityPriv(component);
component.createPriorityMenu();
component.createIndicatorMenu();
if(cvSetObject){component.m_canAddConditionFlag=cvSetObject.CAN_ADD_CONDITION_FLAG;
component.nkpProblemId=cvDataObject.NKPPROBLEMID;
component.nkpNomenclatureId=cvDataObject.NKPNOMENCLATUREID;
component.nNKPCanUpdate=cvDataObject.NKPCANUPDATE;
component.nNKPCanView=cvDataObject.NKPCANVIEW;
component.nNKPActiveInactiveProbExist=cvDataObject.NKPACTIVEINACTIVEPROBEXIST;
for(var i=0;
i<cvDataObject.NKPNOMENQUAL.length;
i++){component.nkpNomenArray.push(cvDataObject.NKPNOMENQUAL[i].NKPNOMENCLATUREID);
}secHTMLArray.push("<div id='cv2TopSection",compID,"'>");
secHTMLArray.push("<div class='cv2-ControlDiv' id='cv2ClassificationDiv",compID,"'>");
secHTMLArray.push("<span class='cv2-ClassFilterLabel'>",i18n.discernabu.consolproblem_o2.CLASSIFICATION,":</span>");
secHTMLArray.push("<span class='cv2ClassFilterSpan' id='cv2ClassFilterSpan",compID,"'></span></div>");
secHTMLArray.push("<div class='cv2-entry-and-alert-cont'>");
secHTMLArray.push("<div class='cv2-search-entry-cont'>");
secHTMLArray.push("<div class ='cv2-ControlDiv' id ='cv2ControlsDiv",compID,"'>");
secHTMLArray.push("<span class='cv2-AddLabel'>",i18n.discernabu.consolproblem_o2.ADD_NEW_AS,"</span>");
secHTMLArray.push("<span class='cv2AddTypeSpan' id='cv2AddTypeSpan",compID,"'></span>");
secHTMLArray.push("<span class='cv2-SelectList' id='cv2SelectListId",compID,"'></span>");
secHTMLArray.push(MP_Util.CreateAutoSuggestBoxHtml(component));
secHTMLArray.push("</div>");
secHTMLArray.push("</div>");
secHTMLArray.push("<div class='cv2-alert-cont'><div id='cv2"+compID+"UnspecifiedAlert'></div></div>");
secHTMLArray.push("</div>");
secHTMLArray.push("<div id='cv2ProblemTableContainer",compID,"'>");
secHTMLArray.push(CERN_CV_O2.buildTableSection2(component,component.m_bHistoricalExpanded,cvDataObject,iconPath));
secHTMLArray.push("<div id='cv2",compID,"hiddenContainer' class='cv2-hide'></div>");
secHTMLArray.push("</div></div>");
secHTML=secHTMLArray.join("");
MP_Util.Doc.FinalizeComponent(secHTML,component,countText);
component.updateProblemCount();
component.m_compObject.iSearchTypeFlag=cvSetObject.CONDITION_SEARCH_TYPE_FLAG;
MP_Util.AddAutoSuggestControl(component,CERN_CV_O2.searchNomenclature,CERN_CV_O2.addCondition,CERN_CV_O2.CreateSuggestionLine);
CERN_CV_O2.cvBuildClassificationMenu(compID,cvSetObject.CLASS_VIEW_FILTER_FLAG);
var classificationDiv=$("#cv2ClassificationDiv"+compID);
if($(classificationDiv).hasClass("cv2-ControlDiv")){$(classificationDiv).removeClass("cv2-ControlDiv");
$(classificationDiv).addClass("cv2-ClassificationDiv");
}var controlsDiv=$("#cv2ControlsDiv"+compID);
if(component.m_canAddConditionFlag>0){$(controlsDiv).removeClass();
$(controlsDiv).css({overflow:"hidden","padding-top":"5px","padding-bottom":"5px"});
}if(component.m_cvAddAsType==-1){switch(component.m_canAddConditionFlag){case 1:case 3:component.m_cvAddAsType=0;
break;
case 2:component.m_cvAddAsType=2;
break;
}if(component.m_canAddConditionFlag>0){CERN_CV_O2.cvBuildConditionAddOptions(-1,compID);
}}else{if(component.m_canAddConditionFlag>0){CERN_CV_O2.cvBuildConditionAddOptions(component.m_cvAddAsType,compID);
}}component.m_nNewConditionType=-1;
component.m_dNewConditionNomenclatureId=0;
component.m_nNewConditionIndx=0;
}component.buildUnspecifiedAlert();
CERN_CV_O2.buildColumns(component.m_bHistoricalExpanded,compID);
CERN_CV_O2.SetContainerDimensions(compID);
CERN_CV_O2.ApplyScrolling(compID,true);
component.lastWindowHeight=$(window).height();
component.lastWindowWidth=$(window).width();
component.attachConditionDelegates();
var jqHistToggle=$("#cv2"+compID).find(".cv2-toggleHistLink");
jqHistToggle.mousedown(function(e){var curToggle=component.m_bHistoricalExpanded;
if(curToggle===true){component.m_bHistoricalExpanded=false;
jqHistToggle.text(i18n.discernabu.consolproblem_o2.SHOW.replace(/\{0\}/g,component.getHistoricalLabel())+" ("+CERN_CV_O2.getTotalProblems(cvDataObject,true,null)+")");
CERN_CV_O2.ResizeColumns(compID);
}else{component.m_bHistoricalExpanded=true;
jqHistToggle.text(i18n.discernabu.consolproblem_o2.HIDE.replace(/\{0\}/g,component.getHistoricalLabel())+" ("+CERN_CV_O2.getTotalProblems(cvDataObject,true,null)+")");
var resultsContainer=$("#cv2"+compID+"ScrollContainer");
var columnPadding=20;
columnWidth=(resultsContainer.width()-columnPadding)/2;
var hiddenContainer=$("#cv2"+compID+"hiddenContainer");
hiddenContainer.removeClass("cv2-hide");
hiddenContainer.width(columnWidth);
CERN_CV_O2.ResizeColumns(compID);
hiddenContainer.addClass("cv2-hide");
}});
CERN_CV_O2.initializeNKPCheckbox(component);
$("#cv2ContentCtrl"+compID).on("keypress",function(e){if(e.keyCode===13){if(($("#cv2ControlsDiv"+compID).find(".suggestions").children().hasClass("current"))){component.conditionAddedFlag=true;
}}});
$("#cv2ControlsDiv"+compID).find(".suggestions").on("mousedown",function(e){component.conditionAddedFlag=true;
});
if(component.conditionAddedFlag){setTimeout(function(){document.getElementById("cv2ContentCtrl"+compID).focus();
},1);
}}catch(err){alert(i18n.ERROR_OCCURED+": "+err.description);
throw (err);
}finally{component.setEditMode(false);
}},initializeNKPCheckbox:function(component){var compId=component.m_compObject.cvCompId;
var hasNKP=component.hasNKP;
var nkpChkbxClass="";
var nkpTxtClass="";
var nkpHTML=[];
var jqnkpCont=$("#cv2"+compId+"NKPCont");
component.nkpSelected=false;
if(component.nkpNomenclatureId>0&&!component.nNKPActiveInactiveProbExist){if(component.nNKPCanView==1){if(hasNKP){nkpTxtClass="cv2-nkp-chkbx";
nkpChkbxClass="cv2-nkp-text";
nkpHTML.push("<div id='cv2",compId,"chkbx' class='cv2-chkbx cv2-chkbx-selected'></div><span unselectable='on' class='cv2-nkp-text'>",i18n.discernabu.consolproblem_o2.NO_CHRONIC_PROBLEMS,"</span>");
}else{nkpTxtClass="cv2-nkp-chkbx-rec";
nkpChkbxClass="cv2-nkp-text-rec";
nkpHTML.push("<div id='cv2",compId,"chkbx' class='cv2-chkbx cv2-chkbx-deselected'></div><span unselectable='on' class='cv2-nkp-text cv2-nkp-rec'>",i18n.discernabu.consolproblem_o2.RECORD_NO_CHRONIC_PROBLEMS,"</span>");
}}jqnkpCont.html(nkpHTML.join(""));
var jqChkCont=$("#cv2"+compId+"NKPCont");
jqChkCont.click(function(){if(component.nNKPCanUpdate==1){if(!component.nkpSelected){var jqChkBx=$(this).children("#cv2"+compId+"chkbx");
if(jqChkBx.hasClass("cv2-chkbx-selected")){jqChkBx.removeClass("cv2-chkbx-selected");
$(this).children(".cv2-nkp-text").addClass("cv2-nkp-rec");
jqChkBx.addClass("cv2-chkbx-deselected");
component.nkpSelected=true;
CERN_CV_O2.cancelNKP(compId);
}else{if(jqChkBx.hasClass("cv2-chkbx-deselected")){jqChkBx.removeClass("cv2-chkbx-deselected");
$(this).children(".cv2-nkp-text").removeClass("cv2-nkp-rec");
jqChkBx.addClass("cv2-chkbx-selected");
component.nkpSelected=true;
CERN_CV_O2.addNKAP(component);
}}}else{return;
}}else{alert(i18n.discernabu.consolproblem_o2.NO_PRIVS_MSG);
}});
}},getSelectedRows:function(elementID){var selectedRows=$("#"+elementID).find(".cv2-selected");
return selectedRows;
},populateClinicalDiagnosisObj:function(condition,compID){var component=MP_Util.GetCompObjById(compID);
var clinicalDiagnosis=null;
if(condition){var diagnosis=CERN_CV_O2.getMostRecentDiagnosisFromCondition(condition);
clinicalDiagnosis=CERN_Platform.getDiscernObject("CLINICALDIAGNOSIS");
if(diagnosis&&clinicalDiagnosis){clinicalDiagnosis.DiagnosisID=diagnosis.DIAGNOSIS_ID;
clinicalDiagnosis.DiagnosisGroupID=diagnosis.DIAGNOSIS_ID;
clinicalDiagnosis.EncounterID=diagnosis.ENCOUNTER_ID;
try{var startDateTime=new Date(1899,11,30,0,0,0);
var begDateTime=new Date();
var begEffectiveDtTm=null;
var timeDiff=null;
if(diagnosis.BEG_EFFECTIVE_DT_TM!=undefined){begDateTime.setISO8601(diagnosis.BEG_EFFECTIVE_DT_TM);
timeDiff=begDateTime.getTime()-startDateTime.getTime();
begEffectiveDtTm=timeDiff/(1000*60*60*24);
}if(clinicalDiagnosis.BegEffectiveDtTm!=undefined){clinicalDiagnosis.BegEffectiveDtTm=begEffectiveDtTm;
}}catch(err){MP_Util.LogJSError(err,this,"consolidatedproblems-o2.js","populateClinicalDiagnosisObj");
}if(clinicalDiagnosis.ClinicalPriority!=undefined){clinicalDiagnosis.ClinicalPriority=diagnosis.CLINICAL_PRIORITY;
}clinicalDiagnosis.DiagnosisDisplay=condition.ANNOTATED_DISPLAY;
if(clinicalDiagnosis.OriginatingSourceString!=undefined){clinicalDiagnosis.OriginatingSourceString=condition.DISPLAY;
}if(clinicalDiagnosis.OriginatingNomenclatureID!=undefined&&clinicalDiagnosis.OriginatingNomenclatureID==0){clinicalDiagnosis.OriginatingNomenclatureID=condition.NOMENCLATURE_ID;
}if(clinicalDiagnosis.TransitionNomenclatureID!=undefined){clinicalDiagnosis.TransitionNomenclatureID=diagnosis.TRANSITION_NOMENCLATURE_ID;
clinicalDiagnosis.TransitionSourceStr=diagnosis.TRANSITION_DISPLAY;
clinicalDiagnosis.TransitionSourceIdentifier=diagnosis.TRANSITION_CODE;
}clinicalDiagnosis.NomenclatureID=diagnosis.TARGET_NOMENCLATURE_ID;
}}return clinicalDiagnosis;
},getThisVisitDiagnosisCol:function(compID){var conditions=CERN_CV_O2.getThisVisitConditions(compID);
var pvDxColObj=CERN_Platform.getDiscernObject("PVCOLLECTION");
if(conditions&&pvDxColObj){for(var i=0,length=conditions.length;
i<length;
i++){var condition=conditions[i];
var clinicalDiagnosis=CERN_CV_O2.populateClinicalDiagnosisObj(condition,compID);
if(clinicalDiagnosis){pvDxColObj.Add(clinicalDiagnosis);
}}}return pvDxColObj;
},getThisVisitDiagnosisColRemove:function(arrDxIdsToRemove,compID){var conditions=CERN_CV_O2.getThisVisitConditions(compID);
var pvDxColObj=CERN_Platform.getDiscernObject("PVCOLLECTION");
if(arrDxIdsToRemove&&conditions&&pvDxColObj){for(var i=0,length=conditions.length;
i<length;
i++){var condition=conditions[i];
var clinicalDiagnosis=CERN_CV_O2.populateClinicalDiagnosisObj(condition,compID);
if(clinicalDiagnosis){var clinDxId=clinicalDiagnosis.DiagnosisId;
var loc=$.inArray(clinDxId,arrDxIdsToRemove);
if(loc<0){pvDxColObj.Add(clinicalDiagnosis);
}}}}return pvDxColObj;
},reprioritizeDiagnosesListForRemove:function(arrDxIdsToRemove,compID){var component=MP_Util.GetCompObjById(compID);
var rePrioritizedDxCol=null;
var probDxUtils=component.getProbDxUtilsObject();
if(probDxUtils){var colDxObj=CERN_CV_O2.getThisVisitDiagnosisColRemove(arrDxIdsToRemove,compID);
try{rePrioritizedDxCol=probDxUtils.ReprioritizeDiagnosesList(colDxObj);
}catch(err){}}return rePrioritizedDxCol;
},getMaxPriority:function(component,oConditions){var highestPriority=0;
var compID=component.m_compObject.cvCompId;
for(var i=0,l=oConditions.length;
i<l;
i++){var mostRecentDiagnosis=CERN_CV_O2.getMostRecentEncntrDiagnosis(0,oConditions[i].CONDITION_INDEX,compID);
if(mostRecentDiagnosis&&mostRecentDiagnosis.CLINICAL_PRIORITY>highestPriority){highestPriority=mostRecentDiagnosis.CLINICAL_PRIORITY;
}}return highestPriority;
},getNextPriority:function(compID){var component=MP_Util.GetCompObjById(compID);
var thisVisitConditions=component.m_loadedConditions.DATA.THIS_VISIT;
var maxPriority=CERN_CV_O2.getMaxPriority(component,thisVisitConditions);
return maxPriority+1;
},buildDetailsHover:function(component,oCondition){var cv2i18n=i18n.discernabu.consolproblem_o2;
var isFreeText=(oCondition.NOMENCLATURE_ID===0);
var x=0,iLen=0;
var diag=null;
var prob=null;
var dateTime=new Date();
var dispDate="";
var curEncntrId=parseInt(component.getCriterion().encntr_id,10);
var df=component.getDateFormatter();
var statusLbl="";
var onsetPrecFlag=0;
var sConditionSec="",sTargetDiagSec="",sProblemSec="",sRecentDiagSec="";
sConditionSec='<div class="cv2-hover">';
sConditionSec+='<span class="cv2-det-name"><span class="cv2-hover-label">'+cv2i18n.CONDITION+":</span> "+oCondition.DISPLAY;
sConditionSec+=isFreeText?" ("+cv2i18n.FREE_TEXT+")":"";
sConditionSec+="</span><br />";
sRecentDiagSec='<span class="cv2-det-name"><span class="cv2-hover-label">'+cv2i18n.RECENT_VISITS+": </span></span><br />";
iLen=oCondition.DIAGNOSES.length;
if(iLen===0){sRecentDiagSec+='<span class="cv2-det-name">--</span><br />';
}for(x=0;
x<iLen;
x++){diag=oCondition.DIAGNOSES[x];
if(!isFreeText&&x<5){if(diag.ENCOUNTER_ID===curEncntrId){statusLbl=component.m_visitLabelDisplay;
}else{statusLbl=component.m_historicalLabelDisplay;
}sTargetDiagSec+='<span class="cv2-det-name">'+statusLbl+" - "+diag.TARGET_VOCAB_DISPLAY+" "+cv2i18n.TERM+": "+diag.TARGET_DISPLAY+" ("+diag.TARGET_CODE+")";
sTargetDiagSec+="</span><br />";
if(diag.TRANSITION_VOCAB_DISPLAY!=""&&diag.TRANSITION_VOCAB_DISPLAY!=undefined){sTargetDiagSec+='<span class="cv2-det-name">'+statusLbl+" - "+diag.TRANSITION_VOCAB_DISPLAY+" "+cv2i18n.TERM+": "+diag.TRANSITION_DISPLAY+"  ("+diag.TRANSITION_CODE+")";
sTargetDiagSec+="</span><br />";
}}if(x<5){if(diag.DIAGNOSIS_DT_TM){dateTime.setISO8601(diag.DIAGNOSIS_DATE);
dispDate=df.format(dateTime,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
sRecentDiagSec+='<span class="cv2-dx-text">'+dispDate+" </span>";
}if(diag.CLASSIFICATION_DISPLAY){sRecentDiagSec+='<span class="cv2-det-name"><span class="cv2-hover-label">'+cv2i18n.CLASSIFICATION+":</span> "+diag.CLASSIFICATION_DISPLAY+"</span><br />";
}}}if(iLen>5){sRecentDiagSec+='<span class="cv2-dx-text">'+(iLen-5)+" "+cv2i18n.MORE+"</span>";
}sRecentDiagSec+="</div>";
iLen=oCondition.PROBLEMS.length;
for(x=0;
x<iLen;
x++){prob=oCondition.PROBLEMS[x];
if(!isFreeText){switch(prob.LIFECYCLE_STATUS_MEAN){case"ACTIVE":statusLbl=component.m_activeLabelDisplay;
break;
case"INACTIVE":statusLbl=component.m_activeLabelDisplay+" - "+component.m_inactiveLabelDisplay;
break;
case"RESOLVED":statusLbl=component.m_historicalLabelDisplay;
break;
default:statusLbl="";
break;
}sProblemSec+='<span class="cv2-det-name">'+statusLbl+" - "+prob.TARGET_VOCAB_DISPLAY+" "+cv2i18n.TERM+": "+prob.TARGET_DISPLAY+" ("+prob.TARGET_CODE+")";
sProblemSec+="</span><br />";
}sProblemSec+='<span class="cv2-det-name"><span class="cv2-hover-label">'+cv2i18n.PROBLEM_STATUS+":</span> "+prob.LIFECYCLE_STATUS_DISP;
sProblemSec+=(prob.CLASSIFICATION_DISPLAY)?" ("+prob.CLASSIFICATION_DISPLAY+")":"";
sProblemSec+="</span><br />";
onsetPrecFlag=prob.ONSET_PRECISION_FLAG;
if(prob.ONSET_DATE&&onsetPrecFlag){dateTime.setISO8601(prob.ONSET_DATE);
switch(onsetPrecFlag){case 1:dispDate=dateTime.format(dateFormat.masks.shortDate2);
break;
case 2:dispDate=dateTime.format(dateFormat.masks.shortDate4);
break;
case 3:dispDate=dateTime.format(dateFormat.masks.shortDate5);
break;
default:dispDate=dateTime.format(dateFormat.masks.shortDate5);
break;
}sProblemSec+='<span class="cv2-det-name"><span class="cv2-hover-label">'+cv2i18n.ONSET_DATE+":</span> "+dispDate;
sProblemSec+="</span><br />";
}}return sConditionSec+sTargetDiagSec+sProblemSec+sRecentDiagSec;
},getHistoricalConditions:function(compID){var component=MP_Util.GetCompObjById(compID);
var conditions=[];
var secHistorical=component.m_loadedConditions.DATA.HISTORICAL;
$.merge(conditions,CERN_CV_O2.getConditionsBySectionList(secHistorical));
return conditions;
},buildTableSection2:function(component,histFlag,sections,iconPath){var htmlArray=[];
var compID=component.m_compObject.cvCompId;
var toggleHistoricalLbl="";
var secThisVisit=sections.THIS_VISIT;
var secActive=sections.ACTIVE;
var secHistorical=sections.HISTORICAL;
var problemCount=0;
var isEditable=component.getModifyInd();
var itemNum=0;
component.hasNKP=false;
var columnPadding=20;
var thisComp=$("#cv2"+compID);
var compHdrWidth=$(thisComp).find(".sec-hd").width();
var columnWidth=Math.floor(((compHdrWidth-40)-columnPadding)/2);
if(histFlag){toggleHistoricalLbl=i18n.discernabu.consolproblem_o2.HIDE.replace(/\{0\}/g,component.getHistoricalLabel());
}else{toggleHistoricalLbl=i18n.discernabu.consolproblem_o2.SHOW.replace(/\{0\}/g,component.getHistoricalLabel());
}htmlArray.push("<div id='cv2",compID,"ContentContainer' class='cv2-content-container'>");
htmlArray.push("<div id='cv2",compID,"SubHeader' class='sub-sec-hd'><div class='cv2 sub-sec-title'><span id='cv2",compID,"sechd' class='cv2-prob-count'>",i18n.discernabu.consolproblem_o2.PROBLEMS," <span class='cv2-viewable-count'>(",problemCount,")</span></span><span id='cv2",compID,"NKPCont' class='cv2-nkp-cont'></span><span class='cv2-toggleHistLink'>",toggleHistoricalLbl," (",CERN_CV_O2.getTotalProblems(sections,true,null),")</span></div></div>");
htmlArray.push("<div id='cv2",compID,"ScrollContainer' class='cv2-scroll-container'>");
htmlArray.push("<div class='cv2-scroll-left-arrow-container cv2-scroll-arrow-container'></div>");
htmlArray.push("<div id='cv2",compID,"WrapperContainer' class='cv2-wrapper-container'>");
htmlArray.push("<div id='cv2",compID,"ColumnWrapper' class='cv2-column-wrapper'>");
htmlArray.push("<div id='cv2",compID,"ResultsColumn1' class='cv2-results-column' style='width:",columnWidth,"px;'>");
for(i=0;
i<secThisVisit.length;
i++){itemNum++;
htmlArray.push(CERN_CV_O2.buildResultItem(secThisVisit[i],"TV",itemNum,compID,isEditable,iconPath,component.m_allowComments));
}for(i=0;
i<secActive.length;
i++){if(CERN_CV_O2.isNKP(secActive[i].NOMENCLATURE_ID,component)){component.hasNKP=true;
component.c_nkpNomenclatureId=secActive[i].NOMENCLATURE_ID;
component.c_nkpConditionIndex=secActive[i].CONDITION_INDEX;
}else{if(secActive[i].PROBLEMS[0].LIFECYCLE_STATUS_MEAN==="ACTIVE"&&!component.hasThisVisitDiagnosis(secActive[i])){itemNum++;
htmlArray.push(CERN_CV_O2.buildResultItem(secActive[i],"AC",itemNum,compID,isEditable,iconPath,component.m_allowComments));
}else{if(!component.hasThisVisitDiagnosis(secActive[i])){itemNum++;
htmlArray.push(CERN_CV_O2.buildResultItem(secActive[i],"IC",itemNum,compID,isEditable,iconPath,component.m_allowComments));
}}}}component.viewableActiveConditionCount=itemNum;
for(i=0;
i<secHistorical.length;
i++){itemNum++;
htmlArray.push(CERN_CV_O2.buildResultItem(secHistorical[i],"HX",itemNum,compID,isEditable,iconPath,component.m_allowComments));
}htmlArray.push("</div></div></div>");
htmlArray.push("<div class='cv2-scroll-right-arrow-container cv2-scroll-arrow-container'></div>");
htmlArray.push("</div></div>");
return htmlArray.join("");
},getTotalProblems:function(cvDataObject,histFlag,component){var totalCount=0;
var nkpCount=0;
if(histFlag===false){if(cvDataObject.ACTIVE.length==1){nkpCount=(CERN_CV_O2.isNKP(cvDataObject.ACTIVE[0].NOMENCLATURE_ID,component))?1:0;
}return totalCount+cvDataObject.THIS_VISIT.length+cvDataObject.ACTIVE.length-nkpCount;
}else{return totalCount+cvDataObject.HISTORICAL.length;
}},buildCommentHover:function(component,itemData,itemID){var htmlArray=[];
var compID=component.getStyles().getId();
var commentCnt=itemData.COMMENTS.length;
var indx=(commentCnt>3)?3:commentCnt;
var commentLength=0;
var charLimit=600;
var breakComment=false;
var dateTime=new Date();
var commentDate="";
var df=component.getDateFormatter();
if(indx>0){htmlArray.push('<div class="cv2-hover"><span class="cv2-det-name"><span class="cv2-hover-label">'+i18n.discernabu.consolproblem_o2.COMMENT+":</span></span></br>");
for(var j=0;
j<indx;
j++){var oComments=itemData.COMMENTS[j];
var sComment=oComments.TEXT.replace(/\r\n|\r|\n/g,"<br />");
if((commentLength+sComment.length)>charLimit){sComment=sComment.substring(0,(charLimit-commentLength));
breakComment=true;
}if(oComments.COMMENT_DT_TM.substring(0,7)==sComment.substring(0,7)||oComments.COMMENT_DT_TM.substring(1,8)==sComment.substring(0,7)){htmlArray.push('<span class="cv2-det-name">',sComment,"</span></br>");
}else{htmlArray.push('<span class="cv2-det-name">');
if(oComments.COMMENT_DATE!=""){dateTime.setISO8601(oComments.COMMENT_DATE);
commentDate=df.formatISO8601(oComments.COMMENT_DATE,mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR);
htmlArray.push(commentDate," - ");
}htmlArray.push(oComments.AUTHOR_NAME,": ",sComment,"</span></br>");
}commentLength=commentLength+sComment.length;
if(breakComment){break;
}}if(breakComment||commentCnt>3){htmlArray.push('<span class="cv2-det-name">'+i18n.discernabu.consolproblem_o2.MORE+"</span>");
}htmlArray.push("</div>");
}return htmlArray.join("");
},buildCommentData:function(commentCount,component,itemData,itemID,iconPath){var tempHTML=[];
if(commentCount>0){tempHTML.push("<span class='cv2-comment-ind'></span>");
}else{tempHTML.push("<span class='cv2-comment-ind cv2-hidden'></span>");
}return tempHTML.join("");
},buildPriorityDisplay:function(component,oCondition,itemType){var tempHtml=[];
var compID=component.m_compObject.cvCompId;
var mostRecentDiagnosis=CERN_CV_O2.getMostRecentEncntrDiagnosis(0,oCondition.CONDITION_INDEX,compID);
if(component.m_viewPriorities&&itemType=="TV"){tempHtml.push("<span id='"+oCondition.HTML_ID+"PriorityAnchor' class='cv2-priority-rank",(component.m_enableModifyPrioritization)?" cv2-priority-active":"","'><input maxlength='2' ",(component.m_enableModifyPrioritization)?"class='cv2-priority-input'":"class='cv2-priority-input cv2-default-cursor'","unselectable='on' readonly='readonly' value='",CERN_CV_O2.getClinicalPriorityDisplay(mostRecentDiagnosis.CLINICAL_PRIORITY),"' />");
if(component.m_enableModifyPrioritization){tempHtml.push("<img id='"+oCondition.HTML_ID+"PriorityIcon' class='cv2-priority-drop-down-img cv2-hidden' src='",component.m_iconPath,"/images/5322_down_hover.png' /></span>");
}else{tempHtml.push("</span>");
}}return tempHtml.join("");
},buildConditionItem:function(condition,compID,iconPath){var component=MP_Util.GetCompObjById(compID);
var cv2i18n=i18n.discernabu.consolproblem_o2;
var menuId="mainCompMenu"+component.getStyles().getId();
var conditionHTML=[];
var strFreeText=(condition.NOMENCLATURE_ID==0)?"Free-text":"";
var priorityCss=(component.m_viewPriorities===1&&condition.itemType==="TV")?"cv2-priority-size":"";
var infoClass="";
var dxAssistantClass="";
var dxAssistantTitle="";
var specifiedInd;
var defaultVocabCd=component.getDefaultSearchVocab();
var flaggedProblemClass=(component.flagResultItem(condition))?"cv2-flag-result":"";
if(component.hasInfoButton()&&component.isInfoButtonEnabled()){if(!component.compMenuReference["infoButtonItem"+menuId].isSelected()){component.compMenuReference["infoButtonItem"+menuId].setIsSelected(true);
}infoClass="cv2-info-icon";
}else{infoClass="cv2-info-icon hidden";
}if(condition.dOrigNomenId===0||condition.dNomenId===0){infoClass="";
}conditionHTML.push("<div id='",condition.HTML_ID,"' class='cv2-result-item ",flaggedProblemClass,"'>");
if(infoClass!=""){conditionHTML.push("<div class='",infoClass,"'>&nbsp;</div>");
}conditionHTML.push("<dl class='cv2-info'>");
conditionHTML.push("<dd><div class='cv2-item-right'>");
if(component.getModifyInd()){if(component.canModifyCondition(condition)&&!!flaggedProblemClass&&(condition.itemType==="AC"||condition.itemType==="IC"||condition.itemType==="HX")){conditionHTML.push("<span class='cv2-mod-icon'></span>");
}else{conditionHTML.push("<span class='cv2-mod-icon cv2-hidden'></span>");
}}conditionHTML.push("<div id='"+condition.HTML_ID+"IndicatorAnchor' class='cv2-this-visit-ind ",condition.indMenuCss,"'>",condition.indMenuLbl,"</div>");
conditionHTML.push(CERN_CV_O2.buildCommentData(condition.COMMENTS.length,component,condition,condition.itemId,iconPath),"</div>");
conditionHTML.push("<div class='cv2-item-left ",priorityCss,"'>");
conditionHTML.push("<span class='cv2-comment-toggle cv2-comment-close cv2-hidden'></span>",CERN_CV_O2.buildPriorityDisplay(component,condition,condition.itemType));
specifiedInd=condition.SPECIFICITY_FLAG;
if(component.isDxAssistantEnabled()&&typeof specifiedInd!=="undefined"&&specifiedInd>=0){if(specifiedInd===0){dxAssistantClass="cv2-dx-ass-unspecified";
dxAssistantTitle=cv2i18n.UNSPECIFIC;
}else{if(specifiedInd===1){dxAssistantClass="cv2-dx-ass-specified";
dxAssistantTitle=cv2i18n.SPECIFIC;
}}conditionHTML.push("<span class='"+dxAssistantClass+"' title='"+dxAssistantTitle+"'>&nbsp;</span>");
}conditionHTML.push("</div>");
conditionHTML.push("<div class='cv2-item-center ",(condition.itemType==="HX")?"cv2-historical-item":"","'>");
conditionHTML.push("<span class='cv2-annotated-display'>",condition.ANNOTATED_DISPLAY,"</span>");
if(condition.itemType==="TV"){var strCode=" ("+condition.ICD9DISPLAY+") "+component.getChronicDxText(condition);
conditionHTML.push("<span class='code'>"+strCode+"</span>");
}conditionHTML.push("</div></dd>");
if(component.m_allowComments==1){conditionHTML.push("<div id='",condition.itemType+condition.CONDITION_INDEX,"commentRow",compID,"' class='cv2-closed cv2-comment-row'><div>");
conditionHTML.push(CERN_CV_O2.buildCommentDisplay(component,condition,condition.CONDITION_INDEX,condition.itemType));
conditionHTML.push("</div></div>");
}conditionHTML.push("</dl></div>");
return conditionHTML.join("");
},buildResultItem:function(itemData,itemType,itemNum,compID,isEditable,iconPath,allowComments){var condition={};
itemData.itemType=itemType;
itemData.itemId="cv2"+compID+"item"+itemNum;
var conditionRowID=itemType+itemData.NOMENCLATURE_ID+"IDX"+itemData.CONDITION_INDEX+"UNIQ"+compID;
var dOrigNomenId=parseFloat(conditionRowID.substring(2));
itemData.dOrigNomenId=dOrigNomenId;
switch(itemType){case"TV":itemData.indMenuLbl=i18n.discernabu.consolproblem_o2.THIS_VISIT;
itemData.indMenuCss="cv2-active";
itemData.category="DIAGNOSIS";
itemData.lifecycle="DIAGNOSIS";
itemData.dNomenId=itemData.DIAGNOSES[0].DESCRIPTION_NOMEN_ID;
itemData.dPriCriteriaCd=itemData.DIAGNOSES[0].PRIMARY_CRITERIA_CD;
if(itemData.PROBLEMS.length>0){itemData.lifecycle+=("+"+itemData.PROBLEMS[0].LIFECYCLE_STATUS_MEAN);
}break;
case"AC":itemData.indMenuLbl=i18n.discernabu.consolproblem_o2.CHRONIC;
itemData.indMenuCss="cv2-inactive cv2-hidden";
itemData.category=itemData.PROBLEMS[0].LIFECYCLE_STATUS_MEAN;
itemData.lifecycle=itemData.PROBLEMS[0].LIFECYCLE_STATUS_MEAN;
itemData.dNomenId=itemData.PROBLEMS[0].DESCRIPTION_NOMEN_ID;
itemData.dPriCriteriaCd=itemData.PROBLEMS[0].PRIMARY_CRITERIA_CD;
break;
case"IC":itemData.indMenuLbl=i18n.discernabu.consolproblem_o2.INACTIVE;
itemData.indMenuCss="cv2-active";
itemData.category=itemData.PROBLEMS[0].LIFECYCLE_STATUS_MEAN;
itemData.lifecycle=itemData.PROBLEMS[0].LIFECYCLE_STATUS_MEAN;
itemData.dNomenId=itemData.PROBLEMS[0].DESCRIPTION_NOMEN_ID;
itemData.dPriCriteriaCd=itemData.PROBLEMS[0].PRIMARY_CRITERIA_CD;
break;
case"HX":itemData.indMenuLbl=i18n.discernabu.consolproblem_o2.HISTORICAL;
itemData.indMenuCss="cv2-inactive cv2-hidden";
itemData.category="HISTORICAL";
itemData.lifecycle="HISTORICAL+DIAGNOSIS";
if(itemData.PROBLEMS.length>0){itemData.dNomenId=itemData.PROBLEMS[0].DESCRIPTION_NOMEN_ID;
itemData.dPriCriteriaCd=itemData.PROBLEMS[0].PRIMARY_CRITERIA_CD;
if(itemData.DIAGNOSES.length>0){itemData.lifecycle="HISTORICAL+DIAGNOSIS+RESOLVED";
}else{itemData.lifecycle="RESOLVED";
}}else{if(itemData.DIAGNOSES.length>0){itemData.dNomenId=itemData.DIAGNOSES[0].DESCRIPTION_NOMEN_ID;
itemData.dPriCriteriaCd=itemData.DIAGNOSES[0].PRIMARY_CRITERIA_CD;
}}break;
}return CERN_CV_O2.buildConditionItem(itemData,compID,iconPath);
},calculateContentHeight:function(compID){var viewPortHeight=$(window).height()-38;
var thisComp=$("#cv2"+compID);
var compHdrHeight=$(thisComp).find(".sec-hd").outerHeight(true);
var compSubHeader=$(thisComp).find("#cv2"+compID+"SubHeader").outerHeight(true);
var extraHeight=0;
var maxHeight=0;
var compSecPadding=$("#cv2Content"+compID).outerHeight(true)-$("#cv2Content"+compID).height();
var compClassHeight=$("#cv2ClassificationDiv"+compID).outerHeight(true);
var compSuggestHeight=$("#cv2ControlsDiv"+compID).outerHeight(true);
extraHeight=compSecPadding+compClassHeight+compSuggestHeight+compHdrHeight+compSubHeader;
maxHeight=viewPortHeight-extraHeight;
return maxHeight;
},buildColumns:function(histFlag,compID){var component=MP_Util.GetCompObjById(compID);
var resultsContainer=$("#cv2"+compID+"WrapperContainer");
var wrapper=$("#cv2"+compID+"ColumnWrapper");
var results=null;
var hiddenContent=$("#cv2"+compID+"hiddenContainer");
var totalHeight=0;
var problemCount=0;
var columnCount=1;
var tempHTML=[];
var hiddenHTML=[];
var columnPadding=20;
var curIsHist=false;
var columnWidth=0;
var columnMargin=20;
var maxCount=0;
var maxHeight=CERN_CV_O2.calculateContentHeight(compID);
var curItemCount=0;
if(resultsContainer.length!==0){columnWidth=Math.floor((resultsContainer.width()-columnPadding)/2);
$("#cv2"+compID).find(".cv2-results-column").width(columnWidth);
results=$("#cv2ProblemTableContainer"+compID).find(".cv2-result-item");
if(histFlag){maxCount=results.length;
}else{maxCount=resultsContainer.find(".cv2-result-item").length;
}tempHTML.push("<div id='cv2",compID,"ResultsColumn",columnCount,"' class='cv2-results-column' style='width:",columnWidth,"px'>");
results.each(function(index){var cv2Item=$(this);
var condition=component.getConditionById(cv2Item.prop("id"));
var itemType=condition.itemType;
var nextHeight=0;
if(histFlag===true||(histFlag===false&&itemType!="HX")){problemCount++;
var thisResultHeight=$(this).outerHeight();
totalHeight+=thisResultHeight;
tempHTML.push($(this).get(0).outerHTML);
if(index<results.length-1){nextHeight=$(results.get(index+1)).height();
}if((maxHeight-totalHeight)<(nextHeight*1.2)&&problemCount!==maxCount){totalHeight=0;
columnCount++;
tempHTML.push("</div>");
tempHTML.push("<div id='cv2",compID,"ResultsColumn",columnCount,"' class='cv2-results-column' style='width:",columnWidth,"px'>");
}}else{if(histFlag===false&&itemType=="HX"){problemCount++;
hiddenHTML.push($(this).get(0).outerHTML);
}}});
tempHTML.push("</div>");
wrapper.html(tempHTML.join(""));
hiddenContent.html(hiddenHTML.join(""));
}},SetContainerDimensions:function(compID){var container=$("#cv2"+compID+"WrapperContainer");
var wrapper=$("#cv2"+compID+"ColumnWrapper");
var resultPadding=0;
var wrapperWidth=0;
var columnPadding=20;
var minResults=6;
var columns=null;
var items=null;
if(container.length!==0&&wrapper.length!==0){columns=$(wrapper).find(".cv2-results-column");
if(columns.length!==0){items=$(columns).find(".cv2-result-item");
for(var i=0,j=columns.length;
i<j;
i++){wrapperWidth+=columns.width()+columnPadding;
}wrapper.css({width:wrapperWidth.toString()+"px"});
}}$("#cv2"+compID).find(".cv2-scroll-arrow-container").height(container.height());
},ApplyScrolling:function(compID,resizeInd){var resultsContainer=$("#cv2"+compID+"ScrollContainer");
var scrollContainer=resultsContainer.find(".cv2-wrapper-container");
var wrapper=$("#cv2"+compID+"ColumnWrapper");
var columnArr=wrapper.find(".cv2-results-column");
var leftScrollArrowCont=$("#cv2"+compID).find(".cv2-scroll-left-arrow-container");
var rightScrollArrowCont=$("#cv2"+compID).find(".cv2-scroll-right-arrow-container");
var wrapperWidth=wrapper.width();
var step=wrapperWidth/columnArr.length;
var scrollTimer=null;
var rightInd=true;
var leftInd=false;
var curCol=0;
var maxCol=columnArr.length-2;
scrollContainer.scrollLeft(0);
if(resizeInd){leftScrollArrowCont.unbind(".cv2");
rightScrollArrowCont.unbind(".cv2");
scrollContainer.off("scroll");
}scrollContainer.scroll(function(){if(curCol===0&&!leftScrollArrowCont.is(":hidden")){leftScrollArrowCont.removeClass("cv2-scroll-active");
leftInd=false;
}else{if(curCol!=0&&leftScrollArrowCont.is(":hidden")){leftScrollArrowCont.addClass("cv2-scroll-active");
}}if(curCol>=maxCol&&!rightScrollArrowCont.is(":hidden")){rightScrollArrowCont.removeClass("cv2-scroll-active");
rightInd=false;
}else{if(curCol<maxCol&&rightScrollArrowCont.is(":hidden")){rightScrollArrowCont.addClass("cv2-scroll-active");
}}});
if(curCol===0){leftScrollArrowCont.removeClass("cv2-scroll-active");
}if(columnArr.length<=2){rightInd=false;
rightScrollArrowCont.removeClass("cv2-scroll-active");
}else{if(rightInd){rightScrollArrowCont.addClass("cv2-scroll-active");
}}leftScrollArrowCont.on("mouseenter.cv2",function(){if(curCol<=0){return;
}if(curCol>0){curCol--;
scrollContainer.animate({scrollLeft:curCol*step},"slow");
}leftInd=true;
if(scrollTimer===null){scrollTimer=window.setInterval(function(){scrollContainer.data("scrollLeft",scrollContainer.scrollLeft());
if(curCol>0){curCol--;
scrollContainer.animate({scrollLeft:curCol*step},"slow");
}},1000);
}rightScrollArrowCont.addClass("cv2-scroll-active");
});
leftScrollArrowCont.on("mouseleave.cv2",function(){scrollTimer=window.clearInterval(scrollTimer);
scrollTimer=null;
leftInd=false;
});
rightScrollArrowCont.on("mouseenter.cv2",function(){if(curCol>=maxCol){return;
}if(curCol<maxCol){curCol++;
scrollContainer.animate({scrollLeft:curCol*step},"slow");
}rightInd=true;
if(scrollTimer===null){scrollTimer=window.setInterval(function(){scrollContainer.data("scrollLeft",scrollContainer.scrollLeft());
if(curCol<maxCol){curCol++;
scrollContainer.animate({scrollLeft:curCol*step},"slow");
}},1000);
}leftScrollArrowCont.addClass("cv2-scroll-active");
});
rightScrollArrowCont.on("mouseleave.cv2",function(){scrollTimer=window.clearInterval(scrollTimer);
scrollTimer=null;
rightInd=false;
});
},clearSelectedStatusCounts:function(component){component.selectedStatusCounts={DIAGNOSIS:0,ACTIVE:0,INACTIVE:0,RESOLVED:0,Pregnancy:0,"Free-text":0,"DIAGNOSIS+ACTIVE":0,"DIAGNOSIS+INACTIVE":0,"DIAGNOSIS+RESOLVED":0,"HISTORICAL+DIAGNOSIS":0,"HISTORICAL+DIAGNOSIS+RESOLVED":0};
},clearComponentMenuActions:function(component){component.selectedType="";
CERN_CV_O2.updateComponentMenuActions(component);
},updateComponentMenuActions:function(component){var selectedType=component.selectedType;
var hasDiagnosis=(component.selectedStatusCounts.DIAGNOSIS>0);
var hasActive=(component.selectedStatusCounts.ACTIVE>0||component.selectedStatusCounts["DIAGNOSIS+ACTIVE"]>0);
var hasInactive=(component.selectedStatusCounts.INACTIVE>0||component.selectedStatusCounts["DIAGNOSIS+INACTIVE"]>0);
var hasResolve=(component.selectedStatusCounts.RESOLVED>0||component.selectedStatusCounts["DIAGNOSIS+RESOLVED"]>0||component.selectedStatusCounts["HISTORICAL+DIAGNOSIS+RESOLVED"]);
var hasOldDiagnosis=(component.selectedStatusCounts["HISTORICAL+DIAGNOSIS"]>0);
var hasOldDiagnosisAndResolved=(component.selectedStatusCounts["HISTORICAL+DIAGNOSIS+RESOLVED"]>0);
var hasPregnancy=(component.selectedStatusCounts.Pregnancy>0);
var hasFreeText=(component.selectedStatusCounts["Free-text"]>0);
var menuId="mainCompMenu"+component.getStyles().getId();
var compMenu=MP_MenuManager.getMenuObject(menuId);
var canUpdateDx=(component.m_canAddConditionFlag===1||component.m_canAddConditionFlag===3);
var canUpdateProb=(component.m_canAddConditionFlag===2||component.m_canAddConditionFlag===3);
var actionItems=compMenu.getMenuItemArray();
var x=0;
for(x=0;
x<actionItems.length;
x++){switch(actionItems[x].getId()){case component.mnu_removeThisVisitId:actionItems[x].setIsDisabled(!(selectedType=="DIAGNOSIS"&&canUpdateDx));
break;
case component.mnu_resolveId:actionItems[x].setIsDisabled(!(canUpdateProb&&!hasDiagnosis&&!hasResolve&&(hasActive||hasInactive)));
break;
case component.mnu_inactivateId:actionItems[x].setIsDisabled(!(canUpdateProb&&!hasDiagnosis&&!hasOldDiagnosis&&!hasInactive&&(hasActive||hasResolve)));
break;
case component.mnu_cancelId:actionItems[x].setIsDisabled(!(canUpdateProb&&!hasDiagnosis&&!hasOldDiagnosis&&(hasActive||hasResolve||hasInactive)));
break;
case component.mnu_moveActiveId:actionItems[x].setIsDisabled(!(canUpdateProb&&!hasActive&&!hasFreeText&&(hasInactive||hasResolve||hasDiagnosis||selectedType==="HISTORICAL")));
break;
case component.mnu_moveThisVisitId:actionItems[x].setIsDisabled(!(canUpdateDx&&selectedType!=="DIAGNOSIS"&&!hasFreeText&&(hasActive||hasInactive||selectedType==="HISTORICAL")));
break;
default:break;
}}MP_MenuManager.updateMenuObject(compMenu);
},ResizeColumns:function(compID){if($("#cv2"+compID).closest(".vwp-body-container").hasClass("hidden")){return;
}var component=MP_Util.GetCompObjById(compID);
CERN_CV_O2.buildColumns(component.m_bHistoricalExpanded,compID,component);
CERN_CV_O2.SetContainerDimensions(compID);
CERN_CV_O2.ApplyScrolling(compID,true);
},getClinicalPriorityDisplay:function(clinical_priority){if(clinical_priority<1){return"";
}return clinical_priority;
},buildCommentDisplay:function(component,condition,conditionIndex,sectionHeaderId){var htmlArray=[];
var compID=component.m_compObject.cvCompId;
var uniqueRowId=sectionHeaderId+conditionIndex;
var ensureValidCommentVars="'"+uniqueRowId+"', '"+compID+"'";
htmlArray.push('<div id="comments-div'+uniqueRowId+compID+'" class="cv2-comments-div cv2-no-drag-line">','<div id="AddCommentSec'+uniqueRowId+compID+'" class="" ><textarea id="TextArea'+uniqueRowId+compID+'" name="textBox" class="comment-form" rows="2" onKeyUp="CERN_CV_O2.ensureValidComment('+ensureValidCommentVars+')" ></textarea></div>');
htmlArray.push('<div><button id="AddCommentBtn'+uniqueRowId+compID+'" type="submit" class="addCommentBtn" onclick="CERN_CV_O2.addComment('+compID+","+conditionIndex+", id, '"+sectionHeaderId+'\')" disabled="disabled">'+i18n.discernabu.consolproblem_o2.ADD_COMMENTS+"</button></div>");
var comments=condition.COMMENTS;
var commentCnt=comments.length;
var comNum=0;
var diagnosesExist=(condition.DIAGNOSES.length==0)?false:true;
var problemsExist=(condition.PROBLEMS.length==0)?false:true;
for(var j=0,l=comments.length;
j<l;
j++){var displayClass=(j>2)?"cv2-closed":"";
var comment=comments[j].TEXT;
var isProblemComment=true;
var c=comment;
if(!problemsExist){isProblemComment=false;
}else{if(diagnosesExist&&c.replace(/0/g,"").match(comments[j].COMMENT_DT_TM.slice(0,comments[j].COMMENT_DT_TM.length-2).replace(/0/g,""))){isProblemComment=false;
}}if(!isProblemComment){do{var endIdx=c.search(/\r\n/g);
var userInfo=c.substring(0,endIdx);
c=c.substring(endIdx+1,c.length);
endIdx=c.search(/\r\n/g);
var commentPart="";
if(endIdx<0){commentPart=c;
}else{commentPart=c.substring(0,endIdx);
c=c.substring(endIdx+4,c.length);
}var displayClass=(comNum>2)?"cv2-closed":"";
var commentStripeClass=(comNum%2)?" cv2-comment-row-even":" cv2-comment-row-odd";
if(sectionHeaderId=="TV"){htmlArray.push('<div id="comment-text-TV'+conditionIndex+compID+comNum+'" class="cv2-comment-text '+displayClass+commentStripeClass+'">');
}else{htmlArray.push('<div id="comment-text-'+uniqueRowId+compID+comNum+'" class="cv2-comment-text '+displayClass+commentStripeClass+'">');
}htmlArray.push("<span>"+userInfo+'</span><br /><span class="cv2-indent-comment">'+commentPart+"</span></div>");
comNum++;
}while(endIdx>=0);
commentCnt=comNum;
continue;
}var commentStripeClass=(j%2)?" cv2-comment-row-even":" cv2-comment-row-odd";
var sComment=comment.replace(/\r\n|\r|\n/g,"<br />");
htmlArray.push('<div id="comment-text-'+uniqueRowId+compID+comNum+'" class="cv2-comment-text '+displayClass+commentStripeClass+'">');
htmlArray.push("<span>",comments[j].COMMENT_DT_TM," - ",comments[j].AUTHOR_NAME,"</span><br/>");
htmlArray.push('<span class="cv2-indent-comment">'+sComment+"</span></div>");
comNum++;
}if(commentCnt>3){var showAllCommentsVars="id, '"+uniqueRowId+"', '"+compID+"'";
htmlArray.push('<div><span id="cv2-show-comments'+uniqueRowId+compID+'" >','<a id="cv2-show-all-comments'+uniqueRowId+compID+'" class="cv2-comments-link" onclick="CERN_CV_O2.showAllComments('+showAllCommentsVars+')">',i18n.discernabu.consolproblem_o2.SHOW_ALL_COMMENTS,"</a>","</span></div>");
}return htmlArray.join("");
},showAllComments:function(id,uniqueRowId,compID){var jqLinkElement=$("#"+id);
var comments=$('div[id^="comment-text-'+uniqueRowId+compID+'"]');
if(jqLinkElement.text()==i18n.discernabu.consolproblem_o2.SHOW_ALL_COMMENTS){jqLinkElement.text(i18n.discernabu.consolproblem_o2.SHOW_LESS_COMMENTS);
for(var i=0,l=comments.length;
i<l;
i++){$(comments[i]).removeClass("cv2-closed");
}}else{if(jqLinkElement.text()==i18n.discernabu.consolproblem_o2.SHOW_LESS_COMMENTS){jqLinkElement.text(i18n.discernabu.consolproblem_o2.SHOW_ALL_COMMENTS);
for(var i=3,l=comments.length;
i<l;
i++){$(comments[i]).addClass("cv2-closed");
}}}},addComment:function(compID,conditionIndex,id,sectionHeaderId){var uniqueRowId=sectionHeaderId+conditionIndex;
var comment=$("textarea#TextArea"+uniqueRowId+compID).val();
if(!comment||comment.length==0){return;
}var component=MP_Util.GetCompObjById(compID);
var iType=-1;
if(sectionHeaderId=="TV"){iType=0;
}else{if(sectionHeaderId=="AC"){iType=2;
}else{if(sectionHeaderId=="HX"){iType=3;
}}}component.m_nNewConditionType=iType;
component.m_nNewConditionIndx=conditionIndex;
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
var mostRecentProblem=CERN_CV_O2.getMostRecentProblem(0,conditionIndex,compID);
if(mostRecentProblem!=null){var dProblemId=mostRecentProblem.PROBLEM_ID;
if(dProblemId>0){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount++;
CERN_CV_O2.modifyProblemComments(dProblemId.toFixed(1),[comment],compID,CERN_CV_O2.getLifeCycleStatusFlag(mostRecentProblem.LIFECYCLE_STATUS_MEAN));
}}else{var diag=CERN_CV_O2.getMostRecentDiagnosis(0,conditionIndex,compID);
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount++;
CERN_CV_O2.modifyDiagnosisComments([diag],[comment],compID);
}CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
CERN_CV_O2.refreshConditions(compID);
},ensureValidComment:function(uniqueRowId,compID){var comment=$("textarea#TextArea"+uniqueRowId+compID).val();
var alphaExp=/\w/;
var jqAddCommentBtn=$("#AddCommentBtn"+uniqueRowId+compID);
if(comment.search(alphaExp)==-1){jqAddCommentBtn.attr("disabled","disabled");
}else{jqAddCommentBtn.removeAttr("disabled");
}},modifyProblemComments:function(problemId,commentArray,compID,lifeCycleFlag){var sendAr=CERN_CV_O2.getProblemCommentServiceCallArray(problemId,commentArray,compID,lifeCycleFlag);
CERN_CV_O2.loadWithCBParameters("mp_modify_problem",CERN_CV_O2.cvRefresh,"cv2",sendAr.join(","),compID);
},getProblemCommentServiceCallArray:function(problemId,commentArray,compID,lifeCycleFlag){var component=MP_Util.GetCompObjById(compID);
var providerId=component.m_compObject.criterion.provider_id.toFixed(1);
var pprCd=component.m_compObject.criterion.ppr_cd.toFixed(1);
var patientId=component.m_compObject.criterion.person_id.toFixed(1);
var medInd=0;
var confirmProbInd=0;
var commentInd=1;
var sendAr=[];
sendAr.push("^MINE^");
sendAr.push(problemId);
sendAr.push(providerId);
sendAr.push(pprCd);
sendAr.push(lifeCycleFlag);
sendAr.push(medInd);
sendAr.push(confirmProbInd);
sendAr.push(CERN_CV_O2.getStringArrayString(commentArray));
sendAr.push(commentInd);
return sendAr;
},getLifeCycleStatusFlag:function(lifeCycleStatusMean){switch(lifeCycleStatusMean){case"ACTIVE":return 1;
case"CANCELED":return 2;
case"INACTIVE":return 3;
case"RESOLVED":return 4;
default:return 0;
}},modifyDiagnosisComments:function(arDiagnoses,arComments,compID){if(arDiagnoses.length<1||arDiagnoses.length!=arComments.length){alert(i18n.discernabu.consolproblem_o2.DIAGNOSIS_MODIFY_FAILURE);
return;
}var sendAr=CERN_CV_O2.getDiagnosisCommentServiceCallArray(arDiagnoses,arComments,compID);
CERN_CV_O2.loadWithCBParameters("mp_modify_diagnosis",CERN_CV_O2.cvRefresh,"cv2",sendAr.join(","),compID);
},getDiagnosisCommentServiceCallArray:function(arDiagnoses,arComments,compID){var component=MP_Util.GetCompObjById(compID);
var providerId=component.m_compObject.criterion.provider_id.toFixed(1);
var pprCd=component.m_compObject.criterion.ppr_cd.toFixed(1);
var patientId=component.m_compObject.criterion.person_id.toFixed(1);
var removeInd=0;
var commentInd=1;
var sendAr=[];
sendAr.push("^MINE^");
sendAr.push(providerId);
sendAr.push(pprCd);
sendAr.push(patientId);
sendAr.push(CERN_CV_O2.getDoubleArrayString(CERN_CV_O2.getPropertyArray(arDiagnoses,"DIAGNOSIS_ID")));
sendAr.push(CERN_CV_O2.getEmptyArrayString(1,"0.0"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(1,"0.0"));
sendAr.push(CERN_CV_O2.getStringArrayString(arComments));
sendAr.push(commentInd);
sendAr.push(CERN_CV_O2.getEmptyArrayString(1,"0"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(1,"0"));
sendAr.push(removeInd);
return sendAr;
},loadWithCBParameters:function(url,callback,sec,parameters,compID){function checkReady(){if(xhr.readyState===4){if(xhr.status===200){MP_Util.LogScriptCallInfo(MP_Util.GetCompObjById(compID),this,"consolidatedproblems.js","loadWithCBParameters");
if(url=="mp_modify_problems"){callback(xhr.responseText,sec,compID,2);
}else{if(url=="mp_modify_diagnosis"){callback(xhr.responseText,sec,compID,3);
}else{callback(xhr.responseText,sec,compID,1);
}}}else{var component=MP_Util.GetCompObjById(compID);
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
alert(i18n.discernabu.consolproblem_o2.PROBLEM_RETRIEVING_DATA.replace("{0}",sec));
}}}var component=MP_Util.GetCompObjById(compID);
var xhr=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
xhr.onreadystatechange=checkReady;
if(!parameters){parameters="^MINE^, "+component.m_compObject.criterion.person_id.toFixed(1)+","+component.m_compObject.criterion.provider_id.toFixed(1)+","+component.m_compObject.criterion.encntr_id.toFixed(1)+",^"+component.m_compObject.criterion.app_name+"^,"+component.m_compObject.criterion.position_cd.toFixed(1)+","+component.m_compObject.criterion.ppr_cd.toFixed(1);
}if(CERN_BrowserDevInd){var requestUrl=url+"?parameters="+parameters;
xhr.open("GET",requestUrl,true);
xhr.send(null);
}else{xhr.open("GET",url,true);
xhr.send(parameters);
}},updateCVActions:function(compID){var component=MP_Util.GetCompObjById(compID);
if(component.m_nProcessing==1){CERN_CV_O2.updateCVMenu(compID);
}},processingUI:function(oNamespace,sElementId,nIncrement,bChangeCursor,updateCallback,compID){var processingElement=$("#"+sElementId);
if(processingElement){if(nIncrement===0){oNamespace.m_nProcessing=0;
oNamespace.m_nWaitCursor=0;
}else{oNamespace.m_nProcessing+=nIncrement;
if(bChangeCursor){oNamespace.m_nWaitCursor+=nIncrement;
}if(oNamespace.m_nProcessing<0){oNamespace.m_nProcessing=0;
}if(oNamespace.m_nWaitCursor<0){oNamespace.m_nWaitCursor=0;
}}var bodyElement=$("body");
if(oNamespace.m_nProcessing===0){$(processingElement).addClass("cv2-hide");
}else{$(processingElement).removeClass("cv2-hide");
}if(oNamespace.m_nWaitCursor===0){$(bodyElement).removeClass("cv2-busy");
}else{$(bodyElement).addClass("cv2-busy");
}if(updateCallback){updateCallback(compID);
}}},launchModifyDlg:function(condition,component){var compID=component.getComponentId();
var probDxUtils=component.getProbDxUtilsObject();
var dConditionIndx=condition.CONDITION_INDEX;
var dOriginatingNomenclatureID=condition.NOMENCLATURE_ID;
var dSection=condition.itemType;
var bFound=false;
var mostRecentProblem=null;
var mostRecentEncntrDiagnosis=null;
var retVal=false;
var iType=-1;
if(dSection=="TV"){iType=0;
mostRecentEncntrDiagnosis=CERN_CV_O2.getMostRecentEncntrDiagnosis(0,dConditionIndx,compID);
if(mostRecentEncntrDiagnosis&&probDxUtils){try{retVal=probDxUtils.LoadDiagnosisAndInvokeModify(mostRecentEncntrDiagnosis.DIAGNOSIS_ID,component.m_compObject.criterion.person_id,component.m_compObject.criterion.encntr_id,true);
}catch(err){}}}else{if(dSection=="AC"||dSection=="HX"||dSection=="IC"){if(dSection=="AC"){iType=2;
}else{iType=3;
}mostRecentProblem=CERN_CV_O2.getMostRecentProblem(0,dConditionIndx,compID);
if(mostRecentProblem&&probDxUtils){try{retVal=probDxUtils.LoadProblemAndInvokeModify(mostRecentProblem.PROBLEM_ID,component.m_compObject.criterion.person_id,true);
}catch(err){}}}}if(retVal){component.m_nNewConditionType=iType;
component.m_dNewConditionNomenclatureId=dOriginatingNomenclatureID;
component.m_nNewConditionIndx=dConditionIndx;
var compCriterion=component.m_compObject.criterion;
CERN_CV_O2.refreshConditions(compID);
}Util.cancelBubble(window.event);
},updateCVMenu:function(compID){},searchNomenclature:function(callback,textBox,component){if(textBox.value.length>1){if(component.m_compObject.iSearchTypeFlag<1){return;
}if(textBox.value.length===2){var slaTimer=MP_Util.CreateTimer("CAP:MPG_Consolidated_Problems_02_Search_Window");
if(slaTimer){slaTimer.SubtimerName=component.getCriterion().category_mean;
slaTimer.Stop();
}}var xhr=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
var returnData;
var searchPhrase=textBox.value;
var limit=10;
component.m_compObject.curSearchCounter=component.m_compObject.curSearchCounter+1;
CERN_CV_O2.processingUI(component,"cv2Processing"+component.m_compObject.cvCompId,1,false,CERN_CV_O2.updateCVActions,component.m_compObject.cvCompId);
xhr.onreadystatechange=function(){if(xhr.readyState==4&&xhr.status==200){MP_Util.LogScriptCallInfo(component,this,"consolidatedproblems.js","searchNomenclature");
var msg=xhr.responseText;
var jsonMsg="";
if(msg){jsonMsg=JSON.parse(msg);
}if(jsonMsg){component.m_compObject.replySearchCounter=jsonMsg.RECORD_DATA.SEARCHINDEX;
if(component.m_compObject.replySearchCounter===component.m_compObject.curSearchCounter&&textBox.value!==""){returnData=jsonMsg.RECORD_DATA.NOMENCLATURE;
callback.autosuggest(returnData);
}}CERN_CV_O2.processingUI(component,"cv2Processing"+component.m_compObject.cvCompId,-1,false,CERN_CV_O2.updateCVActions,component.m_compObject.cvCompId);
}};
var sendAr=["^MINE^","^"+searchPhrase+"^",limit,component.m_compObject.curSearchCounter,component.m_compObject.iSearchTypeFlag,"0",component.m_enableEarlyTransitionDx?"1":"0"];
if(CERN_BrowserDevInd){var url="MP_SEARCH_NOMENCLATURES?parameters="+sendAr.join(",");
xhr.open("GET",url,true);
xhr.send(null);
}else{xhr.open("GET","mp_search_nomenclatures",true);
xhr.send(sendAr.join(","));
}}},CreateSuggestionLine:function(suggestionObj,searchVal){return CERN_CV_O2.HighlightValue(suggestionObj.NAME,searchVal);
},HighlightValue:function(inString,term){return"<strong>"+inString.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)("+term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi,"\\$1").split(" ").join("|")+")(?![^<>]*>)(?![^&;]+;)","gi"),"</strong>$1<strong>")+"</strong>";
},addCondition:function(nomenclature_id,textbox,component){if(nomenclature_id){var searchWindowProblemSelectCAPTimer=new CapabilityTimer("CAP:MPG_Consolidated_Problems_02_Select_Diagnosis_Problem_Search_Window",component.getCriterion().category_mean);
searchWindowProblemSelectCAPTimer.capture();
var compID=component.m_compObject.cvCompId;
var addConditionType=component.m_cvAddAsType;
var cvSearch=$("#cv2ContentCtrl"+compID);
$(cvSearch).val("");
var nextPriority=0;
if(component.m_enableModifyPrioritization){nextPriority=CERN_CV_O2.getNextPriority(compID);
}CERN_CV_O2.addConditionWithType(nomenclature_id.VALUE,addConditionType,0,compID,nextPriority,0);
}},addConditionWithType:function(dOriginatingNomenclatureId,iType,dConditionIndx,compID,iPriority,iConditionType){var component=MP_Util.GetCompObjById(compID);
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
var dDiagnosisNomenclatureId=0;
var dDiagnosisTransitionNomenclatureId=0;
var dProblemNomenclatureId=0;
var nLifeStatusCodeFlag=1;
var mostRecentProblem=null;
var paramString="";
var compCriterion=component.m_compObject.criterion;
var mapModeEnum=4;
var condition="";
var sAnnotatedDisplay="";
switch(component.m_canAddConditionFlag){case 0:alert(i18n.discernabu.consolproblem_o2.NO_PRIVS_MSG);
component.conditionAddedFlag=false;
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
return;
break;
case 1:if(iType==1||iType==2){component.conditionAddedFlag=false;
alert(i18n.discernabu.consolproblem_o2.NO_ADD_CONDITION_MSG.replace("{0}",component.m_activeLabelDisplay));
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
return;
break;
}else{if(iType==3){component.conditionAddedFlag=false;
alert(i18n.discernabu.consolproblem_o2.NO_ADD_CONDITION_MSG.replace("{0}",component.m_historicalLabelDisplay));
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
return;
break;
}}break;
case 2:if(iType==0){component.conditionAddedFlag=false;
alert(i18n.discernabu.consolproblem_o2.NO_ADD_CONDITION_MSG.replace("{0}",component.m_visitLabelDisplay));
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
return;
break;
}break;
default:}if(iType==1||iType==2||iType==3||iType==4){mostRecentProblem=CERN_CV_O2.getMostRecentProblem(dOriginatingNomenclatureId,0,compID);
}try{var kiaCrossMappingObj=CERN_Platform.getDiscernObject("KIACROSSMAPPING");
if(!kiaCrossMappingObj){logger.logError("Unable to create the KIACROSSMAPPING COM object");
return;
}logger.logDiscernInfo(component,"KIACROSSMAPPING","consolidatedproblemso2.js","addConditionWithType");
switch(iType){case 0:try{var diagnosisItemObj=kiaCrossMappingObj.GetDxProbMappingObj(compCriterion.person_id,compCriterion.encntr_id,mapModeEnum,dOriginatingNomenclatureId,component.m_diagnosisTargetVocabCd,compCriterion.ppr_cd,compCriterion.position_cd,component.m_visitLabelDisplay,component.m_activeLabelDisplay,component.m_historicalLabelDisplay);
dDiagnosisNomenclatureId=diagnosisItemObj.NomenclatureID;
dDiagnosisTransitionNomenclatureId=diagnosisItemObj.TransitionNomenclatureID;
if(iConditionType!==1){sAnnotatedDisplay=diagnosisItemObj.DiagnosisDisplay;
}}catch(err){logger.logError("Error occurred when using the KIACROSSMAPPINGOBJ.GetDxProbMappingObj COM method while adding to TV. Latest KiaCrossMapping DLL may not exist. Reverting back to the old method. Error: "+err);
try{dDiagnosisNomenclatureId=kiaCrossMappingObj.GetDxProbMapping(compCriterion.person_id,compCriterion.encntr_id,mapModeEnum,dOriginatingNomenclatureId,component.m_diagnosisTargetVocabCd,compCriterion.ppr_cd,compCriterion.position_cd,component.m_visitLabelDisplay,component.m_activeLabelDisplay,component.m_historicalLabelDisplay);
}catch(err){logger.logJSError(err,this,"consolidatedproblems-o2.js","addConditionWithType");
}}break;
case 1:try{var diagnosisItemObj=kiaCrossMappingObj.GetDxProbMappingObj(compCriterion.person_id,compCriterion.encntr_id,mapModeEnum,dOriginatingNomenclatureId,component.m_diagnosisTargetVocabCd,compCriterion.ppr_cd,compCriterion.position_cd,component.m_visitLabelDisplay,component.m_activeLabelDisplay,component.m_historicalLabelDisplay);
dDiagnosisNomenclatureId=diagnosisItemObj.NomenclatureID;
dDiagnosisTransitionNomenclatureId=diagnosisItemObj.TransitionNomenclatureID;
if(iConditionType!==1){sAnnotatedDisplay=diagnosisItemObj.DiagnosisDisplay;
}}catch(err){logger.logError("Error occurred when using the KIACROSSMAPPINGOBJ.GetDxProbMappingObj COM method while adding to TV/Active. Latest KiaCrossMapping DLL may not exist. Reverting back to the old method. Error: "+err);
try{dDiagnosisNomenclatureId=kiaCrossMappingObj.GetDxProbMapping(compCriterion.person_id,compCriterion.encntr_id,mapModeEnum,dOriginatingNomenclatureId,component.m_diagnosisTargetVocabCd,compCriterion.ppr_cd,compCriterion.position_cd,component.m_visitLabelDisplay,component.m_activeLabelDisplay,component.m_historicalLabelDisplay);
}catch(err){logger.logJSError(err,this,"consolidatedproblems-o2.js","addConditionWithType");
}}if(mostRecentProblem===null||mostRecentProblem.LIFECYCLE_STATUS_MEAN==="ACTIVE"){try{dProblemNomenclatureId=kiaCrossMappingObj.GetDxProbMapping(compCriterion.person_id,compCriterion.encntr_id,5,dOriginatingNomenclatureId,component.m_problemTargetVocabCd,compCriterion.ppr_cd,compCriterion.position_cd,component.m_visitLabelDisplay,component.m_activeLabelDisplay,component.m_historicalLabelDisplay);
}catch(err){logger.logJSError(err,this,"consolidatedproblems-o2.js","addConditionWithType");
}mostRecentProblem=null;
}nLifeStatusCodeFlag=1;
break;
case 2:if(mostRecentProblem===null||mostRecentProblem.LIFECYCLE_STATUS_MEAN==="ACTIVE"){dProblemNomenclatureId=kiaCrossMappingObj.GetDxProbMapping(compCriterion.person_id,compCriterion.encntr_id,5,dOriginatingNomenclatureId,component.m_problemTargetVocabCd,compCriterion.ppr_cd,compCriterion.position_cd,component.m_visitLabelDisplay,component.m_activeLabelDisplay,component.m_historicalLabelDisplay);
mostRecentProblem=null;
}nLifeStatusCodeFlag=1;
break;
case 3:if(mostRecentProblem===null||mostRecentProblem.LIFECYCLE_STATUS_MEAN==="RESOLVED"){dProblemNomenclatureId=kiaCrossMappingObj.GetDxProbMapping(compCriterion.person_id,compCriterion.encntr_id,6,dOriginatingNomenclatureId,component.m_problemTargetVocabCd,compCriterion.ppr_cd,compCriterion.position_cd,component.m_visitLabelDisplay,component.m_activeLabelDisplay,component.m_historicalLabelDisplay);
if(component.m_bHistoricalExpanded===false){}mostRecentProblem=null;
}nLifeStatusCodeFlag=4;
break;
case 4:if(mostRecentProblem===null||mostRecentProblem.LIFECYCLE_STATUS_MEAN==="INACTIVE"){dProblemNomenclatureId=kiaCrossMappingObj.GetDxProbMapping(compCriterion.person_id,compCriterion.encntr_id,5,dOriginatingNomenclatureId,component.m_problemTargetVocabCd,compCriterion.ppr_cd,compCriterion.position_cd,component.m_visitLabelDisplay,component.m_activeLabelDisplay,component.m_historicalLabelDisplay);
mostRecentProblem=null;
}nLifeStatusCodeFlag=3;
break;
default:}if(iConditionType===1){condition=CERN_CV_O2.getCondition(dOriginatingNomenclatureId,dConditionIndx,compID);
sAnnotatedDisplay=condition.ANNOTATED_DISPLAY;
}}catch(err){logger.logError("Failed in addConditionWithType: "+err);
}CERN_CV_O2.processingUI(component,"cv2Processing"+compID,2,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount+=2;
if(component.nkpNomenclatureId>0){if(dProblemNomenclatureId==component.nkpNomenclatureId){CERN_CV_O2.addNKAP(component);
dProblemNomenclatureId=0;
}}if(dDiagnosisNomenclatureId>0||dProblemNomenclatureId>0){component.m_nNewConditionType=iType;
component.m_dNewConditionNomenclatureId=dOriginatingNomenclatureId;
component.m_nNewConditionIndx=dConditionIndx;
var dDiagTransNomenID=parseFloat(dDiagnosisTransitionNomenclatureId);
var sDisplay=sAnnotatedDisplay;
var dDiagNomenID=parseFloat(dDiagnosisNomenclatureId);
var dProbNomenID=parseFloat(dProblemNomenclatureId);
var dOrigNomenID=parseFloat(dOriginatingNomenclatureId);
var dDxAddType=parseFloat(component.getVisitAddType());
var dDxAddClass=parseFloat(component.getVisitAddClass());
var dPlAddType=parseFloat(component.getActiveAddType());
var dPlAddClass=parseFloat(component.getActiveAddClass());
var dDxAddConf=parseFloat(component.getVisitAddConf());
var iDxPriority=(dDiagNomenID>0)?iPriority:0;
if(sDisplay.indexOf('"')==-1){sDisplay='"'+sDisplay+'"';
}paramString="^MINE^,"+compCriterion.person_id.toFixed(1)+","+compCriterion.encntr_id.toFixed(1)+","+compCriterion.provider_id.toFixed(1)+","+compCriterion.position_cd.toFixed(1)+","+compCriterion.ppr_cd.toFixed(1)+","+iType+","+dDiagNomenID.toFixed(1)+","+dProbNomenID.toFixed(1)+","+dOrigNomenID.toFixed(1)+","+nLifeStatusCodeFlag+","+dDxAddType.toFixed(1)+","+dDxAddClass.toFixed(1)+","+dPlAddType.toFixed(1)+","+dPlAddClass.toFixed(1)+","+dDxAddConf.toFixed(1)+","+iDxPriority+","+dDiagTransNomenID.toFixed(1)+","+sDisplay;
CERN_CV_O2.loadWithCBParameters("mp_add_condition",CERN_CV_O2.cvAddLoad,"cv2",paramString,compID);
}else{CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
}var dProblemId=0;
var iProblemType=0;
if(mostRecentProblem){dProblemId=mostRecentProblem.PROBLEM_ID;
iProblemType=mostRecentProblem.PROBLEM_TYPE_FLAG;
}if(dProblemId>0){if(iProblemType==2){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
alertMsg=i18n.discernabu.consolproblem_o2.PROBLEM_TYPE_FLAG_2_MSG;
alert(alertMsg);
}else{component.m_nNewConditionType=iType;
component.m_dNewConditionNomenclatureId=dOriginatingNomenclatureId;
component.m_nNewConditionIndx=dConditionIndx;
paramString="^MINE^,"+dProblemId.toFixed(1)+","+compCriterion.provider_id.toFixed(1)+","+compCriterion.ppr_cd.toFixed(1)+","+nLifeStatusCodeFlag+","+0+","+0;
CERN_CV_O2.loadWithCBParameters("mp_modify_problem",CERN_CV_O2.cvRefresh,"cv2",paramString,compID);
}}else{CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
}CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
},reprioritizeAndModifyDiagnoses:function(arrDxIDsToRemove,compID){var reprioritizedDiagnoses=CERN_CV_O2.reprioritizeDiagnosesListForRemove(arrDxIDsToRemove,compID);
if(!reprioritizedDiagnoses||reprioritizedDiagnoses.GetCount()<1){return;
}CERN_CV_O2.modifyReprioritizedDiagnoses(reprioritizedDiagnoses,compID);
},getDiagnosisIDsFromCollection:function(diagnosisCollection,compID){var diagnosisIDs=[];
if(!diagnosisCollection){return diagnosisIDs;
}for(var idx=0,count=diagnosisCollection.GetCount();
idx<count;
idx++){var clinicalDiagnosis=diagnosisCollection.GetItem(idx);
if(clinicalDiagnosis){diagnosisIDs.push(clinicalDiagnosis.DiagnosisID);
}}return diagnosisIDs;
},getPrioritiesFromCollection:function(diagnosisCollection,compID){var priorities=[];
if(!diagnosisCollection){return priorities;
}for(var idx=0,count=diagnosisCollection.GetCount();
idx<count;
idx++){var clinicalDiagnosis=diagnosisCollection.GetItem(idx);
if(clinicalDiagnosis){priorities.push(clinicalDiagnosis.ClinicalPriority);
}}return priorities;
},modifyReprioritizedDiagnoses:function(diagnosisCollection,compID){if(!diagnosisCollection||diagnosisCollection.GetCount()<1){alert(i18n.discernabu.consolproblem_o2.DIAGNOSIS_MODIFY_FAILURE);
return;
}var component=MP_Util.GetCompObjById(compID);
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount++;
var diagnosisIDs=CERN_CV_O2.getDiagnosisIDsFromCollection(diagnosisCollection,compID);
var priorities=CERN_CV_O2.getPrioritiesFromCollection(diagnosisCollection,compID);
var sendAr=CERN_CV_O2.getServiceCallArrayForBatchModify(diagnosisIDs,priorities,compID);
CERN_CV_O2.loadWithCBParameters("mp_modify_diagnosis",CERN_CV_O2.cvRefresh,"cv2",sendAr.join(","),compID);
},getMostRecentDiagnosisFromCondition:function(condition){if(condition){if(condition.DIAGNOSES.length>0){var mostRecentDiagnosis=condition.DIAGNOSES[0];
return mostRecentDiagnosis;
}}return null;
},getServiceCallArrayForBatchRemove:function(diagnosisIDs,compID){var component=MP_Util.GetCompObjById(compID);
var providerId=component.m_compObject.criterion.provider_id.toFixed(1);
var pprCd=component.m_compObject.criterion.ppr_cd.toFixed(1);
var patientId=component.m_compObject.criterion.person_id.toFixed(1);
var removeInd=1;
var commentInd=0;
var sendAr=[];
sendAr.push("^MINE^");
sendAr.push(providerId);
sendAr.push(pprCd);
sendAr.push(patientId);
sendAr.push(CERN_CV_O2.getDoubleArrayString(diagnosisIDs,"DIAGNOSIS_ID"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,"0.0"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,"0.0"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,'""'));
sendAr.push(commentInd);
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,"0"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,"0"));
sendAr.push(removeInd);
return sendAr;
},getServiceCallArrayForBatchModify:function(diagnosisIDs,priorityArray,compID){var component=MP_Util.GetCompObjById(compID);
var providerId=component.m_compObject.criterion.provider_id.toFixed(1);
var pprCd=component.m_compObject.criterion.ppr_cd.toFixed(1);
var patientId=component.m_compObject.criterion.person_id.toFixed(1);
var removeInd=0;
var commentInd=0;
var sendAr=[];
sendAr.push("^MINE^");
sendAr.push(providerId);
sendAr.push(pprCd);
sendAr.push(patientId);
sendAr.push(CERN_CV_O2.getDoubleArrayString(diagnosisIDs,"DIAGNOSIS_ID"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,"0.0"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,"0.0"));
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,'""'));
sendAr.push(commentInd);
sendAr.push(CERN_CV_O2.getArrayString(priorityArray));
sendAr.push(CERN_CV_O2.getEmptyArrayString(diagnosisIDs.length,"1"));
sendAr.push(removeInd);
return sendAr;
},getPropertyArray:function(objects,propName){var propertyArray=[];
for(var i=0,l=objects.length;
i<l;
i++){propertyArray.push(objects[i][propName]);
}return propertyArray;
},getEmptyArrayString:function(arrayCount,emptyValue){var emptyArray=[];
for(var i=0,l=arrayCount;
i<l;
i++){emptyArray.push(emptyValue);
}var arrayString="value(";
arrayString+=emptyArray.join(",");
arrayString+=")";
return arrayString;
},getArrayString:function(valueArray){var stringArray=[];
for(var i=0,l=valueArray.length;
i<l;
i++){stringArray.push(valueArray[i]);
}var string="value(";
string+=stringArray.join(",");
string+=")";
return string;
},getDoubleArrayString:function(doubleArray){var stringArray=[];
for(var i=0,l=doubleArray.length;
i<l;
i++){stringArray.push(doubleArray[i].toFixed(1));
}var string="value(";
string+=stringArray.join(",");
string+=")";
return string;
},getStringArrayString:function(valueArray){var stringArray=[];
for(var i=0,l=valueArray.length;
i<l;
i++){stringArray.push(valueArray[i]);
}var string='value("';
string+=stringArray.join('","');
string+='")';
return string;
},getThisVisitConditions:function(compID){var component=MP_Util.GetCompObjById(compID);
var conditions=[];
var secThisVisit=component.m_loadedConditions.DATA.THIS_VISIT;
$.merge(conditions,CERN_CV_O2.getConditionsBySectionList(secThisVisit));
return conditions;
},getAllConditions:function(compID){var component=MP_Util.GetCompObjById(compID);
var conditions=[];
var secThisVisit=component.m_loadedConditions.DATA.THIS_VISIT;
var secActive=component.m_loadedConditions.DATA.ACTIVE;
var secHistorical=component.m_loadedConditions.DATA.HISTORICAL;
$.merge(conditions,CERN_CV_O2.getConditionsBySectionList(secThisVisit));
$.merge(conditions,CERN_CV_O2.getConditionsBySectionList(secActive));
$.merge(conditions,CERN_CV_O2.getConditionsBySectionList(secHistorical));
return conditions;
},getConditionsBySectionList:function(sectionList,compID){var conditions=[];
for(var i=0,l=sectionList.length;
i<l;
i++){conditions.push(sectionList[i]);
}return conditions;
},cancelNKP:function(compID){var component=MP_Util.GetCompObjById(compID);
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
var dNomenclatureId=parseFloat(component.c_nkpNomenclatureId);
var dConditionIndx=parseFloat(component.c_nkpConditionIndex);
var statusFlag=2;
var nomenArray=[];
var nomenArrayCnt=0;
var nomenProcessed=false;
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount+=1;
for(var j=0;
j<nomenArrayCnt;
j++){if(nomenArray[j]==dConditionIndx){nomenProcessed=true;
break;
}}if(nomenProcessed){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
}nomenArray[nomenArrayCnt]=dConditionIndx;
var mostRecentProblem=CERN_CV_O2.getMostRecentProblem(0,dConditionIndx,compID);
if(mostRecentProblem===null||mostRecentProblem.PROBLEM_ID===0){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
}component.m_nNewConditionType=3;
component.m_dNewConditionNomenclatureId=dNomenclatureId;
component.m_nNewConditionIndx=dConditionIndx;
var dMrpProbID=parseFloat(mostRecentProblem.PROBLEM_ID);
var paramString="^MINE^,"+dMrpProbID.toFixed(1)+","+component.m_compObject.criterion.provider_id.toFixed(1)+","+component.m_compObject.criterion.ppr_cd.toFixed(1)+","+statusFlag+","+0+","+0;
CERN_CV_O2.loadWithCBParameters("mp_modify_problem",CERN_CV_O2.cvRefresh,"cv2",paramString,compID);
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
},infoButtonProblem:function(compID,infoButtonFlag){var component=MP_Util.GetCompObjById(compID);
var menuId="mainCompMenu"+component.getStyles().getId();
var self=this;
var compMenu=MP_MenuManager.getMenuObject(menuId);
if(component.compMenuReference["infoButtonItem"+menuId].isSelected()){component.compMenuReference["infoButtonItem"+menuId].setIsSelected(false);
var problemInfoIcons=$("#cv2Content"+compID).find(".cv2-info-icon");
$.each(problemInfoIcons,function(){problemInfoIcons.addClass("hidden");
});
MP_Core.AppUserPreferenceManager.SaveCompPreferences(compID,"","",false,"0");
}else{component.compMenuReference["infoButtonItem"+menuId].setIsSelected(true);
var problemInfoIcons=$("#cv2Content"+compID).find(".cv2-info-icon");
$.each(problemInfoIcons,function(){problemInfoIcons.removeClass("hidden");
});
MP_Core.AppUserPreferenceManager.SaveCompPreferences(compID,"","",false,"1");
}},getMostRecentProblem:function(dNomenclatureId,dConditionIndx,compID){var condition=CERN_CV_O2.getCondition(dNomenclatureId,dConditionIndx,compID);
if(condition){if(condition.PROBLEMS.length>0){var mostRecentProblem=condition.PROBLEMS[0];
return mostRecentProblem;
}}return null;
},getMostRecentDiagnosis:function(dNomenclatureId,dConditionIndx,compID){var condition=CERN_CV_O2.getCondition(dNomenclatureId,dConditionIndx,compID);
if(condition){if(condition.DIAGNOSES.length>0){var mostRecentDiagnosis=condition.DIAGNOSES[0];
return mostRecentDiagnosis;
}}return null;
},getMostRecentEncntrDiagnosis:function(dNomenclatureId,dConditionIndx,compID){var component=MP_Util.GetCompObjById(compID);
var condition=CERN_CV_O2.getCondition(dNomenclatureId,dConditionIndx,compID);
if(condition){var diagnosesLen=condition.DIAGNOSES.length;
if(diagnosesLen>0){var mostRecentDiagnosis=0;
for(var i=0;
i<diagnosesLen;
i++){mostRecentDiagnosis=condition.DIAGNOSES[i];
if(mostRecentDiagnosis.ENCOUNTER_ID==component.m_compObject.criterion.encntr_id){return mostRecentDiagnosis;
}}}}return null;
},getCondition:function(dNomenclatureId,dConditionIndx,compID){var component=MP_Util.GetCompObjById(compID);
var condition=null;
if(component.m_loadedConditions){condition=CERN_CV_O2.findCondition(dNomenclatureId,dConditionIndx,component.m_loadedConditions.DATA.THIS_VISIT,compID);
if(condition===null){condition=CERN_CV_O2.findCondition(dNomenclatureId,dConditionIndx,component.m_loadedConditions.DATA.ACTIVE,compID);
}if(condition===null){condition=CERN_CV_O2.findCondition(dNomenclatureId,dConditionIndx,component.m_loadedConditions.DATA.HISTORICAL,compID);
}}return condition;
},findCondition:function(dNomenclatureId,dConditionIndx,arrConditions,compID){var iLength=arrConditions.length;
for(var iIndex=0;
iIndex<iLength;
iIndex++){if(dNomenclatureId>0){if(arrConditions[iIndex].NOMENCLATURE_ID==dNomenclatureId){return arrConditions[iIndex];
}}else{if(dConditionIndx>0){if(arrConditions[iIndex].CONDITION_INDEX==dConditionIndx){return arrConditions[iIndex];
}}}}return null;
},cvBuildConditionAddOptions:function(nAddTypeDisp,compID){var component=MP_Util.GetCompObjById(compID);
var jqAddTypeSpan=$("#cv2AddTypeSpan"+compID);
if(jqAddTypeSpan){$(jqAddTypeSpan).remove();
}jqAddTypeSpan=$("<span/>");
var sDisplay="";
switch(nAddTypeDisp){case 0:sDisplay=component.m_visitLabelDisplay;
break;
case 1:sDisplay=component.m_visitLabelDisplay+" "+i18n.discernabu.consolproblem_o2.AND+" "+component.m_activeLabelDisplay;
break;
case 2:sDisplay=component.m_activeLabelDisplay;
break;
case 3:sDisplay=component.m_historicalLabelDisplay;
break;
default:if(component.m_canAddConditionFlag===1||component.m_canAddConditionFlag===3){sDisplay=component.m_visitLabelDisplay;
}else{sDisplay=component.m_activeLabelDisplay;
}break;
}var addTypeInnerHTMLArr=[];
addTypeInnerHTMLArr.push('<span class="cv2AddTypeSpan" id="cv2AddTypeSpan',compID,'">',sDisplay,"&nbsp;",'<div class="mnu-selectWindow cv2-menu2 menu-hide" id="cv2AddTypeMenu',compID,'">','<div class="mnu-labelbox">',sDisplay,"</div>",'<div class="cv2-mnu-contentbox cv2-mnu-contentbox-class">');
switch(component.m_canAddConditionFlag){case 1:addTypeInnerHTMLArr.push('<div class="cv2-AddTypeOpt" id="mnuCV2AddTypeTV',compID,'">',component.m_visitLabelDisplay,"</div></div></div></span>");
break;
case 2:addTypeInnerHTMLArr.push('<div class="cv2-AddTypeOpt" id="mnuCV2AddTypeAC',compID,'">',component.m_activeLabelDisplay,"</div>",'<div class="cv2-AddTypeOpt" id="mnuCV2AddTypeHS',compID,'">',component.m_historicalLabelDisplay,"</div></div></div></span>");
break;
case 3:addTypeInnerHTMLArr.push('<div class="cv2-AddTypeOpt" id="mnuCV2AddTypeTV',compID,'">',component.m_visitLabelDisplay,"</div>",'<div class="cv2-AddTypeOpt" id="mnuCV2AddTypeTvAc',compID,'">',component.m_visitLabelDisplay+" "+i18n.discernabu.consolproblem_o2.AND+" "+component.m_activeLabelDisplay,"</div>",'<div class="cv2-AddTypeOpt" id="mnuCV2AddTypeAC',compID,'">',component.m_activeLabelDisplay,"</div>",'<div class="cv2-AddTypeOpt" id="mnuCV2AddTypeHS',compID,'">',component.m_historicalLabelDisplay,"</div></div></div></span>");
break;
}jqAddTypeSpan.html(addTypeInnerHTMLArr.join(""));
var jqSecAddTypeList=$("#cv2"+compID).find(".cv2-AddLabel").first();
jqSecAddTypeList.after(jqAddTypeSpan);
jqAddTypeSpan.click(function(e){if(component.m_nProcessing===0){var jqAddTypeMenu=$("#cv2AddTypeMenu"+compID);
if(jqAddTypeMenu.hasClass("menu-hide")){jqAddTypeMenu.removeClass("menu-hide");
}else{jqAddTypeMenu.addClass("menu-hide");
}var jqOptMenuCVAddDiv=$("#cv2ControlsDiv"+compID);
var jqSpanElement=$(this);
var spanOffset=jqSpanElement.offset();
var optMenuOffset=jqOptMenuCVAddDiv.offset();
jqAddTypeMenu.offset({top:spanOffset.top,left:spanOffset.left});
}});
jqAddTypeSpan.mouseover(function(e){var jqThis=$(this);
if(jqThis.hasClass("cv2-mnu-border")==false){jqThis.addClass("cv2-mnu-border");
}});
jqAddTypeSpan.mouseout(function(e){var jqThis=$(this);
if(jqThis.hasClass("cv2-mnu-border")==true){jqThis.removeClass("cv2-mnu-border");
}});
var jqAddTypeMenu=$("#cv2AddTypeMenu"+compID);
var menuRows=jqAddTypeMenu.find(".cv2-AddTypeOpt");
$.each(menuRows,function(){var item=$(this);
item.mousedown(function(e){CERN_CV_O2.cvHandleAddTypeEvents(compID);
});
item.mouseenter(function(e){item.addClass("cv2-mnu-hover-over");
});
item.mouseleave(function(e){item.removeClass("cv2-mnu-hover-over");
});
});
CERN_CV_O2.closeMenuInit(compID,jqAddTypeMenu);
},cvHandleAddTypeEvents:function(compID){var component=MP_Util.GetCompObjById(compID);
var oEvent=window.event;
var oTarget=oEvent.target||oEvent.srcElement;
if(oEvent.type=="mousedown"){if(oTarget.id=="mnuCV2AddTypeTV"+compID){component.m_cvAddAsType=0;
}else{if(oTarget.id=="mnuCV2AddTypeTvAc"+compID){component.m_cvAddAsType=1;
}else{if(oTarget.id=="mnuCV2AddTypeAC"+compID){component.m_cvAddAsType=2;
}else{if(oTarget.id=="mnuCV2AddTypeHS"+compID){component.m_cvAddAsType=3;
}}}}CERN_CV_O2.cvBuildConditionAddOptions(component.m_cvAddAsType,compID);
}},refreshConditions:function(compID){var component=MP_Util.GetCompObjById(compID);
CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
if(component.m_nRefreshCount<=0){var refreshAr=[];
refreshAr.push("^MINE^",component.m_compObject.criterion.person_id+".0",component.m_compObject.criterion.provider_id+".0",component.m_compObject.criterion.encntr_id+".0",component.m_compObject.criterion.ppr_cd+".0",component.m_compObject.criterion.position_cd+".0","^"+component.m_compObject.criterion.category_mean+"^",component.getDefaultSearchVocab()+".0","1");
MP_Core.XMLCclRequestWrapper(component,"MP_GET_CONDITIONS",refreshAr,true);
}},cvAddLoad:function(xhr,sec,compID,functionID){var component=MP_Util.GetCompObjById(compID);
var msgCondition=xhr;
var alertMsg="";
var jsonCondition=null;
var noProblemPriv=false;
var noDiagnosisPriv=false;
var newFunctionID=functionID;
if(msgCondition){jsonCondition=JSON.parse(msgCondition);
}if(jsonCondition){var m_nNewConditionType=jsonCondition.CONDITION_REPORT.NEWCONDITIONTYPE;
if(jsonCondition.CONDITION_REPORT.PROBLEM.length>0&&jsonCondition.CONDITION_REPORT.PROBLEM[0].RECORD_DATA.PRIVILEGE_IND===0){noProblemPriv=true;
}if(jsonCondition.CONDITION_REPORT.DIAGNOSIS.length>0&&jsonCondition.CONDITION_REPORT.DIAGNOSIS[0].RECORD_DATA.PRIVILEGE_IND===0){noDiagnosisPriv=true;
}if(noProblemPriv&&noDiagnosisPriv){alertMsg=i18n.discernabu.consolproblem_o2.NO_PRIVS_MSG;
alert(alertMsg);
}else{if(noProblemPriv){if(m_nNewConditionType===3){alertMsg=i18n.discernabu.consolproblem_o2.NO_ADD_CONDITION_MSG.replace("{0}",component.m_historicalLabelDisplay);
}else{alertMsg=i18n.discernabu.consolproblem_o2.NO_ADD_CONDITION_MSG.replace("{0}",component.m_activeLabelDisplay);
}alert(alertMsg);
}else{if(noDiagnosisPriv){alertMsg=i18n.discernabu.consolproblem_o2.NO_ADD_CONDITION_MSG.replace("{0}",component.m_visitLabelDisplay);
alert(alertMsg);
}}}var sTargetSection=null;
var bHasDiagnosisDuplicate=(jsonCondition.CONDITION_REPORT.DIAGNOSIS.length>0&&jsonCondition.CONDITION_REPORT.DIAGNOSIS[0].RECORD_DATA.DUPLICATES.length>0);
var bHasProblemDuplicate=(jsonCondition.CONDITION_REPORT.PROBLEM.length>0&&jsonCondition.CONDITION_REPORT.PROBLEM[0].RECORD_DATA.DUPLICATE_IND==1);
if(m_nNewConditionType==1&&bHasDiagnosisDuplicate&&bHasProblemDuplicate){sTargetSection=component.m_visitLabelDisplay+" "+i18n.discernabu.consolproblem_o2.AND+" "+component.m_activeLabelDisplay;
}else{if(m_nNewConditionType==3&&bHasProblemDuplicate){sTargetSection=component.m_historicalLabelDisplay;
}else{if(bHasDiagnosisDuplicate){sTargetSection=component.m_visitLabelDisplay;
}else{if(bHasProblemDuplicate){sTargetSection=component.m_activeLabelDisplay;
}}}}if(sTargetSection){var sDuplicateMessage=i18n.discernabu.consolproblem_o2.DUPLICATE_MSG.replace(/\{0\}/g,sTargetSection);
alert(sDuplicateMessage);
component.m_dNewConditionNomenclatureId=0;
component.m_nNewConditionIndx=0;
}if(jsonCondition.CONDITION_REPORT.DIAGNOSIS.length>0){newFunctionID=0;
}else{newFunctionID=2;
}CERN_CV_O2.cvRefresh(xhr,component.m_compObject.sec,compID,newFunctionID);
component.fireDiagnosisAddedEvent();
}},cvRefresh:function(xhr,sec,compID,functionID){var component=MP_Util.GetCompObjById(compID);
var probDxUtils=component.getProbDxUtilsObject();
var msgCondition=xhr;
var alertMsg="";
var jsonCondition="";
var cRpt="";
var cRptLen=0;
if(probDxUtils){if(component.m_nNewConditionType==0&&(component.m_dNewConditionNomenclatureId>0||component.m_nNewConditionIndx>0)){try{probDxUtils.RefreshDiagnosisCollection(component.m_compObject.criterion.person_id,component.m_compObject.criterion.encntr_id);
}catch(err){}}else{if((component.m_nNewConditionType==2||component.m_nNewConditionType==3)&&(component.m_dNewConditionNomenclatureId>0||component.m_nNewConditionIndx>0)){try{probDxUtils.RefreshProblemCollection(component.m_compObject.criterion.person_id);
}catch(err){}}else{if(component.m_nNewConditionType==1&&(component.m_dNewConditionNomenclatureId>0||component.m_nNewConditionIndx>0)){try{probDxUtils.RefreshDiagnosisCollection(component.m_compObject.criterion.person_id,component.m_compObject.criterion.encntr_id);
probDxUtils.RefreshProblemCollection(component.m_compObject.criterion.person_id);
}catch(err){}}}}}if(msgCondition){jsonCondition=JSON.parse(msgCondition);
}if(functionID===0){cRpt=jsonCondition.CONDITION_REPORT.DIAGNOSIS[0].RECORD_DATA;
}else{if(functionID===1){cRpt=jsonCondition.CONDITION_DATA;
}else{if(functionID===2){cRpt=jsonCondition.CONDITION_REPORT.PROBLEM[0].RECORD_DATA;
}else{if(functionID===3){cRpt=jsonCondition.DIAGNOSIS_REPLY;
}}}}if(functionID===1&&cRpt.PRIVILEGE_IND===0){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
alert(i18n.discernabu.consolproblem_o2.NO_ADD_CONDITION_MSG.replace("{0}",component.m_activeLabelDisplay));
CERN_CV_O2.updateCVMenu(compID);
return;
}if(functionID===3&&cRpt.SUCCESS_IND===0){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
alert(i18n.discernabu.consolproblem_o2.DIAGNOSIS_MODIFY_FAILURE);
CERN_CV_O2.updateCVMenu(compID);
return;
}if(jsonCondition&&cRpt.PRIVILEGE_IND===0){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
CERN_CV_O2.updateCVMenu(compID);
return;
}CERN_CV_O2.refreshConditions(compID);
},cvBuildClassificationMenu:function(compID,filterFlag){var component=MP_Util.GetCompObjById(compID);
var jqClassificationSpan=$("#cv2ClassFilterSpan"+compID);
if(jqClassificationSpan){jqClassificationSpan.remove();
}var classType="";
switch(filterFlag){case 0:classType=i18n.discernabu.consolproblem_o2.ALL;
break;
case 1:classType=i18n.discernabu.consolproblem_o2.MEDICAL_AND_PATIENT_STATED;
break;
}var jqClassificationSpan=$("<span/>");
var classInnerHTMLArr=[];
classInnerHTMLArr.push('<span class="cv2ClassFilterSpan" id="cv2ClassFilterSpan',compID,'">',classType,"&nbsp;",'<div class="mnu-selectWindow cv2-menu2 menu-hide" id="cv2ClassFilterMenu',compID,'">','<div class="mnu-labelbox">',classType,"</div>",'<div class="cv2-mnu-contentbox">','<div class="cv2-ClassOpt" id="mnuCV2ClassificationAll',compID,'">',i18n.discernabu.consolproblem_o2.ALL,"</div>",'<div class="cv2-ClassOpt" id="mnuCV2ClassificationPSMed',compID,'">',i18n.discernabu.consolproblem_o2.MEDICAL_AND_PATIENT_STATED,"</div></div></div></span>");
jqClassificationSpan.html(classInnerHTMLArr.join(""));
var jqSecClassificationTgl=$("#cv2"+compID).find(".cv2-ClassFilterLabel").first();
jqSecClassificationTgl.after(jqClassificationSpan);
jqClassificationSpan.click(function(e){if(component.m_nProcessing===0){var jqClassFilterMenu=$("#cv2ClassFilterMenu"+compID);
if(jqClassFilterMenu.hasClass("menu-hide")==true){jqClassFilterMenu.removeClass("menu-hide");
}var jqOptMenuCVClassDiv=$("#cv2ClassificationDiv"+compID);
var jqSpanElement=$("#cv2ClassFilterSpan"+compID);
var spanOffset=jqSpanElement.offset();
var optMenuOffset=jqOptMenuCVClassDiv.offset();
jqClassFilterMenu.offset({top:optMenuOffset.top,left:spanOffset.left});
}});
jqClassificationSpan.mouseover(function(e){if($(this).hasClass("cv2-mnu-border")==false){$(this).addClass("cv2-mnu-border");
}});
jqClassificationSpan.mouseout(function(e){if($(this).hasClass("cv2-mnu-border")==true){$(this).removeClass("cv2-mnu-border");
}});
var jqClassFilterMenu=$("#cv2ClassFilterMenu"+compID);
var menuRows=jqClassFilterMenu.find(".cv2-ClassOpt");
$.each(menuRows,function(){var item=$(this);
item.mousedown(function(e){CERN_CV_O2.cvHandleClassificationEvents(compID);
});
item.mouseenter(function(e){item.addClass("cv2-mnu-hover-over");
});
item.mouseleave(function(e){item.removeClass("cv2-mnu-hover-over");
});
});
CERN_CV_O2.closeMenuInit(compID,jqClassFilterMenu);
},cvHandleClassificationEvents:function(compID){function checkReady(){if(xhr.readyState===4){if(xhr.status===200){MP_Util.LogScriptCallInfo(MP_Util.GetCompObjById(compID),this,"consolidatedproblems.js","cvHandleClassificationEvents");
CERN_CV_O2.refreshConditions(compID);
}else{CERN_CV_O2.processingUI(component,"cv2Processing"+compID,-1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount--;
alert(i18n.discernabu.consolproblem_o2.FILTER_MSG);
}}}var component=MP_Util.GetCompObjById(compID);
var oEvent=window.event;
var oTarget=oEvent.target||oEvent.srcElement;
var paramString="";
if(oEvent.type=="mousedown"){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
component.m_nRefreshCount++;
var selValue="0";
if(oTarget.id=="mnuCV2ClassificationAll"+compID){selValue="0";
}else{if(oTarget.id=="mnuCV2ClassificationPSMed"+compID){selValue="1";
}}switch(selValue){case"0":paramString="^MINE^, "+component.m_compObject.criterion.provider_id+",^NPM_CLASS_VIEW_FILTER^,^0^";
break;
case"1":paramString="^MINE^, "+component.m_compObject.criterion.provider_id+",^NPM_CLASS_VIEW_FILTER^,^1^";
break;
}var xhr=(CERN_BrowserDevInd)?new XMLHttpRequest():new XMLCclRequest();
xhr.onreadystatechange=checkReady;
if(CERN_BrowserDevInd){var url="MP_MAINTAIN_USER_PREFS?parameters="+paramString;
xhr.open("GET",url,true);
xhr.send(null);
}else{xhr.open("GET","mp_maintain_user_prefs",true);
xhr.send(paramString);
}}},isNKP:function(nomen_Id,component){var nomenArray=component.nkpNomenArray;
for(var i=0,l=nomenArray.length;
i<l;
i++){var nomenclatureId=nomenArray[i];
if(nomenclatureId==nomen_Id){return true;
}}return false;
},addNKAP:function(component){var compID=component.m_compObject.cvCompId;
var bActiveInactiveConditionExist=component.nNKPActiveInactiveProbExist;
if(bActiveInactiveConditionExist==false){CERN_CV_O2.processingUI(component,"cv2Processing"+compID,1,true,CERN_CV_O2.updateCVActions,compID);
if(component.nkpProblemId>0){var dProblemId=parseFloat(component.nkpProblemId);
var paramString="^MINE^,"+dProblemId.toFixed(1)+","+component.m_compObject.criterion.provider_id.toFixed(1)+","+component.m_compObject.criterion.ppr_cd.toFixed(1)+","+1+","+0+","+0;
CERN_CV_O2.loadWithCBParameters("mp_modify_problem",CERN_CV_O2.cvRefresh,"cv2",paramString,compID);
}else{var dProbNomenID=parseFloat(component.nkpNomenclatureId);
var paramString="^MINE^,"+component.m_compObject.criterion.person_id.toFixed(1)+","+component.m_compObject.criterion.encntr_id.toFixed(1)+","+component.m_compObject.criterion.provider_id.toFixed(1)+","+component.m_compObject.criterion.position_cd.toFixed(1)+","+component.m_compObject.criterion.ppr_cd.toFixed(1)+","+2+","+0+","+dProbNomenID.toFixed(1)+","+dProbNomenID.toFixed(1)+","+1+","+0+","+0+","+0+","+0+","+0+","+0+","+0+",''";
CERN_CV_O2.loadWithCBParameters("mp_add_condition",CERN_CV_O2.cvAddLoad,"cv2",paramString,compID);
}}else{alert(i18n.discernabu.consolproblem_o2.NO_ADD_CONDITION_NKP_MSG);
}},closeMenuInit:function(compID,inMenu){$(inMenu).mouseleave(function(){$(this).addClass("menu-hide");
});
}};
}();
