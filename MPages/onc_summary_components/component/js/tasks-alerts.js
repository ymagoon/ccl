function TasksAlertsComponentStyle(){this.initByNamespace("tal");
}TasksAlertsComponentStyle.inherits(ComponentStyle);
function TasksAlertsComponent(criterion){this.setCriterion(criterion);
this.setStyles(new TasksAlertsComponentStyle());
this.setComponentLoadTimerName("USR:MPG.TASKS_ALERTS - load component");
this.setComponentRenderTimerName("ENG:MPG.TASKS_ALERTS - render component");
this.setIncludeLineNumber(true);
this.setScope(1);
var processedOrders=null;
var processedOrdersWOTasks=null;
var alertDuration=24;
var orderAlertsSynonym=[];
var orderAlertsWOTasksSynonym=[];
var discernAlerts=[];
var taskHyperlink="";
var medicalAdministrationEvents=[];
var medicalAdministartionEventCount=[];
var generalLabEvents=[];
var generalLabEventsLower=[];
var generalLabEventsHigher=[];
function OrderAlertDetail(component,orderDetail,orderDate,stopDate){this.orderDetails=orderDetail;
this.orderDate=component.getLocalizedDate(orderDate);
if(stopDate){this.projectedStopDate=component.getLocalizedDate(stopDate);
}else{this.projectedStopDate=stopDate;
}}function OrderAlert(component,orderArray,isWithoutTasks){if(orderArray.length>0){if(isWithoutTasks==true){this.orderCatalogCode=orderArray[0].ORDERWOCV;
this.orderDisplayName=orderArray[0].ORDERWODISP;
this.orderInfo=[];
this.isWithoutTasks=true;
for(var index=0;
index<orderArray.length;
index++){this.orderInfo.push(new OrderAlertDetail(component,orderArray[index].ORDERWOCLINDISP,orderArray[index].ORDERWODTDISP,null));
}}else{this.orderCatalogCode=orderArray[0].ORDERCV;
this.orderDisplayName=orderArray[0].ORDERDISP;
this.orderInfo=[];
this.isWithoutTasks=false;
for(var index=0;
index<orderArray.length;
index++){this.orderInfo.push(new OrderAlertDetail(component,orderArray[index].ORDERCLINDISP,orderArray[index].ORDERDTDISP,orderArray[index].ORDERSTOPDTDISP));
}}}}function processOrderAlerts(component,recordData){if(processedOrders!=null){return processedOrders;
}processedOrders=[];
if(recordData&&recordData.ORDERCNT>0){var relatedOrdersByCatalog=[];
var previousOrderCatalog=0;
var currentOrderCatalog=0;
for(var index=0,length=recordData.ORDERCNT;
index<length;
index++){previousOrderCatalog=currentOrderCatalog;
currentOrderCatalog=recordData.ORDERQUAL[index].ORDERCV;
if(previousOrderCatalog!=0&&previousOrderCatalog!=currentOrderCatalog){processedOrders.push(new OrderAlert(component,relatedOrdersByCatalog,false));
relatedOrdersByCatalog=[];
}relatedOrdersByCatalog.push(recordData.ORDERQUAL[index]);
}if(relatedOrdersByCatalog.length>0){processedOrders.push(new OrderAlert(component,relatedOrdersByCatalog,false));
}}}function processOrderAlertsWOTasks(component,recordData){if(processedOrdersWOTasks!=null){return processedOrdersWOTasks;
}processedOrdersWOTasks=[];
if(recordData&&recordData.ORDERWOCNT>0){var relatedOrdersByCatalog=[];
for(var index=0,length=recordData.ORDERWOCNT;
index<length;
index++){relatedOrdersByCatalog.push(recordData.ORDERWOQUAL[index]);
processedOrdersWOTasks.push(new OrderAlert(component,relatedOrdersByCatalog,true));
relatedOrdersByCatalog.pop();
}}}function displayDiscernAlerts(recordData,htmlContainer){var discernAlertsCount=recordData.ALERTEXISTCNT;
var htmlString="";
for(var index=0;
index<discernAlertsCount;
index++){htmlString+="<tr><td><span title='"+recordData.ALERTEXISTQUAL[index].ALERTEXISTLINKADDRESS+"'>"+recordData.ALERTEXISTQUAL[index].ALERTEXISTLINKADDRESS+"</span></td>";
htmlString+="<td><span title='"+recordData.ALERTEXISTQUAL[index].ALERTEXISTDISPLAYNAME+"'>"+recordData.ALERTEXISTQUAL[index].ALERTEXISTDISPLAYNAME+"</span></td></tr>";
}htmlContainer.push(htmlString);
}function displayOrderAlerts(component,recordData,orderAlerts,talI18n,htmlContainer){var infoRecordsCount=0;
var htmlString="";
var criterion=component.getCriterion();
for(var index=0,length=orderAlerts.length;
index<length;
index++){htmlString+="<tr><td>";
var currentAlert=orderAlerts[index];
if(currentAlert.isWithoutTasks||component.getTaskHyperlink()==""){htmlString+="<span title='"+currentAlert.orderDisplayName+"'>"+currentAlert.orderDisplayName+"</span>";
}else{htmlString+='<a title="'+talI18n.LINK_MSG+'"class="tal-linktext" ';
htmlString+="href=\"javascript: APPLINK(100,'powerchart.exe','/PERSONID="+criterion.person_id+" /ENCNTRID="+criterion.encntr_id+" /FIRSTTAB=^"+component.getTaskHyperlink()+"^');\">";
htmlString+=currentAlert.orderDisplayName;
htmlString+="</a>";
}htmlString+="</td><td><span title='"+currentAlert.orderInfo[0].orderDetails+"'>";
infoRecordsCount=currentAlert.orderInfo.length;
htmlString+=currentAlert.orderInfo[0].orderDetails;
if(currentAlert.isWithoutTasks==false){for(var infoIndex=1;
infoIndex<infoRecordsCount;
infoIndex++){if(currentAlert.orderInfo[infoIndex].projectedStopDate!==""){htmlString+="<br/><span title='"+currentAlert.orderInfo[infoIndex].projectedStopDate+"'>"+currentAlert.orderInfo[infoIndex].projectedStopDate+"</span>";
}}}htmlString+="</span></td></tr>";
}htmlContainer.push(htmlString);
}function displayMedAdministrationEvents(component,recordData,htmlContainer){var medAdminEventsCount=recordData.MEDADMINCNT;
var htmlString="";
for(var index=0;
index<medAdminEventsCount;
index++){var currentEvent=recordData.MEDADMINQUAL[index];
htmlString+="<tr><td><span title='"+currentEvent.MEDADMINDISP+"'>"+currentEvent.MEDADMINDISP+"</span></td>";
var roundedValue=component.getLocalizedNumber(currentEvent.MEDADMINVALUE);
var dateString=component.getLocalizedDate(currentEvent.MEDADMINDT);
htmlString+="<td><span title='"+roundedValue+" "+currentEvent.MEDADMINUNIT+" "+dateString+"'>";
htmlString+=roundedValue+" "+currentEvent.MEDADMINUNIT+" "+dateString;
htmlString+="</span></td></tr>";
}htmlContainer.push(htmlString);
}function displayLabEvents(component,recordData,htmlContainer){var labEventsCount=recordData.LABEVENTCNT;
var htmlString="";
for(var index=0;
index<labEventsCount;
index++){var currentEvent=recordData.LABEVENTQUAL[index];
htmlString+="<tr><td><span title='"+currentEvent.LABEVENTDISP+"'>"+currentEvent.LABEVENTDISP+"</span></td>";
var roundedValue=component.getLocalizedNumber(currentEvent.LABEVENTVALUE);
var dateString=component.getLocalizedDate(currentEvent.LABEVENTDT);
htmlString+="<td><span title='"+roundedValue+" "+currentEvent.LABEVENTUNIT+" "+dateString+"'>";
htmlString+=roundedValue+" "+currentEvent.LABEVENTUNIT+" "+dateString;
htmlString+="</span></td></tr>";
}htmlContainer.push(htmlString);
}function getOperator(qualifierFlag){var operator="";
switch(qualifierFlag){case 1:operator="=";
break;
case 2:operator="!=";
break;
case 3:operator=">";
break;
case 4:operator="<";
break;
case 5:operator=">=";
break;
case 6:operator="<=";
break;
}return operator;
}this.getTotalRecords=function(data){var totalRecordsCount=0;
if(data){processOrderAlerts(this,data);
processOrderAlertsWOTasks(this,data);
totalRecordsCount=parseInt(data.ALERTEXISTCNT,10)+(processedOrders!=null?processedOrders.length:0)+parseInt(data.ORDERWOCNT,10)+parseInt(data.MEDADMINCNT,10)+parseInt(data.LABEVENTCNT,10);
}return totalRecordsCount;
};
this.setAlertDuration=function(duration){if(duration&&duration.length>0){alertDuration=duration[0];
}};
this.getAlertDuration=function(){return alertDuration;
};
this.setOrderAlertsSynonym=function(alertsSynonym){orderAlertsSynonym=alertsSynonym;
};
this.getOrderAlertsSynonym=function(){return orderAlertsSynonym;
};
this.setOrderAlertsSynonymWOTasks=function(alertsSynonym){orderAlertsWOTasksSynonym=alertsSynonym;
};
this.getOrderAlertsSynonymWOTasks=function(){return orderAlertsWOTasksSynonym;
};
this.setDiscernAlerts=function(alerts){var alertsCount=alerts.length;
discernAlerts=[];
for(var alertIndex=0;
alertIndex<alertsCount;
alertIndex++){discernAlerts.push($.trim(alerts[alertIndex]));
}};
this.getDiscernAlerts=function(){var alertsMap=[];
var discernAlertsLength=discernAlerts.length;
for(var alertIndex=0;
alertIndex<discernAlertsLength;
alertIndex+=2){var alertObj={link_address:discernAlerts[alertIndex],display_name:discernAlerts[alertIndex+1]};
alertsMap.push(alertObj);
}return alertsMap;
};
this.setMedicalAdministrationEvents=function(medAdminEvents){var medAdminEventsLength=medAdminEvents.length;
medicalAdministrationEvents=[];
for(var index=0;
index<medAdminEventsLength;
index++){medicalAdministrationEvents.push({event_cd:medAdminEvents[index].id.toFixed(1),seq_no:medAdminEvents[index].seq});
}};
this.getMedicalAdministrationEvents=function(){return medicalAdministrationEvents;
};
this.setMedicalAdministrationEventsCount=function(medAdminEventsCount){var currentValue=null;
var medAdminEventsLength=medAdminEventsCount.VALS.length;
for(var index=0;
index<medAdminEventsLength;
index++){currentValue=medAdminEventsCount.VALS[index];
medicalAdministartionEventCount.push({seq_no:currentValue.V_SQ,ftxt:currentValue.FTXT,operator:getOperator(currentValue.Q_FLG)});
}};
this.getMedicalAdministrationEventCount=function(){return medicalAdministartionEventCount;
};
this.setGeneralLabEvents=function(labEvents){var labEventsLength=labEvents.length;
generalLabEvents=[];
for(var index=0;
index<labEventsLength;
index++){generalLabEvents.push({event_cd:labEvents[index].id.toFixed(1),seq_no:labEvents[index].seq});
}};
this.getGeneralLabEvents=function(){return generalLabEvents;
};
this.setGeneralLabEventsLower=function(labEventsLower){var labEventsLowerLength=labEventsLower.VALS.length;
generalLabEventsLower=[];
for(var index=0;
index<labEventsLowerLength;
index++){currentValue=labEventsLower.VALS[index];
generalLabEventsLower.push({seq_no:currentValue.V_SQ,ftxt:currentValue.FTXT,operator:getOperator(currentValue.Q_FLG)});
}};
this.getGeneralLabEventsLower=function(){return generalLabEventsLower;
};
this.setGeneralLabEventsHigher=function(labEventsHigher){var labEventsHigherLength=labEventsHigher.VALS.length;
generalLabEventsHigher=[];
for(var index=0;
index<labEventsHigherLength;
index++){currentValue=labEventsHigher.VALS[index];
generalLabEventsHigher.push({seq_no:currentValue.V_SQ,ftxt:currentValue.FTXT,operator:getOperator(currentValue.Q_FLG)});
}};
this.getGeneralLabEventsHigher=function(){return generalLabEventsHigher;
};
this.setTaskHyperlink=function(hyperlinkName){taskHyperlink=$.trim(hyperlinkName);
};
this.getTaskHyperlink=function(){return taskHyperlink;
};
this.displayData=function(recordData,talI18n){var htmlContainer=[];
totalRecords=this.getTotalRecords(recordData);
htmlContainer.push('<div class="tal-lookback"><span>'+talI18n.LOOKBACK_MSG_PART1+" </span>");
htmlContainer.push("<span>"+parseFloat(this.getAlertDuration())+" </span>");
htmlContainer.push("<span>"+talI18n.LOOKBACK_MSG_PART2+"</span></div>");
htmlContainer.push('<div class="content-body">');
if(totalRecords==0){htmlContainer.push("<span class='res-none'>"+talI18n.NO_RECORDS_MSG+"</span>");
}else{var htmlString='<table id="talTableHeader'+this.getComponentId()+'" cellpadding="0" cellspacing="0" class="tal-tableheader">';
htmlString+='<colgroup><col><col></colgroup><tbody><tr class="hdr">';
htmlString+="<th>"+talI18n.ALERTS_HEADER+"</th>";
htmlString+="<th>"+talI18n.DETAILS_HEADER+"</th>";
htmlString+="</tr></tbody></table>";
htmlString+='<div id="talScrollableContent'+this.getComponentId()+'" class="tal-scrollable-content">';
htmlString+='<table cellpadding="0" cellspacing="0" class="tal-datatable"><colgroup><col><col></colgroup><tbody>';
htmlContainer.push(htmlString);
displayDiscernAlerts(recordData,htmlContainer);
processOrderAlerts(this,recordData);
processOrderAlertsWOTasks(this,recordData);
displayOrderAlerts(this,recordData,processedOrders,talI18n,htmlContainer);
displayOrderAlerts(this,recordData,processedOrdersWOTasks,talI18n,htmlContainer);
displayMedAdministrationEvents(this,recordData,htmlContainer);
displayLabEvents(this,recordData,htmlContainer);
htmlContainer.push("</tbody></table></div>");
}htmlContainer.push("</div>");
return htmlContainer;
};
}TasksAlertsComponent.prototype=new MPageComponent();
TasksAlertsComponent.prototype.constructor=MPageComponent;
TasksAlertsComponent.prototype.loadFilterMappings=function(){this.addFilterMappingObject("ALERTS_DURATION",{setFunction:this.setAlertDuration,type:"ARRAY",field:"FREETEXT_DESC"});
this.addFilterMappingObject("DISCERN_ALERTS",{setFunction:this.setDiscernAlerts,type:"ARRAY",field:"FREETEXT_DESC"});
this.addFilterMappingObject("ORDER_ALERTS_SYN",{setFunction:this.setOrderAlertsSynonym,type:"ARRAY",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("ORDER_ALERTS_WO_TASK_SYN",{setFunction:this.setOrderAlertsSynonymWOTasks,type:"ARRAY",field:"PARENT_ENTITY_ID"});
this.addFilterMappingObject("TASK_HYPERLINK_NAME",{setFunction:this.setTaskHyperlink,type:"ARRAY",field:"FREETEXT_DESC"});
this.addFilterMappingObject("MED_ADM_EVENTS",{setFunction:this.setMedicalAdministrationEvents,type:"ARRAY",field:"VALUE_SEQ"});
this.addFilterMappingObject("MED_ADM_EVENTS_CNT",{setFunction:this.setMedicalAdministrationEventsCount,type:"CUSTOM",field:"ALL"});
this.addFilterMappingObject("GEN_LAB_EVENTS",{setFunction:this.setGeneralLabEvents,type:"ARRAY",field:"VALUE_SEQ"});
this.addFilterMappingObject("GEN_LAB_EVENTS_LOWER",{setFunction:this.setGeneralLabEventsLower,type:"CUSTOM",field:"ALL"});
this.addFilterMappingObject("GEN_LAB_EVENTS_UPPER",{setFunction:this.setGeneralLabEventsHigher,type:"CUSTOM",field:"ALL"});
};
TasksAlertsComponent.prototype.activateScrolling=function(totalRecords,scrollingThreshold){if(scrollingThreshold>0&&totalRecords>scrollingThreshold){var scrollableDiv=$("#talScrollableContent"+this.getComponentId());
var dataTable=scrollableDiv.find("table.tal-datatable");
if(dataTable.length>0){var rowCount=0;
var height=0;
dataTable.find("tr").each(function(){if(rowCount<scrollingThreshold){rowCount++;
height+=$(this).height();
}});
scrollableDiv.height(height);
scrollableDiv.css("overflow-y","auto");
var headerColWidth=$("#talTableHeader"+this.getComponentId()+" tr th").eq(1).width();
var dataColumns=dataTable.find("tr").find("td").filter(":odd");
var dataColWidth=dataColumns.first().width();
var padding=(headerColWidth-dataColWidth);
dataColumns.find("span").css("padding-left",padding+"px");
}}};
TasksAlertsComponent.prototype.getLocalizedDate=function(utcDate){var dateString="";
try{if(utcDate){var dateTime=new Date();
dateTime.setISO8601(utcDate);
dateString=MP_Util.DisplayDateByOption(this,dateTime);
}}catch(err){MP_Util.LogJSError(this,err,"tasks-alerts.js","getLocalizedDate");
throw (err);
}return dateString;
};
TasksAlertsComponent.prototype.getLocalizedNumber=function(numberToFormat){var formattedNumber=null;
var numberFormatter=new mp_formatter.NumericFormatter(MPAGE_LOCALE);
try{if(mp_formatter._isNumber(numberToFormat)){var tempNumber=parseFloat(numberToFormat);
formattedNumber=Math.round(tempNumber*100)/100;
formattedNumber=numberFormatter.format(formattedNumber.toString(),"."+MP_Util.CalculatePrecision(formattedNumber));
}else{formattedNumber=numberToFormat;
}}catch(err){MP_Util.LogJSError(this,err,"tasks-alerts.js","getLocalizedNumber");
throw (err);
}return formattedNumber;
};
TasksAlertsComponent.prototype.retrieveComponentData=function(){var request=null;
var sendAr=null;
var self=this;
var bedrockFilters=null;
try{var criterion=this.getCriterion();
sendAr=["^MINE^","^MP_RPH_SUMMARY^",criterion.person_id+".0",criterion.encntr_id+".0",this.getAlertDuration(),MP_Util.CreateParamArray(this.getOrderAlertsSynonym(),1),MP_Util.CreateParamArray(this.getOrderAlertsSynonymWOTasks(),1)];
request=new MP_Core.ScriptRequest(this,this.getComponentLoadTimerName());
request.setProgramName("dc_mp_getAlertTask");
request.setParameters(sendAr);
bedrockFilters={FILTERS_REC:{ALERT:this.getDiscernAlerts(),LAB_EVENTS:this.getGeneralLabEvents(),LAB_EVENTS_LOWER:this.getGeneralLabEventsLower(),LAB_EVENTS_HIGHER:this.getGeneralLabEventsHigher(),MED_ADMIN_EVENT:this.getMedicalAdministrationEvents(),MED_ADMIN_EVENT_CNT:this.getMedicalAdministrationEventCount()}};
request.setRequestBlobIn(JSON.stringify(bedrockFilters));
request.setAsync(true);
MP_Core.XMLCCLRequestCallBack(this,request,function(reply){self.renderComponent(reply);
});
}catch(err){alert(err);
MP_Util.LogJSError(this,err,"tasks-alerts.js","retrieveComponentData");
throw (err);
}};
TasksAlertsComponent.prototype.renderComponent=function(reply){var totalRecords=0;
var errMsg=[];
var recordData=null;
var timerRenderComponent=null;
var replyStatus="";
var isScrollableHeader=false;
var talI18n=i18n.discernabu.tasks_alerts_o1;
try{timerRenderComponent=MP_Util.CreateTimer(this.getComponentRenderTimerName());
replyStatus=reply.getStatus();
if(replyStatus!=="S"){if(replyStatus=="F"){errMsg.push(reply.getError());
this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(),errMsg.join("<br />")),"");
}else{this.finalizeComponent(MP_Util.HandleNoDataResponse(this.getStyles().getNameSpace()),"(0)");
}return;
}recordData=reply.getResponse();
totalRecords=this.getTotalRecords(recordData);
htmlContainer=this.displayData(recordData,talI18n);
this.finalizeComponent(htmlContainer.join(""),totalRecords.toString());
this.activateScrolling(totalRecords,this.getScrollNumber());
}catch(err){if(timerRenderComponent){timerRenderComponent.Abort();
timerRenderComponent=null;
}MP_Util.LogJSError(this,err,"tasks-alerts.js","renderComponent");
throw (err);
}finally{if(timerRenderComponent){timerRenderComponent.Stop();
}}};
MP_Util.setObjectDefinitionMapping("RPHS_CLIN_ALERTS",TasksAlertsComponent);
