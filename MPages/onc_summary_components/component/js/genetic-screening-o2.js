function GeneticScreeningWFStyle(){this.initByNamespace("genscr-wf");
}GeneticScreeningWFStyle.inherits(ComponentStyle);
function GeneticScreeningWF(criterion){this.setCriterion(criterion);
this.setStyles(new GeneticScreeningWFStyle());
this.setComponentLoadTimerName("USR:MPG.GENETICSCREENING.O2 - load component");
this.setComponentRenderTimerName("ENG:MPG.GENETICSCREENING.O2 - render component");
this.setIncludeLineNumber(true);
this.geneticPowerFormId=0;
this.setResourceRequired(true);
CERN_EventListener.addListener(this,EventListener.EVENT_CLINICAL_EVENT,this.retrieveComponentData,this);
CERN_EventListener.addListener(this,"pregnancyInfoAvailable",this.retrieveComponentData,this);
}GeneticScreeningWF.prototype=new MPageComponent();
GeneticScreeningWF.prototype.constructor=MPageComponent;
MP_Util.setObjectDefinitionMapping("WF_PREG_GENETIC_SCR",GeneticScreeningWF);
GeneticScreeningWF.prototype.RetrieveRequiredResources=function(){var pregInfoSR=MP_Resources.getSharedResource("pregnancyInfo");
if(pregInfoSR&&pregInfoSR.isResourceAvailable()){this.retrieveComponentData();
}else{PREGNANCY_BASE_UTIL_O1.LoadPregnancyData(this.getCriterion());
}};
GeneticScreeningWF.prototype.setSelectedPowerform=function(powerFormId){this.geneticPowerFormId=powerFormId;
};
GeneticScreeningWF.prototype.getSelectedPowerform=function(){return this.geneticPowerFormId;
};
GeneticScreeningWF.prototype.openTab=function(){if(this.getSelectedPowerform()>0){var criterion=this.getCriterion();
var param=criterion.person_id+"|"+criterion.encntr_id+"|"+this.getSelectedPowerform()+"|0|0";
MP_Util.LogMpagesEventInfo(this,"POWERFORM",param,"genetic-screening-o2.js","openDropDown");
MPAGES_EVENT("POWERFORM",param);
this.retrieveComponentData();
}};
GeneticScreeningWF.prototype.loadFilterMappings=function(){this.addFilterMappingObject("WF_PREG_GENETIC_SCR_PF",{setFunction:this.setSelectedPowerform,type:"NUMBER",field:"PARENT_ENTITY_ID"});
};
GeneticScreeningWF.prototype.retrieveComponentData=function(){var component=this;
var sendAr=[];
var criterion=component.getCriterion();
var encntrs=criterion.getPersonnelInfo().getViewableEncounters();
var sEncntr=(encntrs)?"value("+encntrs+")":"0";
var groups=null;
var countText="";
var i18nGeneticScreening=i18n.discernabu.genetic_screening_o2;
var pregInfoSR=MP_Resources.getSharedResource("pregnancyInfo");
var pregInfoObj=null;
var pregnancyId=0;
var patientGenderInfo=criterion.getPatientInfo().getSex();
if(patientGenderInfo===null||patientGenderInfo.meaning===null||patientGenderInfo.meaning!=="FEMALE"){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+i18nGeneticScreening.NOT_FEMALE+"</span></h3><span class='res-none'>"+i18nGeneticScreening.NOT_FEMALE+"</span>";
component.finalizeComponent(messageHTML,countText);
return;
}else{if(pregInfoSR&&pregInfoSR.isResourceAvailable()){pregInfoObj=pregInfoSR.getResourceData();
pregnancyId=pregInfoObj.getPregnancyId();
if(pregnancyId===-1){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+i18nGeneticScreening.PREG_DATA_ERROR+"</span></h3><span class='res-none'>"+i18nGeneticScreening.PREG_DATA_ERROR+"</span>";
component.finalizeComponent(messageHTML,countText);
return;
}else{if(!pregnancyId){messageHTML="<h3 class='info-hd'><span class='res-normal'>"+i18nGeneticScreening.NO_ACTIVE_PREG+"</span></h3><span class='res-none'>"+i18nGeneticScreening.NO_ACTIVE_PREG+"</span>";
component.finalizeComponent(messageHTML,countText);
return;
}else{groups=component.getGroups();
groupLength=(groups!==null)?groups.length:0;
var sEventSets="0.0";
var sEventCodes="0.0";
var sBeginDate="^^";
var sEndDate="^^";
var includeEventSetInfo=1;
var includeCommentInfo=1;
if(groups&&groupLength>0){for(var groupCount=0;
groupCount<groupLength;
groupCount++){var group=groups[groupCount];
if(group instanceof MPageEventSetGroup){sEventSets=MP_Util.CreateParamArray(group.getEventSets(),1);
}else{if(group instanceof MPageEventCodeGroup){sEventCodes=MP_Util.CreateParamArray(group.getEventCodes(),1);
}else{if(group instanceof MPageSequenceGroup){var mapItems=group.getMapItems();
sEventSets=MP_Util.CreateParamArray(MP_Util.GetValueFromArray("CODE_VALUE",mapItems),1);
}else{if(group instanceof MPageGrouper){var g=group.getGroups();
var ec=[];
for(var y=0,yl=g.length;
y<yl;
y++){if(g[y] instanceof MPageEventCodeGroup){ec=ec.concat(g[y].getEventCodes());
}}sEventCodes=MP_Util.CreateParamArray(ec,1);
}else{continue;
}}}}}sendAr.push("^MINE^",criterion.person_id+".0",sEncntr,criterion.provider_id+".0",criterion.ppr_cd+".0",1,"^^",sEventSets,sEventCodes,component.getLookbackUnits(),component.getLookbackUnitTypeFlag(),includeEventSetInfo,sBeginDate,sEndDate,includeCommentInfo);
MP_Core.XMLCclRequestWrapper(component,"MP_RETRIEVE_N_RESULTS_JSON",sendAr,true);
}}}}}};
GeneticScreeningWF.prototype.renderComponent=function(recordData){var timerRenderComponent=MP_Util.CreateTimer(this.getComponentRenderTimerName(),this.getCriterion().category_mean);
var component=this;
var compId=this.getComponentId();
var arrayGeneticScreen=[];
var geneticScreeningi18n=i18n.discernabu.genetic_screening_o2;
var geneticScreenHTML="";
var measureArray=[];
var codeArray=MP_Util.LoadCodeListJSON(recordData.CODES);
var personnelArray=MP_Util.LoadPersonelListJSON(recordData.PRSNL);
var results=recordData.RESULTS;
var resultLength=results.length;
for(var i=0;
i<resultLength;
i++){var result=results[i];
var clinicalEventLength=result.CLINICAL_EVENTS.length;
if(clinicalEventLength>0){for(var j=0;
j<clinicalEventLength;
j++){var measurementObject=result.CLINICAL_EVENTS[j];
var measurementLength=measurementObject.MEASUREMENTS.length;
for(var k=0;
k<measurementLength;
k++){var measurement=new MP_Core.Measurement();
measurement.initFromRec(measurementObject.MEASUREMENTS[k],codeArray);
measureArray.push(measurement);
}}}}var measCount=measureArray.length;
var criterion=this.getCriterion();
var slaTimer=MP_Util.CreateTimer("CAP:MPG.GENETICSCREENING.O2 - Rendering component");
if(slaTimer){slaTimer.SubtimerName=criterion.category_mean;
slaTimer.Stop();
}try{for(var rowCount=0;
rowCount<measCount;
rowCount++){var measObject=measureArray[rowCount];
var geneticScreeningEventName=measObject.getEventCode().display;
var familyMemberLink=MP_Util.Measurement.GetNormalcyResultDisplay(measObject);
var familyMemberString=MP_Util.Measurement.GetString(measObject,null,"longDateTime2",true);
var comments=measObject.getComment();
arrayGeneticScreen.push({GENETIC_DISORDER:geneticScreeningEventName,FAMILY_MEMBER:familyMemberLink,COMMENTS:comments,FAMILY_MEMBER_STRING:familyMemberString});
}var geneticScreeningTable=new ComponentTable();
geneticScreeningTable.setNamespace(this.getStyles().getNameSpace());
geneticScreeningTable.setZebraStripe(true);
var genticScreenColumn=new TableColumn();
genticScreenColumn.setColumnId("GenScreenName"+compId);
genticScreenColumn.setCustomClass("genscr-wf-table-header-column");
genticScreenColumn.setColumnDisplay(geneticScreeningi18n.GENETIC_SCREEN);
genticScreenColumn.setRenderTemplate("${GENETIC_DISORDER}");
var familyMemberColumn=new TableColumn();
familyMemberColumn.setColumnId("FamilyMember"+compId);
familyMemberColumn.setCustomClass("genscr-wf-table-header-column");
familyMemberColumn.setColumnDisplay(geneticScreeningi18n.FAMILY_MEMBER);
familyMemberColumn.setPrimarySortField("FAMILY_MEMBER_STRING");
familyMemberColumn.setIsSortable(true);
familyMemberColumn.setRenderTemplate("${FAMILY_MEMBER}");
var commentColumn=new TableColumn();
commentColumn.setColumnId("Comment"+compId);
commentColumn.setCustomClass("genscr-wf-table-header-column");
commentColumn.setColumnDisplay(geneticScreeningi18n.COMMENTS);
commentColumn.setRenderTemplate("${COMMENTS}");
geneticScreeningTable.addColumn(genticScreenColumn);
geneticScreeningTable.addColumn(familyMemberColumn);
geneticScreeningTable.addColumn(commentColumn);
geneticScreeningTable.bindData(arrayGeneticScreen);
geneticScreeningTable.sortByColumnInDirection("FamilyMember"+compId,TableColumn.SORT.ASCENDING);
this.setComponentTable(geneticScreeningTable);
geneticScreenHTML=geneticScreeningTable.render();
this.finalizeComponent(geneticScreenHTML,MP_Util.CreateTitleText(this,measCount));
}catch(err){MP_Util.LogJSError(err,this,"genetic-screening-o2.js","renderComponent");
if(timerRenderComponent){timerRenderComponent.Abort();
timerRenderComponent=null;
}throw (err);
}finally{if(timerRenderComponent){timerRenderComponent.Stop();
}}};
