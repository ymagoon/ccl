(function(){var pluginName="autosave";
var AUTOSAVE_IDLE_THRESHOLD=30*1000;
var getData=function(editorInstance){var contentData=null,placeholdertext=null,container=editorInstance.container.$,body=$(container).find(".cke_wysiwyg_div");
if(editorInstance.removePlaceHolderText){editorInstance.removePlaceHolderText();
}if(editorInstance.config.emitValidXhtml){contentData=editorInstance.getXhtml();
}else{contentData=editorInstance.getData();
}if(editorInstance.applyPlaceholderText){editorInstance.applyPlaceholderText();
}return contentData;
};
CKEDITOR.plugins.add(pluginName,{lang:["en","en_gb","de","fr","es"],init:function(editor){var savefunction=null,setDirtyFunction=null,resetDirtyFunction=null,saveButton=null;
var dirtyEventHandler=function(e){if(saveButton===null){return;
}if(editor.checkDirty()){if(saveButton.attr("disabled")!==undefined){saveButton.removeAttr("disabled");
if(setDirtyFunction){setDirtyFunction();
}}}else{if(saveButton.attr("disabled")===undefined){saveButton.attr("disabled","disabled");
if(resetDirtyFunction){resetDirtyFunction();
}}}};
if(editor.config.autosaveFunction){savefunction=editor.config.autosaveFunction;
}if(editor.config.setDirtyFunction){setDirtyFunction=editor.config.setDirtyFunction;
}if(editor.config.resetDirtyFunction){resetDirtyFunction=editor.config.resetDirtyFunction;
}editor.on("instanceReady",function(e){var editorInstance=e.editor,container=e.editor.container.$;
var lastActivityTime=0;
var timeoutId=0;
var pollingTimeout=null;
var editableContent=editorInstance.editable().$;
var POLL_INTERVAL=3000;
var placeHolderText=editorInstance.config.placeholderText;
function filterPlaceholder(ckeditorContent){return(ckeditorContent==='<span id="placeHolderText">'+placeHolderText+"</span>")?"<p></p>":ckeditorContent;
}var dataSinceLastActivity=filterPlaceholder(editableContent.innerHTML);
var activityHandler=function(e){if(lastActivityTime===0){timeoutId=window.setTimeout(autoSaveTimer,AUTOSAVE_IDLE_THRESHOLD*0.75);
}lastActivityTime=(new Date()).getTime();
};
var autoSaveTimer=function(e){if(lastActivityTime===0||!editorInstance.document){return;
}var hasSelectedText=false;
var isWithinEditor=false;
var isSafe=false;
try{var currentDocument=editorInstance.document.$;
var currentSelection=currentDocument.selection.createRange();
var editingArea=editorInstance.plugins.divarea?editorInstance.ui.space("contents").$:editorInstance.document.$.body;
var editingAreaRange=null;
if(currentSelection!==null){editingAreaRange=currentDocument.body.createTextRange();
editingAreaRange.moveToElementText(editingArea);
isWithinEditor=editingAreaRange.inRange(currentSelection);
hasSelectedText=currentSelection.text!==null&&currentSelection.text!=="";
}isSafe=!(!currentDocument.hasFocus()&&hasSelectedText&&isWithinEditor);
}catch(er){MP_Util.LogWarn("Assuming that it is not safe to auto save: "+er.message);
}if(isSafe&&(new Date()).getTime()-lastActivityTime>=AUTOSAVE_IDLE_THRESHOLD){lastActivityTime=0;
if(editorInstance.checkDirty()){editorInstance.save();
}}else{timeoutId=window.setTimeout(autoSaveTimer,1000);
}};
editorInstance.getAutosaveData=function(){return getData(editorInstance);
};
editorInstance.save=function(navCallBack){var contentData="";
contentData=getData(editorInstance);
savefunction(contentData,function(callbackStatus){var currentContent="";
saveButton=$("#"+container.id+" button.autosave.save");
if(callbackStatus=="S"){currentContent=getData(editorInstance);
if(currentContent===contentData){saveButton.attr("disabled","disabled");
e.editor.resetDirty();
if(resetDirtyFunction){resetDirtyFunction();
}}if(navCallBack){navCallBack("S");
}}else{if(navCallBack){navCallBack("F");
}}});
};
var editorTextArea=$(container).find(".cke_wysiwyg_div");
$(container).find(".cke_inner").append('<button class="autosave save" type="button" disabled="disabled" value="Save">'+(editor.lang.autosave.autosave.save_button)+"</button>");
saveButton=$("#"+container.id+" button.autosave.save");
$(saveButton).after('<div class="last-saved-text">&nbsp;</div>');
saveButton.click(function(){editorInstance.save();
});
editorTextArea.keyup(function(){window.setTimeout(dirtyEventHandler,0);
clearTimeout(pollingTimeout);
pollingTimeout=setTimeout(poll,POLL_INTERVAL);
});
editorTextArea.keyup(activityHandler);
editorInstance.on("spellCheckComplete",dirtyEventHandler);
editorInstance.on("saveSnapshot",activityHandler);
editorInstance.on("afterCommandExec",activityHandler);
editorInstance.on("destroy",function(){window.clearTimeout(timeoutId);
clearTimeout(pollingTimeout);
});
function checkActivity(){var ckeditorContent=filterPlaceholder(editableContent.innerHTML);
if(ckeditorContent.length!==dataSinceLastActivity.length||ckeditorContent!==dataSinceLastActivity){activityHandler();
dataSinceLastActivity=ckeditorContent;
}}function poll(){checkActivity();
dirtyEventHandler();
pollingTimeout=setTimeout(poll,POLL_INTERVAL);
}editorInstance.on("focus",function(){pollingTimeout=setTimeout(poll,POLL_INTERVAL);
});
editorInstance.on("blur",function(){checkActivity();
dirtyEventHandler();
clearTimeout(pollingTimeout);
});
});
editor.on("saveSnapshot",dirtyEventHandler);
editor.on("afterCommandExec",dirtyEventHandler);
}});
})();
