const fs = require("mz/fs");
const path = require("path");
const jsonFormat = require("json-format");

/**
 * 
 * @param {} args
 */
const configFilePath = (args) =>
    args.gaiaJson || path.join(process.cwd(), "gaia.json");

const privateConfigFilePath = (args) =>
    args.gaiaJson || path.join(process.cwd(), "gaia-private.json");

/**
 * Reads a plugin file and parses it as JSON
 * @param {*} file - file to read from
 * @returns {Promise} a resolved promise with the parsed file contents
 */
const readPluginFile = (file) =>
    fs
      .readFile(file)
      .then((contents) => Promise.resolve(JSON.parse(contents)))
      .catch(
          (err) =>
              err.message.indexOf("ENOENT") != -1 || err.code === "ENOENT"
              ? Promise.resolve({})
              : Promise.reject(err)
      );

/**
 * Reads the plugin configuration from a file
 * @param {*} file - file to read from
 * @param {*} args - command line arguments
 * @returns {Promise} promise to be resolved when the file is read
 */
const readConfig = (file, args) =>
    readPluginFile(file)
      .then(
          (contents) =>
              contents[args.plugin]
              ? Promise.resolve(contents[args.plugin])
              : Promise.resolve({})
      );

/**
 * Saves a plugin configuration to a file
 * @param {*} file - file to write to
 * @param {*} args - command line arguments
 * @returns {Promise} promise to be resolved when the file is written
 */
const writeConfig = (file, args) =>
    readPluginFile(file)
      .then((contents) => {
          contents[args.plugin] = args.config;
          return fs.writeFile(
              file,
              jsonFormat(contents, {
                  type: "space",
                  size: 4
              }));
      });

const read = (gaia, args) => readConfig(configFilePath(args), args);
const readPrivate = (gaia, args) => readConfig(privateConfigFilePath(args), args);
const write = (gaia, args) => writeConfig(configFilePath(args), args);
const writePrivate = (gaia, args) => writeConfig(privateConfigFilePath(args), args);

module.exports = {
    read,
    readPrivate,
    write,
    writePrivate
};
