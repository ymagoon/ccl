import UIComponent from "../../../base";
import classNames from "classnames";
import mediaQuery from "../../../base/MediaQuery";
import { addWindowResizeListener, removeWindowResizeListener } from "../../../helpers/dom/dom";
import {
    NAMESPACE,
    SMALL_SIZE,
    LARGE_SIZE,
    renderSmall,
    renderLarge
} from "./helpers";
import { demoBannerClassName } from "../../../helpers/const/classNames";
import i18n from "i18n";

const {
    dateOfBirth,
    deceased,
    gestationalAge,
    postMenstrualAge
} = i18n();

/**
 * @class DemographicsBanner
 */
class DemographicsBanner extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);

        this._handleResize = this._handleResize.bind(this);
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            age: "",
            applicationContent: null,
            dateOfBirth: "",
            dateOfBirthLabel: dateOfBirth,
            deceasedDate: "",
            deceasedDateLabel: deceased,
            gender: "",
            gestationalAge: "",
            gestationalAgeLabel: gestationalAge,
            identifiers: {},
            preventOverlap: true,
            missingDataDisplay: "--",
            personName: "",
            postMenstrualAge: "",
            postMenstrualAgeLabel: postMenstrualAge
        };
    }

    /**
     * @inheritDoc
     */
    initialState() {
        return {
            size: SMALL_SIZE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            applicationContent: (content) => {
                if (content && content.isUIComponent) {
                    this.replaceMappedChild("applicationContent", content);
                }
                else {
                    this.removeChild("applicationContent");
                }
            }
        };
    }

    /**
     * Handles the window resize event.
     * @private
     * @returns {undefined} Returns nothing.
     */
    _handleResize() {
        const newSize = mediaQuery.atLeast("SM") ? LARGE_SIZE : SMALL_SIZE;

        if (newSize !== this._state.size) {
            this.setState({
                size: newSize
            }).update();
        }
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped, { state }) {
        return el(
            "section",
            {
                class: classNames(NAMESPACE, {
                    "demographics-banner": true, /* This needs to remain for legacy compatibility */
                    [ demoBannerClassName ]: props.preventOverlap,
                    [ `${NAMESPACE}--deceased` ]: !!props.deceasedDate
                }),
                oncreate: () => {
                    addWindowResizeListener(this._handleResize);
                    this._handleResize();
                },
                onbeforeremove: () => {
                    removeWindowResizeListener(this._handleResize);
                }
            },
            state.size === SMALL_SIZE ? renderSmall(el, props) : renderLarge(el, props)
        );
    }
}

export default DemographicsBanner;
