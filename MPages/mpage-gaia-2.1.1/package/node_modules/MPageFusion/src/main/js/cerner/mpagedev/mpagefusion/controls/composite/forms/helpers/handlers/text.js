"use strict";

import i18nStrings from "i18n";

const i18n = i18nStrings();

// ------------------------------------------------------------------------------
// Form Control Standard Text Handlers
// ------------------------------------------------------------------------------

/**
 * A standard handler that displays the number of characters used and the limit e.g. "150/200"
 * @param {string} value - the form value
 * @param {function} el - function for rendering VDom
 * @param {object} props - the form control props
 * @returns {*} the rendered helper text
 */
export const characterCountHandler = (value, el, props) => {
    const { maxLength } = props;

    if (typeof maxLength !== "number") {
        return null;
    }

    const length = (typeof value === "string") ? value.length : 0;
    const characterLimitString = `${ length }/${ maxLength }`;

    return length > maxLength ?
        el("span", { class: "mpageui-u-text-error", style: "font-weight: bold" }, characterLimitString)
        : characterLimitString;
};

/**
 * This function escapes (some)special characters from a string.
 * @param {string} value - The string to be escaped.
 * @returns {string} The escaped string.
 */
export const escapeRegExp = (value) =>
    value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string

/**
 * A standard handler that displays an error message if the character count exceeds the limit
 * @param {string} value - the form value
 * @param {function} el - function for rendering VDom
 * @param {object} props - the form control props
 * @returns {*} the rendered error text
 */
export const maxLengthHandler = (value, el, props) => {
    const { maxLength } = props;
    if (typeof maxLength !== "number") {
        return null;
    }

    const length = (typeof value === "string") ? value.length : 0;

    return length > maxLength ?
        el("span", { class: "mpageui-u-text-error" }, i18n.characterLimitExceeded.replace("{0}", maxLength))
        : null;
};

/**
 * A standard helper for generating a handler that displays an error message if
 * the value does not match with a specified regular expression
 *
 * Example: Using /^[A-zÀ-ÿ0-9\s]*$/ would only allow letters, numbers, and whitespace.
 *
 * @param {RegExp} regex - a regular expression to test
 * @param {string} message - the message to display
 * @returns {function} - a function that given the form value will return the message if the
 *      value does not match the regular expression
 */
export const generatePatternMatchErrorHandler = (regex, message = "") =>
    (value) => {
        const str = (typeof value === "string") ? value : "";

        return regex.test(str) ? null : message;
    };
