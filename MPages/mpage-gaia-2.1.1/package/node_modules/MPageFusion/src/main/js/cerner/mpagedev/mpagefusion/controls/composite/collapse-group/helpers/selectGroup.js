"use strict";

import { ButtonGroup } from "../../select-group";

import { EVENTS as MAIN_EVENTS } from "../const";
import { isDefined } from "../../../../helpers/core/typeChecks";

/**
 * Enumeration for CollapseGroup select group events.
 * @type {{FACE_UP_SELECTION_CHANGE: string}}
 */
const EVENTS = {
    FACE_UP_SELECTION_CHANGE: "CollapseGroup::ButtonGroup::selectionChange"
};

/**
 * Creates the face-up version of the CollapseGroup select group item (which is a ButtonGroup).
 * @param {Object} item - The select group item.
 * @param {Object} state - The state of the select group item.
 * @returns {ButtonGroup} The ButtonGroup created from the item and its state.
 */
export const makeFaceUp = (item, state) => new ButtonGroup({
    _meta: { item },
    canDeselect: isDefined(item.canDeselect) ? item.canDeselect : true,
    multiSelect: isDefined(item.multiSelect) ? item.multiSelect : false,
    items: item.items.map((i) => ({
        id: i.id,
        isSelected: state.includes(i.id),
        display: i.display,
        size: item.size || "",
        type: item.style || "",
        disabled: i.disabled
    })),
    selectionChangeEventName: EVENTS.FACE_UP_SELECTION_CHANGE
});

/**
 * Creates the Menu item equivalent of the CollapseGroup select group item.
 * @param {Object} item - The select group item.
 * @param {Object} state - The state of the select group item.
 * @returns {Object} The Menu select group item.
 */
export const makeMenuItem = (item, state) => ({
    _meta: { item },
    selectGroup: item.items.map((i) => ({
        id: i.id,
        isSelected: state.includes(i.id),
        display: i.display
    })),
    canDeselect: isDefined(item.canDeselect) ? item.canDeselect : true,
    multiSelect: isDefined(item.multiSelect) ? item.multiSelect : false
});

/**
 * Small helper to make the event payload when a selection is made.
 * @param {string} id - The id of the item that changed selection.
 * @param {Object} payload - The selection payload.
 * @returns {{ id: string, selection: Object }} The event payload when the selection changes.
 */
const makePayload = (id, payload) => ({
    id,
    selection: payload
});

/**
 * Updates the state for select-group items. This works by inserting any new selections
 * and filtering out any deselections.
 * @param {String[]} state - Array of selected ids.
 * @param {String[]} deselections - Array of deselected ids.
 * @param {String[]} selections - Array of selected ids.
 * @returns {String[]} - New array of selected ids.
 */
const updateState = (state = [], { deselections = [], selections = [] }) => [
    ...state.filter((id) => !deselections.includes(id)),
    ...selections
];

/**
 * Binds the events for select group controls in the CollapseGroup.
 * @param {CollapseGroup} collapseGroup - The owner CollapseGroup which will listen for events from child
 * controls.
 * @returns {undefined} Returns nothing.
 */
export const bindEvents = (collapseGroup) => {
    // Face up
    collapseGroup.on(EVENTS.FACE_UP_SELECTION_CHANGE, (btnGroup, payload) => {
        collapseGroup.stopPropagation(EVENTS.FACE_UP_SELECTION_CHANGE);

        // State sync
        const meta = btnGroup.getProp("_meta");
        const item = meta.item;

        collapseGroup.setState({
            selectedIds: updateState(collapseGroup._state.selectedIds, { // eslint-disable-line no-underscore-dangle
                deselections: payload.changed.deselections,
                selections: payload.changed.selections
            })
        });

        collapseGroup.emit(
            item.selectionChangeEventName,
            collapseGroup,
            makePayload(item.id, payload)
        );
        collapseGroup.update();
    });

    // Menu item
    collapseGroup.on(MAIN_EVENTS.MENU_SELECTION_CHANGE, (menu, selection, payload, menuItem) => {
        collapseGroup.stopPropagation(MAIN_EVENTS.MENU_SELECTION_CHANGE);

        // State sync
        const meta = menuItem._meta; // eslint-disable-line no-underscore-dangle
        const item = meta.item;

        collapseGroup.setState({
            selectedIds: updateState(collapseGroup._state.selectedIds, { // eslint-disable-line no-underscore-dangle
                deselections: payload.changed.deselections,
                selections: payload.changed.selections
            })
        });

        collapseGroup.emit(
            item.selectionChangeEventName,
            collapseGroup,
            makePayload(item.id, payload)
        );
        collapseGroup.update();
    });
};
