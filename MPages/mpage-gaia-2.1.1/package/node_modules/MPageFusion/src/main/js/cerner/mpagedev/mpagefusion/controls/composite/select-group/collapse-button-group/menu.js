"use strict";

import MenuButton from "../../button/MenuButton";
import { NAMESPACE, EVENTS } from "./const";
import i18n from "i18n";

const { more } = i18n();

/**
 * Handles case where no items in the menu are selected. Will display the
 * i18n 'More' text.
 * @param {Array<Object>} items - Array of items in the menu that are selected.
 * @returns {string} The display value.
 */
const noItems = (items) =>
    (!items || !items.length) ? more : "";

/**
 * Handles case where a single item in the menu is selected. This will display
 * the display text of that single item.
 * @param {Array<Object>} items - Array of items in the menu that are selected.
 * @returns {string} The display value.
 */
const singleItem = (items) =>
    (items && items.length === 1) ? items[ 0 ].display : "";

/**
 * Handles case where multiple items in the menu are selected. This will
 * display the count and 'More' text.
 * @param {Array<Object>} items - Array of items in the menu that are selected.
 * @returns {string} The display value.
 */
const multiItem = (items) =>
    (items && items.length > 1) ? `${items.length} ${more}` : "";

/**
 * Based on the items that are selected within the menu, calculates the display
 * text for the menu button.
 * @param {Array<Object>} items - Array of items in the menu that are selected.
 * @returns {string} The display text of the menu button.
 */
const getMenuDisplay = (items) => (
    noItems(items) ||
    singleItem(items) ||
    multiItem(items)
);

/**
 * Updates the display of the menu button based on the selection of items
 * in the menu. If a single item in the menu is selected, the display is set
 * to the display of that item. If multiple items are selected, the number
 * of items + 'More' is displayed.
 * @param {UIComponent} menuButton - The MenuButton instance that will be
 * updated.
 * @param {Object} state - The state of the CollapseButtonGroup.
 * @param {Array<Object>} items - The array of items in the CollapseButtonGroup.
 * @returns {undefined} Returns nothing.
 */
const updateMenuDisplay = (menuButton, state, items) => {
    // Find items in the menu that are selected.
    const selectedInMenu = items.filter((item, i) =>
        state.selected.ids.includes(item.id) && i >= state.range
    );

    // Extract the display for the menu button.
    const display = getMenuDisplay(selectedInMenu);

    menuButton
        .setProp("display", display)
        .setProp("label", display)
        .setProp("isSelected", selectedInMenu.length > 0);
};

/**
 * Builds the menu items based on the state. Note, this always uses a single
 * select group item for the menu.
 * @param {Array<Object>} items - List of items for the menu.
 * @param {Object} state - The state of the CollapseButtonGroup.
 * @param {boolean} multiSelect - If the CollapseButtonGroup has multi-select
 * enabled.
 * @param {boolean} canDeselect - If the CollapseButtonGroup allows
 * deselection.
 * @returns {Array<Object>} A select group item for the menu.
 */
const makeMenuItems = (items, state, multiSelect, canDeselect) => [
    {
        selectGroup: items.slice(state.range, items.length).map((item) => ({
            id: item.id,
            isSelected: state.selected.ids.includes(item.id),
            display: item.display
        })),
        multiSelect,
        canDeselect
    }
];

/**
 * Creates the menu child for the CollapseButtonGroup.
 * @returns {MenuButton} The menu button child.
 */
const makeMenu = () =>
    new MenuButton({
        display: more,
        title: more,
        classNames: `${NAMESPACE}-menuButton`,
        selectionChangeEventName: EVENTS.MENU.SELECTION_CHANGE,
        toggleEventName: EVENTS.MENU.TOGGLE,
        content: []
    });

export {
    makeMenu,
    makeMenuItems,
    updateMenuDisplay
};
