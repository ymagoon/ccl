"use strict";
import UIComponent from "../../../base";
import Popup from "../popup/Popup";
import FolderTree from "./FolderTree";
import { forwardProp } from "../../../helpers/props/props";
import { isEmpty } from "../../../helpers/core/array";

const POPUP_OPEN = "FolderTreePop::Open";
/**
 * Gets the folder items from the folder tree child "List"
 * @param {Object} popupControl - Popup instance
 * @returns {Array} list of items within the tree
 */
const getFolderItems = (popupControl) => popupControl.getProp("content")[ 0 ].getChildren()[ 0 ].getProp("content");

/**
 * Recursively retrieves all the instances of SubTrees
 * @param {Array<UIComponent>} content array of UIComponents to iterate
 * @returns {Array<SubTree>} list of SubTrees
 */
const getSubTreeItems = (content) =>
    content ? content.reduce(
        (subTree, control) =>
            [
                ...subTree,
                control,
                ...getSubTreeItems(control.getProp("content"))
            ], []
    ) : [];

/**
 * A folder tree within popup.
 *
 * @class FolderTreePop
 */
class FolderTreePop extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            anchorControl: null,
            content: [],
            classNames: "",
            title: "",
            isOpen: false,
            showHeader: false,
            footerControl: null
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                popup: new Popup({
                    popupOpenEventName: POPUP_OPEN,
                    contentClassNames: `mpageui-FolderTreePop ${this.getProp("classNames") || ""}`,
                    content: [ new FolderTree() ]
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(POPUP_OPEN, (popupControl) => {
            const items = getFolderItems(popupControl);
            if (isEmpty(items)) {
                return;
            }
            getSubTreeItems(items).forEach((item) => {
                item.setProp("isExpanded", false).setProp("preventHideAnimation", true);
            });
            this.update();
        });
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            anchorControl: forwardProp(this, "anchorControl", "popup"),
            isOpen: forwardProp(this, "visible", "popup"),
            showHeader: forwardProp(this, "alwaysShowHeader", "popup"),
            title: forwardProp(this, "title", "popup"),
            content: (folderList) => this.getChild("popup").getProp("content")[ 0 ].setProp("content", folderList),
            footerControl: (footer) => footer ? this.getChild("popup").setProp("footerControl", footer) : null
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}
export default FolderTreePop;
