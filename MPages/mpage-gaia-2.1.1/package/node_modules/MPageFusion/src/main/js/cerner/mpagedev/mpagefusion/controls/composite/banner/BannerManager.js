/**
 * @fileoverview
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import BannerItem from "./BannerItem";
import Container from "../../atomic/container";
import { makeOrGetKey } from "../../../helpers/props/props";
import classNames from "classnames";

/**
 * Change the display mode of all the children to the provided display mode
 * @param {Array.<UIComponent>} children - Children for Banner manager
 * @param {BannerItem.DISPLAYMODE} displayMode - display mode for all the children
 * @returns {Array.<UIComponent>} Children with updated display types
 * @private
 */
const updateChildDisplayModes = (children, displayMode) =>
    children.map((child) => child.setProp("displayMode", displayMode));

/**
 * Change the display mode of all the banner items to the provided display mode
 * @param {Array.<UIComponent>} children - Children for Banner manager
 * @param {BannerItem.DISPLAYMODE} displayMode - display mode for all the children
 * @returns {Array.<UIComponent>} Children with updated display types
 * @private
 */
const updateAllBannerItemDisplayModes = (children, displayMode) =>
    children.forEach((child) => updateChildDisplayModes(child.getChildren(), displayMode));

/**
 * Sorts the children based on type and puts them into different category buckets.
 * @param {Array.<UIComponent>} children - Collection of children
 * @returns {Object.<string, Array>} Children categorised into type buckets
 * @private
 */
const categorizeChildrenByType = (children) => children.reduce((coll, child) => {
    const childType = child.getProp("type");

    if (!coll[ childType ]) {
        coll[ childType ] = [];
    }

    coll[ childType ].push({
        [ makeOrGetKey(child) ]: child
    });
    return coll;
}, {});

/**
 * Creates mapped children for each BannerItem.TYPE key. Use the Container to add
 * multiple child to the mapped child (based on types).
 * @param {Array.<UIComponent>} children - Collection of children
 * @returns {Array.<Object>} Collection of mapped children
 * @private
 */
const createMappedChildrenByType = (children) => {
    const categorizedChildren = categorizeChildrenByType(children);

    return BannerItem.getTypeByPriority()
        .reduce((coll, type) => {
            coll.push({
                [ type ]: new Container({}, categorizedChildren[ type ] || [])
            });

            return coll;
        }, []);
};

export default class BannerManager extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            defaultClassNames: "mpageui-BannerManager",
            classNames: "",
            title: "",
            items: [],
            itemDisplayMode: BannerItem.DISPLAYMODE.DEFAULT,
            addBannerEventName: BannerManager.EVENTNAMES.ADD,
            removeBannerEventName: BannerManager.EVENTNAMES.REMOVE
        };
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            itemDisplayMode: (displayMode) => {
                updateAllBannerItemDisplayModes(this.getChildren(), displayMode);
            },
            items: (newItems) => {
                this.replaceAllChildren(createMappedChildrenByType(newItems));
                updateAllBannerItemDisplayModes(this.getChildren(), this.getProp("itemDisplayMode"));
            }
        };
    }

    /**
     * Remove BannerItem based on the item key
     * @param {string} itemKey - BannerItem key
     * @returns {undefined}
     * @private
     */
    _removeBannerItemByKey(itemKey) {
        this.setProp("items", this.getProp("items").filter((item) => item.getProp("key") !== itemKey));
        this.update();
    }

    /**
     * Remove BannerItem from the child list
     * @param {BannerItem} itemObj - BannerItem Object to remove
     * @returns {undefined}
     * @private
     */
    _removeBannerItem(itemObj) {
        this.setProp("items", this.getProp("items").filter((item) => item !== itemObj));
        this.update();
    }

    /**
     * Add BannerItem to the child list
     * @param {BannerItem} itemObj - BannerItem Object to add
     * @returns {undefined}
     * @private
     */
    _addBannerItem(itemObj) {
        this.setProp("items", [ ...this.getProp("items"), itemObj ]);
        this.update();
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.on(BannerItem.EVENTNAMES.DISMISS, this._removeBannerItem.bind(this));
        this.onUpstream(this.getProp("addBannerEventName"), this._addBannerItem.bind(this));
        this.onUpstream(this.getProp("removeBannerEventName"), this._removeBannerItemByKey.bind(this));
    }

    /**
     * @inheritdoc
     */
    view(el, props) {
        return el(
            "div",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: props.classNames.length > 0
                })
            },
            this.renderChildren()
        );
    }
}

/**
 * Banner manager event names
 * @type {{ADD: string, REMOVE: string}}
 */
BannerManager.EVENTNAMES = {
    ADD: "BannerManager::addItem",
    REMOVE: "BannerManager::removeItem"
};
