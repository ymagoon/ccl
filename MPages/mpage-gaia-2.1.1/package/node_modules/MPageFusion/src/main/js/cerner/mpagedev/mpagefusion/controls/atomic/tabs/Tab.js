"use strict";

/* eslint no-underscore-dangle: ["error", { "allowAfterThis": true, "allow": ["_isDragging"] }] */

import UIComponent from "../../../base";
import classNames from "classnames";
import {
    isDraggingClassName
} from "../../../helpers/const/classNames";

/**
 * Tab orientation
 * @type {{HORIZONTAL: string, VERTICAL: string}}
 */
const TabOrientation = {
    HORIZONTAL: "horizontal",
    VERTICAL: "vertical"
};

/**
 * Tab events
 * @type {{CLICK: string, DRAG_START: string, DRAG_OVER: string, DRAG_END: string}}
 */
const TabEvents = {
    CLICK: "Tab::click",
    DRAG_START: "Tab::dragStart",
    DRAG_OVER: "Tab::dragOver",
    DRAG_END: "Tab::dragEnd"
};

/**
 * Renders the display (label) of the calling Tab.
 * @param {Function} el - A function for generating VDom.
 * @param {String} display - The display of the calling Tab.
 * @returns {VDom} Virtual element for the Tab display.
 */
const renderDisplay = (el, display) => display ? el("span", {}, display) : null;

/**
 * Renders the children of the calling Tab.
 * @param {Function} el - A function for generating VDom.
 * @param {Array<UIComponent>} children - The children of the calling Tab.
 * @returns {Array<VDom>} An array of virtual elements.
 */
const renderChildren = (el, children) => children.map((c) => c.render());

/**
 * Renders the contents of a single Tab.
 * @param {Function} el - A function for generating VDom.
 * @param {object} props - The props of the calling Tab.
 * @param {Array<UIComponent>} children - The children of the calling Tab.
 * @returns {Array<VDom>} An array of virtual elements.
 */
const renderTabContents = (el, props, children) =>
    props.displayPosition === "before"
        ? [
            renderDisplay(el, props.display),
            ...renderChildren(el, children)
        ]
        : [
            ...renderChildren(el, children),
            renderDisplay(el, props.display)
        ];

/**
 * The Tab class.
 * @class Tab
 */
class Tab extends UIComponent {
    /**
     * Constructor for the Tab class.
     * @param {Object} [props] - A set of props being injected into the Tab
     * instance.
     * @param {Array<UIComponent>} [children] - An array of children to be
     * added to the Tab instance.
     */
    constructor(props, children) {
        super(props, children);
        this._isDragging = false;
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            clickEventName: TabEvents.CLICK,
            content: [],
            defaultClassNames: "mpageui-Tab",
            display: "",
            title: "",
            displayPosition: "before",
            draggable: false,
            dragEndEventName: TabEvents.DRAG_END,
            dragOverEventName: TabEvents.DRAG_OVER,
            dragStartEventName: TabEvents.DRAG_START,
            id: "",
            isSelected: false,
            orientation: TabOrientation.HORIZONTAL
        };
    }

    /**
     * Handles the click event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleClick() {
        this.emit(this.getProp("clickEventName"), this);
    }

    /**
     * Handles the dragstart event.
     * @param {Event} event - The dragstart JavaScript event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleDragStart(event) {
        this._isDragging = true;
        this.emit(this.getProp("dragStartEventName"), this, event);
    }

    /**
     * Handles the dragend event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleDragEnd() {
        this._isDragging = false;
        this.emit(this.getProp("dragEndEventName"), this);
    }

    /**
     * Handles the dragover event. Deliberately NOT calling update which would
     * trigger a redraw (for performance reasons).
     * @param {Event} event - The dragover JavaScript event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleDragOver(event) {
        this.emit(this.getProp("dragOverEventName"), this, event);
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => (content && content.length) ? this.replaceAllChildren(content) : []
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "li",
            {
                key: props.id,
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: (props.classNames !== ""),
                    [ isDraggingClassName ]: this._isDragging
                }),
                title: props.title,
                draggable: props.draggable,
                onclick: this._handleClick.bind(this),
                ondragstart: this._handleDragStart.bind(this),
                ondragover: this._handleDragOver.bind(this),
                ondragend: this._handleDragEnd.bind(this),
                role: "tab",
                "aria-selected": String(props.isSelected)
            },
            renderTabContents(el, props, children));
    }
}

Tab.EVENTS = TabEvents;

export default Tab;
