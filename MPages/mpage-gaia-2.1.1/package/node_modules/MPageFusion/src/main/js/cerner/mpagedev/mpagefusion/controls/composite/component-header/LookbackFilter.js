"use strict";
import UIComponent from "../../../base/UIComponent";
import PopupList from "../popup-list";
import Button from "../../atomic/button";
import Label from "../../atomic/label";
import Container from "../../atomic/container";
import LookbackIcon from "../../atomic/icon/svg/category/content/Lookback";
import ResponsiveButtonGroup from "../responsive-button-group/ResponsiveButtonGroup";
import { unselectAllItems } from "../../../helpers/core/object";

const smallItemSelect = "smallItemSelect";
/**
 * @param {string} lookbackLabel - Lookback label value
 * @returns {Object<UIComponent>} Returns Label if value is present, blank otherwise
 */
const getLabel = (lookbackLabel) => lookbackLabel ?
    new Label({
        classNames: "mpageui-ComponentHeader-lookbackLabel mpageui-u-show-for-md",
        value: lookbackLabel
    }) : "";

export default class LookbackFilter extends UIComponent {
    constructor(props, children) {
        super(props, children);
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            lookbackOptions: [],
            lookbackChangeEventName: "LookbackFilter::lookbackChange",
            lookbackLabel: "",
            title: ""
        };
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            lookbackOptions: (options) =>
                this.replaceMappedChild("small", new PopupList({
                    classNames: "mpageui-ComponentHeader-smalllookback",
                    items: options,
                    title: this.getProp("title"),
                    anchorControl: new Button({
                        type: "secondary",
                        icon: new LookbackIcon()
                    }),
                    itemSelectEventName: smallItemSelect
                }))
                    .replaceMappedChild("large",
                        new Container({},
                            [
                                getLabel(this.getProp("lookbackLabel")),
                                new ResponsiveButtonGroup({
                                    items: options,
                                    classNames: "mpageui-ComponentHeader-lookbackSelector",
                                    itemSelectEventName: this.getProp("lookbackChangeEventName"),
                                    itemsPerScreenSize: {
                                        extraLarge: 4,
                                        large: 4,
                                        medium: 3,
                                        small: 0,
                                        extraSmall: 0
                                    },
                                    title: this.getProp("title")
                                })
                            ])
                    )
        };
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.on(smallItemSelect, (item) => {
            unselectAllItems(this.getProp("lookbackOptions"));
            item.isSelected = true;
            this.setProp("lookbackOptions", this.getProp("lookbackOptions"));
            this.stopPropagation(smallItemSelect);
            this.emit(this.getProp("lookbackChangeEventName"), item);
            this.update();
        });
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return [
            mChildren.small.render(),
            mChildren.large.render()
        ];
    }
}
