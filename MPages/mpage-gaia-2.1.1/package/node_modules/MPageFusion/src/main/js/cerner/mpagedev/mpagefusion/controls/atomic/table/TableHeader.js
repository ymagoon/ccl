/**
 * @fileoverview TableHeader class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import TableRow from "./TableRow";
import { svg } from "../icon";
import Label from "../label";
import classNames from "classnames";
import { eventNames, dataTypes } from "./helpers";

/**
 * Sort directions to number mapping.
 * @typedef {Object} sortOrder
 * @property {int} ascending - Indicates the sort direction of ascending
 * @property {int} nosort - Indicates no sort direction.
 * @property {int} descending - Indicates the sort direction of descending
 */

/**
 * Css classes based on sort directions.
 * @typedef {Object} sortOrderClass
 * @property {string} ascending - CSS class for ascending
 * @property {string} descending - CSS class for descending
 */

/*
    constants
 */
const headerClickEventName = eventNames.PUBLIC.COLUMN_HEADER_CLICK;

/**
 * Enum for sort direction
 * @readonly
 * @enum {sortOrder}
 */
const sortOrder = {
    descending: -1,
    nosort: 0,
    ascending: 1
};

/**
 * Enum for css classes for different sort direction
 * @readonly
 * @enum {sortOrderClass}
 */
const sortOrderClass = {
    ascending: "sort-ascending",
    descending: "sort-descending"
};
const hideSortIconClass = "sort-hidden";
const internalCellClickEventName = "_tableHeaderCellClick";

/**
 * CSS class to be applied on the icon based on the sort order
 * if its hidden then the hidden class will be appended to the result
 * @param {sortOrder} direction - Sort direction
 * @param {boolean} hidden - Sort icon is hidden or not
 * @returns {string} CSS class name
 * @private
 */
const getSortClassByOrder = (direction, hidden) => {
    let sortIconClass = "";

    switch (direction) {
        case sortOrder.ascending:
            sortIconClass = sortOrderClass.ascending;
            break;

        case sortOrder.descending:
            sortIconClass = sortOrderClass.descending;
            break;
    }

    if (hidden) {
        sortIconClass += ` ${hideSortIconClass}`;
    }

    return sortIconClass;
};

/**
 * Create the svg icon based and applies the css class based on the sort order
 * @param {sortOrder} direction - Sort direction
 * @param {boolean} hidden - Sort icon is hidden or not
 * @returns {UIComponent} SVG icon
 * @private
 */
const getSortIconObject = (direction, hidden) => new svg.content.Sort({
    classNames: getSortClassByOrder(direction, hidden)
});

/**
 * Evaluates the sort order, defaults to nosort
 * @param {sortOrder} direction - Sort direction
 * @returns {sortOrder} Sort order
 * @private
 */
const evaluateSortOrder = (direction) =>
    direction === sortOrder.ascending ||
    direction === sortOrder.descending ?
        direction :
        sortOrder.nosort;

/**
 * Evaluates the default sort order, defaults to ascending
 * @param {sortOrder} direction - Sort direction
 * @returns {sortOrder} Sort order
 * @private
 */
const evaluateDefaultSortOrder = (direction) => {
    let sortDirection = evaluateSortOrder(direction);

    if (sortDirection === sortOrder.nosort) {
        sortDirection = sortOrder.ascending;
    }

    return sortDirection;
};

/**
 * Finds the column object based on the key and returns the objects else return undefined
 * @param {object} columns - column collection
 * @param {string} colKey - Key of the column to look for
 * @returns {object|undefined} Column object matching the key else undefined
 * @private
 */
const getColumnDataByKey = (columns, colKey) => columns.find((col) => col.key === colKey);

/**
 * Toggles the sort direction between ascending and descending, defaults to ascending
 * @param {sortOrder} direction - Sort direction
 * @returns {sortOrder} Toggle Sort order
 * @private
 */
const toggleSortDirection = (direction) => direction === sortOrder.ascending ? sortOrder.descending : sortOrder.ascending;

/**
 * Set type to default if its not present or if its type action else return what is provided
 * @param {Object} cellProps - Column cell props
 * @returns {dataTypes} Type for the cell
 * @private
 */
const evaluateCellType = (cellProps) =>
    !cellProps.type || cellProps.type === dataTypes.ACTION ?
        dataTypes.DEFAULT :
        cellProps.type;

/**
 * Create objects for header cells since they need special treatment
 * @param {Object} cells - column object
 * @param {Object} columnProps - column object
 * @returns {Array.<Object>} Collection of cell objects
 * @private
 */
const prepareHeaderCellDisplay = (cells, columnProps) => cells.map((cell) => {
    const content = [];

    if (cell.display) {
        content.push({
            label: new Label({
                value: cell.display,
                classNames: "mpageui-Table-header-label"
            })
        });
    }

    if (cell.sortable) {
        const colSortOrder = evaluateSortOrder(cell.sortOrder);
        const defaultColSortOrder = evaluateDefaultSortOrder(cell.defaultSortOrder);
        let sortIcon = null;

        if (colSortOrder !== sortOrder.nosort) {
            sortIcon = getSortIconObject(colSortOrder, false);
        }
        else {
            sortIcon = getSortIconObject(defaultColSortOrder, true);
        }

        content.push({
            icon: sortIcon
        });
    }

    return {
        content,
        selectable: cell.sortable === true,
        key: cell.key,
        clickEventName: internalCellClickEventName,
        type: evaluateCellType(cell)
    };
});

/**
 * Create a single table row object since its an header
 * @param {Object} columns - column object
 * @param {Object} columnProps - column prop object
 * @returns {UIComponent} Object of TableRow class
 * @private
 */
const getRowObject = ({ columns, columnProps }) => new TableRow({
    columns,
    cardView: false,
    cells: prepareHeaderCellDisplay(columns, columnProps)
}, []);

/**
 * Constructor for TableHeader
 * @extends UIComponent
 */
export default class TableHeader extends UIComponent {
    /**
     * Constructor for the class
     * @param {Object} props - props accepted by the Table class
     * @param {Array<UIComponent>} [children] - Collection of UIComponent
     */
    constructor(props, children) {
        super(props, children);
        this._currentSortColId = "";
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            defaultClassNames: "mpageui-Table-header",
            classNames: "",
            columns: [],
            columnProps: {}
        };
    }

    /**
     * Create new instances of all the children with the updated data
     * @returns {undefined}
     * @private
     */
    _updateChildren() {
        this.replaceAllChildren([
            getRowObject({
                columns: this.getProp("columns"),
                columnProps: this.getProp("columnProps")
            })
        ]);
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            columns: () => {
                this._updateChildren();
                this._currentSortColId = "";
            }
        };
    }

    /**
     * Handle column sorting event. Only responsibility is to change the sort icons for cells.
     * It will not stop the event propagation because the consumer needs to listen for it.
     * @param {string} headerClickName - Click event name for the column headers
     * @param {UIComponent} cellObj - Column cell object which is clicked
     * @returns {undefined}
     * @private
     */
    _headerCellClick(headerClickName, cellObj) {
        const cellKey = cellObj.getProp("key");
        const columns = this.getProp("columns");
        const colData = getColumnDataByKey(columns, cellKey);

        if (this._currentSortColId === "") { // make it lazy, only find it when user clicks
            this._evaluateCurrentSortId();
        }

        if (cellKey === this._currentSortColId) { // same col sort as the previous one
            colData.sortOrder = toggleSortDirection(colData.sortOrder); // toggle between ascen and desc
        }
        else {
            colData.sortOrder = evaluateDefaultSortOrder(colData.defaultSortOrder);

            /*
             * Here we are re-setting the icon on the previous column according to its default sort order
             * and also hide it so that its visible on hover only.
             */
            if (this._currentSortColId) {
                const currentSortedCollObj = getColumnDataByKey(columns, this._currentSortColId);

                currentSortedCollObj.sortOrder = sortOrder.nosort;
            }
        }

        this._currentSortColId = cellKey;

        this._updateChildren();
        this.stopPropagation(internalCellClickEventName);
        this.emit(headerClickName, cellObj, cellKey, colData.sortOrder);
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        const headerClickName = this.getProp("columnProps").clickEventName || headerClickEventName;

        this.on(internalCellClickEventName, this._headerCellClick.bind(this, headerClickName));
    }

    /**
     * Lazy evaluation of the current sort column id
     * @returns {undefined}
     * @private
     */
    _evaluateCurrentSortId() {
        const columns = this.getProp("columns");
        const rowObject = this.getChildren()[0];

        /*
         * Get the current sort column key and save it
         */
        rowObject.getChildren().forEach((child, index) => {
            if (evaluateSortOrder(columns[index].sortOrder) !== sortOrder.nosort) {
                this._currentSortColId = child.getProp("key");
            }
        });
    }

    /**
     * @inheritdoc
     */
    view(el, props) {
        return el("div", {
            class: classNames({
                [ props.defaultClassNames ]: true,
                [ props.classNames ]: props.classNames.length > 0
            })
        }, this.renderChildren());
    }
}

TableHeader.SORT_ORDER = sortOrder;
