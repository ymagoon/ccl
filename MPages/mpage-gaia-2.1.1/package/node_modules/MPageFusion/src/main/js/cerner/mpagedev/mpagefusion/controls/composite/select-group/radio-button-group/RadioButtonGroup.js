"use strict";

import SelectGroup from "../SelectGroup";
import RadioButton from "./RadioButton";
import { unique } from "../../../../helpers/core/generators";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const RadioButtonGroupEvents = {
    SELECTION_CHANGE: "RadioButtonGroup::selectionChange"
};

const namespace = "mpageui-RadioButtonGroup";

/**
 * The RadioButtonGroup class.
 * @class RadioButtonGroup
 * @augments  SelectGroup
 */
export default class RadioButtonGroup extends SelectGroup {
    /**
     * @inheritDoc
     */
    initialProps() {
        const uniqueFormName = unique(namespace);

        return Object.assign({}, super.initialProps(), {
            canDeselect: false,
            defaultClassNames: namespace,
            formName: uniqueFormName,
            isDisabled: false,
            isInline: false,
            multiSelect: false,
            selectionChangeEventName: RadioButtonGroupEvents.SELECTION_CHANGE,
            itemGenerator: (props) => new RadioButton(Object.assign({},
                props, this._generateMappedPropResolver()), []) // eslint-disable-line no-underscore-dangle
        });
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return Object.assign({}, super.propChangeHandlers(), {
            formName: () => { this._runRefreshItems = true; },
            isDisabled: () => { this._runRefreshItems = true; },
            isInline: () => { this._runRefreshItems = true; }
        });
    }

    /**
     * Allows props of the RadioButtonGroup to be mapped to each RadioButton
     * @returns {object} the mapped properties
     * @private
     */
    _generateMappedPropResolver() {
        const isDisabled = this.getProp("isDisabled");
        return Object.assign(
            {
                name: this.getProp("formName"),
                isInline: this.getProp("isInline")
            },
            // individual radio buttons can be disabled if isDisabled is set to null
            isDisabled !== null ? { isDisabled } : null
        );
    }
}

RadioButtonGroup.EVENTS = RadioButtonGroupEvents;
