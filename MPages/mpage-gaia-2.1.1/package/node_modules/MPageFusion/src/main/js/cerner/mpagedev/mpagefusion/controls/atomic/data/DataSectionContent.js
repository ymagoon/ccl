"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import { NAMESPACE } from "./const";

/**
 * Converts a span number into the appropriate flex grid class name.
 * @param {number} span - A number between 1 and 12.
 * @returns {string} The flex grid col class name.
 */
const spanToCol = (span) =>
    span ? `mpageui-u-flexgrid-col-${span}` : "mpageui-u-flexgrid-col";

/**
 * Renders textual data wrapped in a span with the provided class name.
 * @param {Function} el - A function for creating virtual elements.
 * @param {string} className - The CSS class name to be applied to the element.
 * @param {string} text - The textual content of the element.
 * @returns {VDom | null} The text rendered into a VDom span.
 */
const renderData = (el, className, text) =>
    text ?
        el(
            "div",
            {
                class: className
            },
            text
        ) : null;

/**
 * Renders the label of the data element.
 * @param {Function} el - A function for creating virtual elements.
 * @param {string} label - The label string.
 * @param {string} labelPosition - The position of the label (above or below).
 * @returns {VDom} The label rendered as VDom.
 */
const renderLabel = (el, label, labelPosition) =>
    renderData(
        el,
        classNames({
            [`${NAMESPACE}-label`]: true,
            [`${NAMESPACE}-label--${labelPosition}`]: (!!labelPosition)
        }),
        label
    );

/**
 * Renders the text of the data element.
 * @param {Function} el - A function for creating virtual elements.
 * @param {string} text - The text string.
 * @returns {VDom} The text rendered as VDom.
 */
const renderText = (el, text) => renderData(el, `${NAMESPACE}-text`, text);

/**
 * Renders a list of content items from a cell within the DataSection.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Array<*>} content - Array of UIComponent objects or an array of key-UIComponent pairs.
 * @returns {VDom} If there is content, that content is rendered, otherwise null.
 */
const renderContent = (el, content) =>
    (content ?
        el(
            "div",
            {
                class: "mpageui-DataSection-content"
            },
            content.map((child) => child.render())
        )
        : null);

/**
 * Extracts all child UIComponent objects from the content of each section. This returns all the
 * extracted children as a flattened array.
 * @param {Array<Object>} rows - The array of rows (from the sections object).
 * @returns {Array<UIComponent>} The full set of children.
 */
const extractChildrenFromRows = (rows) =>
    rows.reduce((prevCell, nextCell) => [
        ...prevCell,
        ...nextCell.filter((cell) => !!cell.content).reduce((prevContent, nextContent) => [
            ...prevContent,
            ...nextContent.content
        ], [])
    ], []);

/**
 * Provided rows or content (for a section) - builds an array of children for the DataSectionContent.
 * @param {Array<object>} rows - Array of row objects.
 * @param {Array<UIComponent>} content - Array of UIComponent content children for the DataSectionContent.
 * @returns {Array<UIComponent>} Array of children extracted for the DataSectionContent.
 */
const buildContentChildren = (rows, content) =>
    (content && content.length) ?
        content :
        extractChildrenFromRows(rows);

/**
 * Renders the rows of data.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Array<Array<Object>>} rows - An array of arrays.
 * @returns {VDom} The rows rendered as VDom.
 */
const renderRows = (el, rows) =>
    rows.map((d) => (d && d.length) ? (
        el(
            "div",
            {
                class: "mpageui-u-flexgrid-row"
            },
            d.map((cell) => el(
                "div",
                {
                    class: classNames({
                        "mpageui-u-flexgrid-col": true,
                        [ spanToCol(cell.span) ]: true,
                        [ `${NAMESPACE}-cell` ]: true
                    })
                },
                [
                    renderLabel(el, cell.label, cell.labelPosition),
                    renderText(el, cell.text),
                    renderContent(el, cell.content)
                ]
            ))
        )
    ) : null
    );

/**
 *
 * @param {Function} el - A function for creating virtual elements.
 * @param {VDom} children - The rendered children.
 * @returns {VDom} The rendered custom content.
 */
const renderCustomContent = (el, children) =>
    el(
        "div",
        {
            class: "mpageui-u-flexgrid-row"
        },
        [
            el(
                "div",
                {
                    class: "mpageui-u-flexgrid-col"
                },
                children
            )
        ]
    );

/**
 * Class used for the content that is injected into a section within the
 * DataSection.
 * @class DataSectionContent
 */
class DataSectionContent extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            rows: [],
            content: []
        };
    }

    /**
     * @inheritDoc
     */
    dependentPropChangeHandlers() {
        return [
            [
                "rows", "content", (rows, content) => {
                    this.replaceAllChildren(buildContentChildren(rows, content));
                }
            ]
        ];
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return [
            (props.content && props.content.length) ?
                renderCustomContent(el, this.renderChildren())
                : renderRows(el, props.rows)
        ];
    }
}

export default DataSectionContent;
