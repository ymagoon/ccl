"use strict";
import SubTree from "./SubTree";
import { ListItemCard } from "../list";
import {
    isNull,
    isNotNullOrUndefined
} from "../../../helpers/core/typeChecks";
import {
    LoadingSpinner,
    NoResults
} from "../../atomic/indicator";
import Container from "../../atomic/container";
import { isEmpty } from "../../../helpers/core/array";

export const SubTreeEvents = {
    SUBTREE_EXPAND: "SubTree::SubTreeExpand",
    SUBTREE_COLLAPSE: "SubTree::SubTreeCollapse"
};

export const FolderTreeEvents = {
    FILE_CLICK: "FolderTree::fileClick",
    FOLDER_EXPAND: "FolderTree::FolderOpen",
    FOLDER_COLLAPSE: "FolderTree::FolderClose"
};

export const FolderTreeInternalEvents = {
    FILE_CLICK: "FolderTree::Internal::fileClick",
    FOLDER_EXPAND: "FolderTree::Internal::FolderOpen",
    FOLDER_COLLAPSE: "FolderTree::Internal::FolderClose"
};

/**
 * Constant representing a sub folder
 * @type {string}
 */
const SUB_FOLDER = "subFolder";

export const spinnerContainerClass = "mpageui-FolderTree--loadingContainer";
export const spinnerClass = "mpageui-FolderTree--loadingSpinner";

/**
 * @returns {Array} A container containing the Loading spinner,
 * this will replace all the children in the subtree.
 * Used only if the sub-folder content is blank
 */
const getLoadingSpinner = () => [
    new Container(
        {
            classNames: spinnerContainerClass,
            wrapChildren: true
        },
        [
            new LoadingSpinner({
                classNames: spinnerClass,
                isLoading: true
            })
        ]
    )
];

/**
 * Checks if the JSON provided by the user is of the type which
 * can be converted to sub-folders and files
 *
 * @param {Array<Object>} content - Array of object with key display and/or subFolder
 * indicating files and folders
 * @returns {boolean} True if display value is present, false otherwise
 */
const isContentUserProvided = (content) => !!content[ 0 ].display;

/**
 * Gets the folder size, if folder is non-empty.
 *
 * @param {Array<Object>} content - Array of object with files and folders
 * @returns {number} Count of items in the list
 */
export const getFolderSize = (content) => content ? content.length : 0;

/**
 * @param {Object<String>} item - Item containing the primary and secondary values for the list item
 * @returns {Array} Primary and secondary display values (if present) in a list
 */
const getItems = (item) => item.secondary
    ? [
        { value: item.display },
        { value: item.secondary }
    ]
    : [
        { value: item.display }
    ];

/**
 * Generates the sub folder structure recursively
 *
 * @param {Object} item - Object containing the sub folder items
 * @returns {Object} subtree control/s if the property subFolder is present,
 * null otherwise
 */
const generateSubFolder = (item) => {
    if (!item.hasOwnProperty(SUB_FOLDER)) {
        return null;
    }
    return new SubTree({
        classNames: "",
        content: isNotNullOrUndefined(item[ SUB_FOLDER ]) ? item[ SUB_FOLDER ].map(prepareItems) : item[ SUB_FOLDER ], // eslint-disable-line no-use-before-define
        display: item.display,
        id: item.id,
        folderExpandEventName: FolderTreeInternalEvents.FOLDER_EXPAND,
        folderCollapseEventName: FolderTreeInternalEvents.FOLDER_COLLAPSE,
        folderSize: getFolderSize(item[ SUB_FOLDER ])
    });
};

/**
 * Generates the folder item as a card
 *
 * @param {Object} item - Object containing the display value of the file
 * @returns {Object<UIComponent>} Control containing the file item
 */
const generateTreeItem = (item) =>
    new ListItemCard({
        ariaAttributes: [
            {
                role: "treeitem",
                "aria-label": item.display
            }
        ],
        classNames: "",
        display: item.display,
        id: item.id,
        items: getItems(item),
        clickEventName: FolderTreeInternalEvents.FILE_CLICK,
        isCardSelectable: false
    });

/**
 * Generates sub-folder and file structures recursively
 *
 * @param {Object} item - Object containing the sub folders and files
 * @returns {Object<UIComponent>} returns control containing the sub-folder (SubTree) or item (ListItemCard)
 */
const prepareItems = (item) => generateSubFolder(item) || generateTreeItem(item);

/**
 * Processes the content, if null, then No results is shown. If a blank folder is provided then it is
 * assumed that the results are asynchronously retrieved and it will keep spinning until the content is provided.
 * If the JSON provided is provided by the user then the content is converted to respective SubTree and ListItemCard
 * UIComponents and populated within the current folder
 *
 * @param {Array<Object>} content - Array of object with key display and/or subFolder indicating files and folders
 * @returns {Array<UIComponent>} list of controls that needs to be shown within the folder
 */
export const convertContentIntoControls = (content) => {
    if (isNull(content)) {
        return getLoadingSpinner();
    }
    if (isEmpty(content)) {
        return [ new NoResults() ];
    }
    if (isContentUserProvided(content)) {
        return content.map(prepareItems);
    }
    return content;
};
