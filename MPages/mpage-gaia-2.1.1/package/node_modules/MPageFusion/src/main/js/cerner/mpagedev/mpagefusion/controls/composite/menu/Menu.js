import UIComponent from "../../../base";
import ListMenu from "./ListMenu";
import { forwardProp } from "../../../helpers/props/props";
import { EVENTS as INTERNAL_EVENTS, makeContent, handleEvents, isDecoratedBasedOnContent } from "../list/helpers";
import i18n from "i18n";

/**
 * generates a callback to close the menu
 * @param {Menu} menu the menu
 * @returns {undefined}
 */
const generateCloseHandler = (menu) => () => {
    menu.setProp("isOpen", false);
    menu.forceUpdate();
    menu.emit(menu.getProp("closeEventName"));
};

const EVENTS = {
    CLOSE: "Menu::closeMenu"
};

const LIST_MENU_CLOSE = "__Menu::listMenuClose__";

/**
 * Menu that takes in a JSON array and renders toggles, buttons, submenus, and
 * select groups.
 */
export default class Menu extends UIComponent {

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            anchorControl: null,
            autoInsertDividers: true,
            closeEventName: EVENTS.CLOSE,
            content: [],
            title: i18n().options,
            isDisabled: false,
            isOpen: false,
            showHeader: true,
            selectionChangeEventName: "Menu::SelectionChange",
            toggleEventName: "Menu::Toggle",
            basicActionEventName: "Menu::BasicAction"
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [ {
            listMenu: new ListMenu({
                closeEventName: LIST_MENU_CLOSE
            })
        } ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        const closeHandler = generateCloseHandler(this);
        /*
         * The close events subscribe first to fix the following issue:
         * https://github.cerner.com/DiscernABU/MPageFusion/issues/488
         */
        this.on(INTERNAL_EVENTS.CLICK_EVENT, closeHandler);
        this.on(INTERNAL_EVENTS.TOGGLE_EVENT, closeHandler);
        this.on(INTERNAL_EVENTS.DISMISS_EVENT, closeHandler);
        this.on(LIST_MENU_CLOSE, () => {
            this.stopPropagation(LIST_MENU_CLOSE);
            closeHandler();
        });

        handleEvents(this);
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            title: forwardProp(this, "title", "listMenu"),
            anchorControl: forwardProp(this, "anchorControl", "listMenu"),
            showHeader: forwardProp(this, "showHeader", "listMenu"),
            autoInsertDividers: forwardProp(this, "autoInsertDividers", "listMenu"),
            content: (content) => {
                this.getChild("listMenu").setProp("content", makeContent(content));
                this.getChild("listMenu").setProp("isDecorated", isDecoratedBasedOnContent(content));
            },
            isOpen: forwardProp(this, "isOpen", "listMenu"),
            isDisabled: forwardProp(this, "isDisabled", "listMenu")
        };
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}
