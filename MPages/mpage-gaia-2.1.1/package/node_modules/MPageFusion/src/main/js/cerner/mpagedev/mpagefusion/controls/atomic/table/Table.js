/**
 * @fileoverview Main Table class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import TableBody from "./TableBody";
import TableHeader from "./TableHeader";
import classNames from "classnames";
import { forwardProp } from "../../../helpers/props/props";
import {
    sort,
    compareColumn,
    compareKeyedColumn,
    eventNames,
    dataTypes
} from "./helpers";

/**
 * Constructor for table
 * @extends UIComponent
 */
class Table extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            key: this.getId(),
            columns: [],
            rows: [],
            rowProps: {},
            columnProps: {},
            subSections: [],
            defaultClassNames: "mpageui-Table",
            classNames: ""
        };
    }

    /**
     * Creates the children objects and returns them has an array
     * @returns {Array<UIComponent>} Array of UIComponent
     */
    createChildren() {
        return [
            {
                header: new TableHeader({
                    columns: this.getProp("columns"),
                    columnProps: this.getProp("columnProps")
                }, [])
            },
            {
                body: new TableBody({
                    columns: this.getProp("columns"),
                    rows: this.getProp("rows"),
                    rowProps: this.getProp("rowProps"),
                    subSections: this.getProp("subSections")
                }, [])
            }
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            rows: (rows) => {
                this.getChild("body").setProps({
                    rows,
                    shiftAnchorPosition: -1
                });
            },
            subSections: (subSections) => {
                this.getChild("body").setProps({
                    subSections,
                    shiftAnchorPosition: -1
                });
            },
            columns: (columns) => {
                this.getChild("header").setProp("columns", columns);
                this.getChild("body").setProps({
                    columns,
                    shiftAnchorPosition: -1
                });
            },
            rowProps: forwardProp(this, "rowProps", "body"),
            columnProps: forwardProp(this, "columnProps", "header")
        };
    }

    /**
     * @inheritdoc
     */
    view(el, props) {
        return el("div", {
            key: props.key,
            class: classNames({
                [ props.defaultClassNames ]: true,
                [ props.classNames ]: props.classNames.length > 0
            })
        }, this.renderChildren());
    }
}

Table.helpers = {
    sort,
    compareColumn,
    compareKeyedColumn
};

Table.SORT_ORDER = TableHeader.SORT_ORDER;
Table.EVENTS = eventNames.PUBLIC;
Table.DATA_TYPE = dataTypes;

export default Table;
