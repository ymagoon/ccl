"use strict";

import { SelectButton } from "../../../atomic/button";
import { EVENTS as MAIN_EVENTS } from "../const";


/**
 * Creates the face-up version of the CollapseGroup toggle item (which is a SelectButton).
 * @param {Object} item - The toggle item.
 * @param {Object} state - The state of the toggle item.
 * @returns {SelectButton} The SelectButton created from the item and its state.
 */
export const makeFaceUp = (item, state) => new SelectButton({
    _meta: {
        item
    },
    display: item.display,
    isSelected: state.includes(item.id),
    size: item.size || "",
    type: item.style || "",
    disabled: item.disabled
});

/**
 * Updates the state of a toggle item. If deselected, the id of the item is
 * removed from the array of selected ids, otherwise it is added.
 * @param {String[]} state - Array of selected ids.
 * @param {Boolean} isSelected - Selected state of the toggle item.
 * @param {String} id - The id of the toggle item.
 * @returns {String[]} - New array of selected ids.
 */
const updateState = (state = [], { isSelected, id }) => isSelected ? [
    ...state,
    id
] : state.filter((selectedId) => selectedId !== id);

/**
 * * Creates the Menu item equivalent of the CollapseGroup select group item.
 * @param {Object} item - The select group item.
 * @param {Object} state - The state of the select group item.
 * @returns {Object} The Menu toggle item.
 */
export const makeMenuItem = (item, state) => ({
    _meta: { item },
    display: item.display,
    isSelected: state.includes(item.id)
});

/**
 * Small helper to make the event payload when a toggle is performed.
 * @param {string} id - The id of the item that changed selection.
 * @param {boolean} isSelected - The selected state of the toggle item.
 * @returns {Object} The payload for the toggle selection event.
 */
const makePayload = (id, isSelected) => ({
    id,
    isSelected
});

/**
 * Binds the events for toggle controls in the CollapseGroup.
 * @param {CollapseGroup} collapseGroup - The owner CollapseGroup which will listen for events from child
 * controls.
 * @returns {undefined} Returns nothing.
 */
export const bindEvents = (collapseGroup) => {
    // Face up
    collapseGroup.on(SelectButton.EVENTS.SELECTION_CHANGE, (btn, isSelected) => {
        collapseGroup.stopPropagation(SelectButton.EVENTS.SELECTION_CHANGE);

        // State change
        const meta = btn.getProp("_meta");

        collapseGroup.setState({
            selectedIds: updateState(
                collapseGroup._state.selectedIds, // eslint-disable-line no-underscore-dangle
                { isSelected, id: meta.item.id }
            )
        });

        collapseGroup.emit(
            meta.item.selectionChangeEventName,
            collapseGroup,
            makePayload(meta.item.id, isSelected)
        );
        collapseGroup.update();
    });

    // Menu
    collapseGroup.on(MAIN_EVENTS.MENU_TOGGLE, (menu, item, isSelected) => {
        collapseGroup.stopPropagation(MAIN_EVENTS.MENU_TOGGLE);

        const meta = item._meta; // eslint-disable-line no-underscore-dangle

        // State change
        collapseGroup.setState({
            selectedIds: updateState(
                collapseGroup._state.selectedIds, // eslint-disable-line no-underscore-dangle
                { isSelected, id: meta.item.id }
            )
        });

        collapseGroup.emit(
            meta.item.selectionChangeEventName,
            collapseGroup,
            makePayload(meta.item.id, isSelected)
        );
        collapseGroup.update();
    });
};
