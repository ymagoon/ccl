/**
 * @fileoverview Modal window class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import Label from "../../atomic/label";
import { NavigationHeader } from "../../atomic/header";
import FullScreenBehavior from "../../../behaviors/FullScreenBehavior";
import {
    removeWindowResizeListener,
    addWindowResizeListener
} from "../../../helpers/dom/dom";
import { updateZIndexes } from "../../../helpers/z-index/z-index";
import {
    defaultCssClasses,
    isSmallerScreen,
    sizeAdjustmentIE,
    adjustLayoverForDemoBanner,
    adjustModalMaxHeightForDemoBanner
} from "./domHelpers";
import classNames from "classnames";

/**
 * Activate full screen based on the screen size
 * @param {FullScreenBehavior} fullScreenObj - instance obj for the class
 * @returns {undefined}
 * @private
 */
const adjustFullScreen = (fullScreenObj) => isSmallerScreen() ? fullScreenObj.update() : fullScreenObj.undo();

/**
 * Make all the required adjustment needed for modal on resize and also on first initialization
 * @param {FullScreenBehavior} fullScreenObj - fullScreenObj obj for the modal class
 * @returns {undefined}
 * @private
 */
const makeDomAdjustments = (fullScreenObj) => {
    adjustFullScreen(fullScreenObj); // only go to fullscreen if its on a small screen

    if (!isSmallerScreen()) {
        adjustLayoverForDemoBanner(fullScreenObj.getElement()); // demo banner should never be covered
    }

    adjustModalMaxHeightForDemoBanner(fullScreenObj.getElement()); // main modal dom node's max-height adjustment
    sizeAdjustmentIE(fullScreenObj.getElement()); // adjust modal body height because IE is dumb enough to not understand that
};

/**
 * Renders the different sections of the modal
 * @param {VDom} el - vDom creation function
 * @param {UIComponent} section - section UIComponent object
 * @param {string} cssClass - CSS class names
 * @returns {VDom} vdom structure
 * @private
 */
const renderModalSections = (el, section, cssClass) => el(
    "div",
    {
        class: cssClass
    },
    section.render()
);
/**
 * Closes the modal window by setting the visible prop to false
 * @param {Object} control - Modal instance
 * @returns {undefined}
 * @private
 */
const closeModalHandler = (control) => {
    control.setProp("isVisible", false);
    control.emit(control.getProp("closeClickEventName"), control);
    control.update();
};

/**
 * Click handler for layover surrounding the modal
 * @param {Object} control - Modal instance
 * @returns {undefined} returns nothing
 * @private
 */
const layoverClickHandler = (control) => (event) => {
    // make sure the click event source is the layover and not the content inside the modal
    if (event.target.classList && event.target.classList.contains(defaultCssClasses.layover)) {
        closeModalHandler(control);
    }
};

/**
 * Keyup handler for layover surrounding the modal
 * @param {Object} control - Modal instance
 * @returns {undefined} returns nothing
 * @private
 */
const layoverKeyUpHandler = (control) => (event) => {
    /*
     * This currently works till the time we have focus on or inside the layover dom element
     * Ideally we want to listen for these events on the document body for consistent results
     */
    if (event.keyCode === 27) { // close modal when ESC key is hit
        closeModalHandler(control);
    }
};

/**
 * Modal class
 * @constructor
 */
export default class Modal extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);

        this._fullScreen = new FullScreenBehavior(null, {});
        this._windowResizeHandler = this._windowResizeHandler.bind(this);
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            isVisible: false,
            closeOnClickAway: true,
            size: Modal.SIZE.MEDIUM,
            defaultClassNames: defaultCssClasses.default,
            classNames: "",
            header: new NavigationHeader({
                title: "header",
                showDismiss: true,
                compact: true
            }),
            headerCloseEventName: NavigationHeader.EVENTS.DISMISS,
            body: new Label({ value: "body" }),
            footer: new Label({ value: "footer" }),
            footerCloseEventName: Modal.EVENTS.FOOTER_CLOSE,
            closeClickEventName: Modal.EVENTS.CLOSE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isVisible: (visible) => {
                if (visible) {
                    addWindowResizeListener(this._windowResizeHandler);
                }
                else {
                    removeWindowResizeListener(this._windowResizeHandler);
                    this._fullScreen.gc();
                }
            },
            header: (newHeader) => this.replaceMappedChild("header", newHeader),
            body: (newBody) => this.replaceMappedChild("body", newBody),
            footer: (newFooter) => this.replaceMappedChild("footer", newFooter)
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                header: this.getProp("header")
            },
            {
                body: this.getProp("body")
            },
            {
                footer: this.getProp("footer")
            }
        ];
    }

    /**
     * Window resize handler
     * @returns {undefined}
     * @private
     */
    _windowResizeHandler() {
        makeDomAdjustments(this._fullScreen);
    }

    /**
     * Adjust the position of modal
     * @param {HTMLElement} dom - pane DOM element
     * @param {boolean} isInitialized - Whether this is the first time we are running this function on this element
     * @returns {undefined}
     * @private
     */
    _domAdjustments(dom) {
        this._fullScreen.setElement(dom).init();
        makeDomAdjustments(this._fullScreen);
        dom.focus();
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        // wire up the events from header and footer for close action
        this.on(this.getProp("headerCloseEventName"), () => {
            closeModalHandler(this);
            this.stopPropagation(this.getProp("headerCloseEventName"));
        });

        this.on(this.getProp("footerCloseEventName"), () => {
            closeModalHandler(this);
            this.stopPropagation(this.getProp("footerCloseEventName"));
        });
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return props.isVisible ? el(
            "div",
            {
                class: classNames({
                    [props.defaultClassNames]: true,
                    [defaultCssClasses.layover]: true,
                    [defaultCssClasses.disclosure]: true
                }),
                tabindex: 0, // to make it focusable for keyup event
                onclick: props.closeOnClickAway ? layoverClickHandler(this) : null,
                onkeyup: props.closeOnClickAway ? layoverKeyUpHandler(this) : null,
                oncreate: ({ dom }) => {
                    this._domAdjustments(dom);
                    updateZIndexes();
                },
                onupdate: () => sizeAdjustmentIE(this._fullScreen.getElement()) // adjust modal body height because IE is definitely dumb enough to not understand that
            },
            el(
                "div",
                {
                    class: classNames({
                        [defaultCssClasses.content]: true,
                        [props.classNames]: props.classNames.length > 0,
                        [props.size]: true
                    })
                },
                [
                    renderModalSections(el, mChildren.header, defaultCssClasses.header),
                    renderModalSections(el, mChildren.body, defaultCssClasses.body),
                    renderModalSections(el, mChildren.footer, defaultCssClasses.footer)
                ]
            )
        ) : null;
    }
}

/**
 * Modal Sizes
 * @type {{SMALL: string, MEDIUM: string, LARGE: string, CUSTOM: string}}
 */
Modal.SIZE = {
    SMALL: "mpageui-Modal--small",
    MEDIUM: "mpageui-Modal--medium",
    LARGE: "mpageui-Modal--large",
    CUSTOM: "mpageui-Modal--custom"
};

/**
 * Modal events
 * @type {{CLOSE: string, FOOTER_CLOSE: string}}
 */
Modal.EVENTS = {
    CLOSE: "Modal::close",
    FOOTER_CLOSE: "Modal::footerClose"
};
