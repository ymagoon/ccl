"use strict";
import classNames from "classnames";
import UIComponent from "../../../../base/UIComponent";
import { forwardProp } from "../../../../helpers/props/props";
import SearchBar from "../bar/SearchBar";
import SearchPopup from "../popup/SearchPopup";
import SearchPane from "../pane/SearchPane";
import SearchList from "../list/SearchList";
import { addWindowResizeListener, removeWindowResizeListener } from "../../../../helpers/dom/dom";
import { CHILDREN, DEFAULT_SEARCH_STRING_LENGTH, EVENTS, NAMESPACE, PRIVATE_EVENTS } from "./const";
import { THROTTLE_TIME } from "../const";
import {
    handleDesktopSearchBarBlur,
    handleDesktopSearchBarFocus,
    handleMobileSearchBarFocus,
    handlePaneOverlayClick,
    handlePopupClose,
    handleSearchBarConfirm,
    handleSearchBarInput,
    handleSearchBarNavigation,
    handleSearchBarSubmit,
    handleSearchListSelect
} from "./events";
import { isSelectable, shouldShowPane } from "./helpers";

/**
 * A responsive search control which contains the following elements:
 * - Desktop Mode:
 *      -- TextBox
 *      -- Clear Icon
 *      -- Submit button
 *      -- Results Pane for loading the search results
 *      -- Loading spinner to indicate the search processing
 * - Mobile Mode:
 *      -- Search button (anchor) for opening the search popup control
 *      -- Results Popup - Contains the entire search control
 *          ** Header -> TextBox
 *          ** Header ->Clear Icon
 *          ** Header -> Submit button
 *          ** Body -> Search results
 *          ** Body -> spinner to indicate the search processing
 */
class Search extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._state = {
            focused: false
        };
        this._onResize = this._onResize.bind(this);
    }

    /**
     * Handles the window resize event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _onResize() {
        this.getChild(CHILDREN.SEARCH_PANE).setProp("isVisible", false);
        this.update();
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            inputEventName: EVENTS.INPUT,
            inputFocusEventName: EVENTS.FOCUS,
            isDisabled: false,
            isLoading: false,
            minimumSearchStringLength: DEFAULT_SEARCH_STRING_LENGTH,
            placeholder: "",
            results: [],
            selectedId: "",
            selectArray: [],
            selectedValue: "",
            selectionChangeEventName: EVENTS.SELECTION_CHANGE,
            shouldTruncate: true,
            submitEventName: EVENTS.SUBMIT,
            throttle: THROTTLE_TIME,
            value: ""
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            /*
             * SearchBar is shown on Desktop only and uses the ResultsPane to display the results
             * below the search bar.
             */
            {
                [ CHILDREN.SEARCH_BAR ]: new SearchBar({
                    blurEventName: PRIVATE_EVENTS.DESKTOP.BLUR,
                    focusEventName: PRIVATE_EVENTS.DESKTOP.FOCUS
                })
            },
            /*
             * ResultsPane is shown on Desktop only.
             */
            {
                [ CHILDREN.SEARCH_PANE ]: new SearchPane({})
            },
            /*
             * SearchPopup contains the responsive portion of search, shown on
             * small screens. This entire control is hidden on breakpoints
             * above small.
             */
            {
                [ CHILDREN.SEARCH_POPUP ]: new SearchPopup({
                    focusEventName: PRIVATE_EVENTS.MOBILE.FOCUS
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            selectArray: forwardProp(this, "selectArray", CHILDREN.SEARCH_POPUP),
            selectedValue: forwardProp(this, "selectValue", CHILDREN.SEARCH_POPUP),
            selectedId: forwardProp(this, "selectedId", CHILDREN.SEARCH_POPUP),
            isDisabled: (disabled) => {
                this.getChild(CHILDREN.SEARCH_BAR).setProp("isDisabled", disabled);

                this.getChild(CHILDREN.SEARCH_PANE)
                    .setProp("isVisible", false);

                this.getChild(CHILDREN.SEARCH_POPUP)
                    .setProp("isVisible", false)
                    .setProp("isDisabled", disabled);
            },
            isLoading: (loading) => {
                this.getChild(CHILDREN.SEARCH_PANE)
                    .setProp("isLoading", loading)
                    .setProp("isVisible", shouldShowPane(this.getProp("results"), loading, this._state.focused));

                this.getChild(CHILDREN.SEARCH_POPUP).setProp("isLoading", loading);
            },
            minimumSearchStringLength: forwardProp(this, "minimumSearchStringLength", CHILDREN.SEARCH_POPUP),
            placeholder: (value) => {
                this.getChild(CHILDREN.SEARCH_BAR).setProp("placeholder", value);
                this.getChild(CHILDREN.SEARCH_POPUP).setProp("placeholder", value);
            },
            results: (results) => {
                const selectedIndex = results ? results.findIndex((r) => isSelectable(r)) : 0;
                this.getChild(CHILDREN.SEARCH_POPUP)
                    .setProp("results", results)
                    .setProp("selectedIndex", selectedIndex);

                this.getChild(CHILDREN.SEARCH_PANE)
                    .setProp("results", results)
                    .setProp("selectedIndex", selectedIndex)
                    .setProp("isVisible", shouldShowPane(results, this.getProp("isLoading"), this._state.focused));
            },
            throttle: (throttle) => {
                this.getChild(CHILDREN.SEARCH_BAR).setProp("throttle", throttle);
                this.getChild(CHILDREN.SEARCH_POPUP).setProp("throttle", throttle);
            },
            shouldTruncate: (shouldTruncate) => {
                this.getChild(CHILDREN.SEARCH_PANE).setProp("shouldTruncate", shouldTruncate);
                this.getChild(CHILDREN.SEARCH_POPUP).setProp("shouldTruncate", shouldTruncate);
            },
            value: (value) => {
                this.getChild(CHILDREN.SEARCH_BAR).setProp("value", value);
                this.getChild(CHILDREN.SEARCH_POPUP).setProp("searchValue", value);
                this.getChild(CHILDREN.SEARCH_PANE).setProp("searchValue", value);
            }
        };
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        // SearchBar
        this.on(SearchBar.EVENTS.INPUT, handleSearchBarInput(this, SearchBar.EVENTS.INPUT));
        this.on(SearchBar.EVENTS.CONFIRM, handleSearchBarConfirm(this, SearchBar.EVENTS.CONFIRM));
        this.on(SearchBar.EVENTS.NAVIGATION, handleSearchBarNavigation(this, SearchBar.EVENTS.NAVIGATION));
        this.on(SearchBar.EVENTS.SUBMIT, handleSearchBarSubmit(this, SearchBar.EVENTS.SUBMIT));

        // SearchBar (Mobile / Desktop)
        this.on(PRIVATE_EVENTS.MOBILE.FOCUS, handleMobileSearchBarFocus(this, PRIVATE_EVENTS.MOBILE.FOCUS));
        this.on(PRIVATE_EVENTS.DESKTOP.FOCUS, handleDesktopSearchBarFocus(this, PRIVATE_EVENTS.DESKTOP.FOCUS));
        this.on(PRIVATE_EVENTS.DESKTOP.BLUR, handleDesktopSearchBarBlur(this, PRIVATE_EVENTS.DESKTOP.BLUR));

        // SearchList
        this.on(SearchList.EVENTS.CLICK, handleSearchListSelect(this, SearchList.EVENTS.CLICK));

        // SearchPopup
        this.on(SearchPopup.EVENTS.BACK, handlePopupClose(this, SearchPopup.EVENTS.BACK));

        // SearchPane
        this.on(SearchPane.EVENTS.OVERLAY_CLICK, handlePaneOverlayClick(this, SearchPane.EVENTS.OVERLAY_CLICK));

    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mapped) {
        return el(
            "div",
            {
                class: `${NAMESPACE}`,
                oncreate: () => {
                    addWindowResizeListener(this._onResize);
                },
                onremove: () => {
                    removeWindowResizeListener(this._onResize);
                }
            },
            [
                // Desktop
                el(
                    "div",
                    {
                        class: classNames(`${NAMESPACE}--normal`, {
                            "is-focused": this._state.focused
                        })
                    },
                    [
                        mapped[ CHILDREN.SEARCH_BAR ].render(),
                        mapped[ CHILDREN.SEARCH_PANE ].render()
                    ]
                ),
                // Mobile
                el(
                    "div",
                    {
                        class: `${NAMESPACE}--small`
                    },
                    mapped[ CHILDREN.SEARCH_POPUP ].render()
                )
            ]
        );
    }
}

Search.EVENTS = EVENTS;
export default Search;
