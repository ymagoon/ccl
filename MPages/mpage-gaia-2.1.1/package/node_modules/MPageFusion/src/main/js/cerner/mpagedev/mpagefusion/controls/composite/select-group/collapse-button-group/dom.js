"use strict";
import { right, width } from "../../../../helpers/dom/positioning";
import { length } from "../../../../helpers/core/array";

/**
 * Enum for standard elements the CollapseButtonGroup is dependent upon.
 * @type {{BUTTON_GROUP: string, MENU_BUTTON: string, BUTTON: string}}
 */
const ELEMENT_SELECTORS = {
    BUTTON_GROUP: "mpageui-ButtonGroup",
    MENU_BUTTON: "mpageui-MenuButton",
    BUTTON: "mpageui-Button"
};

const RESIZE_TIMEOUT = 400;

/**
 * Handles the resize event for the CollapseButtonGroup.
 * @param {CollapseButtonGroup} ctrl - The CollapseButtonGroup control.
 * @returns {Function} The resize handler function.
 */
const handleResize = (ctrl) => () => {
    setTimeout(() => {
        ctrl.update();
    }, RESIZE_TIMEOUT);
};

/**
 * Gets the button group element from the collapse button group.
 * @param {HTMLElement} ele - The root element of the collapse button group
 * control.
 * @returns {HTMLElement} The button group element.
 */
const getButtonGroupElement = (ele) => ele.querySelector(`.${ELEMENT_SELECTORS.BUTTON_GROUP}`);

/**
 * Gets the menu button element from the collapse button group.
 * @param {HTMLElement} ele - The root element of the collapse button group
 * control.
 * @returns {HTMLElement} The menu button HTMLElement.
 */
const getMenuButtonElement = (ele) => ele.querySelector(`.${ELEMENT_SELECTORS.MENU_BUTTON}`);

/**
 * Gets the individual button HTMLElements.
 * @param {HTMLElement} ele - Element from which all child buttons will be
 * retrieved.
 * @returns {Array<HTMLElement>} Array of button elements.
 */
const getButtonElements = (ele) => Array.from(ele.querySelectorAll(`.${ELEMENT_SELECTORS.BUTTON}`));

/**
 * Sorts the elements of the collapse button group into a convenient object.
 * @param {HTMLElement} ele - The root element of the collapse button group
 * control.
 * @returns {Object} The various child elements of the collapse button group
 * sorted.
 */
const sortElements = (ele) => ({
    buttonGroupElement: getButtonGroupElement(ele),
    buttonElements: getButtonElements(getButtonGroupElement(ele)),
    menuButtonElement: getMenuButtonElement(ele)
});

/**
 * Resets the children of the CollapseGroup control by resetting their display style.
 * @param {Array<HTMLElement>} children - The child HTMLElements of the CollapseGroup.
 * @param {string} display - The display value to apply.
 * @returns {Array<HTMLElement>} The array of children after the display style is reset.
 */
const resetElementDisplays = (children, display = "") => {
    children.forEach((c) => {
        c.style.display = display;
    });
    return children;
};

/**
 * Small helper that calls the onChange when the ranges provided differ.
 * @param {number} currentRange - The previous or current range.
 * @param {number} nextRange - The next range value.
 * @param {Function} onChange - The function to be called if the range has
 * changed.
 * @returns {* | false} The return of the onChange or false if the range has
 * not changed.
 */
const handleRangeChange = (currentRange, nextRange, onChange) =>
    (currentRange !== nextRange) ? onChange(nextRange) : false;

/**
 * If there are items that don't show in the face up, call the handle hidden
 * function, otherwise call the handle all visible function.
 * @param {Array<HTMLElement>} unfit - The number of elements that should
 * be hidden from the face-up.
 * @param {Function} handleHidden - Called if there are hidden items.
 * @param {Function} handleAllVisible - Called if there are no hidden items.
 * @returns {*} The return value of handleHidden or handleAllVisible.
 */
const handleItems = (unfit, handleHidden, handleAllVisible) =>
    unfit && unfit.length ? handleHidden() : handleAllVisible();

/**
 * Handles the case where face-up items should be hidden.
 * @param {HTMLElement} rootElement - The root of the CollapseButtonGroup.
 * @param {Array<HTMLElement>} buttonElements - The array of button elements.
 * @param {HTMLElement} menuButtonElement - The menu button element.
 * @returns {Function} Function that handles when items are hidden, which
 * returns the range of items shown face-up.
 */
const handleHidden = (rootElement, buttonElements, menuButtonElement) => () =>
    (buttonElements.length -
        length(
            resetElementDisplays(
                buttonElements
                    .filter(
                        (buttonElement) =>
                            right(buttonElement) > (right(rootElement) - width(menuButtonElement))
                    )
                , "none"
            )
        )
    );

/**
 * Handles the case where all face-up items should be shown. This will hide
 * the menu button element.
 * @param {Array<HTMLElement>} buttonElements - The array of button elements.
 * @param {HTMLElement} menuButtonElement - The menu button element.
 * @returns {Function} Function that handles when all items are shown face-up.
 */
const handleAllVisible = (buttonElements, menuButtonElement) => () => {
    menuButtonElement.style.display = "none";
    return buttonElements.length;
};

/**
 * Handles showing / hiding face-up items based on the available size.
 * @param {HTMLElement} rootElement - The root element of the CollapseButtonGroup.
 * @param {Array<HTMLElement>} buttonElements - The array of button elements.
 * @param {HTMLElement} menuButtonElement - The menu button element.
 * @returns {number} The range of items shown face-up.
 */
const updateFaceUpItemVisibility = (rootElement, { buttonElements, menuButtonElement }) => {
    // First, show all elements (need to first show them in order to determine
    //      which ones actually fit face-up.
    resetElementDisplays(buttonElements, "");
    resetElementDisplays([ menuButtonElement ], "");

    // Returns the range
    return handleItems(
        buttonElements.filter((buttonElement) => right(buttonElement) > right(rootElement)),
        handleHidden(rootElement, buttonElements, menuButtonElement),
        handleAllVisible(buttonElements, menuButtonElement)
    );
};

/**
 * The config function for the CollapseButtonGroup control.
 * @param {CollapseButtonGroup} ctrl - The CollapseButtonGroup instance.
 * @param {number} range - The current range of items shown face-up.
 * @param {Function} rangeSetter - Function that sets the range.
 * @param {HTMLElement} ele - dom element
 * @returns {undefined}
 */
const config = (ctrl, range, rangeSetter, ele) => {
    handleRangeChange(
        range,
        updateFaceUpItemVisibility(ele, sortElements(ele)),
        (nextRange) => {
            rangeSetter(nextRange);
            ctrl.update();
        }
    );
};

export {
    config,
    handleResize,
    resetElementDisplays,
    sortElements
};
