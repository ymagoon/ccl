"use strict";

import Button from "../../../atomic/button";
import { EVENTS as MAIN_EVENTS } from "../const";

/**
 * Enumeration for CollapseGroup action events.
 * @type {{ACTION_BUTTON_CLICK: string}}
 */
const EVENTS = {
    ACTION_BUTTON_CLICK: "CollapseGroup::Button::click"
};

/**
 * Creates a menu item action.
 * @param {Object} item - The item to be transformed to a Menu item.
 * @returns { {_meta: Object, display: string} } The item transformed to a supported Menu item.
 */
export const makeMenuItem = (item) => Object.assign(
    {
        _meta: { item },
        disabled: item.disabled,
        display: item.display
    },
    item.icon ? { icon: item.icon } : null
);

/**
 * Creates a face-up control for the CollapseGroup.
 * @param {Object} item - The item to be transformed to a face-up control.
 * @returns {Button} The item as a face-up Button control.
 */
export const makeFaceUp = (item) => new Button({
    _meta: { item },
    display: item.display,
    icon: item.icon || null,
    size: item.size || "",
    type: item.style || "",
    disabled: item.disabled,
    clickEventName: EVENTS.ACTION_BUTTON_CLICK
});

/**
 * Binds the events for Action controls in the CollapseGroup.
 * @param {CollapseGroup} collapseGroup - The owner CollapseGroup which will listen for events from child
 * controls.
 * @returns {undefined} Returns nothing.
 */
export const bindEvents = (collapseGroup) => {
    // Face-up
    collapseGroup.on(EVENTS.ACTION_BUTTON_CLICK, (btn) => {
        collapseGroup.stopPropagation(EVENTS.ACTION_BUTTON_CLICK);

        const item = btn.getProp("_meta").item;
        collapseGroup.emit(item.eventName, collapseGroup, item.id);
    });

    // Menu
    collapseGroup.on(MAIN_EVENTS.MENU_ACTION, (menu, menuItem) => {
        collapseGroup.stopPropagation(MAIN_EVENTS.MENU_ACTION);

        const item = menuItem._meta.item;
        collapseGroup.emit(item.eventName, collapseGroup, item.id);
    });
};
