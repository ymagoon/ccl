"use strict";

import UIComponent from "../../../../base";
import Select from "../../../atomic/select";
import { unique } from "../../../../helpers/core/generators";
import { forwardProp } from "../../../../helpers/props/props";
import {
    renderCriticalitySection,
    renderDualColumnView,
    renderErrorText,
    renderHelperText,
    renderTitle
} from "../helpers/view";
import {
    generateValueChangePayload
} from "../helpers/props";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const FormSelectEvents = {
    CHANGE: "FormSelect::change"
};

const namespace = "mpageui-FormSelect";

/**
 * The FormSelect class.
 * @class FormSelect
 */
class FormSelect extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._state = {
            showErrorText: false,
            showHelperText: true,
            value: null
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            criticalityHandler: null,
            completionHandler: (value) => value !== null,
            display: "",
            errorHandler: null,
            formName: unique(namespace),
            hasInlineLabel: false,
            helperHandler: null,
            isDisabled: false,
            isRequired: false,
            showErrorText: false,
            showHelperText: true,
            showRequiredIndicator: true,
            options: {},
            value: null,
            valueChangeEventName: FormSelectEvents.CHANGE
        };
    }

    propChangeHandlers() {
        return {
            isDisabled: forwardProp(this, "isDisabled", "select"),
            formName: forwardProp(this, "name", "select"),
            showErrorText: (showErrorText) => { this._state.showErrorText = showErrorText; },
            showHelperText: (showHelperText) => { this._state.showHelperText = showHelperText; },
            options: (options) => {
                this.getChild("select").setProps(options);
            },
            value: (value = null) => {
                this._state.value = value;
                this.getChild("select").setProp("selectedId", value);
            }
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                select: new Select(this.getProp("options"))
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(Select.EVENTS.SELECTION_CHANGE, (ctx, selectedId) => {
            this.stopPropagation(Select.EVENTS.SELECTION_CHANGE);

            this._state = {
                showErrorText: true,
                showHelperText: true,
                value: selectedId
            };

            this.emit(this.getProp("valueChangeEventName"), this,
                generateValueChangePayload(this.getProps(), selectedId)
            );

            this.update();
        });
    }

    /**
     * @inheritDoc
     */
    beforeRender() {
        /*
         If there is no placeholder and no value selected,
         the browser will automatically select the first value in the list.
         The state should reflect this.
         */
        const childSelect = this.getChild("select");
        const hasPlaceholder = childSelect.getProp("placeholder") !== null;
        if (!hasPlaceholder && (this._state.value === null || this._state.value === "")) {
            const items = childSelect.getProp("items") || [];
            this._state.value = items.length ? items[ 0 ].id || "0" : "";
        }
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        const state = this._state;
        return el(
            "div",
            {
                class: namespace
            },
            [
                renderDualColumnView(el, props.hasInlineLabel,
                    [
                        renderTitle(el, props)
                    ],
                    [
                        mappedChildren.select.render(),
                        renderErrorText(el, props, state),
                        renderCriticalitySection(el, props, state),
                        renderHelperText(el, props, state)
                    ]
                )
            ]
        );
    }
}

FormSelect.EVENTS = FormSelectEvents;

export default FormSelect;
