/* eslint-disable class-methods-use-this, consistent-return, array-callback-return */
"use strict";
import UIComponent from "../../../base/UIComponent";
import Search from "../search";
import Select from "../../atomic/select";
import i18n from "i18n";
import SearchPopup from "../search/popup/SearchPopup";
import { CHILDREN, EVENTS, NAMESPACE, THROTTLE_TIME } from "./const";
const { searchWithin: searchWithinI18n } = i18n();

/**
 * Returns a String containing the selected id
 * @param {Object} items contains the property value of selectItems
 * @param {String} value name of the selected item
 * @returns {String} the Selected id
 */
const getSelectedId = (items, value) => items.find((item) => item.id === value);

/**
 *  The Scope Search consist of a Select and a Search control.
 *  The select item is sent as one of the parameter to the Search control to generate the search Results that will appearing in the searchList
 *  In the Desktop and Tab Mode:
 *      -- The Select control will be rendered on the left and search control on the right.
 *   In the Mobile Mode:
 *      -- The Select will render on top of the search control.
 *      -- OnClick of the search bar the popup window appears with the search bar rendered in the Search header
 *      and below it a filter header Tab will be rendered.
 *      -- OnClick of the filter header another popup will appear with the list of selectable items.
 */
class ScopedSearch extends UIComponent {
    /**
     * @inheritDoc
     */

    initialProps() {
        return {
            dropDownOptions: {
                placeholder: null,
                label: "",
                noOptionsDisplay: "--"
            },
            searchOptions: {
                isLoading: false,
                placeholder: "",
                throttle: THROTTLE_TIME,
                selectedValue: "",
                results: [],
                value: ""
            },
            isDisabled: false,
            selectedId: "",
            selectItems: {},
            inputEventName: EVENTS.SEARCH_INPUT,
            selectionChangeEventName: EVENTS.SEARCH_SELECTION_CHANGE,
            submitEventNames: EVENTS.SEARCH_SUBMIT
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            /*
             * The control contains a Select and a Search Control, having all the initial props of both the control.
             */
            {
                [ CHILDREN.SELECT ]: new Select()
            },
            {
                [ CHILDREN.SEARCH ]: new Search()
            }
        ];
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            dropDownOptions: (item) => {
                if(item.label) {
                    this.getChild(CHILDREN.SELECT).setProp("label", item.label);
                }
                if(item.placeholder) {
                    this.getChild(CHILDREN.SELECT).setProp("placeholder", item.placeholder);
                }
                if(item.noOptionsDisplay) {
                    this.getChild(CHILDREN.SELECT).setProp("noOptionsDisplay", item.noOptionsDisplay);
                }
            },
            searchOptions: (item) => {
                if("isLoading" in item) { // if the key exist then update the prop
                    this.getChild(CHILDREN.SEARCH).setProp("isLoading", item.isLoading);
                }
                if(item.results) {
                    this.getChild(CHILDREN.SEARCH).setProp("results", item.results);
                }
                if(item.placeholder) {
                    this.getChild(CHILDREN.SEARCH).setProp("placeholder", item.placeholder);
                }
                if(item.throttle) {
                    this.getChild(CHILDREN.SEARCH).setProp("throttle", item.throttle);
                }
                if(item.selectedValue) {
                    this.getChild(CHILDREN.SEARCH).setProp("selectedValue", item.selectedValue);
                }
                if(item.value) {
                    this.getChild(CHILDREN.SEARCH).setProp("value", item.value);
                }
            },
            selectedId: (value) => {
                this.getChild(CHILDREN.SELECT).setProp("selectedId", value);
                this.getChild(CHILDREN.SEARCH).setProp("selectedId", value);
            },
            isDisabled: (disabled) => {
                this.getChild(CHILDREN.SELECT).setProp("isDisabled", disabled);
                this.getChild(CHILDREN.SEARCH).setProp("isDisabled", disabled);
            },
            selectItems: (items) => {
                this.getChild(CHILDREN.SELECT).setProp("items", items);
                this.getChild(CHILDREN.SEARCH).setProp("selectArray", items);
            }
        };
    }

    /**
     * @inheritDoc
     */
    beforeRender() {
        /**
         * If there is no select placeholder and no value selected,
         * the browser will automatically select the first value in the list.
         * The state should reflect this.
         */
        const dropDownOptions = this.getProp("dropDownOptions");
        const hasPlaceholder = dropDownOptions.placeholder !== null;
        const selectedId = this.getProp("selectedId");
        if ( !hasPlaceholder && (selectedId === null || selectedId === "")) {
            const items = this.getProp("selectItems") || [];
            this.setProp("selectedId", items.length ? items[0].id || "0" : null);
            this.getChild(CHILDREN.SEARCH).setProp("selectedValue", items.length ? items[0].display : null);
        }
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        // The below event is triggered when an item is selected from Select control.
        this.on(Select.EVENTS.SELECTION_CHANGE, (src, selectedId) => {
            const selectedName = getSelectedId(src.getProp("items"), selectedId);
            this.getChild(CHILDREN.SEARCH).setProp("selectedValue", selectedName.display);
            this.setProp("selectedId", selectedId);
            this.getChild(CHILDREN.SEARCH).setProp("selectArray", src.getProp("items"));
            this.getChild(CHILDREN.SEARCH).setProp("results", []);
        });

        // The below event is triggered when a input is entered in the search bar, and the searchInputEventName is emitted from the control
        this.on(Search.EVENTS.INPUT, (src, val) => {
            this.stopPropagation(Search.EVENTS.INPUT);
            const selectedItem = getSelectedId(this.getProp("selectItems"), this.getProp("selectedId"));
            this.emit(this.getProp("inputEventName"), { src, val, selectedItem });
        });

        // The below event is triggered when there is a change in the Search list, and the selectionChangeEventName is emitted from the control
        this.on(Search.EVENTS.SELECTION_CHANGE, (src, item) => {
            this.stopPropagation(Search.EVENTS.SELECTION_CHANGE);
            this.emit(this.getProp("selectionChangeEventName"), { src, item });
        });

        // The below event is triggered in Mobile mode when the back button from Navigation header is clicked.
        this.on(SearchPopup.EVENTS.SELECTION_CHANGE, (searchArray, selectedId) => {
            this.stopPropagation(SearchPopup.EVENTS.SELECTION_CHANGE);
            const selectedObj = getSelectedId(searchArray, selectedId);
            const selectName = selectedObj.display;
            this.setProp("selectedId", selectedObj.id);
            this.getChild(CHILDREN.SEARCH).setProp("selectedValue", selectName).update();
        });

        // The below event is triggered when Submit button is clicked from the search bar, and the searchSubmitEventName is emitted from the control
        this.on(Search.EVENTS.SUBMIT, (control) => {
            this.stopPropagation(Search.EVENTS.SUBMIT);
            this.emit(this.getProp("submitEventNames"), control);
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            {
                class: NAMESPACE
            },
            [
                el(
                    "div",
                    {
                        class: (props.selectItems.length > 1) ? `${NAMESPACE}--wrapper` : `${NAMESPACE}--selectSingleItem`
                    },
                    [
                        el(
                            "div",
                            {
                                class: `${NAMESPACE}--label`
                            },
                            searchWithinI18n
                        ),
                        el(
                            "div",
                            {
                                class: (props.selectItems.length === 1) ? `${NAMESPACE}--singleLabel` : `${NAMESPACE}--selectbox`
                            },
                            mappedChildren [ CHILDREN.SELECT ].render()
                        )
                    ]),
                el(
                    "div",
                    {
                        class: (props.selectItems.length === 1) ? `${NAMESPACE}--searchWrap` : `${NAMESPACE}--search`
                    },
                    mappedChildren[ CHILDREN.SEARCH ].render()
                )

            ]
        );
    }
}

ScopedSearch.EVENTS = EVENTS;
export default ScopedSearch;
