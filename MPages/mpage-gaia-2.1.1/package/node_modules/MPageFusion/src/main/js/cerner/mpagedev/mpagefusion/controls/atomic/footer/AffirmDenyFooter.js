/**
 * @fileoverview AffirmDenyFooter class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import FooterBase from "./FooterBase";
import Container from "../container";
import Button from "../button";
import { forwardProp } from "../../../helpers/props/props";

/**
 * Default event names
 * @type {{AFFIRM: string, DENY: string}}
 */
const defaultEventNames = {
    AFFIRM: "AffirmDenyFooter::affirm",
    DENY: "AffirmDenyFooter::deny"
};

/**
 * Default css class names
 * @type {{affirm: string}}
 */
const defaultClassNames = {
    affirm: "mpageui-AffirmDenyFooter-affirm",
    deny: "mpageui-AffirmDenyFooter-deny"
};

/**
 * Creates the affirm button based on the visible indicator.
 * @param {string} display - display string for the button
 * @param {Boolean} isVisible - is the button visible
 * @param {Boolean} disabled - is the button disabled
 * @returns {Array.<Button>} array with one button in it or empty array
 * @private
 */
const getAffirmButton = (display, isVisible, disabled) => isVisible ?
    ([
        new Button({
            display,
            classNames: defaultClassNames.affirm,
            type: Button.TYPE.PRIMARY,
            disabled,
            clickEventName: `__${defaultEventNames.AFFIRM}__`
        })
    ]) : [];

/**
 * Render the sections of the content bar
 * @param {AffirmDenyFooter} ctx - Context reference
 * @returns {Function} Function which updates the section buttons
 * @private
 */
const updateSectionButtons = (ctx) => () => {
    ctx.getChild("base")
        .setProp("rSection", new Container({}, [
            // affirm button
            ...getAffirmButton(
                ctx.getProp("affirmDisplay"),
                ctx.getProp("showAffirm"),
                ctx.getProp("isAffirmDisabled")
            ),
            // deny button
            new Button({
                display: ctx.getProp("denyDisplay"),
                classNames: defaultClassNames.deny,
                clickEventName: `__${defaultEventNames.DENY}__`
            })
        ]));
};

/**
 * AffirmDenyFooter class.
 * @class AffirmDenyFooter
 * @constructor
 */
export default class AffirmDenyFooter extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            classNames: "",
            denyDisplay: "Cancel", // consumers should always override this with i18n strings
            denyClickEventName: defaultEventNames.DENY,
            showAffirm: true,
            isAffirmDisabled: false,
            affirmDisplay: "Save", // consumers should always override this with i18n strings
            affirmClickEventName: defaultEventNames.AFFIRM,
            bgStyle: FooterBase.BG_STYLE.ANCHOR
        };
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            denyDisplay: updateSectionButtons(this),
            affirmDisplay: updateSectionButtons(this),
            isAffirmDisabled: updateSectionButtons(this),
            showAffirm: updateSectionButtons(this),
            classNames: forwardProp(this, "classNames", "base"),
            bgStyle: forwardProp(this, "bgStyle", "base")
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                base: new FooterBase({
                    isBisected: false,
                    bgStyle: FooterBase.BG_STYLE.ANCHOR
                })
            }
        ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.redirectEventUsingProp(`__${defaultEventNames.AFFIRM}__`, "affirmClickEventName", this);
        this.redirectEventUsingProp(`__${defaultEventNames.DENY}__`, "denyClickEventName", this);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}

/**
 * Event names
 * @type {{AFFIRM: string, DENY: string}}
 */
AffirmDenyFooter.EVENT_NAMES = defaultEventNames;

/**
 * @inheritDoc
 */
AffirmDenyFooter.BG_STYLE = FooterBase.BG_STYLE;
