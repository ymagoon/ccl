"use strict";

export const eventNames = {
    PRIVATE: {
        ROW_SELECTION_CHANGE: "__Table::rowSelectionChange__"
    },
    PUBLIC: {
        ROW_SELECTION_CHANGE: "Table::rowSelectionChange",
        COLUMN_HEADER_CLICK: "Table::columnHeaderClick",
        SECTION_HEADER_CLICK: "Table::sectionHeaderClick"
    }
};

/**
 * Data types to describe the data of different containers like columns or cells, etc
 * @type {{ICON: string, ACTION: string, DEFAULT: string}}
 */
export const dataTypes = {
    ICON: "mpageui-Table--icon",
    ACTION: "mpageui-Table--action",
    DEFAULT: "mpageui-Table--default"
};

/**
 * Compares two values.
 * @param {*} a - The first value.
 * @param {*} b - The second value.
 * @returns {number} The comparison value.
 */
const compare = (a, b) => {
    let aVal = a;
    let bVal = b;
    if (typeof a === "number" || typeof b === "number") {
        aVal = a || 0;
        bVal = b || 0;
    }
    else if (typeof a === "string" || typeof b === "string") {
        aVal = (a || "").toUpperCase();
        bVal = (b || "").toUpperCase();
    }
    if (aVal > bVal) {
        return 1;
    }
    else if (aVal < bVal) {
        return -1;
    }
    else {
        return 0; // Same
    }
};

/**
 * Sorts a list of rows with a sort configuration.
 * @param {Array<Object>} rows - Array of table rows.
 * @param {Array<Object>} sortOn - Array of sort configurations.
 * @returns {Array<Object>} The sorted rows.
 */
const sortRows = (rows, sortOn) => rows.sort((rowA, rowB) =>
    sortOn.reduce(
        (prev, next) =>
            (prev !== 0) ? prev : next(rowA, rowB)
        , 0
    )
);

/**
 * Sorts an array of table subsections.
 * @param {Array<Object>} subsections - Array of table subsections.
 * @param {Array<Object>} sortOn - The sorting configuration.
 * @returns {Array<Object>} The sorted subsections.
 */
const sortSubsections = (subsections, sortOn) =>
    subsections.map((subsection) =>
        Object.assign({}, subsection, {
            rows: sortRows(subsection.rows, sortOn)
        }));

/**
 * Takes the index of the column, a function to extract the sortable data
 * from the column, and a direction and compares two rows for sorting.
 * @param {number} colIndex - The index of the column in the table.
 * @param {Function} fieldExtractor - A function that takes a table cell
 * and extracts the sortable data.
 * @param {number} direction - The direction to sort.
 * @param {Function} [customCompare] - An optional compare function for consumers
 * that wish to have control over the value comparison.
 * @returns {Function} A function that takes two rows and compares them for sorting.
 */
export const compareColumn =
    (colIndex, fieldExtractor, direction, customCompare) =>
        (rowA, rowB) => (
            customCompare ?
                customCompare(
                    fieldExtractor(rowA.data[ colIndex ]),
                    fieldExtractor(rowB.data[ colIndex ])
                ) :
                compare(
                    fieldExtractor(rowA.data[ colIndex ]),
                    fieldExtractor(rowB.data[ colIndex ])
                )
        ) * direction;

/**
 * Takes the index of the column, a field in the data within a table cell, and
 * a direction and compares two rows for sorting.
 * @param {number} colIndex - The index of the column in the table.
 * @param {string} field - The name of the field in the table cell to use
 * for sorting.
 * @param {number} direction - The direction to sort.
 * @param {Function} [customCompare] - An optional compare function for consumers
 * that wish to have control over the value comparison.
 * @returns {Function} A function that takes two rows and compares them for sorting.
 */
export const compareColumnWithField =
    (colIndex, field, direction, customCompare) =>
        compareColumn(
            colIndex,
            (cell) => cell[ field ],
            direction,
            customCompare
        );

/**
 * Takes the key of the column, the columns, a field extractor, and a direction
 * and compares two rows for sorting.
 * @param {string} colKey - The unique key of the column.
 * @param {Array<Object>} columns - The array of columns.
 * @param {Function} fieldExtractor - A function that takes a table cell
 * and extracts the sortable data.
 * @param {number} direction - The direction to sort.
 * @param {Function} [customCompare] - An optional compare function for consumers
 * that wish to have control over the value comparison.
 * @returns {Function} A function that takes two rows and compares them for sorting.
 */
export const compareKeyedColumn =
    (colKey, columns, fieldExtractor, direction, customCompare) =>
        compareColumn(
            columns.findIndex((col) => col.key === colKey),
            fieldExtractor,
            direction,
            customCompare
        );

/**
 * Takes a sort config and returns a function that will sort
 * either subsections or rows of a table.
 * @param {Array<Function>} comparisons - The sort configuration.
 * @returns {Function} A function that takes rows or subsections
 * and sorts them.
 */
export const sort = (comparisons) => ({ rows, subSections }) =>
    subSections ?
        sortSubsections(subSections, comparisons) :
        sortRows(rows, comparisons);
