import UIComponent from "../../../base/UIComponent";
import { unique } from "../../../helpers/core/generators";
import { makeOrGetId } from "../../../helpers/dom/dom";
import Sticky from "../../../behaviors/Sticky";

/**
 * Callback for the view to register the container element.
 *
 * @param {ScrollPane} control - source control
 * @param {HTMLElement} container - dom element for the container
 * @returns {undefined} undefined
 */
const scrollContainerCreated = (control) => (container) => {
    control._stickyBehavior.setContainer(makeOrGetId(container)); // eslint-disable-line no-underscore-dangle
    container.onscroll = () => {
        control.triggerScroll();
    };
};

/**
 * Returns all the sticky containers in a list of children.
 * It will run all the children recursivelly.
 *
 * @param {Array<UIControl>} children list of immediate children
 * @param {String} slotName the name of the slot
 * @returns {Array<UIControl>} all the sticky controls
 */
const childStickyContainers = (children, slotName) =>
    children.reduce(
        (result, child) =>
            child.getProp("scrollPaneSlot") === slotName
                ? result.concat(child)
                : result.concat(childStickyContainers(child.getChildren(), slotName))
        , []);

/**
 * Creates a reference/content pair from a list of child sticky controls
 *
 * @param {Array<UIControl>} children list of children
 * @returns {*} a reference/content pair
 */
const referenceContentPairFrom = (children) =>
    children.map((child) => ({
        reference: child.getProp("referenceElementId"),
        content: child.getProp("contentElementId")
    }));

/**
 * Detects the child sticky DOM elements and sets them inside
 * the sticky behavior.
 *
 * @param {ScrollPane} control the scroll pane
 * @returns {undefined} undefined
 */
const buildElements = (control) =>
    control._stickyBehavior.setElements( // eslint-disable-line no-underscore-dangle
        referenceContentPairFrom(childStickyContainers(
            control.getChildren(),
            control.getProp("scrollPaneSlot")
        )));

/**
 * A container that, if it has a scrollbar, will emit scroll down events
 * and stick any child StickyContainers to the top.
 */
class ScrollPane extends UIComponent {
    constructor(props, children) {
        super(props, children);
        this._stickyBehavior = new Sticky();
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            className: "mpageui-ScrollPane",
            scrollEventName: ScrollPane.EVENTS.SCROLL,
            scrollPaneSlot: "default"
        };
    }

    /**
     * Detects all the sticky containers in the children.
     * This happens automatically, but might be necessary to
     * be triggered manually if the order of the child elements
     * change.
     * @returns {undefined}
     */
    detectStickyContainers() {
        buildElements(this);
        this._stickyBehavior.update();
    }

    /**
     * Triggers the scroll event
     * @returns {undefined} undefined
     */
    triggerScroll() {
        this.emitDown(ScrollPane.EVENTS.SCROLL, this);
        if (!this._stickyBehavior.getElements().length) {
            buildElements(this);
        }
        this._stickyBehavior.update();
    }

    /**
     * @inheritdoc
     */
    view(el, props, children) {
        return el("div", {
            class: props.className
        }, this.renderChildren(), scrollContainerCreated(this));
    }

}

/**
 * Default event names. Guaranteed to be unique due to the use of
 * the unique function.
 */
ScrollPane.EVENTS = {
    SCROLL: unique("scroll"),
    REGISTER_STICKY: unique("register_sticky")
};

export default ScrollPane;
