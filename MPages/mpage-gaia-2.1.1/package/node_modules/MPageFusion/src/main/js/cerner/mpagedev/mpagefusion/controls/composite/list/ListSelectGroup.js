import UIComponent from "../../../base";
import classNames from "classnames";
import SelectGroup from "../select-group/SelectGroup";
import ListSelectButton from "./ListSelectButton";
import { forwardProp } from "../../../helpers/props/props";
import { isNotEmpty } from "../../../helpers/core/array";

const LIST_SELECT_GROUP_ITEM = "mpageui-listselectgroup-item";

/**
 * Shows a list of toggable items that can be toggled individually or one at a time,
 * depending on the values of canDeselect and multiSelect. Should only be used within Lists.
 */
export default class ListSelectGroup extends UIComponent {

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            items: [],
            canDeselect: true,
            multiSelect: false,
            classNames: "",
            defaultClassNames: "mpageui-List-selectgroup",
            selectionChangeEventName: ListSelectGroup.EVENTS.SELECTION_CHANGE
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            { selectGroup: new SelectGroup({
                canDeselect: this.getProp("canDeselect"),
                multiSelect: this.getProp("multiSelect"),
                itemGenerator: (props) =>
                    new ListSelectButton(Object.assign({
                        type: "list",
                        classNames: LIST_SELECT_GROUP_ITEM
                    }, props), [])
            }) }
        ];
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.convertEvent(
            this.getChild("selectGroup").getProp("selectionChangeEventName"),
            this.getProp("selectionChangeEventName"),
            (sourceControl, payload) => [ this, payload ]
        );
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            items: forwardProp(this, "items", "selectGroup"),
            canDeselect: forwardProp(this, "canDeselect", "selectGroup"),
            multiSelect: forwardProp(this, "multiSelect", "selectGroup"),
            classNames: (classes) => this.getChild("selectGroup")
                .setProp("classNames", classNames({
                    "mpageui-List--grouped": true,
                    [ this.getProp("defaultClassNames") ]: isNotEmpty(this.getProp("defaultClassNames")),
                    [ classes ]: isNotEmpty(classes)
                }))
        };
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return this.renderChildren();
    }
}

ListSelectGroup.EVENTS = {
    SELECTION_CHANGE: "ListSelectGroup::SelectionChange"
};

