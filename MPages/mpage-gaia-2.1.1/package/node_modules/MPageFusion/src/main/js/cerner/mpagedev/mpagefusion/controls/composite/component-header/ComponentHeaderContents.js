import UIComponent from "../../../base/UIComponent";
import RefreshButton from "./RefreshButton";
import { getSelected } from "../../../helpers/core/object";
import LookbackFilter from "./LookbackFilter";
import AddIcon from "../../atomic/icon/svg/category/content/Add";
import Button from "../../atomic/button";
import Menu from "../menu";
import MenuIcon from "../../atomic/icon/svg/category/content/Menu";
import GapCheckingIcon from "../../atomic/icon/svg/category/alert/GapChecking";
import ErrorIcon from "../../atomic/icon/svg/category/alert/Error";
import { SplitButton }from "../button";
import MenuButton from "../button/MenuButton";
import { forwardProp, emitUsingProp } from "../../../helpers/props/props";
import ButtonGroup from "../select-group/ButtonGroup";
import i18n from "i18n";
import LoadingSpinner from "../../atomic/indicator/LoadingSpinner";
import MoveToRightPane from "../../atomic/icon/svg/category/navigation/MoveToRightPane";
import MoveToLeftPane from "../../atomic/icon/svg/category/navigation/MoveToLeftPane";
import RefreshIcon from "../../atomic/icon/svg/category/content/Refresh";
import classnames from "classnames";

/**
 * Displays the plus add split menu if there are menu contents and the show plus
 * add is enabled.
 * @param {ComponentHeaderContents} control - the control
 * @returns {VDom} the rendered menu or false if the conditions are not met
 */
const renderPlusAddSplitMenu = (control) =>
    !control.getProp("plusAddMenu").length || !control.getProp("showPlusAdd") ? false
        : control.getChild("plusAddSplit").render();

/**
 * Displays the plus add menu if there are menu contents and the show plus
 * add is not enabled.
 * @param {ComponentHeaderContents} control - the control
 * @returns {VDom} the rendered menu or false if the conditions are not met
 */
const renderPlusAddMenuOnly = (control) =>
    !control.getProp("plusAddMenu").length || control.getProp("showPlusAdd") ? false
        : control.getChild("plusAddMenuOnly").render();

/**
 * Displays the plus add menu if there are menu contents and the show plus
 * add is not enabled.
 * @param {ComponentHeaderContents} control - the control
 * @returns {VDom} the rendered menu or false if the conditions are not met
 */
const renderPlusAddButton = (control) =>
    !control.getProp("showPlusAdd") ? false
        : control.getChild("plusAddButton").render();

/**
 * Renders a single plus add button or a combination of menu and plus add
 * button depending on whether the showPlusAdd is set and there are plus add
 * menu items defined.
 * @param {ComponentHeaderContents} control - the control
 * @returns {VDom} the rendered menu or false if the conditions are not met
 */
const renderPlusAdd = (control) =>
    renderPlusAddSplitMenu(control)
|| renderPlusAddMenuOnly(control)
|| renderPlusAddButton(control)
|| [];


/**
 * Adds parenthesis if count is a number.
 * @param {String|Integer} count - the count
 * @returns {String} the formatted count
 */
const formatCount = (count) =>
    typeof count === "number"
        ? `(${count})` : count;

/**
 * Template for the count section
 *
 * @param {function} el function
 * @param {Integer} countNum the count
 * @returns {VDom} vdom
 */
const count = (el, countNum) => countNum !== null && countNum !== undefined ?
    el("span", { class: "mpageui-ComponentHeader-count" }, formatCount(countNum))
    : [];

/**
 * Template for the title section
 *
 * @param {function} el element function
 * @param {*} props mapped control props
 * @param {ComponentHeaderContents} control the current control
 * @returns {VDom} vdom
 */
const title = (el, props, control) =>
    el(props.showTitleAsLink ? "a" : "span", {
        class: "mpageui-ComponentHeader-title",
        onclick: emitUsingProp("titleClickEventName", control)
    }, props.title);

/**
 * Template for the lookback subheader that displays the currently selected
 * lookback range below the header on small resolutions.
 *
 * @param {function} el element function
 * @param {*} props mapped control props
 * @returns {VDom} vdom
 */
const lookbackSubheader = (el, props) => {
    // return empty if we don't have at least one lookback option
    if (!props.lookbackOptions || props.lookbackOptions.length < 1) {
        return [];
    }

    // returns the first prop that has isSelected == true, or the only
    // prop if there is only one item in lookbackOptions.
    const selectedProps = props.lookbackOptions.length === 1
        ? props.lookbackOptions
        : getSelected(props.lookbackOptions);

    if (selectedProps && selectedProps.length && selectedProps[ 0 ].display.length) {
        return el("div",
            {
                class: classnames({
                    [`mpageui-u-show-for-${props.hideHeaderButtonsUnder}`]: props.hideHeaderButtonsUnder,
                    "mpageui-ComponentHeader-lookbackSubheader": true
                })
            },
            [ props.lookbackLabel ? `${props.lookbackLabel}: ${selectedProps[ 0 ].display}` : selectedProps[ 0 ].display ]
        );
    }
    return [];
};

/**
 * Template for the gap check indicator section
 *
 * @param {function} el the element function
 * @param {ComponentHeaderContents} control the current control
 * @returns {VDom} vdom
 */
const gapCheckIndicator = (el, control) =>
    el(
        "span",
        {
            onclick: emitUsingProp("gapCheckClickEventName", control),
            class: "mpageui-ComponentHeader-gapcheckicon"
        },
        new GapCheckingIcon().render()
    );

/**
 * Converts a list of items into SelectButton properties.
 * @param {Array<*>} items - the items
 * @returns {Array<*>} ButtonGroup JSON list
 */
const makeToggleItems = (items) =>
    items.map((item) => ({
        item,
        icon: item.icon,
        display: item.display,
        isSelected: item.isSelected
    }));

/**
 * Renders refresh menu if refreshMenu items are defined else refresh button is rendered.
 * @param {ComponentHeaderContents} control - the control
 * @returns {VDom} renders refreshMenu or refreshButton
 */
const renderRefresh = (control) =>
    control.getProp("refreshMenu") && control.getProp("refreshMenu").length
        ? control.getChild("refreshMenu").render()
        : control.getChild("refreshButton").render();

/**
 * Renders the button section of the header.
 * @param {function} el - the function that renders vdom elements
 * @param {UIComponent} control - the header
 * @param {*} props - JSON with props
 * @param {Array<UIComponent>} mChildren - child controls
 * @returns {VDom} vdom
 */
const renderButtons = (el, control, props, mChildren) =>
    el("span",
        {
            class: classnames({
                [`mpageui-u-show-for-${props.hideHeaderButtonsUnder}`]: props.hideHeaderButtonsUnder,
                "mpageui-ComponentHeader-buttons": true
            })
        },
        [
            renderPlusAdd(control),
            props.lookbackOptions
            && props.lookbackOptions.length === 1
            && props.lookbackOptions[ 0 ].display.length
                ? el("span",
                    {
                        class: "mpageui-ComponentHeader-defaultLookback"
                    },
                    props.lookbackOptions[ 0 ].display)
                : [],
            props.lookbackOptions.length > 1 ? mChildren.lookbackOptions.render() : [],
            props.toggles && props.toggles.length ? mChildren.toggles.render() : [],
            props.showContextualViewButton ? mChildren.contextualView.render() : [],
            props.showRefreshButton ? renderRefresh(control) : [],
            props.componentMenu && props.componentMenu.length ? mChildren.componentMenu.render() : []
        ]
    );

/**
 * A responsive component header which displays the component title and
 * other actionable items and resizes them accordingly with various
 * screen resolutions. This should be the entry point for all component header
 * rendering needs. For details on how the particular buttons and menus
 * resize or work, please see their individual classes.
 */
class ComponentHeaderContents extends UIComponent {

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            componentMenu: [],
            componentMenuAutoInsertDividers: true,
            componentMenuBasicActionEventName: ComponentHeaderContents.EVENTS.COMPONENT_MENU_BASIC_ACTION,
            componentMenuSelectionChangeEventName: ComponentHeaderContents.EVENTS.COMPONENT_MENU_SELECTION_CHANGE,
            componentMenuToggleEventName: ComponentHeaderContents.EVENTS.COMPONENT_MENU_TOGGLE,
            contextualViewClickEventName: ComponentHeaderContents.EVENTS.CONTEXTUAL_VIEW_CLICK,
            contextualViewDirection: ComponentHeaderContents.CONTEXTUAL_VIEW.LEFT,
            count: null,
            gapCheckClickEventName: ComponentHeaderContents.EVENTS.GAP_CHECK_CLICK,
            isLoading: false,
            lookbackChangeEventName: ComponentHeaderContents.EVENTS.LOOKBACK_CHANGE,
            lookbackOptions: [],
            lookbackLabel: "",
            plusAddEventName: ComponentHeaderContents.EVENTS.PLUS_ADD,
            plusAddMenu: [],
            refreshEventName: ComponentHeaderContents.EVENTS.REFRESH,
            showError: false,
            showGapCheckIndicator: false,
            showPlusAdd: true,
            showRefreshButton: true,
            showTitleAsLink: false,
            showContextualViewButton: false,
            subLabel: "",
            title: "",
            titleClickEventName: ComponentHeaderContents.EVENTS.TITLE_CLICK,
            toggleEventName: ComponentHeaderContents.EVENTS.TOGGLE,
            toggles: [],
            refreshButtonTitle: "",
            refreshMenu: [],
            hideHeaderButtonsUnder: ""
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                refreshButton: new RefreshButton({
                    classNames: "mpageui-ComponentHeader-refresh"
                })
            },
            {
                refreshMenu: new Menu({
                    showHeader: false,
                    anchorControl: new Button({
                        classNames: "mpageui-ComponentHeader-refreshMenu",
                        type: "secondary",
                        icon: new RefreshIcon()
                    })
                })
            },
            {
                componentMenu: new Menu({
                    showHeader: false,
                    anchorControl: new Button({
                        type: "secondary",
                        icon: new MenuIcon()
                    })
                })
            },
            {
                plusAddMenuOnly: new MenuButton({
                    classNames: "mpageui-ComponentHeader-plusadd",
                    icon: new AddIcon(),
                    type: "secondary"
                })
            },
            {
                plusAddSplit: new SplitButton({
                    classNames: "mpageui-ComponentHeader-plusadd",
                    icon: new AddIcon(),
                    type: "secondary"
                })
            },
            {
                plusAddButton: new Button({
                    classNames: "mpageui-ComponentHeader-plusadd",
                    icon: new AddIcon(),
                    type: "secondary"
                })
            },
            {
                toggles: new ButtonGroup({
                    classNames: "mpageui-ComponentHeader-toggles"
                })
            },
            {
                loadingSpinner: new LoadingSpinner({
                    classNames: "mpageui-ComponentHeader-loadingSpinner",
                    size: LoadingSpinner.SIZE.SMALL
                })
            },
            {
                contextualView: new Button({
                    classNames: "mpageui-ComponentHeader-contextualView",
                    type: "secondary"
                })
            }
        ];
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            refreshEventName: forwardProp(this, "refreshEventName", "refreshButton"),
            refreshButtonTitle: forwardProp(this, "title", "refreshButton"),
            componentMenuSelectionChangeEventName: forwardProp(this, "selectionChangeEventName", "componentMenu"),
            componentMenuToggleEventName: forwardProp(this, "toggleEventName", "componentMenu"),
            componentMenuBasicActionEventName: forwardProp(this, "basicActionEventName", "componentMenu"),
            componentMenuAutoInsertDividers: forwardProp(this, "autoInsertDividers", "componentMenu"),
            componentMenu: forwardProp(this, "content", "componentMenu"),
            contextualViewClickEventName: forwardProp(this, "clickEventName", "contextualView"),
            toggleEventName: forwardProp(this, "selectionChangeEventName", "toggles"),
            isLoading: forwardProp(this, "isLoading", "loadingSpinner"),
            refreshMenu: forwardProp(this, "content", "refreshMenu"),
            toggles: (toggles) => {
                this.getChild("toggles").setProp("items", makeToggleItems(toggles));
            },
            plusAddMenu: (menu) => {
                this.getChild("plusAddSplit").setProp("content", menu);
                this.getChild("plusAddMenuOnly").setProp("content", menu);
            },
            plusAddEventName: (eventName) => {
                this.getChild("plusAddSplit").setProp("clickEventName", eventName);
                this.getChild("plusAddButton").setProp("clickEventName", eventName);
            },
            lookbackOptions: (lookback) =>
                this.replaceMappedChild("lookbackOptions", new LookbackFilter({
                    title: i18n().lookbackRange,
                    lookbackOptions: lookback,
                    lookbackLabel: this.getProp("lookbackLabel"),
                    lookbackChangeEventName: this.getProp("lookbackChangeEventName")
                })),
            contextualViewDirection: (direction) => {
                this.getChild("contextualView")
                    .setProp(
                        "icon",
                        direction === ComponentHeaderContents.CONTEXTUAL_VIEW.RIGHT
                            ? new MoveToRightPane()
                            : new MoveToLeftPane()
                    );
            }
        };
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return [
            el("div",
                {
                    className: "mpageui-ComponentHeader-main"
                },
                [
                    el("div",
                        {
                            class: "mpageui-ComponentHeader-name mpageui-u-text-align"
                        },
                        [
                            props.showError ? new ErrorIcon({
                                classNames: "mpageui-ComponentHeader-errorIcon"
                            }).render() : [],
                            mChildren.loadingSpinner.render(),
                            props.showGapCheckIndicator && !props.showError ? gapCheckIndicator(el, this) : [],
                            title(el, props, this),
                            count(el, props.count),
                            el("div", { class: "mpageui-ComponentHeader-sublabel" }, props.subLabel)
                        ]
                    ),
                    props.showError || props.isLoading ?
                        [] : renderButtons(el, this, props, mChildren)
                ]
            ),
            !props.showError ? lookbackSubheader(el, props) : []
        ];
    }
}

ComponentHeaderContents.EVENTS = {
    COMPONENT_MENU_BASIC_ACTION: "ComponentHeaderContents::componentMenuBasicAction",
    COMPONENT_MENU_SELECTION_CHANGE: "ComponentHeaderContents::componentMenuSelectionChange",
    COMPONENT_MENU_TOGGLE: "ComponentHeaderContents::componentMenuToggle",
    CONTEXTUAL_VIEW_CLICK: "ComponentHeaderContents::contextualViewClick",
    GAP_CHECK_CLICK: "ComponentHeaderContents::gapCheckClick",
    LOOKBACK_CHANGE: "ComponentHeaderContents::lookbackChange",
    PLUS_ADD: "ComponentHeaderContents::plusAdd",
    REFRESH: "ComponentHeaderContents::refresh",
    TITLE_CLICK: "ComponentHeaderContents::titleClick",
    TOGGLE: "ComponentHeaderContents::toggle"
};

ComponentHeaderContents.CONTEXTUAL_VIEW = {
    LEFT: "ContextualViewLeft",
    RIGHT: "ContextualViewRight"
};

/**
 * Breakpoints for  Header Buttons to make them responsive
 * @type {{SMALL: string, MEDIUM: string, LARGE: string}}
 */
ComponentHeaderContents.BREAKPOINTS = {
    SMALL: "sm",
    MEDIUM: "md",
    LARGE: "lg"
};
export default ComponentHeaderContents;
