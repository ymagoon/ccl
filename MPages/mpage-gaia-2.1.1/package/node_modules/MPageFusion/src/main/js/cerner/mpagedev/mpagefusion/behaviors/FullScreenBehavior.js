/**
 * @fileoverview
 * @author Gyandeep Singh
 */

"use strict";

import { bottom } from "../helpers/dom/positioning";
import { getDemoBannerElem } from "../helpers/dom/dom";

const defaultOptions = {
    coverDemoBanner: false,
    adjustHeightElemQuery: null
};

/**
 * Attach the Node to the document body
 * @param {HTMLElement} element - Element to attach to body
 * @returns {undefined}
 * @private
 */
const moveNodeToDocBody = (element) => {
    document.body.appendChild(element);
};

/**
 * Gets the top value for the full screen element based on demo banner's bottom.
 * @param {boolean} coverDemoBanner - true then it will cover the demo banner also
 * @returns {int} top value for the element
 * @private
 */
const getTopBasedOnDemoBanner = (coverDemoBanner) => {
    const demoBannerElem = getDemoBannerElem();

    if (coverDemoBanner || !demoBannerElem) {
        return 0;
    }

    return bottom(demoBannerElem);
};

/**
 * Get the element whose height needs to be adjusted.
 * @param {HTMLElement} element - Base fullscreen element
 * @param {string} [adjustHeightElemQuery] - Query for the element to look for
 * @returns {HTMLElement} Element whose height will be adjusted
 * @private
 */
const getElemForHeight = (element, adjustHeightElemQuery) =>
    adjustHeightElemQuery ? element.querySelector(adjustHeightElemQuery) : element;


/**
 * Adjust the top of the popup based on the demographics banner height
 * @param {HTMLElement} element - Popup pane DOM element
 * @param {boolean} coverDemoBanner - Popup pane DOM element
 * @param {string} adjustHeightElemQuery - Popup pane DOM element
 * @returns {undefined}
 * @private
 */
const adjustElementDimensions = (element, { coverDemoBanner, adjustHeightElemQuery }) => {
    const elemTop = getTopBasedOnDemoBanner(coverDemoBanner);

    element.style.top = `${elemTop}px`;
    element.style.left = 0;

    const heightElem = getElemForHeight(element, adjustHeightElemQuery);
    heightElem.style.height = `calc(100% - ${elemTop}px)`;
    heightElem.style.top = `${elemTop}px`;
};

/**
 * Adjust the top of the popup based on the demographics banner height
 * @param {HTMLElement} element - Popup pane DOM element
 * @param {string} adjustHeightElemQuery - Popup pane DOM element
 * @returns {undefined}
 * @private
 */
const undoElementAdjustments = (element, { adjustHeightElemQuery }) => {
    element.style.removeProperty("top");
    element.style.removeProperty("left");
    getElemForHeight(element, adjustHeightElemQuery).style.removeProperty("height");
};

/**
 * FullScreen behavior class
 */
export default class FullScreenBehavior {
    /**
     * @Constructor
     * @param {HTMLElement} element - DOM element which needs to go full screen.
     * @param {object} options - Options object
     * @returns {undefined}
     */
    constructor(element, options = {}) {
        this._element = null;
        this._options = defaultOptions;

        this.setElement(element);
        this.setOptions(options);
    }

    /**
     * Sets the dom element
     * @param {HTMLElement} elem - DOM element
     * @returns {FullScreenBehavior} Full screen object
     */
    setElement(elem) {
        this._element = elem;

        return this;
    }

    /**
     * Get the dom element
     * @returns {HTMLElement|null} Element if it exists
     */
    getElement() {
        return this._element;
    }

    /**
     * Set the options object
     * @param {object} options - options
     * @returns {FullScreenBehavior} Full screen object
     */
    setOptions(options = {}) {
        this._options = Object.assign({}, this._options, options);

        return this;
    }

    /**
     * Get the option object
     * @returns {object} options object
     */
    getOptions() {
        return this._options;
    }

    /**
     * Moves the DOM element to the document body
     * @returns {FullScreenBehavior} full screen object
     */
    init() {
        // move the element to the element
        moveNodeToDocBody(this.getElement());

        return this;
    }

    /**
     * Adjust the DOM element
     * @returns {FullScreenBehavior} full screen object
     */
    update() {
        // adjust the size of the element
        adjustElementDimensions(this.getElement(), this.getOptions());

        return this;
    }

    /**
     * Adjust the DOM element
     * @returns {FullScreenBehavior} full screen object
     */
    undo() {
        undoElementAdjustments(this.getElement(), this.getOptions());

        return this;
    }

    /**
     * Remove the element from the object
     * @returns {FullScreenBehavior} full screen object
     */
    gc() {
        this._element = null;

        return this;
    }
}
