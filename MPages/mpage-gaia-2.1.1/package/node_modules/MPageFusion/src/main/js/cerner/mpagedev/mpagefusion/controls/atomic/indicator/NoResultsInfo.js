"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import i18n from "i18n";
import { svg } from "../../atomic/icon";
import Button from "../../atomic/button";
import { unique } from "../../../helpers/core/generators";

const { noResultsFound, moreDetail } = i18n();
/**
* Enumeration of events emitted by the NoResultsInfo.
* @type {{CLICK: string}}
*/
const EVENTS = {
    CLICK: "NoResultsInfo::click"
};

/**
 * events private to the NoResultsInfo.
 * @type {{CLICK: string}}
 */
const PRIVATE_EVENTS = {
    CLICK: "__NoResultsInfo::click__"
};

/**
 * Renders the NoResults icon with the given size, if the showIcon prop is not false.
 * @param {Function} el - A function for creating virtual elements.
 * @param {boolean} showIcon - flag to display icon or not.
 * @param {string} size - size of the icon.
 * @returns {VDom} The rendered icon.
 */
const renderIcon = (el, showIcon, size) => showIcon ? ([
    el(
        "div", {
        }, new svg.content.NoResultsGlyph({
            classNames: `mpageui-NoResultsInfo-icon--${size}`
        }).render()
    )
]) : [];

/**
 * Renders the action button, if the showAction prop is true.
 * @param {Function} el - A function for creating button.
 * @param {Object} props - NoResultInfo props.
 * @param {Array<UIComponent>} [mChildren] - The mapped children of the NoResultsInfo.
 * @returns {VDom} The rendered button.
 */
const renderActionButton = (el, props, mChildren) => props.showAction ? ([
    el(
        "div", {
            class: "mpageui-NoResultsInfo-action"
        }, mChildren.button.render()
    )
]) : [];

/**
 * Renders the NoResultsInfo title with the given size.
 * @param {Function} el - A function for creating virtual elements.
 * @param {string} [title] - the title to be displayed.
 * @param {string} [size] - size of the title.
 * @returns {VDom} The rendered title.
 */
const renderTitle = (el, title, size) => ([
    el(
        "div", {
            class: `mpageui-NoResultsInfo-title--${size}`
        }, title
    )
]);

/**
 * Renders the NoResultsInfo description with the given size.
 * @param {Function} el - A function for creating virtual elements.
 * @param {string} [description] - the description to be displayed.
 * @param {string} [size] - size of the title.
 * @returns {VDom} The rendered description.
 */
const renderDescription = (el, description, size) => description !== "" ? ([
    el(
        "div", {
            class: `mpageui-NoResultsInfo-description--${size}`
        }, description
    )
]) : [];

/**
 * The NoResultsInfo class, typically used to indicate that a data retrieval returned no
 * results.
 * @class NoResultsInfo
 */
export default class NoResultsInfo extends UIComponent {
    /**
     * @inheritDoc
     */
    beforeCreate() {
        this._uniqueKey = unique("no-results");
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            actionClickEventName: EVENTS.CLICK,
            actionDisplay: moreDetail,
            classNames: "",
            defaultClassNames: "mpageui-NoResultsInfo",
            description: "",
            showAction: false,
            showIcon: true,
            size: "small",
            title: noResultsFound
        };
    }
    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                button: new Button({
                    type: Button.TYPE.SECONDARY,
                    display: this.getProp("actionDisplay"),
                    clickEventName: PRIVATE_EVENTS.CLICK
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.redirectEventUsingProp(PRIVATE_EVENTS.CLICK, "actionClickEventName", this);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "div",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                }),
                key: this._uniqueKey
            },
            [
                renderIcon(el, props.showIcon, props.size),
                renderTitle(el, props.title, props.size),
                renderDescription(el, props.description, props.size),
                renderActionButton(el, props, mChildren)
            ]
        );
    }
}

NoResultsInfo.EVENTS = EVENTS;
