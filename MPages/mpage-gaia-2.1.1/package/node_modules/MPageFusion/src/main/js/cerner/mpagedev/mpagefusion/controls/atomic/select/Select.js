"use strict";

import UIComponent from "../../../base";
import { isIE } from "../../../helpers/core/compatibility";
import classNames from "classnames";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------

/**
 * Events emitted by the Select control.
 *
 * @type {{SELECTION_CHANGE: string}}
 */
const SelectEvents = {
    SELECTION_CHANGE: "Select::selectionChange"
};

const namespace = "mpageui-Select";
const selectWrapper = "mpageui-Select-wrapper";

/**
 * Returns the mousedown handler if the current browser
 * is IE, otherwise returns null
 *
 * @private
 * @function
 * @returns {Object|null} undefined
 */
const mouseDownHandler = () => {
    if (!isIE()) {
        return null;
    }

    /**
     * In IE11, if a select dropdown is clicked while another element
     * has focus, it will not render with the correct width
     */
    return {
        onmousedown: (e) => {
            e.target.focus();
        }
    };
};

/**
 * Creates the aria label
 *
 * @private
 * @function
 * @param {Object} props - The Select props.
 * @returns {Object|null} the aria attributes.
 */
const ariaAttributes = (props) =>
    Object.assign(
        {},
        props.label ? { "aria-label": props.label } : null,
        props.name ? { "name": props.name } : null
    );

/**
 * Render an option for a Select Dropdown
 *
 * @private
 * @function
 * @param {Function} el - A function for creating virtual elements
 * @param {String} display - The face-up display of the option
 * @param {String} id - The internal identifier of the option
 * @param {Boolean} isSelected - Indicator for whether it's displayed as selected or not
 * @param {Boolean} isDisabled - Indicator for whether the option is disabled or not
 * @returns {VDom} a select option
 */
const renderOption = (el, display, id, isSelected, isDisabled) => el(
    "option",
    {
        value: id,
        selected: isSelected,
        disabled: !!isDisabled
    },
    display
);

/**
 * Render the select options
 *
 * @private
 * @function
 * @param {Function} el - A function for creating virtual elements.
 * @param {Object} props - An object containing the props of the Select control
 * @param {String} selectedId - The id of the selected item
 * @returns {Array<VDom>} an array of the select options
 */
const renderOptions = (el, props, selectedId) => [
    ...props.placeholder !== null
        ? [ renderOption(el, props.placeholder, "", selectedId === null, false) ]
        : [],
    ...props.items.map((item, i) => {
        const id = item.id || String(i);
        return renderOption(el, item.display, id, id == selectedId, item.isDisabled); // eslint-disable-line eqeqeq
    })
];

/**
 * Render a Select Dropdown
 *
 * @private
 * @function
 * @param {Function} el - A function for creating virtual elements
 * @param {Object} props - An object containing the props of a Select control
 * @param {String} selectedId - The id of the selected item
 * @param {Function} onchangeHandler - An object that handles the onchange event of the select element
 * @returns {VDom} a select
 */
const renderSelect = (el, props, selectedId, onchangeHandler) => el(
    "select",
    Object.assign({
        disabled: props.isDisabled,
        class: classNames({
            [ selectWrapper ]: true,
            [ props.defaultClassNames ]: true,
            [ props.classNames ]: props.classNames !== ""
        }),
        onchange: onchangeHandler
    }, ariaAttributes(props), mouseDownHandler()),
    renderOptions(el, props, selectedId)
);

/**
 * The Select class.
 * @class Select
 */
class Select extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);

        this._selectedId = null;
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            defaultClassNames: namespace,
            isDisabled: false,
            items: [],
            label: "",
            name: "",
            noOptionsDisplay: "--",
            placeholder: null,
            selectedId: null,
            selectionChangeEventName: SelectEvents.SELECTION_CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            selectedId: (selectedId) => { this._selectedId = selectedId; }
        };
    }

    /**
     * Handles the change event.
     * @param {object} e - the change event
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleChange(e) {
        const value = e.target.value;

        // Update the internal state to ensure subsequent renderings of the control are consistent
        this._selectedId = value === "" ? null : value;
        this.emit(this.getProp("selectionChangeEventName"), this, this._selectedId);
    }

    /**
     * @inheritDoc
     */
    beforeRender() {
        /*
         If there is no placeholder and no value selected,
         the browser will automatically select the first value in the list.
         The state should reflect this.
         */
        const hasPlaceholder = this.getProp("placeholder") !== null;
        const selectedId = this._selectedId;
        if (!hasPlaceholder && (selectedId === null || selectedId === "")) {
            const items = this.getProp("items") || [];
            this._selectedId = items.length ? items[ 0 ].id || "0" : null;
        }
    }

    /**
     * @inheritDoc
     */
    view(el, props) {
        if (props.items.length === 0 && props.placeholder === null) {
            return el("span", { class: selectWrapper }, props.noOptionsDisplay);
        }
        else if (props.items.length === 1 && props.placeholder === null) {
            return el("span", { class: selectWrapper }, props.items[0].display);
        }

        return renderSelect(el, props, this._selectedId, this._handleChange.bind(this));
    }
}

Select.EVENTS = SelectEvents;

export default Select;
