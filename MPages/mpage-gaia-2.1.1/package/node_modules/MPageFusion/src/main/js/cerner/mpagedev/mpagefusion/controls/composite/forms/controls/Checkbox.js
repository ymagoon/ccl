"use strict";

import UIComponent from "../../../../base";
import Checkbox from "../../../atomic/checkbox";
import { unique } from "../../../../helpers/core/generators";
import { forwardProp } from "../../../../helpers/props/props";
import {
    renderCriticalitySection,
    renderDualColumnView,
    renderErrorText,
    renderHelperText,
    renderRequiredIcon
} from "../helpers/view";
import {
    generateValueChangePayload
} from "../helpers/props";
import classNames from "classnames";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const FormCheckboxEvents = {
    CHANGE: "FormCheckbox::change"
};

const namespace = "mpageui-FormCheckbox";

const formCheckboxLabelClass = `${ namespace }-label`;
const formCheckboxDisabledClass = `${ namespace }--disabled`;
const formCheckboxLabelCheckboxWrapperClass = `${ namespace }-label-checkbox-wrapper`;

/**
 * Renders the checkbox and label
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the Checkbox props
 * @param {object} ctx - the Checkbox context
 * @returns {VDom | null} The rendered virtual dom.
 */
const renderCheckboxLabel = (el, props, ctx) =>
    el(
        "div",
        {
            class: formCheckboxLabelClass,
            onclick: ctx._handleClick.bind(ctx) // eslint-disable-line no-underscore-dangle
        },
        [
            renderRequiredIcon(el, props),
            el(
                "p",
                {},
                props.display
            )
        ]
    );

/**
 * Renders the checkbox and label
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the Checkbox props
 * @param {array} children - the children
 * @param {object} mappedChildren - the mappedChildren
 * @param {object} ctx - the Checkbox context
 * @returns {VDom | null} The rendered virtual dom.
 */
const renderCheckbox = (el, props, children, mappedChildren, ctx) =>
    el(
        "div",
        {
            class: classNames({
                [ formCheckboxLabelCheckboxWrapperClass ]: true,
                [ formCheckboxDisabledClass ]: props.isDisabled
            })
        },
        [
            mappedChildren.checkbox.render(),
            renderCheckboxLabel(el, props, ctx)
        ]
    );

/**
 * The FormCheckbox class.
 * @class FormCheckbox
 */
class FormCheckbox extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._state = {
            showErrorText: false,
            showHelperText: true,
            value: false
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            criticalityHandler: null,
            completionHandler: () => true,
            display: "",
            errorHandler: null,
            formName: unique(namespace),
            hasInlineLabel: false,
            helperHandler: null,
            isDisabled: false,
            isRequired: false,
            showErrorText: false,
            showHelperText: true,
            showRequiredIndicator: true,
            options: {},
            value: false,
            valueChangeEventName: FormCheckboxEvents.CHANGE
        };
    }

    propChangeHandlers() {
        return {
            isDisabled: forwardProp(this, "isDisabled", "checkbox"),
            formName: forwardProp(this, "name", "checkbox"),
            showErrorText: (showErrorText) => { this._state.showErrorText = showErrorText; },
            showHelperText: (showHelperText) => { this._state.showHelperText = showHelperText; },
            options: (options) => {
                this.getChild("checkbox").setProps(options);
            },
            value: (value = false) => {
                this._state.value = value;
                this.getChild("checkbox").setProp("isSelected", value);
            }
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                checkbox: new Checkbox(this.getProp("options"))
            }
        ];
    }

    /**
     * handles clicking on the label/required icon
     * @returns {undefined} undefined
     * @private
     */
    _handleClick() {
        if (this.getProp("isDisabled")) {
            return;
        }

        const isSelected = !this._state.value;
        this.getChild("checkbox").setProp("isSelected", isSelected);

        this._updateSelection(isSelected);
    }

    /**
     * updates the state and emits the event
     * @param {boolean} isSelected - whether the checkbox is selected
     * @returns {undefined} undefined
     * @private
     */
    _updateSelection(isSelected) {
        this._state = Object.assign({}, this._state, {
            showErrorText: true,
            value: isSelected
        });

        this.emit(this.getProp("valueChangeEventName"), this,
            generateValueChangePayload(this.getProps(), isSelected)
        );

        this.update();
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(Checkbox.EVENTS.SELECTION_CHANGE, (ctx, isSelected) => {
            this.stopPropagation(Checkbox.EVENTS.SELECTION_CHANGE);

            this._updateSelection(isSelected);
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        const state = this._state;
        return el(
            "div",
            {
                class: namespace
            },
            [
                renderDualColumnView(el, props.hasInlineLabel,
                    /**
                     * single checkboxes don't have standard labels - this is here so that the checkbox will correctly
                     * line up with other inline controls
                     */
                    [],
                    [
                        renderCheckbox(el, props, children, mappedChildren, this),
                        renderErrorText(el, props, state),
                        renderCriticalitySection(el, props, state),
                        renderHelperText(el, props, state)
                    ]
                )
            ]
        );
    }
}

FormCheckbox.EVENTS = FormCheckboxEvents;

export default FormCheckbox;
