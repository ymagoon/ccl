"use strict";

/**
 * Returns elements present in arr1 but not arr2
 * @param {Array} arr1 - the first array
 * @param {Array} arr2 - the second array
 * @returns {Array} - elements present in the first array
 *      but not the second
 */
const getSymmetricDifference = (arr1 = [], arr2 = []) => arr1.filter((i) => !arr2.includes(i));

/**
 * @class MultiItemSelector
 */
export default class MultiItemSelector {
    constructor() {
        this._selectedItems = [];
        this._uniqueIdGenerator = (item) => item.id ? item.id : JSON.stringify(item);
        this._multiSelectEnabled = false;
        this._deselectEnabled = true;
    }

    /**
     * sets the unique id generator for selected items
     * @param {function} gen - a function that when given
     *      an item returns an id {string}
     * @returns {undefined} - undefined
     */
    setUniqueIdGenerator(gen) {
        this._uniqueIdGenerator = gen;
    }

    /**
     * Set multiSelectEnabled to true or false
     * @param {Boolean} val - true or false
     * @returns {undefined} - undefined
     */
    setMultiSelectEnabled(val) {
        this._multiSelectEnabled = val;
    }

    /**
     * Set deselectEnabled to true or false
     * @param {Boolean} val - true or false
     * @returns {undefined} - undefined
     */
    setDeselectEnabled(val) {
        this._deselectEnabled = val;
    }

    /**
     * Deselects all items
     * @returns {undefined} - undefined
     */
    deselectAll() {
        if (this._deselectEnabled) {
            this._selectedItems = [];
        }
    }

    /**
     * Updates the selected items given an item to be selected.
     * It returns the ids of the currently selected items as well as those
     * of items that were just selected or deselected.
     * @param {Object} item - the item to be selected or deselected
     * @returns {{selections, selected, deselected}} - selection information
     */
    selectItem(item) {
        if (!item || this.isItemSelected(item)) {
            return {
                selections: this._selectedItems,
                selected: [],
                deselected: []
            };
        }

        const prevItems = [ ...this._selectedItems ];
        const itemId = this._uniqueIdGenerator(item);

        this._selectedItems = (this._multiSelectEnabled)
            ? prevItems.concat(itemId) : [ itemId ];

        return {
            selections: this._selectedItems,
            selected: getSymmetricDifference(this._selectedItems, prevItems),
            deselected: getSymmetricDifference(prevItems, this._selectedItems)
        };
    }

    /**
     * Updates the selected items given an item to be deselected
     * It returns the ids of the currently selected items as well as those
     * of items that were just selected or deselected.
     * @param {Object} item - the item to be selected or deselected
     * @returns {{selections, deselected}} - selection information
     */
    deselectItem(item) {
        if (!this._deselectEnabled || !item || !this.isItemSelected(item)) {
            return {
                selections: this._selectedItems,
                selected: [],
                deselected: []
            };
        }

        const prevItems = [ ...this._selectedItems ];
        const items = this._selectedItems;
        const itemId = this._uniqueIdGenerator(item);

        this._selectedItems = items.filter((i) => i !== itemId);

        return {
            selections: this._selectedItems,
            selected: [],
            deselected: getSymmetricDifference(prevItems, this._selectedItems)
        };
    }

    /**
     * toggles the selection state of an item
     * @param {Object} item - an item
     * @returns {{selections, selected, deselected}} - selection information
     */
    toggleItem(item) {
        return this.isItemSelected(item) ? this.deselectItem(item) : this.selectItem(item);
    }

    /**
     * Returns true if the item specified is selected, false otherwise
     * @param {Object} item - an item
     * @returns {boolean} - true if the item is selected, false otherwise
     */
    isItemSelected(item) {
        const hash = this._uniqueIdGenerator(item);
        return this._selectedItems.some((itemHash) => itemHash === hash);
    }

    /**
     * Given an array of items, this function returns those that are selected
     * @param {Array} itemList - an array of items
     * @returns {Array} - an array of the selected items
     */
    selectedItems(itemList = []) {
        return itemList.filter((item) => this.isItemSelected(item));
    }

    /**
     * Returns true if an item with a particular id is selected, false otherwise
     * @param {String} id - the item id
     * @returns {boolean} - returns true if the item corresponding
     *      to the passed id is selected, false otherwise
     */
    isIdSelected(id) {
        return this._selectedItems.some((itemHash) => itemHash === id);
    }

    /**
     * Returns an array containing the ids of the selected items
     * @returns {Array<String>} - an array of item ids
     */
    getSelectedItemIds() {
        return this._selectedItems;
    }
}
