"use strict";

import { ClinicalBadge } from "../../../atomic/badge";
import { criticality } from "./constants";
import i18nStrings from "i18n";
import classNames from "classnames";

const i18n = i18nStrings();

// ------------------------------------------------------------------------------
// Form Control Visual Helpers
// ------------------------------------------------------------------------------

// -----------------------//
// Constants
// -----------------------//
const formControlTitleClass = "mpageui-FormControl-title";
const formControlErrorTextClass = "mpageui-FormControl-text--error";
const formControlHelperTextClass = "mpageui-FormControl-text--helper";
const formControlCriticalityTextClass = "mpageui-FormControl-text--criticality";
const formControlCriticalityCriticalTextClass = "mpageui-FormControl-text--criticality-critical";
const formControlRequiredClass = "mpageui-FormControl-required";
const formControlHeaderClass = "mpageui-FormControl-header";
const formControlColumnWrapperClass = "mpageui-FormControl-column-wrapper";
const formControlDualColumnClass = "mpageui-FormControl--dual-column";
const formControlLeftColumnClass = "mpageui-FormControl-leftColumn";
const formControlRightColumnClass = "mpageui-FormControl-rightColumn";
const formControlSublabelContentClass = "mpageui-FormControl-sublabelContent";

const criticalityMap = {
    [ criticality.ABNORMAL ]: [ i18n.abnormalValue, ClinicalBadge.TYPE.ABNORMAL ],
    [ criticality.CRITICAL ]: [ i18n.criticalValue, ClinicalBadge.TYPE.CRITICAL ],
    [ criticality.HIGH ]: [ i18n.highValue, ClinicalBadge.TYPE.HIGH ],
    [ criticality.LOW ]: [ i18n.lowValue, ClinicalBadge.TYPE.LOW ]
};

const initState = {
    showErrorText: false,
    showHelperText: true,
    value: null
};

/**
 * Renders the form control required icon
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the control props
 * @returns {string|null} the rendered icon
 */
export const renderRequiredIcon = (el, props) =>
    (props.isRequired && props.showRequiredIndicator)
        ? el("span",
            { class: formControlRequiredClass },
            "*"
        )
        : null;

/**
 * Renders the form control label
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the control props
 * @returns {string|null} the rendered title
 */
export const renderTitle = (el, props) =>
    props.display
        ? el("div",
            { class: formControlHeaderClass },
            [
                renderRequiredIcon(el, props),
                el(
                    "span",
                    { class: formControlTitleClass },
                    props.display
                )
            ]
        )
        : null;

/**
 * Renders the form control sublabel content.
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the control props
 * @param {object} mappedChildren - the RadioButtonGroup mapped children.
 * @returns {VDom} the virtual DOM for sublabelContent or null
 */
export const renderSublabelContent = (el, props, mappedChildren) =>
    props.sublabelContent
        ? el("div",
            { class: formControlSublabelContentClass },
            mappedChildren.sublabelContent.render()
        )
        : null;

/**
 * Renders form control helper text
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the control props
 * @param {object} state - the control state
 * @returns {string|null} the rendered helper text
 */
export const renderHelperText = (el, props, state = initState) => {
    if (!state.showHelperText) {
        return null;
    }

    const helperText = props.helperHandler ? props.helperHandler(state.value, el, props) : "";

    return helperText
        ? el("p",
            { class: formControlHelperTextClass },
            helperText
        )
        : null;
};

/**
 * Renders form control error text
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the control props
 * @param {object} state - the control state
 * @returns {string|null} the rendered error text
 */
export const renderErrorText = (el, props, state = initState) => {
    let errorText;

    if (!state.showErrorText) {
        return null;
    }

    if (props.isRequired && props.completionHandler && !props.completionHandler(state.value)) {
        errorText = i18n.requiredField;
    }
    else if (props.errorHandler) {
        errorText = props.errorHandler(state.value, el, props);
    }

    return errorText
        ? el("p",
            { class: formControlErrorTextClass },
            errorText
        )
        : null;
};

/**
 * Renders the criticality section
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the control props
 * @param {object} state - the control state
 * @returns {string|null} the rendered criticality section
 */
export const renderCriticalitySection = (el, props, state = initState) => {
    if (!props.criticalityHandler) {
        return null;
    }

    const criticalityType = props.criticalityHandler(state.value);
    if (!criticalityType) {
        return null;
    }

    const isCritical = criticalityType === criticality.CRITICAL;
    const [ display, type ] = (criticalityMap[ criticalityType ] || [ "", "" ]);

    return type
        ? new ClinicalBadge({
            classNames: classNames({
                [ formControlCriticalityTextClass ]: true,
                [ formControlCriticalityCriticalTextClass ]: isCritical
            }),
            display,
            type
        }).render()
        : null;
};

/**
 * Renders a dual column view for inline form controls
 * @param {Function} el - A function for creating virtual elements.
 * @param {boolean} isInline - whether or not the control should be inline
 * @param {Array<VDom>} leftColumn - the rendered left column content
 * @param {Array<VDom>} rightColumn - the rendered right column content
 * @returns {string|null} the rendered dual column layout
 */
export const renderDualColumnView = (el, isInline, leftColumn, rightColumn) => el(
    "div",
    {
        class: classNames({
            [ formControlColumnWrapperClass ]: true,
            [ formControlDualColumnClass ]: isInline
        })
    },
    [
        el(
            "div",
            { class: formControlLeftColumnClass },
            leftColumn
        ),
        el(
            "div",
            { class: formControlRightColumnClass },
            rightColumn
        )
    ]
);

/**
 * Helper to add or replace the child of radioButtonGroup.
 * @param {RadioButtonGroup} parent - The RadioButtonGroup instance.
 * @param {string} childKey - The unique child key.
 * @param {UIComponent} child - The new child which will replace the child with provided key
 * @returns {Function} The prop change handler for the radioButtonGroup.
 */
export const replaceChild = (parent, childKey, child) =>
    (child && child.isUIComponent)
        ? parent.replaceMappedChild(childKey, child)
        : parent.removeChild(childKey);
