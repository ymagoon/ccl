"use strict";

import { setProp } from "../props/props";

/**
 * Fires an event on the provided control.
 * @param {{ fire: string, eventArg: *}} item - The item for which the
 * event is fired.
 * @param {UIComponent} control - The source UIComponent. The emit function
 * will be called on this UIComponent.
 * @returns {undefined} Returns nothing.
 */
export const fireItemEvent = (item, control) =>
    control.emit(item.fire, item, item.eventArg);

/**
 * Returns all objects that have isSelected set to true.
 * @param {Array<Object>} items the objects
 * @returns {Array<Object>} objects that are selected
 */
export const getSelected = (items) =>
    items.filter((item) => item.isSelected);

/**
 * Sets isSelected to false on all objects.
 * @param {Array<Object>} items the objects
 * @returns {Array<Object>} objects that have been changed
 */
export const unselectAllItems = (items) => items.map(
    (item) => setProp("isSelected", false, item));

/**
 * Same as Array.map, but works on the keys and values of an object.
 * @param {*} object the objected to be mapped
 * @param {function} fun the mapping function. Takes in item, key as parameters.
 * @returns {*} the transformed object
 */
export const objectMap = (object, fun) =>
    Object.keys(object).reduce(
        (newobj, key) => setProp(
            key,
            fun(object[ key ], key),
            newobj
        ), {});

/**
 * Same as Array.filter, but works on the keys and values of an object.
 * @param {*} object the object to be filtered
 * @param {function} fun the filter function. Takes in item, key as parameters.
 * @returns {*} the filtered object
 */
export const objectFilter = (object, fun) =>
    Object.keys(object).reduce(
        (newobj, key) =>
            fun(object[ key ], key) ?
                setProp(
                    key,
                    object[ key ],
                    newobj)
                : newobj, {});
