/**
 * @fileoverview FlowsheetRowContainer class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import FlowsheetRow from "./FlowsheetRow";
import classNames from "classnames";
import { eventNames } from "./helpers";

const hideClass = "mpageui-Flowsheet-rowContainer--hidden";

/**
 * Creates row objects by using FlowsheetRow class
 * @param {Object} rows - row object
 * @param {Object} rowProps - rowprops object
 * @param {Object} cellProps - cellProps object
 * @param {string} clickEventName - Click event name
 * @returns {Array} collection of row objects
 * @private
 */
const getRowObject = ({ rows, rowProps, cellProps, clickEventName, index }) => rows.map((row, i) => new FlowsheetRow({
    index: index + i,
    cells: row.cells,
    cellProps,
    clickEventName,
    selectable: ("selectable" in row) ? row.selectable : rowProps.selectable,
    multiSelect: rowProps.multiSelect,
    key: row.key,
    isSelected: row.isSelected === true,
    header: row.header
}, []));

/**
 * Constructor for FlowsheetRowContainer
 * @extends UIComponent
 */
export default class FlowsheetRowContainer extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            defaultClassNames: "mpageui-Flowsheet-rowContainer",
            classNames: "",
            striped: true,
            rows: [],
            rowProps: {},
            cellProps: {},
            isVisible: true,
            index: 0
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        const rowProps = this.getProp("rowProps");

        return getRowObject({
            rows: this.getProp("rows"),
            index: this.getProp("index"),
            rowProps,
            cellProps: this.getProp("cellProps"),
            clickEventName: eventNames.PRIVATE.ROW_SELECTION_CHANGE
        });
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mappedChildren) {
        return el("div", {
            class: classNames({
                [ props.defaultClassNames ]: true,
                [ props.classNames ]: props.classNames.length > 0,
                [ hideClass ]: !props.isVisible
            })
        }, this.renderChildren());
    }
}
