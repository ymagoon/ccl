import UIComponent from "../../../../base/UIComponent";
import DetailPanelHeader from "./DetailPanelHeader";

import classNames from "classnames";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
/**
 * Enumeration for events emitted by the detail panel.
 * @type {{REQUEST_CLOSE: string}}
 */
const DETAIL_PANEL_EVENTS = {
    REQUEST_CLOSE: "DetailPanel::requestClose" // Request to close the panel
};

/**
 * Enumeration for standard detail panel sizes.
 * @type {{READING_PANE: string, FULL_SCREEN: string}}
 */
const DETAIL_PANEL_SIZES = {
    READING_PANE: "mpageui-DetailPanelLayout--sizeReading",
    FULL_SCREEN: "mpageui-DetailPanelLayout--sizeFullScreen"
};

const NAMESPACE = "mpageui-DetailPanel";

/**
 * Helper to add children to the detail panel.
 * @param {string} key - The key of the child to add.
 * @param {UIComponent} child - The child UIComponent to add.
 * @param {DetailPanel} panel - The parent DetailPanel to which the child
 * will be added.
 * @returns {DetailPanel} The DetailPanel instance.
 */
const addDetailPanelChild = (key, child, panel) =>
    child ? panel.addMappedChild(key, child) : panel;

/**
 * Small helper to determine when to replace or remove a child of the
 * DetailPanel.
 * @param {DetailPanel} detailPanel - The detail panel instance.
 * @param {string} childKey - The unique child key.
 * @returns {Function} The prop change handler for the detail panel.
 */
const replaceChild = (detailPanel, childKey) => (child) =>
    (child && child.isUIComponent) ?
        detailPanel.replaceMappedChild(childKey, child) :
        detailPanel.removeChild(childKey);

/**
 * Renders a section of the detail panel if the section exists.
 * @param {Function} el - A function for creating virtual elements.
 * @param {string} tag - The HTML tag to create.
 * @param {UIComponent | null} section - The detail panel section.
 * @param {string} className - The CSS class names to be applied to the
 * section.
 * @returns {VDom} The rendered virtual dom of the section or null.
 */
const renderSection = (el, tag, section, className) =>
    section ? el(tag, {
        class: classNames({
            [ className ]: true
        })
    }, section.render()) : null;

/**
 * The DetailPanel class. The DetailPanel is mostly a container which will
 * render different detail sections.
 * @class DetailPanel
 */
class DetailPanel extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            bannerContent: null,
            bodyContent: null,
            classNames: "",
            headerTitle: "",
            titleContent: null,
            toolbarContent: null,
            unloadRequestEventName: null
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                headerContent: new DetailPanelHeader({
                    toolbarContent: this.getProp("toolbarContent")
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        // Automatically force the props to be children
        addDetailPanelChild("bannerContent", this.getProp("bannerContent"), this);
        addDetailPanelChild("titleContent", this.getProp("titleContent"), this);
        addDetailPanelChild("bodyContent", this.getProp("bodyContent"), this);

        // Detail panel requests a close event for cases in which
        // consumers need to perform an operation prior to closing.
        // -> Dismiss
        this.redirectEvent(DetailPanelHeader.EVENTS.DISMISS, DetailPanel.EVENTS.REQUEST_CLOSE, this);
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            bannerContent: replaceChild(this, "bannerContent"),
            bodyContent: replaceChild(this, "bodyContent"),
            titleContent: replaceChild(this, "titleContent"),
            toolbarContent: (toolbarContent) => {
                this.getChild("headerContent").setProp("toolbarContent", toolbarContent);
            },
            headerTitle: (headerTitle) => {
                this.getChild("headerContent").setProp("title", headerTitle);
            }
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                })
            },
            [
                mappedChildren.headerContent.render(),
                renderSection(el, "section", mappedChildren.bannerContent, `${NAMESPACE}-bannersSection`),
                renderSection(el, "section", mappedChildren.titleContent, `${NAMESPACE}-titleSection`),
                renderSection(el, "section", mappedChildren.bodyContent, `${NAMESPACE}-bodySection`)
            ]
        );
    }
}

DetailPanel.SIZE = DETAIL_PANEL_SIZES;
DetailPanel.EVENTS = DETAIL_PANEL_EVENTS;

export default DetailPanel;
