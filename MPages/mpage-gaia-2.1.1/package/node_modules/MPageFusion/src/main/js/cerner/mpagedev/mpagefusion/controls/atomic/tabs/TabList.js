"use strict";

import UIComponent from "../../../base";
import Tab from "./Tab";
import { DragSort, MultiItemSelector } from "../../../behaviors";
import classNames from "classnames";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const TabListEvents = {
    SELECTION_CHANGE: "TabList::selectionChange",
    ORDER_CHANGE: "TabList::orderChange"
};
const TabListOrientation = {
    HORIZONTAL: "horizontal",
    VERTICAL: "vertical"
};

// ------------------------------------------------------------------------------
// Children
// ------------------------------------------------------------------------------
/**
 * Gets the index of the child in the array of children.
 * @param {Tab} child - The Tab whose index will be returned.
 * @param {Array<Tab>} children - The array of child tabs.
 * @returns {number} The index of the child Tab in the array of Tabs.
 */
const childIndex = (child, children) => children.indexOf(child);

/**
 * In the array of children, finds that child has the id prop that matches the
 * specified id.
 * @param {Array<Tab>} children - The array of child Tabs.
 * @param {string} id - The id of the child to find.
 * @returns {Tab | undefined} The Tab with the matching id prop.
 */
const childWithIdProp = (children, id) =>
    (children.find((c) => c.getProp("id") === id) || null);

/**
 * Forwards the selection to the list of tabs.
 * @param {Array<Tab>} tabs - The list of tabs.
 * @param {MultiItemSelector} selector - The item selector behavior.
 * @returns {undefined} Returns nothing.
 */
const forwardSelection = (tabs, selector) => {
    tabs.forEach((tab) => {
        tab.setProp("isSelected", selector.isItemSelected(tab));
    });
};

/**
 * The TabList class.
 * @class TabList
 */
class TabList extends UIComponent {
    /**
     * Constructor for the TabList.
     * @param {Object} [props] - A set of props being injected into the TabList
     * instance.
     * @param {Array<Tab>} [children] - An array of child Tabs to be added
     * to the TabList instance.
     */
    constructor(props, children) {
        super(props, children);
        this._selector = new MultiItemSelector();
        this._selector.setMultiSelectEnabled(false);
        this._selector.setUniqueIdGenerator((tab) => tab.getProp("id"));

        this._sortable = new DragSort(this.getProp("tabs"), this.getProp("orientation"))
            .setUniqueIdGenerator((tab) => tab.getProp("id"));
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            defaultClassNames: "mpageui-TabList",
            draggable: false,
            orientation: TabListOrientation.HORIZONTAL,
            orderChangeEventName: TabListEvents.ORDER_CHANGE,
            selectedTabId: null,
            selectionChangeEventName: TabListEvents.SELECTION_CHANGE,
            tabs: []
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            /**
             * Handles when the selectedTabId prop changes. It will then
             * use the selector to select the corresponding tab.
             * @param {string} selectedTabId - The id of the selected Tab.
             * @returns {undefined} Returns nothing.
             */
            selectedTabId: (selectedTabId) => {
                // Check to make sure there is a Tab with a matching id.
                if (selectedTabId && childWithIdProp(this.getProp("tabs"), selectedTabId)) {
                    this._selector.selectItem(childWithIdProp(this.getProp("tabs"), selectedTabId));
                }
                // If not, clear out the selection state.
                else {
                    this._props.selectedTabId = null;
                    this._selector.deselectAll();
                }
                // Pass selection data to child tabs
                forwardSelection(this.getProp("tabs"), this._selector);
            },
            /**
             * Handles when the tabs prop changes. This will update the children
             * of the TabList with the provided array of Tab objects.
             * @param {Array<Tab>} tabs - The array of tabs for the TabList.
             * @returns {undefined} Returns nothing.
             */
            tabs: (tabs) => {
                // Reset the children
                this.replaceAllChildren(tabs);
                this._sortable.setItems(tabs);

                // Ensure draggable property is provided to new tabs
                tabs.forEach((tab) => {
                    tab.setProp("draggable", this.getProp("draggable"));
                });
                // Ensure the selected property is provided to new tabs
                forwardSelection(tabs, this._selector);
            },
            /**
             * Handles when the draggable prop changes. This will iterate through all child Tab objects and
             * force their draggable prop to the same value.
             * @param {boolean} draggable - Whether the TabList is draggable or not.
             * @returns {undefined} Returns nothing.
             */
            draggable: (draggable) => {
                this.getProp("tabs").forEach((t) => {
                    t.setProp("draggable", draggable);
                });
            }
        };
    }

    /**
     * Handles the click event emitted from child Tab objects.
     * @param {Tab} tab - The Tab object that emitted the click event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleTabClick(tab) {
        this.stopPropagation(Tab.EVENTS.CLICK);

        // If the tab is already selected, do nothing.
        if (this._selector.isItemSelected(tab)) {
            return;
        }
        this.setProp("selectedTabId", tab.getProp("id"));
        this.emit(this.getProp("selectionChangeEventName"), this, tab);

        this.update();
    }

    /**
     * Handles the drag start event emitted from child Tab objects.
     * @param {Tab} tab - The Tab object that initiated the drag start.
     * @param {Event} event - The dragstart event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleTabDragStart(tab, event) {
        this.stopPropagation(Tab.EVENTS.DRAG_START);
        this._sortable.dragStart(childIndex(tab, this.getProp("tabs")), event);
    }

    /**
     * Handles the drag over event emitted from child Tab objects.
     * @param {Tab} tab - The Tab object that initiated the dragover event.
     * @param {Event} event - The dragover event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleTabDragOver(tab, event) {
        this.stopPropagation(Tab.EVENTS.DRAG_OVER);

        // Make sure the drag source is actually this sortable!
        // Dragging from a different tab list can trigger a false positive.
        if (!this._sortable.isDragging()) {
            return;
        }

        // Only handle the drag over if the sortable returns true.
        if (this._sortable.dragOver(childIndex(tab, this.getProp("tabs")), event)) {
            // Sync the tabs now that they have been re-ordered
            this.replaceAllChildren(this.getProp("tabs"));
            this.update();
        }
    }

    /**
     * Handles the dragend event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleTabDragEnd() {
        this.stopPropagation(Tab.EVENTS.DRAG_END);

        this._sortable.dragEnd();
        if (this._sortable.didChange()) {
            this.emit(this.getProp("orderChangeEventName"), this, this._sortable.getOrder());
        }
        this.update();
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        // Listen for tab clicks
        this.on(Tab.EVENTS.CLICK, this._handleTabClick.bind(this));
        // Drag start
        this.on(Tab.EVENTS.DRAG_START, this._handleTabDragStart.bind(this));
        // Drag over
        this.on(Tab.EVENTS.DRAG_OVER, this._handleTabDragOver.bind(this));
        // Drag end
        this.on(Tab.EVENTS.DRAG_END, this._handleTabDragEnd.bind(this));
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "ul",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                }),
                role: "tablist",
                "aria-orientation": props.orientation
            },
            this.renderChildren()
        );
    }
}

TabList.EVENTS = TabListEvents;

export default TabList;
