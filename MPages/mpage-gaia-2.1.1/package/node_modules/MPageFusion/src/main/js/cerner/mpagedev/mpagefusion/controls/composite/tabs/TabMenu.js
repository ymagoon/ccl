"use strict";
import UIComponent from "../../../base/UIComponent";
import classNames from "classnames";
import { forwardProp } from "../../../helpers/props/props";
import MenuButton from "../../composite/button/MenuButton";
import {
    TabMenuEvents
} from "./helpers";

const NAMESPACE = "mpageui-TabMenu";

/**
 * Closes the menu
 *
 * @param {Object} control - TabMenu instance
 * @returns {undefined} returns nothing
 */
const closeMenu = (control) => control.getChild("menu").setProp("isOpen", false).update();

/**
 * TabMenu class renders a menu containing a select-group of tab ids.
 * The menu will only show up XS down replacing the tabList
 *
 * @class TabMenu
 */
class TabMenu extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            defaultClassNames: NAMESPACE,
            classNames: "",
            content: [],
            display: "",
            selectionChangeEventName: TabMenuEvents.MENU_SELECTION_CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                menu: new MenuButton({
                    classNames: `${NAMESPACE}-button`,
                    showHeader: false,
                    display: this.getProp("display"),
                    selectionChangeEventName: this.getProp("selectionChangeEventName")
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(this.getProp("selectionChangeEventName"), () => closeMenu(this));
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => {
                this.getChild("menu").setProp("content", [
                    {
                        selectGroup: content,
                        canDeselect: false
                    }
                ]);
            },
            display: forwardProp(this, "display", "menu"),
            selectionChangeEventName: forwardProp(this, "selectionChangeEventName", "menu")
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "nav",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                }),
                role: "navigation"
            },
            this.renderChildren()
        );
    }
}

TabMenu.EVENTS = TabMenuEvents;

export default TabMenu;
