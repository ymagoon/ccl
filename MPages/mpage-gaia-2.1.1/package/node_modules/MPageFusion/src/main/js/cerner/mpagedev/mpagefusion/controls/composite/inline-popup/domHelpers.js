const ARROW_CLASSES = {
    BOTTOM: "mpageui-Inline-Popup-arrow--bottom",
    TOP: "mpageui-Inline-Popup-arrow--top"
};

const ARROW_BORDER_CLASSES = {
    BOTTOM: "mpageui-Inline-Popup-arrow-border--bottom",
    TOP: "mpageui-Inline-Popup-arrow-border--top"
};

const INLINE_POPUP_POSITION = {
    BOTTOM: "InlinePopup::Position::Bottom",
    TOP: "InlinePopup::Position::Top"
};

const ARROW_OFFSET = 20;

const ARROW_WIDTH = 20;

const ARROW_BORDER_OFFSET = 1;

const RENDER_MARGIN = 10;

/**
 * Calculate the position for left
 * @param {Object} arrowRenderOrigin - position of the arrow
 * @param {Object} targetSize - width and height for the inline popup
 * @param {Number} panelWidth - offset width
 * @returns {Object} returns the position for the left origin for inline popup panel
 */
const calculateLeft = (arrowRenderOrigin, targetSize, panelWidth) => {
    let left = arrowRenderOrigin.left - ARROW_OFFSET;
    if (left + panelWidth > targetSize.width) {
        left = arrowRenderOrigin.left - panelWidth + (ARROW_OFFSET * 2);
    }
    return left;
};

/**
 * Calculates if there is enough vertical space for the current position used.
 * @param {Number} inlinePopupTop The top most position for the inline popup (either the top of the panel or the top of the arrow)
 * @param {String} position The position preferred by the consumer.
 * @param {String} fallbackPosition The fallback position.
 * @param {Number} inlinePopupPanelHeight The height of the inline popup panel.
 * @param {Number} targetHeight The height of the target where the inline popup is to be rendered.
 * @returns {Boolean} A value indication whether there is enough space for the inline popup to be rendered.
 */
const hasVerticalSpace = (inlinePopupTop, position, fallbackPosition, inlinePopupPanelHeight, targetHeight) => {
    if (position === INLINE_POPUP_POSITION.TOP) {
        return fallbackPosition || inlinePopupTop > 0; // If popup top is not beyond extreme top or fallback is defined
    }
    else {
        return fallbackPosition || inlinePopupTop + inlinePopupPanelHeight <= targetHeight; // If popup is not beyond extreme bottom or fallback is defined
    }
};

/**
 * Calculate the position for top
 * @param {Object} arrowOrigin - position of the arrow
 * @param {String} preferredPosition - position for the inline popup
 * @param {String} fallbackPosition - position to the take up when the inline popup does not fit in the specified position
 * @param {Number} panelHeight - offset height
 * @returns {Object} returns the position for the top origin for inline popup panel
 */
const calculateTop = (arrowOrigin, preferredPosition, fallbackPosition, panelHeight) => {
    let calculatedTop = arrowOrigin.top;

    const position = fallbackPosition || preferredPosition; // If fallback is defined, use that, else use the preferred position
    if (position === INLINE_POPUP_POSITION.TOP) {
        calculatedTop = arrowOrigin.top - panelHeight + ARROW_BORDER_OFFSET;
    }
    else {
        calculatedTop = arrowOrigin.top + ARROW_WIDTH - ARROW_BORDER_OFFSET;
    }
    return calculatedTop;
};

/**
 * Calculate the position for arrow border
 * @param {Object} arrowRenderOrigin - position of the arrow
 * @param {Object} position - position for the arrow
 * @returns {Object} returns the position for rendering the arrow border
 */
const calculateArrowBorderOrigin = (arrowRenderOrigin, position) => {
    const arrowBorderOrigin = {
        left: arrowRenderOrigin.left,
        top: arrowRenderOrigin.top
    };

    if (position === INLINE_POPUP_POSITION.TOP) {
        arrowBorderOrigin.top += ARROW_BORDER_OFFSET; // Pull border down
    }
    else {
        arrowBorderOrigin.top -= ARROW_BORDER_OFFSET; // Pull border up
    }

    return arrowBorderOrigin;
};

/**
 * Calculate the position of arrow
 * @param {Object} renderOrigin - top and left position
 * @param {Object} targetSize - width and height value
 * @returns {Object} returns the position of arrow
 */
const calculateArrowOrigin = (renderOrigin, targetSize) => {
    const halfArrowWidth = ARROW_WIDTH / 2;
    const arrowOrigin = {
        left: renderOrigin.left - halfArrowWidth, // Place center of arrow div (the arrow tip) to render origin
        top: renderOrigin.top - halfArrowWidth // Place center of arrow div (the arrow tip) to render origin
    };
    if (arrowOrigin.left <= ARROW_OFFSET + ARROW_WIDTH) { // If render origin is at the extreme left (Arrow needs the offset and the width amount as margin)
        arrowOrigin.left = ARROW_OFFSET + RENDER_MARGIN; // Pull arrow to right by the offset amount and margin amount
    }
    else if (arrowOrigin.left >= targetSize.width - (ARROW_OFFSET + ARROW_WIDTH)) { // If render origin is at the extreme right (Arrow needs the offset and the width amount as margin)
        arrowOrigin.left -= ARROW_OFFSET + RENDER_MARGIN; // Pull arrow to left by the offset amount and margin amount
    }
    return arrowOrigin;
};

/**
 * Adjust the position of the inline popup panel
 * @param {HTMLElement} dom - DOM element
 * @param {HTMLElement} inlinePopup - Inline Popup DOM element
 * @returns {undefined}
 */
const adjustPanel = (dom, inlinePopup) => {
    const props = inlinePopup.getProps();
    const top = calculateTop(inlinePopup.getArrowOrigin(), props.position, props.fallbackPosition, dom.offsetHeight);

    if(hasVerticalSpace(top, props.position, props.fallbackPosition, dom.offsetHeight, props.targetSize.height)) {
        dom.style.top = `${top}px`; // Adding arrow width to account for the offset w.r.t. arrow div
        dom.style.left = `${calculateLeft(inlinePopup.getArrowOrigin(), props.targetSize, dom.offsetWidth)}px`;
        inlinePopup.setProp("fallbackPosition", ""); // Clear any fallback position used.
    }
    else {
        inlinePopup.setProp(
            "fallbackPosition",
            props.position === INLINE_POPUP_POSITION.TOP ? INLINE_POPUP_POSITION.BOTTOM : INLINE_POPUP_POSITION.TOP
        ).update();
    }
};


export {
    ARROW_BORDER_CLASSES,
    ARROW_CLASSES,
    INLINE_POPUP_POSITION,
    adjustPanel,
    calculateArrowBorderOrigin,
    calculateArrowOrigin
};
