const SMALL_SIZE = "small";
const LARGE_SIZE = "large";
const NAMESPACE = "mpageui-DemographicsBanner";

/**
 * Render a demographics row.
 * @param {Function} el - A function for creating virtual elements.
 * @param {VDom} content - Content for the row.
 * @returns {VDom} Rendered row.
 */
const renderRow = (el, content) =>
    el(
        "div",
        { class: `${NAMESPACE}-row` },
        content
    );

/**
 * Renders the custom application content of the demographics banner.
 * @param {Function} el - A function for creating virtual elements.
 * @param {UIComponent} applicationContent - Custom application content.
 * @returns {VDom} Rendered application content.
 */
const renderApplicationContent = (el, applicationContent) =>
    el(
        "div",
        { class: `${NAMESPACE}-applicationContent` },
        applicationContent ? applicationContent.render() : null
    );

/**
 * Renders the person name.
 * @param {Function} el - A function for creating virtual elements.
 * @param {String} personName - Person name.
 * @returns {VDom} Rendered name.
 */
const renderPersonName = (el, personName = "") =>
    el(
        "h1",
        { class: `${NAMESPACE}-personName` },
        personName
    );

/**
 * Renders a single person detail item.
 * @param {Function} el - A function for creating virtual elements.
 * @param {String} label - Label for the detail.
 * @param {String} detail - The detail value.
 * @returns {VDom} Rendered detail.
 */
const renderPersonDetail = (el, label, detail) =>
    el(
        "span",
        {
            class: `${NAMESPACE}-value`
        },
        [
            label ? el(
                "span",
                {
                    class: `${NAMESPACE}-value-label`
                },
                `${label}:`
            ) : null,
            el(
                "b",
                {},
                detail
            )
        ]
    );

/**
 * Handles a missing value.
 * @param {String} val - The value to display.
 * @param {String} missingDisplay - What to display if the value is missing.
 * @returns {String} Display value.
 */
const handleMissing = (val, missingDisplay) => !val ? missingDisplay : val;

/**
 * Renders the set of person details.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Object} props - The props of the demographics banner.
 * @returns {VDom} Rendered person details.
 */
const renderPersonDetails = (el, props) =>
    [
        renderPersonDetail(el, "", handleMissing(props.age, props.missingDataDisplay)),
        renderPersonDetail(el, "", handleMissing(props.gender, props.missingDataDisplay)),
        renderPersonDetail(el, props.dateOfBirthLabel, handleMissing(props.dateOfBirth, props.missingDataDisplay)),
        props.gestationalAge ? renderPersonDetail(el, props.gestationalAgeLabel, props.gestationalAge) : null,
        props.postMenstrualAge ? renderPersonDetail(el, props.postMenstrualAgeLabel, props.postMenstrualAge) : null,
        props.deceasedDate ? renderPersonDetail(el, props.deceasedDateLabel, props.deceasedDate) : null
    ];

/**
 * Renders the set of person identifiers.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Object} props - The props for the demographics banner.
 * @returns {VDom} Rendered person details.
 */
const renderIdentifiers = (el, props) =>
    Object.keys(props.identifiers).map((identifierKey) =>
        renderPersonDetail(el, identifierKey, props.identifiers[ identifierKey ])
    );

/**
 * Renders content of the demographics banner.
 * @param {Function} el - A function for creating virtual elements.
 * @param {VDom} content - VDom content.
 * @returns {VDom} Rendered content.
 */
const renderContent = (el, content = []) =>
    el(
        "div",
        {
            class: `${NAMESPACE}-content`
        },
        content
    );

/**
 * Renders the small view of the demographics banner.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Object} props - Properties of the demographics banner.
 * @returns {VDom} Virtual dom.
 */
const renderSmall = (el, props) =>
    renderContent(
        el,
        [
            renderPersonName(el, handleMissing(props.personName, props.missingDataDisplay)),
            el(
                "div",
                { class: `${NAMESPACE}-personDetails` },
                [
                    renderPersonDetails(el, props),
                    renderIdentifiers(el, props)
                ]
            ),
            renderApplicationContent(el, props.applicationContent)
        ]
    );

/**
 * Renders the large view of the demographics banner.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Object} props - Properties of the demographics banner.
 * @returns {VDom} Virtual dom.
 */
const renderLarge = (el, props) =>
    renderContent(
        el,
        [
            renderRow(el, [
                renderPersonName(el, handleMissing(props.personName, props.missingDataDisplay)),
                renderApplicationContent(el, props.applicationContent)
            ]),
            renderRow(el, [
                el(
                    "div",
                    { class: `${NAMESPACE}-personDetails` },
                    renderPersonDetails(el, props)
                ),
                el(
                    "div",
                    { class: `${NAMESPACE}-identifiers` },
                    renderIdentifiers(el, props)
                )
            ])
        ]
    );


export {
    NAMESPACE,
    SMALL_SIZE,
    LARGE_SIZE,
    handleMissing,
    renderRow,
    renderApplicationContent,
    renderPersonName,
    renderPersonDetail,
    renderPersonDetails,
    renderIdentifiers,
    renderSmall,
    renderLarge
};
