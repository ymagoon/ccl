"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import { setProp } from "../../../helpers/props/props";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const CheckboxEvents = {
    SELECTION_CHANGE: "Checkbox::selectionChange"
};

const checkboxDefaultClass = "mpageui-Checkbox";
const checkboxInlineClass = "mpageui-Checkbox--inline";
const checkboxContentWrapperClass = "mpageui-Checkbox-contentWrapper";
const checkboxInputWrapperClass = "mpageui-Checkbox-inputWrapper";
const checkboxInputClass = "mpageui-Checkbox-input";
const checkboxDisplayClass = "mpageui-Checkbox-display";
const checkboxDisabledClass = "mpageui-Checkbox--disabled";
const checkboxContentClass = "mpageui-Checkbox-content";

/**
 * Renders the display of the Checkbox.
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the Checkbox props
 * @returns {VDom | null} The virtual dom display of the Checkbox or null.
 */
const renderDisplay = (el, props) =>
    el(
        "div",
        {
            class: checkboxDisplayClass
        },
        props.display
    );

/**
 * Renders the display content for the Checkbox.
 * @param {Function} el - A function for creating virtual elements
 * @param {object} props - the Checkbox props
 * @param {Map<key, UIComponent>} mappedChildren - the list of children with key pairs
 * @param {Object} ctx - the Checkbox context
 * @returns {VDom | null} The virtual dom display of the display content
 */
const renderCheckboxContent = (el, props, mappedChildren, ctx) =>
    mappedChildren.content ?
        el(
            "div",
            {
                class: checkboxContentClass
            },
            [
                mappedChildren.content.render()
            ]
        )
        : null;

/**
 * Creates necessary aria attributes based on the Checkbox props.
 * @param {Object} props - The Checkbox props.
 * @returns {Object} The set of aria attributes for the Checkbox.
 */
const ariaAttributes = (props) =>
    Object.assign(
        {},
        props.label ? setProp("aria-label", props.label, {}) : null,
        props.name ? setProp("name", props.name, {}) : null,
        props.isSelected ? setProp("aria-selected", "true", {}) : null
    );

/**
 * Does not redraw the checkbox if only the "checked" attribute has changed so that focus is not removed
 * @param {Checkbox} checkbox - The source Checkbox control.
 * @returns {undefined} Returns nothing.
 */
const config = (checkbox) => ({ dom }) => {
    if (checkbox._shouldKeepFocus) { // eslint-disable-line no-underscore-dangle
        dom.focus();
        checkbox._shouldKeepFocus = false; // eslint-disable-line no-underscore-dangle
    }
};

/**
 * Renders the input of the Checkbox.
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the Checkbox props
 * @param {object} ctx - the Checkbox context
 * @returns {VDom | null} The virtual dom for the inpu of the Checkbox or null.
 */
const renderCheckbox = (el, props, ctx) =>
    el(
        "div",
        { class: checkboxInputWrapperClass },
        [
            el(
                "input",
                Object.assign(
                    {
                        type: "checkbox",
                        class: checkboxInputClass,
                        disabled: props.isDisabled,
                        onchange: ctx._handleChange.bind(ctx), // eslint-disable-line no-underscore-dangle
                        checked: props.isSelected,
                        oncreate: config(ctx),
                        onupdate: config(ctx)
                    },
                    ariaAttributes(props)
                ),
                []
            )
        ]
    );

/**
 * The Checkbox class.
 * @class Checkbox
 */
class Checkbox extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._shouldKeepFocus = false;
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            content: null,
            defaultClassNames: checkboxDefaultClass,
            display: "",
            isDisabled: false,
            isInline: false,
            isSelected: false,
            label: "",
            name: "",
            selectionChangeEventName: CheckboxEvents.SELECTION_CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) =>
                (content && content.isUIComponent)
                    ? this.replaceMappedChild("content", content)
                    : this.removeChild("content")
        };
    }

    /**
     * Handles the click event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleChange() {
        if (this.getProp("isDisabled")) {
            return;
        }

        this._shouldKeepFocus = true;

        const isSelected = !this.getProp("isSelected");
        this.setProp("isSelected", isSelected);

        this.emit(this.getProp("selectionChangeEventName"), this, isSelected);
        this.update();
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: (props.classNames !== ""),
                    [ checkboxDisabledClass ]: props.isDisabled,
                    [ checkboxInlineClass ]: props.isInline
                })
            },
            el(
                "label",
                { class: checkboxContentWrapperClass },
                [
                    renderCheckbox(el, props, this),
                    (props.content) ? renderCheckboxContent(el, props, mappedChildren, this) : renderDisplay(el, props)
                ]
            )
        );
    }
}

Checkbox.EVENTS = CheckboxEvents;

export default Checkbox;
