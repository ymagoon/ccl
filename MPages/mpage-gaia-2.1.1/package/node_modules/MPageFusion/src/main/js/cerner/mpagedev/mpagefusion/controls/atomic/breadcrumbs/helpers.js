/**
 * @fileoverview Dom helpers for breadcrumbs
 * @author Gyandeep Singh
 */

"use strict";

import { width } from "../../../helpers/dom/positioning";
import { parentElement } from "../../../helpers/dom/dom";

export const defaultCssClasses = {
    default: "mpageui-SecondaryBreadcrumb",
    item: "mpageui-SecondaryBreadcrumb-item",
    itemOverflow: "mpageui-SecondaryBreadcrumb-item-overflow",
    dataItem: "mpageui-SecondaryBreadcrumb-data-item",
    dataItemTruncate: "mpageui-SecondaryBreadcrumb-data-item-truncate",
    moreItem: "mpageui-SecondaryBreadcrumb-moreItem",
    moreItemHidden: "mpageui-SecondaryBreadcrumb-moreItem mpageui-u-hide",
    divider: "mpageui-SecondaryBreadcrumb-divider",
    hide: "mpageui-u-hide"
};

/**
 * Adjust every element based on space available
 * @param {object} infoObj - collection object for the reduce
 * @param {HTMLElement} item - Item DOM element
 * @param {int} idx - index of the element
 * @param {Array<HTMLElement>} allItems - collection of item DOM nodes
 * @returns {object} reduce collection object
 * @private
 */
const adjustItem = (infoObj, item, idx, allItems) => {
    // makesure the item is not hidden before you measure the width of the item
    item.classList.remove(defaultCssClasses.hide);
    item.classList.remove(defaultCssClasses.itemOverflow);
    infoObj.totalWidth += width(item);

    item.classList.add(defaultCssClasses.itemOverflow);

    // never hide the last 2 element so exit early
    if (idx >= allItems.length - 2) {
        return infoObj;
    }

    // hide the item if it exceeds the total width available
    if (infoObj.totalWidth > infoObj.parentWidth) {
        item.classList.add(defaultCssClasses.hide);
        infoObj.anyItemHidden = true;
    }
    else {
        item.classList.remove(defaultCssClasses.hide);
    }

    return infoObj;
};

/**
 * Makes item adjustment based on the parent container size.
 * @param {HTMLElement} dom - dom element for the breadcrumb
 * @returns {undefined}
 * @private
 */
const adjustItems = (dom) => {
    const moreItemElement = dom.querySelector(`.${defaultCssClasses.moreItem}`);

    // makesure the item is not hidden before you measure the width of the item
    moreItemElement.classList.remove(defaultCssClasses.hide);

    // hide element which are not fitting
    const { anyItemHidden } = Array
        .from(dom.querySelectorAll(`.${defaultCssClasses.item}`))
        .reduceRight(
            adjustItem,
            {
                totalWidth: 0,
                anyItemHidden: false,
                // total width should not include the width of "..." in the front
                parentWidth: width(parentElement(dom)) - width(moreItemElement)
            }
        );

    // if any item is hidden then make sure "..." is visible
    if (!anyItemHidden) {
        moreItemElement.classList.add(defaultCssClasses.hide);
    }
};

/**
 * Throttles the item adjust calls
 * @param {HTMLElement} dom - dom element for the breadcrumb
 * @returns {Function} curried function
 */
export const throttleItemAdjust = (dom) => {
    let timer = null;

    return () => {
        clearTimeout(timer);
        timer = setTimeout(() => adjustItems(dom), 200);
    };
};

