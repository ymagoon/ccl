"use strict";

import { demoBannerClassName } from "../const/classNames";
import { unique } from "../core/generators";

/**
 * Forces element to be a DOM element by executing getElementById if it is
 * a string or passing the value straight through if it is not.
 *
 * @param {string | HTMLElement} element - the element
 * @returns {HTMLElement} the dom element equivalent to element
 */
export const asDomElement = (element) =>
    typeof element === "string" ? document.getElementById(element) : element;

/**
 * Sets focus on the element provided
 * @param {string | HTMLElement} element - DOM element to focus on
 * @returns {undefined}
 */
export const focusElement = (element) => {
    asDomElement(element).focus();
};

/**
 * Returns the parent node of the supplied element
 * @param {string | HTMLElement} element - current node
 * @returns {HTMLElement} Parent element
 */
export const parentElement = (element) => asDomElement(element).parentNode;

/**
 * Checks if an element has overflow or not.
 * @param {HTMLElement} element - The HTML element.
 * @returns {boolean} True if the element style has overflow.
 */
export const hasOverflow = (element) =>
    (/auto|scroll/).test(element.style.overflow + element.style.overflowX + element.style.overflowY);

/**
 * Creates an element id for the element if it does not already have an id. If
 * it already has an id, that id is returned.
 * @param {HTMLElement} element - The element for which the id will be
 * generated.
 * @returns {string} The element id.
 */
export const makeOrGetId = (element) => {
    if (element.id) {
        return element.id;
    }
    element.id = unique("mpageui_element");
    return element.id;
};


/**
 * Returns the demographics banner DOM element if present.
 * It uses class name to make the selection and that class name is used from const module.
 * @returns {HtmlElement} Demographics banner DOM element.
 */
export const getDemoBannerElem = () => document.querySelector(`.${demoBannerClassName}`);

/**
 * Register window resize listeners
 * @param {Function} listener - function to be called on resize
 * @returns {undefined}
 */
export const addWindowResizeListener = (listener) => {
    window.addEventListener("resize", listener);
};

/**
 * Remove a window resize listener
 * @param {Function} listener - function to be called on resize
 * @returns {undefined}
 */
export const removeWindowResizeListener = (listener) => {
    window.removeEventListener("resize", listener);
};

/**
 * Determines if a node is a child of the parent node.
 * @param {HTMLElement} parentNode - Parent node.
 * @returns {Function} Function that checks if a provided node is a child of the parent.
 */
export const isChildOf = (parentNode) => (childNode) => {
    while (childNode && childNode !== document) {
        if (childNode === parentNode) {
            return true;
        }
        childNode = childNode.parentNode;
    }
    return false;
};

/**
 * Handles browser text selection in a cross-browser manner. Note that this
 * runs after-the-fact, meaning that users can [will] experience a flash of
 * text selection before it is collapsed.
 * @returns {undefined}
 */
export const collapseDocumentSelection = () => {
    if(window.getSelection) {
        if(window.getSelection().empty) {
            window.getSelection().empty();
        }
        else if(window.getSelection().removeAllRanges) {
            window.getSelection().removeAllRanges();
        }
    }
    else if(document.selection) {
        document.selection.empty();
    }
};
