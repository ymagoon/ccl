"use strict";

/* eslint no-underscore-dangle: ["error", { "allow": ["_state", "_reset", "_handleWindowResize", "_handleGroupDisplay"] }] */

import classNames from "classnames";
import UIComponent from "../../../../base";
import { handleResize, config } from "./dom";
import { makeMenu, makeMenuItems, updateMenuDisplay } from "./menu";
import { makeButtonGroup, makeButtonItems } from "./buttonGroup";
import { initialState, selectionState } from "./state";
import { EVENTS, NAMESPACE } from "./const";
import { addWindowResizeListener, removeWindowResizeListener } from "../../../../helpers/dom/dom";

/**
 * Based on the payload and the current state, generates a selection
 * differential.
 * @param {boolean} isMultiSelect - If the CollapseButtonGroup has multi
 * select enabled.
 * @param {Object} payload - The selection payload as emitted by the
 * child ButtonGroup or child MenuButton.
 * @param {Object} state - The current state of the CollapseButtonGroup.
 * @returns {Object} The selection differential.
 */
const makeSelectionDifferential = (isMultiSelect, payload, state = { selected: { ids: [] } }) =>
    ({
        changed: {
            selections: payload.changed.selections,
            deselections: isMultiSelect ? payload.changed.deselections : state.selected.ids
        }
    });

/**
 * Creates the selection payload to be emitted.
 * @param {Object} state - The current state of the CollapseButtonGroup.
 * @param {Object} diff - The selection differential.
 * @returns {Object} The payload to be emitted on selection change.
 */
const makeEmitPayload = (state, diff) => Object.assign(
    {},
    {
        selected: {
            ids: [ ...state.selected.ids ] // Clone
        }
    },
    diff
);

/**
 * Handles when the selection change occurs from the child ButtonGroup or
 * child MenuButton.
 * @param {CollapseButtonGroup} ctrl - The CollapseButtonGroup instance.
 * @param {Object} payload - The selection payload as emitted by the
 * child ButtonGroup or child MenuButton.
 * @returns {undefined} Returns nothing.
 */
const handleSelectionChange = (ctrl, payload) => {
    // If nothing changed, skip all selection logic.
    if(!payload.changed.selections.length && !payload.changed.deselections.length) {
        return;
    }
    // Create a selection differential
    const diff = makeSelectionDifferential(
        ctrl.getProp("multiSelect"),
        payload,
        ctrl._state
    );
    // Update the state based on the selection changes
    ctrl._state = selectionState(ctrl._state, diff);

    ctrl.emit(
        ctrl.getProp("selectionChangeEventName"),
        this,
        makeEmitPayload(ctrl._state, diff)
    );

    if(!ctrl.getProp("multiSelect")) {
        ctrl.getChild("menuButton").setProp("isOpen", false);
    }

    ctrl._reset = true;
    ctrl.update();
};

/**
 * The CollapseButtonGroup class.
 * @class CollapseButtonGroup
 */
class CollapseButtonGroup extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._handleWindowResize = handleResize(this);

        // Internal state
        this._state = initialState(props);
        this._reset = true;
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            canDeselect: true,
            multiSelect: false,
            items: [],
            selected: [],
            selectionChangeEventName: EVENTS.COLLAPSE_BUTTON_GROUP.SELECTION_CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            selected: (selected) => {
                this._state.selected.ids = selected;
                this._reset = true;
            },
            items: (items) => {
                this.getChild("buttonGroup").setProp("items", items);
                this._reset = true;
            },
            canDeselect: (canDeselect) => {
                this.getChild("buttonGroup").setProp("canDeselect", canDeselect);
                this._reset = true;
            },
            multiSelect: (multiSelect) => {
                this.getChild("buttonGroup").setProp("multiSelect", multiSelect);
                this._reset = true;
            }
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                buttonGroup: makeButtonGroup()
            },
            {
                menuButton: makeMenu()
            }
        ];
    }

    /**
     * Places the items appropriately face-up. If there is not enough room, the face-up representation of the item
     * will be hidden.
     * @param {HTMLElement} dom - Dom element for the group
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleGroupDisplay({ dom }) {
        config(
            this,
            this._state.range,
            (range) => {
                this._state.range = range;
                this._reset = true;
            },
            dom
        );
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(EVENTS.BUTTON_GROUP.SELECTION_CHANGE, (buttonGroup, payload) => {
            this.stopPropagation(EVENTS.BUTTON_GROUP.SELECTION_CHANGE);
            this.getChild("menuButton").setProp("isOpen", false);
            handleSelectionChange(this, payload);
        });
        this.on(EVENTS.MENU.SELECTION_CHANGE, (menu, items, payload) => {
            this.stopPropagation(EVENTS.MENU.SELECTION_CHANGE);
            this.getChild("menuButton").setProp("isOpen", false);
            handleSelectionChange(this, payload);
        });
    }

    /**
     * @inheritDoc
     */
    beforeRender() {
        if (!this._reset) {
            return;
        }
        this.getChild("buttonGroup").setProp("items",
            makeButtonItems(
                this.getProp("items"),
                this._state
            )
        );

        // Need to rebuild from state.
        this.getChild("menuButton").setProp("content",
            makeMenuItems(
                this.getProp("items"),
                this._state,
                this.getProp("multiSelect"),
                this.getProp("canDeselect")
            )
        );

        // Update the display
        updateMenuDisplay(
            this.getChild("menuButton"),
            this._state,
            this.getProp("items")
        );

        this._reset = false;
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            {
                class: classNames(
                    NAMESPACE,
                    {
                        [ `${NAMESPACE}--allHidden` ]: (!this._state.range)
                    }
                ),
                oncreate: (vnode) => {
                    addWindowResizeListener(this._handleWindowResize);
                    this._handleGroupDisplay(vnode);
                },
                onupdate: this._handleGroupDisplay.bind(this),
                onremove: () => removeWindowResizeListener(this._handleWindowResize)
            },
            [
                mappedChildren.buttonGroup.render(),
                mappedChildren.menuButton.render()
            ]
        );
    }
}

CollapseButtonGroup.EVENTS = EVENTS.COLLAPSE_BUTTON_GROUP;

export default CollapseButtonGroup;
