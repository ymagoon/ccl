import UIComponent from "../../../base";
import TabList from "./../../atomic/tabs/TabList";
import Tab from "./../../atomic/tabs/Tab";
import ViewpointDropdown from "./ViewpointDropdown";
import ViewpointAddTab from "./ViewpointAddTab";
import ViewpointTabLink from "./ViewpointTabLink";
import classNames from "classnames";
import { clamp } from "../../../helpers/core/math";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const namespace = "mpageui-ViewpointTabList";
const ViewpointTabListEvents = {
    ADD_TAB: "ViewpointTabList::addTab",
    ORDER_CHANGE: "ViewpointTabList::orderChange",
    REQUEST_REMOVE_TAB: "ViewpointTabList::requestRemoveTab",
    SELECTION_CHANGE: "ViewpointTabList::selectionChange"
};

// ------------------------------------------------------------------------------
// Children
// ------------------------------------------------------------------------------
/**
 * Creates pointDropdown child.
 * @returns {{dropdown: ViewpointDropdown}} The mapped ViewpointDropdown child.
 */
const createDropdown = () => ({ dropdown: new ViewpointDropdown() });

/**
 * Creates the TabList child.
 * @returns {{tabList: TabList}} The mapped TabList child.
 */
const createTabList = () => ({
    tabList: new TabList({
        draggable: true,
        defaultClassNames: `${namespace}-tabList`
    })
});

/**
 * Creates a single Tab for the ViewpointTabList.
 * @param {Object} tab - The tab for which the Tab is created.
 * @returns {Tab} The Tab created based on the provided tab object.
 */
const createViewTab = (tab) =>
    new Tab(
        {
            id: tab.id,
            defaultClassNames: "mpageui-ViewpointTab",
            meta: tab
        },
        [
            {
                viewpointTabLink: new ViewpointTabLink({
                    id: tab.id,
                    display: tab.display,
                    title: tab.title
                })
            }
        ]
    );

/**
 * Transforms a list of tabs into Tab objects.
 * @param {Array<Object>} tabs - An array of tabs.
 * @returns {Array<Tab>} The generated array of Tabs.
 */
const createViewTabs = (tabs) =>
    tabs.map((view) => createViewTab(view));

/**
 * Creates a ViewpointAddTab with a constant id.
 * @param {string} addTabDisplay - The label to display in the add tab.
 * @returns {ViewpointAddTab} The created ViewpointPlusAddTab.
 */
const createAddTab = (addTabDisplay) =>
    new ViewpointAddTab({ id: "viewpointAddTab", display: addTabDisplay });

/**
 * Creates the full set of tabs for the ViewpointTabList. First are the
 * tabs created via the tab objects provided as props to the ViewpointTabList,
 * followed by an add tab (always at the end).
 * @param {Array<Object>} tabs - An array of tab objects which will be
 * transformed to actual Tab objects.
 * @param {string} addTabDisplay - The label to display in the add tab.
 * @returns {Array<UIComponent>} The full set of tabs to be rendered in the
 * tab list.
 */
const createTabs = (tabs, addTabDisplay) => [
    ...createViewTabs(tabs),
    createAddTab(addTabDisplay)
];

/**
 * Removes all children from the tab list then provides the tab list with an
 * entirely new set of children.
 * @param {UIComponent} tabList - The child TabList.
 * @param {Array<Object>} tabs - An array of new tabs.
 * @param {string} addTabDisplay - The label to display in the add tab.
 * @returns {undefined} Returns nothing.
 */
const resetTabs = (tabList, tabs, addTabDisplay) => {
    tabList.setProp("tabs", createTabs(tabs, addTabDisplay));
};

/**
 * Updates the text of the dropdown with the provided display.
 * @param {ViewpointTabList} viewpointTabList - The ViewpointTabList.
 * @param {string} display - The display for the dropdown.
 * @returns {undefined} Returns nothing.
 */
const updateDropdownDisplay = (viewpointTabList, display) => {
    viewpointTabList.getChild("dropdown").setProp("display", display);
};

// ------------------------------------------------------------------------------
// Viewpoint Tabs
// ------------------------------------------------------------------------------
/**
 * Returns the tab with the specified id.
 * @param {Array<Object>} tabs - The array of tabs.
 * @param {string} id - The id of the tab to find.
 * @returns {Object | undefined} The tab with the matching id.
 */
const getTabById = (tabs, id) =>
    tabs.find((v) => v.id === id);

/**
 * Inserts a tab at the specified index.
 * @param {Array<Object>} tabs - The array of tab objects.
 * @param {Object} tab - The tab to insert.
 * @param {number} index - The index to insert the tab at.
 * @returns {Array<Object>} The array of tabs after insertion.
 */
const insertTab = (tabs, tab, index) => {
    tabs.splice(clamp(0, tabs.length, index), 0, tab);
    return tabs;
};

/**
 * Removes the tab with the specified id from the provided list of tabs.
 * @param {Array<Object>} tabs - The array of tab objects.
 * @param {string} tabId - The id of the tab to be removed.
 * @param {Function} getTabIdFunction - Function which returns the id of the tab.
 * @returns {Array<Object>} The array of tabs with the tab removed.
 */
const removeTab = (tabs, tabId, getTabIdFunction) =>
    tabs.filter((tab) => getTabIdFunction(tab) !== tabId);

/**
 * Returns the index of the tab with the specified id.
 * @param {Array<Object>} tabs - The array of tab objects.
 * @param {string} id - The id of the tab to find.
 * @returns {number} The index of the tab with the specified id.
 */
const getTabIndex = (tabs, id) =>
    tabs.findIndex((tab) => tab.id === id);

/**
 * Sorts the array of tabs based on their position in the provided order array.
 * @param {Array<Object>} tabs - The array of tabs.
 * @param {Array<string>} orderArray - An ordering array of tabs ids.
 * @returns {Array<Object>} Sorted tabs.
 */
const sortTabsWithOrder = (tabs, orderArray) =>
    orderArray.map((id) => getTabById(tabs, id));

/**
 * Returns the max height that the dropdown menu can be. This will bound the
 * menu to fit within the window.
 * @param {Object} rect - The bounding client rect for the dropdown menu.
 * @param {Window} window - The window object.
 * @returns {number} The max height allotted to the dropdown menu.
 */
const getMenuMaxHeight = (rect, window) => window.innerHeight - rect.top;

// ------------------------------------------------------------------------------
// Stack (Selection History)
// ------------------------------------------------------------------------------
/**
 * Pushes the tabId onto the stack.
 * @param {Array<string>} stack - The selection stack.
 * @param {string} tabId - The id of the view being pushed to the stack.
 * @returns {Array<string>} stack - The selection stack.
 */
const pushToStack = (stack, tabId) => {
    stack.unshift(tabId);
    return stack;
};

/**
 * Finds the first available tab id in the stack.
 * @param {Array<string>} stack - The selection stack of Tab ids.
 * @param {Array<string>} tabIds - The array of available Tab ids.
 * @returns {string | undefined} The id of the first available Tab in the stack.
 */
const firstTabInStack = (stack, tabIds) =>
    stack.find((s) => tabIds.find((id) => (id === s)));

/**
 * Finds a fallback Tab for selection purposes.
 * @param {Array<string>} stack - The selection stack of Tab ids.
 * @param {Array<string>} tabIds - The array of available Tab ids.
 * @returns {string | null} The id of the fallback Tab.
 */
const fallbackTab = (stack, tabIds) =>
    (firstTabInStack(stack, tabIds) || (tabIds.length ? tabIds[ 0 ] : null));

/**
 * Helper function to retrieve a checked selected tab id. If no id is provided,
 * null is returned. Otherwise, if an id is provided BUT the tab is not defined,
 * then the id from the top of the stack is returned. Otherwise, if an id is
 * provided and the tab is defined, the id is acceptable and is returned.
 * @param {string | *} id - The id being checked.
 * @param {Object | null} tab - The tab which is to match the id.
 * @param {Array<string>} stack - The selection history stack.
 * @returns {string | null} The checked id or null.
 */
const getCheckedSelectedTabId = (id, tab, stack) => {
    if (!id) {
        return null;
    }
    else if (!tab) {
        return stack[ 0 ];
    }
    else {
        return id;
    }
};

/**
 * Updates the element max height based on window
 * @param {HTMLElement} dom - dom element
 * @returns {undefined}
 * @private
 */
const updateElemMaxHeight = ({ dom }) => {
    dom.style.maxHeight = `${getMenuMaxHeight(dom.getBoundingClientRect(), window)}px`;
};

/**
 * The ViewpointTabList class.
 * @class ViewpointTabList
 */
export default class ViewpointTabList extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._stack = [ null ];
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            addTabDisplay: "",
            isOpen: false,
            selectedTabId: null,
            tabs: [] // Mutable
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            /**
             * Handles when the isOpen prop has changed. It will sync the
             * isOpen prop of the dropdown child.
             * @param {boolean} isOpen - The open state of the ViewpointTabList.
             * @returns {undefined} Returns nothing.
             */
            isOpen: (isOpen) => {
                this.getChild("dropdown").setProp("isOpen", isOpen);
            },
            /**
             * Handles when the selectedTabId prop has changed. The logic is
             * as follows.
             *
             * 1). If the id provided is falsy, selection is set to null (no selection).
             * 2). If an id is provided BUT no tab object matches the id, use the last
             *          selected tab off the top of the stack.
             * 3). If the id being selected is not already on the top of the stack, push it.
             * 4). Update the selection on the child TabList.
             * 5). Update the dropdown display.
             * @param {string} id - The id of the selected tab.
             * @returns {undefined} Returns nothing.
             */
            selectedTabId: (id) => {
                const tab = getTabById(this.getProp("tabs"), id);
                const checkedId = getCheckedSelectedTabId(id, tab, this._stack);
                this._props.selectedTabId = checkedId;

                if (this._stack[ 0 ] !== checkedId) {
                    pushToStack(this._stack, checkedId);
                }
                this.getChild("tabList")
                    .setProp("selectedTabId", checkedId);

                updateDropdownDisplay(
                    this,
                    tab ? tab.display : ""
                );
            },
            /**
             * Handles when the tabs prop has changed. It will reset the tabs
             * on the encapsulated TabList child.
             * @param {Array<Object>} tabs - The array of tab objects.
             * @returns {undefined} Returns nothing.
             */
            tabs: (tabs) => {
                resetTabs(this.getChild("tabList"), tabs, this.getProp("addTabDisplay"));
            }
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            createDropdown(),
            createTabList()
        ];
    }

    /**
     * Returns the index of the selected tab.
     * @returns {number} The index of the selected tab.
     */
    getSelectedTabIndex() {
        return this.getProp("tabs").findIndex(
            (tab) => tab.id === this.getProp("selectedTabId")
        );
    }

    /**
     * Returns the number of tabs present.
     * @returns {number} The number of tabs.
     */
    getTabCount() {
        return this.getProp("tabs").length;
    }

    /**
     * Checks if a tab with the specified id exists in the ViewpointTabList.
     * @param {string} id - The id of the tab being checked.
     * @returns {boolean} True if the tab exists, otherwise false.
     */
    hasTab(id) {
        return (getTabById(this.getProp("tabs"), id) !== undefined);
    }

    /**
     * External API interface.
     *
     * Inserts a tab at the specified index.
     * @param {Object} tab - The viewpoint tab to be inserted.
     * @param {number} [index] - The index at which the tab is inserted.
     * @returns {undefined} Returns nothing.
     */
    insertTab(tab, index) {
        const viewpointTab = getTabById(this.getProp("tabs"), tab.id);
        if (viewpointTab) {
            return;
        }
        if (typeof index !== "number") {
            index = this.getTabCount();
        }
        // Sync state
        insertTab(this.getProp("tabs"), tab, index);

        // Insert the new Tab into the child TabList
        this.getChild("tabList").setProp("tabs", insertTab(
            this.getChild("tabList").getProp("tabs"),
            createViewTab(tab),
            clamp(0, this.getTabCount(), index)
        ));
        this.update();
    }

    /**
     * External API interface.
     *
     * Attempts to select the tab with the specified id.
     * @param {string} id - The id of the tab to be selected.
     * @returns {undefined} Returns nothing.
     */
    selectTab(id) {
        const checkedId = (!id ? null : id);
        const tab = getTabById(this.getProp("tabs"), checkedId);
        // Do nothing if
        // 1). The requested id is not null and no tab is found.
        // 2). The requested id is already selected.
        if ((!tab && checkedId !== null) || checkedId === this.getProp("selectedTabId")) {
            return;
        }
        this.setProp("isOpen", false);
        this.setProp("selectedTabId", checkedId);
        this.emit(ViewpointTabListEvents.SELECTION_CHANGE, checkedId);
        this.update();
    }

    /**
     * External API interface.
     *
     * Attempts to remove the tab with the specified id. If the tab being closed
     * is the currently selected tab, a fallback is found, but only if the
     * fallback flag is specified.
     * @param {string} id - The id of the tab to be removed.
     * @param {boolean} [fallback] - If the selection should fall back upon
     * removing the specified tab.
     * @returns {undefined} Returns nothing.
     */
    removeTab(id, fallback) {
        const tab = getTabById(this.getProp("tabs"), id);
        if (!tab) {
            return;
        }
        // Sync state
        this._props.tabs = removeTab(
            this.getProp("tabs"), id, (tabObject) => tabObject.id
        );

        // Remove the tab from the child TabList
        this.getChild("tabList").setProp("tabs", removeTab(
            this.getChild("tabList").getProp("tabs"), id,
            (tabObject) => tabObject.getProp("id")
        ));

        // Selection fallback
        if (id === this.getProp("selectedTabId")) {
            const fallbackId = fallback ? fallbackTab(
                this._stack,
                this.getProp("tabs").map((t) => t.id)
            ) : null;
            this.selectTab(fallbackId);
        }

        this.update();
    }

    /**
     * Updates the tab that matches the id of the tab object that is provided
     * to this function.
     * @param {Object} tab - The attributes of the tab to be updated.
     * @returns {undefined} Returns nothing.
     */
    updateTab(tab) {
        const childTab = this.getChild("tabList").getProp("tabs").find(
            (t) => t.getProp("id") === tab.id
        );
        if (!childTab) {
            return;
        }
        // Sync state
        const updateTab = getTabById(this.getProp("tabs"), tab.id);
        const tabIndex = getTabIndex(this.getProp("tabs"), tab.id);
        const updatedTab = Object.assign({}, updateTab, tab);
        // Prevent mutating the original tab object
        this._props.tabs[ tabIndex ] = updatedTab;

        // Update the child Tab
        childTab.setProp("meta", updatedTab);
        childTab.getChild("viewpointTabLink")
            .setProp("display", updatedTab.display)
            .setProp("title", updatedTab.title);

        // If the selected view is updated, make sure the dropdown stays in sync
        if (tab.id === this.getProp("selectedTabId")) {
            updateDropdownDisplay(this, updatedTab.display);
        }

        this.update();
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        // Attach Listeners
        // -> TabList
        this.on(TabList.EVENTS.ORDER_CHANGE, this._handleTabOrderChanged.bind(this));
        this.on(TabList.EVENTS.SELECTION_CHANGE, this._handleTabListSelectionChange.bind(this));

        // -> Others
        this.on(ViewpointTabLink.EVENTS.CLOSE_CLICK, this._handleCloseTabClick.bind(this));
        this.on(ViewpointAddTab.EVENTS.CLICK, this._handlePlusAddTabClick.bind(this));
        this.on(ViewpointDropdown.EVENTS.CLICK, this._handleDropdownClick.bind(this));
    }

    /**
     * Handles the event in which the order of the tabs has changed. This will
     * also keep the list of tabs on the ViewpointTabList in sync with the
     * sorted order as received from the child TabList.
     * @param {TabList} tabList - The originating TabList.
     * @param {Array<string>} newOrder - The new order of the tabs as an array
     * of tab ids (which are view ids).
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleTabOrderChanged(tabList, newOrder) {
        this.stopPropagation(TabList.EVENTS.ORDER_CHANGE);
        // Sync state
        this._props.tabs = sortTabsWithOrder(
            this.getProp("tabs"),
            newOrder.slice(0, newOrder.length - 1)
        );
        // Ignore the last + Add tab
        this.emit(
            ViewpointTabListEvents.ORDER_CHANGE,
            newOrder.slice(0, newOrder.length - 1)
        );
    }

    /**
     * Handles the selection of a tab from the child TabList.
     * @param {TabList} tabList - The originating TabList.
     * @param {Tab} tab - The tab that was selected.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleTabListSelectionChange(tabList, tab) {
        this.stopPropagation(TabList.EVENTS.SELECTION_CHANGE);
        this.setProp("isOpen", false);
        this.selectTab(tab.getProp("id"));
    }

    /**
     * Handles the click event from the child ViewpointDropdown. It keeps the
     * open state of the dropdown in sync with the child ViewpointDropdown.
     * @param {boolean} isOpen - The open state of the dropdown.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleDropdownClick(isOpen) {
        this.stopPropagation(ViewpointDropdown.EVENTS.CLICK);
        this.setProp("isOpen", isOpen);
    }

    /**
     * Handles the event in which a tab is closed.
     * @param {string} id - The id of the tab (view id) which triggered the close.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleCloseTabClick(id) {
        this.stopPropagation(ViewpointTabLink.EVENTS.CLOSE_CLICK);
        this.emit(ViewpointTabListEvents.REQUEST_REMOVE_TAB, id);
    }

    /**
     * Handles the event in which the plus-add tab is clicked.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handlePlusAddTabClick() {
        this.stopPropagation(ViewpointAddTab.EVENTS.CLICK);
        this.emit(ViewpointTabListEvents.ADD_TAB);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return el(
            "div",
            {
                class: classNames({
                    [ namespace ]: true,
                    "is-open": props.isOpen
                })
            },
            [
                el(
                    "div",
                    {
                        class: classNames({
                            [ `${namespace}-dropdown` ]: true,
                            "mpageui-u-hide-for-md": true
                        })
                    },
                    [
                        this.getChild("dropdown").render()
                    ]
                ),
                el(
                    "div",
                    {
                        class: `${namespace}-anchor`,
                        oncreate: updateElemMaxHeight,
                        onupdate: updateElemMaxHeight
                    },
                    [
                        this.getChild("tabList").render()
                    ]
                )
            ]
        );
    }
}

ViewpointTabList.EVENTS = ViewpointTabListEvents;
