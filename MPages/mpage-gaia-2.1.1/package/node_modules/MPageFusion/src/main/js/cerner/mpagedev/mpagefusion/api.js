"use strict";

/* globals VERSION */

import UIComponent from "./base";

const version = VERSION;

// atomic controls
import DemographicsBanner from "./controls/atomic/demographics/DemographicsBanner";
import { ClinicalBadge } from "./controls/atomic/badge";
import { default as Button, AsyncButton, SelectButton } from "./controls/atomic/button";
import Card from "./controls/atomic/card/index";
import Checkbox from "./controls/atomic/checkbox";
import Container from "./controls/atomic/container";
import * as icon from "./controls/atomic/icon";
import Label, { Anchor } from "./controls/atomic/label";
import ContentPanel from "./controls/atomic/content-panel";
import { ScrollPane } from "./controls/atomic/scroll-pane";
import { NoResults, LoadingSpinner, NoResultsInfo, Notify, Overlay } from "./controls/atomic/indicator";
import Table from "./controls/atomic/table";
import Flowsheet from "./controls/atomic/flowsheet";
import {
    default as FooterBase,
    AffirmDenyFooter,
    NotificationFooter,
    PaginationFooter
} from "./controls/atomic/footer";
import {
    ContentHeader,
    NavigationHeader
} from "./controls/atomic/header";
import Select from "./controls/atomic/select";
import DocumentRenderer from "./controls/atomic/document-renderer";
import { ProgressBar, ThresholdProgressBar } from "./controls/atomic/progress-bar";
import { DataSection } from "./controls/atomic/data";
import { CellGrid, CardLayout } from "./controls/atomic/grid";
import { HideShow, InlineDropDown } from "./controls/atomic/progressive-disclosure";
import { SecondaryBreadcrumb } from "./controls/atomic/breadcrumbs";
import Slider from "./controls/atomic/slider/Slider";
import ContentDecorator from "./controls/atomic/content-decorator";
import TextBox from "./controls/atomic/textbox";
import { default as NestablePane, NestablePaneRoot, NestablePaneWithHeader } from "./controls/atomic/nestable-pane";
// composite controls
import BannerItem, { BannerManager } from "./controls/composite/banner";
import { MenuButton, SplitButton } from "./controls/composite/button";
import CollapseGroup from "./controls/composite/collapse-group";
import ComboBox from "./controls/composite/comboBox/manager/ComboBox";
import ComponentHeader from "./controls/composite/component-header";
import { detailPanel } from "./controls/composite/panel";
import * as form from "./controls/composite/forms/controls";
import { InlineList } from "./controls/composite/list";
import Menu from "./controls/composite/menu/Menu";
import Popup from "./controls/composite/popup";
import InlinePopup from "./controls/composite/inline-popup";
import PopupList from "./controls/composite/popup-list";
import ResponsiveButtonGroup from "./controls/composite/responsive-button-group";
import Search, { SearchBar, SearchList } from "./controls/composite/search";
import { ButtonGroup, CollapseButtonGroup } from "./controls/composite/select-group";
import { ViewpointTabList } from "./controls/composite/viewpoint-tab-list";
import Modal from "./controls/composite/modal";
import TabControl from "./controls/composite/tabs";
import FolderTree, { FolderTreePop } from "./controls/composite/folder-tree";
import { TagList, TagListSearch } from "./controls/composite/tag-list";
import ScopedSearch from "./controls/composite/scopedSearch";

// Fusion internal adapter related core APIs
import * as coreAPI from "./coreAPI";

// helpers
import {
    forwardProp,
    forwardProps,
    emitUsingProp
} from "./helpers/props/props";

import {
    renderRequiredIcon,
    renderTitle,
    renderHelperText,
    renderErrorText,
    renderCriticalitySection,
    renderDualColumnView
} from "./controls/composite/forms/helpers/view";


// theme
import { theme } from "./theme/theme";

const atomic = {
    badge: {
        ClinicalBadge
    },
    button: {
        Button,
        AsyncButton,
        SelectButton
    },
    breadcrumbs: {
        SecondaryBreadcrumb
    },
    card: {
        Card
    },
    container: {
        Container
    },
    decorator: {
        ContentDecorator
    },
    demographics: {
        DemographicsBanner
    },
    DocumentRenderer,
    footer: {
        FooterBase,
        AffirmDenyFooter,
        NotificationFooter,
        PaginationFooter
    },
    grid: {
        CellGrid,
        CardLayout
    },
    header: {
        ContentHeader,
        NavigationHeader
    },
    icon,
    indicator: {
        LoadingSpinner,
        NoResults,
        NoResultsInfo,
        Notify,
        Overlay
    },
    label: {
        Anchor,
        Label
    },
    panel: {
        ContentPanel,
        ScrollPane,
        nestablePane: {
            NestablePane,
            NestablePaneRoot,
            NestablePaneWithHeader
        }
    },
    progressiveDisclosure: {
        HideShow,
        InlineDropDown
    },
    progressBar: {
        ProgressBar,
        ThresholdProgressBar
    },
    section: {
        DataSection
    },
    selection: {
        Select,
        Checkbox
    },
    slider: {
        Slider
    },
    table: {
        Flowsheet,
        Table
    },
    textbox: {
        TextBox
    }
};

const composite = {
    banner: {
        BannerItem,
        BannerManager
    },
    button: {
        ButtonGroup,
        CollapseButtonGroup,
        CollapseGroup,
        MenuButton,
        ResponsiveButtonGroup,
        SplitButton
    },
    ComponentHeader,
    detailPanel,
    dialog: {
        InlinePopup,
        Popup,
        PopupList,
        Modal
    },
    entry: {
        ComboBox,
        ScopedSearch,
        Search,
        SearchBar,
        SearchList,
        TagList,
        TagListSearch
    },
    form,
    list: {
        InlineList
    },
    menu: {
        Menu
    },
    navigation: {
        FolderTree,
        FolderTreePop,
        TabControl
    },
    ViewpointTabList
};

const helpers = {
    props: {
        forwardProp,
        forwardProps,
        emitUsingProp
    },
    forms: {
        view: {
            renderRequiredIcon,
            renderTitle,
            renderHelperText,
            renderErrorText,
            renderCriticalitySection,
            renderDualColumnView
        }
    }
};

const externals = {};

/**
 * Way to register external controls with MPageFusion
 * @param {string} name - Name of the controls
 * @param {class} classConstructor - Constructor of the control
 * @returns {undefined}
 */
const registerExternals = (name, classConstructor) => {
    if (externals[name]) {
        console.warn(`${name} already exits in MPageFusion externals`); // eslint-disable-line no-console
    }

    externals[name] = classConstructor;
};

export {
    UIComponent,
    composite,
    atomic,
    theme,
    helpers,
    version,
    externals,
    registerExternals,
    coreAPI
};
