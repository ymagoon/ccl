/* eslint
 "no-underscore-dangle": [2, { "allowAfterThis": true, "allow": ["_state"] }]
 */

import KEY_CODES from "../../../../helpers/const/keyCodes";

/**
 * Handles the TextBox key down event.
 * @param {SearchBar} control - The search bar instance.
 * @param {string} eventName - The event name.
 * @returns {function} The handler for the TextBox key down event.
 */
const handleTextBoxKeyDown = (control, eventName) => (e) => {
    control.stopPropagation(eventName);

    // Check if it's a navigation event
    if (e.keyCode === KEY_CODES.ARROW_UP || e.keyCode === KEY_CODES.ARROW_DOWN) {
        /*
         * Prevent default behavior, otherwise this could cause the
         * page to scroll.
         */
        e.preventDefault();
        control.emit(
            control.getProp("navigationEventName"), control, {
                keyCode: e.keyCode
            });
    }
};

/**
 * Handles the TextBox key up event.
 * @param {SearchBar} control - The search bar instance.
 * @param {string} eventName - The event name.
 * @returns {function} The handler for the TextBox key up event.
 */
const handleTextBoxKeyUp = (control, eventName) => (e) => {
    control.stopPropagation(eventName);

    // Confirm
    if (e.keyCode === KEY_CODES.ENTER) {
        control.emit(control.getProp("confirmEventName"), control);
    }

    // Cancel (treated as input)
    if (e.keyCode === KEY_CODES.ESC) {
        control.getChild("textBox")
            .setProp("value", "");

        control.update();

        // De-bounce
        clearTimeout(control._state.inputDebounce);
        control.setState({ inputDebounce: setTimeout(() => {
            control.emit(control.getProp("inputEventName"), control);
        }, control.getProp("throttle")) }).update();
    }
};

/**
 * Handles the TextBox input event.
 * @param {SearchBar} control - The search bar instance.
 * @param {string} eventName - The event name.
 * @returns {function} The handler for the TextBox input event.
 */
const handleTextBoxInput = (control, eventName) => (src, value) => {
    control.stopPropagation(eventName);

    // De-bounce
    clearTimeout(control._state.inputDebounce);
    control._state.inputDebounce = setTimeout(() => {
        control.emit(control.getProp("inputEventName"), control, value);
    }, control.getProp("throttle"));
};



export {
    handleTextBoxKeyDown,
    handleTextBoxKeyUp,
    handleTextBoxInput
};
