"use strict";

import UIComponent from "../../../base";
import List from "../../composite/list";
import classNames from "classnames";
import {
    isNull
} from "../../../helpers/core/typeChecks";
import {
    convertContentIntoControls,
    FolderTreeEvents,
    FolderTreeInternalEvents,
    getFolderSize
} from "./helpers";

const NAMESPACE = "mpageui-FolderTree";

/**
 * Folder tree is a list of folders and items:
 * * Recursive list of folders and items
 * * Items are selectable
 *
 * @class FolderTree
 */
class FolderTree extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            content: null,
            fileClickEventName: FolderTreeEvents.FILE_CLICK,
            folderExpandEventName: FolderTreeEvents.FOLDER_EXPAND,
            folderCollapseEventName: FolderTreeEvents.FOLDER_COLLAPSE
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                tree: new List({
                    autoInsertDividers: true
                })
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.convertEventUsingProp(
            FolderTreeInternalEvents.FILE_CLICK,
            "fileClickEventName",
            (item, displayValue, id) => [ this, item, displayValue, id ]
        );
        this.on(FolderTreeInternalEvents.FOLDER_EXPAND, (subFolder) => {
            this.stopPropagation(FolderTreeInternalEvents.FOLDER_EXPAND);
            if (isNull(subFolder.getProp("content"))) {
                this.emit(this.getProp("folderExpandEventName"), subFolder);
            }
        });
        this.convertEventUsingProp(
            FolderTreeInternalEvents.FOLDER_COLLAPSE,
            "folderCollapseEventName",
            (subFolder) => [ this, subFolder ]
        );
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => {
                this.getChild("tree").setProp("content", convertContentIntoControls(content));
            }
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mChildren) {
        return el(
            "ul",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                }),
                role: "tree",
                "aria-labelledby": NAMESPACE,
                "aria-level": "1",
                "aria-expanded": true,
                "aria-setsize": getFolderSize(props.content)
            },
            this.renderChildren()
        );
    }
}

FolderTree.EVENTS = FolderTreeEvents;
export default FolderTree;
