"use strict";

import UIComponent from "../../../../base";
import classNames from "classnames";
import { setProp } from "../../../../helpers/props/props";
import { replaceChild } from "../../forms/helpers/view";

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------
const RadioButtonEvents = {
    SELECTION_CHANGE: "RadioButton::selectionChange"
};

const radioButtonDefaultClass = "mpageui-RadioButton";
const radioButtonInlineClass = "mpageui-RadioButton--inline";
const radioButtonContentWrapperClass = "mpageui-RadioButton-contentWrapper";
const radioButtonInputWrapperClass = "mpageui-RadioButton-inputWrapper";
const radioButtonInputClass = "mpageui-RadioButton-input";
const radioButtonDisplayClass = "mpageui-RadioButton-display";
const radioButtonDisabledClass = "mpageui-RadioButton--disabled";
const radioButtonContentClass = "mpageui-RadioButton-content";

/**
 * Renders the display of the RadioButton.
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the RadioButton props
 * @returns {VDom | null} The virtual dom display of the RadioButton or null.
 */
const renderDisplay = (el, props) =>
    props.display
        ? el("div",
            {
                class: radioButtonDisplayClass
            },
            props.display
        )
        : null;

/**
 * Renders the content of the RadioButton.
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the RadioButton props
 * @param {object} mappedChildren - the RadioButton mapped children.
 * @returns {VDom | null} The virtual dom for the content of RadioButton or null.
 */
const renderContent = (el, props, mappedChildren) =>
    (props.content)
        ? el("div",
            {
                class: radioButtonContentClass
            },
            mappedChildren.content.render()
        )
        : renderDisplay(el, props);

/**
 * Creates necessary aria attributes based on the RadioButton props.
 * @param {Object} props - The RadioButton props.
 * @returns {Object} The set of aria attributes for the RadioButton.
 */
const ariaAttributes = (props) =>
    Object.assign(
        {},
        props.label ? setProp("aria-label", props.label, {}) : null,
        props.name ? setProp("name", props.name, {}) : null,
        props.isSelected ? setProp("aria-selected", "true", {}) : null
    );

/**
 * Does not redraw the radioButton if only the "checked" attribute has changed so that focus is not removed
 * @param {RadioButton} radioButton - The source RadioButton control.
 * @returns {undefined} Returns nothing.
 */
const config = (radioButton) => ({ dom }) => {
    if (radioButton._shouldKeepFocus) { // eslint-disable-line no-underscore-dangle
        dom.focus();
        radioButton._shouldKeepFocus = false; // eslint-disable-line no-underscore-dangle
    }
};

/**
 * Renders the input of the RadioButton.
 * @param {Function} el - A function for creating virtual elements.
 * @param {object} props - the RadioButton props
 * @param {object} ctx - the RadioButton context
 * @returns {VDom | null} The virtual dom for the inpu of the RadioButton or null.
 */
const renderRadioButton = (el, props, ctx) =>
    el(
        "div",
        { class: radioButtonInputWrapperClass },
        [
            el(
                "input",
                Object.assign(
                    {
                        type: "radio",
                        class: radioButtonInputClass,
                        disabled: props.isDisabled,
                        onchange: ctx._handleChange.bind(ctx), // eslint-disable-line no-underscore-dangle
                        checked: props.isSelected,
                        oncreate: config(ctx),
                        onupdate: config(ctx)
                    },
                    ariaAttributes(props)
                ),
                []
            )
        ]
    );

/**
 * The RadioButton class.
 * @class RadioButton
 */
class RadioButton extends UIComponent {
    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._shouldKeepFocus = false;
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            defaultClassNames: radioButtonDefaultClass,
            display: "",
            isDisabled: false,
            isInline: false,
            isSelected: false,
            label: "",
            name: "",
            content: null,
            selectionChangeEventName: RadioButtonEvents.SELECTION_CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => { replaceChild(this, "content", content); }
        };
    }

    /**
     * Handles the click event.
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleChange() {
        if (this.getProp("isDisabled")) {
            return;
        }

        this._shouldKeepFocus = true;

        const isSelected = !this.getProp("isSelected");
        this.setProp("isSelected", isSelected);

        this.emit(this.getProp("selectionChangeEventName"), this, isSelected);
        this.update();
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        return el(
            "div",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.classNames ]: (props.classNames !== ""),
                    [ radioButtonDisabledClass ]: props.isDisabled,
                    [ radioButtonInlineClass ]: props.isInline
                })
            },
            el(
                "label",
                { class: radioButtonContentWrapperClass },
                [
                    renderRadioButton(el, props, this),
                    renderContent(el, props, mappedChildren)
                ]
            )
        );
    }
}

RadioButton.EVENTS = RadioButtonEvents;

export default RadioButton;
