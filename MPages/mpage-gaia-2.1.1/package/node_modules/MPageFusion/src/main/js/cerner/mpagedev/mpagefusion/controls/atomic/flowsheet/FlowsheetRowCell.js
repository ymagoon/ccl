/**
 * @fileoverview TableRowCell class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import { isSelectedClassName } from "../../../helpers/const/classNames";
import { eventNames } from "./helpers";
import { collapseDocumentSelection } from "../../../helpers/dom/dom";

const CLASSES = {
    hover: "hoverable",
    headerDivider: "mpageui-Flowsheet-header-divider"
};

const { rowCellClickEventName } = eventNames;

/**
 * Renders display text if it exists -- otherwise renders a null indicator
 * @param {String} display - the display
 * @returns {String} display string
 */
const checkIfNull = (display) => display === null ? "--" : display;

/**
 * Renders the row header cell
 * @param {UIComponent} control - the FlowsheetRowCell instance
 * @param {Object} props - props
 * @returns {VDom} header cell
 */
const renderHeaderCell = (control, props) => props.content.length > 0
    ? control.renderChildren() : props.display || "\u00a0";

/**
 * Renders the cell content
 * @param {UIComponent} control - the FlowsheetRowCell instance
 * @param {Object} props - props
 * @returns {VDom} cell content
 */
const renderCell = (control, props) => props.content.length > 0
    ? control.renderChildren() : checkIfNull(props.display);

/**
 * Constructor for TableRowCell
 * @extends UIComponent
 */
export default class FlowsheetRowCell extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            display: "",
            defaultClassNames: "mpageui-Flowsheet-row-cell",
            classNames: "",
            isHeaderCell: false,
            isHeaderRowHeaderCell: false,
            columnDisplay: "",
            content: [],
            selectable: false,
            multiSelect: false,
            isSelected: false,
            clickEventName: rowCellClickEventName,
            key: this.getId(),
            index: "0-0"
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return this.getProp("content");
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => {
                this.replaceAllChildren(content);
            }
        };
    }

    /**
     * On click handler for the row cell
     * @param {Event} event - Click event object
     * @returns {undefined}
     * @private
     */
    _onClick(event) {
        if (event.shiftKey) {
            collapseDocumentSelection();
        }

        this.setProp("isSelected", !this.getProp("isSelected"));
        this.emit(
            this.getProp("clickEventName"),
            this,
            this.getProp("isSelected"),
            {
                ctrlKey: this.getProp("multiSelect") && event.ctrlKey,
                shiftKey: this.getProp("multiSelect") && event.shiftKey
            }
        );
        this.update();
    }

    /**
     * @inheritdoc
     */
    view(el, props) {
        return props.isHeaderRowHeaderCell
            ? el("div", { class: CLASSES.headerDivider }, "\u00a0")
            : el("div",
                Object.assign(
                    {
                        class: classNames({
                            [ props.defaultClassNames ]: true,
                            [ props.classNames ]: props.classNames.length > 0,
                            [ CLASSES.hover ]: props.selectable === true && !props.isSelected,
                            [ isSelectedClassName ]: props.isSelected
                        })
                    },
                    props.selectable
                        ? {
                            onclick: this._onClick.bind(this)
                        }
                        : null,
                    props.isHeaderCell && props.selectable
                        ? {
                            /*
                             * Special case where we have to highlight the whole row when you hover over the header cell.
                             * since there is no way to target parent element from a child inside css, we have to use JS.
                             */
                            onmouseover: ({ currentTarget }) => currentTarget.parentNode.classList.add(CLASSES.hover),
                            onmouseout: ({ currentTarget }) => currentTarget.parentNode.classList.remove(CLASSES.hover)
                        }
                        : null
                ),
                props.isHeaderCell
                    ? renderHeaderCell(this, props)
                    : renderCell(this, props)
            );
    }
}
