"use strict";

import { right, width } from "../../../../helpers/dom/positioning";
import { last } from "../../../../helpers/core/array";

/**
 * Sort child elements of CollapseGroup into items and the "more" dropdown.
 * @param {HTMLElement[]} children - The child HTMLElements of the CollapseGroup.
 * @returns {{ all: HTMLElement[], items: Array<HTMLElement>, more: HTMLElement }} The children of the CollapseGroup sorted.
 */
export const sortElements = (children) => ({
    all: children,
    items: children.slice(0, children.length - 1),
    more: last(children)
});

/**
 * Resets the children of the CollapseGroup control by resetting their display style.
 * @param {Array<HTMLElement>} children - The child HTMLElements of the CollapseGroup.
 * @returns {Array<HTMLElement>} The array of children after the display style is reset.
 */
const resetElementDisplays = (children) => children.forEach((c) => {
    c.style.display = "";
});

/**
 * Handles hiding items. If any items are hidden, the dropdown will be shown, so we must adjust which items
 * are shown due to the dropdown now taking up space.
 * @param {HTMLElement} ele - The root element of the CollapseGroup control.
 * @param {Array<HTMLElement>} items - The individual item elements of the CollapseGroup control.
 * @param {HTMLElement} more - The HTMLElement of the dropdown button.
 * @returns {number} Returns the number of items that are not hidden.
 */
const handleHiddenElements = (ele, items, more) => {
    const hide = items.filter((p) => (right(p) > (right(ele) - width(more))));
    hide.forEach((p) => {
        p.style.display = "none";
    });
    return (items.length - hide.length);
};

/**
 * Handles when all items are to be shown face up. At that point, the dropdown is hidden.
 * @param {HTMLElement} more - The dropdown button.
 * @returns {HTMLElement} The more dropdown button.
 */
const handleAllElementsVisible = (more) => {
    more.style.display = "none";
    return more;
};

/**
 * Handles the display properties of the CollapseGroup elements.
 * @param {HTMLElement} ele - The root element of the CollapseGroup control.
 * @param {Array<HTMLElement>} items - The individual item elements of the CollapseGroup control.
 * @param {Array<HTMLElement>} unfit - The items which are out of bounds of the CollapseGroup.
 * @param {HTMLElement} more - The HTMLElement of the dropdown button.
 * @returns {number} Returns nothing.
 */
const handleItems = (ele, items, unfit, more) =>
    (unfit && unfit.length) ?
        handleHiddenElements(ele, items, more) :
        (handleAllElementsVisible(more) && items.length);

/**
 * Handles the visibility of the individual face-up items.
 * @param {HTMLElement} ele - The root element of the CollapseGroup control.
 * @param {Array<HTMLElement>} all - All child HTMLElements of the CollapseGroup control.
 * @param {Array<HTMLElement>} items - The individual item elements of the CollapseGroup control.
 * @param {HTMLElement} more - The HTMLElement of the dropdown button.
 * @returns {number} The number of items that fit face up.
 */
export const updateFaceUpItemVisibility = (ele, { all, items, more }) => {
    resetElementDisplays(all);
    return handleItems(
        ele,
        items,
        items.filter((p) => right(p) > right(ele)), // Those items that do not fit!
        more
    );
};
