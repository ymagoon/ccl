"use strict";

import UIComponent from "../../../base";
import classNames from "classnames";
import { unique } from "../../../helpers/core/generators";

/**
 * Enum for events emitted by the Anchor class.
 * @type {{CLICK: string}}
 */
const EVENTS = {
    /**
     * @event Anchor#CLICK
     * @param {Anchor} anchor - The source of the click event (the Anchor instance itself).
     * @param {String} key - The unique identifier of the Anchor instance
     */
    CLICK: "Anchor::click"
};

const NAMESPACE = "mpageui-Anchor";

/**
 * The Anchor class.
 * @class Anchor
 */
class Anchor extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            clickEventName: EVENTS.CLICK,
            content: [],
            display: "",
            title: "",
            isDisabled: false,
            key: unique(NAMESPACE)
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            content: (content) => this.replaceAllChildren(content)
        };
    }

    /**
     * Handles the click event on the Anchor. If the Anchor is disabled, it will not emit the click event.
     * @emits Anchor#CLICK
     * @returns {undefined} Returns nothing.
     * @private
     */
    _handleClick() {
        if (this.getProp("isDisabled")) {
            return;
        }
        this.emit(this.getProp("clickEventName"), this, this.getProp("key") || undefined);
    }

    /**
     * @inheritDoc
     */
    view(el, props, children) {
        return el(
            "a",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: (props.classNames.length > 0),
                    [ `${NAMESPACE}--disabled` ]: props.isDisabled
                }),
                disabled: props.isDisabled,
                title: props.title,
                key: this.getProp("key") || undefined,
                onclick: this._handleClick.bind(this),
                role: "button"
            },
            props.content && props.content.length ? (this.renderChildren()) : props.display
        );
    }
}

Anchor.EVENTS = EVENTS;

export default Anchor;
