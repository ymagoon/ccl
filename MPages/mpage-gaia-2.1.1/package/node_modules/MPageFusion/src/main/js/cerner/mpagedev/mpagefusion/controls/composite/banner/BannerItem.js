/**
 * @fileoverview
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import { svg } from "../../atomic/icon";
import Button from "../../atomic/button";
import { makeOrGetKey } from "../../../helpers/props/props";
import i18n from "i18n";
import classNames from "classnames";

const NAMESPACE = "mpageui-BannerItem";
const chevronIcon = new svg.navigation.Chevron({
    classNames: `${NAMESPACE}-chevron-svg`
});

// events
const bannerDismissClickEventName = "BannerItem:dismiss";
const bannerClickEventName = "BannerItem:click";

// i18n stuff
const {
    dismiss: dismissI18n,
    moreDetail: moreDetailI18n,
    lessDetail: lessDetailI18n,
    info: infoI18n,
    error: errorI18n,
    warning: warningI18n,
    alert: alertI18n,
    gapChecking: gapCheckingI18n,
    outsideRecords: outsideRecordI18n,
    success: successI18n
} = i18n();

const TOGGLE_EVENT = "__BannerItem::toggle__";

/* eslint-disable no-use-before-define */

/**
 * Create the object of the appropriate icon class based on the provided severity
 * @param {string.<BannerItem.TYPE>} severity - A function that returns a single virtual dom element.
 * @returns {Object} Object of the icon class
 * @private
 */
const getIconBySeverity = (severity) => {
    const opts = {
        classNames: `${NAMESPACE}-icon`
    };

    switch (severity) {
        case BannerItem.TYPE.ALERT:
            return new svg.alert.Alert(opts);

        case BannerItem.TYPE.ERROR:
            return new svg.alert.Error(opts);

        case BannerItem.TYPE.WARNING:
            return new svg.alert.Warning(opts);

        case BannerItem.TYPE.GAP_CHECKING:
            return new svg.alert.GapChecking(opts);

        case BannerItem.TYPE.OUTSIDE_RECORDS:
            return new svg.clinical.Unverified(opts);

        case BannerItem.TYPE.INFO:
            return new svg.alert.Info(opts);

        case BannerItem.TYPE.SUCCESS:
            return new svg.alert.Success(opts);
    }

    throw new Error("BannerItem: Incorrect banner type specified");
};

/**
 * Creates vdom severity icon to be displayed inside the content area
 * @param {string.<BannerItem.TYPE>} severity - A function that returns a single virtual dom element.
 * @returns {VDom} Virtual dom element
 * @private
 */
const renderSeverityIcon = (severity) => getIconBySeverity(severity).render();

/**
 * Returns the default title by severity
 * @param {BannerItem.TYPE} severity - A function that returns a single virtual dom element.
 * @returns {string} Default title based on the severity
 * @private
 */
const getDefaultTitleBySeverity = (severity) => ({
    [ BannerItem.TYPE.ALERT ]: alertI18n,
    [ BannerItem.TYPE.GAP_CHECKING ]: gapCheckingI18n,
    [ BannerItem.TYPE.ERROR ]: errorI18n,
    [ BannerItem.TYPE.INFO ]: infoI18n,
    [ BannerItem.TYPE.OUTSIDE_RECORDS ]: outsideRecordI18n,
    [ BannerItem.TYPE.WARNING ]: warningI18n,
    [ BannerItem.TYPE.SUCCESS ]: successI18n
}[ severity ]);

/**
 * Render the more details.
 * @param {Object} opts - Rendering options.
 * @returns {VDom} Rendered contents.
 * @private
 */
const renderMoreDetails = ({ el, props }) =>
    (props.moreDetailText || props.moreDetailsContent) ?
        [ el(
            "div",
            {
                class: `${NAMESPACE}-moreDetailsText`
            },
            props.moreDetailsContent ? props.moreDetailsContent.render() : props.moreDetailText
        ) ] : [];

/**
 * Check to see if the dismiss button should be rendered or not.
 * It should only render if dismiss click is true and the banner is not of alert or outside records type
 * @param {object} props - BannerItem props
 * @returns {boolean} True if more details should be rendered
 * @private
 */
const shouldDismissButtonRender = (props) => props.enableDismissClick
    && props.type !== BannerItem.TYPE.ERROR
    && props.type !== BannerItem.TYPE.OUTSIDE_RECORDS;

/**
 * Creates vdom for the actions portion of the banner. They are 2 buttons.
 * @param {Function} el - A function that returns a single virtual dom element.
 * @param {Object} props - BannerItem props
 * @param {Object} mChildren - mapped children for BannerItem object
 * @returns {VDom} Virtual dom element
 * @private
 */
const renderActions = (el, props, mChildren) => props.actionContent || shouldDismissButtonRender(props) ?
    ([
        el(
            "div",
            {
                class: `${NAMESPACE}-actions`
            },
            [
                ...(props.actionContent ? [ props.actionContent.render() ] : []),
                ...(shouldDismissButtonRender(props) ? [ mChildren.dismissButton.render() ] : [])
            ]
        )
    ]) : [];

/**
 * Render the toggler item for expanding / collapsing the banner in DEFAULT mode on smaller devices.
 * @param {Object} opts - Rendering options.
 * @returns {VDom} Rendered contents.
 * @private
 */
const renderToggler = ({ el, mapped, props, state }) =>
    (props.displayMode === BannerItem.DISPLAYMODE.DEFAULT && hasDisclosureContent({ props })) ?
        [ el(
            "div",
            {
                class: classNames({
                    [ `${NAMESPACE}-toggle` ]: true,
                    "is-expanded": state.isExpanded
                })
            },
            mapped.toggleButton.render()
        ) ] : [];

/**
 * Render the more details toggle, if applicable.
 * @param {Object} opts - Rendering options.
 * @returns {VDom} Rendered more details toggle.
 * @private
 */
const renderMoreDetailsToggle = ({ el, state, props, handleDetail }) =>
    ((props.displayMode === BannerItem.DISPLAYMODE.DEFAULT || props.displayMode === BannerItem.DISPLAYMODE.COMPACT) &&
        (props.moreDetailsContent || props.moreDetailText)
    ) ? ([
            el("span", {
                onclick: handleDetail,
                class: `${NAMESPACE}-toggleDetails`
            }, state.isShowingMore ? lessDetailI18n : moreDetailI18n)
        ]) : [];

/**
 * Used to determine if the banner has content that can be disclosed.
 * @param {Object} rendering options.
 * @returns {boolean} True if disclosure content is present.
 */
const hasDisclosureContent = ({ props }) =>
    (props.moreDetailText || props.moreDetailsContent || props.actionContent || shouldDismissButtonRender(props));

/**
 * Render the main headline of the banner.
 * @param {Object} opts - Rendering options.
 * @returns {VDom} Rendered contents.
 * @private
 */
const renderMain = ({ el, props, state, mapped, handleDetail }) =>
    el(
        "div",
        {
            class: `${NAMESPACE}-main`
        },
        [
            el(
                "span",
                {
                    class: classNames(`${NAMESPACE}-text`, {
                        "no-truncation": !hasDisclosureContent({ props })
                    })
                },
                [
                    el("strong", {}, props.title.length > 0 ? props.title : getDefaultTitleBySeverity(props.type)),
                    el("span", {}, props.description),
                    ...renderMoreDetailsToggle({ el, props, state, handleDetail })
                ]
            ),
            ...renderActions(el, props, mapped),
            ...renderToggler({ el, mapped, props, state })
        ]
    );

/**
 * Render the disclosure area of the banner.
 * @param {Object} opts - Rendering options.
 * @returns {VDom} Rendered contents.
 * @private
 */
const renderDisclosure = ({ el, props, state, mapped }) =>
    el(
        "div",
        { class: `${NAMESPACE}-disclose` },
        el(
            "div",
            {
                class: `${NAMESPACE}-discloseContent`
            },
            [
                ...renderMoreDetails({ el, props, state }),
                ...renderActions(el, props, mapped)
            ]
        )
    );

/**
 * Render the full contents of the banner item.
 * @param {Object} opts - Rendering options.
 * @returns {VDom} Rendered contents.
 * @private
 */
const renderContents = ({ el, props, state, mapped, handleDetail }) =>
    ([
        renderSeverityIcon(props.type),
        el(
            "div",
            { class: `${NAMESPACE}-content` },
            [
                renderMain({ el, props, state, mapped, handleDetail }),
                renderDisclosure({ el, props, state, mapped })
            ]
        )
    ]);

export default class BannerItem extends UIComponent {
    constructor(props, children) {
        super(props, children);
        this._handlerMoreDetailClick = this._handlerMoreDetailClick.bind(this);
    }

    /**
     * @inheritdoc
     */
    initialState() {
        return {
            isExpanded: false,
            isShowingMore: false
        };
    }

    /**
     * Returns the type values in the priority order
     * @returns {string[]} Collection of type
     * @static
     */
    static getTypeByPriority() {
        return [
            BannerItem.TYPE.ALERT,
            BannerItem.TYPE.ERROR,
            BannerItem.TYPE.WARNING,
            BannerItem.TYPE.GAP_CHECKING,
            BannerItem.TYPE.OUTSIDE_RECORDS,
            BannerItem.TYPE.INFO,
            BannerItem.TYPE.SUCCESS
        ];
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            defaultClassNames: NAMESPACE,
            classNames: "",
            title: "",
            description: "",
            moreDetailText: "",
            moreDetailsContent: null,
            key: "",
            type: BannerItem.TYPE.INFO,
            isDetailVisible: false,
            actionContent: null,
            enableDismissClick: true,
            displayMode: BannerItem.DISPLAYMODE.DEFAULT,
            bannerDismissClickEventName,
            bannerClickEventName
        };
    }

    /**
     * @inheritdoc
     */
    propChangeHandlers() {
        return {
            actionContent: (actionContent) =>
                actionContent ? this.replaceMappedChild("actionContent", actionContent) : this.removeChild("actionContent"),
            moreDetailsContent: (moreDetailsContent) =>
                moreDetailsContent ? this.replaceMappedChild("moreDetailsContent", moreDetailsContent) : this.removeChild("moreDetailsContent"),
            isDetailVisible: (isVisible) => {
                this.setState({ isShowingMore: isVisible });
            }
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return [
            {
                dismissButton: new Button({
                    display: dismissI18n,
                    type: "secondary",
                    classNames: `${NAMESPACE}-dismiss`,
                    clickEventName: `_${bannerDismissClickEventName}`
                })
            },
            {
                toggleButton: new Button({
                    clickEventName: TOGGLE_EVENT,
                    type: Button.TYPE.LINK,
                    icon: chevronIcon
                })
            }
        ];
    }

    /**
     * Click handler to show/hide more details
     * @returns {undefined}
     * @private
     */
    _handlerMoreDetailClick() {
        this.setState((s) => ({
            isShowingMore: !s.isShowingMore
        }));

        this.update();
    }

    /**
     * @inheritdoc
     */
    afterCreate() {
        this.redirectEvent( // Dismiss event
            `_${bannerDismissClickEventName}`,
            this.getProp("bannerDismissClickEventName"),
            this,
            makeOrGetKey(this)
        );

        this.on(TOGGLE_EVENT, () => {
            this.stopPropagation(TOGGLE_EVENT);

            this.setState((s) => ({
                isExpanded: !s.isExpanded
            }));

            this.update();
        });
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mapped, { state }) {
        return el(
            "div",
            {
                class: classNames({
                    [ props.defaultClassNames ]: true,
                    [ props.displayMode ]: true,
                    [ props.classNames ]: props.classNames.length > 0,
                    [ props.type ]: true,
                    "is-expanded": state.isExpanded,
                    "is-showing-more": state.isShowingMore
                })
            },
            renderContents({
                el,
                props,
                mapped,
                state,
                handleDetail: this._handlerMoreDetailClick
            })
        );
    }
}

/**
 * Banner types
 * @type {{ALERT: string, ERROR: string, WARNING: string, GAP_CHECKING: string, INFO: string}}
 */
BannerItem.TYPE = {
    ALERT: "mpageui-BannerItem--alert",
    ERROR: "mpageui-BannerItem--error",
    WARNING: "mpageui-BannerItem--warning",
    GAP_CHECKING: "mpageui-BannerItem--gapChecking",
    OUTSIDE_RECORDS: "mpageui-BannerItem--outsideRecords",
    INFO: "mpageui-BannerItem--info",
    SUCCESS: "mpageui-BannerItem--success"
};

/**
 * BannerItem Event names
 * @type {{DISMISS: string, CLICK: string}}
 */
BannerItem.EVENTNAMES = {
    DISMISS: bannerDismissClickEventName,
    CLICK: bannerClickEventName
};

/**
 * BannerItem Display modes
 * @type {{DEFAULT: string, COMPACT: string, DETAIL: string}}
 */
BannerItem.DISPLAYMODE = {
    DEFAULT: "mpageui-BannerItem--default",
    COMPACT: "mpageui-BannerItem--compact",
    DETAIL: "mpageui-BannerItem--detail"
};
