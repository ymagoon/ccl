"use strict";

import UIComponent from "../../../../base/UIComponent";
import classNames from "classnames";

const NAMESPACE = "mpageui-DetailPanelTitle";

/**
 * Column enumeration.
 * @type {{LEFT: number, RIGHT: number}}
 */
const COLUMN = {
    LEFT: 0,
    RIGHT: 1
};
const COLUMN_COUNT = 2;

/**
 * Curried function that takes a column count and produces a function that
 * determines if a column at the specified index should be padded due to
 * the existence of an icon.
 * @param {number} colCount - The number of columns.
 * @returns {Function} Function to check if a column should be padded.
 */
const shouldPad = (colCount) =>
    (index, colIndex, col) =>
        !!(((index % colCount) === colIndex) && col.icon);

/**
 * Determines if a column should be padded. See shouldPad for params.
 * @type {Function} Determines if a column should be padded.
 */
const shouldPadCol = shouldPad(COLUMN_COUNT);


/**
 * A string, or an object containing the display and an icon.
 * @typedef {{ display: string, [icon]: SvgIcon, classNames: string } | string} DetailPanelSubTitle
 */

/**
 * A mapping of even (0) and odd (1) - indicating if even / odd sub-titles
 * should be adjusted to account for icon space.
 * @typedef {{ 0: boolean, 1: boolean }} DetailPanelTitlePadMap
 */

/**
 * Generates padding rules for subtitles. 0 = even. 1 = odd. Numbers have
 * been used for simplicity when using modulus. It reduces all subtitles
 * into an object that indicates if even or odd subtitles should be padded.
 * Evens should be padded if any even subtitle has an icon. Same is true for
 * odds.
 * @param {Array<DetailPanelSubTitle>} subTitles - Array of subtitles.
 * @returns {DetailPanelTitlePadMap} Information indicating if evens / odds
 * should be padded.
 */
const padRuleMapping = (subTitles) =>
    (
        subTitles.reduce(
            (prev, next, i) => ({
                [ COLUMN.LEFT ]: (prev[ COLUMN.LEFT ] || shouldPadCol(i, COLUMN.LEFT, next)),
                [ COLUMN.RIGHT ]: (prev[ COLUMN.RIGHT ] || shouldPadCol(i, COLUMN.RIGHT, next))
            }),
            {
                [ COLUMN.LEFT ]: false,
                [ COLUMN.RIGHT ]: false
            }
        )
    );

/**
 * Wraps an icon in a standard element for the DetailPanel title.
 * @param {Function} el - A function for creating virtual elements.
 * @param {SvgIcon} icon - An SvgIcon instance.
 * @returns {VDom} The icon wrapped in a virtual element.
 */
const wrapIcon = (el, icon) =>
    el(
        "span",
        {
            class: `${NAMESPACE}-icon`
        },
        icon.render()
    );

/**
 * Renders the contents of a subtitle. In order for a sub-title's text to
 * be adjusted, it must not have an icon and be in the same column (even / odd)
 * as a sub-title with an icon.
 * @param {Function} el - A function for creating virtual elements.
 * @param {DetailPanelSubTitle} subTitle - A single sub title.
 * @param {boolean} adjustForIcon - Indicates if this sub-title should adjust
 * itself based on existence of icons.
 * @returns {VDom} The virtual dom of the sub title contents.
 */
const renderSubTitleContents = (el, subTitle, adjustForIcon) =>
    [
        subTitle.icon ? wrapIcon(el, subTitle.icon) : null,
        el(
            "span",
            {
                class: classNames(
                    "mpageui-u-text-align-text",
                    {
                        "mpageui-u-margin-left-relative-loose": (!subTitle.icon && adjustForIcon),
                        [ subTitle.classNames ]: !!subTitle.classNames
                    }
                )
            },
            subTitle.display
        )
    ];

/**
 * Renders the wrapper of a sub-title.
 * @param {Function} el - A function for creating virtual elements.
 * @param {DetailPanelTitlePadMap} padRules - Pad rule mapping.
 * @returns {Function} Renders a subtitle.
 */
const renderSubTitleWrapper = (el, padRules) => (subTitle, i) =>
    el(
        "h6",
        {
            class: `${NAMESPACE}-subTitle`
        },
        renderSubTitleContents(el, subTitle, padRules[ (i % 2) ])
    );

/**
 * Small helper to render an array of sub-titles.
 * @param {Function} el - A function for creating virtual elements.
 * @param {Array<DetailPanelSubTitle>} subTitles - Array of detail panel
 * sub-titles.
 * @param {DetailPanelTitlePadMap} padRules - Pad rule mapping.
 * @returns {Array<VDom>} Array of sub-title vdom.
 */
const renderSubTitles = (el, subTitles, padRules) =>
    subTitles.map(renderSubTitleWrapper(el, padRules));

/**
 * Generates vdom for the title area
 * @param {DetailPanelTitle} ctx - control object
 * @param {Function} el - VDom generator
 * @param {object} props - controls props
 * @returns {VDom} vdom for the title
 * @private
 */
const generateTitleContent = (ctx, el, props) =>
    props.titleContent.length > 0 ?
        ctx.renderChildren() :
        ([
            props.icon ? wrapIcon(el, props.icon) : null,
            el(
                "span",
                {
                    class: "mpageui-u-text-align-text"
                },
                props.title
            )
        ]);

/**
 * The DetailPanelTitle class.
 * @class DetailPanelTitle
 */
export default class DetailPanelTitle extends UIComponent {
    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            classNames: "",
            icon: null,
            subTitles: [],
            title: "",
            titleContent: []
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            titleContent: (content) => content.length > 0 ? this.replaceAllChildren(content) : this.removeAllChildren()
        };
    }

    /**
     * @inheritDoc
     */
    view(el, props) {
        return el(
            "div",
            {
                class: classNames({
                    [ NAMESPACE ]: true,
                    [ props.classNames ]: (props.classNames !== "")
                })
            },
            [
                // Main title
                el(
                    "h3",
                    {
                        class: classNames(`${NAMESPACE}-title`, "mpageui-u-text-align mpageui-u-text-align--start")
                    },
                    generateTitleContent(this, el, props)
                ),
                // Subtitles
                el(
                    "div",
                    {
                        class: classNames(`${NAMESPACE}-subTitles`)
                    },
                    renderSubTitles(el, props.subTitles, padRuleMapping(props.subTitles))
                )
            ]
        );
    }
}
