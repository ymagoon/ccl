import UIComponent from "../../../base";
import classNames from "classnames";
import { childHeight } from "../../../helpers/dom/positioning";
import { last } from "../../../helpers/core/array";
const EVENTS = {
    RESIZE: "NestablePaneRoot::resize"
};
/**
 * Returns the pane that is currently visible, starting from the
 * provided root element.
 *
 * @param {String} visiblePaneClass - the CSS class that identifies a pane
 * @param {HTMLElement} root - the element to start the search
 * @returns {HTMLElement} the currently visible pane
 */
const findVisiblePane = (visiblePaneClass, root) =>
    last(root.querySelectorAll(`.${visiblePaneClass}`));

/**
 * Sets the height of the root element to the same height of the
 * currently visible child pane. Function is curried for easy partial application.
 * Also emits the resize event when the pane is updated.
 *
 * @param {String} visiblePaneClass - the CSS class that identifies a pane
 * @param {object} control - the NestablePaneRoot Control
 * @returns {undefined}
 */
const adjustHeight = (visiblePaneClass, control) => ({ dom }) => {
    const visiblePane = findVisiblePane(visiblePaneClass, dom);
    const newHeight = visiblePane ? `${childHeight(visiblePane)}px` : null;
    let triggerResize = false;
    dom.style.height = newHeight;

    /*
     * Determine if the height of the nestable pane has changed since the last time
     * a render cycle occurred.
     */
    if(control && control._state.lastHeight !== newHeight) { // eslint-disable-line no-underscore-dangle
        triggerResize = true;
    }
    /*
     * Keep track of the new height that was just calculated. This will be used
     * in case of another render cycle to see if the height has changed.
     */
    control.setState({ lastHeight: newHeight });

    if (visiblePane && control && triggerResize) {
        control.emit(control.getProp("resizeEventName"));
    }
};

/**
 * The root for nestable panes. This provides the basic container in which
 * multiple nestable panes can be inserted. Will automatically adjust its
 * height based on the currently visible pane.
 */
export default class NestablePaneRoot extends UIComponent {
    /**
     * @inheritDoc
     */
    initialState() {
        return {
            lastHeight: ""
        };
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            classNames: "",
            defaultClassNames: "mpageui-NestablePaneRoot",
            resizeEventName: EVENTS.RESIZE
        };
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return el("div",
            {
                class: classNames({
                    [props.classNames]: props.classNames.length > 0,
                    [props.defaultClassNames]: true
                }),
                oncreate: adjustHeight("mpageui-NestablePane-visible", this),
                onupdate: adjustHeight("mpageui-NestablePane-visible", this)
            },
            this.renderChildren()
        );
    }
}
