/**
 * @fileoverview TableRowContainer class
 * @author Gyandeep Singh
 */

"use strict";

import UIComponent from "../../../base";
import TableRow from "./TableRow";
import classNames from "classnames";
import { eventNames } from "./helpers";

const hideClass = "mpageui-Table-rowContainer--hidden";

/**
 * Creates row objects by using TableRow class
 * @param {Object} rows - row object
 * @param {Object} rowProps - rowprops object
 * @param {string} clickEventName - Click event name
 * @param {Array<Object>} columns - Collection of columns
 * @param {int} index - index start for row collection
 * @param {Boolean} cardView - Render row as cards
 * @returns {Array} collection of row objects
 * @private
 */
const getRowObject = ({ rows, rowProps, clickEventName, columns, index, cardView }) => rows.map((row) => new TableRow({
    index: index++,
    cardView,
    columns,
    cells: row.data,
    selectable: rowProps.selectable,
    multiSelect: rowProps.multiSelect,
    hoverable: rowProps.hoverable,
    dualColumn: rowProps.dualColumn,
    clickEventName,
    key: row.key,
    isSelected: row.isSelected === true,
    meta: row.meta,
    indicator: row.indicator || ""
}, []));

/**
 * Constructor for TableRow
 * @extends UIComponent
 */
export default class TableRowContainer extends UIComponent {
    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            defaultClassNames: "mpageui-Table-rowContainer",
            classNames: "",
            rows: [],
            rowProps: {},
            isVisible: true,
            columns: [],
            index: 0,
            cardView: false
        };
    }

    /**
     * @inheritdoc
     */
    createChildren() {
        return this.getProp("isVisible") ?
            getRowObject({
                columns: this.getProp("columns"),
                rows: this.getProp("rows"),
                rowProps: this.getProp("rowProps"),
                clickEventName: eventNames.PRIVATE.ROW_SELECTION_CHANGE,
                index: this.getProp("index"),
                cardView: this.getProp("cardView")
            }) : [];
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mappedChildren) {
        return el("div", {
            class: classNames({
                [ props.defaultClassNames ]: true,
                [ props.classNames ]: props.classNames.length > 0,
                [ hideClass ]: !props.isVisible
            })
        }, this.renderChildren());
    }
}
