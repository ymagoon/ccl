"use strict";

import UIComponent from "../../../../base";
import TextArea from "../../../atomic/textArea";
import { unique } from "../../../../helpers/core/generators";
import { forwardProp } from "../../../../helpers/props/props";
import {
    renderDualColumnView,
    renderErrorText,
    renderHelperText,
    renderTitle
} from "../helpers/view";
import {
    generateValueChangePayload
} from "../helpers/props";
import {
    characterCountHandler,
    maxLengthHandler
} from "../helpers/handlers/text";

const FormTextAreaEvents = {
    BLUR: "FormTextArea::blur",
    CHANGE: "FormTextArea::valueChange",
    FOCUS: "FormTextArea::focus"
};

const namespace = "mpageui-FormTextArea";

/**
 * The FormTextArea class.
 * @class FormTextArea
 */
class FormTextArea extends UIComponent {

    /**
     * @inheritDoc
     */
    constructor(props, children) {
        super(props, children);
        this._state = {
            showErrorText: false,
            showHelperText: false,
            value: ""
        };
    }

    /**
     * @inheritDoc
     */
    initialProps() {
        return {
            blurEventName: FormTextAreaEvents.BLUR,
            completionHandler: (value) => value !== null && value !== "",
            display: "",
            errorHandler: maxLengthHandler,
            focusEventName: FormTextAreaEvents.FOCUS,
            formName: unique(namespace),
            hasInlineLabel: false,
            helperHandler: characterCountHandler,
            isDisabled: false,
            isReadOnly: false,
            isRequired: false,
            maxLength: null,
            options: {},
            showErrorText: false,
            showHelperText: false,
            showRequiredIndicator: true,
            value: "",
            valueChangeEventName: FormTextAreaEvents.CHANGE
        };
    }

    /**
     * @inheritDoc
     */
    propChangeHandlers() {
        return {
            isDisabled: forwardProp(this, "isDisabled", "textArea"),
            isReadOnly: forwardProp(this, "isReadOnly", "textArea"),
            formName: forwardProp(this, "name", "textArea"),
            showErrorText: (showErrorText) => {
                this._state.showErrorText = showErrorText;
            },
            showHelperText: (showHelperText) => {
                this._state.showHelperText = showHelperText;
            },
            options: (options) => {
                this.getChild("textArea").setProps(options);
            },
            value: (value = "") => {
                this._state.value = value;
                this.getChild("textArea").setProp("value", this._state.value);
            }
        };
    }

    /**
     * @inheritDoc
     */
    createChildren() {
        return [
            {
                textArea: new TextArea(this.getProp("options"))
            }
        ];
    }

    /**
     * @inheritDoc
     */
    afterCreate() {
        this.on(TextArea.EVENTS.INPUT, (ctx, value) => {
            this.stopPropagation(TextArea.EVENTS.INPUT);

            this._state.showHelperText = true;
            this._state.value = value;

            this.emit(this.getProp("valueChangeEventName"), this,
                generateValueChangePayload(this.getProps(), value)
            );

            this.update();
        });

        this.on(TextArea.EVENTS.BLUR, () => {
            this.stopPropagation(TextArea.EVENTS.BLUR);

            if(this._state.value !== "") {
                this._state.showHelperText = true;
                this._state.showErrorText = true;
            }

            this.emit(this.getProp("blurEventName"), this);
            this.update();
        });

        this.on(TextArea.EVENTS.FOCUS, () => {
            this.stopPropagation(TextArea.EVENTS.FOCUS);

            this._state.showHelperText = true;

            this.emit(this.getProp("focusEventName"), this);
            this.update();
        });
    }

    /**
     * @inheritDoc
     */
    view(el, props, children, mappedChildren) {
        const state = this._state;
        return el(
            "div",
            {
                class: namespace
            },
            [
                renderDualColumnView(el, props.hasInlineLabel,
                    [
                        renderTitle(el, props)
                    ],
                    [
                        mappedChildren.textArea.render(),
                        renderErrorText(el, props, state),
                        renderHelperText(el, props, state)
                    ]
                )
            ]
        );
    }
}

FormTextArea.EVENTS = FormTextAreaEvents;
FormTextArea.HELPER_HANDLERS = {
    CHAR_COUNT: characterCountHandler
};
FormTextArea.ERROR_HANDLERS = {
    MAX_LEN: maxLengthHandler
};

export default FormTextArea;
