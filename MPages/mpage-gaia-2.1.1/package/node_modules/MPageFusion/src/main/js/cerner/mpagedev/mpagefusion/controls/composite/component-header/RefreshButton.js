import UIComponent from "../../../base/UIComponent";
import Button from "../../atomic/button";
import Refresh from "../../atomic/icon/svg/category/content/Refresh";

const handleClick = (control) => {
    if (!control.getProp("isEnabled")) {
        return;
    }
    control.setProp("isEnabled", false);
    setTimeout(() => {
        control.setProp("isEnabled", true);
        control.update();
    }, control.getProp("inactiveTimeAfterClick"));
    control.update();
    control.emit(control.getProp("refreshEventName"));
};

const REFRESH_EVENT = "RefreshButton::RefreshClick";

/**
 * A button that triggers an event (default "refresh") and
 * inactivates itself for one second before being able to click
 * again.
 */
export default class RefreshButton extends UIComponent {
    constructor(props, children) {
        super(props, children);
    }

    /**
     * @inheritdoc
     */
    initialProps() {
        return {
            isEnabled: true,
            inactiveTimeAfterClick: 1000,
            refreshEventName: "refresh",
            classNames: "",
            title: ""
        };
    }

    /**
     * @inheritdoc
     */
    dependentPropChangeHandlers() {
        return [
            [ "isEnabled", "title", (isEnabled, title) =>
                this.replaceMappedChild("button", new Button({
                    disabled: !isEnabled,
                    icon: new Refresh(),
                    type: "secondary",
                    clickEventName: REFRESH_EVENT,
                    classNames: this.getProp("classNames"),
                    title
                }))
            ]
        ];
    }

    afterCreate() {
        this.on(REFRESH_EVENT, () => {
            this.stopPropagation(REFRESH_EVENT);
            handleClick(this);
        });
    }

    /**
     * @inheritdoc
     */
    view(el, props, children, mChildren) {
        return this.getChild("button").render();
    }
}
