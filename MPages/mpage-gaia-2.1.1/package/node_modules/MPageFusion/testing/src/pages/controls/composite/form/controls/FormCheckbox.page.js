"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormControl = require("../FormControl.page");

var _FormControl2 = _interopRequireDefault(_FormControl);

var _Checkbox = require("../../../atomic/checkbox/Checkbox.page");

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _seleniumWebdriver = require("selenium-webdriver");

var _helpers = require("../helpers");

var _ClinicalBadge = require("../../../atomic/badge/ClinicalBadge.page");

var _ClinicalBadge2 = _interopRequireDefault(_ClinicalBadge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormCheckbox";
var LABEL = ".mpageui-FormCheckbox-label > p";

/**
 * The FormCheckboxPage class
 * @class module:MPageFusion/testing.composite.form.FormCheckboxPage
 *
 * @example
 * const formCheckbox = new FormCheckboxPage(driver);
 * formCheckbox.get("display")
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormCheckboxPage = function (_FormControlPage) {
    _inherits(FormCheckboxPage, _FormControlPage);

    function FormCheckboxPage(driver, options) {
        _classCallCheck(this, FormCheckboxPage);

        var _this = _possibleConstructorReturn(this, (FormCheckboxPage.__proto__ || Object.getPrototypeOf(FormCheckboxPage)).call(this, driver, options));

        _this._checkbox = new _Checkbox2.default(driver, {
            selectorList: _this.selectorList.concat(_helpers.CLASSES.RIGHT_COLUMN)
        });
        return _this;
    }

    _createClass(FormCheckboxPage, [{
        key: "toggle",


        /**
         * Toggles the checkbox
         * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxPage
         * @returns {Promise} resolves when the action completes
         */
        value: function toggle() {
            return this._checkbox.click();
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        // override default display method because FormCheckbox doesn't have a regular form display

    }, {
        key: "display",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(LABEL));
            }).then(function (element) {
                return element.getText();
            });
        }

        /**
         * Gets the current values in the checkbox group
         * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxPage
         * @returns {Promise<Array>} resolves with an array of objects { display, isSelected }
         */

    }, {
        key: "value",
        get: function get() {
            return this._checkbox.get("isSelected");
        }

        /**
         * returns the base Checkbox page
         * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxPage
         * @returns {CheckboxPage} checkboxPage
         */

    }, {
        key: "checkbox",
        get: function get() {
            return this._checkbox;
        }
    }]);

    return FormCheckboxPage;
}(_FormControl2.default);

exports.default = FormCheckboxPage;


FormCheckboxPage.CRITICALITY_TYPES = _ClinicalBadge2.default.TYPES;