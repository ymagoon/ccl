"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _seleniumWebdriver = require("selenium-webdriver");

var _ClinicalBadge = require("../../atomic/badge/ClinicalBadge.page");

var _ClinicalBadge2 = _interopRequireDefault(_ClinicalBadge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LABEL = ".mpageui-FormControl-title";
var REQUIRED_INDICATOR = ".mpageui-FormControl-required";
var HELPER_TEXT = ".mpageui-FormControl-text--helper";
var ERROR_TEXT = ".mpageui-FormControl-text--error";
var INLINE_LABEL = ".mpageui-FormControl--dual-column";
var CRITICALITY = ".mpageui-FormControl-text--criticality";

/**
 * The FormControlPage class
 * @class module:MPageFusion/testing.composite.form.FormControlPage
 * @abstract
 */

var FormControlPage = function (_UIComponentPage) {
    _inherits(FormControlPage, _UIComponentPage);

    function FormControlPage(driver, options) {
        _classCallCheck(this, FormControlPage);

        var _this = _possibleConstructorReturn(this, (FormControlPage.__proto__ || Object.getPrototypeOf(FormControlPage)).call(this, driver, options));

        _this._clinicalBadge = new _ClinicalBadge2.default(driver, {
            selectorList: _this.selectorList.concat(CRITICALITY),
            useExactSelector: true
        });
        return _this;
    }

    /**
     * gets the display
     * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
     * @returns {Promise<String>} display
     */


    _createClass(FormControlPage, [{
        key: "display",
        get: function get() {
            return this.getNestedElement(LABEL).then(function (label) {
                return label ? label.getText() : "";
            }).then(function (display) {
                return display || "";
            });
        }
    }, {
        key: "value",
        get: function get() {
            // eslint-disable-line class-methods-use-this
            throw new Error("All form control page objects must implement a value method");
        }

        /**
         * whether the label is displayed inline with the control
         * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
         * @returns {Promise<Boolean>} isInline
         */

    }, {
        key: "isInline",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(INLINE_LABEL)).then(function () {
                    return true;
                }).catch(function () {
                    return false;
                });
            });
        }

        /**
         * whether the required indicator is displayed
         * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
         * @returns {Promise<Boolean>} isRequired
         */

    }, {
        key: "isRequired",
        get: function get() {
            return this.getNestedElement(REQUIRED_INDICATOR).then(function (element) {
                return Boolean(element);
            });
        }

        /**
         * gets the helper text
         * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
         * @returns {Promise<String|null>} helperText
         */

    }, {
        key: "helperText",
        get: function get() {
            return this.getNestedElement(HELPER_TEXT).then(function (element) {
                return element ? element.getText() : "";
            }).then(function (display) {
                return display || "";
            });
        }

        /**
         * gets the error text
         * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
         * @returns {Promise<String>} errorText
         */

    }, {
        key: "errorText",
        get: function get() {
            return this.getNestedElement(ERROR_TEXT).then(function (element) {
                return element ? element.getText() : "";
            }).then(function (display) {
                return display || "";
            });
        }

        /**
         * gets the criticality type (e.g. high, low, abnormal, critical)
         * @memberOf module:MPageFusion/testing.composite.form.FormControlPage
         * @returns {Promise<String>} criticality
         */

    }, {
        key: "criticality",
        get: function get() {
            var _this2 = this;

            return this.getNestedElement(CRITICALITY).then(function (element) {
                return element ? _this2._clinicalBadge.get("type") : "";
            });
        }
    }]);

    return FormControlPage;
}(_UIComponent2.default);

exports.default = FormControlPage;


FormControlPage.CRICALITY_TYPES = _ClinicalBadge2.default.TYPES;