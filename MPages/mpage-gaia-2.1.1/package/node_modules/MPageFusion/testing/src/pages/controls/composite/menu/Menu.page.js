"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _Popup = require("../dialog/popup/Popup.page");

var _Popup2 = _interopRequireDefault(_Popup);

var _ContentHeader = require("../../atomic/header/content-header/ContentHeader.page");

var _ContentHeader2 = _interopRequireDefault(_ContentHeader);

var _InlineList = require("../list/InlineList.Page");

var _InlineList2 = _interopRequireDefault(_InlineList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-List";
var HEADER_INVISIBLE = ".mpageui-ListMenu-header--invisible";
var AUTO_DIVIDERS = "mpageui-List--autodividers";

/**
 * returns the flattened array
 * @returns {Array} flattenArray
 * @param {Array} arr array to be flattened
 * @param {Number} depth depth to which the array needs to be flattened
 */
var flattenArray = function flattenArray(arr) {
    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    return arr.reduce(function (flat, toFlatten) {
        return flat.concat(Array.isArray(toFlatten) && depth - 1 ? toFlatten.flat(depth - 1) : toFlatten);
    }, []);
};

/**
 * returns the array displaying the selected items on the menu
 * @returns {Array<String>} filterSelected
 * @param {Array} items array to be filtered
 */
var filterSelected = function filterSelected(items) {
    return items.map(function (item) {
        if (item.items) {
            return filterSelected(item.items);
        } else if (item.subList) {
            return filterSelected(item.subList.items);
        } else if (item.isSelected) {
            return item.display;
        } else {
            return null;
        }
    });
};

/**
 * The MenuPage class
 * @class module:MPageFusion/testing.composite.menu.MenuPage
 *
 * @example
 * const menu = new MenuPage(driver);
 * const menuHeaderDisplay = menu.get("menuHeaderDisplay");
 */

var MenuPage = function (_UIComponentPage) {
    _inherits(MenuPage, _UIComponentPage);

    function MenuPage(driver, options) {
        _classCallCheck(this, MenuPage);

        var _this = _possibleConstructorReturn(this, (MenuPage.__proto__ || Object.getPrototypeOf(MenuPage)).call(this, driver, options));

        _this._popup = new _Popup2.default(driver);

        _this._contentHeader = new _ContentHeader2.default(driver, {
            selectorList: _this.selectorList,
            useExactSelector: true
        });

        _this._inlineList = new _InlineList2.default(driver, {
            selectorList: _this.selectorList,
            useExactSelector: true
        });

        return _this;
    }

    _createClass(MenuPage, [{
        key: "dismiss",


        /**
        * Closes the menu
        * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
        * @returns {Promise<String>} click action
        */
        value: function dismiss() {
            return this._contentHeader.leftAction.click();
        }

        /**
         * the menu header display
         * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
         * @returns {Promise<String>} menuHeaderDisplay
         */

    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * returns the base Popup page
         * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
         * @returns {PopupPage} PopupPage
         */

    }, {
        key: "popup",
        get: function get() {
            return this._popup;
        }

        /**
         * returns the base ContentHeader page
         * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
         * @returns {ContentHeaderPage} ContentHeaderPage
         */

    }, {
        key: "contentHeader",
        get: function get() {
            return this._contentHeader;
        }

        /**
         * returns the base InlineList page
         * @memberOf module:MPageFusion/testing.composite.menu.InlineListPage
         * @returns {InlineListPage} InlineListPage
         */

    }, {
        key: "inlineList",
        get: function get() {
            return this._inlineList;
        }

        /**
         * returs array displaying all the menu items
         * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
         * @returns {Promise<Array>} displayMenuItems
         */

    }, {
        key: "displayMenuItems",
        get: function get() {
            var _this2 = this;

            return this.getRootElement().then(function (element) {
                return element.getText();
            }).then(function (text) {
                return text.split("\n");
            }).then(function (items) {
                return _this2.isHeaderVisible.then(function (isHeaderVisible) {
                    return isHeaderVisible ? items.slice(1) : items;
                });
            });
        }

        /**
         * returns the array of selected items in the menu
         * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
         * @returns {Promise<Array>} selectedItems
         */

    }, {
        key: "selectedItems",
        get: function get() {
            return this.inlineList.value.then(function (items) {
                return filterSelected(items);
            }).then(function (items) {
                return flattenArray(items, 1).filter(function (item) {
                    return item !== null;
                });
            });
        }
    }, {
        key: "menuHeaderDisplay",
        get: function get() {
            return this._contentHeader.display;
        }

        /**
         * whether or not the menu header is visible
         * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
         * @returns {Promise<Boolean>} isHeaderVisible
         */

    }, {
        key: "isHeaderVisible",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(HEADER_INVISIBLE)).then(function () {
                    return false;
                }).catch(function () {
                    return true;
                });
            });
        }

        /**
         * whether or not the auto dividers are inserted
         * @memberOf module:MPageFusion/testing.composite.menu.MenuPage
         * @returns {Promise<Boolean>} isAutoDividersInserted
         */

    }, {
        key: "isAutoDividersInserted",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return classNames.includes(AUTO_DIVIDERS);
            });
        }
    }]);

    return MenuPage;
}(_UIComponent2.default);

exports.default = MenuPage;