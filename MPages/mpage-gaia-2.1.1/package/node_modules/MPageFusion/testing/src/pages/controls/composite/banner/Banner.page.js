"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _BannerAnchor = require("./BannerAnchor.page");

var _BannerAnchor2 = _interopRequireDefault(_BannerAnchor);

var _Button = require("../../atomic/button/Button.page");

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-BannerItem";
var CONTENT_TEXT = ".mpageui-BannerItem-text";
var BANNER_ACTIONS = ".mpageui-BannerItem-actions";
var MORE_DETAIL_TEXT = ".mpageui-BannerItem-moreDetailsText";
var DISMISS_BUTTON = ".mpageui-BannerItem-dismiss";

var TYPES = {
    INFO: "info",
    ALERT: "alert",
    ERROR: "error",
    WARNING: "warning",
    GAP_CHECKING: "gapChecking",
    OUTSIDE_RECORDS: "outsideRecords",
    SUCCESS: "success"
};

var DISPLAY_MODES = {
    DEFAULT: "default",
    COMPACT: "compact",
    DETAIL: "detail"
};

/**
 * The BannerPage class
 * @class module:MPageFusion/testing.composite.banner.BannerPage
 *
 * @example
 * const banner = new BannerPage(driver);
 * banner.isDisplayed();
 * banner.button(0).click();
 */

var BannerPage = function (_UIComponentPage) {
    _inherits(BannerPage, _UIComponentPage);

    function BannerPage() {
        _classCallCheck(this, BannerPage);

        return _possibleConstructorReturn(this, (BannerPage.__proto__ || Object.getPrototypeOf(BannerPage)).apply(this, arguments));
    }

    _createClass(BannerPage, [{
        key: "dismiss",


        /**
         * @memberOf module:MPageFusion/testing.composite.banner.BannerButtonPage
         * @returns {List<module:MPageFusion/testing.atomic.button.BannerButtonPage>} button
         */
        value: function dismiss() {
            return new _Button2.default(this.driver, {
                selectorList: this.selectorList.concat(DISMISS_BUTTON),
                useExactSelector: true
            }).click();
        }

        /**
         * gets the banner action content selector list
         * @memberOf module:MPageFusion/testing.composite.banner.BannerPage
         * @returns {Array} selector list
         */

    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * Obtains the title of the BannerItem.
         * @returns {Promise<string>} The title.
         */

    }, {
        key: "title",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(CONTENT_TEXT));
            }).then(function (textElement) {
                return textElement.findElement(_seleniumWebdriver.By.css("strong"));
            }).then(function (strongElement) {
                return strongElement.getText();
            });
        }

        /**
         * Obtains the description of the BannerItem.
         * @returns {Promise<string>} The description.
         */

    }, {
        key: "description",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(CONTENT_TEXT + " > span:nth-child(2)"));
            }).then(function (descriptionElement) {
                return descriptionElement.getText();
            });
        }

        /**
         * the anchor link
         * @memberOf module:MPageFusion/testing.composite.banner.BannerPage
         * @returns {module:MPageFusion/testing.composite.banner.BannerAnchorPage} anchor
         */

    }, {
        key: "toggleDetailsLink",
        get: function get() {
            return new _BannerAnchor2.default(this.driver, {
                selectorList: this.selectorList
            });
        }

        /**
         * the banner type
         * @memberOf module:MPageFusion/testing.composite.banner.BannerPage
         * @returns {Promise<string>} type
         */

    }, {
        key: "type",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return Object.values(TYPES).find(function (type) {
                    return classNames.includes("mpageui-BannerItem--" + type);
                }) || "";
            });
        }

        /**
         * the banner display mpde
         * @memberof module:MPageFusion/testing.composite.banner.BannerPage
         * @returns {Promise<string>} display mode
         */

    }, {
        key: "displayMode",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return Object.values(DISPLAY_MODES).find(function (displayMode) {
                    return classNames.includes("mpageui-BannerItem--" + displayMode);
                }) || "";
            });
        }
    }, {
        key: "actionContentSelector",
        get: function get() {
            return this.selectorList.concat(BANNER_ACTIONS);
        }

        /**
         * the more details text
         * @memberOf module:MPageFusion/testing.composite.banner.BannerPage
         * @returns {Promise<string>} more details text
         */

    }, {
        key: "moreDetailsText",
        get: function get() {
            return this.getNestedElement(MORE_DETAIL_TEXT).then(function (textElement) {
                if (!textElement) {
                    return Promise.resolve("");
                }

                return textElement.getText();
            });
        }
    }]);

    return BannerPage;
}(_UIComponent2.default);

exports.default = BannerPage;


BannerPage.TYPES = TYPES;
BannerPage.DISPLAY_MODES = DISPLAY_MODES;