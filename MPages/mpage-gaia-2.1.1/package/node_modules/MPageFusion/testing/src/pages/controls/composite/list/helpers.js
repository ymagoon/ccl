"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GROUP_TYPES = exports.createPageList = exports.BUTTON_TYPES = undefined;

var _InlineListButton = require("./InlineListButton.Page");

var _InlineListButton2 = _interopRequireDefault(_InlineListButton);

var _SubListButton = require("./SubListButton.Page");

var _SubListButton2 = _interopRequireDefault(_SubListButton);

var _ListSelectGroup = require("./ListSelectGroup.Page");

var _ListSelectGroup2 = _interopRequireDefault(_ListSelectGroup);

var _SubList = require("./SubList.Page");

var _SubList2 = _interopRequireDefault(_SubList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIST_SELECT_GROUP = "mpageui-List-selectgroup";
var NESTABLE_PANE = "mpageui-NestablePane";
var CONTENT_HEADER = "mpageui-ContentHeader";

/**
 * Returns an array of Page object model UIComponentPage that maps to the elements in the list.
 * @param {String} classNames The class names of the item elements in the list.
 * @param {Object} driver The driver which runs the tests in the browser
 * @param {Array<String>} selectorList The selectors of the parent container
 * @param {Boolean} isSublist Whether the list is a sublist of another list
 * @returns {Array<UIComponentPage>} An array of UIComponentPage instances.
 * @private
 */
var createPageList = function createPageList(classNames, driver, selectorList) {
    var isSublist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    return classNames.map(function (className, index) {
        if (className.includes(LIST_SELECT_GROUP)) {
            return new _ListSelectGroup2.default(driver, { index: index, selectorList: selectorList });
        }

        if (className.includes(NESTABLE_PANE)) {
            return new _SubList2.default(driver, { index: index, selectorList: selectorList });
        }

        if (className.includes(CONTENT_HEADER)) {
            return null;
        }

        if (isSublist) {
            return new _SubListButton2.default(driver, { index: index + 1, selectorList: selectorList });
        }

        return new _InlineListButton2.default(driver, { index: index, selectorList: selectorList });
    }).filter(function (page) {
        return page !== null;
    });
};

/**
 * The types of grouping possible in the InlineList control.
 */
var GROUP_TYPES = {
    SELECT_GROUP: "InlineList::GroupType::SelectGroup",
    SUBLIST: "InlineList::GroupType::SubList"
};

/**
 * The types of buttons possible in the InlineList control.
 */
var BUTTON_TYPES = {
    LIST: "ButtonType::List",
    SELECT: "ButtonType::Select",
    SUBLIST: "ButtonType::Sublist",
    TOGGLE: "ButtonType::Toggle"
};

exports.BUTTON_TYPES = BUTTON_TYPES;
exports.createPageList = createPageList;
exports.GROUP_TYPES = GROUP_TYPES;