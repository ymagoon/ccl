"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = "mpageui-Select-wrapper";

var TYPE = {
    MULTI_ITEM: "select",
    SINGLE_ITEM: "span"
};

/**
 * Returns the tag name of the select control
 * @param {SelectPage} selectPage The current instance of the select page object model
 * @returns {Promise<string>} the type of the select control
 * @private
 */
var getTagName = function getTagName(selectPage) {
    return selectPage.getRootElement().then(function (element) {
        return element.getTagName();
    });
};

/**
 * Returns the text of the options nested in the select control
 * @param {SelectPage} selectPage The current instance of the select page object model
 * @returns {Promise<Array<string>>} options text
 * @private
 */
var getOptions = function getOptions(selectPage) {
    return selectPage.getNestedElements("option").then(function (options) {
        return Promise.all(options.map(function (option) {
            return option.getText();
        }));
    });
};

/**
 * Returns the text inside the span of the select control
 * @param {SelectPage} selectPage The current instance of the select page object model
 * @returns {Promise<Array<string>>} options text
 * @private
 */
var getText = function getText(selectPage) {
    return selectPage.getRootElement().then(function (element) {
        return element.getText();
    });
};

/**
 * The SelectPage class
 * @class module:MPageFusion/testing.atomic.select.SelectPage
 *
 * @example
 * const select = new SelectPage(driver);
 * assert(select.option === "Colorado");
 * select.selectByIndex(1);
 * select.selectByText("Missouri");
 */

var SelectPage = function (_UIComponentPage) {
    _inherits(SelectPage, _UIComponentPage);

    function SelectPage() {
        _classCallCheck(this, SelectPage);

        return _possibleConstructorReturn(this, (SelectPage.__proto__ || Object.getPrototypeOf(SelectPage)).apply(this, arguments));
    }

    _createClass(SelectPage, [{
        key: "selectByIndex",


        /**
         * Selects an option by the passed index
         * @param {String} index The index of the option element that needs to be selected.
         * @memberOf module:MPageFusion/testing.atomic.button.SelectPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function selectByIndex(index) {
            return this.getNestedElement("option:nth-child(" + (index + 1) + ")").then(function (option) {
                return option.click();
            });
        }

        /**
         * Selects an option by the passed text
         * @param {String} text The text of the option element that needs to be selected.
         * @memberOf module:MPageFusion/testing.atomic.button.SelectPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "selectByText",
        value: function selectByText(text) {
            var _this2 = this;

            return this.get("options").then(function (options) {
                return _this2.selectByIndex(options.indexOf(text));
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return "." + ROOT_SELECTOR;
        }

        /**
         * The available options in the select
         * @memberOf module:MPageFusion/testing.atomic.select.SelectPage
         * @returns {Promise<Array<string>>} options
         */

    }, {
        key: "options",
        get: function get() {
            var _this3 = this;

            return getTagName(this).then(function (type) {
                return type === TYPE.MULTI_ITEM ? getOptions(_this3) : getText(_this3).then(function (text) {
                    return Promise.resolve([text]);
                });
            });
        }

        /**
         * The selected option of the select
         * @memberOf module:MPageFusion/testing.atomic.select.SelectPage
         * @returns {Promise<string>} option
         */

    }, {
        key: "option",
        get: function get() {
            var _this4 = this;

            return getTagName(this).then(function (type) {
                return type === TYPE.MULTI_ITEM ? _this4.getNestedElement("option:checked").then(function (option) {
                    return option.getText();
                }) : getText(_this4);
            });
        }

        /**
         * whether the select is disabled
         * @memberOf module:MPageFusion/testing.atomic.select.SelectPage
         * @returns {Promise<boolean>} isDisabled
         */

    }, {
        key: "isDisabled",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("disabled");
            }).then(function (attribute) {
                return Boolean(attribute);
            });
        }
    }]);

    return SelectPage;
}(_UIComponent2.default);

exports.default = SelectPage;