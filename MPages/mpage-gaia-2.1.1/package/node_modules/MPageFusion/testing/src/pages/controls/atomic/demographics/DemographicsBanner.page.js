"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _List = require("../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _DemographicsDetails = require("./DemographicsDetails.page");

var _DemographicsDetails2 = _interopRequireDefault(_DemographicsDetails);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-DemographicsBanner";
var PERSON_NAME = ".mpageui-DemographicsBanner-personName";
var APPLICATION_CONTENT = ".mpageui-DemographicsBanner-applicationContent";
var PERSON_DETAILS = ".mpageui-DemographicsBanner-personDetails";
var PERSON_IDENTIFIERS = ".mpageui-DemographicsBanner-identifiers";

/**
 * The DemographicsBannerPage class
 * @class module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
 *
 * @example
 * const demographicsBanner = new DemographicsBannerPage(driver);
 * demographicsBanner.get("personName").then((name) =>  assert(name === "Alfred Fucion");
 */

var DemographicsBannerPage = function (_UIComponentPage) {
    _inherits(DemographicsBannerPage, _UIComponentPage);

    function DemographicsBannerPage() {
        _classCallCheck(this, DemographicsBannerPage);

        return _possibleConstructorReturn(this, (DemographicsBannerPage.__proto__ || Object.getPrototypeOf(DemographicsBannerPage)).apply(this, arguments));
    }

    _createClass(DemographicsBannerPage, [{
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * gets the person name
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
         * @returns {Promise<string>} person name
         */

    }, {
        key: "personName",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(PERSON_NAME));
            }).then(function (element) {
                return element.getText();
            });
        }

        /**
        * gets custom content as provided by the consumer
        * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
        * @returns {Promise<string>} custom content as provided by the consumer
        */

    }, {
        key: "applicationContent",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(APPLICATION_CONTENT));
            }).then(function (element) {
                return element.getText();
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsDetailsPage
         * @returns {List<module:MPageFusion/testing.atomic.demographics.DemographicsDetailsPage>} list of children
         */

    }, {
        key: "demographicsDetails",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _DemographicsDetails2.default,
                selectorList: this.selectorList,
                containerSelector: PERSON_DETAILS
            });
        }

        /**
         * Gets age from demographics details
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
         * @returns {Promise<String>} age
         */

    }, {
        key: "age",
        get: function get() {
            return this.demographicsDetails(0).display;
        }

        /**
         * Gets gender from demographics details
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
         * @returns {Promise<String>} gender
         */

    }, {
        key: "gender",
        get: function get() {
            return this.demographicsDetails(1).display;
        }

        /**
         * Gets birthDate from demographics details
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
         * @returns {Promise<Object>} birthDate
         */

    }, {
        key: "birthDate",
        get: function get() {
            return this.demographicsDetails(2).display.then(function (element) {
                return { label: element.split(":\n")[0], value: element.split(":\n")[1] };
            });
        }

        /**
         * Gets all the other additional details from demographics details
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
         * @returns {Promise<Array>} resolves with an array
         */

    }, {
        key: "personAdditionalDetails",
        get: function get() {
            var _this2 = this;

            return this.demographicsDetails.count().then(function (result) {
                return result > 3 ? _this2.additionalDetails : [];
            });
        }

        /**
         * Gets all elements from demographics details
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
         * @returns {Promise<Array>} resolves with an array of objects
         */

    }, {
        key: "additionalDetails",
        get: function get() {
            return this.demographicsDetails.all().then(function (elements) {
                return Promise.all(elements.map(function (element) {
                    return element.display.then(function (result) {
                        return { label: result.split(":\n")[0], value: result.split(":\n")[1] };
                    });
                }));
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsDetailsPage
         * @returns {List<module:MPageFusion/testing.atomic.demographics.DemographicsDetailsPage>} list of children
         */

    }, {
        key: "demographicsIdentifiers",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _DemographicsDetails2.default,
                selectorList: this.selectorList,
                containerSelector: PERSON_IDENTIFIERS
            });
        }

        /**
         * Gets all the demographics identifiers in an array
         * @memberOf module:MPageFusion/testing.atomic.demographics.DemographicsBannerPage
         * @returns {Promise<Array>} resolves with an array
         */

    }, {
        key: "personIdentifiers",
        get: function get() {
            return this.demographicsIdentifiers.all().then(function (elements) {
                return Promise.all(elements.map(function (element) {
                    return element.display.then(function (result) {
                        return { label: result.split(":\n")[0], value: result.split(":\n")[1] };
                    });
                }));
            });
        }
    }]);

    return DemographicsBannerPage;
}(_UIComponent2.default);

exports.default = DemographicsBannerPage;