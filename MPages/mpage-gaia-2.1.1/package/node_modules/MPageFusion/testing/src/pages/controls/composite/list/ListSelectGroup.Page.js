"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _SelectGroupListButton = require("./SelectGroupListButton.Page");

var _SelectGroupListButton2 = _interopRequireDefault(_SelectGroupListButton);

var _List = require("../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-List-selectgroup";

/**
 * The ListSelectGroupPage class
 * @class ListSelectGroupPage
 * @private
 */

var ListSelectGroupPage = function (_UIComponentPage) {
    _inherits(ListSelectGroupPage, _UIComponentPage);

    function ListSelectGroupPage(driver, options) {
        _classCallCheck(this, ListSelectGroupPage);

        return _possibleConstructorReturn(this, (ListSelectGroupPage.__proto__ || Object.getPrototypeOf(ListSelectGroupPage)).call(this, driver, options));
    }

    _createClass(ListSelectGroupPage, [{
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * returns the nth SelectGroupListButton instance from the SelectGroup.
         * @returns {List<SelectGroupListButtonPage>} SelectGroupListButton page.
         */

    }, {
        key: "item",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _SelectGroupListButton2.default,
                selectorList: this.selectorList
            });
        }

        /**
         * Returns the value of the SelectGroup control as a collection of JSON objects.
         * @returns {Promise<Array<Object>>} value
         */

    }, {
        key: "value",
        get: function get() {
            var _this2 = this;

            return this.item.count().then(function (count) {
                if (!count) {
                    return Promise.resolve([]);
                }

                return Promise.all(Array.from({ length: count }, function (_, index) {
                    return _this2.item(index).get("value");
                })).then(function (values) {
                    return {
                        type: _helpers.GROUP_TYPES.SELECT_GROUP,
                        count: count,
                        items: values
                    };
                });
            });
        }
    }]);

    return ListSelectGroupPage;
}(_UIComponent2.default);

exports.default = ListSelectGroupPage;