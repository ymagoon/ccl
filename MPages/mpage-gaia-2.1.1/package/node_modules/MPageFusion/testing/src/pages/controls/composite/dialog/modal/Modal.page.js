"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _ModalContent = require("./ModalContent.page");

var _ModalContent2 = _interopRequireDefault(_ModalContent);

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Modal";

/**
 * The ModalPage class
 * @class module:MPageFusion/testing.composite.dialog.ModalPage
 *
 * @example
 * const modal = new ModalPage(driver,"");
 * modal.get("isOpen")
 *   .then((isOpen) => assert(isOpen).equal(true));
 */

var ModalPage = function (_UIComponentPage) {
    _inherits(ModalPage, _UIComponentPage);

    function ModalPage(driver, args) {
        _classCallCheck(this, ModalPage);

        var _this = _possibleConstructorReturn(this, (ModalPage.__proto__ || Object.getPrototypeOf(ModalPage)).call(this, driver, args));

        _this._content = new _ModalContent2.default(_this.driver, {
            selectorList: _this.selectorList
        });
        return _this;
    }

    /*
    using custom element selector to get modal element because
    the modal is not nested within the root selector.
    */


    _createClass(ModalPage, [{
        key: "clickOut",


        /**
         * clicks on the modal overlay
         * @memberOf module:MPageFusion/testing.composite.dialog.ModalPage
         * @returns {Promise} resolves when the action completes
         */
        value: function clickOut() {
            var _this2 = this;

            return this.get("isOpen").then(function (isOpen) {
                if (!isOpen) {
                    throw new Error("Modal Dialog is closed");
                }
                /* Selenium webdriver tries to click at the center of the element
                 which is blocked by the Modal Content hence had to  */
                return _this2.driver.actions().mouseMove(_this2.driver.findElement(_seleniumWebdriver.By.css(ROOT_SELECTOR)), { x: 10, y: 10 }).click().perform();
            });
        }

        /**
         * closes the modal dialog
         * @memberOf module:MPageFusion/testing.composite.dialog.ModalPage
         * @returns {Promise} resolves when the action completes
         */

    }, {
        key: "close",
        value: function close() {
            var _this3 = this;

            return this.get("isOpen").then(function (isOpen) {
                if (!isOpen) {
                    throw new Error("Modal Dialog is already closed");
                }

                return _this3._content.header.closeIcon.click();
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            var _this4 = this;

            return function (prefix) {
                return _this4.driver.findElements(_seleniumWebdriver.By.css("body > *")).then(function (elements) {
                    return Promise.all(elements.map(function (element) {
                        return element.getAttribute("class");
                    }));
                }).then(function (classNamesList) {
                    var index = classNamesList.reduce(function (lastIndex, classNames, i) {
                        return classNames.includes("mpageui-Modal") ? i : lastIndex;
                    }, -1);
                    return "body > *:nth-child(" + (index + 1) + ")";
                });
            };
        }

        /**
         * gets the Modal dialog header display
         * @memberOf module:MPageFusion/testing.composite.dialog.ModalPage
         * @returns {Promise<String>} header display
         */

    }, {
        key: "headerDisplay",
        get: function get() {
            return this._content.header.display;
        }

        /**
         * gets the modal content footer selector list
         * @memberOf module:MPageFusion/testing.composite.dialog.ModalPage
         * @returns {Array} selector list
         */

    }, {
        key: "footerSelectorList",
        get: function get() {
            return this._content.footerSelectorList;
        }

        /**
         * gets the modal content body selector list
         * @memberOf module:MPageFusion/testing.composite.dialog.ModalPage
         * @returns {Array} selector list
         */

    }, {
        key: "bodySelectorList",
        get: function get() {
            return this._content.bodySelectorList;
        }

        /**
         * whether the Modal dialog is open
         * @memberOf module:MPageFusion/testing.composite.dialog.ModalPage
         * @returns {Promise<boolean>} isOpen
         */

    }, {
        key: "isOpen",
        get: function get() {
            return this.isDisplayed();
        }

        /**
         * size of the modal dialog
         * @memberOf module:MPageFusion/testing.composite.dialog.ModalPage
         * @returns {String} if exists returns the size of the modal dialog, else empty string
         */

    }, {
        key: "size",
        get: function get() {
            return this._content.get("size").then(function (size) {
                return size;
            });
        }
    }]);

    return ModalPage;
}(_UIComponent2.default);

exports.default = ModalPage;