"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SvgIconBase = require("./SvgIconBase.page");

var _SvgIconBase2 = _interopRequireDefault(_SvgIconBase);

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The SvgIconPage class can be used for any MPageFusion svg icon.
 * It should be used for getting the type of an unknown icon.
 * @class module:MPageFusion/testing.atomic.icon.svg.SvgIconPage
 *
 * @example
 * // known icon
 * const icon = new SvgIconPage(driver, {
 *     selectorList: [ ".my-icon-wrapper-class" ]
 * });
 *
 * icon.get("type")
 *     .then((type) => {
 *         assert(type === SvgIconPage.TYPES.ATTACHMENT);
 *     });
 *
 * // icon of a particular type
 * const AttachmentPage = atomic.icon.svg.category.content.Attachment;
 * const attachmentIcon = new AttachmentPage(driver);
 *
 * attachmentIcon.isDisplayed()
 *     .then((isDisplayed) => {
 *         assert(isDisplayed);
 *     });
 */
var SvgIconPage = function (_SvgIconBasePage) {
    _inherits(SvgIconPage, _SvgIconBasePage);

    function SvgIconPage() {
        _classCallCheck(this, SvgIconPage);

        return _possibleConstructorReturn(this, (SvgIconPage.__proto__ || Object.getPrototypeOf(SvgIconPage)).apply(this, arguments));
    }

    _createClass(SvgIconPage, [{
        key: "click",


        /**
         * clicks the icon
         * @memberOf module:MPageFusion/testing.atomic.icon.svg.SvgIconPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function click() {
            return this.getRootElement().then(function (element) {
                return element.click();
            });
        }
    }, {
        key: "type",

        /**
         * Gets the icon type
         * @memberOf module:MPageFusion/testing.atomic.icon.svg.SvgIconPage
         * @returns {Promise<String>} resolves with the icon type
         */
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                var iconClass = classNames.split(/\s+/).find(function (className) {
                    return className.includes("mpageui-SvgIcon-");
                });

                return _helpers.classTypeMap[iconClass];
            });
        }
    }]);

    return SvgIconPage;
}(_SvgIconBase2.default);

exports.default = SvgIconPage;


SvgIconPage.TYPES = _helpers.ICON_TYPES;