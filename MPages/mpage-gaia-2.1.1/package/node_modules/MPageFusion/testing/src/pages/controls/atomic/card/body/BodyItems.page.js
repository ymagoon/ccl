"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _List = require("../../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _DualColumnSection = require(".././column/DualColumnSection.page");

var _DualColumnSection2 = _interopRequireDefault(_DualColumnSection);

var _SingleColumnSection = require(".././column/SingleColumnSection.page");

var _SingleColumnSection2 = _interopRequireDefault(_SingleColumnSection);

var _SvgIcon = require("../../icon/svg/SvgIcon.page");

var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

var _cardHelper = require("../helper/cardHelper.page");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SELECTOR_LIST = {
    ROOT_SELECTOR: ".mpageui-Card-base",
    CONTENT_SELECTOR: ".mpageui-Card-center-content",
    ACCESSORY_SELECTOR: ".mpageui-Card-accessory",
    LEFT_ACCESSORY: ".mpageui-Card-accessory--left",
    ALIGN_TOP_SELECTOR: ".mpageui-Card-accessory--align-top",
    RIGHT_ACCESSORY: ".mpageui-Card-accessory--right",
    DISCLOSURE_SELECTOR: ".mpageui-Card-progressive-disclosure",
    CONTENT_WRAPPER: ".mpageui-Card-content-wrapper"
};
var contentSelector = void 0;

/**
 * The BodyItems class
 * @class module:MPageFusion/test.atomic.card.CardPage.BodyItems
 */

var BodyItems = function (_UIComponentPage) {
    _inherits(BodyItems, _UIComponentPage);

    function BodyItems() {
        _classCallCheck(this, BodyItems);

        return _possibleConstructorReturn(this, (BodyItems.__proto__ || Object.getPrototypeOf(BodyItems)).apply(this, arguments));
    }

    _createClass(BodyItems, [{
        key: "elementSelector",
        get: function get() {
            return SELECTOR_LIST.ROOT_SELECTOR;
        }

        /**
         * data content display
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
         * @returns {Promise<string>} display
         */

    }, {
        key: "display",
        get: function get() {
            return (0, _cardHelper.displayHelper)(this);
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.card.CardPage.BodyItems
         * @returns {List<module:MPageFusion/testing.atomic.card.CardPage.BodyItems>} bodyItems
         */

    }, {
        key: "dualColumnSection",
        get: function get() {
            return (0, _List2.default)((0, _cardHelper.makeListHelper)(this, _DualColumnSection2.default, this.selectorList, SELECTOR_LIST.CONTENT_SELECTOR));
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.card.CardPage.BodyItems
         * @returns {List<module:MPageFusion/testing.atomic.card.CardPage.BodyItems>} bodyItems
         */

    }, {
        key: "singleColumnSection",
        get: function get() {
            return (0, _List2.default)((0, _cardHelper.makeListHelper)(this, _SingleColumnSection2.default, this.selectorList, SELECTOR_LIST.CONTENT_SELECTOR));
        }
        /**
         * This is the array of data points to display in the card. Each item is a javascript object
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
         * @returns {Promise<Array>} Array<Object>
         */

    }, {
        key: "items",
        get: function get() {
            return this.selectorList.concat(SELECTOR_LIST.CONTENT_SELECTOR);
        }

        /**
         * Whether or not the progressive disclosure section (right arrow) should be displayed
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
         * @returns {Promise<Boolean>} true or false
         */

    }, {
        key: "hasProgressiveDisclosure",
        get: function get() {
            contentSelector = SELECTOR_LIST.CONTENT_WRAPPER + " " + SELECTOR_LIST.DISCLOSURE_SELECTOR;
            return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
                return element.findElement(_seleniumWebdriver.By.tagName("svg"));
            }).then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return !!classNames;
            }).catch(function () {
                return false;
            });
        }

        /**
         * This is an optional icon to be displayed on the left side of the card
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
         * @returns {Promise<string>} className or null
         */

    }, {
        key: "leftAccessory",
        get: function get() {
            contentSelector = "" + SELECTOR_LIST.ACCESSORY_SELECTOR + SELECTOR_LIST.LEFT_ACCESSORY;
            return (0, _List2.default)((0, _cardHelper.makeListHelper)(this, _SvgIcon2.default, this.selectorList.concat(contentSelector)));
        }

        /**
         * This determines whether the left accessory is top aligned or center aligned
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
         * @returns {Promise<Boolean>} true or false
         */

    }, {
        key: "leftAccessoryTopAlign",
        get: function get() {
            contentSelector = "" + SELECTOR_LIST.ACCESSORY_SELECTOR + SELECTOR_LIST.LEFT_ACCESSORY;
            return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
                return Boolean(element);
            });
        }

        /**
         * This is an optional icon to be displayed on the right side of the card
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
         * @returns {Promise<String>} className
         */

    }, {
        key: "rightAccessory",
        get: function get() {
            contentSelector = "" + SELECTOR_LIST.ACCESSORY_SELECTOR + SELECTOR_LIST.RIGHT_ACCESSORY;
            return (0, _List2.default)((0, _cardHelper.makeListHelper)(this, _SvgIcon2.default, this.selectorList.concat(contentSelector)));
        }

        /**
         * This determines whether the right accessory is top aligned or center aligned
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems
         * @returns {Promise<Boolean>} true or false
         */

    }, {
        key: "rightAccessoryTopAlign",
        get: function get() {
            contentSelector = "" + SELECTOR_LIST.ACCESSORY_SELECTOR + SELECTOR_LIST.RIGHT_ACCESSORY + SELECTOR_LIST.ALIGN_TOP_SELECTOR;
            return (0, _cardHelper.getElement)(this, contentSelector).then(function (element) {
                return Boolean(element);
            });
        }
    }]);

    return BodyItems;
}(_UIComponent2.default);

exports.default = BodyItems;