"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-TextArea";

/**
 * The TextAreaPage class
 * @class module:MPageFusion/testing.atomic.textArea.TextAreaPage
 *
 * @example
 * const textArea = new TextAreaPage(driver);
 * textArea.get("placeholder")
 *     .then((value) => {
 *         assert(value === "Enter a Value");
 *    });
 */

var TextAreaPage = function (_UIComponentPage) {
    _inherits(TextAreaPage, _UIComponentPage);

    function TextAreaPage() {
        _classCallCheck(this, TextAreaPage);

        return _possibleConstructorReturn(this, (TextAreaPage.__proto__ || Object.getPrototypeOf(TextAreaPage)).apply(this, arguments));
    }

    _createClass(TextAreaPage, [{
        key: "focus",


        /**
         * textArea field is focused
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function focus() {
            return this.getNestedElement("textarea").then(function (textAreaElement) {
                return textAreaElement.click();
            });
        }

        /**
         * whether the textArea field is focused
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @returns {Promise<boolean>} isFocused
         */

    }, {
        key: "blur",


        /**
         * Blur event is triggerd on textArea field if it is already in focus
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function blur() {
            return this.getNestedElement("textarea").then(function (textAreaElement) {
                return textAreaElement.sendKeys(_seleniumWebdriver.Key.TAB);
            });
        }

        /**
         * sendkeys to the textArea field
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @param {String} text - the input text
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "enterText",
        value: function enterText(text) {
            return this.getNestedElement("textarea").then(function (textAreaElement) {
                return textAreaElement.sendKeys(text);
            });
        }

        /**
         * clears text from the textArea field
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "clearText",
        value: function clearText() {
            return this.getNestedElement("textarea").then(function (textAreaElement) {
                return textAreaElement.sendKeys(_seleniumWebdriver.Key.CONTROL + "a").then(function () {
                    return textAreaElement.sendKeys(_seleniumWebdriver.Key.DELETE);
                });
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * value of the textArea field
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @returns {Promise<String>} value
         */

    }, {
        key: "value",
        get: function get() {
            return this.getNestedElement("pre > span").then(function (spanElement) {
                return spanElement.getAttribute("innerHTML");
            });
        }

        /**
         * placeholder of the textArea field
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @returns {Promise<String>} placeholder
         */

    }, {
        key: "placeholder",
        get: function get() {
            return this.getNestedElement("textarea").then(function (textAreaElement) {
                return textAreaElement.getAttribute("placeholder");
            });
        }

        /**
         * whether the textArea field is read only
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @returns {Promise<boolean>} isReadOnly
         */

    }, {
        key: "isReadOnly",
        get: function get() {
            return this.getNestedElement("textarea").then(function (textAreaElement) {
                return textAreaElement.getAttribute("readonly");
            }).then(function (isReadOnly) {
                return Boolean(isReadOnly);
            });
        }

        /**
         * whether the textArea field is disabled
         * @memberOf module:MPageFusion/testing.atomic.textArea.TextAreaPage
         * @returns {Promise<boolean>} isDisabled
         */

    }, {
        key: "isDisabled",
        get: function get() {
            return this.getNestedElement("textarea").then(function (textAreaElement) {
                return textAreaElement.getAttribute("disabled");
            }).then(function (isDisabled) {
                return Boolean(isDisabled);
            });
        }
    }, {
        key: "isFocused",
        get: function get() {
            var _this2 = this;

            return this.getNestedElement("textarea").then(function (textAreaElement) {
                return _this2.driver.switchTo().activeElement().then(function (activeElement) {
                    return _seleniumWebdriver.WebElement.equals(textAreaElement, activeElement);
                });
            });
        }
    }]);

    return TextAreaPage;
}(_UIComponent2.default);

exports.default = TextAreaPage;