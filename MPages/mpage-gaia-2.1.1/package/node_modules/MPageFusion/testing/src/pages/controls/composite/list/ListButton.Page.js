"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _helpers = require("../../atomic/icon/svg/helpers");

var _seleniumWebdriver = require("selenium-webdriver");

var _helpers2 = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-ListButton";
var BUTTON_ENABLED = "mpageui-ListButton--enabled";
var BUTTON_TYPE_SUBLIST = "mpageui-Button--sublist";
var BUTTON_TYPE_SELECTABLE = "mpageui-Button--listselect";
var BUTTON_TYPE_SELECT = "mpageui-listselectgroup-item";

/**
 * The ListButtonPage class
 * @class ListButtonPage
 * @private
 */

var ListButtonPage = function (_UIComponentPage) {
    _inherits(ListButtonPage, _UIComponentPage);

    function ListButtonPage() {
        _classCallCheck(this, ListButtonPage);

        return _possibleConstructorReturn(this, (ListButtonPage.__proto__ || Object.getPrototypeOf(ListButtonPage)).apply(this, arguments));
    }

    _createClass(ListButtonPage, [{
        key: "click",


        /**
         * Clicks the button
         * @returns {Promise} Resolves when the action is complete
         */
        value: function click() {
            return this.getRootElement().then(function (element) {
                return element.click();
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * The display on the button
         * @returns {Promise<String>} display
         */

    }, {
        key: "display",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getText();
            });
        }

        /**
         * The icon on the button
         * @returns {Promise<String>} icon
         */

    }, {
        key: "icon",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(".mpageui-SvgIcon"));
            }).then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                var iconClass = classNames.split(/\s+/).find(function (className) {
                    return className.includes("mpageui-SvgIcon-");
                });

                return _helpers.classTypeMap[iconClass];
            }).catch(function () {
                return "";
            });
        }

        /**
         * Whether the button is enabled or not
         * @returns {Promise<Boolean>} isEnabled
         */

    }, {
        key: "isEnabled",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return classNames.includes(BUTTON_ENABLED);
            });
        }

        /**
         * Whether the button is selected or not
         * @returns {Promise<Boolean>} isSelected
         */

    }, {
        key: "isSelected",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("aria-selected");
            }).then(function (attribute) {
                return Boolean(attribute);
            });
        }

        /**
         * The type of the button
         * @returns {Promise<String>} type
         */

    }, {
        key: "type",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                if (classNames.includes(BUTTON_TYPE_SELECTABLE)) {
                    if (classNames.includes(BUTTON_TYPE_SELECT)) {
                        return _helpers2.BUTTON_TYPES.SELECT;
                    }

                    return _helpers2.BUTTON_TYPES.TOGGLE;
                }

                if (classNames.includes(BUTTON_TYPE_SUBLIST)) {
                    return _helpers2.BUTTON_TYPES.SUBLIST;
                }

                return _helpers2.BUTTON_TYPES.LIST;
            });
        }

        /**
         * The object representing the state of the button
         * @returns {Promise<Object>} value
         */

    }, {
        key: "value",
        get: function get() {
            return Promise.all([this.get("display"), this.get("type"), this.get("icon"), this.get("isEnabled"), this.get("isSelected")]).then(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 5),
                    display = _ref2[0],
                    type = _ref2[1],
                    icon = _ref2[2],
                    isEnabled = _ref2[3],
                    isSelected = _ref2[4];

                return {
                    display: display,
                    type: type,
                    icon: icon,
                    isEnabled: isEnabled,
                    isSelected: isSelected
                };
            });
        }
    }]);

    return ListButtonPage;
}(_UIComponent2.default);

exports.default = ListButtonPage;