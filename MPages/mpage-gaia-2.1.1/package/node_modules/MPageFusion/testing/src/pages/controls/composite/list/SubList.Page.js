"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _ContentHeader = require("../../atomic/header/content-header/ContentHeader.page");

var _ContentHeader2 = _interopRequireDefault(_ContentHeader);

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-NestablePane.mpageui-inlinelist-item";
var SUBLIST_ITEMS = ".mpageui-sublist-item";
var IS_VISIBLE = "mpageui-NestablePane-visible";

/**
 * The SubListPage class
 * @class SubListPage
 * @private
 */

var SubListPage = function (_UIComponentPage) {
    _inherits(SubListPage, _UIComponentPage);

    function SubListPage(driver, options) {
        _classCallCheck(this, SubListPage);

        var _this = _possibleConstructorReturn(this, (SubListPage.__proto__ || Object.getPrototypeOf(SubListPage)).call(this, driver, options));

        _this._contentHeader = new _ContentHeader2.default(driver, { selectorList: _this.selectorList });
        return _this;
    }

    _createClass(SubListPage, [{
        key: "item",


        /**
         * Returns a page object for the item in the given index.
         * @param {Number} index The index for which the page object is required.
         * @returns {Promise<UIComponentPage>} item
         */
        value: function item(index) {
            return this.items().then(function (items) {
                return items[index];
            });
        }

        /**
         * Returns a list of Page objects.
         * @returns {Promise<Array<UIComponentPage>>} items
         */

    }, {
        key: "items",
        value: function items() {
            var _this2 = this;

            return this.getNestedElements(SUBLIST_ITEMS).then(function (elements) {
                return Promise.all(elements.map(function (element) {
                    return element.getAttribute("class");
                }));
            }).then(function (classes) {
                return (0, _helpers.createPageList)(classes, _this2.driver, _this2.selectorList, true);
            });
        }

        /**
         * Returns the value of the sub list as a collection of JSON objects.
         * @returns {Promise<Array<Object>>} value
         */

    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }
    }, {
        key: "value",
        get: function get() {
            var _this3 = this;

            return this.items().then(function (items) {
                if (!items.length) {
                    return Promise.resolve([]);
                }

                return _this3.getRootElement().then(function (element) {
                    return element.getAttribute("class");
                }).then(function (classNames) {
                    return Promise.all([_this3._contentHeader.get("display")].concat(items.map(function (item) {
                        return item.get("value");
                    }))).then(function (values) {
                        return {
                            title: values[0],
                            type: _helpers.GROUP_TYPES.SUBLIST,
                            count: items.length,
                            isVisible: classNames.includes(IS_VISIBLE),
                            items: values.splice(1)
                        };
                    });
                });
            });
        }
    }]);

    return SubListPage;
}(_UIComponent2.default);

exports.default = SubListPage;