"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _PopupPaneHeader = require("./PopupPaneHeader.page");

var _PopupPaneHeader2 = _interopRequireDefault(_PopupPaneHeader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CONTENT_SELECTOR = ".mpageui-Popup-content";
var FOOTER_SELECTOR = ".mpageui-Popup-pane-footer";
var OVERLAY_SELECTOR = ".mpageui-Popup-layover";

/**
 * The PopupPanePage class
 * @alias module:MPageFusion/testing.composite.dialog.PopupPage.pane
 * @class PopupPanePage
 * @private
 */

var PopupPanePage = function (_UIComponentPage) {
    _inherits(PopupPanePage, _UIComponentPage);

    function PopupPanePage() {
        _classCallCheck(this, PopupPanePage);

        return _possibleConstructorReturn(this, (PopupPanePage.__proto__ || Object.getPrototypeOf(PopupPanePage)).apply(this, arguments));
    }

    _createClass(PopupPanePage, [{
        key: "elementSelector",

        /*
           using custom element selector to get pane element because
           the popup pane is not nested within the root popup div
         */
        get: function get() {
            var _this2 = this;

            return function (prefix) {
                return _this2.driver.findElement(_seleniumWebdriver.By.css(prefix)).then(function (element) {
                    return element.getAttribute("data-popup-id");
                }).then(function (popupId) {
                    return "[data-popup-pane-id=\"" + popupId + "\"]";
                });
            };
        }
    }, {
        key: "contentSelectorList",
        get: function get() {
            return this.selectorList.concat(CONTENT_SELECTOR);
        }
    }, {
        key: "header",
        get: function get() {
            return new _PopupPaneHeader2.default(this.driver, {
                selectorList: this.selectorList
            });
        }
    }, {
        key: "footerSelectorList",
        get: function get() {
            return this.selectorList.concat(FOOTER_SELECTOR);
        }
    }, {
        key: "overlay",
        get: function get() {
            var _this3 = this;

            return {
                click: function click() {
                    return _this3.getRootElement().then(function (element) {
                        return element.findElement(_seleniumWebdriver.By.css(OVERLAY_SELECTOR));
                    }).then(function (element) {
                        return element.click();
                    });
                }
            };
        }
    }]);

    return PopupPanePage;
}(_UIComponent2.default);

exports.default = PopupPanePage;