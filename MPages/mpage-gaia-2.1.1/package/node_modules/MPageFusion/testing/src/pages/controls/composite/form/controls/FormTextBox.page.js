"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormControl = require("../FormControl.page");

var _FormControl2 = _interopRequireDefault(_FormControl);

var _TextBox = require("../../../atomic/textbox/TextBox.page");

var _TextBox2 = _interopRequireDefault(_TextBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormTextBox";

/**
 * The FormTextBoxPage class
 * @class module:MPageFusion/testing.composite.form.FormTextBoxPage
 *
 * @example
 * const formTextBox = new FormTextBoxPage(driver);
 * assert(formTextBox.display).equals("Sample TextBox Label");
 */

var FormTextBoxPage = function (_FormControlPage) {
    _inherits(FormTextBoxPage, _FormControlPage);

    function FormTextBoxPage(driver, options) {
        _classCallCheck(this, FormTextBoxPage);

        var _this = _possibleConstructorReturn(this, (FormTextBoxPage.__proto__ || Object.getPrototypeOf(FormTextBoxPage)).call(this, driver, options));

        _this._textbox = new _TextBox2.default(driver);
        return _this;
    }

    _createClass(FormTextBoxPage, [{
        key: "focus",


        /**
         * checks the focused element
         * @memberOf module:MPageFusion/testing.composite.form.FormTextBoxPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function focus() {
            return this._textbox.focus();
        }

        /**
         * sendkeys to the textbox
         * @memberOf module:MPageFusion/testing.composite.form.FormTextBoxPage
         * @param {String} text - the input text
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "enterText",
        value: function enterText(text) {
            return this._textbox.enterText(text);
        }

        /**
         * clears text from the textbox
         * @memberOf module:MPageFusion/testing.composite.form.FormTextBoxPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "clearText",
        value: function clearText() {
            return this._textbox.clearText();
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * the value in the textbox
         * @memberOf module:MPageFusion/testing.atomic.textbox.TextBoxPage
         * @returns {Promise<String>} display text
         */

    }, {
        key: "value",
        get: function get() {
            return this._textbox.value;
        }

        /**
         * the placeholder
         * @memberOf module:MPageFusion/testing.composite.form.FormTextBoxPage
         * @returns {Promise<String>} display placeholder
         */

    }, {
        key: "placeholder",
        get: function get() {
            return this._textbox.placeholder;
        }
    }]);

    return FormTextBoxPage;
}(_FormControl2.default);

exports.default = FormTextBoxPage;