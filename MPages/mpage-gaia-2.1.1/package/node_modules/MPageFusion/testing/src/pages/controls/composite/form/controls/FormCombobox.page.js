"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormControl = require("../FormControl.page");

var _FormControl2 = _interopRequireDefault(_FormControl);

var _Combobox = require("../../combobox/Combobox.page");

var _Combobox2 = _interopRequireDefault(_Combobox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormComboBox";

/**
 * The FormComboboxPage class
 * @class module:MPageFusion/testing.composite.form.FormComboboxPage
 *
 * @example
 * const formComboboxBar = new FormComboboxPage(driver);
 * formComboboxBar.option(1).display
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormComboboxPage = function (_FormControlPage) {
    _inherits(FormComboboxPage, _FormControlPage);

    function FormComboboxPage() {
        _classCallCheck(this, FormComboboxPage);

        return _possibleConstructorReturn(this, (FormComboboxPage.__proto__ || Object.getPrototypeOf(FormComboboxPage)).apply(this, arguments));
    }

    _createClass(FormComboboxPage, [{
        key: "blur",


        /**
         * blur the combobox
         * @memberOf module:MPageFusion/testing.composite.combobox.FormComboboxPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function blur() {
            return this.combobox.blur();
        }

        /**
         * enters text to the combobox
         * @memberOf module:MPageFusion/testing.composite.form.FormcomboboxPage
         * @param {String} text - the input text
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "enterText",
        value: function enterText(text) {
            return this.combobox.enterText(text);
        }

        /**
         * clears text from the combobox textbox
         * @memberOf module:MPageFusion/testing.composite.form.FormcomboboxPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "clearText",
        value: function clearText() {
            return this.combobox.clearText();
        }

        /**
         * focuses the combobox
         * @memberOf module:MPageFusion/test.composite.combobox.FormComboboxPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "focus",
        value: function focus() {
            return this.combobox.focus();
        }

        /**
         * clicks the dropdown icon button
         * @memberOf module:MPageFusion/testing.composite.form.FormcomboboxPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "click",
        value: function click() {
            return this.combobox.click();
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }
    }, {
        key: "combobox",
        get: function get() {
            return new _Combobox2.default(this.driver, { selectorList: this.selectorList });
        }

        /**
         * search list item
         * @memberOf module:MPageFusion/testing.composite.form.FormcomboboxPage
         * @returns {List<module:MPageFusion/testing.composite.search.SearchPage.searchList>} searchList
         */

    }, {
        key: "option",
        get: function get() {
            return this.combobox.option;
        }

        /**
         * whether the search bar is disabled
         * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
         * @returns {Promise<boolean>} true or false
         */

    }, {
        key: "isDisabled",
        get: function get() {
            return this.combobox.isDisabled;
        }

        /**
         * returns placeholder text from the combobox
         * @memberOf module:MPageFusion/test.composite.combobox.FormComboboxPage
         * @returns {Promise<string>} placeholder text
         */

    }, {
        key: "placeholder",
        get: function get() {
            return this.combobox.placeholder;
        }
    }]);

    return FormComboboxPage;
}(_FormControl2.default);

exports.default = FormComboboxPage;