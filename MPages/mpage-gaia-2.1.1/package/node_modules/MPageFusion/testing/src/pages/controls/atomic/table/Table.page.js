"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _List = require("../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _TableSubsection = require("./TableSubsection.page");

var _TableSubsection2 = _interopRequireDefault(_TableSubsection);

var _TableRow = require("./TableRow.page");

var _TableRow2 = _interopRequireDefault(_TableRow);

var _TableColumn = require("./TableColumn.page");

var _TableColumn2 = _interopRequireDefault(_TableColumn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Table";
var BODY = ".mpageui-Table-body";
var ROW_CONTAINER = ".mpageui-Table-rowContainer";
var ROW = ".mpageui-Table-row";
var HEADER = ".mpageui-Table-header";
var SUBSECTION_HEADER = ".mpageui-Table-sectionHeader";

/**
 * The TablePage class
 * @class module:MPageFusion/testing.atomic.table.TablePage
 *
 * @example
 * const table = new TablePage(driver);
 * table.subsection(0).row(4).click();
 */

var TablePage = function (_UIComponentPage) {
    _inherits(TablePage, _UIComponentPage);

    function TablePage() {
        _classCallCheck(this, TablePage);

        return _possibleConstructorReturn(this, (TablePage.__proto__ || Object.getPrototypeOf(TablePage)).apply(this, arguments));
    }

    _createClass(TablePage, [{
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage
         * @returns {List<module:MPageFusion/testing.atomic.table.TablePage.subsection>} subsection
         */

    }, {
        key: "subsection",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _TableSubsection2.default,
                selectorList: this.selectorList,
                containerSelector: BODY
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage
         * @returns {List<module:MPageFusion/testing.atomic.table.TablePage.row>} row
         */

    }, {
        key: "row",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _TableRow2.default,
                selectorList: this.selectorList,
                containerSelector: ROW_CONTAINER
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage
         * @returns {List<module:MPageFusion/testing.atomic.table.TablePage.column>} column
         */

    }, {
        key: "column",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _TableColumn2.default,
                selectorList: this.selectorList,
                containerSelector: HEADER + " " + ROW
            });
        }

        /**
         * the table data
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage
         * @returns {Promise<object>} data
         */

    }, {
        key: "data",
        get: function get() {
            var _this2 = this;

            return this.subsection(0).getRootElement() // table includes a subsection element even if not using subsections
            .then(function (element) {
                return (
                    // check to see if subsections are used
                    element.findElements(_seleniumWebdriver.By.css(SUBSECTION_HEADER)).then(function (headers) {
                        return headers.length ? Promise.all([_this2.subsection.all("data"), _this2.column.all("data")]).then(function (_ref) {
                            var _ref2 = _slicedToArray(_ref, 2),
                                subsections = _ref2[0],
                                columns = _ref2[1];

                            return { subsections: subsections, columns: columns };
                        }) : Promise.all([_this2.row.all("data"), _this2.column.all("data")]).then(function (_ref3) {
                            var _ref4 = _slicedToArray(_ref3, 2),
                                rows = _ref4[0],
                                columns = _ref4[1];

                            return { rows: rows, columns: columns };
                        });
                    })
                );
            });
        }
    }]);

    return TablePage;
}(_UIComponent2.default);

exports.default = TablePage;