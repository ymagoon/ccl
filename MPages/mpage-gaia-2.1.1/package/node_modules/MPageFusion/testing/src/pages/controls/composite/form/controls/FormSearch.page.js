"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormControl = require("../FormControl.page");

var _FormControl2 = _interopRequireDefault(_FormControl);

var _Search = require("../../../composite/search/Search.page");

var _Search2 = _interopRequireDefault(_Search);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormSearch";

/**
 * The FormCheckboxPage class
 * @class module:MPageFusion/testing.composite.form.FormSearchPage
 *
 * @example
 * const formSearchBar = new FormSearchPage(driver);
 * formSearchBar.option(1).display
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormSearchPage = function (_FormControlPage) {
    _inherits(FormSearchPage, _FormControlPage);

    function FormSearchPage(driver, options) {
        _classCallCheck(this, FormSearchPage);

        var _this = _possibleConstructorReturn(this, (FormSearchPage.__proto__ || Object.getPrototypeOf(FormSearchPage)).call(this, driver, options));

        _this._search = new _Search2.default(driver, { selectorList: _this.selectorList });
        return _this;
    }

    _createClass(FormSearchPage, [{
        key: "enterText",


        /**
         * sendkeys to the search bar
         * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
         * @param {String} text - the input text
         * @returns {Promise} resolves when the action is completed
         */
        value: function enterText(text) {
            return this._search.enterText(text);
        }

        /**
         * clears text from the search bar textbox
         * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "clearText",
        value: function clearText() {
            return this._search.clearText();
        }

        /**
         * clicks the search icon button
         * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "click",
        value: function click() {
            return this._search.click();
        }

        /**
         * clicks the close indicator in the search bar to clear text
         * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "clear",
        value: function clear() {
            return this._search.clear();
        }

        /**
         * clicks on the search list overlay
         * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
         * @returns {Promise} resolves when the action completes
         */

    }, {
        key: "clickOut",
        value: function clickOut() {
            return this._search.clickOut();
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }
    }, {
        key: "searchPage",
        get: function get() {
            return this._search;
        }

        /**
         * whether the search bar is disabled
         * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
         * @returns {Promise<boolean>} true or false
         */

    }, {
        key: "isDisabled",
        get: function get() {
            return this._search.isDisabled;
        }

        /**
         * search list item
         * @memberOf module:MPageFusion/testing.composite.form.FormSearchPage
         * @returns {List<module:MPageFusion/testing.composite.search.SearchPage.searchList>} searchList
         */

    }, {
        key: "option",
        get: function get() {
            return this._search.option;
        }
    }]);

    return FormSearchPage;
}(_FormControl2.default);

exports.default = FormSearchPage;