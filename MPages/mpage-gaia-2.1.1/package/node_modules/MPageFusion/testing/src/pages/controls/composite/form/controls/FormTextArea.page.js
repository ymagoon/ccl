"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormControl = require("../FormControl.page");

var _FormControl2 = _interopRequireDefault(_FormControl);

var _TextArea = require("../../../atomic/textarea/TextArea.page");

var _TextArea2 = _interopRequireDefault(_TextArea);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormTextArea";

/**
 * The FormTextAreaPage class
 * @class module:MPageFusion/testing.composite.form.FormTextAreaPage
 *
 * @example
 * const formTextArea = new FormTextAreaPage(driver);
 * formTextArea.get("display")
 *     .then((display) => {
 *         assert(display).equals("Sample TextArea Label");
 *     });
 */

var FormTextAreaPage = function (_FormControlPage) {
    _inherits(FormTextAreaPage, _FormControlPage);

    function FormTextAreaPage(driver, options) {
        _classCallCheck(this, FormTextAreaPage);

        var _this = _possibleConstructorReturn(this, (FormTextAreaPage.__proto__ || Object.getPrototypeOf(FormTextAreaPage)).call(this, driver, options));

        _this._textarea = new _TextArea2.default(driver);
        return _this;
    }

    _createClass(FormTextAreaPage, [{
        key: "focus",


        /**
         * textArea field is focused
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function focus() {
            return this._textarea.focus();
        }

        /**
         * whether the textArea field is focused
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @returns {Promise<boolean>} isFocused
         */

    }, {
        key: "blur",


        /**
         * Blur event is triggerd on textArea field if it is already in focus
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function blur() {
            return this._textarea.blur();
        }

        /**
         * sendkeys to the textArea field
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @param {String} text - the input text
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "enterText",
        value: function enterText(text) {
            return this._textarea.enterText(text);
        }

        /**
         * clears text from the textArea field
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "clearText",
        value: function clearText() {
            return this._textarea.clearText();
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * value of the textArea field
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @returns {Promise<String>} value
         */

    }, {
        key: "value",
        get: function get() {
            return this._textarea.value;
        }

        /**
         * placeholder of the textArea field
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @returns {Promise<String>} placeholder
         */

    }, {
        key: "placeholder",
        get: function get() {
            return this._textarea.placeholder;
        }

        /**
         * whether the textArea field is read only
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @returns {Promise<boolean>} isReadOnly
         */

    }, {
        key: "isReadOnly",
        get: function get() {
            return this._textarea.isReadOnly;
        }

        /**
         * whether the textArea field is disabled
         * @memberOf module:MPageFusion/testing.composite.form.FormTextAreaPage
         * @returns {Promise<boolean>} isDisabled
         */

    }, {
        key: "isDisabled",
        get: function get() {
            return this._textarea.isDisabled;
        }
    }, {
        key: "isFocused",
        get: function get() {
            return this._textarea.isFocused;
        }
    }]);

    return FormTextAreaPage;
}(_FormControl2.default);

exports.default = FormTextAreaPage;