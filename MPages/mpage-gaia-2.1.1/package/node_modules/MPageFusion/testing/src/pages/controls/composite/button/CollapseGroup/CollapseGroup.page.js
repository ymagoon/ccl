"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _List = require("../../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _CollaspeGroupItem = require("./CollaspeGroupItem.page");

var _CollaspeGroupItem2 = _interopRequireDefault(_CollaspeGroupItem);

var _Menu = require("../../menu/Menu.page");

var _Menu2 = _interopRequireDefault(_Menu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-CollapseGroup";
var OVERLAY_SELECTOR = ".mpageui-Popup-layover";
var COLLAPSE_BUTTON = ".mpageui-CollapseGroup-more";
var ARIA_HIDDEN = "aria-hidden";

/**
 * The CollapseGroupPage class
 * @class module:MPageFusion/testing.composite.button.CollapseGroupPage
 *
 * @example
 * const collapseGroupPage = new CollapseGroupPage(driver);
 * collapseGroupPage.items(1).itemContentSelectorList;
 */

var CollapseGroupPage = function (_UIComponentPage) {
    _inherits(CollapseGroupPage, _UIComponentPage);

    function CollapseGroupPage() {
        _classCallCheck(this, CollapseGroupPage);

        return _possibleConstructorReturn(this, (CollapseGroupPage.__proto__ || Object.getPrototypeOf(CollapseGroupPage)).apply(this, arguments));
    }

    _createClass(CollapseGroupPage, [{
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * gets the items
         * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
         * @returns {List<CollapseGroupItem>} items
         */

    }, {
        key: "items",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _CollaspeGroupItem2.default,
                selectorList: this.selectorList
            });
        }

        /**
         * returns the collapse Menu
         * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
         * @returns {module:MPageFusion/testing.composite.menu.Menu} collapseGroupMenu
         */

    }, {
        key: "collapseGroupMenu",
        get: function get() {
            return new _Menu2.default(this.driver);
        }

        /**
         * opens the collapse Menu
         * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
         * @returns {Promise} resolves when the action completes
         */

    }, {
        key: "collapseGroupMenuOpen",
        get: function get() {
            return this.getNestedElement(COLLAPSE_BUTTON).then(function (element) {
                return element.click();
            }).then(function () {
                return true;
            }).catch(function () {
                return false;
            });
        }

        /**
         * closes the collapse Menu
         * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
         * @returns {Promise} resolves when the action completes
         */

    }, {
        key: "collapseGroupMenuClose",
        get: function get() {
            return this.driver.findElement(_seleniumWebdriver.By.css(OVERLAY_SELECTOR)).then(function (element) {
                return element.click();
            }).then(function () {
                return true;
            }).catch(function () {
                return false;
            });
        }

        /**
         * checks whether collapse group menu button is displayed
         * @memberOf module:MPageFusion/testing.composite.button.CollapseGroupPage
         * @returns {Promise<Boolean>} isCollapseGroupMenuButtonDisplayed
         */

    }, {
        key: "isCollapseGroupMenuButtonDisplayed",
        get: function get() {
            return this.getNestedElement(COLLAPSE_BUTTON).then(function (element) {
                return element.getAttribute(ARIA_HIDDEN);
            }).then(function (element) {
                return element === null;
            });
        }
    }]);

    return CollapseGroupPage;
}(_UIComponent2.default);

exports.default = CollapseGroupPage;