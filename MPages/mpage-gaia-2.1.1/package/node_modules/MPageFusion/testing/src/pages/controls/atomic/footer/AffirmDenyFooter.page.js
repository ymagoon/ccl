"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FooterBase = require("./FooterBase.page");

var _FooterBase2 = _interopRequireDefault(_FooterBase);

var _Button = require("../button/Button.page");

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DENY = ".mpageui-AffirmDenyFooter-deny";
var AFFIRM = ".mpageui-AffirmDenyFooter-affirm";

/**
 * The AffirmDenyFooterPage class
 * @class AffirmDenyFooterPage
 *
 * @example
 * const footer = new atomic.footer.AffirmDenyFooterPage(driver);
 * footer.affirmAction.get("display")
 * .then((display) => assert(display === "save"));
 */

var AffirmDenyFooterPage = function (_FooterBasePage) {
    _inherits(AffirmDenyFooterPage, _FooterBasePage);

    function AffirmDenyFooterPage() {
        _classCallCheck(this, AffirmDenyFooterPage);

        return _possibleConstructorReturn(this, (AffirmDenyFooterPage.__proto__ || Object.getPrototypeOf(AffirmDenyFooterPage)).apply(this, arguments));
    }

    _createClass(AffirmDenyFooterPage, [{
        key: "affirmAction",

        /**
         * the affirm button
         * @memberOf module:MPageFusion/testing.atomic.footer.AffirmDenyFooterPage
         * @returns {module:MPageFusion/testing.atomic.footer.AffirmDenyFooterPage.affirmAction} button
         */
        get: function get() {
            return new _Button2.default(this.driver, {
                selectorList: this.selectorList.concat(AFFIRM),
                useExactSelector: true // tells ButonPage not to look for .mpageui-Button and just use the selector provided
            });
        }

        /**
         * the deny button
         * @memberOf module:MPageFusion/testing.atomic.footer.AffirmDenyFooterPage
         * @returns {module:MPageFusion/testing.atomic.footer.AffirmDenyFooterPage.denyAction} button
         */

    }, {
        key: "denyAction",
        get: function get() {
            return new _Button2.default(this.driver, {
                selectorList: this.selectorList.concat(DENY),
                useExactSelector: true // tells ButonPage not to look for .mpageui-Button and just use the selector provided
            });
        }
    }]);

    return AffirmDenyFooterPage;
}(_FooterBase2.default);

exports.default = AffirmDenyFooterPage;