"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _List = require("../../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _SvgIcon = require("../../icon/svg/SvgIcon.page");

var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

var _cardHelper = require("../helper/cardHelper.page");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SELECTOR_LIST = {
    ROOT_SELECTOR: ".mpageui-Card-data-item--dualColumn",
    CONTENT_WRAPPER: ".mpageui-Card-data-content-wrapper",
    TRUNCATE_SELECTOR: ".mpageui-Card--truncate",
    ICON_SELECTOR: ".mpageui-Card-data-icon"
};

/**
 * The DualColumnSection class
 * @alias module:MPageFusion/test.atomic.card.CardPage.BodyItems.DualColumnSection
 * @class DualColumnSection
 * @private
 */

var DualColumnSection = function (_UIComponentPage) {
    _inherits(DualColumnSection, _UIComponentPage);

    function DualColumnSection() {
        _classCallCheck(this, DualColumnSection);

        return _possibleConstructorReturn(this, (DualColumnSection.__proto__ || Object.getPrototypeOf(DualColumnSection)).apply(this, arguments));
    }

    _createClass(DualColumnSection, [{
        key: "elementSelector",
        get: function get() {
            return SELECTOR_LIST.ROOT_SELECTOR;
        }

        /**
         * data content display
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems.DualColumnSection
         * @returns {Promise<string>} display
         */

    }, {
        key: "display",
        get: function get() {
            return (0, _cardHelper.displayHelper)(this);
        }

        /**
         * Whether or not to truncate all data points after one line
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems.DualColumnSection
         * @returns {Promise<Boolean>} true or false
         */

    }, {
        key: "truncate",
        get: function get() {
            return (0, _cardHelper.getElement)(this, "" + SELECTOR_LIST.CONTENT_WRAPPER + SELECTOR_LIST.TRUNCATE_SELECTOR).then(function (element) {
                return Boolean(element);
            });
        }

        /**
         * icon classname
         * @memberOf module:MPageFusion/test.atomic.card.CardPage.BodyItems.DualColumnSection
         * @returns {Promise<String>} className
         */

    }, {
        key: "iconClass",
        get: function get() {
            return (0, _List2.default)((0, _cardHelper.makeListHelper)(this, _SvgIcon2.default, this.selectorList.concat(SELECTOR_LIST.ICON_SELECTOR)));
        }
    }]);

    return DualColumnSection;
}(_UIComponent2.default);

exports.default = DualColumnSection;