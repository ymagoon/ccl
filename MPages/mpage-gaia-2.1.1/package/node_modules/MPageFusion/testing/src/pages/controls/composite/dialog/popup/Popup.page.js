"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _PopupAnchor = require("./PopupAnchor.page");

var _PopupAnchor2 = _interopRequireDefault(_PopupAnchor);

var _PopupPane = require("./PopupPane.page");

var _PopupPane2 = _interopRequireDefault(_PopupPane);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Popup";

/**
 * The PopupPage class
 * @class module:MPageFusion/testing.composite.dialog.PopupPage
 *
 * @example
 * const popup = new PopupPage(driver, "");
 * popup.open();
 *
 * const customPopupContent = new CustomPopupContentPage({
 *     selectorList: popup.pane.contentSelectorList
 * });
 */

var PopupPage = function (_UIComponentPage) {
    _inherits(PopupPage, _UIComponentPage);

    function PopupPage() {
        _classCallCheck(this, PopupPage);

        return _possibleConstructorReturn(this, (PopupPage.__proto__ || Object.getPrototypeOf(PopupPage)).apply(this, arguments));
    }

    _createClass(PopupPage, [{
        key: "open",


        /**
         * opens the popup
         * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
         * @returns {Promise} resolves when the action completes
         */
        value: function open() {
            var _this2 = this;

            return this.get("isOpen").then(function (isOpen) {
                if (isOpen) {
                    throw new Error("Popup is already open");
                }

                return _this2._anchor.click();
            });
        }

        /**
         * closes the popup
         * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
         * @returns {Promise} resolves when the action completes
         */

    }, {
        key: "close",
        value: function close() {
            var _this3 = this;

            return this.get("isOpen").then(function (isOpen) {
                if (!isOpen) {
                    throw new Error("Popup is already closed");
                }

                return _this3._pane.header.closeIcon.click();
            });
        }

        /**
         * clicks on the popup overlay
         * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
         * @returns {Promise} resolves when the action completes
         */

    }, {
        key: "clickOut",
        value: function clickOut() {
            var _this4 = this;

            return this.get("isOpen").then(function (isOpen) {
                if (!isOpen) {
                    throw new Error("Popup is closed");
                }

                return _this4._pane.overlay.click();
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }
    }, {
        key: "_anchor",
        get: function get() {
            return new _PopupAnchor2.default(this.driver, {
                selectorList: this.selectorList
            });
        }
    }, {
        key: "_pane",
        get: function get() {
            return new _PopupPane2.default(this.driver, {
                selectorList: this.selectorList
            });
        }

        /**
         * gets the popup pane content selector list
         * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
         * @returns {Array} selector list
         */

    }, {
        key: "contentSelectorList",
        get: function get() {
            return this._pane.contentSelectorList;
        }

        /**
         * gets the popup pane footer selector list
         * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
         * @returns {Array} selector list
         */

    }, {
        key: "footerSelectorList",
        get: function get() {
            return this._pane.footerSelectorList;
        }

        /**
         * gets the popup header display
         * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
         * @returns {Promise<string>} header display
         */

    }, {
        key: "headerDisplay",
        get: function get() {
            return this._pane.header.display;
        }

        /**
         * whether the popup is open
         * @memberOf module:MPageFusion/testing.composite.dialog.PopupPage
         * @returns {Promise<boolean>} isOpen
         */

    }, {
        key: "isOpen",
        get: function get() {
            return this._pane.isDisplayed();
        }
    }]);

    return PopupPage;
}(_UIComponent2.default);

exports.default = PopupPage;