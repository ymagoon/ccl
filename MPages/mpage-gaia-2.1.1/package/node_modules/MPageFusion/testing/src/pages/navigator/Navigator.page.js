"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _NavigatorContent = require("./NavigatorContent.page");

var _NavigatorContent2 = _interopRequireDefault(_NavigatorContent);

var _NavigatorTab = require("./NavigatorTab.page");

var _NavigatorTab2 = _interopRequireDefault(_NavigatorTab);

var _NavigatorUtils = require("./NavigatorUtils.page");

var _NavigatorUtils2 = _interopRequireDefault(_NavigatorUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Navigator";
var VIEW = ".vwp-views";

/**
 * The NavigatorPage class
 * @class module:MPageFusion/testing.atomic.NavigatorPage
 *
 * @example
 * const navigator = new NavigatorPage(driver);
 * navigator.selectComponent("problem-list");
 */

var NavigatorPage = function (_UIComponentPage) {
    _inherits(NavigatorPage, _UIComponentPage);

    function NavigatorPage(driver, args) {
        _classCallCheck(this, NavigatorPage);

        var _this = _possibleConstructorReturn(this, (NavigatorPage.__proto__ || Object.getPrototypeOf(NavigatorPage)).call(this, driver, args));

        _this._navigatorTab = new _NavigatorTab2.default(driver, {
            selectorList: _this.selectorList
        });

        _this._navigatorUtils = new _NavigatorUtils2.default(driver, {
            selectorList: _this.selectorList
        });
        return _this;
    }

    _createClass(NavigatorPage, [{
        key: "isNavigatorPinVisible",


        /**
         * returns a boolean indicating if navigator pin is visible (or) not
         * @returns {!promise.Thenable.<boolean>} true for display of navigator pin and false for non-display
         */
        value: function isNavigatorPinVisible() {
            var _this2 = this;

            return new _NavigatorContent2.default(this.driver).getRootElement().then(function () {
                return _this2.driver.findElement(_seleniumWebdriver.By.css("" + VIEW));
            }).then(function (element) {
                return element.getAttribute("class");
            }).then(function (className) {
                return className.includes("mpage-vwp-nav--pinned");
            }).catch(function () {
                return false;
            });
        }

        /**
         * This function makes a call to clickOnComponent when the navigator bar
         * is loaded, else calls loadNavigatorBar method to load the navigator and
         * selects the component based on the identifier
         * @param {string} identifier - The component identifier
         * @returns {WebElementPromise} Triggers call to appropriate method based on the visibility of navigator pin
         */

    }, {
        key: "selectComponent",
        value: function selectComponent(identifier) {
            var _this3 = this;

            // checking the status of Navigator Pin
            return this.isNavigatorPinVisible().then(function (status) {
                status ? _this3.clickOnComponent(identifier) : _this3.loadNavigatorBarAndSelectComponent(identifier); // eslint-disable-line no-unused-expressions
            });
        }

        /**
         * select the component from navigator bar by triggering click event
         * @param {string} identifier - The component identifier
         * @returns {WebElementPromise} selects the component based on the identifier
         */

    }, {
        key: "clickOnComponent",
        value: function clickOnComponent(identifier) {
            return this.driver.findElement(_seleniumWebdriver.By.css("[id^=drNavi" + identifier + "]")).click();
        }

        /**
         * This function loads the Navigator bar by clicking on the navigator tab and
         * clicking on pin icon, then selects the component based on the identifier.
         * @param {string} identifier - The component identifier
         * @returns {WebElementPromise} selects the component based on the identifier
         */

    }, {
        key: "loadNavigatorBarAndSelectComponent",
        value: function loadNavigatorBarAndSelectComponent(identifier) {
            var _this4 = this;

            return Promise.all([
            // perform mouseover on Navigator tab
            this._navigatorTab.getRootElement().then(function () {
                return _this4._navigatorTab.mouseMove();
            }),
            // click on the Navigator Pin icon
            this._navigatorUtils.getRootElement().then(function () {
                return _this4._navigatorUtils.button.click();
            })]).then(function () {
                return _this4.driver.findElement(_seleniumWebdriver.By.css("[id^=drNavi" + identifier + "]")).click();
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }
    }]);

    return NavigatorPage;
}(_UIComponent2.default);

exports.default = NavigatorPage;