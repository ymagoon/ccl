"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _List = require("../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _DataSectionRow = require("./DataSectionRow.page");

var _DataSectionRow2 = _interopRequireDefault(_DataSectionRow);

var _ContentPanel = require("../content-panel/ContentPanel.page");

var _ContentPanel2 = _interopRequireDefault(_ContentPanel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-DataSection";
/**
 * @class module:MPageFusion/testing.atomic.data.DataSectionPage
 *
 * @example
 * const dataSection = new DataSectionPage(driver);
 * dataSection.sections(0).headerDisplay gives header title of that particular data section
 * dataSection.sectionsBody(0).rows(0).cell(0).label gives label of first data section cell.
 * dataSection.sectionsBody(0).rows(0).cell(0).text gives text of first data section cell.
 * dataSection.sectionsBody(0).rows(0).cell(0).content gives selector List for content of first data section cell.
 *
 * For all header related data use exposed sections function.
 * For all body related data use exposed sectionsBody function.
 */

var DataSectionPage = function (_UIComponentPage) {
    _inherits(DataSectionPage, _UIComponentPage);

    function DataSectionPage() {
        _classCallCheck(this, DataSectionPage);

        return _possibleConstructorReturn(this, (DataSectionPage.__proto__ || Object.getPrototypeOf(DataSectionPage)).apply(this, arguments));
    }

    _createClass(DataSectionPage, [{
        key: "sectionsBody",


        /**
         * returns list of rows as an object.
         * Example usage - dataSection.sectionsBody(0).rows(1).cell(0).label
         * @memberOf module:MPageFusion/testing.atomic.header.ContentHeaderPage
         * @param {Number} index index to retrieve from the list of content panel
         * @returns {Object} row object which internally returns List of DataSectionRowPage
         */
        value: function sectionsBody(index) {
            return {
                rows: (0, _List2.default)({
                    list: this,
                    itemPage: _DataSectionRow2.default,
                    selectorList: this.sections(index).bodySelectorList
                })
            };
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * returns the nth content panel instance from the list of content panel.
         * @memberOf module:MPageFusion/testing.atomic.data.DataSectionPage
         * @returns {List<ContentPanelPage>} content panel page instance
         */

    }, {
        key: "sections",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _ContentPanel2.default,
                selectorList: this.selectorList
            });
        }
    }]);

    return DataSectionPage;
}(_UIComponent2.default);

exports.default = DataSectionPage;