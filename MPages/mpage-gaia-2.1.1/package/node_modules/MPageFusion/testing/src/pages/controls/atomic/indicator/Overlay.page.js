"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _LoadingSpinner = require("./LoadingSpinner.page");

var _LoadingSpinner2 = _interopRequireDefault(_LoadingSpinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NAMESPACE = ".mpageui-Overlay";

var ROOT_SELECTOR = NAMESPACE + "-wrapper";
var OVERLAY_MESSAGE = NAMESPACE + "-message";
var OVERLAY_CONTAINER = NAMESPACE + "-container";
var OVERLAY_FULLSCREEN = NAMESPACE + "-fullscreen";
var OVERLAY_SCROLL = NAMESPACE + "--scroll";
var OVERLAY_ITEMS = NAMESPACE + "-items";

var BACKGROUND_STYLES = {
    LIGHT: "light",
    DARK: "dark",
    CLEAR: "clear"
};

/**
 * The OverlayPage class
 * @class module:MPageFusion/testing.atomic.indicator.OverlayPage
 *
 * @example
 * const overlay = new OverlayPage(driver);
 */

var OverlayPage = function (_UIComponentPage) {
    _inherits(OverlayPage, _UIComponentPage);

    function OverlayPage() {
        _classCallCheck(this, OverlayPage);

        return _possibleConstructorReturn(this, (OverlayPage.__proto__ || Object.getPrototypeOf(OverlayPage)).apply(this, arguments));
    }

    _createClass(OverlayPage, [{
        key: "click",


        /**
         * clicks on the overlay
         * @memberOf module:MPageFusion/testing.atomic.indicator.OverlayPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function click() {
            return this.getRootElement().then(function (element) {
                return element.click();
            });
        }

        /**
         * returns true if the overlay is rendered relative to container, false otherwise
         * @memberOf module:MPageFusion/testing.atomic.indicator.OverlayPage
         * @returns {Boolean} true if overlay is container level
         */

    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * the overlay message
         * @memberOf module:MPageFusion/testing.atomic.indicator.OverlayPage
         * @returns {Promise<string>} display
         */

    }, {
        key: "message",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(OVERLAY_MESSAGE)).then(function (messageElement) {
                    return messageElement.getText();
                });
            });
        }

        /**
         * the overlay backgroundcolor verification
         * @memberOf module:MPageFusion/testing.atomic.indicator.OverlayPage
         * @returns {String} the background style or an empty string
         */

    }, {
        key: "backgroundStyle",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(OVERLAY_ITEMS)).then(function (itemsElement) {
                    return itemsElement.getAttribute("class");
                }).then(function (classNames) {
                    return Object.values(BACKGROUND_STYLES).find(function (style) {
                        return classNames.includes("mpageui-Overlay-background--" + style);
                    }) || "";
                });
            });
        }
    }, {
        key: "isContainerOverlay",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(OVERLAY_CONTAINER)).then(function () {
                    return true;
                }).catch(function () {
                    return false;
                });
            });
        }

        /**
         * returns true if overlay is rendered fullscreen, false otherwise
         * @memberOf module:MPageFusion/testing.atomic.indicator.OverlayPage
         * @returns {Boolean} true if overlay is fullscreen
         */

    }, {
        key: "isFullScreenOverlay",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(OVERLAY_FULLSCREEN)).then(function () {
                    return true;
                }).catch(function () {
                    return false;
                });
            });
        }

        /**
         * returns true if overlay is scrollable
         * @memberOf module:MPageFusion/testing.atomic.indicator.OverlayPage
         * @returns {Boolean} true if overlay message is scrollable
         */

    }, {
        key: "isMessageScrollable",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(OVERLAY_SCROLL)).then(function () {
                    return true;
                }).catch(function () {
                    return false;
                });
            });
        }

        /**
         * returns loading spinner page instance
         * @memberOf module:MPageFusion/testing.atomic.indicator.OverlayPage
         * @returns {LoadingSpinnerPage} loading spinner page instance
         */

    }, {
        key: "spinner",
        get: function get() {
            return new _LoadingSpinner2.default(this.driver, {
                selectorList: this.selectorList
            });
        }
    }]);

    return OverlayPage;
}(_UIComponent2.default);

exports.default = OverlayPage;