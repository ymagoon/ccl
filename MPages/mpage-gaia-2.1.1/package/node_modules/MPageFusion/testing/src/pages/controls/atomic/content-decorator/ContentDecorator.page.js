"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-ContentDecorator";
var IS_HOVERABLE = "mpageui-ContentDecorator--hover";
var LEFT_CONTENT = ".mpageui-ContentDecorator-side--left";
var RIGHT_CONTENT = ".mpageui-ContentDecorator-side--right";
var CENTER_CONTENT = ".mpageui-ContentDecorator-center";
var CENTER_CONTENT_PADDING = ".mpageui-ContentDecorator-center--padding";
var CONTENT_ALIGNMENT = "mpageui-ContentDecorator-side--vertical-align";
var IS_SELECTED = "is-selected";

var TYPES = {
    CENTER: "center",
    TOP: "top"
};

/**
 * The ContentDecoratorPage class
 * @class module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
 *
 * @example
 * const contentDecorator = new ContentDecoratorPage(driver);
 */

var ContentDecoratorPage = function (_UIComponentPage) {
    _inherits(ContentDecoratorPage, _UIComponentPage);

    function ContentDecoratorPage() {
        _classCallCheck(this, ContentDecoratorPage);

        return _possibleConstructorReturn(this, (ContentDecoratorPage.__proto__ || Object.getPrototypeOf(ContentDecoratorPage)).apply(this, arguments));
    }

    _createClass(ContentDecoratorPage, [{
        key: "click",


        /**
         * clicks the HideShow content decorator
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function click() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(CENTER_CONTENT)).then(function (contentElement) {
                    return contentElement.click();
                });
            });
        }

        /**
         * gets the content decorator left content selector list
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Array} selector list
         */

    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * whether or not the contentDecorator is hoverable
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Promise<boolean>} isHoverable
         */

    }, {
        key: "isHoverable",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return classNames.includes(IS_HOVERABLE);
            });
        }

        /**
         * Whether or not the content decorator is selected
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Promise<boolean>} isSelected
         */

    }, {
        key: "isSelected",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return classNames.includes(IS_SELECTED);
            });
        }

        /**
         * Whether or not the center content decorator padding is present
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Promise<boolean>} centerContentPadding
         */

    }, {
        key: "centerContentPadding",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(CENTER_CONTENT_PADDING)).then(function (paddingElement) {
                    return Boolean(paddingElement);
                }).catch(function () {
                    return false;
                });
            });
        }

        /**
         * the left UIComponent is top aligned or center aligned
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Promise<string>} leftContentVerticalAlign
         */

    }, {
        key: "leftContentVerticalAlign",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(LEFT_CONTENT)).then(function (leftElement) {
                    return leftElement.getAttribute("class");
                }).then(function (classNames) {
                    return Object.values(TYPES).find(function (type) {
                        return classNames.includes(CONTENT_ALIGNMENT + "-" + type);
                    }) || "";
                }).catch(function () {
                    return "Not Found";
                });
            });
        }

        /**
         * the right UIComponent is top aligned or center aligned
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Promise<string>} rightContentVerticalAlign
         */

    }, {
        key: "rightContentVerticalAlign",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(RIGHT_CONTENT)).then(function (leftElement) {
                    return leftElement.getAttribute("class");
                }).then(function (classNames) {
                    return Object.values(TYPES).find(function (type) {
                        return classNames.includes(CONTENT_ALIGNMENT + "-" + type);
                    }) || "";
                }).catch(function () {
                    return "Not Found";
                });
            });
        }

        /**
         * left section content space is there or not
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Promise<boolean>} addLeftContentSection
         */

    }, {
        key: "addLeftContentSection",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(LEFT_CONTENT)).then(function (leftElement) {
                    return leftElement.getAttribute("class");
                }).then(function (expandElement) {
                    return Boolean(expandElement);
                }).catch(function () {
                    return false;
                });
            });
        }
    }, {
        key: "leftContentSelectorList",
        get: function get() {
            return this.selectorList.concat(LEFT_CONTENT);
        }

        /**
         * gets the content decorator right content selector list
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Array} selector list
         */

    }, {
        key: "rightContentSelectorList",
        get: function get() {
            return this.selectorList.concat(LEFT_CONTENT);
        }

        /**
         * gets the content decorator center content selector list
         * @memberOf module:MPageFusion/testing.atomic.contentDecorator.ContentDecoratorPage
         * @returns {Array} selector list
         */

    }, {
        key: "centerContentSelectorList",
        get: function get() {
            return this.selectorList.concat(CENTER_CONTENT);
        }
    }]);

    return ContentDecoratorPage;
}(_UIComponent2.default);

exports.default = ContentDecoratorPage;