"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _SvgIcon = require("../icon/svg/SvgIcon.page");

var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

var _helpers = require("../icon/svg/helpers");

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-ClinicalBadge";
var DISPLAY = ".mpageui-ClinicalBadge-display";
var MODIFIED = ".mpageui-ClinicalBadge-modified-icon";
var ICON = ".mpageui-ClinicalBadge-icon";

/**
 * Criticality Types
 * @enum
 * @type {Object}
 * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
 */
var TYPES = {
    HIGH: "high",
    LOW: "low",
    CRITICAL: "critical",
    ABNORMAL: "abnormal"
};

/**
 * The ClinicalBadgePage class
 * @class module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
 *
 * @example
 * const clinicalBadge = new ClinicalBadgePage(driver);
 * clinicalBadge.get("type")
 *     .then((type) => {
 *         assert(type === ClinicalBadgePage.TYPES.ABNORMAL);
 *     });
 */

var ClinicalBadgePage = function (_UIComponentPage) {
    _inherits(ClinicalBadgePage, _UIComponentPage);

    function ClinicalBadgePage(driver, options) {
        _classCallCheck(this, ClinicalBadgePage);

        var _this = _possibleConstructorReturn(this, (ClinicalBadgePage.__proto__ || Object.getPrototypeOf(ClinicalBadgePage)).call(this, driver, options));

        _this._icon = new _SvgIcon2.default(driver, {
            selectorList: _this.selectorList.concat(ICON),
            useExactSelector: true
        });
        return _this;
    }

    _createClass(ClinicalBadgePage, [{
        key: "click",


        /**
         * clicks the clinical badge
         * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
         * @returns {Promise} resolves when the action completes
         */
        value: function click() {
            return this.getRootElement().then(function (element) {
                return element.click();
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * the clinical badge display
         * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
         * @returns {Promise<String>} display
         */

    }, {
        key: "display",
        get: function get() {
            return this.getNestedElement(DISPLAY).then(function (element) {
                return element.findElements(_seleniumWebdriver.By.css("span")).then(function (children) {
                    return children[0] ? children[0].getText() : element.getText();
                });
            });
        }

        /**
         * the clinical badge unit display
         * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
         * @returns {Promise<String>} unit
         */

    }, {
        key: "unit",
        get: function get() {
            return this.getNestedElement(DISPLAY).then(function (element) {
                return element.findElements(_seleniumWebdriver.By.css("span")).then(function (children) {
                    return children[1] ? children[1].getText() : "";
                });
            });
        }

        /**
         * the criticality type
         * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
         * @returns {Promise<string>} type
         */

    }, {
        key: "type",
        get: function get() {
            var _this2 = this;

            return this._icon.isDisplayed().then(function (isDisplayed) {
                return isDisplayed ? _this2._icon.get("type").then(function (type) {
                    return type !== _helpers.ICON_TYPES.MODIFIED && type && type.toLowerCase() || "";
                }) : "";
            });
        }

        /**
         * whether the clinical badge displays the modified indicator
         * @memberOf module:MPageFusion/testing.atomic.badge.ClinicalBadgePage
         * @returns {Promise<Boolean>} isModified
         */

    }, {
        key: "isModified",
        get: function get() {
            return this.getNestedElement(MODIFIED).then(function (element) {
                return Boolean(element);
            });
        }
    }]);

    return ClinicalBadgePage;
}(_UIComponent2.default);

exports.default = ClinicalBadgePage;


ClinicalBadgePage.TYPES = TYPES;