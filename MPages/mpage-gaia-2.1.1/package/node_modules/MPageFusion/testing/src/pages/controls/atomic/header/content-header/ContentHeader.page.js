"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _ContentHeaderAction = require("./ContentHeaderAction.page");

var _ContentHeaderAction2 = _interopRequireDefault(_ContentHeaderAction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-ContentHeader";
var HEADER_TITLE = ".mpageui-ContentHeader-title";
var CONTENT_HEADER_CONTENT = ".mpageui-ContentHeader-content";

/**
 * The ContentHeaderPage class
 * @class module:MPageFusion/testing.atomic.header.ContentHeaderPage
 *
 * @example
 * const contentHeader = new ContentHeaderPage(driver, "");
 */

var ContentHeaderPage = function (_UIComponentPage) {
    _inherits(ContentHeaderPage, _UIComponentPage);

    function ContentHeaderPage() {
        _classCallCheck(this, ContentHeaderPage);

        return _possibleConstructorReturn(this, (ContentHeaderPage.__proto__ || Object.getPrototypeOf(ContentHeaderPage)).apply(this, arguments));
    }

    _createClass(ContentHeaderPage, [{
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * the header display
         * @memberOf module:MPageFusion/testing.atomic.header.ContentHeaderPage
         * @returns {Promise<string>} display
         */

    }, {
        key: "display",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(HEADER_TITLE)).then(function (headerTitle) {
                    return headerTitle.getText();
                }).catch(function () {
                    return "";
                });
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.header.ContentHeaderPage
         * @returns {module:MPageFusion/testing.atomic.header.ContentHeaderPage.action} action
         */

    }, {
        key: "leftAction",
        get: function get() {
            return new _ContentHeaderAction2.default(this.driver, {
                selectorList: this.selectorList,
                index: 0
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.header.ContentHeaderPage
         * @returns {module:MPageFusion/testing.atomic.header.ContentHeaderPage.action} action
         */

    }, {
        key: "rightAction",
        get: function get() {
            return new _ContentHeaderAction2.default(this.driver, {
                selectorList: this.selectorList,
                index: 1
            });
        }

        /**
         * the content selector list
         * @memberOf module:MPageFusion/testing.atomic.header.ContentHeaderPage
         * @returns {Array<String>} content selectorList
         */

    }, {
        key: "contentSelectorList",
        get: function get() {
            return this.selectorList.concat(CONTENT_HEADER_CONTENT);
        }
    }]);

    return ContentHeaderPage;
}(_UIComponent2.default);

exports.default = ContentHeaderPage;