"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _TextBox = require("../../atomic/textbox/TextBox.page");

var _TextBox2 = _interopRequireDefault(_TextBox);

var _Button = require("../../atomic/button/Button.page");

var _Button2 = _interopRequireDefault(_Button);

var _SvgIcon = require("../../atomic/icon/svg/SvgIcon.page");

var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

var _SearchListItem = require("./SearchListItem.page");

var _SearchListItem2 = _interopRequireDefault(_SearchListItem);

var _List = require("../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _seleniumWebdriver = require("selenium-webdriver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Search";
var SEARCH_PANE_SELECTOR = ".mpageui-SearchPane";
var SEARCH_LIST_SELECTOR = ".mpageui-SearchList";
var SEARCH_TEXT_CLEAR_ICON_SELECTOR = ".mpageui-SearchTextClear-icon";
var SEARCH_PANE_OVERLAY_SELECTOR = ".mpageui-SearchPane-overlay";

/**
 * The SearchPage class
 * @class module:MPageFusion/test.composite.search.SearchPage
 *
 * @example
 * const search = new SearchPage(driver);
 * assert(search.placeholderText);
 */

var SearchPage = function (_UIComponentPage) {
    _inherits(SearchPage, _UIComponentPage);

    function SearchPage() {
        _classCallCheck(this, SearchPage);

        return _possibleConstructorReturn(this, (SearchPage.__proto__ || Object.getPrototypeOf(SearchPage)).apply(this, arguments));
    }

    _createClass(SearchPage, [{
        key: "enterText",


        /**
         * enters text to the search bar
         * @memberOf module:MPageFusion/test.composite.search.SearchPage
         * @param {String} text -the input text
         * @returns {Promise} resolves when the action is completed
         */
        value: function enterText(text) {
            return this._textBox.enterText(text);
        }

        /**
         * clears text from the search bar textbox
         * @memberOf module:MPageFusion/test.composite.search.SearchPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "clearText",
        value: function clearText() {
            return this._textBox.clearText();
        }

        /**
         * clicks the search icon button in the search bar
         * @memberOf module:MPageFusion/testing.composite.search.SearchPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "click",
        value: function click() {
            return this._button.click();
        }

        /**
         * focus the search bar
         * @memberOf module:MPageFusion/test.composite.search.SearchPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "focus",
        value: function focus() {
            return this._textBox.focus();
        }

        /**
         * Whether the search bar is blur
         * @memberOf module:MPageFusion/testing.composite.search.SearchPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "blur",
        value: function blur() {
            return this._textBox.blur();
        }

        /**
         * clicks the close indicator in the search bar to clear text
         * @memberOf module:MPageFusion/testing.composite.search.SearchPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "clear",
        value: function clear() {
            return this._icon.click();
        }

        /**
         * clicks on the search list overlay
         * @memberOf module:MPageFusion/testing.composite.search.SearchPage
         * @returns {Promise} resolves when the action completes
         */

    }, {
        key: "clickOut",
        value: function clickOut() {
            var _this2 = this;

            return this.get("isOpen").then(function (isOpen) {
                if (!isOpen) {
                    throw new Error("Search list is closed");
                }
                return _this2.getRootElement().then(function (element) {
                    return element.findElement(_seleniumWebdriver.By.css(SEARCH_PANE_OVERLAY_SELECTOR));
                }).then(function (element) {
                    return element.click();
                });
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }
    }, {
        key: "_button",
        get: function get() {
            return new _Button2.default(this.driver, {
                selectorList: this.selectorList
            });
        }
    }, {
        key: "_textBox",
        get: function get() {
            return new _TextBox2.default(this.driver, {
                selectorList: this.selectorList
            });
        }
    }, {
        key: "_icon",
        get: function get() {
            return new _SvgIcon2.default(this.driver, {
                selectorList: this.selectorList.concat(SEARCH_TEXT_CLEAR_ICON_SELECTOR)
            });
        }

        /**
         * whether the search bar is focused
         * @memberOf module:MPageFusion/testing.composite.search.SearchPage
         * @returns {Promise<boolean>} true or false
         */

    }, {
        key: "isFocused",
        get: function get() {
            return this._textBox.isFocused;
        }

        /**
         * returns placeholder text from the Search bar
         * @memberOf module:MPageFusion/test.composite.search.SearchPage
         * @returns {Promise<string>} placeholder text
         */

    }, {
        key: "placeholder",
        get: function get() {
            return this._textBox.placeholder;
        }

        /**
         * the value in the textbox
         * @memberOf module:MPageFusion/test.composite.search.SearchPage
         * @returns {Promise<String>} display text
         */

    }, {
        key: "value",
        get: function get() {
            return this._textBox.value;
        }

        /**
         * whether the search list is displayed
         * @memberOf module:MPageFusion/testing.composite.search.SearchPage
         * @returns {Promise<boolean>} true or false
         */

    }, {
        key: "isOpen",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(SEARCH_PANE_SELECTOR));
            }).then(function () {
                return true;
            }).catch(function () {
                return false;
            });
        }

        /**
         * returns the item from the search list based on option(index)
         * @memberOf module:MPageFusion/testing.composite.search.SearchPage
         * @returns {List<module:MPageFusion/testing.composite.search.SearchPage.searchList>} searchList
         */

    }, {
        key: "option",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _SearchListItem2.default,
                selectorList: this.selectorList,
                containerSelector: SEARCH_PANE_SELECTOR + " " + SEARCH_LIST_SELECTOR
            });
        }

        /**
         * whether the search bar is disabled
         * @memberOf module:MPageFusion/testing.composite.search.SearchPage
         * @returns {Promise<boolean>} true or false
         */

    }, {
        key: "isDisabled",
        get: function get() {
            return Promise.all([this._textBox.isDisabled, this._button.isDisabled]).then(function (results) {
                return Boolean(results[0] && results[1]);
            });
        }
    }]);

    return SearchPage;
}(_UIComponent2.default);

exports.default = SearchPage;