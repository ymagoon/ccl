"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormControl = require("../FormControl.page");

var _FormControl2 = _interopRequireDefault(_FormControl);

var _CheckboxGroup = require("../../../composite/select-group/CheckboxGroup.page");

var _CheckboxGroup2 = _interopRequireDefault(_CheckboxGroup);

var _helpers = require("../helpers");

var _ClinicalBadge = require("../../../atomic/badge/ClinicalBadge.page");

var _ClinicalBadge2 = _interopRequireDefault(_ClinicalBadge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormCheckboxGroup";

/**
 * The FormCheckboxGroupPage class
 * @class module:MPageFusion/testing.composite.form.FormCheckboxGroupPage
 *
 * @example
 * const formCheckboxGroup = new FormCheckboxGroupPage(driver);
 * formCheckboxGroup.get("display")
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormCheckboxGroupPage = function (_FormControlPage) {
    _inherits(FormCheckboxGroupPage, _FormControlPage);

    function FormCheckboxGroupPage(driver, options) {
        _classCallCheck(this, FormCheckboxGroupPage);

        var _this = _possibleConstructorReturn(this, (FormCheckboxGroupPage.__proto__ || Object.getPrototypeOf(FormCheckboxGroupPage)).call(this, driver, options));

        _this._checkboxGroup = new _CheckboxGroup2.default(driver, {
            selectorList: _this.selectorList.concat(_helpers.CLASSES.RIGHT_COLUMN)
        });
        return _this;
    }

    _createClass(FormCheckboxGroupPage, [{
        key: "toggle",


        /**
         * Toggles the checkbox at the specified index
         * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxGroupPage
         * @param {Number} index - the index of the checkbox to toggle
         * @returns {Promise} resolves when the action completes
         */
        value: function toggle(index) {
            return this._checkboxGroup.checkbox(index).click();
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * Gets the current values in the checkbox group
         * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxGroupPage
         * @returns {Promise<Array>} resolves with an array of objects { display, isSelected }
         */

    }, {
        key: "value",
        get: function get() {
            return this._checkboxGroup.checkbox.all().then(function (checkboxGroup) {
                return Promise.all(checkboxGroup.map(function (checkbox) {
                    return Promise.all([checkbox.get("display"), checkbox.get("isSelected")]).then(function (_ref) {
                        var _ref2 = _slicedToArray(_ref, 2),
                            display = _ref2[0],
                            isSelected = _ref2[1];

                        return { display: display, isSelected: isSelected };
                    });
                }));
            });
        }

        /**
         * returns the base CheckboxGroup page
         * @memberOf module:MPageFusion/testing.composite.form.FormCheckboxGroupPage
         * @returns {CheckboxGroupPage} checkboxGroupPage
         */

    }, {
        key: "checkboxGroup",
        get: function get() {
            return this._checkboxGroup;
        }
    }]);

    return FormCheckboxGroupPage;
}(_FormControl2.default);

exports.default = FormCheckboxGroupPage;


FormCheckboxGroupPage.CRITICALITY_TYPES = _ClinicalBadge2.default.TYPES;