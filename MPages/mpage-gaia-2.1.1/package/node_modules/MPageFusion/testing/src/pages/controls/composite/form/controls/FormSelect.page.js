"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _FormControl = require("../FormControl.page");

var _FormControl2 = _interopRequireDefault(_FormControl);

var _Select = require("../../../atomic/select/Select.Page");

var _Select2 = _interopRequireDefault(_Select);

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-FormSelect";

/**
 * The FormSelectPage class
 * @class module:MPageFusion/testing.composite.form.FormSelectPage
 *
 * @example
 * const formSelect = new FormSelectPage(driver);
 * formSelect.get("display")
 *     .then((display) => {
 *         assert(display === "Sample Label");
 *     });
 */

var FormSelectPage = function (_FormControlPage) {
    _inherits(FormSelectPage, _FormControlPage);

    function FormSelectPage(driver, options) {
        _classCallCheck(this, FormSelectPage);

        var _this = _possibleConstructorReturn(this, (FormSelectPage.__proto__ || Object.getPrototypeOf(FormSelectPage)).call(this, driver, options));

        _this._select = new _Select2.default(driver, {
            selectorList: _this.selectorList.concat(_helpers.CLASSES.RIGHT_COLUMN)
        });
        return _this;
    }

    _createClass(FormSelectPage, [{
        key: "selectByIndex",


        /**
         * Selects an option by the passed index
         * @param {String} index The index of the option element that needs to be selected.
         * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function selectByIndex(index) {
            return this._select.selectByIndex(index);
        }

        /**
         * Selects an option by the passed text
         * @param {String} text The text of the option element that needs to be selected.
         * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
         * @returns {Promise} resolves when the action is completed
         */

    }, {
        key: "selectByText",
        value: function selectByText(text) {
            return this._select.selectByText(text);
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * whether the select is disabled
         * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
         * @returns {Promise<boolean>} isDisabled
         */

    }, {
        key: "isDisabled",
        get: function get() {
            return this._select.get("isDisabled");
        }

        /**
         * Gets the currently selected option in the select control
         * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
         * @returns {Promise<String>} resolves with a string containing the current option
         */

    }, {
        key: "value",
        get: function get() {
            return this._select.get("option");
        }

        /**
         * Gets the available options in the select control
         * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
         * @returns {Promise<Array<String>>} resolves with an array of strings containing all available options
         */

    }, {
        key: "options",
        get: function get() {
            return this._select.get("options");
        }

        /**
         * returns the base Select page
         * @memberOf module:MPageFusion/testing.composite.form.FormSelectPage
         * @returns {SelectPage} selectPage
         */

    }, {
        key: "select",
        get: function get() {
            return this._select;
        }
    }]);

    return FormSelectPage;
}(_FormControl2.default);

exports.default = FormSelectPage;