"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _TableRow = require("./TableRow.page");

var _TableRow2 = _interopRequireDefault(_TableRow);

var _List = require("../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Table-sectionContainer";
var HEADER = ".mpageui-Table-sectionHeader";
var ROW_CONTAINER = ".mpageui-Table-rowContainer";

/**
 * The TableSubsectionPage class
 * @alias module:MPageFusion/testing.atomic.table.TablePage.subsection
 * @class TableSubsectionPage
 * @private
 */

var TableSubsection = function (_UIComponentPage) {
    _inherits(TableSubsection, _UIComponentPage);

    function TableSubsection() {
        _classCallCheck(this, TableSubsection);

        return _possibleConstructorReturn(this, (TableSubsection.__proto__ || Object.getPrototypeOf(TableSubsection)).apply(this, arguments));
    }

    _createClass(TableSubsection, [{
        key: "click",


        /**
         * clicks the subsection header
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage.subsection
         * @returns {Promise} - resolves when the action has completed
         */
        value: function click() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css("" + HEADER));
            }).then(function (element) {
                return element.click();
            });
        }

        /**
         * expands the subsection
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage.subsection
         * @returns {Promise} - resolves when the action has completed
         */

    }, {
        key: "expand",
        value: function expand() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css("" + HEADER));
            }).then(function (element) {
                return new Promise(function (resolve) {
                    element.getAttribute("class").then(function (classNames) {
                        if (!classNames.includes("closed")) {
                            throw new Error("Table subsection not collapsed");
                        }

                        resolve(element);
                    });
                });
            }).then(function (element) {
                return element.click();
            });
        }

        /**
         * collapses the subsection
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage.subsection
         * @returns {Promise} - resolves when the action has completed
         */

    }, {
        key: "collapse",
        value: function collapse() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css("" + HEADER));
            }).then(function (element) {
                return new Promise(function (resolve) {
                    element.getAttribute("class").then(function (classNames) {
                        if (classNames.includes("closed")) {
                            throw new Error("Table subsection not expanded");
                        }

                        resolve(element);
                    });
                });
            }).then(function (element) {
                return element.click();
            });
        }
    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * gets the subsection header display
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage.subsection
         * @returns {Promise<string>} headerDisplay
         */

    }, {
        key: "headerDisplay",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(HEADER + " > span"));
            }).then(function (element) {
                return element.getText();
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage.subsection
         * @returns {List<module:MPageFusion/testing.atomic.table.TablePage.row>} row
         */

    }, {
        key: "row",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _TableRow2.default,
                selectorList: this.selectorList,
                containerSelector: ROW_CONTAINER
            });
        }

        /**
         * the subsection data
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage.subsection
         * @returns {Promise<object>} data
         */

    }, {
        key: "data",
        get: function get() {
            var _this2 = this;

            return this.get("isExpanded").then(function (isExpanded) {
                if (!isExpanded) {
                    throw new Error("Cannot read data while there are collapsed subsections.");
                }

                return Promise.all([_this2.headerDisplay, _this2.row.all("data")]).then(function (_ref) {
                    var _ref2 = _slicedToArray(_ref, 2),
                        headerDisplay = _ref2[0],
                        rows = _ref2[1];

                    return { headerDisplay: headerDisplay, rows: rows };
                });
            });
        }

        /**
         * whether or not the subsection is expanded
         * @memberOf module:MPageFusion/testing.atomic.table.TablePage.subsection
         * @returns {Promise<boolean>} isExpanded
         */

    }, {
        key: "isExpanded",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css("" + HEADER));
            }).then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return !classNames.includes("closed");
            });
        }
    }]);

    return TableSubsection;
}(_UIComponent2.default);

exports.default = TableSubsection;