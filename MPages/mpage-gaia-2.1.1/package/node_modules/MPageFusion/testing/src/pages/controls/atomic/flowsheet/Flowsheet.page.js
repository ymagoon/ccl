"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _List = require("../../../helpers/List");

var _List2 = _interopRequireDefault(_List);

var _FlowsheetSubsection = require("./FlowsheetSubsection.page");

var _FlowsheetSubsection2 = _interopRequireDefault(_FlowsheetSubsection);

var _FlowsheetRow = require("./FlowsheetRow.page");

var _FlowsheetRow2 = _interopRequireDefault(_FlowsheetRow);

var _FlowsheetColumn = require("./FlowsheetColumn.page");

var _FlowsheetColumn2 = _interopRequireDefault(_FlowsheetColumn);

var _FlowsheetCompositeColumn = require("./FlowsheetCompositeColumn.page");

var _FlowsheetCompositeColumn2 = _interopRequireDefault(_FlowsheetCompositeColumn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Flowsheet-wrapper";
var BODY = ".mpageui-Flowsheet-body";
var ROW_CONTAINER = ".mpageui-Flowsheet-rowContainer";
var ROW = ".mpageui-Flowsheet-row";
var HEADER = ".mpageui-Flowsheet-header";
var COMPOSITE_HEADER = ".mpageui-Flowsheet-compositeHeader";
var SUBSECTION_HEADER = ".mpageui-Flowsheet-sectionHeader";

var HEADER_TYPE = {
    DEFAULT: 0,
    COMPOSITE: 1
};

/**
 * The FlowsheetPage class
 * @class module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage
 *
 * @example
 * const flowsheet = new FlowsheetPage(driver);
 * assert(flowsheet.subsection.count === 2);
 * flowsheet.subsection(0).row(4).click();
 */

var FlowsheetPage = function (_UIComponentPage) {
    _inherits(FlowsheetPage, _UIComponentPage);

    function FlowsheetPage(driver) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, FlowsheetPage);

        return _possibleConstructorReturn(this, (FlowsheetPage.__proto__ || Object.getPrototypeOf(FlowsheetPage)).call(this, driver, args.config && args.config.headerType ? args : Object.assign({}, args, { config: Object.assign({}, args.config, { headerType: HEADER_TYPE.DEFAULT }) })));
    }

    _createClass(FlowsheetPage, [{
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.Flowsheet.FlowsheetPage
         * @returns {List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.subsection>} subsection
         */

    }, {
        key: "subsection",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _FlowsheetSubsection2.default,
                selectorList: this.selectorList,
                containerSelector: BODY
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage
         * @returns {List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.row>} row
         */

    }, {
        key: "row",
        get: function get() {
            return (0, _List2.default)({
                list: this,
                itemPage: _FlowsheetRow2.default,
                selectorList: this.selectorList,
                containerSelector: ROW_CONTAINER
            });
        }

        /**
         * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage
         * @returns {
         * List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.column>|List<module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage.column>
         * } column
         */

    }, {
        key: "column",
        get: function get() {
            var listArgs = { list: this, selectorList: this.selectorList };
            switch (this.config.headerType) {
                case HEADER_TYPE.COMPOSITE:
                    /*
                     * Note: Using the offset because the first element in the Flowsheet composite header
                     * is a spacer that has a different class than the actual composite header items.
                     */
                    return (0, _List2.default)(Object.assign({}, listArgs, {
                        itemPage: _FlowsheetCompositeColumn2.default,
                        containerSelector: "" + COMPOSITE_HEADER,
                        offset: function offset(i) {
                            return i + 1;
                        }
                    }));
                default:
                    return (0, _List2.default)(Object.assign({}, listArgs, {
                        itemPage: _FlowsheetColumn2.default,
                        containerSelector: HEADER + " " + ROW
                    }));
            }
        }

        /**
         * the flowsheet data
         * @memberOf module:MPageFusion/testing.atomic.flowsheet.FlowsheetPage
         * @returns {Promise<object>} data
         */

    }, {
        key: "data",
        get: function get() {
            var _this2 = this;

            return this.getRootElement().then(function (element) {
                return (
                    // check to see if subsections are used
                    element.findElements(_seleniumWebdriver.By.css(SUBSECTION_HEADER)).then(function (headers) {
                        return headers.length ? Promise.all([_this2.subsection.all("data"), _this2.column.all("data")]).then(function (_ref) {
                            var _ref2 = _slicedToArray(_ref, 2),
                                subsections = _ref2[0],
                                columns = _ref2[1];

                            return { subsections: subsections, columns: columns };
                        }) : Promise.all([_this2.row.all("data"), _this2.column.all("data")]).then(function (_ref3) {
                            var _ref4 = _slicedToArray(_ref3, 2),
                                rows = _ref4[0],
                                columns = _ref4[1];

                            return { rows: rows, columns: columns };
                        });
                    })
                );
            });
        }
    }]);

    return FlowsheetPage;
}(_UIComponent2.default);

exports.default = FlowsheetPage;