"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require("selenium-webdriver");

var _UIComponent = require("../../../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-HideShow";
var HIDE_SHOW_ANCHOR = ".mpageui-HideShow-anchor";
var HIDE_SHOW_EXPAND = ".mpageui-HideShow-content";
var HIDE_SHOW_IS_ABOVE = "mpageui-HideShow--above";

/**
 * The HideShowPage class
 * @class module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
 *
 * @example
 * const hideShow = new HideShowPage(driver);
 */

var HideShowPage = function (_UIComponentPage) {
    _inherits(HideShowPage, _UIComponentPage);

    function HideShowPage() {
        _classCallCheck(this, HideShowPage);

        return _possibleConstructorReturn(this, (HideShowPage.__proto__ || Object.getPrototypeOf(HideShowPage)).apply(this, arguments));
    }

    _createClass(HideShowPage, [{
        key: "click",


        /**
         * clicks the HideShow Anchor
         * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
         * @returns {Promise} resolves when the action is completed
         */
        value: function click() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(HIDE_SHOW_ANCHOR)).then(function (anchor) {
                    return anchor.click();
                });
            });
        }

        /**
         * whether or not the hideShow is expanded
         * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
         * @returns {Promise<boolean>} isExpanded
         */

    }, {
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * The hideShow display
         * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
         * @returns {Promise<string>} display
         */

    }, {
        key: "display",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(HIDE_SHOW_ANCHOR)).then(function (anchor) {
                    return anchor.getText();
                });
            });
        }

        /**
         * whether the hideShow is disabled
         * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
         * @returns {Promise<boolean>} isDisabled
         */

    }, {
        key: "isDisabled",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(HIDE_SHOW_ANCHOR)).then(function (anchorElement) {
                    return anchorElement.getAttribute("disabled");
                }).then(function (attribute) {
                    return Boolean(attribute);
                });
            });
        }
    }, {
        key: "isExpanded",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.findElement(_seleniumWebdriver.By.css(HIDE_SHOW_EXPAND)).then(function (expandElement) {
                    return Boolean(expandElement);
                }).catch(function () {
                    return false;
                });
            });
        }

        /**
         * whether the toggle anchor is displayed above or below the hide/show content
         * @memberOf module:MPageFusion/testing.atomic.progressiveDisclosure.HideShowPage
         * @returns {Promise<boolean>} isAbove
         */

    }, {
        key: "isAbove",
        get: function get() {
            return this.getRootElement().then(function (element) {
                return element.getAttribute("class");
            }).then(function (classNames) {
                return classNames.includes(HIDE_SHOW_IS_ABOVE);
            });
        }
    }]);

    return HideShowPage;
}(_UIComponent2.default);

exports.default = HideShowPage;