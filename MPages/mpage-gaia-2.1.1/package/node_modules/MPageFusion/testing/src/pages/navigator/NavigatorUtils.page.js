"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UIComponent = require("../UIComponent.page");

var _UIComponent2 = _interopRequireDefault(_UIComponent);

var _Button = require("../controls/atomic/button/Button.page");

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROOT_SELECTOR = ".mpageui-Navigator-utils-pin";

/**
 * The NavigatorUtilsPage class
 * @class module:MPageFusion/testing.atomic.NavigatorUtilsPage
 * @private
 */

var NavigatorUtilsPage = function (_UIComponentPage) {
    _inherits(NavigatorUtilsPage, _UIComponentPage);

    function NavigatorUtilsPage() {
        _classCallCheck(this, NavigatorUtilsPage);

        return _possibleConstructorReturn(this, (NavigatorUtilsPage.__proto__ || Object.getPrototypeOf(NavigatorUtilsPage)).apply(this, arguments));
    }

    _createClass(NavigatorUtilsPage, [{
        key: "elementSelector",
        get: function get() {
            return ROOT_SELECTOR;
        }

        /**
         * @memberOf module:MPageFusion/testing.navigator.NavigatorUtilsPage
         * @returns {List<module:MPageFusion/testing.atomic.button.ButtonPage>} button
         */

    }, {
        key: "button",
        get: function get() {
            return new _Button2.default(this.driver, {
                selectorList: this.selectorList,
                useExactSelector: true
            });
        }
    }]);

    return NavigatorUtilsPage;
}(_UIComponent2.default);

exports.default = NavigatorUtilsPage;