/*! jQuery v1.8.2 jquery.com | jquery.org/license */
(function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(I,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:+d+""===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b==="data"&&p.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function ba(){return!1}function bb(){return!0}function bh(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function bi(a,b){do a=a[b];while(a&&a.nodeType!==1);return a}function bj(a,b,c){b=b||0;if(p.isFunction(b))return p.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return p.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=p.grep(a,function(a){return a.nodeType===1});if(be.test(b))return p.filter(b,d,!c);b=p.filter(b,d)}return p.grep(a,function(a,d){return p.inArray(a,b)>=0===c})}function bk(a){var b=bl.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function bC(a,b){return a.getElementsByTagName(b)[0]||a.appendChild(a.ownerDocument.createElement(b))}function bD(a,b){if(b.nodeType!==1||!p.hasData(a))return;var c,d,e,f=p._data(a),g=p._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;d<e;d++)p.event.add(b,c,h[c][d])}g.data&&(g.data=p.extend({},g.data))}function bE(a,b){var c;if(b.nodeType!==1)return;b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?(b.parentNode&&(b.outerHTML=a.outerHTML),p.support.html5Clone&&a.innerHTML&&!p.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):c==="input"&&bv.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text),b.removeAttribute(p.expando)}function bF(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bG(a){bv.test(a.type)&&(a.defaultChecked=a.checked)}function bY(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=bW.length;while(e--){b=bW[e]+c;if(b in a)return b}return d}function bZ(a,b){return a=b||a,p.css(a,"display")==="none"||!p.contains(a.ownerDocument,a)}function b$(a,b){var c,d,e=[],f=0,g=a.length;for(;f<g;f++){c=a[f];if(!c.style)continue;e[f]=p._data(c,"olddisplay"),b?(!e[f]&&c.style.display==="none"&&(c.style.display=""),c.style.display===""&&bZ(c)&&(e[f]=p._data(c,"olddisplay",cc(c.nodeName)))):(d=bH(c,"display"),!e[f]&&d!=="none"&&p._data(c,"olddisplay",d))}for(f=0;f<g;f++){c=a[f];if(!c.style)continue;if(!b||c.style.display==="none"||c.style.display==="")c.style.display=b?e[f]||"":"none"}return a}function b_(a,b,c){var d=bP.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function ca(a,b,c,d){var e=c===(d?"border":"content")?4:b==="width"?1:0,f=0;for(;e<4;e+=2)c==="margin"&&(f+=p.css(a,c+bV[e],!0)),d?(c==="content"&&(f-=parseFloat(bH(a,"padding"+bV[e]))||0),c!=="margin"&&(f-=parseFloat(bH(a,"border"+bV[e]+"Width"))||0)):(f+=parseFloat(bH(a,"padding"+bV[e]))||0,c!=="padding"&&(f+=parseFloat(bH(a,"border"+bV[e]+"Width"))||0));return f}function cb(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=!0,f=p.support.boxSizing&&p.css(a,"boxSizing")==="border-box";if(d<=0||d==null){d=bH(a,b);if(d<0||d==null)d=a.style[b];if(bQ.test(d))return d;e=f&&(p.support.boxSizingReliable||d===a.style[b]),d=parseFloat(d)||0}return d+ca(a,b,c||(f?"border":"content"),e)+"px"}function cc(a){if(bS[a])return bS[a];var b=p("<"+a+">").appendTo(e.body),c=b.css("display");b.remove();if(c==="none"||c===""){bI=e.body.appendChild(bI||p.extend(e.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!bJ||!bI.createElement)bJ=(bI.contentWindow||bI.contentDocument).document,bJ.write("<!doctype html><html><body>"),bJ.close();b=bJ.body.appendChild(bJ.createElement(a)),c=bH(b,"display"),e.body.removeChild(bI)}return bS[a]=c,c}function ci(a,b,c,d){var e;if(p.isArray(b))p.each(b,function(b,e){c||ce.test(a)?d(a,e):ci(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&p.type(b)==="object")for(e in b)ci(a+"["+e+"]",b[e],c,d);else d(a,b)}function cz(a){return function(b,c){typeof b!="string"&&(c=b,b="*");var d,e,f,g=b.toLowerCase().split(s),h=0,i=g.length;if(p.isFunction(c))for(;h<i;h++)d=g[h],f=/^\+/.test(d),f&&(d=d.substr(1)||"*"),e=a[d]=a[d]||[],e[f?"unshift":"push"](c)}}function cA(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h,i=a[f],j=0,k=i?i.length:0,l=a===cv;for(;j<k&&(l||!h);j++)h=i[j](c,d,e),typeof h=="string"&&(!l||g[h]?h=b:(c.dataTypes.unshift(h),h=cA(a,c,d,e,h,g)));return(l||!h)&&!g["*"]&&(h=cA(a,c,d,e,"*",g)),h}function cB(a,c){var d,e,f=p.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((f[d]?a:e||(e={}))[d]=c[d]);e&&p.extend(!0,a,e)}function cC(a,c,d){var e,f,g,h,i=a.contents,j=a.dataTypes,k=a.responseFields;for(f in k)f in d&&(c[k[f]]=d[f]);while(j[0]==="*")j.shift(),e===b&&(e=a.mimeType||c.getResponseHeader("content-type"));if(e)for(f in i)if(i[f]&&i[f].test(e)){j.unshift(f);break}if(j[0]in d)g=j[0];else{for(f in d){if(!j[0]||a.converters[f+" "+j[0]]){g=f;break}h||(h=f)}g=g||h}if(g)return g!==j[0]&&j.unshift(g),d[g]}function cD(a,b){var c,d,e,f,g=a.dataTypes.slice(),h=g[0],i={},j=0;a.dataFilter&&(b=a.dataFilter(b,a.dataType));if(g[1])for(c in a.converters)i[c.toLowerCase()]=a.converters[c];for(;e=g[++j];)if(e!=="*"){if(h!=="*"&&h!==e){c=i[h+" "+e]||i["* "+e];if(!c)for(d in i){f=d.split(" ");if(f[1]===e){c=i[h+" "+f[0]]||i["* "+f[0]];if(c){c===!0?c=i[d]:i[d]!==!0&&(e=f[0],g.splice(j--,0,e));break}}}if(c!==!0)if(c&&a["throws"])b=c(b);else try{b=c(b)}catch(k){return{state:"parsererror",error:c?k:"No conversion from "+h+" to "+e}}}h=e}return{state:"success",data:b}}function cL(){try{return new a.XMLHttpRequest}catch(b){}}function cM(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function cU(){return setTimeout(function(){cN=b},0),cN=p.now()}function cV(a,b){p.each(b,function(b,c){var d=(cT[b]||[]).concat(cT["*"]),e=0,f=d.length;for(;e<f;e++)if(d[e].call(a,b,c))return})}function cW(a,b,c){var d,e=0,f=0,g=cS.length,h=p.Deferred().always(function(){delete i.elem}),i=function(){var b=cN||cU(),c=Math.max(0,j.startTime+j.duration-b),d=1-(c/j.duration||0),e=0,f=j.tweens.length;for(;e<f;e++)j.tweens[e].run(d);return h.notifyWith(a,[j,d,c]),d<1&&f?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:p.extend({},b),opts:p.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:cN||cU(),duration:c.duration,tweens:[],createTween:function(b,c,d){var e=p.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(e),e},stop:function(b){var c=0,d=b?j.tweens.length:0;for(;c<d;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;cX(k,j.opts.specialEasing);for(;e<g;e++){d=cS[e].call(j,a,k,j.opts);if(d)return d}return cV(j,k),p.isFunction(j.opts.start)&&j.opts.start.call(a,j),p.fx.timer(p.extend(i,{anim:j,queue:j.opts.queue,elem:a})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}function cX(a,b){var c,d,e,f,g;for(c in a){d=p.camelCase(c),e=b[d],f=a[c],p.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=p.cssHooks[d];if(g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}}function cY(a,b,c){var d,e,f,g,h,i,j,k,l=this,m=a.style,n={},o=[],q=a.nodeType&&bZ(a);c.queue||(j=p._queueHooks(a,"fx"),j.unqueued==null&&(j.unqueued=0,k=j.empty.fire,j.empty.fire=function(){j.unqueued||k()}),j.unqueued++,l.always(function(){l.always(function(){j.unqueued--,p.queue(a,"fx").length||j.empty.fire()})})),a.nodeType===1&&("height"in b||"width"in b)&&(c.overflow=[m.overflow,m.overflowX,m.overflowY],p.css(a,"display")==="inline"&&p.css(a,"float")==="none"&&(!p.support.inlineBlockNeedsLayout||cc(a.nodeName)==="inline"?m.display="inline-block":m.zoom=1)),c.overflow&&(m.overflow="hidden",p.support.shrinkWrapBlocks||l.done(function(){m.overflow=c.overflow[0],m.overflowX=c.overflow[1],m.overflowY=c.overflow[2]}));for(d in b){f=b[d];if(cP.exec(f)){delete b[d];if(f===(q?"hide":"show"))continue;o.push(d)}}g=o.length;if(g){h=p._data(a,"fxshow")||p._data(a,"fxshow",{}),q?p(a).show():l.done(function(){p(a).hide()}),l.done(function(){var b;p.removeData(a,"fxshow",!0);for(b in n)p.style(a,b,n[b])});for(d=0;d<g;d++)e=o[d],i=l.createTween(e,q?h[e]:0),n[e]=h[e]||p.style(a,e),e in h||(h[e]=i.start,q&&(i.end=i.start,i.start=e==="width"||e==="height"?1:0))}}function cZ(a,b,c,d,e){return new cZ.prototype.init(a,b,c,d,e)}function c$(a,b){var c,d={height:a},e=0;b=b?1:0;for(;e<4;e+=2-b)c=bV[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function da(a){return p.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}var c,d,e=a.document,f=a.location,g=a.navigator,h=a.jQuery,i=a.$,j=Array.prototype.push,k=Array.prototype.slice,l=Array.prototype.indexOf,m=Object.prototype.toString,n=Object.prototype.hasOwnProperty,o=String.prototype.trim,p=function(a,b){return new p.fn.init(a,b,c)},q=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,r=/\S/,s=/\s+/,t=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,u=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,y=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,z=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,A=/^-ms-/,B=/-([\da-z])/gi,C=function(a,b){return(b+"").toUpperCase()},D=function(){e.addEventListener?(e.removeEventListener("DOMContentLoaded",D,!1),p.ready()):e.readyState==="complete"&&(e.detachEvent("onreadystatechange",D),p.ready())},E={};p.fn=p.prototype={constructor:p,init:function(a,c,d){var f,g,h,i;if(!a)return this;if(a.nodeType)return this.context=this[0]=a,this.length=1,this;if(typeof a=="string"){a.charAt(0)==="<"&&a.charAt(a.length-1)===">"&&a.length>=3?f=[null,a,null]:f=u.exec(a);if(f&&(f[1]||!c)){if(f[1])return c=c instanceof p?c[0]:c,i=c&&c.nodeType?c.ownerDocument||c:e,a=p.parseHTML(f[1],i,!0),v.test(f[1])&&p.isPlainObject(c)&&this.attr.call(a,c,!0),p.merge(this,a);g=e.getElementById(f[2]);if(g&&g.parentNode){if(g.id!==f[2])return d.find(a);this.length=1,this[0]=g}return this.context=e,this.selector=a,this}return!c||c.jquery?(c||d).find(a):this.constructor(c).find(a)}return p.isFunction(a)?d.ready(a):(a.selector!==b&&(this.selector=a.selector,this.context=a.context),p.makeArray(a,this))},selector:"",jquery:"1.8.2",length:0,size:function(){return this.length},toArray:function(){return k.call(this)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=p.merge(this.constructor(),a);return d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")"),d},each:function(a,b){return p.each(this,a,b)},ready:function(a){return p.ready.promise().done(a),this},eq:function(a){return a=+a,a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(k.apply(this,arguments),"slice",k.call(arguments).join(","))},map:function(a){return this.pushStack(p.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:j,sort:[].sort,splice:[].splice},p.fn.init.prototype=p.fn,p.extend=p.fn.extend=function(){var a,c,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;typeof h=="boolean"&&(k=h,h=arguments[1]||{},i=2),typeof h!="object"&&!p.isFunction(h)&&(h={}),j===i&&(h=this,--i);for(;i<j;i++)if((a=arguments[i])!=null)for(c in a){d=h[c],e=a[c];if(h===e)continue;k&&e&&(p.isPlainObject(e)||(f=p.isArray(e)))?(f?(f=!1,g=d&&p.isArray(d)?d:[]):g=d&&p.isPlainObject(d)?d:{},h[c]=p.extend(k,g,e)):e!==b&&(h[c]=e)}return h},p.extend({noConflict:function(b){return a.$===p&&(a.$=i),b&&a.jQuery===p&&(a.jQuery=h),p},isReady:!1,readyWait:1,holdReady:function(a){a?p.readyWait++:p.ready(!0)},ready:function(a){if(a===!0?--p.readyWait:p.isReady)return;if(!e.body)return setTimeout(p.ready,1);p.isReady=!0;if(a!==!0&&--p.readyWait>0)return;d.resolveWith(e,[p]),p.fn.trigger&&p(e).trigger("ready").off("ready")},isFunction:function(a){return p.type(a)==="function"},isArray:Array.isArray||function(a){return p.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):E[m.call(a)]||"object"},isPlainObject:function(a){if(!a||p.type(a)!=="object"||a.nodeType||p.isWindow(a))return!1;try{if(a.constructor&&!n.call(a,"constructor")&&!n.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||n.call(a,d)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},error:function(a){throw new Error(a)},parseHTML:function(a,b,c){var d;return!a||typeof a!="string"?null:(typeof b=="boolean"&&(c=b,b=0),b=b||e,(d=v.exec(a))?[b.createElement(d[1])]:(d=p.buildFragment([a],b,c?null:[]),p.merge([],(d.cacheable?p.clone(d.fragment):d.fragment).childNodes)))},parseJSON:function(b){if(!b||typeof b!="string")return null;b=p.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(w.test(b.replace(y,"@").replace(z,"]").replace(x,"")))return(new Function("return "+b))();p.error("Invalid JSON: "+b)},parseXML:function(c){var d,e;if(!c||typeof c!="string")return null;try{a.DOMParser?(e=new DOMParser,d=e.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(f){d=b}return(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&p.error("Invalid XML: "+c),d},noop:function(){},globalEval:function(b){b&&r.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(A,"ms-").replace(B,C)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,c,d){var e,f=0,g=a.length,h=g===b||p.isFunction(a);if(d){if(h){for(e in a)if(c.apply(a[e],d)===!1)break}else for(;f<g;)if(c.apply(a[f++],d)===!1)break}else if(h){for(e in a)if(c.call(a[e],e,a[e])===!1)break}else for(;f<g;)if(c.call(a[f],f,a[f++])===!1)break;return a},trim:o&&!o.call("﻿ ")?function(a){return a==null?"":o.call(a)}:function(a){return a==null?"":(a+"").replace(t,"")},makeArray:function(a,b){var c,d=b||[];return a!=null&&(c=p.type(a),a.length==null||c==="string"||c==="function"||c==="regexp"||p.isWindow(a)?j.call(d,a):p.merge(d,a)),d},inArray:function(a,b,c){var d;if(b){if(l)return l.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=c.length,e=a.length,f=0;if(typeof d=="number")for(;f<d;f++)a[e++]=c[f];else while(c[f]!==b)a[e++]=c[f++];return a.length=e,a},grep:function(a,b,c){var d,e=[],f=0,g=a.length;c=!!c;for(;f<g;f++)d=!!b(a[f],f),c!==d&&e.push(a[f]);return e},map:function(a,c,d){var e,f,g=[],h=0,i=a.length,j=a instanceof p||i!==b&&typeof i=="number"&&(i>0&&a[0]&&a[i-1]||i===0||p.isArray(a));if(j)for(;h<i;h++)e=c(a[h],h,d),e!=null&&(g[g.length]=e);else for(f in a)e=c(a[f],f,d),e!=null&&(g[g.length]=e);return g.concat.apply([],g)},guid:1,proxy:function(a,c){var d,e,f;return typeof c=="string"&&(d=a[c],c=a,a=d),p.isFunction(a)?(e=k.call(arguments,2),f=function(){return a.apply(c,e.concat(k.call(arguments)))},f.guid=a.guid=a.guid||p.guid++,f):b},access:function(a,c,d,e,f,g,h){var i,j=d==null,k=0,l=a.length;if(d&&typeof d=="object"){for(k in d)p.access(a,c,k,d[k],1,g,e);f=1}else if(e!==b){i=h===b&&p.isFunction(e),j&&(i?(i=c,c=function(a,b,c){return i.call(p(a),c)}):(c.call(a,e),c=null));if(c)for(;k<l;k++)c(a[k],d,i?e.call(a[k],k,c(a[k],d)):e,h);f=1}return f?a:j?c.call(a):l?c(a[0],d):g},now:function(){return(new Date).getTime()}}),p.ready.promise=function(b){if(!d){d=p.Deferred();if(e.readyState==="complete")setTimeout(p.ready,1);else if(e.addEventListener)e.addEventListener("DOMContentLoaded",D,!1),a.addEventListener("load",p.ready,!1);else{e.attachEvent("onreadystatechange",D),a.attachEvent("onload",p.ready);var c=!1;try{c=a.frameElement==null&&e.documentElement}catch(f){}c&&c.doScroll&&function g(){if(!p.isReady){try{c.doScroll("left")}catch(a){return setTimeout(g,50)}p.ready()}}()}}return d.promise(b)},p.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){E["[object "+b+"]"]=b.toLowerCase()}),c=p(e);var F={};p.Callbacks=function(a){a=typeof a=="string"?F[a]||G(a):p.extend({},a);var c,d,e,f,g,h,i=[],j=!a.once&&[],k=function(b){c=a.memory&&b,d=!0,h=f||0,f=0,g=i.length,e=!0;for(;i&&h<g;h++)if(i[h].apply(b[0],b[1])===!1&&a.stopOnFalse){c=!1;break}e=!1,i&&(j?j.length&&k(j.shift()):c?i=[]:l.disable())},l={add:function(){if(i){var b=i.length;(function d(b){p.each(b,function(b,c){var e=p.type(c);e==="function"&&(!a.unique||!l.has(c))?i.push(c):c&&c.length&&e!=="string"&&d(c)})})(arguments),e?g=i.length:c&&(f=b,k(c))}return this},remove:function(){return i&&p.each(arguments,function(a,b){var c;while((c=p.inArray(b,i,c))>-1)i.splice(c,1),e&&(c<=g&&g--,c<=h&&h--)}),this},has:function(a){return p.inArray(a,i)>-1},empty:function(){return i=[],this},disable:function(){return i=j=c=b,this},disabled:function(){return!i},lock:function(){return j=b,c||l.disable(),this},locked:function(){return!j},fireWith:function(a,b){return b=b||[],b=[a,b.slice?b.slice():b],i&&(!d||j)&&(e?j.push(b):k(b)),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!d}};return l},p.extend({Deferred:function(a){var b=[["resolve","done",p.Callbacks("once memory"),"resolved"],["reject","fail",p.Callbacks("once memory"),"rejected"],["notify","progress",p.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return p.Deferred(function(c){p.each(b,function(b,d){var f=d[0],g=a[b];e[d[1]](p.isFunction(g)?function(){var a=g.apply(this,arguments);a&&p.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f+"With"](this===e?c:this,[a])}:c[f])}),a=null}).promise()},promise:function(a){return a!=null?p.extend(a,d):d}},e={};return d.pipe=d.then,p.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[a^1][2].disable,b[2][2].lock),e[f[0]]=g.fire,e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=k.call(arguments),d=c.length,e=d!==1||a&&p.isFunction(a.promise)?d:0,f=e===1?a:p.Deferred(),g=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?k.call(arguments):d,c===h?f.notifyWith(b,c):--e||f.resolveWith(b,c)}},h,i,j;if(d>1){h=new Array(d),i=new Array(d),j=new Array(d);for(;b<d;b++)c[b]&&p.isFunction(c[b].promise)?c[b].promise().done(g(b,j,c)).fail(f.reject).progress(g(b,i,h)):--e}return e||f.resolveWith(j,c),f.promise()}}),p.support=function(){var b,c,d,f,g,h,i,j,k,l,m,n=e.createElement("div");n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",c=n.getElementsByTagName("*"),d=n.getElementsByTagName("a")[0],d.style.cssText="top:1px;float:left;opacity:.5";if(!c||!c.length)return{};f=e.createElement("select"),g=f.appendChild(e.createElement("option")),h=n.getElementsByTagName("input")[0],b={leadingWhitespace:n.firstChild.nodeType===3,tbody:!n.getElementsByTagName("tbody").length,htmlSerialize:!!n.getElementsByTagName("link").length,style:/top/.test(d.getAttribute("style")),hrefNormalized:d.getAttribute("href")==="/a",opacity:/^0.5/.test(d.style.opacity),cssFloat:!!d.style.cssFloat,checkOn:h.value==="on",optSelected:g.selected,getSetAttribute:n.className!=="t",enctype:!!e.createElement("form").enctype,html5Clone:e.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:e.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},h.checked=!0,b.noCloneChecked=h.cloneNode(!0).checked,f.disabled=!0,b.optDisabled=!g.disabled;try{delete n.test}catch(o){b.deleteExpando=!1}!n.addEventListener&&n.attachEvent&&n.fireEvent&&(n.attachEvent("onclick",m=function(){b.noCloneEvent=!1}),n.cloneNode(!0).fireEvent("onclick"),n.detachEvent("onclick",m)),h=e.createElement("input"),h.value="t",h.setAttribute("type","radio"),b.radioValue=h.value==="t",h.setAttribute("checked","checked"),h.setAttribute("name","t"),n.appendChild(h),i=e.createDocumentFragment(),i.appendChild(n.lastChild),b.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=h.checked,i.removeChild(h),i.appendChild(n);if(n.attachEvent)for(k in{submit:!0,change:!0,focusin:!0})j="on"+k,l=j in n,l||(n.setAttribute(j,"return;"),l=typeof n[j]=="function"),b[k+"Bubbles"]=l;return p(function(){var c,d,f,g,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",i=e.getElementsByTagName("body")[0];if(!i)return;c=e.createElement("div"),c.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",i.insertBefore(c,i.firstChild),d=e.createElement("div"),c.appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",f=d.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",l=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",b.reliableHiddenOffsets=l&&f[0].offsetHeight===0,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",b.boxSizing=d.offsetWidth===4,b.doesNotIncludeMarginInBodyOffset=i.offsetTop!==1,a.getComputedStyle&&(b.pixelPosition=(a.getComputedStyle(d,null)||{}).top!=="1%",b.boxSizingReliable=(a.getComputedStyle(d,null)||{width:"4px"}).width==="4px",g=e.createElement("div"),g.style.cssText=d.style.cssText=h,g.style.marginRight=g.style.width="0",d.style.width="1px",d.appendChild(g),b.reliableMarginRight=!parseFloat((a.getComputedStyle(g,null)||{}).marginRight)),typeof d.style.zoom!="undefined"&&(d.innerHTML="",d.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",b.inlineBlockNeedsLayout=d.offsetWidth===3,d.style.display="block",d.style.overflow="visible",d.innerHTML="<div></div>",d.firstChild.style.width="5px",b.shrinkWrapBlocks=d.offsetWidth!==3,c.style.zoom=1),i.removeChild(c),c=d=f=g=null}),i.removeChild(n),c=d=f=g=h=i=n=null,b}();var H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,I=/([A-Z])/g;p.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(p.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){return a=a.nodeType?p.cache[a[p.expando]]:a[p.expando],!!a&&!K(a)},data:function(a,c,d,e){if(!p.acceptData(a))return;var f,g,h=p.expando,i=typeof c=="string",j=a.nodeType,k=j?p.cache:a,l=j?a[h]:a[h]&&h;if((!l||!k[l]||!e&&!k[l].data)&&i&&d===b)return;l||(j?a[h]=l=p.deletedIds.pop()||p.guid++:l=h),k[l]||(k[l]={},j||(k[l].toJSON=p.noop));if(typeof c=="object"||typeof c=="function")e?k[l]=p.extend(k[l],c):k[l].data=p.extend(k[l].data,c);return f=k[l],e||(f.data||(f.data={}),f=f.data),d!==b&&(f[p.camelCase(c)]=d),i?(g=f[c],g==null&&(g=f[p.camelCase(c)])):g=f,g},removeData:function(a,b,c){if(!p.acceptData(a))return;var d,e,f,g=a.nodeType,h=g?p.cache:a,i=g?a[p.expando]:p.expando;if(!h[i])return;if(b){d=c?h[i]:h[i].data;if(d){p.isArray(b)||(b in d?b=[b]:(b=p.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,f=b.length;e<f;e++)delete d[b[e]];if(!(c?K:p.isEmptyObject)(d))return}}if(!c){delete h[i].data;if(!K(h[i]))return}g?p.cleanData([a],!0):p.support.deleteExpando||h!=h.window?delete h[i]:h[i]=null},_data:function(a,b,c){return p.data(a,b,c,!0)},acceptData:function(a){var b=a.nodeName&&p.noData[a.nodeName.toLowerCase()];return!b||b!==!0&&a.getAttribute("classid")===b}}),p.fn.extend({data:function(a,c){var d,e,f,g,h,i=this[0],j=0,k=null;if(a===b){if(this.length){k=p.data(i);if(i.nodeType===1&&!p._data(i,"parsedAttrs")){f=i.attributes;for(h=f.length;j<h;j++)g=f[j].name,g.indexOf("data-")||(g=p.camelCase(g.substring(5)),J(i,g,k[g]));p._data(i,"parsedAttrs",!0)}}return k}return typeof a=="object"?this.each(function(){p.data(this,a)}):(d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!",p.access(this,function(c){if(c===b)return k=this.triggerHandler("getData"+e,[d[0]]),k===b&&i&&(k=p.data(i,a),k=J(i,a,k)),k===b&&d[1]?this.data(d[0]):k;d[1]=c,this.each(function(){var b=p(this);b.triggerHandler("setData"+e,d),p.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1))},removeData:function(a){return this.each(function(){p.removeData(this,a)})}}),p.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=p._data(a,b),c&&(!d||p.isArray(c)?d=p._data(a,b,p.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=p.queue(a,b),d=c.length,e=c.shift(),f=p._queueHooks(a,b),g=function(){p.dequeue(a,b)};e==="inprogress"&&(e=c.shift(),d--),e&&(b==="fx"&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return p._data(a,c)||p._data(a,c,{empty:p.Callbacks("once memory").add(function(){p.removeData(a,b+"queue",!0),p.removeData(a,c,!0)})})}}),p.fn.extend({queue:function(a,c){var d=2;return typeof a!="string"&&(c=a,a="fx",d--),arguments.length<d?p.queue(this[0],a):c===b?this:this.each(function(){var b=p.queue(this,a,c);p._queueHooks(this,a),a==="fx"&&b[0]!=="inprogress"&&p.dequeue(this,a)})},dequeue:function(a){return this.each(function(){p.dequeue(this,a)})},delay:function(a,b){return a=p.fx?p.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){var d,e=1,f=p.Deferred(),g=this,h=this.length,i=function(){--e||f.resolveWith(g,[g])};typeof a!="string"&&(c=a,a=b),a=a||"fx";while(h--)d=p._data(g[h],a+"queueHooks"),d&&d.empty&&(e++,d.empty.add(i));return i(),f.promise(c)}});var L,M,N,O=/[\t\r\n]/g,P=/\r/g,Q=/^(?:button|input)$/i,R=/^(?:button|input|object|select|textarea)$/i,S=/^a(?:rea|)$/i,T=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,U=p.support.getSetAttribute;p.fn.extend({attr:function(a,b){return p.access(this,p.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){p.removeAttr(this,a)})},prop:function(a,b){return p.access(this,p.prop,a,b,arguments.length>1)},removeProp:function(a){return a=p.propFix[a]||a,this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,f,g,h;if(p.isFunction(a))return this.each(function(b){p(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(s);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{f=" "+e.className+" ";for(g=0,h=b.length;g<h;g++)f.indexOf(" "+b[g]+" ")<0&&(f+=b[g]+" ");e.className=p.trim(f)}}}return this},removeClass:function(a){var c,d,e,f,g,h,i;if(p.isFunction(a))return this.each(function(b){p(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(s);for(h=0,i=this.length;h<i;h++){e=this[h];if(e.nodeType===1&&e.className){d=(" "+e.className+" ").replace(O," ");for(f=0,g=c.length;f<g;f++)while(d.indexOf(" "+c[f]+" ")>=0)d=d.replace(" "+c[f]+" "," ");e.className=a?p.trim(d):""}}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";return p.isFunction(a)?this.each(function(c){p(this).toggleClass(a.call(this,c,this.className,b),b)}):this.each(function(){if(c==="string"){var e,f=0,g=p(this),h=b,i=a.split(s);while(e=i[f++])h=d?h:!g.hasClass(e),g[h?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&p._data(this,"__className__",this.className),this.className=this.className||a===!1?"":p._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(O," ").indexOf(b)>=0)return!0;return!1},val:function(a){var c,d,e,f=this[0];if(!arguments.length){if(f)return c=p.valHooks[f.type]||p.valHooks[f.nodeName.toLowerCase()],c&&"get"in c&&(d=c.get(f,"value"))!==b?d:(d=f.value,typeof d=="string"?d.replace(P,""):d==null?"":d);return}return e=p.isFunction(a),this.each(function(d){var f,g=p(this);if(this.nodeType!==1)return;e?f=a.call(this,d,g.val()):f=a,f==null?f="":typeof f=="number"?f+="":p.isArray(f)&&(f=p.map(f,function(a){return a==null?"":a+""})),c=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,f,"value")===b)this.value=f})}}),p.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,f=a.selectedIndex,g=[],h=a.options,i=a.type==="select-one";if(f<0)return null;c=i?f:0,d=i?f+1:h.length;for(;c<d;c++){e=h[c];if(e.selected&&(p.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!p.nodeName(e.parentNode,"optgroup"))){b=p(e).val();if(i)return b;g.push(b)}}return i&&!g.length&&h.length?p(h[f]).val():g},set:function(a,b){var c=p.makeArray(b);return p(a).find("option").each(function(){this.selected=p.inArray(p(this).val(),c)>=0}),c.length||(a.selectedIndex=-1),c}}},attrFn:{},attr:function(a,c,d,e){var f,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return;if(e&&p.isFunction(p.fn[c]))return p(a)[c](d);if(typeof a.getAttribute=="undefined")return p.prop(a,c,d);h=i!==1||!p.isXMLDoc(a),h&&(c=c.toLowerCase(),g=p.attrHooks[c]||(T.test(c)?M:L));if(d!==b){if(d===null){p.removeAttr(a,c);return}return g&&"set"in g&&h&&(f=g.set(a,d,c))!==b?f:(a.setAttribute(c,d+""),d)}return g&&"get"in g&&h&&(f=g.get(a,c))!==null?f:(f=a.getAttribute(c),f===null?b:f)},removeAttr:function(a,b){var c,d,e,f,g=0;if(b&&a.nodeType===1){d=b.split(s);for(;g<d.length;g++)e=d[g],e&&(c=p.propFix[e]||e,f=T.test(e),f||p.attr(a,e,""),a.removeAttribute(U?e:c),f&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(Q.test(a.nodeName)&&a.parentNode)p.error("type property can't be changed");else if(!p.support.radioValue&&b==="radio"&&p.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}},value:{get:function(a,b){return L&&p.nodeName(a,"button")?L.get(a,b):b in a?a.value:null},set:function(a,b,c){if(L&&p.nodeName(a,"button"))return L.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,f,g,h=a.nodeType;if(!a||h===3||h===8||h===2)return;return g=h!==1||!p.isXMLDoc(a),g&&(c=p.propFix[c]||c,f=p.propHooks[c]),d!==b?f&&"set"in f&&(e=f.set(a,d,c))!==b?e:a[c]=d:f&&"get"in f&&(e=f.get(a,c))!==null?e:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):R.test(a.nodeName)||S.test(a.nodeName)&&a.href?0:b}}}}),M={get:function(a,c){var d,e=p.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;return b===!1?p.removeAttr(a,c):(d=p.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase())),c}},U||(N={name:!0,id:!0,coords:!0},L=p.valHooks.button={get:function(a,c){var d;return d=a.getAttributeNode(c),d&&(N[c]?d.value!=="":d.specified)?d.value:b},set:function(a,b,c){var d=a.getAttributeNode(c);return d||(d=e.createAttribute(c),a.setAttributeNode(d)),d.value=b+""}},p.each(["width","height"],function(a,b){p.attrHooks[b]=p.extend(p.attrHooks[b],{set:function(a,c){if(c==="")return a.setAttribute(b,"auto"),c}})}),p.attrHooks.contenteditable={get:L.get,set:function(a,b,c){b===""&&(b="false"),L.set(a,b,c)}}),p.support.hrefNormalized||p.each(["href","src","width","height"],function(a,c){p.attrHooks[c]=p.extend(p.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),p.support.style||(p.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=b+""}}),p.support.optSelected||(p.propHooks.selected=p.extend(p.propHooks.selected,{get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}})),p.support.enctype||(p.propFix.enctype="encoding"),p.support.checkOn||p.each(["radio","checkbox"],function(){p.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),p.each(["radio","checkbox"],function(){p.valHooks[this]=p.extend(p.valHooks[this],{set:function(a,b){if(p.isArray(b))return a.checked=p.inArray(p(a).val(),b)>=0}})});var V=/^(?:textarea|input|select)$/i,W=/^([^\.]*|)(?:\.(.+)|)$/,X=/(?:^|\s)hover(\.\S+|)\b/,Y=/^key/,Z=/^(?:mouse|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=function(a){return p.event.special.hover?a:a.replace(X,"mouseenter$1 mouseleave$1")};p.event={add:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,q,r;if(a.nodeType===3||a.nodeType===8||!c||!d||!(g=p._data(a)))return;d.handler&&(o=d,d=o.handler,f=o.selector),d.guid||(d.guid=p.guid++),i=g.events,i||(g.events=i={}),h=g.handle,h||(g.handle=h=function(a){return typeof p!="undefined"&&(!a||p.event.triggered!==a.type)?p.event.dispatch.apply(h.elem,arguments):b},h.elem=a),c=p.trim(_(c)).split(" ");for(j=0;j<c.length;j++){k=W.exec(c[j])||[],l=k[1],m=(k[2]||"").split(".").sort(),r=p.event.special[l]||{},l=(f?r.delegateType:r.bindType)||l,r=p.event.special[l]||{},n=p.extend({type:l,origType:k[1],data:e,handler:d,guid:d.guid,selector:f,needsContext:f&&p.expr.match.needsContext.test(f),namespace:m.join(".")},o),q=i[l];if(!q){q=i[l]=[],q.delegateCount=0;if(!r.setup||r.setup.call(a,e,m,h)===!1)a.addEventListener?a.addEventListener(l,h,!1):a.attachEvent&&a.attachEvent("on"+l,h)}r.add&&(r.add.call(a,n),n.handler.guid||(n.handler.guid=d.guid)),f?q.splice(q.delegateCount++,0,n):q.push(n),p.event.global[l]=!0}a=null},global:{},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,q,r=p.hasData(a)&&p._data(a);if(!r||!(m=r.events))return;b=p.trim(_(b||"")).split(" ");for(f=0;f<b.length;f++){g=W.exec(b[f])||[],h=i=g[1],j=g[2];if(!h){for(h in m)p.event.remove(a,h+b[f],c,d,!0);continue}n=p.event.special[h]||{},h=(d?n.delegateType:n.bindType)||h,o=m[h]||[],k=o.length,j=j?new RegExp("(^|\\.)"+j.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(l=0;l<o.length;l++)q=o[l],(e||i===q.origType)&&(!c||c.guid===q.guid)&&(!j||j.test(q.namespace))&&(!d||d===q.selector||d==="**"&&q.selector)&&(o.splice(l--,1),q.selector&&o.delegateCount--,n.remove&&n.remove.call(a,q));o.length===0&&k!==o.length&&((!n.teardown||n.teardown.call(a,j,r.handle)===!1)&&p.removeEvent(a,h,r.handle),delete m[h])}p.isEmptyObject(m)&&(delete r.handle,p.removeData(a,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,f,g){if(!f||f.nodeType!==3&&f.nodeType!==8){var h,i,j,k,l,m,n,o,q,r,s=c.type||c,t=[];if($.test(s+p.event.triggered))return;s.indexOf("!")>=0&&(s=s.slice(0,-1),i=!0),s.indexOf(".")>=0&&(t=s.split("."),s=t.shift(),t.sort());if((!f||p.event.customEvent[s])&&!p.event.global[s])return;c=typeof c=="object"?c[p.expando]?c:new p.Event(s,c):new p.Event(s),c.type=s,c.isTrigger=!0,c.exclusive=i,c.namespace=t.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+t.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,m=s.indexOf(":")<0?"on"+s:"";if(!f){h=p.cache;for(j in h)h[j].events&&h[j].events[s]&&p.event.trigger(c,d,h[j].handle.elem,!0);return}c.result=b,c.target||(c.target=f),d=d!=null?p.makeArray(d):[],d.unshift(c),n=p.event.special[s]||{};if(n.trigger&&n.trigger.apply(f,d)===!1)return;q=[[f,n.bindType||s]];if(!g&&!n.noBubble&&!p.isWindow(f)){r=n.delegateType||s,k=$.test(r+s)?f:f.parentNode;for(l=f;k;k=k.parentNode)q.push([k,r]),l=k;l===(f.ownerDocument||e)&&q.push([l.defaultView||l.parentWindow||a,r])}for(j=0;j<q.length&&!c.isPropagationStopped();j++)k=q[j][0],c.type=q[j][1],o=(p._data(k,"events")||{})[c.type]&&p._data(k,"handle"),o&&o.apply(k,d),o=m&&k[m],o&&p.acceptData(k)&&o.apply&&o.apply(k,d)===!1&&c.preventDefault();return c.type=s,!g&&!c.isDefaultPrevented()&&(!n._default||n._default.apply(f.ownerDocument,d)===!1)&&(s!=="click"||!p.nodeName(f,"a"))&&p.acceptData(f)&&m&&f[s]&&(s!=="focus"&&s!=="blur"||c.target.offsetWidth!==0)&&!p.isWindow(f)&&(l=f[m],l&&(f[m]=null),p.event.triggered=s,f[s](),p.event.triggered=b,l&&(f[m]=l)),c.result}return},dispatch:function(c){c=p.event.fix(c||a.event);var d,e,f,g,h,i,j,l,m,n,o=(p._data(this,"events")||{})[c.type]||[],q=o.delegateCount,r=k.call(arguments),s=!c.exclusive&&!c.namespace,t=p.event.special[c.type]||{},u=[];r[0]=c,c.delegateTarget=this;if(t.preDispatch&&t.preDispatch.call(this,c)===!1)return;if(q&&(!c.button||c.type!=="click"))for(f=c.target;f!=this;f=f.parentNode||this)if(f.disabled!==!0||c.type!=="click"){h={},j=[];for(d=0;d<q;d++)l=o[d],m=l.selector,h[m]===b&&(h[m]=l.needsContext?p(m,this).index(f)>=0:p.find(m,this,null,[f]).length),h[m]&&j.push(l);j.length&&u.push({elem:f,matches:j})}o.length>q&&u.push({elem:this,matches:o.slice(q)});for(d=0;d<u.length&&!c.isPropagationStopped();d++){i=u[d],c.currentTarget=i.elem;for(e=0;e<i.matches.length&&!c.isImmediatePropagationStopped();e++){l=i.matches[e];if(s||!c.namespace&&!l.namespace||c.namespace_re&&c.namespace_re.test(l.namespace))c.data=l.data,c.handleObj=l,g=((p.event.special[l.origType]||{}).handle||l.handler).apply(i.elem,r),g!==b&&(c.result=g,g===!1&&(c.preventDefault(),c.stopPropagation()))}}return t.postDispatch&&t.postDispatch.call(this,c),c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,c){var d,f,g,h=c.button,i=c.fromElement;return a.pageX==null&&c.clientX!=null&&(d=a.target.ownerDocument||e,f=d.documentElement,g=d.body,a.pageX=c.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=c.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?c.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0),a}},fix:function(a){if(a[p.expando])return a;var b,c,d=a,f=p.event.fixHooks[a.type]||{},g=f.props?this.props.concat(f.props):this.props;a=p.Event(d);for(b=g.length;b;)c=g[--b],a[c]=d[c];return a.target||(a.target=d.srcElement||e),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,f.filter?f.filter(a,d):a},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){p.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=p.extend(new p.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?p.event.trigger(e,null,b):p.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},p.event.handle=p.event.dispatch,p.removeEvent=e.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]=="undefined"&&(a[d]=null),a.detachEvent(d,c))},p.Event=function(a,b){if(this instanceof p.Event)a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?bb:ba):this.type=a,b&&p.extend(this,b),this.timeStamp=a&&a.timeStamp||p.now(),this[p.expando]=!0;else return new p.Event(a,b)},p.Event.prototype={preventDefault:function(){this.isDefaultPrevented=bb;var a=this.originalEvent;if(!a)return;a.preventDefault?a.preventDefault():a.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=bb;var a=this.originalEvent;if(!a)return;a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()},isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba},p.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){p.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj,g=f.selector;if(!e||e!==d&&!p.contains(d,e))a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b;return c}}}),p.support.submitBubbles||(p.event.special.submit={setup:function(){if(p.nodeName(this,"form"))return!1;p.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=p.nodeName(c,"input")||p.nodeName(c,"button")?c.form:b;d&&!p._data(d,"_submit_attached")&&(p.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),p._data(d,"_submit_attached",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&p.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(p.nodeName(this,"form"))return!1;p.event.remove(this,"._submit")}}),p.support.changeBubbles||(p.event.special.change={setup:function(){if(V.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")p.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),p.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),p.event.simulate("change",this,a,!0)});return!1}p.event.add(this,"beforeactivate._change",function(a){var b=a.target;V.test(b.nodeName)&&!p._data(b,"_change_attached")&&(p.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&p.event.simulate("change",this.parentNode,a,!0)}),p._data(b,"_change_attached",!0))})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){return p.event.remove(this,"._change"),!V.test(this.nodeName)}}),p.support.focusinBubbles||p.each({focus:"focusin",blur:"focusout"},function(a,b){var c=0,d=function(a){p.event.simulate(b,a.target,p.event.fix(a),!0)};p.event.special[b]={setup:function(){c++===0&&e.addEventListener(a,d,!0)},teardown:function(){--c===0&&e.removeEventListener(a,d,!0)}}}),p.fn.extend({on:function(a,c,d,e,f){var g,h;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(h in a)this.on(h,c,d,a[h],f);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=ba;else if(!e)return this;return f===1&&(g=e,e=function(a){return p().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=p.guid++)),this.each(function(){p.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){var e,f;if(a&&a.preventDefault&&a.handleObj)return e=a.handleObj,p(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if(typeof a=="object"){for(f in a)this.off(f,c,a[f]);return this}if(c===!1||typeof c=="function")d=c,c=b;return d===!1&&(d=ba),this.each(function(){p.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){return p(this.context).on(a,this.selector,b,c),this},die:function(a,b){return p(this.context).off(a,this.selector||"**",b),this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length===1?this.off(a,"**"):this.off(b,a||"**",c)},trigger:function(a,b){return this.each(function(){p.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return p.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||p.guid++,d=0,e=function(c){var e=(p._data(this,"lastToggle"+a.guid)||0)%d;return p._data(this,"lastToggle"+a.guid,e+1),c.preventDefault(),b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){p.fn[b]=function(a,c){return c==null&&(c=a,a=null),arguments.length>0?this.on(b,null,a,c):this.trigger(b)},Y.test(b)&&(p.event.fixHooks[b]=p.event.keyHooks),Z.test(b)&&(p.event.fixHooks[b]=p.event.mouseHooks)}),function(a,b){function bc(a,b,c,d){c=c||[],b=b||r;var e,f,i,j,k=b.nodeType;if(!a||typeof a!="string")return c;if(k!==1&&k!==9)return[];i=g(b);if(!i&&!d)if(e=P.exec(a))if(j=e[1]){if(k===9){f=b.getElementById(j);if(!f||!f.parentNode)return c;if(f.id===j)return c.push(f),c}else if(b.ownerDocument&&(f=b.ownerDocument.getElementById(j))&&h(b,f)&&f.id===j)return c.push(f),c}else{if(e[2])return w.apply(c,x.call(b.getElementsByTagName(a),0)),c;if((j=e[3])&&_&&b.getElementsByClassName)return w.apply(c,x.call(b.getElementsByClassName(j),0)),c}return bp(a.replace(L,"$1"),b,c,d,i)}function bd(a){return function(b){var c=b.nodeName.toLowerCase();return c==="input"&&b.type===a}}function be(a){return function(b){var c=b.nodeName.toLowerCase();return(c==="input"||c==="button")&&b.type===a}}function bf(a){return z(function(b){return b=+b,z(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function bg(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}function bh(a,b){var c,d,f,g,h,i,j,k=C[o][a];if(k)return b?0:k.slice(0);h=a,i=[],j=e.preFilter;while(h){if(!c||(d=M.exec(h)))d&&(h=h.slice(d[0].length)),i.push(f=[]);c=!1;if(d=N.exec(h))f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=d[0].replace(L," ");for(g in e.filter)(d=W[g].exec(h))&&(!j[g]||(d=j[g](d,r,!0)))&&(f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=g,c.matches=d);if(!c)break}return b?h.length:h?bc.error(a):C(a,i).slice(0)}function bi(a,b,d){var e=b.dir,f=d&&b.dir==="parentNode",g=u++;return b.first?function(b,c,d){while(b=b[e])if(f||b.nodeType===1)return a(b,c,d)}:function(b,d,h){if(!h){var i,j=t+" "+g+" ",k=j+c;while(b=b[e])if(f||b.nodeType===1){if((i=b[o])===k)return b.sizset;if(typeof i=="string"&&i.indexOf(j)===0){if(b.sizset)return b}else{b[o]=k;if(a(b,d,h))return b.sizset=!0,b;b.sizset=!1}}}else while(b=b[e])if(f||b.nodeType===1)if(a(b,d,h))return b}}function bj(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function bk(a,b,c,d,e){var f,g=[],h=0,i=a.length,j=b!=null;for(;h<i;h++)if(f=a[h])if(!c||c(f,d,e))g.push(f),j&&b.push(h);return g}function bl(a,b,c,d,e,f){return d&&!d[o]&&(d=bl(d)),e&&!e[o]&&(e=bl(e,f)),z(function(f,g,h,i){if(f&&e)return;var j,k,l,m=[],n=[],o=g.length,p=f||bo(b||"*",h.nodeType?[h]:h,[],f),q=a&&(f||!b)?bk(p,m,a,h,i):p,r=c?e||(f?a:o||d)?[]:g:q;c&&c(q,r,h,i);if(d){l=bk(r,n),d(l,[],h,i),j=l.length;while(j--)if(k=l[j])r[n[j]]=!(q[n[j]]=k)}if(f){j=a&&r.length;while(j--)if(k=r[j])f[m[j]]=!(g[m[j]]=k)}else r=bk(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):w.apply(g,r)})}function bm(a){var b,c,d,f=a.length,g=e.relative[a[0].type],h=g||e.relative[" "],i=g?1:0,j=bi(function(a){return a===b},h,!0),k=bi(function(a){return y.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==l)||((b=c).nodeType?j(a,c,d):k(a,c,d))}];for(;i<f;i++)if(c=e.relative[a[i].type])m=[bi(bj(m),c)];else{c=e.filter[a[i].type].apply(null,a[i].matches);if(c[o]){d=++i;for(;d<f;d++)if(e.relative[a[d].type])break;return bl(i>1&&bj(m),i>1&&a.slice(0,i-1).join("").replace(L,"$1"),c,i<d&&bm(a.slice(i,d)),d<f&&bm(a=a.slice(d)),d<f&&a.join(""))}m.push(c)}return bj(m)}function bn(a,b){var d=b.length>0,f=a.length>0,g=function(h,i,j,k,m){var n,o,p,q=[],s=0,u="0",x=h&&[],y=m!=null,z=l,A=h||f&&e.find.TAG("*",m&&i.parentNode||i),B=t+=z==null?1:Math.E;y&&(l=i!==r&&i,c=g.el);for(;(n=A[u])!=null;u++){if(f&&n){for(o=0;p=a[o];o++)if(p(n,i,j)){k.push(n);break}y&&(t=B,c=++g.el)}d&&((n=!p&&n)&&s--,h&&x.push(n))}s+=u;if(d&&u!==s){for(o=0;p=b[o];o++)p(x,q,i,j);if(h){if(s>0)while(u--)!x[u]&&!q[u]&&(q[u]=v.call(k));q=bk(q)}w.apply(k,q),y&&!h&&q.length>0&&s+b.length>1&&bc.uniqueSort(k)}return y&&(t=B,l=z),x};return g.el=0,d?z(g):g}function bo(a,b,c,d){var e=0,f=b.length;for(;e<f;e++)bc(a,b[e],c,d);return c}function bp(a,b,c,d,f){var g,h,j,k,l,m=bh(a),n=m.length;if(!d&&m.length===1){h=m[0]=m[0].slice(0);if(h.length>2&&(j=h[0]).type==="ID"&&b.nodeType===9&&!f&&e.relative[h[1].type]){b=e.find.ID(j.matches[0].replace(V,""),b,f)[0];if(!b)return c;a=a.slice(h.shift().length)}for(g=W.POS.test(a)?-1:h.length-1;g>=0;g--){j=h[g];if(e.relative[k=j.type])break;if(l=e.find[k])if(d=l(j.matches[0].replace(V,""),R.test(h[0].type)&&b.parentNode||b,f)){h.splice(g,1),a=d.length&&h.join("");if(!a)return w.apply(c,x.call(d,0)),c;break}}}return i(a,m)(d,b,f,c,R.test(a)),c}function bq(){}var c,d,e,f,g,h,i,j,k,l,m=!0,n="undefined",o=("sizcache"+Math.random()).replace(".",""),q=String,r=a.document,s=r.documentElement,t=0,u=0,v=[].pop,w=[].push,x=[].slice,y=[].indexOf||function(a){var b=0,c=this.length;for(;b<c;b++)if(this[b]===a)return b;return-1},z=function(a,b){return a[o]=b==null||b,a},A=function(){var a={},b=[];return z(function(c,d){return b.push(c)>e.cacheLength&&delete a[b.shift()],a[c]=d},a)},B=A(),C=A(),D=A(),E="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",G=F.replace("w","w#"),H="([*^$|!~]?=)",I="\\["+E+"*("+F+")"+E+"*(?:"+H+E+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+G+")|)|)"+E+"*\\]",J=":("+F+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+I+")|[^:]|\\\\.)*|.*))\\)|)",K=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)",L=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g"),M=new RegExp("^"+E+"*,"+E+"*"),N=new RegExp("^"+E+"*([\\x20\\t\\r\\n\\f>+~])"+E+"*"),O=new RegExp(J),P=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,Q=/^:not/,R=/[\x20\t\r\n\f]*[+~]/,S=/:not\($/,T=/h\d/i,U=/input|select|textarea|button/i,V=/\\(?!\\)/g,W={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),NAME:new RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:new RegExp("^("+F.replace("w","w*")+")"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+J),POS:new RegExp(K,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),needsContext:new RegExp("^"+E+"*[>+~]|"+K,"i")},X=function(a){var b=r.createElement("div");try{return a(b)}catch(c){return!1}finally{b=null}},Y=X(function(a){return a.appendChild(r.createComment("")),!a.getElementsByTagName("*").length}),Z=X(function(a){return a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!==n&&a.firstChild.getAttribute("href")==="#"}),$=X(function(a){a.innerHTML="<select></select>";var b=typeof a.lastChild.getAttribute("multiple");return b!=="boolean"&&b!=="string"}),_=X(function(a){return a.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!a.getElementsByClassName||!a.getElementsByClassName("e").length?!1:(a.lastChild.className="e",a.getElementsByClassName("e").length===2)}),ba=X(function(a){a.id=o+0,a.innerHTML="<a name='"+o+"'></a><div name='"+o+"'></div>",s.insertBefore(a,s.firstChild);var b=r.getElementsByName&&r.getElementsByName(o).length===2+r.getElementsByName(o+0).length;return d=!r.getElementById(o),s.removeChild(a),b});try{x.call(s.childNodes,0)[0].nodeType}catch(bb){x=function(a){var b,c=[];for(;b=this[a];a++)c.push(b);return c}}bc.matches=function(a,b){return bc(a,null,null,b)},bc.matchesSelector=function(a,b){return bc(b,null,null,[a]).length>0},f=bc.getText=function(a){var b,c="",d=0,e=a.nodeType;if(e){if(e===1||e===9||e===11){if(typeof a.textContent=="string")return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=f(a)}else if(e===3||e===4)return a.nodeValue}else for(;b=a[d];d++)c+=f(b);return c},g=bc.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?b.nodeName!=="HTML":!1},h=bc.contains=s.contains?function(a,b){var c=a.nodeType===9?a.documentElement:a,d=b&&b.parentNode;return a===d||!!(d&&d.nodeType===1&&c.contains&&c.contains(d))}:s.compareDocumentPosition?function(a,b){return b&&!!(a.compareDocumentPosition(b)&16)}:function(a,b){while(b=b.parentNode)if(b===a)return!0;return!1},bc.attr=function(a,b){var c,d=g(a);return d||(b=b.toLowerCase()),(c=e.attrHandle[b])?c(a):d||$?a.getAttribute(b):(c=a.getAttributeNode(b),c?typeof a[b]=="boolean"?a[b]?b:null:c.specified?c.value:null:null)},e=bc.selectors={cacheLength:50,createPseudo:z,match:W,attrHandle:Z?{}:{href:function(a){return a.getAttribute("href",2)},type:function(a){return a.getAttribute("type")}},find:{ID:d?function(a,b,c){if(typeof b.getElementById!==n&&!c){var d=b.getElementById(a);return d&&d.parentNode?[d]:[]}}:function(a,c,d){if(typeof c.getElementById!==n&&!d){var e=c.getElementById(a);return e?e.id===a||typeof e.getAttributeNode!==n&&e.getAttributeNode("id").value===a?[e]:b:[]}},TAG:Y?function(a,b){if(typeof b.getElementsByTagName!==n)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if(a==="*"){var d,e=[],f=0;for(;d=c[f];f++)d.nodeType===1&&e.push(d);return e}return c},NAME:ba&&function(a,b){if(typeof b.getElementsByName!==n)return b.getElementsByName(name)},CLASS:_&&function(a,b,c){if(typeof b.getElementsByClassName!==n&&!c)return b.getElementsByClassName(a)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(V,""),a[3]=(a[4]||a[5]||"").replace(V,""),a[2]==="~="&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),a[1]==="nth"?(a[2]||bc.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*(a[2]==="even"||a[2]==="odd")),a[4]=+(a[6]+a[7]||a[2]==="odd")):a[2]&&bc.error(a[0]),a},PSEUDO:function(a){var b,c;if(W.CHILD.test(a[0]))return null;if(a[3])a[2]=a[3];else if(b=a[4])O.test(b)&&(c=bh(b,!0))&&(c=b.indexOf(")",b.length-c)-b.length)&&(b=b.slice(0,c),a[0]=a[0].slice(0,c)),a[2]=b;return a.slice(0,3)}},filter:{ID:d?function(a){return a=a.replace(V,""),function(b){return b.getAttribute("id")===a}}:function(a){return a=a.replace(V,""),function(b){var c=typeof b.getAttributeNode!==n&&b.getAttributeNode("id");return c&&c.value===a}},TAG:function(a){return a==="*"?function(){return!0}:(a=a.replace(V,"").toLowerCase(),function(b){return b.nodeName&&b.nodeName.toLowerCase()===a})},CLASS:function(a){var b=B[o][a];return b||(b=B(a,new RegExp("(^|"+E+")"+a+"("+E+"|$)"))),function(a){return b.test(a.className||typeof a.getAttribute!==n&&a.getAttribute("class")||"")}},ATTR:function(a,b,c){return function(d,e){var f=bc.attr(d,a);return f==null?b==="!=":b?(f+="",b==="="?f===c:b==="!="?f!==c:b==="^="?c&&f.indexOf(c)===0:b==="*="?c&&f.indexOf(c)>-1:b==="$="?c&&f.substr(f.length-c.length)===c:b==="~="?(" "+f+" ").indexOf(c)>-1:b==="|="?f===c||f.substr(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d){return a==="nth"?function(a){var b,e,f=a.parentNode;if(c===1&&d===0)return!0;if(f){e=0;for(b=f.firstChild;b;b=b.nextSibling)if(b.nodeType===1){e++;if(a===b)break}}return e-=d,e===c||e%c===0&&e/c>=0}:function(b){var c=b;switch(a){case"only":case"first":while(c=c.previousSibling)if(c.nodeType===1)return!1;if(a==="first")return!0;c=b;case"last":while(c=c.nextSibling)if(c.nodeType===1)return!1;return!0}}},PSEUDO:function(a,b){var c,d=e.pseudos[a]||e.setFilters[a.toLowerCase()]||bc.error("unsupported pseudo: "+a);return d[o]?d(b):d.length>1?(c=[a,a,"",b],e.setFilters.hasOwnProperty(a.toLowerCase())?z(function(a,c){var e,f=d(a,b),g=f.length;while(g--)e=y.call(a,f[g]),a[e]=!(c[e]=f[g])}):function(a){return d(a,0,c)}):d}},pseudos:{not:z(function(a){var b=[],c=[],d=i(a.replace(L,"$1"));return d[o]?z(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)if(f=g[h])a[h]=!(b[h]=f)}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:z(function(a){return function(b){return bc(a,b).length>0}}),contains:z(function(a){return function(b){return(b.textContent||b.innerText||f(b)).indexOf(a)>-1}}),enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&!!a.checked||b==="option"&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},parent:function(a){return!e.pseudos.empty(a)},empty:function(a){var b;a=a.firstChild;while(a){if(a.nodeName>"@"||(b=a.nodeType)===3||b===4)return!1;a=a.nextSibling}return!0},header:function(a){return T.test(a.nodeName)},text:function(a){var b,c;return a.nodeName.toLowerCase()==="input"&&(b=a.type)==="text"&&((c=a.getAttribute("type"))==null||c.toLowerCase()===b)},radio:bd("radio"),checkbox:bd("checkbox"),file:bd("file"),password:bd("password"),image:bd("image"),submit:be("submit"),reset:be("reset"),button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&a.type==="button"||b==="button"},input:function(a){return U.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&&(!b.hasFocus||b.hasFocus())&&(!!a.type||!!a.href)},active:function(a){return a===a.ownerDocument.activeElement},first:bf(function(a,b,c){return[0]}),last:bf(function(a,b,c){return[b-1]}),eq:bf(function(a,b,c){return[c<0?c+b:c]}),even:bf(function(a,b,c){for(var d=0;d<b;d+=2)a.push(d);return a}),odd:bf(function(a,b,c){for(var d=1;d<b;d+=2)a.push(d);return a}),lt:bf(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:bf(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},j=s.compareDocumentPosition?function(a,b){return a===b?(k=!0,0):(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&4)?-1:1}:function(a,b){if(a===b)return k=!0,0;if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,h=b.parentNode,i=g;if(g===h)return bg(a,b);if(!g)return-1;if(!h)return 1;while(i)e.unshift(i),i=i.parentNode;i=h;while(i)f.unshift(i),i=i.parentNode;c=e.length,d=f.length;for(var j=0;j<c&&j<d;j++)if(e[j]!==f[j])return bg(e[j],f[j]);return j===c?bg(a,f[j],-1):bg(e[j],b,1)},[0,0].sort(j),m=!k,bc.uniqueSort=function(a){var b,c=1;k=m,a.sort(j);if(k)for(;b=a[c];c++)b===a[c-1]&&a.splice(c--,1);return a},bc.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},i=bc.compile=function(a,b){var c,d=[],e=[],f=D[o][a];if(!f){b||(b=bh(a)),c=b.length;while(c--)f=bm(b[c]),f[o]?d.push(f):e.push(f);f=D(a,bn(e,d))}return f},r.querySelectorAll&&function(){var a,b=bp,c=/'|\\/g,d=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,e=[":focus"],f=[":active",":focus"],h=s.matchesSelector||s.mozMatchesSelector||s.webkitMatchesSelector||s.oMatchesSelector||s.msMatchesSelector;X(function(a){a.innerHTML="<select><option selected=''></option></select>",a.querySelectorAll("[selected]").length||e.push("\\["+E+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),a.querySelectorAll(":checked").length||e.push(":checked")}),X(function(a){a.innerHTML="<p test=''></p>",a.querySelectorAll("[test^='']").length&&e.push("[*^$]="+E+"*(?:\"\"|'')"),a.innerHTML="<input type='hidden'/>",a.querySelectorAll(":enabled").length||e.push(":enabled",":disabled")}),e=new RegExp(e.join("|")),bp=function(a,d,f,g,h){if(!g&&!h&&(!e||!e.test(a))){var i,j,k=!0,l=o,m=d,n=d.nodeType===9&&a;if(d.nodeType===1&&d.nodeName.toLowerCase()!=="object"){i=bh(a),(k=d.getAttribute("id"))?l=k.replace(c,"\\$&"):d.setAttribute("id",l),l="[id='"+l+"'] ",j=i.length;while(j--)i[j]=l+i[j].join("");m=R.test(a)&&d.parentNode||d,n=i.join(",")}if(n)try{return w.apply(f,x.call(m.querySelectorAll(n),0)),f}catch(p){}finally{k||d.removeAttribute("id")}}return b(a,d,f,g,h)},h&&(X(function(b){a=h.call(b,"div");try{h.call(b,"[test!='']:sizzle"),f.push("!=",J)}catch(c){}}),f=new RegExp(f.join("|")),bc.matchesSelector=function(b,c){c=c.replace(d,"='$1']");if(!g(b)&&!f.test(c)&&(!e||!e.test(c)))try{var i=h.call(b,c);if(i||a||b.document&&b.document.nodeType!==11)return i}catch(j){}return bc(c,null,null,[b]).length>0})}(),e.pseudos.nth=e.pseudos.eq,e.filters=bq.prototype=e.pseudos,e.setFilters=new bq,bc.attr=p.attr,p.find=bc,p.expr=bc.selectors,p.expr[":"]=p.expr.pseudos,p.unique=bc.uniqueSort,p.text=bc.getText,p.isXMLDoc=bc.isXML,p.contains=bc.contains}(a);var bc=/Until$/,bd=/^(?:parents|prev(?:Until|All))/,be=/^.[^:#\[\.,]*$/,bf=p.expr.match.needsContext,bg={children:!0,contents:!0,next:!0,prev:!0};p.fn.extend({find:function(a){var b,c,d,e,f,g,h=this;if(typeof a!="string")return p(a).filter(function(){for(b=0,c=h.length;b<c;b++)if(p.contains(h[b],this))return!0});g=this.pushStack("","find",a);for(b=0,c=this.length;b<c;b++){d=g.length,p.find(a,this[b],g);if(b>0)for(e=d;e<g.length;e++)for(f=0;f<d;f++)if(g[f]===g[e]){g.splice(e--,1);break}}return g},has:function(a){var b,c=p(a,this),d=c.length;return this.filter(function(){for(b=0;b<d;b++)if(p.contains(this,c[b]))return!0})},not:function(a){return this.pushStack(bj(this,a,!1),"not",a)},filter:function(a){return this.pushStack(bj(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?bf.test(a)?p(a,this.context).index(this[0])>=0:p.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c,d=0,e=this.length,f=[],g=bf.test(a)||typeof a!="string"?p(a,b||this.context):0;for(;d<e;d++){c=this[d];while(c&&c.ownerDocument&&c!==b&&c.nodeType!==11){if(g?g.index(c)>-1:p.find.matchesSelector(c,a)){f.push(c);break}c=c.parentNode}}return f=f.length>1?p.unique(f):f,this.pushStack(f,"closest",a)},index:function(a){return a?typeof a=="string"?p.inArray(this[0],p(a)):p.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(a,b){var c=typeof a=="string"?p(a,b):p.makeArray(a&&a.nodeType?[a]:a),d=p.merge(this.get(),c);return this.pushStack(bh(c[0])||bh(d[0])?d:p.unique(d))},addBack:function(a){return this.add(a==null?this.prevObject:this.prevObject.filter(a))}}),p.fn.andSelf=p.fn.addBack,p.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return p.dir(a,"parentNode")},parentsUntil:function(a,b,c){return p.dir(a,"parentNode",c)},next:function(a){return bi(a,"nextSibling")},prev:function(a){return bi(a,"previousSibling")},nextAll:function(a){return p.dir(a,"nextSibling")},prevAll:function(a){return p.dir(a,"previousSibling")},nextUntil:function(a,b,c){return p.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return p.dir(a,"previousSibling",c)},siblings:function(a){return p.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return p.sibling(a.firstChild)},contents:function(a){return p.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:p.merge([],a.childNodes)}},function(a,b){p.fn[a]=function(c,d){var e=p.map(this,b,c);return bc.test(a)||(d=c),d&&typeof d=="string"&&(e=p.filter(d,e)),e=this.length>1&&!bg[a]?p.unique(e):e,this.length>1&&bd.test(a)&&(e=e.reverse()),this.pushStack(e,a,k.call(arguments).join(","))}}),p.extend({filter:function(a,b,c){return c&&(a=":not("+a+")"),b.length===1?p.find.matchesSelector(b[0],a)?[b[0]]:[]:p.find.matches(a,b)},dir:function(a,c,d){var e=[],f=a[c];while(f&&f.nodeType!==9&&(d===b||f.nodeType!==1||!p(f).is(d)))f.nodeType===1&&e.push(f),f=f[c];return e},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var bl="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",bm=/ jQuery\d+="(?:null|\d+)"/g,bn=/^\s+/,bo=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bp=/<([\w:]+)/,bq=/<tbody/i,br=/<|&#?\w+;/,bs=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,bu=new RegExp("<(?:"+bl+")[\\s/>]","i"),bv=/^(?:checkbox|radio)$/,bw=/checked\s*(?:[^=]|=\s*.checked.)/i,bx=/\/(java|ecma)script/i,by=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,bz={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bA=bk(e),bB=bA.appendChild(e.createElement("div"));bz.optgroup=bz.option,bz.tbody=bz.tfoot=bz.colgroup=bz.caption=bz.thead,bz.th=bz.td,p.support.htmlSerialize||(bz._default=[1,"X<div>","</div>"]),p.fn.extend({text:function(a){return p.access(this,function(a){return a===b?p.text(this):this.empty().append((this[0]&&this[0].ownerDocument||e).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(p.isFunction(a))return this.each(function(b){p(this).wrapAll(a.call(this,b))});if(this[0]){var b=p(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return p.isFunction(a)?this.each(function(b){p(this).wrapInner(a.call(this,b))}):this.each(function(){var b=p(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=p.isFunction(a);return this.each(function(c){p(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,"body")||p(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(a,this.firstChild)})},before:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(a,this),"before",this.selector)}},after:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(this,a),"after",this.selector)}},remove:function(a,b){var c,d=0;for(;(c=this[d])!=null;d++)if(!a||p.filter(a,[c]).length)!b&&c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),p.cleanData([c])),c.parentNode&&c.parentNode.removeChild(c);return this},empty:function(){var a,b=0;for(;(a=this[b])!=null;b++){a.nodeType===1&&p.cleanData(a.getElementsByTagName("*"));while(a.firstChild)a.removeChild(a.firstChild)}return this},clone:function(a,b){return a=a==null?!1:a,b=b==null?a:b,this.map(function(){return p.clone(this,a,b)})},html:function(a){return p.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(bm,""):b;if(typeof a=="string"&&!bs.test(a)&&(p.support.htmlSerialize||!bu.test(a))&&(p.support.leadingWhitespace||!bn.test(a))&&!bz[(bp.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(bo,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(f){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){return bh(this[0])?this.length?this.pushStack(p(p.isFunction(a)?a():a),"replaceWith",a):this:p.isFunction(a)?this.each(function(b){var c=p(this),d=c.html();c.replaceWith(a.call(this,b,d))}):(typeof a!="string"&&(a=p(a).detach()),this.each(function(){var b=this.nextSibling,c=this.parentNode;p(this).remove(),b?p(b).before(a):p(c).append(a)}))},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){a=[].concat.apply([],a);var e,f,g,h,i=0,j=a[0],k=[],l=this.length;if(!p.support.checkClone&&l>1&&typeof j=="string"&&bw.test(j))return this.each(function(){p(this).domManip(a,c,d)});if(p.isFunction(j))return this.each(function(e){var f=p(this);a[0]=j.call(this,e,c?f.html():b),f.domManip(a,c,d)});if(this[0]){e=p.buildFragment(a,this,k),g=e.fragment,f=g.firstChild,g.childNodes.length===1&&(g=f);if(f){c=c&&p.nodeName(f,"tr");for(h=e.cacheable||l-1;i<l;i++)d.call(c&&p.nodeName(this[i],"table")?bC(this[i],"tbody"):this[i],i===h?g:p.clone(g,!0,!0))}g=f=null,k.length&&p.each(k,function(a,b){b.src?p.ajax?p.ajax({url:b.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):p.error("no ajax"):p.globalEval((b.text||b.textContent||b.innerHTML||"").replace(by,"")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),p.buildFragment=function(a,c,d){var f,g,h,i=a[0];return c=c||e,c=!c.nodeType&&c[0]||c,c=c.ownerDocument||c,a.length===1&&typeof i=="string"&&i.length<512&&c===e&&i.charAt(0)==="<"&&!bt.test(i)&&(p.support.checkClone||!bw.test(i))&&(p.support.html5Clone||!bu.test(i))&&(g=!0,f=p.fragments[i],h=f!==b),f||(f=c.createDocumentFragment(),p.clean(a,c,f,d),g&&(p.fragments[i]=h&&f)),{fragment:f,cacheable:g}},p.fragments={},p.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){p.fn[a]=function(c){var d,e=0,f=[],g=p(c),h=g.length,i=this.length===1&&this[0].parentNode;if((i==null||i&&i.nodeType===11&&i.childNodes.length===1)&&h===1)return g[b](this[0]),this;for(;e<h;e++)d=(e>0?this.clone(!0):this).get(),p(g[e])[b](d),f=f.concat(d);return this.pushStack(f,a,g.selector)}}),p.extend({clone:function(a,b,c){var d,e,f,g;p.support.html5Clone||p.isXMLDoc(a)||!bu.test("<"+a.nodeName+">")?g=a.cloneNode(!0):(bB.innerHTML=a.outerHTML,bB.removeChild(g=bB.firstChild));if((!p.support.noCloneEvent||!p.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!p.isXMLDoc(a)){bE(a,g),d=bF(a),e=bF(g);for(f=0;d[f];++f)e[f]&&bE(d[f],e[f])}if(b){bD(a,g);if(c){d=bF(a),e=bF(g);for(f=0;d[f];++f)bD(d[f],e[f])}}return d=e=null,g},clean:function(a,b,c,d){var f,g,h,i,j,k,l,m,n,o,q,r,s=b===e&&bA,t=[];if(!b||typeof b.createDocumentFragment=="undefined")b=e;for(f=0;(h=a[f])!=null;f++){typeof h=="number"&&(h+="");if(!h)continue;if(typeof h=="string")if(!br.test(h))h=b.createTextNode(h);else{s=s||bk(b),l=b.createElement("div"),s.appendChild(l),h=h.replace(bo,"<$1></$2>"),i=(bp.exec(h)||["",""])[1].toLowerCase(),j=bz[i]||bz._default,k=j[0],l.innerHTML=j[1]+h+j[2];while(k--)l=l.lastChild;if(!p.support.tbody){m=bq.test(h),n=i==="table"&&!m?l.firstChild&&l.firstChild.childNodes:j[1]==="<table>"&&!m?l.childNodes:[];for(g=n.length-1;g>=0;--g)p.nodeName(n[g],"tbody")&&!n[g].childNodes.length&&n[g].parentNode.removeChild(n[g])}!p.support.leadingWhitespace&&bn.test(h)&&l.insertBefore(b.createTextNode(bn.exec(h)[0]),l.firstChild),h=l.childNodes,l.parentNode.removeChild(l)}h.nodeType?t.push(h):p.merge(t,h)}l&&(h=l=s=null);if(!p.support.appendChecked)for(f=0;(h=t[f])!=null;f++)p.nodeName(h,"input")?bG(h):typeof h.getElementsByTagName!="undefined"&&p.grep(h.getElementsByTagName("input"),bG);if(c){q=function(a){if(!a.type||bx.test(a.type))return d?d.push(a.parentNode?a.parentNode.removeChild(a):a):c.appendChild(a)};for(f=0;(h=t[f])!=null;f++)if(!p.nodeName(h,"script")||!q(h))c.appendChild(h),typeof h.getElementsByTagName!="undefined"&&(r=p.grep(p.merge([],h.getElementsByTagName("script")),q),t.splice.apply(t,[f+1,0].concat(r)),f+=r.length)}return t},cleanData:function(a,b){var c,d,e,f,g=0,h=p.expando,i=p.cache,j=p.support.deleteExpando,k=p.event.special;for(;(e=a[g])!=null;g++)if(b||p.acceptData(e)){d=e[h],c=d&&i[d];if(c){if(c.events)for(f in c.events)k[f]?p.event.remove(e,f):p.removeEvent(e,f,c.handle);i[d]&&(delete i[d],j?delete e[h]:e.removeAttribute?e.removeAttribute(h):e[h]=null,p.deletedIds.push(d))}}}}),function(){var a,b;p.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \/]([\w.]+)/.exec(a)||/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||a.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},a=p.uaMatch(g.userAgent),b={},a.browser&&(b[a.browser]=!0,b.version=a.version),b.chrome?b.webkit=!0:b.webkit&&(b.safari=!0),p.browser=b,p.sub=function(){function a(b,c){return new a.fn.init(b,c)}p.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function c(c,d){return d&&d instanceof p&&!(d instanceof a)&&(d=a(d)),p.fn.init.call(this,c,d,b)},a.fn.init.prototype=a.fn;var b=a(e);return a}}();var bH,bI,bJ,bK=/alpha\([^)]*\)/i,bL=/opacity=([^)]*)/,bM=/^(top|right|bottom|left)$/,bN=/^(none|table(?!-c[ea]).+)/,bO=/^margin/,bP=new RegExp("^("+q+")(.*)$","i"),bQ=new RegExp("^("+q+")(?!px)[a-z%]+$","i"),bR=new RegExp("^([-+])=("+q+")","i"),bS={},bT={position:"absolute",visibility:"hidden",display:"block"},bU={letterSpacing:0,fontWeight:400},bV=["Top","Right","Bottom","Left"],bW=["Webkit","O","Moz","ms"],bX=p.fn.toggle;p.fn.extend({css:function(a,c){return p.access(this,function(a,c,d){return d!==b?p.style(a,c,d):p.css(a,c)},a,c,arguments.length>1)},show:function(){return b$(this,!0)},hide:function(){return b$(this)},toggle:function(a,b){var c=typeof a=="boolean";return p.isFunction(a)&&p.isFunction(b)?bX.apply(this,arguments):this.each(function(){(c?a:bZ(this))?p(this).show():p(this).hide()})}}),p.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bH(a,"opacity");return c===""?"1":c}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":p.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!a||a.nodeType===3||a.nodeType===8||!a.style)return;var f,g,h,i=p.camelCase(c),j=a.style;c=p.cssProps[i]||(p.cssProps[i]=bY(j,i)),h=p.cssHooks[c]||p.cssHooks[i];if(d===b)return h&&"get"in h&&(f=h.get(a,!1,e))!==b?f:j[c];g=typeof d,g==="string"&&(f=bR.exec(d))&&(d=(f[1]+1)*f[2]+parseFloat(p.css(a,c)),g="number");if(d==null||g==="number"&&isNaN(d))return;g==="number"&&!p.cssNumber[i]&&(d+="px");if(!h||!("set"in h)||(d=h.set(a,d,e))!==b)try{j[c]=d}catch(k){}},css:function(a,c,d,e){var f,g,h,i=p.camelCase(c);return c=p.cssProps[i]||(p.cssProps[i]=bY(a.style,i)),h=p.cssHooks[c]||p.cssHooks[i],h&&"get"in h&&(f=h.get(a,!0,e)),f===b&&(f=bH(a,c)),f==="normal"&&c in bU&&(f=bU[c]),d||e!==b?(g=parseFloat(f),d||p.isNumeric(g)?g||0:f):f},swap:function(a,b,c){var d,e,f={};for(e in b)f[e]=a.style[e],a.style[e]=b[e];d=c.call(a);for(e in b)a.style[e]=f[e];return d}}),a.getComputedStyle?bH=function(b,c){var d,e,f,g,h=a.getComputedStyle(b,null),i=b.style;return h&&(d=h[c],d===""&&!p.contains(b.ownerDocument,b)&&(d=p.style(b,c)),bQ.test(d)&&bO.test(c)&&(e=i.width,f=i.minWidth,g=i.maxWidth,i.minWidth=i.maxWidth=i.width=d,d=h.width,i.width=e,i.minWidth=f,i.maxWidth=g)),d}:e.documentElement.currentStyle&&(bH=function(a,b){var c,d,e=a.currentStyle&&a.currentStyle[b],f=a.style;return e==null&&f&&f[b]&&(e=f[b]),bQ.test(e)&&!bM.test(b)&&(c=f.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":e,e=f.pixelLeft+"px",f.left=c,d&&(a.runtimeStyle.left=d)),e===""?"auto":e}),p.each(["height","width"],function(a,b){p.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth===0&&bN.test(bH(a,"display"))?p.swap(a,bT,function(){return cb(a,b,d)}):cb(a,b,d)},set:function(a,c,d){return b_(a,c,d?ca(a,b,d,p.support.boxSizing&&p.css(a,"boxSizing")==="border-box"):0)}}}),p.support.opacity||(p.cssHooks.opacity={get:function(a,b){return bL.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=p.isNumeric(b)?"alpha(opacity="+b*100+")":"",f=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&p.trim(f.replace(bK,""))===""&&c.removeAttribute){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bK.test(f)?f.replace(bK,e):f+" "+e}}),p(function(){p.support.reliableMarginRight||(p.cssHooks.marginRight={get:function(a,b){return p.swap(a,{display:"inline-block"},function(){if(b)return bH(a,"marginRight")})}}),!p.support.pixelPosition&&p.fn.position&&p.each(["top","left"],function(a,b){p.cssHooks[b]={get:function(a,c){if(c){var d=bH(a,b);return bQ.test(d)?p(a).position()[b]+"px":d}}}})}),p.expr&&p.expr.filters&&(p.expr.filters.hidden=function(a){return a.offsetWidth===0&&a.offsetHeight===0||!p.support.reliableHiddenOffsets&&(a.style&&a.style.display||bH(a,"display"))==="none"},p.expr.filters.visible=function(a){return!p.expr.filters.hidden(a)}),p.each({margin:"",padding:"",border:"Width"},function(a,b){p.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bV[d]+b]=e[d]||e[d-2]||e[0];return f}},bO.test(a)||(p.cssHooks[a+b].set=b_)});var cd=/%20/g,ce=/\[\]$/,cf=/\r?\n/g,cg=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ch=/^(?:select|textarea)/i;p.fn.extend({serialize:function(){return p.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?p.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ch.test(this.nodeName)||cg.test(this.type))}).map(function(a,b){var c=p(this).val();return c==null?null:p.isArray(c)?p.map(c,function(a,c){return{name:b.name,value:a.replace(cf,"\r\n")}}):{name:b.name,value:c.replace(cf,"\r\n")}}).get()}}),p.param=function(a,c){var d,e=[],f=function(a,b){b=p.isFunction(b)?b():b==null?"":b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=p.ajaxSettings&&p.ajaxSettings.traditional);if(p.isArray(a)||a.jquery&&!p.isPlainObject(a))p.each(a,function(){f(this.name,this.value)});else for(d in a)ci(d,a[d],c,f);return e.join("&").replace(cd,"+")};var cj,ck,cl=/#.*$/,cm=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,cn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,co=/^(?:GET|HEAD)$/,cp=/^\/\//,cq=/\?/,cr=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,cs=/([?&])_=[^&]*/,ct=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,cu=p.fn.load,cv={},cw={},cx=["*/"]+["*"];try{ck=f.href}catch(cy){ck=e.createElement("a"),ck.href="",ck=ck.href}cj=ct.exec(ck.toLowerCase())||[],p.fn.load=function(a,c,d){if(typeof a!="string"&&cu)return cu.apply(this,arguments);if(!this.length)return this;var e,f,g,h=this,i=a.indexOf(" ");return i>=0&&(e=a.slice(i,a.length),a=a.slice(0,i)),p.isFunction(c)?(d=c,c=b):c&&typeof c=="object"&&(f="POST"),p.ajax({url:a,type:f,dataType:"html",data:c,complete:function(a,b){d&&h.each(d,g||[a.responseText,b,a])}}).done(function(a){g=arguments,h.html(e?p("<div>").append(a.replace(cr,"")).find(e):a)}),this},p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){p.fn[b]=function(a){return this.on(b,a)}}),p.each(["get","post"],function(a,c){p[c]=function(a,d,e,f){return p.isFunction(d)&&(f=f||e,e=d,d=b),p.ajax({type:c,url:a,data:d,success:e,dataType:f})}}),p.extend({getScript:function(a,c){return p.get(a,b,c,"script")},getJSON:function(a,b,c){return p.get(a,b,c,"json")},ajaxSetup:function(a,b){return b?cB(a,p.ajaxSettings):(b=a,a=p.ajaxSettings),cB(a,b),a},ajaxSettings:{url:ck,isLocal:cn.test(cj[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":cx},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":p.parseJSON,"text xml":p.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:cz(cv),ajaxTransport:cz(cw),ajax:function(a,c){function y(a,c,f,i){var k,s,t,u,w,y=c;if(v===2)return;v=2,h&&clearTimeout(h),g=b,e=i||"",x.readyState=a>0?4:0,f&&(u=cC(l,x,f));if(a>=200&&a<300||a===304)l.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(p.lastModified[d]=w),w=x.getResponseHeader("Etag"),w&&(p.etag[d]=w)),a===304?(y="notmodified",k=!0):(k=cD(l,u),y=k.state,s=k.data,t=k.error,k=!t);else{t=y;if(!y||a)y="error",a<0&&(a=0)}x.status=a,x.statusText=(c||y)+"",k?o.resolveWith(m,[s,y,x]):o.rejectWith(m,[x,y,t]),x.statusCode(r),r=b,j&&n.trigger("ajax"+(k?"Success":"Error"),[x,l,k?s:t]),q.fireWith(m,[x,y]),j&&(n.trigger("ajaxComplete",[x,l]),--p.active||p.event.trigger("ajaxStop"))}typeof a=="object"&&(c=a,a=b),c=c||{};var d,e,f,g,h,i,j,k,l=p.ajaxSetup({},c),m=l.context||l,n=m!==l&&(m.nodeType||m instanceof p)?p(m):p.event,o=p.Deferred(),q=p.Callbacks("once memory"),r=l.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,setRequestHeader:function(a,b){if(!v){var c=a.toLowerCase();a=u[c]=u[c]||a,t[a]=b}return this},getAllResponseHeaders:function(){return v===2?e:null},getResponseHeader:function(a){var c;if(v===2){if(!f){f={};while(c=cm.exec(e))f[c[1].toLowerCase()]=c[2]}c=f[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){return v||(l.mimeType=a),this},abort:function(a){return a=a||w,g&&g.abort(a),y(0,a),this}};o.promise(x),x.success=x.done,x.error=x.fail,x.complete=q.add,x.statusCode=function(a){if(a){var b;if(v<2)for(b in a)r[b]=[r[b],a[b]];else b=a[x.status],x.always(b)}return this},l.url=((a||l.url)+"").replace(cl,"").replace(cp,cj[1]+"//"),l.dataTypes=p.trim(l.dataType||"*").toLowerCase().split(s),l.crossDomain==null&&(i=ct.exec(l.url.toLowerCase())||!1,l.crossDomain=i&&i.join(":")+(i[3]?"":i[1]==="http:"?80:443)!==cj.join(":")+(cj[3]?"":cj[1]==="http:"?80:443)),l.data&&l.processData&&typeof l.data!="string"&&(l.data=p.param(l.data,l.traditional)),cA(cv,l,c,x);if(v===2)return x;j=l.global,l.type=l.type.toUpperCase(),l.hasContent=!co.test(l.type),j&&p.active++===0&&p.event.trigger("ajaxStart");if(!l.hasContent){l.data&&(l.url+=(cq.test(l.url)?"&":"?")+l.data,delete l.data),d=l.url;if(l.cache===!1){var z=p.now(),A=l.url.replace(cs,"$1_="+z);l.url=A+(A===l.url?(cq.test(l.url)?"&":"?")+"_="+z:"")}}(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",l.contentType),l.ifModified&&(d=d||l.url,p.lastModified[d]&&x.setRequestHeader("If-Modified-Since",p.lastModified[d]),p.etag[d]&&x.setRequestHeader("If-None-Match",p.etag[d])),x.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+(l.dataTypes[0]!=="*"?", "+cx+"; q=0.01":""):l.accepts["*"]);for(k in l.headers)x.setRequestHeader(k,l.headers[k]);if(!l.beforeSend||l.beforeSend.call(m,x,l)!==!1&&v!==2){w="abort";for(k in{success:1,error:1,complete:1})x[k](l[k]);g=cA(cw,l,c,x);if(!g)y(-1,"No Transport");else{x.readyState=1,j&&n.trigger("ajaxSend",[x,l]),l.async&&l.timeout>0&&(h=setTimeout(function(){x.abort("timeout")},l.timeout));try{v=1,g.send(t,y)}catch(B){if(v<2)y(-1,B);else throw B}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var cE=[],cF=/\?/,cG=/(=)\?(?=&|$)|\?\?/,cH=p.now();p.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=cE.pop()||p.expando+"_"+cH++;return this[a]=!0,a}}),p.ajaxPrefilter("json jsonp",function(c,d,e){var f,g,h,i=c.data,j=c.url,k=c.jsonp!==!1,l=k&&cG.test(j),m=k&&!l&&typeof i=="string"&&!(c.contentType||"").indexOf("application/x-www-form-urlencoded")&&cG.test(i);if(c.dataTypes[0]==="jsonp"||l||m)return f=c.jsonpCallback=p.isFunction(c.jsonpCallback)?c.jsonpCallback():c.jsonpCallback,g=a[f],l?c.url=j.replace(cG,"$1"+f):m?c.data=i.replace(cG,"$1"+f):k&&(c.url+=(cF.test(j)?"&":"?")+c.jsonp+"="+f),c.converters["script json"]=function(){return h||p.error(f+" was not called"),h[0]},c.dataTypes[0]="json",a[f]=function(){h=arguments},e.always(function(){a[f]=g,c[f]&&(c.jsonpCallback=d.jsonpCallback,cE.push(f)),h&&p.isFunction(g)&&g(h[0]),h=g=b}),"script"}),p.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){return p.globalEval(a),a}}}),p.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),p.ajaxTransport("script",function(a){if(a.crossDomain){var c,d=e.head||e.getElementsByTagName("head")[0]||e.documentElement;return{send:function(f,g){c=e.createElement("script"),c.async="async",a.scriptCharset&&(c.charset=a.scriptCharset),c.src=a.url,c.onload=c.onreadystatechange=function(a,e){if(e||!c.readyState||/loaded|complete/.test(c.readyState))c.onload=c.onreadystatechange=null,d&&c.parentNode&&d.removeChild(c),c=b,e||g(200,"success")},d.insertBefore(c,d.firstChild)},abort:function(){c&&c.onload(0,1)}}}});var cI,cJ=a.ActiveXObject?function(){for(var a in cI)cI[a](0,1)}:!1,cK=0;p.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&cL()||cM()}:cL,function(a){p.extend(p.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(p.ajaxSettings.xhr()),p.support.ajax&&p.ajaxTransport(function(c){if(!c.crossDomain||p.support.cors){var d;return{send:function(e,f){var g,h,i=c.xhr();c.username?i.open(c.type,c.url,c.async,c.username,c.password):i.open(c.type,c.url,c.async);if(c.xhrFields)for(h in c.xhrFields)i[h]=c.xhrFields[h];c.mimeType&&i.overrideMimeType&&i.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(h in e)i.setRequestHeader(h,e[h])}catch(j){}i.send(c.hasContent&&c.data||null),d=function(a,e){var h,j,k,l,m;try{if(d&&(e||i.readyState===4)){d=b,g&&(i.onreadystatechange=p.noop,cJ&&delete cI[g]);if(e)i.readyState!==4&&i.abort();else{h=i.status,k=i.getAllResponseHeaders(),l={},m=i.responseXML,m&&m.documentElement&&(l.xml=m);try{l.text=i.responseText}catch(a){}try{j=i.statusText}catch(n){j=""}!h&&c.isLocal&&!c.crossDomain?h=l.text?200:404:h===1223&&(h=204)}}}catch(o){e||f(-1,o)}l&&f(h,j,l,k)},c.async?i.readyState===4?setTimeout(d,0):(g=++cK,cJ&&(cI||(cI={},p(a).unload(cJ)),cI[g]=d),i.onreadystatechange=d):d()},abort:function(){d&&d(0,1)}}}});var cN,cO,cP=/^(?:toggle|show|hide)$/,cQ=new RegExp("^(?:([-+])=|)("+q+")([a-z%]*)$","i"),cR=/queueHooks$/,cS=[cY],cT={"*":[function(a,b){var c,d,e=this.createTween(a,b),f=cQ.exec(b),g=e.cur(),h=+g||0,i=1,j=20;if(f){c=+f[2],d=f[3]||(p.cssNumber[a]?"":"px");if(d!=="px"&&h){h=p.css(e.elem,a,!0)||c||1;do i=i||".5",h=h/i,p.style(e.elem,a,h+d);while(i!==(i=e.cur()/g)&&i!==1&&--j)}e.unit=d,e.start=h,e.end=f[1]?h+(f[1]+1)*c:c}return e}]};p.Animation=p.extend(cW,{tweener:function(a,b){p.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");var c,d=0,e=a.length;for(;d<e;d++)c=a[d],cT[c]=cT[c]||[],cT[c].unshift(b)},prefilter:function(a,b){b?cS.unshift(a):cS.push(a)}}),p.Tween=cZ,cZ.prototype={constructor:cZ,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(p.cssNumber[c]?"":"px")},cur:function(){var a=cZ.propHooks[this.prop];return a&&a.get?a.get(this):cZ.propHooks._default.get(this)},run:function(a){var b,c=cZ.propHooks[this.prop];return this.options.duration?this.pos=b=p.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):cZ.propHooks._default.set(this),this}},cZ.prototype.init.prototype=cZ.prototype,cZ.propHooks={_default:{get:function(a){var b;return a.elem[a.prop]==null||!!a.elem.style&&a.elem.style[a.prop]!=null?(b=p.css(a.elem,a.prop,!1,""),!b||b==="auto"?0:b):a.elem[a.prop]},set:function(a){p.fx.step[a.prop]?p.fx.step[a.prop](a):a.elem.style&&(a.elem.style[p.cssProps[a.prop]]!=null||p.cssHooks[a.prop])?p.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},cZ.propHooks.scrollTop=cZ.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},p.each(["toggle","show","hide"],function(a,b){var c=p.fn[b];p.fn[b]=function(d,e,f){return d==null||typeof d=="boolean"||!a&&p.isFunction(d)&&p.isFunction(e)?c.apply(this,arguments):this.animate(c$(b,!0),d,e,f)}}),p.fn.extend({fadeTo:function(a,b,c,d){return this.filter(bZ).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=p.isEmptyObject(a),f=p.speed(b,c,d),g=function(){var b=cW(this,p.extend({},a),f);e&&b.stop(!0)};return e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,c,d){var e=function(a){var b=a.stop;delete a.stop,b(d)};return typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,c=a!=null&&a+"queueHooks",f=p.timers,g=p._data(this);if(c)g[c]&&g[c].stop&&e(g[c]);else for(c in g)g[c]&&g[c].stop&&cR.test(c)&&e(g[c]);for(c=f.length;c--;)f[c].elem===this&&(a==null||f[c].queue===a)&&(f[c].anim.stop(d),b=!1,f.splice(c,1));(b||!d)&&p.dequeue(this,a)})}}),p.each({slideDown:c$("show"),slideUp:c$("hide"),slideToggle:c$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){p.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),p.speed=function(a,b,c){var d=a&&typeof a=="object"?p.extend({},a):{complete:c||!c&&b||p.isFunction(a)&&a,duration:a,easing:c&&b||b&&!p.isFunction(b)&&b};d.duration=p.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in p.fx.speeds?p.fx.speeds[d.duration]:p.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";return d.old=d.complete,d.complete=function(){p.isFunction(d.old)&&d.old.call(this),d.queue&&p.dequeue(this,d.queue)},d},p.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},p.timers=[],p.fx=cZ.prototype.init,p.fx.tick=function(){var a,b=p.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||p.fx.stop()},p.fx.timer=function(a){a()&&p.timers.push(a)&&!cO&&(cO=setInterval(p.fx.tick,p.fx.interval))},p.fx.interval=13,p.fx.stop=function(){clearInterval(cO),cO=null},p.fx.speeds={slow:600,fast:200,_default:400},p.fx.step={},p.expr&&p.expr.filters&&(p.expr.filters.animated=function(a){return p.grep(p.timers,function(b){return a===b.elem}).length});var c_=/^(?:body|html)$/i;p.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){p.offset.setOffset(this,a,b)});var c,d,e,f,g,h,i,j={top:0,left:0},k=this[0],l=k&&k.ownerDocument;if(!l)return;return(d=l.body)===k?p.offset.bodyOffset(k):(c=l.documentElement,p.contains(c,k)?(typeof k.getBoundingClientRect!="undefined"&&(j=k.getBoundingClientRect()),e=da(l),f=c.clientTop||d.clientTop||0,g=c.clientLeft||d.clientLeft||0,h=e.pageYOffset||c.scrollTop,i=e.pageXOffset||c.scrollLeft,{top:j.top+h-f,left:j.left+i-g}):j)},p.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;return p.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(p.css(a,"marginTop"))||0,c+=parseFloat(p.css(a,"marginLeft"))||0),{top:b,left:c}},setOffset:function(a,b,c){var d=p.css(a,"position");d==="static"&&(a.style.position="relative");var e=p(a),f=e.offset(),g=p.css(a,"top"),h=p.css(a,"left"),i=(d==="absolute"||d==="fixed")&&p.inArray("auto",[g,h])>-1,j={},k={},l,m;i?(k=e.position(),l=k.top,m=k.left):(l=parseFloat(g)||0,m=parseFloat(h)||0),p.isFunction(b)&&(b=b.call(a,c,f)),b.top!=null&&(j.top=b.top-f.top+l),b.left!=null&&(j.left=b.left-f.left+m),"using"in b?b.using.call(a,j):e.css(j)}},p.fn.extend({position:function(){if(!this[0])return;var a=this[0],b=this.offsetParent(),c=this.offset(),d=c_.test(b[0].nodeName)?{top:0,left:0}:b.offset();return c.top-=parseFloat(p.css(a,"marginTop"))||0,c.left-=parseFloat(p.css(a,"marginLeft"))||0,d.top+=parseFloat(p.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(p.css(b[0],"borderLeftWidth"))||0,{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||e.body;while(a&&!c_.test(a.nodeName)&&p.css(a,"position")==="static")a=a.offsetParent;return a||e.body})}}),p.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);p.fn[a]=function(e){return p.access(this,function(a,e,f){var g=da(a);if(f===b)return g?c in g?g[c]:g.document.documentElement[e]:a[e];g?g.scrollTo(d?p(g).scrollLeft():f,d?f:p(g).scrollTop()):a[e]=f},a,e,arguments.length,null)}}),p.each({Height:"height",Width:"width"},function(a,c){p.each({padding:"inner"+a,content:c,"":"outer"+a},function(d,e){p.fn[e]=function(e,f){var g=arguments.length&&(d||typeof e!="boolean"),h=d||(e===!0||f===!0?"margin":"border");return p.access(this,function(c,d,e){var f;return p.isWindow(c)?c.document.documentElement["client"+a]:c.nodeType===9?(f=c.documentElement,Math.max(c.body["scroll"+a],f["scroll"+a],c.body["offset"+a],f["offset"+a],f["client"+a])):e===b?p.css(c,d,e,h):p.style(c,d,e,h)},c,g?e:b,g,null)}})}),a.jQuery=a.$=p,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return p})})(window);
/*!
 * jQuery UI Core 1.10.3
 * http://jqueryui.com
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
(function( $, undefined ) {

var uuid = 0,
	runiqueId = /^ui-id-\d+$/;

// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
	version: "1.10.3",

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	}
});

// plugins
$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),

	scrollParent: function() {
		var scrollParent;
		if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		}

		return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	uniqueId: function() {
		return this.each(function() {
			if ( !this.id ) {
				this.id = "ui-id-" + (++uuid);
			}
		});
	},

	removeUniqueId: function() {
		return this.each(function() {
			if ( runiqueId.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}





// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.support.selectstart = "onselectstart" in document.createElement( "div" );
$.fn.extend({
	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

$.extend( $.ui, {
	// $.ui.plugin is deprecated. Use $.widget() extensions instead.
	plugin: {
		add: function( module, option, set ) {
			var i,
				proto = $.ui[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var i,
				set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
				return;
			}

			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},

	// only used by resizable
	hasScroll: function( el, a ) {

		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	}
});

})( jQuery );

/*!
 * jQuery UI Widget 1.10.3
 * http://jqueryui.com
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */
(function( $, undefined ) {

var uuid = 0,
	slice = Array.prototype.slice,
	_cleanData = $.cleanData;
$.cleanData = function( elems ) {
	for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
		try {
			$( elem ).triggerHandler( "remove" );
		// http://bugs.jquery.com/ticket/8235
		} catch( e ) {}
	}
	_cleanData( elems );
};

$.widget = function( name, base, prototype ) {
	var fullName, existingConstructor, constructor, basePrototype,
		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple widgets (#8876)
		proxiedPrototype = {},
		namespace = name.split( "." )[ 0 ];

	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};
	// extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,
		// copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),
		// track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	});

	basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = (function() {
			var _super = function() {
					return base.prototype[ prop ].apply( this, arguments );
				},
				_superApply = function( args ) {
					return base.prototype[ prop ].apply( this, args );
				};
			return function() {
				var __super = this._super,
					__superApply = this._superApply,
					returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		})();
	});
	constructor.prototype = $.widget.extend( basePrototype, {
		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	});

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
		});
		// remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );
};

$.widget.extend = function( target ) {
	var input = slice.call( arguments, 1 ),
		inputIndex = 0,
		inputLength = input.length,
		key,
		value;
	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :
						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );
				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = slice.call( arguments, 1 ),
			returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ?
			$.widget.extend.apply( null, [ options ].concat(args) ) :
			options;

		if ( isMethodCall ) {
			this.each(function() {
				var methodValue,
					instance = $.data( this, fullName );
				if ( !instance ) {
					return $.error( "cannot call methods on " + name + " prior to initialization; " +
						"attempted to call method '" + options + "'" );
				}
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name + " widget instance" );
				}
				methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} )._init();
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",
	options: {
		disabled: false,

		// callbacks
		create: null
	},
	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = uuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;
		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}

		this._create();
		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},
	_getCreateOptions: $.noop,
	_getCreateEventData: $.noop,
	_create: $.noop,
	_init: $.noop,

	destroy: function() {
		this._destroy();
		// we can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.unbind( this.eventNamespace )
			// 1.9 BC for #7810
			// TODO remove dual storage
			.removeData( this.widgetName )
			.removeData( this.widgetFullName )
			// support: jquery <1.6.3
			// http://bugs.jquery.com/ticket/9413
			.removeData( $.camelCase( this.widgetFullName ) );
		this.widget()
			.unbind( this.eventNamespace )
			.removeAttr( "aria-disabled" )
			.removeClass(
				this.widgetFullName + "-disabled " +
				"ui-state-disabled" );

		// clean up events and states
		this.bindings.unbind( this.eventNamespace );
		this.hoverable.removeClass( "ui-state-hover" );
		this.focusable.removeClass( "ui-state-focus" );
	},
	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key,
			parts,
			curOption,
			i;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( value === undefined ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( value === undefined ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.widget()
				.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
				.attr( "aria-disabled", value );
			this.hoverable.removeClass( "ui-state-hover" );
			this.focusable.removeClass( "ui-state-focus" );
		}

		return this;
	},

	enable: function() {
		return this._setOption( "disabled", false );
	},
	disable: function() {
		return this._setOption( "disabled", true );
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement,
			instance = this;

		// no suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// no element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			// accept selectors, DOM elements
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {
				// allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
							$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^(\w+)\s*(.*)$/ ),
				eventName = match[1] + instance.eventNamespace,
				selector = match[2];
			if ( selector ) {
				delegateElement.delegate( selector, eventName, handlerProxy );
			} else {
				element.bind( eventName, handlerProxy );
			}
		});
	},

	_off: function( element, eventName ) {
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
		element.unbind( eventName ).undelegate( eventName );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-hover" );
			},
			mouseleave: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-hover" );
			}
		});
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-focus" );
			},
			focusout: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-focus" );
			}
		});
	},

	_trigger: function( type, event, data ) {
		var prop, orig,
			callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}
		var hasOptions,
			effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;
		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}
		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;
		if ( options.delay ) {
			element.delay( options.delay );
		}
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue(function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			});
		}
	};
});

})( jQuery );

/*!
 * jQuery UI Tabs 1.10.3
 * http://jqueryui.com
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/tabs/
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */
(function( $, undefined ) {

var tabId = 0,
	rhash = /#.*$/;

function getNextTabId() {
	return ++tabId;
}

function isLocal( anchor ) {
	return anchor.hash.length > 1 &&
		decodeURIComponent( anchor.href.replace( rhash, "" ) ) ===
			decodeURIComponent( location.href.replace( rhash, "" ) );
}

$.widget( "ui.tabs", {
	version: "1.10.3",
	delay: 300,
	options: {
		active: null,
		collapsible: false,
		event: "click",
		heightStyle: "content",
		hide: null,
		show: null,

		// callbacks
		activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null
	},

	_create: function() {
		var that = this,
			options = this.options;

		this.running = false;

		this.element
			.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
			.toggleClass( "ui-tabs-collapsible", options.collapsible )
			// Prevent users from focusing disabled tabs via click
			.delegate( ".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function( event ) {
				if ( $( this ).is( ".ui-state-disabled" ) ) {
					event.preventDefault();
				}
			})
			// support: IE <9
			// Preventing the default action in mousedown doesn't prevent IE
			// from focusing the element, so if the anchor gets focused, blur.
			// We don't have to worry about focusing the previously focused
			// element since clicking on a non-focusable element should focus
			// the body anyway.
			.delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
					this.blur();
				}
			})
			;

		this._processTabs();
		options.active = this._initialActive();

		// Take disabling tabs via class attribute from HTML
		// into account and update option properly.
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				})
			) ).sort();
		}

		// check for length avoids error when initializing empty list
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
	},

	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {
			// check the fragment identifier in the URL
			if ( locationHash ) {
				this.tabs.each(function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				});
			}

			// check for a tab marked active via a class
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
			}

			// no active tab, set to false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}

		// handle numbers: negative, out of range
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// don't allow collapsible: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		/*jshint maxcomplexity:15*/
		var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
			case $.ui.keyCode.RIGHT:
			case $.ui.keyCode.DOWN:
				selectedIndex++;
				break;
			case $.ui.keyCode.UP:
			case $.ui.keyCode.LEFT:
				goingForward = false;
				selectedIndex--;
				break;
			case $.ui.keyCode.END:
				selectedIndex = this.anchors.length - 1;
				break;
			case $.ui.keyCode.HOME:
				selectedIndex = 0;
				break;
			case $.ui.keyCode.SPACE:
				// Activate only, no collapsing
				event.preventDefault();
				clearTimeout( this.activating );
				this._activate( selectedIndex );
				return;
			case $.ui.keyCode.ENTER:
				// Toggle (cancel delayed activation, allow collapsing)
				event.preventDefault();
				clearTimeout( this.activating );
				// Determine if we should collapse or activate
				this._activate( selectedIndex === this.options.active ? false : selectedIndex );
				return;
			default:
				return;
		}

		// Focus the appropriate tab, based on which key was pressed
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// Navigating with control key will prevent automatic activation
		if ( !event.ctrlKey ) {
			// Update aria-selected immediately so that AT think the tab is already selected.
			// Otherwise AT may confuse the user by stating that they need to activate the tab,
			// but the tab will already be activated by the time the announcement finishes.
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay(function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up moves focus to the current tab
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
			event.preventDefault();
			this.active.focus();
		}
	},

	// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).focus();
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "disabled" ) {
			// don't use the widget factory's disabled handling
			this._setupDisabled( value );
			return;
		}

		this._super( key, value);

		if ( key === "collapsible" ) {
			this.element.toggleClass( "ui-tabs-collapsible", value );
			// Setting collapsible: false while collapsed; open first panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_tabId: function( tab ) {
		return tab.attr( "aria-controls" ) || "ui-tabs-" + getNextTabId();
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// get disabled tabs from class attribute from HTML
		// this will get converted to a boolean if needed in _refresh()
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
			return lis.index( tab );
		});

		this._processTabs();

		// was collapsed or no tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();
		// was active, but active tab is gone
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
			// all remaining tabs are disabled
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();
			// activate previous tab
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}
		// was active, active tab still exists
		} else {
			// make sure active index is correct
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		this._setupDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr({
			"aria-selected": "false",
			tabIndex: -1
		});
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr({
				"aria-expanded": "false",
				"aria-hidden": "true"
			});

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.addClass( "ui-tabs-active ui-state-active" )
				.attr({
					"aria-selected": "true",
					tabIndex: 0
				});
			this._getPanelForTab( this.active )
				.show()
				.attr({
					"aria-expanded": "true",
					"aria-hidden": "false"
				});
		}
	},

	_processTabs: function() {
		var that = this;

		this.tablist = this._getList()
			.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
			.attr( "role", "tablist" );

		this.tabs = this.tablist.find( "> li:has(a[href])" )
//			.addClass( "ui-state-default ui-corner-top" )
			.addClass( "ui-state-default" )
			.attr({
				role: "tab",
				tabIndex: -1
			});

		this.anchors = this.tabs.map(function() {
				return $( "a", this )[ 0 ];
			})
			.addClass( "ui-tabs-anchor" )
			.attr({
				role: "presentation",
				tabIndex: -1
			});

		this.panels = $();

		this.anchors.each(function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			// inline tab
			if ( isLocal( anchor ) ) {
				selector = anchor.hash;
				panel = that.element.find( that._sanitizeSelector( selector ) );
			// remote tab
			} else {
				panelId = that._tabId( tab );
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "ui-tabs-aria-controls", originalAriaControls );
			}
			tab.attr({
				"aria-controls": selector.substring( 1 ),
				"aria-labelledby": anchorId
			});
			panel.attr( "aria-labelledby", anchorId );
		});

		this.panels
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
			.attr( "role", "tabpanel" );
	},

	// allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.element.find( "ol,ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
			.data( "ui-tabs-destroy", true );
	},

	_setupDisabled: function( disabled ) {
		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// disable tabs
		for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				$( li )
					.addClass( "ui-state-disabled" )
					.attr( "aria-disabled", "true" );
			} else {
				$( li )
					.removeClass( "ui-state-disabled" )
					.removeAttr( "aria-disabled" );
			}
		}

		this.options.disabled = disabled;
	},

	_setupEvents: function( event ) {
		var events = {
			click: function( event ) {
				event.preventDefault();
			}
		};
		if ( event ) {
			$.each( event.split(" "), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ) );
		this._on( this.anchors, events );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );

		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},

	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			maxHeight -= this.element.outerHeight() - this.element.height();

			this.element.siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});

			this.element.children().not( this.panels ).each(function() {
				maxHeight -= $( this ).outerHeight( true );
			});

			this.panels.each(function() {
				$( this ).height( Math.max( 0, maxHeight -
					$( this ).innerHeight() + $( this ).height() ) );
			})
			.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each(function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
			}).height( maxHeight );
		}
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "ui-state-disabled" ) ||
				// tab is already loading
				tab.hasClass( "ui-tabs-loading" ) ||
				// can't switch durning an animation
				this.running ||
				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||
				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// handles show/hide for selecting tabs
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "activate", event, eventData );
		}

		function show() {
			eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" ).removeClass("ui-state-default");

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}

		// start out by hiding, then showing, then completing
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" ).addClass("ui-state-default");
				show();
			});
		} else {
			eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" ).addClass("ui-state-default");
			toHide.hide();
			show();
		}

		toHide.attr({
			"aria-expanded": "false",
			"aria-hidden": "true"
		});
		eventData.oldTab.attr( "aria-selected", "false" );
		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow.attr({
			"aria-expanded": "true",
			"aria-hidden": "false"
		});
		eventData.newTab.attr({
			"aria-selected": "true",
			tabIndex: 0
		});
	},

	_activate: function( index ) {
		var anchor,
			active = this._findActive( index );

		// trying to activate the already active panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}

		// trying to collapse, simulate a click on the current active header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
		this._eventHandler({
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		});
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},

	_getIndex: function( index ) {
		// meta-function to give users option to provide a href string instead of a numerical index.
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
		}

		return index;
	},

	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );

		this.tablist
			.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
			.removeAttr( "role" );

		this.anchors
			.removeClass( "ui-tabs-anchor" )
			.removeAttr( "role" )
			.removeAttr( "tabIndex" )
			.removeUniqueId();

		this.tabs.add( this.panels ).each(function() {
			if ( $.data( this, "ui-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this )
					.removeClass( "ui-state-default ui-state-active ui-state-disabled " +
//						"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
						"ui-widget-content ui-tabs-active ui-tabs-panel" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-live" )
					.removeAttr( "aria-busy" )
					.removeAttr( "aria-selected" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "role" );
			}
		});

		this.tabs.each(function() {
			var li = $( this ),
				prev = li.data( "ui-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "ui-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		});

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				});
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				});
			}
		}
		this._setupDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setupDisabled( disabled );
	},

	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".ui-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			};

		// not remote
		if ( isLocal( anchor[ 0 ] ) ) {
			return;
		}

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

		// support: jQuery <1.8
		// jQuery <1.8 returns false if the request is canceled in beforeSend,
		// but as of 1.8, $.ajax() always returns a jqXHR object.
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			tab.addClass( "ui-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.success(function( response ) {
					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						panel.html( response );
						that._trigger( "load", event, eventData );
					}, 1 );
				})
				.complete(function( jqXHR, status ) {
					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						if ( status === "abort" ) {
							that.panels.stop( false, true );
						}

						tab.removeClass( "ui-tabs-loading" );
						panel.removeAttr( "aria-busy" );

						if ( jqXHR === that.xhr ) {
							delete that.xhr;
						}
					}, 1 );
				});
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {
			url: anchor.attr( "href" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
			}
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	}
});

})( jQuery );

/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */
 
var dateFormat = function () {
	var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function (val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) val = "0" + val;
			return val;
		};
 
	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc) {
		var dF = dateFormat;
 
		// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}
 
		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date;
		if (isNaN(date)) throw SyntaxError("invalid date");
 
		if(User.isUtcOn() == true) {
			if(date.isAmbiguous() && mask.indexOf('Z') < 0) {
				mask += ' Z';
			}
		}
		
		mask = String(dF.masks[mask] || mask || dF.masks["default"]);
 
		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == "UTC:") {
			mask = mask.slice(4);
			utc = true;
		}
 
		var	_ = utc ? "getUTC" : "get",
			d = date[_ + "Date"](),
			D = date[_ + "Day"](),
			m = date[_ + "Month"](),
			y = date[_ + "FullYear"](),
			H = date[_ + "Hours"](),
			M = date[_ + "Minutes"](),
			s = date[_ + "Seconds"](),
			L = date[_ + "Milliseconds"](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
				d:    d,
				dd:   pad(d),
				ddd:  dF.i18n.dayNames[D],
				dddd: dF.i18n.dayNames[D + 7],
				m:    m + 1,
				mm:   pad(m + 1),
				mmm:  dF.i18n.monthNames[m],
				mmmm: dF.i18n.monthNames[m + 12],
				yy:   String(y).slice(2),
				yyyy: y,
				h:    H % 12 || 12,
				hh:   pad(H % 12 || 12),
				H:    H,
				HH:   pad(H),
				M:    M,
				MM:   pad(M),
				s:    s,
				ss:   pad(s),
				l:    pad(L, 3),
				L:    pad(L > 99 ? Math.round(L / 10) : L),
				t:    H < 12 ? "a"  : "p",
				tt:   H < 12 ? "am" : "pm",
				T:    H < 12 ? "A"  : "P",
				TT:   H < 12 ? "AM" : "PM",
				Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
				o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
				S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};
 
		return mask.replace(token, function ($0) {
			return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
		});
	};
}();
 
// Some common format strings
dateFormat.masks = {
	"default":      "ddd mmm dd yyyy HH:MM:ss",
	shortDate:      "m/d/yy",
	shortDate2:     "mm/dd/yyyy",
	shortDate3:		"mm/dd/yy",
	mediumDate:     "mmm d, yyyy",
	longDate:       "mmmm d, yyyy",
	fullDate:       "dddd, mmmm d, yyyy",
	shortTime:      "h:MM TT",
	mediumTime:     "h:MM:ss TT",
	longTime:       "h:MM:ss TT Z",
	militaryTime:   "HH:MM",
	isoDate:        "yyyy-mm-dd",
	isoTime:        "HH:MM:ss",
	isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
	isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",
	longDateTime: 	"mm/dd/yyyy h:MM:ss TT Z",
	longDateTime2:	"mm/dd/yy HH:MM",
	longDateTime3:	"mm/dd/yyyy HH:MM",
	shortDateTime:	"mm/dd h:MM TT"
};
 
// Internationalization strings
dateFormat.i18n = {
	dayNames: [
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
		"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
	],
	monthNames: [
		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
	]
};
 
var isAmbiguousHour = function () {
	return function(aDate) {
		var originalDate = aDate;
		var previousHourDate = new Date(aDate);
		previousHourDate.setTime(originalDate.getTime()-3600000);
		var futureHourDate = new Date(aDate);
		futureHourDate.setTime(originalDate.getTime()+3600000);

		var originalHour = originalDate.getHours();
		if (originalHour == previousHourDate.getHours() || originalHour == futureHourDate.getHours()) {
			return true;
		}
		else {
			return false;
		}
	};
}();
 
// For convenience...
Date.prototype.format = function (mask, utc) {
	return dateFormat(this, mask, utc);
};

Date.prototype.isAmbiguous = function () {
	return isAmbiguousHour(this);
};
 
// For i18n formatting...
Date.prototype.setISO8601 = function (string) {
    var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +
        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?" +
        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
    var d = string.match(new RegExp(regexp));
 
    var offset = 0;
    var date = new Date(d[1], 0, 1);
 
    if (d[3]) { date.setMonth(d[3] - 1); }
    if (d[5]) { date.setDate(d[5]); }
    if (d[7]) { date.setHours(d[7]); }
    if (d[8]) { date.setMinutes(d[8]); }
    if (d[10]) { date.setSeconds(d[10]); }
    if (d[12]) { date.setMilliseconds(Number("0." + d[12]) * 1000); }
    if (d[14]) {
        offset = (Number(d[16]) * 60) + Number(d[17]);
        offset *= ((d[15] == '-') ? 1 : -1);
    }
 
    offset -= date.getTimezoneOffset();
    time = (Number(date) + (offset * 60 * 1000));
    this.setTime(Number(time));
};
/**
* hoverIntent is similar to jQuery's built-in "hover" function except that
* instead of firing the onMouseOver event immediately, hoverIntent checks
* to see if the user's mouse has slowed down (beneath the sensitivity
* threshold) before firing the onMouseOver event.
* 
* hoverIntent r6 // 2011.02.26 // jQuery 1.5.1+
* <http://cherne.net/brian/resources/jquery.hoverIntent.html>
* 
* hoverIntent is currently available for use in all personal or commercial 
* projects under both MIT and GPL licenses. This means that you can choose 
* the license that best suits your project, and use it accordingly.
* 
* // basic usage (just like .hover) receives onMouseOver and onMouseOut functions
* $("ul li").hoverIntent( showNav , hideNav );
* 
* // advanced usage receives configuration object only
* $("ul li").hoverIntent({
*	sensitivity: 7, // number = sensitivity threshold (must be 1 or higher)
*	interval: 100,   // number = milliseconds of polling interval
*	over: showNav,  // function = onMouseOver callback (required)
*	timeout: 0,   // number = milliseconds delay before onMouseOut function call
*	out: hideNav    // function = onMouseOut callback (required)
* });
* 
* @param  f  onMouseOver function || An object with configuration options
* @param  g  onMouseOut function  || Nothing (use configuration options object)
* @author    Brian Cherne brian(at)cherne(dot)net
*/
(function($) {
	$.fn.hoverIntent = function(f,g) {
		// default configuration options
		var cfg = {
			sensitivity: 7,
			interval: 100,
			timeout: 0
		};
		// override configuration options with user supplied object
		cfg = $.extend(cfg, g ? { over: f, out: g } : f );

		// instantiate variables
		// cX, cY = current X and Y position of mouse, updated by mousemove event
		// pX, pY = previous X and Y position of mouse, set by mouseover and polling interval
		var cX, cY, pX, pY;

		// A private function for getting mouse position
		var track = function(ev) {
			cX = ev.pageX;
			cY = ev.pageY;
		};

		// A private function for comparing current and previous mouse position
		var compare = function(ev,ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			// compare mouse positions to see if they've crossed the threshold
			if ( ( Math.abs(pX-cX) + Math.abs(pY-cY) ) < cfg.sensitivity ) {
				$(ob).unbind("mousemove",track);
				// set hoverIntent state to true (so mouseOut can be called)
				ob.hoverIntent_s = 1;
				return cfg.over.apply(ob,[ev]);
			} else {
				// set previous coordinates for next time
				pX = cX; pY = cY;
				// use self-calling timeout, guarantees intervals are spaced out properly (avoids JavaScript timer bugs)
				ob.hoverIntent_t = setTimeout( function(){compare(ev, ob);} , cfg.interval );
			}
		};

		// A private function for delaying the mouseOut function
		var delay = function(ev,ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			ob.hoverIntent_s = 0;
			return cfg.out.apply(ob,[ev]);
		};

		// A private function for handling mouse 'hovering'
		var handleHover = function(e) {

			// copy objects to be passed into t (required for event object to be passed in IE)
			var ev = jQuery.extend({},e);
			var ob = this;

			// cancel hoverIntent timer if it exists
			if (ob.hoverIntent_t) { ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t); }

			// if e.type == "mouseenter"
			if (e.type == "mouseenter") {
				// set "previous" X and Y position based on initial entry point
				pX = ev.pageX; pY = ev.pageY;
				// update "current" X and Y position based on mousemove
				$(ob).bind("mousemove",track);
				// start polling interval (self-calling timeout) to compare mouse coordinates over time
				if (ob.hoverIntent_s != 1) { ob.hoverIntent_t = setTimeout( function(){compare(ev,ob);} , cfg.interval );}

			// else e.type == "mouseleave"
			} else {
				// unbind expensive mousemove event
				$(ob).unbind("mousemove",track);
				// if hoverIntent state is true, then call the mouseOut function after the specified delay
				if (ob.hoverIntent_s == 1) { ob.hoverIntent_t = setTimeout( function(){delay(ev,ob);} , cfg.timeout );}
			}
		};

		// bind the function to the two event listeners
		return this.bind('mouseenter',handleHover).bind('mouseleave',handleHover);
	};
})(jQuery);

//! moment.js
//! version : 2.9.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(a){function b(a,b,c){switch(arguments.length){case 2:return null!=a?a:b;case 3:return null!=a?a:null!=b?b:c;default:throw new Error("Implement me")}}function c(a,b){return Bb.call(a,b)}function d(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function e(a){vb.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+a)}function f(a,b){var c=!0;return o(function(){return c&&(e(a),c=!1),b.apply(this,arguments)},b)}function g(a,b){sc[a]||(e(b),sc[a]=!0)}function h(a,b){return function(c){return r(a.call(this,c),b)}}function i(a,b){return function(c){return this.localeData().ordinal(a.call(this,c),b)}}function j(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)}function k(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}function l(){}function m(a,b){b!==!1&&H(a),p(this,a),this._d=new Date(+a._d),uc===!1&&(uc=!0,vb.updateOffset(this),uc=!1)}function n(a){var b=A(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=vb.localeData(),this._bubble()}function o(a,b){for(var d in b)c(b,d)&&(a[d]=b[d]);return c(b,"toString")&&(a.toString=b.toString),c(b,"valueOf")&&(a.valueOf=b.valueOf),a}function p(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=b._pf),"undefined"!=typeof b._locale&&(a._locale=b._locale),Kb.length>0)for(c in Kb)d=Kb[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function q(a){return 0>a?Math.ceil(a):Math.floor(a)}function r(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function s(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function t(a,b){var c;return b=M(b,a),a.isBefore(b)?c=s(a,b):(c=s(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function u(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(g(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=vb.duration(c,d),v(this,e,a),this}}function v(a,b,c,d){var e=b._milliseconds,f=b._days,g=b._months;d=null==d?!0:d,e&&a._d.setTime(+a._d+e*c),f&&pb(a,"Date",ob(a,"Date")+f*c),g&&nb(a,ob(a,"Month")+g*c),d&&vb.updateOffset(a,f||g)}function w(a){return"[object Array]"===Object.prototype.toString.call(a)}function x(a){return"[object Date]"===Object.prototype.toString.call(a)||a instanceof Date}function y(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&C(a[d])!==C(b[d]))&&g++;return g+f}function z(a){if(a){var b=a.toLowerCase().replace(/(.)s$/,"$1");a=lc[a]||mc[b]||b}return a}function A(a){var b,d,e={};for(d in a)c(a,d)&&(b=z(d),b&&(e[b]=a[d]));return e}function B(b){var c,d;if(0===b.indexOf("week"))c=7,d="day";else{if(0!==b.indexOf("month"))return;c=12,d="month"}vb[b]=function(e,f){var g,h,i=vb._locale[b],j=[];if("number"==typeof e&&(f=e,e=a),h=function(a){var b=vb().utc().set(d,a);return i.call(vb._locale,b,e||"")},null!=f)return h(f);for(g=0;c>g;g++)j.push(h(g));return j}}function C(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function D(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function E(a,b,c){return jb(vb([a,11,31+b-c]),b,c).week}function F(a){return G(a)?366:365}function G(a){return a%4===0&&a%100!==0||a%400===0}function H(a){var b;a._a&&-2===a._pf.overflow&&(b=a._a[Db]<0||a._a[Db]>11?Db:a._a[Eb]<1||a._a[Eb]>D(a._a[Cb],a._a[Db])?Eb:a._a[Fb]<0||a._a[Fb]>24||24===a._a[Fb]&&(0!==a._a[Gb]||0!==a._a[Hb]||0!==a._a[Ib])?Fb:a._a[Gb]<0||a._a[Gb]>59?Gb:a._a[Hb]<0||a._a[Hb]>59?Hb:a._a[Ib]<0||a._a[Ib]>999?Ib:-1,a._pf._overflowDayOfYear&&(Cb>b||b>Eb)&&(b=Eb),a._pf.overflow=b)}function I(b){return null==b._isValid&&(b._isValid=!isNaN(b._d.getTime())&&b._pf.overflow<0&&!b._pf.empty&&!b._pf.invalidMonth&&!b._pf.nullInput&&!b._pf.invalidFormat&&!b._pf.userInvalidated,b._strict&&(b._isValid=b._isValid&&0===b._pf.charsLeftOver&&0===b._pf.unusedTokens.length&&b._pf.bigHour===a)),b._isValid}function J(a){return a?a.toLowerCase().replace("_","-"):a}function K(a){for(var b,c,d,e,f=0;f<a.length;){for(e=J(a[f]).split("-"),b=e.length,c=J(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=L(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&y(e,c,!0)>=b-1)break;b--}f++}return null}function L(a){var b=null;if(!Jb[a]&&Lb)try{b=vb.locale(),require("./locale/"+a),vb.locale(b)}catch(c){}return Jb[a]}function M(a,b){var c,d;return b._isUTC?(c=b.clone(),d=(vb.isMoment(a)||x(a)?+a:+vb(a))-+c,c._d.setTime(+c._d+d),vb.updateOffset(c,!1),c):vb(a).local()}function N(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function O(a){var b,c,d=a.match(Pb);for(b=0,c=d.length;c>b;b++)d[b]=rc[d[b]]?rc[d[b]]:N(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function P(a,b){return a.isValid()?(b=Q(b,a.localeData()),nc[b]||(nc[b]=O(b)),nc[b](a)):a.localeData().invalidDate()}function Q(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Qb.lastIndex=0;d>=0&&Qb.test(a);)a=a.replace(Qb,c),Qb.lastIndex=0,d-=1;return a}function R(a,b){var c,d=b._strict;switch(a){case"Q":return _b;case"DDDD":return bc;case"YYYY":case"GGGG":case"gggg":return d?cc:Tb;case"Y":case"G":case"g":return ec;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return d?dc:Ub;case"S":if(d)return _b;case"SS":if(d)return ac;case"SSS":if(d)return bc;case"DDD":return Sb;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Wb;case"a":case"A":return b._locale._meridiemParse;case"x":return Zb;case"X":return $b;case"Z":case"ZZ":return Xb;case"T":return Yb;case"SSSS":return Vb;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return d?ac:Rb;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Rb;case"Do":return d?b._locale._ordinalParse:b._locale._ordinalParseLenient;default:return c=new RegExp($(Z(a.replace("\\","")),"i"))}}function S(a){a=a||"";var b=a.match(Xb)||[],c=b[b.length-1]||[],d=(c+"").match(jc)||["-",0,0],e=+(60*d[1])+C(d[2]);return"+"===d[0]?e:-e}function T(a,b,c){var d,e=c._a;switch(a){case"Q":null!=b&&(e[Db]=3*(C(b)-1));break;case"M":case"MM":null!=b&&(e[Db]=C(b)-1);break;case"MMM":case"MMMM":d=c._locale.monthsParse(b,a,c._strict),null!=d?e[Db]=d:c._pf.invalidMonth=b;break;case"D":case"DD":null!=b&&(e[Eb]=C(b));break;case"Do":null!=b&&(e[Eb]=C(parseInt(b.match(/\d{1,2}/)[0],10)));break;case"DDD":case"DDDD":null!=b&&(c._dayOfYear=C(b));break;case"YY":e[Cb]=vb.parseTwoDigitYear(b);break;case"YYYY":case"YYYYY":case"YYYYYY":e[Cb]=C(b);break;case"a":case"A":c._meridiem=b;break;case"h":case"hh":c._pf.bigHour=!0;case"H":case"HH":e[Fb]=C(b);break;case"m":case"mm":e[Gb]=C(b);break;case"s":case"ss":e[Hb]=C(b);break;case"S":case"SS":case"SSS":case"SSSS":e[Ib]=C(1e3*("0."+b));break;case"x":c._d=new Date(C(b));break;case"X":c._d=new Date(1e3*parseFloat(b));break;case"Z":case"ZZ":c._useUTC=!0,c._tzm=S(b);break;case"dd":case"ddd":case"dddd":d=c._locale.weekdaysParse(b),null!=d?(c._w=c._w||{},c._w.d=d):c._pf.invalidWeekday=b;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":a=a.substr(0,1);case"gggg":case"GGGG":case"GGGGG":a=a.substr(0,2),b&&(c._w=c._w||{},c._w[a]=C(b));break;case"gg":case"GG":c._w=c._w||{},c._w[a]=vb.parseTwoDigitYear(b)}}function U(a){var c,d,e,f,g,h,i;c=a._w,null!=c.GG||null!=c.W||null!=c.E?(g=1,h=4,d=b(c.GG,a._a[Cb],jb(vb(),1,4).year),e=b(c.W,1),f=b(c.E,1)):(g=a._locale._week.dow,h=a._locale._week.doy,d=b(c.gg,a._a[Cb],jb(vb(),g,h).year),e=b(c.w,1),null!=c.d?(f=c.d,g>f&&++e):f=null!=c.e?c.e+g:g),i=kb(d,e,f,h,g),a._a[Cb]=i.year,a._dayOfYear=i.dayOfYear}function V(a){var c,d,e,f,g=[];if(!a._d){for(e=X(a),a._w&&null==a._a[Eb]&&null==a._a[Db]&&U(a),a._dayOfYear&&(f=b(a._a[Cb],e[Cb]),a._dayOfYear>F(f)&&(a._pf._overflowDayOfYear=!0),d=fb(f,0,a._dayOfYear),a._a[Db]=d.getUTCMonth(),a._a[Eb]=d.getUTCDate()),c=0;3>c&&null==a._a[c];++c)a._a[c]=g[c]=e[c];for(;7>c;c++)a._a[c]=g[c]=null==a._a[c]?2===c?1:0:a._a[c];24===a._a[Fb]&&0===a._a[Gb]&&0===a._a[Hb]&&0===a._a[Ib]&&(a._nextDay=!0,a._a[Fb]=0),a._d=(a._useUTC?fb:eb).apply(null,g),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[Fb]=24)}}function W(a){var b;a._d||(b=A(a._i),a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],V(a))}function X(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function Y(b){if(b._f===vb.ISO_8601)return void ab(b);b._a=[],b._pf.empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,j=0;for(e=Q(b._f,b._locale).match(Pb)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(R(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&b._pf.unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),j+=d.length),rc[f]?(d?b._pf.empty=!1:b._pf.unusedTokens.push(f),T(f,d,b)):b._strict&&!d&&b._pf.unusedTokens.push(f);b._pf.charsLeftOver=i-j,h.length>0&&b._pf.unusedInput.push(h),b._pf.bigHour===!0&&b._a[Fb]<=12&&(b._pf.bigHour=a),b._a[Fb]=k(b._locale,b._a[Fb],b._meridiem),V(b),H(b)}function Z(a){return a.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e})}function $(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function _(a){var b,c,e,f,g;if(0===a._f.length)return a._pf.invalidFormat=!0,void(a._d=new Date(0/0));for(f=0;f<a._f.length;f++)g=0,b=p({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._pf=d(),b._f=a._f[f],Y(b),I(b)&&(g+=b._pf.charsLeftOver,g+=10*b._pf.unusedTokens.length,b._pf.score=g,(null==e||e>g)&&(e=g,c=b));o(a,c||b)}function ab(a){var b,c,d=a._i,e=fc.exec(d);if(e){for(a._pf.iso=!0,b=0,c=hc.length;c>b;b++)if(hc[b][1].exec(d)){a._f=hc[b][0]+(e[6]||" ");break}for(b=0,c=ic.length;c>b;b++)if(ic[b][1].exec(d)){a._f+=ic[b][0];break}d.match(Xb)&&(a._f+="Z"),Y(a)}else a._isValid=!1}function bb(a){ab(a),a._isValid===!1&&(delete a._isValid,vb.createFromInputFallback(a))}function cb(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function db(b){var c,d=b._i;d===a?b._d=new Date:x(d)?b._d=new Date(+d):null!==(c=Mb.exec(d))?b._d=new Date(+c[1]):"string"==typeof d?bb(b):w(d)?(b._a=cb(d.slice(0),function(a){return parseInt(a,10)}),V(b)):"object"==typeof d?W(b):"number"==typeof d?b._d=new Date(d):vb.createFromInputFallback(b)}function eb(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function fb(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function gb(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function hb(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function ib(a,b,c){var d=vb.duration(a).abs(),e=Ab(d.as("s")),f=Ab(d.as("m")),g=Ab(d.as("h")),h=Ab(d.as("d")),i=Ab(d.as("M")),j=Ab(d.as("y")),k=e<oc.s&&["s",e]||1===f&&["m"]||f<oc.m&&["mm",f]||1===g&&["h"]||g<oc.h&&["hh",g]||1===h&&["d"]||h<oc.d&&["dd",h]||1===i&&["M"]||i<oc.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,hb.apply({},k)}function jb(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=vb(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function kb(a,b,c,d,e){var f,g,h=fb(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:F(a-1)+g}}function lb(b){var c,d=b._i,e=b._f;return b._locale=b._locale||vb.localeData(b._l),null===d||e===a&&""===d?vb.invalid({nullInput:!0}):("string"==typeof d&&(b._i=d=b._locale.preparse(d)),vb.isMoment(d)?new m(d,!0):(e?w(e)?_(b):Y(b):db(b),c=new m(b),c._nextDay&&(c.add(1,"d"),c._nextDay=a),c))}function mb(a,b){var c,d;if(1===b.length&&w(b[0])&&(b=b[0]),!b.length)return vb();for(c=b[0],d=1;d<b.length;++d)b[d][a](c)&&(c=b[d]);return c}function nb(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),D(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function ob(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function pb(a,b,c){return"Month"===b?nb(a,c):a._d["set"+(a._isUTC?"UTC":"")+b](c)}function qb(a,b){return function(c){return null!=c?(pb(this,a,c),vb.updateOffset(this,b),this):ob(this,a)}}function rb(a){return 400*a/146097}function sb(a){return 146097*a/400}function tb(a){vb.duration.fn[a]=function(){return this._data[a]}}function ub(a){"undefined"==typeof ender&&(wb=zb.moment,zb.moment=a?f("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",vb):vb)}for(var vb,wb,xb,yb="2.9.0",zb="undefined"==typeof global||"undefined"!=typeof window&&window!==global.window?this:global,Ab=Math.round,Bb=Object.prototype.hasOwnProperty,Cb=0,Db=1,Eb=2,Fb=3,Gb=4,Hb=5,Ib=6,Jb={},Kb=[],Lb="undefined"!=typeof module&&module&&module.exports,Mb=/^\/?Date\((\-?\d+)/i,Nb=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Ob=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Pb=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,Qb=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Rb=/\d\d?/,Sb=/\d{1,3}/,Tb=/\d{1,4}/,Ub=/[+\-]?\d{1,6}/,Vb=/\d+/,Wb=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Xb=/Z|[\+\-]\d\d:?\d\d/gi,Yb=/T/i,Zb=/[\+\-]?\d+/,$b=/[\+\-]?\d+(\.\d{1,3})?/,_b=/\d/,ac=/\d\d/,bc=/\d{3}/,cc=/\d{4}/,dc=/[+-]?\d{6}/,ec=/[+-]?\d+/,fc=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,gc="YYYY-MM-DDTHH:mm:ssZ",hc=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],ic=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],jc=/([\+\-]|\d\d)/gi,kc=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),lc={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},mc={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},nc={},oc={s:45,m:45,h:22,d:26,M:11},pc="DDD w W M D d".split(" "),qc="M D H h m s w W".split(" "),rc={M:function(){return this.month()+1},MMM:function(a){return this.localeData().monthsShort(this,a)},MMMM:function(a){return this.localeData().months(this,a)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(a){return this.localeData().weekdaysMin(this,a)},ddd:function(a){return this.localeData().weekdaysShort(this,a)},dddd:function(a){return this.localeData().weekdays(this,a)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return r(this.year()%100,2)},YYYY:function(){return r(this.year(),4)},YYYYY:function(){return r(this.year(),5)},YYYYYY:function(){var a=this.year(),b=a>=0?"+":"-";return b+r(Math.abs(a),6)},gg:function(){return r(this.weekYear()%100,2)},gggg:function(){return r(this.weekYear(),4)},ggggg:function(){return r(this.weekYear(),5)},GG:function(){return r(this.isoWeekYear()%100,2)},GGGG:function(){return r(this.isoWeekYear(),4)},GGGGG:function(){return r(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return C(this.milliseconds()/100)},SS:function(){return r(C(this.milliseconds()/10),2)},SSS:function(){return r(this.milliseconds(),3)},SSSS:function(){return r(this.milliseconds(),3)},Z:function(){var a=this.utcOffset(),b="+";return 0>a&&(a=-a,b="-"),b+r(C(a/60),2)+":"+r(C(a)%60,2)},ZZ:function(){var a=this.utcOffset(),b="+";return 0>a&&(a=-a,b="-"),b+r(C(a/60),2)+r(C(a)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},x:function(){return this.valueOf()},X:function(){return this.unix()},Q:function(){return this.quarter()}},sc={},tc=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"],uc=!1;pc.length;)xb=pc.pop(),rc[xb+"o"]=i(rc[xb],xb);for(;qc.length;)xb=qc.pop(),rc[xb+xb]=h(rc[xb],2);rc.DDDD=h(rc.DDD,3),o(l.prototype,{set:function(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(a){return this._months[a.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(a){return this._monthsShort[a.month()]},monthsParse:function(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){if(e=vb.utc([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(a){return this._weekdays[a.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(a){return this._weekdaysShort[a.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(a){return this._weekdaysMin[a.day()]},weekdaysParse:function(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=vb([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b},_longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b},isPM:function(a){return"p"===(a+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(a,b,c){var d=this._calendar[a];return"function"==typeof d?d.apply(b,[c]):d},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)},pastFuture:function(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)},ordinal:function(a){return this._ordinal.replace("%d",a)},_ordinal:"%d",_ordinalParse:/\d{1,2}/,preparse:function(a){return a},postformat:function(a){return a},week:function(a){return jb(a,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},firstDayOfWeek:function(){return this._week.dow},firstDayOfYear:function(){return this._week.doy},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),vb=function(b,c,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._i=b,g._f=c,g._l=e,g._strict=f,g._isUTC=!1,g._pf=d(),lb(g)},vb.suppressDeprecationWarnings=!1,vb.createFromInputFallback=f("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),vb.min=function(){var a=[].slice.call(arguments,0);return mb("isBefore",a)},vb.max=function(){var a=[].slice.call(arguments,0);return mb("isAfter",a)},vb.utc=function(b,c,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._useUTC=!0,g._isUTC=!0,g._l=e,g._i=b,g._f=c,g._strict=f,g._pf=d(),lb(g).utc()},vb.unix=function(a){return vb(1e3*a)},vb.duration=function(a,b){var d,e,f,g,h=a,i=null;return vb.isDuration(a)?h={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(h={},b?h[b]=a:h.milliseconds=a):(i=Nb.exec(a))?(d="-"===i[1]?-1:1,h={y:0,d:C(i[Eb])*d,h:C(i[Fb])*d,m:C(i[Gb])*d,s:C(i[Hb])*d,ms:C(i[Ib])*d}):(i=Ob.exec(a))?(d="-"===i[1]?-1:1,f=function(a){var b=a&&parseFloat(a.replace(",","."));return(isNaN(b)?0:b)*d},h={y:f(i[2]),M:f(i[3]),d:f(i[4]),h:f(i[5]),m:f(i[6]),s:f(i[7]),w:f(i[8])}):null==h?h={}:"object"==typeof h&&("from"in h||"to"in h)&&(g=t(vb(h.from),vb(h.to)),h={},h.ms=g.milliseconds,h.M=g.months),e=new n(h),vb.isDuration(a)&&c(a,"_locale")&&(e._locale=a._locale),e},vb.version=yb,vb.defaultFormat=gc,vb.ISO_8601=function(){},vb.momentProperties=Kb,vb.updateOffset=function(){},vb.relativeTimeThreshold=function(b,c){return oc[b]===a?!1:c===a?oc[b]:(oc[b]=c,!0)},vb.lang=f("moment.lang is deprecated. Use moment.locale instead.",function(a,b){return vb.locale(a,b)}),vb.locale=function(a,b){var c;return a&&(c="undefined"!=typeof b?vb.defineLocale(a,b):vb.localeData(a),c&&(vb.duration._locale=vb._locale=c)),vb._locale._abbr},vb.defineLocale=function(a,b){return null!==b?(b.abbr=a,Jb[a]||(Jb[a]=new l),Jb[a].set(b),vb.locale(a),Jb[a]):(delete Jb[a],null)},vb.langData=f("moment.langData is deprecated. Use moment.localeData instead.",function(a){return vb.localeData(a)}),vb.localeData=function(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return vb._locale;if(!w(a)){if(b=L(a))return b;a=[a]}return K(a)},vb.isMoment=function(a){return a instanceof m||null!=a&&c(a,"_isAMomentObject")},vb.isDuration=function(a){return a instanceof n};for(xb=tc.length-1;xb>=0;--xb)B(tc[xb]);vb.normalizeUnits=function(a){return z(a)},vb.invalid=function(a){var b=vb.utc(0/0);return null!=a?o(b._pf,a):b._pf.userInvalidated=!0,b},vb.parseZone=function(){return vb.apply(null,arguments).parseZone()},vb.parseTwoDigitYear=function(a){return C(a)+(C(a)>68?1900:2e3)},vb.isDate=x,o(vb.fn=m.prototype,{clone:function(){return vb(this)},valueOf:function(){return+this._d-6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var a=vb(this).utc();return 0<a.year()&&a.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():P(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):P(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds()]},isValid:function(){return I(this)},isDSTShifted:function(){return this._a?this.isValid()&&y(this._a,(this._isUTC?vb.utc(this._a):vb(this._a)).toArray())>0:!1},parsingFlags:function(){return o({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(a){return this.utcOffset(0,a)},local:function(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(this._dateUtcOffset(),"m")),this},format:function(a){var b=P(this,a||vb.defaultFormat);return this.localeData().postformat(b)},add:u(1,"add"),subtract:u(-1,"subtract"),diff:function(a,b,c){var d,e,f=M(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=z(b),"year"===b||"month"===b||"quarter"===b?(e=j(this,f),"quarter"===b?e/=3:"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:q(e)},from:function(a,b){return vb.duration({to:this,from:a}).locale(this.locale()).humanize(!b)},fromNow:function(a){return this.from(vb(),a)},calendar:function(a){var b=a||vb(),c=M(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.localeData().calendar(e,this,vb(b)))},isLeapYear:function(){return G(this.year())},isDST:function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=gb(a,this.localeData()),this.add(a-b,"d")):b},month:qb("Month",!0),startOf:function(a){switch(a=z(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a?this.weekday(0):"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(b){return b=z(b),b===a||"millisecond"===b?this:this.startOf(b).add(1,"isoWeek"===b?"week":b).subtract(1,"ms")},isAfter:function(a,b){var c;return b=z("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=vb.isMoment(a)?a:vb(a),+this>+a):(c=vb.isMoment(a)?+a:+vb(a),c<+this.clone().startOf(b))},isBefore:function(a,b){var c;return b=z("undefined"!=typeof b?b:"millisecond"),"millisecond"===b?(a=vb.isMoment(a)?a:vb(a),+a>+this):(c=vb.isMoment(a)?+a:+vb(a),+this.clone().endOf(b)<c)},isBetween:function(a,b,c){return this.isAfter(a,c)&&this.isBefore(b,c)},isSame:function(a,b){var c;return b=z(b||"millisecond"),"millisecond"===b?(a=vb.isMoment(a)?a:vb(a),+this===+a):(c=+vb(a),+this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b))},min:f("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(a){return a=vb.apply(null,arguments),this>a?this:a}),max:f("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(a){return a=vb.apply(null,arguments),a>this?this:a}),zone:f("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",function(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}),utcOffset:function(a,b){var c,d=this._offset||0;return null!=a?("string"==typeof a&&(a=S(a)),Math.abs(a)<16&&(a=60*a),!this._isUTC&&b&&(c=this._dateUtcOffset()),this._offset=a,this._isUTC=!0,null!=c&&this.add(c,"m"),d!==a&&(!b||this._changeInProgress?v(this,vb.duration(a-d,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,vb.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?d:this._dateUtcOffset()},isLocal:function(){return!this._isUTC},isUtcOffset:function(){return this._isUTC},isUtc:function(){return this._isUTC&&0===this._offset},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(S(this._i)),this},hasAlignedHourOffset:function(a){return a=a?vb(a).utcOffset():0,(this.utcOffset()-a)%60===0},daysInMonth:function(){return D(this.year(),this.month())},dayOfYear:function(a){var b=Ab((vb(this).startOf("day")-vb(this).startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")},quarter:function(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)},weekYear:function(a){var b=jb(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")},isoWeekYear:function(a){var b=jb(this,1,4).year;return null==a?b:this.add(a-b,"y")},week:function(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")},isoWeek:function(a){var b=jb(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")},weekday:function(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")},isoWeekday:function(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)},isoWeeksInYear:function(){return E(this.year(),1,4)},weeksInYear:function(){var a=this.localeData()._week;return E(this.year(),a.dow,a.doy)},get:function(a){return a=z(a),this[a]()},set:function(a,b){var c;if("object"==typeof a)for(c in a)this.set(c,a[c]);else a=z(a),"function"==typeof this[a]&&this[a](b);return this},locale:function(b){var c;return b===a?this._locale._abbr:(c=vb.localeData(b),null!=c&&(this._locale=c),this)},lang:f("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(b){return b===a?this.localeData():this.locale(b)}),localeData:function(){return this._locale},_dateUtcOffset:function(){return 15*-Math.round(this._d.getTimezoneOffset()/15)}}),vb.fn.millisecond=vb.fn.milliseconds=qb("Milliseconds",!1),vb.fn.second=vb.fn.seconds=qb("Seconds",!1),vb.fn.minute=vb.fn.minutes=qb("Minutes",!1),vb.fn.hour=vb.fn.hours=qb("Hours",!0),vb.fn.date=qb("Date",!0),vb.fn.dates=f("dates accessor is deprecated. Use date instead.",qb("Date",!0)),vb.fn.year=qb("FullYear",!0),vb.fn.years=f("years accessor is deprecated. Use year instead.",qb("FullYear",!0)),vb.fn.days=vb.fn.day,vb.fn.months=vb.fn.month,vb.fn.weeks=vb.fn.week,vb.fn.isoWeeks=vb.fn.isoWeek,vb.fn.quarters=vb.fn.quarter,vb.fn.toJSON=vb.fn.toISOString,vb.fn.isUTC=vb.fn.isUtc,o(vb.duration.fn=n.prototype,{_bubble:function(){var a,b,c,d=this._milliseconds,e=this._days,f=this._months,g=this._data,h=0;g.milliseconds=d%1e3,a=q(d/1e3),g.seconds=a%60,b=q(a/60),g.minutes=b%60,c=q(b/60),g.hours=c%24,e+=q(c/24),h=q(rb(e)),e-=q(sb(h)),f+=q(e/30),e%=30,h+=q(f/12),f%=12,g.days=e,g.months=f,g.years=h},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return q(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*C(this._months/12)
},humanize:function(a){var b=ib(this,!a,this.localeData());return a&&(b=this.localeData().pastFuture(+this,b)),this.localeData().postformat(b)},add:function(a,b){var c=vb.duration(a,b);return this._milliseconds+=c._milliseconds,this._days+=c._days,this._months+=c._months,this._bubble(),this},subtract:function(a,b){var c=vb.duration(a,b);return this._milliseconds-=c._milliseconds,this._days-=c._days,this._months-=c._months,this._bubble(),this},get:function(a){return a=z(a),this[a.toLowerCase()+"s"]()},as:function(a){var b,c;if(a=z(a),"month"===a||"year"===a)return b=this._days+this._milliseconds/864e5,c=this._months+12*rb(b),"month"===a?c:c/12;switch(b=this._days+Math.round(sb(this._months/12)),a){case"week":return b/7+this._milliseconds/6048e5;case"day":return b+this._milliseconds/864e5;case"hour":return 24*b+this._milliseconds/36e5;case"minute":return 24*b*60+this._milliseconds/6e4;case"second":return 24*b*60*60+this._milliseconds/1e3;case"millisecond":return Math.floor(24*b*60*60*1e3)+this._milliseconds;default:throw new Error("Unknown unit "+a)}},lang:vb.fn.lang,locale:vb.fn.locale,toIsoString:f("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var a=Math.abs(this.years()),b=Math.abs(this.months()),c=Math.abs(this.days()),d=Math.abs(this.hours()),e=Math.abs(this.minutes()),f=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"},localeData:function(){return this._locale},toJSON:function(){return this.toISOString()}}),vb.duration.fn.toString=vb.duration.fn.toISOString;for(xb in kc)c(kc,xb)&&tb(xb.toLowerCase());vb.duration.fn.asMilliseconds=function(){return this.as("ms")},vb.duration.fn.asSeconds=function(){return this.as("s")},vb.duration.fn.asMinutes=function(){return this.as("m")},vb.duration.fn.asHours=function(){return this.as("h")},vb.duration.fn.asDays=function(){return this.as("d")},vb.duration.fn.asWeeks=function(){return this.as("weeks")},vb.duration.fn.asMonths=function(){return this.as("M")},vb.duration.fn.asYears=function(){return this.as("y")},vb.locale("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===C(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),function(a){a(vb)}(function(a){return a.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(a){return/^nm$/i.test(a)},meridiem:function(a,b,c){return 12>a?c?"vm":"VM":c?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}),function(a){a(vb)}(function(a){var b={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},c={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};return a.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}),function(a){a(vb)}(function(a){return a.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){var b={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},c={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},d=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&10>=a%100?3:a%100>=11?4:5},e={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},f=function(a){return function(b,c){var f=d(b),g=e[a][d(b)];return 2===f&&(g=g[c?0:1]),g.replace(/%d/i,b)}},g=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"];return a.defineLocale("ar",{months:g,monthsShort:g,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:f("s"),m:f("m"),mm:f("m"),h:f("h"),hh:f("h"),d:f("d"),dd:f("d"),M:f("M"),MM:f("M"),y:f("y"),yy:f("y")},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}),function(a){a(vb)}(function(a){var b={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};return a.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(a){return/^(gündüz|axşam)$/.test(a)},meridiem:function(a){return 4>a?"gecə":12>a?"səhər":17>a?"gündüz":"axşam"},ordinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(a){if(0===a)return a+"-ıncı";var c=a%10,d=a%100-c,e=a>=100?100:null;return a+(b[c]||b[d]||b[e])},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){function b(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(a,c,d){var e={mm:c?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:c?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===d?c?"хвіліна":"хвіліну":"h"===d?c?"гадзіна":"гадзіну":a+" "+b(e[d],+a)}function d(a,b){var c={nominative:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_"),accusative:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_")},d=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function e(a,b){var c={nominative:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),accusative:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_")},d=/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/.test(b)?"accusative":"nominative";return c[d][a.day()]}return a.defineLocale("be",{months:d,monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:e,weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., LT",LLLL:"dddd, D MMMM YYYY г., LT"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:c,mm:c,h:c,hh:c,d:"дзень",dd:c,M:"месяц",MM:c,y:"год",yy:c},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(a){return/^(дня|вечара)$/.test(a)},meridiem:function(a){return 4>a?"ночы":12>a?"раніцы":17>a?"дня":"вечара"},ordinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a%10!==2&&a%10!==3||a%100===12||a%100===13?a+"-ы":a+"-і";case"D":return a+"-га";default:return a}},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&20>c?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){var b={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},c={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};return a.defineLocale("bn",{months:"জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি".split("_"),weekdaysMin:"রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কএক সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(a){return a.replace(/[১২৩৪৫৬৭৮৯০]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},meridiemParse:/রাত|শকাল|দুপুর|বিকেল|রাত/,isPM:function(a){return/^(দুপুর|বিকেল|রাত)$/.test(a)},meridiem:function(a){return 4>a?"রাত":10>a?"শকাল":17>a?"দুপুর":20>a?"বিকেল":"রাত"},week:{dow:0,doy:6}})}),function(a){a(vb)}(function(a){var b={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},c={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};return a.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(a){return a.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,isPM:function(a){return/^(ཉིན་གུང|དགོང་དག|མཚན་མོ)$/.test(a)},meridiem:function(a){return 4>a?"མཚན་མོ":10>a?"ཞོགས་ཀས":17>a?"ཉིན་གུང":20>a?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}),function(a){a(vb)}(function(b){function c(a,b,c){var d={mm:"munutenn",MM:"miz",dd:"devezh"};return a+" "+f(d[c],a)}function d(a){switch(e(a)){case 1:case 3:case 4:case 5:case 9:return a+" bloaz";default:return a+" vloaz"}}function e(a){return a>9?e(a%10):a}function f(a,b){return 2===b?g(a):a}function g(b){var c={m:"v",b:"v",d:"z"};return c[b.charAt(0)]===a?b:c[b.charAt(0)]+b.substring(1)}return b.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY LT",LLLL:"dddd, D [a viz] MMMM YYYY LT"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:c,h:"un eur",hh:"%d eur",d:"un devezh",dd:c,M:"ur miz",MM:c,y:"ur bloaz",yy:d},ordinalParse:/\d{1,2}(añ|vet)/,ordinal:function(a){var b=1===a?"añ":"vet";return a+b},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}return a.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:b,mm:b,h:b,hh:b,d:"dan",dd:b,M:"mjesec",MM:b,y:"godinu",yy:b},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(a,b){var c=1===a?"r":2===a?"n":3===a?"r":4===a?"t":"è";return("w"===b||"W"===b)&&(c="a"),a+c},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a){return a>1&&5>a&&1!==~~(a/10)}function c(a,c,d,e){var f=a+" ";switch(d){case"s":return c||e?"pár sekund":"pár sekundami";case"m":return c?"minuta":e?"minutu":"minutou";case"mm":return c||e?f+(b(a)?"minuty":"minut"):f+"minutami";break;case"h":return c?"hodina":e?"hodinu":"hodinou";case"hh":return c||e?f+(b(a)?"hodiny":"hodin"):f+"hodinami";break;case"d":return c||e?"den":"dnem";case"dd":return c||e?f+(b(a)?"dny":"dní"):f+"dny";break;case"M":return c||e?"měsíc":"měsícem";case"MM":return c||e?f+(b(a)?"měsíce":"měsíců"):f+"měsíci";break;case"y":return c||e?"rok":"rokem";case"yy":return c||e?f+(b(a)?"roky":"let"):f+"lety"}}var d="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),e="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");return a.defineLocale("cs",{months:d,monthsShort:e,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(d,e),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("cv",{months:"кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав".split("_"),monthsShort:"кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кĕç_эрн_шăм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кç_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD-MM-YYYY",LL:"YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]",LLL:"YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT",LLLL:"dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ĕнер] LT [сехетре]",nextWeek:"[Çитес] dddd LT [сехетре]",lastWeek:"[Иртнĕ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(a){var b=/сехет$/i.exec(a)?"рен":/çул$/i.exec(a)?"тан":"ран";return a+b},past:"%s каялла",s:"пĕр-ик çеккунт",m:"пĕр минут",mm:"%d минут",h:"пĕр сехет",hh:"%d сехет",d:"пĕр кун",dd:"%d кун",M:"пĕр уйăх",MM:"%d уйăх",y:"пĕр çул",yy:"%d çул"},ordinalParse:/\d{1,2}-мĕш/,ordinal:"%d-мĕш",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},ordinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(a){var b=a,c="",d=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"];return b>20?c=40===b||50===b||60===b||80===b||100===b?"fed":"ain":b>0&&(c=d[b]),a+c},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd [d.] D. MMMM YYYY LT"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a,b,c){var d={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?d[c][0]:d[c][1]}return a.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT [Uhr]",sameElse:"L",nextDay:"[Morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[Gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:b,mm:"%d Minuten",h:b,hh:"%d Stunden",d:b,dd:b,M:b,MM:b,y:b,yy:b},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a,b,c){var d={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?d[c][0]:d[c][1]}return a.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT [Uhr]",sameElse:"L",nextDay:"[Morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[Gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:b,mm:"%d Minuten",h:b,hh:"%d Stunden",d:b,dd:b,M:b,MM:b,y:b,yy:b},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf("MMMM")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(a,b,c){return a>11?c?"μμ":"ΜΜ":c?"πμ":"ΠΜ"},isPM:function(a){return"μ"===(a+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(a,b){var c=this._calendarEl[a],d=b&&b.hours();return"function"==typeof c&&(c=c.apply(b)),c.replace("{}",d%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"D MMMM, YYYY",LLL:"D MMMM, YYYY LT",LLLL:"dddd, D MMMM, YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";
return a+c}})}),function(a){a(vb)}(function(a){return a.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),weekdaysShort:"Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D[-an de] MMMM, YYYY",LLL:"D[-an de] MMMM, YYYY LT",LLLL:"dddd, [la] D[-an de] MMMM, YYYY LT"},meridiemParse:/[ap]\.t\.m/i,isPM:function(a){return"p"===a.charAt(0).toLowerCase()},meridiem:function(a,b,c){return a>11?c?"p.t.m.":"P.T.M.":c?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"je %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},ordinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){var b="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),c="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");return a.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(a,d){return/-MMM-/.test(d)?c[a.month()]:b[a.month()]},weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a,b,c,d){var e={s:["mõne sekundi","mõni sekund","paar sekundit"],m:["ühe minuti","üks minut"],mm:[a+" minuti",a+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[a+" tunni",a+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[a+" kuu",a+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[a+" aasta",a+" aastat"]};return b?e[c][2]?e[c][2]:e[c][1]:d?e[c][0]:e[c][1]}return a.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:b,m:b,mm:b,h:b,hh:b,d:b,dd:"%d päeva",M:b,MM:b,y:b,yy:b},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] LT",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] LT",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] LT",llll:"ddd, YYYY[ko] MMM D[a] LT"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){var b={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},c={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};return a.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(a){return/بعد از ظهر/.test(a)},meridiem:function(a){return 12>a?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}),function(a){a(vb)}(function(a){function b(a,b,d,e){var f="";switch(d){case"s":return e?"muutaman sekunnin":"muutama sekunti";case"m":return e?"minuutin":"minuutti";case"mm":f=e?"minuutin":"minuuttia";break;case"h":return e?"tunnin":"tunti";case"hh":f=e?"tunnin":"tuntia";break;case"d":return e?"päivän":"päivä";case"dd":f=e?"päivän":"päivää";break;case"M":return e?"kuukauden":"kuukausi";case"MM":f=e?"kuukauden":"kuukautta";break;case"y":return e?"vuoden":"vuosi";case"yy":f=e?"vuoden":"vuotta"}return f=c(a,e)+" "+f}function c(a,b){return 10>a?b?e[a]:d[a]:a}var d="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),e=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",d[7],d[8],d[9]];return a.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] LT",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] LT",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] LT",llll:"ddd, Do MMM YYYY, [klo] LT"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:b,m:b,mm:b,h:b,hh:b,d:b,dd:b,M:b,MM:b,y:b,yy:b},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D. MMMM, YYYY LT"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")}})}),function(a){a(vb)}(function(a){return a.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){var b="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),c="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");return a.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(a,d){return/-MMM-/.test(d)?c[a.month()]:b[a.month()]},weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("gl",{months:"Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),monthsShort:"Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),weekdays:"Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),weekdaysShort:"Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(a){return"uns segundos"===a?"nuns segundos":"en "+a},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY LT",LLLL:"dddd, D [ב]MMMM YYYY LT",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(a){return 2===a?"שעתיים":a+" שעות"},d:"יום",dd:function(a){return 2===a?"יומיים":a+" ימים"},M:"חודש",MM:function(a){return 2===a?"חודשיים":a+" חודשים"},y:"שנה",yy:function(a){return 2===a?"שנתיים":a%10===0&&10!==a?a+" שנה":a+" שנים"}}})}),function(a){a(vb)}(function(a){var b={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},c={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};return a.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(a,b){return 12===a&&(a=0),"रात"===b?4>a?a:a+12:"सुबह"===b?a:"दोपहर"===b?a>=10?a:a+12:"शाम"===b?a+12:void 0},meridiem:function(a){return 4>a?"रात":10>a?"सुबह":17>a?"दोपहर":20>a?"शाम":"रात"},week:{dow:0,doy:6}})}),function(a){a(vb)}(function(a){function b(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}return a.defineLocale("hr",{months:"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),monthsShort:"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:b,mm:b,h:b,hh:b,d:"dan",dd:b,M:"mjesec",MM:b,y:"godinu",yy:b},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){function b(a,b,c,d){var e=a;switch(c){case"s":return d||b?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(d||b?" perc":" perce");case"mm":return e+(d||b?" perc":" perce");case"h":return"egy"+(d||b?" óra":" órája");case"hh":return e+(d||b?" óra":" órája");case"d":return"egy"+(d||b?" nap":" napja");case"dd":return e+(d||b?" nap":" napja");case"M":return"egy"+(d||b?" hónap":" hónapja");case"MM":return e+(d||b?" hónap":" hónapja");case"y":return"egy"+(d||b?" év":" éve");case"yy":return e+(d||b?" év":" éve")}return""}function c(a){return(a?"":"[múlt] ")+"["+d[this.day()]+"] LT[-kor]"}var d="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");return a.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D., LT",LLLL:"YYYY. MMMM D., dddd LT"},meridiemParse:/de|du/i,isPM:function(a){return"u"===a.charAt(1).toLowerCase()},meridiem:function(a,b,c){return 12>a?c===!0?"de":"DE":c===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return c.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return c.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:b,m:b,mm:b,h:b,hh:b,d:b,dd:b,M:b,MM:b,y:b,yy:b},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){function b(a,b){var c={nominative:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_"),accusative:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_")},d=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function c(a){var b="հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_");return b[a.month()]}function d(a){var b="կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_");return b[a.day()]}return a.defineLocale("hy-am",{months:b,monthsShort:c,weekdays:d,weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., LT",LLLL:"dddd, D MMMM YYYY թ., LT"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(a){return/^(ցերեկվա|երեկոյան)$/.test(a)},meridiem:function(a){return 4>a?"գիշերվա":12>a?"առավոտվա":17>a?"ցերեկվա":"երեկոյան"},ordinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(a,b){switch(b){case"DDD":case"w":case"W":case"DDDo":return 1===a?a+"-ին":a+"-րդ";default:return a}},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"LT.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] LT",LLLL:"dddd, D MMMM YYYY [pukul] LT"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"siang"===b?a>=11?a:a+12:"sore"===b||"malam"===b?a+12:void 0},meridiem:function(a){return 11>a?"pagi":15>a?"siang":19>a?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){function b(a){return a%100===11?!0:a%10===1?!1:!0}function c(a,c,d,e){var f=a+" ";switch(d){case"s":return c||e?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return c?"mínúta":"mínútu";case"mm":return b(a)?f+(c||e?"mínútur":"mínútum"):c?f+"mínúta":f+"mínútu";case"hh":return b(a)?f+(c||e?"klukkustundir":"klukkustundum"):f+"klukkustund";case"d":return c?"dagur":e?"dag":"degi";case"dd":return b(a)?c?f+"dagar":f+(e?"daga":"dögum"):c?f+"dagur":f+(e?"dag":"degi");case"M":return c?"mánuður":e?"mánuð":"mánuði";case"MM":return b(a)?c?f+"mánuðir":f+(e?"mánuði":"mánuðum"):c?f+"mánuður":f+(e?"mánuð":"mánuði");case"y":return c||e?"ár":"ári";case"yy":return b(a)?f+(c||e?"ár":"árum"):f+(c||e?"ár":"ári")}}return a.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd, D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:c,m:c,mm:c,h:"klukkustund",hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"D_L_Ma_Me_G_V_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?"tra":"in")+" "+a},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"LTs秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日LT",LLLL:"YYYY年M月D日LT dddd"},meridiemParse:/午前|午後/i,isPM:function(a){return"午後"===a},meridiem:function(a){return 12>a?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}),function(a){a(vb)}(function(a){function b(a,b){var c={nominative:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),accusative:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},d=/D[oD] *MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function c(a,b){var c={nominative:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),accusative:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_")},d=/(წინა|შემდეგ)/.test(b)?"accusative":"nominative";return c[d][a.day()]}return a.defineLocale("ka",{months:b,monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:c,weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(a){return/(წამი|წუთი|საათი|წელი)/.test(a)?a.replace(/ი$/,"ში"):a+"ში"},past:function(a){return/(წამი|წუთი|საათი|დღე|თვე)/.test(a)?a.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(a)?a.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},ordinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(a){return 0===a?a:1===a?a+"-ლი":20>a||100>=a&&a%20===0||a%100===0?"მე-"+a:a+"-ე"},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("km",{months:"មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysMin:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[ថ្ងៃនៈ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 LT",LLLL:"YYYY년 MMMM D일 dddd LT"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇초",ss:"%d초",m:"일분",mm:"%d분",h:"한시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한달",MM:"%d달",y:"일년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(a){return"오후"===a},meridiem:function(a){return 12>a?"오전":"오후"}})}),function(a){a(vb)}(function(a){function b(a,b,c){var d={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return b?d[c][0]:d[c][1]}function c(a){var b=a.substr(0,a.indexOf(" "));return e(b)?"a "+a:"an "+a}function d(a){var b=a.substr(0,a.indexOf(" "));return e(b)?"viru "+a:"virun "+a}function e(a){if(a=parseInt(a,10),isNaN(a))return!1;if(0>a)return!0;if(10>a)return a>=4&&7>=a?!0:!1;if(100>a){var b=a%10,c=a/10;return e(0===b?c:b)}if(1e4>a){for(;a>=10;)a/=10;return e(a)}return a/=1e3,e(a)}return a.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:c,past:d,s:"e puer Sekonnen",m:b,mm:"%d Minutten",h:b,hh:"%d Stonnen",d:b,dd:"%d Deeg",M:b,MM:"%d Méint",y:b,yy:"%d Joer"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a,b,c,d){return b?"kelios sekundės":d?"kelių sekundžių":"kelias sekundes"}function c(a,b,c,d){return b?e(c)[0]:d?e(c)[1]:e(c)[2]
}function d(a){return a%10===0||a>10&&20>a}function e(a){return h[a].split("_")}function f(a,b,f,g){var h=a+" ";return 1===a?h+c(a,b,f[0],g):b?h+(d(a)?e(f)[1]:e(f)[0]):g?h+e(f)[1]:h+(d(a)?e(f)[1]:e(f)[2])}function g(a,b){var c=-1===b.indexOf("dddd HH:mm"),d=i[a.day()];return c?d:d.substring(0,d.length-2)+"į"}var h={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"},i="sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_");return a.defineLocale("lt",{months:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:g,weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], LT [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, LT [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], LT [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, LT [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:b,m:c,mm:f,h:c,hh:f,d:c,dd:f,M:c,MM:f,y:c,yy:f},ordinalParse:/\d{1,2}-oji/,ordinal:function(a){return a+"-oji"},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a,b,c){var d=a.split("_");return c?b%10===1&&11!==b?d[2]:d[3]:b%10===1&&11!==b?d[0]:d[1]}function c(a,c,e){return a+" "+b(d[e],a,c)}var d={mm:"minūti_minūtes_minūte_minūtes",hh:"stundu_stundas_stunda_stundas",dd:"dienu_dienas_diena_dienas",MM:"mēnesi_mēnešus_mēnesis_mēneši",yy:"gadu_gadus_gads_gadi"};return a.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, LT",LLLL:"YYYY. [gada] D. MMMM, dddd, LT"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"%s vēlāk",past:"%s agrāk",s:"dažas sekundes",m:"minūti",mm:c,h:"stundu",hh:c,d:"dienu",dd:c,M:"mēnesi",MM:c,y:"gadu",yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Во изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Во изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&20>c?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,isPM:function(a){return/^(ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി)$/.test(a)},meridiem:function(a){return 4>a?"രാത്രി":12>a?"രാവിലെ":17>a?"ഉച്ച കഴിഞ്ഞ്":20>a?"വൈകുന്നേരം":"രാത്രി"}})}),function(a){a(vb)}(function(a){var b={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},c={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};return a.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%s नंतर",past:"%s पूर्वी",s:"सेकंद",m:"एक मिनिट",mm:"%d मिनिटे",h:"एक तास",hh:"%d तास",d:"एक दिवस",dd:"%d दिवस",M:"एक महिना",MM:"%d महिने",y:"एक वर्ष",yy:"%d वर्षे"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(a,b){return 12===a&&(a=0),"रात्री"===b?4>a?a:a+12:"सकाळी"===b?a:"दुपारी"===b?a>=10?a:a+12:"सायंकाळी"===b?a+12:void 0},meridiem:function(a){return 4>a?"रात्री":10>a?"सकाळी":17>a?"दुपारी":20>a?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}),function(a){a(vb)}(function(a){return a.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"LT.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] LT",LLLL:"dddd, D MMMM YYYY [pukul] LT"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"tengahari"===b?a>=11?a:a+12:"petang"===b||"malam"===b?a+12:void 0},meridiem:function(a){return 11>a?"pagi":15>a?"tengahari":19>a?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){var b={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},c={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};return a.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(a){return a.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tirs_ons_tors_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"H.mm",LTS:"LT.ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){var b={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},c={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};return a.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आइ._सो._मङ्_बु._बि._शु._श.".split("_"),longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},meridiemParse:/राती|बिहान|दिउँसो|बेलुका|साँझ|राती/,meridiemHour:function(a,b){return 12===a&&(a=0),"राती"===b?3>a?a:a+12:"बिहान"===b?a:"दिउँसो"===b?a>=10?a:a+12:"बेलुका"===b||"साँझ"===b?a+12:void 0},meridiem:function(a){return 3>a?"राती":10>a?"बिहान":15>a?"दिउँसो":18>a?"बेलुका":20>a?"साँझ":"राती"},calendar:{sameDay:"[आज] LT",nextDay:"[भोली] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडी",s:"केही समय",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){var b="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),c="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");return a.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(a,d){return/-MMM-/.test(d)?c[a.month()]:b[a.month()]},weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s sidan",s:"nokre sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a){return 5>a%10&&a%10>1&&~~(a/10)%10!==1}function c(a,c,d){var e=a+" ";switch(d){case"m":return c?"minuta":"minutę";case"mm":return e+(b(a)?"minuty":"minut");case"h":return c?"godzina":"godzinę";case"hh":return e+(b(a)?"godziny":"godzin");case"MM":return e+(b(a)?"miesiące":"miesięcy");case"yy":return e+(b(a)?"lata":"lat")}}var d="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),e="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");return a.defineLocale("pl",{months:function(a,b){return/D MMMM/.test(b)?e[a.month()]:d[a.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"N_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:c,mm:c,h:c,hh:c,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:c,y:"rok",yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] LT",LLLL:"dddd, D [de] MMMM [de] YYYY [às] LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"})}),function(a){a(vb)}(function(a){return a.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a,b,c){var d={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},e=" ";return(a%100>=20||a>=100&&a%100===0)&&(e=" de "),a+e+d[c]}return a.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:b,h:"o oră",hh:b,d:"o zi",dd:b,M:"o lună",MM:b,y:"un an",yy:b},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){function b(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(a,c,d){var e={mm:c?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===d?c?"минута":"минуту":a+" "+b(e[d],+a)}function d(a,b){var c={nominative:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),accusative:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_")},d=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function e(a,b){var c={nominative:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),accusative:"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_")},d=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function f(a,b){var c={nominative:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),accusative:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_")},d=/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/.test(b)?"accusative":"nominative";return c[d][a.day()]}return a.defineLocale("ru",{months:d,monthsShort:e,weekdays:f,weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., LT",LLLL:"dddd, D MMMM YYYY г., LT"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(){return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT"},lastWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:c,mm:c,h:"час",hh:c,d:"день",dd:c,M:"месяц",MM:c,y:"год",yy:c},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(a){return/^(дня|вечера)$/.test(a)},meridiem:function(a){return 4>a?"ночи":12>a?"утра":17>a?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":return a+"-й";case"D":return a+"-го";case"w":case"W":return a+"-я";default:return a}},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){function b(a){return a>1&&5>a}function c(a,c,d,e){var f=a+" ";switch(d){case"s":return c||e?"pár sekúnd":"pár sekundami";case"m":return c?"minúta":e?"minútu":"minútou";case"mm":return c||e?f+(b(a)?"minúty":"minút"):f+"minútami";break;case"h":return c?"hodina":e?"hodinu":"hodinou";case"hh":return c||e?f+(b(a)?"hodiny":"hodín"):f+"hodinami";break;case"d":return c||e?"deň":"dňom";case"dd":return c||e?f+(b(a)?"dni":"dní"):f+"dňami";break;case"M":return c||e?"mesiac":"mesiacom";case"MM":return c||e?f+(b(a)?"mesiace":"mesiacov"):f+"mesiacmi";break;case"y":return c||e?"rok":"rokom";case"yy":return c||e?f+(b(a)?"roky":"rokov"):f+"rokmi"}}var d="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),e="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");return a.defineLocale("sk",{months:d,monthsShort:e,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(d,e),weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){function b(a,b,c){var d=a+" ";switch(c){case"m":return b?"ena minuta":"eno minuto";case"mm":return d+=1===a?"minuta":2===a?"minuti":3===a||4===a?"minute":"minut";case"h":return b?"ena ura":"eno uro";case"hh":return d+=1===a?"ura":2===a?"uri":3===a||4===a?"ure":"ur";case"dd":return d+=1===a?"dan":"dni";case"MM":return d+=1===a?"mesec":2===a?"meseca":3===a||4===a?"mesece":"mesecev";case"yy":return d+=1===a?"leto":2===a?"leti":3===a||4===a?"leta":"let"}}return a.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[prejšnja] dddd [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"%s nazaj",s:"nekaj sekund",m:b,mm:b,h:b,hh:b,d:"en dan",dd:b,M:"en mesec",MM:b,y:"eno leto",yy:b},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),meridiemParse:/PD|MD/,isPM:function(a){return"M"===a.charAt(0)},meridiem:function(a){return 12>a?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){var b={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,c,d){var e=b.words[d];return 1===d.length?c?e[0]:e[1]:a+" "+b.correctGrammaticalCase(a,e)}};return a.defineLocale("sr-cyrl",{months:["јануар","фебруар","март","април","мај","јун","јул","август","септембар","октобар","новембар","децембар"],monthsShort:["јан.","феб.","мар.","апр.","мај","јун","јул","авг.","сеп.","окт.","нов.","дец."],weekdays:["недеља","понедељак","уторак","среда","четвртак","петак","субота"],weekdaysShort:["нед.","пон.","уто.","сре.","чет.","пет.","суб."],weekdaysMin:["не","по","ут","ср","че","пе","су"],longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var a=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:b.translate,mm:b.translate,h:b.translate,hh:b.translate,d:"дан",dd:b.translate,M:"месец",MM:b.translate,y:"годину",yy:b.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){var b={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,c,d){var e=b.words[d];return 1===d.length?c?e[0]:e[1]:a+" "+b.correctGrammaticalCase(a,e)}};return a.defineLocale("sr",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedelja","ponedeljak","utorak","sreda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sre.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var a=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:b.translate,mm:b.translate,h:b.translate,hh:b.translate,d:"dan",dd:b.translate,M:"mesec",MM:b.translate,y:"godinu",yy:b.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"dddd LT",lastWeek:"[Förra] dddd[en] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"e":1===b?"a":2===b?"a":"e";return a+c},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},ordinalParse:/\d{1,2}வது/,ordinal:function(a){return a+"வது"},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(a){return 2>a?" யாமம்":6>a?" வைகறை":10>a?" காலை":14>a?" நண்பகல்":18>a?" எற்பாடு":22>a?" மாலை":" யாமம்"},meridiemHour:function(a,b){return 12===a&&(a=0),"யாமம்"===b?2>a?a:a+12:"வைகறை"===b||"காலை"===b?a:"நண்பகல்"===b&&a>=10?a:a+12},week:{dow:0,doy:6}})}),function(a){a(vb)}(function(a){return a.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"LT s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา LT",LLLL:"วันddddที่ D MMMM YYYY เวลา LT"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(a){return"หลังเที่ยง"===a
},meridiem:function(a){return 12>a?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}),function(a){a(vb)}(function(a){return a.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM DD, YYYY LT"},calendar:{sameDay:"[Ngayon sa] LT",nextDay:"[Bukas sa] LT",nextWeek:"dddd [sa] LT",lastDay:"[Kahapon sa] LT",lastWeek:"dddd [huling linggo] LT",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},ordinalParse:/\d{1,2}/,ordinal:function(a){return a},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){var b={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};return a.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(a){if(0===a)return a+"'ıncı";var c=a%10,d=a%100-c,e=a>=100?100:null;return a+(b[c]||b[d]||b[e])},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}),function(a){a(vb)}(function(a){return a.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}),function(a){a(vb)}(function(a){function b(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(a,c,d){var e={mm:"хвилина_хвилини_хвилин",hh:"година_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===d?c?"хвилина":"хвилину":"h"===d?c?"година":"годину":a+" "+b(e[d],+a)}function d(a,b){var c={nominative:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_"),accusative:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_")},d=/D[oD]? *MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function e(a,b){var c={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},d=/(\[[ВвУу]\]) ?dddd/.test(b)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(b)?"genitive":"nominative";return c[d][a.day()]}function f(a){return function(){return a+"о"+(11===this.hours()?"б":"")+"] LT"}}return a.defineLocale("uk",{months:d,monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:e,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., LT",LLLL:"dddd, D MMMM YYYY р., LT"},calendar:{sameDay:f("[Сьогодні "),nextDay:f("[Завтра "),lastDay:f("[Вчора "),nextWeek:f("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return f("[Минулої] dddd [").call(this);case 1:case 2:case 4:return f("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:c,mm:c,h:"годину",hh:c,d:"день",dd:c,M:"місяць",MM:c,y:"рік",yy:c},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(a){return/^(дня|вечора)$/.test(a)},meridiem:function(a){return 4>a?"ночі":12>a?"ранку":17>a?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a+"-й";case"D":return a+"-го";default:return a}},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("uz",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"D MMMM YYYY, dddd LT"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}),function(a){a(vb)}(function(a){return a.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY LT",LLLL:"dddd, D MMMM [năm] YYYY LT",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(a){return a},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"凌晨"===b||"早上"===b||"上午"===b?a:"下午"===b||"晚上"===b?a+12:a>=11?a:a+12},meridiem:function(a,b){var c=100*a+b;return 600>c?"凌晨":900>c?"早上":1130>c?"上午":1230>c?"中午":1800>c?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var b,c;return b=a().startOf("week"),c=this.unix()-b.unix()>=604800?"[下]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},lastWeek:function(){var b,c;return b=a().startOf("week"),c=this.unix()<b.unix()?"[上]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"周";default:return a}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1分钟",mm:"%d分钟",h:"1小时",hh:"%d小时",d:"1天",dd:"%d天",M:"1个月",MM:"%d个月",y:"1年",yy:"%d年"},week:{dow:1,doy:4}})}),function(a){a(vb)}(function(a){return a.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"早上"===b||"上午"===b?a:"中午"===b?a>=11?a:a+12:"下午"===b||"晚上"===b?a+12:void 0},meridiem:function(a,b){var c=100*a+b;return 900>c?"早上":1130>c?"上午":1230>c?"中午":1800>c?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"週";default:return a}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"一分鐘",mm:"%d分鐘",h:"一小時",hh:"%d小時",d:"一天",dd:"%d天",M:"一個月",MM:"%d個月",y:"一年",yy:"%d年"}})}),vb.locale("en"),Lb?module.exports=vb:"function"==typeof define&&define.amd?(define(function(a,b,c){return c.config&&c.config()&&c.config().noGlobal===!0&&(zb.moment=wb),vb}),ub(!0)):ub()}).call(this);
//! moment-timezone.js
//! version : 0.3.0
//! author : Tim Wood
//! license : MIT
//! github.com/moment/moment-timezone
!function(a,b){"use strict";"function"==typeof define&&define.amd?define(["moment"],b):"object"==typeof exports?module.exports=b(require("moment")):b(a.moment)}(this,function(a){"use strict";function b(a){return a>96?a-87:a>64?a-29:a-48}function c(a){var c,d=0,e=a.split("."),f=e[0],g=e[1]||"",h=1,i=0,j=1;for(45===a.charCodeAt(0)&&(d=1,j=-1),d;d<f.length;d++)c=b(f.charCodeAt(d)),i=60*i+c;for(d=0;d<g.length;d++)h/=60,c=b(g.charCodeAt(d)),i+=c*h;return i*j}function d(a){for(var b=0;b<a.length;b++)a[b]=c(a[b])}function e(a,b){for(var c=0;b>c;c++)a[c]=Math.round((a[c-1]||0)+6e4*a[c]);a[b-1]=1/0}function f(a,b){var c,d=[];for(c=0;c<b.length;c++)d[c]=a[b[c]];return d}function g(a){var b=a.split("|"),c=b[2].split(" "),g=b[3].split(""),h=b[4].split(" ");return d(c),d(g),d(h),e(h,g.length),{name:b[0],abbrs:f(b[1].split(" "),g),offsets:f(c,g),untils:h}}function h(a){a&&this._set(g(a))}function i(a){return(a||"").toLowerCase().replace(/\//g,"_")}function j(a){var b,c,d;for("string"==typeof a&&(a=[a]),b=0;b<a.length;b++)c=new h(a[b]),d=i(c.name),y[d]=c,n(d)}function k(a){return y[i(a)]||null}function l(){var a,b=[];for(a in y)y.hasOwnProperty(a)&&y[a]&&b.push(y[a].name);return b.sort()}function m(a){var b,c;for("string"==typeof a&&(a=[a]),b=0;b<a.length;b++)c=a[b].split("|"),p(c[0],c[1]),p(c[1],c[0])}function n(a){if(z[a]){var b,c=y[a],d=z[a];for(b=0;b<d.length;b++)o(c,d[b]);z[a]=null}}function o(a,b){var c=y[i(b)]=new h;c._set(a),c.name=b}function p(a,b){a=i(a),y[a]?o(y[a],b):(z[a]=z[a]||[],z[a].push(b))}function q(a){j(a.zones),m(a.links),u.dataVersion=a.version}function r(a){return r.didShowError||(r.didShowError=!0,t("moment.tz.zoneExists('"+a+"') has been deprecated in favor of !moment.tz.zone('"+a+"')")),!!k(a)}function s(a){return!(!a._a||void 0!==a._tzm)}function t(a){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(a)}function u(b){var c=Array.prototype.slice.call(arguments,0,-1),d=arguments[arguments.length-1],e=k(d),f=a.utc.apply(null,c);return e&&!a.isMoment(b)&&s(f)&&f.add(e.parse(f),"minutes"),f.tz(d),f}function v(a){return function(){return this._z?this._z.abbr(this):a.call(this)}}function w(a){return function(){return this._z=null,a.apply(this,arguments)}}if(void 0!==a.tz)return a;var x="0.3.0",y={},z={},A=a.version.split("."),B=+A[0],C=+A[1];(2>B||2===B&&6>C)&&t("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js "+a.version+". See momentjs.com"),h.prototype={_set:function(a){this.name=a.name,this.abbrs=a.abbrs,this.untils=a.untils,this.offsets=a.offsets},_index:function(a){var b,c=+a,d=this.untils;for(b=0;b<d.length;b++)if(c<d[b])return b},parse:function(a){var b,c,d,e,f=+a,g=this.offsets,h=this.untils,i=h.length-1;for(e=0;i>e;e++)if(b=g[e],c=g[e+1],d=g[e?e-1:e],c>b&&u.moveAmbiguousForward?b=c:b>d&&u.moveInvalidForward&&(b=d),f<h[e]-6e4*b)return g[e];return g[i]},abbr:function(a){return this.abbrs[this._index(a)]},offset:function(a){return this.offsets[this._index(a)]}},u.version=x,u.dataVersion="",u._zones=y,u._links=z,u.add=j,u.link=m,u.load=q,u.zone=k,u.zoneExists=r,u.names=l,u.Zone=h,u.unpack=g,u.unpackBase60=c,u.needsOffset=s,u.moveInvalidForward=!0,u.moveAmbiguousForward=!1;var D=a.fn;a.tz=u,a.defaultZone=null,a.updateOffset=function(b,c){var d;void 0===b._z&&(b._z=a.defaultZone),b._z&&(d=b._z.offset(b),Math.abs(d)<16&&(d/=60),void 0!==b.utcOffset?b.utcOffset(-d,c):b.zone(d,c))},D.tz=function(b){return b?(this._z=k(b),this._z?a.updateOffset(this):t("Moment Timezone has no data for "+b+". See http://momentjs.com/timezone/docs/#/data-loading/."),this):this._z?this._z.name:void 0},D.zoneName=v(D.zoneName),D.zoneAbbr=v(D.zoneAbbr),D.utc=w(D.utc),a.tz.setDefault=function(b){return(2>B||2===B&&9>C)&&t("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js "+a.version+"."),a.defaultZone=b?k(b):null,a};var E=a.momentProperties;return"[object Array]"===Object.prototype.toString.call(E)?(E.push("_z"),E.push("_a")):E&&(E._z=null),q({version:"2014j",zones:["Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q","Africa/Accra|LMT GMT GHST|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE","Africa/Addis_Ababa|LMT EAT BEAT BEAUT|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ","Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0","Africa/Bangui|LMT WAT|-d.A -10|01|-22y0d.A","Africa/Bissau|LMT WAT GMT|12.k 10 0|012|-2ldWV.E 2xonV.E","Africa/Blantyre|LMT CAT|-2a.k -20|01|-2GJea.k","Africa/Cairo|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0 1o10 jz0 gN0 pb0 1qN0 dX0 e10 xz0 1o10 bb0 e10 An0 1o10 5z0 e10 FX0 1o10 2L0 e10 IL0 1C10 Lz0 1wp0 TX0 1qN0 WL0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0","Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|012121212121212121312121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uo0 e00 DA0 11A0 rA0 e00 Jc0 WM0 m00 gM0 M00 WM0 jc0 e00 RA0 11A0 dA0 e00 Uo0 11A0 800 gM0 Xc0 11A0 5c0 e00 17A0 WM0 2o0 e00 1ao0 19A0 1g00 16M0 1iM0 1400 1lA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qo0 1200 1kM0 14M0 1i00","Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1y7p0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Africa/El_Aaiun|LMT WAT WET WEST|Q.M 10 0 -10|0123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uo0 e00 DA0 11A0 rA0 e00 Jc0 WM0 m00 gM0 M00 WM0 jc0 e00 RA0 11A0 dA0 e00 Uo0 11A0 800 gM0 Xc0 11A0 5c0 e00 17A0 WM0 2o0 e00 1ao0 19A0 1g00 16M0 1iM0 1400 1lA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qo0 1200 1kM0 14M0 1i00","Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0","Africa/Juba|LMT CAT CAST EAT|-2a.8 -20 -30 -30|01212121212121212121212121212121213|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0","Africa/Monrovia|MMT LRT GMT|H.8 I.u 0|012|-23Lzg.Q 29s01.m","Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0","Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00","Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00","Africa/Windhoek|SWAT SAST SAST CAT WAT WAST|-1u -20 -30 -20 -10 -20|012134545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2GJdu 1Ajdu 1cL0 1SqL0 9NA0 11D0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0","America/Adak|NST NWT NPT BST BDT AHST HAST HADT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Anchorage|CAT CAWT CAPT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Anguilla|LMT AST|46.4 40|01|-2kNvR.U","America/Antigua|LMT EST AST|47.c 50 40|012|-2kNvQ.M 1yxAQ.M","America/Araguaina|LMT BRT BRST|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0","America/Argentina/Buenos_Aires|CMT ART ARST ART ARST|4g.M 40 30 30 20|0121212121212121212121212121212121212121213434343434343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0","America/Argentina/Catamarca|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0","America/Argentina/Cordoba|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0","America/Argentina/Jujuy|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 g0p0 10M0 j3c0 uL0","America/Argentina/La_Rioja|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0","America/Argentina/Mendoza|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|0121212121212121212121212121212121212121213434345656543235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 g0p0 10M0 agM0 Op0 7TX0 uL0","America/Argentina/Rio_Gallegos|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0","America/Argentina/Salta|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0","America/Argentina/San_Juan|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ak00 m10 8lb0 uL0","America/Argentina/San_Luis|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456536353465653|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 kin0 10M0 ak00 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0","America/Argentina/Tucuman|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|012121212121212121212121212121212121212121343434345434323534343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 4N0 8BX0 uL0 1qN0 WL0","America/Argentina/Ushuaia|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ajA0 8p0 8zb0 uL0","America/Aruba|LMT ANT AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d","America/Asuncion|AMT PYT PYT PYST|3O.E 40 30 30|012131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0","America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0","America/Bahia|LMT BRT BRST|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0","America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0","America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0","America/Belem|LMT BRT BRST|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0","America/Belize|LMT CST CHDT CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0","America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0","America/Boa_Vista|LMT AMT AMST|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0","America/Bogota|BMT COT COST|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0","America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Cambridge_Bay|zzz MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Campo_Grande|LMT AMT AMST|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0","America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0","America/Caracas|CMT VET VET|4r.E 4u 40|0121|-2kV7w.k 28KM2.k 1IwOu","America/Cayenne|LMT GFT GFT|3t.k 40 30|012|-2mrwu.E 2gWou.E","America/Cayman|KMT EST|57.b 50|01|-2l1uQ.N","America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0","America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0","America/Creston|MST PST|70 80|010|-29DR0 43B0","America/Cuiaba|LMT AMT AMST|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0","America/Danmarkshavn|LMT WGT WGST GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0","America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0","America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|01234252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 Jy10 SL0 dnB0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Eirunepe|LMT ACT ACST AMT|4D.s 50 40 40|0121212121212121212121212121212131|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0","America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0","America/Ensenada|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Fortaleza|LMT BRT BRST|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0","America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Godthab|LMT WGT WGST|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Grand_Turk|KMT EST EDT AST|57.b 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212123|-2l1uQ.N 2HHBQ.N 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0","America/Guayaquil|QMT ECT|5e 50|01|-1yVSK","America/Guyana|LMT GBGT GYT GYT GYT|3Q.E 3J 3J 30 40|01234|-2dvU7.k 24JzQ.k mlc0 Bxbf","America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0","America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0","America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Inuvik|zzz PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Iqaluit|zzz EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Jamaica|KMT EST EDT|57.b 50 40|0121212121212121212121|-2l1uQ.N 2uM1Q.N 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0","America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/La_Paz|CMT BOST BOT|4w.A 3w.A 40|012|-1x37r.o 13b0","America/Lima|LMT PET PEST|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0","America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp0 1Vb0 3dB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Maceio|LMT BRT BRST|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0","America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0","America/Manaus|LMT AMT AMST|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0","America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0","America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0","America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0","America/Metlakatla|PST PWT PPT PDT|80 70 70 70|0120303030303030303030303030303030|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0","America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0","America/Miquelon|LMT AST PMST PMDT|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0","America/Montevideo|MMT UYT UYHST UYST UYT UYHST|3I.I 3u 30 20 30 2u|012121212121212121212121213434343434345454543453434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-20UIf.g 8jzJ.g 1cLu 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1qMu WLu 1qMu 11zu 1o0u 11zu NAu 11bu 2iMu zWu Dq10 19X0 pd0 jz0 cm10 19X0 1fB0 1on0 11d0 1oL0 1nB0 1fzu 1aou 1fzu 1aou 1fzu 3nAu Jb0 3MN0 1SLu 4jzu 2PB0 Lb0 3Dd0 1pb0 ixd0 An0 1MN0 An0 1wp0 On0 1wp0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10","America/Montreal|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-28tR0 bV0 2m30 1in0 121u 1nb0 1g10 11z0 1o0u 11zu 1o0u 11zu 3VAu Rzu 1qMu WLu 1qMu WLu 1qKu WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kO0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Noronha|LMT FNT FNST|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0","America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Panama|CMT EST|5j.A 50|01|-2uduE.o","America/Pangnirtung|zzz AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Paramaribo|LMT PMT PMT NEGT SRT SRT|3E.E 3E.Q 3E.A 3u 3u 30|012345|-2nDUj.k Wqo0.c qanX.I 1dmLN.o lzc0","America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0","America/Port-au-Prince|PPMT EST EDT|4N 50 40|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Porto_Acre|LMT ACT ACST AMT|4v.c 50 40 40|01212121212121212121212121212131|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0","America/Porto_Velho|LMT AMT AMST|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0","America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0","America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Rankin_Inlet|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Recife|LMT BRT BRST|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0","America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0","America/Resolute|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Santa_Isabel|LMT MST PST PDT PWT PPT|7D.s 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0","America/Santarem|LMT AMT AMST BRT|3C.M 40 30 30|0121212121212121212121212121213|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0","America/Santiago|SMT CLT CLT CLST CLST|4G.K 50 40 40 30|010203131313131313124242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424|-2q5Th.e fNch.e 5gLG.K 21bh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9UK0 1Je0 Qen0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1ld0 14n0 1qN0 11z0 1cN0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0","America/Santo_Domingo|SDMT EST EDT EHDT AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00","America/Sao_Paulo|LMT BRT BRST|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0","America/Scoresbysund|LMT CGT CGST EGST EGT|1r.Q 20 10 0 10|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0","America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0","America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 1Be0 xDz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Yellowknife|zzz MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","Antarctica/Casey|zzz AWST CAST|0 -80 -b0|012121|-2q00 1DjS0 T90 40P0 KL0","Antarctica/Davis|zzz DAVT DAVT|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0","Antarctica/DumontDUrville|zzz PMT DDUT|0 -a0 -a0|0102|-U0o0 cfq0 bFm0","Antarctica/Macquarie|AEST AEDT zzz MIST|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0","Antarctica/Mawson|zzz MAWT MAWT|0 -60 -50|012|-CEo0 2fyk0","Antarctica/McMurdo|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00","Antarctica/Palmer|zzz ARST ART ART ARST CLT CLST|0 30 40 30 20 40 30|012121212123435656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1ld0 14n0 1qN0 11z0 1cN0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0","Antarctica/Rothera|zzz ROTT|0 30|01|gOo0","Antarctica/Syowa|zzz SYOT|0 -30|01|-vs00","Antarctica/Troll|zzz UTC CEST|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Antarctica/Vostok|zzz VOST|0 -60|01|-tjA0","Arctic/Longyearbyen|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Asia/Aden|LMT AST|-2X.S -30|01|-MG2X.S","Asia/Almaty|LMT ALMT ALMT ALMST|-57.M -50 -60 -70|0123232323232323232323232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3Cl0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0","Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0","Asia/Anadyr|LMT ANAT ANAT ANAST ANAST ANAST ANAT|-bN.U -c0 -d0 -e0 -d0 -c0 -b0|01232414141414141414141561414141414141414141414141414141414141561|-1PcbN.U eUnN.U 23CL0 1db0 1cN0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0","Asia/Aqtau|LMT FORT FORT SHET SHET SHEST AQTT AQTST AQTST AQTT|-3l.4 -40 -50 -50 -60 -60 -50 -60 -50 -40|012345353535353535353536767676898989898989898989896|-1Pc3l.4 eUnl.4 1jcL0 JDc0 1cL0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cN0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0","Asia/Aqtobe|LMT AKTT AKTT AKTST AKTT AQTT AQTST|-3M.E -40 -50 -60 -60 -50 -60|01234323232323232323232565656565656565656565656565|-1Pc3M.E eUnM.E 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0","Asia/Ashgabat|LMT ASHT ASHT ASHST ASHST TMT TMT|-3R.w -40 -50 -60 -50 -40 -50|012323232323232323232324156|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 ba0 xC0","Asia/Baghdad|BMT AST ADT|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0","Asia/Bahrain|LMT GST AST|-3m.k -40 -30|012|-21Jfm.k 27BXm.k","Asia/Baku|LMT BAKT BAKT BAKST BAKST AZST AZT AZT AZST|-3j.o -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245657878787878787878787878787878787878787878787878787878787878787878787878787878787878787|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 10K0 c30 1cJ0 1cL0 8wu0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Asia/Bangkok|BMT ICT|-6G.4 -70|01|-218SG.4","Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0","Asia/Bishkek|LMT FRUT FRUT FRUST FRUST KGT KGST KGT|-4W.o -50 -60 -70 -60 -50 -60 -60|01232323232323232323232456565656565656565656565656567|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11c0 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 T8u","Asia/Brunei|LMT BNT BNT|-7D.E -7u -80|012|-1KITD.E gDc9.E","Asia/Calcutta|HMT BURT IST IST|-5R.k -6u -5u -6u|01232|-18LFR.k 1unn.k HB0 7zX0","Asia/Chita|LMT YAKT YAKT YAKST YAKST YAKT IRKT|-7x.Q -80 -90 -a0 -90 -a0 -80|012323232323232323232324123232323232323232323232323232323232323256|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Choibalsan|LMT ULAT ULAT CHOST CHOT CHOT|-7C -70 -80 -a0 -90 -80|012343434343434343434343434343434343434343434345|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0","Asia/Chongqing|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0","Asia/Colombo|MMT IST IHST IST LKT LKT|-5j.w -5u -60 -6u -6u -60|01231451|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu","Asia/Dacca|HMT BURT IST DACT BDT BDST|-5R.k -6u -5u -60 -60 -70|01213454|-18LFR.k 1unn.k HB0 m6n0 LqMu 1x6n0 1i00","Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0","Asia/Dili|LMT TLT JST TLT WITA|-8m.k -80 -90 -90 -80|012343|-2le8m.k 1dnXm.k 8HA0 1ew00 Xld0","Asia/Dubai|LMT GST|-3F.c -40|01|-21JfF.c","Asia/Dushanbe|LMT DUST DUST DUSST DUSST TJT|-4z.c -50 -60 -70 -60 -50|0123232323232323232323245|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 14N0","Asia/Gaza|EET EET EEST IST IDT|-20 -30 -30 -20 -30|010101010102020202020202020202023434343434343434343434343430202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0","Asia/Hebron|EET EET EEST IST IDT|-20 -30 -30 -20 -30|01010101010202020202020202020202343434343434343434343434343020202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0","Asia/Ho_Chi_Minh|LMT PLMT ICT IDT JST|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0","Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0","Asia/Hovd|LMT HOVT HOVT HOVST|-66.A -60 -70 -80|01232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0","Asia/Irkutsk|IMT IRKT IRKT IRKST IRKST IRKT|-6V.5 -70 -80 -90 -80 -90|012323232323232323232324123232323232323232323232323232323232323252|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Istanbul|IMT EET EEST TRST TRT|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1df0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Asia/Jakarta|BMT JAVT WIB JST WIB WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu","Asia/Jayapura|LMT WIT ACST|-9m.M -90 -9u|0121|-1uu9m.M sMMm.M L4nu","Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0","Asia/Kabul|AFT AFT|-40 -4u|01|-10Qs0","Asia/Kamchatka|LMT PETT PETT PETST PETST|-ay.A -b0 -c0 -d0 -c0|01232323232323232323232412323232323232323232323232323232323232412|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0","Asia/Karachi|LMT IST IST KART PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy01 1cL0 dK0X 11b0 1610 1jX0","Asia/Kashgar|LMT XJT|-5O.k -60|01|-1GgtO.k","Asia/Kathmandu|LMT IST NPT|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g","Asia/Khandyga|LMT YAKT YAKT YAKST YAKST VLAT VLAST VLAT YAKT|-92.d -80 -90 -a0 -90 -a0 -b0 -b0 -a0|01232323232323232323232412323232323232323232323232565656565656565782|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0","Asia/Krasnoyarsk|LMT KRAT KRAT KRAST KRAST KRAT|-6b.q -60 -70 -80 -70 -80|012323232323232323232324123232323232323232323232323232323232323252|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Kuala_Lumpur|SMT MALT MALST MALT MALT JST MYT|-6T.p -70 -7k -7k -7u -90 -80|01234546|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu 1so1u","Asia/Kuching|LMT BORT BORT BORTST JST MYT|-7l.k -7u -80 -8k -90 -80|01232323232323232425|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0 1so10","Asia/Kuwait|LMT AST|-3b.U -30|01|-MG3b.U","Asia/Macao|LMT MOT MOST CST|-7y.k -80 -90 -80|0121212121212121212121212121212121212121213|-2le7y.k 1XO34.k 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0 KEp0","Asia/Magadan|LMT MAGT MAGT MAGST MAGST MAGT|-a3.c -a0 -b0 -c0 -b0 -c0|012323232323232323232324123232323232323232323232323232323232323251|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Makassar|LMT MMT WITA JST|-7V.A -7V.A -80 -90|01232|-21JjV.A vfc0 myLV.A 8ML0","Asia/Manila|PHT PHST JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0","Asia/Muscat|LMT GST|-3S.o -40|01|-21JfS.o","Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Asia/Novokuznetsk|LMT KRAT KRAT KRAST KRAST NOVST NOVT NOVT|-5M.M -60 -70 -80 -70 -70 -60 -70|012323232323232323232324123232323232323232323232323232323232325672|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0 8Hz0","Asia/Novosibirsk|LMT NOVT NOVT NOVST NOVST|-5v.E -60 -70 -80 -70|0123232323232323232323241232341414141414141414141414141414141414121|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Omsk|LMT OMST OMST OMSST OMSST OMST|-4R.u -50 -60 -70 -60 -70|012323232323232323232324123232323232323232323232323232323232323252|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Oral|LMT URAT URAT URAST URAT URAST ORAT ORAST ORAT|-3p.o -40 -50 -60 -60 -50 -40 -50 -50|012343232323232323251516767676767676767676767676768|-1Pc3p.o eUnp.o 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0","Asia/Pontianak|LMT PMT WIB JST WIB WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu","Asia/Pyongyang|LMT KST JCST JST KST|-8n -8u -90 -90 -90|01234|-2um8n 97XR 12FXu jdA0","Asia/Qatar|LMT GST AST|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8","Asia/Qyzylorda|LMT KIZT KIZT KIZST KIZT QYZT QYZT QYZST|-4l.Q -40 -50 -60 -60 -50 -60 -70|012343232323232323232325676767676767676767676767676|-1Pc4l.Q eUol.Q 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 dC0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0","Asia/Rangoon|RMT BURT JST MMT|-6o.E -6u -90 -6u|0123|-21Jio.E SmnS.E 7j9u","Asia/Riyadh|LMT AST|-36.Q -30|01|-TvD6.Q","Asia/Sakhalin|LMT JCST JST SAKT SAKST SAKST SAKT|-9u.M -90 -90 -b0 -c0 -b0 -a0|0123434343434343434343435634343434343565656565656565656565656565636|-2AGVu.M 1iaMu.M je00 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o10 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Samarkand|LMT SAMT SAMT SAMST TAST UZST UZT|-4r.R -40 -50 -60 -60 -60 -50|01234323232323232323232356|-1Pc4r.R eUor.R 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11x0 bf0","Asia/Seoul|LMT KST JCST JST KST KDT KDT|-8r.Q -8u -90 -90 -90 -9u -a0|01234151515151515146464|-2um8r.Q 97XV.Q 12FXu jjA0 kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0","Asia/Singapore|SMT MALT MALST MALT MALT JST SGT SGT|-6T.p -70 -7k -7k -7u -90 -7u -80|012345467|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu Mspu DTA0","Asia/Srednekolymsk|LMT MAGT MAGT MAGST MAGST MAGT SRET|-ae.Q -a0 -b0 -c0 -b0 -c0 -b0|012323232323232323232324123232323232323232323232323232323232323256|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Taipei|JWST JST CST CDT|-80 -90 -80 -90|01232323232323232323232323232323232323232|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0","Asia/Tashkent|LMT TAST TAST TASST TASST UZST UZT|-4B.b -50 -60 -70 -60 -60 -50|01232323232323232323232456|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11y0 bf0","Asia/Tbilisi|TBMT TBIT TBIT TBIST TBIST GEST GET GET GEST|-2X.b -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565787878787878787878567|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 3y0 19f0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cM0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0","Asia/Tehran|LMT TMT IRST IRST IRDT IRDT|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0","Asia/Thimbu|LMT IST BTT|-5W.A -5u -60|012|-Su5W.A 1BGMs.A","Asia/Tokyo|JCST JST JDT|-90 -90 -a0|0121212121|-1iw90 pKq0 QL0 1lB0 13X0 1zB0 NX0 1zB0 NX0","Asia/Ulaanbaatar|LMT ULAT ULAT ULAST|-77.w -70 -80 -90|01232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0","Asia/Ust-Nera|LMT YAKT YAKT MAGST MAGT MAGST MAGT MAGT VLAT VLAT|-9w.S -80 -90 -c0 -b0 -b0 -a0 -c0 -b0 -a0|0123434343434343434343456434343434343434343434343434343434343434789|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0","Asia/Vladivostok|LMT VLAT VLAT VLAST VLAST VLAT|-8L.v -90 -a0 -b0 -a0 -b0|012323232323232323232324123232323232323232323232323232323232323252|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Yakutsk|LMT YAKT YAKT YAKST YAKST YAKT|-8C.W -80 -90 -a0 -90 -a0|012323232323232323232324123232323232323232323232323232323232323252|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Yekaterinburg|LMT PMT SVET SVET SVEST SVEST YEKT YEKST YEKT|-42.x -3J.5 -40 -50 -60 -50 -50 -60 -60|0123434343434343434343435267676767676767676767676767676767676767686|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Asia/Yerevan|LMT YERT YERT YERST YERST AMST AMT AMT AMST|-2W -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565657878787878787878787878787878787|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1am0 2r0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fb0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0","Atlantic/Azores|HMT AZOT AZOST AZOMT AZOT AZOST WET|1S.w 20 10 0 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545456545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldW5.s aPX5.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","Atlantic/Canary|LMT CANT WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Atlantic/Cape_Verde|LMT CVT CVST CVT|1y.4 20 10 10|01213|-2xomp.U 1qOMp.U 7zX0 1djf0","Atlantic/Faeroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Atlantic/Madeira|FMT MADT MADST MADMT WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldWQ.o aPWQ.o Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Atlantic/Reykjavik|RMT IST ISST GMT|1r.M 10 0 0|01212121212121212121212121212121212121212121212121212121212121213|-2uWmw.c mfaw.c 1Bd0 ML0 1LB0 NLX0 1pe0 zd0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0","Atlantic/South_Georgia|GST|20|0|","Atlantic/Stanley|SMT FKT FKST FKT FKST|3P.o 40 30 30 20|0121212121212134343212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 U10 1qM0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10","Australia/ACT|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0","Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0","Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0","Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0","Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0","Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0","Australia/Eucla|ACWST ACWDT|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0","Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0","Australia/LHI|AEST LHST LHDT LHDT|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu","Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0","Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0","Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0","CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","Chile/EasterIsland|EMT EASST EAST EAST EASST|7h.s 60 70 60 50|012121212121212121212121212121213434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-1uSgG.w nHUG.w op0 9UK0 RXB0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1ld0 14n0 1qN0 11z0 1cN0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0","EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","EST|EST|50|0|","EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","Eire|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g5X0 14p0 1wn0 17d0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Etc/GMT+0|GMT|0|0|","Etc/GMT+1|GMT+1|10|0|","Etc/GMT+10|GMT+10|a0|0|","Etc/GMT+11|GMT+11|b0|0|","Etc/GMT+12|GMT+12|c0|0|","Etc/GMT+2|GMT+2|20|0|","Etc/GMT+3|GMT+3|30|0|","Etc/GMT+4|GMT+4|40|0|","Etc/GMT+5|GMT+5|50|0|","Etc/GMT+6|GMT+6|60|0|","Etc/GMT+7|GMT+7|70|0|","Etc/GMT+8|GMT+8|80|0|","Etc/GMT+9|GMT+9|90|0|","Etc/GMT-1|GMT-1|-10|0|","Etc/GMT-10|GMT-10|-a0|0|","Etc/GMT-11|GMT-11|-b0|0|","Etc/GMT-12|GMT-12|-c0|0|","Etc/GMT-13|GMT-13|-d0|0|","Etc/GMT-14|GMT-14|-e0|0|","Etc/GMT-2|GMT-2|-20|0|","Etc/GMT-3|GMT-3|-30|0|","Etc/GMT-4|GMT-4|-40|0|","Etc/GMT-5|GMT-5|-50|0|","Etc/GMT-6|GMT-6|-60|0|","Etc/GMT-7|GMT-7|-70|0|","Etc/GMT-8|GMT-8|-80|0|","Etc/GMT-9|GMT-9|-90|0|","Etc/UCT|UCT|0|0|","Etc/UTC|UTC|0|0|","Europe/Amsterdam|AMT NST NEST NET CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Belfast|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Bratislava|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 16M0 1lc0 1tA0 17A0 11c0 1io0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Busingen|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|0123232323232323232345454676767676767676767623232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1ty0 2bD0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET FET|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454545454676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ldXn.f aPWn.f Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|01010101010101010101010121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-28dd0 11A0 1go0 19A0 1co0 1dA0 b1A0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 iyo0 Rc0 18o0 1hc0 1io0 1a00 14o0 5aL0 MM0 1vc0 17A0 1i00 1bc0 1eo0 17d0 1in0 17A0 6hA0 10N0 XIL0 1a10 1in0 17d0 19X0 1cN0 1fz0 1a10 1fX0 1cp0 1cO0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 1cM0 1cM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1cp0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Minsk|MMT EET MSK CEST CET MSD EEST FET|-1O -20 -30 -20 -10 -40 -30 -30|012343432525252525252525252616161616161616161616161616161616161616172|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cK0 1cM0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hy0","Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Moscow|MMT MMT MST MDST MSD MSK MSM EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c20 imv.j 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 16K0 1iO0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1C10 Lz0 1zd0 On0 1C10 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Samara|LMT SAMT SAMT KUYT KUYST MSD MSK EEST KUYT SAMST SAMST|-3k.k -30 -40 -40 -50 -40 -30 -30 -30 -50 -40|012343434343434343435656782929292929292929292929292929292929292a12|-22WNk.k qHak.k bcn0 1Qqo0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cN0 8o0 14j0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0","Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0","Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646464647373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Volgograd|LMT TSAT STAT STAT VOLT VOLST VOLST VOLT MSK MSK|-2V.E -30 -30 -40 -40 -50 -40 -30 -40 -30|012345454545454545454676748989898989898989898989898989898989898989|-21IqV.E cLXV.E cEM0 1gqn0 Lco0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 2pz0 1cJ0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0","Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Zaporozhye|CUT EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","HST|HST|a0|0|","Indian/Chagos|LMT IOT IOT|-4N.E -50 -60|012|-2xosN.E 3AGLN.E","Indian/Christmas|CXT|-70|0|","Indian/Cocos|CCT|-6u|0|","Indian/Kerguelen|zzz TFT|0 -50|01|-MG00","Indian/Mahe|LMT SCT|-3F.M -40|01|-2yO3F.M","Indian/Maldives|MMT MVT|-4S -50|01|-olgS","Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0","Indian/Reunion|LMT RET|-3F.Q -40|01|-2mDDF.Q","Kwajalein|MHT KWAT MHT|-b0 c0 -c0|012|-AX0 W9X0","MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","MST|MST|70|0|","MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","NZ-CHAT|CHAST CHAST CHADT|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00","PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","Pacific/Apia|LMT WSST SST SDT WSDT WSST|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00","Pacific/Bougainville|PGT JST BST|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0","Pacific/Chuuk|CHUT|-a0|0|","Pacific/Efate|LMT VUT VUST|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0","Pacific/Enderbury|PHOT PHOT PHOT|c0 b0 -d0|012|nIc0 B8n0","Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0","Pacific/Fiji|LMT FJT FJST|-bT.I -c0 -d0|012121212121212121212121212121212121212121212121212121212121212|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 xA0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 xA0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 xA0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1SM0","Pacific/Funafuti|TVT|-c0|0|","Pacific/Galapagos|LMT ECT GALT|5W.o 50 60|012|-1yVS1.A 2dTz1.A","Pacific/Gambier|LMT GAMT|8X.M 90|01|-2jof0.c","Pacific/Guadalcanal|LMT SBT|-aD.M -b0|01|-2joyD.M","Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0","Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0","Pacific/Kiritimati|LINT LINT LINT|aE a0 -e0|012|nIaE B8nk","Pacific/Kosrae|KOST KOST|-b0 -c0|010|-AX0 1bdz0","Pacific/Majuro|MHT MHT|-b0 -c0|01|-AX0","Pacific/Marquesas|LMT MART|9i 9u|01|-2joeG","Pacific/Midway|NST NDT BST SST|b0 a0 b0 b0|01023|-x3N0 An0 pJd0 EyM0","Pacific/Nauru|LMT NRT JST NRT|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu","Pacific/Niue|NUT NUT NUT|bk bu b0|012|-KfME 17y0a","Pacific/Norfolk|NMT NFT|-bc -bu|01|-Kgbc","Pacific/Noumea|LMT NCT NCST|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0","Pacific/Pago_Pago|LMT NST BST SST|bm.M b0 b0 b0|0123|-2nDMB.c 2gVzB.c EyM0","Pacific/Palau|PWT|-90|0|","Pacific/Pitcairn|PNT PST|8u 80|01|18Vku","Pacific/Pohnpei|PONT|-b0|0|","Pacific/Port_Moresby|PGT|-a0|0|","Pacific/Rarotonga|CKT CKHST CKT|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu","Pacific/Saipan|MPT MPT ChST|-90 -a0 -a0|012|-AV0 1g2n0","Pacific/Tahiti|LMT TAHT|9W.g a0|01|-2joe1.I","Pacific/Tarawa|GILT|-c0|0|","Pacific/Tongatapu|TOT TOT TOST|-ck -d0 -e0|01212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0","Pacific/Wake|WAKT|-c0|0|","Pacific/Wallis|WFT|-c0|0|","WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"],links:["Africa/Abidjan|Africa/Bamako","Africa/Abidjan|Africa/Banjul","Africa/Abidjan|Africa/Conakry","Africa/Abidjan|Africa/Dakar","Africa/Abidjan|Africa/Freetown","Africa/Abidjan|Africa/Lome","Africa/Abidjan|Africa/Nouakchott","Africa/Abidjan|Africa/Ouagadougou","Africa/Abidjan|Africa/Sao_Tome","Africa/Abidjan|Africa/Timbuktu","Africa/Abidjan|Atlantic/St_Helena","Africa/Addis_Ababa|Africa/Asmara","Africa/Addis_Ababa|Africa/Asmera","Africa/Addis_Ababa|Africa/Dar_es_Salaam","Africa/Addis_Ababa|Africa/Djibouti","Africa/Addis_Ababa|Africa/Kampala","Africa/Addis_Ababa|Africa/Mogadishu","Africa/Addis_Ababa|Africa/Nairobi","Africa/Addis_Ababa|Indian/Antananarivo","Africa/Addis_Ababa|Indian/Comoro","Africa/Addis_Ababa|Indian/Mayotte","Africa/Bangui|Africa/Brazzaville","Africa/Bangui|Africa/Douala","Africa/Bangui|Africa/Kinshasa","Africa/Bangui|Africa/Lagos","Africa/Bangui|Africa/Libreville","Africa/Bangui|Africa/Luanda","Africa/Bangui|Africa/Malabo","Africa/Bangui|Africa/Niamey","Africa/Bangui|Africa/Porto-Novo","Africa/Blantyre|Africa/Bujumbura","Africa/Blantyre|Africa/Gaborone","Africa/Blantyre|Africa/Harare","Africa/Blantyre|Africa/Kigali","Africa/Blantyre|Africa/Lubumbashi","Africa/Blantyre|Africa/Lusaka","Africa/Blantyre|Africa/Maputo","Africa/Cairo|Egypt","Africa/Johannesburg|Africa/Maseru","Africa/Johannesburg|Africa/Mbabane","Africa/Juba|Africa/Khartoum","Africa/Tripoli|Libya","America/Adak|America/Atka","America/Adak|US/Aleutian","America/Anchorage|US/Alaska","America/Anguilla|America/Dominica","America/Anguilla|America/Grenada","America/Anguilla|America/Guadeloupe","America/Anguilla|America/Marigot","America/Anguilla|America/Montserrat","America/Anguilla|America/Port_of_Spain","America/Anguilla|America/St_Barthelemy","America/Anguilla|America/St_Kitts","America/Anguilla|America/St_Lucia","America/Anguilla|America/St_Thomas","America/Anguilla|America/St_Vincent","America/Anguilla|America/Tortola","America/Anguilla|America/Virgin","America/Argentina/Buenos_Aires|America/Buenos_Aires","America/Argentina/Catamarca|America/Argentina/ComodRivadavia","America/Argentina/Catamarca|America/Catamarca","America/Argentina/Cordoba|America/Cordoba","America/Argentina/Cordoba|America/Rosario","America/Argentina/Jujuy|America/Jujuy","America/Argentina/Mendoza|America/Mendoza","America/Aruba|America/Curacao","America/Aruba|America/Kralendijk","America/Aruba|America/Lower_Princes","America/Atikokan|America/Coral_Harbour","America/Chicago|US/Central","America/Denver|America/Shiprock","America/Denver|Navajo","America/Denver|US/Mountain","America/Detroit|US/Michigan","America/Edmonton|Canada/Mountain","America/Ensenada|America/Tijuana","America/Ensenada|Mexico/BajaNorte","America/Fort_Wayne|America/Indiana/Indianapolis","America/Fort_Wayne|America/Indianapolis","America/Fort_Wayne|US/East-Indiana","America/Halifax|Canada/Atlantic","America/Havana|Cuba","America/Indiana/Knox|America/Knox_IN","America/Indiana/Knox|US/Indiana-Starke","America/Jamaica|Jamaica","America/Kentucky/Louisville|America/Louisville","America/Los_Angeles|US/Pacific","America/Los_Angeles|US/Pacific-New","America/Manaus|Brazil/West","America/Mazatlan|Mexico/BajaSur","America/Mexico_City|Mexico/General","America/New_York|US/Eastern","America/Noronha|Brazil/DeNoronha","America/Phoenix|US/Arizona","America/Porto_Acre|America/Rio_Branco","America/Porto_Acre|Brazil/Acre","America/Regina|Canada/East-Saskatchewan","America/Regina|Canada/Saskatchewan","America/Santiago|Chile/Continental","America/Sao_Paulo|Brazil/East","America/St_Johns|Canada/Newfoundland","America/Toronto|Canada/Eastern","America/Vancouver|Canada/Pacific","America/Whitehorse|Canada/Yukon","America/Winnipeg|Canada/Central","Antarctica/McMurdo|Antarctica/South_Pole","Antarctica/McMurdo|NZ","Antarctica/McMurdo|Pacific/Auckland","Arctic/Longyearbyen|Atlantic/Jan_Mayen","Arctic/Longyearbyen|Europe/Oslo","Asia/Ashgabat|Asia/Ashkhabad","Asia/Bangkok|Asia/Phnom_Penh","Asia/Bangkok|Asia/Vientiane","Asia/Calcutta|Asia/Kolkata","Asia/Chongqing|Asia/Chungking","Asia/Chongqing|Asia/Harbin","Asia/Chongqing|Asia/Shanghai","Asia/Chongqing|PRC","Asia/Dacca|Asia/Dhaka","Asia/Ho_Chi_Minh|Asia/Saigon","Asia/Hong_Kong|Hongkong","Asia/Istanbul|Europe/Istanbul","Asia/Istanbul|Turkey","Asia/Jerusalem|Asia/Tel_Aviv","Asia/Jerusalem|Israel","Asia/Kashgar|Asia/Urumqi","Asia/Kathmandu|Asia/Katmandu","Asia/Macao|Asia/Macau","Asia/Makassar|Asia/Ujung_Pandang","Asia/Nicosia|Europe/Nicosia","Asia/Seoul|ROK","Asia/Singapore|Singapore","Asia/Taipei|ROC","Asia/Tehran|Iran","Asia/Thimbu|Asia/Thimphu","Asia/Tokyo|Japan","Asia/Ulaanbaatar|Asia/Ulan_Bator","Atlantic/Faeroe|Atlantic/Faroe","Atlantic/Reykjavik|Iceland","Australia/ACT|Australia/Canberra","Australia/ACT|Australia/NSW","Australia/ACT|Australia/Sydney","Australia/Adelaide|Australia/South","Australia/Brisbane|Australia/Queensland","Australia/Broken_Hill|Australia/Yancowinna","Australia/Darwin|Australia/North","Australia/Hobart|Australia/Tasmania","Australia/LHI|Australia/Lord_Howe","Australia/Melbourne|Australia/Victoria","Australia/Perth|Australia/West","Chile/EasterIsland|Pacific/Easter","Eire|Europe/Dublin","Etc/GMT+0|Etc/GMT","Etc/GMT+0|Etc/GMT-0","Etc/GMT+0|Etc/GMT0","Etc/GMT+0|Etc/Greenwich","Etc/GMT+0|GMT","Etc/GMT+0|GMT+0","Etc/GMT+0|GMT-0","Etc/GMT+0|GMT0","Etc/GMT+0|Greenwich","Etc/UCT|UCT","Etc/UTC|Etc/Universal","Etc/UTC|Etc/Zulu","Etc/UTC|UTC","Etc/UTC|Universal","Etc/UTC|Zulu","Europe/Belfast|Europe/Guernsey","Europe/Belfast|Europe/Isle_of_Man","Europe/Belfast|Europe/Jersey","Europe/Belfast|Europe/London","Europe/Belfast|GB","Europe/Belfast|GB-Eire","Europe/Belgrade|Europe/Ljubljana","Europe/Belgrade|Europe/Podgorica","Europe/Belgrade|Europe/Sarajevo","Europe/Belgrade|Europe/Skopje","Europe/Belgrade|Europe/Zagreb","Europe/Bratislava|Europe/Prague","Europe/Busingen|Europe/Vaduz","Europe/Busingen|Europe/Zurich","Europe/Chisinau|Europe/Tiraspol","Europe/Helsinki|Europe/Mariehamn","Europe/Lisbon|Portugal","Europe/Moscow|W-SU","Europe/Rome|Europe/San_Marino","Europe/Rome|Europe/Vatican","Europe/Warsaw|Poland","Kwajalein|Pacific/Kwajalein","NZ-CHAT|Pacific/Chatham","Pacific/Chuuk|Pacific/Truk","Pacific/Chuuk|Pacific/Yap","Pacific/Honolulu|Pacific/Johnston","Pacific/Honolulu|US/Hawaii","Pacific/Pago_Pago|Pacific/Samoa","Pacific/Pago_Pago|US/Samoa","Pacific/Pohnpei|Pacific/Ponape"]}),a
});
/*Copyright (c) 2015 Tim Wood, Iskren Chernev

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.*/
/*! jstz - v1.0.4 - 2012-12-12 */
(function(e){var t=function(){"use strict";var e="s",n=function(e){var t=-e.getTimezoneOffset();return t!==null?t:0},r=function(e,t,n){var r=new Date;return e!==undefined&&r.setFullYear(e),r.setDate(n),r.setMonth(t),r},i=function(e){return n(r(e,0,2))},s=function(e){return n(r(e,5,2))},o=function(e){var t=e.getMonth()>7?s(e.getFullYear()):i(e.getFullYear()),r=n(e);return t-r!==0},u=function(){var t=i(),n=s(),r=i()-s();return r<0?t+",1":r>0?n+",1,"+e:t+",0"},a=function(){var e=u();return new t.TimeZone(t.olson.timezones[e])};return{determine:a,date_is_dst:o}}();t.TimeZone=function(e){"use strict";var n=null,r=function(){return n},i=function(){var e=t.olson.ambiguity_list[n],r=e.length,i=0,s=e[0];for(;i<r;i+=1){s=e[i];if(t.date_is_dst(t.olson.dst_start_dates[s])){n=s;return}}},s=function(){return typeof t.olson.ambiguity_list[n]!="undefined"};return n=e,s()&&i(),{name:r}},t.olson={},t.olson.timezones={"-720,0":"Etc/GMT+12","-660,0":"Pacific/Pago_Pago","-600,1":"America/Adak","-600,0":"Pacific/Honolulu","-570,0":"Pacific/Marquesas","-540,0":"Pacific/Gambier","-540,1":"America/Anchorage","-480,1":"America/Los_Angeles","-480,0":"Pacific/Pitcairn","-420,0":"America/Phoenix","-420,1":"America/Denver","-360,0":"America/Guatemala","-360,1":"America/Chicago","-360,1,s":"Pacific/Easter","-300,0":"America/Bogota","-300,1":"America/New_York","-270,0":"America/Caracas","-240,1":"America/Halifax","-240,0":"America/Santo_Domingo","-240,1,s":"America/Santiago","-210,1":"America/St_Johns","-180,1":"America/Godthab","-180,0":"America/Argentina/Buenos_Aires","-180,1,s":"America/Montevideo","-120,0":"Etc/GMT+2","-120,1":"Etc/GMT+2","-60,1":"Atlantic/Azores","-60,0":"Atlantic/Cape_Verde","0,0":"Etc/UTC","0,1":"Europe/London","60,1":"Europe/Berlin","60,0":"Africa/Lagos","60,1,s":"Africa/Windhoek","120,1":"Asia/Beirut","120,0":"Africa/Johannesburg","180,0":"Asia/Baghdad","180,1":"Europe/Moscow","210,1":"Asia/Tehran","240,0":"Asia/Dubai","240,1":"Asia/Baku","270,0":"Asia/Kabul","300,1":"Asia/Yekaterinburg","300,0":"Asia/Karachi","330,0":"Asia/Kolkata","345,0":"Asia/Kathmandu","360,0":"Asia/Dhaka","360,1":"Asia/Omsk","390,0":"Asia/Rangoon","420,1":"Asia/Krasnoyarsk","420,0":"Asia/Jakarta","480,0":"Asia/Shanghai","480,1":"Asia/Irkutsk","525,0":"Australia/Eucla","525,1,s":"Australia/Eucla","540,1":"Asia/Yakutsk","540,0":"Asia/Tokyo","570,0":"Australia/Darwin","570,1,s":"Australia/Adelaide","600,0":"Australia/Brisbane","600,1":"Asia/Vladivostok","600,1,s":"Australia/Sydney","630,1,s":"Australia/Lord_Howe","660,1":"Asia/Kamchatka","660,0":"Pacific/Noumea","690,0":"Pacific/Norfolk","720,1,s":"Pacific/Auckland","720,0":"Pacific/Tarawa","765,1,s":"Pacific/Chatham","780,0":"Pacific/Tongatapu","780,1,s":"Pacific/Apia","840,0":"Pacific/Kiritimati"},t.olson.dst_start_dates=function(){"use strict";var e=new Date(2010,6,15,1,0,0,0);return{"America/Denver":new Date(2011,2,13,3,0,0,0),"America/Mazatlan":new Date(2011,3,3,3,0,0,0),"America/Chicago":new Date(2011,2,13,3,0,0,0),"America/Mexico_City":new Date(2011,3,3,3,0,0,0),"America/Asuncion":new Date(2012,9,7,3,0,0,0),"America/Santiago":new Date(2012,9,3,3,0,0,0),"America/Campo_Grande":new Date(2012,9,21,5,0,0,0),"America/Montevideo":new Date(2011,9,2,3,0,0,0),"America/Sao_Paulo":new Date(2011,9,16,5,0,0,0),"America/Los_Angeles":new Date(2011,2,13,8,0,0,0),"America/Santa_Isabel":new Date(2011,3,5,8,0,0,0),"America/Havana":new Date(2012,2,10,2,0,0,0),"America/New_York":new Date(2012,2,10,7,0,0,0),"Asia/Beirut":new Date(2011,2,27,1,0,0,0),"Europe/Helsinki":new Date(2011,2,27,4,0,0,0),"Europe/Istanbul":new Date(2011,2,28,5,0,0,0),"Asia/Damascus":new Date(2011,3,1,2,0,0,0),"Asia/Jerusalem":new Date(2011,3,1,6,0,0,0),"Asia/Gaza":new Date(2009,2,28,0,30,0,0),"Africa/Cairo":new Date(2009,3,25,0,30,0,0),"Pacific/Auckland":new Date(2011,8,26,7,0,0,0),"Pacific/Fiji":new Date(2010,11,29,23,0,0,0),"America/Halifax":new Date(2011,2,13,6,0,0,0),"America/Goose_Bay":new Date(2011,2,13,2,1,0,0),"America/Miquelon":new Date(2011,2,13,5,0,0,0),"America/Godthab":new Date(2011,2,27,1,0,0,0),"Europe/Moscow":e,"Asia/Yekaterinburg":e,"Asia/Omsk":e,"Asia/Krasnoyarsk":e,"Asia/Irkutsk":e,"Asia/Yakutsk":e,"Asia/Vladivostok":e,"Asia/Kamchatka":e,"Europe/Minsk":e,"Australia/Perth":new Date(2008,10,1,1,0,0,0)}}(),t.olson.ambiguity_list={"America/Denver":["America/Denver","America/Mazatlan"],"America/Chicago":["America/Chicago","America/Mexico_City"],"America/Santiago":["America/Santiago","America/Asuncion","America/Campo_Grande"],"America/Montevideo":["America/Montevideo","America/Sao_Paulo"],"Asia/Beirut":["Asia/Beirut","Europe/Helsinki","Europe/Istanbul","Asia/Damascus","Asia/Jerusalem","Asia/Gaza"],"Pacific/Auckland":["Pacific/Auckland","Pacific/Fiji"],"America/Los_Angeles":["America/Los_Angeles","America/Santa_Isabel"],"America/New_York":["America/Havana","America/New_York"],"America/Halifax":["America/Goose_Bay","America/Halifax"],"America/Godthab":["America/Miquelon","America/Godthab"],"Asia/Dubai":["Europe/Moscow"],"Asia/Dhaka":["Asia/Yekaterinburg"],"Asia/Jakarta":["Asia/Omsk"],"Asia/Shanghai":["Asia/Krasnoyarsk","Australia/Perth"],"Asia/Tokyo":["Asia/Irkutsk"],"Australia/Brisbane":["Asia/Yakutsk"],"Pacific/Noumea":["Asia/Vladivostok"],"Pacific/Tarawa":["Asia/Kamchatka"],"Africa/Johannesburg":["Asia/Gaza","Africa/Cairo"],"Asia/Baghdad":["Europe/Minsk"]},typeof exports!="undefined"?exports.jstz=t:e.jstz=t})(this);
/*********************************************************************************************************
 * The User Interface
 * 
 * 
 *********************************************************************************************************/
 /**
 * Global UI Elements.  Declaring them globally allows them to be reused throughout CareCompass
 *  reducing the number of DOM selections which improves performance.
 */
  $(document).ready(function sizeCareCompass() {
	CareCompass.body = $(document.body);
	CareCompass.browser = $(window);
	CareCompass.body.height(CareCompass.browser.height());
	CareCompass.browser.resize(CareCompass.resize);
	document.onselectstart = function() {return false;};
	document.oncontextmenu = function() {return false;};
	document.ondblclick = function(){return false;};
	CareCompass.body.click(function() {
		PatientTable.clearPatientTableHighlights();
		ActivityListRightClickMenu.remove();
		PrnListRightClickMenu.remove();
	});
	/**
	 * Capture the key combination of Ctrl + Shift + } to enable/disable developer mode
	 * @param none
	 */
	$(document).keyup(function(e) {
		if (e.keyCode == 221 && e.ctrlKey && e.shiftKey) {
			CareCompass.determineDevMode();
		}
	});

	/**
	 * Fires every time Care Compass gains focus. This enable the Notifier to update new orders/results.
	 * Only enable when all the dialogs, error screens, and patient drill down are not displayed.
	 */
	document.onfocusin = function() {
		if (CareCompass.areDialogsAndErrorsClosed()) {
			Notifier.enable();
		}
	};

	document.onunload = function() {
		Service.setUnloading(true);
	};
	/**
	 * Fires every time Care Compass loses focus. This disable and prevent the Notifier from updating new orders/results.
	 */
	document.onfocusout = function() {
		Notifier.disable();
	};

	CareCompass.addScrollBarIfNeeded();
});

/**
 * Whenever our window becomes unloaded, we need to set the unloading flag to stop all JS callbacks from the COM Object
 */
window.onbeforeunload = function() {
	Service.setUnloading(true);
};

/**
 * First function hit when loading CareCompass and is called by the HTML file directly.
 * @param none
 */
function load() {
	window.carecompassIsLoaded = true;
	Timers.start("USR:CareCompass.GlobalLoad");
	Timers.addMetaData("USR:CareCompass.GlobalLoad", "V:1.3", "|");
	Timers.start("USR:CareCompass.LoadPrimaryCareNurseList");
	Timers.start("USR:CareCompass.LoadDepartmentalList");
	try{
		 overrideRefresh();
	}catch(err){
		
	}
	Timers.start("CAP:MPG.Care Compass");
	Timers.stop("CAP:MPG.Care Compass");
	Timers.start("CAP:CareCompass.Poblano");
	Timers.stop("CAP:CareCompass.Poblano");	
	
	Service.initialize();
	CareCompass.create();
}
 
 /**
 * Represents the global CareCompass user interface.
 */
var CareCompass = {
	body: null,
	toolbar: null,
	patientTable: null,
	timeline:null,
	timer: Timer(),
	browser: null,
	now: new Date(),
	resizeTimer: null,
	loaded: false,
	errorObjects: [],
	inDebugMode: false,
	minHeightSupported: 400,
	minWidthSupported: 1006,
	sortCommand: "CARECOMPASS_SORT",
	
	/**
	* Creates the CareCompass  User Interface.
	* @param - none.
	*/
	create: function createCareCompass() {
		CareCompass.body.addClass("cursor-default");
		this.loading();
		User.create();
		Service.reset();
		Toolbar.create();
               DateFormats.getMasks();
		Service.setUnloading(false);
		Service.loadPatientLists();
	},
	
	/**
	* Sets the solution in a loading state dithering the entire screen
	* @param - none.
	*/
	loading: function loadingCareCompass() {
		this.loaded = false;
		Overlay.display(this.body);
	},

	/**
	* Resizes the solution if the window has been resized.  A timeout is needed to prevent multiple
	* resize calls sent from the browser.  This improves speed and prevents resize duplication.
	* @param - none.
	*/
	resize: function resizeCareCompass() {
		if(CareCompass.loaded == false) {
			return;
		}
		if(this.resizeTimer) {
			clearTimeout(this.resizeTimer);
		}
		this.resizeTimer = setTimeout(function resizeCareCompassTimer() {
			//Close Any dialogs if they exist
			ReviewDialog.hideOverlay()
			RelationshipDialog.hideOverlay()
			PatientDrillDown.remove();
			PatientTable.hideRowHovers(null);
			ActivitiesPopOver.hide();
			QualityMeasurePopover.hide();
			Popover.remove();
			CareCompass.body.height(CareCompass.browser.height());
			Toolbar.create();
			if(NoPatientListsScreen.isDisplayed() == false && NoPatientsScreen.isDisplayed() == false && ErrorScreen.isDisplayed() == false) {
				Columns.initializeWidths();
				PatientTable.display();
				ActivityTimeline.size();
			}

			CareCompass.addScrollBarIfNeeded();
			NewDataButton.updateCount();
		}, 50);
	},

	/**
	* Determines if the solution is completely loaded or not.  If it is loaded then the Patient table is populated.
	* @param - none.
	* @return - True if the entire solution is loaded, false if not.
	*/
	isLoaded: function careCompassIsLoaded() {
		if(NoPatientListsScreen.isDisplayed() == false && NoPatientsScreen.isDisplayed() == false && ErrorScreen.isDisplayed() == false) {
			if(Configuration.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(PatientLists.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(Patients.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(Demographics.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(Results.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(Tasks.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(Orders.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(CareTeams.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(Allergies.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(QualityMeasures.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(CarePlans.loaded == false) {
				this.loaded = false;
				return false;
			}
			if(ErrorTasks.loaded === false) {
				this.loaded = false;
				return false;
			}
			if(Notifier.initialized == false) {
				this.loaded = false;
				return false;
			}
			if(Patients.sorted == false) {
				this.loaded = false;
				if(PatientTable.sort === "") {
						PatientTable.determineInitialSort();
				} else {
						PatientTable.sortPatientTable();
				}
				return false;
			}
		}
		if(this.loaded == true) {
			return true;
		}
		Overlay.remove();
		ReviewDialog.hideOverlay();
		RelationshipDialog.hideOverlay();

		Timers.start("ENG:CareCompass.isLoaded.Populate");
		this.loaded = true;
		
		if(NoPatientListsScreen.isDisplayed() == false && NoPatientsScreen.isDisplayed() == false && ErrorScreen.isDisplayed() == false) {
			Columns.create();

			PatientTable.create();
			ActivityTimeline.create();
			ActivityTimeline.populate();

			PatientTable.display();
			Notifier.enable();
			PatientListSelect.enable();
		}

		window.carecompassIsLoaded = true;

		Timers.stop("ENG:CareCompass.isLoaded.Populate");
		Timers.stop("USR:CareCompass.AcknowledgeNewData");
		Timers.stop("USR:CareCompass.ChangePatientLists");
		Timers.stop("USR:CareCompass.RefreshPatientLists");
		Timers.stop("USR:CareCompass.AddPatientToList");
		Timers.stop("USR:CareCompass.Refresh");
		Timers.stop("USR:CareCompass.RemovePatient");
		Timers.stop("ENG:CareCompass.addPatient.ProcessTransaction");
		Timers.stop("ENG:CareCompass.addPatient.TotalTransaction");
		if(PatientLists.getActive() != null && PatientLists.getActive().isDepartmental() == true) {
			Timers.stop("USR:CareCompass.LoadDepartmentalList");
			Timers.cancel("USR:CareCompass.LoadPrimaryCareNurseList");
		} else {
			Timers.stop("USR:CareCompass.LoadPrimaryCareNurseList");
			Timers.cancel("USR:CareCompass.LoadDepartmentalList");
		}
		Timers.stop("USR:CareCompass.GlobalLoad");
		
		if(Configuration.newNormalResultIndicator != null && Configuration.newNormalResultIndicator == true) {
			Timers.start("CAP:CareCompass.NewNormalResults");
			Timers.stop("CAP:CareCompass.NewNormalResults");
		}
		if(Configuration.positionLocationIndicator != null && Configuration.positionLocationIndicator == true) {
			Timers.start("CAP:CareCompass.PositionLocation");
			Timers.stop("CAP:CareCompass.PositionLocation");	
		}

		//Putting a timeout around this allows the list to paint while the rest is loading.
		setTimeout( function loadItemsToReview() {
			if(NoPatientListsScreen.isDisplayed() == false 
				&& NoPatientsScreen.isDisplayed() == false 
				&& ErrorScreen.isDisplayed() == false
				&& Patients.encountersExist == true
				&& Patients.relationshipsExist == true) {
				Service.loadNewOrders();
				Service.loadNewResults();
			}
		}, 1);

		return true;
	},
	
	/**
	 * Determine whether the user is currently in developer mode and enable/disable accordingly
	 * @param none
	 */	
	determineDevMode: function() {
		if(this.inDebugMode==false) {
			this.enableDebugMode();
		}
		else {
			this.exitDebugMode();
		}
	},

	/**
	 * Display the developer mode button
	 * @param none
	 */	
	enableDebugMode: function() {
		this.inDebugMode=true;
		Toolbar.developerModeButton.show();
	},
	
	/**
	 * Exit debug mode and hide the developer button and dialog
	 * @param none
	 */	
	exitDebugMode: function() {
		this.inDebugMode=false;
		Toolbar.developerModeButton.hide();
		DeveloperModeDialog.hide();
		this.setClipboardData('');
	},
	
	/**
	 * Place a string in the clipboard
	 * @param aString - a string to place in the clipboard
	 */	
	setClipboardData: function(aString) {
		window.clipboardData.setData('text', aString);
	},
	
	/**
	 * Reset the objects
	 * @param none
	 */	
	cleanUp: function() {
		this.errorObjects = [];
	},

	/**
	*   Check if Scrollbar is needed
	*/
	addScrollBarIfNeeded: function() {
		if(CareCompass.browser.width() < CareCompass.minWidthSupported) {
			$("html").css("overflow-x", "scroll");
		}
		else {
			$("html").css("overflow-x", "hidden");
		}
		if(CareCompass.browser.height() < CareCompass.minHeightSupported) {
			$("html").css("overflow-y", "scroll");
		}
		else {
			$("html").css("overflow-y", "hidden");
		}
	},

	/**
	* Return the height of carecompass 
	* (The documentElement property returns the documentElement of a document, as an Element object.
	* For HTML documents the returned object is the HTML element.
	* Note: If the HTML element is missing, the return value is null)
	*/
	getDocHeight : function() {
		if(CareCompass.browser.height() < CareCompass.minHeightSupported) {
			return document.documentElement.scrollHeight;
		}else{
			return CareCompass.browser.height();
		}
	},

	/**
	 * Checks all Care Compass dialogs, error screens, popovers, and patient drill down displayed status.
	 * @param none
	 * @return True if all error screens, dialogs, popovers, and patient drill down are not displayed, false if at least one is displayed.
	 */
	areDialogsAndErrorsClosed: function() {
		//checks menus
		if (RightClickMenu.isDisplayed() === true) {
			return false;
		}

		//checks dialogs
		if (ReviewDialog.isDisplayed() === true || RelationshipDialog.isDisplayed() === true 
			|| ErrorDialog.isDisplayed() === true || DeveloperModeDialog.isDisplayed() === true) {
			return false;
		}
		
		//checks patient drill down
		if (PatientDrillDown.isDisplayed() === true) {
			return false;
		}
		
		//checks warning/error screens
		if (NoPatientListsScreen.isDisplayed() === true || NoPatientsScreen.isDisplayed() === true 
			|| ErrorScreen.isDisplayed() === true) {
			return false;
		}

		//checks popovers
		if (QualityMeasurePopover.isDisplayed() === true
			|| Popover.isDisplayed() === true || ActivitiesPopOver.isDisplayed() === true) {
			return false;
		}

		return true;
	}
};

/**
 * Determines if the input label is truncated.
 * @param label - The label object to determine if it is truncated or not.
 * @param padding - A numeric value representing the left padding size to take into account.
 */
isTruncated: function isTruncated(label, padding) {
	if(label == null) {
		return false;
	}
	if(label.length == 0) {
		return false;
	}
	if(padding == undefined) {
		padding = 0;
	}
	var labelWidth = label.outerWidth();
	var textWidth = label[0].scrollWidth - padding;
	if(labelWidth < textWidth) {
		return true;
	}
	return false;
}

/**
 * Represents a standard hover to be displayed in CareCompass
 */	
var Hover =  {
	hover: null,
	container: null,
	cursor: false,
	
	/**
	 * Displays the hover at the position of the cursor.
	 * @param cursor - The cursor to display the hover for.
	 * @param label - The label to display in the hover.
	 * @param content - The string or HTML content to display in the hover.
	 */	
	display: function(cursor, label, content) {
		if(RightClickMenu.isDisplayed()) {
			return;
		}

		if(NewDataButton.clicked == true) {
			return;
		}
		if(this.hover == null) {
			this.create(label, content);
		}
		else {
			this.remove();
			this.create(label, content);
		}
		
		this.hover.appendTo(CareCompass.body);
		this.hover.show();
		
		var top = 0;
		var left = cursor.pageX;
		var right =  cursor.pageY;
		var availableYSpace = CareCompass.browser.height() - right;
		var availableXSpace = CareCompass.browser.width() - left;
		 
		if(availableYSpace < this.hover.height() + 10) {
			top = cursor.pageY - this.hover.height() - 50;//if the last row has comment icon we need to move the tooltip ahead.
		}
		else {
			top = cursor.pageY + 10;
		}
		/*
		When PatientDrillDown is displayed, and when we hover the mouse on a patient name which above the selected patient, the
		hover does not get displayed.
		Also when we hover on interdisciplinary tasks or comment icon, though the available space is greater than the comment height, a portion
		of comment does not get displayed correctly.
		*/
		if(PatientDrillDown.isDisplayed() ) {
			var availableNewYSpace = CareCompass.browser.height() - top;
			//check if the new available space is less than the hover height then substract the height of the tooltip and some offset
			//so that the whole content is displayed within the visible area.
			if(availableNewYSpace < this.hover.height() + 20 ) {
				top = cursor.pageY - this.hover.height() - 50;
			}
		}
		if(availableXSpace < this.hover.width() + 10) {
			this.hover.css("right", availableXSpace + 5);
		}
		else {
			this.hover.css("left", left);
		}
	
		this.hover.css("top", top);
		Shadow.display(this.hover);
	},
	
	/**
	 * Hides the hover
	 * @param none
	 */	
	hide: function() {
		if(this.hover != null && this.cursor == false) {
			Hover.remove();
		}
	},

	remove: function() {
		if(this.hover != null) {
			Hover.hover.remove();
			Hover.hover = null;
			Hover.cursor = false;
		}
	},
	
	/**
	 * Creates the hover
	 * @param label - The label to display at the top of the hover.
	 * @param content - The content to display in the hover.
	 */	
	create: function(label, content) {
		this.hover = $(document.createElement('div'));
		this.hover.prop("id", "hover");
		this.hover.addClass('patient-hover');
		this.container = $(document.createElement('div'));
		this.container.addClass('patient-hover-inner');
		this.container.appendTo(this.hover);
		var html = "";
		var shadowChildSequence = 1;
		html += '<div class="hover-content borderless">';
		if(label != "") {
			html += '<div class="hover-label">' + label + '</div>';
		}
		html += content + '</div>';

		this.container.append(html);
		var config = {    
			 over: function(){Hover.cursor = true;},
			 timeout: 200,
			 out: function(e) {Hover.cursor = false; Hover.hide();},
			 interval: 10			 
		};
		this.hover.hoverIntent(config);
	},

	/**
	 * Initializes a hover for the input label if it is truncated.
	 * @param label - The target label object containing text that could possbily be truncated.
	 */	
	displayForTruncation: function(label) {
		if(label == null) {
			return;
		}
		var display = label[0]['innerText'];
		if(isTruncated(label)) {
			var config = {    
				 over: function(e) {Hover.display(e, "", display)},
				 timeout: 200,
				 out: function(e) {Hover.hide();},
				 interval: 200
			};
			label.hoverIntent(config);	
		}
	}
};

/**
 * Overrides the refresh button in PowerChart with the JavaScript refresh() function.
 */
function overrideRefresh() {
	window.external.MPAGESOVERRIDEREFRESH("refresh()");
}

/**
 * Handles when the user clicks the refresh button in PowerChart.
 */
function refresh() {
	if(window.carecompassIsLoaded == false && Patients.patientsLimitExceeded == false) {
		return;
	}

	CareCompass.cleanUp();
	Timers.cleanUp();

	window.carecompassIsLoaded = false;
	Timers.start("USR:CareCompass.Refresh")
	if(ReviewDialog.container) {
		ReviewDialog.hideOverlay();
	}
	if(ErrorScreen.isDisplayed())
	{
		ErrorScreen.hide();
	}
	if(RelationshipDialog.container) {
		RelationshipDialog.hideOverlay();
	}

	if(DeveloperModeDialog.container) {
		DeveloperModeDialog.hideOverlay();
	}
	Patients.sorted = false;
	NewDataMenu.remove();
	RightClickMenu.remove();
	PatientDrillDown.remove();
	ActivityListRightClickMenu.remove();
	PrnListRightClickMenu.remove();
	PatientTable.hideRowHovers();
	ActivitiesPopOver.hide();
	QualityMeasurePopover.hide();
	Popover.remove();
	PatientLists.refresh();
	Toolbar.setFocus();
}

/**
 * Parses the blob reply from the CareCompass service and converts it into a JSON object.
 * @param none
 */	
function parseReply(reply) {
	var jsonReply = null;
	if(reply == null || reply == "") {
		return jsonReply;
	}
	try {
		jsonReply = $.parseJSON(reply);
	}
	catch(err) {
		//Don't want to throw a JSON parsing error incase we can't parse the failed call stack.
	}
	
	return jsonReply;
}
function PatientNavigation(dir, object){
	var index = Patients.getIndex();
	if(dir == 1){ //Next
		if(Patients.get(index + 1) == null){
			setPatientContext(0, object);
		}
		else{
			setPatientContext(index + 1, object);
		}
	}
	else{ //Previous
		if(Patients.get(index - 1) == null){
			var lastIndex = Patients.count() - 1;
			setPatientContext(lastIndex, object);
		}
		else{
			setPatientContext(index - 1, object);
		}
	}
}

function setPatientContext(index, object) {
	object.personId = Patients.get(index).patientId;
	object.encounterId = Patients.get(index).encounterId;
	Patients.setIndex(index);
}

/**
 * Handles the reply of the configuration transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processConfiguration(reply) {
	Timers.stop("ENG:CareCompass.loadConfiguration.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadConfiguration.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status != "F") {
		Configuration.unpack(jsonReply.data);
	}else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE);
	}

	// Only log timer once upon initial load if therapies exist
	if (Configuration.therapiesExist == true && window.carecompassIsLoaded == true) {
		Timers.start("CAP:CareCompass.Respiratory");
		Timers.stop("CAP:CareCompass.Respiratory");
	}

	Configuration.loaded = true;

	if(Patients.relationshipsExist) {
		Service.loadQualityMeasures();
		if (Configuration.errorTasksIndicator) {
			Service.loadErrorTasks();
		}
		else {
			ErrorTasks.loaded = true;
		}
		if(PatientLists.getActive() != null && PatientLists.getActive().isDepartmental() != true) {
			Service.loadCarePlansForPatients();
		} else {
			CarePlans.loaded = true;
		}
	} else {
		CarePlans.loaded = true;
		QualityMeasures.loaded = true;
		ErrorTasks.loaded = true;
	}
	
	if(Patients.establishButtonEnable && Configuration.selfDeclareRelationship) {
		 Toolbar.establishRelationshipsButton.enable();
	}

	CareCompass.isLoaded();

	if(Configuration.customs != null && Configuration.customs.length > 0) {
		Timers.start("CAP:CareCompass.ResultsFaceUp");
		Timers.stop("CAP:CareCompass.ResultsFaceUp");
	}
	if(Configuration.VIPIndicator) {
		Timers.start("CAP:CareCompass.VIP");
		Timers.stop("CAP:CareCompass.VIP");
	}
	if(Configuration.confidentialityIndicator) {
		Timers.start("CAP:CareCompass.Confidentiality");
		Timers.stop("CAP:CareCompass.Confidentiality");
	}
	if(Configuration.medicationRouteIndicator) {
		Timers.start("CAP:CareCompass.MedicationRouteFilter");
		Timers.stop("CAP:CareCompass.MedicationRouteFilter");
	}

	Timers.stop("ENG:CareCompass.loadConfiguration.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadConfiguration.TotalTransaction");
}
/**
 * Handles the reply of the patient lists transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processPatientLists(reply) {
	Timers.stop("ENG:CareCompass.loadPatientLists.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadPatientLists.ProcessTransaction");
	PatientLists.empty();
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		PatientLists.unpack(jsonReply);
		PatientListSelect.populate();
		PatientLists.loadActive();
	}
	else if(jsonReply != null && jsonReply.status == "Z") {
		Toolbar.patientListSelect.addClass(" no-lists")
		NoPatientListsScreen.display();
	}else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	PatientLists.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadPatientLists.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadPatientLists.TotalTransaction");
	if(PatientLists.patientLists == undefined || PatientLists.patientLists == null){
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "PL:0", "|");
	}
	else{
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "PL:" + PatientLists.patientLists.length, "|");
	}
}

/**
 * Handles the reply of the patients transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processPatients(reply) {
	Timers.stop("ENG:CareCompass.loadPatients.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadPatients.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		if(Patients.alreadyLoaded(jsonReply) == true) {
			Overlay.remove();
 			Timers.stop("ENG:CareCompass.loadPatients.ProcessTransaction");
			Timers.stop("ENG:CareCompass.loadPatients.TotalTransaction");
			return;
		}
		if(jsonReply.data.length > 100) {
			Toolbar.addPatientButton.disable();
			Timers.stop("ENG:CareCompass.loadPatients.ProcessTransaction");
			Timers.stop("ENG:CareCompass.loadPatients.TotalTransaction");
			Patients.patientsLimitExceeded = true;
			NoPatientsScreen.display(i18n.PATIENT_LIMIT);
			return;
		}
		Patients.empty();
		Patients.unpack(jsonReply);
		if(Patients.encountersExist) {
			Service.loadDemographics();
		}
		if(Patients.encountersExist && Patients.relationshipsExist) {
			Service.loadAllergies();
			Sepsis.loaded = true;
			Notifier.initialize();
		}
		else {
			if(Patients.encountersExist == false) {
				Demographics.loaded = true;
				Tasks.loaded = true;
				NewOrders.loaded = true;
				Orders.loaded = true;
				Results.loaded = true;
				CareTeams.loaded = true;
				NewResults.loaded = true;
				CarePlans.loaded = true;
				Patients.sorted = true;
				ErrorTasks.loaded = true;
			}

			Allergies.loaded = true;
			Sepsis.loaded = true;
			Notifier.initialized = true;

			if(PatientLists.getActive() != null && PatientLists.getActive().isDepartmental() == true) {
				Timers.stop("USR:CareCompass.LoadDepartmentalList");
				Timers.cancel("USR:CareCompass.LoadPrimaryCareNurseList");
			}
			else {
				Timers.stop("USR:CareCompass.LoadPrimaryCareNurseList");
				Timers.cancel("USR:CareCompass.LoadDepartmentalList");
			}
			Timers.stop("USR:CareCompass.ChangePatientLists");
			Timers.stop("USR:CareCompass.GlobalLoad");
		}
	}
	else if(jsonReply != null && jsonReply.status == "Z") {
		NoPatientsScreen.display();
	}
	else if(jsonReply != null && jsonReply.status == "F") {
	 	ErrorScreen.display(i18n.SYSTEM_FAILURE);
	}
	Patients.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadPatients.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadPatients.TotalTransaction");
	if(Patients.patients == undefined || Patients.patients == null){
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "P:0", "|");
	}
	else{
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "P:" + Patients.patients.length, "|");
	}
}

/**
 * Handles the reply of the sort patients transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processSortPatients(reply) {
	Timers.stop("ENG:CareCompass.sortPatients.ExecuteTransaction");
	Timers.start("ENG:CareCompass.sortPatients.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply !== null && jsonReply.status === "S") {
		Patients.sort(jsonReply.data);
		if(CareCompass.loaded === true)  {
			PatientTable.display();
		}
	}else if(jsonReply === null || jsonReply.status === "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	Patients.sorted = true;
	Timers.stop("ENG:CareCompass.sortPatients.ProcessTransaction");
	Timers.stop("ENG:CareCompass.sortPatients.TotalTransaction");
	CareCompass.isLoaded();
}
/**
 * Handles the reply of the task counts transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processTaskCounts(reply) {
	Timers.stop("ENG:CareCompass.loadTaskCounts.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadTaskCounts.ProcessTransaction");
	var jsonReply = parseReply(reply);
	Tasks.empty();
	if(jsonReply !== null && jsonReply.status === "S") {
		Tasks.unpack(jsonReply);
		Tasks.unpackIds(jsonReply);
		if(CareCompass.loaded === true)  {
			PatientTable.display();
		}
		if(PatientDrillDown.isDisplayed()) {
			PatientTable.display();
			ActivityTimeline.populate();
			ActivityList.loadTaskDisplays();
		}
	}
	else if(jsonReply === null || jsonReply.status === "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	Tasks.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadTaskCounts.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadTaskCounts.TotalTransaction");
	if(Tasks.taskNumber === undefined || Tasks.taskNumber === null){
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "T:0", "|");
	}
	else{
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "T:" + Tasks.taskNumber, "|");
	}
}

/**
 * Handles the reply of the task counts transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processTasks(reply) {
	Timers.stop("ENG:CareCompass.loadTasks.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadTasks.ProcessTransaction");
	var jsonReply = parseReply(reply);
	Tasks.replyStatus = jsonReply.status;
 	if(jsonReply !== null && jsonReply.status === "S") {
        if(ActivitiesPopOver.active == true) {
            Tasks.unpackTaskDetailsForPopOver(jsonReply);
            //To check latest status of the tasks when we open Activities Pop over.
            if(Tasks.checkCompletedTasks()) {
               alert(i18n.TASKS_UPDATED_WARNING);
               Timers.stop("ENG:CareCompass.loadTasks.ProcessTransaction");
               Timers.stop("ENG:CareCompass.loadTasks.TotalTransaction");
               ActivitiesPopOver.active = false;
               //clear the tasksPopOverDetails array
               Tasks.tasksPopOverDetails = [];
               refresh();  
            }else 
            {
               ActivitiesPopOver.applyFilters();
               var content = ActivitiesPopOver.createContent();
               ActivitiesPopOver.appendContent(content);
            }
        }
        else if(ActivityListTab.loadSelectedTasksFlag === false && PrnListTab.loadSelectedTasksFlag === false){
            Tasks.unpackDisplays(jsonReply);
             //To check latest status of the tasks when we open patient drill down.
            if(Tasks.checkForCompletedTasks()) {
               alert(i18n.TASKS_UPDATED_WARNING);
               PatientDrillDown.remove();
               Timers.stop("ENG:CareCompass.loadTasks.ProcessTransaction");
               Timers.stop("ENG:CareCompass.loadTasks.TotalTransaction");
               refresh();
            }
			
            if(PatientDrillDown.isDisplayed()) {
               ActivityListTab.refreshTasks();
               PrnListTab.refreshTasks();
            }
        }
        //To get latest status of tasks when we select them in Patient drill down to perform carting actions.
        else if ((ActivityListTab.loadSelectedTasksFlag) || (PrnListTab.loadSelectedTasksFlag)){
            Tasks.unpackSelectedTasks(jsonReply);
        }
    }
    else if(jsonReply === null || jsonReply.status === "F") {
        if(PatientDrillDown.isDisplayed()){
            Overlay.remove();
            PatientDrillDownErrorScreen.display(i18n.SYSTEM_FAILURE, PatientDrillDown.container);
        }else
        {
            ErrorScreen.display(i18n.SYSTEM_FAILURE); 
        }
    }
    else if(jsonReply.status === "Z") {
          if(Tasks.checkForCompletedTasks()) {
             alert(i18n.TASKS_UPDATED_WARNING);
             Timers.stop("ENG:CareCompass.loadTasks.ProcessTransaction");
             Timers.stop("ENG:CareCompass.loadTasks.TotalTransaction");
             refresh();
           }
    }
    ActivityListTab.loadSelectedTasksFlag = false;
    PrnListTab.loadSelectedTasksFlag = false;
    Timers.stop("ENG:CareCompass.loadTasks.ProcessTransaction");
    Timers.stop("ENG:CareCompass.loadTasks.TotalTransaction");
}

/**
 * Handles the reply of the care result transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processResultInfo(reply) {
	Timers.stop("ENG:CareCompass.loadResultInfo.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadResultInfo.ProcessTransaction");
	Results.empty();
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		Results.unpack(jsonReply);
	}
	else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	if(Demographics.loaded && Configuration.loaded === true) {
        	if(PatientTable.sort === "") {
		  	PatientTable.determineInitialSort();
        	} else {
            		PatientTable.sortPatientTable();
        	}
	}
	Results.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadResultInfo.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadResultInfo.TotalTransaction");
	if(Results.careResultCount == undefined || Results.careResultCount == null){
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "CR:0", "|");	
	}
	else{
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "CR:" + Results.careResultCount, "|");
	}
}

/**
 * Handles the reply of the new result transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processNewResults(reply) {
	Timers.stop("ENG:CareCompass.loadNewResults.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadNewResults.ProcessTransaction");
	var jsonReply = parseReply(reply);
	NewResults.empty();
	if(jsonReply !== null && jsonReply.status === "S") {
		NewResults.unpack(jsonReply);
	}else if(jsonReply === null || jsonReply.status === "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE);
		return;
	}
	NewResults.loaded = true;
	if(NewOrders.loaded === true && NewResults.loaded === true) {
		if ((NewOrders.orders.length > 0) || (NewResults.results.length >= 0)) {
			if(Patients.sorted === false) {        
				if(PatientTable.sort === "") {
					PatientTable.determineInitialSort();
		        } else {
		            PatientTable.sortPatientTable();
		        }
			} else {
				PatientTable.display();
			}
		}
	}
	NewDataButton.updateCount();

	Overlay.remove();
	ReviewDialog.hideOverlay();
	RelationshipDialog.hideOverlay();

	Timers.stop("ENG:CareCompass.loadNewResults.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadNewResults.TotalTransaction");
	ReviewDialog.stopAcknowledgeDataTimer(); 	
}

/**
 * Handles the reply of the new orders transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processNewOrders(reply) {
	Timers.stop("ENG:CareCompass.loadNewOrders.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadNewOrders.ProcessTransaction");
	var jsonReply = parseReply(reply);
	NewOrders.empty();
	if(jsonReply !== null && jsonReply.status === "S") {	
		NewOrders.unpack(jsonReply);
	}else if(jsonReply === null || jsonReply.status === "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE);
		return;
	}
	NewOrders.loaded = true;
	if(NewOrders.loaded === true && NewResults.loaded === true) {
		if ((NewOrders.orders.length >= 0) || (NewResults.results.length > 0)) {
			if(Patients.sorted === false) {        
				if(PatientTable.sort === "") {
					PatientTable.determineInitialSort();
		        } else {
		            PatientTable.sortPatientTable();
		        }
			} else {
				PatientTable.display();
			}
		}
	}
	NewDataButton.updateCount();

	Overlay.remove();
	ReviewDialog.hideOverlay();
	RelationshipDialog.hideOverlay();

	Timers.stop("ENG:CareCompass.loadNewOrders.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadNewOrders.TotalTransaction");
	ReviewDialog.stopAcknowledgeDataTimer(); 	
}
/**
 * Handles the reply of the care orders transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processOrderInfo(reply) {
	Timers.stop("ENG:CareCompass.loadOrders.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadOrders.ProcessTransaction");
	Orders.empty();
	var jsonReply = parseReply(reply);
	if(jsonReply !== null && jsonReply.status === "S") {
		Orders.unpack(jsonReply);
		if(CareCompass.loaded === true && NewOrders.loaded === true && QualityMeasures.loaded === true)  {
		PatientTable.display();
		}
	}else if(jsonReply === null || jsonReply.status === "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	Orders.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadOrders.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadOrders.TotalTransaction");
	if(Orders.careOrderCount === undefined || Orders.careOrderCount === null){
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "CO:0", "|");
	}
	else{
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "CO:" + Orders.careOrderCount, "|");
	}
}
/**
 * Handles the reply of the demographics transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processDemographics(reply) {
	Timers.stop("ENG:CareCompass.loadDemographics.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadDemographics.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		User.resetLocation();
		Demographics.unpack(jsonReply);
		Service.loadConfiguration();
		if(Patients.relationshipsExist) {
			Service.loadTaskCounts();
			Service.loadOrders();
			Service.loadResults();
			Service.loadCareTeams();
		}
		else {
			Tasks.loaded = true;
			Orders.loaded = true;
			Results.loaded = true;
			CareTeams.loaded = true;
		}
	}
	else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE);
	}
	if (Results.loaded && Configuration.loaded === true) {
	        if(PatientTable.sort === "") {
			  PatientTable.determineInitialSort();
	        } else {
	            PatientTable.sortPatientTable();
	        }
	}
	Demographics.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadDemographics.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadDemographics.TotalTransaction");
}
/**
 * Handles the reply of the care teams transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processCareTeams(reply) {
	Timers.stop("ENG:CareCompass.loadCareTeams.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadCareTeams.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		CareTeams.unpack(jsonReply);
	}else if(jsonReply == null || jsonReply.status == "F") {

		 ErrorScreen.display(i18n.SYSTEM_FAILURE);
	}
	CareTeams.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadCareTeams.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadCareTeams.TotalTransaction");
}
/**
 * Handles the reply of the allergies  transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processAllergies(reply) {
	Timers.stop("ENG:CareCompass.loadAllergies.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadAllergies.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply !== null && jsonReply.status === "S") {
		Allergies.unpack(jsonReply);
		PatientInformationTab.refreshAllergies();
		if(CareCompass.loaded === true)  {
		PatientTable.display();
		}
	}else if(jsonReply === null || jsonReply.status === "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	Allergies.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadAllergies.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadAllergies.TotalTransaction");
}
/**
 * Handles the reply of the quality measures transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processQualityMeasures(reply) {
	Timers.stop("ENG:CareCompass.loadQualityMeasures.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadQualityMeasures.ProcessTransaction");
	 
	var jsonReply = parseReply(reply);
	if(jsonReply !== null && jsonReply.status === "S") {
		QualityMeasures.unpack(jsonReply);
		if(CareCompass.loaded === true && Orders.loaded === true && NewOrders.loaded === true)  {
		PatientTable.display();
		}
	}else if(jsonReply !== null && jsonReply.status === "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	  
	QualityMeasures.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadQualityMeasures.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadQualityMeasures.TotalTransaction");
	if(QualityMeasures.measures === undefined || QualityMeasures.measures === null){
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "Q:0", "|");
	}
	else{
		Timers.addMetaData("USR:CareCompass.GlobalLoad", "Q:" + QualityMeasures.measures.length, "|");
	}
}
/**
 * Handles the reply of the sepsis transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processSepsis(reply) {
	Timers.stop("ENG:CareCompass.loadSepsis.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadSepsis.ProcessTransaction");
	var jsonReply = parseReply(reply);
	// Sepsis transaction related work is not complete yet so ignoring null jsonReply 
	if(jsonReply != null && jsonReply.status == "S") {
		Sepsis.unpack(jsonReply);
	}else if(jsonReply != null && jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	Sepsis.loaded = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.loadSepsis.ProcessTransaction");
	Timers.stop("ENG:CareCompass.loadSepsis.TotalTransaction");
}
/**
 * Handles the reply of the review results transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processReviewResults(reply) {
	Timers.stop("ENG:CareCompass.reviewResults.ExecuteTransaction");
	Timers.start("ENG:CareCompass.reviewResults.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		Service.loadNewResults();
	}else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	Timers.stop("ENG:CareCompass.reviewResults.ProcessTransaction");//not 100% sure
	Timers.stop("ENG:CareCompass.reviewResults.TotalTransaction");//not 100% sure
}
/**
 * Handles the reply of the review orders transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processReviewOrders(reply) {
	Timers.stop("ENG:CareCompass.reviewOrders.ExecuteTransaction");
	Timers.start("ENG:CareCompass.reviewOrders.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		Service.loadNewOrders();
	}else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	Timers.stop("ENG:CareCompass.reviewOrders.ProcessTransaction");
	Timers.stop("ENG:CareCompass.reviewOrders.TotalTransaction");
}
/**
 * Handles the reply of the relationships transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processRelationships(reply) {
	Timers.stop("ENG:CareCompass.loadRelationships.ExecuteTransaction");
	Timers.start("ENG:CareCompass.loadRelationships.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status != "F") {
		RelationshipDialog.relationships = jsonReply.data;
		RelationshipDialog.load();
	}else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE);
	}
}
/**
 * Handles the reply of the add patient transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processAddPatient(reply) {
	Timers.stop("ENG:CareCompass.addPatient.ExecuteTransaction");
	Timers.start("ENG:CareCompass.addPatient.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		Patients.refresh();
	}else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
}
/**
 * Handles the reply of the remove patient transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processRemovePatient(reply) {
	Timers.stop("ENG:CareCompass.removePatient.ExecuteTransaction");
	Timers.start("ENG:CareCompass.removePatient.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		Patients.refresh();
	}else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
}

/**
 * Handles the reply of the establish relationship transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processEstablishRelationship(reply) {
	Timers.stop("ENG:CareCompass.establishRelationships.ExecuteTransaction");
	Timers.start("ENG:CareCompass.establishRelationships.ProcessTransaction");
	var jsonReply = parseReply(reply);
	if(jsonReply != null && jsonReply.status == "S") {
		Service.loadPatients(PatientLists.getActiveId()); 
		Timers.stop("USR:CareCompass.EstablishRelationships");
	}else if(jsonReply == null || jsonReply.status == "F") {
		ErrorScreen.display(i18n.SYSTEM_FAILURE); 
	}
	Timers.stop("ENG:CareCompass.establishRelationships.ProcessTransaction");
	Timers.stop("ENG:CareCompass.establishRelationships.TotalTransaction");
}
/**
 * Handles the reply of the initialize notifier thread and is called once the thread is complete.
 * @param reply - The status from the notifier transaction.
 */
function processInitializeNotifier(reply) {
	Timers.stop("ENG:CareCompass.initializeNotifier.ExecuteTransaction");
	Timers.start("ENG:CareCompass.initializeNotifier.ProcessTransaction");
	Notifier.initialized = true;
	CareCompass.isLoaded();
	Timers.stop("ENG:CareCompass.initializeNotifier.ProcessTransaction");
	Timers.stop("ENG:CareCompass.initializeNotifier.TotalTransaction");
}
/**
 * Handles the reply of the establish relationship transaction and is called once the transaction is complete.
 * @param reply - The JSON blob reply from the CareCompass service.
 */
function processCarePlansForPatients(reply) {
    Timers.stop("ENG:CareCompass.loadCarePlansForPatients.ExecuteTransaction");
    Timers.start("ENG:CareCompass.loadCarePlansForPatients.ProcessTransaction");

    var jsonReply = parseReply(reply);
    if(jsonReply !== null && jsonReply.status !== "F") {
      if(jsonReply.status === "S"){
      CarePlans.unpack(jsonReply.data);
        if(CareCompass.loaded === true)  {
        PatientTable.display();
        }
      }
      if (PatientDrillDown.isDisplayed() === true) {
      PlanOfCareTab.appendCarePlans();
      } else {
      Patients.setPatientsCarePlanLoaded();
      }
    } else if(jsonReply !== null && jsonReply.status === "F") {
    	Overlay.remove();
    	ErrorScreen.display(i18n.SYSTEM_FAILURE);
    }

	CarePlans.loaded = true;
	CareCompass.isLoaded();
    Timers.stop("ENG:CareCompass.loadCarePlansForPatients.ProcessTransaction");
    Timers.stop("ENG:CareCompass.loadCarePlansForPatients.TotalTransaction");
}
/**
 * Handles the reply of the error tasks transaction and is called once the transaction is complete
 * @param reply - The JSON blob reply from the CareCompass service
 */
function processErrorTasks(reply) {
    Timers.stop("ENG:CareCompass.loadErrorTasks.ExecuteTransaction");
    Timers.start("ENG:CareCompass.loadErrorTasks.ProcessTransaction");

    var jsonReply = parseReply(reply);
    if (jsonReply && jsonReply.status === "S") {
        ErrorTasks.unpack(jsonReply);
    }
    else if (!jsonReply || jsonReply.status === "F") {
        ErrorScreen.display(i18n.SYSTEM_FAILURE); 
    }

    ErrorTasks.loaded = true;
    CareCompass.isLoaded();
    Timers.stop("ENG:CareCompass.loadErrorTasks.ProcessTransaction");
    Timers.stop("ENG:CareCompass.loadErrorTasks.TotalTransaction");
}

/**
 * Allows starting and stopping SLA timers by name so that timers can be started and stopped
 * in different places without needing to pass around the timer object.
 */
var Timers = {
	timers: [],
	basicTimers: [],
	timerGroups: [],
	
	/**
	 * Starts an SLA timer
	 * @param name - The name of the timer to start.
	 */		
	start: function startTimer(name, metaData1) {
		if (this.timers[name] !== undefined && this.timers[name] !== null){
			this.fail(name, "Duplicate timer");
			return;
		}
		
		var timer = this.create(name, "", metaData1);
		
		// Create a simple JavaScript timer to mimic the use of the real Timers
		// Used for developer mode
		var basicTimer = new Timer(name);
		
		if (timer === null){
			return;
		}
		timer.Start();
		basicTimer.start();
		
		this.timers[name] = timer;
		this.basicTimers[name] = basicTimer;
		
		// Create a group of timers based on their type, group, and category 
		// Used for developer mode to see the execute, process, and total timers together
		var timerString = basicTimer.timerType + basicTimer.group + basicTimer.category;
		var currentTimerGroup = this.timerGroups[timerString];
		if(!currentTimerGroup) {
			currentTimerGroup = { type: '', timers: [], startTime: null };
		}
		
		if(currentTimerGroup.startTime == null) {
			currentTimerGroup.startTime = basicTimer.startTime;
		}
		currentTimerGroup.type = basicTimer.timerType;
		currentTimerGroup.timers[currentTimerGroup.timers.length] = basicTimer;
		this.timerGroups[timerString] = currentTimerGroup;
	},
	
	/**
	 * Stops an SLA timer
	 * @param name - The name of the timer to stop.
	 */		
	stop: function stopTimer(name) {
		if (this.timers[name] === undefined || this.timers[name] === null){
			return;
		}
		this.timers[name].Stop();
		
		var basicTimer = this.basicTimers[name];
		
		if(basicTimer != null) {
			basicTimer.stop();
			
			var timerString = basicTimer.timerType + basicTimer.group + basicTimer.category;
			var currentTimerGroup = this.timerGroups[timerString];
			currentTimerGroup.stopTime = new Date();
		} 
		
		delete this.timers[name];
	},

	addMetaData: function addMetaData(name, metaData, seperator){
		if (this.timers[name] !== undefined && this.timers[name] !== null){
			this.timers[name].Metadata1 += String(metaData);
			this.timers[name].Metadata1 += String(seperator);
		}
	},
	
	/**
	 * Cancels an SLA timer and will not be logged
	 * @param name - The name of the timer to fail.
	 */	
	cancel: function cancelTimer(name) {
		if (this.timers[name] === undefined || this.timers[name] === null){
			return;
		}
		delete this.timers[name];
	},
	
	/**
	 * Fails an SLA timer
	 * @param name - The name of the timer to fail.
	 * @param reason - The reason the timer was failed to be stored on the failure.
	 */	
	fail: function failTimer(name, reason) {
		if (this.timers[name] === undefined || this.timers[name] === null){
			return;
		}
		this.timers[name].Metadata1 = String(reason);
		this.timers[name].Fail();
		delete this.timers[name];
	},
	
	/**
	 * Fails all SLA timers that have been started
	 * @param reason - The reason the timers were failed to be stored on the failure.
	 */	
	failAll: function failAllTimers(reason) {
		$.each(timers, function(name, timer){
			if (timer !== undefined && timer !== null){
				timer.Metadata1 = String(reason);
				timer.Fail();
			}
		});
		this.timers = {};
	},
	
	/**
	 * Creates an SLA timer
	 * @param name - The name of the timer to create.
	 * @param subName - The secondary or sub name of the timer to create.
	 * @param metaData1 - The first meta data to store on the timer.
	 * @param metaData2 - The second meta data to store on the timer.
	 * @param metaData3 - The third meta data to store on the timer.
	 */	
	create: function createTimer(name, subName, metaData1, metaData2, metaData3){
		try {
			var slaTimer = window.external.DiscernObjectFactory("SLATIMER");
		}
		catch(err) {
			return null;
		}
		if(slaTimer) {
			slaTimer.TimerName = name;
			slaTimer.SubtimerName = subName;
			if(metaData1) {
				slaTimer.Metadata1 = String(metaData1);
			}
			if(metaData2) {
				slaTimer.Metadata2 = String(metaData2);
			}
			if(metaData3) {
				slaTimer.Metadata3 = String(metaData3);
			}				
			return slaTimer;
		}
		else {
			return null;
		}
	},

	/**
	 * Sorts the basic timers used in developer mode based on the stop time of the group and each timer
	 * @param none
	 */	
	sortBasicTimers: function() {
		var sortedTimerGroups = [];
		
		var index = 0;

		for(var timerName in this.timerGroups) {
			var timerGroup = this.timerGroups[timerName];
			
			timerGroup.timers.sort( function (a, b) { 
			    if(b.stopTime == null) {
					return 1;
				}
				if(a.stopTime == null) {
					return -1;
				}

				return (b.stopTime.getTime() - a.stopTime.getTime());
			});
			sortedTimerGroups[index++] = timerGroup;
		}
		
		sortedTimerGroups.sort( function (a, b) { 
			if(b.stopTime == null) {
				return -1;
			}
			if(a.stopTime == null) {
				return 1;
			}		
			
			return (a.stopTime.getTime() - b.stopTime.getTime()) ;
		});

		return sortedTimerGroups;
	},
	
	/**
	 * Reset the objects
	 * @param none
	 */	
	cleanUp: function() {
		this.basicTimers = [];
		this.timerGroups = [];
	}
};
/**
 * The Severice manages all interactions with external data loading pieces such as the CareCompass server 397.
 */
var Service = {
    serviceDelgate: null,

    /**
     * Initializes the service delegate with the current CareCompass window.
     * @param none
     */
    initialize : function initializeService () {
        this.serviceDelgate = window.external.DiscernObjectFactory("CARECOMPASS");
    },

    /**
     * Initializes the service delegate with the mock service, should only be used for browser testing and protype purposes.
     * @param none
     */
    mock : function mockService () {
        this.serviceDelgate = MockService;
    },

    /**
     * Initializes the service delegate with the current CareCompass window.
     * @param none
     */
    reset : function resetService () {
        this.serviceDelgate.SetHTMLDocument(document);
    },

    /**
     * Starts the thread for loading the list of patient lists through the CareCompassCOM.dll.
     * @param none
     */
    loadPatientLists : function loadPatientLists () {
        PatientLists.loaded = false;
        Timers.start("ENG:CareCompass.loadPatientLists.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadPatientLists.TotalTransaction");
        this.serviceDelgate.LoadPatientLists(User.providerId);
    },

    /**
     * Starts the thread for loading the CareCompass configuration through the CareCompassCOM.dll.
     * @param none
     */
    loadConfiguration : function loadConfiguration () {
        Configuration.loaded = false;
        Timers.start("ENG:CareCompass.loadConfiguration.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadConfiguration.TotalTransaction");
        this.serviceDelgate.LoadConfiguration(User.providerId, User.getLocation());
    },

    /**
     * Starts the thread for loading the list of patient and encounter ids through the CareCompassCOM.dll.
     * @param patientListId - The unique identifier of the patient list to load the patients for.
     */
    loadPatients : function loadPatients (patientListId) {
        Timers.start("ENG:CareCompass.loadPatients.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadPatients.TotalTransaction");
        this.serviceDelgate.LoadPatients(User.providerId, patientListId);
    },

    /**
     * Starts the thread for loading the patient's demographics through the CareCompassCOM.dll.
     * @param none
     */
    loadDemographics : function loadDemographics () {
        Demographics.empty();
        Timers.start("ENG:CareCompass.loadDemographics.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadDemographics.TotalTransaction");
        this.serviceDelgate.LoadDemographics(User.providerId, Patients.patientIds, Patients.encounterIds, getDateOffset() );
    },

    /**
     * Starts the thread for loading the patient's task counts through the CareCompassCOM.dll.
     * @param none
     */
    loadTaskCounts : function loadTaskCounts () {
        Tasks.empty();
        Timers.start("ENG:CareCompass.loadTaskCounts.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadTaskCounts.TotalTransaction");
        if (typeof this.serviceDelgate.LoadTaskCountsWithPprcds === 'undefined') {
             this.serviceDelgate.LoadTaskCounts(Patients.encounterIdsWithRelationships, User.providerId, User.getLocation(), PatientLists.getActive().isAncillaryList() );
         }
         else {
            this.serviceDelgate.LoadTaskCountsWithPprcds(Patients.encounterIdsWithRelationships, User.providerId, User.getLocation(), PatientLists.getActive().isAncillaryList(), Patients.patientIdsWithRelationships, Patients.pprCds );
         }
    },

    /**
    * Starts the thread for loading the patient's error task(s) through the CareCompassCOM.dll.
    * @param none
    * @return none
    */
    loadErrorTasks : function loadErrorTasks () {
        ErrorTasks.empty();
        if (typeof this.serviceDelgate.loadErrorTasks !== 'undefined') {
            Timers.start("ENG:CareCompass.loadErrorTasks.ExecuteTransaction");
            Timers.start("ENG:CareCompass.loadErrorTasks.TotalTransaction");
            this.serviceDelgate.LoadErrorTasks(User.providerId, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships, Patients.pprCds, User.getLocation());       
        }
        
    },

    /**
     * Starts the thread for loading the patient's tasks by task id for the patient drill down through the CareCompassCOM.dll.
     * @param none
     */
    loadTasks : function loadTasks (taskIds, pprCd) {
        Tasks.completedTaskIds.length = 0;
        Timers.start("ENG:CareCompass.loadTasks.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadTasks.TotalTransaction");
        this.serviceDelgate.LoadTasks(taskIds, User.providerId, pprCd, User.getLocation());
    },

    /**
     * Starts the thread for loading the patient's result care info through the CareCompassCOM.dll.
     * @param none
     */
    loadResults : function loadResults () {
        Results.empty();
        Timers.start("ENG:CareCompass.loadResultInfo.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadResultInfo.TotalTransaction");
        this.serviceDelgate.LoadResultInfo(User.providerId, Patients.pprCds, Patients.encounterIdsWithRelationships, Patients.patientIdsWithRelationships, User.getLocation());
    },

    /**
     * Starts the thread for loading the patient's order care info through the CareCompassCOM.dll.
     * @param none
     */
    loadOrders : function loadOrders () {
        Orders.empty();
        Timers.start("ENG:CareCompass.loadOrders.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadOrders.TotalTransaction");
        this.serviceDelgate.LoadOrderInfo(User.providerId, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships, Patients.pprCds, User.getLocation());
    },

    /**
     * Starts the thread for loading the patient's care team through the CareCompassCOM.dll.
     * @param none
     */
    loadCareTeams : function loadCareTeams () {
        CareTeams.empty();
        Timers.start("ENG:CareCompass.loadCareTeams.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadCareTeams.TotalTransaction");
        this.serviceDelgate.LoadCareTeams(User.providerId, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships, User.getLocation());
    },

    /**
     * Starts the thread for loading the patient's allergies through the CareCompassCOM.dll.
     * @param none
     */
    loadAllergies : function loadAllergies () {
        Allergies.empty();
        Timers.start("ENG:CareCompass.loadAllergies.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadAllergies.TotalTransaction");
        this.serviceDelgate.LoadAllergies(User.providerId, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships, Patients.pprCds);
    },

    /**
     * Starts the thread for loading the patient's quality measures through the CareCompassCOM.dll.
     * @param none
     */
    loadQualityMeasures : function loadQualityMeasures () {
        if(Configuration.qualityMeasures == false) {
            processQualityMeasures(null);
            return;
        }
        QualityMeasures.empty();
        Timers.start("ENG:CareCompass.loadQualityMeasures.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadQualityMeasures.TotalTransaction");
        this.serviceDelgate.LoadQualityMeasures(User.providerId, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships, Patients.pprCds, 0);
    },

    /**
     * Starts the thread for loading the patient's new results through the CareCompassCOM.dll.
     * @param none
     */
    loadNewResults : function loadNewResults () {
        Timers.start("ENG:CareCompass.loadNewResults.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadNewResults.TotalTransaction");
        this.serviceDelgate.LoadNewResults(User.providerId, Patients.pprCds, Patients.encounterIdsWithRelationships, Patients.patientIdsWithRelationships, User.getLocation());
    },

    /**
     * Starts the thread for loading the patient's new orders through the CareCompassCOM.dll.
     * @param none
     */
    loadNewOrders : function loadNewOrders () {
        Timers.start("ENG:CareCompass.loadNewOrders.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadNewOrders.TotalTransaction");
        this.serviceDelgate.LoadNewOrders(User.providerId, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships, Patients.pprCds, User.getLocation());
    },

    /**
     * Starts the thread for loading the patient's sepsis indicator through the CareCompassCOM.dll.
     * @param none
     */
    loadSepsis : function loadSepsis () {
        Sepsis.empty();
        Timers.start("ENG:CareCompass.loadSepsis.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadSepsis.TotalTransaction");
        this.serviceDelgate.LoadSepsis(User.providerId, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships, Patients.pprCds);
    },

    /**
     * Starts the thread for reviewing results through the CareCompassCOM.dll.
     * Each item in the parameter collections must correspond to the other, so the collections must be sorted and be the same size.
     * @param resultIds - The event ids of the results to review.
     * @param versions - The versions of the results to review.
     */
    reviewResults : function reviewResults (resultIds, versions, encounterId, patientId) {
        NewResults.empty();
        Timers.start("ENG:CareCompass.reviewResults.ExecuteTransaction");
        Timers.start("ENG:CareCompass.reviewResults.TotalTransaction");
        this.serviceDelgate.ReviewResults(User.providerId, User.positionCd, resultIds, versions, encounterId, patientId);
    },

    /**
     * Starts the thread for reviewing orders through the CareCompassCOM.dll.
     * Each item in the parameter collections must correspond to the other, so the collections must be sorted and be the same size.
     * @param orderids - The order ids of the orders to review.
     * @param versions - The versions of the orders to review.
     * @param nurseReviews - The collection of nurse review indicators of the orders to review.
     * @param encounterId - The encounter ID for the patient.
     * @param patientId - The ID of the patient.
     */
    reviewOrders : function reviewOrders (orderids, versions, nurseReviews, encounterId, patientId) {
        NewOrders.empty();
        Timers.start("ENG:CareCompass.reviewOrders.ExecuteTransaction");
        Timers.start("ENG:CareCompass.reviewOrders.TotalTransaction");
        var timezone = "";
        var jstzTest = jstz.determine();
        if (jstzTest != null) {
            timezone = jstzTest.name();
        }
        this.serviceDelgate.ReviewOrders(User.providerId, User.positionCd, orderids, versions, nurseReviews, encounterId, patientId, timezone);
    },

    /**
     * Starts the thread to retrieve the declarable relationships through the CareCompassCOM.dll
     * @param none
     */
    loadRelationships : function loadRelationships () {
        Timers.start("ENG:CareCompass.loadRelationships.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadRelationships.TotalTransaction");
        this.serviceDelgate.LoadRelationships(User.providerId, User.positionCd);
    },

    /**
     * Starts the thread to establish relationships through the CareCompassCOM.dll
     * @param pprCd - The relationship code to establish with the input patients.
     * @param patientIds - The DOUBLEMAP of patient ids to establish a relationship with.
     * @param encounterIds - The DOUBLEMAP of the encounter ids to establish a relationship with.
     */
    establishRelationships: function establishRelationships (pprCd, patientIds, encounterIds) {
        Timers.start("ENG:CareCompass.establishRelationships.ExecuteTransaction");
        Timers.start("ENG:CareCompass.establishRelationships.TotalTransaction");
        this.serviceDelgate.EstablishRelationships(User.providerId, User.positionCd, pprCd, patientIds, encounterIds);
    },

    /**
     * Starts the thread to add a patient to the current patient list through the CareCompassCOM.dll
     * @param patientId - The unique identifier of the patient to add.
     * @param encounterId - The unique identifier of the patient's encounter to add.
     */
    addPatient: function addPatient (patientId, encounterId) {
        Timers.start("ENG:CareCompass.addPatient.ExecuteTransaction");
        Timers.start("ENG:CareCompass.addPatient.TotalTransaction");
        this.serviceDelgate.AddPatient(patientId, encounterId, PatientLists.getActiveId(), User.providerId);
    },
    /**
     * Starts the thread to remove a patient from the current patient list through the CareCompassCOM.dll
     * @param patientId - The unique identifier of the patient to remove.
     * @param encounterId - The unique identifier of the patient's encounter to remove.
     */
    removePatient : function removePatient (patientId, encounterId) {
        Timers.start("ENG:CareCompass.removePatient.ExecuteTransaction");
        Timers.start("ENG:CareCompass.removePatient.TotalTransaction");
        this.serviceDelgate.RemovePatient(patientId, encounterId, PatientLists.getActiveId(), User.providerId);
    },

    /**
     * Starts the thread to sort the patient list through the CareCompassCOM.dll
     * @param directionIndicator - The indicator for direction, 0 for descending, 1 for ascending.
     * @param patientNames - The concatenated string of patient names if sorting by name.
     * @param primarySequences - The first numeric sequence to sort by.
     * @param secondarySequences - The second numeric sequence to sort by.
     * @param tertiarySequences - The third numeric sequence to sort by.
     */
    sortPatients : function sortPatients (directionIndicator, encounterIds, patientNames, primarySequences, secondarySequences, tertiarySequences) {
        if(encounterIds != null && encounterIds.GetCount() > 0){
            Timers.start("ENG:CareCompass.sortPatients.ExecuteTransaction");
            Timers.start("ENG:CareCompass.sortPatients.TotalTransaction");
            this.serviceDelgate.SortPatients(directionIndicator, encounterIds, patientNames, primarySequences, secondarySequences, tertiarySequences);
        }
    },

    /**
     * Starts the thread to save the input user configuration through the CareCompassCOM.dll
     * @param name - The unique name for the CareCompss user configuration to save.
     * @param value - The value of the user configuration to save.
     */
    saveUserConfiguration : function saveUserConfiguration (name, value) {
        this.serviceDelgate.SaveUserConfiguration(User.providerId, name, value);
    },

    /**
     * Starts the thread to load care plans for multiple patients through the CareCompassCOM.dll
     */
    loadCarePlansForPatients : function loadCarePlansForPatients () {
        if (Configuration.planOfCareColumn == false) {
            processCarePlansForPatients(null);
            return;
        }
        CarePlans.empty();
        Timers.start("ENG:CareCompass.loadCarePlans.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadCarePlans.TotalTransaction");
        this.serviceDelgate.LoadCarePlansForPatients(User.providerId, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships, Patients.pprCds);
    },

    /**
     * Starts the thread to load care plans for a single patient through the CareCompassCOM.dll
     * @param patientId - The DOUBLEMAP of patient id to establish a relationship with.
     * @param encounterId - The DOUBLEMAP of the encounter id to establish a relationship with.
     * @param pprCd - The relationship code to establish with the input patient.
     */
    loadSinglePatientCarePlans: function loadAPatientCarePlans (patientId, encounterId, pprCd) {
        Timers.start("ENG:CareCompass.loadCarePlans.ExecuteTransaction");
        Timers.start("ENG:CareCompass.loadCarePlans.TotalTransaction");
        this.serviceDelgate.LoadCarePlansForPatients(User.providerId, patientId, encounterId, pprCd);
    },

    /**
     * Starts the thread to load care plans for a patient through the CareCompassCOM.dll
     * @param patientId - The unique identifier for the patient to load care plans for.
     * @param pprCd - The code value of the relationship between the patient to load care plans for and the user.
     */
    initializeNotifier : function initializeNotifier (notifier) {
        Timers.start("ENG:CareCompass.initializeNotifier.ExecuteTransaction");
        Timers.start("ENG:CareCompass.initializeNotifier.TotalTransaction");
        this.serviceDelgate.InitializeNotifier(notifier, window, Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships);
    },

    /**
     * Starts the thread to acknowledge the LTC error. call the request 967501 from service delegate
     * @param taskIds -  the list of task ids to acknowledge
     * @param taskTypeCds- the list of task type code for the given list of tasks
     * @param updateCounts- the list of update count values for the given list of tasks
     */
    acknowledgeErrorTasks : function acknowledgeErrorTasks(taskIds, taskTypeCds, updateCounts) {
        if (typeof this.serviceDelgate.AcknowledgeErrorTasks !== 'undefined') {
            this.serviceDelgate.AcknowledgeErrorTasks(taskIds, taskTypeCds, updateCounts);
        }
    },

    /**
     * Starts the call to set whether CareCompass is starting its unloading
     * @param isUnloading - Whether or not CareCompass is unloading
     */
    setUnloading : function setUnloading(isUnloading) {
        if (typeof this.serviceDelgate.setUnloading !== 'undefined') {
            this.serviceDelgate.SetUnloading(isUnloading);
        }        
    }
} ;

/**
 * The notifier receives notifications for what has changed
 */
var Notifier = {
	delegate: null,
	initialized: false,
	id: 0,
	enabled: false,
	
	initialize: function initializeNotifier() {
		this.disable();
		
		if(Patients.relationshipsExist === false) {
			this.initialized = true;
			return;
		}
		if(this.delegate === null) {
			this.delegate = window.external.DiscernObjectFactory("NOTIFIER");
		}
		else {
			this.delegate.clear();
		}
		//Initialise suppose to be spelled this way.
		this.delegate.Initialise(window);
		if (typeof this.delegate.AddPatients !== 'undefined') {
		    this.delegate.AddPatients(Patients.patientIdsWithRelationships, Patients.encounterIdsWithRelationships);
		}
		else {
		    //redirect the call to CareCompassCom
		    Service.initializeNotifier(this.delegate);
		}
		this.initialized = true;
		CareCompass.isLoaded();
	},

	enable: function () {
		if (this.id === 0 && this.enabled === false) {
			this.enabled = true;
			this.id = window.setInterval(this.getNotifications, 60000);
		}
	},

	disable: function () {
		this.enabled = false;
		window.clearInterval(this.id);
		this.id = 0;
	},
	
	getNotifications: function () {
		if(PlanOfCareOverlay.container !== null) {
			return;
		}
		if (QualityMeasurePopover.active === true) {
			return;
		}
		if(ActivitiesPopOver.active === true) {
			return;
		}
		if(Notifier.delegate === null) {
			return;
		}
		if(PatientLists.getActiveId() === "") {
			return;
		}
		//If there are no relationships or no encounters we don't want to run the notifier unnecessarily which in turn
		//makes service calls.
		if(Patients.relationshipsExist === false || Patients.encountersExist === false) {
			return;
		}
		if(PatientDrillDown.isDisplayed() === false) {
			PatientLists.loadActive();
		}

		var refreshInd = Notifier.delegate.GetNotifications();
		if(refreshInd === 0){
			return;
		}
		

		var refreshTasksInd = 1;
		var refreshOrdersInd = 2;
		var refreshResultsInd = 4;
		var refreshAllergiesInd = 8;
		var refreshPlans = 16;
			
		if(refreshInd & refreshTasksInd) {
			Service.loadTaskCounts();
		}

		if(refreshInd & refreshOrdersInd) {
			Service.loadOrders();
			Service.loadNewOrders();
			Service.loadQualityMeasures();
		}
		
		if(refreshInd & refreshResultsInd) {
			Service.loadResults();
			Service.loadNewResults();
			Service.loadSepsis();
		}

		if(refreshInd & refreshAllergiesInd) {
			Service.loadAllergies();
		}

		if(refreshInd & refreshPlans){
			Service.loadCarePlansForPatients();
		}
			
		/**
		*  If the hover is open, close it so that it is repainted with new data.
		*/
		
		if(Hover.hover !== null){
			Hover.hide();
		}
		if(ActivitiesCellHover.hover !== null){
			ActivitiesCellHover.hide();
		}

		NewDataButton.updateCount();
	}
}

/**
 * The Mock Service used for prototyping.
 * @TODO: Remove this from production code.
 */
var MockService = {
	LoadPatientLists : function(providerId) {
		$.get("file:///C:/poblano/json/PatientLists.json", function(json) {
			processPatientLists(json);
		});
	},

	LoadConfiguration : function(providerId, positionCd) {
		$.get("file:///C:/poblano/json/Configuration.json", function(json) {
			processConfiguration(json);
		});
	},

	LoadPatients : function(providerId, patientListId) {
		if(patientListId == 1) {
			$.get("file:///C:/poblano/json/CustomPatients.json", function(json) {
				processPatients(json);
			});
		}
		else if(patientListId == 2) {
			$.get("file:///C:/poblano/json/LocationPatients.json", function(json) {
				processPatients(json);
			});
		}
	},
	
	LoadDemographics : function(providerId, patientIds, encounterIds) {
		$.get("file:///C:/poblano/json/Demographics.json", function(json) {
			processDemographics(json);
		});
	},

	LoadTaskCounts : function(encounterIds, providerId) {
		$.get("file:///C:/poblano/json/TaskCounts.json", function(json) {
			processTaskCounts(json);
		});
	},

	LoadResultInfo : function(providerId, encounterIds) {
		$.get("file:///C:/poblano/json/Results.json", function(json) {
			processResultInfo(json);
		});
	},
	
	LoadOrderInfo : function(providerId, patientIds, encounterIds, pprCds) {
		$.get("file:///C:/poblano/json/Orders.json", function(json) {
			processOrderInfo(json);
		});
	},

	LoadCareTeams : function(providerId, patientIds, encounterIds) {
		$.get("file:///C:/poblano/json/CareTeams.json", function(json) {
			processCareTeams(json);
		});
	},
	
	LoadAllergies : function(providerId, patientIds, encounterIds, pprCds) {
		$.get("file:///C:/poblano/json/Allergies.json", function(json) {
			processAllergies(json);
		});
	},
	
	LoadQualityMeasures : function(providerId, patientIds, encounterIds, pprCds, value) {
		$.get("file:///C:/poblano/json/QualityMeasures.json", function(json) {
			processQualityMeasures(json);
		});
	},
	
	LoadNewResults : function(providerId, pprCds, encounterIds) {
		$.get("file:///C:/poblano/json/NewResults.json", function(json) {
			processNewResults(json);
		});
	},

	LoadNewOrders : function(providerId, patientIds, encounterIds, pprCds) {
		$.get("file:///C:/poblano/json/NewOrders.json", function(json) {
			processNewOrders(json);
		});
	},
	
	ReviewResults : function(providerId, positionCd, resultIds, versions) {
		$.get("file:///C:/poblano/json/ReviewResults.json", function(json) {
			processReviewResults(json);
		});
	},
	
	ReviewOrders : function(orderIds, versions, nurseReviews) {
		$.get("file:///C:/poblano/json/ReviewOrders.json", function(json) {
			processReviewOrders(json);
		});
	},

	LoadRelationships : function(providerId, positionCd) {
		$.get("file:///C:/poblano/json/Relationships.json", function(json) {
			processRelationships(json);
		});
	},

	EstablishRelationships : function(providerId, positionCd, pprCd, patientIds, encounterIds) {
		$.get("file:///C:/poblano/json/EstablishRelationships.json", function(json) {
			processEstablishRelationships(json);
		});
	},

	AddPatient : function(patientId, encounterId, listId, providerId) {
		$.get("file:///C:/poblano/json/AddPatient.json", function(json) {
			processAddPatient(json);
		});
	},
	
	RemovePatient : function(patientId, encounterId, listId, providerId) {
		$.get("file:///C:/poblano/json/RemovePatient.json", function(json) {
			processAddPatient(json);
		});
	},
	
	SortPatients : function(directionIndicator, encounterIds, patientNames, primarySequences, secondarySequences, tertiarySequences) {

	},

	SetHTMLDocument: function(document) {
	}
};

/**
 * Represents data about the current user.  Populated based on data returned from the mp_cc_organizer.prg script.
 */
var User = {
	providerId: 0,
	staticContent: "",
	positionCd: 0,
	appName: "",
	helpIndicator: 0,
	localeId: "",
	utcIndicator: -1,
	locationUnitCd: -1,
	
	/**
	 * Fills out the criteria from the JSON returned from the CareCompass driver script (mp_cc_organizer.prg).
	 * @param none
	 */	
	create: function createUser() {
		var json = $.parseJSON(m_criterionJSON);
		if(json != null) {
			this.providerId = json.CRITERION.PRSNL_ID;
			this.staticContent = CERN_static_content;
			this.positionCd = json.CRITERION.POSITION_CD;
			this.appName = json.CRITERION.APP_NAME;
			this.helpIndicator = json.CRITERION.HELP_FILE_LOCAL_IND;
			this.localeId = json.CRITERION.LOCALE_ID;
			this.utcIndicator = json.CRITERION.UTC_INDICATOR;
		}
	},
	
	/**
	 * Returns true if UTC is on.
	 * @param none
	 */	
	isUtcOn: function() {
		if(this.utcIndicator == 1) {
			return true;
		}
		else if(this.utcIndicator == 0) {
			return false;
		}
	},

	/**
	 * Evaluates if the user is at a specific location based on the location code passed in.
	 * If a user is loading a list that has patients at different location, the location code will be set to 0.
	 * @param locationCd - The unique identifier for a patient's location code.
	 */	
	updateLocation: function updateLocation(patientLocationCd) {
		if(this.locationUnitCd == 0) {
			return;
		}
		if(this.locationUnitCd == -1) {
			this.locationUnitCd = patientLocationCd;
		}
		else if(patientLocationCd != this.locationUnitCd) {
			this.locationUnitCd = 0;
		}
	},

	/**
	 * @return The unique identifier for the location code the user is viewing.
	 */	
	getLocation: function getLocation() {
		if(this.locationUnitCd == -1) {
			return 0;
		}
		return this.locationUnitCd;
	},

	/**
	 * Resets the user's location.
	 * @param none
	 */	
	resetLocation: function resetLocation() {
		this.locationUnitCd = -1;
	}
};

/**
 * Represents the Bedrock filter values, User preferences, and PrefMaint preferences that CareCompass honors on initial load.
 */
var Configuration = {
    loaded: false,
    acuity: false,
    planOfCareColumn: false,
    customs: [],
    qualityMeasures:  false,
    defaultTab: "",
    qualityMeasuresTab: "",
    mpageLinks: [],
    selfDeclareRelationship: false,
    acknowledgeSelectAll: false,
    sort: "",
    quickLinks: null,
    oxygen: false,
    bloodGases: false,
    ventilator: false,
    therapiesExist: false,
    interdisciplinary: false,
    dietIndicator:false,
    isolationIndicator: false,
    resuscitationStatusIndicator: false,
    targetedDischargeIndicator: false,  
    highRisksIndicator: false,
    VIPIndicator: false,
    confidentialityIndicator: false,
    medicationRouteIndicator: false,
    newNormalResultIndicator: false,
    positionLocationIndicator: false,
    errorTasksIndicator: false,

    /**
     * Unpacks the JSON received from the CareCompass service for the CareCompass configuration.
     * @param reply - The JSON representing the data returned from the CareCompass service.
     */	
    unpack: function unpackConfiguration(reply) {
        this.acuity = reply.acuityColumn;
        this.customs = reply.customEventJSONs;
        this.qualityMeasures = reply.qualityMeasureColumn;
        this.defaultTab = reply.defaultPatientTab;
        this.qualityMeasuresTab = reply.qualityMeasureLink;
        this.selfDeclareRelationship = reply.preferenceSelfDeclareReltn;
        this.acknowledgeSelectAll = reply.acknowledgeSelectAll;
        this.planOfCareColumn = reply.planOfCareColumn;
        this.dietIndicator = reply.dietIndicator;
        this.isolationIndicator = reply.isolationIndicator;
        this.resuscitationStatusIndicator = reply.resuscitationStatusIndicator;
        this.targetedDischargeIndicator = reply.targetedDischargeIndicator;
        this.highRisksIndicator = reply.highRisksIndicator;
        this.VIPIndicator = reply.VIPIndicator;
        this.confidentialityIndicator = reply.confidentialityIndicator;
        this.medicationRouteIndicator = reply.medicationRouteIndicator;
        this.newNormalResultIndicator = reply.newNormalResultIndicator;
        this.positionLocationIndicator = reply.positionLocationIndicator;
        this.errorTasksIndicator = reply.errorTasksIndicator;
        if(reply.activityTimeline == "CLOSED") {
            ActivityTimeline.defaultOpen = false;
        }
        else {
            ActivityTimeline.defaultOpen = true;
        }
        this.sort = reply.sort;
        this.quickLinks = reply.quickLinks;
        this.oxygen = reply.O2Therapy;
        this.bloodGases = reply.bloodGases;
        this.ventilator = reply.ventilatorOrders;	
        
        if(this.oxygen == true || this.bloodGases == true || this.ventilator == true){
            this.therapiesExist = true;
        }
        else {
            this.therapiesExist = false;
        }
        
        this.interdisciplinary = reply.interdisciplinary;
    }
};

/**
 * Represents the list of patient lists available to the clinician using CareCompass.
 */
var PatientLists = {
	loaded: false,
	patientLists: [],
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the patient lists.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackPatientLists(reply) {
		for (var i = 0; i < reply.data.length; i++) {
			var patientList = reply.data[i];
			this.patientLists.push(new PatientList(patientList.patientListId, patientList.isModifiable, patientList.patientListName, patientList.patientListType));
		}
	},
	
	/**
	 * Returns a PatientList object at the given index.
	 * @param index - The index in the array to return the patient list for. Cannot be outside of the array bounds.
	 */		
	get: function getPatientList(index) {
		if(index < 0  || index > this.patientLists.length || this.patientLists.length == 0) {
			return null;
		}
		return this.patientLists[index];
	},
	
	/**
	 * Returns the number of patient lists.
	 * @param none
	 */		
	count: function countPatientLists() {
		return this.patientLists.length;	
	},
	
	/**
	 * Returns the default patient list, which should be the first in the array.
	 * @param none
	 */		
	getDefault: function getDefaultPatientList() {
		return this.get(0);
	},
	
	/**
	 * Returns the active patient list id for this window.  The id is stored on the window.name so that it can be saved per the user's CareCompass session.
	 * @TODO - The active list should be stored in the user's configuration in the future to allow the active list to persist between sessions.
	 * @param none
	 */		
	getActiveId: function getActivePatientListId() {
		return window.name;
	},
	
	/**
	 * Returns the active patient list for this window.  The id is stored on the window.name so that it can be saved per the user's CareCompass session.
	 * @TODO - The active list should be stored in the user's configuration in the future to allow the active list to persist between sessions.
	 * @param none
	 */		
	getActive: function getActivePatientList() {
		for(var i = 0; i < this.patientLists.length; i++) {
			if(this.patientLists[i].id == window.name) {
				return this.patientLists[i];
			}
		}
	},
	
	/**
	 * Sets the currently active patient list id for this window.  The id is stored on the window.name
	 * so that it can be saved per the user's CareCompass session.
	 * 	between sessions.
	 * @param none
	 */		
	setActiveId: function setActivePatientListId(patientListId) {
		window.name = patientListId;
		Toolbar.addPatientButton.disable();
		if(this.getActive().modifiable) {
			Toolbar.addPatientButton.enable();
		}
	},
	
	/**
	 * Reloads the list of patient lists, which in turn reloads all of CareCompass.
	 * @param none
	 */		
	refresh: function refreshPatientLists() {
		PatientDrillDown.remove();
		QualityMeasurePopover.hide();
		ActivitiesPopOver.hide();
		CareCompass.loading();
		this.empty();
		PatientListSelect.reset();
		Service.loadPatientLists();
	},
	
	/**
	 * Empties all data currently stored about the loaded patient lists and patients.
	 * @param none
	 */		
	empty: function emptyPatientLists() {
		this.loaded = false;
		this.patientLists.length = 0;
		NoPatientListsScreen.hide();
		Patients.empty();
	},
	
	/**
	 * Loads the currently active patient list.
	 * @param none
	 */		
	loadActive: function loadActivePatientList() {
		NoPatientListsScreen.hide();
		NoPatientsScreen.hide();
 		var previouslyActivePatientListId = this.getActiveId();
		if(previouslyActivePatientListId > 0 && this.exists(previouslyActivePatientListId)) {
			PatientListSelect.selectList(previouslyActivePatientListId);
		}
		else if(PatientLists.getDefault() == null) {
			NoPatientListsScreen.display();
		}
		else {
			PatientListSelect.selectList(PatientLists.getDefault().id);
		}
		if(ErrorScreen.isDisplayed()){
			NoPatientListsScreen.hide();
		}
        NewDataButton.updateCount();
        Timers.stop("ENG:CareCompass.removePatient.ProcessTransaction");
        Timers.stop("ENG:CareCompass.removePatient.TotalTransaction");
	},
	
	/**
	 * Determines if the input patient list is in the list of patient lists that is currently loaded.
	 * @param patientListId - The unique identifier of the patient list to check if it exists.
	 */		
	exists: function patientListExists(patientListId) {
		for(var i = 0; i < this.patientLists.length; i++) {
			if(this.patientLists[i].id == patientListId) {
				return true;
			}
		}
		return false;
	},
	
	/**
	 * Changes then sets a list as active and begins loading it.
	 * @param patientListId - The unique identifier of the patient list to set as active and begin loading.
	 */	
	change: function changePatientList(patientListId) {
		if(window.carecompassIsLoaded == false && Patients.patientsLimitExceeded == false) {
			return;
		}
		CareCompass.cleanUp();
   		Timers.cleanUp();
		window.carecompassIsLoaded = false;
		PatientListSelect.disable();
		Timers.start("USR:CareCompass.ChangePatientLists");
		CareCompass.loading();
		Patients.empty();
		PatientDrillDown.remove();
		PatientLists.setActiveId(patientListId);
		ErrorScreen.hide();
		try{
			if(window.originalPatientList == patientListId){
				window.external.PCActivatePatArrows(1, "PatientNavigation", true);
			}
			else{
				window.external.PCActivatePatArrows(-1,"",false);
			}
		}
		catch(e){
			
		}
		Service.loadPatients(patientListId);
		NewDataButton.updateCount();
	}
};

/**
 * Represents the information about the list of patients in CareCompass.
 */
function PatientList(id, modifiable, name, type) {
	this.id = id;
	this.modifiable = modifiable;
	this.name = name;
	this.type = type;
	
	/**
	* Returns the string "unit" to signify whether this is a departmental list or not.  The string can be applied to add departmental list styling.
	* @param - none
	*/
	this.getClass = function getPatientListClass() {
		if(this.isDepartmental() == false) {
			return "";
		}
		return " unit";
	};
	
	/**
	* Determines if this patient list should be display as a departmental list.  This is currently determined based on the size of the patient list.
	* @param - none;
	*/
	this.isDepartmental = function isDepartmentalPatientList() {
		if(Patients.count() > 10) {
			return true;
		}
		return false;
	};
	
	/**
	* Determines if this list is ancillary list or not
	*/
	this.isAncillaryList = function isAncillaryPatientList() {
	if(this.type == "ANC_ASGMT") {
		return true;
	}
	return false;
	}
};

/**
 * Represents the collection of patients currently loaded in CareCompass.
 */
var Patients = {
	loaded: false,
	patients: [],
	patientIds: null,
	encounterIds: null,
	pprCds: null,
	patientIdsWithRelationships: null,
	encounterIdsWithRelationships: null,
	sorted: false,
	relationshipsExist: false,
	encountersExist: false,
	currentEncounterId : 0,
	debugPatientIdObject: [],
	patientsLimitExceeded: false,
	establishButtonEnable: false,
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the patient list.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackPatients(reply) {
		this.patientIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		this.encounterIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		this.patientIdsWithRelationships = window.external.DiscernObjectFactory("DOUBLEMAP");
		this.encounterIdsWithRelationships = window.external.DiscernObjectFactory("DOUBLEMAP");
		this.pprCds = window.external.DiscernObjectFactory("DOUBLEMAP");
		this.relationshipsExist = false;
		this.encountersExist = false;
		this.establishButtonEnable = false;
		for (var i = 0; i < reply.data.length; i++) {
			var patient = reply.data[i];
			if(this.patientIds != null && this.encounterIds != null && this.pprCds != null) {
				this.patientIds.Add(i, patient.patientId);
				// Used in developer mode to display patient and encounter IDs
				this.debugPatientIdObject[i] = { patientId: patient.patientId, encounterId: patient.encounterId };
				if(patient.encounterId > 0) {
					this.encounterIds.Add(i, patient.encounterId);
					this.encountersExist = true;
					if(patient.pprCd !== undefined && patient.pprCd != 0) {
						this.pprCds.Add(i, patient.pprCd);
						this.patientIdsWithRelationships.Add(i, patient.patientId);
						this.encounterIdsWithRelationships.Add(i, patient.encounterId);
						this.relationshipsExist = true;
					}
					else {
						this.establishButtonEnable = true;
					}
				}
				if(patient.encounterId == 0){
					this.encounterIds.Add(i, patient.encounterId);
				}
			}
			this.patients.push(new Patient(patient.patientId, patient.encounterId, patient.pprCd, patient.name));
		}
	},
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the patient list.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	alreadyLoaded: function patientsAlreadyLoaded(reply) {
		if(this.patients == null) {
			return false;
		}
		if(reply.data.length != this.patients.length) {
			return false;
		}
		for (var i = 0; i < reply.data.length; i++) {
			var patient = reply.data[i];
			var existingPatient = this.getByEncounterId(patient.encounterId);
			if(existingPatient == null) {
				return false;
			}
			if(existingPatient.pprCd != patient.pprCd) {
				return false;
			}
		}
		return true;
	},
	
	/**
	 * Sorts the collection of patients based on the input sorted array of encounter ids.
	 * @param sortedEncounterIds - The sorted array of encounter ids to sort the patients based on.
	 */	
	sort: function sortPatients(sortedEncounterIds) {
		if(PatientDrillDown.isDisplayed()){
			return false;
		}
		else {
			var sortedPatients = [];
			for(var i = 0; i < sortedEncounterIds.length; i++) {
				var encounterId = sortedEncounterIds[i];
				for(var j = 0; j < this.patients.length; j++) {
					if(this.patients[j].encounterId == encounterId) {
						sortedPatients.push(this.patients[j]);
						continue;
						}
					}
				}
			}
			this.patients = sortedPatients;	
	},
	
	/**
	 * Returns a Patient object at the given index.
	 * @param index - The index in the array to return the patient for. Cannot be outside of the array bounds.
	 */		
	get: function getPatient(index) {
		if(index < 0  || index > this.patients.length || this.patients.length == 0) {
			return null;
		}
		return this.patients[index];
	},
	
	/**
	 * Returns a Patient object with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getByEncounterId: function getPatientByEncounterId(encounterId) {
         
		for(var j = 0; j < this.patients.length; j++) {
			if(this.patients[j].encounterId == encounterId) {
                             
				return this.patients[j];
			}
		}
		return null;
	},
		
	setIndexByEncounterId: function setPatientByEncounterId(encounterId) {	
	for(var j = 0; j < this.patients.length; j++) {
			if(this.patients[j].encounterId == encounterId) {
				this.currentEncounterId = encounterId;
			}
		}
		index = null;
	},

	/**
	 * Sets isCarePlansLoaded status for all patients with a relationship.
	 * @param none
	 */
	setPatientsCarePlanLoaded: function() {
		if (this.patients == null) {
			return;
		}
		for (var i = 0; i < this.patients.length; i++) {
			var patient = this.patients[i];
			if (patient.pprCd !== undefined && patient.pprCd != null && patient.pprCd != 0) {
				patient.setIsCarePlansLoaded(true);
			}
		}
	},
	
	/**
	 * Returns the number of patients.
	 * @param none
	 */		
	count: function countPatients() {
		return this.patients.length;	
	},
	
	/**
	 * Removes all the patients and the information stored related to them.
	 * @param none
	 */		
	empty: function emptyPatients() {
		this.loaded = false;
		this.patientsLimitExceeded = false;
		CareCompass.loaded = false;
		this.patients.length = 0;
		NoPatientsScreen.hide();
		Demographics.empty();
		Orders.empty();
		Results.empty();
		Tasks.empty();
		CareTeams.empty();
		Allergies.empty();
		NewResults.empty();
		NewOrders.empty();
		QualityMeasures.empty();
		CarePlans.empty();
		Sepsis.empty();
		Toolbar.establishRelationshipsButton.disable();
		Demographics.lastNames = {};
		this.sorted = false;
	},
	
	/**
	 * Refreshes the currently loaded patients based on the currently active patient list.
	 * @param none
	 */		
	refresh: function refreshPatients() {
		QualityMeasurePopover.hide();
		ActivitiesPopOver.hide();
		CareCompass.loading();
		PatientLists.loadActive();
	},
	
	/**
	 * Removes a patient from the loaded patients.
	 * @param patient - The Patient object to remove.
	 */	
	remove : function removePatient(patientId, encounterId) {
		Notifier.disable();
		if(confirm(i18n.REMOVE_PATIENT_WARNING)){
			PatientDrillDown.remove();
			Timers.start("USR:CareCompass.RemovePatient");
			Service.removePatient(patientId, encounterId);
		}
		else {
			Notifier.enable();
			RightClickMenu.remove();
			PatientTable.clearPatientTableHighlights();
		}		
	},
	
	getIndex : function getCurrentIndex(){
		for(var j = 0; j < this.patients.length; j++) {
			if(this.patients[j].encounterId == this.currentEncounterId) {
				return j;
			}
		}
		return null;
	},
	
	setIndex : function setCurrentIndex(index){
		this.currentEncounterId = this.patients[index].encounterId;
	}
};

/**
 * Represents the demographic information for the currently loaded patients.
 */
var Demographics = {
	loaded: false,
	lastNames: [],
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass demographics.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackDemographics(reply) {
		for(var i = 0; i < reply.data.length; i++) {
			var patient = Patients.getByEncounterId(reply.data[i].encounterId);
			if(patient == null) {
				continue;
			}
			var demographics = reply.data[i];
			patient.setBirthDateTz(demographics.birthDateTz);
			patient.setAge(new TimeDisplay(reply.data[i].age));
			patient.setGender(demographics.gender);
			patient.setBirthDate(demographics.birthDateTime);
			if(demographics.mrn) {
				patient.mrn = demographics.mrn;
			}
			if(demographics.finNbr) {
				patient.fin = demographics.finNbr;
			}
			if(demographics.vipStatus && demographics.vipStatus != "") {
				patient.vip = demographics.vipStatus;
			}
			if(demographics.encounterConfidentialityLevelDisplay && demographics.encounterConfidentialityLevelDisplay != "") {
				patient.confidentiality = demographics.encounterConfidentialityLevelDisplay;
			} else if(demographics.confidentialityLevelDisplay && demographics.confidentialityLevelDisplay != "") {
				patient.confidentiality = demographics.confidentialityLevelDisplay;
			}		
			if(demographics.nhs) {
				patient.nhs = demographics.nhs;
			}

			patient.unitDisplay = demographics.location.unitDisplay;
			patient.setLocation(demographics.location.roomDisplay, demographics.location.bedDisplay);
			patient.roomSequence = demographics.location.roomSequence;
			patient.bedSequence = demographics.location.bedSequence;

			patient.firstName = demographics.firstName;
			patient.lastName = demographics.lastName;
			if(this.lastNames[patient.lastName.toLowerCase()] == undefined) {
				this.lastNames[patient.lastName.toLowerCase()] = false;
			}
			else {
				this.lastNames[patient.lastName.toLowerCase()] = true;
			}
			if(patient.pprCd > 0) {
				if(demographics.reasonForVisit != null) {
					patient.setReasonForVisit(demographics.reasonForVisit);
				}
				patient.setAdmissionDateTime(demographics.admissionDateTime);
				patient.setLengthOfStay(new TimeDisplay(reply.data[i].lengthOfStay));
				patient.setObservation(demographics.observation);
				patient.setTemporaryLocation(demographics.temporaryLocation);
				User.updateLocation(demographics.location.unitCd);
			}
		}
	},
	
	/**
	 * Empties all stored information in the Demographics object and resets this object as not loaded.
	 * @param - none.
	 */	
	empty: function emptyDemographics(reply) {
		this.loaded = false;
		this.lastNames.length = 0;
	}
};

/**
 * Represents the information about a patient in CareCompass.
 */
function Patient(patientId, encounterId, pprCd, name) {
	this.patientId = patientId;
	this.encounterId = encounterId;
	this.pprCd = pprCd;
	this.name = name;
	this.firstName = "";
	this.lastName = "";
	this.age = null;
	this.gender = "--";
	this.mrn = "--";
	this.fin = "--";
	this.location = "--";
	this.unitDisplay = "";
	this.roomSequence = 0;
	this.bedSequence = 0;
	this.lengthOfStay = null;
	this.admissionDateTime = null;
	this.birthDateTime = null;
	this.reasonForVisit = "";
	this.reasonForVisitOrigin = "";
	this.isolations = [];
	this.tasks = [];
	this.vip = "";
	this.confidentiality = "";
	this.observation = false;
	this.temporaryLocation = "";
	this.nhs = "--";
	this.dietFaceUpDisplay = "";
	this.resuscitationStatusFaceUpDisplay = "";
	this.ventilatorFaceUpDisplay = "";
	this.highRisks = [];
	this.carePlans = [];
	this.hasNonInterdisciplinaryTasks = false;
	this.birthDateTz = "";
	this.isCarePlansLoaded = false;
	
	/**
	 * Returns the carePlans display for this patient.
	 * @param - none.
	 */		
	this.getCarePlans = function getCarePlans() {
		var carePlans = CarePlans.getByPatientId(this.patientId);
		if(carePlans == null || carePlans.length == 0) {
			return "--";
		}
		else {
			return carePlans;
		}
	}
	
	this.getPatientId = function getPatientId() {
		return this.patientId;
	}
	
	this.getEncounterId = function getEncounterId() {
		return this.encounterId;
	}
	
	/**
	 * Gets the pprcd for current patient.
	 * @param - none
	 * @return pprCd - the pprcd for current patient
	 */
	this.getPprCd = function () {
		return this.pprCd;
	}

	/**
	 * Returns the patient's name and italizes the name if there is another patient with the same last name. The last name is compared in its lowercase form.
	 * @param - none.
	 * @returns - the patient name, possibly italicized with the italic HTML element
	 */		
	this.getName = function getPatientName() {
		var lastNameSplit = this.name.split(",");
		this.lastName = lastNameSplit[0];
		for(var i = 0; i < Patients.count(); i++) {
			var patient = Patients.get(i);
			
			if(patient == this) { 
				continue;
			};
			
			if(this.lastName.toLowerCase() == patient.lastName.toLowerCase()){
				return '<i>' + this.name + '</i>';
			}
		}
		
		return this.name;
	}
	
	/**
	 * Returns the default provider's name.
	 * @param - none.
	 */		
	this.getDefaultProviderName = function getPatientDefaultProviderName() {
		var careTeam = CareTeams.getByEncounterId(this.encounterId);
		if(careTeam == null) {
			return "--";
		}
		if(careTeam.defaultProvider != null) {
			return careTeam.defaultProvider.name;
		}
		return "--";
	}
	
	/**
	 * Returns the default provider's contact type.
	 * @param - none.
	 */		
	this.getDefaultProviderContactType = function getPatientDefaultProviderContactType() {
		var careTeam = CareTeams.getByEncounterId(this.encounterId);
		if(careTeam == null) {
			return "";
		}
		if(careTeam.defaultProvider != null && careTeam.defaultProvider.contacts.length > 0) {
			return careTeam.defaultProvider.contacts[0].type;
		}
		return "";
	}
	
	/**
	 * Returns the default provider's contact number.
	 * @param - none.
	 */		
	this.getDefaultProviderContactNumber = function getPatientDefaultProviderContactNumber() {
		var careTeam = CareTeams.getByEncounterId(this.encounterId);
		if(careTeam == null) {
			return "";
		}
		if(careTeam.defaultProvider != null && careTeam.defaultProvider.contacts.length > 0) {
			return careTeam.defaultProvider.contacts[0].number;
		}
		return "";
	}
	
	/**
	 * Returns the default provider's roles.
	 * @param - none.
	 */		
	this.getDefaultProviderRoles = function getPatientDefaultProviderRoles() {
		var careTeam = CareTeams.getByEncounterId(this.encounterId);
		if(careTeam == null) {
			return "--";
		}
		if(careTeam.defaultProvider != null) {
			return careTeam.defaultProvider.roles;
		}
		return "--";
	}
	
	/**
	 * Returns the default provider's roles.
	 * @param - none.
	 */		
	this.hasDefaultProvider = function hasPatientDefaultProvider() {
		var careTeam = CareTeams.getByEncounterId(this.encounterId);
		if(careTeam == null) {
			return false;
		}
		if(careTeam.defaultProvider != null) {
			return true;
		}
		
		return false;
	}
		
	/**
	 * Determines whether or not a patient has any isolations.  Results or orders
	 */
	this.hasIsolation = function hasIsolation() {
		if (Results.getIsolationsByEncounterId(this.encounterId) == null && Orders.getIsolationByEncounterId(this.encounterId) == null) {
			return false;
		}
		return true;
	}
	
	/**
	 * Returns the Isolations object for this patient.
	 */		
	this.getIsolations = function getPatientIsolations() {
		if (this.isolations != null && this.isolations.length > 0) {
			return this.isolations;
		}
		var results = Results.getIsolationsByEncounterId(this.encounterId);
		var resultIsolations = this.convertResultsToIsolations(results);
		var orderIsolations = Orders.getIsolationByEncounterId(this.encounterId);
		this.isolations = new Isolations(orderIsolations, resultIsolations);
		return this.isolations
	}
	
	this.convertResultsToIsolations = function convertResultsToIsolations(results) {
		if (results == null) {
			return null;
		}
		var isolationResults = [];
		for (var i = 0; i < results.length; i++) {
			var isolationResult = new Isolation(this.encounterId, results[i].endDtTm, results[i].resultComments, null);
			isolationResult.addDisplay(results[i].display);
			isolationResult.hoverDisplay = results[i].getCareResultHoverText(true);
			isolationResult.drillDownDisplay = results[i].getCareResultDrillDownText();
			isolationResults.push(isolationResult);
		}
		return isolationResults;
	}
	
	/**
	 * Determines whether or not a patient has any isolations.  Results or orders
	 */
	this.hasHighRisk = function hasHighRisk() {
		if (Results.getHighRisksByEncounterId(this.encounterId) == null && Orders.getHighRisksByEncounterId(this.encounterId) == null) {
			return false;
		}
		return true;
	}
	/**
	 * Returns the High Risks object for this patient.
	 * @param - none.
	 */		
	this.getHighRisks = function getPatientHighRisks() {
		if (this.highRisks != null && this.highRisks.length > 0) {
			return this.highRisks;
		}
		var results = Results.getHighRisksByEncounterId(this.encounterId);
		var resultHighRisks = this.convertResultsToHighRisks(results);
		var orderHighRisks = Orders.getHighRisksByEncounterId(this.encounterId);
		this.highRisks = new HighRisks(orderHighRisks, resultHighRisks);
		return this.highRisks
	}
	
	this.convertResultsToHighRisks = function convertResultsToHighRisks(results) {
		if (results == null) {
			return null;
		}
		var highRiskResults = [];
		for (var i = 0; i < results.length; i++) {
			var highRiskResult = new HighRisk(this.encounterId, results[i].endDtTm, results[i].resultComments, null);
			highRiskResult.hoverDisplay = results[i].getCareResultHoverText();
			highRiskResult.drillDownDisplay = results[i].getCareResultDrillDownText();
			highRiskResults.push(highRiskResult);
		}
		return highRiskResults;
	}
	
	/**
	 * Returns the Allergies display for this patient concatenated by commas.
	 * @param - none.
	 */		
	this.getAllergies = function getPatientAllergies() {
		var allergies = Allergies.getByPatientId(this.patientId);
		if(allergies == null || allergies.length == 0) {
			return "<span class=\"allergies-severe\">" + i18n.NO_ALLERGIES_RECORDED + "</span>";
		}
		var display = "";
		for(var i = 0; i < allergies.length; i++) {
			var allergy = allergies[i];
			if(allergies.length == 1 && allergy.hidden == true) {                                 
 	            return "<span class=\"allergies-hidden-all\">" + i18n.HIDDEN_ALLERGIES_MSG_ALL + "</span>";
 	        }
			if(allergy.noKnown == true){
				return "<span class=\"allergies-value\">"  + i18n.NO_KNOWN_ALLERGIES + "</span>";
			}			  			
			if(display != "") {
				display += "<br />";
			}
			if(allergy.severe == true){
				var severeAllergy = "<span class=\"allergies-severe\">" + allergy.display + "</span>";
				display += severeAllergy;
			}
			else {
				display += allergy.display;
			}
		}
		if(allergies.length > 1 && allergies[0].hidden == true) {                                     
 	        display+= "<span class=\"allergies-hidden-some\">" + i18n.HIDDEN_ALLERGIES_MSG_SOME + "</span>";
 	    } 
		return display;
	}
	
	/**
	 * Sets this patient's location and builds the location display of "Room - Bed"
	 * @param - room - The room display for this patient.
	 * @param - room - The bed display for this patient.
	 */		
	this.setLocation = function setPatientLocation(room, bed) {
		if(room != "" && bed != "") {
			this.location = room + " - " + bed;
		}
		else if(room != "") {
			this.location = room;
		}
		else if(bed != "") {
			this.location = bed;
		}
	}

	/**
	 * @return - Single reason for visit CareOrder or null if none exist.
	 */
	this.getReasonForVisitCareOrder = function getReasonForVisitCareOrder() {
		return Orders.getReasonForVisitByEncounterId(this.encounterId);
	}
	/**
	 * Returns the reason for visit display for this patient.
	 * @param - none.
	 */		
	this.getReasonForVisitDisplay = function getPatientReasonForVisitDisplay() {
		var orderReasonForVisit = Orders.getReasonForVisitByEncounterId(this.encounterId);
		var resultReasonForVisit = Results.getReasonForVisitByEncounterId(this.encounterId);
		if(orderReasonForVisit != null && resultReasonForVisit != null) {
			if(orderReasonForVisit.dateTime.valueOf() >= resultReasonForVisit.dateTime.valueOf()) {
				this.reasonForVisitOrigin = " (" + i18n.REASON_FOR_VISIT_ORDERED + ")";
				return orderReasonForVisit.getDisplays();
			}
			else {
				this.reasonForVisitOrigin = " (" + i18n.REASON_FOR_VISIT_DOCUMENTED + ")";
				return resultReasonForVisit.getDisplays();
			}
		}
		else if(resultReasonForVisit != null) {
			this.reasonForVisitOrigin = " (" + i18n.REASON_FOR_VISIT_DOCUMENTED + ")";
			return resultReasonForVisit.getDisplays();
		}
		else if(orderReasonForVisit != null) {
			this.reasonForVisitOrigin = " (" + i18n.REASON_FOR_VISIT_ORDERED + ")";
			return orderReasonForVisit.getDisplays();
		}
		else if(this.reasonForVisit != "" && this.reasonForVisit != " ") {
			this.reasonForVisitOrigin = " (" + i18n.REASON_FOR_VISIT_REGISTERED + ")";
			return this.reasonForVisit;
		}
		
		this.reasonForVisitOrigin = "";
		return "--";
	}
	
	/**
	 * Returns the acuityType for this patient.
	 * @param - none.
	 */		
	this.getAcuityType = function getPatientAcuityType() {
		var acuity = Results.getAcuityByEncounterId(this.encounterId);
		if(acuity == null) {
			return "";
		}
		return acuity.type;
	}

	/**
	 * Returns the acuity display for this patient.
	 * @param - none.
	 */		
	this.getAcuity = function getPatientAcuity() {
		var acuity = Results.getAcuityByEncounterId(this.encounterId);
		if(acuity == null) {
			return "--";
		}
		var tempAcuityValue = acuity.display;
		tempAcuityValue = tempAcuityValue.replace(/\./g, '');
		tempAcuityValue = tempAcuityValue.replace(/\,/g, '');
		if($.isNumeric(tempAcuityValue)) {
			if(tempAcuityValue.length > 6) {
				return "ERR";
			}
		}
		return acuity.display;
	}
	
	/**
	 * Returns the custom display for this patient.
	 * @param headerDisplay - current header display value.
	 * @return - the custom filter's display value.
	 */	
	this.getCustom = function getPatientCustom(headerDisplay) {
		var customs = Results.getCustomColumnByEncounterId(this.encounterId);
		if(customs == null) {
			return "--";
		}
		for(var i = 0; i < customs.length; i++) {
			if(customs[i].name == headerDisplay) {
				return customs[i].getCustomDisplayWithoutUnits();
			}
		}
		return "--";
	}
	
	this.getPH = function getPatientPH(insideHover){
		var pH = Results.getPHByEncounterId(this.encounterId);
		if(pH == null) {
			return "--";
		}
		if(insideHover == true){
			return pH.getCareResultHoverText();
		}else{
			return pH.getDisplayWithoutUnits();
		}
	}
	
	this.getPaO2 = function getPatientPaO2(insideHover){
		var paO2 = Results.getPaO2ByEncounterId(this.encounterId);
		if(paO2 == null) {
			return "--";
		}
		if(insideHover == true){
			return paO2.getCareResultHoverText();
		}else{
			return paO2.getDisplayWithoutUnits();
		}
	}

	this.getPaCO2 = function getPatientPaCO2(insideHover){
		var paCO2 = Results.getPaCO2ByEncounterId(this.encounterId);
		if(paCO2 == null) {
			return "--";
		}
		if(insideHover == true){
			return paCO2.getCareResultHoverText();
		}else{
			return paCO2.getDisplayWithoutUnits();
		}
	} 	
	
	this.getHCO3 = function getPatientHCO3(insideHover){
		var HCO3 = Results.getHCO3ByEncounterId(this.encounterId);
		if(HCO3 == null) {
			return "--";
		}
		if(insideHover == true){
			return HCO3.getCareResultHoverText();
		}else{
			return HCO3.getDisplayWithoutUnits();
		}
	} 	
	
	this.getO2Sat = function getPatientO2Sat(insideHover){
		var O2Sat = Results.getO2SatByEncounterId(this.encounterId);
		if(O2Sat == null) {
			return "--";
		}
		if(insideHover == true){
			return O2Sat.getCareResultHoverText();
		}else{
			return O2Sat.getDisplayWithoutUnits();
		}
	}
	
	this.getFiO2 = function getPatientPaO2(insideHover){
		var fiO2 = Results.getFiO2ByEncounterId(this.encounterId);
		if(fiO2 == null) {
			return "--";
		}
		if(insideHover == true){
			return fiO2.getDisplay();
		}else{
			return fiO2.getDisplayWithoutUnits();
		}
	}

	this.getFlowRate = function getPatientPaCO2(insideHover){
		var flowRate = Results.getFlowRateByEncounterId(this.encounterId);
		if(flowRate == null) {
			return "--";
		}
		if(insideHover == true){
			return flowRate.getDisplay();
		}else{
			return flowRate.getDisplayWithoutUnits();
		}
	}
	
	this.getO2Type = function getPatientHCO3(insideHover){
		var o2 = Results.getO2ByEncounterId(this.encounterId);
		if(o2 == null) {
			return "--";
		}
		return o2.getDisplay();
    },
	
	this.getSpO2 = function getPatientO2Sat(insideHover){
		var spO2 = Results.getSpO2ByEncounterId(this.encounterId);
		if(spO2 == null) {
			return "--";
		}
		if(insideHover == true){
			return spO2.getDisplay();
		}else{
			return spO2.getDisplayWithoutUnits();
		}
	} 	
		
	/**
	 * @return - Vent order for patient or null if none exist
	 */
	this.getVentilator = function getPatientVentilator(){
		var ventilator = Orders.getVentilatorByEncounterId(this.encounterId);
		return ventilator;
	} 

	/**
	 * @return - Display ready to be shown faceup for vent order
	 */
	this.getVentilatorFaceUpDisplay = function getVentilatorFaceUpDisplay() {
		if (this.ventilatorFaceUpDisplay == "") {
			var ventilator = Orders.getVentilatorByEncounterId(this.encounterId);
			if (ventilator == null) {
				this.ventilatorFaceUpDisplay = "--";
				return this.ventilatorFaceUpDisplay;
			}
			this.ventilatorFaceUpDisplay = ventilator.getModeDisplay();
		}
		return this.ventilatorFaceUpDisplay;
	}
	
	/**
	 * @return - List of resuscitationStatus orders or null if none exist
	 */
	this.getResuscitationStatus = function getResuscitationStatus() {
		return Orders.getResuscitationStatusByEncounterId(this.encounterId);
	}
	
	/**
	 * Returns the resuscitation status display for this patient.
	 * @param - none.
	 */		
	this.getResuscitationStatusFaceUpDisplay = function getResuscitationStatusFaceUpDisplay() {
		if (this.resuscitationStatusFaceUpDisplay == "") {
			var resuscitationStatus = Orders.getResuscitationStatusByEncounterId(this.encounterId);
			if (resuscitationStatus == null) {
				this.resuscitationStatusFaceUpDisplay = "--";
				return this.resuscitationStatusFaceUpDisplay;
			}
			for (var j = 0; j < resuscitationStatus.length; j++) {
				for(var i = 0; i < resuscitationStatus[j].displays.length; i++) {
					if(this.resuscitationStatusFaceUpDisplay != "") {
						this.resuscitationStatusFaceUpDisplay += ", ";
					}
					this.resuscitationStatusFaceUpDisplay += resuscitationStatus[j].displays[i];
				}
			}
		}
		return this.resuscitationStatusFaceUpDisplay;
	}
	
	/**
	 * Returns the allergies display for this patient.
	 * @param - none.
	 */		
	this.getAllergiesDisplay = function getPatientAllergiesDisplay() {
		var allergies = Allergies.getByPatientId(this.patientId);
		if(allergies.length == 0) {
			return i18n.NO_ALLERGIES_RECORDED;
		}
		else if(allergies.length == 1 && allergies[0].hidden == true) {
 	        return i18n.HIDDEN_ALLERGIES;
 	    }
		else if(this.noKnownAllergies()) {
			return i18n.NO_KNOWN_ALLERGIES;
		}
		else {
			return i18n.ALLERGIES;
		}
	}
	
	/**
	 * Returns the true if this patient has no allergies recorded, false if not.
	 * @param - none.
	 */		
	this.noAllergiesRecorded = function patientNoAllergiesRecorded() {
		var allergies = Allergies.getByPatientId(this.patientId);
		if(allergies.length == 0) {
			return true;
		}
		return false;
	}
	
   /**
	 * Returns true if this patient's all allergies are hidden. Returns false otherwise.
	 * @param - none.
	 */
	this.isAllAllergiesHidden = function patientToIsAllAllergiesHidden() {  
		var allergies = Allergies.getByPatientId(this.patientId);               
		return allergies.length == 1 && allergies[0].hidden == true;          
	}
 	
	/**
	 * Returns true if this patient's some allergies are hidden. Returns false otherwise.
	 * @param - none.
	 */
	this.isSomeAllergiesHidden = function patientToIsSomeAllergiesHidden() {
		var allergies = Allergies.getByPatientId(this.patientId);
		return allergies.length > 1 && allergies[0].hidden == true;   
	}
	
	/**
	 * Returns the true if this patient has no known allergies documented, false if not.
	 * @param - none.
	 */		
	this.noKnownAllergies = function patientNoKnownAllergies() {
		var allergies = Allergies.getByPatientId(this.patientId);
		return allergies[0].noKnown;
	}
	
	/**
	 * Returns the targeted discharge display for this patient.
	 * @param - none.
	 */		
	this.getTargetedDischargeDisplay = function getPatientTargetedDischargeDisplay() {
		var targetedDischarge = this.getTargetedDischargeDate();
		if(targetedDischarge == null) {
			return "--";
		}
		return targetedDischarge.getFaceUpDateDisplay();
	}
	
	/**
	 * Returns the targeted discharge care date object for this patient.
	 * @param - none.
	 */		
	this.getTargetedDischargeDate = function getPatientTargetedDischargeDate() {
		return Results.getDischargeDateByEncounterId(this.encounterId);
	}
	
	/**
	 * Sets the length of display object for this patient.
	 * @param - lengthOfStay - A Time Display object representing this patient's length of stay.
	 */		
	this.setLengthOfStay = function setPatientLengthOfStay(lengthOfStay) {
		this.lengthOfStay = lengthOfStay;
	}
	
	/**
	 * Returns the time display object representing length of stay for this patient.
	 * @param - none
	 */		
	this.getLengthOfStay = function getPatientLengthOfStay() {
		return this.lengthOfStay;
	}
	
	/**
	 * Returns the length of stay display for this patient.
	 * @param - none.
	 */	
	this.getLengthOfStayDisplay = function getPatientLengthOfStayDisplay(displayInHover) {
		if(this.lengthOfStay == null) {
			return "--";
		}
		if (displayInHover == true){  				
		 	return this.lengthOfStay.getLOSDisplay(displayInHover);
	 	}else{
		  	return this.lengthOfStay.getLOSDisplay();
		}
	}
	
	/**
	 * Creates a care date object representing the admission date of this patient based on the input number of milliseconds.
	 * @param milliseconds - The number of milliseconds representing the admission date and time of this patient.
	 */	
	this.setAdmissionDateTime = function setPatientAdmissionDateTime(milliseconds) {
		this.admissionDateTime = new CareDate(this.encounterId, milliseconds);
	}
	
	/**
	 * Creates a care date object representing the admission date of this patient based on the input number of milliseconds.
	 * @param milliseconds - The number of milliseconds representing the birth date and time for the patient.
	 */	
	this.setBirthDate = function setPatientBirthDate(milliseconds) {
		this.birthDateTime = new CareDate(this.encounterId, milliseconds, this.birthDateTz);
	}

	/**
	* Sets the BirthDate Timezone for this patient, in the format of the string identifier
	* @param birthDateTz - String identifier of the timezone
	*/
	this.setBirthDateTz = function setPatientBirthDateTz(birthDateTz) {
		this.birthDateTz = birthDateTz;
	}

	/**
	* Returns the string identifier for the Patient's birthdate timezone
	* @param - none
	*/
	this.getBirthDateTz = function getPatientBirthDateTz() {
		return this.birthDateTz;
	}
	
	/**
	 * Returns a care date object representing the admission date of this patient
	 * @param none.
	 */	
	this.getAdmissionDateTime = function getPatientAdmissionDateTime() {
		return this.admissionDateTime;
	}
	
	/**
	 * Returns a the full display of the patient's birth date.
	 * @param none.
	 */	
	this.getBirthDateDisplay = function getPatientBirthDateDisplay() {
		if(this.birthDateTime == null) {
			return "--";
		}
		return this.birthDateTime.getFullDisplay();	
	}
	
	/**
	 * Sets the age of this patient.
	 * @param age - A Time Display object representing this patient's age.
	 */	
	this.setAge = function setPatientAge(age) {
		this.age = age;
	}
	
	/**
	 * Sets the reason for visit of this patient.
	 * @param reasonForVisit - A display for reason for visit.
	 */	
	this.setReasonForVisit = function setPatientReasonForVisit(reasonForVisit) {
		this.reasonForVisit = reasonForVisit;
	}
	
	/**
	 * Gets the reason for visit origin of this patient.
	 */
	this.getReasonForVisitOrigin = function getPatientReasonForVisitOrigin(){
		return this.reasonForVisitOrigin;
	}
	
	/**
	 * Returns the display of this patient age.
	 * @param none
	 */	
	this.getAgeDisplay = function getPatientAgeDisplay(displayInHover) {
		if(this.age == null) {
			return "--";
		}
        	if(displayInHover == true){
	                return this.age.getDisplay(displayInHover);
        	}	
		else{
                	return this.age.getDisplay();
        	}
	}

	/**
	 * Sets the gender of this patient. If there is no gender defaults to "--".
	 * @param gender - A string value representing the gender display of this patient.
	 */	
	this.setGender = function setPatientGender(gender) {
		if(gender == "") {
			return;
		}
		this.gender = gender;
	}
	
	/**
	 * Returns the gender of this patient.  If there is no gender defaults to --
	 * @param none
	 */	
	this.getGender = function getPatientGender() {
		return this.gender;
	}
	
	/**
	 * Returns true if the current user has a relationship with this patient, false if not.
	 * @param none.
	 */	
	this.hasRelationship = function patientHasRelationship() {
		if(this.pprCd == 0) {
			return false;
		}
		return true;
	}
	
	/**
	 * Returns the display of the patient's diet, comma delimted.
	 * @param none
	 */	
	this.getDiets = function getPatientDiet() {
		var diets = Orders.getDietByEncounterId(this.encounterId);
		if (diets == null) {
			return null;
		}
		return diets;
	}
	
	/**
	 * @return - Returns the faceup display for diets
	 */
	this.getDietFaceUpDisplay = function getDietFaceUpDisplay() {
		if (this.dietFaceUpDisplay == "") {
			var diets = Orders.getDietByEncounterId(this.encounterId);
			if (diets == null) {
				this.dietFaceUpDisplay = "--";
				return this.dietFaceUpDisplay;
			}
			for (var j = 0; j < diets.length; j++) {
				for(var i = 0; i < diets[j].displays.length; i++) {
					if(this.dietFaceUpDisplay != "") {
						this.dietFaceUpDisplay += ", ";
					}
					this.dietFaceUpDisplay += diets[j].displays[i];
				}
			}
		}
		return this.dietFaceUpDisplay;
	}
	
	/**
	 * Returns the unit display for the patient.
	 * @param none
	 */
	 this.getUnit = function() {
		if(this.unitDisplay == null) {
			return "";
		}
		return this.unitDisplay;
	 }
	 
	/**
	 * Returns the vip status of the patient
	 * @param none
	 */
	this.getVipStatus = function() {
		return this.vip;
	}
	
	/**
	 * Returns the confidentiality level of the patient
	 * @param none
	 */
	this.getConfidentiality = function() {
		return this.confidentiality;
	}

	/**
	 * Returns the vip display of the patient
	 * @param none
	 */
	this.getVIPDisplay = function() {
		if(this.vip != "") {
			return i18n.VIP;
		}
		return "";
	}
	
	/**
	 * Sets the observation for this patient.
	 * @param - observation - a boolean of wether this patient is under observation
	 */		
	this.setObservation = function setPatientObservation(observation) {
		this.observation = observation;
	}
	
	/**
	 * Returns true if this patient is under observation
	 * @param - none
	 */		
	this.isUnderObservation = function isPatientUnderObservation() {
		if(this.observation) {
			return i18n.OBS;
		}
		else {
			return "";
		}
	}
	
	/**
	 * Sets the temporary location for this patient.
	 * @param - temporary location - a string value of the temporary location
	 */
	this.setTemporaryLocation = function setPatientTemporaryLocation(temporaryLocation) {
		this.temporaryLocation = temporaryLocation;
	}
	
	/**
	 * Returns the string value of the temporary location
	 * @param - none
	 */
	this.getTemporaryLocation = function getPatientTemporaryLocation(){
		return this.temporaryLocation;
	}
	
	/**
	* Sets the boolean to true if a Patient has NonInterdisciplinaryTasks
	* @param - hasNonInterdisciplinaryTasks - A boolean Value
	*/
	this.setNonInterdisciplinaryTasksIndicator = function setNonInterdisciplinaryTasksIndicator(hasNonInterdisciplinaryTasks) {
		this.hasNonInterdisciplinaryTasks = hasNonInterdisciplinaryTasks;
	}

	/**
	 * Sets care plans loaded for this patient
	 * @param isLoaded - true if care plans is loaded for this patient, false if not.
	 */
	this.setIsCarePlansLoaded = function(isLoaded) {
		this.isCarePlansLoaded = isLoaded;
	}

	/**
	 * Get the load status of care plans.
	 * @param - none
	 * @return - true if care plans is loaded, false if not.
	 */
	this.getIsCarePlansLoaded = function() {
		return this.isCarePlansLoaded;
	}
};

/**
 * Represents the tasks for the currently loaded patients.
 */
var Tasks = {
	loaded: false,
	overdueTaskCounts: [],
	unscheduledTaskCounts: [],
	currentTaskCounts: [],
	scheduled:null,
	taskIdsByEncounterId: [],
	tasksByEncounterId: [],
	hasNonInterdisciplinaryTasksByEncounterId: [],
	tasks: [],
	taskNumber: 0,
	tasksPopOverDetails: [],
       completedTaskIds: [],
       replyStatus: null,
       selectedTasksCount: 0,
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass task counts.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackTasks(reply) {
		var taskCounts = reply.data;
		for (var i = 0; i < taskCounts.overdue.length; i++) {
			var overdueTaskCount = new TaskCount(taskCounts.overdue[i].encounterId);
			overdueTaskCount.countMeds(taskCounts.overdue[i].medication);
			overdueTaskCount.countPatientCare(taskCounts.overdue[i].patientCare);
			overdueTaskCount.countAssessment(taskCounts.overdue[i].assessment);
			overdueTaskCount.countOther(taskCounts.overdue[i].other);
			if(overdueTaskCount.total > 0) {
				this.overdueTaskCounts.push(overdueTaskCount);
			}
		}
		for (var i = 0; i < taskCounts.unscheduled.length; i++) {
			var unscheduledTaskCount = new TaskCount(taskCounts.unscheduled[i].encounterId);
			unscheduledTaskCount.countMeds(taskCounts.unscheduled[i].medication);
			unscheduledTaskCount.countPatientCare(taskCounts.unscheduled[i].patientCare);
			unscheduledTaskCount.countAssessment(taskCounts.unscheduled[i].assessment);
			unscheduledTaskCount.countOther(taskCounts.unscheduled[i].other);
            unscheduledTaskCount.countPRN(taskCounts.unscheduled[i].prnCount);
            unscheduledTaskCount.countContinuous(taskCounts.unscheduled[i].continuousCount);
            unscheduledTaskCount.countPrnMeds(taskCounts.unscheduled[i].prnMedCount);
			if(unscheduledTaskCount.total > 0 || unscheduledTaskCount.prn > 0 || unscheduledTaskCount.continuous > 0) {
				this.unscheduledTaskCounts.push(unscheduledTaskCount);
			}
		}
		for (var i = 0; i < taskCounts.current.length; i++) {
			var currentTaskCount = new TaskCount(taskCounts.current[i].encounterId);
			currentTaskCount.countMeds(taskCounts.current[i].medication);
			currentTaskCount.countPatientCare(taskCounts.current[i].patientCare);
			currentTaskCount.countAssessment(taskCounts.current[i].assessment);
			currentTaskCount.countOther(taskCounts.current[i].other);
			if(currentTaskCount.total > 0) {
				this.currentTaskCounts.push(currentTaskCount);
			}
		}
		
		this.scheduled = taskCounts.scheduled;
	},
	
	/**
	 * Unpacks the task ids in the JSON received from the CareCompass service for the CareCompass task counts.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpackIds: function unpackTaskIds(reply) {
		var tasksData = reply.data;
		for (var i = 0; i < tasksData.tasks.length; i++) {
			var encounterId = tasksData.tasks[i].encounterId;
			var taskIdsForEncounter = [];
			for (var j = 0; j < tasksData.tasks[i].taskIds.length; j++) {	
				taskIdsForEncounter[j] = tasksData.tasks[i].taskIds[j];
			}
			this.taskIdsByEncounterId[encounterId] = taskIdsForEncounter;
			this.hasNonInterdisciplinaryTasksByEncounterId[encounterId] = tasksData.tasks[i].hasNonInterdisciplinaryTasks;
		}
	},
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass task displays.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpackDisplays: function unpackTaskDisplays(reply) {
		var tasks = reply.data;
		if(tasks.length == 0) {
			return;
		}
		this.tasks.length = 0;
		for (var i = 0; i < tasks.length; i++) {
			this.tasks[i] = new Task(tasks[i]);
		}
	},
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the selected tasks in patientdrilldown.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */
    unpackSelectedTasks: function unpackSelectedTasks(reply) {
        var tasks = reply.data;
        if(tasks === null) {
           return;
        }
        //Fetching latest status of selected tasks and number of tasks in the reply.
        this.selectedTasksCount= 0;
        var containersCount = 0;
        for(var i=0; i<tasks.length; i++) {
            var task = new Task(tasks[i]);
            if(task.id === 0) {
               continue;
            }
            if(task.data.statusMeaning === "COMPLETE") {
               this.completedTaskIds.push(tasks[i].id);
            }
            if(task.isSpecimenCollect() === true) {
                var containerTasksCount = 0;
                containerTasksCount = this.retrieveContainersCount(task);
                containersCount += containerTasksCount;
                continue;
            }
            this.selectedTasksCount++;
        }
        this.selectedTasksCount += containersCount; 
    },
	
    /**
     * Checks if any tasks have been completed while opening patient drilldown.
     */
    checkForCompletedTasks: function checkCompletedTasksForDrillDown() {
        if(Tasks.replyStatus === "Z") {
           if(ActivityListTab.loadSelectedTasksFlag === true || PrnListTab.loadSelectedTasksFlag === true) {
                  return false;
           }else
           {
                return true;
           }
        }
        if(ActivityList.isPatientDrillDownLoading === true) {
            var taskCount = 0;
            var containersCount = 0;
            for(var i = 0; i < this.tasks.length; i++) {
                var task = this.tasks[i];
                if(task.id === 0) {
                   continue;
                }
                if(task.isSpecimenCollect() === true) {
                   var containerTasksCount = 0;
                   containerTasksCount = this.retrieveContainersCount(task);
                   containersCount += containerTasksCount;
                   continue;
                }
                taskCount++;
            }
            taskCount += containersCount;
            if(taskCount < ActivityList.requestTaskCount) {
               ActivityList.isPatientDrillDownLoading = false;
               return true;
            }
            for(var i=0; i < this.tasks.length; i++) {
                if(this.tasks[i].data.statusMeaning === "COMPLETE") {
                   ActivityList.isPatientDrillDownLoading = false;
                   return true;
                }
            }
        }
        return false;
    },
    
    retrieveContainersCount: function(task) {
        var count = 0;
        var taskContainers = task.getSpecimenContainers();
        if (taskContainers) {
            count = task.data.containers.length;
        }
        return count;
    },
	
    /**
     * Checks if any tasks have been completed while opening Activity Timeline Popover.
     */
    checkCompletedTasks: function checkCompletedTasksForPopOver() {
        if(Tasks.tasksPopOverDetails != null && typeof ActivityTimeline !== "undefined") {
            var taskCount = 0;
            var containersCount = 0;
            for(var i = 0; i < Tasks.tasksPopOverDetails.length; i++) {
                var task = Tasks.tasksPopOverDetails[i];
                if(task.id === 0) {
                   continue;
                }
                if (task.isSpecimenCollect() === true) {
                    var containerTasksCount = 0;
                    containerTasksCount = this.retrieveContainersCount(task);
                    containersCount += containerTasksCount;
                    continue;
                }
                taskCount++;
            }
            taskCount += containersCount;
            if(taskCount < ActivityTimeline.requestTaskCount) {
               return true;
            }
            for(var i = 0; i < this.tasksPopOverDetails.length; i++) {
               if(this.tasksPopOverDetails[i].data.statusMeaning === "COMPLETE") {
                  return true;
               }
            }
            return false;
        }
    },
	
	/**
	 * Returns a collection of Task ids for the input encounter id. Will return null if none are found.
	 * @param encounterId - The unique identifier of the encounter to get tasks for.
	 */	
	getIdsByEncounterId: function getTaskIdsByEncounterId(encounterId) {
		return this.taskIdsByEncounterId[encounterId];
	},
	
	/**
	* Returns true or false or undefined as to whether or not this encounter id has tasks that arent interdisciplinary
	* undefined means that this encounter ID has no tasks.
	* @param encounterId - The unique identifier of the encounter to get hasNonInterdisciplinaryTasks for.
	*/
	getHasNonInterdisciplinaryTasksByEncounterId: function getHasNonInterdisciplinaryTasksByEncounterId(encounterId) {
		return this.hasNonInterdisciplinaryTasksByEncounterId[encounterId];
	},
	
	/**
	* Returns the tasks for a given encounter ID.  Will return null if no tasks are found
	*/
	getTasksByEncounterId: function getTasksByEncounterId(encounterId) {
		var tasksToReturn = [];
		for (var i = 0; i < this.tasks.length; i++) {
			if (this.tasks[i].encounterId == encounterId) {
				tasksToReturn.push(this.tasks[i]);
			}
		}
		if (tasksToReturn.length > 0) {
			return tasksToReturn;
		}
		else {
			return null;
		}
	},
	
	/**
	 * Returns a Task objects for the input task id. Will return null if none are found.
	 * @param encounterId - The unique identifier of the task to return.  
	 */	
	getById: function getTaskByTaskId(taskId) {
		for (var i = 0; i < this.tasks.length; i++) {
			if (this.tasks[i].id == taskId) {
				return this.tasks[i];
			}
		}
		ErrorScreen.display(i18n.TASK_NO_LONGER_EXISTS);
		return null;
	},
	
	/**
	 * Returns a current task count object with the given encounter id. Will return null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getCurrentCountByEncounterId: function getCurrentTasksCountByEncounterId(encounterId) {		
		for(var i = 0; i < this.currentTaskCounts.length; i++) {
			if(this.currentTaskCounts[i].encounterId == encounterId) {
				return this.currentTaskCounts[i];
			}
		}
		return null;
	},
	
	/**
	 * Returns an overdue count object with the given encounter id. Will return null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getOverdueCountByEncounterId: function getOverdueTasksCountByEncounterId(encounterId) {		
		for(var i = 0; i < this.overdueTaskCounts.length; i++) {
			if(this.overdueTaskCounts[i].encounterId == encounterId) {
				return this.overdueTaskCounts[i];
			}
		}
		return null;
	},
	
	/**
	 * Returns an overdue count object with the given encounter id. Will return null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getUnscheduledCountByEncounterId: function getUnscheduledTasksCountByEncounterId(encounterId) {		
		for(var i = 0; i < this.unscheduledTaskCounts.length; i++) {
			if(this.unscheduledTaskCounts[i].encounterId == encounterId) {
				return this.unscheduledTaskCounts[i];
			}
		}
		return null;
	},

    /**
     * Returns an overdue count object with the given encounter id. Will return null if none are found.
     * @param encounterId - The unique identifier of the patient's encounter.
     */     
    getPRNCountByEncounterId: function getPRNTasksCountByEncounterId(encounterId) { 
        var prnCount = 0;
        for(var i = 0; i < this.unscheduledTaskCounts.length; i++) {
            if(this.unscheduledTaskCounts[i].encounterId == encounterId) {
                if (this.unscheduledTaskCounts[i].prn != null) {
                    prnCount += this.unscheduledTaskCounts[i].prn;
                }
            }
        }
        return prnCount;
    },

    /**
     * Returns an overdue count object with the given encounter id. Will return null if none are found.
     * @param encounterId - The unique identifier of the patient's encounter.
     */     
    getContinuousCountByEncounterId: function getContinuousTasksCountByEncounterId(encounterId) { 
        var contCount = 0;
        for(var i = 0; i < this.unscheduledTaskCounts.length; i++) {
            if(this.unscheduledTaskCounts[i].encounterId == encounterId) {
                if (this.unscheduledTaskCounts[i].continuous != null) {
                    contCount += this.unscheduledTaskCounts[i].continuous;
                }
            }
        }
        return contCount;
    },

	/**
	 * Returns a Total count  with the given encounter id. Will return 0 if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */	
	getTotalTasksCountByEncounterId: function getTotalTasksCountByEncounterId(encounterId){

		var unscheduledCount = this.getUnscheduledCountByEncounterId(encounterId);
		var overdueCount = this.getOverdueCountByEncounterId(encounterId);
		var currentCount = this.getCurrentCountByEncounterId(encounterId);
		var total = 0;
		if(unscheduledCount != null){
		 
			total += unscheduledCount.total;
		}
		if(overdueCount != null){
		 
			total += overdueCount.total;	
		}
		if(currentCount != null){

			total += currentCount.total;
		}

		return  total;
	},
	
	/** 
	 * Removes all the task information related to the loaded patients.
	 * @param none
	 */		
	empty: function emptyTasks() {
		this.loaded = false;
		this.overdueTaskCounts.length = 0;
		this.unscheduledTaskCounts.length = 0;
		this.currentTaskCounts.length = 0;
		this.scheduled = null;
		this.taskIdsByEncounterId.length = 0;
		this.tasksByEncounterId.length = 0;
		this.hasNonInterdisciplinaryTasksByEncounterId.length = 0;
		this.tasks.length = 0;
		this.taskNumber = 0;
	},
	/**
	 * Unpacks the JSON recieved from the service for Carecompass tasks details when popOver is on
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */
	unpackTaskDetailsForPopOver: function(reply) {
		var tasks = reply.data;
		if (tasks.length === 0) {
			return;
		}
		for (var i = 0; i < tasks.length; i++) {
			this.tasksPopOverDetails[i] = new Task(tasks[i]);
		}
	},
	/**
	 * Returns the task details for the given encounterId. will be null if there are none.
	 * @param encounterId- the encounterID for which the tasks are present
	 * @return list of tasks for given encounterId
	 */
	getTaskDetailsForPopOverByEncounterId: function getTaskDetailsForPopOver(encounterId) {
		var tasksToReturn = [];
		for (var i = 0; i < this.tasksPopOverDetails.length; i++) {
			if (this.tasksPopOverDetails[i].encounterId == encounterId) {
				tasksToReturn.push(this.tasksPopOverDetails[i]);
			}
		}
		if (tasksToReturn.length > 0) {
			return tasksToReturn;
		}
		else {
			return null;
		}
	}
};

/**
 * Represents the information related to sepsis events for the loaded patients
 */
var Sepsis = {
	loaded: false,
	patientIds: [],
	dateTimes: [],
	sirsIndicators: [],
	summary: null,
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass sepsis events.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */
	unpack: function unpackSepsis(reply) {
		var sepsisEvents = reply.data;
		for(var i = 0; i < sepsisEvents.length; i++) {
			var sepsisEvent = sepsisEvents[i];
			this.patientIds.push(sepsisEvent.patientId);
			this.dateTimes.push(sepsisEvent.dateTime);
			this.sirsIndicators.push(sepsisEvent.sirsIndicator);
		}
		this.displaySummary();
	},
	
	/**
	 * Returns the datetime at which a patient's sepsis event occurred, otherwise null.
	 * @param patientId - the patient's id
	 */
	getDateTime: function getSepsisDateTime(patientId) {
		for(var i = 0; i < this.patientIds.length; i++) {
			if(this.patientIds[i] == patientId) {
				return this.dateTimes[i];
			}
		}
		return null;
	},
	
	/**
	 * Returns true if the patient's event is SIRS, false if sepsis
	 * @param patientId - the patient's id
	 */
	getSirsIndicator: function getSirsOrSepsisIndicator(patientId) {
		for(var i = 0; i < this.patientIds.length; i++) {
			if(this.patientIds[i] == patientId) {
				return this.sirsIndicators[i];
			}
		}
	},
	
	/**
	 * Returns the text to display in the hover of over a patient's sepsis icon.
	 * @param patientId - the patient's id
	 */
	getHoverText: function getSepsisHoverText(patientId) {
		var dateTime = new Date(this.getDateTime(patientId));
		if(this.getSirsIndicator(patientId) == true) {
			return 'This patient met the criteria for SIRS at ' +
					dateTime.format(DateFormats.DATE_FORMAT_LONGDATETIME2) + '.';
		}
		return 'This patient met the criteria for Sepsis at ' +
				dateTime.format(DateFormats.DATE_FORMAT_LONGDATETIME2) + '.';
	},
	
	/**
	 * Creates and displays the sepsis alert summary icon/hover in the Toolbar
	 */
	displaySummary: function displaySepsisSummary() {
		var summary = $(Toolbar.sepsisAlert);
		var sirsOnly = true;
		for(var i = 0; i < this.sirsIndicators.length; i++) {
			if(this.sirsIndicators[i] == false) {
				sirsOnly = false;
				break;
			}
		}
		if(sirsOnly) {
			summary.addClass("sepsis-summary value-sirs");
		}
		else {
			summary.addClass("sepsis-summary value");
		}
		var config = {
			over: function(e) {Hover.display(e, '', Sepsis.getSummaryTable())},
			timeout: 200,
			out: function(e) {Hover.hide();},
			interval: 200
		};
		summary.hoverIntent(config);
	},
	
	/**
	 * Creates and returns a table comprised of all patients in the list with SIRS/Sepsis
	 */
	getSummaryTable: function getSepsisSummaryTable() {
		var html = '<table>';
		for(var i = 0; i < this.patientIds.length; i++) {
			html += '<tr style="height:20px;">';
			var patientName = null;
			for(var j = 0; j < Patients.patients.length; j++) {
				if(Patients.patients[j].patientId == this.patientIds[i]) {
					patientName = Patients.patients[j].name;
					break;
				}
			}
			html += '<td style="border:0px; vertical-align:middle;">' + patientName + '</td>';
			var dateTime = new Date(this.dateTimes[i]).format(DateFormats.DATE_FORMAT_LONGDATETIME2);
			html += '<td style="border:0px; padding-left:10px; vertical-align:middle;">' + dateTime + '</td>';
			html += '</tr>';
		}
		html += '</table>';
		return html;
	},
	
	/**
	 * Clears all sepsis information and sets this object to not loaded.
	 */
	empty: function emptySepsis() {
		this.loaded = false;
		this.patientIds = [];
		this.dateTimes = [];
	}
};


/**
 * Represents the information related to care orders for the loaded patients.
 */
var Orders = {
	loaded: false,
	isolations: [],
	resuscitations: [],
	diets: [],
	highRisks: [],
	reasonForVisits: [],
	ventilators: [],
	careOrderCount: 0,
	
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass care orders.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackOrders(reply) {
		var careOrders = reply.data;
		this.careOrderCount = careOrders.length;
		for(var i = 0; i < this.careOrderCount; i++) {
			var orders = careOrders[i];
			var encounterId = orders.encounterId;
			if(orders.careOrderType ==  "ISOLATION_STATUS") {
				var isolation = new Isolation(encounterId, orders.currentStartDateTime, orders.orderComment, orders.clinicalDisplayLine);
				for(var j = 0; j < orders.displays.length; j++) {
					isolation.addDisplay(orders.displays[j]);
				}
				this.isolations.push(isolation);
			}
			if(orders.careOrderType ==  "REASON_VISIT") {
				var reasonForVisit = new ReasonForVisit(encounterId, orders.currentStartDateTime);
				for(var j = 0; j < orders.displays.length; j++) {
					reasonForVisit.addDisplay(orders.displays[j]);
					}
				this.reasonForVisits.push(reasonForVisit);
			}
			if(orders.careOrderType ==  "RESUSCITATION") {
				var resuscitationStatus = new ResuscitationStatus(encounterId, orders.currentStartDateTime, orders.orderComment, orders.clinicalDisplayLine);
				for(var j = 0; j < orders.displays.length; j++) {
					resuscitationStatus.addDisplay(orders.displays[j]);
				}
				this.resuscitations.push(resuscitationStatus);
			}
			if(orders.careOrderType ==  "DIET") {
				var diet = new Diet(encounterId, orders.currentStartDateTime, orders.orderComment, orders.clinicalDisplayLine);
				for(var j = 0; j < orders.displays.length; j++) {
					diet.addDisplay(orders.displays[j]);
				}
				this.diets.push(diet);
			}
			if(orders.careOrderType ==  "HIGH_RISKS") {
				var highRisks = new HighRisk(encounterId, orders.currentStartDateTime, orders.orderComment, orders.clinicalDisplayLine);
				for(var j = 0; j < orders.displays.length; j++) {
					highRisks.addDisplay(orders.displays[j]);
				}
				this.highRisks.push(highRisks);
			}
			if(orders.careOrderType ==  "VENTILATOR") {
				var ventilator = new Ventilator(encounterId, orders.currentStartDateTime, orders.orderComment, orders.clinicalDisplayLine);
				if (orders.ventVolumeDisplay != "") {
					ventilator.addVolumeDisplay(orders.ventVolumeDisplay);
				}
				if (orders.ventRateDisplay != "") {
					ventilator.addRateDisplay(orders.ventRateDisplay);
				}
				if (orders.ventModeDisplay != "") {
					ventilator.addModeDisplay(orders.ventModeDisplay);
				}
				this.ventilators.push(ventilator);
			}
		}
	},
	
	/**
	 * Return the isolation orders for the input encounter id.  Will be null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getIsolationByEncounterId: function getOrderIsolationByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.isolations);
	},
	
	/**
	 * Return the resuscitation status orders for the input encounter id.  Will be null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */			
	getResuscitationStatusByEncounterId: function getOrderResuscitationStatusByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.resuscitations);
	},
	
	/**
	 * Return the resuscitation status orders for the input encounter id.  Will be null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getDietByEncounterId: function getOrderDietByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.diets);
	},
	
	/**
	 * Return the high risk orders for the input encounter id.  Will be null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */				
	getHighRisksByEncounterId: function getOrderHighRisksByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.highRisks);
	},
	
	/**
	 * Return the reason for visit orders for the input encounter id.  Will be null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */				
	getReasonForVisitByEncounterId: function getOrderReasonForVisitByEncounterId(encounterId) {	
		var reasonForVisit = this.getByEncounterId(encounterId, this.reasonForVisits);
		if (reasonForVisit == null) {
			return null
		}
		return reasonForVisit[0];
	},
	
	/**
	 * Return the reason for visit orders for the input encounter id.  Will be null if none are found.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */				
	getVentilatorByEncounterId: function getOrderVentilatorByEncounterId(encounterId) {	
		var ventilators = this.getByEncounterId(encounterId, this.ventilators);
		if (ventilators == null) {
			return null;
		}
		return ventilators[0];
	},
	
	/**
	 * Returns a result with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 * @param orders - The array of orders to search in.
	 */		
	getByEncounterId: function getByOrdersEncounterId(encounterId, orders) {
		var careOrders = [];
		for(var i = 0; i < orders.length; i++) {
			if(orders[i].encounterId == encounterId) {
				 careOrders.push(orders[i]);
			}
		}
		if (careOrders.length > 0) {
			return careOrders;
		}
		return null;
	},
	
	/**
	 * Empties all care order information and sets this object to not loaded.
	 * @param none
	 */	
	empty: function emptyOrders() {
		this.loaded = false;
		this.highRisks.length = 0;
		this.reasonForVisits.length = 0;
		this.isolations.length = 0;
		this.resuscitations.length = 0;
		this.diets.length = 0;
		this.ventilators.length = 0;
		this.careOrderCount = 0;
	}
};

/**
 * Represents the orders that are new to the current user for the loaded patients.
 */
var NewOrders = {
	loaded: false,
	orders: [],
	containsUrgent: false,
	orderCount: 0,

	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass new orders.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */
	unpack: function unpackNewOrders(reply) {
		this.containsUrgent = false;
		var newOrders = reply.data;
		var previousOrderId = 0;
		for(var i = 0; i < newOrders.length; i++) {
			var order = newOrders[i];
			var newOrder = new NewOrder(order.encounterId);
			newOrder.id = order.id;
			newOrder.orderId = order.id
			newOrder.version = order.version;
			newOrder.display = order.display;
			if(order.description !== null && order.description !== undefined) {
				newOrder.description = this.createHTMLSafe(order.description);
			} else {
				newOrder.description = "";
			}
			newOrder.action = order.action;
			newOrder.actionMeaning = order.actionMeaning;
			newOrder.actionDateTime = order.actionDateTime;
			newOrder.orderingProvider = order.orderingProvider;
			if(order.orderingProvider == null && order.orderingProvider == undefined) {
				newOrder.orderingProvider = '--';
			}
			newOrder.enteringProvider = order.enteringProvider;
			if(order.enteringProvider == null && order.enteringProvider == undefined) {
				newOrder.enteringProvider = '--';
			}
			if(order.comment) {
				newOrder.comment = this.createHTMLSafe(order.comment);
			}
			if(order.instruction) {
				newOrder.instruction = this.createHTMLSafe(order.instruction);
			}
			newOrder.nurseReview = order.nurseReview;
			newOrder.parentNurseReview = order.parentNurseReview;
			newOrder.stat = order.stat;
			if(order.stat == true){
				this.containsUrgent = true;
			}
			if(newOrder.orderId != previousOrderId) {
				this.orderCount++;
			}
			previousOrderId = newOrder.orderId;
			this.orders.push(newOrder);
		}
	},

	/**
	 * Returns the orders that are new for the input encounter.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 * @return The NewOrder object for the input encounter id.  Will be null if none are found.
	 */
	getByEncounterId: function getNewOrdersByEncounterId(encounterId) {
		var encounterOrders = [];
		for(var i = 0; i < this.orders.length; i++) {
			if(this.orders[i].encounterId == encounterId) {
				encounterOrders.push(this.orders[i]);
			}
		}
		if(encounterOrders.length == 0) {
			return null;
		}
		return encounterOrders;
	},

	/**
	 * Returns the orders that are new for the input encounter.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 * @param version - The version for the current order.
	 * @return The NewOrder object for the input encounter id.  Will be null if none are found.
	 */
	getByOrderId: function getNewOrderByOrderId(orderId,version) {
		for(var i = 0; i < this.orders.length; i++) {
			if(this.orders[i].orderId == orderId && this.orders[i].version == version) {
				return this.orders[i];
			}
		}
		return null;
	},

    /**
     * Creates an HTML Safe String.
     * @param unsafeString: The string that potentially has elements that aren't HTML safe
     * @return The HTML safe version of the string passed in
     */
    createHTMLSafe: function createHTMLSafe(unsafeString) {
        return String(unsafeString).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    },

	/**
	 * Empties the new orders collection and marks the new orders as not loaded.
	 * @param none
	 */
	empty: function emptyNewOrders() {
		this.loaded = false;
		this.orders.length = 0;
		this.orderCount = 0;
		this.containsUrgent = false;
	},

	/**
	 * Returns all the actions for the input order id.
	 * @param orderId - The id of the order to retrieve the actions for.
	 * @return an array of actions associated to the order id.
	 */
	getOrderActionsByOrderId: function getNewOrderActionsByOrderId(orderId) {
		var orderActions = [];
		for(var i = 0; i < this.orders.length; i++) {
			if(this.orders[i].orderId == orderId ) {
				orderActions.push(this.orders[i]);
			}
		}
		return orderActions;
	}
}

/**
 * Represents an order that is new to the current user for a patient's encounter.
 */
function NewOrder(encounterId, display) {
	this.encounterId = encounterId;
	this.id = 0;
	this.version = 0;
	this.display = "";
	this.description = "";
	this.action = "";
	this.actionMeaning = "";
	this.orderingProvider = "";
	this.enteringProvider = "";
	this.actionDateTime = 0;
	this.comment = "";
	this.instruction = "";
	this.nurseReview = false;
	this.parentNurseReview = false;
	this.stat = false;
	
	/**
	 * Returns the display of the new order including all icons.
	 * @param index - unique index to build the id with
	 * @return - The HTML to build the display of the new order.
	 */	
	this.getDisplay = function getNewOrderDisplay() {
		var html = "";
		if(this.actionMeaning == "CANCEL") {
			html += '<span class="review-dialog-cancel-order-display">' + this.display + '</span>';
		} else if(this.stat == true) {
			html += '<span class="review-dialog-order-display-critical">' + this.display + '</span>';
		} else {
			html += '<span class="review-dialog-order-display">' + this.display + '</span>';
		}
		return html;
	}
	
	/**
	 * Returns the action of the new order .
	 * @param none
	 * @return - The HTML to build the action of the new order.
	 */	
	this.getOrderAction = function getNewOrderAction() {
	var html = "";
	if (this.actionMeaning != "ORDER") {
		html += '<span class="review-dialog-order-action">'+'(' + this.action + ')'+'</span>';
	}
	return html;
	}
	
	/**
	 * Returns the comment of the new order.
	 * @return - The HTML to build the display of the new order.
	 */	
	this.getComment = function getNewOrderComment() {
		var html = "";
		if(this.comment != "") {
			html += '<span>' + i18n.COMMENT + ': ' + this.comment +'</span>';
		}
		return html;
	}
	
	/**
	 * Returns the instruction of the new order.
	 * @return - The HTML to build the display of the new order.
	 */	
	this.getInstruction = function getNewOrderInstruction() {
		var html = "";
		if(this.instruction != "") {
			html += '<span>' + i18n.INSTRUCTION + ': ' + this.instruction +'</span>';
		}
		return html;
	}
	
	/**
	 * Returns the instruction of the new order.
	 * @return - The HTML to build the display of the new order.
	 */	
	this.getEnteredBy = function getEnteredByWithTimeDate(providerCellWidth) {
		var html = "";
		html += '<div class="truncate" style="width:' + (providerCellWidth - 10) + 'px;">' +  this.enteringProvider + '</div>';
		html += '<div class="truncate" style="padding-top:4px; width:' + (providerCellWidth - 10) + 'px;">' +  this.getDateDisplay() + '</div>';
		return html;
	}
	
	/**
	 * Returns true if newOrder needs nurseReview.
	 *  @param none
	 */
	this.isNurseReview = function isNurseReviewOrder() {
		if(this.nurseReview == true ) {
			return true;
		}
		return false;
	}

	/**
	 * Returns true if newOrder needs parentNurseReview.
	 *  @param none
	 */
	this.isParentNurseReview = function isParentNurseReview() {
		if(this.parentNurseReview == true ) {
			return true;
		}
		return false;
	}
	
	/**
	 * Returns true if newOrder is stat/urgent.
	 * @param none
	 */
	this.isStat = function isStatOrder() {
		if(this.stat == true ) {
			return true;
		}
		return false;
	}
	
	/**
	 * Returns Order display for the hover.
	 * @param none
	 */
	this.getOrderDisplayHover = function getNewOrderDisplay() {
		var html = "";
		html += '<table>';
		html += '<tr><td class="review-dialog-first-display">';
		if(this.nurseReview == true ) {
			html += '<span class="review-image"></span>';
		}
		html += '<span class="review-dialog-hover-order-display">' + this.getDisplay() + '</span></td></tr>';
		html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-description">' + this.description + '</span></td></tr>';
		if(this.comment != "") {
			html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-comment">' + i18n.COMMENT + ': ' + this.comment +'</span></td></tr>';
		}
		if(this.instruction != "") {
			html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-instruction">' + i18n.INSTRUCTION + ': ' + this.instruction +'</span></td></tr>';
		}
		html += '</table>';
		return html;
	}
	
	/**
	 * Returns Order Action for the hover.
	 * @param none
	 */
	this.getOrderActionDisplayHover = function getNewOrderActionDisplay() {
		var newOrders = NewOrders.getByEncounterId(this.encounterId);
		var html = "";
		html += '<table>';
		html += '<tr><td class="review-dialog-first-display">';
		if(this.nurseReview == true ) {
			html += '<span class="review-image"></span>';
		}
		html += '<span class="review-dialog-hover-order-display">' + this.getDisplay() + '</span>';
		html += '<span class="review-dialog-hover-order-action">'+' (' + this.action + ')'+'</span></td></tr>';
		html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-description">' + this.description + '</span></td></tr>';
		if(this.comment != "") {
			html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-comment">' + i18n.COMMENT + ': ' + this.comment +'</span></td></tr>';
		}
		if(this.instruction != "") {
			html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-instruction">' + i18n.INSTRUCTION + ': ' + this.instruction +'</span></td></tr>';
		}
		for(var i = 0; i < newOrders.length; i++) {
			if(this.id == newOrders[i].id && this.version != newOrders[i].version) {
				html += '<tr><td class="review-dialog-old-order-display">';
				if(newOrders[i].nurseReview == true ) {
					html += '<span class="review-image"></span>';
				}
				html += '<span class="review-dialog-hover-order-display">' + newOrders[i].getDisplay() + '</span>';
				html += '<span class="review-dialog-hover-order-action">'+' (' + newOrders[i].action + ')'+'</span></td></tr>';
				html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-description">' + newOrders[i].description + '</span></td></tr>';
				if(newOrders[i].comment != "") {
					html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-comment">' + i18n.COMMENT + ': ' + newOrders[i].comment +'</span></td></tr>';
				}
				if(newOrders[i].instruction != "") {
					html += '<tr><td class="review-dialog-display"><span class="review-dialog-hover-order-instruction">' + i18n.INSTRUCTION + ': ' + newOrders[i].instruction +'</span></td></tr>';
				}
			}
		}
		html += '</table>';
		return html;
	}
	
	/**
	 * Returns the display of action date/time associated to this new order.
	 * @param none
	 * @return - The string representing the action date/time.
	 */	
	this.getDateDisplay = function getNewOrderDateDisplay() {
		var careDate = new CareDate(encounterId, this.actionDateTime);
		return careDate.getFaceUpTimeDateDisplay();
	};
};

/**
 * Represents the results that are new to the user for the loaded patients.
 */
var NewResults = {
	containsCritical: false,
	loaded: false,
	results: [],
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass new results.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackNewResults(reply) {
		this.containsCritical = false;
		var newResults = reply.data;
		for(var i = 0; i < newResults.length; i++) {
			for(var j = 0; j < newResults[i].results.length; j++) {
				var result = newResults[i].results[j];
				var newResult = new Result(newResults[i].encounterId, result);
				if(newResult.isCritical()){
					this.containsCritical = true;
				}
				this.results.push(newResult);
			}
		}
	},
	
	/**
	 * Returns a new result object fort the input encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 * @return The NewResult objects for the input encounter id.  Will be null if none are found.
	 */		
	getByEncounterId: function getNewResultsByEncounterId(encounterId) {
		var encounterResults = [];
		for(var i = 0; i < this.results.length; i++) {
			if(this.results[i].encounterId == encounterId) {
				encounterResults.push(this.results[i]);
			}
		}
		if(encounterResults.length == 0) {
			return null;
		}
		return encounterResults;
	},
	
	/**
	 * Returns the result with a given result id
	 * @param encounterId - The unique identifier of the patient's encounter.
	 * @return The NewOrder object for the input encounter id.  Will be null if none are found.
	 */		
	getByResultId: function getNewResultByResultId(resultId) {
		for(var i = 0; i < this.results.length; i++) {
			if(this.results[i].id == resultId) {
				return this.results[i];
			}
		}
		return null;
	},
	
	/**
	 * Empties the result collection and marks the new results as not loaded.
	 * @param none
	 */	
	empty: function emptyNewResults() {
		this.loaded = false;
		this.results.length = 0;
		this.containsCritical = false;
	}	
}

/**
 * Represents a result that is new to the current user for a patient's encounter.
 */
function NewResult(encounterId) {
	this.encounterId = encounterId;
	this.id = 0;
	this.display = "";
	this.value = "";
	this.units = "";
	this.dateTime = 0;
	this.normalcy = "";
	this.version = -1;
	
	/**
	 * Returns the display of the new result including icons.
	 * @param none
	 * @return The HTML representing the display of the new result.
	 */	
	this.getDisplay = function getNewResultDisplay() {
		var html = '<span class="result-display">' + this.display + '</span>';
		return html;
	}
	
	/**
	 * Returns the display of the value that is new to the user.
	 * @param index - unique index to build the id with
	 * @return The HTML representing the display of the value of the new result.
	 */	
	this.getValue = function getNewResultValue(index) {
		var html = "";
		if(this.isCritical()) {
			html += '<span id ="criticalImage' + index + '" class="result-critical-image"></span>';
			html += '<span class="result-value-critical">' + this.value + '</span>';
		}
		else if(this.normalcy == "HIGH") {
			html += '<span id ="highImage' + index + '" class="result-high-image"></span>';
			html += '<span class="result-value-high">' + this.value + '</span>';
		}
		else if(this.normalcy == "LOW") {
			html += '<span id ="lowImage' + index + '" class="result-low-image"></span>';
			html += '<span class="result-value-low">' + this.value + '</span>';
		}
		else if(this.normalcy == "ABNORMAL") {
			html += '<span id ="abnormalImage' + index + '" class="result-abnormal-image"></span>';
			html += '<span class="result-value-abnormal">' + this.value + '</span>';
		}
		else {
			html += '<span class="result-value">' + this.value + '</span>';
		}
		html += '<span class="result-units">' + this.units + '</span>';
		return html;
	};
	
	/**
	 * Returns the display of the result's date time.
	 * @param none
	 * @return The display of the result's date time.
	 */	
	this.getDateDisplay = function getNewResultDateDisplay() {
		return new CareDate(encounterId, this.dateTime).getFaceUpDateTimeDisplay();
	};
	
	/**
	 * Determines if this result is critical or not.
	 * @param none
	 * @return True if it is a critical result, false if not.
	 */	
	this.isCritical = function isNewResultCritical() {
		if(this.normalcy == "CRITICAL" || this.normalcy == "EXTREMEHIGH" ||
		   this.normalcy == "PANICHIGH" || this.normalcy == "EXTREMELOW" ||
		   this.normalcy == "PANICLOW" || this.normalcy == "VABNORMAL" ||
		   this.normalcy == "POSITIVE") {
			return true;
		}
		return false;
	}
};

/**
 * Represents the care results for the currently loaded patients.
 */
var Results = {
	loaded: false,
	dischargeDates: [],
	acuitys: [],
	highRisks: [],
	reasonForVisits: [],
	isolations: [],
	customs: [],
	pHs: [],
	paO2s: [],
	paCO2s: [],
	HCO3s: [],
	O2Sats: [],
	fiO2s: [],
	flowRates: [],
	o2s: [],
	spO2s: [],
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass care results.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackResults(reply) {
		var careResults = reply.data;
		this.careResultCount = careResults.length;
		reply.length = 0;
		reply = null;
		//Add any new Results
		for(var i = 0; i < this.careResultCount; i++) {
			var result = careResults[i];
			var encounterId = result.encounterId;
			if(result.targetedDischarge) {
				var dischargeDate = new CareDate(encounterId, result.targetedDischarge.numericValue);
				this.dischargeDates.push(dischargeDate);
			}
			if(result.acuity) {
				var acuity = new Acuity(encounterId, result.acuity);
				this.acuitys.push(acuity);
			}
			if(result.customs){
				for(var j = 0; j < result.customs.length; j++) {
					var custom = new Result(encounterId, result.customs[j]);
					this.customs.push(custom);			
				}
			}				
			if(result.pH){
                var pH = new Result(encounterId, result.pH);
				this.pHs.push(pH);
			}
			if(result.PaO2){
                var paO2 = new Result(encounterId, result.PaO2);
				this.paO2s.push(paO2);
			}
			if(result.PaCO2){
                var paCO2 = new Result(encounterId, result.PaCO2);
				this.paCO2s.push(paCO2);
			}
			if(result.HCO3){
                var HCO3 = new Result(encounterId, result.HCO3);
				this.HCO3s.push(HCO3);
			}
			if(result.O2Sat){
                var O2Sat = new Result(encounterId, result.O2Sat);
				this.O2Sats.push(O2Sat);
			}
			if(result.fiO2){
                var fiO2 = new Result(encounterId, result.fiO2);
				this.fiO2s.push(fiO2);
			}
			if(result.flowRate){
                var flowRate = new Result(encounterId, result.flowRate);
				this.flowRates.push(flowRate);
			}
			if(result.o2){
                var o2 = new Result(encounterId, result.o2);
				this.o2s.push(o2);
			}
			if(result.spO2){
                var spO2 = new Result(encounterId, result.spO2);
				this.spO2s.push(spO2);
			}
			if(result.reasonForVisit) {
				var reasonForVisit = new ReasonForVisit(encounterId, result.reasonForVisit.dateTime);
				reasonForVisit.addDisplay(result.reasonForVisit.value)
				this.reasonForVisits.push(reasonForVisit);
			}
			if(result.isolations) {
				if(result.isolations.length > 0) {
					for(var j = 0; j < result.isolations.length; j++) {
						var isolation = new Result(encounterId, result.isolations[j]);
						this.isolations.push(isolation);
					}
				}
			}
			if(result.highRisks) {
				if(result.highRisks.length > 0) {
					for(var j = 0; j < result.highRisks.length; j++) {
						var highRiskresult = new Result(encounterId, result.highRisks[j]);
						this.highRisks.push(highRiskresult);
					}
					
				}
			}
		}

		//Remove any results which no longer have values
		var patients = Patients.patients;
		for(var i = 0; i < patients.length; i++){
			if(this.getAcuityByEncounterId(patients[i].encounterId) == null) {
				var acuity = new Result(encounterId, null);
				this.acuitys.push(acuity);
			}
			if(this.getCustomColumnByEncounterId(patients[i].encounterId) == null) {
				var custom = new Result(encounterId, null);
				this.customs.push(custom);
			}
			
			if(this.getPHByEncounterId(patients[i].encounterId) == null){
				var pH = new Result(encounterId, null);
				this.pHs.push(pH);
			}
			
			if(this.getPaO2ByEncounterId(patients[i].encounterId) == null){
				var paO2 = new Result(encounterId, null);
				this.paO2s.push(paO2);
			}
			
			if(this.getPaCO2ByEncounterId(patients[i].encounterId) == null){
				var paCO2 = new Result(encounterId, null);
				this.paCO2s.push(paCO2);
			}
			
			if(this.getHCO3ByEncounterId(patients[i].encounterId) == null){
				var HCO3 = new Result(encounterId, null);
				this.HCO3s.push(HCO3);
			}
			
			if(this.getO2SatByEncounterId(patients[i].encounterId) == null){
				var O2Sat = new Result(encounterId, null);
				this.O2Sats.push(O2Sat);
			}

			if(this.getFiO2ByEncounterId(patients[i].encounterId) == null){
				var fiO2 = new Result(encounterId, null);
				this.fiO2s.push(fiO2);
			}
			if(this.getFlowRateByEncounterId(patients[i].encounterId) == null){
				var flowRate = new Result(encounterId, null);
				this.flowRates.push(flowRate);
			}
			if(this.getO2ByEncounterId(patients[i].encounterId) == null){
				var o2 = new Result(encounterId, null);
				this.o2s.push(o2);
			}
			if(this.getSpO2ByEncounterId(patients[i].encounterId) == null){
				var spO2 = new Result(encounterId, null);
				this.spO2s.push(spO2);
			}
		}
	},
	
	/**
	 * Returns discharge date results with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getDischargeDateByEncounterId: function getResultDischargeDateByEncounterId(encounterId) {		
		return this.getByEncounterId(encounterId, this.dischargeDates);
	},
	
	/**
	 * Returns acuity results with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getAcuityByEncounterId: function getResultAcuityByEncounterId(encounterId) {	
		return this.getByEncounterId(encounterId, this.acuitys);
	},
	
	/**
	 * Returns acuity results with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getCustomColumnByEncounterId: function getResultCustomByEncounterId(encounterId) {	
		return this.getCustomsByEncounterId(encounterId, this.customs);
	},
	
	
	/**
	 * Returns a result with the given encounter id. 
	 * @param encounterId - The unique identifier of the patient's encounter.
	 * @param customs - The array of customs to search in.
	 */		
	getCustomsByEncounterId: function getCustomResultsByEncounterId(encounterId, customs) {
		var customsByEncounterId = [];
		for(var i = 0; i < customs.length; i++) {
			if(customs[i].encounterId == encounterId) {
				customsByEncounterId.push(customs[i]);
			}
		}
		if(customsByEncounterId.length > 0) {
			return customsByEncounterId;
		}
		return null;
	},
	
	/**
	 * Returns isolation results with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getIsolationsByEncounterId: function getResultIsolationByEncounterId(encounterId) {	
		var isolationList = [];
		for(var i = 0; i < this.isolations.length; i++) {
			if(this.isolations[i].encounterId == encounterId) {
				 isolationList.push(this.isolations[i]);
			}
		}
		if (isolationList.length > 0) {
			return isolationList;
		}
		return null;
	},
	
	/**
	 * Returns high risk results with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getHighRisksByEncounterId: function getResultHighRisksByEncounterId(encounterId) {	
		var highRiskList = [];
		for(var i = 0; i < this.highRisks.length; i++) {
			if(this.highRisks[i].encounterId == encounterId) {
				 highRiskList.push(this.highRisks[i]);
			}
		}
		if (highRiskList.length > 0) {
			return highRiskList;
		}
		return null;
	},
	
	/**
	 * Returns reason for visit results with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getReasonForVisitByEncounterId: function getResultReasonForVisitByEncounterId(encounterId) {	
		return this.getByEncounterId(encounterId, this.reasonForVisits);
	},
	
	/**
	 * Returns a result with the given encounter id. 
	 * @param encounterId - The unique identifier of the patient's encounter.
	 * @param results - The array of results to search in.
	 */		
	getByEncounterId: function getResultsByEncounterId(encounterId, results) {
		for(var i = 0; i < results.length; i++) {
			if(results[i].encounterId == encounterId) {
				return results[i];
			}
		}
		return null;
	},

	/**
	*
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getOxygenByEncounterId: function getResultOxygenByEncounterId(encounterId) {
	return this.getByEncounterId(encounterId, this.oxygens);
	},

	/**
	*
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getPHByEncounterId: function getResultPHByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.pHs);
	},
	
	/**
	* 
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getPaO2ByEncounterId: function getResultBloodGasesByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.paO2s);
	},
	
	/**
	* Returns acuity results with the given encounter id.
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getPaCO2ByEncounterId: function getResultBloodGasesByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.paCO2s);
	},
	
	/**
	* 
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getHCO3ByEncounterId: function getResultBloodGasesByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.HCO3s);
	},
	
	/**
	* 
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getO2SatByEncounterId: function getResultBloodGasesByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.O2Sats);
	},

	/**
	* 
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getFiO2ByEncounterId: function getResultBloodGasesByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.fiO2s);
	},
	
	/**
	* 
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getFlowRateByEncounterId: function getResultBloodGasesByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.flowRates);
	},
	
	/**
	*
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getO2ByEncounterId: function getResultBloodGasesByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.o2s);
	},

	/**
	* 
	* @param encounterId - The unique identifier of the patient's encounter.
	*/
	getSpO2ByEncounterId: function getResultBloodGasesByEncounterId(encounterId) {
		return this.getByEncounterId(encounterId, this.spO2s);
	},	
	
	/**
	 * Empties the result collections and sets this object to not loaded.
	 * @param none
	 */		
	empty: function emptyResults() {
		this.loaded = false;
		this.dischargeDates.length = 0;
		this.acuitys.length = 0;
		this.highRisks.length = 0;
		this.reasonForVisits.length = 0;
		this.isolations.length = 0;
		this.customs.length = 0;
		this.pHs.length = 0;
		this.paO2s.length = 0;
		this.paCO2s.length = 0;
		this.HCO3s.length = 0;
		this.O2Sats.length = 0;
		this.fiO2s.length = 0;
		this.flowRates.length = 0;
		this.o2s.length = 0;
		this.spO2s.length = 0;
		this.careResultCount = 0;
	}
};

/**
 * Represents highRisks based on patient orderss and resultss.
 */		
function HighRisks(orders, results) {
	this.orders = orders;
	this.results = results;
	
	/**
	 * Sorts the highRisks Descending by date time
	 * @param none
	 */	
	this.sort = function sortHighRisks() {
		var highRisks = [];
		if(this.orders == null && this.results == null) {
			return highRisks;
		}
		if(this.orders != null) {
			highRisks = highRisks.concat(this.orders);
		}
		if(this.results != null) {
			highRisks = highRisks.concat(this.results);
		}
		return highRisks.sort(function(a, b) {
			if (a.dateTime == null) {
				return 1;
			}
			if (b.dateTime == null) {
				return -1;
			}
			return b.dateTime - a.dateTime;
		});
	}
	
	/**
	 * Returns the display of the high risks for hover.
	 * @param none
	 * @return Sorting list of high risks ready to be displayed in a hover
	 */	
	this.getHoverDisplay = function getHoverDisplay() {
		var highRisks = this.sort();
		
		var html = "";
		for(var i = 0; i < highRisks.length; i++) {
			html += highRisks[i].getHoverDisplay();
			if (i < highRisks.length - 1) {
				html += '<tr><td style="hover-table-label"> <br /></td></tr>';
			}
		}
		return html;
	}
	
	/**
	 * Returns the display of the high risks for drill down.
	 * @param none
	 * @return Sorting list of high risks ready to be displayed in a drill down
	 */	
	this.getDrillDownDisplays = function getHighRiskDrillDownDisplays() {
		var highRisks = this.sort();
		
		var html = "";
		for(var i = 0; i < highRisks.length; i++) {
			html += highRisks[i].getDrillDownDisplay();
			if (i < highRisks.length - 1) {
				html += '<tr><td style="border-width:0px;"> <br /></td></tr>';
			}
		}
		return html;
	}
}



















/**
 * Represents isolations based on patient orderss and resultss.
 */		
function Isolations(orders, results) {
	this.orders = orders;
	this.results = results;
	
	/**
	 * Return the display of the isolations.
	 * @param none
	 * @return - A string of isolations delimted by commas. 
	 */	
	this.getDrillDownDisplay = function getDrillDownDisplay() {
		var isolations = this.sort();
		if(isolations == null || isolations.length == 0) {
			return "--";
		}
		var display = "";
		for(var i = 0; i < isolations.length; i++) {
			if(display != "") {
				display += ", ";
			}
			display += isolations[i].getDisplays();
		}
		return display;
	
	}
	/**
	 * Sorts the isolations Descending by date time
	 * @param none
	 */	
	this.sort = function sortIsolations() {
		var isolations = [];
		if(this.orders == null && this.results == null) {
			return isolations;
		}
		if(this.orders != null) {
			isolations = isolations.concat(this.orders);
		}
		if(this.results != null) {
			isolations = isolations.concat(this.results);
		}
		return isolations.sort(function(a, b) {
			if (a.dateTime == null) {
				return 1;
			}
			if (b.dateTime == null) {
				return -1;
			}
			return b.dateTime - a.dateTime;
		});
	}
	
	/**
	 * Returns the display of the isolations for hover.
	 * @param none
	 * @return Sorting list of isolations ready to be displayed in a hover
	 */	
	this.getHoverDisplay = function getHoverDisplay() {
		var isolations = this.sort();
		
		var html = "";
		for(var i = 0; i < isolations.length; i++) {
			html += isolations[i].getHoverDisplay();
			if (i < isolations.length - 1) {
				html += '<tr><td class="hover-table-label"> <br/> </td></tr>';
			}
		}
		return html;
	}
}



















/**
 * Represents a patient's isolation
 */
function Isolation(encounterId, dateTime, orderComment, clinicalDisplayLine) {
	this.encounterId = encounterId;
	this.displays = [];
 	this.dateTime = dateTime;
	this.orderComment = orderComment;
	this.clinicalDisplayLine = clinicalDisplayLine;
	this.hoverDisplay = "";
	this.drillDownDisplay = "";

	/**
	*	If the hover Display has already been defined for a isolation,  return that.
	* 	If no hover display is definded then create one and return it.
	*/
	this.getHoverDisplay = function getHoverDisplay() {
		if (this.hoverDisplay != "") {
			return this.hoverDisplay;
		}
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.DISPLAY + ": "   + '</td><td class="hover-table">' + this.getDisplays() + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.DETAILS + ": "  + '</td><td class="hover-table">' + this.getClinicalDisplayLine() + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.DATE_TIME + ": "  + '</td><td class="hover-table">' + this.getDateTime() + '</td></tr>';
		if (this.getOrderComment() != "--") {
			html += '<tr><td class="hover-table-label">' + i18n.COMMENT + ": " + '</td><td class="hover-table">' + this.getOrderComment() + '</td></tr>';
		}
		html += '</table>';
		this.hoverDisplay = html;
		return html;
	};
	
	/**
	 * Adds a isolation display.
	 */
	this.addDisplay = function addIsolationDisplay(display) {
		this.displays.push(display);
	};
	
	/*
	 * @return - List of displays for a isolation
	 */
	this.getDisplays = function getDisplays() {
		if (this.displays == null) {
			return "--";
		}
		var isolationDisplay = "";
		for(var i = 0; i < this.displays.length; i++) {
			if(isolationDisplay != "") {
				isolationDisplay += ", ";
			}
			isolationDisplay += this.displays[i];
		}
		this.isolationDisplays = isolationDisplay;
		return isolationDisplay;
	};
	
	/*
	 * @return - DateTime for a isolation
	 */
	this.getDateTime = function getDateTime() {
		if (this.dateTime == null) {
			return "--";
		}
		var careDate = new CareDate(this.encounterId, this.dateTime);
		return careDate.getFaceUpDateTimeDisplay();
	};
	
	/*
	 * @return - OrderComment for a isolation
	 */
	this.getOrderComment = function getOrderComment() {
		if (this.orderComment == null) {
			return "--";
		}
		return this.orderComment;
	};
	
	
	
	/*
	 * @return - Clinical display line for a isolation
	 */
	this.getClinicalDisplayLine = function getClinicalDisplayLine() {
		if (this.clinicalDisplayLine == null) {
			return "--";
		}
		return this.clinicalDisplayLine;
	};

};

/**
 * Represents a patient's resuscitationStatus
 */
function ResuscitationStatus(encounterId, currentStartDateTime, orderComment, clinicalDisplayLine) {
	this.encounterId = encounterId;
	this.displays = [];
	this.currentStartDateTime = currentStartDateTime;
	this.orderComment = orderComment;
	this.clinicalDisplayLine = clinicalDisplayLine;
	
	/**
	 * Adds a resuscitationStatus display.
	 */
	this.addDisplay = function addResuscitationStatusDisplay(display) {
		this.displays.push(display);
	};
	
	this.getDisplays = function getDisplays() {
		if (this.displays == null) {
			return "--";
		}
		var resuscitationStatusDisplay = "";
		for(var i = 0; i < this.displays.length; i++) {
			if(resuscitationStatusDisplay != "") {
				resuscitationStatusDisplay += ", ";
			}
			resuscitationStatusDisplay += this.displays[i];
		}
		return resuscitationStatusDisplay;
	};
	
	this.getCurrentStartDateTime = function getCurrentStartDateTime() {
		if (this.currentStartDateTime == null) {
			return "--";
		}
		var careDate = new CareDate(this.encounterId, this.currentStartDateTime);
		return careDate.getFaceUpDateTimeDisplay();
	};
	
	this.getOrderComment = function getOrderComment() {
		if (this.orderComment == null) {
			return "--";
		}
		return this.orderComment;
	};
	
	this.getClinicalDisplayLine = function getClinicalDisplayLine() {
		if (this.clinicalDisplayLine == null) {
			return "--";
		}
		return this.clinicalDisplayLine;
	};
};

/**
 * Represents a patient's diet
 */
function Diet(encounterId, currentStartDateTime, orderComment, clinicalDisplayLine) {
	this.encounterId = encounterId;
	this.displays = [];
	this.currentStartDateTime = currentStartDateTime;
	this.orderComment = orderComment;
	this.clinicalDisplayLine = clinicalDisplayLine;
	
	/**
	 * Adds a diet display.
	 */
	this.addDisplay = function addDietDisplay(display) {
		this.displays.push(display);
	};
	
	/**
	 * @return - Display for a diet order
	 */
	this.getDisplays = function getDisplays() {
		if (this.displays == null) {
			return "--";
		}
		var dietDisplay = "";
		for(var i = 0; i < this.displays.length; i++) {
			if(dietDisplay != "") {
				dietDisplay += ", ";
			}
			dietDisplay += this.displays[i];
		}
		return dietDisplay;
	};
	
	/**
	 * @return - CurrentStartDateTime for a diet order
	 */
	this.getCurrentStartDateTime = function getCurrentStartDateTime() {
		if (this.currentStartDateTime == null) {
			return "--";
		}
		var careDate = new CareDate(this.encounterId, this.currentStartDateTime);
		return careDate.getFaceUpDateTimeDisplay();
	};
	
	/**
	 * @return - OrderComment for a diet order
	 */
	this.getOrderComment = function getOrderComment() {
		if (this.orderComment == null) {
			return "--";
		}
		return this.orderComment;
	};
	
	/**
	 * @return - ClinicalDisplayLine for a diet order
	 */
	this.getClinicalDisplayLine = function getClinicalDisplayLine() {
		if (this.clinicalDisplayLine == null) {
			return "--";
		}
		return this.clinicalDisplayLine;
	};
};

/**
 * Represents a patient's highRisk
 */
function HighRisk(encounterId, dateTime, orderComment, clinicalDisplayLine) {
	this.encounterId = encounterId;
	this.displays = [];
	this.dateTime = dateTime;
	this.orderComment = orderComment;
	this.clinicalDisplayLine = clinicalDisplayLine;
	this.hoverDisplay = "";
	this.drillDownDisplay = "";

	/**
	*	If the hoverDisplay has already been defined for a high risk, return that.
	* 	If no hover display is definded then create one and return it.
	*/
	this.getHoverDisplay = function getHoverDisplay() {
		if (this.hoverDisplay != "") {
			return this.hoverDisplay;
		}
		var html = '<table class="hover-table borderless">';
		html += '<tr><td class="hover-table-label">' + i18n.DISPLAY + ": "   + '</td><td class="hover-table">' + this.getDisplays() + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.DETAILS + ": "  + '</td><td class="hover-table">' + this.getClinicalDisplayLine() + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.DATE_TIME + ": "  + '</td><td class="hover-table">' + this.getDateTime() + '</td></tr>';
		if (this.getOrderComment() != "--") {
			html += '<tr><td class="hover-table-label">' + i18n.COMMENT + ": " + '</td><td class="hover-table">' + this.getOrderComment() + '</td></tr>';
		}
		html += '</table>';
		this.hoverDisplay = html;
		return html;
	};
	
	/**
	*	If the drilldown Display has already been defined for a high risk, return that.
	* 	If no drilldown display is definded then create one and return it.
	*/
	this.getDrillDownDisplay = function getDrillDownDisplay() {
		if (this.drillDownDisplay != "") {
			return this.drillDownDisplay;
		}
		var html = '<tr><td class="high-risk-value-display">' + this.getDisplays() + '</td></tr>';
		html += '<tr><td class="high-risk-value">' + this.getClinicalDisplayLine() + '</td></tr>';
		html += '<tr><td class="high-risk-value">' + this.getDateTime() + '</td></tr>';
		if (this.getOrderComment() != "--") {
			html += '<tr><td class="high-risk-value">' + this.getOrderComment() + '</td></tr>';
		}
		this.drillDownDisplay = html;
		return html;
	};
	
	/**
	 * Adds a highRisk display.
	 */
	this.addDisplay = function addHighRiskDisplay(display) {
		this.displays.push(display);
	};
	
	/*
	 * @return - List of displays for a highrisk
	 */
	this.getDisplays = function getDisplays() {
		if (this.displays == null) {
			return "--";
		}
		var highRiskDisplay = "";
		for(var i = 0; i < this.displays.length; i++) {
			if(highRiskDisplay != "") {
				highRiskDisplay += ", ";
			}
			highRiskDisplay += this.displays[i];
		}
		this.highRiskDisplays = highRiskDisplay;
		return highRiskDisplay;
	};
	
	/*
	 * @return - DateTime for a highrisk
	 */
	this.getDateTime = function getDateTime() {
		if (this.dateTime == null) {
			return "--";
		}
		var careDate = new CareDate(this.encounterId, this.dateTime);
		return careDate.getFaceUpDateTimeDisplay();
	};
	
	/*
	 * @return - OrderComment for a highrisk
	 */
	this.getOrderComment = function getOrderComment() {
		if (this.orderComment == null) {
			return "--";
		}
		return this.orderComment;
	};
	
	/*
	 * @return - Clinical display line for a highrisk
	 */
	this.getClinicalDisplayLine = function getClinicalDisplayLine() {
		if (this.clinicalDisplayLine == null) {
			return "--";
		}
		return this.clinicalDisplayLine;
	};
};

/**
 * Represents the acuity score of a patient.
 */
function Acuity(encounterId, acuity) {
	this.encounterId = encounterId;
	this.display = acuity.value;
	this.endDtTm = acuity.dateTime;
	this.resultComments = acuity.resultComments;
	this.status = acuity.status;
	this.isModified = acuity.isModified;
	this.type = acuity.type;
	
	/**
	 * Return the formatted eventEndDtTm for an Acuity
	 * @param - none.
	 */
	this.getEndDtTm = function getEndDtTm(){
		var html = "";
		if(this.endDtTm){
			var careDate = new CareDate(this.encounterId, this.endDtTm);
			html += '<span class="">' + careDate.getFaceUpDateTimeDisplay() + '</span>';
		}
		return html;
	}
	
	/**
	 * Return the hover text for an Acuity
	 * @param - none.
	 */
	this.getHoverText = function getAcuityHoverText() {
		var html = '<tr style="height:16px;"><td class="result-hover-value-label">' + i18n.VALUE + ":" + '</td>';
		html += '<td class="hover-table">' + this.display + this.isModifiedResult() + '</td></tr>';
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.DATE_TIME + ":" + '</td>';
		html += '<td class="hover-table">' + this.getEndDtTm() + '</td></tr>';
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.STATUS + ":" + '</td>';
		html += '<td class="hover-table">' + this.status + '</td></tr>';
		if(this.resultComments.length > 0) {
			var comment = this.resultComments[0];
			var dateTime = new CareDate(this.encounterId, comment.dateTime);
			html += '<table class="hover-table">';
			html += '<tr style="height:20px;"><td class="result-hover-comment-header">' + i18n.COMMENT_BY + ": ";
			html += comment.personnelName + '; ' + dateTime.getFaceUpDateTimeDisplay() + ':' + '</td></tr>';
			html += '<tr style="height:16px;"><td class="result-hover-comment">' + comment.text + '</td></tr></table>';
		}
		return html;
	}
	
	/**
	* Determines whether or not to show the modified icon
	*/
	this.isModifiedResult = function isModifiedResult() {
		if (this.isModified == true) {
			return '<span id ="modifiedImage" class="result-modified-image"></span>';
		}
		return "";
	}
}
/**
 * The visual display for Acuity
 */
function VisitAcuity() {
	this.display = null;

	/**
	 * Creates the acuity display
	 * @param patient the patient
	 * @return - The HTML string representing the length of stay.
	 */	
	this.create = function(patient) {
		var html = "";
		if(Configuration.acuity && patient.hasRelationship() && patient.encounterId !== 0) {
			if(PatientLists.getActive().isDepartmental() == false) {
				html += '<table><tr><td style="border:0px"><div class="reason truncate" style="width:' + (Columns.visit.width - 12) + 'px; padding-top: 8px"><span style="color:#666666;">'+i18n.ACUITY+': </span><span>' + patient.getAcuity() + '</span></div></td></tr></table>';
			} 
			else {
				html += '<span style="border:0px; padding-top: 8px;"><span style="max-width:' + (Columns.visit.width - 12) + 'px; left:0px;"><span style="color:#666666;">'+i18n.ACUITY+': </span><span>' + patient.getAcuity() + '</span></span></span>';
			}
		}
		return html;
	};

	/**
	 * Sets the cell document object for this display.
	 * @param cell - The cell document object associated to this display.
	 */	
	this.setCell = function(display, patient) {
		if(Configuration.acuity) {
			this.display = display;
		}	
	}

	/**
	 * Gets the display of the acuity.
	 * @param none
	 * @return - The string display representing the length of stay, will be -- if it is empty
	 */	
	this.getDisplay = function() {
		return this.display[0]['innerText'];
	}
}
/**
 * Represents a result
 */
function Result(encounterId, jsonResult) {
    this.encounterId = encounterId;
	if(jsonResult != null){
		this.name = jsonResult.display;
		this.display = jsonResult.value;
		this.unit = jsonResult.unit;
		this.normalcy = jsonResult.normalcy;
		this.normalLow = jsonResult.normalLowRange;
		this.normalHigh = jsonResult.normalHighRange;
		this.criticalLow = jsonResult.criticalLowRange;
		this.criticalHigh = jsonResult.criticalHighRange;
		this.endDtTm = jsonResult.dateTime;
		this.resultComments = jsonResult.resultComments;
		this.id = jsonResult.id;
		this.status = jsonResult.status;
		this.version = jsonResult.version;
		this.isModified = jsonResult.isModified;
		this.type = jsonResult.type;

		//check if the result type is DATE or DATETIME. 
		//If the charted result is time/date/date time/ date time zone we will see the type as DATE in the JSON.
		if(this.type === "DATE" || this.type === "DATETIME") {
			if(jsonResult.hasOwnProperty('dateValueType') && jsonResult.hasOwnProperty('dateInString')) {
				//if the date value type is either DATE_ONLY or DATE_AND_TIME , format the date string accordingly
				if(jsonResult.dateValueType === 1 || jsonResult.dateValueType === 0) {
					var formattedDate = (new Date(jsonResult.dateInString)).format(DateFormats.DATE_FORMAT_SHORTDATE2).concat( " ");
					this.display = this.display.replace(jsonResult.dateInString, formattedDate);
					var tempString = this.display.slice(jsonResult.dateInString.length, this.display.length);
					this.display = formattedDate.concat(tempString);
				}
			}
		}
	}else{
		this.display = "--";
		this.unit = "";
		this.normalcy = "";
		this.normalLow = "";
		this.normalHigh = "";
		this.criticalLow = "";
		this.criticalHigh = "";
		this.endDtTm = "";
		this.resultComments = "";
		this.type = "";
	}

    this.getDisplay = function getCustomDisplay(){
        return this.getValue(0)
    }
	
	/**
	 * Returns the name of the result.
	 * @param none
	 * @return The HTML representing the name of the new result.
	 */	
	this.getName = function getResultName() {
		var html = '<span class="result-display">' + this.name + '</span>';
		return html;
	}
	
	/**
	 * Returns the name of the result.
	 * @param none
	 * @return The HTML representing the name of the new result with color.
	 */
	this.getResultName = function getResultName() {
		var html = "";
        if(this.isCritical()) {
            html += '<span class="result-display-critical">' + this.name + '</span>';
        } else {
        	html += '<span class="result-display">' + this.name + '</span>';	
        }
        return html;
	}

    this.getDisplayWithoutUnits = function getCustomDisplay(){
        return this.getValueWithoutUnits(0)
    }
    
    //The following variables are used to add the font-size and a class to truncate non-numeric values.
    var customStyle = '';
    var endDiv = '';
    
    /**
     * Returns the result display values.
     * @param none
     * @returns The HTML with the font-size and truncate class (for non-numeric values) in it.
     */
    this.getCustomDisplayWithoutUnits = function getCustomColumnsDisplay() {
    	var tempCustomValue = this.display;
		tempCustomValue = tempCustomValue.replace(/\./g, '');
		tempCustomValue = tempCustomValue.replace(/\,/g, '');
		var largeNumber = false;
		if($.isNumeric(tempCustomValue)) {
			if(tempCustomValue.length > 4) {
				largeNumber = true;
			}
			if(tempCustomValue.length > 6) {
				return "ERR";
			}
		}
    	if(this.type == 'CALCULATION' || this.type == 'NUMERIC')  {
    		if(largeNumber == true) {
    			customStyle = '<div style="display:inline-block; font-size:11px; font-weight:inherit;">';
    		}
    		else {
    			customStyle = '<div style="display:inline-block; font-size:14px; font-weight:inherit;">';
    		}
    	} else {
    		return this.getTruncatedValue(0, 53);
    	}
    	return this.getValueWithoutUnits(0);
    }
	
	/**
	 * Return the hover text for a Result
	 * @param - none.
	 */
	this.getHoverText = function getCustomHoverText() {
		var html = '<tr style="height:16px;"><td class="hover-table-label">' + i18n.DISPLAY + ":" + '</td>';
		html += '<td class="hover-table">' + this.name + " " + this.getDisplay() + '</td></tr>';
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.NORMAL_RANGE + ":" + '</td>';
		html += '<td class="hover-table">' + this.getNormalcyRange() + '</td></tr>';
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.DATE_TIME + ":" + '</td>';
		html += '<td class="hover-table">' + this.getFaceUpDateTimeDisplay() + '</td></tr>';
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.STATUS + ":" + '</td>';
		html += '<td class="hover-table">' + this.status + '</td></tr>';
		if(this.resultComments.length > 0) {
			var comment = this.resultComments[0];
			var dateTime = new CareDate(this.encounterId, comment.dateTime);
			html += '<table class="hover-table">';
			html += '<tr style="height:20px;"><td class="result-hover-comment-header">' + i18n.COMMENT_BY + ": ";
			html += comment.personnelName + '; ' + dateTime.getFaceUpDateTimeDisplay() + ':' + '</td></tr>';
			html += '<tr style="height:16px;"><td class="result-hover-comment">' + comment.text + '</td></tr></table>';
		}
		return html;
	}
	
	/**
	 * Return the hover text for a high risk.  Slightly different from getHoverText because this contains
	 * the name of the result
	 * @param - none.
	 */
	this.getCareResultHoverText = function getCareResultHoverText(isIsolationResult) {
		var html = '<table class="hover-table">';
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.DISPLAY + ":" + '</td>';
		if( isIsolationResult == null || isIsolationResult === false){
			html += '<td class="hover-table">' + this.name + " " + this.getDisplay() + '</td></tr>';
		}else{
			html += '<td class="hover-table">' + this.display + '</td></tr>';
		}
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.NORMAL_RANGE + ":" + '</td>';
		html += '<td class="hover-table">' + this.getNormalcyRange() + '</td></tr>';
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.DATE_TIME + ":" + '</td>';
		html += '<td class="hover-table">' + this.getFaceUpDateTimeDisplay() + '</td></tr>';
		html += '<tr style="height:16px;"><td class="hover-table-label">' + i18n.STATUS + ":" + '</td>';
		html += '<td class="hover-table">' + this.status + '</td></tr>';
		html += '</table>';
		if(this.resultComments.length > 0) {
			var comment = this.resultComments[0];
			var dateTime = new CareDate(this.encounterId, comment.dateTime);
			html += '<table class="hover-table">';
			html += '<tr style="height:20px;"><td class="result-hover-comment-header">' + i18n.COMMENT_BY + ": ";
			html += comment.personnelName + '; ' + dateTime.getFaceUpDateTimeDisplay() + ':' + '</td></tr>';
			html += '<tr style="height:16px;"><td class="result-hover-comment">' + comment.text + '</td></tr></table>';
			html += '</table>';
		}
		return html;
	}
	
	/**
	 * Return the hover text for a high risk.  Slightly different from getHoverText because this contains
	 * the name of the result
	 * @param - none.
	 */
	this.getCareResultDrillDownText = function getCareResultDrillDownText() {
		var html = '<td class="high-risk-value-display">' + this.name + " " + this.getDisplay() + '</td></tr>';
		if (this.getNormalcyRange() != "--") {
			html += '<td class="high-risk-value">' + this.getNormalcyRange() + '</td></tr>';
		}
		html += '<td class="high-risk-value">' + this.getFaceUpDateTimeDisplay() + '</td></tr>';
		html += '<td class="high-risk-value">' + this.status + '</td></tr>';
		if(this.resultComments.length > 0) {
			var comment = this.resultComments[0];
			var dateTime = new CareDate(this.encounterId, comment.dateTime);
			html += '<tr style="height:20px;"><td class="high-risk-drill-down-comment-header">' + i18n.COMMENT_BY + ": ";
			html += comment.personnelName + '; ' + dateTime.getFaceUpDateTimeDisplay() + ':' + '</td></tr>';
			html += '<tr style="height:16px;"><td class="high-risk-drill-down-comment">' + comment.text + '</td></tr>';
		}
		return html;
	}
	

    /**
     * Return the image and coloring for the custom column
     * @param index - the index of the custom column.  Not currently used
     */
    this.getTruncatedValue = function getCustomValue(index, availableWidth) {
		var html = "";
		var dispWidth;
		if (this.isModified == true) {
			dispWidth = availableWidth - 31;
		} else {
			dispWidth = availableWidth - 18;
		}
		
        if(this.isCritical()) {
            html += '<span id ="criticalImage' + index + '" class="result-critical-image"></span>';
            html += '<span class="result-value-critical truncate" style="width:' + dispWidth + 'px">' + this.display + '</span>';
        }
        else if(this.normalcy == "HIGH") {
            html += '<span id ="highImage' + index + '" class="result-high-image"></span>';
            html += '<span class="result-value-high truncate" style="width:' + dispWidth + 'px">' + this.display + '</span>';
        }
        else if(this.normalcy == "LOW") {
            html += '<span id ="lowImage' + index + '" class="result-low-image"></span>';
            html += '<span class="result-value-low truncate" style="width:' + dispWidth + 'px">' + this.display + '</span>';
        }
        else if(this.normalcy == "ABNORMAL") {
            html += '<span id ="abnormalImage' + index + '" class="result-abnormal-image"></span>';
            html += '<span class="result-value-abnormal truncate" style="width:' + dispWidth + 'px">' + this.display + '</span>';
        }
        else {
            html += '<span class="result-value-normal truncate" style="width:' + dispWidth + 'px">' + this.display + '</span>';
        }

        html += '<span class="result-units">' + this.unit + '</span>';
		if (this.isModified == true) {
			html += '<span id ="modifiedImage' + index + '" class="result-modified-image"></span>';
		}
        return html;
    };

    /**
     * Return the image and coloring for the custom column
     * @param index - the index of the custom column.  Not currently used
     */
    this.getValue = function getCustomValue(index) {
		var html = "";
		if(this.isCritical()) {
            html += '<span style="margin-left: 5px; padding-left: 5px;" id ="criticalImage' + index + '" class="result-critical-image"></span>';
            html += '<span class="result-value-critical" >' + this.display + '</span>';
        }
        else if(this.normalcy == "HIGH") {
            html += '<span id ="highImage' + index + '" class="result-high-image"></span>';
            html += '<span class="result-value-high" >' + this.display + '</span>';
        }
        else if(this.normalcy == "LOW") {
            html += '<span id ="lowImage' + index + '" class="result-low-image"></span>';
            html += '<span class="result-value-low" >' + this.display + '</span>';
        }
        else if(this.normalcy == "ABNORMAL") {
            html += '<span style="padding-left: 4px;" id ="abnormalImage' + index + '" class="result-abnormal-image"></span>';
            html += '<span class="result-value-abnormal" >' + this.display + '</span>';
        }
        else {
            html += '<span class="result-value-normal" >' + this.display + '</span>';
        }

        html += '<span class="result-units">' + this.unit + '</span>';
		if (this.isModified == true) {
			html += '<span id ="modifiedImage' + index + '" class="result-modified-image"></span>';
		}
        return html;
    };
    /**
     * Get the normal ranges and end date time of the event
     * @return {string} - the html containing the normalcy range and end date time
     */
    this.getNormalcyRange = function getNormalcyRange(){
        // var html = '<tr><td class="hover-table-label"><span">(</span>';
		if (this.normalLow == null && this.normalHigh == null || this.normalHigh == " " && this.normalLow == " ") {
			return "--"
		}
		var html = '<span">(</span>';
        if(this.normalLow != " "){
            html += '<span class="">' + this.normalLow + ' - </span>';
        }
        if(this.normalHigh != " "){
            html += '<span class="">' + this.normalHigh + '</span>';
        }
		html += '<span>)</span>';
        return html;
    }
	
	/**
	*	Return the html display for a care result
	*/
	this.getFaceUpDateTimeDisplay = function getFaceUpDateTimeDisplay() {
		if (this.endDtTm == null || this.endDtTm == undefined || isNaN(this.endDtTm)) {
			return "--";
		}
		var html = "";
		var careDate = new CareDate(this.encounterId, this.endDtTm);
		html += '<span class="">' + careDate.getFaceUpTimeDateDisplay() + '</span>';
		return html;
	}

    /**
     * Return the image and coloring for the custom column
     * @param index - the index of the custom column.  Not currently used
     */
    this.getValueWithoutUnits = function getCustomValue(index) {
		var html = '';
        if(this.isCritical()) {
            html += '<span id ="criticalImage' + index + '" class="result-critical-image"></span>';
            html += '<span class="result-value-critical">' + customStyle + this.display + endDiv+ '</span>';
        }
        else if(this.normalcy == "HIGH") {
            html += '<span id ="highImage' + index + '" class="result-high-image"></span>';
            html += '<span class="result-value-high">' + customStyle + this.display + endDiv + '</span>';
        }
        else if(this.normalcy == "LOW") {
            html += '<span id ="lowImage' + index + '" class="result-low-image"></span>';
            html += '<span class="result-value-low">' + customStyle + this.display + endDiv + '</span>';
        }
        else if(this.normalcy == "ABNORMAL") {
            html += '<span id ="abnormalImage' + index + '" class="result-abnormal-image"></span>';
            html += '<span class="result-value-abnormal">' + customStyle + this.display + endDiv + '</span>';
        }
        else {
            html += '<span class="result-value-normal">' + customStyle + this.display + endDiv + '</span>';
        }
		
		if (this.isModified == true) {
			html += '<span id ="modifiedImage' + index + '" class="result-modified-image"></span>';
		}
        return html;
    };


    /**
     * Determines if this result is critical or not.
     * @param none
     * @return True if it is a critical result, false if not.
     */
    this.isCritical = function isCustomResultCritical() {
        if(this.normalcy == "CRITICAL" || this.normalcy == "EXTREMEHIGH" ||
            this.normalcy == "PANICHIGH" || this.normalcy == "EXTREMELOW" ||
            this.normalcy == "PANICLOW" || this.normalcy == "VABNORMAL" ||
            this.normalcy == "POSITIVE") {
            return true;
        }
        return false;
    }
}

/**
 * Represents a patient's reasonForVisit
 */
function ReasonForVisit(encounterId, dateTime) {
	this.encounterId = encounterId;
	this.dateTime = new Date(dateTime);
	this.displays = [];
	
	/**
	 * Adds a reasonForVisit display.
	 */
	this.addDisplay = function addReasonForVisitDisplay(display) {
		this.displays.push(display);
	};
	
	/** 
	 * @return - Display for reason for Visit
	 */
	this.getDisplays = function getDisplays() {
		if (this.displays == null) {
			return "--";
		}
		var reasonForVisitDisplay = "";
		for(var i = 0; i < this.displays.length; i++) {
			if(reasonForVisitDisplay != "") {
				reasonForVisitDisplay += ", ";
			}
			reasonForVisitDisplay += this.displays[i];
		}
		return reasonForVisitDisplay;
	};
};

/**
 * Represents a patient's ventilator
 */
function Ventilator(encounterId, currentStartDateTime, orderComment, clinicalDisplayLine) {
	this.encounterId = encounterId;
	this.volumeDisplay = "";
	this.rateDisplay = "";
	this.modeDisplay = "";
	this.currentStartDateTime = currentStartDateTime;
	this.orderComment = orderComment;
	this.clinicalDisplayLine = clinicalDisplayLine;
	
	/**
	 * Adds a ventilator volume display.
	 */
	this.addVolumeDisplay = function addVolumeDisplay(display) {
		this.volumeDisplay = display;
	};
	
	/**
	 * Adds a ventilator rate display.
	 */
	this.addRateDisplay = function addRateDisplay(display) {
		this.rateDisplay = display;
	};
	
	/**
	 * Adds a ventilator mode display.
	 */
	this.addModeDisplay = function addModeDisplay(display) {
		this.modeDisplay = display;
	};
	
	/**
	 * @return - Display for vent volume
	 */
	this.getVolumeDisplay = function getVolumeDisplays() {
		if (this.volumeDisplay == null) {
			return "--";
		}
		if (this.volumeDisplay == "") {
			return "--";
		}
		return this.volumeDisplay;
	};
	
	/**
	 * @return - Display for vent rate
	 */
	this.getRateDisplay = function getRateDisplays() {
		if (this.rateDisplay == null) {
			return "--";
		}
		if (this.rateDisplay == "") {
			return "--";
		}
		return this.rateDisplay;
	};
	
	/**
	 * @return - Display for vent mode
	 */
	this.getModeDisplay = function getModeDisplays() {
		if (this.modeDisplay == null) {
			return "--";
		}
		if (this.modeDisplay == "") {
			return "--";
		}
		return this.modeDisplay;
	};
	
	/**
	 * @return - CurrentStartDateTime for vent volume
	 */
	this.getCurrentStartDateTime = function getCurrentStartDateTime() {
		if (this.currentStartDateTime == null) {
			return "--";
		}
		var careDate = new CareDate(this.encounterId, this.currentStartDateTime);
		return careDate.getFaceUpDateTimeDisplay();
	};
	
	/**
	 * @return - OrderComment for vent volume
	 */
	this.getOrderComment = function getOrderComment() {
		if (this.orderComment == null) {
			return "--";
		}
		return this.orderComment;
	};
	
	/**
	 * @return - ClinicalDisplayLine for vent volume
	 */
	this.getClinicalDisplayLine = function getClinicalDisplayLine() {
		if (this.clinicalDisplayLine == null) {
			return "--";
		}
		return this.clinicalDisplayLine;
	};
};

/**
 * Represents a date used in patient care.
 * Zero and negative are valid millisecond values.
 * Null and undefined may be passed in as milliseconds which will result in -- as the display
 * Can pass in dateTz if it is necessary for DST precision
 */
function CareDate(encounterId, milliseconds, dateTz) {
	this.encounterId = encounterId;
	if(milliseconds != undefined && milliseconds != null && isNaN(milliseconds) == false) {

		if(dateTz != null && moment.tz.zoneExists(dateTz)) {
			var mDate = moment.tz(milliseconds, dateTz);
			this.date = new Date(mDate.year(), mDate.month(), mDate.date(), mDate.hours(), mDate.minutes(), mDate.seconds(), mDate.milliseconds());
		} 
		else {
			this.date = moment(milliseconds).toDate();
		}
		if(isNaN(this.date)) {
			this.date = null;
		}
	}
	else {
		this.date = null;
	}
	/**
	 * Returns the user friendly display of this date compared to the current date.
	 * @param - none
	 * @return - A string of the face up date display.
	 */
	this.getFaceUpDateDisplay = function getCareDateFaceUpDisplay() {
		if(this.date == null || CareCompass.now == null) {
			return "--";
		}
		var days = this.getDaysFromNow();
		switch(days) {
			case 0: return i18n.TODAY;
			case -1: return i18n.YESTERDAY;
			case 1: return i18n.TOMORROW;
			case -2: return i18n.TWO_DAYS_AGO;
			case 2: return i18n.IN_2_DAYS;
			case -3: return i18n.THREE_DAYS_AGO;
			case 3: return i18n.IN_3_DAYS;
		}
		var format = "";
		if(CareCompass.now.getUTCFullYear() != this.date.getUTCFullYear()) {
			format = DateFormats.DATE_FORMAT_MEDIUMDATE;
		}
		else {
			format = DateFormats.DATE_FORMAT_SHORTDATE3;
		}
		return this.date.format(format);
	};
	
	/**
	 * Returns the user friendly display of this date and time compared to the current date.
	 * @param - none
	 * @return - A string of the face up date and time display.
	 */
	this.getFaceUpDateTimeDisplay = function getCareDateFaceUpDateTimeDisplay() {
		if(this.date == null || CareCompass.now == null) {
			return "--";
		}
		var days = this.getDaysFromNow();
		var display = "";
		if(days <= 3 && days >= -3) {
			switch(days) {
				case 0: display = i18n.TODAY;
					break;
				case -1: display = i18n.YESTERDAY;
					break;
				case 1: display = i18n.TOMORROW;
					break;
				case -2: display = i18n.TWO_DAYS_AGO;
					break;
				case 2: display = i18n.IN_2_DAYS;
					break;
				case -3: display = i18n.THREE_DAYS_AGO;
					break;
				case 3: display = i18n.IN_3_DAYS;
					break;
				default:
					break;
			}
			return display += " " + this.date.format(DateFormats.DATE_FORMAT_MILITARY_TIME);
		}
		var format = "";
		if(CareCompass.now.getUTCFullYear() != this.date.getUTCFullYear()) {
			format = DateFormats.DATE_FORMAT_LONGDATETIME4;
			return this.date.format(format);
		}
		format = DateFormats.DATE_FORMAT_SHORTDATETIME;
		return this.date.format(format);
	}

	/**
	 * Returns the user friendly display of this time and date compared to the current date.
	 * @param - none
	 * @return - A string of the face up time and date display.
	 */
	this.getFaceUpTimeDateDisplay = function getCareDateFaceUpTimeDateDisplay() {
		if(this.date == null || CareCompass.now == null) {
			return "--";
		}
		var days = this.getDaysFromNow();
		var display = "";
		if(days <= 3 && days >= -3) {
			display = this.date.format(DateFormats.DATE_FORMAT_MILITARY_TIME)+" ";
			switch(days) {
				case 0: display += i18n.TODAY;
					break;
				case -1: display += i18n.YESTERDAY;
					break;
				case 1: display += i18n.TOMORROW;
					break;
				case -2: display += i18n.TWO_DAYS_AGO;
					break;
				case 2: display += i18n.IN_2_DAYS;
					break;
				case -3: display += i18n.THREE_DAYS_AGO;
					break;
				case 3: display += i18n.IN_3_DAYS;
					break;
				default:
					break;
			}
			return display;
		}
		var format = "";
		if(CareCompass.now.getUTCFullYear() != this.date.getUTCFullYear()) {
			format = DateFormats.DATE_FORMAT_LONGDATETIME4;
			return this.date.format(format);
		}
		format = DateFormats.DATE_FORMAT_SHORTDATETIME;
		return this.date.format(format);
	}
	
	/**
	 * Returns the numeric date display in the internationalized "mm/dd/yyyy" format
	 * @param - none
	 * @return - A string of the display.
	 */
	this.getFullDisplay = function getCareDateFullDisplay() {
		if(this.date == null) {
			return "--";
		}
		return this.date.format(DateFormats.DATE_FORMAT_SHORTDATE2);
	}
	
	/**
	 * Returns the number of days from now.  If the date is in the future the number will be positive, if it is in the past it will be negative.
	 * @param - none
	 * @return - The numeric number of days from the current date. 
	 */	
	this.getDaysFromNow = function getCareDateDaysFromNow() {
		return this.getDaysFrom(new Date());
	}
	
	/**
	 * Returns the number of days from an input date.  If this date is in the future compared to the input date the number will be positive, if it is in the past it will be negative.
	 * @param - none
	 * @return - The numeric number of days from the current date.
	 */		
	this.getDaysFrom = function getCareDateDaysFrom(date) {
		if(this.date == null || date == null) {
			return 0;
		}
		var thisMilliseconds = new Date(this.date.getFullYear(), this.date.getMonth(), this.date.getDate());
		var dateMilliseconds = new Date(date.getFullYear(), date.getMonth(), date.getDate());
		
		var milliseconds =  thisMilliseconds - dateMilliseconds;
		var days = (milliseconds / 1000 / 60 / 60 / 24);
		return days;
	};
	
	/**
	 * Returns the Date object for this Care Date.
	 * @param - none
	 * @return - A Date Object.
	 */
	this.getDate = function getDateForCareDate() {
		return this.date;
	};
}

/**
 * Represents a task the user needs to accomplish for a given patient's encounter.
 */
function Task(data) {
	this.encounterId = data.encounterId;
	this.id = data.id;
	this.type = data.type;
	this.data = data;
	this.orderIds = [];
	
	/**
	 * This function will give unique orderIds of containers.
	 */
	this.getUniqueOrderIds = function getHoverUnqOrderIds() {	

		for(var i = 0; i < this.data.containers.length; i++) {
			var k = 0;
			if(this.orderIds.length == 0) {
				this.orderIds.push(this.data.containers[i].orderId);
			} else {
				for(var j = 0; j < this.orderIds.length; j++) {
					if(this.orderIds[j] == this.data.containers[i].orderId){
						k = 1;
					}
				}
				if(k == 0) {
					this.orderIds.push(this.data.containers[i].orderId);
				}
			}
		}
	},

	/**
	* This function will return the HTML needed to display task information.  Currently, this function
	* only works for tasks with containers.
	*/
	this.getHoverDisplay = function getHoverDisplay() {
		if (this.data.containers != null) {
			var html = "";
			html += '<table class="container-hover-table">';  
			var previousOrderId = null;
			if(this.orderIds.length == 0) {
				this.getUniqueOrderIds();
			}
			for(var j = 0; j < this.orderIds.length; j++) {
			var previousTaskId = null;
			for (var i = 0; i < this.data.containers.length; i++) {
				var padding = null;
				var firstContainerColor = null;
				var secondContainerColor = null;
				if(this.orderIds[j] == this.data.containers[i].orderId){	
				
				if(previousTaskId == null){
					html += '<tr><td class="container-hover-display-row"><span>'+this.data.containers[i].orderMnemonic+'</span>';
					html += '</td></tr>';
				}
				html += '<tr><td class="container-hover-container-row">';
				if (this.data.containers[i].color1 != null) {
				html += '<span style=" vertical-align:middle;">';
				firstContainerColor =  this.data.containers[i].color1;
				secondContainerColor = this.data.containers[i].color2;
				
					var width = "16px";
					if (firstContainerColor != null && secondContainerColor != null) {
						width = "8px";
					}
					html += '<span style= "display: inline-block; vertical-align:middle; background: rgb(' + firstContainerColor[0] + ',' + firstContainerColor[1] + ',' + firstContainerColor[2] + '); width:' + width + '; height: 16px"></span>';
					if (this.data.containers[i].color2 != null) {
						html += '<span style= "display: inline-block; vertical-align:middle; background: rgb(' + secondContainerColor[0] + ',' + secondContainerColor[1] + ',' + secondContainerColor[2] + '); width:' + width + '; height: 16px"></span>';
					}	
				}
				if(firstContainerColor == null && secondContainerColor == null){
					padding = "22px";
				} else {
					padding = "6px";
				}
				
				html += '<span style="padding-left: ' + padding + '; vertical-align:middle;">' + this.data.containers[i].display + "   " ;
				html += this.data.containers[i].volume;
				html += this.data.containers[i].units + "   ";
				html += '</span>';
				if (this.data.containers[i].specialInstructions != null && this.data.containers[i].specialInstructions != "") {
					html += '<span style="vertical-align:middle;">' + this.data.containers[i].specialInstructions + '</span>';
				}
				html += '</span></td></tr>';
				
				previousTaskId	= this.data.containers[i].taskId;
			}
			}
			}
			html += '</table>';
		}
		return html;
	},
	
	
	/**
	 * Returns the task display.
	 * @param - none
	 */	
	this.getDisplay = function getTaskDisplay() {
		var display = "";
		if (this.data.containers != null && this.data.containers.length > 0) {
			return i18n.COLLECT + " " + this.createHTMLSafe(this.data.orderDisplay);
		}
		else if (this.data.orderDisplay != null && this.data.orderDisplay != "") {
			return this.createHTMLSafe(this.data.orderDisplay);
		}
		else if (this.data.taskDisplay != null && this.data.taskDisplay != "") {
			return this.createHTMLSafe(this.data.taskDisplay);
		}
		return display;
	},

	/**
	 * Returns the task status display.
	 * @param - none
	 */	
	this.getStatusDisplay = function getTaskStatusDisplay() {
		var statusDisplay = "";
		if (this.data.status != null && this.data.status != "") {
			return this.createHTMLSafe(this.data.status);
		}
		return statusDisplay;
	},
	
	/**
	 * Determines if this is an VALIDATION task.
	 * @param - none
	 * @return - True if the task is VALIDATION, false if not.
	 */	
	this.isInValidation = function isTaskInValidation() {
		if(this.data.statusMeaning === "VALIDATION") {
			return true;
		}
		return false;
	},
	
	/**
	 * Returns the task detail display.
	 * @param - none
	 */	
	this.getDetailDisplay = function getTaskDetailDisplay() {
		var display = "";
		if (this.data.containers != null && this.data.containers.length > 0) {
			if (this.data.scheduledDateTime != null) {
				var careDate = new CareDate(this.data.encounterId, this.data.scheduledDateTime);
				return this.createHTMLSafe(careDate.getFaceUpDateTimeDisplay());
			}
		}
		else if(this.data.detail != null) {
			if (this.data.taskDisplay == null || this.data.orderDisplay == null || this.data.taskDisplay == "" || this.data.orderDisplay == "") {
				return this.createHTMLSafe(this.data.detail);
			}
			else if (this.data.taskDisplay == this.data.orderDisplay) {
				return this.createHTMLSafe(this.data.detail);
			}
			return this.createHTMLSafe(this.data.taskDisplay + " " + this.data.detail);
		}
		else {
			if (this.data.taskDisplay == null || this.data.orderDisplay == null || this.data.taskDisplay == "" || this.data.orderDisplay == "") {
				return this.createHTMLSafe(display);
			}
			else if (this.data.taskDisplay == this.data.orderDisplay) {
				return this.createHTMLSafe(display);
			}
			return this.createHTMLSafe(this.data.taskDisplay);
		}
		return display;
	},

	/**
	 * Returns the task type display.
	 * @param - none
	 */	
	this.getTypeDisplay = function getTaskTypeDisplay() {
		var display = "";
		if(this.type === "MEDICATION") {
			display = i18n.MEDICATION;
		}
		if(this.type === "PATIENTCARE") {
			display = i18n.PATIENT_CARE;
		}
		if(this.type === "ASSESSMENT") {
			display = i18n.ASSESSMENT;
		}
		if(this.type === "OTHER") {
			display = i18n.OTHER;
		}
		return display;
	},
	
	/**
	 * Returns a flag indicating if a task is a specimen collection task.
	 * @param None.
	 */
	this.isSpecimenCollect = function () {
        if (this.data.containers != null && this.data.containers.length > 0) {
            return true;
        }
        return false;
	},

	/**
	 * Returns the containers for a collection task if a task is a specimen collection task.
	 * @param None.
	 * @return containers - the containers of the collection task.
	 */
	this.getSpecimenContainers = function () {
		if (this.data.containers != null && this.data.containers.length > 0) {
			return this.data.containers;
		}
	},

	/**
	 * Determines if this is an overdue task.
	 * @param - none
	 * @return - True if the task is overdue, false if not.
	 */	
	this.isOverdue = function isTaskOverdue() {
		if(this.isInterdisciplinary()) {
			return false;
		}
		if(this.data.statusMeaning === "OVERDUE") {
			return true;
		}
		return false;
	},
	
	/**
	 * Determines if this is a scheduled task.
	 * @param - none
	 * @return - True if the task is scheduled, false if not.
	 */	
	this.isScheduled = function isTaskScheduled() {
		if(this.isInterdisciplinary()) {
			return false;
		}
		if(this.isOverdue()) {
			return false;
		}
		if (this.data.classMeaning === "SCH") {
		    return true;
		}
		else {
		    return false;
		}
	},
	
	/**
	 * Determines if this is a unscheduled task.
	 * @param - none
	 * @return - True if the task is unscheduled, false if not.
	 */	
	this.isUnscheduled = function isTaskUnscheduled() {
		if(this.isInterdisciplinary()) {
			return false;
		}
		if(this.data.classMeaning === "NSCH") {
			return true;
		}
		return false;
	},
	
	   /**
     * Determines if this is a Continuous task.
     * @param - none
     * @return - True if the task is Continuous, false if not.
     */ 
    this.isContinuous = function isTaskContinuous() {
        if(this.isInterdisciplinary()) {
            return false;
        }
        if(this.data.classMeaning === "CONT") {
            return true;
        }
        return false;
    },
    
   /**
     * Determines if this is a PRN task.
     * @param - none
     * @return - True if the task is PRN, false if not.
     */ 
    this.isPRN = function isTaskPRN() {
        if(this.isInterdisciplinary()) {
            return false;
        }
        if(this.data.classMeaning === "PRN") {
            return true;
        }
        return false;
    },
    
	/**
	 * Determines if this is an interdisciplinary task.
	 * @param - none
	 * @return - True if the task is interdisciplinary, false if not.
	 */	
	this.isInterdisciplinary = function isTaskInterdisciplinary() {
		if(this.type == "INTERDISCIPLINARY") {
			return true;
		}
		return false;
	},
	
	/**
	 * Determines if this task can be charted as done.
	 * @param - none
	 * @return - True if the task supports chart done, false if not.
	 */	
	this.canChartDone = function canChartTaskDone() {
		return this.chartingActionExists("CHART_DONE");
	},
	
	/**
	 * Determines if this task can be charted as not done.
	 * @param - none
	 * @return - True if the task is supports chart not done, false if not.
	 */	
	this.canChartNotDone = function canChartTaskNotDone() {
		return this.chartingActionExists("CHART_NOT_DONE");
	},
	
	/**
	 * Determines if this task can be have labels printed
	 * @param - none
	 * @return - True if the task is supports chart print label, false if not.
	 */	
	this.canPrintLabel = function canPrintTaskLabel() {
		if(this.data.containers != null && this.data.containers.length > 0) {
			return true;
		}
		return false;
	},

	/**
	 * Determines if this task can be documented against.
	 * @param - none
	 * @return - True if the task is supports documentation, false if not.
	 */	
	this.canDocument = function canDocumentTask() {
		return this.chartingActionExists("CHART");
	}
	
	/**
	 * Determines if the input charting action exists for this task.
	 * @param action - The charting action string.
	 * @return - True if the action exists, false if not.
	 */	
	this.chartingActionExists = function taskChartingActionExists(action) {
		for(var i = 0; i < this.data.chartingActions.length; i++) {
			if(this.data.chartingActions[i] == action) {
				return true;
			}		
		}
		return false;
	},
	
	/**
	 * Returns the string representing the order comment associated to this task.
	 * @param none
	 * @return - The string of the comment, will be empty if none exists.
	 */	
	this.getOrderComments = function getTaskOrderComments() {
		return this.data.orderComments;
	},
		
    
	/**
	 * Returns the string representing the orders  of type urgent.
	 * @param none
	 * @return - The string of the orderDisplays for urgent orders, will be empty if none exists.
	 */	
	this.getUrgentOrders = function getUrgentOrders() {
		
		if(this.data.urgentOrderDisplays != null) {
		
			var html = '<table class="hover-comment-table">';
			for (var i = 0; i < this.data.urgentOrderDisplays.length; i++) {
				html += '<tr><td class="hover-comment-table">' + this.createHTMLSafe(this.data.urgentOrderDisplays[i]) + '</td></tr>';
			}	
			html += '</table>';
			return html;
		}
		return "";
	},
	
	/**
	 * Returns the string representing the order special instructions associated to this task.
	 * @param none
	 * @return - The string of the special instructions, will be empty if none exists.
	 */	
	this.getInstructions = function getTaskInstructions() {
		if(this.data.instructions == null) {
			return "";
		}
		return this.createHTMLSafe(this.data.instructions);
	},

	/**
	 * Returns the string representing the orders  of priority timedStudy.
	 * @param none
	 * @return - The string of the orderDisplays for timedStudy orders, will be empty if none exists.
	 */	
	this.getTimedStudyOrders = function getTimedStudyOrders() {
		
		if(this.data.timedStudyOrderDisplays != null ) {
		
			var html = '<table class="hover-comment-table">';
			for (var i = 0; i < this.data.timedStudyOrderDisplays.length; i++) {
				html += '<tr><td class="hover-comment-table">' + this.createHTMLSafe(this.data.timedStudyOrderDisplays[i]) + '</td></tr>';
			}	
			html += '</table>';
			return html;
		}
		return "";
	},
	
	/**
	 * Determines if this task priority is time study.
	 * @param none
	 * @return - True if the task priority is time study, false if not.
	 */	
	this.isTimeStudy = function isTaskTimeStudy() {
		if(this.data.timedStudyOrderDisplays.length > 0) {
			return true;
		}	
		return false;
	},
	
	/**
	 * Determines if this task is urgent.
	 * @param none
	 * @return - True if the task is urgent, false if not.
	 */	
	this.isUrgent = function isTaskUrgent() {
		if(this.data.urgent == null) {
			return false;
		}
		return this.data.urgent;
	},

    /**
     * Creates an HTML Safe String.
     * @param unsafeString: The string that potentially has elements that aren't HTML safe
     * @return The HTML safe version of the string passed in
     */
    this.createHTMLSafe = function createHTMLSafe(unsafeString) {
        return String(unsafeString).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    },

	/**
	 * Determines if the task is an AdHoc task and status is INPROCESS OR VALIDATION OR PENDING.
	 * @param none
	 * @return - True if the task is an ADHOC task and it's status is INPROCESS OR VALIDATION OR PENDING, false if not
	 */
	this.isAdhocTask = function isTaskADHOC() {
	    if(this.isInterdisciplinary()) {
		    return false; 
		}
		 // CDF_Meaning will be ADHOC in code set 6025 for TASK_CLASS_CD. CDF_Meaning will be INPROCESS OR VALIDATION OR PENDING in code set 79 for TASK_STATUS_CD.
		 // return TRUE only if the Class CD is ADHOC and status is INPROCESS OR VALIDATION OR PENDING		 
		if(this.data.classMeaning === "ADHOC" && (this.data.statusMeaning === "INPROCESS" || this.data.statusMeaning === "VALIDATION" || this.data.statusMeaning === "PENDING")) {
			return true;
		}
		return false;
	 }
}

/**
 * Represents the numeric counts for Medication, Patient Care, Assessment, and Other tasks for a patient's encounter.
 */
function TaskCount(encounterId) {
	this.encounterId = encounterId;
	this.total = 0;
	this.meds = 0;
	this.patientCare = 0;
	this.assessment = 0;
	this.other = 0;
	this.prn = 0;
	this.continuous = 0;
	this.prnMeds = 0;
	
	/**
	 * Adds the input number of medication tasks to the counts.
	 * @param count - The number to add.
	 */	
	this.countMeds = function countMeds(count) {
		this.meds += count;
		this.total += count;
	}
	
	/**
	 * Adds the input number of patient care tasks to the counts.
	 * @param count - The number to add.
	 */	
	this.countPatientCare = function countPatientCare(count) {
		this.patientCare += count;
		this.total += count;
	}
	
	/**
	 * Adds the input number of assessment tasks to the counts.
	 * @param count - The number to add.
	 */	
	this.countAssessment = function countAssessment(count) {
		this.assessment += count;
		this.total += count;
	}
	
	/**
	 * Adds the input number of other tasks to the counts.
	 * @param count - The number to add.
	 */	
	this.countOther = function countOther(count) {
		this.other += count;
		this.total += count;
	},
	
    /**
     * Adds the input number of PRN tasks to the counts.
     * @param count - The number to add.
     */ 
    this.countPRN = function countPrn(count) {
        this.prn += count;
    }

    /**
     * Adds the input number of continuous tasks to the counts.
     * @param count - The number to add.
     */ 
    this.countContinuous = function countContinuous(count) {
        this.continuous += count;
    }

    /**
     * Adds the input number of PRN tasks to the counts.
     * @param count - The number to add.
     */ 
    this.countPrnMeds = function countPrnMeds(count) {
        this.prnMeds += count;
    }

};

/**
 * Represents the numeric counts for Medication, Patient Care, Assessment, and Other tasks for a patient's encounter.
 */
function TimeDisplay(timeToDisplay) {
	this.years = timeToDisplay.years;
	this.months = timeToDisplay.months;
	this.weeks = timeToDisplay.weeks;
	this.days = timeToDisplay.days;
	this.hours = timeToDisplay.hours;
	this.minutes = timeToDisplay.minutes;
	this.birthPrecFlag = timeToDisplay.birthPrecFlag;
	
	/**
	* string to pass to getDisplayFormat method that determines the precision of date display
	*/
	var displayModeString = "";

	/**
	* Enum to hold values for birth prec flag 
	*/
	var birthPrecFlagEnum = {
			"PreciseToDateNoBirthTime" : 0,
			"PreciseToFullDateTime" : 1,
			"PreciseToMonth" : 2,
			"PreciseToYear" : 3
		};

	/**
	 * Returns the display of the length of time based on the number of years, months, weeks, days, hours and minutes.
	 * @param - display in hover boolean value 
	 * @return - The user friendly time span display basing on the birth prec flag.
	 */
	this.getDisplay = function getDisplayForTimeDisplay(displayInHover) {
		if(this.years == -1 && this.months == -1 && this.weeks == -1 && this.days == -1 && this.hours == -1 && this.minutes == -1) {
			return "--";
		}
		var display = "";
		if(this.birthPrecFlag == birthPrecFlagEnum.PreciseToYear) {
			if(this.years >= 0 ) {
				displayModeString = "yearsDisplay";
				display += "~" + getDisplayFormat(displayInHover, displayModeString, timeToDisplay);
		}
			return display;
		}
		if(this.birthPrecFlag == birthPrecFlagEnum.PreciseToMonth) {
			if(this.years > 0 ) {
				displayModeString = "yearsDisplay";
				display += "~" + getDisplayFormat(displayInHover, displayModeString, timeToDisplay);
				return display;
			}
			if(this.months >= 0) {
				if(display != "") {
					display += " ";
				}
				displayModeString = "monthsDisplay";
				display += " " + "~" + getDisplayFormat(displayInHover, displayModeString, timeToDisplay);
				return display;
			}
		}
		if(this.years > 0 ) {
			displayModeString = "yearsDisplay";
			display += getDisplayFormat(displayInHover, displayModeString, timeToDisplay);
		}
		if(this.months > 0) {
			if(display != "") {
				display += " ";
			}
			displayModeString = "monthsDisplay";
			display += " " + getDisplayFormat(displayInHover, displayModeString, timeToDisplay);
		}
		if(this.weeks > 0) {
			if(display != "") {
				display += " ";
			}
			displayModeString = "weeksDisplay";
			display += " " + getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
		}
		if(this.days > 0) {
			if(display != "") {
				display += " ";
			}
			displayModeString = "daysDisplay";
			display += " " + getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
		}
		if(this.birthPrecFlag == birthPrecFlagEnum.PreciseToDateNoBirthTime) {
			if(this.days == 0 && this.years == 0 && this.months ==0 && this.hours == 0 && this.weeks ==0 && this.minutes == 0) {
				if(display != "") {
					display += " ";
				}
				displayModeString = "daysDisplay";
				display += " " + getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
			}
		}
		else {
			if(this.hours > 0) {
				if(display != "") {
					display += " ";
				}
				displayModeString = "hoursDisplay";
				display += " " + getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
			}
			if(this.minutes > 0) {
				if(display != "") {
					display += " ";
				}
				displayModeString = "minutesDisplay"
				display += " " + getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
			}
		}
		if(this.birthPrecFlag == birthPrecFlagEnum.PreciseToFullDateTime) {
			if(this.minutes == 0 && this.years == 0 && this.days == 0 && this.hours == 0 && this.months == 0 && this.weeks == 0) {
				if(display != "") {
					display += " ";
				}
				displayModeString = "minutesDisplay";
				display += " " + getDisplayFormat(displayInHover, displayModeString, timeToDisplay);  
			}
		}
	
		return display;
	};
	
	/**
	 * Returns the Length Of Stay Display based on the number of years, months, weeks, days, and hours based on display mode.
	 * If the time is below 1 hour, it will display 0 hours.
	 * @param - display in hover boolean value 
	 * @return - The user friendly time span display.
	 */
	this.getLOSDisplay = function getLOSDisplay(displayInHover) {
			if(this.years == -1 && this.months == -1 && this.weeks == -1 && this.days == -1 && this.hours == -1 && this.minutes == -1) {
				return "--";
			}
			var display = "";
			if(this.years > 0 ) {
				displayModeString = "yearsDisplay";
				display += getDisplayFormat(displayInHover, displayModeString, timeToDisplay);
			}
			if(this.months > 0) {
				if(display != "") {
					display += "  ";
				}
				displayModeString = "monthsDisplay";
				display += getDisplayFormat(displayInHover, displayModeString, timeToDisplay);
			}
			if(this.weeks > 0) {
				if(display != "") {
					display += "  ";
				}
				displayModeString = "weeksDisplay";
				display += getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
			}
			if(this.days > 0) {
				if(display != "") {
					display += "  ";
				}
				displayModeString = "daysDisplay";
				display += getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
			}
			if(this.hours > 0) {
				if(display != "") {
					display += "  ";
				}
				displayModeString = "hoursDisplay";
				display += getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
			}
			if(this.minutes > 0 && display === "") {
				displayModeString = "minutesDisplay"
				display = getDisplayFormat(displayInHover, displayModeString, timeToDisplay); 
			}
			if(display === "") {
				display = "0" + (displayInHover == true ?  " " + i18n.HOVER_MINUTES :  i18n.MINUTES);
			}

			return display;
	};

	/**
	 * Returns the display format of the length of time based on the number of years, months, weeks, days, hours, and minutes basing on display mode.
	 */
	function getDisplayFormat(displayInHover, displayMode, timeToDisplay) {
		if(displayMode == "minutesDisplay"){
			return timeToDisplay.minutes + (displayInHover == true ?  " " + i18n.HOVER_MINUTES : i18n.MINUTES);
		}
		if(displayMode == "hoursDisplay"){
			return timeToDisplay.hours + (displayInHover == true ?  " " + i18n.HOVER_HOURS :  i18n.HOURS);
		}
		if(displayMode == "daysDisplay"){
			return timeToDisplay.days + (displayInHover == true ?  " " + i18n.HOVER_DAYS :  i18n.DAYS);
		}
		if(displayMode == "weeksDisplay"){
			return timeToDisplay.weeks + (displayInHover == true ?  " " + i18n.HOVER_WEEKS : i18n.WEEKS);
		}
		if(displayMode == "monthsDisplay"){
			return timeToDisplay.months + (displayInHover == true ?  " " + i18n.HOVER_MONTHS : i18n.MONTHS);
		}
		if(displayMode == "yearsDisplay"){
			return timeToDisplay.years + (displayInHover == true ?  " " + i18n.HOVER_YEARS : i18n.YEARS);
		}
	}
};

/**
* Public method to return date offset
*/
function getDateOffset() {
	return  new Date().getTimezoneOffset();
}
/**
 * Represents the teams of providers associated to the loaded patients.
 */
var CareTeams = {
	loaded: false,
	careTeams : [],
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass care teams.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackCareTeams(reply) {
		var careTeams = reply.data;
		for(var i = 0; i < careTeams.length; i++) {
			var careTeam = new CareTeam(careTeams[i].encounterId);
			careTeam.defaultProvider = this.unpackProvider(careTeams[i].defaultProvider);
			for(var j = 0; j < careTeams[i].providers.length; j++) {
				careTeam.addProvider(this.unpackProvider(careTeams[i].providers[j]));
			}
			this.careTeams.push(careTeam);
		}
	},
	
	/**
	 * Returns a care team with the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getByEncounterId: function getCareTeamsByEncounterId(encounterId) {		
		for(var i = 0; i < this.careTeams.length; i++) {
			if(this.careTeams[i].encounterId == encounterId) {
				return this.careTeams[i];
			}
		}
		return null;
	},
	
	/**
	 * Unpacks the JSON for a provider.
	 * @param providerData - The JSON representing the provider data returned from the CareCompass service.
	 */	
	unpackProvider: function unpackProvider(providerData) {
		if(providerData == null) {
			return null;
		}
		var provider = new Provider(providerData.name);
		for(var i = 0; i < providerData.contactNumbers.length; i++) {
			var contact = providerData.contactNumbers[i];
			provider.addContact(new Contact(contact.number, contact.type));
		}
		for(var j = 0; j < providerData.roles.length; j++) {
			var role = providerData.roles[j];
			provider.addRole(role);
		}
		return provider;	
	},
	
	/**
	 * Removes all Care Teams and sets this object to not loaded.
	 * @param none
	 */		
	empty: function emptyCareTeams() {
		this.loaded = false;
		this.careTeams.length = 0;
	},

	/**
	 * Returns a care team display for the given encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getDisplayByEncounterId: function(encounterId) {		
		var careTeam = this.getByEncounterId(encounterId);
		if(careTeam == null || careTeam == undefined) {
			return "--";
		}
		return careTeam.getDisplay();
	}
};

/**
 * Represents a team of providers for a patient's encounter.
 */
function CareTeam(encounterId) {
	this.encounterId = encounterId;
	this.defaultProvider = null;
	this.providers = [];
	
	/**
	 * Adds a proiver to the care team.
	 * @param provider - The Provider object to add to this Care Team.
	 */
	 this.addProvider = function addCareTeamProvider(provider) {
		this.providers.push(provider);
	 };

	/**
	 * Creates the content of the care team display.
	 */	
	this.getDisplay = function() {
		var html = '<table>';
		for(var i = 0; i < this.providers.length; i++) {
			var provider = this.providers[i];
			html += '<tr><td class="care-team-display-role">' + provider.roles + '</td></tr>';
			html += '<tr><td class="care-team-display-provider">' + provider.name + '</td></tr>';
			if(provider.contacts.length == 0) {
				html += '<tr><td class="care-team-display-contact-type"></td></tr>';
			}
			else {
				html += '<tr><td class="care-team-display-contact-type">' + provider.contacts[0].type + " " + '<span class="care-team-display-contact">' + provider.contacts[0].number + '</td></tr>'
			}
			for(var j = 1; j < provider.contacts.length; j++) {
				html += '<tr><td class="care-team-display-contact-type">' + provider.contacts[j].type + " " + '<span class="care-team-display-contact">' + provider.contacts[j].number + '</td></tr>'
			}
			html += '<tr><td class="care-team-display-break">--</td></tr>';
		}
		html += '</table>';
		return html;
	};
};

/**
 * Represents CarePlans for all the patients on the list.
 */
var CarePlans = {
	loaded : false,
	carePlans : [],
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass care plans.
	 * @param carePlans - The JSON representing the data returned from the CareCompass service.
	 */	
	unpack: function unpackCarePlans(carePlans) {
		for(var i = 0; i < carePlans.length; i++) {
			var carePlan = new CarePlan(carePlans[i]);
			this.carePlans.push(carePlan);
		}
	},
	
	/**
	 * Returns the care plans for the input patient id.
	 * @param patientId - The unique identifier of the patient.
	 */		
	getByPatientId: function getCarePlansByPatientId(patientId) {
		var carePlansByPatientId = [];
		for(var i = 0; i < this.carePlans.length; i++) {
			if(this.carePlans[i].personId == patientId) {
				carePlansByPatientId.push(this.carePlans[i]);
			}
		}
		return carePlansByPatientId;
	},
	
	/**
	 * Removes all CarePlans and sets this object as not loaded.
	 * @param none
	 */		
	empty: function emptyCarePlans() {
		this.loaded = false;
		this.carePlans.length = 0;
	}
};

/**
 * Displays Overlay when more link is clicked in Plan of Care Cell, hides when external click is made.
 */
var PlanOfCareOverlay = {
	container : null,
	containerClose : null,
	patientRow : null,
	planOfCareCell : null,
	planOfCareCellOverlay : null,
	carePlans : [],
	encounterId : null,
	number : null,
	patient : null,
	totalPlans : 0,
	totalAvailableHeight : 0,
	n : 0,
	suggestedPlans : 0,
	
	/**
	* Displays the plan of care overlay
	* @param number - The row number to display the plan of care overlay
	* @param encounterId - The encounterId to determine patient
	*/
	displayOverlay: function showOverlay(number, encounterId) {
		if(this.container != null) {
			this.change(number, encounterId);
			PlanOfCareOverlay.n = 0;
			return;
		}
		this.number = number;
		this.encounterId = encounterId;
		this.patient = Patients.getByEncounterId(encounterId);
		this.carePlans = this.patient.getCarePlans();
		
		var parentRow = "#patient" + this.number;
		this.patientRow = $(parentRow);
		
		var parentCell = "#PlanOfCareCell" + this.number;
		this.planOfCareCell = $(parentCell);
		
		CareCompass.body.append(this.createContainer());
		PatientTable.disableScrolling();
		Shadow.display(this.container);
		this.container.show();
		this.createhover(this.container);
		
		this.container.mouseover(function() {
			PlanOfCareOverlay.n = 0;
		});
		this.container.mouseleave(function() {
			PlanOfCareOverlay.n = 1;
		});
		$(document).click(function(){ 
			if (PlanOfCareOverlay.n == 1) {
				PlanOfCareOverlay.hideOverlay();
                PlanOfCareOverlay.n = 0;
			} 
		});
	}, 
	
	/**
	* Creates the plan of care overlay container object.
	* @param none
	* @return The document object representing the container of the plan of care overlay.
	*/
	createContainer : function() {
		var html = "";
		
		this.container = $(document.createElement('div'));
		this.container.addClass("plan-of-care-overlay");
		this.totalAvailableHeight = PatientTable.container.height() - PatientTableHeader.container.height();
		
		this.container.append(this.create());
		
		this.containerClose = $(document.createElement('div'));
		this.containerClose.addClass("plan-of-care-overlay-close");
		this.containerClose.click(function() {
			PlanOfCareOverlay.hideOverlay();
		});
		
		html += '<div style=" width:' + (Columns.planOfCare.width) + 'px;">';
		html += '<span class="plan-of-care-overlay-up"></span>'; 
		html += '</div>';

		this.containerClose.append(html);
		this.containerClose.mouseover(function() {
			PlanOfCareOverlay.mouseOver();
		});
		this.containerClose.mouseleave(function() {
			PlanOfCareOverlay.mouseLeave();
		});
		
		this.container.append(this.containerClose);
		
		var offsets = this.planOfCareCell.offset();
		var left = offsets.left - 1;
		var offsets = this.patientRow.offset();
		var top = offsets.top;

		var topFromPatientTable = top - PatientTableHeader.container.height() - CareCompass.toolbar.outerHeight();
		this.container.css("left", left);
 		this.container.css("width", Columns.planOfCare.width);

		this.totalAvailableHeight = PatientTable.container.height() - PatientTableHeader.container.height();
		var cellHeight = this.planOfCareCell.height();
		var overlayHeight = this.totalPlans * 20;
		var remainingHeight = this.totalAvailableHeight - topFromPatientTable; 
		if(remainingHeight < overlayHeight) {
			top = this.totalAvailableHeight - overlayHeight + PatientTableHeader.container.height() + CareCompass.toolbar.outerHeight();
		}
		var patientTableOffsets = PatientTable.container.offset();
		var patientTableTop = patientTableOffsets.top;
	
		if(top < patientTableTop + PatientTable.header.height()) {
			top =  patientTableTop + PatientTable.header.height();
		}
		this.container.css("top", top - 2);
		
		if(this.totalAvailableHeight < overlayHeight){
			this.container.css("height", this.totalAvailableHeight);
		} 
		else {
			this.container.css("height", overlayHeight + 28);
		}
  		
		if( this.patientRow.hasClass('striped')){
 			this.container.css("background-color", "#E8EBF5");
		} 
		else{
			this.container.css("background-color", "#FFFFFF");
		}
 		return this.container;
	},
	
	/**
	 * Adds class which displays background
	 * @param none
	 */
	mouseOver : function over() {
		this.containerClose.removeClass("plan-of-care-overlay-close");
		this.containerClose.addClass("plan-of-care-overlay-close-dark");
	},
	
	/**
	 * Removes class which displays background
	 * @param none
	 */
	mouseLeave : function leave() {
		this.containerClose.removeClass("plan-of-care-overlay-close-dark");
		this.containerClose.addClass("plan-of-care-overlay-close");
	},
	
	/**
	 * Creates hover for the plan of care in overlay
	 * @param label - The visual object representing the care plan display
	 */
	createhover : function createHover(container){
		var totalDisplayedPlans = this.carePlans.length;
		if(this.suggestedPlans > 1) {
			totalDisplayedPlans -= (this.suggestedPlans - 1);
		}
		for(i = 0; i < totalDisplayedPlans; i++) {
			var display = null;
			var displayrow =  $($(this.container.children()[0]).children()[i]);
			if(displayrow.children().hasClass("plan-of-care-planned-indicator")) {
				display = $(displayrow.children()[1]);
			} else {
				display = displayrow ;
			}
			this.createHoverContent(display);
		}	
	},
	
	/**
	 * Creates hover content for the plan of care
	 * @param label - The visual object representing the care plan display
	 */
	createHoverContent : function (label) {
		if(label != null) {
			var header;
			var hoverdisplayText = null;
			var labelText = label[0]['innerText'];
			var html = "";
			if (label.children().hasClass("plan-of-care-planned")) {
				header = i18n.PLANNED_PLAN_LABEL;
				html = labelText;
			} else if (label.children().hasClass("plan-of-care-suggested")){
				if(this.suggestedPlans == 1) { 
					header = i18n.SUGGESTED_PLAN_LABEL;
				} else {
					header = i18n.SUGGESTED_PLANS_LABEL;
				}
				for(var i = 0; i < this.carePlans.length; i++) {
					if(this.carePlans[i].meaning == 'PLAN SUGGEST') {
						html += '<div>' + this.carePlans[i].name +'&nbsp;&nbsp;&nbsp;'+ '</div>';
					}
				}	
			} else if (label.children().hasClass("plan-of-care-initiated")) {
				header = i18n.INITIATED_PLAN_LABEL;
				html = labelText;
			} 
			
			var config = {    
				 over: function(e) {Hover.display(e, header, html)},
				 timeout: 200,
				 out: function(e) {Hover.hide();},
				 interval: 200
			};
			label.hoverIntent(config);	
			label.click(Hover.hide());
		}
	},
	
	/**
	 * Creates the display for content in overlay
	 * @param none
	 */
	create : function createOverlay() {
		this.suggestedPlans = 0;
		var html = "";
																		
		html += '<div id = "CarePlansCellOverlay' + this.number + '"style = "padding-left:6px; padding-top:6px; width: auto; height:' + (this.totalAvailableHeight - 33) + 'px; z-index:100; position:fixed; overflow-y:auto; overflow-x:hidden;">';
	
		for(var i = 0; i < this.carePlans.length; i++) {
			if(this.carePlans[i].meaning == 'PLANNED') {
			this.totalPlans++;	
			html += '<div class="plan-of-care-table-cell" onclick="PatientTable.launchCareOrders(' + this.encounterId + ', &quot;PLANNED&quot;)">';
			html += '<span class="plan-of-care-planned-indicator"></span>';
			html += '<span><span class="plan-of-care-planned truncate" style="width:' + (Columns.planOfCare.width - 33) + 'px;">' + this.carePlans[i].name + '</span></span>';
			html += '</div>';
			} else if(this.carePlans[i].meaning == "PLAN SUGGEST") {
				this.suggestedPlans++;
			}
		}
		if(this.suggestedPlans > 0) {
			this.totalPlans++;	
			html += '<div class="plan-of-care-table-cell" onclick="PatientTable.launchCareOrders(' + this.encounterId + ', &quot;SUGGESTED&quot;)">';
			if(this.suggestedPlans ==1) {
				html += '<span class="plan-of-care-suggested link truncate" style="width:' + (Columns.planOfCare.width - 33) + 'px;">' + this.suggestedPlans +' '+ i18n.SUGGESTED_PLAN + '</span>';
			} else {
				html += '<span class="plan-of-care-suggested link truncate" style="width:' + (Columns.planOfCare.width - 33) + 'px;">' + this.suggestedPlans +' '+ i18n.SUGGESTED_PLANS + '</span>';
			}
			html += '</div>';
		}
		for(var i = 0; i < this.carePlans.length; i++) {
			if(this.carePlans[i].meaning == "INITIATED") {
			this.totalPlans++;	
			html += '<div class="plan-of-care-table-cell" onclick="PatientTable.launchCareOrders(' + this.encounterId + ', &quot;INITIATED&quot;)">';
			html += '<span class="plan-of-care-initiated link truncate" style="width:' + (Columns.planOfCare.width - 33) + 'px;">' + this.carePlans[i].name + '</span>';
			html += '</div>';
			}
		}
		html += '</div>'; 
		return html;
	},
	
	/**
	* Removes the plan of care overlay and then displays a new one based row number.
	* @param number - The row number to display the plan of care overlay
	* @param encounterId - The encounterId to determine patient
	*/
	change : function(number, encounterId) {
		if(this.container != null) {
			PlanOfCareOverlay.hideOverlay();
			PlanOfCareOverlay.displayOverlay(number, encounterId);
			
		}
	},
	
	/**
	 * Hides the Overlay.
	 * @param none
	 */
	hideOverlay: function hideOverlay() { 
		if(this.container != null) {
    		this.container.empty();
    		PlanOfCareOverlay.container.remove();
    		PlanOfCareOverlay.container = null;		
    		this.carePlans = [];
    		this.totalPlans = 0;
            if (PatientDrillDown.isDisplayed() == false) {
    		  PatientTable.enableScrolling();
            }
		}
	}
	
};

/**
 * Represents a Plan for a patient.
 */
function CarePlan(carePlan) {
	this.personId = carePlan.personId;
	this.name = carePlan.name;
	this.status = carePlan.status;
	this.meaning = carePlan.meaning;
	this.type = carePlan.type;
	this.inProcess = carePlan.inProcess;
	
};

/**
 * Represents a patient's provider.
 */
function Provider(name) {
	this.name  = name;
	this.roles = "";
	this.contacts = [];
	
	/**
	 * Adds a role display to this provider and builds the display seperated by commas.
	 * @param role - The string representing the provider's role display.
	 */
	 this.addRole = function addProviderRole(role) {
		if(this.roles == "") {
			this.roles = role;
		}
		else {
			this.roles += ", " + role;
		}
	 }
	 
	/**
	 * Adds a conctact object to this provider.
	 * @param role - The object representing the provider's contact.
	 */
	 this.addContact = function addCareTeamContact(contact) {
		this.contacts.push(contact);
	 }
};

/**
 * Represents a provider's contact information.
 */
function Contact(number, type) {
	this.number = number;
	this.type = type;
};

/**
 * Represents the allergies for the currently loaded patients.
 */
var Allergies = {
	loaded: false,
	allergies: [],
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass allergies.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	 unpack: function unpackAllergies(reply) {
		var patientAllergies = reply.data;
		for(var i = 0; i < patientAllergies.length; i++) {
			if(patientAllergies[i].hiddenAllergiesIndicator == true) {
				var hiddenAllergies = new Allergy(patientAllergies[i].personId, "", "", false);
				hiddenAllergies.hidden = true;
				this.allergies.push(hiddenAllergies);
  	 	 	}  
			if(patientAllergies[i].noKnownAllergies == true) {
				var noKnownAllergies = new Allergy(patientAllergies[i].personId, "", "", false);
				noKnownAllergies.noKnown = true;
				this.allergies.push(noKnownAllergies);
				continue;
			}
			for(var j = 0; j < patientAllergies[i].allergies.length; j++) {
				var severity = patientAllergies[i].allergies[j].severity;
				if(severity == "") {
					severity = "--";
				}
				var allergy = new Allergy(patientAllergies[i].personId, patientAllergies[i].allergies[j].display, severity, patientAllergies[i].allergies[j].severe);
				var reactions = patientAllergies[i].allergies[j].reactions;
				for(var k = 0; k < reactions.length; k++) {
					allergy.addReaction(reactions[k]);
				}
				this.allergies.push(allergy);
			}
		}
	 },
	 
	/**
	 * Returns the allergies for the input patient id.
	 * @param patientId - The unique identifier of the patient.
	 */		
	getByPatientId: function getAllergiesByPatientId(patientId) {
		var allergies = [];
		for(var i = 0; i < this.allergies.length; i++) {
			if(this.allergies[i].patientId == patientId) {
				allergies.push(this.allergies[i]);
			}
		}
		return allergies;
	},
	
	/**
	 * Removes all Allergies and sets this object as not loaded.
	 * @param none
	 */		
	empty: function emptyAllergies() {
		this.loaded = false;
		this.allergies.length = 0;
	}
};

/**
 * Represents a patient's allergy
 */
function Allergy(patientId, display, severity, severe) {
	this.patientId = patientId;
	this.noKnown = false;
	this.hidden = false;
	this.display = display;
	this.severity = severity;
	this.severe = severe;
	this.reactions = [];
	
	/**
	 * Adds a reaction display to this allergy.
	 * @param reaction - A string representing the display of the reaction for this allergy.
	 */
	 this.addReaction = function AddAllergyReaction(reaction) {
		this.reactions.push(reaction);
	 }
	 
	/**
	 * Returns the display of reactions in a comma delimited list.
	 * @param none.
	 * @return - A string of reactions delimted by a comma.
	 */
	 this.getReactionDisplay = function getAllergyReactionDisplay() {
		var display = "--";
		for(var j = 0; j < this.reactions.length; j++) {
			if(display == "--") {
				display = this.reactions[j];
			}
			else {
				display += ", " + this.reactions[j];
			}
		}
		return display;
	}
};

/**
 * Represents the quality measures for the loaded patients.
 */
var QualityMeasures = {
	loaded: false,
	measures: [],
	
	/**
	 * Unpacks the JSON received from the CareCompass service for the CareCompass Quality Measures.
	 * @param reply - The JSON representing the data returned from the CareCompass service.
	 */	
	 unpack: function unpackQualityMeasures(reply) {
		var qualityMeasures = reply.data;
		for(var i = 0; i < qualityMeasures.length; i++) {
			var measure = new QualityMeasure(qualityMeasures[i].encounterId, qualityMeasures[i].isQualityMeasureOrder);
			this.measures.push(measure);
		}
	 },
	 
	/**
	 * Returns the measures with the input encounter id.
	 * @param encounterId - The unique identifier of the patient's encounter.
	 */		
	getByEncounterId: function getQualityMeasuresByEncounterId(encounterId) {
		for(var i = 0; i < this.measures.length; i++) {
			if(this.measures[i].encounterId == encounterId) {
				return this.measures[i];
			}
		}
		return null;
	},
	
	/**
	 * Removes all measures and sets this object to not loaded.
	 * @param none
	 */		
	empty: function emptyQualityMeasures() {
		this.loaded = false;
		this.measures.length = 0;
	}
};

/**
 * Represents a Quality Measure associated to a patient's encounter.
 */
function QualityMeasure(encounterId, isQualityMeasureOrder) {
	this.encounterId = encounterId;
	this.isQualityMeasure = isQualityMeasureOrder;
	
	/**
	 * Returns whether the current patient has quality measure order or not
	 * @param none
	 * @return true if current patient has quality measure order, false otherwise.
	 */
	this.isQualityMeasureOrder = function () {
		return this.isQualityMeasure;
	};
};

/**
 * Represents a patient's error task
 * @param errorData - The JSON data returned from the Error Task service
 * @param createDtTm - The date time string when the error message was created.
 */
function ErrorTask(errorData, createDtTm) {
    this.taskId = errorData.id;
    this.encounterId = errorData.encounterId;
    this.orderId = errorData.orderId;
    this.orderDisplay = errorData.orderDisplay;
    this.createDtTm = createDtTm;
    this.msgSubject = errorData.msgSubject;
    this.message = errorData.message;
    this.taskTypeCd = errorData.taskTypeCd;
    this.updtCnt = errorData.updtCnt;
};

/**
 * Represents patient's error task details
 * @param errorData - The JSON data returned from the Error Task service
 */
function ErrorTaskDetails(errorData) {
    this.taskId = errorData.id;
    this.encntrId = errorData.encounterId;
    this.taskTypeCd = errorData.taskTypeCd;
    this.updateCount = errorData.updtCnt;    
};
/**
 * Represents the Error Tasks for the currently loaded patients
 */
var ErrorTasks = {
    loaded: false,
    errorTasks: [],
    errorTasksByTaskId: [],

    /**
     * Unpacks the JSON received from the CareCompass service for the CareCompass error tasks
     * @param reply - The JSON representing the data returned from the CareCompass service
     */
    unpack: function unpackErrorTasks(reply) {
        this.errorTasks = [];
        this.errorTasksByTaskId = [];
        var errorData = reply.data;
        var careDate;
        var createDtTm;
        var encounterId;
        var taskId;
        
        for (var i = 0; i < errorData.length; i++) {
            careDate = new CareDate(errorData[i].encounterId, errorData[i].msgCreateInstMillis);
            createDtTm = careDate.getFaceUpTimeDateDisplay();
            
            encounterId = errorData[i].encounterId;
            if (this.errorTasks[encounterId] === undefined) {
                this.errorTasks[encounterId] = [];
            }
            this.errorTasks[encounterId].push(new ErrorTask(errorData[i], createDtTm));

            taskId = errorData[i].id;
            if(this.errorTasksByTaskId[taskId] === undefined || this.errorTasksByTaskId[taskId] === null) {
                this.errorTasksByTaskId[taskId] = [];
            }
            var taskDetails = new ErrorTaskDetails(errorData[i]);
            this.errorTasksByTaskId[taskId].push(taskDetails);
        }
    },

    /**
     * Retrieves the error tasks associated to an encounter id
     * @param encounterId - The encounter ID the error tasks are associated with
     * @return A list of ErrorTask objects if the encounter has error tasks 
     *         else null
     */
    getByEncounterId: function getErrorTasksByEncounterId(encounterId) {
        if (this.errorTasks[encounterId] === undefined) {
            return null;
        }
        return this.errorTasks[encounterId];
    },

    /**
     * Retrieves the error tasks based on the taskId
     * @param taskID -  The task ID the error tasks area associated with
     * @return A list of error task objects for the given task ID
     *         else null
     */
    getErrorTaskDetailsByTaskId: function getErrorTaskDetailsByTaskId(taskID) {
        if (this.errorTasksByTaskId[taskID] === undefined || this.errorTasksByTaskId[taskID] === null) {
            return null;
        }
        return this.errorTasksByTaskId[taskID];
    },

    /**
     * Empties the error tasks collections and marks the error tasks as not loaded
     * @param - none
     * @return - none
     */
    empty: function emptyErrorTasks() {
        this.loaded = false;
        this.errorTasks.length = 0;
        this.errorTasksByTaskId.length = 0;
    }
};

/**
 * A visual dither used for loading.
 */
var Overlay = {
	container: null,
 	displayRequests : 1,
	/**
	* Displays the overlay over the input parent.
	* @param parent - The parent to display the overlay in.
	*/
	display: function displayOverlay(parent) {
		if(this.container == null){
			this.container = $(document.createElement("div"));
			this.container.addClass("overlay");
			this.container.css("width",CareCompass.body.width());
			parent.append(this.container);
		}else{
			this.displayRequests++;
		}
 	},
	
	/**
	* Fades out and destroys the currently displayed overlay.  If none exists, nothing happens.
	* @param none
	*/
	remove: function removeOverlay() {
	 	if(this.displayRequests == 1 ){
 			if(this.container != null) {
 				this.container.remove();
		 		this.container = null;
  			}
 		}else{
 			this.displayRequests--;
 		}
	}
}

/**
 * The dialog that displays for reviewing orders and results that are new to the current user for the selected patient.
 */
var ReviewDialog = {
	encounterId: 0,
	container: null,
	dialog: null,
	buttons: null,
	cancel: null,
	review: null,
	selectAll: null,
	deselectAll: null,
	header: null,
	stroke: null,
	content: null,
	results: null,
	orders:null,
	newResults: null,
	newOrders: null,
	width: 0,
	orderDisplayCellWidth: 0,


	/**
	* Maps and initializes the review window order objects after they have been appended to the document.
	* @param table - The table to map the rows for.
	*/
	mapOrderRows: function(table) {
		for(var i = 0; i < table.rows.length; i++) {
			if(table.rows[i].orderId == undefined) {
				continue;
			}
			var row = $(table.rows[i]);
			   var version = table.rows[i].version;
			this.mapOrderRow(row,version);
		}
	},

	/**
	* Maps and initializes the review window result objects after they have been appended to the document.
	* @param table - The table to map the rows for.
	*/
	mapResultRows: function(table) {
		for(var i = 0; i < table.rows.length; i++) {
			if(table.rows[i].resultId == undefined) {
				continue;
			}
			var row = $(table.rows[i]);
			this.mapResultRow(row);
		}
	},

	/**
	* Maps and initializes the review window rows after it has been appended to the document.
	* @param row - The row document object to map and initialize.
	* @param version - The version for the current order
	*/
	mapOrderRow: function(row,version) {
		var order = NewOrders.getByOrderId(row[0].orderId,version);
		var stat = null;
		var display = null;
		var action = null;
		var description = null;
		var comment = null;
		var instruction = null;
		var nurseReview = null;
		var orderedBy = null;
		var enteredByName = null;
		var enteredByDate = null;
		if(order.nurseReview){
			nurseReview = $($($(row[0].cells[1]).children()[0]).children()[0]);
			if(order.stat){
				stat = $($($(row[0].cells[1]).children()[0]).children()[1]);
				display = $($($($(row[0].cells[1]).children()[0]).children()[2]).children()[0]);
				if(order.actionMeaning != "ORDER"){
					action = $($($($(row[0].cells[1]).children()[0]).children()[2]).children()[1]);
				}
			} else {
				display = $($($($(row[0].cells[1]).children()[0]).children()[1]).children()[0]);
				if(order.actionMeaning != "ORDER"){
					action = $($($($(row[0].cells[1]).children()[0]).children()[1]).children()[1]);
				}
			}
		} else if(order.stat) {
			stat = $($($(row[0].cells[1]).children()[0]).children()[0]);
			display = $($($($(row[0].cells[1]).children()[0]).children()[1]).children()[0]);
			if(order.actionMeaning != "ORDER"){
				action = $($($($(row[0].cells[1]).children()[0]).children()[1]).children()[1]);
			}
		} else {
			display = $($($($(row[0].cells[1]).children()[0]).children()[0]).children()[0]);
			if(order.actionMeaning != "ORDER"){
				action = $($($($(row[0].cells[1]).children()[0]).children()[0]).children()[1]);
			}
		}
		description = $($(row[0].cells[1]).children()[1]);
		if(order.comment != ""){
			comment = $($(row[0].cells[1]).children()[2]);
		}
		if(order.instruction != ""){
			instruction = $($(row[0].cells[1]).children()[3]);
		}
		orderedBy = $($(row[0].cells[2]).children()[0]);
		enteredByName = $($($(row[0].cells[3]).children()[0]).children()[0]);
		enteredByDate = $($($(row[0].cells[3]).children()[0]).children()[1]);
		this.sizeOrderDisplay(order, display, action);
		this.initializeOrderHovers(order, display, action, description, nurseReview, stat, comment, instruction, orderedBy, enteredByName, enteredByDate);
	},

	/**
	 * Sets the size for orderDisplay and action
	 */
	sizeOrderDisplay: function(order, display, action) {
		var orderDisplayWidth = 0;
		var orderActionWidth = 0;
		orderDisplayWidth = display.width();
		if(order.actionMeaning != "ORDER") {
			orderActionWidth = action.width() + 6;
		}
		var totalDisplayWidth = orderDisplayWidth + orderActionWidth ;
		if(totalDisplayWidth < this.orderDisplayCellWidth) {
			display.width(orderDisplayWidth);
			if(order.actionMeaning != "ORDER") {
				action.width(orderActionWidth);
			}
		} else {
			orderDisplayWidth = this.orderDisplayCellWidth - orderActionWidth;
			display.width(orderDisplayWidth);
			if(order.actionMeaning != "ORDER") {
				action.width(orderActionWidth);
			}
		}
	},

	/**
	* Maps and initializes the review window rows after it has been appended to the document.
	* @param row - The row document object to map and initialize.
	*/
	mapResultRow: function(row) {
		var result = NewResults.getByResultId(row[0].resultId);
		var resultValue = $($(row[0].cells[2]).children()[0]);
		var date = $($(row[0].cells[3]).children()[0]);
		var display = $($(row[0].cells[1]).children()[0]);
		this.initializeResultHovers(result, resultValue, display, date);
	},


	/**
	* Initializes the hovers for the various icons that can display in the row.
	* @param order - The order object used to get the order comment
	* @param display - The object represents the display of order.
	* @param action - The object represents the action of order.
	* @param description - The description of the order, can be null if it doesn't exist.
	* @param nurseReview - The nurse review icon, can be null if it doesn't exist.
	* @param urgent - The urgent icon to add the hover to, can be null if it doesn't exist.
	* @param comment - The comment icon to add the hover to, can be null if it doesn't exist.
	* @param orderedBy - The ordering physician to add the hover to, can be null if it doesn't exist.
	* @param enteredBy - The entering clinician to add the hover to, can be null if it doesn't exist.
	*/
	initializeOrderHovers: function(order, display, action, description, nurseReview, urgent, comment, instruction, orderedBy, enteredByName, enteredByDate) {
		if(nurseReview != null){
			var config = {
				 over: function(e) {Hover.display(e, i18n.NURSE_HEADER, i18n.NURSE)},
				 timeout: 200,
				 out: function(e) {Hover.hide();},
				 interval: 200
			};
			nurseReview.hoverIntent(config);
		}
		if(urgent != null) {
			var config = {
				 over: function(e) {Hover.display(e, i18n.URGENT_HEADER, i18n.URGENT)},
				 timeout: 200,
				 out: function(e) {Hover.hide();},
				 interval: 200
			};
			urgent.hoverIntent(config);
		}
		if(orderedBy != null && isTruncated(orderedBy)) {
			var config = {
					 over: function(e) {Hover.display(e, "", order.orderingProvider)},
					 timeout: 200,
					 out: function(e) {Hover.hide();},
					 interval: 200
				};
			orderedBy.hoverIntent(config);
		}
		if(enteredByName != null && isTruncated(enteredByName)) {
			var config = {
					 over: function(e) {Hover.display(e, "", order.enteringProvider)},
					 timeout: 200,
					 out: function(e) {Hover.hide();},
					 interval: 200
				};
			enteredByName.hoverIntent(config);
		}
		if(enteredByDate != null && isTruncated(enteredByDate)) {
			var config = {
					 over: function(e) {Hover.display(e, "", order.getDateDisplay())},
					 timeout: 200,
					 out: function(e) {Hover.hide();},
					 interval: 200
				};
			enteredByDate.hoverIntent(config);
		}
		if(display != null && action === null) {
			var config = {
					 over: function(e) {Hover.display(e, "", order.getOrderActionDisplayHover())},
					 timeout: 200,
					 out: function(e) {Hover.hide();},
					 interval: 200
			};
			display.hoverIntent(config);
			if(description != null) {
				description.hoverIntent(config);
			}
			if(comment != null) {
				comment.hoverIntent(config);
			}
			if(instruction != null) {
				instruction.hoverIntent(config);
			}
		}
		if(display != null && action != null) {
			var config = {
					 over: function(e) {Hover.display(e, "", order.getOrderActionDisplayHover())},
					 timeout: 200,
					 out: function(e) {Hover.hide();},
					 interval: 200
			};
			display.hoverIntent(config);
			action.hoverIntent(config);
			if(description != null) {
				description.hoverIntent(config);
			}
			if(comment != null) {
				comment.hoverIntent(config);
			}
			if(instruction != null) {
				instruction.hoverIntent(config);
			}
		}

	},

	/**
	* Initializes the hovers for the various result resultValues that can display in the row.
	* @param result - The result object used to get criticality
	* @param resultValue - The resultValue to add the hover to, can be null if it doesn't exist.
	* @param display - The display to add the hover to, can be null if it doesn't exist.
	*/
	initializeResultHovers: function(result, resultValue, display, date) {
		Hover.displayForTruncation(display);
		var html = '<table class="hover-table">'
		html += result.getHoverText();
		html += '</table>';
		var config = {
			 over: function(e) {Hover.display(e, "", html)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		resultValue.hoverIntent(config);
		if(date != null && isTruncated(date)) {
			var config = {
					 over: function(e) {Hover.display(e, "", result.getFaceUpDateTimeDisplay() )},
					 timeout: 200,
					 out: function(e) {Hover.hide();},
					 interval: 200
				};
				date.hoverIntent(config);
		}
		if(display != null && isTruncated(display)) {
			var config = {
					 over: function(e) {Hover.display(e, "", result.getResultName() )},
					 timeout: 200,
					 out: function(e) {Hover.hide();},
					 interval: 200
				};
				display.hoverIntent(config);
		}
	},

	/**
	 * Displays the dialog for the input encounter id.
	 * @param encounterId - The unique identifier of the encounter to display the review dialog for.
	 */
	display: function displayReviewDialog(encounterId) {
		Notifier.disable();
		NewDataMenu.remove();
		this.encounterId = encounterId;
		this.newResults = NewResults.getByEncounterId(this.encounterId);
		this.newOrders = NewOrders.getByEncounterId(this.encounterId);
		this.create();

		Overlay.display(CareCompass.body);
		PlanOfCareOverlay.hideOverlay();
		CareCompass.body.append(this.container);
		this.size();
		this.dialog.css("top", 0 - this.dialog.height());
		this.dialog.animate({top: 0}, 500);
		if(this.newOrders != null){
			this.mapOrderRows(this.orders[0]);
		}
		if(this.newResults != null){
			this.mapResultRows(this.results[0]);
		}


	},

	/**
	 * Determines if the review dialog is displayed or not.
	 * @param none
	 * @return True if the review dialog is displayed, false if not.
	 */
	isDisplayed: function isReviewDialogDisplayed() {
		if (this.container != null) {
			return true;
		}
		return false;
	},

	/**
	 * Creates the dialog and its content.
	 * @param none
	 */
	create: function createReviewDialog() {
		this.width = Math.round(CareCompass.body.width() * 0.8);
		this.container = $(document.createElement("div"));
		this.container.addClass("review-dialog-container");

		this.dialog  = $(document.createElement("div"));
		this.dialog.addClass("review-dialog");
		this.dialog.css("width", this.width);

		var html = '<table class="dialog-table">';
		html += this.createTitle();
		html += this.createDemographics();
		html += this.createContent();

		html += '</table>';
		this.dialog.append(html);

		this.content = $(this.dialog.children()[0].rows[2].cells[0]);
		this.results = $($(this.content.children()[0]).children()[0]);
		this.orders = $($(this.content.children()[0]).children()[1]);

		this.createButtons();
		this.container.append(this.dialog);
		Shadow.display(this.dialog);
	},

	/**
	 * Creates the content
	 * @param none
	 */
	createContent: function createReviewDialogContent() {
		var width = this.width ;
		var tablepadding = Math.round(width * 0.025);
		var html = '<tr id= "content">';
		html += '<td class="dialog-content-cell">';
		html += '<div class="dialog-content">';

		var checked = 'checked="checked"';
		if(Configuration.acknowledgeSelectAll == false){
			checked = "";
		}
		var resultwidth = Math.round(width * 0.3);
		var resultDisplayCellWidth = Math.round(resultwidth * 0.35);
		var valueCellWidth = Math.round(resultwidth * 0.25);
		var dateCellWidth = Math.round(resultwidth * 0.25);

		html += '<table id = "newResultsTable" class="review-dialog-content-results" style="  margin-left:' + tablepadding + 'px; width:' + resultwidth + 'px">'
		html += '<tr>';
		html += '<td class="review-dialog-content-header-display-cell" colspan = "3" style="width:' + resultDisplayCellWidth + 'px">';
		html += '<div class="review-dialog-content-header-display">' + i18n.RESULTS + " " + '<span id = "newResultsTableCount"></span></div>';
		html += '</td> </tr>';
		if(this.newResults != null) {
			html += '<tr>';
			html += '<td class="review-dialog-content-header-padding-cell" colspan = "2" style="width:' + resultDisplayCellWidth + 'px";>';
			html += '</td>';
			html += '<td class="review-dialog-content-header-value-cell" style="width:' + valueCellWidth + 'px">';
			html += '<div class="review-dialog-content-header-value">' + i18n.VALUE + '</div>';
			html += '</td>';
			html += '<td class="review-dialog-content-header-date-cell" style="width:' + dateCellWidth + 'px">';
			html += '<div class="review-dialog-content-header-date">' + i18n.DATE + '</div>';
			html += '</td>';
			html += '</tr>';

			var index = 1;
			for(var i = 0; i < this.newResults.length; i++) {
				html += '<tr id="result' + (index) + '" resultId = "' + this.newResults[i].id + '" version="' + this.newResults[i].version + '">';
				html += '<td class="dialog-content-check-cell">';
				html += '<input type=checkbox ' + checked + ' id="result-check" onclick="ReviewDialog.checkSelectionState()" ></input>';
				html += '</td>';
				html += '<td class="review-dialog-content-result-display-cell" style="width:' + resultDisplayCellWidth + 'px" >';
				html += '<div class="review-dialog-content-result-display truncate" style="width:' + (resultDisplayCellWidth-11) + 'px">' + this.newResults[i].getResultName() + '</div>';
				html += '</td>';
				html += '<td class="review-dialog-content-result-value-cell"  style="width:' + valueCellWidth + 'px">';
				if(this.newResults[i].type == "NUMERIC" || this.newResults[i].type == "CALCULATED"){
					html += '<div class="review-dialog-content-result-value" style="width:' + valueCellWidth + 'px">' + this.newResults[i].getValue(index) + '</div>';
				} else {
					html += '<div class="review-dialog-content-result-value" style="width:' + valueCellWidth + 'px">' + this.newResults[i].getTruncatedValue(index, valueCellWidth) + '</div>';
				}
				html += '</td>';
				html += '<td class="review-dialog-content-result-date-cell" style="width:' + dateCellWidth + 'px">';
				html += '<div class="review-dialog-content-result-date truncate" style="width:' + (dateCellWidth-11) + 'px">' + this.newResults[i].getFaceUpDateTimeDisplay() + '</div>';
				html += '</td>';
				html += '</tr>';
				index++;
			}
			html += '<tr><td  class="dialog-content-header-check-cell" >';
			html += '<input  type=checkbox ' + checked + ' id = "select-all-results" onclick="ReviewDialog.selectResults()"></input>';
			html += '</td>';
			html += '<td class="review-dialog-content-result-select-all-cell"  style="border-right:0px;">';
			html += '<div class="review-dialog-content-result-select-all">' + i18n.SELECT_ALL + '</div>';
			html += '</td>';
			html += '<td class="review-dialog-content-result-select-all-cell"  style="border-right:0px;">';
			html += '<div class="review-dialog-content-result-select-all"></div>';
			html += '</td>';
			html += '<td class="review-dialog-content-result-select-all-cell">';
			html += '<div class="review-dialog-content-result-select-all"></div>';
			html += '</td>';
			html += '</tr>';
			html += '</table>';
		} else {
			html += '<tr>';
			html += '<td class="dialog-content-no-new-cell" colspan = "4" style="width:' + resultwidth + 'px">';
			html += '<div>'+ i18n.NO_NEW_RESULTS +'</div>';
			html += '</td>';
			html += '</tr>';
			html += '</table>';
		}

		var orderWidth = Math.round(width * 0.6);
		this.orderDisplayCellWidth = Math.round(orderWidth * 0.4);
		var providerCellWidth = Math.round(orderWidth * 0.2);
		html += '<table id = "newOrdersTable" class="review-dialog-content-orders" style="margin-right:' + tablepadding + 'px; width:' + orderWidth + 'px">';
		html += '<tr>';
		html += '<td class="review-dialog-content-header-order-display-cell">';
		html += '<div class="review-dialog-content-header-order-display">' + i18n.ORDERS + '<span id = "newOrdersTableCount"></span></div>';
		html += '</td> </tr>';
		if(this.newOrders != null) {
			html += '<tr>';
			html += '<td class="review-dialog-content-header-padding-cell" colspan = "2";>';
			html += '</td>';
			html += '<td class="review-dialog-content-header-provider-cell">';
			html += '<div class="review-dialog-content-header-provider" style="width:' + providerCellWidth + 'px;">' + i18n.ORDERED_BY + '</div>';
			html += '</td>';
			html += '<td class="review-dialog-content-header-provider-cell">';
			html += '<div class="review-dialog-content-header-provider" style="width:' + providerCellWidth + 'px;">' + i18n.ENTERED_BY + '</div>';
			html += '</td>';
			html += '</tr>';

			var index = 1;
			var previousId = 0;
			var classes;
			var checkedOrders = 'checked="checked"';
			if(Configuration.acknowledgeSelectAll == false){
				checkedOrders = "";
			}
			for(var i = 0; i < this.newOrders.length; i++) {
				var classes = '';
				if(this.newOrders[i].isParentNurseReview() == true ) {
					classes += ' new-nurse-review-order';
				}
				if(this.newOrders[i].isStat() == true ){
					classes += ' new-stat-order';
				}

				if(this.newOrders[i].id != previousId) {
					var action = this.newOrders[i].action;
					var actionMeaning = this.newOrders[i].actionMeaning;
					var actionWidth = (action.length * 7) + 10;
					var description = "";
					if(this.newOrders[i].description !== null && this.newOrders[i].description !== undefined) {
						description = this.newOrders[i].description;
					}
					html += '<tr id="order' + (index++) + '" class="' + classes + '" orderId = "' + this.newOrders[i].id  + '" version="' + this.newOrders[i].version + '" nurseReview="' + this.newOrders[i].nurseReview + '">';
					html += '<td class="dialog-content-order-check-cell">';
					html += '<input type=checkbox ' + checkedOrders + ' onclick="ReviewDialog.checkSelectionState()" ></input>';
					html += '</td>';
					html += '<td class="review-dialog-content-order-display-cell" >';
					html += '<div class="order-display">';

					if(this.newOrders[i].isParentNurseReview() == true ) {
						html += '<span id="reviewImage' + index + '" class="review-image" ></span>';
					}
					if(this.newOrders[i].isStat() == true ){
						html += '<span id="statImage' + index + '" class="review-stat-image"></span>';
					}
					html += '<span style="width:' + this.orderDisplayCellWidth + 'px; ">';

					if (actionMeaning != "ORDER") {
						html += '<span class="review-dialog-content-order-display truncate">' + this.newOrders[i].getDisplay() + '</span>';
						html += '<span class="review-dialog-order-action" style="width:' + (actionWidth) + 'px;" >' + this.newOrders[i].getOrderAction() + '</span>';
					} else {
						html += '<span class="review-dialog-content-order-display truncate">' + this.newOrders[i].getDisplay() + '</span>';
					}
					html += '</span>';
					html += '</div>';
					html += '<div class="review-dialog-content-order-description truncate " style="width:' + this.orderDisplayCellWidth + 'px;">' + description + '</div>';
					html += '<div class="review-dialog-content-order-comment truncate " style="width:' + (this.orderDisplayCellWidth - 16) + 'px;">'  + this.newOrders[i].getComment() + '</div>';
					html += '<div class="review-dialog-content-order-instruction truncate " style="width:' + (this.orderDisplayCellWidth - 16) + 'px;">'  + this.newOrders[i].getInstruction() + '</div>';
					html += '</td>';
					html += '<td class="review-dialog-content-order-ordering-provider-cell">';
					html += '<div class="truncate review-dialog-content-order-ordering-provider" style="width:' + providerCellWidth + 'px;">' +  this.newOrders[i].orderingProvider + '</div>';
					html += '</td>';
					html += '<td class="review-dialog-content-order-entering-provider-cell truncate" style="width:' + providerCellWidth + 'px;">';
					html += '<div class="review-dialog-content-order-entering-provider truncate" style="width:' + (providerCellWidth - 10) + 'px;">' +  this.newOrders[i].getEnteredBy(providerCellWidth) + '</div>';
					html += '</td>';
					html += '</tr>';
					previousId = this.newOrders[i].id;
				}
			}
			html += '<td class="dialog-content-header-check-cell">';
			html += '<input type=checkbox ' + checkedOrders + ' id="select-all-orders" onclick="ReviewDialog.selectOrders()" ></input>';
			html += '</td>';
			html += '<td class="review-dialog-content-order-select-all-cell" style="border-right:0px;">';
			html += '<div class="review-dialog-content-order-select-all">' + i18n.SELECT_ALL + '</div>';
			html += '</td>';
			html += '<td class="review-dialog-content-order-select-all-cell" style="border-right:0px;">';
			html += '<div class="review-dialog-content-order-select-all"></div>';
			html += '</td>';
			html += '<td class="review-dialog-content-order-select-all-cell">';
			html += '<div class="review-dialog-content-order-select-all"></div>';
			html += '</td>';
			html += '</div>';
			html += '</td>';
			html += '</tr>';
			html += '</table>';
		} else {
			html += '<tr>';
			html += '<td class="dialog-content-no-new-cell" colspan = "4" style="width:' + orderWidth + 'px">';
			html += '<div>'+ i18n.NO_NEW_ORDERS  +'</div>';
			html += '</td>';
			html += '</tr>';
			html += '</table>';
		}

		return html;
	},

	/**
	 * Creates the dialog's title
	 * @param none
	 * @return The title's HTML
	 */
	createTitle: function createReviewDialogTitle() {
		var html = '<tr>';
		html += '<td class="review-dialog-title-cell">';
		html += '<span class="review-dialog-title">' + i18n.REVIEW + '</span>';
		html += '<span class="review-dialog-container-close" onclick = "ReviewDialog.hide()"></span>';
		html += '</td>';
		html += '</tr>';
		return html;
	},

	/**
	 * Creates the dialog's demographics banner
	 * @param none
	 * @return The demographic banner's HTML
	 */
	createDemographics: function createReviewDialogDemographics() {
		var patient = Patients.getByEncounterId(this.encounterId);
		var html = '<tr>';
		html += '<td class="review-dialog-demographics-cell">';
		html += '<div class="review-dialog-demographics">';
		html += '<table class="review-dialog-demographics-table">';
		html += '<tr>';
		html += '<td class="review-dialog-demographics-name-cell">';
		html += '<span class="review-dialog-demographics-name">' + patient.getName() + '</span>';
		html += '<span class="review-dialog-demographics-gender">' + patient.getGender() + '</span>';
		html += '<span class="review-dialog-demographics-age">' + patient.getAgeDisplay() + '</span>';
		html += '</td>';
		html += '<td class="review-dialog-demographics-location-cell">';
		html += '<div class="review-dialog-demographics-location">' + patient.location + '</div>';
		html += '</td>';
		html += '</tr>';
		html += '</table>';
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},

	/**
	 * Creates the dialog's demographics banner
	 * @param none
	 * @return The demographic banner's HTML
	 */
	createButtons: function createReviewDialogButtons() {
		this.buttons = $(document.createElement("div"));
		this.buttons.addClass("review-dialog-buttons");
		var html = '<table class="review-dialog-buttons-table">';
		html += '<tr>';
		html += '<td style="border: 0px;">';
		html += '</td>';
		html += '<td style="width: 33%; border: 0px;"  class="review-dialog-buttons-right">';
		html += '<input type="button" class="review-dialog-buttons-review" value="' + i18n.MARKED_AS_REVIEWED + '"/>';
		html += '<input type="button" class="review-dialog-buttons-cancel" value="' + i18n.CANCEL + '"/>';
		html += '</td>';
		html += '</tr>';
		html += '</table>';
		this.buttons.append(html);
		this.review = $($(this.buttons.children()[0].rows[0].cells[1]).children()[0]);
		this.cancel = $($(this.buttons.children()[0].rows[0].cells[1]).children()[1]);

		this.review.click(function() {
			Timers.start("USR:CareCompass.AcknowledgeNewData");
			ReviewDialog.reviewResults();
			ReviewDialog.reviewOrders();
			ReviewDialog.hide();
		});

		this.cancel.click(function() {
			ReviewDialog.hide();
			Overlay.remove();
		});

		this.dialog.append(this.buttons);
		this.checkSelectionState();
	},

	/**
	 * Stops the USR:CareCompass.AcknowledgeNewData timer after new results and new orders are loaded.
	 * @param none
	 */
	stopAcknowledgeDataTimer : function stopAcknowledgeDataTimerAfterLoad () {
	if(NoPatientListsScreen.isDisplayed() == false && NoPatientsScreen.isDisplayed() == false && ErrorScreen.isDisplayed() == false)
	{
		if(NewResults.loaded == true && NewOrders.loaded == true) {
				Timers.stop("USR:CareCompass.AcknowledgeNewData");
		}
	}
	},

	/**
	 * Sizes the dialog and its contents based on the size of the of the window.
	 * @param none
	 */
	size: function sizeReviewDialog() {
		this.buttons.css("top", this.dialog.height() - 35);
		this.buttons.css("width", this.dialog.width());
		this.content.css("height", this.dialog.height() - 103);
		Shadow.size();
	},

	/**
	 * Hides this dialog by animating it to slide to the top of the screen and fades out the overlay.
	 * @param none
	 */
	hide: function hideReviewDialog() {
		this.dialog.animate({top: 0 - this.dialog.height()}, 500, function() {
			if(ReviewDialog.container) {
				ReviewDialog.container.remove();
			}
			ReviewDialog.container = null;
			ReviewDialog.dialog = null;
			ReviewDialog.buttons = null;
			ReviewDialog.cancel = null;
			ReviewDialog.review = null;
			ReviewDialog.selectAll = null;
			ReviewDialog.deselectAll = null;
			Overlay.remove();
			Notifier.enable();
		});
	},

	/**
	 * Fades out the overlay and removes the dialog contents.
	 * @param none
	 */
	hideOverlay: function hideOverlay() {
		if(ReviewDialog.container) {
			ReviewDialog.container.remove();
		}
		Overlay.remove();
		ReviewDialog.container = null;
		ReviewDialog.dialog = null;
		ReviewDialog.buttons = null;
		ReviewDialog.cancel = null;
		ReviewDialog.review = null;
		ReviewDialog.selectAll = null;
		ReviewDialog.deselectAll = null;
		Notifier.enable();
	},

	/**
	 * Selects or deselects all orders in the orders section based on the header checkbox.
	 * @param none
	 */
	selectOrders: function selectReviewDialogOrders() {
		var allOrders = document.getElementById("select-all-orders");
		if(this.orders == null) {
			return;
		}
		if(allOrders.checked == false) {
			ReviewDialog.deselectAllOrders();
		}
		else {
			ReviewDialog.selectAllOrders();
		}
		this.checkSelectionState();
	},

	/**
	 * Selects or deselects all results in the results section based on the header checkbox.
	 * @param none
	 */
	selectResults: function selectReviewDialogResults() {
		var allResults = document.getElementById("select-all-results");
		if(this.results == null) {
			return;
		}
		if(allResults.checked == false) {
			ReviewDialog.deselectAllResults();
		}
		else {
			ReviewDialog.selectAllResults();
		}
		this.checkSelectionState();
	},

	/**
	 * Checks all the checkboxes in the result section.
	 * @param none
	 */
	selectAllResults: function selectAllReviewDialogResults() {
		if(this.results == null) {
			return;
		}
		for(var i = 0; i < this.results[0].rows.length; i++) {
			$(this.results[0].rows[i].cells[0]).children().attr("checked", true);
		}
	},

	/**
	 * Unchecks all the checkboxes in the result section.
	 * @param none
	 */
	deselectAllResults: function deselectAllReviewDialogResults() {
		if(this.results == null) {
			return;
		}
		for(var i = 0; i < this.results[0].rows.length; i++) {
			$(this.results[0].rows[i].cells[0]).children().attr("checked", false);
		}
	},

	/**
	 * Checks all the checkboxes in the order section.
	 * @param none
	 */
	selectAllOrders: function selectAllReviewDialogOrders() {
		if(this.orders == null) {
			return;
		}
		for(var i = 0; i < this.orders[0].rows.length; i++) {
			$(this.orders[0].rows[i].cells[0]).children().attr("checked", true);
		}
	},

	/**
	 * Unchecks all the checkboxes in the order section.
	 * @param none
	 */
	deselectAllOrders: function deselectAllReviewDialogOrders() {
		if(this.orders == null) {
			return;
		}
		for(var i = 0; i < this.orders[0].rows.length; i++) {
			$(this.orders[0].rows[i].cells[0]).children().attr("checked", false);
		}
	},

	/**
	 * Determines which header checkboxes should be checked and what the state of the dialog buttons should be
	 * based on the state of the check boxes in both the order and result sections.  Handles cases where either section doesn't exist.
	 * @param none
	 */
	checkSelectionState: function checkReviewDialogSelectionState() {
		var allResultsChecked = true;
		var noResultsChecked = true;
		var newResultsCount = this.results[0].rows.length - 1;
		if(this.results != null) {
			for(var i = 2; i <= newResultsCount ; i++) {
				if(this.results[0].rows[i].id == 0) {
					continue;
				}
				if($(this.results[0].rows[i].cells[0]).children()[0].checked == false) {
					allResultsChecked = false;
				}
				else {
					noResultsChecked = false;
				}
			}
			if(allResultsChecked) {
				$(this.results[0].rows[newResultsCount].cells[0]).children().attr("checked", true);
			}
			else if(noResultsChecked) {
				$(this.results[0].rows[newResultsCount].cells[0]).children().attr("checked", false);
			}
			else {
				$(this.results[0].rows[newResultsCount].cells[0]).children().attr("checked", false);
			}
		}

		var allOrdersChecked = true;
		var noOrdersChecked = true;
		var newOrdersCount = this.orders[0].rows.length - 1;
		if(this.orders != null) {
			for(var i = 2; i <= newOrdersCount; i++) {
				if(this.orders[0].rows[i].id == 0) {
					continue;
				}
				if($(this.orders[0].rows[i].cells[0]).children()[0] == null) {
					continue;
				}
				if($(this.orders[0].rows[i].cells[0]).children()[0].checked == false) {
					allOrdersChecked = false;
				}
				else {
					noOrdersChecked = false;
				}
			}
			if(allOrdersChecked) {
				$(this.orders[0].rows[newOrdersCount].cells[0]).children().attr("checked", true);
			}
			else if(noOrdersChecked) {
				$(this.orders[0].rows[newOrdersCount].cells[0]).children().attr("checked", false);
			}
			else {
				$(this.orders[0].rows[newOrdersCount].cells[0]).children().attr("checked", false);
			}
		}

		if(allOrdersChecked && allResultsChecked) {
			this.review[0].disabled = false;
		}else if(noResultsChecked && noOrdersChecked) {
			this.review[0].disabled = true;
		}else {
			this.review[0].disabled = false;
		}
	},

	/**
	 * Counts the result's checkboxes that are checked and updates the count next to the header.
	 * @param none
	 */
	countCheckedResults : function countCheckedResultsForReviewDialog(){
		if(this.results == null) {
			return;
		}

		var resultsChecked = 0;
		var numberOfResults = this.results[0].rows.length;
		for(var i = 0; i < numberOfResults; i++) {
			//Ignore the header
			if(this.results[0].rows[i].id == 0) {
				continue;
			}
			if($(this.results[0].rows[i].cells[0]).children()[0].checked == true) {
				resultsChecked++;
			}
		}

		document.getElementById("newResultsTableCount").innerText = "(" + resultsChecked + "/" + (numberOfResults-1) + ")";
	},

	/**
	 * Counts the order's checkboxes that are checked and updates the count next to the header.
	 * @param none
	 */
	countCheckedOrders : function countCheckedOrdersForReviewDialog(){
		if(this.orders == null) {
			return;
		}

		var ordersChecked = 0;
		var numberOfOrders = this.orders[0].rows.length;
		for(var i = 0; i < numberOfOrders; i++) {
			//Ignore the header
			if(this.orders[0].rows[i].id == 0) {
				continue;
			}
			if($(this.orders[0].rows[i].cells[0]).children()[0].checked == true) {
				ordersChecked++;
			}
		}

		document.getElementById("newOrdersTableCount").innerText = "(" + ordersChecked + "/" + (numberOfOrders-1) + ")";
	},

	/**
	 * Sends all the checked results for review.  If none are checked or the result section doesn't exist will do nothing.
	 * @param none
	 */
	reviewResults: function reviewResultsForReviewDialog() {
		if(this.results == null || this.results.length == 0) {
			return;
		}
		var resultIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		var versions = window.external.DiscernObjectFactory("DOUBLEMAP");
		for(var i = 0; i < this.results[0].rows.length; i++) {
			if($(this.results[0].rows[i].cells[0]).children() != null && $(this.results[0].rows[i].cells[0]).children().length > 0){
				if($(this.results[0].rows[i].cells[0]).children()[0].checked == true) {
					if(this.results[0].rows[i].resultId == "") {
						continue;
					}
					resultIds.Add(i, this.results[0].rows[i].resultId);
					versions.Add(i, this.results[0].rows[i].version);
				}
			}
		}
		if(resultIds.GetCount() > 0 && this.encounterId > 0) {
			var patient = Patients.getByEncounterId(this.encounterId);
			Service.reviewResults(resultIds, versions, this.encounterId, patient.patientId);
		}
	},

	/**
	 * Sends all the checked orders for review.  If none are checked or the order section doesn't exist will do nothing.
	 * @param none
	 */
	reviewOrders: function reviewOrdersForReviewDialog() {
		if(this.orders == null || this.orders.length == 0) {
			return;
		}
		var orderIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		var versions = window.external.DiscernObjectFactory("DOUBLEMAP");
		var nurseReviews = window.external.DiscernObjectFactory("DOUBLEMAP");
		var previousOrderId = 0;
		for(var i = 0; i < this.orders[0].rows.length; i++) {
			var orderId = this.orders[0].rows[i].orderId;
			if(orderId == "" || orderId == undefined) {
				continue;
			}
			if(($(this.orders[0].rows[i].cells[0]).children()[0] == null && orderId == previousOrderId) || (($(this.orders[0].rows[i].cells[0]).children()[0] != null) && ($(this.orders[0].rows[i].cells[0]).children()[0].checked == true))) {
				var orderActions = NewOrders.getOrderActionsByOrderId(orderId);
				for(var j = 0; j < orderActions.length; j++) {
					orderIds.Add((orderIds.GetCount() + 1), orderActions[j].id);
					versions.Add((versions.GetCount() + 1), orderActions[j].version);
					if(orderActions[j].isNurseReview() == true) {
						nurseReviews.add((nurseReviews.GetCount() + 1), 1);
					}else {
						nurseReviews.add((nurseReviews.GetCount() + 1), 0);
					}
				}
				previousOrderId = orderId;
			}
			else {
				previousOrderId = -1;
			}
		}
		if(orderIds.GetCount() > 0 && this.encounterId > 0) {
			var patient = Patients.getByEncounterId(this.encounterId);
			Service.reviewOrders(orderIds, versions, nurseReviews, this.encounterId, patient.patientId);
		}
	}
};

/**
 * The dialog to add allergies to a patient.
 */
var AllergiesDialog = {
	/**
	 * Displays the MPage allergies event modal window in Powerchart 
	 * @param patient - The single patient to display the dialog for
	 */
	display: function(patientId, encounterId) {
		MPAGES_EVENT("ALLERGY",patientId+"|"+encounterId+"|0|0|||0||0|0");
		Service.loadAllergies();
		Patients.refresh();	
	}
};

/**
 * The dialog to add allergies to a paitent.
 */
var LinkNavigation = {
	/**
	 * Displays the input tab for the input patient
	 * @param link - The link that was clicked on.
	 * @param patient - The patient to launch the navigation for.
	 * @param tab - The tab name to navigate to.
	 */
	display: function(patient, tab) {
		var patientId = patient.patientId;
		var encounterId = patient.encounterId;
		try{
			window.external.PCActivatePatArrows(1,"PatientNavigation",true);
			Patients.setIndexByEncounterId(encounterId);
			window.originalPatientList = PatientLists.getActiveId();
		}
		catch(e){
		
		}
		var param = '/PERSONID=' + patientId + ' /ENCNTRID=' + encounterId + ' /FIRSTTAB=^' + tab + '^';
		Timers.stop("USR:CareCompass.NameLaunchChart");
		APPLINK(0, User.appName, param);
	}
};

var QuickLinksNavigation = {
	create : function(patient) {
		var html = '';
		if(Configuration.quickLinks) {
			for(var i = 0; i < Configuration.quickLinks.length; i++) {
				var quickLink = Configuration.quickLinks[i];
				html += '<span class="patient-drill-down-quick-link" onclick="QuickLinksNavigation.launchLink(Configuration.quickLinks[' + i + '].link,' + patient.patientId +','+ patient.encounterId+ ')">' + quickLink.name + '</span>';
				html += '<br />';
			}
		}
		return html;
	},
	
	/**
	 * Launches the patient's chart to the input link
	 * @param link - The name of the PowerChart tab to launch to
	 */	
	launchLink: function(link, patientId, encounterId) {
		try{
			window.external.PCActivatePatArrows(1,"PatientNavigation",true);
			Patients.setIndexByEncounterId(encounterId);
			window.originalPatientList = PatientLists.getActiveId();
		}
		catch(e){
		
		}
		var param = '/PERSONID=' + patientId + ' /ENCNTRID=' + encounterId + ' /FIRSTTAB=^' + link + '^';
		APPLINK(0, User.appName, param);
	}
};

/**
 * The dialog to establish relationships with many or a single patient.
 */
var RelationshipDialog = {
	container: null,
	dialog: null,
	buttons: null,
	cancel: null,
	establish: null,
	selectAll: null,
	deselectAll: null,
	table: null,
	select: null,
	relationships: null,
	checked: "",
	patientNumber: 0,
	width: 0,
	patient: null,
	contentContainer: null,
	contentHeightVariance: 0,
	hasError: false,
	
	/**
	 * Displays the overlay and loads the available relationships for the patient(s).
	 * @param patient - The single patient to display the dialog for, if null then all patients without relationships will be displayed.
	 */	
	display: function displayRelationshipDialog(patient) {
		this.patient = patient;
		Notifier.disable();
		PatientDrillDown.remove();
		PlanOfCareOverlay.hideOverlay();
		this.relationships = null;
		Service.loadRelationships();
		Overlay.display(CareCompass.body);
	},

	/**
	 * Determines if the relationship dialog is displayed or not.
	 * @param none
	 * @return True if the relationship dialog is displayed, false if not.
	 */
	isDisplayed: function isRelationshipDialogDisplayed() {
		if (this.container != null) {
            return true;
        }
        return false;
	},
	
	/**
	 * Displays the dialog for the input patient or all patients after the data has loaded.
	 * @param none
	 */	
	load: function loadRelationshipDialog() {
		this.create(this.patient);
		CareCompass.body.append(this.container);
		this.select.prop("selectedIndex", -1);
		if(this.relationships != null && this.relationships.length > 0) {
			this.checkSelectionState();
		}
		this.size();
		this.dialog.css("top", 0 - this.dialog.height());
		this.dialog.css("left", (CareCompass.body.width() - this.dialog.width())/2)
		this.dialog.animate({top: 0}, 500);
	},
	
	/**
	 * Creates the dialog and its content.
	 * @param none
	 */	
	create: function createRelationshipDialog(patient) {
		this.width = Math.round(CareCompass.body.width() * 0.7);	
		this.container = $(document.createElement("div"));
		this.container.addClass("relationship-dialog-container");
		
		this.dialog  = $(document.createElement("div"));
		this.dialog.addClass("relationship-dialog");
		
		if(this.relationships != null && this.relationships.length > 0) {
			var html = '<table class="dialog-table">';
			html += this.createTitle();
			html += this.createSelect();
			html += this.createContent(patient);
			html += '</table>';
			this.dialog.append(html);

			this.select = $($(this.dialog.children()[0].rows[1].cells[0]).children()[1]);
			this.content = $(this.dialog.children()[0].rows[2].cells[0]);
			this.table = $($(this.content.children()[0]).children()[0]);

			this.contentHeightVariance = 101;
			
			this.populateSelect();
			this.createButtons();
		}
		else {
			var html = '<table class="dialog-table">';
			html += this.createTitle();
			html += '<tr>';
			html += '<td class="dialog-content-cell" style="width:' + this.width + '">';
			html += '</td>';
			html += '</tr>';
			html += '</table>';
			this.dialog.append(html);
			
			this.content = $(this.dialog.children()[0].rows[1].cells[0]);
			this.contentHeightVariance = 66;
			
			if(this.hasError) {
				RelationshipsErrorScreen.hasLoadError = true;
			}
				
			RelationshipsErrorScreen.display();
			
			this.content.css('overflow','hidden');
			this.createButtons();
			this.disableButtons();
		}
		
		this.container.append(this.dialog);
		
		Shadow.display(this.dialog);
	},
	
	/**
	 * Creates the relationship drop down selection.
	 * @param none
	 * @return The HTML string for the relationship drop down selection.
	 */	
	createSelect: function createRelationshipDialogSelect() {
		var html = '<tr>';
		html += '<td class="relationship-dialog-select-cell">';
		html += '<span class="required-symbol label">' + i18n.RELATIONSHIP + ' </span>';
		html += '<select class="relationship-select"></select>';
		html += '</td>';
		html += '</tr>';
		return html;
	},
	
	/**
	 * Populates the relationship drop down select with the relationships in the collection.
	 * Requires the relationship collection to be populated prior to population.
	 * @param none
	 */	
	populateSelect: function populateRelationshipDialogSelect() {
		if(this.relationships == null || this.select == null) {
			return;
		}
		var options = [];
		for (var i = 0; i < this.relationships.length; i++) {
			var option = $(document.createElement("option"));
			option.addClass("relationship-dialog-select-option");
			option.attr("value", this.relationships[i].code);
			option.text(this.relationships[i].display);
			options.push(option);
		}
		this.select.append(options);
		this.select.change(function() {
			RelationshipDialog.checkSelectionState();
		});
		Timers.stop("ENG:CareCompass.loadRelationships.ProcessTransaction");
		Timers.stop("ENG:CareCompass.loadRelationships.TotalTransaction");
	},
	
	getCheckBoxSelection: function getRelationshipCheckBoxSelection(checkBoxPatient){
		var checked = "";
		var numberOfCheckboxes = 0;
		for(var i = 0; i < Patients.patients.length; i++) {
			var patient = Patients.patients[i];
			if(patient.pprCd == 0) {
				numberOfCheckboxes++;
			}
		}
		
		if(numberOfCheckboxes == 1 || checkBoxPatient != null){
			checked = 'checked="checked"';
		}else if(numberOfCheckboxes > 1){
			if(Configuration.acknowledgeSelectAll == true){
				checked = 'checked="checked"';
			}
		}
		
		return checked;
	},
	
	/**
	 * Creates the relationship content table displaying the patients without relationships and their demographic identifiers.
	 * @param none
	 * @return The HTML for the patients without relationships table.
	 */	
	createContent: function createRelationshipDialogContent(patient) {		
		this.checked = this.getCheckBoxSelection(patient);
		var width = this.width - 35;
		var html = '<tr>';
		html += '<td class="dialog-content-cell" style="padding-left: 2px;">';
		html += '<div class="dialog-content">';
		html += '<table class="relationship-dialog-content" style="width:' + width + '">';
		html += '<tr>';
		html += '<td class="dialog-content-header-check-cell">';
		html += '<input type=checkbox checkbox ' + this.checked + ' onclick="RelationshipDialog.selectPatients()"></input>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-header-value-cell">';
		html += '<div class="relationship-dialog-content-header-value">' + i18n.NAME + '</div>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-header-value-cell">';
		html += '<div class="relationship-dialog-content-header-value">' + i18n.SEX + '</div>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-header-value-cell">';
		html += '<div class="relationship-dialog-content-header-value">' + i18n.DATE_OF_BIRTH + '</div>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-header-value-cell">';
		html += '<div class="relationship-dialog-content-header-value">' + i18n.MRN + '</div>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-header-value-cell">';
		html += '<div class="relationship-dialog-content-header-value">' + i18n.FIN + '</div>';
		html += '</td>';
		if(User.localeId == "EN_GB"){
			html += '<td class="relationship-dialog-content-header-value-cell">';
			html += '<div class="relationship-dialog-content-header-value">' + "NHS" + '</div>';//No i18n translation is required for NHS because it is only present in en_GB Locale
			html += '</td>';
		}
		html += '</tr>';
		
		if(patient != null) {
			html += this.createPatientRow(patient);	
		}
		else {
			for(var i = 0; i < Patients.patients.length; i++) {
				html += this.createPatientRow(Patients.patients[i]);
			}
		}
		
		html += '</table>';
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},
	
	/**
	 * Creates a row for a patient that does not have a relationship and their demographic identifiers.
	 * @param patient - The patient to create the row for.
	 * @return The HTML for the patient row.
	 */	
	createPatientRow: function createRelationshipDialogPatientRow(patient) {
		if(patient.pprCd != 0 || patient.encounterId == 0) {
			return "";
		}
		this.patientNumber++;
		var html = '<tr ';
		if(Sepsis.getDateTime(patient.patientId) != null) {
			html += 'class="striped-alert"';
		}
		else if(this.patientNumber % 2 == 0){
			html += 'class="striped"';
		}
		html += ' patientId="' + patient.patientId + '" encounterId="' + patient.encounterId + '">';
		html += '<td class="dialog-content-check-cell">';
		html += '<input type=checkbox checkbox ' + this.checked + ' onclick="RelationshipDialog.checkSelectionState()"></input>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-value-cell">';
		html += '<div class="relationship-dialog-content-value">' + patient.name + '</div>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-value-cell">';
		html += '<div class="relationship-dialog-content-value">' + patient.gender + '</div>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-value-cell">';
		html += '<div class="relationship-dialog-content-value">' + patient.getBirthDateDisplay() + '</div>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-value-cell">';
		html += '<div class="relationship-dialog-content-value">' + patient.mrn + '</div>';
		html += '</td>';
		html += '<td class="relationship-dialog-content-value-cell">';
		html += '<div class="relationship-dialog-content-value">' + patient.fin + '</div>';
		html += '</td>';
		if(User.localeId == "EN_GB"){
			html += '<td class="relationship-dialog-content-value-cell">';
			html += '<div class="relationship-dialog-content-value">' + patient.nhs + '</div>';
			html += '</td>';
		}
		html += '</tr>';
		return html;
	},
	
	/**
	 * Creates the title of this dialog.
	 * @param none
	 * @return The HTML for the dialog title cell.
	 */	
	createTitle: function createRelationshipDialogTitle() {
		var width = this.width - 35;
		var html = '<tr>';
		html += '<td class="review-dialog-title-cell" style="width:' + width + '">';
		html += '<div class="review-dialog-title">' + i18n.ESTABLISH_RELATIONSHIPS + '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},
	
	/**
	 * Creates and initializes the buttons section of this dialog.
	 * @param none
	 */	
	createButtons: function createRelationshipButtons() {
		var width = this.width + 5;
		this.buttons = $(document.createElement("div"));
		this.buttons.addClass("review-dialog-buttons");
		var html = '<table class="review-dialog-buttons-table" style="width:' + width + '">';
		html += '<tr>';
		html += '<td class="review-dialog-buttons-left">';
		html += '<input type="button" class="review-dialog-buttons-select-all" value="' + i18n.SELECT_ALL + '"/>';
		html += '<input type="button" class="review-dialog-buttons-deselect-all" value="' + i18n.DESELECT_ALL + '"/>';
		html += '</td>';
		html += '<td class="review-dialog-buttons-right">';
		html += '<input type="button" class="review-dialog-buttons-review" value="' + i18n.ESTABLISH + '"/>';
		html += '<input type="button" class="review-dialog-buttons-cancel" value="' + i18n.CANCEL + '"/>';
		html += '</td>';
		html += '</tr>';
		html += '</table>';
		this.buttons.append(html);
		this.selectAll = $($(this.buttons.children()[0].rows[0].cells[0]).children()[0]);
		this.deselectAll = $($(this.buttons.children()[0].rows[0].cells[0]).children()[1]);
		this.establish = $($(this.buttons.children()[0].rows[0].cells[1]).children()[0]);
		this.cancel = $($(this.buttons.children()[0].rows[0].cells[1]).children()[1]);
		this.selectAll.click(function() {
			RelationshipDialog.selectAllPatients();
			RelationshipDialog.checkSelectionState();
		});
		this.deselectAll.click(function() {
			RelationshipDialog.deselectAllPatients();
			RelationshipDialog.checkSelectionState();
		});
		this.establish.click(function() {
			RelationshipDialog.establishRelationships();
			RelationshipDialog.dialog.animate({top: 0 - RelationshipDialog.dialog.height()}, 500);
		});
		this.cancel.click(function() {
			RelationshipDialog.hide();
		});
		this.dialog.append(this.buttons);
	},
	
	/**
	 * Sizes this dialog and its content based on the size of the window.
	 * @param none
	 */	
	size: function sizeRelationshipButtons() {
		this.buttons.css("top", this.dialog.height() - 35);
		this.content.css("height", this.dialog.height() - this.contentHeightVariance);
		Shadow.size();
	},
	
	/**
	 * Hides the dialog by animating it to the top of the screen and fading out the overlay.
	 * @param none
	 */	
	hide: function hideRelationshipDialog() {
		this.dialog.animate({top: 0 - this.dialog.height()}, 500, function() {
			RelationshipDialog.hideOverlay();
		});
	},
	
	/**
	 * Fades out the overlay.
	 * @param none
	 */	
	hideOverlay: function hideRelationshipDialogOverlay() {
		if(this.container) {
			this.container.remove();
		}
		Overlay.remove();
		this.container = null;
		this.dialog = null;
		this.buttons = null;
		this.cancel = null;
		this.establish = null;
		this.selectAll = null;
		this.deselectAll = null;
		Notifier.enable();
	},
	
	/**
	 * Marks the patient rows as checked or unchecked based on the state of the header checkbox.
	 * @param none
	 */	
	selectPatients: function selectRelationshipDialogPatients() {
	
		if(this.table == null) {
			return;
		}
		if($(this.table[0].rows[0].cells[0]).children()[0].checked == false) {
			RelationshipDialog.deselectAllPatients();
		}
		else {
			RelationshipDialog.selectAllPatients();
		}
		this.checkSelectionState();
	},
	
	/**
	 * Marks the patient rows as checked.
	 * @param none
	 */	
	selectAllPatients: function selectAllRelationshipDialogPatients() {
		if(this.table == null) {
			return;
		}
		for(var i = 0; i < this.table[0].rows.length; i++) {
			$(this.table[0].rows[i].cells[0]).children().attr("checked", true);
		}
	},
	
	/**
	 * Marks the patient rows as unchecked.
	 * @param none
	 */	
	deselectAllPatients: function deselectAllRelationshipDialogPatients() {
		if(this.table == null) {
			return;
		}
		for(var i = 0; i < this.table[0].rows.length; i++) {
			$(this.table[0].rows[i].cells[0]).children().attr("checked", false);
		}
	},
	
	/**
	 * Determines the state of the header checkbox and the buttons based on the checked or unchecked rows.
	 * @param none
	 */	
	checkSelectionState: function checkRelationshipDialogSelectionState() {
		var allChecked = true;
		var checkCount = 0;
		var noneChecked = true;
		if(this.table != null) {
			for(var i = 1; i < this.table[0].rows.length; i++) {
				if(this.table[0].rows[i].encounterId == 0) {
					continue;
				}
				if($(this.table[0].rows[i].cells[0]).children()[0].checked == false) {
					allChecked = false;
				}
				else {
					noneChecked = false;
					checkCount++;
				}
			}
		}
		
		if(checkCount == this.table[0].rows.length -1)
		{
			allChecked = true; 
		}
		
		if(allChecked) {
			$(this.table[0].rows[0].cells[0]).children().attr("checked", true);
			this.selectAll[0].disabled = true;
			this.deselectAll[0].disabled = false;
			this.establish[0].disabled = false;
		}
		else if(noneChecked) {
			$(this.table[0].rows[0].cells[0]).children().attr("checked", false);
			this.selectAll[0].disabled = false;
			this.deselectAll[0].disabled = true;
			this.establish[0].disabled = true;
		}
		else {
			$(this.table[0].rows[0].cells[0]).children().attr("checked", false);
			this.selectAll[0].disabled = false;
			this.deselectAll[0].disabled = false;
			this.establish[0].disabled = false;
		}

		if (this.select[0].selectedIndex < 0) {
			this.establish[0].disabled = true;
		}
	},

	/**
	 * Disables all buttons excluding the cancel button.
	 * @param none
	 */	
	disableButtons: function disableDialogButtons() {
		this.selectAll[0].disabled = true;
		this.deselectAll[0].disabled = true;
		this.establish[0].disabled = true;
	},
	
	/**
	 * Establishes a relationship with the selected patients through the CareCompass service.
	 * @param none
	 */	
	establishRelationships: function establishRelationshipsForRelationshipDialog() {
		Timers.start("USR:CareCompass.EstablishRelationships");
		var patientIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		var encounterIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		var pprCd = this.select[0].options[this.select[0].selectedIndex].value;
		
		for(var i = 0; i < this.table[0].rows.length; i++) {
			if($(this.table[0].rows[i].cells[0]).children()[0].checked == true) {
				if(this.table[0].rows[i].patientId == "") {
					continue;
				}
				patientIds.Add(i, this.table[0].rows[i].patientId);
				encounterIds.Add(i, this.table[0].rows[i].encounterId);
			}
		}
		if(encounterIds.getCount() > 0) {
			Notifier.disable();
			Service.establishRelationships(pprCd, patientIds, encounterIds);
		}
	}
};

/**
 * The dialog to assist developers
 */
var DeveloperModeDialog = {
	container: null,
	dialog: null,
	buttons: null,
	cancel: null,
	captureIDs: null,
	copyAllInfo: null,
	table: null,
	width: 0,
	contentWidth: 0,
	height: 0,

	/**
	 * Displays the developer mode dialog
	 * @param none
	 */
	display: function displayDeveloperMode() {   
		Notifier.disable();
		this.create();

		ErrorDialog.hideOverlay();
		
		Overlay.display(CareCompass.body);
		PlanOfCareOverlay.hideOverlay();
		
		CareCompass.body.append(this.container);	
		this.size();
		this.dialog.css("top", 0 - this.dialog.height());
		this.dialog.css("left", (CareCompass.body.width() - this.dialog.width())/2);
		this.dialog.animate({top: 0}, 500);
		
        // TODO - temporary to enable developer dialog HTML cleanup 
//        CareCompass.setClipboardData( CareCompass.body.html( ) );

	},
	
	/**
	 * Determines if the developer dialog is displayed or not.
	 * @param none
	 * @return True if the developer mode dialog is displayed, false if not.
	 */
	isDisplayed: function isDeveloperModeDisplayed() {
		if (this.container != null) {
            return true;
        }
        return false;
	},

	/**
	 * Creates the dialog and its content.
	 * @param none
	 */	
	create: function createDeveloperModeDialog() {
		this.width = Math.round(CareCompass.body.width() * 0.7);	
        this.height = Math.round(CareCompass.body.height() * 0.9);    
		this.contentWidth = this.width - 35;
		this.container = $(document.createElement("div"));
		this.container.addClass("developer-dialog-container");
		this.container.css("width", CareCompass.body.width());
		this.dialog  = $(document.createElement("div"));
        this.dialog.css("width", this.width);
        this.dialog.css("height", this.height);
		this.dialog.addClass("developer-dialog-main");
		
		var html = '<table id="developerTable" class="developer-dialog-table">';
		html += this.createTitle();
		html += this.createContent();
		html += '</table>';
		this.dialog.append(html);
		
		this.content = $(this.dialog.children()[0].rows[0].cells[0]);
		this.table = $($(this.content.children()[0]).children()[0]);
		this.createButtons();
		
		this.container.append(this.dialog);
		
		Shadow.display(this.dialog);
	},
	
	/**
	 * Creates the developer mode content table displaying various statistics and information.
	 * @param none
	 * @return The HTML for the developer mode table.
	 */	
	createContent: function createDeveloperModeDialogContent() {		
		var html = '<tr>';
		html += '<td class="developer-dialog-content-cell">';
		html += '<div style="height:' + (this.height - 100) + 'px" class="developer-dialog-content">';
		html += this.createErrorSection();
		html += '<br/>';
		html += this.createTimerSection();
		html += '<br/>';
		html += this.createDataSection();
		
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},
	
	/**
	 * Create the section for call stack errors
	 * @param none
	 */
	createErrorSection: function() {
		var html = '<table class="developer-dialog-error-section" style="width:' + this.contentWidth + '">';
		html += this.createSectionHeader('Errors');
		html += this.createErrorRows();
		html += '</table>';
		return html;
	},
	
	/**
	 * Create the section for data counts
	 * @param none
	 */
	createDataSection: function() {
		var html = '<table class="developer-dialog-data-section" style="width:' + this.contentWidth + '">';
		html += this.createSectionHeader('Data');
		html += this.createDataRows();
		html += '</table>';
		return html;
	},
	
	/**
	 * Create the section for timer details
	 * @param none
	 */
	createTimerSection: function() {
		var html = '<table class="developer-dialog-timer-section">';
		html += this.createTimerSectionHeader('Timers');
		html += this.createTimerRows();
		html += '</table>';
		return html;
	},
	
	/**
	 * Creates a generic header spanning 2 columns
	 * @param header - the name of the header to display
	 */
	createSectionHeader: function createDeveloperModeDialogSectionHeader(header) {
		var html = '<tr>';
		html += '<td class="developermode-dialog-content-header-value-cell" colspan="2">';
		html += '<div class="developermode-dialog-content-header-value">' + header + '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},
	
	/**
	 * Creates the header for the timer section
	 * @param header - the name of the header to display
	 */
	createTimerSectionHeader: function createDeveloperModeDialogSectionHeader(header) {
		var html = '<tr>';
		html += '<td class="developermode-dialog-content-header-value-cell">' 
		html += '<div class="developermode-dialog-content-header-value">' + header + '</div>';
		html += '</td>';
		html += '<td class="developermode-dialog-content-header-value-cell">' 
		html += '<div class="developermode-dialog-content-header-value">' + 'Milliseconds' + '</div>';
		html += '</td>';
		html += '<td class="developermode-dialog-content-header-value-cell">' 
		html += '<div class="developermode-dialog-content-header-value">' + 'Seconds' + '</div>';
		html += '</td>';
		html += '<td class="developermode-dialog-content-header-value-cell">' 
		html += '<div class="developermode-dialog-content-header-value">' + 'Started' + '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},
	
	/**
	 * Creates the rows of the call stack errors
	 * @param none
	 */
	createErrorRows: function createDeveloperModeDialogErrorRows() {
		var html = '';
		
		var errors = CareCompass.errorObjects;
		for(var i=0; i < errors.length; i++) {
			var errorObject = errors[i];
			
			// Check if server error and display in a different format
			if(errorObject.src == 'S') {
				html += this.createServerErrorRows(errorObject,i);
				continue;
			}


			html += '<tr>';
			html += '<td colspan="4">';
			html += '<table class="relationship-dialog-content" style="width:100%">';
			html += '<tr>';
			html += '<td class="developermode-dialog-content-header-value-cell">';
			html += '<div class="developermode-dialog-content-data-value developermode-dialog-content-bold">' + 'Error #' + (i+1) + '</div>';
			html += '</td>';
			html += '</tr>';
			html += '<tr>';
			html += '<td class="developermode-dialog-content-header-value-cell">';
			html += '<div class="developermode-dialog-content-data-value">' + this.convertTabNewLine(errorObject.callStack) + '</div>';
			html += '</td>';
			html += '</tr>';
				
			// Create the rows for each function in each error object
			for(var index=0; index < errorObject.functions.length; index++) {
				var aFunction = errorObject.functions[index];
				var padding = (index+1)*40;
				html += '<tr>';
				html += '<td class="developermode-dialog-content-header-value-cell" style="padding-left:' + padding + 'px">';
				html += '<div class="developermode-dialog-content-data-value">Function Name: ' + this.convertTabNewLine(this.convertInvalidChars(aFunction.name)) + '</div>';
				html += '</td>';
				html += '</tr>';
				html += '<tr>';		
				html += '<td class="developermode-dialog-content-header-value-cell" style="padding-left:' + padding + 'px">';
				html += '<div class="developermode-dialog-content-data-value">Executing: ' + this.convertTabNewLine(this.convertInvalidChars(aFunction.functionCall)) + '</div>';
				html += '</td>';
				html += '</tr>';
				html += '<tr>';
				html += '<td class="developermode-dialog-content-header-value-cell" style="padding-left:' + padding + 'px">';
				html += '<div class="developermode-dialog-content-data-value">Arguments: ' + this.convertTabNewLine(this.convertInvalidChars(aFunction.arguments)) + '</div>';
				html += '</td>';
				html += '</tr>';
				html += '<tr>';
				html += '<td class="developermode-dialog-content-header-value-cell" style="padding-left:' + padding + 'px">';
				html += '<div class="developermode-dialog-content-data-value">Extra Info: ' + this.convertTabNewLine(this.convertInvalidChars(aFunction.info)) + '</div>';
				html += '</td>';
				html += '</tr>';
			}
			
			html += '</table>';
			html += '</td>';
			html += '</tr>';
		}
		return html;
	},

	/**
	 * Creates the rows of the server error
	 * @param errorObject - The CareCompass ErrorObject
	 * @param i - Error count
	 * @return html - the HTML element
	 */
	createServerErrorRows: function createDeveloperModeDialogServerErrorRows(errorObject,i) {
			var html = '';

			html += '<tr>';
			html += '<td class="developermode-dialog-content-header-value-cell">';
			html += '<div class="developermode-dialog-content-data-value developermode-dialog-content-bold">' + 'Error #' + (i+1) + '</div>';
			html += '</td>';
			html += '</tr>';
			html += '<tr>';
			html += '<td class="developermode-dialog-content-header-value-cell" style="width:100%">';
			html += '<div class="developermode-dialog-content-data-value-gray">' + this.convertTabNewLine(errorObject.callStack) + '</div>';
			html += '</td>';
			html += '</tr>';

			return html;
	},

	/**
	 * Converts the less than symbol since HTML cannot interpret it correctly
	 * @param aString - the string that may contain invalid characters
	 */
	convertInvalidChars: function(aString) {
		var cleanedString = aString.replace(/</g,'&lt;');
		
		return cleanedString;
	},

	/**
	 * Converts the tab and new line characters to respective HTML representation
	 * @param aString - the string that may contain tabs and new lines
	 */	
	convertTabNewLine: function(aString) {
		var adjustedString = aString.replace(/\n/g, '<br />');
		adjustedString = adjustedString.replace(/\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;');
		return adjustedString;
	},
	
	/**
	 * Create the timer rows
	 * @param none
	 */
	createTimerRows: function createDeveloperModeDialogTimerRows() {
		var html = '';

		var sortedTimers = Timers.sortBasicTimers();
		for(var groupIndex=0; groupIndex < sortedTimers.length; groupIndex++) {
			var timerGroup = sortedTimers[groupIndex];
			for(var timerIndex=0; timerIndex < timerGroup.timers.length; timerIndex++) {
				var timer = timerGroup.timers[timerIndex];
				
				var styleClass = '';
				if(timer.time > 1000) {
					styleClass = 'developermode-dialog-content-bold';
				}
				
				html += '<tr>';
				html += '<td class="developermode-dialog-content-header-value-cell">';
				if(!timer.isTransaction() || timer.isTotalTransaction()) {
					html += '<div class="developermode-dialog-content-value ' + styleClass + '">' + timer.timerName + '</div>';
				}
				else {
					html += '<div class="developermode-dialog-content-indented-value ' + styleClass + '">' + timer.timerName + '</div>';
				}
				html += '</td>';
				html += '<td class="developermode-dialog-content-header-value-cell">';
				html += '<div class="developermode-dialog-content-data-value ' + styleClass + '">' + timer.time + '</div>';
				html += '</td>';
				html += '<td class="developermode-dialog-content-header-value-cell">';
				html += '<div class="developermode-dialog-content-data-value ' + styleClass + '">' + timer.seconds + '</div>';
				html += '</td>';
				html += '<td class="developermode-dialog-content-header-value-cell">';
				html += '<div class="developermode-dialog-content-data-value ' + styleClass + '">' + timer.startTime.toTimeString() + '</div>';
				html += '</td>';
				html += '</tr>';
			}
		}
		return html;
	},
	
	/**
	 * Build an object representing the data counts
	 * @param displayName - the name of the task object to display
	 * @param array - the array of objects to count
	 * @return an object with a name and count
	 */
	buildCountObject: function (displayName, array) {
		if(array == undefined) {
			return null;
		}
		else {
			var countObject = {};
			countObject.name = displayName;
			countObject.count = array.length;
			return countObject;
		}
	},
	
	/**
	 * Build an object representing the task counts
	 * @param displayName - the name of the task object to display
	 * @param array - the array of task counts to total
	 * @return an object with a name and count
	 */
	buildTaskCountObject: function (displayName, array) {
		if(array == undefined) {
			return null;
		}
		else {
			var taskCount = 0;
			for(var index=0; index < array.length; index++) {
				taskCount += array[index].total;
			}
			
			var countObject = {};
			countObject.name = displayName;
			countObject.count = taskCount;
			return countObject;
		}
	},
	
	/**
	 * Create the HTML rows for the data objects
	 * @param none
	 */	
	createDataRows: function createDeveloperModeDialogDataRows() {
		var html = '';
		var index = 0;
		var datas = [];
		
		datas[index++] = this.buildCountObject('Care Teams', CareTeams.careTeams);
		datas[index++] = this.buildCountObject('New Orders', NewOrders.orders);
		datas[index++] = this.buildCountObject('New Results', NewResults.results);
		datas[index++] = this.buildCountObject('Patients', Patients.patients);
		datas[index++] = this.buildCountObject('Patient Lists', PatientLists.patientLists);
		datas[index++] = this.buildCountObject('Results', Results.results);
		datas[index++] = this.buildTaskCountObject('Tasks Overdue', Tasks.overdueTaskCounts);
		datas[index++] = this.buildTaskCountObject('Tasks Unscheduled', Tasks.unscheduledTaskCounts);
		datas[index++] = this.buildTaskCountObject('Tasks Current', Tasks.currentTaskCounts);
		
		for(var i=0; i<index; i++) {
			var data = datas[i];
			if (data == null) {
				continue; 
			}
			
			html += '<tr>';
			html += '<td class="developermode-dialog-content-header-value-cell">';
			html += '<div class="developermode-dialog-content-value">' + data.name + '</div>';
			html += '</td>';
			html += '<td class="developermode-dialog-content-header-value-cell">';
			html += '<div class="developermode-dialog-content-data-value">' + data.count + '</div>';
			html += '</td>';
			html += '</tr>';
		}
		return html;
	},
	
	/**
	 * Creates the title of this dialog.
	 * @param none
	 * @return The HTML for the dialog title cell.
	 */	
	createTitle: function createDeveloperModeDialogTitle() {
		var width = this.width - 35;
		var html = '<tr>';
		html += '<td class="developer-dialog-content-header-main">';
		html += '<div class="review-dialog-title">Developer Mode. ';
		html += 'Version: ' + cc_version + ' - Generated Date: ' + cc_date;
		html += '</div>';
		html += '<div class="review-dialog-title">';
		html += 'Browser version: ' + cc_browserVersion;
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},
	
	/**
	 * Creates and initializes the buttons section of this dialog.
	 * @param none
	 */	
	createButtons: function createDeveloperModeButtons() {
		var width = this.width + 5;
		this.buttons = $(document.createElement("div"));
		this.buttons.addClass("developer-dialog-buttons");
		var html = '<table class="review-dialog-buttons-table" style="width:' + width + '">';
		html += '<tr>';

		html += '<td class="review-dialog-buttons-right">';
		html += '<input type="button" class="review-dialog-buttons-cancel" value="' + 'Copy All Info' + '"/>';
		html += '<input type="button" class="review-dialog-buttons-cancel" value="' + 'Copy IDs' + '"/>';
		html += '<input type="button" class="review-dialog-buttons-cancel" value="' + 'Exit' + '"/>';
		html += '</td>';
		html += '</tr>';
		html += '</table>';
		this.buttons.append(html);
		
		var buttonIndex = 0;
		
		this.copyAllInfo = $($(this.buttons.children()[0].rows[0].cells[0]).children()[buttonIndex++]);
		this.copyAllInfo.click(function() {
			var htmlDump = $('#developerTable').parent().html();
			
			CareCompass.setClipboardData(htmlDump);
		});
		
		this.captureIDs = $($(this.buttons.children()[0].rows[0].cells[0]).children()[buttonIndex++]);
		this.captureIDs.click(function() {
			var idString = 'Patient IDs:\n';
			
			for(var index=0; index < Patients.debugPatientIdObject.length; index++) {
				var patientIdObject = Patients.debugPatientIdObject[index];
				idString += 'Patient Id: ' + patientIdObject.patientId + '\t' + 'Encounter Id: ' + patientIdObject.encounterId + '\n';
			}
			
			idString += '\nTask IDs:\n';
			
			for(var taskId in Tasks.tasks) {
				var task = Tasks.tasks[taskId];
				idString += 'Task Id: ' + task.id + '\t' + 'Encounter Id: ' + task.encounterId + '\n';
			}
			
			CareCompass.setClipboardData(idString);
		});
		
		
		this.cancel = $($(this.buttons.children()[0].rows[0].cells[0]).children()[buttonIndex++]);
		this.cancel.click(function() {
			CareCompass.exitDebugMode();
		});
		this.dialog.append(this.buttons);
	},
	
	/**
	 * Sizes this dialog and its content based on the size of the window.
	 * @param none
	 */	
	size: function sizeDeveloperModeButtons() {
		this.width = Math.round(CareCompass.body.width() * 0.7);	
		this.dialog.css("width", this.width);
		Shadow.size();
	},
	
	/**
	 * Hides the dialog by animating it to the top of the screen and fading out the overlay.
	 * @param none
	 */	
	hide: function hideDeveloperModeDialog() {
		if(this.dialog!=null) {
			this.dialog.animate({top: 0 - this.dialog.height()}, 500, function() {
				DeveloperModeDialog.hideOverlay();
			});
		}
	},
	
	/**
	 * Fades out the overlay.
	 * @param none
	 */	
	hideOverlay: function hideDeveloperModeDialogOverlay() {
		if(this.container) {
			this.container.remove();
		}
		
		Overlay.remove();
		this.container = null;
		this.dialog = null;
		this.buttons = null;
		this.cancel = null;
		this.captureIDs = null;
		this.copyAllInfo = null;
		Notifier.enable();
		table: null;
	}
}
/**
 * The dialog to establish Error screen when javascript error occurs.
 */
var ErrorDialog = {
	container: null,
	dialog: null,
	buttons: null,
	cancel: null,
 	moreinfo:null,
 	table: null,
  	width: 0,
	
	/**
	 * Displays the dialog for the input patient or all patients.
	 * @param patient - The single patient to display the dialog for, if null then all patients without relationships will be displayed.
	 */	
	display: function displayErrorDialog() {
		if(ErrorDialog.container!=null){
			return;
		}
		Notifier.disable();
		this.create();
		Overlay.display(CareCompass.body);
		CareCompass.body.append(this.container);	
		this.size();
		this.dialog.css("top", 0 - this.dialog.height());
		this.dialog.css("left", (CareCompass.body.width() - this.dialog.width())/2);
		this.dialog.animate({top: 0}, 500);
	},
	
	/**
	 * Determines if the error dialog is displayed or not.
	 * @param none
	 * @return True if the error dialog is displayed, false if not.
	 */
	isDisplayed: function isErrorDialogDisplayed() {
		if (this.container != null) {
            return true;
        }
        return false;
	},

	/**
	 * Creates the dialog and its content.
	 * @param none
	 */	
	create: function createErrorDialog( ) {
		this.width = Math.round(CareCompass.body.width() * 0.4);	
		this.container = $(document.createElement("div"));
		this.container.addClass("error-dialog-container");
		
		this.dialog  = $(document.createElement("div"));
		this.dialog.addClass("error-dialog-main");
		
		var html = '<table class="error-dialog-table">';
//		html += this.createTitle();
 		html += this.createContent();
		html += '</table>';
		this.dialog.append(html);
		
 		this.content = $(this.dialog.children()[0].rows[0].cells[0]);
		this.table = $($(this.content.children()[0]).children()[0]);
		this.createButtons();
		
		this.container.append(this.dialog); 
 		Shadow.display(this.dialog);
	},
	
	 

	/**
	 * Creates the relationship content table displaying the patients without relationships and their demographic identifiers.
	 * @param none
	 * @return The HTML for the patients without relationships table.
	 */	
	createContent: function createErrorDialogContent( ) {		
 		var width = this.width - 35;
		var html = '<tr>';
		html += '<td class="error-dialog-content-cell" style="width:' + width + '">';
		html += ErrorScreen.create(i18n.SYSTEM_FAILURE);
		html += '</td>';
		html += '</tr>';
		return html;
	},
	
//	/**
//	 * Creates the title of this dialog.
//	 * @param none
//	 * @return The HTML for the dialog title cell.
//	 */	
//	createTitle: function createErrorDialogTitle() {
//		var width = this.width - 35;
//		var html = '<tr>';
//		html += '<td class="review-dialog-title-cell" style="width:' + width + '">';
//		html += '<div class="review-dialog-title"></div>';
//		html += '</td>';
//		html += '</tr>';
//		return html;
//	},
	
	/**
	 * Creates and initializes the buttons section of this dialog.
	 * @param none
	 */	
	createButtons: function createButtons() {
		var width = this.width-15;
		this.buttons = $(document.createElement("div"));
		this.buttons.addClass("error-dialog-button-cancel");
		var html = '<input type="button"  value="' + i18n.CANCEL + '"/>';
		this.buttons.append(html);
		this.cancel = $($(this.buttons.children()[0]));
   
		this.cancel.click(function() {
			ErrorDialog.hide();
		});
		this.dialog.append(this.buttons);
	},
	
	/**
	 * Sizes this dialog and its content based on the size of the window.
	 * @param none
	 */	
	size: function sizeButtons() {
		this.buttons.css("top", this.dialog.height() - 35);
		this.content.css("height", this.dialog.height() - 101);
		Shadow.size();
	},
	
	/**
	 * Hides the dialog by animating it to the top of the screen and fading out the overlay.
	 * @param none
	 */	
	hide: function hideErrorDialog() {
		if(this.dialog!=null) {
			this.dialog.animate({top: 0 - this.dialog.height()}, 500, function() {
				ErrorDialog.hideOverlay();
			});
		}
	},
	
	/**
	 * Fades out the overlay.
	 * @param none
	 */	
	hideOverlay: function hideErrorDialogOverlay() {
		if(this.container) {
			this.container.remove();
		}
		Overlay.remove();
		this.container = null;
		this.dialog = null;
		this.buttons = null;
		this.cancel = null;
 		this.moreinfo = null;
		Notifier.enable();
	}
	 
};

/**
 * The screen that displays when there are no patient lists for the current user.
 */
var PatientDrillDownErrorScreen = {
 	drillDownErrScreen: null,
 	
	/**
	 * Creates the screen for patientdrill down error.
	 * @param label to display
	 */	
	display: function displayPatientDrillDownError(label, htmlObj) {

		if(label!=i18n.SYSTEM_FAILURE){  
			//PatientDrillDown.tasksContainer
			htmlObj.append(this.create(label));
			this.drillDownErrScreen =  $(htmlObj.children()[3]); 
  		}else{ 
  			//PatientDrillDown.container.
  			htmlObj.prepend(this.create(label));
			this.drillDownErrScreen =  $(htmlObj.children()[0]);
 		}

 	},
 
	/**
	 * Hides the screen.
	 * @param none
	 */	
	hide: function hideDrillDownErrorScreen() {
		if(this.drillDownErrScreen != null) {
			this.drillDownErrScreen.remove();
			this.drillDownErrScreen = null;
 		}
	}, 
	 
	/**
	 * Creates the screen.
	 * @param label to display
	 */	
	create: function createErrorScreen(label) {
		var html = '<div class="error-screen">';
		html += '<div class="error-screen-image"></div>';
		html += '<div class="error-screen-primary-label">' + label + '</div>';
		if(label==i18n.SYSTEM_FAILURE){
 			html += '<span class="error-screen-link">' + i18n.SHOW_DETAILS + '</span>';
 		}
 		html += '</div>';
		return html;
		
	},
 
	/**
	 * Returns whether the screen is displayed or not.
	 * @param none
	 * @return - True if the screen is displayed, false if not.
	 */	
	isDisplayed: function isDrillDownErrorScreenDisplayed() {
		if(this.drillDownErrScreen == null) {
			return false;
		}
		return true;
	}
};

/**
 * The screen that displays when there are no relationships for the current user to establish.
 */
var RelationshipsErrorScreen = {
 	relationshipsErrorScreen: null,
 	hasLoadError: false,
 	
	/**
	 * Creates the screen for no relationships error in Establish Relationship dialog.
	 * @param label to display
	 */	
	display: function displayRelationshipsError() {
		var content = $(RelationshipDialog.content);
		content.append(this.create());
		this.relationshipsErrorScreen = $(content.children()[0]);		
		var borderWidth = 18;
		this.relationshipsErrorScreen.css("width", RelationshipDialog.width - borderWidth);
 	},
 
	/**
	 * Hides the screen.
	 * @param none
	 */	
	hide: function hideRelationshipsErrorScreen() {
		if(this.relationshipsErrorScreen != null) {
			this.relationshipsErrorScreen.remove();
			this.relationshipsErrorScreen = null;
 		}
	}, 
	 
	/**
	 * Creates the screen.
	 * @param none
	 */	
	create: function createErrorScreen() {
		var html = '<div class="dialog-content">';
		html += '<div class="error-screen-image"></div>';
		if(this.hasLoadError) {
			html += '<div class="error-screen-primary-label">' + i18n.SYSTEM_FAILURE + '</div>';
			html += '<div class="error-screen-link" onclick="DeveloperModeDialog.display();">' + i18n.SHOW_DETAILS + '</div>';
		}
		else {
			html += '<div class="error-screen-primary-label">' + i18n.NO_RELATIONSHIPS + '</div>';
		}
 		html += '</div>';
		return html;
	},
 
	/**
	 * Returns whether the screen is displayed or not.
	 * @param none
	 * @return - True if the screen is displayed, false if not.
	 */	
	isDisplayed: function isRelationshipErrorScreenDisplayed() {
		if(this.relationshipsErrorScreen == null) {
			return false;
		}
		return true;
	}
};

/**
 * Represents the bar at the top of CareCompass.
 */
var Toolbar = {
	patientListSelect: null,
	timer: null,
	listMaintenanceButton: null,
	addPatientButton: null,
	establishRelationshipsButton: null,
	sepsisAlert: null,
	newDataButton: null,
	developerModeButton: null,
	helpButton: null,
	table: null,

	/**
	 * Creates and displays the tool bar visuals at the top of CareCompass.
	 * @param none
	 */	
	create: function createToolbar() {
		if(this.table != null) {
			this.newDataButton.remove();
			this.newDataButton = null;
			this.helpButton.remove();
			this.helpButton = null;
		}
		else {
			//A table is created to allow for easier vertical alignment
			this.table = $(document.createElement("table"));
			this.table.addClass("toolbar");
			var row = $(document.createElement("tr"));
			row.addClass("toolbar");
			this.table.append(row);
		
			//The toolbar is actually a table cell to allow for vertical alignment.
			CareCompass.toolbar = $(document.createElement("td"));
			CareCompass.toolbar.addClass("toolbar");
			row.append(CareCompass.toolbar);
			CareCompass.body.append(this.table);
			PatientListSelect.create();
		
			this.listMaintenanceButton = new ToolbarButton("toolbar-button-list", i18n.LIST_MAINTENANCE, i18n.LAUNCH_LIST_MAINTENANCE);
			this.listMaintenanceButton.display(CareCompass.toolbar, ListMaintenance);
		
			this.addPatientButton = new ToolbarButton("toolbar-button-add", i18n.ADD_PATIENT, i18n.LAUNCH_ADD_PATIENT);
			this.addPatientButton.display(CareCompass.toolbar, PatientSearch);
			
			this.establishRelationshipsButton = new ToolbarButton("toolbar-button-relationship", i18n.ESTABLISH_RELATIONSHIPS, i18n.LAUNCH_ESTABLISH_RELATIONSHIPS);
			this.establishRelationshipsButton.display(CareCompass.toolbar, RelationshipDialog);
			this.establishRelationshipsButton.disable();
		
			this.developerModeButton = new ToolbarButton("", "Developer Mode", "Developer Mode");
			this.developerModeButton.display(CareCompass.toolbar, DeveloperModeDialog);
			this.developerModeButton.hide();
		
			this.sepsisAlert = $(document.createElement('span'));
			this.sepsisAlert.addClass("sepsis-summary");
			this.sepsisAlert.css("right", 0);
			CareCompass.toolbar.append(this.sepsisAlert);

		}

		this.newDataButton = NewDataButton;
		this.newDataButton.display(CareCompass.toolbar, NewDataMenu);
		this.newDataButton.initializeNewDataButton();
		this.newDataButton.button.attr("id", "newDataMenu");
		this.newDataButton.disable();

		this.helpButton =  HelpButton;
		this.helpButton.display(CareCompass.toolbar);

		this.timer = $(document.createElement("span"));
		this.timer.addClass("label patient-list");
		CareCompass.toolbar.append(this.timer);
	},

	/**
	 * Sets the focus on CareCompass toolbar after refresh.
	 * @param none
	 */
	setFocus: function setToolbarFocus() {
		if (this.table == null) {
			return;
		}
		this.table.focus();
	}
};

/**
 * Represents the right click menu that is displayed over a patient row.
 */	
var NewDataMenu = {
	container : null,
	patientCount: 0,
	
	/**
	 * Displays the right click menu at the cursor position.
	 * @param cursor - The cursor that was used to right click.
	 * @param patient - The Patient object associated with the right click menu.
	 */	
	display: function() {
		this.patientCount = 0;
		this.remove();
		this.container = $(document.createElement('div'));
		this.container.addClass("right-click-menu");
		this.container.append(this.create());
		CareCompass.body.append(this.container);
		this.container.css("top", $("#newDataMenu").position().top);
		this.container.css("right", 19);
		this.container.click(function(event) {
			event.stopPropagation();		
		});

		if(this.container.children().children()[0].rows.length > 8) {
			this.container.children().width(267);
		}
		for(var i = 0; i < this.container.children().children()[0].rows.length; i++) {
			var option = $(this.container.children().children()[0].rows[i]);
			if(i == 0) {
				$(option[0].cells[0]).css("border-bottom" , "1px solid #CDCDCD");
				continue;
			}
			option.mouseover(function() {
				$(this).addClass("highlighted");
				$(this).children().css("color", "#FFFFFF");
			});
			option.mouseleave(function() {
				$(this).removeClass("highlighted");
				$(this).children().css("color", "#000000");
			});
		}
		
		//If we click outside of the button, remove the menu
		$('body').bind('click', function(e) {
			if($(e.target).closest('#newDataMenu').length == 0) {
				NewDataMenu.remove();
			}
		});
		
		Shadow.display(this.container);
	},
	
	/**
	 * Creates the right click menu.
	 * @param none
	 * @return - The HTML string for the right click menu.
	 */	
	create : function() {
		var html = '<div class="new-data-dialog-container">'
		html += '<table id="newDataDialogTable" class="new-data-dialog">'
		html += '<tr>';
		html += '<td class="new-data-dialog-patient-label-cell">';
		html += '<div class="hover-label">' + i18n.PATIENT + '</div>';
		html += '</td>';
		html += '<td class="new-data-dialog-value-label-cell">';
		html += '<div class="">' + i18n.RESULTS + '</div>';
		html += '</td>';
		html += '<td class="new-data-dialog-value-label-cell">';
		html += '<div class="">' + '&nbsp;' + i18n.ORDERS + '</div>';
		html += '</td>';
		html += '</tr>';
		for(var i = 0; i < Patients.patients.length; i++) {
			html += this.createPatientRow(Patients.patients[i]);
		}
		html += '</table>';
		html += '</div>'
		return html;
	},
	
	/**
     * Creates a row for a patient that does not have a relationship and their demographic identifiers.
     * @param patient - The patient to create the row for.
     * @return The HTML for the patient row.
     */
    createPatientRow: function createNewDataMenuPatientRow(patient) {
        var results = NewResults.getByEncounterId(patient.encounterId);
        var orders = NewOrders.getByEncounterId(patient.encounterId);
        if((results != null && results.length > 0) || (orders != null && orders.length > 0)){
			var html = '<tr patientId="' + patient.patientId + '" encounterId="' + patient.encounterId + '" onclick="ReviewDialog.display(' + patient.encounterId + ')" >';
            html += '<td class="new-data-dialog-patient-cell">';
            html += '<div class="new-data-dialog-value">' + patient.getName() + '</div>';
            html += '</td>';
			
			var criticalResults = false;
            if(results != null){
                for(var j = 0; j < results.length; j++) {
                    var result = results[j];
                    if(result.isCritical()){
                        criticalResults = true;
                        break;
                    }
                }
            }

			var criticalOrders = false;
			var orderCount = 0;
			var previousOrderId = 0;
            if(orders != null){
                for(var j = 0; j < orders.length; j++) {
                    var order = orders[j];
					if(order.orderId != previousOrderId) {
						orderCount++;
					}
					previousOrderId = order.orderId;
                    if(order.stat){
                        criticalOrders = true;
                    }
                }
            }

			html += '<td class="new-data-dialog-value-cell">';
			
			if(results != null && results.length > 0) {
				if(criticalResults) {
					html += '<div class="new-data-dialog-value new-data-dialog-critical">' + results.length + '</div>';
				}
				else {
					html += '<div class="new-data-dialog-value">' + results.length + '</div>';
				}
			}
			else {
				html += '<div class="new-data-dialog-value">--</div>';
			}
			html += '</td>';
			html += '<td class="new-data-dialog-value-cell">';

			if(orders != null && orders.length > 0){
				if(criticalOrders) {
					html += '<div class="new-data-dialog-value new-data-dialog-critical">' + orderCount + '</div>';
				}
				else {
					html += '<div class="new-data-dialog-value">' + orderCount + '</div>';
				}
			}
			else {
				html += '<div class="new-data-dialog-value">--</div>';
			}
            html += '</td>';
            html += '</tr>';
            return html;
        }
		
		return "";
	},
	
	/**
	 * Removes the right click menu.
	 * @param none
	 */	
	remove : function() {
		if(NewDataMenu.container != null) {
            NewDataMenu.container.remove();
            NewDataMenu.container = null;
			NewDataButton.removeClick();
		}
	}
}

/**
 * A button to be displayed within the toolbar.
 */
var NewDataButton = {
	image: null,
	label: null,
	button: null,
	clicked: false,
	
	/**
	 * Creates a button with the input image and label.
	 * @param none
	 * @return - The HTML string of the button.
	 */
	create: function() {
		var html = '<table class="toolbar-button-table">';
		html += '<tr>';
		html += '<td class="toolbar-button-left"></td>';
		html += '<td class="toolbar-button-image"><div id="new-data-image" class="new-indicator-image-dithered"></div></td>';
		html += '<td class="toolbar-button-label" id="new-data-count">0</td>';
		html += '<td class="toolbar-button-right"></td>';
		html += '</tr>';
		html += '</table>';
		return html;
	},
	
	/**
	 * Change the current new data image to a different image
	 * @param image - the image to change the new data icon with
	 */
	changeImage: function changeNewDataImage(image) {
		this.image.removeClass();
		this.image.addClass(image);
		this.image.css("cursor", "default");
	},
	
	/**
	 * Update the count of the new data icon
	 */
	updateCount: function updateNewDataCount(){
		var newResultsCount = NewResults.results.length;
		var newOrdersCount = NewOrders.orderCount;
		if(newResultsCount > 0 || newOrdersCount > 0){
			this.enable();
			$("#new-data-count").text(newResultsCount + newOrdersCount);
			
			if(NewResults.containsCritical == true || NewOrders.containsUrgent == true){
				this.changeImage("new-indicator-image urgent");			
			}else{
				this.changeImage("new-indicator-image");
			}
		}else{
			this.disable();
			$("#new-data-count").text(0);
			this.changeImage("new-indicator-image-dithered");
		}
	},
	
	/**
	 * Displays the button and initializes the various states of the button
	 * @param toolbar - The toolbar to display this button on.
	 * @param dialog - The dialog to display when clicking the button.
	 */
	display: function displayNewDataToolbarButton(toolbar, dialog) {
		this.button = $(document.createElement('div'));
		this.button.addClass("new-data-button");
		this.button.attr ("id", "new-data-button");
		var offset = CareCompass.body.width() - 110;
		this.button.css("margin-left", offset);
		this.button.append(this.create());
		this.image = $(this.button.children()[0].rows[0].cells[1]).children();
		var config = {    
			 over: function(e) {Hover.display(e, i18n.NEW_DATA_HEADER, i18n.NEW_DATA)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		this.button.hoverIntent(config);
		this.button.mouseover(function() {
			if(this.disabled == true) {
				return;
			}
			NewDataButton.addHover();
		});

		this.button.mouseleave(function() {
			if(this.disabled == true) {
				return;
			}
			NewDataButton.removeHover();
			if(NewDataButton.clicked == false) {
				NewDataButton.removeClick();
			}
		});

		this.button.mousedown(function() {
			if(this.disabled == true) {
				return;
			}
			NewDataButton.addClick();
		});

		this.button.mouseup(function() {
			if(this.disabled == true) {
				return;
			}
			NewDataButton.removeHover();
		});

		toolbar.append(this.button);
	},
	
	/**
	 * Adds the clicked state of the button.
	 * @param none
	 */
	addClick: function addNewDataClick() {
		Hover.hide();
		$(this.button.children()[0].rows[0].cells[0]).addClass("toolbar-button-left click");
		$(this.button.children()[0].rows[0].cells[1]).addClass("toolbar-button-image click");
		$(this.button.children()[0].rows[0].cells[2]).addClass("toolbar-button-label click");
		$(this.button.children()[0].rows[0].cells[3]).addClass("toolbar-button-right click");
		NewDataButton.clicked = true;
	},

	/**
	 * Removes the clicked state of the button.
	 * @param none
	 */
	removeClick: function removeNewDataClick() {
		$(this.button.children()[0].rows[0].cells[0]).removeClass("click");
		$(this.button.children()[0].rows[0].cells[1]).removeClass("click");
		$(this.button.children()[0].rows[0].cells[2]).removeClass("click");
		$(this.button.children()[0].rows[0].cells[3]).removeClass("click");
		NewDataButton.clicked = false;
	},

	/**
	 * Adds the clicked state of the button.
	 * @param none
	 */
	addHover: function addNewDataHover() {
		$(this.button.children()[0].rows[0].cells[0]).addClass("toolbar-button-left hover");
		$(this.button.children()[0].rows[0].cells[1]).addClass("toolbar-button-image hover");
		$(this.button.children()[0].rows[0].cells[2]).addClass("toolbar-button-label hover");
		$(this.button.children()[0].rows[0].cells[3]).addClass("toolbar-button-right hover");
	},

	/**
	 * Removes the hover state of the button.
	 * @param none
	 */
	removeHover: function removeNewDataHover() {
		$(this.button.children()[0].rows[0].cells[0]).removeClass("hover");
		$(this.button.children()[0].rows[0].cells[1]).removeClass("hover");
		$(this.button.children()[0].rows[0].cells[2]).removeClass("hover");
		$(this.button.children()[0].rows[0].cells[3]).removeClass("hover");
	},
	
	/**
	 * Disables the button by dithering its display and text.
	 * @param none
	 */
	disable: function disableNewDataButton() {
		this.button[0].disabled = true;
		$(this.button.children()[0].rows[0].cells[1]).addClass("new-indicator-image-dithered");
	},
	
	/**
	 * Enables the button.
	 * @param none
	 */
	enable: function enableNewDataButton() {
		this.button[0].disabled = false;
		$(this.button.children()[0].rows[0].cells[1]).removeClass("new-indicator-image-dithered");
	},	
	
	/**
	 * Initializes the right click action for this row.
	 * @param patient - The patient associated to this row.
	 */	
	initializeNewDataButton: function() {
		this.button.mousedown(function(event) {
			switch (event.button) {
		        case 1:
                    if(NewDataMenu.container != null){
                        NewDataMenu.remove();
						event.stopPropagation();
                    }else{
                        NewDataMenu.display(event);
                        event.stopPropagation();
                    }
                    break;
			}
		});
	},

	/**
	 * Removes the New Data Button
	 */
	 remove: function removeNewDataButton() {
	 	this.button.remove();
	 }
};

/**
 * A button to be displayed within the toolbar.
 */
		var HelpButton = {

			helpButton : null,
 			/**
			* Creates the html for Help Button
			*/
			create: function(){
				var html = '<table class="toolbar-help-button-container">';
				html += '<tr>';
		 		html += '<td class="toolbar-button-image"><a target="_blank" href="https://wiki.ucern.com/display/carecompassHP/CareCompass+1.3+Help"><div class="toolbar-button-help"></div></a></td>';
		 		html += '</tr>';
				html += '</table>'; 
				return html;
			},

			/**
			 * Displays help pages on  single left click .
			 * @param  .toolbar is carecompass toolbar 
			 * 
			 */	
			display: function(toolbar){

				this.helpButton = $(document.createElement('div')); 
				this.helpButton.addClass('help-button');
				var offset = CareCompass.body.width() - 50;
				this.helpButton.css("margin-left", offset);
				this.helpButton.append(this.create()); 
				toolbar.append(this.helpButton);
				this.createHelpButtonHover();
 	 		},
 	 		/**
			 *  create Help Button Hover
			 *  
			 * @param none
			 */	
			createHelpButtonHover: function() {
				var content = i18n.HELP_TEXT;
				var config = {    
					 over: function(e) {Hover.display(e, "", content);},
					 timeout: 200,
					 out: function(e) {Hover.hide();},
					 interval: 200
				};
				this.helpButton.hoverIntent(config);
			},

			/**
	 		 * Removes the Help Button
	 		 */
	 		remove: function removeNewDataButton() {
	 			this.helpButton.remove();
	 		}
 		}

/**
 * A button to be displayed within the toolbar.
 */
function ToolbarButton(image, label, description) {
	this.image = image;
	this.label = label;
	this.description = description;
	this.button = null;

	/**
	 * Creates a button with the input image and label.
	 * @param none
	 * @return - The HTML string of the button.
	 */
	this.create = function createToolbarButton() {
		var html = '<table class="toolbar-button-table">';
		html += '<tr>';
		html += '<td class="toolbar-button-left"></td>';
		html += '<td class="toolbar-button-image"><div class="'+ this.image + '"></div></td>';
		html += '<td class="toolbar-button-label">' + this.label + '</td>';
		html += '<td class="toolbar-button-right"></td>';
		html += '</tr>';
		html += '</table>';
		return html;
	};
	
	/**
	 * Displays the button and initializes the various states of the button
	 * @param toolbar - The toolbar to display this button on.
	 * @param dialog - The dialog to display when clicking the button.
	 */
	this.display = function displayToolbarButton(toolbar, dialog) {
		this.button = $(document.createElement('div'));
		this.button.addClass("toolbar-button");
		this.button.append(this.create());

		this.button.mouseover(function() {
			if(this.disabled == true) {
				return;
			}
			$($(this).children()[0].rows[0].cells[0]).addClass("toolbar-button-left hover");
			$($(this).children()[0].rows[0].cells[1]).addClass("toolbar-button-image hover");
			$($(this).children()[0].rows[0].cells[2]).addClass("toolbar-button-label hover");
			$($(this).children()[0].rows[0].cells[3]).addClass("toolbar-button-right hover");
		});
		this.button.mouseleave(function() {
			if(this.disabled == true) {
				return;
			}
			$($(this).children()[0].rows[0].cells[0]).removeClass("hover");
			$($(this).children()[0].rows[0].cells[1]).removeClass("hover");
			$($(this).children()[0].rows[0].cells[2]).removeClass("hover");
			$($(this).children()[0].rows[0].cells[3]).removeClass("hover");
			$($(this).children()[0].rows[0].cells[0]).removeClass("click");
			$($(this).children()[0].rows[0].cells[1]).removeClass("click");
			$($(this).children()[0].rows[0].cells[2]).removeClass("click");
			$($(this).children()[0].rows[0].cells[3]).removeClass("click");
		});
		this.button.mousedown(function() {
			if(this.disabled == true) {
				return;
			}
			$($(this).children()[0].rows[0].cells[0]).addClass("toolbar-button-left click");
			$($(this).children()[0].rows[0].cells[1]).addClass("toolbar-button-image click");
			$($(this).children()[0].rows[0].cells[2]).addClass("toolbar-button-label click");
			$($(this).children()[0].rows[0].cells[3]).addClass("toolbar-button-right click");
		});
		this.button.mouseup(function() {
			if(this.disabled == true) {
				return;
			}
			if(dialog != null) {
				dialog.display();
			}
			$($(this).children()[0].rows[0].cells[0]).removeClass("hover");
			$($(this).children()[0].rows[0].cells[1]).removeClass("hover");
			$($(this).children()[0].rows[0].cells[2]).removeClass("hover");
			$($(this).children()[0].rows[0].cells[3]).removeClass("hover");
			$($(this).children()[0].rows[0].cells[0]).removeClass("click");
			$($(this).children()[0].rows[0].cells[1]).removeClass("click");
			$($(this).children()[0].rows[0].cells[2]).removeClass("click");
			$($(this).children()[0].rows[0].cells[3]).removeClass("click");
		});
		toolbar.append(this.button);
	}
	
	/**
	 * Disables the button by dithering its display and text.
	 * @param none
	 */
	this.disable = function disableToolbarButton() {
		this.button[0].disabled = true;
		$(this.button.children()[0].rows[0].cells[1]).addClass("dithered");
	}
	
	/**
	 * Enables the button.
	 * @param none
	 */
	this.enable = function enableToolbarButton() {
		this.button[0].disabled = false;
		$(this.button.children()[0].rows[0].cells[1]).removeClass("dithered");
	}
	
		/**
	 * Hides and disables the button by changing the display.
	 * @param none
	 */
	this.hide = function hideToolbarButton() {
		this.button[0].disabled = true;
		$(this.button.children()[0].rows[0]).addClass("toolbar-button-hide");
	}
	
	/**
	 * Shows and enables the button by changing the display.
	 * @param none
	 */
	this.show = function showToolbarButton() {
		this.button[0].disabled = false;
		$(this.button.children()[0].rows[0]).removeClass("toolbar-button-hide");
	}
};

/**
 * Represents the PowerChart List Maintenance dialog.
 */
var ListMaintenance = {
	object: window.external.DiscernObjectFactory("PMLISTMAINTENANCE"),
	
	/**
	 * Displays the list maintenance dialog, and based on its return value refreshes the patient lists.
	 * @param none
	 */
	display: function displayListMaintenance() {
		NewDataMenu.remove();
		if(this.object != null) {    
                    Overlay.display(CareCompass.body);
                    PlanOfCareOverlay.hideOverlay();
			if(this.object.OpenListMaintenanceDialog() == 0) {
                                       Overlay.remove();  
				return;
			}
			Timers.start("USR:CareCompass.RefreshPatientLists");
                          Overlay.remove();     
			PatientLists.refresh();
		}
	}
};

/**
 * Represents the PowerChart Patient Search dialog.
 */
var PatientSearch = {
	object: window.external.DiscernObjectFactory("PVPATIENTSEARCHMPAGE"),
	
	/**
	 * Displays the patient search dialog, and based on its return value adds the patient and refreshes the active patient list.
	 * @param none
	 */
		display: function displayPatientSearch() {
			if(this.object != null) {
                Overlay.display(CareCompass.body);
                PlanOfCareOverlay.hideOverlay();
				var result = this.object.SearchForPatientAndEncounter();
				if(result.EncounterId == 0) {
					Overlay.remove(); 
					return;
				}
				var existingPatient = Patients.getByEncounterId(result.EncounterId);
				if(existingPatient != null) {
					 alert(existingPatient.name+' '+i18n.PATIENT_ALREADY_PRESENT);
					 Overlay.remove(); 
				}
				else{
	                Overlay.remove(); 
					Notifier.disable();
					Timers.start("USR:CareCompass.AddPatientToList");
					Service.addPatient(result.PersonId, result.EncounterId);
					PatientDrillDown.remove();
				}
			}
		}
};

/**
 * Represents the patient list selection dropdown in the toolbar.
 */
var PatientListSelect = {
	options: [],
	/**
	 * Creates the patient list select control.
	 * @param none
	 */	
	create: function createPatientListSelect() {
		var patientListLabel = $(document.createElement("span"));
		patientListLabel.addClass("label patient-list");
		patientListLabel.text(i18n.PATIENT_LIST + ": ");
		Toolbar.patientListSelect = $(document.createElement("select"));
		Toolbar.patientListSelect.addClass("patient-list-select");
		
		this.disable();
		Toolbar.patientListSelect.change(function() {
			PatientLists.change(this.options[this.selectedIndex].value);
		});
		
		CareCompass.toolbar.append(patientListLabel, Toolbar.patientListSelect);

		Toolbar.patientListSelect.mousedown(function() {
			Hover.hide();
		});
	},
	
	/**
	 * Populates the patient list select control from the Patient Lists object.
	 * @param none
	 */	
	populate: function populatePatientListSelect() {
		this.reset();
		var activePatientListId = PatientLists.getActiveId();
		var maxLength = 0;
		for (var i = 0; i < PatientLists.count(); i++) {
			var patientList = PatientLists.get(i);
			var option = $(document.createElement("option"));
			option.attr("value", patientList.id);
			option.text(patientList.name);
			if(patientList.name.length > maxLength) {
				maxLength = patientList.name.length;
			}
			this.options.push(option);
			
			//Mark the currently displayed list as the selected option
			if (activePatientListId > 0) {
				if (activePatientListId == patientList.id) {
					option.attr("selected", true);
				}
			}
		}

		Toolbar.patientListSelect.append(this.options);
		this.enable();

		if(Toolbar.patientListSelect.width() > 150) {
			Toolbar.patientListSelect.removeClass(" no-lists");
		}
		else if(Toolbar.patientListSelect.width() <  maxLength * 7.143){
			Toolbar.patientListSelect.css("width", maxLength * 7.143 );
		}
	},
	
	/**
	 * Disables the patient list select control.
	 * @param none
	 */	
	disable: function disablePatientListSelect() {
		Toolbar.patientListSelect.attr("disabled", "disabled");
	},
	
	/**
	 * Enables the patient list select control.
	 * @param none
	 */	
	enable: function enablePatientListSelect() {
		Toolbar.patientListSelect.removeAttr("disabled");
	},
	/**
	 * Resets the patient list select control to allow for a new set of lists to be populated.
	 * @param none
	 */	
	reset: function resetPatientListSelect() {
		this.options.length = 0;
		Toolbar.patientListSelect.empty();
	},
	
	/**
	 * Sets a list as active and begins loading it.
	 * @param patientListId - The unique identifier of the patient list to set as active and begin loading.
	 */	
	selectList: function selectListInPatientListSelect(patientListId) {
		var optionFound = false;
		for(var i = 0; i < this.options.length; i++) {
			var option = this.options[i];
			if(option != null && option.attr("value") == patientListId) {
				option.selected = true;
				optionFound = true;
				break;
			}
		}
		if(optionFound == false) {
			return;
		}
		PatientLists.setActiveId(patientListId);
		Service.loadPatients(patientListId);
	}
};

/**
 * The screen that displays when there are no patient lists for the current user.
 */
var NoPatientListsScreen = {
	screen: null,
	
	/**
	 * Displays the screen.
	 * @param none
	 */	
	display: function displayNotPatientListsScreen() {
		PatientTable.remove();
		PatientDrillDown.remove();
		ActivityTimeline.remove();
		this.screen = $(document.createElement('div'));
		this.screen.addClass("no-patient-lists");
		this.screen.append(this.create);
		CareCompass.body.append(this.screen);
		var link = $(this.screen.children()[3]);
		link.mouseover(function() {
			$(this).addClass("no-patient-lists-link hover");
		});
		link.mouseleave(function() {
			$(this).removeClass("hover");
		});
		link.mouseup(function() {
			ListMaintenance.display();
		});
		PatientListSelect.disable();
		Toolbar.addPatientButton.disable();
		Timers.cancel("USR:CareCompass.LoadPrimaryCareNurseList");
		Timers.cancel("USR:CareCompass.LoadDepartmentalList");
		Timers.stop("USR:CareCompass.ChangePatientLists");
		Timers.stop("USR:CareCompass.GlobalLoad");
	},
	
	/**
	 * Hides the screen.
	 * @param none
	 */	
	hide: function() {
		if(this.screen != null) {
			this.screen.remove();
			this.screen = null;
		}
	},
	
	/**
	 * Creates the screen.
	 * @param none
	 * @return - The HTML string representing the no patients screen.
	 */	
	create: function createNoPatientListsScreen() {
		var html = '<div class="no-patient-lists-image"></div>';
		html += '<div class="no-patient-lists-primary-label">' + i18n.NO_ACTIVE_LISTS + '</div>';
		html += '<span class="no-patient-lists-secondary-label">' + i18n.NO_ACTIVE_LISTS_LINE_2 + ' </span>';
		html += '<span class="no-patient-lists-link">' + i18n.LIST_MAINTENANCE + '</span>';
		return html;
	},
	
	/**
	 * Returns whether the screen is displayed or not.
	 * @param none
	 * @return - True if the screen is displayed, false if not.
	 */	
	isDisplayed: function isNoPatientListsScreenDisplayed() {
		if(this.screen == null) {
			return false;
		}
		return true;
	}
};

/**
 * The screen that displays when there are no patient lists for the current user.
 */
var NoPatientsScreen = {
	screen: null,
	
	/**
	 * Displays the screen.
	 * @param none
	 */	
	display: function displayNoPatientsScreen(label) {
		PatientTable.remove();
		Overlay.remove();
		PatientDrillDown.remove();
		ActivityTimeline.remove();
		Toolbar.establishRelationshipsButton.disable();
		this.screen = $(document.createElement('div'));
		this.screen.addClass("no-patients");
		if(label != null) {
			this.screen.append(this.createCustomLabel(label));
		}
		else if(PatientLists.getActive().modifiable == false) {
			this.screen.append(this.createNoModify());
		}
		else {
			this.screen.append(this.create());
		}
		CareCompass.body.append(this.screen);
		PatientListSelect.enable();
		Timers.cancel("USR:CareCompass.LoadPrimaryCareNurseList");
		Timers.cancel("USR:CareCompass.LoadDepartmentalList");
		Timers.stop("USR:CareCompass.ChangePatientLists");
		Timers.stop("USR:CareCompass.GlobalLoad");
	},
	
	/**
	 * Hides the screen.
	 * @param none
	 */	
	hide: function hideNoPatientsScreen() {
		if(this.screen != null) {
			this.screen.remove();
			this.screen = null;
		}
	},
	
	/**
	 * Creates the screen.
	 * @param none
	 * @return - The HTML string for the no patients screen.
	 */	
	create: function createNoPatientsScreen() {
		var html = '<div class="no-patients-image"></div>';
		html += '<div class="no-patients-primary-label">' + i18n.NO_PATIENTS + '</div>';
		html += '<span class="no-patients-link" onclick="PatientSearch.display()">' + i18n.NO_PATIENTS_ADD_PATIENT + '</span>';
		html += '<span class="no-patients-secondary-label">' + " " + i18n.NO_PATIENTS_LINE_3 + '</span>';
		return html;
	},
	
	/**
	 * Creates the screen and disables modification.
	 * @param none
	 * @return - The HTML string for the no patients screen.
	 */	
	createNoModify: function createNoModifyPatientsScreen() {
		var html = '<div class="no-patients-image"></div>';
		html += '<div class="no-patients-primary-label">' + i18n.NO_PATIENTS + '</div>';
		html += '<span class="no-patient-lists-secondary-label">' + i18n.NO_PATIENTS_MANAGE_LIST + " " + '</span>';
		html += '<span class="no-patients-link" onclick="ListMaintenance.display()">' + i18n.LIST_MAINTENANCE + '</span>';
		return html;
	},

	/**
	 * Creates the screen and disables modification.
	 * @param none
	 * @return - The HTML string for the no patients screen.
	 */	
	createCustomLabel: function createCustomLabelPatientsScreen(label) {
		var html = '<div class="no-patients-image"></div>';
		html += '<div class="no-patients-primary-label">' + label + '</div>';
		html += '<span class="no-patient-lists-secondary-label">' + i18n.NO_PATIENTS_MANAGE_LIST + " " + '</span>';
		html += '<span class="no-patients-link" onclick="ListMaintenance.display()">' + i18n.LIST_MAINTENANCE + '</span>';
		return html;
	},
	
	/**
	 * Returns whether the screen is displayed or not.
	 * @param none
	 * @return - True if the screen is displayed, false if not.
	 */	
	isDisplayed: function isNoPatientsScreenDisplayed() {
		if(this.screen == null) {
			return false;
		}
		return true;
	}
};

/**
 * The screen that displays when there are no patient lists for the current user.
 */
var ErrorScreen = {
	screen: null, 
	
	/**
	 * Displays the screen.
	 * @param none
	 */	
	display: function displayErrorScreen(label) {
		if(!this.isDisplayed()){
	 		this.screen = $(document.createElement('div'));
			this.screen.addClass("error-screen");
			this.screen.append(this.create(label));
			CareCompass.body.append(this.screen);
			showServerErrors(); //Call a separate function for server errors
			ActivityTimeline.remove();
		}
	},
	
	 
	/**
	 * Hides the screen.
	 * @param none
	 */	
	hide: function hideErrorScreen() {
		if(this.screen != null) {
  			$('.error-screen').remove();
			this.screen = null;
 		}
	},
	 
	/**
	 * Creates the screen.
	 * @param label to display
	 */	
	create: function createErrorScreen(label){
		var html = '<div class="error-screen">';
		html += '<div class="error-screen-image"></div>';
		html += '<div class="error-screen-primary-label">' + label + '</div>';
		html += '<span class="error-screen-link" onclick="DeveloperModeDialog.display();">' + i18n.SHOW_DETAILS + '</span>';
 		html += '</div>';
		return html;
	},

  
	/**
	 * Returns whether the screen is displayed or not.
	 * @param none
	 * @return - True if the screen is displayed, false if not.
	 */	
	isDisplayed: function isErrorScreenDisplayed() {
		if(this.screen == null) {
			return false;
		}
		return true;
	}

	 
};

/**
 * The visual cell displaying the location header.
 */
var LocationHeader = {
	cell: null,
	sortedAscending: false,
	sort: null,
	label: null,
	
	/**
	 * Creates and initializes the location column header
	 * @param none
	 */	
	create: function createLocationHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.attr("id", "locationHeader");
		this.cell.addClass("patient-table-header-location");
		PatientTableHeader.headers.push(this.cell);
		this.label = $(document.createElement("div"));
		this.label.text(i18n.LOCATION);
		this.label.addClass("patient-table-header-location-label truncate");
		this.cell.append(this.label);
		
		var sort = $(document.createElement("div"));
		this.sort = sort;	
		this.cell.append(sort);
		
		if(PatientTable.sort == "LOCATION") {
			if(this.sortedAscending) {
				sort.addClass("sort-up");
			}
			else {
				sort.addClass("sort-down");
			}
		}
		
		this.cell.mouseover(function() {
			if(PatientDrillDown.isDisplayed()) {
				return;
			}
			if(PatientTable.sort == "LOCATION") {
				if(LocationHeader.sortedAscending == true) {
					sort.addClass("sort-up-dark");
				}
				else {
					sort.addClass("sort-down-dark");
				}
			}
			else {
				if(LocationHeader.sortedAscending == false) {
					sort.addClass("sort-up");
				}
				else {
					sort.addClass("sort-down");
				}
			}
		});
		
		this.cell.mouseout(function() {
			if(PatientDrillDown.isDisplayed()) {
				return;
			}
			if(PatientTable.sort == "LOCATION") {
				if(LocationHeader.sortedAscending == true) {
					sort.removeClass("sort-up-dark");
				}
				else {
					sort.removeClass("sort-down-dark");
				}
			}
			else {
				if(LocationHeader.sortedAscending == false) {
					sort.removeClass("sort-up");
				}
				else {
					sort.removeClass("sort-down");
				}
				LocationHeader.sortedAscending = false;
			}
		});
				
		this.cell.mouseup(function() {
			if(PatientDrillDown.isDisplayed()) {
				return;
			}
			if(LocationHeader.sortedAscending == false) {
				LocationHeader.sortedAscending = true;
			}
			else {
				LocationHeader.sortedAscending = false;
			}
			PatientTable.sortByLocation(LocationHeader.sortedAscending, true);
			PatientHeader.sortedAscending = false;
			VisitHeader.sortedAscending = false;
		});
	},

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializeLocationHeaderHover() {
		Hover.displayForTruncation(this.label);
	} ,     
        
        
	/**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeLocationHeader() {
	    this.sort.css("left", Columns.location.width/2);
		this.cell.css("width", Columns.location.width + 1);
		this.sizeContents();
	},
	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizeLocationHeaderContents() {
	 
		this.label.css("width", Columns.location.width - 5);
	}
}

/**
 * The visual cell representing the patient header cell.
 */
var PatientHeader = {
	cell: null,
	sortedAscending: false,
	sort: null,
	label: null,
		
	/**
	 * Creates and initializes the patient column header
	 * @param none
	 */	
	create: function createPatientHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-patient");
		this.cell.attr("id", "patientHeader");
		PatientTableHeader.headers.push(this.cell);
		this.label = $(document.createElement("div"));
		this.label.text(i18n.PATIENT);
		this.label.addClass("patient-table-header-patient-label");
		this.cell.append(this.label);
		
		var sort = $(document.createElement("div"));
		this.sort = sort;		
		this.cell.append(sort);
		
		if(PatientTable.sort == "PATIENT") {
			if(this.sortedAscending) {
				sort.addClass("sort-up");
			}
			else {
				sort.addClass("sort-down");
			}
		}
		
		this.cell.mouseover(function() {
			if(PatientDrillDown.isDisplayed()) {
				return;
			}
			if(PatientTable.sort == "PATIENT") {
				if(PatientHeader.sortedAscending == true) {
					sort.addClass("sort-up-dark");
				}
				else {
					sort.addClass("sort-down-dark");
				}
			}
			else {
				if(PatientHeader.sortedAscending == false) {
					sort.addClass("sort-up");
				}
				else {
					sort.addClass("sort-down");
				}
			}
		});
		
		this.cell.mouseout(function() {
			if(PatientDrillDown.isDisplayed()) {
				return;
			}
			if(PatientTable.sort == "PATIENT") {
				if(PatientHeader.sortedAscending == true) {
					sort.removeClass("sort-up-dark");
				}
				else {
					sort.removeClass("sort-down-dark");
				}
			}
			else {
				if(PatientHeader.sortedAscending == false) {
					sort.removeClass("sort-up");
				}
				else {
					sort.removeClass("sort-down");
				}
				PatientHeader.sortedAscending = false;
			}
		});
				
		this.cell.mouseup(function() {
			if(PatientDrillDown.isDisplayed()) {
				return;
			}
			if(PatientHeader.sortedAscending == false) {
				PatientHeader.sortedAscending = true;
			}
			else {
				PatientHeader.sortedAscending = false;
			}
			PatientTable.sortByPatient(PatientHeader.sortedAscending, true);
			LocationHeader.sortedAscending = false;
			VisitHeader.sortedAscending = false;
		});
	},
	
	/**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizePatientHeader() {
		this.cell.css("width", Columns.patient.width);
		this.sizeContents();
	},
	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizePatientHeaderContents() {
		this.sort.css("left", Columns.patient.width/2);
		this.label.css("width", Columns.patient.width - 27);
	},

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializePatientHeaderHover() {
		Hover.displayForTruncation(this.label);
	}
}

/**
 * The visual cell representing the visit header cell.
 */
var VisitHeader = {
	cell: null,
	sortedAscending: false,
	sort: null,
	label: null,
	
	/**
	 * Creates and initializes the visit column header
	 * @param none
	 */	
	create: function createVisitHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-visit");
		this.cell.attr("id", "visitHeader");
		PatientTableHeader.headers.push(this.cell);
		this.label = $(document.createElement("div"));
		this.label.text(i18n.VISIT);
		this.label.addClass("patient-table-header-visit-label truncate");
		this.cell.append(this.label);
		if(Configuration.acuity) {
			var sort = $(document.createElement("div"));
			this.sort = sort;
			this.cell.append(sort);
		
		
		if(PatientTable.sort == "ACUITY") {
			if(this.sortedAscending) {
				sort.addClass("sort-up");
			}
			else {
				sort.addClass("sort-down");
			}
		}
		
		this.cell.mouseover(function() {
			if(PatientTable.sort == "ACUITY") {
				if(VisitHeader.sortedAscending == true) {
					sort.addClass("sort-up-dark");
				}
				else {
					sort.addClass("sort-down-dark");
				}
			}
			else {
				if(VisitHeader.sortedAscending == false) {
					sort.addClass("sort-up");
				}
				else {
					sort.addClass("sort-down");
				}
			}
		});
		
		this.cell.mouseout(function() {
			if(PatientTable.sort == "ACUITY") {
				if(VisitHeader.sortedAscending == true) {
					sort.removeClass("sort-up-dark");
				}
				else {
					sort.removeClass("sort-down-dark");
				}
			}
			else {
				if(VisitHeader.sortedAscending == false) {
					sort.removeClass("sort-up");
				}
				else {
					sort.removeClass("sort-down");
				}
				VisitHeader.sortedAscending = false;
			}
		});
				
		this.cell.mouseup(function() {
			if(VisitHeader.sortedAscending == false) {
				VisitHeader.sortedAscending = true;
			}
			else {
				VisitHeader.sortedAscending = false;
			}
		
			PatientTable.sortByAcuity(VisitHeader.sortedAscending, true);
			LocationHeader.sortedAscending = false;
			PatientHeader.sortedAscending = false;
		});
		}
	},
	
	/**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeVisitHeader() {
		if(this.sort) {
			this.sort.css("left", Columns.visit.width/2);
		}
		this.cell.css("width", Columns.visit.width);
		this.sizeContents();
	},
	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizeVisitHeaderContents() {
	 
		this.label.css("width", Columns.visit.width - 5);
	},

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializeVisitHeaderHover() {
		Hover.displayForTruncation(this.label);
	}
}

/**
 * The visual cell representing the Care Team header cell.
 */
var CareTeamHeader = {
	cell: null,
	label: null,
	
	/**
	 * Creates and initializes the care team column header
	 * @param none
	 */	
	create: function createCareTeamHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-care-team");
		this.cell.attr("id", "careTeamHeader");
		PatientTableHeader.headers.push(this.cell);
		this.label = $(document.createElement("div"));
		this.label.text(i18n.CARE_TEAM);
		this.label.addClass("patient-table-header-care-team-label truncate");
		this.cell.append(this.label);
	},

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializeCareTeamHeaderHover() {
		Hover.displayForTruncation(this.label);
	}, 
	
	/**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeCareTeamHeader() {

		this.cell.css("width", Columns.careTeam.width);
		this.sizeContents();
	},
	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizeCareTeamHeaderContents() {
		this.label.css("width", Columns.careTeam.width - 5);
	}
}

/**
 * The visual cell representing the custom header cell.
 */
var CustomHeader = {
	cell: null,
	label: null,
	
	/**
	 * Creates and initializes the custom column header
	 * @param customLabel - the custom header label
	 */	
	create: function createCustomHeader(customLabel) {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-custom");
		this.cell.attr("id", "customHeader");
		PatientTableHeader.headers.push(this.cell);
		this.label = $(document.createElement("div"));
		this.label.text(customLabel);
		this.label.addClass("patient-table-header-custom-label truncate");
		this.cell.append(this.label);
	},

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializeCustomHeaderHover() {
		Hover.displayForTruncation(this.label);
	},
                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeCustomHeader() {	
		for(var i = 0; i < Columns.customs.length; i++) {
			if(this.label.text() == Columns.customs[i].header.label.text()) {
				this.cell.css("width", Columns.customs[i].width - 10);
				this.sizeContents();	
			}
		}
	},	
	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizeCustomHeaderContents() {	 
		for(var i = 0; i < Columns.customs.length; i++) {
			if(this.label.text() == Columns.customs[i].header.label.text()) {
				this.label.css("width", Columns.customs[i].width - 10);	
			}
		}
		
	}
}

/**
 * The visual cell representing the custom header cell.
 */
var VentilatorHeader = {
    cell: null,
    label: null,

    /**
     * Creates and initializes the custom column header
     * @param none
     */
    create: function createVentilatorHeader() {
        this.cell = $(document.createElement("td"));
        this.cell.addClass("patient-table-header-ventilator");
        this.cell.attr("id", "ventilatorHeader");
        PatientTableHeader.headers.push(this.cell);
        this.label = $(document.createElement("div"));
        this.label.text(i18n.VENTILATOR);
        this.label.addClass("patient-table-header-ventilator-label truncate");
        this.cell.append(this.label);
    },

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializeVentilatorHeaderHover() {
		Hover.displayForTruncation(this.label);
	},                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeVentilatorHeader() {
		this.cell.css("width", Columns.ventilator.width);
		this.sizeContents();
	},	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizeVentilatorHeaderContents() {	 
		this.label.css("width", Columns.ventilator.width - 5);
	}
}

/**
 * The visual cell representing the pH header cell.
 */
var BloodGasesHeaderPH = {
    cell: null,
    label: null,

    /**
     * Creates and initializes the pH column header
     * @param none
     */
    create: function createBloodGasesHeaderPH() {
        this.cell = $(document.createElement("td"));
        this.cell.addClass("patient-table-header-bloodGasesPH");
        this.cell.attr("id", "bloodGasesHeaderPH");
        PatientTableHeader.headers.push(this.cell);

//        this.label = $(document.createElement("div"));
//        this.label.append( i18n.PH );
//        this.label.addClass("patient-table-header-bloodGasesPH-label truncate");
        this.cell.append(i18n.PH);
    } ,                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeBloodGasesPHHeader() {
		this.cell.css("width", Columns.bloodGasesPH.width + 1);
//		this.sizeContents();
//	},	
//	/**
//	 * Sizes the contents of the header based on the width of the column.
//	 * @param none
//	 */	
//	sizeContents: function sizeBloodGasesPHHeaderContents() {	 
//		this.label.css("width", Columns.bloodGasesPH.width - 5);
	}
     
}

/**
 * The visual cell representing the o2Sat header cell.
 */
var BloodGasesHeaderO2Sat = {
    cell: null,
    label: null,

    /**
     * Creates and initializes the o2Sat column header
     * @param none
     */
    create: function createBloodGasesHeaderO2Sat() {
        this.cell = $(document.createElement("td"));
        this.cell.addClass("patient-table-header-bloodGasesO2Sat");
        this.cell.attr("id", "bloodGasesHeaderO2Sat");
        PatientTableHeader.headers.push(this.cell);

//        this.label = $(document.createElement("div"));
//        this.label.append( i18n.O2SAT );
//        this.label.addClass("patient-table-header-bloodGasesO2Sat-label truncate");
        this.cell.append(i18n.O2SAT);
    } ,                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeBloodGasesO2SatHeader() {
		this.cell.css("width", Columns.bloodGasesO2Sat.width + 1);
//		this.sizeContents();
//	},
//	
//	/**
//	 * Sizes the contents of the header based on the width of the column.
//	 * @param none
//	 */	
//	sizeContents: function sizeBloodGasesO2SatHeaderContents() {	 
//		this.label.css("width", Columns.bloodGasesO2Sat.width - 5);
	}
}

/**
 * The visual cell representing the HCO3 header cell.
 */
var BloodGasesHeaderHCO3 = {
    cell: null,
    label: null,

    /**
     * Creates and initializes the HCO3 column header
     * @param none
     */
    create: function createBloodGasesHeaderHCO3() {
        this.cell = $(document.createElement("td"));
        this.cell.addClass("patient-table-header-bloodGasesHCO3");
        this.cell.attr("id", "bloodGasesHeaderHCO3");
        PatientTableHeader.headers.push(this.cell);

//        this.label = $(document.createElement("div"));
//        this.label.append( i18n.HCO3 );
//        this.label.addClass("patient-table-header-bloodGasesHCO3-label truncate");
        this.cell.append(i18n.HCO3);
    }
    ,                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeBloodGasesHCO3Header() {
		this.cell.css("width", Columns.bloodGasesHCO3.width + 1);
//		this.sizeContents();
//	},	
//	/**
//	 * Sizes the contents of the header based on the width of the column.
//	 * @param none
//	 */	
//	sizeContents: function sizeBloodGasesHCO3HeaderContents() {	 
//		this.label.css("width", Columns.bloodGasesHCO3.width - 5);
	}
}

/**
 * The visual cell representing the PaCO2 header cell.
 */
var BloodGasesHeaderPaCO2 = {
    cell: null,
    label: null,

    /**
     * Creates and initializes the PaCO2 column header
     * @param none
     */
    create: function createBloodGasesHeaderPaCO2() {
        this.cell = $(document.createElement("td"));
        this.cell.addClass("patient-table-header-bloodGasesPaCO2");
        this.cell.attr("id", "bloodGasesHeaderPaCO2");
        PatientTableHeader.headers.push(this.cell);

//        this.label = $(document.createElement("div"));
//        this.label.append( i18n.PCO2 );
//        this.label.addClass("patient-table-header-bloodGasesPaCO2-label truncate");
        this.cell.append(i18n.PCO2);
    }  ,
                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeBloodGasesPaCO2Header() {
		this.cell.css("width", Columns.bloodGasesPaCO2.width + 1);
//		this.sizeContents();
//	},	
//	/**
//	 * Sizes the contents of the header based on the width of the column.
//	 * @param none
//	 */	
//	sizeContents: function sizeBloodGasesPaCO2HeaderContents() {	 
//		this.label.css("width", Columns.bloodGasesPaCO2.width - 5);
	}
}

/**
 * The visual cell representing the custom header cell.
 */
var BloodGasesHeaderPaO2 = {
    cell: null,
    label: null,

    /**
     * Creates and initializes the custom column header
     * @param none
     */
    create: function createBloodGasesHeaderPaO2() {
        this.cell = $(document.createElement("td"));
        this.cell.addClass("patient-table-header-bloodGasesPaO2");
        this.cell.attr("id", "bloodGasesHeaderPaO2");
        PatientTableHeader.headers.push(this.cell);

//        this.label = $(document.createElement("div"));
//        this.label.append( i18n.PO2 );
//        this.label.addClass("patient-table-header-bloodGasesPaO2-label truncate");
        this.cell.append(i18n.PO2);
    } ,                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeBloodGasesPaO2Header() {
		this.cell.css("width", Columns.bloodGasesPaO2.width + 1);
//		this.sizeContents();
//	},	
//	/**
//	 * Sizes the contents of the header based on the width of the column.
//	 * @param none
//	 */	
//	sizeContents: function sizeBloodGasesPaO2HeaderContents() {	 
//		this.label.css("width", Columns.bloodGasesPaO2.width - 5);
	}
}

/**
 * The visual cell representing the custom header cell.
 */
var OxygenHeader = {
    cell: null,
    label: null,

    /**
     * Creates and initializes the custom column header
     * @param none
     */
    create: function createOxygenHeader() {
        this.cell = $(document.createElement("td"));
        this.cell.addClass("patient-table-header-oxygen");
        this.cell.attr("id", "oxygenHeader");
        PatientTableHeader.headers.push(this.cell);
        this.label = $(document.createElement("div"));
        this.label.text(i18n.OXYGEN_THERAPY);
        this.label.addClass("patient-table-header-oxygen-label truncate");
        this.cell.append(this.label);
    },

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializeOxygenHeaderHover() {
		Hover.displayForTruncation(this.label);
	} ,                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeOxygenHeader() {
		this.cell.css("width", Columns.oxygen.width);
		this.sizeContents();
	},	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizeOxygenHeaderContents() {	 
		this.label.css("width", Columns.oxygen.width - 5);
	}
}

/**
 * The visual cell representing the Activities header cell.
 */
var ActivitiesHeader = {
	cell: null,
	label: null,
	
	/**
	 * Creates and initializes the activities column header
	 * @param none
	 */	
	create: function createActivitiesHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-activities");
		this.cell.attr("id", "activitiesHeader");
		PatientTableHeader.headers.push(this.cell);
		this.label = $(document.createElement("div"));
		this.label.text(i18n.ACTIVITIES);
		this.label.addClass("patient-table-header-activities-label truncate");
		this.cell.append(this.label);
	},

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializeActivitiesHeaderHover() {
		Hover.displayForTruncation(this.label);
	},                 
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeActivitiesHeader() {
		this.cell.css("width", Columns.activities.width);
		this.sizeContents();
	},	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizeActivitiesHeaderContents() {	 
		this.label.css("width", Columns.activities.width - 5);
	}
}

/**
 * The visual cell representing the Medication header cell.
 */
var MedicationHeader = {
	cell: null,
	
	/**
	 * Creates and initializes the column header
	 * @param none
	 */	
	create: function createMedicationHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-medication");
		this.cell.attr("id", "medicationHeader");
		PatientTableHeader.headers.push(this.cell);
		var label = $(document.createElement("div"));
		label.addClass("medications-icon");
		this.cell.append(label);
		var config = {    
			 over: function(e) {Hover.display(e, "", i18n.MEDICATION_ACTIVITIES)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		label.hoverIntent(config);
	},                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeMedicationHeader() {
		this.cell.css("width", Columns.medication.width);		 
	} 
}

/**
 * The visual cell representing the Patient Care header cell.
 */
var PatientCareHeader = {
	cell: null,
	
	/**
	 * Creates and initializes the column header
	 * @param none
	 */	
	create: function createPatientCareHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-patient-care");
		this.cell.attr("id", "patientCareHeader");
		PatientTableHeader.headers.push(this.cell);
		var label = $(document.createElement("div"));
		label.addClass("patient-care-icon");
		this.cell.append(label);
		var config = {    
			 over: function(e) {Hover.display(e, "", i18n.PATIENT_CARE_ACTIVITIES)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		label.hoverIntent(config);
	},
                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizePatientCareHeader() {
		this.cell.css("width", Columns.patientCare.width);		 
	} 
}

/**
 * The visual cell representing the Assessment header cell.
 */
var AssessmentHeader = {
	cell: null,
	
	/**
	 * Creates and initializes the column header
	 * @param none
	 */	
	create: function createAssessmentHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-assessment");
		this.cell.attr("id", "assesssmentHeader");
		PatientTableHeader.headers.push(this.cell);
		var label = $(document.createElement("div"));
		label.addClass("assessment-icon");
		this.cell.append(label);
		var config = {    
			 over: function(e) {Hover.display(e, "", i18n.ASSESSMENT_ACTIVITIES)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		label.hoverIntent(config);
	},
                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeAssessmentHeader() {
		this.cell.css("width", Columns.assessment.width);	 
	} 
}

/**
 * The visual cell representing the other header cell.
 */
var OtherHeader = {
	cell: null,
	
	/**
	 * Creates and initializes the column header
	 * @param none
	 */	
	create: function createOtherHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-other");
		this.cell.attr("id", "otherHeader");
		PatientTableHeader.headers.push(this.cell);
		var label = $(document.createElement("div"));
		label.addClass("other-icon");
		this.cell.append(label);
		var config = {    
			 over: function(e) {Hover.display(e, "", i18n.OTHER_ACTIVITIES)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		label.hoverIntent(config);
	},                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeOtherHeader() {
		this.cell.css("width", Columns.other.width);		 
	} 
}

/**
 * The visual cell representing the Quality Measures header cell.
 */
var QualityMeasuresHeader = {
	cell: null,
	label: null,
	
	/**
	 * Creates and initializes the quality measures column header
	 * @param none
	 */	
	create: function createQualityMeasuresHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-quality");
		this.cell.attr("id", "qualityMeasuresHeader");
		PatientTableHeader.headers.push(this.cell);
		this.label = $(document.createElement("div"));
		this.label.addClass("patient-table-header-quality-label truncate");
		this.label.text(i18n.QUALITY_MEASURES);
		this.cell.append(this.label);
	},

	/**
	 * Intializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializeQualityMeasuresHeaderHover() {
		Hover.displayForTruncation(this.label);
	},                
    /**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizeQualityMeasuresHeader() {
		this.cell.css("width", Columns.qualityMeasures.width);
		this.sizeContents();
	},	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizeQualityMeasuresHeaderContents() {	 
		this.label.css("width", Columns.qualityMeasures.width - 10);
	}
}

/**
 * The visual cell representing the Plan Of Care header cell.
 */
var PlanOfCareHeader = {
	cell: null,
	label: null,
	
	/**
	 * Creates and initializes the plan of care column header
	 * @param none
	 */	
	create: function createPlanOfCareHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-plan-of-care");
		this.cell.attr("id", "planOfCare");
		PatientTableHeader.headers.push(this.cell);
		this.label = $(document.createElement("span"));
		this.label.text(i18n.PLAN_OF_CARE);
		this.label.addClass("patient-table-header-plan-of-care-label truncate");
		this.cell.append(this.label);
	},

	/**
	 * Initializes the hover over the label if the label exceeds the size of the header.
	 * @param none
	 */	
	initializeHover: function intializePlanOfCareHeaderHover() {
		Hover.displayForTruncation(this.label);
	}, 
	
	/**
	 * Sizes the header based on the width of the column.
	 * @param none
	 */	
	size: function sizePlanOfCareHeader() {

		this.cell.css("width", Columns.planOfCare.width);
		this.sizeContents();
	},
	
	/**
	 * Sizes the contents of the header based on the width of the column.
	 * @param none
	 */	
	sizeContents: function sizePlanOfCareHeaderContents() {
		this.label.css("width", Columns.planOfCare.width - 5);
	}
}

/**
 * The visual cell representing the scroll header cell.
 */
var ScrollHeader = {
	cell: null,
	
	/**
	 * Creates and initializes the scroll bar column header
	 * @param none
	 */	
	create: function createScrollHeader() {
		this.cell = $(document.createElement("td"));
		this.cell.addClass("patient-table-header-scroll");
		this.cell.attr("id", "scrollHeader");
		PatientTableHeader.headers.push(this.cell);
		this.cell.append(this.label);
	}
}

/**
 * Represents the header at the top of the patient table, which is seperate from the table to allow independent scrolling of the table.
 */
var PatientTableHeader = {
    headers: null,
    container: null,
    stroke: null,
    table: null,
    location: null,
    patient: null,
    visit: null,
    careTeam: null,
    acuity: null,
    activities: null,
    medication: null,
    patientCare: null,
    assessment: null,
    other: null,
    qualityMeasures: null,
    customs: [], 
    customHeadersList: [],
    ventilator: null,
    oxygen: null,
    bloodGasesPH: null,
    bloodGasesPaO2: null,
    bloodGasesPaCO2: null,
    bloodGasesHCO3: null,
    bloodGasesO2Sat: null,
    planOfCare: null,
    errorTask: null,
   

    /**
     * Creates the patient table header.
     * @param none
     */	
    create: function createPatientTableHeader(){
        this.initialize();
        
        //A table is created to allow for easier vertical alignment
        this.container = $(document.createElement("div"));
        this.container.addClass("patient-table-container header");
        
        this.table = $(document.createElement("table"));
        this.table.addClass("patient-table-header");
        this.table.attr("cellpadding", "0");
        this.table.attr("cellspacing", "0");

        var row = $(document.createElement("tr"));
        row.addClass("patient-table-header");
        this.table.append(row);
        
        LocationHeader.create();
        this.location = LocationHeader.cell;
        
        PatientHeader.create();
        this.patient = PatientHeader.cell;
        
        VisitHeader.create();
        this.visit = VisitHeader.cell;
        
        if(Configuration.errorTasksIndicator) {
            ErrorTaskHeader.create();
            this.errorTask = ErrorTaskHeader.cell;
        }

        CareTeamHeader.create();
        this.careTeam = CareTeamHeader.cell;
        
        if(Configuration.customs != null && Configuration.customs.length > 0 && Configuration.therapiesExist == false){
            for(var i = 0; i < Configuration.customs.length; i++) {
                this.customHeadersList[i] = $.extend(true, {}, CustomHeader);
                this.customHeadersList[i].create(Configuration.customs[i].display);
                this.customs[i] = this.customHeadersList[i].cell;
            }
        }
        
        if(PatientLists.getActive()) {
            ActivitiesHeader.create();
            this.activities = ActivitiesHeader.cell;
        }
        
        if(Configuration.bloodGases == true){
            BloodGasesHeaderPH.create();
            BloodGasesHeaderPaO2.create();
            BloodGasesHeaderPaCO2.create();
            BloodGasesHeaderHCO3.create();
            BloodGasesHeaderO2Sat.create();

            this.bloodGasesPH = BloodGasesHeaderPH.cell;
            this.bloodGasesPaO2 = BloodGasesHeaderPaO2.cell;
            this.bloodGasesPaCO2 = BloodGasesHeaderPaCO2.cell;
            this.bloodGasesHCO3 = BloodGasesHeaderHCO3.cell;
            this.bloodGasesO2Sat = BloodGasesHeaderO2Sat.cell;
        }

        if(Configuration.ventilator == true){
            VentilatorHeader.create()
            this.ventilator = VentilatorHeader.cell;
        }

        if(Configuration.oxygen == true){
            OxygenHeader.create()
            this.oxygen = OxygenHeader.cell;
        }

        if(Configuration.qualityMeasures == true && Configuration.therapiesExist == false){
            QualityMeasuresHeader.create();
            this.qualityMeasures = QualityMeasuresHeader.cell;
        }
        if(Configuration.planOfCareColumn == true && PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false && Configuration.therapiesExist == false){
        PlanOfCareHeader.create();
        this.planOfCare = PlanOfCareHeader.cell;
        }
        ScrollHeader.create();
        
        row.append(this.headers);
        this.container.append(this.table);
    },

    /**
     * Initializes the patient table header.
     * @param none
     */	
    initialize: function initializePatientTableHeader() {
        this.headers = [];
        if(this.container != null) {
            this.container.empty();
            this.container.remove();
        }
        this.container = null;
        this.stroke = null;
        this.table = null;
        this.location = null;
        this.patient = null;
        this.visit = null;
        this.careTeam = null;
        this.customs = [];
        this.customHeadersList = [];
        this.oxygen = null;
        this.ventilator = null;
        this.bloodGasesPH = null;
        this.bloodGasesPaO2 = null;
        this.bloodGasesPaCO2 = null;
        this.bloodGasesHCO3 = null;
        this.bloodGasesO2Sat = null;
        this.activities = null;
        this.medication = null;
        this.patientCare = null;
        this.assessment = null;
        this.other = null;
        this.qualityMeasures = null;
        this.planOfCare = null;
        this.errorTask = null;
    },

    /**
     * Initializes the patient table header hovers if there are any truncated labels.
     * @param none
     */	
    initializeHovers: function initializePatientTableHeaderHovers() {
        LocationHeader.initializeHover();
        PatientHeader.initializeHover();
        VisitHeader.initializeHover();
        CareTeamHeader.initializeHover();
        for(var i = 0; i<this.customHeadersList.length; i++) {
            this.customHeadersList[i].initializeHover();
        }
        ActivitiesHeader.initializeHover();
        QualityMeasuresHeader.initializeHover();
        VentilatorHeader.initializeHover();
        OxygenHeader.initializeHover();
        ErrorTaskHeader.initializeHover();
    }
};

/**
 * The visual cell representing the Error Task header cell
 */
var ErrorTaskHeader = {
    cell: null,
    label: null,

    /**
     * Creates and initializes the Error Task column header
     */
    create: function createErrorTaskHeader() {
        this.cell = $('<td/>');
        this.cell.addClass('patient-table-header-error-task');
        this.cell.attr('id', 'errorTask');
        PatientTableHeader.headers.push(this.cell);
        this.label = $('<div/>');
        this.label.append(i18n.ERROR_TASK);
        this.label.addClass('patient-table-header-error-task-label truncate');
        this.cell.append(this.label);
    },

    /**
     * Intializes the hover over the label if the label exceeds the size of the header
     */
    initializeHover: function initializeErrorTaskHeaderHover() {
        Hover.displayForTruncation(this.label);
    },
    
    /**
     * Sizes the header based on the width of the column
     */
    size: function sizeErrorTaskHeader() {
        this.cell.css('width', Columns.errorTask.width);
        this.sizeContents();
    },
    
    /**
     * Sizes the contents of the header based on the width of the column
     */
    sizeContents: function sizeErrorTaskHeaderContents() {
        this.label.css('width', Columns.errorTask.width - 5);
    }
}

/**
 * Represents the table of the list of patients.
 */
var PatientTable = {
	container: null,
	header: null,
	tableDiv: null,
	rows: [],
	html: "",
	sort: "",
	isSortable: true,
	totalRowsCount: 0,
        descendingIndicator: 0,

	/**
	 * Creates and initializes the patient table.
	 * @param none
	 */	
	create: function createPatientTable() {
		Timers.start("ENG:CareCompass.PatientTable.create");
		this.html = "";
		for(var i = 0; i < this.rows.length; i++) {
			this.rows[i].empty();
			this.rows[i] = null;
		}
		this.rows.length = 0;
		if(this.container != null) {
			this.container.empty();
			this.container.remove();
			this.container = null;
		}
		this.container = $(document.createElement("div"));
		Columns.initializeWidths();
		PatientTableHeader.create();
		this.header = PatientTableHeader.container;
		this.container.append(this.header);
		
		this.tableDiv = $(document.createElement("div"));
		this.tableDiv.addClass("patient-table-container");
        this.tableDiv.addClass("scroll");

		this.html += '<table class="patient-table">';
		this.populateRows();
		this.tableDiv.append(this.html);
		this.container.append(this.tableDiv);
		
		Columns.populate();
		Timers.stop("ENG:CareCompass.PatientTable.create");
	},
	
	/**
	 * Populates the patient table by filling but the HTML variable.
	 * @param none
	 */	
	populateRows: function populatePatientTableRows() {
		this.html += '<tbody>';
		var currentUnit = "&&";
		var sameUnit = true;
		var patientList = [];
		
		//Check if all the patients are from the same unit.
		var totalIndex = 0;
		if(this.sort == "LOCATION") {
			this.populateRowsByLocation();
		}
		else {
			for(var i = 0; i < Patients.count(); i++) {
				var patient = Patients.get(i);	
				this.addRow(patient, i, totalIndex);
				totalIndex++;
			}		 
 			PatientTable.totalRowsCount = totalIndex;
			this.html +=  '</tbody>';
		}
	},
	
	populateRowsByLocation: function() {
		var currentUnit = "&&";
		var sameUnit = true;
		var patientWithoutEncounters = [];
		var locationSortList = [];
		var totalIndex = 0;
		
			for(var i = 0; i < Patients.count(); i++) {
				if(Patients.get(i).encounterId > 0) {
					locationSortList.push(Patients.get(i));
				} 
				else {
					patientWithoutEncounters.push(Patients.get(i));	
				}
			}
			locationSortList = locationSortList.concat(patientWithoutEncounters);
			
			for (var i = 0; i < locationSortList.length; i++) {
				var patient = locationSortList[i];
				if(i == 0){
					currentUnit = patient.getUnit();
				}
				else if(patient.getUnit() != currentUnit) {
					sameUnit = false;
					//Add the first row as soon as it is detected patients are in different units.
					this.addUnitRow(currentUnit);
					totalIndex++;
					break;
				}
			}
		
		for (var i = 0; i < locationSortList.length; i++) {
			var patient = locationSortList[i];
			if(sameUnit == false && patient.getUnit() != currentUnit) {
				currentUnit = patient.getUnit();
				this.addUnitRow(currentUnit);
				totalIndex++;
			}
                         
			this.addRow(patient, i, totalIndex);
			totalIndex++;
		}
		PatientTable.totalRowsCount = totalIndex;
		this.html +=  '</tbody>';
	
	},
	
	/**
	 *  Adds a patient row to the table.
	 * @param patient - The patient to add the row for.
	 * @param number - The number of the patient row being added.
	 * @param index - The index of the row being added, including unit rows.
	 */	
	addRow: function addPatientTableRow(patient, number, index) {
		var row = new PatientRow(number, index);
		this.rows.push(row);
		this.html += row.create(patient);
	},
	
	/**
	 *  Adds a unit row to the table.
	 * @param unit - The display of the unit.
	 */	
	addUnitRow: function addPatientTableUnitRow(unit) {
		this.html += '<tr>';
		this.html += '<td class="unit-row" colspan="'+ Columns.columns.length+'"><div class="unit-cell"><span class="unit-label">' + unit + '</span></div></td>'
		this.html += "</tr>";
	},

	/**
	 * Resizes the patient table to fit the window and align with the header.
	 * @param none
	 */	
	resize: function resizePatientTable() {
		if(this.container == null || ActivityTimeline.container == null) {
			return;
		}
		Columns.resize();
		var padding = 10;
 		if(CareCompass.browser.height() < CareCompass.minHeightSupported){
 		    this.tableDiv.height( CareCompass.minHeightSupported - PatientTableHeader.container.height() - CareCompass.toolbar.outerHeight() - ActivityTimeline.getHeight() - padding);
		}else{
		    this.tableDiv.height( CareCompass.body.height() - PatientTableHeader.container.height() - CareCompass.toolbar.outerHeight() - ActivityTimeline.getHeight() - padding);
		} 
		PatientTableHeader.initializeHovers();
		$(ActivityTimeline.container).css("width", CareCompass.body.width());
	},
	
	/**
	* Displays this patient table and stores it as the table displayed in CareCompass.  
	* This allows for building of the patient table then quickly removing the currently displayed table and displaying this one, if another table is displayed.
	* If a previous table was displayed and scrolled the newly displayed table will maintain the scroll position.
	* @param none
	*/
	display: function displayPatientTable() {
		Timers.start("ENG:CareCompass.PatientTable.display");
		
		var scroll = 0;

		if(this.isDisplayed()) {
			scroll = this.tableDiv.scrollTop();
			this.create();
		}
		this.remove();
		if(NoPatientListsScreen.isDisplayed() == true || NoPatientsScreen.isDisplayed() == true || ErrorScreen.isDisplayed() == true) {
			// ActivityTimeline.remove();
			return;
		}
		CareCompass.patientTable = this.container;
		CareCompass.body.append(CareCompass.patientTable);
		this.resize();
		this.tableDiv.scrollTop(scroll);
		CareCompass.patientTable.show();
		PatientTable.insertLastBorder();

		var tableRows = this.tableDiv.children()[0].rows;
		var tableRowIndex = 0;
		for (var i = 0; i < this.rows.length; i++) {
			if(tableRows[tableRowIndex].id == 0) {
				if(tableRowIndex == 0) {
					$(tableRows[tableRowIndex]).children().css("border-top", "0px");
				}
				tableRowIndex++;
			}
			var patientRow = this.rows[i];
			patientRow.setRow(tableRows[tableRowIndex]);
			tableRowIndex++;
		}
		
		Timers.stop("ENG:CareCompass.PatientTable.display");
	},
	
	/**
	* Determines if this table is the currently displayed table.
	* @param none
	* @return - True if this table is displayed, false if not.
	*/
	isDisplayed: function isPatientTableDisplayed() {
		if(this.container == null ||  this.tableDiv == null) {
			return false;
		}
		if(this.container == CareCompass.patientTable) {
			return true;
		}
		return false;	
	},
	
	/**
	* Removes the currently displayed table.
	* @param - none.
	*/
	remove: function removePatientTable() {
		if(CareCompass.patientTable != null) {
			CareCompass.patientTable.remove();
			CareCompass.patientTable = null;
		}
	},
	
	/**
	* Removes all row hovers from this table
	* @param exception - The patient associated to the row hover to leave visible.
	*/
	hideRowHovers: function hidePatientTableRowHovers(exception) {
		if(this.rows != null){
			for (var i = 0; i < this.rows.length; i++) {
				if(exception != undefined && this.rows[i].encounterId == exception.encounterId) {
					continue;
				}
				this.rows[i].hideRowHover();
			}
		}
	},
	
	/**
	* Enables the ability to scroll this table.
	* @param none
	*/
	enableScrolling: function enablePatientTableScrolling() {
        this.tableDiv.removeClass("noscroll");
		this.tableDiv.addClass("scroll");
	},

	/**
	* Disables the ability to scroll this table.
	* @param none
	*/
	disableScrolling: function disablePatientTableScrolling() {
		this.tableDiv.removeClass("scroll");
		this.tableDiv.addClass("noscroll");
		
	},
	
	/**
	* Triggers the patient table to be sorted by location.
	* @param ascending - True if the table should be sorted ascending, false if not.
	*/
	sortByLocation: function sortPatientTableByLocation(ascending, save) {
		this.sort = "LOCATION";
		this.descendingIndicator = ascending ? 0 : 1;

		if(save == true) {
			if(this.descendingIndicator === 0) {
				Configuration.sort = "LOCATION-A";
			} else {
				Configuration.sort = "LOCATION-D";
			}
			Service.saveUserConfiguration(CareCompass.sortCommand, Configuration.sort);
		}

		var encounterIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		var roomSequences = "";
		var bedSequences = "";
		var unitDisplays = "";
		var locationSequence = "";
		for(var i = 0; i < Patients.patients.length; i++) {
			unitDisplays += Patients.patients[i].unitDisplay + ";"
			if(Patients.patients[i].encounterId >= 0) {
				encounterIds.add(i, Patients.patients[i].encounterId);
			}
			roomSequences += Patients.patients[i].roomSequence + ";";
			bedSequences += Patients.patients[i].bedSequence +";";
			locationSequence += Patients.patients[i].location + ";";
		}
		Service.sortPatients(this.descendingIndicator, encounterIds, unitDisplays, roomSequences, bedSequences, locationSequence);
	},
	
	/**
	* Triggers the patient table to be sorted by patient name.
	* @param ascending - True if the table should be sorted ascending, false if not.
	*/
	sortByAcuity: function sortPatientTableByAcuity(ascending, save) {
		this.sort = "ACUITY";
		this.descendingIndicator = ascending ? 0 : 1;

		if(save == true) {
			if(this.descendingIndicator === 0) {
				Configuration.sort = "ACUITY-A";
				Service.saveUserConfiguration(CareCompass.sortCommand, Configuration.sort);
			} else {
				Configuration.sort = "ACUITY-D";
			}
			Service.saveUserConfiguration(CareCompass.sortCommand, Configuration.sort);
		}
		
		var encounterIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		var emptyMap3 = window.external.DiscernObjectFactory("DOUBLEMAP");
		var acuitySequence = "";
		var acuityPrimarySequence = "";
		var patientNames = "";
		for(var i = 0; i < Patients.patients.length; i++) {
			if(Patients.patients[i].encounterId >= 0) {
				encounterIds.add(i, Patients.patients[i].encounterId);
			}
			patientNames += Patients.patients[i].name + ";";

			if(Patients.patients[i].getAcuity() == '--'){
				acuitySequence += "0;" ;
				acuityPrimarySequence += "" + ";";
			} else{
				acuitySequence += Patients.patients[i].getAcuity() + ";";
				acuityPrimarySequence += Patients.patients[i].getAcuity() + ";";
			}
		}
		Service.sortPatients(this.descendingIndicator, encounterIds, acuitySequence, acuityPrimarySequence, patientNames, emptyMap3);
	},
	
	/**
	* Triggers the patient table to be sorted by patient name.
	* @param ascending - True if the table should be sorted ascending, false if not.
	*/
	sortByPatient: function sortPatientTableByPatient(ascending, save) {
		this.sort = "PATIENT";
		this.descendingIndicator = ascending ? 0 : 1;

		if(save == true) {
			if(this.descendingIndicator === 0) {
				Configuration.sort = "PATIENT-A";	
			} else {
				Configuration.sort = "PATIENT-D";
			}
			Service.saveUserConfiguration(CareCompass.sortCommand, Configuration.sort);
		}
		
		var encounterIds = window.external.DiscernObjectFactory("DOUBLEMAP");
		var emptyMap1 = window.external.DiscernObjectFactory("DOUBLEMAP");
		var emptyMap2 = window.external.DiscernObjectFactory("DOUBLEMAP");
		var emptyMap3 = window.external.DiscernObjectFactory("DOUBLEMAP");
		var patientNames = "";
		for(var i = 0; i < Patients.patients.length; i++) {
			patientNames += Patients.patients[i].name + ";"
			if(Patients.patients[i].encounterId >= 0) {
				encounterIds.add(i, Patients.patients[i].encounterId);
			}
		}
		Service.sortPatients(this.descendingIndicator, encounterIds, patientNames, emptyMap1, emptyMap2, emptyMap3);
	},
	/**
	* Determines how the patient table should be sorted after the load (refresh, notifications, patient list swap, etc.)
	* @param none
	*/
    sortPatientTable: function sortPatientTable() {
        var ascending = !(Boolean(this.descendingIndicator));
		if(this.sort == "LOCATION") {
			this.sortByLocation(ascending, false);
			LocationHeader.sortedAscending = ascending;
		} else if(this.sort == "ACUITY") {
			this.sortByAcuity(ascending, false);
			VisitHeader.sortedAscending = ascending;
		} else if(this.sort == "PATIENT") {
			this.sortByPatient(ascending, false);
			PatientHeader.sortedAscending = ascending;
		} else {
			//Sort by location ascending by default
			var sameLocation = true;
			var previousLocation = "";
			for(var i = 0; i < Patients.patients.length; i++) {
				if(previousLocation == "") {
					previousLocation = Patients.patients[i].location;
					continue;
				}
				if(Patients.patients[i].location != previousLocation) {
					sameLocation = false;
					break;
				}
			}
			if(sameLocation == true) {
				this.sortByPatient(true, false);
				PatientHeader.sortedAscending = true;
				return;
			}
			this.sortByLocation(true, false);
			LocationHeader.sortedAscending = true;
		}        
    },
    
	/**
	* Determines what the patient table should be sorted by on initial load
	* @param none
	*/
	determineInitialSort: function determinePatientTableInitialSort() {
		Patients.sorted = false;
		if(Configuration.sort == "LOCATION-A") {
			this.sortByLocation(true, false);
			LocationHeader.sortedAscending = true;
		}
		else if(Configuration.sort == "LOCATION-D") {
			this.sortByLocation(false, false);
			LocationHeader.sortedAscending = false;
		}
		else if(Configuration.acuity && Configuration.sort == "ACUITY-A") {
			this.sortByAcuity(true, false);
			VisitHeader.sortedAscending = true;
		}
		else if(Configuration.acuity && Configuration.sort == "ACUITY-D") {
			this.sortByAcuity(false, false);
			VisitHeader.sortedAscending = false;
		}
		else if(Configuration.sort == "PATIENT-A") {
			this.sortByPatient(true, false);
			PatientHeader.sortedAscending = true;
		}
		else if(Configuration.sort == "PATIENT-D") {
			this.sortByPatient(false, false);
			PatientHeader.sortedAscending = false;
		}
		else {
			//Sort by location ascending by default
			var sameLocation = true;
			var previousLocation = "";
			for(var i = 0; i < Patients.patients.length; i++) {
				if(previousLocation == "") {
					previousLocation = Patients.patients[i].location;
					continue;
				}
				if(Patients.patients[i].location != previousLocation) {
					sameLocation = false;
					break;
				}
			}
			if(sameLocation == true) {
				this.sortByPatient(true, false);
				PatientHeader.sortedAscending = true;
				return;
			}
			this.sortByLocation(true, false);
			LocationHeader.sortedAscending = true;
		}
		
	},
	
	/**
	 * Launches PowerOrders
	 *  @param encounterId - encounterId of patient to launch PowerOrders
	 */
	launchCareOrders: function launchCareOrders(encounterId, type) {
		
		var patient = Patients.getByEncounterId(encounterId);
		
		if(type == "PLANNED") { 
			Timers.start("USR:CareCompass.LaunchPlannedPlansOfCare");
			Timers.stop("USR:CareCompass.LaunchPlannedPlansOfCare");
		} 
		if(type == "SUGGESTED") {
			Timers.start("USR:CareCompass.LaunchSuggestedPlansOfCare");
			Timers.stop("USR:CareCompass.LaunchSuggestedPlansOfCare");
		}
		MPAGES_EVENT("ORDERS", patient.patientId  + '|' + patient.encounterId + '|{ORDER|0|0|0|0|0}|24|{2|127}{3|127}|16');
		refresh();

	},
	
	/**
	 * Open the patient drill down for the selected patient, set to the PRN tab.
	 * 
	 *  @param the patient row number to select the patient from.
	 */
	openPrnDrilldownTab: function openPrnTab(rowNumber) {
	    var filters = [ ];
	    var type = "PRN";
	    var patientRow = PatientTable.rows[rowNumber-1];
	    var encounterId = patientRow.encounterId;
	    patientRow.hover.click(encounterId, filters, type);
	},


    /**
     * Open the patient drill down for the selected patient, set to the Activity tab.
     * 
     *  @param the patient row number to select the patient from.
     */
    openActivityDrilldownTab: function openActivityTab(rowNumber) {
        var filters = [];
        var type = "CURRENT";
        var patientRow = PatientTable.rows[rowNumber-1];
        var encounterId = patientRow.encounterId;
        patientRow.hover.click(encounterId, filters, type);
    },


    /**
     * Open the patient drill down for the selected patient, set to the Activity tab.
     * 
     *  @param the patient row number to select the patient from.
     */
    openActivityTabFiltered: function openActivityTabFiltered(encounterId, filters, type) {
        var patientRow = null;  
        for(var i = 0; i < PatientTable.rows.length; i++) {
            if(PatientTable.rows[i].encounterId == encounterId) {
                patientRow = PatientTable.rows[i];
                break;
            }
        }
        if (patientRow != null) {
            patientRow.hover.click(encounterId, filters, type);
        }
    },


    /**
     * Open the patient drill down for the selected patient, set to the Activity tab.
     * This is intended for use by the ActivitiesCellHover.
     * 
     *  @param the patient row number to select the patient from.
     */
    openActivityTabMedications: function openActivityTabMeds(encounterId) {
        if (ActivitiesCellHover.hover != null) {
            ActivitiesCellHover.hover.remove();
            ActivitiesCellHover.hover = null;
        }
        ActivitiesCellHover.cursor = false;
        var filtersMedication = ["PATIENTCARE", "ASSESSMENT", "OTHER"];
        var type = "CURRENT";
        PatientTable.openActivityTabFiltered(encounterId, filtersMedication, type);
    },


    /**
     * Open the patient drill down for the selected patient, set to the Activity tab.
     * This is intended for use by the ActivitiesCellHover.
     * 
     *  @param the patient row number to select the patient from.
     */
    openActivityTabAssessments: function openActivityTabAsses(encounterId) {
        if (ActivitiesCellHover.hover != null) {
            ActivitiesCellHover.hover.remove();
            ActivitiesCellHover.hover = null;
        }
        ActivitiesCellHover.cursor = false;
        var filtersAssesment = ["MEDICATIONS",  "PATIENTCARE", "OTHER"];
        var type = "CURRENT";
        PatientTable.openActivityTabFiltered(encounterId, filtersAssesment, type);
    },


    /**
     * Open the patient drill down for the selected patient, set to the Activity tab.
     * This is intended for use by the ActivitiesCellHover.
     * 
     *  @param the patient row number to select the patient from.
     */
    openActivityTabPatientCare: function openActivityTabPat(encounterId) {
        if (ActivitiesCellHover.hover != null) {
            ActivitiesCellHover.hover.remove();
            ActivitiesCellHover.hover = null;
        }
        ActivitiesCellHover.cursor = false;
        var filtersPatientCare = ["MEDICATIONS", "ASSESSMENT", "OTHER"];
        var type = "CURRENT";
        PatientTable.openActivityTabFiltered(encounterId, filtersPatientCare, type);
    },


    /**
     * Open the patient drill down for the selected patient, set to the Activity tab.
     * This is intended for use by the ActivitiesCellHover.
     * 
     *  @param the patient row number to select the patient from.
     */
    openActivityTabOthers: function openActivityTabOther(encounterId) {
        if (ActivitiesCellHover.hover != null) {
            ActivitiesCellHover.hover.remove();
            ActivitiesCellHover.hover = null;
        }
        ActivitiesCellHover.cursor = false;
        filtersOther = ["MEDICATIONS", "PATIENTCARE",  "ASSESSMENT"];
        var type = "CURRENT";
        PatientTable.openActivityTabFiltered(encounterId, filtersOther, type);
    },


	/**
	 * Clear the border highlight around any selected patient row.
	 */
	clearPatientTableHighlights: function clearHighlights() {
	    for(var i = 0; i < PatientTable.totalRowsCount; i++) {
	        var currentRow = $(PatientTable.tableDiv.children()[0].rows[i]);
	        if(currentRow != null){
	            if(currentRow.hasClass('striped-alert')) {
	                currentRow.css("background-color", "#FFD6D6");
	            }
	            else if(currentRow.hasClass('striped')) {
	                currentRow.css("background-color", "#E8EBF5");
	            }
	            else {
	                currentRow.css("background-color", "#FFFFFF");
	            }
	            if(i < PatientTable.totalRowsCount - 1) {
	                currentRow.children().css("border-bottom", "1px solid #FFFFFF");
	            }
	            else {
	              currentRow.children().css("border-bottom", "1px solid #CDCDCD");
	            }
	            var previousRow = PatientTable.tableDiv.children()[0].rows[i - 1];
	            if(previousRow != null) {
	                if($(previousRow).children().hasClass("unit-row")) {
	                	$(previousRow).children().css("border-bottom","1px solid #CDCDCD");
	                	$(previousRow).children().children().css("border-bottom","1px solid #B1BAC4");
	                } else {
	                	$(previousRow).children().css("border-bottom", "1px solid #FFFFFF");
	                }
	            }
	            else {
	                currentRow.children().css("border-top-color", "#FFFFFF");
	            }
	        }
	    }
	    RightClickMenu.remove();
	},

	/**
	 * Add a bottom border to the last row of the patient table.
	 */
	insertLastBorder: function insertLastBottomBorder() {
	    if(PatientTable.sort == "PATIENT" || PatientTable.sort == "LOCATION") {
	        for(var i = 0; i < PatientTable.totalRowsCount; i++) {
	            var currentRow = $(PatientTable.tableDiv.children()[0].rows[i]);
	            if ( i == (PatientTable.totalRowsCount - 1)){
	            currentRow.children().css("border-bottom", "1px solid #CDCDCD");
	            }
	            else {
	                currentRow.children().css("border-bottom", "1px solid #FFFFFF");
	            }
	        }
	    }
	}
};



/**
 * This file maintain all data for dipslaying patient's plans of care inside the patient drill down
 */
var PlanOfCareTab = {
  width: 0,
  height: 0,
  labelWidth: 0,
  patient: null,
  html: '',
  plansOfCareHTML: '',
  carePlans: [],
  plannedCarePlans: [],
  initiatedCarePlans: [],
  suggestedCarePlans: [],
  plannedPlansCounter: 0,
  suggestedPlansCounter: 0,
  initiatedPlansCounter: 0,
  // the number of columns used in a table
  NUMBER_OF_COLUMNS: 3,
  // the offset value used to account for the parent table's margin
  WIDTH_OFFSET: 25,

  /**
   * Reset all the settings when display the Plans Of Care.
   */
  resetPlansOfCareInfo: function () {
    this.width= 0;
    this.height =  0;
    this.labelWidth =  0;
    this.patient = null;
    this.html =  '';
    this.plansOfCareHTML = '';
    this.carePlans =  [];
    this.plannedCarePlans =  [];
    this.initiatedCarePlans =  [];
    this.suggestedCarePlans =  [];
    this.plannedPlansCounter = 0;
    this.suggestedPlansCounter = 0;
    this.initiatedPlansCounter = 0;
  },

  /**
   * Filters planned care plans from list of carePlans for patient.
   * @param {array} carePlans - The carePlans data to be filtered.
   */
  createPlannedPlans: function (carePlans) {
    if (this.carePlans !== null && this.carePlans instanceof Array) {
      for(var i = 0, length = carePlans.length; i < length; i++) {
        if('PLANNED' === carePlans[i].meaning) {
          this.plannedCarePlans.push(carePlans[i]);
        }
      }
    }
  },

  /**
   * Displays planned care plans from list of plannedCarePlans for patient.
   * @param {number} number - the number of plans to be displayed
   */
  displayPlannedPlans: function (number) {
      var columnWidth = (Math.floor(this.width/this.NUMBER_OF_COLUMNS) - this.WIDTH_OFFSET);

      this.plansOfCareHTML += '<td class="plan-of-care-table-cell' + ((number > 0) ? '' : ' hidden') + '">';
      this.plansOfCareHTML += '<table id="plannedPlansTable" class="patient-drill-down-demographics-section-table borderless"' +
                   'style="width:' + columnWidth + 'px">';
      this.plansOfCareHTML += '<tr><th class="borderless patient-drill-down-plan-of-care-tab-header">' + i18n.PLANNED_PLANS_LABEL + ':' + '</th></tr>';

      if (number > 0) {
        for(var i = 0; i < number; i++) {
          this.plannedPlansCounter += 1;

          this.plansOfCareHTML += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell" onclick="PatientTable.launchCareOrders(' +
                       this.patient.encounterId + ', &quot;PLANNED&quot;)">';
          this.plansOfCareHTML += '<span class="plan-of-care-planned-indicator"></span>';
          this.plansOfCareHTML += '<span><span class="plan-of-care-planned truncate" style="width:' + (columnWidth - this.WIDTH_OFFSET) + 'px">' +
                       this.plannedCarePlans[i].name + '</span></span>';
          this.plansOfCareHTML += '</td></tr>';
        }
      }
      this.plansOfCareHTML += '</table></td>';
  },

  /**
   * Filters suggested care plans from list of carePlans for patient.
   * @param {array} carePlans - The carePlans data to be filtered.
   */
  createSuggestedPlans: function (carePlans) {
    if (this.carePlans !== null && this.carePlans instanceof Array) {
      for(var i = 0, length = carePlans.length; i < length; i++) {
        if('PLAN SUGGEST' === carePlans[i].meaning) {
          this.suggestedCarePlans.push(carePlans[i]);
        }
      }
    }
  },

  /**
   * Displays suggested care plans.
   * @param {number} number - the number of plans to be displayed
   */
  displaySuggestedPlans: function (number) {
      /*
       * the value of 3 represents the number of columns of the tab's content
       * the number 25 is subtracted from the width to account for the margin set on the parent table
       */
      var columnWidth = (Math.floor(this.width/this.NUMBER_OF_COLUMNS) - this.WIDTH_OFFSET);

      this.plansOfCareHTML += '<td class="plan-of-care-table-cell' + ((number > 0) ? '' : ' hidden') + '">';
      this.plansOfCareHTML += '<table id="suggestedPlansTable" class="patient-drill-down-demographics-section-table borderless"' +
                   'style="width:' + columnWidth + 'px">';
      this.plansOfCareHTML += '<tr><th class="borderless patient-drill-down-plan-of-care-tab-header">' + i18n.SUGGESTED_PLANS_LABEL + ':' + '</th></tr>';

      if (number > 0) {
        for (var i = 0; i < number; i++) {
          this.suggestedPlansCounter += 1;

          this.plansOfCareHTML += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell">';
          this.plansOfCareHTML += '<span class="plan-of-care-suggested truncate link"' +
                       'style="width:' + columnWidth + 'px" onclick="PatientTable.launchCareOrders(' +
                       this.patient.encounterId + ', &quot;SUGGESTED&quot;)">' +
                       this.suggestedCarePlans[i].name + '</span>';
          this.plansOfCareHTML += '</td></tr>';
        }
      }
      this.plansOfCareHTML += '</table></td>';
  },


  /**
   * Filters initiated care plans from list of carePlans for patient.
   * @param {array} carePlans - The carePlans data to be filtered.
   */
  createInitiatedPlans: function (carePlans) {
    if (this.carePlans !== null && this.carePlans instanceof Array) {
      for(var i = 0, length = carePlans.length; i < length; i++) {
        if('INITIATED' === carePlans[i].meaning) {
          this.initiatedCarePlans.push(carePlans[i]);
        }
      }
    }
  },

  /**
   * Displays initiated care plans from list of initiatedCarePlans for patient.
   * @param {number} number - the number of plans to be displayed
   */
  displayInitiatedPlans: function (number) {
      /*
       * the value of 3 represents the number of columns of the tab's content
       * the number 25 is subtracted from the width to account for the margin set on the parent table
       */
      var columnWidth = (Math.floor(this.width/this.NUMBER_OF_COLUMNS) - this.WIDTH_OFFSET);

      this.plansOfCareHTML += '<td class="plan-of-care-table-cell' + ((number > 0) ? '' : ' hidden') + '">';
      this.plansOfCareHTML += '<table id="initiatedPlansTable" class="patient-drill-down-demographics-section-table borderless"' +
                   'style="width:' + columnWidth + 'px">';
      this.plansOfCareHTML += '<tr><th class="borderless patient-drill-down-plan-of-care-tab-header">' + i18n.INITIATED_PLANS_LABEL + ':' + '</th></tr>';

      if (number > 0) {
        for(var i = 0; i < number; i++) {
          this.initiatedPlansCounter += 1;

          this.plansOfCareHTML += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell">';
          this.plansOfCareHTML += '<span class="plan-of-care-initiated truncate link"' +
                       'style="width:' + columnWidth + 'px" onclick="PatientTable.launchCareOrders(' +
                       this.patient.encounterId + ', &quot;INITIATED&quot;); ">' +
                       this.initiatedCarePlans[i].name + '</span>';
          this.plansOfCareHTML += '</td></tr>';
        }
      }
      this.plansOfCareHTML += '</table></td>';
  },

  /**
   * Creates hover display for the plan of care
   * @param {HTML DOM} label - The visual object representing the care plan display
   */
  displayHover: function (label) {
    if(label !== null) {
      var header;
      var hoverdisplayText = null;
      var labelText = label[0]['innerText'];
      var html = ' ';
      if (label.children().hasClass('plan-of-care-planned')) {
        header = i18n.PLANNED_PLAN_LABEL;
        html = labelText;
      } else if (label.children().hasClass('plan-of-care-suggested')){
        header = i18n.SUGGESTED_PLAN_LABEL;
        html = labelText;
      } else if (label.children().hasClass('plan-of-care-initiated')) {
        header = i18n.INITIATED_PLAN_LABEL;
        html = labelText;
      }

      var config = {
        over: function(e) {Hover.display(e, header, html);},
        timeout: 200,
        out: function(e) {Hover.hide();},
        interval: 200
      };
      label.hoverIntent(config);
      label.click(Hover.hide());
    }
  },

  /**
   * Create the hovers for all care plans displayed
   * @param {HTML DOM} row - the row object to be create hover
   */
  createHover: function(row) {
    if (row !== null) {
      var display = null;
      var displayrow = $(row[0].cells[0]);

      if(displayrow.children().hasClass('plan-of-care-planned-indicator')) {
        display = $(displayrow[0].children[1]);
      } else {
        display = displayrow;
      }
      this.displayHover(display);
    }
  },

  /**
   * Create hover for Planned plans
   */
  createPlannedPlansHover: function () {
    if (this.plannedCarePlans.length > 0) {
      var rows = $('#plannedPlansTable')[0].rows;

      // start at row 1 to skip the table header
      for(var i = 1, length = this.plannedPlansCounter; i <= length; i++) {
        this.createHover($(rows[i]));
      }
    }
  },

  /**
   * Create hover for Suggested plans
   */
  createSuggestedPlansHover: function () {
    if(this.suggestedCarePlans.length > 0) {
      var rows = $('#suggestedPlansTable')[0].rows;

      // start at row 1 to skip the table header
      for(var i = 1, length = this.suggestedPlansCounter; i <= length; i++) {
        this.createHover($(rows[i]));
      }
    }
  },

  /**
   * Create hover for Initiated plans
   */
  createInitiatedPlansHover: function () {
    if (this.initiatedCarePlans.length > 0) {
      var rows = $('#initiatedPlansTable')[0].rows;

      // start at row 1 to skip the table header
      for(var i = 1, length = this.initiatedPlansCounter; i <= length; i++) {
        this.createHover($(rows[i]));
      }
    }
  },

  /**
   * Construct the care plans based on its meaning, ie, Planned, Suggested, or Initiated.
   * Display the result in order of Planned, Suggested, and Initiated
   */
  displayCarePlans: function () {
    this.createPlannedPlans(this.carePlans);
    this.createSuggestedPlans(this.carePlans);
    this.createInitiatedPlans(this.carePlans);

    var plannedLength = this.plannedCarePlans.length;
    var suggestedLength = this.suggestedCarePlans.length;
    var initiatedLength = this.initiatedCarePlans.length;

    this.plansOfCareHTML += '<tr class="plan-of-care-table-row">';

    this.displayPlannedPlans(plannedLength);
    this.displaySuggestedPlans(suggestedLength);
    this.displayInitiatedPlans(initiatedLength);

    this.plansOfCareHTML += '</tr>';
  },

  /**
   * Create and display the plans of care
   * @param {number} overallWidth the total width of the patient drill down window
   * @param {number} availableheight the height of the patient drill down window
   * @param {number} labelWidth the label width
   * @param {object} patient - patient to create plan of care cell for.
   * @return {HTML DOM} html The HTML string representing the Care Plan cell.
   */
  display: function (overallWidth, availableHeight, labelWidth, patient) {
    // only proceed if all inputs are valid.
    if (overallWidth && availableHeight && labelWidth && patient) {
      this.resetPlansOfCareInfo();
      // the offset value for width is 80 to account for the margins and paddings applied to the div panel
      var tableWidth = overallWidth - 80;

      this.width = overallWidth;
      this.height = availableHeight;
      this.labelWidth = labelWidth;
      this.patient = patient;

      // the number 82 is the height offset from the botton of the tab window.
      this.html += '<div id="carePlanDiv" style="height:' +
                   (availableHeight - 82) +
                   'px; overflow-y:auto; overflow-x:auto;" class="patient-drill-down-plan-of-care-div ui-tabs-below-tab-bar' +
                   (Configuration.planOfCareColumn ? '' : ' hidden') + '">';

      if (Configuration.planOfCareColumn == true) {
        if (this.patient.getIsCarePlansLoaded() == false) {
          var patientId = window.external.DiscernObjectFactory("DOUBLEMAP");
          var encounterId = window.external.DiscernObjectFactory("DOUBLEMAP");
          var pprCd = window.external.DiscernObjectFactory("DOUBLEMAP");
          patientId.Add(0, this.patient.getPatientId());
          encounterId.Add(0, this.patient.getEncounterId());
          pprCd.Add(0, this.patient.getPprCd());
          Service.loadSinglePatientCarePlans(patientId, encounterId, pprCd);
        } else {
          this.createCarePlansDisplay();
          this.html += this.plansOfCareHTML;
        }
      }
      this.html += '</div>';

      return this.html;
    }
  },

  /**
   * Creates the table of care plans.
   * @param none
   */
  createCarePlansDisplay: function() {
    this.plansOfCareHTML += '<table class="patient-drill-down-demographics-section-table plan-of-care-tab-table borderless"' +
                     'style="width:' + this.width + 'px;">';
    this.carePlans = this.patient.getCarePlans();
    if(this.carePlans == '--') {
      this.plansOfCareHTML += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell">';
      // the offset value for width is 80 to account for the margins and paddings applied to the div panel
      this.plansOfCareHTML += '<span class="plan-of-care-no-plans link"' +
                   'style="width:' + (this.width - 80) + 'px;" onclick="PatientTable.launchCareOrders(' +
                   this.patient.encounterId + ')">' + i18n.NO_PLANS_EXIST +'</span>';
      this.plansOfCareHTML += '</tr></td>';
    } else {
      this.displayCarePlans();
    }
    this.plansOfCareHTML += '</table>';
  },

  /**
   * Appends the care plans html table to carePlanDiv.
   * @param none
   */
  appendCarePlans: function () {
    this.createCarePlansDisplay();
    $('#carePlanDiv').append(this.plansOfCareHTML);
    this.patient.setIsCarePlansLoaded(true);
  }
};
/**
 * This file maintains all data for displaying the patient information tab inside of the patient drill down.
 */
var PatientInformationTab = {
    allergies : null,
	highRisks : null,
    quickLinks : null,
    highRisksLabel : null,
    allergiesLabel : null,
    quickLinksLabel : null,
    patientId : null,

/**
 * Create the HTML for the Patient information tab DIV contents
 * 
 * @param overallWidth - Width allowed for the table that the demographic information rests in
 * @param availableHeight - height allowed for patient information div
 * @param labelWidth - width used for patient information labels
 * @param patient - the patient that the information is displaying for
 * @return The HTML string that creates the Patient information DIV.
 */
display : function (overallWidth, availableHeight, labelWidth, patient) {
    this.patientId = patient.patientId;
    var patientLabelWidth = 150;
    // The information tab contents are defined here
    var html = "";
    var halfWidth = (overallWidth/2);
    html += '<div id="patientInfoDiv" style="height:' + (availableHeight - 82) + 'px; overflow-y:auto; overflow-x:hidden; " class="patient-drill-down-patient-info-div ui-tabs-below-tab-bar">';
    html += '<table id="demographicsTable" class="patient-drill-down-demographics-section-table" style="width:' + (overallWidth - 10) + ' px; margin: -px;">';

    html += '<tr>';
    html += '<td class="borderless">';
    html += '<table id="demographicsTable" class="patient-drill-down-demographics-section-table" style="margin: -px;">';

    html += '<tr>';
    html += '<td class="borderless" style="width:'+halfWidth+'px;">';
    html += '<table id="demographicsTable" class="patient-drill-down-demographics-section-table" style="margin: -px;">';
    html += '<tr>';

    html += '<td style="padding:20px 0px 0px 20px;" class="patient-drill-down-demographics-table-header">' + i18n.LOCATION + '</td>';
    html += '</tr>';
    html += '<tr ' + PatientInformationTab.getFieldDisplay(patient.location !== '--') + '>';
    html += '<td class="patient-drill-down-demographics-table-text" style="padding-left:48px; padding-top:4px;">'+patient.location+'</td>';
    html += '</tr>';
    html += '<tr ' + PatientInformationTab.getFieldDisplay(patient.hasIsolation( )) + '>';
    html += PatientInformationTab.createLabelCell("isolationStatusLabel", 150, i18n.ISOLATION);
    html += '<td class="patient-drill-down-demographics-table"> <div id="isolationStatus" class="patient-drill-down-demographics-table-text" >' + patient.getIsolations( ).getDrillDownDisplay( ) + '</div></td>';
    html += '</tr>';
    if(patient.hasIsolation() !== true && patient.location == '--') {
        html += '<tr>';
        html += '<td class="patient-drill-down-demographics-table-label" style="width:' + patientLabelWidth + 'px"><div class="truncate" style="width:' + patientLabelWidth + 'px">' +i18n.NO_INFORMATION + '</div></td>';
        html += '</tr>'
    }
    html += '</table>';
    html += '</td>';
    html += '</tr>';
    html += '<tr>';
    html += '<td class="borderless" style="width:'+halfWidth+'px;">';
    html += '<table id="demographicsTable" class="patient-drill-down-demographics-section-table" style="margin: -px;">';
    html += '<tr>';
    html += '<td style="padding:30px 0px 0px 20px;" class="patient-drill-down-demographics-table-header">' + i18n.PATIENT + '</td>';
    html += '</tr>';
    html += '<tr ' + PatientInformationTab.getFieldDisplay(patient.getResuscitationStatus( )) + '>';
    html += PatientInformationTab.createLabelCell("resuscitationStatusLabel", patientLabelWidth, i18n.RESUSCITATION_STATUS);
    html += '<td class="patient-drill-down-demographics-table"><div id="resuscitationStatus" class="patient-drill-down-demographics-table-text">' + patient.getResuscitationStatusFaceUpDisplay( ) + '</div></td>';
    html += '</tr>';
    html += '<tr ' + PatientInformationTab.getFieldDisplay(patient.getDietFaceUpDisplay() !== "--") + '>';
    html += PatientInformationTab.createLabelCell("dietLabel", patientLabelWidth, i18n.DIET);
    html += '<td class="patient-drill-down-demographics-table"><div id="diet" class="patient-drill-down-demographics-table-text">' + patient.getDietFaceUpDisplay( ) + '</div></td></tr>';
    html += '<tr ' + PatientInformationTab.getFieldDisplay(patient.hasHighRisk()) + '>';
    html += PatientInformationTab.createLabelCell("highRisksLabel", patientLabelWidth, i18n.HIGH_RISKS);
    html += '<td class="patient-drill-down-demographics-table"><div id="highRisks" class="patient-drill-down-demographics-table-text"><table class="borderless">' + patient.getHighRisks( ).getDrillDownDisplays( ) + '</table></div></td>';
    html += '</tr>';
    html += '<tr>';
    html += PatientInformationTab.createLabelCell("allergiesLabel", patientLabelWidth, i18n.ALLERGIES);
    /**
     * Check if the Allergies is " No allergies Recorded". If it is same, create link for "No allergies recorded " and attach click event.
	 * If it is not same, get the allergy and display with out any link.
     */	 
	if(patient.getAllergiesDisplay() == i18n.NO_ALLERGIES_RECORDED) {
	   html += '<td class="patient-drill-down-demographics-table"><div id="allergies" class="patient-drill-down-demographics-table-text link" onclick="AllergiesDialog.display(' + patient.patientId + ',' + patient.encounterId + ');">' + patient.getAllergies( ) + '</div></td>';
	}
	else {
	  html += '<td class="patient-drill-down-demographics-table"><div id="allergies" class="patient-drill-down-demographics-table-text">' + patient.getAllergies( ) + '</div></td>';
	}
    html += '</tr>';
    html += '</table>';
    html += '</td>';
    html += '</tr>'

    html += '<tr>';
    html += '<td class="borderless">';
    html += '<table id="demographicsTable" class="patient-drill-down-demographics-section-table" style="margin: -px;">';
    html += '<tr>';
    html += '<td style="padding:30px 0px 0px 20px;" class="patient-drill-down-demographics-table-header">' + i18n.VISIT + '</td>';
    html += '</tr>';
    html += '<tr>';
    html += PatientInformationTab.createLabelCell("reason_for_visit_label", patientLabelWidth, i18n.REASON_FOR_VISIT);
    html += '<td class="patient-drill-down-demographics-table"><div id="reason_for_visit" class="patient-drill-down-demographics-table-text">' + patient.getReasonForVisitDisplay( ) + '</div></td>';
    html += '</tr>';
    html += '<tr>';
    html += PatientInformationTab.createLabelCell("lengthOfStayLabel", patientLabelWidth, i18n.LOS);
    html += '<td class="patient-drill-down-demographics-table"><div id="lengthOfStay" class="patient-drill-down-demographics-table-text">' + patient.getLengthOfStayDisplay( ) + '</div></td>';
    html += '</tr>';
    html += '<tr>';
    html += PatientInformationTab.createLabelCell("admission_date_label", patientLabelWidth, i18n.ADMISSION_DATE);
    var admissionTest = patient.getAdmissionDateTime();
    if (admissionTest === null) {
        admissionTest = "--";
    }
    else {
        admissionTest = admissionTest.getFaceUpDateDisplay();
    }
    html += '<td class="patient-drill-down-demographics-table"><div id="admission_date" class="patient-drill-down-demographics-table-text">' + admissionTest + '</div></td>';
    html += '</tr>';
    html += '<tr ' + PatientInformationTab.getFieldDisplay(PatientInformationTab.isTargetedDischargePresent(patient)) + '>';
    html += PatientInformationTab.createLabelCell("targetedDischargeLabel", patientLabelWidth, i18n.TARGETED_DISCHARGE);
    html += '<td class="patient-drill-down-demographics-table"><div id="targetedDischarge" class="patient-drill-down-demographics-table-text">' + patient.getTargetedDischargeDisplay( ) + '</div></td>';
    html += '</tr>';
    html += '<tr ' + PatientInformationTab.getFieldDisplay(patient.getAcuity( ) !== "--") + '>';
    html += PatientInformationTab.createLabelCell("acuityStatusLabel", patientLabelWidth, i18n.ACUITY);
    html += '<td class="patient-drill-down-demographics-table"><div id="acuityStatus" class="patient-drill-down-demographics-table-text">' + patient.getAcuity( ) + '</div></td>';
    html += '</tr>';
    html += '</table>';
    html += '</td>';
    html += '</tr>'
    html += '</table>';
    html += '</td>';
    
    html += '<td class="borderless">';
    html += '<table id="demographicsTable" class="patient-drill-down-demographics-section-table" style="margin: -px;">';
    html += '<tr>';
    html += '<td style="padding:20px 0px 0px 70px;" class="patient-drill-down-demographics-table-header">' + i18n.CARE_TEAM + '</td>';
    html += '</tr>';
    html += '<tr>';
    if(CareTeams.getDisplayByEncounterId(patient.getEncounterId()) !== "--") {
        html += '<td class="patient-drill-down-demographics-table-label"><div style="padding-left:20px;" id="careTeam">' + CareTeams.getDisplayByEncounterId(patient.getEncounterId()) + '</div></td>';
    } else {
        html += '<td class="patient-drill-down-demographics-table-label" style="width:' + patientLabelWidth + 'px;"><div class="truncate" style="width:' + patientLabelWidth + 'px; padding-left:50px;">' +i18n.NO_INFORMATION + '</div></td>';
    }   
    html += '</tr>';
    html += '</table>';
    html += '</td>';
    html += '</tr>'

    

    html += '</table>';
    html += '</div>';

    return html;
},

createLabelCell : function(id, width, label) {
    return '<td class="patient-drill-down-demographics-table-label" style="width:' + width + 'px"><div id="' + id + '" class="truncate" style="width:' + width + 'px">' + label + ': ' + '</div></td>';
},

/**
 * Launches the plan of care for the current patient
 */
launchPlanOfCare : function ( ) {
    LinkNavigation.display(PatientDrillDown.patient, Configuration.planOfCareTab);
},

/**
 * Creates a hover for the given label
 * @param label - label which a truncation hover needs to be added for
 */
createHover : function(label) {
	Hover.displayForTruncation(label);
},

/**
 * This function maps patient information and then sets the hover for the content
 * @param patient - patient that the information is being display for
 */
createHovers : function (patient) {
    this.highRisksLabel = $("#highRisksLabel");
    this.allergiesLabel = $("#allergiesLabel");
    this.quickLinksLabel = $("#quickLinksLabel");
    this.highRisks = $("#highRisks");
    this.allergies = $("#allergies");
    this.quickLinks = $("#quickLinks");
	var demographicsTable = $("#demographicsTable");
    var reasonForVisitLabel = $("#reason_for_visit_label");
    var reasonforVisitDisplay = $("#reason_for_visit");
    var targetedDischargeLabel = $("#targetedDischargeLabel");
    var targetedDischargeDisplay = $("#targetedDischarge");
    var lengthOfStayLabel = $("#lengthOfStayLabel");
    var lengthOfStayDisplay = $("#lengthOfStay");
	var acuityLabel;
    var acuityDisplay;
    if (Configuration.acuity) {
        acuityLabel = $("#acuityStatusLabel");
        acuityDisplay = $("#acuityStatus");
    }
    var resuscitationStatusLabel;
    var resuscitationStatusDisplay;
    if (Configuration.resuscitationStatusIndicator) {
        resuscitationStatusLabel = $("#resuscitationStatusLabel");
        resuscitationStatusDisplay = $("#resuscitationStatus");
    }
    var isolationLabel;
    var isolationDisplay;
    if (Configuration.isolationIndicator) {
        isolationLabel = $("#isolationStatusLabel");
        isolationDisplay = $("#isolationStatus");
    }
    var dietLabel;
    var dietDisplay;
    if (Configuration.dietIndicator) {
        dietLabel = $("#dietLabel");
        dietDisplay = $("#diet");
    }
	if (Configuration.acuity) {
        this.createHover(acuityLabel);
        this.createHover(acuityDisplay);
    }
    this.createHover(reasonForVisitLabel);
    this.createHover(reasonforVisitDisplay);
    if (Configuration.targetedDischargeIndicator) {
        this.createHover(targetedDischargeLabel);
        this.createHover(targetedDischargeDisplay);
    }
    this.createHover(lengthOfStayLabel);
    this.createHover(lengthOfStayDisplay);
    if (Configuration.resuscitationStatusIndicator) {
        this.createHover(resuscitationStatusLabel);
        this.createHover(resuscitationStatusDisplay);
    }
    if (Configuration.isolationIndicator) {
        this.createHover(isolationLabel);
        this.createHover(isolationDisplay);
    }
    if (Configuration.dietIndicator) {
        this.createHover(dietLabel);
        this.createHover(dietDisplay);
    }
},

/**
 * Refreshes the display of the allergies for the given allergy array.
 * 
 * @param allergies - an array of allergies
 */
refreshAllergies : function ( ) {
    if (this.allergies == null) {
        return;
    }
    this.allergies.empty( );
    this.allergies.append (PatientDrillDown.patient.getAllergies( ));
    var PatientAllergies = Allergies.getByPatientId(this.patientId);
    if(PatientAllergies !== undefined && PatientAllergies !== null && PatientAllergies.length > 0) {
        $("#allergies").prop("onclick", null);
        $("#allergies").removeClass("link");
    }
},

/**
 * For the special case of a list (or array) of items, see if the list is empty.
 * @param list - a list to evaluate
 * @return true if the list is not null, undefined, or of 0 length
 */
isListNotEmpty : function (list) {
    var res = true;
    if (list == null || list == "undefined" || list.length === 0) {
        res = false;
    }
    return res;       
},

/**
 * Determins if a targeted discharge date is present.
 * @param patient - The patient we are checking for
 * @return true if a targeted discharge date is present
 */
isTargetedDischargePresent : function (patient) {
    var res = true;
    if (patient.getTargetedDischargeDate( ) == null || patient.getTargetedDischargeDisplay( ) === "--") {
        res = false;
    }
    return res;       
},

/**
 * Checks the input parameter variable and if it is false return css command else return empty string
 * 
 * @param indicator boolean variable
 * @return The HTML string that hides the row.
 */
getFieldDisplay : function (indicator) {
    if (indicator != null) {
        if (indicator) {
            return '';
        }
    }
    return 'style="display : none;"';
}

};

/**
 * Represents the detailed drill down display of a single patient.
 */
var PatientDrillDown = {
    container : null,
    patient : null,
    nameCell : null,
    patientCell : null,
    leftContent : null,
    rightContent : null,
    toolbar : null,
    toolbarDisplay : null,
    width : 0,
    availableHeight : null,
    activityListWidth : null,
    section: null,

    /**
     * Displays the Patient Drill Down
     *
     * @param cell - The PatientCell object to display the drill down next to.
     * @param patient - The patient to display the drill down for.
     * @param filters - The array of task type filters to apply upon display of the drill down. Can be null or empty.
     * @param section - The display of the section to scroll to upon display of the drill down. Can be null or empty.
     * @param timeFilterButtons-  The 12hrs time filter button to be enabled.
     */
    display : function(cell, patient, filters, section, timeFilterButtons) {
        Timers.start("CAP:CareCompass.ActivityList");
        Timers.stop("CAP:CareCompass.ActivityList");
        if (this.container != null) {
            this.change(cell, patient);
            return;
        }
        Notifier.disable();
        ActivityList.tasksLoaded = false;
        this.patient = patient;
        ActivityListTab.applyFilters(filters);
        PrnListTab.applyFilters(filters);
        this.section = section;

        CareCompass.body.append(this.createContainer(cell));
		PatientInformationTab.createHovers(patient);

        if (Configuration.planOfCareColumn) {
            PlanOfCareTab.createPlannedPlansHover();
            PlanOfCareTab.createSuggestedPlansHover();
            PlanOfCareTab.createInitiatedPlansHover();
        }

        this.patientInfoContent = $("#patientInfoDiv");
        this.nameCell = $("#patientName");

        // To allow for shadowed border to display
        this.container.width(this.width);
        PatientDrillDown.container.css("background", "#F6F7FB");
        Overlay.display(PatientDrillDown.container);
        ActivityList.loadTaskDisplays();
        ActivityListTab.displayMedicationHover();
		ActivityListTab.displayPatientCareHover();
		ActivityListTab.displayAssesmentHover();
		ActivityListTab.displayOtherHover();
        PrnListTab.displayMedicationHover();
        PrnListTab.displayPatientCareHover();
        PrnListTab.displayAssesmentHover();
        PrnListTab.displayOtherHover();
        Shadow.display(PatientDrillDown.container);
        PatientDrillDown.container.children().show();
        PatientTable.disableScrolling();
        this.mapDemographicsRow(patient, this.container);
        if (Configuration.defaultTab !== "") {
            this.nameCell.mouseup(function( ) {
                Timers.start("USR:CareCompass.NameLaunchChart");
                LinkNavigation.display(patient, Configuration.defaultTab);
            });
        } else {
            this.nameCell.children().removeClass("link");
        }

        Timers.stop("USR:CareCompass.OpenPatientDrillDown");
        if ("PRN" == section) {
            // Open the PRN/Continuous tab if they clicked on the PRN indicator
            $("#patientDrillDownTabs").tabs({ active : 1 });
        }
        else {
            // Open the Activity Summary tab if the PRN tab was not requested
            $("#patientDrillDownTabs").tabs({ active : 0 });
        }
        $( "#patientDrillDownTabs" ).on( "tabsactivate", function( event, ui ) {
            if (ui.newPanel.selector === "#prnListDiv") {
                PrnListTab.refreshTasks();
            }
            if (ui.newPanel.selector === "#tasksDiv") {
                ActivityListTab.refreshTasks();
            }
        } );
        ActivityListTab.updateTimeFilterButtons(timeFilterButtons);
    },


    /**
     * Determines if the patient drill down is displayed or not.
     *
     * @param none
     * @return True if the patient drill down is displayed, false if not.
     */
    isDisplayed : function( ) {
        if (this.container != null) {
            return true;
        }
        return false;
    },

    /**
     * Creates the patient drill down container object.
     *
     * @param none
     * @return The document object representing the container of the patient drill down.
     */
    createContainer : function(cell) {
        var scrollBarWidth = 16;
        var shadowWidth = 2;
        this.width = CareCompass.body.width() - (cell.position().left + cell.width() - shadowWidth) - 6;
        this.container = $(document.createElement('div'));
        this.container.addClass("patient-drill-down");
        this.container.addClass("loading");
        this.container.width(0);

        this.container.css("top", CareCompass.toolbar.height());
        this.container.css("left", cell.position().left + cell.width());
        this.container.css("height", CareCompass.body.height() - CareCompass.toolbar.height()-7);

        this.container.append(this.create(cell));
        this.container.children().hide();
        return this.container;
    },

    /**
     * Creates the patient drill down.
     *
     * @param none
     * @return The HTML string representing the patient drill down.
     */
    create : function(cell) {
        var html = '<table class="patient-drill-down-table">';
        html += PatientDrilldownDemographicsBanner(this.patient);
        html += this.createContent(cell);
        return html;
    },

    /**
	* Maps and initializes the demographics row and hovers.
	* @param patient - The patient to display demographics for.
	* @param container - patient drill down container containing demographics bar.
	*/
    mapDemographicsRow : function(patient, container) {
    	var name = null;
    	var age = null;
    	var sex = null;
    	var dob = null;
    	var mrn = null;
    	var fin = null;

    	var demographicsRow = $(container.find(".patient-drill-down-banner-table tr"));
    	name = $(demographicsRow.find(".patient-drill-down-banner-name-cell span")[0]);
    	age = $(demographicsRow.find(".patient-drill-down-banner-age-cell span")[1]);
    	sex = $(demographicsRow.find(".patient-drill-down-banner-gender-cell span")[1]);
    	dob = $(demographicsRow.find(".patient-drill-down-banner-dob-cell span")[1]);
    	mrn = $(demographicsRow.find(".patient-drill-down-banner-mrn-cell span")[1]);
    	fin = $(demographicsRow.find(".patient-drill-down-banner-fin-cell span")[1]);

    	this.initializeDemographicsHover(patient, name, age, sex, dob, mrn, fin);
    },

    /**
	* Initializes the hovers for the various fields that display in the demographics row.
	* @param patient - The patient to display demographics for.
	* @param name - The name of the patient.
	* @param age - The age of the patient.
	* @param sex - The gender of the patient.
	* @param dob - The dob of the patient.
	* @param mrn - The mrn of the patient.
	* @param fin - The fin of the patient.
	*/
    initializeDemographicsHover : function (patient, name, age, sex, dob, mrn, fin) {
    	Hover.displayForTruncation(name);
    	Hover.displayForTruncation(age);
    	Hover.displayForTruncation(sex);
    	Hover.displayForTruncation(dob);
    	Hover.displayForTruncation(mrn);
    	Hover.displayForTruncation(fin);
    },

    /**
     * Creates the contents for patient drilldown
     *
     * @param none
     * @return The HTML string representing the patient information and activity summary.
     */
    createContent : function(cell) {
        var labelWidth = 115;
        this.availableHeight = CareCompass.body.height() - CareCompass.toolbar.height();
        this.activityListWidth = 45;

        var html = '<tr>';
        html += '<td class="patient-drill-down-demographics-cell">';

        // The tabs are defined here.
        html += '<div id="patientDrillDownTabs" style="margin: 0px; padding-left:0px; padding-right:0px;">';
        html += '<ul class="ui-tabs-tab-bar-ul">';
        html += '<li>';
        html += '<table class="borderless">';
        html += '<tr>';
        html += '<td class="ui-tab-end"><div class="ui-tab-left"></div></td>';
        html += '<td class="borderless"><div class="ui-tab-center" ><a href="#tasksDiv" class="patient-drill-down-tab">' + i18n.ACTIVITY_SUMMARY_TAB + '</a></div></td>';
        html += '<td class="ui-tab-end"><div class="ui-tab-right"></div></td>';
        html += '</tr>';
        html += '</table>';
        html += '</li>';
		html += '<li><div class="ui-tab-spacer">&nbsp;</div></li>';
        html += '<li>';
        html += '<table class="borderless">';
        html += '<tr>';
        html += '<td class="ui-tab-end"><div class="ui-tab-left"></div></td>';
        html += '<td class="borderless"><div class="ui-tab-center" ><a href="#prnListDiv" class="patient-drill-down-tab">' + i18n.ACTIVITY_PRN_TAB + '</a></div></td>';
        html += '<td class="ui-tab-end"><div class="ui-tab-right"></div></td>';
        html += '</tr>';
        html += '</table>';
        html += '</li>';

        html += '<li' + (Configuration.planOfCareColumn ? '' : 'class="hidden"') + '>' +
                '<div class="ui-tab-spacer' + (Configuration.planOfCareColumn ? '' : ' hidden') + '">&nbsp;</div></li>';
        html += '<li' + (Configuration.planOfCareColumn ? '' : 'class="hidden"') + '>';
        html += '<table class="borderless' + (Configuration.planOfCareColumn ? '' : ' hidden') + '">';
        html += '<tr>';
        html += '<td class="ui-tab-end"><div class="ui-tab-left"></div></td>';
        html += '<td class="borderless"><div class="ui-tab-center"><a href="#carePlanDiv" class="patient-drill-down-tab">' + i18n.PLANS_OF_CARE_TAB + '</a></div></td>';
        html += '<td class="ui-tab-end"><div class="ui-tab-right"></div></td>';
        html += '</tr>';
        html += '</table>';
        html += '</li>';

		html += '<li><div class="ui-tab-spacer">&nbsp;</div></li>';
        html += '<li>';
        html += '<table class="borderless">';
        html += '<tr>';
        html += '<td class="ui-tab-end"><div class="ui-tab-left"></div></td>';
        html += '<td class="borderless"><div class="ui-tab-center"><a href="#patientInfoDiv" class="patient-drill-down-tab">' + i18n.INFORMATION_TAB + '</a></div></td>';
        html += '<td class="ui-tab-end"><div class="ui-tab-right"></div></td>';
        html += '</tr>';
        html += '</table>';
        html += '</li>';
        html += '</ul>';

        // This is the contents for the first tab display, it must be a DIV with id="patientInfoDiv"
        html += PatientInformationTab.display(this.width, this.availableHeight, labelWidth, this.patient);

        // This is the contents for the second tab display, it must be a DIV with id="tasksDiv"
        html += ActivityListTab.display(this.width, this.availableHeight, labelWidth, this.activityListWidth);

        // This is the contents for the second tab display, it must be a DIV with id="prnListDiv"
        html += PrnListTab.display(this.width, this.availableHeight, labelWidth, this.activityListWidth);

        // This is the contents for the plans of care tab display, it must be a DIV with id="carePlanDiv"
        html += PlanOfCareTab.display(this.width, this.availableHeight, labelWidth, this.patient);

        html += '</div>';
        html += '</td>';
        html += '</tr>';

        return html;
    },

	getFieldDisplay: function getFieldDisplay( indicator) {
		if(indicator !=null){
			if(indicator){
				return '';
			}else{
				return 'style="display : none"';
			}
		}
	},

    launchOrders : function( ) {
        Overlay.display(this.container);
        MPAGES_EVENT("ORDERS", this.patient.patientId + '|' + this.patient.encounterId + '|{ORDER|0|0|0|0|0}|24|{2|127}{3|127}|16');
        Service.loadCarePlans(this.patient.patientId, this.patient.pprCd, this.patient.encounterId);
    },

    /**
     * Removes the patient drill down.
     *
     * @param none
     */
    remove : function( ) {
        if (this.container != null) {
            this.container.empty();
            PatientTable.hideRowHovers();
            PatientDrillDown.container.remove();
            PatientDrillDown.container = null;
            PatientTable.enableScrolling();
            PatientDrillDownErrorScreen.hide();
            if(CC_PatientFocus.patientFocus != null) {
                CC_PatientFocus.patientFocus.ClearPatientFocus();
            }
            ActivityListRightClickMenu.remove();
            Notifier.enable();
        }
        ActivitiesPopOver.hideRowHovers();
    },

    /**
     * Removes the patient drill down and then displays a new one based on the input cell and patient.
     *
     * @param cell - The Patient Cell object to display the new drill down for.
     * @param patient - The Patient object to display the new drill down for.
     */
    change : function(cell, patient) {
        if (this.container != null) {
            this.container.empty();
            PatientDrillDown.container.remove();
            PatientDrillDown.container = null;
            PatientDrillDown.display(cell, patient);
        }
    },
};

/**
 * A means of tracking state differences between activities.
 * 
 * @param none
 * @return none
 */
function ActivityState (task) {
    type : null;
    stat : null;
    overdue : null;

    this.type = task.type;
    this.stat = task.isUrgent();
    this.overdue = task.isOverdue();
    
    /**
     * Determine if we should highlight the row
     * 
     * @param Another activity state
     * @returns true if the states are different
     */
    this.isChangeHighlight = function (activityState) {
        if (activityState == null) {
            return false;
        }
        if (activityState.type != this.type) {
            return true;
        }
        if (activityState.stat != this.stat) {
            return true;
        }
        if (activityState.overdue != this.overdue) {
            return true;
        }
        return false;
    },

    /**
     * Determine if we should show the icon
     * 
     * @param Another activity state
     * @returns true if the states are different
     */
    this.isShowIcon = function (activityState) {
        if (activityState == null) {
            return true;
        }
        if (activityState.type != this.type) {
            return true;
        }
        if (activityState.stat != this.stat) {
            return true;
        }
        if (activityState.overdue != this.overdue) {
            return true;
        }
        return false;
    }
}
/**
 * Represents the drill down display of tasks for a single patient.
 */
var ActivityList = { 
    overdueSection : null,
    currentSection : null,
    nextHourSection : null,
    prnSection : null,
    interdisciplinarySection : null,
    width : 0,
    displayHours : 2,
    displayMeds : true,
    displayPatientCare : true,
    displayAssessment : true,
    displayOther : true,
    rows : [ ],
    selectedTasks : [ ],
    next2HoursLeft : null,
    next2Hours : null,
    next4Hours : null,
    next12Hours : null,
    tasksLoaded : false,
    printLabelEnabled : false,
    tasksContainer : null,
    taskCountError : null,
    isPatientDrillDownLoading: false,
    requestTaskCount: 0,
    
    /**
     * Marks specific task types to display or not based on the input filters array
     * 
     * @param filters - The array of task type filters to apply upon display of the drill down. Can be null or empty.
     */
    getFilterDisplay : function ( ) {
        var display = i18n.DISPLAYING + " ";
        var originalDisplay = i18n.DISPLAYING + " ";
    
        if (this.displayMeds === true) {
            display += i18n.MEDICATIONS;
        }
        if (this.displayPatientCare) {
            if (this.displayMeds && (this.displayAssessment || this.displayOther)) {
                display += ", " + i18n.PATIENT_CARE;
            } else if (this.displayMeds) {
                display += " " + i18n.AND + " " + i18n.PATIENT_CARE;
            } else {
                display += i18n.PATIENT_CARE;
            }
        }
        if (this.displayAssessment) {
            if ( (this.displayMeds || this.displayPatientCare) && this.displayOther) {
                display += ", " + i18n.ASSESSMENT;
            } else if (this.displayMeds || this.displayPatientCare) {
                display += " " + i18n.AND + " " + i18n.ASSESSMENT;
            } else {
                display += i18n.ASSESSMENT;
            }
        }
        if (this.displayOther) {
            if (this.displayMeds || this.displayPatientCare || this.displayAssessment) {
                display += " " + i18n.AND + " " + i18n.OTHER;
            } else {
                display += i18n.OTHER;
            }
        }
        if (display == originalDisplay) {
            display += i18n.NO_ACTIVITIES;
        } else {
            display += " " + i18n.ACTIVITIES;
        }
        return display;
    },
    
    /**
     * Loads the displays and details of the tasks associated to the patient this drill down is being displayed for.
     * 
     * @param none
     */
    loadTaskDisplays : function ( ) {
        this.taskCountError = false;
        this.isPatientDrillDownLoading = true;
		ActivityListTab.tasksContainer = $("#tasksContainer");
		PrnListTab.tasksContainer = $("#prnTasksContainer");
        if(Tasks.getTotalTasksCountByEncounterId(PatientDrillDown.patient.encounterId) > 250){
            this.taskCountError = true;
            Overlay.remove();
            // Need to make sure we display error on the visible tab.
            // Reset things back to the Activities tab displayed, with the PRN tab disabled.
            // Set PRN tab [Activities is tab 0, PRN is 1, PatientInfo is 2] as disabled to block their selection.
            $("#patientDrillDownTabs").tabs({active : 0 , disabled: [ 1 ] });
            // Display the error message
            PatientDrillDownErrorScreen.display(i18n.ACTIVITY_LIMIT, ActivityListTab.tasksContainer);
            $("#ActivityListTab-toolbar").addClass("hidden");
            ActivityListTab.tasksContainer.css('overflow','hidden');
            $("#PrnListTab-toolbar").addClass("hidden");
            PrnListTab.tasksContainer.css('overflow','hidden');
            return;
        }
        var patientTaskIds = Tasks.getIdsByEncounterId(PatientDrillDown.patient.encounterId);
        if(patientTaskIds == undefined || patientTaskIds == null || patientTaskIds.length <= 0) {
            ActivityListTab.refreshTasks();
            PrnListTab.refreshTasks();
            return;
        }
        var taskIds = window.external.DiscernObjectFactory("DOUBLEMAP");
        for(var i = 0; i < patientTaskIds.length; i++) {
            taskIds.Add(i, patientTaskIds[i]);
        }
        this.requestTaskCount = taskIds.GetCount();
        Service.loadTasks(taskIds, PatientDrillDown.patient.pprCd);
    },
    
    /**
     * Creates a task row.
     * 
     * @param task - The task associated to this row.
     * @param type - The type of task section this row is in.
     * @param index The index of row within this section.
     * @return The HTML string representing the task row.
     */
    createTaskRow : function (task, type, index, highlightState, iconState, filtered) {
        var width = PatientDrillDown.width;
        // unusable = outside of table =  cell left margin + icon + name left margin + detail left margin + cell right margin + scroll bar + right margin of table
        var computedUnusableSpace = 6 + 10 + 16 + 10 + 13 + 10 + 17 + 10;
        // How much space we really have to put content in.
        var availableDisplayWidth = width - computedUnusableSpace;
        var classes = 'deselected';
        if(filtered === true) {
            classes += ' hidden';
        }
		if(task.isOverdue()) {
			classes += ' overdue';
		}
        if (task.isUrgent ( )) {
            classes += ' urgent';
        }
        if (task.isTimeStudy ( )) {
            classes += ' timed';
        }
        if (task.isSpecimenCollect()) {
        	classes += ' collection';
        }
        if (highlightState === true) {
            classes += ' task-highlighted';
        }
        var html = '<tr id="' + type + index + '" taskId="' + task.id + '" class="' + classes + '">';
		html += '<td class="borderless">';
        html += '<div class="activityList-cell">';
		html += '<span class="activity-type">';
		if (iconState === false) {
            // Alternate spacer needs to go here when icon is suppressed.
            html += '<span class="no-activity-type-icon-deselected"></span>';
            html += '<span class="no-activity-type-icon-selected"></span>';
		}
		else {
		    if (task.isOverdue()) {
                if (task.type == "MEDICATION") {
                    html += '<span class="med_red"></span>';
                    html += '<span class="med_white"></span>';
                }
                if (task.type == "PATIENTCARE") {
                    html += '<span class="patient_care_red"></span>';
                    html += '<span class="patient_care_white"></span>';
                }
                if (task.type == "ASSESSMENT") {
                    html += '<span class="assessment_red"></span>';
                    html += '<span class="assessment_white"></span>';
                }
                if (task.type == "OTHER") {
                    html += '<span class="other_red"></span>';
                    html += '<span class="other_white"></span>';
                }
		    }
		    else {
	            if (task.type == "MEDICATION") {
	                html += '<span class="medications-icon"></span>';
	                html += '<span class="med_white"></span>';
	            }
	            if (task.type == "PATIENTCARE") {
	                html += '<span class="patient-care-icon"></span>';
	                html += '<span class="patient_care_white"></span>';
	            }
	            if (task.type == "ASSESSMENT") {
	                html += '<span class="assessment-icon"></span>';
	                html += '<span class="assessment_white"></span>';
	            }
	            if (task.type == "OTHER") {
	                html += '<span class="other-icon"></span>';
	                html += '<span class="other_white"></span>';
	            }
		        
		    }
		}
        html += '</span>';
        var availableWidth = availableDisplayWidth;
        if(task.isTimeStudy()) {
            html += '<span class="time-study-indicator"></span>';
            availableWidth -= 22
        }
        
        if (task.isUrgent ( )) {
            html += '<span class="stat-image"></span>';
            availableWidth -= 22;
        }
        var taskDisplay = "";
        taskDisplay += task.getDisplay ( );
        html += '<div class="task-display truncate">' + taskDisplay + '</div>';
        availableWidth -= this.computeTextPixels(taskDisplay);
        var taskStatusDisplay = task.getStatusDisplay();
        if(task.isInValidation()) {
        	taskStatusDisplay = '<span style="color:#000000; padding-right:4px;">(' + taskStatusDisplay + ')</span>';
        }
    	else {
    		taskStatusDisplay = "";
    	}       	
        var detailsWidth = this.computeTextPixels(task.getDetailDisplay());
        if (detailsWidth < availableWidth) {
            html += '<div class="task-detail truncate">' + taskStatusDisplay + task.getDetailDisplay ( ) + '</div>';
        }
        else {
            html += '<div class="task-detail truncate" style="width:' + availableWidth + 'px;">' + taskStatusDisplay  + task.getDetailDisplay ( ) + '</div>';
        }
		var commentMargin = 40;
        if (task.isSpecimenCollect()) {
            commentMargin += 20;
        }
		if(task.isUrgent()){
		    commentMargin += 20;
		}
        if(task.isTimeStudy()){
            commentMargin += 20;
        }
		var commentWidth = availableDisplayWidth - commentMargin;
		if (task.getInstructions ( ) !== "") {
            html += '<div class="task-instructions truncate" style="width:'+ commentWidth + 'px;">' + i18n.INSTRUCTION + ': ' + task.getInstructions() +'</div>'; 
		}
        var comments = task.getOrderComments();
        if (comments != null && comments.length > 0) {
            if (task.isSpecimenCollect()) {
            	if(comments.length > 1) {
            		var commentlabel = i18n.COMMENTS;
            	} else {
            		var commentlabel = i18n.COMMENT;
            	}
            	 html += '<div class="task-comment-label" style="width:'+ commentWidth + 'px;">' + commentlabel + '</div>';
                 for (var i = 0; i < comments.length; i++) {
                     html += '<div id="taskComment'  + i + '" class="task-comment truncate" style="width:'+ commentWidth + 'px;">' + comments[i].display + ': ' + comments[i].comment +'</div>';
                }
            }
            else {
                for (var i = 0; i < comments.length; i++) {
                    html += '<div id="taskComment'  + i + '" class="task-comment truncate" style="width:'+ commentWidth + 'px;">' + i18n.COMMENT + ': ' + comments[i].comment +'</div>';
                }
            }
        }
        html += '</div>';
		html += '</td>';
        html += '</tr>';
        return html;
    },
    
    /**
     * 
     * @param the string to estimate the pixel width of
     * 
     * @return the estimated pixel width of the string
     */
    computeTextPixels : function(text) {
        return (text.length * 7);
    },
    
    /**
     * Creates an empty row with --.
     * 
     * @param none
     * @return The HTML string representing the empty row.
     */
    createEmptyRow : function ( ) {
        var html = '<tr>';
        html += '<td class="activityList-row">--</td>';
        html += '</tr>';
        return html;
    },
};

var ActivityListTab = {
        currentSection : null,
        unscheduledSection : null,
        nextHourSection : null,
        interdisciplinarySection : null,
        width : 0,
        displayHours : 2,
        displayMeds : true,
        displayPatientCare : true,
        displayAssessment : true,
        displayOther : true,
        rows : [],
        selectedTasks : [],
	 taskswithNoAccess : [],
        tasksContainer : null,
        activityListDiv : null,
        printLabelEnabled : false,
        highlightState : false, // Used to toggle row highlight.
        patientActivityTimer : false,
        loadSelectedTasksFlag: false,
        requestCount: 0,

    /**
     * Create the HTML for the Patient activity summary tab DIV contents
     *
     * @param none
     * @return The HTML string that creates the activity summary DIV.
     */
    display : function(width, availableHeight, labelWidth, activityListWidth) {
        ActivityListTab.displayHours = 2; // Reset the display hours to 2

        var paddingWidth = 17;
        this.width = width - paddingWidth;
        // The activity summary tab contents are defined here.
        var html = "";
        html += '<div id="tasksDiv" class=".activityList-div ui-tabs-below-tab-bar">';
        html += '<table class="patient-drill-down-demographics-section-table borderless" style="width: 100%;">';
        // This is the tool bar, with the filter buttons
        html += '<tr>';
        html += '<td colspan="2" style="border: none;">';
        html += '<table class="borderless" style="width:100%;">';
        html += ActivityListToolBar('ActivityListTab');
        html += '</table>';
        html += '</td>';
        html += '</tr>';
        // This is the two panes for the activity summary
        html += '<tr>';
        html += '<td style = "width: 100%;border:none;">';
        html += '<div style = "background: #ffffff; padding-left: 6px;">';
        html += '<table style="width: ' + this.width + '; border: 1px solid #bdbdbd; background: #ffffff;">';
        html += '<tr style="background: #ffffff;">';
        html += '<td style="width: ' + this.width + 'px; height:' + (availableHeight - 140) + 'px; vertical-align:top; border: none;">';
        html += '<table class="patient-drill-down-content-section-left" style="width:100%; vertical-align:top; height:' + (availableHeight - 140) + 'px; border: none; ">';
        html += '<tr>';
        html += '<td class="activityList-table-content">';
        // This is the left side pane, where the task list information is inserted after the service call, inside the DIV with
        // id="tasksContainer".
        html += '<div id="tasksContainer" class="activityList-content borderless" style="height:' + (availableHeight - 180) + 'px;">&nbsp;</div>';
        html += '<div class="activity-list-button-container">';
        html += '<table class="activityList-dialog-buttons-table">';
        html += '<tr>';
        html += '<td class="activityList-buttons">';
        html += '<input id="activityList-done" type="button" disabled class="activity-dialog-buttons" onmouseup="ActivityListTab.chartDone();" value="' + i18n.DONE + '"/>';
        html += '<input id="activityList-not-done" type="button" disabled class="activity-dialog-buttons" onmouseup="ActivityListTab.chartNotDone();" value="' + i18n.NOT_DONE + '"/>';
        html += '<input id="activityList-document" type="button" disabled class="activity-dialog-buttons" onmouseup="ActivityListTab.chart();" value="' + i18n.DOCUMENT + '"/>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        html += '</div>';
        return html;
    },

    /**
     * Marks specific task types to display or not based on the input filters array
     *
     * @param filters - The array of task type filters to apply upon display of the drill down. Can be null or empty.
     */
    applyFilters : function (filters) {
        this.displayMeds = true;
        this.displayPatientCare = true;
        this.displayAssessment = true;
        this.displayOther = true;
        if (filters === undefined || filters == null) {
            return;
        }
        for ( var i = 0; i < filters.length; i ++ ) {
            if (filters[i] === "MEDICATIONS") {
                this.displayMeds = false;
            }
            if (filters[i] === "PATIENTCARE") {
                this.displayPatientCare = false;
            }
            if (filters[i] === "ASSESSMENT") {
                this.displayAssessment = false;
            }
            if (filters[i] === "OTHER") {
                this.displayOther = false;
            }
        }
    },

    /**
     * Filters the task rows to display or not display patient care rows based on the state of the indicator.
     *
     * @param none
     */
    filterPatientCare : function ( ) {
        if (ActivityList.taskCountError === true) {
            return;
        }
        if (this.displayPatientCare === false) {
            $ ("#ActivityListTab-patient-care-filter").removeClass ("filter-mid").addClass ("clicked-filter-mid").addClass ("clicked-border-left");
            $ ("#ActivityListTab-patient-care-filter-image").removeClass ("patient-care-icon").addClass ("patient_care_white");
            this.displayPatientCare = true;
            Hover.hide ( );
            ActivityListTab.displayPatientCareHover ( );
            ActivityListTab.refreshTasks();
        } else {
            this.displayPatientCare = false;
            $ ("#ActivityListTab-patient-care-filter").removeClass ("clicked-filter-mid").removeClass ("clicked-border-left").addClass ("filter-mid");
            $ ("#ActivityListTab-patient-care-filter-image").removeClass ("patient_care_white").addClass ("patient-care-icon");
            Hover.hide ( );
            ActivityListTab.displayPatientCareHover ( );
            ActivityListTab.refreshTasks();
        }
    },

    /**
     * Display the hover over the filter button for patient care
     */
    displayPatientCareHover : function ( ) {
        var patientCareIcon = $("#ActivityListTab-patient-care-filter");
        var display = null;
        if (this.displayPatientCare === true) {
            display = i18n.PATIENTCARE_DISPLAYED;
        } else {
            display = i18n.PATIENTCARE_FILTERED;
        }
        var patientCareConfig = { over : function (e) {
            Hover.display (e, "", display);
        },
        timeout : 200,
        out : function (e) {
            Hover.hide ( );
        },
        interval : 200 };
        patientCareIcon.hoverIntent (patientCareConfig);
    },

    /**
     * Filters the task rows to display or not display medication rows based on the state of the indicator.
     *
     * @param none
     */
    filterMeds : function ( ) {
        if (ActivityList.taskCountError === true) {
            return;
        }
        if (this.displayMeds === false) {
            $ ("#ActivityListTab-med-filter-left").removeClass ("button-left").addClass ("clicked-button-left");
            $ ("#ActivityListTab-med-filter").removeClass ("filter-mid").addClass ("clicked-filter-mid");
            $ ("#ActivityListTab-med-filter-image").removeClass ("medications-icon").addClass ("med_white");
            this.displayMeds = true;
            Hover.hide ( );
            ActivityListTab.displayMedicationHover ( );
            ActivityListTab.refreshTasks();
        } else {
            this.displayMeds = false;
            $ ("#ActivityListTab-med-filter-left").removeClass ("clicked-button-left").addClass ("button-left");
            $ ("#ActivityListTab-med-filter").removeClass ("clicked-filter-mid").addClass ("filter-mid");
            $ ("#ActivityListTab-med-filter-image").removeClass ("med_white").addClass ("medications-icon");
            Hover.hide ( );
            ActivityListTab.displayMedicationHover ( );
            ActivityListTab.refreshTasks();
        }
    },

    /**
     * Display the hover over the filter button for medication
     */
    displayMedicationHover : function ( ) {
        var medicationIcon = $("#ActivityListTab-med-filter");
        var display = null;
        if (this.displayMeds === true) {
            display = i18n.MEDICATIONS_DISPLAYED;
        } else {
            display = i18n.MEDICATIONS_FILTERED;
        }
        var medicationConfig = { over : function (e) {
            Hover.display (e, " ", display);
        },
        timeout : 200,
        out : function (e) {
            Hover.hide ( );
        },
        interval : 200 };
        medicationIcon.hoverIntent (medicationConfig);
    },

    /**
     * Filters the task rows to display or not display assessment rows based on the state of the indicator.
     *
     * @param none
     */
    filterAssessment : function ( ) {
        if (ActivityList.taskCountError === true) {
            return;
        }
        if (this.displayAssessment === false) {
            $ ("#ActivityListTab-assessment-filter").removeClass ("filter-mid").addClass ("clicked-filter-mid").addClass ("clicked-border-left");
            $ ("#ActivityListTab-assessment-filter-image").removeClass ("assessment-icon").addClass ("assessment_white");
            this.displayAssessment = true;
            Hover.hide ( );
            ActivityListTab.displayAssesmentHover ( );
            ActivityListTab.refreshTasks();
        } else {
            this.displayAssessment = false;
            $ ("#ActivityListTab-assessment-filter").removeClass ("clicked-filter-mid").removeClass ("clicked-border-left").addClass ("filter-mid");
            $ ("#ActivityListTab-assessment-filter-image").removeClass ("assessment_white").addClass ("assessment-icon");
            Hover.hide ( );
            ActivityListTab.displayAssesmentHover ( );
            ActivityListTab.refreshTasks();
        }
    },

    /**
     * Display the hover over the filter button for assesment
     */
    displayAssesmentHover : function ( ) {
        var assesmentIcon = $("#ActivityListTab-assessment-filter");
        var display = null;
        if (this.displayAssessment === true) {
            display = i18n.ASSESSMENTS_DISPLAYED;
        } else {
            display = i18n.ASSESSMENTS_FILTERED;
        }
        var AssesmentConfig = { over : function (e) {
            Hover.display (e, " ", display);
        },
        timeout : 200,
        out : function (e) {
            Hover.hide ( );
        },
        interval : 200 };
        assesmentIcon.hoverIntent (AssesmentConfig);
    },

    /**
     * Filters the task rows to display or not display other rows based on the state of the indicator.
     *
     * @param none
     */
    filterOther : function ( ) {
        if (ActivityList.taskCountError === true) {
            return;
        }
        if (this.displayOther === false) {
            $ ("#ActivityListTab-other-filter").removeClass ("filter-mid").addClass ("clicked-filter-mid").addClass ("clicked-border-left");
            $ ("#ActivityListTab-other-filter-image").removeClass ("other-icon").addClass ("other_white");
            $ ("#ActivityListTab-other-filter-right").removeClass ("button-right").addClass ("clicked-button-right");
            this.displayOther = true;
            Hover.hide ( );
            ActivityListTab.displayOtherHover ( );
            ActivityListTab.refreshTasks();
        } else {
            this.displayOther = false;
            $ ("#ActivityListTab-other-filter").removeClass ("clicked-filter-mid").removeClass ("clicked-border-left").addClass ("filter-mid");
            $ ("#ActivityListTab-other-filter-image").removeClass ("other_white").addClass ("other-icon");
            $ ("#ActivityListTab-other-filter-right").removeClass ("clicked-button-right").addClass ("button-right");
            Hover.hide ( );
            ActivityListTab.displayOtherHover ( );
            ActivityListTab.refreshTasks();
        }
    },

    /**
     * Display the hover over the filter button for other
     */
    displayOtherHover : function ( ) {
        var otherIcon = $("#ActivityListTab-other-filter");
        var display = null;
        if (this.displayOther === true) {
            display = i18n.OTHER_DISPLAYED;
        } else {
            display = i18n.OTHER_FILTERED;
        }
        var otherConfig = { over : function (e) {
            Hover.display (e, " ", display);
        },
        timeout : 200,
        out : function (e) {
            Hover.hide ( );
        },
        interval : 200 };
        otherIcon.hoverIntent (otherConfig);
    },

    /**
     * Determines if the task we are given should be displayed, based on the filter flags for activity type
     *
     * @param task - The task we are to evaluate.
     * @return true if the task should be filtered.
     */
    filterTaskByActivityType : function (task) {
        if (task.type == "MEDICATION") {
            return this.displayMeds === false;
        }
        if (task.type == "PATIENTCARE") {
            return this.displayPatientCare === false;
        }
        if (task.type == "ASSESSMENT") {
            return this.displayAssessment === false;
        }
        if (task.type == "OTHER") {
            return this.displayOther === false;
        }
        return false;
    },

    /**
     * Filters the scheduled tasks section to display only 2 time buckets.
     *
     * @param none
     */
    displayNext2Hours : function() {
        if (ActivityList.taskCountError === true) {
            return;
        }
        if (ActivityListTab.displayHours === 2) {
            return;
        }
        $("#next-2-hours-left").addClass("clicked-button-left");
        $("#next-2-hours-left").removeClass("button-left");
        $("#next-2-hours").addClass("clicked-button-mid");
        $("#next-2-hours").removeClass("button-mid");
        $("#next-4-hours").removeClass("clicked-button-mid");
        $("#next-4-hours").addClass("button-mid");
        $("#next-12-hours").removeClass("clicked-button-mid");
        $("#next-12-hours").addClass("button-mid");
        $("#next-12-hours-right").removeClass("clicked-button-right");
        $("#next-12-hours-right").addClass("button-right");
        ActivityListTab.displayHours = 2;
        ActivityListTab.refreshTasks();
    },

    /**
     * Filters the scheduled tasks section to display only 4 timebuckets.
     *
     * @param none
     */
    displayNext4Hours : function() {
        if (ActivityList.taskCountError === true) {
            return;
        }
        if (ActivityListTab.displayHours === 4) {
            return;
        }
        $("#next-2-hours-left").removeClass("clicked-button-left");
        $("#next-2-hours-left").addClass("button-left");
        $("#next-2-hours").removeClass("clicked-button-mid");
        $("#next-2-hours").addClass("button-mid");
        $("#next-4-hours").removeClass("button-mid");
        $("#next-4-hours").addClass("clicked-button-mid");
        $("#next-12-hours").removeClass("clicked-button-mid");
        $("#next-12-hours").addClass("button-mid");
        $("#next-12-hours-right").removeClass("clicked-button-right");
        $("#next-12-hours-right").addClass("button-right");
        ActivityListTab.displayHours = 4;
        ActivityListTab.refreshTasks();
    },

    /**
     * Filters the scheduled tasks section to display all timebuckets.
     *
     * @param none
     */
    displayEntireShift : function() {
        if (ActivityList.taskCountError === true) {
            return;
        }
        if (ActivityListTab.displayHours === 12) {
            return;
        }
        $("#next-2-hours-left").removeClass("clicked-button-left");
        $("#next-2-hours-left").addClass("button-left");
        $("#next-2-hours").removeClass("clicked-button-mid");
        $("#next-2-hours").addClass("button-mid");
        $("#next-4-hours").removeClass("clicked-button-mid");
        $("#next-4-hours").addClass("button-mid border-left");
        $("#next-12-hours").addClass("clicked-button-mid");
        $("#next-12-hours").removeClass("button-mid");
        $("#next-12-hours-right").addClass("clicked-button-right");
        $("#next-12-hours-right").removeClass("button-right");
        ActivityListTab.displayHours = 12;
        ActivityListTab.refreshTasks();
    },

    /**
     * Creates the task tables for all the task display.
     *
     * @param none
     * @return The HTML string representing the task tables.
     */
    createTasks : function ( ) {
        var tasks = Tasks.getTasksByEncounterId(PatientDrillDown.patient.encounterId);
        // The tasks are being cloned and then deleted through in called methods so that the create methods
        // don't have to go through all of the tasks every time. This change results in a list of tasks
        // that decreases in size and results in fewer unnecessary executions of checks and other code.
        var tasksClone = jQuery.extend ({}, tasks);
        var task = null;
        // Remove tasks that we won't be showing on this tab
        for (id in tasks) {
            task = tasks[id];
            if (this.filterTaskByActivityType(task) === true) {
                delete tasks[id];
                continue;
            }
            if (task.isUrgent() === true) {
                // no matter what, display urgent activities
                continue;
            }
            if (task.isOverdue() === true) {
                continue;
            }
            if (task.isPRN() === true
                    || task.isContinuous() === true) {
                delete tasks[id];
            }
        }
        this.highlightState = false;
        var html = this.createCurrentSection (tasksClone);
        this.highlightState = false;
        html += this.createUnscheduledSection (tasksClone);
        this.highlightState = false;
        html += this.createScheduledSection (tasksClone, 2, this.displayHours);
        this.highlightState = false;
        html += this.createInterdisciplinarySection (tasksClone);
        return html;
    },

    /**
     * Creates the current task table section. Urgent tasks will be displayed at the top.
     *
     * @param tasks - The list of all detailed tasks for this patient.
     * @return The HTML string representing the overdue task table section.
     */
    createCurrentSection : function (tasks) {
        var scrollbarWidth = 16;
        var width = this.width - scrollbarWidth;
        var html = '<table id="activityList-current" class="activityList-section borderless" style="width:' + width + 'px;">';
        var htmlRows = "";
        var rowCount = 0;
        var id;
        var task;
        var cssColor;
        var index = 1;
        var lastState = null;
        var curState = null;
        var showIcon = false;
        var time;
        var valueType = "";
        var type = "current";
        var start = 1;
        var stop = 1;
        var firstHourEmpty = null;  // Starting hour with no tasks
        var lastHourEmpty = null;   // Ending hour with no tasks
        for (id in tasks) {
            task = tasks[id];
            if (task.isUrgent() === true && task.isPRN() === false) {
                curState = new ActivityState(task);
                if (this.filterTaskByActivityType(task) === false) {
                    showIcon = curState.isShowIcon(lastState);
                    if (curState.isChangeHighlight(lastState)) {
                        this.toggleHighlightState();
                    }
                    lastState = curState;
                }
                htmlRows += ActivityList.createTaskRow (task, type, index ++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                delete tasks[id];
                rowCount ++ ;
            }
        }
        for (id in tasks) {
            task = tasks[id];
            if (task.isOverdue ( ) === true) {
                curState = new ActivityState(task);
                if (this.filterTaskByActivityType(task) === false) {
                    showIcon = curState.isShowIcon(lastState);
                    if (curState.isChangeHighlight(lastState)) {
                        this.toggleHighlightState();
                    }
                    lastState = curState;
                }
                htmlRows += ActivityList.createTaskRow (task, type, index ++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                delete tasks[id];
                rowCount ++ ;
            }
        }

        // Handle first scheduled hour here
        curState = null;
        var i = start;
        if (Tasks.scheduled != null) {
            time = new Date (Tasks.scheduled[i].startTime);
        } else {
            time = new Date ( );
            time.setHours (time.getHours ( ) + (i - 1));
            time.setMinutes (0);
        }
        if(Tasks.scheduled != null){
            for(var id in tasks){
                var task = tasks[id];
                if ((task.isScheduled() === false
                        || task.isPRN() === true
                        || task.isUnscheduled() === true
                        || task.isContinuous() === true
                        || task.isInterdisciplinary() === true) && task.isAdhocTask() === false ) {
                    continue;
                }
                if(i === 1 && task.data.scheduledDateTime < Tasks.scheduled[i].startTime) {
                    curState = new ActivityState(task);
                    if (this.filterTaskByActivityType(task) === false) {
                        showIcon = curState.isShowIcon(lastState);
                        if (curState.isChangeHighlight(lastState)) {
                            this.toggleHighlightState();
                        }
                        lastState = curState;
                    }
                    htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                    rowCount++;
                    delete tasks[id];
                    continue;
                }
                if (task.data.scheduledDateTime < Tasks.scheduled[i].startTime || (task.data.scheduledDateTime > Tasks.scheduled[i].endTime - 1)) {
                    continue;
                }
                curState = new ActivityState(task);
                if (this.filterTaskByActivityType(task) === false) {
                    showIcon = curState.isShowIcon(lastState);
                    if (curState.isChangeHighlight(lastState)) {
                        this.toggleHighlightState();
                    }
                    lastState = curState;
                }
                htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                rowCount++;
                delete tasks[id];
            }
        }
        for(var id in tasks){
            var task = tasks[id];

            if ((task.isScheduled() === false
                    || task.isPRN() === true
                    || task.isUnscheduled() === true
                    || task.isContinuous() === true
                    || task.isInterdisciplinary() === true) &&  task.isAdhocTask() === false) {
                continue;
            }

            if(task.data.display != null ){
                if(i == 1 && task.data.scheduledDateTime < Tasks.scheduled[i].startTime) {
                    curState = new ActivityState(task);
                    if (this.filterTaskByActivityType(task) === false) {
                        showIcon = curState.isShowIcon(lastState);
                        if (curState.isChangeHighlight(lastState)) {
                            this.toggleHighlightState();
                        }
                        lastState = curState;
                    }
                    htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                    rowCount++;
                    delete tasks[id];
                    continue;
                }
                if (task.data.scheduledDateTime < Tasks.scheduled[i].startTime || (task.data.scheduledDateTime > Tasks.scheduled[i].endTime - 1)) {
                    continue;
                }
            }
            var scheduledStartTimeInDate = new Date(Tasks.scheduled[i].startTime);
            var taskStartTimeInDate = new Date(task.data.scheduledDateTime );

            if(taskStartTimeInDate.getHours() == scheduledStartTimeInDate.getHours() && taskStartTimeInDate.getTime() < Tasks.scheduled[i].endTime) {
                curState = new ActivityState(task);
                if (this.filterTaskByActivityType(task) === false) {
                    showIcon = curState.isShowIcon(lastState);
                    if (curState.isChangeHighlight(lastState)) {
                        this.toggleHighlightState();
                    }
                    lastState = curState;
                }
                htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                rowCount++;
                delete tasks[id];
            }
        }
        // End of code for first scheduled hour

        if (rowCount > 0) {
            cssColor = 'section';
        } else {
            cssColor = 'novalues';
        }
        html += '<tr>';
        html += '<td style="border:none">';
        html += '<div class="activityList-' + cssColor+ '-header">';
        html += '<div class="activityList-' + cssColor+ '-header-label">' + i18n.CURRENT;
        if (rowCount == 0) {
            html += ' <span class="activityList-empty-message"> (' + i18n.NO_ACTIVITIES + ')</span>'
        }
        html += '</div>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        if (rowCount > 0) {
            html += htmlRows;
        }
        html += '</table>';
        return html;
    },

    /**
     * Creates the unscheduled task table section. Urgent tasks will be displayed at the top.
     *
     * @param tasks - The list of all detailed tasks for this patient.
     * @return The HTML string representing the unscheduled task table section.
     */
    createUnscheduledSection : function (tasks) {
        var scrollbarWidth = 16;
        var width = this.width - scrollbarWidth;
        var html = '<table id="activityList-unscheduled" class="activityList-section borderless" style="width:' + width + 'px; ">';
        var htmlRows = "";
        var index = 1;
        var task;
        var id;
        var valueType = "";
        var rowCount = 0;
        var type = "unscheduled";
        var lastState = null;
        var showIcon = false;
        for (id in tasks) {
            task = tasks[id];
            if (task.isPRN ( ) === true || task.isContinuous ( ) === true || task.isScheduled ( ) === true) {
                continue;
            }
            if (task.isUrgent ( ) === true || task.isOverdue ( ) === true) {
                continue;
            }

            if (task.isUnscheduled ( ) === false) {
                continue;
            }
            var curState = new ActivityState(task);
            curState = new ActivityState(task);
            if (this.filterTaskByActivityType(task) === false) {
                showIcon = curState.isShowIcon(lastState);
                if (curState.isChangeHighlight(lastState)) {
                    this.toggleHighlightState();
                }
                lastState = curState;
            }
            htmlRows += ActivityList.createTaskRow (task, type, index ++, this.highlightState, showIcon, this.filterTaskByActivityType(task) );
            delete tasks[id];
            rowCount++;
        }
        if (rowCount > 0) {
            valueType = "section";
        } else {
            valueType = "novalues";
        }

        html += '<tr>';
        html += '<td style="border:none">';
        html += '<div class="activityList-' + valueType + '-header">';
        html += '<div class="activityList-' + valueType + '-header-label">' + i18n.UNSCHEDULED;
        if (rowCount == 0) {
            html += ' <span class="activityList-empty-message"> (' + i18n.NO_ACTIVITIES + ')</span>'
        }
        html += '</div>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        if (rowCount > 0) {
            html += htmlRows;
        }
        html += '</table>';
        return html;
    },

   /**
     * Creates the scheduled task table section.
     *
     * @param tasks - The list of all detailed tasks for this patient.
     * @param iStart - The hour to start displaying.
     * @param iStop - The hour to stop displaying.
     * @return The HTML string representing the scheduled task table section.
     */
    createScheduledSection : function (tasks, iStart, iStop) {
        var scrollbarWidth = 16;
        var width = this.width - scrollbarWidth;
        var sectionIdValue = "activityList-scheduled-1";
        var html = '<table id="' + sectionIdValue + '" class="activityList-section borderless" style="width:' + width + 'px;">';
        var time;
        var id;
        var task;
        var valueType = "";
        var htmlRows;
        var rowCount;
        var index;
        var type;
        var start = iStart;
        var stop = iStop;
        var showIcon = false;
        var lastState = null;
        var curState = null;
        var firstHourEmpty = null;  // Starting hour with no tasks
        var lastHourEmpty = null;   // Ending hour with no tasks
        for ( var i = start; i <= stop; i ++ ) {
            if (Tasks.scheduled != null) {
                time = new Date (Tasks.scheduled[i].startTime);
            } else {
                time = new Date ( );
                time.setHours (time.getHours ( ) + (i - 1));
                time.setMinutes (0);
            }

            htmlRows = "";
            rowCount = 0;
            type = "hour" + i + "scheduled";
            // For scheduled items in the current section
            index = 1;
            if(Tasks.scheduled != null){
                for(var id in tasks){
                    var task = tasks[id];
                    if (task.isScheduled() === false
                            || task.isPRN() === true
                            || task.isUnscheduled() === true
                            || task.isContinuous() === true
                            || task.isInterdisciplinary() === true) {
                        continue;
                    }
                    if(i === 1 && task.data.scheduledDateTime < Tasks.scheduled[i].startTime) {
                        curState = new ActivityState(task);
                        if (this.filterTaskByActivityType(task) === false) {
                            showIcon = curState.isShowIcon(lastState);
                            if (curState.isChangeHighlight(lastState)) {
                                this.toggleHighlightState();
                            }
                            lastState = curState;
                        }
                        htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                        rowCount++;
                        delete tasks[id];
                        continue;
                    }
                    if (task.data.scheduledDateTime < Tasks.scheduled[i].startTime || (task.data.scheduledDateTime > Tasks.scheduled[i].endTime - 1)) {
                        continue;
                    }
                    curState = new ActivityState(task);
                    if (this.filterTaskByActivityType(task) === false) {
                        showIcon = curState.isShowIcon(lastState);
                        if (curState.isChangeHighlight(lastState)) {
                            this.toggleHighlightState();
                        }
                        lastState = curState;
                    }
                    htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                    rowCount++;
                    delete tasks[id];
                }
            }

            for(var id in tasks){
                var task = tasks[id];

                if (task.isScheduled() === false
                        || task.isPRN() === true
                        || task.isUnscheduled() === true
                        || task.isContinuous() === true
                        || task.isInterdisciplinary() === true) {
                    continue;
                }

                if(task.data.display != null ){
                    if(i == 1 && task.data.scheduledDateTime < Tasks.scheduled[i].startTime) {
                        curState = new ActivityState(task);
                        if (this.filterTaskByActivityType(task) === false) {
                            showIcon = curState.isShowIcon(lastState);
                            if (curState.isChangeHighlight(lastState)) {
                                this.toggleHighlightState();
                            }
                            lastState = curState;
                        }
                        htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                        rowCount++;
                        delete tasks[id];
                        continue;
                    }
                    if (task.data.scheduledDateTime < Tasks.scheduled[i].startTime || (task.data.scheduledDateTime > Tasks.scheduled[i].endTime - 1)) {
                        continue;
                    }
                }
                var scheduledStartTimeInDate = new Date(Tasks.scheduled[i].startTime);
                var taskStartTimeInDate = new Date(task.data.scheduledDateTime );

                if(taskStartTimeInDate.getHours() == scheduledStartTimeInDate.getHours() && taskStartTimeInDate.getTime() < Tasks.scheduled[i].endTime) {
                    curState = new ActivityState(task);
                    if (this.filterTaskByActivityType(task) === false) {
                        showIcon = curState.isShowIcon(lastState);
                        if (curState.isChangeHighlight(lastState)) {
                            this.toggleHighlightState();
                        }
                        lastState = curState;
                    }
                    htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                    rowCount++;
                    delete tasks[id];
                }
            }

            if (rowCount > 0) {
                valueType = "section";
            } else {
                lastHourEmpty = i;
                valueType = "novalues";
            }

            var currentDate = new Date();
            var currentHours = currentDate.getHours();
            var displayEmptyRange = false;
            var displayCurrentHour = false;
            if (firstHourEmpty == null && rowCount > 0) {
                // Hour has activities, and has no preceeding empty hours
                displayEmptyRange = false;  // do NOT display a range header
                displayCurrentHour = true;  // do display the current hour header
            }
            if (firstHourEmpty != null && rowCount > 0) {
                // transition from empty to non-empty
                displayEmptyRange = true;  // display a range header
                displayCurrentHour = true;  // do display the current hour header
            }
            // Handle this being the last hour displayed special cases
            if (firstHourEmpty == null && rowCount == 0 && i == stop) {
                // Empty hour, and there is no other coming.
                displayEmptyRange = false;  // do NOT display a range header
                displayCurrentHour = true;  // do display the current hour header
            }
            if (firstHourEmpty != null && rowCount == 0 && i == stop) {
                // Last chance to output a heading for a block of empty times.
                displayEmptyRange = true;  // display a range header
                displayCurrentHour = false;  // do NOT display the current hour header
            }
            if (displayEmptyRange) {
                html += '<tr>';
                html += '<td class="borderless">';
                html += '<div class="activityList-' + valueType + '-header">';
                html += '<div class="activityList-' + valueType + '-header-label">';
                var eTime = new Date ( );
                eTime.setHours (eTime.getHours ( ) + (firstHourEmpty-1));
                eTime.setMinutes (0);

                html += eTime.format ("HH:MM");
                if (firstHourEmpty != lastHourEmpty) {
                    // Add range when displaying more than an hour with no activity
                    html += '-';

                    eTime = new Date ( );
                    eTime.setHours (eTime.getHours ( ) + (lastHourEmpty-1));
                    eTime.setMinutes (0);

                    html += eTime.format ("HH:MM");
                    html += ' <span class="activityList-empty-message">(' + i18n.NO_ACTIVITIES + ')</span>';
                }
                html += '</div>';
                html += '</div>';
                html += '</td>';
                html += '</tr>';
            }
            if (displayCurrentHour) {
                html += '<tr>';
                html += '<td class="borderless">';
                html += '<div class="activityList-' + valueType + '-header">';
                html += '<div class="activityList-' + valueType + '-header-label">';
                html += time.format ("HH:MM");
                if (rowCount === 0) {
                    html += ' <span class="activityList-empty-message"> (' + i18n.NO_ACTIVITIES + ')</span>';
                }
                html += '</div>';
                html += '</div>';
                html += '</td>';
                html += '</tr>';
            }
            this.highlightState = false;
            lastState = null;
            if (rowCount === 0) {
                if (firstHourEmpty == null) {
                    firstHourEmpty = i;
                    lastHourEmpty = i;
                }
            }
            else {
                firstHourEmpty = null;
                lastHourEmpty = null;
            }
            if (rowCount > 0) {
                html += htmlRows;
            }
        }
        html += '</table>';
        return html;
    },

    /**
     * Creates the interdisciplinary task table section. Urgent tasks will be displayed at the top.
     *
     * @param tasks - The list of all detailed tasks for this patient.
     * @return The HTML string representing the interdisciplinary task table section.
     */
    createInterdisciplinarySection : function (tasks) {
        if (Configuration.interdisciplinary === false) {
            return "";
        }
        var scrollbarWidth = 16;
        var width = this.width - scrollbarWidth;
        var html = '<table id="activityList-interdisciplinary" class="activityList-section borderless" style="width:' + width + 'px;">';
        var htmlRows = "";
        var index = 1;
        var id;
        var task;
        var rowCount = 0;
        var valueType = "";
        var type = "interdisciplinary";
        this.highlightState = false;
        var showIcon = false;
        var lastState = null;
        var curState = null;
        for (id in tasks) {
            task = tasks[id];
            if (task.isInterdisciplinary ( ) === false) {
                continue;
            }
            curState = new ActivityState(task);
            if (this.filterTaskByActivityType(task) === false) {
                showIcon = curState.isShowIcon(lastState);
                if (curState.isChangeHighlight(lastState)) {
                    this.toggleHighlightState();
                }
                lastState = curState;
            }
            htmlRows += ActivityList.createTaskRow (task, type, index ++, this.highlightState, showIcon, this.filterTaskByActivityType(task) );
            delete tasks[id];
            rowCount++;
        }
        for (id in tasks) {
            task = tasks[id];
            if (task.isInterdisciplinary ( ) === false) {
                continue;
            }
            curState = new ActivityState(task);
            if (this.filterTaskByActivityType(task) === false) {
                showIcon = curState.isShowIcon(lastState);
                if (curState.isChangeHighlight(lastState)) {
                    this.toggleHighlightState();
                }
                lastState = curState;
            }
            htmlRows += ActivityList.createTaskRow (task, type, index ++, this.highlightState, showIcon, this.filterTaskByActivityType(task) );
            delete tasks[id];
            rowCount++;
        }
        if (rowCount > 0) {
            valueType = "section";
        } else {
            valueType = "novalues";
        }

        html += '<tr>';
        html += '<td style="border:none">';
        html += '<div class="activityList-' + valueType + '-header">';
        html += '<div class="activityList-' + valueType + '-header-label">' + i18n.INTERDISCIPLANARY;
        if (rowCount == 0) {
            html += ' <span class="activityList-empty-message"> (' + i18n.NO_ACTIVITIES + ')</span>';
        }
        html += '</div>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        if (rowCount > 0) {
            html += htmlRows;
        }
        html += '</table>';
        return html;
    },

    /**
     * Maps and initializes the task row document objects after they have been appended to the document.
     *
     * @param table - The table to map the rows for.
     */
    mapRows : function (table) {
        if (table != null) {
            var index = this.rows.length;
            for ( var i = 0; i < table.rows.length; i ++ ) {
                if (table.rows[i].taskId === undefined) {
                    continue;
                }
                var row = $ (table.rows[i]);
                this.rows[index ++ ] = row;
                this.mapRow (row);
            }
        }
    },

    /**
     * Maps and initializes the task row after it has been appended to the document.
     *
     * @param row - The row document object to map and initialize.
     */
    mapRow: function(row) {
        var task = Tasks.getById(row[0].taskId);
        var urgent = null;
        var priority = null;
        var display = null;
        var detail = null;
        var comment = null;
        var instructions = null;
        var type = null;
        var aChild = null;
        var comments = task.getOrderComments();
        var cellChildren = $($(row[0].cells[0]).children()[0]).children();
        for (var childIndex = 0; childIndex < cellChildren.length; ++childIndex) {
            aChild = $(cellChildren[childIndex]);
            if (aChild.hasClass("activity-type") === true) {
                type = aChild;
            }
            if (aChild.hasClass("time-study-indicator") === true) {
            	priority = aChild;
            }
            if (aChild.hasClass("stat-image") === true) {
                urgent = aChild;
            }
            if (aChild.hasClass("task-display") === true) {
                display = aChild;
            }
            if (aChild.hasClass("task-detail") === true) {
                detail = aChild;
            }
            if (aChild.hasClass("task-instructions") === true) {
                instructions = aChild;
            }
            if (aChild.hasClass("task-comment") === true) {
            	for (var i = 0; i < comments.length; i++) {
            		if(aChild.attr("Id") == "taskComment" + i) {
            			comment = aChild;
            			this.initializeCommentHover(comment, comments, i);
            		}
            	}
            }
        }
        if(task.isInterdisciplinary() === false) {
            this.initializeClickActions(row, display, detail, task);
        }

        this.sizeRow(task, urgent, priority, display, detail);

        this.initializeHovers(task, type, priority, urgent, detail, display, instructions);
    },

    /**
     * Sets the width of the display and detail elements in the row.
     * @param task - The Task object for the row.
     * @param urgent - The urgent icon, can be null if it doesn't exist.
     * @param priority - The Timed Study icon, can be null if it doesn't exist.
     * @param display - The task display, can be null if it doesn't exist.
     * @param detail - The task detail, can be null if it doesn't exist.
     */
     sizeRow: function(task, urgent, priority, display, detail) {
         // unusable = outside of table =  cell left margin + icon + name left margin + detail left margin + cell right margin + scroll bar + right margin of table
         var computedUnusableSpace = 7 + 10 + 16 + 10 + 13 + 10 + 17 + 25;
         if(task.isTimeStudy() == true) {
             computedUnusableSpace += 23;
         }
         if (task.isUrgent ( ) == true) {
             computedUnusableSpace += 23;
         }

         // How much space we really have to put content in.
         var availableWidth = PatientDrillDown.width - computedUnusableSpace;
         if(display !== null && display !== undefined) {
             var displayWidth = display.width();

             if(displayWidth > availableWidth) {
                 display.width(availableWidth);
                 availableWidth = 0;
             }
             else {
                 availableWidth -= displayWidth;
             }
         }

         if(detail !== null && detail !== undefined) {
             var detailWidth = detail.width();

             if(availableWidth <= 0) {
                 availableWidth = 0;
             }
             detail.width(availableWidth);
         }
     },

    /**
     * Initializes the hovers for the truncated comment.
     *
     * @param comment - The comment icon
     * @param comments - List of comments for the Task
     * @param number - number of comment which is truncarted
     */
    initializeCommentHover : function (comment, comments, number) {
    	 if(comment != null && isTruncated(comment)) {
    		 var commentHoverDisplay = '<table class="hover-table">';
    		 for (var i = 0; i < comments.length; i++) {
    			if(i == number) {
	    			commentHoverDisplay += '<tr><td class="hover-table-order-display-label">' + this.createHTMLSafe(comments[i].display) + '</td></tr>';
	    			commentHoverDisplay += '<tr><td class="hover-table">' + this.createHTMLSafe(comments[i].comment) + '</td></tr>';
	    			commentHoverDisplay += '</table>';
    			}
             }
         	var commentConfig = {
                  over: function(e) {Hover.display(e, i18n.COMMENT, commentHoverDisplay);},
                  timeout: 200,
                  out: function(e) {Hover.hide();},
                  interval: 200
             };
             comment.hoverIntent(commentConfig);
         }
    },

    /**
     * Initializes the hovers for the various icons that can display in the row.
     *
     * @param task - The Task object for these hovers.
     * @param type - The type icon, is never null.
     * @param urgent - The urgent icon, can be null if it doesn't exist.
     * @param comment - The comment icon, can be null if it doesn't exist.
     */
    initializeHovers : function (task, type, priority, urgent, detail, display, instructions) {
    	var taskDisplay = task.getDisplay();
    	var taskStatusDisplay = task.getStatusDisplay();
        if(task.isInValidation()) {
        	taskDisplay = '<span class="task-display" style="padding-left:0px; display:inline;">'+ taskDisplay +'</span>';
        	taskStatusDisplay = '<span style="color:#000000; padding-left:4px; font-size:12px;">(' + taskStatusDisplay + ')</span>';
        }
    	else {
    		taskStatusDisplay = "";
    	}
        var taskDisplayStatusName = taskDisplay + taskStatusDisplay;

        if(task != null && task.data.containers != null && task.data.containers.length > 0) {
            var taskConfig = {
                 over: function(e) {Hover.display(e, i18n.CONTAINER_DETAILS, task.getHoverDisplay());},
                 timeout: 200,
                 out: function(e) {Hover.hide();},
                 interval: 200
            };
            display.hoverIntent(taskConfig);
        }
        if(type != null) {
            var typeConfig = {
                 over: function(e) {Hover.display(e, i18n.ACTIVITY_TYPE, task.getTypeDisplay());},
                 timeout: 200,
                 out: function(e) {Hover.hide();},
                 interval: 200
            };
            type.hoverIntent(typeConfig);
        }
        if(priority != null) {
            var priorityConfig = {
                 over: function(e) {Hover.display(e, i18n.TIMED_STUDY_HEADER, task.getTimedStudyOrders());},
                 timeout: 200,
                 out: function(e) {Hover.hide();},
                 interval: 200
            };
            priority.hoverIntent(priorityConfig);
        }
        if(instructions != null && isTruncated(instructions)) {
            var instructionsConfig = {
                 over: function(e) {Hover.display(e, i18n.INSTRUCTION, task.getInstructions());},
                 timeout: 200,
                 out: function(e) {Hover.hide();},
                 interval: 200
            };
            instructions.hoverIntent(instructionsConfig);
        }
        if(urgent != null) {
            var urgentConfig = {
                 over: function(e) {Hover.display(e, i18n.URGENT_ACTIVITY_HEADER, task.getUrgentOrders());},
                 timeout: 200,
                 out: function(e) {Hover.hide();},
                 interval: 200
            };
            urgent.hoverIntent(urgentConfig);
        }
        if(isTruncated(detail)) {
            var detailConfig = {
                 over: function(e) {Hover.display(e, taskDisplayStatusName, task.getDetailDisplay());},
                 timeout: 200,
                 out: function(e) {Hover.hide();},
                 interval: 200
            };
            detail.hoverIntent(detailConfig);
        }
        if(isTruncated(display)) {
            var detailConfig = {
                 over: function(e) {Hover.display(e, taskDisplayStatusName, task.getDetailDisplay());},
                 timeout: 200,
                 out: function(e) {Hover.hide();},
                 interval: 200
            };
            detail.hoverIntent(detailConfig);
        }
    },

    /**
     * Initializes the actions and highlight state for the row.
     *
     * @param row - The row to initialize the action son.
     * @param display - The display of the task row.
     * @param detail - The detail display of the task row.
     * @param task - The associated to the input row.
     */
    initializeClickActions : function (row, display, detail, task) {
        row.mousedown (function (event) {
            if (task.canDocument ( ) === false && task.canChartDone ( ) === false && task.canChartNotDone ( ) === false) {
                // Do nothing in this case to prevent highlighting
            } else if (row.hasClass ("selected") === false) {
                row.addClass ("selected");
                row.removeClass("deselected");
                ActivityListTab.selectedTasks[ActivityListTab.selectedTasks.length] = task;
                ActivityListTab.updateButtons();
            } else {
                if (event.button !== 2) {
                    row.removeClass ("selected");
                    row.addClass ("deselected");
                    var index = - 1;
                    for ( var ti = 0; ti < ActivityListTab.selectedTasks.length; ti ++ ) {
                        if (ActivityListTab.selectedTasks[ti] == task) {
                            index = ti;
                            break;
                        }
                    }
                    if (index > - 1) {
                        ActivityListTab.selectedTasks.splice (index, 1);
                    }
                    ActivityListTab.updateButtons();
                }
            }
            switch (event.button) {
            case 2 :
                if (task.data.chartingActions.length === 0) {
                    if (task.data.containers.length > 0) {
		    	 ActivityListTab.taskswithNoAccess[ActivityListTab.taskswithNoAccess.length] = task;
                         ActivityListTab.printLabelEnabled = true;
                    } else {
                         ActivityListTab.printLabelEnabled = false; 
                    }
                }
                ActivityListRightClickMenu.display (event, task);
                break;
            }
        });
    },

    /**
     * Updates the sate of the buttons based on the selected task rows and their charting actions.
     * @param none
     */
     updateButtons : function() {
         var documentButton = $('#activityList-document');
         var doneButton = $('#activityList-done');
         var notDoneButton = $('#activityList-not-done');

         if(this.selectedTasks.length == 0) {
             documentButton.attr("disabled", "disabled");
             doneButton.attr("disabled", "disabled");
             notDoneButton.attr("disabled", "disabled");
             this.printLabelEnabled=false;
             return;
         }
		 
         var taskIdList = window.external.DiscernObjectFactory("DOUBLEMAP");
         var enableDocument = true;
         var enableDone = true;
         var enableNotDone = true;
         var enablePrintLabel = true;
         for(var i = 0; i < this.selectedTasks.length; i++) {
             var task = this.selectedTasks[i];
             taskIdList.Add(i, task.id);  
             if(this.selectedTasks[i].canDocument() == false) {
                 enableDocument = false;
             }
             if(this.selectedTasks[i].canChartDone() == false) {
                 enableDone = false;
             }
             if(this.selectedTasks[i].canChartNotDone() == false) {
                 enableNotDone = false;
             }
             if(this.selectedTasks[i].canPrintLabel() == false) {
                 enablePrintLabel = false;
             }
         }
         //To get the latest status of the selected tasks
         this.requestCount = taskIdList.GetCount();
         if(taskIdList.GetCount() > 0) {
             ActivityListTab.loadSelectedTasksFlag = true;
             Service.loadTasks(taskIdList, 0);
         }
         if(enableDocument) {
             documentButton.removeAttr("disabled");
         }
         else {
             documentButton.attr("disabled", "disabled");
         }
         if(enableDone) {
             doneButton.removeAttr("disabled");
         }
         else {
             doneButton.attr("disabled", "disabled");
         }
         if(enableNotDone) {
             notDoneButton.removeAttr("disabled");
         }
         else {
             notDoneButton.attr("disabled", "disabled");
         }
         if(enablePrintLabel) {
             this.printLabelEnabled = true;
         }
         else {
             this.printLabelEnabled = false;
         }
     },

    /**
     * Initiates the chart documentation action.
     * @param none
     */
     chart : function() {
         ActivityListRightClickMenu.remove();
         this.launchTaskDocumentation("CHART");
     },

     /**
     * Initiates the chart done action.
     * @param none
     */
     chartDone : function() {
         ActivityListRightClickMenu.remove();
         ActivityListTab.launchTaskDocumentation("CHART_DONE");
     },

     /**
     * Initiates the chart not done action.
     * @param none
     */
     chartNotDone : function() {
         ActivityListRightClickMenu.remove();
         ActivityListTab.launchTaskDocumentation("CHART_NOT_DONE");
     },

    /**
     * Retrieves the collection task Ids
     * @param taskIds - the task IDs collection
     * @param task - the collection task to get the IDs from
     * @return taskIds - the task IDs collection
     */
    getSpecimenCollectTaskIds: function (taskIds, task) {
        if (taskIds !== null && task !== null) {
            var taskContainers = task.getSpecimenContainers();
            if (taskContainers) {
                for (var i = 0; i < taskContainers.length; i++) {
                   if (taskIds.LookUp(taskContainers[i].taskId) === false) {
                    taskIds.Add(taskContainers[i].taskId);
                    }
                }
            }
            return taskIds;
        }
    },

    /**
     * Initiates the print labels action.
     *
     * @param none
     */
    printLabels : function () {
        Overlay.display(PatientDrillDown.container);
        ActivityListRightClickMenu.remove();
        var taskIds = window.external.DiscernObjectFactory ("INDEXEDDOUBLECOLLECTION");
	var taskList = ActivityListTab.taskswithNoAccess.concat(ActivityListTab.selectedTasks);
        for ( var i = 0; i < taskList.length; i ++ ) {
            var task = taskList[i];
            if (task.id === 0) {
                continue;
            }
            if (task.isSpecimenCollect() === true) {
               taskIds = this.getSpecimenCollectTaskIds(taskIds, task);
               continue;
            }
            taskIds.Add (task.id);
        }

        if (taskIds.GetCount() > 0) {
            Notifier.disable();
            var taskObject = window.external.DiscernObjectFactory ("TASKDOC");
            taskObject.PrintLabels(PatientDrillDown.patient.patientId, taskIds);
            Service.loadTaskCounts();
            Notifier.enable();
        }
    },

    /**
     * Initiates the task documentation workflow through PowerChart for the selected task rows.
     * @param none
     */
    launchTaskDocumentation: function (mode) {
        Overlay.display(PatientDrillDown.container);
        var taskIds = window.external.DiscernObjectFactory("INDEXEDDOUBLECOLLECTION");
        //If One of the selected task is specimen collect and is completed before Carecompass refresh.
        if(Tasks.selectedTasksCount < this.requestCount) {
            alert(i18n.TASKS_UPDATED_WARNING);
            PatientDrillDown.remove();
            refresh();
            return;
        }
        for(var i = 0; i < ActivityListTab.selectedTasks.length; i++) {
            var task = ActivityListTab.selectedTasks[i];
            if(task.id === 0) {
                continue;
            }
            if(Tasks.replyStatus === "Z") {
                alert(task.data.orderDisplay + ": " + i18n.COMPLETED_TASK_WARNING);
                PatientDrillDown.remove();
                refresh();
                return;
            }
            //Display warning if the selected task is completed already
            if(Tasks.completedTaskIds != null && Tasks.completedTaskIds.length > 0) {
                var isTaskCompleted = $.inArray(task.id, Tasks.completedTaskIds)
                if(~(isTaskCompleted)){
                    alert(task.data.orderDisplay + ": " + i18n.COMPLETED_TASK_WARNING);
                    PatientDrillDown.remove();
                    refresh();
                    return;
                }
            }

            if (task.isSpecimenCollect() === true) {
                taskIds = ActivityListTab.getSpecimenCollectTaskIds(taskIds, task);
                continue;
            }
            taskIds.Add(task.id);
        }

        if(taskIds.GetCount() > 0) {
            this.patientActivityTimer = true;
            Notifier.disable();
            var taskObject = window.external.DiscernObjectFactory("TASKDOC");
            taskObject.DocumentTasks(window, PatientDrillDown.patient.patientId, taskIds, mode);
            Service.loadTaskCounts();
            Notifier.enable();
        }
    },

      /**
       * Filters the task rows to display or not display medication, patient care, assessment, or other rows based on the state of the indicators.
       *
       * @param none
       */
      filter : function ( ) {
          if (this.displayMeds === true) {
              $ ("#ActivityListTab-med-filter").addClass ("clicked-filter-mid");
              $ ("#ActivityListTab-med-filter-left").addClass ("clicked-button-left");
              $ ("#ActivityListTab-med-filter-image").addClass ("med_white");
              $ ("#ActivityListTab-med-filter-image").removeClass ("medications-icon");
              $ ("#ActivityListTab-med-filter").removeClass ("filter-mid");
              $ ("#ActivityListTab-med-filter-left").removeClass ("button-left");
          } else {
              $ ("#ActivityListTab-med-filter").removeClass ("clicked-filter-mid");
              $ ("#ActivityListTab-med-filter-left").removeClass ("clicked-button-left");
              $ ("#ActivityListTab-med-filter-image").removeClass ("med_white");
              $ ("#ActivityListTab-med-filter-image").addClass ("medications-icon");
              $ ("#ActivityListTab-med-filter").addClass ("filter-mid");
              $ ("#ActivityListTab-med-filter-left").addClass ("button-left");
          }
          if (this.displayPatientCare === true) {
              $ ("#ActivityListTab-patient-care-filter").addClass ("clicked-filter-mid");
              $ ("#ActivityListTab-patient-care-filter").addClass ("clicked-border-left");
              $ ("#ActivityListTab-patient-care-filter-image").addClass ("patient_care_white");
              $ ("#ActivityListTab-patient-care-filter-image").removeClass ("patient-care-icon");
              $ ("#ActivityListTab-patient-care-filter").removeClass ("filter-mid");
          } else {
              $ ("#ActivityListTab-patient-care-filter").removeClass ("clicked-filter-mid");
              $ ("#ActivityListTab-patient-care-filter").removeClass ("clicked-border-left");
              $ ("#ActivityListTab-patient-care-filter-image").removeClass ("patient_care_white");
              $ ("#ActivityListTab-patient-care-filter-image").addClass ("patient-care-icon");
              $ ("#ActivityListTab-patient-care-filter").addClass ("filter-mid");
          }
          if (this.displayAssessment === true) {
              $ ("#ActivityListTab-assessment-filter").addClass ("clicked-filter-mid");
              $ ("#ActivityListTab-assessment-filter").addClass ("clicked-border-left");
              $ ("#ActivityListTab-assessment-filter-image").addClass ("assessment_white");
              $ ("#ActivityListTab-assessment-filter-image").removeClass ("assessment-icon");
              $ ("#ActivityListTab-assessment-filter").removeClass ("filter-mid");
          } else {
              $ ("#ActivityListTab-assessment-filter").removeClass ("clicked-filter-mid");
              $ ("#ActivityListTab-assessment-filter").removeClass ("clicked-border-left");
              $ ("#ActivityListTab-assessment-filter-image").removeClass ("assessment_white");
              $ ("#ActivityListTab-assessment-filter-image").addClass ("assessment-icon");
              $ ("#ActivityListTab-assessment-filter").addClass ("filter-mid");
          }
          if (this.displayOther === true) {
              $ ("#ActivityListTab-other-filter").addClass ("clicked-filter-mid");
              $ ("#ActivityListTab-other-filter").addClass ("clicked-border-left");
              $ ("#ActivityListTab-other-filter-right").addClass ("clicked-button-right");
              $ ("#ActivityListTab-other-filter-image").addClass ("other_white");
              $ ("#ActivityListTab-other-filter-image").removeClass ("other-icon");
              $ ("#ActivityListTab-other-filter").removeClass ("filter-mid");
              $ ("#ActivityListTab-other-filter-right").removeClass ("button-right");
          } else {
              $ ("#ActivityListTab-other-filter").removeClass ("clicked-filter-mid");
              $ ("#ActivityListTab-other-filter").removeClass ("clicked-border-left");
              $ ("#ActivityListTab-other-filter-right").removeClass ("clicked-button-right");
              $ ("#ActivityListTab-other-filter-image").removeClass ("other_white");
              $ ("#ActivityListTab-other-filter-image").addClass ("other-icon");
              $ ("#ActivityListTab-other-filter").addClass ("filter-mid");
              $ ("#ActivityListTab-other-filter-right").addClass ("button-right");
          }
      },

    /**
     * Refreshes the display of the task rows and their sections.
     *
     * @param none
     */
    refreshTasks : function ( ) {
        if (ActivityList.taskCountError === true) {
            return;
        }
        if(this.patientActivityTimer == true) {
            Timers.start("USR:CareCompass.PatientActivities");
        }

        this.tasksContainer.empty ( );
        this.tasksContainer.append (this.createTasks ( ));
        this.activityListDiv = $("#tasksDiv");
        this.currentSection = $ ("#activityList-current");
        this.unscheduledSection = $ ("#activityList-unscheduled");
        // scheduled-0 is part of current, scheduled-1 is the labeled scheduled section.
        this.scheduledSection0 = $("#activityList-scheduled-0");
        this.scheduledSection1 = $("#activityList-scheduled-1");
        if (Configuration.interdisciplinary) {
            this.interdisciplinarySection = $ ("#activityList-interdisciplinary");
        } else {
            this.interdisciplinarySection = null;
        }
        this.rows = [ ];
        this.selectedTasks = [ ];
	 this.taskswithNoAccess = [ ];
        this.mapRows (this.currentSection[0]);
        this.mapRows (this.unscheduledSection[0]);
        this.mapRows(this.scheduledSection0[0]);
        this.mapRows(this.scheduledSection1[0]);
        if (this.interdisciplinarySection != null) {
            this.mapRows (this.interdisciplinarySection[0]);
        }
        // disable the buttons.
        var documentButton = $('#activityList-document');
        var doneButton = $('#activityList-done');
        var notDoneButton = $('#activityList-not-done');
        documentButton.attr("disabled", "disabled");
        doneButton.attr("disabled", "disabled");
        notDoneButton.attr("disabled", "disabled");
        this.printLabelEnabled = false;

        this.filter ( );
        if (PatientDrillDown.section !== "") {
            if (PatientDrillDown.section == "OVERDUE") {
                this.tasksContainer.scrollTop (this.currentSection.position ( ).top);
                PatientDrillDown.section = "";
            } else if (PatientDrillDown.section === "SCHEDULED") {
                this.tasksContainer.scrollTop (this.currentSection.position ( ).top);
                PatientDrillDown.section = "";
            }
        }

        if(this.patientActivityTimer == true) {
            Timers.stop("USR:CareCompass.PatientActivities");
            this.patientActivityTimer = false;
        }

        this.tasksLoaded = true;
        Overlay.remove();
    },

    /**
     * Update the highlight state.
     *
     * @param none
     *
     * @returns None.
     */
    toggleHighlightState : function() {
        this.highlightState = !this.highlightState;
    },

    /**
     * Creates an HTML Safe String.
     * @param unsafeString: The string that potentially has elements that aren't HTML safe
     * @return The HTML safe version of the string passed in
     */
    createHTMLSafe : function(unsafeString) {
        return String(unsafeString).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    },

    /**
     * Updated the time buttons to 12 hours when patient drill down is launched from popover
     * @param timeFilterButtons- hours to be updated to
     * @return none
     */
    updateTimeFilterButtons : function(timeFilterButtons) {
        if(timeFilterButtons === undefined || timeFilterButtons === null) {
            this.displayHours = 2;
            return;
        }
        if(timeFilterButtons === 12) {
            this.displayEntireShift();
        }
    }
}

/**
 * Create the HTML for the Patient PRN/Continuous summary tab DIV contents
 *
 * @param none
 * @return The HTML string that creates the PRN/Continuous summary DIV.
 */
var PrnListTab = {
    prnSection : null,
    continuousSection : null,
    width : 0,
    displayMeds : true,
    displayPatientCare : true,
    displayAssessment : true,
    displayOther : true,
    rows : [],
    selectedTasks : [],
    tasksContainer : null,
    prnListTabRef : null,
    printLabelEnabled : false,
    highlightState : false, // Used to toggle row highlight.
    loadSelectedTasksFlag: false,
    requestCount: 0,

    display : function(width, availableHeight, labelWidth, activityListWidth) {
        var paddingWidth = 17;
        this.width = width - paddingWidth;

        // The PRN/Continuous summary tab contents are defined here.
        var html = "";
        html += '<div id="prnListDiv" class=".activityList-div ui-tabs-below-tab-bar">';
        html += '<table class="patient-drill-down-demographics-section-table borderless" style="width: 100%;">';
        // This is the tool bar, with the filter buttons
        html += '<tr>';
        html += '<td colspan="2" style="border: none;">';
        html += '<table class="borderless" style="width: 100%;">';
        html += PrnListToolBar('PrnListTab');
        html += '</table>';
        html += '</td>';
        html += '</tr>';
        // This is the two panes for the activity summary
        html += '<tr>';
        html += '<td style = "width: 100%;border:none;">';
        html += '<div style = "padding-left:6px; background: #ffffff;">';
        html += '<table style="width: ' + this.width + '; border: 1px solid #bdbdbd; background: #ffffff;">';
        html += '<tr style="background: #ffffff;">';
        html += '<td style="width: ' + this.width + 'px; height:' + (availableHeight - 140) + 'px; vertical-align:top; border: none;">';
        html += '<table class="patient-drill-down-content-section-left" style="width:100%; vertical-align:top; height:' + (availableHeight - 140) + 'px; border: none; ">';
        html += '<tr>';
        html += '<td class="activityList-table-content">';
        // This is the left side pane, where the task list information is inserted after the service call, inside the DIV with
        // id="prnTasksContainer".
        html += '<div id="prnTasksContainer" class="activityList-content borderless" style="height:' + (availableHeight - 180) + 'px;">&nbsp;</div>';
        html += '<div class="activity-list-button-container">';
        html += '<table class="activityList-dialog-buttons-table">';
        html += '<tr>';
        html += '<td class="activityList-prn-buttons">';
        html += '<input id="activityList-prn-done" type="button" disabled class="activity-dialog-buttons" onmouseup="PrnListTab.chartDone();" value="' + i18n.DONE + '"/>';
        html += '<input id="activityList-prn-not-done" type="button" disabled class="activity-dialog-buttons" onmouseup="PrnListTab.chartNotDone();" value="' + i18n.NOT_DONE + '"/>';
        html += '<input id="activityList-prn-document" type="button" disabled class="activity-dialog-buttons" onmouseup="PrnListTab.chart();" value="' + i18n.DOCUMENT + '"/>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        html += '</div>';
        return html;
    },

    /**
     * Marks specific task types to display or not based on the input filters array
     *
     * @param filters - The array of task type filters to apply upon display of the drill down. Can be null or empty.
     */
    applyFilters : function (filters) {
        this.displayMeds = true;
        this.displayPatientCare = true;
        this.displayAssessment = true;
        this.displayOther = true;
        if (filters === undefined || filters == null) {
            return;
        }
        for ( var i = 0; i < filters.length; i ++ ) {
            if (filters[i] == "MEDICATIONS") {
                this.displayMeds = false;
            }
            if (filters[i] == "PATIENTCARE") {
                this.displayPatientCare = false;
            }
            if (filters[i] == "ASSESSMENT") {
                this.displayAssessment = false;
            }
            if (filters[i] == "OTHER") {
                this.displayOther = false;
            }
        }
    },

    /**
     * Filters the task rows to display or not display patient care rows based on the state of the indicator.
     *
     * @param none
     */
    filterPatientCare : function ( ) {
        if (ActivityList.taskCountError == true) {
            return;
        }
        if (this.displayPatientCare === false) {
            $ ("#PrnListTab-patient-care-filter").removeClass ("filter-mid").addClass ("clicked-filter-mid").addClass ("clicked-border-left");
            $ ("#PrnListTab-patient-care-filter-image").removeClass ("patient-care-icon").addClass ("patient_care_white");
            this.displayPatientCare = true;
            Hover.hide ( );
            PrnListTab.displayPatientCareHover ( );
            PrnListTab.refreshTasks();
        } else {
            this.displayPatientCare = false;
            $ ("#PrnListTab-patient-care-filter").removeClass ("clicked-filter-mid").removeClass ("clicked-border-left").addClass ("filter-mid");
            $ ("#PrnListTab-patient-care-filter-image").removeClass ("patient_care_white").addClass ("patient-care-icon");
            Hover.hide ( );
            PrnListTab.displayPatientCareHover ( );
            PrnListTab.refreshTasks();
        }
    },

    /**
     * Display the hover for the patient care filter button
     */
    displayPatientCareHover : function() {
        var patientCareIcon = $("#PrnListTab-patient-care-filter");
        var display = null;
        if (this.displayPatientCare === true) {
            display = i18n.PATIENTCARE_DISPLAYED;
        } else {
            display = i18n.PATIENTCARE_FILTERED;
        }
        var patientCareConfig = {
            over : function(e) {
                Hover.display(e, "", display);
            },
            timeout : 200,
            out : function(e) {
                Hover.hide();
            },
            interval : 200
        };
        patientCareIcon.hoverIntent(patientCareConfig);
    },

    /**
     * Filters the task rows to display or not display medication rows based on the state of the indicator.
     *
     * @param none
     */
    filterMeds : function ( ) {
        if (ActivityList.taskCountError == true) {
            return;
        }
        if (this.displayMeds === false) {
            $ ("#PrnListTab-med-filter-left").removeClass ("button-left").addClass ("clicked-button-left");
            $ ("#PrnListTab-med-filter").removeClass ("filter-mid").addClass ("clicked-filter-mid");
            $ ("#PrnListTab-med-filter-image").removeClass ("medications-icon").addClass ("med_white");
            this.displayMeds = true;
            Hover.hide ( );
            PrnListTab.displayMedicationHover ( );
            PrnListTab.refreshTasks();
        } else {
            this.displayMeds = false;
            $ ("#PrnListTab-med-filter-left").removeClass ("clicked-button-left").addClass ("button-left");
            $ ("#PrnListTab-med-filter").removeClass ("clicked-filter-mid").addClass ("filter-mid");
            $ ("#PrnListTab-med-filter-image").removeClass ("med_white").addClass ("medications-icon");
            Hover.hide ( );
            PrnListTab.displayMedicationHover ( );
            PrnListTab.refreshTasks();
        }
    },

    /**
     * Display the hover for the medication filter button
     */
    displayMedicationHover : function() {
        var medicationIcon = $("#PrnListTab-med-filter");
        var display = null;
        if (this.displayMeds === true) {
            display = i18n.MEDICATIONS_DISPLAYED;
        } else {
            display = i18n.MEDICATIONS_FILTERED;
        }
        var medicationConfig = {
            over : function(e) {
                Hover.display(e, " ", display);
            },
            timeout : 200,
            out : function(e) {
                Hover.hide();
            },
            interval : 200
        };
        medicationIcon.hoverIntent(medicationConfig);
    },

    /**
     * Filters the task rows to display or not display assessment rows based on the state of the indicator.
     *
     * @param none
     */
    filterAssessment : function ( ) {
        if (ActivityList.taskCountError == true) {
            return;
        }
        if (this.displayAssessment === false) {
            $ ("#PrnListTab-assessment-filter").removeClass ("filter-mid").addClass ("clicked-filter-mid").addClass ("clicked-border-left");
            $ ("#PrnListTab-assessment-filter-image").removeClass ("assessment-icon").addClass ("assessment_white");
            this.displayAssessment = true;
            Hover.hide ( );
            PrnListTab.displayAssesmentHover ( );
            PrnListTab.refreshTasks();
        } else {
            this.displayAssessment = false;
            $ ("#PrnListTab-assessment-filter").removeClass ("clicked-filter-mid").removeClass ("clicked-border-left").addClass ("filter-mid");
            $ ("#PrnListTab-assessment-filter-image").removeClass ("assessment_white").addClass ("assessment-icon");
            Hover.hide ( );
            PrnListTab.displayAssesmentHover ( );
            PrnListTab.refreshTasks();
        }
    },

    /**
     * Display the hover for the assessment filter button
     */
    displayAssesmentHover : function() {
        var assesmentIcon = $("#PrnListTab-assessment-filter");
        var display = null;
        if (this.displayAssessment === true) {
            display = i18n.ASSESSMENTS_DISPLAYED;
        } else {
            display = i18n.ASSESSMENTS_FILTERED;
        }
        var AssesmentConfig = {
            over : function(e) {
                Hover.display(e, " ", display);
            },
            timeout : 200,
            out : function(e) {
                Hover.hide();
            },
            interval : 200
        };
        assesmentIcon.hoverIntent(AssesmentConfig);
    },

    /**
     * Filters the task rows to display or not display other rows based on the state of the indicator.
     *
     * @param none
     */
    filterOther : function ( ) {
        if (ActivityList.taskCountError == true) {
            return;
        }
        if (this.displayOther === false) {
            $ ("#PrnListTab-other-filter").removeClass ("filter-mid").addClass ("clicked-filter-mid").addClass ("clicked-border-left");
            $ ("#PrnListTab-other-filter-image").removeClass ("other-icon").addClass ("other_white");
            $ ("#PrnListTab-other-filter-right").removeClass ("button-right").addClass ("clicked-button-right");
            this.displayOther = true;
            Hover.hide ( );
            PrnListTab.displayOtherHover ( );
            PrnListTab.refreshTasks();
        } else {
            this.displayOther = false;
            $ ("#PrnListTab-other-filter").removeClass ("clicked-filter-mid").removeClass ("clicked-border-left").addClass ("filter-mid");
            $ ("#PrnListTab-other-filter-image").removeClass ("other_white").addClass ("other-icon");
            $ ("#PrnListTab-other-filter-right").removeClass ("clicked-button-right").addClass ("button-right");
            Hover.hide ( );
            PrnListTab.displayOtherHover ( );
            PrnListTab.refreshTasks();
        }
    },

    /**
     * Display the hover for the other filter button
     */
    displayOtherHover : function() {
        var otherIcon = $("#PrnListTab-other-filter");
        var display = null;
        if (this.displayOther === true) {
            display = i18n.OTHER_DISPLAYED;
        } else {
            display = i18n.OTHER_FILTERED;
        }
        var otherConfig = {
            over : function(e) {
                Hover.display(e, " ", display);
            },
            timeout : 200,
            out : function(e) {
                Hover.hide();
            },
            interval : 200
        };
        otherIcon.hoverIntent(otherConfig);
    },

    /**
     * Determines if the task we are given should be displayed, based on the filter flags for activity type
     *
     * @param task - The task we are to evaluate.
     * @return true if the task should be filtered.
     */
    filterTaskByActivityType : function (task) {
        if (task.type == "MEDICATION") {
            return this.displayMeds === false;
        }
        if (task.type == "PATIENTCARE") {
            return this.displayPatientCare === false;
        }
        if (task.type == "ASSESSMENT") {
            return this.displayAssessment === false;
        }
        if (task.type == "OTHER") {
            return this.displayOther === false;
        }
        return false;
    },



    /**
     * Creates the task tables for all the task display.
     *
     * @param none
     * @return The HTML string representing the task tables.
     */
    createTasks : function ( ) {
        var tasks = Tasks.getTasksByEncounterId(PatientDrillDown.patient.encounterId);
        // The tasks are being cloned and then deleted through in called methods so that the create methods
        // don't have to go through all of the tasks every time. This change results in a list of tasks
        // that decreases in size and results in fewer unnecessary executions of checks and other code.
        var tasksClone = jQuery.extend ({}, tasks);
        // Remove tasks that we won't be showing on this tab
        for (id in tasks) {
            task = tasks[id];
            if (this.filterTaskByActivityType(task) === true) {
                delete tasks[id];
                continue;
            }
            if (task.isOverdue( ) === true
                    || task.isUrgent() === true
                    || task.isScheduled ( ) === true
                    || task.isUnscheduled ( ) === true
                    || task.isInterdisciplinary() === true) {
                delete tasks[id];
            }
        }
        var html = "";
        this.highlightState = false;
        html += this.createPRNSection(tasksClone);
        this.highlightState = false;
        html += this.createContinuousSection(tasksClone);
        return html;
    },

    /**
     * Creates the continuous task table section. Urgent tasks will be displayed at the top.
     *
     * @param tasks - The list of all detailed tasks for this patient.
     * @return The HTML string representing the unscheduled task table section.
     */
    createContinuousSection : function (tasks) {
        var scrollbarWidth = 16;
        var width = this.width - scrollbarWidth;
        var html = '<table id="activityList-continuous" class="activityList-section" style="width:' + width + 'px; ">';
        var htmlRows = "";
        var index = 1;
        var task;
        var id;
        var valueType = "";
        var rowCount = 0;
        var type = "continuous";
        var lastState = null;
        var curState = null;
        var showIcon = false;
        for (id in tasks) {
            task = tasks[id];
            if (task.isContinuous ( ) === false) {
                continue;
            }
            if (task.isUrgent() === true
                    || task.isOverdue() === true) {
                continue;
            }
            if (this.filterTaskByActivityType(task) === false) {
                curState = new ActivityState(task);
                if (this.filterTaskByActivityType(task) === false) {
                    showIcon = curState.isShowIcon(lastState);
                    if (curState.isChangeHighlight(lastState)) {
                        this.toggleHighlightState();
                    }
                    lastState = curState;
                }
            }
            htmlRows += ActivityList.createTaskRow (task, type, index ++, this.highlightState, showIcon, this.filterTaskByActivityType(task) );
            delete tasks[id];
            rowCount++;
        }
        if (rowCount > 0) {
            valueType = "section";
        } else {
            valueType = "novalues";
        }

        html += '<tr>';
        html += '<td style="border:none">';
        html += '<div class="activityList-' + valueType + '-header">';
        html += '<div class="activityList-' + valueType + '-header-label">' + i18n.CONTINUOUS;
        if (rowCount == 0) {
            html += ' <span class="activityList-empty-message"> (' + i18n.NO_ACTIVITIES + ')</span>';
        }
        html += '</div>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        if (rowCount > 0) {
            html += htmlRows;
        }
        html += '</table>';
        return html;
    },

    /**
     * Creates the PRN task table section. Urgent tasks will be displayed at the top.
     *
     * @param tasks - The list of all detailed tasks for this patient.
     * @return The HTML string representing the PRN task table section.
     */
    createPRNSection : function (tasks) {
        var scrollbarWidth = 16;
        var width = this.width - scrollbarWidth;
        var html = '<table id="activityList-prn" class="activityList-section borderless" style="width:' + width + 'px; ">';
        var htmlRows = "";
        var index = 1;
        var task;
        var id;
        var valueType = "";
        var rowCount = 0;
        var type = "prn";
        var lastState = null;
        var curState = null;
        var showIcon = false;
        for (id in tasks) {
            task = tasks[id];
            if (task.isUrgent() === true && task.isPRN() === true) {
                curState = new ActivityState(task);
                if (this.filterTaskByActivityType(task) === false) {
                    showIcon = curState.isShowIcon(lastState);
                    if (curState.isChangeHighlight(lastState)) {
                        this.toggleHighlightState();
                    }
                    lastState = curState;
                }
                htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                delete tasks[id];
                rowCount ++ ;
            }
        }
        for (id in tasks) {
            task = tasks[id];
            if (task.isPRN() === true) {
                curState = new ActivityState(task);
                if (this.filterTaskByActivityType(task) === false) {
                    showIcon = curState.isShowIcon(lastState);
                    if (curState.isChangeHighlight(lastState)) {
                        this.toggleHighlightState();
                    }
                    lastState = curState;
                }
                htmlRows += ActivityList.createTaskRow(task, type, index++, this.highlightState, showIcon, this.filterTaskByActivityType(task));
                delete tasks[id];
                rowCount++;
            }
        }
        if (rowCount > 0) {
            valueType = "section";
        } else {
            valueType = "novalues";
        }

        html += '<tr>';
        html += '<td style="border:none">';
        html += '<div class="activityList-' + valueType + '-header">';
        html += '<div class="activityList-' + valueType + '-header-label">' + i18n.PRN;
        if (rowCount == 0) {
            html += ' <span class="activityList-empty-message"> (' + i18n.NO_ACTIVITIES + ')</span>';
        }
        html += '</div>';
        html += '</div>';
        html += '</td>';
        html += '</tr>';
        if (rowCount > 0) {
            html += htmlRows;
        }
        html += '</table>';
        return html;
    },

    /**
     * Initiates the chart documentation action.
     * @param none
     */
     chart : function() {
         PrnListRightClickMenu.remove();
         PrnListTab.launchTaskDocumentation("CHART");
     },

     /**
     * Initiates the chart done action.
     * @param none
     */
     chartDone : function() {
         PrnListRightClickMenu.remove();
         PrnListTab.launchTaskDocumentation("CHART_DONE");
     },

     /**
     * Initiates the chart not done action.
     * @param none
     */
     chartNotDone : function() {
         PrnListRightClickMenu.remove();
         PrnListTab.launchTaskDocumentation("CHART_NOT_DONE");
     },

     /**
      * Calls powerform to process the charting activity
      *
      * @param none
      */
     chartDocument : function chartDocument() {
         PrnListRightClickMenu.remove ( );
         //ChartingDialogs.hide();
         // We will call out to powerform here.
         PrnListTab.launchTaskDocumentation("CHART");
     },

     /**
     * Retrieves the collection task Ids
     * @param taskIds - the task IDs collection
     * @param task - the collection task to get the IDs from
     * @return taskIds - the task IDs collection
     */
     getSpecimenCollectTaskIds: function (taskIds, task) {
        if (taskIds !== null && task !== null) {
            var taskContainers = task.getSpecimenContainers();
            if (taskContainers) {
                for (var i = 0; i < taskContainers.length; i++) {
                   if (taskIds.LookUp(taskContainers[i].taskId) === false) {
                    taskIds.Add(taskContainers[i].taskId);
                    }
                }
            }
            return taskIds;
        }
     },

     /**
      * Initiates the print labels action.
      *
      * @param none
      */
     printLabels : function () {
         Overlay.display(PatientDrillDown.container);
		 PrnListRightClickMenu.remove();
         var taskIds = window.external.DiscernObjectFactory ("INDEXEDDOUBLECOLLECTION");
         for ( var i = 0; i < this.selectedTasks.length; i ++ ) {
             var task = this.selectedTasks[i];
             if (task.id === 0) {
                 continue;
             }
             if (task.isSpecimenCollect() === true) {
                taskIds = this.getSpecimenCollectTaskIds(taskIds, task);
                continue;
             }
             taskIds.Add (task.id);
         }

         if (taskIds.GetCount() > 0) {
             Notifier.disable();
             var taskObject = window.external.DiscernObjectFactory ("TASKDOC");
             taskObject.PrintLabels(PatientDrillDown.patient.patientId, taskIds);
             Service.loadTaskCounts();
             Notifier.enable();
         }
     },

     /**
      * Initiates the task documentation workflow through PowerChart for the selected task rows.
      * @param none
      */
      launchTaskDocumentation: function (mode) {
          Overlay.display(PatientDrillDown.container);
          var taskIds = window.external.DiscernObjectFactory("INDEXEDDOUBLECOLLECTION");
          //If One of the selected task is specimen collect and is completed before Carecompass refresh.
          if(Tasks.selectedTasksCount < this.requestCount) {
            alert(i18n.TASKS_UPDATED_WARNING);
            PatientDrillDown.remove();
            refresh();
            return;
          }
          for(var i = 0; i < PrnListTab.selectedTasks.length; i++) {
              var task = PrnListTab.selectedTasks[i];
              if(task.id === 0) {
                  continue;
              }
              if(Tasks.replyStatus === "Z") {
                  alert(task.data.orderDisplay + ": " + i18n.COMPLETED_TASK_WARNING);
                  PatientDrillDown.remove();
                  refresh();
                  return;
              }
              //Display warning if the selected task is completed already
              if(Tasks.completedTaskIds != null && Tasks.completedTaskIds.length > 0) {
                   var isTaskCompleted = $.inArray(task.id, Tasks.completedTaskIds)
                   if(~(isTaskCompleted)){
                      alert(task.data.orderDisplay + ": " + i18n.COMPLETED_TASK_WARNING);
                      PatientDrillDown.remove();
                      refresh();
                      return;
                   }
              }
              if (task.isSpecimenCollect() === true) {
                taskIds = PrnListTab.getSpecimenCollectTaskIds(taskIds, task);
                continue;
             }
              taskIds.Add(task.id);
          }

          if(taskIds.GetCount() > 0) {
              Notifier.disable();
              var taskObject = window.external.DiscernObjectFactory("TASKDOC");
              taskObject.DocumentTasks(window, PatientDrillDown.patient.patientId, taskIds, mode);
              Service.loadTaskCounts();
              Notifier.enable();
          }
      },

      /**
       * Filters the task rows to display or not display medication, patient care, assessment, or other rows based on the state of the indicators.
       *
       * @param none
       */
      filter : function ( ) {
          if (this.displayMeds === true) {
              $ ("#PrnListTab-med-filter").addClass ("clicked-filter-mid");
              $ ("#PrnListTab-med-filter-left").addClass ("clicked-button-left");
              $ ("#PrnListTab-med-filter-image").addClass ("med_white");
              $ ("#PrnListTab-med-filter-image").removeClass ("medications-icon");
              $ ("#PrnListTab-med-filter").removeClass ("filter-mid");
              $ ("#PrnListTab-med-filter-left").removeClass ("button-left");
          } else {
              $ ("#PrnListTab-med-filter").removeClass ("clicked-filter-mid");
              $ ("#PrnListTab-med-filter-left").removeClass ("clicked-button-left");
              $ ("#PrnListTab-med-filter-image").removeClass ("med_white");
              $ ("#PrnListTab-med-filter-image").addClass ("medications-icon");
              $ ("#PrnListTab-med-filter").addClass ("filter-mid");
              $ ("#PrnListTab-med-filter-left").addClass ("button-left");
          }
          if (this.displayPatientCare === true) {
              $ ("#PrnListTab-patient-care-filter").addClass ("clicked-filter-mid");
              $ ("#PrnListTab-patient-care-filter").addClass ("clicked-border-left");
              $ ("#PrnListTab-patient-care-filter-image").addClass ("patient_care_white");
              $ ("#PrnListTab-patient-care-filter-image").removeClass ("patient-care-icon");
              $ ("#PrnListTab-patient-care-filter").removeClass ("filter-mid");
          } else {
              $ ("#PrnListTab-patient-care-filter").removeClass ("clicked-filter-mid");
              $ ("#PrnListTab-patient-care-filter").removeClass ("clicked-border-left");
              $ ("#PrnListTab-patient-care-filter-image").removeClass ("patient_care_white");
              $ ("#PrnListTab-patient-care-filter-image").addClass ("patient-care-icon");
              $ ("#PrnListTab-patient-care-filter").addClass ("filter-mid");
          }
          if (this.displayAssessment === true) {
              $ ("#PrnListTab-assessment-filter").addClass ("clicked-filter-mid");
              $ ("#PrnListTab-assessment-filter").addClass ("clicked-border-left");
              $ ("#PrnListTab-assessment-filter-image").addClass ("assessment_white");
              $ ("#PrnListTab-assessment-filter-image").removeClass ("assessment-icon");
              $ ("#PrnListTab-assessment-filter").removeClass ("filter-mid");
          } else {
              $ ("#PrnListTab-assessment-filter").removeClass ("clicked-filter-mid");
              $ ("#PrnListTab-assessment-filter").removeClass ("clicked-border-left");
              $ ("#PrnListTab-assessment-filter-image").removeClass ("assessment_white");
              $ ("#PrnListTab-assessment-filter-image").addClass ("assessment-icon");
              $ ("#PrnListTab-assessment-filter").addClass ("filter-mid");
          }
          if (this.displayOther === true) {
              $ ("#PrnListTab-other-filter").addClass ("clicked-filter-mid");
              $ ("#PrnListTab-other-filter").addClass ("clicked-border-left");
              $ ("#PrnListTab-other-filter-right").addClass ("clicked-button-right");
              $ ("#PrnListTab-other-filter-image").addClass ("other_white");
              $ ("#PrnListTab-other-filter-image").removeClass ("other-icon");
              $ ("#PrnListTab-other-filter").removeClass ("filter-mid");
              $ ("#PrnListTab-other-filter-right").removeClass ("button-right");
          } else {
              $ ("#PrnListTab-other-filter").removeClass ("clicked-filter-mid");
              $ ("#PrnListTab-other-filter").removeClass ("clicked-border-left");
              $ ("#PrnListTab-other-filter-right").removeClass ("clicked-button-right");
              $ ("#PrnListTab-other-filter-image").removeClass ("other_white");
              $ ("#PrnListTab-other-filter-image").addClass ("other-icon");
              $ ("#PrnListTab-other-filter").addClass ("filter-mid");
              $ ("#PrnListTab-other-filter-right").addClass ("button-right");
          }
      },

      /**
       * Maps and initializes the task row document objects after they have been appended to the document.
       *
       * @param table - The table to map the rows for.
       */
      mapRows : function (table) {
          if (table != null) {
              var index = this.rows.length;
              for ( var i = 0; i < table.rows.length; i ++ ) {
                  if (table.rows[i].taskId === undefined) {
                      continue;
                  }
                  var row = $ (table.rows[i]);
                  this.rows[index ++ ] = row;
                  this.mapRow (row);
              }
          }
      },

      /**
       * Maps and initializes the task row after it has been appended to the document.
       *
       * @param row - The row document object to map and initialize.
       */
      mapRow: function(row) {
          var task = Tasks.getById(row[0].taskId);
          var urgent = null;
          var priority = null;
          var display = null;
          var detail = null;
          var comment = null;
          var instructions = null;
          var type = null;
          var aChild = null;
		  var comments = task.getOrderComments();
          var cellChildren = $($(row[0].cells[0]).children()[0]).children();
          for (var childIndex = 0; childIndex < cellChildren.length; ++childIndex) {
              aChild = $(cellChildren[childIndex]);
              if (aChild.hasClass("activity-type") === true) {
                  type = aChild;
              }
              if (aChild.hasClass("stat-image") === true) {
                  urgent = aChild;
              }
              if (aChild.hasClass("task-display") === true) {
                  display = aChild;
              }
              if (aChild.hasClass("task-detail") === true) {
                  detail = aChild;
              }
              if (aChild.hasClass("task-instructions") === true) {
                  instructions = aChild;
              }
              if (aChild.hasClass("task-comment") === true) {
                  for (var i = 0; i < comments.length; i++) {
                      if(aChild.attr("Id") == "taskComment" + i) {
                          comment = aChild;
                          this.initializeCommentHover(comment, comments, i);
                      }
                  }
              }
          }
          if(task.isInterdisciplinary() === false) {
              this.initializeClickActions(row, display, detail, task);
          }

          this.sizeRow(task, display, detail);

          this.initializeHovers(task, type, priority, urgent, detail, display, instructions);
      },

      /**
       * Sets the width of the display and detail elements in the row.
       * @param task - The Task object for the row.
       * @param display - The task display, can be null if it doesn't exist.
       * @param detail - The task detail, can be null if it doesn't exist.
       */
       sizeRow: function(task, display, detail) {
         // unusable = outside of table =  cell left margin + icon + name left margin + detail left margin + cell right margin + scroll bar + right margin of table
         var computedUnusableSpace = 7 + 10 + 16 + 10 + 13 + 10 + 17 + 25;
         if(task.isTimeStudy() == true) {
             computedUnusableSpace += 23;
         }
         if (task.isUrgent ( ) == true) {
             computedUnusableSpace += 23;
         }

         // How much space we really have to put content in.
         var availableWidth = PatientDrillDown.width - computedUnusableSpace;
         if(display !== null && display !== undefined) {
             var displayWidth = display.width();

             if(displayWidth > availableWidth) {
                 display.width(availableWidth);
                 availableWidth = 0;
             }
             else {
                 availableWidth -= displayWidth;
             }
         }

         if(detail !== null && detail !== undefined) {
             var detailWidth = detail.width();

             if(availableWidth <= 0) {
                 availableWidth = 0;
             }
             detail.width(availableWidth);
         }
       },

       /**
        * Initializes the hovers for the truncated comment.
        *
        * @param comment - The comment icon
        * @param comments - List of comments for the Task
        * @param number - number of comment which is truncarted
        */
       initializeCommentHover : function (comment, comments, number) {
            if(comment != null && isTruncated(comment)) {
                var commentHoverDisplay = '<table class="hover-table">';
                for (var i = 0; i < comments.length; i++) {
                   if(i == number) {
                       commentHoverDisplay += '<tr><td class="hover-table-order-display-label">' + comments[i].display + '</td></tr>';
                       commentHoverDisplay += '<tr><td class="hover-table">' + comments[i].comment + '</td></tr>';
                       commentHoverDisplay += '</table>';
                   }
                }
               var commentConfig = {
                     over: function(e) {Hover.display(e, i18n.COMMENT, commentHoverDisplay);},
                     timeout: 200,
                     out: function(e) {Hover.hide();},
                     interval: 200
                };
                comment.hoverIntent(commentConfig);
            }
       },

      /**
       * Initializes the hovers for the various icons that can display in the row.
       *
       * @param task - The Task object for these hovers.
       * @param type - The type icon, is never null.
       * @param urgent - The urgent icon, can be null if it doesn't exist.
       */
      initializeHovers : function (task, type, priority, urgent, detail, display, instructions) {
		  var taskDisplay = task.getDisplay();
		  var taskStatusDisplay = task.getStatusDisplay();
		  if(task.isInValidation()) {
		  	  taskDisplay = '<span class="task-display" style="padding-left:0px; display:inline;">'+ taskDisplay +'</span>';
		  	  taskStatusDisplay = '<span style="color:#000000; padding-left:4px; font-size:12px;">(' + taskStatusDisplay + ')</span>';
		  }
		  else {
			  taskStatusDisplay = "";
		  }
		  var taskDisplayStatusName = taskDisplay + taskStatusDisplay;

          if(task != null && task.data.containers != null && task.data.containers.length > 0) {
              var taskConfig = {
                   over: function(e) {Hover.display(e, i18n.CONTAINER_DETAILS, task.getHoverDisplay());},
                   timeout: 200,
                   out: function(e) {Hover.hide();},
                   interval: 200
              };
              display.hoverIntent(taskConfig);
          }
          if(type != null) {
              var typeConfig = {
                   over: function(e) {Hover.display(e, i18n.ACTIVITY_TYPE, task.getTypeDisplay());},
                   timeout: 200,
                   out: function(e) {Hover.hide();},
                   interval: 200
              };
              type.hoverIntent(typeConfig);
          }
          if(priority != null) {
              var priorityConfig = {
                   over: function(e) {Hover.display(e, "iTask Priority", "iIndicates a Timed Study");},
                   timeout: 200,
                   out: function(e) {Hover.hide();},
                   interval: 200
              };
              priority.hoverIntent(priorityConfig);
          }
          if(instructions != null && isTruncated(instructions)) {
              var config = {
                   over: function(e) {Hover.display(e, i18n.INSTRUCTION, task.getInstructions());},
                   timeout: 200,
                   out: function(e) {Hover.hide();},
                   interval: 200
              };
              instructions.hoverIntent(config);
          }
          if(urgent != null) {
              var config = {
                   over: function(e) {Hover.display(e, i18n.URGENT_ACTIVITY_HEADER, i18n.URGENT_ACTIVITY);},
                   timeout: 200,
                   out: function(e) {Hover.hide();},
                   interval: 200
              };
              urgent.hoverIntent(config);
          }
          if(isTruncated(detail)) {
              var config = {
                   over: function(e) {Hover.display(e, taskDisplayStatusName, task.getDetailDisplay());},
                   timeout: 200,
                   out: function(e) {Hover.hide();},
                   interval: 200
              };
              detail.hoverIntent(config);
          }
          if(isTruncated(display)) {
              var detailConfig = {
                   over: function(e) {Hover.display(e, taskDisplayStatusName, task.getDetailDisplay());},
                   timeout: 200,
                   out: function(e) {Hover.hide();},
                   interval: 200
              };
              detail.hoverIntent(detailConfig);
          }
      },

      /**
       * Initializes the actions and highlight state for the row.
       *
       * @param row - The row to initialize the action son.
       * @param display - The display of the task row.
       * @param detail - The detail display of the task row.
       * @param task - The associated to the input row.
       */
      initializeClickActions : function (row, display, detail, task) {
          row.mousedown (function (event) {
              if (task.canDocument ( ) === false && task.canChartDone ( ) === false && task.canChartNotDone ( ) === false) {
                  // Do nothing in this case to prevent highlighting
              } else if (row.hasClass ("selected") === false) {
                  row.addClass ("selected");
                  row.removeClass("deselected");
                  PrnListTab.selectedTasks[PrnListTab.selectedTasks.length] = task;
                  PrnListTab.updateButtons();
              } else {
                  if (event.button !== 2) {
                      row.removeClass ("selected");
                      row.addClass ("deselected");
                      var index = - 1;
                      for ( var ti = 0; ti < PrnListTab.selectedTasks.length; ti ++ ) {
                          if (PrnListTab.selectedTasks[ti] == task) {
                              index = ti;
                              break;
                          }
                      }
                      if (index > - 1) {
                          PrnListTab.selectedTasks.splice (index, 1);
                      }
                      PrnListTab.updateButtons();
                  }
              }
              switch (event.button) {
              case 2 :
                  PrnListRightClickMenu.display (event, task);
                  break;
              }
          });
      },

      /**
       * Updates the sate of the buttons based on the selected task rows and their charting actions.
       * @param none
       */
       updateButtons : function() {
           var documentButton = $('#activityList-prn-document');
           var doneButton = $('#activityList-prn-done');
           var notDoneButton = $('#activityList-prn-not-done');

           if(this.selectedTasks.length == 0) {
               documentButton.attr("disabled", "disabled");
               doneButton.attr("disabled", "disabled");
               notDoneButton.attr("disabled", "disabled");
               this.printLabelEnabled=false;		
	       return;
           }
		   
           var taskIdList = window.external.DiscernObjectFactory("DOUBLEMAP");
           var enableDocument = true;
           var enableDone = true;
           var enableNotDone = true;
           var enablePrintLabel = true;
           for(var i = 0; i < this.selectedTasks.length; i++) {
               var task = this.selectedTasks[i];
               taskIdList.Add(i, task.id);
               if(this.selectedTasks[i].canDocument() == false) {
                   enableDocument = false;
               }
               if(this.selectedTasks[i].canChartDone() == false) {
                   enableDone = false;
               }
               if(this.selectedTasks[i].canChartNotDone() == false) {
                   enableNotDone = false;
               }
               if(this.selectedTasks[i].canPrintLabel() == false) {
                   enablePrintLabel = false;
               }
           }
           //To get the latest status of the selected tasks
           this.requestCount = taskIdList.GetCount();
           if(taskIdList.GetCount() > 0) {
              PrnListTab.loadSelectedTasksFlag = true;
              Service.loadTasks(taskIdList, 0);
           }
           if(enableDocument) {
               documentButton.removeAttr("disabled");
           }
           else {
               documentButton.attr("disabled", "disabled");
           }
           if(enableDone) {
               doneButton.removeAttr("disabled");
           }
           else {
               doneButton.attr("disabled", "disabled");
           }
           if(enableNotDone) {
               notDoneButton.removeAttr("disabled");
           }
           else {
               notDoneButton.attr("disabled", "disabled");
           }
           if(enablePrintLabel) {
               this.printLabelEnabled = true;
           }
           else {
               this.printLabelEnabled = false;
           }
       },


    /**
     * Refreshes the display of the task rows and their sections.
     *
     * @param none
     */
    refreshTasks : function ( ) {
        this.tasksContainer.empty ( );
        this.tasksContainer.append (this.createTasks ( ));
        this.prnListTabRef = $("#prnListDiv");
        this.prnSection = $ ("#activityList-prn");
        this.continuousSection = $ ("#activityList-continuous");
        this.rows = [ ];
        this.selectedTasks = [ ];

        this.mapRows (this.prnSection[0]);
        this.mapRows (this.continuousSection[0]);
        // disable the buttons.
        var documentButton = $('#activityList-prn-document');
        var doneButton = $('#activityList-prn-done');
        var notDoneButton = $('#activityList-prn-not-done');
        documentButton.attr("disabled", "disabled");
        doneButton.attr("disabled", "disabled");
        notDoneButton.attr("disabled", "disabled");

        this.filter ( );
        PatientDrillDown.section = "";
        this.tasksLoaded = true;
        Overlay.remove ( );
    },

    /**
     * Update the highlight state.
     *
     * @param none
     *
     * @returns None.
     */
    toggleHighlightState : function() {
        this.highlightState = !this.highlightState;
    }
};

/**
 * Creates the tool bar in the patient activity PRN/Continuous area.
 * 
 * @param handler is the name of the var for the tab this set of filter buttons belongs with.
 * @return The HTML string representing the tool bar.
 */
function PrnListToolBar ( handler ) {
    var html = '<tr>';
    html += '<td id="PrnListTab-toolbar" class="activityList-table-toolbar">';
    html += '<div style="display: inline-block;">';
    html += ActivityTypeFilterButtonBar( handler );
    html += '</div>';
    html += '</td>';
    html += '</tr>';
    return html;
}

/**
 * Creates the tool bar in the patient activity summary area.
 * 
 * @param handler is the name of the var for the tab this set of filter buttons belongs with.
 * @return The HTML string representing the tool bar.
 */
function ActivityListToolBar ( handler ) {
    var html = '<tr>';
    html += '<td class="activityList-table-toolbar">';
    html += '<div id="ActivityListTab-toolbar" style="display: inline-block;">';
    html += ActivityTypeFilterButtonBar( handler );
    html += TimeFilterButtonBar();
    html += '</div>';
    html += '</td>';
    html += '</tr>';
    return html;
}

/**
 * Creates the filter button section of the tool bar in the patient activity summary area.
 * 
 * @param handler is the name of the var for the tab this set of filter buttons belongs with.
 * @return The HTML string representing the tool bar filter buttons.
 */
function ActivityTypeFilterButtonBar ( handler ) {
    var html = '<table class="filter-table" style="border: 0px">';
    html += '<tr>';
    html += '<td id="' + handler + '-med-filter-left" class="clicked-button-left" onmousedown="' + handler + '.filterMeds()">';
    html += '</td>';
    html += '<td id="' + handler + '-med-filter" class="clicked-filter-mid button-padding-right " onmousedown="' + handler + '.filterMeds()">';
    html += '<div id="' + handler + '-med-filter-image" class="med_white"></div>';
    html += '</td>';
    html += '<td id="' + handler + '-patient-care-filter" class="clicked-filter-mid clicked-border-left border-left button-padding-left button-padding-right" onmousedown="' + handler + '.filterPatientCare()">';
    html += '<div id="' + handler + '-patient-care-filter-image" class="patient_care_white"></div>';
    html += '</td>';
    html += '<td id="' + handler + '-assessment-filter" class="clicked-filter-mid clicked-border-left border-left button-padding-left button-padding-right" onmousedown="' + handler + '.filterAssessment()">';
    html += '<div id="' + handler + '-assessment-filter-image" class="assessment_white"></div>';
    html += '</td>';
    html += '<td id="' + handler + '-other-filter" class="clicked-filter-mid clicked-border-left border-left button-padding-left " onmousedown="' + handler + '.filterOther()">';
    html += '<div id="' + handler + '-other-filter-image" class="other_white"></div>';
    html += '</td>';
    html += '<td id="' + handler + '-other-filter-right" class="clicked-button-right" onmousedown="' + handler + '.filterOther()">';
    html += '</td>';
    html += '</tr>';
    html += '</table>';
    return html;
}

/**
 * Creates the tool bar in the patient activity summary area.
 * 
 * @param none
 * @return The HTML string representing the tool bar.
 */
function TimeFilterButtonBar ( ) {
    var html = '<table class="time-table">';
    html += '<tr>';
    html += '<td id="next-2-hours-left" class="clicked-button-left" onmousedown="ActivityListTab.displayNext2Hours()">';
    html += '</td>';
    html += '<td id="next-2-hours" class="clicked-button-mid time-button-padding filter-button-border-right" onmousedown="ActivityListTab.displayNext2Hours()">';
    html += '<div class="truncate" >' + i18n.NEXT_2_HOURS + '</div>';
    html += '</td>';
    html += '<td id="next-4-hours" class="button-mid time-button-padding filter-button-border-left filter-button-border-right" onmousedown="ActivityListTab.displayNext4Hours()">';
    html += '<div class="truncate">' + i18n.NEXT_4_HOURS + '</div>';
    html += '</td>';
    html += '<td id="next-12-hours" class="button-mid time-button-padding filter-button-border-left" onmousedown="ActivityListTab.displayEntireShift()">';
    html += '<div class="truncate">' + i18n.NEXT_12_HOURS + '</div>';
    html += '</td>';
    html += '<td id="next-12-hours-right" class="button-right" onmousedown="ActivityListTab.displayEntireShift()">';
    html += '</td>';
    html += '</tr>';
    html += '</table>';
    return html;
}

/**
 * The visual row representing a patient.
 */
function PatientRow(number, index) {
    this.patientId = 0;
    this.encounterId = 0;
    this.number = number + 1;
    this.index = index;
    this.locationCell = null;
    this.patientCell = null;
    this.visitCell = null;
    this.careTeamCell = null;
    this.customCells = [];
    this.activitiesCell = null;
    this.medicationCell  = null;
    this.patientCareCell = null;
    this.assessmentCell = null;
    this.otherCell = null;
    this.qualityCell = null;
    this.hover = null;
    this.arrow = null;
    this.stroke = null;
    this.ventilatorCell = null;
    this.oxygenCell = null;
    this.bloodGasesCellPH = null;
    this.bloodGasesCellPaO2 = null;
    this.bloodGasesCellPaCO2 = null;
    this.bloodGasesCellHCO3 = null;
    this.bloodGasesCellO2Sat = null;
    this.planOfCareCell = null;
    this.errorTaskCell = null;
    this.pocLineCount = 0;
    this.rowHeight = 72;

    this.empty = function emptyPatientRow() {
        this.patientId = 0;
        this.encounterId = 0;
        this.number = number + 1;
        this.index = index;
        this.locationCell = null;
        this.patientCell = null;
        this.visitCell = null;
        this.careTeamCell = null;
        this.customCells = [];
        this.activitiesCell = null;
        this.medicationCell  = null;
        this.patientCareCell = null;
        this.assessmentCell = null;
        this.otherCell = null;
        this.qualityCell = null;
        this.hover = null
        this.arrow = null;
        this.stroke = null;
        this.ventilatorCell = null;
        this.oxygenCell = null;
        this.bloodGasesCellPH = null;
        this.bloodGasesCellPaO2 = null;
        this.bloodGasesCellPaCO2 = null;
        this.bloodGasesCellHCO3 = null;
        this.bloodGasesCellO2Sat = null;
        this.planOfCareCell = null;
        this.errorTaskCell = null;
        this.rowHeight = 72;
    },

    /**
     * Creates the patient row
     * @param none
     * @return - The HTML string representing this patient row.
     */
    this.create = function createPatientRow(patient) {
        this.patientId = patient.patientId;
        this.encounterId = patient.encounterId;
        var html = '<tr id="patient' + this.number + '" encounterId="' + patient.encounterId + '" class="patient-table-row';
        html +=	PatientLists.getActive().getClass() + this.determineStriping(this.patientId) + '">';
        this.locationCell = new LocationCell(patient, this.number);
        html += this.locationCell.create(patient);
        this.patientCell = new PatientCell(this.number);
        html += this.patientCell.create(patient);
        this.visitCell = new VisitCell(this.number);
        html += this.visitCell.create(patient);
        
        if (Configuration.errorTasksIndicator) {
            this.errorTaskCell = new ErrorTaskCell(this.number);
            html += this.errorTaskCell.create(patient);
        }

        this.careTeamCell = new CareTeamCell(this.number);
        html += this.careTeamCell.create(patient);

        if (Configuration.customs != null && Configuration.customs.length > 0 && Configuration.therapiesExist == false){
            for (var i = 0; i < Configuration.customs.length; i++) {
                this.customCells[i] = new CustomCell(this.number);
                html += this.customCells[i].create(patient, Configuration.customs[i].display, Columns.customs[i].width);
            }
        }
        if (PatientLists.getActive()) {
            this.activitiesCell = new ActivitiesCell(this.number);
            html += this.activitiesCell.create(patient);
        }
        if (Configuration.bloodGases == true){
            this.bloodGasesCellPH = new BloodGasesCellPH();
            this.bloodGasesCellPaO2 = new BloodGasesCellPaO2();
            this.bloodGasesCellPaCO2 = new BloodGasesCellPaCO2();
            this.bloodGasesCellHCO3 = new BloodGasesCellHCO3();
            this.bloodGasesCellO2Sat = new BloodGasesCellO2Sat();
            
            html += this.bloodGasesCellPH.create(patient);
            html += this.bloodGasesCellPaO2.create(patient);
            html += this.bloodGasesCellPaCO2.create(patient);
            html += this.bloodGasesCellHCO3.create(patient);
            html += this.bloodGasesCellO2Sat.create(patient);
        }
        if (Configuration.ventilator == true){
            this.ventilatorCell = new VentilatorCell(this.number);
            html += this.ventilatorCell.create(patient);
        }
        if (Configuration.oxygen == true){
            this.oxygenCell = new OxygenCell(this.number);
            html += this.oxygenCell.create(patient);
        }
        if (Configuration.qualityMeasures == true && Configuration.therapiesExist == false){
            this.qualityCell = new QualityMeasuresCell(this.number);
            html += this.qualityCell.create(patient);
        }
        if (Configuration.planOfCareColumn == true && PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false && Configuration.therapiesExist == false){
            this.planOfCareCell = new PlanOfCareCell(this.number, patient);
            html += this.planOfCareCell.create(patient);
        }
        html += "</tr>";
        return html;
    }

    /**
     * Determines if this row is striped or not
     * @param none
     * @return The string "striped" to apply the striped class if the row should be striped, empty if not.
     */
    this.determineStriping = function(patientId) {
        if (Sepsis.getDateTime(patientId) != null) {
            return " striped-alert";
        }
        if (this.number % 2 == 0) {
            return " striped";
        }
        return "";
    }

    /**
     * Sets the row object on this patient row.
     * @param row - The row document object to initialize the display of this row with.
     */
    this.setRow = function(row) {
        var cellIndex = 0;
        var patient = Patients.getByEncounterId(this.encounterId)
        this.locationCell.setCell($(row.cells[cellIndex++]), patient);
        var patientCellDisplayObject = $(row.cells[cellIndex++]);
        this.patientCell.setCell(patientCellDisplayObject, patient);
        this.visitCell.setCell($(row.cells[cellIndex++]), patient);
        
        if (Configuration.errorTasksIndicator) {
            this.errorTaskCell.setCell($(row.cells[cellIndex++]));
        }
        
        this.careTeamCell.setCell($(row.cells[cellIndex++]), patient);

        if (Configuration.customs != null && Configuration.customs.length > 0 && Configuration.therapiesExist == false) {
            for (var i = 0; i < Configuration.customs.length; i++) {
                this.customCells[i].setCell($(row.cells[cellIndex++]), patient, Configuration.customs[i].display);
            }
        } 
        if (PatientLists.getActive()) {
            this.activitiesCell.setCell($(row.cells[cellIndex++]), patient, this, patientCellDisplayObject);
        }
        if (Configuration.bloodGases == true){
            this.bloodGasesCellPH.setCell($(row.cells[cellIndex++]), patient);
            this.bloodGasesCellPaO2.setCell($(row.cells[cellIndex++]), patient);
            this.bloodGasesCellPaCO2.setCell($(row.cells[cellIndex++]), patient);
            this.bloodGasesCellHCO3.setCell($(row.cells[cellIndex++]), patient);
            this.bloodGasesCellO2Sat.setCell($(row.cells[cellIndex++]), patient); 
        }
        if (Configuration.ventilator == true){
            this.ventilatorCell.setCell($(row.cells[cellIndex++]), patient);
        }
        if (Configuration.oxygen == true){
            this.oxygenCell.setCell($(row.cells[cellIndex++]), patient);
        }
        if (Configuration.qualityMeasures == true && Configuration.therapiesExist == false){
            this.qualityCell.setCell($(row.cells[cellIndex++]), patient);
        }
        if (Configuration.planOfCareColumn == true && PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false && Configuration.therapiesExist == false){
            this.planOfCareCell.setCell($(row.cells[cellIndex++]), patient);
        }
        this.initializeRightClick(this.patientId, this.encounterId);
        this.calcRowHeight(row);
        this.hover = new PatientRowHover();
        this.hover.create(this, $(row), patientCellDisplayObject, patient, this.rowHeight);
        if (this.index == 0) {
            $(row).children().css("border-top", "1px solid #FFFFFF");
        }
    },

    /**
     * Initializes the right click action for this row.
     * @param patient - The patient associated to this row.
     */
    this.initializeRightClick = function(patientId, encounterId) {
        var row = $(PatientTable.tableDiv.children()[0].rows[this.index]);
        var index = this.index;
        row.mousedown(function(event) {
            switch (event.button) {
                case 2:
                    var mousePosition = event ? event:window.event;
                    PatientTable.clearPatientTableHighlights();
                    var thisRow = $(PatientTable.tableDiv.children()[0].rows[index]);
                    var previousRow = PatientTable.tableDiv.children()[0].rows[index - 1];
                    var nextRow = PatientTable.tableDiv.children()[0].rows[index +1];
                    
                    if (previousRow != null) {
                        if ($(previousRow).children().hasClass("unit-row")){
                            $(previousRow).children().children().css("border-bottom", "1px solid #3380EF");
                            if (nextRow != null){
                                thisRow.children().css("border-bottom", "1px solid #3380EF");
                                thisRow.css("border-collapse", "collapse");
                            }
                            else {
                                thisRow.children().css("border-bottom", "1px solid #3380EF");
                                thisRow.css("border-collapse", "collapse");
                            }
                        }
                        else {
                            $(previousRow).children().css("border-bottom", "1px solid #3380EF");
                            thisRow.children().css("border-bottom", "1px solid #3380EF");
                            thisRow.css("border-collapse", "collapse");
                        }
                    }
                    else {
                        thisRow.children().css("border-top", "1px solid #3380EF");
                        thisRow.children().css("border-bottom", "1px solid #3380EF");
                        thisRow.css("border-collapse", "collapse");
                    }
                    RightClickMenu.display(mousePosition, patientId, encounterId);
                    mousePosition.stopPropagation();
                    break;
            }
        });
    },

    /**
     * Resizes the contents of each cell in this row based on the window and column widths.
     * @param none
     */
    this.size = function sizePatientRow() {
        if (this.locationCell != null) {
            this.locationCell.size();
        }
        if (this.patientCell != null) {
            this.patientCell.size();
        }
        if (this.visitCell != null) {
            this.visitCell.size();
        }
        if (this.careTeamCell != null) {
            this.careTeamCell.size();
        }
        if (this.activitiesCell != null) {
            this.activitiesCell.size();
        }
        if (this.planOfCareCell != null) {
            this.planOfCareCell.size();
        }
        if (this.hover != null) {
            this.hover.size();
        }
    },

    /**
     * Calculates and sets the row height to match what is needed, and make the row hover height match.
     * @param row The row document object to initialize the display of this row with.
     */
    this.calcRowHeight = function computeRowHeight(row) {
        this.rowHeight = 72;
        if (PatientLists.getActive() && PatientLists.getActive().isDepartmental() == true) {
            // height = 48px, departmental
            this.rowHeight = 48;
        }
        else if (PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false && Configuration.therapiesExist == false && Configuration.planOfCareColumn == false ) {
            // height = 72px, standard
            this.rowHeight = 72;
        }
        else if (Configuration.planOfCareColumn == true && PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false && Configuration.therapiesExist == false) {
            // height = 72px or 96px or 96px or 120px
            var pocLines = this.planOfCareCell.pocLineCount;
            if (pocLines < 4) {
                this.rowHeight = 72;
            }
            else if (pocLines < 5) {
                this.rowHeight = 96;
            }
            else {
                this.rowHeight = 120;
            }
        }
        $(row).css("height", this.rowHeight);
    }

    /**
     * Hides the patient row hover used to open the patient drill down on this row.
     * @param none
     */
    this.hideRowHover = function hidePatientRowHover() {
        if (this.hover != null) {
            this.hover.hide();
        }
    }
};

/**
 * Represents the patient row hover used to open the patient drill down on a patient row
 */	
function PatientRowHover() {
	this.hover = null;
	this.arrow = null;
	this.stroke = null;
	this.height = null;

	/**
	 * Creates and initializes the hover
	 * @param row - The row to create the over on.
	 */	
	this.create = function createPatientRowHover(patientRow, row, cell, patient, rowHeight) {
		if(patient.hasRelationship() === false || patient.encounterId === 0) {
			return;
		}
		this.height = rowHeight - 1;
		this.hover = $(document.createElement('div'));
		this.hover.prop("id", "hover");
		this.hover.css("height", this.height);
		if(PatientTable.sort === "LOCATION"){
			this.hover.addClass("patient-row-hover-location");
		}
		else {
			this.hover.addClass("patient-row-hover");
		}
		var html = '<div class="patient-row-hover-stroke"></div>';
		html += '<table class="patient-row-hover-table">';
		html += '<tr>';
		html += '<td class="patient-row-hover-table">';
		html += '<div class="arrow-right-grey"></div>';
		html += '</td>';
		html += '</tr>';
		html += '</table>';
		this.hover.append(html);
		this.stroke = $(this.hover.children()[0]);
		this.stroke.hide();
		this.arrow = $(this.hover.children()[1].rows[0].cells[0]).children();
		var arrow = this.arrow;
		$($(cell).children()[0]).append(this.hover);
		this.hover.hide();
		var hover = this;
		var encounterId = patient.encounterId;
		if(PatientDrillDown.isDisplayed() && patient.encounterId === PatientDrillDown.patient.encounterId) {
			PatientDrillDown.patientCell = patientRow.patientCell;
			this.expand();
			this.hideOverlay();
		}

		row.mouseover(function() {
			hover.displayArrow();
		});

		row.mouseleave(function() {
			if(hover.expanded() === false) {
				hover.hide();
			}
		});

		this.hover.mouseover(function() {
			hover.displayOverlay();
		});

		this.hover.mouseleave(function() {
			hover.hideOverlay();
		});

		this.hover.click(function() {
			hover.click(encounterId);
		});
	},
	
	/**
	 * Hides the hover if it exists.
	 * @param none
	 */	
	this.hide = function() {
		if(this.hover === null || this.arrow === null || this.stroke === null) {
			return;
		}
		this.arrow.removeClass("arrow-right-white");
		this.arrow.removeClass("arrow-left-white");
		this.hover.removeClass("patient-row-hover-overlay");
		this.hover.removeClass("patient-row-hover-overlay-clicked");
		this.stroke.hide();
		this.hover.hide();
	},

	/**
	 * Displays the hover arrow.
	 * @param none
	 */	
	this.displayArrow = function() {
		this.hover.show();
	}

	/**
	 * Displays the hover overlay and handles if the hover is expanded or not.
	 * @param none
	 */	
	this.displayOverlay = function() {
		if(this.expanded() == false) {
			this.arrow.removeClass("arrow-right-grey");
			this.arrow.addClass("arrow-right-white");
		}
		this.hover.removeClass("patient-row-hover-overlay-clicked");
		this.hover.addClass("patient-row-hover-overlay");
		var width;
		if(PatientTable.sort === "LOCATION") {
			if($(".unit-row").length > 0) {
				width = (PatientTable.tableDiv.children()[0].rows[1].cells[1].offsetWidth) - 29;
			} 
			else {
				width = (PatientTable.tableDiv.children()[0].rows[0].cells[1].offsetWidth) - 29;
			}
		}
		else {
			width = (PatientTable.tableDiv.children()[0].rows[0].cells[1].offsetWidth) - 29;
		}
		this.hover.css("margin-left", width);
		this.arrow.show();
		this.hover.show();
		this.stroke.show();
	}
	
	/**
	 * Hides the hover overlay and handles if the hover is expanded or not.
	 * @param none
	 */	
	this.hideOverlay = function() {
		if(this.expanded()) {
			this.hover.removeClass("patient-row-hover-overlay");
			this.hover.addClass("patient-row-hover-overlay-clicked");
			return;
		}
		this.hover.removeClass("patient-row-hover-overlay");
		this.arrow.removeClass("arrow-right-white");
		this.arrow.addClass("arrow-right-grey");
		this.arrow.show();
		this.hover.show();
		this.stroke.hide();
	}
	
	/**
	 * Handles the action of clicking on the hover to open or close the patient drill down, based on whether it is expanded or not.
	 * @param encounterId- the unique identifier for a person
	 * @param display- any filters to be displayed.
	 * @param section- the display of the section to scroll 
	 * @param timeFilterButton- the 12hrs time filter button to be enabled.
	 */
	this.click = function(encounterId, display, section, timeFilterButton) {

		if(ActivitiesPopOver.encounterId != encounterId) {
			ActivitiesPopOver.hideRowHovers();
		}
		var patient = Patients.getByEncounterId(encounterId);
		var cell = null;
		for(var i = 0; i < PatientTable.rows.length; i++) {
			if(PatientTable.rows[i].encounterId == encounterId) {
				cell = PatientTable.rows[i].patientCell.cell;
				break;
			}
		}
		if(cell === null) {
			alert("Cell not found for encounter " + encounterId);
		}
		if(this.expanded() === true) {
			this.collapse();
			PatientDrillDown.remove();
			PatientTable.isSortable = true;
			if(CC_PatientFocus.patientFocus !== null) {
				CC_PatientFocus.patientFocus.ClearPatientFocus();
			}
		}
		else {
			this.expand();
			PatientTable.hideRowHovers(patient);
			Timers.start("USR:CareCompass.OpenPatientDrillDown");
			PatientDrillDown.display(cell, patient, display, section, timeFilterButton);
			PatientTable.isSortable = false;
			if(CC_PatientFocus.patientFocus !== null) {
				CC_PatientFocus.patientFocus.SetPatientFocus(patient.patientId, patient.encounterId, patient.name);
			}
		}
	}



	/**
	 * Collapses the overlay of the patient hover when closing the patient drilldown.
	 * @param none
	 */	
	this.collapse = function() {
		this.arrow.removeClass("arrow-left-white");
		this.arrow.addClass("arrow-right-white");
		this.hover.removeClass("patient-row-hover-overlay-clicked");
	}
	
	/**
	 * Expans the overlay of the patient hover when opening the patient drilldown.
	 * @param none
	 */	
	this.expand = function() {
		this.arrow.addClass("arrow-left-white");
		this.arrow.removeClass("arrow-right-white");
		this.hover.addClass("patient-row-hover-overlay");
		this.arrow.show();
		this.hover.show();
		this.stroke.show();
	}

	/**
	 * Determines if this patient hover is expanded or collapsed.
	 * @param none
	 * @return True if the hover is expanded, false if not.
	 */	
	this.expanded = function() {
		if(this.arrow.hasClass("arrow-left-white") === true) {
			return true;
		}
		return false;
	}
}

/**
 * Creates the demographic banner.
 * 
 * @param none
 * @return The HTML string representing the demographic banner.
 */
function PatientDrilldownDemographicsBanner(demographicsPatient) {
	var totalWidth = PatientDrillDown.width;
	var availableWidth = totalWidth - 35; //35px is reserved for close button on right
	var nameWidth = Math.round(availableWidth * 0.25);
	var cellWidth = Math.round(availableWidth * 0.15);
	var contentwidth = cellWidth - 43;	//43px is subtracted for padding and label width
	
	var html = '<tr>';
    html += '<td class="patient-drill-down-banner-cell">';
    html += '<div class="patient-drill-down-banner">';
    html += '<table class="patient-drill-down-banner-table" style="width:' + totalWidth + 'px;">';
    html += '<tr>';
    html += '<td class="patient-drill-down-banner-name-cell truncate" style="width:' + nameWidth + ' px;">';
    html += '<span id="patientName" class="patient-drill-down-banner-name truncate" style="width:' + (nameWidth - 10) + 'px;">' + demographicsPatient.getName() + '</span>';
    html += '</td>';
	html += '<td class="patient-drill-down-banner-age-cell" style="width:' + cellWidth + 'px;">';
    html += '<span class="patient-drill-down-banner-label">' + i18n.AGE + ':' + '</span>';
    html += '<span class="patient-drill-down-banner-text truncate" style="width:' + contentwidth + 'px;">' + demographicsPatient.getAgeDisplay() + '</span>';
    html += '</td>';
	html += '<td class="patient-drill-down-banner-gender-cell" style="width:' + cellWidth + 'px;">';
    html += '<span class="patient-drill-down-banner-label">' + i18n.SEX + ':'+ '</span>';
    html += '<span class="patient-drill-down-banner-text truncate" style="width:' + contentwidth + 'px;">' + demographicsPatient.getGender() + '</span>';
    html += '</td>';
    html += '<td class="patient-drill-down-banner-dob-cell" style="width:' + cellWidth + 'px;">';
    html += '<span class="patient-drill-down-banner-label">' + i18n.DOB + ':' + '</span>';
    html += '<span class="patient-drill-down-banner-text truncate" style="width:' + contentwidth + 'px;">' + demographicsPatient.getBirthDateDisplay() + '</span>';
    html += '</td>';
    html += '<td class="patient-drill-down-banner-mrn-cell" style="width:' + cellWidth + 'px;">';
    html += '<span class="patient-drill-down-banner-label">' + i18n.MRN + ':' + '</span>';
    html += '<span class="patient-drill-down-banner-text truncate" style="width:' + contentwidth + 'px;">' + demographicsPatient.mrn + '</span>';
    html += '</td>';
    html += '<td class="patient-drill-down-banner-fin-cell" style="width:' + cellWidth + 'px;">';
    html += '<span class="patient-drill-down-banner-label">' + i18n.FIN + ':' + '</span>';
    html += '<span class="patient-drill-down-banner-text truncate" style="width:' + contentwidth + 'px;">' + demographicsPatient.fin + '</span>';
    html += '</td>';
    html += '<td class="patient-drill-down-banner-close-cell" onmousedown = "PatientDrillDown.remove()">';
    html += '<span class="close_neutral"> </span>';
    html += '</td>';
    html += '</tr>';
    html += '</table>';
    html += '</div>';
    html += '</td>';
    html += '</tr>';
   
    return html;
}


/**
 * Represents the right click menu that is displayed over a patient row.
 */	
var RightClickMenu = {
	container : null,
	patientId: 0,
	encounterId: 0,
	
	/**
	 * Displays the right click menu at the cursor position.
	 * @param cursor - The cursor that was used to right click.
	 * @param encounterId - The encounter id associated with the right click menu.
	 */	
	display: function(cursor, patientId, encounterId) {
		Notifier.disable();
		this.remove();
		Hover.hide();
		this.patientId = patientId;
		this.encounterId = encounterId;
		this.container = $(document.createElement('div'));
		this.container.addClass("right-click-menu");
		this.container.append(this.create());
		CareCompass.body.append(this.container);
		this.container.css("top", cursor.pageY);

		if (this.container.height() + cursor.pageY >= CareCompass.body.height()) {
			this.container.css("top", cursor.pageY - this.container.height());
		} else {
			this.container.css("top", cursor.pageY);
		}


		if(this.container.width() + cursor.pageX >= CareCompass.body.width()) {
			this.container.css("left", cursor.pageX - this.container.width());
		}
		else {
			this.container.css("left", cursor.pageX);
		}

		this.container.click(function(event) {
			event.stopPropagation();		
		});
		Notifier.disable();
		this.removePatient = $(this.container.children()[0].rows[0]);
		this.removePatient.mouseover(function() {
			if(PatientLists.getActive().modifiable == false) {
				return;
			}
			$(this).addClass("highlighted");
		});
		this.removePatient.mouseleave(function() {
			if(PatientLists.getActive().modifiable == false) {
				return;
			}
			$(this).removeClass("highlighted");
		});
		
		if(PatientLists.getActive().modifiable == false) {
			this.removePatient[0].disabled = true;
		}
		else {
			this.removePatient[0].disabled = false;
		}
		
		for(var i = 0; i < this.container.children()[0].rows.length; i++) {
			var option = $(this.container.children()[0].rows[i]);
			if(i == 0) {
				$(option[0].cells[0]).css("border-bottom" , "1px solid #CDCDCD");
			}
			option.mouseover(function() {
				$(this).addClass("highlighted");
			});
			option.mouseleave(function() {
				$(this).removeClass("highlighted");
			});
		}
		
		Shadow.display(this.container);
	},
	
	/**
	 * Determines if the right click menu is displayed or not.
	 * @param none
	 * @return True if the right click menu is displayed, false if not.
	 */
	isDisplayed: function isRightClickMenuDisplayed() {
		if (this.container != null) {
            return true;
        }
        return false;
	},

	/**
	 * Creates the right click menu.
	 * @param none
	 * @return - The HTML string for the right click menu.
	 */	
	create : function() {
		var html = '<table class="right-click-menu-table">'
		html += '<tr>';
		html += '<td class="right-click-menu-option" onclick="RightClickMenu.removeThisPatient()">'+ i18n.REMOVE_PATIENT +'</td>';
		html += '</tr>';
		if(Configuration.quickLinks && this.encounterId > 0) {
			for(var i = 0; i < Configuration.quickLinks.length; i++) {
				var quickLink = Configuration.quickLinks[i];
				html += '<tr>';
				html += '<td class="right-click-menu-option" onclick="RightClickMenu.launchLink(Configuration.quickLinks[' + i + '].link)">' + quickLink.name + '</td>';
				html += '</tr>';
			}
		}
		
		if(CareCompass.inDebugMode == true) {
			html += '<tr>';
			html += '<td class="right-click-menu-option" onclick="RightClickMenu.capturePatientData()">' + 'Copy IDs' + '</td>';
			html += '</tr>';	
		}
		
		html += '</table>';
		return html;
	},

	/**
	 * Returns true if this is currently displayed. False if not.
	 * @param none
	 */	
	isDisplayed : function() {
		if(this.container != null) {
			return true;
		}
		return false;
	},
	
	/**
	 * Removes the right click menu.
	 * @param none
	 */	
	remove : function() {
		if(RightClickMenu.container != null) {
			RightClickMenu.container.remove();
			RightClickMenu.container = null;
		}
	},
	
	/**
	 * Removes the patient that is selcted by this menu
	 * @param none
	 */	
	removeThisPatient: function() {
		if(PatientLists.getActive().modifiable == false) {
			return;
		}
		Patients.remove(this.patientId, this.encounterId);
		this.remove();
	},
	
	/**
	 * Launches the patient's chart to the input link
	 * @param link - The name of the PowerChart tab to launch to
	 */	
	launchLink: function(link) {
		Timers.start("USR:CareCompass.LinkLaunchChart");
		this.remove();
		var encounterId = this.encounterId;
		var param = '/PERSONID=' + this.patientId + ' /ENCNTRID=' + this.encounterId + ' /FIRSTTAB=^' + link + '^';
		try{
			window.external.PCActivatePatArrows(1,"PatientNavigation",true);
			Patients.setIndexByEncounterId(encounterId);
			window.originalPatientList = PatientLists.getActiveId();
		}
		catch(e){
			
		}
		Timers.stop("USR:CareCompass.LinkLaunchChart");
		APPLINK(0, User.appName, param);
	},
	
	capturePatientData: function() {
		this.remove();
		var patientInfoString = '';
		patientInfoString += 'Patient ID:\t';
		patientInfoString += this.patientId;
		patientInfoString += '\nEncounter ID:\t';
		patientInfoString += this.encounterId;
		CareCompass.setClipboardData(patientInfoString);
	}
}

/**
 * Represents the right click menu that is displayed over a task row.
 */	
var ActivityListRightClickMenu = {
	container : null,
	
	/**
	 * Displays the right click menu at the cursor position.
	 * @param cursor - The cursor that was used to right click.
	 */	
	display: function(cursor) {
		this.remove();
		Hover.hide();

		this.container = $(document.createElement('div'));
		this.container.addClass("right-click-menu");
		this.container.append(this.create());
		CareCompass.body.append(this.container);
		this.container.css("top", cursor.pageY);
		this.container.css("left", cursor.pageX);
		
		this.container.click(function(event) {
			event.stopPropagation();		
		});
		
		this.container.children()[0].rows[0].cells[0].disabled = $('#activityList-document').attr("disabled");
		this.container.children()[0].rows[1].cells[0].disabled = $('#activityList-done').attr("disabled");
		this.container.children()[0].rows[2].cells[0].disabled = $('#activityList-not-done').attr("disabled");
		this.container.children()[0].rows[3].cells[0].disabled = !ActivityListTab.printLabelEnabled;

		for(var i = 0; i < this.container.children()[0].rows.length; i++) {
			var option = $(this.container.children()[0].rows[i]);
			if(option[0].cells[0].disabled) {
				continue;
			}
			option.mouseover(function() {
				$(this).addClass("highlighted");
			});
			option.mouseleave(function() {
				$(this).removeClass("highlighted");
			});
		}
		
		Shadow.display(this.container);
	},
	
	/**
	 * Creates the right click menu.
	 * @param none
	 * @return - The HTML string for the right click menu.
	 */	
	create : function() {
		var html = '<table id="right-click-menu-table" class="right-click-menu-table">'
		html += '<tr>';
		html += '<td id="right-click-document" class="right-click-menu-option" onmouseup="ActivityListTab.chart()">'+ i18n.DOCUMENT +'</td>';
		html += '</tr>';
		html += '<tr>';
		html += '<td id="right-click-done" class="right-click-menu-option" onmouseup="ActivityListTab.chartDone()">'+ i18n.DONE +'</td>';
		html += '</tr>';
		html += '<tr>';
		html += '<td id="right-click-notdone" class="right-click-menu-option" onmouseup="ActivityListTab.chartNotDone()">'+ i18n.NOT_DONE +'</td>';
		html += '</tr>';
		html += '<tr>';
		html += '<td id="right-click-printlabels" class="right-click-menu-option" onmouseup="ActivityListTab.printLabels()">'+ i18n.PRINT_LABELS +'</td>';
		html += '</tr>';
		
		if(CareCompass.inDebugMode == true) {
			html += '<tr>';
			html += '<td class="right-click-menu-option" onmouseup="ActivityListRightClickMenu.captureTaskData()">' + 'Copy IDs' + '</td>';
			html += '</tr>';	
		}
		
		html += '</table>';
		return html;
	},

	/**
	 * Returns true if this is currently displayed. False if not.
	 * @param none
	 */	
	isDisplayed : function() {
		if(this.container != null) {
			return true;
		}
		return false;
	},
	
	/**
	 * Removes the right click menu.
	 * @param none
	 */	
	remove : function() {
		if(this.container != null) {
			this.container.remove();
			this.container = null;
		}
	},
	
	captureTaskData: function() {
		this.remove();
		var taskInfoString = '';
		for(var i=0; i<ActivityListTab.selectedTasks.length; i++) {
			var task = ActivityListTab.selectedTasks[i];
			taskInfoString += 'Task ID:\t';
			taskInfoString += task.id;
			taskInfoString += '\tEncounter ID:\t';
			taskInfoString += task.encounterId;
			taskInfoString += '\n';
		}
		
		CareCompass.setClipboardData(taskInfoString);
	}
}

/**
 * Represents the right click menu that is displayed over a task row on the PRN tab.
 */ 
var PrnListRightClickMenu = {
    container : null,
    
    /**
     * Displays the right click menu at the cursor position.
     * @param cursor - The cursor that was used to right click.
     */ 
    display: function(cursor) {
        this.remove();
        Hover.hide();

        this.container = $(document.createElement('div'));
        this.container.addClass("right-click-menu");
        this.container.append(this.create());
        CareCompass.body.append(this.container);
        this.container.css("top", cursor.pageY);
        this.container.css("left", cursor.pageX);
        
        this.container.click(function(event) {
            event.stopPropagation();        
        });
        
        this.container.children()[0].rows[0].cells[0].disabled = $('#activityList-prn-document').attr("disabled");
        this.container.children()[0].rows[1].cells[0].disabled = $('#activityList-prn-done').attr("disabled");
        this.container.children()[0].rows[2].cells[0].disabled = $('#activityList-prn-not-done').attr("disabled");
        this.container.children()[0].rows[3].cells[0].disabled = !PrnListTab.printLabelEnabled;

        for(var i = 0; i < this.container.children()[0].rows.length; i++) {
            var option = $(this.container.children()[0].rows[i]);
            if(option[0].cells[0].disabled) {
                continue;
            }
            option.mouseover(function() {
                $(this).addClass("highlighted");
            });
            option.mouseleave(function() {
                $(this).removeClass("highlighted");
            });
        }
        
        Shadow.display(this.container);
    },
    
    /**
     * Creates the right click menu.
     * @param none
     * @return - The HTML string for the right click menu.
     */ 
    create : function() {
        var html = '<table id="right-click-menu-table" class="right-click-menu-table">'
        html += '<tr>';
        html += '<td id="right-click-document" class="right-click-menu-option" onmouseup="PrnListTab.chart()">'+ i18n.DOCUMENT +'</td>';
        html += '</tr>';
        html += '<tr>';
        html += '<td id="right-click-done" class="right-click-menu-option" onmouseup="PrnListTab.chartDone()">'+ i18n.DONE +'</td>';
        html += '</tr>';
        html += '<tr>';
        html += '<td id="right-click-notdone" class="right-click-menu-option" onmouseup="PrnListTab.chartNotDone()">'+ i18n.NOT_DONE +'</td>';
        html += '</tr>';
        html += '<tr>';
        html += '<td id="right-click-printlabels" class="right-click-menu-option" onmouseup="PrnListTab.printLabels()">'+ i18n.PRINT_LABELS +'</td>';
        html += '</tr>';
        
        if(CareCompass.inDebugMode == true) {
            html += '<tr>';
            html += '<td class="right-click-menu-option" onmouseup="PrnListRightClickMenu.captureTaskData()">' + 'Copy IDs' + '</td>';
            html += '</tr>';    
        }
        
        html += '</table>';
        return html;
    },

    /**
     * Returns true if this is currently displayed. False if not.
     * @param none
     */ 
    isDisplayed : function() {
        if(this.container != null) {
            return true;
        }
        return false;
    },
    
    /**
     * Removes the right click menu.
     * @param none
     */ 
    remove : function() {
        if(this.container != null) {
            this.container.remove();
            this.container = null;
        }
    },
    
    captureTaskData: function() {
        this.remove();
        var taskInfoString = '';
        for(var i=0; i<PrnListTab.selectedTasks.length; i++) {
            var task = PrnListTab.selectedTasks[i];
            taskInfoString += 'Task ID:\t';
            taskInfoString += task.id;
            taskInfoString += '\tEncounter ID:\t';
            taskInfoString += task.encounterId;
            taskInfoString += '\n';
        }
        
        CareCompass.setClipboardData(taskInfoString);
    }
}

/**
 * The visual cell displaying the location of a patient
 */
function LocationCell(patient, number) {
	this.location = null;
	this.number = number;
	this.isolation = null;
	this.html = "";
	this.temporaryLocation = null;
	/**
	* Creates the cell
	* @param none
	* @return - The HTML string for this cell.
	*/	
	this.create = function(patient) {
		this.html += '<td class="patient-table-location" id="LocationCell' + number + '">';
		this.html += '<table class="location-table">';
		this.html += '<tr>';
		this.createIsolation(patient);
		this.createLocation(patient);
		this.html += '</tr>';
		this.html += '</table>';
		
		this.html += '<div class="temporary-location-table">';
		if(PatientLists.getActive().isDepartmental()){
			this.html += '<div class="temporary-location unit truncate" style="width:' + (Columns.location.width - 10) + 'px">' + patient.getTemporaryLocation() + '</div>'
		}else{
			this.html += '<div class="temporary-location truncate" style="width:' + (Columns.location.width - 10) + 'px">' + patient.getTemporaryLocation() + '</div>'
		}
		
		this.html += '</div>';
		this.html += '</td>'
		return this.html;
	}
	
	/**
	* Creates the Isolation icon display
	* @param none
	*/	
	this.createIsolation = function createLocationCellIsolation(patient) {
		if(patient.hasIsolation() == false) {
			this.html += '<td class="isolation"></td>';
			return;
		}
		this.html += '<td class="isolation value"></td>';
	}
	
	/**
	* Creates the location display
	* @param none
	*/	
	this.createLocation = function createLocationCellLocation(patient) {
		this.html += '<td style="border:0px"><div class="patient-location truncate" style="width:' + (Columns.location.width - 30) + 'px"> ' + patient.location + '</div></td>';
	}
	
	/**
	 * Sets the cell object on this location cell
	 * @param cell - The visual object representing the location cell
	 */	
	this.setCell = function(cell, patient) {
		this.location = $(cell.children()[0].rows[0].cells[1]).children();
		Hover.displayForTruncation(this.location);
		this.isolation = $(cell.children()[0].rows[0].cells[0]);
		this.temporaryLocation = $(cell.children()[1]);
		Hover.displayForTruncation(this.temporaryLocation);
		this.createIsolationHover(patient);
	}
	
	/**
	 * Populates the patient's location
	 * @param none
	 */	
	this.createIsolationHover = function(patient) {
		if(patient.hasIsolation() == false) {
			return;
		}
		var content = this.createHoverContent(patient.getIsolations());
		var config = {    
			 over: function(e) {Hover.display(e, i18n.ISOLATION, content)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		this.isolation.hoverIntent(config);
	}
	
	/**
	 * Populates the location display with the patient's location
	 * @param isolations - The array of isolation displays.
	 */	
	this.createHoverContent = function(isolations) {
		var html = "";
		if (isolations != null) {
			html = isolations.getHoverDisplay();
		}
		return html;
	}
}

/**
 * Represents a shadow display around a box.
 */	
var Shadow =  {
	container: null,
	shadowRight: null,
	shadowRightTop: null,
	shadowRightBottom: null,
	shadowLeft: null,
	shadowLeftTop: null,
	shadowLeftBottom: null,
	shadowBottomLeft: null,
	shadowCornerBottomLeft: null,
	shadowBottom: null,
	shadowBottomRight: null,
	shadowCornerBottomRight: null,
	
	/**
	 * Displays the shadow around the input parent div.
	 * @param parent - The parent div object to display the shadow around.
	 */	
	display: function(parent) {
		this.create(parent);
		this.size();
	},
	
	/**
	 * Creates the shadow around the parent.
	 * @param parent - The parent div object to create the shadow around.
	 */	
	create: function(parent) {
		this.container = parent;
		var html = "";
		var shadowChildSequence = this.container.children().length;
		html += '<div class="shadow-right"></div>';
		html += '<div class="shadow-right-top"></div>';
		html += '<div class="shadow-right-bottom"></div>';
		html += '<div class="shadow-left"></div>';
		html += '<div class="shadow-left-top"></div>';
		html += '<div class="shadow-left-bottom"></div>';
		html += '<div class="shadow-bottom-left"></div>';
		html += '<div class="shadow-corner-bottom-left"></div>';
		html += '<div class="shadow-bottom"></div>';
		html += '<div class="shadow-bottom-right"></div>';
		html += '<div class="shadow-corner-bottom-right"></div>';
		this.container.append(html);
		this.shadowRight = $(this.container.children()[shadowChildSequence++]);
		this.shadowRightTop = $(this.container.children()[shadowChildSequence++]);
		this.shadowRightBottom = $(this.container.children()[shadowChildSequence++]);
		this.shadowLeft = $(this.container.children()[shadowChildSequence++]);
		this.shadowLeftTop = $(this.container.children()[shadowChildSequence++]);
		this.shadowLeftBottom = $(this.container.children()[shadowChildSequence++]);
		this.shadowBottomLeft = $(this.container.children()[shadowChildSequence++]);
		this.shadowCornerBottomLeft = $(this.container.children()[shadowChildSequence++]);
		this.shadowBottom = $(this.container.children()[shadowChildSequence++]);
		this.shadowBottomRight = $(this.container.children()[shadowChildSequence++]);
		this.shadowCornerBottomRight = $(this.container.children()[shadowChildSequence++]);
	},
	
	/**
	 * Removes the shadow around the parent.
	 * @param parent - The parent div object to create the shadow around.
	 */	
	remove: function(parent) {
		this.container = parent;
		this.shadowRight.remove();
		this.shadowRightTop.remove();
		this.shadowRightBottom.remove();
		this.shadowLeft.remove();
		this.shadowLeftTop.remove();
		this.shadowLeftBottom.remove();
		this.shadowBottomLeft.remove();
		this.shadowCornerBottomLeft.remove();
		this.shadowBottom.remove();
		this.shadowBottomRight.remove();
		this.shadowCornerBottomRight.remove();
	},
	
	/**
	 * Sizes the shadow around the parent.
	 * @param none
	 */	
	size: function() {
		this.shadowRight.css("height", this.container.height() - 12);
		this.shadowRight.css("left", this.container.width() + 1);
		this.shadowRightTop.css("left", this.container.width() + 1);
		this.shadowRightBottom.css("left", this.container.width() + 1);
		this.shadowRightBottom.css("top", this.container.height() - 6);
		this.shadowLeft.css("height", this.container.height() - 12);
		this.shadowLeftBottom.css("top", this.container.height() - 6);
		this.shadowBottomLeft.css("top", this.container.height() + 1);
		this.shadowCornerBottomLeft.css("top", this.container.height() + 1);
		this.shadowBottom.css("width", this.container.width() - 12);
		this.shadowBottom.css("top", this.container.height() + 1);
		this.shadowBottomRight.css("left", this.container.width() - 6);
		this.shadowBottomRight.css("top", this.container.height() + 1);
		this.shadowCornerBottomRight.css("left", this.container.width() + 1);
		this.shadowCornerBottomRight.css("top", this.container.height() + 1);
	}
};

/**
 * The visual cell displaying the patient information
 */
function PatientCell(number) {
	this.cell = null;
	this.number = number;
	this.name = null;
	this.age = null;
	this.gender = null;
	this.resuscitation = null;
	this.allergies = null;
	this.diet = null;
	this.highRisks = null;
	this.sensitive = null;
	this.newIndicator = null;
	this.demographicsRowOne = null;
	this.demographicsRowTwo = null;
	this.html = "";
	
	/**
	 * Creates the patient cell
	 * @param none
	 * @return The HTML string representing patient column cell.
	 */	
	this.create = function(patient) {
		this.html += '<td class="patient-table-patient" id="PatientCell' + number + '">';
        this.html += '<div style="position: relative;">';
		this.html += '<table>';
		this.html += '<tr>';
		this.html += '<td style="border:0px;">';	
		this.html += '<table style="padding:0px; margin:0px; border:0px;">';
		this.html += '<tr>'; 	 
		this.createHighRisks(patient);
 		this.html += '</tr>';
		this.html += '<tr>'; 	 
		this.createSensitiveFlag(patient);
		this.html += '</tr>';
		this.html += '</table>';

		this.html += '</td>';
		this.html += '<td class="patient-table-cell">';
		this.html += '<table class="name-table">';
		this.html += '<tr>';
		this.createNewIndicator(patient);
		this.createPatientName(patient);
		if(patient.isUnderObservation() != ""){
			this.html += '<td style="border:0px"  id="OBS' + number + '"><div class="patient-observation truncate">' + patient.isUnderObservation() + '</div></td>';
		}
		this.createNHS(patient);
		this.html += '</tr>';
		this.html += '</table>';
		
               
		this.createDemographics(patient);
		this.html += '</td>';
		this.html += '</tr>';
		this.html += '</table>';
        if(this.newIndicator != null) {
            this.html += this.newIndicator.create();
        }
		this.html += "</div>";
		this.html += '</td>';
		return this.html;
	}
	 
	/**
	 * Constructs the space reserved for a sensitive flag icon, whether or not it will appear.
	 */
	this.createSensitiveFlag = function createPatientCellSensitiveFlag(patient) {
		if((patient.vip != "" && Configuration.VIPIndicator) || (patient.confidentiality != "" && Configuration.confidentialityIndicator)) {
			this.html += '<td style="border:0px"> <div id="sensitiveIndicator' + number + '" style="top:6px;left:6px;z-index:10;" class="sensitive value"></div></td>';
		} 
		else {
			this.html += '<td style="border:0px"> <div id="sensitiveIndicator' + number + '" style="top:6px;left:6px;z-index:10;" class="sensitive "></div></td>';
		}				
	}
	
	/**
	 * Constructs the space reserved for a high-risks icon, whether or not it will appear.
	 * @param patient - the patient whose row is being constructed
	 */
	this.createHighRisks = function createPatientCellHighRisks(patient) {
		
 		if(patient.hasHighRisk() == true) {
			this.html += '<td style="border:0px"><div id="highRiskIndicator' + number + '" style="top:6px;left:6px;z-index:10;" class="high-risks value"></div></td>';
		}
 	}
	
	this.createPatientName = function createPatientCellPatientName(patient) {
		if(patient.hasRelationship() && patient.encounterId > 0) {
			this.html += '<td style="border:0px"><div class="patient-name link truncate"  style="' + this.getPatientNameWidth(patient) + '">' + patient.getName() + '</div></td>';
		}
		else {
			this.html += '<td style="border:0px"><div class="patient-name-no-relationship truncate"  style="' + this.getPatientNameWidth(patient) + '">' + patient.getName() + '</div></td>';
		}
	}

	this.createNHS = function createPatientCellNHS(patient){
		if(User.localeId == "EN_GB"){
			this.html += '<td style="border:0px"  id="NHS' + number + '"><div class="patient-observation truncate">' + patient.nhs + '</div></td>';
		}
	}
	
	this.createDemographics = function createPatientCellDemographics(patient) {
		this.html += '<table class="demographics-table">';
		this.html += '<tr>';
		this.createAge(patient);
		this.createSeperator();
		this.createGender(patient);

        if(Configuration.resuscitationStatusIndicator){
			this.createSeperator();
        }
           
        this.createResuscitationStatus(patient);
                 
		if(PatientLists.getActive().isDepartmental() == false) {
			this.html += '</tr>';
			this.html += '</table>';
			this.html += '<table class="demographics-table">';
		}
		else {
			this.createSeperator();
		}
		if(patient.encounterId == 0) {
			this.createNoEncounter(patient);
		}
		else if(patient.hasRelationship() == false) {
			this.createNoRelationship(patient);
		}
		else {
			this.createAllergies(patient);
			if(PatientLists.getActive().isDepartmental() == false) {
	            if( Configuration.dietIndicator){
	                this.createSeperator();
	            }
	            this.createDiet(patient);
			}
		}
		this.html += '</tr>';
		this.html += '</table>';
	}
	
	this.createSeperator = function createPatientCellSeperator() {
		this.html += '<td class="seperator">|</td>';
	}

	this.createAge = function createPatientCellAge(patient) {
		this.html += '<td style="border:0px"><div class="age truncate" style="width:' + this.determineAgeWidth(patient) + 'px;">' + patient.getAgeDisplay() + '</div></td>';
	}
	
	this.createGender = function createPatientCellGender(patient) {					
		this.html += '<td style="border:0px"><div class="gender truncate" style="width:' + this.determineGenderWidth(patient) + 'px;">' + patient.getGender() + '</div></td>';
	}
	
	this.createResuscitationStatus = function createPatientCellResuscitationStatus(patient) {					
		this.html += '<td style="border:0px"><div class="resuscitation truncate" style="width:' + this.determineResuscitationWidth(patient) + 'px;">' ;
                if(Configuration.resuscitationStatusIndicator){
                    this.html += patient.getResuscitationStatusFaceUpDisplay() ;
                }
                this.html += '</div></td>';
          }
	
	this.createAllergies = function createPatientCellAllergies(patient) {					
		if(patient.noAllergiesRecorded()) {
			this.html += '<td style="border:0px"><div class="allergies truncate" style="width:' + this.determineAllergiesWidth(patient) + 'px;">' + patient.getAllergiesDisplay() + '</div></td>';
		}
		else if(patient.isAllAllergiesHidden()) {
 	        this.html += '<td style="border:0px"><div class="allergies-value truncate" style="width:' + this.determineAllergiesWidth(patient) + 'px;">' + patient.getAllergiesDisplay() + '</div></td>';
 	    }
		else {
			this.html += '<td style="border:0px"><div class="allergies-value truncate" style="width:' + this.determineAllergiesWidth(patient) + 'px;">' + patient.getAllergiesDisplay() + '</div></td>';
		}
	}
	
	this.createNoRelationship = function createPatientCellNoRelationship(patient) {
		if(Configuration.selfDeclareRelationship == true){
			this.html += '<td style="border:0px"><div class="no-relationship-link truncate" style="width:' + this.determineAllergiesWidth(patient) + 'px;">' + i18n.NO_RELATIONSHIPS_EXISTS + '</div></td>';
		}else{
			this.html += '<td style="border:0px"><div class="truncate" style="padding-top: 4px; width:' + this.determineAllergiesWidth(patient) + 'px;">' + i18n.NO_RELATIONSHIPS_EXISTS + '</div></td>';
		}
	}
	
	this.createNoEncounter = function createPatientCellNoEncounter(patient) {
		this.html += '<td style="border:0px"><div class="allergies-value truncate" style="width:' + this.determineAllergiesWidth(patient) + 'px;">' + i18n.NO_ENCOUNTER_EXISTS + '</div></td>';
	}
	
	this.createDiet = function createPatientCellDiet(patient) {					
		this.html += '<td style="border:0px"><div class="diet truncate" style="width:' + this.determineDietWidth(patient) + 'px;">' ;
                if(  Configuration.dietIndicator){
              		this.html += patient.getDietFaceUpDisplay() ;
                }              
                this.html += '</div></td>';
	}
	
	this.getTotalWidth = function() {
		var totalWidth = Columns.patient.width - 60;
		if(this.newIndicator != null) {
			totalWidth -= 30;
		}
		return totalWidth;
	}
	
	this.getPatientNameWidth = function(patient) {
		var totalWidth = this.getTotalWidth();
		var patientNameWidth = patient.getName().length * 8;
		if(patient.vip != "") {
			totalWidth -= 10;
		}
		if(patient.observation == true) {
			totalWidth -= 30;
		}
		if(User.localeId == "EN_GB" && patient.nhs != "") { // patient.nhs may change to != ""
			totalWidth -= 100;
		}
		if(patientNameWidth < totalWidth) {
			return "width:" + patientNameWidth + "px; display:inline;";
		}
		else {
			return "width:" + totalWidth + "px;";
		}
	}
	
	/**
	 * Determines the width of the age display based on the width of the patient cell.  Used for truncation.
	 * @param none
	 */	
	this.determineAgeWidth = function(patient) {
		var totalWidth = this.getTotalWidth();
		var availableWidth = 0;
		var ageWidth = this.determineDisplayWidth(patient.getAgeDisplay());
		var genderWidth = this.determineDisplayWidth(patient.getGender());
		var resuscitationWidth = this.determineDisplayWidth(patient.getResuscitationStatusFaceUpDisplay());
		var allergiesWidth = this.determineDisplayWidth(patient.getAllergiesDisplay());
		if(PatientLists.getActive().isDepartmental()) {
			var count = 4;
			availableWidth = Math.round(totalWidth/count);
			if(ageWidth < availableWidth) {
				return -1;
			}
			totalWidth -= 36;
			if(genderWidth < availableWidth) {
				totalWidth -= genderWidth;
				count--;
			}
			if(resuscitationWidth < availableWidth) {
				totalWidth -= resuscitationWidth;
				count--;
			}
			if(allergiesWidth < availableWidth) {
				totalWidth -= allergiesWidth;
				count--;
			}
			return Math.round(totalWidth/count);
		}
		else {
			var count = 3;
			availableWidth = Math.round(totalWidth/count);
			if(ageWidth < availableWidth) {
				return -1;
			}
			totalWidth -= 24;
			if(genderWidth < availableWidth) {
				totalWidth -= genderWidth;
				count--;
			}
			if(resuscitationWidth < availableWidth) {
				totalWidth -= resuscitationWidth;
				count--;
			}
			return Math.round(totalWidth/count);
		}
	}
	
	/**
	 * Determines the width of the gender display based on the width of the patient cell.  Used for truncation.
	 * @param none
	 */	
	this.determineGenderWidth = function(patient) {
		var totalWidth = this.getTotalWidth();
		var availableWidth = 0;
		var ageWidth = this.determineDisplayWidth(patient.getAgeDisplay());
		var genderWidth = this.determineDisplayWidth(patient.getGender());
		var resuscitationWidth = this.determineDisplayWidth(patient.getResuscitationStatusFaceUpDisplay());
		var allergiesWidth = this.determineDisplayWidth(patient.getAllergiesDisplay());
		if(PatientLists.getActive().isDepartmental()) {
			var count = 4;
			availableWidth = Math.round(totalWidth/count);
			if(genderWidth < availableWidth) {
				return -1;
			}
			totalWidth -= 36;
			if(ageWidth < availableWidth) {
				totalWidth -= ageWidth;
				count--;
			}
			if(resuscitationWidth < availableWidth) {
				totalWidth -= resuscitationWidth;
				count--;
			}
			if(allergiesWidth < availableWidth) {
				totalWidth -= allergiesWidth;
				count--;
			}
			return Math.round(totalWidth/count);
		}
		else {
			var count = 3;
			availableWidth = Math.round(totalWidth/count);
			if(genderWidth < availableWidth) {
				return -1;
			}
			totalWidth -= 24;
			if(ageWidth < availableWidth) {
				totalWidth -= ageWidth;
				count--;
			}
			if(resuscitationWidth < availableWidth) {
				totalWidth -= resuscitationWidth;
				count--;
			}
			return Math.round(totalWidth/count);
		}
	}
	
	/**
	 * Determines the width of the resuscitation display based on the width of the patient cell.  Used for truncation.
	 * @param none
	 */	
	this.determineResuscitationWidth = function(patient) {
		var totalWidth = this.getTotalWidth();
		var availableWidth = 0;
		var ageWidth = this.determineDisplayWidth(patient.getAgeDisplay());
		var genderWidth = this.determineDisplayWidth(patient.getGender());
		var resuscitationWidth = this.determineDisplayWidth(patient.getResuscitationStatusFaceUpDisplay());
		var allergiesWidth = this.determineDisplayWidth(patient.getAllergiesDisplay());
		if(PatientLists.getActive().isDepartmental()) {
			var count = 4;
			availableWidth = Math.round(totalWidth/count);
			if(resuscitationWidth < availableWidth) {
				return -1;
			}
			totalWidth -= 36;
			if(ageWidth < availableWidth) {
				totalWidth -= ageWidth;
				count--;
			}
			if(genderWidth < availableWidth) {
				totalWidth -= genderWidth;
				count--;
			}
			if(allergiesWidth < availableWidth) {
				totalWidth -= allergiesWidth;
				count--;
			}
			if(resuscitationWidth < (totalWidth/count)) {
				return -1;
			}
			return Math.round(totalWidth/count);
		}
		else {
			var count = 3;
			availableWidth = Math.round(totalWidth/count);
			if(resuscitationWidth < availableWidth) {
				return -1;
			}
			totalWidth -= 24;
			if(ageWidth < availableWidth) {
				totalWidth -= ageWidth;
				count--;
			}
			if(genderWidth < availableWidth) {
				totalWidth -= genderWidth;
				count--;
			}
			if(resuscitationWidth < (totalWidth/count)) {
				return -1;
			}
			return Math.round(totalWidth/count);
		}
	}
	
	/**
	 * Determines the width of the allergies display based on the width of the patient cell.  Used for truncation.
	 * @param none
	 */	
	this.determineAllergiesWidth = function(patient) {
		var totalWidth = this.getTotalWidth();
		var availableWidth = 0;
		var ageWidth = this.determineDisplayWidth(patient.getAgeDisplay());
		var genderWidth = this.determineDisplayWidth(patient.getGender());
		var resuscitationWidth = this.determineDisplayWidth(patient.getResuscitationStatusFaceUpDisplay());
		var allergiesWidth = this.determineDisplayWidth(patient.getAllergiesDisplay());
		var dietWidth = this.determineDisplayWidth(patient.getDietFaceUpDisplay());
		if(PatientLists.getActive().isDepartmental()) {
			var count = 4;
			availableWidth = Math.round(totalWidth/count);
			if(allergiesWidth < availableWidth) {
				return -1;
			}
			totalWidth -= 36;
			if(ageWidth < availableWidth) {
				totalWidth -= ageWidth;
				count--;
			}
			if(genderWidth < availableWidth) {
				totalWidth -= genderWidth;
				count--;
			}
			if(resuscitationWidth < availableWidth) {
				totalWidth -= resuscitationWidth;
				count--;
			}
			if(allergiesWidth < (totalWidth/count)) {
				return -1;
			}
			return Math.round(totalWidth/count);
		}
		else {
			var count = 2;
			availableWidth = Math.round(totalWidth/count);
			if(allergiesWidth < availableWidth) {
				return -1;
			}
			totalWidth -= 12;
			if(dietWidth < availableWidth) {
				totalWidth -= dietWidth;
				count--;
			}
			if(allergiesWidth < (totalWidth/count)) {
				return -1;
			}
			return Math.round(totalWidth/count);
		}
	}
	
	/**
	 * Determines the width of the allergies display based on the width of the patient cell.  Used for truncation.
	 * @param none
	 */	
	this.determineDietWidth = function(patient) {
		var totalWidth = this.getTotalWidth();
		var availableWidth = 0;
		var allergiesWidth = this.determineDisplayWidth(patient.getAllergiesDisplay());
		var dietWidth = this.determineDisplayWidth(patient.getDietFaceUpDisplay());
		var count = 2;
		availableWidth = Math.round(totalWidth/count);
		if(dietWidth < availableWidth) {
			return -1;
		}
		if(allergiesWidth > this.determineDisplayWidth(i18n.ALLERGIES) ){
			totalWidth -= 25;
		}
		if(allergiesWidth < availableWidth) {
			totalWidth -= allergiesWidth;
			count--;
		}
		return Math.round(totalWidth/count);
	}
	
	/**
	 * Determines the width of the input display string in pixels.
	 * @param display - The string to determine the width for.
	 */	
	this.determineDisplayWidth = function(display) {
		var displayWidth = 0;
		if(display == '--') {
			displayWidth = 9;
		}
		else {
			if(display) {
				displayWidth = (display.length * 6);
			}
		}
		return displayWidth;
	}
	
	/**
	 * Sets the cell object on this patient cell
	 * @param cell - The visual object representing the patient cell
	 */	
	this.setCell = function(cell, patient) {
		this.cell = cell;
	
//        CareCompass.setClipboardData( cell.html( ) );
//
        var iconTableCell = $($(cell.children()[0]).children()[0].rows[0].cells[0]);
		this.highRisks =  $(iconTableCell.children()[0].rows[0]);
		this.sensitive =  $(iconTableCell.children()[0].rows[1]);

        var infoTableCell = $($(cell.children()[0]).children()[0].rows[0].cells[1]);
		this.name = $(infoTableCell.children()[0].rows[0].cells[0]);
		if(patient.vip != "" && patient.observation !=true){
			this.vip = $(infoTableCell.children()[0].rows[0].cells[1]);
		}
		else {
			this.vip = $(infoTableCell.children()[0].rows[0].cells[2]);
		}
		this.age = $(infoTableCell.children()[1].rows[0].cells[0]);
		this.gender = $(infoTableCell.children()[1].rows[0].cells[2]);
		this.resuscitation = $(infoTableCell.children()[1].rows[0].cells[4]);
		this.demographicsRowOne = $(infoTableCell.children()[1]);
		if(PatientLists.getActive().isDepartmental()) {
			if(Configuration.resuscitationStatusIndicator) {
				this.allergies = $(infoTableCell.children()[1].rows[0].cells[6]); // come back
			}
			else {
				this.allergies = $(infoTableCell.children()[1].rows[0].cells[5]); // come back
			}
		}
		else {
			this.demographicsRowTwo = $(infoTableCell.children()[2]);
			this.allergies = $(infoTableCell.children()[2].rows[0].cells[0]);
			this.diet = $(infoTableCell.children()[2].rows[0].cells[2]);
		}
		if(patient.encounterId == 0) {
			return;
		}
		this.createDemographicsHover(patient);
		if(Configuration.defaultTab != "" && patient.hasRelationship() == true){
			this.createNameLink(patient);
		}
		else{
			this.name.children().removeClass("link");
		}
		if(patient.hasRelationship() == false) {
			this.createNoRelationshipLink(patient);
		}
		else {			
			if(patient.noAllergiesRecorded()) {
				this.createNoAllergiesLink(patient);
			}
		   else if(patient.isAllAllergiesHidden() == true) {
				var html = '<table class="hover-table">';
				html += '<tr><td class="allergies-hidden-all">' + i18n.HIDDEN_ALLERGIES_MSG_ALL + '</td>';
				html += '</table>';
				var config = {    
				over: function(e) {Hover.display(e, i18n.ALLERGIES, html)},
				timeout: 200,
				out: function(e) {Hover.hide();},
				interval: 200
				};
				this.allergies.hoverIntent(config);
			}
			else if(patient.noKnownAllergies() == false) {
				this.createAllergiesHover(patient);
			}
		}
		this.createHighRisksHover(patient);
		if(Configuration.VIPIndicator|| Configuration.confidentialityIndicator) {
			this.createSensitiveFlagHover(patient);
		}
		if(this.newIndicator != null) {
	        var newIndicatorCell =  $($(cell.children()[0]).children()[1]);
//	        CareCompass.setClipboardData( $($(cell.children()[0]).children()[1]).html( ) );

			this.newIndicator.map(newIndicatorCell);
		}
	},
	
	this.createDemographicsHover = function(patient) {
		var content = this.createHoverContent(patient);
		var name = patient.getName();
		var demographicsHover = {    
			 over: function(e) {Hover.display(e, name, content)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		this.name.hoverIntent(demographicsHover);
		this.age.hoverIntent(demographicsHover)
		this.gender.hoverIntent(demographicsHover)
        if( this.resuscitation != null && Configuration.resuscitationStatusIndicator){
			var resuscitationContent = this.createResuscitationStatusHoverContent(patient.getResuscitationStatus());
			if (resuscitationContent != null) {
				var resuscitationHover = {    
					over: function(e) {Hover.display(e, i18n.RESUSCITATION_STATUS, resuscitationContent)},
					timeout: 200,
					out: function(e) {Hover.hide();},
					interval: 200
				};
				this.resuscitation.hoverIntent(resuscitationHover);
			}
        }
		if(this.diet != null && Configuration.dietIndicator) {
			var dietContent = this.createDietHoverContent(patient.getDiets());
			if (dietContent != null) {
				var dietHover = {    
					over: function(e) {Hover.display(e, i18n.DIET, dietContent)},
					timeout: 200,
					out: function(e) {Hover.hide();},
					interval: 200
				};
				this.diet.hoverIntent(dietHover);
			}
			
		}
	}
	this.createNoRelationshipLink = function(patient) {
		this.allergies.click(function() {
			if(Configuration.selfDeclareRelationship == true){
				RelationshipDialog.display(patient);
			}
		});
		this.name.addClass("no-relationship-name");
	}
	
	this.createNameLink = function(patient) {
			this.name.mouseup(function() {
				LinkNavigation.display(patient, Configuration.defaultTab);
			});		
	}
	
	this.createNoAllergiesLink = function(patient) {
		var allergiesHover = this.allergies;
		this.allergies.mouseover(function() {
			$(this).addClass("allergies-link-hover");
		});
		this.allergies.mouseleave(function() {
			$(this).removeClass("allergies-link-hover");
		});
		var patientId = patient.patientId;
		var encounterId = patient.encounterId;
		this.allergies.click(function() {
			Overlay.display(CareCompass.body);
			if(PatientDrillDown.patient != null && PatientDrillDown.patient.patientId != patientId) {
				PatientDrillDown.remove();
			}
			AllergiesDialog.display(patientId, encounterId);
		});
	}
	
	this.createAllergiesHover = function(patient) {
		var allergies = Allergies.getByPatientId(patient.patientId);
		var content = this.createAllergyHoverContent(allergies,patient);
		var config = {    
			 over: function(e) {Hover.display(e, "", content)},
			 timeout: 500,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		this.allergies.hoverIntent(config);
	}
	
	/**
	 * Creates the hover for a patient with a high risk
	 * @param patient - patient with high risk
	 */
	this.createHighRisksHover = function(patient) {
		if(patient.hasHighRisk() == true) {
			var highRisks = patient.getHighRisks();
			var content = this.createHighRisksHoverContent(highRisks);
			var config = {    
				 over: function(e) {Hover.display(e, i18n.HIGH_RISKS, content);},
				 timeout: 200,
				 out: function(e) {Hover.hide();},
				 interval: 200
			};
			this.highRisks.hoverIntent(config);
		}
	}
	
	/**
	 * Creates the hover for the patient row sensitive flag icon.
	 * @param patient - the patient who has VIP or Confidentiality levels
	 */
	this.createSensitiveFlagHover = function createPatientCellSensitiveFlagHover(patient) {
		var hoverText = "";
		if(Configuration.VIPIndicator && patient.vip != "")  {
			hoverText = patient.vip + "<br>";
		}
		if(Configuration.confidentialityIndicator && patient.confidentiality != "")  {
			hoverText += patient.confidentiality;
		}
		if(hoverText != "") {
			var content = this.createSensitiveFlagHoverContent(hoverText);
			var config = {
				over: function(e) {Hover.display(e, '', content)},
				timeout: 200,
				out: function(e) {Hover.hide();},
				interval: 200
			};
			this.sensitive.hoverIntent(config);	
		}
	}
		
	/**
	 * Creates the content for the hover over the patient name.
	 * @param none
	 * @return The HTML string representing the content to display in the patient name hover.
	 */	
	this.createHoverContent = function(patient) {
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.AGE + '</td>';
		html += '<td class="hover-table">' + patient.getAgeDisplay(new Boolean("true")) + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.DOB + '</td>';
		html += '<td class="hover-table">' + patient.getBirthDateDisplay() + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.SEX + '</td>';
		html += '<td class="hover-table">' + patient.getGender() + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.MRN + '</td>';
		html += '<td class="hover-table">' + patient.mrn + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.FIN + '</td>';
		html += '<td class="hover-table">' + patient.fin + '</td></tr>';
        
        html += '<tr  '+  PatientDrillDown.getFieldDisplay(Configuration.dietIndicator)+'><td class="hover-table-label">' + i18n.DIET + '</td>';
        html += '<td class="hover-table">' + patient.getDietFaceUpDisplay() + '</td></tr>';
        
         
        html += '<tr  '+  PatientDrillDown.getFieldDisplay(Configuration.resuscitationStatusIndicator)+'><td class="hover-table-label">' + i18n.RESUSCITATION_STATUS + '</td>';
        html += '<td class="hover-table">' ;
        if(Configuration.resuscitationStatusIndicator){
       		 html += this.resuscitation[0]['innerText'] ;
    	}
        html += '</td></tr>';
       
		html += '</table>';
		return html;
	};
	
	this.createDietHoverContent = function(diets) {
		if (diets == null) {
			return null;
		}
		var html = '<table class="hover-table">';
		for (var i = 0; i < diets.length; i++) {
			html += '<tr><td class="hover-table-label">' + i18n.DISPLAY + ": "   + '</td><td class="hover-table">' + diets[i].getDisplays() + '</td></tr>';
			html += '<tr><td class="hover-table-label">' + i18n.DETAILS + ": "  + '</td><td class="hover-table">' + diets[i].getClinicalDisplayLine() + '</td></tr>';
			html += '<tr><td class="hover-table-label">' + i18n.DATE_TIME + ": "  + '</td><td class="hover-table">' + diets[i].getCurrentStartDateTime() + '</td></tr>';
			if (diets[i].getOrderComment() != "--") {
				html += '<tr><td class="hover-table-label">' + i18n.COMMENT + ": " + '</td><td class="hover-table">' + diets[i].getOrderComment() + '</td></tr>';
			}
			if (i < diets.length - 1) {
				html += '<tr><td class="hover-table-label"> <br /></td></tr>';
			}
		}
		html += '</table>';
		return html;
	}
	
	this.createResuscitationStatusHoverContent = function(resuscitationStatus) {
		if (resuscitationStatus == null) {
			return null;
		}
		var html = '<table class="hover-table">';
		for (var i = 0; i < resuscitationStatus.length; i++) {
			html += '<tr><td class="hover-table-label">' + i18n.DISPLAY + ": "   + '</td><td class="hover-table">' + resuscitationStatus[i].getDisplays() + '</td></tr>';
			html += '<tr><td class="hover-table-label">' + i18n.DETAILS + ": "  + '</td><td class="hover-table">' + resuscitationStatus[i].getClinicalDisplayLine() + '</td></tr>';
			html += '<tr><td class="hover-table-label">' + i18n.DATE_TIME + ": "   + '</td><td class="hover-table">' + resuscitationStatus[i].getCurrentStartDateTime() + '</td></tr>';
			if (resuscitationStatus[i].getOrderComment() != "--") {
				html += '<tr><td class="hover-table-label">' + i18n.COMMENT + ": " + '</td><td class="hover-table">' + resuscitationStatus[i].getOrderComment() + '</td></tr>';
			}
			if (i < resuscitationStatus.length - 1) {
				html += '<tr><td class="hover-table-label"> <br /></td></tr>';
			}
		}
		html += '</table>';
		return html;
	}
	
	/**
	 * Creates the high risk hover content.
	 * @param highRisks - A sorted array of high risks.
	 */	
	this.createHighRisksHoverContent = function(highRisks) {
		var html = "";
		if (highRisks != null) {
			html = highRisks.getHoverDisplay();
		}
		return html;
	}
	
	this.createSensitiveFlagHoverContent = function(hoverText) {
		var html = '<table class="hover-table-unlabeled">';
		html += '<tr><td class="hover-table-unlabeled">' + hoverText + '</td></tr>';
		html += '</table>';
		return html;
	}
	
	/**
	 * Populates the indicator in the patient cell if there are new orders or results for the user to review.
	 * @param none
	 */	
	this.createNewIndicator = function(patient) {
		var results = NewResults.getByEncounterId(patient.encounterId);
		var orders = NewOrders.getByEncounterId(patient.encounterId);
		if(results == null && orders == null) {
			return "";
		}
		var urgent = false;
		if(results != null) {
			for(var i = 0; i < results.length; i++) {
				if(results[i].isCritical() == true) {
					urgent = true;
					break;
				}
			}
		}
		if(urgent == false && orders != null) {
			for(var i = 0; i < orders.length; i++) {
				if(orders[i].stat == true) {
					urgent = true;
					break;
				}
			}
		}
		this.newIndicator = new NewIndicator(patient.encounterId, urgent);
	}
	
	/**
	 * Populates the  location display with the patient's location
	 * @param allergies - The array of allergy objects to display in the hover.
	 * @return The HTML string representing the allergy hover content.
	 */	
	this.createAllergyHoverContent = function(allergies,patient) {
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-label">' + i18n.ALLERGY + '</td>';
		html += '<td class="hover-label">' + i18n.REACTION + '</td>';
		html += '<td class="hover-label">' + i18n.SEVERITY + '</td></tr>';
		for(var i = 0; i < allergies.length; i++) {
			if(allergies[i].hidden == true) {
				continue;
			}	
			var allergy = allergies[i];
			var severe = "";
			if(allergy.severe == true) {
				severe = "-severe";
			}
			html += '<tr><td class="hover-table' + severe + '">' + allergy.display; + '</td>';
			html += '<td class="hover-table' + severe + '">' + allergy.getReactionDisplay() + '</td>';
			html += '<td class="hover-table' + severe + '">' + allergy.severity + '</td></tr>';		
		}
		if(allergies.length > 1 && allergies[0].hidden == true) {
			html += '<tr><td class="allergies-hidden-some">' + i18n.HIDDEN_ALLERGIES_MSG_SOME + '</td>';
 	    } 
		html += '</table>';
		return html;
	},
	
	/**
	 * Resizes the content of the patient cell based on the width of the column
	 * @param none
	 */	
	this.size = function() {
		var availableWidth = Columns.patient.width;
		if(PatientLists.getActive().isDepartmental() == false) {
			if(this.newIndicator!= null) {	
				availableWidth -= 120;
			}
			else {
				availableWidth -= 90;
			}

			var ageWidth = this.age.children()[0].scrollWidth;
			var genderWidth = this.gender.children()[0].scrollWidth;
			var resuscitationWidth = this.resuscitation.children()[0].scrollWidth;
			if(ageWidth + genderWidth + resuscitationWidth + 14 < availableWidth) {
				this.age.children().css("width", ageWidth);
				this.gender.children().css("width", genderWidth);
				this.resuscitation.children().css("width", resuscitationWidth);
			}
			else if(ageWidth + genderWidth + 14  < availableWidth) {
				this.age.children().css("width", ageWidth);
				this.gender.children().css("width", genderWidth);
				this.resuscitation.children().css("width", availableWidth - ageWidth - genderWidth);
			}
			else if(genderWidth + resuscitationWidth + 14  < availableWidth) {
				//this.resuscitation.children().css("width", resuscitationWidth);
				//this.gender.children().css("width", genderWidth);
				this.age.children().css("width", availableWidth - genderWidth - resuscitationWidth);
			}
			var allergyWidth = this.allergies.children()[0].scrollWidth;
			var dietWidth = this.diet.children()[0].scrollWidth;
			if(allergyWidth + dietWidth + 7 < availableWidth) {
				this.allergies.children().css("width", allergyWidth);
				this.diet.children().css("width", dietWidth);
			}
			else {
				this.allergies.children().css("width", availableWidth/2);
				this.diet.children().css("width", availableWidth/2);
			}
		}
		else {
			if(this.newIndicator!= null) {	
				availableWidth -= 150;
			}
			else {
				availableWidth -= 100;
			}
			this.age[0].style.width = 0;
			this.gender[0].style.width = 0;
			this.resuscitation[0].style.width = 0;
			this.allergies[0].style.width = 0;
			var ageWidth = this.age.children()[0].scrollWidth;
			var genderWidth = this.gender.children()[0].scrollWidth;
			var resuscitationWidth = this.resuscitation.children()[0].scrollWidth;
			var allergyWidth = this.allergies.children()[0].scrollWidth;
			if(ageWidth + genderWidth + resuscitationWidth + allergyWidth + 21 < availableWidth) {
				this.age.children()[0].style.width =  ageWidth;
				this.gender.children()[0].style.width = genderWidth;
				this.resuscitation.children()[0].style.width = resuscitationWidth;
				this.allergies.children()[0].style.width = allergyWidth;
			}
			else if(ageWidth + genderWidth + resuscitationWidth + 21  < availableWidth) {
				this.age.children()[0].style.width = ageWidth;
				this.gender.children()[0].style.width = genderWidth;
				this.resuscitation.children()[0].style.width = resuscitationWidth;
				this.allergies.children()[0].style.width = availableWidth - ageWidth - genderWidth - resuscitationWidth;
			}
			else if(ageWidth + genderWidth + 14  < availableWidth) {
				this.age.children()[0].style.width = ageWidth;
				this.gender.children()[0].style.width = genderWidth;
				this.resuscitation.children()[0].style.width = availableWidth/4;
				this.allergies.children()[0].style.width = availableWidth/4;
			}
		}

	 
	}
};

/**
 * The visual indicator representing when something is new on a patient.
 */
function NewIndicator(encounterId, urgent) {
	this.indicator = null;
	this.urgent = urgent;
	/**
	 * Maps the new indicator based on the input cell
	 * @param cell - The cell to map the indicator from.
	 */		
	this.map = function(cell) {
        this.indicator = $(cell);
        var image = $(this.indicator).find("td:last");
        image.mousedown(function(event) {
            switch (event.button) {
                case 1:
                    ReviewDialog.display(encounterId);
                    break;
                case 2:
                    break;
            }
        });
        var config = {    
			 over: function(e) {Hover.display(e, i18n.NEW_DATA_HEADER, i18n.NEW_DATA);},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		image.hoverIntent(config);
	},
	
	/**
	 * Creates the new indicator
	 * @param urgent - The class for urgent if this indicator should be displayed as urgent, empty if not.
	 * @return The HTML string representing the new indicator.
	 */	
	this.create = function() {
		var urgentClass = "";
		if(this.urgent == true) {
			urgentClass = " urgent";
		}
		var height = 0;
		if(PatientLists.getActive().isDepartmental() == false) {
			height = 63;
		}
		else {
			height = 39;
		}
        var top = 4; 
		var html = '<div style="position:absolute; z-index:1; top:' + top +'px; left:2px;">';
		var color = "#FF9900"
		if(urgent == true){
			color = "#CC0000"
		}
		
		if(PatientTable.sort == 'LOCATION') {
			top = 30;
		}
		html += '<table style="margin:0px; border:1px solid ' + color + '; z-index:1; height:' + height + 'px; width:' + (Columns.patient.width - 36) + 'px">';
		html += '<tr>';
		html += '<td style="margin:0px; border:1px solid ' + color + ';"></td>';
		html += '<td style="margin:0px; border:1px solid ' + color + ';" class="new-indicator' + urgentClass +'">';
		html += '<div style="margin-left: 1px;" class="new-indicator-image' + urgentClass +'"></div>';
		html += '</td>';
		html += '</tr>';
		html += '</table>';
		html += '</div>';
		return html;
	};
}

/**
 * The visual cell displaying the visit information for this patient.
 */
function VisitCell(number) {
	this.reasonForVisit = null;
	this.lengthOfStay = null;
	this.acuity = null;
	
	/**
	* Creates the cell
	* @param none
	* @return - The HTML string for the cell.
	*/	
	this.create = function(patient) {
		this.reasonForVisit = new ReasonForVisitDisplay();
		this.lengthOfStay = new LengthOfStay();
		this.acuity = new VisitAcuity();
				
		var html = '<td class="patient-table-visit" style="max-width:'+(Columns.visit.width)+'px" id="VisitCell' + number + '">';
		if(PatientLists.getActive().isDepartmental() == false) {
			html += this.reasonForVisit.create(patient);
			html += this.lengthOfStay.create(patient);
			html += '<div/>';
			html += this.acuity.create(patient);
		} else {
			html += this.reasonForVisit.create(patient);
			html += '<table><tr><td style="border:0px"><div class="length-of-stay truncate" style="width:' + (Columns.visit.width - 12) + 'px">'
			html += '<span style="padding-right: 6px;">';
			html += this.lengthOfStay.create(patient);
			html += '</span>';
			if(this.lengthOfStay.shouldDisplay(patient) && Configuration.acuity) {
				html += '<span style="font:12px CCTahoma; color:#BDBDBD; position:relative; padding:0px; padding-right: 6px; margin:0px; border:0px;">|</span>';
			}
			html += '<span>';
			html += this.acuity.create(patient);
			html += '</span>';
			html +='</div></td></tr></table>'
		}
		html += '</td>';
		return html;
	};
	
/**
	 * Sets the visual cell object on this cell. 
	 * @param cell - The visual object representing the cell.
	 */	
	this.setCell = function(cell, patient) {
		this.reasonForVisit.setCell(cell, patient);
		this.lengthOfStay.setCell($(cell.children()[1]).children(), patient);
		this.acuity.setCell($(cell.children()[3]).children(), patient);
		if(patient.hasRelationship()) {
			this.createHover(patient);
		}
	};
	
	/**
	 * Populates the hover for this cell.
	 * @param none
	 */
	this.createHover = function(patient) {
		var content = this.createHoverContent(patient);
		var config = {    
			 over: function(e) {Hover.display(e, i18n.VISIT, content)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		if(this.lengthOfStay.display) {
			this.lengthOfStay.display.hoverIntent(config);
		}
		if(this.reasonForVisit.display) {
			this.reasonForVisit.display.hoverIntent(config);
		}
		if(this.acuity.display) {
			this.acuity.display.hoverIntent(config);
		}
	}
	
	/**
	 * Creates the content within the hover for this cell.
	 * @param none
	 * @return - The HTML string representing the hover content.
	 */	
	this.createHoverContent = function(patient) {
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.REASON_FOR_VISIT + '</td>';
		html += '<td class="hover-table">' + this.reasonForVisit.getDisplay() + '<span class="hover-table-reason-for-visit-origin">' + this.reasonForVisit.getOrigin(patient) + '</span>' + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.ADMISSION_DATE + '</td>';
		if(patient.getAdmissionDateTime() == null) {
			html += '<td class="hover-table">--</td></tr>';
		}
		else {
			html += '<td class="hover-table">' + patient.getAdmissionDateTime().getFaceUpDateDisplay() + '</td></tr>';
		}
		html += '<tr  '+  PatientDrillDown.getFieldDisplay(Configuration.targetedDischargeIndicator)+'><td class="hover-table-label">';  
		html += i18n.TARGETED_DISCHARGE ;
		html +=  '</td>';
		html += '<td class="hover-table">' ;
		html +=  patient.getTargetedDischargeDisplay() ;
		html +=  '</td></tr>';

		html += '<tr><td class="hover-table-label">' + i18n.LOS + '</td>';
		html += '<td class="hover-table">' + patient.getLengthOfStayDisplay(new Boolean("true")) + '</td></tr>';
		if(Configuration.acuity) {
			html += '<tr><td class="hover-table-label">' + i18n.ACUITY + '</td>';
			html += '<td class="hover-table">' + patient.getAcuity() + '</td></tr>';
		}	
		html += '</table>';
		return html;
	}
};

/**
 * The visual display for the reason for visit.
 */
function ReasonForVisitDisplay() {
	this.display = null;
	this.origin = "";
	
	/**
	 * Creates the reason for visit display
	 * @param none
	 * @return - The HTML string representing the reason for visit.
	 */	
	this.create = function(patient) {
		var html = '<table><tr><td style="border:0px"><div class="reason truncate" style="width:' + (Columns.visit.width - 12) + 'px">' + patient.getReasonForVisitDisplay() + '</div></td></tr></table>';
		return html;
	};
	
	/**
	 * Sets the cell document object for this display.
	 * @param cell - The cell document object associated to this display.
	 */	
	this.setCell = function(cell) {
		this.display = $(cell.children()[0].rows[0].cells[0]).children();
	}
	
	/**
	 * Returns the display of the reason for visit.
	 * @param none.
	 */	
	this.getDisplay = function() {
		return this.display[0]['innerText'];
	}
	
	this.getOrigin = function(patient) {
		if(patient.getReasonForVisitOrigin() == null || patient.getReasonForVisitOrigin() == ""){
			return "";
		}
		else{
			return patient.getReasonForVisitOrigin();
		}
		
	}
}

/**
 * The visual display for the length of display
 */
function LengthOfStay() {
	this.date = null;
	this.display = null;
	
	/**
	 * Creates the length of stay display
	 * @param none
	 * @return - The HTML string representing the length of stay.
	 */	
	this.create = function(patient) {
		var html = "";
		if(this.shouldDisplay(patient)) {
			if(PatientLists.getActive().isDepartmental() == false) {
				html = '<table><tr><td style="border:0px"><div class="length-of-stay truncate" style="width:' + (Columns.visit.width - 12) + 'px"><span style="color:#666666;">'+i18n.LOS_ABRV+': </span><span>' + patient.getLengthOfStayDisplay() + '</span></div></td></tr></table>';
			}
			else {
				html = '<span style="border:0px"><span style="max-width:' + (Columns.visit.width - 12) + 'px"><span style="color:#666666;">'+i18n.LOS_ABRV+': </span><span>' + patient.getLengthOfStayDisplay() + '</span></span></span>';
			}
		}
		return html;
	};
	
	/**
	 * Sets the cell document object for this display.
	 * @param cell - The cell document object associated to this display.
	 */	
	this.setCell = function(display, patient) {
		if(this.shouldDisplay(patient) == false) {
			return;
		}
		this.display = display;
		
	}
	
	/**
	 * Determines if the length of stay sould display or not, based on what type of list this is and whether the discharge bar is displayed.
	 * @param none
	 * @return True if the length of stay should display, false if not.
	 */	
	this.shouldDisplay = function(patient) {
		if(patient.getLengthOfStayDisplay() == "--") {
			return false;
		} else {
			return true;
		}
	}
	
	/**
	 * Gets the numeric value of the length of stay.
	 * @param none
	 * @return - The numeric value in days for the length of stay.
	 */	
	this.getValue = function(patient) {
		if(patient.getAdmissionDateTime() != null) {
			return Math.abs(patient.getAdmissionDateTime().getDaysFromNow());
		}
		return 0;
	}
	
	/**
	 * Gets the display of the length of stay.
	 * @param none
	 * @return - The string display representing the length of stay, will be -- if it is empty
	 */	
	this.getDisplay = function() {
		if(this.display == null || this.display[0]['innerText'] == "") {
			return "--";
		}
		return this.display[0]['innerText'];

	}
	
	/**
	 * Resizes the length of stay display
	 * @param none
	 */	
	this.size = function() {
		if(this.display[0].scrollWidth > Columns.visit.width - 12) {
			this.display[0].style.width = Columns.visit.width - 12;
		}
	}
}

/**
 * The visual cell displaying the care team information for this patient.
 */
function CareTeamCell(number) {
	this.provider = null;
	this.contact = null;
	
	/**
	 * Creates the column
	 * @param none
	 * @return The HTML string representing the Care Team cell.
	 */	
	this.create = function(patient) {
		var html = '<td class="patient-table-care-team" id="CareTeamCell' + number + '">';
		html += '<table>';
		html += '<tr><td style="border:0px"><div class="provider truncate" style="width:' + (Columns.careTeam.width - 12) + 'px">' + patient.getDefaultProviderName() + '</div></td></tr>';
		html += '<tr><td style="border:0px"><div class="contact truncate" style="width:' + (Columns.careTeam.width - 15) + 'px">' + patient.getDefaultProviderContactType() + " " + '<span class="contact-number truncate">' + patient.getDefaultProviderContactNumber() + '</div></td></tr>';
		html += '</table>';
		html += '</td>';
		return html;
	}
	
	/**
	 * Sets the cell object on this care team cell
	 * @param cell - The visual object representing the care team cell
	 */	
	this.setCell = function(cell, patient) {
		this.provider = $(cell.children()[0].rows[0].cells[0]).children();
		this.contact = $(cell.children()[0].rows[1].cells[0]).children();
		this.createHover(patient);
	}
	
	/**
	 * Creates the care team hover.
	 * @param none
	 */	
	this.createHover = function createCareTeamCellHover(patient) {
		var careTeam = CareTeams.getByEncounterId(patient.encounterId);
		if(careTeam != null) {
			var content = this.createHoverContent(careTeam.providers);
			var config = {    
				 over: function(e) {Hover.display(e, i18n.CARE_TEAM, content)},
				 timeout: 200,
				 out: function(e) {Hover.hide();},
				 interval: 200
			};
			this.provider.hoverIntent(config);
			this.contact.hoverIntent(config);
		}
	}
	
	/**
	 * Creates the content of the care team hover.
	 * @param providers - The array of provider objects to display in the care team hover.
	 */	
	this.createHoverContent = function(providers) {
		var html = '<table class="hover-table">';
		for(var i = 0; i < providers.length; i++) {
			var provider = providers[i];
			html += '<tr>';
			html += '<td class="hover-padding"></td>';
			html += '</tr>';
			html += '<tr>';
			html += '<td class="care-team-display-role-hover">' + provider.roles + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + '</td>';
			html += '</tr>';
			html += '<tr>';
			html += '<td class="care-team-display-provider-hover">' + provider.name + '</td>';
			html += '</tr>';
			if(provider.contacts.length == 0) {
				html += '<tr>';
				html += '<td class="hover-table-label"></td>';
				html += '</tr>';
				html += '<tr>';
				html += '<td class="hover-table-secondary">' + "--" + '</td>';
				html += '</tr>';
			}
			else {
				for(var j= 0; j < provider.contacts.length; j++) {
					html += '<tr>';
					html += '<td class="hover-table-label"></td>';
					html += '</tr>';
					html += '<tr>';
					html += '<tr><td class="care-team-display-contact-type-hover">' + provider.contacts[j].type + " " + '<span class="care-team-display-contact-hover">' + provider.contacts[j].number + '</td></tr>';
					html += '</tr>';
				}
			}
		}
		html += '</table>';
		return html;
	}
};

/**
 * The visual cell displaying the custom column
 */
function CustomCell(number) {
    this.custom = null;
	this.value = null;
	this.units = null;

    /**
     * Creates the cell
     * @param patient
	 * @param headerDisplay - the current headerDisplay
     */
    this.create = function(patient, headerDisplay, width) {
        var html = '<td class="patient-table-custom" id="CustomCell' + number + '">';
        html += '<div class="custom">' + patient.getCustom(headerDisplay) + '</div>';
        html += '</td>';
        return html;
    }

    /**
     * Sets the cell object on this custom cell
     * @param cell - The visual object representing the custom cell
     * @param patient
	 * @param headerDisplay - the current headerDisplay
     */
    this.setCell = function(cell, patient, headerDisplay) {
		this.value = cell;
		if(patient.getCustom(headerDisplay) != "--") {
			this.createHover(patient, headerDisplay);
		}
    }
	
	/**
	 * Creates the custom cell hover for the given patient
	 * @param patient - The patient whose cell the hover will be added to
	 * @param headerDisplay - the current headerDisplay
	 */
	this.createHover = function(patient, headerDisplay) {
		var content = this.createHoverContent(patient, headerDisplay);
		var config = {    
			 over: function(e) {Hover.display(e, "", content)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		this.value.hoverIntent(config);
	}
	
	/**
	 * Creates the custom cell hover content for the given patient
	 * @param patient - The patient whose cell the hover will be added to
	 * @param headerDisplay - the current headerDisplay
	 */
	this.createHoverContent = function(patient, headerDisplay) {
		var html = '<table class="hover-table">';
		var result = Results.getCustomColumnByEncounterId(patient.encounterId);
		for(var i = 0; i < result.length; i++) {
			if(result[i].name == headerDisplay) {
				html += result[i].getHoverText();
			}
		}
		html += '</table>';
		return html;
	}
}

/**
 * The visual cell displaying the custom column
 */
function VentilatorCell(number) {
    this.custom = null;
    this.value = null;
    this.units = null;

    /**
     * Creates the cell
     * @param none
     */
    this.create = function(patient) {
		var html = '<td id="VentilatorCell' + number + '" class="patient-table-ventilator">';
		html += '<table class="">';
		html += '<tr>';
		html += '<td style="border:0px"><div class="truncate ventilator">' + patient.getVentilatorFaceUpDisplay() + '</div></td>';
		html += '</tr>';
		html += '</table>';
        html += '</td>';
		return html;
    }

    /**
     * Sets the cell object on this pH cell
     * @param cell - The visual object representing the custom cell
     */
    this.setCell = function(cell, patient) {
		this.value = $(cell.children()[0].rows[0].cells[0]);
		this.createHover(patient);
    }
	
	/**
	 * Populates the hover for this cell.
	 * @param none
	 */
	this.createHover = function(patient) {
		var ventilator = patient.getVentilator();
		if (ventilator == null) {
			return;
		}
		var content = this.createHoverContent(ventilator);
		var value = patient.getVentilatorFaceUpDisplay();
		var config = {    
			 over: function(e) {Hover.display(e, i18n.VENTILATOR, content)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		if(ventilator.getRateDisplay() != "--" || ventilator.getModeDisplay() != "--" || 
			   ventilator.getVolumeDisplay() != "--"){
			this.value.hoverIntent(config);
		}
	}
	
	//Ventilator Hover units are not internationalized.
	this.createHoverContent = function(ventilator) {
		if (ventilator == null) {
			return;
		}
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.RATE + ":" +'</td>';
		if (ventilator.getRateDisplay() == "--") {
			html += '<td class="hover-table">' + ventilator.getRateDisplay() + '</td></tr>';		
		}
		else {
			html += '<td class="hover-table">' + ventilator.getRateDisplay() + " " +'<span class = "ventilator-hover-units"> br/min </span>'+'</td></tr>';		
		}
		html += '<tr><td class="hover-table-label">' + i18n.VOLUME + ":" + '</td>';
		if (ventilator.getVolumeDisplay() == "--") {
			html += '<td class="hover-table">' + ventilator.getVolumeDisplay() + '</td></tr>';
		}
		else {
			html += '<td class="hover-table">' + ventilator.getVolumeDisplay() + " " +'<span class = "ventilator-hover-units"> ml/kg </span>'+'</td></tr>';
		}
		html += '<tr><td class="hover-table-label">' + i18n.MODE +  ":" +'</td>';
		html += '<td class="hover-table">' + ventilator.getModeDisplay() + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.DETAILS + ": "  + '</td><td class="hover-table">' + ventilator.getClinicalDisplayLine() + '</td></tr>';
		html += '<tr><td class="hover-table-label">' + i18n.DATE_TIME + ": "  + '</td><td class="hover-table">' + ventilator.getCurrentStartDateTime() + '</td></tr>';
		if (ventilator.getOrderComment() != "--") {
			html += '<tr><td class="hover-table-label">' + i18n.COMMENT + ": " + '</td><td class="hover-table">' + ventilator.getOrderComment() + '</td></tr>';
		}
		html += '</table>';
		return html;
	}
}

/**
 * The visual cell displaying the custom column
 */
function OxygenCell(number) {
    this.oxygen = null;
    this.value = null;
    this.units = null;

    /**
     * Creates the cell
     * @param none
     */
    this.create = function(patient) {
		var html = '<td id = "OxygenCell' + number + '" class ="patient-table-oxygen">';
		html += '<table class="">';
		html += '<tr>';
		html += '<td style="border:0px"><div class="oxygen truncate">' + patient.getO2Type() + '</div></td>';
		html += '</tr>';
		html += '</table>';
        html += '</td>';
        return html;
    }

    /**
     * Sets the cell object on this pH cell
     * @param cell - The visual object representing the custom cell
     */
    this.setCell = function(cell, patient) {
		this.value = $(cell.children()[0].rows[0].cells[0]);
		this.createHover(patient);
    }
		
	/**
	 * Populates the hover for this cell.
	 * @param none
	 */
	this.createHover = function(patient) {
		var content = this.createHoverContent(patient);
		var config = {    
			 over: function(e) {Hover.display(e, i18n.OXYGEN_THERAPY, content)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		
		if(patient.getO2Type() != "--" || patient.getSpO2() != "--" || 
		   patient.getFlowRate() != "--" || patient.getFiO2() != "--"){
			this.value.hoverIntent(config);
		}
	}
	
	this.createHoverContent = function(patient) {
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label" >' + i18n.O2_TYPE + '</td>';
		html += '<td class="hover-table">' + patient.getO2Type() + '</td></tr>';
		html += '<tr><td class="hover-table-label" style="padding-bottom:2px;">' + i18n.FLOW_RATE + '</td>';
		html += '<td class="hover-table">' + patient.getFlowRate(true) + '</td></tr>';
		html += '<tr><td class="hover-table-label" style="padding-bottom:2px;">' + i18n.FIO2 + '</td>';
		html += '<td class="hover-table">' + patient.getFiO2(true) + '</td></tr>';
		html += '<tr><td class="hover-table-label" style="padding-bottom:2px;">' + i18n.SPO2 + '</td>';
		html += '<td class="hover-table">' + patient.getSpO2(true) + '</td></tr>';
		html += '</table>';
		return html;
	}
}

/**
 * The visual cell displaying the custom column
 */
function BloodGasesCellPH() {
    this.custom = null;
    this.value = null;
    this.units = null;

    /**
     * Creates the cell
     * @param none
     */
    this.create = function(patient) {
        var html = '<td class="patient-table-bloodGasesLeft">';
		html += '<table class="">';
		html += '<tr>';
		html += '<td style="border:0px"><div class="bloodGases">' + patient.getPH() + '</div></td>';
		html += '</tr>';
		html += '</table>';
        html += '</td>';
        return html;
    }

    /**
     * Sets the cell object on this pH cell
     * @param cell - The visual object representing the custom cell
     */
    this.setCell = function(cell, patient) {
		this.value = $(cell.children()[0].rows[0].cells[0]);
		this.createHover(patient);
    }
		
	/**
	 * Populates the hover for this cell.
	 * @param none
	 */
	this.createHover = function(patient) {
		var ph = patient.getPH(true);
		if(ph == "--"){
			return null;
		}
		
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.PH + '</td>';
		html += ph;
		html += '</table>';

		var value = patient.getPH();
		var config = {    
			 over: function(e) {Hover.display(e, i18n.ARTERIAL_BLOOD_GASES, html)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		this.value.hoverIntent(config);
	}
}

/**
 * The visual cell displaying the PaO2 column
 */
function BloodGasesCellPaO2() {
    this.custom = null;
    this.value = null;
    this.units = null;

    /**
     * Creates the cell
     * @param none
     */
    this.create = function(patient) {		
		var html = '<td class="patient-table-bloodGasesMiddle">';
		html += '<table class="">';
		html += '<tr>';
        html += '<td style="border:0px"><div class="bloodGases">' + patient.getPaO2() + '</div></td>';
        html += '</tr>';
		html += '</table>';
        html += '</td>';
        return html;
    }

    /**
     * Sets the cell object on this paO2 cell
     * @param cell - The visual object representing the custom cell
     */
    this.setCell = function(cell, patient) {
		this.value = $(cell.children()[0].rows[0].cells[0]);
		this.createHover(patient);
    }
	
	/**
	 * Populates the hover for this cell.
	 * @param none
	 */
	this.createHover = function(patient) {
		var pa = patient.getPaO2(true);
		if(pa == "--"){
			return null;
		}
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.PO2 + '</td>';
		html += pa;
		html += '</table>';
		
		var value = patient.getPaO2();
		var config = {    
			 over: function(e) {Hover.display(e, i18n.ARTERIAL_BLOOD_GASES, html)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};

		this.value.hoverIntent(config);
	}
}

/**
 * The visual cell displaying the PaCO2 column
 */
function BloodGasesCellPaCO2() {
    this.custom = null;
    this.value = null;
    this.units = null;

    /**
     * Creates the cell
     * @param none
     */
    this.create = function(patient) {
		var html = '<td class="patient-table-bloodGasesMiddle">';
		html += '<table class="">';
		html += '<tr>';
		html += '<td style="border:0px"><div class="bloodGases">' + patient.getPaCO2() + '</div></td>';
		html += '</tr>';
		html += '</table>';
        html += '</td>';
        return html;
    }

    /**
     * Sets the cell object on this paCO2 cell
     * @param cell - The visual object representing the custom cell
     */
    this.setCell = function(cell, patient) {
		this.value = $(cell.children()[0].rows[0].cells[0]);
		this.createHover(patient);
    }
		
	/**
	 * Populates the hover for this cell.
	 * @param none
	 */
	this.createHover = function(patient) {
		var pac = patient.getPaCO2(true);
		if(pac == "--"){
			return null;
		}
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.PCO2 + '</td>';
		html += pac;
		html += '</table>';

		var value = patient.getPaCO2();
		var config = {    
			 over: function(e) {Hover.display(e, i18n.ARTERIAL_BLOOD_GASES, html)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		this.value.hoverIntent(config);
	}
}

/**
 * The visual cell displaying the HCO3 column
 */
function BloodGasesCellHCO3() {
    this.custom = null;
    this.value = null;
    this.units = null;

    /**
     * Creates the cell
     * @param none
     */
    this.create = function(patient) {
		var html = '<td class="patient-table-bloodGasesMiddle">';
		html += '<table class="">';
		html += '<tr>';
		html += '<td style="border:0px"><div class="bloodGases">' + patient.getHCO3() + '</div></td>';
		html += '</tr>';
		html += '</table>';
        html += '</td>';
        return html;
    }

    /**
     * Sets the cell object on this paCO2 cell
     * @param cell - The visual object representing the custom cell
     */
    this.setCell = function(cell,patient) {
        this.cell = $(cell);
		this.value = $(this.cell.children()[0].rows[0].cells[0]);
		this.createHover(patient);
    }
		
	/**
	 * Populates the hover for this cell.
	 * @param none
	 */
	this.createHover = function(patient) {
		var hco = patient.getHCO3(true);
		if(hco == "--"){
			return null;
		}
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.HCO3 + '</td>';
		html += hco;
		html += '</table>';

		var value = patient.getHCO3();
		var config = {    
			 over: function(e) {Hover.display(e, i18n.ARTERIAL_BLOOD_GASES, html)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		
		this.value.hoverIntent(config);
	}
}

/**
 * The visual cell displaying the O2Sat column
 */
function BloodGasesCellO2Sat() {
    this.custom = null;
    this.value = null;
    this.units = null;

    /**
     * Creates the cell
     * @param none
     */
    this.create = function(patient) {
		var html = '<td class="patient-table-bloodGasesRight">';
		html += '<table class="">';
		html += '<tr>';
		html += '<td style="border:0px"><div class="bloodGases">' + patient.getO2Sat() + '</div></td>';
		html += '</tr>';
		html += '</table>';
        html += '</td>';
        return html;
    }

    /**
     * Sets the cell object on this o2Sat cell
     * @param cell - The visual object representing the custom cell
     */
    this.setCell = function(cell, patient) {
		this.value = $(cell.children()[0].rows[0].cells[0]);
		this.createHover(patient);
    }
		
	/**
	 * Populates the hover for this cell.
	 * @param none
	 */
	this.createHover = function(patient) {
		var sat = patient.getO2Sat(true);
		if(sat == "--"){
			return null;
		}
		var html = '<table class="hover-table">';
		html += '<tr><td class="hover-table-label">' + i18n.O2SAT + '</td>';
		html += sat;
		html += '</table>';
		
		var value = patient.getO2Sat();
		var config = {    
			 over: function(e) {Hover.display(e, i18n.ARTERIAL_BLOOD_GASES, html)},
			 timeout: 200,
			 out: function(e) {Hover.hide();},
			 interval: 200
		};
		this.value.hoverIntent(config);
	}
}

/**
 * The visual cell displaying the count of activities a patient has.
 */
function ActivitiesCountCell(type, number) {
	this.type = type;
	this.overdue = null;
	this.unscheduled  = null;
	this.current = null;
	this.html = "";
	
	/**
	 * Creates the cell
	 * @param none
	 * @return The HTML string representing the count cell
	 */	
	this.create = function(patient) {
		this.html = '<td class="patient-table-' + type + '">';
		this.html += '<table class="activity-counts">';
		
		this.createOverdue(patient);
		this.createCurrent(patient);
		this.createUnscheduled(patient);
		this.html += '</table>';
		this.html += '</td>';
		return this.html;
	}
	
	/**
	 * Sets the cell object on this activities cell
	 * @param cell - The visual object representing the activities cell
	 */	
	this.setCell = function(cell, patient, patientRow, patientCell) {
		this.overdue = $($(cell.children()[0].rows[0].cells[0]).children()[0]);
		this.current = $($(cell.children()[0].rows[1].cells[0]).children()[0]);
		this.unscheduled = $($(cell.children()[0].rows[2].cells[0]).children()[0]);
		
		this.createOverdueHoverAndLinks(patient, patientRow, patientCell);
		this.createCurrentHoverAndLinks(patient, patientRow, patientCell);
		this.createUnscheduledHoverAndLinks(patient, patientRow, patientCell);
	}
	
	/**
	 * Returns the type filters based on the type of cell this.
	 * @param An array of filter strings used for clickin on this cell.
	 */
	this.getTypeFilters = function() {
		switch(this.type) {
			case "medication": return ["PATIENTCARE", "ASSESSMENT", "OTHER"];
			case "patient-care": return ["MEDICATIONS",  "ASSESSMENT", "OTHER"];
			case "assessment": return ["MEDICATIONS", "PATIENTCARE",  "OTHER"];
			case "other": return ["MEDICATIONS", "PATIENTCARE", "ASSESSMENT"];
		}
	}
	
	/**
	 * Creats the overdue count display
	 * @param none
	 */
	this.createOverdue = function(patient) {
		var overdueTaskCount = Tasks.getOverdueCountByEncounterId(patient.encounterId);
		if(overdueTaskCount == null) {
			this.html += '<tr><td class="activity-counts-overdue-container"><div class="activity-counts-overdue empty" id="Medication'+ number + '">-</div></td></tr>';
			return;
		}
		var count = this.getCount(overdueTaskCount);
		if(count > 0) {
			this.html += '<tr><td class="activity-counts-overdue-container"><div class="activity-counts-overdue value" id="Medication'+ number + '">' + count + '</div></td></tr>';
		}
		else {
			this.html += '<tr><td class="activity-counts-overdue-container"><div class="activity-counts-overdue empty" id="Medication'+ number + '">-</div></td></tr>';
		}
	}
	
	/**
	 * Create the overdue count hover and links
	 * @param none
	 */
	this.createOverdueHoverAndLinks = function(patient, patientRow, cell) {
		var overdueTaskCount = Tasks.getOverdueCountByEncounterId(patient.encounterId);
		if(overdueTaskCount == null) {
			return;
		}
		var count = this.getCount(overdueTaskCount);
		if(count > 0) {
			this.overdue.mouseover(function() {
				$(this).addClass("activity-counts-underline");			
			});
			this.overdue.mouseout(function() {
				$(this).removeClass("activity-counts-underline");			
			});
			var filters = this.getTypeFilters();
			this.overdue.mouseup(function() {
				patientRow.hover.click(patient.encounterId, filters, "OVERDUE");
			});
		}
	}
	
	/**
	 * Populates the current count display
	 * @param none
	 */
	this.createCurrent = function(patient) {
		var currentTaskCount = Tasks.getCurrentCountByEncounterId(patient.encounterId);
		if(currentTaskCount == null) {
			this.html += '<tr><td class="activity-counts-current-container"><div class="activity-counts-current empty" id="Current'+ number + '">-</div></td></tr>';
			return;
		}
		var count = this.getCount(currentTaskCount);
		if(count > 0) {
			this.html += '<tr><td class="activity-counts-current-container"><div class="activity-counts-current value" id="Current'+ number + '">' + count + '</div></td></tr>';
		}
		else {
			this.html += '<tr><td class="activity-counts-current-container"><div class="activity-counts-current empty" id="Current'+ number + '">-</div></td></tr>';
		}
	}
	
	/**
	 * Create the current count hover and link
	 * @param none
	 */
	this.createCurrentHoverAndLinks = function(patient, patientRow, cell) {
		var currentTaskCount = Tasks.getCurrentCountByEncounterId(patient.encounterId);
		if(currentTaskCount == null) {
			return;
		}
		var count = this.getCount(currentTaskCount);
		if(count > 0) {
			this.current.addClass("activity-counts-current value");
			this.current.mouseover(function() {
				$(this).addClass("activity-counts-underline");			
			});
			this.current.mouseout(function() {
				$(this).removeClass("activity-counts-underline");			
			});
			var filters = this.getTypeFilters();
			this.current.mouseup(function() {
				patientRow.hover.click(patient.encounterId, filters, "SCHEDULED");
			});
		}
	}
	
	/**
	 * Creates the unscheduled count display
	 * @param none
	 */
	this.createUnscheduled = function(patient, patientRow) {
		var unscheduledTaskCount = Tasks.getUnscheduledCountByEncounterId(patient.encounterId);
		if(unscheduledTaskCount == null) {
			this.html += '<tr><td class="activity-counts-unscheduled-container"><div class="activity-counts-unscheduled empty"  id="Unscheduled' + number + '">-</div></td></tr>';
			return;
		}
		var count = this.getCount(unscheduledTaskCount);
		 
		if(count > 0) {
			this.html += '<tr><td class="activity-counts-unscheduled-container"><div class="activity-counts-unscheduled value"  id="Unscheduled' + number + '">' + count + '</div></td></tr>';
		}
		else {
			this.html += '<tr><td class="activity-counts-unscheduled-container"><div class="activity-counts-unscheduled empty"  id="Unscheduled' + number + '">-</div></td></tr>';
		}
	}

	/**
	 * Creates the unscheduled count hover and link
	 * @param none
	 */
	this.createUnscheduledHoverAndLinks = function(patient, patientRow, cell) {
		var unscheduledTaskCount = Tasks.getUnscheduledCountByEncounterId(patient.encounterId);
		if(unscheduledTaskCount == null) {
			return;
		}
		var count = this.getCount(unscheduledTaskCount);
		 
		if(count > 0) {
			this.unscheduled.mouseover(function() {
				$(this).addClass("activity-counts-underline");			
			});
			this.unscheduled.mouseout(function() {
				$(this).removeClass("activity-counts-underline");			
			});
			var filters = this.getTypeFilters();
			this.unscheduled.mouseup(function() {
				patientRow.hover.click(patient.encounterId, filters, "PRN");
			});
		}
	}
	
	/**
	 * Returns the numeric count for the input task count based on the type of count this cell is.
	 * @param none
	 * @return The numeric count.
	 */
	this.getCount = function(taskCount) {
		switch(this.type) {
			case "medication": return taskCount.meds
			case "patient-care": return taskCount.patientCare
			case "assessment": return taskCount.assessment;
			case "other": return taskCount.other;
		}
	}
};

/**
 * The visual cell displaying activity bars
 */
function ActivitiesCell(number) {
	this.activitiesGraph = null;
	this.activitiesPrn = null;
	this.activities = null;
    this.unscheduledTaskCount = null;
    this.currentTaskCount = null;
    this.overdueTaskCount = null;
    this.totalCount = 0;
    this.overdueCount = 0;
    this.overdueMeds = 0;
    this.currentCount = 0;
    this.medCount = 0;       // total meds
    this.prnMedCount = 0;    // prn meds
    this.prnCount = 0;       // All PRN activities
    this.continuousCount = 0; // continuous activities
    this.overdueMeds = 0;    // overdue meds
    this.overdue = 0;
	this.max = 30;
	this.html = "";
	
	/**
	 * Creates the cell
	 * @param none
	 * @return The HTML string representing the cell.
	 */	
	this.create = function(patient) {
		this.html = '<td class="patient-table-activities" id="Activities' + number + '">';
		var extraClasses = "";
        if (PatientLists.getActive().isDepartmental() == true) {
            extraClasses = " departmental";
        }
		this.html += '<div class="activities' + extraClasses + '">';
		this.createGraph(patient);
		this.html += '</div>';
		this.html += '</td>';
		return this.html;
	}
	
	/**
	 * Sets the cell object on this activities cell
	 * @param cell - The visual object representing the activities cell
	 * @param patient - the patient
	 * @param patientRow - the row this patient is displayed in
	 * @param patientCell - the patient cell
	 */	
	this.setCell = function(cell, patient, patientRow, patientCell) {
        this.activities = $($(cell).find(".activities"));
        this.activitiesGraph = $($(cell).find(".activities-graph-hover-cell"));
        this.activitiesPrn = $($(cell).find(".activities-prn"));
		if (this.totalCount >  0) {
		    // Only create the hover if there are activities.
		    this.createActivitiesHover(this.activitiesGraph, patient, patientRow, patientCell);
		}
		if (this.activitiesPrn != null) {
            var config = {
                over: function(e) {Hover.display(e, "", i18n.PRN_INDICATOR_HOVER_MSG);},
                timeout: 200,
                out: function(e) {Hover.hide();},
                interval: 200
           };
           this.activitiesPrn.hoverIntent(config);
		}
	}
	
    /**
     * Creates the display of the overdue bar.
     * @param the patient
     */
    this.createGraph = function(patient) {
        this.computeCountTotals(patient);
        //Initialize the width of the activities count bar to the total.
        var width = Columns.activities.width;
        var overdueDisplayCount = this.overdueCount;
        var medsDisplayCount = this.medCount - this.overdueMeds;
        var otherDisplayCount = this.totalCount - medsDisplayCount - overdueDisplayCount;
        var barCount = overdueDisplayCount + medsDisplayCount + otherDisplayCount;
        var barCountTotal = barCount;
        if (barCountTotal > 35) {
            barCountTotal = 35;
        }
        width -= 6; // for left margin
        width -= 4; // for right margin
        width -= 25; // for total count display
        var scaleFactor = 4;
        
        // Apply limitations based on the bar representing a maximum of 35 activities
        var allocatedSpace = 0;
        
        overdueDisplayCount = this.computeSectionCount(allocatedSpace, 35, overdueDisplayCount);
        allocatedSpace += overdueDisplayCount;
        
        medsDisplayCount = this.computeSectionCount(allocatedSpace, 35, medsDisplayCount);
        allocatedSpace += medsDisplayCount;
        
        otherDisplayCount = this.computeSectionCount(allocatedSpace, 35, otherDisplayCount);
        allocatedSpace += otherDisplayCount;

        var overdueStart = 2;
        var overdueWidth = overdueDisplayCount * scaleFactor;
        var medsStart = this.computeNextSectionStart(overdueStart, overdueWidth);
        var medsWidth = medsDisplayCount * scaleFactor;
        var otherStart = this.computeNextSectionStart(medsStart, medsWidth);
        var otherWidth = otherDisplayCount * scaleFactor;
        var totalWidth = otherStart + otherWidth + 2;
        this.html += '<div class="activities-graph-hover-cell">';
        if (this.totalCount != 0) {
            this.html += '<div style="width:' + totalWidth + 'px;" class="activities-graph">';
            if (overdueWidth > 0) {
                this.html += '<div class="activities-overdue" style="left:' + overdueStart + 'px; width:' + overdueWidth + 'px" onclick="PatientTable.openActivityDrilldownTab(' + number + ')"></div>';
            }
            if (medsWidth > 0) {
                this.html += '<div class="activities-meds" style="left:' + medsStart + 'px; width:' + medsWidth + 'px" onclick="PatientTable.openActivityTabMedications(' + patient.encounterId + ')"></div>';
            }
            if (otherWidth > 0) {
                this.html += '<div class="activities-others" style="left:' + otherStart + 'px; width:' + otherWidth + 'px" onclick="PatientTable.openActivityDrilldownTab(' + number + ')"></div>';
            }
            this.html += '</div>';
        }
        else {
            totalWidth = 0;
        }
        var activitiesTotalClass = "";
        var displayedCount = "" + this.totalCount;
        if (this.totalCount > 99 && this.totalCount < 250) {
            activitiesTotalClass = " digits3";
        }
        if (this.totalCount > 250) {
            activitiesTotalClass = " digits4";
            displayedCount = "250+";
        }
        if(patient.hasRelationship() == true && patient.encounterId != 0) {
            this.html += '<div style="left:' + (totalWidth - 1) + 'px" class="activities-total-bubble" onclick="PatientTable.openActivityDrilldownTab(' + number + ')">';
            this.html += '<div class="activities-total' + activitiesTotalClass + '">' + displayedCount + '</div>';
            this.html += '</div>';
        } else {
            this.html += '<div class="activities-no-relationship">--</div>';
        }
        this.html += '</div>';
        
        var extraClasses = "";
        if (this.prnCount == 0 && this.continuousCount == 0) {
            extraClasses += ' hidden';
        }
        this.html += '<div class="activities-indicators' + extraClasses + '">';
        this.html += '<span class="activities-prn" onclick="PatientTable.openPrnDrilldownTab(' + number + ')">' + i18n.ACTIVITY_PRN_TAB + '</span>';
        this.html += '</div>';
        
        this.html += '</div>';
    },
    
    /**
     * Compute the allowed counts displayed in a section, based on already allocated counts, and the current section count.
     * @param usedCount - the already used display count (out of maxCounts)
     * @param maxCount - the total display count that can be shown (35 currently)
     * @param sectionCount - the count for the current section (overdue, meds, other)
     * @returns The number of counts that can be displayed for this section.
     */
    this.computeSectionCount = function(usedCount, maxCount, sectionCount) {
        if (usedCount >= maxCount) {
            // Out of space already
            return 0;
        }
        if ((maxCount - usedCount) < sectionCount) {
            // The whole section count can't be displayed
            var remainingCount = maxCount - usedCount;
            return remainingCount;
        }
        // The whole count can be displayed
        return sectionCount;
    },
    
    /**
     * Compute the starting displayed position.
     * @param sectionStart
     * @param sectionWidth
     * @returns the starting position for the next section
     */
    this.computeNextSectionStart = function(sectionStart, sectionWidth) {
        if (sectionWidth > 0) {
            return sectionStart + sectionWidth + 1;
        }
        else {
            return sectionStart;
        }
    },
    
    /**
     * Aggregate the total counts for displayed categories from the task counts
     * @param patient - the patient we are working with
     * @return none
     */
    this.computeCountTotals = function(patient) {
        this.unscheduledTaskCount = Tasks.getUnscheduledCountByEncounterId(patient.encounterId);
        this.currentTaskCount = Tasks.getCurrentCountByEncounterId(patient.encounterId);
        this.overdueTaskCount = Tasks.getOverdueCountByEncounterId(patient.encounterId);
		
        if (this.unscheduledTaskCount != null) {
            this.totalCount += this.unscheduledTaskCount.total;
            this.unscheduledCount = this.unscheduledTaskCount.total;
            this.medCount += this.unscheduledTaskCount.meds;
            this.prnMedCount += this.unscheduledTaskCount.prnMeds;
            this.prnCount += this.unscheduledTaskCount.prn;
            this.continuousCount += this.unscheduledTaskCount.continuous;
        }
        
        if (this.currentTaskCount != null) {
            this.totalCount += this.currentTaskCount.total;
            this.currentCount = this.currentTaskCount.total;
            this.medCount += this.currentTaskCount.meds;
        }
        
        if (this.overdueTaskCount != null) {
            this.totalCount += this.overdueTaskCount.total;
            this.overdueCount = this.overdueTaskCount.total;
            this.medCount += this.overdueTaskCount.meds;
            this.overdueMeds += this.overdueTaskCount.meds;
        }
    },
    
	/**
	 * Creates the hover of the activities count graph bar and adds a class to make the circle toggle darker during hover.
	 * @param none
	 */
	this.createActivitiesHover = function createActivitiesCellGraphHover(target, patient, patientRow, cell) {
        var localPatient = patient;
        var lPatientRow = patientRow;
        var graphHoverCell = this.activitiesGraph;
        var unscheduledCount = Tasks.getUnscheduledCountByEncounterId(patient.encounterId);
        var currentCount = Tasks.getCurrentCountByEncounterId(patient.encounterId);
        var overdueCount = Tasks.getOverdueCountByEncounterId(patient.encounterId);
		var config = {   
			 over: function(e) {graphHoverCell.addClass("hoverActive");ActivitiesCellHover.display(target, i18n.ACTIVITIES, overdueCount, currentCount, unscheduledCount, lPatientRow, localPatient, cell)},
			 timeout: 200,
			 out: function(e) {graphHoverCell.removeClass("hoverActive");ActivitiesCellHover.hide()},
			 interval: 200
		};
		this.activitiesGraph.hoverIntent(config);
	}

};

/**
 * The visual cell displaying the quality measures
 */
function QualityMeasuresCell(number) {
    this.qualityMeasures = null;
    this.measure = null;
    this.number = number;
    /**
     * Creates the cell
     * @param none
     * @return The HTML string representing the cell.
     */
    this.create = function (patient) {
        var html = '<td class="patient-table-quality" id="QualityMeasure' + number + '">';
        this.measure = QualityMeasures.getByEncounterId(patient.encounterId);
        if (this.measure != null) {
            if (this.measure.isQualityMeasureOrder() == true) {
                html = '<td class="patient-table-quality cursor-pointer" id="QualityMeasure' + number + '">'
                html += '<div class="quality-measures-unmet"></div>';
            }
        } else {
            html += '<div style="height:3px;"></div>';
        }
        html += '</td>';
        return html;
    };

    /**
     * Sets the cell object on this  cell
     * @param cell - The visual object representing the  cell
     * @param patient - the current patient
     */
    this.setCell = function (cell, patient) {
        this.qualityMeasures = $(cell.children()[0]);
        if (this.measure != null && this.measure.isQualityMeasureOrder() == true) {
            cell.bind('click', {
                patient: patient,
                rowNum: this.number
            }, function (event) {
                if (QualityMeasurePopover.active == false) {
                    QualityMeasurePopover.getContent(event.data.patient, event.data.rowNum);
                }
            });
        }
    };
}

/**
 * The visual cell displaying the care plan information for this patient.
 */
function PlanOfCareCell(number, patient) {
	this.carePlans = []; 
	this.name = null;
	this.status = null;
	this.plannedCarePlans = [];
	this.initiatedCarePlans = [];
	this.suggestedCarePlans = [];
	this.html = "";
	this.remainingPlans = 0;
	this.remainingDisplay = 0;
	this.pocLineCount = 0;

	/**
	 * Creates the cell
	 * @param patient - patient to create plan of care cell for.
	 * @return The HTML string representing the Care Plan cell.
	 */	
	this.create = function(patient) {
		this.html += '<td class="patient-table-plan-of-care" id="PlanOfCareCell' + number + '">';
		this.html += '<table class="plan-of-care-table">';
		if(patient.hasRelationship() == true) {
			this.carePlans = patient.getCarePlans(); 
			if(this.carePlans == "--") {
				this.html += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell">';
				this.html += '<span class="plan-of-care-no-plans truncate link" style="width:' + (Columns.planOfCare.width - 33) + 'px;" onclick="PatientTable.launchCareOrders(' + patient.encounterId + ')">' + i18n.NO_PLANS_EXIST +'</span>'
				this.html += '</tr></td>';
			} else {
				this.display();
			}
		} else {
			this.html += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell">';
			this.html += '<span class="plan-of-care-no-relationship" style="width:' + (Columns.planOfCare.width - 33) + 'px;">'+"--"+'</span>'
			this.html += '</tr></td>';
		}
		this.html += '</table>';
		this.html += '</td>';
		return this.html;
	}
	
	/**
	 * Creates the display of plans
	 * @param none
	 * @return The HTML string representing the Care Plan cell.
	 */	
	this.display = function display() {
		this.createPlannedPlans(this.carePlans);
		this.createSuggestedPlans(this.carePlans);
		this.createInitiatedPlans(this.carePlans);
		var totalPlans = this.plannedCarePlans.length + this.initiatedCarePlans.length + this.suggestedCarePlans.length;
		
		if(totalPlans > 5) {
			this.displayPlans();
		} else {
			if(this.plannedCarePlans.length > 0) {
				this.displayPlannedPlans(this.plannedCarePlans.length);
			}
			if(this.suggestedCarePlans.length > 0) {
				this.displaySuggestedPlans();
			}
			if(this.initiatedCarePlans.length > 0) {
				this.displayInitiatedPlans(this.initiatedCarePlans.length);
			}
		}
	}
	
	/**
	 * Creates the display with more link if there are more than five plans.
	 * @param none
	 * @return The HTML string representing the Care Plan cell.
	 */	
	this.displayPlans = function displayCarePlans() {

		if(this.plannedCarePlans.length > 0) { 
			if(this.suggestedCarePlans.length > 0) {
				if(this.initiatedCarePlans.length > 0) {
					if(this.plannedCarePlans.length > 3) {
						this.displayPlannedPlans(3);
						this.remainingPlans = this.plannedCarePlans.length - 3;
						this.remainingDisplay = 1;
					} else {
						this.displayPlannedPlans(this.plannedCarePlans.length);
						this.remainingDisplay = 4 - this.plannedCarePlans.length;
					}
					this.displaySuggestedPlans();
					if(this.remainingPlans == 0) {
						if( this.initiatedCarePlans.length <= this.remainingDisplay) {
							this.displayInitiatedPlans(this.initiatedCarePlans.length);
						} else {
							if(this.remainingDisplay > 1) {
								this.remainingDisplay -= 1;
								this.displayInitiatedPlans(this.remainingDisplay);
								this.initiatedCarePlans.length -= this.remainingDisplay;
							}
							this.remainingPlans += this.initiatedCarePlans.length;
							this.displayRemainingPlans(this.remainingPlans);
						}	
					} else {
						this.remainingPlans += this.initiatedCarePlans.length; 
						this.displayRemainingPlans(this.remainingPlans);
					}	
				} else {
					if(this.plannedCarePlans.length > 4) {
						this.displayPlannedPlans(3);
						this.remainingPlans = this.plannedCarePlans.length - 3;
						this.displaySuggestedPlans();
						this.displayRemainingPlans(this.remainingPlans);
					} else {
						this.displayPlannedPlans(this.plannedCarePlans.length);
						this.displaySuggestedPlans();
					}
				}
			} else { 
				if(this.initiatedCarePlans.length > 0) {
					if(this.plannedCarePlans.length >= 4) {
						this.displayPlannedPlans(4);
						this.remainingPlans = this.plannedCarePlans.length - 4;
						if(this.initiatedCarePlans.length == 1 && this.remainingPlans == 0){
							this.displayInitiatedPlans(this.initiatedCarePlans.length);
						} else {
							this.remainingPlans += this.initiatedCarePlans.length;
							this.displayRemainingPlans(this.remainingPlans);
						}	
					} else {
						this.displayPlannedPlans(this.plannedCarePlans.length);
						this.remainingDisplay = 5 - this.plannedCarePlans.length;
						if( this.initiatedCarePlans.length <= this.remainingDisplay) {
							this.displayInitiatedPlans(this.initiatedCarePlans.length);
						} else {
							this.remainingDisplay -= 1;
							this.displayInitiatedPlans(this.remainingDisplay);
							this.initiatedCarePlans.length -= this.remainingDisplay;
							this.remainingPlans += this.initiatedCarePlans.length;
							this.displayRemainingPlans(this.remainingPlans);
						}	
					}
				} else { 
					if(this.plannedCarePlans.length > 5) {
						this.displayPlannedPlans(4);
						this.remainingPlans = this.plannedCarePlans.length - 4;
						this.displayRemainingPlans(this.remainingPlans);
					} else {
						this.displayPlannedPlans(this.plannedCarePlans.length);
					}
				}
			}	
		} else { 
			if(this.initiatedCarePlans.length > 0){
				if(this.suggestedCarePlans.length > 0) {
					this.displaySuggestedPlans();
					if(this.initiatedCarePlans.length > 4) {
						this.displayInitiatedPlans(3);
						this.remainingPlans = this.initiatedCarePlans.length - 3;
						this.displayRemainingPlans(this.remainingPlans);
					} else {
						this.displayInitiatedPlans(this.initiatedCarePlans.length);
					}
				} else { 
					if(this.initiatedCarePlans.length > 5) {
						this.displayInitiatedPlans(4);
						this.remainingPlans = this.initiatedCarePlans.length - 4;
						this.displayRemainingPlans(this.remainingPlans);
					} else {
						this.displayInitiatedPlans(this.initiatedCarePlans.length);
					}
				}
			} else { 
				this.displaySuggestedPlans();
			}
		}
	}
	
	/**
	 * Filters planned care plans from list of carePlans for patient.
	 * @param patient - the patient whose row is being constructed
	 */
	this.createPlannedPlans = function createPlannedPlans(carePlans) {
		for(var i = 0; i < carePlans.length; i++) {
			if(carePlans[i].meaning == 'PLANNED') {
				this.plannedCarePlans.push(carePlans[i]);
			}
		}
	}
	
	/**
	 * Displays planned care plans from list of plannedCarePlans for patient.
	 * @param number - the number of plans to be displayed
	 */
	this.displayPlannedPlans = function displayPlannedPlans(number) {
		for(var i = 0; i < number; i++) {
		    this.pocLineCount += 1;
			this.html += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell" onclick="PatientTable.launchCareOrders(' + patient.encounterId + ', &quot;PLANNED&quot;)">';
			this.html += '<span class="plan-of-care-planned-indicator"></span>';   
			this.html += '<span><span class="plan-of-care-planned truncate" style="width:'+ (Columns.planOfCare.width - 33) +'px;">' + this.plannedCarePlans[i].name + '</span></span>';
			this.html += '</td></tr>';
			
		}
	}
	
	/**
	 * Filters suggested care plans from list of carePlans for patient.
	 * @param patient - the patient whose row is being constructed
	 */
	this.createSuggestedPlans = function createSuggestedPlans(carePlans) {
		for(var i = 0; i < carePlans.length; i++) {
			if(carePlans[i].meaning == "PLAN SUGGEST") {
				this.suggestedCarePlans.push(carePlans[i]);
			}
		}
	}
	
	/**
	 * Displays suggested care plans.
	 * @param number - the number of plans to be displayed
	 */
	this.displaySuggestedPlans = function displaySuggestedPlans() {
        this.pocLineCount += 1;
		if(this.suggestedCarePlans.length > 0) {
			this.html += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell">';
			var display = this.suggestedCarePlans.length + " " + i18n.SUGGESTED_PLANS;
			if(this.suggestedCarePlans.length == 1) {
				display = this.suggestedCarePlans.length + " " + i18n.SUGGESTED_PLAN;
			} 
			this.html += '<span class="plan-of-care-suggested link truncate" style="width:' + (Columns.planOfCare.width - 33) + 'px;" onclick="PatientTable.launchCareOrders(' + patient.encounterId + ', &quot;SUGGESTED&quot;)">' + display + '</span>';
			this.html += '</td></tr>';
		}
	}
	
	
	/**
	 * Filters initiated care plans from list of carePlans for patient.
	 * @param patient - the patient whose row is being constructed
	 */
	this.createInitiatedPlans = function createInitiatedPlans(carePlans) {
		for(var i = 0; i < carePlans.length; i++) {
			if(carePlans[i].meaning == "INITIATED") {
				this.initiatedCarePlans.push(carePlans[i]);
			}
		}
	}
	
	/**
	 * Displays initiated care plans from list of initiatedCarePlans for patient.
	 * @param number - the number of plans to be displayed
	 */ 
	this.displayInitiatedPlans = function displayInitiatedPlans(number) {
		for(var i = 0; i < number; i++) {
            this.pocLineCount += 1;
			this.html += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell">';
			this.html += '<span class="plan-of-care-initiated link truncate" style="width:' + (Columns.planOfCare.width - 33) + 'px;" onclick="PatientTable.launchCareOrders(' + patient.encounterId + ', &quot;INITIATED&quot;); ">' + this.initiatedCarePlans[i].name + '</span>';
			this.html += '</td></tr>';
		}
	}
	

	/**
	 * Displays a string showing more number of care plans.
	 * @param number - the number of plans 
	 */
	this.displayRemainingPlans = function displayremainingPlans(numberOfPlans) {
        this.pocLineCount += 1;
		this.html += '<tr class="plan-of-care-table-row"><td class="plan-of-care-table-cell">';
		this.html += '<span class="plan-of-care-more link truncate" style="width:'+ (Columns.planOfCare.width - 33) + 'px;" onclick="PlanOfCareOverlay.displayOverlay(' + number + ',' + patient.encounterId + ')">' + numberOfPlans +' '+ i18n.MORE + '</span>';
		this.html += '</td></tr>';
	}
	
	/**
	 * Sets the cell object on this care plan cell
	 * @param cell - The visual object representing the care plan cell
	 */	
	this.setCell = function(cell, patient) {
		this.cell = cell;

		for(i = 0; i < this.pocLineCount ; i++) {
			var display = null;
			var displayrow = $($(cell).children()[0].rows[i].cells[0]);
			
			if(displayrow.children().hasClass("plan-of-care-planned-indicator")) {
				display = $(displayrow.children()[1]);
			} else if(displayrow.children().hasClass("plan-of-care-more")) {
				continue;
			} else {
				display = displayrow ;
			}
			this.createHover(display);
		}		
	}
	
	/**
	 * Creates hover for the plan of care
	 * @param label - The visual object representing the care plan display
	 */
	this.createHover = function (label) {
		if(label != null) {
			var header;
			var hoverdisplayText = null;
			var labelText = label[0]['innerText'];
			var html = " ";
			if (label.children().hasClass("plan-of-care-planned")) {
				header = i18n.PLANNED_PLAN_LABEL;
				html = labelText;
			} else if (label.children().hasClass("plan-of-care-suggested")){
				if(this.suggestedCarePlans.length == 1) {
					header = i18n.SUGGESTED_PLAN_LABEL;
				} else {
					header = i18n.SUGGESTED_PLANS_LABEL;
				}
				for(var i = 0; i < this.suggestedCarePlans.length; i++) {
					html += '<div>' + this.suggestedCarePlans[i].name +'&nbsp;&nbsp;&nbsp;'+'</div>';
				}	
			} else if (label.children().hasClass("plan-of-care-initiated")) {
				header = i18n.INITIATED_PLAN_LABEL;
				html = labelText;
			} 
			
			var config = {    
				 over: function(e) {Hover.display(e, header, html)},
				 timeout: 200,
				 out: function(e) {Hover.hide();},
				 interval: 200
				 
			};
			label.hoverIntent(config);	
			label.click(Hover.hide());
		}
	}
	
	/**
	 * Sets the links for actions on No Plans Exist link.
	 * @param patient - The patient object 
	 */	
	this.createNoPlanLink = function(patient) {
		this.noPlans.mouseover(function() {
			$(this).addClass("plan-of-care-no-plans-link");
		});
		this.noPlans.mouseleave(function() {
			$(this).removeClass("plan-of-care-no-plans-link");
		});
		this.noPlans.click(function() {
			PatientTable.launchCareOrders(patient.encounterId);
		});
	}	
	
};

/**
 * The visual cell displaying the Error Task column
 * @param number - The number used to reference cell's id
 */
function ErrorTaskCell(number) {
    this.number = number;
    this.value = null;
    this.errorTasks = null;

    /**
     * Creates the cell
     * @param patient - The patient whose cell is being generated
     * @return - The HTML string for this cell
     */
    this.create = function(patient) {
        this.errorTasks = ErrorTasks.getByEncounterId(patient.encounterId);
        var curClass = 'patient-table-error-task';
        if (this.errorTasks) {
            curClass += ' error-task-icon';
        }
        var html = '<td class="' + curClass + '" id="ErrorTaskCell' + number + '">';
        html += '</td>';
        return html;
    };

    /**
     * Sets the created cell and popover
     * @param cell - The visual object representing the Error Task cell
     */
    this.setCell = function(cell) {
        this.value = cell;
        if (this.errorTasks) {
            this.createPopover();
        }
    };

    /**
     * Creates the cell popover for the given patient
     */
    this.createPopover = function() {
        var content = Popover.createPopoverContents(this.errorTasks);
        $(this.value).click(function(event) {
            Popover.display(this, content, i18n.ERROR_TASK_POPOVER_LABEL);
        });
    };
}

/**
 * The visual column across all patient rows.
 */
function Column(index, id, defaultWidth, minWidth) {
	this.index = index;
	this.id = id;
	this.header = null;
	this.column = null;
	this.width = 0;
	this.defaultWidth = defaultWidth;
	this.minWidth = minWidth;
	this.leftBound = 0;
	this.rightBound = 0;
	
	/**
	 * Adjusts the size of the column
	 * @param point - The point to adjust the size to
	 */	
	this.resize = function(point) {
		this.column.css("width", this.width);
		Columns.widths[this.id] = this.width;
		this.header.size();
                 
	};
		
	/**
	 * Returns the point this column can be resized at the edge of this column
	 * @param none
	 */	
	this.getResizePoint = function() {
		var resizePoint = 0;
		var nextColumn = Columns.getNextColumn(this.index);
		
		if(nextColumn != null && nextColumn.column != null && nextColumn.column.position() != null) {			
			resizePoint = nextColumn.column.position().left;
		}
		return resizePoint;
	};
	
	/**
	 * Returns the width of the column plus 1 for the border on the right.
	 * @param none
	 * @return The width of the column
	 */	
	this.getWidth = function() {
		return this.width + 1;
	};
	
	/**
	 * Creates a string to store the column width percentage associated to this column
	 * @param none
	 * @return A string representing this column's width tag.
	 */	
	this.getColumnWidthTag = function() {
		var totalWidth = CareCompass.body.width();
		var percentage = Math.round((this.width/totalWidth) * 100);
		return this.id + ";" + percentage + ";";
	}
};

/**
 * Represents all the columns displayed in the Patient Table
 */
var Columns = {
    columns: [],
    location: null,
    patient: null,
    visit: null,
    careTeam: null,
    customs: [],
    ventilator: null,
    oxygen: null,
    bloodGasesPH: null,
    bloodGasesPaO2: null,
    bloodGasesPaCO2: null,
    bloodGasesHCO3: null,
    bloodGasesO2Sat: null,
    activities: null,
    medication: null,
    patientCare: null,
    assessment: null,
    other: null,
    qualityMeasures: null,
    planOfCare: null,
    errorTask: null,
    widths: [],
    resizeBuffer: 3,
    resizingColumn: null,
    resizer: null,

    /**
     * Populates the column objects with the columns across patient rows.  Must be called after the table is created and appended.
     * @param none
     */	
    create: function() {
        this.destroy();
        this.location = new Column(this.nextColumnIndex(), "location", 100, 70);
        this.columns.push(this.location);
        this.patient = new Column(this.nextColumnIndex(), "patient", 0, 0);
        this.columns.push(this.patient);
        this.visit = new Column(this.nextColumnIndex(), "visit", 0, 24);

        if (Configuration.errorTasksIndicator) {
            this.errorTask = new Column(this.nextColumnIndex(), "error-task", 45, 45);
            this.columns.push(this.errorTask);
        }

        this.columns.push(this.visit);
        
        this.careTeam = new Column(this.nextColumnIndex(), "care-team", 0, 100);
        this.columns.push(this.careTeam);

        if (Configuration.customs != null && Configuration.customs.length > 0 && Configuration.therapiesExist == false) {
            for (var i = 0; i < Configuration.customs.length; i++) {
                this.customs[i] = new Column(this.nextColumnIndex(), "custom", 0, 35);
                this.columns.push(this.customs[i]);
            }
        } 

        if (PatientLists.getActive()) {
            this.activities = new Column(this.nextColumnIndex(), "activities", 182, 182);
            this.columns.push(this.activities);
        }
        
        if (Configuration.bloodGases == true){
            this.bloodGasesPH = new Column(this.nextColumnIndex(), "bloodGasesPH", 60, 30);
            this.bloodGasesPaO2 = new Column(this.nextColumnIndex(), "bloodGasesPaO2", 60, 30);
            this.bloodGasesPaCO2 = new Column(this.nextColumnIndex(), "bloodGasesPaCO2", 60, 30);
            this.bloodGasesHCO3 = new Column(this.nextColumnIndex(), "bloodGasesHCO3", 60, 30);
            this.bloodGasesO2Sat = new Column(this.nextColumnIndex(), "bloodGasesO2Sat", 60, 30);

            this.columns.push(this.bloodGasesPH);
            this.columns.push(this.bloodGasesPaO2);
            this.columns.push(this.bloodGasesPaCO2);
            this.columns.push(this.bloodGasesHCO3);
            this.columns.push(this.bloodGasesO2Sat);
        }

        if (Configuration.ventilator == true){
            this.ventilator = new Column(this.nextColumnIndex(), "ventilator", 90, 30);
            this.columns.push(this.ventilator);
        }

        if (Configuration.oxygen == true){
            this.oxygen = new Column(this.nextColumnIndex(), "oxygen", 90, 30);
            this.columns.push(this.oxygen);
        }
        
        if (Configuration.qualityMeasures == true && Configuration.therapiesExist == false){
            this.qualityMeasures = new Column(this.nextColumnIndex(), "quality",  0, 65);
            this.columns.push(this.qualityMeasures);
        }
        
        if (Configuration.planOfCareColumn == true && PatientLists.getActive() != null && PatientLists.getActive().isDepartmental() == false && Configuration.therapiesExist == false){
            this.planOfCare = new Column(this.nextColumnIndex(), "plan-of-care",  0, 0);
            this.columns.push(this.planOfCare);
            Timers.start("CAP:CareCompass.PlansOfCare");
            Timers.stop("CAP:CareCompass.PlansOfCare");
        }

        this.resizer = $(document.createElement("div"));
        this.resizer.addClass("resizer");
        CareCompass.body.append(this.resizer);
        this.resizer.hide();
    },

    /**
     * Populates the column objects with the columns across patient rows.  Must be called after the table is created and appended.
     * @param none
     */	
    populate: function() {
        this.location.header = LocationHeader;
        this.location.column = PatientTable.tableDiv.find(".patient-table-location");
        this.patient.header = PatientHeader;
        this.patient.column = PatientTable.tableDiv.find(".patient-table-patient");
        this.visit.header = VisitHeader;
        this.visit.column = PatientTable.tableDiv.find(".patient-table-visit");

        if (Configuration.errorTasksIndicator) {
            this.errorTask.header = ErrorTaskHeader;
            this.errorTask.column = PatientTable.tableDiv.find(".patient-table-error-task");
        }
            
        this.careTeam.header = CareTeamHeader;
        this.careTeam.column = PatientTable.tableDiv.find(".patient-table-care-team");
               
        if (Configuration.customs != null && Configuration.customs.length > 0 && Configuration.therapiesExist == false) {
            var tempCustomColumns = PatientTable.tableDiv.find(".patient-table-custom");
            if (this.customs[0] != null && this.customs[0].width != null) {
                tempCustomColumns.width(this.customs[0].width - 10);
                tempCustomColumns.find(".truncate").width((this.customs[0].width - 23));
            }
            for (var i = 0; i<Configuration.customs.length; i++) {
                this.customs[i].header = PatientTableHeader.customHeadersList[i];
                this.customs[i].column =  $(tempCustomColumns[i]);
            }
        } 
        if (PatientLists.getActive()) {
            this.activities.header = ActivitiesHeader;
            this.activities.column=PatientTable.tableDiv.find(".patient-table-activities");
        }
         if (Configuration.bloodGases == true){
            this.bloodGasesPH.header = BloodGasesHeaderPH;
            this.bloodGasesPH.column =  PatientTable.tableDiv.find(".patient-table-bloodGasesPH");
            this.bloodGasesPaO2.header = BloodGasesHeaderPaO2;
            this.bloodGasesPaO2.column =  PatientTable.tableDiv.find(".patient-table-bloodGasesPaO2");
            this.bloodGasesPaCO2.header = BloodGasesHeaderPaCO2;
            this.bloodGasesPaCO2.column =  PatientTable.tableDiv.find(".patient-table-bloodGasesPaCO2");
            this.bloodGasesHCO3.header = BloodGasesHeaderHCO3;
            this.bloodGasesHCO3.column = PatientTable.tableDiv.find(".patient-table-bloodGasesHCO3");
            this.bloodGasesO2Sat.header = BloodGasesHeaderO2Sat;
            this.bloodGasesO2Sat.column = PatientTable.tableDiv.find(".patient-table-bloodGasesO2Sat");
        }
        if (Configuration.ventilator == true){
            this.ventilator.header = VentilatorHeader;
            this.ventilator.column = PatientTable.tableDiv.find(".patient-table-ventilator");
        }
        if (Configuration.oxygen == true){
            this.oxygen.header = OxygenHeader;
             this.oxygen.column = PatientTable.tableDiv.find(".patient-table-oxygen");
        }
        if (PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false && Configuration.therapiesExist == false) {
            this.activities.header = ActivitiesHeader;
            this.activities.column = PatientTable.tableDiv.find(".patient-table-activities");
        }
        if (Configuration.qualityMeasures && Configuration.therapiesExist == false){
            this.qualityMeasures.header = QualityMeasuresHeader;
            this.qualityMeasures.column = PatientTable.tableDiv.find(".patient-table-quality");
        }
        if (Configuration.planOfCareColumn == true && PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false && Configuration.therapiesExist == false)	{
            this.planOfCare.header = PlanOfCareHeader;
            this.planOfCare.column = PatientTable.tableDiv.find(".patient-table-plan-of-care");
        }
    },

    /**
     * Determines the next column index
     * @param none
     * @return The numeric column index
     */
    nextColumnIndex: function() {
        return this.columns.length;
    },

    /**
     * Resets all the column widths back to the default
     * @param none
     */
    destroy: function() {
        this.columns = [];
    },

    /**
     * Returns the available column width that should be used on initial load based on the window width
     * @param none
     */
    determineAvailableWidth: function() {
        var scrollBarWidth = 16;
        var availableWidth = CareCompass.body.width() - scrollBarWidth;
        var columnWidths = Configuration.columnWidths;
        for (var i = 0; i < this.columns.length; i++) {
            var column = this.columns[i];
            var idIndex = columnWidths.indexOf(column.id);
            if (idIndex == -1) {
                availableWidth -= (column.defaultWidth + 1);
                continue;
            }
        }
        return availableWidth - 2;
    },

    /**
     * Determines whether a point is at a resizable column edge.
     * @param point - The point object in question.
     * @return True if this point can be resized, false if not.
     */
    isResizePoint: function(point) {
        var resizablePoint = this.getColumnResizePoint(point);
        var leftBound = resizablePoint - this.resizeBuffer;
        var rightBound = resizablePoint + this.resizeBuffer;
        if (point >= leftBound && point <= rightBound) {
            return true;
        }
        return false;
    },

    /**
     * Returns the next point the column can be resized for the input point.
     * @param point - The point to base the next point from.
     * @return The next column point that is resizable. In horizontal client pixels.
     */
    getColumnResizePoint: function(point) {
        for (var i = 0; i < this.columns.length; i++) {
            if (point <= this.columns[i].getResizePoint() + this.resizeBuffer) {
                return this.columns[i].getResizePoint();
            }
        }
        return 0;
    },

    /**
     * Sets that the user has begun resizing a column
     * @param none
     */
    startResizing: function(column) {
     
        this.resizingColumn = column;
        this.resizer.show();
    },

    /**
     * Sets that the user has stopped resizing a column
     * @param none
     */
    stopResizing: function() {
        this.resizingColumn = null;
        this.resizer.hide();
        this.saveWidths();
    },

    /**
     * Returns the column class at the given point
     * @param point - The point to get the column at
     * @return The column object at the input point
     */
    getColumnAtPoint: function(point) {
        for (var i = 0; i < this.columns.length; i++) {
            if (point <= this.columns[i].getResizePoint() + this.resizeBuffer) {
                return this.columns[i];
            }
        }
    },

    /**
     * Returns the column previous to the input index, null if none exist
     * @param index - The current index to get the previous column from.
     * @return The previous column object, null if there is none
     */
    getPreviousColumn: function(index) {
        if (index > 0 && index < this.columns.length) {
            return this.columns[index - 1];
        }
        return null;
    },

    /**
     * Returns the column next to the input index, null if none exist
     * @param index - The current index to get the next column from.
     * @return The next column object, null if there is none
     */
    getNextColumn: function(index) {
        if (index >= 0 && index < this.columns.length - 1) {
            return this.columns[index + 1];
        }
        return null;
    },

    /**
     * Saves the current column width percentages
     * @param none
     */
    saveWidths: function() {
        var columnWidthValue = "";
        for (var i = 0; i < this.columns.length; i++) {
            columnWidthValue += this.columns[i].getColumnWidthTag();
        }
        //Service.saveUserConfiguration("CARECOMPASS_COLUMNS", columnWidthValue);
        //Service.loadConfiguration();
    },

    /**
     * Sets the column widths based on the saved configuration
     * @param none
     */
    initializeWidths: function() {
        var borderWidth = 1;
        var scrollBarWidth = 17;
        var constantWidth = borderWidth + scrollBarWidth; 
        var totalWidth = CareCompass.body.width();
        for (var i = 0; i < this.columns.length; i++) { 
            constantWidth += this.columns[i].defaultWidth + borderWidth;
            this.columns[i].width = this.columns[i].defaultWidth;	
        }
        // Location and patient column's width account for 30% of total width
        this.patient.width = Math.round(totalWidth * (0.3)) - this.location.width; 
        var remainingWidth = totalWidth - constantWidth - this.patient.width;
        var accountingForWidthRoundingProblems = 1;
        remainingWidth = remainingWidth - accountingForWidthRoundingProblems;

        var smallColumnWidth = 0;
        var largeColumnWidth = 0;
        var resultColumnWidth = 53;

        if (Configuration.therapiesExist == false 
            && Configuration.qualityMeasures == true
            && Configuration.customs != null && Configuration.customs.length > 0) {

            remainingWidth = remainingWidth - (resultColumnWidth * Configuration.customs.length);
            largeColumnWidth = Math.round((2 * remainingWidth) / 9);
            smallColumnWidth = Math.round(remainingWidth / 9);
            
            for (var i=0; i<this.customs.length; i++) {
                this.customs[i].width = resultColumnWidth;
            } 
            this.qualityMeasures.width = smallColumnWidth;
        }
        else if (Configuration.therapiesExist == false 
            && Configuration.customs != null && Configuration.customs.length > 0) {

            remainingWidth = remainingWidth - (resultColumnWidth * Configuration.customs.length);
            largeColumnWidth = remainingWidth/4;
            
            for (var i=0; i<this.customs.length; i++) {
                this.customs[i].width = resultColumnWidth;
            }
        }
        else if (Configuration.therapiesExist == false 
            && Configuration.qualityMeasures == true ){

            largeColumnWidth = Math.round((2 * remainingWidth) / 9);
            smallColumnWidth = Math.round(remainingWidth / 9);

            this.qualityMeasures.width = smallColumnWidth; 
        }
        else {
            largeColumnWidth = Math.round(remainingWidth/4);
        }
        remainingWidth = Math.round(largeColumnWidth*4);
        remainingWidth -= accountingForWidthRoundingProblems;
        this.careTeam.width = Math.round(remainingWidth * (0.375)); 
        
        if (Configuration.planOfCareColumn == true && Configuration.therapiesExist == false && PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false) {	
            this.planOfCare.width = Math.round(remainingWidth * (0.375)) - 10;  
            remainingWidth -= this.planOfCare.width; //0.75
        }
        remainingWidth -= this.careTeam.width; 
        if (PatientLists.getActive() && PatientLists.getActive().isDepartmental() == false) { 
            this.visit.width = remainingWidth;
        }
        else if (Configuration.targetedDischargeIndicator == false) {	
            if (Configuration.therapiesExist == false) {
                if (PatientLists.getActive() && PatientLists.getActive().isDepartmental() == true) {
                    this.visit.width = remainingWidth;
                } 
                else {
                    this.visit.width = remainingWidth;
                }
            } else {
                if (PatientLists.getActive() && PatientLists.getActive().isDepartmental() == true) {
                    this.visit.width = remainingWidth;
                }
                else {
                    this.visit.width = remainingWidth ;
                }
            }
        }
        else {
            this.visit.width = remainingWidth;
        }
        var minimumVisitCellWidth = 12;
        if (this.visit.width < minimumVisitCellWidth) {
            this.visit.width = minimumVisitCellWidth;
        }
    },

    /**
     * Returns the column object if one exists for the input id.
     * @param id - The string id of the column to return.
     * @return - The column object for the input id, null if none exist.
     */
    getColumnById: function(id) {
        for (var i = 0; i < this.columns.length; i++) {
            if (this.columns[i].id == id) {
                return this.columns[i];
            }
        }
        return null;
    },

    /**
     * Sizes all the columns to their widths
     * @param none
     */
    resize: function() {
         for (var i = 0; i < this.columns.length; i++) {
            this.columns[i].resize();
         }
    }
} ;
/**
 * The visual representation of the hover over the activites bars
 */	
var ActivitiesHover =  {
	hover: null,
	cursor: false,
	width: 64,
	
	/**
	 * Displays the hover based on the input target object.
	 * @param target - The object to display the hover centered on.
	 * @param label - The hover label.
	 * @param counts - The task counts object to display in the hover.
	 */	
	display: function(target, label, counts, patientRow, patient, cell) {
		if(this.hover == null) {
			if(label != "") {
				this.create(label, counts.meds, counts.patientCare, counts.assessment, counts.other, patientRow, patient, cell);
			}
			else {	
				this.create("", counts.medicationCount, counts.patientCareCount, counts.assessmentCount, counts.otherCount, patientRow);
			}
		}
		if(label == "") {
			this.hover.addClass("activities-hover all");
			$(this.hover.children()[1]).addClass("activities-hover-table-timeline");
			var left = target.offset().left + target.width()/2 - 28;
			var top = target.offset().top - 105;
			this.hover.css("left", left);
			this.hover.css("top", top);
			this.hover.appendTo(CareCompass.body);
		}
		else if(target.offset().top > 500) {
			this.hover.addClass("activities-hover bottom");
			$(this.hover.children()[0]).addClass("activities-hover-label bottom");
			$(this.hover.children()[1]).addClass("activities-hover-table bottom");
			var left = target.offset().left + target.width()/2 - 32;
			var top = target.offset().top - 117;
			this.hover.css("left", left);
			this.hover.css("top", top);
			this.hover.appendTo(CareCompass.body);
		}
		else {
			var left = target.offset().left + target.width()/2 - 32;
			var top = target.offset().top + target.height();
			this.hover.css("left", left);
			this.hover.css("top", top);
			this.hover.appendTo(CareCompass.body);
		}
		this.attachEventListener();
	},
	/**
	 * Attaches event listeners
	 * @param none
	 */
	attachEventListener: function () {
		$('.activities-hover').mouseup(function (event) {
			event.stopImmediatePropagation();
			event.cancelBubble = true;
			event.returnValue = false;
			return false;
		});
		//close popover when we click in patient table
		$(document).mouseup(function () {
			ActivitiesHover.hide();
		});
		//allow clicks
		$(this.hover).mouseup(function (event) {
			event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
		});
		$('.patient-table-container').scroll(function () {
			ActivitiesHover.hide();
		});
	},
	
	/**
	 * removes the event listeners
	 * @param none
	 */
	unbindEventListener: function () {
		$(document).unbind('keydown');
		//remove the click callback to close the popover
		$(window).unbind('click');
		// unbind the hide click event when popover closed.
		$(document).unbind('mouseup', ActivitiesHover.hide());
		$(this.hover).unbind('mouseup');
		$('.patient-table-container').unbind('scroll', ActivitiesHover.hide());
	},
	/**
	 * Hides the hover
	 * @param none
	 */	
	hide: function() {
		if(this.hover != null && this.cursor == false) {
			this.hover.remove();
			this.hover = null;
			this.cursor = false;
		}
	},
	
	/**
	 * Creates and initializes the hover
	 * @param label - The hover label.
	 * @param meds - The numeric meds count to display.
	 * @param patientCare - The numeric patient care count to display.
	 * @param assessment - The numeric assessment count to display.
	 * @param other - The numeric other count to display.
	 */	
	create: function(label, meds, patientCare, assessment, other, patientRow, patient, cell) {
		this.hover = $(document.createElement('div'));
		this.hover.prop("id", "hover");
		this.hover.addClass('activities-hover');
		var html = "";
		html += '<div class="activities-hover-label">' + label + '</div>';
		html += '<table class="activities-hover-table">';
		html += '<tr><td class="activities-hover-medications"><div class="medications-icon"></div></td><td class="activities-hover-medications-count">'+meds+'</td></tr>';
		html += '<tr><td class="activities-hover-patient-care"><div class="patient-care-icon"></div></td><td class="activities-hover-patient-care-count">' + patientCare + '</td></tr>';
		html += '<tr><td class="activities-hover-assessment"><div class="assessment-icon"></div></td><td class="activities-hover-assessment-count">' + assessment + '</td></tr>';
		html += '<tr><td class="activities-hover-other"><div class="other-icon"></div></td><td class="activities-hover-other-count">' + other + '</td></tr>';
		html += '</table>';
		this.hover.append(html);
		var config = {    
			 over: function(){ActivitiesHover.cursor = true;},
			 timeout: 200,
			 out: function(e) {ActivitiesHover.cursor = false; ActivitiesHover.hide();},
			 interval: 10			 
		};
		this.hover.hoverIntent(config);
		this.label = $(this.hover.children()[0]);
		if(label != "") {
			this.medicationCount = $($(this.hover.children()[1].rows[0].cells[1]));
			this.patientCareCount = $($(this.hover.children()[1].rows[1].cells[1]));
			this.assessmentCount = $($(this.hover.children()[1].rows[2].cells[1]));
			this.otherCount = $($(this.hover.children()[1].rows[3].cells[1]));
			//When the patient Drill down opens the Hover does not disappear automatically.
			switch(label) {
			case "Overdue":
				var type = "OVERDUE";
				break;
			case "Current":
				var type = "SCHEDULED";
				break;
			case "Unscheduled":
				var type = "PRN";
				break;
			}
			this.medicationCount.mouseover(function() {
				$(this).addClass("activity-counts-underline");
			});
			this.medicationCount.mouseout(function() {
				$(this).removeClass("activity-counts-underline");
			});
			this.patientCareCount.mouseover(function() {
				$(this).addClass("activity-counts-underline");
			});
			this.patientCareCount.mouseout(function() {
				$(this).removeClass("activity-counts-underline");
			});
			this.assessmentCount.mouseover(function() {
				$(this).addClass("activity-counts-underline");
			});
			this.assessmentCount.mouseout(function() {
				$(this).removeClass("activity-counts-underline");
			});
			this.otherCount.mouseover(function() {
				$(this).addClass("activity-counts-underline");
			});
			this.otherCount.mouseout(function() {
				$(this).removeClass("activity-counts-underline");
			});
			
			this.medicationCount.mouseup(function() {
				ActivitiesHover.hover.remove();
				ActivitiesHover.hover = null;
				ActivitiesHover.cursor = false;
				filtersMedication = ["PATIENTCARE", "ASSESSMENT", "OTHER"];
				patientRow.hover.click(patient.encounterId, filtersMedication, type);
			});

			this.patientCareCount.mouseup(function() {
				ActivitiesHover.hover.remove();
				ActivitiesHover.hover = null;
				ActivitiesHover.cursor = false;
				filtersPatientCare = ["MEDICATIONS",  "ASSESSMENT", "OTHER"];
				patientRow.hover.click(patient.encounterId, filtersPatientCare, type);
			});
			
			this.assessmentCount.mouseup(function() {
				ActivitiesHover.hover.remove();
				ActivitiesHover.hover = null;
				ActivitiesHover.cursor = false;
				filtersAssesment = ["MEDICATIONS",  "PATIENTCARE", "OTHER"];
				patientRow.hover.click(patient.encounterId, filtersAssesment, type);
			});
			
			this.otherCount.mouseup(function() {
				ActivitiesHover.hover.remove();
				ActivitiesHover.hover = null;
				ActivitiesHover.cursor = false;
				filtersOther = ["MEDICATIONS", "PATIENTCARE",  "ASSESSMENT"];
				patientRow.hover.click(patient.encounterId, filtersOther, type);
			});
		}
	}
}

/**
 * The visual representation of the hover over the activities column count bar
 */ 
var ActivitiesCellHover =  {
    hover: null,
    cursor: false,
    width: 64,
    encounterId: null,
    
    /**
     * Displays the hover based on the input target object.
     * @param target - The object to display the hover centered on.
     * @param label - The hover label.
     * @param overdueTaskCounts - The overdue task counts object to display in the hover.
     * @param currentTaskCounts - The current task counts object to display in the hover.
     * @param unscheduledTaskCounts - The unscheduled task counts object to display in the hover.
     * @param patientRow - the patient row
     * @param patient - the patient
     * @param cell - the cell this hover is for.
     */ 
    display: function(target, label, overdueTaskCount, currentTaskCount, unscheduledTaskCount, patientRow, patient, cell) {
        if(this.hover == null) {
            this.encounterId = patient.encounterId;
            var meds = 0;
            var overdueMeds = 0;
            var patientCare = 0;
            var overduePatientCare = 0;
            var assessment = 0;
            var overdueAssessment = 0;
            var other = 0;
            var overdueOther = 0;
            if (unscheduledTaskCount != null) {
                meds +=unscheduledTaskCount.meds;
                patientCare += unscheduledTaskCount.patientCare;
                assessment += unscheduledTaskCount.assessment;
                other +=unscheduledTaskCount.other;
            }
            if (currentTaskCount != null) {
                meds += currentTaskCount.meds;
                patientCare += currentTaskCount.patientCare;
                assessment += currentTaskCount.assessment;
                other += currentTaskCount.other;
            }
            if (overdueTaskCount != null) {
                meds += overdueTaskCount.meds;
                overdueMeds += overdueTaskCount.meds;
                patientCare += overdueTaskCount.patientCare;
                overduePatientCare += overdueTaskCount.patientCare;
                assessment += overdueTaskCount.assessment;
                overdueAssessment += overdueTaskCount.assessment;
                other += overdueTaskCount.other;
                overdueOther += overdueTaskCount.other;
            }
            this.create(i18n.ACTIVITY_SUMMARY_TAB, meds, overdueMeds, patientCare, overduePatientCare, assessment, overdueAssessment, other, overdueOther, patientRow, patient, cell);
        }
        var rightSide = CareCompass.body.width() - 16;
        var bottom = CareCompass.body.height();
        var dialogWidth = target.width();
        
        if(target.offset().top > (bottom/2)) {
            var left = target.offset().left + target.width()/2 - 16;
            if ((left + dialogWidth) > rightSide) {
                left = rightSide - dialogWidth - 16;
            }
            var top = target.offset().top - 100;
            if (top < 0) {
                top = 0;
            }
            this.hover.css("left", left);
            this.hover.css("top", top);
            this.hover.appendTo(CareCompass.body);
            Shadow.display(this.hover);
        }
        else {
            var left = target.offset().left + target.width()/2 - 16;
            if ((left + dialogWidth) > rightSide) {
                left = rightSide - dialogWidth - 16;
            }
            var top = target.offset().top + target.height();
            if (top < 0) {
                top = 0;
            }
            this.hover.css("left", left);
            this.hover.css("top", top);
            this.hover.appendTo(CareCompass.body);
            Shadow.display(this.hover);
        }
    },
    
    /**
     * Hides the hover
     * @param none
     */ 
    hide: function() {
        if(this.hover != null && this.cursor == false) {
            this.hover.remove();
            this.hover = null;
            this.cursor = false;
        }
    },
    
    /**
     * Creates and initializes the hover
     * @param label - The hover label.
     * @param meds - The numeric meds count to display.
     * @param patientCare - The numeric patient care count to display.
     * @param overduePatientCare - The numeric overdue patient care count to display.
     * @param overdueAssessment - The numeric overdue assessment count to display.
     * @param assessment - The numeric assessment count to display.
     * @param other - The numeric other count to display.
     * @param overdueOther - The numeric overdue other count to display.
     * @param patientRow - The patient row for this display
     * @param patient - the patient being displayed
     * @param cell - the cell that this is being displayed over
     */ 
    create: function(label, meds, overdueMeds, patientCare, overduePatientCare, assessment, overdueAssessment, other, overdueOther, patientRow, patient, cell) {
        this.hover = $(document.createElement('div'));
        this.hover.prop("id", "hover");
        this.hover.addClass('activities-cell-hover');
        var html = "";
        html += '<div class="hover-content borderless">';
        html += '<div class="hover-label">' + label + '</div>';;
        html += '<table class="activities-cell-hover-table">';
        html += ActivitiesCellHover.createHoverRowContents(patient.encounterId, "med_blue", i18n.MEDICATIONS, "openActivityTabMedications", meds, overdueMeds);
        html += ActivitiesCellHover.createHoverRowContents(patient.encounterId, "patient-care-icon", i18n.PATIENT_CARE, "openActivityTabPatientCare", patientCare, overduePatientCare);
        html += ActivitiesCellHover.createHoverRowContents(patient.encounterId, "assessment-icon", i18n.ASSESSMENT, "openActivityTabAssessments", assessment, overdueAssessment);
        html += ActivitiesCellHover.createHoverRowContents(patient.encounterId, "other-icon", i18n.OTHER, "openActivityTabOthers", other, overdueOther);
        html += '</table>';
        html += '</div>';
        this.hover.append(html);
        var config = {    
             over: function(){ActivitiesCellHover.cursor = true;},
             timeout: 200,
             out: function(e) {ActivitiesCellHover.cursor = false;ActivitiesCellHover.hide();},
             interval: 10            
        };
        this.hover.hoverIntent(config);
    },
    
    /**
     * Create one of the rows in the hover.
     * @param encounterId - The encounter ID for this patient
     * @param iconClass - The class name for the ICON to be displayed
     * @param label - the text to appear on the line
     * @param clickMethod - the function on the PatientTable to call when this row is clicked on.
     * @param count - The number of total activities of this type
     * @param overdueCount - the number of overdue activities of this type
     */
    createHoverRowContents: function createHoverRow(encounterId, iconClass, label, clickMethod, count, overdueCount) {
        var html = '<tr class="activities-cell-hover-table-row" onclick="PatientTable.' + clickMethod + '(' + encounterId + ')">';
        html += '<td class="activities-cell-hover-icons"><div class="' + iconClass + '"></div></td>';
        html += '<td class="activities-cell-hover-text-label">' + label + ':</td>';
        html += '<td class="activities-cell-hover-count">' + count + '</td>';
        if (overdueCount > 0) {
            html += '<td class="activities-cell-hover-overdue-count">(' + overdueCount + ')</td>';
        }
        else {
            html += '<td style="display:none;" class="activities-cell-hover-overdue-count"></td>';
        }
        html += '</tr>';
        return html;
    }
}

/**
 * Represents the visual time line displayed of activities across all patients at the bottom of CareCompass
 */ 
var ActivityTimeline = {
    container: null,
    header: null,
    heatmap: null,
    minimumHeight: 27,
    timebucketMax:15,
    defaultOpen: true,
    requestTaskCount: 0,

    /**
     * Creates and initializes the timeline
     * @param none
     */ 
    create: function createActivityTimeline() {
        if (this.defaultOpen === false) {
            Timers.start("USR:CareCompass.LoadTimeLineCollapsed");
        }
        else {
            Timers.start("USR:CareCompass.LoadTimeLineExpanded");
        }

        this.remove();
        this.container = $(document.createElement("div"));
        this.container.addClass("activity-timeline");
        var html = "";
        var description = "";
        if (this.defaultOpen === false) {
            html += '<div class="activity-timeline-header"><div class="activity-timeline-label">' + i18n.ACTIVITY_TIMELINE + '</div><div class="timeline-up"></div></div>';
            this.container.css("bottom", this.minimumHeight-this.container.height()); // Hide.
            description = i18n.SHOW_TIMELINE;
        }
        else {
            html += '<div class="activity-timeline-header"><div class="activity-timeline-label">' + i18n.ACTIVITY_TIMELINE + '</div><div class="timeline-down"></div></div>';
            this.container.css("bottom", "0px"); // Show.
            description = i18n.HIDE_TIMELINE;
        }
        html += '<div class="shadow-top"></div>';
        this.container.append(html);
        this.header = $(this.container.children()[0]);
        this.arrow = $(this.header.children()[1]);

        this.header.click(function() {
            if (CareCompass.browser.height() >= CareCompass.minHeightSupported) {
                if (ActivityTimeline.defaultOpen === true) {
                    Timers.start("USR:CareCompass.CollapseTimeLine");
                    ActivityTimeline.defaultOpen = false;
                    ActivityTimeline.arrow.removeClass("timeline-down");
                    ActivityTimeline.arrow.addClass("timeline-up");
                    PatientTable.display();
                    ActivityTimeline.container.animate({bottom: ActivityTimeline.minimumHeight-ActivityTimeline.container.height()}, 200, function() {
                    }); 
                    Service.saveUserConfiguration("CARECOMPASS_TIMELINE", "CLOSED");
                    Timers.stop("USR:CareCompass.CollapseTimeLine");
                }
                else {
                    Timers.start("USR:CareCompass.ExpandTimeLine");
                    ActivityTimeline.container.animate({bottom: 0}, 200);
                    ActivityTimeline.defaultOpen = true;
                    ActivityTimeline.arrow.removeClass("timeline-up");
                    ActivityTimeline.arrow.addClass("timeline-down");
                    PatientTable.display();
                    Service.saveUserConfiguration("CARECOMPASS_TIMELINE", "OPEN");
                    Timers.stop("USR:CareCompass.ExpandTimeLine");
                }
            }
        });
        CareCompass.body.append(this.container);
        this.size();
        if (this.defaultOpen == false) {
            Timers.stop("USR:CareCompass.LoadTimeLineCollapsed");
        }
        else {
            Timers.stop("USR:CareCompass.LoadTimeLineExpanded");
        }
    },

    /**
     * Returns the description of the header hover based on whether the timeline is displayed or not.
     * @param none
     */ 
    getHoverDescription: function() {
        if (this.defaultOpen === false) {
            return description = i18n.SHOW_TIMELINE;
        }
        else {
            return description = i18n.HIDE_TIMELINE;
        }
    },

    /**
     * Initializes the hover with the correct description based on the state of the timeline.
     * @param none
     */ 
    initializeHover: function() {
        var config = {
            over: function(e) {Hover.display(e, i18n.ACTIVITY_TIMELINE, ActivityTimeline.getHoverDescription())},
            timeout: 200,
            out: function(e) {Hover.hide();},
            interval: 200
        };
        this.header.hoverIntent(config);
    },
    
    /**
     * Populates the timeline and visual heatmap of activities for the loaded patients
     * @param none
     */ 
    populate: function() {
        if (this.container === null) {
            return;
        }
        if (this.heatmap !== null) {
            this.heatmap.remove();
            this.heatmap = null;
        }
        this.heatmap = $(document.createElement('div'));
        this.populateTimeline();
        this.populateTimebuckets();
        this.container.append(this.heatmap);
    },
    remove: function() {
        if (this.container !== null) {
            this.container.remove();
            this.container = null;
        }
    },

    /**
     * Populates the timeline for the next 12 hours and overdue
     * @param none
     */ 
    populateTimeline: function() {
        var html = '<table class="timeline">';
        html += '<tr>';
        if (Tasks.scheduled !== null) {
            if (Tasks.scheduled[0].total > 0) {
                html += '<td class="time overdue">' + i18n.OVERDUE + '</td>';   
            }
            else {
                html += '<td class="time">' + i18n.OVERDUE + '</td>';
            }
            for (var i = 1; i < Tasks.scheduled.length; i++) {
                var time = new Date(Tasks.scheduled[i].startTime);
                html += '<td class="time">' + time.format(DateFormats.DATE_FORMAT_MILITARY_TIME) + '</td>';
            }
        }
        else {
            html += '<td class="time">' + i18n.OVERDUE + '</td>';
            for (var i= 0; i < 12; i++) {
                var time = new Date();
                time.setHours(time.getHours() + i);
                time.setMinutes(0);
                html += '<td class="time">' + time.format(DateFormats.DATE_FORMAT_MILITARY_TIME) + '</td>';
            }
        }
        html += '</tr>';
        html += '</table>';
        this.heatmap.append(html);
    },
    
    /**
     * Populates the timebuckets based on all patients activities
     * @param none
     */ 
    populateTimebuckets: function() {
        var table = $(document.createElement('table'));
        table.addClass("timebuckets");
        var row = $(document.createElement('tr'));
        table.append(row);
        var buckets = [];
        if (Tasks.scheduled != null){
            for (var i = 0; i < Tasks.scheduled.length; i++) {
                var timebucket = Tasks.scheduled[i];
                var bucket = $(document.createElement('td'));
                bucket.addClass("timebucket");
                var bar = $(document.createElement('div'));
                bar.addClass("bar");
                bar.attr("index", i);
                if (i === 0) {
                    this.determineOverdueBackground(timebucket, bar);
                }
                else {
                    this.determineOpacity(timebucket, bar);
                }
                bar.css("height", this.determineTimebucketHeight(timebucket) + "%");
                bucket.append(bar);
                bucket.attr("index", i);
                row.append(bucket);
                this.setBar(bar, i);
            }
        }
        this.heatmap.append(table);
    },

    /**
     * Determines the height of a timebucket based on the max activities
     * @param timebucket - the timebucket in question.
     * @return The percentage height the timebucket should be of its container.
     */ 
    determineTimebucketHeight: function(timebucket) {
        var height = 0;
        //any time column with more than 15 tasks will have the maximum height
        if (timebucket.total >= this.timebucketMax) {
            height = 100;
        }
        else {
            height = Math.round((timebucket.total / this.timebucketMax) * 100);
        }
        return height;
    },

    /**
     * Determines the opacity for overdue timebucket based on the numner of activities in bucket
     * @param timebucket - the overdue timebucket
     * @param bar- the activity bar
     * @return none
     */
     determineOverdueBackground: function (timebucket, bar) {
         if (timebucket.total === 14) {
             bar.addClass("bar overdueOpacity90");
         }
         else if (timebucket.total === 12 || timebucket.total === 13) {
             bar.addClass("bar overdueOpacity80");
         }
         else if (timebucket.total === 10 || timebucket.total === 11) {
             bar.addClass("bar overdueOpacity70");
         }
         else if (timebucket.total === 8 || timebucket.total === 9) {
             bar.addClass("bar overdueOpacity60");
         }
         else if (timebucket.total === 7) {
             bar.addClass("bar overdueOpacity50");
         }
         else if (timebucket.total === 5 || timebucket.total === 6) {
             bar.addClass("bar overdueOpacity40");
         }
         else if (timebucket.total === 4 || timebucket.total === 2 || timebucket.total === 3) {
             bar.addClass("bar overdueOpacity30");
         }
         else if (timebucket.total === 1) {
             bar.addClass("bar overdueOpacity20");
         }
         else if (timebucket.total > 14) {
             bar.addClass("bar overdueOpacity100");
         }
     },


    /**
     * Determines the opacity of a timebucket based on the number of activities in the bucket
     * @param timebucket - the timebucket in question.
     * @param bar- the activity bar
     * @return none.
     */
     determineOpacity: function (timebucket, bar) {
         if (timebucket.total === 14) {
             bar.addClass("bar opacity90");
         }
         else if (timebucket.total === 12 || timebucket.total === 13) {
             bar.addClass("bar opacity80");
         }
         else if (timebucket.total === 10 || timebucket.total === 11) {
             bar.addClass("bar opacity70");
         }
         else if (timebucket.total === 8 || timebucket.total === 9) {
             bar.addClass("bar opacity60");
         }
         else if (timebucket.total === 7) {
             bar.addClass("bar opacity50");
         }
         else if (timebucket.total === 5 || timebucket.total === 6) {
             bar.addClass("bar opacity40");
         }
         else if (timebucket.total === 4 || timebucket.total === 2 || timebucket.total === 3) {
             bar.addClass("bar opacity30");
         }
         else if (timebucket.total === 1) {
             bar.addClass("bar opacity20");
         }
         else if (timebucket.total > 14) {
             bar.addClass("bar opacity100");
         }
    },

    /**
     * Sizes the activity timeline
     * @param none
     */ 
    size : function sizeActivityTimeline() {
        if (this.container === null) {
            return;
        }
        if (CareCompass.browser.height() < CareCompass.minHeightSupported) {
            this.container.css("bottom", this.minimumHeight-this.container.height());
        } else {
            if (this.defaultOpen === true) {
                this.container.css("bottom", 0);
            }
            else {
                this.container.css("bottom", this.minimumHeight-this.container.height());
            }
        }
    },

    /**
     * Determines the height of the timeline based on whether it is currently displayed or not.
     * @param none
     */
    getHeight : function getActivityTimelineHeight() {
        if (this.defaultOpen === true) {
            if (CareCompass.browser.height() < CareCompass.minHeightSupported){
                return ActivityTimeline.minimumHeight;
            }
            return this.container.height();
        }
        else {
            return ActivityTimeline.minimumHeight;
        }
    },

    /**
     *Sets the bar index
     * on click, check if the patient drill down is displayed or already activites popover is displayed or
     * check that the array Tasks.scheduled[] has the property taskIds. 
     * if the property taskIds is not present do not display popover when user clicks on timebucket.
     * display the old hover dialog.
     * @param bar- the activity bar
     * @param index- the index of the activity bar starts from zero through 12
     */
    setBar : function(bar, index) {
        bar.on('click', function(event) {
            var timeBucket = Tasks.scheduled[$(this).attr("index")];
            if (PatientDrillDown.isDisplayed() === false && ActivitiesPopOver.active === false ) {
                if (timeBucket.hasOwnProperty('taskIds')) {
                    ActivityTimeline.loadTasks(Tasks.scheduled[$(this).attr("index")]);
                    ActivitiesPopOver.getContent($(this), index, Tasks.scheduled[$(this).attr("index")]);
                }
                else {
                    // display the old hover 
                    ActivitiesHover.display($(this), "", Tasks.scheduled[$(this).attr("index")]);
                }
            }
        });
    },
    /**
     * Loads the task details for the taskId's present in that time bucket by calling CareCompass service
     * @param timeBucket- the timeBucket in the Activity timeline.
     */
    loadTasks:function(timeBucket) {
        var taskIds = window.external.DiscernObjectFactory("DOUBLEMAP");
        for (var i = 0; i < timeBucket.taskIds.length; i++) {
            taskIds.Add(i, timeBucket.taskIds[i]);
        }
        this.requestTaskCount = taskIds.GetCount();
        // call CareCompass service to get the task details. Passing PPR code as zero will create a 
        // null User profile where no charting agents will be returned.
        Service.loadTasks(taskIds, 0);
    }
};

/**
*	allow setting the patient focus
*
*
*/
var CC_PatientFocus = new function(){
	this.patientFocus = window.external.DiscernObjectFactory("PVPATIENTFOCUS");
};
/*********************************************************************************************************
 * Error Checking
 * 
 * 
 *********************************************************************************************************/
/**
 * Simple object to keep track of the call stack and the functions called
 * @param none
 */	
 function ErrorObject() {
	this.callStack = '';
	this.functions = [];
	this.src = ''; //check if server error or javascript error
				   // Leave blank if js error
}
 
/**
 * Builds the callstack, generates an ErrorObject, and adds to CareCompass.errorObjects
 * @param none
 */	
function showCallStack() {
	var f = showCallStack;
	var result="Call stack:\n";
	
	var errorObject = new ErrorObject();
	
	while((f = f.caller) != null) {
		var functionObject = { functions: [] };
		
		var sFunctionName = f.toString().match(/^function (\w+)\(/);
		sFunctionName = (sFunctionName) ? sFunctionName[1] : 'anonymous function';
		
		functionObject.name = sFunctionName;
		result += sFunctionName;
		
		functionObject.functionCall = f.toString();
		// Check null value of f.arguments.
		// This was causing a leak for some js errors.
		var fArgs = (f.arguments == null ? "null" : f.arguments);
		functionObject.arguments = fArgs.toString();
		functionObject.info = getArguments(f.toString(), fArgs);
		
		result += getArguments(f.toString(), fArgs);
		result += "\n";
		
		errorObject.functions[errorObject.functions.length] = functionObject;
	}

	errorObject.callStack = result;
	CareCompass.errorObjects[CareCompass.errorObjects.length] = errorObject;
}

/**
 * Builds the server error stack, generates an ErrorObject, and adds to CareCompass.errorObjects
 * Based on function showCallStack() above
 * @param none
 */
function showServerErrors() {
	var func = showServerErrors.caller; //To avoid repetition of server error message
	var result = "Server Error:\n";

	var errorObject = new ErrorObject();

	while((func = func.caller) !== null) {
		var functionObject = { functions: [] };

		var sFunctionName = func.toString().match(/^function (\w+)\(/)
		sFunctionName = (sFunctionName) ? sFunctionName[1] : 'anonymous function';

		functionObject.name = sFunctionName;
		result += sFunctionName;

		functionObject.functionCall = func.toString();
		var fArgs = (func.arguments == null ? "null" : func.arguments);
		functionObject.arguments = fArgs.toString();
		functionObject.info = getArguments(func.toString(), fArgs);

		result += getArguments(func.toString(), fArgs);
		result += "\n";

		errorObject.functions[errorObject.functions.length] = functionObject;
	}

	errorObject.callStack = result;
	errorObject.src = 'S'; //set to 'S' for server error
	CareCompass.errorObjects[CareCompass.errorObjects.length] = errorObject;
}


function getArguments(sFunction, a) {
	var i = sFunction.indexOf(' ');
	var ii = sFunction.indexOf('(');
	var iii = sFunction.indexOf(')');
	var aArgs = sFunction.substr(ii+1, iii-ii-1).split(',');
	var sArgs = '';
	for(var i=0; i<a.length; i++) {
		var q = ('string' == typeof a[i]) ? '"' : '';
		sArgs+=((i>0) ? ', ' : '')+(typeof a[i])+' '+aArgs[i]+':'+q+a[i]+q+'';
	}
	return '('+sArgs+')';
}

/**
 * Generates the callstack info and displays the error dialog when any JavaScript error occurs
 * @param none
 */	
window.onerror = function Error(message, url, lineNumber) {
	//url specifies location of js file, or undefined for server errors
	if (url != undefined) {
		showCallStack();
	}
	ErrorDialog.display();
	return true;
};  

/**
 * The screen that displays when the popover is failed to execute XMLCclRequest.
 */
var PopoverErrorScreen = {
    screen: null,

    /**
     * Displays the screen.
     * @param {String} label - the label to display
     * @param {HTMLElement} popover - the popover html object to attach the error screen to.
     */
    display: function displayPopoverErrorScreen(label, popover) {
        if(this.isDisplayed() == false){
            this.screen = $(document.createElement('div'));
            this.screen.addClass('popover-error-screen');
            this.screen.append(this.create(label));
            popover.append(this.screen);
            showServerErrors(); //Call a separate function for server errors
        }
    },


    /**
     * Hides the screen.
     * @param none
     */
    hide: function hidePopoverErrorScreen() {
        if(this.screen != null) {
            $('.error-screen').remove();
            this.screen = null;
        }
    },

    /**
     * Creates the screen.
     * @param label to display
     */
    create: function createPopoverErrorScreen(label){
        var html = '<div class="popover-error-screen">';
        html += '<div class="error-screen-image"></div>';
        html += '<div class="error-screen-primary-label">' + label + '</div>';
        html += '<span class="error-screen-link" onclick="DeveloperModeDialog.display();">' + i18n.SHOW_DETAILS + '</span>';
        html += '</div>';
        return html;
    },


    /**
     * Returns whether the screen is displayed or not.
     * @param none
     * @return - True if the screen is displayed, false if not.
     */
    isDisplayed: function isPopoverErrorScreenDisplayed() {
        if(this.screen == null) {
            return false;
        }
        return true;
    }


};

/**
* Javascript performance timer. Used to mimic Timers
* @param name - the name of the Timer
*/
function Timer(aName) {
	this.timerName = aName;
	this.time = null;
	this.startTime = null;
	this.stopTime = null;

	/**
	 * Set the timer group, category, type, startTime
	 * @param none
	 */
	this.populateDetails = function() {
		if(a.length != 0) {
			var timeObject=a.shift();
			this.startTime = timeObject.t;
		}
		
		var basicInfoArray = this.timerName.split(':');
	
		this.timerType = basicInfoArray[0];
		
		var detailedInfoArray = basicInfoArray[1].split('.');
		this.group = detailedInfoArray[0];
		this.category = detailedInfoArray[1];
		
		if(detailedInfoArray.length > 1) {
			this.transaction = detailedInfoArray[2];
		}
	}
	
	/**
	 * Determines if the current timer is a transaction
	 * @param none
	 * @return boolean - indicates if the current timer is a transaction
	 */
	this.isTransaction = function() {
		if(this.transaction) {
			return true;
		} 
		return false;
	}
	
	/**
	 * Determines if the current timer is a total transaction
	 * @param none
	 * @return boolean - indicates if the current timer is a total transaction
	 */
	this.isTotalTransaction = function() {
		if(this.transaction && this.timerName.toLowerCase().indexOf('total') >= 0 ) {
			return true;
		} 
		return false;
	}
	
	var a=[];

	/**
	 * Start the timer
	 */
	this.start = function(n){
		a.unshift({n:n,t:new Date()});
		this.populateDetails();
	};
	
	/**
	 * Stop the timer
	 */
	this.stop = function(l) {
		if(this.startTime == null) {
			return;
		}
		this.stopTime = new Date();
		this.time = this.stopTime-this.startTime;
		this.seconds = this.time/1000;
	};
};

/**
 * Represents a standard hover to be displayed in Cld
 */
var QualityMeasurePopover = {
    popover: null,
    cursor: false,
    arrowElements: null,
    cell: null,
    active: false,
    sizing: {
        cell: null,
        arrow: null,
        popover: null
    },

    /**
     * Displays the hover at the position of the cursor.
     * @param cell - the Quality Measure cell.
     */
    display: function (cell) {
        this.cell = cell;
        //object representing the cell that has been clicked on
        this.sizing.cell = {
            top: cell.offset().top,
            left: cell.offset().left,
            width: cell.width(),
            height: cell.height()
        };

        if (this.popover === null) {
            this.create();
        } else {
            this.remove();
            this.create();
        }

        this.attachEventListener();
    },

    /**
     * Attachs event listeners to popover and arrow.
     * @param none
     */
    attachEventListener: function () {
        //enable click outside the popover to close
        $(document).mouseup(function (e) {
            QualityMeasurePopover.hide();
        });

        //allow clicks on the popover
        $(this.popover).mouseup(function (event) {
            event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
        });

        $(this.arrowElements).mouseup(function (event) {
            event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
        });

        //close the popover on scroll
        $('.patient-table-container').scroll(function () {
            QualityMeasurePopover.hide();
        });
    },

    /**
     * removes event listeners to popover and arrow.
     * @param none
     */
    unbindEventListener: function () {
        //allow scrolling with keyboard
        $(document).unbind('keydown');

        //remove the click callback to close the popover
        $(window).unbind('click');

        // unbine the hide click event when popover closed.
        $(document).unbind('mouseup', QualityMeasurePopover.hide());

        $(this.popover).unbind('mouseup');

        $(this.arrowElements).unbind('mouseup');

        $('.patient-table-container').unbind('scroll', QualityMeasurePopover.hide());
    },

    /**
     * Appends the parsed content to the popover.
     * @param {String} label   the popover header.
     * @param {HTMLElement} content - the parsed HTML element to append to the popover.
     */
    appendContent: function (label, content) {
        this.popover.removeClass('spinner');
        var popoverContentBorderless = document.createElement('div');
        popoverContentBorderless.className = 'popover-content borderless';
        var popoverHeader = document.createElement('div');
        popoverHeader.className = 'popover-header';

        if (label !== '') {
            var popoverLabel = document.createElement('span');
            popoverLabel.className = 'popover-label';
            popoverLabel.innerHTML = label;
            popoverHeader.appendChild(popoverLabel);
        }

        popoverContentBorderless.appendChild(popoverHeader);
        popoverContentBorderless.appendChild(content);
        this.popover.append(popoverContentBorderless);
        this.sizePopover();
    },

    /**
     * Sets the max height of the hover after the content has been loaded
     */
    sizePopover: function () {
        this.sizing.popover.width = this.popover.width();
        this.sizing.popover.height = this.popover.height();

        var screenEdge = {
            bottom: CareCompass.browser.height() + $('html').scrollTop(),
            top: $('html').scrollTop()
        };

        //check if there is more space below the cell or above
        if (screenEdge.bottom - (this.sizing.cell.top + this.sizing.cell.height) > this.sizing.cell.top - screenEdge.top) {
            //display the hover below the cell
            this.arrowElements.css('top', this.sizing.cell.top + this.sizing.cell.height / 2 + 14); // the value 11 is to place the arrow above the icon
            this.arrowElements.css('left', this.sizing.cell.left + ((this.sizing.cell.width - this.sizing.arrow.width) / 2)); //center the arrow under the cell

            this.popover.css('top', this.sizing.cell.top + this.sizing.cell.height / 2 + this.sizing.arrow.height + 14);

            //check if hover can be centered below cell
            if ((this.sizing.cell.left + this.sizing.cell.width + (this.sizing.popover.width / 2)) <= $('html').innerWidth() &&
                (this.sizing.cell.left - (this.sizing.popover.width / 2)) >= $('html').scrollLeft()) {
                //center the hover below the cell
                this.popover.css('left', this.sizing.cell.left - (this.sizing.popover.width / 2) + (this.sizing.cell.width / 2));

                //extend the hover to the left of the cell
            } else if (this.sizing.cell.left + this.sizing.cell.width + (this.sizing.popover.width / 2) > $('html').innerWidth()) {
                this.popover.css('right', $('html').width() - this.sizing.cell.left - this.sizing.cell.width - 20);

                //extend the hover to the right of the cell
            } else if (this.sizing.cell.left - (this.sizing.popover.width / 2) < $('html').scrollLeft()) {
                this.popover.css('left', this.sizing.cell.left);
            }

            try {
                var height = screenEdge.bottom - (this.sizing.cell.top + this.sizing.cell.height) - 60;
                $('.popover-outer-container').css('max-height', height);
            } catch (error) {

            }

            //display the popover above the cell
        } else {
            //show down pointing arrow
            $($(this.arrowElements).children()[0]).removeClass('out-arrow-top').addClass('out-arrow-bottom');
            $($(this.arrowElements).children()[1]).removeClass('in-arrow-top').addClass('in-arrow-bottom');

            this.arrowElements.css('bottom', CareCompass.browser.height() - (this.sizing.cell.top + this.sizing.cell.height / 2) + 10); // the value 10 is to place the arrow above the icon.
            this.arrowElements.css('left', this.sizing.cell.left + ((this.sizing.cell.width - this.sizing.arrow.width) / 2)); //center the arrow above the cell

            this.popover.css('bottom', CareCompass.browser.height() - this.sizing.cell.top + this.sizing.arrow.height - this.sizing.cell.height / 2 + 14);

            //check if hover can be centered above cell
            if ((this.sizing.cell.left + this.sizing.cell.width + (this.sizing.popover.width / 2)) <= $('html').innerWidth() &&
                (this.sizing.cell.left - (this.sizing.popover.width / 2)) >= $('html').scrollLeft()) {
                //center the hover above the cell
                this.popover.css('left', this.sizing.cell.left - (this.sizing.popover.width / 2) + (this.sizing.cell.width / 2));

                //extend the hover to the left of the cell
            } else if (this.sizing.cell.left + this.sizing.cell.width + (this.sizing.popover.width / 2) > $('html').innerWidth()) {
                this.popover.css('right', $('html').width() - this.sizing.cell.left - this.sizing.cell.width - 20);

                //extend the hover to the right of the cell
            } else if (this.sizing.cell.left - (this.sizing.popover.width / 2) < $('html').scrollLeft()) {
                this.popover.css('left', this.sizing.cell.left);
            }

            try {
                var height = this.sizing.cell.top - screenEdge.top - 60;
                $('.popover-outer-container').css('max-height', height);
            } catch (error) {

            }
        }
    },

    /**
     * Hides the popover
     * @param none
     */
    hide: function () {
        if (this.popover !== null && this.cursor === false) {
            if (this.popover.hasClass('spinner')) {
                return;
            }
            QualityMeasurePopover.remove();
            this.unbindEventListener();
        }
    },

    /**
     * Remove the popover and arrow container.
     * @param none
     */
    remove: function () {
        if (this.popover !== null) {
            if (PopoverErrorScreen.isDisplayed()) {
                PopoverErrorScreen.hide();
            }
            this.cell = null;
            this.popover.remove();
            this.arrowElements.remove();
            this.popover = null;
            this.arrowElements = null;
            this.cursor = false;
            this.active = false;
            Notifier.enable();
        }
    },

    /**
     * Creates the hover, initially only the arrow and the header.
     */
    create: function () {
        this.arrowElements = $(document.createElement('div'));
        this.arrowElements.attr('id', 'arrow');
        this.arrowElements.addClass('arrow-container');
        this.arrowElements.html('<span class="out-arrow-top"></span><span class="in-arrow-top"></span>');
        this.popover = $(document.createElement('div'));
        this.popover.attr('id', 'popover');
        this.popover.addClass('popover-outer-container spinner');

        this.popover.appendTo(CareCompass.body);
        this.arrowElements.appendTo(CareCompass.body);

        this.popover.show();
        this.arrowElements.show();

        //object representing the arrow tail on the hover
        this.sizing.arrow = {
            height: this.arrowElements.height() - 5, //the 5 accounts for extra spacing below the arrow
            width: this.arrowElements.width()
        };

        //object representing the main hover body
        this.sizing.popover = {
            width: this.popover.width(),
            height: this.popover.height()
        };

        this.sizePopover();
    },

    /**
     * Display the error on the popover container.
     * @param none
     */
    displayError: function (label) {
        this.popover.removeClass('spinner');
        this.active = false;
        PopoverErrorScreen.display(label, this.popover);
    },

    /**
     * Calls the LightHouse CCL script to get Quality Measures, and displays if properly returned.
     * @param patient - The patient who is being queried for Quality Measures.
     * @param rowNum - The row on which the patient resides.
     * @return Whether or not the Content was returned correctly and displayed.
     */
    getContent: function (patient, rowNum) {
        var encounterFilter = 2.0;
        var lookbackFilter = 2.0;
        var lookbackUnit = 2.0;
        var conditionId = 0;
        var qmReqObject = '';
        var cclProg = 'lh_mp_component';
        var cclParam = '';
        this.active = true;

        qmReqObject += patient.getPatientId() + ',';
        qmReqObject += patient.getEncounterId() + ',';
        qmReqObject += User.providerId + ',';
        qmReqObject += User.positionCd + ',';
        qmReqObject += patient.pprCd + ',';
        qmReqObject += encounterFilter + ',';
        qmReqObject += lookbackFilter + ',';
        qmReqObject += lookbackUnit + ',';
        qmReqObject += conditionId;

        cclParam = 'Mine,' + qmReqObject;

        try {
        Notifier.disable();
        this.display($('#QualityMeasure' + rowNum.toString()));
            var requestAsync = this.getXMLCclRequest();
            requestAsync.onreadystatechange = function () {
                if (requestAsync.readyState === 4 && requestAsync.status === 200) {
                    if (requestAsync.responseText > '') {
                        try {
                            var jsonReply = JSON.parse(requestAsync.responseText);
                            Timers.stop("ENG:CareCompass.loadQualityMeasuresCCL.ExecuteTransaction");
                            Timers.stop("ENG:CareCompass.loadQualityMeasuresCCL.TotalTransaction");
                            Timers.stop("USR:CareCompass.loadQualityMeasuresCCL");
                        } catch (error) {
                            QualityMeasurePopover.displayError(i18n.QUALITY_MEASURE_FAILURE);
                            return;
                        }
                        var qmParsedJSON = QualityMeasurePopover.createContent(jsonReply.RECORD_DATA, patient);
                        QualityMeasurePopover.appendContent(i18n.QUALITY_MEASURES, qmParsedJSON);
                    }
                    requestAsync = null;
                } else if (requestAsync.readyState === 4 && requestAsync.status !== 200) {
                    QualityMeasurePopover.displayError(i18n.QUALITY_MEASURE_FAILURE);
                    return;
                }
            };

            Timers.start("ENG:CareCompass.loadQualityMeasuresCCL.ExecuteTransaction");
            Timers.start("ENG:CareCompass.loadQualityMeasuresCCL.TotalTransaction");
            Timers.start("USR:CareCompass.loadQualityMeasuresCCL");
            requestAsync.open('GET', cclProg);
            requestAsync.send(cclParam);
        } catch (error) {
            QualityMeasurePopover.displayError(i18n.QUALITY_MEASURE_FAILURE);
            return;
        }
    },

    /**
     * Sets up the CCL request call
     * @return The XMLRequest object created for the request
     */
    getXMLCclRequest: function () {
        var xmlHTTP = null;
        if (location.protocol.substr(0, 4) === 'http') {
            try {
                //Firefox, Opera 8.0+, Safari
                xmlHTTP = new XMLHttpRequest();
            } catch (e) {
                //Internet Explorer
                try {
                    xmlHTTP = new ActiveXObject('Msxml2.XMLHTTP');
                } catch (e) {
                    xmlHTTP = new ActiveXObject('Microsoft.XMLHTTP');
                }
            }
        } else {
            xmlHTTP = new XMLCclRequest();
        }
        xmlHTTP.timeout = 5000;
        return xmlHTTP;
    },

    /**
     * Sort measures in ascending order.
     * @param {JSON} measures - the measures outcome to sort
     * @returns {Array} measureArrays - the sorted array for the current condition.
     */
    sortMeasures: function (measuresJSONArray) {
        var measuresArray = [];
        for (var i = 0; i < measuresJSONArray.length; i++) {
            measuresArray.push(measuresJSONArray[i].OUTCOME_NAME);
        }
        return measuresArray.sort();
    },

    /**
     * Retrieves the measure names for current condition.
     * @param {Number} conditionId - the condition id for the current condition.
     * @param {Object} parsedJSON - the parsedJSON object to get the measure.
     * @param {Boolean} isCompleteOutcome - true to retrieve completed measure, false to retrieve incomplete measure.
     * @returns {Array} - the sorted array for the current condition.
     */
    retrieveMeasures: function (conditionId, parsedJSON, isCompleteOutcome) {
        var measuresArray = [];
        var outcomeJSON = parsedJSON.OUTCOMES_INCOMPLETE;
        if (isCompleteOutcome === true) {
            outcomeJSON = parsedJSON.OUTCOMES_COMPLETE;
        }

        for (var i = 0; i < outcomeJSON.length; i++) {
            var measureJSON = outcomeJSON[i];

            if (measureJSON.CONDITION_ID == conditionId) {
                measuresArray.push(measureJSON);
            }
        }
        return this.sortMeasures(measuresArray);
    },

    /**
     * Determines if the Quality Measure Popover is displayed or not.
     *
     * @param none
     * @return True if the Quality Measure Popover is displayed, false if not.
     */
    isDisplayed : function() {
        if (this.popover !== null) {
            return true;
        }
        return false;
    },

    /**
     * Creates the HTML table with the Quality Measures data.
     * @param parsedJSON - JSON returned by the CCL call to be parsed and displayed.
     * @param patient - the patient to create content for.
     * @return The HTML table with the displayed data.
     */
    createContent: function (parsedJSON, patient) {
        var qmTable = document.createElement('div');
        qmTable.className = 'quality-measure-table';
        var qmIncompleteRow, qmCompleteRow, qmIncompleteData,
            qmCompleteData, qmLink, qmLinkDiv;
        var measuresArray = [];
        if (parsedJSON !== null) {
            qmIncompleteRow = document.createElement('ul');
            qmIncompleteRow.innerHTML = i18n.INCOMPLETE;

            qmCompleteRow = document.createElement('ul');
            qmCompleteRow.innerHTML = i18n.COMPLETE;
            if (parsedJSON.CONDITIONS !== null) {
                for (var i = 0; i < parsedJSON.CONDITIONS.length; i++) {
                    if (parsedJSON.OUTCOMES_INCOMPLETE !== null) {
                        measuresArray = this.retrieveMeasures(parsedJSON.CONDITIONS[i].CONDITION_ID, parsedJSON, false);

                        for (var j = 0; j < measuresArray.length; j++) {
                            qmIncompleteData = document.createElement('li');
                            qmIncompleteData.innerHTML = measuresArray[j];
                            qmIncompleteRow.appendChild(qmIncompleteData);
                        }

                        qmIncompleteData = document.createElement('span');
                        qmIncompleteRow.appendChild(qmIncompleteData);
                    }

                    if (parsedJSON.OUTCOMES_COMPLETE !== null) {
                        measuresArray = this.retrieveMeasures(parsedJSON.CONDITIONS[i].CONDITION_ID, parsedJSON, true);

                        for (var k = 0; k < measuresArray.length; k++) {
                            qmCompleteData = document.createElement('li');
                            qmCompleteData.innerHTML = measuresArray[k];
                            qmCompleteRow.appendChild(qmCompleteData);
                        }

                        qmCompleteData = document.createElement('span');
                        qmCompleteRow.appendChild(qmCompleteData);
                    }
                }
            }
            qmTable.appendChild(qmIncompleteRow);
            qmTable.appendChild(qmCompleteRow);
        } else {
            qmIncompleteRow = document.createElement('ul');
            qmIncompleteRow.innerHTML = i18n.INCOMPLETE;
            qmTable.appendChild(qmIncompleteRow);
            qmCompleteRow = document.createElement('ul');
            qmCompleteRow.innerHTML = i18n.COMPLETE;
            qmTable.appendChild(qmCompleteRow);
        }

        if (Configuration.qualityMeasuresTab !== '') {
            qmLinkDiv = document.createElement('div');
            qmLinkDiv.className = 'quality-measures-link-div';
            qmLink = document.createElement('span');
            qmLink.className = 'quality-measures-hyperlink';
            qmLink.innerHTML = Configuration.qualityMeasuresTab;
            qmLink.onclick = function () {
                LinkNavigation.display(patient, Configuration.qualityMeasuresTab);
            };
            qmLinkDiv.appendChild(qmLink);
            qmTable.appendChild(qmLinkDiv);
        }

        return qmTable;
    }
};

var ActivitiesPopOver = {
	popover : null,
	cursor : false,
	arrowElements: null,
	active : false,
	cell : null,
	sizing : {
		cell : null,
		arrow : null,
		popover : null
	},
	encounterIds : [],
	timeBucketIndex : 0,
	target : null,
	displayMeds : true,
	displayPatientCare : true,
	displayAssessment : true,
	displayOther : true,
	refreshingTasks: false,
	patientHover : null,
	encounterId : 0,
	availableWidth : 340,

	/**
	 * Displays popover
	 * @param cell - the timeline bar
	 */
	display: function (cell) {
		this.cell = cell;
		this.sizing.cell = {
			top : cell.offset().top,
			left : cell.offset().left + cell.width() / 2,
			width : cell.width(),
			height : cell.height()
		};
		if (this.popover !== null) {
			this.remove();
		}
		this.create();
		this.attachEventListener();
	},

	/**
	 * Attaches event listeners to popover and arrow
	 * @param none
	 */
	attachEventListener: function () {
		$('.activities-popover-outer-container').mouseup(function (event) {
			event.stopImmediatePropagation();
			event.cancelBubble = true;
			event.returnValue = false;
			return false;
		});
		//close popover when we click in patient table
		$(document).mouseup(function () {
			ActivitiesPopOver.hide();
		});
		//allow clicks
		$(this.popover).mouseup(function (event) {
			event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
		});
		$(this.arrowElements).mouseup(function (event) {
			event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
		});
		$('.patient-table-container').scroll(function () {
			ActivitiesPopOver.hide();
		});
	},

	/**
	 * removes the event listeners
	 * @param none
	 */
	unbindEventListener: function () {
		$(document).unbind('keydown');
		//remove the click callback to close the popover
		$(window).unbind('click');
		// unbind the hide click event when popover closed.
		$(document).unbind('mouseup', ActivitiesPopOver.hide());
		$(this.popover).unbind('mouseup');
		$(this.arrowElements).unbind('mouseup');
		$('.patient-table-container').unbind('scroll', ActivitiesPopOver.hide());
	},

	/**
	 * Appends the content to popover
	 * @param {HTMLElement} content
	 * @return none
	 */
	appendContent: function (content) {
		this.popover.removeClass('spinner');
		var popoverContent = document.createElement('div');
		popoverContent.className = 'activities-popover-content borderless';
		var popoverHeader = document.createElement('div');
		popoverHeader.className = 'activities-popover-header';
		var popoverLabel = document.createElement('span');
		popoverLabel.className = 'activities-popover-label';
		var label = "";
		if (this.timeBucketIndex === 0) {
			label += i18n.OVERDUE_ACTIVITY;
		} else {
			label += i18n.SCHEDULED_ACTIVITY;
		}
		popoverLabel.innerHTML = label;
		popoverHeader.appendChild(popoverLabel);
		popoverContent.appendChild(popoverHeader);

		var popoverContainer = document.createElement('div');
		popoverContainer.className = 'activities-popover-details';
		popoverContainer.appendChild(content);
		popoverContent.appendChild(popoverContainer);
		this.popover.append(popoverContent);
		this.sizePopover();
	},

	/**
	 * sets the max height of hover after the content has been loaded
	 */
	sizePopover: function () {
		this.sizing.popover.width = this.popover.width();
		this.sizing.popover.height = this.popover.height();
		var screenEdge = {
			bottom: CareCompass.browser.height() + $('html').scrollTop(),
			top: $('html').scrollTop()
		};
		//show down pointing arrow
		$($(this.arrowElements).children()[0]).removeClass('out-arrow-top').addClass('out-arrow-bottom');
		$($(this.arrowElements).children()[1]).removeClass('in-arrow-top').addClass('in-arrow-bottom');

		//to get the arrow exactly on top of bar, subtract the offset top of bar from  carecompass body height
		this.arrowElements.css('bottom', CareCompass.browser.height() - this.cell.offset().top  - 8);

		// to get the arrow at the center of the bar, get the distance from left till the start of bar,
		// add it with the half of the bar width and subtract with half of the arrow size
		this.arrowElements.css('left', this.cell.offset().left + (this.sizing.cell.width - this.sizing.arrow.width) / 2);
		this.popover.css('bottom', (CareCompass.browser.height() - this.cell.offset().top) + this.sizing.arrow.height - 4);

		// check if the hover can be centered
		// since the width is always constant check if the width is crossing the carecompass browser width
		if (this.cell.offset().left + this.popover.width() >= CareCompass.browser.width()) {
			//5 is an offset value, so that the popover right will be displayed always after the arrow elements right.
			var popoverRight = CareCompass.browser.width() - (this.cell.offset().left + this.sizing.cell.width) - 5;
			this.popover.css('right', popoverRight);
		} else if (this.sizing.cell.left - (this.sizing.popover.width / 2) < $('html').scrollLeft()) {
			//the left needs to be adjusted first so that the left border of popover does not collide with browsers
			this.popover.css('left', this.cell.offset().left);
		} else if ((this.cell.offset().left + this.sizing.cell.width + (this.sizing.popover.width / 2)) < CareCompass.browser.width()) {
			this.popover.css('left', this.cell.offset().left - (this.sizing.cell.width / 2));
		}
	},

	/**
	 * Hides the popover
	 * @param none
	 */
	hide: function () {
		if (this.popover !== null && this.cursor === false) {
			ActivitiesPopOver.remove();
			this.unbindEventListener();
		}
	},

	/**
	 * Remove the popover and arrow container.
	 * @param none
	 */
	remove: function () {
		if (this.popover !== null) {
			this.cell = null;
			this.popover.remove();
			this.arrowElements.remove();
			this.popover = null;
			this.arrowElements = null;
			this.cursor = false;
			this.active = false;
			Tasks.tasksPopOverDetails = [];
			this.encounterIds = [];
			this.timeBucketIndex = 0;
			this.target = null;
			Notifier.enable();
		}
	},

	/**
	 * Creates the hover, initially only the arrow and the header.
	 * @param none
	 */
	create: function () {
	 	Notifier.disable();
		this.arrowElements = $(document.createElement('div'));
		this.arrowElements.attr('id', 'arrow');
		this.arrowElements.addClass('arrow-container');
		this.arrowElements.html('<span class="out-arrow-top"></span><span class="in-arrow-top"></span>');
		this.popover = $(document.createElement('div'));
		this.popover.attr('id', 'popover');
		this.popover.addClass('activities-popover-outer-container spinner');
		this.popover.appendTo(CareCompass.body);
		this.arrowElements.appendTo(CareCompass.body);
		this.popover.show();
		this.arrowElements.show();
		//object representing the arrow tail on the hover
		this.sizing.arrow = {
			height: this.arrowElements.height() - 5, //the 5 accounts for extra spacing below the arrow
			width: this.arrowElements.width()
		};
		//object representing the main hover body
		this.sizing.popover = {
			width : this.popover.width(),
			height : this.popover.height()
		};
	},

	/**
	 * sets the encounter ids present in the time bucket and calls display
	 * @param target - the activity bar on which popover to be displayed
	 * @param index - The index of activity bar on which  user has clicked.
	 * @param timeBucket - the timeBucket having encounter and task ids which was clicked.
	 */
	getContent: function (target, index, timeBucket) {
		this.active = true;
		this.target = target;
		this.timeBucketIndex = index;
		this.encounterIds = timeBucket.encounterIds;
	},

	/**
	 * Creates the content to display in the pop over
	 * @return HTML table with the displayed data
	*/
	createContent: function () {
		this.display(this.target);
		var activityTable = document.createElement('div');
		activityTable.className = 'activity-popover-table';
		var activityPopoverToolbar = this.createToolbar('ActivitiesPopOver');
		activityTable.appendChild(activityPopoverToolbar);
		var patientTaskContainer =  this.createTaskcontainer();
		activityTable.appendChild(patientTaskContainer);
		return activityTable;
	},

	/**
	 * Creates toolbar for the popover.
	 * @param handler is the name of the var for the popover this set of filter buttons belongs with.
	 * @return HTML table with filter buttons 
	 */
	createToolbar: function (handler) {
		var activityToolbar = document.createElement('div');
		activityToolbar.className = 'activity-popover-toolbar';
		var activityToolbarSpan = document.createElement('span');
		var html = '<tr>';
		html += '<td class="activity-popover-toolbar-filter-cell">';
		html += '<div class="activities-popover-toolbar-filter">';
		html += '<table class="activities-popover-filter-table">';
		html += '<tr>';
		html += '<td id="' + handler + '-med-filter-left" class="clicked-button-left" onclick="' + handler + '.filterMeds()">';
		html += '</td>';
		html += '<td id="' + handler + '-med-filter" class="clicked-filter-mid button-padding-right" onclick="' + handler + '.filterMeds()" >';
		html += '<div id="' + handler + '-med-filter-image" class="med_white"></div>';
		html += '</td>';
		html += '<td id="' + handler + '-patient-care-filter" class="clicked-filter-mid clicked-border-left border-left button-padding-left button-padding-right" onclick="' + handler + '.filterPatientCare()">';
		html += '<div id="' + handler + '-patient-care-filter-image" class="patient_care_white"></div>';
		html += '</td>';
		html += '<td id="' + handler + '-assessment-filter" class="clicked-filter-mid clicked-border-left border-left button-padding-left button-padding-right" onclick="' + handler + '.filterAssessment()">';
		html += '<div id="' + handler + '-assessment-filter-image" class="assessment_white"></div>';
		html += '</td>';
		html += '<td id="' + handler + '-other-filter" class="clicked-filter-mid clicked-border-left border-left button-padding-left " onclick="' + handler + '.filterOther()">';
		html += '<div id="' + handler + '-other-filter-image" class="other_white"></div>';
		html += '</td>';
		html += '<td id="' + handler + '-other-filter-right" class="clicked-button-right" onclick="' + handler + '.filterOther()">';
		html += '</td>';
		html += '</tr>';
		html += '</table>';
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		activityToolbarSpan.innerHTML = html;
		activityToolbar.appendChild(activityToolbarSpan);
		return activityToolbar;
	},

	/**
	 * Create patient details row with patient name, date of birth and FIN number
	 * @param patient- The patient to display the details
	 * @param handler- handler is the name of the var for the popover to call the function on mousedown event.
	 * @return The HTML string representing the patient data
	 */
	createPatientDetailsRow: function (patient, handler) {
		this.hasPatientRow = true;
		var html = '<tr>';
		html += '<tr>';
		html += '<td class="activity-popover-horizontal-rule">';
		html += '<hr>';
		html += '</td>';
		html += '</tr>';
		html += '<tr>';
		html += '<td class="activity-popover-patient-details-cell">';
		html += '<div class="activities-popover-patient-details">';
		html += '<table  id= "' + patient.getEncounterId() + '" class="activity-popover-patient-detail-table" onmousedown="' + handler + '.launchPatientDrillDown(id)"  style="width:' + this.availableWidth + 'px;">';
		html += '<tr>';
		html += '<td class="activity-popover-patient-name-cell truncate">';
		html += '<div class="activities-popover-patient-name truncate">' + patient.getName() + '</div>';
		html += '</td>';
		html += '<td class="activities-popover-toolbar-dob-cell" >';
		html += '<div class="activities-popover-patient-table-label">' + i18n.DOB + ':' + '</div>';
		html += '<div class="activities-popover-patient-table-text truncate">' + patient.getBirthDateDisplay() + '</div>';
		html += '</td>';
		html += '<td class="activities-popover-toolbar-fin-cell">';
		html += '<div class="activities-popover-patient-table-label">' + i18n.FIN + ':' + '</div>';
		html += '<div class="activities-popover-patient-table-text truncate">' + patient.fin + '</div>';
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		html += '</table>';
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},

	/**
	 * Marks specific task types to display or not based on the input filters array
	 *
	 * @param filters - The array of task type filters to apply upon display of the drill down. Can be null or empty.
	 */
	applyFilters : function (filters) {
		var i = 0;
		this.displayMeds = true;
		this.displayPatientCare = true;
		this.displayAssessment = true;
		this.displayOther = true;
		if (filters === undefined || filters === null) {
			return;
		}
		for (i = 0; i < filters.length; i++) {
			if (filters[i] === "MEDICATIONS") {
				this.displayMeds = false;
			}
			if (filters[i] === "PATIENTCARE") {
				this.displayPatientCare = false;
			}
			if (filters[i] === "ASSESSMENT") {
				this.displayAssessment = false;
			}
			if (filters[i] === "OTHER") {
				this.displayOther = false;
			}
		}
	},

	/**
	 * Determines if the task we are given should be displayed, based on the filter flags for activity type
	 *
	 * @param task - The task we are to evaluate.
	 * @return true if the task should be filtered.
	 */
	filterTaskByActivityType : function (task) {
		if (task.type === "MEDICATION") {
			return this.displayMeds === false;
		}
		if (task.type === "PATIENTCARE") {
			return this.displayPatientCare === false;
		}
		if (task.type === "ASSESSMENT") {
			return this.displayAssessment === false;
		}
		if (task.type === "OTHER") {
			return this.displayOther === false;
		}
		return false;
	},

	/**
	 * Filters the task rows to display or not display patient care rows based on the state of the indicator.
	 *
	 * @param none
	 */
	filterPatientCare : function () {
		if (this.displayPatientCare === false) {
			$("#ActivitiesPopOver-patient-care-filter").removeClass("filter-mid").addClass("clicked-filter-mid").addClass("clicked-border-left");
			$("#ActivitiesPopOver-patient-care-filter-image").removeClass("patient-care-icon").addClass("patient_care_white");
			this.displayPatientCare = true;
		} else {
			this.displayPatientCare = false;
			$("#ActivitiesPopOver-patient-care-filter").removeClass("clicked-filter-mid").removeClass("clicked-border-left").addClass("filter-mid");
			$("#ActivitiesPopOver-patient-care-filter-image").removeClass("patient_care_white").addClass("patient-care-icon");
		}
		Hover.hide();
		this.displayPatientCareHover();
		$('.activity-popover-tasklist-con').hide();
		this.refreshTasks();
	},

	/**
	 * Display the hover over the filter button for patient care
	 */
	displayPatientCareHover : function () {
		var patientCareIcon = $("#ActivitiesPopOver-patient-care-filter");
		var display = null;
		if (this.displayPatientCare === true) {
			display = i18n.PATIENTCARE_DISPLAYED;
		} else {
			display = i18n.PATIENTCARE_FILTERED;
		}
		var patientCareConfig = { over : function (e) {
			Hover.display(e, "", display);
		},
		timeout : 200,
		out : function (e) {
			Hover.hide();
		},
		interval : 200 };
		patientCareIcon.hoverIntent(patientCareConfig);
	},


	/**
	 * Filters the task rows to display or not display medication rows based on the state of the indicator.
	 *
	 * @param none
	 */
	filterMeds : function () {
		if (this.displayMeds === false) {
			$("#ActivitiesPopOver-med-filter-left").removeClass("button-left").addClass("clicked-button-left");
			$("#ActivitiesPopOver-med-filter").removeClass("filter-mid").addClass("clicked-filter-mid");
			$("#ActivitiesPopOver-med-filter-image").removeClass("medications-icon").addClass("med_white");
			this.displayMeds = true;
		} else {
			this.displayMeds = false;
			$("#ActivitiesPopOver-med-filter-left").removeClass("clicked-button-left").addClass("button-left");
			$("#ActivitiesPopOver-med-filter").removeClass("clicked-filter-mid").addClass("filter-mid");
			$("#ActivitiesPopOver-med-filter-image").removeClass("med_white").addClass("medications-icon");
		}
		Hover.hide();
		this.displayMedicationHover();
		$('.activity-popover-tasklist-con').hide();
		this.refreshTasks();
	},

	/**
	 * Display the hover over the filter button for Medication
	 */
	displayMedicationHover : function () {
		var medicationIcon = $("#ActivitiesPopOver-med-filter");
		var display = null;
		if(this.displayMeds === true) {
			display = i18n.MEDICATIONS_DISPLAYED;
		}
		else {
			display = i18n.MEDICATIONS_FILTERED;
		}
		var medicationConfig = {over : function (e) {
			Hover.display(e, " ", display);
		},
		timeout : 200,
		out: function (e) {
			Hover.hide();
		},
		interval : 200 };
		medicationIcon.hoverIntent(medicationConfig);
	},

	/**
	 * Filters the task rows to display or not display assessment rows based on the state of the indicator.
	 *
	 * @param none
	 */
	filterAssessment : function () {
		if (this.displayAssessment === false) {
			$("#ActivitiesPopOver-assessment-filter").removeClass("filter-mid").addClass("clicked-filter-mid").addClass("clicked-border-left");
			$("#ActivitiesPopOver-assessment-filter-image").removeClass ("assessment-icon").addClass ("assessment_white");
			this.displayAssessment = true;
		} else {
			this.displayAssessment = false;
			$("#ActivitiesPopOver-assessment-filter").removeClass("clicked-filter-mid").removeClass("clicked-border-left").addClass("filter-mid");
			$("#ActivitiesPopOver-assessment-filter-image").removeClass("assessment_white").addClass("assessment-icon");
		}
		Hover.hide();
		this.displayAssesmentHover();
		$('.activity-popover-tasklist-con').hide();
		this.refreshTasks();
	},

	/**
	 * Display the hover over the filter button for assesment
	 */
	displayAssesmentHover : function () {
		var assesmentIcon = $("#ActivitiesPopOver-assessment-filter");
		var display = null;
		if (this.displayAssessment === true) {
			display = i18n.ASSESSMENTS_DISPLAYED;
		} else {
			display = i18n.ASSESSMENTS_FILTERED;
		}
		var AssesmentConfig = { over : function (e) {
			Hover.display(e, " ", display);
		},
		timeout : 200,
		out : function (e) {
			Hover.hide();
		},
		interval : 200 };
		assesmentIcon.hoverIntent(AssesmentConfig);
	},

	/**
	 * Filters the task rows to display or not display other rows based on the state of the indicator.
	 *
	 * @param none
	 */
	filterOther : function () {
		if (this.displayOther === false) {
			$("#ActivitiesPopOver-other-filter").removeClass ("filter-mid").addClass("clicked-filter-mid").addClass("clicked-border-left");
			$("#ActivitiesPopOver-other-filter-image").removeClass ("other-icon").addClass("other_white");
			$("#ActivitiesPopOver-other-filter-right").removeClass ("button-right").addClass("clicked-button-right");
			this.displayOther = true;
		} else {
			this.displayOther = false;
			$("#ActivitiesPopOver-other-filter").removeClass ("clicked-filter-mid").removeClass("clicked-border-left").addClass("filter-mid");
			$("#ActivitiesPopOver-other-filter-image").removeClass("other_white").addClass("other-icon");
			$("#ActivitiesPopOver-other-filter-right").removeClass("clicked-button-right").addClass("button-right");
		}
		Hover.hide();
		this.displayOtherHover();
		$('.activity-popover-tasklist-con').hide();
		this.refreshTasks();
	},

	/**
	 * Display the hover over the filter button for other
	 */
	displayOtherHover : function () {
		var otherIcon = $("#ActivitiesPopOver-other-filter");
		var display = null;
		if (this.displayOther === true) {
			display = i18n.OTHER_DISPLAYED;
		} else {
			display = i18n.OTHER_FILTERED;
		}
		var otherConfig = { over : function (e) {
			Hover.display(e, " ", display);
		},
		timeout : 200,
		out : function (e) {
			Hover.hide();
		},
		interval : 200 };
		otherIcon.hoverIntent(otherConfig);
	},

	/**
	 * Redraws the tasks based on the filter selected
	 * @param none
	 * @return none
	 */
	refreshTasks: function () {
		this.refreshingTasks = true;
		var patientTaskContainer =  this.createTaskcontainer();
		$('.activity-popover-table').append(patientTaskContainer);
		this.filter();
		this.sizePopover();
	},

	/**
	 * creates task row in the popover
	 * @param tasks - list of tasks to be displayed
	 * @param encouterId- the unique identifier for patient
	 * @param handler- handler is the name of the var for the popover to call the function on mousedown event.
	 * @ return The HTML string representing the task list display
	 */ 
	createTaskRow: function (tasks, encounterId, handler) {
		var sortedTasks = this.sortTasksByType(tasks);
		var showIcon = false;
		var start = 1;
		var lastState = null;
		var curState = null;
		var htmlRows = "";
		var task;
		var html = '<table id="' + encounterId + '" class="popover-activityList-table borderless" onmousedown="' + handler + '.launchPatientDrillDown(id)">';

		for(id in sortedTasks) {
			task = sortedTasks[id];
			curState = new ActivityState(task);
			if (this.filterTaskByActivityType(task) === false) {
				showIcon = curState.isShowIcon(lastState);
				lastState = curState;
			}
			htmlRows += this.createTasksRowDetails(task, showIcon, this.filterTaskByActivityType(task));
			delete sortedTasks[id];
		}
		html += htmlRows;
		html += '</table>';
		return html;
	},

	/**
	 * Counts the task to be filtered from the task list for the selected filters
	 * @param taskList- the list of tasks for a patient 
	 * @return count- the total number of taks that are to be filtered
	 */ 
	pruneTasksList: function (taskList) {
		var count = 0;
		var task = null;
		for(id in taskList) {
			task = taskList[id];
			if (this.filterTaskByActivityType(task) === true) {
				delete taskList[id];
				count += 1;
				continue;
			}
			if(task.type === "INTERDISCIPLINARY") {
				delete taskList[id];
				count += 1;
				continue;
			}
		}
		return count;
	},

	/**
	 * Creates the container with patient details and task associated with
	 * @param -none
	 * @return - The HTML object representing the patient activities
	 */
	createTaskcontainer: function () {
		var hasPatientRows = false;
		var container = document.createElement('div');
		container.className ='activity-popover-tasklist-con';
		var taskDetails = document.createElement('span');
		var patientsArray = this.sortPatientsByName();
		var html = '<tr>';
		html += '<td>';
		html += '<div class="activities-popover-patient-details" id="tasksContainer">';
		html += '<table class="activity-popover-patient-detail-table">';
		for(var i = 0; i < patientsArray.length; i++) {
			var patient = patientsArray[i];
			var tasks = Tasks.getTaskDetailsForPopOverByEncounterId(patient.getEncounterId());
			var pruneCount = this.pruneTasksList(tasks);
			// if all the tasks are filtered, do not display the patient
			if (tasks === null || tasks.length - pruneCount <= 0) {
				continue;
			}
			hasPatientRows = true;
			html += '<tr>';
			html += '<td class="activities-popover-patient-table">';
			html += this.createPatientDetailsRow(patient, 'ActivitiesPopOver');
			html += '<tr>';
			html += '<td class="activity-popover-patient-details-cell">';
			html += this.createTaskRow(tasks, patient.getEncounterId(), 'ActivitiesPopOver');
			html += '</td>';
			html += '</tr>';
			html += '</td>';
			html += '</tr>';
		}
		
		// display message when all filters are disabled or if there are no patient activities to display
		if (hasPatientRows === false ) {
			html += '<tr>';
			html += '<tr>';
			html += '<td class="activity-popover-horizontal-rule">';
			html += '<hr>';
			html += '</td>';
			html += '</tr>';
			html += '<td class="borderless">';
			html += '<div class="error-screen">';
			html += '<span class="popover-error-screen-link truncate">' + i18n.SHOW_POPOVER_MESSAGE + '</span>';
			html += '</div>';
			html += '</td>';
			html += '</tr>';
		}
		taskDetails.innerHTML = html;

		container.appendChild(taskDetails);
		return container;
	},

	/**
	 * draws the task with the icon in the popover
	 * @param task- the task to display in the popover
	 * @param iconState- boolean value if the task has to be displayed or not.
	 * @param filtered- boolean value to display the task or not for the filters selected
	 * @return the HTML string representing the task display
	 */
	createTasksRowDetails: function (task, iconState, filtered){
		var paddingLeft = 12;
		var classes = 'deselected';
		if(filtered === true) {
			classes += 'hidden';
		}

		var html = '<tr class = "' +classes + '">';
		html += '<td class="task-popover-row borderless">';
		html += '<div class="popover-activityList-cell">';
		html += '<span class="activity-type">';
		if(iconState === false) {
			html += '<span class="no-activity-type-icon-deslected"></span>';
			html += '<span class="no-activity-type-icon-selected"></span>';
			paddingLeft = 25; // 25 pixels to move from left so that it  will be aligned with the task with icon.
		}
		else {
			if (task.type === "MEDICATION") {
				html += '<span class="medications-icon"></span>';
				html += '<span class="med_white"></span>';
			}
			if (task.type === "PATIENTCARE") {
				html += '<span class="patient-care-icon"></span>';
				html += '<span class="patient_care_white"></span>';
			}
			if (task.type === "ASSESSMENT") {
				html += '<span class="assessment-icon"></span>';
				html += '<span class="assessment_white"></span>';
			}
			if (task.type === "OTHER") {
				html += '<span class="other-icon"></span>';
				html += '<span class="other_white"></span>';
			}
		}
		html += '</span>';
		html += '<div class="popover-task-display truncate" style="padding-left:' + paddingLeft + 'px">' + task.getDisplay() + '</div>';
		html += '</span>';
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		return html;
	},

	/**
	 * Filters the task rows to display or not display medication, patient care, assessment, or other rows based on the state of the indicators.
	 *
	 * @param none
	 */
	filter : function () {
		if (this.displayMeds === true) {
			$("#ActivityListTab-med-filter").addClass("clicked-filter-mid");
			$("#ActivityListTab-med-filter-left").addClass("clicked-button-left");
			$("#ActivityListTab-med-filter-image").addClass("med_white");
			$("#ActivityListTab-med-filter-image").removeClass("medications-icon");
			$("#ActivityListTab-med-filter").removeClass("filter-mid");
			$("#ActivityListTab-med-filter-left").removeClass("button-left");
		} else {
			$("#ActivityListTab-med-filter").removeClass("clicked-filter-mid");
			$("#ActivityListTab-med-filter-left").removeClass("clicked-button-left");
			$("#ActivityListTab-med-filter-image").removeClass("med_white");
			$("#ActivityListTab-med-filter-image").addClass("medications-icon");
			$("#ActivityListTab-med-filter").addClass("filter-mid");
			$("#ActivityListTab-med-filter-left").addClass("button-left");
		}
		if (this.displayPatientCare === true) {
			$("#ActivityListTab-patient-care-filter").addClass("clicked-filter-mid");
			$("#ActivityListTab-patient-care-filter").addClass("clicked-border-left");
			$("#ActivityListTab-patient-care-filter-image").addClass("patient_care_white");
			$("#ActivityListTab-patient-care-filter-image").removeClass("patient-care-icon");
			$("#ActivityListTab-patient-care-filter").removeClass("filter-mid");
		} else {
			$("#ActivityListTab-patient-care-filter").removeClass("clicked-filter-mid");
			$("#ActivityListTab-patient-care-filter").removeClass("clicked-border-left");
			$("#ActivityListTab-patient-care-filter-image").removeClass("patient_care_white");
			$("#ActivityListTab-patient-care-filter-image").addClass("patient-care-icon");
			$("#ActivityListTab-patient-care-filter").addClass("filter-mid");
		}
		if (this.displayAssessment === true) {
			$("#ActivityListTab-assessment-filter").addClass("clicked-filter-mid");
			$("#ActivityListTab-assessment-filter").addClass("clicked-border-left");
			$("#ActivityListTab-assessment-filter-image").addClass("assessment_white");
			$("#ActivityListTab-assessment-filter-image").removeClass("assessment-icon");
			$("#ActivityListTab-assessment-filter").removeClass("filter-mid");
		} else {
			$("#ActivityListTab-assessment-filter").removeClass("clicked-filter-mid");
			$("#ActivityListTab-assessment-filter").removeClass("clicked-border-left");
			$("#ActivityListTab-assessment-filter-image").removeClass("assessment_white");
			$("#ActivityListTab-assessment-filter-image").addClass("assessment-icon");
			$("#ActivityListTab-assessment-filter").addClass("filter-mid");
		}
		if (this.displayOther === true) {
			$("#ActivityListTab-other-filter").addClass("clicked-filter-mid");
			$("#ActivityListTab-other-filter").addClass("clicked-border-left");
			$("#ActivityListTab-other-filter-right").addClass("clicked-button-right");
			$("#ActivityListTab-other-filter-image").addClass("other_white");
			$("#ActivityListTab-other-filter-image").removeClass("other-icon");
			$("#ActivityListTab-other-filter").removeClass("filter-mid");
			$("#ActivityListTab-other-filter-right").removeClass("button-right");
		} else {
			$("#ActivityListTab-other-filter").removeClass("clicked-filter-mid");
			$("#ActivityListTab-other-filter").removeClass("clicked-border-left");
			$("#ActivityListTab-other-filter-right").removeClass("clicked-button-right");
			$("#ActivityListTab-other-filter-image").removeClass("other_white");
			$("#ActivityListTab-other-filter-image").addClass("other-icon");
			$("#ActivityListTab-other-filter").addClass("filter-mid");
			$("#ActivityListTab-other-filter-right").addClass("button-right");
		}
	},

	/**
	 * Checks if the filterbuttons are pressed
	 * @param- none
	 * @return - true if the filter buttons are pressed, false otherwise
	 */
	checkFilterActions: function () {
		if (this.refreshingTasks === true) {
			return true;
		}
		return false;
	},

	/**
	 * Launch patient drill down on clicking the patient name in popover
	 * @param -id the encounter id
	 * @return none
	 */
	launchPatientDrillDown: function (encntrId) {
		var patient = Patients.getByEncounterId(encntrId);
		var cell = null;
		var filters = new Array();
		var section = null;
		var timeFilter = 12;
		var row = 0;
		for(var i = 0; i < PatientTable.rows.length; i++) {
			if (PatientTable.rows[i].encounterId == encntrId) {
				cell = PatientTable.rows[i].patientCell.cell;
				row = i;
				break;
			}
		}
		if (cell == null) {
			alert("Cell not found for the encounter " + encntrId);
		}
		// hide the popover
		this.hide();
		this.fillFilterArray(filters);
		this.patientHover = new PatientRowHover();
		this.patientHover.create(row,cell,cell, patient, 72);
		this.encounterId = encntrId;
		Notifier.disable();
		this.patientHover.click(encntrId, filters, section, timeFilter);
	},

	/**
	 * Fill the array with the filters that have been disabled
	 * @param- the filter array
	 * @return none
	 */
	fillFilterArray: function (filterArray) {
		if (this.displayMeds === false) {
			filterArray.push("MEDICATIONS");
		}
		if (this.displayPatientCare === false) {
			filterArray.push("PATIENTCARE");
		}
		if (this.displayAssessment === false) {
			filterArray.push("ASSESSMENT");
		}
		if (this.displayOther === false) {
			filterArray.push("OTHER");
		}
	},

	/**
	 * Hides the patient row hover used to open the patient drill down on this row.
	 * @param -none
	 */
	hideRowHovers: function () {
		if (this.patientHover !== null) {
			this.patientHover.hide();
		}
	},

	/** From the tasks list, rearrange the tasks based on the type. Medication, PatientCare, Assessment, Other is the order.
	 * @param tasks- the list of tasks to rearrange
	 * @return new tasks list in the order of task type as primary and scheduled time as secondory sort..
	 */
	sortTasksByType: function (tasks) {
		var sortedTasks = [];
		for(id in tasks) {
			var task = tasks[id];
			if (task.type === "MEDICATION") {
				sortedTasks.push(task);
				delete tasks[id];
			}
		}
		for(id in tasks) {
			var task = tasks[id];
			if (task.type === "PATIENTCARE") {
				sortedTasks.push(task);
				delete tasks[id];
			}
		}
		for(id in tasks) {
			var task = tasks[id];
			if (task.type === "ASSESSMENT") {
				sortedTasks.push(task);
				delete tasks[id];
			}
		}
		for(id in tasks) {
			var task = tasks[id];
			if (task.type === "OTHER") {
				sortedTasks.push(task);
				delete tasks[id];
			}
		}
		//sort the array now based on the scheduled date time. this is the secondary sort
		sortedTasks.sort(function(taskOne, taskTwo) {
			if (taskOne.type === taskTwo.type) {
				 return taskOne.scheduledDateTime < taskTwo.scheduledDateTime ? -1 : taskOne.scheduledDateTime > taskTwo.scheduledDateTime ? 1 : 0;
			}
            //To prevent the error in IE8 browser when we click on ActivityTimeline
            else {
                 return 0;
            }
		});
		return sortedTasks;
	},

	/**
	 * Sort the patient names alphabetically.
	 * @param- none
	 * @return- new sorted array of patients object
	 */
	sortPatientsByName: function () {
		var sortedPatientsByName = [];
		for(var i = 0; i < this.encounterIds.length; i++) {
			var patient = Patients.getByEncounterId(this.encounterIds[i]);
			sortedPatientsByName.push(patient);
		}
		//sort the array with patient name
		sortedPatientsByName.sort(function(patientOne, patientTwo) {
			return patientOne.getName() == patientTwo.getName() ? 0 : patientOne.getName() < patientTwo.getName() ? -1 : 1;
		});
		return sortedPatientsByName;
	},

	/* Determines if the Activities Popover is displayed or not.
	 *
	 * @param none
	 * @return true if the Activities Popover is displayed, false if not.
	 */
	isDisplayed : function () {
		if (this.popover !== null) {
			return true;
		}
		return false;
	}
};

/**
 * Represents a standard Popover in CareCompass
 */
var Popover = {
    popover: null,
    popoverSize: {
        width: null,
        height: null
    },
    label: null,
    content: null,
    arrowContainer: null,
    arrow: {
        width: null,
        height: null
    },
    innerArrow: null,
    outerArrow: null,
    cell: {
        top: null,
        bottom: null,
        left: null,
        right: null,
        width: null,
        height: null,
        middleX: null
    },
    availableSpace: {
        below: null,
        above: null,
        left: null,
        right: null
    },
    screenRight: null,
    screenBottom: null,
    errorTasksRow: null,
    errorTasks: null,
    ackButton: null,

    /**
     * Displays the popover at the triggered cell
     * @param cell - the DOM object that has been clicked on
     * @param content - the HTML to display in the popover
     * @param label - the popover header
     */
    display: function (cell, content, label) {
        this.remove();

        this.content = content;
        this.label = label;
        
        var cellRect = cell.getBoundingClientRect();
        this.cell = {
            top: cellRect.top + 10,
            bottom: cellRect.bottom - 10,   //10 is so the arrow pierces into the cell when calculating position
            left: cellRect.left,
            right: cellRect.right,
            width: cellRect.right - cellRect.left,
            height: cellRect.bottom - cellRect.top,
            middleX: null
        };

        this.cell.middleX = this.cell.left + this.cell.width / 2;

        this.create();
        this.checkSelectionState();
    },

    /**
     * Creates the popover
     */
    create: function () {
        this.arrowContainer = $('<div/>');
        this.arrowContainer.attr('id', 'arrow');
        this.arrowContainer.addClass('arrow-container');
        this.outerArrow = $('<span/>');
        this.outerArrow.addClass('out-arrow-top-general');
        this.innerArrow = $('<span/>');
        this.innerArrow.addClass('in-arrow-top-general');
        this.arrowContainer.append(this.outerArrow, this.innerArrow);

        this.popover = $('<div/>');
        this.popover.attr('id', 'popover');
        this.popover.addClass('popover-outer-container-general');

        this.appendContent();

        this.popover.appendTo(CareCompass.body);
        this.arrowContainer.appendTo(CareCompass.body);

        this.popover.show();
        this.arrowContainer.show();

        this.sizePopover();

        this.attachEventListeners();
    },

    /**
     * Appends the HTML content to the popover.
     */
    appendContent: function () {
        var popoverContent = $('<div/>'),
        popoverHeader = $('<div/>');
        popoverContent.addClass('popover-content-general');
        popoverHeader.addClass('popover-header-general');

        if (this.label) {
            var popoverLabel = $('<span/>');
            popoverLabel.addClass('popover-label');
            popoverLabel.html(this.label);
            popoverHeader.append(popoverLabel);
        }

        popoverContent.append(this.content);
        this.popover.append(popoverHeader);
        this.popover.append(popoverContent);
        this.sizePopover();
    },

    /**
     * Sizes and positions the popover
     */
    sizePopover: function () {
        this.screenRight = CareCompass.browser.width();
        this.screenBottom = CareCompass.browser.height();
        this.arrow = {
            height: this.arrowContainer.height() - 5, //the 5 accounts for extra spacing below the arrow
            width: this.arrowContainer.width()
        };

        this.popoverSize = {
            width: this.popover.width(),
            height: this.popover.height()
        };

        this.availableSpace = {
            below: this.screenBottom - this.cell.bottom,
            above: this.cell.top,
            left: this.cell.middleX,
            right: this.screenRight - this.cell.middleX
        };

        this.setVerticalPos();
        this.setHorizontalPos();
    },

    /**
     * Sets the vertical position of the popover and arrow
     */
    setVerticalPos: function () {
        var maxHeight;

        if (this.availableSpace.below > this.availableSpace.above) {
            this.arrowContainer.css('top', this.cell.bottom);

            maxHeight = this.availableSpace.below - 60;

            this.popover.css('top', this.cell.bottom + this.arrow.height);
        }
        else {
            this.outerArrow.removeClass('out-arrow-top-general').addClass('out-arrow-bottom-general');
            this.innerArrow.removeClass('in-arrow-top-general').addClass('in-arrow-bottom-general');

            this.arrowContainer.css('top', this.cell.top - this.arrow.height);

            maxHeight = this.availableSpace.above - 60;
            if (this.popoverSize.height < maxHeight) {
                this.popover.css('top', this.cell.top - this.popoverSize.height - this.arrow.height);
            }
            else {
                this.popover.css('top', this.cell.top - maxHeight - this.arrow.height);
            }
        }

        var exceptContent = this.popoverSize.height - $('.popover-content-general').height();
        $('.popover-content-general').css('max-height', maxHeight - exceptContent);
    },

    /**
     * Sets the horizontal position of the popover and arrow
     */
    setHorizontalPos: function () {
        this.arrowContainer.css('left', this.cell.middleX - this.arrow.width/2);

        var popHalf = this.popoverSize.width / 2;
        if (popHalf < this.availableSpace.left && popHalf < this.availableSpace.right) {
            this.popover.css('left', this.cell.middleX - this.popoverSize.width / 2);
        }
        else { //prevent popover from hanging off screen
            var shiftPosX = Math.ceil(this.availableSpace.left / this.screenRight * this.popoverSize.width);
            this.popover.css('left', this.cell.middleX - shiftPosX);
        }
    },

    /**
     * Checks if the popover and/or arrow container is currently shown
     * @return true if shown else false
     */
    isDisplayed: function () {
        if (this.popover || this.arrowContainer || this.outerArrow || this.innerArrow){
            return true;
        }

        return false;
    },

    /**
     * Remove the popover and arrow container
     */
    remove: function () {
        this.resetCheckboxState();
        if (this.popover) {
            this.popover.remove();
        }
        if (this.innerArrow) {
            this.innerArrow.remove();
        }
        if (this.outerArrow) {
            this.outerArrow.remove();
        }
        if (this.arrowContainer) {
            this.arrowContainer.remove();
        }
        this.cell = null;
        this.popover = null;
        this.innerArrow = null;
        this.outerArrow = null;
        this.arrowContainer = null;
        this.unbindEventListeners();
    },

    /**
     * Attachs event listeners to popover and arrow
     */
    attachEventListeners: function () {
        $(document).mouseup(function () {
            Popover.remove();
        });

        $(this.popover).mouseup(function (event) {
            event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
        });

        $(this.arrowContainer).mouseup(function (event) {
            event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
        });

        $('.patient-table-container').scroll(function () {
            Popover.remove();
        });
    },

    /**
     * Removes event listeners to popover and arrow
     */
    unbindEventListeners: function () {
        $(document).unbind('mouseup', Popover.remove);

        $(this.popover).unbind('mouseup');

        $(this.arrowContainer).unbind('mouseup');

        $('.patient-table-container').unbind('scroll', Popover.remove);
    },

    /**
     * Create the contents to display in the popover
     * @param errTasks-  the error task object
     * @return- the HTML String representing the data.
     */
    createPopoverContents: function(errTasks) {
        var container = $(document.createElement("div"));
        this.errorTasks = errTasks;
        this.errorTasksRow = $(document.createElement("div"));
        this.errorTasksRow.addClass('error-tasks-popover-list');
        this.createButton();
        var htmlTag = '<table class= "error-tasks-popover-table" id="error-tasks-table">';
        var index = 1;
        for (var i = 0; i < this.errorTasks.length; i++) {
            var nextErrorTask = this.errorTasks[i];
            var messageHeadingTxt = nextErrorTask.msgSubject + ' -> ';
            messageHeadingTxt += nextErrorTask.orderDisplay + ' - ';
            messageHeadingTxt += nextErrorTask.createDtTm;
            htmlTag += '<tr id="errorTasks ' + (index++) + '" taskId = "' + nextErrorTask.taskId +'" class="error-task-row">';
            htmlTag += '<td class = "error-tasks-checkbox-cell">';
            htmlTag += '<input type=checkbox  class = "error-tasks-checkbox" id ="' + nextErrorTask.taskId +'" onclick="Popover.checkSelectionState()" ></input>';
            htmlTag += '</td>';
            htmlTag += '<td class="error-tasks-single-messages-cell">';
            htmlTag += '<div class="error-tasks-single-messages">';
            htmlTag += '<span class = "error-tasks-single-message">' + messageHeadingTxt + '</span>';
            htmlTag += '</div>';
            htmlTag += '<div class="error-tasks-single-message-body">' + nextErrorTask.message + '</div>';
            htmlTag += '</td>';
            htmlTag += '</tr>';
        }
        htmlTag += '</table>';
        htmlTag += '</tr>';

        this.errorTasksRow.append(htmlTag);
        container.append(this.errorTasksRow, this.ackButton);
        return container;
    },
    
    /**
     * Checks if a checkbox is selected or not. If no checkbox is selectec, disable the acknowledge button.
     * Enable the acknowledge button if there is at least one checkbox selected
     * @param - none
     * @return - none
     */
    checkSelectionState: function() {
        var arrayOfErrorIds= $("input:checkbox").filter(':checked').map(function () {
            return this.id;
        }).get();
        var arraySize = arrayOfErrorIds.length;
        if (arraySize === 0) {
            $("input:button").prop("disabled", true);
        }
        else {
            $("input:button").prop("disabled", false);
        }
    },

    /**
     * Create Acknowledge button
     * @param - none
     * @return - none
     */
    createButton: function() {
        this.ackButton = $(document.createElement("div"));
        this.ackButton.addClass('acknowledge-button-error-task');

        var html = '<table class="error-task-ack-btn">';
        html += '<tr>';
        html += '<td class="ack-button-right">';
        html += '<input type="button" class="ack-button-error-task-popover truncate" onclick= "Popover.acknowledgeErrorTasks()" value="' + i18n.ACKNOWLEDGE_BUTTON +'"/>';
        html += '</td>';
        html += '</tr>';
        html += '</table>';
        this.ackButton.append(html);
    },

    /**
     * Acknowledge the error tasks. Call Service 967501 and pass list of task ids, task type cd, and update count
     * @param - none
     * @return - none
     */
    acknowledgeErrorTasks: function() {
        var taskIds = window.external.DiscernObjectFactory("DOUBLEMAP");
        var taskTypeCds = window.external.DiscernObjectFactory("DOUBLEMAP")
        var updateCounts = window.external.DiscernObjectFactory("DOUBLEMAP");

        var arrayOfErrorIds = $("input:checkbox").filter(':checked').map(function () {
            return this.id;
        }).get();

        for (var i = 0; i < arrayOfErrorIds.length; i++) {
            var id = arrayOfErrorIds[i];
            var taskArray = ErrorTasks.getErrorTaskDetailsByTaskId(id);
            for (var j = 0; j< taskArray.length; j++) {
                var taskDetails = taskArray[j];
                var taskId = taskDetails.taskId;
                var taskTypeCd = taskDetails.taskTypeCd;
                var updtCnt = taskDetails.updateCount;
                taskIds.Add(i, taskId);
                taskTypeCds.Add(i, taskTypeCd);
                updateCounts.Add(i, updtCnt);
            }
        }
        Service.acknowledgeErrorTasks(taskIds, taskTypeCds, updateCounts);
        Popover.remove();       
    },

    /**
     * Resets the checkboxes before closing the popover
     * @param - none
     * @return- none
     */
    resetCheckboxState: function() {
        $("input:checkbox").each(function() {
            $(this).prop("checked", false);
        });
    }
} ;

/**
 * Represents the Date formats to be used for the particular locale.
 */
 var DateFormats = {
    DATE_FORMAT_SHORTDATE: null,
    DATE_FORMAT_SHORTDATE2: null,
    DATE_FORMAT_SHORTDATE3: null,
    DATE_FORMAT_MEDIUMDATE: null,
    DATE_FORMAT_MILITARY_TIME: null,
    DATE_FORMAT_LONGDATETIME2: null,
    DATE_FORMAT_LONGDATETIME3: null,
    DATE_FORMAT_LONGDATETIME4: null,
    DATE_FORMAT_SHORTDATETIME: null,
    DATE_FORMAT_MEDIUMDATENOYEAR: null,
    
    //Get masks from cc_organizer.html
    getMasks: function() {
      if(discernEnhanceIndicator) {
         var DATE_FORMATS = JSON.parse(m_dateFormatsJSON);
         var masks = DATE_FORMATS.datetimeformats.dateformats;
         Timers.start("CAP:CareCompass.DynamicTranslations");
         Timers.addMetaData("CAP:CareCompass.DynamicTranslations", "Language:" + m_language, "|");
         Timers.stop("CAP:CareCompass.DynamicTranslations"); 
         if(masks !== null) {
            this.DATE_FORMAT_SHORTDATE = this.format(masks.shortdate);
            this.DATE_FORMAT_SHORTDATE2 = this.format(masks.shortDate2);
            this.DATE_FORMAT_MEDIUMDATE = this.format(masks.mediumDate);
            this.DATE_FORMAT_MEDIUMDATENOYEAR =  this.DATE_FORMAT_MEDIUMDATE.replace(", yyyy", "")
            this.DATE_FORMAT_SHORTDATE3 = this.format(this.DATE_FORMAT_MEDIUMDATENOYEAR);
            this.DATE_FORMAT_MILITARY_TIME = this.format(masks.militaryTime);
            this.DATE_FORMAT_LONGDATETIME2 = this.format(masks.longDateTime2);
            this.DATE_FORMAT_LONGDATETIME3 = this.format(masks.longDateTime3);
            this.DATE_FORMAT_LONGDATETIME4 = this.format(this.DATE_FORMAT_MEDIUMDATE + " " + masks.timenoseconds);
            this.DATE_FORMAT_SHORTDATETIME = this.format(this.DATE_FORMAT_SHORTDATE3 + " " + masks.timenoseconds);
         }
      }
      else {
          this.DATE_FORMAT_SHORTDATE = i18n.DATE_FORMAT_SHORTDATE;
          this.DATE_FORMAT_SHORTDATE2 = i18n.DATE_FORMAT_SHORTDATE2
          this.DATE_FORMAT_SHORTDATE3 = i18n.DATE_FORMAT_SHORTDATE3;
          this.DATE_FORMAT_MEDIUMDATE = i18n.DATE_FORMAT_MEDIUMDATE;
          this.DATE_FORMAT_MILITARY_TIME = i18n.DATE_FORMAT_MILITARY_TIME;
          this.DATE_FORMAT_LONGDATETIME2 = i18n.DATE_FORMAT_LONGDATETIME2;
          this.DATE_FORMAT_LONGDATETIME3 = i18n.DATE_FORMAT_LONGDATETIME3;
          this.DATE_FORMAT_LONGDATETIME4 = i18n.DATE_FORMAT_LONGDATETIME4;
          this.DATE_FORMAT_SHORTDATETIME = i18n.DATE_FORMAT_SHORTDATETIME;
      }
    },
    
    //To convert masks to lower case
    format: function(dateString) {
       return dateString.toLowerCase();
    }
};

/**
 * Handles the reply of the add patient transaction and is called once the transaction is complete.
 * @param reply - the reply from the service 967501
 */
function processAcknowledgeErrorTasks(reply) {
    var jsonReply = parseReply(reply);
    CareCompass.loaded = false;
    if (jsonReply != null && jsonReply.status !== "F") {
        Service.loadErrorTasks();        
    }
    else {
        PatientTable.remove();
        ErrorScreen.display(i18n.SYSTEM_FAILURE);        
    }
    CareCompass.isLoaded();       
}