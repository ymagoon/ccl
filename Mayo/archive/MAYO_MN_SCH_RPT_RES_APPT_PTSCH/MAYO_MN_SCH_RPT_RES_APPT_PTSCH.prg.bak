;1)translate mayo_mn_sch_rpt_res_appt_ptsch go
;*** Generated by translate command; please verify contents before re-including in CCL ***
;001 05/20/14  Akcia-SE   implement efficiency sugggestions from Cerner
DROP PROGRAM   MAYO_MN_SCH_RPT_RES_APPT_PTSCH : DBA  GO
CREATE PROGRAM  MAYO_MN_SCH_RPT_RES_APPT_PTSCH : DBA
PROMPT "Output to File/Printer/MINE" ="MINE" ,
"Report Type" ="LOCATION" ,
"Location/Resource Selection" =0 ,
"Begin Date" ="CURDATE" ,
"End Date" ="CURDATE"
 WITH  OUTDEV , RPTTYPE , LOCRES , BEGDATE , ENDDATE
 
IF ( ( VALIDATE ( ACTION_NONE ,  - (1 ))!=0 ) )
DECLARE  ACTION_NONE  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF
 
 
IF ( ( VALIDATE ( ACTION_ADD ,  - (1 ))!=1 ) )
DECLARE  ACTION_ADD  =  I2  WITH  PROTECT , NOCONSTANT (1 )
ENDIF
 
 
IF ( ( VALIDATE ( ACTION_CHG ,  - (1 ))!=2 ) )
DECLARE  ACTION_CHG  =  I2  WITH  PROTECT , NOCONSTANT (2 )
ENDIF
 
 
IF ( ( VALIDATE ( ACTION_DEL ,  - (1 ))!=3 ) )
DECLARE  ACTION_DEL  =  I2  WITH  PROTECT , NOCONSTANT (3 )
ENDIF
 
 
IF ( ( VALIDATE ( ACTION_GET ,  - (1 ))!=4 ) )
DECLARE  ACTION_GET  =  I2  WITH  PROTECT , NOCONSTANT (4 )
ENDIF
 
 
IF ( ( VALIDATE ( ACTION_INA ,  - (1 ))!=5 ) )
DECLARE  ACTION_INA  =  I2  WITH  PROTECT , NOCONSTANT (5 )
ENDIF
 
 
IF ( ( VALIDATE ( ACTION_ACT ,  - (1 ))!=6 ) )
DECLARE  ACTION_ACT  =  I2  WITH  PROTECT , NOCONSTANT (6 )
ENDIF
 
 
IF ( ( VALIDATE ( ACTION_TEMP ,  - (1 ))!=999 ) )
DECLARE  ACTION_TEMP  =  I2  WITH  PROTECT , NOCONSTANT (999 )
ENDIF
 
 
IF ( ( VALIDATE ( TRUE ,  - (1 ))!=1 ) )
DECLARE  TRUE  =  I2  WITH  PROTECT , NOCONSTANT (1 )
ENDIF
 
 
IF ( ( VALIDATE ( FALSE ,  - (1 ))!=0 ) )
DECLARE  FALSE  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF
 
 
IF ( ( VALIDATE ( GEN_NBR_ERROR ,  - (1 ))!=3 ) )
DECLARE  GEN_NBR_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (3 )
ENDIF
 
 
IF ( ( VALIDATE ( INSERT_ERROR ,  - (1 ))!=4 ) )
DECLARE  INSERT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (4 )
ENDIF
 
 
IF ( ( VALIDATE ( UPDATE_ERROR ,  - (1 ))!=5 ) )
DECLARE  UPDATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (5 )
ENDIF
 
 
IF ( ( VALIDATE ( REPLACE_ERROR ,  - (1 ))!=6 ) )
DECLARE  REPLACE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (6 )
ENDIF
 
 
IF ( ( VALIDATE ( DELETE_ERROR ,  - (1 ))!=7 ) )
DECLARE  DELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (7 )
ENDIF
 
 
IF ( ( VALIDATE ( UNDELETE_ERROR ,  - (1 ))!=8 ) )
DECLARE  UNDELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (8 )
ENDIF
 
 
IF ( ( VALIDATE ( REMOVE_ERROR ,  - (1 ))!=9 ) )
DECLARE  REMOVE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (9 )
ENDIF
 
 
IF ( ( VALIDATE ( ATTRIBUTE_ERROR ,  - (1 ))!=10 ) )
DECLARE  ATTRIBUTE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (10 )
ENDIF
 
 
IF ( ( VALIDATE ( LOCK_ERROR ,  - (1 ))!=11 ) )
DECLARE  LOCK_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (11 )
ENDIF
 
 
IF ( ( VALIDATE ( NONE_FOUND ,  - (1 ))!=12 ) )
DECLARE  NONE_FOUND  =  I2  WITH  PROTECT , NOCONSTANT (12 )
ENDIF
 
 
IF ( ( VALIDATE ( SELECT_ERROR ,  - (1 ))!=13 ) )
DECLARE  SELECT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (13 )
ENDIF
 
 
IF ( ( VALIDATE ( UPDATE_CNT_ERROR ,  - (1 ))!=14 ) )
DECLARE  UPDATE_CNT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (14 )
ENDIF
 
 
IF ( ( VALIDATE ( NOT_FOUND ,  - (1 ))!=15 ) )
DECLARE  NOT_FOUND  =  I2  WITH  PROTECT , NOCONSTANT (15 )
ENDIF
 
 
IF ( ( VALIDATE ( VERSION_INSERT_ERROR ,  - (1 ))!=16 ) )
DECLARE  VERSION_INSERT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (16 )
ENDIF
 
 
IF ( ( VALIDATE ( INACTIVATE_ERROR ,  - (1 ))!=17 ) )
DECLARE  INACTIVATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (17 )
ENDIF
 
 
IF ( ( VALIDATE ( ACTIVATE_ERROR ,  - (1 ))!=18 ) )
DECLARE  ACTIVATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (18 )
ENDIF
 
 
IF ( ( VALIDATE ( VERSION_DELETE_ERROR ,  - (1 ))!=19 ) )
DECLARE  VERSION_DELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (19 )
ENDIF
 
 
IF ( ( VALIDATE ( UAR_ERROR ,  - (1 ))!=20 ) )
DECLARE  UAR_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (20 )
ENDIF
 
 
IF ( ( VALIDATE ( DUPLICATE_ERROR ,  - (1 ))!=21 ) )
DECLARE  DUPLICATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (21 )
ENDIF
 
 
IF ( ( VALIDATE ( CCL_ERROR ,  - (1 ))!=22 ) )
DECLARE  CCL_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (22 )
ENDIF
 
 
IF ( ( VALIDATE ( EXECUTE_ERROR ,  - (1 ))!=23 ) )
DECLARE  EXECUTE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (23 )
ENDIF
 
 
IF ( ( VALIDATE ( FAILED ,  - (1 ))!=0 ) )
DECLARE  FAILED  =  I2  WITH  PROTECT , NOCONSTANT ( FALSE )
ENDIF
 
 
IF ( ( VALIDATE ( TABLE_NAME , "ZZZ" )="ZZZ" ) )
DECLARE  TABLE_NAME  =  VC  WITH  PROTECT , NOCONSTANT ("" )
ELSE
SET  TABLE_NAME  =  FILLSTRING (100 , " " )
ENDIF
 
 
IF ( ( VALIDATE ( CALL_ECHO_IND ,  - (1 ))!=0 ) )
DECLARE  CALL_ECHO_IND  =  I2  WITH  PROTECT , NOCONSTANT ( FALSE )
ENDIF
 
 
IF ( ( VALIDATE ( I_VERSION ,  - (1 ))!=0 ) )
DECLARE  I_VERSION  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF
 
 
IF ( ( VALIDATE ( PROGRAM_NAME , "ZZZ" )="ZZZ" ) )
DECLARE  PROGRAM_NAME  =  VC  WITH  PROTECT , NOCONSTANT ( FILLSTRING (30 , " " ))
ENDIF
 
 
IF ( ( VALIDATE ( SCH_SECURITY_ID ,  - (1 ))!=0 ) )
DECLARE  SCH_SECURITY_ID  =  F8  WITH  PROTECT , NOCONSTANT (0.0 )
ENDIF
 
 
IF ( ( VALIDATE ( SCHUAR_DEF , 999 )=999 ) )
 CALL ECHO ("Declaring schuar_def" )
DECLARE  SCHUAR_DEF  =  I2  WITH  PERSIST
SET  SCHUAR_DEF  = 1
DECLARE  UAR_SCH_CHECK_SECURITY (( SEC_TYPE_CD = F8 ( REF )), ( PARENT1_ID = F8 ( REF )), (
 PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 ( REF )), ( USER_ID = F8 ( REF
))) =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR =
"uar_sch_check_security" , PERSIST
DECLARE  UAR_SCH_SECURITY_INSERT (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF )), (
 PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 (
 REF ))) =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR =
"uar_sch_security_insert" , PERSIST
DECLARE  UAR_SCH_SECURITY_PERFORM () =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX =
"libshrschuar.a(libshrschuar.o)" , UAR ="uar_sch_security_perform" , PERSIST
DECLARE  UAR_SCH_CHECK_SECURITY_EX (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF )), (
 PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 (
 REF ))) =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR =
"uar_sch_check_security_ex" , PERSIST
ENDIF
 
 
DECLARE  S_FORMAT_UTC_DATE ( DATE ,  TZ_INDEX ,  OPTION ) =  VC
 
SUBROUTINE   S_FORMAT_UTC_DATE  ( DATE ,  TZ_INDEX ,  OPTION  )
 
IF (  CURUTC  )
IF ( ( TZ_INDEX >0 ) )  RETURN ( FORMAT ( DATETIMEZONE ( DATE ,  TZ_INDEX ),  OPTION ))
 
ELSE   RETURN ( FORMAT ( DATETIMEZONE ( DATE ,  CURTIMEZONESYS ),  OPTION ))
 
ENDIF
 
ELSE   RETURN ( FORMAT ( DATE ,  OPTION ))
 
ENDIF
 
 
END ;Subroutine
 
 
DECLARE  GETCODEVALUE_MEANING  =  C12  WITH  PUBLIC , NOCONSTANT ( FILLSTRING (12 , " " ))
 
DECLARE  MRN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
DECLARE  EN_MRN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
DECLARE  FIN_CD  =  F8  WITH  PUBLIC , NOCONSTANT ( UAR_GET_CODE_BY ("MEANING" , 319 , "FIN NBR" ))
 
DECLARE  HOME_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
DECLARE  GETCODEVALUE (( CODE_SET = I4 ), ( CDF_MEANING = C12 ), ( CODE_VARIABLE = F8 ( REF ))) =
 F8
 
DECLARE  T_PAT_BEG  =  VC  WITH  PUBLIC , NOCONSTANT ("" )
 
DECLARE  T_PAT_END  =  VC  WITH  PUBLIC , NOCONSTANT ("" )
 
DECLARE  BEG_DAY_NUM  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
 
DECLARE  END_DAY_NUM  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
 
DECLARE  PRINT_LINE120  =  C120  WITH  PUBLIC , NOCONSTANT ( FILLSTRING (120 , " " ))
 
DECLARE  T_DETAIL_OFFSET  =  I4  WITH  PUBLIC , NOCONSTANT (13 )
 
DECLARE  MAX_PATIENT_QUAL  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
 
DECLARE  PREV_SORTCOL  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
FREE SET T_REC
 
RECORD  T_REC  (
1  QUAL_CNT  =  I4
1  QUAL [*]
2  SORT_FIELD  =  I4
2  SCH_APPT_ID  =  F8
2  BEG_DT_TM  =  DQ8
2  END_DT_TM  =  DQ8
2  SCH_STATE_DISP  =  C11
2  SCH_EVENT_ID  =  F8
2  SCHEDULE_ID  =  F8
2  APPT_SYNONYM_FREE  =  C30
2  DURATION  =  I4
2  RESOURCE_CD  =  F8
2  RESOURCE_DISP  =  VC
2  APPT_LOCATION_CD  =  F8
2  APPT_LOCATION_DISP  =  VC
2  CONFIRM_DT_TM  =  DQ8
2  DETAIL_LIST  =  VC
2  DETAIL_QUAL_CNT  =  I4
2  DETAIL_QUAL [*]
3  OE_FIELD_ID  =  I4
3  OE_FIELD_DISPLAY_VALUE  =  C255
3  OE_FIELD_DT_TM_VALUE  =  DQ8
3  OE_FIELD_MEANING  =  C25
3  OE_FIELD_VALUE  =  F8
3  OE_FIELD_MEANING_ID  =  F8
3  DESCRIPTION  =  VC
3  ACCEPT_SIZE  =  I4
3  FIELD_TYPE_FLAG  =  I2
2  PATIENT_QUAL_CNT  =  I4
2  PATIENT_QUAL [*]
3  PERSON_ID  =  F8
3  NAME  =  C30
3  MRN  =  C20
3  DISEASE_ALERT_IND  =  I2
3  ENCNTR_ID  =  F8
3  LOC_ROOM_CD  =  F8
3  MC_VERIFY_DT_TM  =  DQ8
3  FIN  =  VC
3  INS [2 ]
4  PLAN_NAME  =  VC
4  COPAY  =  F8
3  HOME_PHONE  =  C15
3  BIRTH_DT_TM  =  DQ8
3  BIRTH_TZ  =  I4
3  BIRTH_FORMATTED  =  VC
3  SEX  =  C10
3  BEG_DT_TM  =  DQ8
3  END_DT_TM  =  DQ8
3  APPT_QUAL_CNT  =  I4
3  APPT_QUAL [*]
4  SCH_EVENT_ID  =  F8
4  SCH_APPT_ID  =  F8
4  BEG_DT_TM  =  DQ8
4  END_DT_TM  =  DQ8
4  SCH_STATE_DISP  =  C11
4  APPT_SYNONYM_FREE  =  C30
4  DURATION  =  I4
4  PRIMARY_RESOURCE_MNEM  =  C30 )
 
FREE SET T_RECORD
 
RECORD  T_RECORD  (
1  BEG_DT_TM  =  DQ8
1  END_DT_TM  =  DQ8
1  FILTER_QUAL [*]
2  ID  =  F8
2  DESCRIPTION  =  VC )
 
DECLARE  FILTER_TXT  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  FILTER_IDX  =  I4  WITH  PROTECT , CONSTANT (3 )
 
DECLARE  FILTER_CNT  =  I4  WITH  PROTECT , NOCONSTANT (0 )
 
SET  FILTER_TXT  =  TRIM ( REFLECT ( PARAMETER ( FILTER_IDX , 0 )), 3 )
 
 CALL ECHO ( CONCAT ("FILTER->" ,  FILTER_TXT ))
 
IF ( ( SUBSTRING (1 , 1 ,  FILTER_TXT )="L" ) )
SET  FILTER_CNT  =  CNVTINT ( SUBSTRING (2 , ( TEXTLEN ( FILTER_TXT )-1 ),  FILTER_TXT ))
ELSEIF ( ( SUBSTRING (1 , 1 ,  FILTER_TXT )="F" ) )
SET  FILTER_CNT  = 1
ENDIF
 
 
IF ( ( FILTER_CNT >0 ) )
SET  STAT  =  ALTERLIST ( T_RECORD -> FILTER_QUAL ,  FILTER_CNT )
FOR (  J  = 1  TO  FILTER_CNT  )
 
SET  T_RECORD -> FILTER_QUAL [ J ]-> ID  =  PARAMETER ( FILTER_IDX ,  J )
 
ENDFOR
 
IF ( ( T_RECORD -> FILTER_QUAL [1 ]-> ID =0 ) )
SET  STAT  =  ALTERLIST ( T_RECORD -> FILTER_QUAL , 0 )
ENDIF
 
FOR (  J  = 1  TO  FILTER_CNT  )
 
SET  T_RECORD -> FILTER_QUAL [ J ]-> DESCRIPTION  =  UAR_GET_CODE_DISPLAY ( T_RECORD -> FILTER_QUAL
[ J ]-> ID )
 
ENDFOR
 
ELSE
SET  STAT  =  ALTERLIST ( T_RECORD -> FILTER_QUAL , 1 )
ENDIF
 
 
 CALL ECHO ( BUILD ("FILTER_CNT->" ,  FILTER_CNT ))
 
SET  T_PAT_BEG  =  CONCAT ( $BEGDATE , " 00:00:00" )
 
SET  T_RECORD -> BEG_DT_TM  =  CNVTDATETIME ( T_PAT_BEG )
 
SET  T_PAT_END  =  CONCAT ( $ENDDATE , " 23:59:59" )
 
SET  T_RECORD -> END_DT_TM  =  CNVTDATETIME ( T_PAT_END )
 
 CALL ECHO ( T_PAT_BEG )
 
 CALL ECHO ( T_PAT_END )
 
SET  T_REC -> QUAL_CNT  = 0
 
SET  BEG_DAY_NUM  =  CNVTDATE2 ( FORMAT ( CNVTDATETIME ( T_PAT_BEG ), "MMDDYYYY;;DATE" ),
"MMDDYYYY" )
 
SET  END_DAY_NUM  =  CNVTDATE2 ( FORMAT ( CNVTDATETIME ( T_PAT_END ), "MMDDYYYY;;DATE" ),
"MMDDYYYY" )
 
SET  GETCODEVALUE_MEANING  = "MRN"
 
 CALL GETCODEVALUE (4 ,  GETCODEVALUE_MEANING ,  MRN_CD )
 
 CALL GETCODEVALUE (319 ,  GETCODEVALUE_MEANING ,  EN_MRN_CD )
 
SET  GETCODEVALUE_MEANING  = "HOME"
 
 CALL GETCODEVALUE (43 ,  GETCODEVALUE_MEANING ,  HOME_CD )
 
 CALL ECHORECORD ( T_RECORD )
 
 CALL ECHO ("Retrieving appointments..." )
 
SELECT 
;start 001
if ($RPTTYPE ="RESOURCE")
	PLAN ( D )
	 AND ( A
	WHERE (A.BEG_DT_TM> CNVTDATETIME ( T_RECORD -> BEG_DT_TM )) 
	AND (A.BEG_DT_TM< CNVTDATETIME (T_RECORD -> END_DT_TM )) 
	AND (T_RECORD -> FILTER_QUAL [D.SEQ]->ID  IN (0 ,A.RESOURCE_CD)) 
	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )) 
	AND (A.STATE_MEANING IN ("CHECKED IN" ,
	"CHECKED OUT" ,
	"CONFIRMED" ,
	"FINALIZED" ,
	"NOSHOW" ,
	"PENDING" ,
	"STANDBY" ,
	"SCHEDULED" )) 
	AND  (( A.ROLE_MEANING= NULL  )  OR  ((A.ROLE_MEANING!="PATIENT" ) ))  
	AND (A.ACTIVE_IND=1 ))
	 AND ( E
	WHERE (E.SCH_EVENT_ID=A.SCH_EVENT_ID) AND (E.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00"
	)))
	 AND ( EP
	WHERE (EP.SCH_EVENT_ID=A.SCH_EVENT_ID) AND (EP.VERSION_DT_TM= CNVTDATETIME (
	"31-DEC-2100 00:00:00.00" )) AND (EP.ACTIVE_IND=1 ))
	 AND ( P
	WHERE (P.PERSON_ID=EP.PERSON_ID))
	 AND ( L
	WHERE (L.LOCATION_CD=A.APPT_LOCATION_CD))
	 AND ( PP
	WHERE (PP.PERSON_ID=(EP.PERSON_ID+0 )))
	 AND ( EA
	WHERE (EA.ENCNTR_ID= OUTERJOIN (EP.ENCNTR_ID)) AND ((EA.ENCNTR_ID+0 )> OUTERJOIN (0 )) AND (
	EA.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( FIN_CD )) AND (EA.ACTIVE_IND= OUTERJOIN (1 )) AND (
	EA.BEG_EFFECTIVE_DT_TM<= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (
	EA.END_EFFECTIVE_DT_TM>= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))))
	 AND ( D2
	WHERE (D2.SEQ=1 ))
	 AND ( ENA
	WHERE (ENA.ENCNTR_ID=EP.ENCNTR_ID) AND (ENA.ENCNTR_ID>0 ) AND (ENA.ENCNTR_ALIAS_TYPE_CD= EN_MRN_CD )
	 AND (ENA.ACTIVE_IND=1 ) AND (ENA.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (
	ENA.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
	 AND ( D3
	WHERE (D3.SEQ=1 ))
	 AND ( OAPR
	WHERE (OAPR.ORGANIZATION_ID=L.ORGANIZATION_ID) AND (OAPR.ALIAS_ENTITY_NAME="PERSON_ALIAS" ) AND (
	OAPR.ALIAS_ENTITY_ALIAS_TYPE_CD= MRN_CD ))
	 AND ( PA
	WHERE (PA.PERSON_ID=P.PERSON_ID) AND (PA.ALIAS_POOL_CD=OAPR.ALIAS_POOL_CD) AND (
	PA.PERSON_ALIAS_TYPE_CD= MRN_CD ) AND (PA.ACTIVE_IND=1 ) AND (PA.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME
	( CURDATE ,  CURTIME3 )) AND (PA.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
	 AND ( D4
	WHERE (D4.SEQ=1 ))
	 AND ( PH
	WHERE (PH.PARENT_ENTITY_ID=P.PERSON_ID) AND (PH.PARENT_ENTITY_NAME="PERSON" ) AND (PH.PHONE_ID!=0 )
	 AND (PH.PHONE_TYPE_CD= HOME_CD ) AND (PH.ACTIVE_IND=1 ))
else
	PLAN ( D )
	 AND ( A
	WHERE (A.BEG_DT_TM> CNVTDATETIME ( T_RECORD -> BEG_DT_TM )) 
	AND (A.BEG_DT_TM< CNVTDATETIME (T_RECORD -> END_DT_TM )) 
	AND (T_RECORD -> FILTER_QUAL [D.SEQ]-> ID  IN (0 ,A.APPT_LOCATION_CD)) 
	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )) 
	AND (A.STATE_MEANING IN ("CHECKED IN" ,
	"CHECKED OUT" ,
	"CONFIRMED" ,
	"FINALIZED" ,
	"NOSHOW" ,
	"PENDING" ,
	"STANDBY" ,
	"SCHEDULED" )) 
	AND  (( A.ROLE_MEANING= NULL  )  OR  ((A.ROLE_MEANING!="PATIENT" ) ))  
	AND (A.ACTIVE_IND=1 ))
	 AND ( E
	WHERE (E.SCH_EVENT_ID=A.SCH_EVENT_ID) AND (E.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00"
	)))
	 AND ( EP
	WHERE (EP.SCH_EVENT_ID=A.SCH_EVENT_ID) AND (EP.VERSION_DT_TM= CNVTDATETIME (
	"31-DEC-2100 00:00:00.00" )) AND (EP.ACTIVE_IND=1 ))
	 AND ( P
	WHERE (P.PERSON_ID=EP.PERSON_ID))
	 AND ( L
	WHERE (L.LOCATION_CD=A.APPT_LOCATION_CD))
	 AND ( PP
	WHERE (PP.PERSON_ID=(EP.PERSON_ID+0 )))
	 AND ( EA
	WHERE (EA.ENCNTR_ID= OUTERJOIN (EP.ENCNTR_ID)) AND ((EA.ENCNTR_ID+0 )> OUTERJOIN (0 )) AND (
	EA.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( FIN_CD )) AND (EA.ACTIVE_IND= OUTERJOIN (1 )) AND (
	EA.BEG_EFFECTIVE_DT_TM<= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (
	EA.END_EFFECTIVE_DT_TM>= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))))
	 AND ( D2
	WHERE (D2.SEQ=1 ))
	 AND ( ENA
	WHERE (ENA.ENCNTR_ID=EP.ENCNTR_ID) AND (ENA.ENCNTR_ID>0 ) AND (ENA.ENCNTR_ALIAS_TYPE_CD= EN_MRN_CD )
	 AND (ENA.ACTIVE_IND=1 ) AND (ENA.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (
	ENA.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
	 AND ( D3
	WHERE (D3.SEQ=1 ))
	 AND ( OAPR
	WHERE (OAPR.ORGANIZATION_ID=L.ORGANIZATION_ID) AND (OAPR.ALIAS_ENTITY_NAME="PERSON_ALIAS" ) AND (
	OAPR.ALIAS_ENTITY_ALIAS_TYPE_CD= MRN_CD ))
	 AND ( PA
	WHERE (PA.PERSON_ID=P.PERSON_ID) AND (PA.ALIAS_POOL_CD=OAPR.ALIAS_POOL_CD) AND (
	PA.PERSON_ALIAS_TYPE_CD= MRN_CD ) AND (PA.ACTIVE_IND=1 ) AND (PA.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME
	( CURDATE ,  CURTIME3 )) AND (PA.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
	 AND ( D4
	WHERE (D4.SEQ=1 ))
	 AND ( PH
	WHERE (PH.PARENT_ENTITY_ID=P.PERSON_ID) AND (PH.PARENT_ENTITY_NAME="PERSON" ) AND (PH.PHONE_ID!=0 )
	 AND (PH.PHONE_TYPE_CD= HOME_CD ) AND (PH.ACTIVE_IND=1 ))
	
endif
;end 001

 INTO "nl:"
A.SCH_APPT_ID,
 SCH_STATE_DISP = UAR_GET_CODE_DISPLAY (A.SCH_STATE_CD),
 SEX_DISP = UAR_GET_CODE_DISPLAY (P.SEX_CD),
E.SCH_EVENT_ID,
EP.PERSON_ID,
P.NAME_FULL_FORMATTED,
 ENA_EXIST = DECODE (ENA.SEQ, 1 , 0 ),
 OAPR_EXIST = DECODE (OAPR.SEQ, 1 , 0 ),
 PH_EXIST = DECODE (PH.SEQ, 1 , 0 )
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( SIZE ( T_RECORD -> FILTER_QUAL , 5 ))),
( SCH_APPT  A ),
( SCH_EVENT  E ),
( SCH_EVENT_PATIENT  EP ),
( PERSON  P ),
( PERSON_PATIENT  PP ),
( ENCNTR_ALIAS  EA ),
( DUMMYT  D2 ),
( ENCNTR_ALIAS  ENA ),
( LOCATION  L ),
( DUMMYT  D3 ),
( ORG_ALIAS_POOL_RELTN  OAPR ),
( PERSON_ALIAS  PA ),
( DUMMYT  D4 ),
( PHONE  PH )
;001 PLAN ( D )
;001  AND ( A
;001 WHERE (A.BEG_DT_TM> CNVTDATETIME ( T_RECORD -> BEG_DT_TM )) 
;001 AND (A.BEG_DT_TM< CNVTDATETIME (T_RECORD -> END_DT_TM )) 
;001 AND  (( ( $RPTTYPE ="RESOURCE" ) AND ( T_RECORD -> FILTER_QUAL [D.SEQ]->
;001  ID  IN (0 ,A.RESOURCE_CD)) )  OR  (( $RPTTYPE ="LOCATION" ) AND ( T_RECORD -> FILTER_QUAL [D.SEQ]-> ID  IN (0 ,
;001 A.APPT_LOCATION_CD)) ))  
;001 AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )) 
;001 AND (A.STATE_MEANING IN ("CHECKED IN" ,
;001 "CHECKED OUT" ,
;001 "CONFIRMED" ,
;001 "FINALIZED" ,
;001 "NOSHOW" ,
;001 "PENDING" ,
;001 "STANDBY" ,
;001 "SCHEDULED" )) 
;001 AND  (( A.ROLE_MEANING= NULL  )  OR  ((A.ROLE_MEANING!="PATIENT" ) ))  
;001 AND (A.ACTIVE_IND=1 ))

; AND ( E
;WHERE (E.SCH_EVENT_ID=A.SCH_EVENT_ID) AND (E.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00"
;)))
; AND ( EP
;WHERE (EP.SCH_EVENT_ID=A.SCH_EVENT_ID) AND (EP.VERSION_DT_TM= CNVTDATETIME (
;"31-DEC-2100 00:00:00.00" )) AND (EP.ACTIVE_IND=1 ))
; AND ( P
;WHERE (P.PERSON_ID=EP.PERSON_ID))
; AND ( L
;WHERE (L.LOCATION_CD=A.APPT_LOCATION_CD))
; AND ( PP
;WHERE (PP.PERSON_ID=(EP.PERSON_ID+0 )))
; AND ( EA
;WHERE (EA.ENCNTR_ID= OUTERJOIN (EP.ENCNTR_ID)) AND ((EA.ENCNTR_ID+0 )> OUTERJOIN (0 )) AND (
;EA.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( FIN_CD )) AND (EA.ACTIVE_IND= OUTERJOIN (1 )) AND (
;EA.BEG_EFFECTIVE_DT_TM<= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (
;EA.END_EFFECTIVE_DT_TM>= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))))
; AND ( D2
;WHERE (D2.SEQ=1 ))
; AND ( ENA
;WHERE (ENA.ENCNTR_ID=EP.ENCNTR_ID) AND (ENA.ENCNTR_ID>0 ) AND (ENA.ENCNTR_ALIAS_TYPE_CD= EN_MRN_CD )
; AND (ENA.ACTIVE_IND=1 ) AND (ENA.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (
;ENA.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
; AND ( D3
;WHERE (D3.SEQ=1 ))
; AND ( OAPR
;WHERE (OAPR.ORGANIZATION_ID=L.ORGANIZATION_ID) AND (OAPR.ALIAS_ENTITY_NAME="PERSON_ALIAS" ) AND (
;OAPR.ALIAS_ENTITY_ALIAS_TYPE_CD= MRN_CD ))
; AND ( PA
;WHERE (PA.PERSON_ID=P.PERSON_ID) AND (PA.ALIAS_POOL_CD=OAPR.ALIAS_POOL_CD) AND (
;PA.PERSON_ALIAS_TYPE_CD= MRN_CD ) AND (PA.ACTIVE_IND=1 ) AND (PA.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME
;( CURDATE ,  CURTIME3 )) AND (PA.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
; AND ( D4
;WHERE (D4.SEQ=1 ))
; AND ( PH
;WHERE (PH.PARENT_ENTITY_ID=P.PERSON_ID) AND (PH.PARENT_ENTITY_NAME="PERSON" ) AND (PH.PHONE_ID!=0 )
; AND (PH.PHONE_TYPE_CD= HOME_CD ) AND (PH.ACTIVE_IND=1 ))
 
ORDER BY  CNVTDATETIME (A.BEG_DT_TM),
A.SCH_APPT_ID,
P.PERSON_ID
 
HEAD REPORT
 T_REC -> QUAL_CNT =0
HEAD A.SCH_APPT_ID
 T_REC -> QUAL_CNT =( T_REC -> QUAL_CNT +1 ), T_QUAL = T_REC -> QUAL_CNT ,
IF ( ( MOD ( T_QUAL , 10 )=1 ) )  STAT = ALTERLIST ( T_REC -> QUAL , ( T_QUAL +9 ))
ENDIF
, T_REC -> QUAL [ T_QUAL ]-> SCH_APPT_ID =A.SCH_APPT_ID, T_REC -> QUAL [ T_QUAL ]-> SORT_FIELD =
 CNVTDATE2 ( FORMAT (A.BEG_DT_TM, "MMDDYYYY;;D" ), "MMDDYYYY" ), T_REC -> QUAL [ T_QUAL ]->
 BEG_DT_TM =A.BEG_DT_TM, T_REC -> QUAL [ T_QUAL ]-> END_DT_TM =A.END_DT_TM, T_REC -> QUAL [ T_QUAL ]
-> SCH_STATE_DISP = SCH_STATE_DISP , T_REC -> QUAL [ T_QUAL ]-> SCH_EVENT_ID =E.SCH_EVENT_ID, T_REC
-> QUAL [ T_QUAL ]-> SCHEDULE_ID =A.SCHEDULE_ID, T_REC -> QUAL [ T_QUAL ]-> APPT_SYNONYM_FREE =
 TRIM (E.APPT_SYNONYM_FREE, 3 ), T_REC -> QUAL [ T_QUAL ]-> DURATION =A.DURATION, T_REC -> QUAL [
 T_QUAL ]-> PATIENT_QUAL_CNT =0 , T_REC -> QUAL [ T_QUAL ]-> DETAIL_QUAL_CNT =0 , T_REC -> QUAL [
 T_QUAL ]-> RESOURCE_CD =A.RESOURCE_CD, T_REC -> QUAL [ T_QUAL ]-> RESOURCE_DISP = EVALUATE (
A.RESOURCE_CD, 0.0 , "(Unassigned)" ,  UAR_GET_CODE_DISPLAY (A.RESOURCE_CD)), T_REC -> QUAL [
 T_QUAL ]-> APPT_LOCATION_CD =A.APPT_LOCATION_CD, T_REC -> QUAL [ T_QUAL ]-> APPT_LOCATION_DISP =
 UAR_GET_CODE_DISPLAY (A.APPT_LOCATION_CD)
HEAD P.PERSON_ID
 T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL_CNT =( T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL_CNT +1 ),
 T_PATIENT = T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL_CNT ,
IF ( ( MOD ( T_PATIENT , 10 )=1 ) )  STAT = ALTERLIST ( T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL , (
 T_PATIENT +9 ))
ENDIF
, T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> PERSON_ID =EP.PERSON_ID, T_REC -> QUAL [
 T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> NAME =P.NAME_FULL_FORMATTED, T_REC -> QUAL [ T_QUAL ]->
 PATIENT_QUAL [ T_PATIENT ]-> BIRTH_DT_TM =P.BIRTH_DT_TM, T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [
 T_PATIENT ]-> BIRTH_TZ = VALIDATE (P.BIRTH_TZ, 0 ), T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [
 T_PATIENT ]-> BIRTH_FORMATTED = S_FORMAT_UTC_DATE (P.BIRTH_DT_TM,  VALIDATE (P.BIRTH_TZ, 0 ),
"@SHORTDATE;4;D" ), T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> SEX = SEX_DISP ,
IF (  ENA_EXIST  AND (ENA.ENCNTR_ID>0 ) )  T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]->
 MRN = SUBSTRING (1 , 20 ,  CNVTALIAS (ENA.ALIAS, ENA.ALIAS_POOL_CD))
ELSEIF (  OAPR_EXIST  )  T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> MRN = SUBSTRING (1
, 20 ,  CNVTALIAS (PA.ALIAS, PA.ALIAS_POOL_CD))
ELSE   T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> MRN =""
ENDIF
,
IF (  PH_EXIST  )  T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> HOME_PHONE = CNVTPHONE (
 CNVTALPHANUM (PH.PHONE_NUM), PH.PHONE_FORMAT_CD)
ELSE   T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> HOME_PHONE =""
ENDIF
,
IF ( (PP.DISEASE_ALERT_CD>0 ) )  T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]->
 DISEASE_ALERT_IND =1
ENDIF
, T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> ENCNTR_ID =EP.ENCNTR_ID, T_REC -> QUAL [
 T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> FIN = CNVTALIAS (EA.ALIAS, EA.ALIAS_POOL_CD), T_REC ->
 QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> BEG_DT_TM = CNVTDATETIME ( CONCAT ( FORMAT (
A.BEG_DT_TM, "DD-MMM-YYYY;;DATE" ), " 00:00:00.00" )), T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [
 T_PATIENT ]-> END_DT_TM = CNVTDATETIME ( CONCAT ( FORMAT (A.END_DT_TM, "DD-MMM-YYYY;;DATE" ),
" 23:59:00.00" )), T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL [ T_PATIENT ]-> APPT_QUAL_CNT =0
FOOT  P.PERSON_ID
 NULL
FOOT  A.SCH_APPT_ID
 
IF ( ( MOD ( T_PATIENT , 10 )!=0 ) )  STAT = ALTERLIST ( T_REC -> QUAL [ T_QUAL ]-> PATIENT_QUAL ,
 T_PATIENT )
ENDIF
,
IF ( ( T_PATIENT > MAX_PATIENT_QUAL ) )  MAX_PATIENT_QUAL = T_PATIENT
ENDIF
 
FOOT REPORT
 
IF ( ( MOD ( T_QUAL , 10 )!=0 ) )  STAT = ALTERLIST ( T_REC -> QUAL ,  T_QUAL )
ENDIF
 
 WITH  NOCOUNTER , DIO = POSTSCRIPT , MAXCOL =2000 , MAXQUAL ( PA , 1 ), OUTERJOIN = D2 , DONTCARE =
 ENA , OUTERJOIN = D3 , DONTCARE = OAPR , OUTERJOIN = D4 , DONTCARE = PH
 
 CALL ECHO ("Retrieving event details..." )
 
SELECT  INTO "nl:"
ED.UPDT_CNT,
OEF.UPDT_CNT,
D.SEQ
FROM ( SCH_EVENT_DETAIL  ED ),
( ORDER_ENTRY_FIELDS  OEF ),
( DUMMYT  D  WITH  SEQ = VALUE ( T_REC -> QUAL_CNT ))
 PLAN ( D )
 AND ( ED
WHERE (ED.SCH_EVENT_ID= T_REC -> QUAL [D.SEQ]-> SCH_EVENT_ID ) AND (ED.SCH_ACTION_ID=0 ) AND (
ED.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )) AND (ED.ACTIVE_IND=1 ))
 AND ( OEF
WHERE (OEF.OE_FIELD_ID=ED.OE_FIELD_ID))
 
ORDER BY D.SEQ,
ED.SEQ_NBR
 
HEAD D.SEQ
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL_CNT =0
DETAIL
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL_CNT =( T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL_CNT +1 ),
 DETAIL_INDEX = T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL_CNT ,
 
IF ( ( MOD ( DETAIL_INDEX , 10 )=1 ) )  STAT = ALTERLIST ( T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL , (
 DETAIL_INDEX +9 ))
ENDIF
,
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> OE_FIELD_ID =ED.OE_FIELD_ID,
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> OE_FIELD_DISPLAY_VALUE =
ED.OE_FIELD_DISPLAY_VALUE,
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> OE_FIELD_DT_TM_VALUE =
ED.OE_FIELD_DT_TM_VALUE,
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> OE_FIELD_MEANING =ED.OE_FIELD_MEANING,
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> OE_FIELD_VALUE =ED.OE_FIELD_VALUE,
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> OE_FIELD_MEANING_ID =ED.OE_FIELD_MEANING_ID,
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> DESCRIPTION = CONCAT ( TRIM (OEF.DESCRIPTION
), ":" ),
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> ACCEPT_SIZE =OEF.ACCEPT_SIZE,
 T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL [ DETAIL_INDEX ]-> FIELD_TYPE_FLAG =OEF.FIELD_TYPE_FLAG,
 T_REC -> QUAL [D.SEQ]-> DETAIL_LIST = CONCAT ( T_REC -> QUAL [D.SEQ]-> DETAIL_LIST ,  TRIM (
OEF.DESCRIPTION, 3 ), ": " ,  TRIM (ED.OE_FIELD_DISPLAY_VALUE, 3 ),  CHAR (13 ),  CHAR (10 ))
FOOT  D.SEQ
 
IF ( ( MOD ( DETAIL_INDEX , 10 )!=0 ) )  STAT = ALTERLIST ( T_REC -> QUAL [D.SEQ]-> DETAIL_QUAL ,
 DETAIL_INDEX )
ENDIF
 
 WITH  NOCOUNTER
 
 CALL ECHO ("Retrieving confirm date..." )
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( T_REC -> QUAL_CNT )),
( SCH_EVENT_ACTION  EA )
 PLAN ( D )
 AND ( EA
WHERE (EA.SCH_EVENT_ID= T_REC -> QUAL [D.SEQ]-> SCH_EVENT_ID ) AND (EA.ACTIVE_IND=1 ) AND (
EA.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (EA.END_EFFECTIVE_DT_TM>=
 CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (EA.VERSION_DT_TM= CNVTDATETIME (
"31-DEC-2100 00:00:00.00" )) AND (EA.ACTION_MEANING="CONFIRM" ))
 
ORDER BY D.SEQ,
EA.ACTION_DT_TM
 
DETAIL
 T_REC -> QUAL [D.SEQ]-> CONFIRM_DT_TM =EA.ACTION_DT_TM
 WITH  NOCOUNTER
 
 CALL ECHO ("Retrieving encounter info..." )
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( T_REC -> QUAL_CNT )),
( DUMMYT  D2  WITH  SEQ = VALUE ( MAX_PATIENT_QUAL )),
( ENCOUNTER  E )
 PLAN ( D )
 AND ( D2
WHERE (D2.SEQ<= T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL_CNT ))
 AND ( E
WHERE (E.ENCNTR_ID= T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> ENCNTR_ID ))
 
ORDER BY D.SEQ,
D2.SEQ
 
DETAIL
 T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> LOC_ROOM_CD =E.LOC_ROOM_CD
 WITH  NOCOUNTER
 
 CALL ECHO ("Retrieving health plan data..." )
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( T_REC -> QUAL_CNT )),
( DUMMYT  D2  WITH  SEQ = VALUE ( MAX_PATIENT_QUAL )),
( ENCOUNTER  E ),
( ENCNTR_PLAN_RELTN  EPR ),
( HEALTH_PLAN  HP ),
( ENCNTR_BENEFIT_R  EBR )
 PLAN ( D )
 AND ( D2
WHERE (D2.SEQ<= T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL_CNT ))
 AND ( E
WHERE (E.ENCNTR_ID= T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> ENCNTR_ID ))
 AND ( EPR
WHERE (EPR.ENCNTR_ID=(E.ENCNTR_ID+0 )) AND (EPR.PRIORITY_SEQ IN (1 ,
2 )) AND (EPR.ACTIVE_IND=1 ) AND (EPR.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 ))
 AND (EPR.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
 AND ( HP
WHERE (HP.HEALTH_PLAN_ID=EPR.HEALTH_PLAN_ID))
 AND ( EBR
WHERE (EBR.ENCNTR_PLAN_RELTN_ID= OUTERJOIN (EPR.ENCNTR_PLAN_RELTN_ID)) AND (EBR.ACTIVE_IND=
 OUTERJOIN (1 )) AND (EBR.BEG_EFFECTIVE_DT_TM<= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 )))
 AND (EBR.END_EFFECTIVE_DT_TM>= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))))
 
ORDER BY D.SEQ,
D2.SEQ,
EPR.PRIORITY_SEQ,
EPR.UPDT_DT_TM,
EBR.UPDT_DT_TM
 
DETAIL
 T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> LOC_ROOM_CD =E.LOC_ROOM_CD,
 T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> INS [EPR.PRIORITY_SEQ]-> PLAN_NAME =HP.PLAN_NAME,
 T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> INS [EPR.PRIORITY_SEQ]-> COPAY =EBR.COPAY_AMT,
 
IF ( ( CNVTUPPER ( CNVTALPHANUM ( UAR_GET_CODE_DISPLAY (E.ENCNTR_TYPE_CD))) IN (
"HOSPITALRECURRINGOUTPATIENT" ,
"CLINICRECURRINGOUTPATIENT" )) AND ( UAR_GET_CODE_MEANING (HP.FINANCIAL_CLASS_CD)="MEDICARE" ) AND (
 CNVTUPPER ( CNVTALPHANUM ( UAR_GET_CODE_DISPLAY (EPR.VERIFY_STATUS_CD)))="VERIFIED" ) AND (
EPR.PRIORITY_SEQ=1 ) )  T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> MC_VERIFY_DT_TM =
EPR.VERIFY_DT_TM
ENDIF
 
 WITH  NOCOUNTER
 
DECLARE  SECPT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 356 ,
"SECPATIENT" ))
 
DECLARE  YES_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAYKEY" , 100700 , "YES" ))
 
 CALL ECHO ("Retrieving person udf info..." )
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( T_REC -> QUAL_CNT )),
( DUMMYT  D2  WITH  SEQ = VALUE ( MAX_PATIENT_QUAL )),
( PERSON_INFO  PI )
 PLAN ( D )
 AND ( D2
WHERE (D2.SEQ<= T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL_CNT ))
 AND ( PI
WHERE (PI.PERSON_ID= T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> PERSON_ID ) AND (
PI.INFO_SUB_TYPE_CD= SECPT_CD ) AND (PI.VALUE_CD= YES_CD ) AND (PI.ACTIVE_IND=1 ) AND (
PI.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (PI.END_EFFECTIVE_DT_TM>=
 CNVTDATETIME ( CURDATE ,  CURTIME3 )))
 
ORDER BY D.SEQ,
D2.SEQ
 
DETAIL
 T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [D2.SEQ]-> HOME_PHONE ="DO NOT CALL"
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( T_REC -> QUAL_CNT ))
 PLAN ( D )
 
 
DETAIL
 
IF ( ( T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [1 ]-> MC_VERIFY_DT_TM >0 ) )  T_REC -> QUAL [D.SEQ]->
 DETAIL_LIST = CONCAT ( T_REC -> QUAL [D.SEQ]-> DETAIL_LIST , "MC Verification Date: " ,  FORMAT (
 T_REC -> QUAL [D.SEQ]-> PATIENT_QUAL [1 ]-> MC_VERIFY_DT_TM , "MM/DD/YYYY;;D:" ),  CHAR (13 ),
 CHAR (10 ))
ENDIF
 
 WITH  NOCOUNTER
 
 CALL ECHORECORD ( T_REC )
 
 EXECUTE REPORTRTL
 
DECLARE  _CREATEFONTS ( DUMMY ) =  NULL  WITH  PROTECT
 
DECLARE  _CREATEPENS ( DUMMY ) =  NULL  WITH  PROTECT
 
DECLARE  LAYOUTQUERY ( DUMMY ) =  NULL  WITH  PROTECT
 
DECLARE  PAGEBREAK ( DUMMY ) =  NULL  WITH  PROTECT
 
DECLARE  FINALIZEREPORT (( SSENDREPORT = VC )) =  NULL  WITH  PROTECT
 
DECLARE  HEADPAGESECTION (( NCALC = I2 )) =  F8  WITH  PROTECT
 
DECLARE  HEADPAGESECTIONABS (( NCALC = I2 ), ( OFFSETX = F8 ), ( OFFSETY = F8 )) =  F8  WITH
 PROTECT
 
DECLARE  DETAILSECTION (( NCALC = I2 ), ( MAXHEIGHT = F8 ), ( BCONTINUE = I2 ( REF ))) =  F8  WITH
 PROTECT
 
DECLARE  DETAILSECTIONABS (( NCALC = I2 ), ( OFFSETX = F8 ), ( OFFSETY = F8 ), ( MAXHEIGHT = F8 ), (
 BCONTINUE = I2 ( REF ))) =  F8  WITH  PROTECT
 
DECLARE  FOOTPAGESECTION (( NCALC = I2 )) =  F8  WITH  PROTECT
 
DECLARE  FOOTPAGESECTIONABS (( NCALC = I2 ), ( OFFSETX = F8 ), ( OFFSETY = F8 )) =  F8  WITH
 PROTECT
 
DECLARE  INITIALIZEREPORT ( DUMMY ) =  NULL  WITH  PROTECT
 
DECLARE  _HREPORT  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _YOFFSET  =  F8  WITH  NOCONSTANT (0.0 ), PROTECT
 
DECLARE  _XOFFSET  =  F8  WITH  NOCONSTANT (0.0 ), PROTECT
 
DECLARE  RPT_RENDER  =  I2  WITH  CONSTANT (0 ), PROTECT
 
DECLARE  _CRLF  =  VC  WITH  CONSTANT ( CONCAT ( CHAR (13 ),  CHAR (10 ))), PROTECT
 
DECLARE  RPT_CALCHEIGHT  =  I2  WITH  CONSTANT (1 ), PROTECT
 
DECLARE  _YSHIFT  =  F8  WITH  NOCONSTANT (0.0 ), PROTECT
 
DECLARE  _XSHIFT  =  F8  WITH  NOCONSTANT (0.0 ), PROTECT
 
DECLARE  _SENDTO  =  VC  WITH  NOCONSTANT ("" ), PROTECT
 
DECLARE  _RPTERR  =  I2  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _RPTSTAT  =  I2  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _OLDFONT  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _OLDPEN  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _DUMMYFONT  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _DUMMYPEN  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _FDRAWHEIGHT  =  F8  WITH  NOCONSTANT (0.0 ), PROTECT
 
DECLARE  _RPTPAGE  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _OUTPUTTYPE  =  I2  WITH  NOCONSTANT ( RPT_POSTSCRIPT ), PROTECT
 
DECLARE  _BHOLDCONTINUE  =  I2  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _BCONTDETAILSECTION  =  I2  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _REMDETAILLIST  =  I2  WITH  NOCONSTANT (1 ), PROTECT
 
DECLARE  _HELVETICA9B0  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _HELVETICA80  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _HELVETICA12B0  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _TIMES100  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _HELVETICA100  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
DECLARE  _PEN14S0C0  =  I4  WITH  NOCONSTANT (0 ), PROTECT
 
SUBROUTINE   LAYOUTQUERY  ( DUMMY  )
 
 CALL INITIALIZEREPORT (0 )
SELECT  INTO "NL:"
 SORTCOL = EVALUATE ( $RPTTYPE , "RESOURCE" ,  SUBSTRING (1 , 50 ,  CNVTUPPER ( T_REC -> QUAL [
D1.SEQ]-> RESOURCE_DISP )),  SUBSTRING (1 , 50 ,  CNVTUPPER ( T_REC -> QUAL [D1.SEQ]->
 APPT_LOCATION_DISP ))),
 BEG_DT_TM = T_REC -> QUAL [D1.SEQ]-> BEG_DT_TM
FROM ( DUMMYT  D1  WITH  SEQ = VALUE ( SIZE ( T_REC -> QUAL , 5 )))
 PLAN ( D1 )
 
ORDER BY  SORTCOL ,
 BEG_DT_TM
 
HEAD REPORT
 _D0 =D1.SEQ,
 _D1 = BEG_DT_TM ,
 _FENDDETAIL =( RPTREPORT -> M_PAGEWIDTH - RPTREPORT -> M_MARGINBOTTOM ),
 _FENDDETAIL =( _FENDDETAIL - FOOTPAGESECTION ( RPT_CALCHEIGHT ))
HEAD PAGE
 
IF ( ( CURPAGE >1 ) )  DUMMY_VAL = PAGEBREAK (0 )
ENDIF
,
 DUMMY_VAL = HEADPAGESECTION ( RPT_RENDER )
HEAD  SORTCOL
 
IF ( ( SORTCOL != PREV_SORTCOL ) AND ( PREV_SORTCOL >" " ) ) BREAK
ENDIF
, PREV_SORTCOL = SORTCOL
DETAIL
 _BCONTDETAILSECTION =0 ,
 BFIRSTTIME =1 ,
 
WHILE (  (( ( _BCONTDETAILSECTION =1 ) )  OR  (( BFIRSTTIME =1 ) )) )
 _BHOLDCONTINUE = _BCONTDETAILSECTION , _FDRAWHEIGHT = DETAILSECTION ( RPT_CALCHEIGHT , (
 _FENDDETAIL - _YOFFSET ),  _BHOLDCONTINUE ),
IF ( (( _YOFFSET + _FDRAWHEIGHT )> _FENDDETAIL ) ) BREAK
ELSEIF ( ( _BHOLDCONTINUE =1 ) AND ( _BCONTDETAILSECTION =0 ) ) BREAK
ENDIF
, DUMMY_VAL = DETAILSECTION ( RPT_RENDER , ( _FENDDETAIL - _YOFFSET ),  _BCONTDETAILSECTION ),
 BFIRSTTIME =0
 
ENDWHILE
 
FOOT PAGE
 _YHOLD = _YOFFSET ,
 _YOFFSET = _FENDDETAIL ,
 DUMMY_VAL = FOOTPAGESECTION ( RPT_RENDER ),
 _YOFFSET = _YHOLD
 WITH  NOCOUNTER , SEPARATOR =" " , FORMAT
 CALL FINALIZEREPORT ( _SENDTO )
 
END ;Subroutine
 
 
SUBROUTINE   PAGEBREAK  ( DUMMY  )
 
SET  _RPTPAGE  =  UAR_RPTENDPAGE ( _HREPORT )
SET  _RPTPAGE  =  UAR_RPTSTARTPAGE ( _HREPORT )
SET  _YOFFSET  =  RPTREPORT -> M_MARGINTOP
 
END ;Subroutine
 
 
SUBROUTINE   FINALIZEREPORT  ( SSENDREPORT  )
 
SET  _RPTPAGE  =  UAR_RPTENDPAGE ( _HREPORT )
SET  _RPTSTAT  =  UAR_RPTENDREPORT ( _HREPORT )
DECLARE  SFILENAME  =  VC  WITH  NOCONSTANT ( TRIM ( SSENDREPORT )), PRIVATE
DECLARE  BPRINT  =  I2  WITH  NOCONSTANT (0 ), PRIVATE
IF ( ( TEXTLEN ( SFILENAME )>0 ) )
SET  BPRINT  =  CHECKQUEUE ( SFILENAME )
IF (  BPRINT  )
 EXECUTE CPM_CREATE_FILE_NAME "RPT" ,
"PS"
SET  SFILENAME  =  CPM_CFN_INFO -> FILE_NAME_PATH
ENDIF
 
ENDIF
 
SET  _RPTSTAT  =  UAR_RPTPRINTTOFILE ( _HREPORT ,  NULLTERM ( SFILENAME ))
IF (  BPRINT  )
SET  SPOOL  VALUE ( SFILENAME ) VALUE ( SSENDREPORT ) WITH  DELETED
ENDIF
 
DECLARE  _ERRORFOUND  =  I2  WITH  NOCONSTANT (0 ), PROTECT
DECLARE  _ERRCNT  =  I2  WITH  NOCONSTANT (0 ), PROTECT
SET  _ERRORFOUND  =  UAR_RPTFIRSTERROR ( _HREPORT ,  RPTERROR )
WHILE ( ( _ERRORFOUND = RPT_ERRORFOUND ) AND ( _ERRCNT <512 ))
 
SET  _ERRCNT  = ( _ERRCNT +1 )
SET  STAT  =  ALTERLIST ( RPTERRORS -> ERRORS ,  _ERRCNT )
SET  RPTERRORS -> ERRORS [ _ERRCNT ]-> M_SEVERITY  =  RPTERROR -> M_SEVERITY
SET  RPTERRORS -> ERRORS [ _ERRCNT ]-> M_TEXT  =  RPTERROR -> M_TEXT
SET  RPTERRORS -> ERRORS [ _ERRCNT ]-> M_SOURCE  =  RPTERROR -> M_SOURCE
SET  _ERRORFOUND  =  UAR_RPTNEXTERROR ( _HREPORT ,  RPTERROR )
 
ENDWHILE
 
SET  _RPTSTAT  =  UAR_RPTDESTROYREPORT ( _HREPORT )
 
END ;Subroutine
 
 
SUBROUTINE   HEADPAGESECTION  ( NCALC  )
 
DECLARE  A1  =  F8  WITH  NOCONSTANT (0.0 ), PRIVATE
SET  A1  =  HEADPAGESECTIONABS ( NCALC ,  _XOFFSET ,  _YOFFSET ) RETURN ( A1 )
 
 
END ;Subroutine
 
 
SUBROUTINE   HEADPAGESECTIONABS  ( NCALC ,  OFFSETX ,  OFFSETY  )
 
DECLARE  SECTIONHEIGHT  =  F8  WITH  NOCONSTANT (1.630000 ), PRIVATE
IF ( ( NCALC = RPT_RENDER ) )
SET  RPTSD -> M_FLAGS  = 0
SET  RPTSD -> M_BORDERS  =  RPT_SDNOBORDERS
SET  RPTSD -> M_PADDING  =  RPT_SDNOBORDERS
SET  RPTSD -> M_PADDINGWIDTH  = 0.000
SET  RPTSD -> M_LINESPACING  =  RPT_SINGLE
SET  RPTSD -> M_ROTATIONANGLE  = 0
SET  RPTSD -> M_Y  = ( OFFSETY +0.000 )
SET  RPTSD -> M_X  = ( OFFSETX +0.000 )
SET  RPTSD -> M_WIDTH  = 3.500
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _OLDFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _HELVETICA100 )
SET  _OLDPEN  =  UAR_RPTSETPEN ( _HREPORT ,  _PEN14S0C0 )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( CONCAT ("As of: " ,  FORMAT
( CNVTDATETIME ( CURDATE ,  CURTIME3 ), "MM/DD/YYYY HH:MM;;D" )),  CHAR (0 )))
SET  RPTSD -> M_FLAGS  = 20
SET  RPTSD -> M_Y  = ( OFFSETY +0.500 )
SET  RPTSD -> M_X  = ( OFFSETX +0.000 )
SET  RPTSD -> M_WIDTH  = 10.000
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _DUMMYFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _HELVETICA12B0 )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Appointment Reminder List"
,  CHAR (0 )))
SET  RPTSD -> M_FLAGS  = 0
SET  RPTSD -> M_Y  = ( OFFSETY +0.875 )
SET  RPTSD -> M_X  = ( OFFSETX +0.000 )
SET  RPTSD -> M_WIDTH  = 1.000
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _DUMMYFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _HELVETICA100 )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( EVALUATE ( $RPTTYPE ,
"RESOURCE" , "Resource:" , "Location:" ),  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +0.875 )
SET  RPTSD -> M_X  = ( OFFSETX +1.125 )
SET  RPTSD -> M_WIDTH  = 3.375
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( EVALUATE ( $RPTTYPE ,
"RESOURCE" ,  T_REC -> QUAL [D1.SEQ]-> RESOURCE_DISP ,  T_REC -> QUAL [D1.SEQ]-> APPT_LOCATION_DISP
),  CHAR (0 )))
SET  RPTSD -> M_FLAGS  = 4
SET  RPTSD -> M_BORDERS  =  RPT_SDBOTTOMBORDER
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +0.000 )
SET  RPTSD -> M_WIDTH  = 0.500
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _DUMMYFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _HELVETICA9B0 )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Date" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +0.500 )
SET  RPTSD -> M_WIDTH  = 0.375
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Time" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +0.875 )
SET  RPTSD -> M_WIDTH  = 1.125
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Appt Type" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +2.813 )
SET  RPTSD -> M_WIDTH  = 0.813
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("MRN" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +3.625 )
SET  RPTSD -> M_WIDTH  = 1.375
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Person Name" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +5.000 )
SET  RPTSD -> M_WIDTH  = 0.875
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Home Phone" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +5.875 )
SET  RPTSD -> M_WIDTH  = 0.500
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("DOB" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +6.375 )
SET  RPTSD -> M_WIDTH  = 0.375
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Age" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +6.750 )
SET  RPTSD -> M_WIDTH  = 0.313
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Sex" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +7.063 )
SET  RPTSD -> M_WIDTH  = 0.625
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Dt Sched" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +7.688 )
SET  RPTSD -> M_WIDTH  = 1.188
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Ins1/Copay" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +8.875 )
SET  RPTSD -> M_WIDTH  = 1.125
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Ins2/Copay" ,  CHAR (0 )))
SET  RPTSD -> M_Y  = ( OFFSETY +1.375 )
SET  RPTSD -> M_X  = ( OFFSETX +2.000 )
SET  RPTSD -> M_WIDTH  = 0.813
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("FIN" ,  CHAR (0 )))
SET  _DUMMYFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _OLDFONT )
SET  _DUMMYPEN  =  UAR_RPTSETPEN ( _HREPORT ,  _OLDPEN )
SET  _YOFFSET  = ( OFFSETY + SECTIONHEIGHT )
ENDIF
 RETURN ( SECTIONHEIGHT )
 
 
END ;Subroutine
 
 
SUBROUTINE   DETAILSECTION  ( NCALC ,  MAXHEIGHT ,  BCONTINUE  )
 
DECLARE  A1  =  F8  WITH  NOCONSTANT (0.0 ), PRIVATE
SET  A1  =  DETAILSECTIONABS ( NCALC ,  _XOFFSET ,  _YOFFSET ,  MAXHEIGHT ,  BCONTINUE ) RETURN (
 A1 )
 
 
END ;Subroutine
 
 
SUBROUTINE   DETAILSECTIONABS  ( NCALC ,  OFFSETX ,  OFFSETY ,  MAXHEIGHT ,  BCONTINUE  )
 
DECLARE  SECTIONHEIGHT  =  F8  WITH  NOCONSTANT (0.440000 ), PRIVATE
DECLARE  GROWSUM  =  I4  WITH  NOCONSTANT (0 ), PRIVATE
IF ( ( BCONTINUE =0 ) )
SET  _REMDETAILLIST  = 1
ENDIF
 
SET  RPTSD -> M_FLAGS  = 0
SET  RPTSD -> M_BORDERS  =  RPT_SDNOBORDERS
SET  RPTSD -> M_PADDING  =  RPT_SDNOBORDERS
SET  RPTSD -> M_PADDINGWIDTH  = 0.000
SET  RPTSD -> M_LINESPACING  =  RPT_SINGLE
SET  RPTSD -> M_ROTATIONANGLE  = 0
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +0.000 )
SET  RPTSD -> M_WIDTH  = 0.438
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _OLDFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _HELVETICA80 )
SET  _OLDPEN  =  UAR_RPTSETPEN ( _HREPORT ,  _PEN14S0C0 )
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( FORMAT ( T_REC -> QUAL [
D1.SEQ]-> BEG_DT_TM , "MM/DD/YY;;D" ),  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +0.500 )
SET  RPTSD -> M_WIDTH  = 0.313
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( FORMAT ( T_REC -> QUAL [
D1.SEQ]-> BEG_DT_TM , "HHMM;;D" ),  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +0.875 )
SET  RPTSD -> M_WIDTH  = 1.063
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( T_REC -> QUAL [D1.SEQ]->
 APPT_SYNONYM_FREE ,  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +3.625 )
SET  RPTSD -> M_WIDTH  = 1.313
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( T_REC -> QUAL [D1.SEQ]->
 PATIENT_QUAL [1 ]-> NAME ,  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +2.000 )
SET  RPTSD -> M_WIDTH  = 0.750
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( T_REC -> QUAL [D1.SEQ]->
 PATIENT_QUAL [1 ]-> FIN ,  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +2.813 )
SET  RPTSD -> M_WIDTH  = 0.750
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( T_REC -> QUAL [D1.SEQ]->
 PATIENT_QUAL [1 ]-> MRN ,  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +5.000 )
SET  RPTSD -> M_WIDTH  = 0.813
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( T_REC -> QUAL [D1.SEQ]->
 PATIENT_QUAL [1 ]-> HOME_PHONE ,  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +5.875 )
SET  RPTSD -> M_WIDTH  = 0.438
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( FORMAT ( T_REC -> QUAL [
D1.SEQ]-> PATIENT_QUAL [1 ]-> BIRTH_DT_TM , "MM/DD/YY;;D" ),  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +6.375 )
SET  RPTSD -> M_WIDTH  = 0.313
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( SUBSTRING (1 , 3 ,  CNVTAGE
( T_REC -> QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> BIRTH_DT_TM )),  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +6.750 )
SET  RPTSD -> M_WIDTH  = 0.250
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( SUBSTRING (1 , 1 ,  T_REC ->
 QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> SEX ),  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +7.063 )
SET  RPTSD -> M_WIDTH  = 0.563
SET  RPTSD -> M_HEIGHT  = 0.260
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( T_REC -> QUAL [D1.SEQ]->
 CONFIRM_DT_TM ,  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +7.688 )
SET  RPTSD -> M_WIDTH  = 1.125
SET  RPTSD -> M_HEIGHT  = 0.188
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( T_REC -> QUAL [D1.SEQ]->
 PATIENT_QUAL [1 ]-> INS [1 ]-> PLAN_NAME ,  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.250 )
SET  RPTSD -> M_X  = ( OFFSETX +7.688 )
SET  RPTSD -> M_WIDTH  = 1.125
SET  RPTSD -> M_HEIGHT  = 0.188
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
IF ( ( T_REC -> QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> INS [1 ]-> COPAY >0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( TRIM ( FORMAT ( T_REC ->
 QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> INS [1 ]-> COPAY , "####.##" ), 3 ),  CHAR (0 )))
ENDIF
 
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.125 )
SET  RPTSD -> M_X  = ( OFFSETX +8.875 )
SET  RPTSD -> M_WIDTH  = 1.125
SET  RPTSD -> M_HEIGHT  = 0.188
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( T_REC -> QUAL [D1.SEQ]->
 PATIENT_QUAL [1 ]-> INS [2 ]-> PLAN_NAME ,  CHAR (0 )))
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.250 )
SET  RPTSD -> M_X  = ( OFFSETX +8.875 )
SET  RPTSD -> M_WIDTH  = 1.125
SET  RPTSD -> M_HEIGHT  = 0.188
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
IF ( ( T_REC -> QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> INS [2 ]-> COPAY >0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( TRIM ( FORMAT ( T_REC ->
 QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> INS [2 ]-> COPAY , "####.##" ), 3 ),  CHAR (0 )))
ENDIF
 
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.250 )
SET  RPTSD -> M_X  = ( OFFSETX +5.000 )
SET  RPTSD -> M_WIDTH  = 0.813
SET  RPTSD -> M_HEIGHT  = 0.188
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
IF ( ( T_REC -> QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> DISEASE_ALERT_IND =1 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ("Disease Alert: Y" ,  CHAR (
0 )))
ENDIF
 
ENDIF
 
SET  RPTSD -> M_Y  = ( OFFSETY +0.250 )
SET  RPTSD -> M_X  = ( OFFSETX +6.000 )
SET  RPTSD -> M_WIDTH  = 1.625
SET  RPTSD -> M_HEIGHT  = 0.188
IF ( ( NCALC = RPT_RENDER ) AND ( BCONTINUE =0 ) )
IF ( ( T_REC -> QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> LOC_ROOM_CD >0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( CONCAT ("Inpt Room: " ,
 UAR_GET_CODE_DISPLAY ( T_REC -> QUAL [D1.SEQ]-> PATIENT_QUAL [1 ]-> LOC_ROOM_CD )),  CHAR (0 )))
ENDIF
 
ENDIF
 
SET  RPTSD -> M_FLAGS  = 5
IF (  BCONTINUE  )
SET  RPTSD -> M_Y  =  OFFSETY
ELSE
SET  RPTSD -> M_Y  = ( OFFSETY +0.250 )
ENDIF
 
SET  RPTSD -> M_X  = ( OFFSETX +0.875 )
SET  RPTSD -> M_WIDTH  = 4.000
SET  RPTSD -> M_HEIGHT  = (( OFFSETY + MAXHEIGHT )- RPTSD -> M_Y )
SET  _HOLDREMDETAILLIST  =  _REMDETAILLIST
IF ( ( _REMDETAILLIST >0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  NULLTERM ( SUBSTRING (
 _REMDETAILLIST , (( SIZE ( T_REC -> QUAL [D1.SEQ]-> DETAIL_LIST )- _REMDETAILLIST )+1 ),  T_REC ->
 QUAL [D1.SEQ]-> DETAIL_LIST )))
IF ( ( RPTSD -> M_HEIGHT >(( OFFSETY + SECTIONHEIGHT )- RPTSD -> M_Y )) )
SET  SECTIONHEIGHT  = (( RPTSD -> M_Y + _FDRAWHEIGHT )- OFFSETY )
ENDIF
 
IF ( ( RPTSD -> M_DRAWLENGTH =0 ) )
SET  _REMDETAILLIST  = 0
ELSEIF ( ( RPTSD -> M_DRAWLENGTH < SIZE ( NULLTERM ( SUBSTRING ( _REMDETAILLIST , (( SIZE ( T_REC ->
 QUAL [D1.SEQ]-> DETAIL_LIST )- _REMDETAILLIST )+1 ),  T_REC -> QUAL [D1.SEQ]-> DETAIL_LIST )))) )
SET  _REMDETAILLIST  = ( _REMDETAILLIST + RPTSD -> M_DRAWLENGTH )
ELSE
SET  _REMDETAILLIST  = 0
ENDIF
 
SET  GROWSUM  = ( GROWSUM + _REMDETAILLIST )
ENDIF
 
SET  RPTSD -> M_FLAGS  = 4
IF ( ( NCALC = RPT_RENDER ) AND ( _HOLDREMDETAILLIST >0 ) )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  NULLTERM ( SUBSTRING (
 _HOLDREMDETAILLIST , (( SIZE ( T_REC -> QUAL [D1.SEQ]-> DETAIL_LIST )- _HOLDREMDETAILLIST )+1 ),
 T_REC -> QUAL [D1.SEQ]-> DETAIL_LIST )))
ELSE
SET  _REMDETAILLIST  =  _HOLDREMDETAILLIST
ENDIF
 
SET  _DUMMYFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _OLDFONT )
SET  _DUMMYPEN  =  UAR_RPTSETPEN ( _HREPORT ,  _OLDPEN )
IF ( ( NCALC = RPT_RENDER ) )
SET  _YOFFSET  = ( OFFSETY + SECTIONHEIGHT )
ENDIF
 
IF ( ( GROWSUM >0 ) )
SET  BCONTINUE  = 1
ELSE
SET  BCONTINUE  = 0
ENDIF
 RETURN ( SECTIONHEIGHT )
 
 
END ;Subroutine
 
 
SUBROUTINE   FOOTPAGESECTION  ( NCALC  )
 
DECLARE  A1  =  F8  WITH  NOCONSTANT (0.0 ), PRIVATE
SET  A1  =  FOOTPAGESECTIONABS ( NCALC ,  _XOFFSET ,  _YOFFSET ) RETURN ( A1 )
 
 
END ;Subroutine
 
 
SUBROUTINE   FOOTPAGESECTIONABS  ( NCALC ,  OFFSETX ,  OFFSETY  )
 
DECLARE  SECTIONHEIGHT  =  F8  WITH  NOCONSTANT (0.750000 ), PRIVATE
IF ( ( NCALC = RPT_RENDER ) )
SET  RPTSD -> M_FLAGS  = 64
SET  RPTSD -> M_BORDERS  =  RPT_SDNOBORDERS
SET  RPTSD -> M_PADDING  =  RPT_SDNOBORDERS
SET  RPTSD -> M_PADDINGWIDTH  = 0.000
SET  RPTSD -> M_LINESPACING  =  RPT_SINGLE
SET  RPTSD -> M_ROTATIONANGLE  = 0
SET  RPTSD -> M_Y  = ( OFFSETY +0.250 )
SET  RPTSD -> M_X  = ( OFFSETX +6.500 )
SET  RPTSD -> M_WIDTH  = 3.500
SET  RPTSD -> M_HEIGHT  = 0.260
SET  _OLDFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _HELVETICA100 )
SET  _OLDPEN  =  UAR_RPTSETPEN ( _HREPORT ,  _PEN14S0C0 )
SET  _FDRAWHEIGHT  =  UAR_RPTSTRINGDRAW ( _HREPORT ,  RPTSD ,  BUILD2 ( CONCAT ("Page " ,  TRIM (
 CNVTSTRING ( CURPAGE ), 3 )),  CHAR (0 )))
SET  _DUMMYFONT  =  UAR_RPTSETFONT ( _HREPORT ,  _OLDFONT )
SET  _DUMMYPEN  =  UAR_RPTSETPEN ( _HREPORT ,  _OLDPEN )
SET  _YOFFSET  = ( OFFSETY + SECTIONHEIGHT )
ENDIF
 RETURN ( SECTIONHEIGHT )
 
 
END ;Subroutine
 
 
SUBROUTINE   INITIALIZEREPORT  ( DUMMY  )
 
SET  RPTREPORT -> M_RECSIZE  = 100
SET  RPTREPORT -> M_REPORTNAME  = "MAYO_MN_SCH_RPT_RES_APPT_PTSCH"
SET  RPTREPORT -> M_PAGEWIDTH  = 8.50
SET  RPTREPORT -> M_PAGEHEIGHT  = 11.00
SET  RPTREPORT -> M_ORIENTATION  =  RPT_LANDSCAPE
SET  RPTREPORT -> M_MARGINLEFT  = 0.50
SET  RPTREPORT -> M_MARGINRIGHT  = 0.50
SET  RPTREPORT -> M_MARGINTOP  = 0.50
SET  RPTREPORT -> M_MARGINBOTTOM  = 0.50
SET  RPTREPORT -> M_HORZPRINTOFFSET  =  _XSHIFT
SET  RPTREPORT -> M_VERTPRINTOFFSET  =  _YSHIFT
SET  _YOFFSET  =  RPTREPORT -> M_MARGINTOP
SET  _XOFFSET  =  RPTREPORT -> M_MARGINLEFT
SET  _HREPORT  =  UAR_RPTCREATEREPORT ( RPTREPORT ,  _OUTPUTTYPE ,  RPT_INCHES )
SET  _RPTERR  =  UAR_RPTSETERRORLEVEL ( _HREPORT ,  RPT_ERROR )
SET  _RPTSTAT  =  UAR_RPTSTARTREPORT ( _HREPORT )
SET  _RPTPAGE  =  UAR_RPTSTARTPAGE ( _HREPORT )
 CALL _CREATEFONTS (0 )
 CALL _CREATEPENS (0 )
 
END ;Subroutine
 
 
SUBROUTINE   _CREATEFONTS  ( DUMMY  )
 
SET  RPTFONT -> M_RECSIZE  = 50
SET  RPTFONT -> M_FONTNAME  =  RPT_TIMES
SET  RPTFONT -> M_POINTSIZE  = 10
SET  RPTFONT -> M_BOLD  =  RPT_OFF
SET  RPTFONT -> M_ITALIC  =  RPT_OFF
SET  RPTFONT -> M_UNDERLINE  =  RPT_OFF
SET  RPTFONT -> M_STRIKETHROUGH  =  RPT_OFF
SET  RPTFONT -> M_RGBCOLOR  =  RPT_BLACK
SET  _TIMES100  =  UAR_RPTCREATEFONT ( _HREPORT ,  RPTFONT )
SET  RPTFONT -> M_FONTNAME  =  RPT_HELVETICA
SET  _HELVETICA100  =  UAR_RPTCREATEFONT ( _HREPORT ,  RPTFONT )
SET  RPTFONT -> M_POINTSIZE  = 12
SET  RPTFONT -> M_BOLD  =  RPT_ON
SET  _HELVETICA12B0  =  UAR_RPTCREATEFONT ( _HREPORT ,  RPTFONT )
SET  RPTFONT -> M_POINTSIZE  = 9
SET  _HELVETICA9B0  =  UAR_RPTCREATEFONT ( _HREPORT ,  RPTFONT )
SET  RPTFONT -> M_POINTSIZE  = 8
SET  RPTFONT -> M_BOLD  =  RPT_OFF
SET  _HELVETICA80  =  UAR_RPTCREATEFONT ( _HREPORT ,  RPTFONT )
 
END ;Subroutine
 
 
SUBROUTINE   _CREATEPENS  ( DUMMY  )
 
SET  RPTPEN -> M_RECSIZE  = 16
SET  RPTPEN -> M_PENWIDTH  = 0.014
SET  RPTPEN -> M_PENSTYLE  = 0
SET  RPTPEN -> M_RGBCOLOR  =  RPT_BLACK
SET  _PEN14S0C0  =  UAR_RPTCREATEPEN ( _HREPORT ,  RPTPEN )
 
END ;Subroutine
 
 
SET  _SENDTO  =  $OUTDEV
 
 CALL LAYOUTQUERY (0 )
 
SUBROUTINE   GETCODEVALUE  ( CODE_SET ,  CDF_MEANING ,  CODE_VARIABLE  )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( CODE_SET ,  CDF_MEANING , 1 ,  CODE_VARIABLE )
IF (  (( ( STAT !=0 ) )  OR  (( CODE_VARIABLE <=0 ) ))  )
 CALL ECHO ( BUILD ("Invalid select on CODE_SET (" ,  CODE_SET , "),  CDF_MEANING(" ,  CDF_MEANING
, ")" )) GO TO  EXIT_SCRIPT
ENDIF
 
 
END ;Subroutine
 
 
# EXIT_SCRIPT
 END GO
 
