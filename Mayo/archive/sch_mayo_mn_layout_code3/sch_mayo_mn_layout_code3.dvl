 
/**************************************************************
; DVDev DECLARED SUBROUTINES
**************************************************************/
 
declare _CreateFonts(dummy) = null with Protect
declare _CreatePens(dummy) = null with Protect
declare LayoutQuery(dummy) = null with Protect
declare __LayoutQuery(dummy) = null with Protect
declare PageBreak(dummy) = null with Protect
declare FinalizeReport(sSendReport=vc) = null with Protect
declare headsection1(nCalc=i2) = f8 with Protect
declare headsection1ABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare AddressSection(nCalc=i2) = f8 with Protect
declare AddressSectionABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare LineSeperatorSection(nCalc=i2) = f8 with Protect
declare LineSeperatorSectionABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare ApptHeadSection(nCalc=i2) = f8 with Protect
declare ApptHeadSectionABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare footappointment(nCalc=i2) = f8 with Protect
declare footappointmentABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare footlocation(nCalc=i2) = f8 with Protect
declare footlocationABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare footprepshead(nCalc=i2) = f8 with Protect
declare footprepsheadABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare footpreps(nCalc=i2,maxHeight=f8,bContinue=i2(Ref)) = f8 with Protect
declare footprepsABS(nCalc=i2,OffsetX=f8,OffsetY=f8,maxHeight=f8,bContinue=i2(Ref)) = f8 with Protect
declare FootPageSection(nCalc=i2) = f8 with Protect
declare FootPageSectionABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare headpagesection(nCalc=i2) = f8 with Protect
declare headpagesectionABS(nCalc=i2,OffsetX=f8,OffsetY=f8) = f8 with Protect
declare InitializeReport(dummy) = null with Protect
 
/**************************************************************
; DVDev DECLARED VARIABLES
**************************************************************/
 
declare _hReport = i4 with NoConstant(0),protect
declare _YOffset = f8 with NoConstant(0.0),protect
declare _XOffset = f8 with NoConstant(0.0),protect
declare Rpt_Render = i2 with Constant(0),protect
declare _CRLF = vc with Constant(concat(char(13),char(10))),protect
declare RPT_CalcHeight = i2 with Constant(1),protect
declare _YShift = f8 with NoConstant(0.0),protect
declare _XShift = f8 with NoConstant(0.0),protect
declare _SendTo = vc with NoConstant(""),protect
declare _rptErr = i2 with NoConstant(0),protect
declare _rptStat = i2 with NoConstant(0),protect
declare _oldFont = i4 with NoConstant(0),protect
declare _oldPen = i4 with NoConstant(0),protect
declare _dummyFont = i4 with NoConstant(0),protect
declare _dummyPen = i4 with NoConstant(0),protect
declare _fDrawHeight = f8 with NoConstant(0.0),protect
declare _rptPage = i4 with NoConstant(0),protect
declare _DIOTYPE = i2 with NoConstant(8),protect
declare _OutputType = i2 with noConstant(RPT_PostScript),protect
declare _Remprep_inst = i4 with NoConstant(1),protect
declare _bHoldContinue = i2 with NoConstant(0),protect
declare _bContfootpreps = i2 with NoConstant(0),protect
declare _Times10B0 = i4 with NoConstant(0),protect
declare _Times10BU0 = i4 with NoConstant(0),protect
declare _Times12B0 = i4 with NoConstant(0),protect
declare _Times100 = i4 with NoConstant(0),protect
declare _pen14S0C0 = i4 with NoConstant(0),protect
 
/**************************************************************
; DVDev DEFINED SUBROUTINES
**************************************************************/
 
subroutine LayoutQuery(dummy)
 
call InitializeReport(0)
 
call __LayoutQuery(0)
 
call FinalizeReport(_SendTo)
 
end ;LayoutQuery
subroutine __LayoutQuery(dummy)
SELECT INTO "nl:"
	pat_nme = trim(substring(1,50, t_list->patName), 3)
	, build_nme = trim(substring(1,200, t_list->loc[d1.seq].building), 3)
	, dept_nme = trim(substring(1,200, t_list->loc[d1.seq].department), 3)
	, phone_nbr = trim(substring(1,30, t_list->loc[d1.seq].phone), 3)
	, date = trim(substring(1,30, t_list->loc[d1.seq].appt[d2.seq].date), 3)
	, time = trim(substring(1,20, t_list->loc[d1.seq].appt[d2.seq].time), 3)
	, rscLbl = trim(substring(1,40, t_list->loc[d1.seq].appt[d2.seq].rscLbl), 3)
	, rscType = trim(substring(1,50, t_list->loc[d1.seq].appt[d2.seq].rscType), 3)
	, preps = trim(substring(1,100, t_list->loc[d1.seq].appt[d2.seq].preps[d3.seq].prepInstruct), 3)
	, d1seq = d1.seq
	, d2seq = d2.seq
	, d3seq = d3.seq
	, lapptCnt1 = t_list->aptCnt
	, prepLneCnt = t_list->loc[d1.seq].appt[d2.seq].lPrepLneCnt
 
FROM
	(dummyt   d1  with seq = lLocCnt)
	, (dummyt   d2  with seq = 1)
	, (dummyt   d3  with seq = 1)
 
plan d1 where maxrec(d2,size(t_list->loc[d1.seq].appt,5))
   join d2 where maxrec(d3, size(t_list->loc[d1.seq].appt[d2.seq].preps,5))
   join d3
 
ORDER BY
	d1.seq
	, d2.seq
	, d3.seq
 
 
 
Head Report
	_d0 = d1.seq
	_d1 = d2.seq
	_d2 = pat_nme
	_d3 = build_nme
	_d4 = dept_nme
	_d5 = phone_nbr
	_d6 = date
	_d7 = time
	_d8 = rsclbl
	_d9 = rsctype
	_d10 = preps
	_d11 = d1seq
	_d12 = d2seq
	_d13 = d3seq
; set bottom extent of page
_fEndDetail = RptReport->m_pageHeight-RptReport->m_marginBottom
 
 
Head Page
if (curpage > 1)
	dummy_val = PageBreak(0)
endif
dummy_val = headpagesection(RPT_RENDER)
dummy_val = headsection1(RPT_RENDER)
 
/****** YOUR CODE BEGINS HERE ******/
;if (curpage > 1 and lCnt1 < lapptCnt1)
;	dummy_val = PageBreak(0)
;endif
;call echo (" start head report segment ")
;if (lCnt1 < lapptCnt1)
;  dummy_val = HeadPageSection(RPT_RENDER)
;  dummy_val = headsection1(RPT_RENDER)
; call echo (" end head report segment ")
;endif
if (size(T_LIST->addr,5) >0 )
	 temp_line = fillstring(100," ")
for (zz = 1 to size(T_LIST->addr,5))
     if (trim(T_LIST->addr[zz].line,3) > " ")
	     temp_line = T_LIST->addr[zz].line
		dummy_val = addressSection(RPT_RENDER)
	endif
endfor
endif
/*----- YOUR CODE ENDS HERE -----*/
 
 
 
Head d1.seq
 
/****** YOUR CODE BEGINS HERE ******/
call echo (" in head d1 segment ")
 
/*
; calculate section height
_fDrawHeight = footlocation(RPT_CALCHEIGHT)
; break if bottom of page exceeded
if (_YOffset+_fDrawHeight +
t_list->loc[d1.seq].appt[d2.seq].lPrepLneCnt/2  >_fEndDetail)
	break
endif
 
if(lCnt1 < lapptCnt1)
  dummy_val = footlocation(RPT_RENDER)
endif
 
*/
 
/****** YOUR CODE BEGINS HERE ******/
first_time = 1
call echo (" end head d1 segment ")
/*----- YOUR CODE ENDS HERE -----*/
/*----- YOUR CODE ENDS HERE -----*/
 
 
 
Head d2.seq
; calculate section height
_fDrawHeight = LineSeperatorSection(RPT_CALCHEIGHT)
; skip keep if section is empty
if (_fDrawHeight > 0)
 
 
; keep together
if (_fEndDetail >= _YOffset+_fDrawHeight)
	_fDrawheight = _fDrawHeight+ApptHeadSection(RPT_CALCHEIGHT)
endif
 
 
; keep together
if (_fEndDetail >= _YOffset+_fDrawHeight)
	_fDrawheight = _fDrawHeight+footappointment(RPT_CALCHEIGHT)
endif
 
 
; keep together
if (_fEndDetail >= _YOffset+_fDrawHeight)
	_fDrawheight = _fDrawHeight+footlocation(RPT_CALCHEIGHT)
endif
 
endif ; end skip keep
 
; break if bottom of page exceeded
if (_YOffset+_fDrawHeight>_fEndDetail)
	break
endif
 
dummy_val = LineSeperatorSection(RPT_RENDER)
; calculate section height
_fDrawHeight = ApptHeadSection(RPT_CALCHEIGHT)
; skip keep if section is empty
if (_fDrawHeight > 0)
 
 
; keep together
if (_fEndDetail >= _YOffset+_fDrawHeight)
	_fDrawheight = _fDrawHeight+footappointment(RPT_CALCHEIGHT)
endif
 
 
; keep together
if (_fEndDetail >= _YOffset+_fDrawHeight)
	_fDrawheight = _fDrawHeight+footlocation(RPT_CALCHEIGHT)
endif
 
endif ; end skip keep
 
; break if bottom of page exceeded
if (_YOffset+_fDrawHeight>_fEndDetail)
	break
endif
 
dummy_val = ApptHeadSection(RPT_RENDER)
; calculate section height
_fDrawHeight = footappointment(RPT_CALCHEIGHT)
; skip keep if section is empty
if (_fDrawHeight > 0)
 
 
; keep together
if (_fEndDetail >= _YOffset+_fDrawHeight)
	_fDrawheight = _fDrawHeight+footlocation(RPT_CALCHEIGHT)
endif
 
endif ; end skip keep
 
; break if bottom of page exceeded
if (_YOffset+_fDrawHeight>_fEndDetail)
	break
endif
 
dummy_val = footappointment(RPT_RENDER)
 
/****** YOUR CODE BEGINS HERE ******/
call echo (" in head d2 segment ")
/*
; calculate section height
_fDrawHeight = footappointment(RPT_CALCHEIGHT)
; break if bottom of page exceeded
if (_YOffset+_fDrawHeight + prepLneCnt/2  >_fEndDetail)
	break
                dummy_val = footlocation(RPT_RENDER)
endif
 
if(lCnt1 < lapptCnt1)
  dummy_val = footappointment(RPT_RENDER)
  lCnt1 = lCnt1 + 1
endif
*/
call echo (" end head d2 segment ")
/*----- YOUR CODE ENDS HERE -----*/
 
 
; calculate section height
_fDrawHeight = footlocation(RPT_CALCHEIGHT)
; break if bottom of page exceeded
if (_YOffset+_fDrawHeight>_fEndDetail)
	break
endif
 
dummy_val = footlocation(RPT_RENDER)
 
Head d3.seq
 
/****** YOUR CODE BEGINS HERE ******/
call echo (" in head d3 segment ")
; calculate section height
call echo (" calc footprepshead  ")
 
_fDrawHeight = footprepshead(RPT_CALCHEIGHT) + 1
 
; keep together
if (_fEndDetail > _YOffset+_fDrawHeight)
	_bHoldContinue = 0
	call echo (" calling fDrawHeight  ")
	_fDrawHeight = _fDrawHeight+footpreps(RPT_CALCHEIGHT,_fEndDetail-_YOffset-_fDrawHeight,_bHoldContinue)
	if (_bHoldContinue=1) ; force a break to happen
		_fDrawHeight = _fEndDetail + 1
	endif
endif
 
; break if bottom of page exceeded
;if (_YOffset+_fDrawHeight>_fEndDetail)
	;break
         ;dummy_val = footlocation(RPT_RENDER)
;endif
 
call echo (" render footprepshead  ")
dummy_val = footprepshead(RPT_RENDER)
_bContfootpreps = 0
; begin grow loop
bFirstTime = 1
while (_bContfootpreps=1 OR bFirstTime=1)
 
; calculate section height
_bHoldContinue = _bContfootpreps
_fDrawHeight = footpreps(RPT_CALCHEIGHT,_fEndDetail-_YOffset,_bHoldContinue)
 
; break if bottom of page exceeded
;if (_YOffset+_fDrawHeight>_fEndDetail)
	;break
; keep section if doesn't fit (one time only)
;elseif (_bHoldContinue=1 AND _bContfootpreps = 0)
	;break
;endif
 
dummy_val = footpreps(RPT_RENDER,_fEndDetail-_YOffset,_bContfootpreps)
bFirstTime = 0
endwhile
 
/****** YOUR CODE BEGINS HERE ******/
first_time = 0
call echo (" end head d3 segment ")
/*----- YOUR CODE ENDS HERE -----*/
/*----- YOUR CODE ENDS HERE -----*/
 
 
 
Detail
	row+0
 
Foot d3.seq
	row+0
 
Foot d2.seq
	row+0
 
Foot d1.seq
	row+0
 
Foot Page
_YHold = _YOffset
_YOffset = _fEndDetail
 
/****** YOUR CODE BEGINS HERE ******/
call echo (" in foot report segment ")
;;_YHold = _YOffset
;;_YOffset = _fEndDetail
 
;;  dummy_val = FootPageSection(RPT_RENDER)
 
;;_YOffset = _YHold
 
call echo (" end foot report segment ")
/*----- YOUR CODE ENDS HERE -----*/
 
 
dummy_val = FootPageSectionABS(RPT_RENDER,_XOffset,10.100)
_YOffset = _YHold
WITH NOCOUNTER, SEPARATOR=" ", FORMAT, outerjoin = d2, outerjoin = d3
 
 
end ;__LayoutQuery
subroutine PageBreak(dummy)
set _rptPage = uar_rptEndPage(_hReport)
set _rptPage = uar_rptStartPage(_hReport)
set _YOffset = RptReport->m_marginTop
end ; PageBreak
 
subroutine FinalizeReport(sSendReport)
set _rptPage = uar_rptEndPage(_hReport)
set _rptStat = uar_rptEndReport(_hReport)
declare sFilename = vc with NoConstant(trim(sSendReport)),private
declare bPrint = i2 with NoConstant(0),private
if(textlen(sFilename)>0)
set bPrint = CheckQueue(sFilename)
  if(bPrint)
    execute cpm_create_file_name "RPT","PS"
    set sFilename = cpm_cfn_info->file_name_path
  endif
endif
set _rptStat = uar_rptPrintToFile(_hReport,nullterm(sFileName))
if(bPrint)
  set spool value(sFilename) value(sSendReport) with deleted
endif
declare _errorFound = i2 with noConstant(0),protect
declare _errCnt = i2 with noConstant(0),protect
set _errorFound = uar_RptFirstError( _hReport , RptError )
while ( _errorFound = RPT_ErrorFound and _errCnt < 512 )
   set _errCnt = _errCnt+1
   set stat = AlterList(RptErrors->Errors,_errCnt)
set RptErrors->Errors[_errCnt].m_severity = RptError->m_severity
     set RptErrors->Errors[_errCnt].m_text =  RptError->m_text
     set RptErrors->Errors[_errCnt].m_source = RptError->m_source
   set _errorFound = uar_RptNextError( _hReport , RptError )
endwhile
set _rptStat = uar_rptDestroyReport(_hReport)
end ; FinalizeReport
 
subroutine headsection1(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(headsection1ABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine headsection1(nCalc)
 
subroutine headsection1ABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(0.690000), private
declare __PATNAME = vc with NoConstant(build2(trim(pat_nme),char(0))),protect
if (nCalc = RPT_RENDER)
set RptSD->m_flags = 32
set RptSD->m_borders = RPT_SDNOBORDERS
set RptSD->m_padding = RPT_SDNOBORDERS
set RptSD->m_paddingWidth = 0.000
set RptSD->m_lineSpacing = RPT_SINGLE
set RptSD->m_rotationAngle = 0
set RptSD->m_y = OffsetY + 0.500
set RptSD->m_x = OffsetX + 0.000
set RptSD->m_width = 7.500
set RptSD->m_height = 0.188
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW TEXT --- patname
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, __PATNAME)
set RptSD->m_flags = 20
set RptSD->m_y = OffsetY + 0.250
set RptSD->m_x = OffsetX + 0.000
set RptSD->m_width = 7.500
set RptSD->m_height = 0.250
set _oldFont = uar_rptSetFont(_hReport, _Times12B0)
; DRAW LABEL --- FieldName0
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2("Mayo Clinic Health System Patient Itinerary",char(0)))
set _DummyFont = uar_rptSetFont(_hReport, _oldFont)
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
	set _YOffset = OffsetY + sectionHeight
endif
return(sectionHeight)
end ;subroutine headsection1ABS(nCalc,OffsetX,OffsetY)
 
subroutine AddressSection(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(AddressSectionABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine AddressSection(nCalc)
 
subroutine AddressSectionABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(0.190000), private
declare __ADDRESSLINE = vc with NoConstant(build2(trim(T_LIST->addr[zz].line),char(0))),protect
if (nCalc = RPT_RENDER)
set RptSD->m_flags = 32
set RptSD->m_borders = RPT_SDNOBORDERS
set RptSD->m_padding = RPT_SDNOBORDERS
set RptSD->m_paddingWidth = 0.000
set RptSD->m_lineSpacing = RPT_SINGLE
set RptSD->m_rotationAngle = 0
set RptSD->m_y = OffsetY + 0.000
set RptSD->m_x = OffsetX + 0.000
set RptSD->m_width = 7.500
set RptSD->m_height = 0.188
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW TEXT --- AddressLine
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, __ADDRESSLINE)
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
	set _YOffset = OffsetY + sectionHeight
endif
return(sectionHeight)
end ;subroutine AddressSectionABS(nCalc,OffsetX,OffsetY)
 
subroutine LineSeperatorSection(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(LineSeperatorSectionABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine LineSeperatorSection(nCalc)
 
subroutine LineSeperatorSectionABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(0.190000), private
if (nCalc = RPT_RENDER)
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW LINE --- FieldName0
set _rptStat = uar_rptLine( _hReport,OffsetX+0.000,OffsetY+ 0.094,OffsetX+7.490, OffsetY+0.094)
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
	set _YOffset = OffsetY + sectionHeight
endif
return(sectionHeight)
end ;subroutine LineSeperatorSectionABS(nCalc,OffsetX,OffsetY)
 
subroutine ApptHeadSection(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(ApptHeadSectionABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine ApptHeadSection(nCalc)
 
subroutine ApptHeadSectionABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(0.270000), private
if (nCalc = RPT_RENDER)
set RptSD->m_flags = 4
set RptSD->m_borders = RPT_SDBOTTOMBORDER
set RptSD->m_padding = RPT_SDNOBORDERS
set RptSD->m_paddingWidth = 0.000
set RptSD->m_lineSpacing = RPT_SINGLE
set RptSD->m_rotationAngle = 0
set RptSD->m_y = OffsetY + 0.021
set RptSD->m_x = OffsetX + 0.250
set RptSD->m_width = 0.750
set RptSD->m_height = 0.250
set _oldFont = uar_rptSetFont(_hReport, _Times10B0)
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW LABEL --- FieldName9
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2("Appt Date:",char(0)))
set RptSD->m_y = OffsetY + 0.000
set RptSD->m_x = OffsetX + 1.625
set RptSD->m_width = 0.688
set RptSD->m_height = 0.260
; DRAW LABEL --- FieldName10
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2("Appt Time:",char(0)))
set RptSD->m_flags = 0
set RptSD->m_y = OffsetY + 0.021
set RptSD->m_x = OffsetX + 2.625
set RptSD->m_width = 1.021
set RptSD->m_height = 0.250
; DRAW TEXT --- resource_label
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2(rscLbl,char(0)))
set RptSD->m_flags = 4
set RptSD->m_y = OffsetY + 0.000
set RptSD->m_x = OffsetX + 5.438
set RptSD->m_width = 0.938
set RptSD->m_height = 0.260
 
/****** YOUR CODE BEGINS HERE ******/
if (t_list->loc [d1.seq].appt [d2.seq].rscind = 2)
; DRAW LABEL --- FieldName1
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2("Specimen Type",char(0)))
endif
/*----- YOUR CODE ENDS HERE -----*/
 
set _DummyFont = uar_rptSetFont(_hReport, _oldFont)
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
	set _YOffset = OffsetY + sectionHeight
endif
return(sectionHeight)
end ;subroutine ApptHeadSectionABS(nCalc,OffsetX,OffsetY)
 
subroutine footappointment(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(footappointmentABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine footappointment(nCalc)
 
subroutine footappointmentABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(0.340000), private
if (t_list->loc [d1.seq].appt [d2.seq].rscind = 2)
declare __SPEC_TYPE = vc with NoConstant(build2(t_list->loc [d1.seq].appt [d2.seq].lab [1].spec_type,char(0))),protect
endif
if (nCalc = RPT_RENDER)
set RptSD->m_flags = 0
set RptSD->m_borders = RPT_SDNOBORDERS
set RptSD->m_padding = RPT_SDNOBORDERS
set RptSD->m_paddingWidth = 0.000
set RptSD->m_lineSpacing = RPT_SINGLE
set RptSD->m_rotationAngle = 0
set RptSD->m_y = OffsetY + 0.063
set RptSD->m_x = OffsetX + 0.250
set RptSD->m_width = 1.313
set RptSD->m_height = 0.177
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW TEXT --- date
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2(date,char(0)))
set RptSD->m_y = OffsetY + 0.063
set RptSD->m_x = OffsetX + 1.688
set RptSD->m_width = 0.542
set RptSD->m_height = 0.219
; DRAW TEXT --- time
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2(time,char(0)))
set RptSD->m_y = OffsetY + 0.063
set RptSD->m_x = OffsetX + 2.625
set RptSD->m_width = 2.604
set RptSD->m_height = 0.281
; DRAW TEXT --- resource
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2(rscType,char(0)))
set RptSD->m_y = OffsetY + 0.000
set RptSD->m_x = OffsetX + 5.375
set RptSD->m_width = 2.125
set RptSD->m_height = 0.281
 
/****** YOUR CODE BEGINS HERE ******/
if (t_list->loc [d1.seq].appt [d2.seq].rscind = 2)
; DRAW TEXT --- spec_type
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, __SPEC_TYPE)
endif
/*----- YOUR CODE ENDS HERE -----*/
 
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
	set _YOffset = OffsetY + sectionHeight
endif
return(sectionHeight)
end ;subroutine footappointmentABS(nCalc,OffsetX,OffsetY)
 
subroutine footlocation(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(footlocationABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine footlocation(nCalc)
 
subroutine footlocationABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(0.560000), private
declare __PHONE_NBR = vc with NoConstant(build2(cnvtphone(phone_nbr,874),char(0))),protect
if (nCalc = RPT_RENDER)
set RptSD->m_flags = 4
set RptSD->m_borders = RPT_SDNOBORDERS
set RptSD->m_padding = RPT_SDNOBORDERS
set RptSD->m_paddingWidth = 0.000
set RptSD->m_lineSpacing = RPT_SINGLE
set RptSD->m_rotationAngle = 0
set RptSD->m_y = OffsetY + 0.000
set RptSD->m_x = OffsetX + 0.188
set RptSD->m_width = 0.688
set RptSD->m_height = 0.250
set _oldFont = uar_rptSetFont(_hReport, _Times10B0)
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW LABEL --- FieldName3
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2("Building:",char(0)))
set RptSD->m_y = OffsetY + 0.188
set RptSD->m_x = OffsetX + 0.188
set RptSD->m_width = 0.771
set RptSD->m_height = 0.250
; DRAW LABEL --- FieldName5
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2("Department:",char(0)))
set RptSD->m_y = OffsetY + 0.375
set RptSD->m_x = OffsetX + 0.188
set RptSD->m_width = 0.563
set RptSD->m_height = 0.188
; DRAW LABEL --- FieldName7
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2("Phone #:",char(0)))
set RptSD->m_flags = 0
set RptSD->m_y = OffsetY + 0.000
set RptSD->m_x = OffsetX + 1.063
set RptSD->m_width = 4.563
set RptSD->m_height = 0.250
set _DummyFont = uar_rptSetFont(_hReport, _Times100)
; DRAW TEXT --- build_nme
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2(build_nme,char(0)))
set RptSD->m_y = OffsetY + 0.188
set RptSD->m_x = OffsetX + 1.063
set RptSD->m_width = 4.563
set RptSD->m_height = 0.250
; DRAW TEXT --- dept_nme
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2(dept_nme,char(0)))
set RptSD->m_y = OffsetY + 0.375
set RptSD->m_x = OffsetX + 0.813
set RptSD->m_width = 1.156
set RptSD->m_height = 0.188
; DRAW TEXT --- phone_nbr
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, __PHONE_NBR)
set _DummyFont = uar_rptSetFont(_hReport, _oldFont)
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
	set _YOffset = OffsetY + sectionHeight
endif
return(sectionHeight)
end ;subroutine footlocationABS(nCalc,OffsetX,OffsetY)
 
subroutine footprepshead(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(footprepsheadABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine footprepshead(nCalc)
 
subroutine footprepsheadABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(0.250000), private
 
/****** YOUR CODE BEGINS HERE ******/
if (NOT(preps > " " and first_time = 1))
   return (0.0)
endif
/*----- YOUR CODE ENDS HERE -----*/
 
if (nCalc = RPT_RENDER)
set RptSD->m_flags = 4
set RptSD->m_borders = RPT_SDNOBORDERS
set RptSD->m_padding = RPT_SDNOBORDERS
set RptSD->m_paddingWidth = 0.000
set RptSD->m_lineSpacing = RPT_SINGLE
set RptSD->m_rotationAngle = 0
set RptSD->m_y = OffsetY + 0.000
set RptSD->m_x = OffsetX + 0.625
set RptSD->m_width = 0.521
set RptSD->m_height = 0.250
set _oldFont = uar_rptSetFont(_hReport, _Times10BU0)
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW LABEL --- PreLbl
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2("Prep:",char(0)))
set _DummyFont = uar_rptSetFont(_hReport, _oldFont)
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
	set _YOffset = OffsetY + sectionHeight
endif
return(sectionHeight)
end ;subroutine footprepsheadABS(nCalc,OffsetX,OffsetY)
 
subroutine footpreps(nCalc,maxHeight,bContinue)
declare a1=f8 with noconstant(0.0),private
set a1=(footprepsABS(nCalc,_XOffset,_YOffset,maxHeight,bContinue))
return (a1)
end ;subroutine footpreps(nCalc,maxHeight,bContinue)
 
subroutine footprepsABS(nCalc,OffsetX,OffsetY,maxHeight,bContinue)
declare sectionHeight = f8 with noconstant(0.190000), private
declare growSum = i4 with noconstant(0), private
declare drawHeight_prep_inst = f8 with noconstant(0.0), private
if ((preps > " " )
)
declare __PREP_INST = vc with NoConstant(build2(trim(t_list->loc[d1seq].appt[d2seq].preps[d3seq].prepInstruct, 3),char(0))),
protect
endif
if (bContinue=0)
	set _Remprep_inst = 1
endif
set RptSD->m_flags = 5
set RptSD->m_borders = RPT_SDNOBORDERS
set RptSD->m_padding = RPT_SDNOBORDERS
set RptSD->m_paddingWidth = 0.000
set RptSD->m_lineSpacing = RPT_SINGLE
set RptSD->m_rotationAngle = 0
if (bContinue)
	set RptSD->m_y = OffsetY
else
	set RptSD->m_y = OffsetY + 0.000
endif
set RptSD->m_x = OffsetX + 0.875
set RptSD->m_width = 6.375
set RptSD->m_height = OffsetY+maxHeight-RptSD->m_y
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
if ((preps > " " )
)
set _HoldRemprep_inst = _Remprep_inst
if (_Remprep_inst > 0)
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, nullterm(substring(_Remprep_inst,size(__PREP_INST)-_Remprep_inst+1,
__PREP_INST)))
set drawHeight_prep_inst = RptSD->m_height
if (RptSD->m_height > OffsetY + sectionHeight - RptSD->m_y)
	set sectionHeight = RptSD->m_y + _fDrawHeight - OffsetY
endif
if (RptSD->m_drawLength = 0)
	set _Remprep_inst = 0
elseif (RptSD->m_drawLength < size(nullterm(substring(_Remprep_inst,size(__PREP_INST)-_Remprep_inst+1,__PREP_INST))))
; subtract null
	set _Remprep_inst = _Remprep_inst+RptSD->m_drawLength
else
	set _Remprep_inst = 0
endif
	; append remainder to growSum so we know whether or not to continue at the end
	set growSum = growSum + _Remprep_inst
endif
else
	set _Remprep_inst = 0
set _HoldRemprep_inst = _Remprep_inst
endif
set RptSD->m_flags = 4
if (bContinue)
	set RptSD->m_y = OffsetY
else
	set RptSD->m_y = OffsetY + 0.000
endif
set RptSD->m_x = OffsetX + 0.875
set RptSD->m_width = 6.375
set RptSD->m_height = drawHeight_prep_inst
if (nCalc = RPT_RENDER AND _HoldRemprep_inst > 0)
 
/****** YOUR CODE BEGINS HERE ******/
if ((preps > " " )
)
; DRAW TEXT --- prep_inst
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, nullterm(substring(_HoldRemprep_inst,size(__PREP_INST)-_HoldRemprep_inst+1,
__PREP_INST)))
endif
/*----- YOUR CODE ENDS HERE -----*/
 
else
	set _Remprep_inst = _HoldRemprep_inst
endif
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
if (nCalc = RPT_RENDER)
	set _YOffset = OffsetY + sectionHeight
endif
	if (growSum > 0)
		set bContinue = 1 ; continue grow
	else
		set bContinue = 0 ; done growing
	endif
return(sectionHeight)
end ;subroutine footprepsABS(nCalc,OffsetX,OffsetY,maxHeight,bContinue)
 
subroutine FootPageSection(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(FootPageSectionABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine FootPageSection(nCalc)
 
subroutine FootPageSectionABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(0.450000), private
if (nCalc = RPT_RENDER)
set RptSD->m_flags = 64
set RptSD->m_borders = RPT_SDNOBORDERS
set RptSD->m_padding = RPT_SDNOBORDERS
set RptSD->m_paddingWidth = 0.000
set RptSD->m_lineSpacing = RPT_SINGLE
set RptSD->m_rotationAngle = 0
set RptSD->m_y = OffsetY + 0.188
set RptSD->m_x = OffsetX + 1.000
set RptSD->m_width = 6.000
set RptSD->m_height = 0.260
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW TEXT --- page_nbr
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2(RPT_PageOfPage,char(0)))
set RptSD->m_flags = 36
set RptSD->m_y = OffsetY + 0.000
set RptSD->m_x = OffsetX + 0.938
set RptSD->m_width = 6.000
set RptSD->m_height = 0.250
; DRAW LABEL --- FieldName6
set _fDrawHeight = uar_rptStringDraw(_hReport, RptSD, build2(
"If you have a Copayment for your visit listed above, be prepared to pay at time of service.",char(0)))
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
	set _YOffset = OffsetY + sectionHeight
endif
return(sectionHeight)
end ;subroutine FootPageSectionABS(nCalc,OffsetX,OffsetY)
 
subroutine headpagesection(nCalc)
declare a1=f8 with noconstant(0.0),private
set a1=(headpagesectionABS(nCalc,_XOffset,_YOffset))
return (a1)
end ;subroutine headpagesection(nCalc)
 
subroutine headpagesectionABS(nCalc,OffsetX,OffsetY)
declare sectionHeight = f8 with noconstant(9.559999), private
if (nCalc = RPT_RENDER)
set _oldPen = uar_rptSetPen(_hReport,_pen14S0C0)
; DRAW RECTANGLE --- FieldName10
set _rptStat = uar_rptRect ( _hReport, OffsetX+0.000, OffsetY+0.000, 7.510, 9.563, RPT_NOFILL, RPT_WHITE)
set _DummyPen = uar_rptSetPen(_hReport,_oldPen)
endif
return(sectionHeight)
end ;subroutine headpagesectionABS(nCalc,OffsetX,OffsetY)
 
subroutine InitializeReport(dummy)
set RptReport->m_recSize = 100
set RptReport->m_reportName = "SCH_MAYO_MN_LAYOUT_CODE3"
set RptReport->m_pageWidth = 8.50
set RptReport->m_pageHeight = 11.00
set RptReport->m_orientation = Rpt_Portrait
set RptReport->m_marginLeft = 0.50
set RptReport->m_marginRight = 0.50
set RptReport->m_marginTop = 0.50
set RptReport->m_marginBottom = 0.50
set RptReport->m_horzPrintOffset = _XShift
set RptReport->m_vertPrintOffset = _YShift
set _YOffset = RptReport->m_marginTop
set _XOffset = RptReport->m_marginLeft
set _hReport = uar_rptCreateReport(RptReport, _OutputType,Rpt_Inches)
set _rptErr = uar_rptSetErrorLevel(_hReport,Rpt_Error)
set _rptStat = uar_rptStartReport(_hReport)
set _rptPage = uar_rptStartPage(_hReport)
call _CreateFonts(0)
call _CreatePens(0)
end ;_InitializeReport
 
subroutine _CreateFonts(dummy)
set RptFont->m_recSize = 50
set RptFont->m_fontName = RPT_TIMES
set RptFont->m_pointSize = 10
set RptFont->m_bold = RPT_OFF
set RptFont->m_italic = RPT_OFF
set RptFont->m_underline = RPT_OFF
set RptFont->m_strikethrough = RPT_OFF
set RptFont->m_rgbColor = RPT_BLACK
set _Times100 = uar_rptCreateFont(_hReport, RptFont)
set RptFont->m_pointSize = 12
set RptFont->m_bold = RPT_ON
set _Times12B0 = uar_rptCreateFont(_hReport, RptFont)
set RptFont->m_pointSize = 10
set _Times10B0 = uar_rptCreateFont(_hReport, RptFont)
set RptFont->m_underline = RPT_ON
set _Times10BU0 = uar_rptCreateFont(_hReport, RptFont)
end;**************Create Fonts*************
 
subroutine _CreatePens(dummy)
set RptPen->m_recSize = 16
set RptPen->m_penWidth = 0.014
set RptPen->m_penStyle = 0
set RptPen->m_rgbColor =  RPT_BLACK
set _pen14S0C0 = uar_rptCreatePen(_hReport,RptPen)
end;**************Create Pen*************
 
;**************Report Layout End*************
 
 

