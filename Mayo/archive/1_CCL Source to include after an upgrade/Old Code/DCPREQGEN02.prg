DROP PROGRAM   DCPREQGEN02 : DBA  GO
CREATE PROGRAM  DCPREQGEN02 : DBA

RECORD  REQUEST  (
1  PERSON_ID  =  F8
1  PRINT_PRSNL_ID  =  F8
1  ORDER_QUAL [*]
2  ORDER_ID  =  F8
2  ENCNTR_ID  =  F8
2  CONVERSATION_ID  =  F8
1  PRINTER_NAME  =  C50 )

FREE SET ORDERS

FREE SET ALLERGY

FREE SET DIAGNOSIS

FREE SET PT

RECORD  ORDERS  (
1  NAME  =  VC
1  AGE  =  VC
1  DOB  =  VC
1  MRN  =  VC
1  LOCATION  =  VC
1  FACILITY  =  VC
1  NURSE_UNIT  =  VC
1  ROOM  =  VC
1  BED  =  VC
1  SEX  =  VC
1  FNBR  =  VC
1  MED_SERVICE  =  VC
1  ADMIT_DIAGNOSIS  =  VC
1  HEIGHT  =  VC
1  WEIGHT  =  VC
1  ADMIT_DT  =  VC
1  ATTENDING  =  VC
1  ADMITTING  =  VC
1  ORDER_LOCATION  =  VC
1  SPOOLOUT_IND  =  I2
1  CNT  =  I2
1  QUAL [*]
2  ORDER_ID  =  F8
2  DISPLAY_IND  =  I2
2  TEMPLATE_ORDER_FLAG  =  I2
2  CS_FLAG  =  I2
2  IV_IND  =  I2
2  MNEMONIC  =  VC
2  MNEM_LN_CNT  =  I2
2  MNEM_LN_QUAL [*]
3  MNEM_LINE  =  VC
2  DISPLAY_LINE  =  VC
2  DISP_LN_CNT  =  I2
2  DISP_LN_QUAL [*]
3  DISP_LINE  =  VC
2  ORDER_DT  =  VC
2  SIGNED_DT  =  VC
2  STATUS  =  VC
2  ACCESSION  =  VC
2  CATALOG  =  VC
2  CATALOG_TYPE_CD  =  F8
2  ACTIVITY  =  VC
2  ACTIVITY_TYPE_CD  =  F8
2  LAST_ACTION_SEQ  =  I4
2  ENTER_BY  =  VC
2  ORDER_DR  =  VC
2  TYPE  =  VC
2  ACTION  =  VC
2  ACTION_TYPE_CD  =  F8
2  COMMENT_IND  =  I2
2  COMMENT  =  VC
2  COM_LN_CNT  =  I2
2  COM_LN_QUAL [*]
3  COM_LINE  =  VC
2  OE_FORMAT_ID  =  F8
2  CLIN_LINE_IND  =  I2
2  STAT_IND  =  I2
2  D_CNT  =  I2
2  D_QUAL [*]
3  FIELD_DESCRIPTION  =  VC
3  LABEL_TEXT  =  VC
3  VALUE  =  VC
3  VALUE_CNT  =  I2
3  VALUE_QUAL [*]
4  VALUE_LINE  =  VC
3  FIELD_VALUE  =  F8
3  OE_FIELD_MEANING_ID  =  F8
3  GROUP_SEQ  =  I4
3  PRINT_IND  =  I2
3  CLIN_LINE_IND  =  I2
3  LABEL  =  VC
3  SUFFIX  =  I2
3  FIELD_TYPE_FLAG  =  I2
2  PRIORITY  =  VC
2  REQ_ST_DT  =  VC
2  FREQUENCY  =  VC
2  RATE  =  VC
2  DURATION  =  VC
2  DURATION_UNIT  =  VC
2  NURSE_COLLECT  =  VC
2  FMT_ACTION_CD  =  F8 )

RECORD  ALLERGY  (
1  CNT  =  I2
1  QUAL [*]
2  LIST  =  VC
1  LINE  =  VC
1  LINE_CNT  =  I2
1  LINE_QUAL [*]
2  LINE  =  VC )

RECORD  DIAGNOSIS  (
1  CNT  =  I2
1  QUAL [*]
2  DIAG  =  VC
1  DLINE  =  VC
1  DLINE_CNT  =  I2
1  DLINE_QUAL [*]
2  DLINE  =  VC )

RECORD  PT  (
1  LINE_CNT  =  I2
1  LNS [*]
2  LINE  =  VC )

DECLARE  ORDER_CNT  =  I4  WITH  PROTECT , NOCONSTANT ( SIZE ( REQUEST -> ORDER_QUAL , 5 ))

DECLARE  ORD_CNT  =  I4  WITH  PROTECT , NOCONSTANT ( SIZE ( REQUEST -> ORDER_QUAL , 5 ))

SET  STAT  =  ALTERLIST ( ORDERS -> QUAL ,  ORDER_CNT )

DECLARE  PERSON_ID  =  F8  WITH  PROTECT , NOCONSTANT (0.0 )

DECLARE  ENCNTR_ID  =  F8  WITH  PROTECT , NOCONSTANT (0.0 )

SET  ORDERS -> SPOOLOUT_IND  = 0

SET  PHARM_FLAG  = 0

DECLARE  MRN_ALIAS_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 4 , "MRN" ))

DECLARE  COMMENT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 14 ,
"ORD COMMENT" ))

DECLARE  FNBR_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 319 , "FIN NBR" ))

DECLARE  ADMIT_DOC_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 333 ,
"ADMITDOC" ))

DECLARE  ATTEND_DOC_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 333 ,
"ATTENDDOC" ))

DECLARE  CANCELED_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 12025 ,
"CANCELED" ))

DECLARE  INERROR_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 8 , "INERROR" ))

DECLARE  PHARMACY_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6000 ,
"PHARMACY" ))

DECLARE  IV_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 16389 ,
"IVSOLUTIONS" ))

DECLARE  COMPLETE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 ,
"COMPLETE" ))

DECLARE  MODIFY_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 , "MODIFY" )
)

DECLARE  ORDER_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 , "ORDER" ))

DECLARE  CANCEL_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 , "CANCEL" )
)

DECLARE  DISCONT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 ,
"DISCONTINUE" ))

DECLARE  STUDACTIVATE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 ,
"STUDACTIVATE" ))

DECLARE  ACTIVATE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 ,
"ACTIVATE" ))

DECLARE  VOID_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 , "VOID" ))

DECLARE  SUSPEND_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 ,
"SUSPEND" ))

DECLARE  RESUME_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 6003 , "RESUME" )
)

DECLARE  INTERMITTENT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" , 18309 ,
"INTERMITTENT" ))

DECLARE  LAST_MOD  =  C3  WITH  PRIVATE , NOCONSTANT ( FILLSTRING (3 , "000" ))

DECLARE  OFFSET  =  I2  WITH  PROTECT , NOCONSTANT (0 )

DECLARE  DAYLIGHT  =  I2  WITH  PROTECT , NOCONSTANT (0 )

DECLARE  TZ_INDEX  =  I4  WITH  PROTECT , NOCONSTANT (0 )

DECLARE  SAVED_POS  =  I4  WITH  PROTECT , NOCONSTANT (0 )

DECLARE  MAX_LENGTH  =  I4  WITH  PROTECT , NOCONSTANT (0 )

DECLARE  XCOL  =  I4  WITH  PROTECT , NOCONSTANT (0 )

DECLARE  YCOL  =  I4  WITH  PROTECT , NOCONSTANT (0 )

DECLARE  MNEMONIC_SIZE  =  I4  WITH  PROTECT , NOCONSTANT (0 )

DECLARE  MNEM_LENGTH  =  I4  WITH  PROTECT , NOCONSTANT (0 )

SELECT  INTO "nl:"
FROM (
 PERSON  P
),
(
 ENCOUNTER  E
),
(
 PERSON_ALIAS  PA
),
(
 ENCNTR_ALIAS  EA
),
(
 ENCNTR_PRSNL_RELTN  EPR
),
(
 PRSNL  PL
),
(
 DUMMYT  D1  WITH  SEQ =1
),
(
 DUMMYT  D2  WITH  SEQ =1
),
(
 DUMMYT  D3  WITH  SEQ =1
),
(
 ENCNTR_LOC_HIST  ELH
),
(
 TIME_ZONE_R  T
)
 PLAN ( P
WHERE (P.PERSON_ID= REQUEST -> PERSON_ID ))
 AND ( E
WHERE (E.ENCNTR_ID= REQUEST -> ORDER_QUAL [1 ]-> ENCNTR_ID ))
 AND ( ELH
WHERE (ELH.ENCNTR_ID=E.ENCNTR_ID))
 AND ( T
WHERE (T.PARENT_ENTITY_ID= OUTERJOIN (ELH.LOC_FACILITY_CD)) AND (T.PARENT_ENTITY_NAME= OUTERJOIN (
"LOCATION" )))
 AND ( D1 )
 AND ( PA
WHERE (PA.PERSON_ID=P.PERSON_ID) AND (PA.PERSON_ALIAS_TYPE_CD= MRN_ALIAS_CD ) AND (PA.ACTIVE_IND=1 )
 AND (PA.BEG_EFFECTIVE_DT_TM< CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (PA.END_EFFECTIVE_DT_TM>
 CNVTDATETIME ( CURDATE ,  CURTIME3 )))
 AND ( D2 )
 AND ( EA
WHERE (EA.ENCNTR_ID=E.ENCNTR_ID) AND (EA.ENCNTR_ALIAS_TYPE_CD= FNBR_CD ) AND (EA.ACTIVE_IND=1 ))
 AND ( D3 )
 AND ( EPR
WHERE (EPR.ENCNTR_ID=E.ENCNTR_ID) AND  (( (EPR.ENCNTR_PRSNL_R_CD= ADMIT_DOC_CD ) )  OR  ((
EPR.ENCNTR_PRSNL_R_CD= ATTEND_DOC_CD ) ))  AND (EPR.ACTIVE_IND=1 ))
 AND ( PL
WHERE (PL.PERSON_ID=EPR.PRSNL_PERSON_ID))


HEAD REPORT
 PERSON_ID =P.PERSON_ID,
 ENCNTR_ID =E.ENCNTR_ID,
 ORDERS -> NAME =P.NAME_FULL_FORMATTED,
 ORDERS -> SEX = UAR_GET_CODE_DISPLAY (P.SEX_CD),
 ORDERS -> AGE = CNVTAGE (P.BIRTH_DT_TM),
 TZ_INDEX = DATETIMEZONEBYNAME ( TRIM (T.TIME_ZONE)),
 ORDERS -> DOB = FORMAT ( DATETIMEZONE (P.BIRTH_DT_TM, P.BIRTH_TZ, 2 ), "@SHORTDATE" ),
 ORDERS -> ADMIT_DT = FORMAT ( DATETIMEZONE (E.REG_DT_TM,  TZ_INDEX ), "@SHORTDATE" ),
 ORDERS -> FACILITY = UAR_GET_CODE_DESCRIPTION (E.LOC_FACILITY_CD),
 ORDERS -> NURSE_UNIT = UAR_GET_CODE_DISPLAY (E.LOC_NURSE_UNIT_CD),
 ORDERS -> ROOM = UAR_GET_CODE_DISPLAY (E.LOC_ROOM_CD),
 ORDERS -> BED = UAR_GET_CODE_DISPLAY (E.LOC_BED_CD),
 ORDERS -> LOCATION = CONCAT ( TRIM ( ORDERS -> NURSE_UNIT ), "/" ,  TRIM ( ORDERS -> ROOM ), "/" ,
 TRIM ( ORDERS -> BED )),
 ORDERS -> ADMIT_DIAGNOSIS = TRIM (E.REASON_FOR_VISIT, 3 ),
 ORDERS -> MED_SERVICE = UAR_GET_CODE_DISPLAY (E.MED_SERVICE_CD)
HEAD EPR.ENCNTR_PRSNL_R_CD

IF ( (EPR.ENCNTR_PRSNL_R_CD= ADMIT_DOC_CD ) )  ORDERS -> ADMITTING =PL.NAME_FULL_FORMATTED
ELSEIF ( (EPR.ENCNTR_PRSNL_R_CD= ATTEND_DOC_CD ) )  ORDERS -> ATTENDING =PL.NAME_FULL_FORMATTED
ENDIF

DETAIL

IF ( (PA.PERSON_ALIAS_TYPE_CD= MRN_ALIAS_CD ) )
IF ( (PA.ALIAS_POOL_CD>0 ) )  ORDERS -> MRN = CNVTALIAS (PA.ALIAS, PA.ALIAS_POOL_CD)
ELSE   ORDERS -> MRN =PA.ALIAS
ENDIF

ENDIF
,

IF ( (EA.ENCNTR_ALIAS_TYPE_CD= FNBR_CD ) )
IF ( (EA.ALIAS_POOL_CD>0 ) )  ORDERS -> FNBR = CNVTALIAS (EA.ALIAS, EA.ALIAS_POOL_CD)
ELSE   ORDERS -> FNBR =EA.ALIAS
ENDIF

ENDIF

 WITH  NOCOUNTER , OUTERJOIN = D1 , DONTCARE = PA , OUTERJOIN = D2 , DONTCARE = EA , OUTERJOIN = D3
, DONTCARE = EPR

SET  HEIGHT_CD  =  UAR_GET_CODE_BY ("DISPLAYKEY" , 72 , "CLINICALHEIGHT" )

SET  WEIGHT_CD  =  UAR_GET_CODE_BY ("DISPLAYKEY" , 72 , "CLINICALWEIGHT" )

SELECT  INTO "nl:"
FROM (
 CLINICAL_EVENT  C
)
 PLAN ( C
WHERE (C.PERSON_ID= PERSON_ID ) AND (C.EVENT_CD IN ( HEIGHT_CD ,
 WEIGHT_CD )) AND (C.VIEW_LEVEL=1 ) AND (C.PUBLISH_FLAG=1 ) AND (C.VALID_UNTIL_DT_TM= CNVTDATETIME (
"31-DEC-2100,00:00:00" )) AND (C.RESULT_STATUS_CD!= INERROR_CD ))

ORDER BY C.EVENT_END_DT_TM

DETAIL

IF ( (C.EVENT_CD= HEIGHT_CD ) )  ORDERS -> HEIGHT = CONCAT ( TRIM (C.EVENT_TAG), " " ,  TRIM (
 UAR_GET_CODE_DISPLAY (C.RESULT_UNITS_CD)))
ELSEIF ( (C.EVENT_CD= WEIGHT_CD ) )  ORDERS -> WEIGHT = CONCAT ( TRIM (C.EVENT_TAG), " " ,  TRIM (
 UAR_GET_CODE_DISPLAY (C.RESULT_UNITS_CD)))
ENDIF

 WITH  NOCOUNTER

SELECT  INTO "nl:"
FROM (
 ALLERGY  A
),
(
 DUMMYT  D  WITH  SEQ =1
),
(
 NOMENCLATURE  N
)
 PLAN ( A
WHERE (A.PERSON_ID= REQUEST -> PERSON_ID ) AND (A.ACTIVE_IND=1 ) AND (A.BEG_EFFECTIVE_DT_TM<=
 CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND  (( (A.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,
 CURTIME3 )) )  OR  ((A.END_EFFECTIVE_DT_TM= NULL ) ))  AND (A.REACTION_STATUS_CD!= CANCELED_CD ))
 AND ( D )
 AND ( N
WHERE (N.NOMENCLATURE_ID=A.SUBSTANCE_NOM_ID))

ORDER BY  CNVTDATETIME (A.ONSET_DT_TM)

HEAD REPORT
 ALLERGY -> CNT =0
DETAIL

IF (  (( ( SIZE (N.SOURCE_STRING, 1 )>0 ) )  OR  (( SIZE (A.SUBSTANCE_FTDESC, 1 )>0 ) ))  )
 ALLERGY -> CNT =( ALLERGY -> CNT +1 ),  STAT = ALTERLIST ( ALLERGY -> QUAL ,  ALLERGY -> CNT ),
 ALLERGY -> QUAL [ ALLERGY -> CNT ]-> LIST =A.SUBSTANCE_FTDESC,
IF ( ( SIZE (N.SOURCE_STRING, 1 )>0 ) )  ALLERGY -> QUAL [ ALLERGY -> CNT ]-> LIST =N.SOURCE_STRING
ENDIF

ENDIF

 WITH  NOCOUNTER , OUTERJOIN = D , DONTCARE = N

FOR (  X  = 1  TO  ALLERGY -> CNT  )

IF ( ( X =1 ) )
SET  ALLERGY -> LINE  =  ALLERGY -> QUAL [ X ]-> LIST
ELSE
SET  ALLERGY -> LINE  =  CONCAT ( TRIM ( ALLERGY -> LINE ), ", " ,  TRIM ( ALLERGY -> QUAL [ X ]->
 LIST ))
ENDIF


ENDFOR


IF ( ( ALLERGY -> CNT >0 ) )
SET  PT -> LINE_CNT  = 0
SET  MAX_LENGTH  = 86
 EXECUTE DCP_PARSE_TEXT  VALUE ( ALLERGY -> LINE ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( ALLERGY -> LINE_QUAL ,  PT -> LINE_CNT )
SET  ALLERGY -> LINE_CNT  =  PT -> LINE_CNT
FOR (  X  = 1  TO  PT -> LINE_CNT  )

SET  ALLERGY -> LINE_QUAL [ X ]-> LINE  =  PT -> LNS [ X ]-> LINE

ENDFOR

ENDIF


SET  MNEM_DISP_LEVEL  = "1"

SET  IV_DISP_LEVEL  = "0"

IF ( ( PHARM_FLAG =1 ) )
SELECT  INTO "nl:"
FROM (
 NAME_VALUE_PREFS  N
),
(
 APP_PREFS  A
)
 PLAN ( N
WHERE (N.PVC_NAME IN ("MNEM_DISP_LEVEL" ,
"IV_DISP_LEVEL" )))
 AND ( A
WHERE (A.APP_PREFS_ID=N.PARENT_ENTITY_ID) AND (A.PRSNL_ID=0 ) AND (A.POSITION_CD=0 ))


DETAIL

IF ( (N.PVC_NAME="MNEM_DISP_LEVEL" ) AND (N.PVC_VALUE IN ("0" ,
"1" ,
"2" )) )  MNEM_DISP_LEVEL =N.PVC_VALUE
ELSEIF ( (N.PVC_NAME="IV_DISP_LEVEL" ) AND (N.PVC_VALUE IN ("0" ,
"1" )) )  IV_DISP_LEVEL =N.PVC_VALUE
ENDIF

 WITH  NOCOUNTER
ENDIF


DECLARE  OICNT  =  I4  WITH  PROTECT , NOCONSTANT (0 )

SET  ORD_CNT  = 0

SET  OICNT  = 0

SET  MAX_LENGTH  = 70

SELECT  INTO "nl:"
FROM (
 ORDERS  O
),
(
 ORDER_ACTION  OA
),
(
 PRSNL  PL
),
(
 PRSNL  PL2
),
(
 DUMMYT  D1  WITH  SEQ = VALUE ( ORDER_CNT )
),
(
 DUMMYT  D2  WITH  SEQ = VALUE ( ORDER_CNT )
),
(
 ORDER_INGREDIENT  OI
)
 PLAN ( D1 )
 AND ( O
WHERE (O.ORDER_ID= REQUEST -> ORDER_QUAL [D1.SEQ]-> ORDER_ID ))
 AND ( OA
WHERE (OA.ORDER_ID=O.ORDER_ID) AND  (( ( REQUEST -> ORDER_QUAL [D1.SEQ]-> CONVERSATION_ID >0 ) AND (
OA.ORDER_CONVERSATION_ID= REQUEST -> ORDER_QUAL [D1.SEQ]-> CONVERSATION_ID ) )  OR  (( REQUEST ->
 ORDER_QUAL [D1.SEQ]-> CONVERSATION_ID <=0 ) AND (OA.ACTION_SEQUENCE=O.LAST_ACTION_SEQUENCE) )) )
 AND ( PL
WHERE (PL.PERSON_ID=OA.ACTION_PERSONNEL_ID))
 AND ( PL2
WHERE (PL2.PERSON_ID=OA.ORDER_PROVIDER_ID))
 AND ( D2 )
 AND ( OI
WHERE (O.ORDER_ID=OI.ORDER_ID) AND (O.LAST_INGRED_ACTION_SEQUENCE=OI.ACTION_SEQUENCE))

ORDER BY O.OE_FORMAT_ID,
O.ACTIVITY_TYPE_CD,
O.CURRENT_START_DT_TM

HEAD REPORT
 ORDERS -> ORDER_LOCATION = TRIM ( UAR_GET_CODE_DISPLAY (OA.ORDER_LOCN_CD)),
 MNEMONIC_SIZE =( SIZE (O.HNA_ORDER_MNEMONIC, 3 )-1 )
HEAD O.ORDER_ID
 ORD_CNT =( ORD_CNT +1 ), ORDERS -> QUAL [ ORD_CNT ]-> STATUS = UAR_GET_CODE_DISPLAY (
O.ORDER_STATUS_CD), ORDERS -> QUAL [ ORD_CNT ]-> CATALOG = UAR_GET_CODE_DISPLAY (O.CATALOG_TYPE_CD),
 ORDERS -> QUAL [ ORD_CNT ]-> CATALOG_TYPE_CD =O.CATALOG_TYPE_CD, ORDERS -> QUAL [ ORD_CNT ]->
 ACTIVITY = UAR_GET_CODE_DISPLAY (O.ACTIVITY_TYPE_CD), ORDERS -> QUAL [ ORD_CNT ]->
 ACTIVITY_TYPE_CD =O.ACTIVITY_TYPE_CD, ORDERS -> QUAL [ ORD_CNT ]-> DISPLAY_LINE =
O.CLINICAL_DISPLAY_LINE, ORDERS -> QUAL [ ORD_CNT ]-> ORDER_ID =O.ORDER_ID, ORDERS -> QUAL [
 ORD_CNT ]-> DISPLAY_IND =1 , ORDERS -> QUAL [ ORD_CNT ]-> TEMPLATE_ORDER_FLAG =
O.TEMPLATE_ORDER_FLAG, ORDERS -> QUAL [ ORD_CNT ]-> CS_FLAG =O.CS_FLAG, ORDERS -> QUAL [ ORD_CNT ]->
 OE_FORMAT_ID =O.OE_FORMAT_ID,
IF ( ( SIZE ( SUBSTRING (245 , 10 , O.CLINICAL_DISPLAY_LINE), 1 )>0 ) )  ORDERS -> QUAL [ ORD_CNT ]
-> CLIN_LINE_IND =1
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> CLIN_LINE_IND =0
ENDIF
, MNEM_LENGTH = SIZE ( TRIM (O.HNA_ORDER_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.HNA_ORDER_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( CNVTUPPER ( TRIM
(O.HNA_ORDER_MNEMONIC)), "..." )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CNVTUPPER ( TRIM (O.HNA_ORDER_MNEMONIC))
ENDIF
,
IF ( ( CURUTC >0 ) )  ORDERS -> QUAL [ ORD_CNT ]-> ORDER_DT = TRIM ( CONCAT ( TRIM (
 DATETIMEZONEFORMAT (OA.ORDER_DT_TM, OA.ORDER_TZ, "@SHORTDATETIMENOSEC" )), " " ,  TRIM (
 DATETIMEZONEFORMAT (OA.ORDER_DT_TM, OA.ORDER_TZ, "ZZZ" )))),  ORDERS -> QUAL [ ORD_CNT ]->
 SIGNED_DT = TRIM ( CONCAT ( TRIM ( DATETIMEZONEFORMAT (OA.ORDER_DT_TM, OA.ORDER_TZ,
"@SHORTDATETIMENOSEC" )), " " ,  TRIM ( DATETIMEZONEFORMAT (OA.ORDER_DT_TM, OA.ORDER_TZ, "ZZZ" ))))
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> ORDER_DT = FORMAT (OA.ORDER_DT_TM, "@SHORTDATETIMENOSEC" ),
 ORDERS -> QUAL [ ORD_CNT ]-> SIGNED_DT = FORMAT (O.ORIG_ORDER_DT_TM, "@SHORTDATETIMENOSEC" )
ENDIF
, ORDERS -> QUAL [ ORD_CNT ]-> COMMENT_IND =O.ORDER_COMMENT_IND, ORDERS -> QUAL [ ORD_CNT ]->
 LAST_ACTION_SEQ =O.LAST_ACTION_SEQUENCE, ORDERS -> QUAL [ ORD_CNT ]-> ENTER_BY =
PL.NAME_FULL_FORMATTED, ORDERS -> QUAL [ ORD_CNT ]-> ORDER_DR =PL2.NAME_FULL_FORMATTED, ORDERS ->
 QUAL [ ORD_CNT ]-> TYPE = UAR_GET_CODE_DISPLAY (OA.COMMUNICATION_TYPE_CD), ORDERS -> QUAL [
 ORD_CNT ]-> ACTION_TYPE_CD =OA.ACTION_TYPE_CD, ORDERS -> QUAL [ ORD_CNT ]-> ACTION =
 UAR_GET_CODE_DISPLAY (OA.ACTION_TYPE_CD), ORDERS -> QUAL [ ORD_CNT ]-> IV_IND =O.IV_IND,
IF ( (O.DCP_CLIN_CAT_CD= IV_CD ) )  ORDERS -> QUAL [ ORD_CNT ]-> IV_IND =1
ENDIF

HEAD OI.COMP_SEQUENCE

IF ( (OI.COMP_SEQUENCE>0 ) AND (O.MED_ORDER_TYPE_CD= INTERMITTENT_CD ) )
IF ( (OI.INGREDIENT_TYPE_FLAG=2 ) AND (OI.CLINICALLY_SIGNIFICANT_FLAG=2 ) )  OICNT =( OICNT +1 )
ELSE
IF ( (OI.INGREDIENT_TYPE_FLAG=3 ) )  OICNT =( OICNT +1 )
ENDIF

ENDIF

ENDIF

FOOT  O.ORDER_ID

IF ( (O.CATALOG_TYPE_CD= PHARMACY_CD ) )
IF (  (( (O.IV_IND=1 ) )  OR  ((O.MED_ORDER_TYPE_CD= INTERMITTENT_CD ) AND ( OICNT >1 ) ))  )
IF ( ( IV_DISP_LEVEL ="1" ) )  MNEM_LENGTH = SIZE ( TRIM (O.ORDERED_AS_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH > MAX_LENGTH ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = TRIM ( CONCAT (
 SUBSTRING (1 , ( MAX_LENGTH -3 ), O.ORDERED_AS_MNEMONIC), "..." ))
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC =O.ORDERED_AS_MNEMONIC
ENDIF

ELSE   MNEM_LENGTH = SIZE ( TRIM (O.HNA_ORDER_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH > MAX_LENGTH ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = TRIM ( CONCAT (
 SUBSTRING (1 , ( MAX_LENGTH -3 ), O.HNA_ORDER_MNEMONIC), "..." ))
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC =O.HNA_ORDER_MNEMONIC
ENDIF

ENDIF

ELSE
IF ( ( MNEM_DISP_LEVEL ="0" ) )  MNEM_LENGTH = SIZE ( TRIM (O.HNA_ORDER_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.HNA_ORDER_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( TRIM (
O.HNA_ORDER_MNEMONIC), "..." )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = TRIM (O.HNA_ORDER_MNEMONIC)
ENDIF

ENDIF
,
IF ( ( MNEM_DISP_LEVEL ="1" ) )
IF (  (( (O.HNA_ORDER_MNEMONIC=O.ORDERED_AS_MNEMONIC) )  OR  (( SIZE (O.ORDERED_AS_MNEMONIC, 1 )=0 )
 ))  )  MNEM_LENGTH = SIZE ( TRIM (O.HNA_ORDER_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.HNA_ORDER_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( TRIM (
O.HNA_ORDER_MNEMONIC), "..." )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = TRIM (O.HNA_ORDER_MNEMONIC)
ENDIF

ELSE   MNEM_LENGTH = SIZE ( TRIM (O.HNA_ORDER_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.HNA_ORDER_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( TRIM (
O.HNA_ORDER_MNEMONIC), "..." )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = TRIM (O.HNA_ORDER_MNEMONIC)
ENDIF
,  MNEM_LENGTH = SIZE ( TRIM (O.ORDERED_AS_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.ORDERED_AS_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( ORDERS -> QUAL [
 ORD_CNT ]-> MNEMONIC , "(" ,  TRIM (O.ORDERED_AS_MNEMONIC), "...)" )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC , "("
,  TRIM (O.ORDERED_AS_MNEMONIC), ")" )
ENDIF

ENDIF

ENDIF
,
IF ( ( MNEM_DISP_LEVEL ="2" ) AND (O.IV_IND!=1 ) )
IF (  (( (O.HNA_ORDER_MNEMONIC=O.ORDERED_AS_MNEMONIC) )  OR  (( SIZE (O.ORDERED_AS_MNEMONIC, 1 )=0 )
 ))  )  MNEM_LENGTH = SIZE ( TRIM (O.HNA_ORDER_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.HNA_ORDER_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( TRIM (
O.HNA_ORDER_MNEMONIC), "..." )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = TRIM (O.HNA_ORDER_MNEMONIC)
ENDIF

ELSE   MNEM_LENGTH = SIZE ( TRIM (O.HNA_ORDER_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.HNA_ORDER_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( TRIM (
O.HNA_ORDER_MNEMONIC), "..." )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = TRIM (O.HNA_ORDER_MNEMONIC)
ENDIF
,  MNEM_LENGTH = SIZE ( TRIM (O.ORDERED_AS_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.ORDERED_AS_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( ORDERS -> QUAL [
 ORD_CNT ]-> MNEMONIC , "(" ,  TRIM (O.ORDERED_AS_MNEMONIC), "...)" )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC , "("
,  TRIM (O.ORDERED_AS_MNEMONIC), ")" )
ENDIF

ENDIF
,
IF ( (O.ORDER_MNEMONIC!=O.ORDERED_AS_MNEMONIC) AND ( SIZE (O.ORDER_MNEMONIC, 1 )>0 ) )  MNEM_LENGTH
= SIZE ( TRIM (O.ORDER_MNEMONIC), 1 ),
IF ( ( MNEM_LENGTH >= MNEMONIC_SIZE ) AND ( SUBSTRING (( MNEM_LENGTH -3 ),  MNEM_LENGTH ,
O.ORDER_MNEMONIC)!="..." ) )  ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( TRIM ( ORDERS ->
 QUAL [ ORD_CNT ]-> MNEMONIC ), "(" ,  TRIM (O.ORDER_MNEMONIC), "...)" )
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> MNEMONIC = CONCAT ( TRIM ( ORDERS -> QUAL [ ORD_CNT ]->
 MNEMONIC ), "(" ,  TRIM (O.ORDER_MNEMONIC), ")" )
ENDIF

ENDIF

ENDIF

ENDIF

ENDIF
,
IF ( (OA.ACTION_TYPE_CD IN ( ORDER_CD ,
 SUSPEND_CD ,
 RESUME_CD ,
 CANCEL_CD ,
 DISCONT_CD ,
 VOID_CD )) )  ORDERS -> QUAL [ ORD_CNT ]-> FMT_ACTION_CD =OA.ACTION_TYPE_CD
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> FMT_ACTION_CD = ORDER_CD
ENDIF
,
IF ( (OA.ACTION_TYPE_CD IN ( ORDER_CD ,
 MODIFY_CD ,
 CANCEL_CD ,
 DISCONT_CD ,
 ACTIVATE_CD ,
 STUDACTIVATE_CD )) AND (O.ENCNTR_ID>0 ) AND (O.TEMPLATE_ORDER_FLAG!=7 ) )  ORDERS -> QUAL [
 ORD_CNT ]-> DISPLAY_IND =1 ,  ORDERS -> SPOOLOUT_IND =1
ELSE   ORDERS -> QUAL [ ORD_CNT ]-> DISPLAY_IND =0
ENDIF

 WITH  OUTERJOIN = D2 , NOCOUNTER

SELECT  INTO "nl:"
FROM (
 ORDER_DETAIL  OD
),
(
 OE_FORMAT_FIELDS  OEF
),
(
 ORDER_ENTRY_FIELDS  OF1
),
(
 DUMMYT  D1  WITH  SEQ = VALUE ( ORDER_CNT )
)
 PLAN ( D1 )
 AND ( OD
WHERE ( ORDERS -> QUAL [D1.SEQ]-> ORDER_ID =OD.ORDER_ID))
 AND ( OEF
WHERE (OEF.OE_FORMAT_ID= ORDERS -> QUAL [D1.SEQ]-> OE_FORMAT_ID ) AND (OEF.ACTION_TYPE_CD= ORDERS ->
 QUAL [D1.SEQ]-> FMT_ACTION_CD ) AND (OEF.OE_FIELD_ID=OD.OE_FIELD_ID))
 AND ( OF1
WHERE (OF1.OE_FIELD_ID=OEF.OE_FIELD_ID))

ORDER BY OD.ORDER_ID,
OD.OE_FIELD_ID,
OD.ACTION_SEQUENCE DESC

HEAD REPORT
 ORDERS -> QUAL [D1.SEQ]-> D_CNT =0
HEAD OD.ORDER_ID
 STAT = ALTERLIST ( ORDERS -> QUAL [D1.SEQ]-> D_QUAL , 5 ), ORDERS -> QUAL [D1.SEQ]-> STAT_IND =0
HEAD OD.OE_FIELD_ID
 ACT_SEQ =OD.ACTION_SEQUENCE, ODFLAG =1 ,
IF (  (( (OD.OE_FIELD_MEANING="COLLPRI" ) )  OR  ((OD.OE_FIELD_MEANING="PRIORITY" ) ))  )  ORDERS ->
 QUAL [D1.SEQ]-> PRIORITY =OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING="REQSTARTDTTM" ) )
IF ( ( CURUTC >0 ) )  ORDERS -> QUAL [D1.SEQ]-> REQ_ST_DT = TRIM ( CONCAT ( TRIM (
 DATETIMEZONEFORMAT (OD.OE_FIELD_DT_TM_VALUE, OD.OE_FIELD_TZ, "@SHORTDATETIMENOSEC" )), " " ,  TRIM
( DATETIMEZONEFORMAT (OD.OE_FIELD_DT_TM_VALUE, OD.OE_FIELD_TZ, "ZZZ" ))))
ELSE   ORDERS -> QUAL [D1.SEQ]-> REQ_ST_DT = FORMAT (OD.OE_FIELD_DT_TM_VALUE, "@SHORTDATETIMENOSEC"
)
ENDIF

ENDIF
,
IF ( (OD.OE_FIELD_MEANING="FREQ" ) )  ORDERS -> QUAL [D1.SEQ]-> FREQUENCY =OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING="RATE" ) )  ORDERS -> QUAL [D1.SEQ]-> RATE =OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING="DURATION" ) )  ORDERS -> QUAL [D1.SEQ]-> DURATION =
OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING="DURATIONUNIT" ) )  ORDERS -> QUAL [D1.SEQ]-> DURATION_UNIT =
OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING="NURSECOLLECT" ) )  ORDERS -> QUAL [D1.SEQ]-> NURSE_COLLECT =
OD.OE_FIELD_DISPLAY_VALUE
ENDIF

HEAD OD.ACTION_SEQUENCE

IF ( ( ACT_SEQ !=OD.ACTION_SEQUENCE) )  ODFLAG =0
ENDIF

DETAIL

IF ( ( ODFLAG =1 ) )  ORDERS -> QUAL [D1.SEQ]-> D_CNT =( ORDERS -> QUAL [D1.SEQ]-> D_CNT +1 ),  DC =
 ORDERS -> QUAL [D1.SEQ]-> D_CNT ,
IF ( ( DC > SIZE ( ORDERS -> QUAL [D1.SEQ]-> D_QUAL , 5 )) )  STAT = ALTERLIST ( ORDERS -> QUAL [
D1.SEQ]-> D_QUAL , ( DC +5 ))
ENDIF
,  ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> LABEL_TEXT = TRIM (OEF.LABEL_TEXT),  ORDERS -> QUAL [
D1.SEQ]-> D_QUAL [ DC ]-> FIELD_VALUE =OD.OE_FIELD_VALUE,  ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]->
 GROUP_SEQ =OEF.GROUP_SEQ,  ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> OE_FIELD_MEANING_ID =
OD.OE_FIELD_MEANING_ID,
IF ( (OD.OE_FIELD_DT_TM_VALUE!= NULL ) )
IF ( ( CURUTC >0 ) )  ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> VALUE = TRIM ( CONCAT ( TRIM (
 DATETIMEZONEFORMAT (OD.OE_FIELD_DT_TM_VALUE, OD.OE_FIELD_TZ, "@SHORTDATETIMENOSEC" )), " " ,  TRIM
( DATETIMEZONEFORMAT (OD.OE_FIELD_DT_TM_VALUE, OD.OE_FIELD_TZ, "ZZZ" ))))
ELSE   ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> VALUE = FORMAT (OD.OE_FIELD_DT_TM_VALUE,
"@SHORTDATETIMENOSEC" )
ENDIF

ELSE   ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> VALUE = TRIM (OD.OE_FIELD_DISPLAY_VALUE, 3 )
ENDIF
,  ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> CLIN_LINE_IND =OEF.CLIN_LINE_IND,  ORDERS -> QUAL [
D1.SEQ]-> D_QUAL [ DC ]-> LABEL = TRIM (OEF.CLIN_LINE_LABEL),  ORDERS -> QUAL [D1.SEQ]-> D_QUAL [
 DC ]-> SUFFIX =OEF.CLIN_SUFFIX_IND,  ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> FIELD_TYPE_FLAG =
OF1.FIELD_TYPE_FLAG,
IF ( ( SIZE (OD.OE_FIELD_DISPLAY_VALUE, 1 )>0 ) )  ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]->
 PRINT_IND =0
ELSE   ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> PRINT_IND =1
ENDIF
,
IF (  (( (OD.OE_FIELD_MEANING_ID=1100 ) )  OR  ( (( (OD.OE_FIELD_MEANING_ID=8 ) )  OR  ( (( (
OD.OE_FIELD_MEANING_ID=127 ) )  OR  ((OD.OE_FIELD_MEANING_ID=43 ) ))  ))  ))  AND ( TRIM (
 CNVTUPPER (OD.OE_FIELD_DISPLAY_VALUE), 3 )="STAT" ) )  ORDERS -> QUAL [D1.SEQ]-> STAT_IND =1
ENDIF
,
IF ( (OF1.FIELD_TYPE_FLAG=7 ) )
IF ( (OD.OE_FIELD_VALUE=1 ) )
IF (  (( (OEF.DISP_YES_NO_FLAG=0 ) )  OR  ((OEF.DISP_YES_NO_FLAG=1 ) ))  )  ORDERS -> QUAL [D1.SEQ]
-> D_QUAL [ DC ]-> VALUE = TRIM (OEF.LABEL_TEXT)
ELSE   ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> CLIN_LINE_IND =0
ENDIF

ELSE
IF (  (( (OEF.DISP_YES_NO_FLAG=0 ) )  OR  ((OEF.DISP_YES_NO_FLAG=2 ) ))  )  ORDERS -> QUAL [D1.SEQ]
-> D_QUAL [ DC ]-> VALUE = TRIM (OEF.CLIN_LINE_LABEL)
ELSE   ORDERS -> QUAL [D1.SEQ]-> D_QUAL [ DC ]-> CLIN_LINE_IND =0
ENDIF

ENDIF

ENDIF

ENDIF

FOOT  OD.ORDER_ID
 STAT = ALTERLIST ( ORDERS -> QUAL [D1.SEQ]-> D_QUAL ,  DC )
 WITH  NOCOUNTER

FOR (  X  = 1  TO  ORDER_CNT  )

IF ( ( ORDERS -> QUAL [ X ]-> CLIN_LINE_IND =1 ) )
SET  STARTED_BUILD_IND  = 0
FOR (  FSUB  = 1  TO 31  )

FOR (  XX  = 1  TO  ORDERS -> QUAL [ X ]-> D_CNT  )

IF (  (( ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> GROUP_SEQ = FSUB ) )  OR  (( FSUB =31 ) ))  AND (
 ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> PRINT_IND =0 ) )
IF ( ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> CLIN_LINE_IND =1 ) )
IF ( ( STARTED_BUILD_IND =0 ) )
SET  STARTED_BUILD_IND  = 1
IF ( ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> SUFFIX =0 ) AND ( SIZE ( ORDERS -> QUAL [ X ]->
 D_QUAL [ XX ]-> LABEL , 1 )>0 ) )
SET  ORDERS -> QUAL [ X ]-> DISPLAY_LINE  =  CONCAT ( TRIM ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]->
 LABEL ), " " ,  TRIM ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> VALUE ))
ELSEIF ( ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> SUFFIX =1 ) AND ( SIZE ( ORDERS -> QUAL [ X ]->
 D_QUAL [ XX ]-> LABEL , 1 )>0 ) )
SET  ORDERS -> QUAL [ X ]-> DISPLAY_LINE  =  CONCAT ( TRIM ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]->
 VALUE ), " " ,  TRIM ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> LABEL ))
ELSE
SET  ORDERS -> QUAL [ X ]-> DISPLAY_LINE  =  CONCAT ( TRIM ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]->
 VALUE ), " " )
ENDIF

ELSE
IF ( ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> SUFFIX =0 ) AND ( SIZE ( ORDERS -> QUAL [ X ]->
 D_QUAL [ XX ]-> LABEL , 1 )>0 ) )
SET  ORDERS -> QUAL [ X ]-> DISPLAY_LINE  =  CONCAT ( TRIM ( ORDERS -> QUAL [ X ]-> DISPLAY_LINE ),
"," ,  TRIM ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> LABEL ), " " ,  TRIM ( ORDERS -> QUAL [ X ]->
 D_QUAL [ XX ]-> VALUE ))
ELSEIF ( ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> SUFFIX =1 ) AND ( SIZE ( ORDERS -> QUAL [ X ]->
 D_QUAL [ XX ]-> LABEL , 1 )>0 ) )
SET  ORDERS -> QUAL [ X ]-> DISPLAY_LINE  =  CONCAT ( TRIM ( ORDERS -> QUAL [ X ]-> DISPLAY_LINE ),
"," ,  TRIM ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> VALUE ), " " ,  TRIM ( ORDERS -> QUAL [ X ]->
 D_QUAL [ XX ]-> LABEL ))
ELSE
SET  ORDERS -> QUAL [ X ]-> DISPLAY_LINE  =  CONCAT ( TRIM ( ORDERS -> QUAL [ X ]-> DISPLAY_LINE ),
"," ,  TRIM ( ORDERS -> QUAL [ X ]-> D_QUAL [ XX ]-> VALUE ), " " )
ENDIF

ENDIF

ENDIF

ENDIF


ENDFOR


ENDFOR

ENDIF


ENDFOR


SET  MAX_LENGTH  = 90

FOR (  X  = 1  TO  ORDER_CNT  )

IF ( ( SIZE ( ORDERS -> QUAL [ X ]-> DISPLAY_LINE , 1 )>0 ) )
SET  PT -> LINE_CNT  = 0
 EXECUTE DCP_PARSE_TEXT  VALUE ( ORDERS -> QUAL [ X ]-> DISPLAY_LINE ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( ORDERS -> QUAL [ X ]-> DISP_LN_QUAL ,  PT -> LINE_CNT )
SET  ORDERS -> QUAL [ X ]-> DISP_LN_CNT  =  PT -> LINE_CNT
FOR (  Y  = 1  TO  PT -> LINE_CNT  )

SET  ORDERS -> QUAL [ X ]-> DISP_LN_QUAL [ Y ]-> DISP_LINE  =  PT -> LNS [ Y ]-> LINE

ENDFOR

ENDIF

FOR (  WW  = 1  TO  ORDERS -> QUAL [ X ]-> D_CNT  )

IF (  (( ( ORDERS -> QUAL [ X ]-> D_QUAL [ WW ]-> FIELD_TYPE_FLAG =0 ) )  OR  ( (( ( ORDERS -> QUAL
[ X ]-> D_QUAL [ WW ]-> FIELD_TYPE_FLAG =11 ) )  OR  (( TEXTLEN ( TRIM ( ORDERS -> QUAL [ X ]->
 D_QUAL [ WW ]-> VALUE , 3 ))> MAX_LENGTH ) ))  ))  )
SET  PT -> LINE_CNT  = 0
 EXECUTE DCP_PARSE_TEXT  VALUE ( ORDERS -> QUAL [ X ]-> D_QUAL [ WW ]-> VALUE ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( ORDERS -> QUAL [ X ]-> D_QUAL [ WW ]-> VALUE_QUAL ,  PT -> LINE_CNT )
SET  ORDERS -> QUAL [ X ]-> D_QUAL [ WW ]-> VALUE_CNT  =  PT -> LINE_CNT
FOR (  Y  = 1  TO  PT -> LINE_CNT  )

SET  ORDERS -> QUAL [ X ]-> D_QUAL [ WW ]-> VALUE_QUAL [ Y ]-> VALUE_LINE  =  PT -> LNS [ Y ]->
 LINE

ENDFOR

ELSE
SET  ORDERS -> QUAL [ X ]-> D_QUAL [ WW ]-> VALUE_CNT  = 1
ENDIF


ENDFOR


ENDFOR


FOR (  X  = 1  TO  ORDER_CNT  )

SELECT  INTO "nl:"
FROM (
 ACCESSION_ORDER_R  AOR
)
 PLAN ( AOR
WHERE (AOR.ORDER_ID= ORDERS -> QUAL [ X ]-> ORDER_ID ))


DETAIL
 ORDERS -> QUAL [ X ]-> ACCESSION =AOR.ACCESSION
 WITH  NOCOUNTER

ENDFOR


SET  MAX_LENGTH  = 90

FOR (  X  = 1  TO  ORDER_CNT  )

IF ( ( TEXTLEN ( ORDERS -> QUAL [ X ]-> MNEMONIC )>0 ) )
SET  PT -> LINE_CNT  = 0
 EXECUTE DCP_PARSE_TEXT  VALUE ( ORDERS -> QUAL [ X ]-> MNEMONIC ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( ORDERS -> QUAL [ X ]-> MNEM_LN_QUAL ,  PT -> LINE_CNT )
SET  ORDERS -> QUAL [ X ]-> MNEM_LN_CNT  =  PT -> LINE_CNT
FOR (  Y  = 1  TO  PT -> LINE_CNT  )

SET  ORDERS -> QUAL [ X ]-> MNEM_LN_QUAL [ Y ]-> MNEM_LINE  =  PT -> LNS [ Y ]-> LINE

ENDFOR

ENDIF


ENDFOR


SET  MAX_LENGTH  = 120

FOR (  X  = 1  TO  ORDER_CNT  )

IF ( ( ORDERS -> QUAL [ X ]-> COMMENT_IND =1 ) )
SELECT  INTO "nl:"
FROM (
 ORDER_COMMENT  OC
),
(
 LONG_TEXT  LT
)
 PLAN ( OC
WHERE (OC.ORDER_ID= ORDERS -> QUAL [ X ]-> ORDER_ID ) AND (OC.COMMENT_TYPE_CD= COMMENT_CD ))
 AND ( LT
WHERE (LT.LONG_TEXT_ID=OC.LONG_TEXT_ID))


DETAIL
 ORDERS -> QUAL [ X ]-> COMMENT =LT.LONG_TEXT
 WITH  NOCOUNTER
SET  PT -> LINE_CNT  = 0
 EXECUTE DCP_PARSE_TEXT  VALUE ( ORDERS -> QUAL [ X ]-> COMMENT ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( ORDERS -> QUAL [ X ]-> COM_LN_QUAL ,  PT -> LINE_CNT )
SET  ORDERS -> QUAL [ X ]-> COM_LN_CNT  =  PT -> LINE_CNT
FOR (  Y  = 1  TO  PT -> LINE_CNT  )

SET  ORDERS -> QUAL [ X ]-> COM_LN_QUAL [ Y ]-> COM_LINE  =  PT -> LNS [ Y ]-> LINE

ENDFOR

ENDIF


ENDFOR


IF ( ( ORDERS -> SPOOLOUT_IND =1 ) )
SET  NEW_TIMEDISP  =  CNVTSTRING ( CURTIME3 )
SET  TEMPFILE1A  =  BUILD ( CONCAT ("cer_temp:dcpreq" , "_" ,  NEW_TIMEDISP ), ".dat" )
SET  CANCEL_BANNER  = "************************CANCEL*************************"
SET  DISCONT_BANNER  = "********************DISCONTINUED***********************"
SET  MODIFY_BANNER  = "***********************MODIFIED************************"
SELECT  INTO  VALUE ( TEMPFILE1A )
D1.SEQ
FROM (
 DUMMYT  D1  WITH  SEQ =1
)
 PLAN ( D1 )


HEAD REPORT
 FIRST_PAGE ="Y" ,
 SAVED_POS =0
HEAD PAGE
"{LPI/8}{CPI/12}{FONT/4}" ,
"  " ,
 ROW +1 ,
 LINE1 = FILLSTRING (35 , "_" ),
 LINE2 = FILLSTRING (10 , "_" ),
 SPACES = FILLSTRING (50 , " " ),
"{CPI/12}{POS/30/45}" ,
"MEDICAL RECORD NUMBER" ,
 ROW +1 ,
"{CPI/10}{POS/30/55}{b}" ,
"*" ,
 ORDERS -> MRN ,
"*" ,
 ROW +1 ,
"{CPI/12}{POS/235/45}" ,
"VISIT NUMBER" ,
 ROW +1 ,
"{CPI/10}{POS/240/55}{b}" ,
"*" ,

 CALL PRINT ( TRIM ( CNVTSTRING ( CNVTINT ( REQUEST -> ORDER_QUAL [1 ]-> ENCNTR_ID )))),
"*" ,
 ROW +1 ,
"{CPI/12}{POS/420/45}" ,
"PATIENT ACCOUNT NUMBER" ,
 ROW +1 ,
"{CPI/10}{POS/440/55}{b}" ,
"*" ,
 ORDERS -> FNBR ,
"*" ,
 ROW +1 ,
"{CPI/12}{POS/30/120}" ,
"PATIENT NAME:" ,
 ROW +1 ,
"{CPI/10}{POS/125/120}{b}" ,

 CALL PRINT ( TRIM ( ORDERS -> NAME , 3 )),
"{endb}" ,
 ROW +1 ,
"{CPI/12}{POS/410/120}" ,
"DOB:  " ,
 ORDERS -> DOB ,
 ROW +1 ,
"{CPI/12}{POS/30/130}" ,
"ADMIT DX:" ,
 ROW +1 ,

IF ( ( TEXTLEN ( ORDERS -> ADMIT_DIAGNOSIS )>35 ) ) "{CPI/12}{POS/125/130}" ,
 CALL PRINT ( TRIM ( CONCAT ( SUBSTRING (1 , 32 ,  ORDERS -> ADMIT_DIAGNOSIS ), "..." ))),  ROW +1
ELSE  "{CPI/12}{POS/125/130}" ,
 CALL PRINT ( ORDERS -> ADMIT_DIAGNOSIS ),  ROW +1
ENDIF
,
"{CPI/12}{POS/410/130}" ,
"AGE:  " ,
 ORDERS -> AGE ,
 ROW +1 ,
"{CPI/12}{POS/30/160}" ,
"ADMIT DATE:  " ,
 ROW +1 ,
"{CPI/12}{POS/125/160}" ,
 ORDERS -> ADMIT_DT ,
 ROW +1 ,
"{CPI/12}{POS/410/160}" ,
"HGT / WT: " ,

 CALL PRINT ( TRIM ( ORDERS -> HEIGHT )),
"/" ,

 CALL PRINT ( TRIM ( ORDERS -> WEIGHT )),
 ROW +1 ,
"{CPI/12}{POS/30/170}" ,
"NURSING UNIT:" ,
 ROW +1 ,
"{CPI/10}{POS/125/170}{B}" ,
 ORDERS -> NURSE_UNIT ,
"{ENDB}" ,
 ROW +1 ,
"{CPI/12}{POS/410/170}" ,
"SEX:  " ,
 ORDERS -> SEX ,
 ROW +1 ,
"{CPI/12}{POS/30/180}" ,
"ROOM/BED:" ,
 ROW +1 ,
"{CPI/12}{POS/125/180}" ,
 ORDERS -> ROOM ,
 ORDERS -> BED ,
 ROW +1 ,
"{CPI/10}{POS/30/210}" ,
"ALLERGIES:    " ,
"{b}" ,

IF ( ( ALLERGY -> LINE_CNT >0 ) )  ALLERGY -> LINE_QUAL [1 ]-> LINE ,  ROW +1
ENDIF
,

IF ( ( ALLERGY -> LINE_CNT >1 ) ) "{POS/110/220}" , "{b}" ,  ALLERGY -> LINE_QUAL [2 ]-> LINE
ENDIF
,

IF ( ( ALLERGY -> LINE_CNT >2 ) ) "{CPI/10}" , "{b}" , " ..." ,  ROW +1 , "{POS/160/240}" , "{b}" ,
"* See patient chart for additional allergy information *" ,  ROW +1
ENDIF
,
"{CPI/10}{POS/20/255}{BOX/75/2}" ,
 ROW +1 ,
"{CPI/8}{POS/24/260}{color/20/145}" ,
 ROW +1 ,
"{CPI/8}{POS/24/267}{color/20/145}" ,
 ROW +1 ,
"{CPI/8}{POS/24/274}{color/20/145}" ,
 ROW +1 ,
"{CPI/8}{POS/24/278}{color/20/145}" ,
 ROW +1 ,
"{CPI/12}{POS/30/295}{B}" ,
"ORDER DATE/TIME:" ,
"{CPI/12}{POS/30/307}" ,
"ORDERING MD:" ,
"{endb}" ,
 ROW +1 ,
"{CPI/12}{POS/30/319}" ,
"ORDER ENTERED BY:" ,
 ROW +1 ,
"{CPI/12}{POS/30/331}" ,
"ORDER NUMBER:" ,
 ROW +1 ,

IF ( ( SAVED_POS >0 ) ) "{CPI/10}{POS/1/90}" , " " , "{CPI/10}{b}" ,
 CALL CENTER ( ORDERS -> FACILITY , 1 , 190 ),  ROW +1 , "{CPI/8}{POS/30/270}{b}" , "ORDER:  " ,
 ORDERS -> QUAL [ SAVED_POS ]-> MNEMONIC ,  ROW +1 , "{CPI/10}{POS/210/295}" ,  ORDERS -> QUAL [
 SAVED_POS ]-> ORDER_DT ,  ROW +1 , "{CPI/12}{POS/210/307}" ,  ORDERS -> QUAL [ SAVED_POS ]->
 ORDER_DR ,  ROW +1 , "{CPI/12}{POS/210/319}" ,  ORDERS -> QUAL [ SAVED_POS ]-> ENTER_BY ,  ROW +1
, "{CPI/12}{POS/210/331}" ,
 CALL PRINT ( TRIM ( CNVTSTRING ( CNVTINT ( ORDERS -> QUAL [ SAVED_POS ]-> ORDER_ID )))),  ROW +1 ,
"{CPI/12}{POS/30/735}" , "ORDER    " , "{CPI/9}{B}" ,  ORDERS -> QUAL [ SAVED_POS ]-> MNEMONIC ,
 SAVED_POS =0
ENDIF

DETAIL

FOR (  VV  = 1  TO  VALUE ( ORD_CNT ) )

IF ( ( ORDERS -> QUAL [ VV ]-> DISPLAY_IND =1 ) )  GO_AHEAD_AND_PRINT =1 ,
IF ( ( GO_AHEAD_AND_PRINT =1 ) )  SPOOLOUT =1 ,
IF ( ( FIRST_PAGE ="N" ) ) BREAK
ENDIF
,
IF ( ( ORDERS -> QUAL [ VV ]-> ACTION_TYPE_CD = CANCEL_CD ) ) "{CPI/12}{POS/120/75}{B}" ,
 CANCEL_BANNER ,  ROW +1
ELSEIF ( ( ORDERS -> QUAL [ VV ]-> ACTION_TYPE_CD = DISCONT_CD ) ) "{CPI/12}{POS/120/75}{B}" ,
 DISCONT_BANNER ,  ROW +1
ELSEIF ( ( ORDERS -> QUAL [ VV ]-> ACTION_TYPE_CD = MODIFY_CD ) ) "{CPI/12}{POS/120/75}{B}" ,
 MODIFY_BANNER ,  ROW +1
ENDIF
,  FIRST_PAGE ="N" , "{CPI/10}{POS/1/90}" , " " , "{CPI/10}{b}" ,
 CALL CENTER ( ORDERS -> FACILITY , 1 , 190 ), "{CPI/8}{POS/30/270}{b}" , "ORDER:  " ,  ORDERS ->
 QUAL [ VV ]-> MNEMONIC ,  ROW +1 , "{CPI/10}{POS/210/295}" ,  ORDERS -> QUAL [ VV ]-> ORDER_DT ,
 ROW +1 , "{CPI/12}{POS/210/307}" ,  ORDERS -> QUAL [ VV ]-> ORDER_DR ,  ROW +1 ,
"{CPI/12}{POS/210/319}" ,  ORDERS -> QUAL [ VV ]-> ENTER_BY ,  ROW +1 , "{CPI/12}{POS/210/331}" ,
 CALL PRINT ( TRIM ( CNVTSTRING ( CNVTINT ( ORDERS -> QUAL [ VV ]-> ORDER_ID )))),  ROW +1 ,
"{CPI/12}{POS/30/735}" , "ORDER    " , "{CPI/9}{B}" ,  ORDERS -> QUAL [ VV ]-> MNEMONIC ,  XCOL =30
,  YCOL =363 ,
FOR (  FSUB  = 1  TO 31  )

FOR (  WW  = 1  TO  ORDERS -> QUAL [ VV ]-> D_CNT  )

IF (  (( ( ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> GROUP_SEQ = FSUB ) )  OR  (( FSUB =31 ) AND (
 ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> PRINT_IND =0 ) ))  )  ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]
-> PRINT_IND =1 ,
IF ( ( TEXTLEN ( TRIM ( ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> VALUE , 3 ))>0 ) ) "{CPI/13}" ,
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 CALL PRINT ( ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> LABEL_TEXT ), "  " ,  ROW +1 ,
IF ( ( TEXTLEN ( ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> LABEL_TEXT )>47 ) )  YCOL =( YCOL +12 )
ENDIF
,  XCOL =212 ,
IF ( ( ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> VALUE_CNT >1 ) )
FOR (  DSUB  = 1  TO  ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> VALUE_CNT  )

 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),"{b}" , ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> VALUE_QUAL [
 DSUB ]-> VALUE_LINE ,"{endb}" , ROW +1 , YCOL =( YCOL +12 ),
IF ( ( YCOL >600 ) AND ( DSUB < ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> VALUE_CNT ) )
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )), "**Continued on next page**" ,  SAVED_POS = VV , BREAK,
 XCOL =30 ,  YCOL =381 , "{CPI/13}" ,
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 CALL PRINT ( CONCAT ( ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> LABEL_TEXT , " cont. " )),  XCOL =
212 ,
IF ( ( TEXTLEN ( ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> LABEL_TEXT )>47 ) )  YCOL =( YCOL +12 )
ENDIF

ENDIF


ENDFOR

ELSE
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )), "{b}" ,  ORDERS -> QUAL [ VV ]-> D_QUAL [ WW ]-> VALUE ,
"{endb}" ,  ROW +1 ,  YCOL =( YCOL +12 )
ENDIF
,  XCOL =30
ENDIF

ENDIF
,
IF ( ( YCOL >600 ) AND ( WW < ORDERS -> QUAL [ VV ]-> D_CNT ) )  SAVED_POS = VV , BREAK,  YCOL =381
ENDIF


ENDFOR


ENDFOR

ENDIF
,
IF ( ( YCOL >600 ) )  SAVED_POS = VV , BREAK,  YCOL =381
ELSE   YCOL =( YCOL +12 )
ENDIF
,  XCOL =30 ,
IF ( ( ORDERS -> QUAL [ VV ]-> COMMENT_IND =1 ) AND ( ORDERS -> QUAL [ VV ]-> COM_LN_CNT >0 ) )
"{CPI/13}" ,
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )), "Comment " ,
IF ( ( ORDERS -> QUAL [ VV ]-> COM_LN_CNT >7 ) )  OCNT =7
ELSE   OCNT = ORDERS -> QUAL [ VV ]-> COM_LN_CNT
ENDIF
,  YCOL =( YCOL +16 ),
FOR (  COM_CNT  = 1  TO  OCNT  )

 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),"{b}" , ORDERS -> QUAL [ VV ]-> COM_LN_QUAL [ COM_CNT ]->
 COM_LINE ,"{endb}" , ROW +1 , YCOL =( YCOL +12 )

ENDFOR
,
IF ( ( ORDERS -> QUAL [ VV ]-> COM_LN_CNT >7 ) )
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )), "{cpi/13}" ,
"**** Please check chart for further comments ****"
ENDIF

ENDIF

ENDIF


ENDFOR

 WITH  NOCOUNTER , MAXROW =800 , MAXCOL =800 , DIO = POSTSCRIPT
SET  SPOOL  VALUE ( TRIM ( TEMPFILE1A )) VALUE ( TRIM ( REQUEST -> PRINTER_NAME )) WITH  DELETED
ENDIF


# EXIT_SCRIPT

SET  LAST_MOD  = "031"
END GO