/******************************************************************************/
; *****************************************************************************
; *                       MODIFICATION CONTROL LOG                            *
; *****************************************************************************
; *                                                                           *
; *Mod Date       Engineer             Comment                                *
; *--- ---------- -------------------- -------------------------------------- *
;  001 02/18/2010 Akcia Incorporated   Added check to skip Historical records *
;  002 04/21/2010 Akcia Incorporated   Added check for negative updt_id
;  003 11/05/2010 LSword               Reversed 00 and 01 for historic and
;                                      non-historic indicator on immun file.
;  004 02/23/2011 LSword               Sending client status of P for
;                                      deceased patients, A for all others.
;  005 10/25/2011 Rob Banks            Modify to use DB2
; *006 02/28/13 Akcia                Change mod 001 to lookup password in registry

;******************************************************************************
DROP PROGRAM   MAYO_MN_WIS_IMMUN_REG : DBA  GO
CREATE PROGRAM  MAYO_MN_WIS_IMMUN_REG : DBA
PROMPT "Lookback Days" = 1
 WITH  LOOKBACK
 
;;/*** START 005 ***/
;;;*********************************************************************
;;;*** If PROD / CERT then run as 2nd oracle instance to improve
;;;*** efficiency. Will auto Fail-over to Instance 1 if Instance 2 down.
;;;*********************************************************************
;;IF(CURDOMAIN = "PROD")
;;  FREE DEFINE oraclesystem
;;  DEFINE oraclesystem 'v500/fullmoon@mhprbrpt'
;;ELSEIF(CURDOMAIN = "MHPRD")
;;  FREE DEFINE oraclesystem
;;  DEFINE oraclesystem 'v500/fullmoon@mhprbrpt'
;;ELSEIF(CURDOMAIN="MHCRT")
;;  FREE DEFINE oraclesystem
;;  DEFINE oraclesystem 'v500/java4t2@mhcrtrpt'
;;ENDIF ;CURDOMAIN
;;;*** Write instance ccl ran in to the log file
;;;SET Iname = fillstring(10," ")
;;;SELECT INTO value("mayo_logfiles:mayo_instance2.log")
;;;  run_date = format(sysdate,";;q")
;;; ,Iname = substring(1,7,instance_name)
;;;FROM v$instance
;;;DETAIL
;;;  col  1 run_date
;;;  col +1 curprog
;;;  col +1 " *Instance="
;;;  col +1 Iname
;;;with nocounter
;;;   , format
;;;****************** End of INSTANCE 2 routine ************************
;;/*** END 005 ***/

/*** Start 006 - New Code ****/
;****************** Begin ORACLE INSTANCE 2 routine ****************
;*** If PROD / CERT then run as 2nd oracle instance to improve
;***   efficiency. Will auto Fail-over to Instance 1 if Instance 2 down.
;***   Then after at the end, set the program back to instance 1.
;******************************************************************************
 
;*** This section calls an O/S scritp that reads the current v500 password
;***   from the Millennium registry and stores it in a file named
;***   $CCLUSERDIR/dbinfo.dat
declare dcl_command = vc
declare dcl_size = i4
declare dcl_stat = i4
 
set dcl_command = "/mayo/procs/req_query.ksh"
set dcl_size = size(dcl_command)
set dcl_stat = 0
 
call dcl(dcl_command,dcl_size,dcl_stat)
 
;*** Next the password is read from the dbinfo.dat file to variable 'pass'.
FREE DEFINE RTL
DEFINE RTL IS "dbinfo.dat"
 
declare pass=vc
 
SELECT DISTINCT INTO "NL:"
  line = substring(1,30,R.LINE)   ; 9,9       10,9
FROM RTLT R
PLAN R
 
detail
 
if (line = "dbpw*")
  pass_in=substring(9,15,line)
  pass=triam(pass_in,3)
endif
 
with counter
 
;*** Now we are finished with the dbinfo.dat file and will delete it.
set dcl_command = ""
set dcl_command = "rm $CCLUSERDIR/dbinfo.dat"
set dcl_size = size(dcl_command)
set dcl_stat = 0
 
call dcl(dcl_command,dcl_size,dcl_stat)
 
declare system=vc
 
;*** This section redifines the OracleSystem variable pointing it to
;***   database instance 2 using the password read in above.
;*** This only applies to PRD and CRT, because they are the only domains
;***   that have multiple instance databases.
IF (curdomain = "MHPRD")
  Free define oraclesystem
  set system=build(concat('v500/', pass, '@mhprdrpt'))
  DEFINE oraclesystem system
ELSEIF (CURDOMAIN="MHCRT")
    FREE DEFINE oraclesystem
    set system=build(concat('v500/', pass, '@mhcrtrpt'))
    DEFINE oraclesystem system
ENDIF
/*** END 006 - New Code ***/
 
FREE RECORD IMMUNIZATIONS
 
RECORD  IMMUNIZATIONS  (
 1  QUAL_CNT  =  I4
 1  QUAL [*]
 2  EVENT_CD  =  F8 )
 
FREE RECORD CLIENT_DATA
 
RECORD  CLIENT_DATA  (
 1  QUAL_CNT  =  I4
 1  QUAL [*]
 2  RECORD_IDENTIFIER  =  VC
 2  CLIENT_STATUS  =  VC
 2  FIRST_NAME  =  VC
 2  MIDDLE_NAME  =  VC
 2  LAST_NAME  =  VC
 2  NAME_SUFFIX  =  VC
 2  BIRTH_DATE  =  VC
 2  DEATH_DATE  =  VC
 2  MOTHERS_FIRST_NAME  =  VC
 2  MOTHERS_MAIDEN_LAST_NAME  =  VC
 2  SEX  =  VC
 2  RACE  =  VC
 2  ETHNICITY  =  VC
 2  SSN  =  VC
 2  CONTACT_ALLOWED  =  VC
 2  CONSENT_TO_SHARE  =  VC
 2  CHART_NUMBER  =  VC
 2  RESPONSIBLE_PARTY_FIRST_NAME  =  VC
 2  RESPONSIBLE_PARTY_MIDDLE_NAME  =  VC
 2  RESPONSIBLE_PARTY_LAST_NAME  =  VC
 2  RESPONSIBLE_PARTY_RELATIONSHIP  =  VC
 2  STREET_ADDRESS  =  VC
 2  PO_BOX_ROUTE_LINE  =  VC
 2  OTHER_ADDRESS_LINE  =  VC
 2  CITY  =  VC
 2  STATE  =  VC
 2  ZIP  =  VC
 2  COUNTY  =  VC
 2  PHONE  =  VC
 2  SENDING_ORGANIZATION  =  VC
 2  SITE_NAME  =  VC
 2  PERSON_ID  =  F8
 2  ENCNTR_ID  =  F8
 2  IMMUNE_CNT  =  I4
 2  IMMUNE_DATA [*]
 3  VACCINE_GROUP  =  VC
 3  CPT_CODE  =  VC
 3  TRADE_NAME  =  VC
 3  VACCINATION_DATE  =  VC
 3  ADMINISTRATION_ROUTE  =  VC
 3  BODY_SITE  =  VC
 3  REACTION_CODE  =  VC
 3  MANUFACTURER  =  VC
 3  IMMUNIZATION_INFORMATION_SOURCE  =  VC
 3  LOT_NUMBER  =  VC
 3  PROVIDER_NAME  =  VC
 3  ADMINISTERED_BY_NAME  =  VC
 3  EVENT_ID  =  F8 )
 
DECLARE  CLIENT_FILE_NAME  =  VC  WITH  CONSTANT ( BUILD ("WIRclient_" ,  CURDATE , ".dat" ))
 
DECLARE  IMMZ_FILE_NAME  =  VC  WITH  CONSTANT ( BUILD ("WIRimmz_" ,  CURDATE , ".dat" ))
 
DECLARE  CURRENT_NAME_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  213 , "CURRENT" ))
 
DECLARE  CMRN_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  4 , "CMRN" ))
 
DECLARE  ENCNTR_MRN_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  319 , "MRN" ))
 
DECLARE  MRN_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  4 , "MRN" ))
 
DECLARE  SSN_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  4 , "SSN" ))
 
DECLARE  HOME_ADDY_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  212 , "HOME" ))
 
DECLARE  HOME_PHONE_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  43 , "HOME" ))
 
DECLARE  MOTHER_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  40 , "MOTHER" ))
 
DECLARE  MAIDEN_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  213 , "MAIDEN" ))
 
DECLARE  CONTRIB_SRC_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  73 ,
"MHSWIIRSRC" ))
 
DECLARE  IMMUNIZATION_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("DESCRIPTION" ,  93 ,
"Immunizations" ))
 
DECLARE  AUTH_CD  =  F8  WITH  PROTECTED , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  8 , "AUTH" ))
 
DECLARE  MODIFIED_CD  =  F8  WITH  PROTECTED , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  8 ,
"MODIFIED" ))
 
DECLARE  ALTERED_CD  =  F8  WITH  PROTECTED , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  8 ,
"ALTERED" ))
 
DECLARE  IDX  =  I4  WITH  NOCONSTANT ( 0 )
 
SELECT  INTO "nl:"
VESE.EVENT_CD
FROM ( V500_EVENT_SET_CANON  VCAN ),
( V500_EVENT_SET_CODE  VESC ),
( V500_EVENT_SET_EXPLODE  VESE )
 
WHERE (VCAN.PARENT_EVENT_SET_CD= IMMUNIZATION_CD ) AND (VESC.EVENT_SET_CD=VCAN.EVENT_SET_CD) AND (
VESE.EVENT_SET_CD=VESC.EVENT_SET_CD)
 
HEAD REPORT
 CNT = 0
DETAIL
 CNT =( CNT + 1 ),
 
IF ( ( MOD ( CNT ,  25 )= 1 ) )  STAT = ALTERLIST ( IMMUNIZATIONS -> QUAL , ( CNT + 24 ))
ENDIF
,
 IMMUNIZATIONS -> QUAL [ CNT ]-> EVENT_CD =VESE.EVENT_CD
FOOT REPORT
 STAT = ALTERLIST ( IMMUNIZATIONS -> QUAL ,  CNT ),
 IMMUNIZATIONS -> QUAL_CNT = CNT
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
FROM ( CLINICAL_EVENT  CE ),
( PRSNL  P ),
( CODE_VALUE_OUTBOUND  CVO )
 PLAN ( CE
WHERE (CE.CLINSIG_UPDT_DT_TM
 BETWEEN  CNVTDATETIME ( DATETIMEFIND ( CNVTDATETIME (( CURDATE - $LOOKBACK ),  0 ), "D" , "B" , "B" ))
 AND  CNVTDATETIME ( DATETIMEFIND ( CNVTDATETIME (( CURDATE -  1 ),  0 ), "D" , "E" , "E" )))
 AND  EXPAND ( IDX ,  1 ,  IMMUNIZATIONS -> QUAL_CNT , CE.EVENT_CD,
 IMMUNIZATIONS -> QUAL [ IDX ]-> EVENT_CD )
 AND (CE.VALID_UNTIL_DT_TM= CNVTDATETIME ("31-DEC-2100" ))
 AND (CE.PUBLISH_FLAG= 1 )
 AND  ce.updt_id != -10024358.08   ;exclude historically loaded
 and  ((CE.RESULT_STATUS_CD+ 0 ) IN ( AUTH_CD ,
 MODIFIED_CD ,
 ALTERED_CD )))
 AND ( P
WHERE (P.PERSON_ID=CE.PERFORMED_PRSNL_ID) AND (P.ACTIVE_IND= 1 ) AND (P.BEG_EFFECTIVE_DT_TM<=
 CNVTDATETIME ( SYSDATE )) AND (P.END_EFFECTIVE_DT_TM> CNVTDATETIME ( SYSDATE )))
 AND ( CVO
WHERE (CVO.CODE_VALUE=CE.EVENT_CD) AND (CVO.CONTRIBUTOR_SOURCE_CD= CONTRIB_SRC_CD ) AND (
CVO.ALIAS_TYPE_MEANING=" " ) AND ((CVO.CODE_SET+ 0 )= 72 ))
 
ORDER BY CE.ENCNTR_ID
 
HEAD REPORT
 PRSN_CNT = 0
HEAD CE.ENCNTR_ID
 PRSN_CNT =( PRSN_CNT + 1 ),
IF ( ( MOD ( PRSN_CNT ,  25 )= 1 ) )  STAT = ALTERLIST ( CLIENT_DATA -> QUAL , ( 24 + PRSN_CNT ))
ENDIF
 , IMMUN_CNT = 0 , CLIENT_DATA -> QUAL [ PRSN_CNT ]-> PERSON_ID =CE.PERSON_ID
 , CLIENT_DATA -> QUAL [ PRSN_CNT ]-> ENCNTR_ID =CE.ENCNTR_ID
 , CLIENT_DATA -> QUAL [ PRSN_CNT ]-> CONTACT_ALLOWED ="02"
 , CLIENT_DATA -> QUAL [ PRSN_CNT ]-> CONSENT_TO_SHARE ="Y"
; , CLIENT_DATA -> QUAL [ PRSN_CNT ]-> CLIENT_STATUS ="A"   L.Sword
DETAIL
 IMMUN_CNT =( IMMUN_CNT + 1 ),
 
IF ( ( MOD ( IMMUN_CNT ,  5 )= 1 ) )  STAT = ALTERLIST ( CLIENT_DATA -> QUAL [ PRSN_CNT ]->
 IMMUNE_DATA , ( 4 + IMMUN_CNT ))
ENDIF
,
 
IF ( ( CNVTREAL (CVO.ALIAS)> 0.00 ) )  CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA [ IMMUN_CNT ]
-> CPT_CODE =CVO.ALIAS
ELSE   CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA [ IMMUN_CNT ]-> VACCINE_GROUP =CVO.ALIAS
ENDIF
,
 CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA [ IMMUN_CNT ]-> EVENT_ID =CE.EVENT_ID,
 
CASE ( CE.SOURCE_CD )
 OF  0 :  CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA [ IMMUN_CNT ]->
 IMMUNIZATION_INFORMATION_SOURCE ="00" ,										;LSword
 CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA [ IMMUN_CNT ]-> ADMINISTERED_BY_NAME =
P.NAME_FULL_FORMATTED
 ELSE  CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA [ IMMUN_CNT ]->
 IMMUNIZATION_INFORMATION_SOURCE ="01" , 										;LSword
 CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA [ IMMUN_CNT ]-> ADMINISTERED_BY_NAME =" "
 ENDCASE
,
 CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA [ IMMUN_CNT ]-> VACCINATION_DATE = FORMAT (
CE.EVENT_END_DT_TM, "mmddyyyy;;d" )
FOOT  CE.ENCNTR_ID
 STAT = ALTERLIST ( CLIENT_DATA -> QUAL [ PRSN_CNT ]-> IMMUNE_DATA ,  IMMUN_CNT ), CLIENT_DATA ->
 QUAL [ PRSN_CNT ]-> IMMUNE_CNT = IMMUN_CNT
FOOT REPORT
 STAT = ALTERLIST ( CLIENT_DATA -> QUAL ,  PRSN_CNT ),
 CLIENT_DATA -> QUAL_CNT = PRSN_CNT
 WITH  NOCOUNTER
 
IF ( ( CURQUAL = 0 ) )  GO TO  EXIT_SCRIPT
ENDIF
 
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( CLIENT_DATA -> QUAL_CNT )),
( PERSON  P ),
( PERSON_NAME  PN ),
( CODE_VALUE_OUTBOUND  CVO ),
( PERSON_ALIAS  PA )
 PLAN ( D )
 AND ( P
WHERE (P.PERSON_ID= CLIENT_DATA -> QUAL [D.SEQ]-> PERSON_ID ) AND (P.ACTIVE_IND= 1 ) AND (
P.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( SYSDATE )) AND (P.END_EFFECTIVE_DT_TM> CNVTDATETIME (
 SYSDATE )))
 AND ( CVO
WHERE (CVO.CONTRIBUTOR_SOURCE_CD= CONTRIB_SRC_CD ) AND (CVO.ALIAS_TYPE_MEANING=" " ) AND  (( ((
CVO.CODE_SET+ 0 )= 57 ) AND (CVO.CODE_VALUE=P.SEX_CD) )  OR  ( (( ((CVO.CODE_SET+ 0 )= 282 ) AND (
CVO.CODE_VALUE=P.RACE_CD) )  OR  (((CVO.CODE_SET+ 0 )= 27 ) AND (CVO.CODE_VALUE=P.ETHNIC_GRP_CD) ))
 )) )
 AND ( PA
WHERE (PA.PERSON_ID=P.PERSON_ID) AND (PA.ACTIVE_IND= 1 ) AND (PA.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME
( SYSDATE )) AND (PA.END_EFFECTIVE_DT_TM> CNVTDATETIME ( SYSDATE )) AND (PA.PERSON_ALIAS_TYPE_CD
 IN ( CMRN_CD ,
 SSN_CD ,
 MRN_CD )))
 AND ( PN
WHERE (PN.PERSON_ID= OUTERJOIN (P.PERSON_ID)) AND (PN.ACTIVE_IND= OUTERJOIN ( 1 )) AND (
PN.NAME_TYPE_CD= OUTERJOIN ( CURRENT_NAME_CD )) AND (PN.BEG_EFFECTIVE_DT_TM<= OUTERJOIN (
 CNVTDATETIME ( SYSDATE ))) AND (PN.END_EFFECTIVE_DT_TM> OUTERJOIN ( CNVTDATETIME ( SYSDATE ))))
 
ORDER BY D.SEQ,
PA.PERSON_ALIAS_TYPE_CD
 
HEAD D.SEQ
 
IF ( (PN.NAME_FIRST>" " ) )  CLIENT_DATA -> QUAL [D.SEQ]-> FIRST_NAME =PN.NAME_FIRST
ELSE   CLIENT_DATA -> QUAL [D.SEQ]-> FIRST_NAME =P.NAME_FIRST
ENDIF
,
IF ( (PN.NAME_MIDDLE>" " ) )  CLIENT_DATA -> QUAL [D.SEQ]-> MIDDLE_NAME =PN.NAME_MIDDLE
ELSE   CLIENT_DATA -> QUAL [D.SEQ]-> MIDDLE_NAME =P.NAME_MIDDLE
ENDIF
,
IF ( (PN.NAME_LAST>" " ) )  CLIENT_DATA -> QUAL [D.SEQ]-> LAST_NAME =PN.NAME_LAST
ELSE   CLIENT_DATA -> QUAL [D.SEQ]-> LAST_NAME =P.NAME_LAST
ENDIF
 
,                                                                      ;added 2/2011, L.Sword
IF ((P.DECEASED_DT_TM > CNVTDATETIME ("01-JAN-1900")))  CLIENT_DATA -> QUAL [D.SEQ]-> CLIENT_STATUS ="P"
ELSE   CLIENT_DATA -> QUAL [D.SEQ]-> CLIENT_STATUS ="A"
ENDIF
 
 
, CLIENT_DATA -> QUAL [D.SEQ]-> NAME_SUFFIX =PN.NAME_SUFFIX, CLIENT_DATA -> QUAL [D.SEQ]->
 BIRTH_DATE = FORMAT (P.BIRTH_DT_TM, "mmddyyyy;;d" ), CLIENT_DATA -> QUAL [D.SEQ]-> DEATH_DATE =
 FORMAT (P.DECEASED_DT_TM, "mmddyyyy;;d" ), FORMATTED_SSN = FILLSTRING ( 20 , " " )
DETAIL
 
CASE ( CVO.CODE_VALUE )
 OF P.SEX_CD:  CLIENT_DATA -> QUAL [D.SEQ]-> SEX =CVO.ALIAS
 OF P.RACE_CD:  CLIENT_DATA -> QUAL [D.SEQ]-> RACE =CVO.ALIAS
 OF P.ETHNIC_GRP_CD:  CLIENT_DATA -> QUAL [D.SEQ]-> ETHNICITY =CVO.ALIAS
 ENDCASE
,
 
CASE ( PA.PERSON_ALIAS_TYPE_CD )
 OF  CMRN_CD :  CLIENT_DATA -> QUAL [D.SEQ]-> RECORD_IDENTIFIER = CONCAT ("CMRN" , PA.ALIAS)
 OF  SSN_CD :  FORMATTED_SSN = CNVTALPHANUM ( TRIM (PA.ALIAS)),
 
CASE (  SIZE ( TRIM ( FORMATTED_SSN ,  1 )) )
 OF  1 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = CONCAT ("00000000" ,  FORMATTED_SSN )
 OF  2 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = CONCAT ("0000000" ,  FORMATTED_SSN )
 OF  3 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = CONCAT ("000000" ,  FORMATTED_SSN )
 OF  4 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = CONCAT ("00000" ,  FORMATTED_SSN )
 OF  5 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = CONCAT ("0000" ,  FORMATTED_SSN )
 OF  6 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = CONCAT ("000" ,  FORMATTED_SSN )
 OF  7 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = CONCAT ("00" ,  FORMATTED_SSN )
 OF  8 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = CONCAT ("0" ,  FORMATTED_SSN )
 OF  9 :  CLIENT_DATA -> QUAL [D.SEQ]-> SSN = FORMATTED_SSN
 ENDCASE
 
 ENDCASE
 
FOOT  P.PERSON_ID
 NULL
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( CLIENT_DATA -> QUAL_CNT )),
( PHONE  P ),
( ADDRESS  A ),
( CODE_VALUE_OUTBOUND  CVO )
 PLAN ( D )
 AND ( P
WHERE (P.PARENT_ENTITY_ID= CLIENT_DATA -> QUAL [D.SEQ]-> PERSON_ID ) AND (P.PARENT_ENTITY_NAME=
"PERSON" ) AND ((P.PHONE_TYPE_CD+ 0 )= HOME_PHONE_CD ))
 AND ( A
WHERE (A.PARENT_ENTITY_ID= CLIENT_DATA -> QUAL [D.SEQ]-> PERSON_ID ) AND (A.PARENT_ENTITY_NAME=
"PERSON" ) AND ((A.ADDRESS_TYPE_CD+ 0 )= HOME_ADDY_CD ))
 AND ( CVO
WHERE (CVO.CODE_VALUE= OUTERJOIN (A.COUNTY_CD)) AND (CVO.CONTRIBUTOR_SOURCE_CD= OUTERJOIN (
 CONTRIB_SRC_CD )) AND (CVO.ALIAS_TYPE_MEANING= OUTERJOIN (" " )) AND ((CVO.CODE_SET+ 0 )=
 OUTERJOIN ( 74 )))
 
ORDER BY P.PHONE_ID
 
HEAD P.PHONE_ID
 CLIENT_DATA -> QUAL [D.SEQ]-> PHONE =P.PHONE_NUM_KEY
HEAD A.ADDRESS_ID
 CLIENT_DATA -> QUAL [D.SEQ]-> STREET_ADDRESS =A.STREET_ADDR, CLIENT_DATA -> QUAL [D.SEQ]->
 PO_BOX_ROUTE_LINE =A.STREET_ADDR2, CLIENT_DATA -> QUAL [D.SEQ]-> OTHER_ADDRESS_LINE =A.STREET_ADDR3
, CLIENT_DATA -> QUAL [D.SEQ]-> CITY =A.CITY, CLIENT_DATA -> QUAL [D.SEQ]-> STATE =A.STATE,
 CLIENT_DATA -> QUAL [D.SEQ]-> COUNTY =CVO.ALIAS, CLIENT_DATA -> QUAL [D.SEQ]-> ZIP =A.ZIPCODE_KEY
FOOT  A.ADDRESS_ID
 NULL
FOOT  P.PHONE_ID
 NULL
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
 SITE_DISP = UAR_GET_CODE_DISPLAY (E.LOC_FACILITY_CD)
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( CLIENT_DATA -> QUAL_CNT )),
( ENCOUNTER  E ),
( ENCNTR_ALIAS  EA ),
( CODE_VALUE_OUTBOUND  CVO )
 PLAN ( D )
 AND ( E
WHERE (E.ENCNTR_ID= CLIENT_DATA -> QUAL [D.SEQ]-> ENCNTR_ID ) AND (E.ACTIVE_IND= 1 ))
 AND ( EA
WHERE (EA.ENCNTR_ID= OUTERJOIN (E.ENCNTR_ID)) AND (EA.ACTIVE_IND= OUTERJOIN ( 1 )) AND (
EA.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( ENCNTR_MRN_CD )))
 AND ( CVO
WHERE (CVO.CODE_VALUE= OUTERJOIN (E.LOC_FACILITY_CD)) AND (CVO.CONTRIBUTOR_SOURCE_CD= OUTERJOIN (
 CONTRIB_SRC_CD )) AND (CVO.ALIAS_TYPE_MEANING= OUTERJOIN ("FACILITY" )) AND ((CVO.CODE_SET+ 0 )=
 OUTERJOIN ( 220 )))
 
 
DETAIL
 CLIENT_DATA -> QUAL [D.SEQ]-> SENDING_ORGANIZATION = NOTRIM ( SUBSTRING ( 1 ,  5 , CVO.ALIAS)),
 CLIENT_DATA -> QUAL [D.SEQ]-> SITE_NAME = SITE_DISP ,
 CLIENT_DATA -> QUAL [D.SEQ]-> CHART_NUMBER =EA.ALIAS,
 
IF ( ( CLIENT_DATA -> QUAL [D.SEQ]-> RECORD_IDENTIFIER =" " ) )
IF ( (EA.ALIAS=" " ) )  CLIENT_DATA -> QUAL [D.SEQ]-> RECORD_IDENTIFIER = CONCAT ("UN" ,
 CNVTSTRING ( CLIENT_DATA -> QUAL [D.SEQ]-> ENCNTR_ID ))
ELSE   CLIENT_DATA -> QUAL [D.SEQ]-> RECORD_IDENTIFIER = CONCAT ("LM" , EA.ALIAS)
ENDIF
 
ENDIF
 
 WITH  NOHEADING , NOCOUNTER
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( CLIENT_DATA -> QUAL_CNT )),
( PERSON_PERSON_RELTN  PPR ),
( PERSON_NAME  PN ),
( PERSON  P )
 PLAN ( D )
 AND ( PPR
WHERE (PPR.PERSON_ID= CLIENT_DATA -> QUAL [D.SEQ]-> PERSON_ID ) AND (PPR.PERSON_RELTN_CD= MOTHER_CD
) AND (PPR.ACTIVE_IND= 1 ) AND (PPR.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( SYSDATE )) AND (
PPR.END_EFFECTIVE_DT_TM> CNVTDATETIME ( SYSDATE )))
 AND ( PN
WHERE (PN.PERSON_ID=PPR.RELATED_PERSON_ID) AND (PN.ACTIVE_IND= 1 ) AND (PN.NAME_TYPE_CD= MAIDEN_CD )
 AND (PN.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( SYSDATE )) AND (PN.END_EFFECTIVE_DT_TM> CNVTDATETIME (
 SYSDATE )))
 AND ( P
WHERE (P.PERSON_ID=PN.PERSON_ID) AND (P.PERSON_ID= 1 ) AND (P.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME (
 SYSDATE )) AND (P.END_EFFECTIVE_DT_TM> CNVTDATETIME ( SYSDATE )))
 
 
DETAIL
 CLIENT_DATA -> QUAL [D.SEQ]-> MOTHERS_MAIDEN_LAST_NAME =PN.NAME_LAST,
 
IF ( (PN.NAME_FIRST>" " ) )  CLIENT_DATA -> QUAL [D.SEQ]-> MOTHERS_FIRST_NAME =PN.NAME_FIRST
ELSE   CLIENT_DATA -> QUAL [D.SEQ]-> MOTHERS_FIRST_NAME =P.NAME_FIRST
ENDIF
 
 WITH  NOCOUNTER , NOHEADING
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( CLIENT_DATA -> QUAL_CNT )),
( DUMMYT  D2  WITH  SEQ = 1 ),
( CE_MED_RESULT  CMR ),
( CODE_VALUE_OUTBOUND  CVO )
 PLAN ( D
WHERE  MAXREC ( D2 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_CNT ))
 AND ( D2 )
 AND ( CMR
WHERE (CMR.EVENT_ID= CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]-> EVENT_ID ))
 AND ( CVO
WHERE (CVO.CONTRIBUTOR_SOURCE_CD= CONTRIB_SRC_CD ) AND (CVO.ALIAS_TYPE_MEANING=" " ) AND  (( ((
CVO.CODE_SET+ 0 )= 4001 ) AND (CVO.CODE_VALUE=CMR.ADMIN_ROUTE_CD) )  OR  ( (( ((CVO.CODE_SET+ 0 )=
 97 ) AND (CVO.CODE_VALUE=CMR.ADMIN_SITE_CD) )  OR  (((CVO.CODE_SET+ 0 )= 221 ) AND (CVO.CODE_VALUE=
CMR.SUBSTANCE_MANUFACTURER_CD) ))  )) )
 
 
HEAD CMR.EVENT_ID
 CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]-> LOT_NUMBER =CMR.SUBSTANCE_LOT_NUMBER
DETAIL
 
CASE ( CVO.CODE_VALUE )
 OF CMR.ADMIN_ROUTE_CD:  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]-> ADMINISTRATION_ROUTE =
CVO.ALIAS
 OF CMR.ADMIN_SITE_CD:  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]-> BODY_SITE =CVO.ALIAS
 OF CMR.SUBSTANCE_MANUFACTURER_CD:  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 MANUFACTURER =CVO.ALIAS
 ENDCASE
 
FOOT  CMR.EVENT_ID
 NULL
 WITH  NOCOUNTER
 
SELECT  INTO  VALUE ( CLIENT_FILE_NAME )
 RECORD_ID = SUBSTRING ( 1 ,  24 ,  CLIENT_DATA -> QUAL [D.SEQ]-> RECORD_IDENTIFIER ),
 CLIENT_STATUS = SUBSTRING ( 1 ,  1 ,  CLIENT_DATA -> QUAL [D.SEQ]-> CLIENT_STATUS ),
 FIRST_NAME = SUBSTRING ( 1 ,  25 ,  CLIENT_DATA -> QUAL [D.SEQ]-> FIRST_NAME ),
 MIDDLE_NAME = SUBSTRING ( 1 ,  25 ,  CLIENT_DATA -> QUAL [D.SEQ]-> MIDDLE_NAME ),
 LAST_NAME = SUBSTRING ( 1 ,  35 ,  CLIENT_DATA -> QUAL [D.SEQ]-> LAST_NAME ),
 NAME_SUFFIX = SUBSTRING ( 1 ,  10 ,  CLIENT_DATA -> QUAL [D.SEQ]-> NAME_SUFFIX ),
 BIRTH_DATE = SUBSTRING ( 1 ,  8 ,  CLIENT_DATA -> QUAL [D.SEQ]-> BIRTH_DATE ),
 DEATH_DATE = SUBSTRING ( 1 ,  8 ,  CLIENT_DATA -> QUAL [D.SEQ]-> DEATH_DATE ),
 MOTHERS_FIRST_NAME = SUBSTRING ( 1 ,  25 ,  CLIENT_DATA -> QUAL [D.SEQ]-> MOTHERS_FIRST_NAME ),
 MOTHERS_MAIDEN_LAST_NAME = SUBSTRING ( 1 ,  35 ,  CLIENT_DATA -> QUAL [D.SEQ]->
 MOTHERS_MAIDEN_LAST_NAME ),
 SEX = SUBSTRING ( 1 ,  1 ,  CLIENT_DATA -> QUAL [D.SEQ]-> SEX ),
 RACE = SUBSTRING ( 1 ,  1 ,  CLIENT_DATA -> QUAL [D.SEQ]-> RACE ),
 ETHNICITY = SUBSTRING ( 1 ,  2 ,  CLIENT_DATA -> QUAL [D.SEQ]-> ETHNICITY ),
 SSN = SUBSTRING ( 1 ,  9 ,  CLIENT_DATA -> QUAL [D.SEQ]-> SSN ),
 CONTACT_ALLOWED = SUBSTRING ( 1 ,  2 ,  CLIENT_DATA -> QUAL [D.SEQ]-> CONTACT_ALLOWED ),
 CONSENT_TO_SHARE = SUBSTRING ( 1 ,  1 ,  CLIENT_DATA -> QUAL [D.SEQ]-> CONSENT_TO_SHARE ),
 CHART_NUMBER = SUBSTRING ( 1 ,  20 ,  CLIENT_DATA -> QUAL [D.SEQ]-> CHART_NUMBER ),
 RESPONSIBLE_PARTY_FN = SUBSTRING ( 1 ,  25 ,  CLIENT_DATA -> QUAL [D.SEQ]->
 RESPONSIBLE_PARTY_FIRST_NAME ),
 RESPONSIBLE_PARTY_MN = SUBSTRING ( 1 ,  25 ,  CLIENT_DATA -> QUAL [D.SEQ]->
 RESPONSIBLE_PARTY_MIDDLE_NAME ),
 RESPONSIBLE_PARTY_LN = SUBSTRING ( 1 ,  35 ,  CLIENT_DATA -> QUAL [D.SEQ]->
 RESPONSIBLE_PARTY_LAST_NAME ),
 RESPONSIBLE_PARTY_RELTN = SUBSTRING ( 1 ,  2 ,  CLIENT_DATA -> QUAL [D.SEQ]->
 RESPONSIBLE_PARTY_RELATIONSHIP ),
 STREET_ADDY = SUBSTRING ( 1 ,  55 ,  CLIENT_DATA -> QUAL [D.SEQ]-> STREET_ADDRESS ),
 ADDY_LINE1 = SUBSTRING ( 1 ,  55 ,  CLIENT_DATA -> QUAL [D.SEQ]-> PO_BOX_ROUTE_LINE ),
 ADDY_LINE2 = SUBSTRING ( 1 ,  55 ,  CLIENT_DATA -> QUAL [D.SEQ]-> OTHER_ADDRESS_LINE ),
 CITY = SUBSTRING ( 1 ,  52 ,  CLIENT_DATA -> QUAL [D.SEQ]-> CITY ),
 STATE = SUBSTRING ( 1 ,  2 ,  CLIENT_DATA -> QUAL [D.SEQ]-> STATE ),
 ZIP = SUBSTRING ( 1 ,  9 ,  CLIENT_DATA -> QUAL [D.SEQ]-> ZIP ),
 COUNTY = SUBSTRING ( 1 ,  5 ,  CLIENT_DATA -> QUAL [D.SEQ]-> COUNTY ),
 PHONE = SUBSTRING ( 1 ,  17 ,  CLIENT_DATA -> QUAL [D.SEQ]-> PHONE ),
 SENDING_ORG = SUBSTRING ( 1 ,  5 ,  CLIENT_DATA -> QUAL [D.SEQ]-> SENDING_ORGANIZATION ),
 CHAR ( 13 )
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( SIZE ( CLIENT_DATA -> QUAL ,  5 )))
 PLAN ( D
WHERE (D.SEQ> 0 ) AND ( CLIENT_DATA -> QUAL [D.SEQ]-> SENDING_ORGANIZATION >" " ) AND ( CNVTUPPER (
 CLIENT_DATA -> QUAL [D.SEQ]-> LAST_NAME )!="TESTPATIENT" ))
 
ORDER BY  CLIENT_DATA -> QUAL [D.SEQ]-> RECORD_IDENTIFIER
 WITH  FORMAT = UNDEFINED , NOHEADING , MAXROW = 1 , NULLREPORT , SEPARATOR ="" , MAXCOL = 600
 
SELECT  INTO  VALUE ( IMMZ_FILE_NAME )
 RECORD_IDENTIFER = SUBSTRING ( 1 ,  24 ,  CLIENT_DATA -> QUAL [D.SEQ]-> RECORD_IDENTIFIER ),
 VACCINE_GROUP = SUBSTRING ( 1 ,  16 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 VACCINE_GROUP ),
 CPT_CD = SUBSTRING ( 1 ,  5 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]-> CPT_CODE ),
 TRADE_NAME = SUBSTRING ( 1 ,  24 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 TRADE_NAME ),
 VACCINATION_DATE = SUBSTRING ( 1 ,  8 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 VACCINATION_DATE ),
 ADMINISTRATION_ROUTE = SUBSTRING ( 1 ,  2 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 ADMINISTRATION_ROUTE ),
 BODY_SITE = SUBSTRING ( 1 ,  4 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]-> BODY_SITE ),
 REACTION_CODE = SUBSTRING ( 1 ,  8 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 REACTION_CODE ),
 MANUFACTURE = SUBSTRING ( 1 ,  4 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 MANUFACTURER ),
 SOURCE = SUBSTRING ( 1 ,  2 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 IMMUNIZATION_INFORMATION_SOURCE ),
 LOT_NUM = SUBSTRING ( 1 ,  30 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]-> LOT_NUMBER ),
 PROVIDER_NAME = SUBSTRING ( 1 ,  50 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 PROVIDER_NAME ),
 ADMIN_BY_NAME = SUBSTRING ( 1 ,  50 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_DATA [D2.SEQ]->
 ADMINISTERED_BY_NAME ),
 SITE_NAME = SUBSTRING ( 1 ,  30 ,  CLIENT_DATA -> QUAL [D.SEQ]-> SITE_NAME ),
 SENDING_ORG = SUBSTRING ( 1 ,  5 ,  CLIENT_DATA -> QUAL [D.SEQ]-> SENDING_ORGANIZATION ),
 CHAR ( 13 )
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( CLIENT_DATA -> QUAL_CNT )),
( DUMMYT  D2  WITH  SEQ = 1 )
 PLAN ( D
WHERE  MAXREC ( D2 ,  CLIENT_DATA -> QUAL [D.SEQ]-> IMMUNE_CNT ) AND ( CLIENT_DATA -> QUAL [D.SEQ]->
 SENDING_ORGANIZATION >" " )
 AND ( CNVTUPPER ( CLIENT_DATA -> QUAL [D.SEQ]-> LAST_NAME )!="TESTPATIENT" ))
 AND ( D2 )
 
ORDER BY  CLIENT_DATA -> QUAL [D.SEQ]-> RECORD_IDENTIFIER
 WITH  FORMAT = UNDEFINED , NOHEADING , MAXROW = 1 , NULLREPORT , SEPARATOR ="" , MAXCOL = 300
 
# EXIT_SCRIPT
 
SET  LAST_MOD  = "010 - 06/15/09  - DM011252"
 
;;/*** START 005 ***/
;;;*** After report put back to instance 1
;;IF(CURDOMAIN = "PROD")
;;  FREE DEFINE oraclesystem
;;  DEFINE oraclesystem 'v500/fullmoon@mhprb1'
;;ELSEIF(CURDOMAIN = "MHPRD")
;;  FREE DEFINE oraclesystem
;;  DEFINE oraclesystem 'v500/fullmoon@mhprb1'
;;ELSEIF(CURDOMAIN="MHCRT")
;;  FREE DEFINE oraclesystem
;;  DEFINE oraclesystem 'v500/java4t2@mhcrt1'
;;ENDIF ;CURDOMAIN
;;/*** END 005 ***/

/****Start 006 - New Code ***/
;*** Restore the OracleSystem variable to its normal definition pointing
;***   to instance 1.
IF (curdomain = "MHPRD")
  Free define oraclesystem
  set system=build(concat('v500/', pass, '@mhprd1'))
  DEFINE oraclesystem system
 
ELSEIF (CURDOMAIN="MHCRT")
    FREE DEFINE oraclesystem
    set system=build(concat('v500/', pass, '@mhcrt1'))
    DEFINE oraclesystem system
 
ENDIF
 
/***END 006 - New Code ***/ 
 
END
GO
