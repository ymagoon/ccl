DROP PROGRAM   MAYO_MN_DIABETES_EXT : DBA  GO
CREATE PROGRAM  MAYO_MN_DIABETES_EXT : DBA
PROMPT  "Printer" = "MINE" ,
 "Lookback x days  " = 0 ,
 "Start Date" = "CURDATE" ,
 "End Date" = "CURDATE"
 WITH  OUTDEV , LOOKBACK , STARTDATE , ENDDATE
 
IF (  NOT ( VALIDATE ( REPLY ,  0 ) ) )
RECORD  REPLY  (
 1  ELAPSED_TIME  =  F8
 1  STATUS_DATA
 2  STATUS  =  C1
 2  SUBEVENTSTATUS [ 1 ]
 3  OPERATIONNAME  =  C25
 3  OPERATIONSTATUS  =  C1
 3  TARGETOBJECTNAME  =  C25
 3  TARGETOBJECTVALUE  =  VC )
ENDIF
 
 
SET  REPLY -> STATUS_DATA -> STATUS  =  "F"
 
DECLARE  STARTDATE  =  DQ8  WITH  PROTECT , NOCONSTANT ( CNVTDATETIME ( CNVTDATE2 ( $STARTDATE ,
 "dd-mmm-yyyy" ),  000000 ))
 
DECLARE  ENDDATE  =  DQ8  WITH  PROTECT , NOCONSTANT ( CNVTDATETIME ( CNVTDATE2 ( $ENDDATE ,
 "dd-mmm-yyyy" ),  235959 ))
 
IF ( ( $LOOKBACK > 0 ) )
SET  STARTDATE  =  CNVTDATETIME (( CURDATE - $LOOKBACK ),  000000 )
SET  ENDDATE  =  CNVTDATETIME ( CURDATE ,  235959 )
ENDIF
 
 
;DECLARE  FILE1NAME  =  VC  WITH  PROTECT , CONSTANT ( CONCAT ( "cer_print:Pat_Demog_Diab_" ,
DECLARE  FILE1NAME  =  VC  WITH  PROTECT , CONSTANT ( CONCAT ( "mhs_ops:Pat_Demog_Diab_" ,
 FORMAT ( STARTDATE ,  "mmddyy;;d" ),  ".txt" ))
 
;DECLARE  FILE3NAME  =  VC  WITH  PROTECT , CONSTANT ( CONCAT ( "cer_print:Clinical_Services_" ,
DECLARE  FILE3NAME  =  VC  WITH  PROTECT , CONSTANT ( CONCAT ( "mhs_ops:Clinical_Services_" ,
 FORMAT ( STARTDATE ,  "mmddyy;;d" ),  ".txt" ))
 
DECLARE  FILE5NAME  =  VC  WITH  PROTECT , CONSTANT ( CONCAT ( "mhs_ops:Done_Elsewhere_Diab_" ,
;DECLARE  FILE5NAME  =  VC  WITH  PROTECT , CONSTANT ( CONCAT ( "cer_print:Done_Elsewhere_Diab_" ,
 FORMAT ( STARTDATE ,  "mmddyy;;d" ),  ".txt" ))
 
DECLARE  NUM  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
DECLARE  amb_depart_sum_cd =  F8  WITH  PROTECT, CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",72,"AMBULATORYDEPARTSUMMARY" )) ;se
 
DECLARE  MRN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  319 ,  "MRN" ))
 
DECLARE  FNBR_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  319 ,  "FIN NBR"
))
 
DECLARE  CMRN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  4 ,  "CMRN" ))
 
DECLARE  ERROR_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  8 ,  "INERROR" )
)
 
DECLARE  AUTH_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  8 ,  "AUTH" ))
 
DECLARE  MODIFIED_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  8 ,
 "MODIFIED" ))
 
DECLARE  CANCELED_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  12025 ,
 "CANCELED" ))
 
DECLARE  ORDERED_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  6004 ,
 "ORDERED" ))
 
DECLARE  INPROCESS_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  6004 ,
 "INPROCESS" ))
 
DECLARE  PENDING_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  6004 ,
 "PENDING REV" ))
 
DECLARE  LAB_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  6000 ,
 "GENERAL LAB" ))
 
DECLARE  GENLAB_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  106 ,  "GLB" ))
 
DECLARE  DISP_LINE  =  VC  WITH  PROTECT , NOCONSTANT ( " " )
 
DECLARE  LAST_DISP_LINE  =  VC  WITH  PROTECT , NOCONSTANT ( " " )
 
DECLARE  DIABETES_REPORT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,
 93 ,  "DIABETESREPORT" ))
 
DECLARE  CLINICALSERVICESFILE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY"
,  93 ,  "CLINICALSERVICESFILE" ))
 
DECLARE  LABFILE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,  93 ,
 "LABFILE" ))
 
DECLARE  ACTIVE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  48 ,  "ACTIVE"
))
 
DECLARE  LC_ACTIVE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  12030 ,
 "ACTIVE" ))
 
DECLARE  DATE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  53 ,  "DATE" ))
 
DECLARE  INBOXMSG_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  69 ,
 "INBOXMSG" ))
 
DECLARE  PHONEMSG_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  69 ,
 "PHONEMSG" ))
 
DECLARE  EULUTHERHOSP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,  220
,  "EULUTHERHOSP" ))
 
DECLARE  EUOAKRIDGEHOSP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,
 220 ,  "EUOAKRIDGEHOSP" ))
 
DECLARE  EUOAKRIDGECLIN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,
 220 ,  "EUOAKRIDGECLIN" ))
 
DECLARE  EUNWHOMECARE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,  220
,  "EUNWHOMECARE" ))
 
DECLARE  EUPAINCLINIC_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,  220
,  "EUPAINCLINIC" ))
 
DECLARE  EUNORTHLNDHOSP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,
 220 ,  "EUNORTHLNDHOSP" ))
 
DECLARE  EUNORTHLNDCLIN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,
 220 ,  "EUNORTHLNDCLIN" ))
 
DECLARE  EUCHIPVALHOSP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,  220
,  "EUCHIPVALHOSP" ))
 
DECLARE  EUCHIPVALCLIN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,  220
,  "EUCHIPVALCLIN" ))
 
DECLARE  EUMIDELFORTCL_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,  220
,  "EUMIDELFORTCL" ))
 
DECLARE  EULHBEHAVIORHLTH_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,
 220 ,  "EULHBEHAVIORHLTH" ))
 
DECLARE  EUMCBEHAVHLTH_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "DISPLAY_KEY" ,  220
,  "EUMCBEHAVHLTH" ))
 
DECLARE  PRIMARYCAREPHYSICIANHOSPITAL_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY (
 "DISPLAY_KEY" ,  333 ,  "PRIMARYCAREPHYSICIANHOSPITAL" ))
 
DECLARE  PRIMARYCAREPHYSICIANCLINIC_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY (
 "DISPLAY_KEY" ,  333 ,  "PRIMARYCAREPHYSICIANCLINIC" ))
 
DECLARE  ATTENDDOC_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  333 ,
 "ATTENDDOC" ))
 
DECLARE  PCP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  331 ,  "PCP" ))
 
DECLARE  NPI_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  320 ,  "NPI" ))
 
DECLARE  HOME_PHONE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  43 ,
 "HOME" ))
 
DECLARE  BUS_PHONE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  43 ,
 "BUSINESS" ))
 
DECLARE  CELL_PHONE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  43 ,
 "PAGER PERS" ))
 
DECLARE  HOME_ADDRESS_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  212 ,
 "HOME" ))
 
DECLARE  EMAIL_ADDRESS_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  212 ,
 "EMAIL" ))
 
DECLARE  ICD9_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  400 ,  "ICD9" ))
 
DECLARE  SNMCT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  400 ,  "SNMCT" )
)
 
DECLARE  MEDCONFRMDT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  356 ,
 "MEDCONFRMDT" ))
 
DECLARE  RSRCHCONDTRV_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  356 ,
 "RSRCHCONDTRV" ))
 
DECLARE  RSRCHCONSENT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ( "MEANING" ,  356 ,
 "RSRCHCONSENT" ))
 
FREE RECORD DREC
 
RECORD  DREC  (
 1  CNT  =  I2
 1  QUAL [*]
 2  ENCNTR_ID  =  F8
 2  PERSON_ID  =  F8
 2  MRN  =  VC
 2  CMRN  =  VC
 2  FNBR  =  VC
 2  ORG_ID  =  C2
 2  SITE_ID  =  C2
 2  LOCATION_ID  =  VC
 2  LOCATION_DISP  =  VC
 2  NAME  =  VC
 2  NAME_FIRST  =  VC
 2  NAME_LAST  =  VC
 2  DOB  =  VC
 2  AGE  =  VC
 2  SEX  =  C1
 2  NURSEUNIT  =  VC
 2  ROOM  =  VC
 2  BED  =  VC
 2  RB  =  VC
 2  ADMIT_DT  =  VC
 2  REG_DT_TM_TXT  =  VC
 2  TYPE  =  VC
 2  PROVIDER  =  VC
 2  PROVIDER_NPI_ALIAS  =  VC
 2  DIAG [ 3 ]
 3  SOURCE_VOCABULARY  =  VC
 3  SOURCE_IDENTIFIER  =  VC
 3  SOURCE_STRING  =  VC
 2  PROC_FILE_SEQ  =  I2
 2  PROCS [*]
 3  DATE_PERFORMED  =  VC
 3  NOMENCLATURE_ID_TXT  =  VC
 3  PROCEDURE  =  VC
 2  STREET_ADDR  =  VC
 2  STREET_ADDR2  =  VC
 2  CITY  =  VC
 2  STATE  =  VC
 2  ZIPCODE  =  VC
 2  EMAIL  =  VC
 2  HOME_PHONE  =  VC
 2  BUSINESS_PHONE  =  VC
 2  CELL_PHONE  =  VC
 2  RSRCHCONSENT  =  VC
 2  MEDCONFRMDT_DATE_TIME  =  VC
 2  RSRCHCONDTRV_DATE_TIME  =  VC
 2  CLIN_CNT  =  I2
 2  CLIN [*]
 3  EVENT_CD  =  F8
 3  RESULT  =  VC
 3  UNIT  =  VC
 3  TEST_NAME  =  VC
 3  TEST_NBR  =  VC
 3  NORMALCY  =  VC
 3  REF_RANGE  =  VC
 3  EVENT_END_DATETIME  =  VC
 2  ASADT  =  VC
 2  ASADT_unformatted = dq8  ;se
 2  FILE [ 7 ]
 3  DISPLAY_FLAG  =  I2
 3  FILE_DESC  =  VC
 3  EVENTSET_CNT  =  I2
 3  EVENTSET [*]
 4  EVENT_SET_NAME  =  VC
 4  EVENT_SET_CD  =  F8
 4  MAX_COLS  =  I2
 4  COL [*]
 5  COLUMN_NAME  =  VC
 5  COL_DISP  =  VC
 5  EVENT_CD  =  F8
 5  RESULT  =  VC
 5  UNIT  =  VC
 5  TEST_NAME  =  VC
 5  TEST_NBR  =  VC
 5  NORMALCY  =  VC
 5  REF_RANGE  =  VC
 5  EVENT_END_DATETIME  =  VC )
 
FREE RECORD EVENTS
 
RECORD  EVENTS  (
 1  FILE [ 7 ]
 2  FILE_DESC  =  VC
 2  EVENTSET_CNT  =  I2
 2  EVENTSET [*]
 3  EVENT_SET_NAME  =  VC
 3  EVENT_SET_CD  =  F8
 3  MAX_EVENTS  =  I2
 3  EVENTS [*]
 4  EVENT_DISP  =  VC
 4  EVENT_CD  =  F8 )
 
FREE RECORD CLIN_EVENTS
 
RECORD  CLIN_EVENTS  (
 1  SEQ [*]
 2  CODE_VALUE  =  F8
 2  COLUMN_NBR  =  I2
 2  COLUMN_NAME  =  VC )
 
FREE RECORD NOMEN_GRP
 
RECORD  NOMEN_GRP  (
 1  SEQ [*]
 2  SOURCE_IDENTIFIER  =  VC )
 
FREE RECORD DIABETES_PROCS
 
RECORD  DIABETES_PROCS  (
 1  SEQ [*]
 2  SOURCE_IDENTIFIER  =  VC )
 
SELECT  INTO  "nl:"
FROM ( NOMEN_CATEGORY  NC ),
( NOMEN_CAT_LIST  NCL ),
( NOMENCLATURE  N )
 PLAN ( NC
WHERE ( CNVTUPPER (NC.CATEGORY_NAME)= "DIABETES REPORT RESTRICTED FILE" ))
 AND ( NCL
WHERE (NC.NOMEN_CATEGORY_ID=NCL.PARENT_CATEGORY_ID))
 AND ( N
WHERE (NCL.NOMENCLATURE_ID=N.NOMENCLATURE_ID) AND (N.ACTIVE_IND= 1 ))
 
ORDER BY N.SOURCE_VOCABULARY_CD,
N.SOURCE_IDENTIFIER
 
HEAD REPORT
 CNT = 0
DETAIL
 CNT =( CNT + 1 ),
 
IF ( ( MOD ( CNT ,  10 )= 1 ) )  STAT = ALTERLIST ( NOMEN_GRP -> SEQ , ( CNT + 10 ))
ENDIF
,
 NOMEN_GRP -> SEQ [ CNT ]-> SOURCE_IDENTIFIER =N.SOURCE_IDENTIFIER
FOOT REPORT
 STAT = ALTERLIST ( NOMEN_GRP -> SEQ ,  CNT )
 WITH  NOCOUNTER
 
SELECT  INTO  "nl:"
ESC.EVENT_SET_COLLATING_SEQ,
CV.*
FROM ( V500_EVENT_SET_CANON  ESC ),
( V500_EVENT_SET_EXPLODE  ESE ),
( CODE_VALUE  CV )
 
WHERE (ESC.PARENT_EVENT_SET_CD= CLINICALSERVICESFILE_CD ) AND (ESC.EVENT_SET_CD=ESE.EVENT_SET_CD)
 AND (ESE.EVENT_CD=CV.CODE_VALUE) AND (CV.ACTIVE_IND= 1 )
ORDER BY ESC.EVENT_SET_COLLATING_SEQ,
CV.CODE_VALUE
 
HEAD REPORT
 CNT = 0 ,
 GRP_CNT = 0
HEAD ESC.EVENT_SET_COLLATING_SEQ
 GRP_CNT =ESC.EVENT_SET_COLLATING_SEQ, EVENT_GROUP = UAR_GET_CODE_DISPLAY (ESC.EVENT_SET_CD),
 EVENTS -> FILE [ 3 ]-> FILE_DESC = "CLINICAL SERVICES" , EVENTS -> FILE [ 3 ]-> EVENTSET_CNT =
ESC.EVENT_SET_COLLATING_SEQ, STAT = ALTERLIST ( EVENTS -> FILE [ 3 ]-> EVENTSET ,
ESC.EVENT_SET_COLLATING_SEQ), EVENTS -> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> EVENT_SET_NAME =
 EVENT_GROUP , EVENTS -> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> EVENT_SET_CD =ESC.EVENT_SET_CD,
 EVENT_CNT = 0
DETAIL
 CNT =( CNT + 1 ),
 EVENT_CNT =( EVENT_CNT + 1 ),
 EVENTS -> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> MAX_EVENTS = EVENT_CNT ,
 
IF ( ( MOD ( CNT ,  10 )= 1 ) )  STAT = ALTERLIST ( CLIN_EVENTS -> SEQ , ( CNT + 10 ))
ENDIF
,
 CLIN_EVENTS -> SEQ [ CNT ]-> CODE_VALUE =ESE.EVENT_CD,
 CLIN_EVENTS -> SEQ [ CNT ]-> COLUMN_NBR = GRP_CNT ,
 CLIN_EVENTS -> SEQ [ CNT ]-> COLUMN_NAME = EVENT_GROUP ,
 COL  10 ,
CV.DISPLAY "#####################################"
,
 ROW + 1 ,
 STAT = ALTERLIST ( EVENTS -> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> EVENTS ,  EVENT_CNT ),
 EVENTS -> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> EVENTS [ EVENT_CNT ]-> EVENT_CD =CV.CODE_VALUE,
 EVENTS -> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> EVENTS [ EVENT_CNT ]-> EVENT_DISP =CV.DISPLAY
FOOT REPORT
 STAT = ALTERLIST ( CLIN_EVENTS -> SEQ ,  CNT )
 WITH  NOCOUNTER
 
SELECT  INTO  "nl:"
FROM ( NOMEN_CATEGORY  NC ),
( NOMEN_CAT_LIST  NCL ),
( NOMENCLATURE  N )
 PLAN ( NC
WHERE ( CNVTUPPER (NC.CATEGORY_NAME)= "DIABETES PROCEDURES RESTRICTED FILE" ))
 AND ( NCL
WHERE (NC.NOMEN_CATEGORY_ID=NCL.PARENT_CATEGORY_ID))
 AND ( N
WHERE (NCL.NOMENCLATURE_ID=N.NOMENCLATURE_ID)) ;se AND (N.ACTIVE_IND= 1 ))
 
ORDER BY N.SOURCE_VOCABULARY_CD,
N.SOURCE_IDENTIFIER
 
HEAD REPORT
 CNT = 0
DETAIL
 CNT =( CNT + 1 ),
 
IF ( ( MOD ( CNT ,  10 )= 1 ) )  STAT = ALTERLIST ( DIABETES_PROCS -> SEQ , ( CNT + 10 ))
ENDIF
,
 DIABETES_PROCS -> SEQ [ CNT ]-> SOURCE_IDENTIFIER =N.SOURCE_IDENTIFIER
FOOT REPORT
 STAT = ALTERLIST ( DIABETES_PROCS -> SEQ ,  CNT )
 WITH  NOCOUNTER
 
SELECT  INTO  "nl:"
 SOURCE_TYPE = UAR_GET_CODE_DISPLAY (N.SOURCE_VOCABULARY_CD)
FROM ( PROBLEM  PROB ),
( NOMENCLATURE  N ),
( DUMMYT  D ),
( ENCOUNTER  E ),
( PERSON  P ),
( ENCNTR_ALIAS  EA ),
( PERSON_ALIAS  PA )
 PLAN ( PROB
WHERE (PROB.ACTIVE_STATUS_CD= ACTIVE_CD ) AND (PROB.LIFE_CYCLE_STATUS_CD= LC_ACTIVE_CD ))
 AND ( N
WHERE (PROB.NOMENCLATURE_ID=N.NOMENCLATURE_ID)
;se AND (N.ACTIVE_IND= 1 )
AND (N.SOURCE_VOCABULARY_CD
 IN ( ICD9_CD ,
 SNMCT_CD )))
 AND ( D
WHERE  ((  EXPAND ( NUM ,  1 ,  SIZE ( NOMEN_GRP -> SEQ ,  5 ), N.SOURCE_IDENTIFIER,  NOMEN_GRP ->
 SEQ [ NUM ]-> SOURCE_IDENTIFIER ) )  OR  ( (( ( CNVTREAL ( NULLVAL ( TRIM (N.SOURCE_IDENTIFIER,  3
),  "0.0" )) BETWEEN  249.0  AND  249.93 ) )  OR  ( (( ( CNVTREAL ( NULLVAL ( TRIM (
N.SOURCE_IDENTIFIER,  3 ),  "0.0" )) BETWEEN  250.0  AND  250.93 ) )  OR  ( (( ( CNVTREAL ( NULLVAL
( TRIM (N.SOURCE_IDENTIFIER,  3 ),  "0.0" ))= 357.2 ) )  OR  ( (( ( CNVTREAL ( NULLVAL ( TRIM (
N.SOURCE_IDENTIFIER,  3 ),  "0.0" )) BETWEEN  362.0  AND  362.07 ) )  OR  ( (( ( CNVTREAL ( NULLVAL
( TRIM (N.SOURCE_IDENTIFIER,  3 ),  "0.0" ))= 366.41 ) )  OR  ( (( ( CNVTREAL ( NULLVAL ( TRIM (
N.SOURCE_IDENTIFIER,  3 ),  "0.0" )) BETWEEN  648.0  AND  648.04 ) )  OR  ( (( ( CNVTREAL ( NULLVAL
( TRIM (N.SOURCE_IDENTIFIER,  3 ),  "0.0" )) BETWEEN  648.8  AND  648.84 ) )  OR  ((
N.SOURCE_IDENTIFIER= "V58.67" ) ))  ))  ))  ))  ))  ))  ))  )) )
 AND ( P
WHERE (PROB.PERSON_ID=P.PERSON_ID))
 AND ( E
WHERE (P.PERSON_ID=E.PERSON_ID) AND (E.REG_DT_TM BETWEEN  CNVTDATETIME ( STARTDATE ) AND
 CNVTDATETIME ( ENDDATE )) AND  (( (E.DISCH_DT_TM> CNVTDATETIME ( STARTDATE )) )  OR  (E.DISCH_DT_TM
= NULL  AND  NOT ((E.ENCNTR_TYPE_CLASS_CD IN ( INBOXMSG_CD ,
 PHONEMSG_CD )) ) )) )
 AND ( EA
WHERE ( OUTERJOIN (E.ENCNTR_ID)=EA.ENCNTR_ID) AND (EA.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( MRN_CD ))
 AND (EA.END_EFFECTIVE_DT_TM> SYSDATE ) AND (EA.ACTIVE_IND= 1 ))
 AND ( PA
WHERE ( OUTERJOIN (P.PERSON_ID)=PA.PERSON_ID) AND (PA.PERSON_ALIAS_TYPE_CD= OUTERJOIN ( CMRN_CD ))
 AND (PA.END_EFFECTIVE_DT_TM> OUTERJOIN ( SYSDATE )) AND (PA.ACTIVE_IND= OUTERJOIN ( 1 )))
 
ORDER BY EA.ALIAS,
P.PERSON_ID,
E.ENCNTR_ID,
 SOURCE_TYPE
 
HEAD REPORT
 CNT = 0
HEAD EA.ALIAS
 NULL
HEAD P.PERSON_ID
 NULL
HEAD E.ENCNTR_ID
 CNT =( CNT + 1 ),
IF ( ( MOD ( CNT ,  10 )= 1 ) )  STAT = ALTERLIST ( DREC -> QUAL , ( CNT + 10 ))
ENDIF
, DREC -> QUAL [ CNT ]-> NAME =P.NAME_FULL_FORMATTED, DREC -> QUAL [ CNT ]-> NAME_FIRST =
P.NAME_FIRST, DREC -> QUAL [ CNT ]-> NAME_LAST =P.NAME_LAST, DREC -> QUAL [ CNT ]-> DOB = FORMAT (
P.BIRTH_DT_TM,  "mm/dd/yyyy;;d" ), DREC -> QUAL [ CNT ]-> ENCNTR_ID =E.ENCNTR_ID, DREC -> QUAL [
 CNT ]-> PERSON_ID =E.PERSON_ID, DREC -> QUAL [ CNT ]-> AGE = TRIM ( CNVTAGE ( CNVTDATE (
P.BIRTH_DT_TM),  CURDATE ),  3 ), DREC -> QUAL [ CNT ]-> SEX = UAR_GET_CODE_DISPLAY (P.SEX_CD),
 DREC -> QUAL [ CNT ]-> TYPE = UAR_GET_CODE_DISPLAY (E.ENCNTR_TYPE_CD), DREC -> QUAL [ CNT ]->
 REG_DT_TM_TXT = FORMAT (E.REG_DT_TM,  "mm/dd/yyyy;;d" ),
IF ( (EA.ENCNTR_ALIAS_TYPE_CD= FNBR_CD ) )  DREC -> QUAL [ CNT ]-> FNBR = SUBSTRING ( 1 ,  20 ,
 CNVTALIAS (EA.ALIAS, EA.ALIAS_POOL_CD))
ELSEIF ( (EA.ENCNTR_ALIAS_TYPE_CD= MRN_CD ) )  DREC -> QUAL [ CNT ]-> MRN = REPLACE ( SUBSTRING ( 1
,  20 ,  CNVTALIAS (EA.ALIAS, EA.ALIAS_POOL_CD)),  "-" ,  "" )
ENDIF
,
IF ( (PA.PERSON_ALIAS_TYPE_CD= CMRN_CD ) )  DREC -> QUAL [ CNT ]-> CMRN = REPLACE ( SUBSTRING ( 1 ,
 20 ,  CNVTALIAS (PA.ALIAS, PA.ALIAS_POOL_CD)),  "-" ,  "" )
ENDIF
, DREC -> QUAL [ CNT ]-> ORG_ID = SUBSTRING ( 1 ,  2 ,  UAR_GET_CODE_DISPLAY (E.LOC_NURSE_UNIT_CD)),
 DREC -> QUAL [ CNT ]-> SITE_ID = SUBSTRING ( 3 ,  4 ,  UAR_GET_CODE_DISPLAY (E.LOC_NURSE_UNIT_CD)),
 DREC -> QUAL [ CNT ]-> LOCATION_ID = CNVTSTRING (E.LOC_NURSE_UNIT_CD,  0 ), DREC -> QUAL [ CNT ]->
 LOCATION_DISP = SUBSTRING ( 6 ,  20 ,  UAR_GET_CODE_DISPLAY (E.LOC_NURSE_UNIT_CD)), DREC -> QUAL [
 CNT ]-> NURSEUNIT = UAR_GET_CODE_DISPLAY (E.LOC_NURSE_UNIT_CD), DREC -> QUAL [ CNT ]-> ROOM =
 UAR_GET_CODE_DISPLAY (E.LOC_ROOM_CD), DREC -> QUAL [ CNT ]-> BED = UAR_GET_CODE_DISPLAY (
E.LOC_BED_CD), DREC -> QUAL [ CNT ]-> RB = CONCAT ( TRIM ( DREC -> QUAL [ CNT ]-> ROOM ),  "-" ,
 TRIM ( DREC -> QUAL [ CNT ]-> BED )),
IF ( (E.LOC_NURSE_UNIT_CD= 0 ) )
CASE ( E.LOC_FACILITY_CD )
 OF  EULUTHERHOSP_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "LH" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUOAKRIDGEHOSP_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "OH" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUOAKRIDGECLIN_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "OM" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUNWHOMECARE_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "HC" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUPAINCLINIC_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "PC" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUNORTHLNDHOSP_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "BH" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUNORTHLNDCLIN_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "BC" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUCHIPVALHOSP_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "BL" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUCHIPVALCLIN_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "BM" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUMIDELFORTCL_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "MC" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EULHBEHAVIORHLTH_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "LB" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 OF  EUMCBEHAVHLTH_CD :  DREC -> QUAL [ CNT ]-> SITE_ID = "MB" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "EU"
 ELSE  DREC -> QUAL [ CNT ]-> SITE_ID = "zz" ,
 DREC -> QUAL [ CNT ]-> ORG_ID = "xx"
 ENDCASE
 
ENDIF
, DIAG_CNT = 0
DETAIL
 DIAG_CNT =( DIAG_CNT + 1 ),
 
IF ( ( DIAG_CNT < 4 ) )  DREC -> QUAL [ CNT ]-> DIAG [ DIAG_CNT ]-> SOURCE_VOCABULARY =
 UAR_GET_CODE_DISPLAY (N.SOURCE_VOCABULARY_CD),  DREC -> QUAL [ CNT ]-> DIAG [ DIAG_CNT ]->
 SOURCE_IDENTIFIER =N.SOURCE_IDENTIFIER,  DREC -> QUAL [ CNT ]-> DIAG [ DIAG_CNT ]-> SOURCE_STRING =
N.SOURCE_STRING
ENDIF
 
FOOT REPORT
 STAT = ALTERLIST ( DREC -> QUAL ,  CNT ),
 DREC -> CNT = CNT
 WITH  NOCOUNTER
 
IF ( ( DREC -> CNT = 0 ) )  GO TO  EXIT_SCRIPT
ENDIF
 
 
SELECT  INTO  "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( PERSON_PRSNL_RELTN  PPR ),
( PRSNL  P ),
( PRSNL_ALIAS  PA )
 PLAN ( D )
 AND ( PPR
WHERE ( DREC -> QUAL [D.SEQ]-> PERSON_ID =PPR.PERSON_ID) AND (PPR.PERSON_PRSNL_R_CD= PCP_CD ) AND ((
PPR.PRSNL_PERSON_ID+ 0 )> 0.0 ))
 AND ( P
WHERE (P.PERSON_ID=PPR.PRSNL_PERSON_ID))
 AND ( PA
WHERE (P.PERSON_ID=PA.PERSON_ID) AND (PA.PRSNL_ALIAS_TYPE_CD= NPI_CD ))
 
 
DETAIL
 DREC -> QUAL [D.SEQ]-> PROVIDER =P.NAME_FULL_FORMATTED,
 DREC -> QUAL [D.SEQ]-> PROVIDER_NPI_ALIAS =PA.ALIAS
 WITH  NOCOUNTER
 
SELECT  INTO  "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( ADDRESS  A )
 PLAN ( D )
 AND ( A
WHERE (A.PARENT_ENTITY_ID= DREC -> QUAL [D.SEQ]-> PERSON_ID ) AND (A.PARENT_ENTITY_NAME= "PERSON" )
 AND (A.ADDRESS_TYPE_CD IN ( HOME_ADDRESS_CD ,
 EMAIL_ADDRESS_CD )) AND (A.ACTIVE_IND= 1 ) AND (A.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( ENDDATE ))
 AND (A.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( STARTDATE )))
 
 
DETAIL
 
IF ( (A.ADDRESS_TYPE_CD= HOME_ADDRESS_CD ) )  DREC -> QUAL [D.SEQ]-> STREET_ADDR =A.STREET_ADDR,
 DREC -> QUAL [D.SEQ]-> STREET_ADDR2 =A.STREET_ADDR2,  DREC -> QUAL [D.SEQ]-> CITY =A.CITY,  DREC ->
 QUAL [D.SEQ]-> STATE =A.STATE,  DREC -> QUAL [D.SEQ]-> ZIPCODE =A.ZIPCODE
ELSE   DREC -> QUAL [D.SEQ]-> EMAIL =A.STREET_ADDR
ENDIF
 
 WITH  NOCOUNTER
 
SELECT  INTO  "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( PHONE  PH )
 PLAN ( D )
 AND ( PH
WHERE (PH.PARENT_ENTITY_ID= DREC -> QUAL [D.SEQ]-> PERSON_ID ) AND (PH.PARENT_ENTITY_NAME= "PERSON"
) AND (PH.PHONE_TYPE_CD IN ( BUS_PHONE_CD ,
 HOME_PHONE_CD ,
 CELL_PHONE_CD )) AND (PH.ACTIVE_IND= 1 ) AND (PH.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,
 CURTIME3 )) AND (PH.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
 
 
DETAIL
 
IF ( (PH.PHONE_TYPE_CD= BUS_PHONE_CD ) )  DREC -> QUAL [D.SEQ]-> BUSINESS_PHONE = FORMAT (
PH.PHONE_NUM,  "###-###-####" )
ELSEIF ( (PH.PHONE_TYPE_CD= HOME_PHONE_CD ) )  DREC -> QUAL [D.SEQ]-> HOME_PHONE = FORMAT (
PH.PHONE_NUM,  "###-###-####" )
ELSEIF ( (PH.PHONE_TYPE_CD= CELL_PHONE_CD ) )  DREC -> QUAL [D.SEQ]-> CELL_PHONE = FORMAT (
PH.PHONE_NUM,  "###-###-####" )
ENDIF
 
 WITH  NOCOUNTER
 
SELECT  INTO  "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( PERSON_INFO  PI )
 PLAN ( D )
 AND ( PI
WHERE (PI.PERSON_ID= DREC -> QUAL [D.SEQ]-> PERSON_ID ) AND (PI.INFO_SUB_TYPE_CD IN (
 RSRCHCONSENT_CD ,
 RSRCHCONDTRV_CD ,
 MEDCONFRMDT_CD )) AND (PI.ACTIVE_IND= 1 ))
 
 
DETAIL
 
IF ( (PI.INFO_SUB_TYPE_CD= RSRCHCONDTRV_CD ) )  DREC -> QUAL [D.SEQ]-> RSRCHCONDTRV_DATE_TIME =
 FORMAT (PI.VALUE_DT_TM,  "mm/dd/yyyy;;d" )
ELSEIF ( (PI.INFO_SUB_TYPE_CD= MEDCONFRMDT_CD ) )  DREC -> QUAL [D.SEQ]-> MEDCONFRMDT_DATE_TIME =
 FORMAT (PI.VALUE_DT_TM,  "mm/dd/yyyy;;d" )
ELSE   DREC -> QUAL [D.SEQ]-> RSRCHCONSENT = UAR_GET_CODE_DISPLAY (PI.VALUE_CD)
ENDIF
 
 WITH  NOCOUNTER
 
select  into  "nl:"
from
(dummyt d with seq = drec->cnt),
orders o,
order_recon_detail ord,
order_compliance_detail ocd
 
plan d
 
join o
where o.person_id = drec->qual[d.seq]->person_id
  and o.order_status_cd+0 = ordered_cd
  and cnvtupper(o.hna_order_mnemonic) = "*ASPIRIN*"
  and o.orig_ord_as_flag in (1,2)
 
 
join ord
where ord.order_nbr = outerjoin(o.order_id)
 
join ocd
where ocd.order_nbr = outerjoin(o.order_id)
 
order by d.seq, ord.updt_dt_tm desc, ocd.compliance_capture_dt_tm desc
 
head d.seq
;if (ocd.compliance_status_cd != 24103249.00)   ;will add at a later date if necessary per Ann Bills
 if (ord.updt_dt_tm > ocd.compliance_capture_dt_tm)
   drec->qual[d.seq]->asadt = format(ord.updt_dt_tm, "mm/dd/yyyy;;d"),
   drec->qual[d.seq]->asadt_unformatted = ord.updt_dt_tm
   drec->qual[d.seq]->file [ 3 ]-> display_flag = 1
 elseif (ocd.compliance_capture_dt_tm > ord.updt_dt_tm)
   drec->qual[d.seq]->asadt = format(ocd.compliance_capture_dt_tm,"mm/dd/yyyy;;d"),
   drec->qual[d.seq]->asadt_unformatted = ocd.compliance_capture_dt_tm
   drec->qual[d.seq]->file[3]->display_flag = 1
 endif
;endif
 with  nocounter
 
;se
select into "nl:"
from
(dummyt d with  seq = drec->CNT),
clinical_event ce
 
plan d
where drec->qual[d.seq]->file[3]->display_flag = 1
join ce
where ce.person_id = drec->QUAL[d.seq]->person_id
  and ce.event_cd = amb_depart_sum_cd
  and ce.valid_until_dt_tm > sysdate
  and ce.view_level = 1
 
order ce.person_id, ce.event_end_dt_tm desc
 
head ce.person_id
if (ce.event_end_dt_tm > drec->QUAL[d.seq]->ASADT_unformatted)
  drec->qual[d.seq]->asadt = format(ce.event_end_dt_tm,"mm/dd/yyyy;;d" )
  drec->QUAL[d.seq]->ASADT_unformatted = ce.event_end_dt_tm
  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> DISPLAY_FLAG = 1
endif
 
with nocounter
 
 
 
 
SELECT  INTO  "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( DUMMYT  D2 ),
( CLINICAL_EVENT  C ),
( CE_DATE_RESULT  CDR ),
( V500_EVENT_SET_CANON  ESC ),
( V500_EVENT_SET_EXPLODE  ESE ),
( CODE_VALUE  CV )
 PLAN ( D )
 AND ( D2 )
 AND ( C
WHERE (C.PERSON_ID= DREC -> QUAL [D.SEQ]-> PERSON_ID ) AND (C.CLINSIG_UPDT_DT_TM BETWEEN
 CNVTDATETIME ( STARTDATE ) AND  CNVTDATETIME ( ENDDATE )) AND (C.VIEW_LEVEL= 1 ) AND (
C.PUBLISH_FLAG= 1 ) AND (C.VALID_UNTIL_DT_TM= CNVTDATETIME ( "31-DEC-2100,00:00:00" )) AND (
C.RESULT_STATUS_CD IN ( AUTH_CD ,
 MODIFIED_CD )))
 AND ( CDR
WHERE ( OUTERJOIN (C.EVENT_ID)=CDR.EVENT_ID))
 AND ( CV
WHERE (C.EVENT_CD=CV.CODE_VALUE))
 AND ( ESE
WHERE (CV.CODE_VALUE=ESE.EVENT_CD))
 AND ( ESC
WHERE (ESE.EVENT_SET_CD=ESC.EVENT_SET_CD) AND (ESC.PARENT_EVENT_SET_CD= CLINICALSERVICESFILE_CD ))
 
ORDER BY D.SEQ,
ESC.EVENT_SET_COLLATING_SEQ,
C.EVENT_END_DT_TM
 
HEAD D.SEQ
 CLIN_CNT = 0 , STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET ,  20 ),
 TEMP_GRP_CNT = 1 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 3 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  3 ),
 TEMP_GRP_CNT = 2 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 3 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  3 ),
 TEMP_GRP_CNT = 3 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 2 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  2 ),
 TEMP_GRP_CNT = 4 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 4 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  4 ),
 TEMP_GRP_CNT = 5 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 4 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  4 ),
 TEMP_GRP_CNT = 6 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 7 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 8 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 2 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  2 ),
 TEMP_GRP_CNT = 9 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 2 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  2 ),
 TEMP_GRP_CNT = 10 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 2 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  2 ),
 TEMP_GRP_CNT = 11 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  2 ),
 TEMP_GRP_CNT = 12 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 13 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 14 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 15 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 16 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 17 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 18 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 19 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 ),
 TEMP_GRP_CNT = 20 , DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> MAX_COLS = 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ TEMP_GRP_CNT ]-> COL ,  1 )
HEAD ESC.EVENT_SET_COLLATING_SEQ
 EVENT_SET = UAR_GET_CODE_DISPLAY (ESC.EVENT_SET_CD), GRP_CNT =ESC.EVENT_SET_COLLATING_SEQ, DREC ->
 QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> EVENT_SET_NAME = EVENT_SET , DETAIL_CNT = 0
DETAIL
 
IF ( ( GRP_CNT > 0 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> DISPLAY_FLAG = 1
ENDIF
,
 CLIN_CNT =( CLIN_CNT + 1 ),
 
IF ( ( MOD ( CLIN_CNT ,  10 )= 1 ) )  STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> CLIN , ( CLIN_CNT +
 10 ))
ENDIF
,
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> EVENT_CD =C.EVENT_CD,
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> TEST_NBR = CNVTSTRING ( CNVTINT (C.EVENT_CD)),
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> TEST_NAME = UAR_GET_CODE_DISPLAY (C.EVENT_CD),
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> RESULT =C.RESULT_VAL,
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> EVENT_END_DATETIME = FORMAT (C.EVENT_END_DT_TM,
 "mm/dd/yyyy" ),
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> UNIT = UAR_GET_CODE_DISPLAY (C.RESULT_UNITS_CD),
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> NORMALCY = UAR_GET_CODE_DISPLAY (C.NORMALCY_CD),
 
IF ( (C.NORMAL_LOW> " " ) AND (C.NORMAL_HIGH> " " ) )  DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]->
 REF_RANGE = BUILD ( "(" , C.NORMAL_LOW,  "-" , C.NORMAL_HIGH,  ")" )
ELSE   DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> REF_RANGE = "(Nrml rng unspecfd)"
ENDIF
,
 COL  40 ,
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> TEST_NAME  "############################"
,
 " " ,
 DREC -> QUAL [D.SEQ]-> CLIN [ CLIN_CNT ]-> RESULT  "######################"
,
 ROW + 1 ,
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL ,  10 ),
 
IF ( ( GRP_CNT = 1 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP =C.RESULT_VAL,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 2 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" ),  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]->
 EVENTSET [ GRP_CNT ]-> COL [ 3 ]-> COL_DISP = UAR_GET_CODE_DISPLAY (C.RESULT_UNITS_CD)
ENDIF
,
 
IF ( ( GRP_CNT = 2 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP =C.RESULT_VAL,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 2 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" ),  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]->
 EVENTSET [ GRP_CNT ]-> COL [ 3 ]-> COL_DISP = UAR_GET_CODE_DISPLAY (C.RESULT_UNITS_CD)
ENDIF
,
 
IF ( ( GRP_CNT = 3 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP =C.RESULT_VAL,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 2 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" ),  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]->
 EVENTSET [ GRP_CNT ]-> COL [ 3 ]-> COL_DISP = UAR_GET_CODE_DISPLAY (C.RESULT_UNITS_CD)
ENDIF
,
 
IF ( ( GRP_CNT = 4 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP =C.RESULT_VAL,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 2 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" ),  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]->
 EVENTSET [ GRP_CNT ]-> COL [ 3 ]-> COL_DISP = CNVTSTRING (C.EVENT_CD,  12 ,  2 ),  DREC -> QUAL [
D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 4 ]-> COL_DISP = UAR_GET_CODE_DISPLAY (C.EVENT_CD
)
ENDIF
,
 
IF ( ( GRP_CNT = 5 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP =C.RESULT_VAL,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 2 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" ),  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]->
 EVENTSET [ GRP_CNT ]-> COL [ 3 ]-> COL_DISP = CNVTSTRING (C.EVENT_CD,  12 ,  2 ),  DREC -> QUAL [
D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 4 ]-> COL_DISP = UAR_GET_CODE_DISPLAY (C.EVENT_CD
)
ENDIF
,
 
IF ( ( GRP_CNT = 6 ) )
IF ( (C.EVENT_CLASS_CD= DATE_CD ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL
[ 1 ]-> COL_DISP = FORMAT (CDR.RESULT_DT_TM,  "MM/DD/YYYY;;D" )
ELSE   DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]-> COL_DISP = FORMAT (
C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
 
ENDIF
,
 
IF ( ( GRP_CNT = 7 ) )
IF ( (C.EVENT_CLASS_CD= DATE_CD ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL
[ 1 ]-> COL_DISP = FORMAT (CDR.RESULT_DT_TM,  "MM/DD/YYYY;;D" )
ELSE   DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]-> COL_DISP = FORMAT (
C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
 
ENDIF
,
 
IF ( ( GRP_CNT = 8 ) )
IF ( (C.EVENT_CLASS_CD= DATE_CD ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL
[ 1 ]-> COL_DISP = FORMAT (CDR.RESULT_DT_TM,  "MM/DD/YYYY;;D" )
ELSE   DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]-> COL_DISP = FORMAT (
C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 2 ]-> COL_DISP =
 UAR_GET_CODE_DISPLAY (C.EVENT_CD)
ENDIF
,
 
IF ( ( GRP_CNT = 9 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP =C.RESULT_VAL,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 2 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 10 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP =C.RESULT_VAL,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 2 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 11 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 12 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 13 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 14 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 15 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 16 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 17 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 18 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
,
 
IF ( ( GRP_CNT = 19 ) )  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> COL [ 1 ]->
 COL_DISP = FORMAT (C.EVENT_END_DT_TM,  "MM/DD/YYYY;;D" )
ENDIF
 
FOOT  D.SEQ
 DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ 20 ]-> COL [ 1 ]-> COL_DISP = DREC -> QUAL [D.SEQ]->
 ASADT , STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> CLIN ,  CLIN_CNT ), DREC -> QUAL [D.SEQ]->
 CLIN_CNT = CLIN_CNT
 WITH  NOCOUNTER , OUTERJOIN = D
 
SELECT  INTO  "nl:"
 MRN = SUBSTRING ( 1 ,  20 ,  CONCAT ( DREC -> QUAL [D.SEQ]-> MRN ,
 "                                 " ))
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( PROCEDURE  P ),
( NOMENCLATURE  N )
 PLAN ( D )
 AND ( P
WHERE (P.ENCNTR_ID= DREC -> QUAL [D.SEQ]-> ENCNTR_ID ) AND (P.ACTIVE_STATUS_CD= ACTIVE_CD ))
 AND ( N
WHERE (P.NOMENCLATURE_ID=N.NOMENCLATURE_ID) AND  EXPAND ( NUM ,  1 ,  SIZE ( DIABETES_PROCS -> SEQ
,  5 ), N.SOURCE_IDENTIFIER,  DIABETES_PROCS -> SEQ [ NUM ]-> SOURCE_IDENTIFIER ))
 
ORDER BY  MRN ,
 CNVTDATETIME (P.PROC_DT_TM),
P.PROCEDURE_ID
 
HEAD REPORT
 PROC_FILE_SEQ = 0
HEAD  MRN
 NULL , PROC_CNT = 0
HEAD P.PROC_DT_TM
 NULL
DETAIL
 PROC_FILE_SEQ =( PROC_FILE_SEQ + 1 ),
 DREC -> QUAL [D.SEQ]-> PROC_FILE_SEQ = PROC_FILE_SEQ ,
 PROC_CNT =( PROC_CNT + 1 ),
 STAT = ALTERLIST ( DREC -> QUAL [D.SEQ]-> PROCS ,  PROC_CNT ),
 DREC -> QUAL [D.SEQ]-> PROCS [ PROC_CNT ]-> NOMENCLATURE_ID_TXT = CNVTSTRING (N.NOMENCLATURE_ID,
 12 ,  2 ),
 DREC -> QUAL [D.SEQ]-> PROCS [ PROC_CNT ]-> PROCEDURE =N.SOURCE_STRING,
 DREC -> QUAL [D.SEQ]-> PROCS [ PROC_CNT ]-> DATE_PERFORMED = FORMAT (P.PROC_DT_TM,
 "mm/dd/yyyy;;d" )
 WITH  FORMAT , SEPARATOR = " "
 
 
# FILE1_OUTPUT
 
SELECT  INTO  VALUE ( TRIM ( FILE1NAME ))
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT )
 
HEAD REPORT
 SEP_CHAR = "|" ,
 DISP_LINE = CONCAT ( "Medical_Record_Number" ,  SEP_CHAR ,  "Community_Medical_Record_Number" ,
 SEP_CHAR ,  "First_Name" ,  SEP_CHAR ,  "Last_Name" ,  SEP_CHAR ,  "Patient_Gender" ,  SEP_CHAR ,
 "Date_Of_Birth" ,  SEP_CHAR ,  "Provider_NPI" ,  SEP_CHAR ,  "Provider_Name" ,  SEP_CHAR ,
 "Encounter_Type" ,  SEP_CHAR ,  "Patient_Status_Value" ,  SEP_CHAR ,  "Code_Type1" ,  SEP_CHAR ,
 "Code1" ,  SEP_CHAR ,  "Code_Desc1" ,  SEP_CHAR ,  "Code_Type2" ,  SEP_CHAR ,  "Code2" ,  SEP_CHAR
,  "Code_Desc2" ,  SEP_CHAR ,  "Code_Type3" ,  SEP_CHAR ,  "Code3" ,  SEP_CHAR ,  "Code_Desc3" ,
 SEP_CHAR ,  "Org_ID" ,  SEP_CHAR ,  "Site_ID" ,  SEP_CHAR ,  "Location_Id" ,  SEP_CHAR ,
 "Location_Abbr" ,  SEP_CHAR ,  "Street1" ,  SEP_CHAR ,  "Street2" ,  SEP_CHAR ,  "City" ,
 SEP_CHAR ,  "State" ,  SEP_CHAR ,  "ZIP" ,  SEP_CHAR ,  "Home_Phone" ,  SEP_CHAR ,  "Cell_Phone" ,
 SEP_CHAR ,  "Business_Phone" ,  SEP_CHAR ,  "Email_Address" ,  SEP_CHAR ,  "RSRCHCONSENT" ,
 SEP_CHAR ,  "MEDCONFRMDT" ,  SEP_CHAR ,  "RSRCHCONDTRV" ),
 DISP_LINE ,
 ROW + 1
DETAIL
 LAST_DISP_LINE = DISP_LINE ,
 DISP_LINE = CONCAT ( TRIM ( DREC -> QUAL [D.SEQ]-> MRN ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [
D.SEQ]-> CMRN ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> NAME_FIRST ,  3 ),  SEP_CHAR ,
 TRIM ( DREC -> QUAL [D.SEQ]-> NAME_LAST ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> SEX ,
 3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> DOB ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ
]-> PROVIDER_NPI_ALIAS ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> PROVIDER ,  3 ),
 SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> TYPE ,  3 ),  SEP_CHAR ,  TRIM ( "E" ,  3 ),  SEP_CHAR ,
 TRIM ( DREC -> QUAL [D.SEQ]-> DIAG [ 1 ]-> SOURCE_VOCABULARY ,  3 ),  SEP_CHAR ,  TRIM ( DREC ->
 QUAL [D.SEQ]-> DIAG [ 1 ]-> SOURCE_IDENTIFIER ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]->
 DIAG [ 1 ]-> SOURCE_STRING ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> DIAG [ 2 ]->
 SOURCE_VOCABULARY ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> DIAG [ 2 ]->
 SOURCE_IDENTIFIER ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> DIAG [ 2 ]-> SOURCE_STRING ,
 3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> DIAG [ 3 ]-> SOURCE_VOCABULARY ,  3 ),  SEP_CHAR ,
 TRIM ( DREC -> QUAL [D.SEQ]-> DIAG [ 3 ]-> SOURCE_IDENTIFIER ,  3 ),  SEP_CHAR ,  TRIM ( DREC ->
 QUAL [D.SEQ]-> DIAG [ 3 ]-> SOURCE_STRING ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]->
 ORG_ID ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> SITE_ID ,  3 ),  SEP_CHAR ,  TRIM ( DREC
-> QUAL [D.SEQ]-> LOCATION_ID ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> LOCATION_DISP ,  3
),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> STREET_ADDR ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [
D.SEQ]-> STREET_ADDR2 ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> CITY ,  3 ),  SEP_CHAR ,
 TRIM ( DREC -> QUAL [D.SEQ]-> STATE ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> ZIPCODE ,
 3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> HOME_PHONE ,  3 ),  SEP_CHAR ,  TRIM ( DREC ->
 QUAL [D.SEQ]-> CELL_PHONE ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> BUSINESS_PHONE ,  3 )
,  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> EMAIL ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]
-> RSRCHCONSENT ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> MEDCONFRMDT_DATE_TIME ,  3 ),
 SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> RSRCHCONDTRV_DATE_TIME ,  3 )),
 
IF ( ( DISP_LINE != LAST_DISP_LINE ) )  DISP_LINE ,  ROW + 1
ENDIF
 
 WITH  MAXROW = 1 , MAXCOL = 2000 , FORMAT = VARIABLE , FORMFEED = NONE
 
# FILE3_OUTPUT
 
SELECT  INTO  VALUE ( TRIM ( FILE3NAME ))
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT )
 
HEAD REPORT
 SEP_CHAR = "|" ,
 DISP_LINE = CONCAT ( "Medical_Record_Number" ,  SEP_CHAR ,  "Org_ID" ,  SEP_CHAR ,  "Site_ID" ,
 SEP_CHAR ,  "Encounter_Type" ,  SEP_CHAR ,  "Weight" ,  SEP_CHAR ,  "WeightDT" ,  SEP_CHAR ,
 "WeightUnit" ,  SEP_CHAR ,  "Height" ,  SEP_CHAR ,  "HeightDT" ,  SEP_CHAR ,  "HeightUnit" ,
 SEP_CHAR ,  "BMI" ,  SEP_CHAR ,  "BMIDT" ,  SEP_CHAR ,  "SysBP" ,  SEP_CHAR ,  "SysDT" ,  SEP_CHAR
,  "SysEventCD" ,  SEP_CHAR ,  "SysEventDisp" ,  SEP_CHAR ,  "DiaBP" ,  SEP_CHAR ,  "DiaDT" ,
 SEP_CHAR ,  "DiaEventCD" ,  SEP_CHAR ,  "DiaEventDisp" ,  SEP_CHAR ,  "FootDT" ,  SEP_CHAR ,
 "EyeDT" ,  SEP_CHAR ,  "DiabEdDT" ,  SEP_CHAR ,  "DiabEdDesc" ,  SEP_CHAR ,  "Tobacco" ,  SEP_CHAR
,  "TobaccoDT" ,  SEP_CHAR ,  "TobaccoAdv" ,  SEP_CHAR ,  "TobaccoAdvDT" ,  SEP_CHAR ,  "A1CCI" ,
 SEP_CHAR ,  "ASACI" ,  SEP_CHAR ,  "InfluenzaCI" ,  SEP_CHAR ,  "InfluenzaDT" ,  SEP_CHAR ,
 "LipidCI" ,  SEP_CHAR ,  "PneumoCI" ,  SEP_CHAR ,  "PneumoDT" ,  SEP_CHAR ,  "TdCI" ,  SEP_CHAR ,
 "TdDT" ,  SEP_CHAR ,  "ASADT" ),
 DISP_LINE ,
 ROW + 1
DETAIL
 
IF ( ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> DISPLAY_FLAG = 1 ) )  LAST_DISP_LINE = DISP_LINE ,
 DISP_LINE = CONCAT ( TRIM ( DREC -> QUAL [D.SEQ]-> MRN ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [
D.SEQ]-> ORG_ID ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> SITE_ID ,  3 ),  SEP_CHAR ,
 TRIM ( DREC -> QUAL [D.SEQ]-> TYPE ,  3 )),
FOR (  GRP_CNT  =  1  TO  SIZE ( DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET ,  5 ) )
 
FOR (  COLNUM  =  1  TO  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [ GRP_CNT ]-> MAX_COLS  )
 DISP_LINE = CONCAT ( DISP_LINE ,  SEP_CHAR ,  DREC -> QUAL [D.SEQ]-> FILE [ 3 ]-> EVENTSET [
 GRP_CNT ]-> COL [ COLNUM ]-> COL_DISP )
 
ENDFOR
 
 
ENDFOR
,
IF ( ( DISP_LINE != LAST_DISP_LINE ) )  DISP_LINE ,  ROW + 1
ENDIF
 
ENDIF
 
 WITH  MAXROW = 1 , MAXCOL = 2000 , FORMAT = VARIABLE , FORMFEED = NONE
 
 
# FILE5_OUTPUT
 
SELECT  INTO  VALUE ( TRIM ( FILE5NAME ))
 PROC_FILE_SEQ = DREC -> QUAL [D.SEQ]-> PROC_FILE_SEQ
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT )
 
WHERE ( DREC -> QUAL [D.SEQ]-> PROC_FILE_SEQ > 0 )
ORDER BY  PROC_FILE_SEQ
 
HEAD REPORT
 SEP_CHAR = "|" ,
 DISP_LINE = CONCAT ( "Medical_Record_Number" ,  SEP_CHAR ,  "Date_Performed" ,  SEP_CHAR ,
 "Org_ID" ,  SEP_CHAR ,  "Site_ID" ,  SEP_CHAR ,  "Nomenclature_ID" ,  SEP_CHAR ,  "Procedure" ),
 DISP_LINE ,
 ROW + 1
DETAIL
 
FOR (  PROC_CNT  =  1  TO  SIZE ( DREC -> QUAL [D.SEQ]-> PROCS ,  5 ) )
 
IF ( ( TRIM ( DREC -> QUAL [D.SEQ]-> PROCS [ PROC_CNT ]-> NOMENCLATURE_ID_TXT ,  3 )> " " ) )
 DISP_LINE = CONCAT ( TRIM ( DREC -> QUAL [D.SEQ]-> MRN ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [
D.SEQ]-> PROCS [ PROC_CNT ]-> DATE_PERFORMED ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> ORG_ID ,
 3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> SITE_ID ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [
D.SEQ]-> PROCS [ PROC_CNT ]-> NOMENCLATURE_ID_TXT ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]->
 PROCS [ PROC_CNT ]-> PROCEDURE ,  3 )),  DISP_LINE ,  ROW + 1
ENDIF
 
 
ENDFOR
 
 WITH  MAXROW = 1 , MAXCOL = 2000 , FORMAT = VARIABLE , FORMFEED = NONE
 
SELECT  INTO  $1
 
DETAIL
 "MAYO_MN Diabetes Extracts.  Files Written:" ,
 ROW + 1 ,
 COL  10 ,
 FILE1NAME ,
 ROW + 1 ,
 COL  10 ,
 FILE3NAME ,
 ROW + 1 ,
 COL  10 ,
 FILE5NAME ,
 ROW + 1
 WITH  NOCOUNTER
 
# EXIT_SCRIPT
 
SET  REPLY -> STATUS_DATA -> STATUS  =  "S"
 
FREE RECORD CLIN_EVENTS
 
FREE RECORD DREC
 
FREE RECORD EVENTS
 
FREE RECORD NOMEN_GRP
 
FREE RECORD DIABETES_PROCS
 END GO
