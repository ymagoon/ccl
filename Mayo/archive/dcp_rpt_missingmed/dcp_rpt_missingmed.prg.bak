;*** Generated by translate command; please verify contents before re-including in CCL ***
;001  11/23/09  akcia add fin below mrn and pull mrn from encntr_alias
;002  03/12/2014  Akcia-SE add red wing printer
;003  01/21/2015  Akcia-PEL add printer for facilities - Fix issue with "Other" Reason code
DROP PROGRAM   DCP_RPT_MISSINGMED : DBA  GO
CREATE PROGRAM  DCP_RPT_MISSINGMED : DBA
 
SET  ORD_CNT  =  VALUE ( SIZE ( REQUEST -> ORD ,  5 ))
 
 CALL ECHO ( ORD_CNT )
 
RECORD  TEMP  (
 1  TEXT  =  VC
 1  CNT  =  I2
 1  QUAL [*]
 2  LINE  =  VC )
 
RECORD  TEMP2  (
 1  TEXT  =  VC
 1  CNT  =  I2
 1  QUAL [*]
 2  LINE  =  VC )
 
RECORD  PT  (
 1  LINE_CNT  =  I2
 1  LNS [*]
 2  LINE  =  VC )
 
RECORD  ORD  (
 1  CNT  =  I2
 1  QUAL [*]
 2  ORDER_ID  =  F8
 2  IV_IND  =  I2
 2  DATE  =  DQ8
 2  HNA_MNEMONIC  =  VC
 2  ORDER_MNEMONIC  =  VC
 2  DISP_MNEM  =  VC
 2  M_CNT  =  I2
 2  M_QUAL [*]
 3  M_LINE  =  VC
 2  DISP_LINE  =  VC
 2  D_CNT  =  I2
 2  D_QUAL [*]
 3  D_LINE  =  VC )
 
SET  CODE_SET  =  0.0
 
SET  CODE_VALUE  =  0.0
 
SET  CDF_MEANING  =  FILLSTRING ( 12 ,  " " )
 
SET  NAME  =  FILLSTRING ( 50 ,  " " )
 
SET  REQPROV  =  FILLSTRING ( 50 ,  " " )
 
SET  MRN  =  FILLSTRING ( 50 ,  " " )
SET  FIN  =  FILLSTRING ( 50 ,  " " )
 
 
SET  UNIT  =  FILLSTRING ( 50 ,  " " )
 
SET  ROOM  =  FILLSTRING ( 50 ,  " " )
 
SET  BED  =  FILLSTRING ( 50 ,  " " )
 
SET  LOC  =  FILLSTRING ( 50 ,  " " )
 
SET  PRINTER  =  FILLSTRING ( 20 ,  " " )
 
;SET  CODE_SET  =  4
 
SET  CODE_SET  =  319
 
SET  CDF_MEANING  =  "MRN"
 
 EXECUTE CPM_GET_CD_FOR_CDF
 
SET  MRN_ALIAS_CD  =  CODE_VALUE
declare fin_alias_cd = f8 with public,
  constant(uar_get_code_by("MEANING",319,"FIN NBR"))
SELECT  INTO  "nl:"
FROM ( PRSNL  P )
 PLAN ( P
WHERE (P.PERSON_ID= REQINFO -> UPDT_ID ))
 
 
DETAIL
 REQPROV =P.NAME_FULL_FORMATTED
 WITH  NOCOUNTER
 
SELECT  INTO  "nl:"
FROM ( PERSON  P ),
( ENCOUNTER  E ),
( DUMMYT  D1  WITH  SEQ = 1 ),
;( PERSON_ALIAS  PA )
( encntr_ALIAS  EA ),
( encntr_ALIAS  EA1 )
 
 
 PLAN ( E
WHERE (E.ENCNTR_ID= REQUEST -> ENCNTR_ID ))
 AND ( P
WHERE (P.PERSON_ID=E.PERSON_ID))
 AND ( D1 )
; AND ( PA
;WHERE (PA.PERSON_ID=P.PERSON_ID) AND (PA.PERSON_ALIAS_TYPE_CD= MRN_ALIAS_CD ) ;AND (PA.ACTIVE_IND= 1
AND ( EA
WHERE (EA.encntr_ID=e.encntr_ID) AND (eA.encntr_ALIAS_TYPE_CD= MRN_ALIAS_CD )
And (EA.end_effective_dt_tm > sysdate)
AND (EA.ACTIVE_IND= 1 ))
AND ( EA1
WHERE (EA1.encntr_ID=e.encntr_ID) AND (eA1.encntr_ALIAS_TYPE_CD= fin_ALIAS_CD )
And (EA1.end_effective_dt_tm > sysdate)
AND (EA1.ACTIVE_IND= 1
))
 
 
HEAD REPORT
 NAME = SUBSTRING ( 1 ,  30 , P.NAME_FULL_FORMATTED),
 MRN = SUBSTRING ( 1 ,  20 , EA.ALIAS),
 FIN = SUBSTRING ( 1 ,  20 , EA1.ALIAS),
 UNIT = SUBSTRING ( 1 ,  20 ,  UAR_GET_CODE_DISPLAY (E.LOC_NURSE_UNIT_CD)),
 ROOM = SUBSTRING ( 1 ,  10 ,  UAR_GET_CODE_DISPLAY (E.LOC_ROOM_CD)),
 BED = SUBSTRING ( 1 ,  10 ,  UAR_GET_CODE_DISPLAY (E.LOC_BED_CD)),
 LOC = CONCAT ( TRIM ( UNIT ),  "/" ,  TRIM ( ROOM ),  "/" ,  TRIM ( BED ))
 WITH  NOCOUNTER , OUTERJOIN = D1 , DONTCARE = PA
 
SELECT  INTO  "nl:"
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( ORD_CNT )),
( ORDERS  O )
 PLAN ( D )
 AND ( O
WHERE (O.ORDER_ID= REQUEST -> ORD [D.SEQ]-> ORDER_ID ))
 
 
HEAD REPORT
 ORD -> CNT = 0
DETAIL
 ORD -> CNT =( ORD -> CNT + 1 ),
 STAT = ALTERLIST ( ORD -> QUAL ,  ORD -> CNT ),
 ORD -> QUAL [ ORD -> CNT ]-> ORDER_ID =O.ORDER_ID,
 ORD -> QUAL [ ORD -> CNT ]-> ORDER_MNEMONIC =O.ORDER_MNEMONIC,
 ORD -> QUAL [ ORD -> CNT ]-> HNA_MNEMONIC =O.HNA_ORDER_MNEMONIC,
 
IF ( ( ORD -> QUAL [ ORD -> CNT ]-> ORDER_MNEMONIC > " " ) AND ( ORD -> QUAL [ ORD -> CNT ]->
 ORDER_MNEMONIC != ORD -> QUAL [ ORD -> CNT ]-> HNA_MNEMONIC ) )  ORD -> QUAL [ ORD -> CNT ]->
 DISP_MNEM = CONCAT ( TRIM ( ORD -> QUAL [ ORD -> CNT ]-> HNA_MNEMONIC ),  "(" ,  TRIM ( ORD ->
 QUAL [ ORD -> CNT ]-> ORDER_MNEMONIC ),  ")" )
ELSE   ORD -> QUAL [ ORD -> CNT ]-> DISP_MNEM = TRIM ( ORD -> QUAL [ ORD -> CNT ]-> HNA_MNEMONIC )
ENDIF
,
 
IF ( (O.CLINICAL_DISPLAY_LINE> " " ) )  ORD -> QUAL [ ORD -> CNT ]-> DISP_LINE =
O.CLINICAL_DISPLAY_LINE
ELSE   ORD -> QUAL [ ORD -> CNT ]-> DISP_LINE =O.ORDER_DETAIL_DISPLAY_LINE
ENDIF
,
 ORD -> QUAL [ ORD -> CNT ]-> DATE = CNVTDATETIME (O.ORIG_ORDER_DT_TM),
 ORD -> QUAL [ ORD -> CNT ]-> IV_IND =O.IV_IND
 WITH  NOCOUNTER
 
FOR (  X  =  1  TO  ORD -> CNT  )
 
IF ( ( ORD -> QUAL [ X ]-> IV_IND = 1 ) )
SELECT  INTO  "nl:"
FROM ( ORDER_INGREDIENT  OI )
 PLAN ( OI
WHERE (OI.ORDER_ID= ORD -> QUAL [ X ]-> ORDER_ID ))
 
ORDER BY OI.ACTION_SEQUENCE,
OI.COMP_SEQUENCE
 
HEAD OI.ACTION_SEQUENCE
 MNEMONIC_LINE = FILLSTRING ( 500 ,  " " ), FIRST_TIME = "Y"
DETAIL
 
IF ( ( FIRST_TIME = "Y" ) )
IF ( (OI.ORDERED_AS_MNEMONIC> " " ) )  MNEMONIC_LINE = CONCAT ( TRIM (OI.ORDERED_AS_MNEMONIC),
 ", " ,  TRIM (OI.ORDER_DETAIL_DISPLAY_LINE))
ELSE   MNEMONIC_LINE = CONCAT ( TRIM (OI.ORDER_MNEMONIC),  ", " ,  TRIM (
OI.ORDER_DETAIL_DISPLAY_LINE))
ENDIF
,  FIRST_TIME = "N"
ELSE
IF ( (OI.ORDERED_AS_MNEMONIC> " " ) )  MNEMONIC_LINE = CONCAT ( TRIM ( MNEMONIC_LINE ),  ", " ,
 TRIM (OI.ORDERED_AS_MNEMONIC),  ", " ,  TRIM (OI.ORDER_DETAIL_DISPLAY_LINE))
ELSE   MNEMONIC_LINE = CONCAT ( TRIM ( MNEMONIC_LINE ),  ", " ,  TRIM (OI.ORDER_MNEMONIC),  ", " ,
 TRIM (OI.ORDER_DETAIL_DISPLAY_LINE))
ENDIF
 
ENDIF
 
FOOT REPORT
 ORD -> QUAL [ X ]-> DISP_MNEM = MNEMONIC_LINE
 WITH  NOCOUNTER
ENDIF
 
 
ENDFOR
 
 
IF ( ( REQUEST -> TEXT > " " ) )
SET  PT -> LINE_CNT  =  0
SET  MAX_LENGTH  =  75
 EXECUTE DCP_PARSE_TEXT  VALUE ( REQUEST -> TEXT ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( TEMP -> QUAL ,  PT -> LINE_CNT )
SET  TEMP -> CNT  =  PT -> LINE_CNT
FOR (  X  =  1  TO  PT -> LINE_CNT  )
 
SET  TEMP -> QUAL [ X ]-> LINE  =  PT -> LNS [ X ]-> LINE
 
ENDFOR
 
ELSE
SET  TEMP -> CNT  =  0
ENDIF
 
 
SELECT  INTO  "nl:"
FROM ( CODE_VALUE  CV )
 PLAN ( CV
WHERE (CV.CODE_VALUE= REQUEST -> REASON_CD ) AND (CV.ACTIVE_IND= 1 ))
 
 
DETAIL
 TEMP2 -> TEXT =CV.DISPLAY
 WITH  NOCOUNTER
 
IF ( ( TEMP2 -> TEXT > " " ) )
SET  PT -> LINE_CNT  =  0
SET  MAX_LENGTH  =  65
 EXECUTE DCP_PARSE_TEXT  VALUE ( TEMP2 -> TEXT ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( TEMP2 -> QUAL ,  PT -> LINE_CNT )
SET  TEMP2 -> CNT  =  PT -> LINE_CNT
FOR (  X  =  1  TO  PT -> LINE_CNT  )
 
SET  TEMP2 -> QUAL [ X ]-> LINE  =  PT -> LNS [ X ]-> LINE
 
ENDFOR
 
ELSE
SET  TEMP2 -> CNT  =  0
ENDIF
 
 
FOR (  X  =  1  TO  ORD -> CNT  )
 
SET  PT -> LINE_CNT  =  0
SET  X20  =  FILLSTRING ( 20 ,  " " )
SET  MAX_LENGTH  =  85
 EXECUTE DCP_PARSE_TEXT  VALUE ( ORD -> QUAL [ X ]-> DISP_MNEM ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( ORD -> QUAL [ X ]-> M_QUAL ,  PT -> LINE_CNT )
SET  ORD -> QUAL [ X ]-> M_CNT  =  PT -> LINE_CNT
FOR (  Y  =  1  TO  PT -> LINE_CNT  )
 
IF ( ( Y = 1 ) )
SET  PT -> LNS [ Y ]-> LINE  =  CONCAT ( "Orderable: " ,  TRIM ( PT -> LNS [ Y ]-> LINE ))
ELSE
SET  PT -> LNS [ Y ]-> LINE  =  CONCAT ( X20 ,  TRIM ( PT -> LNS [ Y ]-> LINE ))
ENDIF
 
SET  ORD -> QUAL [ X ]-> M_QUAL [ Y ]-> M_LINE  =  PT -> LNS [ Y ]-> LINE
 
ENDFOR
 
SET  PT -> LINE_CNT  =  0
SET  X28  =  FILLSTRING ( 28 ,  " " )
SET  MAX_LENGTH  =  85
 EXECUTE DCP_PARSE_TEXT  VALUE ( ORD -> QUAL [ X ]-> DISP_LINE ),
 VALUE ( MAX_LENGTH )
SET  STAT  =  ALTERLIST ( ORD -> QUAL [ X ]-> D_QUAL ,  PT -> LINE_CNT )
SET  ORD -> QUAL [ X ]-> D_CNT  =  PT -> LINE_CNT
FOR (  Y  =  1  TO  PT -> LINE_CNT  )
 
IF ( ( Y = 1 ) )
SET  PT -> LNS [ Y ]-> LINE  =  CONCAT ( "Order Details: " ,  TRIM ( PT -> LNS [ Y ]-> LINE ))
ELSE
SET  PT -> LNS [ Y ]-> LINE  =  CONCAT ( X28 ,  TRIM ( PT -> LNS [ Y ]-> LINE ))
ENDIF
 
SET  ORD -> QUAL [ X ]-> D_QUAL [ Y ]-> D_LINE  =  PT -> LNS [ Y ]-> LINE
 
ENDFOR
 
 
ENDFOR
 
 
SELECT  INTO  "nl:"
FROM ( ENCOUNTER  E )
 
WHERE (E.ENCNTR_ID= REQUEST -> ENCNTR_ID )
 
HEAD REPORT
 
IF ( (E.LOC_FACILITY_CD= 633867 ) )  PRINTER ="ph1124"
ELSEIF ( (E.LOC_FACILITY_CD= 24988864 ) )  PRINTER ="lasfp01655"  ;FSH
ELSEIF ( (E.LOC_FACILITY_CD= 24988862 ) )  PRINTER ="lasfp01655"  ;FSH
ELSEIF ( (E.LOC_FACILITY_CD= 24988859 ) )  PRINTER ="lasfp01655"  ;FSH
ELSEIF ( (E.LOC_FACILITY_CD= 24988885 ) )  PRINTER ="Maijph1401e"  ;ISJ
ELSEIF ( (E.LOC_FACILITY_CD= 24988897 ) )  PRINTER ="merhpha02"  ;RCMC
ELSEIF ( (E.LOC_FACILITY_CD= 115041500 ) )  PRINTER ="Maijph1401e" ;St James
ELSEIF ( (E.LOC_FACILITY_CD= 24988893 ) )  PRINTER ="Maijph1401e" ;Waseca
ELSEIF ( (E.LOC_FACILITY_CD= 24988890 ) )  PRINTER ="Maijph1401e" ;Springfield Hosp
ELSEIF ( (E.LOC_FACILITY_CD= 24988889 ) )  PRINTER ="Maijph1401e" ;Springfield Clinic
ELSEIF ( (E.LOC_FACILITY_CD= 24988876 ) )  PRINTER ="Lcmcpha" ;LCMC
ELSEIF ( (E.LOC_FACILITY_CD= 24988847 ) )  PRINTER ="camhpharm001"  ;Cannon Falls
ELSEIF ( (E.LOC_FACILITY_CD= 24988850 ) )  PRINTER ="fafh-pharmacy-01"  ;Fairmont
;ELSEIF ( (E.LOC_FACILITY_CD= 24988850 ) )  PRINTER ="Maijph1401e"   ;Fairmont to ISJ
ELSEIF ( (E.LOC_FACILITY_CD= 24987324 ) )  PRINTER ="alnhip1lsr1"  ;Albert Lea
ELSEIF ( (E.LOC_FACILITY_CD= 24988840 ) )  PRINTER ="auhoph01lsr1"  ;Austin
ELSEIF ( (E.LOC_FACILITY_CD= 792751054 ) )  PRINTER ="rwhoph02"  ;002  REd Wing
;003 block  Added additional facilities
ELSEIF ( (E.LOC_FACILITY_CD= 535447694 ) )  PRINTER ="maqn-pha01"  ;003  New Prague 
ELSEIF ( (E.LOC_FACILITY_CD= 3196527.00) )  PRINTER ="phl785" ;	EU Barron Hosp
ELSEIF ( (E.LOC_FACILITY_CD= 3196529.00) )  PRINTER ="phl124" ;	EU Bloomer Hosp
ELSEIF ( (E.LOC_FACILITY_CD= 3186521.00) )  PRINTER ="phl124" ;	EU EauCl HospBH
ELSEIF ( (E.LOC_FACILITY_CD= 3196531.00) )  PRINTER ="phl124" ;	EU Osseo Hosp
;003 end block
;ELSEIF ( (E.LOC_FACILITY_CD<= 0 ) )  PRINTER ="ph1124"
;ELSEIF ( (E.LOC_FACILITY_CD> 0 ) )  PRINTER ="ph1124"
ENDIF
 
 WITH  NOCOUNTER
 
SELECT  INTO  VALUE ( PRINTER )
FROM ( DUMMYT  D  WITH  SEQ = 1 )
 PLAN ( D )
 
 
HEAD REPORT
 XCOL = 0 ,
 YCOL = 0
DETAIL
 "{f/12}{cpi/12}" ,
 ROW + 1 ,
 XCOL = 40 ,
 YCOL = 50 ,
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}Print Date/Time: {endb}" ,
 CURDATE ,
 " " ,
 CURTIME ,
 ROW + 1 ,
 YCOL =( YCOL + 24 ),
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}From Unit: {endb}" ,
 UNIT ,
 ROW + 1 ,
 YCOL =( YCOL + 15 ),
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}To: {endb}Pharmacy" ,
 ROW + 1 ,
 YCOL =( YCOL + 15 ),
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}Sent By: {endb}" ,
 REQPROV ,
 ROW + 1 ,
 YCOL =( YCOL + 40 ),
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}{u}PHARMACY MEDICATION REORDER / IV SCHEDULE" ,
 ROW + 1 ,
 YCOL =( YCOL + 30 ),
 
FOR (  X  =  1  TO  ORD_CNT  )
 
FOR (  Y  =  1  TO  ORD -> QUAL [ X ]-> M_CNT  )
 XCOL = 40
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )) "{b/10}"  ORD -> QUAL [ X ]-> M_QUAL [ Y ]-> M_LINE  ROW +
 1  YCOL =( YCOL + 12 )
 
ENDFOR
 
FOR (  Y  =  1  TO  ORD -> QUAL [ X ]-> D_CNT  )
 XCOL = 40
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )) "{b/14}"  ORD -> QUAL [ X ]-> D_QUAL [ Y ]-> D_LINE  ROW +
 1  YCOL =( YCOL + 12 )
 
ENDFOR
 YCOL =( YCOL + 12 )
 
ENDFOR
,
 XCOL = 40 ,
 YCOL =( YCOL + 24 ),
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}Patient Name: {endb}" ,
 NAME ,
 ROW + 1 ,
 YCOL =( YCOL + 12 ),
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}Medical Record #: {endb}" ,
 MRN ,
 ROW + 1 ,
 YCOL =( YCOL + 12 ),
 
CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}FIN #: {endb}" ,
 FIN ,
 ROW + 1 ,
 YCOL =( YCOL + 12 ),
 
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}Location: {endb}" ,
 LOC ,
 ROW + 1 ,
 YCOL =( YCOL + 30 ),
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}Reason: " ,
 ROW + 1 ,
 
FOR (  X  =  1  TO  TEMP2 -> CNT  )
 XCOL = 90
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )) TEMP2 -> QUAL [ X ]-> LINE  ROW + 1  YCOL =( YCOL + 12 )
 
ENDFOR
,
 YCOL =( YCOL + 5 ),
 XCOL = 40 ,
 
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )),
 "{b}Comments: " ,
 ROW + 1 ,
 
;003  FOR (  X  =  1  TO  TEMP2 -> CNT  )
 XCOL = 100
 CALL PRINT ( CALCPOS ( XCOL ,  YCOL )) TEMP -> QUAL [ X ]-> LINE  ROW + 1  YCOL =( YCOL + 12 )
 
ENDFOR
 
 WITH  NOCOUNTER , DIO = POSTSCRIPT , MAXCOL = 500 , MAXROW = 500
 END GO
 
 
 
