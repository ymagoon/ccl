;*** Generated by translate command; please verify contents before re-including in CCL ***
DROP PROGRAM   GET_INBOX_JOURNAL_PG : DBA  GO
CREATE PROGRAM  GET_INBOX_JOURNAL_PG : DBA
 
SET  MODIFY  =  PREDECLARE
 
RECORD  INTERNAL  (
 1  QUAL [*]
 2  TASK_ID  =  F8
 2  NAME_LAST_KEY  =  VC )
 
DECLARE  MS_STATUS_CD_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MS_TYPE_CD_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MS_SEARCH_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MS_START_AT_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MS_INNER_ORDER_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MS_OUTER_ORDER_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MS_PRIMARY_COLUMN  =  VC  WITH  PROTECT , NOCONSTANT (" " )
 
DECLARE  MS_SELECT_STATEMENT  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MS_OUT_SELECT_STATEMENT  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MS_SELECT_ASSIGN_STATEMENT  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
DECLARE  MD_DATE_LIMIT  =  Q8  WITH  PROTECT , NOCONSTANT
 
DECLARE  MS_ECHO_LINE  =  VC  WITH  PROTECT , NOCONSTANT ( FILLSTRING ( 80 , "-" ))
 
DECLARE  MN_ERROR_IND  =  I1  WITH  PROTECT , NOCONSTANT ( 0 )
 
DECLARE  PN_STAT  =  I1  WITH  PROTECT , NOCONSTANT ( 0 )
 
DECLARE  COMP_PERS_ACTIVITY_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  6027 ,
"COMP PERS" ))
 
DECLARE  REMIDER_TASK_CD  =  F8  WITH  CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  6026 , "REMINDER" ))
 
DECLARE  TASK_CNT  =  I4  WITH  PROTECT , NOCONSTANT ( 0 )
 
DECLARE  USE_PERSON_TABLE  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
 
DECLARE  USE_PRSNL_TABLE  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
 
DECLARE  MS_SORT_JOIN_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
IF ( ( VALIDATE ( MN_DEBUG_FLAG )= 0 ) )
DECLARE  MN_DEBUG_FLAG  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
ENDIF
 
 
IF ( ( VALIDATE ( MN_COL_TYPE_STRING )= 0 ) )
	DECLARE  MN_COL_TYPE_STRING  =  I2  WITH  PROTECT , CONSTANT ( 1 )
	DECLARE  MN_COL_TYPE_INTEGER  =  I2  WITH  PROTECT , CONSTANT ( 2 )
	DECLARE  MN_COL_TYPE_DOUBLE  =  I2  WITH  PROTECT , CONSTANT ( 3 )
	DECLARE  MN_COL_TYPE_DATE  =  I2  WITH  PROTECT , CONSTANT ( 4 )
	DECLARE  MN_DIRECTION_FORWARD  =  I2  WITH  PROTECT , CONSTANT ( 1 )
	DECLARE  MN_DIRECTION_BACKWARD  =  I2  WITH  PROTECT , CONSTANT ( 2 )
ENDIF
 
 
DECLARE  SBR_GET_PRIMARY_COLUMN_INFO (( PS_PRIMARY_COLUMN = VC ( REF ))) =  I1
 
DECLARE  SBR_PARSE_WHERE_CLAUSE (( DUMMY = I1 )) =  VC
 
DECLARE  SBR_CREATE_SEARCH_CLAUSE (( PS_SEARCH_CLAUSE = VC ( REF ))) =  I1
 
DECLARE  SBR_CREATE_ORDER_CLAUSE (( PS_INNER_ORDER_CLAUSE = VC ( REF )), ( PS_OUTER_ORDER_CLAUSE =
 VC ( REF ))) =  I1
 
DECLARE  SBR_CREATE_START_AT_CLAUSE (( PS_START_AT_CLAUSE = VC ( REF ))) =  I1
 
DECLARE  SBR_CHECK_ERROR (( PS_OPERATION_NAME = VC )) =  I1
 
IF ( ( VALIDATE ( REPLY -> PAGE_CONTEXT -> N_MORE_IND )= 0 ) )
	RECORD  REPLY  (
	 1  PAGE_CONTEXT
		 2  N_MORE_IND  =  I2
	 1  MESSAGE_LIST [*]
		 2  TASK_ID  =  F8
		 2  PERSON_ID  =  F8
		 2  ENCNTR_ID  =  F8
		 2  STAT_IND  =  I2
		 2  TASK_STATUS_CD  =  F8
		 2  TASK_TYPE_CD  =  F8
		 2  TASK_ACTIVITY_CD  =  F8
		 2  TASK_DT_TM  =  DQ8
		 2  TASK_CREATE_DT_TM  =  DQ8
		 2  TASK_UPDT_CNT  =  I4
		 2  TASK_UPDT_DT_TM  =  DQ8
		 2  EVENT_ID  =  F8
		 2  EVENT_CD  =  F8
		 2  COMMENTS  =  VC
		 2  MSG_TEXT_ID  =  F8
		 2  MSG_SUBJECT  =  VC
		 2  MSG_SUBJECT_CD  =  F8
		 2  MSG_SENDER_PERSON_ID  =  F8
		 2  MSG_SENDER_PRSNL_ID  =  F8
		 2  NAME_LAST_KEY  =  VC
		 2  ASSIGN_PRSNL_LIST [*]
			 3  ASSIGN_PRSNL_ID  =  F8
			 3  ASSIGN_MSG_TEXT_ID  =  F8
			 3  ASSIGN_TASK_STATUS_CD  =  F8
			 3  ASSIGN_UPDT_CNT  =  I4
			 3  ASSIGN_UPDT_DT_TM  =  DQ8
			 3  ASSIGN_SCHEDULED_DT_TM  =  DQ8
			 3  ASSIGN_REMIND_DT_TM  =  DQ8
		 2  ASSIGN_PERSON_LIST [*]
			 3  ASSIGN_PERSON_ID  =  F8
			 3  ASSIGN_MSG_TEXT_ID  =  F8
			 3  ASSIGN_TASK_STATUS_CD  =  F8
			 3  ASSIGN_UPDT_CNT  =  I4
			 3  ASSIGN_UPDT_DT_TM  =  DQ8
			 3  ASSIGN_SCHEDULED_DT_TM  =  DQ8
			 3  ASSIGN_REMIND_DT_TM  =  DQ8
		 2  ASSIGN_PRSNL_GROUP_LIST [*]
			 3  ASSIGN_PRSNL_GROUP_ID  =  F8
			 3  ASSIGN_PRSNL_ID  =  F8
			 3  ASSIGN_MSG_TEXT_ID  =  F8
			 3  ASSIGN_TASK_STATUS_CD  =  F8
			 3  ASSIGN_UPDT_CNT  =  I4
			 3  ASSIGN_UPDT_DT_TM  =  DQ8
			 3  ASSIGN_SCHEDULED_DT_TM  =  DQ8
			 3  ASSIGN_REMIND_DT_TM  =  DQ8
		 2  MSG_SENDER_PRSNL_GROUP_ID  =  F8
		 2  SCHEDULED_DT_TM  =  DQ8
		 2  REMIND_DT_TM  =  DQ8
		 2  PROXY_PRSNL_ID  =  F8
	 1  STATUS_DATA
		 2  STATUS  =  C1
		 2  SUBEVENTSTATUS [ 1 ]
			 3  OPERATIONNAME  =  C25
			 3  OPERATIONSTATUS  =  C1
			 3  TARGETOBJECTNAME  =  C25
			 3  TARGETOBJECTVALUE  =  VC )
ENDIF
 
 
SET  PN_STAT  =  INITREC ( REPLY )
 
IF ( ( MN_DEBUG_FLAG = 1 ) )
 CALL ECHORECORD ( REQUEST )
ENDIF
 
 
IF ( ( SBR_GET_PRIMARY_COLUMN_INFO ( MS_PRIMARY_COLUMN )= 0 ) )  
	GO TO  EXIT_PROGRAM
ENDIF
 
 
IF ( ( SBR_CREATE_START_AT_CLAUSE ( MS_START_AT_CLAUSE )= 0 ) )  
	GO TO  EXIT_PROGRAM
ENDIF
 
 
IF ( ( SBR_CREATE_SEARCH_CLAUSE ( MS_SEARCH_CLAUSE )= 0 ) )  
	GO TO  EXIT_PROGRAM
ENDIF
 
 
IF ( ( SBR_CREATE_ORDER_CLAUSE ( MS_INNER_ORDER_CLAUSE ,  MS_OUTER_ORDER_CLAUSE )= 0 ) )  
	GO TO EXIT_PROGRAM
ENDIF
 
 
IF ( ( MN_DEBUG_FLAG = 1 ) )
 CALL ECHO ( MS_ECHO_LINE )
 CALL ECHO ("ms_search_clause: " )
 CALL ECHO ( MS_SEARCH_CLAUSE )
 CALL ECHO ( MS_ECHO_LINE )
 CALL ECHO ("ms_start_at_clause: " )
 CALL ECHO ( MS_START_AT_CLAUSE )
 CALL ECHO ( MS_ECHO_LINE )
 CALL ECHO ( MS_ECHO_LINE )
 CALL ECHO ("ms_inner_order_clause: " )
 CALL ECHO ( MS_INNER_ORDER_CLAUSE )
 CALL ECHO ("ms_outer_order_clause: " )
 CALL ECHO ( MS_OUTER_ORDER_CLAUSE )
 CALL ECHO ( MS_ECHO_LINE )
ENDIF
 
 
SET  REPLY -> PAGE_CONTEXT -> N_MORE_IND  =  0
 
SET  MS_SELECT_STATEMENT  =  CONCAT (" select into 'nl:'" , " from " , "   ((select  " ,
"         pn_row_number = row_number() over (order by " ,  MS_INNER_ORDER_CLAUSE , ")" ,
"         ,ta.task_id  " , "         ,ta.person_id  " , "         ,ta.updt_dt_tm  " ,
"         ,ta.remind_dt_tm " , "         ,ta.task_create_dt_tm " )
 
IF ( ( USE_PERSON_TABLE = 1 ) )
SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , ", p.name_last_key, p.name_first_key "
, ", fullname = concat(trim(p.name_last_key),',', trim(p.name_first_key)) " )
ELSEIF ( ( USE_PRSNL_TABLE = 1 ) )
SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT ,
", pr.name_last_key, pr.name_first_key " ,
", fullname = concat(trim(pr.name_last_key),',', trim(pr.name_first_key)) " )
ENDIF
 
 
SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , "  from task_activity ta " )
 
IF ( ( REQUEST -> CHART_REMINDERS_FLAG = 0 ) )
SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , " , task_activity_assignment taa " )
ENDIF
 
 
IF ( ( USE_PERSON_TABLE = 1 ) )
	SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , ", person p " )
	ELSEIF ( ( USE_PRSNL_TABLE = 1 ) )
	SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , ", prsnl pr " )
ENDIF
 
 
SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , 
					"        where (" ,  MS_SEARCH_CLAUSE ,
					")" , "          and (" ,  MS_START_AT_CLAUSE , ")" , 
					"       with sqltype('F8' " ,
					"                    ,' F8' " , 
					"                    ,' F8' " , 
					"                    ,					' DQ8' " ,
					"                    ,' DQ8' " ,
				 	"                    ,' DQ8' " )
 
IF (  (( ( USE_PERSON_TABLE = 1 ) )  OR  ( USE_PRSNL_TABLE  ))  )
	SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , ",'VC', 'VC', 'VC' " )
ENDIF
 
 
SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , " )) a) " ,
" where pn_row_number <= (request->page_context->directives->n_page_size + 1 )" , " order by " ,
 MS_OUTER_ORDER_CLAUSE , " head report " , "   cnt = 0 " , " 	 init = 0 " , " head a.task_id " ,
"	if(cnt < request->page_context->directives->n_page_size) " ,
"		if (a.pn_row_number > request->page_context->directives->n_page_size " ,
"				and request->page_context->directives->n_page_direction = 2 " , "				and init = 0 )" ,
"			init = 1 " , " 			reply->page_context->n_more_ind = 1 " , "		else " , "  		cnt = cnt + 1 " ,
"   	if (cnt > size(internal->qual,5)) " , "     		stat = alterlist(internal->qual,cnt + 20) " ,
"   	endif " , "            internal->qual[cnt].task_id = a.task_id " )
 
IF (  (( ( USE_PERSON_TABLE = 1 ) )  OR  (( USE_PRSNL_TABLE = 1 ) ))  )
	SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT ,
	" internal->qual[cnt].name_last_key = a.fullname " )
ENDIF
 
 
SET  MS_SELECT_STATEMENT  =  CONCAT ( MS_SELECT_STATEMENT , "		endif " , "	else " ,
" 		reply->page_context->n_more_ind = 1 " , "	endif " , " foot report " ,
"   stat = alterlist(internal->qual,cnt) " , "   task_cnt = cnt " , " with nocounter go " )
 
IF ( ( MN_DEBUG_FLAG = 1 ) )
 CALL ECHO ( MS_ECHO_LINE )
 CALL ECHO ( MS_SELECT_STATEMENT )
 CALL ECHO ( MS_ECHO_LINE )
ENDIF
 
 
 CALL PARSER ( MS_SELECT_STATEMENT )
 
IF ( ( TASK_CNT > 0 ) )
	SET  MS_OUT_SELECT_STATEMENT  =  CONCAT (" select into 'nl:' " ,
	"  	from (dummyt d with seq = value(task_cnt)), " , "    	task_activity ta " , "   	plan d " ,
	"   	join ta " , "   		where ta.task_id = internal->qual[d.seq].task_id " , " 	head report  " ,
	"		stat = alterlist(reply->message_list,task_cnt)   		 " , "	detail	 " ,
	"    	reply->message_list[d.seq]->task_id                   = ta.task_id   " ,
	"    	reply->message_list[d.seq]->person_id                 = ta.person_id " ,
	"    	reply->message_list[d.seq]->encntr_id                 = ta.encntr_id " ,
	"    	reply->message_list[d.seq]->stat_ind                  = ta.stat_ind " ,
	"    	reply->message_list[d.seq]->task_status_cd            = ta.task_status_cd " ,
	"    	reply->message_list[d.seq]->task_type_cd              = ta.task_type_cd " ,
	"    	reply->message_list[d.seq]->task_activity_cd          = ta.task_activity_cd " ,
	"    	reply->message_list[d.seq]->task_dt_tm                = ta.task_dt_tm " ,
	"    	reply->message_list[d.seq]->task_create_dt_tm         = ta.task_create_dt_tm " ,
	"    	reply->message_list[d.seq]->task_updt_cnt             = ta.updt_cnt " ,
	"    	reply->message_list[d.seq]->task_updt_dt_tm           = ta.updt_dt_tm " ,
	"    	reply->message_list[d.seq]->event_id                  = ta.event_id " ,
	"    	reply->message_list[d.seq]->event_cd                  = ta.event_cd " ,
	"    	reply->message_list[d.seq]->comments                  = ta.comments " ,
	"    	reply->message_list[d.seq]->msg_text_id               = ta.msg_text_id " ,
	"    	reply->message_list[d.seq]->msg_subject               = ta.msg_subject " ,
	"    	reply->message_list[d.seq]->msg_subject_cd            = ta.msg_subject_cd " ,
	"    	reply->message_list[d.seq]->msg_sender_person_id      = ta.msg_sender_person_id " ,
	"    	reply->message_list[d.seq]->msg_sender_prsnl_id       = ta.msg_sender_id " ,
	"    	reply->message_list[d.seq]->msg_sender_prsnl_group_id = ta.msg_sender_prsnl_group_id " ,
	"    	reply->message_list[d.seq]->scheduled_dt_tm           = ta.scheduled_dt_tm    " ,
	"    	reply->message_list[d.seq]->remind_dt_tm              = ta.remind_dt_tm     " ,
	"    	reply->message_list[d.seq]->name_last_key     		  = internal->qual[d.seq].name_last_key" ,
	" with nocounter go " )
	 CALL PARSER ( MS_OUT_SELECT_STATEMENT )
	IF ( ( REQUEST -> LOAD_ASSIGNMENTS_FLAG = 1 ) )
		CALL SBR_CREATE_ASSIGNMENT_CLAUSE ( NULL )
		IF ( ( SBR_CHECK_ERROR ("sbr_create_assignment_clause" )= 1 ) )  
			GO TO  EXIT_PROGRAM
		ENDIF
	 
	ENDIF
 
ENDIF
 
 
IF ( ( SBR_CHECK_ERROR ("Execute main query" )= 1 ) )  GO TO  EXIT_PROGRAM
ENDIF
 
 
IF ( ( MN_DEBUG_FLAG = 1 ) )
	 CALL ECHORECORD ( REPLY )
ENDIF
 
 
SUBROUTINE   SBR_GET_PRIMARY_COLUMN_INFO  ( PS_PRIMARY_COLUMN  )
 
	DECLARE  MS_PRIMARY_COLUMN  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	SELECT  INTO "nl:"
	FROM ( DUMMYT  D  WITH  SEQ = VALUE ( SIZE ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS ,  5 )))
	 PLAN ( D
	WHERE ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> N_SORT_INDEX = 1 ))
	 
	 
	DETAIL
	 
	IF ( ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_TABLE_ALIAS ="p" ) )  
		USE_PERSON_TABLE =	 1
	ELSEIF ( ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_TABLE_ALIAS ="pr" ) )
	 	USE_PRSNL_TABLE = 1
	ENDIF
	,
	 
	IF (  (( ( USE_PERSON_TABLE = 1 ) )  OR  (( USE_PRSNL_TABLE = 1 ) ))  )  MS_SORT_JOIN_CLAUSE =
	 CONCAT (" and " ,  REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_TABLE_JOIN_ALIAS , "." ,
	 REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_JOIN_NAME , " = " ,  REQUEST ->
	 PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_TABLE_ALIAS , ".person_id " )
	ELSE   MS_SORT_JOIN_CLAUSE =" and 0 = 0 "
	ENDIF
	 
	 WITH  NOCOUNTER
	IF ( ( SBR_CHECK_ERROR ("sbr_get_primary_column_info" )= 1 ) )  RETURN ( 0 )
	 
	ELSE   RETURN ( 1 )
	 
	ENDIF
 
 
END ;Subroutine
 
 
SUBROUTINE   SBR_CREATE_START_AT_CLAUSE  ( PS_START_AT_CLAUSE  )
 
	DECLARE  MN_ITERATION_CNT  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
	DECLARE  MN_COL_IDX  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
	DECLARE  MS_CLAUSE_SEGMENT  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	DECLARE  MS_START_AT_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	DECLARE  MN_COLUMN_LIST_SIZE  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
	DECLARE  MS_OPERAND  =  VC  WITH  PROTECT , NOCONSTANT ("   " )
	DECLARE  MS_START_AT_VALUE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	DECLARE  MN_PAGE_THRESHOLD  =  I2  WITH  PROTECT , NOCONSTANT (( REQUEST -> PAGE_CONTEXT ->
	 DIRECTIVES -> N_PAGE_SIZE + 100 ))
	IF ( ( REQUEST -> PAGE_CONTEXT -> DIRECTIVES -> N_INITIAL_SEARCH_IND = 1 ) )
	SET  PS_START_AT_CLAUSE  = " 0 = 0 "  RETURN ( 1 )
	 
	ELSE
	SET  MN_COLUMN_LIST_SIZE  =  SIZE ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS ,  5 )
	FOR (  MN_ITERATION_CNT  =  0  TO ( MN_COLUMN_LIST_SIZE - 1 ) )
	 
	SELECT  INTO "nl:"
	 PN_SORT_INDEX = REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> N_SORT_INDEX
	FROM ( DUMMYT  D  WITH  SEQ = VALUE ( SIZE ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS ,  5 )))
	 PLAN ( D
	WHERE ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> N_SORT_INDEX <=( MN_COLUMN_LIST_SIZE -
	 MN_ITERATION_CNT )))
	 
	ORDER BY  PN_SORT_INDEX
	 
	DETAIL
	 
	IF ( ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> N_SORT_INDEX !=( MN_COLUMN_LIST_SIZE -
	 MN_ITERATION_CNT )) )  MS_OPERAND =" = "
	ELSE
	IF ( ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> N_DESCENDING_IND = 1 ) )
	IF ( ( REQUEST -> PAGE_CONTEXT -> DIRECTIVES -> N_PAGE_DIRECTION = MN_DIRECTION_FORWARD ) )
	 MS_OPERAND =" < "
	ELSE   MS_OPERAND =" > "
	ENDIF
	 
	ELSE
	IF ( ( REQUEST -> PAGE_CONTEXT -> DIRECTIVES -> N_PAGE_DIRECTION = MN_DIRECTION_FORWARD ) )
	 MS_OPERAND =" > "
	ELSE   MS_OPERAND =" < "
	ENDIF
	 
	ENDIF
	 
	ENDIF
	,
	 
	CASE (  REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> N_START_AT_TYPE  )
	 OF  MN_COL_TYPE_STRING :
		IF ((REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_START_AT_VALUE = NULL ) )  
			REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_START_AT_VALUE =" "
		ENDIF,
		 MS_START_AT_VALUE = BUILD ("cnvtupper(request->page_context->sort_columns[" , 
		 						D.SEQ,		
		 						"].s_start_at_value)" )

	 OF  MN_COL_TYPE_INTEGER :  
	 		MS_START_AT_VALUE = BUILD ("request->page_context->sort_columns[" ,
			D.SEQ, "].l_start_at_value" )
	 OF  MN_COL_TYPE_DOUBLE :  
	 		MS_START_AT_VALUE = BUILD ("request->page_context->sort_columns[" , D.SEQ
			, "].f_start_at_value" )
	 OF  MN_COL_TYPE_DATE :
			IF ( ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> D_START_AT_VALUE = NULL ) )
			 	MS_START_AT_VALUE = BUILD ("null" )
			ELSE   
				MS_START_AT_VALUE = BUILD ("cnvtdatetime(request->page_context->sort_columns[" , 
							D.SEQ,
							"].d_start_at_value)" )
			ENDIF
	 
	 ENDCASE
	,
	 
	IF ( ( PN_SORT_INDEX = 1 ) )
		IF ( ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [ 1 ]-> N_START_AT_TYPE = MN_COL_TYPE_STRING ) )
			IF (  USE_PERSON_TABLE  )  MS_CLAUSE_SEGMENT = CONCAT (
				concat(trim(p.name_last_key),
				',', 
				trim(p.name_first_key))" ,  
				MS_OPERAND ,  
				MS_START_AT_VALUE )
	
			ELSEIF (  USE_PRSNL_TABLE  )  
				MS_CLAUSE_SEGMENT = CONCAT (
						"concat(trim(pr.name_last_key),',', trim(pr.name_first_key))" ,  
						MS_OPERAND ,  MS_START_AT_VALUE )
			ELSE   
				MS_CLAUSE_SEGMENT = CONCAT ("cnvtupper(" ,  
					REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]->	 S_TABLE_ALIAS , 
					"." ,  
					REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME , ")" ,
		 			MS_OPERAND ,  MS_START_AT_VALUE )
			ENDIF
	 
		ELSE   
			MS_CLAUSE_SEGMENT = CONCAT ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_TABLE_ALIAS
				, "." ,  REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME ,  MS_OPERAND ,
				 MS_START_AT_VALUE )
		ENDIF
	 
	ELSE   
		MS_CLAUSE_SEGMENT = CONCAT ( MS_CLAUSE_SEGMENT , " and " ,  REQUEST -> PAGE_CONTEXT ->
	 		SORT_COLUMNS [D.SEQ]-> S_TABLE_ALIAS , "." ,  
	 		REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]->
			 S_COLUMN_NAME ,  MS_OPERAND ,  MS_START_AT_VALUE )
	ENDIF
	 
	 WITH  NOCOUNTER

	IF ( ( TEXTLEN ( TRIM ( MS_CLAUSE_SEGMENT ))> 0 ) )
	IF ( ( MN_ITERATION_CNT = 0 ) )
	SET  MS_START_AT_CLAUSE  =  CONCAT ("(" ,  MS_CLAUSE_SEGMENT , ")" )
	ELSE
	SET  MS_START_AT_CLAUSE  =  CONCAT ( MS_START_AT_CLAUSE , " OR " , "(" ,  MS_CLAUSE_SEGMENT , ")" )
	ENDIF
	 
	ENDIF
	 
	 
	ENDFOR
	 
	SET  PS_START_AT_CLAUSE  =  MS_START_AT_CLAUSE
	IF ( ( SBR_CHECK_ERROR ("sbr_create_start_at_clause" )= 1 ) )  RETURN ( 0 )
	 
	ELSE   RETURN ( 1 )
	 
	ENDIF
	 
	ENDIF
 
 
END ;Subroutine
 
 
SUBROUTINE   SBR_CREATE_SEARCH_CLAUSE  ( PS_SEARCH_CLAUSE  )
 
	DECLARE  TYPE_CD  =  F8  WITH  NOCONSTANT ( 0.0 )
	DECLARE  TYPECDSIZE  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
	DECLARE  REMINDER_FLAG  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
	DECLARE  STATUS_CD  =  F8  WITH  NOCONSTANT ( 0.0 )
	DECLARE  SIZE  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
	DECLARE  PRIMARY_DATE_COLUMN  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	SET  PRIMARY_DATE_COLUMN  =  CONCAT ( REQUEST -> PAGE_CONTEXT -> RANGES -> S_RANGE_TABLE_ALIAS ,
	"." ,  REQUEST -> PAGE_CONTEXT -> RANGES -> S_RANGE_COLUMN_NAME )
	SET  PS_SEARCH_CLAUSE  =  CONCAT (" ta.person_id = request->person_id " )
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and " ,  VALUE ( PRIMARY_DATE_COLUMN ),
	" between cnvtdatetime(request->page_context->ranges->d_earliest) " ,
	" and cnvtdatetime(request->page_context->ranges->d_latest)" )
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and ta.task_status_cd  in ( " )
	SET  SIZE  =  SIZE ( REQUEST -> STATUS_CD_LIST ,  5 )
	IF ( ( SIZE > 0 ) )
	SET  STATUS_CD  =  REQUEST -> STATUS_CD_LIST [ 1 ]-> STATUS_CD
	SET  PS_SEARCH_CLAUSE  =  BUILD ( PS_SEARCH_CLAUSE ,  STATUS_CD )
	FOR (  X  =  2  TO  SIZE  )
	 
	SET  STATUS_CD  =  REQUEST -> STATUS_CD_LIST [ X ]-> STATUS_CD
	SET  PS_SEARCH_CLAUSE  =  BUILD ( PS_SEARCH_CLAUSE , "," ,  STATUS_CD )
	 
	ENDFOR
	 
	ENDIF
	 
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , ")" )
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE ,
	" and ta.task_activity_cd = comp_pers_activity_cd " , " and ta.active_ind = 1 " )
	IF ( ( REQUEST -> CHART_REMINDERS_FLAG = 1 ) )
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and ta.task_type_cd = remider_task_cd " )
	IF ( ( REQUEST -> FUTURE_REMINDER_IND = 1 ) )
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and ta.remind_dt_tm  " ,
	" between cnvtdatetime(request->future_remind_dt_tm ) " ,
	" and cnvtdatetime(request->page_context->ranges->d_latest )" )
	ELSE
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and ta.remind_dt_tm " ,
	" <= cnvtdatetime(curdate,curtime2)" )
	ENDIF
	 
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE ,
	" and NOT EXISTS (select 'x' from task_activity_assignment a " , " where a.task_id = ta.task_id) " )
	ELSE
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE ,  MS_SORT_JOIN_CLAUSE )
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and ta.task_type_cd  in ( " )
	SET  TYPECDSIZE  =  SIZE ( REQUEST -> TYPE_CD_LIST ,  5 )
	IF ( ( TYPECDSIZE > 0 ) )
	SET  TYPE_CD  =  REQUEST -> TYPE_CD_LIST [ 1 ]-> TYPE_CD
	SET  PS_SEARCH_CLAUSE  =  BUILD ( PS_SEARCH_CLAUSE ,  TYPE_CD )
	IF ( ( UAR_GET_CODE_MEANING ( TYPE_CD )="REMINDER" ) )
	SET  REMINDER_FLAG  =  1
	ENDIF
	 
	FOR (  X  =  2  TO  TYPECDSIZE  )
	 
	IF ( ( UAR_GET_CODE_MEANING ( TYPE_CD )="REMINDER" ) )
	SET  REMINDER_FLAG  =  1
	ENDIF
	 
	SET  TYPE_CD  =  REQUEST -> TYPE_CD_LIST [ X ]-> TYPE_CD
	SET  PS_SEARCH_CLAUSE  =  BUILD ( PS_SEARCH_CLAUSE , "," ,  TYPE_CD )
	 
	ENDFOR
	 
	ENDIF
	 
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , ")" )
	IF ( ( REMINDER_FLAG = 1 ) )
	IF ( ( REQUEST -> FUTURE_REMINDER_IND = 1 ) )
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and ta.remind_dt_tm  " ,
	" between cnvtdatetime(request->future_remind_dt_tm ) " ,
	" and cnvtdatetime(request->page_context->ranges->d_latest )" )
	ELSE
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and ta.remind_dt_tm " ,
	" <= cnvtdatetime(curdate,curtime2)" )
	ENDIF
	 
	ENDIF
	 
	SET  PS_SEARCH_CLAUSE  =  CONCAT ( PS_SEARCH_CLAUSE , " and taa.active_ind = 1 " ,
	" and taa.task_id = ta.task_id " )
	ENDIF
	 
	IF ( ( SBR_CHECK_ERROR ("sbr_create_search_clause" )= 1 ) )  RETURN ( 0 )
	 
	ELSE   RETURN ( 1 )
	 
	ENDIF
 
 
END ;Subroutine
 
 
SUBROUTINE   SBR_CREATE_ASSIGNMENT_CLAUSE  ( NULL  )
 
	SELECT  INTO "nl:"
	FROM ( DUMMYT  D  WITH  SEQ = VALUE ( TASK_CNT )),
	( TASK_ACTIVITY_ASSIGNMENT  TAA )
	 PLAN ( D )
	 AND ( TAA
	WHERE (TAA.TASK_ID= REPLY -> MESSAGE_LIST [D.SEQ]-> TASK_ID ) AND (TAA.ACTIVE_IND= 1 ))
	 
	 
	HEAD TAA.TASK_ID
	 CNT2 = 0 , CNT3 = 0 , CNT4 = 0
	DETAIL
	 
	IF ( (TAA.ASSIGN_PRSNL_ID> 0 ) )  CNT2 =( CNT2 + 1 ),
	IF ( ( CNT2 > SIZE ( REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST ,  5 )) )  STAT = ALTERLIST (
	 REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST , ( CNT2 + 10 ))
	ENDIF
	,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST [ CNT2 ]-> ASSIGN_PRSNL_ID =TAA.ASSIGN_PRSNL_ID
	,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST [ CNT2 ]-> ASSIGN_MSG_TEXT_ID =TAA.MSG_TEXT_ID
	,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST [ CNT2 ]-> ASSIGN_TASK_STATUS_CD =
	TAA.TASK_STATUS_CD,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST [ CNT2 ]-> ASSIGN_UPDT_CNT =
	TAA.UPDT_CNT,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST [ CNT2 ]-> ASSIGN_UPDT_DT_TM =
	TAA.UPDT_DT_TM,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST [ CNT2 ]-> ASSIGN_REMIND_DT_TM =
	TAA.REMIND_DT_TM,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST [ CNT2 ]->
	 ASSIGN_SCHEDULED_DT_TM =TAA.SCHEDULED_DT_TM,  REPLY -> MESSAGE_LIST [D.SEQ]-> PROXY_PRSNL_ID =
	TAA.PROXY_PRSNL_ID
	ENDIF
	,
	 
	IF ( (TAA.ASSIGN_PERSON_ID> 0 ) )  CNT3 =( CNT3 + 1 ),
	IF ( ( CNT3 > SIZE ( REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST ,  5 )) )  STAT = ALTERLIST
	( REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST , ( CNT3 + 10 ))
	ENDIF
	,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST [ CNT3 ]-> ASSIGN_PERSON_ID =
	TAA.ASSIGN_PERSON_ID,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST [ CNT3 ]->
	 ASSIGN_MSG_TEXT_ID =TAA.MSG_TEXT_ID,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST [ CNT3 ]->
	 ASSIGN_TASK_STATUS_CD =TAA.TASK_STATUS_CD,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST [
	 CNT3 ]-> ASSIGN_UPDT_CNT =TAA.UPDT_CNT,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST [ CNT3
	]-> ASSIGN_UPDT_DT_TM =TAA.UPDT_DT_TM,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST [ CNT3 ]
	-> ASSIGN_REMIND_DT_TM =TAA.REMIND_DT_TM,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST [
	 CNT3 ]-> ASSIGN_SCHEDULED_DT_TM =TAA.SCHEDULED_DT_TM
	ENDIF
	,
	 
	IF ( (TAA.ASSIGN_PRSNL_GROUP_ID> 0 ) )  CNT4 =( CNT4 + 1 ),
	IF ( ( CNT4 > SIZE ( REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST ,  5 )) )  STAT =
	 ALTERLIST ( REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST , ( CNT4 + 10 ))
	ENDIF
	,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST [ CNT4 ]-> ASSIGN_PRSNL_GROUP_ID =
	TAA.ASSIGN_PRSNL_GROUP_ID,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST [ CNT4 ]->
	 ASSIGN_PRSNL_ID =TAA.ASSIGN_PRSNL_ID,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST [
	 CNT4 ]-> ASSIGN_MSG_TEXT_ID =TAA.MSG_TEXT_ID,  REPLY -> MESSAGE_LIST [D.SEQ]->
	 ASSIGN_PRSNL_GROUP_LIST [ CNT4 ]-> ASSIGN_TASK_STATUS_CD =TAA.TASK_STATUS_CD,  REPLY ->
	 MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST [ CNT4 ]-> ASSIGN_UPDT_CNT =TAA.UPDT_CNT,  REPLY ->
	 MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST [ CNT4 ]-> ASSIGN_UPDT_DT_TM =TAA.UPDT_DT_TM,
	 REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST [ CNT4 ]-> ASSIGN_REMIND_DT_TM =
	TAA.REMIND_DT_TM,  REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST [ CNT4 ]->
	 ASSIGN_SCHEDULED_DT_TM =TAA.SCHEDULED_DT_TM
	ENDIF
	 
	FOOT  TAA.TASK_ID
	 STAT = ALTERLIST ( REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_LIST ,  CNT2 ), STAT = ALTERLIST (
	 REPLY -> MESSAGE_LIST [D.SEQ]-> ASSIGN_PERSON_LIST ,  CNT3 ), STAT = ALTERLIST ( REPLY ->
	 MESSAGE_LIST [D.SEQ]-> ASSIGN_PRSNL_GROUP_LIST ,  CNT4 )
 
END ;Subroutine
 
 
	SUBROUTINE   SBR_CREATE_ORDER_CLAUSE  ( PS_INNER_ORDER_CLAUSE ,  PS_OUTER_ORDER_CLAUSE  )
 
	DECLARE  MS_INNER_ORDER_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	DECLARE  MS_OUTER_ORDER_CLAUSE  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	DECLARE  MS_SORT_ORDER_INNER  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	DECLARE  MS_SORT_ORDER_OUTER  =  VC  WITH  PROTECT , NOCONSTANT ("" )
 
	SELECT  INTO "nl:"
	 PN_SORT_INDEX = REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> N_SORT_INDEX
 
	FROM ( DUMMYT  D  WITH  SEQ = VALUE ( SIZE ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS ,  5 )))
	 PLAN ( D )
 
	ORDER BY  PN_SORT_INDEX
 
	DETAIL
 
		IF ( ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> N_DESCENDING_IND = 1 ) )
			IF ( ( REQUEST -> PAGE_CONTEXT -> DIRECTIVES -> N_PAGE_DIRECTION = MN_DIRECTION_FORWARD ) )
	 			MS_SORT_ORDER_INNER =" desc" ,  MS_SORT_ORDER_OUTER =" desc"
			ELSE
				MS_SORT_ORDER_INNER =" " ,  MS_SORT_ORDER_OUTER =" desc"
			ENDIF
 
		ELSE
			MS_SORT_ORDER_INNER =" " ,
			IF ( ( REQUEST -> PAGE_CONTEXT -> DIRECTIVES -> N_PAGE_DIRECTION = MN_DIRECTION_FORWARD ) )
	 			MS_SORT_ORDER_INNER =" " ,  MS_SORT_ORDER_OUTER =" "
			ELSE
				MS_SORT_ORDER_INNER =" desc" ,  MS_SORT_ORDER_OUTER =" "
			ENDIF
 
		ENDIF
	,
 
	IF ( ( PN_SORT_INDEX = 1 ) )
		IF ( ( CNVTLOWER(REQUEST->PAGE_CONTEXT->SORT_COLUMNS[D.SEQ]->S_COLUMN_NAME)="msg_subject" ))
	 		MS_OUTER_ORDER_CLAUSE = CONCAT (" cnvtlower(" )
		ELSE
			MS_OUTER_ORDER_CLAUSE = CONCAT (" " )
		ENDIF
	,  MS_OUTER_ORDER_CLAUSE = CONCAT ( MS_OUTER_ORDER_CLAUSE ,
	   REQUEST -> PAGE_CONTEXT ->	 SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME ),
		IF ( ( CNVTLOWER ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME )="msg_subject" ) )
			MS_OUTER_ORDER_CLAUSE = CONCAT ( MS_OUTER_ORDER_CLAUSE , ") " )
		ENDIF
	,  MS_OUTER_ORDER_CLAUSE = CONCAT ( MS_OUTER_ORDER_CLAUSE ,  MS_SORT_ORDER_OUTER ),
 
		IF ( ( CNVTLOWER ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME )=	"name_last_key" ) )
		 	MS_OUTER_ORDER_CLAUSE = CONCAT ( MS_OUTER_ORDER_CLAUSE , ", " ),
		 	MS_OUTER_ORDER_CLAUSE = CONCAT ( MS_OUTER_ORDER_CLAUSE , "name_first_key " ),
		 	MS_OUTER_ORDER_CLAUSE = CONCAT ( MS_OUTER_ORDER_CLAUSE ,  MS_SORT_ORDER_OUTER )
		ENDIF
	,
		IF ( ( CNVTLOWER ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME )="msg_subject" ))
			MS_INNER_ORDER_CLAUSE = CONCAT (" cnvtlower(" )
		ELSE
			MS_INNER_ORDER_CLAUSE = CONCAT (" " )
		ENDIF
	,  MS_INNER_ORDER_CLAUSE = CONCAT ( MS_INNER_ORDER_CLAUSE ,  REQUEST -> PAGE_CONTEXT ->
		 SORT_COLUMNS [D.SEQ]-> S_TABLE_ALIAS , "." ,
	 	REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME ),
 
		IF ( ( CNVTLOWER ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME )="msg_subject" ))
			MS_INNER_ORDER_CLAUSE = CONCAT ( MS_INNER_ORDER_CLAUSE , ") " )
		ENDIF
 
		,  MS_INNER_ORDER_CLAUSE = CONCAT ( MS_INNER_ORDER_CLAUSE ,  MS_SORT_ORDER_INNER ),
 
		IF ( ( CNVTLOWER ( REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME )=
		"name_last_key" ) )
			MS_INNER_ORDER_CLAUSE = CONCAT ( MS_INNER_ORDER_CLAUSE , ", " ),
		 	MS_INNER_ORDER_CLAUSE = CONCAT ( MS_INNER_ORDER_CLAUSE , "name_first_key " ),
		 	MS_INNER_ORDER_CLAUSE = CONCAT ( MS_INNER_ORDER_CLAUSE ,  MS_SORT_ORDER_INNER )
		ENDIF
 
	ELSE
		MS_OUTER_ORDER_CLAUSE = CONCAT ( MS_OUTER_ORDER_CLAUSE , ", " ,
			REQUEST -> PAGE_CONTEXT ->	 SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME ,
			MS_SORT_ORDER_OUTER ),
		MS_INNER_ORDER_CLAUSE = CONCAT (MS_INNER_ORDER_CLAUSE , ", " ,
			REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_TABLE_ALIAS ,
		"." ,  REQUEST -> PAGE_CONTEXT -> SORT_COLUMNS [D.SEQ]-> S_COLUMN_NAME ,  MS_SORT_ORDER_INNER )
	ENDIF
 
	 WITH  NOCOUNTER
	SET  PS_INNER_ORDER_CLAUSE  =  MS_INNER_ORDER_CLAUSE
	SET  PS_OUTER_ORDER_CLAUSE  =  MS_OUTER_ORDER_CLAUSE
	IF ( ( SBR_CHECK_ERROR ("sbr_create_order_clause" )= 1 ) )  RETURN ( 0 )
 
	ELSE   RETURN ( 1 )
 
	ENDIF
 
 
END ;Subroutine
 
 
SUBROUTINE   SBR_CHECK_ERROR  ( PS_OPERATION_NAME  )
 
	DECLARE  MS_ERROR_MSG  =  VC  WITH  PROTECT , NOCONSTANT ("" )
	IF ( ( ERROR ( MS_ERROR_MSG ,  1 )!= 0 ) )
	SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> OPERATIONNAME  =  PS_OPERATION_NAME
	SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> OPERATIONSTATUS  = "F"
	SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTNAME  = "Run time error"
	SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTVALUE  =  MS_ERROR_MSG  RETURN ( 1 )
	 
	ELSE   RETURN ( 0 )
	 
	ENDIF
 
 
END ;Subroutine
 
 
# EXIT_PROGRAM
 
IF ( ( MN_ERROR_IND = 1 ) )
SET  REPLY -> STATUS_DATA -> STATUS  = "F"
ELSE
IF ( ( SIZE ( REPLY -> MESSAGE_LIST ,  5 )= 0 ) )
SET  REPLY -> STATUS_DATA -> STATUS  = "Z"
ELSE
SET  REPLY -> STATUS_DATA -> STATUS  = "S"
ENDIF
 
ENDIF
 
 END GO
 
