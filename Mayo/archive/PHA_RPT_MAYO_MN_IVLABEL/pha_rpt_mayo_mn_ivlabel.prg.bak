;*** Generated by translate command; please verify contents before re-including in CCL ***
DROP PROGRAM   PHA_RPT_MAYO_MN_IVLABEL : DBA  GO
CREATE PROGRAM  PHA_RPT_MAYO_MN_IVLABEL : DBA
 
/*  ************************************************************************
    *                      ****  Translated Code ****                      *
    *                         MODIFICATION CONTROL LOG                     *
    ************************************************************************
    *                                                                      *
    *Mod Date     Engineer             Comment                             *
    *016 12/10/09 AKCIA-PEL            Increase room display size          *
    *017 07/22/10 AKCIA-PEL            Increase bed display size           *
    *018 03/19/14 Akcia-SE			   fix to make "Discontined" to print properly
    *								   on the label after CPOE go live, fix for canceled
    *									to cause label to print
    ************************************************************************
 
*/
 
IF (  NOT ( VALIDATE ( REPLY ,  0 ) ) )
RECORD  REPLY  (
 1  ELAPSED_TIME  =  F8
 1  STATUS_DATA
 2  STATUS  =  C1
 2  SUBEVENTSTATUS [ 1 ]
 3  OPERATIONNAME  =  C25
 3  OPERATIONSTATUS  =  C1
 3  TARGETOBJECTNAME  =  C25
 3  TARGETOBJECTVALUE  =  VC )
ENDIF
 
 
FREE SET INTERACTION
 
RECORD  INTERACTION  (
 1  DATA [*]
 2  PERSON_ID  =  F8
 2  ORDER_ID  =  F8
 2  DETAILS [*]
 3  DLG_EVENT_ID  =  F8
 3  TRIGGER_ORDER_ID  =  F8
 3  DLG_NAME  =  VC )
 
FREE SET INGREDS
 
RECORD  INGREDS  (
 1  DATA [*]
 2  DOSE  =  C20
 2  NGEN  =  C50
 2  DESC  =  C50
 2  NDC  =  C13
 2  BRAND  =  C50
 2  STR  =  F8
 2  IV_SEQ  =  I2 )
 
FREE SET ADMINS
 
RECORD  ADMINS  (
 1  DATA [*]
 2  ADMIN  =  C4 )
 
DECLARE  CNEW  =  F8
 
DECLARE  CNEW1X  =  F8
 
DECLARE  CRESUME  =  F8
 
DECLARE  CMOD  =  F8
 
DECLARE  CDC  =  F8
 
DECLARE  CSUSP  =  F8
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( 4060 , "NEW" ,  1 ,  CNEW )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( 4060 , "NEWONETIME" ,  1 ,  CNEW1X )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( 4060 , "RESUME" ,  1 ,  CRESUME )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( 4060 , "CRITMODIFY" ,  1 ,  CMOD )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( 4060 , "SUSP" ,  1 ,  CSUSP )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( 4060 , "DC" ,  1 ,  CDC )
 
DECLARE  LOC_CD  =  F8
 
SET  LOC_CD  =  UAR_GET_CODE_BY ("DISPLAY_KEY" ,  73 , "MHSPHARMLABELS" )
 
SET  ERRCODE  =  1
 
SET  ERRMSG  =  FILLSTRING ( 130 , " " )
 
SET  ERRCNT  =  0
 
SET  LINE1  =  FILLSTRING ( 130 , "-" )
 
SET  LINE2  =  FILLSTRING ( 130 , "=" )
 
SET  ENDPAGE  =  FILLSTRING ( 130 , "." )
 
SET  RUNTYPE  =  FILLSTRING ( 12 , " " )
 
SET  INGCNT  =  0
 
SET  CHOURS  =  0.0
 
SET  CDF_MEANING  =  FILLSTRING ( 12 , " " )
 
SET  CODE_VALUE  =  0.0
 
SET  CODE_SET  =  0.0
 
SET  PRINTFILE  =  CONCAT ("cer_print:phaiv_" ,  TRIM ( CNVTSTRING ( DATA -> RUN_ID )), ".dat" )
 
SET  LABEL_X_POS  =  0
 
SET  LABEL_Y_POS  =  0
 
SET  CDF_MEANING  = "HOURS"
 
SET  CODE_SET  =  54
 
 EXECUTE CPM_GET_CD_FOR_CDF
 
SET  CHOURS  =  CODE_VALUE
 
SET  INGCNT  =  0
 
SET  ICNT1  =  0
 
SET  ICNT2  =  0
 
SELECT  DISTINCT  INTO "NL:"
FP.PERSON_ID
FROM ( FILL_PRINT_ORD_HX  FP )
 
WHERE (FP.RUN_ID= DATA -> RUN_ID ) AND (FP.ORDER_ID> 0 )
ORDER BY FP.ORDER_ID
 
DETAIL
 ICNT1 =( ICNT1 + 1 ),
 STAT = ALTERLIST ( INTERACTION -> DATA ,  ICNT1 ),
 INTERACTION -> DATA [ ICNT1 ]-> ORDER_ID =FP.ORDER_ID
 WITH  NOCOUNTER
 
SELECT  INTO "NL:"
C.CDF_MEANING
FROM ( CODE_VALUE  C )
 
WHERE (C.CODE_SET= 4040 ) AND (C.CODE_VALUE= DATA -> RUN_TYPE_CD )
 
DETAIL
 RUNTYPE =C.CDF_MEANING
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
OD.LABEL_XPOS,
OD.LABEL_YPOS
FROM ( FILL_PRINT_HX  FPX ),
( OUTPUT_DEST  OD )
 PLAN ( FPX
WHERE ( DATA -> RUN_ID =FPX.RUN_ID))
 AND ( OD
WHERE (FPX.OUTPUT_DEVICE_CD=OD.DEVICE_CD))
 
 
DETAIL
 LABEL_X_POS =OD.LABEL_XPOS,
 LABEL_Y_POS =OD.LABEL_YPOS
 WITH  NOCOUNTER
 
 EXECUTE PHA_GET_ORD_INTERACTION
 
SELECT  INTO  VALUE ( PRINTFILE )
 ORD_SEQ = BUILD (PO.ORDER_ID, PO.IV_IN_SEQ),
 DISP_STRING = UAR_GET_CODE_DESCRIPTION (PO.DISPENSE_CATEGORY_CD),
 ADMIN_DT_STR =PO.ADMIN_DT_TM"mm/dd/yy hh:mm"
,
 NOTE_TEXT1 = SUBSTRING ( 1 ,  1000 , LT1.LONG_TEXT),
 NOTE_TEXT2 = SUBSTRING ( 1 ,  1000 , LT2.LONG_TEXT),
 FREQ_DESC = UAR_GET_CODE_DESCRIPTION (PO.FREQUENCY_CD),
 ROUTE_DESC = SUBSTRING ( 1 ,  25 ,  UAR_GET_CODE_DESCRIPTION (PO.ROUTE_CD)),
 LABEL_TYPE = UAR_GET_CODE_MEANING (PO.LABEL_TYPE_CD),
 PRINTED_AT = CNVTDATETIME ( CURDATE ,  CURTIME3 ),
 PERSON_SORT = BUILD (PO.PERSON_NAME_S, PO.PERSON_ID),
 FACILITY =CVO.ALIAS
FROM ( FILL_PRINT_ORD_HX  PO ),
( FILL_PRINT_HX  HX ),
( CODE_VALUE_OUTBOUND  CVO ),
( LONG_TEXT  LT1 ),
( LONG_TEXT  LT2 ),
( DUMMYT  D ),
( DUMMYT  D2 ),
( DUMMYT  D4 )
 PLAN ( PO
WHERE ( DATA -> RUN_ID =PO.RUN_ID))
 AND ( HX
WHERE (PO.RUN_ID=HX.RUN_ID) AND  (( (PO.FILL_QUANTITY> 0 ) )  OR  ( (( (PO.LABEL_TYPE_CD IN ( CMOD ,
 CRESUME ,
 CDC ,
 CSUSP )) )  OR  ( (( ( CNVTUPPER (HX.BATCH_DESCRIPTION) IN ("LABEL REQUEST" ,
"EXTRA DOSE" )) )  OR  ((PO.ORDER_STATUS_ENUM IN ( 14 ,
 7 ,
 8 ,
 9 ,      ;018
 10 )) ))  ))  )) )
 AND ( D )
 AND ( LT1
WHERE (PO.LABEL1_ID=LT1.LONG_TEXT_ID))
 AND ( D2 )
 AND ( LT2
WHERE (PO.LABEL2_ID=LT2.LONG_TEXT_ID))
 AND ( D4 )
 AND ( CVO
WHERE (PO.FACILITY_CD=CVO.CODE_VALUE) AND (CVO.CODE_SET= 220 ) AND (CVO.CONTRIBUTOR_SOURCE_CD=
 LOC_CD ))
 
ORDER BY PO.ORD_DESC,
PO.LOCATION_CD,
 PERSON_SORT ,
PO.ORDER_ID,
PO.BAG_NBR,
PO.INGRED_SEQ
 
HEAD REPORT
 STRT_LBL = FILLSTRING ( 68 , "=" ),
 END_LABEL = FILLSTRING ( 68 , "=" ),
 SCH_PRN = FILLSTRING ( 3 , " " ),
 PAT_NBR = FILLSTRING ( 22 , " " ),
 INFUSE_OVER = 0 ,
 DSUNITS = FILLSTRING ( 7 , " " ),
 DSINFUSE = FILLSTRING ( 25 , " " ),
 DSVOLUME = FILLSTRING ( 20 , " " ),
 DSFREQ = FILLSTRING ( 8 , " " ),
 DSDISP = FILLSTRING ( 7 , " " ),
 DSSTATUS = FILLSTRING ( 19 , " " ),
 NOTE_TEXT_IN = FILLSTRING ( 1000 , " " ),
 MAXLINES = 60 ,
 POSVAR = FILLSTRING ( 30 , " " ),
 XVAR = 0 ,
 YVAR = 0 ,
 YVAR1 = 0 ,
 XVAR1 = 0 ,
 XOFFSET = 80 ,
 YOFFSET = 0 ,
 LAST_MOD ="000" ,
 
MACRO ( SET_FONT_A )
 LINEFEED = 5 ,
"{f/0/3}{lpi/32}{cpi/24}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_1 )
 LINEFEED = 12 ,
"{f/2/1}{lpi/6}{cpi/18}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_2 )
 LINEFEED = 7 ,
"{f/2/1}{lpi/8}{cpi/18}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_3 )
 LINEFEED = 10 ,
"{f/0/5}{lpi/32}{cpi/18}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_4 )
 LINEFEED = 10 ,
"{f/1/1}{cpi/12}{lpi/8}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_5 )
 LINEFEED = 10 ,
"{f/5/1}{cpi/17}{lpi/12}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_6 )
 LINEFEED = 14 ,
"{f/2/1}{lpi/4}{cpi/18}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_7 )
 LINEFEED = 15 ,
"{f/1/1}{lpi/6}{cpi/18}{B}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_8 )
 LINEFEED = 12 ,
"{f/1/1}{lpi/8}{cpi/18}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( SET_FONT_9 )
 LINEFEED = 5 ,
"{f/1/1}{cpi/23}{lpi/12}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( CALC_POS )
 ROW + 1 ,
 XVAR =( XVAR1 + XOFFSET ),
 YVAR =( YVAR1 + YOFFSET ),
 
 CALL PRINT ( CALCPOS ( XVAR ,  YVAR )),
 XVAR1 = 0
ENDMACRO
,
 
MACRO ( LINE_FEED )
 ROW + 1 ,
 YVAR1 =( YVAR1 + LINEFEED ),
 
IF ( ( YVAR1 >= MAXLINES ) )  FORM_FEED
ENDIF
 
ENDMACRO
,
 
MACRO ( PRNT_BARCODE )
 DSBAR_CODE = FILLSTRING ( 15 , " " ),
 BAR_CODE = FILLSTRING ( 18 , " " ),
 ORD_ID = CNVTSTRING (PO.DISPENSE_ID,  9 ,  0 ,  R ),
 SEQ_ID = CNVTSTRING (PO.IV_IN_SEQ,  2 ,  0 ,  R ),
 BAR_CODE = CONCAT ("*T" ,  ORD_ID , "*{f/0}" ),
 DSBAR_CODE = CONCAT ( TRIM ( ORD_ID )),
 ROW + 1 ,
"{lpi/12}{cpi/8}{f/28/3}" ,
 XVAR =( XVAR1 + XOFFSET ),
 YVAR =( YVAR1 + YOFFSET ),
 POSVAR = BUILD ("{POS/" ,  XVAR , "/" ,  YVAR , "}" ),
 POSVAR ,
 COL +( SIZE ( TRIM ( POSVAR ))- SIZE ( POSVAR )),
 BAR_CODE ,
 ROW + 1
ENDMACRO
,
 
MACRO ( FORM_FEED )
 ROW + 1 ,
 YVAR1 = 0 ,
 XVAR1 = 0 ,
"{NP}" ,
 ROW + 1
ENDMACRO
,
 
MACRO ( BUILD_DOSE )
 DOSE = FILLSTRING ( 14 , " " ),
 
IF ( (PO.DOSE_QUANTITY= 0 ) )  DOSE ="0"
ELSE   PASS_FIELD_IN =PO.DOSE_QUANTITY,  PARSE_ZEROES ,  DOSE = CONCAT ( TRIM ( DSVALUE ), " " ,
 TRIM (PO.DOSE_QUANTITY_UNIT_S))
ENDIF
 
ENDMACRO
,
 
MACRO ( BUILD_FILL )
 FILL = FILLSTRING ( 14 , " " ),
 
IF ( (PO.FILL_QUANTITY IN ( 0 ,
 NULL )) )  FILL ="0"
ELSE   PASS_FIELD_IN =PO.FILL_QUANTITY,  PARSE_ZEROES ,  FILL = TRIM ( DSVALUE )
ENDIF
 
ENDMACRO
,
 
MACRO ( BUILD_INFUSE )
 DSINFUSE = FILLSTRING ( 14 , " " ),
 
IF ( (PO.INFUSE_OVER> 0 ) )  PASS_FIELD_IN =PO.INFUSE_OVER,  PARSE_ZEROES ,  DSINFUSE = CONCAT (
 TRIM ( DSVALUE ), " " ,  TRIM (PO.INFUSE_UNIT_S))
ENDIF
 
ENDMACRO
,
 
MACRO ( BLD_TOT_VOL )
 TOT_VOL = FILLSTRING ( 14 , " " ),
 
IF ( (PO.TOT_VOLUME= 0 ) )  TOT_VOL ="0"
ELSE   TOT_VOL = CONCAT ( TRIM ( FORMAT (PO.TOT_VOLUME, "##########.##;,ILT(1);F" )), " mL" )
ENDIF
 
ENDMACRO
,
 
MACRO ( BUILD_RATE )
 DSRATE = FILLSTRING ( 16 , " " ),
 
IF ( (PO.TITRATE_IND= 1 ) )  DSRATE ="Titrate"
ELSE   DSRATE = CONCAT ( TRIM ( FORMAT (PO.ML_HR, "##########.##;,ILT(1);F" )), " mL/hr" )
ENDIF
 
ENDMACRO
,
 LN_WIDTH_IN = 0 ,
 STR_CUSTOM_ERROR = FILLSTRING ( 200 , " " ),
 
MACRO ( PRNT_NOTE )
 STUCK = 0 ,
 COUNT_NO_SPACES = 0 ,
 COUNTER = 0 ,
 
IF ( ( LN_WIDTH_IN = 0 ) )  LN_WIDTH_IN = 48
ENDIF
,
 
 CALL ECHO ( BUILD ("NOTE TEXT IN =" ,  NOTE_TEXT_IN )),
 TIME_TO_LOOP = 0 ,
 TIME_TO_LOOP =(( SIZE ( TRIM ( NOTE_TEXT_IN ,  1 ))/ 48 )+ 1 ),
 
 CALL ECHO ( BUILD ("time to loop = " ,  TIME_TO_LOOP )),
 
FOR (  NOTE_LENGTH  =  1  TO  TIME_TO_LOOP  )
 
FOR (  TIME  =  1  TO  48  )
 COUNTER =( COUNTER + 1 ),
IF ( ( SUBSTRING ( COUNTER ,  1 ,  NOTE_TEXT_IN )!=" " ) )  COUNT_NO_SPACES =( COUNT_NO_SPACES + 1 )
,
IF ( ( COUNT_NO_SPACES >= 48 ) )  STUCK = 1 ,
 CALL ECHO ("stuck" ),  NOTE_LENGTH = TIME_TO_LOOP ,  TIME = LN_WIDTH_IN
ENDIF
 
ELSE   COUNT_NO_SPACES = 0
ENDIF
 
 
ENDFOR
 
 
ENDFOR
,
 
 CALL ECHO ( BUILD ("Count No Spaces = " ,  COUNT_NO_SPACES )),
 
IF ( ( LN_WIDTH_IN = 0 ) )  LN_WIDTH_IN = 48
ENDIF
,
 
 CALL ECHO ( BUILD ("ln_width_in =" ,  LN_WIDTH_IN )),
 STUCK = 0 ,
 COUNT_NO_SPACES = 0 ,
 COUNTER = 0 ,
 TIME_TO_LOOP = 0 ,
 TIME_TO_LOOP =(( SIZE ( TRIM ( NOTE_TEXT_IN ,  1 ))/ VALUE ( LN_WIDTH_IN ))+ 1 ),
 
FOR (  NOTE_LENGTH  =  1  TO  TIME_TO_LOOP  )
 
FOR (  TIME  =  1  TO  LN_WIDTH_IN  )
 COUNTER =( COUNTER + 1 ),
IF ( ( SUBSTRING ( COUNTER ,  1 ,  NOTE_TEXT_IN )!=" " ) )  COUNT_NO_SPACES =( COUNT_NO_SPACES + 1 )
,
IF ( ( COUNT_NO_SPACES >= LN_WIDTH_IN ) )  STUCK = 1 ,
 CALL ECHO ("stuck" ),  NOTE_LENGTH = TIME_TO_LOOP ,  TIME = LN_WIDTH_IN
ENDIF
 
ELSE   COUNT_NO_SPACES = 0
ENDIF
 
 
ENDFOR
 
 
ENDFOR
,
 
IF ( ( STUCK = 0 ) )  START_POS = 1 ,  BIG_STRING_LEN = 0 ,  COUNT = 0 ,  NOTE_STRING = FILLSTRING (
 88 , " " ),  HOLD_STRING = FILLSTRING ( 88 , " " ),  RETURN_FOUND = 0 ,  BIG_STRING_LEN = SIZE (
 TRIM ( NOTE_TEXT_IN )),  CR = FILLSTRING ( 1 , " " ),  CR = CHAR ( 13 ),
WHILE ( (( BIG_STRING_LEN - START_POS )> 0 ))
 SPACE_LOC = 0 , RETURN_FOUND = 0 , COUNT = 0 , CR_COUNT = 0 , HOLD_STRING = SUBSTRING ( START_POS
,  LN_WIDTH_IN ,  NOTE_TEXT_IN ), CR_COUNT = FINDSTRING ( CR ,  HOLD_STRING ),
 CALL ECHO ( BUILD ("CR COUNT = " ,  CR_COUNT )),
IF ( ( CR_COUNT > 0 ) AND ( SIZE ( TRIM ( SUBSTRING ( 0 , ( CR_COUNT - 1 ),  HOLD_STRING )))<=
 LN_WIDTH_IN ) )  RETURN_FOUND = 1 ,  NOTE_STRING = SUBSTRING ( 0 , ( CR_COUNT - 1 ),  HOLD_STRING )
,  NOTE_STRING = TRIM ( NOTE_STRING ,  1 ),  CALC_POS ,
 CALL ECHO ( BUILD ("XVAR1 FOR PRINT NOTE>>>>>>>>>>>>>>>>" ,  XVAR1 )),  NOTE_STRING ,  LINE_FEED ,
 CR_COUNT =( CR_COUNT + 1 ),  START_POS =( START_POS + CR_COUNT )
ENDIF
,
WHILE ( ( COUNT < LN_WIDTH_IN ) AND ( RETURN_FOUND = 0 ))
 COUNT =( COUNT + 1 ),
IF ( ( SUBSTRING ( COUNT ,  1 ,  HOLD_STRING )=" " ) AND ( RETURN_FOUND = 0 ) )  SPACE_LOC = COUNT
ENDIF
 
 
ENDWHILE
,
IF ( ( SPACE_LOC > 0 ) AND ( RETURN_FOUND = 0 ) )  NOTE_STRING = SUBSTRING ( 0 , ( SPACE_LOC - 1 ),
 HOLD_STRING ),  NOTE_STRING = TRIM ( NOTE_STRING ),  CALC_POS ,
 CALL ECHO ( BUILD ("XVAR1 FOR PRINT NOTE>>>>>>>>>>>>>>>>" ,  XVAR1 )),  NOTE_STRING ,  LINE_FEED ,
 START_POS =( START_POS + SPACE_LOC )
ENDIF
 
 
ENDWHILE
 
ELSE   CALC_POS ,
 CALL ECHO ( BUILD ("custom error" ,  STR_CUSTOM_ERROR )),
IF ( ( SIZE ( TRIM ( STR_CUSTOM_ERROR ))> 0 ) )  STR_CUSTOM_ERROR
ELSE  "See chart or contact pharmacy for more info."
ENDIF
,
 CALL ECHO ( BUILD ("Error too many continuous chars" )),  LINE_FEED
ENDIF
 
ENDMACRO
,
 
MACRO ( BUILD_INTERVAL )
 DSINTERVAL = FILLSTRING ( 14 , " " ),
 
IF ( (PO.REPLACE_EVERY> 0 ) )  PASS_FIELD_IN =PO.REPLACE_EVERY,  PARSE_ZEROES ,  DSINTERVAL =
 CONCAT ( TRIM ( DSVALUE ), " " ,  TRIM (PO.REPLACE_EVERY_UNIT_S))
ENDIF
 
ENDMACRO
,
 
MACRO ( BUILD_PICK_QTY )
 PICKQTY = FILLSTRING ( 14 , " " ),
 PASS_FIELD_IN =(PO.FILL_QUANTITY*PO.DOSE_QUANTITY),
 PARSE_ZEROES ,
 PICKQTY = CONCAT ( TRIM ( DSVALUE ), " " ,  TRIM (PO.DOSE_QUANTITY_UNIT_S))
ENDMACRO
,
 
MACRO ( GET_INTERACTIONS )
 DD_IND = 0 ,
 DA_IND = 0 ,
 DF_IND = 0 ,
 DD_INTER = FILLSTRING ( 5 , " " ),
 DA_INTER = FILLSTRING ( 2 , " " ),
 DF_INTER = FILLSTRING ( 5 , " " ),
 CPOS = 0 ,
 XPOS = 0 ,
 SIZE_INTER = 0 ,
 INTER = FILLSTRING ( 100 , " " ),
 WORK_INTER = FILLSTRING ( 12 , " " ),
 DISP_INTER = FILLSTRING ( 16 , " " ),
 
FOR (  X  =  1  TO  SIZE ( INTERACTION -> DATA ,  5 ) )
 
IF ( (PO.ORDER_ID= INTERACTION -> DATA [ X ]-> ORDER_ID ) )
IF ( ( SIZE ( INTERACTION -> DATA [ X ]-> DETAILS ,  5 )> 0 ) )
FOR (  Y  =  1  TO  SIZE ( INTERACTION -> DATA [ X ]-> DETAILS ,  5 ) )
 INTER = TRIM ( INTERACTION -> DATA [ X ]-> DETAILS [ Y ]-> DLG_NAME ), CPOS = FINDSTRING ("!" ,
 INTER ,  1 ), XPOS =( CPOS + 1 ), SIZE_INTER = SIZE ( TRIM ( INTERACTION -> DATA [ X ]-> DETAILS [
 Y ]-> DLG_NAME )), CASE_INTER = TRIM ( SUBSTRING ( XPOS ,  SIZE_INTER ,  INTER )),
IF ( ( CASE_INTER ="DRUGDRUG" ) AND ( DD_IND = 0 ) )  DD_INTER ="DD / " ,  DD_IND = 1
ENDIF
,
IF ( ( CASE_INTER ="DRUGALLERGY" ) AND ( DA_IND = 0 ) )  DA_INTER ="DA" ,  DA_IND = 1
ENDIF
,
IF ( ( CASE_INTER ="DRUGFOOD" ) AND ( DF_IND = 0 ) )  DF_INTER =" / DF" ,  DF_IND = 1
ENDIF
,
IF (  (( ( DD_IND = 1 ) )  OR  ( (( ( DA_IND = 1 ) )  OR  (( DF_IND = 1 ) ))  ))  )  DISP_INTER =
 CONCAT ("* " ,  DD_INTER ,  DA_INTER ,  DF_INTER , " *" )
ENDIF
 
 
ENDFOR
 
ENDIF
 
ENDIF
 
 
ENDFOR
 
ENDMACRO
,
 
MACRO ( PARSE_ZEROES )
 DSRETURN = FILLSTRING ( 12 , " " ),
 DSVALUE = FILLSTRING ( 12 , " " ),
 MOVE_FLD = FILLSTRING ( 12 , " " ),
 STRFLD = FILLSTRING ( 12 , " " ),
 SIG_DIG = 0 ,
 SIG_DEC = 0 ,
 STRFLD = CNVTSTRING ( PASS_FIELD_IN ,  12 ,  4 ,  R ),
 STR_CNT = 1 ,
 LEN = 0 ,
 
WHILE ( ( STR_CNT < 8 ) AND ( SUBSTRING ( STR_CNT ,  1 ,  STRFLD ) IN ("0" ,
" " )))
 STR_CNT =( STR_CNT + 1 )
 
ENDWHILE
,
 SIG_DIG =( STR_CNT - 1 ),
 STR_CNT = 12 ,
 
WHILE ( ( STR_CNT > 7 ) AND ( SUBSTRING ( STR_CNT ,  1 ,  STRFLD ) IN ("0" ,
" " )))
 STR_CNT =( STR_CNT - 1 )
 
ENDWHILE
,
 
IF ( ( STR_CNT = 8 ) AND ( SUBSTRING ( STR_CNT ,  1 ,  STRFLD )="." ) )  STR_CNT =( STR_CNT - 1 )
ENDIF
,
 SIG_DEC = STR_CNT ,
 
IF ( ( SIG_DIG = 7 ) AND ( STR_CNT = 7 ) )  DSVALUE ="n/a"
ELSE   MOVE_FLD = SUBSTRING (( SIG_DIG + 1 ), ( SIG_DEC - SIG_DIG ),  STRFLD ),  DSVALUE = TRIM (
 MOVE_FLD ),
IF ( ( SUBSTRING ( 1 ,  1 ,  DSVALUE )="." ) )  DSVALUE = CONCAT ("0" ,  TRIM ( MOVE_FLD ))
ENDIF
 
ENDIF
 
ENDMACRO
,
 
MACRO ( BUILD_ADDRESS )
 
 CALL ECHO ( BUILD ("Street --" ,  SSTREET )),
 
 CALL ECHO ( BUILD ("City   --" ,  SCITY )),
 
 CALL ECHO ( BUILD ("State  --" ,  SSTATE )),
 
 CALL ECHO ( BUILD ("Zip    --" ,  SZIP )),
 
IF (  (( ( SIZE ( TRIM ( SSTREET ))> 0 ) )  OR  (( SIZE ( TRIM ( SCITY ))> 0 ) ))  AND ( SIZE (
 TRIM ( SSTATE ))> 0 ) )  SSEPERATOR1 =","
ELSE   SSEPERATOR1 =""
ENDIF
,
 
IF (  (( ( SIZE ( TRIM ( SSTATE ))> 0 ) )  OR  (( SIZE ( TRIM ( SZIP ))> 0 ) ))  AND ( SIZE ( TRIM (
 SPHONE ))> 0 ) )  SSEPERATOR2 =" - "
ELSE   SSEPERATOR2 =""
ENDIF
,
 SADDRESS = CONCAT ( TRIM ( SSTREET ), " " ,  TRIM ( SCITY ),  SSEPERATOR1 ,  TRIM ( SSTATE ), " "
,  TRIM ( SZIP ),  SSEPERATOR2 ,  TRIM ( SPHONE )),
 
 CALL ECHO ( BUILD ("Address --" ,  SADDRESS ))
ENDMACRO
,
 
 CALL ECHO ("inc_mod = 015 & MOD_DATE=02/19/2008" ),
 PAGENUM = 0 ,
 MAXLINES = 60 ,
 MIDPOS = 198 ,
 XOFFSET = LABEL_X_POS ,
 YOFFSET = LABEL_Y_POS
HEAD PO.ORDER_ID
 MED_CNT = 0 , INGCNT = 0 , CRPH =PO.RPH_INITIALS, CATTPHYS = CONCAT ("Dr. " ,  TRIM (
PO.ATTEND_PHYS_NAME)), CADMPHYS = CONCAT ("Dr. " ,  TRIM (PO.ADMIT_PHYS_NAME)), CORDPHYS = CONCAT (
"Dr. " ,  TRIM (PO.ORD_PHYS_NAME)), PRINT_RATE ="N" ,
IF ( (PO.RATE> 0 ) )  PRINT_RATE ="Y"
ELSEIF ( (PO.RATE= 0 ) AND (PO.TITRATE_IND= 1 ) )  PRINT_RATE ="T"
ENDIF
, BUILD_RATE , BUILD_INFUSE , BLD_TOT_VOL , BUILD_INTERVAL ,
IF ( (PO.IV_IN_SEQ> 0 ) )  BALT = 1 ,  STAT = ALTERLIST ( INGREDS -> DATA , PO.IV_SET_SIZE)
ELSE   BALT = 0 ,  STAT = ALTERLIST ( INGREDS -> DATA ,  1 )
ENDIF
,
IF ( (PO.IV_IN_SEQ> 0 ) )  BALT = 1 ,  STAT = ALTERLIST ( INGREDS -> DATA , PO.IV_SET_SIZE)
ELSE   BALT = 0 ,  STAT = ALTERLIST ( INGREDS -> DATA ,  1 )
ENDIF
 
HEAD PO.BAG_NBR
 FORM_FEED ,
IF ( ( SIZE ( TRIM ( LABEL_TYPE ))> 0 ) AND  NOT (( LABEL_TYPE  IN ("NEW" ,
"NEWONETIME" ,
"MAR" ,
"ZERODOSE" )) ) )  SET_FONT_5 ,  XVAR1 = 72 ,  CALC_POS ,
CASE (  LABEL_TYPE  )
 OF "DC" : "** DISCONTINUED **"
 OF "SUSP" : "**   SUSPENDED  **"
 OF "CRITMODIFY" : "**   MODIFIED   **"
 OF "NEWFLRSTK" : "**  FLOORSTOCK  **"
;018  ELSE
;018  IF ( (PO.ORDER_STATUS_ENUM IN ( 8 ,
;018   10 )) ) "** DISCONTINUED **"
;018  ELSEIF ( (PO.ORDER_STATUS_ENUM= 7 ) ) "**   SUSPENDED  **"
;018  ENDIF
 
 ENDCASE
  LINE_FEED ,  SET_FONT_2
;start 018
else
IF ( (PO.ORDER_STATUS_ENUM IN ( 8 , 10 )) )
 SET_FONT_5 ,  XVAR1 = 72 ,  CALC_POS ,
  "** DISCONTINUED **"
,  LINE_FEED ,  SET_FONT_2
ELSEIF ( (PO.ORDER_STATUS_ENUM= 7 ) )
 SET_FONT_5 ,  XVAR1 = 72 ,  CALC_POS ,
  "**   SUSPENDED  **"
,  LINE_FEED ,  SET_FONT_2
ENDIF
;end 018
 
ENDIF
,
IF ( (PO.ORDER_STATUS_ENUM IN ( 9 ,
 14 )) )  SET_FONT_5 ,  XVAR1 = 72 ,  CALC_POS ,
CASE ( PO.ORDER_STATUS_ENUM )
 OF  9 : "** CANCEL **"
 OF  14 : "** VOID **"
 ENDCASE
,  LINE_FEED ,  SET_FONT_2
ENDIF
,
IF ( (PO.ORDER_ID> 0 ) )  SET_FONT_2 ,  CALC_POS ,  SFACILITY = TRIM ( FACILITY ),  SFACILITY
"################################################;c"
,  LINE_FEED ,  SET_FONT_1 ,  CALC_POS ,
IF (  (( (PO.ROUTE_S="IRRIG" ) )  OR  ((PO.ROUTE_S="Irrigation" ) ))  )  XVAR1 = 42 ,  CALC_POS ,
"{color/1}{box/32/1}" ,  ROW + 1 ,  XVAR1 = 44 ,  YVAR1 =( YVAR1 + 6 ),  CALC_POS , "{color/1}" ,
"**IRRIGATION- NOT FOR IV USE**" ,  YVAR1 =( YVAR1 - 6 ),  LINE_FEED ,  LINE_FEED
ENDIF
,
IF ( (PO.ORD_TYPE= 2 ) )
IF (  (( (PO.ROUTE_S="EPI" ) )  OR  ((PO.ROUTE_S="Epidural" ) ))  )  XVAR1 = 45 ,  CALC_POS ,
"{color/1}{box/30/1}" ,  ROW + 1 ,  SET_FONT_1 ,  XVAR1 = 47 ,  YVAR1 =( YVAR1 + 6 ),  CALC_POS ,
"{color/1}" , "**EPIDURAL- NOT FOR IV USE**" ,  YVAR1 =( YVAR1 - 6 ),  LINE_FEED ,  LINE_FEED
ENDIF
 
ENDIF
,  SET_FONT_1 ,  CALC_POS ,  LOC_STRING = SUBSTRING ( 1 ,  4 , PO.LOCATION_S),
;016 RM_STRING = SUBSTRING ( 1 ,  4 , PO.ROOM_S),
RM_STRING = SUBSTRING ( 1 ,  7 , PO.ROOM_S),  ;016
 
;017 DSTRING = fillstring(10," ")   ;016
;017 DLOCSTRING = fillstring(15," ")  ;016
 
;017 BED_STRING = SUBSTRING ( 1 ,  2 , PO.BED_S),
 
 DSTRING = fillstring(13," ")   ;017
 DLOCSTRING = fillstring(17," ")  ;017
 
 
BED_STRING = SUBSTRING ( 1 ,  5 , PO.BED_S),   ; 017 - increased size of bed srting...
 
 
DSTRING =
IF ( ( SIZE ( TRIM ( BED_STRING ))> 0 ) )  CONCAT ( TRIM ( RM_STRING ), "-" ,  TRIM ( BED_STRING ))
ELSE   TRIM ( RM_STRING )
ENDIF
,
IF ( (PO.ROOM_CD= 0.0 ) )  DLOCSTRING = SUBSTRING ( 1 ,  12 , PO.LOCATION_S)
ELSE   DLOCSTRING = CONCAT ( TRIM ( LOC_STRING ), " - " ,  TRIM ( DSTRING ))
ENDIF
,  FIN_STRING = SUBSTRING ( 1 ,  20 , PO.FINNBR),  PAT_STRING = FILLSTRING ( 45 , " " ),
 PAT_STRING = TRIM ( SUBSTRING ( 1 ,  30 , PO.PERSON_NAME_S)),  MAKEORDERSTR = CNVTSTRING (
PO.ORDER_ID),  NEWFINSTRING = CONCAT ( TRIM ( FIN_STRING ), " - " ,  TRIM ( MAKEORDERSTR )),
 PAT_STRING ,
 ;016 XVAR1 = 140 ,
 XVAR1 = 118 ,  ; 016
 
 CALC_POS ,  DLOCSTRING ,  LINE_FEED ,  SET_FONT_2 ,  CALC_POS ,
 NEWFINSTRING ,  XVAR1 = 140 ,  CALC_POS ,
IF ( (PO.BAG_NBR> 0 ) )  BAG_NBR = CNVTSTRING (PO.BAG_NBR),  BAG_NBR_T = TRIM ( BAG_NBR )
ENDIF
,
IF ( (PO.IV_IN_SEQ> 0 ) ) "-" , PO.IV_IN_SEQ"##;l"
 
ENDIF
, " " ,  INGCNT = 0 ,  CALC_POS
ENDIF
 
HEAD PO.INGRED_SEQ
 DRUG_STRING = TRIM ( SUBSTRING ( 1 ,  26 , PO.GEN_NAME)), BRAND_STRING = TRIM ( SUBSTRING ( 1 ,
 26 , PO.BRAND_NAME)), DOSESTRING = FILLSTRING ( 18 , " " ), DOSESTRING = TRIM ( SUBSTRING ( 1 ,
 18 , PO.FREETEXT_DOSE)),
IF ( (PO.ORDER_ID> 0 ) )  LINE_FEED = 14 ,  LINE_FEED ,  SET_FONT_1 ,  XVAR1 = 12 ,  CALC_POS ,
 DRUG_STRING ,  XVAR1 = 124 ,  CALC_POS ,  DOSESTRING ,
IF ( ( BALT = 1 ) )  MED_CNT =PO.IV_IN_SEQ
ELSE   MED_CNT = 1
ENDIF
,  INGCNT =( INGCNT + 1 ),  STAT = ALTERLIST ( INGREDS -> DATA ,  INGCNT ),  INGREDS -> DATA [
 INGCNT ]-> DESC =PO.GEN_NAME,  INGREDS -> DATA [ INGCNT ]-> BRAND =PO.BRAND_NAME,  INGREDS -> DATA
[ INGCNT ]-> DOSE = DOSESTRING ,  INGREDS -> DATA [ INGCNT ]-> NDC = SUBSTRING ( 1 ,  13 , PO.NDC),
 INGREDS -> DATA [ INGCNT ]-> STR =PO.STRENGTH
ENDIF
 
DETAIL
 X = 1 ,
 ADMCNT = 0
FOOT  PO.BAG_NBR
 BUILD_RATE , BUILD_INFUSE , BLD_TOT_VOL , BUILD_INTERVAL ,
IF ( (PO.ORDER_ID> 0 ) )  SET_FONT_1 ,  CALC_POS ,  LINE_FEED ,  XVAR1 = 12 ,  CALC_POS ,
PO.FREQUENCY_S,  XVAR1 = 82 ,  CALC_POS , "Tot. Vol: " ,  TOT_VOL ,  LINE_FEED ,  XVAR1 = 12 ,
 CALC_POS , "Route: " , PO.ROUTE_S,  LINE_FEED ,  XVAR1 = 12 ,  CALC_POS , "Due: " , PO.ADMIN_DT_TM
"MM/DD/YY HH:MM"
,
IF ( ( PRINT_RATE  IN ("Y" ,
"T" )) )  LINE_FEED ,  XVAR1 = 12 ,  CALC_POS ,
IF ( ( PRINT_RATE ="Y" ) ) "Infuse Over:" ,  DSINFUSE
ENDIF
,  XVAR1 = 124 ,  CALC_POS ,
IF (  NOT ((PO.ROUTE_S IN ("IM" ,
"IV Push" ,
"Subcutaneous" )) ) )
IF ( ( PRINT_RATE ="Y" ) ) "Rate:" ,  DSRATE
ELSEIF ( ( PRINT_RATE ="T" ) )  DSRATE
ENDIF
 
ENDIF
 
ENDIF
,  SET_FONT_2 ,  LINE_FEED ,  LINE_FEED ,  XVAR1 = 12 ,  CALC_POS ,  LN_WIDTH_IN = 48 ,
IF ( (PO.COMMENT1_WHERE_TO_PRINT> 0 ) AND ( SIZE ( TRIM ( NOTE_TEXT1 ))> 0 ) )  NOTE_TEXT_IN =
 FILLSTRING ( 1000 , " " ),  NOTE_TEXT_IN = NOTE_TEXT1 ,
 CALL ECHO (">>>>>>>>>>>>>>I made it in" ),  PRNT_NOTE
ENDIF
,  XVAR1 = 25 ,  PRNT_BARCODE ,  LINE_FEED ,  LINE_FEED ,  LINE_FEED ,  SET_FONT_9 ,  XVAR1 = 12 ,
 CALC_POS ,  DSBAR_CODE ,  SET_FONT_2 ,  LINE_FEED ,  YVAR1 =( YVAR1 + 3 ),  XVAR1 = 5 ,  CALC_POS
, "FILL:_______CHECK:_______EXP DATE:________ " ,  FORM_FEED
ENDIF
, FORM_FEED
FOOT REPORT
 
IF ( ( RUNTYPE ="FILL" ) )  SET_FONT_1 ,  XVAR1 = 50 ,  CALC_POS , "** END OF BATCH **" ,
 LINE_FEED ,  CALC_POS , "Prepared:        " ,  CURDATE "mm/dd/yy"
, " " ,  CURTIME "HH:MM"
,  LINE_FEED ,  CALC_POS , "Run No:          " ,  DATA -> RUN_ID "##########;l"
,  LINE_FEED ,  CALC_POS , "Fill History ID: " ,  DATA -> FILL_HX_ID "##########;l"
,  LINE_FEED ,  CALC_POS , "Fill Period:     " ,  DATA -> CYC_FROM_DT_TM "mm/dd/yy;;d"
, " " ,  DATA -> CYC_FROM_DT_TM "hh:mm;;mr"
, " To " ,  DATA -> CYC_TO_DT_TM "mm/dd/yy;;d"
, " " ,  DATA -> CYC_TO_DT_TM "hh:mm;;mr"
,  FORM_FEED
ENDIF
 
 WITH  NOCOUNTER , OUTERJOIN = D , OUTERJOIN = D2 , DIO = 16 , MAXCOL = 250 , NOFORMFEED ,
 NULLREPORT
 
IF ( ( CURQUAL = 0 ) )  GO TO  PRINT_FAILED
ELSE
SET  REPLY -> STATUS_DATA -> STATUS  = "S"
SET  PRINTER  =  FILLSTRING ( 100 , " " )
SET  PRINTER  =  CNVTLOWER ( TRIM ( DATA -> OUTPUT_DEVICE_S ))
SET  SPOOL  VALUE ( TRIM ( PRINTFILE )) VALUE ( TRIM ( PRINTER ))
 CALL ECHO ( BUILD ("printing on...." ,  PRINTFILE )) GO TO  END_RUN
ENDIF
 
 
# INVALID_RUN_TYPE
 
SET  REPLY -> STATUS_DATA -> STATUS  = "F"
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> OPERATIONNAME  = "SELECT"
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> OPERATIONSTATUS  = "FAILED"
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTNAME  = "TABLE"
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTVALUE  = "CODE_VALUE"
 
# PRINT_FAILED
 
SET  REPLY -> STATUS_DATA -> STATUS  = "F"
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> OPERATIONNAME  = "PRINT"
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> OPERATIONSTATUS  = "FAILURE"
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTNAME  = "SCRIPT"
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTVALUE  =  VALUE ( PRINTFILE )
 
# END_RUN
 
# END_SCRIPT
 
SET  LAST_MOD  = "016 Akcia 12/29/09"
 END GO
