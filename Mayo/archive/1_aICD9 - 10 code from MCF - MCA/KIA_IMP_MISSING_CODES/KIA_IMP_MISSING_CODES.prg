1)translate KIA_IMP_MISSING_CODES go
;*** Generated by TRANSLATE, verify before re-including in CCL ***
DROP PROGRAM KIA_IMP_MISSING_CODES GO
CREATE PROGRAM KIA_IMP_MISSING_CODES
FREE SET TIMER
RECORD TIMER (
  1 START = DQ8
  1 STOP = DQ8
)
SET TIMER->START = CNVTDATETIME (CURDATE ,CURTIME3 )
FREE SET REPLY
RECORD REPLY (
  1 STATUS_DATA
    2 STATUS = C1
    2 SUBEVENTSTATUS [1 ]
      3 OPERATIONNAME = C25
      3 OPERATIONSTATUS = C1
      3 TARGETOBJECTNAME = C25
      3 TARGETOBJECTVALUE = VC
)
FREE SET TEMP
RECORD TEMP (
  1 LIST_0 [*]
    2 STATUS = I4
    2 ERRNUM = I4
    2 ERRMSG = VC
    2 INSERT_FLAG = I4
    2 CONCEPT_SOURCE_MEAN_CV = F8
    2 CONTRIBUTOR_SYSTEM_MEAN_CV = F8
    2 PRINCIPLE_TYPE_MEAN_CV = F8
    2 STRING_SOURCE_MEAN_CV = F8
    2 STRING_STATUS_MEAN_CV = F8
    2 VOCAB_AXIS_MEAN_CV = F8
    2 SOURCE_VOCABULARY_MEAN_CV = F8
    2 NOMEN_ID = F8
)
SUBROUTINE  LOGGING (LOG_NUM ,LOG_MSGPARAMS ,LOG_TABLENMS ,LOG_OFFFIELDS ,LOG_ROWIDENTS ,
LOG_CCLERRMSG ,LOG_ADDCOMMTS ,LOG_EXTRA1 ,LOG_EXTRA2 ,LOG_CONTNO )
IF ((TEXTLEN (LOG_CCLERRMSG ) > 100 ) )
SET LOG_CCLERRMSG = SUBSTRING (1 ,100 ,LOG_CCLERRMSG )
ENDIF
IF ((TEXTLEN (LOG_OFFFIELDS ) > 100 ) )
SET LOG_OFFFIELDS = SUBSTRING (1 ,100 ,LOG_OFFFIELDS )
ENDIF
IF ((TEXTLEN (LOG_ROWIDENTS ) > 100 ) )
SET LOG_ROWIDENTS = SUBSTRING (1 ,100 ,LOG_ROWIDENTS )
ENDIF
IF ((TEXTLEN (LOG_ADDCOMMTS ) > 100 ) )
SET LOG_ADDCOMMTS = SUBSTRING (1 ,100 ,LOG_ADDCOMMTS )
ENDIF
IF ((TEXTLEN (LOG_EXTRA1 ) > 100 ) )
SET LOG_EXTRA1 = SUBSTRING (1 ,100 ,LOG_EXTRA1 )
ENDIF
IF ((TEXTLEN (LOG_EXTRA2 ) > 100 ) )
SET LOG_EXTRA2 = SUBSTRING (1 ,100 ,LOG_EXTRA2 )
ENDIF
DECLARE LOG_TYPE = C14 WITH PUBLIC ,NOCONSTANT (FILLSTRING (14 ," " ) )
DECLARE LOG_MSG = C110 WITH PUBLIC ,NOCONSTANT (FILLSTRING (110 ," " ) )
DECLARE LOG_RES = C110 WITH PUBLIC ,NOCONSTANT (FILLSTRING (110 ," " ) )
DECLARE LOG_RES2 = C110 WITH PUBLIC ,NOCONSTANT (FILLSTRING (110 ," " ) )
DECLARE LOG_STRING = VC WITH PUBLIC ,NOCONSTANT (" " )
DECLARE LOG_PARSE_STR = VC WITH PUBLIC ,NOCONSTANT (" " )
DECLARE LOG_IDX_STR = VC WITH PUBLIC ,NOCONSTANT (" " )
DECLARE LOG_MSG_CNT = I4 WITH PUBLIC ,NOCONSTANT (0 )
DECLARE RHEAD = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT ("{\rtf1\ansi \deff0{\fonttbl" ,
"{\f0\fswiss\fprq2\fcharset0 Arial;}}{\colortbl ;\red255\green0\blue0;\red0\green0" ,
"\blue255;}\deftab1134 \f0 \fs20 " ) ) )
DECLARE REOL = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT (" \par" ," " ) ) )
DECLARE RTFEOF = VC WITH PUBLIC ,CONSTANT ("}" )
DECLARE BB = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT (" \b" ," " ) ) )
DECLARE EB = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT (" \b0" ," " ) ) )
DECLARE BI = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT (" \i" ," " ) ) )
DECLARE EI = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT (" \i0" ," " ) ) )
DECLARE CB = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT (" \cf0" ," " ) ) )
DECLARE CR = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT (" \cf1" ," " ) ) )
DECLARE CU = VC WITH PUBLIC ,CONSTANT (NOTRIM (CONCAT (" \cf2" ," " ) ) )
DECLARE CILM_CMT_LOG_ID = F8
DECLARE CILM_LOG_INSTANCE = I4
DECLARE CILM_LOG_SEQ = I4
DECLARE CILM_LOG_MESSAGE = VC
CASE (LOG_NUM )
OF 1 :
SET LOG_MSG = "No routes on import file."
OF 2 :
SET LOG_MSG = "Failed to retrieve code value from database. Error code %1"
IF ((LOG_MSGPARAMS > " " ) )
IF ((CNVTINT (LOG_MSGPARAMS ) = 0 ) )
SET LOG_RES = "0 = Add the display to your database, or replace 0 values, and cycle code cache"
ELSEIF ((CNVTINT (LOG_MSGPARAMS ) = - (1 ) ) )
SET LOG_RES = "-1 = Inactivate one of the displays and cycle code cache"
ELSEIF ((CNVTINT (LOG_MSGPARAMS ) = - (2 ) ) )
SET LOG_RES = "-2 = Contact your database administrator"
ENDIF
ENDIF
OF 3 :
SET LOG_MSG = "No dose ranges on import file."
SET LOG_RES = "Add a dose range value to the import file."
OF 4 :
SET LOG_MSG = "Duplicate dose ranges on import file."
SET LOG_RES = "Delete the duplicate rows to the import file."
OF 5 :
SET LOG_MSG = "Unable to generate next sequence number."
SET LOG_RES = "Contact your database administrator."
OF 6 :
SET LOG_MSG = "Failed to insert row."
SET LOG_RES = CONCAT ("Provide your database administrator with the error " ,
"and table name to help resolve the error." )
OF 7 :
SET LOG_MSG = "Failed to update row."
SET LOG_RES = CONCAT ("Provide your database administrator with the error " ,
"and table name to help resolve the error." )
OF 8 :
SET LOG_MSG = "Failed to retrieve record from database."
SET LOG_RES = CONCAT ("Try to locate the missing fields in your database.  " ,
"If found, log a service request with" )
SET LOG_RES2 = CONCAT ("Cerner Knowledge Index MILL; if not, update the " ,
"incorrect field and re-import the file." )
OF 9 :
SET LOG_MSG = "Invalid operator value."
SET LOG_RES = CONCAT ("If you want to have values in both the From and " ,"To fields, change the" )
SET LOG_RES2 = CONCAT ("Age/Weight operator value to something other " ,
"than one of the operator values listed above." )
OF 10 :
SET LOG_MSG = "The To_%1 value must be greater than the From_%1 value."
SET LOG_RES = CONCAT ("Modify the To and From values so the To value is " ,
"greater than the From value." )
OF 11 :
SET LOG_MSG = CONCAT ("The To_%1 value must be greater or equal " ,"to the From_%1 value." )
SET LOG_RES = CONCAT ("Modify the To and From values so the To value " ,
"is greater than the From value." )
OF 12 :
SET LOG_MSG = "A child script failed to execute successfully."
SET LOG_RES = "Log a service request with Cerner Knowledge Index MILL."
OF 13 :
SET LOG_MSG = "The code value exists in the database, but does not have a CKI."
SET LOG_RES = "For Code Set 54, use Code_Set_54_Utility to reconcile that code value."
SET LOG_RES2 = "Log a service request with Cerner Knowledge Index MILL for access to this utility."
OF 14 :
SET LOG_MSG = CONCAT ("Each row on the Qualifier tab must have at least one " ,
"active row at the %1 level." )
SET LOG_RES = CONCAT ("Inactivate the row (select 0), try to import, and the script will ignore " ,
"the change and not import that row." )
OF 15 :
SET LOG_MSG = "Failed to find the %1 value."
SET LOG_RES = CONCAT ("Try to locate the missing field in your database.  If found, log a " ,
"service request with Cerner" )
SET LOG_RES2 = "Knowledge Index MILL; if not, update the incorrect field and re-import the file."
OF 16 :
SET LOG_MSG = "A duplicate or incorrect sequence exists."
SET LOG_RES = "Check the sequence column and evaluate any duplicates that exist."
OF 17 :
SET LOG_MSG = "A value must be specified for %1."
SET LOG_RES = "Change the value to a numeric or alphanumeric value."
OF 18 :
SET LOG_MSG = "Failed to delete row."
SET LOG_RES = CONCAT ("Provide your database administrator with the error and table name " ,
"to help resolve the error." )
OF 19 :
SET LOG_MSG = "Invalid dose range type."
SET LOG_RES = "Access the drop-down help within the cell."
OF 20 :
SET LOG_MSG = "Standard content must be loaded before loading custom content."
SET LOG_RES = CONCAT ("Load the standard Multum content first, then load your custom content.  " ,
"Log a service request" )
SET LOG_RES2 = "with Cerner Knowledge Index MILL for information about Multum content."
OF 21 :
SET LOG_MSG = "A value must be specified for DOSE_UNIT on the DOSE_RANGE tab."
SET LOG_RES = "Enter a numeric or alphanumeric value in the Dose_Unit field."
OF 22 :
SET LOG_MSG = "The CMTI value is not unique."
SET LOG_RES = "Log a service request with Cerner Knowledge Index MILL."
OF 23 :
SET LOG_MSG = "The SOURCE_STRING field cannot be blank on the .CSV file."
SET LOG_RES =
"If the file is custom-created, enter a value in the source_string field and rerun the import"
SET LOG_RES2 =
"to include the row; otherwise, log a service request with Cerner Knowledge Index MILL."
OF 24 :
SET LOG_MSG = "The value for %1 must be %2."
OF 25 :
SET LOG_MSG = "The %1 tab must be %2."
OF 26 :
SET LOG_MSG = "The row count is incorrect on the following table: %1."
SET LOG_RES = "Log a service request with Cerner Knowledge Index MILL."
OF 27 :
SET LOG_MSG = "PowerForm did not load successfully."
OF 28 :
SET LOG_MSG = "The Beg_effective_dt_tm is greater than the End_effective_dt_tm on the .CSV."
SET LOG_RES = CONCAT (
"If the file is custom-created, evaluate the effective dates; otherwise, log a " ,
"service request with" )
SET LOG_RES2 = "Cerner Knowledge Index MILL."
OF 29 :
SET LOG_MSG = "Invalid type flag.  Enter a valid value for the type flag."
SET LOG_RES = CONCAT ("If the file is custom-created, enter a valid flag value, provided above, " ,
"in the flag type field;" )
SET LOG_RES2 = "otherwise, log a service request with Cerner Knowledge Index MILL."
OF 30 :
SET LOG_MSG = "The following .CSV file did not import successfully."
SET LOG_RES = "Review the other errors in the log file for more information."
OF 31 :
SET LOG_MSG = CONCAT ("Failed to locate the following .CSV file.  Verify the .CSV file is in the " ,
"proper location." )
SET LOG_RES = CONCAT ("Review the installation manager to verify that the .CSV is in the proper " ,
"location and named correctly." )
OF 32 :
SET LOG_MSG = "Multiple CKIs (DNUMs) were found for the order catalog orderable you selected."
SET LOG_RES = CONCAT ("Run the Meds CKI Utility, or change the description to match the " ,
"description in your database." )
OF 33 :
SET LOG_MSG = "Mnemonic and mnemonic type already exist on the order catalog synonym table."
SET LOG_RES = "Either give the row a new mnemonic, or new mnemonic type."
OF 34 :
SET LOG_MSG = "Multiple primary synonyms were found for the order catalog synonym you selected."
SET LOG_RES = "Inactivate all but one primary synonym."
OF 35 :
SET LOG_MSG = "Invalid date format on .CSV file."
SET LOG_RES = "The format needs to be in the form DD-MMM-YYYY.  DO NOT use the format DD/MMM/YYYY."
OF 36 :
SET LOG_MSG = "Concept CKI value does not match mean and identifier."
SET LOG_RES = "Log a service request with Cerner Knowledge Index MILL."
OF 37 :
SET LOG_MSG = "Required field missing from CSV."
SET LOG_RES = "Review CSV file for required fields."
OF 38 :
SET LOG_MSG = "Duplicate records exist in the database."
SET LOG_RES = "If you are updating, resolve or inactivate the duplicate section."
OF 5000 :
SET LOG_MSG = "The CKI in the import file is different than the CKI in the database."
OF 5001 :
SET LOG_MSG = "The DTA event code has been updated."
OF 5002 :
SET LOG_MSG = "Primary key %1 does not exist on the table."
OF 5003 :
SET LOG_MSG = "Two forms of the same description exist in destination domain."
SET LOG_RES = "If you are updating, resolve or inactivate the duplicate form."
OF 5004 :
SET LOG_MSG = "Two sections of the same description exist in destination domain."
SET LOG_RES = "If you are updating, resolve or inactivate the duplicate section."
OF 5005 :
SET LOG_MSG = "WARNING: Section is overwritten."
OF 5006 :
SET LOG_MSG = "WARNING: Form is overwritten."
OF 5007 :
SET LOG_MSG = "Unable to find MERGE_NAME: %1"
OF 5008 :
SET LOG_MSG = "A record already exists in the database where primary_vterm_ind = 1."
OF 5009 :
SET LOG_MSG = "Order catalog code %1 has been inactivated by the source."
OF 5010 :
SET LOG_MSG = "Review the effective dates on the source identifier."
OF 5011 :
SET LOG_MSG = "A value should be specified for %1."
OF 5012 :
SET LOG_MSG = "The value for %1 should be %2."
OF 5013 :
SET LOG_MSG = "Duplicate records exist in the database."
SET LOG_RES = "If you are updating, resolve or inactivate the duplicate section."
OF 5014 :
SET LOG_MSG = "Script received request for zero data; no data was passed to the script."
OF 5015 :
SET LOG_MSG = "The effective dates are set to occur in the future."
SET LOG_RES = CONCAT (
"If the effective dates are supposed to be in the future, ignore this warning.  " ,
"If the term should" )
SET LOG_RES2 = "be effective now, change the beginning effective date."
OF 5016 :
SET LOG_MSG = CONCAT ("More than one Surgical Procedure row exists on this request; only " ,
"one Surgical Procedure row can exist per Order Catalog item." )
OF 5017 :
SET LOG_MSG = "Failed to find the %1 value."
OF 5018 :
SET LOG_MSG = CONCAT ("The Dose Range Checking %1 operator (>, <=, or Between) are the only " ,
"three recommended operator values." )
OF 5019 :
SET LOG_MSG = "Record does not exist on database."
OF 5020 :
SET LOG_MSG = "A duplicate or incorrect sequence exists."
SET LOG_RES = "Check the sequence column and evaluate any duplicates that exist."
OF 8001 :
SET LOG_MSG = "Order catalog synonym %1 has been inactivated."
OF 8002 :
SET LOG_MSG = "Multum has made order catalog code %1 obsolete."
OF 8003 :
SET LOG_MSG = "Multum has made order catalog synonym %1 obsolete."
OF 8004 :
SET LOG_MSG = CONCAT ("The data has not been saved.  If you want to save the data, " ,
"try again or save the data to another location." )
OF 8005 :
SET LOG_MSG = "INFO.  Importing section %1."
OF 8006 :
SET LOG_MSG = "INFO.  Importing Input Control %1."
OF 8007 :
SET LOG_MSG = "INFO.  Real Sect Id: %1."
OF 8008 :
SET LOG_MSG = "INFO.  Temp Section Id: %1."
OF 8009 :
SET LOG_MSG = "INFO.  Prev Section Id: %1."
OF 8010 :
SET LOG_MSG = "INFO.  Number of rows: %1."
OF 8011 :
SET LOG_MSG = "The following record was updated:"
OF 8012 :
SET LOG_MSG = "The following record was inserted:"
OF 8013 :
SET LOG_MSG = "The following record was deleted:"
OF 8014 :
SET LOG_MSG = "The following .CSV file imported successfully."
OF 8015 :
SET LOG_MSG = "Duplicate records exist in the database."
OF 8016 :
SET LOG_MSG = "The beg_effective_dt_tm is greater than end_effective_dt_tm on the request."
SET LOG_RES = "Log a service request with Cerner Knowledge Index MILL."
OF 8017 :
SET LOG_MSG = "PowerForm already exists: %1"
SET LOG_RES = CONCAT ("If you got the ERROR (denoted by KIA-E-8017) version of this message, " ,
"log a service request" )
SET LOG_RES2 = "with Cerner Knowledge Index MILL."
OF 8018 :
SET LOG_MSG = "Section is overwritten."
OF 8019 :
SET LOG_MSG = "Form is overwritten."
OF 8020 :
SET LOG_MSG = "A CKI (CNUM) already exists for this order catalog synonym."
OF 8021 :
SET LOG_MSG = "Record already exists on database."
OF 8022 :
SET LOG_MSG = "Record does not exist on database."
ENDCASE
IF ((LOG_MSGPARAMS > " " ) )
SET LOG_INDEX = 0
SET LOG_TEMP_INDEX = 0
SET LOG_CONTINUE = 1
SET LOG_CNT = 0
SET LOG_TEMP_STRING = FILLSTRING (25 ," " )
SET LOG_SIZE = SIZE (LOG_MSGPARAMS ,1 )
SET LOG_MSG = CONCAT (LOG_MSG ,FILLSTRING (50 ," " ) )
WHILE ((LOG_CONTINUE != 0 ) )
SET LOG_CNT = (LOG_CNT + 1 )
SET LOG_TEMP_INDEX = (LOG_INDEX + 1 )
SET LOG_INDEX = FINDSTRING (";" ,LOG_MSGPARAMS ,LOG_TEMP_INDEX )
IF ((LOG_INDEX = 0 ) )
SET LOG_TEMP_STRING = SUBSTRING (LOG_TEMP_INDEX ,((LOG_SIZE - LOG_TEMP_INDEX ) + 1 ) ,LOG_MSGPARAMS
)
SET LOG_CONTINUE = 0
ELSE
SET LOG_TEMP_STRING = SUBSTRING (LOG_TEMP_INDEX ,(LOG_INDEX - LOG_TEMP_INDEX ) ,LOG_MSGPARAMS )
ENDIF
SET LOG_MSG = REPLACE (LOG_MSG ,BUILD ("%" ,LOG_CNT ) ,TRIM (LOG_TEMP_STRING ) ,0 )
ENDWHILE
SET LOG_MSG = TRIM (LOG_MSG )
ENDIF
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) )
IF ((LOG_NUM < 10 ) )
SET LOG_TYPE = BUILD ("KIA-E-000" ,LOG_NUM ,":" )
ELSEIF ((LOG_NUM < 100 ) )
SET LOG_TYPE = BUILD ("KIA-E-00" ,LOG_NUM ,":" )
ELSE
SET LOG_TYPE = BUILD ("KIA-E-0" ,LOG_NUM ,":" )
ENDIF
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) )
SET LOG_TYPE = BUILD ("KIA-W-" ,LOG_NUM ,":" )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) )
SET LOG_TYPE = BUILD ("KIA-I-" ,LOG_NUM ,":" )
ELSEIF ((LOG_NUM = 0 ) )
SET LOG_TYPE = "DEBUG"
ENDIF
IF ((LOG_NUM >= 0 ) )
IF ((((LOG_LEVEL = 1 ) AND (LOG_NUM < 8000 ) AND (LOG_NUM > 0 ) ) OR ((((LOG_LEVEL = 2 ) AND (
LOG_NUM > 0 ) ) OR ((LOG_LEVEL = 3 ) )) )) )
IF ((FINDSTRING ("constraint" ,LOG_CCLERRMSG ,1 ,0 ) = 0 ) )
IF ((LOG_NUM > 0 ) AND (LOG_NUM < 5000 ) )
CALL INSERT_LOG_TABLES (LOG_TYPE ,LOG_MSG ,LOG_MSGPARAMS ,LOG_TABLENMS ,LOG_OFFFIELDS ,
LOG_ROWIDENTS ,LOG_CCLERRMSG ,LOG_ADDCOMMTS ,LOG_EXTRA1 ,LOG_EXTRA2 ,LOG_RES )
ENDIF
ENDIF
SELECT INTO VALUE (LOGFILE_NAME )
FROM (DUAL )
DETAIL
LOG_MSG = SUBSTRING (1 ,110 ,LOG_MSG ) ,
ROW + 1 ,
COL 0 ,
LOG_TYPE ,
COL 15 ,
LOG_MSG ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (CR ,BB ," " ,TRIM (LOG_TYPE
) ," " ,TRIM (LOG_MSG ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (CU ,TRIM (LOG_TYPE
) ," " ,TRIM (LOG_MSG ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (CB ,BI ," " ,TRIM (
LOG_TYPE ) ," " ,TRIM (LOG_MSG ) ,EI ,REOL ) )
ENDIF
,
IF ((LOG_TABLENMS > " " ) ) TEMP_TABLENMS = CONCAT ("Table name(s) - " ,TRIM (LOG_TABLENMS ) ) ,ROW
+ 1 ,COL 0 ,TEMP_TABLENMS ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (TEMP_TABLENMS ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (TEMP_TABLENMS ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (TEMP_TABLENMS ) ,EI ,REOL ) )
ENDIF
ENDIF
,
IF ((LOG_OFFFIELDS > " " ) ) TEMP_OFFFIELDS = CONCAT ("Field value(s) - " ,TRIM (LOG_OFFFIELDS ) ) ,
ROW + 1 ,COL 0 ,TEMP_OFFFIELDS ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (TEMP_OFFFIELDS ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (TEMP_OFFFIELDS ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (TEMP_OFFFIELDS ) ,EI ,REOL ) )
ENDIF
ENDIF
,
IF ((LOG_ROWIDENTS > " " ) ) TEMP_ROWIDENTS = CONCAT ("Row identifier(s) - " ,TRIM (LOG_ROWIDENTS )
) ,ROW + 1 ,COL 0 ,TEMP_ROWIDENTS ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (TEMP_ROWIDENTS ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (TEMP_ROWIDENTS ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (TEMP_ROWIDENTS ) ,EI ,REOL ) )
ENDIF
ENDIF
,
IF ((LOG_CCLERRMSG > " " ) ) TEMP_CCLERRMSG = CONCAT ("CCL error message - " ,TRIM (LOG_CCLERRMSG )
) ,ROW + 1 ,COL 0 ,TEMP_CCLERRMSG ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (TEMP_CCLERRMSG ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (TEMP_CCLERRMSG ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (TEMP_CCLERRMSG ) ,EI ,REOL ) )
ENDIF
ENDIF
,
IF ((LOG_ADDCOMMTS > " " ) ) TEMP_ADDCOMMTS = CONCAT ("Additional Comments - " ,TRIM (LOG_ADDCOMMTS
) ) ,ROW + 1 ,COL 0 ,TEMP_ADDCOMMTS ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (TEMP_ADDCOMMTS ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (TEMP_ADDCOMMTS ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (TEMP_ADDCOMMTS ) ,EI ,REOL ) )
ENDIF
ENDIF
,
IF ((LOG_EXTRA1 > " " ) ) TEMP_EXTRA1 = TRIM (LOG_EXTRA1 ) ,ROW + 1 ,COL 0 ,TEMP_EXTRA1 ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (TEMP_EXTRA1 ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (TEMP_EXTRA1 ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (TEMP_EXTRA1 ) ,EI ,REOL ) )
ENDIF
ENDIF
,
IF ((LOG_EXTRA2 > " " ) ) TEMP_EXTRA2 = TRIM (LOG_EXTRA2 ) ,ROW + 1 ,COL 0 ,TEMP_EXTRA2 ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (TEMP_EXTRA2 ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (TEMP_EXTRA2 ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (TEMP_EXTRA2 ) ,EI ,REOL ) )
ENDIF
ENDIF
,
IF ((LOG_RES > " " ) ) LOG_RES_PRINT = SUBSTRING (1 ,130 ,CONCAT ("Resolution - " ,LOG_RES ) ) ,ROW
+ 1 ,COL 0 ,LOG_RES_PRINT ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (LOG_RES_PRINT ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (LOG_RES_PRINT ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (LOG_RES_PRINT ) ,EI ,REOL ) )
ENDIF
ENDIF
,
IF ((LOG_RES2 > " " ) ) LOG_RES2_PRINT = SUBSTRING (1 ,130 ,LOG_RES2 ) ,ROW + 1 ,COL 0 ,
LOG_RES2_PRINT ,
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CR ,BB ," " ,
TRIM (LOG_RES2_PRINT ) ,EB ,REOL ) )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CU ,
TRIM (LOG_RES2_PRINT ) ,REOL ) )
ELSEIF ((LOG_NUM < 10000 ) AND (LOG_NUM >= 8000 ) ) LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,CB ,BI
," " ,TRIM (LOG_RES2_PRINT ) ,EI ,REOL ) )
ENDIF
ENDIF
,
LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,REOL ) )
WITH APPEND ,NOCOUNTER ,NOFORMFEED ,FORMAT = VARIABLE ,MAXCOL = 300 ,MAXROW = 1
IF ((VALIDATE (LOG_IDX ,- (1 ) ) > 0 ) AND (LOG_NUM > 0 ) AND (LOG_NUM < 10000 ) )
SET LOG_IDX_STR = TRIM (CNVTSTRING (LOG_IDX ) )
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->msg_cnt = " ,LOG_REPLY ,
"->qual[" ,LOG_IDX_STR ,"]->msg_cnt + 1 go" )
CALL PARSER (LOG_PARSE_STR )
SET LOG_PARSE_STR = CONCAT ("set log_msg_cnt = " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,
"]->msg_cnt go" )
CALL PARSER (LOG_PARSE_STR )
SET LOG_PARSE_STR = CONCAT ("set stat = alterlist(" ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,
"]->messages, " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->msg_cnt) go" )
CALL PARSER (LOG_PARSE_STR )
IF ((LOG_NUM < 5000 ) AND (LOG_NUM > 0 ) )
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->messages[" ,LOG_REPLY ,
"->qual[" ,LOG_IDX_STR ,"]->msg_cnt]->msg_type_flag = 1 go" )
CALL PARSER (LOG_PARSE_STR )
IF (LOG_AUDIT )
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->success_ind = 2 go" )
ELSE
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->success_ind = 0 go" )
ENDIF
CALL PARSER (LOG_PARSE_STR )
ELSEIF ((LOG_NUM < 8000 ) AND (LOG_NUM >= 5000 ) )
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->messages[" ,LOG_REPLY ,
"->qual[" ,LOG_IDX_STR ,"]->msg_cnt]->msg_type_flag = 2 go" )
CALL PARSER (LOG_PARSE_STR )
ELSE
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->messages[" ,LOG_REPLY ,
"->qual[" ,LOG_IDX_STR ,"]->msg_cnt]->msg_type_flag = 3 go" )
CALL PARSER (LOG_PARSE_STR )
ENDIF
IF ((LOG_MSG_CNT = 1 ) )
SET LOG_STRING = NOTRIM (CONCAT (RHEAD ,LOG_STRING ,RTFEOF ) )
ELSEIF ((LOG_MSG_CNT > 1 ) )
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->messages[" ,LOG_REPLY ,
"->qual[" ,LOG_IDX_STR ,"]->msg_cnt - 1]->msg_string = substring(1, textlen(" ,LOG_REPLY ,"->qual["
,LOG_IDX_STR ,"]->messages[" ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,
"]->msg_cnt - 1]->msg_string) - 1, " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->messages[" ,LOG_REPLY ,
"->qual[" ,LOG_IDX_STR ,"]->msg_cnt - 1]->msg_string) go" )
CALL PARSER (LOG_PARSE_STR )
SET LOG_STRING = NOTRIM (CONCAT (LOG_STRING ,RTFEOF ) )
ENDIF
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->messages[" ,LOG_REPLY ,
"->qual[" ,LOG_IDX_STR ,"]->msg_cnt]->msg_string = log_string go" )
CALL PARSER (LOG_PARSE_STR )
ENDIF
ENDIF
IF ((LOG_CONTNO = 1 ) )
IF ((LOG_NUM > 0 ) AND (LOG_NUM < 8000 ) )
IF (VALIDATE (REPLY ,0 ) )
SET REPLY->STATUS_DATA->STATUS = "W"
ENDIF
ENDIF
GO TO START_LOOP
ELSEIF ((LOG_CONTNO = 0 ) )
IF ((LOG_NUM > 0 ) AND (LOG_NUM < 8000 ) )
IF (VALIDATE (REPLY ,0 ) )
SET REPLY->STATUS_DATA->STATUS = "F"
ENDIF
ENDIF
GO TO EXIT_SCRIPT
ENDIF
ELSEIF ((LOG_NUM = - (1 ) ) )
SELECT INTO VALUE (LOGFILE_NAME )
FROM (DUAL )
DETAIL
TM = FORMAT (CNVTDATETIME (CURDATE ,CURTIME3 ) ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
LINE = FILLSTRING (90 ,"*" ) ,
LOGSTRING = CONCAT (SCRIPT_NAME ,"  :begin > " ) ,
COL 0 ,
LINE ,
ROW + 1 ,
ROW 0 ,
COL 0 ,
LOGSTRING ,
COL + 2 ,
TM
WITH APPEND ,NOCOUNTER ,NOFORMFEED ,FORMAT = VARIABLE ,MAXCOL = 132 ,MAXROW = 1
SELECT INTO "nl:"
DI.INFO_DOMAIN ,
DI.INFO_NAME ,
DI.INFO_NUMBER
FROM (DM_INFO DI )
WHERE (DI.INFO_DOMAIN = "KNOWLEDGE INDEX APPLICATIONS" ) AND (DI.INFO_NAME = "IMPORT DEBUG LEVEL" )
DETAIL
LOG_LEVEL = DI.INFO_NUMBER
WITH NOCOUNTER
IF ((((CURQUAL < 0 ) ) OR (NOT ((LOG_LEVEL IN (1 ,
2 ,
3 ) ) ) )) )
SET LOG_LEVEL = 1
ENDIF
ELSEIF ((LOG_NUM = - (2 ) ) )
SELECT INTO VALUE (LOGFILE_NAME )
FROM (DUAL )
DETAIL
ROW + 2 ,
COL 0 ,
"End   :" ,
CASE (REPLY->STATUS_DATA->STATUS )
OF "S" : COL 8 ,
"SUCCESS"
OF "Z" : COL 8 ,
"SUCCESS"
OF "W" : COL 8 ,
"WARNING"
OF "F" : COL 8 ,
"FAILURE"
ENDCASE
,
TM = FORMAT (CNVTDATETIME (CURDATE ,CURTIME3 ) ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
COL 17 ,
TM
WITH APPEND ,NOCOUNTER ,NOFORMFEED ,FORMAT = VARIABLE ,MAXCOL = 132 ,MAXROW = 1
IF ((((REPLY->STATUS_DATA->STATUS = "F" ) ) OR ((LOG_AUDIT = 1 ) )) )
SET REQINFO->COMMIT_IND = 0
ELSE
SET REQINFO->COMMIT_IND = 1
ENDIF
ELSEIF ((LOG_NUM = - (3 ) ) )
SELECT INTO VALUE (LOGFILE_NAME )
FROM (DUAL )
DETAIL
ROW + 1 ,
COL 0 ,
LOG_EXTRA1 ,
ROW + 2 ,
COL 0 ,
LOG_EXTRA2
WITH APPEND ,NOCOUNTER ,NOFORMFEED ,FORMAT = VARIABLE ,MAXCOL = 132 ,MAXROW = 1
ELSEIF ((LOG_NUM = - (4 ) ) )
IF ((VALIDATE (LOG_IDX ,- (1 ) ) > 0 ) )
SET LOG_IDX_STR = TRIM (CNVTSTRING (LOG_IDX ) )
IF (LOG_AUDIT )
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->success_ind = 3 go" )
ELSE
SET LOG_PARSE_STR = CONCAT ("set " ,LOG_REPLY ,"->qual[" ,LOG_IDX_STR ,"]->success_ind = 1 go" )
ENDIF
CALL PARSER (LOG_PARSE_STR )
ENDIF
ENDIF
END ;Subroutine
SUBROUTINE  INSERT_LOG_TABLES (VLOG_TYPE ,VLOG_MSG ,VLOG_MSGPARAMS ,VLOG_TABLENMS ,VLOG_OFFFIELDS ,
VLOG_ROWIDENTS ,VLOG_CCLERRMSG ,VLOG_ADDCOMMTS ,VLOG_EXTRA1 ,VLOG_EXTRA2 ,VLOG_RES )
DECLARE START_REC = I4 WITH PUBLIC ,NOCONSTANT (0 )
IF ((VALIDATE (KIA_PKG_NBR ,9 ) != 9 ) )
IF ((VALIDATE (KIA_RDM_NBR ,9 ) != 9 ) )
SELECT INTO "nl:"
FROM (DPROTECT D )
WHERE (D.OBJECT = "T" ) AND (D.OBJECT_NAME = "KIA_RMS_LOG" )
WITH NOCOUNTER
IF ((CURQUAL < 1 ) )
SELECT INTO TABLE"KIA_RMS_LOG"
BLOCK_SIZE = 0 ,
CMT_IMPORT_LOG_ID = 0.0 ,
END_DT_TM = FORMAT (SYSDATE ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
INPUT_FILENAME = FILLSTRING (50 ," " ) ,
LOGFILE_NAME = FILLSTRING (50 ," " ) ,
LOG_LEVEL = 0 ,
PACKAGE_NBR = 0 ,
README = 0 ,
SCRIPT_NAME = FILLSTRING (35 ," " ) ,
START_DT_TM = FORMAT (SYSDATE ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
START_RECORD = 0 ,
STATUS_FLAG = 0 ,
UPDT_APPLCTX = 0 ,
UPDT_CNT = 0 ,
UPDT_DT_TM = FORMAT (SYSDATE ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
UPDT_ID = 0.0 ,
UPDT_TASK = 0
WITH NOCOUNTER
ENDIF
SELECT INTO "nl:"
FROM (KIA_RMS_LOG K )
WHERE (K.CMT_IMPORT_LOG_ID = KIA_CMT_LOG_ID )
WITH NOCOUNTER
IF ((CURQUAL < 1 ) )
IF ((VALIDATE (DM_DBI_START_ROW ,- (1 ) ) = - (1 ) ) )
SET START_REC = 0
ELSE
SET START_REC = DM_DBI_START_ROW
ENDIF
SELECT INTO TABLE"KIA_RMS_LOG"
BLOCK_SIZE = KIA_PARSE_BLOCKS ,
CMT_IMPORT_LOG_ID = KIA_CMT_LOG_ID ,
END_DT_TM = FORMAT (SYSDATE ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
INPUT_FILENAME = SUBSTRING (1 ,50 ,KIA_RDM_INPUT_NAME ) ,
LOGFILE_NAME = SUBSTRING (1 ,50 ,LOGFILE_NAME ) ,
LOG_LEVEL = LOG_LEVEL ,
PACKAGE_NBR = KIA_PKG_NBR ,
README = KIA_RDM_NBR ,
SCRIPT_NAME = SUBSTRING (1 ,35 ,SCRIPT_NAME ) ,
START_DT_TM = FORMAT (SYSDATE ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
START_RECORD = START_REC ,
STATUS_FLAG = 0 ,
UPDT_APPLCTX = REQINFO->UPDT_APPLCTX ,
UPDT_CNT = 0 ,
UPDT_DT_TM = FORMAT (SYSDATE ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
UPDT_ID = REQINFO->UPDT_ID ,
UPDT_TASK = REQINFO->UPDT_TASK
WITH NOCOUNTER ,APPEND
ENDIF
DECLARE LOG_SEQ_CNT = I4
DECLARE PARAM_MSG = VC
SET LOG_SEQ_CNT = 0
SET PARAM_MSG = CONCAT (TRIM (VLOG_TYPE ) ,TRIM (VLOG_MSG ) )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
IF ((VLOG_TABLENMS > " " ) )
SET PARAM_MSG = CONCAT ("Table name(s) - " ,TRIM (VLOG_TABLENMS ) )
SET LOG_SEQ_CNT = (LOG_SEQ_CNT + 1 )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
ENDIF
IF ((VLOG_OFFFIELDS > " " ) )
SET PARAM_MSG = CONCAT ("Field value(s) - " ,TRIM (VLOG_OFFFIELDS ) )
SET LOG_SEQ_CNT = (LOG_SEQ_CNT + 1 )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
ENDIF
IF ((VLOG_ROWIDENTS > " " ) )
SET PARAM_MSG = CONCAT ("Row identifier(s) - " ,TRIM (VLOG_ROWIDENTS ) )
SET LOG_SEQ_CNT = (LOG_SEQ_CNT + 1 )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
ENDIF
IF ((VLOG_ADDCOMMTS > " " ) )
SET PARAM_MSG = CONCAT ("Additional Comments - " ,TRIM (VLOG_ADDCOMMTS ) )
SET LOG_SEQ_CNT = (LOG_SEQ_CNT + 1 )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
ENDIF
IF ((VLOG_CCLERRMSG > " " ) )
SET PARAM_MSG = CONCAT ("CCL error message - " ,TRIM (VLOG_CCLERRMSG ) )
SET LOG_SEQ_CNT = (LOG_SEQ_CNT + 1 )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
ENDIF
IF ((VLOG_EXTRA1 > " " ) )
SET PARAM_MSG = TRIM (VLOG_EXTRA1 )
SET LOG_SEQ_CNT = (LOG_SEQ_CNT + 1 )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
ENDIF
IF ((VLOG_EXTRA2 > " " ) )
SET PARAM_MSG = TRIM (LOG_EXTRA2 )
SET LOG_SEQ_CNT = (LOG_SEQ_CNT + 1 )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
ENDIF
IF ((VLOG_RES > " " ) )
SET PARAM_MSG = CONCAT ("Resolution - " ,TRIM (VLOG_RES ) )
SET LOG_SEQ_CNT = (LOG_SEQ_CNT + 1 )
CALL INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
ENDIF
SET KIA_RDM_ERR_CNT = (KIA_RDM_ERR_CNT + 1 )
IF ((LOG_NUM = - (2 ) ) )
FREE DEFINE KIA_RMS_LOG
DEFINE KIA_RMS_LOG WITH MODIFY
UPDATE FROM (KIA_RMS_LOG K )
SET K.STATUS_FLAG =
IF ((REPLY->STATUS_DATA->STATUS = "S" ) ) 0
ELSEIF ((REPLY->STATUS_DATA->STATUS = "W" ) ) 1
ELSEIF ((REPLY->STATUS_DATA->STATUS = "F" ) ) 2
ELSE 3
ENDIF
,
K.END_DT_TM = SYSDATE ,
K.UPDT_DT_TM = SYSDATE ,
K.UPDT_CNT = (K.UPDT_CNT + 1 )
WHERE (K.CMT_LOG_ID = KIA_CMT_LOG_ID )
WITH NOCOUNTER
ENDIF
ENDIF
ENDIF
END ;Subroutine
SUBROUTINE  INSERT_CILM (PARAM_MSG ,LOG_SEQ_CNT )
DECLARE NEXT_SEQ_NUM = F8
SET NEXT_SEQ_NUM = KIA_LOG_NEXT_SEQ (NEXT_SEQ_NUM )
SELECT INTO "nl:"
FROM (DPROTECT D )
WHERE (D.OBJECT = "T" ) AND (D.OBJECT_NAME = "KIA_RMS_MSG" )
WITH NOCOUNTER
IF ((CURQUAL < 1 ) )
SELECT INTO TABLE"KIA_RMS_MSG"
CMT_IMPORT_LOG_ID = 0.0 ,
CMT_IMPORT_LOG_MSG_ID = 0.0 ,
LOG_INSTANCE = 0 ,
LOG_MESSAGE = FILLSTRING (250 ," " ) ,
LOG_SEQ = 0 ,
UPDT_APPLCTX = 0 ,
UPDT_CNT = 0 ,
UPDT_DT_TM = FORMAT (SYSDATE ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
UPDT_ID = 0.0 ,
UPDT_TASK = 0
WITH NOCOUNTER
ENDIF
SELECT INTO TABLE"KIA_RMS_MSG"
CMT_IMPORT_LOG_ID = KIA_CMT_LOG_ID ,
CMT_IMPORT_LOG_MSG_ID = NEXT_SEQ_NUM ,
LOG_INSTANCE = KIA_RDM_ERR_CNT ,
LOG_MESSAGE = SUBSTRING (1 ,250 ,PARAM_MSG ) ,
LOG_SEQ = LOG_SEQ_CNT ,
UPDT_APPLCTX = 0 ,
UPDT_CNT = 0 ,
UPDT_DT_TM = FORMAT (SYSDATE ,"dd-mmm-yyyy hh:mm:ss;;d" ) ,
UPDT_ID = 0.0 ,
UPDT_TASK = 0
WITH NOCOUNTER ,APPEND
END ;Subroutine
SUBROUTINE  KIA_LOG_NEXT_SEQ (NEXT_SEQ )
SELECT INTO "nl:"
NVAL = SEQ (REFERENCE_SEQ ,NEXTVAL ) "##################;rp0"
FROM (DUAL )
DETAIL
NEXT_SEQ = NVAL
WITH FORMAT ,COUNTER
IF ((CURQUAL = 0 ) )
CALL LOGGING (5 ,"" ,"DUAL" ,"Sequence: NOMENCLATURE_SEQ" ,"" ,"" ,"" ,"" ,"" ,0 )
ELSE RETURN (NEXT_SEQ )
ENDIF
END ;Subroutine
DECLARE MAX_LIST = I4 WITH PUBLIC ,CONSTANT (SIZE (REQUESTIN->LIST_0 ,5 ) )
DECLARE KIA_VERSION = C11
DECLARE LOG_LEVEL = I2 WITH PUBLIC ,NOCONSTANT (0 )
DECLARE DOUPDATES = I2 WITH PUBLIC ,NOCONSTANT (0 )
DECLARE LOG_AUDIT = I2 WITH PUBLIC ,NOCONSTANT (0 )
DECLARE SCRIPT_NAME = VC WITH PUBLIC ,CONSTANT ("kia_imp_cmt_concept" )
DECLARE EXIT_FLAG = I4
DECLARE TEMP_LOGFILE = VC WITH PUBLIC ,NOCONSTANT ("" )
DECLARE TEMP_MEAN = VC WITH PUBLIC ,NOCONSTANT ("" )
SET TEMP_MEAN = REPLACE (REQUESTIN->LIST_0[1 ]->SOURCE_VOCABULARY_MEAN ,"." ,"" ,0 )
IF ((TEXTLEN (TRIM (TEMP_MEAN ) ) > 4 ) )
SET TEMP_LOGFILE = CONCAT ("kia_imp_" ,TRIM (CNVTLOWER (TEMP_MEAN ) ) ,"_miss_cd.log" )
ELSE
SET TEMP_LOGFILE = CONCAT ("kia_imp_" ,TRIM (CNVTLOWER (TEMP_MEAN ) ) ,"_missing_codes.log" )
ENDIF
DECLARE LOGFILE_NAME = VC WITH PUBLIC ,CONSTANT (TRIM (TEMP_LOGFILE ) )
DECLARE NEW_ROWS = I2
DECLARE ROW_EXISTS = I2 WITH PUBLIC ,CONSTANT (0 )
DECLARE ROW_NOT_EXISTS = I2 WITH PUBLIC ,CONSTANT (1 )
DECLARE ACTIVE_CV = F8
DECLARE DATA_STATUS_CD_CV = F8
DECLARE LANGUAGE_MEAN_CV = F8
DECLARE NOMEN_ID = F8
DECLARE CSV_ERROR = I2
DECLARE CONCEPT_SOURCE_MEAN_INVALID = I2 WITH PUBLIC ,CONSTANT (10 )
DECLARE CONTRIBUTOR_SYSTEM_MEAN_INVALID = I2 WITH PUBLIC ,CONSTANT (11 )
DECLARE PRINCIPLE_TYPE_MEAN_INVALID = I2 WITH PUBLIC ,CONSTANT (12 )
DECLARE STRING_SOURCE_MEAN_INVALID = I2 WITH PUBLIC ,CONSTANT (13 )
DECLARE STRING_STATUS_MEAN_INVALID = I2 WITH PUBLIC ,CONSTANT (14 )
DECLARE VOCAB_AXIS_MEAN_INVALID = I2 WITH PUBLIC ,CONSTANT (15 )
DECLARE SOURCE_VOCABULARY_MEAN_INVALID = I2 WITH PUBLIC ,CONSTANT (15 )
IF ((VALIDATE (README_DATA ,"0" ) = "0" ) )
IF (NOT (VALIDATE (README_DATA ,0 ) ) )
FREE SET README_DATA
RECORD README_DATA (
  1 OCD = I4
  1 README_ID = F8
  1 INSTANCE = I4
  1 README_TYPE = VC
  1 DESCRIPTION = VC
  1 SCRIPT = VC
  1 CHECK_SCRIPT = VC
  1 DATA_FILE = VC
  1 PAR_FILE = VC
  1 BLOCKS = I4
  1 LOG_ROWID = VC
  1 STATUS = VC
  1 MESSAGE = C255
  1 OPTIONS = VC
  1 DRIVER = VC
  1 BATCH_DT_TM = DQ8
)
ENDIF
ENDIF
SET REPLY->STATUS_DATA->STATUS = "F"
SET STAT = ALTERLIST (TEMP->LIST_0 ,MAX_LIST )
SET README_DATA->STATUS = "F"
SET README_DATA->MESSAGE = "kia_imp_missing_codes load failed"
SET SOURCE_VOCAB_MEAN_CV = 0.0
SET NEW_ROWS = FALSE
SET CSV_ERROR = FALSE
CALL LOGGING (- (1 ) ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,0 )
IF ((MAX_LIST <= 0 ) )
SET REPLY->STATUS_DATA->STATUS = "W"
CALL LOGGING (5014 ,"" ,"" ,"" ,"" ,"" ,"" ,"No records in request." ,"" ,0 ) GO TO EXIT_SCRIPT
ELSE
CALL LOGGING (0 ,"" ,"" ,"" ,"" ,"" ,"" ,CONCAT ("The number of items to be imported = " ,TRIM (
CNVTSTRING (MAX_LIST ) ) ,"." ) ,"" ,- (1 ) )
ENDIF
SELECT INTO "nl:"
CV_EXISTS = DECODE (CV.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" ) ,
CV2_EXISTS = DECODE (CV2.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" ) ,
N_EXISTS = DECODE (N.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" )
FROM (DUMMYT D WITH SEQ = VALUE (MAX_LIST ) ) ,
(DUMMYT D1 ) ,
(DUMMYT D2 ) ,
(DUMMYT D3 ) ,
(CODE_VALUE CV ) ,
(CODE_VALUE CV2 ) ,
(NOMENCLATURE N )
PLAN (D
WHERE (CNVTDATETIME (REQUESTIN->LIST_0[D.SEQ ]->END_EFFECTIVE_DT_TM ) >= CNVTDATETIME (
"01-JAN-2100" ) ) AND (CNVTDATETIME (REQUESTIN->LIST_0[D.SEQ ]->BEG_EFFECTIVE_DT_TM ) <
CNVTDATETIME ("01-OCT-2004" ) ) )
AND (D1 )
AND (CV
WHERE (CV.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->PRINCIPLE_TYPE_MEAN ) ) AND (CV.CODE_SET =
401 ) AND (CV.ACTIVE_IND = 1 ) AND (CV.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV.END_EFFECTIVE_DT_TM > SYSDATE ) )
AND (D2 )
AND (CV2
WHERE (CV2.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->SOURCE_VOCABULARY_MEAN ) ) AND (
CV2.CODE_SET = 400 ) AND (CV2.ACTIVE_IND = 1 ) AND (CV2.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV2.END_EFFECTIVE_DT_TM > SYSDATE ) )
AND (D3 )
AND (N
WHERE (N.PRINCIPLE_TYPE_CD = CV.CODE_VALUE ) AND (N.SOURCE_VOCABULARY_CD = CV2.CODE_VALUE ) AND (
N.SOURCE_IDENTIFIER = TRIM (REQUESTIN->LIST_0[D.SEQ ]->SOURCE_IDENTIFIER ) ) AND (N.SOURCE_STRING =
TRIM (REQUESTIN->LIST_0[D.SEQ ]->SOURCE_STRING ) ) )
DETAIL
IF ((CV_EXISTS = "EXISTS" ) AND (N_EXISTS = "DOES_NOT_EXIST" ) AND (CV2_EXISTS = "EXISTS" ) ) TEMP->
LIST_0[D.SEQ ]->INSERT_FLAG = ROW_NOT_EXISTS ,NEW_ROWS = TRUE
ELSE TEMP->LIST_0[D.SEQ ]->INSERT_FLAG = ROW_EXISTS
ENDIF
WITH NOCOUNTER ,OUTERJOIN = D ,OUTERJOIN = D1 ,OUTERJOIN = D2 ,OUTERJOIN = D3 ,DONTCARE = CV ,
DONTCARE = CV2 ,DONTCARE = N
IF ((NEW_ROWS = TRUE ) )
SET ACTIVE_CV = 0
SELECT INTO "nl:"
CV.CODE_VALUE
FROM (CODE_VALUE CV )
WHERE (CV.CODE_SET = 48 ) AND (CV.CDF_MEANING = "ACTIVE" ) AND (CV.ACTIVE_IND = 1 ) AND (
CV.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (CV.END_EFFECTIVE_DT_TM > SYSDATE )
DETAIL
ACTIVE_CV = CV.CODE_VALUE
WITH NOCOUNTER
IF ((((ACTIVE_CV <= 0 ) ) OR ((CURQUAL < 1 ) )) )
CALL LOGGING (2 ,CNVTSTRING (ACTIVE_CV ) ,"CODE_VALUE" ,"CDF_MEANING=ACTIVE and CODE_SET=48" ,"" ,
"" ,"" ,"" ,"" ,- (1 ) ) GO TO EXIT_SCRIPT
ENDIF
SET DATA_STATUS_CD_CV = 0
SELECT INTO "nl:"
FROM (CODE_VALUE CV )
WHERE (CV.CDF_MEANING = "AUTH" ) AND (CV.CODE_SET = 8 ) AND (CV.ACTIVE_IND = 1 ) AND (
CV.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (SYSDATE < CV.END_EFFECTIVE_DT_TM )
DETAIL
DATA_STATUS_CD_CV = CV.CODE_VALUE
WITH NOCOUNTER
IF ((((CURQUAL < 1 ) ) OR ((DATA_STATUS_CD_CV < 1 ) )) )
CALL LOGGING (2 ,CNVTSTRING (DATA_STATUS_CD_CV ) ,"CODE_VALUE" ,"data_status_mean = AUTH" ,
"Code Set: 8; cdf_meaning: AUTH" ,"" ,"" ,"" ,"" ,0 )
ENDIF
SET LANGUAGE_MEAN_CV = 0
SELECT INTO "nl:"
FROM (CODE_VALUE CV )
WHERE (CV.CDF_MEANING = TRIM (REQUESTIN->LIST_0[1 ]->LANGUAGE_MEAN ) ) AND (CODE_SET = 36 ) AND (
CV.ACTIVE_IND = 1 ) AND (CV.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (SYSDATE <
CV.END_EFFECTIVE_DT_TM )
DETAIL
LANGUAGE_MEAN_CV = CV.CODE_VALUE
WITH NOCOUNTER
IF ((CURQUAL < 1 ) )
CALL LOGGING (2 ,CNVTSTRING (LANGUAGE_MEAN_CV ) ,"CODE_VALUE" ,"language_mean = ENG" ,
"Code Set: 36; cdf_meaning: ENG" ,"" ,"" ,"" ,"" ,0 )
ENDIF
SELECT INTO "nl:"
CV1_EXISTS = DECODE (CV1.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" ) ,
CV2_EXISTS = DECODE (CV2.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" ) ,
CV3_EXISTS = DECODE (CV3.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" ) ,
CV4_EXISTS = DECODE (CV3.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" ) ,
CV5_EXISTS = DECODE (CV3.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" ) ,
CV6_EXISTS = DECODE (CV3.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" ) ,
CV7_EXISTS = DECODE (CV3.SEQ ,"EXISTS" ,"DOES_NOT_EXIST" )
FROM (DUMMYT D WITH SEQ = VALUE (MAX_LIST ) ) ,
(DUMMYT D1 ) ,
(DUMMYT D2 ) ,
(DUMMYT D3 ) ,
(DUMMYT D4 ) ,
(DUMMYT D5 ) ,
(DUMMYT D6 ) ,
(DUMMYT D7 ) ,
(CODE_VALUE CV1 ) ,
(CODE_VALUE CV2 ) ,
(CODE_VALUE CV3 ) ,
(CODE_VALUE CV4 ) ,
(CODE_VALUE CV5 ) ,
(CODE_VALUE CV6 ) ,
(CODE_VALUE CV7 )
PLAN (D
WHERE (TEMP->LIST_0[D.SEQ ]->INSERT_FLAG = ROW_NOT_EXISTS ) )
AND (D1 )
AND (CV1
WHERE (CV1.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->CONCEPT_SOURCE_MEAN ) ) AND (CV1.CODE_SET
= 12100 ) AND (CV1.ACTIVE_IND = 1 ) AND (CV1.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV1.END_EFFECTIVE_DT_TM > SYSDATE ) )
AND (D2 )
AND (CV2
WHERE (CV2.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->CONTRIBUTOR_SYSTEM_MEAN ) ) AND (
CV2.CODE_SET = 89 ) AND (CV2.ACTIVE_IND = 1 ) AND (CV2.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV2.END_EFFECTIVE_DT_TM > SYSDATE ) )
AND (D3 )
AND (CV3
WHERE (CV3.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->PRINCIPLE_TYPE_MEAN ) ) AND (CV3.CODE_SET
= 401 ) AND (CV3.ACTIVE_IND = 1 ) AND (CV3.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV3.END_EFFECTIVE_DT_TM > SYSDATE ) )
AND (D4 )
AND (CV4
WHERE (CV4.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->STRING_SOURCE_MEAN ) ) AND (CV4.CODE_SET
= 12100 ) AND (CV4.ACTIVE_IND = 1 ) AND (CV4.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV4.END_EFFECTIVE_DT_TM > SYSDATE ) )
AND (D5 )
AND (CV5
WHERE (CV5.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->STRING_STATUS_MEAN ) ) AND (CV5.CODE_SET
= 12103 ) AND (CV5.ACTIVE_IND = 1 ) AND (CV5.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV5.END_EFFECTIVE_DT_TM > SYSDATE ) )
AND (D6 )
AND (CV6
WHERE (CV6.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->VOCAB_AXIS_MEAN ) ) AND (CV6.CODE_SET =
15849 ) AND (CV6.ACTIVE_IND = 1 ) AND (CV6.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV6.END_EFFECTIVE_DT_TM > SYSDATE ) )
AND (D7 )
AND (CV7
WHERE (CV7.CDF_MEANING = TRIM (REQUESTIN->LIST_0[D.SEQ ]->SOURCE_VOCABULARY_MEAN ) ) AND (
CV7.CODE_SET = 400 ) AND (CV7.ACTIVE_IND = 1 ) AND (CV7.BEGIN_EFFECTIVE_DT_TM <= SYSDATE ) AND (
CV7.END_EFFECTIVE_DT_TM > SYSDATE ) )
DETAIL
TEMP->LIST_0[D.SEQ ]->CONCEPT_SOURCE_MEAN_CV = CV1.CODE_VALUE ,
TEMP->LIST_0[D.SEQ ]->CONTRIBUTOR_SYSTEM_MEAN_CV = CV2.CODE_VALUE ,
TEMP->LIST_0[D.SEQ ]->PRINCIPLE_TYPE_MEAN_CV = CV3.CODE_VALUE ,
TEMP->LIST_0[D.SEQ ]->STRING_SOURCE_MEAN_CV = CV4.CODE_VALUE ,
TEMP->LIST_0[D.SEQ ]->STRING_STATUS_MEAN_CV = CV5.CODE_VALUE ,
TEMP->LIST_0[D.SEQ ]->VOCAB_AXIS_MEAN_CV = CV6.CODE_VALUE ,
TEMP->LIST_0[D.SEQ ]->SOURCE_VOCABULARY_MEAN_CV = CV7.CODE_VALUE ,
IF ((CV1_EXISTS = "DOES_NOT_EXISTS" ) ) TEMP->LIST_0[D.SEQ ]->INSERT_FLAG =
CONCEPT_SOURCE_MEAN_INVALID ,CSV_ERROR = TRUE
ELSEIF ((CV2_EXISTS = "DOES_NOT_EXISTS" ) ) TEMP->LIST_0[D.SEQ ]->INSERT_FLAG =
CONTRIBUTOR_SYSTEM_MEAN_INVALID ,CSV_ERROR = TRUE
ELSEIF ((CV3_EXISTS = "DOES_NOT_EXISTS" ) ) TEMP->LIST_0[D.SEQ ]->INSERT_FLAG =
PRINCIPLE_TYPE_MEAN_INVALID ,CSV_ERROR = TRUE
ELSEIF ((CV4_EXISTS = "DOES_NOT_EXISTS" ) ) TEMP->LIST_0[D.SEQ ]->INSERT_FLAG =
STRING_SOURCE_MEAN_INVALID ,CSV_ERROR = TRUE
ELSEIF ((CV5_EXISTS = "DOES_NOT_EXISTS" ) ) TEMP->LIST_0[D.SEQ ]->INSERT_FLAG =
STRING_STATUS_MEAN_INVALID ,CSV_ERROR = TRUE
ELSEIF ((CV6_EXISTS = "DOES_NOT_EXISTS" ) ) TEMP->LIST_0[D.SEQ ]->INSERT_FLAG =
VOCAB_AXIS_MEAN_INVALID ,CSV_ERROR = TRUE
ELSEIF ((CV7_EXISTS = "DOES_NOT_EXISTS" ) ) TEMP->LIST_0[D.SEQ ]->INSERT_FLAG =
SOURCE_VOCABULARY_MEAN_INVALID ,CSV_ERROR = TRUE
ENDIF
WITH OUTERJOIN = D1 ,OUTERJOIN = D2 ,OUTERJOIN = D3 ,OUTERJOIN = D4 ,OUTERJOIN = D5 ,OUTERJOIN = D6
,OUTERJOIN = D7 ,DONTCARE = CV1 ,DONTCARE = CV2 ,DONTCARE = CV3 ,DONTCARE = CV4 ,DONTCARE = CV5 ,
DONTCARE = CV6 ,DONTCARE = CV7 ,NOCOUNTER
IF ((CSV_ERROR = TRUE ) )
FOR (X = 1 TO MAX_LIST )
IF ((TEMP->LIST_0[X ]->INSERT_FLAG = CONCEPT_SOURCE_MEAN_INVALID ) )
CALL LOGGING (2 ,CNVTSTRING (TEMP->LIST_0[X ]->CONCEPT_SOURCE_MEAN_CV ) ,"CODE_VALUE" ,CONCAT (
"CONCEPT_SOURCE_MEAN= " ,TRIM (REQUESTIN->LIST_0[X ]->CONCEPT_SOURCE_MEAN_CV ) ," code_set= 12100"
) ,"" ,"" ,"" ,"" ,"" ,- (1 ) )
ELSEIF ((TEMP->LIST_0[X ]->INSERT_FLAG = CONTRIBUTOR_SYSTEM_MEAN_INVALID ) )
CALL LOGGING (2 ,CNVTSTRING (TEMP->LIST_0[X ]->CONTRIBUTOR_SYSTEM_MEAN_CV ) ,"CODE_VALUE" ,CONCAT (
"CONTRIBUTOR_SYSTEM_MEAN= " ,TRIM (REQUESTIN->LIST_0[X ]->CONTRIBUTOR_SYSTEM_MEAN_CV ) ,
" code_set= 89" ) ,"" ,"" ,"" ,"" ,"" ,- (1 ) )
ELSEIF ((TEMP->LIST_0[X ]->INSERT_FLAG = PRINCIPLE_TYPE_MEAN_INVALID ) )
CALL LOGGING (2 ,CNVTSTRING (TEMP->LIST_0[X ]->PRINCIPLE_TYPE_MEAN_CV ) ,"CODE_VALUE" ,CONCAT (
"PRINCIPLE_TYPE_MEAN= " ,TRIM (REQUESTIN->LIST_0[X ]->PRINCIPLE_TYPE_MEAN_CV ) ," code_set= 401" ) ,
"" ,"" ,"" ,"" ,"" ,- (1 ) )
ELSEIF ((TEMP->LIST_0[X ]->INSERT_FLAG = STRING_SOURCE_MEAN_INVALID ) )
CALL LOGGING (2 ,CNVTSTRING (TEMP->LIST_0[X ]->STRING_SOURCE_MEAN_CV ) ,"CODE_VALUE" ,CONCAT (
"STRING_SOURCE_MEAN= " ,TRIM (REQUESTIN->LIST_0[X ]->STRING_SOURCE_MEAN_CV ) ," code_set= 12100" ) ,
"" ,"" ,"" ,"" ,"" ,- (1 ) )
ELSEIF ((TEMP->LIST_0[X ]->INSERT_FLAG = STRING_STATUS_MEAN_INVALID ) )
CALL LOGGING (2 ,CNVTSTRING (TEMP->LIST_0[X ]->STRING_STATUS_MEAN_CV ) ,"CODE_VALUE" ,CONCAT (
"STRING_STATUS_MEAN= " ,TRIM (REQUESTIN->LIST_0[X ]->STRING_STATUS_MEAN_CV ) ," code_set= 12103" ) ,
"" ,"" ,"" ,"" ,"" ,- (1 ) )
ELSEIF ((TEMP->LIST_0[X ]->INSERT_FLAG = VOCAB_AXIS_MEAN_INVALID ) )
CALL LOGGING (2 ,CNVTSTRING (TEMP->LIST_0[X ]->VOCAB_AXIS_MEAN_CV ) ,"CODE_VALUE" ,CONCAT (
"VOCAB_AXIS_MEAN= " ,TRIM (REQUESTIN->LIST_0[X ]->VOCAB_AXIS_MEAN_CV ) ," code_set= 15849" ) ,"" ,
"" ,"" ,"" ,"" ,- (1 ) )
ELSEIF ((TEMP->LIST_0[X ]->INSERT_FLAG = SOURCE_VOCABULARY_MEAN_INVALID ) )
CALL LOGGING (2 ,CNVTSTRING (TEMP->LIST_0[X ]->SOURCE_VOCABULARY_MEAN_CV ) ,"CODE_VALUE" ,CONCAT (
"SOURCE_VOCABULARY_MEAN= " ,TRIM (REQUESTIN->LIST_0[X ]->SOURCE_VOCABULARY_MEAN_CV ) ,
" code_set= 400" ) ,"" ,"" ,"" ,"" ,"" ,- (1 ) )
ENDIF
ENDFOR
ENDIF
FOR (X = 1 TO VALUE (MAX_LIST ) )
IF ((TEMP->LIST_0[X ]->INSERT_FLAG = ROW_NOT_EXISTS ) )
SELECT INTO "nl:"
NVAL = SEQ (NOMENCLATURE_SEQ ,NEXTVAL ) "##################;rp0"
FROM (DUAL )
DETAIL
TEMP->LIST_0[X ]->NOMEN_ID = NVAL
WITH FORMAT ,COUNTER
ENDIF
ENDFOR
INSERT FROM (NOMENCLATURE N ) ,
(DUMMYT D WITH SEQ = VALUE (MAX_LIST ) )
SET N.ACTIVE_IND = 1 ,
N.ACTIVE_STATUS_CD = ACTIVE_CV ,
N.ACTIVE_STATUS_DT_TM = SYSDATE ,
N.ACTIVE_STATUS_PRSNL_ID = 0 ,
N.BEG_EFFECTIVE_DT_TM = CNVTDATETIME (REQUESTIN->LIST_0[D.SEQ ]->BEG_EFFECTIVE_DT_TM ) ,
N.CMTI = TRIM (REQUESTIN->LIST_0[D.SEQ ]->CMTI ) ,
N.CONCEPT_CKI =
IF ((TRIM (REQUESTIN->LIST_0[D.SEQ ]->CONCEPT_CKI ) > " " ) ) TRIM (REQUESTIN->LIST_0[D.SEQ ]->
CONCEPT_CKI )
ELSE NULL
ENDIF
,
N.CONCEPT_IDENTIFIER =
IF ((TRIM (REQUESTIN->LIST_0[D.SEQ ]->CONCEPT_IDENTIFIER ) > " " ) ) TRIM (REQUESTIN->LIST_0[D.SEQ ]
->CONCEPT_IDENTIFIER )
ELSE " "
ENDIF
,
N.CONCEPT_SOURCE_CD = TEMP->LIST_0[D.SEQ ]->CONCEPT_SOURCE_MEAN_CV ,
N.CONTRIBUTOR_SYSTEM_CD = TEMP->LIST_0[D.SEQ ]->CONTRIBUTOR_SYSTEM_MEAN_CV ,
N.DATA_STATUS_CD = DATA_STATUS_CD_CV ,
N.DATA_STATUS_DT_TM = SYSDATE ,
N.DATA_STATUS_PRSNL_ID = 0.0 ,
N.DISALLOWED_IND = CNVTINT (REQUESTIN->LIST_0[D.SEQ ]->DISALLOWED_IND ) ,
N.END_EFFECTIVE_DT_TM = CNVTDATETIME (REQUESTIN->LIST_0[D.SEQ ]->END_EFFECTIVE_DT_TM ) ,
N.LANGUAGE_CD = LANGUAGE_MEAN_CV ,
N.MNEMONIC =
IF ((TRIM (REQUESTIN->LIST_0[D.SEQ ]->MNEMONIC ) > " " ) ) SUBSTRING (1 ,25 ,TRIM (REQUESTIN->
LIST_0[D.SEQ ]->MNEMONIC ) )
ELSE " "
ENDIF
,
N.NOMENCLATURE_ID = TEMP->LIST_0[D.SEQ ]->NOMEN_ID ,
N.NOM_VER_GRP_ID = TEMP->LIST_0[D.SEQ ]->NOMEN_ID ,
N.PRIMARY_CTERM_IND = CNVTINT (REQUESTIN->LIST_0[D.SEQ ]->PRIMARY_CTERM_IND ) ,
N.PRIMARY_VTERM_IND =
IF ((TRIM (REQUESTIN->LIST_0[D.SEQ ]->PRIMARY_VTERM_IND ) > " " ) ) CNVTINT (REQUESTIN->LIST_0[
D.SEQ ]->PRIMARY_VTERM_IND )
ELSE 0
ENDIF
,
N.PRINCIPLE_TYPE_CD = TEMP->LIST_0[D.SEQ ]->PRINCIPLE_TYPE_MEAN_CV ,
N.SHORT_STRING =
IF ((TRIM (REQUESTIN->LIST_0[D.SEQ ]->SHORT_STRING ) > " " ) ) SUBSTRING (1 ,60 ,TRIM (REQUESTIN->
LIST_0[D.SEQ ]->SHORT_STRING ) )
ELSE " "
ENDIF
,
N.SOURCE_IDENTIFIER =
IF ((TRIM (REQUESTIN->LIST_0[D.SEQ ]->SOURCE_IDENTIFIER ) > " " ) ) TRIM (REQUESTIN->LIST_0[D.SEQ ]
->SOURCE_IDENTIFIER )
ELSE " "
ENDIF
,
N.SOURCE_IDENTIFIER_KEYCAP =
IF ((TRIM (REQUESTIN->LIST_0[D.SEQ ]->SOURCE_IDENTIFIER ) > " " ) ) TRIM (CNVTUPPER (REQUESTIN->
LIST_0[D.SEQ ]->SOURCE_IDENTIFIER ) )
ELSE " "
ENDIF
,
N.SOURCE_STRING = TRIM (SUBSTRING (1 ,255 ,REQUESTIN->LIST_0[D.SEQ ]->SOURCE_STRING ) ) ,
N.SOURCE_STRING_KEYCAP = TRIM (CNVTUPPER (SUBSTRING (1 ,255 ,REQUESTIN->LIST_0[D.SEQ ]->
SOURCE_STRING ) ) ) ,
N.SOURCE_VOCABULARY_CD = TEMP->LIST_0[D.SEQ ]->SOURCE_VOCABULARY_MEAN_CV ,
N.STRING_IDENTIFIER =
IF ((TRIM (REQUESTIN->LIST_0[D.SEQ ]->STRING_IDENTIFIER ) > " " ) ) TRIM (REQUESTIN->LIST_0[D.SEQ ]
->STRING_IDENTIFIER )
ELSE " "
ENDIF
,
N.STRING_SOURCE_CD = TEMP->LIST_0[D.SEQ ]->STRING_SOURCE_MEAN_CV ,
N.STRING_STATUS_CD = TEMP->LIST_0[D.SEQ ]->STRING_STATUS_MEAN_CV ,
N.UPDT_APPLCTX = 0 ,
N.UPDT_CNT = 0 ,
N.UPDT_DT_TM = SYSDATE ,
N.UPDT_ID = 0 ,
N.UPDT_TASK = 0 ,
N.VOCAB_AXIS_CD = TEMP->LIST_0[D.SEQ ]->VOCAB_AXIS_MEAN_CV PLAN (D
WHERE (TEMP->LIST_0[D.SEQ ]->INSERT_FLAG = ROW_NOT_EXISTS ) )
AND (N )
WITH STATUS (TEMP->LIST_0[D.SEQ ]->STATUS ,TEMP->LIST_0[D.SEQ ]->ERRNUM ,TEMP->LIST_0[D.SEQ ]->
ERRMSG ) ,NOCOUNTER
SET EXIT_FLAG = 0
FOR (X = 1 TO MAX_LIST )
IF ((TEMP->LIST_0[X ]->STATUS = 0 ) AND (TEMP->LIST_0[X ]->ERRNUM > 0 ) )
CALL LOGGING (6 ,"" ,"NOMENCLATURE" ,CONCAT ("source_identifier= " ,TRIM (REQUESTIN->LIST_0[X ]->
SOURCE_IDENTIFIER ) ,"; source_vocabulary_mean=" ,TRIM (REQUESTIN->LIST_0[X ]->
SOURCE_VOCABULARY_MEAN ) ) ,"" ,TEMP->LIST_0[X ]->ERRMSG ,"" ,CONCAT ("source_string=" ,TRIM (
REQUESTIN->LIST_0[X ]->SOURCE_STRING ) ,"; principle_type_mean=" ,TRIM (REQUESTIN->LIST_0[X ]->
PRINCIPLE_TYPE_MEAN ) ) ,"" ,- (1 ) )
SET EXIT_FLAG = 1
ENDIF
ENDFOR
IF ((EXIT_FLAG = 1 ) ) GO TO EXIT_SCRIPT
ENDIF
ENDIF
IF ((REPLY->STATUS_DATA->STATUS != "W" ) )
SET REPLY->STATUS_DATA->STATUS = "S"
ENDIF
SET README_DATA->STATUS = "S"
SET README_DATA->MESSAGE = "Success - KIA_IMP_MISSING_CODES load"
IF ((VALIDATE (KIA_DBIMPORT_IND ,8 ) = 8 ) )
COMMIT
ENDIF
#EXIT_SCRIPT
SET TIMER->STOP = CNVTDATETIME (CURDATE ,CURTIME3 )
CALL LOGGING (0 ,"" ,"" ,"" ,"" ,"" ,"" ,BUILD ("Script elapsed time(secs):" ,DATETIMEDIFF (TIMER->
STOP ,TIMER->START ,5 ) ) ,"" ,- (1 ) )
EXECUTE DM_README_STATUS
SET KIA_VERSION = "2-SEPT-2004"
CALL LOGGING (- (2 ) ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,0 )
END GO
1)

150504:090406 M063904_DVD2               Cost 0.00 Cpu 0.01 Ela 0.01 Bio   0 Dio   0 O0M0R0 P1R0
