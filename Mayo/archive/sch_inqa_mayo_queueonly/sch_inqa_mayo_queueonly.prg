/**************************************************************************
                      MODIFICATION CONTROL LOG                 *
**************************************************************************
 Mod Date     Engineer      Comment
 --- -------- ------------  ---------------------------------------
 000 07/20/12 Akcia - SE    Initial release - copy of sch_inqa_stjude_queueonly
 005 08/21/13 Akcia - SE		fix sorting so correct comment pulls
*************************************************************************/
DROP PROGRAM  sch_inqa_mayo_queueonly : DBA  GO
CREATE PROGRAM  sch_inqa_mayo_queueonly : DBA
 
IF ( ( VALIDATE ( ACTION_NONE ,  - (1 ))!=0 ) )
DECLARE  ACTION_NONE  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF
 
IF ( ( VALIDATE ( ACTION_ADD ,  - (1 ))!=1 ) )
DECLARE  ACTION_ADD  =  I2  WITH  PROTECT , NOCONSTANT (1 )
ENDIF
 
IF ( ( VALIDATE ( ACTION_CHG ,  - (1 ))!=2 ) )
DECLARE  ACTION_CHG  =  I2  WITH  PROTECT , NOCONSTANT (2 )
ENDIF
 
IF ( ( VALIDATE ( ACTION_DEL ,  - (1 ))!=3 ) )
DECLARE  ACTION_DEL  =  I2  WITH  PROTECT , NOCONSTANT (3 )
ENDIF
 
IF ( ( VALIDATE ( ACTION_GET ,  - (1 ))!=4 ) )
DECLARE  ACTION_GET  =  I2  WITH  PROTECT , NOCONSTANT (4 )
ENDIF
 
IF ( ( VALIDATE ( ACTION_INA ,  - (1 ))!=5 ) )
DECLARE  ACTION_INA  =  I2  WITH  PROTECT , NOCONSTANT (5 )
ENDIF
 
IF ( ( VALIDATE ( ACTION_ACT ,  - (1 ))!=6 ) )
DECLARE  ACTION_ACT  =  I2  WITH  PROTECT , NOCONSTANT (6 )
ENDIF
 
IF ( ( VALIDATE ( ACTION_TEMP ,  - (1 ))!=999 ) )
DECLARE  ACTION_TEMP  =  I2  WITH  PROTECT , NOCONSTANT (999 )
ENDIF
 
IF ( ( VALIDATE ( TRUE ,  - (1 ))!=1 ) )
DECLARE  TRUE  =  I2  WITH  PROTECT , NOCONSTANT (1 )
ENDIF
 
IF ( ( VALIDATE ( FALSE ,  - (1 ))!=0 ) )
DECLARE  FALSE  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF
 
IF ( ( VALIDATE ( GEN_NBR_ERROR ,  - (1 ))!=3 ) )
DECLARE  GEN_NBR_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (3 )
ENDIF
 
IF ( ( VALIDATE ( INSERT_ERROR ,  - (1 ))!=4 ) )
DECLARE  INSERT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (4 )
ENDIF
 
IF ( ( VALIDATE ( UPDATE_ERROR ,  - (1 ))!=5 ) )
DECLARE  UPDATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (5 )
ENDIF
 
IF ( ( VALIDATE ( REPLACE_ERROR ,  - (1 ))!=6 ) )
DECLARE  REPLACE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (6 )
ENDIF
 
IF ( ( VALIDATE ( DELETE_ERROR ,  - (1 ))!=7 ) )
DECLARE  DELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (7 )
ENDIF
 
IF ( ( VALIDATE ( UNDELETE_ERROR ,  - (1 ))!=8 ) )
DECLARE  UNDELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (8 )
ENDIF
 
IF ( ( VALIDATE ( REMOVE_ERROR ,  - (1 ))!=9 ) )
DECLARE  REMOVE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (9 )
ENDIF
 
IF ( ( VALIDATE ( ATTRIBUTE_ERROR ,  - (1 ))!=10 ) )
DECLARE  ATTRIBUTE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (10 )
ENDIF
 
IF ( ( VALIDATE ( LOCK_ERROR ,  - (1 ))!=11 ) )
DECLARE  LOCK_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (11 )
ENDIF
 
IF ( ( VALIDATE ( NONE_FOUND ,  - (1 ))!=12 ) )
DECLARE  NONE_FOUND  =  I2  WITH  PROTECT , NOCONSTANT (12 )
ENDIF
 
IF ( ( VALIDATE ( SELECT_ERROR ,  - (1 ))!=13 ) )
DECLARE  SELECT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (13 )
ENDIF
 
IF ( ( VALIDATE ( UPDATE_CNT_ERROR ,  - (1 ))!=14 ) )
DECLARE  UPDATE_CNT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (14 )
ENDIF
 
IF ( ( VALIDATE ( NOT_FOUND ,  - (1 ))!=15 ) )
DECLARE  NOT_FOUND  =  I2  WITH  PROTECT , NOCONSTANT (15 )
ENDIF
 
IF ( ( VALIDATE ( VERSION_INSERT_ERROR ,  - (1 ))!=16 ) )
DECLARE  VERSION_INSERT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (16 )
ENDIF
 
IF ( ( VALIDATE ( INACTIVATE_ERROR ,  - (1 ))!=17 ) )
DECLARE  INACTIVATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (17 )
ENDIF
 
IF ( ( VALIDATE ( ACTIVATE_ERROR ,  - (1 ))!=18 ) )
DECLARE  ACTIVATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (18 )
ENDIF
 
IF ( ( VALIDATE ( VERSION_DELETE_ERROR ,  - (1 ))!=19 ) )
DECLARE  VERSION_DELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (19 )
ENDIF
 
IF ( ( VALIDATE ( UAR_ERROR ,  - (1 ))!=20 ) )
DECLARE  UAR_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (20 )
ENDIF
 
IF ( ( VALIDATE ( DUPLICATE_ERROR ,  - (1 ))!=21 ) )
DECLARE  DUPLICATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (21 )
ENDIF
 
IF ( ( VALIDATE ( CCL_ERROR ,  - (1 ))!=22 ) )
DECLARE  CCL_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (22 )
ENDIF
 
IF ( ( VALIDATE ( EXECUTE_ERROR ,  - (1 ))!=23 ) )
DECLARE  EXECUTE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (23 )
ENDIF
 
IF ( ( VALIDATE ( FAILED ,  - (1 ))!=0 ) )
DECLARE  FAILED  =  I2  WITH  PROTECT , NOCONSTANT ( FALSE )
ENDIF
 
IF ( ( VALIDATE ( TABLE_NAME , "ZZZ" )="ZZZ" ) )
DECLARE  TABLE_NAME  =  VC  WITH  PROTECT , NOCONSTANT ("" )
ELSE
SET  TABLE_NAME  =  FILLSTRING (100 , " " )
ENDIF
 
IF ( ( VALIDATE ( CALL_ECHO_IND ,  - (1 ))!=0 ) )
DECLARE  CALL_ECHO_IND  =  I2  WITH  PROTECT , NOCONSTANT ( FALSE )
ENDIF
 
IF ( ( VALIDATE ( I_VERSION ,  - (1 ))!=0 ) )
DECLARE  I_VERSION  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF
 
IF ( ( VALIDATE ( PROGRAM_NAME , "ZZZ" )="ZZZ" ) )
DECLARE  PROGRAM_NAME  =  VC  WITH  PROTECT , NOCONSTANT ( FILLSTRING (30 , " " ))
ENDIF
 
IF ( ( VALIDATE ( SCH_SECURITY_ID ,  - (1 ))!=0 ) )
DECLARE  SCH_SECURITY_ID  =  F8  WITH  PROTECT , NOCONSTANT (0.0 )
ENDIF
 
IF ( ( VALIDATE ( LAST_MOD , "NOMOD" )="NOMOD" ) )
DECLARE  LAST_MOD  =  C5  WITH  PRIVATE , NOCONSTANT ("" )
ENDIF
 
IF ( ( VALIDATE ( SCHUAR_DEF , 999 )=999 ) )
CALL ECHO ("Declaring schuar_def" )
DECLARE  SCHUAR_DEF  =  I2  WITH  PERSIST
SET  SCHUAR_DEF  = 1
DECLARE  UAR_SCH_CHECK_SECURITY (( SEC_TYPE_CD = F8 ( REF )), ( PARENT1_ID = F8 ( REF ))
	, (PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 ( REF )), ( USER_ID = F8 ( REF))) =  I4
	WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR = "uar_sch_check_security" , PERSIST
DECLARE  UAR_SCH_SECURITY_INSERT (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF ))
	, (PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 ( REF ))) =  I4
	 WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR = "uar_sch_security_insert" , PERSIST
DECLARE  UAR_SCH_SECURITY_PERFORM () =  I4
	WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX = "libshrschuar.a(libshrschuar.o)" , UAR ="uar_sch_security_perform" , PERSIST
DECLARE  UAR_SCH_CHECK_SECURITY_EX (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF ))
	, (PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 ( REF ))) =  I4
	WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR = "uar_sch_check_security_ex" , PERSIST
DECLARE  UAR_SCH_CHECK_SECURITY_EX2 (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF ))
	, (PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 ( REF ))
	, ( POSITION_CD = F8 ( REF ))) =  I4
	WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX = "libshrschuar.a(libshrschuar.o)" , UAR ="uar_sch_check_security_ex2" , PERSIST
DECLARE  UAR_SCH_SECURITY_INSERT_EX2 (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF ))
	, (PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 ( REF ))
	, ( POSITION_CD = F8 ( REF ))) =  I4
	WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX = "libshrschuar.a(libshrschuar.o)" , UAR ="uar_sch_security_insert_ex2" , PERSIST
ENDIF
 
IF ( ( VALIDATE ( I18NUAR_DEF , 999 )=999 ) )
CALL ECHO ("Declaring i18nuar_def" )
DECLARE  I18NUAR_DEF  =  I2  WITH  PERSIST
SET  I18NUAR_DEF  = 1
DECLARE  UAR_I18NLOCALIZATIONINIT (( P1 = I4 ), ( P2 = VC ), ( P3 = VC ), ( P4 = F8 )) =  I4  WITH PERSIST
DECLARE  UAR_I18NGETMESSAGE (( P1 = I4 ), ( P2 = VC ), ( P3 = VC )) =  VC  WITH  PERSIST
DECLARE  UAR_I18NBUILDMESSAGE () =  VC  WITH  PERSIST
DECLARE  UAR_I18NGETHIJRIDATE (( IMONTH = I2 ( VAL )), ( IDAY = I2 ( VAL )), ( IYEAR = I2 ( VAL ))
	, ( SDATEFORMATTYPE = VC ( REF ))) =  C50  WITH  IMAGE_AXP ="shri18nuar" , IMAGE_AIX
	= "libi18n_locale.a(libi18n_locale.o)" , UAR ="uar_i18nGetHijriDate" , PERSIST
DECLARE  UAR_I18NBUILDFULLFORMATNAME (( SFIRST = VC ( REF )), ( SLAST = VC ( REF )), ( SMIDDLE = VC( REF ))
	, ( SDEGREE = VC ( REF )), ( STITLE = VC ( REF )), ( SPREFIX = VC ( REF )), ( SSUFFIX = VC ( REF ))
	, ( SINITIALS = VC ( REF )), ( SORIGINAL = VC ( REF ))) =  C250
	WITH  IMAGE_AXP = "shri18nuar" , IMAGE_AIX ="libi18n_locale.a(libi18n_locale.o)" , UAR ="i18nBuildFullFormatName" ,	PERSIST
DECLARE  UAR_I18NGETARABICTIME (( CTIME = VC ( REF ))) =  C20
	WITH  IMAGE_AXP ="shri18nuar" , IMAGE_AIX ="libi18n_locale.a(libi18n_locale.o)" , UAR ="i18n_GetArabicTime" , PERSIST
ENDIF
 
DECLARE  I18NHANDLE  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
 
SET  STAT  =  UAR_I18NLOCALIZATIONINIT ( I18NHANDLE ,  CURPROG , "" ,  CURCCLREV )
 
IF (  NOT ( VALIDATE ( FORMAT_TEXT_REQUEST , 0 ) ) )
RECORD  FORMAT_TEXT_REQUEST  (
1  CALL_ECHO_IND  =  I2
1  RAW_TEXT  =  VC
1  TEMP_STR  =  VC
1  CHARS_PER_LINE  =  I4 )
ENDIF
 
 
IF (  NOT ( VALIDATE ( FORMAT_TEXT_REPLY , 0 ) ) )
RECORD  FORMAT_TEXT_REPLY  (
1  BEG_INDEX  =  I4
1  END_INDEX  =  I4
1  TEMP_INDEX  =  I4
1  QUAL_ALLOC  =  I4
1  QUAL_CNT  =  I4
1  QUAL [*]
2  TEXT_STRING  =  VC )
ENDIF
 
 
SET  FORMAT_TEXT_REPLY -> QUAL_CNT  = 0
 
SET  FORMAT_TEXT_REPLY -> QUAL_ALLOC  = 0
 
SUBROUTINE   FORMAT_TEXT  ( NULL_INDEX  )
 
SET  FORMAT_TEXT_REQUEST -> RAW_TEXT  =  TRIM ( FORMAT_TEXT_REQUEST -> RAW_TEXT , 3 )
SET  TEXT_LENGTH  =  TEXTLEN ( FORMAT_TEXT_REQUEST -> RAW_TEXT )
SET  FORMAT_TEXT_REQUEST -> TEMP_STR  = " "
 
FOR (  J_TEXT  = 1  TO  TEXT_LENGTH  )
	SET  TEMP_CHAR  =  SUBSTRING ( J_TEXT , 1 ,  FORMAT_TEXT_REQUEST -> RAW_TEXT )
 
	IF ( ( TEMP_CHAR =" " ) )
		SET  TEMP_CHAR  = "^"
	ENDIF
 
 	SET  T_NUMBER  =  ICHAR ( TEMP_CHAR )
 
	IF ( ( T_NUMBER !=10 ) AND ( T_NUMBER !=13 ) )
		SET  FORMAT_TEXT_REQUEST -> TEMP_STR  =  CONCAT ( FORMAT_TEXT_REQUEST -> TEMP_STR ,  TEMP_CHAR )
	ENDIF
 
	IF ( T_NUMBER =13 )
		SET  FORMAT_TEXT_REQUEST -> TEMP_STR  =  CONCAT ( FORMAT_TEXT_REQUEST -> TEMP_STR , "^" )
	ENDIF
ENDFOR
 
SET  FORMAT_TEXT_REQUEST -> TEMP_STR  =  REPLACE ( FORMAT_TEXT_REQUEST -> TEMP_STR , "^" , " " , 0 )
SET  FORMAT_TEXT_REQUEST -> RAW_TEXT  =  FORMAT_TEXT_REQUEST -> TEMP_STR
SET  FORMAT_TEXT_REPLY -> BEG_INDEX  = 0
SET  FORMAT_TEXT_REPLY -> END_INDEX  = 0
SET  FORMAT_TEXT_REPLY -> QUAL_CNT  = 0
SET  TEXT_LEN  =  TEXTLEN ( FORMAT_TEXT_REQUEST -> RAW_TEXT )
 
IF ( TEXT_LEN > FORMAT_TEXT_REQUEST -> CHARS_PER_LINE )
	WHILE ( TEXT_LEN > FORMAT_TEXT_REQUEST -> CHARS_PER_LINE )
 	SET  WRAP_IND  = 0
	SET  FORMAT_TEXT_REPLY -> BEG_INDEX  = 1
	WHILE ( WRAP_IND =0 )
 	SET  FORMAT_TEXT_REPLY -> END_INDEX
 		=  FINDSTRING (" " ,  FORMAT_TEXT_REQUEST -> RAW_TEXT , FORMAT_TEXT_REPLY -> BEG_INDEX )
 
	IF ( FORMAT_TEXT_REPLY -> END_INDEX =0 )
		SET  FORMAT_TEXT_REPLY -> END_INDEX  = ( FORMAT_TEXT_REQUEST -> CHARS_PER_LINE +10 )
	ENDIF
 
	IF ( ( FORMAT_TEXT_REPLY -> BEG_INDEX =1 )
		AND ( FORMAT_TEXT_REPLY -> END_INDEX > 	FORMAT_TEXT_REQUEST -> CHARS_PER_LINE ) )
		SET  FORMAT_TEXT_REPLY -> QUAL_CNT  = ( FORMAT_TEXT_REPLY -> QUAL_CNT +1 )
 
			IF ( ( FORMAT_TEXT_REPLY -> QUAL_CNT > FORMAT_TEXT_REPLY -> QUAL_ALLOC ) )
			SET  FORMAT_TEXT_REPLY -> QUAL_ALLOC  = ( FORMAT_TEXT_REPLY -> QUAL_ALLOC +10 )
			SET  STAT  =  ALTERLIST ( FORMAT_TEXT_REPLY -> QUAL ,  FORMAT_TEXT_REPLY -> QUAL_ALLOC )
			ENDIF
 
 		SET  FORMAT_TEXT_REPLY -> QUAL [ FORMAT_TEXT_REPLY -> QUAL_CNT ]-> TEXT_STRING
			=  SUBSTRING (1 , FORMAT_TEXT_REQUEST -> CHARS_PER_LINE ,  FORMAT_TEXT_REQUEST -> RAW_TEXT )
		SET  FORMAT_TEXT_REQUEST -> RAW_TEXT
			=  SUBSTRING (( FORMAT_TEXT_REQUEST -> CHARS_PER_LINE +1 )
			, (TEXT_LEN - FORMAT_TEXT_REQUEST -> CHARS_PER_LINE ),  FORMAT_TEXT_REQUEST -> RAW_TEXT )
		SET  WRAP_IND  = 1
	ELSEIF ( ( FORMAT_TEXT_REPLY -> END_INDEX > FORMAT_TEXT_REQUEST -> CHARS_PER_LINE ) )
	SET  FORMAT_TEXT_REPLY -> QUAL_CNT  = ( FORMAT_TEXT_REPLY -> QUAL_CNT +1 )
 
		IF ( ( FORMAT_TEXT_REPLY -> QUAL_CNT > FORMAT_TEXT_REPLY -> QUAL_ALLOC ) )
		SET  FORMAT_TEXT_REPLY -> QUAL_ALLOC  = ( FORMAT_TEXT_REPLY -> QUAL_ALLOC +10 )
		SET  STAT  =  ALTERLIST ( FORMAT_TEXT_REPLY -> QUAL ,  FORMAT_TEXT_REPLY -> QUAL_ALLOC )
		ENDIF
 
	SET  FORMAT_TEXT_REPLY -> QUAL [ FORMAT_TEXT_REPLY -> QUAL_CNT ]-> TEXT_STRING
		=  SUBSTRING (1 , (FORMAT_TEXT_REPLY -> BEG_INDEX -1 ),  FORMAT_TEXT_REQUEST -> RAW_TEXT )
	SET  FORMAT_TEXT_REQUEST -> RAW_TEXT
		=  SUBSTRING ( FORMAT_TEXT_REPLY -> BEG_INDEX
		, (( TEXT_LEN - FORMAT_TEXT_REPLY -> BEG_INDEX )+1 ),  FORMAT_TEXT_REQUEST -> RAW_TEXT )
	SET  WRAP_IND  = 1
	ENDIF
 
	SET  FORMAT_TEXT_REPLY -> BEG_INDEX  = ( FORMAT_TEXT_REPLY -> END_INDEX +1 )
 
	ENDWHILE
 
	SET  TEXT_LEN  =  TEXTLEN ( FORMAT_TEXT_REQUEST -> RAW_TEXT )
 
	ENDWHILE
 
	SET  FORMAT_TEXT_REPLY -> QUAL_CNT  = ( FORMAT_TEXT_REPLY -> QUAL_CNT +1 )
 
	IF ( ( FORMAT_TEXT_REPLY -> QUAL_CNT > FORMAT_TEXT_REPLY -> QUAL_ALLOC ) )
	SET  FORMAT_TEXT_REPLY -> QUAL_ALLOC  = ( FORMAT_TEXT_REPLY -> QUAL_ALLOC +10 )
	SET  STAT  =  ALTERLIST ( FORMAT_TEXT_REPLY -> QUAL ,  FORMAT_TEXT_REPLY -> QUAL_ALLOC )
	ENDIF
 
	SET  FORMAT_TEXT_REPLY -> QUAL [ FORMAT_TEXT_REPLY -> QUAL_CNT ]-> TEXT_STRING
		= FORMAT_TEXT_REQUEST -> RAW_TEXT
	ELSE
	SET  FORMAT_TEXT_REPLY -> QUAL_CNT  = ( FORMAT_TEXT_REPLY -> QUAL_CNT +1 )
 
	IF ( ( FORMAT_TEXT_REPLY -> QUAL_CNT > FORMAT_TEXT_REPLY -> QUAL_ALLOC ) )
	SET  FORMAT_TEXT_REPLY -> QUAL_ALLOC  = ( FORMAT_TEXT_REPLY -> QUAL_ALLOC +10 )
	SET  STAT  =  ALTERLIST ( FORMAT_TEXT_REPLY -> QUAL ,  FORMAT_TEXT_REPLY -> QUAL_ALLOC )
	ENDIF
 
	SET  FORMAT_TEXT_REPLY -> QUAL [ FORMAT_TEXT_REPLY -> QUAL_CNT ]-> TEXT_STRING
		= FORMAT_TEXT_REQUEST -> RAW_TEXT
ENDIF
 
END ;Subroutine
 
 
SUBROUTINE   INC_FORMAT_TEXT  ( NULL_INDEX  )
 
SET  FORMAT_TEXT_REPLY -> QUAL_CNT  = ( FORMAT_TEXT_REPLY -> QUAL_CNT +1 )
 
IF ( ( FORMAT_TEXT_REPLY -> QUAL_CNT > FORMAT_TEXT_REPLY -> QUAL_ALLOC ) )
SET  FORMAT_TEXT_REPLY -> QUAL_ALLOC  = ( FORMAT_TEXT_REPLY -> QUAL_ALLOC +10 )
SET  STAT  =  ALTERLIST ( FORMAT_TEXT_REPLY -> QUAL ,  FORMAT_TEXT_REPLY -> QUAL_ALLOC )
ENDIF
 
END ;Subroutine
 
 
IF (  NOT ( VALIDATE ( GET_ATGROUP_EXP_REQUEST , 0 ) ) )
RECORD  GET_ATGROUP_EXP_REQUEST  (
1  SECURITY_IND  =  I2
1  CALL_ECHO_IND  =  I2
1  QUAL [*]
2  SCH_OBJECT_ID  =  F8
2  DUPLICATE_IND  =  I2 )
ENDIF
 
IF (  NOT ( VALIDATE ( GET_ATGROUP_EXP_REPLY , 0 ) ) )
RECORD  GET_ATGROUP_EXP_REPLY  (
1  QUAL_CNT  =  I4
1  QUAL [*]
2  SCH_OBJECT_ID  =  F8
2  QUAL_CNT  =  I4
2  QUAL [*]
3  APPT_TYPE_CD  =  F8 )
ENDIF
 
IF (  NOT ( VALIDATE ( GET_LOCGROUP_EXP_REQUEST , 0 ) ) )
RECORD  GET_LOCGROUP_EXP_REQUEST  (
1  SECURITY_IND  =  I2
1  CALL_ECHO_IND  =  I2
1  QUAL [*]
2  SCH_OBJECT_ID  =  F8
2  DUPLICATE_IND  =  I2 )
ENDIF
 
IF (  NOT ( VALIDATE ( GET_LOCGROUP_EXP_REPLY , 0 ) ) )
RECORD  GET_LOCGROUP_EXP_REPLY  (
1  QUAL_CNT  =  I4
1  QUAL [*]
2  SCH_OBJECT_ID  =  F8
2  QUAL_CNT  =  I4
2  QUAL [*]
3  LOCATION_CD  =  F8 )
ENDIF
 
IF (  NOT ( VALIDATE ( GET_RES_GROUP_EXP_REQUEST , 0 ) ) )
RECORD  GET_RES_GROUP_EXP_REQUEST  (
1  SECURITY_IND  =  I2
1  CALL_ECHO_IND  =  I2
1  QUAL [*]
2  RES_GROUP_ID  =  F8
2  DUPLICATE_IND  =  I2 )
ENDIF
 
IF (  NOT ( VALIDATE ( GET_RES_GROUP_EXP_REPLY , 0 ) ) )
RECORD  GET_RES_GROUP_EXP_REPLY  (
1  QUAL_CNT  =  I4
1  QUAL [*]
2  RES_GROUP_ID  =  F8
2  QUAL_CNT  =  I4
2  QUAL [*]
3  RESOURCE_CD  =  F8
3  MNEMONIC  =  VC )
ENDIF
 
IF (  NOT ( VALIDATE ( GET_SLOT_GROUP_EXP_REQUEST , 0 ) ) )
RECORD  GET_SLOT_GROUP_EXP_REQUEST  (
1  SECURITY_IND  =  I2
1  CALL_ECHO_IND  =  I2
1  QUAL [*]
2  SLOT_GROUP_ID  =  F8
2  DUPLICATE_IND  =  I2 )
ENDIF
 
IF (  NOT ( VALIDATE ( GET_SLOT_GROUP_EXP_REPLY , 0 ) ) )
RECORD  GET_SLOT_GROUP_EXP_REPLY  (
1  QUAL_CNT  =  I4
1  QUAL [*]
2  SLOT_GROUP_ID  =  F8
2  QUAL_CNT  =  I4
2  QUAL [*]
3  SLOT_TYPE_ID  =  F8 )
ENDIF
 
DECLARE  LOADCODEVALUE (( CODE_SET = I4 ), ( CDF_MEANING = VC ), ( OPTION_FLAG = I2 )) =  F8
DECLARE  S_CDF_MEANING  =  C12  WITH  PUBLIC , NOCONSTANT ( FILLSTRING (12 , " " ))
DECLARE  S_CODE_VALUE  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
 
SUBROUTINE   LOADCODEVALUE  ( CODE_SET ,  CDF_MEANING ,  OPTION_FLAG  )
SET  S_CDF_MEANING  =  CDF_MEANING
SET  S_CODE_VALUE  = 0.0
SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( CODE_SET ,  S_CDF_MEANING , 1 ,  S_CODE_VALUE )
 
IF (  (( ( STAT !=0 ) )  OR  (( S_CODE_VALUE <=0 ) ))  )
SET  S_CODE_VALUE  = 0.0
	CASE (  OPTION_FLAG  )
	OF 0 :
		SET  TABLE_NAME  =  BUILD ("ERROR-->loadcodevalue (" ,  CODE_SET , "," , '"' ,  S_CDF_MEANING
			, '"', "," ,  OPTION_FLAG , ") not found, CURPROG [" ,  CURPROG , "]" )
		CALL ECHO ( TABLE_NAME )
		SET  FAILED  =  UAR_ERROR  GO TO  EXIT_SCRIPT
	OF 1 :
		CALL ECHO ( BUILD ("INFO-->loadcodevalue (" ,  CODE_SET , "," , '"' ,  S_CDF_MEANING
		 	, '"' , "," , OPTION_FLAG , ") not found, CURPROG [" ,  CURPROG , "]" ))
	ENDCASE
 
ELSE
CALL ECHO ( BUILD ("SUCCESS-->loadcodevalue (" ,  CODE_SET , "," , '"' ,  S_CDF_MEANING , '"'
 	,"," ,  OPTION_FLAG , ") CODE_VALUE [" ,  S_CODE_VALUE , "]" ))
ENDIF
 
 
RETURN ( S_CODE_VALUE )
 
END ;Subroutine
 
/*Data Selection*/
RECORD  REPLY  (
1  ATTR_QUAL_CNT  =  I4
1  ATTR_QUAL [*]
2  ATTR_NAME  =  C31
2  ATTR_LABEL  =  C60
2  ATTR_TYPE  =  C8
2  ATTR_DEF_SEQ  =  I4
2  ATTR_ALT_SORT_COLUMN  =  VC
1  QUERY_QUAL_CNT  =  I4
1  QUERY_QUAL [*]
2  HIDE#SCHENTRYID  =  F8
2  HIDE#SCHEVENTID  =  F8
2  HIDE#SCHEDULEID  =  F8
2  HIDE#SCHEDULESEQ  =  I4
2  HIDE#REQACTIONID  =  F8
2  HIDE#ACTIONID  =  F8
2  HIDE#SCHAPPTID  =  F8
2  HIDE#STATEMEANING  =  VC
2  HIDE#EARLIESTDTTM  =  DQ8
2  HIDE#LATESTDTTM  =  DQ8
2  HIDE#REQMADEDTTM  =  DQ8
2  HIDE#ENTRYSTATEMEANING  =  C12
2  HIDE#REQACTIONMEANING  =  C12
2  HIDE#ENCOUNTERID  =  F8
2  HIDE#PERSONID  =  F8
2  HIDE#BITMASK  =  I4
/*001-begin  addt'l fields*/
2 VISIT_REASON = vc
2 ORD_PROV = vc
2 REQ_PROV = vc
2 LOCATION = vc
2 TIME_FRAME = vc
2 ORD_DT_TM = dq8
/*001-end*/
2  special_instructions = vc			;000
2  ISOLATION_TYPE  =  VC
2  STAT  =  VC
2  INPATIENT  =  VC
2  CMT  =  VC
2  TIME  =  VC
;000 2  EARLIEST_DT_TM  =  DQ8
2  EARLIEST_DT_TM  =  VC
2  SCHEDULED_DT_TM  =  DQ8
2  DAYS_OF_WEEK  =  VC
2  REQ_ACTION_DISPLAY  =  VC
2  APPT_TYPE_DISPLAY  =  VC
2  PERSON_NAME  =  VC
2  SCH_ACTION_ID  =  F8
2  SCH_EVENT_ID  =  F8
2  ORDERS  =  VC
2  ORDER_CMT  =  VC
2  PP_ACTIVITY_ID  =  F8
2  PP_ACTIVITY  =  VC
2  PP_PHASE_ACTIVITY  =  VC
2  PP_REFERENCE  =  VC
2  PP_PHASE_REFERENCE  =  VC
2  PP_SCHEDULED_PHASE_ID  =  F8
2  PP_SCHEDULED_PHASE  =  VC
1  STATUS_DATA
2  STATUS  =  C1
2  SUBEVENTSTATUS [1 ]
3  OPERATIONNAME  =  C25
3  OPERATIONSTATUS  =  C1
3  TARGETOBJECTNAME  =  C25
3  TARGETOBJECTVALUE  =  VC ) WITH  PERSISTSCRIPT
 
DECLARE  CS23010_DISPPIDRL_CD  =  F8  WITH  PUBLIC , CONSTANT ( LOADCODEVALUE (23010 , "DISPPIDRL", 1 ))
DECLARE  PREF_VALUE_DISPPIDRL  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
IF ( ( CS23010_DISPPIDRL_CD >0.0 ) )
SELECT  INTO "nl:"
	A.PREF_ID
FROM ( SCH_PREF  A )
PLAN ( A
	WHERE (A.PREF_TYPE_CD= CS23010_DISPPIDRL_CD )
	AND (A.PARENT_TABLE="SYSTEM" )
	AND (A.PARENT_ID=0 )
	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
DETAIL
	PREF_VALUE_DISPPIDRL =A.PREF_VALUE
WITH  NOCOUNTER
ENDIF
 
 
SET  REPLY -> ATTR_QUAL_CNT  = 35			;001
 
DECLARE  MAX_LENGTH_ORDERS  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
DECLARE  MAX_LENGTH_PP_ACTIVITY  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
DECLARE  MAX_LENGTH_PP_PHASE_ACTIVITY  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
DECLARE  MAX_LENGTH_PP_REFERENCE  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
DECLARE  MAX_LENGTH_PP_PHASE_REFERENCE  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
DECLARE  MAX_LENGTH_PP_SCHEDULED_PHASE  =  I4  WITH  PUBLIC , NOCONSTANT (0 )
DECLARE  MAX_LENGTH_special_instructions  =  I4  WITH  PUBLIC , NOCONSTANT (0 )			;000
DECLARE  MAX_LENGTH_earliest_dt_tm  =  I4  WITH  PUBLIC , NOCONSTANT (0 )			;000
 
IF ( ( PREF_VALUE_DISPPIDRL >0.0 ) )
SET  REPLY -> ATTR_QUAL_CNT  = ( REPLY -> ATTR_QUAL_CNT +5 )
ENDIF
 
SET  T_INDEX  = 0
SET  STAT  =  ALTERLIST ( REPLY -> ATTR_QUAL ,  REPLY -> ATTR_QUAL_CNT )
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#schentryid"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#SCHENTRYID"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "f8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#scheventid"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#SCHEVENTID"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "f8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#scheduleid"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#SCHEDULEID"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "f8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#scheduleseq"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#SCHEDULESEQ"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "i4"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#reqactionid"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#REQACTIONID"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "f8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#actionid"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#ACTIONID"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "f8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#schapptid"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#SCHAPPTID"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "f8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#statemeaning"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#STATEMEANING"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#earliestdttm"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#EARLIESTDTTM"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "dq8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#latestdttm"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#LATESTDTTM"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "dq8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#reqmadedttm"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#REQMADEDTTM"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "dq8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#entrystatemeaning"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#ENTRYSTATEMEANING"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#reqactionmeaning"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#REQACTIONMEANING"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#encounterid"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#ENCOUNTERID"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "f8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#personid"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#PERSONID"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "f8"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "hide#bitmask"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  = "HIDE#BITMASK"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "i4"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "cmt"
 
;002	SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "C" , "C" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Contact Comment" , "Contact Comment" )
 
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "order_cmt"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "OC" , "OC" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "isolation_type"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Iso" , "Iso" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "stat"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Stat" , "Stat" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "inpatient"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Inp" , "Inp" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "req_action_display"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Action" , "Action" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "person_name"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Person Name" , "Person Name" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "appt_type_display"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Appointment Type" , "Appointment Type" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
/*001-begin*/
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "earliest_dt_tm"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE ,
"Requested Date" , "Requested Date" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"			;000
;000 SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Requested Date" , "Requested Date" )
;000 SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "dq8"
/*001-end*/
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "time"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Time" , "Time" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "orders"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Orders" , "Orders" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "scheduled_dt_tm"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Scheduled Date" , "Scheduled Date" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "dq8"
 
/*001  copy reply structure for addt'l fields - standard count is 28*/
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "visit_reason"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE ,"Reason For Visit" , "Reason For Visit" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "ord_prov"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE ,"Ordering Physician" , "Ordering Physician" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "req_prov"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE ,"Requested Physician" , "Requested Physician" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "location"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE ,"Location" , "Location" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
 
/*001 do not include time frame
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "time_frame"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE ,"Time Frame" , "Time Frame" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
time frame*/
 
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "ord_dt_tm"
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE ,"Ordered Date" , "Ordered Date" )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "dq8"
/*001*/
 ;000 start
SET  T_INDEX  = ( T_INDEX +1 )
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "special_instructions"
 
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL  =  UAR_I18NGETMESSAGE ( I18NHANDLE , "Special Instructions" ,
"Special Instructions" )
 
SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
;000 end
 
IF ( PREF_VALUE_DISPPIDRL >0.0 )
  SET  T_INDEX  = ( T_INDEX +1 )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "pp_activity"
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE , "PowerPlan Activity" , "PowerPlan Activity" )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
  SET  T_INDEX  = ( T_INDEX +1 )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "pp_Phase_activity"
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE , "PowerPlan Phase Activity" , "PowerPlan Phase Activity" )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
  SET  T_INDEX  = ( T_INDEX +1 )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "pp_reference"
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE , "PowerPlan Reference" , "PowerPlan Referencee" )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
  SET  T_INDEX  = ( T_INDEX +1 )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "pp_phase_reference"
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE , "PowerPlan Phase Reference" , "PowerPlan Phase Reference" )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
  SET  T_INDEX  = ( T_INDEX +1 )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_NAME  = "pp_scheduled_phase"
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_LABEL
	=  UAR_I18NGETMESSAGE ( I18NHANDLE , "PowerPlan Scheduled Phase" , "PowerPlan Scheduled Phase" )
  SET  REPLY -> ATTR_QUAL [ T_INDEX ]-> ATTR_TYPE  = "vc"
ENDIF
 
 
SET  REPLY -> QUERY_QUAL_CNT  = 0
SET  STAT  =  ALTERLIST ( REPLY -> QUERY_QUAL ,  REPLY -> QUERY_QUAL_CNT )
 
FREE SET T_RECORD
RECORD  T_RECORD  (
1 QUEUE_ID  =  F8
1 PERSON_ID  =  F8
1 RESOURCE_CD  =  F8
1 LOCATION_CD  =  F8
1 BEG_DT_TM  =  DQ8
1 END_DT_TM  =  DQ8
1 ATGROUP_ID  =  F8
1 LOCGROUP_ID  =  F8
1 RES_GROUP_ID  =  F8
1 SLOT_GROUP_ID  =  F8
1 APPT_TYPE_CD  =  F8
1 TITLE  =  VC
1 APPTTYPE_QUAL_CNT  =  I4
1 APPTTYPE_QUAL [*]
   2  APPT_TYPE_CD  =  F8
1 LOCATION_QUAL_CNT  =  I4
1 LOCATION_QUAL [*]
   2  LOCATION_CD  =  F8
1 RESOURCE_QUAL_CNT  =  I4
1 RESOURCE_QUAL [*]
   2  RESOURCE_CD  =  F8
   2  PERSON_ID  =  F8
1 SLOT_QUAL_CNT  =  I4
1 SLOT_QUAL [*]
   2  SLOT_TYPE_ID  =  F8
1 USER_DEFINED  =  VC
1 ORDER_TYPE_CD  =  F8
1 ORDER_TYPE_MEANING  =  C12
1 PENDING_STATE_CD  =  F8
1 PENDING_STATE_MEANING  =  C12
1 ISOBEG_TYPE_CD  =  F8
1 ISOBEG_TYPE_MEANING  =  C12
1 ISOEND_TYPE_CD  =  F8
1 ISOEND_TYPE_MEANING  =  C12
1 ISOLATION_TYPE_CD  =  F8
1 ISOLATION_TYPE_MEANING  =  C12
1 USERDEFINED_TYPE_CD  =  F8
1 USERDEFINED_TYPE_MEANING  =  C12
1 TEMP_BEG_DT_TM  =  DQ8
1 TEMP_END_DT_TM  =  DQ8
1 TEMP_ISOLATION_CD  =  F8
1 ORDCOMMENT_CD  =  F8
1 ORDCOMMENT_MEANING  =  C12
1 ORDER_ACTION_CD  =  F8
1 ORDER_ACTION_MEANING  =  C12
1 MODIFY_ACTION_CD  =  F8
1 MODIFY_ACTION_MEANING  =  C12
1 COLLECTION_ACTION_CD  =  F8
1 COLLECTION_ACTION_MEANING  =  C12
1 RENEW_ACTION_CD  =  F8
1 RENEW_ACTION_MEANING  =  C12
1 ACTIVATE_ACTION_CD  =  F8
1 ACTIVATE_ACTION_MEANING  =  C12
1 FUTUREDC_ACTION_CD  =  F8
1 FUTUREDC_ACTION_MEANING  =  C12
1 RESUME_RENEW_ACTION_CD  =  F8
1 RESUME_RENEW_ACTION_MEANING  =  C12
1 MAX_ORDER_CNT  =  I4
1 EVENT_QUAL [*]
   2 PROTOCOL_PARENT_ID  =  F8
   2 ORDER_QUAL_CNT  =  I4
   2 ORDER_QUAL [*]
      3  ORDER_ID  =  F8
      3  DESCRIPTION  =  VC
      3  ORDER_SEQ_NBR  =  I4 )
 
CALL ECHO ("Checking the input fields..." )
 
FOR (  I_INPUT  = 1  TO  SIZE ( REQUEST -> QUAL , 5 ) )
  IF ( ( REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_MEANING_ID =0 ) )
    CASE (  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_MEANING  )
	OF "QUEUE" :
		SET  T_RECORD -> QUEUE_ID  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
	OF "PERSON" :
		SET  T_RECORD -> PERSON_ID  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
	OF "RESOURCE" :
		SET  T_RECORD -> RESOURCE_CD  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
	OF "LOCATION" :
		SET  T_RECORD -> LOCATION_CD  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
	OF "BEGDTTM" :
		SET  T_RECORD -> BEG_DT_TM  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_DT_TM_VALUE
	OF "ENDDTTM" :
		SET  T_RECORD -> END_DT_TM  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_DT_TM_VALUE
	OF "ATGROUP" :
		SET  T_RECORD -> ATGROUP_ID  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
	OF "LOCGROUP" :
		SET  T_RECORD -> LOCGROUP_ID  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
	OF "RESGROUP" :
		SET  T_RECORD -> RES_GROUP_ID  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
	OF "SLOTGROUP" :
		SET  T_RECORD -> SLOT_GROUP_ID  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
	OF "TITLE" :
		SET  T_RECORD -> TITLE  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_DISPLAY_VALUE
	OF "APPTTYPE" :
		SET  T_RECORD -> APPT_TYPE_CD  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_VALUE
    ENDCASE
  ELSE
  CASE (  REQUEST -> QUAL [ I_INPUT ]-> LABEL_TEXT  )
    OF "<Label Text Goes Here>" :
	SET  T_RECORD -> USER_DEFINED  =  REQUEST -> QUAL [ I_INPUT ]-> OE_FIELD_DISPLAY_VALUE
  ENDCASE
ENDIF
 
ENDFOR
 
 
IF ( ( T_RECORD -> ATGROUP_ID >0 ) )
SET  GET_ATGROUP_EXP_REQUEST -> CALL_ECHO_IND  = 0
SET  GET_ATGROUP_EXP_REQUEST -> SECURITY_IND  = 1
SET  GET_ATGROUP_EXP_REPLY -> QUAL_CNT  = 1
SET  STAT  =  ALTERLIST ( GET_ATGROUP_EXP_REQUEST -> QUAL ,  GET_ATGROUP_EXP_REPLY -> QUAL_CNT )
SET  GET_ATGROUP_EXP_REQUEST -> QUAL [ GET_ATGROUP_EXP_REPLY -> QUAL_CNT ]-> SCH_OBJECT_ID
	= T_RECORD -> ATGROUP_ID
SET  GET_ATGROUP_EXP_REQUEST -> QUAL [ GET_ATGROUP_EXP_REPLY -> QUAL_CNT ]-> DUPLICATE_IND  = 1
 
EXECUTE SCH_GET_ATGROUP_EXP
 
FOR (  I_INPUT  = 1  TO  GET_ATGROUP_EXP_REPLY -> QUAL_CNT  )
	SET  T_RECORD -> APPTTYPE_QUAL_CNT  =  GET_ATGROUP_EXP_REPLY -> QUAL [ I_INPUT ]-> QUAL_CNT
	SET  STAT  =  ALTERLIST ( T_RECORD -> APPTTYPE_QUAL ,  T_RECORD -> APPTTYPE_QUAL_CNT )
	FOR (  J_INPUT  = 1  TO  T_RECORD -> APPTTYPE_QUAL_CNT  )
		SET  T_RECORD -> APPTTYPE_QUAL [ J_INPUT ]-> APPT_TYPE_CD
			=  GET_ATGROUP_EXP_REPLY -> QUAL [ I_INPUT ]-> QUAL [ J_INPUT ]-> APPT_TYPE_CD
	ENDFOR
ENDFOR
 
ELSE
SET  T_RECORD -> APPTTYPE_QUAL_CNT  = 0
ENDIF
 
 
IF ( T_RECORD -> LOCGROUP_ID >0 )
SET  GET_LOCGROUP_EXP_REQUEST -> CALL_ECHO_IND  = 0
SET  GET_LOCGROUP_EXP_REQUEST -> SECURITY_IND  = 1
SET  GET_LOCGROUP_EXP_REPLY -> QUAL_CNT  = 1
SET  STAT  =  ALTERLIST ( GET_LOCGROUP_EXP_REQUEST -> QUAL ,  GET_LOCGROUP_EXP_REPLY -> QUAL_CNT )
SET  GET_LOCGROUP_EXP_REQUEST -> QUAL [ GET_LOCGROUP_EXP_REPLY -> QUAL_CNT ]-> SCH_OBJECT_ID
	= T_RECORD -> LOCGROUP_ID
SET  GET_LOCGROUP_EXP_REQUEST -> QUAL [ GET_LOCGROUP_EXP_REPLY -> QUAL_CNT ]-> DUPLICATE_IND
	= 1
 
EXECUTE SCH_GET_LOCGROUP_EXP
 
FOR (  I_INPUT  = 1  TO  GET_LOCGROUP_EXP_REPLY -> QUAL_CNT  )
	SET  T_RECORD -> LOCATION_QUAL_CNT  =  GET_LOCGROUP_EXP_REPLY -> QUAL [ I_INPUT ]-> QUAL_CNT
	SET  STAT  =  ALTERLIST ( T_RECORD -> LOCATION_QUAL ,  T_RECORD -> LOCATION_QUAL_CNT )
	FOR (  J_INPUT  = 1  TO  T_RECORD -> LOCATION_QUAL_CNT  )
		SET  T_RECORD -> LOCATION_QUAL [ J_INPUT ]-> LOCATION_CD
			=  GET_LOCGROUP_EXP_REPLY -> QUAL [I_INPUT ]-> QUAL [ J_INPUT ]-> LOCATION_CD
	ENDFOR
ENDFOR
 
ELSE
SET  T_RECORD -> LOCATION_QUAL_CNT  = 0
ENDIF
 
 
IF ( ( T_RECORD -> RES_GROUP_ID >0 ) )
SET  GET_RES_GROUP_EXP_REQUEST -> CALL_ECHO_IND  = 0
SET  GET_RES_GROUP_EXP_REQUEST -> SECURITY_IND  = 1
SET  GET_RES_GROUP_EXP_REPLY -> QUAL_CNT  = 1
SET  STAT  =  ALTERLIST ( GET_RES_GROUP_EXP_REQUEST -> QUAL ,  GET_RES_GROUP_EXP_REPLY -> QUAL_CNT )
SET  GET_RES_GROUP_EXP_REQUEST -> QUAL [ GET_RES_GROUP_EXP_REPLY -> QUAL_CNT ]-> RES_GROUP_ID
	= T_RECORD -> RES_GROUP_ID
SET  GET_RES_GROUP_EXP_REQUEST -> QUAL [ GET_RES_GROUP_EXP_REPLY -> QUAL_CNT ]-> DUPLICATE_IND
	= 1
 
EXECUTE SCH_GET_RES_GROUP_EXP
 
FOR (  I_INPUT  = 1  TO  GET_RES_GROUP_EXP_REPLY -> QUAL_CNT  )
	SET  T_RECORD -> RESOURCE_QUAL_CNT  =  GET_RES_GROUP_EXP_REPLY -> QUAL [ I_INPUT ]-> QUAL_CNT
	SET  STAT  =  ALTERLIST ( T_RECORD -> RESOURCE_QUAL ,  T_RECORD -> RESOURCE_QUAL_CNT )
		FOR (  J_INPUT  = 1  TO  T_RECORD -> RESOURCE_QUAL_CNT  )
			SET  T_RECORD -> RESOURCE_QUAL [ J_INPUT ]-> RESOURCE_CD
				=  GET_RES_GROUP_EXP_REPLY -> QUAL [I_INPUT ]-> QUAL [ J_INPUT ]-> RESOURCE_CD
		ENDFOR
ENDFOR
 
ELSE
SET  T_RECORD -> RESOURCE_QUAL_CNT  = 0
ENDIF
 
 
IF ( ( T_RECORD -> SLOT_GROUP_ID >0 ) )
	SET  GET_SLOT_GROUP_EXP_REQUEST -> CALL_ECHO_IND  = 0
	SET  GET_SLOT_GROUP_EXP_REQUEST -> SECURITY_IND  = 1
	SET  GET_SLOT_GROUP_EXP_REPLY -> QUAL_CNT  = 1
	SET  STAT  =  ALTERLIST ( GET_SLOT_GROUP_EXP_REQUEST -> QUAL ,  GET_SLOT_GROUP_EXP_REPLY -> QUAL_CNT )
	SET  GET_SLOT_GROUP_EXP_REQUEST -> QUAL [ GET_SLOT_GROUP_EXP_REPLY -> QUAL_CNT ]-> SLOT_GROUP_ID
		= T_RECORD -> SLOT_GROUP_ID
	SET  GET_SLOT_GROUP_EXP_REQUEST -> QUAL [ GET_SLOT_GROUP_EXP_REPLY -> QUAL_CNT ]-> DUPLICATE_IND
		= 1
 
EXECUTE SCH_GET_SLOT_GROUP_EXP
 
FOR (  I_INPUT  = 1  TO  GET_SLOT_GROUP_EXP_REPLY -> QUAL_CNT  )
	SET  T_RECORD -> SLOT_QUAL_CNT  =  GET_SLOT_GROUP_EXP_REPLY -> QUAL [ I_INPUT ]-> QUAL_CNT
	SET  STAT  =  ALTERLIST ( T_RECORD -> SLOT_QUAL ,  T_RECORD -> SLOT_QUAL_CNT )
	FOR (  J_INPUT  = 1  TO  T_RECORD -> SLOT_QUAL_CNT  )
		SET  T_RECORD -> SLOT_QUAL [ J_INPUT ]-> SLOT_TYPE_ID
			=  GET_SLOT_GROUP_EXP_REPLY -> QUAL [ I_INPUT ]-> QUAL [ J_INPUT ]-> SLOT_TYPE_ID
	ENDFOR
ENDFOR
 
ELSE
SET  T_RECORD -> SLOT_QUAL_CNT  = 0
ENDIF
 
 
IF ( ( T_RECORD -> RESOURCE_QUAL_CNT >0 ) )
SELECT  INTO "nl:"
A.PERSON_ID,
D.SEQ
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( T_RECORD -> RESOURCE_QUAL_CNT )),
( SCH_RESOURCE  A )
PLAN ( D )
AND ( A
WHERE (A.RESOURCE_CD= T_RECORD -> RESOURCE_QUAL [D.SEQ]-> RESOURCE_CD )
	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
DETAIL
 T_RECORD -> RESOURCE_QUAL [D.SEQ]-> PERSON_ID =A.PERSON_ID
WITH  NOCOUNTER
ENDIF
 
SET  T_RECORD -> PENDING_STATE_CD  = 0.0
SET  T_RECORD -> PENDING_STATE_MEANING  =  FILLSTRING (12 , " " )
SET  T_RECORD -> PENDING_STATE_MEANING  = "PENDING"
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (23018 ,  T_RECORD -> PENDING_STATE_MEANING , 1 , T_RECORD -> PENDING_STATE_CD )
 
CALL ECHO ( BUILD
	("UAR_GET_MEANING_BY_CODESET(23018," ,  T_RECORD -> PENDING_STATE_MEANING , ",1," ,  T_RECORD -> PENDING_STATE_CD , ")" ))
 
IF (  (( ( STAT !=0 ) )  OR  (( T_RECORD -> PENDING_STATE_CD <=0 ) ))  )
	IF (  CALL_ECHO_IND  )
		CALL ECHO ( BUILD ("stat = " ,  STAT ))
		CALL ECHO ( BUILD ("t_record->pending_state_cd = " ,  T_RECORD -> PENDING_STATE_CD ))
		CALL ECHO ( BUILD ("Invalid select on CODE_SET (23018), CDF_MEANING(" ,  T_RECORD ->PENDING_STATE_MEANING , ")" ))
	ENDIF
	GO TO  EXIT_SCRIPT
ENDIF
 
 
SELECT INTO "nl:"
	AD_NULL = NULLIND (AD.SCH_ACTION_ID)
	, L_NULL = NULLIND (L.SCH_LOCK_ID)
	, A.QUEUE_ID
	, ENC_LOCATION_DISP = UAR_GET_CODE_DISPLAY(ENC.LOCATION_CD)
 
FROM
	SCH_ENTRY   A
	, SCH_EVENT_ACTION   EA
	, SCH_EVENT   E
	, PERSON   P
	, ENCOUNTER   ENC
	, SCH_LOCK   L
	, SCH_ACTION_DATE   AD
 
PLAN ( A
	WHERE (A.QUEUE_ID= T_RECORD -> QUEUE_ID )
	AND (A.ENTRY_STATE_CD= T_RECORD -> PENDING_STATE_CD )
	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
AND ( EA
	WHERE (EA.SCH_ACTION_ID=A.SCH_ACTION_ID)
	AND (EA.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
AND ( E
	WHERE (E.SCH_EVENT_ID=EA.SCH_EVENT_ID)
	AND (E.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
AND ( P
	WHERE (P.PERSON_ID=A.PERSON_ID))
AND ( ENC
	WHERE (ENC.ENCNTR_ID=A.ENCNTR_ID))
AND ( L
	WHERE (L.PARENT_TABLE= OUTERJOIN ("SCH_EVENT" ))
	AND (L.PARENT_ID= OUTERJOIN (A.SCH_EVENT_ID))
	AND (L.RELEASE_DT_TM> OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 )))
	AND (L.VERSION_DT_TM= OUTERJOIN( CNVTDATETIME ("31-DEC-2100 00:00:00.00" ))))
AND ( AD
	WHERE (AD.SCH_ACTION_ID= OUTERJOIN (A.SCH_ACTION_ID))
	AND (AD.SCENARIO_NBR= OUTERJOIN (1 ))
	AND (AD.SEQ_NBR= OUTERJOIN (1 ))
	AND (AD.VERSION_DT_TM= OUTERJOIN ( CNVTDATETIME ("31-DEC-2100 00:00:00.00" ))))
 
ORDER BY
	A.SCH_ACTION_ID
 
HEAD REPORT
 REPLY -> QUERY_QUAL_CNT =0
HEAD A.SCH_ACTION_ID
 
IF ( (( ( L_NULL =1 ) )
	OR	((L.STATUS_FLAG=3 ) AND (L.GRANTED_PRSNL_ID= REQINFO -> UPDT_ID ) )) )
	REPLY -> QUERY_QUAL_CNT =( REPLY -> QUERY_QUAL_CNT +1 ),
		IF ( ( MOD ( REPLY -> QUERY_QUAL_CNT , 100 )=1 ) )
			STAT = ALTERLIST ( REPLY -> QUERY_QUAL , ( REPLY -> QUERY_QUAL_CNT +99 ))
			, STAT = ALTERLIST ( T_RECORD -> EVENT_QUAL , ( REPLY -> QUERY_QUAL_CNT +99 ))
		ENDIF
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#SCHENTRYID =A.SCH_ENTRY_ID
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#SCHEVENTID =A.SCH_EVENT_ID
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#SCHEDULEID =A.SCHEDULE_ID
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#SCHEDULESEQ =E.SCHEDULE_SEQ
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#REQACTIONID =A.SCH_ACTION_ID
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#ACTIONID =EA.REQ_ACTION_ID
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT]-> HIDE#SCHAPPTID =A.SCH_APPT_ID
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#STATEMEANING =E.SCH_MEANING
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#EARLIESTDTTM = CNVTDATETIME (A.EARLIEST_DT_TM)
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#LATESTDTTM = CNVTDATETIME (A.LATEST_DT_TM)
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#REQMADEDTTM = CNVTDATETIME (A.REQUEST_MADE_DT_TM)
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#ENTRYSTATEMEANING =A.ENTRY_STATE_MEANING
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#REQACTIONMEANING =A.REQ_ACTION_MEANING
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#ENCOUNTERID =A.ENCNTR_ID
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#PERSONID =A.PERSON_ID
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> HIDE#BITMASK =0 ,
 
	IF ( (A.EARLIEST_DT_TM> CNVTDATETIME ("01-JAN-1800 00:00:00.00" )) )
;000 REPLY -> QUERY_QUAL [ REPLY ->QUERY_QUAL_CNT ]-> EARLIEST_DT_TM = CNVTDATETIME (A.EARLIEST_DT_TM)
REPLY->QUERY_QUAL[REPLY->QUERY_QUAL_CNT]-> EARLIEST_DT_TM = format(A.EARLIEST_DT_TM,"mm/dd/yy - HH:MM;;d")  ;000
ELSE
;000  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> EARLIEST_DT_TM =0
  REPLY->QUERY_QUAL[REPLY->QUERY_QUAL_CNT]-> EARLIEST_DT_TM = " "
ENDIF
 
,
	IF (  NOT (( FORMAT (A.EARLIEST_DT_TM, "HHMM;;DATE" ) IN ("0000" ,"0001" )) ) )
		REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> TIME = FORMAT (A.EARLIEST_DT_TM, "HH:MM;;DATE" )
		ELSE   REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> TIME =""
	ENDIF
,
	IF ( ( AD_NULL =0 ) )
		IF ( (AD.TIME_RESTR_CD>0 ) )
			REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> TIME = UAR_GET_CODE_DISPLAY (AD.TIME_RESTR_CD)
		ENDIF
,
	FOR (  I  = 1  TO 7  )
		IF ( ( SUBSTRING ( I , 1 , AD.DAYS_OF_WEEK)="X" ) )
			REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> DAYS_OF_WEEK
				= BUILD ( REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> DAYS_OF_WEEK ,
		 	EVALUATE ( I , 1 , "Sun," , 2 , "Mon," , 3 , "Tue," , 4 , "Wed," , 5 , "Thu," , 6 , "Fri," , 7 , "Sat," ))
		ENDIF
 	ENDFOR
,
	IF ( ( REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> DAYS_OF_WEEK >" " ) )
		REPLY -> QUERY_QUAL[ REPLY -> QUERY_QUAL_CNT ]-> DAYS_OF_WEEK
			= SUBSTRING (1 , ( SIZE ( REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> DAYS_OF_WEEK )-1 )
		, REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> DAYS_OF_WEEK )
	ENDIF
 
	ELSE   REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> DAYS_OF_WEEK =""
	ENDIF
 
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> REQ_ACTION_DISPLAY
		= UAR_GET_CODE_DISPLAY (A.REQ_ACTION_CD)
	,  REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> APPT_TYPE_DISPLAY
		= UAR_GET_CODE_DISPLAY (E.APPT_SYNONYM_CD),
 
	IF ( (A.PERSON_ID>0 ) )
		REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> PERSON_NAME = P.NAME_FULL_FORMATTED
		ELSE   REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> PERSON_NAME =""
	ENDIF
,
	IF ( (E.PROTOCOL_TYPE_FLAG=1 ) )
		T_RECORD -> EVENT_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> PROTOCOL_PARENT_ID =E.SCH_EVENT_ID
	ENDIF
,
	IF ( ( UAR_GET_CODE_DISPLAY (ENC.ENCNTR_TYPE_CD) IN ("Inpatient" , "After Hours Inpatient" )) )
		REPLY -> QUERY_QUAL [ REPLY -> QUERY_QUAL_CNT ]-> INPATIENT ="Yes"
	ENDIF
 
ENDIF
 
FOOT REPORT
 
IF ( ( MOD ( REPLY -> QUERY_QUAL_CNT , 100 )!=0 ) )
	STAT = ALTERLIST ( REPLY -> QUERY_QUAL , REPLY -> QUERY_QUAL_CNT )
	,  STAT = ALTERLIST ( T_RECORD -> EVENT_QUAL ,  REPLY -> QUERY_QUAL_CNT )
ENDIF
,
T_RECORD -> MAX_ORDER_CNT =0
 
WITH NOCOUNTER
 
IF ( ( REPLY -> QUERY_QUAL_CNT <=0 ) )  GO TO  EXIT_SCRIPT
ENDIF
 
 
SELECT  INTO "nl:"
	T_SORT = EVALUATE (A.ROLE_MEANING, "PATIENT" , 2 , A.PRIMARY_ROLE_IND),
	A.UPDT_CNT
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUERY_QUAL_CNT )),
	( SCH_APPT  A )
PLAN ( D
	WHERE ( REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEVENTID >0 )
	AND ( REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEDULEID >0 ))
AND ( A
	WHERE (A.SCH_EVENT_ID= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEVENTID )
	AND (A.SCHEDULE_ID= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEDULEID )
	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
 
ORDER BY D.SEQ,
 T_SORT
 
DETAIL
 REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#BITMASK =A.BIT_MASK,
 REPLY -> QUERY_QUAL [D.SEQ]-> SCHEDULED_DT_TM = CNVTDATETIME (A.BEG_DT_TM)
WITH  NOCOUNTER
 
SELECT INTO "nl:"
	A.UPDT_CNT
	, L.LONG_TEXT
	, CMT_DT = A.BEG_EFFECTIVE_DT_TM "@SHORTDATE"
 
FROM
	(DUMMYT   D  WITH  SEQ = VALUE ( REPLY -> QUERY_QUAL_CNT ))
	, SCH_EVENT_COMM   A
	, LONG_TEXT   L
 
;002
PLAN ( D )
AND ( A
	WHERE (A.SCH_EVENT_ID= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEVENTID )
;002	AND (A.SCH_ACTION_ID= REPLY-> QUERY_QUAL [D.SEQ]-> HIDE#REQACTIONID )
	AND (A.TEXT_TYPE_MEANING="ACTION" )
	AND (A.SUB_TEXT_MEANING="ACTION" )
	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
AND	(L														;002
	where	(l.long_text_id = a.text_id))							;002
 
ORDER BY	A.BEG_EFFECTIVE_DT_TM   ;005

DETAIL
;002	 REPLY -> QUERY_QUAL [D.SEQ]-> CMT ="Y"
REPLY -> QUERY_QUAL [D.SEQ]-> CMT = concat(format(a.beg_effective_dt_tm, "@SHORTDATE"), "   ", trim(l.long_text, 3))						;002
 
WITH NOCOUNTER
 
 
 
SET  T_RECORD -> ORDER_TYPE_CD  = 0.0
SET  T_RECORD -> ORDER_TYPE_MEANING  =  FILLSTRING (12 , " " )
SET  T_RECORD -> ORDER_TYPE_MEANING  = "ORDER"
SET  STAT =
	UAR_GET_MEANING_BY_CODESET (16110 ,  T_RECORD -> ORDER_TYPE_MEANING , 1 ,  T_RECORD -> ORDER_TYPE_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(16110," ,  T_RECORD -> ORDER_TYPE_MEANING , ",1,"
	, T_RECORD -> ORDER_TYPE_CD , ")" ))
 
IF (  (( ( STAT !=0 ) )  OR  (( T_RECORD -> ORDER_TYPE_CD <=0 ) ))  )
IF (  CALL_ECHO_IND  )
 CALL ECHO ( BUILD ("stat = " ,  STAT ))
 CALL ECHO ( BUILD ("t_record->order_type_cd = " ,  T_RECORD -> ORDER_TYPE_CD ))
 CALL ECHO ( BUILD ("Invalid select on CODE_SET (16110), CDF_MEANING(" ,  T_RECORD -> ORDER_TYPE_MEANING , ")" ))
ENDIF
 GO TO  EXIT_SCRIPT
ENDIF
 
 
SELECT  INTO "nl:"
	D.SEQ
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUERY_QUAL_CNT )),
	( SCH_EVENT  E ),
	( SCH_EVENT_ATTACH  A )
PLAN ( D
	WHERE ( T_RECORD -> EVENT_QUAL [D.SEQ]-> PROTOCOL_PARENT_ID >0 ))
AND ( E
	WHERE (E.PROTOCOL_PARENT_ID= T_RECORD -> EVENT_QUAL [D.SEQ]-> PROTOCOL_PARENT_ID )
	AND  NOT ((E.SCH_MEANING IN ("CANCELED" , "NOSHOW" )) )
	AND (E.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
AND ( A
	WHERE (A.SCH_EVENT_ID=E.SCH_EVENT_ID)
	AND (A.ATTACH_TYPE_CD= T_RECORD -> ORDER_TYPE_CD )
	AND (A.BEG_SCHEDULE_SEQ<= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEDULESEQ )
	AND (A.END_SCHEDULE_SEQ>= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEDULESEQ )
	AND  NOT ((A.ORDER_STATUS_MEANING IN ("CANCELED" ,"COMPLETED" ,"DISCONTINUED" )) )
	AND (A.STATE_MEANING!="REMOVED" )
	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" ))
	AND (A.ACTIVE_IND=1 ))
 
ORDER BY D.SEQ,
E.PROTOCOL_SEQ_NBR,
A.ORDER_SEQ_NBR
 
HEAD D.SEQ
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT =0
DETAIL
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT =( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT+1 )
 ,
IF ( ( MOD ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT , 10 )=1 ) )
STAT = ALTERLIST ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL , ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT +9))
ENDIF
,
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [ T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT ]->
	 ORDER_ID =A.ORDER_ID,
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [ T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT ]->
	 DESCRIPTION =A.DESCRIPTION,
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [ T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT ]->
	 ORDER_SEQ_NBR =A.ORDER_SEQ_NBR
FOOT  D.SEQ
 
IF ( ( MOD ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT , 10 )!=0 ) )
STAT = ALTERLIST ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL ,  T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT )
ENDIF
,
IF ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT > T_RECORD -> MAX_ORDER_CNT )
	T_RECORD -> MAX_ORDER_CNT = T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT
ENDIF
 
WITH  NOCOUNTER
 
SELECT  INTO "nl:"
	D.SEQ
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUERY_QUAL_CNT )),
	( SCH_EVENT_ATTACH  A )
PLAN ( D
	WHERE ( T_RECORD -> EVENT_QUAL [D.SEQ]-> PROTOCOL_PARENT_ID <=0 ))
AND ( A
	WHERE (A.SCH_EVENT_ID= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEVENTID )
	AND (A.ATTACH_TYPE_CD= T_RECORD -> ORDER_TYPE_CD )
 	AND (A.BEG_SCHEDULE_SEQ<= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEDULESEQ )
 	AND (A.END_SCHEDULE_SEQ>= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEDULESEQ )
 	AND NOT ((A.ORDER_STATUS_MEANING IN ("CANCELED" , "COMPLETED" , "DISCONTINUED" )) )
 	AND (A.STATE_MEANING!="REMOVED" )
 	AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" ))
 	AND (A.ACTIVE_IND=1 ))
 
ORDER BY D.SEQ,
A.ORDER_SEQ_NBR
 
HEAD D.SEQ
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT =0
DETAIL
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT =( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT+1 ),
 
IF ( ( MOD ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT , 10 )=1 ) )
STAT = ALTERLIST ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL , ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT +9))
ENDIF
,
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [ T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT ]->
	 ORDER_ID =A.ORDER_ID,
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [ T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT ]->
	 DESCRIPTION =A.DESCRIPTION,
 T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [ T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT ]->
	 ORDER_SEQ_NBR =A.ORDER_SEQ_NBR,
 
CALL ECHO ( BUILD ("PROTOCOL_PARENT_ID[" ,  T_RECORD -> EVENT_QUAL [D.SEQ]-> PROTOCOL_PARENT_ID
 	,"] SCH_EVENT_ID [" , A.SCH_EVENT_ID, "] ORDER_ID [" , A.ORDER_ID, "]" ))
FOOT  D.SEQ
 
IF ( ( MOD ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT , 10 )!=0 ) )
	STAT = ALTERLIST ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL ,  T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT )
ENDIF
,
IF ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT > T_RECORD -> MAX_ORDER_CNT )
	T_RECORD -> MAX_ORDER_CNT = T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT
ENDIF
 
WITH  NOCOUNTER
 
SET  T_RECORD -> ORDER_ACTION_MEANING  = "ORDER"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (6003 ,  T_RECORD -> ORDER_ACTION_MEANING , 1 ,  T_RECORD-> ORDER_ACTION_CD )
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(6003," ,  T_RECORD -> ORDER_ACTION_MEANING
						, ",1," ,  T_RECORD -> ORDER_ACTION_CD , ")" ))
 
SET  T_RECORD -> MODIFY_ACTION_MEANING  = "MODIFY"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (6003 ,  T_RECORD -> MODIFY_ACTION_MEANING , 1 ,  T_RECORD-> MODIFY_ACTION_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(6003," ,  T_RECORD -> MODIFY_ACTION_MEANING
 						, ",1,",  T_RECORD -> MODIFY_ACTION_CD , ")" ))
 
SET  T_RECORD -> COLLECTION_ACTION_MEANING  = "COLLECTION"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (6003 ,  T_RECORD -> COLLECTION_ACTION_MEANING , 1 , T_RECORD -> COLLECTION_ACTION_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(6003," ,  T_RECORD -> COLLECTION_ACTION_MEANING ,
				",1," ,  T_RECORD -> COLLECTION_ACTION_CD , ")" ))
 
SET  T_RECORD -> RENEW_ACTION_MEANING  = "RENEW"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (6003 ,  T_RECORD -> RENEW_ACTION_MEANING , 1 ,  T_RECORD-> RENEW_ACTION_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(6003," ,  T_RECORD -> RENEW_ACTION_MEANING
 						, ",1,",  T_RECORD -> RENEW_ACTION_CD , ")" ))
 
SET  T_RECORD -> ACTIVATE_ACTION_MEANING  = "ACTIVATE"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (6003 ,  T_RECORD -> ACTIVATE_ACTION_MEANING , 1 , T_RECORD -> ACTIVATE_ACTION_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(6003," ,  T_RECORD -> ACTIVATE_ACTION_MEANING ,
						",1," ,  T_RECORD -> ACTIVATE_ACTION_CD , ")" ))
 
SET  T_RECORD -> FUTUREDC_ACTION_MEANING  = "FUTUREDC"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (6003 ,  T_RECORD -> FUTUREDC_ACTION_MEANING , 1 , T_RECORD -> FUTUREDC_ACTION_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(6003," ,  T_RECORD -> FUTUREDC_ACTION_MEANING ,
						",1," ,  T_RECORD -> FUTUREDC_ACTION_CD , ")" ))
 
SET  T_RECORD -> RESUME_RENEW_ACTION_MEANING  = "RESUME/RENEW"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (6003 ,  T_RECORD -> RESUME_RENEW_ACTION_MEANING , 1 , T_RECORD -> RESUME_RENEW_ACTION_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(6003," ,  T_RECORD -> RESUME_RENEW_ACTION_MEANING ,
						",1," ,  T_RECORD -> RESUME_RENEW_ACTION_CD , ")" ))
 
IF ( T_RECORD -> MAX_ORDER_CNT >0 )
SET  ACT_SEQ  = 0
SELECT  INTO "nl:"
 	T_ORDER_SEQ_NBR = T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [D2.SEQ]-> ORDER_SEQ_NBR ,
 	OD_EXISTS = DECODE (OD.SEQ, 1 , 0 )
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUERY_QUAL_CNT )),
	( DUMMYT  D2  WITH  SEQ = VALUE ( T_RECORD -> MAX_ORDER_CNT )),
	( ORDERS  O ),
	( ORDER_ACTION  OA ),
	( DUMMYT  D3 ),
	( ORDER_DETAIL  OD )
	, (PERSON P)							;001
	, (ORDER_ENTRY_FIELDS OE)		;001
PLAN ( D )
AND ( D2
 	WHERE (D2.SEQ<= T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT ))
AND ( O
 	WHERE (O.ORDER_ID= T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [D2.SEQ]-> ORDER_ID ))
AND ( OA
 	WHERE (OA.ORDER_ID=O.ORDER_ID)
	AND (OA.ACTION_TYPE_CD= T_RECORD -> ORDER_ACTION_CD )
	AND (OA.ACTION_REJECTED_IND=0 ))
AND ( D3
 	WHERE (D3.SEQ=1 ))
AND ( OD
 	WHERE (OD.ORDER_ID=OA.ORDER_ID)
 	AND (OD.ACTION_SEQUENCE=OA.ACTION_SEQUENCE)
 	AND (OD.OE_FIELD_MEANING_ID IN (127 , 3519 , 3520 , 3521 , 3522 , 3523
 		, 51, 1501, 9000		;001
 		,123			;000
		,1103 			;000
 		 )))
/*001-begin*/
AND (OE
	WHERE (oe.oe_field_id = outerjoin(od.oe_field_id) ) )
AND (P
	WHERE (p.person_id = outerjoin(oa.order_provider_id) ) )
/*001-end*/
ORDER BY D.SEQ,
D2.SEQ,
O.ORDER_ID,
OD.OE_FIELD_ID,
OD.ACTION_SEQUENCE DESC
 
head report
first_time = 1
 
HEAD D.SEQ
 T_INDEX =0
HEAD D2.SEQ
 T_INDEX =0
HEAD O.ORDER_ID
 
IF ( REPLY -> QUERY_QUAL [D.SEQ]-> ORDERS <=" " )
	REPLY -> QUERY_QUAL [D.SEQ]-> ORDERS
		= T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [D2.SEQ]-> DESCRIPTION
ENDIF
,
IF ( ( PREF_VALUE_DISPPIDRL =1.0 )
AND ( SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> ORDERS , 1 )>  MAX_LENGTH_ORDERS ) )
	MAX_LENGTH_ORDERS = SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> ORDERS , 1 )
ENDIF
,
IF (O.ORIG_ORD_AS_FLAG=4 )
	REPLY -> QUERY_QUAL [D.SEQ]-> INPATIENT ="Yes"
ENDIF
 
HEAD OD.OE_FIELD_ID
 ACT_SEQ =OD.ACTION_SEQUENCE
 , FLAG =1
 
HEAD OD.ACTION_SEQUENCE
IF ( ACT_SEQ !=OD.ACTION_SEQUENCE)
	FLAG =0
ENDIF
 
DETAIL
/*001-begin*/
if (OA.ACTION_TYPE_CD= T_RECORD -> ORDER_ACTION_CD )
  	REPLY->QUERY_QUAL[d.seq].ORD_PROV = p.name_full_formatted
 	REPLY->QUERY_QUAL[d.seq].ORD_DT_TM = cnvtdatetime(o.orig_order_dt_tm)
 
  	IF (OD.OE_FIELD_MEANING_ID=1501 )
		REPLY -> QUERY_QUAL [D.SEQ]->VISIT_REASON =OD.OE_FIELD_DISPLAY_VALUE
  	ENDIF
 
	IF (OD.OE_FIELD_MEANING_ID=9000 )
		IF (OE.description = "Physician")
			REPLY -> QUERY_QUAL [D.SEQ]->REQ_PROV =OD.OE_FIELD_DISPLAY_VALUE
		;ENDIF
 		ELSEIF (OE.description = "SC Outpatient Location")
			REPLY -> QUERY_QUAL [D.SEQ]->LOCATION =OD.OE_FIELD_DISPLAY_VALUE
		ENDIF
	ENDIF
endif																			;001
/*001-end*/
 
IF ( ( FLAG =1 ) AND ( OD_EXISTS =1 ) )
IF ( (OD.OE_FIELD_MEANING_ID=127 ) AND ( UAR_GET_CODE_MEANING (OD.OE_FIELD_VALUE)="STAT" ) )
	REPLY-> QUERY_QUAL [D.SEQ]-> STAT ="Yes"
ENDIF
,
;000 start
IF ( (OD.OE_FIELD_MEANING_ID=123 ) )
  hold_pos = findstring("*",od.oe_field_display_value)
  ;call echo(substring(1,1,REPLY->QUERY_QUAL[D.SEQ]->EARLIEST_DT_TM))
  hold_letter = substring(1,1,REPLY->QUERY_QUAL[D.SEQ]->EARLIEST_DT_TM)
  ;call echo(hold_letter)
  hold_sign = "*"
  if (hold_letter = hold_sign)
    first_time = 0
    call echo("hello")
  else
    first_time = 1
  endif
  if (hold_pos = 1 and first_time = 1)
    REPLY->QUERY_QUAL[D.SEQ]->EARLIEST_DT_TM = concat(trim(od.oe_field_display_value,3)," ",
    								trim(REPLY->QUERY_QUAL[D.SEQ]->EARLIEST_DT_TM,3))
  endif
  call echo(REPLY->QUERY_QUAL[D.SEQ]->EARLIEST_DT_TM)
ENDIF
,IF ( (OD.OE_FIELD_MEANING_ID=1103 ) )
  REPLY -> QUERY_QUAL [D.SEQ]->special_instructions = OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
;000  end
 
IF ( ( PREF_VALUE_DISPPIDRL >0.0 ) )
/*001*/
IF ( (OD.OE_FIELD_MEANING_ID=1501 ) )
REPLY -> QUERY_QUAL [D.SEQ]->VISIT_REASON =OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
/*001*/
IF ( (OD.OE_FIELD_MEANING_ID=3519 ) )
REPLY -> QUERY_QUAL [D.SEQ]-> PP_ACTIVITY_ID = OD.OE_FIELD_VALUE
,  REPLY -> QUERY_QUAL [D.SEQ]-> PP_ACTIVITY =OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING_ID=3520 ) )
REPLY -> QUERY_QUAL [D.SEQ]-> PP_PHASE_ACTIVITY = OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING_ID=3521 ) )
REPLY -> QUERY_QUAL [D.SEQ]-> PP_REFERENCE =	OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING_ID=3522 ) )
REPLY -> QUERY_QUAL [D.SEQ]-> PP_PHASE_REFERENCE = OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( (OD.OE_FIELD_MEANING_ID=3523 ) )
REPLY -> QUERY_QUAL [D.SEQ]-> PP_SCHEDULED_PHASE_ID = OD.OE_FIELD_VALUE
,  REPLY -> QUERY_QUAL [D.SEQ]-> PP_SCHEDULED_PHASE =OD.OE_FIELD_DISPLAY_VALUE
ENDIF
,
IF ( ( PREF_VALUE_DISPPIDRL =1.0 ) )
IF ( ( SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_ACTIVITY , 1 )> MAX_LENGTH_PP_ACTIVITY ) )
MAX_LENGTH_PP_ACTIVITY = SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_ACTIVITY , 1 )
ENDIF
,
IF ( ( SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_PHASE_ACTIVITY , 1 )> MAX_LENGTH_PP_PHASE_ACTIVITY ) )
MAX_LENGTH_PP_PHASE_ACTIVITY = SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_PHASE_ACTIVITY , 1 )
ENDIF
,
IF ( ( SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_REFERENCE , 1 )> MAX_LENGTH_PP_REFERENCE ) )
 MAX_LENGTH_PP_REFERENCE = SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_REFERENCE , 1 )
ENDIF
,
IF ( ( SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_PHASE_REFERENCE , 1 )> MAX_LENGTH_PP_PHASE_REFERENCE) )
MAX_LENGTH_PP_PHASE_REFERENCE = SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_PHASE_REFERENCE , 1 )
ENDIF
,
IF ( ( SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_SCHEDULED_PHASE , 1 )> MAX_LENGTH_PP_SCHEDULED_PHASE) )
MAX_LENGTH_PP_SCHEDULED_PHASE = SIZE ( REPLY -> QUERY_QUAL [D.SEQ]-> PP_SCHEDULED_PHASE , 1 )
ENDIF
;000 start
IF ( ( SIZE ( REPLY -> QUERY_QUAL [D.SEQ]->EARLIEST_DT_TM , 1 )> MAX_LENGTH_earliest_dt_tm) )
  MAX_LENGTH_earliest_dt_tm = SIZE ( REPLY -> QUERY_QUAL [D.SEQ]->EARLIEST_DT_TM, 1 )
ENDIF
,
IF ( ( SIZE(REPLY->QUERY_QUAL[D.SEQ]->special_instructions,1) > MAX_LENGTH_special_instructions) )
  MAX_LENGTH_special_instructions = SIZE(REPLY->QUERY_QUAL[D.SEQ]->special_instructions, 1 )
ENDIF
;000 end
ENDIF
 
ENDIF
 
ENDIF
 
WITH  NOCOUNTER , OUTERJOIN = D3 , DONTCARE = OD
 
SET  T_RECORD -> ORDCOMMENT_CD  = 0.0
SET  T_RECORD -> ORDCOMMENT_MEANING  =  FILLSTRING (12 , " " )
SET  T_RECORD -> ORDCOMMENT_MEANING  = "ORD COMMENT"
SET  STAT
=  UAR_GET_MEANING_BY_CODESET (14 ,  T_RECORD -> ORDCOMMENT_MEANING , 1 ,  T_RECORD -> ORDCOMMENT_CD )
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(14," ,  T_RECORD -> ORDCOMMENT_MEANING , ",1," ,
 T_RECORD -> ORDCOMMENT_CD , ")" ))
IF (  (( ( STAT !=0 ) )  OR  (( T_RECORD -> ORDCOMMENT_CD <=0 ) ))  )
IF (  CALL_ECHO_IND  )
 CALL ECHO ( BUILD ("stat = " ,  STAT ))
 CALL ECHO ( BUILD ("t_record->ordcomment_cd = " ,  T_RECORD -> ORDCOMMENT_CD ))
 CALL ECHO ( BUILD ("Invalid select on CODE_SET (14), CDF_MEANING(" ,  T_RECORD ->
 ORDCOMMENT_MEANING , ")" ))
ENDIF
 GO TO  EXIT_SCRIPT
ENDIF
 
SELECT  INTO "nl:"
	OC.ORDER_ID,
	OC.ACTION_SEQUENCE,
	OC.COMMENT_TYPE_CD
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUERY_QUAL_CNT )),
	( DUMMYT  D2  WITH  SEQ = VALUE ( T_RECORD -> MAX_ORDER_CNT )),
	( ORDER_COMMENT  OC )
PLAN ( D
	WHERE ( T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT >0 ))
AND ( D2
	WHERE (D2.SEQ<= T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL_CNT ))
AND ( OC
	WHERE (OC.ORDER_ID= T_RECORD -> EVENT_QUAL [D.SEQ]-> ORDER_QUAL [D2.SEQ]-> ORDER_ID )
	AND (OC.COMMENT_TYPE_CD= T_RECORD -> ORDCOMMENT_CD ))
 
HEAD D.SEQ
REPLY -> QUERY_QUAL [D.SEQ]-> ORDER_CMT ="Yes"
WITH  NOCOUNTER
ENDIF
 
 
SET  T_RECORD -> ISOBEG_TYPE_CD  = 0.0
 
SET  T_RECORD -> ISOBEG_TYPE_MEANING  =  FILLSTRING (12 , " " )
 
SET  T_RECORD -> ISOBEG_TYPE_MEANING  = "ISOBEG"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (356 ,  T_RECORD -> ISOBEG_TYPE_MEANING , 1 ,  T_RECORD ->
 ISOBEG_TYPE_CD )
 
 CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(356," ,  T_RECORD -> ISOBEG_TYPE_MEANING , ",1," ,
 T_RECORD -> ISOBEG_TYPE_CD , ")" ))
 
IF (  (( ( STAT !=0 ) )  OR  (( T_RECORD -> ISOBEG_TYPE_CD <=0 ) ))  )
SET  T_RECORD -> ISOBEG_TYPE_CD  = 0
ENDIF
 
 
SET  T_RECORD -> ISOEND_TYPE_CD  = 0.0
 
SET  T_RECORD -> ISOEND_TYPE_MEANING  =  FILLSTRING (12 , " " )
 
SET  T_RECORD -> ISOEND_TYPE_MEANING  = "ISOEND"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (356 ,  T_RECORD -> ISOEND_TYPE_MEANING , 1 ,  T_RECORD ->
 ISOEND_TYPE_CD )
 
 CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(356," ,  T_RECORD -> ISOEND_TYPE_MEANING , ",1," ,
 T_RECORD -> ISOEND_TYPE_CD , ")" ))
 
IF (  (( ( STAT !=0 ) )  OR  (( T_RECORD -> ISOEND_TYPE_CD <=0 ) ))  )
SET  T_RECORD -> ISOEND_TYPE_CD  = 0
ENDIF
 
 
SET  T_RECORD -> ISOLATION_TYPE_CD  = 0.0
SET  T_RECORD -> ISOLATION_TYPE_MEANING  =  FILLSTRING (12 , " " )
SET  T_RECORD -> ISOLATION_TYPE_MEANING  = "ISOLATION"
 
SET  STAT
=  UAR_GET_MEANING_BY_CODESET (356 ,  T_RECORD -> ISOLATION_TYPE_MEANING , 1 ,  T_RECORD-> ISOLATION_TYPE_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(356," ,  T_RECORD -> ISOLATION_TYPE_MEANING , ",1,"
	,  T_RECORD -> ISOLATION_TYPE_CD , ")" ))
 
IF (  (( ( STAT !=0 ) )  OR  (( T_RECORD -> ISOLATION_TYPE_CD <=0 ) ))  )
SET  T_RECORD -> ISOLATION_TYPE_CD  = 0
ENDIF
 
 
SET  T_RECORD -> USERDEFINED_TYPE_CD  = 0.0
 
SET  T_RECORD -> USERDEFINED_TYPE_MEANING  =  FILLSTRING (12 , " " )
 
SET  T_RECORD -> USERDEFINED_TYPE_MEANING  = "USERDEFINED"
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (355 ,  T_RECORD -> USERDEFINED_TYPE_MEANING , 1 ,
 T_RECORD -> USERDEFINED_TYPE_CD )
 
CALL ECHO ( BUILD ("UAR_GET_MEANING_BY_CODESET(355," ,  T_RECORD -> USERDEFINED_TYPE_MEANING ,
",1," ,  T_RECORD -> USERDEFINED_TYPE_CD , ")" ))
 
IF (  (( ( STAT !=0 ) )  OR  (( T_RECORD -> USERDEFINED_TYPE_CD <=0 ) ))  )
SET  T_RECORD -> USERDEFINED_TYPE_CD  = 0
ENDIF
 
 
IF ( ( T_RECORD -> ISOBEG_TYPE_CD >0 ) AND ( T_RECORD -> ISOEND_TYPE_CD >0 ) AND ( T_RECORD ->
 ISOLATION_TYPE_CD >0 ) )
 
SELECT  INTO "nl:"
	A.UPDT_CNT
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUERY_QUAL_CNT )),
	( PERSON_INFO  A ),
	( CODE_VALUE_EXTENSION  C )
PLAN ( D
	WHERE ( REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#PERSONID >0 ))
AND ( A
	WHERE (A.PERSON_ID= REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#PERSONID )
	AND (A.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 ))
	AND (A.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE , CURTIME3 ))
	AND (A.INFO_TYPE_CD= T_RECORD -> USERDEFINED_TYPE_CD )
	AND (A.INFO_SUB_TYPE_CD
		IN (T_RECORD -> ISOBEG_TYPE_CD , T_RECORD -> ISOEND_TYPE_CD ,  T_RECORD -> ISOLATION_TYPE_CD ))
	AND (A.ACTIVE_IND=1 ))
AND ( C
	WHERE (C.CODE_VALUE=A.INFO_SUB_TYPE_CD)
	AND (C.FIELD_NAME="TYPE" )
	AND (C.CODE_SET=356 ))
 
HEAD D.SEQ
 T_RECORD -> TEMP_BEG_DT_TM = CNVTDATETIME ("31-DEC-2100 00:00:00.00" ), T_RECORD -> TEMP_END_DT_TM
= CNVTDATETIME ("31-DEC-2100 00:00:00.00" ), T_RECORD -> TEMP_ISOLATION_CD =0
DETAIL
 
IF ( (A.INFO_SUB_TYPE_CD= T_RECORD -> ISOBEG_TYPE_CD )
  AND (C.FIELD_VALUE="DATE" )
  AND (CNVTDATETIME (A.VALUE_DT_TM)>0 ) )
	T_RECORD -> TEMP_BEG_DT_TM = CNVTDATETIME (A.VALUE_DT_TM)
ENDIF
,
 
IF ( (A.INFO_SUB_TYPE_CD= T_RECORD -> ISOEND_TYPE_CD )
  AND (C.FIELD_VALUE="DATE" )
  AND (CNVTDATETIME (A.VALUE_DT_TM)>0 ) )
  	T_RECORD -> TEMP_END_DT_TM = CNVTDATETIME (A.VALUE_DT_TM)
ENDIF
,
 
IF ( (A.INFO_SUB_TYPE_CD= T_RECORD -> ISOLATION_TYPE_CD )
  AND (C.FIELD_VALUE="CODE" ) )
  	T_RECORD ->TEMP_ISOLATION_CD =A.VALUE_CD
ENDIF
 
FOOT  D.SEQ
 
IF ( ( T_RECORD -> TEMP_ISOLATION_CD >0 )
  AND ( REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#EARLIESTDTTM >= T_RECORD -> TEMP_BEG_DT_TM )
  AND ( REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#EARLIESTDTTM <= T_RECORD -> TEMP_END_DT_TM ) )
  	REPLY -> QUERY_QUAL [D.SEQ]-> ISOLATION_TYPE ="Yes"
ENDIF
 
WITH  NOCOUNTER , ORAHINT ("INDEX(A XIE1PERSON_INFO) INDEX(C XPKCODE_VALUE_EXTENSION)" )
ENDIF
 
 
IF ( ( PREF_VALUE_DISPPIDRL =1.0 ) )
SELECT  INTO "nl:"
 	VAL_HIDE_SCHENTRYID = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHENTRYID ,
 	VAL_HIDE_SCHEVENTID = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEVENTID ,
 	VAL_HIDE_SCHEDULEID = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEDULEID ,
 	VAL_HIDE_SCHEDULESEQ = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHEDULESEQ ,
 	VAL_HIDE_REQACTIONID = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#REQACTIONID ,
 	VAL_HIDE_SCHAPPTID = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#SCHAPPTID ,
 	VAL_HIDE_STATEMEANING = SUBSTRING (1 , 12 ,  REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#STATEMEANING ),
 	VAL_HIDE_EARLIESTDTTM = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#EARLIESTDTTM ,
 	VAL_HIDE_LATESTDTTM = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#LATESTDTTM ,
 	VAL_HIDE_REQMADEDTTM = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#REQMADEDTTM ,
 	VAL_HIDE_ENTRYSTATEMEANING
 		= SUBSTRING (1 , 12 ,  REPLY -> QUERY_QUAL [D.SEQ]->HIDE#ENTRYSTATEMEANING ),
 	VAL_HIDE_REQACTIONMEANING
 		= SUBSTRING (1 , 12 ,  REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#REQACTIONMEANING ),
 	VAL_HIDE_ENCOUNTERID = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#ENCOUNTERID ,
 	VAL_HIDE_PERSONID = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#PERSONID ,
 	VAL_HIDE_BITMASK = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#BITMASK ,
 	VAL_HIDE_ACTIONID = REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#ACTIONID ,
 
	VAL_VISIT_REASON = SUBSTRING(1, 25, REPLY->QUERY_QUAL[d.seq]->VISIT_REASON), 	;001
	VAL_ORD_PROV = SUBSTRING(1, 25, REPLY->QUERY_QUAL[d.seq].ORD_PROV),		 	;001
	VAL_REQ_PROV = SUBSTRING(1, 25, REPLY->QUERY_QUAL[d.seq].REQ_PROV),		 	;001
	VAL_LOCATION = SUBSTRING(1, 15, REPLY->QUERY_QUAL[d.seq].LOCATION),			 	;001
	VAL_ORD_DT_TM = REPLY->QUERY_QUAL[d.seq].ORD_DT_TM, 							;001
 
 	VAL_ISOLATION_TYPE = SUBSTRING (1 , 3 ,  REPLY -> QUERY_QUAL [D.SEQ]-> ISOLATION_TYPE ),
 	VAL_STAT = SUBSTRING (1 , 3 ,  REPLY -> QUERY_QUAL [D.SEQ]-> STAT ),
 	VAL_INPATIENT = SUBSTRING (1 , 3 ,  REPLY -> QUERY_QUAL [D.SEQ]-> INPATIENT ),
;002 	VAL_CMT = SUBSTRING (1 , 1 ,  REPLY -> QUERY_QUAL [D.SEQ]-> CMT ),
 	VAL_CMT = REPLY -> QUERY_QUAL [D.SEQ]-> CMT,											;002
 	VAL_TIME = SUBSTRING (1 , 40 ,  REPLY -> QUERY_QUAL [D.SEQ]-> TIME ),
;000 VAL_EARLIEST_DT_TM = REPLY -> QUERY_QUAL [D.SEQ]-> EARLIEST_DT_TM ,
VAL_EARLIEST_DT_TM = SUBSTRING(1,VALUE(MAX_LENGTH_earliest_dt_tm),REPLY->QUERY_QUAL [D.SEQ]-> EARLIEST_DT_TM),   ;000
 	VAL_SCHEDULED_DT_TM = REPLY -> QUERY_QUAL [D.SEQ]-> SCHEDULED_DT_TM ,
 	VAL_DAYS_OF_WEEK = SUBSTRING (1 , 27 ,  REPLY -> QUERY_QUAL [D.SEQ]-> DAYS_OF_WEEK ),
 	VAL_REQ_ACTION_DISPLAY = SUBSTRING (1 , 40 ,  REPLY -> QUERY_QUAL [D.SEQ]-> REQ_ACTION_DISPLAY ),
 	VAL_APPT_TYPE_DISPLAY = SUBSTRING (1 , 40 ,  REPLY -> QUERY_QUAL [D.SEQ]-> APPT_TYPE_DISPLAY ),
 	VAL_PERSON_NAME = SUBSTRING (1 , 100 ,  REPLY -> QUERY_QUAL [D.SEQ]-> PERSON_NAME ),
 	VAL_SCH_ACTION_ID = REPLY -> QUERY_QUAL [D.SEQ]-> SCH_ACTION_ID ,
 	VAL_SCH_EVENT_ID = REPLY -> QUERY_QUAL [D.SEQ]-> SCH_EVENT_ID ,
 	VAL_ORDERS = SUBSTRING (1 ,  VALUE ( MAX_LENGTH_ORDERS ),  REPLY -> QUERY_QUAL [D.SEQ]-> ORDERS ),
 	VAL_ORDER_CMT = SUBSTRING (1 , 3 ,  REPLY -> QUERY_QUAL [D.SEQ]-> ORDER_CMT ),
 	VAL_PP_ACTIVITY_ID = REPLY -> QUERY_QUAL [D.SEQ]-> PP_ACTIVITY_ID ,
 	VAL_PP_ACTIVITY
 		= SUBSTRING (1 ,  VALUE ( MAX_LENGTH_PP_ACTIVITY ),  REPLY -> QUERY_QUAL [D.SEQ]-> PP_ACTIVITY ),
 	VAL_PP_PHASE_ACTIVITY
 		= SUBSTRING (1 ,  VALUE ( MAX_LENGTH_PP_PHASE_ACTIVITY ),  REPLY -> QUERY_QUAL [D.SEQ]-> PP_PHASE_ACTIVITY ),
 	VAL_PP_REFERENCE
 		= SUBSTRING (1 ,  VALUE ( MAX_LENGTH_PP_REFERENCE ),  REPLY -> QUERY_QUAL [D.SEQ]-> PP_REFERENCE ),
	VAL_PP_PHASE_REFERENCE
		= SUBSTRING (1 ,  VALUE ( MAX_LENGTH_PP_PHASE_REFERENCE ),  REPLY -> QUERY_QUAL [D.SEQ]-> PP_PHASE_REFERENCE ),
 	VAL_PP_SCHEDULED_PHASE_ID = REPLY -> QUERY_QUAL [D.SEQ]-> PP_SCHEDULED_PHASE_ID ,
 	VAL_PP_SCHEDULED_PHASE
 		= SUBSTRING (1 ,  VALUE ( MAX_LENGTH_PP_SCHEDULED_PHASE ),  REPLY -> QUERY_QUAL [D.SEQ]-> PP_SCHEDULED_PHASE ),
  VAL_spec_instruct = SUBSTRING (1 ,  VALUE ( MAX_LENGTH_special_instructions ),  		;000
  					REPLY -> QUERY_QUAL [D.SEQ]->special_instructions)					;000
 
 
 
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUERY_QUAL_CNT ))
PLAN ( D )
 
ORDER BY  REPLY -> QUERY_QUAL [D.SEQ]-> PP_ACTIVITY_ID  DESC ,
 REPLY -> QUERY_QUAL [D.SEQ]-> PP_SCHEDULED_PHASE_ID  DESC ,
 REPLY -> QUERY_QUAL [D.SEQ]-> HIDE#REQACTIONID
 
HEAD REPORT
 SCH2_IDX =0
DETAIL
 SCH2_IDX =( SCH2_IDX +1 ),
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#SCHENTRYID = VAL_HIDE_SCHENTRYID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#SCHEVENTID = VAL_HIDE_SCHEVENTID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#SCHEDULEID = VAL_HIDE_SCHEDULEID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#SCHEDULESEQ = VAL_HIDE_SCHEDULESEQ ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#REQACTIONID = VAL_HIDE_REQACTIONID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#SCHAPPTID = VAL_HIDE_SCHAPPTID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#STATEMEANING = VAL_HIDE_STATEMEANING ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#EARLIESTDTTM = VAL_HIDE_EARLIESTDTTM ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#LATESTDTTM = VAL_HIDE_LATESTDTTM ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#REQMADEDTTM = VAL_HIDE_REQMADEDTTM ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#ENTRYSTATEMEANING = VAL_HIDE_ENTRYSTATEMEANING ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#REQACTIONMEANING = VAL_HIDE_REQACTIONMEANING ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#ENCOUNTERID = VAL_HIDE_ENCOUNTERID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#PERSONID = VAL_HIDE_PERSONID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#BITMASK = VAL_HIDE_BITMASK ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> HIDE#ACTIONID = VAL_HIDE_ACTIONID ,
 
 REPLY -> QUERY_QUAL [ SCH2_IDX ]->VISIT_REASON = VAL_VISIT_REASON ,			;001
 REPLY -> QUERY_QUAL [ SCH2_IDX ]->ORD_PROV = VAL_ORD_PROV,					;001
 REPLY -> QUERY_QUAL [ SCH2_IDX ]->REQ_PROV = VAL_REQ_PROV ,					;001
 REPLY -> QUERY_QUAL [ SCH2_IDX ]->LOCATION = VAL_LOCATION ,					;001
REPLY -> QUERY_QUAL [ SCH2_IDX ]->ORD_DT_TM = VAL_ORD_DT_TM ,				;001
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> special_instructions = VAL_spec_instruct ,		;000
 
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> ISOLATION_TYPE = VAL_ISOLATION_TYPE ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> STAT = VAL_STAT ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> INPATIENT = VAL_INPATIENT ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> CMT = VAL_CMT ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> TIME = VAL_TIME ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> EARLIEST_DT_TM = VAL_EARLIEST_DT_TM ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> SCHEDULED_DT_TM = VAL_SCHEDULED_DT_TM ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> DAYS_OF_WEEK = VAL_DAYS_OF_WEEK ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> REQ_ACTION_DISPLAY = VAL_REQ_ACTION_DISPLAY ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> APPT_TYPE_DISPLAY = VAL_APPT_TYPE_DISPLAY ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> PERSON_NAME = VAL_PERSON_NAME ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> SCH_ACTION_ID = VAL_SCH_ACTION_ID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> SCH_EVENT_ID = VAL_SCH_EVENT_ID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> ORDERS = VAL_ORDERS ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> ORDER_CMT = VAL_ORDER_CMT ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> PP_ACTIVITY_ID = VAL_PP_ACTIVITY_ID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> PP_ACTIVITY = VAL_PP_ACTIVITY ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> PP_PHASE_ACTIVITY = VAL_PP_PHASE_ACTIVITY ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> PP_REFERENCE = VAL_PP_REFERENCE ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> PP_PHASE_REFERENCE = VAL_PP_PHASE_REFERENCE ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> PP_SCHEDULED_PHASE_ID = VAL_PP_SCHEDULED_PHASE_ID ,
 REPLY -> QUERY_QUAL [ SCH2_IDX ]-> PP_SCHEDULED_PHASE = VAL_PP_SCHEDULED_PHASE
 WITH  NOCOUNTER
ENDIF
 
 call echorecord(reply)
# EXIT_SCRIPT
 
IF ( ( FAILED = FALSE ) )
SET  REPLY -> STATUS_DATA -> STATUS  = "S"
ELSE
SET  REPLY -> STATUS_DATA -> STATUS  = "Z"
IF ( ( FAILED != TRUE ) )
CASE (  FAILED  )
 OF  SELECT_ERROR :
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONNAME  = "SELECT"
 ELSE
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONNAME  = "UNKNOWN"
 ENDCASE
 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONSTATUS  = "Z"
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> TARGETOBJECTNAME  = "TABLE"
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> TARGETOBJECTVALUE  =  TABLE_NAME
ENDIF
 
ENDIF
 
 
FREE SET T_RECORD
 END GO
 
