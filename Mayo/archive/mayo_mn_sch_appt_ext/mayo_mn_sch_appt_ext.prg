DROP PROGRAM   MAYO_MN_SCH_APPT_EXT : DBA  GO
CREATE PROGRAM  MAYO_MN_SCH_APPT_EXT : DBA
PROMPT "Printer" ="MINE" ,
"OrgSite (blank = all)  " ="" ,
"Start Date" ="CURDATE" ,
"End Date" ="CURDATE"
 WITH  OUTDEV , ORGSITE , STARTDATE , ENDDATE
 
IF (  NOT ( VALIDATE ( REPLY ,  0 ) ) )
RECORD  REPLY  (
 1  ELAPSED_TIME  =  F8
 1  STATUS_DATA
 2  STATUS  =  C1
 2  SUBEVENTSTATUS [ 1 ]
 3  OPERATIONNAME  =  C25
 3  OPERATIONSTATUS  =  C1
 3  TARGETOBJECTNAME  =  C25
 3  TARGETOBJECTVALUE  =  VC )
ENDIF
 
 
SET  REPLY -> STATUS_DATA -> STATUS  = "F"
 
IF ( ( $STARTDATE ="CURDATE" ) )
DECLARE  STARTDATE  =  DQ8  WITH  PROTECT , NOCONSTANT ( CNVTDATETIME ( CURDATE ,  000000 ))
ELSE
DECLARE  STARTDATE  =  DQ8  WITH  PROTECT , NOCONSTANT ( CNVTDATETIME ( CNVTDATE2 ( $STARTDATE ,
"dd-mmm-yyyy" ),  000000 ))
ENDIF
 
 
IF ( ( $ENDDATE ="CURDATE" ) )
DECLARE  ENDDATE  =  DQ8  WITH  PROTECT , NOCONSTANT ( CNVTDATETIME ( CURDATE ,  235959 ))
ELSE
DECLARE  ENDDATE  =  DQ8  WITH  PROTECT , NOCONSTANT ( CNVTDATETIME ( CNVTDATE2 ( $ENDDATE ,
"dd-mmm-yyyy" ),  235959 ))
ENDIF
 
 
IF ( ( $ORGSITE >" " ) )
DECLARE  ORGSITE  =  VC  WITH  PROTECT , CONSTANT ( CONCAT ( CNVTUPPER ( $ORGSITE ), "*" ))
DECLARE  FILE7NAME  =  VC  WITH  PROTECT , NOCONSTANT ( CONCAT ("mhs_ops:" ,  CNVTUPPER (
 $ORGSITE ), "_Appointment_List_DIAB_" ,  FORMAT ( STARTDATE , "mmddyy;;d" ), ".txt" ))
SET  FILE7NAME  =  REPLACE ( FILE7NAME ,  CHAR ( 42 ), "" )
ELSE
DECLARE  ORGSITE  =  VC  WITH  PROTECT , CONSTANT ("" )
DECLARE  FILE7NAME  =  VC  WITH  PROTECT , CONSTANT ( CONCAT (
"mhs_ops:MHS_Appointment_List_DIAB_" ,  FORMAT ( STARTDATE , "mmddyy;;d" ), ".txt" ))
ENDIF
 
 
DECLARE  NUM  =  I2  WITH  PROTECT , NOCONSTANT ( 0 )
 
DECLARE  MRN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  319 , "MRN" ))
 
DECLARE  FNBR_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  319 , "FIN NBR" ))
 
DECLARE  CMRN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  4 , "CMRN" ))
 
DECLARE  ERROR_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  8 , "INERROR" ))
 
DECLARE  CANCELED_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  12025 ,
"CANCELED" ))
 
DECLARE  ORDERED_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  6004 ,
"ORDERED" ))
 
DECLARE  INPROCESS_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  6004 ,
"INPROCESS" ))
 
DECLARE  PENDING_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  6004 ,
"PENDING REV" ))
 
DECLARE  LAB_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  6000 ,
"GENERAL LAB" ))
 
DECLARE  GENLAB_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  106 , "GLB" ))
 
DECLARE  DISP_LINE  =  VC  WITH  PROTECT , NOCONSTANT (" " )
 
DECLARE  DIABETES_REPORT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  93
, "DIABETESREPORT" ))
 
DECLARE  CLINICALSERVICESFILE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY"
,  93 , "CLINICALSERVICESFILE" ))
 
DECLARE  LABFILE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  93 ,
"LABFILE" ))
 
DECLARE  ACTIVE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  48 , "ACTIVE" ))
 
DECLARE  LC_ACTIVE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  12030 ,
"ACTIVE" ))
 
DECLARE  DATE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  53 , "DATE" ))
 
DECLARE  EULUTHERHOSP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220 ,
"EULUTHERHOSP" ))
 
DECLARE  EUOAKRIDGEHOSP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220
, "EUOAKRIDGEHOSP" ))
 
DECLARE  EUOAKRIDGECLIN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220
, "EUOAKRIDGECLIN" ))
 
DECLARE  EUNWHOMECARE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220 ,
"EUNWHOMECARE" ))
 
DECLARE  EUPAINCLINIC_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220 ,
"EUPAINCLINIC" ))
 
DECLARE  EUNORTHLNDHOSP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220
, "EUNORTHLNDHOSP" ))
 
DECLARE  EUNORTHLNDCLIN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220
, "EUNORTHLNDCLIN" ))
 
DECLARE  EUCHIPVALHOSP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220
, "EUCHIPVALHOSP" ))
 
DECLARE  EUCHIPVALCLIN_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220
, "EUCHIPVALCLIN" ))
 
DECLARE  EUMIDELFORTCL_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220
, "EUMIDELFORTCL" ))
 
DECLARE  EULHBEHAVIORHLTH_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,
 220 , "EULHBEHAVIORHLTH" ))
 
DECLARE  EUMCBEHAVHLTH_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("DISPLAY_KEY" ,  220
, "EUMCBEHAVHLTH" ))
 
DECLARE  PRIMARYCAREPHYSICIANHOSPITAL_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY (
"DISPLAY_KEY" ,  333 , "PRIMARYCAREPHYSICIANHOSPITAL" ))
 
DECLARE  PRIMARYCAREPHYSICIANCLINIC_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY (
"DISPLAY_KEY" ,  333 , "PRIMARYCAREPHYSICIANCLINIC" ))
 
DECLARE  ATTENDDOC_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  333 ,
"ATTENDDOC" ))
 
DECLARE  PCP_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  331 , "PCP" ))
 
DECLARE  NPI_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  320 , "NPI" ))
 
DECLARE  HOME_PHONE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  43 , "HOME"
))
 
DECLARE  BUS_PHONE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  43 ,
"BUSINESS" ))
 
DECLARE  CELL_PHONE_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  43 ,
"PAGER PERS" ))
 
DECLARE  HOME_ADDRESS_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  212 ,
"HOME" ))
 
DECLARE  EMAIL_ADDRESS_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  212 ,
"EMAIL" ))
 
DECLARE  ICD9_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  400 , "ICD9" ))
 
DECLARE  SNMCT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  400 , "SNMCT" ))
 
DECLARE  MEDCONFRMDT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  356 ,
"MEDCONFRMDT" ))
 
DECLARE  RSRCHCONDTRV_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  356 ,
"RSRCHCONDTRV" ))
 
DECLARE  RSRCHCONSENT_CD  =  F8  WITH  PROTECT , CONSTANT ( UAR_GET_CODE_BY ("MEANING" ,  356 ,
"RSRCHCONSENT" ))
 
FREE RECORD DREC
 
RECORD  DREC  (
 1  CNT  =  I2
 1  QUAL [*]
 2  ENCNTR_ID  =  F8
 2  PERSON_ID  =  F8
 2  MRN  =  VC
 2  CMRN  =  VC
 2  FNBR  =  VC
 2  ORG_ID  =  C2
 2  SITE_ID  =  C2
 2  LOCATION_ID  =  VC
 2  LOCATION_DISP  =  VC
 2  APPT_LOCATION  =  VC
 2  NAME  =  VC
 2  NAME_FIRST  =  VC
 2  NAME_LAST  =  VC
 2  DOB  =  VC
 2  AGE  =  VC
 2  SEX  =  C1
 2  NURSEUNIT  =  VC
 2  ROOM  =  VC
 2  BED  =  VC
 2  RB  =  VC
 2  ADMIT_DT  =  VC
 2  TYPE  =  VC
 2  PROVIDER  =  VC
 2  PROVIDER_NPI_ALIAS  =  VC
 2  DIAG [ 3 ]
 3  SOURCE_VOCABULARY  =  VC
 3  SOURCE_IDENTIFIER  =  VC
 3  SOURCE_STRING  =  VC
 2  STREET_ADDR  =  VC
 2  STREET_ADDR2  =  VC
 2  CITY  =  VC
 2  STATE  =  VC
 2  ZIPCODE  =  VC
 2  EMAIL  =  VC
 2  HOME_PHONE  =  VC
 2  BUSINESS_PHONE  =  VC
 2  CELL_PHONE  =  VC
 2  RSRCHCONSENT  =  VC
 2  MEDCONFRMDT_DATE_TIME  =  VC
 2  RSRCHCONDTRV_DATE_TIME  =  VC
 2  DISPLAY_FLAG  =  I2
 2  APPT_DATE  =  VC
 2  APPT_TIME  =  VC
 2  STATE_MEANING  =  VC
 2  APPT_TYPE  =  VC
 2  APPT_NOTE  =  VC
 2  RESOURCE  =  VC )
 
FREE RECORD EVENTS
 
RECORD  EVENTS  (
 1  FILE [ 7 ]
 2  FILE_DESC  =  VC
 2  EVENTSET_CNT  =  I2
 2  EVENTSET [*]
 3  EVENT_SET_NAME  =  VC
 3  EVENT_SET_CD  =  F8
 3  MAX_EVENTS  =  I2
 3  EVENTS [*]
 4  EVENT_DISP  =  VC
 4  EVENT_CD  =  F8 )
 
FREE RECORD CLIN_EVENTS
 
RECORD  CLIN_EVENTS  (
 1  SEQ [*]
 2  CODE_VALUE  =  F8
 2  COLUMN_NBR  =  I2
 2  COLUMN_NAME  =  VC )
 
FREE RECORD NOMEN_GRP
 
RECORD  NOMEN_GRP  (
 1  SEQ [*]
 2  SOURCE_IDENTIFIER  =  VC )
 
SELECT  INTO "nl:"
FROM ( NOMEN_CATEGORY  NC ),
( NOMEN_CAT_LIST  NCL ),
( NOMENCLATURE  N )
 PLAN ( NC
WHERE ( CNVTUPPER (NC.CATEGORY_NAME)="DIABETES REPORT RESTRICTED FILE" ))
 AND ( NCL
WHERE (NC.NOMEN_CATEGORY_ID=NCL.PARENT_CATEGORY_ID))
 AND ( N
WHERE (NCL.NOMENCLATURE_ID=N.NOMENCLATURE_ID) AND (N.ACTIVE_IND= 1 ))
 
ORDER BY N.SOURCE_VOCABULARY_CD,
N.SOURCE_IDENTIFIER
 
HEAD REPORT
 CNT = 0
DETAIL
 CNT =( CNT + 1 ),
 
IF ( ( MOD ( CNT ,  10 )= 1 ) )  STAT = ALTERLIST ( NOMEN_GRP -> SEQ , ( CNT + 10 ))
ENDIF
,
 NOMEN_GRP -> SEQ [ CNT ]-> SOURCE_IDENTIFIER =N.SOURCE_IDENTIFIER
FOOT REPORT
 STAT = ALTERLIST ( NOMEN_GRP -> SEQ ,  CNT )
 WITH  NOCOUNTER
 
SELECT  INTO "NL:"
FROM ( SCH_APPT  A ),
( SCH_APPT  A2 ),
( ENCOUNTER  ENC ),
( PERSON  P ),
( ENCNTR_ALIAS  EA ),
( PERSON_ALIAS  PA ),
( CODE_VALUE  CV ),
( SCH_LOCATION  SL ),
( SCH_EVENT  E ),
( SCH_EVENT_PATIENT  EP ),
( LOCATION  L ),
( SCH_EVENT_DETAIL  SED )
 PLAN ( A
WHERE (A.BEG_DT_TM BETWEEN  CNVTDATETIME ( STARTDATE ) AND  CNVTDATETIME ( ENDDATE )) AND (
A.SCH_EVENT_ID> 0 ) AND (A.ROLE_MEANING="PATIENT" ) AND (A.STATE_MEANING IN ("CONFIRMED" ,
"CHECKED IN" ,
"CHECKED OUT" ,
"SCHEDULED" )) AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )) AND (A.ACTIVE_IND=
 1 ))
 AND ( A2
WHERE (A.SCHEDULE_ID=A2.SCHEDULE_ID) AND (A2.ROLE_MEANING!="PATIENT" ) AND (A2.ROLE_SEQ= 1 ))
 AND ( ENC
WHERE ( OUTERJOIN (A.ENCNTR_ID)=ENC.ENCNTR_ID))
 AND ( P
WHERE (A.PERSON_ID=P.PERSON_ID))
 AND ( EA
WHERE ( OUTERJOIN (A.ENCNTR_ID)=EA.ENCNTR_ID) AND (EA.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( MRN_CD ))
 AND (EA.END_EFFECTIVE_DT_TM> SYSDATE ) AND (EA.ACTIVE_IND= 1 ))
 AND ( PA
WHERE ( OUTERJOIN (A.PERSON_ID)=PA.PERSON_ID) AND (PA.PERSON_ALIAS_TYPE_CD= OUTERJOIN ( CMRN_CD ))
 AND (PA.END_EFFECTIVE_DT_TM> OUTERJOIN ( SYSDATE )) AND (PA.ACTIVE_IND= OUTERJOIN ( 1 )))
 AND ( CV
WHERE (A.APPT_LOCATION_CD=CV.CODE_VALUE) AND (CV.ACTIVE_IND= 1 ))
 AND ( SL
WHERE (SL.SCHEDULE_ID=A.SCHEDULE_ID) AND (SL.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00"
)))
 AND ( E
WHERE (E.SCH_EVENT_ID=A.SCH_EVENT_ID))
 AND ( EP
WHERE (EP.SCH_EVENT_ID=E.SCH_EVENT_ID) AND (EP.VERSION_DT_TM= CNVTDATETIME (
"31-DEC-2100 00:00:00.00" )))
 AND ( L
WHERE (L.LOCATION_CD=A.APPT_LOCATION_CD))
 AND ( SED
WHERE ( OUTERJOIN (E.SCH_EVENT_ID)=SED.SCH_EVENT_ID) AND (SED.OE_FIELD_MEANING= OUTERJOIN (
"REASONFOREXAM" )) AND (SED.VERSION_DT_TM> OUTERJOIN ( SYSDATE )))
 
ORDER BY  CNVTDATETIME (A.BEG_DT_TM),
A.PERSON_ID
 
HEAD REPORT
 CNT = 0
DETAIL
 
IF (  (( ( PATSTRING ( ORGSITE )=CV.DISPLAY_KEY) )  OR  (( ORGSITE = NULL ) ))  )  CNT =( CNT + 1 )
,
IF ( ( MOD ( CNT ,  10 )= 1 ) )  STAT = ALTERLIST ( DREC -> QUAL , ( CNT + 10 ))
ENDIF
,  DREC -> QUAL [ CNT ]-> PERSON_ID =A.PERSON_ID,  DREC -> QUAL [ CNT ]-> ENCNTR_ID =A.ENCNTR_ID,
 DREC -> QUAL [ CNT ]-> TYPE = UAR_GET_CODE_DISPLAY (ENC.ENCNTR_TYPE_CD),  DREC -> QUAL [ CNT ]->
 STATE_MEANING =A.STATE_MEANING,  DREC -> QUAL [ CNT ]-> APPT_DATE = FORMAT (A.BEG_DT_TM,
"MM/DD/YYYY;;D" ),  DREC -> QUAL [ CNT ]-> APPT_TIME = FORMAT (A.BEG_DT_TM, "hh:mm;;D" ),  DREC ->
 QUAL [ CNT ]-> APPT_TYPE = UAR_GET_CODE_DISPLAY (E.APPT_TYPE_CD),  DREC -> QUAL [ CNT ]->
 APPT_NOTE =SED.OE_FIELD_DISPLAY_VALUE,  DREC -> QUAL [ CNT ]-> RESOURCE = UAR_GET_CODE_DISPLAY (
A2.RESOURCE_CD),  DREC -> QUAL [ CNT ]-> APPT_LOCATION = UAR_GET_CODE_DISPLAY (A.APPT_LOCATION_CD),
 DREC -> QUAL [ CNT ]-> NURSEUNIT = UAR_GET_CODE_DISPLAY (A.APPT_LOCATION_CD),  DREC -> QUAL [ CNT ]
-> NAME =P.NAME_FULL_FORMATTED,  DREC -> QUAL [ CNT ]-> NAME_FIRST =P.NAME_FIRST,  DREC -> QUAL [
 CNT ]-> NAME_LAST =P.NAME_LAST,  DREC -> QUAL [ CNT ]-> DOB = FORMAT (P.BIRTH_DT_TM,
"mm/dd/yyyy;;d" ),  DREC -> QUAL [ CNT ]-> AGE = TRIM ( CNVTAGE ( CNVTDATE (P.BIRTH_DT_TM),
 CURDATE ),  3 ),  DREC -> QUAL [ CNT ]-> SEX = UAR_GET_CODE_DISPLAY (P.SEX_CD),  DREC -> QUAL [
 CNT ]-> ORG_ID = SUBSTRING ( 1 ,  2 ,  UAR_GET_CODE_DISPLAY (A.APPT_LOCATION_CD)),  DREC -> QUAL [
 CNT ]-> SITE_ID = SUBSTRING ( 3 ,  4 ,  UAR_GET_CODE_DISPLAY (A.APPT_LOCATION_CD)),  DREC -> QUAL [
 CNT ]-> LOCATION_ID = CNVTSTRING (A.APPT_LOCATION_CD,  0 ),  DREC -> QUAL [ CNT ]-> LOCATION_DISP =
 SUBSTRING ( 6 ,  20 ,  UAR_GET_CODE_DISPLAY (A.APPT_LOCATION_CD)),
IF ( (EA.ENCNTR_ALIAS_TYPE_CD= FNBR_CD ) )  DREC -> QUAL [ CNT ]-> FNBR = SUBSTRING ( 1 ,  20 ,
 CNVTALIAS (EA.ALIAS, EA.ALIAS_POOL_CD))
ELSEIF ( (EA.ENCNTR_ALIAS_TYPE_CD= MRN_CD ) )  DREC -> QUAL [ CNT ]-> MRN = REPLACE ( SUBSTRING ( 1
,  20 ,  CNVTALIAS (EA.ALIAS, EA.ALIAS_POOL_CD)), "-" , "" )
ENDIF
,
IF ( (PA.PERSON_ALIAS_TYPE_CD= CMRN_CD ) )  DREC -> QUAL [ CNT ]-> CMRN = REPLACE ( SUBSTRING ( 1 ,
 20 ,  CNVTALIAS (PA.ALIAS, PA.ALIAS_POOL_CD)), "-" , "" )
ENDIF
 
ENDIF
 
FOOT REPORT
 CNT ,
 ROW + 1 ,
 DREC -> CNT = CNT ,
 STAT = ALTERLIST ( DREC -> QUAL ,  CNT )
 WITH  FORMAT , SEPARATOR =" "
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( PROBLEM  PROB ),
( NOMENCLATURE  N ),
( DUMMYT  D2 )
 PLAN ( D )
 AND ( PROB
WHERE ( DREC -> QUAL [D.SEQ]-> PERSON_ID =PROB.PERSON_ID) AND (PROB.ACTIVE_STATUS_CD= ACTIVE_CD )
 AND (PROB.LIFE_CYCLE_STATUS_CD= LC_ACTIVE_CD ))
 AND ( N
WHERE (PROB.NOMENCLATURE_ID=N.NOMENCLATURE_ID)) ;se AND (N.ACTIVE_IND= 1 ))
 AND ( D2
WHERE  ((  EXPAND ( NUM ,  1 ,  SIZE ( NOMEN_GRP -> SEQ ,  5 ), N.SOURCE_IDENTIFIER,  NOMEN_GRP ->
 SEQ [ NUM ]-> SOURCE_IDENTIFIER ) )  OR  ( (( ( CNVTREAL ( NULLVAL ( TRIM (N.SOURCE_IDENTIFIER,  3
), "0.0" )) BETWEEN  249.0  AND  249.93 ) )  OR  ( (( ( CNVTREAL ( NULLVAL ( TRIM (
N.SOURCE_IDENTIFIER,  3 ), "0.0" )) BETWEEN  250.0  AND  250.93 ) )  OR  ( (( ( CNVTREAL ( NULLVAL (
 TRIM (N.SOURCE_IDENTIFIER,  3 ), "0.0" ))= 357.2 ) )  OR  ( (( ( CNVTREAL ( NULLVAL ( TRIM (
N.SOURCE_IDENTIFIER,  3 ), "0.0" )) BETWEEN  362.0  AND  362.07 ) )  OR  ( (( ( CNVTREAL ( NULLVAL (
 TRIM (N.SOURCE_IDENTIFIER,  3 ), "0.0" ))= 366.41 ) )  OR  ( (( ( CNVTREAL ( NULLVAL ( TRIM (
N.SOURCE_IDENTIFIER,  3 ), "0.0" )) BETWEEN  648.0  AND  648.04 ) )  OR  ( (( ( CNVTREAL ( NULLVAL (
 TRIM (N.SOURCE_IDENTIFIER,  3 ), "0.0" )) BETWEEN  648.8  AND  648.84 ) )  OR  ((
N.SOURCE_IDENTIFIER="V58.67" ) ))  ))  ))  ))  ))  ))  ))  )) )
 
 
HEAD D.SEQ
 DREC -> QUAL [D.SEQ]-> DISPLAY_FLAG = 1
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( PERSON_PRSNL_RELTN  PPR ),
( PRSNL  P ),
( PRSNL_ALIAS  PA )
 PLAN ( D )
 AND ( PPR
WHERE ( DREC -> QUAL [D.SEQ]-> PERSON_ID =PPR.PERSON_ID) AND (PPR.PERSON_PRSNL_R_CD= PCP_CD ) AND ((
PPR.PRSNL_PERSON_ID+ 0 )> 0.0 ))
 AND ( P
WHERE (P.PERSON_ID=PPR.PRSNL_PERSON_ID))
 AND ( PA
WHERE ( OUTERJOIN (P.PERSON_ID)=PA.PERSON_ID) AND (PA.PRSNL_ALIAS_TYPE_CD= OUTERJOIN ( NPI_CD )))
 
 
DETAIL
 DREC -> QUAL [D.SEQ]-> PROVIDER =P.NAME_FULL_FORMATTED,
 DREC -> QUAL [D.SEQ]-> PROVIDER_NPI_ALIAS =PA.ALIAS
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( ADDRESS  A )
 PLAN ( D )
 AND ( A
WHERE (A.PARENT_ENTITY_ID= DREC -> QUAL [D.SEQ]-> PERSON_ID ) AND (A.PARENT_ENTITY_NAME="PERSON" )
 AND (A.ADDRESS_TYPE_CD IN ( HOME_ADDRESS_CD ,
 EMAIL_ADDRESS_CD )) AND (A.ACTIVE_IND= 1 ) AND (A.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( ENDDATE ))
 AND (A.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( STARTDATE )))
 
 
DETAIL
 
IF ( (A.ADDRESS_TYPE_CD= HOME_ADDRESS_CD ) )  DREC -> QUAL [D.SEQ]-> STREET_ADDR =A.STREET_ADDR,
 DREC -> QUAL [D.SEQ]-> STREET_ADDR2 =A.STREET_ADDR2,  DREC -> QUAL [D.SEQ]-> CITY =A.CITY,  DREC ->
 QUAL [D.SEQ]-> STATE =A.STATE,  DREC -> QUAL [D.SEQ]-> ZIPCODE =A.ZIPCODE
ELSE   DREC -> QUAL [D.SEQ]-> EMAIL =A.STREET_ADDR
ENDIF
 
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( PHONE  PH )
 PLAN ( D )
 AND ( PH
WHERE (PH.PARENT_ENTITY_ID= DREC -> QUAL [D.SEQ]-> PERSON_ID ) AND (PH.PARENT_ENTITY_NAME="PERSON" )
 AND (PH.PHONE_TYPE_CD IN ( BUS_PHONE_CD ,
 HOME_PHONE_CD ,
 CELL_PHONE_CD )) AND (PH.ACTIVE_IND= 1 ) AND (PH.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,
 CURTIME3 )) AND (PH.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )))
 
 
DETAIL
 
IF ( (PH.PHONE_TYPE_CD= BUS_PHONE_CD ) )  DREC -> QUAL [D.SEQ]-> BUSINESS_PHONE = FORMAT (
PH.PHONE_NUM, "###-###-####" )
ELSEIF ( (PH.PHONE_TYPE_CD= HOME_PHONE_CD ) )  DREC -> QUAL [D.SEQ]-> HOME_PHONE = FORMAT (
PH.PHONE_NUM, "###-###-####" )
ELSEIF ( (PH.PHONE_TYPE_CD= CELL_PHONE_CD ) )  DREC -> QUAL [D.SEQ]-> CELL_PHONE = FORMAT (
PH.PHONE_NUM, "###-###-####" )
ENDIF
 
 WITH  NOCOUNTER
 
SELECT  INTO "nl:"
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT ),
( PERSON_INFO  PI )
 PLAN ( D )
 AND ( PI
WHERE (PI.PERSON_ID= DREC -> QUAL [D.SEQ]-> PERSON_ID ) AND (PI.INFO_SUB_TYPE_CD IN (
 RSRCHCONSENT_CD ,
 RSRCHCONDTRV_CD ,
 MEDCONFRMDT_CD )) AND (PI.ACTIVE_IND= 1 ))
 
 
DETAIL
 
IF ( (PI.INFO_SUB_TYPE_CD= RSRCHCONDTRV_CD ) )  DREC -> QUAL [D.SEQ]-> RSRCHCONDTRV_DATE_TIME =
 FORMAT (PI.VALUE_DT_TM, "mm/dd/yyyy;;d" )
ELSEIF ( (PI.INFO_SUB_TYPE_CD= MEDCONFRMDT_CD ) )  DREC -> QUAL [D.SEQ]-> MEDCONFRMDT_DATE_TIME =
 FORMAT (PI.VALUE_DT_TM, "mm/dd/yyyy;;d" )
ELSE   DREC -> QUAL [D.SEQ]-> RSRCHCONSENT = UAR_GET_CODE_DISPLAY (PI.VALUE_CD)
ENDIF
 
 WITH  NOCOUNTER
 
# FILE7_OUTPUT
 
SELECT  INTO  $1
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT )
 
WHERE ( DREC -> QUAL [D.SEQ]-> DISPLAY_FLAG = 1 )
 
HEAD REPORT
 SEP_CHAR ="|" ,
 DISP_LINE = CONCAT ("Medical_Record_Number" ,  SEP_CHAR , "Community_Medical_Record_Number" ,
 SEP_CHAR , "Org_ID" ,  SEP_CHAR , "Site_ID" ,  SEP_CHAR , "Location_Id" ,  SEP_CHAR ,
"Location_Abbr" ,  SEP_CHAR , "Appointment_Date" ,  SEP_CHAR , "Appointment_Time" ,  SEP_CHAR ,
"Appointment_Type" ,  SEP_CHAR , "Appointment_Note" ,  SEP_CHAR , "Provider_NPI" ,  SEP_CHAR ,
"Provider_Name" ,  SEP_CHAR , "Resource_ID" ,  SEP_CHAR ),
 DISP_LINE ,
 ROW + 1
DETAIL
 DISP_LINE = CONCAT ( TRIM ( DREC -> QUAL [D.SEQ]-> MRN ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [
D.SEQ]-> CMRN ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> ORG_ID ,  3 ),  SEP_CHAR ,  TRIM (
 DREC -> QUAL [D.SEQ]-> SITE_ID ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> LOCATION_ID ,  3
),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> LOCATION_DISP ,  3 ),  SEP_CHAR ,  TRIM ( DREC ->
 QUAL [D.SEQ]-> APPT_DATE ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> APPT_TIME ,  3 ),
 SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> APPT_TYPE ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ
]-> APPT_NOTE ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> PROVIDER_NPI_ALIAS ,  3 ),
 SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> PROVIDER ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]
-> RESOURCE ,  3 )),
 DISP_LINE ,
 ROW + 1
 WITH  MAXROW = 1 , MAXCOL = 2000 , FORMAT = VARIABLE , FORMFEED = NONE
 
SELECT  INTO  VALUE ( TRIM ( FILE7NAME ))
FROM ( DUMMYT  D  WITH  SEQ = DREC -> CNT )
 
WHERE ( DREC -> QUAL [D.SEQ]-> DISPLAY_FLAG = 1 )
 
HEAD REPORT
 SEP_CHAR ="|" ,
 DISP_LINE = CONCAT ("Medical_Record_Number" ,  SEP_CHAR , "Community_Medical_Record_Number" ,
 SEP_CHAR , "Org_ID" ,  SEP_CHAR , "Site_ID" ,  SEP_CHAR , "Location_Id" ,  SEP_CHAR ,
"Location_Abbr" ,  SEP_CHAR , "Appointment_Date" ,  SEP_CHAR , "Appointment_Time" ,  SEP_CHAR ,
"Appointment_Type" ,  SEP_CHAR , "Appointment_Note" ,  SEP_CHAR , "Provider_NPI" ,  SEP_CHAR ,
"Provider_Name" ,  SEP_CHAR , "Resource_ID" ,  SEP_CHAR ),
 DISP_LINE ,
 ROW + 1
DETAIL
 DISP_LINE = CONCAT ( TRIM ( DREC -> QUAL [D.SEQ]-> MRN ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [
D.SEQ]-> CMRN ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> ORG_ID ,  3 ),  SEP_CHAR ,  TRIM (
 DREC -> QUAL [D.SEQ]-> SITE_ID ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> LOCATION_ID ,  3
),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> LOCATION_DISP ,  3 ),  SEP_CHAR ,  TRIM ( DREC ->
 QUAL [D.SEQ]-> APPT_DATE ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> APPT_TIME ,  3 ),
 SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> APPT_TYPE ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ
]-> APPT_NOTE ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> PROVIDER_NPI_ALIAS ,  3 ),
 SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]-> PROVIDER ,  3 ),  SEP_CHAR ,  TRIM ( DREC -> QUAL [D.SEQ]
-> RESOURCE ,  3 )),
 DISP_LINE ,
 ROW + 1
 WITH  MAXROW = 1 , MAXCOL = 2000 , FORMAT = VARIABLE , FORMFEED = NONE
 
# EXIT_SCRIPT
 
SET  REPLY -> STATUS_DATA -> STATUS  = "S"
 
FREE RECORD CLIN_EVENTS
 
FREE RECORD DREC
 
FREE RECORD EVENTS
 
FREE RECORD NOMEN_GRP
 END GO
