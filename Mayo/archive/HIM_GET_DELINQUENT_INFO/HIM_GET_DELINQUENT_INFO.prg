;*** Generated by translate command; please verify contents before re-including in CCL ***
DROP PROGRAM   HIM_GET_DELINQUENT_INFO : DBA  GO
CREATE PROGRAM  HIM_GET_DELINQUENT_INFO : DBA
 
FREE RECORD TEMP_REPLY
 
RECORD  TEMP_REPLY  (
1  REPLY_QUAL [*]
2  MEDICAL_SERVICE  =  VC
2  PHYSICIAN_ID  =  F8
2  PHYSICIAN_NAME  =  VC
2  ENCNTR_ID  =  F8
2  ORGANIZATION_ID  =  F8
2  ORGANIZATION_NAME  =  C50
2  DOCUMENT  =  C25			;se
2  DEFICIENCY  =  C25 		;se
2  DEFICIENCY_CD  =  F8
2  CHART_AGE  =  I2
2  ORDER_IND  =  I2
1  STATUS_DATA
2  STATUS  =  C1
2  SUBEVENTSTATUS [1 ]
3  OPERATIONNAME  =  C25
3  OPERATIONSTATUS  =  C1
3  TARGETOBJECTNAME  =  C25
3  TARGETOBJECTVALUE  =  VC )
 
IF ( ( VALIDATE ( HIM_R_SYSTEM_PARAMS_INC )=0 ) )
DECLARE  HIM_R_SYSTEM_PARAMS_INC  =  I2  WITH  PUBLIC , NOCONSTANT (1 )
DECLARE  MULTIFACILITY_IND  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  TRACKING_ORDERS_IND  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  PENDING_SIGNS_IND  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  VISIT_AGING_IND  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  DOC_AGING_IND  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  PHYS_HOLD_IND  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  VISIT_HOLD_IND  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  DAYS_TO_DELINQ  =  I4  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  DAYS_TO_SUSPEND  =  I4  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  LOADING_LETTERS  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  LOADING_POWERVISION  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  ORDER_DELINQ_HOURS  =  I2  WITH  PROTECT , NOCONSTANT (0 )
DECLARE  ORDER_SUSP_HOURS  =  I2  WITH  PROTECT , NOCONSTANT (0 )
SELECT  INTO "nl:"
FROM ( HIM_SYSTEM_PARAMS  HP )
 
WHERE (HP.HIM_SYSTEM_PARAMS_ID>0 ) AND (HP.ACTIVE_IND=1 )
 
DETAIL
 MULTIFACILITY_IND =HP.FACILITY_LOGIC_IND,
 TRACKING_ORDERS_IND =HP.ORDER_TRACKING_IND,
 PENDING_SIGNS_IND =HP.PENDING_SIGNS_IND,
 VISIT_AGING_IND =HP.VISITAGING_IND,
 DOC_AGING_IND =HP.DOCAGING_IND,
 PHYS_HOLD_IND =HP.DOCAGING_PHYS_HOLD_IND,
 VISIT_HOLD_IND =HP.DOCAGING_VISIT_HOLD_IND,
 DAYS_TO_SUSPEND =HP.DAYS_TO_SUSPEND,
 DAYS_TO_DELINQ =HP.DAYS_TO_DELINQUENT,
 LOADING_LETTERS =HP.LOADING_LETTERS_IND,
 LOADING_POWERVISION =HP.LOADING_POWERVISION_IND,
 ORDER_DELINQ_HOURS =(HP.ORDER_DELINQUENT_DAYS*24 ),
 ORDER_SUSP_HOURS =(HP.ORDER_SUSPENSION_DAYS*24 )
 WITH  NOCOUNTER
DECLARE  HIM_MULTIFACILITY_IND  =  I2  WITH  PUBLIC , CONSTANT ( MULTIFACILITY_IND )
DECLARE  HIM_TRACKING_ORDERS_IND  =  I2  WITH  PUBLIC , CONSTANT ( TRACKING_ORDERS_IND )
DECLARE  HIM_PENDING_SIGNS_IND  =  I2  WITH  PUBLIC , CONSTANT ( PENDING_SIGNS_IND )
DECLARE  HIM_VISIT_AGING_IND  =  I2  WITH  PUBLIC , CONSTANT ( VISIT_AGING_IND )
DECLARE  HIM_DOC_AGING_IND  =  I2  WITH  PUBLIC , CONSTANT ( DOC_AGING_IND )
DECLARE  HIM_PHYS_HOLD_IND  =  I2  WITH  PUBLIC , CONSTANT ( PHYS_HOLD_IND )
DECLARE  HIM_VISIT_HOLD_IND  =  I2  WITH  PUBLIC , CONSTANT ( VISIT_HOLD_IND )
DECLARE  HIM_DAYS_TO_SUSPEND  =  I4  WITH  PUBLIC , CONSTANT ( DAYS_TO_SUSPEND )
DECLARE  HIM_DAYS_TO_DELINQ  =  I4  WITH  PUBLIC , CONSTANT ( DAYS_TO_DELINQ )
DECLARE  HIM_LOADING_LETTERS_IND  =  I2  WITH  PUBLIC , CONSTANT ( LOADING_LETTERS )
DECLARE  HIM_LOADING_PV_IND  =  I2  WITH  PUBLIC , CONSTANT ( LOADING_POWERVISION )
DECLARE  HIM_ORDER_DELINQ_HRS  =  I2  WITH  PUBLIC , CONSTANT ( ORDER_DELINQ_HOURS )
DECLARE  HIM_ORDER_SUSP_HRS  =  I2  WITH  PUBLIC , CONSTANT ( ORDER_SUSP_HOURS )
ENDIF
 
 
IF ( ( VALIDATE ( HIM_DEFICIENCY_CDS_INCLUDED )=0 ) )
DECLARE  HIM_DEFICIENCY_CDS_INCLUDED  =  I2  WITH  PUBLIC , CONSTANT (1 )
DECLARE  PERFORM_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  SIGN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  COSIGN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  MODIFY_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  REQUESTED_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  PENDING_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  COMPLETED_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  INERROR_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  TRANSCRIBE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  REQ_DICT_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  REQ_SIGN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  PEND_SIGN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  REQ_MOD_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  PEND_TRANS_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  PEND_AGE_IND  =  I2  WITH  PUBLIC , NOCONSTANT (0 )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (21 , "PERFORM" , 1 ,  PERFORM_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (21 , "SIGN" , 1 ,  SIGN_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (21 , "COSIGN" , 1 ,  COSIGN_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (21 , "MODIFY" , 1 ,  MODIFY_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (21 , "TRANSCRIBE" , 1 ,  TRANSCRIBE_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (103 , "REQUESTED" , 1 ,  REQUESTED_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (103 , "PENDING" , 1 ,  PENDING_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (103 , "INERROR" , 1 ,  INERROR_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (103 , "COMPLETED" , 1 ,  COMPLETED_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (14030 , "PEND DICT" , 1 ,  REQ_DICT_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (14030 , "EXPECT SIGN" , 1 ,  PEND_SIGN_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (14030 , "PEND SIGN" , 1 ,  REQ_SIGN_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (14030 , "PEND MODIFY" , 1 ,  REQ_MOD_CD )
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (14030 , "PEND TRANS" , 1 ,  PEND_TRANS_CD )
DECLARE  IREQ_PERFORM  =  I2  WITH  PROTECT , CONSTANT (1 )
DECLARE  IPEND_SIGN  =  I2  WITH  PROTECT , CONSTANT (2 )
DECLARE  IREQ_SIGN  =  I2  WITH  PROTECT , CONSTANT (3 )
DECLARE  IREQ_MODIFY  =  I2  WITH  PROTECT , CONSTANT (4 )
DECLARE  IUNDECLARED  =  I2  WITH  PROTECT , CONSTANT (99 )
SELECT  INTO "nl:"
FROM ( CODE_VALUE_EXTENSION  CVE )
 
WHERE (CVE.CODE_SET=14030 ) AND (CVE.CODE_VALUE= PEND_SIGN_CD ) AND (CVE.FIELD_NAME="age_ind" )
 
DETAIL
 PEND_AGE_IND = CNVTINT (CVE.FIELD_VALUE)
 WITH  NOCOUNTER
ENDIF
 
 
DECLARE  MLCCL_ERROR_RESOURCE_BUSY  =  I4  WITH  PROTECT , NOCONSTANT (290 )
 
DECLARE  CHECKERRORCCL (( P_SSTATUS = C1 ), ( P_SOPNAME = VC ), ( P_SOPSTATUS = VC ), (
 P_STARGETOBJNAME = VC )) =  I2
 
SUBROUTINE   CHECKERRORCCL  ( P_SSTATUS ,  P_SOPNAME ,  P_SOPSTATUS ,  P_STARGETOBJNAME  )
 
DECLARE  IRETURN  =  I2  WITH  PRIVATE , NOCONSTANT (0 )
DECLARE  SERRMSGCCL  =  VC  WITH  PRIVATE , NOCONSTANT ("" )
DECLARE  LERRCODECCL  =  I4  WITH  PRIVATE , NOCONSTANT (0 )
IF ( ( VALIDATE ( LERRCNTCCL_PERSIST ,  - (1 ))= - (1 )) )
DECLARE  LERRCNTCCL_PERSIST  =  I4  WITH  PERSISTSCRIPT , PRIVATE , NOCONSTANT (0 )
ENDIF
 
SET  LERRCODECCL  =  ERROR ( SERRMSGCCL , 0 )
IF ( ( LERRCODECCL >0 ) )
WHILE ( ( LERRCODECCL >0 ) AND ( LERRCNTCCL_PERSIST <20 ))
 
SET  LERRCNTCCL_PERSIST  = ( LERRCNTCCL_PERSIST +1 )
IF ( ( LERRCODECCL != MLCCL_ERROR_RESOURCE_BUSY ) )
SET  IRETURN  =  TRUE
 CALL ADDSTATUSBLOCK ( P_SSTATUS ,  P_SOPNAME ,  P_SOPSTATUS ,  P_STARGETOBJNAME ,  SERRMSGCCL )
ENDIF
 
SET  LERRCODECCL  =  ERROR ( SERRMSGCCL , 0 )
 
ENDWHILE
 
ENDIF
 RETURN ( IRETURN )
 
 
END ;Subroutine
 
 
DECLARE  ADDSTATUSBLOCK (( P_SSTATUS = C1 ), ( P_SOPNAME = VC ), ( P_SOPSTATUS = VC ), (
 P_STARGETOBJNAME = VC ), ( P_STARGETOBJVALUE = VC )) =  I4
 
SUBROUTINE   ADDSTATUSBLOCK  ( P_SSTATUS ,  P_SOPNAME ,  P_SOPSTATUS ,  P_STARGETOBJNAME ,
 P_STARGETOBJVALUE  )
 
DECLARE  LSUBEVENTCNT  =  I4  WITH  PRIVATE , NOCONSTANT (0 )
IF ( ( P_SSTATUS >"" ) AND ( REPLY -> STATUS_DATA -> STATUS !="F" ) )
SET  REPLY -> STATUS_DATA -> STATUS  =  P_SSTATUS
ELSEIF ( ( P_SSTATUS ="F" ) )
 CALL ECHO ( CONCAT ("SCRIPT FAILURE - " ,  P_STARGETOBJVALUE ))
ENDIF
 
SET  LSUBEVENTCNT  =  ALTERSTATUSBLOCK (0 )
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ LSUBEVENTCNT ]-> OPERATIONNAME  =  P_SOPNAME
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ LSUBEVENTCNT ]-> OPERATIONSTATUS  =  P_SOPSTATUS
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ LSUBEVENTCNT ]-> TARGETOBJECTNAME  =
 P_STARGETOBJNAME
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ LSUBEVENTCNT ]-> TARGETOBJECTVALUE  =
 P_STARGETOBJVALUE  RETURN ( LSUBEVENTCNT )
 
 
END ;Subroutine
 
 
DECLARE  ALTERSTATUSBLOCK (( P_IDUMMY = I2 )) =  I4
 
SUBROUTINE   ALTERSTATUSBLOCK  ( P_IDUMMY  )
 
DECLARE  LSUBEVENTCNT  =  I4  WITH  PRIVATE , NOCONSTANT (0 )
DECLARE  LSUBEVENTSTAT  =  I4  WITH  PRIVATE , NOCONSTANT (0 )
IF ( ( SIZE ( REPLY -> STATUS_DATA -> SUBEVENTSTATUS , 5 )=1 ) AND ( SIZE ( TRIM ( REPLY ->
 STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONSTATUS , 3 ))=0 ) )
SET  LSUBEVENTCNT  = 1
ELSE
SET  LSUBEVENTCNT  = ( SIZE ( REPLY -> STATUS_DATA -> SUBEVENTSTATUS , 5 )+1 )
SET  LSUBEVENTSTAT  =  ALTER ( REPLY -> STATUS_DATA -> SUBEVENTSTATUS ,  LSUBEVENTCNT )
ENDIF
 RETURN ( LSUBEVENTCNT )
 
 
END ;Subroutine
 
 
DECLARE  MLERRCODECCL  =  I4  WITH  PRIVATE , NOCONSTANT (0 )
 
DECLARE  MSERRMSGCCL  =  VC  WITH  PRIVATE , NOCONSTANT ("" )
 
SET  MLERRCODECCL  =  ERROR ( MSERRMSGCCL , 1 )
 
DECLARE  PHYS_VISIT_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
DECLARE  PHYSICIAN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
DECLARE  VISIT_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
DECLARE  MRN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
DECLARE  FIN_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
 
DECLARE  MSHEAPARSER  =  VC  WITH  PUBLIC , NOCONSTANT ("" )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (14164 , "PHYS/VISIT" , 1 ,  PHYS_VISIT_CD )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (14164 , "PHYSICIAN" , 1 ,  PHYSICIAN_CD )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (14164 , "VISIT" , 1 ,  VISIT_CD )
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (319 , "MRN" , 1 ,  MRN_CD )
 
SET  FIN_CD  = 0.0
 
SET  STAT  =  UAR_GET_MEANING_BY_CODESET (319 , "FIN NBR" , 1 ,  FIN_CD )
 
DECLARE  MEDSERVICE_MEAN  =  C12  WITH  PUBLIC , CONSTANT ("MEDSERVICE" )
 
SET  DATA_FOUND_IND  = 0
 
SET  ORG_SIZE  =  SIZE ( REQUEST -> ORG_QUAL , 5 )
 
SET  QUAL_SIZE  =  SIZE ( REQUEST -> PHYSICIAN_QUAL , 5 )
 
IF ( ( REQUEST -> SORT_IND =1 ) )
SELECT  INTO "nl:"
 PRSNL_GROUP_TYPE = UAR_GET_CODE_MEANING (PG.PRSNL_GROUP_TYPE_CD)
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( QUAL_SIZE )),
( PRSNL_GROUP_RELTN  PGR ),
( PRSNL_GROUP  PG )
 PLAN ( D )
 AND ( PGR
WHERE (PGR.PERSON_ID= REQUEST -> PHYSICIAN_QUAL [D.SEQ]-> PHYSICIAN_ID ) AND (
PGR.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (PGR.END_EFFECTIVE_DT_TM>=
 CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (PGR.ACTIVE_IND=1 ))
 AND ( PG
WHERE (PG.PRSNL_GROUP_ID=PGR.PRSNL_GROUP_ID) AND (PG.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,
 CURTIME3 )) AND (PG.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (PG.ACTIVE_IND=
1 ))
 
 
DETAIL
 
IF ( ( PRSNL_GROUP_TYPE = MEDSERVICE_MEAN ) )  REQUEST -> PHYSICIAN_QUAL [D.SEQ]-> MED_SERVICE_NAME
= SUBSTRING (1 , 24 , PG.PRSNL_GROUP_NAME)
ENDIF
 
 WITH  NOCOUNTER
ENDIF
 
 
IF (  (( ( HIM_PENDING_SIGNS_IND >0 ) AND  (( ( REQUEST -> PRINT_DEFICIENCIES_IND =1 ) )  OR  ((
 REQUEST -> PRINT_PEND_IND =1 ) ))  )  OR  (( HIM_PENDING_SIGNS_IND =0 ) AND ( REQUEST ->
 PRINT_DEFICIENCIES_IND =1 ) ))  )
SELECT  INTO "nl:"
 PHYSICIAN_NAME = TRIM ( SUBSTRING (1 , 50 ,  REQUEST -> PHYSICIAN_QUAL [D.SEQ]-> PHYSICIAN_NAME )),
 ALPHA_PHYSICIAN_NAME = TRIM ( CNVTUPPER ( SUBSTRING (1 , 50 ,  REQUEST -> PHYSICIAN_QUAL [D.SEQ]->
 PHYSICIAN_NAME ))),
 PHYSICIAN_ID = REQUEST -> PHYSICIAN_QUAL [D.SEQ]-> PHYSICIAN_ID ,
 ORGANIZATION_ID =E.ORGANIZATION_ID,
 DISCH_DATE = CNVTDATETIME (E.DISCH_DT_TM),
 DOCUMENT = SUBSTRING (1 , 25 ,  UAR_GET_CODE_DISPLAY (HEA.EVENT_CD)),
 DEFICIENCY =
IF ( (HEA.ACTION_TYPE_CD= PERFORM_CD ) ) "Dictate"
ELSE   SUBSTRING (1 , 25 ,  UAR_GET_CODE_DISPLAY (HEA.ACTION_TYPE_CD))  ;se
ENDIF
,
 PATIENT_TYPE = SUBSTRING (1 , 25 ,  UAR_GET_CODE_DISPLAY (E.ENCNTR_TYPE_CD)),		;se
 MEDICAL_SERVICE =
IF ( ( REQUEST -> SORT_IND =1 ) )  SUBSTRING (1 , 24 ,  TRIM ( CNVTUPPER ( REQUEST ->
 PHYSICIAN_QUAL [D.SEQ]-> MED_SERVICE_NAME )))
ELSE  " "
ENDIF
 
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( QUAL_SIZE )),
( HIM_LETTERS_TEMP  T ),
( ENCOUNTER  E ),
( ORGANIZATION  O ),
( HIM_EVENT_ALLOCATION  HEA ),
( HIM_EVENT_EXTENSION  H )
 PLAN ( D )
 AND ( T
WHERE (T.PRSNL_ID= REQUEST -> PHYSICIAN_QUAL [D.SEQ]-> PHYSICIAN_ID ) AND (T.BATCH_NBR= REQUEST ->
 BATCH_NBR ))
 AND ( E
WHERE (E.ENCNTR_ID=T.ENCNTR_ID) AND (E.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 ))
 AND (E.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (E.ACTIVE_IND=1 ))
 AND ( O
WHERE (O.ORGANIZATION_ID=E.ORGANIZATION_ID))
 AND ( HEA
WHERE (HEA.ENCNTR_ID=E.ENCNTR_ID) AND ((HEA.PRSNL_ID+0 )= REQUEST -> PHYSICIAN_QUAL [D.SEQ]->
 PHYSICIAN_ID ) AND (HEA.REQUEST_DT_TM!= NULL ) AND ( DATETIMEADD (HEA.COMPLETED_DT_TM, 0 )=
 CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
 AND ( H
WHERE (H.EVENT_CD=HEA.EVENT_CD) AND  (( (H.ORGANIZATION_ID=E.ORGANIZATION_ID) )  OR  (((
H.ORGANIZATION_ID+0 )=0 ) AND  NOT ( EXISTS (
(SELECT
OE.ORGANIZATION_ID
FROM ( ORG_EVENT_SET_RELTN  OE )
 
WHERE (OE.ORGANIZATION_ID=E.ORGANIZATION_ID) AND (OE.ACTIVE_IND=1 )))  ) )) )
 
 
DETAIL
 COUNT1 =( COUNT1 +1 ),
 
IF ( ( COUNT1 > SIZE ( TEMP_REPLY -> REPLY_QUAL , 5 )) )  STAT = ALTERLIST ( TEMP_REPLY ->
 REPLY_QUAL , ( COUNT1 +9 ))
ENDIF
,
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> PHYSICIAN_NAME = PHYSICIAN_NAME ,
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> PHYSICIAN_ID = PHYSICIAN_ID ,
 DATA_FOUND_IND =1 ,
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> MEDICAL_SERVICE = MEDICAL_SERVICE ,
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> ENCNTR_ID =E.ENCNTR_ID,
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> ORGANIZATION_ID =E.ORGANIZATION_ID,
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> ORGANIZATION_NAME =O.ORG_NAME,
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DOCUMENT = DOCUMENT ,
 
IF (  HIM_PENDING_SIGNS_IND  )
IF ( (HEA.ACTION_STATUS_CD= PENDING_CD ) )  TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY =
 UAR_GET_CODE_DISPLAY ( PEND_SIGN_CD ),  TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY_CD =
 PEND_SIGN_CD
ELSE
CASE ( HEA.ACTION_TYPE_CD )
 OF  SIGN_CD :  TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY = UAR_GET_CODE_DISPLAY (
 REQ_SIGN_CD ),
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY_CD = REQ_SIGN_CD
 OF  PERFORM_CD :  TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY = UAR_GET_CODE_DISPLAY (
 REQ_DICT_CD ),
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY_CD = REQ_DICT_CD
 OF  MODIFY_CD :  TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY = UAR_GET_CODE_DISPLAY (
 REQ_MOD_CD ),
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY_CD = REQ_MOD_CD
 ENDCASE
 
ENDIF
 
ELSE   TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> DEFICIENCY = DEFICIENCY
ENDIF
,
 TEMP_REPLY -> REPLY_QUAL [ COUNT1 ]-> CHART_AGE =T.AGE
FOOT REPORT
 STAT = ALTERLIST ( TEMP_REPLY -> REPLY_QUAL ,  COUNT1 )
 WITH  NOCOUNTER
IF (  HIM_TRACKING_ORDERS_IND  )
IF ( ( REQUEST -> DEBUG_IND =1 ) )
 CALL ECHO ("retrieving orders" )
ENDIF
 
 EXECUTE HIM_GET_DELINQ_VISIT_ORD_INFO
IF ( ( REQUEST -> DEBUG_IND =1 ) )
 CALL ECHO ("returning from getting orders" )
 CALL ECHORECORD ( TEMP_REPLY )
ENDIF
 
IF ( ( TEMP_REPLY -> STATUS_DATA -> STATUS ="F" ) )
 CALL ADDSTATUSBLOCK ("F" , "SELECT" , "F" , "Order" ,
"SCRIPT ABORTED:CCL errors encountered retrieving orders." ) GO TO  PROGRAMEND
ELSEIF (  CHECKERRORCCL ("F" , "SELECT" , "F" , "Order" ) )
 CALL ADDSTATUSBLOCK ("F" , "SELECT" , "F" , "Order" ,
"SCRIPT ABORTED:CCL errors encountered retrieving orders." ) GO TO  PROGRAMEND
ENDIF
 
ENDIF
 
SET  QUAL_SIZE  =  SIZE ( TEMP_REPLY -> REPLY_QUAL , 5 )
SELECT  INTO "nl:"
 PHYSICIAN_NAME = TRIM ( SUBSTRING (1 , 50 ,  TEMP_REPLY -> REPLY_QUAL [D.SEQ]-> PHYSICIAN_NAME )),
 ALPHA_PHYSICIAN_NAME = TRIM ( CNVTUPPER ( SUBSTRING (1 , 50 ,  TEMP_REPLY -> REPLY_QUAL [D.SEQ]->
 PHYSICIAN_NAME ))),
 PHYSICIAN_ID = TEMP_REPLY -> REPLY_QUAL [D.SEQ]-> PHYSICIAN_ID ,
 DISCH_DATE = CNVTDATETIME (E.DISCH_DT_TM),
 MED_REC_NBR = SUBSTRING (1 , 20 ,  CNVTALIAS (EA1.ALIAS, EA1.ALIAS_POOL_CD)),
 FIN_NBR = SUBSTRING (1 , 20 ,  CNVTALIAS (EA2.ALIAS, EA2.ALIAS_POOL_CD)),
 PATIENT_TYPE = SUBSTRING (1 , 25 ,  UAR_GET_CODE_DISPLAY (E.ENCNTR_TYPE_CD)),  ;se
 MEDICAL_SERVICE = SUBSTRING (1 , 24 ,  TEMP_REPLY -> REPLY_QUAL [D.SEQ]-> MEDICAL_SERVICE )
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( QUAL_SIZE )),
( ENCOUNTER  E ),
( PERSON  P ),
( ENCNTR_ALIAS  EA1 ),
( ENCNTR_ALIAS  EA2 )
 PLAN ( D )
 AND ( E
WHERE (E.ENCNTR_ID= TEMP_REPLY -> REPLY_QUAL [D.SEQ]-> ENCNTR_ID ))
 AND ( P
WHERE (P.PERSON_ID=E.PERSON_ID))
 AND ( EA1
WHERE (EA1.ENCNTR_ID= OUTERJOIN (E.ENCNTR_ID)) AND (EA1.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( MRN_CD ))
 AND (EA1.BEG_EFFECTIVE_DT_TM<= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (
EA1.END_EFFECTIVE_DT_TM>= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (EA1.ACTIVE_IND=
 OUTERJOIN (1 )))
 AND ( EA2
WHERE (EA2.ENCNTR_ID= OUTERJOIN (E.ENCNTR_ID)) AND (EA2.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( FIN_CD ))
 AND (EA2.BEG_EFFECTIVE_DT_TM<= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (
EA2.END_EFFECTIVE_DT_TM>= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (EA2.ACTIVE_IND=
 OUTERJOIN (1 )))
 
ORDER BY  MEDICAL_SERVICE ,
 ALPHA_PHYSICIAN_NAME ,
 PHYSICIAN_ID ,
 DISCH_DATE  DESC
 
HEAD REPORT
 PHYS_CNT =0
HEAD  MEDICAL_SERVICE
 ROW +0
HEAD  ALPHA_PHYSICIAN_NAME
 
IF ( ( REQUEST -> DEBUG_IND >0 ) )
 CALL ECHO ( BUILD2 ("in Alpha_Physician_Name Head on:" ,  ALPHA_PHYSICIAN_NAME ))
ENDIF
, PHYS_CNT =( PHYS_CNT +1 ),
IF ( ( PHYS_CNT > SIZE ( REPLY -> REPLY_QUAL , 5 )) )  STAT = ALTERLIST ( REPLY -> REPLY_QUAL , (
 PHYS_CNT +9 ))
ENDIF
, REPLY -> REPLY_QUAL [ PHYS_CNT ]-> PHYSICIAN_NAME = PHYSICIAN_NAME , REPLY -> REPLY_QUAL [
 PHYS_CNT ]-> PHYSICIAN_ID = PHYSICIAN_ID , DEF_CNT =0
DETAIL
 DEF_CNT =( DEF_CNT +1 ),
 
IF ( ( DEF_CNT > SIZE ( REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL , 5 )) )  STAT = ALTERLIST (
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL , ( DEF_CNT +9 ))
ENDIF
,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> PATIENT_ID = MED_REC_NBR ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> PAT_MRN = MED_REC_NBR ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> FIN_NBR = FIN_NBR ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> PATIENT_NAME =P.NAME_FULL_FORMATTED,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> ADMIT_DATE = CNVTDATETIME (E.REG_DT_TM
),
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> DISCH_DATE = CNVTDATETIME (
E.DISCH_DT_TM),
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> PATIENT_TYPE = PATIENT_TYPE ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> ENCNTR_ID =E.ENCNTR_ID,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> ORGANIZATION_ID = TEMP_REPLY ->
 REPLY_QUAL [D.SEQ]-> ORGANIZATION_ID ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> ORGANIZATION_NAME = TEMP_REPLY ->
 REPLY_QUAL [D.SEQ]-> ORGANIZATION_NAME ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> DOCUMENT = TEMP_REPLY -> REPLY_QUAL [
D.SEQ]-> DOCUMENT ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> DEFICIENCY = TEMP_REPLY -> REPLY_QUAL
[D.SEQ]-> DEFICIENCY ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> DEFICIENCY_CD = TEMP_REPLY ->
 REPLY_QUAL [D.SEQ]-> DEFICIENCY_CD ,
 REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL [ DEF_CNT ]-> CHART_AGE = TEMP_REPLY -> REPLY_QUAL [
D.SEQ]-> CHART_AGE
FOOT   ALPHA_PHYSICIAN_NAME
 STAT = ALTERLIST ( REPLY -> REPLY_QUAL [ PHYS_CNT ]-> DETAIL_QUAL ,  DEF_CNT )
FOOT   MEDICAL_SERVICE
 ROW +0
FOOT REPORT
 STAT = ALTERLIST ( REPLY -> REPLY_QUAL ,  PHYS_CNT )
 WITH  NOCOUNTER
ELSE
SELECT  INTO "nl:"
 PHYSICIAN_NAME = TRIM ( SUBSTRING (1 , 50 ,  REQUEST -> PHYSICIAN_QUAL [D.SEQ]-> PHYSICIAN_NAME )),
 ALPHA_PHYSICIAN_NAME = TRIM ( CNVTUPPER ( SUBSTRING (1 , 50 ,  REQUEST -> PHYSICIAN_QUAL [D.SEQ]->
 PHYSICIAN_NAME ))),
 PHYSICIAN_ID = REQUEST -> PHYSICIAN_QUAL [D.SEQ]-> PHYSICIAN_ID ,
 ORGANIZATION_ID =E.ORGANIZATION_ID,
 DISCH_DATE = CNVTDATETIME (E.DISCH_DT_TM),
 MED_REC_NBR = SUBSTRING (1 , 20 ,  CNVTALIAS (EA1.ALIAS, EA1.ALIAS_POOL_CD)),
 FIN_NBR = SUBSTRING (1 , 20 ,  CNVTALIAS (EA2.ALIAS, EA2.ALIAS_POOL_CD)),
 PATIENT_TYPE = SUBSTRING (1 , 25 ,  UAR_GET_CODE_DISPLAY (E.ENCNTR_TYPE_CD)),  ;se
 MEDICAL_SERVICE =
IF ( ( REQUEST -> SORT_IND =1 ) )  SUBSTRING (1 , 24 ,  TRIM ( CNVTUPPER ( REQUEST ->
 PHYSICIAN_QUAL [D.SEQ]-> MED_SERVICE_NAME )))
ELSE  " "
ENDIF
 
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( QUAL_SIZE )),
( HIM_LETTERS_TEMP  T ),
( ENCOUNTER  E ),
( ORGANIZATION  O ),
( PERSON  P ),
( ENCNTR_ALIAS  EA1 ),
( ENCNTR_ALIAS  EA2 )
 PLAN ( D )
 AND ( T
WHERE (T.PRSNL_ID= REQUEST -> PHYSICIAN_QUAL [D.SEQ]-> PHYSICIAN_ID ) AND (T.BATCH_NBR= REQUEST ->
 BATCH_NBR ))
 AND ( E
WHERE (E.ENCNTR_ID=T.ENCNTR_ID) AND (E.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 ))
 AND (E.END_EFFECTIVE_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND (E.ACTIVE_IND=1 ))
 AND ( O
WHERE (O.ORGANIZATION_ID=E.ORGANIZATION_ID))
 AND ( P
WHERE (P.PERSON_ID=E.PERSON_ID))
 AND ( EA1
WHERE (EA1.ENCNTR_ID= OUTERJOIN (E.ENCNTR_ID)) AND (EA1.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( MRN_CD ))
 AND (EA1.BEG_EFFECTIVE_DT_TM<= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (
EA1.END_EFFECTIVE_DT_TM>= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (EA1.ACTIVE_IND=
 OUTERJOIN (1 )))
 AND ( EA2
WHERE (EA2.ENCNTR_ID= OUTERJOIN (E.ENCNTR_ID)) AND (EA2.ENCNTR_ALIAS_TYPE_CD= OUTERJOIN ( FIN_CD ))
 AND (EA2.BEG_EFFECTIVE_DT_TM<= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (
EA2.END_EFFECTIVE_DT_TM>= OUTERJOIN ( CNVTDATETIME ( CURDATE ,  CURTIME3 ))) AND (EA2.ACTIVE_IND=
 OUTERJOIN (1 )))
 
ORDER BY  MEDICAL_SERVICE ,
 ALPHA_PHYSICIAN_NAME ,
 PHYSICIAN_ID ,
 DISCH_DATE  DESC
 
HEAD  MEDICAL_SERVICE
 BOGUS_VAR =0
HEAD  ALPHA_PHYSICIAN_NAME
 COUNT1 =( COUNT1 +1 ),
IF ( ( COUNT1 > SIZE ( REPLY -> REPLY_QUAL , 5 )) )  STAT = ALTERLIST ( REPLY -> REPLY_QUAL , (
 COUNT1 +9 ))
ENDIF
, REPLY -> REPLY_QUAL [ COUNT1 ]-> PHYSICIAN_NAME = PHYSICIAN_NAME , REPLY -> REPLY_QUAL [ COUNT1 ]
-> PHYSICIAN_ID = PHYSICIAN_ID , COUNT2 =0
DETAIL
 DATA_FOUND_IND =1 ,
 COUNT2 =( COUNT2 +1 ),
 
IF ( ( COUNT2 > SIZE ( REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL , 5 )) )  STAT = ALTERLIST (
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL , ( COUNT2 +9 ))
ENDIF
,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> ENCNTR_ID =E.ENCNTR_ID,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> ORGANIZATION_ID =E.ORGANIZATION_ID,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> ORGANIZATION_NAME =O.ORG_NAME,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> PATIENT_ID = MED_REC_NBR ,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> PAT_MRN = MED_REC_NBR ,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> FIN_NBR = FIN_NBR ,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> PATIENT_NAME =P.NAME_FULL_FORMATTED,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> ADMIT_DATE = CNVTDATETIME (E.REG_DT_TM),
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> DISCH_DATE = CNVTDATETIME (E.DISCH_DT_TM),
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> PATIENT_TYPE = PATIENT_TYPE ,
 REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL [ COUNT2 ]-> CHART_AGE =T.AGE
FOOT   ALPHA_PHYSICIAN_NAME
 STAT = ALTERLIST ( REPLY -> REPLY_QUAL [ COUNT1 ]-> DETAIL_QUAL ,  COUNT2 )
FOOT   MEDICAL_SERVICE
 BOGUS_VAR =0
FOOT REPORT
 STAT = ALTERLIST ( REPLY -> REPLY_QUAL ,  COUNT1 )
 WITH  NOCOUNTER
ENDIF
 
 
IF ( ( DATA_FOUND_IND =0 ) )  GO TO  PROGRAMEND
ENDIF
 
 
SELECT  INTO "nl:"
CH.COMPLETION_HOLD_ID
FROM ( COMPLETION_HOLD  CH ),
( DUMMYT  D  WITH  SEQ = SIZE ( REPLY -> REPLY_QUAL , 5 ))
 PLAN ( D )
 AND ( CH
WHERE (CH.PROVIDER_ID= REPLY -> REPLY_QUAL [D.SEQ]-> PHYSICIAN_ID ) AND ((CH.HOLD_TYPE_CD+0 )=
 PHYSICIAN_CD ) AND (CH.HOLD_START_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND  (( (
CH.HOLD_STOP_DT_TM>= CNVTDATETIME ( CURDATE ,  CURTIME3 )) )  OR  ((CH.HOLD_STOP_DT_TM= NULL ) ))
 AND (CH.ACTIVE_IND=1 ))
 
 
DETAIL
 REPLY -> REPLY_QUAL [D.SEQ]-> ON_HOLD =1
 WITH  NOCOUNTER
 
FOR (  CNT1  = 1  TO  SIZE ( REPLY -> REPLY_QUAL , 5 ) )
 
IF ( ( REPLY -> REPLY_QUAL [ CNT1 ]-> ON_HOLD =0 ) )
SET  D_QUAL_SIZE  =  SIZE ( REPLY -> REPLY_QUAL [ CNT1 ]-> DETAIL_QUAL , 5 )
SELECT  INTO "nl:"
CH.COMPLETION_HOLD_ID
FROM ( DUMMYT  D  WITH  SEQ = VALUE ( D_QUAL_SIZE )),
( COMPLETION_HOLD  CH )
 PLAN ( D )
 AND ( CH
WHERE (CH.ENCNTR_ID= REPLY -> REPLY_QUAL [ CNT1 ]-> DETAIL_QUAL [D.SEQ]-> ENCNTR_ID ) AND (
CH.HOLD_START_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND  (( (CH.HOLD_STOP_DT_TM>=
 CNVTDATETIME ( CURDATE ,  CURTIME3 )) )  OR  ((CH.HOLD_STOP_DT_TM= NULL ) ))  AND (CH.ACTIVE_IND=1
))
 
 
DETAIL
 
IF ( (CH.HOLD_TYPE_CD= PHYS_VISIT_CD ) )
IF ( (CH.PROVIDER_ID= REPLY -> REPLY_QUAL [ CNT1 ]-> PHYSICIAN_ID ) )
IF ( (CH.ENCNTR_ID= REPLY -> REPLY_QUAL [ CNT1 ]-> DETAIL_QUAL [D.SEQ]-> ENCNTR_ID ) )  REPLY ->
 REPLY_QUAL [ CNT1 ]-> DETAIL_QUAL [D.SEQ]-> ON_HOLD =1
ENDIF
 
ENDIF
 
ELSE
IF ( (CH.HOLD_TYPE_CD= VISIT_CD ) )  REPLY -> REPLY_QUAL [ CNT1 ]-> DETAIL_QUAL [D.SEQ]-> ON_HOLD =
1
ENDIF
 
ENDIF
 
 WITH  NOCOUNTER
ENDIF
 
 
ENDFOR
 
 
# PROGRAMEND
 
IF ( ( DATA_FOUND_IND =0 ) )
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONNAME  = "SELECT"
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONSTATUS  = "F"
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> TARGETOBJECTNAME  = "REQUEST"
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> TARGETOBJECTVALUE  = "REQUEST"
SET  REPLY -> STATUS_DATA -> STATUS  = "Z"
ELSE
SET  REPLY -> STATUS_DATA -> STATUS  = "S"
ENDIF
 
 END GO
 
