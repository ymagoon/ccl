1)translate SCH_GET_APPT_RESOURCE go
;*** Generated by translate command; verify before re-including in CCL ***
DROP PROGRAM   SCH_GET_APPT_RESOURCE : DBA  GO
CREATE PROGRAM  SCH_GET_APPT_RESOURCE : DBA

IF ( ( VALIDATE ( ACTION_NONE ,  - (1 ))!=0 ) )
DECLARE  ACTION_NONE  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF


IF ( ( VALIDATE ( ACTION_ADD ,  - (1 ))!=1 ) )
DECLARE  ACTION_ADD  =  I2  WITH  PROTECT , NOCONSTANT (1 )
ENDIF


IF ( ( VALIDATE ( ACTION_CHG ,  - (1 ))!=2 ) )
DECLARE  ACTION_CHG  =  I2  WITH  PROTECT , NOCONSTANT (2 )
ENDIF


IF ( ( VALIDATE ( ACTION_DEL ,  - (1 ))!=3 ) )
DECLARE  ACTION_DEL  =  I2  WITH  PROTECT , NOCONSTANT (3 )
ENDIF


IF ( ( VALIDATE ( ACTION_GET ,  - (1 ))!=4 ) )
DECLARE  ACTION_GET  =  I2  WITH  PROTECT , NOCONSTANT (4 )
ENDIF


IF ( ( VALIDATE ( ACTION_INA ,  - (1 ))!=5 ) )
DECLARE  ACTION_INA  =  I2  WITH  PROTECT , NOCONSTANT (5 )
ENDIF


IF ( ( VALIDATE ( ACTION_ACT ,  - (1 ))!=6 ) )
DECLARE  ACTION_ACT  =  I2  WITH  PROTECT , NOCONSTANT (6 )
ENDIF


IF ( ( VALIDATE ( ACTION_TEMP ,  - (1 ))!=999 ) )
DECLARE  ACTION_TEMP  =  I2  WITH  PROTECT , NOCONSTANT (999 )
ENDIF


IF ( ( VALIDATE ( TRUE ,  - (1 ))!=1 ) )
DECLARE  TRUE  =  I2  WITH  PROTECT , NOCONSTANT (1 )
ENDIF


IF ( ( VALIDATE ( FALSE ,  - (1 ))!=0 ) )
DECLARE  FALSE  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF


IF ( ( VALIDATE ( GEN_NBR_ERROR ,  - (1 ))!=3 ) )
DECLARE  GEN_NBR_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (3 )
ENDIF


IF ( ( VALIDATE ( INSERT_ERROR ,  - (1 ))!=4 ) )
DECLARE  INSERT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (4 )
ENDIF


IF ( ( VALIDATE ( UPDATE_ERROR ,  - (1 ))!=5 ) )
DECLARE  UPDATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (5 )
ENDIF


IF ( ( VALIDATE ( REPLACE_ERROR ,  - (1 ))!=6 ) )
DECLARE  REPLACE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (6 )
ENDIF


IF ( ( VALIDATE ( DELETE_ERROR ,  - (1 ))!=7 ) )
DECLARE  DELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (7 )
ENDIF


IF ( ( VALIDATE ( UNDELETE_ERROR ,  - (1 ))!=8 ) )
DECLARE  UNDELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (8 )
ENDIF


IF ( ( VALIDATE ( REMOVE_ERROR ,  - (1 ))!=9 ) )
DECLARE  REMOVE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (9 )
ENDIF


IF ( ( VALIDATE ( ATTRIBUTE_ERROR ,  - (1 ))!=10 ) )
DECLARE  ATTRIBUTE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (10 )
ENDIF


IF ( ( VALIDATE ( LOCK_ERROR ,  - (1 ))!=11 ) )
DECLARE  LOCK_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (11 )
ENDIF


IF ( ( VALIDATE ( NONE_FOUND ,  - (1 ))!=12 ) )
DECLARE  NONE_FOUND  =  I2  WITH  PROTECT , NOCONSTANT (12 )
ENDIF


IF ( ( VALIDATE ( SELECT_ERROR ,  - (1 ))!=13 ) )
DECLARE  SELECT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (13 )
ENDIF


IF ( ( VALIDATE ( UPDATE_CNT_ERROR ,  - (1 ))!=14 ) )
DECLARE  UPDATE_CNT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (14 )
ENDIF


IF ( ( VALIDATE ( NOT_FOUND ,  - (1 ))!=15 ) )
DECLARE  NOT_FOUND  =  I2  WITH  PROTECT , NOCONSTANT (15 )
ENDIF


IF ( ( VALIDATE ( VERSION_INSERT_ERROR ,  - (1 ))!=16 ) )
DECLARE  VERSION_INSERT_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (16 )
ENDIF


IF ( ( VALIDATE ( INACTIVATE_ERROR ,  - (1 ))!=17 ) )
DECLARE  INACTIVATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (17 )
ENDIF


IF ( ( VALIDATE ( ACTIVATE_ERROR ,  - (1 ))!=18 ) )
DECLARE  ACTIVATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (18 )
ENDIF


IF ( ( VALIDATE ( VERSION_DELETE_ERROR ,  - (1 ))!=19 ) )
DECLARE  VERSION_DELETE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (19 )
ENDIF


IF ( ( VALIDATE ( UAR_ERROR ,  - (1 ))!=20 ) )
DECLARE  UAR_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (20 )
ENDIF


IF ( ( VALIDATE ( DUPLICATE_ERROR ,  - (1 ))!=21 ) )
DECLARE  DUPLICATE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (21 )
ENDIF


IF ( ( VALIDATE ( CCL_ERROR ,  - (1 ))!=22 ) )
DECLARE  CCL_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (22 )
ENDIF


IF ( ( VALIDATE ( EXECUTE_ERROR ,  - (1 ))!=23 ) )
DECLARE  EXECUTE_ERROR  =  I2  WITH  PROTECT , NOCONSTANT (23 )
ENDIF


IF ( ( VALIDATE ( FAILED ,  - (1 ))!=0 ) )
DECLARE  FAILED  =  I2  WITH  PROTECT , NOCONSTANT ( FALSE )
ENDIF


IF ( ( VALIDATE ( TABLE_NAME , "ZZZ" )="ZZZ" ) )
DECLARE  TABLE_NAME  =  VC  WITH  PROTECT , NOCONSTANT ("" )
ELSE
SET  TABLE_NAME  =  FILLSTRING (100 , " " )
ENDIF


IF ( ( VALIDATE ( CALL_ECHO_IND ,  - (1 ))!=0 ) )
DECLARE  CALL_ECHO_IND  =  I2  WITH  PROTECT , NOCONSTANT ( FALSE )
ENDIF


IF ( ( VALIDATE ( I_VERSION ,  - (1 ))!=0 ) )
DECLARE  I_VERSION  =  I2  WITH  PROTECT , NOCONSTANT (0 )
ENDIF


IF ( ( VALIDATE ( PROGRAM_NAME , "ZZZ" )="ZZZ" ) )
DECLARE  PROGRAM_NAME  =  VC  WITH  PROTECT , NOCONSTANT ( FILLSTRING (30 , " " ))
ENDIF


IF ( ( VALIDATE ( SCH_SECURITY_ID ,  - (1 ))!=0 ) )
DECLARE  SCH_SECURITY_ID  =  F8  WITH  PROTECT , NOCONSTANT (0.0 )
ENDIF


IF ( ( VALIDATE ( LAST_MOD , "NOMOD" )="NOMOD" ) )
DECLARE  LAST_MOD  =  C5  WITH  PRIVATE , NOCONSTANT ("" )
ENDIF


IF ( ( VALIDATE ( SCHUAR_DEF , 999 )=999 ) )
 CALL ECHO ("Declaring schuar_def" )
DECLARE  SCHUAR_DEF  =  I2  WITH  PERSIST
SET  SCHUAR_DEF  = 1
DECLARE  UAR_SCH_CHECK_SECURITY (( SEC_TYPE_CD = F8 ( REF )), ( PARENT1_ID = F8 ( REF )), (
 PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 ( REF )), ( USER_ID = F8 ( REF
))) =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR =
"uar_sch_check_security" , PERSIST
DECLARE  UAR_SCH_SECURITY_INSERT (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF )), (
 PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 (
 REF ))) =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR =
"uar_sch_security_insert" , PERSIST
DECLARE  UAR_SCH_SECURITY_PERFORM () =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX =
"libshrschuar.a(libshrschuar.o)" , UAR ="uar_sch_security_perform" , PERSIST
DECLARE  UAR_SCH_CHECK_SECURITY_EX (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF )), (
 PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 (
 REF ))) =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX ="libshrschuar.a(libshrschuar.o)" , UAR =
"uar_sch_check_security_ex" , PERSIST
DECLARE  UAR_SCH_CHECK_SECURITY_EX2 (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF )), (
 PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 (
 REF )), ( POSITION_CD = F8 ( REF ))) =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX =
"libshrschuar.a(libshrschuar.o)" , UAR ="uar_sch_check_security_ex2" , PERSIST
DECLARE  UAR_SCH_SECURITY_INSERT_EX2 (( USER_ID = F8 ( REF )), ( SEC_TYPE_CD = F8 ( REF )), (
 PARENT1_ID = F8 ( REF )), ( PARENT2_ID = F8 ( REF )), ( PARENT3_ID = F8 ( REF )), ( SEC_ID = F8 (
 REF )), ( POSITION_CD = F8 ( REF ))) =  I4  WITH  IMAGE_AXP ="shrschuar" , IMAGE_AIX =
"libshrschuar.a(libshrschuar.o)" , UAR ="uar_sch_security_insert_ex2" , PERSIST
ENDIF


DECLARE  CDF_MEANING  =  C12  WITH  PUBLIC , NOCONSTANT ( FILLSTRING (12 , " " ))

DECLARE  GETCODEVALUE (( CODE_SET = I4 ), ( CDF_MEANING = C12 ), ( CODE_VARIABLE = F8 ( REF ))) =
 F8

SUBROUTINE   GETCODEVALUE  ( CODE_SET ,  CDF_MEANING ,  CODE_VARIABLE  )

SET  STAT  =  UAR_GET_MEANING_BY_CODESET ( CODE_SET ,  CDF_MEANING , 1 ,  CODE_VARIABLE )
IF (  (( ( STAT !=0 ) )  OR  (( CODE_VARIABLE <=0 ) ))  )
 CALL ECHO ( BUILD ("Invalid select on CODE_SET (" ,  CODE_SET , "),  CDF_MEANING(" ,  CDF_MEANING
, 1 ,  CODE_VARIABLE , ")" ))
SET  FAILED  =  UAR_ERROR  GO TO  EXIT_SCRIPT
ENDIF


END ;Subroutine


DECLARE  S_FORMAT_UTC_DATE ( DATE ,  TZ_INDEX ,  OPTION ) =  VC

SUBROUTINE   S_FORMAT_UTC_DATE  ( DATE ,  TZ_INDEX ,  OPTION  )

IF (  CURUTC  )
IF ( ( TZ_INDEX >0 ) )  RETURN ( FORMAT ( DATETIMEZONE ( DATE ,  TZ_INDEX ),  OPTION ))

ELSE   RETURN ( FORMAT ( DATETIMEZONE ( DATE ,  CURTIMEZONESYS ),  OPTION ))

ENDIF

ELSE   RETURN ( FORMAT ( DATE ,  OPTION ))

ENDIF


END ;Subroutine


SET  CALL_ECHO_IND  =  REQUEST -> CALL_ECHO_IND

RECORD  REPLY  (
1  QUAL_CNT  =  I4
1  QUAL [*]
2  RESOURCE_CD  =  F8
2  PERSON_ID  =  F8
2  QUAL_CNT  =  I4
2  APPOINTMENT [*]
3  SCH_APPT_ID  =  F8
3  APPT_TYPE_CD  =  F8
3  APPT_TYPE_DESC  =  VC
3  BEG_DT_TM  =  DQ8
3  END_DT_TM  =  DQ8
3  SCH_STATE_CD  =  F8
3  SCH_STATE_DISP  =  VC
3  STATE_MEANING  =  VC
3  SCH_EVENT_ID  =  F8
3  SCHEDULE_SEQ  =  I4
3  SCHEDULE_ID  =  F8
3  LOCATION_CD  =  F8
3  APPT_REASON_FREE  =  VC
3  LOCATION_FREETEXT  =  VC
3  APPT_SYNONYM_CD  =  F8
3  APPT_SYNONYM_FREE  =  VC
3  DURATION  =  I4
3  SETUP_DURATION  =  I4
3  CLEANUP_DURATION  =  I4
3  APPT_SCHEME_ID  =  F8
3  REQ_PRSNL_ID  =  F8
3  REQ_PRSNL_NAME  =  VC
3  PRIMARY_RESOURCE_CD  =  F8
3  PRIMARY_RESOURCE_MNEM  =  VC
3  SLOT_TYPE_ID  =  F8
3  SLOT_MNEMONIC  =  VC
3  SLOT_SCHEME_ID  =  F8
3  DESCRIPTION  =  VC
3  APPLY_LIST_ID  =  F8
3  SLOT_STATE_CD  =  F8
3  SLOT_STATE_MEANING  =  VC
3  DEF_SLOT_ID  =  F8
3  APPLY_SLOT_ID  =  F8
3  BOOKING_ID  =  F8
3  CONTIGUOUS_IND  =  I2
3  BIT_MASK  =  I4
3  INTERVAL  =  I4
3  APPTTYPE_SEC_IND  =  I2
3  LOCATION_SEC_IND  =  I2
3  SLOTTYPE_SEC_IND  =  I2
3  ORDER_DIAGNOSIS  =  VC
3  QUAL_CNT  =  I4
3  PATIENT [*]
4  PERSON_ID  =  F8
4  NAME  =  VC
4  ENCNTR_ID  =  F8
4  PARENT_ID  =  F8
4  PERSON_HOM_PHONE  =  VC
4  PERSON_BUS_PHONE  =  VC
4  BIRTH_DT_TM  =  VC
3  DEF_QUAL_CNT  =  I4
3  DEF_QUAL [*]
4  APPT_DEF_ID  =  F8
4  BEG_DT_TM  =  DQ8
4  END_DT_TM  =  DQ8
4  DURATION  =  I4
4  SLOT_TYPE_ID  =  F8
4  SCH_FLEX_ID  =  F8
4  INTERVAL  =  I4
4  SLOT_MNEMONIC  =  VC
4  DESCRIPTION  =  VC
4  SLOT_SCHEME_ID  =  F8
4  SLOTTYPE_SEC_IND  =  I2
3  PATSEEN_DT_TM  =  DQ8
3  WAIT_TIME  =  VC
3  ANESTHESIA_TYPE  =  VC
3  PRIMARY_ORDER  =  VC
3  SCHEDULING_COMMENT  =  VC
3  COMMENT_SEC_IND  =  I2
3  BLOCK_SCHEDULE_IND  =  I2
1  STATUS_DATA
2  STATUS  =  C1
2  SUBEVENTSTATUS [1 ]
3  OPERATIONNAME  =  C25
3  OPERATIONSTATUS  =  C1
3  TARGETOBJECTNAME  =  C25
3  TARGETOBJECTVALUE  =  VC )

FREE SET T_RECORD

RECORD  T_RECORD  (
1  CURRENT_DT_TM  =  DQ8
1  DIAG_QUAL_ALLOC  =  I4
1  DIAG_QUAL_CNT  =  I4
1  DIAG_QUAL [*]
2  DIAGNOSIS_ID  =  F8 )

DECLARE  MAX_APPT_CNT  =  I4  WITH  PUBLIC , NOCONSTANT (0 )

DECLARE  MAX_APPT_TIME  =  I4  WITH  PUBLIC , NOCONSTANT (720 )

SET  T_RECORD -> CURRENT_DT_TM  =  CNVTDATETIME ( CURDATE ,  CURTIME3 )

DECLARE  T_GRANTED  =  I2  WITH  PRIVATE , NOCONSTANT (0 )

DECLARE  T_PERFORM_SECURITY  =  I2  WITH  PRIVATE , NOCONSTANT (0 )

DECLARE  T_INDEX  =  I4  WITH  PRIVATE , NOCONSTANT (0 )

DECLARE  VIEW_ACTION_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  APPTTYPE_TYPE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  LOCATION_TYPE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  SLOTTYPE_TYPE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  SECURED_APPTTYPE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  SECURED_APPTTYPE_DISP  =  VC  WITH  PUBLIC , NOCONSTANT

DECLARE  SECURED_LOCATION_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  SECURED_LOCATION_DISP  =  VC  WITH  PUBLIC , NOCONSTANT

DECLARE  SECURED_SLOTTYPE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  SECURED_SLOTTYPE_DISP  =  VC  WITH  PUBLIC , NOCONSTANT

DECLARE  PREF_TYPE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  COMMENTTEXTTYPECD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  COMMENTSUBTEXTCD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  APPTCOMM_TYPE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  DISVIEWLDUR_PREF_TYPE_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )

DECLARE  SYSTEM_DISVIEWLONGDUR  =  I2  WITH  PUBLIC , NOCONSTANT (0 )

SET  CDF_MEANING  = "VIEW"

 CALL GETCODEVALUE (16166 ,  CDF_MEANING ,  VIEW_ACTION_CD )

SET  CDF_MEANING  = "APPTTYPE"

 CALL GETCODEVALUE (16165 ,  CDF_MEANING ,  APPTTYPE_TYPE_CD )

SET  CDF_MEANING  = "APPTTYPE"

 CALL GETCODEVALUE (23011 ,  CDF_MEANING ,  SECURED_APPTTYPE_CD )

SET  SECURED_APPTTYPE_DISP  =  UAR_GET_CODE_DISPLAY ( SECURED_APPTTYPE_CD )

SET  CDF_MEANING  = "LOCATION"

 CALL GETCODEVALUE (16165 ,  CDF_MEANING ,  LOCATION_TYPE_CD )

SET  CDF_MEANING  = "LOCATION"

 CALL GETCODEVALUE (23011 ,  CDF_MEANING ,  SECURED_LOCATION_CD )

SET  SECURED_LOCATION_DISP  =  UAR_GET_CODE_DISPLAY ( SECURED_LOCATION_CD )

SET  CDF_MEANING  = "SLOTTYPE"

 CALL GETCODEVALUE (16165 ,  CDF_MEANING ,  SLOTTYPE_TYPE_CD )

SET  CDF_MEANING  = "SLOTTYPE"

 CALL GETCODEVALUE (23011 ,  CDF_MEANING ,  SECURED_SLOTTYPE_CD )

SET  SECURED_SLOTTYPE_DISP  =  UAR_GET_CODE_DISPLAY ( SECURED_SLOTTYPE_CD )

SET  CDF_MEANING  = "COMMENT"

 CALL GETCODEVALUE (15149 ,  CDF_MEANING ,  COMMENTTEXTTYPECD )

 CALL GETCODEVALUE (15589 ,  CDF_MEANING ,  COMMENTSUBTEXTCD )

SET  CDF_MEANING  = "APPTCOMM"

 CALL GETCODEVALUE (16165 ,  CDF_MEANING ,  APPTCOMM_TYPE_CD )

SET  CDF_MEANING  = "DISVIEWLDUR"

 CALL GETCODEVALUE (23010 ,  CDF_MEANING ,  DISVIEWLDUR_PREF_TYPE_CD )

SELECT  INTO "nl:"
A.PREF_ID
FROM (
 SCH_PREF  A
)
 PLAN ( A
WHERE (A.PREF_TYPE_CD= DISVIEWLDUR_PREF_TYPE_CD ) AND (A.PARENT_TABLE="SYSTEM" ) AND (A.PARENT_ID=0
) AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))


DETAIL
 SYSTEM_DISVIEWLONGDUR =A.PREF_VALUE
 WITH  NOCOUNTER

IF ( ( SYSTEM_DISVIEWLONGDUR >0 ) )
SET  MAX_APPT_TIME  = ( SYSTEM_DISVIEWLONGDUR *25 )
IF ( ( MAX_APPT_TIME >720 ) )
SET  MAX_APPT_TIME  = 720
ENDIF

ENDIF


IF ( ( REQUEST -> SECURED_SCHEME_IND =0 ) )
SET  CDF_MEANING  = "DEFSECSCHEME"
 CALL GETCODEVALUE (23010 ,  CDF_MEANING ,  PREF_TYPE_CD )
SELECT  INTO "nl:"
A.PREF_ID
FROM (
 SCH_PREF  A
)
 PLAN ( A
WHERE (A.PREF_TYPE_CD= PREF_TYPE_CD ) AND (A.PARENT_TABLE="SYSTEM" ) AND (A.PARENT_ID=0 ) AND (
A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))


DETAIL
 REQUEST -> SECURED_SCHEME_ID =A.PREF_VALUE
 WITH  NOCOUNTER
IF ( ( CURQUAL =0 ) )
SET  REQUEST -> SECURED_SCHEME_ID  = 0.0
ENDIF

ENDIF


SET  REPLY -> STATUS_DATA -> STATUS  = "F"

SET  REPLY -> QUAL_CNT  =  SIZE ( REQUEST -> QUAL , 5 )

SET  STAT  =  ALTERLIST ( REPLY -> QUAL ,  REPLY -> QUAL_CNT )

FOR (  I  = 1  TO  REPLY -> QUAL_CNT  )

SET  REPLY -> QUAL [ I ]-> RESOURCE_CD  =  REQUEST -> QUAL [ I ]-> RESOURCE_CD
SET  REPLY -> QUAL [ I ]-> QUAL_CNT  = 0

ENDFOR


SELECT  INTO "nl:"
D.SEQ,
R.PERSON_ID
FROM (
 DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUAL_CNT )
),
(
 SCH_RESOURCE  R
)
 PLAN ( D )
 AND ( R
WHERE (R.RESOURCE_CD= REPLY -> QUAL [D.SEQ]-> RESOURCE_CD ) AND (R.VERSION_DT_TM= CNVTDATETIME (
"31-DEC-2100 00:00:00.00" )) AND (R.ACTIVE_IND=1 ))


DETAIL
 REPLY -> QUAL [D.SEQ]-> PERSON_ID =R.PERSON_ID
 WITH  NOCOUNTER

IF (  REQUEST -> LOAD_BLOCK_SCHEDULE_IND  )
SET  TABLE_NAME  = "SCH_DATE_COMMENT"
SELECT  INTO "nl:"
D.SEQ,
A.DATE_COMMENT_ID
FROM (
 DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUAL_CNT )
),
(
 SCH_DATE_COMMENT  A
),
(
 SCH_ACTION  B
)
 PLAN ( D )
 AND ( A
WHERE (A.PARENT_ID= REPLY -> QUAL [D.SEQ]-> RESOURCE_CD ) AND (A.PARENT_TABLE="SCH_RESOURCE" ) AND (
 CNVTDATETIME ( REQUEST -> QUAL [D.SEQ]-> END_DT_TM )>A.BEG_DT_TM) AND ( CNVTDATETIME ( REQUEST ->
 QUAL [D.SEQ]-> BEG_DT_TM )<A.END_DT_TM) AND (A.TEXT_TYPE_MEANING="RESBLOCK" ) AND (
A.SUB_TEXT_MEANING="RESBLOCK" ) AND (A.STATE_MEANING="APPLIED" ))
 AND ( B
WHERE (B.PARENT_TABLE="SCH_DATE_COMMENT" ) AND (B.PARENT_ID=A.DATE_COMMENT_ID))


DETAIL
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT =( REPLY -> QUAL [D.SEQ]-> QUAL_CNT +1 ),

IF ( ( MOD ( REPLY -> QUAL [D.SEQ]-> QUAL_CNT , 10 )=1 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]
-> APPOINTMENT , ( REPLY -> QUAL [D.SEQ]-> QUAL_CNT +9 ))
ENDIF
,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> BLOCK_SCHEDULE_IND =1 ,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> BEG_DT_TM =
 CNVTDATETIME (A.BEG_DT_TM),
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> END_DT_TM =
 CNVTDATETIME (A.END_DT_TM),
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DURATION = ABS (
 DATETIMEDIFF ( CNVTDATETIME (A.BEG_DT_TM),  CNVTDATETIME (A.END_DT_TM), 4 )),
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> INTERVAL =5 ,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> SCHEDULING_COMMENT =
A.MNEMONIC,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPT_TYPE_DESC =
"Blocked Schedule" ,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPT_REASON_FREE =
 UAR_GET_CODE_DISPLAY (B.SCH_REASON_CD)
 WITH  NOCOUNTER
ENDIF


IF ( ( REQUEST -> DISVIEWPAT_IND !=1 ) )
DECLARE  DISVIEWPAT_IND  =  I2  WITH  PUBLIC , NOCONSTANT (0 )
DECLARE  DISVIEWPAT_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
DECLARE  DISVIEWPAT_MEANING  =  C12  WITH  PUBLIC , NOCONSTANT ("DISVIEWPAT" )
 CALL GETCODEVALUE (23010 ,  DISVIEWPAT_MEANING ,  DISVIEWPAT_CD )
SELECT  INTO "nl:"
A.PREF_ID
FROM (
 SCH_PREF  A
)
 PLAN ( A
WHERE (A.PREF_TYPE_CD= DISVIEWPAT_CD ) AND (A.PARENT_TABLE="SYSTEM" ) AND (A.PARENT_ID=0 ) AND (
A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))


DETAIL
 DISVIEWPAT_IND =A.PREF_VALUE
 WITH  NOCOUNTER
FOR (  I  = 1  TO  REPLY -> QUAL_CNT  )

SET  REQUEST -> QUAL [ I ]-> RESOURCE_IND  = 1
SET  REQUEST -> QUAL [ I ]-> PERSON_IND  = (1 - DISVIEWPAT_IND )

ENDFOR

ENDIF


DECLARE  BLOCKSCHEDULE_OVERLAP_IND  =  I2  WITH  PUBLIC , NOCONSTANT (0 )

SET  TABLE_NAME  = "SCH_APPT"

SELECT  INTO "nl:"
D.SEQ,
A.SCH_APPT_ID,
E.UPDT_CNT
FROM (
 SCH_APPT  A
),
(
 SCH_APPT_DEF  AD
),
(
 SCH_EVENT_DISP  E
),
(
 DUMMYT  D  WITH  SEQ = VALUE ( REPLY -> QUAL_CNT )
)
 PLAN ( D )
 AND ( A
WHERE (A.PERSON_ID BETWEEN  REPLY -> QUAL [D.SEQ]-> PERSON_ID  AND  REPLY -> QUAL [D.SEQ]->
 PERSON_ID ) AND (A.RESOURCE_CD BETWEEN  REQUEST -> QUAL [D.SEQ]-> RESOURCE_CD  AND  REPLY -> QUAL [
D.SEQ]-> RESOURCE_CD ) AND (A.BEG_DT_TM BETWEEN  CNVTDATETIME ( DATETIMEADD ( REQUEST -> QUAL [D.SEQ
]-> BEG_DT_TM ,  - (( MAX_APPT_TIME /24.0 )))) AND  CNVTDATETIME ( DATETIMEADD ( REQUEST -> QUAL [
D.SEQ]-> END_DT_TM ,  - ((1.0 /1440.0 ))))) AND (A.END_DT_TM BETWEEN  CNVTDATETIME ( DATETIMEADD (
 REQUEST -> QUAL [D.SEQ]-> BEG_DT_TM , (1.0 /1440.0 ))) AND  CNVTDATETIME ( DATETIMEADD ( REQUEST ->
 QUAL [D.SEQ]-> END_DT_TM , ( MAX_APPT_TIME /24.0 )))) AND  (( ((A.SCH_EVENT_ID+0 )>0 ) )  OR  ((
A.SLOT_STATE_MEANING!="REMOVED" ) ))  AND  (( (A.ROLE_MEANING="PATIENT" ) AND ( REQUEST -> QUAL [
D.SEQ]-> PERSON_IND =1 ) )  OR  ( (( (A.ROLE_MEANING= NULL ) )  OR  ((A.ROLE_MEANING!="PATIENT" )
 ))  AND ( REQUEST -> QUAL [D.SEQ]-> RESOURCE_IND =1 ) ))  AND (A.VERSION_DT_TM= CNVTDATETIME (
"31-DEC-2100 00:00:00.00" )) AND (A.ACTIVE_IND=1 ))
 AND ( AD
WHERE (AD.APPLY_DEF_ID=A.APPLY_DEF_ID) AND ( CNVTDATETIME ( T_RECORD -> CURRENT_DT_TM )>=
AD.VIS_BEG_DT_TM) AND ( CNVTDATETIME ( T_RECORD -> CURRENT_DT_TM )<AD.VIS_END_DT_TM) AND (
AD.DEF_STATE_MEANING!="REMOVED" ) AND (AD.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
 AND ( E
WHERE (E.SCH_EVENT_ID=A.SCH_EVENT_ID) AND  (( (E.SCHEDULE_ID=A.SCHEDULE_ID) )  OR  ((E.SCHEDULE_ID=
0 ) ))  AND (E.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))

ORDER BY D.SEQ,
A.SCH_APPT_ID,
 CNVTDATETIME (AD.BEG_DT_TM)

HEAD D.SEQ
 COUNT2 =0
HEAD A.SCH_APPT_ID
 BLOCKSCHEDULE_OVERLAP_IND =0 ,
IF ( ( REQUEST -> LOAD_BLOCK_SCHEDULE_IND =1 ) AND (A.SCH_EVENT_ID>0 ) )
FOR (  I  = 1  TO  REPLY -> QUAL [D.SEQ]-> QUAL_CNT  )

IF ( ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ I ]-> BLOCK_SCHEDULE_IND =0 ) )  I =( REPLY -> QUAL [
D.SEQ]-> QUAL_CNT +1 )
ELSEIF ( (A.BEG_DT_TM< REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ I ]-> END_DT_TM ) AND (A.END_DT_TM>
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ I ]-> BEG_DT_TM ) )  BLOCKSCHEDULE_OVERLAP_IND =1 ,  I =(
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT +1 )
ENDIF


ENDFOR

ENDIF
,
IF ( ( BLOCKSCHEDULE_OVERLAP_IND =0 ) )  REPLY -> QUAL [D.SEQ]-> QUAL_CNT =( REPLY -> QUAL [D.SEQ]->
 QUAL_CNT +1 ),
IF ( ( MOD ( REPLY -> QUAL [D.SEQ]-> QUAL_CNT , 10 )=1 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]
-> APPOINTMENT , ( REPLY -> QUAL [D.SEQ]-> QUAL_CNT +9 ))
ENDIF
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> SCH_APPT_ID =
A.SCH_APPT_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 BEG_DT_TM =A.BEG_DT_TM,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 END_DT_TM =A.END_DT_TM,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 SCH_STATE_CD =A.SCH_STATE_CD,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> STATE_MEANING =A.STATE_MEANING,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [
D.SEQ]-> QUAL_CNT ]-> SCH_EVENT_ID =A.SCH_EVENT_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> SCHEDULE_SEQ =A.SCHEDULE_SEQ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> SCHEDULE_ID =A.SCHEDULE_ID,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPT_TYPE_CD =0 ,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DURATION =A.DURATION,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> SETUP_DURATION =A.SETUP_DURATION,  REPLY ->
 QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> CLEANUP_DURATION =
A.CLEANUP_DURATION,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 APPT_SCHEME_ID =A.APPT_SCHEME_ID,
IF ( (AD.APPLY_DEF_ID>0 ) )  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT
]-> SLOT_TYPE_ID =AD.SLOT_TYPE_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> SLOT_MNEMONIC =AD.SLOT_MNEMONIC,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL
[D.SEQ]-> QUAL_CNT ]-> SLOT_SCHEME_ID =AD.SLOT_SCHEME_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DESCRIPTION =AD.DESCRIPTION,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> INTERVAL =AD.INTERVAL
ELSE   REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> SLOT_TYPE_ID =
A.SLOT_TYPE_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 SLOT_MNEMONIC =A.SLOT_MNEMONIC,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> SLOT_SCHEME_ID =A.SLOT_SCHEME_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> DESCRIPTION =A.DESCRIPTION,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> INTERVAL =0
ENDIF
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPLY_LIST_ID =
A.APPLY_LIST_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 SLOT_STATE_CD =A.SLOT_STATE_CD,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> SLOT_STATE_MEANING =A.SLOT_STATE_MEANING,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_SLOT_ID =A.DEF_SLOT_ID,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPLY_SLOT_ID =A.APPLY_SLOT_ID,  REPLY -> QUAL [
D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> BOOKING_ID =A.BOOKING_ID,  REPLY ->
 QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> CONTIGUOUS_IND =A.CONTIGUOUS_IND
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> BIT_MASK =A.BIT_MASK,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT =0 ,  REPLY ->
 QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL_CNT =0
ENDIF

HEAD AD.APPT_DEF_ID

IF ( ( BLOCKSCHEDULE_OVERLAP_IND =0 ) )  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]
-> QUAL_CNT ]-> DEF_QUAL_CNT =( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> DEF_QUAL_CNT +1 ),  T_DEF = REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ
]-> QUAL_CNT ]-> DEF_QUAL_CNT ,
IF ( ( MOD ( T_DEF , 10 )=1 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL , ( T_DEF +9 ))
ENDIF
,
IF ( (AD.APPLY_DEF_ID>0 ) )  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT
]-> DEF_QUAL [ T_DEF ]-> APPT_DEF_ID =AD.APPT_DEF_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY
-> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> BEG_DT_TM = CNVTDATETIME (AD.BEG_DT_TM),  REPLY
-> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> END_DT_TM
= CNVTDATETIME (AD.END_DT_TM),  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> DURATION =AD.DURATION,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> SLOT_TYPE_ID =AD.SLOT_TYPE_ID,  REPLY ->
 QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> SCH_FLEX_ID
=AD.SCH_FLEX_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 DEF_QUAL [ T_DEF ]-> INTERVAL =AD.INTERVAL,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [
D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> SLOT_MNEMONIC =AD.SLOT_MNEMONIC,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> DESCRIPTION =AD.DESCRIPTION
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]->
 SLOT_SCHEME_ID =AD.SLOT_SCHEME_ID
ELSE   REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]
-> APPT_DEF_ID =0 ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 DEF_QUAL [ T_DEF ]-> BEG_DT_TM = CNVTDATETIME (A.BEG_DT_TM),  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> END_DT_TM = CNVTDATETIME (A.END_DT_TM),
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]->
 DURATION =A.DURATION,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 DEF_QUAL [ T_DEF ]-> SLOT_TYPE_ID =A.SLOT_TYPE_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> SCH_FLEX_ID =0 ,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> INTERVAL =0 ,  REPLY ->
 QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]->
 SLOT_MNEMONIC =A.SLOT_MNEMONIC,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> DESCRIPTION =A.DESCRIPTION,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT
[ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> DEF_QUAL [ T_DEF ]-> SLOT_SCHEME_ID =A.SLOT_SCHEME_ID
ENDIF

ENDIF

DETAIL

IF ( ( BLOCKSCHEDULE_OVERLAP_IND =0 ) )
IF (  (( (E.SCHEDULE_ID=0 ) )  OR  ((E.SCHEDULE_ID=A.SCHEDULE_ID) ))  AND  (( (E.SCH_APPT_ID=0 ) )
 OR  ((E.SCH_APPT_ID=A.SCH_APPT_ID) ))  AND ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [
D.SEQ]-> QUAL_CNT ]-> DEF_QUAL_CNT =1 ) )
CASE ( E.DISP_FIELD_ID )
 OF 1 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 LOCATION_FREETEXT =E.DISP_DISPLAY,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> LOCATION_CD =
E.DISP_VALUE
 OF 2 :  T_INDEX =0 ,

FOR (  I  = 1  TO  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT  )

IF ( ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ I ]->
 PARENT_ID =E.PARENT_ID) )  T_INDEX = I
ENDIF


ENDFOR
,

IF ( ( T_INDEX =0 ) )  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT =( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT +1
),  T_INDEX = REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT ,
IF ( ( MOD ( T_INDEX , 10 )=1 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT , ( T_INDEX +9 ))
ENDIF
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 PERSON_ID =E.DISP_VALUE,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]
-> PATIENT [ T_INDEX ]-> NAME =E.DISP_DISPLAY,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL
[D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> PARENT_ID =E.PARENT_ID,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> ENCNTR_ID =0
ELSE   REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX
]-> PERSON_ID =E.DISP_VALUE,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> PATIENT [ T_INDEX ]-> NAME =E.DISP_DISPLAY
ENDIF

 OF 3 :  T_INDEX =0 ,

FOR (  I  = 1  TO  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT  )

IF ( ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ I ]->
 PARENT_ID =E.PARENT_ID) )  T_INDEX = I
ENDIF


ENDFOR
,

IF ( ( T_INDEX =0 ) )  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT =( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT +1
),  T_INDEX = REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT ,
IF ( ( MOD ( T_INDEX , 10 )=1 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT , ( T_INDEX +9 ))
ENDIF
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 PERSON_ID =0 ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT
[ T_INDEX ]-> NAME =E.DISP_DISPLAY,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> PATIENT [ T_INDEX ]-> PARENT_ID =E.PARENT_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> ENCNTR_ID =E.DISP_VALUE
ELSE   REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX
]-> ENCNTR_ID =E.DISP_VALUE
ENDIF

 OF 5 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 PRIMARY_RESOURCE_CD =E.DISP_VALUE,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PRIMARY_RESOURCE_MNEM =
E.DISP_DISPLAY
 OF 6 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPT_TYPE_DESC =
E.DISP_DISPLAY,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPT_TYPE_CD =
E.DISP_VALUE
 OF 7 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPT_SYNONYM_CD
=E.DISP_VALUE,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> APPT_SYNONYM_FREE =
E.DISP_DISPLAY
 OF 8 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> REQ_PRSNL_ID =
E.DISP_VALUE,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> REQ_PRSNL_NAME =
E.DISP_DISPLAY
 OF 9 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 APPT_REASON_FREE =E.DISP_DISPLAY
 OF 11 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PRIMARY_ORDER =
E.DISP_DISPLAY
 OF 13 :  T_INDEX =0 ,

FOR (  I  = 1  TO  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT  )

IF ( ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ I ]->
 PARENT_ID =E.PARENT_ID) )  T_INDEX = I
ENDIF


ENDFOR
,

IF ( ( T_INDEX =0 ) )  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT =( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT +1
),  T_INDEX = REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT ,
IF ( ( MOD ( T_INDEX , 10 )=1 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT , ( T_INDEX +9 ))
ENDIF
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 PERSON_ID =0 ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT
[ T_INDEX ]-> PERSON_HOM_PHONE =E.DISP_DISPLAY,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> PERSON_BUS_PHONE ="" ,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> BIRTH_DT_TM ="" ,  REPLY
-> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> NAME =""
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 PARENT_ID =E.PARENT_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 PATIENT [ T_INDEX ]-> ENCNTR_ID =0
ELSE   REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX
]-> PERSON_HOM_PHONE =E.DISP_DISPLAY
ENDIF

 OF 14 :  T_INDEX =0 ,

FOR (  I  = 1  TO  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT  )

IF ( ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ I ]->
 PARENT_ID =E.PARENT_ID) )  T_INDEX = I
ENDIF


ENDFOR
,

IF ( ( T_INDEX =0 ) )  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT =( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT +1
),  T_INDEX = REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT ,
IF ( ( MOD ( T_INDEX , 10 )=1 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT , ( T_INDEX +9 ))
ENDIF
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 PERSON_ID =0 ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT
[ T_INDEX ]-> PERSON_HOM_PHONE ="" ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> PATIENT [ T_INDEX ]-> BIRTH_DT_TM ="" ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY
-> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> PERSON_BUS_PHONE =E.DISP_DISPLAY,  REPLY ->
 QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> NAME ="" ,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 PARENT_ID =E.PARENT_ID,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 PATIENT [ T_INDEX ]-> ENCNTR_ID =0
ELSE   REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX
]-> PERSON_BUS_PHONE =E.DISP_DISPLAY
ENDIF

 OF 15 :  T_INDEX =0 ,

FOR (  I  = 1  TO  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT  )

IF ( ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ I ]->
 PARENT_ID =E.PARENT_ID) )  T_INDEX = I
ENDIF


ENDFOR
,

IF ( ( T_INDEX =0 ) )  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT =( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT +1
),  T_INDEX = REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT ,
IF ( ( MOD ( T_INDEX , 10 )=1 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY ->
 QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT , ( T_INDEX +9 ))
ENDIF
,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 PERSON_ID =0 ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT
[ T_INDEX ]-> PERSON_HOM_PHONE ="" ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> PATIENT [ T_INDEX ]-> PERSON_BUS_PHONE ="" ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [
 REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> NAME ="" ,  REPLY -> QUAL [D.SEQ]->
 APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]-> PARENT_ID =E.PARENT_ID,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 ENCNTR_ID =0
ENDIF
,
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATIENT [ T_INDEX ]->
 BIRTH_DT_TM = S_FORMAT_UTC_DATE (E.DISP_DT_TM,  VALIDATE (E.DISP_TZ, 0 ), ";4;q" )
 OF 27 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 ANESTHESIA_TYPE =E.DISP_DISPLAY
 OF 36 :  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> PATSEEN_DT_TM =
 CNVTDATETIME (E.DISP_DT_TM),
 REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> WAIT_TIME = CNVTSTRING (
 DATETIMEDIFF (E.DISP_DT_TM, A.BEG_DT_TM, 4 ))
 ENDCASE

ENDIF

ENDIF

FOOT  A.SCH_APPT_ID

IF ( ( MOD ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 DEF_QUAL_CNT , 10 )!=0 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL
[D.SEQ]-> QUAL_CNT ]-> DEF_QUAL ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> DEF_QUAL_CNT )
ENDIF
,
IF ( ( MOD ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]-> QUAL_CNT ,
10 )!=0 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]->
 QUAL_CNT ]-> PATIENT ,  REPLY -> QUAL [D.SEQ]-> APPOINTMENT [ REPLY -> QUAL [D.SEQ]-> QUAL_CNT ]->
 QUAL_CNT )
ENDIF

FOOT  D.SEQ

IF ( ( MOD ( REPLY -> QUAL [D.SEQ]-> QUAL_CNT , 10 )!=0 ) )  STAT = ALTERLIST ( REPLY -> QUAL [D.SEQ
]-> APPOINTMENT ,  REPLY -> QUAL [D.SEQ]-> QUAL_CNT )
ENDIF
,
IF ( ( REPLY -> QUAL [D.SEQ]-> QUAL_CNT > MAX_APPT_CNT ) )  MAX_APPT_CNT = REPLY -> QUAL [D.SEQ]->
 QUAL_CNT
ENDIF

 WITH  NOCOUNTER , RDBCBOREPARSE

FOR (  I  = 1  TO  REPLY -> QUAL_CNT  )

IF ( ( MOD ( REPLY -> QUAL [ I ]-> QUAL_CNT , 10 )!=0 ) )
SET  STAT  =  ALTERLIST ( REPLY -> QUAL [ I ]-> APPOINTMENT ,  REPLY -> QUAL [ I ]-> QUAL_CNT )
ENDIF


ENDFOR


# LOAD_DIAGNOSIS

IF ( ( REQUEST -> LOAD_ORDER_DIAG_IND =1 ) AND ( MAX_APPT_CNT >0 ) )
DECLARE  ORDER_ATTACH_CD  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
SET  CDF_MEANING  = "ORDER"
 CALL GETCODEVALUE (16110 ,  CDF_MEANING ,  ORDER_ATTACH_CD )
SET  T_RECORD -> DIAG_QUAL_ALLOC  = 25
SET  STAT  =  ALTERLIST ( T_RECORD -> DIAG_QUAL ,  T_RECORD -> DIAG_QUAL_ALLOC )
DECLARE  T_STRING  =  VC  WITH  PUBLIC , NOCONSTANT
DECLARE  T_TEMP  =  F8  WITH  PUBLIC , NOCONSTANT (0.0 )
SELECT  INTO "nl:"
D.SEQ
FROM (
 DUMMYT  D1  WITH  SEQ = VALUE ( REPLY -> QUAL_CNT )
),
(
 DUMMYT  D2  WITH  SEQ = VALUE ( MAX_APPT_CNT )
),
(
 SCH_EVENT_ATTACH  EA
),
(
 DCP_ENTITY_RELTN  DCP
),
(
 DIAGNOSIS  D
),
(
 NOMENCLATURE  N
)
 PLAN ( D1
WHERE ( REPLY -> QUAL [D1.SEQ]-> QUAL_CNT >0 ))
 AND ( D2
WHERE (D2.SEQ<= REPLY -> QUAL [D1.SEQ]-> QUAL_CNT ) AND ( REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [
D2.SEQ]-> SCH_EVENT_ID >0 ) AND ( REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [D2.SEQ]-> SCHEDULE_SEQ >0 ))
 AND ( EA
WHERE (EA.SCH_EVENT_ID= REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [D2.SEQ]-> SCH_EVENT_ID ) AND (
EA.ATTACH_TYPE_CD= ORDER_ATTACH_CD ) AND (EA.BEG_SCHEDULE_SEQ<= REPLY -> QUAL [D1.SEQ]->
 APPOINTMENT [D2.SEQ]-> SCHEDULE_SEQ ) AND (EA.END_SCHEDULE_SEQ>= REPLY -> QUAL [D1.SEQ]->
 APPOINTMENT [D2.SEQ]-> SCHEDULE_SEQ ) AND (EA.STATE_MEANING!="REMOVED" ) AND (EA.VERSION_DT_TM=
 CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
 AND ( DCP
WHERE (DCP.ENTITY1_ID=EA.ORDER_ID) AND (DCP.ENTITY_RELTN_MEAN="ORDERS/DIAGN" ) AND (DCP.ACTIVE_IND=
1 ))
 AND ( D
WHERE (D.DIAGNOSIS_ID=DCP.ENTITY2_ID) AND (D.ACTIVE_IND=1 ))
 AND ( N
WHERE (N.NOMENCLATURE_ID=D.NOMENCLATURE_ID))

ORDER BY D1.SEQ,
D2.SEQ,
DCP.RANK_SEQUENCE,
EA.ORDER_SEQ_NBR

HEAD D1.SEQ
 T_RECORD -> DIAG_QUAL_CNT =0
HEAD D2.SEQ
 T_RECORD -> DIAG_QUAL_CNT =0
DETAIL
 T_INDEX =0 ,

FOR (  I  = 1  TO  T_RECORD -> DIAG_QUAL_CNT  )

IF ( ( T_RECORD -> DIAG_QUAL [ I ]-> DIAGNOSIS_ID =D.DIAGNOSIS_ID) )  T_INDEX = I ,  I =( T_RECORD
-> DIAG_QUAL_CNT +1 )
ENDIF


ENDFOR
,

IF ( ( T_INDEX =0 ) )
IF ( (N.NOMENCLATURE_ID>0 ) AND (N.SOURCE_STRING>" " ) )  T_STRING =N.SOURCE_STRING
ELSE   T_STRING =D.DIAG_FTDESC
ENDIF
,
IF ( ( T_RECORD -> DIAG_QUAL_CNT =0 ) )  REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [D2.SEQ]->
 ORDER_DIAGNOSIS = TRIM ( T_STRING )
ELSE   REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [D2.SEQ]-> ORDER_DIAGNOSIS = CONCAT ( TRIM ( REPLY ->
 QUAL [D1.SEQ]-> APPOINTMENT [D2.SEQ]-> ORDER_DIAGNOSIS ), "; " ,  T_STRING )
ENDIF
,  T_RECORD -> DIAG_QUAL_CNT =( T_RECORD -> DIAG_QUAL_CNT +1 ),
IF ( ( T_RECORD -> DIAG_QUAL_CNT > T_RECORD -> DIAG_QUAL_ALLOC ) )  T_RECORD -> DIAG_QUAL_ALLOC =(
 T_RECORD -> DIAG_QUAL_ALLOC +25 ),  STAT = ALTERLIST ( T_RECORD -> DIAG_QUAL ,  T_RECORD ->
 DIAG_QUAL_ALLOC )
ENDIF
,  T_RECORD -> DIAG_QUAL [ T_RECORD -> DIAG_QUAL_CNT ]-> DIAGNOSIS_ID =D.DIAGNOSIS_ID
ENDIF

 WITH  NOCOUNTER
ENDIF


SELECT  INTO "nl:"
D1.SEQ,
D2.SEQ,
A.UPDT_CNT,
L.UPDT_CNT
FROM (
 DUMMYT  D1  WITH  SEQ = VALUE ( REPLY -> QUAL_CNT )
),
(
 DUMMYT  D2  WITH  SEQ = VALUE ( MAX_APPT_CNT )
),
(
 SCH_EVENT_COMM  A
),
(
 LONG_TEXT  L
)
 PLAN ( D1
WHERE ( REPLY -> QUAL [D1.SEQ]-> QUAL_CNT >0 ))
 AND ( D2
WHERE (D2.SEQ<= REPLY -> QUAL [D1.SEQ]-> QUAL_CNT ) AND ( REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [
D2.SEQ]-> SCH_EVENT_ID >0 ) AND ( REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [D2.SEQ]-> SCHEDULE_SEQ >0 ))
 AND ( A
WHERE (A.SCH_EVENT_ID= REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [D2.SEQ]-> SCH_EVENT_ID ) AND (
A.SCH_ACTION_ID=0 ) AND (A.TEXT_TYPE_CD= COMMENTTEXTTYPECD ) AND (A.SUB_TEXT_CD= COMMENTSUBTEXTCD )
 AND (A.VERSION_DT_TM= CNVTDATETIME ("31-DEC-2100 00:00:00.00" )))
 AND ( L
WHERE (L.LONG_TEXT_ID=A.TEXT_ID))


DETAIL
 REPLY -> QUAL [D1.SEQ]-> APPOINTMENT [D2.SEQ]-> SCHEDULING_COMMENT =L.LONG_TEXT
 WITH  NOCOUNTER

IF ( ( REQUEST -> SECURITY_IND =1 ) )
SET  T_PERFORM_SECURITY  = 0
FOR (  I  = 1  TO  REPLY -> QUAL_CNT  )

FOR (  J  = 1  TO  REPLY -> QUAL [ I ]-> QUAL_CNT  )

SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPTTYPE_SEC_IND  = 1
IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPT_TYPE_CD >0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPTTYPE_SEC_IND  =  UAR_SCH_SECURITY_INSERT_EX2 (
 REQINFO -> UPDT_ID ,  APPTTYPE_TYPE_CD ,  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPT_TYPE_CD ,
 VIEW_ACTION_CD , 0.0 ,  SCH_SECURITY_ID ,  REQINFO -> POSITION_CD )
IF ( ( SCH_SECURITY_ID =0.0 ) AND ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPTTYPE_SEC_IND =0 )
 )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPTTYPE_SEC_IND  = 2
SET  T_PERFORM_SECURITY  = 1
ENDIF

ENDIF

SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_SEC_IND  = 1
IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_CD >0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_SEC_IND  =  UAR_SCH_SECURITY_INSERT_EX2 (
 REQINFO -> UPDT_ID ,  LOCATION_TYPE_CD ,  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_CD ,
 VIEW_ACTION_CD , 0.0 ,  SCH_SECURITY_ID ,  REQINFO -> POSITION_CD )
IF ( ( SCH_SECURITY_ID =0.0 ) AND ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_SEC_IND =0 )
 )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_SEC_IND  = 2
SET  T_PERFORM_SECURITY  = 1
ENDIF

ENDIF

SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> COMMENT_SEC_IND  = 1
IF ( ( TEXTLEN ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SCHEDULING_COMMENT )>0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> COMMENT_SEC_IND  =  UAR_SCH_SECURITY_INSERT_EX2 (
 REQINFO -> UPDT_ID ,  APPTCOMM_TYPE_CD ,  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPT_TYPE_CD ,
 COMMENTSUBTEXTCD ,  VIEW_ACTION_CD ,  SCH_SECURITY_ID ,  REQINFO -> POSITION_CD )
IF ( ( SCH_SECURITY_ID =0.0 ) AND ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> COMMENT_SEC_IND =0 )
 )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> COMMENT_SEC_IND  = 2
SET  T_PERFORM_SECURITY  = 1
ENDIF

ENDIF

SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOTTYPE_SEC_IND  = 1
IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOT_TYPE_ID >0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOTTYPE_SEC_IND  =  UAR_SCH_SECURITY_INSERT_EX2 (
 REQINFO -> UPDT_ID ,  SLOTTYPE_TYPE_CD ,  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOT_TYPE_ID ,
 VIEW_ACTION_CD , 0.0 ,  SCH_SECURITY_ID ,  REQINFO -> POSITION_CD )
IF ( ( SCH_SECURITY_ID =0.0 ) AND ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOTTYPE_SEC_IND =0 )
 )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOTTYPE_SEC_IND  = 2
SET  T_PERFORM_SECURITY  = 1
ENDIF

ENDIF

FOR (  K  = 1  TO  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL_CNT  )

SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOTTYPE_SEC_IND  = 1
IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOT_TYPE_ID >0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOTTYPE_SEC_IND  =
 UAR_SCH_SECURITY_INSERT_EX2 ( REQINFO -> UPDT_ID ,  SLOTTYPE_TYPE_CD ,  REPLY -> QUAL [ I ]->
 APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOT_TYPE_ID ,  VIEW_ACTION_CD , 0.0 ,  SCH_SECURITY_ID ,
 REQINFO -> POSITION_CD )
IF ( ( SCH_SECURITY_ID =0.0 ) AND ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]->
 SLOTTYPE_SEC_IND =0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOTTYPE_SEC_IND  = 2
SET  T_PERFORM_SECURITY  = 1
ENDIF

ENDIF


ENDFOR


ENDFOR


ENDFOR

IF ( ( T_PERFORM_SECURITY =1 ) )
SET  T_GRANTED  =  UAR_SCH_SECURITY_PERFORM ()
FOR (  I  = 1  TO  REPLY -> QUAL_CNT  )

FOR (  J  = 1  TO  REPLY -> QUAL [ I ]-> QUAL_CNT  )

IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPTTYPE_SEC_IND =2 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPTTYPE_SEC_IND  =  UAR_SCH_CHECK_SECURITY_EX2 (
 REQINFO -> UPDT_ID ,  APPTTYPE_TYPE_CD ,  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPT_TYPE_CD ,
 VIEW_ACTION_CD , 0.0 ,  SCH_SECURITY_ID ,  REQINFO -> POSITION_CD )
ENDIF

IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_SEC_IND =2 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_SEC_IND  =  UAR_SCH_CHECK_SECURITY_EX2 (
 REQINFO -> UPDT_ID ,  LOCATION_TYPE_CD ,  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_CD ,
 VIEW_ACTION_CD , 0.0 ,  SCH_SECURITY_ID ,  REQINFO -> POSITION_CD )
ENDIF

IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> COMMENT_SEC_IND =2 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> COMMENT_SEC_IND  =  UAR_SCH_CHECK_SECURITY_EX2 (
 REQINFO -> UPDT_ID ,  APPTCOMM_TYPE_CD ,  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPT_TYPE_CD ,
 COMMENTSUBTEXTCD ,  VIEW_ACTION_CD ,  SCH_SECURITY_ID ,  REQINFO -> POSITION_CD )
ENDIF

IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOTTYPE_SEC_IND =2 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOTTYPE_SEC_IND  =  UAR_SCH_CHECK_SECURITY_EX2 (
 REQINFO -> UPDT_ID ,  SLOTTYPE_TYPE_CD ,  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOT_TYPE_ID ,
 VIEW_ACTION_CD , 0.0 ,  SCH_SECURITY_ID ,  REQINFO -> POSITION_CD )
ENDIF

FOR (  K  = 1  TO  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL_CNT  )

IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOTTYPE_SEC_IND =2 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOTTYPE_SEC_IND  =
 UAR_SCH_CHECK_SECURITY_EX2 ( REQINFO -> UPDT_ID ,  SLOTTYPE_TYPE_CD ,  REPLY -> QUAL [ I ]->
 APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOT_TYPE_ID ,  VIEW_ACTION_CD , 0.0 ,  SCH_SECURITY_ID ,
 REQINFO -> POSITION_CD )
ENDIF


ENDFOR


ENDFOR


ENDFOR

ENDIF

FOR (  I  = 1  TO  REPLY -> QUAL_CNT  )

FOR (  J  = 1  TO  REPLY -> QUAL [ I ]-> QUAL_CNT  )

IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOTTYPE_SEC_IND =0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SLOT_MNEMONIC  =  SECURED_SLOTTYPE_DISP
ENDIF

IF (  (( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPTTYPE_SEC_IND =0 ) )  OR  (( REPLY -> QUAL [
 I ]-> APPOINTMENT [ J ]-> LOCATION_SEC_IND =0 ) ))  )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPT_SYNONYM_FREE  =  SECURED_APPTTYPE_DISP
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPT_TYPE_DESC  =  SECURED_APPTTYPE_DISP
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> LOCATION_FREETEXT  = ""
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SCH_STATE_DISP  = ""
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> PRIMARY_RESOURCE_MNEM  = ""
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> REQ_PRSNL_NAME  = ""
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> APPT_REASON_FREE  = ""
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SCHEDULING_COMMENT  = ""
FOR (  K  = 1  TO  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> QUAL_CNT  )

SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> PATIENT [ K ]-> NAME  = ""
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> PATIENT [ K ]-> PERSON_HOM_PHONE  = ""
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> PATIENT [ K ]-> PERSON_BUS_PHONE  = ""
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> PATIENT [ K ]-> BIRTH_DT_TM  = ""

ENDFOR

ENDIF

IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> COMMENT_SEC_IND =0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> SCHEDULING_COMMENT  = ""
ENDIF

FOR (  K  = 1  TO  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL_CNT  )

IF ( ( REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOTTYPE_SEC_IND =0 ) )
SET  REPLY -> QUAL [ I ]-> APPOINTMENT [ J ]-> DEF_QUAL [ K ]-> SLOT_MNEMONIC  =
 SECURED_SLOTTYPE_DISP
ENDIF


ENDFOR


ENDFOR


ENDFOR

ENDIF


# EXIT_SCRIPT

IF ( ( FAILED = FALSE ) )
SET  REPLY -> STATUS_DATA -> STATUS  = "S"
ELSE
SET  REPLY -> STATUS_DATA -> STATUS  = "Z"
IF ( ( FAILED != TRUE ) )
CASE (  FAILED  )
 OF  SELECT_ERROR :
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONNAME  = "SELECT"
 ELSE
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONNAME  = "UNKNOWN"
 ENDCASE

SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> OPERATIONSTATUS  = "Z"
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> TARGETOBJECTNAME  = "TABLE"
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [1 ]-> TARGETOBJECTVALUE  =  TABLE_NAME
ENDIF

ENDIF


IF (  REQUEST -> CALL_ECHO_IND  )
 CALL ECHORECORD ( REPLY )
ENDIF

END GO
1)

131122:110315 M026751_DVD1               Cost 0.00 Cpu 0.03 Ela 0.02 Bio   0 Dio   0 O0M0R0 P1R0
