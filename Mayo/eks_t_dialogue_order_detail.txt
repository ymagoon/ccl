 ;;Solution_Test/script/Discern/eks_t_dialogue_order_detail/eks_t_dialogue_order_detail.prg Turn on black mode /*****************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 1984-1995 Cerner Corporation                 *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
  ~BE~***********************************************************************/
 
/*****************************************************************************
 
        Source file name:   EKS_T_DIALOGUE_ORDER_DETAIL.PRG
        object name:        EKS_T_DIALOGUE_ORDER_DETAIL
        Request #:          n/a
 
        Product:            Discern Expert
 
        Product Team:       CCL
 
        Program purpose:    This is the program called from Discern
                            Expert Templates that provide the following
                            variables:
 
 
                            This program is only for request 3072006
                            evoke template: <EKS_ORDER_DETAIL_E>
                            logic template: <EKS_ORDER_INCOMING_DETAIL_L>
 
            ORD_METHOD  (Required)
                        The method of retrieve orderables.
                        if it's in evoke template, the valid options are
                        that was ordered as	  - synonym_id
                        whose primary mnemonic is - catalog_cd
                        for any orderable	  - any
                        with drug class as
 
                        if it's in logic template, the valid options are
                        that was ordered as	  - synonym_id
                        whose primary mnemonic is - catalog_cd
                        for any orderable	  - any
                        with drug class as	  - drug class
 
            OPT_ORDERS  (Optional)
                        The valid options depend on the data type of
                        parameter ORD_METHOD
 
            ORD_METHOD                  OPT_ORDERS
            -------------------------   -----------------------------------------
            that was ordered as      -> mnemonic from order_catalog_synonym
            whose primary mnemonic is-> primary_mnemonic from order_catalog
            for any orderable	     -> * optional
            with drug class as	     -> category_name from multum_drug_categories
 
            ORDER_DETAIL    (Required)
                            It retrieves two layers of Ref. help.
 
                -----------    ---------------------------------------------------
                Order Entry -> Description from order_entry_fields table,
                               pass oe_field_meaning from oe_field_meaning table
                Order List  -> Activity Type     (activityTypeCd)
                               Activity Sub Type (activitySubTypeCd)
                               Catalog Code      (catalog_code + CatalogCd)
                               Catalog Type      (catalogTypeCd)
                               Order Provider    (physician)
                               Synonym Id        (synonym_code + SynonymId)
 
            QUALIFIER   (Requried)
                        The valid options depend on the data type of
                        parameter ORDER_DETAIL
 
                Data Type                        Qualifier
				------------------------------   --------------------------
                String, Identifier or Boolean -> is listed in
                                                 is not listed in
                Number, Date&Time             -> is euqal to
                                                 is not equal to
                                                 is less than
                                                 is less than or equal to
                                                 is greater than
                                                 is greater than or equal to
                                                 is between
                                                 is outside
                                                 is defined                   ;011
                                                 is not defined		          ;011
                                                 is not defined or n          ;011
                                                 is defined but not listed in ;011
 
            LIST1   (Requried)
                    The valid options depend on the data type of
                    parameter ORDER_DETAIL
 
                Data Type       List1
                ------------    ---------------------------------------
                Identifier      all the valid code value by the code set
                String          <new string>
                Number          <new number>
                Boolean         Yes/True or No/False
                Date & Time     Today+days, Today-days,
                                Now+minutes or Now-minutes
 
            OPT_LIST2   (Optional)
                        If the parameter QUALIFIER is between or outside,then the
                        OPT_LIST2 will be requried. The valid options depend on
                        the data type of parameter ORDER_DETAIL
 
                Data Type       List1
                ------------    --------------------------
                Number          <new number>
                Date & Time     Today+days, Today-days,
                                Now+minutes or Now-minutes
 
        Executing from:	EKS Templates only
 
        Special Notes:  This program must be executed from Discern
                        Expert Templates only.  All parameters must
                        exist and the parameters noted above
                        as required, must be set
                        or this program will set the template's
                        sretval to fail(-1).
 
******************************************************************************/
 
;~DB~**************************************************************************
;    *                      GENERATED MODIFICATION CONTROL LOG                *
;    **************************************************************************
;    *                                                                        *
;    *Mod Date     Engineer             Comment                               *
;    *--- -------- -------------------- ------------------------------------- *
;     001 01/07/02 ry4174               Initial Release                       *
;     002 03/26/02 ry4174               LINK parameter added                  *
;     003 04/11/02 ry4174               add @ function in LIST1 & OPT_LIST2   *
;     004 10/03/02 CERKYH               Rev 8 Multum table name changes       *
;     005 12/31/02 RY4174               Rev 8 Multum table name changes       *
;     006 02/24/03 ry4174               Multum table change again             *
;     007 09/29/03 cerkyh               Add ORD_METHOD of "with drug class as"*
;     008 03/11/04 cerkyh               Fixes for sub-class evaluation        *
;     009 08/18/05 ry4174               return 0 when SPIndex record is empty *
;     010 11/22/05 ry4174               also check cnt_ingredient is empty    *
;     011 09/13/06 vc4308               add Find_Not_Defined subroutine       *
;     012 03/10/08 ry4174               logic error                           *
;     013 09/03/08 ry4174               logic correction for mod012           *
;     014 04/14/09 ry4174               date time display                     *
;     015 04/29/09 ry4174               cnvtstring issue correction           *
;     016 09/18/09 ry4174               typo found                            *
;     017 05/03/10 ry4174               add order_id into eksdata if there is *
;                                       only one order_id                     *
;     018 07/28/11 vc4308               added Check_Orderable subroutine      *
;     019 11/17/11 vc4308               Modified Check_Orderable subroutine   *
;                                       to return true when                   *
;                                       recOPT_ORDERSlist->cnt = 0.           *
;                                       Added a check for empty OPT_ORDERS    *
;     020 08/23/12 ry4174               logic correction for not listed in    *
;     021 01/15/14 ry4174               for all action types passing and new  *
;                                       EKS_ORDER_ACTION_DETAIL_E, and        *
;                                       EKS_ORDER_ACTION_INC_DETAIL_L;        *
;     022 08/05/13 ry4174               add size checking for empty parameter *
;     023 04/09/14 ry4174               logic error correction                *
;     024 04/23/15 ry4174               qualified data for multi-ingred order *
;~DE~**************************************************************************
 
drop program EKS_T_DIALOGUE_ORDER_DETAIL:dba go
create program EKS_T_DIALOGUE_ORDER_DETAIL:dba
 
%i cclsource:eks_sub_record.inc
 
declare strMsg = vc with public, noconstant("")		; message
declare intRetVal = i2 with public, noconstant(0)	; return value
 
;021 begin
declare douDeleteCd = f8 with protect, noconstant(0.00)
declare douCancelCd = f8 with protect, noconstant(0.00)
declare douSuspendCd = f8 with protect, noconstant(0.00)
declare douCompleteCd = f8 with protect, noconstant(0.00)
declare douDiscontinueCd = f8 with protect, noconstant(0.00)
declare douTransderCanCd = f8 with protect, noconstant(0.00)
 
declare SetupRecNewActionType(_val) = null
 
call echo(concat(format(curdate, "dd-mmm-yyyy;;d")," ",format(curtime3, "hh:mm:ss.cc;3;m"),
	"  *******  Beginning of Program EKS_T_DIALOGUE_ORDER_DETAIL *********"),1,0)
%i cclsource:eks_tell_ekscommon.inc
 
record recNewActionTypeList
(
	1 cnt = i4
	1 qual[*]
		2 value = vc
		2 display = vc
)
 
if ( Validate(tname, "Y") = "Y" and Validate(tname, "Z") = "Z" )
	declare iNewTemplateInd = i2 with protect,noconstant(0)
	call echo("tname is not validate")
	set iNewTemplateInd = 0
	call SetupRecNewActionType(0)
else
	if (cnvtupper(trim(tname)) in ("EKS_ORDER_E", "EKS_ORDER_DETAIL_E", "EKS_ORDER_INC_ADDL_DETAIL_L",
		"EKS_ORDER_INCOMING_DETAIL_L", "EKS_ORDER_INCOMING_L", "EKS_ORDER_MED_INCOMING_L") )
		declare iNewTemplateInd = i2 with protect,noconstant(0)
		set iNewTemplateInd = 0
		call SetupRecNewActionType(0)
	endif
endif
 
subroutine SetupRecNewActionType(_val)
	set iNewTemplateInd = 0
 
	set douDeleteCd = UAR_GET_CODE_BY ("MEANING", 6003, "DELETE")
	set douCancelCd = UAR_GET_CODE_BY ("MEANING", 6003, "CANCEL")
	set douSuspendCd = UAR_GET_CODE_BY ("MEANING", 6003, "SUSPEND")
	set douCompleteCd = UAR_GET_CODE_BY ("MEANING", 6003, "COMPLETE")
	set douDiscontinueCd = UAR_GET_CODE_BY ("MEANING", 6003, "DISCONTINUE")
	set douTransderCanCd = UAR_GET_CODE_BY ("MEANING", 6003, "TRANSFER/CAN")
 
	call echo("This is the old template and the following action will not be triggered via syn event rule")
	call echo("recNewActionTypeList")
	set recNewActionTypeList->cnt = 6
	set stat = alterlist(recNewActionTypeList->qual, recNewActionTypeList->cnt)
 
	set recNewActionTypeList->qual[1].value = cnvtstring(douDeleteCd,25,1)
	set recNewActionTypeList->qual[1].display = "DELETE"
	set recNewActionTypeList->qual[2].value = cnvtstring(douCancelCd,25,1)
	set recNewActionTypeList->qual[2].display = "CANCEL"
	set recNewActionTypeList->qual[3].value = cnvtstring(douSuspendCd,25,1)
	set recNewActionTypeList->qual[3].display = "SUSPEND"
	set recNewActionTypeList->qual[4].value = cnvtstring(douCompleteCd,25,1)
	set recNewActionTypeList->qual[4].display = "COMPLETE"
	set recNewActionTypeList->qual[5].value = cnvtstring(douDiscontinueCd,25,1)
	set recNewActionTypeList->qual[5].display = "DISCONTINUE"
	set recNewActionTypeList->qual[6].value = cnvtstring(douTransderCanCd ,25,1)
	set recNewActionTypeList->qual[6].display = "TRANSFER/CAN"
 
	call echo("recNewActionTypeList")
	call echo("Param   Value                                                        Display")
	call echo("-----   -----                                                        -------")
	for (i = 1 to recNewActionTypeList->cnt)
		call echo(concat(format(i,"#####"), "   ",
			format(recNewActionTypeList->qual[i].value,
			"##########################################################"), "   ",
			format(recNewActionTypeList->qual[i].display,
			"##########################################################")   ))
	endfor
end ;end of subroutine SetupRecNewActionType
 
;declare all the subroutine in the program
 
;021 begin ;move to top
record SPIndex(
	1 cnt = i2
	1 qual[*]
		2 Index = i4
		2 NewActionInd = i2 ;021
		2 IngInd = i2
		2 cnt_Ingredient = i2
		2 qual_Ingredient[*]
			3 Index_Ingredient = i4
)
 
record recOPT_ORDERSlist
(
	1 cnt = i4
	1 qual[*]
		2 value = vc
		2 display = vc
)
 
declare intOrdMethod_indx = i2 with public, noconstant(0)	; index of parameter - Ord_Method
 
declare iSizeOrderListCnt = i2 with protect,noconstant(0)
declare iMatchCnt = i2 with protect,noconstant(0)
declare iNewActionInd = i2 with protect,noconstant(0)
declare iAllNewActionInd = i2 with protect,noconstant(0)
declare iNewActionOldTemplateInd = i2 with protect,noconstant(0)
declare iActionTypeALLInd = i2 with protect,noconstant(0)
declare iSkipDetailInd = i2 with protect,noconstant(0)
declare iForAnyOrderInd = i2 with protect,noconstant(0)
 
declare GetCatalogCdforDrugClass(_val) = null ; subroutine to get category cd for drug class
 
call echo(concat("iNewTemplateInd: ", build(iNewTemplateInd)))
 
if (iNewTemplateInd = 0)
 
	call echo(concat("ORD_METHOD: ", build(ORD_METHOD)))
 
	if (cnvtlower(trim(ORD_METHOD,3)) != "none")
		set iSizeOrderListCnt = size(request->orderlist,5)
		set i = 0
		set j = 0
		for (i=1 to iSizeOrderListCnt)
			for (j = 1 to recNewActionTypeList->cnt)
				if (request->orderlist[i].actionTypeCd = cnvtreal(recNewActionTypeList->qual[j].value) )
					set iMatchCnt = iMatchCnt + 1
					set iNewActionInd = 1
					set j = recNewActionTypeList->cnt + 1
				endif ;end of actionTypeCd
			endfor ;end of j
		endfor ;end of i
 
		call echo(Concat("iMatchCnt: ", build(iMatchCnt), "    iSizeOrderListCnt: ", build(iSizeOrderListCnt)))
 
		if (iMatchCnt = iSizeOrderListCnt)
			call echo("all new Action Type")
			set iAllNewActionInd = 1
			set iNewActionOldTemplateInd = 1
		endif
	else
		set iNewTemplateInd = 2 ;for EKS_ORDER_INC_ADDL_DETAIL_L
	endif ;end of ORD_METHOD
 
else
	if (cnvtlower(trim(ORD_METHOD,3)) = "for any orderable")
		set iForAnyOrderInd = 1
		set intOrdMethod_indx = 3
	endif
 
	call echo("Parameter ORDER_ACTION - ")
	record recORDER_ACTIONlist
	(
		1 cnt = i4
		1 qual[*]
			2 value = vc
			2 display = vc
	)
	set orig_param = ORDER_ACTION
	execute eks_t_parse_list with replace(reply, recORDER_ACTIONlist)
	free set orig_param
 
	if (recORDER_ACTIONlist->cnt <= 0)
		set strMsg = "ORDER ACTION List is empty"
		set intRetVal = -1
		go to EndProgram
	else
		for (i = 1 to recORDER_ACTIONList->cnt)
			if ( cnvtupper(trim(recORDER_ACTIONlist->qual[i].display)) = "*ALL" )
				if (recORDER_ACTIONlist->cnt > 1)
					set strMsg = "If *ALL is used, then only one value can be specified."
					set intRetVal = -1
					go to EndProgram
				else
					set iActionTypeALLInd = 1
				endif ;end of recORDER_ACTIONlist->cnt
			endif ;end of *ALL
		endfor ;end of recORDER_ACTIONList->cnt
		call echo(concat("iActionTypeALLInd: ", build(iActionTypeALLInd)))
	endif ;end of recORDER_ACTIONlist->cnt
 
 	call echo(concat("OPT_ORDER_DETAIL: ", build(ORDER_DETAIL)))
 
	;022 if ( cnvtlower(trim(ORDER_DETAIL)) = "<undefined>" )
	if ( cnvtlower(trim(ORDER_DETAIL)) = "<undefined>" or size(trim(ORDER_DETAIL)) = 0) ;022
		call echo("OPT_ORDER_DETAIL is not specified")
 
		call echo(concat("Parameter OPT_QUALIFIER - ", build(QUALIFIER)))
		;022 if (cnvtlower(trim(QUALIFIER)) = "<undefined>" )
		if ( cnvtlower(trim(ORDER_DETAIL)) = "<undefined>" or size(trim(QUALIFIER)) = 0) ;022
			call echo("OPT_ORDER_DETAIL & OPT_QUALIFIER are not specified")
 
			call echo(concat("Parameter OPT_LIST1 - ", build(LIST1)))
			;022 if (cnvtlower(trim(LIST1)) = "<undefined>" )
			if ( cnvtlower(trim(LIST1)) = "<undefined>" or size(trim(LIST1)) = 0) ;022
				call echo("OPT_ORDER_DETAIL, OPT_QUALIFIER & LIST1 is not specified")
 
				call echo(concat("Parameter OPT_LIST2 - ", build(OPT_LIST2)))
				;022 if (cnvtlower(trim(OPT_LIST2)) = "<undefined>" )
				if ( cnvtlower(trim(OPT_LIST2)) = "<undefined>" or size(trim(OPT_LIST2)) = 0) ;022
					call echo("OPT_ORDER_DETAIL, OPT_QUALIFIER, OPT_LIST1 & OPT_LIST2 is not specified")
					set iSkipDetailInd = 1
				else
					set strMsg = "OPT_LIST2 should be empty since OPT_LIST1, OPT_QUALIFIER and OPT_ORDER_DETAIL are empty"
					set intRetVal = -1
					go to EndProgram
				endif ;end of OPT_LIST2
			else
				set strMsg = "OPT_LIST1 should be empty since OPT_QUALIFIER & OPT_ORDER_DETAIL are empty"
				set intRetVal = -1
				go to EndProgram
			endif ;end of OPT_LIST1
		else
			set strMsg = "OPT_QUALIFIER should be empty since OPT_ORDER_DETAIL is empty"
			set intRetVal = -1
			go to EndProgram
		endif ;end of OPT_QUALIFIER
	endif ;end of OPT_ORDER_DETAIL
 
 	call echo(concat("iForAnyOrderInd: ", build(iForAnyOrderInd), "  iActionTypeALLInd: ", build(iActionTypeALLInd),
 		"   iSkipDetailInd: ", build(iSkipDetailInd)))
 
	;022 if (iForAnyOrderInd = 1 and iActionTypeALLInd = 1 and iSkipDetailInd=1)
	if (iForAnyOrderInd = 1 and iSkipDetailInd=1) ;022
		set intRetVal = 1
		set retval = 100
		set SPIndex->cnt = size(request->orderlist,5)
		set stat = alterlist(SPINDEX->qual,SPIndex->cnt)
		for (i=1 to size(request->orderlist,5))
			set SPIndex->qual[i].Index = i
			set SPIndex->qual[i].NewActionInd = 1
 
			set SPIndex->qual[i].cnt_Ingredient = size(request->orderList[i].IngredientList,5)
			if (SPIndex->qual[i].cnt_Ingredient > 0)
				set stat = alterlist(SPINDEX->qual[i].qual_Ingredient,SPIndex->qual[i].cnt_Ingredient)
				set SPIndex->qual[i].IngInd = 1
				for (j=1 to size(request->orderlist[i]->ingredientList,5))
					set SPIndex->qual[i].qual_Ingredient[j].Index_Ingredient = j
				endfor ;end of j
			endif ;end of cnt_ingredient
		endfor ;end of i
 
		go to EndProgram
 
 	elseif (iForAnyOrderInd = 0 and iSkipDetailInd = 1)
 
		call echo("Parameter OPT_ORDERS - ")
		set orig_param = OPT_ORDERS
		execute eks_t_parse_list with replace(reply, recOPT_ORDERSlist)
		free set orig_param
 
		;"whose primary mnemonic is", "for any orderable", "with drug class as", "none"))
		if (cnvtlower(trim(ORD_METHOD,3)) = "with drug class as")
			set intOrdMethod_indx = 4
			call GetCatalogCdforDrugClass(0)
		elseif (cnvtlower(trim(ORD_METHOD,3)) = "whose primary mnemonic is")
			set intOrdMethod_indx = 2
		elseif (cnvtlower(trim(ORD_METHOD,3)) = "that was ordered as")
			set intOrdMethod_indx = 1
		else
			set msg = "invalid ORD_METHOD"
			set RetVal = -1
			go to EndProgram
		endif
 
 		call CheckOrdersWODetail(0)
 
	endif
endif ;end of ActionType
 
subroutine GetCatalogCdforDrugClass(_val)
 
	call echo("...... calling GetCatalogCdforDrugClass .....")
	if (validate(eksDrugClassEx->cnt,-1) = -1)
		set msg = "Drug Classes were not exploded out by the Expert Server."
		set RetVal = -1
		go to EndProgram
	endif
 
	set classFnd = 0
 
	; Hidden value could be *13\1 or just *13.
	for (iclass = 1 to recOPT_ORDERSlist->cnt)
	;  *13\1  13 is the sub class we are interested in, not 1....
		if (findstring("*", recOPT_ORDERSlist->qual[iclass].value))
			set islash = findstring("\", recOPT_ORDERSlist->qual[iclass].value)
			if (islash)
				set recOPT_ORDERSlist->qual[iclass].value =
					substring(2, (islash - 2), recOPT_ORDERSlist->qual[iclass].value)
			else
				set recOPT_ORDERSlist->qual[iclass].value =
					substring(2, (size(recOPT_ORDERSlist->qual[iclass].value) - 1),
					recOPT_ORDERSlist->qual[iclass].value)
			endif
			call echo(concat("Drug Category ID was reset to ", recOPT_ORDERSlist->qual[iclass].value))
		endif ;end of findstring "*"
	endfor
 
	select distinct into "nl:"
		cat_cd = eksDrugClassEx->qual[d2.seq].catalog_cd
		,cat_id = eksDrugClassEx->qual[d2.seq].category_id
	from
		(dummyt d1 with seq = value(recOPT_ORDERSList->cnt))
		,(dummyt d2 with seq = value(eksDrugClassEx->cnt))
	plan d1
	join d2 where cnvtreal(recOPT_ORDERSList->qual[d1.seq].value) =
		eksDrugClassEx->qual[d2.seq].category_id
	order cat_cd
	head report
		recOPT_ORDERSList->cnt = 0
	detail
		classFnd = 1
		recOPT_ORDERSList->cnt = recOPT_ORDERSList->cnt + 1
		if (mod(recOPT_ORDERSList->cnt, 100) = 1)
			stat = alterlist(recOPT_ORDERSList->qual, recOPT_ORDERSList->cnt + 99)
		endif
		recOPT_ORDERSList->qual[recOPT_ORDERSList->cnt].value = trim(cnvtstring(cat_cd,25,1))	;019
		recOPT_ORDERSList->qual[recOPT_ORDERSList->cnt].display = uar_get_code_display(cat_cd)
	foot report
		stat = alterlist(recOPT_ORDERSList->qual, recOPT_ORDERSList->cnt)
		call echo(concat("Classes mapped to ", build(recOPT_ORDERSList->cnt), " catalog_cd's"))
	with nocounter
 
	if (classFnd)
		set intOrdMethod_indx = 2  ;reset to evaluate by catalog_cd
	else
		set msg = "No orders were found in the specified drug classes."
		set retval = -1
		go to EndProgram
	endif
end ;end of subroutine
 
subroutine CheckOrdersWODetail(_val)
 	call echo("calling subroutine CheckOrdersWODetail")
 
 	declare iSizeOfOrderList = i4 with private, noconstant(0)
 	declare iSizeOfIngredList = i4 with private, noconstant(0)
 
 	declare iOLCnt = i2 with private, noconstant(0)
 	declare iINCnt = i2 with private, noconstant(0)
 
 	set iSizeOfOrderList = size(request->OrderList,5)
	for (i=1 to size(request->OrderList,5))
		set iOLCnt = iOLCnt + 1
		set iSizeOfIngredList = size(request->OrderList[i]->IngredientList,5)
 
		if (iSizeOfIngredList > 0)
			for (j=1 to size(request->OrderList[i]->IngredientList,5))
 
 				for (iOS = 1 to recOPT_ORDERSlist->cnt)
 					if (intOrdMethod_indx = 1) ;synonym
 						if (request->orderlist[i]->ingredientList[j].synonymid = cnvtreal(recOPT_ORDERSlist->qual[iOS].value))
 							set iINCnt = iINCnt + 1
							set SPIndex->cnt = iOLCnt
							set stat = alterlist(SPIndex->qual, SPIndex->cnt)
							set SPIndex->qual[SPIndex->cnt].Index = i
							set SPIndex->qual[SPIndex->cnt].cnt_Ingredient = iINCnt
							set stat = alterlist(SPIndex->qual[SPIndex->cnt]->qual_Ingredient,
								SPIndex->qual[SPIndex->cnt].cnt_Ingredient)
					set SPIndex->qual[SPIndex->cnt].qual_Ingredient[SPIndex->qual[SPIndex->cnt].cnt_Ingredient].Index_Ingredient
							= j
 
							set SPIndex->qual[SPIndex->cnt].IngInd = 1 ;023
						endif
 					elseif (intOrdMethod_indx = 2) ;catalog
  						if (request->orderlist[i]->ingredientList[j].catalogcd = cnvtreal(recOPT_ORDERSlist->qual[iOS].value))
 							set iINCnt = iINCnt + 1
							set SPIndex->cnt = iOLCnt
							set stat = alterlist(SPIndex->qual, SPIndex->cnt)
							set SPIndex->qual[SPIndex->cnt].Index = i
							set SPIndex->qual[SPIndex->cnt].cnt_Ingredient = iINCnt
							set stat = alterlist(SPIndex->qual[SPIndex->cnt]->qual_Ingredient,
								SPIndex->qual[SPIndex->cnt].cnt_Ingredient)
					set SPIndex->qual[SPIndex->cnt].qual_Ingredient[SPIndex->qual[SPIndex->cnt].cnt_Ingredient].Index_Ingredient
							= j
 
							set SPIndex->qual[SPIndex->cnt].IngInd = 1 ;023
						endif
 					endif ;end of intOrdMethod_indx
 				endfor ;end of iOS
 			endfor ;end of j
 
 		else
 			if (intOrdMethod_indx = 1) ;synonym
 				for (iOS = 1 to recOPT_ORDERSlist->cnt)
 					if (request->orderlist[i].synonym_code = cnvtreal(recOPT_ORDERSlist->qual[iOS].value))
 						set SPIndex->cnt = SPIndex->cnt + 1
 						set stat = alterlist(SPIndex->qual, SPIndex->cnt)
 						set SPIndex->qual[SPIndex->cnt].Index = i
 						set SPIndex->qual[SPIndex->cnt].IngInd = 0
 						set SPIndex->qual[SPIndex->cnt].cnt_Ingredient = 0
 					endif
 				endfor ;end of iOS
 			elseif (intOrdMethod_indx = 2) ;catalogcd
 				for (iOS = 1 to recOPT_ORDERSlist->cnt)
 					if (request->orderlist[i].catalog_code = cnvtreal(recOPT_ORDERSlist->qual[iOS].value))
 						set SPIndex->cnt = SPIndex->cnt + 1
 						set stat = alterlist(SPIndex->qual, SPIndex->cnt)
 						set SPIndex->qual[SPIndex->cnt].Index = i
 						set SPIndex->qual[SPIndex->cnt].IngInd = 0
 						set SPIndex->qual[SPIndex->cnt].cnt_Ingredient = 0
 					endif
 				endfor ;end of iOS
 			endif ;end of intOrdMethod_indx
 		endif
	endfor ;end of i
 
	if (SPIndex->cnt > 0)
		set intRetVal = 1
		set retval = 100
	endif
	go to EndProgram
end ;end of subroutine
;021 end
 
declare GetCategoryId(dou_subParent=f8, dou_subChild=f8) = null ; subroutine to get category id with two parameters
declare ReduceDuplicate(douCheckId=f8, intCntLoop=i2) = null    ; subroutine to remove the duplicated order id with two parameters
declare Comparison(intOrdMethod_indx=i2, strRequestType=vc, strFieldName=vc, strFieldType=vc, strQualifier=vc,
        strValue1=vc, strValue2=vc, intIngredientInd = i4, intOrderIndex=i4, intIngredientIndex=i4) = null
declare DateTimeConvert(strDateTime=vc, intPara=i4) = null      ; date & time convention
declare intV500Data_ind = i2 with public, noconstant(0)        ; integer of V500_REF indicator - 1=V500_REF, 0=V500
 
; 011
declare Find_Not_Defined(intOrdMethod_indx=i2, strRequestType=vc, strFieldName=vc, strFieldType=vc, strQualifier=vc,
        intIngredientInd = i4, intOrderIndex=i4, intIngredientIndex=i4) = null
declare FND_continue = i2	; indicator to continue to Comparison subroutine after Find_Not_Defined subroutine
; end of 011
 
; 018
declare Check_Orderable(intOrdMethod_indx=i2, intIngredientInd = i4, intOrderIndex=i4, intIngredientIndex=i4) = null
declare Found_Ord_ind = i1	; indicates orderable match for Find_Not_Defined
; end of 018
 
;005 BEGIN
declare intV500Rev8_id = i2 with noconstant(0)
	; 1 - not rev8 with V500
	; 2 - not rev8 with V500_REF
	; 3 - rev8 table name without 'u'
	; 4 - rev8 table name with 'u'
 
;006 begin
if (validate(eksmultum_def,-1) = -1)
	set intRetVal = -1
	set strMsg = "No eksmultum_def set up in eks_startup.prg"
	go to EndProgram
endif
call echo(concat("eksmultum_def from eks_startup: ", build(eksmultum_def)))
 
/*  This record structure is filled by the EKS_STARTUP program and is used during the
    drug class evaluation.
 
record eksDrugClassEx
(
	1 cnt       = i4
	1 qual[*]
		2 category_id   = f8
		2 catalog_cd    = f8
)
*/
/*
if (currev < 8)
	if (validate(eksmultum_def,-1) = 1)
		;not rev8 with V500
		set intV500Rev8_id = 1
		call echo("It's using V500 multum Database")
	else
		;not rev8 with V500_REF
		set intV500Rev8_id = 2
		call echo("It's using V500_REF multum Database")
	endif
else ; rev8
	if (validate(eksmultum_def,-1) = 1)
		; rev8 table name without 'u'
		set intV500Rev8_id = 3
		call echo("It's using REV8 and table name without 'u'")
	else
		; rev8 table name with 'u'
		set intV500Rev8_id = 4
		call echo("It's using REV8 and table name without 'u'")
	endif
endif ; end of currev checking
*/
;002 end
/*
if (validate(eksmultum_def,-1) = 1)
	;use new names
	set intV500Data_ind = 0
	call echo("It's using V500 multum Database")
else
	;use old names
	set intV500Data_ind = 1
	call echo("It's using V500_REF multum Database")
endif
*/ ; 005 END
 
; only use for request-3072006
if (eks_common->request_number != 3072006)
	set strMsg = concat("This is not a valid request number - ",
		trim(cnvtstring(eks_common->request_number)) )
	set intRetVal = -1
	go to EndProgram
endif
 
;validate all the parameters
 
if ( (validate(ORD_METHOD,"Z") = "Z" and validate(ORD_METHOD,"Y") = "Y") or
	 (size(trim(ORD_METHOD),1) = 0 ) or (trim(ORD_METHOD) = "<undefined>") )
	set strMsg = "ORD_METHOD parameter does not exist!"
	set intRetVal = -1
	go to EndProgram
else
	if (cnvtlower(trim(ORD_METHOD,3)) not in ("that was ordered as",
		"whose primary mnemonic is", "for any orderable", "with drug class as", "none"))
		set strMsg = concat("Invalid ORD_METHOD - ", trim(ORD_METHOD,3))
		set intRetVal = -1
		go to EndProgram
	else
		if (cnvtlower(trim(ORD_METHOD,3)) = "that was ordered as")
			set intOrdMethod_indx = 1
			call echo("Parameter ORD_METHOD - checking synonym_id")
		elseif (cnvtlower(trim(ORD_METHOD,3)) = "whose primary mnemonic is")
			set intOrdMethod_indx = 2
			call echo("Parameter ORD_METHOD - checking catalog_cd")
		elseif (cnvtlower(trim(ORD_METHOD,3)) = "for any orderable")
			set intOrdMethod_indx = 3
			set OPT_ORDERS = concat("0.00", char(6), " ")
			call echo("Parameter ORD_METHOD - checking any orderable")
		;002 else ; (cnvtlower(trim(ORD_METHOD,3)) = "with drug class as")
		/*002*/
		elseif (cnvtlower(trim(ORD_METHOD,3)) = "with drug class as")
			set intOrdMethod_indx = 4
			call echo("Parameter ORD_METHOD - checking drug class")
		/*002*/
		else ; if (cnvtlower(trim(ORD_METHOD,3)) = "none")
			/*002*/
			set intOrdMethod_indx = 5
			/*002*/
			call echo("Parameter ORD_METHOD - none")
		endif ; end of intOrdMethod_indx
	endif
endif ; end - validation of ORD_METHOD
 
;Parse OPT_ORDERS parameter into value and display values
call echo("Parameter OPT_ORDERS - ")
/*
record recOPT_ORDERSlist
(
	1 cnt = i4
	1 qual[*]
		2 value = vc
		2 display = vc
)
*/
/*002*/
if (cnvtlower(trim(OPT_ORDERS,3))="none")
	/*002*/
	call echo(OPT_ORDERS)
	/*002*/
	set recOPT_ORDERSlist->cnt = 0
	/*002*/
else
	; 019
	if (intOrdMethod_indx in (1,2,4)
		and (trim(OPT_ORDERS) <= " " or cnvtlower(trim(OPT_ORDERS)) = "<undefined>"))
		set strMsg = concat("Parameter OPT_ORDERS is not defined!")
		set intRetVal = -1
		go to EndProgram
	endif
	; end of 019
 
	set orig_param = OPT_ORDERS
	execute eks_t_parse_list with replace(reply, recOPT_ORDERSlist)
	free set orig_param
	/*002*/
endif
 
/*
	007 Changes made in the method of evaluating drug classes.  EKS_STARTUP now caches
		the drug class to drug relationship tables in the eksDrugClassEx record
		structure.
*/
if (intOrdMethod_indx = 4)
	call echo("Attempting to convert Drug Classes to Catalog_cd's")
	set classCnt = recOPT_ORDERSlist->cnt
 
	if (not classCnt)
		set strMsg = "No Drug Classes were specified."
		set intRetVal = -1
		go to EndProgram
	endif
 
	if (validate(eksDrugClassEx->cnt,-1) = -1)
		set strMsg = "Drug Classes were not exploded out by the Expert Server."
		set intRetVal = -1
		go to EndProgram
	endif
 
	call echo(concat("Number of entries in the Drug Class Explode structure from eks_startup is ",
		build(eksDrugClassEx->cnt)))
 
	set classFnd = 0
 
	; Hidden value could be *13\1 or just *13.
	for (iclass = 1 to recOPT_ORDERSlist->cnt)
	;008  if *13\1 is specified, we want 13 and not 1.
		if (findstring("*", recOPT_ORDERSlist->qual[iclass].value))
			set islash = findstring("\", recOPT_ORDERSlist->qual[iclass].value)
			if (islash)
				set recOPT_ORDERSlist->qual[iclass].value =
					substring(2, (islash - 2), recOPT_ORDERSlist->qual[iclass].value)
			else
				set recOPT_ORDERSlist->qual[iclass].value =
					substring(2, (size(recOPT_ORDERSlist->qual[iclass].value) - 1),
					recOPT_ORDERSlist->qual[iclass].value)
			endif
			call echo(concat("Drug Category ID was reset to ", recOPT_ORDERSlist->qual[iclass].value))
		endif
 
		/*  008
		set islash = findstring("\", recOPT_ORDERSlist->qual[iclass].value)
		if (islash)
			set recOPT_ORDERSlist->qual[iclass].value =
				substring((islash + 1), (size(recOPT_ORDERSlist->qual[iclass].value) - islash),
				recOPT_ORDERSlist->qual[iclass].value)
			call echo(concat("Drug Category ID was reset to ", recOPT_ORDERSlist->qual[iclass].value))
		endif
 
		set islash = findstring("*", recOPT_ORDERSlist->qual[iclass].value)
 
		if (islash)
			set recOPT_ORDERSlist->qual[iclass].value =
				substring((islash + 1), (size(recOPT_ORDERSlist->qual[iclass].value) - islash),
				recOPT_ORDERSlist->qual[iclass].value)
			call echo(concat("Drug Category ID was reset to ",
				recOPT_ORDERSlist->qual[iclass].value))
		endif
		*/
	endfor ; end of (iclass = 1 to recOPT_ORDERSlist->cnt))
 
	;007 Change drug class list into a list of the catalog_cd's that make up those classes.
	select distinct into "nl:"
		cat_cd = eksDrugClassEx->qual[d2.seq].catalog_cd
		,cat_id = eksDrugClassEx->qual[d2.seq].category_id
	from
		(dummyt d1 with seq = value(recOPT_ORDERSlist->cnt))
		,(dummyt d2 with seq = value(eksDrugClassEx->cnt))
	plan d1
	join d2 where cnvtreal(recOPT_ORDERSlist->qual[d1.seq].value) =
		eksDrugClassEx->qual[d2.seq].category_id
	order cat_cd
	head report
		recOPT_ORDERSlist->cnt = 0
		;call echo("Param   Value                                                        Display")
		;call echo("-----   -----                                                        -------")
	detail
		classFnd = 1
		recOPT_ORDERSlist->cnt = recOPT_ORDERSlist->cnt + 1
		if (mod(recOPT_ORDERSlist->cnt, 100) = 1)
			stat = alterlist(recOPT_ORDERSlist->qual, recOPT_ORDERSlist->cnt + 99)
		endif
 
;015		recOPT_ORDERSlist->qual[recOPT_ORDERSlist->cnt].value = cnvtstring(cat_cd)
		recOPT_ORDERSlist->qual[recOPT_ORDERSlist->cnt].value = trim(cnvtstring(cat_cd,25,1))	;015
		recOPT_ORDERSlist->qual[recOPT_ORDERSlist->cnt].display = uar_get_code_display(cat_cd)
		/*
		call echo(concat(format(recOPT_ORDERSlist->cnt,"#####"), "   ",
			format(recOPT_ORDERSlist->qual[recOPT_ORDERSlist->cnt].value,
			"##########################################################"), "   ",
			format(recOPT_ORDERSlist->qual[recOPT_ORDERSlist->cnt].display,
			"##########################################################")),1,0)
		*/
	foot report
		stat = alterlist(recOPT_ORDERSlist->qual, recOPT_ORDERSlist->cnt)
		call echo(concat("Classes mapped to ", build(recOPT_ORDERSlist->cnt), " catalog_cd's"))
	with nocounter
 
	if (classFnd)
		set intOrdMethod_indx = 2  ;reset to evaluate by catalog_cd
		;set ORD_METHOD = "WHOSE PRIMARY MNEMONIC IS"
	else
		set strMsg = "No "
		set intRetVal = -1
		go to EndProgram
	endif
endif ; end of if (intOrdMethod_indx = 4)
 
record recExtend_OPT_ORDERSlist
(
	1 cnt = i4
	1 qual[*]
		2 value = vc
		2 display = vc
		2 ParentCategory_Id = f8
		2 ChildCategory_Id = f8
		2 cnt_categoryId = i2
		2 Category_Id = f8
)
 
declare douParentCategoryId = f8 with public, noconstant(0.0)	; parent category id
declare douChildCategoryId = f8 with public, noconstant(0.0)	; child category id
declare douCategoryId = f8 with public, noconstant(0.0)		; category id
declare intSyn_Star = i2 with public, noconstant(0)		; the position of special character *
declare intSyn_Bar = i2 with public, noconstant(0)		; the position of special character |
declare intSizeOfOPT_ORDERS = i2 with public, noconstant(0)	; size of recOPT_ORDERSlist->qual[d1.seq].value
 
;002 if (recOPT_ORDERSlist->cnt <= 0)
/*002*/
if (recOPT_ORDERSlist->cnt < 0)
	set strMsg = "No OPT_ORDERS was/were specified."
	set intRetVal = -1
	go to EndProgram
else
	; 007 intOrdMethod_indx should no longer ever be 4 since drug classes are now converted to a
	; 007 list of catalog_cd's
	if (intOrdMethod_indx = 4)
		; drug class - checking category_id
		select into "nl:"
		from (dummyt d1 with seq = value(recOPT_ORDERSlist->cnt))
		head report
			stat = alterlist(recExtend_OPT_ORDERSlist->qual, recOPT_ORDERSlist->cnt)
			recExtend_OPT_ORDERSlist->cnt = recOPT_ORDERSlist->cnt
			cnt = 0
		detail
			cnt = cnt + 1
			intSyn_Star = findstring("*", trim(recOPT_ORDERSlist->qual[d1.seq].value,3), 1)
			intSyn_Bar = findstring("\", trim(recOPT_ORDERSlist->qual[d1.seq].value,3), 1)
			intSizeOfOPT_ORDERS = size(trim(recOPT_ORDERSlist->qual[d1.seq].value,3),1)
			recExtend_OPT_ORDERSlist->qual[cnt].value = trim(recOPT_ORDERSlist->qual[d1.seq].value,3)
			recExtend_OPT_ORDERSlist->qual[cnt].display = trim(recOPT_ORDERSlist->qual[d1.seq].display,3)
			if (intSyn_Star > 0)
				if (intSyn_Bar > 0)
					recExtend_OPT_ORDERSlist->qual[cnt].ChildCategory_Id =
						cnvtreal(substring(intSyn_Star+1, intSyn_Bar-intSyn_Star-1,
						trim(recOPT_ORDERSlist->qual[d1.seq].value,3)))
					recExtend_OPT_ORDERSlist->qual[cnt].ParentCategory_Id =
						cnvtreal(substring(intSyn_Bar+1, intSizeOfOPT_ORDERS-intSyn_Bar,
						trim(recOPT_ORDERSlist->qual[d1.seq].value,3)))
				else ; intSyn_bar = 0
					recExtend_OPT_ORDERSlist->qual[cnt].ParentCategory_Id =
						cnvtreal(substring(intSyn_Star+1, intSizeOfOPT_ORDERS-intSyn_Star,
						trim(recOPT_ORDERSlist->qual[d1.seq].value,3)))
				endif ; end of intSyn_bar
			else ; intSyn_Star = 0
				recExtend_OPT_ORDERSlist->qual[cnt].Category_Id =
					cnvtreal(trim(recOPT_ORDERSlist->qual[d1.seq].value,3))
			endif ; end of intSyn_Star
		with nocounter
	endif ; end of intOrdMethod_indx = 4
endif ; end of recOPT_ORDERSlist
 
;declare GetCategoryId(dou_subParent=f8, dou_subChild=f8) = null	; subroutine to get category id with two parameters
;declare ReduceDuplicate(douCheckId=f8, intCntLoop=i2) = null	; subroutine to remove the duplicated order id with two parameters
 
declare strTempCategory = vc with public, noconstant("")	; string of the qualified category_id
 
record recCategory_id(
	1 cnt = i2
	1 qual[*]
		2 Category_Id = f8
)
 
for (m=1 to recExtend_OPT_ORDERSlist->cnt)
	if (recExtend_OPT_ORDERSlist->qual[m].Category_Id = 0)
		; category_id = 0 means there are child even grandchild category_id
		call GetCategoryId(recExtend_OPT_ORDERSlist->qual[m].ParentCategory_Id,
			recExtend_OPT_ORDERSlist->qual[m].ChildCategory_Id)
	else
		; the qualified category_id
		; check to see if category exist or not
		call ReduceDuplicate (recExtend_OPT_ORDERSlist->qual[m].Category_Id, recCategory_id->cnt)
	endif
endfor
 
call echo(concat("Getting All the qualified Category Id: ", trim(strTempCategory)))
 
;***********************************************************************************************************
;    get the category_id by using the _hidden_para from Ref.Help
;***********************************************************************************************************
subroutine GetCategoryId(dou_subParent, dou_subChild)
	;get tree view by Parent or Parent & Child Category_id.
 
	record internal
	(
	1 data[*]
		2 cat_id           = f8
		2 cat_name         = vc
		2 cls_cnt          = i4
		2 cls[*]
			3 cls_id         = f8
			3 cls_name       = vc
			3 sub_cls_cnt    = i4
			3 sub_cls[*]
				4 sub_cls_id   = f8
				4 sub_cls_name = vc
	)
 
	;005 BEGIN
	;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
	if (eksmultum_def = 1) /* 006 */ ; 1 = V500.multum tables found
		;not rev8 with V500 or rev8 table name with 'u'
		select into "nl:"
			m.*,
			mx_hit = decode(mx.seq,1,0),
			mx2_hit = decode(mx2.seq,1,0)
		from (multum_drug_categories     m)
			,(multum_drug_categories    m2)
			,(multum_drug_categories    m3)
			,(multum_category_sub_xref  mx)
			,(multum_category_sub_xref mx2)
			,dummyt d1
			,dummyt d2
		plan m where m.multum_category_id = dou_subParent
		join d1
		join mx where m.multum_category_id = mx.multum_category_id
		join m2 where ( (m2.multum_category_id = dou_subChild and dou_subChild >0) or dou_subChild =0 )
			and mx.sub_category_id = m2.multum_category_id
		join d2
		join mx2 where m2.multum_category_id = mx2.multum_category_id
		join m3 where mx2.sub_category_id = m3.multum_category_id
		order m.category_name, m.multum_category_id, m2.multum_category_id, m3.multum_category_id
		head report
			iCnt1 = 0
			iCnt2 = 0
			iCnt3 = 0
		head m.multum_category_id
			iCnt1 = iCnt1 + 1
			stat = alterlist(internal->data,iCnt1)
			internal->data[iCnt1].cat_id     = m.multum_category_id
			internal->data[iCnt1].cat_name   = m.category_name
			iCnt2 = 0
		head m2.multum_category_id
			if (mx_hit = 1)
				iCnt2 = iCnt2 + 1
				stat = alterlist(internal->data[iCnt1].cls,iCnt2)
				internal->data[iCnt1].cls[icnt2].cls_id   = m2.multum_category_id
				internal->data[iCnt1].cls[icnt2].cls_name = m2.category_name
				if (icnt2 > 0)
					internal->data[iCnt1].cls_cnt   = iCnt2
				endif
			endif
			iCnt3 = 0
		head m3.multum_category_id
			if (mx2_hit = 1)
				iCnt3 = iCnt3 + 1
				stat = alterlist(internal->data[iCnt1].cls[iCnt2].sub_cls,iCnt3)
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_id   = m3.multum_category_id
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_name = m3.category_name
				if (iCnt3 > 0)
					internal->data[iCnt1].cls[iCnt2].sub_cls_cnt    = iCnt3
				endif
			endif
		detail
			x = 1
		foot m2.multum_category_id
			iCnt3 = 0
		foot m.multum_category_id
			icnt2 = 0
		with nocounter, outerjoin = d1, outerjoin = d2
	;006 elseif (intV500Rev8_id=2)
	elseif (eksmultum_def = 0) /* 006 */ ;v500_ref.multum tables found
		;not rev8 with V500_REF
		select into "nl:"
			m.*,
			mx_hit = decode(mx.seq,1,0),
			mx2_hit = decode(mx2.seq,1,0)
		from (v500_ref.multum_drug_categories     m)
			,(v500_ref.multum_drug_categories    m2)
			,(v500_ref.multum_drug_categories    m3)
			,(v500_ref.multum_category_sub_xref  mx)
			,(v500_ref.multum_category_sub_xref mx2)
			,dummyt d1
			,dummyt d2
		plan m where m.multum_category_id = dou_subParent
		join d1
		join mx where m.multum_category_id = mx.multum_category_id
		join m2 where ( (m2.multum_category_id = dou_subChild and dou_subChild >0) or dou_subChild =0 )
			and mx.sub_category_id = m2.multum_category_id
		join d2
		join mx2 where m2.multum_category_id = mx2.multum_category_id
		join m3 where mx2.sub_category_id = m3.multum_category_id
		order m.category_name, m.multum_category_id, m2.multum_category_id, m3.multum_category_id
		head report
			iCnt1 = 0
			iCnt2 = 0
			iCnt3 = 0
		head m.multum_category_id
			iCnt1 = iCnt1 + 1
			stat = alterlist(internal->data,iCnt1)
			internal->data[iCnt1].cat_id     = m.multum_category_id
			internal->data[iCnt1].cat_name   = m.category_name
			iCnt2 = 0
		head m2.multum_category_id
			if (mx_hit = 1)
				iCnt2 = iCnt2 + 1
				stat = alterlist(internal->data[iCnt1].cls,iCnt2)
				internal->data[iCnt1].cls[icnt2].cls_id   = m2.multum_category_id
				internal->data[iCnt1].cls[icnt2].cls_name = m2.category_name
				if (icnt2 > 0)
					internal->data[iCnt1].cls_cnt   = iCnt2
				endif
			endif
			iCnt3 = 0
		head m3.multum_category_id
			if (mx2_hit = 1)
				iCnt3 = iCnt3 + 1
				stat = alterlist(internal->data[iCnt1].cls[iCnt2].sub_cls,iCnt3)
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_id   = m3.multum_category_id
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_name = m3.category_name
				if (iCnt3 > 0)
					internal->data[iCnt1].cls[iCnt2].sub_cls_cnt    = iCnt3
				endif
			endif
		detail
			x = 1
		foot m2.multum_category_id
			iCnt3 = 0
		foot m.multum_category_id
			icnt2 = 0
		with nocounter, outerjoin = d1, outerjoin = d2
	;006 elseif (intV500Rev8_id=3)
	elseif (eksmultum_def = 2) /* 006 */ ;V500.mltm tables found
		;rev8 table name without 'u'
		select into "nl:"
			m.*,
			mx_hit = decode(mx.seq,1,0),
			mx2_hit = decode(mx2.seq,1,0)
		from (mltm_drug_categories     m)
			,(mltm_drug_categories    m2)
			,(mltm_drug_categories    m3)
			,(mltm_category_sub_xref  mx)
			,(mltm_category_sub_xref mx2)
			,dummyt d1
			,dummyt d2
		plan m where m.multum_category_id = dou_subParent
		join d1
		join mx where m.multum_category_id = mx.multum_category_id
		join m2 where ( (m2.multum_category_id = dou_subChild and dou_subChild >0) or dou_subChild =0 )
			and mx.sub_category_id = m2.multum_category_id
		join d2
		join mx2 where m2.multum_category_id = mx2.multum_category_id
		join m3 where mx2.sub_category_id = m3.multum_category_id
		order m.category_name, m.multum_category_id, m2.multum_category_id, m3.multum_category_id
		head report
			iCnt1 = 0
			iCnt2 = 0
			iCnt3 = 0
		head m.multum_category_id
			iCnt1 = iCnt1 + 1
			stat = alterlist(internal->data,iCnt1)
			internal->data[iCnt1].cat_id     = m.multum_category_id
			internal->data[iCnt1].cat_name   = m.category_name
			iCnt2 = 0
		head m2.multum_category_id
			if (mx_hit = 1)
				iCnt2 = iCnt2 + 1
				stat = alterlist(internal->data[iCnt1].cls,iCnt2)
				internal->data[iCnt1].cls[icnt2].cls_id   = m2.multum_category_id
				internal->data[iCnt1].cls[icnt2].cls_name = m2.category_name
				if (icnt2 > 0)
					internal->data[iCnt1].cls_cnt   = iCnt2
				endif
			endif
			iCnt3 = 0
		head m3.multum_category_id
			if (mx2_hit = 1)
				iCnt3 = iCnt3 + 1
				stat = alterlist(internal->data[iCnt1].cls[iCnt2].sub_cls,iCnt3)
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_id   = m3.multum_category_id
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_name = m3.category_name
				if (iCnt3 > 0)
					internal->data[iCnt1].cls[iCnt2].sub_cls_cnt    = iCnt3
				endif
			endif
		detail
			x = 1
		foot m2.multum_category_id
			iCnt3 = 0
		foot m.multum_category_id
			icnt2 = 0
		with nocounter, outerjoin = d1, outerjoin = d2
	endif ; end of intV500Rev8_id
 
	/*
   	if (intV500Data_ind=1)
		select into "nl:"
			m.*,
			mx_hit = decode(mx.seq,1,0),
			mx2_hit = decode(mx2.seq,1,0)
        from (v500_ref.multum_drug_categories     m)
			,(v500_ref.multum_drug_categories    m2)
			,(v500_ref.multum_drug_categories    m3)
			,(v500_ref.multum_category_sub_xref  mx)
			,(v500_ref.multum_category_sub_xref mx2)
			,dummyt d1
			,dummyt d2
		plan m where m.multum_category_id = dou_subParent
		join d1
		join mx where m.multum_category_id = mx.multum_category_id
		join m2 where ( (m2.multum_category_id = dou_subChild and dou_subChild >0) or dou_subChild =0 )
			and mx.sub_category_id = m2.multum_category_id
		join d2
		join mx2 where m2.multum_category_id = mx2.multum_category_id
		join m3 where mx2.sub_category_id = m3.multum_category_id
		order m.category_name, m.multum_category_id, m2.multum_category_id, m3.multum_category_id
		head report
			iCnt1 = 0
			iCnt2 = 0
			iCnt3 = 0
		head m.multum_category_id
			iCnt1 = iCnt1 + 1
			stat = alterlist(internal->data,iCnt1)
			internal->data[iCnt1].cat_id     = m.multum_category_id
			internal->data[iCnt1].cat_name   = m.category_name
			iCnt2 = 0
		head m2.multum_category_id
			if (mx_hit = 1)
				iCnt2 = iCnt2 + 1
				stat = alterlist(internal->data[iCnt1].cls,iCnt2)
				internal->data[iCnt1].cls[icnt2].cls_id   = m2.multum_category_id
				internal->data[iCnt1].cls[icnt2].cls_name = m2.category_name
				if (icnt2 > 0)
					internal->data[iCnt1].cls_cnt   = iCnt2
				endif
			endif
			iCnt3 = 0
		head m3.multum_category_id
			if (mx2_hit = 1)
				iCnt3 = iCnt3 + 1
				stat = alterlist(internal->data[iCnt1].cls[iCnt2].sub_cls,iCnt3)
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_id   = m3.multum_category_id
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_name = m3.category_name
				if (iCnt3 > 0)
					internal->data[iCnt1].cls[iCnt2].sub_cls_cnt    = iCnt3
				endif
			endif
		detail
			x = 1
		foot m2.multum_category_id
			iCnt3 = 0
		foot m.multum_category_id
			icnt2 = 0
		with nocounter, outerjoin = d1, outerjoin = d2
	else
		select into "nl:"
			m.*,
			mx_hit = decode(mx.seq,1,0),
			mx2_hit = decode(mx2.seq,1,0)
		from (multum_drug_categories     m)
		;  Multum tables were changed for rev 8
		;  004   ,(multum_drug_categories    m2)
		;        ,(multum_drug_categories    m3)
		;        ,(multum_category_sub_xref  mx)
		;        ,(multum_category_sub_xref mx2)
		;
			,(mltm_drug_categories    m2)  ;  004
			,(mltm_drug_categories    m3)  ;  004
			,(mltm_category_sub_xref  mx)  ;  004
			,(mltm_category_sub_xref mx2)  ;  004
			,dummyt d1
			,dummyt d2
		plan m where m.multum_category_id = dou_subParent
		join d1
		join mx where m.multum_category_id = mx.multum_category_id
		join m2 where ( (m2.multum_category_id = dou_subChild and dou_subChild >0) or dou_subChild =0 )
			and mx.sub_category_id = m2.multum_category_id
		join d2
		join mx2 where m2.multum_category_id = mx2.multum_category_id
		join m3 where mx2.sub_category_id = m3.multum_category_id
		order m.category_name, m.multum_category_id, m2.multum_category_id, m3.multum_category_id
		head report
			iCnt1 = 0
			iCnt2 = 0
			iCnt3 = 0
		head m.multum_category_id
			iCnt1 = iCnt1 + 1
			stat = alterlist(internal->data,iCnt1)
			internal->data[iCnt1].cat_id     = m.multum_category_id
			internal->data[iCnt1].cat_name   = m.category_name
			iCnt2 = 0
		head m2.multum_category_id
			if (mx_hit = 1)
				iCnt2 = iCnt2 + 1
				stat = alterlist(internal->data[iCnt1].cls,iCnt2)
				internal->data[iCnt1].cls[icnt2].cls_id   = m2.multum_category_id
				internal->data[iCnt1].cls[icnt2].cls_name = m2.category_name
				if (icnt2 > 0)
					internal->data[iCnt1].cls_cnt   = iCnt2
				endif
			endif
			iCnt3 = 0
		head m3.multum_category_id
			if (mx2_hit = 1)
				iCnt3 = iCnt3 + 1
				stat = alterlist(internal->data[iCnt1].cls[iCnt2].sub_cls,iCnt3)
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_id   = m3.multum_category_id
				internal->data[iCnt1].cls[icnt2].sub_cls[iCnt3].sub_cls_name = m3.category_name
				if (iCnt3 > 0)
					internal->data[iCnt1].cls[iCnt2].sub_cls_cnt    = iCnt3
				endif
			endif
		detail
			x = 1
		foot m2.multum_category_id
			iCnt3 = 0
		foot m.multum_category_id
			icnt2 = 0
		with nocounter, outerjoin = d1, outerjoin = d2
	endif
	*/
	;005 END
 
	; before adding parent category_id, check it exists or not.
	call ReduceDuplicate(internal->data[1].cat_id, recCategory_Id->cnt)
 
	; have child category
	for (i=1 to internal->data[1].cls_cnt)
		if (internal->data[1]->cls[i].sub_cls_cnt > 0)
			; have grandchild category
			; before adding child category_id, check it exists or not.
			call ReduceDuplicate(internal->data[1]->cls[i].cls_id, recCategory_Id->cnt)
			for (j=1 to internal->data[1]->cls[i].sub_cls_cnt)
				; before adding grandchild category_id, check it exists or not.
				call ReduceDuplicate(internal->data[1]->cls[i]->sub_cls[j].sub_cls_id, recCategory_Id->cnt)
			endfor
		else
			; don't have grandchild category id
			; before adding child category_id, check it exists or not.
			call ReduceDuplicate(internal->data[1]->cls[i].cls_id, recCategory_Id->cnt)
		endif
	endfor ;end of for (i=1 to internal->data[1].cls_cnt)
end ; end of subroutine GetCategoryId
;***********************************************************************************************************
;***********************************************************************************************************
; remove the duplicated category_id
;***********************************************************************************************************
subroutine ReduceDuplicate(douCheckId, intCntLoop)
	declare intRedCnt = i2 with public, noconstant(0)	; counter
	declare intSameInd = i2 with public, noconstant(0) 	; category_id exist indicator
 
	; if no same category_id exist
	if (intSameInd = 0)
		for (intRedCnt=1 to size(recCategory_id->qual,5))
			; check the category_id is the same or not
			if (recCategory_id->qual[intRedCnt].Category_id = douCheckId)
				; if there is one the same category_id found, then exist the for loop
				; and set up the indicator equal to 1
				set intSameInd = 1
				set intRedCnt = size(recCategory_id->qual,5) + 1
			else ;recCategory_id->qual[intRedCnt].Category_id != douCheckId
				; if there is no same category_id found, then keep tracking next
				set intSameInd = 0
			endif ; end of recCategory_id->qual[intRedCnt].Category_id = douCheckId
		endfor ;end of intRecCnt
 
		; if no any same category_id found, add them into record recCategory_Id
		if (intSameInd = 0)
			set recCategory_id->cnt = intCntLoop + 1
			set stat = alterlist(recCategory_id->qual, recCategory_id->cnt)
			set recCategory_id->qual[recCategory_id->cnt].category_id = douCheckId
		endif ; end of intSameInd
 
		if (size(trim(strTempCategory,3)) = 0)
;015			set strTempCategory = trim(cnvtstring(recCategory_id->qual[recCategory_id->cnt].category_id),3)
			set strTempCategory = trim(cnvtstring(recCategory_id->qual[recCategory_id->cnt].category_id,25,1))	;015
		else
			set strTempCategory = concat(trim(strTempCategory), ", ",
;015				trim(cnvtstring(recCategory_id->qual[recCategory_id->cnt].category_id),3) )
				trim(cnvtstring(recCategory_id->qual[recCategory_id->cnt].category_id,25,1)))	;015
		endif
	endif ; end of intSameInd
end ; end of ReduceDuplicate
;***********************************************************************************************************
 
call echo("Parameter ORDER_DETAIL - ")
record recORDER_DETAILlist
(
	1 cnt = i4
	1 qual[*]
		2 value = vc
		2 display = vc
)
set orig_param = ORDER_DETAIL
execute eks_t_parse_list with replace(reply, recORDER_DETAILlist)
free set orig_param
 
declare intSynPlus = i2 with public, noconstant(0)	; position of special character +
declare intPlusPosition = i2 with public, noconstant(0)
 
record recArguments (
	1 cnt   = i2
	1 items[*]
		2 value = c1024
	)
 
declare intStart = i2 with public, noconstant(0)        ; starting pointer
if (recORDER_DETAILlist->cnt <= 0)
	set strMsg = "No ORDER_DETAIL was/were specified."
	if (iNewTemplateInd = 0) ;022
		set intRetVal = -1
		go to EndProgram
	endif ;022
else ;recORDER_DETAILlist->cnt > 0
	set intSynPlus = findstring("+", trim(recORDER_DETAILlist->qual[1].value,3), 1)
	; if plus sign exist, it means checking IngredientList then DetailList
	if (intSynPlus > 0)
		declare intSizeOfDetail = i2 with public, noconstant(0)
		set intSizeOfDetail = size(recORDER_DETAILlist->qual[1].value,1)
		declare strFirst = vc with public, noconstant(" ")	; first string
		declare strSecond = vc with public, noconstant(" ") 	; second string
		set strFirst = substring(1, intSynPlus-1, trim(recORDER_DETAILlist->qual[1].value,3))
		set strSecond = substring(intSynPlus+1, intSizeOfDetail - intSynPlus, trim(recORDER_DETAILlist->qual[1].value,3))
 
		set intStart = 1
 
		declare intSynBar = i2 with public, noconstant(0)	; position of special character |
		declare intLength = i2 with public, noconstant(0)	; the length of string
		declare intNum = i2 with public, noconstant(0)		; counter
 
		; separate hidden value by "|" for First String
		while ( intSynBar < size(strFirst,1) )
			set intSynBar = findstring("|", strFirst, intStart)
			; if "|" exist, then get the hidden value into record recArguments
			if (intSynBar > 0)
				set intLength = intSynBar - intStart
				set intNum = intNum + 1
				set recArguments->cnt = intNum
				set stat = alterlist(recArguments->items, recArguments->cnt)
				set recArguments->items[intNum].value = substring(intStart, intLength, strFirst)
				set intStart = intSynBar + 1
			else ; intSynBar = 0
				; the last part of the value in First String
				set intNum = intNum + 1
				set recArguments->cnt = intNum
				set stat = alterlist(recArguments->items, recArguments->cnt)
				set recArguments->items[intNum].value = substring(intStart, size(strFirst,1)-intStart+1, strFirst)
				set intSynBar = size(strFirst,1) + 1
			endif ; end of intSynBar
		endwhile ; end of while
 
		set intNum = intNum + 1
		set recArguments->cnt = intNum
		set stat = alterlist(recArguments->items, recArguments->cnt)
		set recArguments->items[intNum].value = "+"
		set intPlusPosition = intNum
 
		set intStart = 1
		set intSynBar = 0
 
		; separate hidden value by "|" for First String
		while ( intSynBar < size(strSecond,1) )
			set intSynBar = findstring("|", trim(strSecond,3), intStart)
			; if "|" exist, then get the hidden value into record recArguments
			if (intSynBar > 0 )
				set intLength = intSynBar - intStart
				set intNum = intNum + 1
				set recArguments->cnt = intNum
				set stat = alterlist(recArguments->items, recArguments->cnt)
				set recArguments->items[intNum].value = substring(intStart, intLength, strSecond)
				set intStart = intSynBar + 1
			else ; intSynBar = 0
				; the last part of the value in Second String
				set intNum = intNum + 1
				set recArguments->cnt = intNum
				set stat = alterlist(recArguments->items, recArguments->cnt)
				set recArguments->items[intNum].value = substring(intStart, size(strSecond,1)-intStart+1, strSecond)
				set intSynBar = size(strSecond,1) + 1
			endif ; end of intSynBar
		endWhile ; end of while ( intSynBar < size(strSecond,1) )
 
	else ; intSynPlus = 0
 
		; no plus sign exist. Check DetailList directly.
		set intStart = 1
		set recArguments->cnt = 0
		declare intNum = i2 with public, noconstant(0)
		declare intSynBar = i2 with public, noconstant(0)       ; position of special character |
		set intSynBar = 0
		; separate the "|"
		while ( intSynBar < size(recORDER_DETAILlist->qual[1].value,1) )
			set intSynBar = findstring("|", trim(recORDER_DETAILlist->qual[1].value,3), intStart)
			; if "|" exist, then get the hidden value into record recArguments
			if (intSynBar > 0 )
				set intLength = intSynBar - intStart
				set intNum = intNum + 1
				set recArguments->cnt = intNum
				set stat = alterlist(recArguments->items, recArguments->cnt)
				set recArguments->items[intNum].value = substring(intStart, intLength,
					recORDER_DETAILlist->qual[1].value)
				set intStart = intSynBar + 1
			else ; intSynBar = 0
				; the last part of the value in Second String
				set intNum = intNum + 1
				set recArguments->cnt = intNum
				set stat = alterlist(recArguments->items, recArguments->cnt)
				set recArguments->items[intNum].value = substring(intStart,
					size(recORDER_DETAILlist->qual[1].value,1)-intStart+1, recORDER_DETAILlist->qual[1].value)
				set intSynBar = size(recORDER_DETAILlist->qual[1].value,1) + 1
			endif ; end of intSynBar
		endWhile ; end of while ( intSynBar < size(strSecond,1) )
	endif ; end of intSynPlus
endif ; end of recORDER_DETAILlist->cnt
 
declare strFieldName = vc with public, noconstant("")		; name of the Field
declare strFieldType = c1 with public, noconstant("")		; type of the data S, I, N, B, Q, X
declare douOeFieldId = f8 with public, noconstant(0.0)		; oeFieldId if it's X
declare strOeFieldMeaning = vc with public, noconstant(" ")	; oeFieldMeaning if it's X
declare douCodeSet = f8 with public, noconstant(0.0)		; CodeSet if it's I
declare booResult = i1 with public, noconstant(0)		; Boolean value if it's B
declare strQualifier = vc with public, noconstant("")		; qualifier
declare strRequestType = vc with public, noconstant("")		; request type
declare strValue1 = vc with public, noconstant("")		; value 1
declare strValue2 = vc with public, noconstant("")		; value 2
 
;declare Comparison(intOrdMethod_indx=i2, strRequestType=vc, strFieldName=vc, strFieldType=vc, strQualifier=vc,
;	strValue1=vc, strValue2=vc, intIngredientInd = i4, intOrderIndex=i4, intIngredientIndex=i4) = null
 
declare intOnlyIngredient_ind = i2 with public, noconstant(0)	;
 
declare intOnlyCheckIngredient_ind = i2 with public, noconstant(0)
 
call echo(concat("recArguments->items[1].value: ", build(recArguments->items[1].value)))
 
;014 BEGIN
declare intDtTmInd = i2 with protect, noconstant(0)
call echo(concat("recArguments->items[",build(recArguments->cnt),"].value: ",build(recArguments->items[recArguments->cnt].value)))
if (recArguments->items[recArguments->cnt].value = "Q")
	set ekssub->parse_ind = 1
	set intDtTmInd = 1
endif
;014 END
 
if (substring(1, 1, cnvtupper(trim(recArguments->items[1].value,3)))="U")
	; checking Ingredient List, and then Detail_List
	set strRequestType = "IngredientList"
	if (substring(2, 1, cnvtupper(trim(recArguments->items[1].value,3)))="X")
		set strFieldType = recArguments->items[intPlusPosition+1].value
		set strFieldName = recArguments->items[intPlusPosition+2].value
	elseif (substring(2, 1, cnvtupper(trim(recArguments->items[1].value,3)))="I")
		if ( recArguments->cnt >=5 )
			set douCodeSet = cnvtreal(trim(recArguments->items[intPlusPosition+5].value))
		endif
 
		set strFieldType = recArguments->items[intPlusPosition+1].value
		set strFieldName = recArguments->items[intPlusPosition+2].value
	endif
 
	;02-04-2002
	set intOnlyCheckIngredient_ind = 1
	;01-31-02
	if ( cnvtupper(trim(strFieldName,3)) in ("CATALOG_CODE", "SYNONYM_CODE") )
		set intOnlyIngredient_ind = 1
		if ( cnvtupper(trim(strFieldName,3)) = "CATALOG_CODE")
			set strFieldName = "catalogcd"
		else
			set strFieldName = "synonymid"
		endif
		call echo(concat("strFieldName: ", build(strFieldName)))
	else
		set intOnlyIngredient_ind = 0
	endif
 
	call echo(concat("intOnlyIngredient_ind: ", build(intOnlyIngredient_ind)))
 
elseif (cnvtupper(trim(recArguments->items[1].value,3)) = "X")
	; checking Detail List
	set strRequestType = "DetailList"
	set douOeFieldId = cnvtreal(trim(recArguments->items[intPlusPosition+2].value))
	set strFieldType = trim(recArguments->items[recArguments->cnt].value)
	set strOeFieldMeaning = trim(recArguments->items[recArguments->cnt-1].value)
elseif (cnvtupper(trim(recArguments->items[1].value,3)) = "I")
	; integer
	set strRequestType = "OrderList"
	set strFieldType = recArguments->items[intPlusPosition+1].value
	set strFieldName = recArguments->items[intPlusPosition+2].value
	if ( recArguments->cnt >= 5 )
		set douCodeSet = cnvtreal(trim(recArguments->items[intPlusPosition+5].value))
	endif
endif ; end of checking recArguments->items[1].value
 
call echo(concat("intOnlyCheckIngredient_ind: ", build(intOnlyCheckIngredient_ind)))
 
call echo("Parameter QUALIFIER - ")
record recQUALIFIERlist
(
	1 cnt = i4
	1 qual[*]
		2 value = vc
		2 display = vc
)
 
set orig_param = QUALIFIER
execute eks_t_parse_list with replace(reply, recQUALIFIERlist)
free set orig_param
 
declare intQualifier_indx = i2 with public, noconstant(0)	; index of parameter Qualifier
declare strQualifier = vc with public, noconstant("")
if (recQUALIFIERlist->cnt <= 0)
	set strMsg = "No QUALIFIER was/were specified."
	if (iNewTemplateInd = 0) ;022
		set intRetVal = -1
		go to EndProgram
	endif ;022
else
	; set up index if OPT_LIST2 is requried.
	if (cnvtupper(trim(recQUALIFIERlist->qual[1].value,3)) in ("BETWEEN", "OUTSIDE"))
		if (cnvtupper(trim(strFieldType)) in ("S", "I", "B"))
			set strMsg = concat("QUALIFIER can not be ", trim(recQUALIFIERlist->qual[1].display,3),
				" because the data type is String, Integer or Bollean.")
			set intRetVal = -1
			go to EndProgram
		endif
 
       	if (trim(recQUALIFIERlist->qual[1].value,3) = "between")
			set intQualifier_indx = 1
        elseif (trim(recQUALIFIERlist->qual[1].value,3) = "outside")
			set intQualifier_indx = 2
		endif
	endif
	set strQualifier = trim(recQualifierList->qual[1].value)
endif
 
call echo("Parameter LIST1 - ")
record recLIST1list
(
	1 cnt = i4
	1 qual[*]
		2 value = vc
		2 display = vc
)
set orig_param = LIST1
execute eks_t_parse_list with replace(reply, recLIST1list)
free set orig_param
 
;003
declare intCalc = i2 with public, noconstant(0)
if (recLIST1list->cnt > 0)
	for (intCalc=1 to recLIST1list->cnt)
		if (findstring("@", recLIST1list->qual[intCalc].display))
			;014 BEGIN
			if (intDtTmInd = 1)
				;014 set ekssub->orig = recLIST1list->qual[intCalc].display
				set ekssub->orig = concat("trim('", recLIST1list->qual[intCalc].display, "')")	;014
			else ;014 END
				set ekssub->parse_ind = 0
				set ekssub->orig = recLIST1list->qual[intCalc].display
			endif ;014
			execute eks_t_subcalc
			if (ekssub->status_flag != 1)
				set strMsg = "Invalid substitutions values found"
				set intRetVal = -1
				go to EndProgram
			else ; ekssub->status_flag = 1
				if (recLIST1list->qual[intCalc].display = recLIST1list->qual[intCalc].value)
					set recLIST1list->qual[intCalc].value = ekssub->mod
				endif
				set recLIST1list->qual[intCalc].display = ekssub->mod
			endif ; end of ekssub->status_flag
		endif ; end of findstring
	endfor ;end of for
endif ; end of recLIST1list->cnt > 0
 
if (ekssub->status_flag = 1 )
	call echo("After calling EKS_T_SUBCALC ---- Parameter OPT_LIST2 - ")
	call echo("Param   Value                                                        Display")
	call echo("-----   -----                                                        -------")
 
	set i = 0
	while (i < recLIST1list->cnt)
		call echo(concat(format(i,"#####"), "   ",
			format(recLIST1list->qual[i].value,"##########################################################"), "   ",
			format(recLIST1list->qual[i].display,"##########################################################")),1,0)
		set i = i + 1
	endwhile
endif
;003 end
 
;declare DateTimeConvert(strDateTime=vc, intPara=i4) = null	; date & time convention
declare intSynToday = i2 with public, noconstant(0)		; position of "TODAY"
declare intSynNow = i2 with public, noconstant(0)		; position of "NOW"
declare strFinalDateTime = vc with public, noconstant("")	; string of final date & time
declare strFinalDateTime_1 = vc with public, noconstant("")	; string of final date & time for LIST1
declare strFinalDateTime_2 = vc with public, noconstant("")	; string of final date & time for OPT_LIST2
declare strInterval = vc with public, noconstant("")		; string of interval
declare strTodayBegin = vc with public, noconstant("")		; string of beingging in TODAY
declare strTodayBegin_1 = vc with public, noconstant("")	; string of beginning in TODAY for LIST1
declare strTodayBegin_2 = vc with public, noconstant("")	; string of beginning in TODAY for OPT_LIST2
declare strTodayEnd = vc with public, noconstant("")		; string of end in TODAY
declare strTodayEnd_1 = vc with public, noconstant("")		; string of end in TODAY for LIST1
declare strTodayEnd_2 = vc with public, noconstant("")		; string of end in TODAY for OPT_LIST2
declare strNowValue = vc with public, noconstant("")		; string of NOW
declare strNowValue_1 = vc with public, noconstant("")		; stirng of NOW for LIST1
declare strNowValue_2 = vc with public, noconstant("")		; string of NOW for OPT_LIST2
 
set d4seq = 0
;011 if (recLIST1list->cnt = 0)
if (recLIST1list->cnt = 0 and cnvtupper(trim(recQUALIFIERlist->qual[1].value,3)) not in ("DEF", "NOT DEF"))
	set strMsg = "No LIST1 was/were specified."
	if (iNewTemplateInd = 0) ;022
		set intRetVal = -1
		go to EndProgram
	endif ;022
elseif (recLIST1list->cnt >= 1)
	;011 if (recLIST1list->cnt > 1 and (cnvtupper(trim(recQUALIFIERlist->qual[1].value,3)) not in ("IN", "NOT IN"))  )
	if (recLIST1list->cnt > 1 and (cnvtupper(trim(recQUALIFIERlist->qual[1].value,3))
		not in ("IN", "NOT IN", "DEF NOT IN", "NOT DEF NOT IN", "DEF", "NOT DEF"))  )
		set strMsg = concat("LIST1 can not have more than one options because of qualifier - ",
			trim(recQUALIFIERlist->qual[1].display))
		set intRetVal = -1
		go to EndProgram
	elseif (recLIST1list->cnt > 1 and strFieldType in ("N", "Q") )
		set strMsg = "LIST1 can not hav more than one options because the field type is Number or Date Time"
		set intRetVal = -1
		go to EndProgram
 	else
		call echo(concat("strFieldType: ", build(strFieldType)))
		if (cnvtupper(trim(strFieldType)) = "Q")
			; date & time
			set intSynToday = findstring("TODAY", trim(recLIST1list->qual[1].display), 1)
			set intSynNow = findstring("NOW", trim(recLIST1list->qual[1].display), 1)
			call DateTimeConvert(cnvtupper(trim(recLIST1list->qual[1].display)), 1)
			set strTodayBegin_1 = strTodayBegin
			set strTodayEnd_1 = strTodayEnd
			set strNowValue_1 = strNowValue
			set strFinalDateTime_1 = strFinalDateTime
			call echo(concat("strTodayBegin_1:    ", build(strTodayBegin_1)))
			call echo(concat("strTodayEnd_1:      ", build(strTodayEnd_1)))
			call echo(concat("strNowValue_1:      ", build(strNowValue_1)))
			call echo(concat("strFinalDateTime_1: ", build(strFinalDateTime_1)))
			if (intSynToday > 0)
				set strVALUE1 = strTodayBegin_1
				set strVALUE2 = strTodayEnd_1
		       	;set strVALUE1 = strTodayBegin_1
			elseif (intSynNow > 0)
				set strVALUE1 = strNowValue_1
			elseif (intSynToday = 0 and intSynNow = 0)
				set strVALUE1 = strFinalDateTime_1
			endif
		elseif (cnvtupper(trim(strFieldType)) = "I")
			; identifier
			;set strVALUE1 = "cnvtreal(recLIST1list->qual[d4.seq].value)"
			set strVALUE1 = "cnvtreal(recLIST1list->qual[d4seq].value)"
		elseif (cnvtupper(trim(strFieldType)) = "N")
			; number
   			set strVALUE1 = "cnvtreal(recLIST1list->qual[1].value)"
   		elseif (cnvtupper(trim(strFieldType)) = "S")
			; string
			;set strVALUE1 = "patstring('recLIST1list->qual[d4.seq].value')"
			set strVALUE1 = "patstring(cnvtupper(recLIST1list->qual[d4seq].value), 0)"
		else ;  "B"
			; boolean
			;set strVALUE1 = "cnvtint(recLIST1list->qual[d4.seq].value)"
			set strVALUE1 = "cnvtint(recLIST1list->qual[d4seq].value)"
		endif ; end of strFieldType
	endif
endif ; end of recLIST1list->cnt
call echo(concat("strVALUE1: ", build(strVALUE1)))
 
/****************************************************************************************
   Date & Time Convertion
	ex : today is 12/15/2001
		betweeen TODAY-2 and TODAY+2
		=> between 12/13/2001 00:00:00 and 12/17/2001 23:59:59
		outside TODAY-2 and TODAY+2
		=> < 12/13/2001 00:00:00 and > 12/17/2001 23:59:59
	        greater than TODAY+2
		=> > 12/17/2001 23:59:59
                greater than TODAY-2
                => > 12/13/2001 23:59:59
		greater than or equal to TODAY+2
		=> >= 12/17/2001 00:00:00
                greater than or equal to TODAY-2
                => >= 12/13/2001 00:00:00
		less than TODAY+2
		=> < 12/17/2001 00:00:00
                less than TODAY-2
                => < 12/13/2001 00:00:00
		less than or euqal to TODAY+2
		=> <= 12/17/2001 23:59:59
                less than or euqal to TODAY-2
                => <= 12/13/2001 23:59:59
		equal to TODAY
		=> >= 12/15/2001 00:00:00 and <= 12/15/2001 23:59:59
*****************************************************************************************/
 
subroutine DateTimeConvert(strDateTime, intPara)
 
	call echo("calling subroutine DateTimeConvert.... ")
	call echo(concat("strDateTime: ", build(strDateTime)))
	call echo(concat("intPara: ", build(intPara)))
 
	declare intSizeOfstrDateTime = i2 with public, noconstant(0)	; string - size of DateTime string
	set intSizeOfstrDateTime = size(strDateTime,1)			; integer - size of DateTime
	declare intSynToday = i2 with public, noconstant(0)		; position of TODAY
	declare intSynNow = i2 with public, noconstant(0)		; position of NOW
	set intSynToday = findstring("TODAY", strDateTime, 1)
	call echo(concat("intSynToday : ", build(intSynToday )))
	set intSynNow = findstring("NOW", strDateTime, 1)
 	call echo(concat("intSynNow: ", build(intSynNow)))
 
	declare intSynPlus = i2 with public, noconstant(0)		; position of + sign
	declare intSynMinus = i2 with public, noconstant(0)		; position of - sign
 
	declare strDate = vc with public, noconstant("")		; string of date
	declare strTime = vc with public, noconstant("")		; string of time
 
	declare intFoundString = i2 with public, noconstant(0)		; string found... 1-found., 0-non-found
 
	if (intSynToday = 0 and intSynNow = 0)
		; using user defined today & time
		;014 set strFinalDateTime = "cnvtdatetime(trim(strDateTime,3))"
		set strFinalDateTime = concat("cnvtdatetime(trim('", strDateTime,"',3))") ;014
	else
		call echo(concat("strDateTime: ", build(strDateTime)))
		set intSynPlus = findstring("+", strDateTime, 1)
		set intSynMinus = findstring("-", strDateTime, 1)
		call echo(concat("intSynPlus: ", build(intSynPlus)))
		call echo(concat("intSynMinus: ", build(intSynMinus)))
		if (intSynToday > 0)
			; TODAY +/-
			if ( (intSynPlus > 0 and intSynToday > intSynPlus) or
				 (intSynMinus > 0 and intSynToday > intSynMinus) )
				; +TODAY / -TODAY
				set strMsg = concat("Invalid Date Time String ", trim(strDateTime))
				set intRetVal = -1
				go to EndProgram
			else
				if (intSynPlus > 0)
					; TODAY +
					call echo(concat("intSynPlus: ", build(intSynPlus)))
					Call echo(concat("intSizeOfstrDateTime: ", build(intSizeOfstrDateTime)))
					set strTime = substring(intSynPlus+1, intSizeOfstrDateTime-intSynPlus, strDateTime)
					if (isnumeric(strTime)=0)
						; string
						set intFoundString = findstring("DAYS", cnvtupper(trim(strTime)), 1)
						if (intFoundString = 0)
							set strMsg = concat("Invalid setup of TODAY + ", trim(strTime))
							set intRetVal = -1
							go to EndProgram
						else ; intFoundString > 0
							set strTime = substring(1, intFoundString-1, strTime)
							if ( isnumeric(strTime) = 0)
								set strMsg = concat("Invalid time - TODAY + ", trim(strTime))
								set intRetVal = -1
								go to EndProgram
							endif ; end of isnumeric(strTime) = 0
						endif ; end of intFoundString
					endif ; end of isnumeric(strTime)=0
 
					set strInterval = trim(concat(trim(strTime,3), "D"),3)
					call echo(concat("strInterval: ", build(strInterval)))
 
					;if (cnvtupper(trim(strQualifier)) in (">", "<", "OUTSIDE"))
					;if (cnvtupper(trim(strQualifier)) in (">", "<"))
					if (cnvtupper(trim(strQualifier)) in (">", "<="))
						set strTodayBegin = concat("cnvtdatetime(cnvtlookahead('", trim(strInterval),
                                                "', cnvtdatetime(curdate, 235959)))")
					elseif (cnvtupper(trim(strQualifier)) in ("OUTSIDE", "BETWEEN"))
						if (intPara = 1)
							set strTodayBegin = concat("cnvtdatetime(cnvtlookahead('", trim(strInterval),
								"', cnvtdatetime(curdate, 0000)))")
						else ; (intPara = 2)
							set strTodayEnd = concat("cnvtdatetime(cnvtlookahead('", trim(strInterval),
								"', cnvtdatetime(curdate, 2359)))")
						endif
					;elseif (cnvtupper(trim(strQualifier)) in (">=", "<=", "BETWEEN"))
					;elseif (cnvtupper(trim(strQualifier)) in (">=", "<="))
					elseif (cnvtupper(trim(strQualifier)) in ("<", ">="))
						set strTodayBegin = concat("cnvtdatetime(cnvtlookahead('", trim(strInterval),
							"', cnvtdatetime(curdate,0)))")
						call echo(concat("strTodayBegin: ", build(strTodayBegin)))
					else ; "=" or "!="
						set strTodayBegin = concat("cnvtdatetime(cnvtlookahead('", trim(strInterval),
							"', cnvtdatetime(curdate,0)))")
						set strTodayEnd = concat("cnvtdatetime(cnvtlookahead('", trim(strInterval),
							"', cnvtdatetime(curdate, 235959)))")
					endif
				elseif (intSynMinus > 0)
					; TODAY -
					set strTime = substring(intSynMinus+1, intSizeOfstrDateTime-intSynMinus, strDateTime)
					if (isnumeric(strTime) = 0)
						set intFoundString = findstring("DAYS", cnvtupper(trim(strTime)),1)
						if (intFoundString = 0)
							set strMsg = concat("Invalid setup of TODAY - ", trim(strTime))
							set intRetVal = -1
							go to EndProgram
						else ; intFoundString > 0
							set strTime = substring(1, intFoundString-1, strTime)
							if (isnumeric(strTime) = 0)
								set strMsg = concat("Invalid time - TODAY - ", trim(strTime))
								set intRetVal = -1
								go to EndProgram
							endif ; end of isnumeric(strTime) = 0
						endif ; end of intFoundString
					endif ; end of isnumeric(strTime)=0
					set strInterval = trim(concat(trim(strTime,3), "D"),3)
 
					;if (cnvtupper(trim(strQualifier)) in (">", "<", "OUTSIDE"))
						;if (cnvtupper(trim(strQualifier)) in (">", "<"))
					if (cnvtupper(trim(strQualifier)) in ("<", ">="))
						set strTODAYbegin = concat("cnvtdatetime(cnvtlookbehind('",trim(strInterval),
							"' ,cnvtdatetime(curdate,000000)))")
					elseif (cnvtupper(trim(strQualifier)) in ("OUTSIDE","BETWEEN"))
						if (intPara = 1)
							set strTODAYbegin = concat("cnvtdatetime(cnvtlookbehind('",trim(strInterval),
								"' ,cnvtdatetime(curdate,000000)))")
						else ; intPara = 2
							set strTODAYend = concat("cnvtdatetime(cnvtlookbehind('",trim(strInterval),
								"' ,cnvtdatetime(curdate,235959)))")
						endif
					;elseif (cnvtupper(trim(strQualifier)) in (">=", "<=", "BETWEEN"))
					;elseif (cnvtupper(trim(strQualifier)) in (">=", "<="))
					elseif (cnvtupper(trim(strQualifier)) in (">", "<="))
						set strTODAYbegin = concat("cnvtdatetime(cnvtlookbehind('", trim(strInterval),
							"' ,cnvtdatetime(curdate,235959)))")
					else ; "=" or "!="
						set strTODAYbegin = concat("cnvtdatetime(cnvtlookbehind('", trim(strInterval),
							"' ,cnvtdatetime(curdate,0)))")
						set strTODAYend = concat("cnvtdatetime(cnvtlookbehind('",trim(strInterval),
							"' ,cnvtdatetime(curdate,235959)))")
					endif
				elseif (intSynPlus = 0 and intSynMinus = 0)
					; TODAY
					set strTODAYbegin = "cnvtdatetime(cnvtdatetime(curdate,0))"
					set strTODAYend = "cnvtdatetime(cnvtdatetime(curdate, 235959))"
				endif ; end of intSynPlus & intSynMinus
			endif ; end of TODAY
 
		elseif (intSynNow > 0)
 
			; NOW +/-
			if ( (intSynPlus > 0 and intSynNow > intSynPlus) or
				 (intSynMinus > 0 and intSynNow > intSynMinus) )
				set strMsg = concat("Invalid Date Time String ", trim(strDateTime))
				set intRetVal = -1
				go to EndProgram
			else
				if (intSynPlus > 0)
					; NOW +
					set strTime = substring(intSynPlus+1, intSizeOfstrDateTime-intSynPlus, trim(strDateTime))
					if (isnumeric(strTime) = 0)
						set intFoundString = findstring("MINUTES", cnvtupper(trim(strTime)), 1)
						if (intFoundString = 0)
							set strMsg = concat("Invalid setup of NOW + ", trim(strTime))
							set intRetVal = -1
							go to EndProgram
						else ; intFoundString > 0
							set strTime = substring(1, intFoundString-1, strTime)
							if (isnumeric(strTime) = 0)
								set strMsg = concat("Invalid time - NOW + ", trim(strTime))
								set intRetVal = -1
								go to EndProgram
							endif ; end of numeric(strTime) = 0
						endif ; end of string
					endif ; end of isnumeric(strTime)=0
 
					set strInterval = trim(concat(trim(strTime), "MIN"))
					set strNowValue = concat("cnvtdatetime(cnvtlookahead('", trim(strInterval,3),
						"' ,cnvtdatetime(curdate,curtime3)))")
				elseif (intSynMinus > 0)
					; NOW -
					set strTime = substring(intSynMinus+1, intSizeOfstrDateTime-intSynPlus, trim(strDateTime))
					if (isnumeric(strTime) = 0)
						set intFoundString = findstring("MINUTES", cnvtupper(trim(strTime)), 1)
						if (intFoundString = 0)
							set strMsg = concat("Invalid setup of NOW - ", trim(strTime))
							set intRetVal = -1
							go to EndProgram
						else ; intFoundString > 0
							set strTime = substring(1, intFoundString-1, strTime)
							if (isnumeric(strTime) = 0)
								set strMsg = concat("Invalid time - NOW - ", trim(strTime))
								set intRetVal = -1
								go to EndProgram
							endif ; end of numeric(strTime) = 0
						endif ; end of string
					endif ; end of isnumeric(strTime)=0
 
					set strInterval = trim(concat(trim(strTime), "MIN"))
					set strNowValue = concat("cnvtdatetime(cnvtlookbehind('", trim(strInterval,3),
						"' ,cnvtdatetime(curdate,curtime3)))")
				elseif (intSynPlus = 0 and intSynMinus = 0)
					; NOW
					set strNowValue = concat("cnvtdatetime(cnvtdatetime(curdate,curtime3))")
				endif ; end of intSynPlus & intSynMinus
			endif ; end of NOW
		endif ;end of intSynToday & intSynNow
	endif ; end of if (intSynToday = 0 and intSynNow = 0)
end ; end of DateTimeConvert
;***********************************************************************************************************
 
call echo("Parameter OPT_LIST2 - ")
record recOPT_LIST2list
(
	1 cnt = i4
	1 qual[*]
		2 value = vc
		2 display = vc
)
set orig_param = OPT_LIST2
execute eks_t_parse_list with replace(reply, recOPT_LIST2list)
free set orig_param
 
;003 begin
set intCalc = 0
set ekssub->status_flag = 0
if (recOPT_LIST2list->cnt > 0)
	for (intCalc=1 to recOPT_LIST2list->cnt)
		if (findstring("@", recOPT_LIST2list->qual[intCalc].display))
			;014 begin
			if (intDtTmInd = 1)
				set recOPT_LIST2list->qual[intCalc].display =
					concat("trim('",recOPT_LIST2list->qual[intCalc].display, "')")
			else ;014 end
				set ekssub->parse_ind = 0
			endif ;014
			set ekssub->orig = recOPT_LIST2list->qual[intCalc].display
			execute eks_t_subcalc
			if (ekssub->status_flag != 1)
				set strMsg = "Invalid substitutions values found"
				set intRetVal = -1
				go to EndProgram
			else ; ekssub->status_flag = 1
				if (recOPT_LIST2list->qual[intCalc].display = recOPT_LIST2list->qual[intCalc].value)
					set recOPT_LIST2list->qual[intCalc].value = ekssub->mod
				endif
				set recOPT_LIST2list->qual[intCalc].display = ekssub->mod
			endif ; end of ekssub->status_flag
		endif ; end of findstring
	endfor ;end of for
endif ; end of recOPT_LIST2list->cnt > 0
 
if (ekssub->status_flag = 1 )
	call echo("After calling EKS_T_SUBCALC ---- Parameter LIST1 - ")
	call echo("Param   Value                                                        Display")
	call echo("-----   -----                                                        -------")
 
	set i = 0
	while (i < recOPT_LIST2list->cnt)
		call echo(concat(format(i,"#####"), "   ",
			format(recOPT_LIST2list->qual[i].value,"##########################################################"), "   ",
			format(recOPT_LIST2list->qual[i].display,"##########################################################")),1,0)
		set i = i + 1
	endwhile
endif
 
; check to see if parameter OPR_LIST2 is requried.
if (recOPT_LIST2list->cnt = 0)
	; paramter OPT_LIST2 is empty
	if (intQualifier_indx > 0)
		; qualifier is between or outside
		set strMsg = concat("The QUALIFIER is ", trim(QUALIFIER,3), ", but OPT_LIST2 was/were not specified.")
		set intRetVal = -1
		go to EndProgram
	endif ; end of intQualifier_indx
else ; recOPT_LIST2list->cnt > 0
	;parameter OPT_LIST2 is not empty
	if (intQualifier_indx = 0)
		; qualifier is not either between or outside.
		set strMsg = concat("The QUALIFIER is ", trim(QUALIFIER,3),
			", OPT_LIST2 should be empty.")
		set intRetVal = -1
		go to EndProgram
	elseif (strFieldType in ("I", "B", "S"))
		set strMsg = "OPT_LIST2 should be empty since the data type is not Number or Date"
		set intRetVal = -1
		go to EndProgram
	endif ; end of intQualifier_indx
 
	if (cnvtupper(trim(strFieldType)) = "Q")
		set intSynToday = findstring("TODAY", trim(recOPT_LIST2list->qual[1].display), 1)
		set intSynNow = findstring("NOW", trim(recOPT_LIST2list->qual[1].display), 1)
		call DateTimeConvert(cnvtupper(trim(recOPT_LIST2list->qual[1].display)),2)
		set strTodayBegin_2 = strTodayBegin
		set strTodayEnd_2 = strTodayEnd
		set strNowValue_2 = strNowValue
		set strFinalDateTime_2 = strFinalDateTime
		call echo(concat("strTodayBegin_2:    ", build(strTodayBegin_2)))
		call echo(concat("strTodayEnd_2:      ", build(strTodayEnd_2)))
		call echo(concat("strNowValue_2:      ", build(strNowValue_2)))
		call echo(concat("strFinalDateTime_2: ", build(strFinalDateTime_2)))
 
		if (intSynToday > 0)
			set strVALUE2 = strTodayEnd_2
		elseif (intSynNow > 0)
			;016 set strVAULE2 = strNowValue_2
			set strVALUE2 = strNowValue_2 ;016
		elseif (intSynToday = 0 and intSynNow = 0)
			set strVALUE2 = strFinalDateTime_2
		endif
 
	elseif (cnvtupper(trim(strFieldType)) = "N")
		set strVALUE2 = "cnvtreal(recOPT_LIST2list->qual[1].value)"
	endif
endif ; end of recOPT_LIST2list->cnt
 
;002 BEGIN
record recSPIndex(
	1 cnt = i2
	1 qual[*]
		2 SPIndex = i2
		2 subSPIndex = i2
)
 
declare intOptLink_ind = i2 with public, noconstant(0)
declare intPosBarSign = i2 with public, noconstant(0)
declare intPosColonSign = i2 with public, noconstant(0)
 
if (intOrdMethod_indx = 5)
	call echo(concat("Parameter LINK - ", build(LINK)))
	if ( validate(LINK,"Z") = "Z" and validate(LINK,"Y") = "Y")
		set strMsg = "LINK parameter does not exist."
		set intRetVal = -1
		go to EndProgram
	else
		if (isnumeric(LINK))
			set link_indx = cnvtint(LINK)
			set num_logic_temps = size(eksdata->tqual[tinx].qual,5)
			if (link_indx <= 0 or link_indx > num_logic_temps)
				set strMsg = concat("LINK value of ",trim(LINK)," is invalid.")
				set intRetVal = -1
				go to EndProgram
			else
				if (cnvtupper(trim(eksdata->tqual[tinx].qual[link_indx]->data[1].misc,5))="<SPINDEX>")
					if (size(eksdata->tqual[tinx].qual[link_indx]->data, 5) > 1)
						call echo(concat("There is/are ",
							trim(cnvtstring(size(eksdata->tqual[tinx].qual[link_indx]->data, 5)-1),3),
							" SPIndex found in Linked Logic Template"))
						set intOptLink_ind = 1
						set stat =
							alterlist(recSPIndex->qual, size(eksdata->tqual[tinx].qual[link_indx]->data, 5)-1)
						set recSPIndex->cnt = size(eksdata->tqual[tinx].qual[link_indx]->data, 5) - 1
						for ( i = 1 to size(eksdata->tqual[tinx].qual[link_indx]->data, 5)-1)
							set intPosBarSign =
								findstring("|", eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc, 1)
							set intPosColonSign =
								findstring(":", eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc, 1)
							if ( isnumeric(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc) )
								set recSPIndex->qual[i].SPIndex =
									cnvtint(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc)
								set recSPIndex->qual[i].subSPIndex = 0
							else ; isnumeric(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc) = 0
								if ( intPosBarSign > 0 )
									if ( intPosColonSign = 0 )
										if ( isnumeric(substring(1, intPosBarSign-1,
											eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc)) )
											set recSPIndex->qual[i].SPIndex =
												cnvtint( substring(1, intPosBarSign-1,
												eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc) )
											set recSPIndex->qual[i].subSPIndex = 0
										else
											set strMsg = concat("Invalid misc value ",
												trim(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc),
												" found in data[", trim(cnvstring(i+1)),
												"].misc. The value should be numeric",
												" in front of the bar sign")
											set intRetVal = -1
											go to EndProgram
										endif ; end of isnumeric for value before "|"
									else ; intPosColonSign > 0
										if (intColonSign >= intPosBarSign)
											set strMsg = concat("Invalid misc value ",
												trim(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc),
												" found in data[", trim(cnvtstring(i+1)),
												"].misc. The colon sign should show ",
												"before the bar sign")
											set intRetVal = -1
									 		go to EndProgram
										else  ; intColonSign < intPosBarSign
											if (isnumeric(substring(1, intPosColonSign,
												eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc)))
												set recSPIndex->qual[i].SPIndex =
													cnvtreal(substring(1, intPosColonSign,
													eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc))
											else
												set strMsg = concat("Invalid misc value ",
													trim(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc),
													" found in data[", trim(cnvtstring(i+1)),
													"].misc. The value before colon sign ",
													"should be numeric")
												set intRetVal = -1
												go to EndProgram
											endif
 
											if (isnumeric(substring(intPosColonSign+1,
												intPosBarSign-intPosColonSign - 1,
												eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc)))
 
												set recSPIndex->qual[i].subSPIndex=
													cnvtreal(substring(intPosColonSign+1,
													intPosBarSign-intPosColonSign - 1,
													eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc))
											else
												set strMsg = concat("Invalid misc value ",
													trim(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc),
													" found in data[", trim(cnvtstring(i+1)),
													"].misc. The value between colon sign ",
													"and bar sign should be numeric.")
												set intRetVal = -1
												go to EndProgram
											endif
										endif ; end of intColonSign & intPosBarSign
									endif ; end of intPosColonSign
								else ; intPosBarSign = 0
									if (intPosColonSign = 0)
										set strMsg = concat("Invalid misc value ",
											trim(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc),
											" found in data[", trim(cnvtstring(i+1)), "].misc.",
											" The value should be numeric.")
										set intRetVal = -1
										go to EndProgram
									else ; intPosColonSign > 0
										if (isnumeric(substring(1, intPosColonSign-1,
											eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc)) )
											set recSPIndex->qual[i].SPIndex =
												cnvtint(substring(1, intPosColonSign-1,
												eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc))
											if (isnumeric(substring(intPosColonSign+1,
												size(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc)-intPosColonSign,
												eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc)))
												set recSPIndex->qual[i].subSPIndex=
													cnvtint(substring(intPosColonSign+1,
													size(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc)-intPosColonSign,
													eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc))
											else
												set strMsg = concat("Invalid misc value ",
													trim(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc),
													" found in data[",trim(cnvtstring(i+1)),"].misc.",
													" The value after colon should be numeric.")
												set intRetVal = -1
												go to EndProgram
											endif
										else
											set strMsg = concat("Invalid misc value ",
												trim(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc),
												" found in data[", trim(cnvtstring(i+1)),"].misc.",
												" The value before colon should be numeric.")
											set intRetVal = -1
											go to EndProgram
										endif ;end of if (isnumeric
									endif ;edn of if (intPosColonSign = 0)
								endif ; end of intPosBarSign
							endif ; end of if ( isnumeric(eksdata->tqual[tinx].qual[link_indx]->data[i+1].misc) )
						endfor ;end of i
					else ;size(eksdata->tqual[tinx].qual[link_indx]->data[1].misc, 5) <= 1
						set strMsg = "There is no qualified SPIndex in Misc on linked logic template"
						set intRetVal = -1
						go to EndProgram
					endif ;size(eksdata->tqual[tinx].qual[link_indx]->data, 5)
				else  ;cnvtupper(trim(eksdata->tqual[tinx].qual[link_indx]->data,5)) != "<SPINDEX>"
					set retVal = -1
					go to EndProgram
				endif ; end of cnvtupper(trim(eksdata->tqual[tinx].qual[link_indx]->data[1].misc,3))
			endif ; end of link_indx <= 0 or link_indx > num_logic_temps
		else  ; isnumeric(LINK)
			set strMsg = concat("Invalid link value ", trim(LINK),
				"LINK parameter is requried for template ", trim(tname))
			set intRetVal = -1
			go to EndProgram
		endif ; end of isnumeric(LINK)
	endif ; end of LINK
else ; intOrdMethod_indx != 5
	set intOptLink_ind = 0
endif ; end of intOrdMethod_indx
;002 END
 
; end of the parameter setting.
/*021 move to the top
record SPIndex(
	1 cnt = i2
	1 qual[*]
		2 Index = i4
		2 NewActionInd = i2 ;021
		2 IngInd = i2		;013
		2 cnt_Ingredient = i2
		2 qual_Ingredient[*]
			3 Index_Ingredient = i4
)
*/
declare intOrderListCount = i4 with public, noconstant(0)	; integer of Order List cOUNT
declare intIngredientListCount = i4 with public, noconstant(0)	; integer of Ingredient List Count
declare intIngredientInd = i4 with public, noconstant(0)	; integer of IngredientList Indicator
; -> 1=with IngredientList, 0=without IngredientList
declare intOrderIndex = i4 with public, noconstant(0)		; integer of Order List index
declare intIngredientIndex = i4 with public, noconstant(0)	; integer of Ingredient List Index
declare intGlobalResult = i2 with public, noconstant(0)       	; integer result
 
;04-23-02
;call echo("OrderList->SynonymId  CatalogCd  CatalogTypeCd  ActivityTypeCd  ActivitySubTypeCd  Physician")
;call echo("---------  ---------  ---------  -------------  --------------  -----------------  ---------")
 
call echo(concat("OLst->SynonymId      CatalogCd      OrderId        ActionTypeCd   CatalogTypeCd  ",
	"ActivityTypeCd ActivitySuTyCd Physician     "))
call echo(concat("----  -------------- -------------- -------------- -------------- -------------- ",
	"-------------- -------------- --------------"))
 
;002
if (intOrdMethod_indx = 5)
	;linked logic template
	for (i = 1 to recSPIndex->cnt)
		call echo(concat(format(recSPIndex->qual[i].SPIndex, "####"), "  ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex].synonym_code, "############.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex].catalog_code, "############.#"), " ",
			;04-23-02
			format(request->OrderList[recSPIndex->qual[i].SPIndex].orderId, "############.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex].ActionTypeCd, "############.#"), " ",
 
			format(request->OrderList[recSPIndex->qual[i].SPIndex].catalogTypeCd, "############.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex].activityTypeCd, "############.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex].activitySubTypeCd, "############.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex].Physician, "############.#") ))
 
		If (size(request->OrderList[recSPIndex->qual[i].SPIndex]->DetailList, 5) > 0 and
			( i=1 or (i>1 and recSPIndex->qual[i].SPIndex != recSPIndex->qual[i-1].SPIndex)) )
 
			call echo(concat("  De->OeFieldId      OeFieldValue   OeFieldDisplayValue        OeFieldDtTmValue           ",
				"oeFieldMeaning          "))
			call echo(concat("  --  -------------- -------------- ------------------------- -------------------------  ",
				"------------------------"))
			for (k=1 to size(request->OrderList[recSPIndex->qual[i].SPIndex]->DetailList, 5))
				call echo(concat(format(k, "####"), "  ",
					format(request->OrderList[recSPIndex->qual[i].SPIndex]->DetailList[k].oeFieldId, "############.#"), " ",
					format(request->OrderList[recSPIndex->qual[i].SPIndex]->DetailList[k].oeFieldValue, "############.#"), " ",
					format(request->OrderList[recSPIndex->qual[i].SPIndex]->DetailList[k].oeFieldDisplayValue,
					"#########################"), " ",
					format(request->OrderList[recSPIndex->qual[i].SPIndex]->DetailList[k].oeFieldDtTmValue,
					"#########################"), "  ",
					format(request->OrderList[recSPIndex->qual[i].SPIndex]->DetailList[k].oeFieldMeaning,
					"#########################") ))
			endfor
		endif
 
		set intOrderIndex = recSPIndex->qual[i].SPIndex
 
		if (recSPIndex->qual[i].subSPIndex > 0)
			call echo(concat("  In->CatalogCd     SynonymId     strengthDose  strengthUnit  ",
				"volumeDose    volumeUnit    freetextDose  doseQuantity  dseQuantityUt"))
			call echo(concat("  --  -------------- -------------- -------------- -------------- ",
				"-------------- -------------- -------------- -------------- --------------"))
			call echo(concat(format(recSPIndex->qual[i].subSPIndex, "####"), "  ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].catalogCd,
			"###########.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].synonymid,
			"###########.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].strengthDose,
			"###########.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].strengthUnit,
			"###########.#"), " ",
            format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].volumeDose,
			"###########.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].volumeUnit,
			"###########.#"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].freetextdose,
			"#############"), " ",
			format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].doseQuantity,
			"###########.#"), " ",
		  format(request->OrderList[recSPIndex->qual[i].SPIndex]->IngredientList[recSPIndex->qual[i].subSPIndex].doseQuantityUnit,
			"###########.#")))
			set intIngredientIndex = recSPIndex->qual[i].subSPIndex
			set intIngredientInd = 1 ;recSPIndex->qual[i].SPIndex
 
			if (iNewActionOldTemplateInd = 0) ;021
				call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType, strQualifier,
					strValue1, strValue2, intIngredientInd, intOrderIndex, intIngredientIndex)
			endif ;021
 
			set intIngredientListCount = 0
		else ; if (recSPIndex->qual[i].subSPIndex = 0)
			set intIngredientIndex = 0 ;recSPIndex->qual[i].subSPIndex
			set intIngredientInd = 0; recSPIndex->qual[i].SPIndex
			if (iNewActionOldTemplateInd = 0) ;021
				call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType, strQualifier,
					strValue1, strValue2, intIngredientInd, intOrderIndex, intIngredientIndex)
			endif ;021
		endif ; end of recSPIndex->qual[i].subSPIndex
	endfor ; end of for (i = 1 to recSPIndex->cnt)
 
else
 
	for (i=1 to size(request->OrderList,5))
 
		call echo(concat(format(i, "####"), "  ",
			format(request->OrderList[i].synonym_code, "############.#"), " ",
			format(request->OrderList[i].catalog_code, "############.#"), " ",
			format(request->OrderList[i].orderid, "############.#"), " ",
			format(request->OrderList[i].ActionTypeCd, "############.#"), " ",
			format(request->OrderList[i].catalogTypeCd, "############.#"), " ",
			format(request->OrderList[i].activityTypeCd, "############.#"), " ",
			format(request->OrderList[i].activitySubTypeCd, "############.#"), " ",
			format(request->OrderList[i].Physician, "############.#") ))
 
		if (size(request->OrderList[i]->DetailList, 5) > 0)
			call echo(concat("  De->OeFieldId      OeFieldValue   OeFieldDisplayValue       OeFieldDtTmValue          ",
				"oeFieldMeaning          "))
			call echo(concat("  --  -------------- -------------- ------------------------- ------------------------- ",
				"------------------------"))
			for (k=1 to size(request->OrderList[i]->DetailList, 5))
				call echo(concat(format(k, "####"), "  ",
					format(request->OrderList[i]->DetailList[k].oeFieldId, "############.#"), " ",
					format(request->OrderList[i]->DetailList[k].oeFieldValue, "############.#"), " ",
					format(request->OrderList[i]->DetailList[k].oeFieldDisplayValue, "#########################"), " ",
					format(request->OrderList[i]->DetailList[k].oeFieldDtTmValue, "#########################"), " ",
					format(request->OrderList[i]->DetailList[k].oeFieldMeaning, "#########################") ))
			endfor
		endif
 
		set intOrderIndex = i
 
		if (size(request->OrderList[i]->IngredientList,5) > 0)
 
			call echo(concat("  In->CatalogCd     SynonymId     strengthDose  strengthUnit  ",
				"volumeDose    volumeUnit    freetextDose  doseQuantity  dseQuantityUt"))
			call echo(concat("  --  ------------- ------------- ------------- ------------- ",
				"------------- ------------- ------------- ------------- -------------"))
			for (j=1 to size(request->OrderList[i]->IngredientList,5))
				call echo(concat(format(j, "####"), "  ",
					format(request->OrderList[i]->IngredientList[j].catalogCd, "###########.#"), " ",
					format(request->OrderList[i]->IngredientList[j].synonymid, "###########.#"), " ",
					format(request->OrderList[i]->IngredientList[j].strengthDose, "###########.#"), " ",
					format(request->OrderList[i]->IngredientList[j].strengthUnit, "###########.#"), " ",
					format(request->OrderList[i]->IngredientList[j].volumeDose, "###########.#"), " ",
					format(request->OrderList[i]->IngredientList[j].volumeUnit, "###########.#"), " ",
					format(request->OrderList[i]->IngredientList[j].freetextdose, "#############"), " ",
					format(request->OrderList[i]->IngredientList[j].doseQuantity, "###########.#"), " ",
					format(request->OrderList[i]->IngredientList[j].doseQuantityUnit, "###########.#")))
				set intIngredientIndex = j
				set intIngredientInd = 1
				if (iNewActionOldTemplateInd = 0) ;021
					call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType, strQualifier,
						strValue1, strValue2, intIngredientInd, intOrderIndex, intIngredientIndex)
				endif ;021
			endfor ;end of for (j=1 to size(request->OrderList[i]->IngredientList,5))
			set intIngredientListCount = 0
		else
			set intIngredientInd = 0
			set intIngredientIndex = 0
			if (iNewActionOldTemplateInd = 0);021
				call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType, strQualifier,
					strValue1, strValue2, intIngredientInd, intOrderIndex, intIngredientIndex)
			endif ;021
		endif ;end of request->OrderList[i]->IngredientList,5)
	endfor ;end of for (i=1 to size(request->OrderList,5))
endif
 
/********************************************************************************************************
018 Check an orderable match
*********************************************************************************************************/
 
subroutine Check_Orderable (intOrdMethod_indx_co, intIngredientInd_co, intOrderIndex_co, intIngredientIndex_co)
 
	declare ix = i4 with protect
 
	call echo("Subroutine Check_Orderable. Checking orderables for Find_Not_Defined")
 
	set Found_Ord_ind = 0
 
    if ((intOrdMethod_indx_co not in (3,5)) and recOPT_ORDERSlist->cnt > 0) 	;019
		if (intIngredientInd_co = 1)
			for (ix=1 to recOPT_ORDERSlist->cnt)
				call echo(concat(build(Request->OrderList[intOrderIndex_co]->IngredientList[intIngredientIndex_co].catalogcd),
					" compare with ", build(cnvtreal(recOPT_ORDERSlist->qual[ix].value))))
				if (	(intOrdMethod_indx_co = 1 and
						 Request->OrderList[intOrderIndex_co]->IngredientList[intIngredientIndex_co].synonymid =
						 cnvtreal(recOPT_ORDERSlist->qual[ix].value))
					or	(intOrdMethod_indx_co = 2 and
						 Request->OrderList[intOrderIndex_co]->IngredientList[intIngredientIndex_co].catalogcd =
						 cnvtreal(recOPT_ORDERSlist->qual[ix].value)) )
					set ix = recOPT_ORDERSlist->cnt + 1
					call echo("match found and keep it")
					set Found_Ord_ind = 1
				endif
			endfor
		else
			for (ix=1 to recOPT_ORDERSlist->cnt)
				call echo(concat(build(Request->OrderList[intOrderIndex_co].catalog_code),
					" compare with ", build(cnvtreal(recOPT_ORDERSlist->qual[ix].value))))
				if (	(intOrdMethod_indx_co = 1 and Request->OrderList[intOrderIndex_co].synonym_code =
						 cnvtreal(recOPT_ORDERSlist->qual[ix].value))
					or	(intOrdMethod_indx_co = 2 and
						 Request->OrderList[intOrderIndex_co].catalog_code =
						 cnvtreal(recOPT_ORDERSlist->qual[ix].value)) )
					set ix = recOPT_ORDERSlist->cnt + 1
					call echo("match found and keep it")
					set Found_Ord_ind = 1
				endif
			endfor
		endif ;end of intIngredientInd_co
	else	;019
		set Found_Ord_ind = 1
		call echo("Orderables are not specified. Bypass check and return true.")
	endif	;end of 019
 
	call echo(concat("End of Check_Orderable. Found_Ord_ind = ", build(Found_Ord_ind)))
 
end
 
/********************************************************************************************************
011 Look for defined, not defined and not listed and not defined orderables
*********************************************************************************************************/
subroutine Find_Not_Defined(intOrdMethod_indx, strRequestType, strFieldName, strFieldType, strQualifier,
	intIngredientInd, intOrderIndex, intIngredientIndex )
 
	declare i2 = i4 with noconstant(0), protect
	declare detSize = i4 with noconstant(0), protect
	declare ingSize = i4 with noconstant(0), protect
	declare parse_string = vc with protect
	declare tmpIngCnt = i4 with noconstant(0), protect
	declare tmpQualifier = vc with protect
	declare FND_ind = i2 with noconstant(0), protect
 
	set strsubRequestType = trim(strRequestType, 3)
	set strsubFieldName = trim(strFieldName, 3)
	set strsubFieldType = trim(strFieldType, 3)
	set strsubQualifier = trim(strQualifier,3)
 
	call echo("calling subroutine Find_Not_Defined....")
	call echo(concat("   intOrdMethod_indx:    ", build(intOrdMethod_indx)))
	call echo(concat("   strsubRequestType:    ", build(strsubRequestType)))
	call echo(concat("   strsubFieldName:      ", build(strSubFieldName)))
	call echo(concat("   strsubFieldType:      ", build(strsubFieldType)))
	call echo(concat("   strsubQualifier:      ", build(strsubQualifier)))
	call echo(concat("   strsubValue1:         ", build(strsubValue1)))
	call echo(concat("   strsubValue2:         ", build(strsubValue2)))
	call echo(concat("   douOeFieldId:         ", build(douOeFieldId)))
	call echo(concat("   stroeFieldMeaning:    ", build(strOeFieldMeaning)))
	call echo(concat("   intIngredientInd:     ", build(intIngredientInd)))
	call echo(concat("   intOrderIndex:        ", build(intOrderIndex)))
	call echo(concat("   intIngredientIndex:   ", build(intIngredientIndex)))
 
	set tmpQualifier = cnvtlower(trim(strsubQualifier))
 
	; ***************************************************************************************************************
	; Find matching details.
	; ***************************************************************************************************************
	; call echorecord(request)
 
	set FND_ind = 0
	set FND_continue = 0
 
	; 018 Check orderable.
	call Check_Orderable(intOrdMethod_indx, intIngredientInd, intOrderIndex, intIngredientIndex)
	if (Found_Ord_ind <= 0)
		call echo("Exit Find_Not_Defined. Current orderable doesn't match.")
		return
	else
		call echo("Orderable match found. Continue Find_Not_Defined.")
	endif
 
	if (strRequestType = "IngredientList")
 
		set ingSize = size(request->OrderList[intOrderIndex].IngredientList,5)
		call echo(concat("Size of the IngredientList : ", build(ingSize)))
		if (ingSize > 0)
			; Search IngredientList if it's size is greater then 0
			if (strsubFieldName = "VOLUMEDOSEUNIT")
				set strsubFieldName = "VOLUMEUNIT"
			elseif (strsubFieldName = "STRENGTHDOSEUNIT")
				set strsubFieldName = "STRENGTHUNIT"
			elseif (strsubFieldName = "FREETXTDOSE")
				set strsubFieldName = "FREETEXTDOSE"
			elseif (strsubFieldName = "DOSEQTYUNIT")
				set strsubFieldName = "DOSEQUANTITYUNIT"
			elseif (strsubFieldName = "DOSEQTY")
				set strsubFieldName = "DOSEQUANTITY"
			elseif (cnvtupper(trim(strsubFieldName)) = "COMPONENTFREQ")
				set strsubFieldName = "BAG_FREQUENCY_CD"
			endif
 
			call echo(concat("modified strsubFieldName: ", build(strsubFieldName)))
 
			if (intIngredientIndex <= 0)
				set intIngredientIndex = 1
			endif
			set parse_string = concat("request->OrderList[intOrderIndex].IngredientList[intIngredientIndex].",
				trim(strsubFieldName))
			call echo(parse_string)
 
			select into "nl:"
			from (dummyt d1 with seq = 1)
			where parser(parse_string)
			detail
				FND_ind = 1
			with nocounter
 
		endif	; (ingSize > 0)
 
		if (FND_ind <= 0)
			; Search DetailList if match wasn't found in the IngredientList section
			set detSize = size(request->OrderList[intOrderIndex].DetailList,5)
			call echo(concat("IngredientList is empty. Size of the DetailList : ", build(detSize)))
			if (detSize > 0)
				for (i2 = 1 to detSize)
					if (trim(request->OrderList[intOrderIndex].DetailList[i2].oeFieldMeaning) = strsubFieldName)
						set FND_ind = 1
						; exit the loop
						set i2 = detSize + 1
					endif
				endfor ;end of for (i2 = 1 to detSize)
			endif	; (detSize > 0)
		endif ;end of if (FND_ind <= 0)
 
	elseif (strRequestType = "OrderList")
 
		call echo("Details at the OrderList level are always defined ")
		set FND_ind = 1
 
	else
		; Search DetailList section
		set detSize = size(request->OrderList[intOrderIndex].DetailList,5)
		for (i2 = 1 to detSize)
			if (request->OrderList[intOrderIndex].DetailList[i2].oeFieldId = douOeFieldId)
				set FND_ind = 1
				; exit the loop
				set i2 = detSize + 1
			endif
		endfor
	endif	; strRequestType
 
	call echo(build2("FND_ind = ", FND_ind))
	call echo(build2("tmpQualifier = ", tmpQualifier))
 
	if ((tmpQualifier = "def" and FND_ind = 1) or (tmpQualifier = "not def" and FND_ind = 0)
		or (tmpQualifier = "not def not in" and FND_ind = 0))
 
		set FND_continue = 0
 
		set intOrderListCount = intOrderListCount + 1	;018
		set SPIndex->cnt = intOrderListCount			;018
		;018 set SPIndex->cnt = SPIndex->cnt + 1
 
		set stat = alterlist(SPIndex->qual, SPIndex->cnt)
		set SPIndex->qual[SPIndex->cnt].index = intOrderIndex
		set SPIndex->qual[SPIndex->cnt].ingind = intIngredientInd	;013
 
 		if (intIngredientInd > 0) ;018
			set tmpIngCnt = 1
 
			set SPIndex->qual[SPIndex->cnt]->cnt_Ingredient = tmpIngCnt
			set stat = alterlist(SPIndex->qual[SPIndex->cnt]->qual_Ingredient, tmpIngCnt)
			set SPIndex->qual[SPIndex->cnt]->qual_Ingredient[tmpIngCnt].Index_Ingredient = intIngredientIndex
		endif ;end of 018
 
		call echo(concat("Found match - ", trim(uar_get_code_display(request->OrderList[intOrderIndex].catalog_code)),
			" - ", build(SPIndex->qual[SPIndex->cnt].index)))
	elseif ((tmpQualifier = "def not in" and FND_ind = 1) or (tmpQualifier = "not def not in" and FND_ind = 1))
		set FND_continue = 1
		call echo(concat("Found match - ", trim(uar_get_code_display(request->OrderList[intOrderIndex].catalog_code)),
			" - ", build(SPIndex->qual[SPIndex->cnt].index)))
		set strQualifier = "not in"
		set strsubQualifier = trim(strQualifier,3)
	else
		set FND_continue = 0
		call echo("Match not found!")
	endif
 
	call echo("End of Find_Not_Defined.")
 
end
 
/********************************************************************************************************
 main checking program
*********************************************************************************************************/
subroutine Comparison
	(intOrdMethod_indx, strRequestType, strFieldName, strFieldType, strQualifier, strValue1, strValue2,
	intIngredientInd, intOrderIndex, intIngredientIndex )
 
	set strsubRequestType = fillstring(100, " ")
	set strsubFieldName = fillstring(100, " ")
	set strsubFieldType = fillstring(1, " ")
	set strsubQualifier = fillstring(20, " ")
	set strsubValue1 = fillstring(100, " ")
	set strsubValue2 = fillstring(100, " ")
 
	set strsubRequestType = trim(strRequestType, 3)
	set strsubFieldName = trim(strFieldName, 3)
	set strsubFieldType = trim(strFieldType, 3)
	set strsubQualifier = trim(strQualifier,3)
	set strsubValue1 = trim(strValue1, 3)
	set strsubValue2 = trim(strValue2, 3)
 
	; 011
	if (cnvtlower(trim(strsubQualifier)) in ("not def", "def", "def not in", "not def not in"))
		call Find_Not_Defined(intOrdMethod_indx, strRequestType, strFieldName, strFieldType, strQualifier,
			intIngredientInd, intOrderIndex, intIngredientIndex)
 
		if (FND_continue = 0)
			return
		endif
	endif
	; end of 011
 
	call echo("calling subroutine Comparison....")
	call echo(concat("   intOrdMethod_indx:    ", build(intOrdMethod_indx)))
	call echo(concat("   strsubRequestType:    ", build(strsubRequestType)))
	call echo(concat("   strsubFieldName:      ", build(strSubFieldName)))
	call echo(concat("   strsubFieldType:      ", build(strsubFieldType)))
	call echo(concat("   strsubQualifier:      ", build(strsubQualifier)))
	call echo(concat("   strsubValue1:         ", build(strsubValue1)))
	call echo(concat("   strsubValue2:         ", build(strsubValue2)))
	call echo(concat("   douOeFieldId:         ", build(douOeFieldId)))
	call echo(concat("   stroeFieldMeaning:    ", build(strOeFieldMeaning)))
	call echo(concat("   intIngredientInd:     ", build(intIngredientInd)))
	call echo(concat("   intOrderIndex:        ", build(intOrderIndex)))
	call echo(concat("   intIngredientIndex:   ", build(intIngredientIndex)))
 
 	;020 begin
 	declare nXTime = i2 with protect, noconstant(0)
 	for (ix = 1 to size(Request->OrderList[intOrderIndex].DetailList,5))
 		;021 if (Request->OrderList[intOrderIndex]->DetailList[ix].oeFieldId = douOeFieldId)
 		if (Request->OrderList[intOrderIndex]->DetailList[ix].oeFieldId = douOeFieldId and
 			Request->OrderList[intOrderIndex]->DetailList[ix].oeFieldId > 0) ;021
 			set nXTime = nXTime + 1
 		endif
 	endfor
 	;021 begin
 	if (nXTime = 0)
 		set nXTime = 1
 	endif
 	;021 end
 	call echo(Concat("   nXTime: ", build(nXTime)))
 	;020 end
 
	declare strIngredient = vc with public, noconstant("")			; IngredientList string
	set strIngredient = fillstring(500, " ")
	;declare strTempIngredient = vc with public, noconstant("")		; temp string of IngredientList for parser
	set strTempIngredient = fillstring(500, " ")
	declare strDetailList = vc with public, noconstant("")			; DetailList string
	set strDetailList = fillstring(500, " ")
	declare strTempDetailList = vc with public, noconstant("")		; temp string of DetailList for parser
	set strTempDetailList = fillstring(500, " ")
	declare intCnt = i2 with public, noconstant(0)				; integer count
	declare intResult = i2 with public, noconstant(0)			; integer result
 
	declare intLoopCnt = i2 with public, noconstant(0)
 
	if (intOrdMethod_indx != 4 )
 
		; checking catalog_cd, synonym_id or *any_orderable
		if (cnvtupper(trim(strsubRequestType)) = "INGREDIENTLIST")
 
			call echo("In subroutine Comparison - Checking Ingredient List .... ")
			if (size(request->OrderList[intOrderIndex]->INGREDIENTLIST,5)=0)
				call echo("IngredientList is EMPTY")
				set intResult = 0
				if (intOnlyIngredient_ind = 0)
					; check IngredientList & Detail List
					set strRequestType = "DetailList"
					set douOeFieldId = cnvtreal(trim(recArguments->items[2].value))
					set strFieldType = trim(recArguments->items[intPlusPosition-1].value)
					set strOeFieldMeaning = trim(recArguments->items[intPlusPosition-2].value)
					call echo(concat("strOeFieldMeaning: ", build(strOeFieldMeaning)))
					call echo("Size of IngredientList = 0, check Detail List.....")
					;set intIngredientInd = 0
					call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType,
							strQualifier, strValue1, strValue2, intIngredientInd,intOrderIndex, intIngredientIndex)
				else ; intOnlyIngredient_ind = 1
					; check IngredientList & OrderList
					set strRequestType = "OrderList"
					call echo("Size of IngredientList = 0, check Order List.....")
					if ( cnvtupper(trim(strsubFieldName,3)) = "CATALOGCD")
						set strFieldName = "catalog_code"
						call Comparison (intOrdMethod_indx, strRequestType, "catalog_code", strFieldType,
							strQualifier, strValue1, strValue2, intIngredientInd,intOrderIndex, intIngredientIndex)
					else  ; synonym_code
						set strFieldName = "synonym_code"
						call Comparison (intOrdMethod_indx, strRequestType, "synonym_code", strFieldType,
							strQualifier, strValue1, strValue2, intIngredientInd,intOrderIndex, intIngredientIndex)
					endif ; end of strFieldName
				endif ; end of intOnlyIngredient_ind
 
			else ; ingredient list is not empty
 
				; adjust field name for IngredientList
				if (cnvtupper(trim(strsubFieldName)) = "VOLUMEDOSEUNIT")
					set strsubFieldName = "VOLUMEUNIT"
				elseif (cnvtupper(trim(strsubFieldName)) = "STRENGTHDOSEUNIT")
					set strsubFieldName = "STRENGTHUNIT"
				elseif (cnvtupper(trim(strsubFieldName)) = "FREETXTDOSE")
					set strsubFieldName = "FREETEXTDOSE"
				elseif (cnvtupper(trim(strFieldName)) = "DOSEQTYUNIT")
					set strsubFieldName = "DOSEQUANTITYUNIT"
				elseif (cnvtupper(trim(strFieldName)) = "DOSEQTY")
					set strsubFieldName = "DOSEQUANTITY"
				elseif (cnvtupper(trim(strFieldName)) = "COMPONENTFREQ")	; 011
					set strsubFieldName = "BAG_FREQUENCY_CD"				; 011
				endif
 
				call echo(concat("strsubFieldName: ", build(strsubFieldName)))
 
				; checking Ingredient List
				;02-02-02
				if (recLIST1list->cnt >= 1 and cnvtupper(trim(strsubQualifier)) in ("IN", "NOT IN") )
					; Identifier, Boolean, String
					call echo("Checking IngrdientList IBS")
					if (cnvtupper(trim(strsubQualifier)) = "IN")
						set strsubQualifier = "="
					else
						set strsubQualifier = "!="
					endif
 
					if (intIngredientInd = 1)
						; I, B, S  with Ingredient List
						call echo("Checking IngrdientList IBS with IngredientList")
						if (strsubFieldType = "S")
							set strTempIngredient =
							concat("cnvtupper(Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].",
							trim(strsubFieldName), ") ", trim(strsubQualifier), " ", trim(strsubValue1) )
						else
							set strTempIngredient =
							concat("Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].",
							trim(strsubFieldName), " ", trim(strsubQualifier), " ", trim(strsubValue1) )
						endif
 
						call echo(concat("strTempIngredient: ", build(strTempIngredient)))
 
						select into 'nl:'
						from (dummyt d2 with seq = value(recOPT_ORDERSlist->cnt)),
							 (dummyt d4 with seq = value(recLIST1list->cnt))
						plan d2 where
							(  (intOrdMethod_indx=1 and
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].synonymId
								= cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value) )
							or (intOrdMethod_indx=2 and
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								= cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value) )
							or (intOrdMethod_indx=3)
							/*002*/
							or (intOrdMethod_indx=5))
						join d4 where initarray(d4seq, d4.seq) and
							parser (strTempIngredient)
						head report
							intOrderListCount = intOrderListCount + 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->qual[intOrderListCount].index = intOrderIndex
							SPIndex->qual[intOrderListCount].ingind = intIngredientInd ;013
							SPIndex->cnt = intOrderListCount
							if (intOrderListCount > 1 /*002*/ and intOrdMethod_indx != 5)
								if (SPIndex->qual[intOrderListCount].index =
								    SPIndex->qual[intOrderListCount-1].index)
									intOrderListCount = intOrderListCount - 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->cnt = intOrderListCount
								endif ; end of equal to
							endif ; end of intOrderListCount > 1
						detail
							intResult = 1
							intGlobalResult = intResult
							intLoopCnt = intLoopCnt + 1
 
							if (strsubQualifier = "!=")
								;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
								if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
									intResult = negate(intResult)
									intGlobalResult = intResult
								endif
							endif
 
							if (intResult = 1)
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
									intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
                                if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
                                    SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount -1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
										intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient =
										intIngredientListCount
								endif ; end of euqal to
								endif ; end of intIngredientListCount > 1
							endif
						with nocounter
						set intLoopCnt = 0
					else
						;Identifier without Ingredient List
						call echo("without IngredientList")
						set intResult = 0
					endif ; end of intIngredientInd
 
					if (intResult !=1 )
						if (intOnlyCheckIngredient_ind = 0)
							if (intOnlyIngredient_ind = 0)
								set strRequestType = "DetailList"
								set douOeFieldId = cnvtreal(trim(recArguments->items[2].value))
								set strFieldType = trim(recArguments->items[intPlusPosition-1].value)
								set strOeFieldMeaning = trim(recArguments->items[intPlusPosition-2].value)
								call echo("Can not find qualified result in Ingredient List, check Detail List....")
								;set intIngredientInd = 0
								call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType,
									strQualifier, strValue1, strValue2, intIngredientInd, intOrderIndex,
									intIngredientIndex)
							else  ; intOnlyIngredient_ind = 1
								set strRequestType = "OrderList"
								call echo("Can not find qualified result in Ingredient List, check Order List.....")
								if ( cnvtupper(trim(strFieldName,3)) = "CATALOGCD")
									call Comparison (intOrdMethod_indx, strRequestType, "catalog_code",
										strFieldType, strQualifier, strValue1, strValue2, intIngredientInd,
										intOrderIndex, intIngredientIndex)
								else
									call Comparison (intOrdMethod_indx, strRequestType, "synonym_code",
										strFieldType, strQualifier, strValue1, strValue2, intIngredientInd,
										intOrderIndex, intIngredientIndex)
								endif ; end of strFieldName
							endif  ; end of intOnlyIngredient_ind
						endif ;intOnlyCheckIngredient_ind
					endif ; end of intResult
 
				elseif (recLIST1list->cnt = 1 and (strsubFieldType = "N" or strsubFieldType ="Q") )
					; no date time compare in ingredientList
					if (trim(strsubFieldType) = "N")
						if (cnvtupper(trim(strsubQualifier)) = "BETWEEN")
							set strTempIngredient=concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),"]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " >= ", trim(strsubValue1), " and ",
								"Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " <= ", trim(strsubValue2) )
						elseif (cnvtupper(trim(strsubQualifier)) = "OUTSIDE")
							set strTempIngredient=concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)), "]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " < ", trim(strsubValue1), " OR ",
								"Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " > ", trim(strsubValue2) )
						else
							set strTempIngredient=concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)), "]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " ", trim(strsubQualifier), " ", trim(strsubValue1))
						endif ; end of strQualifier
					endif ; end of strFieldType
 
					call echo(concat("strTempIngredient: ", build(strTempIngredient)))
 
					if (intIngredientInd = 1)
						; recLIST1list->cnt = 1 with Ingredient List
						call echo("Checking IngrdientList N with IngredientList")
						select into 'nl:'
						from (dummyt d2 with seq = value(recOPT_ORDERSlist->cnt))
						where
							( ( intOrdMethod_indx=1 and
							Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].synonymId
								= cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value) ) or
							( intOrdMethod_indx=2 and
							Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogCd
								= cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value) ) or
							( intOrdMethod_indx=3)
							/*002*/ or (intOrdMethod_indx=5) )
						head report
							intOrderListCount = intOrderListCount + 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->qual[intOrderListCount].index = intOrderIndex
							SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
							SPIndex->cnt = intOrderListCount
							if (intOrderListCount > 1 /*002*/ and intOrdMethod_indx != 5 )
								if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
									intOrderListCount = intOrderListCount - 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->cnt = intOrderListCount
								endif ; end of equal to
							endif ; end of intIngredientListCount > 1
						detail
							if ( parser(strTempIngredient) )
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient )
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
										intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient =
										intIngredientListCount
								endif ; end of euqal to
								endif ; intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
							endif ; end of parser
						with nocounter
					else ;intIngredientInd = 0
						; recLIST1list->cnt = 1 without Ingredient
						call echo("without IngredientList")
						set intResult = 0
					endif ; end of intIngredientInd
 
					if (intResult !=1 )
						if (intOnlyCheckIngredient_ind = 0)
							set strRequestType = "DetailList"
							set douOeFieldId = cnvtreal(trim(recArguments->items[2].value))
							set strFieldType = trim(recArguments->items[intPlusPosition-1].value)
							set strOeFieldMeaning = trim(recArguments->items[intPlusPosition-2].value)
							call echo("Can not find qualified result in Ingredient List, check Detail List.....")
							;set intIngredientInd = 0
							call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType,
								strQualifier, strValue1, strValue2, intIngredientInd,intOrderIndex,
								intIngredientIndex)
						endif ; end of intResult
					endif ; intOnlyCheckIngredient_ind
				endif  ; end of ingredientList size
			endif ; end of recLIST1list->cnt
 
		elseif (cnvtupper(trim(strsubRequestType)) = "DETAILLIST")
 
			; checking Detail List
			call echo("In subroutine Comparison - checking Detail List ....")
 
			if (size(request->OrderList[intOrderIndex]->DetailList,5)=0)
				call echo("Deatil List is EMPTY")
				set intResult = 0
			else
				if (recLIST1list->cnt >= 1 and cnvtupper(trim(strsubQualifier)) in ("IN", "NOT IN", "=", "!=") and
					cnvtupper(trim(strsubFieldType)) in ("I", "B", "S") )
 
					; Identifier, Bollean, String
					call echo("Checking DetailList IBS")
					if (cnvtupper(trim(strsubQualifier)) = "IN")
						set strsubQualifier = "="
					elseif (cnvtupper(trim(strsubQualifier)) = "NOT IN")
						set strsubQualifier = "!="
					endif
 
					if (strsubFieldType = "I" or strsubFieldType= "B")
						set strTempIngredient =
							concat("Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldValue ",
							trim(strsubQualifier), " ", trim(strsubVALUE1) )
					else ; strsubFieldType = "S"
						set strTempIngredient =
							concat("cnvtupper(Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldDisplayValue) ",
							trim(strsubQualifier), " ", trim(strsubVALUE1) )
					endif
 
					call echo(concat("strTempIngredient: ", build(strTempIngredient)))
 
					if (intIngredientInd = 1)
 
						call echo("Checking DetailList IBS with IngredientList")
						select into 'nl:'
						from (dummyt d2 with seq=value(recOPT_ORDERSlist->cnt)),
							 (dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
							 (dummyt d4 with seq=value(recLIST1list->cnt))
						plan d2 where
							(  (intOrdMethod_indx = 1 and
							Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].synonymId =
							cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
							or (intOrdMethod_indx = 2 and
							Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogCd =
							cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
							or (intOrdMethod_indx = 3) ;)
							/*002*/ or (intOrdMethod_indx=5) )
						join d3 where d3.seq > 0 and
							Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
							Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning =
							trim(strOeFieldMeaning)
						join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
					   	head report
							intOrderListCount = intOrderListCount + 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->qual[intOrderListCount].index = intOrderIndex
							SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
							SPIndex->cnt = intOrderListCount
							if (intOrderListCount > 1 /*002*/ and intOrdMethod_indx != 5)
								if (SPIndex->qual[intOrderListCount].index =
									SPIndex->qual[intOrderListCount-1].index)
									intOrderListCount = intOrderListCount - 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->cnt = intOrderListCount
								endif
							endif
						detail
 
							intResult = 1
							intGlobalResult = intResult
							intLoopCnt = intLoopCnt + 1
 
							if (strsubQualifier = "!=")
								;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
								if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
									intResult = negate(intResult)
									intGlobalResult = intResult
								endif
							endif
 
							if (intResult = 1)
 
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
									intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount -1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
										intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient =
										intIngredientListCount
								endif ; end of equal to
								endif ; end of intResult
							endif ; end of intIngredientListCount
						with nocounter
	                                        set intLoopCnt = 0
					else ;intIngredientInd =0
 
						call echo("Checking DetailList IBS without IngredientList")
						select into 'nl:'
						from (dummyt d2 with seq=value(recOPT_ORDERSlist->cnt)),
							 (dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
							 (dummyt d4 with seq=size(recLIST1list->qual,5))
						plan d2 where
							(  (intOrdMethod_indx = 1 and
								Request->OrderList[intOrderIndex].synonym_code =
								cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
							or (intOrdMethod_indx = 2 and
								Request->OrderList[intOrderIndex].catalog_code =
								cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
							or (intOrdMethod_indx = 3) ;)
								/*002*/ or (intOrdMethod_indx=5) )
						join d3 where d3.seq > 0 and
							Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
							Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning =
							trim(strOeFieldMeaning)
						join d4 where initarray(d4seq, d4.seq) and parser(strTempIngredient)
	 					detail
 
						   	intResult = 1
							intGlobalResult = intResult
							intLoopCnt = intLoopCnt + 1
 
							if (strsubQualifier = "!=")
								;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
								if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
									intResult = negate(intResult)
									intGlobalResult = intResult
								endif
							endif
 
							if (intResult = 1)
 
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1 /*002*/ and intOrdMethod_indx != 5 )
									if (SPIndex->qual[intOrderListCount].index =
										SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->qual[intOrderListCount].index = intOrderIndex
										SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of (intOrderListCount > 1
							endif ; end of intResult
						with nocounter
						set intCntLoop = 0
					endif ; end of intIngredient list
 
				elseif (recLIST1list->cnt = 1 and (strsubFieldType = "N" or strsubFieldType= "Q"))
 
					call echo("Checking DetailList NQ")
 
					;N, B all qualifier; strValue1/strValue2
 
					if ( cnvtupper(trim(strsubFieldType)) = "Q")
						if ( cnvtupper(trim(strsubQualifier)) = "BETWEEN" )
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue >= ", trim(strsubValue1),
								" and ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue <= ", trim(strsubValue2))
						elseif ( cnvtupper(trim(strsubQualifier)) = "OUTSIDE" )
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue < ", trim(strsubValue1),
								" or ","Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue > ", trim(strsubValue2))
						elseif (cnvtupper(trim(strsubQualifier)) = "=" and intSynToday > 0)
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue >= ", trim(strsubValue1),
								" and ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue <= ", trim(strsubValue2))
						elseif (cnvtupper(trim(strsubQualifier)) = "!=" and intSynToday > 0)
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue < ", trim(strsubValue1),
								" or ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue > ", trim(strsubValue2))
						else
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue ", trim(strsubQualifier),
								trim(strValue1))
 
						endif
 
					elseif ( cnvtupper(trim(strsubFieldType)) = "N")
 
						if ( cnvtupper(trim(strsubQualifier)) = "BETWEEN" )
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue >= ", trim(strsubValue1),
								" and ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue <= ", trim(strsubValue2))
						elseif ( cnvtupper(trim(strsubQualifier)) = "OUTSIDE" )
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue < ", trim(strsubValue1),
								" or ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue > ", trim(strsubValue2))
						else
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue ", trim(strsubQualifier, 3),
								trim(strValue1) )
						endif
					endif
 
					call echo(concat("strTempDetailList: ", build(strTempDetailList)))
 
					if ( intIngredientInd = 1 )
						call echo("Checking DetailList NQ with IngredientList")
						select into 'nl:'
						from (dummyt d2 with seq=value(recOPT_ORDERSlist->cnt)),
							 (dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5))
						plan d2 where
							(  (intOrdMethod_indx = 1 and
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].synonymId =
								cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
							or (intOrdMethod_indx = 2 and
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogCd =
								cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
							or (intOrdMethod_indx = 3) ;)
							/*002*/ or (intOrdMethod_indx=5) )
						join d3 where d3.seq > 0 and
							Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
							Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning =
							trim(strOeFieldMeaning) and
							parser(strTempDetailList)
						head report
							intOrderListCount = intOrderListCount + 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->qual[intOrderListCount].index = intOrderIndex
							SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
							SPIndex->cnt = intOrderListCount
							if (intOrderListCount > 1 /*002*/ and intOrdMethod_indx != 5 )
								if (SPIndex->qual[intOrderListCount].index =
									SPIndex->qual[intOrderListCount-1].index)
									intOrderListCount = intOrderListCount - 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->cnt = intOrderListCount
								endif ; end of equal to
							endif ; end of intOrderListCount > 1
						detail
							intResult = 1
							intGlobalResult = intResult
							intIngredientListCount = intIngredientListCount + 1
							stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
								intIngredientListCount)
							SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
								intIngredientIndex
							SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
							if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
					    			SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient =intIngredientListCount
								endif ; end of equal to
							endif ; end of intIngredientListCount > 1
						with nocounter
 
					else ; intIngredientInd = 0
 
						call echo("Checking DetailList NQ without IngredientList")
						call echo(concat("strTempDetailList: ", build(strTempDetailList)))
 
						select into 'nl:'
						from (dummyt d2 with seq=value(recOPT_ORDERSlist->cnt)),
							 (dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5))
						plan d2 where
							( (intOrdMethod_indx = 1 and
								Request->OrderList[intOrderIndex].synonym_code = cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
						   or (intOrdMethod_indx = 2 and
								Request->OrderList[intOrderIndex].catalog_code = cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
						   or (intOrdMethod_indx = 3) ;)
						   /*002*/
						   or (intOrdMethod_indx=5) )
						join d3 where d3.seq > 0 AND
							Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
							Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							AND parser(strTempDetailList)
						detail
							intResult = 1
							intGlobalResult = intResult
							intOrderListCount = intOrderListCount + 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->qual[intOrderListCount].index = intOrderIndex
							SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
							SPIndex->cnt = intOrderListCount
							if (intOrderListCount > 1 /*002*/ and intOrdMethod_indx != 5)
								if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
									intOrderListCount = intOrderListCount - 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->cnt = intOrderListCount
								endif ; end of equal to
							endif ; end of intOrderListCount > 1
						with nocounter
					endif ; end of intIngredientInd
				endif ; end of N Q I S B
			endif ; end of detail list is empty
 
		elseif (cnvtupper(trim(strRequestType)) = "ORDERLIST")
			; Identifier
			; checking Order List
			call echo("In subroutine Comparison -  checking Order List ....")
 
			if (cnvtupper(trim(strsubQualifier)) = "IN")
				set strsubQualifier = "="
			elseif (cnvtupper(trim(strsubQualifier)) = "NOT IN")
				set strsubQualifier = "!="
			endif
 
 			call echo(concat(".....in sub strsubQualifier: ", build(strsubQualifier)))
			; I
			if (intIngredientInd = 1)
 
				call echo("Check OrderList with IngredientList")
				call echo(concat("strFieldName: ", build(strFieldName)))
 
				select into 'nl:'
				from (dummyt d2 with seq = value(recOPT_ORDERSlist->cnt)),
				     (dummyt d3 with seq = size(recLIST1list->qual,5))
				plan d2 where
					( ( intOrdMethod_indx=1 and
						Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].synonymid =
						cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value) )
				   or ( intOrdMethod_indx=2 and
						Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd =
						cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value) )
				   or ( intOrdMethod_indx=3) ;)
						/*002*/
				   or (intOrdMethod_indx=5) )
				join d3 where d3.seq > 0 and
					parser ( concat("Request->OrderList[intOrderIndex].", trim(strFieldName), " ",
					trim(strQualifier), " ", "(cnvtreal(recLIST1list->qual[d3.seq].value))" ) )
				head report
					intOrderListCount = intOrderListCount + 1
					stat = alterlist(SPIndex->qual, intOrderListCount)
					SPIndex->qual[intOrderListCount].index = intOrderIndex
					SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
					SPIndex->cnt = intOrderListCount
 
					if (intOrderListCount > 1 /*002*/ and intOrdMethod_indx != 5 )
						if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
							intOrderListCount = intOrderListCount - 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->cnt = intOrderListCount
						endif ; end of equal to
					endif ; end of intOrderListCount > 1
				detail
 
					intResult = 1
					intGlobalResult = intResult
					intLoopCnt = intLoopCnt + 1
					if (strsubQualifier = "!=")
						;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
						if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
							intResult = negate(intResult)
							intGlobalResult = intResult
						endif
					endif
 
					if (intResult = 1)
				    	intIngredientListCount = intIngredientListCount + 1
						stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
						SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
							intIngredientIndex
						SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
 
						if (intIngredientListCount > 1)
							if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient )
								intIngredientListCount = intIngredientListCount - 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
							endif ; end of equal to
						endif ; end of intIngredientListCount > 1
					endif ; end of intResult
				with nocounter
				set intLoopCnt = 0
 
			else ; intIngredientInd = 0
 
				call echo("Check orderList without IngredientList")
				call echo(concat("strFieldName: ", build(strFieldName)))
 
				select into 'nl:'
				from (dummyt d2 with seq = value(recOPT_ORDERSlist->cnt)),
					 (dummyt d3 with seq = size(recLIST1list->qual,5))
				plan d2 where
				( ( intOrdMethod_indx=1 and
					Request->OrderList[intOrderIndex].synonym_code = cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value))
			   or ( intOrdMethod_indx=2 and
					Request->OrderList[intOrderIndex].catalog_code = cnvtreal(recOPT_ORDERSlist->qual[d2.seq].value) )
			   or ( intOrdMethod_indx=3) ;)
			   /*002*/
			   or (intOrdMethod_indx=5) )
				join d3 where d3.seq > 0 and
					parser ( concat("Request->OrderList[intOrderIndex].", trim(strFieldName), " ",
					trim(strQualifier), " ","(cnvtreal(recLIST1list->qual[d3.seq].value))" ) )
				detail
					intResult = 1
					intGlobalResult = intResult
					intLoopCnt = intLoopCnt + 1
 
					if (strsubQualifier = "!=")
						;if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
						if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
							intResult = negate(intResult)
							intGlobalResult = intResult
						endif
					endif
 
					if (intResult = 1)
 
						intOrderListCount = intOrderListCount + 1
						stat = alterlist(SPIndex->qual, intOrderListCount)
						SPIndex->qual[intOrderListCount].index = intOrderIndex
						SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
						SPIndex->cnt = intOrderListCount
 
						;021 if (intOrderListCount > 1 /*002*/ and intOrdMethod_indx != 5 )
						if (intOrderListCount > 1) ;021
							if (SPIndex->qual[intOrderListCount].index =
								SPIndex->qual[intOrderListCount-1].index)
								intOrderListCount = intOrderListCount - 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->cnt = intOrderListCount
							endif ;	end of equal to
						endif ; end of intOrderListCount > 1
 
						;endif
					endif ; end of intResult
				with nocounter
				set intLoopCnt = 0
			endif ; end of strRequestType
		endif ; end of intIngredientInd
 
		call echo(concat("intResult: ", build(intResult)))
 
		 ;*****************************************************************************************************************
	else ; intOrdMethod_indx = 4
		 ;*****************************************************************************************************************
		call echo("Checking Drug Class")
 
		if (cnvtupper(trim(strRequestType)) = "INGREDIENTLIST")
			call echo("In subroutine Comparison - Checking Drug Class & Ingredient List .... ")
			if (size(request->OrderList[intOrderIndex]->INGREDIENTLIST,5)=0)
				call echo("Drug Class-> Ingredient List is EMPTY")
				set intResult = 0
				if (intOnlyIngredient_ind = 0)
					; need to check Detail List
					set strRequestType = "DetailList"
					set douOeFieldId = cnvtreal(trim(recArguments->items[2].value))
					set strFieldType = trim(recArguments->items[intPlusPosition-1].value)
					set strOeFieldMeaning = trim(recArguments->items[intPlusPosition-2].value)
					call echo("Drug Class-> Size of IngredientList = 0, check Detail List.....")
					;set intIngredientInd = 0
					call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType,
						strQualifier, strValue1, strValue2, intIngredientInd, intOrderIndex,
						intIngredientIndex)
				else ; intOnlyIngredient_ind = 1
					; only check Ingredient List & OrderList->catalog_code or synonym_id
					set strRequestType = "OrderList"
					call echo("Drug Class-> Size of IngredientList = 0, check Order List.....")
					if ( cnvtupper(trim(strFieldName,3)) = "CATALOGCD")
						set strFieldName = "catalog_code"
						call Comparison (intOrdMethod_indx, strRequestType, "catalog_code", strFieldType,
							strQualifier, strValue1, strValue2, intIngredientInd,intOrderIndex,
							intIngredientIndex)
					else
						set strFieldName = "synonym_code"
						call Comparison (intOrdMethod_indx, strRequestType, "synonym_code", strFieldType,
							strQualifier, strValue1, strValue2, intIngredientInd,intOrderIndex,
							intIngredientIndex)
					endif  ; end of strFieldName
				endif ; end of intOnlyIngredient_ind
 
			else ; IngredientList is not Empty
 
				; adjust field name for IngredientList
				if (cnvtupper(trim(strsubFieldName)) = "VOLUMEDOSEUNIT")
					set strsubFieldName = "VOLUMEUNIT"
				elseif (cnvtupper(trim(strsubFieldName)) = "STRENGTHDOSEUNIT")
					set strsubFieldName = "STRENGTHUNIT"
				elseif (cnvtupper(trim(strsubFieldName)) = "FREETXTDOSE")
					set strsubFieldName = "FREETEXTDOSE"
				elseif (cnvtupper(trim(strsubFieldName)) = "DOSEQTYUNIT")
					set strsubFieldName = "DOSEQUANTITYUNIT"
				elseif (cnvtupper(trim(strsubFieldName)) = "DOSEQTY")
					set strsubFieldName = "DOSEQUANTITY"
				elseif (cnvtupper(trim(strsubFieldName)) = "COMPONENTFREQ")	; 011
					set strsubFieldName = "BAG_FREQUENCY_CD"				; 011
				endif
 
				call echo(concat("strsubFieldName in DRUG CLASS: ", build(strsubFieldname)))
 
				; checking Ingredient List
				if (recLIST1list->cnt >= 1 and cnvtupper(trim(strsubQualifier)) in ("IN", "NOT IN"))
 
					; Identifier, Boolean, String
					call echo("Drug Class-> Checking IngrdientList IBS")
					if (cnvtupper(trim(strsubQualifier)) = "IN")
						set strsubQualifier = "="
					else
						set strsubQualifier = "!="
					endif
 
					if (intIngredientInd = 1)
						; Drug Class, I, B, S  with Ingredient List
						call echo("Drug Class-> Checking IngrdientList IBS with IngredientList")
						if (strsubFieldType = "S")
							set strTempIngredient =
								concat("cnvtupper(Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), ") ", trim(strsubQualifier), " ", trim(strsubValue1) )
						else
							set strTempIngredient =
								concat("Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " ", trim(strsubQualifier), " ", trim(strsubValue1) )
						endif
 
						call echo(concat("strTempIngredient: ", build(strTempIngredient)))
 
						;005 EBGIN
						;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
						if (eksmultum_def = 1) /* 006 */ ;1 = V500.multum tables found
							call echo("not rev8 with V500 or rev8 table name with 'u'")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d4 with seq = value(recLIST1list->cnt)),
								order_catalog oc,
								multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d4 where initarray(d4seq,d4.seq) and parser (strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index =
										SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif  ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
										intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient =
										intIngredientListCount
									if (intIngredientListCount > 1)
	                                if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
	                                  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
											intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient =
											intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif ; end of intResult
							with nocounter
						;006 elseif (intV500Rev8_id=2)
						elseif (eksmultum_def = 0) /* 006 */ ;0 = v500_ref.multum tables found
							;not rev8 with V500_REF
							call echo("not rev8 with V500_REF")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								 (dummyt d4 with seq = value(recLIST1list->cnt)),
								 order_catalog oc,
								 v500_ref.multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							join d4 where initarray(d4seq,d4.seq)  and parser (strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index =
										SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
 
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
										intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
											intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient =
											intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif ; end of intResult
							with nocounter
							set intLoopCnt = 0
						;006 elseif (intV500Rev8_id=3)
						elseif (eksmultum_def = 2) /* 006 */ ; 2 = V500.mltm tables found
							;rev8 table name without 'u'
							call echo("rev8 table name without 'u'")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								 (dummyt d4 with seq = value(recLIST1list->cnt)),
								 order_catalog oc,
								 mltm_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d4 where initarray(d4seq,d4.seq) and parser (strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index =
										SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif  ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
	 							if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
										intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient =
										intIngredientListCount
									if (intIngredientListCount > 1)
	                                if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									   SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
												intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient =
												intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif ; end of intResult
							with nocounter
						endif ; end of intV500Rev8_id
 
						/*
						if (intV500Data_ind=1)
							call echo("V500_ref table")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d4 with seq = value(recLIST1list->cnt)),
							order_catalog oc, v500_ref.multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							join d4 where initarray(d4seq,d4.seq)  and parser (strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif ; end of intResult
							with nocounter
							set intLoopCnt = 0
						else ; intV500Data_ind =0
							call echo("v500 table")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d4 with seq = value(recLIST1list->cnt)),
								order_catalog oc,
								;  004multum_category_drug_xref mcdx
								mltm_category_drug_xref mcdx  ;004
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d4 where initarray(d4seq,d4.seq) and parser (strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif  ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									if (intIngredientListCount > 1)
	                                if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient =
										intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif ; end of intResult
							with nocounter
							;set intLoopCnt = 0
						endif ; end of intV500Data_ind
					*/ ; 005 END
 
					else ; if (intIngredientInd = 0)
						; Drug class, identifier without IngredientList
						call echo("without IngredientList")
						set intResult = 0
					endif  ; end of ; if (intIngredientInd = 0)
 
					if (intResult !=1 )
						if (intOnlyCheckIngredient_ind = 0)
							if (intOnlyIngredient_ind = 0)
								; check IngredientList & Detail List
								set strRequestType = "DetailList"
								set douOeFieldId = cnvtreal(trim(recArguments->items[2].value))
								set strFieldType = trim(recArguments->items[intPlusPosition-1].value)
								set strOeFieldMeaning = trim(recArguments->items[intPlusPosition-2].value)
								call echo("Can not find qualified result in Ingredient List, check Detail List....")
								;set intIngredientInd = 0
								call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType,
									strQualifier, strValue1, strValue2, intIngredientInd, intOrderIndex,
									intIngredientIndex)
							else ; intOnlyIngredient_ind = 1
								; checking IngredientList & OrderList ->catalog_code or synonym_code
								set strRequestType = "OrderList"
								call echo("Can not find qualified result in Ingredient List, check Order List.....")
								if ( cnvtupper(trim(strFieldName,3)) = "CATALOGCD")
									set strFieldName = "catalog_code"
									call Comparison (intOrdMethod_indx, strRequestType, "catalog_code",
										strFieldType, strQualifier, strValue1, strValue2, intIngredientInd,
										intOrderIndex, intIngredientIndex)
								else
									set strFieldName = "synonym_code"
									call Comparison (intOrdMethod_indx, strRequestType, "synonym_code",
										strFieldType, strQualifier, strValue1, strValue2, intIngredientInd,
										intOrderIndex, intIngredientIndex)
								endif  ; end of strFieldName
							endif ; end of intOnlyIngredient_ind
						endif ; intOnlyCheckIngredient_ind
					endif ; end of intResult
 
				elseif (recLIST1list->cnt = 1 and (strsubFieldType = "N" or strsubFieldType ="Q") )
 
					; no date time compare in ingredientList
					if (trim(strsubFieldType) = "N")
						if (cnvtupper(trim(strsubQualifier)) = "BETWEEN")
							set strTempIngredient=concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " >= ", trim(strsubValue1), " and ",
								"Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " <= ", trim(strsubValue2) )
						elseif (cnvtupper(trim(strsubQualifier)) = "OUTSIDE")
							set strTempIngredient=concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " < ", trim(strsubValue1), " OR ",
								"Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " > ", trim(strsubValue2) )
						else
							set strTempIngredient=concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)), "]->IngredientList[intIngredientIndex].",
								trim(strsubFieldName), " ", trim(strsubQualifier), " ", trim(strsubValue1))
						endif ; end of strQualifier
					endif ; end of strFieldType
 
					call echo(concat("strTempIngredient: ", build(strTempIngredient)))
 
					if (intIngredientInd = 1)
						call echo("Drug Class-> Checking IngrdientList N with IngredientList")
						;005 BEGIN
						;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
						if (eksmultum_def = 1) /* 006 */ ;1 = V500.multum tables found
							;not rev8 with V500 or rev8 table name with 'u'
							call echo("not rev8 with V500 or rev8 table name with 'u'")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual, 5)),
								order_catalog oc,
								multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0 AND parser(strTempIngredient)
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogCd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index =
										SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of euqal to
								endif   ; end of intOrderListCount > 1
							detail
								;if ( parser(strTempIngredient) )
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,
									intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount - 1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
								;endif
							with nocounter
						;006 elseif (intV500Rev8_id = 2)
						elseif (eksmultum_def = 0) /* 006 */ ;0 = v500_ref.multum tables found
							;not rev8 with V500_REF
							call echo("not rev8 with V500_REF")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual, 5)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0 and parser(strTempIngredient)
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogCd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of euqal to
								endif   ; end of intOrderListCount > 1
							detail
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
                                if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient =
									intIngredientListCount
								endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
							;006 elseif (intV500Rev_id = 3)
						elseif (eksmultum_def = 2) /* 006 */ ;2 = V500.mltm tables found
							;rev8 table name without 'u'
							call echo("rev8 table name without 'u'")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual, 5)),
								order_catalog oc,
								mltm_category_drug_xref mcdx
							plan d2 where d2.seq > 0 AND parser(strTempIngredient)
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogCd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of euqal to
								endif   ; end of intOrderListCount > 1
							detail
								;if ( parser(strTempIngredient) )
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
								;endif
							with nocounter
						endif ; end of intV500Rev8_id
 
						/*
						if (intV500Data_ind = 1)
							call echo("v500_ref table")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual, 5)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0 and parser(strTempIngredient)
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogCd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
 
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of euqal to
								endif	; end of intOrderListCount > 1
							detail
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount - 1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
 
						else ; intV500Data_ind = 0
 
							call echo("V500 table")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual, 5)),
								order_catalog oc,
								;  004 multum_category_drug_xref mcdx
								mltm_category_drug_xref mcdx  ; 004
							plan d2 where d2.seq > 0 AND parser(strTempIngredient)
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogCd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of euqal to
								endif   ; end of intOrderListCount > 1
							detail
								;if ( parser(strTempIngredient) )
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount - 1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
								;endif
							with nocounter
						endif ; end of intV500Data_ind
					*/ ; 005 END
 
					else ; intIngredientInd = 0
						; drug class, recLIST1list->cnt = 1, no ingredientList
						call echo("without IngredientList")
						set intResult = 0
					endif ; end of intIngredientInd
 
					if (intResult !=1 )
						if (intOnlyCheckIngredient_ind = 0)
							if (intOnlyIngredient_ind = 0)
								; ingredientList & Detail List
								set strRequestType = "DetailList"
								set douOeFieldId = cnvtreal(trim(recArguments->items[2].value))
								set strFieldType = trim(recArguments->items[intPlusPosition-1].value)
								set strOeFieldMeaning = trim(recArguments->items[intPlusPosition-2].value)
								call echo("Can not find qualified result in Ingredient List, check Detail List....")
								call Comparison (intOrdMethod_indx, strRequestType, strFieldName, strFieldType,
									strQualifier, strValue1, strValue2, intIngredientInd,intOrderIndex,intIngredientIndex)
							else ; intOnlyIngredient_ind = 1
								; checking IngredientList & OrderList ->catalog_code or synonym_code
								set strRequestType = "OrderList"
								call echo("Can not find qualified result in Ingredient List, check Order List.....")
								if ( cnvtupper(trim(strFieldName,3)) = "CATALOGCD")
									set strFieldName = "catalog_code"
									call Comparison (intOrdMethod_indx, strRequestType, "catalog_code",
										strFieldType, strQualifier, strValue1, strValue2, intIngredientInd,
										intOrderIndex, intIngredientIndex)
								else
									set strFieldName = "synonym_code"
									call Comparison (intOrdMethod_indx, strRequestType, "synonym_code",
										strFieldType, strQualifier, strValue1, strValue2, intIngredientInd,
										intOrderIndex, intIngredientIndex)
								endif  ; end of strFieldName
							endif ; end of intOnlyIngredient_ind
						endif ; intOnlyCheckIngredient_ind
					endif ; end of intResult
				endif ; end of recLIST1list->cnt
			endif ; end of ingredientList is empty
 
		elseif (cnvtupper(trim(strRequestType)) = "DETAILLIST")
 
			; checking Detail List
			call echo("In subroutine Comparison - checking Drug Class & Detail List ....")
 
			if (size(request->OrderList[intOrderIndex]->DetailList,5)=0)
				call echo("Drug Class-> Detail List is EMPTY")
				set intResult = 0
			else
 
				if (recLIST1list->cnt >= 1 and cnvtupper(trim(strsubQualifier)) in ("IN", "NOT IN", "=", "!=") and
					cnvtupper(trim(strsubFieldType)) in ("I", "B", "S") )
					; Identifier, Bollean, String
					call echo("Drug Class-> Checking DetailList IBS")
					if (cnvtupper(trim(strsubQualifier)) = "IN")
						set strsubQualifier = "="
					else
						set strsubQualifier = "!="
					endif
 
					if (strsubFieldType = "I" or strsubFieldType= "B")
						set strTempIngredient = concat("Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldValue ",
							trim(strsubQualifier), " ", trim(strsubVALUE1) )
					else ; strsubFieldType = "S"
						set strTempIngredient =
							concat("cnvtupper(Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldDisplayValue) ",
							trim(strsubQualifier), " ", trim(strsubVALUE1) )
					endif
 
					call echo(concat("strTempIngredient: ", build(strTempIngredient)))
 
					if (intIngredientInd = 1)
						call echo("Drug Class-> Checking DetailList IBS with IngredientList")
						;005 BEGIN
						;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
						if (eksmultum_def = 1) /* 006 */ ;1 = V500.multum tables found
							caho echo("not Rev8 with V500")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
 
						;006 elseif (intV500Rev8_id = 2)
						elseif (eksmultum_def = 0) /* 006 */ ;0 = v500_ref.multum tables found
 
							call echo("not rev8 with V500_REF")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning=trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
 
						;006 elseif (intV500Rev8_id = 3)
 
						elseif (eksmultum_def = 2) /* 006 */ ;2 = V500.mltm tables found
 
							call echo("rev8 table name without 'u'")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								mltm_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
						endif ; end of intV500Rev8_id
 
						/*
						if (intV500Data_ind = 1)
							call echo("V500_ref Table")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
							order_catalog oc,
							v500_ref.multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning=trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
				        	head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient )
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
 
						else ; intV500Data_ind = 0
							call echo("V500 table")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								;004 multum_category_drug_xref mcdx
								mltm_category_drug_xref mcdx  ;004
							plan d2 where d2.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intIngredientListCount = intIngredientListCount + 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
										intIngredientIndex
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount -1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
									endif ; end of intIngredientListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
						endif ; intV500Data_ind
						*/ ;005 END
						set intLoopCnt = 0
 
					else ; intIngredientInd = 0
 
						call echo("Drug Class-> Checking DetailList IBS without IngredientList")
						;005 BEGIN
						;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
						if (eksmultum_def = 1) /* 006 */ ;1 = V500.multum tables found
							call echo("not rev8 with V500 or rev8 table name with 'u'")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								multum_category_drug_xref mcdx
							plan d1 where d1.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intOrderListCount = intOrderListCount + 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->qual[intOrderListCount].index = intOrderIndex
									SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
									SPIndex->cnt = intOrderListCount
									if (intOrderListCount > 1)
										if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
											intOrderListCount = intOrderListCount - 1
											stat = alterlist(SPIndex->qual, intOrderListCount)
											SPIndex->cnt = intOrderListCount
										endif ; end of equal to
									endif ; end of intOrderListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
 
						;006 elseif (intV500Rev8_id = 2)
						elseif (eksmultum_def = 0) /* 006 */ ;0 = v500_ref.multum tables found
							call echo("not rev8 with V500_REF")
 
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d1 where d1.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime);020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intOrderListCount = intOrderListCount + 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->qual[intOrderListCount].index = intOrderIndex
									SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
									SPIndex->cnt = intOrderListCount
									if (intOrderListCount > 1)
										if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
											intOrderListCount = intOrderListCount - 1
											stat = alterlist(SPIndex->qual, intOrderListCount)
											SPIndex->cnt = intOrderListCount
										endif ; end of equal to
									endif ; end of intOrderListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
						;006 elseif (intV500Rev8_id = 3)
						elseif (eksmultum_def = 2) /* 006 */ ;2 = V500.mltm tables found
							call echo("rev8 table name without 'u'")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								mltm_category_drug_xref mcdx
							plan d1 where d1.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intOrderListCount = intOrderListCount + 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->qual[intOrderListCount].index = intOrderIndex
									SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
									SPIndex->cnt = intOrderListCount
									if (intOrderListCount > 1)
										if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
											intOrderListCount = intOrderListCount - 1
											stat = alterlist(SPIndex->qual, intOrderListCount)
											SPIndex->cnt = intOrderListCount
										endif ; end of equal to
									endif ; end of intOrderListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
						endif ; end of intV500Rev8_id = 1
 
						/*
						if (intV500Data_ind = 1)
							call echo("V500_REF table")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d1 where d1.seq > 0
							join mcdx where
								mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intOrderListCount = intOrderListCount + 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->qual[intOrderListCount].index = intOrderIndex
									SPIndex->cnt = intOrderListCount
 
									if (intOrderListCount > 1)
										if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
											intOrderListCount = intOrderListCount - 1
											stat = alterlist(SPIndex->qual, intOrderListCount)
											SPIndex->cnt = intOrderListCount
										endif ; end of equal to
									endif ; end of intOrderListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
						else ; intV500Data_ind =0
							call echo("V500 table")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList, 5)),
								(dummyt d4 with seq=value(recLIST1list->cnt)),
								order_catalog oc,
								;  004 multum_category_drug_xref mcdx
								mltm_category_drug_xref mcdx   ;004
							plan d1 where d1.seq > 0
							join mcdx where
								mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
							join d4 where initarray(d4seq,d4.seq) and parser(strTempIngredient)
							detail
								intResult = 1
								intGlobalResult = intResult
								intLoopCnt = intLoopCnt + 1
 
								if (strsubQualifier = "!=")
									if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
										intResult = negate(intResult)
										intGlobalResult = intResult
									endif
								endif
 
								if (intResult = 1)
									intOrderListCount = intOrderListCount + 1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->qual[intOrderListCount].index = intOrderIndex
									SPIndex->cnt = intOrderListCount
									if (intOrderListCount > 1)
										if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
											intOrderListCount = intOrderListCount - 1
											stat = alterlist(SPIndex->qual, intOrderListCount)
											SPIndex->cnt = intOrderListCount
										endif ; end of equal to
									endif ; end of intOrderListCount > 1
								endif
							with nocounter
							set intLoopCnt = 0
						endif ; end of intV500Data_ind
					*/ ; 005 END
					endif ; end of intIngredientInd
 
				elseif (recLIST1list->cnt = 1 and (strsubFieldType = "N" or strsubFieldType= "Q"))
 
					; drug class
					call echo("Drug Class-> Checking DetailList NQ")
					;N, B all qualifier; strValue1/strValue2
 
					if ( cnvtupper(trim(strsubFieldType)) = "Q")
						if ( cnvtupper(trim(strsubQualifier)) = "BETWEEN" )
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue >= ", trim(strsubValue1),
								" and ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue <= ", trim(strsubValue2))
						elseif ( cnvtupper(trim(strsubQualifier)) = "OUTSIDE" )
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue < ", trim(strsubValue1),
								" or ","Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue > ", trim(strsubValue2))
						elseif (cnvtupper(trim(strsubQualifier)) = "=" and intSynToday > 0)
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue >= ", trim(strsubValue1),
								" and ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue <= ", trim(strsubValue2))
						elseif (cnvtupper(trim(strsubQualifier)) = "!=" and intSynToday > 0)
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue < ", trim(strsubValue1),
								" or ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue > ", trim(strsubValue2))
						else
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldDtTmValue ", trim(strsubQualifier),
								trim(strValue1))
						endif
 
					elseif ( cnvtupper(trim(strsubFieldType)) = "N")
 
						if ( cnvtupper(trim(strsubQualifier)) = "BETWEEN" )
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue >= ", trim(strsubValue1),
								" and ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue <= ", trim(strsubValue2))
						elseif ( cnvtupper(trim(strsubQualifier)) = "OUTSIDE" )
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue < ", trim(strsubValue1),
								" or ", "Request->OrderList[", trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue > ", trim(strsubValue2))
						else
							set strTempDetailList = concat("Request->OrderList[",
								trim(cnvtstring(intOrderIndex)),
								"]->DetailList[d3.seq].oeFieldValue ", trim(strsubQualifier, 3),
								" ", trim(strValue1) )
						endif
					endif ; end of strsubFieldType
 
					call echo(concat("strTempDetailList: ", build(strTempDetailList)))
 
					if ( intIngredientInd = 1 )
						call echo("Drug Class-> Checking DetailList NQ with IngredientList")
 
						;005 BEGIN
						;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
						if (eksmultum_def = 1) /* 006 */ ;1 = V500.multum tables found
							call echo("not rev8 with V500 or rev8 table name with 'u'")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where
								mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning)
								and parser(strTempDetailList)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index =
										SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
                                    SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
 
						;006 elseif (intV500Rev8_id = 2)
						elseif (eksmultum_def = 0) /* 006 */ ;0 = v500_ref.multum tables found
 
							call echo("not rev8 with V500_REF")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) and
								parser(strTempDetailList)
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index =
										SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
 
						;006 elseif (intV500Rev8_id = 3)
						elseif (eksmultum_def = 2) /* 006 */ ;2 = V500.mltm tables found
 
							call echo("rev8 table name without 'u'")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								mltm_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join mcdx where
								mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) and
								parser(strTempDetailList)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
						endif ; end of intV500Rev8_id = 1
 
						/*
						if (intV500Data_ind = 1)
							call echo("V500_ref Table")
		                    select into 'nl:'
                		    from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d2 where d2.seq > 0
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) and
								parser(strTempDetailList)
							join mcdx where
								mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
									if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount - 1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
						else ; intV500Data_ind = 0
							call echo("V500 table")
							select into 'nl:'
							from (dummyt d2 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								;004 multum_category_drug_xref mcdx
								mltm_category_drug_xref mcdx  ;004
							plan d2 where d2.seq > 0
							join mcdx where
								mcdx.multum_category_id = recCategory_id->qual[d2.seq].category_id
							join oc where oc.catalog_cd =
								Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) and
								parser(strTempDetailList)
							head report
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							detail
								intIngredientListCount = intIngredientListCount + 1
								stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
								SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									intIngredientIndex
								SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								if (intIngredientListCount > 1)
                                	if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
									  SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
										intIngredientListCount = intIngredientListCount - 1
										stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
										SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
									endif ; end of equal to
								endif ; end of intIngredientListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
						endif ; end of intV500Data_ind
					*/ ;005 END
					else ; intIngredientInd = 0
 
						call echo("Drug Class-> Checking DetailList NQ without IngredientList")
						;005 BEGIN
						;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
						if (eksmultum_def = 1) /* 006 */ ;1 = V500.multum tables found
							call echo("not rev8 with V500 or rev8 table name with 'u'")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								multum_category_drug_xref mcdx
							plan d1 where d1.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) AND
								parser(strTempDetailList)
							detail
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
 
						;006 elseif (intV500Rev8_id = 2)
						elseif (eksmultum_def = 0) /* 006 */ ;0 = v500_ref.multum tables found
							call echo("not rev8 with V500_REF")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d1 where d1.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) AND
								parser(strTempDetailList)
							detail
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
 
						;006 elseif (intV500Rev8_id = 3)
						elseif (eksmultum_def = 2) /* 006 */ ;2 = V500.mltm tables found
 
							call echo("rev8 table name without 'u'")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								mltm_category_drug_xref mcdx
							plan d1 where d1.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) AND
								parser(strTempDetailList)
							detail
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
						endif ; end of intV500Rev8_id = 1
 
						/*
						if (intV500Data_ind = 1)
							call echo("V500_REF table")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								v500_ref.multum_category_drug_xref mcdx
							plan d1 where d1.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) AND
								parser(strTempDetailList)
							detail
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
						else ; intV500Data_ind = 0
					    	call echo("V500 table")
							select into 'nl:'
							from (dummyt d1 with seq = size(recCategory_Id->qual,5)),
								(dummyt d3 with seq=size(Request->OrderList[intOrderIndex]->DetailList,5)),
								order_catalog oc,
								;004 multum_category_drug_xref mcdx
								mltm_category_drug_xref mcdx  ;004
							plan d1 where d1.seq > 0
							join mcdx where mcdx.multum_category_id = recCategory_id->qual[d1.seq].category_id
							join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
								and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
							join d3 where d3.seq > 0 and
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldId = douOeFieldId AND
								Request->OrderList[intOrderIndex]->DetailList[d3.seq].oeFieldMeaning = trim(strOeFieldMeaning) AND
								parser(strTempDetailList)
							detail
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount - 1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
								intResult = 1
								intGlobalResult = intResult
							with nocounter
						endif ; end of intV500Data_ind
						*/ ; 005 END
					endif ; end of intIngredientInd
				endif ; end of N Q I S B
			endif ; end of detail list is empty
 
        elseif (cnvtupper(trim(strsubRequestType)) = "ORDERLIST")
 
			; checking Order List
			call echo("In subroutine Comparison -  checking Drug Class & Order List ....")
 
			if (cnvtupper(trim(strsubQualifier)) = "IN")
				set strsubQualifier = "="
			elseif (cnvtupper(trim(strsubQualifier)) = "NOT IN")
				set strsubQualifier = "!="
			endif
 
			; I
			if (intIngredientInd = 1)
				call echo("Drug Class-> Check OrderList with IngredientList")
				;005 BEGIN
				;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
				if (eksmultum_def = 1) /* 006 */ ;1 = V500.multum tables found
					call echo("not rev8 with V500 or rev8 table name with 'u'")
					select into 'nl:'
					from (dummyt d4 with seq = size(recLIST1list->qual,5)),
						(dummyt d3 with seq = size(recCategory_Id->qual,5)),
						order_catalog oc,
						multum_category_drug_xref mcdx
					plan d3 where d3.seq > 0
					join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
					join oc where oc.catalog_cd = Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
						and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
					join d4 where d4.seq > 0 and
						parser ( concat("Request->OrderList[intOrderIndex].",trim(strsubFieldName)," ",trim(strsubQualifier)," ",
						"(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
					head report
						intOrderListCount = intOrderListCount + 1
						stat = alterlist(SPIndex->qual, intOrderListCount)
						SPIndex->qual[intOrderListCount].index = intOrderIndex
						SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
						SPIndex->cnt = intOrderListCount
						if (intOrderListCount > 1)
							if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
								intOrderListCount = intOrderListCount - 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->cnt = intOrderListCount
							endif ; end of equal to
						endif ; end of intOrderListCount > 1
					detail
						intResult = 1
						intGlobalResult = intResult
						intLoopCnt = intLoopCnt + 1
 
						if (strsubQualifier = "!=")
							;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
							if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
								intResult = negate(intResult)
								intGlobalResult = intResult
							endif
						endif
 
						if (intResult = 1)
							intIngredientListCount = intIngredientListCount + 1
							stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
							SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
								intIngredientIndex
							SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
							if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient)
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
							endif ; end of intIngredientListCount > 1
						endif
					with nocounter
					set intLoopCnt = 0
 
				;006 elseif (intV500Rev8_id = 2)
				elseif (eksmultum_def = 0) /* 006 */ ;0 = v500_ref.multum tables found
 
					call echo("not rev8 with V500_REF")
					select into 'nl:'
					from
						(dummyt d4 with seq = size(recLIST1list->qual,5)),
						(dummyt d3 with seq = size(recCategory_Id->qual,5)),
						order_catalog oc,
						v500_ref.multum_category_drug_xref mcdx
					plan d3 where d3.seq > 0
					join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
					join oc where oc.catalog_cd =  Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
						and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
					join d4 where d4.seq > 0 and
						parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
						trim(strsubQualifier), " ", "(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
					head report
						intOrderListCount = intOrderListCount + 1
						stat = alterlist(SPIndex->qual, intOrderListCount)
						SPIndex->qual[intOrderListCount].index = intOrderIndex
						SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
						SPIndex->cnt = intOrderListCount
						if (intOrderListCount > 1)
							if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
								intOrderListCount = intOrderListCount - 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->cnt = intOrderListCount
							endif ; end of equal to
						endif ; end of intOrderListCount > 1
					detail
						intResult = 1
						intGlobalResult = intResult
						intLoopCnt = intLoopCnt + 1
 
						if (strsubQualifier = "!=")
							;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
							if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
								intResult = negate(intResult)
								intGlobalResult = intResult
							endif
						endif
 
						if (intResult = 1)
							intGlobalResult = intResult
							intLoopCnt = intLoopCnt + 1
							intIngredientListCount = intIngredientListCount + 1
							stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
							SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
								intIngredientIndex
							SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
							if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient )
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
							endif ; end of intIngredientListCount > 1
						endif
					with nocounter
					set intLoopCnt = 0
 
				;006 elseif (intV500Rev8_id = 3)
				elseif (eksmultum_def = 2) /* 006 */ ;2 = V500.mltm tables found
					call echo("rev8 table name without 'u'")
					select into 'nl:'
					from (dummyt d4 with seq = size(recLIST1list->qual,5)),
						(dummyt d3 with seq = size(recCategory_Id->qual,5)),
						order_catalog oc,
						mltm_category_drug_xref mcdx
					plan d3 where d3.seq > 0
					join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
					join oc where oc.catalog_cd = Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
						and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
					join d4 where d4.seq > 0 and
						parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
						trim(strsubQualifier), " ", "(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
					head report
						intOrderListCount = intOrderListCount + 1
						stat = alterlist(SPIndex->qual, intOrderListCount)
						SPIndex->qual[intOrderListCount].index = intOrderIndex
						SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
						SPIndex->cnt = intOrderListCount
						if (intOrderListCount > 1)
							if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
								intOrderListCount = intOrderListCount - 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->cnt = intOrderListCount
							endif ; end of equal to
						endif ; end of intOrderListCount > 1
					detail
						intResult = 1
						intGlobalResult = intResult
						intLoopCnt = intLoopCnt + 1
 
						if (strsubQualifier = "!=")
							;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
							if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
								intResult = negate(intResult)
								intGlobalResult = intResult
							endif
						endif
 
						if (intResult = 1)
							intIngredientListCount = intIngredientListCount + 1
							stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
							SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
								intIngredientIndex
							SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
							if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient )
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
							endif ; end of intIngredientListCount > 1
						endif
					with nocounter
					set intLoopCnt = 0
				endif ; end of intV500Rev8_id = 1
 
				/*
				if (intV500Data_ind = 1)
					select into 'nl:'
					from (dummyt d4 with seq = size(recLIST1list->qual,5)),
						(dummyt d3 with seq = size(recCategory_Id->qual,5)),
						order_catalog oc,
						v500_ref.multum_category_drug_xref mcdx
					plan d3 where d3.seq > 0
					join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
					join oc where oc.catalog_cd =
						Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
						and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
					join d4 where d4.seq > 0 and
						parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
						trim(strsubQualifier), " ", "(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
					head report
						intOrderListCount = intOrderListCount + 1
						stat = alterlist(SPIndex->qual, intOrderListCount)
						SPIndex->qual[intOrderListCount].index = intOrderIndex
						SPIndex->cnt = intOrderListCount
						if (intOrderListCount > 1)
							if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
								intOrderListCount = intOrderListCount - 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->cnt = intOrderListCount
							endif ; end of equal to
						endif ; end of intOrderListCount > 1
					detail
						intResult = 1
						intGlobalResult = intResult
						intLoopCnt = intLoopCnt + 1
 
						if (strsubQualifier = "!=")
							if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
								intResult = negate(intResult)
								intGlobalResult = intResult
							endif
						endif
 
						if (intResult = 1)
							intGlobalResult = intResult
							intLoopCnt = intLoopCnt + 1
							intIngredientListCount = intIngredientListCount + 1
							stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
							SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
								intIngredientIndex
							SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
							if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient )
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient,intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
							endif ; end of intIngredientListCount > 1
						endif
					with nocounter
					set intLoopCnt = 0
 
				else ; intV500Data_ind = 0
					call echo("V500 table")
					select into 'nl:'
					from (dummyt d4 with seq = size(recLIST1list->qual,5)),
						(dummyt d3 with seq = size(recCategory_Id->qual,5)),
						order_catalog oc,
						;004 multum_category_drug_xref mcdx
						mltm_category_drug_xref mcdx  ;004
					plan d3 where d3.seq > 0
					join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
					join oc where oc.catalog_cd = Request->OrderList[intOrderIndex]->IngredientList[intIngredientIndex].catalogcd
						and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
					join d4 where d4.seq > 0 and
						parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
						trim(strsubQualifier), " ", "(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
					head report
						intOrderListCount = intOrderListCount + 1
						stat = alterlist(SPIndex->qual, intOrderListCount)
						SPIndex->qual[intOrderListCount].index = intOrderIndex
						SPIndex->cnt = intOrderListCount
						if (intOrderListCount > 1)
							if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
								intOrderListCount = intOrderListCount - 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->cnt = intOrderListCount
							endif ; end of equal to
						endif ; end of intOrderListCount > 1
					detail
						intResult = 1
						intGlobalResult = intResult
						intLoopCnt = intLoopCnt + 1
 
						if (strsubQualifier = "!=")
							if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
								intResult = negate(intResult)
								intGlobalResult = intResult
							endif
						endif
 
						if (intResult = 1)
							intIngredientListCount = intIngredientListCount + 1
							stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
							SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient=
								intIngredientIndex
							SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
							if (intIngredientListCount > 1)
								if (SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount].Index_Ingredient =
									SPIndex->qual[intOrderListCount]->qual_Ingredient[intIngredientListCount-1].Index_Ingredient )
									intIngredientListCount = intIngredientListCount - 1
									stat = alterlist(SPIndex->qual[intOrderListCount]->qual_Ingredient, intIngredientListCount)
									SPIndex->qual[intOrderListCount]->cnt_Ingredient = intIngredientListCount
								endif ; end of equal to
							endif ; end of intIngredientListCount > 1
						endif
					with nocounter
					set intLoopCnt = 0
				endif ; end of intV500Data_ind
			*/ ;005 END
 
			else ; if (intIngredientInd = 0)
 
				call echo("Drug Class-> check orderList without IngredientList")
				;005 BEGIN
				;006 if (intV500Rev8_id = 1 or intV500Rev8_id = 4)
				if (eksmultum_def = 1) /* 006 */ ;1 = V500.multum tables found
					call echo("not rev8 with V500 or rev8 table name with 'u'")
					select into 'nl:'
					from (dummyt d4 with seq = size(recLIST1list->qual,5)),
						(dummyt d3 with seq = size(recCategory_Id->qual,5)),
						order_catalog oc,
						multum_category_drug_xref mcdx
					plan d3 where d3.seq > 0
					join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
					join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
						and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
					join d4 where d4.seq > 0 and
						parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
						trim(strsubQualifier), " ", "(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
					detail
						intResult = 1
						intGlobalResult = intResult
						intLoopCnt = intLoopCnt + 1
 
						if (strsubQualifier = "!=")
							;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
							if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
								intResult = negate(intResult)
								intGlobalResult = intResult
							endif
						endif
 
						if (intResult = 1)
							intOrderListCount = intOrderListCount + 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->qual[intOrderListCount].index = intOrderIndex
							SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
							SPIndex->cnt = intOrderListCount
							if (intOrderListCount > 1)
								if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
									intOrderListCount = intOrderListCount -1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->cnt = intOrderListCount
								endif ; end of equal to
							endif ; end of intOrderListCount > 1
						endif
					with nocounter
					set intLoopCnt = 0
 
				;006 elseif (intV500Rev8_id = 2)
				elseif (eksmultum_def = 0) /* 006 */ ;0 = v500_ref.multum tables found
 
					call echo("not rev8 with V500_REF")
					select into 'nl:'
					from
						(dummyt d4 with seq = size(recLIST1list->qual,5)),
						(dummyt d3 with seq = size(recCategory_Id->qual,5)),
						order_catalog oc,
						v500_ref.multum_category_drug_xref mcdx
					plan d3 where d3.seq > 0
					join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
					join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
						and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
					join d4 where d4.seq > 0 and
						parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
						trim(strsubQualifier), " ", "(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
					detail
						intResult = 1
						intGlobalResult = intResult
						intLoopCnt = intLoopCnt + 1
 
						if (strsubQualifier = "!=")
							;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
							if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
								intResult = negate(intResult)
								intGlobalResult = intResult
							endif
						endif
 
						if (intResult = 1)
							intOrderListCount = intOrderListCount + 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->qual[intOrderListCount].index = intOrderIndex
							SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
							SPIndex->cnt = intOrderListCount
 
							if (intOrderListCount > 1)
								if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
									intOrderListCount = intOrderListCount -1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->cnt = intOrderListCount
								endif ; end of equal to
							endif ; end of intOrderListCount > 1
						endif
					with nocounter
					set intLoopCnt = 0
 
				;006 elseif (intV500Rev8_id = 3)
				elseif (eksmultum_def = 2) /* 006 */ ;2 = V500.mltm tables found
 
					call echo("rev8 table name without 'u'")
					select into 'nl:'
					from (dummyt d4 with seq = size(recLIST1list->qual,5)),
						(dummyt d3 with seq = size(recCategory_Id->qual,5)),
						order_catalog oc,
						mltm_category_drug_xref mcdx
					plan d3 where d3.seq > 0
					join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
					join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
						and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
					join d4 where d4.seq > 0 and
						parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
						trim(strsubQualifier), " ","(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
					detail
						intResult = 1
						intGlobalResult = intResult
						intLoopCnt = intLoopCnt + 1
 
						if (strsubQualifier = "!=")
							;020 if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
							if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt*nXTime) ;020
								intResult = negate(intResult)
								intGlobalResult = intResult
							endif
						endif
 
						if (intResult = 1)
							intOrderListCount = intOrderListCount + 1
							stat = alterlist(SPIndex->qual, intOrderListCount)
							SPIndex->qual[intOrderListCount].index = intOrderIndex
							SPIndex->qual[intOrderListCount].ingind = intIngredientInd	;013
							SPIndex->cnt = intOrderListCount
							if (intOrderListCount > 1)
								if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
									intOrderListCount = intOrderListCount -1
									stat = alterlist(SPIndex->qual, intOrderListCount)
									SPIndex->cnt = intOrderListCount
								endif ; end of equal to
							endif ; end of intOrderListCount > 1
						endif
					with nocounter
					set intLoopCnt = 0
				endif ; end of intV500Rev8_id = 1
 
					/*
					if (intV500Data_ind = 1)
						call echo("V500_REF table")
						select into 'nl:'
	                	from
							(dummyt d4 with seq = size(recLIST1list->qual,5)),
							(dummyt d3 with seq = size(recCategory_Id->qual,5)),
							order_catalog oc,
							v500_ref.multum_category_drug_xref mcdx
						plan d3 where d3.seq > 0
						join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
						join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
							and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_id))
						join d4 where d4.seq > 0 and
							parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
							trim(strsubQualifier), " ", "(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
	               		detail
							intResult = 1
							intGlobalResult = intResult
							intLoopCnt = intLoopCnt + 1
 
							if (strsubQualifier = "!=")
								if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									intResult = negate(intResult)
									intGlobalResult = intResult
								endif
							endif
 
							if (intResult = 1)
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount -1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							endif
						with nocounter
						set intLoopCnt = 0
					else ; intV500Data_ind = 0
						call echo("V500 table")
						select into 'nl:'
						from (dummyt d4 with seq = size(recLIST1list->qual,5)),
							(dummyt d3 with seq = size(recCategory_Id->qual,5)),
							order_catalog oc,
							;004 multum_category_drug_xref mcdx
							mltm_category_drug_xref mcdx  ;004
						plan d3 where d3.seq > 0
						join mcdx where mcdx.multum_category_id = recCategory_id->qual[d3.seq].category_id
						join oc where oc.catalog_cd = Request->OrderList[intOrderIndex].catalog_code
							and oc.cki = concat("MUL.ORD!", trim(mcdx.drug_identifier))
						join d4 where d4.seq > 0 and
							parser ( concat("Request->OrderList[intOrderIndex].", trim(strsubFieldName), " ",
							trim(strsubQualifier), " ", "(cnvtreal(recLIST1list->qual[d4.seq].value))" ) )
						detail
							intResult = 1
							intGlobalResult = intResult
							intLoopCnt = intLoopCnt + 1
 
							if (strsubQualifier = "!=")
								if (intLoopCnt >= 1 and intLoopCnt < recList1list->cnt)
									intResult = negate(intResult)
									intGlobalResult = intResult
								endif
							endif
 
							if (intResult = 1)
								intOrderListCount = intOrderListCount + 1
								stat = alterlist(SPIndex->qual, intOrderListCount)
								SPIndex->qual[intOrderListCount].index = intOrderIndex
								SPIndex->cnt = intOrderListCount
								if (intOrderListCount > 1)
									if (SPIndex->qual[intOrderListCount].index = SPIndex->qual[intOrderListCount-1].index)
										intOrderListCount = intOrderListCount -1
										stat = alterlist(SPIndex->qual, intOrderListCount)
										SPIndex->cnt = intOrderListCount
									endif ; end of equal to
								endif ; end of intOrderListCount > 1
							endif
						with nocounter
						set intLoopCnt = 0
					endif ; end of intV500Data_ind
					*/ ; 005 END
				endif ; end of intIngredientInd
           	endif ; end of strRequestType
		call echo(concat("intResult: ", build(intResult)))
	endif ; end of (intOrdMethod_indx)
	;set intRetVal = intResult
end; end of subroutine
;***********************************************************************************************************
call echo(concat("intGlobalResult: ", build(intGlobalResult)))
 
;009 begin
;call echo(concat("SPIndex->cnt: ", build(SPIndex->cnt)))
 
;010 begin
set i = 0	;010
set j = 0	;010
call echo(concat("intIngredientInd: ", build(intIngredientInd)))
call echo(concat("strRequestType: ", build(strRequestType)))
 
;013 BEGIN
if (SPIndex->cnt > 0)
	for (i=1 to SPIndex->cnt)
		if (SPIndex->qual[i]->ingind = 1)
			if (SPIndex->qual[i]->cnt_Ingredient > 0)
				set intRetVal = 1
				set i = SPIndex->cnt + 1
			else ; SPIndex->qual[i]->cnt_Ingredient = 0
				set intRetVal = 0
			endif
		else ; SPIndex->qual[i]->ingind = 0
			set intRetVal = 1
			set i = SPIndex->cnt + 1
		endif
	endfor ; end of i
endif ; end of SPIndex->cnt > 0
 
/*013
if (intIngredientInd = 1)
	if (SPIndex->cnt > 0)
		CALL ECHO(CONCAT("strRequestType: ", BUILD(strRequestType)))
		if (trim(strRequestType) = "IngredientList");012
			;010	set intRetVal = 1
			for (i=1 to SPIndex->cnt)
				if (SPIndex->qual[i]->cnt_Ingredient > 0)
					set intRetVal = 1
					set i = SPIndex->cnt + 1
				else
					set j = j + 1
					if ( j = SPIndex->qual[i]->cnt_Ingredient )
						set intRetVal = 0
						set j = 0
					endif
				endif
			endfor
		;012 begin
		else
			set intRetVal = 1
		endif
		;012 end
	else
		set intRetVal = 0
	endif ; end of SPIndex->cnt
else
	if (SPIndex->cnt > 0)
		set intRetVal = 1
	else
		set intRetVal = 0
	endif
endif
013 */
;013 END
 
;010 end
;009 set intRetVal = intGlobalResult
call echo(concat("final intRetVal: ", build(intRetval)))
;009 end
 
#EndProgram
 
	declare intTempCount = i2 with public, noconstant(0)
	declare booFalse = i2 with public, noconstant(0)
 
	call echo(strMsg)
 
 	;021
 	call echo(concat("iSkipDetailInd: ", build(iSkipDetailInd), "   iNewActionOldTemplateInd: ", build(iNewActionOldTemplateInd)))
 
	if (iSkipDetailInd = 0) ;021
		;021 begin
		if (iNewActionOldTemplateInd = 1)
			set strMsg = "action(s) is/are new action(s), but it's old template"
			set retVal = 0
			call echo(strMsg)
		else
		;021 end
			if ( size(trim(strMsg,3))=0 )
				if (recOPT_LIST2list->cnt = 0)
					if (recOPT_ORDERSlist->cnt = 1)
						if (recLIST1list->cnt = 1)
							set strMsg = concat("orders exist ", trim(ORD_METHOD,3),
								" ", trim(recOPT_ORDERSlist->qual[1].display,3)," where order detail ",
								trim(recORDER_DETAILlist->qual[1].display), " ",trim(recQUALIFIERlist->qual[1].display), " ",
								trim(recLIST1list->qual[1].display, 3), ".")
						else ; recOPT_LIST1list->cnt > 1
							set strMsg = concat("orders exist ", trim(ORD_METHOD,3),
								" ", trim(recOPT_ORDERSlist->qual[1].display,3), " where order detail ",
								trim(recORDER_DETAILlist->qual[1].display), " ", trim(recQUALIFIERlist->qual[1].display)," LIST1.")
						endif ; end of recOPT_LIST1list->cnt
					;002 else ;recOPT_ORDERSlist->cnt > 1
					/*002*/
					elseif (recOPT_ORDERSlist->cnt > 1)
						if (recLIST1list->cnt = 1)
							set strMsg = concat("orders exist ", trim(ORD_METHOD,3), " OPT_ORDERS where order detail ",
								trim(recORDER_DETAILlist->qual[1].display), " ", trim(recQUALIFIERlist->qual[1].display), " ",
								trim(recLIST1list->qual[1].display, 3), ".")
						else ; recOPT_LIST1list->cnt > 1
							set strMsg = concat("orders exist ", trim(ORD_METHOD,3), " OPT_ORDERS where order detail ",
								trim(recORDER_DETAILlist->qual[1].display), " ", trim(recQUALIFIERlist->qual[1].display), " LIST1")
						endif ; end of recOPT_LIST1list->cnt
					;002
					else ; if (recOPT_ORDERSlist->cnt = 0)
						if (recLIST1list->cnt = 1)
							set strMsg = concat("orders from logic template ", trim(LINK,3), " with order detail ",
								trim(recORDER_DETAILlist->qual[1].display), " ", trim(recQUALIFIERlist->qual[1].display), " ",
								trim(recLIST1list->qual[1].display, 3), ".")
						else ; recOPT_LIST1list->cnt > 1
							set strMsg = concat("orders from logic template ", trim(LINK,3), " with order detail ",
								trim(recORDER_DETAILlist->qual[1].display), " ", trim(recQUALIFIERlist->qual[1].display), " LIST1")
						endif ; end of recOPT_LIST1list->cnt
					endif ; end of recOPT_ORDERSlist->cnt
				else ; recOPT_LIST2list->cnt = 1
					if (recOPT_ORDERSlist->cnt = 1)
						set strMsg = concat("orders exist ", trim(ORD_METHOD,3), " ", trim(recOPT_ORDERSlist->qual[1].display,3),
							" where order detail ", trim(recORDER_DETAILlist->qual[1].display), " ",
							trim(recQUALIFIERlist->qual[1].display), trim(recLIST1list->qual[1].display, 3)," and ",
							trim(recOPT_LIST2list->qual[1].display, 3))
					;002 else
					/*002*/
					elseif (recOPT_ORDERSlist->cnt > 1)
						set strMsg = concat("orders exist ", trim(ORD_METHOD,3), " OPT_ORDERS where order detail ",
							" ", trim(recORDER_DETAILlist->qual[1].display), " ", trim(recQUALIFIERlist->qual[1].display),
							trim(recLIST1list->qual[1].display, 3)," and ", trim(recOPT_LIST2list->qual[1].display, 3))
					;002
					else ; if (recOPT_ORDERSlist->cnt = 0)
						if (recLIST1list->cnt = 1)
							set strMsg = concat("orders from logic template ", trim(LINK,3), " with order detail ",
								trim(recORDER_DETAILlist->qual[1].display), " ", trim(recQUALIFIERlist->qual[1].display),
								trim(recLIST1list->qual[1].display, 3)," and ", trim(recOPT_LIST2list->qual[1].display, 3))
						else ; recOPT_LIST1list->cnt > 1
							set strMsg = concat("orders from logic template ", trim(LINK,3), " with order detail ",
								trim(recORDER_DETAILlist->qual[1].display), " ", trim(recQUALIFIERlist->qual[1].display),
								trim(recLIST1list->qual[1].display, 3)," and ", trim(recOPT_LIST2list->qual[1].display, 3))
						endif ; end of recOPT_LIST1list->cnt
					endif   ; end of recOPT_ORDERSlist->cnt
				endif ; end of recOPT_LIST2list->cnt
			else
				set booFalse = 1
			endif
		endif ;021 end of iNewActionOldTemplateInd
 
		call echo(concat("retVal: ", build(retVal), "   intRetVal: ", build(intRetVal)))
 
		set retVal = intRetVal
 
	    ; if RetVal = -1, then set it to 0.
		if (RetVal = 1)
			set RetVal = 100
		else
			if (RetVal = -1)
				set RetVal = 0
			endif
 
	 		if (iNewTemplateInd != 0 and iAllNewActionInd != 1) ;021
				if (booFalse = 0)
					set strMsg = concat("NO ", trim(strMsg,3))
				endif
	 		endif ;021
			/*
			if (recOPT_LIST2list->cnt = 0)
				set strMsg = concat("NO orders exist ", trim(ORD_METHOD,3), " OPT_ORDERS where order detail ",
					trim(recORDER_DETAILlist->qual[1].display), " ",
					trim(recQUALIFIERlist->qual[1].display), " LIST1")
			else
				set strMsg = concat("NO orders exist ", trim(ORD_METHOD,3), " OPT_ORDERS where order detail ",
					trim(recORDER_DETAILlist->qual[1].display), " ",
					trim(recQUALIFIERlist->qual[1].display), " LIST1 and OPT_LIST2")
			endif
			*/
		endif
	endif ;021 end of iSkipDetailInd
 
	declare iNewActionCnt = i2 with noconstant(0)
 
 	call echo(concat("iNewActionInd: ", build(iNewActionInd), "  retval: ", build(retval),
 		"  iNewTemplateInd: ", build(iNewTemplateInd),"  templateType: ", build(templateType)))
 
	if (retval=100)
 
		;021 begin
		;023 begin
		/*
		record tmpSPINDEX(
		1 cnt = i2
		1 qual[*]
			2 Index = i4
			2 NewActionInd = i2
			2 IngInd = i2
			2 cnt_Ingredient = i2
			2 qual_Ingredient[*]
				3 Index_Ingredient = i4
		)
 
		if (SPINDEX->cnt > 0)
			for (i=1 to SPINDEX->cnt)
				if ( (SPINDEX->qual[i].cnt_Ingredient = 0 and SPINDEX->qual[i].IngInd = 0) OR
					 (SPINDEX->qual[i].cnt_Ingredient > 0 and SPINDEX->qual[i].IngInd > 0) )
 
					set tmpSPINDEX->cnt = tmpSPINDEX->cnt + 1
					set stat = alterlist(tmpSPINDEX->qual, tmpSPINDEX->cnt)
					set tmpSPINDEX->qual[tmpSPINDEX->cnt].index = SPINDEX->qual[i].Index
					set tmpSPINDEX->qual[tmpSPINDEX->cnt].NewActionInd = SPINDEX->qual[i].NewActionInd
					set tmpSPINDEX->qual[tmpSPINDEX->cnt].IngInd = SPINDEX->qual[i].IngInd
					set tmpSPINDEX->qual[tmpSPINDEX->cnt].cnt_Ingredient = SPINDEX->qual[i].cnt_Ingredient
 
					if (tmpSPINDEX->qual[tmpSPINDEX->cnt].cnt_Ingredient > 0)
						set stat = alterlist(tmpSPINDEX->qual[tmpSPINDEX->cnt]->qual_Ingredient, tmpSPINDEX->qual[tmpSPINDEX->cnt].cnt_Ingredient)
						for (j=1 to tmpSPINDEX->qual[tmpSPINDEX->cnt].cnt_Ingredient)
							set tmpSPINDEX->qual[tmpSPINDEX->cnt]->qual_Ingredient[j].Index_Ingredient =
							SPINDEX->qual[i].qual_Ingredient[j].Index_Ingredient
						endfor ;end of j
					endif ;end of cnt_Ingredient
				endif ;end of cnt_Ingredient & ingind
			endfor ;end of i
		endif ;end of SPINDEX->cnt
 
 		set SPIndex->cnt = tmpSPINDEX->cnt
		set stat = alterlist(SPINDEX->qual, SPIndex->cnt)
		for (i=1 to SPIndex->cnt)
			set SPINDEX->qual[i].Index = tmpSPINDEX->qual[i].Index
			set SPINDEX->qual[i].NewActionInd = tmpSPINDEX->qual[i].NewActionInd
			set SPINDEX->qual[i].IngInd = tmpSPINDEX->qual[i].IngInd
			set SPINDEX->qual[i].cnt_Ingredient = tmpSPINDEX->qual[i].cnt_Ingredient
			set stat = alterlist(SPINDEX->qual[i].qual_Ingredient, SPINDEX->qual[i].cnt_Ingredient)
			for (j=1 to SPINDEX->qual[i].cnt_Ingredient)
				set SPINDEX->qual[i]->qual_Ingredient[j].Index_Ingredient=tmpSPINDEX->qual[i]->qual_Ingredient[j].Index_Ingredient
			endfor
		endfor */
 		;023 end
 
 		if (iNewTemplateInd < 2)
			for (i=1 to SPIndex->cnt)
				if (iNewTemplateInd = 0)
					call echo("old template, no order_action")
					;old template, no order_action
					if (iNewActionInd = 1)
						for (j = 1 to recNewActionTypeList->cnt)
							if (request->orderList[SPIndex->qual[i].Index].actionTypeCd=cnvtreal(recNewActionTypeList->qual[j].value))
								;found new actions on old template
								set SPIndex->qual[i].NewActionInd = 1
								set iNewActionCnt = iNewActionCnt + 1
								set j = recNewActionTypeList->cnt + 1
							endif ;end of actionTypeCd
						endfor ;j
					endif ;end fo iNewActionInd
				elseif (iNewTemplateInd = 1)
					call echo("new template, with order_action")
					;new template, with order_action
					if (iActionTypeALLInd = 1)
						;*all action tyoe
						set iNewActionCnt = 1
						set SPIndex->qual[i].NewActionInd = 1
					else
						for (j = 1 to recORDER_ACTIONlist->cnt)
							if (request->orderList[SPIndex->qual[i].Index].actionTypeCd=cnvtreal(recORDER_ACTIONlist->qual[j].value))
								;found qualified action on new template
								set SPIndex->qual[i].NewActionInd = 1
								set iNewActionCnt = iNewActionCnt + 1
								set j = recORDER_ACTIONlist->cnt + 1
							endif ;end of actionTypeCd
						endfor ;j
					endif ;end of iActionTypeALLInd
				endif ;end of iNewTemplateInd
			endfor ;i
 
	 		call echo(concat("iNewActionCnt : ", build(iNewActionCnt)))
 
	 		if (iNewTemplateInd = 1)
	 			;new template
	 			if (iNewActionCnt = 0)
	 				;new action with no qualified action
	 				set retval = 0
	 				set strMsg = "no qualified action found"
	 				call echo(concat("strMsg: ", build(strMsg)))
	 			endif
	 		else
	 			;old template
	 			if (iNewActionCnt = SPIndex->cnt)
	 				;all actions are on the exclusive list
					set retval = 0
					set strMsg = "All orders are at exculsive list"
					call echo(concat("strMsg: ", build(strMsg)))
				endif
			endif
 		endif ;end of iNewTemplateInd < 2
 
 		;023 begin
 		if (retval > 0 and size(strMsg) = 0)
			set strMsg = concat("orders exist ", trim(ORD_METHOD,3), " OPT_ORDERS ")
		endif
		;023 end
	endif
	;021 end
 
	if (cnvtupper(trim(templateType)) = "LOGIC")
		set eksdata->tqual[tinx].qual[curindex].logging = strMsg
		set personid = Request->person_id
		set encntrid = Request->encntr_id
		;017 set accessionid = 0
		set accessionid = 0.00	;017
		;017 set orderid = 0
		set orderid = 0.00	;017
		set eksdata->tqual[tinx].qual[curindex].logging = strMsg
		set eksdata->tqual[tinx].qual[curindex].person_id = personid
		set eksdata->tqual[tinx].qual[curindex].encntr_id = encntrid
 
		;017 begin
		if (size(request->OrderList,5) = 1)
			set orderid = request->OrderList[1].orderid
			set eksdata->tqual[tinx].qual[curindex].order_id = orderid
		endif
		;017 end
 
		if (RetVal = 100)
			set intTempCount = 1
			set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data, intTempCount)
			set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc = "<SPINDEX>"
 
			for (i=1 to SPIndex->cnt)
 				if (intOrdMethod_indx = 5)
 					;linked template
					if (SPIndex->qual[i].cnt_ingredient>0)
						for (j=1 to SPIndex->qual[i].cnt_ingredient)
							set intTempCount = intTempCount + 1
							set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data,intTempCount)
							set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc =
								concat(trim(cnvtstring(SPIndex->qual[i].index),3), " : ",
								trim(cnvtstring(SPIndex->qual[i]->qual_Ingredient[j].Index_Ingredient),3))
						endfor
					else
						if (SPIndex->qual[i].cnt_ingredient = 0 and SPIndex->qual[i].IngInd = 0) ;024
							set intTempCount = intTempCount + 1
							set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data, intTempCount)
							set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc =
								cnvtstring(SPIndex->qual[i].index)
						endif ;024
					endif
				else
					;021 begin
					if (iNewTemplateInd = 0) ;old template
						;if (intOrdMethod_indx != 5)
							if (SPIndex->qual[i].NewActionInd = 0)	;021
								if (SPIndex->qual[i].cnt_ingredient>0)
									for (j=1 to SPIndex->qual[i].cnt_ingredient)
										set intTempCount = intTempCount + 1
										set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data,intTempCount)
										set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc =
											concat(trim(cnvtstring(SPIndex->qual[i].index),3), " : ",
											trim(cnvtstring(SPIndex->qual[i]->qual_Ingredient[j].Index_Ingredient),3))
									endfor
								else
									if (SPIndex->qual[i].cnt_ingredient = 0 and SPIndex->qual[i].IngInd = 0) ;024
										set intTempCount = intTempCount + 1
										set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data, intTempCount)
										set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc =
											cnvtstring(SPIndex->qual[i].index)
									endif ;024
								endif
							else
								call echo(concat("old template, remove new action from SPIndex - index ", build(i)))
								;set retval = 0
							endif ;end of NewActionInd
						;endif ;end of intOrdMethod_indx != 5
					else ;new template
					;021 end
						;021 begin
						if (iActionTypeALLInd = 1)
							if (SPIndex->qual[i].cnt_ingredient>0)
								for (j=1 to SPIndex->qual[i].cnt_ingredient)
									set intTempCount = intTempCount + 1
									set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data,intTempCount)
									set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc =
										concat(trim(cnvtstring(SPIndex->qual[i].index),3), " : ",
										trim(cnvtstring(SPIndex->qual[i]->qual_Ingredient[j].Index_Ingredient),3))
								endfor
							else
								if (SPIndex->qual[i].cnt_ingredient = 0 and SPIndex->qual[i].IngInd = 0) ;024
									set intTempCount = intTempCount + 1
									set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data,intTempCount)
									set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc =
										cnvtstring(SPIndex->qual[i].index)
								endif ;024
							endif
						else
 
							for (k=1 to recORDER_ACTIONList->cnt)
								if (request->OrderList[SPIndex->qual[i].Index].actionTypeCd =
									cnvtreal(recORDER_ACTIONList->qual[k].value))
							;021 end
									if (SPIndex->qual[i].cnt_ingredient>0)
										for (j=1 to SPIndex->qual[i].cnt_ingredient)
											set intTempCount = intTempCount + 1
											set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data,intTempCount)
											set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc =
												concat(trim(cnvtstring(SPIndex->qual[i].index),3), " : ",
												trim(cnvtstring(SPIndex->qual[i]->qual_Ingredient[j].Index_Ingredient),3))
										endfor
									else
										if (SPIndex->qual[i].cnt_ingredient = 0 and SPIndex->qual[i].IngInd = 0) ;024
											set intTempCount = intTempCount + 1
											set stat = alterlist(eksdata->tqual[tcurindex].qual[curindex]->data,intTempCount)
											set eksdata->tqual[tcurindex].qual[curindex]->data[intTempCount].misc =
												cnvtstring(SPIndex->qual[i].index)
										endif ;024
									endif
									set strMsg = concat(trim(strMsg), " with qualified order action - ",
										trim(recORDER_ACTIONList->qual[k].display), ", was/were found." ) ;023
									set k = recORDER_ACTIONList->cnt + 1
								;023 begin
								else
									if (k = recORDER_ACTIONList->cnt)
										set strMsg = concat(trim(strMsg), " but NO qualified order action found.")
									endif
								;023 end
								endif ;021 end of actionTypeCd
							endfor ;021 end of k - recORDER_ACTIONList->cnt
						endif ;021 end of iActionTypeALLInd
					endif ;021 end of iNewTemplateInd
				endif ;021 end of intOrdMethod_indx
			endfor ;end of i - SPIndex->cnt
			set eksdata->tqual[tcurindex]->qual[curindex].cnt = intTempCount - 1
 
			set strMsg = concat("(",trim(cnvtstring(eksdata->tqual[tcurindex]->qual[curindex].cnt)),") ",trim(strMsg)) ;021
			set eksdata->tqual[tinx].qual[curindex].logging = strMsg ;021
		endif ;end of RetVal
%i CCLSOURCE:eks_set_eksdata.inc
	endif ;end of if (cnvtupper(trim(templateType)) = "LOGIC")
 
 	call echo(concat("final retVal: ", build(retVal)))
 
	call echo(concat(format(curdate, "dd-mmm-yyyy;;d")," ", format(curtime3, "hh:mm:ss.cc;3;m"),
		"  *******  End of Program EKS_T_DIALOGUE_ORDER_DETAIL  *********"),1,0)
end
go



;Generated by GNU enscript 1.6.4.
