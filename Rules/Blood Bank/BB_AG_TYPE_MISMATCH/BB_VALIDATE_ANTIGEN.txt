drop program bb_validate_antigen go
create program bb_validate_antigen

/*
Purpose:
The purpose of this program is to limit the number of logic templates needed for the rule.
It determines whether one of the antigens resulted from a EKS_RESULT_STATUS template includes 
any of the negative antigens from code set 1612.

Filtering:
Query only returns a value if they are invalid. If curqual = 0, then the AB resulted
is valid. Validity is based on code set extension "EXCL AG" from 1612. This code set is not required
but was built for antigens like "Corrected" and "No AB Identified" which should be excluded
from the rule. 
*/
declare antigen = vc
declare res = c2
declare resalpha = vc

select into "nl:"
	cv.display
	, r.task_assay_cd
from 
	result r 
	, perform_result pr
	, code_value cv
	, code_value_extension cve
Plan r where r.order_id = link_orderid
Join pr where pr.result_id = r.result_id
	and pr.result_code_set_cd > 0
Join cv where cv.code_set = 1612
	and cv.active_ind = 1
	and cv.cdf_meaning = "-"
	and cv.code_value = pr.result_code_set_cd
Join cve where cve.code_set = 1612
	and cve.code_value = cv.code_value
	;create code set extension if antigens should be ecluded
	and cve.field_name = "EXCL AG"
	and cve.field_value = "EXCL"
detail 
	antigen = cv.display
	res = substring(63,4,link_misc1) ;reaction from EKS_RESULT_EVAL template
	;used in action group to display in Discern Notify message
	resalpha = concat(trim(r.task_assay_cd), " = ",(trim(replace(res,";XXX","    ",0))))
with nocounter

if (curqual > 0)
	set retval = 0
	set log_message = build(antigen, " is not a valid antigen. ")
else
	set retval = 100
	set log_misc1 = resalpha
	set log_message = build(resalpha)
endif

end
go
