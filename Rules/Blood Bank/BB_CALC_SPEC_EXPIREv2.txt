drop program bb_calc_spec_expire go
create program bb_calc_spec_expire
 
free set requestin
free set specreplyin225067
 
/*****************************************************************************/
/* Request record                                                            */
/*****************************************************************************/
 
record requestin
(
   1 alert_ind            = c1    ; "Y" = processing for an alert, otherwise will return data
   1 PersonList[*]
     2 person_id          = f8
     2 filter_encntr_id   = f8
     2 encntr_facility_cd = f8    ; Use only when want to calculate by a specific facility (eg. encntr combines).
   1 facility_cd          = f8
   1 app_key              = c10   ; pass as "AVAILSPECS", if script is called from Available Specimens
)
 
/*****************************************************************************/
/* Reply record used to store data from BBT_GET_AVAIL_FLEX_SPECS             */
/*****************************************************************************/
record specreplyin225067
(
   1 historical_demog_ind              = i2
   1 PersonList[*]
     2 alert_flag                      = c1    ; Set when request->alert_ind = 1 ("Y" = avail specimen found)
     2 person_id                       = f8
     2 new_sample_dt_tm                = dq8
     2 name_full_formatted             = c40
     2 Specimen[*]
       3 specimen_id                   = f8
       3 encntr_id                     = f8
       3 override_id                   = f8
       3 override_cd                   = f8
       3 override_disp                 = vc
       3 override_mean                 = c12
       3 drawn_dt_tm                   = dq8
       3 unformatted_accession         = c20
       3 accession                     = c20
       3 expire_dt_tm                  = dq8
       3 flex_on_ind                   = i2      ; 0 = no (not as much info is populated), 1 = yes
       3 flex_max                      = i4
       3 flex_days_hrs_mean            = c12
       3 historical_name               = c40
       3 encntr_facility_cd            = f8
       3 testing_facility_cd           = f8
       3 Orders[*]
         4 order_id                    = f8
         4 order_mnemonic              = vc
         4 status                      = c40    ; Display of orders table dept_status_cd
         4 Products[*]
           5 product_nbr_display       = vc
           5 product_id                = f8
           5 product_event_id          = f8
           5 product_type_cd           = f8
           5 product_type_disp         = vc
           5 locked_ind                = i2
           5 crossmatch_expire_dt_tm   = dq8
           5 updt_applctx              = f8
         4 order_status_cd             = f8
         4 order_status_disp           = vc
         4 order_Status_mean           = c12
         4 catalog_cd                  = f8
         4 catalog_disp                = vc
         4 catalog_mean                = c12
         4 phase_group_cd              = f8
         4 phase_group_disp            = vc
         4 phase_group_mean            = c12
       3 max_expire_dt_tm 			   = dq8
       3 max_expire_flag  			   = i2
       3 is_expired_flag               = i2
%i cclsource:status_block.inc
)
 
/*****************************************************************************/
/* Temp Record used to store valid specimens after invalid orders excluded   */
/*****************************************************************************/
record valid_orders
(
   1 PersonList[1]
     2 person_id                       = f8
     2 name_full_formatted             = c40
     2 is_valid						   = i2
     2 Specimen[*]
       3 specimen_id                   = f8
       3 encntr_id                     = f8
       3 unformatted_accession         = c20
       3 accession                     = c20
       3 expire_dt_tm                  = dq8
       3 Orders[*]
         4 order_id                    = f8
         4 catalog_cd                  = f8
       3 is_expired_flag               = i2
)
 
/*****************************************************************************/
/* Variable Declaration                                                      */
/*****************************************************************************/
 
declare plist_cnt					   = i4
declare slist_cnt 					   = i4
declare slist_cnt_temp				   = i4
declare olist_cnt_temp				   = i4
declare olist_cnt					   = i4
declare opt_cnt						   = i4
declare opt_valid_abo				   = i4
declare opt_valid_absc				   = i4
declare opt_valid_xm				   = i4
declare facility_cd 				   = f8
;declare ExpireDtTm 					   = dq8 ;old code
;declare MaxExpireDtTm 				   = dq8 ;old code
declare i_idx						   = i4
declare j_idx						   = i4
declare l_idx 						   = i4
declare log_type					   = i4
 
declare OPT_PARAM_ABORH            	   = c5   with protect, constant("ABORH")
declare OPT_PARAM_ABSC            	   = c4   with protect, constant("ABSC")
declare OPT_PARAM_XM            	   = c2   with protect, constant("XM")
 
declare ACTIVITY_TYPE_CS               = i4   with protect, constant(106)
 
declare BB_ACTIVITY_TYPE_MEAN          = c12  with protect, constant("BB")
declare bb_activity_type_cd            = f8   with protect, noconstant(0.0)
 
declare BB_ORDERABLE_PROC_CS           = i4   with protect, constant(1635)
 
declare ABO_REQ_ORDER_MEAN             = vc  with protect, constant("PATIENT ABO")
declare abo_req_order_cd               = f8   with protect, noconstant(0.0)
 
declare ABSC_C_REQ_ORDER_MEAN          = vc  with protect, constant("ABSC CI")
declare absc_c_req_order_cd            = f8   with protect, noconstant(0.0)
 
declare ABSC_REQ_ORDER_MEAN            = vc  with protect, constant("ABNTIBDY SCRN")
declare absc_req_order_cd              = f8   with protect, noconstant(0.0)
 
declare XM_REQ_ORDER_MEAN              = vc  with protect, constant("XM")
declare xm_req_order_cd                = f8  with protect, noconstant(0.0)
 
set abo_req_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(ABSC_C_REQ_ORDER_MEAN))
set absc_c_req_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(ABSC_C_REQ_ORDER_MEAN))
set absc_req_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(ABSC_REQ_ORDER_MEAN))
set xm_req_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(XM_REQ_ORDER_MEAN))
 
set bb_activity_type_cd = uar_get_code_by("MEANING", ACTIVITY_TYPE_CS, nullterm(BB_ACTIVITY_TYPE_MEAN))
 
/*****************************************************************************/
/* Acquire Patient Facility Location                                         */
/*****************************************************************************/
 
select into "nl:"
	e.loc_facility_cd
from
	encounter e
where e.encntr_id = link_encntrid ;   13571762.00;13530107.00 ;
	and e.active_ind = 1
	and e.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime)
	and e.end_effective_dt_tm >= cnvtdatetime(curdate,curtime)
 
detail
	facility_cd = e.loc_facility_cd
WITH  NOCOUNTER
 
/*****************************************************************************/
/* Populate Request Structure                                                */
/*****************************************************************************/
 
set stat = alterlist(requestin->PersonList,1)
set requestin->alert_ind = "N"                         ; "Y" = processing for an alert, otherwise will return data
set requestin->PersonList[1].person_id = link_personid ;    5200247.00;5169589.00 ;
set requestin->PersonList[1].filter_encntr_id = 0
set requestin->PersonList[1].encntr_facility_cd = 0 ; Use only when want to calculate by a specific facility (eg. encntr combines).
set requestin->facility_cd = facility_cd
set requestin->app_key = "";"AVAILSPECS"              ; pass as "AVAILSPECS", if script is called from Available Specimens
 
execute bbt_get_avail_flex_specs with REPLACE("REQUEST","REQUESTIN"),
                                REPLACE("REPLY","SPECREPLYIN225067")
 
;call echorecord(SPECREPLYIN225067)
 
;if bbt_get_avail_flex_specs fails to execute then return an error
if (specreplyin225067->status_data.status = "Z")
	set log_type = 3
	go to EXIT_SCRIPT
elseif (specreplyin225067->status_data.status = "F")
	set log_type = 1
	go to EXIT_SCRIPT
endif
 
set plist_cnt = size(specreplyin225067->PersonList,5)
 
;call echo(plist_cnt)
 
;begin population of temp record structure
set valid_orders->PersonList[1].name_full_formatted = specreplyin225067->PersonList[1].name_full_formatted
set valid_orders->PersonList[1].person_id = specreplyin225067->PersonList[1].person_id
 
set slist_cnt = size(specreplyin225067->PersonList[1].Specimen,5)
 
if (slist_cnt < 1)
	set log_type = 3
	go to EXIT_SCRIPT
endif
 
 
;ensure if parameter is entered that it is valid
set opt_cnt = size(eksdata->tqual[3]->qual,5)
set opt_valid_abo = 0
set opt_valid_absc = 0
set opt_valid_xm = 0
 
;opt_valid_cnt will be used in logic to determine if all orders entered are on a specimen to determine it's validity
if (opt_cnt > 0)
	for (i_idx = 1 to opt_cnt)
		if (eksdata->tqual[3]->qual[i_idx] = OPT_PARAM_ABORH)
			set opt_valid_abo = 1
		elseif (eksdata->tqual[3]->qual[i_idx] = OPT_PARAM_ABSC)
			set opt_valid_absc = 1
		elseif (eksdata->tqual[3]->qual[i_idx] = OPT_PARAM_XM)
			set opt_valid_xm = 1
		endif
	endfor
endif
 
set slist_cnt_temp = 0
set log_type = -1
 
/*If specimen only has one order need to ensure that it is not a product order with "No Special Processing" or .Hx order.
;If it is, the specimen should not be considered valid.
;If specimen contains > 1 order, ensure that at least one of the orders is a true order a specimen would be collected for.
*/
 
for (l_idx = 1 to slist_cnt)
	;determine number of orders on specimen
	set olist_cnt = size(specreplyin225067->PersonList[1].Specimen[l_idx].Orders,5)
 	set olist_cnt_temp = 0
 
	for (j_idx = 1 to olist_cnt)
 		;if opt_cnt > 0 then include a different selected here woo!
 
 
 
 		;logic to flex select based on service directory here
 
 
 
 
 
 
 
 
 
 
 
 
		select into "nl:"
			cv.code_value
		from
 			code_value cv
 			, order_catalog oc
 			, code_value_extension cve
 		Plan oc where oc.activity_type_cd = bb_activity_type_cd
 			and oc.active_ind = 1
 			and oc.catalog_cd = specreplyin225067->PersonList[1].Specimen[l_idx].Orders[j_idx].catalog_cd
 		Join cv where cv.code_set = 200
 			and cv.code_value = oc.catalog_cd
 		Join cve where cve.code_set = 200
 			and cve.code_value = cv.code_value
 			and cve.field_name = "SPEC EXPIR EXCL"
 			and cve.field_value = "EXCLUDE"
 
 		if (curqual = 0)
 			set olist_cnt_temp = olist_cnt_temp + 1
 		endif
	endfor
 
	if (olist_cnt_temp > 0) ;*****need to test is_expired functionality**** may need to add qualification here
		set slist_cnt_temp = slist_cnt_temp + 1
	endif
 
endfor
 
;if valid specimens exist return true
if (slist_cnt_temp > 0)
	set log_message = build(slist_cnt_temp," valid specimen. ")
	set retval = 100
endif
 
 
/*
;old code - may want to use similar code above to actually get the expiration date in the log file
 
		if (slist_cnt = 1)
			;one valid specimen - own separate if statement so log_message output can have correct verbage
			set log_message = build(slist_cnt," specimen valid with an expiration date of: ",
			datetimezoneformat(SPECREPLYIN225067->PersonList[1].Specimen[1].expire_dt_tm,curtimezoneapp,"MM/dd/yy hh:mm:ss ZZZ"))
			set retval = 100
 
		elseif (slist_cnt > 1)
			;if more than one valid specimen exists then get the largest expiration date to output in EKS_MONITOR report
			set MaxExpireDtTm = SPECREPLYIN225067->PersonList[1].Specimen[1].expire_dt_tm
			for (l_idx = 2 to slist_cnt)
				if (SPECREPLYIN225067->PersonList[1].Specimen[l_idx].expire_dt_tm > MaxExpireDtTm)
					set MaxExpireDtTm = SPECREPLYIN225067->PersonList[1].Specimen[l_idx].expire_dt_tm
				endif
			endfor
 
			set log_message = build(slist_cnt," specimens valid with a maximum expiration date of: ",
			datetimezoneformat(MaxExpireDtTm,curtimezoneapp,"MM/dd/yy hh:mm:ss ZZZ"))
			set retval = 100
 
		endif
*/
 
#EXIT_SCRIPT
 
if (log_type = 1)
	;return error and log error handler from script - this should only execute if database is corrupted somehow
	set log_message = build(" bbt_get_avail_flex_specs failed to execute because: ", trim(specreplyin225067->status_data.
	subeventstatus[1].TargetObjectValue))
	set retval = -1
elseif (log_type = 2)
	set log_message = " bb_calc_spec_expire failed to populate person record structure. No valid person found. "
	set retval = -1
elseif (log_type = 3)
	;if no specimens are returned the template returns false
	set retval = 0
	set log_message = " No valid specimen found."
endif
 
end
go
 
;bb_calc_spec_expire go
 