drop program bbt_get_spec_expire_mod go
create program bbt_get_spec_expire_mod
/*
        Program purpose:        This script will get all available specimens
                                using flexible specimen expiration parameters.
                                This script will be used by the override function
                                as well as for identifying specimens for system
                                override.
 
        Tables read:            accession_order_r
                                bb_spec_expire_ovrd
                                blood_product
                                code_value_extension
                                container
                                crossmatch
                                order_serv_res_container
                                orders
                                perform_result
                                person
                                person_name_hist
                                product
                                product_index
                                product_event
                                result
                                service_directory
 
/*****************************************************************************/
/* Reply record                                                              */
/*****************************************************************************/
record data
(
   1 historical_demog_ind            = i2
   1 person_id                       = f8
   1 new_sample_dt_tm                = dq8
   1 name_full_formatted             = c40
   1 Specimen[*]
     2 specimen_id                   = f8
     2 encntr_id                     = f8
     2 override_id                   = f8
     2 override_cd                   = f8
     2 override_disp                 = vc
     2 override_mean                 = c12
     2 drawn_dt_tm                   = dq8
     2 unformatted_accession         = c20
     2 accession                     = c20
     2 expire_dt_tm                  = dq8
     2 flex_on_ind                   = i2      ; 0 = no (not as much info is populated), 1 = yes
     2 flex_max                      = i4
     2 flex_days_hrs_mean            = c12
     2 encntr_facility_cd            = f8
     2 testing_facility_cd           = f8
     2 Orders[*]
       3 order_id                    = f8
       3 order_mnemonic              = vc
       3 status                      = c40    ; Display of orders table dept_status_cd
       3 order_status_cd             = f8
       3 catalog_cd                  = f8
       3 catalog_disp                = vc
     2 max_expire_dt_tm 			 = dq8
     2 max_expire_flag  			 = i2
     2 is_expired_flag               = i2
     2 not_inlab_flag				 = i2
     2 is_valid_flag				 = i2
%i cclsource:status_block.inc
)
 
set data->status_data.status = "F"
 
/*****************************************************************************/
/* Temp record structure:                                                    */
/*    The temp record structure is utilized to collect information as tables */
/*    are hit. The information collected is either used for qualification of */
/*    other tables or to be populated in the reply (to prevent the need of   */
/*    hitting the same table more than once.                                 */
/*****************************************************************************/
 
free set temp
 
record temp
(
   1 person_id                     = f8
   1 name_full_formatted           = c40
   1 birth_dt_tm                   = dq8
   1 Orders[*]
     2 order_id                    = f8
     2 encntr_id                   = f8
     2 encntr_fac_cd               = f8
     2 order_mnemonic              = vc
     2 status                      = c40     ; Display of orders table dept_status_cd
     2 order_status_cd             = f8
     2 catalog_cd                  = f8
     2 accession                   = c20
     2 not_inlab_flag			   = i2 ;dispatched or collection list
     2 Containers[*]
       3 container_id              = f8
       3 specimen_id               = f8
       3 new_spec_expire_dt_tm     = f8
       3 override_id               = f8
       3 override_cd               = f8
       3 drawn_dt_tm               = dq8
)
 
/*****************************************************************************/
/* Variable declarations                                                     */
/*****************************************************************************/
set modify predeclare
 
declare SCRIPT_NAME                   = c24  with constant("bbt_get_avail_flex_specs")
 
declare app_key						  = vc   with protect, noconstant("")
declare pos						      = i4   with protect, noconstant(0)
declare err_msg						  = vc   with protect, noconstant("")
declare temp_drawdt				      = q8   with protect, noconstant(0)
declare DrawDtIndexHold				  = i2   with protect, noconstant(0)
declare ValidSpecHold				  = i2   with protect, noconstant(0)
declare ReturnMsg  					  = vc   with protect, noconstant("")
;declare
 
declare stat                          = i4   with protect, noconstant(0)
 
; Temp alterlist counts.
declare temp_order_count              = i4   with protect, noconstant(0)
declare temp_container_count          = i4   with protect, noconstant(0)
 
; Reply alterlist counts.
declare specimen_count                = i4   with protect, noconstant(0)
declare orders_count                  = i4   with protect, noconstant(0)
declare facility_count                = i4   with protect, noconstant(0)
 
; Expand variables
declare h_idx						  = i4   with protect, noconstant(0)
declare i_idx                         = i4   with protect, noconstant(0)
declare j_idx                         = i4   with protect, noconstant(0)
declare k_idx                         = i4   with protect, noconstant(0)
declare l_idx                         = i4   with protect, noconstant(0)
declare x_idx                         = i4   with protect, noconstant(0)
declare y_idx                         = i4   with protect, noconstant(0)
declare z_idx                         = i4   with protect, noconstant(0)

declare SpecIndexHold                 = i4   with protect, noconstant(0)
declare OrdIndexHold                  = i4   with protect, noconstant(0)
declare FacilityIdxHold               = i4   with protect, noconstant(0)
 
declare CURRENT_DT_TM_HOLD            = q8   with protect, constant(cnvtdatetime(curdate, curtime3))
declare expDtTm                       = q8   with protect, noconstant(0.0)
declare maxExpDtTmHold                = q8   with protect, noconstant(0.0)
declare flexMaxHold                   = i4   with protect, noconstant(0)
declare flexDaysHrsMeanHold           = c12  with protect, noconstant(fillstring(12, " "))
declare flexTestingFacCdHold          = f8   with protect, noconstant(0.0)
declare encntrFacilityCdHold          = f8   with protect, noconstant(0.0)
declare maxExpDtTm                    = q8   with protect, noconstant(0.0)
declare maxOrderDrawnDtTm             = q8   with protect, noconstant(0.0)
 
declare SUP_GRP_ORD_TYPE              = i2   with protect, constant(2)
declare ORD_SET_ORD_TYPE              = i2   with protect, constant(6)
 
; preference variable for flex specimen
declare SYS_ANTI_OVRD_CDF_MEANING     = c12  with protect, constant("SYS_ANTI")
declare NEONATE_OVRD_CDF_MEANING      = c12  with protect, constant("NEONATE")
declare override_meaning              = c12  with protect, noconstant
; Old style preference variables (not flexible specimen)
declare old_expire_mean               = c1   with protect, noconstant(fillstring(1, " "))
declare old_expire_time               = f8   with protect, noconstant(0.0)
declare old_time_cd                   = f8   with protect, noconstant(0.0)
 
; Activity type code set 106
declare ACTIVITY_TYPE_CS              = i4   with protect, constant(106)
 
declare BB_ACTIVITY_TYPE_CDF          = c12  with protect, constant("BB")
declare bb_activity_type_cd           = f8   with protect, noconstant(0.0)
 
; Questions code set 1661
declare QUESTIONS_CS                  = i4   with protect, constant(1661)
 
declare XM_EXP_CALC_QUES_CDF          = c12  with protect, constant("XM EXP CALC")
declare xm_exp_calc_ques_cd           = f8   with protect, noconstant(0.0)
 
declare XM_WARN_DYS_QUES_CDF          = c12  with protect, constant("XM WARN DYS")
declare xm_warn_dys_ques_cd           = f8   with protect, noconstant(0.0)
 
declare XM_WARN_HRS_QUES_CDF          = c12  with protect, constant("XM WARN HRS")
declare xm_warn_hrs_ques_cd           = f8   with protect, noconstant(0.0)
 
; Valid responses code set 1659
declare VALID_RESPONSES_CS            = i4   with protect, constant(1659)
 
declare HOURS_VALID_RESP_CDF          = C12  with protect, constant("H")
declare hours_valid_resp_cd           = f8   with protect, noconstant(0.0)
 
declare DAYS_VALID_RESP_CDF           = C12  with protect, constant("D")
declare days_valid_resp_cd            = f8   with protect, noconstant(0.0)
 
; Catalog type code set 6000
declare CATALOG_TYPE_CS               = i4   with protect, constant(6000)
 
declare GEN_LAB_CAT_TYPE_CDF          = c12  with protect, constant("GENERAL LAB")
declare gen_lab_cat_type_cd           = f8   with protect, noconstant(0.0)
 
; Order status code set 6004
declare ORDER_STATUS_CS               = i4   with protect, constant(6004)
 
; Order status (ordered, inprocess and completed).
declare ORDERED_STATUS_CDF            = c12  with protect, constant("ORDERED")
declare ordered_status_cd             = f8   with protect, noconstant(0.0)
 
declare INPROCESS_STATUS_CDF          = c12  with protect, constant("INPROCESS")
declare inprocess_status_cd           = f8   with protect, noconstant(0.0)
 
declare COMPLETED_STATUS_CDF          = c12  with protect, constant("COMPLETED")
declare completed_status_cd           = f8   with protect, noconstant(0.0)
 
declare FUTURE_STATUS_CDF             = c12  with protect, constant("FUTURE")
declare future_status_cd              = f8   with protect, noconstant(0.0)
 
declare UNSCHEDULED_STATUS_CDF        = c12  with protect, constant("UNSCHEDULED")
declare unscheduled_status_cd         = f8   with protect, noconstant(0.0)
 
declare PENDING_REV_STATUS_CDF        = c12  with protect, constant("PENDING REV")
declare pending_rev_status_cd         = f8   with protect, noconstant(0.0)
 
declare SUSPENDED_STATUS_CDF          = c12  with protect, constant("SUSPENDED")
declare suspended_status_cd           = f8   with protect, noconstant(0.0)
 
; Department order status code set 14281
declare DEPT_ORDER_STATUS_CS          = i4   with protect, constant(14281)
 
; Department order statuss (in-lab and collected).
declare INLAB_DEPT_STATUS_CDF         = c12  with protect, constant("LABINLAB")
declare inlab_dept_status_cd          = f8   with protect, noconstant(0.0)
 
declare COLLECTED_DEPT_STATUS_CDF     = c12  with protect, constant("LABCOLLECTED")
declare collected_dept_status_cd      = f8   with protect, noconstant(0.0)
 
declare LABSCHEDULED_DEPT_STATUS_CDF  = c12  with protect, constant("LABSCHEDULED")
declare labscheduled_dept_status_cd   = f8   with protect, noconstant(0.0)
 
declare LABDISPATCH_DEPT_STATUS_CDF   = c12  with protect, constant("LABDISPATCH")
declare labdispatch_dept_status_cd    = f8   with protect, noconstant(0.0)
 
; Blood bank inventory states code set 1610
declare EVENT_TYPE_CS                 = i4   with protect, constant(1610)
 
;Blood bank orderable processing code set 1635
declare BB_ORDERABLE_PROC_CS          = i4   with protect, constant(1635)
 
declare PROD_REQ_ORDER_CDF            = vc   with protect, constant("PRODUCT ORDR")
declare prod_req_order_cd             = f8   with protect, noconstant(0.0)
 
declare ABO_ORDER_CDF           	   = vc  with protect, constant("PATIENT ABO")
declare abo_order_cd             	   = f8  with protect, noconstant(0.0)
 
declare ABSC_C_ORDER_CDF         	   = vc  with protect, constant("ABSC CI")
declare absc_c_order_cd                = f8  with protect, noconstant(0.0)
 
declare ABSC_ORDER_CDF          	   = vc  with protect, constant("ABNTIBDY SCRN")
declare absc_order_cd            	   = f8  with protect, noconstant(0.0)
 
declare XM_ORDER_CDF             	   = vc  with protect, constant("XM")
declare xm_order_cd              	   = f8  with protect, noconstant(0.0)
 
; Blood bank inventory states (crossmatched).
declare CROSSMATCHED_EVENT_TYPE_CDF   = c12  with protect, constant("3")
declare crossmatched_event_type_cd    = f8   with protect, noconstant(0.0)
 
declare facility_cd					  = f8   with protect, noconstant(0.0)
declare filterSpecimenByFacility	  = i2   with protect, noconstant(0)
declare test_facility_cd         	  = f8   with protect, noconstant(0.0)
declare pc_facility_cd                = f8   with protect, noconstant(0.0)
declare spec_in_facility              = i2   with protect, noconstant(0)
declare encntr_dsch_dt_tm_exists      = i2   with protect, noconstant(0)
declare trans_facility_cd             = f8   with protect, noconstant(0.0)
declare appKeyValue                   = c10  with protect, noconstant(fillstring(10, " "))
 
declare opt_valid_abo				  = i2   with protect, noconstant(0)
declare opt_valid_absc				  = i2   with protect, noconstant(0)
declare opt_valid_xm				  = i2   with protect, noconstant(0)
declare opt_valid_tot				  = i2   with protect, noconstant(0)
declare collec_list_param			  = i2   with protect, noconstant(0)
 
/*****************************************************************************/
/* Include any needed files.                                                 */
/*****************************************************************************/
%i ccluserdir:BBT_GetBBPreference.inc
%i ccluserdir:bbt_calc_flex_expiration.inc
 
/*****************************************************************************/
/* Retrieve activity type code value.                                        */
/*****************************************************************************/
set bb_activity_type_cd = uar_get_code_by("MEANING", ACTIVITY_TYPE_CS, nullterm(BB_ACTIVITY_TYPE_CDF))
 
/*****************************************************************************/
/* Retrieve questions code values.                                           */
/*****************************************************************************/
set xm_exp_calc_ques_cd = uar_get_code_by("MEANING", QUESTIONS_CS, nullterm(XM_EXP_CALC_QUES_CDF))
set xm_warn_dys_ques_cd = uar_get_code_by("MEANING", QUESTIONS_CS, nullterm(XM_WARN_DYS_QUES_CDF))
set xm_warn_hrs_ques_cd = uar_get_code_by("MEANING", QUESTIONS_CS, nullterm(XM_WARN_HRS_QUES_CDF))
 
/*****************************************************************************/
/* Retrieve valid responses code values.                                     */
/*****************************************************************************/
set hours_valid_resp_cd = uar_get_code_by("MEANING", VALID_RESPONSES_CS, nullterm(HOURS_VALID_RESP_CDF))
set days_valid_resp_cd = uar_get_code_by("MEANING", VALID_RESPONSES_CS, nullterm(DAYS_VALID_RESP_CDF))
 
/*****************************************************************************/
/* Retrieve catalog type code value.                                         */
/*****************************************************************************/
set gen_lab_cat_type_cd = uar_get_code_by("MEANING", CATALOG_TYPE_CS, nullterm(GEN_LAB_CAT_TYPE_CDF))
 
/*****************************************************************************/
/* Retrieve order status code values.                                        */
/*****************************************************************************/
set ordered_status_cd = uar_get_code_by("MEANING", ORDER_STATUS_CS, nullterm(ORDERED_STATUS_CDF))
set inprocess_status_cd = uar_get_code_by("MEANING", ORDER_STATUS_CS, nullterm(INPROCESS_STATUS_CDF))
set completed_status_cd = uar_get_code_by("MEANING", ORDER_STATUS_CS, nullterm(COMPLETED_STATUS_CDF))
set future_status_cd = uar_get_code_by("MEANING", ORDER_STATUS_CS, nullterm(FUTURE_STATUS_CDF))
set unscheduled_status_cd = uar_get_code_by("MEANING", ORDER_STATUS_CS, nullterm(UNSCHEDULED_STATUS_CDF))
set pending_rev_status_cd = uar_get_code_by("MEANING", ORDER_STATUS_CS, nullterm(PENDING_REV_STATUS_CDF))
set suspended_status_cd = uar_get_code_by("MEANING", ORDER_STATUS_CS, nullterm(SUSPENDED_STATUS_CDF))
 
/*****************************************************************************/
/* Retrieve department order status code values.                             */
/*****************************************************************************/
set inlab_dept_status_cd = uar_get_code_by("MEANING", DEPT_ORDER_STATUS_CS, nullterm(INLAB_DEPT_STATUS_CDF))
set collected_dept_status_cd = uar_get_code_by("MEANING", DEPT_ORDER_STATUS_CS, nullterm(COLLECTED_DEPT_STATUS_CDF))
set labscheduled_dept_status_cd = uar_get_code_by("MEANING", DEPT_ORDER_STATUS_CS, nullterm(LABSCHEDULED_DEPT_STATUS_CDF))
set labdispatch_dept_status_cd = uar_get_code_by("MEANING", DEPT_ORDER_STATUS_CS, nullterm(LABDISPATCH_DEPT_STATUS_CDF))
 
/*****************************************************************************/
/* Retrieve code value for crossmatched event type                           */
/*****************************************************************************/
set crossmatched_event_type_cd = uar_get_code_by("MEANING", EVENT_TYPE_CS, nullterm(CROSSMATCHED_EVENT_TYPE_CDF))
 
/*****************************************************************************/
/* Retrieve code value for 'Product Order' orderable processing type         */
/*****************************************************************************/
set prod_req_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(PROD_REQ_ORDER_CDF))
set abo_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(ABO_ORDER_CDF))
set absc_c_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(ABSC_C_ORDER_CDF))
set absc_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(ABSC_ORDER_CDF))
set xm_order_cd = uar_get_code_by("MEANING", BB_ORDERABLE_PROC_CS, nullterm(XM_ORDER_CDF))
 
/*****************************************************************************/
/* Validate prompt responses entered in template                             */
/*****************************************************************************/
if (cnvtupper($1) = "ABORH")
	set opt_valid_abo = 1
elseif (cnvtupper($1) = "NULL")
	set opt_valid_abo = 0
else
	set ReturnMsg = build2($1, " is not a valid OPT_PARAM for ABORh parameter. Valid Parameters are 'ABORH' and 'NULL'. ")
	call ReturnHandler(3, ReturnMsg)
endif
 
if (cnvtupper($2) = "ABSC")
	set opt_valid_absc = 1
elseif (cnvtupper($2) = "NULL")
	set opt_valid_absc = 0
else
	set ReturnMsg = build2(value($2), " is not a valid OPT_PARAM for ABSC parameter. Valid Parameters are 'ABSC' and 'NULL'. ")
	call ReturnHandler(3, ReturnMsg)
endif
 
if (cnvtupper($3) = "XM")
	set opt_valid_xm = 1
elseif (cnvtupper($3) = "NULL")
	set opt_valid_xm = 0
else
	set ReturnMsg = build2(value($3), " is not a valid OPT_PARAM for XM parameter. Valid Parameters are 'XM' and 'NULL'. ")
	call ReturnHandler(3, ReturnMsg)
endif
 
if (cnvtupper($4) = "CURORDER")
	set collec_list_param = 0
elseif (cnvtupper($4) = "FUTUREORDER")
	set collec_list_param = 1
else
	set ReturnMsg = build2($4, " is not a valid OPT_PARAM for status parameter. Valid parameters are 'CURORDER' and 'FUTUREORDER'. ")
	call ReturnHandler(3, ReturnMsg)
endif
 
set opt_valid_tot = opt_valid_abo + opt_valid_absc + opt_valid_xm
 
/*****************************************************************************/
/* Determine facility_cd from encounter_id                                   */
/*****************************************************************************/
select into "nl:"
	e.loc_facility_cd
from
	encounter e
where e.encntr_id =  link_encntrid ;13558120.00 ;test, labblah
 ; 13530107.00
;link_encntrid ;13558117.00;
 
	and e.active_ind = 1
	and e.beg_effective_dt_tm <= cnvtdatetime(curdate,curtime)
	and e.end_effective_dt_tm >= cnvtdatetime(curdate,curtime)
detail
	facility_cd = e.loc_facility_cd
with nocounter
/*****************************************************************************/
/* Determine whether client stores historical records                        */
/*****************************************************************************/
set data->historical_demog_ind = BbtGetHistoricInfoPreference(facility_cd)
 
set pc_facility_cd = facility_cd
set test_facility_cd = BbtGetFlexSpecTestingFacility(facility_cd)
/*If the testing facility cd is 0 it is a system level, retain the already set value of the pc_facility_cd.
If the testing facility cd is > 0, then it is a TFS, set the new value for the pc_facility_cd
*/
if (test_facility_cd = -1)
  	call ErrorHandler("F", "GetFlexSpecimenParams Failed", "Get test facility cd failed.")
endif
 
if (test_facility_cd > 0)
	set pc_facility_cd = test_facility_cd
endif
set filterSpecimenByFacility = BbtGetFlexFilterByFacility(pc_facility_cd)
 
if (validate(app_key))
	set appKeyValue = trim(cnvtupper(app_key))
endif
 
/*****************************************************************************/
/* Retrieve preference answers for old style specimen expiration (not        */
/* flexible specimen preferences defined in preference manager tool but the  */
/* preferences defined in preferences tool).                                 */
/*****************************************************************************/
; Get the answer to the xm expiration calculation question
select into "nl:"
    expire = uar_get_code_meaning(cnvtreal(trim(a.answer)))
 
from answer a
 
where a.question_cd = xm_exp_calc_ques_cd
  and a.active_ind  = 1
 
head report
    old_expire_mean = expire
 
with nocounter
 
; Determine which expiration time code value to use.
if (old_expire_mean = DAYS_VALID_RESP_CDF)
    set old_time_cd = xm_warn_dys_ques_cd
else ;if (old_expire_mean = HOURS_VALID_RESP_CDF)
    set old_time_cd = xm_warn_hrs_ques_cd
endif
 
; Get the answer to the expiration time question
select into "nl:"
    time = cnvtreal(trim(a.answer))
 
from answer a
 
where a.question_cd = old_time_cd
  and a.active_ind  = 1
 
head report
    if (old_expire_mean = DAYS_VALID_RESP_CDF)
	   	old_expire_time = time
    else ;(expire_mean = HOURS_VALID_RESP_CDF)
        old_expire_time = time/24.0
    endif
 
with nocounter
 
/*****************************************************************************/
/* o Obtain person name.                                                     */
/* o Obtain order information.                                               */
/*****************************************************************************/
 
; set orders limit as 6 months (180 days)
;set opt_valid_abo = 1
;set opt_valid_absc = 1
;set opt_valid_xm = 1
;set collec_list_param = 0
set maxOrderDrawnDtTm = datetimeadd(CURRENT_DT_TM_HOLD, -180)
set facility_count = 0
select into "nl:"
    p.*,
    e.*,
    o.*,
    aor.*,
    sd.*
 
from
    person             p,
    encounter          e,
    orders             o,
    accession_order_r  aor,
    service_directory  sd
 
plan p where p.person_id = link_personid ;5191611.00
;5169589.00
;link_personid ;5191608.00; 
join e where e.person_id = p.person_id
join o where o.person_id = p.person_id and o.current_start_dt_tm >= cnvtdatetime(maxOrderDrawnDtTm) ; process orders within 6 months
	and o.catalog_type_cd  = gen_lab_cat_type_cd
	and o.encntr_id+0.0 = e.encntr_id
	and o.activity_type_cd+0.0 = bb_activity_type_cd
	and o.orderable_type_flag != SUP_GRP_ORD_TYPE
	and o.orderable_type_flag != ORD_SET_ORD_TYPE
join sd  where sd.catalog_cd    = o.catalog_cd ;or join sd based on prompts
	and sd.bb_processing_cd != prod_req_order_cd
	and (((opt_valid_abo = 1 and opt_valid_absc = 1 and opt_valid_xm = 1)
		and sd.bb_processing_cd in (abo_order_cd, absc_c_order_cd, absc_order_cd, xm_order_cd))
     or ((opt_valid_abo = 1 and opt_valid_absc = 1)
     	and sd.bb_processing_cd in (abo_order_cd, absc_c_order_cd, absc_order_cd))
     or ((opt_valid_abo = 1) and sd.bb_processing_cd in (abo_order_cd))
     or	((opt_valid_absc = 1) and sd.bb_processing_cd in (absc_c_order_cd, absc_order_cd)))
	and not exists (select ;exclude items from code_value_extension
					cve.code_value
				from code_value_extension cve
				where cve.code_value = sd.catalog_cd
					and (cve.field_name = "SPEC EXPIR EXCL"
					and cve.field_value = "EXCLUDE"))
join aor where aor.order_id = outerjoin(o.order_id) ;outerjoin to include scheduled orders - not written to aor when scheduled
     			and aor.primary_flag = outerjoin(0)
 
order by
    p.person_id,
    e.encntr_id,
    aor.order_id
 
head report
    temp_order_count = 0
    specimen_count = 0
 
	data->person_id = p.person_id
	data->name_full_formatted = p.name_full_formatted
 
	temp->person_id = p.person_id
	temp->name_full_formatted = p.name_full_formatted
	temp->birth_dt_tm = p.birth_dt_tm
 
head e.encntr_id
    ; encntr_facility_cd was not passed in, use facility currently related to encounter.
    encntrFacilityCdHold = e.loc_facility_cd
 
    ; get the transfusion service facility for a particular encounter location
    trans_facility_cd = BbtGetFlexSpecTestingFacility(encntrFacilityCdHold)
 	FacilityIdxHold = locateval(x_idx, 1, size(FacilityInfo->Facilities, 5), trans_facility_cd,
  								FacilityInfo->Facilities[x_idx].testing_facility_cd)
  	if (FacilityIdxHold <= 0)
  		; transfusion service facility has never been added to the structure.
    	facility_count = facility_count + 1
    	if (facility_count > size(FacilityInfo->Facilities,5))
   			stat = alterlist(FacilityInfo->Facilities, facility_count + 9)
    	endif
 
 		FacilityInfo->Facilities[facility_count].testing_facility_cd = trans_facility_cd
 		; read flexible specimen parameters set at transfusion service facility using LoadFlexParams()
    	call GetFlexSpecimenParams (facility_count, encntrFacilityCdHold, 1, appKeyValue)
    	FacilityIdxHold = facility_count
  	endif
 
 	encntr_dsch_dt_tm_exists = 0
 	; Determine the maximum number of days specimens can be available for this facility , if flex is on
 	if (FacilityInfo->Facilities[FacilityIdxHold].flex_on_ind = 1)
 		; if person birth date time exists and if the patient is neonate, set max expiration units with neonate preference value
 		if (evaluate(nullind(p.birth_dt_tm), 0, 1, 0) = 1 and
 		    datetimediff(CURRENT_DT_TM_HOLD, p.birth_dt_tm) <= FacilityInfo->Facilities[FacilityIdxHold].neonate_age)
 			flexSpecMax = FacilityInfo->Facilities[FacilityIdxHold].neonate_age
 			; if neonate is discharged, then encntr_dsch_dt_tm_exists will be set to 1
 			encntr_dsch_dt_tm_exists = evaluate(nullind(e.disch_dt_tm), 0, 1, 0)
 		else
 			flexSpecMax = FacilityInfo->Facilities[FacilityIdxHold].max_spec_validity
    	endif
	endif
 
    filterByEncounterInd = 0
 
head aor.order_id
    if (FacilityInfo->Facilities[FacilityIdxHold].flex_on_ind = 1)
        ; Flexible specimen is turned ON for this encounters testing facility, check orders status
        if (((o.order_status_cd in(inprocess_status_cd, completed_status_cd))
        or ((o.order_status_cd = ordered_status_cd) and (collec_list_param = 1) and (o.dept_status_cd in
        (labscheduled_dept_status_cd, labdispatch_dept_status_cd)))
        or ((o.order_status_cd = ordered_status_cd) and (collec_list_param = 0) and (o.dept_status_cd in
        (inlab_dept_status_cd, collected_dept_status_cd))))
        ;filter sched and dispatched only if opt parameter defined.
        and (datetimediff(CURRENT_DT_TM_HOLD, o.current_start_dt_tm) <= flexSpecMax))
            ; this flag will be 1, only when neonate encounter is discharged,
	 		; do not consider the orders, if neonate encounter is discharged
            if (encntr_dsch_dt_tm_exists = 0)
				temp_order_count = temp_order_count + 1
 
				if (temp_order_count > size(temp->Orders, 5))
					stat = alterlist(temp->Orders, temp_order_count + 9)
				endif
 
				; Load the temp structure with the information from the orders table.
				temp->Orders[temp_order_count].order_id          = o.order_id
				temp->Orders[temp_order_count].order_mnemonic    = o.order_mnemonic
				temp->Orders[temp_order_count].encntr_id         = e.encntr_id
				temp->Orders[temp_order_count].encntr_fac_cd     = encntrFacilityCdHold
				temp->Orders[temp_order_count].status            = uar_get_code_display(o.dept_status_cd)
				temp->Orders[temp_order_count].order_status_cd   = o.order_status_cd
				temp->Orders[temp_order_count].catalog_cd        = sd.catalog_cd
	            temp->Orders[temp_order_count].accession    	 = aor.accession
 
	            if (o.dept_status_cd in (labscheduled_dept_status_cd, labdispatch_dept_status_cd))
	            	temp->Orders[temp_order_count].not_inlab_flag = 1
	            endif
	        endif
        endif
    else
        ; Flexible specimen is turned OFF for this encounters testing facility. Make calculations
        ; now and send info to reply list since we are finished with these at this point.
 
        if (o.order_status_cd in(ordered_status_cd, inprocess_status_cd, completed_status_cd, future_status_cd,
                                 unscheduled_status_cd, pending_rev_status_cd, suspended_status_cd))
            if (old_expire_mean = DAYS_VALID_RESP_CDF)
            	;The following line sets the time of o.current_start_dt_tm to 235959 and then adds the expire_time to it.
            	;Time is set to 235959 because when expire_time is by days the product does not expire until the end of the day.
                expireDtTm = datetimeadd(cnvtdatetime(cnvtdate(o.current_start_dt_tm), 235959), old_expire_time)
            else ;(old_expire_mean = HOURS_VALID_RESP_CDF)
                expireDtTm = datetimeadd(o.current_start_dt_tm, old_expire_time)
            endif
 
            if (expireDtTm > CURRENT_DT_TM_HOLD)
                specimen_count = specimen_count + 1
 
                if (specimen_count > size(data->Specimen,5))
                    stat = alterlist(data->Specimen, specimen_count + 9)
                endif
 
                data->Specimen[specimen_count].drawn_dt_tm = o.current_start_dt_tm
                data->Specimen[specimen_count].accession   = o.order_mnemonic
 
                if (o.dept_status_cd in (labscheduled_dept_status_cd, labdispatch_dept_status_cd))
                    data->Specimen[specimen_count].expire_dt_tm = cnvtdatetime("")
                else
                    data->Specimen[specimen_count].expire_dt_tm = expireDtTm
                endif
 
                data->Specimen[specimen_count].unformatted_accession = aor.accession
                data->Specimen[specimen_count].accession
                    = uar_fmt_accession(aor.accession, size(aor.accession,1))
 
                ; With old style preferences we will always have one order in the reply under each specimen.
                stat = alterlist(data->Specimen[specimen_count].Orders, 1)
 
                data->Specimen[specimen_count].Orders[1].order_id = o.order_id
                data->Specimen[specimen_count].Orders[1].order_mnemonic = o.order_mnemonic
                data->Specimen[specimen_count].Orders[1].status = uar_get_code_display(o.dept_status_cd)
                data->Specimen[specimen_count].Orders[1].order_status_cd = o.order_status_cd
                data->Specimen[specimen_count].accession = uar_fmt_accession(aor.accession,size(aor.accession,1))
                data->Specimen[specimen_count].unformatted_accession = aor.accession
                data->Specimen[specimen_count].Orders[1].catalog_cd = sd.catalog_cd
                data->Specimen[specimen_count].encntr_id = e.encntr_id
                data->Specimen[specimen_count].drawn_dt_tm = o.current_start_dt_tm             
            endif
        endif
    endif
 
detail
    row + 0
 
foot aor.order_id
    row + 0
 
foot e.encntr_id
    row + 0
 
foot report
    if (facility_count > 0)
        stat = alterlist(FacilityInfo->Facilities, facility_count)
    endif
 
    if (temp_order_count > 0)
        stat = alterlist(temp->Orders, temp_order_count)
    endif
    
    if (specimen_count > 0)
    	stat = alterlist(data->Specimen, specimen_count)
    endif
 
with nocounter
 
/*****************************************************************************/
/* NOTE: From this point on we are only dealing with flexible specimen. Any  */
/*       orders/specimens that use the old style preferences have already    */
/*       added to the reply.                                                 */
/*                                                                           */
/* o Obtain container id's for orders that have result/perform_result rows.  */
/*****************************************************************************/
select into "nl:"
    r.*,
    pr.*
 
from
    (dummyt d1 with seq = value(size(temp->Orders, 5))),
    result             r,
    perform_result     pr
 
plan d1
join r  where r.order_id = temp->Orders[d1.seq].order_id
join pr where pr.result_id = r.result_id
          and pr.container_id + 0 > 0.0
 
order by
    d1.seq,
    pr.container_id
 
head d1.seq
    temp_container_count = 0
 
head pr.container_id
    temp_container_count = temp_container_count + 1
 
    if (temp_container_count > size(temp->Orders[d1.seq].Containers,5))
        stat = alterlist(temp->Orders[d1.seq].Containers, temp_container_count + 9)
    endif
 
    temp->Orders[d1.seq].Containers[temp_container_count].container_id = pr.container_id
 
detail
    row + 0
 
foot pr.container_id
    row + 0
 
foot d1.seq
    stat = alterlist(temp->Orders[d1.seq].Containers, temp_container_count)
 
with nocounter
 
/* implement for efficiency - problem with containers being written to wrong orders because of temp_container_count
select into "nl:"
    r.*,
    pr.*
from
    result             r,
    perform_result     pr
 
plan r where expand(h_idx, 1, size(temp->Orders,5),r.order_id,temp->Orders[h_idx].order_id)
join pr where pr.result_id = r.result_id
	and pr.container_id + 0 > 0.0
order by
	pr.container_id
head report
	temp_container_count = 0
	pos = 0
head pr.container_id
	temp_container_count = temp_container_count + 1
 
	pos = locateval(h_idx,1,size(temp->Orders[h_idx]),r.order_id,temp->Orders[h_idx].order_id)
 
	if (temp_container_count > size(temp->Orders[pos].Containers,5))
        stat = alterlist(temp->Orders[pos].Containers, temp_container_count + 9)
    endif
 
    temp->Orders[pos].Containers[temp_container_count].container_id = pr.container_id
detail
    row + 0
foot pr.container_id
    stat = alterlist(temp->Orders[pos].Containers, temp_container_count)
foot report
	row + 0
 
with expand = 1
*/
; Check for any CCL errors
 
/*****************************************************************************/
/* o Obtain container id's for orders that do not have result/perform_result */
/* rows.                                                                     */
/*****************************************************************************/
select into "nl:"
    osrc.*
 
from
    (dummyt d1 with seq = value(size(temp->Orders, 5))),
    order_serv_res_container osrc
 
plan d1
join osrc where osrc.order_id = temp->Orders[d1.seq].order_id
 
order by
    d1.seq,
    osrc.container_id
 
head d1.seq
    temp_container_count = 0
 
head osrc.container_id
    if ((size(temp->Orders[d1.seq].Containers, 5) = 0)
    or (temp_container_count > 0))
        temp_container_count = temp_container_count + 1
 
        if (temp_container_count > size(temp->Orders[d1.seq].Containers,5))
            stat = alterlist(temp->Orders[d1.seq].Containers, temp_container_count + 9)
        endif

        temp->Orders[d1.seq].Containers[temp_container_count].container_id = osrc.container_id
 
    endif
 
detail
    row + 0
 
foot osrc.container_id
    row + 0
 
foot d1.seq
    if (temp_container_count > 0)
        stat = alterlist(temp->Orders[d1.seq].Containers, temp_container_count)
    endif
 
with nocounter
 
 
/*
select into "nl:"
    osrc.*
 
from
	order_serv_res_container osrc
where expand(l_idx, 1, size(temp->Orders,5), osrc.order_id, temp->Orders[l_idx].order_id)
 
order by
	osrc.container_id
head report
	temp_container_count = 0
	pos = 0
head osrc.container_id
 
	pos = locateval(l_idx, 1, size(temp->Orders), osrc.order_id, temp->Orders.order_id)
 
	if (size(temp->Orders[pos].Containers,5) = 0)
		temp_container_count = temp_container_count + 1
	else
		temp_container_count = 1
	endif
 
	if (temp_container_count > size(temp->Orders[pos].Containers,5))
    	stat = alterlist(temp->Orders[pos].Containers, temp_container_count + 9)
    endif
   ; if ((size(temp->Orders[l_ldx].Containers, 5) = 0) or (temp_container_count > 0))
 
        temp->Orders[pos].Containers[temp_container_count].container_id = osrc.container_id
   ; endif
detail
	row + 0
foot osrc.container_id
	if (temp_container_count > 0)
        stat = alterlist(temp->Orders[pos].Containers, temp_container_count)
    endif
foot report
    row + 0
with expand=1
 */
; Check for any CCL errors
 
/*****************************************************************************/
/* o Check specimen expire overrides                                         */
/*****************************************************************************/
select into "nl:"
	c.*
from
    (dummyt d1 with seq = value(size(temp->Orders, 5))),
    (dummyt d2 with seq = 1),
    container           c,
    bb_spec_expire_ovrd bseo
 
plan d1 where maxrec(d2, size(temp->Orders[d1.seq].Containers, 5))
join d2
join c where c.container_id = temp->Orders[d1.seq].Containers[d2.seq].container_id
 
join bseo where bseo.specimen_id = outerjoin(c.specimen_id)
            and bseo.active_ind  = outerjoin(1)
 
order by
    d1.seq,
    d2.seq,
    c.container_id
 
detail
 
	if (c.container_id = 0)
        temp->Orders[d1.seq].Containers[temp_container_count].specimen_id = 1337 ;dummy # so all scheduled orders on same specimen
    else
    	temp->Orders[d1.seq].Containers[d2.seq].specimen_id = c.specimen_id
    endif
 
    temp->Orders[d1.seq].Containers[d2.seq].drawn_dt_tm = c.drawn_dt_tm
 
    if (bseo.specimen_id > 0.0)
	    temp->Orders[d1.seq].Containers[d2.seq].new_spec_expire_dt_tm = bseo.new_spec_expire_dt_tm
	    temp->Orders[d1.seq].Containers[d2.seq].override_id           = bseo.bb_spec_expire_ovrd_id
	    temp->Orders[d1.seq].Containers[d2.seq].override_cd           = bseo.override_reason_cd
    endif
 
with nocounter
 
/*****************************************************************************/
/* Populate the reply with specimens that are not expired.                   */
/*****************************************************************************/
set flex_param_out->testing_facility_cd = -1
 
set specimen_count = size(data->Specimen, 5)
 
for (i_idx = 1 to size(temp->Orders, 5))
 	set spec_in_facility = 0
 	; load flexible specimen params based on transfusion service facility
 	set trans_facility_cd = BbtGetFlexSpecTestingFacility(temp->Orders[i_idx].encntr_fac_cd)
 	set FacilityIdxHold = locateval(x_idx, 1, size(FacilityInfo->Facilities, 5), trans_facility_cd,
  									FacilityInfo->Facilities[x_idx].testing_facility_cd)
 
  	; get the flexible specimen params set at FacilityInfo structure for a particular transfusion service facility
  	if (FacilityIdxHold > 0)
		call GetFlexSpecimenParams(FacilityIdxHold, temp->Orders[i_idx].encntr_fac_cd, 0, appKeyValue)
  		; if flex params are retrieved successfully, then update flex_param_out record and peform flex calculations
  		if (FacilityInfo->Facilities[FacilityIdxHold].load_flex_params = -1)
  			call ErrorHandler("F", "GetFlexSpecimenParams Failed",
					                      "GetFlexSpecimenParams returned a failure.")
  		endif
  	endif
 
 	for(j_idx = 1 to size(temp->Orders[i_idx].Containers, 5))
        ; Determine if override exists.
        if (temp->Orders[i_idx].Containers[j_idx].override_id > 0.0)
            ; Active override exists, determine if specimen is expired.
            set override_meaning = trim(UAR_GET_CODE_MEANING(temp->Orders[i_idx].Containers[j_idx].override_cd))
			set expDtTm = temp->Orders[i_idx].Containers[j_idx].new_spec_expire_dt_tm
            if (override_meaning in (SYS_ANTI_OVRD_CDF_MEANING, NEONATE_OVRD_CDF_MEANING ))
            ;Specimen has SYS_COMBINE, SYS_ANTI, or NEONATE override, cannot extend specimen expiration.
                set flex_max_out->max_expire_dt_tm = expDtTm
                if (override_meaning = SYS_ANTI_OVRD_CDF_MEANING)
                	set flex_max_out->max_expire_flag = nANTI_FLAG
                elseif (override_meaning = NEONATE_OVRD_CDF_MEANING)
                	set	flex_max_out->max_expire_flag = nNEONATE_FLAG
				endif
            else
                set stat = GetFlexMaxExpirationForPerson(temp->person_id,
                                                    0.0,
                                                    temp->Orders[i_idx].Containers[j_idx].drawn_dt_tm,
                                                    temp->Orders[i_idx].encntr_fac_cd)
                if(stat = -1)
					call ErrorHandler("F", "GetFlexMaxExpirationForPerson Failed",
					                  "GetFlexMaxExpirationForPerson returned a failure.")
				endif
            endif
        else
        	if (temp->Orders[i_idx].not_inlab_flag = 0)
            	;Override does not exist, calculate specimen expire date to determine if expired.
            	set expDtTm = NULL
 
            	;double check what the flex calculates at - looks like it will be drawdttm + some param so 0 + something
            	;might just only do this if ind = 0
            	set expDtTm = GetFlexExpirationForPerson(temp->person_id,
                                                0.0,
                                                temp->Orders[i_idx].Containers[j_idx].drawn_dt_tm,
                                                temp->Orders[i_idx].encntr_fac_cd, 0)
				if(expDtTm = -1)
					call ErrorHandler("F","GetFlexExpirationForPerson Failed",
				                  "GetFlexExpirationForPerson returned a failure.")
				endif
 
 				set stat = GetFlexMaxExpirationForPerson(temp->person_id,
                                                   0.0,
                                                   temp->Orders[i_idx].Containers[j_idx].drawn_dt_tm,
                                                   temp->Orders[i_idx].encntr_fac_cd)
            	if(stat = -1)
					call ErrorHandler("F", "GetFlexMaxExpirationForPerson Failed",
				                  "GetFlexMaxExpirationForPerson returned a failure.")
				endif
 			endif
        endif
 
 		if (temp->Orders[i_idx].not_inlab_flag = 0)
        	set flexTestingFacCdHold = flex_param_out->testing_facility_cd
        	set flexMaxHold = flex_param_out->max_spec_validity
        	set flexDaysHrsMeanHold = flex_param_out->expiration_unit_type_mean
 
        	; check whether birth date is not null and patient is neonate or not,
        	if (temp->birth_dt_tm != null and
               	datetimediff(cnvtdatetime(CURRENT_DT_TM_HOLD), temp->birth_dt_tm) <= flex_param_out->neonate_age)
            	; if neonate does not have any transfusions or antibody id or neonate overrides
            	; calculate max expiration date time using neonate prefernece value
            	if (flex_max_out->max_expire_flag = nMAX_PARAM_FLAG)
             		set maxExpDtTm = datetimeadd (cnvtdatetime(cnvtdate(temp->birth_dt_tm), 235959), flex_param_out->neonate_age)
            	else
             		set maxExpDtTm = flex_max_out->max_expire_dt_tm
            	endif
        	else
            	set maxExpDtTm = flex_max_out->max_expire_dt_tm
        	endif
        endif
 
		; Determine if specimen is active OR specimen is expired, but valid to extend to maximum expiration.
        if (expDtTm > cnvtdatetime(CURRENT_DT_TM_HOLD) or
            (FacilityInfo->Facilities[FacilityIdxHold].extend_expired_specimen = 1 and
            cnvtdatetime(CURRENT_DT_TM_HOLD) < maxExpDtTm) or (temp->Orders[i_idx].not_inlab_flag = 1))
 
            ; Determine if specimen already exists in the reply.
            set SpecIndexHold = locateval(x_idx, 1,
                                            size(data->Specimen, 5),
                                            temp->Orders[i_idx].Containers[j_idx].specimen_id,
                                            data->Specimen[x_idx].specimen_id)
 
            if (SpecIndexHold <= 0)
                ; Specimen has never been added to the reply, add specimen.
                set specimen_count = specimen_count + 1
 
                if (specimen_count > size(data->Specimen,5))
                    set stat = alterlist(data->Specimen, specimen_count + 9)
                endif
 
                set data->Specimen[specimen_count].flex_on_ind = 1
                set data->Specimen[specimen_count].flex_days_hrs_mean = flexDaysHrsMeanHold
                set data->Specimen[specimen_count].flex_max = flexMaxHold
                set data->Specimen[specimen_count].encntr_id = temp->Orders[i_idx].encntr_id
                set data->Specimen[specimen_count].unformatted_accession = temp->Orders[i_idx].accession
                set data->Specimen[specimen_count].accession = uar_fmt_accession(temp->Orders[i_idx].accession,
                                            size(temp->Orders[i_idx].accession,1))
                set data->Specimen[specimen_count].drawn_dt_tm = temp->Orders[i_idx].Containers[j_idx].drawn_dt_tm
                set data->Specimen[specimen_count].expire_dt_tm = expDtTm
                set data->Specimen[specimen_count].max_expire_dt_tm = flex_max_out->max_expire_dt_tm
                set data->Specimen[specimen_count].max_expire_flag = flex_max_out->max_expire_flag
                set data->Specimen[specimen_count].override_id = temp->Orders[i_idx].Containers[j_idx].override_id
                set data->Specimen[specimen_count].override_cd = temp->Orders[i_idx].Containers[j_idx].override_cd
                ; Note: override_disp and override_mean are populated manually so that values will be available
                ;       for backend scripts calling this script.
                set data->Specimen[specimen_count].override_disp = uar_get_code_display(temp->Orders[i_idx].Containers[j_idx].
                override_cd)
                set data->Specimen[specimen_count].override_mean = uar_get_code_meaning(temp->Orders[i_idx].Containers[j_idx].
                override_cd)
                set data->Specimen[specimen_count].specimen_id = temp->Orders[i_idx].Containers[j_idx].specimen_id
                set data->Specimen[specimen_count].encntr_facility_cd = temp->Orders[i_idx].encntr_fac_cd
                set data->Specimen[specimen_count].testing_facility_cd = flexTestingFacCdHold
 
                ; if specimen is expired, but valid to extend, set expired flag as 1
 				if (validate(data->Specimen[specimen_count].is_expired_flag) and expDtTm < cnvtdatetime(CURRENT_DT_TM_HOLD))
 					set data->Specimen[specimen_count].is_expired_flag = 1
 				endif
 
                set SpecIndexHold = specimen_count
 			endif
 
                set orders_count = size(data->Specimen[SpecIndexHold].Orders, 5)
                ; Determine if order has already been added to this specimen item in the reply.
                set OrdIndexHold = locateval(x_idx, 1, orders_count,
                                             temp->Orders[i_idx].order_id,
                                             data->Specimen[SpecIndexHold].Orders[x_idx].order_id)
 
                if (OrdIndexHold <= 0)
                    ; Order has never been added to this specimen item in the reply, add order.
                    set orders_count = orders_count + 1
 
                    set stat = alterlist(data->Specimen[SpecIndexHold].Orders, orders_count)
 
                    set data->Specimen[SpecIndexHold].orders[orders_count].order_id = temp->Orders[i_idx].order_id
                    set data->Specimen[SpecIndexHold].orders[orders_count].order_mnemonic = temp->Orders[i_idx].order_mnemonic
                    set data->Specimen[SpecIndexHold].orders[orders_count].status = temp->Orders[i_idx].status
                    set data->Specimen[SpecIndexHold].Orders[orders_count].order_status_cd = temp->Orders[i_idx].order_status_cd
                    set data->Specimen[SpecIndexHold].Orders[orders_count].catalog_cd = temp->Orders[i_idx].catalog_cd
                    set data->Specimen[SpecIndexHold].Orders[orders_count].catalog_disp = uar_get_code_display(temp->Orders[i_idx
                    ].catalog_cd)
 
                    if (temp->Orders[i_idx].not_inlab_flag = 1)
                    	set data->Specimen[SpecIndexHold].not_inlab_flag = temp->Orders[i_idx].not_inlab_flag
                    endif
 
                    set OrdIndexHold = orders_count
                endif
        endif
    endfor
endfor
 
set stat = alterlist(data->Specimen, specimen_count)
 
/*****************************************************************************/
/* determine new_sample_dt_tm for each person                                */
/*****************************************************************************/
set maxExpDtTmHold = 0.0
 
set specimen_count = size(data->Specimen, 5)
for (i_idx = 1 to specimen_count)
    ; Determine if current specimen expire date/time is greater than the expire date/time being held.
    if (data->Specimen[i_idx].expire_dt_tm > maxExpDtTmHold)
        ; Current expire date/time is greater, set max expire date/time to current expire date/time.
        set maxExpDtTmHold = data->Specimen[i_idx].expire_dt_tm
    endif
endfor
 
if (maxExpDtTmHold > 0.0)
    ; set new_sample_dt_tm in reply equal to maximum expire date/time plus one second.
    set data->new_sample_dt_tm = cnvtlookahead("1,S",maxExpDtTmHold)
else
    ; set new sample_dt_tm to current date/time since no maxExpDtTmHold to go by.
    set data->new_sample_dt_tm = CURRENT_DT_TM_HOLD
endif
 
/*****************************************************************************/
/* Determine specimen validity from OPT_PARAMS                               */
/*****************************************************************************/
if (FacilityInfo->Facilities[FacilityIdxHold].flex_on_ind = 1)
for (y_idx = 1 to size(data->Specimen,5)) ;for each specimen
	if (size(data->Specimen[y_idx].Orders,5) >= opt_valid_tot) ;determine if required number of orders exist
		if (y_idx = 1 and data->Specimen[y_idx].not_inlab_flag = 0)
			set temp_drawdt = data->Specimen[y_idx].drawn_dt_tm ;set starting point and hold position for first specimen
			set DrawDtIndexHold = y_idx
		endif
 
		if (data->Specimen[y_idx].drawn_dt_tm < temp_drawdt and data->Specimen[y_idx].not_inlab_flag = 0)
			set temp_drawdt = data->Specimen[y_idx].drawn_dt_tm ;if shorter draw date store specimen
			set DrawDtIndexHold = y_idx
		endif
 
		set data->Specimen[y_idx].is_valid_flag = 1
 
		if (ValidSpecHold = 0)
			set ValidSpecHold = 1
		endif
	else
		if ((size(data->Specimen,5) = 1))
			set ReturnMsg = build(" No valid specimens found in any status. ")
			call RecordHandler(5, ReturnMsg)
		endif
	endif
endfor
else
	if (size(data->Specimen,5) > opt_valid_tot)
	;this logic isn't quite right. Needs to determine whether orders differ.
		for (y_idx = 1 to size(data->Specimen,5))
			if (y_idx = 1 and data->Specimen[y_idx].not_inlab_flag = 0)
				set temp_drawdt = data->Specimen[y_idx].drawn_dt_tm
				set DrawDtIndexHold = y_idx
			endif
		
			if (data->Specimen[y_idx].drawn_dt_tm < temp_drawdt and data->Specimen[y_idx].not_inlab_flag = 0)
				set temp_drawdt = data->Specimen[y_idx].drawn_dt_tm ;if shorter draw date store specimen
				set DrawDtIndexHold = y_idx
			endif
			
			set data->Specimen[y_idx].is_valid_flag = 1
 
			if (ValidSpecHold = 0)
				set ValidSpecHold = 1
			endif
		endfor
	else
		set ReturnMsg = build(" No valid specimens found in any status. ")
		call RecordHandler(5, ReturnMsg)
	endif
endif
 
set log_accessionid = data->Specimen[DrawDtIndexHold].unformatted_accession
set log_orderid = data->Specimen[DrawDtIndexHold].Orders[1].order_id
set log_encntrid = data->Specimen[DrawDtIndexHold].encntr_id
set log_personid = data->person_id
 
if (ValidSpecHold = 1 and collec_list_param = 0)
	set ReturnMsg = build2(" Valid specimen found in a Collected/In-Lab/Pending/Complete status where specimen id = ", data->
	Specimen[DrawDtIndexHold].specimen_id, " with expire date/time of ",
	format(data->Specimen[DrawDtIndexHold].expire_dt_tm, "MM/DD/YY;;D"))
	call ReturnHandler(1, ReturnMsg)
elseif (ValidSpecHold = 1 and collec_list_param = 1)
	set ReturnMsg = build(" Valid specimen found in a Scheduled/Dispatched status. ")
	call ReturnHandler(2, ReturnMsg)
elseif (ValidSpecHold = 0)
	set ReturnMsg = build(" No valid specimens found in any status. ")
	call RecordHandler(4, ReturnMsg)
endif
 
 call echo(drawdtindexhold)
 
go to SET_STATUS
 
/*****************************************************************************/
/* ErrorHandler subroutine                                                   */
/*****************************************************************************/
declare ErrorHandler(OperationStatus = c1,
                     TargetObjectName = c25,
                     TargetObjectValue = vc) = NULL
 
subroutine ErrorHandler(OperationStatus,
                        TargetObjectName,
                        TargetObjectValue)
   declare error_cnt = i2 with private, noconstant(0)
 
   set error_cnt = size(data->status_data.subeventstatus, 5)
   if (error_cnt > 1
   or (error_cnt = 1 and data->status_data.subeventstatus[error_cnt].OperationStatus != ""))
      set error_cnt = error_cnt + 1
      set stat = alter(data->status_data.subeventstatus, error_cnt)
   endif
 
   set data->status_data.status = "F"
   set data->status_data.subeventstatus[error_cnt].ScriptName = SCRIPT_NAME
   set data->status_data.subeventstatus[error_cnt].OperationStatus = OperationStatus
   set data->status_data.subeventstatus[error_cnt].TargetObjectName = TargetObjectName
   set data->status_data.subeventstatus[error_cnt].TargetObjectValue = TargetObjectValue
 
 
end
 
/*****************************************************************************/
/* Status set and exit script                                                */
/*****************************************************************************/
#SET_STATUS
 
set data->status_data.status = "S"
 
#EXIT_SCRIPT
/*****************************************************************************/
/* ReturnStatus subroutine                                                   */
/*****************************************************************************/
declare ReturnHandler(ReturnType = i2, ReturnMsg = vc) = NULL
 
subroutine ReturnHandler(ReturnType, ReturnMsg)
 
	if (ReturnType = 1) ;valid already collected specimen
		set retval = 100
		set log_message = ReturnMsg
	elseif (ReturnType = 2) ;valid scheduled/dispatched specimen
		set retval = 100
		set log_message = ReturnMsg
	elseif (ReturnType = 3) ;invalid OPT_PARAM entered
		set retval = -1
		set log_message = ReturnMsg
	elseif (ReturnType = 4)
		set retval = 0
		set log_message = ReturnMsg
 	endif
 
end
 
;call echorecord(temp)
;call echorecord(data)
 
free set temp
 
end
go
; bbt_get_spec_expire_mod go