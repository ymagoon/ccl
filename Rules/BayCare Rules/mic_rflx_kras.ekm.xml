<?xml version="1.0" encoding="ASCII"?>
<EM:ExpertModule xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:EM="http:///com.cerner.expert/expertmodule/1.0.0" moduleName="MIC_RFLX_KRAS">
  <information>
    <runtimeInformation versionString="001.005" externalFileName="MIC_RFLX_KRAS" lastUpdated="2014-07-29T09:34:29.000-0400" validtionType="PRODUCTION" title="MIC_RFLX_ALK" reconcileFlag="2" reconcileDate="2019-10-29T20:54:48.000-0400">
      <duration start="2012-06-14T00:00:00.000-0400" end="2100-06-14T19:59:59.000-0400"/>
      <updateUser userName="Raymond , Anne"/>
    </runtimeInformation>
    <documentation author="" institution="" specialist="" purpose="Add ALK to EGFR if EGFR is negative"/>
  </information>
  <expertTemplates>
    <events>
      <event name=""/>
      <event name="ADDPROBLEM"/>
      <event name="ADDTOSCRATCHPAD"/>
      <event name="ALLERGY_EVENT"/>
      <event name="AP_ORDER_EVENT"/>
      <event name="BB_RESULT_EVENT"/>
      <event name="CHART_SERVER_EVENT"/>
      <event name="CLINICALTRIALSCREEN"/>
      <event name="CLINICAL_EVENT"/>
      <event name="CLOSECHART"/>
      <event name="COLLECTION_EVENT"/>
      <event name="DCP_CN_TASK_UPD"/>
      <event name="DCP_MODTASK_EVENT"/>
      <event name="DCP_PW_COND"/>
      <event name="DCP_PW_OUTCOME_EVENT"/>
      <event name="DIAGNOSIS_EVENT"/>
      <event name="EKS_FORMAT"/>
      <event name="EKS_SYNC_TEST01"/>
      <event name="EKS_TEST_02"/>
      <event name="EKS_TEST_EVENT"/>
      <event name="EKS_TEST_EVENT01"/>
      <event name="ENSURE_EVENT"/>
      <event name="EXPERT_EVENT"/>
      <event name="HEALTHE_EVENT"/>
      <event name="HEALTH_MAINT_QUAL_EVENT"/>
      <event name="HIM_ADD_REQUEST"/>
      <event name="HIM_ADMIT_EVENT"/>
      <event name="HIM_PATIENT_INFO_REQUEST"/>
      <event name="HIM_TEST_EVENT"/>
      <event name="HL7_EVENT"/>
      <event name="MB_EXPEDITE"/>
      <event name="MB_RESULT_EVENT"/>
      <event name="MB_SCRIPTED_WORKUPS"/>
      <event name="MB_SUSCEPTIBILITY"/>
      <event name="MDI_RESULT_EVENT"/>
      <event name="MEDCHARTACTIVATE"/>
      <event name="MPI_ADT"/>
      <event name="OPENCHART"/>
      <event name="ORDER_EVENT"/>
      <event name="ORDER_PRO_TEST1"/>
      <event name="PATIENT_EVENT"/>
      <event name="PCA_EXPERT_EVENT"/>
      <event name="Person_Transaction"/>
      <event name="PFT_Add_Account"/>
      <event name="PFT_ADJ_WO"/>
      <event name="pft_check_amount"/>
      <event name="PFT_VEHICLE"/>
      <event name="PNTFLEXREFRANGE"/>
      <event name="POWERPLANFLEX"/>
      <event name="PREGNANCY_EVENT"/>
      <event name="PROBLEM_EVENT"/>
      <event name="PROFIT_1450_CLAIM_EVENT"/>
      <event name="PROFIT_1500_CLAIM_EVENT"/>
      <event name="PROVIDER_CHG_EVENT"/>
      <event name="PROVIDE_EVENT"/>
      <event name="PWRCHRT_ADD_ORDER"/>
      <event name="RESULT_EVENT"/>
      <event name="RESULT_EVENT_CSM"/>
      <event name="RESULT_EVENT_TEST"/>
      <event name="SCH_ACTION_EVENT"/>
      <event name="SIGNORDER"/>
      <event name="SN New Pref Card Created"/>
      <event name="SN_CASE_CHECK_IN_EVENT"/>
      <event name="SN_CASE_EVENT"/>
      <event name="SN_CASE_SCHEDULE_EVENT"/>
      <event name="SN_DOCUMENT_OPEN"/>
      <event name="SN_DOCUMENT_STATE"/>
      <event name="SN_FINALIZE_DOC_EVENT"/>
      <event name="SN_PROCEDURE_SCHEDULE"/>
      <event name="SN_SAVE_PROCEDURE"/>
      <event name="SN_TEST_EVENT"/>
      <event name="SOCIAL_HISTORY_ADD"/>
      <event name="SYNCHEVENT"/>
      <event name="TOCFLEX"/>
      <event name="TOUCHOPENCHART"/>
    </events>
    <evokeTemplates>
      <templateDefinitions xsi:type="EM:ExpertTemplate" name="MB_REPORT_RESULT" definition="the microbiology REPORT_TYPE report for ORDERABLE_PROCEDURE QUALIFIER STATUS RESULT result" description="the microbiology report for a specific report type is for an orderable procedure with or without a performed/verified result which could be an organism, coded result or group response" eventDependency="//@expertTemplates/@events/@event.31">
        <keywords></keywords>
        <arguments xsi:type="EM:ReferentialArgument" name="REPORT_TYPE" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="REPORT_TYPE" statement="select&#xD;&#xA;       Report_Type = build(floor(m.task_assay_cd),&quot;-&quot;,trim(m.full_name))&#xD;&#xA;from code_value c, mic_task m &#xD;&#xA;plan c  join m where c.code_value = m.task_assay_cd   &#xD;&#xA;      and c.code_set = 1000&#xD;&#xA;order m.full_name&#xD;&#xA;"/>
        </arguments>
        <arguments xsi:type="EM:ReferentialArgument" name="ORDERABLE_PROCEDURE" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="ORDERABLE_PROCEDURE" statement="EKS_SELECT_PREFIX GO"/>
          <statements dependency="ORDERABLE_PROCEDURE" statement="select &#xD;&#xA;   if (par1 != &quot;OTHER&quot;)&#xD;&#xA;      FROM &#xD;&#xA;         order_catalog orc,&#xD;&#xA;         order_catalog_synonym s,&#xD;&#xA;         code_value c&#xD;&#xA;      PLAN C&#xD;&#xA;         where c.code_set = 106 and&#xD;&#xA;         c.cdf_meaning = &quot;MICROBIOLOGY&quot;&#xD;&#xA;      JOIN orc&#xD;&#xA;         where orc.activity_type_cd = c.code_value&#xD;&#xA;         and orc.active_ind = 1&#xD;&#xA;      JOIN s&#xD;&#xA;         where s.catalog_cd = orc.catalog_cd &#xD;&#xA;         and cnvtupper(s.mnemonic) = patstring(concat(PAR1,&quot;*&quot;)) &#xD;&#xA;         and s.active_ind = 1&#xD;&#xA;    else&#xD;&#xA;       FROM &#xD;&#xA;         order_catalog orc,&#xD;&#xA;         order_catalog_synonym s,&#xD;&#xA;         code_value c&#xD;&#xA;      PLAN C&#xD;&#xA;         where c.code_set = 106 and&#xD;&#xA;         c.cdf_meaning = &quot;MICROBIOLOGY&quot;&#xD;&#xA;     JOIN orc&#xD;&#xA;        where orc.activity_type_cd = c.code_value&#xD;&#xA;        and orc.active_ind = 1&#xD;&#xA;     JOIN s&#xD;&#xA;        where s.catalog_cd = orc.catalog_cd &#xD;&#xA;        and cnvtupper(s.mnemonic) NOT between&#xD;&#xA;           &quot;0*&quot; AND &quot;ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ*&quot;&#xD;&#xA;        and s.active_ind = 1&#xD;&#xA;   endif&#xD;&#xA;s.mnemonic,&#xD;&#xA;orc.catalog_cd&#xD;&#xA;&#xD;&#xA;order s.mnemonic&#xD;&#xA;"/>
        </arguments>
        <arguments xsi:type="EM:FixedListArgument" name="QUALIFIER" dataType="CHARACTER" required="true">
          <defaultValue xsi:type="EM:StringValue" value="WITH"/>
          <stringTable>
            <column value="WITH"/>
            <column value="WITH"/>
          </stringTable>
          <stringTable>
            <column value="WITHOUT"/>
            <column value="WITHOUT"/>
          </stringTable>
        </arguments>
        <arguments xsi:type="EM:ReferentialArgument" name="STATUS" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="STATUS" statement="EKS_UAR_CODELUP_REFHELP 1901 GO&#xD;&#xA;;SELECT   &#xD;&#xA;;  C1.DISPLAY_KEY&#xD;&#xA;; ,C1.DESCRIPTION&#xD;&#xA;; ,C1.CODE_VALUE&#xD;&#xA;;FROM CODE_VALUE C1&#xD;&#xA;;WHERE C1.CODE_SET = 1901 AND C1.ACTIVE_IND=1&#xD;&#xA;;ORDER C1.DISPLAY_KEY"/>
        </arguments>
        <arguments xsi:type="EM:ReferentialArgument" name="RESULT" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="RESULT" statement="SELECT DISPLAY_KEY_CODE_SET = IF (d.seq = 1) &#xD;&#xA;                         &quot;ORGANISMS                1021&quot;&#xD;&#xA;                      ELSEIF (d.seq = 2)&#xD;&#xA;                         &quot;REPORT RESPONSES         1022&quot;&#xD;&#xA;                      ELSEIF (d.seq = 3)&#xD;&#xA;                         &quot;GROUP REPORT RESPONSES   1019&quot;&#xD;&#xA;                      ELSE&#xD;&#xA;                         &quot;ABNORMAL/POSITIVE        9999&quot;&#xD;&#xA;                      ENDIF&#xD;&#xA;FROM (dummyt d with seq = value(4))&#xD;&#xA;"/>
          <statements dependency="RESULT" statement="SELECT&#xD;&#xA;    IF  (cnvtint(SUBSTRING(26,4,PAR1)) in (1022))&#xD;&#xA;          RESULT_AND_CODE_SET =&#xD;&#xA;             BUILD(C.DISPLAY,&quot;-&quot;,FLOOR(CODE_SET)), &#xD;&#xA;          C.DISPLAY_KEY, &#xD;&#xA;          C.CODE_VALUE&#xD;&#xA;      FROM CODE_VALUE C&#xD;&#xA;      WHERE C.CODE_SET = CNVTINT(SUBSTRING(26,4,PAR1))&#xD;&#xA;      ORDER C.DISPLAY_KEY&#xD;&#xA;   ELSEIF (cnvtint(SUBSTRING(26,4,PAR1)) in (9999))&#xD;&#xA;      RESULT_INDICATOR = &#xD;&#xA;         IF (d.seq = 1) &quot;ABNORMAL-9999&quot;&#xD;&#xA;         ELSE &quot;POSITIVE-9999&quot;&#xD;&#xA;         ENDIF&#xD;&#xA;      FROM (DUMMYT D WITH SEQ = VALUE(2))&#xD;&#xA;   ELSEIF (cnvtint(SUBSTRING(26,4,PAR1)) in (1021))&#xD;&#xA;       ORGANISM = &quot;ANY ORGANISM-1021&quot;&#xD;&#xA;       FROM (DUMMYT)&#xD;&#xA;    ELSEIF  (cnvtint(SUBSTRING(26,4,PAR1)) in (1019))&#xD;&#xA;          GROUP_RESPONSE_AND_CODE_SET =             &#xD;&#xA;  BUILD(MGR.GROUP_DISPLAY,&quot;-&quot;,1019,&quot;-&quot;,cnvtstring(MGR.GROUP_RESPONSE_ID)),&#xD;&#xA;  MGR.GROUP_DISPLAY,&#xD;&#xA;  PROCEDURE = IF (MGR.CATALOG_CD = 0.0)&#xD;&#xA;                &quot;ALL&quot;&#xD;&#xA;              ELSE&#xD;&#xA;                UAR_GET_CODE_DISPLAY(MGR.CATALOG_CD)&#xD;&#xA;              ENDIF,&#xD;&#xA;  SERVICE_RESOURCE = IF (MGR.SERVICE_RESOURCE_CD = 0.0)&#xD;&#xA;                &quot;ALL&quot;&#xD;&#xA;              ELSE&#xD;&#xA;                UAR_GET_CODE_DISPLAY(MGR.SERVICE_RESOURCE_CD)&#xD;&#xA;              ENDIF,&#xD;&#xA;  SOURCE = IF (MGR.SOURCE_CD = 0.0)&#xD;&#xA;                &quot;ALL&quot;&#xD;&#xA;              ELSE&#xD;&#xA;                UAR_GET_CODE_DISPLAY(MGR.SOURCE_CD)&#xD;&#xA;              ENDIF&#xD;&#xA;FROM MIC_GROUP_RESPONSE MGR&#xD;&#xA;ENDIF&#xD;&#xA;"/>
        </arguments>
      </templateDefinitions>
    </evokeTemplates>
    <logicTemplates>
      <templateDefinitions xsi:type="EM:ExpertTemplate" name="MB_REPORT_RESULT_EVAL" definition="the microbiology REPORT_TYPE report for ORDERABLE_PROCEDURE with SOURCE source and QUALIFIER STATUS RESULT result reported up to NUMBER time(s)" description="The specific microbiology report for a specific culture with a specific source and with or without a performed/verified result reported up to a specific number of times or every time.  The result could be an organism, coded result or group response." eventDependency="//@expertTemplates/@events/@event.31">
        <keywords></keywords>
        <arguments xsi:type="EM:ReferentialArgument" name="REPORT_TYPE" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="REPORT_TYPE" statement="select&#xD;&#xA;       Report_Type = build(floor(m.task_assay_cd),&quot;-&quot;,trim(m.full_name))&#xD;&#xA;from code_value c, mic_task m &#xD;&#xA;plan c  join m where c.code_value = m.task_assay_cd   &#xD;&#xA;      and c.code_set = 1000&#xD;&#xA;order m.full_name&#xD;&#xA;"/>
        </arguments>
        <arguments xsi:type="EM:ReferentialArgument" name="ORDERABLE_PROCEDURE" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="ORDERABLE_PROCEDURE" statement="EKS_SELECT_PREFIX GO"/>
          <statements dependency="ORDERABLE_PROCEDURE" statement="select &#xD;&#xA;   if (par1 != &quot;OTHER&quot;)&#xD;&#xA;      FROM &#xD;&#xA;         order_catalog orc,&#xD;&#xA;         order_catalog_synonym s,&#xD;&#xA;         code_value c&#xD;&#xA;      PLAN C&#xD;&#xA;         where c.code_set = 106 and&#xD;&#xA;         c.cdf_meaning = &quot;MICROBIOLOGY&quot;&#xD;&#xA;      JOIN orc&#xD;&#xA;         where orc.activity_type_cd = c.code_value&#xD;&#xA;         and orc.active_ind = 1&#xD;&#xA;      JOIN s&#xD;&#xA;         where s.catalog_cd = orc.catalog_cd &#xD;&#xA;         and cnvtupper(s.mnemonic) = patstring(concat(PAR1,&quot;*&quot;)) &#xD;&#xA;         and s.active_ind = 1&#xD;&#xA;    else&#xD;&#xA;       FROM &#xD;&#xA;         order_catalog orc,&#xD;&#xA;         order_catalog_synonym s,&#xD;&#xA;         code_value c&#xD;&#xA;      PLAN C&#xD;&#xA;         where c.code_set = 106 and&#xD;&#xA;         c.cdf_meaning = &quot;MICROBIOLOGY&quot;&#xD;&#xA;     JOIN orc&#xD;&#xA;        where orc.activity_type_cd = c.code_value&#xD;&#xA;        and orc.active_ind = 1&#xD;&#xA;     JOIN s&#xD;&#xA;        where s.catalog_cd = orc.catalog_cd &#xD;&#xA;        and cnvtupper(s.mnemonic) NOT between&#xD;&#xA;           &quot;0*&quot; AND &quot;ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ*&quot;&#xD;&#xA;        and s.active_ind = 1&#xD;&#xA;   endif&#xD;&#xA;s.mnemonic,&#xD;&#xA;orc.catalog_cd&#xD;&#xA;&#xD;&#xA;order s.mnemonic&#xD;&#xA;"/>
        </arguments>
        <arguments xsi:type="EM:ReferentialArgument" name="SOURCE" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="SOURCE" statement="SELECT fld = IF (d.seq = 1) &#xD;&#xA;                         &quot;Category&quot;&#xD;&#xA;                      ELSEIF (d.seq = 2)&#xD;&#xA;                         &quot;Section&quot;&#xD;&#xA;                      ELSE&#xD;&#xA;                         &quot;Source&quot;&#xD;&#xA;                      ENDIF&#xD;&#xA;FROM (dummyt d with seq = value(3))&#xD;&#xA;"/>
          <statements dependency="SOURCE" statement="SELECT &#xD;&#xA;   IF (par1 = &quot;Category&quot;)&#xD;&#xA;      WHERE c.code_set = 1151  AND c.active_ind = 1&#xD;&#xA;   ELSEIF (par1 = &quot;Section&quot;)&#xD;&#xA;      WHERE c.code_set = 1150  AND c.active_ind = 1&#xD;&#xA;   ELSEIF (par1 = &quot;Source&quot;)&#xD;&#xA;WHERE c.code_set = 2052 AND c.active_ind = 1&#xD;&#xA;   ENDIF&#xD;&#xA;   c.display_key, c.display, c.description&#xD;&#xA;FROM code_value c&#xD;&#xA;ORDER c.display_key&#xD;&#xA;"/>
        </arguments>
        <arguments xsi:type="EM:FixedListArgument" name="QUALIFIER" dataType="CHARACTER" required="true">
          <defaultValue xsi:type="EM:StringValue" value="WITH"/>
          <stringTable>
            <column value="WITH"/>
            <column value="WITH"/>
          </stringTable>
          <stringTable>
            <column value="WITHOUT"/>
            <column value="WITHOUT"/>
          </stringTable>
        </arguments>
        <arguments xsi:type="EM:ReferentialArgument" name="STATUS" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="STATUS" statement="EKS_UAR_CODELUP_REFHELP 1901 GO"/>
        </arguments>
        <arguments xsi:type="EM:ReferentialArgument" name="RESULT" dataType="CHARACTER" controlType="REFERENTIAL" validationType="READ_ONLY" required="true">
          <statements dependency="RESULT" statement="SELECT DISPLAY_KEY_CODE_SET = IF (d.seq = 1) &#xD;&#xA;                         &quot;ORGANISMS                1021&quot;&#xD;&#xA;                      ELSEIF (d.seq = 2)&#xD;&#xA;                         &quot;REPORT RESPONSES         1022&quot;&#xD;&#xA;                      ELSEIF (d.seq = 3)&#xD;&#xA;                         &quot;GROUP REPORT RESPONSES   1019&quot;&#xD;&#xA;                      ELSE&#xD;&#xA;                         &quot;ABNORMAL/POSITIVE        9999&quot;&#xD;&#xA;                      ENDIF&#xD;&#xA;FROM (dummyt d with seq = value(4))&#xD;&#xA;"/>
          <statements dependency="RESULT" statement="&#xD;&#xA;SELECT&#xD;&#xA;   IF (cnvtint(SUBSTRING(26,4,PAR1)) in (1021,1022))&#xD;&#xA;          RESULT_AND_CODE_SET =&#xD;&#xA;             BUILD(C.DISPLAY,&quot;-&quot;,FLOOR(CODE_SET)), &#xD;&#xA;          C.DISPLAY_KEY, &#xD;&#xA;          C.CODE_VALUE&#xD;&#xA;      FROM CODE_VALUE C&#xD;&#xA;      WHERE C.CODE_SET = CNVTINT(SUBSTRING(26,4,PAR1))&#xD;&#xA;      ORDER C.DISPLAY_KEY&#xD;&#xA; ELSEIF (cnvtint(SUBSTRING(26,4,PAR1)) in (1019))&#xD;&#xA;       GROUP_RESPONSE_AND_CODE_SET =             &#xD;&#xA;  BUILD(MGR.GROUP_DISPLAY,&quot;-&quot;,1019,&quot;-&quot;,cnvtstring(MGR.GROUP_RESPONSE_ID)),&#xD;&#xA;  MGR.GROUP_DISPLAY,&#xD;&#xA;  PROCEDURE = IF (MGR.CATALOG_CD = 0.0)&#xD;&#xA;                &quot;ALL&quot;&#xD;&#xA;              ELSE&#xD;&#xA;                UAR_GET_CODE_DISPLAY(MGR.CATALOG_CD)&#xD;&#xA;              ENDIF,&#xD;&#xA;  SERVICE_RESOURCE = IF (MGR.SERVICE_RESOURCE_CD = 0.0)&#xD;&#xA;                &quot;ALL&quot;&#xD;&#xA;              ELSE&#xD;&#xA;                UAR_GET_CODE_DISPLAY(MGR.SERVICE_RESOURCE_CD)&#xD;&#xA;              ENDIF,&#xD;&#xA;  SOURCE = IF (MGR.SOURCE_CD = 0.0)&#xD;&#xA;                &quot;ALL&quot;&#xD;&#xA;              ELSE&#xD;&#xA;                UAR_GET_CODE_DISPLAY(MGR.SOURCE_CD)&#xD;&#xA;              ENDIF&#xD;&#xA;FROM MIC_GROUP_RESPONSE MGR&#xD;&#xA;   ELSE&#xD;&#xA;      RESULT_INDICATOR = &#xD;&#xA;         IF (d.seq = 1) &quot;ABNORMAL-9999&quot;&#xD;&#xA;         ELSE &quot;POSITIVE-9999&quot;&#xD;&#xA;         ENDIF&#xD;&#xA;      FROM (DUMMYT D WITH SEQ = VALUE(2))&#xD;&#xA;   ENDIF&#xD;&#xA;&#xD;&#xA;"/>
        </arguments>
        <arguments xsi:type="EM:FixedListArgument" name="NUMBER" dataType="CHARACTER" required="true">
          <stringTable>
            <column value="ONE"/>
            <column value="One"/>
          </stringTable>
          <stringTable>
            <column value="TWO"/>
            <column value="Two"/>
          </stringTable>
          <stringTable>
            <column value="THREE"/>
            <column value="Three"/>
          </stringTable>
          <stringTable>
            <column value="FOUR"/>
            <column value="Four"/>
          </stringTable>
          <stringTable>
            <column value="FIVE"/>
            <column value="Five"/>
          </stringTable>
          <stringTable>
            <column value="SIX"/>
            <column value="Six"/>
          </stringTable>
          <stringTable>
            <column value="SEVEN"/>
            <column value="Seven"/>
          </stringTable>
          <stringTable>
            <column value="EIGHT"/>
            <column value="Eight"/>
          </stringTable>
          <stringTable>
            <column value="NINE"/>
            <column value="Nine"/>
          </stringTable>
          <stringTable>
            <column value="TEN"/>
            <column value="Ten"/>
          </stringTable>
          <stringTable>
            <column value="EVERY"/>
            <column value="Every"/>
          </stringTable>
        </arguments>
      </templateDefinitions>
    </logicTemplates>
    <actionTemplates>
      <templateDefinitions xsi:type="EM:ExpertTemplate" name="EKS_ORDER_ADDON_LABEL" definition="add PROCEDURE1 to PROCEDURE2 with no change to the original order parameters,  associate CHART order comment COMMENT to the added procedure and print label OPTION." description="Add order to an existing accession with print label option" eventDependency="//@expertTemplates/@events/@event.3 //@expertTemplates/@events/@event.5 //@expertTemplates/@events/@event.10 //@expertTemplates/@events/@event.12 //@expertTemplates/@events/@event.15 //@expertTemplates/@events/@event.22 //@expertTemplates/@events/@event.31 //@expertTemplates/@events/@event.38 //@expertTemplates/@events/@event.41 //@expertTemplates/@events/@event.50 //@expertTemplates/@events/@event.56 //@expertTemplates/@events/@event.71" reconcilable="true">
        <keywords>ORDER</keywords>
        <arguments xsi:type="EM:ReferentialArgument" name="PROCEDURE1" dataType="CHARACTER" controlType="REFERENTIAL" validationType="REFERENTIAL" required="true" reconcileScript="eks_p_OrdProcedure">
          <statements dependency="PROCEDURE1" statement="select ocs.mnemonic,catalog_type=cv.display&#xD;&#xA;from order_catalog oc, order_catalog_synonym ocs, code_value cv&#xD;&#xA;plan oc where oc.orderable_type_flag not in (2,3,6,8,11) and oc.active_ind = 1&#xD;&#xA;and oc.catalog_type_cd > 0&#xD;&#xA;join cv where cv.code_value = oc.catalog_type_cd and&#xD;&#xA;cv.cdf_meaning != &quot;PHARMACY    &quot;&#xD;&#xA;join ocs where ocs.catalog_cd = oc.catalog_cd and&#xD;&#xA;ocs.mnemonic = oc.primary_mnemonic&#xD;&#xA;order cnvtupper(ocs.mnemonic)"/>
        </arguments>
        <arguments name="PROCEDURE2" dataType="LINK" controlType="TEMPLATE_REFERENCE" required="true" reconcileScript="N/A"/>
        <arguments xsi:type="EM:FixedListArgument" name="CHART" dataType="CHARACTER" validationType="READ_ONLY" required="true" reconcileScript="N/A">
          <stringTable>
            <column value="chartable"/>
            <column value="chartable"/>
          </stringTable>
          <stringTable>
            <column value="non chartable"/>
            <column value="non chartable"/>
          </stringTable>
          <stringTable>
            <column value="NONE"/>
            <column value="no comment"/>
          </stringTable>
        </arguments>
        <arguments name="COMMENT" dataType="CHARACTER" controlType="TEXT_MULTI_LINE" reconcileScript="N/A"/>
        <arguments xsi:type="EM:FixedListArgument" name="OPTION" dataType="CHARACTER" validationType="READ_ONLY" required="true" reconcileScript="N/A">
          <stringTable>
            <column value="YES"/>
            <column value="Yes, print a label"/>
          </stringTable>
          <stringTable>
            <column value="NO"/>
            <column value="No, do not print a label"/>
          </stringTable>
        </arguments>
      </templateDefinitions>
    </actionTemplates>
  </expertTemplates>
  <ruleDefinition>
    <evokeSection>
      <evokes evokeEvent="//@expertTemplates/@events/@event.31">
        <logicExpression xsi:type="EM:Antecedent" id="E1" template="MB_REPORT_RESULT">
          <facts argument="REPORT_TYPE">
            <value xsi:type="EM:StringValue" value="319351-Final Report"/>
          </facts>
          <facts argument="ORDERABLE_PROCEDURE">
            <value xsi:type="EM:StringValue" value="EGFR reflex to KRAS"/>
          </facts>
          <facts argument="QUALIFIER">
            <value xsi:type="EM:StringValue" value="WITH"/>
          </facts>
          <facts argument="STATUS">
            <value xsi:type="EM:StringValue" value="VERIFIED"/>
          </facts>
          <facts argument="RESULT">
            <value xsi:type="EM:StringValue" value="EGFRNEGK-1019-746325861"/>
          </facts>
        </logicExpression>
      </evokes>
    </evokeSection>
    <logicSection>
      <logicExpression xsi:type="EM:Antecedent" id="L1" template="MB_REPORT_RESULT_EVAL">
        <facts argument="REPORT_TYPE">
          <value xsi:type="EM:StringValue" value="319351-Final Report"/>
        </facts>
        <facts argument="ORDERABLE_PROCEDURE">
          <value xsi:type="EM:StringValue" value="EGFR reflex to KRAS"/>
        </facts>
        <facts argument="SOURCE">
          <value xsi:type="EM:StringValue" value="SYSTEMIC"/>
        </facts>
        <facts argument="QUALIFIER">
          <value xsi:type="EM:StringValue" value="WITH"/>
        </facts>
        <facts argument="STATUS">
          <value xsi:type="EM:StringValue" value="VERIFIED"/>
        </facts>
        <facts argument="RESULT">
          <value xsi:type="EM:StringValue" value="EGFRNEGK-1019-746325861"/>
        </facts>
        <facts argument="NUMBER">
          <value xsi:type="EM:StringValue" value="ONE"/>
        </facts>
      </logicExpression>
    </logicSection>
    <actionSection>
      <action xsi:type="EM:ActionExpression">
        <logicExpression xsi:type="EM:Antecedent" id="A1" template="EKS_ORDER_ADDON_LABEL">
          <facts argument="PROCEDURE1">
            <value xsi:type="EM:StringValue" reconciled="false" value="KRAS gene mutation"/>
          </facts>
          <facts argument="PROCEDURE2">
            <value xsi:type="EM:AntecedentReference" antecedent="//@ruleDefinition/@logicSection/@logicExpression"/>
          </facts>
          <facts argument="CHART">
            <value xsi:type="EM:StringValue" value="chartable"/>
          </facts>
          <facts argument="COMMENT">
            <value xsi:type="EM:StringValue" value="KRAS ordered by Discern Expert Rules System"/>
          </facts>
          <facts argument="OPTION">
            <value xsi:type="EM:StringValue" value="NO"/>
          </facts>
        </logicExpression>
      </action>
    </actionSection>
  </ruleDefinition>
</EM:ExpertModule>
